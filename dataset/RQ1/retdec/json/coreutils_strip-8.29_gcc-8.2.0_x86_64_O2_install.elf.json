{
    "funcInfo": [
        {
            "funcName": "function_403010",
            "funcStartAddr": "403010",
            "funcEndAddr": "403015",
            "decompiledFuncCode": "int64_t function_403010(void) {\n    // 0x403010\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403015",
            "funcStartAddr": "403015",
            "funcEndAddr": "40301a",
            "decompiledFuncCode": "int64_t function_403015(void) {\n    // 0x403015\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40301a",
            "funcStartAddr": "40301a",
            "funcEndAddr": "40301f",
            "decompiledFuncCode": "int64_t function_40301a(void) {\n    // 0x40301a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40301f",
            "funcStartAddr": "40301f",
            "funcEndAddr": "403024",
            "decompiledFuncCode": "int64_t function_40301f(void) {\n    // 0x40301f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403024",
            "funcStartAddr": "403024",
            "funcEndAddr": "403029",
            "decompiledFuncCode": "int64_t function_403024(void) {\n    // 0x403024\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403029",
            "funcStartAddr": "403029",
            "funcEndAddr": "40302e",
            "decompiledFuncCode": "int64_t function_403029(void) {\n    // 0x403029\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40302e",
            "funcStartAddr": "40302e",
            "funcEndAddr": "403033",
            "decompiledFuncCode": "int64_t function_40302e(void) {\n    // 0x40302e\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403033",
            "funcStartAddr": "403033",
            "funcEndAddr": "403038",
            "decompiledFuncCode": "int64_t function_403033(void) {\n    // 0x403033\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403038",
            "funcStartAddr": "403038",
            "funcEndAddr": "40303d",
            "decompiledFuncCode": "int64_t function_403038(void) {\n    // 0x403038\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40303d",
            "funcStartAddr": "40303d",
            "funcEndAddr": "403042",
            "decompiledFuncCode": "int64_t function_40303d(void) {\n    // 0x40303d\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403042",
            "funcStartAddr": "403042",
            "funcEndAddr": "403047",
            "decompiledFuncCode": "int64_t function_403042(void) {\n    // 0x403042\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403047",
            "funcStartAddr": "403047",
            "funcEndAddr": "40304c",
            "decompiledFuncCode": "int64_t function_403047(void) {\n    // 0x403047\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403050",
            "funcStartAddr": "403050",
            "funcEndAddr": "403cd0",
            "decompiledFuncCode": "int64_t function_403050(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a1 & 0xffffffff; // 0x403068\n    g59 = 0;\n    function_40cfd0(a2);\n    setlocale(LC_ALL, (char *)&g17);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    function_416fd0(0x40aa00, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", a3);\n    int64_t v2; // bp-280, 0x403050\n    function_405700(&v2);\n    v2 = 0x400000000;\n    g58 = NULL;\n    g56 = NULL;\n    g53 = 0;\n    *(char *)&g52 = 0;\n    umask(0);\n    int64_t v3 = 0; // 0x403183\n    int64_t v4 = 0; // 0x403183\n    char v5 = 0; // 0x403183\n    char * v6 = NULL; // 0x403183\n    int64_t v7 = 0; // 0x403183\n    int64_t v8 = 0; // 0x403183\n    int64_t v9 = 0; // 0x403183\n    int64_t v10 = 0; // 0x403183\n    int64_t v11 = 0; // 0x403183\n    int64_t v12; // 0x403050\n    int64_t v13; // 0x403050\n    int64_t v14; // 0x403050\n    int64_t v15; // 0x403050\n    int64_t v16; // 0x403050\n    int64_t v17; // 0x403050\n    int64_t v18; // 0x403050\n    char v19; // 0x403050\n    char v20; // 0x403050\n    char v21; // 0x403050\n    char v22; // 0x403050\n    char v23; // 0x403050\n    char v24; // 0x403050\n    char v25; // 0x403050\n    char v26; // 0x403050\n    char v27; // 0x403050\n    char * v28; // 0x403050\n    int64_t v29; // 0x403050\n    while (true) {\n      lab_0x403188_2:\n        // 0x403188\n        v16 = v11;\n        v15 = v10;\n        v14 = v9;\n        v17 = v8;\n        v24 = v23;\n        v21 = v20;\n        v27 = v26;\n        v29 = v7;\n        v28 = v6;\n        v13 = v4;\n        v12 = v3;\n        int32_t v30 = function_412970(v1, a2, \"bcCsDdg:m:o:pt:TvS:Z\", &g3, 0, a6);\n        switch (v30) {\n            case -1: {\n                goto lab_0x40346e;\n            }\n            case 100: {\n                // 0x4033d0\n                *(char *)&g52 = 1;\n                v3 = v12;\n                v4 = v13;\n                v6 = v28;\n                v7 = v29;\n                v25 = v27;\n                v19 = v21;\n                v22 = v24;\n                v8 = v17;\n                v9 = v14;\n                v10 = v15;\n                v11 = v16;\n                goto lab_0x403188;\n            }\n            default: {\n                if (v30 > 100) {\n                    if (v30 == 115) {\n                        // 0x4033a0\n                        g53 = 1;\n                        signal(SIGSTOP, SIG_DFL);\n                        v3 = v12;\n                        v4 = v13;\n                        v6 = v28;\n                        v7 = v29;\n                        v25 = v27;\n                        v19 = v21;\n                        v22 = v24;\n                        v8 = v17;\n                        v9 = v14;\n                        v10 = v15;\n                        v11 = v16;\n                        goto lab_0x403188;\n                    } else {\n                        if (v30 > 115) {\n                            // 0x4032b0\n                            v3 = v12;\n                            v4 = v13;\n                            v6 = v28;\n                            v7 = v29;\n                            v25 = v27;\n                            v19 = v21;\n                            v22 = v24;\n                            v8 = v17;\n                            v9 = v14;\n                            v10 = v15;\n                            v11 = v16;\n                            if (v30 == 118) {\n                                goto lab_0x403188;\n                            } else {\n                                if (v30 > 118) {\n                                    if (v30 != 128) {\n                                        if (v30 != 129) {\n                                            // 0x403249\n                                            function_4046f0(1);\n                                            // UNREACHABLE\n                                        }\n                                        char * v31 = g86; // 0x40335b\n                                        int64_t v32 = function_411510((int64_t)v31); // 0x403362\n                                        *(int64_t *)&g25 = v32;\n                                        v3 = v12;\n                                        v4 = v13;\n                                        v6 = v28;\n                                        v7 = v29;\n                                        v25 = v27;\n                                        v19 = v21;\n                                        v22 = v24;\n                                        v8 = v17;\n                                        v9 = v14;\n                                        v10 = v15;\n                                        v11 = v16;\n                                        goto lab_0x403188;\n                                    } else {\n                                        // 0x4032ca\n                                        v18 = (int64_t)\"WARNING: ignoring --preserve-context; this kernel is not SELinux-enabled\";\n                                        if (g59 == 0) {\n                                            goto lab_0x403454;\n                                        } else {\n                                            // 0x4032e2\n                                            g29 = 0;\n                                            v3 = v12;\n                                            v4 = v13;\n                                            v6 = v28;\n                                            v7 = v29;\n                                            v25 = v27;\n                                            v19 = 1;\n                                            v22 = v24;\n                                            v8 = v17;\n                                            v9 = v14;\n                                            v10 = v15;\n                                            v11 = v16;\n                                            goto lab_0x403188;\n                                        }\n                                    }\n                                } else {\n                                    if (v30 != 116) {\n                                        // 0x403249\n                                        function_4046f0(1);\n                                        // UNREACHABLE\n                                    }\n                                    if (v14 != 0) {\n                                        // 0x403a9b\n                                        error(1, (int32_t)\"multiple target directories specified\" ^ (int32_t)\"multiple target directories specified\", dcgettext(NULL, \"multiple target directories specified\", 5));\n                                        goto lab_0x403abd;\n                                    }\n                                    // 0x403392\n                                    v3 = v12;\n                                    v4 = v13;\n                                    v6 = v28;\n                                    v7 = v29;\n                                    v25 = v27;\n                                    v19 = v21;\n                                    v22 = v24;\n                                    v8 = v17;\n                                    v9 = (int64_t)g86;\n                                    v10 = v15;\n                                    v11 = v16;\n                                    goto lab_0x403188;\n                                }\n                            }\n                        } else {\n                            if (v30 == 109) {\n                                // 0x403430\n                                v3 = (int64_t)g86;\n                                v4 = v13;\n                                v6 = v28;\n                                v7 = v29;\n                                v25 = v27;\n                                v19 = v21;\n                                v22 = v24;\n                                v8 = v17;\n                                v9 = v14;\n                                v10 = v15;\n                                v11 = v16;\n                            } else {\n                                if (v30 > 109) {\n                                    if (v30 != 111) {\n                                        // 0x403230\n                                        v3 = v12;\n                                        v4 = v13;\n                                        v6 = v28;\n                                        v7 = v29;\n                                        v25 = 1;\n                                        v19 = v21;\n                                        v22 = v24;\n                                        v8 = v17;\n                                        v9 = v14;\n                                        v10 = v15;\n                                        v11 = v16;\n                                        if (v30 != 112) {\n                                            // 0x403249\n                                            function_4046f0(1);\n                                            // UNREACHABLE\n                                        }\n                                    } else {\n                                        // 0x4031d6\n                                        *(int64_t *)&g58 = (int64_t)g86;\n                                        v3 = v12;\n                                        v4 = v13;\n                                        v6 = v28;\n                                        v7 = v29;\n                                        v25 = v27;\n                                        v19 = v21;\n                                        v22 = v24;\n                                        v8 = v17;\n                                        v9 = v14;\n                                        v10 = v15;\n                                        v11 = v16;\n                                    }\n                                } else {\n                                    if (v30 != 103) {\n                                        // 0x403249\n                                        function_4046f0(1);\n                                        // UNREACHABLE\n                                    }\n                                    // 0x40329d\n                                    *(int64_t *)&g56 = (int64_t)g86;\n                                    v3 = v12;\n                                    v4 = v13;\n                                    v6 = v28;\n                                    v7 = v29;\n                                    v25 = v27;\n                                    v19 = v21;\n                                    v22 = v24;\n                                    v8 = v17;\n                                    v9 = v14;\n                                    v10 = v15;\n                                    v11 = v16;\n                                }\n                            }\n                            goto lab_0x403188;\n                        }\n                    }\n                } else {\n                    if (v30 == 83) {\n                        // 0x403410\n                        v3 = v12;\n                        v4 = (int64_t)g86;\n                        v6 = v28;\n                        v7 = v29;\n                        v25 = v27;\n                        v19 = v21;\n                        v22 = v24;\n                        v8 = v17;\n                        v9 = v14;\n                        v10 = v15;\n                        v11 = 1;\n                        goto lab_0x403188;\n                    } else {\n                        if (v30 > 83) {\n                            if (v30 == 90) {\n                                char * v33 = g86; // 0x4033e6\n                                if (g59 == 0) {\n                                    // 0x403441\n                                    v3 = v12;\n                                    v4 = v13;\n                                    v6 = v28;\n                                    v7 = v29;\n                                    v25 = v27;\n                                    v19 = v21;\n                                    v22 = v24;\n                                    v8 = v17;\n                                    v9 = v14;\n                                    v10 = v15;\n                                    v11 = v16;\n                                    v18 = (int64_t)\"warning: ignoring --context; it requires an SELinux-enabled kernel\";\n                                    if (v33 == NULL) {\n                                        goto lab_0x403188;\n                                    } else {\n                                        goto lab_0x403454;\n                                    }\n                                } else {\n                                    // 0x4033f1\n                                    g29 = 0;\n                                    v3 = v12;\n                                    v4 = v13;\n                                    v6 = v33 == NULL ? v28 : v33;\n                                    v7 = v29;\n                                    v25 = v27;\n                                    v19 = v21;\n                                    v22 = v33 == NULL ? 1 : v24;\n                                    v8 = v17;\n                                    v9 = v14;\n                                    v10 = v15;\n                                    v11 = v16;\n                                    goto lab_0x403188;\n                                }\n                            } else {\n                                if (v30 > 90) {\n                                    if (v30 != 98) {\n                                        // 0x403240\n                                        v3 = v12;\n                                        v4 = v13;\n                                        v6 = v28;\n                                        v7 = v29;\n                                        v25 = v27;\n                                        v19 = v21;\n                                        v22 = v24;\n                                        v8 = v17;\n                                        v9 = v14;\n                                        v10 = v15;\n                                        v11 = v16;\n                                        if (v30 != 99) {\n                                            // 0x403249\n                                            function_4046f0(1);\n                                            // UNREACHABLE\n                                        }\n                                    } else {\n                                        char * v34 = g86; // 0x40320b\n                                        v3 = v12;\n                                        v4 = v13;\n                                        v6 = v28;\n                                        v7 = v34 == NULL ? v29 : (int64_t)v34;\n                                        v25 = v27;\n                                        v19 = v21;\n                                        v22 = v24;\n                                        v8 = v17;\n                                        v9 = v14;\n                                        v10 = v15;\n                                        v11 = 1;\n                                    }\n                                } else {\n                                    // 0x403258\n                                    v3 = v12;\n                                    v4 = v13;\n                                    v6 = v28;\n                                    v7 = v29;\n                                    v25 = v27;\n                                    v19 = v21;\n                                    v22 = v24;\n                                    v8 = v17;\n                                    v9 = v14;\n                                    v10 = 1;\n                                    v11 = v16;\n                                    if (v30 != 84) {\n                                        // 0x403249\n                                        function_4046f0(1);\n                                        // UNREACHABLE\n                                    }\n                                }\n                                goto lab_0x403188;\n                            }\n                        } else {\n                            if (v30 == -130) {\n                                // 0x403a80\n                                function_4046f0(0);\n                                // UNREACHABLE\n                            }\n                            if (v30 <= 0xffffff7e) {\n                                if (v30 == -131) {\n                                    // 0x40331b\n                                    function_411160((int64_t)g44, \"install\", \"GNU coreutils\", (int64_t)g32, \"David MacKenzie\", 0);\n                                    exit(0);\n                                    // UNREACHABLE\n                                }\n                                goto lab_0x403249;\n                            }\n                            if (v30 != 67) {\n                                // 0x4032f8\n                                v3 = v12;\n                                v4 = v13;\n                                v6 = v28;\n                                v7 = v29;\n                                v25 = v27;\n                                v19 = v21;\n                                v22 = v24;\n                                v8 = 1;\n                                v9 = v14;\n                                v10 = v15;\n                                v11 = v16;\n                                if (v30 != 68) {\n                                    // 0x403249\n                                    function_4046f0(1);\n                                    // UNREACHABLE\n                                }\n                            } else {\n                                // 0x403286\n                                g54 = 1;\n                                v3 = v12;\n                                v4 = v13;\n                                v6 = v28;\n                                v7 = v29;\n                                v25 = v27;\n                                v19 = v21;\n                                v22 = v24;\n                                v8 = v17;\n                                v9 = v14;\n                                v10 = v15;\n                                v11 = v16;\n                            }\n                            goto lab_0x403188;\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40346e:;\n    // 0x40346e\n    int64_t v35; // 0x403050\n    int64_t v36; // 0x403050\n    int64_t v37; // 0x403050\n    int64_t v38; // 0x403050\n    int64_t v39; // 0x403050\n    int64_t v40; // 0x403050\n    int64_t v41; // 0x403050\n    int64_t v42; // 0x403050\n    int64_t v43; // 0x403050\n    int32_t v44; // bp-200, 0x403050\n    char * v45; // 0x403050\n    int64_t v46; // 0x403050\n    int32_t v47; // 0x403050\n    if (*(char *)&g52 != 0) {\n        // 0x403681\n        v36 = v14;\n        v38 = v15;\n        if (g53 != 0) {\n            goto lab_0x403c38;\n        } else {\n            // 0x40368e\n            v43 = a2;\n            if (v14 == 0) {\n                goto lab_0x4034bd;\n            } else {\n                // 0x403697\n                error(1, (int32_t)\"target directory not allowed when installing a directory\" ^ (int32_t)\"target directory not allowed when installing a directory\", dcgettext(NULL, \"target directory not allowed when installing a directory\", 5));\n                v45 = v28;\n                v40 = v17;\n                v46 = v29;\n                v39 = &g90;\n                v41 = v1;\n                v42 = (int32_t)\"target directory not allowed when installing a directory\" ^ (int32_t)\"target directory not allowed when installing a directory\";\n                v35 = v14;\n                v37 = v15;\n                goto lab_0x4036b9;\n            }\n        }\n    } else {\n        // 0x40347b\n        v43 = a2;\n        if (v14 == 0) {\n            goto lab_0x4034bd;\n        } else {\n            int32_t v48 = __xstat(1, (char *)v14, (struct stat *)&v44); // 0x403490\n            if (v17 == 0 == (v48 != 0)) {\n                goto lab_0x403af2;\n            } else {\n                // 0x4034a2\n                v43 = v14;\n                if (v48 != 0) {\n                    goto lab_0x4034bd;\n                } else {\n                    // 0x4034a6\n                    v43 = v14;\n                    if ((v47 & 0xf000) != 0x4000) {\n                        goto lab_0x403abd;\n                    } else {\n                        goto lab_0x4034bd;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x403874:;\n    // 0x403874\n    char * v49; // 0x403050\n    char * v50; // 0x403050\n    int64_t v51; // 0x403850\n    int64_t v52; // 0x403867\n    if ((char)function_404090(v51, v52, &v2) == 0) {\n        // 0x403825\n        free((int64_t *)v52);\n        v49 = (char *)1;\n        goto lab_0x403835;\n    } else {\n        // 0x403888\n        free((int64_t *)v52);\n        v49 = v50;\n        goto lab_0x403835;\n    }\n  lab_0x403835:;\n    // 0x403835\n    int64_t v53; // 0x403050\n    int64_t v54 = v53 + 1; // 0x403835\n    char * v55 = v49; // 0x40383e\n    char * v56 = v49; // 0x40383e\n    int64_t v57 = v52; // 0x40383e\n    v53 = v54;\n    int64_t v58; // 0x403050\n    if (0x100000000 * v58 >> 32 <= v54) {\n        return (int64_t)v55 & 0xffffffff;\n    }\n    goto lab_0x403844;\n  lab_0x403188:\n    // 0x403188\n    v26 = v25;\n    v20 = v19;\n    v23 = v22;\n    goto lab_0x403188_2;\n  lab_0x403454:\n    // 0x403454\n    error(0, 0, dcgettext(NULL, (char *)v18, 5));\n    v3 = v12;\n    v4 = v13;\n    v6 = v28;\n    v7 = v29;\n    v25 = v27;\n    v19 = v21;\n    v22 = v24;\n    v8 = v17;\n    v9 = v14;\n    v10 = v15;\n    v11 = v16;\n    goto lab_0x403188;\n  lab_0x403c38:\n    // 0x403c38\n    error(1, (int32_t)\"the strip option may not be used when installing a directory\" ^ (int32_t)\"the strip option may not be used when installing a directory\", dcgettext(NULL, \"the strip option may not be used when installing a directory\", 5));\n    int64_t v61 = v36; // 0x403c55\n    int64_t v62 = v38; // 0x403c55\n    goto lab_0x403c5a;\n  lab_0x4034bd:;\n    int64_t v165 = 0; // 0x4034c2\n    int64_t v166 = v43; // 0x4034c2\n    if (v16 != 0) {\n        // 0x4038ba\n        v165 = function_40a930((int64_t)dcgettext(NULL, \"backup type\", 5), v29);\n        v166 = v29;\n    }\n    // 0x4034c8\n    v2 = 0x100000000 * v165 >> 32;\n    function_40a380(v13);\n    char * v140 = v28; // 0x4034db\n    int64_t v141 = v17; // 0x4034db\n    int64_t v142 = v29; // 0x4034db\n    int64_t v143 = v1; // 0x4034db\n    int64_t v144 = v166; // 0x4034db\n    int64_t v145 = v14; // 0x4034db\n    int64_t v146 = a2; // 0x4034db\n    int64_t v147 = v15; // 0x4034db\n    int64_t v91; // 0x403050\n    int64_t v96; // 0x403050\n    int64_t v99; // 0x403050\n    int64_t v103; // 0x403050\n    int64_t v93; // 0x403050\n    int64_t v101; // 0x403050\n    if (v21 == 0) {\n        goto lab_0x403797;\n    } else {\n        // 0x4034e1\n        v103 = v17;\n        v93 = v1;\n        v101 = v166;\n        v91 = v14;\n        v96 = a2;\n        v99 = v15;\n        if (v28 == NULL != (v24 == 0)) {\n            // 0x403bb4\n            error(1, (int32_t)\"cannot set target context and preserve it\" ^ (int32_t)\"cannot set target context and preserve it\", dcgettext(NULL, \"cannot set target context and preserve it\", 5));\n            int64_t v167 = (int64_t)\"missing file operand\"; // 0x403bd1\n            int64_t v168 = v167;\n            error(0, 0, dcgettext(NULL, (char *)v168, 5));\n            // 0x403249\n            function_4046f0(1);\n            // UNREACHABLE\n        }\n        goto lab_0x4034f8;\n    }\n  lab_0x403c5a:\n    // 0x403c5a\n    function_40ea00(4, v61);\n    int32_t err_num = v62;\n    error(1, err_num, dcgettext(NULL, \"failed to access %s\", 5));\n    int32_t err_num2 = err_num; // 0x403c8b\n    int64_t v63 = v61; // 0x403c8b\n    goto lab_0x403c90;\n  lab_0x403797:;\n    int64_t v161 = v145;\n    char * v162 = v140;\n    v103 = v141;\n    v93 = v143;\n    v101 = v144;\n    v91 = v161;\n    v96 = v146;\n    v99 = v147;\n    int64_t v116; // 0x403050\n    int64_t v113; // 0x403050\n    int64_t v115; // 0x403050\n    int64_t v112; // 0x403050\n    int64_t v114; // 0x403050\n    if (v162 == NULL) {\n        goto lab_0x4034f8;\n    } else {\n        int32_t * v163 = __errno_location(); // 0x4037a3\n        *v163 = 95;\n        int64_t v164 = function_40ec50((int64_t)v162); // 0x4037b6\n        char * format = dcgettext(NULL, \"failed to set default file creation context to %s\", 5); // 0x4037ca\n        uint32_t err_num3 = *v163; // 0x4037cf\n        error(1, err_num3, format);\n        v114 = v142;\n        v58 = (int64_t)v163;\n        v113 = v164;\n        v112 = err_num3;\n        v115 = 1;\n        v116 = v161;\n        goto lab_0x4037e3;\n    }\n  lab_0x403af2:\n    // 0x403af2\n    function_40ea00(4, v14);\n    error(1, *__errno_location(), dcgettext(NULL, \"failed to access %s\", 5));\n    int64_t v104 = v29; // 0x403b2a\n    goto lab_0x403b2f;\n  lab_0x403c90:\n    // 0x403c90\n    function_40ea00(4, v63);\n    error(1, err_num2, dcgettext(NULL, \"target %s is not a directory\", 5));\n    return &g90;\n  lab_0x4036b9:;\n    int64_t v64 = v41;\n    int64_t v65 = v46;\n    int64_t v66 = v40;\n    int64_t v67 = v66; // 0x4036bb\n    int64_t v68 = v65; // 0x4036bb\n    int64_t v69 = v64; // 0x4036bb\n    int64_t v70 = v42; // 0x4036bb\n    int64_t v71 = v35; // 0x4036bb\n    int64_t v72 = v37; // 0x4036bb\n    int64_t v73; // 0x403050\n    int64_t v74; // 0x403050\n    int64_t v75; // 0x403050\n    int64_t * v76; // 0x4036e0\n    int64_t v77; // 0x4036e0\n    if ((char)v39 == 0) {\n        goto lab_0x403543;\n    } else {\n        // 0x4036c1\n        v67 = v66;\n        v68 = v65;\n        v69 = 1;\n        v70 = v42;\n        v71 = 0;\n        v72 = v37;\n        if (v64 == 1) {\n            goto lab_0x403543;\n        } else {\n            // 0x4036cd\n            v76 = (int64_t *)(v65 - 8 + (0x100000000 * v64 >> 29));\n            v77 = *v76;\n            int64_t v78 = function_40ad40(v77, v42); // 0x4036e9\n            char v79 = v37;\n            int64_t v80 = v78; // 0x4036fb\n            int64_t v81 = -1; // 0x4036fb\n            int64_t v82 = 0; // 0x4036fb\n            while (v81 != 0) {\n                int64_t v83 = v80;\n                v81--;\n                bool v84; // 0x403050\n                v80 = v83 + (v84 ? -1 : 1);\n                v82 = v81;\n                if (*(char *)v83 == v79) {\n                    // break -> \n                    break;\n                }\n                v82 = 0;\n            }\n            int64_t v85 = -2 - v82; // 0x403703\n            int64_t v86 = 1; // 0x403707\n            if (v85 != 0) {\n                // 0x403709\n                v86 = *(char *)(v78 - 1 + v85) == 47;\n            }\n            // 0x403715\n            v73 = v86;\n            int32_t v87 = __xstat(1, (char *)v77, (struct stat *)&v44); // 0x403725\n            v75 = v37;\n            if (v87 == 0) {\n                goto lab_0x403a65;\n            } else {\n                uint32_t v88 = *__errno_location(); // 0x403737\n                v75 = 0;\n                if (v88 == 0) {\n                    goto lab_0x403a65;\n                } else {\n                    int64_t v89 = v88; // 0x403737\n                    v74 = v89;\n                    v61 = v77;\n                    v62 = v89;\n                    if (v88 != 2) {\n                        goto lab_0x403c5a;\n                    } else {\n                        goto lab_0x40374d;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x4034f8:;\n    int64_t v90 = v91;\n    int32_t v92 = (int32_t)v93 - g41; // 0x4034ff\n    int64_t v94 = v92; // 0x4034ff\n    int64_t v95 = 8 * (int64_t)g41 + v96; // 0x403501\n    int64_t v97 = (int64_t)(*(char *)&g52 ^ 1) & (int64_t)(v90 == 0); // 0x40351b\n    if (v97 < v94) {\n        int64_t v98 = v99;\n        int64_t v100 = v101;\n        int64_t v102 = v103;\n        v45 = NULL;\n        v40 = v102;\n        v46 = v95;\n        v39 = v97;\n        v41 = v94;\n        v42 = v100;\n        v35 = v90;\n        v37 = v98;\n        if ((char)v98 == 0) {\n            goto lab_0x4036b9;\n        } else {\n            if (v90 != 0) {\n                // 0x403b6c\n                error(1, (int32_t)\"cannot combine --target-directory (-t) and --no-target-directory (-T)\" ^ (int32_t)\"cannot combine --target-directory (-t) and --no-target-directory (-T)\", dcgettext(NULL, \"cannot combine --target-directory (-t) and --no-target-directory (-T)\", 5));\n                goto lab_0x403b8e;\n            } else {\n                // 0x40353a\n                v67 = v102;\n                v68 = v95;\n                v69 = v94;\n                v70 = v100;\n                v71 = v90;\n                v72 = v98;\n                v104 = v95;\n                if (v92 > 2) {\n                    goto lab_0x403b2f;\n                } else {\n                    goto lab_0x403543;\n                }\n            }\n        }\n    } else {\n        goto lab_0x403b8e;\n    }\n  lab_0x403b2f:\n    // 0x403b2f\n    function_40ea00(4, *(int64_t *)(v104 + 16));\n    // 0x403b4f\n    error(0, 0, dcgettext(NULL, (char *)(int64_t)\"extra operand %s\", 5));\n    // 0x403249\n    function_4046f0(1);\n    // UNREACHABLE\n  lab_0x403543:;\n    int64_t v105 = v71;\n    int64_t v106 = v69;\n    int64_t v107 = v68;\n    int64_t v108 = v67;\n    int64_t v109 = v70; // 0x40354b\n    if (v12 == 0) {\n        goto lab_0x40359d;\n    } else {\n        int64_t v110 = function_40ca80(v12); // 0x403550\n        if (v110 == 0) {\n            // 0x403c06\n            function_40ec50(v12);\n            error(1, (int32_t)\"invalid mode %s\" ^ (int32_t)\"invalid mode %s\", dcgettext(NULL, \"invalid mode %s\", 5));\n            v36 = v105;\n            v38 = v72;\n            goto lab_0x403c38;\n        } else {\n            // 0x403561\n            g28 = function_40ce50(0, 0, 0, v110, 0);\n            g27 = function_40ce50(0, 1, 0, v110, (int32_t)&g26);\n            free((int64_t *)v110);\n            v109 = 1;\n            goto lab_0x40359d;\n        }\n    }\n  lab_0x403b8e:\n    // 0x403b8e\n    if (v92 != 1) {\n        // 0x403be0\n        error(0, 0, dcgettext(NULL, (char *)(int64_t)\"missing file operand\", 5));\n      lab_0x403249:\n        // 0x403249\n        function_4046f0(1);\n        // UNREACHABLE\n    }\n    // 0x403b93\n    function_40ea00(4, *(int64_t *)v95);\n    // 0x403b4f\n    error(0, 0, dcgettext(NULL, (char *)(int64_t)\"missing destination file operand after %s\", 5));\n    // 0x403249\n    function_4046f0(1);\n    // UNREACHABLE\n  lab_0x4037e3:;\n    int64_t v111 = v112;\n    int64_t v60 = v113;\n    int64_t v59 = v114;\n    function_409a90(v115, v111);\n    if (v116 != 0) {\n        // 0x4037f1\n        function_4056a0(&v2, v111);\n        v56 = NULL;\n        v57 = v111;\n        v53 = 0;\n        while (true) {\n          lab_0x403844:\n            // 0x403844\n            v50 = v56;\n            v51 = *(int64_t *)(8 * v53 + v59);\n            function_40ad40(v51, v57);\n            v52 = function_40b0c0();\n            if ((v60 & (int64_t)(v53 == 0)) != 0) {\n                // 0x40380c\n                if ((char)function_403db0(v51, v52, &v2, 1) != 0) {\n                    goto lab_0x403874;\n                } else {\n                    // 0x403825\n                    free((int64_t *)v52);\n                    v49 = (char *)1;\n                    goto lab_0x403835;\n                }\n            } else {\n                goto lab_0x403874;\n            }\n        }\n        // 0x40366b\n        return (int64_t)v55 & 0xffffffff;\n    }\n    int64_t v117 = *(int64_t *)(v59 + 8); // 0x4038e2\n    int64_t v118 = *(int64_t *)v59; // 0x4038e6\n    if ((char)v60 == 0) {\n        uint64_t v119 = function_404090(v118, v117, &v2) & 0xffffffff;\n        // 0x40366b\n        return (int64_t)(char *)(v119 % 256 ^ 1) & 0xffffffff;\n    }\n    int64_t v120 = function_403db0(v118, v117, &v2, 0); // 0x4038fb\n    int64_t v121 = v118; // 0x403904\n    int64_t v122 = v117; // 0x403904\n    if ((char)v120 == 0) {\n        // 0x40366b\n        return (int64_t)(char *)1 & 0xffffffff;\n    }\n    goto lab_0x403a4d;\n  lab_0x403abd:\n    // 0x403abd\n    function_40ea00(4, v14);\n    error(1, (int32_t)\"target %s is not a directory\" ^ (int32_t)\"target %s is not a directory\", dcgettext(NULL, \"target %s is not a directory\", 5));\n    goto lab_0x403af2;\n  lab_0x40359d:;\n    int64_t v156 = v109; // 0x4035a2\n    if (v5 != 0 == g53 == 0) {\n        // 0x403957\n        error(0, (int32_t)\"WARNING: ignoring --strip-program option as -s option was not specified\" ^ (int32_t)\"WARNING: ignoring --strip-program option as -s option was not specified\", dcgettext(NULL, \"WARNING: ignoring --strip-program option as -s option was not specified\", 5));\n        v156 = (int32_t)\"WARNING: ignoring --strip-program option as -s option was not specified\" ^ (int32_t)\"WARNING: ignoring --strip-program option as -s option was not specified\";\n    }\n    int64_t v157 = v156; // 0x4035b8\n    if (g54 != 0) {\n        // 0x4035ba\n        if (v27 != 0) {\n            // 0x403be0\n            error(0, 0, dcgettext(NULL, (char *)(int64_t)\"options --compare (-C) and --preserve-timestamps are mutually exclusive\", 5));\n            // 0x403249\n            function_4046f0(1);\n            // UNREACHABLE\n        }\n        // 0x4035c5\n        if (g53 != 0) {\n            // 0x403be0\n            error(0, 0, dcgettext(NULL, (char *)(int64_t)\"options --compare (-C) and --strip are mutually exclusive\", 5));\n            // 0x403249\n            function_4046f0(1);\n            // UNREACHABLE\n        }\n        // 0x4035dc\n        v157 = (int64_t)\"options --compare (-C) and --strip are mutually exclusive\";\n        if ((g28 & -0xf200) != 0) {\n            // 0x403933\n            error(0, (int32_t)\"the --compare (-C) option is ignored when you specify a mode with non-permission bits\" ^ (int32_t)\"the --compare (-C) option is ignored when you specify a mode with non-permission bits\", dcgettext(NULL, \"the --compare (-C) option is ignored when you specify a mode with non-permission bits\", 5));\n            v157 = (int32_t)\"the --compare (-C) option is ignored when you specify a mode with non-permission bits\" ^ (int32_t)\"the --compare (-C) option is ignored when you specify a mode with non-permission bits\";\n        }\n    }\n    int64_t v158 = v157;\n    int32_t v154; // 0x403050\n    int64_t v155; // 0x403050\n    int64_t v126; // 0x403050\n    if (g58 == NULL) {\n        // 0x4038a1\n        g57 = -1;\n        v126 = v158;\n        goto lab_0x403618;\n    } else {\n        struct passwd * v159 = getpwnam(g58); // 0x4035fc\n        if (v159 == NULL) {\n            int64_t v160 = function_411570((int64_t)g58, 0, 0, (int64_t *)&v44, 0, a6); // 0x403991\n            if ((int32_t)v160 != 0) {\n                goto lab_0x4039b0;\n            } else {\n                // 0x40399a\n                v154 = v44;\n                v155 = 0;\n                if (v44 > -1) {\n                    goto lab_0x40360d;\n                } else {\n                    goto lab_0x4039b0;\n                }\n            }\n        } else {\n            // 0x40360a\n            v154 = *(int32_t *)((int64_t)v159 + 16);\n            v155 = v158;\n            goto lab_0x40360d;\n        }\n    }\n  lab_0x403a4d:;\n    uint64_t v123 = function_404090(v121, v122, &v2); // 0x403a58\n    // 0x40366b\n    return (int64_t)(char *)(v123 % 2 % 256 ^ 1) & 0xffffffff;\n  lab_0x403a65:\n    // 0x403a65\n    v74 = 0;\n    if ((v47 & 0xf000) == 0x4000) {\n        int64_t v124 = v64 + 0xffffffff; // 0x403a87\n        v67 = v66;\n        v68 = v65;\n        v69 = v124 & 0xffffffff;\n        v70 = v77;\n        v71 = *(int64_t *)((0x100000000 * v124 >> 29) + v65);\n        v72 = v75;\n        goto lab_0x403543;\n    } else {\n        goto lab_0x40374d;\n    }\n  lab_0x403618:;\n    int64_t v125 = v126;\n    int64_t v127 = (int64_t)g56; // 0x403618\n    int64_t * v128; // 0x403050\n    int32_t v129; // 0x403050\n    int64_t v130; // 0x403050\n    int64_t v131; // 0x403050\n    int64_t v132; // 0x403050\n    int64_t v133; // 0x403050\n    int64_t v134; // 0x403050\n    int64_t v135; // 0x403050\n    int64_t v136; // 0x403050\n    if (g56 == NULL) {\n        // 0x403892\n        g55 = -1;\n        v131 = v106;\n        v136 = v125;\n        v134 = v127;\n        goto lab_0x403644;\n    } else {\n        struct group * v137 = getgrnam(g56); // 0x403628\n        if (v137 == NULL) {\n            // 0x403628\n            v128 = (int64_t *)&v44;\n            v132 = v106;\n            goto lab_0x4039e4;\n        } else {\n            // 0x403636\n            v129 = *(int32_t *)((int64_t)v137 + 16);\n            v130 = v106;\n            v135 = v125;\n            v133 = v127;\n            goto lab_0x403639;\n        }\n    }\n  lab_0x40374d:;\n    int64_t v138 = v74;\n    if (v73 != 0) {\n        // 0x40374d\n        err_num2 = v138;\n        v63 = v77;\n        goto lab_0x403c90;\n    } else {\n        // 0x403756\n        v67 = v66;\n        v68 = v65;\n        v69 = 2;\n        v70 = v77;\n        v71 = 0;\n        v72 = v138;\n        if (v64 == 2) {\n            goto lab_0x403543;\n        } else {\n            int64_t v139 = function_40ea00(4, *v76); // 0x40376a\n            error(1, (int32_t)\"target %s is not a directory\" ^ (int32_t)\"target %s is not a directory\", dcgettext(NULL, \"target %s is not a directory\", 5));\n            v140 = v45;\n            v141 = v66;\n            v142 = v65;\n            v143 = v139;\n            v144 = (int32_t)\"target %s is not a directory\" ^ (int32_t)\"target %s is not a directory\";\n            v145 = 0;\n            v146 = v73;\n            v147 = v138;\n            goto lab_0x403797;\n        }\n    }\n  lab_0x4039b0:;\n    int64_t v148 = function_40ec50((int64_t)g58); // 0x4039b7\n    error(1, (int32_t)\"invalid user %s\" ^ (int32_t)\"invalid user %s\", dcgettext(NULL, \"invalid user %s\", 5));\n    v128 = (int64_t *)&v44;\n    v132 = v148;\n    goto lab_0x4039e4;\n  lab_0x40360d:\n    // 0x40360d\n    g57 = v154;\n    endpwent();\n    v126 = v155;\n    goto lab_0x403618;\n  lab_0x403644:\n    // 0x403644\n    v114 = v107;\n    v58 = v131;\n    v113 = v108;\n    v112 = v136;\n    v115 = v134;\n    v116 = v105;\n    if (*(char *)&g52 != 0) {\n        // 0x403651\n        int64_t v150; // 0x403050\n        int64_t v151 = function_40f910(v150 & 0xffffffff, v107, 0x403f50, &v2); // 0x403662\n        v55 = (char *)(0x100000000 * v151 >> 32);\n        char * v152 = v55; // 0x40366b\n        return (int64_t)v152 & 0xffffffff;\n    }\n    goto lab_0x4037e3;\n  lab_0x4039e4:;\n    int64_t v149 = (int64_t)g56; // 0x4039e4\n    if ((int32_t)function_411570(v149, 0, 0, v128, 0, a6) != 0) {\n        goto lab_0x403a19;\n    } else {\n        // 0x403a03\n        v129 = v44;\n        v130 = v132;\n        v135 = 0;\n        v133 = v149;\n        if (v44 > -1) {\n            goto lab_0x403639;\n        } else {\n            goto lab_0x403a19;\n        }\n    }\n  lab_0x403639:\n    // 0x403639\n    g55 = v129;\n    endgrent();\n    v131 = v130;\n    v136 = v135;\n    v134 = v133;\n    goto lab_0x403644;\n  lab_0x403a19:;\n    int64_t v153 = function_40ec50((int64_t)g56); // 0x403a20\n    error(1, (int32_t)\"invalid group %s\" ^ (int32_t)\"invalid group %s\", dcgettext(NULL, \"invalid group %s\", 5));\n    v121 = v153;\n    v122 = v105;\n    goto lab_0x403a4d;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "403cd0",
            "funcEndAddr": "403cfb",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x403cd0\n    int64_t v1; // 0x403cd0\n    __libc_start_main(0x403050, (int32_t)a4, (char **)&v1, (void (*)())0x416f60, (void (*)())0x416fc0, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403cfb",
            "funcStartAddr": "403cfb",
            "funcEndAddr": "403d1a",
            "decompiledFuncCode": "int64_t function_403cfb(void) {\n    // 0x403cfb\n    return 0x61f4e8;\n}\n"
        },
        {
            "funcName": "function_403d1a",
            "funcStartAddr": "403d1a",
            "funcEndAddr": "403d51",
            "decompiledFuncCode": "int64_t function_403d1a(void) {\n    // 0x403d1a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_403d51",
            "funcStartAddr": "403d51",
            "funcEndAddr": "403da8",
            "decompiledFuncCode": "int64_t function_403d51(void) {\n    // 0x403d51\n    if (g48 != 0) {\n        // 0x403da7\n        int64_t result; // 0x403d51\n        return result;\n    }\n    int64_t v1 = g49; // 0x403d84\n    int64_t result2; // 0x403d96\n    if (g49 >= ((int64_t)&g21 - (int64_t)&g20 >> 3) - 1) {\n        // 0x403d96\n        result2 = function_403cfb();\n        g48 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g21 - (int64_t)&g20 >> 3) - 1) {\n        // 0x403d86\n        v1++;\n    }\n    // 0x403d7a\n    g49 = v1;\n    // 0x403d96\n    result2 = function_403cfb();\n    g48 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403da8",
            "funcStartAddr": "403da8",
            "funcEndAddr": "403dad",
            "decompiledFuncCode": "int64_t function_403da8(void) {\n    // 0x403da8\n    return function_403d1a();\n}\n"
        },
        {
            "funcName": "function_403db0",
            "funcStartAddr": "403db0",
            "funcEndAddr": "403f4a",
            "decompiledFuncCode": "int64_t function_403db0(int64_t a1, int64_t a2, int64_t * a3, int64_t a4) {\n    int64_t v1 = (int64_t)a3;\n    int64_t v2 = 0;\n    int64_t result; // 0x403db0\n    int64_t v3; // 0x403db0\n    if ((char)a4 == 0 && (char)v3 == 47 && (char)v3 == 47) {\n        // 0x403ea1\n        function_40f8a0(&v2);\n        int64_t v4 = function_40c5e0(a2, &v2, 0x404020, v1); // 0x403ec3\n        result = 1;\n        if (v4 == -1) {\n            // 0x403ece\n            function_40ea00(4, a2);\n            error(0, *__errno_location(), dcgettext(NULL, \"cannot create directory %s\", 5));\n            result = (int32_t)&g90 ^ (int32_t)&g90;\n        }\n        // 0x403e52\n        return result;\n    }\n    int64_t v5 = function_40c5e0(a2, &v2, 0x404020, v1); // 0x403de3\n    int32_t * err_num = __errno_location(); // 0x403deb\n    if (v5 == -1) {\n        // 0x403df9\n        function_40ea00(4, a2);\n        error(0, *err_num, dcgettext(NULL, \"cannot create directory %s\", 5));\n        function_40f770(&v2);\n        function_40f8a0(&v2);\n        // 0x403e52\n        return 0;\n    }\n    int64_t v6 = function_40f770(&v2); // 0x403e67\n    function_40f8a0(&v2);\n    int32_t v7 = v6; // 0x403e7c\n    result = v7 >= 0 != v7 != 0;\n    if (v7 >= 0 != v7 != 0 && v7 != 0) {\n        // 0x403f10\n        function_40ea00(4, a2);\n        error(0, *err_num, dcgettext(NULL, \"cannot create directory %s\", 5));\n        result = (int32_t)&g90 ^ (int32_t)&g90;\n    }\n    // 0x403e52\n    return result;\n}\n"
        },
        {
            "funcName": "function_403f50",
            "funcStartAddr": "403f50",
            "funcEndAddr": "403fb2",
            "decompiledFuncCode": "int64_t function_403f50(int64_t a1, int64_t a2, int64_t a3) {\n    uint64_t v1 = function_40c770(a1, a2, 0x404020, a3, g27, 0x404000, (int64_t)g26, (int64_t)g57, (int64_t)g55, 0) & 0xffffffff ^ 1; // 0x403f8e\n    if ((char)v1 != 0) {\n        // 0x403fa9\n        return v1 % 256;\n    }\n    // 0x403f98\n    if (*(char *)(a3 + 33) != 0) {\n        // 0x403f9e\n        *__errno_location() = 95;\n    }\n    // 0x403fa9\n    return v1 % 256;\n}\n"
        },
        {
            "funcName": "function_403fc0",
            "funcStartAddr": "403fc0",
            "funcEndAddr": "403ff7",
            "decompiledFuncCode": "int64_t function_403fc0(int64_t a1) {\n    int64_t v1 = function_40ea00(4, a1); // 0x403fc9\n    char * v2 = dcgettext(NULL, \"creating directory %s\", 5); // 0x403fdd\n    int64_t v3; // 0x403fc0\n    return function_404ae0((int64_t)g44, (int64_t)v2, v1, v3, v3, v3);\n}\n"
        },
        {
            "funcName": "function_404000",
            "funcStartAddr": "404000",
            "funcEndAddr": "404012",
            "decompiledFuncCode": "int64_t function_404000(int64_t a1, int64_t a2) {\n    // 0x404000\n    if (*(char *)(a2 + 46) != 0) {\n        // 0x404010\n        return function_403fc0(a1);\n    }\n    // 0x404006\n    int64_t result; // 0x404000\n    return result;\n}\n"
        },
        {
            "funcName": "function_404020",
            "funcStartAddr": "404020",
            "funcEndAddr": "404081",
            "decompiledFuncCode": "int64_t function_404020(int64_t a1, int64_t path, int64_t a3) {\n    // 0x404020\n    if (*(char *)(a3 + 33) != 0) {\n        // 0x404037\n        *__errno_location() = 95;\n    }\n    int32_t v1 = mkdir((char *)path, 493); // 0x40404a\n    int64_t result = v1; // 0x40404a\n    if (v1 != 0 || *(char *)(a3 + 46) == 0) {\n        // 0x404059\n        return result;\n    }\n    // 0x404068\n    function_403fc0(a1);\n    return result & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_404090",
            "funcStartAddr": "404090",
            "funcEndAddr": "4046eb",
            "decompiledFuncCode": "int64_t function_404090(int64_t a1, int64_t a2, int64_t * a3) {\n    int64_t v1 = (int64_t)a3;\n    int64_t v2; // 0x404090\n    if (*(char *)(v1 + 31) == 0) {\n        goto lab_0x4040ca;\n    } else {\n        // 0x4040b0\n        int64_t v3; // bp-488, 0x404090\n        if (__xstat(1, (char *)a1, (struct stat *)&v3) != 0) {\n            // 0x404430\n            function_40ea00(4, a1);\n            v2 = (int64_t)\"cannot stat %s\";\n            goto lab_0x40444a;\n        } else {\n            goto lab_0x4040ca;\n        }\n    }\n  lab_0x4046d6_2:;\n    // 0x4046d6\n    int32_t fd; // 0x4041e2\n    close(fd);\n    int32_t fd2; // 0x4041f9\n    close(fd2);\n    int64_t v4 = a2; // 0x4046e6\n    int64_t v5 = v1; // 0x4046e6\n    goto lab_0x404378;\n  lab_0x4040ca:;\n    // 0x4040ca\n    int32_t v38; // 0x404090\n    int32_t stat_loc; // bp-200, 0x404090\n    char * path3; // 0x4040fb\n    char * path4; // 0x40411b\n    int32_t v37; // 0x404090\n    if (g54 == 0) {\n        // 0x404370\n        v4 = a2;\n        v5 = v1;\n        goto lab_0x404378;\n    } else {\n        // 0x4040d7\n        if ((g28 & -0xf200) != 0) {\n            // 0x404370\n            v4 = a2;\n            v5 = v1;\n            goto lab_0x404378;\n        } else {\n            // 0x4040eb\n            path3 = (char *)a1;\n            int64_t v42; // bp-344, 0x404090\n            int32_t v43 = __lxstat(1, path3, (struct stat *)&v42); // 0x4040fb\n            v4 = a2;\n            v5 = v1;\n            if (v43 != 0) {\n                goto lab_0x404378;\n            } else {\n                // 0x404110\n                path4 = (char *)a2;\n                int32_t v44 = __lxstat(1, path4, (struct stat *)&stat_loc); // 0x40411b\n                v4 = a2;\n                v5 = v1;\n                if (v44 != 0) {\n                    goto lab_0x404378;\n                } else {\n                    // 0x404128\n                    v4 = a2;\n                    v5 = v1;\n                    if ((v37 & 0xf000) != 0x8000) {\n                        goto lab_0x404378;\n                    } else {\n                        // 0x404143\n                        v4 = a2;\n                        v5 = v1;\n                        if ((v37 & 0xf000) != 0x8000) {\n                            goto lab_0x404378;\n                        } else {\n                            // 0x40415e\n                            v4 = a2;\n                            v5 = v1;\n                            if (true == ((v37 | v37) & -0xf200) == 0) {\n                                // 0x404181\n                                if (g28 != v37 % 0x1000) {\n                                    goto lab_0x404378;\n                                } else {\n                                    // 0x404190\n                                    v38 = g57;\n                                    if (g57 == -1) {\n                                        int32_t * v45 = __errno_location(); // 0x40460d\n                                        *v45 = 0;\n                                        int32_t v46 = getuid(); // 0x40461b\n                                        v38 = v46;\n                                        if (v46 != -1) {\n                                            goto lab_0x40419f;\n                                        } else {\n                                            // 0x404629\n                                            v38 = v46;\n                                            v4 = a2;\n                                            v5 = v1;\n                                            if (*v45 == 0) {\n                                                goto lab_0x40419f;\n                                            } else {\n                                                goto lab_0x404378;\n                                            }\n                                        }\n                                    } else {\n                                        goto lab_0x40419f;\n                                    }\n                                }\n                            } else {\n                                goto lab_0x404378;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x404378:;\n    int64_t v6 = function_409810(a1, v4, 0, v5, (int64_t *)&stat_loc, 0); // 0x404389\n    int64_t v7 = v4; // 0x404390\n    int64_t v8 = v5; // 0x404390\n    if ((char)v6 == 0) {\n        // 0x404398\n        return 0;\n    }\n    goto lab_0x404279;\n  lab_0x40444a:\n    // 0x40444a\n    error(0, *__errno_location(), dcgettext(NULL, (char *)v2, 5));\n    // 0x404398\n    return 0;\n  lab_0x404279:;\n    // 0x404279\n    int64_t v9; // 0x404090\n    if (g53 != 0) {\n        int32_t pid = fork(); // 0x4043b0\n        v9 = (int64_t)\"fork system call failed\";\n        if (pid != -1) {\n            if (pid == 0) {\n                char (*file)[6] = g25; // 0x404670\n                execlp(file, file);\n                int64_t v10 = function_40ea00(4, (int64_t)file); // 0x404691\n                char * format = dcgettext(NULL, \"cannot run %s\", 5); // 0x4046a5\n                int32_t * v11 = __errno_location(); // 0x4046ad\n                int32_t err_num = *v11; // 0x4046bd\n                error(1, err_num, format);\n                goto lab_0x4046c6;\n            } else {\n                int32_t v12 = waitpid(pid, &stat_loc, 0); // 0x40447f\n                v9 = (int64_t)\"waiting for strip\";\n                if (v12 < 0) {\n                    goto lab_0x4043c8;\n                } else {\n                    uint32_t v13 = stat_loc; // 0x40448c\n                    if ((v13 / 256 % 256 || v13 % 128) != 0) {\n                        // 0x404550\n                        error(0, (int32_t)\"strip process terminated abnormally\" ^ (int32_t)\"strip process terminated abnormally\", dcgettext(NULL, \"strip process terminated abnormally\", 5));\n                        goto lab_0x4043e5;\n                    } else {\n                        // 0x4044a1\n                        int64_t v14; // 0x404090\n                        char v15 = *(char *)(v14 + 31); // 0x4044a1\n                        if (v15 == 0) {\n                            goto lab_0x4042e3;\n                        } else {\n                            char v16 = g53; // 0x4044ab\n                            if (v16 != 0) {\n                                goto lab_0x40429c;\n                            } else {\n                                goto lab_0x40428c;\n                            }\n                        }\n                    }\n                }\n            }\n        } else {\n            goto lab_0x4043c8;\n        }\n    } else {\n        // 0x404286\n        if (*(char *)(v8 + 31) == 0) {\n            goto lab_0x4042e3;\n        } else {\n            goto lab_0x40428c;\n        }\n    }\n  lab_0x4043c8:;\n    int64_t v17 = v9;\n    char * format2 = dcgettext(NULL, (char *)v17, 5); // 0x4043ca\n    int32_t * v18 = __errno_location(); // 0x4043d2\n    int32_t err_num2 = *v18; // 0x4043dc\n    error(0, err_num2, format2);\n    goto lab_0x4043e5;\n  lab_0x4042e3:;\n    char * path2 = (char *)v7;\n    int64_t v23; // 0x404090\n    if ((g55 & g57) == -1) {\n        goto lab_0x404308;\n    } else {\n        // 0x4042f8\n        if (lchown(path2, g57, g55) != 0) {\n            // 0x4044c0\n            function_40ea00(4, v7);\n            v23 = (int64_t)\"cannot change ownership of %s\";\n            goto lab_0x4044da;\n        } else {\n            goto lab_0x404308;\n        }\n    }\n  lab_0x40428c:\n    if ((v37 & 0xf000) == 0x8000) {\n        goto lab_0x4042e3;\n    } else {\n        goto lab_0x40429c;\n    }\n  lab_0x4043e5:;\n    int64_t v19 = 0; // 0x4043ef\n    int64_t path; // 0x404090\n    if (unlink((char *)path) == 0) {\n        int64_t v20 = v19;\n        return v20 & 0xffffffff;\n    }\n    // 0x4043f1\n    function_40ea00(4, path);\n    char * format3 = dcgettext(NULL, \"cannot unlink %s\", 5); // 0x40440d\n    int32_t * v21 = __errno_location(); // 0x404415\n    int32_t err_num3 = *v21; // 0x404425\n    error(1, err_num3, format3);\n    // 0x404430\n    function_40ea00(4, a1);\n    v2 = (int64_t)\"cannot stat %s\";\n    goto lab_0x40444a;\n  lab_0x404308:;\n    int64_t v22 = 1; // 0x40431d\n    if (chmod(path2, g28) != 0) {\n        // 0x404508\n        function_40ea00(4, v7);\n        v23 = (int64_t)\"cannot change permissions of %s\";\n        goto lab_0x4044da;\n    } else {\n        goto lab_0x404323;\n    }\n  lab_0x40429c:\n    // 0x40429c\n    if ((int32_t)function_410aa0(v7, (int64_t *)&stat_loc) != 0) {\n        // 0x404528\n        function_40ea00(4, v7);\n        v2 = (int64_t)\"cannot set timestamps for %s\";\n        goto lab_0x40444a;\n    } else {\n        goto lab_0x4042e3;\n    }\n  lab_0x4046c6:\n    // 0x4046c6\n    *__errno_location() = 95;\n    v4 = a2;\n    v5 = v1;\n    goto lab_0x404378;\n  lab_0x404323:\n    // 0x404323\n    v19 = v22;\n    if (g29 == 0) {\n        // 0x404398\n        return v19 & 0xffffffff;\n    }\n    // 0x40432c\n    v19 = v22;\n    if (g59 != 1) {\n        // 0x404398\n        return v19 & 0xffffffff;\n    }\n    int32_t v24 = __lxstat(1, path2, (struct stat *)&stat_loc); // 0x404340\n    v19 = v22;\n    if (v24 != 0) {\n        // 0x404398\n        return v19 & 0xffffffff;\n    }\n    // 0x404349\n    if (g24 != 0) {\n        // 0x404352\n        if (*path2 == 47) {\n            int64_t v25 = v7 + 1; // 0x404587\n            char v26 = *(char *)v25; // 0x404587\n            int64_t v27 = v25; // 0x404591\n            char v28 = v26; // 0x404591\n            int64_t v29 = v25; // 0x404591\n            int64_t v30 = v7; // 0x404591\n            if (v26 == 47) {\n                int64_t v31 = v27 + 1; // 0x40459b\n                char v32 = *(char *)v31; // 0x40459b\n                v28 = v32;\n                v29 = v31;\n                v30 = v27;\n                while (v32 == 47) {\n                    int64_t v33 = v31;\n                    v31 = v33 + 1;\n                    v32 = *(char *)v31;\n                    v28 = v32;\n                    v29 = v31;\n                    v30 = v33;\n                }\n            }\n            int64_t str = v30;\n            int64_t v34 = v29; // 0x4045ac\n            if (v28 != 0) {\n                int64_t v35; // 0x4045bc\n                while (true) {\n                  lab_0x4045bc:\n                    // 0x4045bc\n                    v35 = v34 + 1;\n                    v34 = v35;\n                    switch (*(char *)v35) {\n                        case 47: {\n                            goto lab_0x4045c7;\n                        }\n                        case 0: {\n                            goto lab_0x4045c7;\n                        }\n                        default: {\n                            goto lab_0x4045bc;\n                        }\n                    }\n                }\n              lab_0x4045c7:;\n                int32_t n = v35 - str;\n                int64_t * mem = malloc(n + 2); // 0x4045d1\n                if (mem != NULL) {\n                    // 0x4045e2\n                    *(int16_t *)stpncpy((char *)mem, (char *)str, n) = 47;\n                    free(mem);\n                }\n            }\n        }\n    }\n    // 0x40435b\n    g24 = 0;\n    *__errno_location() = 95;\n    // 0x404398\n    return v22 & 0xffffffff;\n  lab_0x4044da:\n    // 0x4044da\n    error(0, *__errno_location(), dcgettext(NULL, (char *)v23, 5));\n    v22 = 0;\n    goto lab_0x404323;\n  lab_0x40419f:\n    // 0x40419f\n    v4 = a2;\n    v5 = v1;\n    int32_t v36; // 0x404090\n    if (v37 != v38) {\n        goto lab_0x404378;\n    } else {\n        // 0x4041ac\n        v36 = g55;\n        if (g55 == -1) {\n            int32_t * v39 = __errno_location(); // 0x404638\n            *v39 = 0;\n            int32_t v40 = getgid(); // 0x404646\n            v36 = v40;\n            if (v40 != -1) {\n                goto lab_0x4041bb;\n            } else {\n                // 0x404654\n                v36 = v40;\n                v4 = a2;\n                v5 = v1;\n                if (*v39 == 0) {\n                    goto lab_0x4041bb;\n                } else {\n                    goto lab_0x404378;\n                }\n            }\n        } else {\n            goto lab_0x4041bb;\n        }\n    }\n  lab_0x4041bb:\n    // 0x4041bb\n    v4 = a2;\n    v5 = v1;\n    if (v37 != v36) {\n        goto lab_0x404378;\n    } else {\n        // 0x4041c8\n        if (g59 == 0) {\n            goto lab_0x4041db;\n        } else {\n            // 0x4041d1\n            if (*(char *)(v1 + 37) != 0) {\n                goto lab_0x4046c6;\n            } else {\n                goto lab_0x4041db;\n            }\n        }\n    }\n  lab_0x4041db:\n    // 0x4041db\n    fd = open(path3, O_RDONLY);\n    v4 = a2;\n    v5 = v1;\n    if (fd < 0) {\n        goto lab_0x404378;\n    } else {\n        // 0x4041f2\n        fd2 = open(path4, O_RDONLY);\n        if (fd2 >= 0) {\n            int64_t v41 = function_40b1c0((int64_t)fd, &g50, 0x1000); // 0x40425c\n            while (v41 != 0) {\n                int64_t n2 = function_40b1c0((int64_t)fd2, &g51, 0x1000); // 0x404222\n                if (n2 != v41) {\n                    goto lab_0x4046d6_2;\n                }\n                // 0x404235\n                if (memcmp(&g50, &g51, (int32_t)n2) != 0) {\n                    goto lab_0x4046d6_2;\n                }\n                v41 = function_40b1c0((int64_t)fd, &g50, 0x1000);\n            }\n            // 0x404269\n            close(fd);\n            close(fd2);\n            v7 = a2;\n            v8 = v1;\n            goto lab_0x404279;\n        } else {\n            // 0x404663\n            close(fd);\n            v4 = a2;\n            v5 = v1;\n            goto lab_0x404378;\n        }\n    }\n}\n"
        },
        {
            "funcName": "function_4046f0",
            "funcStartAddr": "4046f0",
            "funcEndAddr": "404add",
            "decompiledFuncCode": "int64_t function_4046f0(int64_t a1) {\n    int32_t status = a1; // 0x404706\n    if (status != 0) {\n        // 0x40470a\n        __fprintf_chk(g47, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x40472f\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x404736\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... [-T] SOURCE DEST\\n  or:  %s [OPTION]... SOURCE... DIRECTORY\\n  or:  %s [OPTION]... -t DIRECTORY SOURCE...\\n  or:  %s [OPTION]... -d DIRECTORY...\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"\\nThis install program copies files (often just compiled) into destination\\nlocations you choose.  If you want to download and install a ready-to-use\\npackage on a GNU/Linux system, you should instead be using a package manager\\nlike yum(1) or apt-get(1).\\n\\nIn the first three forms, copy SOURCE to DEST or multiple SOURCE(s) to\\nthe existing DIRECTORY, while setting permission modes and owner/group.\\nIn the 4th form, create all components of the given DIRECTORY(ies).\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"      --backup[=CONTROL]  make a backup of each existing destination file\\n  -b                  like --backup but does not accept an argument\\n  -c                  (ignored)\\n  -C, --compare       compare each pair of source and destination files, and\\n                        in some cases, do not modify the destination at all\\n  -d, --directory     treat all arguments as directory names; create all\\n                        components of the specified directories\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"  -D                  create all leading components of DEST except the last,\\n                        or all components of --target-directory,\\n                        then copy SOURCE to DEST\\n  -g, --group=GROUP   set group ownership, instead of process' current group\\n  -m, --mode=MODE     set permission mode (as in chmod), instead of rwxr-xr-x\\n  -o, --owner=OWNER   set ownership (super-user only)\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"  -p, --preserve-timestamps   apply access/modification times of SOURCE files\\n                        to corresponding destination files\\n  -s, --strip         strip symbol tables\\n      --strip-program=PROGRAM  program used to strip binaries\\n  -S, --suffix=SUFFIX  override the usual backup suffix\\n  -t, --target-directory=DIRECTORY  copy all SOURCE arguments into DIRECTORY\\n  -T, --no-target-directory  treat DEST as a normal file\\n  -v, --verbose       print the name of each directory as it is created\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"      --preserve-context  preserve SELinux security context\\n  -Z                      set SELinux security context of destination\\n                            file and each created directory to default type\\n      --context[=CTX]     like -Z, or if CTX is specified then set the\\n                            SELinux or SMACK security context to CTX\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"\\nThe backup suffix is '~', unless set with --suffix or SIMPLE_BACKUP_SUFFIX.\\nThe version control method may be selected via the --backup option or through\\nthe VERSION_CONTROL environment variable.  Here are the values:\\n\\n\", 5), g44);\n    fputs_unlocked(dcgettext(NULL, \"  none, off       never make backups (even if --backup is given)\\n  numbered, t     make numbered backups\\n  existing, nil   numbered if numbered backups exist, simple otherwise\\n  simple, never   always make simple backups\\n\", 5), g44);\n    int64_t v1 = &g1; // bp-136, 0x4048bb\n    bool v2; // 0x4046f0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x404940\n    int64_t v6 = *(int64_t *)v5; // 0x404944\n    int64_t v7 = 8; // 0x40494a\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"install\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x404956\n        char v11 = *(char *)v9; // 0x404956\n        char v12 = v11; // 0x404956\n        bool v13 = false; // 0x404956\n        while (v10 == v11) {\n            // 0x40494c\n            v7--;\n            int64_t v14 = v9 + v3; // 0x404956\n            int64_t v15 = v8 + v3; // 0x404956\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x404962\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 8;\n    }\n    // 0x404962\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x404a74;\n        } else {\n            // 0x404a5e\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x404ab3\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x4049c4;\n            } else {\n                goto lab_0x404a74;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x4049c4;\n        } else {\n            // 0x4049aa\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x404ab3\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x4049c4;\n            } else {\n                goto lab_0x4049c4;\n            }\n        }\n    }\n  lab_0x404a74:\n    // 0x404a74\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x404a04\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40472f\n    exit(status);\n    // UNREACHABLE\n  lab_0x4049c4:\n    // 0x4049c4\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x404a04\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40472f\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404ae0",
            "funcStartAddr": "404ae0",
            "funcEndAddr": "404bcf",
            "decompiledFuncCode": "int64_t function_404ae0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x404ae0\n    int64_t v1; // 0x404ae0\n    if ((char)v1 != 0) {\n        // 0x404b07\n        int128_t v2; // 0x404ae0\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n    }\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x404b48\n    fputs_unlocked(g69, stream);\n    fwrite_unlocked((int64_t *)\": \", 1, 2, stream);\n    int64_t v3 = 16; // bp-224, 0x404b77\n    function_412a70(a1, a2, &v3);\n    int64_t * v4 = (int64_t *)(a1 + 40); // 0x404b9b\n    uint64_t v5 = *v4; // 0x404b9b\n    int64_t result; // 0x404ae0\n    if (v5 >= *(int64_t *)(a1 + 48)) {\n        // 0x404bc0\n        result = __overflow(stream, 10);\n    } else {\n        // 0x404ba5\n        *v4 = v5 + 1;\n        *(char *)v5 = 10;\n        result = v5;\n    }\n    // 0x404bb0\n    return result;\n}\n"
        },
        {
            "funcName": "function_404bd0",
            "funcStartAddr": "404bd0",
            "funcEndAddr": "404c14",
            "decompiledFuncCode": "int64_t function_404bd0(int64_t a1, int32_t a2) {\n    if ((a2 & 0xf000) == 0xa000 || (char)function_4112a0() != 0) {\n        // 0x404bde\n        return 1;\n    }\n    int32_t v1 = euidaccess((char *)a1, 2); // 0x404c08\n    return (int64_t)(v1 & -256) | (int64_t)(v1 == 0);\n}\n"
        },
        {
            "funcName": "function_404c20",
            "funcStartAddr": "404c20",
            "funcEndAddr": "404cc2",
            "decompiledFuncCode": "int64_t function_404c20(int64_t a1, uint64_t a2) {\n    int64_t v1 = g61; // 0x404c32\n    if (g61 == 0) {\n        int64_t * mem = calloc(g31, 1); // 0x404c94\n        if (mem == NULL) {\n            // 0x404ca7\n            g61 = &g60;\n            g31 = 1024;\n            v1 = &g60;\n        } else {\n            int64_t v2 = (int64_t)mem; // 0x404c94\n            g61 = v2;\n            v1 = v2;\n        }\n    }\n    // 0x404c34\n    if (a2 == 0) {\n        // 0x404c6e\n        return 1;\n    }\n    int64_t v3 = a1 & 0xffffffff; // 0x404c2a\n    uint64_t v4 = (int64_t)g31; // 0x404c45\n    int64_t v5 = v4 > a2 ? a2 : v4; // 0x404c59\n    if (function_40b240(v3, v1, v5) != v5) {\n        // 0x404c6e\n        return 0;\n    }\n    int64_t v6 = a2; // 0x404c6c\n    v6 -= v5;\n    int64_t result = 1; // 0x404c43\n    while (v6 != 0) {\n        uint64_t v7 = (int64_t)g31; // 0x404c45\n        int64_t v8 = v6 < v7 ? v6 : v7; // 0x404c59\n        result = 0;\n        if (function_40b240(v3, g61, v8) != v8) {\n            // break -> 0x404c6e\n            break;\n        }\n        v6 -= v8;\n        result = 1;\n    }\n    // 0x404c6e\n    return result;\n}\n"
        },
        {
            "funcName": "function_404cd0",
            "funcStartAddr": "404cd0",
            "funcEndAddr": "404d07",
            "decompiledFuncCode": "int64_t function_404cd0(int64_t a1, int64_t a2, int64_t a3) {\n    int32_t v1 = fallocate((int32_t)a1, 3, (int32_t)a2, (int32_t)a3); // 0x404cdc\n    int64_t result = v1; // 0x404ce1\n    if (v1 >= 0) {\n        // 0x404ce7\n        return result;\n    }\n    int32_t v2 = *__errno_location(); // 0x404cf5\n    return v2 != 38 == (v2 != 95) ? result : 0;\n}\n"
        },
        {
            "funcName": "function_404d10",
            "funcStartAddr": "404d10",
            "funcEndAddr": "404d2d",
            "decompiledFuncCode": "int64_t function_404d10(int64_t a1, int64_t path, int64_t mode) {\n    int32_t fd = a1; // 0x404d15\n    if (fd >= 0) {\n        // 0x404d28\n        return fchmod(fd, (int32_t)mode);\n    }\n    // 0x404d19\n    return chmod((char *)path, (int32_t)mode);\n}\n"
        },
        {
            "funcName": "function_404d30",
            "funcStartAddr": "404d30",
            "funcEndAddr": "404d70",
            "decompiledFuncCode": "int64_t function_404d30(int64_t a1) {\n    int32_t * err_num = __errno_location(); // 0x404d31\n    *err_num = 95;\n    error(1, *err_num, dcgettext(NULL, \"failed to restore the default file creation context\", 5));\n    return &g90;\n}\n"
        },
        {
            "funcName": "function_404d70",
            "funcStartAddr": "404d70",
            "funcEndAddr": "404e1e",
            "decompiledFuncCode": "int64_t function_404d70(int64_t a1, int64_t a2, char a3) {\n    int64_t v1 = function_40e920(1, 4, a2); // 0x404d87\n    __printf_chk(1, \"%s -> %s\", (char *)function_40e920(0, 4, a1), (char *)v1);\n    if (a3 != 0) {\n        // 0x404dba\n        function_40ea00(4, (int64_t)a3);\n        __printf_chk(1, dcgettext(NULL, \" (backup: %s)\", 5));\n    }\n    int64_t v2 = (int64_t)g44; // 0x404ded\n    int64_t * v3 = (int64_t *)(v2 + 40); // 0x404df4\n    uint64_t result = *v3; // 0x404df4\n    if (result >= *(int64_t *)(v2 + 48)) {\n        // 0x404e10\n        return __overflow(g44, 10);\n    }\n    // 0x404dfe\n    *v3 = result + 1;\n    *(char *)result = 10;\n    return result;\n}\n"
        },
        {
            "funcName": "function_404e20",
            "funcStartAddr": "404e20",
            "funcEndAddr": "404f4c",
            "decompiledFuncCode": "int64_t function_404e20(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404e20\n    int64_t v1; // 0x404e20\n    int32_t v2 = v1;\n    if ((char)function_404bd0(a2, v2) != 0) {\n        // 0x404ee0\n        function_40ea00(4, a2);\n        __fprintf_chk(g47, 1, dcgettext(NULL, \"%s: overwrite %s? \", 5));\n        return function_4119a0();\n    }\n    // 0x404e45\n    int64_t v3; // bp-52, 0x404e20\n    function_40af30(v2, &v3);\n    function_40ea00(4, a2);\n    if (*(char *)(a1 + 24) == 0) {\n        // 0x404e84\n        if ((*(int32_t *)(a1 + 20) & 0xffff00) == 0) {\n            // 0x404ea2\n            __fprintf_chk(g47, 1, dcgettext(NULL, \"%s: unwritable %s (mode %04lo, %s); try anyway? \", 5));\n            return function_4119a0();\n        }\n    }\n    // 0x404ea2\n    __fprintf_chk(g47, 1, dcgettext(NULL, \"%s: replace %s, overriding mode %04lo (%s)? \", 5));\n    return function_4119a0();\n}\n"
        },
        {
            "funcName": "function_404f50",
            "funcStartAddr": "404f50",
            "funcEndAddr": "405053",
            "decompiledFuncCode": "int64_t function_404f50(int64_t a1, int64_t a2, uint64_t a3, char a4, int32_t a5) {\n    int32_t v1 = function_409e90(0xffffff9c, a1, 0xffffff9c, a2, 1024 * (int32_t)(bool)((char)a5 != 0), a3 % 256); // 0x404f87\n    if (v1 < 0) {\n        // 0x404ff0\n        function_40e920(1, 4, a1);\n        function_40e920(0, 4, a2);\n        error(0, *__errno_location(), dcgettext(NULL, \"cannot create hard link %s to %s\", 5));\n        return 0;\n    }\n    unsigned char v2 = (char)(v1 != 0) & a4; // 0x404f8e\n    if (v2 == 0) {\n        // 0x404f93\n        return 1;\n    }\n    // 0x404fa8\n    function_40ea00(4, a2);\n    __printf_chk(1, dcgettext(NULL, \"removed %s\\n\", 5));\n    return a1 & 0xffffff00 | (int64_t)v2;\n}\n"
        },
        {
            "funcName": "function_405060",
            "funcStartAddr": "405060",
            "funcEndAddr": "405117",
            "decompiledFuncCode": "int64_t function_405060(uint32_t fd, int64_t a2, char a3, int64_t offset) {\n    int32_t v1 = lseek(fd, (int32_t)offset, SEEK_CUR); // 0x40507d\n    int64_t v2; // 0x405060\n    if (v1 < 0) {\n        // 0x4050d0\n        function_40ea00(4, a2);\n        v2 = (int64_t)\"cannot lseek %s\";\n    } else {\n        if (a3 == 0 || (int32_t)function_404cd0((int64_t)fd, (int64_t)v1 - offset, offset) >= 0) {\n            // 0x40508c\n            return 1;\n        }\n        // 0x4050b4\n        function_40ea00(4, a2);\n        v2 = (int64_t)\"error deallocating %s\";\n    }\n    // 0x4050ea\n    error(0, *__errno_location(), dcgettext(NULL, (char *)v2, 5));\n    return (int32_t)&g90 ^ (int32_t)&g90;\n}\n"
        },
        {
            "funcName": "function_405120",
            "funcStartAddr": "405120",
            "funcEndAddr": "405543",
            "decompiledFuncCode": "int64_t function_405120(char fd, int64_t a2, int64_t buf, uint64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t a9, int64_t a10, int64_t a11) {\n    char * v1 = (char *)a11; // 0x405158\n    *v1 = 0;\n    int64_t * v2 = (int64_t *)a10; // 0x405178\n    *v2 = 0;\n    if (a9 == 0) {\n        // 0x405229\n        return 1;\n    }\n    int64_t v3 = 0x100000000 * a2 >> 32; // 0x4051af\n    int32_t v4 = v3;\n    char v5 = a6;\n    int64_t v6 = a9; // 0x4051b7\n    int64_t v7 = 0; // 0x4051b7\n    int64_t v8 = 0; // 0x4051b7\n    char v9; // 0x405120\n    int64_t v10; // 0x405120\n    int64_t v11; // 0x405120\n    int64_t v12; // 0x405120\n    uint64_t v13; // 0x405120\n    int64_t v14; // 0x405120\n    int64_t v15; // 0x405120\n    int64_t v16; // 0x405120\n    int64_t v17; // 0x405120\n    int64_t v18; // 0x405120\n    int64_t result; // 0x405120\n    int64_t v19; // 0x405120\n    int64_t v20; // 0x405120\n    int64_t v21; // 0x405120\n    int64_t v22; // 0x405120\n    int64_t v23; // 0x405120\n    int64_t v24; // 0x405120\n    int64_t v25; // 0x405120\n    int64_t v26; // 0x405120\n    int64_t v27; // 0x405120\n    int64_t v28; // 0x405120\n    int64_t v29; // 0x405120\n    int64_t v30; // 0x405120\n    int64_t v31; // 0x405120\n    int64_t v32; // 0x405120\n    int64_t v33; // 0x405120\n    uint64_t v34; // 0x405120\n    int64_t v35; // 0x405120\n    uint64_t v36; // 0x405120\n    int64_t v37; // 0x4051d6\n    int64_t v38; // 0x405273\n    while (true) {\n      lab_0x4051bc:\n        // 0x4051bc\n        v18 = v8;\n        v15 = v7;\n        v36 = v6;\n        int32_t nbyte = v36 < a4 ? v36 : a4; // 0x4051d6\n        int32_t v39 = read((int32_t)fd, (int64_t *)buf, nbyte); // 0x4051d6\n        while (v39 < 0) {\n            int32_t * err_num = __errno_location(); // 0x4051e5\n            if (*err_num != 4) {\n                // 0x4051ef\n                function_40ea00(4, a7);\n                error(0, *err_num, dcgettext(NULL, \"error reading %s\", 5));\n                result = 0;\n                return result;\n            }\n            v39 = read((int32_t)fd, (int64_t *)buf, nbyte);\n        }\n        if (v39 == 0) {\n            // break -> 0x405240\n            break;\n        }\n        // 0x405246\n        v37 = v39;\n        *v2 = *v2 + v37;\n        int64_t v40 = a5 == 0 ? a4 : a5; // 0x40526b\n        int64_t v41 = v25; // 0x40526b\n        int64_t v42 = buf; // 0x40526b\n        int64_t v43 = v37; // 0x40526b\n        int64_t v44 = buf; // 0x40526b\n        int64_t v45 = v15; // 0x40526b\n        int64_t v46 = v18; // 0x40526b\n        while (true) {\n            // 0x405270\n            v14 = v44;\n            v13 = v43;\n            int64_t * str = (int64_t *)v14;\n            v33 = v40;\n            v28 = v41;\n            v10 = v42;\n            v16 = v45;\n            v19 = v46;\n            while (true) {\n              lab_0x405270:\n                // 0x405270\n                v20 = v19;\n                v17 = v16;\n                v11 = v10;\n                v34 = v33;\n                v38 = v34 > v13 ? v13 : v34;\n                int64_t v47 = v28 & -256; // 0x40527a\n                int64_t v48 = v47 | (int64_t)!((a5 == 0 | v38 == 0)); // 0x40527e\n                int64_t v49 = v38; // 0x405283\n                int64_t v50 = v14; // 0x405283\n                if (a5 == 0 || v38 == 0) {\n                    char v51 = v17;\n                    int64_t v52 = v17 & 0xffffffff; // 0x40535e\n                    v9 = v51;\n                    v30 = v52;\n                    v32 = v52;\n                    if (v38 != 0 == ((v51 ^ 1) & (char)(v13 <= v34)) == 0) {\n                        // break -> 0x4053d9\n                        break;\n                    }\n                    goto lab_0x405370;\n                } else {\n                    int64_t v53 = v50;\n                    while (*(char *)v53 == 0) {\n                        int64_t n = v49 - 1; // 0x40529c\n                        if (n == 0) {\n                            // 0x4053c0\n                            v31 = v48;\n                            v23 = (v17 ^ 1) & (int64_t)(v20 != 0);\n                            goto lab_0x4053d0;\n                        }\n                        int64_t str2 = v53 + 1; // 0x405298\n                        v49 = n;\n                        v50 = str2;\n                        if (n % 16 == 0) {\n                            int32_t memcmp_rc = memcmp(str, (int64_t *)str2, (int32_t)n); // 0x4052b3\n                            int64_t v54 = v47 | (int64_t)(memcmp_rc == 0); // 0x4052bf\n                            v24 = memcmp_rc != 0;\n                            v35 = v54 ^ v17;\n                            v29 = v54;\n                            goto lab_0x4052cd;\n                        }\n                        v53 = v50;\n                    }\n                    // 0x4054a0\n                    v24 = v48 & 0xffffff01;\n                    v35 = v17;\n                    v29 = 0;\n                    goto lab_0x4052cd;\n                }\n            }\n          lab_0x4053d9:\n            if (0x7fffffffffffffff - v38 < v20) {\n                // 0x405460\n                function_40ea00(4, a7);\n                error(0, (int32_t)\"overflow reading %s\" ^ (int32_t)\"overflow reading %s\", dcgettext(NULL, \"overflow reading %s\", 5));\n                result = 0;\n                return result;\n            }\n            // 0x4053eb\n            v26 = v32;\n            v12 = v11;\n            v21 = v20 + v38;\n          lab_0x4053f7_2:\n            // 0x4053f7\n            v46 = v21;\n            v42 = v12;\n            v41 = v26;\n            v45 = v41 & 0xffffffff;\n            v43 = v13 - v38;\n            v40 = v38;\n            v44 = v38 + v14;\n            v7 = v45;\n            v27 = v41;\n            v22 = v46;\n            if (v43 == 0) {\n                // break -> 0x405423\n                break;\n            }\n        }\n        goto lab_0x405423_2;\n    }\n    char v55 = v15; // 0x405120\n    int64_t v56 = v18; // 0x405120\n  lab_0x4054f3:\n    // 0x4054f3\n    result = 1;\n    if (v55 != 0) {\n        // 0x4054f8\n        return function_405060(v4, a8, v5, v56);\n    }\n  lab_0x405229:\n    // 0x405229\n    return result;\n  lab_0x405370:;\n    int64_t v57 = v20 + v38; // 0x405373\n    int32_t v58 = 1; // 0x405386\n    int64_t v59 = 0; // 0x405386\n    int64_t v60 = v30; // 0x405386\n    int64_t v61 = v57; // 0x405386\n    int32_t v62 = 1; // 0x405386\n    int64_t v63 = 0; // 0x405386\n    int64_t v64 = v30; // 0x405386\n    int64_t v65 = v57; // 0x405386\n    if (v9 == 0) {\n        goto lab_0x405309;\n    } else {\n        goto lab_0x40538c;\n    }\n  lab_0x4052cd:;\n    int64_t v66 = v35 & (int64_t)(v20 != 0);\n    v31 = v29;\n    v23 = v66;\n    int64_t v67; // 0x405120\n    int64_t v68; // 0x405120\n    int32_t v69; // 0x405120\n    if (v13 > v34 || (char)v24 == 0) {\n        goto lab_0x4053d0;\n    } else {\n        // 0x4052e8\n        v69 = 1;\n        v68 = 0;\n        v67 = 1;\n        if (v66 == 0) {\n            // 0x4052e8\n            v9 = v17;\n            v30 = 0;\n            goto lab_0x405370;\n        } else {\n            goto lab_0x4052fb;\n        }\n    }\n  lab_0x405309:;\n    int64_t v70 = v61;\n    int32_t v71 = v58; // 0x405321\n    int64_t v72 = v60; // 0x405321\n    int64_t v73 = v59; // 0x405321\n    if (v70 != function_40b240(v3 & 0xffffffff, v11, v70)) {\n        // 0x4054ac\n        function_40ea00(4, a8);\n        error(0, *__errno_location(), dcgettext(NULL, \"error writing %s\", 5));\n        result = v17 & 0xffffffff;\n        return result;\n    }\n    goto lab_0x405327;\n  lab_0x40538c:;\n    int64_t v76 = function_405060(v4, a8, v5, v65); // 0x40539d\n    v71 = v62;\n    v72 = v64;\n    v73 = v63;\n    if ((char)v76 == 0) {\n        // 0x4053b0\n        result = v76 & 0xffffffff;\n        goto lab_0x405229;\n    }\n    goto lab_0x405327;\n  lab_0x4053d0:\n    // 0x4053d0\n    v69 = 0;\n    v68 = v31;\n    v67 = v23;\n    v32 = v31;\n    if ((char)v23 == 0) {\n        // break -> 0x4053d9\n        goto lab_0x4053d9;\n    }\n    goto lab_0x4052fb;\n  lab_0x405327:;\n    int64_t v74 = v72;\n    v26 = v74;\n    v12 = v14;\n    v21 = v38;\n    if (v71 == 0) {\n        goto lab_0x4053f7_2;\n    }\n    if (v38 == 0) {\n        // 0x405423\n        v7 = v74 & 0xffffffff;\n        v27 = v74;\n        v22 = 0;\n        goto lab_0x405423_2;\n    }\n    // 0x40533c\n    v26 = v74;\n    v12 = v14;\n    v21 = 0;\n    if (v73 % 256 == 0) {\n        goto lab_0x4053f7_2;\n    }\n    // 0x405345\n    v33 = 0;\n    v28 = v74;\n    v10 = v14;\n    v16 = v74 & 0xffffffff;\n    v19 = v38;\n    goto lab_0x405270;\n  lab_0x4052fb:\n    // 0x4052fb\n    v58 = v69;\n    v59 = v67;\n    v60 = v68;\n    v61 = v20;\n    v62 = v69;\n    v63 = v67;\n    v64 = v68;\n    v65 = v20;\n    if ((char)v17 != 0) {\n        goto lab_0x40538c;\n    } else {\n        goto lab_0x405309;\n    }\n  lab_0x405423_2:\n    // 0x405423\n    v8 = v22;\n    v6 = v36 - v37;\n    char v75 = v27;\n    *v1 = v75;\n    v25 = v27;\n    v55 = v75;\n    v56 = v8;\n    if (v6 == 0) {\n        goto lab_0x4054f3;\n    }\n    goto lab_0x4051bc;\n}\n"
        },
        {
            "funcName": "function_405550",
            "funcStartAddr": "405550",
            "funcEndAddr": "405618",
            "decompiledFuncCode": "int64_t function_405550(int64_t a1, int64_t a2, int32_t a3, char a4, int64_t a5) {\n    // 0x405550\n    if (*(char *)(a5 + 37) == 0) {\n        unsigned char v1 = *(char *)(a5 + 33) & a4; // 0x4055e2\n        if (v1 == 0) {\n            // 0x4055e8\n            return 1;\n        }\n        // 0x405600\n        *__errno_location() = 95;\n        return (int64_t)a4 & 0xffffff00 | (int64_t)v1;\n    }\n    int32_t * err_num = __errno_location(); // 0x405567\n    char * v2 = (char *)(a5 + 38);\n    if (*(char *)(a5 + 35) != 0) {\n        char v3 = *v2; // 0x4055c8\n        if (v3 == 0) {\n            // 0x4055d0\n            *err_num = 95;\n            // 0x4055b5\n            return v3 ^ 1;\n        }\n    }\n    // 0x405575\n    *err_num = 95;\n    function_40ea00(4, a1);\n    error(0, *err_num, dcgettext(NULL, \"failed to get security context of %s\", 5));\n    // 0x4055b5\n    return (int64_t)(*v2 ^ 1);\n}\n"
        },
        {
            "funcName": "function_405620",
            "funcStartAddr": "405620",
            "funcEndAddr": "405693",
            "decompiledFuncCode": "int64_t function_405620(int64_t a1, char a2, int32_t a3, int64_t a4) {\n    int32_t * err_num = __errno_location(); // 0x40562a\n    if (*(char *)(a4 + 35) != 0) {\n        // 0x405680\n        if (*(char *)(a4 + 38) == 0) {\n            // 0x405686\n            *err_num = 95;\n            return 0;\n        }\n    }\n    // 0x405638\n    *err_num = 95;\n    function_40e920(0, 4, a1);\n    error(0, *err_num, dcgettext(NULL, \"failed to set the security context of %s\", 5));\n    return (int32_t)&g90 ^ (int32_t)&g90;\n}\n"
        },
        {
            "funcName": "function_4056a0",
            "funcStartAddr": "4056a0",
            "funcEndAddr": "4056c6",
            "decompiledFuncCode": "int64_t function_4056a0(int64_t * a1, int64_t a2) {\n    int64_t result = function_40bb50(61, 0, 0x40c510, 0x40c550, 0x40c5c0); // 0x4056bb\n    *(int64_t *)((int64_t)a1 + 56) = result;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4056d0",
            "funcStartAddr": "4056d0",
            "funcEndAddr": "4056f6",
            "decompiledFuncCode": "int64_t function_4056d0(int64_t a1, int64_t a2) {\n    int64_t result = function_40bb50(61, 0, 0x40c540, 0x40c550, 0x40c5c0); // 0x4056eb\n    *(int64_t *)(a1 + 64) = result;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405700",
            "funcStartAddr": "405700",
            "funcEndAddr": "405731",
            "decompiledFuncCode": "int64_t function_405700(int64_t * a1) {\n    // 0x405700\n    int128_t v1; // 0x405700\n    int128_t v2 = v1;\n    int64_t v3 = (int64_t)a1;\n    int128_t v4 = __asm_pxor(v2, v2); // 0x405701\n    *(int64_t *)(v3 + 64) = 0;\n    int64_t v5; // 0x405700\n    __asm_movups(*(int128_t *)&v5, v4);\n    __asm_movups(*(int128_t *)(v3 + 16), v4);\n    __asm_movups(*(int128_t *)(v3 + 32), v4);\n    __asm_movups(*(int128_t *)(v3 + 48), v4);\n    int32_t v6 = geteuid(); // 0x40571f\n    char v7 = v6 == 0; // 0x405729\n    *(char *)(v3 + 27) = v7;\n    *(char *)(v3 + 26) = v7;\n    return (int64_t)(v6 & -256) | (int64_t)(v6 == 0);\n}\n"
        },
        {
            "funcName": "function_405740",
            "funcStartAddr": "405740",
            "funcEndAddr": "405764",
            "decompiledFuncCode": "int64_t function_405740(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x405744\n    int32_t v2 = *v1; // 0x405749\n    bool v3 = v2 == 1 | v2 == 22;\n    int64_t result = (int64_t)v1 & -256 | (int64_t)v3; // 0x405759\n    if (v3) {\n        // 0x40575b\n        result = (int64_t)(*(char *)(a1 + 26) ^ 1);\n    }\n    // 0x405762\n    return result;\n}\n"
        },
        {
            "funcName": "function_405770",
            "funcStartAddr": "405770",
            "funcEndAddr": "40595b",
            "decompiledFuncCode": "int64_t function_405770(int64_t a1, int64_t a2, int64_t a3, int64_t a4, char a5, int64_t * a6) {\n    int32_t owner = *(int32_t *)(a4 + 28); // 0x405786\n    int32_t group = *(int32_t *)(a4 + 32); // 0x40578a\n    int64_t v1; // 0x405770\n    if (a5 != 0) {\n        goto lab_0x4057e0;\n    } else {\n        // 0x405793\n        if (*(int64_t *)(a1 + 24) % 0xff000000000100 == 0) {\n            // 0x405838\n            if (*(char *)(a1 + 43) == 0) {\n                goto lab_0x4057e0;\n            } else {\n                // 0x40583e\n                v1 = a1 + 16;\n                goto lab_0x4057ae;\n            }\n        } else {\n            // 0x4057a7\n            v1 = a4 + 24;\n            goto lab_0x4057ae;\n        }\n    }\n  lab_0x4057e0:;\n    int32_t fd = a3; // 0x4057e6\n    if (fd == -1) {\n        char * path = (char *)a2; // 0x405863\n        if (lchown(path, owner, group) == 0) {\n            // 0x405823\n            return 1;\n        }\n        int32_t * v2 = __errno_location(); // 0x40586c\n        int32_t v3 = *v2; // 0x405871\n        if (v3 != 1 != v3 != 22) {\n            // 0x405880\n            lchown(path, -1, group);\n            *v2 = v3;\n        }\n    } else {\n        // 0x4057eb\n        if (fchown(fd, owner, group) == 0) {\n            // 0x405823\n            return 1;\n        }\n        int32_t * v4 = __errno_location(); // 0x4057f6\n        int32_t v5 = *v4; // 0x4057fb\n        switch (v5) {\n            case 1: {\n            }\n            case 22: {\n                // 0x4058e0\n                fchown(fd, -1, group);\n                *v4 = v5;\n                // break -> 0x405815\n                break;\n            }\n        }\n    }\n    // 0x405815\n    if ((char)function_405740(a1) != 0) {\n        // 0x405823\n        return 0;\n    }\n    // 0x405898\n    function_40ea00(4, a2);\n    error(0, *__errno_location(), dcgettext(NULL, \"failed to preserve ownership for %s\", 5));\n    // 0x405823\n    return -(int64_t)*(char *)(a1 + 36) & 0xffffffff;\n  lab_0x4057ae:;\n    int32_t v6 = *(int32_t *)((int64_t)a6 + 24);\n    uint32_t v7 = *(int32_t *)v1;\n    if (((v7 % 512 ^ 4095) & v6) != 0) {\n        // 0x4057be\n        if ((int32_t)function_40d0b0(a2, a3 & 0xffffffff, v6 & 448 & v7) != 0) {\n            int32_t * err_num = __errno_location(); // 0x405900\n            switch (*err_num) {\n                case 1: {\n                }\n                case 22: {\n                    // 0x405950\n                    if (*(char *)(a1 + 27) == 0) {\n                        // 0x405823\n                        return -(int64_t)*(char *)(a1 + 36) & 0xffffffff;\n                    }\n                    // break -> 0x405914\n                    break;\n                }\n            }\n            // 0x405914\n            function_40ea00(4, a2);\n            error(0, *err_num, dcgettext(NULL, \"clearing permissions for %s\", 5));\n            // 0x405823\n            return -(int64_t)*(char *)(a1 + 36) & 0xffffffff;\n        }\n    }\n    goto lab_0x4057e0;\n}\n"
        },
        {
            "funcName": "function_405960",
            "funcStartAddr": "405960",
            "funcEndAddr": "40598a",
            "decompiledFuncCode": "int64_t function_405960(int64_t a1) {\n    uint32_t result = g30; // 0x405961\n    if (result != -1) {\n        // 0x40596c\n        return result;\n    }\n    int32_t cmask = umask(0); // 0x405972\n    g30 = cmask;\n    umask(cmask);\n    return cmask;\n}\n"
        },
        {
            "funcName": "function_405990",
            "funcStartAddr": "405990",
            "funcEndAddr": "40980c",
            "decompiledFuncCode": "int64_t function_405990(int64_t a1, int64_t str3, char a3, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t a9, int64_t a10) {\n    // 0x405990\n    int64_t v1; // 0x405990\n    int64_t v2 = v1;\n    int64_t v3 = a6 + 24; // 0x4059c0\n    char * v4 = (char *)v3; // 0x4059c0\n    if (!((a10 == 0 | *v4 == 0))) {\n        // 0x4059e3\n        *(char *)a10 = 0;\n    }\n    int32_t * v5 = (int32_t *)(a6 + 4); // 0x4059ee\n    int64_t v6 = 1; // 0x4059f6\n    char * v7 = (char *)a9; // 0x4059fb\n    *v7 = 0;\n    int32_t v8 = v6;\n    char * file_path = (char *)a1;\n    int64_t v9; // 0x405990\n    int64_t v10; // 0x405990\n    int64_t v11; // bp-632, 0x405990\n    if (*v5 == 2) {\n        int32_t v12 = __lxstat(v8, file_path, (struct stat *)&v11); // 0x406220\n        v10 = v1 & -256 | (int64_t)(v12 != 0);\n        v9 = a1;\n        if (v12 == 0) {\n            goto lab_0x405a2c;\n        } else {\n            goto lab_0x406237;\n        }\n    } else {\n        int32_t v13 = __xstat(v8, file_path, (struct stat *)&v11); // 0x405a15\n        v10 = v1 & -256 | (int64_t)(v13 != 0);\n        v9 = a1;\n        if (v13 != 0) {\n            goto lab_0x406237;\n        } else {\n            goto lab_0x405a2c;\n        }\n    }\n  lab_0x408fc4:;\n    // 0x408fc4\n    int64_t v14; // 0x405990\n    free((int64_t *)v14);\n    int32_t fd3; // 0x405990\n    int32_t fd = fd3; // 0x408fd0\n    int64_t v15; // 0x405990\n    int64_t v16 = v15; // 0x408fd0\n    int64_t v17; // 0x405990\n    int64_t v18 = v17; // 0x408fd0\n    int64_t v19; // 0x405990\n    int64_t v20 = v19; // 0x408fd0\n    int64_t v21; // 0x408df9\n    int64_t v22 = v21 & 0xffffffff; // 0x408fd0\n    int64_t v23 = 0; // 0x408fd0\n    int64_t v24; // 0x405990\n    int64_t v25 = v24; // 0x408fd0\n    int64_t v26 = v10 % 256; // 0x408fd0\n    goto lab_0x408940;\n  lab_0x405a2c:;\n    int64_t v192 = &v11; // 0x405a05\n    int32_t owner; // 0x405990\n    int32_t v138 = owner & 0xf000; // 0x405a38\n    int64_t * v470; // 0x405990\n    int64_t v89; // 0x405990\n    int64_t v473; // 0x405990\n    int64_t v242; // 0x405990\n    if (v138 == 0x4000) {\n        // 0x406288\n        if (*(char *)(a6 + 42) == 0) {\n            // 0x406cb0\n            v6 = 4;\n            function_40ea00(4, a1);\n            v242 = (int64_t)\"omitting directory %s\";\n            v473 = 5;\n            if (*(char *)(a6 + 25) == 0) {\n                goto lab_0x406e18;\n            } else {\n                goto lab_0x406cd2;\n            }\n        } else {\n            if ((char)a7 == 0) {\n                goto lab_0x405a72;\n            } else {\n                // 0x406293\n                v470 = (int64_t *)(a6 + 64);\n                goto lab_0x40669f;\n            }\n        }\n    } else {\n        if ((char)a7 == 0) {\n            goto lab_0x405a72;\n        } else {\n            int64_t * v694 = (int64_t *)(a6 + 64);\n            int64_t v695 = *v694; // 0x405a56\n            v6 = v695;\n            if (*(int32_t *)&v89 == 0) {\n                uint64_t v696 = function_40aef0(v695, a1, v192); // 0x406692\n                v470 = v694;\n                if ((char)v696 != 0) {\n                    // 0x407670\n                    function_40ea00(4, a1);\n                    error(0, (int32_t)\"warning: source file %s specified more than once\" ^ (int32_t)\"warning: source file %s specified more than once\", dcgettext(NULL, \"warning: source file %s specified more than once\", 5));\n                    // 0x406271\n                    return v696 % 256 & 0xffffffff;\n                }\n                goto lab_0x40669f;\n            } else {\n                // 0x405a63\n                function_40ae60(v695, a1, v192);\n                goto lab_0x405a72;\n            }\n        }\n    }\n  lab_0x406237:\n    // 0x406237\n    function_40ea00(4, v9);\n    error(0, *__errno_location(), dcgettext(NULL, \"cannot stat %s\", 5));\n    // 0x406271\n    return 0;\n  lab_0x405a72:;\n    // 0x405a72\n    int64_t v471; // bp-888, 0x405990\n    int64_t v135 = &v471; // 0x4059a6\n    int64_t v79 = a7 & 0xffffffff; // 0x4059c5\n    int32_t v472 = *v5; // 0x405a7c\n    int32_t v397 = v472 == 4 ? 1 : (int32_t)((int64_t)(v472 == 3) & a7);\n    int64_t v278; // 0x4059a2\n    if (a3 != 0) {\n        goto lab_0x405dd0;\n    } else {\n        // 0x405a9f\n        v278 = (int64_t)a3 & 0xffffffff;\n        if (v138 == 0x8000) {\n            goto lab_0x405acd;\n        } else {\n            // 0x405aac\n            if (*(char *)(a6 + 20) == 0) {\n                goto lab_0x406540;\n            } else {\n                switch ((int16_t)v138) {\n                    case -0x6000: {\n                        goto lab_0x406540;\n                    }\n                    case 0x4000: {\n                        goto lab_0x406540;\n                    }\n                    default: {\n                        goto lab_0x405acd;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x406e18:\n    // 0x406e18\n    v6 = 0;\n    // 0x406cd9\n    error(0, 0, dcgettext(NULL, \"-r not specified; omitting directory %s\", (int32_t)v473));\n    // 0x406271\n    return 0;\n  lab_0x406cd2:\n    // 0x406cd2\n    v6 = 0;\n    // 0x406cd9\n    error(0, 0, dcgettext(NULL, (char *)v242, 5));\n    // 0x406271\n    return 0;\n  lab_0x405dd0:;\n    // 0x405dd0\n    int128_t v93; // 0x405990\n    int32_t v123 = v93; // 0x405dd9\n    char v125 = 0; // 0x405dd9\n    int64_t v126 = 1; // 0x405dd9\n    int64_t v130 = v93; // 0x405dd9\n    int64_t v132 = 0; // 0x405dd9\n    int64_t v134 = v135; // 0x405dd9\n    goto lab_0x405de4;\n  lab_0x40669f:\n    // 0x40669f\n    function_40ae60(*v470, a1, v192);\n    goto lab_0x405a72;\n  lab_0x405de4:;\n    int32_t v243 = v123; // 0x405de6\n    char v244 = v125; // 0x405de6\n    int64_t v245 = v126; // 0x405de6\n    int128_t v128; // 0x405990\n    int128_t v246 = v128; // 0x405de6\n    int64_t v247 = v130; // 0x405de6\n    int64_t v248 = v134; // 0x405de6\n    int64_t v249; // 0x405990\n    int64_t v250; // 0x405990\n    int32_t v251; // 0x405990\n    int64_t v252; // 0x405990\n    int128_t v253; // 0x405990\n    int64_t v254; // 0x405990\n    char v255; // 0x405990\n    if ((char)a7 != 0) {\n        // 0x406210\n        v251 = v123;\n        v255 = v125;\n        v254 = v126;\n        v253 = v128;\n        v252 = v130;\n        v249 = v132;\n        v250 = v134;\n        v243 = v123;\n        v244 = v125;\n        v245 = v126;\n        v246 = v128;\n        v247 = v130;\n        v248 = v134;\n        if (*(int64_t *)(a6 + 56) != 0) {\n            goto lab_0x405d20;\n        } else {\n            goto lab_0x405dec;\n        }\n    } else {\n        goto lab_0x405dec;\n    }\n  lab_0x405acd:;\n    // 0x405acd\n    int64_t v256; // 0x405990\n    int32_t v165; // bp-488, 0x405990\n    bool v257; // 0x405990\n    if (*v4 != 0) {\n        goto lab_0x406540;\n    } else {\n        // 0x405ad8\n        if (*(char *)(a6 + 44) != 0) {\n            goto lab_0x406540;\n        } else {\n            // 0x405ae3\n            if (*(char *)(a6 + 23) != 0) {\n                goto lab_0x406540;\n            } else {\n                // 0x405aee\n                if (*(int32_t *)&v89 != 0) {\n                    goto lab_0x406540;\n                } else {\n                    // 0x405afb\n                    if (*(char *)(a6 + 21) != 0) {\n                        goto lab_0x406540;\n                    } else {\n                        // 0x405b06\n                        v6 = 1;\n                        int32_t v258 = __xstat(1, (char *)str3, (struct stat *)&v165); // 0x405b23\n                        v257 = v258 != 0;\n                        v256 = 1;\n                        if (v258 != 0) {\n                            goto lab_0x40657b;\n                        } else {\n                            goto lab_0x405b44;\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x405dec:;\n    int32_t v259 = v243; // 0x405df1\n    char v260 = v244; // 0x405df1\n    int64_t v261 = v245; // 0x405df1\n    int128_t v262 = v246; // 0x405df1\n    int64_t v263 = v247; // 0x405df1\n    int64_t v264 = v248; // 0x405df1\n    int64_t v265; // 0x405990\n    int64_t v266; // 0x405990\n    int32_t v267; // 0x405990\n    int32_t v268; // 0x405990\n    int64_t v269; // 0x405990\n    int64_t v270; // 0x405990\n    int128_t v271; // 0x405990\n    int128_t v272; // 0x405990\n    int64_t v273; // 0x405990\n    int64_t v274; // 0x405990\n    char v275; // 0x405990\n    char v276; // 0x405990\n    if (*(char *)(a6 + 46) == 0) {\n        goto lab_0x4062b0;\n    } else {\n        // 0x405df7\n        v268 = v243;\n        v276 = v244;\n        v274 = v245;\n        v272 = v246;\n        v270 = v247;\n        v266 = v248;\n        v267 = v243;\n        v275 = v244;\n        v273 = v245;\n        v271 = v246;\n        v269 = v247;\n        v265 = v248;\n        if (*v4 != 0) {\n            goto lab_0x406470;\n        } else {\n            goto lab_0x405e02;\n        }\n    }\n  lab_0x406540:\n    // 0x406540\n    v6 = 1;\n    int32_t v277 = __lxstat(1, (char *)str3, (struct stat *)&v165); // 0x40655d\n    v257 = false;\n    v256 = v278;\n    if (v277 == 0) {\n        goto lab_0x405b44;\n    } else {\n        goto lab_0x40657b;\n    }\n  lab_0x405d20:;\n    // 0x405d20\n    int64_t v279; // 0x405990\n    int64_t v280; // 0x405990\n    int64_t v281; // 0x405990\n    int32_t v282; // 0x405990\n    int32_t v283; // 0x405990\n    int64_t v86; // bp-200, 0x405990\n    int64_t v284; // 0x405990\n    int64_t v285; // 0x405990\n    int128_t v286; // 0x405990\n    int128_t v287; // 0x405990\n    int64_t v288; // 0x405990\n    int64_t v289; // 0x405990\n    char v290; // 0x405990\n    char v291; // 0x405990\n    if (*v4 != 0) {\n        // 0x4062a0\n        v259 = v251;\n        v260 = v255;\n        v261 = v254;\n        v262 = v253;\n        v263 = v252;\n        v264 = v250;\n        v267 = v251;\n        v275 = v255;\n        v273 = v254;\n        v271 = v253;\n        v269 = v252;\n        v265 = v250;\n        if (*(char *)(a6 + 46) != 0) {\n            goto lab_0x406470;\n        } else {\n            goto lab_0x4062b0;\n        }\n    } else {\n        // 0x405d2b\n        if (*(int32_t *)&v89 != 0) {\n            // 0x4067d0\n            v268 = v251;\n            v276 = v255;\n            v274 = v254;\n            v272 = v253;\n            v270 = v252;\n            v266 = v250;\n            if (*(char *)(a6 + 46) != 0) {\n                goto lab_0x405e02;\n            } else {\n                // 0x4067db\n                v283 = v251;\n                v291 = v255;\n                v289 = v254;\n                v287 = v253;\n                v285 = v252;\n                v281 = v250;\n                v282 = v251;\n                v290 = v255;\n                v288 = v254;\n                v286 = v253;\n                v284 = v252;\n                v280 = v250;\n                if (v138 != 0x4000) {\n                    goto lab_0x405e33;\n                } else {\n                    goto lab_0x4067f0;\n                }\n            }\n        } else {\n            // 0x405d37\n            v279 = &v165;\n            if ((char)v249 == 0) {\n                int32_t v292 = __lxstat(1, (char *)str3, (struct stat *)&v86); // 0x407751\n                v243 = v251;\n                v244 = v255;\n                v245 = v254;\n                v246 = v253;\n                v247 = v252;\n                v248 = v250;\n                if (v292 != 0) {\n                    goto lab_0x405dec;\n                } else {\n                    // 0x40775e\n                    v279 = &v86;\n                    goto lab_0x405d46;\n                }\n            } else {\n                goto lab_0x405d46;\n            }\n        }\n    }\n  lab_0x4062b0:;\n    int32_t v293 = v259; // 0x4062b5\n    char v294 = v260; // 0x4062b5\n    int64_t v295 = v261; // 0x4062b5\n    int128_t v296 = v262; // 0x4062b5\n    int64_t v297 = v263; // 0x4062b5\n    int64_t v298 = v264; // 0x4062b5\n    int32_t v299 = v259; // 0x4062b5\n    char v300 = v260; // 0x4062b5\n    int64_t v301 = v261; // 0x4062b5\n    int128_t v302 = v262; // 0x4062b5\n    int64_t v303 = v263; // 0x4062b5\n    int64_t v304 = v264; // 0x4062b5\n    if (v138 != 0x4000 | *(char *)(a6 + 42) == 0) {\n        goto lab_0x405e28;\n    } else {\n        goto lab_0x4062cb;\n    }\n  lab_0x405b44:;\n    int64_t v305 = &v165;\n    int64_t v97 = v257;\n    int64_t v150 = owner; // 0x405b4b\n    int64_t v306; // 0x405990\n    int32_t v307; // 0x405990\n    int64_t v308; // 0x405990\n    int64_t v99; // 0x405990\n    int64_t v309; // 0x405990\n    int64_t v310; // 0x405990\n    int64_t v94; // 0x405990\n    int64_t v311; // 0x405990\n    int32_t v95; // 0x405990\n    int64_t v98; // 0x405990\n    char v70; // bp-344, 0x405990\n    int64_t v96; // 0x405990\n    int64_t v312; // 0x405990\n    if (v1 == v150) {\n        // 0x407008\n        if (v11 != (int64_t)v165) {\n            goto lab_0x405b58;\n        } else {\n            unsigned char v313 = *(char *)(a6 + 23); // 0x40701c\n            int32_t v314 = v93;\n            v94 = str3;\n            v95 = v314;\n            v96 = 1;\n            v98 = v93;\n            v99 = v256;\n            if (v313 != 0) {\n                goto lab_0x405b63;\n            } else {\n                // 0x40702a\n                v312 = 1;\n                if (*v5 == 2) {\n                    goto lab_0x406e35;\n                } else {\n                    // 0x407035\n                    v6 = 1;\n                    int32_t v315 = __lxstat(1, (char *)str3, (struct stat *)&v70); // 0x407059\n                    int64_t v316 = v256 % 256; // 0x40705e\n                    v94 = str3;\n                    v95 = v314;\n                    v96 = v97;\n                    v98 = v93;\n                    v99 = v316;\n                    if (v315 != 0) {\n                        goto lab_0x405b63;\n                    } else {\n                        // 0x40706e\n                        v6 = 1;\n                        int32_t v317 = __lxstat(1, file_path, (struct stat *)&v86); // 0x407087\n                        v94 = a1;\n                        v95 = v314;\n                        v96 = v97;\n                        v98 = v93;\n                        v99 = v316;\n                        if (v317 != 0) {\n                            goto lab_0x405b63;\n                        } else {\n                            int64_t v318 = v313; // 0x4070aa\n                            // 0x4070ac\n                            v318 = v86 == (int64_t)v70;\n                            int64_t v319 = &v70; // 0x4070c4\n                            v89 = v319;\n                            int64_t v320 = &v86; // 0x4070cb\n                            int32_t v321 = v319;\n                            v311 = a1;\n                            v306 = v319;\n                            v307 = v321;\n                            v310 = v320;\n                            v309 = v316;\n                            v308 = v318;\n                            if ((owner & 0xf000) != 0xa000) {\n                                goto lab_0x406e59;\n                            } else {\n                                // 0x4070e2\n                                v311 = a1;\n                                v306 = v319;\n                                v307 = v321;\n                                v310 = v320;\n                                v309 = v316;\n                                v308 = v318;\n                                if ((owner & 0xf000) != 0xa000) {\n                                    goto lab_0x406e59;\n                                } else {\n                                    // 0x4070f8\n                                    v94 = a1;\n                                    v95 = v314;\n                                    v96 = v97;\n                                    v98 = v93;\n                                    v99 = v316;\n                                    v311 = a1;\n                                    v306 = v319;\n                                    v307 = v321;\n                                    v310 = v320;\n                                    v309 = v316;\n                                    v308 = v318;\n                                    if (*(char *)(a6 + 21) == 0) {\n                                        goto lab_0x406e59;\n                                    } else {\n                                        goto lab_0x405b63;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x405b58;\n    }\n  lab_0x40657b:;\n    int32_t * v322 = __errno_location(); // 0x40657b\n    if (*v322 != 2) {\n        // 0x406589\n        function_40ea00(4, str3);\n        char * format7 = dcgettext(NULL, \"cannot stat %s\", 5); // 0x4065b3\n        error(0, *(int32_t *)(0x100000000000000 * (int64_t)v322 >> 56), format7);\n        // 0x406271\n        return v278 & 0xffffffff;\n    }\n    goto lab_0x405dd0;\n  lab_0x405e28:\n    // 0x405e28\n    v283 = v293;\n    v291 = v294;\n    v289 = v295;\n    v287 = v296;\n    v285 = v297;\n    v281 = v298;\n    int32_t v323 = v293; // 0x405e2d\n    char v324 = v294; // 0x405e2d\n    int64_t v325 = v295; // 0x405e2d\n    int128_t v326 = v296; // 0x405e2d\n    int64_t v327 = v297; // 0x405e2d\n    int64_t v328 = v298; // 0x405e2d\n    if (*v4 != 0) {\n        goto lab_0x406487;\n    } else {\n        goto lab_0x405e33;\n    }\n  lab_0x4062cb:;\n    int64_t v329 = owner; // 0x4062d2\n    v6 = v329;\n    int64_t v330 = v329; // 0x4062db\n    int32_t v331 = v299; // 0x4062db\n    char v332 = v300; // 0x4062db\n    int64_t v333 = v301; // 0x4062db\n    int128_t v334 = v302; // 0x4062db\n    int64_t v335 = v303; // 0x4062db\n    int64_t v336 = v304; // 0x4062db\n    int64_t v337; // 0x405990\n    int32_t v338; // 0x405990\n    int64_t v339; // 0x405990\n    int128_t v340; // 0x405990\n    int64_t v341; // 0x405990\n    char v342; // 0x405990\n    int64_t v343; // 0x405990\n    if ((char)a7 == 0) {\n        goto lab_0x406d10;\n    } else {\n        // 0x4062e1\n        v338 = v299;\n        v342 = v300;\n        v341 = v301;\n        v340 = v302;\n        v339 = v303;\n        v337 = v304;\n        v343 = function_409a10(str3, v329, v11);\n        goto lab_0x4062f7;\n    }\n  lab_0x406470:\n    // 0x406470\n    v323 = v267;\n    v324 = v275;\n    v325 = v273;\n    v326 = v271;\n    v327 = v269;\n    v328 = v265;\n    if (v138 != 0x4000) {\n        goto lab_0x406487;\n    } else {\n        // 0x40647c\n        v299 = v267;\n        v300 = v275;\n        v301 = v273;\n        v302 = v271;\n        v303 = v269;\n        v304 = v265;\n        v323 = v267;\n        v324 = v275;\n        v325 = v273;\n        v326 = v271;\n        v327 = v269;\n        v328 = v265;\n        if (*(char *)(a6 + 42) != 0) {\n            goto lab_0x4062cb;\n        } else {\n            goto lab_0x406487;\n        }\n    }\n  lab_0x405e02:\n    // 0x405e02\n    v282 = v268;\n    v290 = v276;\n    v288 = v274;\n    v286 = v272;\n    v284 = v270;\n    v280 = v266;\n    if (v138 == 0x4000) {\n        goto lab_0x4067f0;\n    } else {\n        // 0x405e12\n        function_404d70(a1, str3, v276);\n        v293 = v268;\n        v294 = v276;\n        v295 = v274;\n        v296 = v272;\n        v297 = v270;\n        v298 = v266;\n        goto lab_0x405e28;\n    }\n  lab_0x405b58:\n    // 0x405b58\n    v94 = str3;\n    v95 = v93;\n    v96 = v97;\n    v98 = v93;\n    v99 = v256;\n    v312 = 0;\n    if (*v5 == 2) {\n        goto lab_0x406e35;\n    } else {\n        goto lab_0x405b63;\n    }\n  lab_0x406487:;\n    // 0x406487\n    int64_t v344; // 0x405990\n    int64_t v345; // 0x405990\n    int64_t v346; // 0x405990\n    int32_t v347; // 0x405990\n    int32_t v348; // 0x405990\n    int32_t v349; // 0x405990\n    int64_t v350; // 0x405990\n    int64_t v351; // 0x405990\n    int64_t v352; // 0x405990\n    int128_t v353; // 0x405990\n    int128_t v354; // 0x405990\n    int128_t v355; // 0x405990\n    int64_t v356; // 0x405990\n    int64_t v357; // 0x405990\n    int64_t v358; // 0x405990\n    char v359; // 0x405990\n    char v360; // 0x405990\n    char v361; // 0x405990\n    int64_t v362; // 0x405990\n    if (v1 == 1) {\n        // 0x406d28\n        v349 = v323;\n        v361 = v324;\n        v357 = v325;\n        v355 = v326;\n        v352 = v327;\n        v346 = v328;\n        v362 = function_4099d0((int64_t)owner, v11);\n        goto lab_0x40662c;\n    } else {\n        // 0x406495\n        v347 = v323;\n        v359 = v324;\n        v356 = v325;\n        v353 = v326;\n        v350 = v327;\n        v344 = v328;\n        v348 = v323;\n        v360 = v324;\n        v354 = v326;\n        v351 = v327;\n        v358 = 0;\n        v345 = v328;\n        if (*(char *)(a6 + 34) != 0) {\n            goto lab_0x406440;\n        } else {\n            goto lab_0x4064a7;\n        }\n    }\n  lab_0x405e33:\n    // 0x405e33\n    v347 = v283;\n    v359 = v291;\n    v356 = v289;\n    v353 = v287;\n    v350 = v285;\n    v344 = v281;\n    int64_t v190; // 0x405990\n    int32_t v363; // 0x405990\n    int64_t v364; // 0x405990\n    int128_t v365; // 0x405990\n    int64_t v185; // 0x405990\n    int64_t v72; // 0x405990\n    int64_t v366; // 0x405990\n    char v367; // 0x405990\n    if (*(char *)(a6 + 34) != 0) {\n        goto lab_0x406440;\n    } else {\n        // 0x405e3e\n        v363 = v283;\n        v367 = v291;\n        v72 = v289;\n        v365 = v287;\n        v364 = v285;\n        v366 = 0;\n        v185 = 0x100000000000000 * v289 >> 56;\n        v190 = v281;\n        goto lab_0x405e56;\n    }\n  lab_0x406d10:\n    // 0x406d10\n    v338 = v331;\n    v342 = v332;\n    v341 = v333;\n    v340 = v334;\n    v339 = v335;\n    v337 = v336;\n    v343 = function_4099d0(v330, v11);\n    goto lab_0x4062f7;\n  lab_0x4067f0:\n    // 0x4067f0\n    v283 = v282;\n    v291 = v290;\n    v289 = v288;\n    v287 = v286;\n    v285 = v284;\n    v281 = v280;\n    v299 = v282;\n    v300 = v290;\n    v301 = v288;\n    v302 = v286;\n    v303 = v284;\n    v304 = v280;\n    if (*(char *)(a6 + 42) == 0) {\n        goto lab_0x405e33;\n    } else {\n        goto lab_0x4062cb;\n    }\n  lab_0x406e35:\n    // 0x406e35\n    v89 = v305;\n    int32_t v462 = v305;\n    v311 = str3;\n    v306 = v305;\n    v307 = v462;\n    v310 = v192;\n    v309 = v256;\n    v308 = v312;\n    int64_t v222; // 0x405990\n    int64_t v221; // 0x405990\n    int64_t v220; // 0x405990\n    int64_t v219; // 0x405990\n    if (v138 == 0xa000) {\n        // 0x407bd0\n        v311 = str3;\n        v306 = v305;\n        v307 = v462;\n        v310 = v192;\n        v309 = v256;\n        v308 = v312;\n        if ((owner & 0xf000) != 0xa000) {\n            goto lab_0x406e59;\n        } else {\n            // 0x407be6\n            v6 = a1;\n            if ((char)function_40ef80(a1, str3) != 0) {\n                goto lab_0x406eb0;\n            } else {\n                int64_t v463 = v256 % 256; // 0x407c11\n                v94 = str3;\n                v95 = v93;\n                v96 = v97;\n                v98 = v93;\n                v99 = v463;\n                if (v312 == 0 | *(int32_t *)&v89 != 0) {\n                    goto lab_0x405b63;\n                } else {\n                    // 0x407c2d\n                    v219 = str3;\n                    v220 = 1;\n                    v221 = v463;\n                    v222 = (int64_t)(*v4 ^ 1);\n                    goto lab_0x407c3b;\n                }\n            }\n        }\n    } else {\n        goto lab_0x406e59;\n    }\n  lab_0x405b63:;\n    int64_t v131 = v98;\n    int128_t v464; // 0x405990\n    int128_t v129 = v464;\n    int64_t v127 = v96;\n    int32_t v124 = v95;\n    int64_t v419; // 0x405990\n    int64_t v409; // 0x405990\n    int64_t v418; // 0x405990\n    int32_t v417; // 0x405990\n    int64_t v51; // 0x405990\n    int64_t v416; // 0x405990\n    int64_t v103; // 0x405990\n    int64_t v415; // 0x405990\n    if (v138 == 0x4000) {\n        // 0x407110\n        v103 = v94;\n        v409 = v99;\n        if (*v4 == 0) {\n            goto lab_0x405b9f;\n        } else {\n            // 0x40711b\n            v415 = v94;\n            v417 = *(int32_t *)(a6 + 8);\n            v418 = v99;\n            goto lab_0x40711f;\n        }\n    } else {\n        // 0x405b73\n        v416 = v94;\n        v419 = v99;\n        if (*(char *)(a6 + 45) != 0) {\n            int64_t v465 = 0; // 0x406d57\n            if (*(char *)(a6 + 31) != 0) {\n                // 0x406d59\n                v465 = 1;\n                if (*v4 != 0) {\n                    // 0x406d65\n                    v465 = v11 != (int64_t)v165;\n                }\n            }\n            // 0x406d78\n            v6 = str3;\n            int64_t v466 = function_40fd60(str3, v305, v192, v465); // 0x406d94\n            v416 = v305;\n            v419 = v99 % 256;\n            if ((int32_t)v466 < 0) {\n                goto lab_0x405b7e;\n            } else {\n                if (a10 != 0) {\n                    // 0x406db0\n                    *(char *)a10 = 1;\n                }\n                int64_t v467 = function_409a10(str3, v150, v11); // 0x406dcc\n                if (v467 == 0) {\n                    // 0x406271\n                    return 1;\n                }\n                char v468 = *(char *)(a6 + 46); // 0x406dda\n                v6 = v467;\n                if ((char)function_404f50(v467, str3, 1, v468, v397) != 0) {\n                    // 0x406271\n                    return 1;\n                }\n                // 0x406e02\n                v51 = 1;\n                if (*(char *)(a6 + 37) == 0) {\n                    // 0x406271\n                    return v10 & 0xffffffff;\n                }\n                goto lab_0x406e0d;\n            }\n        } else {\n            goto lab_0x405b7e;\n        }\n    }\n  lab_0x405d46:\n    // 0x405d46\n    v243 = v251;\n    v244 = v255;\n    v245 = v254;\n    v246 = v253;\n    v247 = v252;\n    v248 = v250;\n    int64_t v108; // 0x405990\n    if ((*(int32_t *)(v279 + 24) & 0xf000) != 0xa000) {\n        goto lab_0x405dec;\n    } else {\n        // 0x405d59\n        v243 = v251;\n        v244 = v255;\n        v245 = v254;\n        v246 = v253;\n        v247 = v252;\n        v248 = v250;\n        if ((char)function_40aef0(*(int64_t *)(a6 + 56), str3, v279) == 0) {\n            goto lab_0x405dec;\n        } else {\n            // 0x405d6d\n            function_40e920(1, 4, str3);\n            v6 = 0;\n            function_40e920(0, 4, a1);\n            v108 = (int64_t)\"will not copy %s through just-created symlink %s\";\n            goto lab_0x405da8;\n        }\n    }\n  lab_0x406440:;\n    int32_t v375 = v347; // 0x406445\n    char v376 = v359; // 0x406445\n    int64_t v377 = v356; // 0x406445\n    int128_t v378 = v353; // 0x406445\n    int64_t v379 = v350; // 0x406445\n    int64_t v380 = 0; // 0x406445\n    int64_t v381 = v344; // 0x406445\n    if (*(char *)(a6 + 23) == 0) {\n        if (v1 < 2) {\n            int32_t v469 = *v5; // 0x4065ea\n            v375 = v347;\n            v376 = v359;\n            v377 = v356;\n            v378 = v353;\n            v379 = v350;\n            v380 = 0;\n            v381 = v344;\n            if (((char)a7 == 0 || v469 != 3) == (v469 != 4)) {\n                goto lab_0x406456;\n            } else {\n                goto lab_0x40660b;\n            }\n        } else {\n            goto lab_0x40660b;\n        }\n    } else {\n        goto lab_0x406456;\n    }\n  lab_0x4062f7:;\n    int32_t v368 = v338; // 0x4062ff\n    char v369 = v342; // 0x4062ff\n    int64_t v370 = v341; // 0x4062ff\n    int128_t v371 = v340; // 0x4062ff\n    int64_t v372 = v339; // 0x4062ff\n    int64_t v373 = v343; // 0x4062ff\n    int64_t v374 = v337; // 0x4062ff\n    v375 = v338;\n    v376 = v342;\n    v377 = v341;\n    v378 = v340;\n    v379 = v339;\n    v380 = 0;\n    v381 = v337;\n    if (v343 == 0) {\n        goto lab_0x406456;\n    } else {\n        goto lab_0x406305;\n    }\n  lab_0x406e59:;\n    int64_t v382 = v308;\n    int64_t v383 = v309;\n    int64_t v384 = v310;\n    int64_t v385 = v306; // 0x408312\n    int64_t v386 = v311;\n    v6 = v307;\n    int64_t v387; // 0x405990\n    int64_t v209; // 0x405990\n    int64_t v388; // 0x405990\n    int64_t v211; // 0x405990\n    int64_t v389; // 0x405990\n    int64_t v210; // 0x405990\n    int64_t v208; // 0x405990\n    int64_t v390; // 0x405990\n    char v391; // 0x4074a0\n    if (v307 == 0) {\n        // 0x4074a0\n        v391 = *v4;\n        if (v391 != 0) {\n            goto lab_0x407810;\n        } else {\n            // 0x4074ad\n            if (*(char *)(a6 + 21) != 0) {\n                goto lab_0x407810;\n            } else {\n                // 0x4074b8\n                v390 = v386;\n                v387 = v385;\n                v389 = v384;\n                v388 = v383;\n                v208 = v386;\n                v209 = v385;\n                v210 = v384;\n                v211 = v383;\n                if ((*(int32_t *)(v384 + 24) & 0xf000) == 0xa000) {\n                    goto lab_0x4074fa;\n                } else {\n                    goto lab_0x4074c7;\n                }\n            }\n        }\n    } else {\n        if ((char)v382 != 0) {\n            // 0x408105\n            v6 = a1;\n            int64_t v392 = function_40ef80(a1, str3); // 0x408116\n            v219 = str3;\n            v220 = 0;\n            v221 = v383 % 256;\n            v222 = v392 & 0xffffffff ^ 1;\n            goto lab_0x407c3b;\n        } else {\n            int32_t v393 = v93;\n            v94 = v386;\n            v95 = v393;\n            v96 = v97;\n            v98 = v93;\n            v99 = v383;\n            if (*v4 != 0) {\n                goto lab_0x405b63;\n            } else {\n                // 0x406e79\n                v94 = v386;\n                v95 = v393;\n                v96 = v97;\n                v98 = v93;\n                v99 = v383;\n                if (*v5 == 2) {\n                    goto lab_0x405b63;\n                } else {\n                    // 0x406e84\n                    v94 = v386;\n                    v95 = v393;\n                    v96 = v97;\n                    v98 = v93;\n                    v99 = v383;\n                    if ((*(int32_t *)(v384 + 24) & 0xf000) != 0xa000) {\n                        goto lab_0x405b63;\n                    } else {\n                        // 0x406e97\n                        v94 = v386;\n                        v95 = v393;\n                        v96 = v97;\n                        v98 = v93;\n                        v99 = v383;\n                        if ((*(int32_t *)(v385 + 24) & 0xf000) == 0xa000) {\n                            goto lab_0x405b63;\n                        } else {\n                            goto lab_0x406eb0;\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40662c:\n    // 0x40662c\n    v375 = v349;\n    v376 = v361;\n    v377 = v357;\n    v378 = v355;\n    v379 = v352;\n    v380 = 0;\n    v381 = v346;\n    int64_t v394; // 0x405990\n    char v395; // 0x405990\n    if (v362 == 0) {\n        goto lab_0x406456;\n    } else {\n        // 0x40663a\n        v368 = v349;\n        v369 = v361;\n        v370 = v357;\n        v371 = v355;\n        v372 = v352;\n        v373 = v362;\n        v374 = v346;\n        if (v138 == 0x4000) {\n            goto lab_0x406305;\n        } else {\n            char v396 = *(char *)(a6 + 46); // 0x40664a\n            v6 = v362;\n            v395 = v361;\n            v394 = 1;\n            if ((char)function_404f50(v362, str3, 1, v396, v397) != 0) {\n                // 0x406271\n                return 1;\n            }\n            goto lab_0x4063a8;\n        }\n    }\n  lab_0x4064a7:\n    // 0x4064a7\n    v6 = a1;\n    char * file_path2 = (char *)str3; // 0x4064b1\n    int64_t v398; // 0x405990\n    if (rename(file_path, file_path2) == 0) {\n        // 0x406fb8\n        if (*(char *)(a6 + 46) != 0) {\n            // 0x407898\n            __printf_chk(1, dcgettext(NULL, \"renamed \", 5));\n            function_404d70(a1, str3, v360);\n        }\n        // 0x406fc3\n        if (*(char *)(a6 + 33) != 0) {\n            // 0x407878\n            function_405620(str3, 0, 1, a6);\n        }\n        if (a10 != 0) {\n            // 0x406fd5\n            *(char *)a10 = 1;\n        }\n        // 0x406fdc\n        v398 = 1;\n        if ((char)a7 != 0) {\n            // 0x406fe4\n            function_40ae60(*(int64_t *)(a6 + 56), str3, v192);\n            v398 = v79;\n        }\n        // 0x406271\n        return v398 & 0xffffffff;\n    }\n    int32_t * err_num3 = __errno_location(); // 0x4064be\n    int32_t v399 = *err_num3; // 0x4064c6\n    if (v399 == 22) {\n        // 0x407c98\n        function_40e920(1, 4, g62);\n        function_40e920(0, 4, g63);\n        error(0, (int32_t)\"cannot move %s to a subdirectory of itself, %s\" ^ (int32_t)\"cannot move %s to a subdirectory of itself, %s\", dcgettext(NULL, \"cannot move %s to a subdirectory of itself, %s\", 5));\n        *v7 = 1;\n        // 0x406271\n        return 1;\n    }\n    int64_t v400; // 0x405990\n    if (v399 != 18) {\n        // 0x407208\n        function_40e920(1, 4, str3);\n        v6 = 0;\n        function_40e920(0, 4, a1);\n        v400 = (int64_t)\"cannot move %s to %s\";\n        goto lab_0x406f7d;\n    } else {\n        // 0x4064da\n        v6 = str3;\n        if (v138 == 0x4000) {\n            // 0x406f30\n            v363 = v348;\n            v367 = v360;\n            v72 = 1;\n            v365 = v354;\n            v364 = v351;\n            v366 = v358;\n            v185 = 1;\n            v190 = v345;\n            if (rmdir(file_path2) == 0) {\n                goto lab_0x405e56;\n            } else {\n                // 0x406f3d\n                v363 = v348;\n                v367 = v360;\n                v72 = 1;\n                v365 = v354;\n                v364 = v351;\n                v366 = v358;\n                v185 = 1;\n                v190 = v345;\n                if (*err_num3 == 2) {\n                    goto lab_0x405e56;\n                } else {\n                    goto lab_0x406f48;\n                }\n            }\n        } else {\n            // 0x4064f1\n            if (unlink(file_path2) == 0) {\n                goto lab_0x406505;\n            } else {\n                // 0x4064fa\n                if (*err_num3 != 2) {\n                    goto lab_0x406f48;\n                } else {\n                    goto lab_0x406505;\n                }\n            }\n        }\n    }\n  lab_0x406456:\n    // 0x406456\n    v348 = v375;\n    v360 = v376;\n    v354 = v378;\n    v351 = v379;\n    v358 = v380;\n    v345 = v381;\n    if (*v4 != 0) {\n        goto lab_0x4064a7;\n    } else {\n        // 0x40645d\n        v363 = v375;\n        v367 = v376;\n        v72 = v377;\n        v365 = v378;\n        v364 = v379;\n        v366 = v380;\n        v185 = 0x100000000000000 * v377 >> 56;\n        v190 = v381;\n        goto lab_0x405e56;\n    }\n  lab_0x405e56:;\n    int64_t v55 = v366;\n    char v53 = v367;\n    char * v401 = (char *)(a6 + 43); // 0x405e64\n    int32_t v73; // 0x405990\n    if (*v401 != 0) {\n        // 0x405e6b\n        v73 = *(int32_t *)(a6 + 16);\n    }\n    uint32_t v402 = v73 % 0x1000;\n    uint64_t v403 = (int64_t)v402;\n    char * v404 = (char *)(a6 + 29); // 0x405e76\n    int64_t * v405; // 0x405990\n    int64_t * v171; // 0x405990\n    int32_t v74; // 0x405e91\n    if (*v404 != 0) {\n        int32_t v406 = 0x1000000 * (int32_t)v185 >> 24; // 0x406710\n        v6 = a1;\n        if ((char)function_405550(a1, str3, owner, (char)v406, a6) == 0) {\n            // 0x406271\n            return v10 & 0xffffffff;\n        }\n        int64_t * v407 = (int64_t *)(v403 % 64); // 0x406746\n        v405 = v407;\n        v74 = v406;\n        v171 = v407;\n        if (v138 != 0x4000) {\n            goto lab_0x405ec1;\n        } else {\n            goto lab_0x406752;\n        }\n    } else {\n        if (v138 == 0x4000) {\n            // 0x406c70\n            v6 = a1;\n            if ((char)function_405550(a1, str3, owner, (char)v185, a6) == 0) {\n                // 0x406271\n                return v10 & 0xffffffff;\n            }\n            // 0x406c96\n            v171 = (int64_t *)(v403 & 18);\n            goto lab_0x406752;\n        } else {\n            // 0x405e91\n            v74 = 0x1000000 * (int32_t)v185 >> 24;\n            v6 = a1;\n            v405 = NULL;\n            if ((char)function_405550(a1, str3, owner, (char)v74, a6) == 0) {\n                // 0x406271\n                return v10 & 0xffffffff;\n            }\n            goto lab_0x405ec1;\n        }\n    }\n  lab_0x406305:\n    // 0x406305\n    if ((char)function_40ef80(a1, v373) != 0) {\n        // 0x4076c0\n        function_40e920(1, 4, g62);\n        function_40e920(0, 4, g63);\n        char * format8 = dcgettext(NULL, \"cannot copy a directory, %s, into itself, %s\", 5); // 0x4076fb\n        v6 = 0;\n        error(0, (int32_t)\"cannot copy a directory, %s, into itself, %s\" ^ (int32_t)\"cannot copy a directory, %s, into itself, %s\", format8);\n        *v7 = 1;\n        v395 = v369;\n        v394 = (int64_t)format8;\n        goto lab_0x4063a8;\n    } else {\n        // 0x40631c\n        if ((char)function_40ef80(str3, v373) != 0) {\n            // 0x407f10\n            function_40ea00(4, g63);\n            error(0, (int32_t)\"warning: source directory %s specified more than once\" ^ (int32_t)\"warning: source directory %s specified more than once\", dcgettext(NULL, \"warning: source directory %s specified more than once\", 5));\n            if (a10 != 0 != *v4 != 0) {\n                // 0x406271\n                return 1;\n            }\n            // 0x4071ab\n            *(char *)a10 = 1;\n            // 0x406271\n            return 1;\n        }\n        int32_t v408 = *v5; // 0x406337\n        v375 = v368;\n        v376 = v369;\n        v377 = v370;\n        v378 = v371;\n        v379 = v372;\n        v380 = v373;\n        v381 = v374;\n        if (v408 == 4) {\n            goto lab_0x406456;\n        } else {\n            if (v408 != 3) {\n                goto lab_0x406351;\n            } else {\n                // 0x406349\n                v375 = v368;\n                v376 = v369;\n                v377 = v370;\n                v378 = v371;\n                v379 = v372;\n                v380 = v373;\n                v381 = v374;\n                if ((char)a7 != 0) {\n                    goto lab_0x406456;\n                } else {\n                    goto lab_0x406351;\n                }\n            }\n        }\n    }\n  lab_0x405b9f:\n    // 0x405b9f\n    if ((char)v127 != 0) {\n        // 0x406271\n        return 1;\n    }\n    int64_t v105 = v409 & 0xffffffff ^ 1; // 0x405bb5\n    int64_t v410; // 0x405990\n    int64_t v106; // 0x405990\n    int64_t v236; // 0x405990\n    int64_t v235; // 0x405990\n    int64_t v104; // 0x405990\n    int64_t v234; // 0x405990\n    int64_t v102; // 0x405990\n    int64_t v233; // 0x405990\n    int64_t v232; // 0x405990\n    int64_t v107; // 0x407df5\n    if ((owner & 0xf000) == 0x4000) {\n        // 0x407900\n        v233 = v103;\n        v235 = v105;\n        if (v138 == 0x4000) {\n            goto lab_0x405c40;\n        } else {\n            // 0x407910\n            if (*v4 == 0) {\n                goto lab_0x408225;\n            } else {\n                uint32_t v411 = *(int32_t *)&v89; // 0x40791b\n                v102 = v103;\n                v104 = v105;\n                v106 = v411;\n                if (v411 == 0) {\n                    goto lab_0x408225;\n                } else {\n                    goto lab_0x407940;\n                }\n            }\n        }\n    } else {\n        if (v138 == 0x4000) {\n            // 0x407dea\n            if (*v4 == 0) {\n                goto lab_0x408141;\n            } else {\n                uint32_t v412 = *(int32_t *)&v89; // 0x407df5\n                if (v412 == 0) {\n                    goto lab_0x408141;\n                } else {\n                    // 0x407e02\n                    v107 = v412;\n                    v410 = v107;\n                    if ((char)a7 != 0) {\n                        goto lab_0x405be4;\n                    } else {\n                        goto lab_0x408078;\n                    }\n                }\n            }\n        } else {\n            int64_t v413 = (int64_t)*(int32_t *)&v89; // 0x405bdc\n            v410 = v413;\n            v232 = v103;\n            v234 = v105;\n            v236 = v413;\n            if ((char)a7 == 0) {\n                goto lab_0x405c44;\n            } else {\n                goto lab_0x405be4;\n            }\n        }\n    }\n  lab_0x405b7e:;\n    int32_t v414 = *(int32_t *)(a6 + 8); // 0x405b83\n    v415 = v416;\n    v417 = v414;\n    v418 = v419;\n    if (*v4 != 0) {\n        goto lab_0x40711f;\n    } else {\n        // 0x405b8d\n        v103 = v416;\n        v409 = v419;\n        switch (v414) {\n            case 2: {\n                int64_t v420 = v398;\n                return v420 & 0xffffffff;\n            }\n            case 3: {\n                // 0x407fb9\n                v6 = a6;\n                int64_t v421 = function_404e20(a6, str3, v305 + 24); // 0x407fd5\n                v103 = str3;\n                v409 = v419 % 256;\n                if ((char)v421 == 0) {\n                    // 0x406271\n                    return 1;\n                }\n                // break -> 0x405b9f\n                break;\n            }\n        }\n        goto lab_0x405b9f;\n    }\n  lab_0x40660b:\n    // 0x40660b\n    v349 = v347;\n    v361 = v359;\n    v357 = v356;\n    v355 = v353;\n    v352 = v350;\n    v346 = v344;\n    v362 = function_409a10(str3, (int64_t)owner, v11);\n    goto lab_0x40662c;\n  lab_0x406eb0:\n    // 0x406eb0\n    function_40e920(1, 4, str3);\n    v6 = 0;\n    function_40e920(0, 4, a1);\n    v108 = (int64_t)\"%s and %s are the same file\";\n    goto lab_0x405da8;\n  lab_0x407810:;\n    int32_t v454 = v93;\n    v94 = v386;\n    v95 = v454;\n    v96 = v97;\n    v98 = v93;\n    v99 = v383;\n    int64_t v229; // 0x405990\n    int64_t v231; // 0x405990\n    int64_t v230; // 0x405990\n    int64_t v228; // 0x405990\n    if ((*(int32_t *)(v385 + 24) & 0xf000) == 0xa000) {\n        goto lab_0x405b63;\n    } else {\n        if ((char)v382 == 0) {\n            goto lab_0x407834;\n        } else {\n            // 0x407829\n            if (*(int64_t *)(v385 + 16) < 2) {\n                goto lab_0x407834;\n            } else {\n                // 0x408301\n                v6 = a1;\n                int64_t v455 = function_40ef80(a1, str3); // 0x408320\n                int64_t v456 = 0x100000000 * v385 >> 32; // 0x40832c\n                v89 = v456;\n                int64_t v457 = v383 % 256; // 0x408335\n                if ((char)v455 == 0) {\n                    // 0x408ae2\n                    v219 = str3;\n                    v220 = v455;\n                    v221 = v457;\n                    v222 = (int64_t)(*v4 ^ 1);\n                    goto lab_0x407c3b;\n                } else {\n                    int64_t v458 = 0x100000000000000 * v384 >> 56; // 0x408325\n                    v390 = str3;\n                    v387 = v456;\n                    v389 = v458;\n                    v388 = v457;\n                    v228 = str3;\n                    v229 = v456;\n                    v230 = v458;\n                    v231 = v457;\n                    if ((*(int32_t *)(v458 + 24) & 0xf000) != 0xa000) {\n                        goto lab_0x4074c7;\n                    } else {\n                        goto lab_0x4074db;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40711f:;\n    int64_t v459 = v418; // 0x405990\n    switch (v417) {\n        case 2: {\n            goto lab_0x4071a0;\n        }\n        case 3: {\n            goto lab_0x407166;\n        }\n        default: {\n            // 0x407129\n            v103 = v415;\n            v409 = v418;\n            if (v417 != 4) {\n                goto lab_0x405b9f;\n            } else {\n                // 0x407132\n                v103 = v415;\n                v409 = v418;\n                if (*(char *)(a6 + 47) == 0) {\n                    goto lab_0x405b9f;\n                } else {\n                    // 0x40713d\n                    v6 = str3;\n                    int64_t v460 = function_404bd0(str3, owner); // 0x407151\n                    int64_t v461 = v418 % 256; // 0x407156\n                    v103 = owner;\n                    v409 = v461;\n                    v459 = v461;\n                    if ((char)v460 != 0) {\n                        goto lab_0x405b9f;\n                    } else {\n                        goto lab_0x407166;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x405da8:\n    // 0x405da8\n    v6 = 0;\n    // 0x405db8\n    error(0, 0, dcgettext(NULL, (char *)v108, 5));\n    // 0x406271\n    return 0;\n  lab_0x406f7d:\n    // 0x406f7d\n    error(0, *err_num3, dcgettext(NULL, (char *)v400, 5));\n    function_409980((int64_t)owner, v11);\n    // 0x406271\n    return v10 & 0xffffffff;\n  lab_0x405ec1:;\n    int64_t * v41 = v405;\n    char v422 = *(char *)(a6 + 44); // 0x405ec1\n    int64_t v50; // 0x405990\n    int64_t v69; // 0x405990\n    int64_t v48; // 0x405990\n    int64_t v49; // 0x405990\n    int64_t v36; // 0x405990\n    int64_t v47; // 0x405990\n    int64_t v46; // 0x405990\n    int64_t v59; // 0x405990\n    int64_t v423; // 0x405990\n    int64_t v45; // 0x405990\n    int64_t v35; // 0x405990\n    int64_t v42; // 0x405990\n    int64_t v43; // 0x405990\n    int64_t v44; // 0x405990\n    int64_t * v40; // 0x405990\n    int64_t v38; // 0x405990\n    char v39; // 0x406800\n    int64_t v424; // 0x405ee1\n    bool v425; // 0x405990\n    int64_t str7; // 0x407d75\n    int32_t v426; // 0x4084b9\n    if (v422 == 0) {\n        // 0x406800\n        v39 = *(char *)(a6 + 23);\n        if (v39 != 0) {\n            int64_t v427 = (int64_t)*(char *)(a6 + 22); // 0x406ef7\n            v6 = a1;\n            int64_t v428 = function_404f50(a1, str3, v427, 0, v397); // 0x406f08\n            v38 = 0;\n            v40 = v41;\n            v42 = v72;\n            v43 = 0x100000000000000 * v428 >> 56;\n            v44 = 0;\n            v45 = v427;\n            v46 = v79;\n            v47 = 0;\n            v48 = a1;\n            v49 = v10;\n            v35 = v427;\n            v36 = v10;\n            if ((char)v428 != 0) {\n                goto lab_0x405f45;\n            } else {\n                goto lab_0x406910;\n            }\n        } else {\n            // 0x406813\n            v59 = owner;\n            if (v138 == 0x8000) {\n                goto lab_0x407248;\n            } else {\n                unsigned char v429 = *(char *)(a6 + 20) & (char)(v138 != 0xa000); // 0x40682d\n                if (v429 != 0) {\n                    goto lab_0x407248;\n                } else {\n                    int64_t v430 = v429; // 0x40682d\n                    if (v138 == 0x1000) {\n                        // 0x408005\n                        v6 = 0;\n                        v86 = 0;\n                        uint32_t v431 = owner & -1 - (int32_t)(int64_t)v41; // 0x408028\n                        int64_t v432 = v431; // 0x40802e\n                        char * pathname = (char *)str3; // 0x408033\n                        int32_t v433 = __xmknod(0, pathname, v431, (int32_t *)&v86); // 0x408033\n                        v38 = v430;\n                        v40 = v41;\n                        v42 = v72;\n                        v43 = 1;\n                        v44 = v430;\n                        v45 = v432;\n                        v46 = v79;\n                        v47 = v430;\n                        v48 = a1;\n                        v49 = v10;\n                        if (v433 != 0) {\n                            // 0x40846c\n                            v6 = str3;\n                            v38 = v430;\n                            v40 = v41;\n                            v42 = v72;\n                            v43 = 1;\n                            v44 = v430;\n                            v45 = v432;\n                            v46 = v79;\n                            v47 = v430;\n                            v48 = a1;\n                            v49 = v10;\n                            if (mkfifo(pathname, v431 & -0x1001) == 0) {\n                                goto lab_0x405f45;\n                            } else {\n                                // 0x408491\n                                v6 = 4;\n                                function_40ea00(4, str3);\n                                v69 = (int64_t)\"cannot create fifo %s\";\n                                goto lab_0x4068f0;\n                            }\n                        } else {\n                            goto lab_0x405f45;\n                        }\n                    } else {\n                        if ((owner & 0xb000) != 0x2000 && v138 != 0xc000) {\n                            if (v138 != 0xa000) {\n                                // 0x4080b8\n                                v6 = 4;\n                                function_40ea00(4, a1);\n                                v50 = (int64_t)\"%s has unknown file type\";\n                                goto lab_0x4067b2;\n                            } else {\n                                // 0x407d6b\n                                str7 = function_40a1c0(a1, v1);\n                                if (str7 == 0) {\n                                    // 0x408b00\n                                    v6 = 4;\n                                    function_40ea00(4, a1);\n                                    v69 = (int64_t)\"cannot read symbolic link %s\";\n                                    goto lab_0x4068f0;\n                                } else {\n                                    int64_t v434 = function_409fd0(str7, 0xffffff9c, str3, *(char *)(a6 + 22)); // 0x407d9a\n                                    v423 = str3;\n                                    if ((int32_t)v434 < 0) {\n                                        // 0x4084b4\n                                        v426 = *__errno_location();\n                                        v423 = str3;\n                                        if (v426 == 0) {\n                                            goto lab_0x407da7;\n                                        } else {\n                                            // 0x4084c9\n                                            if ((char)v72 == 0 == *(char *)(a6 + 45) == 1) {\n                                                if ((owner & 0xf000) != 0xa000) {\n                                                    goto lab_0x4084dd;\n                                                } else {\n                                                    // 0x4093eb\n                                                    v6 = str7;\n                                                    int64_t v435 = str7; // 0x409400\n                                                    int64_t v436 = -1; // 0x409400\n                                                    int64_t v437 = 0; // 0x409400\n                                                    while (v436 != 0) {\n                                                        int64_t v438 = v435;\n                                                        v435 = v438 + (v425 ? -1 : 1);\n                                                        v6 = v435;\n                                                        v436--;\n                                                        v437 = v436;\n                                                        if (*(char *)v438 == 0) {\n                                                            // break -> \n                                                            break;\n                                                        }\n                                                        v437 = 0;\n                                                    }\n                                                    if (v1 != -2 - v437) {\n                                                        goto lab_0x4084dd;\n                                                    } else {\n                                                        int64_t str6 = function_40a1c0(str3, v1); // 0x409419\n                                                        if (str6 == 0) {\n                                                            goto lab_0x4084dd;\n                                                        } else {\n                                                            int32_t strcmp_rc = strcmp((char *)str6, (char *)str7); // 0x409434\n                                                            int64_t v439 = 0x100000000 * str6 >> 32; // 0x409439\n                                                            v6 = v439;\n                                                            free((int64_t *)v439);\n                                                            v423 = v439;\n                                                            if (strcmp_rc != 0) {\n                                                                goto lab_0x4084dd;\n                                                            } else {\n                                                                goto lab_0x407da7;\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            } else {\n                                                goto lab_0x4084dd;\n                                            }\n                                        }\n                                    } else {\n                                        goto lab_0x407da7;\n                                    }\n                                }\n                            }\n                        } else {\n                            // 0x406881\n                            v6 = 0;\n                            int64_t v440 = ((int64_t)v41 ^ 0xffffffff) & v59; // 0x4068a0\n                            int32_t v441 = __xmknod(0, (char *)str3, (int32_t)v440, (int32_t *)&v86); // 0x4068a9\n                            v38 = v430;\n                            v40 = v41;\n                            v42 = v72;\n                            v43 = 1;\n                            v44 = v430;\n                            v45 = v440;\n                            v46 = v79;\n                            v47 = v430;\n                            v48 = a1;\n                            v49 = v10;\n                            if (v441 == 0) {\n                                goto lab_0x405f45;\n                            } else {\n                                // 0x4068cc\n                                v6 = 4;\n                                function_40ea00(4, str3);\n                                v69 = (int64_t)\"cannot create special file %s\";\n                                goto lab_0x4068f0;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        // 0x405ed4\n        if (*(char *)&v6 == 47) {\n            goto lab_0x405f0d;\n        } else {\n            // 0x405eda\n            v424 = function_40ac60();\n            v6 = v424;\n            int64_t v442 = v425 ? -1 : 1; // 0x405ef6\n            int64_t v443 = v424; // 0x405ef6\n            int64_t v444 = (int64_t)\".\"; // 0x405990\n            int64_t v445 = 2; // 0x405ef6\n            unsigned char v446 = *(char *)v444; // 0x405ef6\n            char v447 = *(char *)v443; // 0x405ef6\n            v443 += v442;\n            v6 = v443;\n            char v448 = v447; // 0x405ef6\n            bool v449 = false; // 0x405ef6\n            while (v446 == v447) {\n                v445--;\n                v444 += v442;\n                v448 = v446;\n                v449 = true;\n                if (v445 == 0) {\n                    // break -> \n                    break;\n                }\n                v446 = *(char *)v444;\n                v447 = *(char *)v443;\n                v443 += v442;\n                v6 = v443;\n                v448 = v447;\n                v449 = false;\n            }\n            unsigned char v450 = v448;\n            if ((v446 >= v450 && !v449) != v446 < v450) {\n                // 0x407790\n                if (__xstat(1, \".\", (struct stat *)&v70) != 0) {\n                    // 0x405f05\n                    free((int64_t *)v424);\n                    goto lab_0x405f0d;\n                } else {\n                    // 0x4077ae\n                    if (__xstat(1, (char *)v424, (struct stat *)&v86) != 0) {\n                        // 0x405f05\n                        free((int64_t *)v424);\n                        goto lab_0x405f0d;\n                    } else {\n                        // 0x408a0a\n                        if (v86 != (int64_t)v70) {\n                            goto lab_0x4077de;\n                        } else {\n                            // 0x405f05\n                            free((int64_t *)v424);\n                            goto lab_0x405f0d;\n                        }\n                    }\n                }\n            } else {\n                // 0x405f05\n                free((int64_t *)v424);\n                goto lab_0x405f0d;\n            }\n        }\n    }\n  lab_0x406752:;\n    int64_t v451 = owner; // 0x40675a\n    if (a5 != 0) {\n        if (*(int64_t *)(a5 + 8) == v451) {\n            // 0x406792\n            if (*(int64_t *)(a5 + 16) == v11) {\n                // 0x406798\n                v6 = 4;\n                function_40ea00(4, a1);\n                v50 = (int64_t)\"cannot copy cyclic symbolic link %s\";\n                goto lab_0x4067b2;\n            }\n        }\n        int64_t v452 = *(int64_t *)a5; // 0x406780\n        while (v452 != 0) {\n            int64_t v453 = v452;\n            if (*(int64_t *)(v453 + 8) == v451) {\n                // 0x406792\n                if (*(int64_t *)(v453 + 16) == v11) {\n                    // 0x406798\n                    v6 = 4;\n                    function_40ea00(4, a1);\n                    v50 = (int64_t)\"cannot copy cyclic symbolic link %s\";\n                    goto lab_0x4067b2;\n                }\n            }\n            // 0x406780\n            v452 = *(int64_t *)v453;\n        }\n    }\n    int64_t v184 = v190 - 17 & -16; // 0x406958\n    *(int64_t *)v184 = a5;\n    *(int64_t *)(v184 | 8) = v451;\n    *(int64_t *)(v184 + 16) = v11;\n    int64_t * v170; // 0x405990\n    int64_t v169; // 0x405990\n    int64_t v168; // 0x405990\n    if ((owner & 0xf000) == 0x4000 == (char)v72 == 0) {\n        // 0x407b70\n        v168 = 0;\n        v170 = NULL;\n        if ((*(int64_t *)(a6 + 32) & 0xff000000ff00) != 0) {\n            // 0x4080d7\n            v6 = str3;\n            v168 = 0;\n            v170 = NULL;\n            if ((char)function_405620(str3, *(char *)(a6 + 37), 0, a6) != 0) {\n                goto lab_0x406a8f;\n            } else {\n                // 0x4080f5\n                v35 = 0;\n                v36 = v10;\n                v168 = 0;\n                v170 = NULL;\n                if (*(char *)(a6 + 38) == 0) {\n                    goto lab_0x406a8f;\n                } else {\n                    goto lab_0x406910;\n                }\n            }\n        } else {\n            goto lab_0x406a8f;\n        }\n    } else {\n        char * path = (char *)str3; // 0x40699f\n        if (mkdir(path, v402 & -1 - (int32_t)(int64_t)v171) != 0) {\n            // 0x4078d8\n            v6 = 4;\n            function_40ea00(4, str3);\n            v69 = (int64_t)\"cannot create directory %s\";\n            goto lab_0x4068f0;\n        } else {\n            // 0x4069ac\n            v6 = 1;\n            if (__lxstat(1, path, (struct stat *)&v165) != 0) {\n                // 0x407f63\n                v6 = 4;\n                function_40ea00(4, str3);\n                v69 = (int64_t)\"cannot stat %s\";\n                goto lab_0x4068f0;\n            } else {\n                // 0x4069cc\n                v169 = 0;\n                if ((owner & 448) == 448) {\n                    goto lab_0x406a14;\n                } else {\n                    // 0x4069e9\n                    v6 = str3;\n                    v169 = 1;\n                    if (chmod(path, owner || 448) != 0) {\n                        // 0x4083b0\n                        v6 = 4;\n                        function_40ea00(4, str3);\n                        v69 = (int64_t)\"setting permissions for %s\";\n                        goto lab_0x4068f0;\n                    } else {\n                        goto lab_0x406a14;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x4063a8:;\n    char v52 = v395; // 0x4063ad\n    int64_t v54 = v10; // 0x4063ad\n    v51 = v394;\n    if (*(char *)(a6 + 37) != 0) {\n        goto lab_0x406e0d;\n    } else {\n        goto lab_0x4063b3;\n    }\n  lab_0x407c3b:\n    // 0x407c3b\n    if ((char)v222 == 0) {\n        goto lab_0x406eb0;\n    } else {\n        // 0x407c44\n        v94 = v219;\n        v95 = v93;\n        v96 = 0x100000000000000 * v220 >> 56;\n        v98 = v93;\n        v99 = v221;\n        goto lab_0x405b63;\n    }\n  lab_0x405c40:\n    // 0x405c40\n    v232 = v233;\n    v234 = v235;\n    v236 = (int64_t)*(int32_t *)&v89;\n    goto lab_0x405c44;\n  lab_0x4071a0:\n    // 0x4071a0\n    if (a10 == 0) {\n        // 0x406271\n        return 1;\n    }\n    // 0x4071ab\n    *(char *)a10 = 1;\n    // 0x406271\n    return 1;\n  lab_0x407166:\n    // 0x407166\n    v6 = a6;\n    int64_t v478 = function_404e20(a6, str3, v305 + 24); // 0x407182\n    v103 = str3;\n    v409 = v459 % 256;\n    if ((char)v478 != 0) {\n        goto lab_0x405b9f;\n    } else {\n        goto lab_0x4071a0;\n    }\n  lab_0x406e0d:\n    // 0x406e0d\n    function_404d30(v6);\n    v473 = v51;\n    goto lab_0x406e18;\n  lab_0x406505:;\n    unsigned char v479 = *(char *)(a6 + 46) % 2; // 0x406512\n    v363 = v348;\n    v367 = v360;\n    v72 = 1;\n    v365 = v354;\n    v364 = v351;\n    v366 = v358;\n    v185 = 1;\n    v190 = v345;\n    if (v479 != 0) {\n        // 0x407c50\n        __printf_chk(1, dcgettext(NULL, \"copied \", 5));\n        function_404d70(a1, str3, v360);\n        v363 = v348;\n        v367 = v360;\n        v72 = v479;\n        v365 = v354;\n        v364 = v351;\n        v366 = v358;\n        v185 = 1;\n        v190 = v345;\n    }\n    goto lab_0x405e56;\n  lab_0x4063b3:;\n    int64_t file_path3 = v52; // 0x4063b3\n    v6 = file_path3;\n    if (v52 == 0) {\n        // 0x406271\n        return v54 & 0xffffffff;\n    }\n    // 0x4063c3\n    if (rename((char *)file_path3, (char *)str3) != 0) {\n        // 0x4071c0\n        function_40ea00(4, str3);\n        error(0, *__errno_location(), dcgettext(NULL, \"cannot un-backup %s\", 5));\n        // 0x406271\n        return v54 & 0xffffffff;\n    }\n    // 0x4063d7\n    if (*(char *)(a6 + 46) != 0) {\n        // 0x4063e2\n        function_40e920(1, 4, str3);\n        function_40e920(0, 4, file_path3);\n        __printf_chk(1, dcgettext(NULL, \"%s -> %s (unbackup)\\n\", 5));\n    }\n    // 0x406271\n    return v54 & 0xffffffff;\n  lab_0x406351:\n    // 0x406351\n    function_40e920(1, 4, v373);\n    function_40e920(0, 4, str3);\n    char * format10 = dcgettext(NULL, \"will not create hard link %s to directory %s\", 5); // 0x40638c\n    v6 = 0;\n    error(0, (int32_t)\"will not create hard link %s to directory %s\" ^ (int32_t)\"will not create hard link %s to directory %s\", format10);\n    v395 = v369;\n    v394 = (int64_t)format10;\n    goto lab_0x4063a8;\n  lab_0x407834:;\n    int64_t v207 = v386; // 0x407841\n    int64_t v205 = v385; // 0x407841\n    char v212 = v391; // 0x407841\n    int64_t v203 = v384; // 0x407841\n    int64_t v201 = v383; // 0x407841\n    int64_t v223 = v386; // 0x407841\n    int32_t v224 = v454; // 0x407841\n    int64_t v227 = v385; // 0x407841\n    int64_t v226 = v384; // 0x407841\n    int64_t v225 = v383; // 0x407841\n    if ((*(int32_t *)(v384 + 24) & 0xf000) == 0xa000) {\n        goto lab_0x4074e0;\n    } else {\n        goto lab_0x407847;\n    }\n  lab_0x4074fa:;\n    int64_t v91 = v211;\n    int64_t v84 = v210;\n    int64_t v88 = v209; // 0x408133\n    int64_t v101 = v208;\n    if (*(char *)(a6 + 44) != 0) {\n        goto lab_0x408130;\n    } else {\n        // 0x407505\n        if ((*(int32_t *)(a6 + 20) & -0xff0100) == 0) {\n            goto lab_0x407523;\n        } else {\n            // 0x40750f\n            if ((*(int32_t *)(v88 + 24) & 0xf000) == 0xa000) {\n                goto lab_0x408130;\n            } else {\n                goto lab_0x407523;\n            }\n        }\n    }\n  lab_0x4074c7:;\n    int64_t v480 = v388;\n    int64_t v481 = v389;\n    int64_t v482 = v387; // 0x4074c7\n    int64_t v483 = v390;\n    v228 = v483;\n    v229 = v482;\n    v230 = v481;\n    v231 = v480;\n    if ((*(int32_t *)(v482 + 24) & 0xf000) != 0xa000) {\n        // 0x4074c7\n        v223 = v483;\n        v224 = v93;\n        v227 = v482;\n        v226 = v481;\n        v225 = v480;\n        goto lab_0x407847;\n    } else {\n        goto lab_0x4074db;\n    }\n  lab_0x405c44:;\n    unsigned char v237 = *v4; // 0x405c44\n    int64_t v117; // 0x405990\n    int64_t v136; // 0x405990\n    int64_t v112; // 0x405990\n    int64_t v133; // 0x405990\n    int64_t v110; // 0x405990\n    if (v237 != 0) {\n        // 0x407eef\n        uint32_t v238; // 0x405990\n        if ((v238 & 0xf000) == 0x4000 || v138 != 0x4000) {\n            // 0x407f05\n            v123 = v124;\n            v125 = 0;\n            v126 = v127;\n            v128 = v129;\n            v130 = v131;\n            int64_t v239; // 0x405990\n            v132 = v239;\n            v134 = v135;\n            int64_t v240; // 0x405990\n            v102 = v240;\n            v104 = v239;\n            int64_t v241; // 0x405990\n            v106 = v241;\n            if (v241 == 0) {\n                goto lab_0x405de4;\n            } else {\n                goto lab_0x407940;\n            }\n        } else {\n            goto lab_0x408078;\n        }\n    } else {\n        // 0x405c51\n        v136 = v237;\n        v133 = v234;\n        v110 = v232;\n        v112 = v234;\n        v117 = v236;\n        if (v236 != 0) {\n            goto lab_0x407ea8;\n        } else {\n            goto lab_0x405c5a;\n        }\n    }\n  lab_0x408225:\n    // 0x408225\n    v6 = 4;\n    function_40ea00(4, str3);\n    v242 = (int64_t)\"cannot overwrite directory %s with non-directory\";\n    goto lab_0x406cd2;\n  lab_0x408141:\n    // 0x408141\n    function_40e920(1, 4, a1);\n    v6 = 0;\n    function_40e920(0, 4, str3);\n    v108 = (int64_t)\"cannot overwrite non-directory %s with directory %s\";\n    goto lab_0x405da8;\n  lab_0x405be4:\n    // 0x405be4\n    if (v410 == 3) {\n        // 0x407e9d\n        v102 = v103;\n        v104 = v105;\n        v106 = 3;\n        v110 = v103;\n        v112 = v105;\n        v117 = 3;\n        if (*v4 != 0) {\n            goto lab_0x407940;\n        } else {\n            goto lab_0x407ea8;\n        }\n    } else {\n        int64_t v474 = *(int64_t *)(a6 + 56); // 0x405bee\n        v6 = v474;\n        int64_t v475 = function_40aef0(v474, str3, v305); // 0x405c06\n        v233 = str3;\n        v235 = v105 % 256;\n        if ((char)v475 != 0) {\n            // 0x408533\n            function_40e920(1, 4, a1);\n            v6 = 0;\n            function_40e920(0, 4, str3);\n            v108 = (int64_t)\"will not overwrite just-created %s with %s\";\n            goto lab_0x405da8;\n        } else {\n            goto lab_0x405c40;\n        }\n    }\n  lab_0x406f48:\n    // 0x406f48\n    function_40e920(1, 4, str3);\n    v6 = 0;\n    function_40e920(0, 4, a1);\n    v400 = (int64_t)\"inter-device move failed: %s to %s; unable to remove target\";\n    goto lab_0x406f7d;\n  lab_0x405f0d:;\n    int64_t v476 = v422; // 0x405ec6\n    v6 = a1;\n    int64_t v477 = function_409fd0(a1, 0xffffff9c, str3, *(char *)(a6 + 22)); // 0x405f21\n    v38 = 0;\n    v40 = v41;\n    v42 = v72;\n    v43 = v476;\n    v44 = v476;\n    v45 = str3;\n    v46 = v79;\n    v47 = 0;\n    v48 = a1;\n    v49 = v10;\n    if ((int32_t)v477 < 0) {\n        // 0x407cfe\n        function_40e920(1, 4, a1);\n        function_40e920(0, 4, str3);\n        char * format9 = dcgettext(NULL, \"cannot create symbolic link %s to %s\", 5); // 0x407d35\n        int32_t err_num4 = *__errno_location(); // 0x407d4b\n        v6 = 0;\n        error(0, err_num4, format9);\n        v35 = (int64_t)format9;\n        v36 = v10;\n        goto lab_0x406910;\n    } else {\n        goto lab_0x405f45;\n    }\n  lab_0x406a8f:;\n    int128_t v172 = __asm_movdqu(*(int128_t *)&v89); // 0x406a8f\n    int128_t v173 = __asm_movdqu(*(int128_t *)(a6 + 16)); // 0x406a95\n    int128_t v174 = __asm_movdqu(*(int128_t *)(a6 + 32)); // 0x406aa3\n    int128_t v175 = __asm_movdqu(*(int128_t *)(a6 + 48)); // 0x406aa9\n    v86 = __asm_movaps(v172);\n    __asm_movaps(v173);\n    __asm_movaps(v174);\n    __asm_movaps(v175);\n    int64_t v176 = function_40f480(a1, 2); // 0x406ad3\n    int32_t length2; // bp-680, 0x405990\n    int32_t v177; // 0x405990\n    int32_t v167; // 0x405990\n    if (v176 == 0) {\n        // 0x408362\n        function_40ea00(4, a1);\n        char * format6 = dcgettext(NULL, \"cannot access %s\", 5); // 0x408382\n        int32_t * err_num2 = __errno_location(); // 0x40838a\n        v6 = 0;\n        error(0, *err_num2, format6);\n        v177 = v167;\n        v38 = v168;\n        v40 = v170;\n        v42 = v72;\n        v43 = 0;\n        v44 = 0;\n        v45 = (int64_t)format6;\n        v46 = v79;\n        v47 = 0;\n        v48 = a1;\n        v49 = v10;\n    } else {\n        // 0x406ae8\n        int64_t v178; // 0x405990\n        uint32_t v179; // 0x405990\n        char * v180; // 0x405990\n        int64_t v181; // 0x406bfa\n        if (*(char *)v176 == 0) {\n            // branch -> 0x406c4b\n        } else {\n            int64_t v182 = &v86;\n            int64_t v183 = 0x100000000 * v184 >> 32;\n            v179 = 0x1000000 * (int32_t)v185 >> 24;\n            v180 = (char *)a8;\n            int64_t v186 = 0; // 0x406b65\n            int64_t str5 = v176; // 0x406b7f\n            int64_t v187 = function_40b0c0(); // 0x406b9b\n            int64_t v188 = function_40b0c0(); // 0x406baf\n            char v189 = *v180; // 0x406bdc\n            *(int64_t *)(v190 - 40) = 0;\n            *(int64_t *)(v190 - 48) = (int64_t)&length2;\n            *(int64_t *)(v190 - 56) = (int64_t)&v70;\n            *(int64_t *)(v190 - 64) = 0;\n            v70 = v189;\n            int64_t v191 = function_405990(v187, v188, (char)v179, v192, v183, v182, (int64_t)v189, (int64_t)&g90, (int64_t)&g90, (int64_t)&g90); // 0x406bf5\n            v181 = 0x100000000000000 * (v191 & 1) >> 56;\n            *v7 = *v7 | (char)length2;\n            free((int64_t *)v188);\n            free((int64_t *)v187);\n            while ((char)length2 == 0) {\n                // 0x406b70\n                v186 = v70 | (char)v186;\n                str5 = str5 + 1 + (int64_t)strlen((char *)str5);\n                v178 = v186;\n                if (*(char *)str5 == 0) {\n                    // break -> 0x406c2c\n                    break;\n                }\n                v187 = function_40b0c0();\n                v188 = function_40b0c0();\n                v189 = *v180;\n                *(int64_t *)(v190 - 40) = 0;\n                *(int64_t *)(v190 - 48) = (int64_t)&length2;\n                *(int64_t *)(v190 - 56) = (int64_t)&v70;\n                *(int64_t *)(v190 - 64) = 0;\n                v70 = v189;\n                v191 = function_405990(v187, v188, (char)v179, v192, v183, v182, (int64_t)v189, (int64_t)&g90, (int64_t)&g90, (int64_t)&g90);\n                v181 = 0x100000000000000 * (v191 & v181) >> 56;\n                *v7 = *v7 | (char)length2;\n                free((int64_t *)v188);\n                free((int64_t *)v187);\n            }\n        }\n        // 0x406c4b\n        v6 = v176;\n        free((int64_t *)v176);\n        *v180 = (char)(v178 & 0xffffffff);\n        v177 = v167;\n        v38 = v168;\n        v40 = v170;\n        v42 = v72;\n        v43 = v181;\n        v44 = 0;\n        v45 = v179;\n        v46 = v79;\n        v47 = 0;\n        v48 = a1;\n        v49 = v10 % 256;\n    }\n    goto lab_0x405f45;\n  lab_0x4074e0:;\n    int64_t v200 = v201;\n    int64_t v202 = v203;\n    int64_t v204 = v205; // 0x4083f9\n    int64_t v206 = v207;\n    v208 = v206;\n    v209 = v204;\n    v210 = v202;\n    v211 = v200;\n    if (v138 == 0xa000 == (v212 != 0)) {\n        // 0x4083e4\n        v208 = v206;\n        v209 = v204;\n        v210 = v202;\n        v211 = v200;\n        if (*(int64_t *)(v204 + 16) < 2) {\n            goto lab_0x4074fa;\n        } else {\n            // 0x4083ef\n            v6 = a1;\n            char * v213 = canonicalize_file_name(file_path); // 0x408407\n            int64_t v214 = 0x100000000 * v204 >> 32; // 0x408413\n            v89 = v214;\n            int64_t v215 = v200 % 256; // 0x40841d\n            v208 = v206;\n            v209 = v214;\n            v210 = 0x100000000000000 * v202 >> 56;\n            v211 = v215;\n            if (v213 == NULL) {\n                goto lab_0x4074fa;\n            } else {\n                int64_t v216 = (int64_t)v213; // 0x408407\n                int64_t v217 = function_40ef80(v216, str3); // 0x408443\n                int64_t v218 = 0x100000000000000 * v216 >> 56; // 0x408448\n                v6 = v218;\n                free((int64_t *)v218);\n                v219 = str3;\n                v220 = (int32_t)&g90 ^ (int32_t)&g90;\n                v221 = v215;\n                v222 = v217 & 0xffffffff ^ 1;\n                goto lab_0x407c3b;\n            }\n        }\n    } else {\n        goto lab_0x4074fa;\n    }\n  lab_0x407847:\n    // 0x407847\n    v94 = v223;\n    v95 = v224;\n    v96 = v97;\n    v98 = v93;\n    v99 = v225;\n    if (*(int64_t *)(v226 + 8) != *(int64_t *)(v227 + 8)) {\n        goto lab_0x405b63;\n    } else {\n        // 0x407855\n        v94 = v223;\n        v95 = v224;\n        v96 = v97;\n        v98 = v93;\n        v99 = v225;\n        if (*(int64_t *)v226 != *(int64_t *)v227) {\n            goto lab_0x405b63;\n        } else {\n            // 0x407861\n            v94 = v223;\n            v95 = v224;\n            v96 = 1;\n            v98 = v93;\n            v99 = v225;\n            v228 = v223;\n            v229 = v227;\n            v230 = v226;\n            v231 = v225;\n            if (*(char *)(a6 + 23) == 0) {\n                goto lab_0x4074db;\n            } else {\n                goto lab_0x405b63;\n            }\n        }\n    }\n  lab_0x408130:\n    // 0x408130\n    v219 = v101;\n    v220 = 0;\n    v221 = v91;\n    v222 = *(int64_t *)v88 == *(int64_t *)v84;\n    goto lab_0x407c3b;\n  lab_0x4074db:\n    // 0x4074db\n    v207 = v228;\n    v205 = v229;\n    v212 = *v4;\n    v203 = v230;\n    v201 = v231;\n    goto lab_0x4074e0;\n  lab_0x407940:;\n    int64_t v484 = function_40ad40(a1, v102); // 0x407949\n    int64_t v485 = v104 % 256; // 0x40794e\n    int64_t v141 = v102; // 0x40795b\n    int64_t v142 = v485; // 0x40795b\n    int64_t str = v484; // 0x40795b\n    int64_t v143 = v106; // 0x40795b\n    int64_t v118 = v102; // 0x40795b\n    int64_t v119 = v485; // 0x40795b\n    int64_t v120 = v484; // 0x40795b\n    int64_t v121 = v106; // 0x40795b\n    int64_t v122 = 1; // 0x40795b\n    if (*(char *)v484 == 46) {\n        goto lab_0x4082d3;\n    } else {\n        goto lab_0x407961;\n    }\n  lab_0x405f45:;\n    int64_t v193 = v49;\n    int64_t v194 = v48;\n    int64_t v195 = v45;\n    uint64_t v162 = v43;\n    int64_t * v196 = v40;\n    int64_t v197 = v38;\n    int32_t v198 = v177;\n    char v199 = v42; // 0x405f53\n    int64_t v156 = v195; // 0x405f5a\n    if (v199 != 0) {\n        goto lab_0x405fb0;\n    } else {\n        // 0x405f5c\n        v156 = v195;\n        if (v138 == 0x4000 | *(char *)(a6 + 20) == 1) {\n            goto lab_0x405fb0;\n        } else {\n            // 0x405f68\n            v156 = v195;\n            if ((*(int64_t *)(a6 + 32) & 0xff000000ff00) == 0) {\n                goto lab_0x405fb0;\n            } else {\n                // 0x405f78\n                v6 = str3;\n                v156 = 0;\n                if ((char)function_405620(str3, *(char *)(a6 + 37), 0, a6) != 0) {\n                    goto lab_0x405fb0;\n                } else {\n                    // 0x405fa1\n                    v156 = 0;\n                    v35 = 0;\n                    v36 = v193;\n                    if (*(char *)(a6 + 38) != 0) {\n                        goto lab_0x406910;\n                    } else {\n                        goto lab_0x405fb0;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x406910:\n    // 0x406910\n    v51 = v35;\n    if (*(char *)(a6 + 37) != 0) {\n        goto lab_0x406e0d;\n    } else {\n        // 0x40691b\n        v52 = v53;\n        v54 = v36;\n        if (v55 == 0) {\n            // 0x406929\n            function_409980((int64_t)owner, v11);\n            v52 = v53;\n            v54 = v36;\n        }\n        goto lab_0x4063b3;\n    }\n  lab_0x407248:;\n    char * v56 = (char *)(a6 + 35); // 0x407262\n    unsigned char v57 = *v56; // 0x407262\n    int64_t v58 = function_40ae10(a1, 0x20000 * (int32_t)(*v5 == 2), v59); // 0x407272\n    int32_t v60 = v58; // 0x40727d\n    int32_t err_num5; // 0x405990\n    int64_t v61; // 0x405990\n    int64_t v62; // 0x405990\n    int64_t v63; // 0x405990\n    char * format11; // 0x405990\n    int64_t v64; // 0x405990\n    int64_t v65; // 0x405990\n    int32_t v66; // 0x405990\n    int32_t v67; // 0x405990\n    uint32_t fd2; // 0x407285\n    uint32_t v68; // 0x4072cc\n    if (v60 < 0) {\n        // 0x407f86\n        v6 = 4;\n        function_40ea00(4, a1);\n        v69 = (int64_t)\"cannot open %s for reading\";\n        goto lab_0x4068f0;\n    } else {\n        // 0x407285\n        fd2 = 0x1000000 * v60 >> 24;\n        if (__fxstat(1, fd2, (struct stat *)&v70) != 0) {\n            // 0x40825f\n            function_40ea00(4, a1);\n            v6 = 0;\n            char * v71 = dcgettext(NULL, \"cannot fstat %s\", 5); // 0x40827f\n            err_num5 = *__errno_location();\n            v64 = v72;\n            format11 = v71;\n            goto lab_0x407430;\n        } else {\n            if (v1 != (int64_t)owner) {\n                goto lab_0x407e0f;\n            } else {\n                // 0x4072b8\n                if (v11 != (int64_t)v70) {\n                    goto lab_0x407e0f;\n                } else {\n                    // 0x4072cc\n                    v68 = v73 % 512;\n                    if ((char)v72 != 0) {\n                        // 0x4072cc\n                        v66 = (int64_t)v41;\n                        v61 = v74;\n                        goto lab_0x407380;\n                    } else {\n                        int64_t v75 = function_40ae10(str3, *v56 == 0 ? 1 : 513, (int64_t)&v70); // 0x407306\n                        int64_t v76 = 0x100000000 * v75 >> 32; // 0x40730d\n                        if ((*(int64_t *)(a6 + 32) & 0xff000000ff00) == 0) {\n                            int64_t v77 = v76 & 0xffffffff; // 0x4085f5\n                            v63 = v77;\n                            v15 = v72;\n                            v67 = 0;\n                            v65 = v76;\n                            v62 = v77;\n                            if ((int32_t)v76 < 0) {\n                                goto lab_0x40732f;\n                            } else {\n                                goto lab_0x40860d;\n                            }\n                        } else {\n                            // 0x407327\n                            v63 = v75 & 0xffffffff;\n                            if ((int32_t)v75 >= 0) {\n                                int64_t v78 = function_405620(str3, *(char *)(a6 + 37), 0, a6); // 0x408c43\n                                v15 = v72;\n                                v67 = 0;\n                                v65 = v76;\n                                v62 = a6;\n                                if ((char)v78 != 0) {\n                                    goto lab_0x40860d;\n                                } else {\n                                    // 0x408c53\n                                    v15 = 0;\n                                    v67 = 0;\n                                    v65 = v76;\n                                    v62 = a6;\n                                    if (*(char *)(a6 + 38) == 0) {\n                                        goto lab_0x40860d;\n                                    } else {\n                                        // 0x408c53\n                                        fd = v76;\n                                        v16 = 0;\n                                        v18 = 0;\n                                        v20 = 0;\n                                        v22 = v79;\n                                        v23 = v78 & 0xffffffff;\n                                        v25 = a1;\n                                        v26 = v10;\n                                        goto lab_0x408940;\n                                    }\n                                }\n                            } else {\n                                goto lab_0x40732f;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x4068f0:;\n    char * format4 = dcgettext(NULL, (char *)v69, 5); // 0x4068f2\n    int32_t * err_num = __errno_location(); // 0x4068fa\n    v6 = 0;\n    error(0, *err_num, format4);\n    v35 = (int64_t)format4;\n    v36 = v10;\n    goto lab_0x406910;\n  lab_0x407523:;\n    // 0x407523\n    int64_t v80; // 0x405990\n    int64_t v81; // 0x405990\n    int64_t v82; // 0x405990\n    int32_t v83; // 0x405990\n    if (*v5 != 2) {\n        goto lab_0x406eb0;\n    } else {\n        // 0x40752e\n        if ((*(int32_t *)(v84 + 24) & 0xf000) == 0xa000) {\n            // 0x408cb4\n            v6 = 1;\n            int32_t v85 = __xstat(1, file_path, (struct stat *)&v86); // 0x408cd4\n            int64_t v87 = 0x100000000000000 * v88 >> 56; // 0x408cd9\n            v89 = v87;\n            int64_t v90 = v91 % 256; // 0x408ce0\n            int32_t v92 = v93;\n            v94 = a1;\n            v95 = v92;\n            v96 = v97;\n            v98 = v93;\n            v99 = v90;\n            v82 = a1;\n            v80 = v87;\n            v83 = v92;\n            v81 = v90;\n            if (v85 == 0) {\n                goto lab_0x4075a0;\n            } else {\n                goto lab_0x405b63;\n            }\n        } else {\n            // 0x407541\n            v86 = __asm_movaps(__asm_movdqa(*(int128_t *)v84));\n            __asm_movaps(__asm_movdqa(*(int128_t *)(v84 + 16)));\n            int64_t v100 = __asm_movaps(__asm_movdqa(*(int128_t *)(v84 + 32))); // 0x40755d\n            __asm_movaps(__asm_movdqa(*(int128_t *)(v84 + 48)));\n            __asm_movaps(__asm_movdqa(*(int128_t *)(v84 + 64)));\n            __asm_movaps(__asm_movdqa(*(int128_t *)(v84 + 80)));\n            __asm_movaps(__asm_movdqa(*(int128_t *)(v84 + 96)));\n            __asm_movaps(__asm_movdqa(*(int128_t *)(v84 + 112)));\n            __asm_movaps(__asm_movdqa(*(int128_t *)(v84 + 128)));\n            v82 = v101;\n            v80 = v89;\n            v83 = v100;\n            v81 = v91;\n            goto lab_0x4075a0;\n        }\n    }\n  lab_0x408078:\n    // 0x408078\n    v102 = v103;\n    v104 = v105;\n    v106 = v107;\n    if ((int32_t)v107 != 0) {\n        goto lab_0x407940;\n    } else {\n        // 0x408081\n        function_40ead0(0, 3, str3);\n        v6 = 0;\n        function_40ead0(0, 3, a1);\n        v108 = (int64_t)\"cannot move directory onto non-directory: %s -> %s\";\n        goto lab_0x405da8;\n    }\n  lab_0x407ea8:;\n    int64_t v109 = function_40ad40(a1, v110); // 0x407eb1\n    int64_t v111 = v112 % 256; // 0x407eb6\n    int64_t v113 = v110; // 0x407ec3\n    int64_t v114 = v111; // 0x407ec3\n    int64_t v115 = v109; // 0x407ec3\n    int64_t v116 = v117; // 0x407ec3\n    v118 = v110;\n    v119 = v111;\n    v120 = v109;\n    v121 = v117;\n    v122 = 0;\n    if (*(char *)v109 == 46) {\n        goto lab_0x4082d3;\n    } else {\n        goto lab_0x407ec9;\n    }\n  lab_0x405c5a:\n    // 0x405c5a\n    v123 = v124;\n    v125 = 0;\n    v126 = v127;\n    v128 = v129;\n    v130 = v131;\n    v132 = v133;\n    v134 = v135;\n    if (((char)v136 || (char)((owner & 0xf000) == 0x4000)) != 0) {\n        goto lab_0x405de4;\n    } else {\n        char v137 = *(char *)(a6 + 21); // 0x405c82\n        if (v137 != 0) {\n            goto lab_0x405caa;\n        } else {\n            // 0x405c91\n            if (v1 < 2 | *(char *)(a6 + 34) == 0) {\n                // 0x40829d\n                v123 = v124;\n                v125 = 0;\n                v126 = v137;\n                v128 = v129;\n                v130 = v131;\n                v132 = v133;\n                v134 = v135;\n                if (v138 != 0x8000 == *v5 == 2) {\n                    goto lab_0x405caa;\n                } else {\n                    goto lab_0x405de4;\n                }\n            } else {\n                goto lab_0x405caa;\n            }\n        }\n    }\n  lab_0x4082d3:;\n    int64_t v139 = v120 + 1; // 0x4082d5\n    char v140 = *(char *)(v139 + (int64_t)(*(char *)v139 == 46)); // 0x4082dd\n    v136 = v122;\n    v133 = v119;\n    switch (v140) {\n        case 0: {\n            goto lab_0x405c5a;\n        }\n        case 47: {\n            goto lab_0x405c5a;\n        }\n        default: {\n            // 0x4082f4\n            v141 = v118;\n            v142 = v119;\n            str = v120;\n            v143 = v121;\n            v113 = v118;\n            v114 = v119;\n            v115 = v120;\n            v116 = v121;\n            if (v122 == 0) {\n                goto lab_0x407ec9;\n            } else {\n                goto lab_0x407961;\n            }\n        }\n    }\n  lab_0x407961:;\n    int64_t v144 = v142; // 0x407965\n    if ((int32_t)v143 != 3) {\n        uint32_t len = strlen((char *)str); // 0x40797b\n        int64_t str2 = function_40ad40(str3, v141); // 0x40798e\n        int32_t len2 = strlen((char *)str2); // 0x40799d\n        int64_t v145 = len2; // 0x40799d\n        int64_t len3 = strlen(g65); // 0x4079b6\n        int64_t v146 = v142 % 256; // 0x4079bb\n        v144 = v146;\n        if (0x100000000000000 * (int64_t)len >> 56 == len3 + v145) {\n            // 0x4079dd\n            v144 = v146;\n            if (memcmp((int64_t *)(str & 0xffffffff), (int64_t *)(0x100000000000000 * str2 >> 56), len2) == 0) {\n                // 0x407a12\n                v144 = v146;\n                if (strcmp((char *)((0x100000000 * str >> 32) + v145), g65) == 0) {\n                    int32_t len4 = strlen((char *)str3); // 0x407a45\n                    int64_t v147 = function_4112e0(len3 + 1 + (int64_t)len4); // 0x407a5d\n                    int64_t * v148 = (int64_t *)v147; // 0x407a84\n                    strcpy((char *)mempcpy(v148, (int64_t *)str3, len4), g65);\n                    uint32_t v149 = __xstat(1, (char *)v147, (struct stat *)&v86); // 0x407aaa\n                    v6 = v147;\n                    free(v148);\n                    v144 = v146;\n                    if (v1 == v150 == v149 % 256 == 0) {\n                        // 0x409164\n                        v144 = v146;\n                        if (v11 == v86) {\n                            // 0x409178\n                            char * format5; // 0x405990\n                            if (*v4 == 0) {\n                                // 0x4091c9\n                                format5 = dcgettext(NULL, \"backing up %s might destroy source;  %s not copied\", 5);\n                            } else {\n                                // 0x40917f\n                                format5 = dcgettext(NULL, \"backing up %s might destroy source;  %s not moved\", 5);\n                            }\n                            // 0x409193\n                            function_40e920(1, 4, a1);\n                            v6 = 0;\n                            function_40e920(0, 4, str3);\n                            // 0x405db8\n                            error(0, 0, format5);\n                            // 0x406271\n                            return 0;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    int64_t str4 = function_40a8b0(str3, *(int32_t *)&v89); // 0x407af9\n    uint64_t v151 = 0x100000000000000 * v144 >> 56; // 0x407b12\n    int32_t * err_num6; // 0x405990\n    int64_t v152; // 0x405990\n    if (str4 == 0) {\n        int32_t * v153 = __errno_location(); // 0x4081c6\n        v123 = v124;\n        v125 = 0;\n        v126 = 1;\n        v128 = v129;\n        v130 = v131;\n        v132 = v151 % 256;\n        v134 = v135;\n        if (*v153 == 2) {\n            goto lab_0x405de4;\n        } else {\n            // 0x4081e5\n            v6 = 4;\n            function_40ea00(4, str3);\n            err_num6 = v153;\n            v152 = (int64_t)\"cannot backup %s\";\n            goto lab_0x408203;\n        }\n    } else {\n        int32_t len5 = strlen((char *)str4); // 0x407b21\n        int64_t v154 = v135 - ((int64_t)len5 + 24 & -16); // 0x407b35\n        int64_t * dest_mem = memcpy((int64_t *)(v154 + 15 & -16), (int64_t *)str4, len5 + 1); // 0x407b41\n        free((int64_t *)(0x100000000000000 * str4 >> 56));\n        v123 = v124;\n        v125 = (int64_t)dest_mem;\n        v126 = 1;\n        v128 = v129;\n        v130 = v131;\n        v132 = v151 % 256;\n        v134 = v154;\n        goto lab_0x405de4;\n    }\n  lab_0x405fb0:;\n    int64_t v155 = v156;\n    int64_t v157 = v155; // 0x405fb2\n    if ((char)v46 != 0) {\n        int64_t * v158 = (int64_t *)(a6 + 56); // 0x405fb4\n        v157 = v155;\n        if (*v158 != 0) {\n            int64_t v159 = &v86; // 0x405fc2\n            v6 = 1;\n            int32_t v160 = __lxstat(1, (char *)str3, (struct stat *)&v86); // 0x405fd5\n            v157 = v159;\n            if (v160 == 0) {\n                int64_t v161 = *v158; // 0x405fe6\n                v6 = v161;\n                function_40ae60(v161, str3, v159);\n                v157 = v159;\n            }\n        }\n    }\n    // 0x406008\n    if (v47 != 0 || v138 != 0x4000 == (*(char *)(a6 + 23) != 0)) {\n        // 0x406271\n        return v162 % 256 & 0xffffffff;\n    }\n    char v163 = v44;\n    if (*(char *)(a6 + 31) == 0) {\n        goto lab_0x4060e0;\n    } else {\n        // 0x40602c\n        v6 = str3;\n        if (v163 == 0) {\n            // 0x407720\n            if ((int32_t)function_410aa0(str3, &v86) == 0) {\n                goto lab_0x4060ed;\n            } else {\n                goto lab_0x406092;\n            }\n        } else {\n            // 0x40607f\n            if ((int32_t)function_410ab0(str3, &v86, v157) == 0 || *__errno_location() == 38) {\n                // 0x406271\n                return v162 % 256 & 0xffffffff;\n            }\n            goto lab_0x406092;\n        }\n    }\n  lab_0x406a14:;\n    char * v164 = (char *)a8; // 0x406a18\n    if (*v164 == 0) {\n        // 0x407e77\n        v6 = str3;\n        function_409a10(str3, v1, (int64_t)v165);\n        *v164 = 1;\n    }\n    // 0x406a21\n    int32_t v166; // 0x405990\n    v167 = v166;\n    v168 = v169;\n    v170 = v171;\n    if (*(char *)(a6 + 46) != 0) {\n        // 0x406a28\n        if (*v4 == 0) {\n            // 0x407fef\n            v6 = a1;\n            function_404d70(a1, str3, 0);\n            v167 = v166;\n            v168 = v169;\n            v170 = v171;\n        } else {\n            // 0x406a33\n            function_40ea00(4, str3);\n            v6 = 1;\n            __printf_chk(1, dcgettext(NULL, \"created directory %s\\n\", 5));\n            v167 = v166;\n            v168 = v169;\n            v170 = v171;\n        }\n    }\n    goto lab_0x406a8f;\n  lab_0x407ec9:\n    // 0x407ec9\n    v123 = v124;\n    v125 = 0;\n    v126 = v127;\n    v128 = v129;\n    v130 = v131;\n    v132 = v114;\n    v134 = v135;\n    v141 = v113;\n    v142 = v114;\n    str = v115;\n    v143 = v116;\n    if ((owner & 0xf000) != 0x4000) {\n        goto lab_0x407961;\n    } else {\n        goto lab_0x405de4;\n    }\n  lab_0x4060e0:\n    if (v163 != 0) {\n        // 0x406271\n        return v162 % 256 & 0xffffffff;\n    }\n    goto lab_0x4060ed;\n  lab_0x405caa:\n    // 0x405caa\n    if (unlink((char *)str3) == 0) {\n        goto lab_0x405cdf;\n    } else {\n        int32_t * v555 = __errno_location(); // 0x405cc7\n        if (*v555 != 2) {\n            // 0x408b1f\n            v6 = 4;\n            function_40ea00(4, str3);\n            err_num6 = v555;\n            v152 = (int64_t)\"cannot remove %s\";\n            goto lab_0x408203;\n        } else {\n            goto lab_0x405cdf;\n        }\n    }\n  lab_0x4060ed:\n    // 0x4060ed\n    if (*v404 != 0) {\n        if (true != (true == v199 == 0)) {\n            // 0x40610f\n            v6 = a6;\n            int64_t v486 = function_405770(a6, str3, 0xffffffff, v192, v199, (int64_t *)&v165); // 0x406134\n            if ((int32_t)v486 == -1) {\n                // 0x406271\n                return 0;\n            }\n        }\n    }\n    // 0x406158\n    char v487; // 0x406202\n    if (*(int64_t *)v3 % 0xff000000000100 != 0) {\n        // 0x407ba0\n        if ((int32_t)function_40a0d0(v194, 0xffffffff, str3) == 0) {\n            // 0x406271\n            return v162 % 256 & 0xffffffff;\n        }\n        // 0x4061fb\n        v487 = *(char *)(a6 + 36);\n        // 0x406271\n        return (v487 != 0 ? v193 : v162 % 256) & 0xffffffff & 0xffffffff;\n    }\n    // 0x40616c\n    int64_t v488; // 0x407e5b\n    if (*v401 != 0) {\n        // 0x407e41\n        v488 = (int32_t)function_40a160(str3) != 0 ? v193 : v162 % 256;\n        // 0x406271\n        return v488 & 0xffffffff & 0xffffffff;\n    }\n    // 0x406177\n    if (*(char *)(a6 + 32) != 0) {\n        // 0x407fa5\n        function_405960(v6);\n        // 0x407e41\n        v488 = (int32_t)function_40a160(str3) != 0 ? v193 : v162 % 256;\n        // 0x406271\n        return v488 & 0xffffffff & 0xffffffff;\n    }\n    int32_t v489 = (int64_t)v196; // 0x406188\n    int64_t * v490 = v196; // 0x40618a\n    int64_t * v491; // 0x405990\n    int32_t v492; // 0x405990\n    uint32_t v493; // 0x4066be\n    int64_t * v494; // 0x4066be\n    if (v489 != 0) {\n        // 0x4066b7\n        v493 = -1 - (int32_t)function_405960(v6) & v489;\n        v494 = (int64_t *)(int64_t)v493;\n        v490 = v494;\n        if (v493 == 0) {\n            goto lab_0x406190;\n        } else {\n            // 0x4066ca\n            v492 = v198;\n            v491 = v494;\n            if ((char)v197 == 1) {\n                goto lab_0x40619d;\n            } else {\n                if (v199 != 0) {\n                    int32_t v495 = __lxstat(1, (char *)str3, (struct stat *)&v165); // 0x408b55\n                    v9 = str3;\n                    if (v495 == 0) {\n                        goto lab_0x4066e4;\n                    } else {\n                        goto lab_0x406237;\n                    }\n                } else {\n                    goto lab_0x4066e4;\n                }\n            }\n        }\n    } else {\n        goto lab_0x406190;\n    }\n  lab_0x407430:\n    // 0x407430\n    error(0, err_num5, format11);\n    int64_t v27 = v64; // 0x40743c\n    int64_t v28 = 0; // 0x40743c\n    int64_t v29 = (int64_t)format11; // 0x40743c\n    int64_t v30 = v79; // 0x40743c\n    int64_t v31 = 0; // 0x40743c\n    int64_t v32 = a1; // 0x40743c\n    int64_t v33 = v10; // 0x40743c\n    goto lab_0x407447;\n  lab_0x407e0f:\n    // 0x407e0f\n    function_40ea00(4, a1);\n    v6 = 0;\n    err_num5 = (int32_t)\"skipping file %s, as it was replaced while being copied\" ^ (int32_t)\"skipping file %s, as it was replaced while being copied\";\n    v64 = v72;\n    format11 = dcgettext(NULL, \"skipping file %s, as it was replaced while being copied\", 5);\n    goto lab_0x407430;\n  lab_0x4077de:\n    // 0x4077de\n    free((int64_t *)v424);\n    v6 = 0;\n    function_40ead0(0, 3, str3);\n    v50 = (int64_t)\"%s: can make relative symbolic links only in current directory\";\n    goto lab_0x4067b2;\n  lab_0x4075a0:;\n    // 0x4075a0\n    int64_t v496; // 0x405990\n    int64_t v497; // 0x405990\n    int64_t v498; // 0x405990\n    int128_t v499; // 0x405990\n    if ((*(int32_t *)(v80 + 24) & 0xf000) == 0xa000) {\n        // 0x408c7d\n        v6 = 1;\n        int32_t v500 = __xstat(1, (char *)str3, (struct stat *)&v70); // 0x408c9a\n        int64_t v501 = v81 % 256; // 0x408c9f\n        v94 = str3;\n        v95 = v83;\n        v96 = v97;\n        v98 = v93;\n        v99 = v501;\n        v497 = str3;\n        v498 = v93;\n        v496 = v501;\n        if (v500 == 0) {\n            goto lab_0x40762b;\n        } else {\n            goto lab_0x405b63;\n        }\n    } else {\n        // 0x4075b4\n        v70 = __asm_movaps(__asm_movdqa(*(int128_t *)v80));\n        __asm_movaps(__asm_movdqa(*(int128_t *)(v89 + 16)));\n        __asm_movaps(__asm_movdqa(*(int128_t *)(v89 + 32)));\n        int64_t v502 = __asm_movaps(__asm_movdqa(*(int128_t *)(v89 + 48))); // 0x4075e0\n        int64_t v503 = __asm_movaps(__asm_movdqa(*(int128_t *)(v89 + 64))); // 0x4075ed\n        __asm_movaps(__asm_movdqa(*(int128_t *)(v89 + 80)));\n        __asm_movaps(__asm_movdqa(*(int128_t *)(v89 + 96)));\n        __asm_movaps(__asm_movdqa(*(int128_t *)(v89 + 112)));\n        __asm_movaps(__asm_movdqa(*(int128_t *)(v89 + 128)));\n        v497 = v82;\n        v499 = v502;\n        v498 = v503;\n        v496 = v81;\n        goto lab_0x40762b;\n    }\n  lab_0x405cdf:;\n    int64_t v504 = v133 % 256;\n    char v505 = *(char *)(a6 + 46); // 0x405cdf\n    if (v505 != 0) {\n        // 0x4085a1\n        function_40ea00(4, str3);\n        __printf_chk(1, dcgettext(NULL, \"removed %s\\n\", 5));\n        v123 = v124;\n        v125 = 0;\n        v126 = v505;\n        v128 = v129;\n        v130 = v131;\n        v132 = v504;\n        v134 = v135;\n        goto lab_0x405de4;\n    } else {\n        if ((char)a7 == 0) {\n            unsigned char v506 = *(char *)(a6 + 42) & (char)(v138 == 0x4000); // 0x40857a\n            v293 = v124;\n            v294 = 0;\n            v295 = 1;\n            v296 = v129;\n            v297 = v131;\n            v298 = v135;\n            if (v506 != 0) {\n                // 0x406cf2\n                v6 = v150;\n                v330 = v150;\n                v331 = v124;\n                v332 = 0;\n                v333 = v506;\n                v334 = v129;\n                v335 = v131;\n                v336 = v135;\n                goto lab_0x406d10;\n            } else {\n                goto lab_0x405e28;\n            }\n        } else {\n            int64_t v507 = 0x100000000000000 * a7 >> 56; // 0x405cff\n            v251 = v124;\n            v255 = 0;\n            v254 = v507;\n            v253 = v129;\n            v252 = v131;\n            v249 = v504;\n            v250 = v135;\n            v259 = v124;\n            v260 = 0;\n            v261 = v507;\n            v262 = v129;\n            v263 = v131;\n            v264 = v135;\n            if (*(int64_t *)(a6 + 56) == 0) {\n                goto lab_0x4062b0;\n            } else {\n                goto lab_0x405d20;\n            }\n        }\n    }\n  lab_0x408203:\n    // 0x408203\n    error(0, *err_num6, dcgettext(NULL, (char *)v152, 5));\n    // 0x406271\n    return 0;\n  lab_0x406190:\n    // 0x406190\n    v492 = v198;\n    v491 = v490;\n    if ((char)v197 == 0) {\n        // 0x406271\n        return v162 % 256 & 0xffffffff;\n    }\n    goto lab_0x40619d;\n  lab_0x406092:\n    // 0x406092\n    function_40ea00(4, str3);\n    char * format17 = dcgettext(NULL, \"preserving times for %s\", 5); // 0x4060b2\n    int32_t * err_num8 = __errno_location(); // 0x4060ba\n    v6 = 0;\n    error(0, *err_num8, format17);\n    if (*(char *)(a6 + 36) != 0) {\n        // 0x406271\n        return 0;\n    }\n    goto lab_0x4060e0;\n  lab_0x407447:\n    // 0x407447\n    if (close(fd2) < 0) {\n        // 0x40817b\n        function_40ea00(4, v32);\n        char * format2 = dcgettext(NULL, \"failed to close %s\", 5); // 0x408197\n        error(0, *__errno_location(), format2);\n        int64_t v34 = 0x100000000 * v28 >> 32; // 0x4081b5\n        v6 = v34;\n        free((int64_t *)v34);\n        v35 = (int64_t)format2;\n        v36 = v33;\n        goto lab_0x406910;\n    } else {\n        int64_t v37 = 0x100000000 * v28 >> 32; // 0x407469\n        v6 = v37;\n        free((int64_t *)v37);\n        v38 = v39;\n        v40 = v41;\n        v42 = v27;\n        v43 = 0x100000000000000 * v31 >> 56;\n        v44 = 0;\n        v45 = v29;\n        v46 = v30;\n        v47 = v31 % 256;\n        v48 = v32;\n        v49 = v33;\n        v35 = v29;\n        v36 = v33;\n        if ((char)v31 != 0) {\n            goto lab_0x405f45;\n        } else {\n            goto lab_0x406910;\n        }\n    }\n  lab_0x4067b2:;\n    char * format3 = dcgettext(NULL, (char *)v50, 5); // 0x4067b4\n    v6 = 0;\n    error(0, 0, format3);\n    v35 = (int64_t)format3;\n    v36 = v10;\n    goto lab_0x406910;\n  lab_0x40619d:\n    // 0x40619d\n    if (chmod((char *)str3, v492 || (int32_t)(int64_t)v491) == 0) {\n        // 0x406271\n        return v162 % 256 & 0xffffffff;\n    }\n    // 0x4061bd\n    function_40ea00(4, str3);\n    error(0, *__errno_location(), dcgettext(NULL, \"preserving permissions for %s\", 5));\n    // 0x4061fb\n    v487 = *(char *)(a6 + 36);\n    // 0x406271\n    return (v487 != 0 ? v193 : v162 % 256) & 0xffffffff & 0xffffffff;\n  lab_0x40762b:\n    // 0x40762b\n    v94 = v497;\n    v95 = v83;\n    v96 = v97;\n    v464 = v499;\n    v98 = v498;\n    v99 = v496;\n    // 0x40763f\n    v94 = v497;\n    v95 = v83;\n    v96 = v97;\n    v464 = v499;\n    v98 = v498;\n    v99 = v496;\n    if (v86 != (int64_t)v70) {\n        goto lab_0x405b63;\n    } else {\n        // 0x407653\n        v94 = v497;\n        v95 = v83;\n        v96 = 1;\n        v464 = v499;\n        v98 = v498;\n        v99 = v496;\n        if (*(char *)(a6 + 23) == 0) {\n            goto lab_0x406eb0;\n        } else {\n            goto lab_0x405b63;\n        }\n    }\n  lab_0x407380:;\n    int64_t v508 = v68 & -1 - v66; // 0x40739f\n    int64_t v509 = 0x100000000 * function_40ae10(str3, 193, v508);\n    int64_t v510 = v509 >> 32; // 0x4073ae\n    int32_t * v511 = __errno_location(); // 0x4073b4\n    int32_t v512 = *v511; // 0x4073bf\n    char v513 = v509 < 0;\n    char v514 = v513; // 0x4073db\n    int64_t v515 = v510; // 0x4073db\n    int32_t v516 = v512; // 0x4073db\n    int32_t v517; // 0x405990\n    int64_t v518; // 0x405990\n    if (v509 < 0 != (v512 == 17)) {\n        goto lab_0x408a88;\n    } else {\n        char v519 = *v4; // 0x4073e1\n        v518 = v519;\n        v517 = 17;\n        if (v519 == 0) {\n            int32_t v520 = __lxstat(1, (char *)str3, (struct stat *)&v86); // 0x408a36\n            v514 = v513;\n            v515 = v510;\n            v516 = 17;\n            if (v520 != 0) {\n                goto lab_0x408a88;\n            } else {\n                // 0x408a3f\n                v514 = v513;\n                v515 = v510;\n                v516 = 17;\n                if ((owner & 0xf000) != 0xa000) {\n                    goto lab_0x408a88;\n                } else {\n                    // 0x408a51\n                    if (*(char *)(a6 + 48) == 0) {\n                        // 0x4097aa\n                        function_40ea00(4, str3);\n                        char * format12 = dcgettext(NULL, \"not writing through dangling symlink %s\", 5); // 0x4097d1\n                        error(0, (int32_t)\"not writing through dangling symlink %s\" ^ (int32_t)\"not writing through dangling symlink %s\", format12);\n                        v27 = v509 < 0 == v512 == 17;\n                        v28 = 0;\n                        v29 = (int64_t)format12;\n                        v30 = v79;\n                        v31 = 0;\n                        v32 = a1;\n                        v33 = v10;\n                        goto lab_0x407447;\n                    } else {\n                        int64_t v521 = 0x100000000 * function_40ae10(str3, 65, v508);\n                        v514 = v521 < 0;\n                        v515 = v521 >> 32;\n                        v516 = *v511;\n                        goto lab_0x408a88;\n                    }\n                }\n            }\n        } else {\n            goto lab_0x4073fa;\n        }\n    }\n  lab_0x407da7:\n    // 0x407da7\n    v6 = str7;\n    free((int64_t *)str7);\n    char v522 = *(char *)(a6 + 37); // 0x407daf\n    v51 = v423;\n    if (v522 != 0) {\n        goto lab_0x406e0d;\n    } else {\n        char v523 = *v404; // 0x407dc2\n        if (v523 != 0) {\n            int64_t v524 = v522; // 0x407db4\n            int64_t v525 = owner; // 0x4089b0\n            v6 = str3;\n            if (lchown((char *)str3, owner, owner) == 0) {\n                int64_t v526 = v523; // 0x408b6e\n                v38 = v524;\n                v40 = v41;\n                v42 = v72;\n                v43 = v526;\n                v44 = v526;\n                v45 = v525;\n                v46 = v79;\n                v47 = 0;\n                v48 = a1;\n                v49 = v10;\n                goto lab_0x405f45;\n            } else {\n                // 0x4089df\n                v6 = a6;\n                int64_t v527 = function_405740(a6); // 0x4089e2\n                int64_t v528 = 0x100000000000000 * v527 >> 56; // 0x4089e7\n                v38 = v524;\n                v40 = v41;\n                v42 = v72;\n                v43 = v528;\n                v44 = v528;\n                v45 = v525;\n                v46 = v79;\n                v47 = 0;\n                v48 = a1;\n                v49 = v10;\n                if ((char)v527 == 0) {\n                    char * format13 = dcgettext(NULL, \"failed to preserve ownership for %s\", 5); // 0x409382\n                    int64_t v529 = (int64_t)format13; // 0x409382\n                    int32_t * err_num7 = __errno_location(); // 0x40938a\n                    v6 = 0;\n                    error(0, *err_num7, format13);\n                    char v530 = *(char *)(a6 + 36); // 0x4093a4\n                    v35 = v529;\n                    v36 = v10;\n                    if (v530 != 0) {\n                        goto lab_0x406910;\n                    } else {\n                        int64_t v531 = v523; // 0x4093bf\n                        v38 = v530;\n                        v40 = v41;\n                        v42 = v72;\n                        v43 = v531;\n                        v44 = v531;\n                        v45 = v529;\n                        v46 = v79;\n                        v47 = 0;\n                        v48 = a1;\n                        v49 = v10;\n                        goto lab_0x405f45;\n                    }\n                } else {\n                    goto lab_0x405f45;\n                }\n            }\n        } else {\n            // 0x407dd0\n            v38 = v523;\n            v40 = v41;\n            v42 = v72;\n            v43 = 1;\n            v44 = 1;\n            v45 = v423;\n            v46 = v79;\n            v47 = v523;\n            v48 = a1;\n            v49 = v10;\n            goto lab_0x405f45;\n        }\n    }\n  lab_0x4066e4:\n    // 0x4066e4\n    v491 = v494;\n    if ((v493 & -1 - owner) == 0) {\n        // 0x406271\n        return v162 % 256 & 0xffffffff;\n    }\n    goto lab_0x40619d;\n  lab_0x408a88:;\n    unsigned char v532 = v514 & (char)(v516 == 21); // 0x408a98\n    if (v532 == 0) {\n        // 0x40912a\n        v518 = 1;\n        v517 = v516;\n        v15 = 1;\n        v67 = v66;\n        v65 = v515;\n        v62 = v61;\n        if ((int32_t)v515 < 0) {\n            goto lab_0x4073fa;\n        } else {\n            goto lab_0x40860d;\n        }\n    } else {\n        int64_t v533 = v532;\n        v6 = str3;\n        v518 = v533;\n        v517 = 21;\n        if ((char)str3 != 0) {\n            int64_t v534 = str3; // 0x408ac8\n            int64_t v535 = -1; // 0x408ac8\n            int64_t v536 = 0; // 0x408ac8\n            while (v535 != 0) {\n                int64_t v537 = v534;\n                v534 = v537 + (v425 ? -1 : 1);\n                v6 = v534;\n                v535--;\n                v536 = v535;\n                if (*(char *)v537 == 0) {\n                    // break -> \n                    break;\n                }\n                v536 = 0;\n            }\n            v518 = v533;\n            v517 = (int32_t)(*(char *)(str3 - 3 - v536) != 47) | 20;\n        }\n        goto lab_0x4073fa;\n    }\n  lab_0x40732f:;\n    int32_t * v538 = __errno_location(); // 0x40732f\n    if (*(char *)(a6 + 22) == 0) {\n        int32_t v539 = *v538; // 0x408d8c\n        v518 = 0;\n        v517 = v539;\n        if (v539 != 2) {\n            goto lab_0x4073fa;\n        } else {\n            // 0x408d96\n            v66 = 0;\n            v61 = v63;\n            v518 = 0;\n            v517 = v539;\n            if (*v4 == 0) {\n                goto lab_0x407380;\n            } else {\n                goto lab_0x4073fa;\n            }\n        }\n    } else {\n        // 0x407342\n        if (unlink((char *)str3) != 0) {\n            // 0x4095ca\n            function_40ea00(4, str3);\n            v6 = 0;\n            char * v540 = dcgettext(NULL, \"cannot remove %s\", 5); // 0x4095ee\n            err_num5 = *v538;\n            v64 = v72;\n            format11 = v540;\n            goto lab_0x407430;\n        } else {\n            // 0x407356\n            if (*(char *)(a6 + 46) != 0) {\n                // 0x40952b\n                function_40ea00(4, str3);\n                __printf_chk(1, dcgettext(NULL, \"removed %s\\n\", 5));\n            }\n            char v541 = *(char *)(a6 + 33); // 0x407361\n            int64_t v542 = (int64_t)v41;\n            int32_t v543 = v542;\n            v66 = v543;\n            v61 = v542 & 0xffffffff;\n            if (v541 != 0) {\n                int64_t v544 = function_405550(a1, str3, v68, 1, a6); // 0x40946d\n                v66 = v543;\n                v61 = 1;\n                if ((char)v544 != 0) {\n                    goto lab_0x407380;\n                } else {\n                    // 0x40947d\n                    v27 = v541;\n                    v28 = 0;\n                    v29 = v68;\n                    v30 = v79;\n                    v31 = v544 & 0xffffffff;\n                    v32 = a1;\n                    v33 = v10;\n                    goto lab_0x407447;\n                }\n            } else {\n                goto lab_0x407380;\n            }\n        }\n    }\n  lab_0x40860d:\n    // 0x40860d\n    v6 = 1;\n    fd3 = v65;\n    int32_t v545 = __fxstat(1, fd3, (struct stat *)&v86); // 0x408629\n    int64_t v546; // 0x405990\n    int64_t v547; // 0x405990\n    int64_t v548; // 0x405990\n    int64_t v549; // 0x405990\n    int64_t v550; // 0x405990\n    int64_t v551; // 0x405990\n    int64_t v552; // 0x407285\n    int64_t v553; // 0x408614\n    if (v545 != 0) {\n        // 0x408cf5\n        function_40ea00(4, str3);\n        char * format14 = dcgettext(NULL, \"cannot fstat %s\", 5); // 0x408d19\n        error(0, *__errno_location(), format14);\n        fd = fd3;\n        v16 = v15;\n        v18 = 0;\n        v20 = (int64_t)format14;\n        v22 = v79;\n        v23 = 0;\n        v25 = a1;\n        v26 = v10;\n        goto lab_0x408940;\n    } else {\n        // 0x40863c\n        v552 = fd2;\n        v553 = v65 & 0xffffffff;\n        v551 = 0;\n        v549 = v62;\n        v550 = &v86;\n        v548 = v79;\n        v546 = a1;\n        v547 = v10;\n        if (v57 == 0) {\n            goto lab_0x40887f;\n        } else {\n            int32_t * v554 = (int32_t *)(a6 + 52); // 0x408649\n            if (*v554 != 0) {\n                // 0x4092d0\n                v6 = v553;\n                v551 = 0;\n                v549 = v62;\n                v550 = v552;\n                v548 = v79;\n                v546 = a1;\n                v547 = v10;\n                if (ioctl(fd3, 0x40049409) == 0) {\n                    goto lab_0x40887f;\n                } else {\n                    // 0x4092f0\n                    if (*v554 != 2) {\n                        goto lab_0x408654;\n                    } else {\n                        // 0x4092fb\n                        function_40e920(1, 4, a1);\n                        function_40e920(0, 4, str3);\n                        char * format15 = dcgettext(NULL, \"failed to clone %s from %s\", 5); // 0x409336\n                        error(0, *__errno_location(), format15);\n                        fd = fd3;\n                        v16 = v15;\n                        v18 = 0;\n                        v20 = 0x100000000 * (int64_t)format15 >> 32;\n                        v22 = v79;\n                        v23 = 0;\n                        v25 = a1;\n                        v26 = v10;\n                        goto lab_0x408940;\n                    }\n                }\n            } else {\n                goto lab_0x408654;\n            }\n        }\n    }\n  lab_0x4073fa:\n    // 0x4073fa\n    function_40ea00(4, str3);\n    v6 = 0;\n    err_num5 = v517;\n    v64 = v518;\n    format11 = dcgettext(NULL, \"cannot create regular file %s\", 5);\n    goto lab_0x407430;\n  lab_0x4084dd:\n    // 0x4084dd\n    free((int64_t *)str7);\n    function_40ea00(4, str3);\n    char * format16 = dcgettext(NULL, \"cannot create symbolic link %s\", 5); // 0x408505\n    v6 = 0;\n    error(0, 0x1000000 * v426 >> 24, format16);\n    v35 = (int64_t)format16;\n    v36 = v10;\n    goto lab_0x406910;\n  lab_0x408940:\n    // 0x408940\n    v27 = v16;\n    v28 = v18;\n    v29 = v20;\n    v30 = v22;\n    v31 = v23 % 256;\n    v32 = v25;\n    v33 = v26;\n    if (close(fd) < 0) {\n        // 0x408962\n        function_40ea00(4, str3);\n        char * format = dcgettext(NULL, \"failed to close %s\", 5); // 0x408986\n        error(0, *__errno_location(), format);\n        v27 = v16;\n        v28 = v18;\n        v29 = (int64_t)format;\n        v30 = v22;\n        v31 = 0;\n        v32 = v25;\n        v33 = v26;\n    }\n    goto lab_0x407447;\n  lab_0x40887f:;\n    int64_t v556 = v550; // 0x408884\n    if (*(char *)(a6 + 31) != 0) {\n        // 0x408b84\n        v6 = v553;\n        length2 = v1;\n        int64_t v557 = function_410660(v553, str3, (int64_t *)&length2, v549); // 0x408bd0\n        v556 = &length2;\n        if ((int32_t)v557 == 0) {\n            goto lab_0x40888a;\n        } else {\n            // 0x408bdd\n            function_40ea00(4, str3);\n            char * format18 = dcgettext(NULL, \"preserving times for %s\", 5); // 0x408c01\n            int64_t v558 = (int64_t)format18; // 0x408c01\n            int32_t * err_num9 = __errno_location(); // 0x408c09\n            v6 = 0;\n            error(0, *err_num9, format18);\n            v556 = v558;\n            fd = fd3;\n            v16 = v15;\n            v18 = v551;\n            v20 = v558;\n            v22 = v548;\n            v23 = 0;\n            v25 = v546;\n            v26 = v547;\n            if (*(char *)(a6 + 36) == 0) {\n                goto lab_0x40888a;\n            } else {\n                goto lab_0x408940;\n            }\n        }\n    } else {\n        goto lab_0x40888a;\n    }\n  lab_0x40888a:;\n    int64_t v559 = v556; // 0x40888f\n    if (*v404 == 0) {\n        goto lab_0x4088ef;\n    } else {\n        // 0x408891\n        v559 = v556;\n        if (true == owner == v363) {\n            goto lab_0x4088ef;\n        } else {\n            // 0x4088ad\n            v6 = a6;\n            int64_t v560 = function_405770(a6, str3, v553, v192, (char)v15, &v86); // 0x4088d3\n            v559 = v553;\n            fd = fd3;\n            v16 = v15;\n            v18 = v551;\n            v20 = v553;\n            v22 = v548;\n            v23 = 0;\n            v25 = v546;\n            v26 = v547;\n            if ((int32_t)v560 == -1) {\n                goto lab_0x408940;\n            } else {\n                goto lab_0x4088ef;\n            }\n        }\n    }\n  lab_0x408654:;\n    int32_t v561 = getpagesize(); // 0x408654\n    char * v562; // 0x405990\n    int64_t v563 = (int64_t)v562; // 0x40865c\n    int64_t v564 = v563; // 0x408685\n    char * v565; // 0x405990\n    if (v562 != (char *)0x2000000000000000 && v563 >= 0x2000000000000000) {\n        // 0x408687\n        v565 = (char *)0x20000;\n        v564 = v563 < 0x2000000000000001 ? v563 : 512;\n    }\n    // 0x4086ba\n    posix_fadvise(fd2, 0, 0, POSIX_FADV_SEQUENTIAL);\n    uint32_t v566 = owner & 0xf000; // 0x4086d5\n    v89 = v566;\n    int64_t v567 = v545; // 0x4086e3\n    if (v566 == 0x8000) {\n        int64_t v568 = v364 - (int64_t)((v365 & 0xfffffffffffffe00) / 512); // 0x4086f6\n        v567 = v568 < 0 != (v364 & (v568 ^ -0x8000000000000000)) < 0;\n    }\n    uint64_t v569 = (int64_t)v561; // 0x408659\n    int64_t v570; // 0x405990\n    int64_t v571; // 0x405990\n    int64_t v572; // 0x405990\n    int64_t v573; // 0x405990\n    int64_t v574; // 0x405990\n    int64_t v575; // 0x405990\n    int64_t v576; // 0x405990\n    int64_t v577; // 0x405990\n    int64_t v578; // 0x405990\n    int64_t v579; // 0x405990\n    int64_t v580; // 0x405990\n    int32_t * v581; // 0x409260\n    int64_t v582; // 0x405990\n    if ((owner & 0xf000) == 0x8000) {\n        // 0x409260\n        v581 = (int32_t *)(a6 + 12);\n        int32_t v583 = *v581; // 0x409260\n        if (v583 == 3) {\n            int64_t v584 = (int64_t)v565;\n            int64_t v585 = function_4112e0(v584 + v569); // 0x409498\n            uint64_t v586 = v569 - 1 + v585; // 0x4094a4\n            int64_t v587 = 0x100000000 * v585 >> 32; // 0x4094a7\n            int64_t v588 = v586 % v569;\n            int64_t v589 = v586 - v588; // 0x4094b4\n            v575 = v587;\n            v580 = v589;\n            v582 = v588;\n            if ((int32_t)v567 != 0) {\n                goto lab_0x4092b4;\n            } else {\n                // 0x4094cb\n                v89 = *v581 == 3;\n                v570 = v584;\n                v578 = v564;\n                v576 = v587;\n                v579 = v589;\n                v577 = &length2;\n                v574 = v588;\n                v573 = v79;\n                v571 = a1;\n                v572 = v10;\n                goto lab_0x408827;\n            }\n        } else {\n            if (v567 % 2 == 0 || v583 != 2) {\n                goto lab_0x40872b;\n            } else {\n                int64_t v590 = function_4112e0((int64_t)v565 + v569); // 0x40928e\n                uint64_t v591 = v569 - 1 + v590; // 0x40929a\n                v582 = v591 % v569;\n                v575 = 0x100000000 * v590 >> 32;\n                v580 = v591 - v582;\n                goto lab_0x4092b4;\n            }\n        }\n    } else {\n        goto lab_0x40872b;\n    }\n  lab_0x4088ef:;\n    int64_t v592 = v559; // 0x4088f4\n    if ((char)owner > -1 == (*(char *)(a6 + 39) != 0)) {\n        // 0x4091df\n        v592 = v559;\n        if (geteuid() != 0) {\n            // 0x4091ec\n            v6 = v553;\n            v592 = 384;\n            if ((int32_t)function_404d10(v553, str3, 384) == 0) {\n                // 0x40920b\n                v6 = v553;\n                int64_t v593 = v68 & -1 - v67; // 0x409220\n                function_404d10(v553, str3, v593);\n                v592 = v593;\n            }\n        }\n    }\n    // 0x408903\n    int64_t v594; // 0x405990\n    if (*(int64_t *)v3 % 0xff000000000100 != 0) {\n        int64_t v595 = function_40a0d0(v546, v552, str3); // 0x408d6b\n        fd = fd3;\n        v16 = v15;\n        v18 = v551;\n        v20 = str3;\n        v22 = v548;\n        v23 = 1;\n        v25 = v546;\n        v26 = v547;\n        if ((int32_t)v595 == 0) {\n            goto lab_0x408940;\n        } else {\n            goto lab_0x408d7e;\n        }\n    } else {\n        // 0x408917\n        if (*v401 != 0) {\n            // 0x409143\n            v594 = (int64_t)*(int32_t *)(a6 + 16);\n            goto lab_0x409147;\n        } else {\n            // 0x408922\n            if (*(char *)(a6 + 32) != 0) {\n                // 0x40969b\n                v594 = function_405960(v6) & 438 ^ 438;\n                goto lab_0x409147;\n            } else {\n                // 0x40892d\n                fd = fd3;\n                v16 = v15;\n                v18 = v551;\n                v20 = v592;\n                v22 = v548;\n                v23 = 1;\n                v25 = v546;\n                v26 = v547;\n                if (v67 != 0) {\n                    int64_t v596 = v6; // 0x40960d\n                    fd = fd3;\n                    int64_t v597; // 0x405990\n                    v16 = v597;\n                    int64_t v598; // 0x405990\n                    v18 = v598;\n                    int64_t v599; // 0x405990\n                    v20 = v599;\n                    int64_t v600; // 0x405990\n                    v22 = v600;\n                    v23 = 1;\n                    int64_t v601; // 0x405990\n                    v25 = v601;\n                    int64_t v602; // 0x405990\n                    v26 = v602;\n                    int32_t v603; // 0x405990\n                    if ((v603 & -1 - (int32_t)function_405960(v596)) == 0) {\n                        goto lab_0x408940;\n                    } else {\n                        int64_t v604 = v68; // 0x409628\n                        int64_t v605 = function_404d10(v553, str3, v604); // 0x40963b\n                        fd = fd3;\n                        v16 = v597;\n                        v18 = v598;\n                        v20 = v604;\n                        v22 = v600;\n                        v23 = 1;\n                        v25 = v601;\n                        v26 = v602;\n                        if ((int32_t)v605 == 0) {\n                            goto lab_0x408940;\n                        } else {\n                            // 0x409650\n                            function_40ea00(4, str3);\n                            char * format19 = dcgettext(NULL, \"preserving permissions for %s\", 5); // 0x409674\n                            int32_t * v606 = __errno_location(); // 0x40967c\n                            int32_t err_num10 = *v606; // 0x40968d\n                            error(0, err_num10, format19);\n                            goto lab_0x408d7e;\n                        }\n                    }\n                } else {\n                    goto lab_0x408940;\n                }\n            }\n        }\n    }\n  lab_0x40872b:;\n    int64_t v607 = (int64_t)v565; // 0x408732\n    int64_t v608 = 0x7fffffffffffffff - v569; // 0x40874d\n    uint64_t v609 = function_40a980(v2 < 0x2000000000000001 ? v2 : 0x20000, v607, v608); // 0x408774\n    v89 = 0;\n    uint64_t v610 = v607 - 1 + v609; // 0x4087a0\n    int64_t v611 = v610 - v610 % v609; // 0x4087ab\n    int64_t v612 = v611 - 1 < 0x100000000 * v608 >> 32 ? v611 : v609;\n    int64_t v613 = function_4112e0(v612 + v569); // 0x4087cf\n    uint64_t v614 = v569 - 1 + v613; // 0x4087db\n    int64_t v615 = 0x100000000 * v613 >> 32; // 0x4087de\n    int64_t v616 = v614 % v569;\n    int64_t v617 = v614 - v616; // 0x4087eb\n    char * v618 = (char *)v612; // 0x4087fc\n    int32_t v619 = 1; // 0x4087fc\n    int64_t v620 = v615; // 0x4087fc\n    int64_t v621 = v617; // 0x4087fc\n    char v622 = 0; // 0x4087fc\n    int64_t v623 = v616; // 0x4087fc\n    if ((int32_t)v567 != 0) {\n        goto lab_0x408dc9;\n    } else {\n        // 0x408802\n        v89 = *(int32_t *)(a6 + 12) == 3;\n        v570 = v612;\n        v578 = 0;\n        v576 = v615;\n        v579 = v617;\n        v577 = &length2;\n        v574 = v616;\n        v573 = v79;\n        v571 = a1;\n        v572 = v10;\n        goto lab_0x408827;\n    }\n  lab_0x408dc9:\n    // 0x408dc9\n    v17 = v620;\n    int32_t v624 = v619;\n    int64_t v625 = v365; // 0x408dd0\n    int64_t v626 = &length2; // 0x408de3\n    int32_t length = v365; // 0x408dea\n    char v627 = v58; // 0x408df1\n    function_409ae0(v627, (int64_t *)&length2);\n    v21 = 0x100000000 * a7 >> 32;\n    int64_t v628 = v624 == 3 ? v564 : 0;\n    int64_t v629 = (int64_t)v618;\n    v24 = 0x100000000000000 * a1 >> 56;\n    int64_t v630 = 0; // 0x408e25\n    int64_t v631 = 0; // 0x408e25\n    int64_t v632 = v57;\n    int64_t v633 = v623;\n    int64_t v634 = 0;\n    char v635; // 0x405990\n    char v636 = v635;\n    v6 = v626;\n    int64_t v637; // 0x405990\n    int64_t v638; // 0x405990\n    int64_t v639; // 0x405990\n    int64_t v640; // 0x405990\n    char v641; // bp-688, 0x405990\n    int64_t v642; // 0x405990\n    int64_t v643; // 0x405990\n    while ((char)function_409b10(v626) != 0) {\n        // 0x408e4a\n        int64_t v644; // 0x405990\n        v14 = v644;\n        int64_t v645; // 0x405990\n        uint64_t v646 = v645;\n        int64_t v647 = v630; // 0x408e52\n        int64_t v648 = v631; // 0x408e52\n        char v649 = v636; // 0x408e52\n        int64_t v650 = v634; // 0x408e52\n        int64_t v651 = v633; // 0x408e52\n        int64_t v652 = v630; // 0x408e52\n        int64_t v653 = v631; // 0x408e52\n        int64_t v654 = v632; // 0x408e52\n        if (v646 != 0) {\n            int64_t v655 = 0;\n            int64_t v656 = 24 * v655 + v14; // 0x408f1e\n            int64_t v657 = *(int64_t *)v656; // 0x408f22\n            int64_t v658 = *(int64_t *)(v656 + 8); // 0x408f25\n            int64_t v659 = v657; // 0x408f30\n            int64_t v660 = v658; // 0x408f30\n            int64_t v661; // 0x408f32\n            if (v658 + v657 > v625) {\n                // 0x408f32\n                v661 = v657 - v625;\n                v659 = v661 < 0 == ((v661 ^ v657) & (v657 ^ v625)) < 0 == (v661 != 0) ? v625 : v657;\n                v660 = v625 - v659;\n            }\n            int64_t v662 = v660;\n            int64_t offset = v659;\n            int64_t v663 = offset - v647 - v648; // 0x408f48\n            int64_t v664 = 0; // 0x408f4b\n            int64_t v665 = v628; // 0x408f4b\n            int64_t v666; // 0x408f98\n            if (v663 != 0) {\n                // 0x408f51\n                if (lseek(fd2, (int32_t)offset, SEEK_SET) < 0) {\n                    // 0x409567\n                    v6 = 4;\n                    function_40ea00(4, v24);\n                    v643 = (int64_t)\"cannot lseek %s\";\n                    goto lab_0x4095a1;\n                }\n                if (v624 == 1) {\n                    // 0x408fd5\n                    v6 = v553;\n                    v664 = 0;\n                    v665 = 0;\n                    if ((char)function_404c20(v553, v663) == 0) {\n                        // 0x409714\n                        v6 = 0;\n                        function_40ead0(0, 3, str3);\n                        v643 = (int64_t)\"%s: write failed\";\n                        goto lab_0x4095a1;\n                    }\n                } else {\n                    // 0x408f83\n                    v666 = function_405060(fd3, str3, (char)(v624 == 3), v663);\n                    v664 = v666 & 0xffffffff;\n                    v665 = v628;\n                    if ((char)v666 == 0) {\n                        // 0x408fa8\n                        v19 = v624 == 3;\n                        goto lab_0x408fc4;\n                    }\n                }\n            }\n            int64_t v667 = v664;\n            char v668; // bp-689, 0x405990\n            *(int64_t *)(v190 - 16) = (int64_t)&v668;\n            v89 = 1;\n            *(int64_t *)(v190 - 24) = (int64_t)&v641;\n            *(int64_t *)(v190 - 32) = v662;\n            *(int64_t *)(v190 - 40) = str3;\n            *(int64_t *)(v190 - 48) = v24;\n            int64_t v669 = function_405120(v627, v553, v621, v629, v665, 1, (int64_t)&g90, (int64_t)&g90, (int64_t)&g90, (int64_t)&g90, (int64_t)&g90); // 0x408ec7\n            v19 = v621;\n            if ((char)v669 == 0) {\n                goto lab_0x408fc4;\n            }\n            int64_t v670 = offset + (int64_t)v641; // 0x408edf\n            int64_t v671 = v625; // 0x408ef3\n            char v672 = 1; // 0x408ef3\n            int64_t v673 = v621; // 0x408ef3\n            while (v670 != v625) {\n                int64_t v674 = v655 + 1 & 0xffffffff; // 0x408ef9\n                v647 = offset;\n                int64_t v675 = v674; // 0x408f0d\n                v648 = v662;\n                v671 = v670;\n                v672 = v636;\n                v673 = v662;\n                if (v674 >= v646) {\n                    // break -> 0x408ffa\n                    break;\n                }\n                v655 = v675;\n                v656 = 24 * v655 + v14;\n                v657 = *(int64_t *)v656;\n                v658 = *(int64_t *)(v656 + 8);\n                v659 = v657;\n                v660 = v658;\n                if (v658 + v657 > v625) {\n                    // 0x408f32\n                    v661 = v657 - v625;\n                    v659 = v661 < 0 == ((v661 ^ v657) & (v657 ^ v625)) < 0 == (v661 != 0) ? v625 : v657;\n                    v660 = v625 - v659;\n                }\n                // 0x408f3f\n                v662 = v660;\n                offset = v659;\n                v663 = offset - v647 - v648;\n                v664 = 0;\n                v665 = v628;\n                if (v663 != 0) {\n                    // 0x408f51\n                    if (lseek(fd2, (int32_t)offset, SEEK_SET) < 0) {\n                        // 0x409567\n                        v6 = 4;\n                        function_40ea00(4, v24);\n                        v643 = (int64_t)\"cannot lseek %s\";\n                        goto lab_0x4095a1;\n                    }\n                    if (v624 == 1) {\n                        // 0x408fd5\n                        v6 = v553;\n                        v664 = 0;\n                        v665 = 0;\n                        if ((char)function_404c20(v553, v663) == 0) {\n                            // 0x409714\n                            v6 = 0;\n                            function_40ead0(0, 3, str3);\n                            v643 = (int64_t)\"%s: write failed\";\n                            goto lab_0x4095a1;\n                        }\n                    } else {\n                        // 0x408f83\n                        v666 = function_405060(fd3, str3, (char)(v624 == 3), v663);\n                        v664 = v666 & 0xffffffff;\n                        v665 = v628;\n                        if ((char)v666 == 0) {\n                            // 0x408fa8\n                            v19 = v624 == 3;\n                            goto lab_0x408fc4;\n                        }\n                    }\n                }\n                // 0x408e85\n                v667 = v664;\n                *(int64_t *)(v190 - 16) = (int64_t)&v668;\n                v89 = 1;\n                *(int64_t *)(v190 - 24) = (int64_t)&v641;\n                *(int64_t *)(v190 - 32) = v662;\n                *(int64_t *)(v190 - 40) = str3;\n                *(int64_t *)(v190 - 48) = v24;\n                v669 = function_405120(v627, v553, v621, v629, v665, 1, (int64_t)&g90, (int64_t)&g90, (int64_t)&g90, (int64_t)&g90, (int64_t)&g90);\n                v19 = v621;\n                if ((char)v669 == 0) {\n                    goto lab_0x408fc4;\n                }\n                // 0x408ed8\n                v670 = offset + (int64_t)v641;\n                v671 = v625;\n                v672 = 1;\n                v673 = v621;\n            }\n            // 0x408ffa\n            v649 = v672;\n            v650 = v671;\n            v651 = v673;\n            v652 = offset;\n            v653 = v662;\n            v654 = v641 == 0 ? v667 : (int64_t)v668;\n        }\n        int64_t v676 = v654;\n        int64_t v677 = v651;\n        int64_t v678 = v650;\n        v6 = v14;\n        free((int64_t *)v14);\n        v645 = 0;\n        v644 = 0;\n        v630 = v652;\n        v631 = v653;\n        if (v649 != 0) {\n            // 0x409037\n            v642 = v676;\n            v639 = v678;\n            v640 = v677;\n            v638 = v21 & 0xffffffff;\n            v637 = v10 % 256;\n            goto lab_0x40905a;\n        }\n        v632 = v676;\n        v633 = v677;\n        v634 = v678;\n        v636 = 0;\n        v6 = v626;\n    }\n    int64_t v679 = v10 % 256; // 0x4096c4\n    int64_t v680 = v21 & 0xffffffff; // 0x4096d3\n    v642 = v632;\n    v639 = v634;\n    v640 = v633;\n    v638 = v680;\n    v637 = v679;\n    int64_t v681; // 0x405990\n    int64_t v682; // 0x405990\n    int64_t v683; // 0x405990\n    int64_t v684; // 0x405990\n    int64_t v685; // 0x405990\n    if (v636 != 0) {\n        goto lab_0x40905a;\n    } else {\n        char v686; // 0x405990\n        if (v686 == 0) {\n            // 0x409759\n            v6 = 0;\n            function_40ead0(0, 3, v24);\n            v681 = (int64_t)\"%s: failed to get extents info\";\n            v685 = v17;\n            v684 = v680;\n            v682 = v24;\n            v683 = v679;\n            goto lab_0x409101;\n        } else {\n            // 0x4096e8\n            v89 = *(int32_t *)(a6 + 12) == 3;\n            v570 = v629;\n            v578 = v622 != 0 ? v564 : 0;\n            v576 = v17;\n            v579 = v621;\n            v577 = v626;\n            v574 = v633;\n            v573 = v680;\n            v571 = v24;\n            v572 = v679;\n            goto lab_0x408827;\n        }\n    }\n  lab_0x408d7e:\n    // 0x408d7e\n    fd = fd3;\n    v16 = v15;\n    v18 = v551;\n    v20 = str3;\n    v22 = v548;\n    v23 = (int64_t)(*(char *)(a6 + 36) ^ 1);\n    v25 = v546;\n    v26 = v547;\n    goto lab_0x408940;\n  lab_0x4092b4:\n    // 0x4092b4\n    v618 = v565;\n    v619 = *v581;\n    v620 = v575;\n    v621 = v580;\n    v622 = v57;\n    v623 = v582;\n    goto lab_0x408dc9;\n  lab_0x40905a:;\n    int64_t v687 = length; // 0x40905a\n    v551 = v17;\n    v549 = v639;\n    v550 = v640;\n    v548 = v638;\n    v546 = v24;\n    v547 = v637;\n    int64_t v688; // 0x405990\n    int64_t v689; // 0x405990\n    int64_t v690; // 0x405990\n    int64_t v691; // 0x405990\n    if (v639 >= v687 == v642 % 256 == 0) {\n        goto lab_0x40887f;\n    } else {\n        int64_t v692 = v687 - v639; // 0x40905a\n        v6 = v553;\n        if (v624 == 1) {\n            // 0x40977e\n            v551 = v17;\n            v549 = v639;\n            v550 = v640;\n            v548 = v638;\n            v546 = v24;\n            v547 = v637;\n            v691 = v17;\n            v690 = v638;\n            v688 = v24;\n            v689 = v637;\n            if ((char)function_404c20(v553, v692) != 0) {\n                goto lab_0x40887f;\n            } else {\n                goto lab_0x409504;\n            }\n        } else {\n            // 0x409081\n            v691 = v17;\n            v690 = v638;\n            v688 = v24;\n            v689 = v637;\n            if (ftruncate(fd3, length) != 0) {\n                goto lab_0x409504;\n            } else {\n                // 0x4090a9\n                v551 = v17;\n                v549 = v639;\n                v550 = v640;\n                v548 = v638;\n                v546 = v24;\n                v547 = v637;\n                if (v624 == 3 == v692 < 0 == ((v692 ^ v687) & (v639 ^ v687)) < 0 == (v692 != 0)) {\n                    // 0x4090bf\n                    v6 = v553;\n                    if ((int32_t)function_404cd0(v553, v639, v692) >= 0) {\n                        goto lab_0x40887f;\n                    } else {\n                        // 0x4090df\n                        v6 = 4;\n                        function_40ea00(4, str3);\n                        v681 = (int64_t)\"error deallocating %s\";\n                        v685 = v17;\n                        v684 = v638;\n                        v682 = v24;\n                        v683 = v637;\n                        goto lab_0x409101;\n                    }\n                } else {\n                    goto lab_0x40887f;\n                }\n            }\n        }\n    }\n  lab_0x408827:\n    // 0x408827\n    *(int64_t *)(v190 - 8) = v574;\n    *(int64_t *)(v190 - 16) = (int64_t)&v641;\n    *(int64_t *)(v190 - 24) = v577;\n    v6 = v552;\n    *(int64_t *)(v190 - 32) = -1;\n    *(int64_t *)(v190 - 40) = str3;\n    *(int64_t *)(v190 - 48) = v571;\n    int64_t v693 = function_405120((char)fd2, v553, v579, v570, v578, v89, (int64_t)&g90, (int64_t)&g90, (int64_t)&g90, (int64_t)&g90, (int64_t)&g90); // 0x408861\n    fd = fd3;\n    v16 = v15;\n    v18 = v576;\n    v20 = v579;\n    v22 = v573;\n    v23 = 0;\n    v25 = v571;\n    v26 = v572;\n    if ((char)v693 == 0) {\n        goto lab_0x408940;\n    } else {\n        // 0x408872\n        v551 = v576;\n        v549 = v570;\n        v550 = v579;\n        v548 = v573;\n        v546 = v571;\n        v547 = v572;\n        if (v641 != 0) {\n            // 0x4094ea\n            v6 = v553;\n            v551 = v576;\n            v549 = v570;\n            v550 = v579;\n            v548 = v573;\n            v546 = v571;\n            v547 = v572;\n            v691 = v576;\n            v690 = v573;\n            v688 = v571;\n            v689 = v572;\n            if (ftruncate(fd3, length2) >= 0) {\n                goto lab_0x40887f;\n            } else {\n                goto lab_0x409504;\n            }\n        } else {\n            goto lab_0x40887f;\n        }\n    }\n  lab_0x409147:\n    // 0x409147\n    fd = fd3;\n    v16 = v15;\n    v18 = v551;\n    v20 = v594;\n    v22 = v548;\n    v23 = (int32_t)function_40a160(str3) == 0;\n    v25 = v546;\n    v26 = v547;\n    goto lab_0x408940;\n  lab_0x409101:;\n    char * format20 = dcgettext(NULL, (char *)v681, 5); // 0x409103\n    error(0, *__errno_location(), format20);\n    fd = fd3;\n    v16 = v15;\n    v18 = v685;\n    v20 = (int64_t)format20;\n    v22 = v684;\n    v23 = 0;\n    v25 = v682;\n    v26 = v683;\n    goto lab_0x408940;\n  lab_0x409504:\n    // 0x409504\n    v6 = 4;\n    function_40ea00(4, str3);\n    v681 = (int64_t)\"failed to extend %s\";\n    v685 = v691;\n    v684 = v690;\n    v682 = v688;\n    v683 = v689;\n    goto lab_0x409101;\n  lab_0x4095a1:;\n    char * format21 = dcgettext(NULL, (char *)v643, 5); // 0x4095a3\n    error(0, *__errno_location(), format21);\n    v19 = (int64_t)format21;\n    goto lab_0x408fc4;\n}\n"
        },
        {
            "funcName": "function_409810",
            "funcStartAddr": "409810",
            "funcEndAddr": "40993c",
            "decompiledFuncCode": "int64_t function_409810(int64_t a1, int64_t a2, int32_t a3, int64_t a4, int64_t * a5, int32_t a6) {\n    if (a4 == 0) {\n        // 0x4098e1\n        __assert_fail(\"co != NULL\", \"src/copy.c\", 2912, \"valid_options\");\n        // 0x4098fa\n        __assert_fail(\"VALID_SPARSE_MODE (co->sparse_mode)\", \"src/copy.c\", 2914, \"valid_options\");\n        // 0x409913\n        __assert_fail(\"VALID_BACKUP_TYPE (co->backup_type)\", \"src/copy.c\", 2913, \"valid_options\");\n        return 0x41425f44494c4156 % (uint128_t)(int128_t)(uint64_t)(int64_t)\"src/copy.c\";\n    }\n    if ((uint32_t)(int32_t)a4 >= 4) {\n        // 0x409913\n        __assert_fail(\"VALID_BACKUP_TYPE (co->backup_type)\", \"src/copy.c\", 2913, \"valid_options\");\n        return 0x41425f44494c4156 % (uint128_t)(int128_t)(uint64_t)(int64_t)\"src/copy.c\";\n    }\n    int32_t v1 = *(int32_t *)(a4 + 12); // 0x409826\n    if (v1 >= 4) {\n        // 0x4098fa\n        __assert_fail(\"VALID_SPARSE_MODE (co->sparse_mode)\", \"src/copy.c\", 2914, \"valid_options\");\n        // 0x409913\n        __assert_fail(\"VALID_BACKUP_TYPE (co->backup_type)\", \"src/copy.c\", 2913, \"valid_options\");\n        return 0x41425f44494c4156 % (int128_t)(int64_t)\"src/copy.c\";\n    }\n    uint32_t v2 = *(int32_t *)(a4 + 52); // 0x409837\n    if (v2 >= 3) {\n        // 0x4098c8\n        __assert_fail(\"VALID_REFLINK_MODE (co->reflink_mode)\", \"src/copy.c\", 2915, \"valid_options\");\n        // 0x4098e1\n        __assert_fail(\"co != NULL\", \"src/copy.c\", 2912, \"valid_options\");\n        // 0x4098fa\n        __assert_fail(\"VALID_SPARSE_MODE (co->sparse_mode)\", \"src/copy.c\", 2914, \"valid_options\");\n        // 0x409913\n        __assert_fail(\"VALID_BACKUP_TYPE (co->backup_type)\", \"src/copy.c\", 2913, \"valid_options\");\n        return 0x41425f44494c4156 % (int128_t)(int64_t)\"src/copy.c\";\n    }\n    // 0x409845\n    if (*(char *)(a4 + 23) != 0) {\n        // 0x409890\n        if (*(char *)(a4 + 44) == 0) {\n            goto lab_0x40984b;\n        } else {\n            // 0x409896\n            __assert_fail(\"!(co->hard_link && co->symbolic_link)\", \"src/copy.c\", 2916, \"valid_options\");\n            goto lab_0x4098af;\n        }\n    } else {\n        goto lab_0x40984b;\n    }\n  lab_0x40984b:\n    if (v1 != 2 != (v2 == 2)) {\n        char v3 = 0; // bp-9, 0x409856\n        g63 = a1;\n        g62 = a2;\n        int64_t result = function_405990(a1, a2, (char)a3, 0, 0, a4, 1, (int64_t)&v3, (int64_t)a5, (int64_t)a6); // 0x409880\n        return result;\n    }\n    goto lab_0x4098af;\n  lab_0x4098af:\n    // 0x4098af\n    __assert_fail(\"! (co->reflink_mode == REFLINK_ALWAYS && co->sparse_mode != SPARSE_AUTO)\", \"src/copy.c\", 2919, \"valid_options\");\n    // 0x4098c8\n    __assert_fail(\"VALID_REFLINK_MODE (co->reflink_mode)\", \"src/copy.c\", 2915, \"valid_options\");\n    // 0x4098e1\n    __assert_fail(\"co != NULL\", \"src/copy.c\", 2912, \"valid_options\");\n    // 0x4098fa\n    __assert_fail(\"VALID_SPARSE_MODE (co->sparse_mode)\", \"src/copy.c\", 2914, \"valid_options\");\n    // 0x409913\n    __assert_fail(\"VALID_BACKUP_TYPE (co->backup_type)\", \"src/copy.c\", 2913, \"valid_options\");\n    return 0x41425f44494c4156 % (int128_t)(int64_t)\"src/copy.c\";\n}\n"
        },
        {
            "funcName": "function_409940",
            "funcStartAddr": "409940",
            "funcEndAddr": "40995c",
            "decompiledFuncCode": "int64_t function_409940(int64_t a1, int64_t a2) {\n    if (a1 == a2) {\n        // 0x409950\n        return *(int64_t *)(a1 + 8) & -256 | 1;\n    }\n    // 0x40994a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_409960",
            "funcStartAddr": "409960",
            "funcEndAddr": "409976",
            "decompiledFuncCode": "int64_t function_409960(int64_t a1) {\n    // 0x409960\n    free((int64_t *)*(int64_t *)(a1 + 16));\n    free((int64_t *)a1);\n    return &g90;\n}\n"
        },
        {
            "funcName": "function_409980",
            "funcStartAddr": "409980",
            "funcEndAddr": "4099c5",
            "decompiledFuncCode": "int64_t function_409980(int64_t a1, int64_t a2) {\n    int64_t v1 = function_40c330(g64); // 0x4099a1\n    int64_t result = 0; // 0x4099a9\n    if (v1 != 0) {\n        // 0x4099ab\n        free((int64_t *)*(int64_t *)(v1 + 16));\n        free((int64_t *)v1);\n        result = &g90;\n    }\n    // 0x4099bf\n    return result;\n}\n"
        },
        {
            "funcName": "function_4099d0",
            "funcStartAddr": "4099d0",
            "funcEndAddr": "409a07",
            "decompiledFuncCode": "int64_t function_4099d0(int64_t a1, int64_t a2) {\n    int64_t v1 = a1; // bp-40, 0x4099d4\n    int64_t v2 = function_40b8e0(g64, &v1); // 0x4099e7\n    if (v2 == 0) {\n        // 0x409a00\n        return 0;\n    }\n    // 0x4099f1\n    return *(int64_t *)(v2 + 16);\n}\n"
        },
        {
            "funcName": "function_409a10",
            "funcStartAddr": "409a10",
            "funcEndAddr": "409a86",
            "decompiledFuncCode": "int64_t function_409a10(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = function_4112e0(24); // 0x409a28\n    int64_t v2 = function_411510(a1); // 0x409a33\n    int64_t * v3 = (int64_t *)v1; // 0x409a42\n    *v3 = a2;\n    int64_t * v4 = (int64_t *)(v1 + 16); // 0x409a45\n    *v4 = v2;\n    *(int64_t *)(v1 + 8) = a3;\n    int64_t v5 = function_40c2f0(g64, v1); // 0x409a4d\n    if (v5 == 0) {\n        // 0x409a81\n        function_411530(g64);\n        // UNREACHABLE\n    }\n    int64_t result = 0; // 0x409a5f\n    if (v1 != v5) {\n        // 0x409a61\n        free((int64_t *)*v4);\n        free(v3);\n        result = *(int64_t *)(v5 + 16);\n    }\n    // 0x409a76\n    return result;\n}\n"
        },
        {
            "funcName": "function_409a90",
            "funcStartAddr": "409a90",
            "funcEndAddr": "409ac6",
            "decompiledFuncCode": "int64_t function_409a90(int64_t a1, int64_t a2) {\n    int64_t result = function_40bb50(103, 0, 0x409930, 0x409940, 0x409960); // 0x409aab\n    g64 = result;\n    if (result != 0) {\n        // 0x409abc\n        return result;\n    }\n    // 0x409ac1\n    function_411530(103);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_409ad0",
            "funcStartAddr": "409ad0",
            "funcEndAddr": "409adc",
            "decompiledFuncCode": "int64_t function_409ad0(void) {\n    // 0x409ad0\n    return function_40bd90(g64);\n}\n"
        },
        {
            "funcName": "function_409ae0",
            "funcStartAddr": "409ae0",
            "funcEndAddr": "409b08",
            "decompiledFuncCode": "int64_t function_409ae0(char a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2;\n    *(int32_t *)a2 = (int32_t)a1;\n    *(int64_t *)(v1 + 40) = 0;\n    *(int64_t *)(v1 + 8) = 0;\n    *(int64_t *)(v1 + 24) = 0;\n    *(int16_t *)(v1 + 32) = 0;\n    *(int32_t *)(v1 + 16) = 1;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_409b10",
            "funcStartAddr": "409b10",
            "funcEndAddr": "409df8",
            "decompiledFuncCode": "int64_t function_409b10(int64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 40); // 0x409b31\n    int64_t * v2 = (int64_t *)(a1 + 8); // 0x409b35\n    int64_t v3; // bp-4120, 0x409b10\n    int64_t v4 = &v3; // 0x409b3c\n    int32_t v5; // 0x409b10\n    int64_t v6 = v5;\n    int64_t * v7 = (int64_t *)(a1 + 24);\n    int64_t v8 = v5;\n    char * v9 = (char *)(a1 + 33);\n    int64_t v10; // bp-4152, 0x409b10\n    __asm_rep_stosq_memset((char *)&v10, 0, 512);\n    v10 = *v2;\n    int64_t v11 = 0; // 0x409b7f\n    int64_t v12 = *v1; // 0x409b7f\n    int64_t result; // 0x409b10\n    int64_t fd; // 0x409b10\n    if (ioctl((int32_t)fd, -0x3fdf99f5) < 0) {\n      lab_0x409d30_2:\n        // 0x409d30\n        result = 0;\n        if (*v2 == 0) {\n            // 0x409d3a\n            *(char *)(a1 + 32) = 1;\n            result = 0;\n        }\n      lab_0x409d19:\n        // 0x409d19\n        return result;\n    }\n    int64_t v13; // 0x409b10\n    int64_t v14; // 0x409b10\n    int64_t v15; // 0x409b10\n    int64_t v16; // 0x409b10\n    int64_t v17; // 0x409b10\n    int64_t v18; // 0x409b10\n    int64_t v19; // 0x409b10\n    int64_t fd2; // 0x409b10\n    int64_t v20; // 0x409b10\n    while (true) {\n      lab_0x409b85:\n        if (v5 == 0) {\n            // break -> 0x409da3\n            break;\n        }\n        uint64_t v21 = *v7; // 0x409b94\n        if (v21 > -1 - v6) {\n            // 0x409dbc\n            __assert_fail(\"scan->ei_count <= SIZE_MAX - fiemap->fm_mapped_extents\", \"src/extent-scan.c\", 126, \"extent_scan_read\");\n            return linkat(0x2f637273, (char *)0x2e6e6163732d746e, 0x63730063, \"scan->ei_count <= SIZE_MAX - fiemap->fm_mapped_extents\", 0x3e2d6e61);\n        }\n        int64_t v22 = v11;\n        int64_t v23 = *v1; // 0x409baa\n        fd2 = v23;\n        uint64_t v24 = v21 + v6; // 0x409baf\n        *v7 = v24;\n        uint128_t v25 = 24 * (int128_t)v24; // 0x409bbd\n        if ((int64_t)v25 < 0) {\n            // 0x409db7\n            function_411530(fd2);\n            // UNREACHABLE\n        }\n        if (v25 % 0x1f0000000000000001 != 0) {\n            // 0x409db7\n            function_411530(fd2);\n            // UNREACHABLE\n        }\n        int64_t v26 = function_411340(fd2, 24 * v24); // 0x409be0\n        *v1 = v26;\n        int64_t v27 = v26 + v12 - v23; // 0x409bef\n        v18 = v27;\n        v15 = v22;\n        if (v3 > 0x7fffffffffffffff - v8) {\n            goto lab_0x409c86;\n        } else {\n            // 0x409c10\n            fd2 = 0;\n            v13 = 0;\n            v16 = v8;\n            v19 = v4;\n            v20 = v3;\n            v17 = v27;\n            v14 = v22;\n            goto lab_0x409c15;\n        }\n    }\n    // 0x409da3\n    *v9 = 1;\n    // 0x409d19\n    return v6 & 0xffffff00 | (int64_t)(*v2 != 0);\n  lab_0x409c86:\n    // 0x409c86\n    fd2 = (int64_t)\"fm_extents[i].fe_logical <= OFF_T_MAX - fm_extents[i].fe_length\";\n    __assert_fail(\"fm_extents[i].fe_logical <= OFF_T_MAX - fm_extents[i].fe_length\", \"src/extent-scan.c\", 141, \"extent_scan_read\");\n    int64_t v28 = (int64_t)\"fm_extents[i].fe_logical <= OFF_T_MAX - fm_extents[i].fe_length\"; // 0x409c9f\n    int64_t v29 = &g90; // 0x409c9f\n    int64_t v30 = (int64_t)\"extent_scan_read\"; // 0x409c9f\n    int64_t v31 = 141; // 0x409c9f\n    int64_t v32 = v18; // 0x409c9f\n    int64_t v33 = v15; // 0x409c9f\n    goto lab_0x409ca0;\n  lab_0x409ca0:;\n    int64_t v34 = v33;\n    int64_t v35 = v31;\n    int64_t v36 = v30;\n    int64_t v37 = v29;\n    uint64_t v38 = *v2; // 0x409ca0\n    int64_t v39 = v37; // 0x409ca8\n    int64_t v40 = v36; // 0x409ca8\n    int64_t v41 = v35; // 0x409ca8\n    int64_t v42 = v32; // 0x409ca8\n    int64_t v43 = v38; // 0x409ca8\n    int64_t v44 = v34; // 0x409ca8\n    int64_t v45; // 0x409b10\n    int64_t v46; // 0x409b10\n    int32_t v47; // 0x409b10\n    int64_t v48; // 0x409b10\n    int64_t v49; // 0x409b10\n    if (v38 > v35) {\n        goto lab_0x409c42;\n    } else {\n        // 0x409caa\n        v45 = v28;\n        v48 = v37;\n        v49 = v35;\n        v47 = *(int32_t *)(v36 + 40);\n        v46 = v34;\n        goto lab_0x409cae;\n    }\n  lab_0x409c15:;\n    int64_t v50 = v14;\n    int64_t v51 = v17;\n    int64_t v52 = v20;\n    int64_t v53 = v19;\n    int64_t v54 = v16;\n    int64_t v55 = v13;\n    v28 = v55;\n    v29 = v54;\n    v30 = v53;\n    v31 = v52;\n    v32 = v51;\n    v33 = v50;\n    int64_t v56; // 0x409b10\n    int64_t v57; // 0x409b10\n    if ((int32_t)v50 == 0) {\n        goto lab_0x409ca0;\n    } else {\n        int32_t v58 = *(int32_t *)(v53 + 40); // 0x409c1e\n        int64_t * v59 = (int64_t *)(v51 + 8); // 0x409c22\n        int64_t v60 = *v59; // 0x409c22\n        int64_t v61 = *(int64_t *)v51 + v60; // 0x409c2c\n        int32_t * v62 = (int32_t *)(v51 + 16); // 0x409c33\n        if (*v62 != (v58 & -2) || v52 != v61) {\n            // 0x409c3d\n            v39 = v54;\n            v40 = v53;\n            v41 = v52;\n            v42 = v51;\n            v43 = v61;\n            v44 = v50;\n            v45 = v55;\n            v48 = v54;\n            v49 = v52;\n            v47 = v58;\n            v46 = v50;\n            if (v61 > v52) {\n                goto lab_0x409c42;\n            } else {\n                goto lab_0x409cae;\n            }\n        } else {\n            // 0x409d51\n            *v62 = v58;\n            fd2 = fd2 + 1 & 0xffffffff;\n            *v59 = v60 + v54;\n            v57 = v51;\n            v56 = v50;\n            goto lab_0x409c5e;\n        }\n    }\n  lab_0x409c42:\n    // 0x409c42\n    if (v43 - v41 < v39) {\n        goto lab_0x409d30_2;\n    }\n    // 0x409c51\n    *(int64_t *)v40 = v43;\n    *(int64_t *)(v40 + 16) = v41 + v39 - v43;\n    v57 = v42;\n    v56 = v44;\n    goto lab_0x409c5e;\n  lab_0x409c5e:;\n    int64_t v63 = v56;\n    int64_t v64 = v57;\n    int64_t v65 = fd2; // 0x409c61\n    int64_t v66 = v64; // 0x409c61\n    int64_t v67 = v63; // 0x409c61\n    int64_t v68; // 0x409b10\n    int64_t v69; // 0x409b10\n    int64_t v70; // 0x409b10\n    if (v5 <= (int32_t)fd2) {\n        // 0x409c5e\n        v68 = v64 + 16;\n        v70 = v64;\n        v69 = v63;\n        goto lab_0x409cd5;\n    } else {\n        goto lab_0x409c63;\n    }\n  lab_0x409cae:;\n    int64_t v71 = v45 + 1; // 0x409cb1\n    fd2 = v71 & 0xffffffff;\n    int64_t v72 = v46 + 1 & 0xffffffff; // 0x409cb4\n    int64_t v73 = *v1 + 24 * (v46 & 0xffffffff); // 0x409cc1\n    *(int64_t *)v73 = v49;\n    *(int64_t *)(v73 + 8) = v48;\n    int64_t v74 = v73 + 16;\n    *(int32_t *)v74 = v47;\n    v68 = v74;\n    v70 = v73;\n    v69 = v72;\n    if (v5 > (int32_t)v71) {\n        // 0x409cae\n        v65 = fd2;\n        v66 = v73;\n        v67 = v72;\n        goto lab_0x409c63;\n    } else {\n        goto lab_0x409cd5;\n    }\n  lab_0x409c63:;\n    int64_t v75 = 56 * (v65 & 0xffffffff) + v4; // 0x409c73\n    int64_t v76 = *(int64_t *)(v75 + 16); // 0x409c77\n    uint64_t v77 = *(int64_t *)v75; // 0x409c7b\n    v13 = v65;\n    v16 = v76;\n    v19 = v75;\n    v20 = v77;\n    v17 = v66;\n    v14 = v67;\n    v18 = v66;\n    v15 = v67;\n    if (v77 > 0x7fffffffffffffff - v76) {\n        goto lab_0x409c86;\n    } else {\n        goto lab_0x409c15;\n    }\n  lab_0x409cd5:\n    // 0x409cd5\n    v11 = v69;\n    if (*(char *)v68 % 2 != 0) {\n        // 0x409d90\n        *v9 = 1;\n        // 0x409d96\n        *v7 = v11 & 0xffffffff;\n        result = 1;\n        goto lab_0x409d19;\n    }\n    char v78 = *v9; // 0x409cdf\n    uint32_t v79 = (int32_t)v11; // 0x409ce5\n    if (v79 >= 73) {\n        if (v78 != 0) {\n            // 0x409d96\n            *v7 = v11 & 0xffffffff;\n            result = 1;\n            goto lab_0x409d19;\n        } else {\n            int64_t v80 = v11 + 0xffffffff & 0xffffffff; // 0x409cf3\n            *v7 = v80;\n            int64_t v81 = *v1 + 24 * v80;\n            *v2 = *(int64_t *)(v81 - 24) + *(int64_t *)(v81 - 16);\n            result = 1;\n            goto lab_0x409d19;\n        }\n    }\n    // 0x409d64\n    v12 = v70;\n    *v7 = v11 & 0xffffffff;\n    if (v78 != 0) {\n        // 0x409d19\n        return 1;\n    }\n    int64_t v82 = *(int64_t *)v12 + *(int64_t *)(v12 + 8); // 0x409d74\n    *v2 = v82;\n    if (v79 == 72) {\n        // 0x409d19\n        return 1;\n    }\n    // 0x409d70\n    __asm_rep_stosq_memset((char *)&v10, 0, 512);\n    v10 = v82;\n    if (ioctl(*(int32_t *)&fd2, -0x3fdf99f5) < 0) {\n        goto lab_0x409d30_2;\n    }\n    goto lab_0x409b85;\n}\n"
        },
        {
            "funcName": "function_409e00",
            "funcStartAddr": "409e00",
            "funcEndAddr": "409e64",
            "decompiledFuncCode": "int64_t function_409e00(int64_t a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2;\n    int64_t v2 = function_40ad40(a1, v1) - a1; // 0x409e0f\n    uint64_t size = v2 + 9; // 0x409e12\n    int64_t result = v1; // 0x409e20\n    if (size >= 257) {\n        int64_t * mem = malloc((int32_t)size); // 0x409e22\n        result = (int64_t)mem;\n        if (mem == NULL) {\n            // 0x409e54\n            return 0;\n        }\n    }\n    int64_t * v3 = mempcpy((int64_t *)result, (int64_t *)a1, (int32_t)v2); // 0x409e38\n    *v3 = 0x5858585858587543;\n    *(char *)((int64_t)v3 + 8) = 0;\n    // 0x409e54\n    return result;\n}\n"
        },
        {
            "funcName": "function_409e70",
            "funcStartAddr": "409e70",
            "funcEndAddr": "409e81",
            "decompiledFuncCode": "int64_t function_409e70(int64_t path2, int64_t a2) {\n    uint32_t path1 = *(int32_t *)(a2 + 8); // 0x409e76\n    return symlinkat((char *)(int64_t)path1, path1, (char *)path2);\n}\n"
        },
        {
            "funcName": "function_409e90",
            "funcStartAddr": "409e90",
            "funcEndAddr": "409fc5",
            "decompiledFuncCode": "int64_t function_409e90(int64_t fd, int64_t path1, int64_t a3, int64_t a4, int32_t flag, int64_t a6) {\n    int32_t fd2 = a3; // 0x409eb4\n    char * path2 = (char *)a4; // 0x409eb4\n    uint32_t v1 = linkat((int32_t)fd, (char *)path1, fd2, path2, flag); // 0x409eb4\n    int64_t result = v1; // 0x409ebe\n    if ((char)a6 != 1 || v1 == 0) {\n        // 0x409ed4\n        return result;\n    }\n    int32_t * v2 = __errno_location(); // 0x409eca\n    if (*v2 != 17) {\n        // 0x409ed4\n        return result;\n    }\n    // 0x409ef0\n    int64_t v3; // bp-312, 0x409e90\n    int64_t v4 = function_409e00(a4, &v3); // 0x409efd\n    if (v4 == 0) {\n        // 0x409ed4\n        return 0xffffffff;\n    }\n    int64_t v5 = 0x100000000 * fd >> 32; // bp-344, 0x409f23\n    int64_t v6 = function_40fb10(v4, 0, &v5, 0x409de0, 6); // 0x409f36\n    int64_t v7 = 0x100000000 * (int64_t)v2 >> 32; // 0x409f3b\n    int32_t v8; // 0x409e90\n    if ((int32_t)v6 == 0) {\n        char * path = (char *)v4; // 0x409f8f\n        int32_t v9 = 0; // 0x409f9e\n        if (renameat(fd2, path, fd2, path2) != 0) {\n            // 0x409fa0\n            v9 = *(int32_t *)v7;\n        }\n        // 0x409fa3\n        unlinkat(fd2, path, 0);\n        v8 = v9;\n    } else {\n        // 0x409f44\n        v8 = *(int32_t *)v7;\n    }\n    // 0x409f47\n    if (v4 != (int64_t)&v3) {\n        // 0x409f51\n        free((int64_t *)v4);\n    }\n    int64_t result2 = 1; // 0x409f6b\n    if (v8 != 0) {\n        // 0x409f71\n        *(int32_t *)v7 = v8;\n        result2 = 0xffffffff;\n    }\n    // 0x409ed4\n    return result2;\n}\n"
        },
        {
            "funcName": "function_409fd0",
            "funcStartAddr": "409fd0",
            "funcEndAddr": "40a0d0",
            "decompiledFuncCode": "int64_t function_409fd0(int64_t path1, int64_t a2, int64_t a3, char a4) {\n    int32_t fd = a2; // 0x409fec\n    char * path2 = (char *)a3; // 0x409fec\n    uint32_t v1 = symlinkat((char *)path1, fd, path2); // 0x409fec\n    int64_t result = v1; // 0x409ff1\n    if (a4 != 1 || v1 == 0) {\n        // 0x40a00a\n        return result;\n    }\n    int32_t * v2 = __errno_location(); // 0x409ffd\n    if (*v2 != 17) {\n        // 0x40a00a\n        return result;\n    }\n    // 0x40a020\n    int64_t v3; // bp-312, 0x409fd0\n    int64_t v4 = function_409e00(a3, &v3); // 0x40a02b\n    if (v4 == 0) {\n        // 0x40a00a\n        return 0xffffffff;\n    }\n    int64_t v5 = &v3; // 0x40a020\n    int64_t v6 = path1; // bp-328, 0x40a04f\n    int32_t v7; // 0x409fd0\n    if ((int32_t)function_40fb10(v4, 0, &v6, 0x409e70, 6) == 0) {\n        char * path = (char *)v4; // 0x40a08a\n        if (renameat(fd, path, fd, path2) == 0) {\n            // 0x40a093\n            if (v4 != v5) {\n                // 0x40a098\n                free((int64_t *)v4);\n            }\n            // 0x40a00a\n            return 1;\n        }\n        // 0x40a0a8\n        unlinkat(fd, path, 0);\n        v7 = *v2;\n    } else {\n        // 0x40a060\n        v7 = *v2;\n    }\n    // 0x40a063\n    if (v4 != v5) {\n        // 0x40a068\n        free((int64_t *)v4);\n    }\n    int64_t result2 = 1; // 0x40a073\n    if (v7 != 0) {\n        // 0x40a0b9\n        *v2 = v7;\n        result2 = 0xffffffff;\n    }\n    // 0x40a00a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40a0d0",
            "funcStartAddr": "40a0d0",
            "funcEndAddr": "40a15a",
            "decompiledFuncCode": "int64_t function_40a0d0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40a0d0\n    int64_t v1; // 0x40a0d0\n    int64_t v2 = function_40d070(a1, a2, a3, v1, v1); // 0x40a0da\n    int64_t result = v2 & 0xffffffff; // 0x40a0df\n    int32_t v3 = v2; // 0x40a0e1\n    if (v3 == -2) {\n        // 0x40a130\n        error(0, *__errno_location(), \"%s\", (char *)function_40ec50(a1));\n        return result;\n    }\n    if (v3 == -1) {\n        // 0x40a0eb\n        function_40ec50(a3);\n        error(0, *__errno_location(), dcgettext(NULL, \"preserving permissions for %s\", 5));\n    }\n    // 0x40a120\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a160",
            "funcStartAddr": "40a160",
            "funcEndAddr": "40a1bc",
            "decompiledFuncCode": "int64_t function_40a160(int64_t a1) {\n    // 0x40a160\n    int64_t v1; // 0x40a160\n    int64_t v2 = function_40d0b0(a1, v1, (int32_t)v1); // 0x40a167\n    int64_t result = v2 & 0xffffffff; // 0x40a16c\n    if ((int32_t)v2 == 0) {\n        // 0x40a172\n        return result;\n    }\n    // 0x40a180\n    function_40ec50(a1);\n    error(0, *__errno_location(), dcgettext(NULL, \"setting permissions for %s\", 5));\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a1c0",
            "funcStartAddr": "40a1c0",
            "funcEndAddr": "40a2af",
            "decompiledFuncCode": "int64_t function_40a1c0(int64_t path, uint64_t a2) {\n    int64_t size = a2 >= 1025 ? 1025 : a2 + 1; // 0x40a1f9\n    int64_t * mem = malloc((int32_t)size); // 0x40a203\n    int64_t result = 0; // 0x40a20e\n    while (mem != NULL) {\n        uint64_t buf_size = size;\n        int64_t * buf = mem;\n        int32_t v1 = readlink((char *)path, (char *)buf, (int32_t)buf_size); // 0x40a219\n        if (v1 < 0) {\n            // 0x40a278\n            if (*__errno_location() != 34) {\n                // 0x40a282\n                free(buf);\n                result = 0;\n                return result;\n            }\n        }\n        uint64_t v2 = (int64_t)v1; // 0x40a219\n        int64_t v3; // 0x40a1c0\n        if (buf_size > v2) {\n            // 0x40a290\n            v3 = (int64_t)buf;\n            *(char *)(v2 + v3) = 0;\n            result = v3;\n            return result;\n        }\n        // 0x40a22b\n        free(buf);\n        while (buf_size <= 0x3fffffffffffffff) {\n            int64_t size2 = 2 * buf_size; // 0x40a238\n            int64_t * mem2 = malloc((int32_t)size2); // 0x40a23e\n            if (mem2 == NULL) {\n                // 0x40a24b\n                result = (int64_t)mem2;\n                return result;\n            }\n            buf_size = size2;\n            buf = mem2;\n            v1 = readlink((char *)path, (char *)buf, (int32_t)buf_size);\n            if (v1 < 0) {\n                // 0x40a278\n                if (*__errno_location() != 34) {\n                    // 0x40a282\n                    free(buf);\n                    result = 0;\n                    return result;\n                }\n            }\n            // 0x40a226\n            v2 = (int64_t)v1;\n            if (buf_size > v2) {\n                // 0x40a290\n                v3 = (int64_t)buf;\n                *(char *)(v2 + v3) = 0;\n                result = v3;\n                return result;\n            }\n            // 0x40a22b\n            free(buf);\n        }\n        // 0x40a260\n        size = 0x7fffffffffffffff;\n        if (buf_size > 0x7ffffffffffffffe) {\n            // 0x40a2a0\n            *__errno_location() = 12;\n            result = 0;\n            return result;\n        }\n        mem = malloc((int32_t)size);\n        result = 0;\n    }\n  lab_0x40a24b_2:\n    // 0x40a24b\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a2b0",
            "funcStartAddr": "40a2b0",
            "funcEndAddr": "40a37e",
            "decompiledFuncCode": "int64_t function_40a2b0(int64_t path, int64_t a2) {\n    int64_t v1 = function_40ad40(path, a2); // 0x40a2c4\n    uint64_t result = function_40ada0(v1); // 0x40a2cf\n    if (result < 15) {\n        // 0x40a2da\n        return result;\n    }\n    int16_t * v2 = (int16_t *)v1; // 0x40a2f5\n    *v2 = 46;\n    int32_t * v3 = __errno_location(); // 0x40a301\n    *v3 = 0;\n    int32_t v4 = pathconf((char *)path, _PC_NAME_MAX); // 0x40a317\n    int64_t result2 = v4; // 0x40a317\n    int64_t v5; // 0x40a2b0\n    if (v4 < 0) {\n        // 0x40a370\n        v5 = 255;\n        if (*v3 != 0) {\n            goto lab_0x40a324;\n        } else {\n            // 0x40a321\n            v5 = result2;\n            goto lab_0x40a324;\n        }\n    } else {\n        // 0x40a321\n        v5 = result2;\n        goto lab_0x40a324;\n    }\n  lab_0x40a324:;\n    uint64_t v6 = v5;\n    if (result <= v6) {\n        // 0x40a2da\n        return result2;\n    }\n    int64_t v7 = a2 + path; // 0x40a32e\n    uint64_t result3 = v7 - v1; // 0x40a335\n    *(char *)(result3 >= v6 ? v1 - 1 + v6 : v7) = 126;\n    *(char *)((result3 >= v6 ? v6 : result3 + 1) + v1) = 0;\n    return result3;\n}\n"
        },
        {
            "funcName": "function_40a380",
            "funcStartAddr": "40a380",
            "funcEndAddr": "40a3d4",
            "decompiledFuncCode": "int64_t function_40a380(int64_t a1) {\n    int64_t result = a1; // 0x40a387\n    int64_t result2; // 0x40a380\n    if (a1 == 0) {\n        char * env_val = getenv(\"SIMPLE_BACKUP_SUFFIX\"); // 0x40a3c5\n        result = (int64_t)env_val;\n        result2 = result;\n        if (env_val == NULL) {\n            // 0x40a38e\n            g65 = (char *)&g4;\n            return result;\n        }\n    }\n    char * v1 = (char *)result; // 0x40a389\n    if (*v1 == 0) {\n        // 0x40a38e\n        g65 = (char *)&g4;\n        return result2;\n    }\n    // 0x40a3a0\n    int64_t v2; // 0x40a380\n    int64_t result3 = function_40ad40(result, v2); // 0x40a3a3\n    if (result3 != result) {\n        // 0x40a38e\n        g65 = (char *)&g4;\n        return result3;\n    }\n    // 0x40a3ad\n    g65 = v1;\n    return result3;\n}\n"
        },
        {
            "funcName": "function_40a3e0",
            "funcStartAddr": "40a3e0",
            "funcEndAddr": "40a8a1",
            "decompiledFuncCode": "int64_t function_40a3e0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t str = function_40ad40(a1, a2); // 0x40a3fe\n    int32_t len = strlen((char *)str); // 0x40a409\n    int64_t v1 = (int64_t)g65; // 0x40a411\n    int64_t str2 = v1; // 0x40a423\n    if (g65 == NULL) {\n        // 0x40a890\n        function_40a380(v1);\n        str2 = (int64_t)g65;\n    }\n    int64_t v2 = str - a1; // 0x40a40e\n    int64_t v3 = len + (int32_t)v2; // 0x40a42e\n    uint64_t v4 = (int64_t)strlen((char *)str2) + 1; // 0x40a433\n    int64_t v5 = v3 + 1; // 0x40a43b\n    int32_t size = (int32_t)((v4 >= 9 ? v4 : 9) + v5); // 0x40a460\n    int64_t * mem = malloc(size); // 0x40a460\n    int64_t result = (int64_t)mem; // 0x40a460\n    if (mem == NULL) {\n        // 0x40a73d\n        return result;\n    }\n    int32_t v6 = v4; // 0x40a43f\n    int64_t v7 = v3 + 2;\n    int64_t v8 = 0x100000000 * a2 >> 32;\n    int64_t dirp2 = 0;\n    int64_t v9 = v2; // 0x40a3e0\n    int64_t result2 = result;\n    struct __dirstream * v10; // 0x40a3e0\n    int64_t v11; // 0x40a3e0\n    int64_t v12; // 0x40a3e0\n    int64_t v13; // 0x40a3e0\n    int64_t v14; // 0x40a3e0\n    int64_t v15; // 0x40a3e0\n    int64_t v16; // 0x40a3e0\n    int64_t v17; // 0x40a3e0\n    int64_t v18; // 0x40a3e0\n    int64_t v19; // 0x40a3e0\n    int32_t v20; // 0x40a486\n    int64_t v21; // 0x40a498\n    while (true) {\n      lab_0x40a474:\n        // 0x40a474\n        v15 = result2;\n        v14 = v9;\n        int64_t v22 = dirp2;\n        v18 = v8;\n        memcpy((int64_t *)v15, (int64_t *)a1, (int32_t)v5);\n        v20 = v18;\n        if (v20 == 1) {\n            // 0x40a760\n            memcpy((int64_t *)(v15 + v3), (int64_t *)g65, v6);\n            v19 = v18;\n            v13 = v22;\n            v17 = v15;\n            goto lab_0x40a6cb;\n        } else {\n            int64_t v23 = v15 + v14; // 0x40a491\n            v21 = function_40ada0(v23);\n            if (v22 == 0) {\n                int16_t * v24 = (int16_t *)v23; // 0x40a7cd\n                int16_t v25 = *v24; // 0x40a7cd\n                *v24 = 46;\n                int64_t v26 = function_40abc0(); // 0x40a7db\n                int64_t v27 = v21 + v23; // 0x40a7e0\n                if (v26 == 0) {\n                    // 0x40a840\n                    __errno_location();\n                    *v24 = v25;\n                    *(int32_t *)v27 = 0x7e317e2e;\n                    *(char *)(v27 + 4) = 0;\n                    v12 = 0;\n                    v16 = v15;\n                    goto lab_0x40a6b0;\n                } else {\n                    // 0x40a7ec\n                    *v24 = v25;\n                    *(int32_t *)v27 = 0x7e317e2e;\n                    *(char *)(v27 + 4) = 0;\n                    v10 = (struct __dirstream *)v26;\n                    v11 = v26;\n                    goto lab_0x40a4b1;\n                }\n            } else {\n                struct __dirstream * dirp = (struct __dirstream *)v22;\n                rewinddir(dirp);\n                v10 = dirp;\n                v11 = v22;\n                goto lab_0x40a4b1;\n            }\n        }\n    }\n  lab_0x40a878_2:\n    // 0x40a878\n    if (dirp2 != 0) {\n        // 0x40a881\n        closedir((struct __dirstream *)dirp2);\n    }\n    // 0x40a73d\n    return result2;\n  lab_0x40a6b0:;\n    int64_t v28 = v16;\n    v19 = v18;\n    v13 = v12;\n    v17 = v28;\n    int64_t v29 = v28; // 0x40a3e0\n    int64_t v30 = v12; // 0x40a3e0\n    int64_t v31 = v28; // 0x40a3e0\n    int64_t v32 = v12; // 0x40a3e0\n    int64_t v33 = v18; // 0x40a3e0\n    int64_t * v34; // 0x40a3e0\n    int64_t v35; // 0x40a3e0\n    switch ((int32_t)v35) {\n        case 2: {\n            goto lab_0x40a780;\n        }\n        case 3: {\n            // 0x40a808\n            v34 = (int64_t *)v28;\n          lab_0x40a808:\n            // 0x40a808\n            free(v34);\n            *__errno_location() = 12;\n            // 0x40a73d\n            return 0;\n        }\n        case 1: {\n            goto lab_0x40a7b0;\n        }\n        default: {\n            goto lab_0x40a6cb;\n        }\n    }\n  lab_0x40a62a:;\n    // 0x40a62a\n    int64_t v36; // 0x40a3e0\n    int64_t v37 = v36;\n    int32_t v38; // 0x40a3e0\n    int32_t v39 = v38;\n    int64_t v40 = v37 + v3; // 0x40a63e\n    *(int16_t *)v40 = 0x7e2e;\n    int64_t v41 = v40 + 2; // 0x40a644\n    *(char *)v41 = 48;\n    uint64_t v42; // 0x40a3e0\n    int64_t str4; // 0x40a51d\n    int64_t v43; // 0x40a5b4\n    int64_t v44 = v42 - 1 + (int64_t)memcpy((int64_t *)(v41 + v43), (int64_t *)str4, (int32_t)v42 + 2); // 0x40a669\n    char * v45 = (char *)v44;\n    char v46 = *v45; // 0x40a669\n    int64_t v47 = v44; // 0x40a674\n    char * v48 = v45; // 0x40a674\n    char v49 = v46; // 0x40a674\n    if (v46 == 57) {\n        *(char *)v47 = 48;\n        int64_t v50 = v47 - 1; // 0x40a683\n        char * v51 = (char *)v50;\n        char v52 = *v51; // 0x40a687\n        v47 = v50;\n        v48 = v51;\n        v49 = v52;\n        while (v52 == 57) {\n            // 0x40a680\n            *(char *)v47 = 48;\n            v50 = v47 - 1;\n            v51 = (char *)v50;\n            v52 = *v51;\n            v47 = v50;\n            v48 = v51;\n            v49 = v52;\n        }\n    }\n    // 0x40a68f\n    *v48 = v49 + 1;\n    struct __dirstream * dirp3; // 0x40a3e0\n    struct dirent * v53 = readdir(dirp3); // 0x40a69a\n    int64_t v54; // 0x40a3e0\n    v12 = v54;\n    v16 = v37;\n    if (v53 == NULL) {\n        // break (via goto) -> 0x40a6b0\n        goto lab_0x40a6b0;\n    }\n    // 0x40a4e9\n    int64_t v55; // 0x40a5c1\n    int32_t v56 = v55;\n    int64_t str3 = (int64_t)v53 + 19; // 0x40a4e9\n    int32_t v57 = v56; // 0x40a4fa\n    int32_t v58 = v39; // 0x40a4fa\n    int64_t v59 = v43; // 0x40a4fa\n    int64_t v60 = v37; // 0x40a4fa\n    uint64_t v61; // 0x40a4c9\n    if (v61 > (int64_t)strlen((char *)str3)) {\n        // break -> 0x40a4d8\n        goto lab_0x40a4d8_2;\n    }\n    // 0x40a4fc\n    int32_t n; // 0x40a3e0\n    int32_t memcmp_rc = memcmp((int64_t *)(v37 + v14), (int64_t *)str3, n); // 0x40a50f\n    v57 = v56;\n    v58 = v39;\n    v59 = v43;\n    v60 = v37;\n    int32_t v62 = v56; // 0x40a516\n    int32_t v63 = v39; // 0x40a516\n    int64_t v64 = v43; // 0x40a516\n    int64_t v65 = v37; // 0x40a516\n    int64_t v66 = str3; // 0x40a516\n    if (memcmp_rc != 0) {\n        // break -> 0x40a4d8\n        goto lab_0x40a4d8_2;\n    }\n    goto lab_0x40a518;\n  lab_0x40a5fd:;\n    // 0x40a5fd\n    int64_t v91; // 0x40a3e0\n    int32_t v92 = v91;\n    int64_t v67; // 0x40a3e0\n    int64_t * v93 = (int64_t *)v67;\n    int64_t * mem2 = realloc(v93, v92); // 0x40a60f\n    v38 = v92;\n    v36 = (int64_t)mem2;\n    v34 = v93;\n    if (mem2 == NULL) {\n        goto lab_0x40a808;\n    }\n    goto lab_0x40a62a;\n  lab_0x40a6cb:\n    // 0x40a6cb\n    result2 = v17;\n    dirp2 = v13;\n    if ((char)a3 == 0) {\n        // break -> 0x40a878\n        goto lab_0x40a878_2;\n    }\n    // 0x40a6d6\n    v8 = v19;\n    int64_t v94; // 0x40a3e0\n    int64_t v95; // 0x40a3e0\n    if (dirp2 == 0) {\n        goto lab_0x40a750;\n    } else {\n        int32_t v96 = dirfd((struct __dirstream *)dirp2); // 0x40a6de\n        v94 = result2 + v14;\n        v95 = v96;\n        v9 = v14;\n        if (v96 < 0) {\n            goto lab_0x40a750;\n        } else {\n            goto lab_0x40a6ed;\n        }\n    }\n  lab_0x40a750:\n    // 0x40a750\n    v94 = result2;\n    v95 = 0xffffff9c;\n    v9 = 0;\n    goto lab_0x40a6ed;\n  lab_0x40a4b1:\n    // 0x40a4b1\n    v54 = v11;\n    dirp3 = v10;\n    struct dirent * v101 = readdir(dirp3); // 0x40a4db\n    v29 = v15;\n    v30 = v54;\n    if (v101 == NULL) {\n        goto lab_0x40a780;\n    } else {\n        // 0x40a4e9\n        v61 = v21 + 4;\n        n = (int32_t)v21 + 2;\n        int64_t v70 = n;\n        struct dirent * v102 = v101; // 0x40a4db\n        int64_t v103 = v15;\n        int64_t v104 = 2;\n        int32_t v105 = size;\n        int32_t v106 = 1;\n        while (true) {\n            int32_t v107 = v106;\n            int32_t v108 = v105;\n            int64_t v109 = v104;\n            int64_t v110 = v103;\n            int64_t str5 = (int64_t)v102 + 19; // 0x40a4e9\n            v57 = v107;\n            v58 = v108;\n            v59 = v109;\n            v60 = v110;\n            if (v61 <= (int64_t)strlen((char *)str5)) {\n                int32_t memcmp_rc3 = memcmp((int64_t *)(v110 + v14), (int64_t *)str5, n); // 0x40a50f\n                v57 = v107;\n                v58 = v108;\n                v59 = v109;\n                v60 = v110;\n                v62 = v107;\n                v63 = v108;\n                v64 = v109;\n                v65 = v110;\n                v66 = str5;\n                if (memcmp_rc3 == 0) {\n                    while (true) {\n                      lab_0x40a518:\n                        // 0x40a518\n                        v67 = v65;\n                        int64_t v68 = v64;\n                        int32_t v69 = v63;\n                        int32_t n2 = v62;\n                        str4 = v66 + v70;\n                        char v71 = *(char *)str4; // 0x40a520\n                        v57 = n2;\n                        v58 = v69;\n                        v59 = v68;\n                        v60 = v67;\n                        if (v71 >= 58) {\n                            // break -> 0x40a4d8\n                            break;\n                        }\n                        int64_t v72 = str4 + 1; // 0x40a52b\n                        char v73 = *(char *)v72; // 0x40a52b\n                        int64_t v74 = v71 == 57; // 0x40a536\n                        int64_t v75 = (int64_t)v73 & 0xffffffff; // 0x40a53a\n                        int64_t v76 = v75; // 0x40a542\n                        int64_t v77 = v74; // 0x40a542\n                        int64_t v78 = v75; // 0x40a542\n                        int64_t v79 = 1; // 0x40a542\n                        int64_t v80 = v74; // 0x40a542\n                        if (v73 == 57 || (int32_t)v73 < 57) {\n                            int64_t v81 = 2; // 0x40a54d\n                            char v82 = *(char *)(v81 + str4); // 0x40a551\n                            int64_t v83 = v77 & (int64_t)((char)v76 == 57);\n                            int64_t v84 = (int64_t)v82 & 0xffffffff; // 0x40a558\n                            int64_t v85 = v81; // 0x40a560\n                            v77 = v83;\n                            v78 = v84;\n                            v79 = v81;\n                            v80 = v83;\n                            while (v82 == 57 || (int32_t)v82 < 57) {\n                                // 0x40a548\n                                v81 = v85 + 1;\n                                v82 = *(char *)(v81 + str4);\n                                v83 = v77 & (int64_t)((char)v84 == 57);\n                                v84 = (int64_t)v82 & 0xffffffff;\n                                v85 = v81;\n                                v77 = v83;\n                                v78 = v84;\n                                v79 = v81;\n                                v80 = v83;\n                            }\n                        }\n                        // 0x40a562\n                        v57 = n2;\n                        v58 = v69;\n                        v59 = v68;\n                        v60 = v67;\n                        if ((char)v78 != 126) {\n                            // break -> 0x40a4d8\n                            break;\n                        }\n                        // 0x40a56a\n                        v42 = v79;\n                        v57 = n2;\n                        v58 = v69;\n                        v59 = v68;\n                        v60 = v67;\n                        if (*(char *)(v42 + v72) != 0) {\n                            // break -> 0x40a4d8\n                            break;\n                        }\n                        int64_t v86 = v80;\n                        uint64_t v87 = (int64_t)n2; // 0x40a575\n                        int64_t v88 = v86; // 0x40a57d\n                        if (v42 <= v87) {\n                            // 0x40a57f\n                            v57 = n2;\n                            v58 = v69;\n                            v59 = v68;\n                            v60 = v67;\n                            if (v42 != v87) {\n                                // break -> 0x40a4d8\n                                break;\n                            }\n                            int32_t memcmp_rc2 = memcmp((int64_t *)(v7 + v67), (int64_t *)str4, n2); // 0x40a59c\n                            v57 = n2;\n                            v58 = v69;\n                            v59 = v68;\n                            v60 = v67;\n                            v88 = v86 % 256;\n                            if (memcmp_rc2 >= 0 == (memcmp_rc2 != 0)) {\n                                // break -> 0x40a4d8\n                                break;\n                            }\n                        }\n                        // 0x40a5b4\n                        v43 = v88 % 256;\n                        v55 = v43 + v42;\n                        int64_t v89 = v3 + 4 + v55; // 0x40a5ca\n                        v38 = v69;\n                        v36 = v67;\n                        if (v89 > (int64_t)v69) {\n                            int64_t v90 = 2 * v89; // 0x40a5e6\n                            if (v90 < 0) {\n                                // 0x40a828\n                                v91 = v89;\n                                goto lab_0x40a5fd;\n                            } else {\n                                // 0x40a5ef\n                                v91 = v90;\n                                if (v89 < 0) {\n                                    // 0x40a828\n                                    v91 = v89;\n                                    goto lab_0x40a5fd;\n                                } else {\n                                    goto lab_0x40a5fd;\n                                }\n                            }\n                        } else {\n                            goto lab_0x40a62a;\n                        }\n                    }\n                }\n            }\n          lab_0x40a4d8_2:\n            // 0x40a4d8\n            v103 = v60;\n            v104 = v59;\n            v105 = v58;\n            v106 = v57;\n            v102 = readdir(dirp3);\n            v12 = v54;\n            v16 = v103;\n            if (v102 == NULL) {\n                // break -> 0x40a6b0\n                break;\n            }\n        }\n        goto lab_0x40a6b0;\n    }\n  lab_0x40a6ed:\n    // 0x40a6ed\n    if ((int32_t)function_40ec70(0xffffff9c, a1, v95, v94, (int64_t)((int32_t)v8 != 1)) == 0) {\n        // break -> 0x40a878\n        goto lab_0x40a878_2;\n    }\n    int32_t * v97 = __errno_location(); // 0x40a710\n    int32_t v98 = *v97; // 0x40a715\n    if (v98 != 17) {\n        if (dirp2 != 0) {\n            // 0x40a728\n            closedir((struct __dirstream *)dirp2);\n        }\n        // 0x40a730\n        free((int64_t *)result2);\n        *v97 = v98;\n        // 0x40a73d\n        return 0;\n    }\n    goto lab_0x40a474;\n  lab_0x40a780:;\n    int64_t v99 = v30;\n    int64_t v100 = v29;\n    v31 = v100;\n    v32 = v99;\n    v33 = v18;\n    if (v20 == 2) {\n        // 0x40a787\n        memcpy((int64_t *)(v100 + v3), (int64_t *)g65, v6);\n        v31 = v100;\n        v32 = v99;\n        v33 = 1;\n    }\n    goto lab_0x40a7b0;\n  lab_0x40a7b0:\n    // 0x40a7b0\n    function_40a2b0(v31, v3);\n    v19 = v33;\n    v13 = v32;\n    v17 = v31;\n    goto lab_0x40a6cb;\n}\n"
        },
        {
            "funcName": "function_40a8b0",
            "funcStartAddr": "40a8b0",
            "funcEndAddr": "40a8ba",
            "decompiledFuncCode": "int64_t function_40a8b0(int64_t a1, int32_t a2) {\n    // 0x40a8b0\n    return function_40a3e0(a1, (int64_t)a2, 1);\n}\n"
        },
        {
            "funcName": "function_40a8c0",
            "funcStartAddr": "40a8c0",
            "funcEndAddr": "40a8ec",
            "decompiledFuncCode": "int64_t function_40a8c0(void) {\n    // 0x40a8c0\n    int64_t v1; // 0x40a8c0\n    int64_t v2 = function_412e60(v1, v1, g6, (int64_t *)&g5, 4, g42); // 0x40a8db\n    return (int64_t)*(int32_t *)(4 * v2 + (int64_t)&g5);\n}\n"
        },
        {
            "funcName": "function_40a8f0",
            "funcStartAddr": "40a8f0",
            "funcEndAddr": "40a90a",
            "decompiledFuncCode": "int64_t function_40a8f0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t result = function_40a3e0(a1, a2, 0); // 0x40a8f6\n    if (result != 0) {\n        // 0x40a900\n        return result;\n    }\n    // 0x40a905\n    function_411530(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40a910",
            "funcStartAddr": "40a910",
            "funcEndAddr": "40a922",
            "decompiledFuncCode": "int64_t function_40a910(int64_t a1, int64_t a2) {\n    // 0x40a910\n    if (a2 == 0) {\n        // 0x40a91a\n        return 2;\n    }\n    int64_t v1; // 0x40a910\n    if ((char)v1 != 0) {\n        // 0x40a920\n        return function_40a8c0();\n    }\n    // 0x40a91a\n    return 2;\n}\n"
        },
        {
            "funcName": "function_40a930",
            "funcStartAddr": "40a930",
            "funcEndAddr": "40a971",
            "decompiledFuncCode": "int64_t function_40a930(int64_t a1, int64_t a2) {\n    // 0x40a930\n    if (a2 != 0) {\n        int64_t v1; // 0x40a930\n        if ((char)v1 != 0) {\n            // 0x40a96c\n            return function_40a8c0();\n        }\n    }\n    char * env_val = getenv(\"VERSION_CONTROL\"); // 0x40a943\n    if (env_val == NULL) {\n        // 0x40a952\n        return 2;\n    }\n    // 0x40a94d\n    if (*env_val != 0) {\n        // 0x40a96c\n        return function_40a8c0();\n    }\n    // 0x40a952\n    return 2;\n}\n"
        },
        {
            "funcName": "function_40a980",
            "funcStartAddr": "40a980",
            "funcEndAddr": "40a9f0",
            "decompiledFuncCode": "int64_t function_40a980(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint64_t v1; // 0x40a980\n    if (a1 == 0) {\n        // 0x40a994\n        v1 = a2 != 0 ? a2 : 0x2000;\n        // 0x40a99e\n        return v1 > a3 ? a3 : v1;\n    }\n    // 0x40a9a8\n    if (a2 == 0) {\n        // 0x40a994\n        v1 = a1;\n        // 0x40a99e\n        return v1 > a3 ? a3 : v1;\n    }\n    uint64_t v2 = a2;\n    int64_t v3 = a1 % v2;\n    int64_t v4 = v2; // 0x40a9bb\n    while (v3 != 0) {\n        // 0x40a9b3\n        v2 = v3;\n        v3 = v4 % v2;\n        v4 = v2;\n    }\n    uint64_t v5 = a1 / v2; // 0x40a9c2\n    uint64_t result = v5 * a2; // 0x40a9c8\n    if (result > a3) {\n        // 0x40a994\n        v1 = a1;\n        // 0x40a99e\n        return v1 > a3 ? a3 : v1;\n    }\n    // 0x40a9d4\n    if (result / a2 == v5) {\n        // 0x40a99e\n        return result;\n    }\n    // 0x40a994\n    v1 = a1;\n    // 0x40a99e\n    return v1 > a3 ? a3 : v1;\n}\n"
        },
        {
            "funcName": "function_40a9f0",
            "funcStartAddr": "40a9f0",
            "funcEndAddr": "40a9f8",
            "decompiledFuncCode": "int64_t function_40a9f0(int64_t a1) {\n    // 0x40a9f0\n    g66 = a1;\n    int64_t result; // 0x40a9f0\n    return result;\n}\n"
        },
        {
            "funcName": "function_40aa00",
            "funcStartAddr": "40aa00",
            "funcEndAddr": "40aafd",
            "decompiledFuncCode": "int64_t function_40aa00(int64_t a1, int64_t a2) {\n    int64_t v1 = (int64_t)g45; // 0x40aa04\n    int64_t v2; // 0x40aa00\n    if (function_411b90(v1) != 0) {\n        int64_t v3 = function_411bc0(v1, 0, 1); // 0x40aaba\n        int64_t v4 = (int64_t)g45; // 0x40aabf\n        v2 = v4;\n        if ((int32_t)v3 == 0) {\n            int64_t v5 = function_411b50(v4, 0); // 0x40aa38\n            int64_t v6 = (int64_t)g45; // 0x40aa3d\n            v2 = v6;\n            if ((int32_t)v5 == 0) {\n                goto lab_0x40aace;\n            } else {\n                // 0x40aa4c\n                function_412f20(v6);\n                goto lab_0x40aa58;\n            }\n        } else {\n            goto lab_0x40aace;\n        }\n    } else {\n        // 0x40aa1c\n        if ((int32_t)function_412f20(v1) == 0) {\n            // 0x40aa28\n            return function_40ab20();\n        }\n        goto lab_0x40aa58;\n    }\n  lab_0x40aace:\n    // 0x40aace\n    if ((int32_t)function_412f20(v2) == 0) {\n        // 0x40aadb\n        return function_40ab20();\n    }\n    goto lab_0x40aa58;\n  lab_0x40aa58:;\n    char * v7 = dcgettext(NULL, \"error closing file\", 5); // 0x40aa64\n    int32_t * err_num = __errno_location(); // 0x40aa73\n    if (g66 == 0) {\n        // 0x40aae8\n        error(0, *err_num, \"%s\", v7);\n    } else {\n        // 0x40aa80\n        error(0, *err_num, \"%s: %s\", (char *)function_40eaa0((int64_t)g66), v7);\n    }\n    // 0x40aa9f\n    function_40ab20();\n    _exit(g33);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40ab00",
            "funcStartAddr": "40ab00",
            "funcEndAddr": "40ab08",
            "decompiledFuncCode": "int64_t function_40ab00(int64_t a1) {\n    // 0x40ab00\n    g68 = a1;\n    int64_t result; // 0x40ab00\n    return result;\n}\n"
        },
        {
            "funcName": "function_40ab10",
            "funcStartAddr": "40ab10",
            "funcEndAddr": "40ab18",
            "decompiledFuncCode": "int64_t function_40ab10(int64_t a1) {\n    // 0x40ab10\n    g67 = a1;\n    int64_t result; // 0x40ab10\n    return result;\n}\n"
        },
        {
            "funcName": "function_40ab20",
            "funcStartAddr": "40ab20",
            "funcEndAddr": "40abbe",
            "decompiledFuncCode": "int64_t function_40ab20(void) {\n    // 0x40ab20\n    int32_t * err_num; // 0x40ab36\n    if ((int32_t)function_412f20((int64_t)g44) == 0) {\n        goto lab_0x40ab4c;\n    } else {\n        // 0x40ab36\n        err_num = __errno_location();\n        if (g67 == 0) {\n            goto lab_0x40ab63;\n        } else {\n            // 0x40ab47\n            if (*err_num != 32) {\n                goto lab_0x40ab63;\n            } else {\n                goto lab_0x40ab4c;\n            }\n        }\n    }\n  lab_0x40ab4c:;\n    int64_t result = function_412f20((int64_t)g47); // 0x40ab53\n    if ((int32_t)result == 0) {\n        // 0x40ab5c\n        return result;\n    }\n    // 0x40ab9e\n    _exit(g33);\n    // UNREACHABLE\n  lab_0x40ab63:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x40ab6f\n    if (g68 == 0) {\n        // 0x40aba9\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x40ab83\n        error(0, *err_num, \"%s: %s\", (char *)function_40eaa0((int64_t)g68), v1);\n    }\n    // 0x40ab9e\n    _exit(g33);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40abc0",
            "funcStartAddr": "40abc0",
            "funcEndAddr": "40ac56",
            "decompiledFuncCode": "int64_t function_40abc0(void) {\n    // 0x40abc0\n    int64_t name; // 0x40abc0\n    struct __dirstream * dirp = opendir((char *)name); // 0x40abc8\n    if (dirp == NULL) {\n        // 0x40abe2\n        return (int64_t)dirp;\n    }\n    uint32_t v1 = dirfd(dirp); // 0x40abd8\n    if (v1 >= 3) {\n        // 0x40abe2\n        return (int64_t)dirp;\n    }\n    int64_t v2 = function_411a10((int64_t)v1, 1030, 3, name); // 0x40abfe\n    int32_t * v3 = __errno_location(); // 0x40ac06\n    int32_t fd = v2; // 0x40ac0e\n    if (fd < 0) {\n        // 0x40ac19\n        closedir(dirp);\n        return 0;\n    }\n    struct __dirstream * v4 = fdopendir(fd); // 0x40ac3b\n    if (v4 == NULL) {\n        // 0x40ac4c\n        close(fd);\n    }\n    // 0x40ac19\n    closedir(dirp);\n    return (int64_t)v4;\n}\n"
        },
        {
            "funcName": "function_40ac60",
            "funcStartAddr": "40ac60",
            "funcEndAddr": "40ac78",
            "decompiledFuncCode": "int64_t function_40ac60(void) {\n    // 0x40ac60\n    int64_t v1; // 0x40ac60\n    int64_t result = function_40ace0(v1); // 0x40ac64\n    if (result != 0) {\n        // 0x40ac6e\n        return result;\n    }\n    // 0x40ac73\n    function_411530(v1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40ac80",
            "funcStartAddr": "40ac80",
            "funcEndAddr": "40acdd",
            "decompiledFuncCode": "int64_t function_40ac80(int64_t a1) {\n    // 0x40ac80\n    int64_t v1; // 0x40ac80\n    uint64_t v2 = (int64_t)((char)v1 == 47); // 0x40ac8e\n    int64_t v3 = function_40ad40(a1, v1); // 0x40ac92\n    int64_t result = v3 - a1; // 0x40ac9a\n    if (result <= v2 || *(char *)(v3 - 1) != 47) {\n        // 0x40acc3\n        return result;\n    }\n    int64_t result2 = result;\n    result2--;\n    while (result2 != v2) {\n        // 0x40acb0\n        if (*(char *)(a1 - 1 + result2) != 47) {\n            // break -> 0x40acc3\n            break;\n        }\n        result2--;\n    }\n    // 0x40acc3\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40ace0",
            "funcStartAddr": "40ace0",
            "funcEndAddr": "40ad3a",
            "decompiledFuncCode": "int64_t function_40ace0(int64_t a1) {\n    // 0x40ace0\n    int64_t v1; // 0x40ace0\n    int64_t v2 = v1;\n    int64_t * mem = malloc((int32_t)(v2 + 1 + (int64_t)(v2 == 0))); // 0x40acff\n    if (mem == NULL) {\n        // 0x40ad26\n        return (int64_t)mem;\n    }\n    int64_t * dest_mem = memcpy(mem, (int64_t *)a1, (int32_t)v2); // 0x40ad15\n    int64_t v3; // 0x40ace0\n    if (v2 == 0) {\n        // 0x40ad30\n        *(char *)dest_mem = 46;\n        v3 = 1;\n    }\n    int64_t result = (int64_t)dest_mem; // 0x40ad15\n    *(char *)(v3 + result) = 0;\n    // 0x40ad26\n    return result;\n}\n"
        },
        {
            "funcName": "function_40ad40",
            "funcStartAddr": "40ad40",
            "funcEndAddr": "40ad9b",
            "decompiledFuncCode": "int64_t function_40ad40(int64_t a1, int64_t a2) {\n    // 0x40ad40\n    int64_t v1; // 0x40ad40\n    char v2 = v1;\n    int64_t v3 = a1; // 0x40ad49\n    int64_t v4 = a1; // 0x40ad49\n    char v5 = v2; // 0x40ad49\n    if (v2 == 47) {\n        v3++;\n        char v6 = *(char *)v3; // 0x40ad54\n        v4 = v3;\n        v5 = v6;\n        while (v6 == 47) {\n            // 0x40ad50\n            v3++;\n            v6 = *(char *)v3;\n            v4 = v3;\n            v5 = v6;\n        }\n    }\n    int64_t result = v4; // 0x40ad5e\n    if (v5 == 0) {\n      lab_0x40ad9a:\n        // 0x40ad9a\n        return result;\n    }\n    int64_t v7 = v4; // 0x40ad88\n    int64_t v8 = 0; // 0x40ad88\n    int64_t v9; // 0x40ad40\n    int64_t v10; // 0x40ad8a\n    char v11; // 0x40ad8e\n    if (v5 == 47) {\n        v10 = v4 + 1;\n        v11 = *(char *)v10;\n        result = v4;\n        if (v11 == 0) {\n            return result;\n        }\n        // 0x40ad85\n        v7 = v10;\n        v8 = 1;\n        v9 = v10;\n        while (v11 == 47) {\n            // 0x40ad8a\n            v10 = v9 + 1;\n            v11 = *(char *)v10;\n            result = v4;\n            if (v11 == 0) {\n                return result;\n            }\n            // 0x40ad85\n            v7 = v10;\n            v8 = 1;\n            v9 = v10;\n        }\n    }\n    int64_t v12 = v8;\n    int64_t result2 = (char)v12 == 0 ? v4 : v7;\n    int64_t v13 = v7 + 1; // 0x40ad7a\n    char v14 = *(char *)v13; // 0x40ad7e\n    while (v14 != 0) {\n        int64_t v15 = result2;\n        v7 = v13;\n        v8 = (char)v12 == 0 ? v12 : 0;\n        v9 = v13;\n        if (v14 == 47) {\n            v10 = v9 + 1;\n            v11 = *(char *)v10;\n            result = v15;\n            if (v11 == 0) {\n                return result;\n            }\n            // 0x40ad85\n            v7 = v10;\n            v8 = 1;\n            v9 = v10;\n            while (v11 == 47) {\n                // 0x40ad8a\n                v10 = v9 + 1;\n                v11 = *(char *)v10;\n                result = v15;\n                if (v11 == 0) {\n                    return result;\n                }\n                // 0x40ad85\n                v7 = v10;\n                v8 = 1;\n                v9 = v10;\n            }\n        }\n        // 0x40ad70\n        v12 = v8;\n        result2 = (char)v12 == 0 ? v15 : v7;\n        v13 = v7 + 1;\n        v14 = *(char *)v13;\n    }\n    // 0x40ad9a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40ada0",
            "funcStartAddr": "40ada0",
            "funcEndAddr": "40adcb",
            "decompiledFuncCode": "int64_t function_40ada0(int64_t str) {\n    int32_t len = strlen((char *)str); // 0x40ada4\n    int64_t result = len; // 0x40ada4\n    if (len < 2) {\n        // 0x40adba\n        return result;\n    }\n    int64_t v1 = result - 1;\n    int64_t result2 = result; // 0x40adb8\n    while (*(char *)(v1 + str) == 47) {\n        // 0x40adc0\n        result2 = v1;\n        if (v1 == 1) {\n            // break -> 0x40adba\n            break;\n        }\n        int64_t v2 = v1;\n        v1 = v2 - 1;\n        result2 = v2;\n    }\n    // 0x40adba\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40add0",
            "funcStartAddr": "40add0",
            "funcEndAddr": "40add5",
            "decompiledFuncCode": "int64_t function_40add0(char fd, int32_t offset, int32_t length, int64_t advice) {\n    // 0x40add0\n    return posix_fadvise((int32_t)fd, offset, length, (int32_t)advice);\n}\n"
        },
        {
            "funcName": "function_40ade0",
            "funcStartAddr": "40ade0",
            "funcEndAddr": "40ae01",
            "decompiledFuncCode": "int64_t function_40ade0(int64_t stream, int64_t advice, int64_t a3) {\n    // 0x40ade0\n    if (stream == 0) {\n        // 0x40ae00\n        int64_t result; // 0x40ade0\n        return result;\n    }\n    // 0x40ade5\n    return posix_fadvise(fileno((struct _IO_FILE *)stream), 0, 0, (int32_t)advice);\n}\n"
        },
        {
            "funcName": "function_40ae10",
            "funcStartAddr": "40ae10",
            "funcEndAddr": "40ae5a",
            "decompiledFuncCode": "int64_t function_40ae10(int64_t path, int32_t oflag, int64_t a3) {\n    uint32_t fd = open((char *)path, oflag); // 0x40ae23\n    return function_40fcf0((int64_t)fd);\n}\n"
        },
        {
            "funcName": "function_40ae60",
            "funcStartAddr": "40ae60",
            "funcEndAddr": "40aee6",
            "decompiledFuncCode": "int64_t function_40ae60(int64_t a1, int64_t a2, int64_t a3) {\n    if (a1 == 0) {\n        // 0x40aed0\n        int64_t result; // 0x40ae60\n        return result;\n    }\n    int64_t result2 = function_4112e0(24); // 0x40ae7d\n    *(int64_t *)result2 = function_411510(a2);\n    *(int64_t *)(result2 + 8) = *(int64_t *)(a3 + 8);\n    *(int64_t *)(result2 + 16) = a3;\n    int64_t v1 = function_40c2f0(a1, result2); // 0x40aea6\n    if (v1 == 0) {\n        // 0x40aee1\n        function_411530(a1);\n        // UNREACHABLE\n    }\n    // 0x40aeb0\n    if (result2 == v1) {\n        // 0x40aed0\n        return result2;\n    }\n    // 0x40aeb5\n    return function_40c5c0(result2);\n}\n"
        },
        {
            "funcName": "function_40aef0",
            "funcStartAddr": "40aef0",
            "funcEndAddr": "40af2b",
            "decompiledFuncCode": "int64_t function_40aef0(int64_t a1, int64_t a2, int64_t a3) {\n    if (a1 == 0) {\n        // 0x40af28\n        return 0;\n    }\n    int64_t v1 = a2; // bp-40, 0x40aefd\n    int64_t v2 = function_40b8e0(a1, &v1); // 0x40af11\n    return v2 & -256 | (int64_t)(v2 != 0);\n}\n"
        },
        {
            "funcName": "function_40af30",
            "funcStartAddr": "40af30",
            "funcEndAddr": "40b0a3",
            "decompiledFuncCode": "int64_t function_40af30(int32_t a1, int64_t * a2) {\n    int32_t v1 = a1 & 0xf000; // 0x40af37\n    char v2 = 45; // 0x40af30\n    int64_t v3; // 0x40af30\n    int64_t v4; // 0x40af30\n    uint64_t v5; // 0x40af30\n    switch ((v1 - 0x1000) / 0x1000) {\n        case 3: {\n            // 0x40af99\n            v2 = 100;\n        }\n        case 7: {\n          lab_0x40af99:\n            // 0x40af99\n            v4 = (int64_t)a2;\n            v5 = (int64_t)a1;\n            *(char *)a2 = v2;\n            *(char *)(v4 + 1) = (v5 & 256) == 0 ? 45 : 114;\n            int64_t v6 = v5 & 128; // 0x40afb2\n            char v7 = v6; // 0x40afba\n            *(char *)(v4 + 2) = (v7 - ((char)(v6 == 0) | v7) & -74) + 119;\n            int64_t v8 = v5 & 64; // 0x40afc7\n            int64_t v9 = v8 - (v8 | (int64_t)(v8 == 0)); // 0x40afcd\n            if ((v5 & 2048) == 0) {\n                // 0x40b070\n                v3 = (v9 & 0xffffffb5) + 120 & 0xfffffffd;\n            } else {\n                // 0x40afdb\n                v3 = (v9 & 0xffffffe0) + 115 & 0xfffffff3;\n            }\n            // break -> 0x40afe1\n            break;\n        }\n        case 5: {\n            // 0x40af99\n            v2 = 98;\n            // branch (via goto) -> 0x40af99\n            goto lab_0x40af99;\n        }\n        case 1: {\n            // 0x40af99\n            v2 = 99;\n            // branch (via goto) -> 0x40af99\n            goto lab_0x40af99;\n        }\n        case 9: {\n            // 0x40af99\n            v2 = 108;\n            // branch (via goto) -> 0x40af99\n            goto lab_0x40af99;\n        }\n        case 0: {\n            // 0x40af99\n            v2 = 112;\n            // branch (via goto) -> 0x40af99\n            goto lab_0x40af99;\n        }\n        default: {\n            // 0x40af86\n            v2 = v1 != 0xc000 ? 63 : 115;\n            // branch (via goto) -> 0x40af99\n            goto lab_0x40af99;\n        }\n    }\n    // 0x40afe1\n    *(char *)(v4 + 3) = (char)v3;\n    int64_t v10 = v5 & 32; // 0x40afe6\n    char v11 = v10; // 0x40afec\n    *(char *)(v4 + 4) = (v11 - ((char)(v10 == 0) | v11) & -69) + 114;\n    int64_t v12 = v5 & 16; // 0x40aff9\n    char v13 = v12; // 0x40afff\n    *(char *)(v4 + 5) = (v13 - ((char)(v12 == 0) | v13) & -74) + 119;\n    int64_t v14 = v5 & 8; // 0x40b00c\n    int64_t v15 = v14 - (v14 | (int64_t)(v14 == 0)); // 0x40b012\n    int64_t v16; // 0x40af30\n    if ((v5 & 1024) == 0) {\n        // 0x40b080\n        v16 = (v15 & 0xffffffb5) + 120 & 0xfffffffd;\n    } else {\n        // 0x40b01c\n        v16 = (v15 & 0xffffffe0) + 115 & 0xfffffff3;\n    }\n    // 0x40b022\n    *(char *)(v4 + 6) = (char)v16;\n    int64_t v17 = v5 & 4; // 0x40b027\n    char v18 = v17; // 0x40b02d\n    *(char *)(v4 + 7) = (v18 - ((char)(v17 == 0) | v18) & -69) + 114;\n    int64_t v19 = v5 & 2; // 0x40b03a\n    char v20 = v19; // 0x40b040\n    *(char *)(v4 + 8) = (v20 - ((char)(v19 == 0) | v20) & -74) + 119;\n    char v21 = v5 % 2 == 0; // 0x40b053\n    if ((v5 & 512) == 0) {\n        // 0x40b090\n        *(char *)(v4 + 9) = (v21 & -75) + 120;\n        *(int16_t *)(v4 + 10) = 32;\n        return 32;\n    }\n    // 0x40b05d\n    *(char *)(v4 + 9) = (v21 & -32) + 116;\n    *(int16_t *)(v4 + 10) = 32;\n    return 32;\n}\n"
        },
        {
            "funcName": "function_40b0b0",
            "funcStartAddr": "40b0b0",
            "funcEndAddr": "40b0b8",
            "decompiledFuncCode": "int64_t function_40b0b0(int64_t a1) {\n    // 0x40b0b0\n    int64_t v1; // 0x40b0b0\n    return function_40af30(*(int32_t *)(a1 + 24), (int64_t *)v1);\n}\n"
        },
        {
            "funcName": "function_40b0c0",
            "funcStartAddr": "40b0c0",
            "funcEndAddr": "40b0d8",
            "decompiledFuncCode": "int64_t function_40b0c0(void) {\n    // 0x40b0c0\n    int64_t v1; // 0x40b0c0\n    int64_t result = function_40b0e0(v1, v1, v1); // 0x40b0c4\n    if (result != 0) {\n        // 0x40b0ce\n        return result;\n    }\n    // 0x40b0d3\n    function_411530(v1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40b0e0",
            "funcStartAddr": "40b0e0",
            "funcEndAddr": "40b1b9",
            "decompiledFuncCode": "int64_t function_40b0e0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = function_40ad40(a1, a2); // 0x40b0f8\n    int64_t v2 = function_40ada0(v1); // 0x40b103\n    int64_t v3 = 0; // 0x40b117\n    if (v2 != 0) {\n        // 0x40b119\n        v3 = *(char *)(v1 - 1 + v2) != 47;\n    }\n    int64_t str = a2; // 0x40b130\n    int64_t v4 = a2; // 0x40b130\n    int64_t v5; // 0x40b0e0\n    if ((char)v5 == 47) {\n        v4++;\n        str = v4;\n        while (*(char *)v4 == 47) {\n            // 0x40b1a8\n            v4++;\n            str = v4;\n        }\n    }\n    int64_t v6 = v1 - a1 + v2; // 0x40b111\n    int32_t len = strlen((char *)str); // 0x40b135\n    int64_t * mem = malloc(len + (int32_t)(v6 + 1 + v3)); // 0x40b145\n    if (mem == NULL) {\n        // 0x40b191\n        return (int64_t)mem;\n    }\n    int64_t * v7 = mempcpy(mem, (int64_t *)a1, (int32_t)v6); // 0x40b15b\n    *(char *)v7 = 47;\n    int64_t v8 = v3 + (int64_t)v7; // 0x40b167\n    if (a3 != 0) {\n        // 0x40b170\n        *(int64_t *)a3 = v8 - (int64_t)((char)v5 == 47);\n    }\n    // 0x40b183\n    *(char *)mempcpy((int64_t *)v8, (int64_t *)str, len) = 0;\n    // 0x40b191\n    return (int64_t)mem;\n}\n"
        },
        {
            "funcName": "function_40b1c0",
            "funcStartAddr": "40b1c0",
            "funcEndAddr": "40b236",
            "decompiledFuncCode": "int64_t function_40b1c0(int64_t a1, int64_t * a2, int64_t a3) {\n    // 0x40b1c0\n    if (a3 == 0) {\n        // 0x40b204\n        return 0;\n    }\n    int64_t v1 = a3; // 0x40b1db\n    int64_t v2 = (int64_t)a2; // 0x40b1db\n    int64_t result = 0;\n    int64_t v3 = function_40eec0(a1 & 0xffffffff, v2, v1); // 0x40b1f9\n    int64_t result2 = result; // 0x40b202\n    while (v3 != -1) {\n        if (v3 == 0) {\n            // 0x40b218\n            *__errno_location() = 0;\n            return result;\n        }\n        int64_t v4 = v3 + result; // 0x40b1e5\n        v1 -= v3;\n        v2 += v3;\n        result2 = v4;\n        if (v1 == 0) {\n            // break -> 0x40b204\n            break;\n        }\n        result = v4;\n        v3 = function_40eec0(a1 & 0xffffffff, v2, v1);\n        result2 = result;\n    }\n    // 0x40b204\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40b240",
            "funcStartAddr": "40b240",
            "funcEndAddr": "40b2b6",
            "decompiledFuncCode": "int64_t function_40b240(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40b240\n    if (a3 == 0) {\n        // 0x40b284\n        return 0;\n    }\n    int64_t v1 = a3; // 0x40b25b\n    int64_t v2 = a2; // 0x40b25b\n    int64_t result = 0;\n    int64_t v3 = function_40ef20(a1 & 0xffffffff, v2, v1); // 0x40b279\n    int64_t result2 = result; // 0x40b282\n    while (v3 != -1) {\n        if (v3 == 0) {\n            // 0x40b298\n            *__errno_location() = 28;\n            return result;\n        }\n        int64_t v4 = v3 + result; // 0x40b265\n        v1 -= v3;\n        v2 += v3;\n        result2 = v4;\n        if (v1 == 0) {\n            // break -> 0x40b284\n            break;\n        }\n        result = v4;\n        v3 = function_40ef20(a1 & 0xffffffff, v2, v1);\n        result2 = result;\n    }\n    // 0x40b284\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40b2c0",
            "funcStartAddr": "40b2c0",
            "funcEndAddr": "40b353",
            "decompiledFuncCode": "int64_t function_40b2c0(uint64_t a1) {\n    int64_t v1 = a1 >= 10 ? a1 | 1 : 11; // 0x40b2d7\n    if (v1 == -1) {\n        // 0x40b34f\n        return -1;\n    }\n    int64_t v2 = v1; // 0x40b2df\n    int64_t v3; // 0x40b2c0\n    while (true) {\n      lab_0x40b2e8:\n        // 0x40b2e8\n        v3 = v2;\n        if (v3 < 10) {\n            goto lab_0x40b340;\n        } else {\n            goto lab_0x40b345;\n        }\n    }\n  lab_0x40b34f_2:;\n    // 0x40b34f\n    int64_t result; // 0x40b2c0\n    return result;\n  lab_0x40b345:;\n    int64_t v4 = v3 + 2; // 0x40b345\n    v2 = v4;\n    result = v4;\n    if (v3 == -3) {\n        // break -> 0x40b34f\n        goto lab_0x40b34f_2;\n    }\n    goto lab_0x40b2e8;\n  lab_0x40b340:\n    // 0x40b340\n    result = v3;\n    goto lab_0x40b345;\n}\n"
        },
        {
            "funcName": "function_40b360",
            "funcStartAddr": "40b360",
            "funcEndAddr": "40b370",
            "decompiledFuncCode": "int64_t function_40b360(uint64_t a1, uint64_t a2, int64_t a3) {\n    // 0x40b360\n    return (a1 / 8 | 0x2000000000000000 * a1) % a2;\n}\n"
        },
        {
            "funcName": "function_40b370",
            "funcStartAddr": "40b370",
            "funcEndAddr": "40b377",
            "decompiledFuncCode": "int64_t function_40b370(int64_t a1, int64_t a2) {\n    // 0x40b370\n    int64_t v1; // 0x40b370\n    return v1 & -256 | (int64_t)(a1 == a2);\n}\n"
        },
        {
            "funcName": "function_40b380",
            "funcStartAddr": "40b380",
            "funcEndAddr": "40b3a1",
            "decompiledFuncCode": "int64_t function_40b380(int64_t a1, int64_t a2) {\n    // 0x40b380\n    int64_t v1; // 0x40b380\n    uint64_t v2 = v1;\n    if (*(int64_t *)(a1 + 16) > v2) {\n        // 0x40b398\n        return 16 * v2 + a2;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40b3b0",
            "funcStartAddr": "40b3b0",
            "funcEndAddr": "40b4c9",
            "decompiledFuncCode": "int64_t function_40b3b0(int64_t a1, int64_t a2, int64_t * a3, int32_t a4) {\n    int64_t v1 = function_40b380(a1, a2); // 0x40b3c4\n    *a3 = v1;\n    int64_t * v2 = (int64_t *)v1; // 0x40b3cc\n    int64_t result2 = *v2; // 0x40b3cc\n    if (result2 == 0) {\n        // 0x40b45e\n        return 0;\n    }\n    if (result2 != a2) {\n        if ((char)v1 == 0) {\n            int64_t v3 = *(int64_t *)(v1 + 8); // 0x40b3f4\n            if (v3 == 0) {\n                // 0x40b45e\n                return 0;\n            }\n            int64_t v4 = *(int64_t *)v3; // 0x40b401\n            int64_t v5 = v3; // 0x40b407\n            int64_t v6 = v1; // 0x40b407\n            int64_t result = v4; // 0x40b407\n            if (v4 != a2 != ((char)v3 == 0)) {\n              lab_0x40b43c_2:\n                // 0x40b43c\n                if ((char)a4 != 0) {\n                    int64_t * v7 = (int64_t *)(v5 + 8); // 0x40b441\n                    *(int64_t *)(v6 + 8) = *v7;\n                    *(int64_t *)v5 = 0;\n                    int64_t * v8 = (int64_t *)(a1 + 72); // 0x40b450\n                    *v7 = *v8;\n                    *v8 = v5;\n                }\n                // 0x40b45e\n                return result;\n            }\n            int64_t v9 = v3;\n            int64_t v10 = *(int64_t *)(v9 + 8); // 0x40b414\n            while (v10 != 0) {\n                int64_t v11 = *(int64_t *)v10; // 0x40b421\n                v5 = v10;\n                v6 = v9;\n                result = a2;\n                if (v11 == a2) {\n                    goto lab_0x40b43c_2;\n                }\n                // 0x40b429\n                v5 = v10;\n                v6 = v9;\n                result = v11;\n                if ((char)v10 != 0) {\n                    goto lab_0x40b43c_2;\n                }\n                v9 = v10;\n                v10 = *(int64_t *)(v9 + 8);\n            }\n            // 0x40b45e\n            return 0;\n        }\n    }\n    // 0x40b473\n    if ((char)a4 == 0) {\n        // 0x40b45e\n        return result2;\n    }\n    int64_t v12 = *(int64_t *)(v1 + 8); // 0x40b478\n    if (v12 == 0) {\n        // 0x40b4c0\n        *v2 = 0;\n        // 0x40b45e\n        return result2;\n    }\n    // 0x40b481\n    __asm_movups(*(int128_t *)v1, __asm_movdqu(*(int128_t *)v12));\n    *(int64_t *)v12 = 0;\n    int64_t * v13 = (int64_t *)(a1 + 72); // 0x40b48f\n    *(int64_t *)(v12 + 8) = *v13;\n    *v13 = v12;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40b4d0",
            "funcStartAddr": "40b4d0",
            "funcEndAddr": "40b54e",
            "decompiledFuncCode": "int64_t function_40b4d0(uint64_t a1) {\n    if (a1 == (int64_t)&g7) {\n        // 0x40b54d\n        return 1;\n    }\n    int128_t v1 = __asm_movss(*(int32_t *)(a1 + 8)); // 0x40b4db\n    __asm_comiss(v1, 0x3dcccccd);\n    if (a1 <= (int64_t)&g7) {\n        // 0x40b53a\n        *(int64_t *)a1 = (int64_t)&g7;\n        return 0;\n    }\n    // 0x40b4e9\n    __asm_comiss_2(__asm_movss(0x3f666666), v1);\n    __asm_comiss(__asm_movss(*(int32_t *)(a1 + 12)), 0x3f8ccccd);\n    int128_t v2 = __asm_movss((int32_t)a1); // 0x40b504\n    __asm_comiss(v2, 0);\n    int128_t v3 = __asm_addss_3(v2, 0x3dcccccd); // 0x40b511\n    int128_t v4 = __asm_movss(*(int32_t *)(a1 + 4)); // 0x40b519\n    __asm_comiss_2(v4, v3);\n    __asm_comiss_2(__asm_movss(0x3f800000), v4);\n    __asm_comiss_2(v1, v3);\n    // 0x40b54d\n    return 1;\n}\n"
        },
        {
            "funcName": "function_40b550",
            "funcStartAddr": "40b550",
            "funcEndAddr": "40b69a",
            "decompiledFuncCode": "int64_t function_40b550(int64_t * a1, uint64_t a2, int32_t a3) {\n    int64_t * v1 = (int64_t *)(a2 + 8); // 0x40b56a\n    uint64_t v2 = *v1; // 0x40b56a\n    if (v2 <= a2) {\n        // 0x40b654\n        return 1;\n    }\n    int64_t v3 = (int64_t)a1;\n    int64_t * v4 = (int64_t *)(v3 + 24);\n    int64_t * v5 = (int64_t *)(v3 + 72);\n    int64_t * v6 = (int64_t *)(a2 + 24);\n    int64_t v7 = v2; // 0x40b550\n    int64_t v8 = a2; // 0x40b550\n    int64_t v9; // 0x40b550\n    int64_t result; // 0x40b550\n    int64_t v10; // 0x40b550\n    while (true) {\n      lab_0x40b586_2:\n        // 0x40b586\n        v10 = v8;\n        int64_t * v11 = (int64_t *)v10; // 0x40b586\n        int64_t v12 = *v11; // 0x40b586\n        v9 = v7;\n        if (v12 == 0) {\n            goto lab_0x40b578;\n        } else {\n            int64_t * v13 = (int64_t *)(v10 + 8); // 0x40b58f\n            int64_t v14 = *v13; // 0x40b58f\n            int64_t v15 = v14; // 0x40b597\n            int64_t v16 = v12; // 0x40b597\n            if (v14 != 0) {\n                while (true) {\n                    int64_t v17 = v15;\n                    int64_t * v18 = (int64_t *)v17; // 0x40b5b4\n                    int64_t v19 = *v18; // 0x40b5b4\n                    int64_t v20 = function_40b380(v3, v19); // 0x40b5bd\n                    int64_t * v21 = (int64_t *)(v17 + 8); // 0x40b5c2\n                    int64_t v22 = *v21; // 0x40b5c2\n                    int64_t * v23 = (int64_t *)v20; // 0x40b5c6\n                    if (*v23 != 0) {\n                        int64_t * v24 = (int64_t *)(v20 + 8); // 0x40b5a0\n                        *v21 = *v24;\n                        *v24 = v17;\n                        if (v22 == 0) {\n                            // break -> 0x40b5ef\n                            break;\n                        }\n                    } else {\n                        // 0x40b5cc\n                        *v23 = v19;\n                        *v4 = *v4 + 1;\n                        *v18 = 0;\n                        *v21 = *v5;\n                        *v5 = v17;\n                        if (v22 == 0) {\n                            // break -> 0x40b5ef\n                            break;\n                        }\n                    }\n                    // 0x40b5b4\n                    v15 = v22;\n                }\n                // 0x40b5ef\n                v16 = *v11;\n            }\n            int64_t v25 = v16;\n            *v13 = 0;\n            if ((char)a3 != 0) {\n                // 0x40b5f3\n                v9 = *v1;\n                goto lab_0x40b578;\n            } else {\n                int64_t v26 = function_40b380(v3, v25); // 0x40b60b\n                int64_t * v27 = (int64_t *)v26; // 0x40b610\n                if (*v27 == 0) {\n                    // 0x40b670\n                    *v27 = v25;\n                    *v4 = *v4 + 1;\n                } else {\n                    int64_t v28 = *v5; // 0x40b619\n                    int64_t * v29; // 0x40b550\n                    int64_t v30; // 0x40b550\n                    if (v28 == 0) {\n                        int64_t * mem = malloc(16); // 0x40b67f\n                        result = 0;\n                        if (mem == NULL) {\n                            // break -> 0x40b654\n                            break;\n                        }\n                        int64_t v31 = (int64_t)mem; // 0x40b67f\n                        v29 = (int64_t *)(v31 + 8);\n                        v30 = v31;\n                    } else {\n                        int64_t * v32 = (int64_t *)(v28 + 8);\n                        *v5 = *v32;\n                        v29 = v32;\n                        v30 = v28;\n                    }\n                    int64_t * v33 = (int64_t *)(v26 + 8); // 0x40b62a\n                    *(int64_t *)v30 = v25;\n                    *v29 = *v33;\n                    *v33 = v30;\n                }\n                // 0x40b639\n                *v11 = 0;\n                int64_t v34 = v10 + 16; // 0x40b641\n                *v6 = *v6 - 1;\n                uint64_t v35 = *v1; // 0x40b64a\n                v7 = v35;\n                v8 = v34;\n                result = 1;\n                if (v35 <= v34) {\n                    // break -> 0x40b654\n                    break;\n                }\n                goto lab_0x40b586_2;\n            }\n        }\n    }\n    // 0x40b654\n    return result;\n  lab_0x40b578:;\n    int64_t v36 = v10 + 16; // 0x40b578\n    v7 = v9;\n    v8 = v36;\n    result = 1;\n    if (v9 <= v36) {\n        return result;\n    }\n    goto lab_0x40b586_2;\n    // 0x40b586\n    goto lab_0x40b586_2;\n}\n"
        },
        {
            "funcName": "function_40b6a0",
            "funcStartAddr": "40b6a0",
            "funcEndAddr": "40b6a5",
            "decompiledFuncCode": "int64_t function_40b6a0(int64_t a1) {\n    // 0x40b6a0\n    return *(int64_t *)(a1 + 16);\n}\n"
        },
        {
            "funcName": "function_40b6b0",
            "funcStartAddr": "40b6b0",
            "funcEndAddr": "40b6b5",
            "decompiledFuncCode": "int64_t function_40b6b0(int64_t a1) {\n    // 0x40b6b0\n    return *(int64_t *)(a1 + 24);\n}\n"
        },
        {
            "funcName": "function_40b6c0",
            "funcStartAddr": "40b6c0",
            "funcEndAddr": "40b6c5",
            "decompiledFuncCode": "int64_t function_40b6c0(int64_t a1) {\n    // 0x40b6c0\n    return *(int64_t *)(a1 + 32);\n}\n"
        },
        {
            "funcName": "function_40b6d0",
            "funcStartAddr": "40b6d0",
            "funcEndAddr": "40b71f",
            "decompiledFuncCode": "int64_t function_40b6d0(uint64_t a1) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x40b6d3\n    int64_t result = 0; // 0x40b6dc\n    if (v1 <= a1) {\n      lab_0x40b71d:\n        // 0x40b71d\n        return result;\n    }\n    int64_t v2 = 0;\n    int64_t v3 = a1;\n    int64_t v4; // 0x40b6e0\n    while (*(int64_t *)v3 == 0) {\n        // 0x40b6e0\n        v4 = v3 + 16;\n        result = v2;\n        if (v4 >= v1) {\n            return result;\n        }\n        v3 = v4;\n    }\n    int64_t v5 = *(int64_t *)(v3 + 8); // 0x40b6ef\n    int64_t v6 = v5; // 0x40b6fb\n    int64_t v7 = 1; // 0x40b6fb\n    int64_t v8; // 0x40b6d0\n    int64_t v9; // 0x40b700\n    int64_t v10; // 0x40b704\n    if (v5 != 0) {\n        v9 = *(int64_t *)(v6 + 8);\n        v10 = 2;\n        v8 = v10;\n        v6 = v9;\n        v7 = v10;\n        while (v9 != 0) {\n            // 0x40b700\n            v9 = *(int64_t *)(v6 + 8);\n            v10 = v8 + 1;\n            v8 = v10;\n            v6 = v9;\n            v7 = v10;\n        }\n    }\n    uint64_t v11 = v7;\n    int64_t result2 = v2 < v11 ? v11 : v2; // 0x40b710\n    int64_t v12 = v3 + 16; // 0x40b714\n    while (v12 < v1) {\n        // 0x40b6e9\n        v2 = result2;\n        v3 = v12;\n        while (*(int64_t *)v3 == 0) {\n            // 0x40b6e0\n            v4 = v3 + 16;\n            result = v2;\n            if (v4 >= v1) {\n                return result;\n            }\n            v3 = v4;\n        }\n        // 0x40b6ef\n        v5 = *(int64_t *)(v3 + 8);\n        v6 = v5;\n        v7 = 1;\n        if (v5 != 0) {\n            v9 = *(int64_t *)(v6 + 8);\n            v10 = 2;\n            v8 = v10;\n            v6 = v9;\n            v7 = v10;\n            while (v9 != 0) {\n                // 0x40b700\n                v9 = *(int64_t *)(v6 + 8);\n                v10 = v8 + 1;\n                v8 = v10;\n                v6 = v9;\n                v7 = v10;\n            }\n        }\n        // 0x40b70d\n        v11 = v7;\n        result2 = v2 < v11 ? v11 : v2;\n        v12 = v3 + 16;\n    }\n    // 0x40b71d\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40b720",
            "funcStartAddr": "40b720",
            "funcEndAddr": "40b787",
            "decompiledFuncCode": "int64_t function_40b720(uint64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x40b723\n    int64_t v2 = a1; // 0x40b72f\n    int64_t v3 = 0; // 0x40b72f\n    int64_t v4 = 0; // 0x40b72f\n    int64_t v5 = 0; // 0x40b72f\n    int64_t v6 = 0; // 0x40b72f\n    int64_t v7; // 0x40b720\n    int64_t v8; // 0x40b720\n    int64_t v9; // 0x40b720\n    if (v1 > a1) {\n        while (true) {\n          lab_0x40b741_2:;\n            int64_t v10 = v4;\n            int64_t v11 = v3;\n            v8 = v2;\n            v9 = v11;\n            v7 = v10;\n            if (*(int64_t *)v8 == 0) {\n                goto lab_0x40b738;\n            } else {\n                int64_t v12 = *(int64_t *)(v8 + 8); // 0x40b747\n                int64_t v13 = v10 + 1; // 0x40b74b\n                int64_t v14 = v11 + 1; // 0x40b74f\n                v9 = v14;\n                v7 = v13;\n                int64_t v15 = v12; // 0x40b756\n                int64_t v16 = v14; // 0x40b756\n                if (v12 == 0) {\n                    goto lab_0x40b738;\n                } else {\n                    int64_t v17 = *(int64_t *)(v15 + 8); // 0x40b760\n                    int64_t v18 = v16 + 1; // 0x40b764\n                    v15 = v17;\n                    v16 = v18;\n                    while (v17 != 0) {\n                        // 0x40b760\n                        v17 = *(int64_t *)(v15 + 8);\n                        v18 = v16 + 1;\n                        v15 = v17;\n                        v16 = v18;\n                    }\n                    int64_t v19 = v8 + 16; // 0x40b76d\n                    v2 = v19;\n                    v3 = v18;\n                    v4 = v13;\n                    v5 = v18;\n                    v6 = v13;\n                    if (v19 >= v1) {\n                        // break -> 0x40b776\n                        break;\n                    }\n                    goto lab_0x40b741_2;\n                }\n            }\n        }\n    }\n  lab_0x40b776:\n    // 0x40b776\n    if (*(int64_t *)(a1 + 24) == v6) {\n        // 0x40b77f\n        return *(int64_t *)(a1 + 32) == v5;\n    }\n    // 0x40b77e\n    return 0;\n  lab_0x40b738:;\n    int64_t v20 = v8 + 16; // 0x40b738\n    v2 = v20;\n    v3 = v9;\n    v4 = v7;\n    v5 = v9;\n    v6 = v7;\n    if (v20 >= v1) {\n        // break -> 0x40b776\n        goto lab_0x40b776;\n    }\n    goto lab_0x40b741_2;\n    // 0x40b741\n    goto lab_0x40b741_2;\n}\n"
        },
        {
            "funcName": "function_40b790",
            "funcStartAddr": "40b790",
            "funcEndAddr": "40b8d8",
            "decompiledFuncCode": "int64_t function_40b790(uint64_t a1, int64_t a2) {\n    // 0x40b790\n    int128_t v1; // 0x40b790\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    uint64_t v4 = *(int64_t *)(a1 + 16); // 0x40b7a3\n    uint64_t v5 = *(int64_t *)(a1 + 24); // 0x40b7a7\n    uint64_t v6 = *(int64_t *)(a1 + 8); // 0x40b7ae\n    if (v6 > a1) {\n        while (true) {\n            int64_t v7 = a1; // 0x40b7c0\n            while (*(int64_t *)v7 == 0) {\n                // 0x40b7c0\n                v7 += 16;\n                if (v7 >= v6) {\n                    // break (via goto) -> 0x40b7fd\n                    goto lab_0x40b7fd;\n                }\n            }\n        }\n    }\n  lab_0x40b7fd:;\n    struct _IO_FILE * v8 = (struct _IO_FILE *)a2; // 0x40b80c\n    __fprintf_chk(v8, 1, \"# entries:         %lu\\n\", (int32_t)*(int64_t *)(a1 + 32));\n    __fprintf_chk(v8, 1, \"# buckets:         %lu\\n\", (int32_t)v4);\n    __asm_pxor(v3, v3);\n    int128_t v9; // 0x40b790\n    int128_t v10; // 0x40b790\n    if (v5 < 0) {\n        int128_t v11 = __asm_cvtsi2sd(v5 / 2 | v5 % 2); // 0x40b8a3\n        int128_t v12 = __asm_mulsd(__asm_addsd(v11, v11), 0x4059000000000000); // 0x40b8ac\n        v9 = v12;\n        v10 = v12;\n        if (v4 >= 0) {\n            goto lab_0x40b843;\n        } else {\n            goto lab_0x40b8b9;\n        }\n    } else {\n        int128_t v13 = __asm_mulsd(__asm_cvtsi2sd(v5), 0x4059000000000000); // 0x40b836\n        v9 = v13;\n        v10 = v13;\n        if (v4 < 0) {\n            goto lab_0x40b8b9;\n        } else {\n            goto lab_0x40b843;\n        }\n    }\n  lab_0x40b843:\n    // 0x40b843\n    __asm_pxor(v2, v2);\n    int128_t v14 = v9; // 0x40b847\n    int128_t v15 = __asm_cvtsi2sd(v4); // 0x40b847\n    goto lab_0x40b84c;\n  lab_0x40b8b9:\n    // 0x40b8b9\n    __asm_pxor(v2, v2);\n    int128_t v16 = __asm_cvtsi2sd(v4 / 2 | v4 % 2); // 0x40b8ca\n    v14 = v10;\n    v15 = __asm_addsd(v16, v16);\n    goto lab_0x40b84c;\n  lab_0x40b84c:\n    // 0x40b84c\n    __fprintf_chk(v8, 1, \"# buckets used:    %lu (%.2f%%)\\n\", (int32_t)v5, (float64_t)(int64_t)__asm_divsd(v14, v15));\n    return __fprintf_chk(v8, 1, \"max bucket length: %lu\\n\", (int32_t)0);\n}\n"
        },
        {
            "funcName": "function_40b8e0",
            "funcStartAddr": "40b8e0",
            "funcEndAddr": "40b933",
            "decompiledFuncCode": "int64_t function_40b8e0(int64_t a1, int64_t * a2) {\n    int64_t result = (int64_t)a2;\n    int64_t v1 = function_40b380(a1, result); // 0x40b8ea\n    int64_t v2 = *(int64_t *)v1; // 0x40b8ef\n    if (v2 == 0) {\n        // 0x40b91d\n        return 0;\n    }\n    // 0x40b903\n    if (v2 == result) {\n        // 0x40b91d\n        return result;\n    }\n    int64_t v3 = v1; // 0x40b914\n    int64_t result2 = v2; // 0x40b912\n    while ((char)v1 == 0) {\n        // 0x40b914\n        v3 += 8;\n        result2 = 0;\n        if (v3 == 0) {\n            // break -> 0x40b91d\n            break;\n        }\n        // 0x40b900\n        result2 = result;\n        if (*(int64_t *)v3 == result) {\n            // break -> 0x40b91d\n            break;\n        }\n        result2 = v2;\n    }\n    // 0x40b91d\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40b940",
            "funcStartAddr": "40b940",
            "funcEndAddr": "40b988",
            "decompiledFuncCode": "int64_t function_40b940(uint64_t a1) {\n    int64_t result = 0; // 0x40b945\n    if (*(int64_t *)(a1 + 32) == 0) {\n        // 0x40b957\n        return result;\n    }\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x40b94e\n    if (v1 <= a1) {\n        // 0x40b957\n        return result;\n    }\n    int64_t v2 = a1; // 0x40b955\n    int64_t v3 = *(int64_t *)v2; // 0x40b969\n    result = v3;\n    while (v3 == 0) {\n        // 0x40b960\n        v2 += 16;\n        result = 0;\n        if (v2 >= v1) {\n            // break -> 0x40b957\n            break;\n        }\n        v3 = *(int64_t *)v2;\n        result = v3;\n    }\n    // 0x40b957\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b990",
            "funcStartAddr": "40b990",
            "funcEndAddr": "40b9fa",
            "decompiledFuncCode": "int64_t function_40b990(int64_t a1, int64_t a2) {\n    int64_t v1 = function_40b380(a1, a2); // 0x40b99c\n    int64_t v2 = v1;\n    int64_t v3 = *(int64_t *)(v2 + 8); // 0x40b9b8\n    while (*(int64_t *)v2 != a2) {\n        // 0x40b9b0\n        if (v3 == 0) {\n            goto lab_0x40b9c6;\n        }\n        v2 = v3;\n        v3 = *(int64_t *)(v2 + 8);\n    }\n    if (v3 != 0) {\n        // 0x40b9f0\n        return *(int64_t *)v3;\n    }\n  lab_0x40b9c6:;\n    int64_t v4 = v1 + 16; // 0x40b9d8\n    int64_t result = 0; // 0x40b9df\n    while (*(int64_t *)(a1 + 8) > v4) {\n        int64_t v5 = *(int64_t *)v4; // 0x40b9d0\n        result = v5;\n        if (v5 != 0) {\n            // break -> 0x40b9e3\n            break;\n        }\n        v4 += 16;\n        result = 0;\n    }\n    // 0x40b9e3\n    return result;\n}\n"
        },
        {
            "funcName": "function_40ba00",
            "funcStartAddr": "40ba00",
            "funcEndAddr": "40ba64",
            "decompiledFuncCode": "int64_t function_40ba00(uint64_t a1, int64_t a2, uint64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x40ba06\n    int64_t result = 0; // 0x40ba0a\n    if (*v1 <= a1) {\n      lab_0x40ba21:\n        // 0x40ba21\n        return result;\n    }\n    int64_t v2 = 0;\n    int64_t v3 = *(int64_t *)a1; // 0x40ba0f\n    int64_t v4 = v2; // 0x40ba15\n    int64_t v5; // 0x40ba00\n    int64_t v6; // 0x40ba00\n    int64_t v7; // 0x40ba48\n    int64_t v8; // 0x40ba51\n    int64_t v9; // 0x40ba31\n    int64_t v10; // 0x40ba35\n    if (v3 != 0) {\n        // 0x40ba28\n        if (v2 >= a3) {\n            // break -> 0x40ba21\n            break;\n        }\n        // 0x40ba2d\n        *(int64_t *)(8 * v2 + a2) = v3;\n        v9 = *(int64_t *)(a1 + 8);\n        v10 = v2 + 1;\n        v4 = v10;\n        v6 = v10;\n        v5 = v9;\n        if (v9 != 0) {\n            result = a3;\n            if (v6 == a3) {\n                return result;\n            }\n            // 0x40ba45\n            v7 = v6 + 1;\n            *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n            v8 = *(int64_t *)(v5 + 8);\n            v4 = v7;\n            v6 = v7;\n            v5 = v8;\n            while (v8 != 0) {\n                // 0x40ba40\n                result = a3;\n                if (v6 == a3) {\n                    return result;\n                }\n                // 0x40ba45\n                v7 = v6 + 1;\n                *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n                v8 = *(int64_t *)(v5 + 8);\n                v4 = v7;\n                v6 = v7;\n                v5 = v8;\n            }\n        }\n    }\n    int64_t v11 = v4;\n    int64_t v12 = a1 + 16; // 0x40ba17\n    result = v11;\n    while (*v1 > v12) {\n        // 0x40ba0f\n        v2 = v11;\n        int64_t v13 = v12;\n        v3 = *(int64_t *)v13;\n        v4 = v2;\n        if (v3 != 0) {\n            // 0x40ba28\n            result = v2;\n            if (v2 >= a3) {\n                // break -> 0x40ba21\n                break;\n            }\n            // 0x40ba2d\n            *(int64_t *)(8 * v2 + a2) = v3;\n            v9 = *(int64_t *)(v13 + 8);\n            v10 = v2 + 1;\n            v4 = v10;\n            v6 = v10;\n            v5 = v9;\n            if (v9 != 0) {\n                result = a3;\n                if (v6 == a3) {\n                    return result;\n                }\n                // 0x40ba45\n                v7 = v6 + 1;\n                *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n                v8 = *(int64_t *)(v5 + 8);\n                v4 = v7;\n                v6 = v7;\n                v5 = v8;\n                while (v8 != 0) {\n                    // 0x40ba40\n                    result = a3;\n                    if (v6 == a3) {\n                        return result;\n                    }\n                    // 0x40ba45\n                    v7 = v6 + 1;\n                    *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n                    v8 = *(int64_t *)(v5 + 8);\n                    v4 = v7;\n                    v6 = v7;\n                    v5 = v8;\n                }\n            }\n        }\n        // 0x40ba17\n        v11 = v4;\n        v12 = v13 + 16;\n        result = v11;\n    }\n    // 0x40ba21\n    return result;\n}\n"
        },
        {
            "funcName": "function_40ba70",
            "funcStartAddr": "40ba70",
            "funcEndAddr": "40bae8",
            "decompiledFuncCode": "int64_t function_40ba70(uint64_t a1, int64_t a2, int64_t a3) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x40ba81\n    int64_t result = 0; // 0x40ba85\n    if (v1 <= a1) {\n      lab_0x40baa4:\n        // 0x40baa4\n        return result;\n    }\n    int64_t v2 = a1; // 0x40ba9a\n    int64_t v3 = 0;\n    int64_t v4 = v3; // 0x40ba98\n    int64_t v5 = v2; // 0x40ba98\n    int64_t v6 = v3; // 0x40ba98\n    int64_t v7; // 0x40ba70\n    int64_t v8; // 0x40bac8\n    int64_t v9; // 0x40bacc\n    if (*(int64_t *)v2 != 0) {\n        result = v3;\n        if ((char)v7 == 0) {\n            return result;\n        }\n        // 0x40bac8\n        v8 = *(int64_t *)(v5 + 8);\n        v9 = v6 + 1;\n        v4 = v9;\n        v5 = v8;\n        v6 = v9;\n        while (v8 != 0) {\n            // 0x40bad8\n            result = v3;\n            if ((char)v7 == 0) {\n                return result;\n            }\n            // 0x40bac8\n            v8 = *(int64_t *)(v5 + 8);\n            v9 = v6 + 1;\n            v4 = v9;\n            v5 = v8;\n            v6 = v9;\n        }\n    }\n    int64_t result2 = v4;\n    v2 += 16;\n    while (v1 > v2) {\n        // 0x40ba92\n        v3 = result2;\n        v4 = v3;\n        v5 = v2;\n        v6 = v3;\n        if (*(int64_t *)v2 != 0) {\n            result = v3;\n            if ((char)v7 == 0) {\n                return result;\n            }\n            // 0x40bac8\n            v8 = *(int64_t *)(v5 + 8);\n            v9 = v6 + 1;\n            v4 = v9;\n            v5 = v8;\n            v6 = v9;\n            while (v8 != 0) {\n                // 0x40bad8\n                result = v3;\n                if ((char)v7 == 0) {\n                    return result;\n                }\n                // 0x40bac8\n                v8 = *(int64_t *)(v5 + 8);\n                v9 = v6 + 1;\n                v4 = v9;\n                v5 = v8;\n                v6 = v9;\n            }\n        }\n        // 0x40ba9a\n        result2 = v4;\n        v2 += 16;\n    }\n    // 0x40baa4\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40baf0",
            "funcStartAddr": "40baf0",
            "funcEndAddr": "40bb21",
            "decompiledFuncCode": "int64_t function_40baf0(int64_t a1, uint64_t a2, int64_t a3) {\n    char v1 = a1;\n    int64_t v2 = a1; // 0x40baf7\n    if (v1 == 0) {\n        // 0x40bb1d\n        return 0;\n    }\n    int64_t result = 0; // 0x40baf7\n    v2++;\n    char v3 = *(char *)v2; // 0x40bb13\n    result = (31 * result + (int64_t)v1) % a2;\n    while (v3 != 0) {\n        unsigned char v4 = v3;\n        v2++;\n        v3 = *(char *)v2;\n        result = (31 * result + (int64_t)v4) % a2;\n    }\n    // 0x40bb1d\n    return result;\n}\n"
        },
        {
            "funcName": "function_40bb30",
            "funcStartAddr": "40bb30",
            "funcEndAddr": "40bb50",
            "decompiledFuncCode": "int64_t function_40bb30(int64_t a1) {\n    // 0x40bb30\n    *(char *)(a1 + 16) = 0;\n    *(int64_t *)a1 = 0x3f80000000000000;\n    *(int64_t *)(a1 + 8) = 0x3fb4fdf43f4ccccd;\n    return 0x3fb4fdf43f4ccccd;\n}\n"
        },
        {
            "funcName": "function_40bb50",
            "funcStartAddr": "40bb50",
            "funcEndAddr": "40bcda",
            "decompiledFuncCode": "int64_t function_40bb50(uint64_t a1, int32_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    // 0x40bb50\n    int128_t v1; // 0x40bb50\n    int128_t v2 = v1;\n    int64_t * mem = malloc(80); // 0x40bb8a\n    int64_t result = (int64_t)mem; // 0x40bb8a\n    if (mem == NULL) {\n        // 0x40bc3a\n        return result;\n    }\n    int64_t v3 = result + 40; // 0x40bb9b\n    int64_t * v4 = (int64_t *)v3;\n    int128_t v5; // 0x40bb50\n    int128_t v6; // 0x40bb50\n    if (a2 == 0) {\n        // 0x40bc50\n        *v4 = (int64_t)&g7;\n        int64_t v7 = function_40b4d0(v3); // 0x40bc58\n        int128_t v8 = __asm_movss(0x3f4ccccd); // 0x40bc5d\n        if ((char)v7 == 0) {\n            // 0x40bc30\n            free(mem);\n            // 0x40bc3a\n            return 0;\n        }\n        // 0x40bc69\n        v5 = v8;\n        v6 = v8;\n        if (a1 < 0) {\n            goto lab_0x40bcb3;\n        } else {\n            goto lab_0x40bc6e;\n        }\n    } else {\n        int64_t v9 = a2;\n        *v4 = v9;\n        if ((char)function_40b4d0(v3) == 0) {\n            // 0x40bc30\n            free(mem);\n            // 0x40bc3a\n            return 0;\n        }\n        // 0x40bbb5\n        if (*(char *)(v9 + 16) != 0) {\n            uint64_t nmemb = function_40b2c0(a1); // 0x40bbc3\n            if (nmemb % 0x1000000000000001 != 0) {\n                // 0x40bc30\n                free(mem);\n            }\n            if (nmemb >= 0x2000000000000000) {\n                // 0x40bc30\n                free(mem);\n                // 0x40bc3a\n                return 0;\n            }\n            // 0x40bbe1\n            *(int64_t *)(result + 16) = nmemb;\n            if (nmemb == 0) {\n                // 0x40bc30\n                free(mem);\n                // 0x40bc3a\n                return 0;\n            }\n            int64_t * mem2 = calloc((int32_t)nmemb, 16); // 0x40bbf2\n            int64_t v10 = (int64_t)mem2; // 0x40bbf2\n            *mem = v10;\n            if (mem2 == NULL) {\n                // 0x40bc30\n                free(mem);\n                // 0x40bc3a\n                return 0;\n            }\n            // 0x40bbff\n            *(int64_t *)(result + 24) = 0;\n            *(int64_t *)(result + 32) = 0;\n            *(int64_t *)(result + 8) = 16 * nmemb + v10;\n            *(int64_t *)(result + 48) = a3 == 0 ? 0x40b360 : a3;\n            *(int64_t *)(result + 56) = a4 == 0 ? 0x40b370 : a4;\n            *(int64_t *)(result + 64) = a5;\n            *(int64_t *)(result + 72) = 0;\n            // 0x40bc3a\n            return result;\n        }\n        int128_t v11 = __asm_movss(*(int32_t *)(v9 + 8)); // 0x40bca8\n        v5 = v11;\n        v6 = v11;\n        if (a1 >= 0) {\n            goto lab_0x40bc6e;\n        } else {\n            goto lab_0x40bcb3;\n        }\n    }\n  lab_0x40bcb3:\n    // 0x40bcb3\n    __asm_pxor(v2, v2);\n    int128_t v12 = __asm_cvtsi2ss(a1 / 2 | a1 % 2); // 0x40bcc3\n    int128_t v13 = v6; // 0x40bccc\n    int128_t v14 = __asm_addss(v12, v12); // 0x40bccc\n    goto lab_0x40bc77;\n  lab_0x40bc6e:\n    // 0x40bc6e\n    __asm_pxor(v2, v2);\n    v13 = v5;\n    v14 = __asm_cvtsi2ss(a1);\n    goto lab_0x40bc77;\n  lab_0x40bc77:\n    // 0x40bc77\n    __asm_comiss(__asm_divss(v14, v13), 0x5f800000);\n    // 0x40bc30\n    free(mem);\n    // 0x40bc3a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40bce0",
            "funcStartAddr": "40bce0",
            "funcEndAddr": "40bd88",
            "decompiledFuncCode": "int64_t function_40bce0(uint64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x40bcea\n    uint64_t v2 = *v1; // 0x40bcea\n    int64_t result; // 0x40bce0\n    if (v2 <= a1) {\n      lab_0x40bd73:\n        // 0x40bd73\n        *(int64_t *)(a1 + 24) = 0;\n        *(int64_t *)(a1 + 32) = 0;\n        return result;\n    }\n    int64_t * v3 = (int64_t *)(a1 + 64);\n    int64_t * v4 = (int64_t *)(a1 + 72);\n    int64_t v5 = a1;\n    int64_t * v6 = (int64_t *)v5;\n    int64_t v7; // 0x40bcf8\n    while (*v6 == 0) {\n        // 0x40bcf8\n        v7 = v5 + 16;\n        int64_t v8; // 0x40bce0\n        result = v8;\n        if (v2 <= v7) {\n            // break (via goto) -> 0x40bd73\n            goto lab_0x40bd73;\n        }\n        v5 = v7;\n        v6 = (int64_t *)v5;\n    }\n    int64_t * v9 = (int64_t *)(v5 + 8); // 0x40bd09\n    int64_t v10 = *v9; // 0x40bd09\n    int64_t v11 = *v3; // 0x40bd0e\n    int64_t v12 = v11; // 0x40bd15\n    int64_t v13 = v10; // 0x40bd15\n    int64_t result2 = v11; // 0x40bd15\n    int64_t * v14; // 0x40bd2e\n    int64_t v15; // 0x40bd2e\n    int64_t v16; // 0x40bd2a\n    if (v10 != 0) {\n        v16 = 0;\n        if (v12 != 0) {\n            // 0x40bd25\n            v16 = *v3;\n        }\n        // 0x40bd2e\n        v14 = (int64_t *)(v13 + 8);\n        v15 = *v14;\n        *(int64_t *)v13 = 0;\n        *v14 = *v4;\n        *v4 = v13;\n        v12 = v16;\n        v13 = v15;\n        result2 = v16;\n        while (v15 != 0) {\n            // 0x40bd20\n            v16 = 0;\n            if (v12 != 0) {\n                // 0x40bd25\n                v16 = *v3;\n            }\n            // 0x40bd2e\n            v14 = (int64_t *)(v13 + 8);\n            v15 = *v14;\n            *(int64_t *)v13 = 0;\n            *v14 = *v4;\n            *v4 = v13;\n            v12 = v16;\n            v13 = v15;\n            result2 = v16;\n        }\n    }\n    // 0x40bd4d\n    *v6 = 0;\n    int64_t v17 = v5 + 16; // 0x40bd60\n    *v9 = 0;\n    uint64_t v18 = *v1; // 0x40bd6d\n    while (v18 > v17) {\n        int64_t v19 = result2;\n        uint64_t v20 = v18; // 0x40bcfc\n        v5 = v17;\n        v6 = (int64_t *)v5;\n        while (*v6 == 0) {\n            // 0x40bcf8\n            v7 = v5 + 16;\n            result = v19;\n            if (v20 <= v7) {\n                // break (via goto) -> 0x40bd73\n                goto lab_0x40bd73;\n            }\n            v5 = v7;\n            v6 = (int64_t *)v5;\n        }\n        // 0x40bd09\n        v9 = (int64_t *)(v5 + 8);\n        v10 = *v9;\n        v11 = *v3;\n        v12 = v11;\n        v13 = v10;\n        result2 = v11;\n        if (v10 != 0) {\n            v16 = 0;\n            if (v12 != 0) {\n                // 0x40bd25\n                v16 = *v3;\n            }\n            // 0x40bd2e\n            v14 = (int64_t *)(v13 + 8);\n            v15 = *v14;\n            *(int64_t *)v13 = 0;\n            *v14 = *v4;\n            *v4 = v13;\n            v12 = v16;\n            v13 = v15;\n            result2 = v16;\n            while (v15 != 0) {\n                // 0x40bd20\n                v16 = 0;\n                if (v12 != 0) {\n                    // 0x40bd25\n                    v16 = *v3;\n                }\n                // 0x40bd2e\n                v14 = (int64_t *)(v13 + 8);\n                v15 = *v14;\n                *(int64_t *)v13 = 0;\n                *v14 = *v4;\n                *v4 = v13;\n                v12 = v16;\n                v13 = v15;\n                result2 = v16;\n            }\n        }\n        // 0x40bd4d\n        *v6 = 0;\n        v17 = v5 + 16;\n        *v9 = 0;\n        v18 = *v1;\n    }\n    // 0x40bd73\n    *(int64_t *)(a1 + 24) = 0;\n    *(int64_t *)(a1 + 32) = 0;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40bd90",
            "funcStartAddr": "40bd90",
            "funcEndAddr": "40be66",
            "decompiledFuncCode": "int64_t function_40bd90(int64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x40bd9f\n    uint64_t v2 = *v1; // 0x40bd9f\n    int64_t v3 = a1; // 0x40bda3\n    if (*(int64_t *)(a1 + 64) == 0) {\n        goto lab_0x40bdf3;\n    } else {\n        // 0x40bda5\n        v3 = a1;\n        if (*(int64_t *)(a1 + 32) == 0) {\n            goto lab_0x40bdf3;\n        } else {\n            // 0x40bdac\n            if (v2 > a1) {\n                int64_t v4 = a1;\n                int64_t v5 = *(int64_t *)v4; // 0x40bdc1\n                int64_t v6; // 0x40bdb8\n                while (v5 == 0) {\n                    // 0x40bdb8\n                    v6 = v4 + 16;\n                    v3 = 0;\n                    if (v2 <= v6) {\n                        // break (via goto) -> 0x40bdf3\n                        goto lab_0x40bdf3;\n                    }\n                    v4 = v6;\n                    v5 = *(int64_t *)v4;\n                }\n                int64_t v7 = *(int64_t *)(v4 + 8); // 0x40bdd8\n                int64_t v8 = v7; // 0x40bddf\n                int64_t v9 = v5; // 0x40bddf\n                int64_t v10; // 0x40bd90\n                int64_t v11; // 0x40bdd8\n                if (v7 != 0) {\n                    v10 = v8;\n                    v11 = *(int64_t *)(v10 + 8);\n                    while (v11 != 0) {\n                        // 0x40bdd0\n                        v10 = v11;\n                        v11 = *(int64_t *)(v10 + 8);\n                    }\n                    // 0x40bdd3\n                    v9 = *(int64_t *)v10;\n                }\n                int64_t v12 = v4 + 16; // 0x40bde6\n                v3 = v9;\n                while (v2 > v12) {\n                    // 0x40bdc1\n                    v4 = v12;\n                    v5 = *(int64_t *)v4;\n                    while (v5 == 0) {\n                        // 0x40bdb8\n                        v6 = v4 + 16;\n                        v3 = 0;\n                        if (v2 <= v6) {\n                            // break (via goto) -> 0x40bdf3\n                            goto lab_0x40bdf3;\n                        }\n                        v4 = v6;\n                        v5 = *(int64_t *)v4;\n                    }\n                    // 0x40bdd3\n                    v7 = *(int64_t *)(v4 + 8);\n                    v8 = v7;\n                    v9 = v5;\n                    if (v7 != 0) {\n                        v10 = v8;\n                        v11 = *(int64_t *)(v10 + 8);\n                        while (v11 != 0) {\n                            // 0x40bdd0\n                            v10 = v11;\n                            v11 = *(int64_t *)(v10 + 8);\n                        }\n                        // 0x40bdd3\n                        v9 = *(int64_t *)v10;\n                    }\n                    // 0x40bde1\n                    v12 = v4 + 16;\n                    v3 = v9;\n                }\n                goto lab_0x40bdf3;\n            } else {\n                goto lab_0x40be2c;\n            }\n        }\n    }\n  lab_0x40bdf3:\n    // 0x40bdf3\n    if (v3 < v2) {\n        int64_t v13 = *(int64_t *)(v3 + 8); // 0x40be00\n        int64_t v14 = v13; // 0x40be07\n        int64_t v15 = v2; // 0x40be07\n        int64_t v16; // 0x40be10\n        if (v13 != 0) {\n            v16 = *(int64_t *)(v14 + 8);\n            free((int64_t *)v14);\n            v14 = v16;\n            while (v16 != 0) {\n                // 0x40be10\n                v16 = *(int64_t *)(v14 + 8);\n                free((int64_t *)v14);\n                v14 = v16;\n            }\n            // 0x40be21\n            v15 = *v1;\n        }\n        int64_t v17 = v3 + 16; // 0x40be21\n        int64_t v18 = v15; // 0x40be2a\n        int64_t v19 = v17; // 0x40be2a\n        while (v15 > v17) {\n            // 0x40be00\n            v13 = *(int64_t *)(v19 + 8);\n            v14 = v13;\n            v15 = v18;\n            if (v13 != 0) {\n                v16 = *(int64_t *)(v14 + 8);\n                free((int64_t *)v14);\n                v14 = v16;\n                while (v16 != 0) {\n                    // 0x40be10\n                    v16 = *(int64_t *)(v14 + 8);\n                    free((int64_t *)v14);\n                    v14 = v16;\n                }\n                // 0x40be21\n                v15 = *v1;\n            }\n            // 0x40be21\n            v17 = v19 + 16;\n            v18 = v15;\n            v19 = v17;\n        }\n    }\n    goto lab_0x40be2c;\n  lab_0x40be2c:;\n    int64_t v20 = *(int64_t *)(a1 + 72); // 0x40be2c\n    if (v20 == 0) {\n        // 0x40be51\n        free(NULL);\n        free((int64_t *)a1);\n        return &g90;\n    }\n    int64_t v21 = *(int64_t *)(v20 + 8); // 0x40be40\n    free((int64_t *)v20);\n    int64_t v22 = v21; // 0x40be4f\n    while (v21 != 0) {\n        // 0x40be40\n        v21 = *(int64_t *)(v22 + 8);\n        free((int64_t *)v22);\n        v22 = v21;\n    }\n    // 0x40be51\n    free((int64_t *)v21);\n    free((int64_t *)a1);\n    return &g90;\n}\n"
        },
        {
            "funcName": "function_40be70",
            "funcStartAddr": "40be70",
            "funcEndAddr": "40c06a",
            "decompiledFuncCode": "int64_t function_40be70(int64_t a1, uint64_t a2) {\n    // 0x40be70\n    int128_t v1; // 0x40be70\n    int128_t v2 = v1;\n    int64_t v3 = *(int64_t *)(a1 + 40); // 0x40be7b\n    if (*(char *)(v3 + 16) == 0) {\n        int128_t v4; // 0x40be70\n        if (a2 < 0) {\n            // 0x40bff0\n            __asm_pxor(v2, v2);\n            int128_t v5 = __asm_cvtsi2ss(a2 / 2 | a2 % 2); // 0x40c000\n            v4 = __asm_addss(v5, v5);\n        } else {\n            // 0x40be90\n            __asm_pxor(v2, v2);\n            v4 = __asm_cvtsi2ss(a2);\n        }\n        // 0x40be99\n        __asm_comiss(__asm_divss_6(v4, *(int32_t *)(v3 + 8)), 0x5f800000);\n        // 0x40bfe2\n        return 0;\n    }\n    uint64_t nmemb = function_40b2c0(a2); // 0x40bed3\n    if (nmemb == 0 || nmemb >= 0x2000000000000000 || nmemb % 0x1000000000000001 != 0) {\n        // 0x40bfe2\n        return 0;\n    }\n    int64_t * v6 = (int64_t *)(a1 + 16); // 0x40bf0b\n    if (*v6 == nmemb) {\n        // 0x40bfe2\n        return 1;\n    }\n    int64_t * mem = calloc((int32_t)nmemb, 16); // 0x40bf1d\n    int64_t v7 = (int64_t)mem; // 0x40bf1d\n    int64_t v8 = v7; // bp-104, 0x40bf22\n    if (mem == NULL) {\n        // 0x40bfe2\n        return 0;\n    }\n    int64_t * v9 = (int64_t *)(a1 + 72); // 0x40bf7a\n    int64_t v10 = *v9; // 0x40bf7a\n    int64_t v11 = function_40b550(&v8, a1, 0); // 0x40bf83\n    int64_t result = v11 & 0xffffffff; // 0x40bf88\n    if ((char)v11 == 0) {\n        int64_t v12 = &v8; // 0x40bf44\n        *v9 = v10;\n        int64_t * v13 = (int64_t *)a1; // 0x40bfa6\n        function_40b550(v13, v12, 1);\n        function_40b550(v13, v12, 0);\n        free((int64_t *)v8);\n        return result;\n    }\n    // 0x40c030\n    free(&v8);\n    *(int64_t *)a1 = v8;\n    *(int64_t *)(a1 + 8) = 16 * nmemb + v7;\n    *v6 = nmemb;\n    *(int64_t *)(a1 + 24) = 0;\n    *v9 = v10;\n    // 0x40bfe2\n    return result;\n}\n"
        },
        {
            "funcName": "function_40c070",
            "funcStartAddr": "40c070",
            "funcEndAddr": "40c2e4",
            "decompiledFuncCode": "int64_t function_40c070(int64_t a1, int64_t a2, int64_t * a3, int64_t a4) {\n    // 0x40c070\n    int128_t v1; // 0x40c070\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    int64_t v4; // bp-32, 0x40c070\n    int64_t v5 = function_40b3b0(a1, a2, &v4, 0); // 0x40c091\n    if (v5 != 0) {\n        // 0x40c09e\n        if (a3 != NULL) {\n            // 0x40c0a5\n            *a3 = v5;\n        }\n        // 0x40c0a9\n        return 0;\n    }\n    int64_t * v6 = (int64_t *)(a1 + 24); // 0x40c0b8\n    uint64_t v7 = *v6; // 0x40c0b8\n    int64_t v8; // 0x40c070\n    int64_t v9; // 0x40c070\n    int64_t v10; // 0x40c070\n    int128_t v11; // 0x40c070\n    int128_t v12; // 0x40c070\n    int64_t v13; // 0x40c070\n    if (v7 < 0) {\n        // 0x40c140\n        __asm_pxor(v2, v2);\n        int64_t v14 = *(int64_t *)(a1 + 16); // 0x40c150\n        int128_t v15 = __asm_cvtsi2ss(v7 / 2 | v7 % 2); // 0x40c154\n        int64_t v16 = *(int64_t *)(a1 + 40); // 0x40c159\n        int128_t v17 = __asm_addss(v15, v15); // 0x40c15d\n        v13 = v14;\n        v11 = v17;\n        v9 = v16;\n        v12 = v17;\n        v8 = v14;\n        v10 = v16;\n        if (v14 >= 0) {\n            goto lab_0x40c0db;\n        } else {\n            goto lab_0x40c16a;\n        }\n    } else {\n        // 0x40c0c1\n        __asm_pxor(v2, v2);\n        int64_t v18 = *(int64_t *)(a1 + 40); // 0x40c0c5\n        int128_t v19 = __asm_cvtsi2ss(v7); // 0x40c0c9\n        int64_t v20 = *(int64_t *)(a1 + 16); // 0x40c0ce\n        v13 = v20;\n        v11 = v19;\n        v9 = v18;\n        v12 = v19;\n        v8 = v20;\n        v10 = v18;\n        if (v20 < 0) {\n            goto lab_0x40c16a;\n        } else {\n            goto lab_0x40c0db;\n        }\n    }\n  lab_0x40c0db:\n    // 0x40c0db\n    __asm_pxor(v3, v3);\n    int128_t v21 = __asm_mulss(__asm_cvtsi2ss(v13), *(int32_t *)(v9 + 8)); // 0x40c0e4\n    __asm_comiss_2(v11, v21);\n    int128_t v22 = v21; // 0x40c0ec\n    int128_t v23 = v11; // 0x40c0ec\n    if (v13 == 0) {\n        goto lab_0x40c0f2;\n    } else {\n        goto lab_0x40c191;\n    }\n  lab_0x40c16a:;\n    uint64_t v24 = v8;\n    __asm_pxor(v3, v3);\n    int64_t v25 = v24 / 2 | v24 % 2; // 0x40c177\n    int128_t v26 = __asm_cvtsi2ss(v25); // 0x40c17a\n    int128_t v27 = __asm_mulss(__asm_addss(v26, v26), *(int32_t *)(v10 + 8)); // 0x40c183\n    __asm_comiss_2(v12, v27);\n    v22 = v27;\n    v23 = v12;\n    if (v25 == 0) {\n        goto lab_0x40c0f2;\n    } else {\n        goto lab_0x40c191;\n    }\n  lab_0x40c0f2:;\n    int64_t * v28 = (int64_t *)v4; // 0x40c0f7\n    if (*v28 == 0) {\n        // 0x40c208\n        *v28 = a2;\n        int64_t * v29 = (int64_t *)(a1 + 32); // 0x40c211\n        *v29 = *v29 + 1;\n        *v6 = *v6 + 1;\n        return 1;\n    }\n    int64_t * v30 = (int64_t *)(a1 + 72); // 0x40c102\n    int64_t v31 = *v30; // 0x40c102\n    int64_t * v32; // 0x40c070\n    int64_t v33; // 0x40c070\n    if (v31 == 0) {\n        int64_t * mem = malloc(16); // 0x40c22d\n        if (mem == NULL) {\n            // 0x40c0a9\n            return 0xffffffff;\n        }\n        int64_t v34 = (int64_t)mem; // 0x40c22d\n        v32 = (int64_t *)(v34 + 8);\n        v33 = v34;\n    } else {\n        int64_t * v35 = (int64_t *)(v31 + 8);\n        *v30 = *v35;\n        v32 = v35;\n        v33 = v31;\n    }\n    int64_t * v36 = (int64_t *)(v4 + 8); // 0x40c117\n    *(int64_t *)v33 = a2;\n    *v32 = *v36;\n    *v36 = v33;\n    int64_t * v37 = (int64_t *)(a1 + 32); // 0x40c12d\n    *v37 = *v37 + 1;\n    return 1;\n  lab_0x40c191:;\n    int128_t v38 = v23;\n    int128_t v39 = v22;\n    int64_t v40 = a1 + 40; // 0x40c191\n    function_40b4d0(v40);\n    int64_t v41 = *(int64_t *)v40; // 0x40c19a\n    uint64_t v42 = *(int64_t *)(a1 + 16); // 0x40c19e\n    int128_t v43 = __asm_movss(*(int32_t *)(v41 + 8)); // 0x40c1a2\n    int128_t v44; // 0x40c070\n    if (v42 < 0) {\n        // 0x40c260\n        __asm_pxor(v39, v39);\n        int128_t v45 = __asm_cvtsi2ss(v42 / 2 | v42 % 2); // 0x40c270\n        v44 = __asm_addss(v45, v45);\n    } else {\n        // 0x40c1b0\n        __asm_pxor(v39, v39);\n        v44 = __asm_cvtsi2ss(v42);\n    }\n    uint64_t v46 = *v6; // 0x40c1b9\n    int128_t v47; // 0x40c070\n    int64_t v48; // 0x40c070\n    if (v46 < 0) {\n        // 0x40c240\n        __asm_pxor(v38, v38);\n        int64_t v49 = v46 / 2 | v46 % 2; // 0x40c24d\n        int128_t v50 = __asm_cvtsi2ss(v49); // 0x40c250\n        v48 = v49;\n        v47 = __asm_addss(v50, v50);\n    } else {\n        // 0x40c1c2\n        __asm_pxor(v38, v38);\n        int128_t v51 = __asm_cvtsi2ss(v46); // 0x40c1c6\n        v48 = v46;\n        v47 = v51;\n    }\n    // 0x40c1cb\n    __asm_comiss_2(v47, __asm_mulss_5(__asm_movaps_4(v43), v44));\n    if (v48 != 0) {\n        int128_t v52 = __asm_mulss(v44, *(int32_t *)(v41 + 12)); // 0x40c1db\n        int128_t v53 = v52; // 0x40c1e4\n        if (*(char *)(v41 + 16) == 0) {\n            // 0x40c280\n            v53 = __asm_mulss_5(v52, v43);\n        }\n        // 0x40c1ea\n        __asm_comiss(v53, 0x5f800000);\n        // 0x40c0a9\n        return 0xffffffff;\n    }\n    goto lab_0x40c0f2;\n}\n"
        },
        {
            "funcName": "function_40c2f0",
            "funcStartAddr": "40c2f0",
            "funcEndAddr": "40c32b",
            "decompiledFuncCode": "int64_t function_40c2f0(int64_t a1, int64_t a2) {\n    // 0x40c2f0\n    int64_t v1; // bp-16, 0x40c2f0\n    int64_t v2; // 0x40c2f0\n    int32_t v3 = function_40c070(a1, a2, &v1, v2); // 0x40c302\n    if (v3 == -1) {\n        // 0x40c310\n        return 0;\n    }\n    // 0x40c307\n    return v3 != 0 ? a2 : v1;\n}\n"
        },
        {
            "funcName": "function_40c330",
            "funcStartAddr": "40c330",
            "funcEndAddr": "40c507",
            "decompiledFuncCode": "int64_t function_40c330(int64_t a1) {\n    // 0x40c330\n    int128_t v1; // 0x40c330\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    int64_t v4; // bp-32, 0x40c330\n    int64_t v5; // 0x40c330\n    int64_t result = function_40b3b0(a1, v5, &v4, 1); // 0x40c345\n    if (result == 0) {\n        // 0x40c362\n        return result;\n    }\n    int64_t * v6 = (int64_t *)(a1 + 32); // 0x40c357\n    *v6 = *v6 - 1;\n    if (*(int64_t *)v4 != 0) {\n        // 0x40c362\n        return result;\n    }\n    int64_t * v7 = (int64_t *)(a1 + 24); // 0x40c370\n    uint64_t v8 = *v7 - 1; // 0x40c374\n    *v7 = v8;\n    int64_t v9; // 0x40c330\n    int64_t v10; // 0x40c330\n    int64_t v11; // 0x40c330\n    int128_t v12; // 0x40c330\n    int128_t v13; // 0x40c330\n    int64_t v14; // 0x40c330\n    if (v8 < 0) {\n        // 0x40c460\n        __asm_pxor(v3, v3);\n        int64_t v15 = *(int64_t *)(a1 + 16); // 0x40c470\n        int128_t v16 = __asm_cvtsi2ss(v8 / 2 | v8 % 2); // 0x40c474\n        int64_t v17 = *(int64_t *)(a1 + 40); // 0x40c479\n        int128_t v18 = __asm_addss(v16, v16); // 0x40c47d\n        v14 = v15;\n        v12 = v18;\n        v10 = v17;\n        v13 = v18;\n        v9 = v15;\n        v11 = v17;\n        if (v15 >= 0) {\n            goto lab_0x40c39c;\n        } else {\n            goto lab_0x40c48a;\n        }\n    } else {\n        // 0x40c382\n        __asm_pxor(v3, v3);\n        int64_t v19 = *(int64_t *)(a1 + 40); // 0x40c386\n        int128_t v20 = __asm_cvtsi2ss(v8); // 0x40c38a\n        int64_t v21 = *(int64_t *)(a1 + 16); // 0x40c38f\n        v14 = v21;\n        v12 = v20;\n        v10 = v19;\n        v13 = v20;\n        v9 = v21;\n        v11 = v19;\n        if (v21 < 0) {\n            goto lab_0x40c48a;\n        } else {\n            goto lab_0x40c39c;\n        }\n    }\n  lab_0x40c39c:\n    // 0x40c39c\n    __asm_pxor(v2, v2);\n    int128_t v22 = __asm_cvtsi2ss(v14); // 0x40c3a0\n    int64_t v23 = v14; // 0x40c3a0\n    int128_t v24 = v12; // 0x40c3a0\n    int64_t v25 = v10; // 0x40c3a0\n    int128_t v26 = v22; // 0x40c3a0\n    goto lab_0x40c3a5;\n  lab_0x40c48a:;\n    uint64_t v47 = v9;\n    __asm_pxor(v2, v2);\n    int64_t v48 = v47 / 2 | v47 % 2; // 0x40c497\n    int128_t v49 = __asm_cvtsi2ss(v48); // 0x40c49a\n    v23 = v48;\n    v24 = v13;\n    v25 = v11;\n    v26 = __asm_addss(v49, v49);\n    goto lab_0x40c3a5;\n  lab_0x40c3a5:;\n    int128_t v27 = v24;\n    int128_t v28 = __asm_mulss(v26, *(int32_t *)v25); // 0x40c3a5\n    __asm_comiss_2(v28, v27);\n    if (v23 == 0) {\n        // 0x40c362\n        return result;\n    }\n    int64_t v29 = a1 + 40; // 0x40c3ae\n    function_40b4d0(v29);\n    uint64_t v30 = *(int64_t *)(a1 + 16); // 0x40c3b7\n    int64_t v31 = *(int64_t *)v29; // 0x40c3bb\n    int128_t v32; // 0x40c330\n    if (v30 < 0) {\n        // 0x40c4d0\n        __asm_pxor(v27, v27);\n        int128_t v33 = __asm_cvtsi2ss(v30 / 2 | v30 % 2); // 0x40c4e0\n        v32 = __asm_addss(v33, v33);\n    } else {\n        // 0x40c3c8\n        __asm_pxor(v27, v27);\n        v32 = __asm_cvtsi2ss(v30);\n    }\n    uint64_t v34 = *v7; // 0x40c3d1\n    int128_t v35; // 0x40c330\n    int64_t v36; // 0x40c330\n    if (v34 < 0) {\n        // 0x40c4b0\n        __asm_pxor(v28, v28);\n        int64_t v37 = v34 / 2 | v34 % 2; // 0x40c4bd\n        int128_t v38 = __asm_cvtsi2ss(v37); // 0x40c4c0\n        v36 = v37;\n        v35 = __asm_addss(v38, v38);\n    } else {\n        // 0x40c3de\n        __asm_pxor(v28, v28);\n        int128_t v39 = __asm_cvtsi2ss(v34); // 0x40c3e2\n        v36 = v34;\n        v35 = v39;\n    }\n    // 0x40c3e7\n    __asm_comiss_2(__asm_mulss_5(__asm_movss(*(int32_t *)v31), v32), v35);\n    if (v36 == 0) {\n        // 0x40c362\n        return result;\n    }\n    int128_t v40 = __asm_mulss(v32, *(int32_t *)(v31 + 4)); // 0x40c3f8\n    int128_t v41 = v40; // 0x40c401\n    if (*(char *)(v31 + 16) == 0) {\n        // 0x40c403\n        v41 = __asm_mulss(v40, *(int32_t *)(v31 + 8));\n    }\n    // 0x40c408\n    __asm_comiss(v41, 0x5f000000);\n    int64_t v42 = __asm_cvttss2si(__asm_subss(v41, 0x5f000000)); // 0x40c4f8\n    if ((char)function_40be70(a1, v42 ^ -0x8000000000000000) != 0) {\n        // 0x40c362\n        return result;\n    }\n    int64_t * v43 = (int64_t *)(a1 + 72); // 0x40c42a\n    if (*v43 != 0) {\n        int64_t v44; // 0x40c330\n        free((int64_t *)v44);\n        while (*(int64_t *)(v44 + 8) != 0) {\n            int64_t v45 = v44;\n            int64_t v46 = *(int64_t *)(v45 + 8); // 0x40c438\n            free((int64_t *)v45);\n            v44 = v46;\n        }\n    }\n    // 0x40c449\n    *v43 = 0;\n    // 0x40c362\n    return result;\n}\n"
        },
        {
            "funcName": "function_40c510",
            "funcStartAddr": "40c510",
            "funcEndAddr": "40c537",
            "decompiledFuncCode": "int64_t function_40c510(int64_t a1, uint64_t a2, int64_t a3) {\n    // 0x40c510\n    return (*(int64_t *)(a1 + 8) ^ function_413020(a1, a2, a3)) % a2;\n}\n"
        },
        {
            "funcName": "function_40c540",
            "funcStartAddr": "40c540",
            "funcEndAddr": "40c54d",
            "decompiledFuncCode": "int64_t function_40c540(int64_t a1, uint64_t a2, int64_t a3) {\n    // 0x40c540\n    return *(int64_t *)(a1 + 8) % a2;\n}\n"
        },
        {
            "funcName": "function_40c550",
            "funcStartAddr": "40c550",
            "funcEndAddr": "40c575",
            "decompiledFuncCode": "int64_t function_40c550(int64_t a1, int64_t a2) {\n    // 0x40c550\n    if (*(int64_t *)(a1 + 8) != *(int64_t *)(a2 + 8) || *(int64_t *)(a1 + 16) != *(int64_t *)(a2 + 16)) {\n        // 0x40c55a\n        return 0;\n    }\n    // 0x40c56a\n    return function_40ef80(a1, a2);\n}\n"
        },
        {
            "funcName": "function_40c580",
            "funcStartAddr": "40c580",
            "funcEndAddr": "40c5b3",
            "decompiledFuncCode": "int64_t function_40c580(int64_t str, int64_t str2) {\n    // 0x40c580\n    if (*(int64_t *)(str + 8) != *(int64_t *)(str2 + 8) || *(int64_t *)(str + 16) != *(int64_t *)(str2 + 16)) {\n        // 0x40c58c\n        return 0;\n    }\n    int32_t strcmp_rc = strcmp((char *)str, (char *)str2); // 0x40c5a4\n    return (int64_t)(strcmp_rc & -256) | (int64_t)(strcmp_rc == 0);\n}\n"
        },
        {
            "funcName": "function_40c5c0",
            "funcStartAddr": "40c5c0",
            "funcEndAddr": "40c5d5",
            "decompiledFuncCode": "int64_t function_40c5c0(int64_t a1) {\n    int64_t * v1 = (int64_t *)a1; // 0x40c5c7\n    free(v1);\n    free(v1);\n    return &g90;\n}\n"
        },
        {
            "funcName": "function_40c5e0",
            "funcStartAddr": "40c5e0",
            "funcEndAddr": "40c768",
            "decompiledFuncCode": "int64_t function_40c5e0(int64_t a1, int64_t * a2, int64_t a3, int64_t a4) {\n    char v1 = *(char *)a1; // 0x40c614\n    char v2 = v1; // 0x40c61c\n    int64_t v3 = a1; // 0x40c61c\n    int64_t v4 = a1; // 0x40c61c\n    int64_t v5 = 0; // 0x40c61c\n    int32_t v6 = 0; // 0x40c61c\n    int64_t v7 = a1; // 0x40c61c\n    char v8; // 0x40c5e0\n    int64_t v9; // 0x40c5e0\n    int64_t v10; // 0x40c5e0\n    int64_t v11; // 0x40c5e0\n    char v12; // 0x40c5e0\n    int32_t v13; // 0x40c5e0\n    int32_t v14; // 0x40c5e0\n    int32_t v15; // 0x40c5e0\n    int32_t v16; // 0x40c5e0\n    char * v17; // 0x40c5e0\n    char * v18; // 0x40c5e0\n    int64_t v19; // 0x40c648\n    if (v1 != 0) {\n        while (true) {\n            int64_t v20 = v5;\n            v17 = (char *)v20;\n            char v21 = v2; // 0x40c5e0\n            char v22; // 0x40c5e0\n            while (true) {\n                // 0x40c622\n                v14 = v6;\n                v12 = v21;\n                v9 = v4;\n                v10 = v3;\n                char v23; // 0x40c622\n                while (true) {\n                  lab_0x40c622:\n                    // 0x40c622\n                    v3 = v10;\n                    v22 = v12;\n                    v6 = v14;\n                    v4 = v9 + 1;\n                    v18 = (char *)v4;\n                    v23 = *v18;\n                    if (v23 == 47) {\n                        // break (via goto) -> 0x40c6e0\n                        goto lab_0x40c6e0;\n                    }\n                    if (v20 == 0 || v22 == 47 != v23 != 0) {\n                        // break -> 0x40c610\n                        break;\n                    }\n                    // 0x40c645\n                    v19 = v20 - v3;\n                    if (v19 == 1) {\n                        // 0x40c730\n                        v8 = v23;\n                        v16 = v6;\n                        if (*(char *)v3 == 46) {\n                            goto lab_0x40c6ad;\n                        } else {\n                            // 0x40c73b\n                            *v17 = 0;\n                            goto lab_0x40c663;\n                        }\n                    } else {\n                        // 0x40c655\n                        *v17 = 0;\n                        if (v19 == 2) {\n                            // 0x40c6f0\n                            if (*(char *)v3 != 46) {\n                                goto lab_0x40c663;\n                            } else {\n                                // 0x40c6fb\n                                v15 = 0;\n                                v13 = 0;\n                                v11 = 0;\n                                if (*(char *)(v3 + 1) != 46) {\n                                    goto lab_0x40c663;\n                                } else {\n                                    goto lab_0x40c686;\n                                }\n                            }\n                        } else {\n                            goto lab_0x40c663;\n                        }\n                    }\n                }\n                // 0x40c610\n                v21 = v23;\n                v7 = v3;\n                if (v23 == 0) {\n                    // break (via goto) -> 0x40c6c8\n                    goto lab_0x40c6c8_2;\n                }\n            }\n          lab_0x40c6e0:\n            // 0x40c6e0\n            v5 = v22 != 47 ? v4 : v20;\n            v2 = 47;\n        }\n    }\n  lab_0x40c6c8_2:;\n    int64_t result = v7 - a1; // 0x40c6cb\n  lab_0x40c6ce:\n    // 0x40c6ce\n    return result;\n  lab_0x40c748_2:;\n    int64_t v24; // 0x40c5e0\n    int64_t v25; // 0x40c690\n    if (v24 == 0) {\n        // 0x40c760\n        result = 0x100000000 * v25 >> 32;\n        return result;\n    } else {\n        int32_t * v26 = __errno_location(); // 0x40c74d\n        if (*v26 != 2) {\n            // 0x40c760\n            result = 0x100000000 * v25 >> 32;\n            return result;\n        } else {\n            // 0x40c757\n            *v26 = (int32_t)v24;\n            // 0x40c760\n            result = 0x100000000 * v25 >> 32;\n            return result;\n        }\n    }\n  lab_0x40c6ad:\n    // 0x40c6ad\n    v14 = v16;\n    v12 = v8;\n    v9 = v4;\n    v10 = v4;\n    v7 = v4;\n    if (v8 == 0) {\n        // break (via goto) -> 0x40c6c8\n        goto lab_0x40c6c8_2;\n    }\n    goto lab_0x40c622;\n  lab_0x40c663:\n    // 0x40c663\n    v15 = 1;\n    v13 = 1;\n    v11 = 0;\n    if ((int32_t)v19 < 0) {\n        uint32_t v27 = *__errno_location(); // 0x40c721\n        v15 = v6;\n        v13 = v6 % 2;\n        v11 = v27;\n    }\n    goto lab_0x40c686;\n  lab_0x40c686:\n    // 0x40c686\n    v24 = v11;\n    v25 = function_40f520((int64_t)a2, v3, v13, 0);\n    int32_t v28 = v25; // 0x40c698\n    if (v28 == -1) {\n        goto lab_0x40c748_2;\n    }\n    // 0x40c6a1\n    *v17 = 47;\n    if (v28 != 0) {\n        goto lab_0x40c748_2;\n    }\n    // 0x40c6a1\n    v8 = *v18;\n    v16 = v15;\n    goto lab_0x40c6ad;\n}\n"
        },
        {
            "funcName": "function_40c770",
            "funcStartAddr": "40c770",
            "funcEndAddr": "40ca78",
            "decompiledFuncCode": "int64_t function_40c770(int64_t a1, int64_t a2, int64_t a3, int64_t a4, uint32_t mode, int64_t a6, int64_t a7, int64_t a8, int64_t a9, int64_t a10) {\n    // 0x40c770\n    int64_t err_num; // 0x40c770\n    int64_t path; // 0x40c770\n    int64_t v1; // 0x40c770\n    if ((int32_t)a2 == 4 == ((char)v1 != 47)) {\n        uint32_t v2 = *(int32_t *)(a2 + 4); // 0x40c8c0\n        err_num = v2;\n        if (v2 != 0) {\n            goto lab_0x40c870;\n        } else {\n            // 0x40c8c9\n            path = a1;\n            if (a3 != 0) {\n                goto lab_0x40c7b8;\n            } else {\n                goto lab_0x40c7d9;\n            }\n        }\n    } else {\n        // 0x40c7af\n        path = a1;\n        if (a3 == 0) {\n            goto lab_0x40c7d9;\n        } else {\n            goto lab_0x40c7b8;\n        }\n    }\n  lab_0x40c870:\n    // 0x40c870\n    function_40ec50(a1);\n    error(0, (int32_t)err_num, dcgettext(NULL, \"cannot create directory %s\", 5));\n    // 0x40c8a0\n    return (int32_t)&g90 ^ (int32_t)&g90;\n  lab_0x40c7d9:;\n    int64_t v3 = 0x100000000 * a9 >> 32;\n    int64_t v4 = 0x100000000 * a8 >> 32;\n    int64_t v5 = 0x100000000 * a7 >> 32;\n    uint64_t v6 = (int64_t)mode; // 0x40c77e\n    int64_t v7; // 0x40c770\n    int32_t v8; // 0x40c770\n    int32_t v9; // 0x40c770\n    int32_t mode2; // 0x40c770\n    if ((int32_t)(v3 & v4) == -1) {\n        if ((v5 & 3072 || v6 & 512) != 0) {\n            // 0x40c920\n            mode2 = mode & -19;\n            goto lab_0x40c815;\n        } else {\n            uint32_t v10 = mkdir((char *)path, mode); // 0x40c8e2\n            if (v10 != 0) {\n                goto lab_0x40c82c;\n            } else {\n                // 0x40c8f2\n                v9 = mode;\n                v8 = 3;\n                v7 = v10;\n                if ((v6 % 512 & v5) == 0) {\n                    // 0x40c8a0\n                    return 1;\n                }\n                goto lab_0x40c95d;\n            }\n        }\n    } else {\n        // 0x40c80b\n        mode2 = mode & -64;\n        goto lab_0x40c815;\n    }\n  lab_0x40c7b8:;\n    int64_t v11 = function_40c5e0(a1, (int64_t *)a2, a3, a4); // 0x40c7c5\n    if (v11 < 0) {\n        // 0x40c930\n        if (v11 != -1) {\n            // 0x40c8a0\n            return 1;\n        }\n        // 0x40c93f\n        err_num = (int64_t)*__errno_location();\n        goto lab_0x40c870;\n    } else {\n        // 0x40c7d6\n        path = v11 + a1;\n        goto lab_0x40c7d9;\n    }\n  lab_0x40c815:;\n    int32_t v12 = mkdir((char *)path, mode2); // 0x40c81c\n    v9 = mode2;\n    v8 = 3;\n    v7 = 0;\n    if (v12 == 0) {\n        goto lab_0x40c95d;\n    } else {\n        goto lab_0x40c82c;\n    }\n  lab_0x40c82c:;\n    uint32_t v13 = *__errno_location(); // 0x40c836\n    int64_t v14 = v13; // 0x40c836\n    v9 = -1;\n    v8 = 2;\n    v7 = v14;\n    int32_t v15; // bp-200, 0x40c770\n    if ((char)a10 == 0) {\n        goto lab_0x40c95d;\n    } else {\n        // 0x40c83f\n        if (v13 == 0) {\n            // 0x40c8a0\n            return 1;\n        }\n        // 0x40c848\n        err_num = v14;\n        if (a3 != 0 && v13 != 2) {\n            int32_t v16 = __xstat(1, (char *)path, (struct stat *)&v15); // 0x40c860\n            err_num = v14;\n            if (v16 == 0) {\n                // 0x40ca50\n                err_num = v14;\n                int32_t v17; // 0x40c770\n                if ((v17 & 0xf000) == 0x4000) {\n                    // 0x40c8a0\n                    return 1;\n                }\n            }\n        }\n        goto lab_0x40c870;\n    }\n  lab_0x40c95d:;\n    int64_t v18 = function_40f520(a2, path, v8, (int32_t)(int64_t)&v15); // 0x40c968\n    int32_t v19 = v18; // 0x40c970\n    if (v19 < -1) {\n        // 0x40c8a0\n        return 1;\n    }\n    int64_t v20 = v19 == 0 ? (int64_t)\".\" : path; // 0x40c97c\n    if ((int32_t)function_4135d0((int64_t)v15, v20, v9, (int32_t)v4, (int32_t)v3, v6, v5 & 0xffffffff) == 0) {\n        // 0x40c8a0\n        return 1;\n    }\n    int32_t v21 = v7; // 0x40c9b5\n    if (v21 == 0) {\n        goto lab_0x40c9db;\n    } else {\n        // 0x40c9ba\n        err_num = v7;\n        if (a3 == 0 || v21 == 2) {\n            goto lab_0x40c870;\n        } else {\n            int32_t v22 = *__errno_location(); // 0x40c9d2\n            err_num = v7;\n            if (v22 == 20) {\n                goto lab_0x40c870;\n            } else {\n                goto lab_0x40c9db;\n            }\n        }\n    }\n  lab_0x40c9db:;\n    int32_t * err_num2 = __errno_location(); // 0x40c9db\n    function_40ec50(a1);\n    char * v23 = (int32_t)(v3 & v4) != -1 ? \"cannot change owner and permissions of %s\" : \"cannot change permissions of %s\"; // 0x40ca08\n    error(0, *err_num2, dcgettext(NULL, v23, 5));\n    // 0x40c8a0\n    return (int32_t)&g90 ^ (int32_t)&g90;\n}\n"
        },
        {
            "funcName": "function_40ca80",
            "funcStartAddr": "40ca80",
            "funcEndAddr": "40cde1",
            "decompiledFuncCode": "int64_t function_40ca80(int64_t a1) {\n    // 0x40ca80\n    int64_t v1; // 0x40ca80\n    char v2 = v1;\n    int64_t v3 = 0x100000000000000 * v1 >> 56; // 0x40ca8c\n    int64_t v4 = a1; // 0x40ca94\n    if ((v2 & -8) == 48) {\n        int64_t v5 = 0xffffffd0 + v3; // 0x40cb56\n        uint32_t v6 = (int32_t)v5;\n        while (v6 < 0x1000) {\n            // 0x40cb48\n            v4++;\n            char v7 = *(char *)v4; // 0x40cb48\n            if ((v7 & -8) != 48) {\n                // 0x40cd50\n                if (v7 == 0) {\n                    int64_t v8 = v4 - a1; // 0x40cd5a\n                    int32_t v9 = v8 < 5 == (4 - v8 & v8) < 0 ? 4095 : v6 & 3072 | 1023; // 0x40cd79\n                    int64_t result = function_4112e0(32); // 0x40cd7c\n                    *(int16_t *)result = 317;\n                    *(int32_t *)(result + 4) = 4095;\n                    *(int32_t *)(result + 8) = v6;\n                    *(int32_t *)(result + 12) = v9;\n                    *(char *)(result + 17) = 0;\n                    return result;\n                }\n                return 0;\n            }\n            v5 = (int64_t)v7 + 0xffffffd0 + 8 * (v5 & 0xffffffff);\n            v6 = (int32_t)v5;\n        }\n      lab_0x40cb35:\n        // 0x40cb35\n        return 0;\n    }\n    int64_t v10 = 1; // 0x40caa1\n    int64_t v11 = a1; // 0x40caa1\n    int64_t v12; // 0x40ca80\n    if (v2 == 0) {\n        // 0x40cda8\n        v12 = 16;\n    } else {\n        int64_t v13 = v3;\n        v11++;\n        unsigned char v14 = *(char *)v11; // 0x40cac6\n        v10 += (int64_t)((v13 & 239) == 45 | (char)v13 == 43);\n        while (v14 != 0) {\n            // 0x40cab0\n            v13 = v14;\n            v11++;\n            v14 = *(char *)v11;\n            v10 += (int64_t)((v13 & 239) == 45 | (char)v13 == 43);\n        }\n        int64_t v15 = 16 * v10; // 0x40cadd\n        if (v15 < 0) {\n            // 0x40cddc\n            function_411530(v15);\n            // UNREACHABLE\n        }\n        // 0x40caea\n        v12 = v15;\n        if (v10 >= 0x1000000000000000) {\n            // 0x40cddc\n            function_411530(v15);\n            // UNREACHABLE\n        }\n    }\n    int64_t v16 = function_4112e0(v12); // 0x40caf3\n    int64_t v17; // 0x40ca80\n    int64_t v18; // 0x40ca80\n    int64_t v19; // 0x40ca80\n    int64_t v20; // 0x40ca80\n    int64_t v21; // 0x40ca80\n    int64_t v22; // 0x40ca80\n    int64_t v23; // 0x40ca80\n    int64_t v24; // 0x40ca80\n    int64_t v25; // 0x40ca80\n    int64_t v26; // 0x40ca80\n    int64_t v27; // 0x40ca80\n    int64_t v28; // 0x40ca80\n    int64_t v29; // 0x40ca80\n    int64_t v30; // 0x40ca80\n    int64_t v31; // 0x40ca80\n    int64_t v32; // 0x40ca80\n    int64_t v33; // 0x40cbe3\n    int64_t v34; // 0x40cbe3\n    char v35; // 0x40ca80\n    while (true) {\n        int64_t v36 = 0;\n        v32 = 0;\n        v18 = 0;\n        v26 = a1;\n        unsigned char v37; // 0x40cafd\n        while (true) {\n          lab_0x40cafd:\n            // 0x40cafd\n            v27 = v26;\n            v37 = *(char *)v27;\n            if (v37 == 97) {\n                // 0x40cd10\n                v32 = 4095;\n                v19 = 4095;\n                goto lab_0x40cd15;\n            } else {\n                if (v37 <= 97) {\n                    // break -> 0x40cb70\n                    break;\n                }\n                int64_t v38 = v18; // 0x40cd40\n                switch (v37) {\n                    case 111: {\n                        int64_t v39 = v38 & 0xfffffdf8 | 519; // 0x40cd40\n                        v32 = v39;\n                        v19 = v39;\n                        goto lab_0x40cd15;\n                    }\n                    case 117: {\n                        int64_t v40 = v38 & 0xfffff63f | 2496; // 0x40cd30\n                        v32 = v40;\n                        v19 = v40;\n                        goto lab_0x40cd15;\n                    }\n                    case 103: {\n                        int64_t v41 = v38 & 0xfffffbc7 | 1080; // 0x40cd20\n                        v32 = v41;\n                        v19 = v41;\n                        goto lab_0x40cd15;\n                    }\n                    default: {\n                        goto lab_0x40cb2b_3;\n                    }\n                }\n            }\n        }\n        switch (v37) {\n            default: {\n                if (v37 != 43) {\n                    // break -> 0x40cb2b\n                    break;\n                }\n            }\n            case 45: {\n            }\n            case 61: {\n                // 0x40cb82\n                v29 = v27;\n                v24 = v37;\n                v20 = 16 * v36 + v16;\n                v22 = v36;\n                // break -> 0x40cbe3\n                break;\n            }\n        }\n        while (true) {\n          lab_0x40cbe3:\n            // 0x40cbe3\n            v21 = v20;\n            v25 = v24;\n            int64_t v42 = v29;\n            v33 = v42 + 1;\n            char v43 = *(char *)v33; // 0x40cbe3\n            if (v43 == 103) {\n                // 0x40cd00\n                v17 = v42 + 2;\n                v30 = 56;\n                goto lab_0x40cb9e;\n            } else {\n                // 0x40cbf4\n                v34 = v43;\n                if (v43 > 103) {\n                    int64_t v44 = v42 + 2;\n                    v17 = v44;\n                    v30 = 7;\n                    if (v43 != 111) {\n                        // 0x40cb90\n                        v17 = v44;\n                        v30 = 448;\n                        if (v43 != 117) {\n                            goto lab_0x40cc80;\n                        } else {\n                            goto lab_0x40cb9e;\n                        }\n                    } else {\n                        goto lab_0x40cb9e;\n                    }\n                } else {\n                    int64_t v45 = v34; // 0x40cc16\n                    int64_t v46 = v33; // 0x40cc16\n                    if ((v43 & -8) == 48) {\n                        int64_t v47 = 0xffffffd0 + v45; // 0x40cc1a\n                        uint32_t v48 = (int32_t)v47;\n                        if (v48 >= 0x1000) {\n                            // break (via goto) -> 0x40cb2b\n                            goto lab_0x40cb2b_3;\n                        }\n                        int64_t v49 = v46 + 1; // 0x40cc1e\n                        char v50 = *(char *)v49; // 0x40cc2e\n                        int64_t v51 = v50; // 0x40cc2e\n                        int64_t v52 = v47 & 0xffffffff; // 0x40cc39\n                        v46 = v49;\n                        while ((v50 & -8) == 48) {\n                            // 0x40cc1a\n                            v47 = v51 + 0xffffffd0 + 8 * v52;\n                            v48 = (int32_t)v47;\n                            if (v48 >= 0x1000) {\n                                // break (via goto) -> 0x40cb2b\n                                goto lab_0x40cb2b_3;\n                            }\n                            // 0x40cc2e\n                            v49 = v46 + 1;\n                            v50 = *(char *)v49;\n                            v51 = v50;\n                            v52 = v47 & 0xffffffff;\n                            v46 = v49;\n                        }\n                        // 0x40cc3b\n                        if ((int32_t)v32 != 0) {\n                            // break (via goto) -> 0x40cb2b\n                            goto lab_0x40cb2b_3;\n                        }\n                        if (v50 != 0 == (v50 != 44)) {\n                            // break (via goto) -> 0x40cb2b\n                            goto lab_0x40cb2b_3;\n                        }\n                        // 0x40cc50\n                        *(char *)v21 = (char)v25;\n                        v32 = 4095;\n                        *(int32_t *)(v21 + 8) = v48;\n                        *(char *)(v21 + 1) = 1;\n                        *(int32_t *)(v21 + 4) = 4095;\n                        v31 = 4095;\n                        v28 = v49;\n                        v23 = v51 & 0xffffffff;\n                        goto lab_0x40cbbf;\n                    } else {\n                        goto lab_0x40cc80;\n                    }\n                }\n            }\n        }\n      lab_0x40cdb2:\n        // 0x40cdb2\n        if (v35 != 44) {\n            if (v35 != 0) {\n                goto lab_0x40cb2b_3;\n            } else {\n                // 0x40cdcd\n                int64_t v53; // 0x40ca80\n                *(char *)(v16 + 1 + 16 * v53) = 0;\n                return 0;\n            }\n        }\n    }\n  lab_0x40cb2b_3:\n    // 0x40cb2b\n    free((int64_t *)v16);\n    // 0x40cb35\n    return (int32_t)&g90 ^ (int32_t)&g90;\n  lab_0x40cca8:;\n    // 0x40cca8\n    int64_t v54; // 0x40ca80\n    int64_t v55 = v54 + 1; // 0x40cca8\n    int64_t v56 = (int64_t)*(char *)v55; // 0x40ccac\n    int64_t v57 = v56 + 0xffffffa8; // 0x40ccb0\n    int64_t v58; // 0x40ca80\n    int64_t v59 = v58; // 0x40ccb7\n    int64_t v60 = v56; // 0x40ccb7\n    int64_t v61; // 0x40ca80\n    int64_t v62 = v61; // 0x40ccb7\n    int64_t v63 = v57; // 0x40ccb7\n    int64_t v64 = v55; // 0x40ccb7\n    if ((char)v57 >= 33) {\n        // break -> 0x40ccb9\n        goto lab_0x40ccb9_2;\n    }\n    goto lab_0x40cc90;\n  lab_0x40cb9e:\n    // 0x40cb9e\n    *(char *)(v21 + 1) = 3;\n    *(int32_t *)(v21 + 4) = (int32_t)v32;\n    *(int32_t *)(v21 + 8) = (int32_t)v30;\n    *(char *)v21 = (char)v25;\n    int64_t v72 = v30; // 0x40cbb3\n    int64_t v73 = v17; // 0x40cbb3\n    int64_t v74 = (int64_t)*(char *)v17; // 0x40cbb3\n    goto lab_0x40cbb6;\n  lab_0x40cbb6:;\n    int64_t v75 = v32;\n    v31 = v72 & 0xffffffff & ((int32_t)v75 != 0 ? v75 : 0xffffffff);\n    v28 = v73;\n    v23 = v74;\n    goto lab_0x40cbbf;\n  lab_0x40cc80:\n    // 0x40cc80\n    v59 = 0;\n    v60 = v34;\n    v62 = 1;\n    v63 = v34 + 0xffffffa8;\n    v64 = v33;\n    int64_t v70; // 0x40ca80\n    int64_t v69; // 0x40ca80\n    int64_t v67; // 0x40ca80\n    int64_t v68; // 0x40ca80\n    while (true) {\n      lab_0x40cc90:\n        // 0x40cc90\n        v54 = v64;\n        int64_t v65 = v62;\n        int64_t v66 = v59;\n        g91 = v63 % 256;\n        v58 = v66;\n        v61 = 2;\n        v67 = v66;\n        v68 = v60;\n        v69 = v65;\n        v70 = v54;\n        uint64_t v71; // 0x40ca80\n        switch ((char)v71) {\n            case 0: {\n                goto lab_0x40cca8;\n            }\n            case 26: {\n                // 0x40ccf8\n                v58 = v66 & 0xfffffedb | 292;\n                v61 = v65;\n                goto lab_0x40cca8;\n            }\n            case 27: {\n                // 0x40ccf0\n                v58 = v66 | 3072;\n                v61 = v65;\n                goto lab_0x40cca8;\n            }\n            case 28: {\n                // 0x40cce8\n                v58 = v66 | 512;\n                v61 = v65;\n                goto lab_0x40cca8;\n            }\n            case 31: {\n                // 0x40cce0\n                v58 = v66 | 146;\n                v61 = v65;\n                goto lab_0x40cca8;\n            }\n            case 32: {\n                // 0x40ccd8\n                v58 = v66 & 0xffffffb6 | 73;\n                v61 = v65;\n                goto lab_0x40cca8;\n            }\n            default: {\n                goto lab_0x40ccb9_2;\n            }\n        }\n    }\n  lab_0x40ccb9_2:\n    // 0x40ccb9\n    *(char *)v21 = (char)v25;\n    *(char *)(v21 + 1) = (char)v69;\n    *(int32_t *)(v21 + 4) = (int32_t)v32;\n    *(int32_t *)(v21 + 8) = (int32_t)v67;\n    v72 = v67;\n    v73 = v70;\n    v74 = v68 & 0xffffffff;\n    goto lab_0x40cbb6;\n  lab_0x40cbbf:\n    // 0x40cbbf\n    *(int32_t *)(v21 + 12) = (int32_t)v31;\n    if ((v23 & 239) != 45) {\n        // 0x40cbd6\n        int64_t v76; // 0x40ca80\n        v35 = v76;\n        if (v35 != 43) {\n            // break -> 0x40cdb2\n            goto lab_0x40cdb2;\n        }\n    }\n    // 0x40cbe0\n    v29 = v28;\n    v24 = v23;\n    v20 = v21 + 16;\n    v22++;\n    goto lab_0x40cbe3;\n  lab_0x40cd15:\n    // 0x40cd15\n    v18 = v19;\n    v26 = v27 + 1;\n    goto lab_0x40cafd;\n}\n"
        },
        {
            "funcName": "function_40cdf0",
            "funcStartAddr": "40cdf0",
            "funcEndAddr": "40ce44",
            "decompiledFuncCode": "int64_t function_40cdf0(int64_t a1) {\n    // 0x40cdf0\n    int64_t v1; // bp-152, 0x40cdf0\n    int32_t v2 = __xstat(1, (char *)a1, (struct stat *)&v1); // 0x40ce03\n    int64_t result = 0; // 0x40ce0e\n    if (v2 == 0) {\n        // 0x40ce10\n        result = function_4112e0(32);\n        *(int16_t *)result = 317;\n        *(int32_t *)(result + 4) = 4095;\n        *(int32_t *)(result + 12) = 4095;\n        *(char *)(result + 17) = 0;\n    }\n    // 0x40ce3b\n    return result;\n}\n"
        },
        {
            "funcName": "function_40ce50",
            "funcStartAddr": "40ce50",
            "funcEndAddr": "40cfcd",
            "decompiledFuncCode": "int64_t function_40ce50(uint32_t a1, int32_t a2, int32_t a3, int64_t a4, int32_t a5) {\n    char v1 = *(char *)(a4 + 1); // 0x40ce50\n    int64_t v2 = a1 % 0x1000; // 0x40ce59\n    int64_t result = v2; // 0x40ce67\n    int64_t v3 = 0; // 0x40ce67\n    int64_t v4; // 0x40ce50\n    int64_t v5; // 0x40ce50\n    int64_t v6; // 0x40ce50\n    char v7; // 0x40ce50\n    char v8; // 0x40ce50\n    int64_t v9; // 0x40ce50\n    int64_t v10; // 0x40ce50\n    int64_t v11; // 0x40ce50\n    int64_t v12; // 0x40ce50\n    int64_t v13; // 0x40ce50\n    int64_t v14; // 0x40ce50\n    int64_t v15; // 0x40ce50\n    int64_t v16; // 0x40ce50\n    int64_t v17; // 0x40ce50\n    int64_t v18; // 0x40ce50\n    uint32_t v19; // 0x40cf0b\n    int64_t v20; // 0x40cf0f\n    if (v1 != 0) {\n        // 0x40ce6d\n        v10 = v2;\n        v14 = a4;\n        v12 = 0;\n        v7 = v1;\n        while (true) {\n          lab_0x40cf0b_2:\n            // 0x40cf0b\n            v8 = v7;\n            v13 = v12;\n            v15 = v14;\n            v11 = v10;\n            v19 = *(int32_t *)(v15 + 4);\n            v20 = (int64_t)*(int32_t *)(v15 + 8);\n            if ((char)a2 == 0) {\n                // 0x40ce80\n                v16 = 0;\n                v4 = 0xffffffff;\n                if (v8 == 2) {\n                    // 0x40cfc0\n                    v17 = 0;\n                    v9 = v20;\n                    v5 = 0xffffffff;\n                    v18 = 0;\n                    v6 = 0xffffffff;\n                    if ((v11 & 73) == 0) {\n                        goto lab_0x40ced4;\n                    } else {\n                        goto lab_0x40cf3c;\n                    }\n                } else {\n                    goto lab_0x40ce8f;\n                }\n            } else {\n                int32_t v21 = *(int32_t *)(v15 + 12); // 0x40cf1c\n                int64_t v22 = v21 | -3073; // 0x40cf23\n                int64_t v23 = v21 & 3072 ^ 3072; // 0x40cf2c\n                v16 = v23;\n                v4 = v22;\n                v18 = v23;\n                v6 = v22;\n                if (v8 != 2) {\n                    goto lab_0x40ce8f;\n                } else {\n                    goto lab_0x40cf3c;\n                }\n            }\n        }\n    }\n  lab_0x40cf88_2:\n    // 0x40cf88\n    if (a5 != 0) {\n        // 0x40cf8d\n        *(int32_t *)(int64_t)a5 = (int32_t)v3;\n    }\n    // 0x40cf90\n    return result;\n  lab_0x40ce8f:;\n    int64_t v24 = v4;\n    int64_t v25 = v16;\n    v17 = v25;\n    v9 = v20;\n    v5 = v24;\n    if (v8 == 3) {\n        int64_t v26 = v11 & v20;\n        int64_t v27 = v26 & 292; // 0x40ce9b\n        int64_t v28 = (v27 | (int64_t)(v27 == 0)) + (v27 ^ 511) & 292;\n        int64_t v29 = (v26 & 146) != 0 ? v28 | 146 : v28; // 0x40cebe\n        v17 = v25;\n        v9 = ((v26 & 73) != 0 ? v29 | 73 : v29) | v26;\n        v5 = v24;\n    }\n    goto lab_0x40ced4;\n  lab_0x40cf3c:;\n    int64_t v60 = (int64_t)*(char *)v15; // 0x40cf40\n    int64_t v61 = v6 & (v20 | 73); // 0x40cf44\n    int64_t v32 = v18; // 0x40cf4a\n    int64_t v33 = v61; // 0x40cf4a\n    int64_t v34 = v6; // 0x40cf4a\n    int64_t v35 = v60; // 0x40cf4a\n    int64_t v36 = v18; // 0x40cf4a\n    int64_t v37 = v61; // 0x40cf4a\n    int64_t v38 = v60; // 0x40cf4a\n    if (v19 == 0) {\n        goto lab_0x40cee0;\n    } else {\n        goto lab_0x40cf50;\n    }\n  lab_0x40ced4:;\n    int64_t v30 = (int64_t)*(char *)v15; // 0x40ced4\n    int64_t v31 = v9 & 0xffffffff & v5; // 0x40ced8\n    v32 = v17;\n    v33 = v31;\n    v34 = v5;\n    v35 = v30;\n    v36 = v17;\n    v37 = v31;\n    v38 = v30;\n    if (v19 != 0) {\n        goto lab_0x40cf50;\n    } else {\n        goto lab_0x40cee0;\n    }\n  lab_0x40cee0:;\n    int64_t v39 = v33 & (int64_t)(-1 - a3);\n    int64_t v40 = v39; // 0x40ce50\n    int64_t v41 = v35; // 0x40ce50\n    int64_t v42 = v32; // 0x40ce50\n    int64_t v43 = v39; // 0x40ce50\n    int64_t v44 = v34; // 0x40ce50\n    int64_t v45 = v39; // 0x40ce50\n    int64_t v46; // 0x40ce50\n    switch ((char)v46) {\n        case 45: {\n            goto lab_0x40cfa0;\n        }\n        case 61: {\n            goto lab_0x40cf6b;\n        }\n        default: {\n            goto lab_0x40cef3;\n        }\n    }\n  lab_0x40cf50:;\n    int64_t v47 = v19; // 0x40cf0b\n    int64_t v48 = v37 & v47;\n    char v49 = v38; // 0x40cf53\n    v45 = v48;\n    if (v49 == 45) {\n        goto lab_0x40cfa0;\n    } else {\n        // 0x40cf59\n        if (v49 != 61) {\n            goto lab_0x40cef3;\n        } else {\n            int64_t v50 = v36 & 0xffffffff | v47 ^ 0xffffffff; // 0x40cf62\n            v42 = v50;\n            v43 = v48;\n            v44 = v50 ^ 0xffffffff;\n            goto lab_0x40cf6b;\n        }\n    }\n  lab_0x40cfa0:;\n    int64_t v51 = v11 & 0xffffffff & (v45 ^ 0xffffffff); // 0x40cfa9\n    int64_t v52 = (v45 | v13) & 0xffffffff; // 0x40cfa9\n    goto lab_0x40cefd;\n  lab_0x40cf6b:;\n    char v57 = *(char *)(v15 + 17); // 0x40cf6f\n    int64_t v58 = v44 % 0x1000 | v13 & 0xffffffff; // 0x40cf7d\n    int64_t v59 = (v42 & v11 | v43) & 0xffffffff; // 0x40cf80\n    int64_t v54 = v59; // 0x40cf86\n    int64_t v55 = v58; // 0x40cf86\n    char v56 = v57; // 0x40cf86\n    result = v59;\n    v3 = v58;\n    if (v57 == 0) {\n        // break -> 0x40cf88\n        goto lab_0x40cf88_2;\n    }\n    goto lab_0x40cf0b;\n  lab_0x40cef3:\n    // 0x40cef3\n    v51 = v11;\n    v52 = v13;\n    if ((char)v41 == 43) {\n        // 0x40cfb0\n        v51 = (v40 | v11) & 0xffffffff;\n        v52 = (v40 | v13) & 0xffffffff;\n    }\n    goto lab_0x40cefd;\n  lab_0x40cefd:;\n    char v53 = *(char *)(v15 + 17); // 0x40cf01\n    v54 = v51;\n    v55 = v52;\n    v56 = v53;\n    result = v51;\n    v3 = v52;\n    if (v53 == 0) {\n        // break -> 0x40cf88\n        goto lab_0x40cf88_2;\n    }\n    goto lab_0x40cf0b;\n  lab_0x40cf0b:\n    // 0x40cf0b\n    v10 = v54;\n    v14 = v15 + 16;\n    v12 = v55;\n    v7 = v56;\n    goto lab_0x40cf0b_2;\n}\n"
        },
        {
            "funcName": "function_40cfd0",
            "funcStartAddr": "40cfd0",
            "funcEndAddr": "40d069",
            "decompiledFuncCode": "int64_t function_40cfd0(int64_t str) {\n    // 0x40cfd0\n    if (str == 0) {\n        // 0x40d049\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g47);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x40cfde\n    int64_t result = (int64_t)found_char_pos; // 0x40cfde\n    if (found_char_pos == NULL) {\n        // 0x40d039\n        g69 = (char *)str;\n        g46 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x40cfe8\n    if (v1 - str < 7) {\n        // 0x40d039\n        g69 = (char *)str;\n        g46 = str;\n        return result;\n    }\n    // 0x40cff8\n    bool v2; // 0x40cfd0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x40cfd0\n    int64_t v5 = result - 6; // 0x40cfd0\n    int64_t v6 = 7; // 0x40d006\n    unsigned char v7 = *(char *)v5; // 0x40d006\n    char v8 = *(char *)v4; // 0x40d006\n    char v9 = v8; // 0x40d006\n    bool v10 = false; // 0x40d006\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x40d010\n    int64_t v13 = v1; // 0x40d010\n    int64_t v14 = 3; // 0x40d010\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x40d039\n        g69 = (char *)str;\n        g46 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x40d022\n    char v16 = *(char *)v12; // 0x40d022\n    char v17 = v16; // 0x40d022\n    bool v18 = false; // 0x40d022\n    while (v15 == v16) {\n        // 0x40d012\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x40d02c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x40d02e\n        v20 = result + 4;\n        g43 = v20;\n    }\n    // 0x40d039\n    g69 = (char *)v20;\n    g46 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_40d070",
            "funcStartAddr": "40d070",
            "funcEndAddr": "40d0af",
            "decompiledFuncCode": "int64_t function_40d070(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    // 0x40d070\n    int64_t v1; // bp-28, 0x40d070\n    int64_t v2 = function_412b30(a1, a2, a5 & 0xffffffff, &v1); // 0x40d083\n    int64_t result = 0xfffffffe; // 0x40d08a\n    if ((int32_t)v2 == 0) {\n        // 0x40d08c\n        result = function_412b60(&v1, a3, a4 & 0xffffffff);\n    }\n    // 0x40d09b\n    return result;\n}\n"
        },
        {
            "funcName": "function_40d0b0",
            "funcStartAddr": "40d0b0",
            "funcEndAddr": "40d0cc",
            "decompiledFuncCode": "int64_t function_40d0b0(int64_t a1, int64_t a2, int32_t a3) {\n    int32_t v1 = a3; // bp-12, 0x40d0b4\n    return function_412b60((int64_t *)&v1, a1, a2 & 0xffffffff);\n}\n"
        },
        {
            "funcName": "function_40d0d0",
            "funcStartAddr": "40d0d0",
            "funcEndAddr": "40d1c2",
            "decompiledFuncCode": "int64_t function_40d0d0(int64_t * a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x40d0e4\n    if ((int64_t *)v1 != a1) {\n        // 0x40d0f1\n        return (int64_t)v1;\n    }\n    int64_t v2 = function_413060(); // 0x40d100\n    char v3 = *(char *)v2 & -33;\n    int64_t result; // 0x40d1b6\n    if (v3 == 85) {\n        // 0x40d110\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x40d1a8\n            result = (int32_t)a2 != 9 ? (int64_t)&g15 : (int64_t)&g8;\n            return result;\n        }\n        char v4 = *v1; // 0x40d13e\n        int64_t result2 = v4 != 96 ? (int64_t)&g9 : (int64_t)&g12; // 0x40d14b\n        // 0x40d0f1\n        return result2;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x40d1a8\n        result = (int32_t)a2 != 9 ? (int64_t)&g15 : (int64_t)&g8;\n        return result;\n    }\n    char v5 = *v1; // 0x40d18d\n    int64_t result3 = v5 != 96 ? (int64_t)&g10 : (int64_t)&g11; // 0x40d19a\n    // 0x40d0f1\n    return result3;\n}\n"
        },
        {
            "funcName": "function_40d1d0",
            "funcStartAddr": "40d1d0",
            "funcEndAddr": "40d227",
            "decompiledFuncCode": "int64_t function_40d1d0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6, int64_t a7, int64_t a8, int64_t a9) {\n    // 0x40d1d0\n    __ctype_get_mb_cur_max();\n    return a5 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40d227",
            "funcStartAddr": "40d227",
            "funcEndAddr": "40e3f1",
            "decompiledFuncCode": "int64_t function_40d227(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x40d271\n    int64_t v3 = 0; // 0x40d271\n    int64_t v4; // 0x40d227\n    int64_t v5; // 0x40d227\n    int64_t v6; // 0x40d227\n    int64_t v7; // 0x40d227\n    int64_t v8; // 0x40d227\n    int64_t v9; // 0x40d227\n    int64_t v10; // 0x40d227\n    int64_t v11; // 0x40d227\n    int64_t v12; // 0x40d227\n    int64_t v13; // 0x40d227\n    int64_t v14; // 0x40d227\n    int64_t v15; // 0x40d227\n    int64_t v16; // 0x40d227\n    int64_t v17; // 0x40d227\n    int64_t v18; // 0x40d227\n    int64_t result; // 0x40d227\n    int64_t v19; // 0x40d227\n    int32_t wc; // bp+132, 0x40d227\n    int64_t ps; // bp+136, 0x40d227\n    char v20; // 0x40d7e0\n    int64_t v21; // 0x40d7e0\n    int64_t v22; // 0x40db88\n    int64_t v23; // 0x40d227\n    int64_t v24; // 0x40dba7\n    int32_t v25; // 0x40d227\n    while (true) {\n      lab_0x40d278_2:\n        // 0x40d278\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x40d227\n        int64_t v27; // 0x40d2ac\n        while (true) {\n          lab_0x40d278:\n            // 0x40d278\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x40d283\n            if (v15 == -1) {\n                // 0x40d285\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x40d293\n            if (v28) {\n                // break (via goto) -> 0x40d9f8\n                goto lab_0x40d9f8;\n            }\n            // 0x40d29c\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g89 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x40d88b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x40d3d1;\n                    }\n                    // 0x40dcad\n                    v26 = v5 + 1;\n                    goto lab_0x40d278;\n                }\n                case 7: {\n                    goto lab_0x40d3d1;\n                }\n                case 8: {\n                    goto lab_0x40d3d1;\n                }\n                case 9: {\n                    goto lab_0x40d5ea_2;\n                }\n                case 10: {\n                    goto lab_0x40d5ea_2;\n                }\n                case 11: {\n                    goto lab_0x40d3d1;\n                }\n                case 12: {\n                    goto lab_0x40d3d1;\n                }\n                case 13: {\n                    goto lab_0x40d5ea_2;\n                }\n                case 32: {\n                    goto lab_0x40d5ea_2;\n                }\n                case 33: {\n                    goto lab_0x40d5ea_2;\n                }\n                case 34: {\n                    goto lab_0x40d5ea_2;\n                }\n                case 35: {\n                    goto lab_0x40d39d;\n                }\n                case 36: {\n                    goto lab_0x40d5ea_2;\n                }\n                case 37: {\n                    goto lab_0x40d3d1;\n                }\n                case 38: {\n                    goto lab_0x40d5ea_2;\n                }\n                case 39: {\n                    goto lab_0x40d5ea_2;\n                }\n                case 40: {\n                    goto lab_0x40d5ea_2;\n                }\n                case 41: {\n                    goto lab_0x40d5ea_2;\n                }\n                case 42: {\n                    goto lab_0x40d5ea_2;\n                }\n                case 43: {\n                    goto lab_0x40d3d1;\n                }\n                case 44: {\n                    goto lab_0x40d3d1;\n                }\n                case 45: {\n                    goto lab_0x40d3d1;\n                }\n                case 46: {\n                    goto lab_0x40d3d1;\n                }\n                case 47: {\n                    goto lab_0x40d3d1;\n                }\n                case 48: {\n                    goto lab_0x40d3d1;\n                }\n                case 49: {\n                    goto lab_0x40d3d1;\n                }\n                case 50: {\n                    goto lab_0x40d3d1;\n                }\n                case 51: {\n                    goto lab_0x40d3d1;\n                }\n                case 52: {\n                    goto lab_0x40d3d1;\n                }\n                case 53: {\n                    goto lab_0x40d3d1;\n                }\n                case 54: {\n                    goto lab_0x40d3d1;\n                }\n                case 55: {\n                    goto lab_0x40d3d1;\n                }\n                case 56: {\n                    goto lab_0x40d3d1;\n                }\n                case 57: {\n                    goto lab_0x40d3d1;\n                }\n                case 58: {\n                    goto lab_0x40d3d1;\n                }\n                case 59: {\n                    goto lab_0x40d5ea_2;\n                }\n                case 60: {\n                    goto lab_0x40d5ea_2;\n                }\n                case 61: {\n                    goto lab_0x40d5ea_2;\n                }\n                case 62: {\n                    goto lab_0x40d5ea_2;\n                }\n                case 63: {\n                    goto lab_0x40d5ea_2;\n                }\n                case 65: {\n                    goto lab_0x40d3d1;\n                }\n                case 66: {\n                    goto lab_0x40d3d1;\n                }\n                case 67: {\n                    goto lab_0x40d3d1;\n                }\n                case 68: {\n                    goto lab_0x40d3d1;\n                }\n                case 69: {\n                    goto lab_0x40d3d1;\n                }\n                case 70: {\n                    goto lab_0x40d3d1;\n                }\n                case 71: {\n                    goto lab_0x40d3d1;\n                }\n                case 72: {\n                    goto lab_0x40d3d1;\n                }\n                case 73: {\n                    goto lab_0x40d3d1;\n                }\n                case 74: {\n                    goto lab_0x40d3d1;\n                }\n                case 75: {\n                    goto lab_0x40d3d1;\n                }\n                case 76: {\n                    goto lab_0x40d3d1;\n                }\n                case 77: {\n                    goto lab_0x40d3d1;\n                }\n                case 78: {\n                    goto lab_0x40d3d1;\n                }\n                case 79: {\n                    goto lab_0x40d3d1;\n                }\n                case 80: {\n                    goto lab_0x40d3d1;\n                }\n                case 81: {\n                    goto lab_0x40d3d1;\n                }\n                case 82: {\n                    goto lab_0x40d3d1;\n                }\n                case 83: {\n                    goto lab_0x40d3d1;\n                }\n                case 84: {\n                    goto lab_0x40d3d1;\n                }\n                case 85: {\n                    goto lab_0x40d3d1;\n                }\n                case 86: {\n                    goto lab_0x40d3d1;\n                }\n                case 87: {\n                    goto lab_0x40d3d1;\n                }\n                case 88: {\n                    goto lab_0x40d3d1;\n                }\n                case 89: {\n                    goto lab_0x40d3d1;\n                }\n                case 90: {\n                    goto lab_0x40d3d1;\n                }\n                case 91: {\n                    goto lab_0x40d5ea_2;\n                }\n                case 92: {\n                    goto lab_0x40d5ea_2;\n                }\n                case 93: {\n                    goto lab_0x40d3d1;\n                }\n                case 94: {\n                    goto lab_0x40d5ea_2;\n                }\n                case 95: {\n                    goto lab_0x40d3d1;\n                }\n                case 96: {\n                    goto lab_0x40d5ea_2;\n                }\n                case 97: {\n                    goto lab_0x40d3d1;\n                }\n                case 98: {\n                    goto lab_0x40d3d1;\n                }\n                case 99: {\n                    goto lab_0x40d3d1;\n                }\n                case 100: {\n                    goto lab_0x40d3d1;\n                }\n                case 101: {\n                    goto lab_0x40d3d1;\n                }\n                case 102: {\n                    goto lab_0x40d3d1;\n                }\n                case 103: {\n                    goto lab_0x40d3d1;\n                }\n                case 104: {\n                    goto lab_0x40d3d1;\n                }\n                case 105: {\n                    goto lab_0x40d3d1;\n                }\n                case 106: {\n                    goto lab_0x40d3d1;\n                }\n                case 107: {\n                    goto lab_0x40d3d1;\n                }\n                case 108: {\n                    goto lab_0x40d3d1;\n                }\n                case 109: {\n                    goto lab_0x40d3d1;\n                }\n                case 110: {\n                    goto lab_0x40d3d1;\n                }\n                case 111: {\n                    goto lab_0x40d3d1;\n                }\n                case 112: {\n                    goto lab_0x40d3d1;\n                }\n                case 113: {\n                    goto lab_0x40d3d1;\n                }\n                case 114: {\n                    goto lab_0x40d3d1;\n                }\n                case 115: {\n                    goto lab_0x40d3d1;\n                }\n                case 116: {\n                    goto lab_0x40d3d1;\n                }\n                case 117: {\n                    goto lab_0x40d3d1;\n                }\n                case 118: {\n                    goto lab_0x40d3d1;\n                }\n                case 119: {\n                    goto lab_0x40d3d1;\n                }\n                case 120: {\n                    goto lab_0x40d3d1;\n                }\n                case 121: {\n                    goto lab_0x40d3d1;\n                }\n                case 122: {\n                    goto lab_0x40d3d1;\n                }\n                case 123: {\n                    goto lab_0x40d375;\n                }\n                case 124: {\n                    goto lab_0x40d5ea_2;\n                }\n                case 125: {\n                    goto lab_0x40d375;\n                }\n                case 126: {\n                    goto lab_0x40d39d;\n                }\n                default: {\n                    goto lab_0x40d775;\n                }\n            }\n        }\n      lab_0x40d775:\n        if (v23 != 1) {\n            // 0x40dae0\n            ps = 0;\n            int64_t len = v15; // 0x40daf0\n            if (v15 == -1) {\n                // 0x40daf2\n                len = strlen((char *)str);\n            }\n            // 0x40db1e\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x40db7f:\n                // 0x40db7f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x40db84\n                int64_t v30 = v29 + str;\n                v24 = function_4129f0(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x40e0fa_2;\n                    }\n                    case -1: {\n                        goto lab_0x40e0fa_2;\n                    }\n                    case -2: {\n                        // 0x40e1dd\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x40e217\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x40e21a\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x40e227\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x40e220\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x40e0fa\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x40e0fa_2;\n                    }\n                    case 1: {\n                        goto lab_0x40db50;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x40dbfc\n                        char v34 = *(char *)v33; // 0x40dc0d\n                        unsigned char v35; // 0x40d227\n                        if (v34 < 125) {\n                            // 0x40dc18\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x40dc2f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                goto lab_0x40d5ea_2;\n                            }\n                        }\n                        // 0x40dc00\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x40dc0d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x40dc18\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x40dc2f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    goto lab_0x40d5ea_2;\n                                }\n                            }\n                            // 0x40dc00\n                            v33++;\n                        }\n                        goto lab_0x40db50;\n                    }\n                }\n            }\n            goto lab_0x40e0fa_2;\n        } else {\n            // 0x40d7c4\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x40d3d1;\n        }\n    }\n  lab_0x40d9f8:\n    // 0x40d9f8\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x40e2fa\n        if (v8 > result) {\n            // 0x40e303\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x40d627\n        return result;\n    }\n    goto lab_0x40d5ea_2;\n  lab_0x40d3d1:;\n    int64_t v56 = v13;\n    int64_t v57 = v9;\n    int64_t v58 = v16;\n    if (v23 != 0) {\n        // 0x40d3e0\n        v4 = v58;\n        v6 = v57;\n        v10 = v56;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x40d5ea_2;\n        }\n    }\n    int64_t v42 = result; // 0x40d4e1\n    char v43 = v20; // 0x40d4e1\n    int64_t v44 = v58; // 0x40d4e1\n    v3 = v5 + 1;\n    int64_t v45 = v57; // 0x40d4e1\n    int64_t v46 = v56; // 0x40d4e1\n    goto lab_0x40d45d;\n  lab_0x40d5ea_2:;\n    // 0x40d627\n    char * v36; // 0x40d227\n    return function_40d1d0(v10, v6, str, v4, 2, v25 & -3, 0, (int64_t)v36, (int64_t)v36);\n  lab_0x40e0fa_2:;\n    uint64_t v37 = v19;\n    int64_t v38 = 0x100000000 * v8 >> 32;\n    int64_t v39 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v38;\n    v13 = v39;\n    if (v37 < 2) {\n        goto lab_0x40d3d1;\n    } else {\n        uint64_t v40 = v37 + v5; // 0x40dcce\n        int64_t v41 = v5 + 1; // 0x40ddb1\n        v42 = result;\n        v43 = v20;\n        v44 = v22;\n        v3 = v41;\n        v45 = v38;\n        v46 = v39;\n        int64_t v47 = v41; // 0x40ddb8\n        char v48 = v20; // 0x40ddb8\n        int64_t v49 = result; // 0x40ddb8\n        if (v41 < v40) {\n            uint64_t v50 = v49;\n            if (v38 > v50) {\n                // 0x40dd81\n                *(char *)(v50 + v39) = v48;\n            }\n            char v51 = *(char *)(v47 + str); // 0x40dd85\n            int64_t v52 = v50 + 1; // 0x40dd8a\n            int64_t v53 = v47 + 1; // 0x40ddb1\n            v42 = v52;\n            v43 = v51;\n            v44 = v22;\n            v3 = v53;\n            v45 = v38;\n            v46 = v39;\n            v47 = v53;\n            while (v53 < v40) {\n                // 0x40dd7c\n                v50 = v52;\n                if (v38 > v50) {\n                    // 0x40dd81\n                    *(char *)(v50 + v39) = v51;\n                }\n                // 0x40dd85\n                v51 = *(char *)(v47 + str);\n                v52 = v50 + 1;\n                v53 = v47 + 1;\n                v42 = v52;\n                v43 = v51;\n                v44 = v22;\n                v3 = v53;\n                v45 = v38;\n                v46 = v39;\n                v47 = v53;\n            }\n        }\n        goto lab_0x40d45d;\n    }\n  lab_0x40db50:\n    // 0x40db50\n    iswprint(wc);\n    int64_t v54 = v24 + v18; // 0x40db6f\n    int32_t v55 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x40db72\n    v17 = v54;\n    v19 = v54;\n    if (v55 != 0) {\n        // break -> 0x40e0fa\n        goto lab_0x40e0fa_2;\n    }\n    goto lab_0x40db7f;\n  lab_0x40d39d:\n    // 0x40d39d\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x40d5ea_2;\n    }\n    goto lab_0x40d3d1;\n  lab_0x40d375:;\n    bool v61 = v15 == 1; // 0x40d380\n    if (v15 == -1) {\n        // 0x40d382\n        v61 = *(char *)v1 == 0;\n    }\n    // 0x40d38e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v61) {\n        goto lab_0x40d3d1;\n    } else {\n        goto lab_0x40d39d;\n    }\n  lab_0x40d45d:;\n    int64_t v59 = v46;\n    uint64_t v60 = v42;\n    if (v60 < v45) {\n        // 0x40d462\n        *(char *)(v59 + v60) = v43;\n    }\n    // 0x40d466\n    v2 = v60 + 1;\n    v14 = v44;\n    v7 = v45;\n    v11 = v59;\n    goto lab_0x40d278_2;\n}\n"
        },
        {
            "funcName": "function_40e400",
            "funcStartAddr": "40e400",
            "funcEndAddr": "40e59e",
            "decompiledFuncCode": "int64_t function_40e400(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x40e402\n    int32_t * v3 = __errno_location(); // 0x40e41c\n    int64_t v4 = (int64_t)g35; // 0x40e421\n    int32_t v5 = *v3; // 0x40e42b\n    int64_t v6 = v4; // 0x40e441\n    if (v2 >= (int64_t)*(int32_t *)&g38) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x40e599\n            function_411530(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x40e450\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x40e457\n        int64_t v9; // 0x40e400\n        if (g35 == &g36) {\n            int64_t v10 = function_411340(0, v8); // 0x40e57a\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g36); // 0x40e57f\n            *(int64_t *)&g35 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_411340(v4, v8); // 0x40e46b\n            *(int64_t *)&g35 = v12;\n            v9 = v12;\n        }\n        // 0x40e47a\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g38; // 0x40e47a\n        int32_t v14 = v7; // 0x40e481\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g38 = v14;\n    }\n    int64_t v15 = (int64_t)a4;\n    int64_t v16 = v6 + (v1 >> 28); // 0x40e4b1\n    int64_t v17 = v15 + 8; // 0x40e4b4\n    int32_t v18 = *(int32_t *)(v15 + 4) | 1; // 0x40e4bb\n    int64_t * v19 = (int64_t *)v16; // 0x40e4be\n    uint64_t v20 = *v19; // 0x40e4be\n    int64_t * v21 = (int64_t *)(v16 + 8); // 0x40e4c1\n    int64_t result = *v21; // 0x40e4c1\n    int64_t * v22 = (int64_t *)(v15 + 48); // 0x40e4cc\n    int64_t * v23 = (int64_t *)(v15 + 40); // 0x40e4d5\n    int64_t v24; // 0x40e400\n    uint64_t v25 = function_40d1d0(result, v20, a2, a3, v24 & 0xffffffff, v18, v17, *v23, *v22); // 0x40e4e4\n    if (v20 > v25) {\n        // 0x40e55b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v26 = v25 + 1; // 0x40e4f7\n    *v19 = v26;\n    if (result != (int64_t)&g70) {\n        // 0x40e507\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_4112e0(v26); // 0x40e521\n    *v21 = result2;\n    int64_t v27 = *v22; // 0x40e53b\n    int64_t v28 = *v23; // 0x40e53e\n    int64_t v29; // 0x40e400\n    function_40d1d0(result2, v26, a2, a3, (int64_t)*(int32_t *)&v29, v18, v17, v28, v27);\n    // 0x40e55b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40e5a0",
            "funcStartAddr": "40e5a0",
            "funcEndAddr": "40e5d4",
            "decompiledFuncCode": "int64_t function_40e5a0(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x40e5a7\n    int64_t result = function_4114e0(a1 == 0 ? (int64_t)&g71 : a1, 56); // 0x40e5c6\n    return result;\n}\n"
        },
        {
            "funcName": "function_40e5e0",
            "funcStartAddr": "40e5e0",
            "funcEndAddr": "40e5ef",
            "decompiledFuncCode": "int64_t function_40e5e0(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g71 : a1); // 0x40e5ec\n    return result;\n}\n"
        },
        {
            "funcName": "function_40e5f0",
            "funcStartAddr": "40e5f0",
            "funcEndAddr": "40e5ff",
            "decompiledFuncCode": "int64_t function_40e5f0(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g71 : a1; // 0x40e5f8\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g71;\n}\n"
        },
        {
            "funcName": "function_40e600",
            "funcStartAddr": "40e600",
            "funcEndAddr": "40e633",
            "decompiledFuncCode": "int64_t function_40e600(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g71 + 8 : a1 + 8; // 0x40e619\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x40e61e\n    uint32_t v3 = *v2; // 0x40e61e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x40e622\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_40e640",
            "funcStartAddr": "40e640",
            "funcEndAddr": "40e653",
            "decompiledFuncCode": "int64_t function_40e640(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g71 + 4 : a1 + 4); // 0x40e64c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_40e660",
            "funcStartAddr": "40e660",
            "funcEndAddr": "40e68b",
            "decompiledFuncCode": "int64_t function_40e660(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g71 : a1; // 0x40e668\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x40e685\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40e67c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g71;\n}\n"
        },
        {
            "funcName": "function_40e690",
            "funcStartAddr": "40e690",
            "funcEndAddr": "40e702",
            "decompiledFuncCode": "int64_t function_40e690(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g71 : a5; // 0x40e6b2\n    int32_t * v2 = __errno_location(); // 0x40e6bb\n    int32_t v3 = *(int32_t *)(v1 + 4); // 0x40e6d4\n    int64_t v4 = *(int64_t *)(v1 + 48); // 0x40e6d8\n    uint32_t v5 = *(int32_t *)v1; // 0x40e6db\n    int64_t v6 = *(int64_t *)(v1 + 40); // 0x40e6e1\n    int64_t result = function_40d1d0(a1, a2, a3, a4, (int64_t)v5, v3, v1 + 8, v6, v4); // 0x40e6ea\n    return result;\n}\n"
        },
        {
            "funcName": "function_40e710",
            "funcStartAddr": "40e710",
            "funcEndAddr": "40e7f1",
            "decompiledFuncCode": "int64_t function_40e710(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g71 : a4; // 0x40e732\n    int32_t * v2 = __errno_location(); // 0x40e738\n    int64_t v3 = v1 + 8; // 0x40e74f\n    int32_t v4 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x40e757\n    int32_t * v5 = (int32_t *)v1; // 0x40e75a\n    int64_t * v6 = (int64_t *)(v1 + 48); // 0x40e768\n    int64_t * v7 = (int64_t *)(v1 + 40); // 0x40e76b\n    int64_t v8 = function_40d1d0(0, 0, a1, a2, (int64_t)*v5, v4, v3, *v7, *v6); // 0x40e775\n    int64_t v9 = v8 + 1; // 0x40e77a\n    int64_t result = function_4112e0(v9); // 0x40e78f\n    function_40d1d0(result, v9, a1, a2, (int64_t)*v5, v4, v3, *v7, *v6);\n    if (a3 != 0) {\n        // 0x40e7d4\n        *(int64_t *)(int64_t)a3 = v8;\n    }\n    // 0x40e7dd\n    return result;\n}\n"
        },
        {
            "funcName": "function_40e800",
            "funcStartAddr": "40e800",
            "funcEndAddr": "40e80a",
            "decompiledFuncCode": "int64_t function_40e800(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40e800\n    return function_40e710(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_40e810",
            "funcStartAddr": "40e810",
            "funcEndAddr": "40e8a5",
            "decompiledFuncCode": "int64_t function_40e810(void) {\n    uint32_t v1 = *(int32_t *)&g38; // 0x40e810\n    int64_t v2 = v1; // 0x40e810\n    int64_t v3 = v2; // 0x40e824\n    if (v1 >= 2) {\n        int64_t v4 = &g38;\n        int64_t v5 = v4 + 16; // 0x40e843\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g90;\n        while (v5 != (int64_t)g35 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x40e840\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g90;\n        }\n    }\n    int64_t v6 = v3; // 0x40e85d\n    if (g36 != 0x6219e0) {\n        // 0x40e85f\n        free((int64_t *)g36);\n        g36 = 256;\n        *(int64_t *)&g37 = (int64_t)&g70;\n        v6 = &g90;\n    }\n    int64_t result = v6; // 0x40e881\n    if (g35 != &g36) {\n        // 0x40e883\n        free(g35);\n        *(int64_t *)&g35 = (int64_t)&g36;\n        result = &g90;\n    }\n    // 0x40e896\n    *(int32_t *)&g38 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_40e8b0",
            "funcStartAddr": "40e8b0",
            "funcEndAddr": "40e8c1",
            "decompiledFuncCode": "int64_t function_40e8b0(void) {\n    // 0x40e8b0\n    int64_t v1; // 0x40e8b0\n    return function_40e400(v1, v1, -1, (int64_t *)&g71);\n}\n"
        },
        {
            "funcName": "function_40e8d0",
            "funcStartAddr": "40e8d0",
            "funcEndAddr": "40e8da",
            "decompiledFuncCode": "int64_t function_40e8d0(void) {\n    // 0x40e8d0\n    int64_t v1; // 0x40e8d0\n    return function_40e400(v1, v1, v1, (int64_t *)&g71);\n}\n"
        },
        {
            "funcName": "function_40e8e0",
            "funcStartAddr": "40e8e0",
            "funcEndAddr": "40e8f6",
            "decompiledFuncCode": "int64_t function_40e8e0(int64_t a1) {\n    // 0x40e8e0\n    return function_40e400(0, a1, -1, (int64_t *)&g71);\n}\n"
        },
        {
            "funcName": "function_40e900",
            "funcStartAddr": "40e900",
            "funcEndAddr": "40e912",
            "decompiledFuncCode": "int64_t function_40e900(int64_t a1, int64_t a2) {\n    // 0x40e900\n    return function_40e400(0, a1, a2, (int64_t *)&g71);\n}\n"
        },
        {
            "funcName": "function_40e920",
            "funcStartAddr": "40e920",
            "funcEndAddr": "40e988",
            "decompiledFuncCode": "int64_t function_40e920(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x40e930\n    return function_40e400(a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_40e990",
            "funcStartAddr": "40e990",
            "funcEndAddr": "40e9f4",
            "decompiledFuncCode": "int64_t function_40e990(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x40e9a0\n    return function_40e400((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_40ea00",
            "funcStartAddr": "40ea00",
            "funcEndAddr": "40ea0c",
            "decompiledFuncCode": "int64_t function_40ea00(int64_t a1, int64_t a2) {\n    // 0x40ea00\n    return function_40e920(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_40ea10",
            "funcStartAddr": "40ea10",
            "funcEndAddr": "40ea1f",
            "decompiledFuncCode": "int64_t function_40ea10(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40ea10\n    return function_40e990(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_40ea20",
            "funcStartAddr": "40ea20",
            "funcEndAddr": "40ea90",
            "decompiledFuncCode": "int64_t function_40ea20(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g71); // 0x40ea2d\n    int128_t v2 = __asm_movdqa(g72); // 0x40ea35\n    int128_t v3 = __asm_movdqa(g73); // 0x40ea3d\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x40ea52\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x40ea68\n    uint32_t v6 = *v5; // 0x40ea68\n    uint32_t v7 = (int32_t)a3 % 32; // 0x40ea6d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_40e400(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_40ea90",
            "funcStartAddr": "40ea90",
            "funcEndAddr": "40ea9d",
            "decompiledFuncCode": "int64_t function_40ea90(int64_t a1, int64_t a2) {\n    // 0x40ea90\n    return function_40ea20(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_40eaa0",
            "funcStartAddr": "40eaa0",
            "funcEndAddr": "40eab1",
            "decompiledFuncCode": "int64_t function_40eaa0(int64_t a1) {\n    // 0x40eaa0\n    return function_40ea20(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_40eac0",
            "funcStartAddr": "40eac0",
            "funcEndAddr": "40eaca",
            "decompiledFuncCode": "int64_t function_40eac0(void) {\n    // 0x40eac0\n    int64_t v1; // 0x40eac0\n    return function_40ea20(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_40ead0",
            "funcStartAddr": "40ead0",
            "funcEndAddr": "40eb3e",
            "decompiledFuncCode": "int64_t function_40ead0(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x40eaea\n    return function_40e400((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_40eb40",
            "funcStartAddr": "40eb40",
            "funcEndAddr": "40ebac",
            "decompiledFuncCode": "int64_t function_40eb40(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g71); // 0x40eb47\n    int128_t v2 = __asm_movdqa(g72); // 0x40eb4f\n    int128_t v3 = __asm_movdqa(g73); // 0x40eb57\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x40eb79\n    if (a2 == 0 || a3 == 0) {\n        // 0x40eba7\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40eb8a\n    return function_40e400(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_40ebb0",
            "funcStartAddr": "40ebb0",
            "funcEndAddr": "40ebb9",
            "decompiledFuncCode": "int64_t function_40ebb0(void) {\n    // 0x40ebb0\n    int64_t v1; // 0x40ebb0\n    return function_40eb40(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_40ebc0",
            "funcStartAddr": "40ebc0",
            "funcEndAddr": "40ebd7",
            "decompiledFuncCode": "int64_t function_40ebc0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40ebc0\n    return function_40eb40(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_40ebe0",
            "funcStartAddr": "40ebe0",
            "funcEndAddr": "40ebf3",
            "decompiledFuncCode": "int64_t function_40ebe0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x40ebe0\n    return function_40eb40(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_40ec00",
            "funcStartAddr": "40ec00",
            "funcEndAddr": "40ec0a",
            "decompiledFuncCode": "int64_t function_40ec00(void) {\n    // 0x40ec00\n    int64_t v1; // 0x40ec00\n    return function_40e400(v1, v1, v1, &g34);\n}\n"
        },
        {
            "funcName": "function_40ec10",
            "funcStartAddr": "40ec10",
            "funcEndAddr": "40ec22",
            "decompiledFuncCode": "int64_t function_40ec10(int64_t a1, int64_t a2) {\n    // 0x40ec10\n    return function_40e400(0, a1, a2, &g34);\n}\n"
        },
        {
            "funcName": "function_40ec30",
            "funcStartAddr": "40ec30",
            "funcEndAddr": "40ec41",
            "decompiledFuncCode": "int64_t function_40ec30(int64_t a1, int64_t a2) {\n    // 0x40ec30\n    return function_40e400(a1, a2, -1, &g34);\n}\n"
        },
        {
            "funcName": "function_40ec50",
            "funcStartAddr": "40ec50",
            "funcEndAddr": "40ec66",
            "decompiledFuncCode": "int64_t function_40ec50(int64_t a1) {\n    // 0x40ec50\n    return function_40e400(0, a1, -1, &g34);\n}\n"
        },
        {
            "funcName": "function_40ec70",
            "funcStartAddr": "40ec70",
            "funcEndAddr": "40eeb2",
            "decompiledFuncCode": "int64_t function_40ec70(int64_t fd, int64_t a2, int64_t fd2, int64_t a4, int64_t a5) {\n    int32_t result = syscall(SYS_vmsplice); // 0x40eca4\n    if (result >= 0) {\n        // 0x40eceb\n        return result;\n    }\n    int32_t * v1 = __errno_location(); // 0x40ecb3\n    int32_t v2 = *v1; // 0x40ecbf\n    if (v2 != 95 && (v2 - 22 & -17) != 0) {\n        // 0x40eceb\n        return result;\n    }\n    int64_t v3 = (int64_t)v1; // 0x40ecb3\n    char * str2; // 0x40ec70\n    char v4; // 0x40ec70\n    int64_t v5; // 0x40ec70\n    int64_t v6; // bp-200, 0x40ec70\n    if ((int32_t)a5 == 0) {\n        // 0x40ecd6\n        str2 = (char *)a4;\n        v5 = v3;\n        v4 = !((v2 == 95 | (v2 - 22 & -17) == 0));\n    } else {\n        if ((a5 & 0xfffffffe) != 0) {\n            // 0x40ecdf\n            *v1 = 95;\n            // 0x40eceb\n            return -1;\n        }\n        char * v7 = (char *)a4;\n        int32_t v8 = __fxstatat(1, (int32_t)fd2, v7, (struct stat *)&v6, 256); // 0x40ed1e\n        int64_t v9 = 0x100000000 * v3 >> 32; // 0x40ed23\n        int32_t * v10 = (int32_t *)v9;\n        if (v8 == 0) {\n            // 0x40ee80\n            *v10 = 17;\n            // 0x40eceb\n            return -1;\n        }\n        int32_t v11 = *v10; // 0x40ed30\n        if (v11 == 75) {\n            // 0x40ee80\n            *v10 = 17;\n            // 0x40eceb\n            return -1;\n        }\n        // 0x40ed3c\n        str2 = v7;\n        v5 = v9;\n        v4 = 1;\n        if (v11 != 2) {\n            // 0x40eceb\n            return -1;\n        }\n    }\n    char * str = (char *)a2; // 0x40ed58\n    int32_t len = strlen(str); // 0x40ed58\n    int32_t len2 = strlen(str2); // 0x40ed63\n    if (len == 0 || len2 == 0) {\n        // 0x40eceb\n        return renameat((int32_t)fd, str, (int32_t)fd2, str2);\n    }\n    // 0x40ed7f\n    if (*(char *)(a2 - 1 + (int64_t)len) != 47) {\n        // 0x40ed86\n        if (*(char *)(a4 - 1 + (int64_t)len2) != 47) {\n            // 0x40eceb\n            return renameat((int32_t)fd, str, (int32_t)fd2, str2);\n        }\n    }\n    // 0x40ed92\n    int64_t v12; // bp-344, 0x40ec70\n    if (__fxstatat(1, (int32_t)fd, str, (struct stat *)&v12, 256) != 0) {\n        // 0x40eceb\n        return -1;\n    }\n    int64_t v13 = 0x100000000 * v5 >> 32; // 0x40edb9\n    int32_t v14; // 0x40ec70\n    if (v4 != 0) {\n        if ((v14 & 0xf000) == 0x4000) {\n            // 0x40eceb\n            return renameat((int32_t)fd, str, (int32_t)fd2, str2);\n        }\n        // 0x40edd4\n        *(int32_t *)v13 = 2;\n        // 0x40eceb\n        return -1;\n    }\n    // 0x40ee20\n    if (__fxstatat(1, (int32_t)fd2, str2, (struct stat *)&v6, 256) != 0) {\n        // 0x40ee4c\n        if (*(int32_t *)v13 != 2 || (v14 & 0xf000) != 0x4000) {\n            // 0x40eceb\n            return -1;\n        }\n        // 0x40eceb\n        return renameat((int32_t)fd, str, (int32_t)fd2, str2);\n    }\n    if ((v14 & 0xf000) != 0x4000) {\n        // 0x40edff\n        *(int32_t *)v13 = 20;\n        // 0x40eceb\n        return -1;\n    }\n    if ((v14 & 0xf000) == 0x4000) {\n        // 0x40eceb\n        return renameat((int32_t)fd, str, (int32_t)fd2, str2);\n    }\n    // 0x40eea1\n    *(int32_t *)v13 = 21;\n    // 0x40eceb\n    return -1;\n}\n"
        },
        {
            "funcName": "function_40eec0",
            "funcStartAddr": "40eec0",
            "funcEndAddr": "40ef1e",
            "decompiledFuncCode": "int64_t function_40eec0(int64_t fd, int64_t buf, int64_t nbyte) {\n    int32_t result = read((int32_t)fd, (int64_t *)buf, (int32_t)nbyte); // 0x40eee1\n    while (result < 0) {\n        // 0x40eeee\n        if (*__errno_location() != 4) {\n            // break -> 0x40eefa\n            break;\n        }\n        result = read((int32_t)fd, (int64_t *)buf, (int32_t)nbyte);\n    }\n    return result;\n}\n"
        },
        {
            "funcName": "function_40ef20",
            "funcStartAddr": "40ef20",
            "funcEndAddr": "40ef7e",
            "decompiledFuncCode": "int64_t function_40ef20(int64_t fd, int64_t buf, int64_t nbyte) {\n    int32_t result = write((int32_t)fd, (int64_t *)buf, (int32_t)nbyte); // 0x40ef41\n    while (result < 0) {\n        // 0x40ef4e\n        if (*__errno_location() != 4) {\n            // break -> 0x40ef5a\n            break;\n        }\n        result = write((int32_t)fd, (int64_t *)buf, (int32_t)nbyte);\n    }\n    return result;\n}\n"
        },
        {
            "funcName": "function_40ef80",
            "funcStartAddr": "40ef80",
            "funcEndAddr": "40f0b0",
            "decompiledFuncCode": "int64_t function_40ef80(int64_t a1, int64_t a2) {\n    int64_t str = function_40ad40(a1, a2); // 0x40ef99\n    int64_t str2 = function_40ad40(a2, a2); // 0x40efa4\n    int64_t n = function_40ada0(str); // 0x40efaf\n    if (n != function_40ada0(str2) || memcmp((int64_t *)str, (int64_t *)str2, (int32_t)n) != 0) {\n        // 0x40efc4\n        return 0;\n    }\n    int64_t v1 = function_40ac60(); // 0x40eff5\n    int64_t v2 = function_40ac60(); // 0x40f000\n    char * v3 = (char *)v1; // 0x40f013\n    int64_t v4; // bp-344, 0x40ef80\n    if (__xstat(1, v3, (struct stat *)&v4) != 0) {\n        // 0x40f090\n        error(1, *__errno_location(), \"%s\", v3);\n    }\n    char * v5 = (char *)v2; // 0x40f02c\n    int64_t v6; // bp-200, 0x40ef80\n    if (__xstat(1, v5, (struct stat *)&v6) != 0) {\n        // 0x40f070\n        error(1, *__errno_location(), \"%s\", v5);\n    }\n    int64_t v7 = 0; // 0x40f044\n    // 0x40f046\n    v7 = v4 == v6;\n    // 0x40f055\n    free((int64_t *)v1);\n    free((int64_t *)v2);\n    // 0x40efc4\n    return v7 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40f0b0",
            "funcStartAddr": "40f0b0",
            "funcEndAddr": "40f0c6",
            "decompiledFuncCode": "int64_t function_40f0b0(int64_t a1, int64_t a2) {\n    uint64_t v1 = *(int64_t *)(a2 + 8); // 0x40f0b5\n    uint64_t v2 = *(int64_t *)(a1 + 8); // 0x40f0b9\n    return v2 < v1 ? 0xffffffff : (int64_t)(v2 > v1);\n}\n"
        },
        {
            "funcName": "function_40f0d0",
            "funcStartAddr": "40f0d0",
            "funcEndAddr": "40f0db",
            "decompiledFuncCode": "int64_t function_40f0d0(int64_t str, int64_t str2) {\n    // 0x40f0d0\n    return strcmp((char *)str, (char *)str2);\n}\n"
        },
        {
            "funcName": "function_40f0e0",
            "funcStartAddr": "40f0e0",
            "funcEndAddr": "40f474",
            "decompiledFuncCode": "int64_t function_40f0e0(int64_t a1, int64_t a2) {\n    int64_t v1 = *(int64_t *)((8 * a2 & 0x7fffffff8) + (int64_t)&g13); // 0x40f0f0\n    if (a1 == 0) {\n        // 0x40f2a9\n        return 0;\n    }\n    int32_t * v2 = __errno_location(); // 0x40f112\n    *v2 = 0;\n    struct __dirstream * dirp = (struct __dirstream *)a1; // 0x40f146\n    struct dirent * v3 = readdir(dirp); // 0x40f146\n    int64_t nmemb = 0; // 0x40f151\n    int64_t v4 = 0; // 0x40f151\n    int64_t v5 = 0; // 0x40f151\n    int64_t v6 = 0; // 0x40f151\n    int64_t v7 = 0; // 0x40f151\n    struct dirent * v8; // 0x40f0e0\n    int64_t v9; // 0x40f0e0\n    int64_t v10; // 0x40f0e0\n    int64_t v11; // 0x40f0e0\n    int64_t v12; // 0x40f0e0\n    char v13; // 0x40f0e0\n    int64_t v14; // 0x40f0e0\n    if (v3 != NULL) {\n        struct dirent * v15 = v3; // 0x40f146\n        int32_t v16 = 0;\n        v9 = 0;\n        v11 = 0;\n        struct dirent * v17 = v15; // 0x40f146\n        int64_t v18 = 0; // 0x40f349\n        int64_t v19 = 0;\n        int64_t v20 = 0;\n        struct dirent * v21; // 0x40f0e0\n        int64_t v22; // 0x40f0e0\n        int64_t v23; // 0x40f0e0\n        int64_t v24; // 0x40f0e0\n        int64_t v25; // 0x40f157\n        char * str; // 0x40f0e0\n        char v26; // 0x40f15b\n        uint64_t v27; // 0x40f192\n        int64_t v28; // 0x40f2cb\n        int64_t v29; // 0x40f32a\n        uint64_t v30; // 0x40f2fa\n        while (true) {\n            // 0x40f157\n            v14 = v20;\n            v10 = v19;\n            v12 = v18;\n            v8 = v17;\n            while (true) {\n                // 0x40f157\n                v21 = v8;\n                v24 = (int64_t)v21;\n                v25 = v24 + 19;\n                str = (char *)v25;\n                v26 = *str;\n                v13 = v26;\n                if (v26 != 46) {\n                    goto lab_0x40f138;\n                } else {\n                    // 0x40f163\n                    switch (*(char *)(v24 + 20)) {\n                        case 46: {\n                            // 0x40f1f8\n                            v13 = *(char *)(v24 + 21);\n                            goto lab_0x40f138;\n                        }\n                        case 0: {\n                            goto lab_0x40f13c;\n                        }\n                        default: {\n                            goto lab_0x40f175_2;\n                        }\n                    }\n                }\n            }\n            // 0x40f175\n            v27 = (int64_t)strlen(str) + 1;\n            if (v1 != 0) {\n                // break -> 0x40f19c\n                break;\n            }\n            // 0x40f2c0\n            v28 = v27 + v12;\n            v23 = v14;\n            v29 = v10;\n            if (v14 - v12 <= v27) {\n                if (v28 < v12) {\n                    // 0x40f418\n                    function_411530(v25);\n                    // UNREACHABLE\n                }\n                if (v10 == 0) {\n                    // 0x40f40a\n                    v22 = 128;\n                    if (v28 != 0) {\n                        // 0x40f412\n                        v22 = v28;\n                        if (v28 < 0) {\n                            // 0x40f418\n                            function_411530(v25);\n                            // UNREACHABLE\n                        }\n                    }\n                } else {\n                    if ((int32_t)v28 <= 0xffffffff) {\n                        // 0x40f418\n                        function_411530(v25);\n                        // UNREACHABLE\n                    }\n                    // 0x40f308\n                    v30 = 0x100000000 * v28 >> 32;\n                    v22 = v30 + 1 + v30 / 2;\n                }\n                // 0x40f318\n                v23 = v22;\n                v29 = function_411340(v10, v23);\n            }\n            // 0x40f33c\n            v19 = v29;\n            v20 = v23;\n            memcpy((int64_t *)(v19 + v12), (int64_t *)v25, (int32_t)v27);\n            v18 = 0x100000000 * v28 >> 32;\n            *v2 = 0;\n            v17 = readdir(dirp);\n            nmemb = v9;\n            v4 = v11;\n            v5 = v20;\n            v6 = v19;\n            v7 = v18;\n            if (v17 == NULL) {\n                // break (via goto) -> 0x40f208\n                goto lab_0x40f208_2;\n            }\n        }\n        int32_t v31 = (int32_t)v9 + 1; // 0x40f1ab\n        int32_t v32 = v16; // 0x40f1b0\n        int32_t v33 = v31; // 0x40f1b0\n        int64_t v34 = v11; // 0x40f1b0\n        int64_t v35; // 0x40f0e0\n        int32_t v36; // 0x40f0e0\n        int32_t v37; // 0x40f0e0\n        int64_t v38; // 0x40f38b\n        if (v9 == (int64_t)v16) {\n            if (v11 == 0) {\n                // 0x40f42e\n                v36 = 8;\n                v37 = 1;\n                v35 = 128;\n                if (v9 != 0) {\n                    // 0x40f433\n                    v36 = v16;\n                    v37 = v31;\n                    v35 = 16 * v9;\n                    if (v9 > -1 != v9 < 0x1000000000000000) {\n                        // 0x40f418\n                        function_411530(v25);\n                        // UNREACHABLE\n                    }\n                }\n            } else {\n                if (v9 >= 0x555555555555555) {\n                    // 0x40f418\n                    function_411530(v25);\n                    // UNREACHABLE\n                }\n                // 0x40f385\n                v38 = v9 / 2 + (int64_t)v31;\n                v36 = v38;\n                v37 = v31;\n                v35 = 16 * v38;\n            }\n            // 0x40f39c\n            v33 = v37;\n            v32 = v36;\n            v34 = function_411340(v11, v35);\n        }\n        int64_t v39 = v34;\n        int32_t v40 = v32;\n        int64_t v41 = v39 + 16 * v9; // 0x40f1c7\n        *(int64_t *)v41 = function_411510(v25);\n        int64_t v42 = v27 + v12; // 0x40f1e0\n        *(int64_t *)(v41 + 8) = *(int64_t *)v21;\n        int64_t v43 = v33; // 0x40f1e8\n        *v2 = 0;\n        v15 = readdir(dirp);\n        int64_t v44 = v10; // 0x40f151\n        int64_t v45 = v14; // 0x40f151\n        nmemb = v43;\n        v4 = v39;\n        v5 = v14;\n        v6 = v10;\n        v7 = v42;\n        while (v15 != NULL) {\n            // 0x40f157\n            v16 = v40;\n            v9 = v43;\n            v11 = v39;\n            v17 = v15;\n            v18 = v42;\n            v19 = v44;\n            v20 = v45;\n            while (true) {\n                // 0x40f157\n                v14 = v20;\n                v10 = v19;\n                v12 = v18;\n                v8 = v17;\n                while (true) {\n                    // 0x40f157\n                    v21 = v8;\n                    v24 = (int64_t)v21;\n                    v25 = v24 + 19;\n                    str = (char *)v25;\n                    v26 = *str;\n                    v13 = v26;\n                    if (v26 != 46) {\n                        goto lab_0x40f138;\n                    } else {\n                        // 0x40f163\n                        switch (*(char *)(v24 + 20)) {\n                            case 46: {\n                                // 0x40f1f8\n                                v13 = *(char *)(v24 + 21);\n                                goto lab_0x40f138;\n                            }\n                            case 0: {\n                                goto lab_0x40f13c;\n                            }\n                            default: {\n                                goto lab_0x40f175_2;\n                            }\n                        }\n                    }\n                }\n                // 0x40f175\n                v27 = (int64_t)strlen(str) + 1;\n                if (v1 != 0) {\n                    // break -> 0x40f19c\n                    break;\n                }\n                // 0x40f2c0\n                v28 = v27 + v12;\n                v23 = v14;\n                v29 = v10;\n                if (v14 - v12 <= v27) {\n                    if (v28 < v12) {\n                        // 0x40f418\n                        function_411530(v25);\n                        // UNREACHABLE\n                    }\n                    if (v10 == 0) {\n                        // 0x40f40a\n                        v22 = 128;\n                        if (v28 != 0) {\n                            // 0x40f412\n                            v22 = v28;\n                            if (v28 < 0) {\n                                // 0x40f418\n                                function_411530(v25);\n                                // UNREACHABLE\n                            }\n                        }\n                    } else {\n                        if ((int32_t)v28 <= 0xffffffff) {\n                            // 0x40f418\n                            function_411530(v25);\n                            // UNREACHABLE\n                        }\n                        // 0x40f308\n                        v30 = 0x100000000 * v28 >> 32;\n                        v22 = v30 + 1 + v30 / 2;\n                    }\n                    // 0x40f318\n                    v23 = v22;\n                    v29 = function_411340(v10, v23);\n                }\n                // 0x40f33c\n                v19 = v29;\n                v20 = v23;\n                memcpy((int64_t *)(v19 + v12), (int64_t *)v25, (int32_t)v27);\n                v18 = 0x100000000 * v28 >> 32;\n                *v2 = 0;\n                v17 = readdir(dirp);\n                nmemb = v9;\n                v4 = v11;\n                v5 = v20;\n                v6 = v19;\n                v7 = v18;\n                if (v17 == NULL) {\n                    // break (via goto) -> 0x40f208\n                    goto lab_0x40f208_2;\n                }\n            }\n            // 0x40f19c\n            v31 = (int32_t)v9 + 1;\n            v32 = v16;\n            v33 = v31;\n            v34 = v11;\n            if (v9 == (int64_t)v16) {\n                if (v11 == 0) {\n                    // 0x40f42e\n                    v36 = 8;\n                    v37 = 1;\n                    v35 = 128;\n                    if (v9 != 0) {\n                        // 0x40f433\n                        v36 = v16;\n                        v37 = v31;\n                        v35 = 16 * v9;\n                        if (v9 > -1 != v9 < 0x1000000000000000) {\n                            // 0x40f418\n                            function_411530(v25);\n                            // UNREACHABLE\n                        }\n                    }\n                } else {\n                    if (v9 >= 0x555555555555555) {\n                        // 0x40f418\n                        function_411530(v25);\n                        // UNREACHABLE\n                    }\n                    // 0x40f385\n                    v38 = v9 / 2 + (int64_t)v31;\n                    v36 = v38;\n                    v37 = v31;\n                    v35 = 16 * v38;\n                }\n                // 0x40f39c\n                v33 = v37;\n                v32 = v36;\n                v34 = function_411340(v11, v35);\n            }\n            // 0x40f1b6\n            v39 = v34;\n            v40 = v32;\n            v41 = v39 + 16 * v9;\n            *(int64_t *)v41 = function_411510(v25);\n            v42 = v27 + v12;\n            *(int64_t *)(v41 + 8) = *(int64_t *)v21;\n            v43 = v33;\n            *v2 = 0;\n            v15 = readdir(dirp);\n            v44 = v10;\n            v45 = v14;\n            nmemb = v43;\n            v4 = v39;\n            v5 = v14;\n            v6 = v10;\n            v7 = v42;\n        }\n    }\n  lab_0x40f208_2:;\n    int32_t v46 = *v2; // 0x40f208\n    if (v46 != 0) {\n        // 0x40f3e7\n        free((int64_t *)v4);\n        free((int64_t *)v6);\n        *v2 = v46;\n        // 0x40f2a9\n        return 0;\n    }\n    // 0x40f213\n    int64_t result; // 0x40f0e0\n    int64_t v47; // 0x40f0e0\n    if (v1 == 0) {\n        // 0x40f358\n        if (v5 == v7) {\n            int64_t v48 = function_411340(v6, v5 + 1); // 0x40f3d6\n            v47 = v48 + v5;\n            result = v48;\n        } else {\n            // 0x40f35f\n            v47 = v7 + v6;\n            result = v6;\n        }\n    } else {\n        int64_t v49 = v7 + 1; // 0x40f21f\n        int64_t * v50; // 0x40f0e0\n        int64_t v51; // 0x40f0e0\n        int64_t v52; // 0x40f0e0\n        if (nmemb != 0) {\n            int64_t * base = (int64_t *)v4;\n            qsort(base, (int32_t)nmemb, 16, (int32_t (*)(int64_t *, int64_t *))v1);\n            int64_t v53 = function_4112e0(v49); // 0x40f264\n            int64_t v54 = v4; // 0x40f26c\n            int64_t v55 = 0; // 0x40f26c\n            int64_t str2 = v55 + v53; // 0x40f270\n            int64_t * str3 = (int64_t *)v54; // 0x40f275\n            v54 += 16;\n            char * v56 = stpcpy((char *)str2, (char *)*str3); // 0x40f27f\n            int64_t v57 = v55 + 1 + (int64_t)v56 - str2; // 0x40f28b\n            free((int64_t *)*str3);\n            v55 = v57;\n            while (v54 != v4 + 16 * nmemb) {\n                // 0x40f270\n                str2 = v55 + v53;\n                str3 = (int64_t *)v54;\n                v54 += 16;\n                v56 = stpcpy((char *)str2, (char *)*str3);\n                v57 = v55 + 1 + (int64_t)v56 - str2;\n                free((int64_t *)*str3);\n                v55 = v57;\n            }\n            // 0x40f29a\n            v50 = base;\n            v51 = v53;\n            v52 = v57 + v53;\n        } else {\n            int64_t v58 = function_4112e0(v49); // 0x40f22b\n            v50 = (int64_t *)v4;\n            v51 = v58;\n            v52 = v58;\n        }\n        // 0x40f29d\n        free(v50);\n        v47 = v52;\n        result = v51;\n    }\n    // 0x40f2a5\n    *(char *)v47 = 0;\n    // 0x40f2a9\n    return result;\n  lab_0x40f138:\n    // 0x40f138\n    if (v13 != 0) {\n        // break -> 0x40f175\n        goto lab_0x40f175_2;\n    }\n    goto lab_0x40f13c;\n  lab_0x40f13c:\n    // 0x40f13c\n    *v2 = 0;\n    struct dirent * v59 = readdir(dirp); // 0x40f146\n    v8 = v59;\n    nmemb = v9;\n    v4 = v11;\n    v5 = v14;\n    v6 = v10;\n    v7 = v12;\n    if (v59 == NULL) {\n        // break (via goto) -> 0x40f208\n        goto lab_0x40f208_2;\n    }\n    goto lab_0x40f157;\n}\n"
        },
        {
            "funcName": "function_40f480",
            "funcStartAddr": "40f480",
            "funcEndAddr": "40f4e8",
            "decompiledFuncCode": "int64_t function_40f480(int64_t a1, int64_t a2) {\n    int64_t dirp = function_40abc0(); // 0x40f486\n    if (dirp == 0) {\n        // 0x40f4ac\n        return 0;\n    }\n    int64_t result = function_40f0e0(dirp, a2 & 0xffffffff); // 0x40f498\n    if (closedir((struct __dirstream *)dirp) == 0) {\n        // 0x40f4ac\n        return result;\n    }\n    int32_t * v1 = __errno_location(); // 0x40f4c8\n    free((int64_t *)result);\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40f4f0",
            "funcStartAddr": "40f4f0",
            "funcEndAddr": "40f4f7",
            "decompiledFuncCode": "int64_t function_40f4f0(int64_t a1) {\n    // 0x40f4f0\n    *(int32_t *)a1 = 0;\n    int64_t result; // 0x40f4f0\n    return result;\n}\n"
        },
        {
            "funcName": "function_40f500",
            "funcStartAddr": "40f500",
            "funcEndAddr": "40f514",
            "decompiledFuncCode": "int64_t function_40f500(int64_t a1) {\n    if ((int32_t)a1 == 4) {\n        // 0x40f510\n        return (int64_t)*(int32_t *)(a1 + 4);\n    }\n    // 0x40f507\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40f520",
            "funcStartAddr": "40f520",
            "funcEndAddr": "40f770",
            "decompiledFuncCode": "int64_t function_40f520(int64_t a1, int64_t a2, int32_t a3, int32_t a4) {\n    int64_t v1 = a3;\n    int64_t v2 = 0xffffffff; // 0x40f534\n    if (a4 != 0) {\n        int64_t v3 = a4;\n        int32_t v4 = __open_2((char *)a2, 0x20000 * a3 & 0x20000 | 0x10900); // 0x40f551\n        *(int32_t *)v3 = v4;\n        int64_t v5 = v4; // 0x40f558\n        int32_t v6 = *__errno_location(); // 0x40f560\n        *(int32_t *)(v3 + 4) = v6;\n        if (v4 < 0) {\n            // 0x40f5f0\n            v2 = v5;\n            if (v6 != 13) {\n                // 0x40f5e3\n                return 0xffffffff;\n            }\n        } else {\n            // 0x40f56e\n            v2 = v5;\n            if ((v1 & 2) != 0) {\n                // 0x40f5e3\n                return 0;\n            }\n        }\n    }\n    // 0x40f574\n    int64_t v7; // 0x40f520\n    uint32_t v8 = *(int32_t *)&v7; // 0x40f574\n    if (v8 >= 6) {\n        // 0x40f750\n        __assert_fail(\"0\", \"lib/savewd.c\", 99, \"savewd_save\");\n        return &g90;\n    }\n    uint32_t v9 = v8 % 64;\n    int64_t v10 = v9 == 0 ? 1 : 1 << (int64_t)v9;\n    int64_t path = a2; // 0x40f58a\n    int32_t * v11; // 0x40f520\n    int64_t v12; // 0x40f520\n    int64_t v13; // 0x40f520\n    if ((v10 & 54) != 0) {\n        goto lab_0x40f5c0;\n    } else {\n        if ((v10 & 8) != 0) {\n            int32_t * v14 = (int32_t *)(a1 + 4);\n            path = a2;\n            v11 = v14;\n            v12 = a2;\n            if (*v14 >= 0) {\n                goto lab_0x40f5c0;\n            } else {\n                goto lab_0x40f68b;\n            }\n        } else {\n            if (v8 != 0) {\n                // 0x40f750\n                __assert_fail(\"0\", \"lib/savewd.c\", 99, \"savewd_save\");\n                return &g90;\n            }\n            int32_t v15 = function_40ae10((int64_t)\".\", 0, v1); // 0x40f5aa\n            v13 = a2;\n            if (v15 < 0) {\n                goto lab_0x40f6e8;\n            } else {\n                // 0x40f5b2\n                *(int32_t *)a1 = 1;\n                *(int32_t *)(a1 + 4) = v15;\n                path = a2;\n                goto lab_0x40f5c0;\n            }\n        }\n    }\n  lab_0x40f5c0:;\n    int32_t fd = v2;\n    int32_t fd2; // 0x40f520\n    int64_t v16; // 0x40f520\n    int64_t result; // 0x40f520\n    bool v17; // 0x40f520\n    if (fd < 0) {\n        uint32_t v18 = chdir((char *)path); // 0x40f60b\n        int64_t v19 = v18; // 0x40f610\n        int64_t v20 = v19; // 0x40f615\n        v16 = v19;\n        if (v18 != 0) {\n            // 0x40f5e3\n            return v20 & 0xffffffff;\n        }\n        goto lab_0x40f621;\n    } else {\n        uint32_t v21 = fchdir(fd); // 0x40f5c8\n        v16 = 0;\n        if (v21 == 0) {\n            goto lab_0x40f621;\n        } else {\n            // 0x40f5d4\n            fd2 = fd;\n            v17 = a4 == 0;\n            result = v21;\n            goto lab_0x40f640;\n        }\n    }\n  lab_0x40f621:;\n    uint32_t v22 = *(int32_t *)&v7; // 0x40f621\n    g92 = v22;\n    fd2 = fd;\n    v17 = a4 == 0;\n    result = 0;\n    switch (v22) {\n        case 1: {\n            // 0x40f630\n            *(int32_t *)a1 = 2;\n            fd2 = fd;\n            v17 = a4 == 0;\n            result = 0;\n            goto lab_0x40f640;\n        }\n        case 2: {\n            goto lab_0x40f640;\n        }\n        case 3: {\n            // 0x40f6c0\n            fd2 = fd;\n            v17 = a4 == 0;\n            result = 0;\n            if (*(int32_t *)(a1 + 4) == 0) {\n                goto lab_0x40f640;\n            } else {\n                // 0x40f6cb\n                __assert_fail(\"wd->val.child == 0\", \"lib/savewd.c\", 155, \"savewd_chdir\");\n                v13 = v16;\n                goto lab_0x40f6e8;\n            }\n        }\n        case 4: {\n            goto lab_0x40f640;\n        }\n        case 5: {\n            goto lab_0x40f640;\n        }\n        default: {\n            // 0x40f723\n            __assert_fail(\"0\", \"lib/savewd.c\", 159, \"savewd_chdir\");\n            fd2 = fd;\n            v17 = true;\n            result = 0xfffffffe;\n            goto lab_0x40f640;\n        }\n    }\n  lab_0x40f68b:;\n    int64_t v23 = v12;\n    int32_t * v24 = v11;\n    int32_t v25 = fork(); // 0x40f68b\n    *v24 = v25;\n    path = v23;\n    if (v25 == 0) {\n        goto lab_0x40f5c0;\n    } else {\n        if (v25 >= 0) {\n            // 0x40f69b\n            fd2 = v2;\n            v17 = true;\n            result = 0xfffffffe;\n            goto lab_0x40f640;\n        } else {\n            // 0x40f6a1\n            *(int32_t *)a1 = 4;\n            *v24 = *__errno_location();\n            path = v23;\n            goto lab_0x40f5c0;\n        }\n    }\n  lab_0x40f6e8:;\n    int64_t v26 = v13;\n    int32_t v27 = *__errno_location(); // 0x40f6ed\n    switch (v27) {\n        case 13: {\n            goto lab_0x40f710;\n        }\n        case 116: {\n            goto lab_0x40f710;\n        }\n        default: {\n            // 0x40f6f9\n            *(int32_t *)a1 = 4;\n            *(int32_t *)(a1 + 4) = v27;\n            path = v26;\n            goto lab_0x40f5c0;\n        }\n    }\n  lab_0x40f640:\n    // 0x40f640\n    if (fd2 < 0 || !v17) {\n        // 0x40f5e3\n        return result & 0xffffffff;\n    }\n    int32_t * v28 = __errno_location(); // 0x40f649\n    close(fd2);\n    return result;\n  lab_0x40f710:\n    // 0x40f710\n    *(int64_t *)a1 = -0xfffffffd;\n    v11 = (int32_t *)(a1 + 4);\n    v12 = v26;\n    goto lab_0x40f68b;\n}\n"
        },
        {
            "funcName": "function_40f770",
            "funcStartAddr": "40f770",
            "funcEndAddr": "40f896",
            "decompiledFuncCode": "int64_t function_40f770(int64_t * a1) {\n    int64_t v1 = (int64_t)a1;\n    g93 = v1 & 0xffffffff;\n    switch ((int32_t)v1) {\n        case 0: {\n        }\n        case 1: {\n            // 0x40f79d\n            return 0;\n        }\n        case 2: {\n            int32_t * fd = (int32_t *)(v1 + 4);\n            int32_t result = fchdir(*fd); // 0x40f813\n            if (result == 0) {\n                // 0x40f81c\n                *(int32_t *)a1 = 1;\n                return result;\n            }\n            int32_t * v2 = __errno_location(); // 0x40f83b\n            int32_t v3 = *v2; // 0x40f843\n            close(*fd);\n            *(int32_t *)a1 = 4;\n            *fd = v3;\n            // 0x40f7bc\n            *v2 = v3;\n            return 0xffffffff;\n        }\n        case 3: {\n            int32_t * v4 = (int32_t *)(v1 + 4);\n            int32_t pid = *v4; // 0x40f790\n            if (pid == 0) {\n                // 0x40f88f\n                int64_t status; // 0x40f770\n                _exit((int32_t)status);\n                // UNREACHABLE\n            }\n            if (pid < 0) {\n                // 0x40f79d\n                return 0;\n            }\n            int32_t stat_loc; // bp-28, 0x40f770\n            while (waitpid(pid, &stat_loc, 0) < 0) {\n                // 0x40f7d0\n                if (*__errno_location() != 4) {\n                    // 0x40f85d\n                    __assert_fail(\"(*__errno_location ()) == 4\", \"lib/savewd.c\", 216, \"savewd_restore\");\n                    goto lab_0x40f876;\n                }\n            }\n            // 0x40f7f0\n            *v4 = -1;\n            uint32_t sig_num = stat_loc % 128; // 0x40f7fd\n            if (sig_num != 0) {\n                // 0x40f830\n                raise(sig_num);\n            }\n            // 0x40f802\n            return stat_loc / 256 % 256;\n        }\n        case 4: {\n            // 0x40f7bc\n            *__errno_location() = *(int32_t *)(v1 + 4);\n            return 0xffffffff;\n        }\n    }\n  lab_0x40f876:\n    // 0x40f876\n    __assert_fail(\"0\", \"lib/savewd.c\", 226, \"savewd_restore\");\n    // 0x40f88f\n    _exit((int32_t)(int64_t)\"lib/savewd.c\");\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40f8a0",
            "funcStartAddr": "40f8a0",
            "funcEndAddr": "40f910",
            "decompiledFuncCode": "int64_t function_40f8a0(int64_t * a1) {\n    int64_t v1 = (int64_t)a1;\n    int64_t result = v1 & 0xffffffff; // 0x40f8a6\n    g94 = result;\n    switch ((int32_t)v1) {\n        case 0: {\n        }\n        case 4: {\n            // 0x40f8c0\n            *(int32_t *)a1 = 5;\n            return result;\n        }\n        case 1: {\n        }\n        case 2: {\n            int64_t result2 = close(*(int32_t *)(v1 + 4));\n            *(int32_t *)a1 = 5;\n            return result2;\n        }\n        case 3: {\n            uint32_t result3 = *(int32_t *)(v1 + 4); // 0x40f8d0\n            if (result3 < 0) {\n                // 0x40f8c0\n                *(int32_t *)a1 = 5;\n                return result3;\n            }\n            // break -> 0x40f8d7\n            break;\n        }\n        default: {\n            // 0x40f8f0\n            __assert_fail(\"0\", \"lib/savewd.c\", 251, \"savewd_finish\");\n            return &g90;\n        }\n    }\n    // 0x40f8d7\n    __assert_fail(\"wd->val.child < 0\", \"lib/savewd.c\", 247, \"savewd_finish\");\n    // 0x40f8f0\n    __assert_fail(\"0\", \"lib/savewd.c\", 251, \"savewd_finish\");\n    return &g90;\n}\n"
        },
        {
            "funcName": "function_40f910",
            "funcStartAddr": "40f910",
            "funcEndAddr": "40fa58",
            "decompiledFuncCode": "int64_t function_40f910(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    // 0x40f910\n    int32_t v1; // 0x40f910\n    int32_t v2 = v1;\n    int64_t v3 = a1 + 0xffffffff; // 0x40f912\n    int64_t v4 = 0x100000000 * a1;\n    int32_t v5 = 0; // bp-64, 0x40f930\n    int32_t v6 = v3;\n    int64_t v7 = 0; // 0x40f93e\n    int64_t v8 = 0; // 0x40f93e\n    if (v6 >= 0) {\n        int32_t v9 = v6; // 0x40f94f\n        int64_t v10 = v3; // 0x40f94f\n        if (*(char *)*(int64_t *)((0x100000000 * v3 >> 29) + a2) == 47) {\n            int64_t v11 = v4 - 0x200000000 >> 32;\n            int32_t v12 = v11;\n            v9 = v12;\n            v10 = v11;\n            while (v12 >= 0) {\n                // 0x40f960\n                v9 = v12;\n                v10 = v11;\n                if (*(char *)*(int64_t *)(8 * v11 + a2) != 47) {\n                    // break -> 0x40f973\n                    break;\n                }\n                v11--;\n                v12 = v11;\n                v9 = v12;\n                v10 = v11;\n            }\n        }\n        // 0x40f973\n        v7 = 0;\n        v8 = 0;\n        if (v9 >= 1) {\n            int64_t v13 = v10 & 0xffffffff;\n            int64_t v14 = a2; // 0x40f991\n            int64_t v15 = 0;\n            int64_t v16 = 0;\n            int64_t v17 = v16; // 0x40f9da\n            int64_t v18; // 0x40f910\n            int64_t v19; // 0x40f910\n            int32_t v20; // 0x40f9a6\n            int32_t v21; // 0x40f9a6\n            if (v2 >= 0 != v2 != 0 || v15 != 3) {\n                // 0x40f998\n                v19 = v15 != 3 ? v15 : (int64_t)v2;\n                v20 = v16;\n                v21 = v20 - (int32_t)v19;\n                v18 = v21 < 0 == ((v21 ^ v20) & (int32_t)(v19 ^ v16)) < 0 ? v16 : v19;\n                v17 = v18 & 0xffffffff;\n            }\n            int64_t v22 = v17;\n            v14 += 8;\n            int64_t v23 = v22; // 0x40f9b4\n            int64_t v24; // 0x40f910\n            int64_t v25; // 0x40f9bc\n            int32_t v26; // 0x40f9c1\n            int32_t v27; // 0x40f9c1\n            if (*(char *)*(int64_t *)v14 != 47) {\n                // 0x40f9b6\n                v25 = function_40f770((int64_t *)&v5);\n                v26 = v22;\n                v27 = v26 - (int32_t)v25;\n                v24 = v27 < 0 == ((v27 ^ v26) & (int32_t)(v25 ^ v22)) < 0 ? v22 : v25;\n                v23 = v24 & 0xffffffff;\n            }\n            int64_t v28 = v23;\n            v7 = v13;\n            v8 = v28;\n            while (v14 != a2 + 8 + (8 * v13 + 0x7fffffff8 & 0x7fffffff8)) {\n                // 0x40f9d3\n                v15 = v5;\n                v16 = v28;\n                v17 = v16;\n                if (v2 >= 0 != v2 != 0 || v15 != 3) {\n                    // 0x40f998\n                    v19 = v15 != 3 ? v15 : (int64_t)v2;\n                    v20 = v16;\n                    v21 = v20 - (int32_t)v19;\n                    v18 = v21 < 0 == ((v21 ^ v20) & (int32_t)(v19 ^ v16)) < 0 ? v16 : v19;\n                    v17 = v18 & 0xffffffff;\n                }\n                // 0x40f9ad\n                v22 = v17;\n                v14 += 8;\n                v23 = v22;\n                if (*(char *)*(int64_t *)v14 != 47) {\n                    // 0x40f9b6\n                    v25 = function_40f770((int64_t *)&v5);\n                    v26 = v22;\n                    v27 = v26 - (int32_t)v25;\n                    v24 = v27 < 0 == ((v27 ^ v26) & (int32_t)(v25 ^ v22)) < 0 ? v22 : v25;\n                    v23 = v24 & 0xffffffff;\n                }\n                // 0x40f9c8\n                v28 = v23;\n                v7 = v13;\n                v8 = v28;\n            }\n        }\n    }\n    // 0x40fa00\n    function_40f8a0((int64_t *)&v5);\n    if (v4 >> 32 <= v7) {\n        // 0x40fa46\n        return v8 & 0xffffffff;\n    }\n    int64_t v29 = 0x100000000 * v7;\n    int64_t v30 = (v29 >> 32) + (v3 - v7 & 0xffffffff); // 0x40fa1b\n    int64_t v31 = (v29 >> 29) + a2; // 0x40fa23\n    int64_t v32 = v8;\n    int32_t v33 = v32; // 0x40fa36\n    int32_t v34 = v33 - (int32_t)v30; // 0x40fa36\n    int64_t v35 = v34 < 0 == ((v34 ^ v33) & (int32_t)(v32 ^ v30)) < 0 ? v32 : v30;\n    int64_t v36 = v35 & 0xffffffff; // 0x40fa39\n    v31 += 8;\n    while (v31 != a2 + 8 + 8 * v30) {\n        // 0x40fa28\n        v32 = v36;\n        v33 = v32;\n        v34 = v33 - (int32_t)v30;\n        v35 = v34 < 0 == ((v34 ^ v33) & (int32_t)(v32 ^ v30)) < 0 ? v32 : v30;\n        v36 = v35 & 0xffffffff;\n        v31 += 8;\n    }\n    // 0x40fa46\n    return v36 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40fa60",
            "funcStartAddr": "40fa60",
            "funcEndAddr": "40fab4",
            "decompiledFuncCode": "int64_t function_40fa60(int64_t a1) {\n    // 0x40fa60\n    int64_t v1; // bp-152, 0x40fa60\n    int32_t v2 = __lxstat(1, (char *)a1, (struct stat *)&v1); // 0x40fa73\n    int32_t * v3 = __errno_location(); // 0x40fa7a\n    if (v2 == 0) {\n        // 0x40faa0\n        *v3 = 17;\n        return 0xffffffff;\n    }\n    int32_t v4 = *v3; // 0x40fa83\n    if (v4 != 75) {\n        // 0x40fa8a\n        return v4 != 2 ? 0xffffffff : 0;\n    }\n    // 0x40faa0\n    *v3 = 17;\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40fac0",
            "funcStartAddr": "40fac0",
            "funcEndAddr": "40faca",
            "decompiledFuncCode": "int64_t function_40fac0(void) {\n    // 0x40fac0\n    int64_t path; // 0x40fac0\n    return mkdir((char *)path, 448);\n}\n"
        },
        {
            "funcName": "function_40fad0",
            "funcStartAddr": "40fad0",
            "funcEndAddr": "40fae6",
            "decompiledFuncCode": "int64_t function_40fad0(void) {\n    // 0x40fad0\n    int64_t path; // 0x40fad0\n    return open((char *)path, (int32_t)path & -196 | 194);\n}\n"
        },
        {
            "funcName": "function_40faf0",
            "funcStartAddr": "40faf0",
            "funcEndAddr": "40faf1",
            "decompiledFuncCode": "int64_t function_40faf0(void) {\n    // 0x40faf0\n    int64_t result; // 0x40faf0\n    return result;\n}\n"
        },
        {
            "funcName": "function_40fb10",
            "funcStartAddr": "40fb10",
            "funcEndAddr": "40fc6d",
            "decompiledFuncCode": "int64_t function_40fb10(int64_t str, int32_t a2, int64_t * a3, int64_t a4, uint64_t a5) {\n    int32_t * v1 = __errno_location(); // 0x40fb35\n    int32_t v2 = *v1; // 0x40fb40\n    uint64_t len = (int64_t)strlen((char *)str); // 0x40fb46\n    uint64_t v3 = (int64_t)a2 + a5; // 0x40fb4e\n    if (v3 > len) {\n        // 0x40fc58\n        *v1 = 22;\n        // 0x40fc40\n        return 0xffffffff;\n    }\n    int64_t str2 = len - v3 + str;\n    if ((int64_t)strspn((char *)str2, \"X\") < a5) {\n        // 0x40fc58\n        *v1 = 22;\n        // 0x40fc40\n        return 0xffffffff;\n    }\n    int64_t v4 = function_413800(); // 0x40fb84\n    if (v4 == 0) {\n        // 0x40fc40\n        return 0xffffffff;\n    }\n    int32_t v5 = 0x3a2f8; // 0x40fba6\n    int64_t v6; // 0x40fb10\n    int64_t v7; // 0x40fbc8\n    int64_t v8; // 0x40fbcc\n    char v9; // 0x40fbd1\n    if (a5 != 0) {\n        v7 = str2 + 1;\n        v8 = function_413840(v4, 61);\n        v9 = *(char *)(v8 + (int64_t)\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\n        *(char *)str2 = v9;\n        v6 = v7;\n        while (v7 != str2 + a5) {\n            // 0x40fbc0\n            v7 = v6 + 1;\n            v8 = function_413840(v4, 61);\n            v9 = *(char *)(v8 + (int64_t)\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\n            *(char *)v6 = v9;\n            v6 = v7;\n        }\n    }\n    int32_t v10; // 0x40fb10\n    int64_t v11; // 0x40fb10\n    int64_t result; // 0x40fb10\n    while ((int32_t)a4 < 0) {\n        int32_t v12 = *v1; // 0x40fbf8\n        v10 = v12;\n        v11 = 0xffffffff;\n        if (v12 != 17) {\n            goto lab_0x40fc25;\n        }\n        // 0x40fc00\n        v5--;\n        if (v5 == 0) {\n            // 0x40fc06\n            function_413960(v4);\n            *v1 = 17;\n            result = 0xffffffff;\n            return result;\n        }\n        if (a5 != 0) {\n            v7 = str2 + 1;\n            v8 = function_413840(v4, 61);\n            v9 = *(char *)(v8 + (int64_t)\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\n            *(char *)str2 = v9;\n            v6 = v7;\n            while (v7 != str2 + a5) {\n                // 0x40fbc0\n                v7 = v6 + 1;\n                v8 = function_413840(v4, 61);\n                v9 = *(char *)(v8 + (int64_t)\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\n                *(char *)v6 = v9;\n                v6 = v7;\n            }\n        }\n    }\n    // 0x40fc1c\n    *v1 = v2;\n    v10 = v2;\n    v11 = a4 & 0xffffffff;\n  lab_0x40fc25:\n    // 0x40fc25\n    function_413960(v4);\n    *v1 = v10;\n    result = v11;\n  lab_0x40fc40:\n    // 0x40fc40\n    return result;\n}\n"
        },
        {
            "funcName": "function_40fc70",
            "funcStartAddr": "40fc70",
            "funcEndAddr": "40fceb",
            "decompiledFuncCode": "int64_t function_40fc70(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a3 >> 32; // bp-12, 0x40fc74\n    if ((int32_t)a4 < 3) {\n        int64_t v2 = *(int64_t *)((8 * a4 & 0x7fffffff8) + (int64_t)&g14); // 0x40fc84\n        int64_t v3; // 0x40fc70\n        return function_40fb10(a1, (int32_t)a2, &v1, v2, v3);\n    }\n    // 0x40fccc\n    function_40faf0();\n    function_40faf0();\n    return function_40fb10(a1, (int32_t)a2, (int64_t *)a3, a4, 6);\n}\n"
        },
        {
            "funcName": "function_40fcf0",
            "funcStartAddr": "40fcf0",
            "funcEndAddr": "40fd3e",
            "decompiledFuncCode": "int64_t function_40fcf0(int64_t a1) {\n    uint32_t fd = (int32_t)a1; // 0x40fcfc\n    if (fd >= 3) {\n        // 0x40fd01\n        return a1 & 0xffffffff;\n    }\n    // 0x40fd10\n    int64_t v1; // 0x40fcf0\n    int64_t v2 = function_4143d0(a1, v1); // 0x40fd10\n    int32_t * v3 = __errno_location(); // 0x40fd18\n    close(fd);\n    return v2 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40fd40",
            "funcStartAddr": "40fd40",
            "funcEndAddr": "40fd4c",
            "decompiledFuncCode": "int64_t function_40fd40(uint64_t a1, uint64_t a2, int64_t a3) {\n    // 0x40fd40\n    return a1 % a2;\n}\n"
        },
        {
            "funcName": "function_40fd50",
            "funcStartAddr": "40fd50",
            "funcEndAddr": "40fd5a",
            "decompiledFuncCode": "int64_t function_40fd50(int64_t a1, int64_t a2) {\n    // 0x40fd50\n    return a2 & -256 | (int64_t)(bool)(a1 == a2);\n}\n"
        },
        {
            "funcName": "function_40fd60",
            "funcStartAddr": "40fd60",
            "funcEndAddr": "4104c9",
            "decompiledFuncCode": "int64_t function_40fd60(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = *(int64_t *)(a3 + 96); // 0x40fd73\n    int64_t v2 = *(int64_t *)(a2 + 88); // 0x40fd77\n    int64_t v3 = *(int64_t *)(a3 + 88); // 0x40fd7b\n    int64_t v4 = *(int64_t *)(a2 + 96); // 0x40fd7f\n    int64_t v5 = v1 & 0xffffffff; // 0x40fd83\n    uint32_t v6 = (int32_t)a4 % 2; // 0x40fd86\n    int64_t v7 = v3; // 0x40fd89\n    int64_t v8 = v5; // 0x40fd89\n    int64_t v9; // 0x40fd60\n    int64_t v10; // bp-248, 0x40fd60\n    int32_t v11; // 0x40fd60\n    int32_t v12; // 0x40fd96\n    int32_t v13; // 0x40fd60\n    int64_t result; // 0x40fd86\n    int64_t v14; // 0x40fec7\n    if (v6 == 0) {\n        goto lab_0x40fe50;\n    } else {\n        // 0x40fd8f\n        v12 = v4;\n        v13 = v1;\n        if (v2 == v3 == v12 == v13) {\n            // 0x40fe67\n            return 0;\n        }\n        // 0x40fdac\n        if (v3 - 1 > v2) {\n            // 0x40fe67\n            return 0xffffffff;\n        }\n        // 0x40fdb9\n        result = v6;\n        if (v2 - 1 > v3) {\n            // 0x40fe67\n            return result;\n        }\n        // 0x40fdc7\n        v14 = g75;\n        if (g75 == 0) {\n            // 0x40feb0\n            v14 = function_40bb50(16, 0, 0x40fd40, 0x40fd50, 0x402860);\n            g75 = v14;\n            if (v14 != 0) {\n                goto lab_0x40fde1;\n            } else {\n                // 0x40fedf\n                v11 = 0x77359400;\n                v9 = &v10;\n                goto lab_0x40fefc;\n            }\n        } else {\n            goto lab_0x40fde1;\n        }\n    }\n  lab_0x40fe50:\n    // 0x40fe50\n    if (v7 > v2) {\n        // 0x40fe67\n        return 0xffffffff;\n    }\n    // 0x40fe55\n    if (v7 != v2) {\n        // 0x40fe67\n        return 1;\n    }\n    int64_t result2 = 0xffffffff; // 0x40fe5f\n    if (v8 <= v4) {\n        int32_t v15 = v8; // 0x40fe5c\n        int32_t v16 = v15 - (int32_t)v4; // 0x40fe5c\n        result2 = v16 < 0 != ((v16 ^ v15) & (int32_t)(v8 ^ v4)) < 0;\n    }\n    // 0x40fe67\n    return result2;\n  lab_0x40fde1:;\n    int64_t v17 = v14; // 0x40fdeb\n    int64_t v18 = g74; // 0x40fdeb\n    int32_t v19; // 0x40fd60\n    if (g74 == 0) {\n        int64_t * mem = malloc(16); // 0x41034a\n        int64_t v20 = (int64_t)mem; // 0x41034a\n        g74 = v20;\n        if (mem == NULL) {\n            // 0x41042f\n            v19 = g75;\n            goto lab_0x410390;\n        } else {\n            // 0x410362\n            *(int32_t *)(v20 + 8) = 0x77359400;\n            *(char *)(v20 + 12) = 0;\n            v17 = 0x100000000 * v14 >> 32;\n            v18 = v20;\n            goto lab_0x40fdf1;\n        }\n    } else {\n        goto lab_0x40fdf1;\n    }\n  lab_0x40fdf1:;\n    int64_t v21 = v18;\n    *(int64_t *)v21 = v21;\n    int64_t v22 = function_40c2f0(v17, v21); // 0x40fdff\n    int64_t v23; // 0x40fd60\n    if (v22 == 0) {\n        // 0x410380\n        v19 = g75;\n        if (g75 == 0) {\n            // 0x40fedf\n            v11 = 0x77359400;\n            v9 = &v10;\n            goto lab_0x40fefc;\n        } else {\n            goto lab_0x410390;\n        }\n    } else {\n        // 0x40fe10\n        v23 = v22;\n        if (g74 == v22) {\n            // 0x4103c8\n            g74 = 0;\n            v23 = v22;\n        }\n        goto lab_0x40fe1d;\n    }\n  lab_0x40fefc:;\n    int64_t v24 = *(int64_t *)(a2 + 80); // 0x40ff07\n    int64_t v25 = *(int64_t *)(a2 + 112); // 0x40ff0b\n    int32_t v26 = v24; // 0x40ff11\n    int32_t v27 = ((int32_t)(0x66666667 * (0x100000000 * v24 >> 32) / 0x100000000) >> 2) - (v26 >> 31); // 0x40ff21\n    int32_t v28 = v25; // 0x40ff25\n    int32_t v29 = ((int32_t)(0x66666667 * (0x100000000 * v25 >> 32) / 0x100000000) >> 2) - (v28 >> 31); // 0x40ff3c\n    int64_t v30 = 0x100000000 * v4 >> 32; // 0x40ff51\n    int32_t v31 = ((int32_t)(0x66666667 * v30 / 0x100000000) >> 2) - (v12 >> 31); // 0x40ff5c\n    int64_t v32 = result; // 0x40ff6d\n    int64_t v33 = v3; // 0x40ff6d\n    int64_t v34 = v9; // 0x40ff6d\n    int64_t v35 = v5; // 0x40ff6d\n    int64_t v36; // 0x40fd60\n    int64_t v37; // 0x40fd60\n    int64_t v38; // 0x40fd60\n    int64_t v39; // 0x40fd60\n    int64_t v40; // 0x40ff83\n    if ((-10 * v27 + v26 || -10 * v31 + v12 || -10 * v29 + v28) != 0) {\n        goto lab_0x410330;\n    } else {\n        // 0x40ff73\n        v40 = *(int64_t *)(a2 + 72);\n        if (v11 < 11) {\n            // 0x410463\n            *(int32_t *)(v9 + 8) = 10;\n            v38 = v3;\n            v39 = v3;\n            v36 = 10;\n            v37 = v9;\n        } else {\n            if ((v27 % 10 || v31 % 10 || v29 % 10) != 0) {\n                // 0x410453\n                *(int32_t *)(v9 + 8) = 10;\n                v38 = v3;\n                v39 = v3;\n                v36 = 10;\n                v37 = v9;\n            } else {\n                int32_t v41 = v27; // 0x410019\n                int32_t v42 = v29; // 0x410019\n                int32_t v43 = v31; // 0x410019\n                int32_t v44 = 8; // 0x410019\n                int64_t v45 = 100; // 0x410031\n                int64_t v46 = v45 & 0xfffffffc; // 0x410031\n                while (v46 < (int64_t)v11) {\n                    int32_t v47 = v43;\n                    int32_t v48 = v42;\n                    int32_t v49 = v41;\n                    v41 = v49 / 10;\n                    v42 = v48 / 10;\n                    v43 = v47 / 10;\n                    if ((-10 * v48 / 100 + v42 || -10 * v49 / 100 + v41 || -10 * v47 / 100 + v43) != 0) {\n                        // break -> 0x4103e0\n                        break;\n                    }\n                    // 0x4100b2\n                    v44--;\n                    if (v44 == 0) {\n                        int64_t v50 = 0x100000000 * v3 >> 32; // 0x4100c6\n                        int64_t v51 = 0x100000000000000 * v9 >> 56; // 0x4100d7\n                        int32_t * v52 = (int32_t *)(v51 + 8);\n                        if ((v40 | v2 | *(int64_t *)(a2 + 104)) % 2 == 0) {\n                            // 0x410410\n                            *v52 = 0x77359400;\n                            v38 = v50 & -2;\n                            v39 = v50;\n                            v36 = 0x77359400;\n                            v37 = v51;\n                            goto lab_0x4100f5;\n                        } else {\n                            // 0x4100e4\n                            *v52 = 0x3b9aca00;\n                            v38 = v50;\n                            v39 = v50;\n                            v36 = 0x3b9aca00;\n                            v37 = v51;\n                            goto lab_0x4100f5;\n                        }\n                    }\n                    v45 = 10 * v46;\n                    v46 = v45 & 0xfffffffc;\n                }\n                int32_t v53 = v45; // 0x4103e0\n                int64_t v54 = 0x100000000 * v3 >> 32; // 0x4103e7\n                int64_t v55 = 0x100000000000000 * v9 >> 56; // 0x4103ec\n                *(int32_t *)(v55 + 8) = v53;\n                v38 = v54 & (int64_t)(v53 == 0x77359400) - 1;\n                v39 = v54;\n                v36 = v46;\n                v37 = v55;\n            }\n        }\n        goto lab_0x4100f5;\n    }\n  lab_0x410330:\n    // 0x410330\n    *(int32_t *)(v34 + 8) = (int32_t)v32;\n    *(char *)(v34 + 12) = 1;\n    v7 = v33;\n    v8 = v35;\n    goto lab_0x40fe50;\n  lab_0x410390:;\n    int64_t v56 = &v10; // 0x41039a\n    v10 = v56;\n    int64_t v57 = function_40b8e0((int64_t)v19, &v10); // 0x4103aa\n    v23 = v57;\n    v11 = 0x77359400;\n    v9 = 0x100000000 * v56 >> 32;\n    if (v57 != 0) {\n        goto lab_0x40fe1d;\n    } else {\n        goto lab_0x40fefc;\n    }\n  lab_0x40fe1d:;\n    uint32_t v58 = *(int32_t *)(v23 + 8); // 0x40fe1d\n    v11 = v58;\n    v9 = v23;\n    if (*(char *)(v23 + 12) == 0) {\n        goto lab_0x40fefc;\n    } else {\n        // 0x40fe30\n        v7 = v3 & (int64_t)(v58 == 0x77359400) - 1;\n        v8 = v1 - (0x100000000 * (int64_t)(v13 >> 31) | v5) % (int64_t)v58 & 0xffffffff;\n        goto lab_0x40fe50;\n    }\n  lab_0x4100f5:\n    // 0x4100f5\n    if (v2 > v39 || v4 >= v1 == v2 == v3) {\n        // 0x40fe67\n        return result;\n    }\n    // 0x41010d\n    if (v2 < v38) {\n        // 0x40fe67\n        return 0xffffffff;\n    }\n    // 0x410116\n    if (v2 == v38) {\n        // 0x40fe84\n        if ((v1 - (0x100000000 * (int64_t)(v13 >> 31) | v5) % v36 & 0xffffffff) > v4) {\n            // 0x40fe67\n            return 0xffffffff;\n        }\n    }\n    int64_t v59 = v40; // bp-232, 0x410130\n    int32_t * v60 = (int32_t *)(a2 + 24); // 0x410163\n    int64_t v61; // 0x40fd60\n    if ((*v60 & 0xf000) == 0xa000) {\n        // 0x41043b\n        v61 = function_410ab0(a1, &v59, 0x38e38e39 * v36 / 0x200000000);\n    } else {\n        // 0x41018a\n        v61 = function_410aa0(a1, &v59);\n    }\n    // 0x41019d\n    if ((int32_t)v61 != 0) {\n        // 0x40fe67\n        return 0xfffffffe;\n    }\n    char * v62 = (char *)a1;\n    int64_t v63; // bp-200, 0x40fd60\n    int32_t v64; // 0x40fd60\n    if ((*v60 & 0xf000) == 0xa000) {\n        // 0x410479\n        v64 = __lxstat(1, v62, (struct stat *)&v63);\n    } else {\n        // 0x4101db\n        v64 = __xstat(1, v62, (struct stat *)&v63);\n    }\n    // 0x4101ec\n    int32_t v65; // 0x40fd60\n    uint64_t v66 = (int64_t)v65; // 0x4101ec\n    int64_t v67 = v65; // 0x4101f4\n    int64_t v68 = v30 ^ v67 | v2 ^ v66 | (int64_t)v64; // 0x410211\n    if (v68 != 0) {\n        int64_t * v69 = (int64_t *)(0x100000000000000 * (int64_t)&v59 >> 56);\n        if ((*v60 & 0xf000) == 0xa000) {\n            // 0x4104a3\n            function_410ab0(a1, v69, v68);\n        } else {\n            // 0x410250\n            function_410aa0(a1, v69);\n        }\n        // 0x410263\n        if (v64 != 0) {\n            // 0x40fe67\n            return 0xfffffffe;\n        }\n    }\n    int64_t v70 = 0x3b9aca00 * (v66 % 2) + v67; // 0x410290\n    int32_t v71 = v70; // 0x410298\n    int64_t v72 = -1; // 0x4102a9\n    int64_t v73 = result; // 0x4102a9\n    if (10 * (((int32_t)(0x66666667 * (0x100000000 * v70 >> 32) / 0x100000000) >> 2) - (v71 >> 31)) == v71) {\n        // 0x4102af\n        v72 = -1;\n        v73 = 10;\n        if (v36 != 10) {\n            int64_t v74 = 10; // 0x4102d3\n            int32_t v75 = 9; // 0x410307\n            int64_t v76 = v70 & 0xffffffff;\n            int32_t v77 = ((int32_t)(0x66666667 * (0x100000000 * v76 >> 32) / 0x100000000) >> 2) - ((int32_t)v76 >> 31); // 0x4102e8\n            int64_t v78 = v74; // 0x410301\n            while (v77 % 10 == 0) {\n                // 0x410307\n                v75--;\n                v72 = -2;\n                v73 = 0x77359400;\n                if (v75 == 0) {\n                    goto lab_0x410318;\n                }\n                int64_t v79 = 10 * v74; // 0x4102d3\n                v74 = v79 & 0xfffffffc;\n                v78 = v74;\n                if ((int32_t)v79 == (int32_t)v36) {\n                    // break -> 0x41048f\n                    break;\n                }\n                v76 = v77;\n                v77 = ((int32_t)(0x66666667 * (0x100000000 * v76 >> 32) / 0x100000000) >> 2) - ((int32_t)v76 >> 31);\n                v78 = v74;\n            }\n            // 0x41048f\n            v72 = (int64_t)((int32_t)v78 == 0x77359400) - 1;\n            v73 = v78;\n        }\n    }\n  lab_0x410318:\n    // 0x410318\n    v32 = v73;\n    v33 = v72 & v39;\n    v34 = 0x100000000000000 * v37 >> 56;\n    v35 = v1 - (0x100000000 * (int64_t)(v13 >> 31) | v5) % (v73 & 0xffffffff) & 0xffffffff;\n    goto lab_0x410330;\n}\n"
        },
        {
            "funcName": "function_4104d0",
            "funcStartAddr": "4104d0",
            "funcEndAddr": "41059e",
            "decompiledFuncCode": "int64_t function_4104d0(int64_t * a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2;\n    int64_t v2 = (int64_t)a1;\n    int64_t * v3 = (int64_t *)(v1 + 8); // 0x4104dc\n    int64_t * v4 = (int64_t *)(v1 + 24); // 0x4104e0\n    int64_t v5 = *v4; // 0x4104e0\n    int64_t v6; // 0x4104d0\n    switch (*v3) {\n        case 0x3ffffffe: {\n            // 0x410520\n            if (v5 == 0x3ffffffe) {\n                // 0x41050f\n                return 1;\n            }\n            // 0x41052e\n            *a2 = *(int64_t *)(v2 + 72);\n            *v3 = *(int64_t *)(v2 + 80);\n            v6 = v5;\n            goto lab_0x41053d;\n        }\n        case 0x3fffffff: {\n            if (v5 == 0x3fffffff) {\n                // 0x410590\n                *a2 = 0;\n                // 0x41050f\n                return 0;\n            }\n            // 0x410571\n            function_412f80(v1);\n            int64_t v7 = *v4; // 0x410579\n            v6 = v7;\n            if (v7 == 0x3ffffffe) {\n                goto lab_0x4104fd;\n            } else {\n                goto lab_0x41053d;\n            }\n        }\n        default: {\n            // 0x4104f4\n            v6 = v5;\n            if (v5 != 0x3ffffffe) {\n                goto lab_0x41053d;\n            } else {\n                goto lab_0x4104fd;\n            }\n        }\n    }\n  lab_0x41053d:\n    // 0x41053d\n    if (v6 == 0x3fffffff) {\n        // 0x410548\n        function_412f80(v1 + 16);\n        return 0;\n    }\n    // 0x41050f\n    return 0;\n  lab_0x4104fd:\n    // 0x4104fd\n    *(int64_t *)(v1 + 16) = *(int64_t *)(v2 + 88);\n    *v4 = *(int64_t *)(v2 + 96);\n    // 0x41050f\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4105a0",
            "funcStartAddr": "4105a0",
            "funcEndAddr": "410649",
            "decompiledFuncCode": "int64_t function_4105a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x4105a0\n    uint64_t v2 = v1 - 0x3ffffffe; // 0x4105a4\n    if (v1 >= 0x3b9aca00 && v1 != 0x3fffffff && v2 != 0) {\n        // 0x410630\n        *__errno_location() = 22;\n        return 0xffffffff;\n    }\n    uint64_t v3 = *(int64_t *)(a1 + 24); // 0x4105ba\n    uint64_t v4 = v3 - 0x3ffffffe; // 0x4105be\n    if (v3 >= 0x3b9aca00 && v3 != 0x3fffffff && v4 != 0) {\n        // 0x410630\n        *__errno_location() = 22;\n        return 0xffffffff;\n    }\n    int64_t v5 = 0; // 0x4105dd\n    int64_t v6 = 0; // 0x4105dd\n    if (v2 < 2) {\n        // 0x4105df\n        *(int64_t *)a1 = 0;\n        v5 = v1 == 0x3ffffffe;\n        v6 = 1;\n    }\n    int64_t v7 = v5; // 0x4105fc\n    int64_t v8 = v6; // 0x4105fc\n    if (v4 < 2) {\n        // 0x4105fe\n        *(int64_t *)(a1 + 16) = 0;\n        v7 = v5 + (int64_t)(v3 == 0x3ffffffe);\n        v8 = 1;\n    }\n    // 0x41061a\n    return v8 + (int64_t)((int32_t)v7 == 1) & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_410650",
            "funcStartAddr": "410650",
            "funcEndAddr": "41065a",
            "decompiledFuncCode": "int64_t function_410650(void) {\n    struct timespec v1; // 0x410655\n    struct timespec times[2]; // 0x410655\n    // 0x410650\n    v1 = (struct {int64_t e0; int32_t e1;}){\n        .e0 = 0,\n        .e1 = 0\n    };\n    int64_t fd; // 0x410650\n    v1.e0 = fd;\n    times[0] = v1;\n    return utimensat((int32_t)fd, (char *)fd, times, AT_SYMLINK_NOFOLLOW);\n}\n"
        },
        {
            "funcName": "function_410660",
            "funcStartAddr": "410660",
            "funcEndAddr": "410a9e",
            "decompiledFuncCode": "int64_t function_410660(int64_t a1, int64_t path, int64_t * a3, int64_t a4) {\n    struct timeval v1; // 0x4107d0\n    struct timeval v2[2]; // 0x4107d0\n    struct timeval v3; // 0x410842\n    struct timeval v4[2]; // 0x410842\n    struct timespec v5; // 0x4108fd\n    struct timespec times[2]; // 0x4108fd\n    struct timespec v6; // 0x4106da\n    struct timespec times2[2]; // 0x4106da\n    struct timeval v7; // 0x4109f0\n    struct timeval v8[2]; // 0x4109f0\n    int64_t v9 = (int64_t)a3;\n    int64_t v10; // 0x410660\n    int64_t v11; // bp-288, 0x410660\n    if (a3 == NULL) {\n        // 0x410850\n        v11 = 0;\n        v10 = 0;\n    } else {\n        int128_t v12 = *(int128_t *)&v9; // 0x41067d\n        int128_t v13 = __asm_movdqu(v12); // 0x41067d\n        int64_t v14 = v12;\n        int128_t v15 = __asm_movdqu(*(int128_t *)(v14 + 16)); // 0x410681\n        int64_t v16; // bp-280, 0x410660\n        int64_t v17 = &v16; // 0x410686\n        v11 = v17;\n        v16 = __asm_movaps(v13);\n        __asm_movaps(v15);\n        int64_t v18 = function_4105a0(v17, path, v14, a4); // 0x41069a\n        v10 = v18 & 0xffffffff;\n        if ((int32_t)v18 < 0) {\n            // 0x410818\n            return -1;\n        }\n    }\n    int32_t fd = a1; // 0x4106aa\n    if (fd < 0 == path == 0) {\n        // 0x410a48\n        *__errno_location() = 9;\n        // 0x410818\n        return -1;\n    }\n    // 0x4106b7\n    int32_t result; // 0x410660\n    int64_t v19; // bp-184, 0x410660\n    bool v20; // 0x410660\n    if (g77 < 0) {\n        goto lab_0x4106f5;\n    } else {\n        int64_t v21; // 0x410660\n        if (v10 == 2) {\n            // 0x410868\n            v9 = &v19;\n            int32_t v22; // 0x410660\n            if (fd < 0) {\n                // 0x410a00\n                v22 = __xstat(1, (char *)path, (struct stat *)&v19);\n            } else {\n                // 0x410875\n                v22 = __fxstat(1, fd, (struct stat *)&v19);\n            }\n            // 0x410886\n            if (v22 != 0) {\n                // 0x410818\n                return -1;\n            }\n            // 0x41088e\n            if (*(int64_t *)(v11 + 8) == 0x3ffffffe) {\n                // 0x410a20\n                v21 = v11;\n            } else {\n                // 0x4108a1\n                v21 = v11;\n                if (*(int64_t *)(v11 + 24) == 0x3ffffffe) {\n                    // 0x4108b5\n                    v21 = v11;\n                }\n            }\n        } else {\n            // 0x4106cb\n            v21 = v11;\n        }\n        // 0x4106d0\n        if (fd < 0) {\n            // 0x4108f0\n            v5 = (struct {int64_t e0; int32_t e1;}){\n                .e0 = 0,\n                .e1 = 0\n            };\n            v5.e0 = v21;\n            times[0] = v5;\n            int32_t v23 = utimensat(-100, (char *)path, times, 0); // 0x4108fd\n            v20 = v23 == 0;\n            result = v23;\n            if (v23 >= 0 == (v23 != 0)) {\n                goto lab_0x4106ea;\n            } else {\n                goto lab_0x41090d;\n            }\n        } else {\n            // 0x4106d8\n            v6 = (struct {int64_t e0; int32_t e1;}){\n                .e0 = 0,\n                .e1 = 0\n            };\n            v6.e0 = v21;\n            times2[0] = v6;\n            int32_t v24 = futimens(fd, times2); // 0x4106da\n            v20 = v24 == 0;\n            result = v24;\n            if (v24 < 1) {\n                goto lab_0x41090d;\n            } else {\n                goto lab_0x4106ea;\n            }\n        }\n    }\n  lab_0x4106f5:\n    // 0x4106f5\n    g77 = -1;\n    g76 = -1;\n    int64_t v25; // 0x410660\n    switch ((int32_t)v25) {\n        case 0: {\n            goto lab_0x410760;\n        }\n        case 3: {\n            goto lab_0x41073a;\n        }\n        default: {\n            // 0x410714\n            v9 = &v19;\n            int32_t v26; // 0x410660\n            if (fd < 0) {\n                // 0x4108d8\n                v26 = __xstat(1, (char *)path, (struct stat *)&v19);\n            } else {\n                // 0x410721\n                v26 = __fxstat(1, fd, (struct stat *)&v19);\n            }\n            // 0x410732\n            if (v26 != 0) {\n                // 0x410818\n                return -1;\n            }\n            goto lab_0x41073a;\n        }\n    }\n  lab_0x410760:;\n    // 0x410760\n    int64_t v27; // 0x410660\n    int64_t v28; // 0x410660\n    if (v11 == 0) {\n        goto lab_0x410830;\n    } else {\n        // 0x41076e\n        int64_t v29; // bp-248, 0x410660\n        int64_t v30 = &v29; // 0x410775\n        v29 = *(int64_t *)v11;\n        v9 = v30;\n        v27 = v30;\n        v28 = v30;\n        if (fd < 0) {\n            goto lab_0x41083a;\n        } else {\n            goto lab_0x4107cc;\n        }\n    }\n  lab_0x41073a:\n    // 0x41073a\n    if (v11 == 0) {\n        goto lab_0x410830;\n    } else {\n        // 0x410746\n        if ((char)function_4104d0(&v19, &v11) != 0) {\n            // 0x410818\n            return 0;\n        }\n        goto lab_0x410760;\n    }\n  lab_0x410830:\n    // 0x410830\n    v9 = 0;\n    v27 = 0;\n    v28 = 0;\n    if (fd >= 0) {\n        goto lab_0x4107cc;\n    } else {\n        goto lab_0x41083a;\n    }\n  lab_0x4106ea:\n    // 0x4106ea\n    *__errno_location() = 38;\n    goto lab_0x4106f5;\n  lab_0x41090d:\n    // 0x41090d\n    if (v20 || *__errno_location() != 38) {\n        // 0x410913\n        g77 = 1;\n        // 0x410818\n        return result;\n    }\n    goto lab_0x4106f5;\n  lab_0x4107cc:\n    // 0x4107cc\n    v1 = (struct {int64_t e0; int64_t e1;}){\n        .e0 = 0,\n        .e1 = 0\n    };\n    v1.e0 = v27;\n    v2[0] = v1;\n    int64_t v31; // bp-216, 0x410660\n    if (futimesat(fd, NULL, v2) != 0) {\n        // 0x4107e0\n        if (path == 0) {\n            // 0x410818\n            int32_t v32; // 0x410660\n            uint32_t result2 = v32;\n            return result2;\n        }\n        struct utimbuf * times3 = NULL; // 0x4107f5\n        if (v11 != 0) {\n            // 0x4107f7\n            v31 = *(int64_t *)v11;\n            times3 = (struct utimbuf *)&v31;\n        }\n        // 0x410818\n        return utime((char *)path, times3);\n    }\n    // 0x410928\n    if (v27 == 0) {\n        // 0x410818\n        return 0;\n    }\n    int64_t v33 = *(int64_t *)(v27 + 8); // 0x410931\n    int64_t v34 = v33 - 0x7a11f; // 0x410931\n    int64_t v35 = *(int64_t *)(v27 + 24); // 0x41093d\n    int64_t v36 = v35 - 0x7a11f; // 0x41093d\n    if (v34 < 0 == (0x7a11e - v33 & v33) < 0 != v34 != 0 && v36 < 0 == (0x7a11e - v35 & v35) < 0 != v36 != 0 || __fxstat(1, fd, (struct stat *)&v19) != 0) {\n        // 0x410818\n        return 0;\n    }\n    int64_t v37 = v27 + 16; // 0x410978\n    int64_t v38 = *(int64_t *)v37; // 0x410978\n    int128_t v39 = __asm_movdqa(*(int128_t *)v27); // 0x410984\n    int64_t v40 = *(int64_t *)v27; // 0x41098a\n    int128_t v41 = __asm_movdqa(*(int128_t *)v37); // 0x41098e\n    v31 = __asm_movaps(v39);\n    __asm_movaps(v41);\n    int64_t v42; // 0x410660\n    if (v42 == 0 != (v34 < 0 == (0x7a11e - v33 & v33) < 0 == (v34 != 0) == v42 == v40 + 1)) {\n        // 0x410a78\n        if (v42 == 0 != (v36 < 0 == (0x7a11e - v35 & v35) < 0 == (v36 != 0) == v42 - v38 == 1)) {\n            // 0x410818\n            return 0;\n        }\n    }\n    // 0x4109e7\n    v7 = (struct {int64_t e0; int64_t e1;}){\n        .e0 = 0,\n        .e1 = 0\n    };\n    v7.e0 = &v31;\n    v8[0] = v7;\n    futimesat(fd, NULL, v8);\n    // 0x410818\n    return 0;\n  lab_0x41083a:\n    // 0x41083a\n    v3 = (struct {int64_t e0; int64_t e1;}){\n        .e0 = 0,\n        .e1 = 0\n    };\n    v3.e0 = v28;\n    v4[0] = v3;\n    // 0x410818\n    return futimesat(-100, (char *)path, v4);\n}\n"
        },
        {
            "funcName": "function_410aa0",
            "funcStartAddr": "410aa0",
            "funcEndAddr": "410ab0",
            "decompiledFuncCode": "int64_t function_410aa0(int64_t a1, int64_t * a2) {\n    // 0x410aa0\n    int64_t v1; // 0x410aa0\n    return function_410660(0xffffffff, a1, a2, v1);\n}\n"
        },
        {
            "funcName": "function_410ab0",
            "funcStartAddr": "410ab0",
            "funcEndAddr": "410cf8",
            "decompiledFuncCode": "int64_t function_410ab0(int64_t path, int64_t * a2, int64_t a3) {\n    struct timespec v1; // 0x410b18\n    struct timespec times[2]; // 0x410b18\n    int64_t v2 = (int64_t)a2;\n    int64_t v3; // 0x410ab0\n    int64_t v4; // 0x410ab0\n    int64_t v5; // 0x410ab0\n    int64_t v6; // 0x410ab0\n    int64_t v7; // bp-168, 0x410ab0\n    int64_t v8; // bp-208, 0x410ab0\n    if (a2 == NULL) {\n        int32_t v9 = g76; // 0x410ba0\n        v8 = 0;\n        v6 = 0;\n        v3 = 0;\n        if (v9 >= 0) {\n            goto lab_0x410b0b;\n        } else {\n            // 0x410bbb\n            g76 = -1;\n            v5 = v9;\n            goto lab_0x410bc5;\n        }\n    } else {\n        int128_t v10 = *(int128_t *)&v2; // 0x410ac7\n        int128_t v11 = __asm_movdqu(v10); // 0x410ac7\n        int64_t v12 = v10;\n        int128_t v13 = __asm_movdqu(*(int128_t *)(v12 + 16)); // 0x410acb\n        int64_t v14; // bp-200, 0x410ab0\n        int64_t v15 = &v14; // 0x410ad0\n        v8 = v15;\n        v14 = __asm_movaps(v11);\n        __asm_movaps(v13);\n        int64_t v16; // 0x410ab0\n        int64_t v17 = function_4105a0(v15, v12, a3, v16); // 0x410ae4\n        int32_t v18 = v17; // 0x410aeb\n        if (v18 < 0) {\n            // 0x410b92\n            return 0xffffffff;\n        }\n        int64_t v19 = v17 & 0xffffffff; // 0x410ae9\n        v4 = v19;\n        if (g76 < 0) {\n            goto lab_0x410b32;\n        } else {\n            if (v18 == 2) {\n                // 0x410c50\n                if (__lxstat(1, (char *)path, (struct stat *)&v7) != 0) {\n                    // 0x410b92\n                    return 0xffffffff;\n                }\n                // 0x410c6a\n                if (*(int64_t *)(v8 + 8) == 0x3ffffffe) {\n                    // 0x410cb0\n                    v6 = v8;\n                    v3 = 3;\n                } else {\n                    // 0x410c79\n                    v6 = v8;\n                    v3 = 3;\n                    if (*(int64_t *)(v8 + 24) == 0x3ffffffe) {\n                        // 0x410c8c\n                        v6 = v8;\n                        v3 = 3;\n                    }\n                }\n            } else {\n                // 0x410b06\n                v6 = v8;\n                v3 = v19;\n            }\n            goto lab_0x410b0b;\n        }\n    }\n  lab_0x410b0b:\n    // 0x410b0b\n    v1 = (struct {int64_t e0; int32_t e1;}){\n        .e0 = 0,\n        .e1 = 0\n    };\n    v1.e0 = v6;\n    times[0] = v1;\n    uint32_t result = utimensat(-100, (char *)path, times, AT_SYMLINK_NOFOLLOW); // 0x410b18\n    int64_t v20; // 0x410ab0\n    if (result < 1) {\n        if (result == 0) {\n            // 0x410bf6\n            g77 = 1;\n            g76 = 1;\n            return result;\n        }\n        int32_t v21 = *__errno_location(); // 0x410cd5\n        v20 = 256;\n        v4 = v3;\n        if (v21 != 38) {\n            // 0x410bf6\n            g77 = 1;\n            g76 = 1;\n            return result;\n        }\n    } else {\n        // 0x410b27\n        *__errno_location() = 38;\n        v20 = 256;\n        v4 = v3;\n    }\n    goto lab_0x410b32;\n  lab_0x410b32:\n    // 0x410b32\n    g76 = -1;\n    int32_t v22 = v4; // 0x410b3c\n    v5 = v20;\n    int64_t v23; // 0x410ab0\n    if (v22 == 0) {\n        goto lab_0x410bc5;\n    } else {\n        if (v22 != 3) {\n            // 0x410c20\n            if (__lxstat(1, (char *)path, (struct stat *)&v7) != 0) {\n                // 0x410b92\n                return 0xffffffff;\n            }\n            // 0x410c36\n            v23 = v20;\n            if (v8 != 0) {\n                goto lab_0x410b55;\n            } else {\n                goto lab_0x410b6a;\n            }\n        } else {\n            // 0x410b4d\n            v23 = v20;\n            if (v8 == 0) {\n                goto lab_0x410b6a;\n            } else {\n                goto lab_0x410b55;\n            }\n        }\n    }\n  lab_0x410bc5:;\n    int32_t v24 = __lxstat(1, (char *)path, (struct stat *)&v7); // 0x410bd2\n    v23 = v5;\n    if (v24 != 0) {\n        // 0x410b92\n        return 0xffffffff;\n    }\n    goto lab_0x410b6a;\n  lab_0x410b6a:;\n    int64_t result2; // 0x410ab0\n    int32_t v25; // 0x410ab0\n    if ((v25 & 0xf000) == 0xa000) {\n        // 0x410ce8\n        *__errno_location() = 38;\n        result2 = 0xffffffff;\n    } else {\n        // 0x410b7e\n        result2 = function_410660(0xffffffff, path, (int64_t *)v8, v23) & 0xffffffff;\n    }\n    // 0x410b92\n    return result2;\n  lab_0x410b55:;\n    int64_t v26 = function_4104d0(&v7, &v8); // 0x410b61\n    v23 = v20;\n    if ((char)v26 != 0) {\n        // 0x410b92\n        return 0;\n    }\n    goto lab_0x410b6a;\n}\n"
        },
        {
            "funcName": "function_410d00",
            "funcStartAddr": "410d00",
            "funcEndAddr": "4110dd",
            "decompiledFuncCode": "int64_t function_410d00(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x410d98\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x410d1c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x410d36\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x410d7b\n    if (a6 < 10) {\n        // 0x410d8a\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x410e82\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_4110e0",
            "funcStartAddr": "4110e0",
            "funcEndAddr": "411100",
            "decompiledFuncCode": "int64_t function_4110e0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4110e0\n    if (a5 == 0) {\n        // 0x4110fb\n        return function_410d00(a1, a2, a3, a4, a5, 0, (int64_t)&g90);\n    }\n    int64_t v1 = 0; // 0x4110e7\n    v1++;\n    int64_t v2 = v1; // 0x4110f9\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x4110f0\n        v1++;\n        v2 = v1;\n    }\n    // 0x4110fb\n    return function_410d00(a1, a2, a3, a4, a5, v2, (int64_t)&g90);\n}\n"
        },
        {
            "funcName": "function_411100",
            "funcStartAddr": "411100",
            "funcEndAddr": "411160",
            "decompiledFuncCode": "int64_t function_411100(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x411100\n    int64_t v3 = &v2; // 0x411100\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x411133\n    int64_t v6; // 0x41111d\n    int64_t * v7; // 0x41113b\n    int64_t v8; // 0x41113b\n    int64_t v9; // 0x411147\n    if (v5 < 48) {\n        // 0x411110\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x411153\n            break;\n        }\n    } else {\n        // 0x41113b\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x411153\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x411131\n    while (v4 != 9) {\n        // 0x411129\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x411110\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x411153\n                break;\n            }\n        } else {\n            // 0x41113b\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x411153\n                break;\n            }\n        }\n        // 0x411129\n        v10 = 10;\n    }\n    // 0x411153\n    return function_410d00(a1, a2, a3, a4, v3, v10, (int64_t)&g90);\n}\n"
        },
        {
            "funcName": "function_411160",
            "funcStartAddr": "411160",
            "funcEndAddr": "41121c",
            "decompiledFuncCode": "int64_t function_411160(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, int32_t a6) {\n    // 0x411160\n    int64_t v1; // bp-168, 0x411160\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x411160\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x411160\n    int64_t v8; // 0x411160\n    int64_t v9; // bp-56, 0x411160\n    int64_t v10; // 0x4111c5\n    int64_t v11; // 0x4111e9\n    if ((int32_t)v6 < 48) {\n        // 0x4111b0\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x411200\n            break;\n        }\n    } else {\n        // 0x4111e2\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x411200\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x4111da\n    int64_t v13 = 10; // 0x4111da\n    while (v5 != 9) {\n        // 0x4111dc\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x4111b0\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x411200\n                break;\n            }\n        } else {\n            // 0x4111e2\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x411200\n                break;\n            }\n        }\n        // 0x4111d2\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x411200\n    int64_t v14; // bp-136, 0x411160\n    int64_t result = function_410d00(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g90); // 0x41120f\n    return result;\n}\n"
        },
        {
            "funcName": "function_411220",
            "funcStartAddr": "411220",
            "funcEndAddr": "411294",
            "decompiledFuncCode": "int64_t function_411220(int64_t a1) {\n    // 0x411220\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x411283\n    return fputs_unlocked(v1, g44);\n}\n"
        },
        {
            "funcName": "function_4112a0",
            "funcStartAddr": "4112a0",
            "funcEndAddr": "4112d8",
            "decompiledFuncCode": "int64_t function_4112a0(void) {\n    // 0x4112a0\n    if (g79 != 0) {\n        // 0x4112a9\n        return g78;\n    }\n    int32_t v1 = geteuid(); // 0x4112bc\n    g79 = 1;\n    g78 = v1 == 0;\n    return (int64_t)(v1 & -256) | (int64_t)(v1 == 0);\n}\n"
        },
        {
            "funcName": "function_4112e0",
            "funcStartAddr": "4112e0",
            "funcEndAddr": "4112fa",
            "decompiledFuncCode": "int64_t function_4112e0(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x4112e4\n    if (size != 0 != (mem == NULL)) {\n        // 0x4112f3\n        return (int64_t)mem;\n    }\n    // 0x4112f5\n    function_411530(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_411300",
            "funcStartAddr": "411300",
            "funcEndAddr": "411321",
            "decompiledFuncCode": "int64_t function_411300(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x411303\n    int64_t v2 = v1; // 0x411303\n    if (v2 < 0) {\n        // 0x41131b\n        function_411530(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x411319\n        return function_4112e0(v2);\n    }\n    // 0x41131b\n    function_411530(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_411330",
            "funcStartAddr": "411330",
            "funcEndAddr": "411332",
            "decompiledFuncCode": "int64_t function_411330(void) {\n    // 0x411330\n    int64_t v1; // 0x411330\n    return function_4112e0(v1);\n}\n"
        },
        {
            "funcName": "function_411340",
            "funcStartAddr": "411340",
            "funcEndAddr": "411376",
            "decompiledFuncCode": "int64_t function_411340(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x411368\n        free(v1);\n        return (int32_t)&g90 ^ (int32_t)&g90;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x411351\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x411360\n        return (int64_t)mem;\n    }\n    // 0x411371\n    function_411530(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_411380",
            "funcStartAddr": "411380",
            "funcEndAddr": "4113a1",
            "decompiledFuncCode": "int64_t function_411380(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x411383\n    int64_t v2 = v1; // 0x411383\n    if (v2 < 0) {\n        // 0x41139b\n        function_411530(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x411399\n        return function_411340(a1, v2);\n    }\n    // 0x41139b\n    function_411530(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4113b0",
            "funcStartAddr": "4113b0",
            "funcEndAddr": "411436",
            "decompiledFuncCode": "int64_t function_4113b0(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x41140b\n            function_411530(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_411340(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x4113f3\n    if (a2 == 0) {\n        // 0x411418\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x4113f8\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x41140b\n        function_411530(a1);\n        // UNREACHABLE\n    }\n    // 0x4113da\n    *(int64_t *)a2 = v2;\n    return function_411340(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_411440",
            "funcStartAddr": "411440",
            "funcEndAddr": "411490",
            "decompiledFuncCode": "int64_t function_411440(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x411440\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x41148a\n            function_411530(a1);\n            // UNREACHABLE\n        }\n        // 0x411462\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_411340(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x411475\n        *(int64_t *)a2 = 128;\n        return function_411340(0, 128);\n    }\n    // 0x411488\n    if (a2 < 0) {\n        // 0x41148a\n        function_411530(a1);\n        // UNREACHABLE\n    }\n    // 0x411462\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_411340(a1, v1);\n}\n"
        },
        {
            "funcName": "function_411490",
            "funcStartAddr": "411490",
            "funcEndAddr": "4114a7",
            "decompiledFuncCode": "int64_t function_411490(int64_t a1, int64_t a2) {\n    // 0x411490\n    return (int64_t)memset((int64_t *)function_4112e0(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_4114b0",
            "funcStartAddr": "4114b0",
            "funcEndAddr": "4114de",
            "decompiledFuncCode": "int64_t function_4114b0(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x4114b7\n    if ((int64_t)v1 < 0) {\n        // 0x4114d9\n        function_411530(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x4114d9\n        function_411530(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x4114ca\n    if (mem != NULL) {\n        // 0x4114d4\n        return (int64_t)mem;\n    }\n    // 0x4114d9\n    function_411530(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4114e0",
            "funcStartAddr": "4114e0",
            "funcEndAddr": "411508",
            "decompiledFuncCode": "int64_t function_4114e0(int64_t a1, int64_t a2) {\n    int64_t v1 = function_4112e0(a2); // 0x4114ef\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_411510",
            "funcStartAddr": "411510",
            "funcEndAddr": "411523",
            "decompiledFuncCode": "int64_t function_411510(int64_t str) {\n    // 0x411510\n    return function_4114e0(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_411530",
            "funcStartAddr": "411530",
            "funcEndAddr": "411561",
            "decompiledFuncCode": "int64_t function_411530(int64_t a1) {\n    // 0x411530\n    error(g33, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_411570",
            "funcStartAddr": "411570",
            "funcEndAddr": "4119a0",
            "decompiledFuncCode": "int64_t function_411570(int64_t str, int32_t a2, uint32_t base, int64_t * a4, int32_t a5, int64_t a6) {\n    if (base >= 37) {\n        // 0x41197b\n        __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 96, \"xstrtoul\");\n        return &g90;\n    }\n    char c = str;\n    int32_t * v1 = __errno_location(); // 0x4115a2\n    *v1 = 0;\n    int64_t v2 = (int64_t)*__ctype_b_loc() + 1; // 0x4115d2\n    int64_t v3 = str; // 0x4115d7\n    char v4 = c; // 0x4115d7\n    if ((*(char *)(v2 + (2 * str & 510)) & 32) != 0) {\n        v3++;\n        unsigned char v5 = *(char *)v3; // 0x4115cc\n        v4 = v5;\n        while ((*(char *)(2 * (int64_t)v5 + v2) & 32) != 0) {\n            // 0x4115c8\n            v3++;\n            v5 = *(char *)v3;\n            v4 = v5;\n        }\n    }\n    // 0x4115d9\n    if (v4 == 45) {\n        // 0x411613\n        return 4;\n    }\n    int64_t str2 = a5;\n    int64_t v6; // bp-64, 0x411570\n    int64_t endptr = a2 == 0 ? (int64_t)&v6 : (int64_t)a2; // 0x41159e\n    int32_t str_as_ul = strtoul((char *)str, (char **)endptr, base); // 0x4115e4\n    int64_t * v7 = (int64_t *)endptr; // 0x4115e9\n    int64_t v8 = *v7; // 0x4115e9\n    char v9; // 0x411570\n    int64_t v10; // 0x411570\n    int64_t v11; // 0x411570\n    int64_t v12; // 0x411570\n    int64_t v13; // 0x411570\n    int64_t v14; // 0x411570\n    int64_t v15; // 0x411570\n    if (v8 == str) {\n        // 0x411640\n        if (c == 0 || a5 == 0) {\n            // 0x411613\n            return 4;\n        }\n        char * found_char_pos = strchr((char *)str2, (int32_t)c); // 0x411661\n        v14 = 1;\n        v11 = 0;\n        v9 = c;\n        if (found_char_pos == NULL) {\n            // 0x411613\n            return 4;\n        }\n        goto lab_0x41166f;\n    } else {\n        int32_t v16 = *v1; // 0x4115f4\n        int64_t v17 = 0; // 0x4115fa\n        if (v16 != 0) {\n            // 0x411628\n            v17 = 1;\n            if (v16 != 34) {\n                // 0x411613\n                return 4;\n            }\n        }\n        int64_t v18 = str_as_ul; // 0x4115e4\n        v13 = v18;\n        v10 = v17;\n        if (a5 == 0) {\n            goto lab_0x411610;\n        } else {\n            char c2 = *(char *)v8; // 0x411603\n            v13 = v18;\n            v10 = v17;\n            if (c2 != 0) {\n                char * found_char_pos2 = strchr((char *)str2, (int32_t)c2); // 0x411763\n                v14 = v18;\n                v11 = v17;\n                v9 = c2;\n                v15 = v18;\n                v12 = v17;\n                if (found_char_pos2 != NULL) {\n                    goto lab_0x41166f;\n                } else {\n                    goto lab_0x411775;\n                }\n            } else {\n                goto lab_0x411610;\n            }\n        }\n    }\n  lab_0x41166f:;\n    int64_t v19 = 0x100000000 * v8 >> 32;\n    unsigned char v20 = v9 - 69;\n    int64_t v21 = 1024; // 0x411677\n    int64_t v22 = 1; // 0x411677\n    int64_t v23; // 0x411570\n    int64_t v24; // 0x411570\n    int64_t v25; // 0x411570\n    int64_t v26; // 0x411570\n    int64_t v27; // 0x411570\n    int64_t v28; // 0x411570\n    int64_t v29; // 0x411570\n    int64_t v30; // 0x411570\n    int64_t v31; // 0x411570\n    int64_t v32; // 0x411570\n    int64_t v33; // 0x411570\n    int64_t v34; // 0x411570\n    int64_t v35; // 0x411570\n    int64_t v36; // 0x411570\n    int64_t v37; // 0x411570\n    int64_t v38; // 0x411570\n    int64_t v39; // 0x411570\n    int64_t v40; // 0x411570\n    int64_t v41; // 0x411570\n    int64_t v42; // 0x411570\n    if (v20 < 48) {\n        // 0x411679\n        v21 = 1024;\n        v22 = 1;\n        if ((1 << (int64_t)((v9 + 59) % 64) & 0x814400308945) == 0) {\n            goto lab_0x4116da;\n        } else {\n            // 0x41168c\n            v21 = 1024;\n            v22 = 1;\n            if (strchr((char *)str2, 48) == NULL) {\n                goto lab_0x4116da;\n            } else {\n                // 0x4116a8\n                v21 = 1000;\n                v22 = 2;\n                switch (*(char *)(v19 + 1)) {\n                    case 68: {\n                        goto lab_0x4116da;\n                    }\n                    case 105: {\n                        char v43 = *(char *)(v19 + 2); // 0x411909\n                        v21 = 1024;\n                        v22 = (v43 == 66 ? 2 : 1) + (int64_t)(v43 == 66);\n                        goto lab_0x4116da;\n                    }\n                    default: {\n                        // 0x4116bd\n                        g95 = v20;\n                        v21 = 1000;\n                        v22 = 2;\n                        v25 = 1024;\n                        v37 = 1;\n                        v24 = v14;\n                        v23 = v11;\n                        v38 = 1;\n                        v26 = 1024;\n                        v39 = 1;\n                        v15 = v14;\n                        v12 = v11;\n                        v40 = 1;\n                        v27 = 1024;\n                        v41 = 1;\n                        v28 = 1024;\n                        v42 = 1;\n                        v29 = 1024;\n                        v33 = 1;\n                        v30 = 1024;\n                        v34 = 1;\n                        v31 = 1024;\n                        v35 = 1;\n                        v32 = 1024;\n                        v36 = 1;\n                        switch (v9) {\n                            case 69: {\n                                goto lab_0x41187b;\n                            }\n                            case 70: {\n                                goto lab_0x411775;\n                            }\n                            case 71: {\n                                goto lab_0x4118b3;\n                            }\n                            case 72: {\n                                goto lab_0x411775;\n                            }\n                            case 73: {\n                                goto lab_0x411775;\n                            }\n                            case 74: {\n                                goto lab_0x411775;\n                            }\n                            case 75: {\n                                goto lab_0x41173c;\n                            }\n                            case 76: {\n                                goto lab_0x411775;\n                            }\n                            case 77: {\n                                goto lab_0x4116fe;\n                            }\n                            case 78: {\n                                goto lab_0x411775;\n                            }\n                            case 79: {\n                                goto lab_0x411775;\n                            }\n                            case 80: {\n                                goto lab_0x411848;\n                            }\n                            case 81: {\n                                goto lab_0x411775;\n                            }\n                            case 82: {\n                                goto lab_0x411775;\n                            }\n                            case 83: {\n                                goto lab_0x411775;\n                            }\n                            case 84: {\n                                goto lab_0x411818;\n                            }\n                            case 85: {\n                                goto lab_0x411775;\n                            }\n                            case 86: {\n                                goto lab_0x411775;\n                            }\n                            case 87: {\n                                goto lab_0x411775;\n                            }\n                            case 88: {\n                                goto lab_0x411775;\n                            }\n                            case 89: {\n                                goto lab_0x4117e6;\n                            }\n                            case 90: {\n                                goto lab_0x4117ab;\n                            }\n                            case 91: {\n                                goto lab_0x411775;\n                            }\n                            case 92: {\n                                goto lab_0x411775;\n                            }\n                            case 93: {\n                                goto lab_0x411775;\n                            }\n                            case 94: {\n                                goto lab_0x411775;\n                            }\n                            case 95: {\n                                goto lab_0x411775;\n                            }\n                            case 96: {\n                                goto lab_0x411775;\n                            }\n                            case 97: {\n                                goto lab_0x411775;\n                            }\n                            case 98: {\n                                goto lab_0x41178f;\n                            }\n                            case 99: {\n                                goto lab_0x411718;\n                            }\n                            case 100: {\n                                goto lab_0x411775;\n                            }\n                            case 101: {\n                                goto lab_0x411775;\n                            }\n                            case 102: {\n                                goto lab_0x411775;\n                            }\n                            case 103: {\n                                goto lab_0x4118b3;\n                            }\n                            case 104: {\n                                goto lab_0x411775;\n                            }\n                            case 105: {\n                                goto lab_0x411775;\n                            }\n                            case 106: {\n                                goto lab_0x411775;\n                            }\n                            case 107: {\n                                goto lab_0x41173c;\n                            }\n                            case 108: {\n                                goto lab_0x411775;\n                            }\n                            case 109: {\n                                goto lab_0x4116fe;\n                            }\n                            case 110: {\n                                goto lab_0x411775;\n                            }\n                            case 111: {\n                                goto lab_0x411775;\n                            }\n                            case 112: {\n                                goto lab_0x411775;\n                            }\n                            case 113: {\n                                goto lab_0x411775;\n                            }\n                            case 114: {\n                                goto lab_0x411775;\n                            }\n                            case 115: {\n                                goto lab_0x411775;\n                            }\n                            case 116: {\n                                goto lab_0x411818;\n                            }\n                            default: {\n                                goto lab_0x4116da;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x4116da;\n    }\n  lab_0x411610:\n    // 0x411610\n    *a4 = v13;\n    // 0x411613\n    return v10 & 0xffffffff;\n  lab_0x4116da:\n    // 0x4116da\n    g96 = v9 - 66;\n    v25 = v21;\n    v37 = v22;\n    v24 = v14;\n    v23 = v11;\n    v38 = v22;\n    v26 = v21;\n    v39 = v22;\n    v15 = v14;\n    v12 = v11;\n    v40 = v22;\n    v27 = v21;\n    v41 = v22;\n    v28 = v21;\n    v42 = v22;\n    v29 = v21;\n    v33 = v22;\n    v30 = v21;\n    v34 = v22;\n    v31 = v21;\n    v35 = v22;\n    v32 = v21;\n    v36 = v22;\n    int64_t v44; // 0x411570\n    switch (v9) {\n        case 66: {\n            // 0x4118d4\n            v44 = v22;\n            if (v14 >= 0x40000000000000) {\n                goto lab_0x411747;\n            } else {\n                // 0x4118e1\n                v24 = 1024 * v14;\n                v23 = v11;\n                v38 = v22;\n                goto lab_0x411718;\n            }\n        }\n        case 69: {\n            goto lab_0x41187b;\n        }\n        case 71: {\n            goto lab_0x4118b3;\n        }\n        case 75: {\n            goto lab_0x41173c;\n        }\n        case 77: {\n            goto lab_0x4116fe;\n        }\n        case 80: {\n            goto lab_0x411848;\n        }\n        case 84: {\n            goto lab_0x411818;\n        }\n        case 89: {\n            goto lab_0x4117e6;\n        }\n        case 90: {\n            goto lab_0x4117ab;\n        }\n        case 98: {\n            goto lab_0x41178f;\n        }\n        case 99: {\n            goto lab_0x411718;\n        }\n        case 103: {\n            goto lab_0x4118b3;\n        }\n        case 107: {\n            goto lab_0x41173c;\n        }\n        case 109: {\n            goto lab_0x4116fe;\n        }\n        case 116: {\n            goto lab_0x411818;\n        }\n        case 119: {\n            // 0x411780\n            v44 = v22;\n            if (v14 < 0) {\n                goto lab_0x411747;\n            } else {\n                // 0x411785\n                v24 = 2 * v14;\n                v23 = v11;\n                v38 = v22;\n                goto lab_0x411718;\n            }\n        }\n        default: {\n            goto lab_0x411775;\n        }\n    }\n  lab_0x41187b:;\n    uint128_t v45 = (int128_t)v14 * (int128_t)v31; // 0x411893\n    int64_t v46 = (int64_t)(v45 < 0xffffffffffffffff ? v45 : 0xffffffffffffffff);\n    int64_t v47 = v45 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v48 = 5; // 0x41189f\n    int64_t v49 = v46; // 0x4118a2\n    int64_t v50 = v35; // 0x4118a2\n    int64_t v51 = v47; // 0x4118a2\n    int32_t v52 = v48; // 0x4118a2\n    int64_t v53 = v47; // 0x4118a2\n    while (v48 != 0) {\n        // 0x411890\n        v45 = (int128_t)v46 * (int128_t)v31;\n        v46 = (int64_t)(v45 < 0xffffffffffffffff ? v45 : 0xffffffffffffffff);\n        v47 = v45 > 0xffffffffffffffff ? 1 : v53;\n        v48 = v52 - 1;\n        v49 = v46;\n        v50 = v35;\n        v51 = v47;\n        v52 = v48;\n        v53 = v47;\n    }\n    goto lab_0x4117d4;\n  lab_0x4118b3:\n    // 0x4118b3\n    v24 = -1;\n    v23 = 1;\n    v38 = v36;\n    if ((int128_t)v32 * (int128_t)v14 <= 0xffffffffffffffff) {\n        // 0x4118be\n        int128_t v54; // 0x4118b9\n        uint128_t v55; // 0x4118b9\n        uint128_t v56 = (v55 & 0xffffffffffffffff) * v54; // 0x4118be\n        v24 = -1;\n        v23 = 1;\n        int64_t v57; // 0x411570\n        v38 = v57;\n        if (v56 <= 0xffffffffffffffff) {\n            uint128_t v58 = (v56 & 0xffffffffffffffff) * v54; // 0x4118c3\n            v24 = -1;\n            v23 = 1;\n            v38 = v57;\n            if (v58 <= 0xffffffffffffffff) {\n                // 0x4118c8\n                v24 = v58;\n                int64_t v59; // 0x411570\n                v23 = v59 & 0xffffffff;\n                v38 = v57;\n            }\n        }\n    }\n    goto lab_0x411718;\n  lab_0x41173c:;\n    uint128_t v62 = (int128_t)v26 * (int128_t)v14; // 0x41173f\n    v24 = v62;\n    v23 = v11;\n    v38 = v39;\n    v44 = v39;\n    if (v62 <= 0xffffffffffffffff) {\n        goto lab_0x411718;\n    } else {\n        goto lab_0x411747;\n    }\n  lab_0x4116fe:;\n    int128_t v63 = v25; // 0x411704\n    uint128_t v64 = v63 * (int128_t)v14; // 0x411704\n    v44 = v37;\n    if (v64 > 0xffffffffffffffff) {\n        goto lab_0x411747;\n    } else {\n        uint128_t v65 = (v64 & 0xffffffffffffffff) * v63; // 0x411709\n        v44 = v37;\n        if (v65 > 0xffffffffffffffff) {\n            goto lab_0x411747;\n        } else {\n            // 0x41170e\n            v24 = v65;\n            v23 = v11;\n            v38 = v37;\n            goto lab_0x411718;\n        }\n    }\n  lab_0x411848:;\n    uint128_t v66 = (int128_t)v14 * (int128_t)v30; // 0x41185b\n    int64_t v67 = (int64_t)(v66 < 0xffffffffffffffff ? v66 : 0xffffffffffffffff);\n    int64_t v68 = v66 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v69 = 4; // 0x411867\n    v49 = v67;\n    v50 = v34;\n    v51 = v68;\n    int32_t v70 = v69; // 0x41186a\n    int64_t v71 = v68; // 0x41186a\n    while (v69 != 0) {\n        // 0x411858\n        v66 = (int128_t)v67 * (int128_t)v30;\n        v67 = (int64_t)(v66 < 0xffffffffffffffff ? v66 : 0xffffffffffffffff);\n        v68 = v66 > 0xffffffffffffffff ? 1 : v71;\n        v69 = v70 - 1;\n        v49 = v67;\n        v50 = v34;\n        v51 = v68;\n        v70 = v69;\n        v71 = v68;\n    }\n    goto lab_0x4117d4;\n  lab_0x411818:;\n    uint128_t v72 = (int128_t)v14 * (int128_t)v29; // 0x41182b\n    int64_t v73 = (int64_t)(v72 < 0xffffffffffffffff ? v72 : 0xffffffffffffffff);\n    int64_t v74 = v72 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v75 = 3; // 0x411837\n    v49 = v73;\n    v50 = v33;\n    v51 = v74;\n    int32_t v76 = v75; // 0x41183a\n    int64_t v77 = v74; // 0x41183a\n    while (v75 != 0) {\n        // 0x411828\n        v72 = (int128_t)v73 * (int128_t)v29;\n        v73 = (int64_t)(v72 < 0xffffffffffffffff ? v72 : 0xffffffffffffffff);\n        v74 = v72 > 0xffffffffffffffff ? 1 : v77;\n        v75 = v76 - 1;\n        v49 = v73;\n        v50 = v33;\n        v51 = v74;\n        v76 = v75;\n        v77 = v74;\n    }\n    goto lab_0x4117d4;\n  lab_0x4117e6:;\n    uint128_t v78 = (int128_t)v14 * (int128_t)v28; // 0x4117fb\n    int64_t v79 = (int64_t)(v78 < 0xffffffffffffffff ? v78 : 0xffffffffffffffff);\n    int64_t v80 = v78 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v81 = 7; // 0x411807\n    v49 = v79;\n    v50 = v42;\n    v51 = v80;\n    int32_t v82 = v81; // 0x41180a\n    int64_t v83 = v80; // 0x41180a\n    while (v81 != 0) {\n        // 0x4117f8\n        v78 = (int128_t)v79 * (int128_t)v28;\n        v79 = (int64_t)(v78 < 0xffffffffffffffff ? v78 : 0xffffffffffffffff);\n        v80 = v78 > 0xffffffffffffffff ? 1 : v83;\n        v81 = v82 - 1;\n        v49 = v79;\n        v50 = v42;\n        v51 = v80;\n        v82 = v81;\n        v83 = v80;\n    }\n    goto lab_0x4117d4;\n  lab_0x4117ab:;\n    uint128_t v84 = (int128_t)v14 * (int128_t)v27; // 0x4117c3\n    int64_t v85 = (int64_t)(v84 < 0xffffffffffffffff ? v84 : 0xffffffffffffffff);\n    int64_t v86 = v84 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v87 = 6; // 0x4117cf\n    int32_t v88 = v87; // 0x4117d2\n    int64_t v89 = v86; // 0x4117d2\n    v49 = v85;\n    v50 = v41;\n    v51 = v86;\n    while (v87 != 0) {\n        // 0x4117c0\n        v84 = (int128_t)v85 * (int128_t)v27;\n        v85 = (int64_t)(v84 < 0xffffffffffffffff ? v84 : 0xffffffffffffffff);\n        v86 = v84 > 0xffffffffffffffff ? 1 : v89;\n        v87 = v88 - 1;\n        v88 = v87;\n        v89 = v86;\n        v49 = v85;\n        v50 = v41;\n        v51 = v86;\n    }\n    goto lab_0x4117d4;\n  lab_0x41178f:\n    // 0x41178f\n    v44 = v40;\n    if (v14 >= 0x80000000000000) {\n        goto lab_0x411747;\n    } else {\n        // 0x411798\n        v24 = 512 * v14;\n        v23 = v11;\n        v38 = v40;\n        goto lab_0x411718;\n    }\n  lab_0x411718:;\n    int64_t v60 = v23;\n    int64_t v61 = (0x100000000 * v38 >> 32) + v19; // 0x41171d\n    *v7 = v61;\n    v13 = v24;\n    v10 = (*(char *)v61 != 0 ? v60 | 2 : v60) & 0xffffffff;\n    goto lab_0x411610;\n  lab_0x411775:\n    // 0x411775\n    *a4 = v15;\n    // 0x411613\n    return (v12 & 0xfffffffd | 2) & 0xffffffff;\n  lab_0x411747:\n    // 0x411747\n    v24 = -1;\n    v23 = 1;\n    v38 = v44;\n    goto lab_0x411718;\n  lab_0x4117d4:\n    // 0x4117d4\n    v24 = v49;\n    v23 = (v51 | v11) & 0xffffffff;\n    v38 = v50;\n    goto lab_0x411718;\n}\n"
        },
        {
            "funcName": "function_4119a0",
            "funcStartAddr": "4119a0",
            "funcEndAddr": "411a09",
            "decompiledFuncCode": "int64_t function_4119a0(void) {\n    char * v1 = NULL; // bp-24, 0x4119bb\n    int64_t v2 = 0; // bp-16, 0x4119c3\n    int32_t v3 = __getdelim(&v1, (int32_t *)&v2, 10, g45); // 0x4119cc\n    if (v3 < 1) {\n        // 0x4119ee\n        free((int64_t *)v1);\n        return 0;\n    }\n    int64_t v4 = (int64_t)v1; // 0x4119d6\n    char * v5 = (char *)((int64_t)v3 - 1 + v4); // 0x4119df\n    int64_t response = v4; // 0x4119e2\n    if (*v5 == 10) {\n        // 0x411a00\n        *v5 = 0;\n        response = (int64_t)v1;\n    }\n    int32_t v6 = rpmatch((char *)response); // 0x4119e4\n    // 0x4119ee\n    free((int64_t *)v1);\n    return v6 >= 0 == (v6 != 0);\n}\n"
        },
        {
            "funcName": "function_411a10",
            "funcStartAddr": "411a10",
            "funcEndAddr": "411b45",
            "decompiledFuncCode": "int64_t function_411a10(int64_t fd, int64_t a2, int64_t a3, int64_t a4) {\n    int32_t cmd = a2; // 0x411a40\n    if (cmd != 1030) {\n        // 0x411af0\n        return fcntl((int32_t)fd, cmd);\n    }\n    int64_t v1 = a3 & 0xffffffff; // 0x411a4c\n    int64_t v2; // 0x411a10\n    if (g80 < 0) {\n        int64_t v3 = function_411a10(fd, 0, v1, a4); // 0x411a94\n        int64_t v4 = v3 & 0xffffffff; // 0x411a99\n        if ((int32_t)v3 < 0) {\n            // 0x411a80\n            return v4 & 0xffffffff;\n        }\n        // 0x411a9f\n        v2 = v4;\n        if (g80 != -1) {\n            // 0x411a80\n            return v4 & 0xffffffff;\n        }\n    } else {\n        uint32_t v5 = fcntl((int32_t)fd, cmd); // 0x411a67\n        if (v5 >= 0 || *__errno_location() != 22) {\n            // 0x411a76\n            g80 = 1;\n            // 0x411a80\n            return (int64_t)v5 & 0xffffffff;\n        }\n        int64_t v6 = function_411a10(fd & 0xffffffff, 0, v1, a4); // 0x411b27\n        int64_t v7 = v6 & 0xffffffff; // 0x411b2c\n        if ((int32_t)v6 < 0) {\n            // 0x411a80\n            return v7 & 0xffffffff;\n        }\n        // 0x411b36\n        g80 = -1;\n        v2 = v7;\n    }\n    int32_t fd2 = v2; // 0x411aaf\n    if (fcntl(fd2, F_GETFD) >= 0) {\n        // 0x411aba\n        if (fcntl(fd2, F_SETFD) != -1) {\n            // 0x411a80\n            return v2 & 0xffffffff;\n        }\n    }\n    int32_t * v8 = __errno_location(); // 0x411ad2\n    close(fd2);\n    // 0x411a80\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_411b50",
            "funcStartAddr": "411b50",
            "funcEndAddr": "411b90",
            "decompiledFuncCode": "int64_t function_411b50(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x411b6a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x411b6a\n        return fflush(stream);\n    }\n    // 0x411b78\n    function_411bc0(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_411b90",
            "funcStartAddr": "411b90",
            "funcEndAddr": "411bb8",
            "decompiledFuncCode": "int64_t function_411b90(int64_t a1) {\n    // 0x411b90\n    if (*(int64_t *)(a1 + 40) > *(int64_t *)(a1 + 32)) {\n        // 0x411bb7\n        return 0;\n    }\n    int64_t v1 = *(int64_t *)(a1 + 16) - *(int64_t *)(a1 + 8); // 0x411ba0\n    int64_t result = v1; // 0x411baa\n    if ((a1 & 256) != 0) {\n        // 0x411bac\n        result = *(int64_t *)(a1 + 88) + v1 - *(int64_t *)(a1 + 72);\n    }\n    // 0x411bb7\n    return result;\n}\n"
        },
        {
            "funcName": "function_411bc0",
            "funcStartAddr": "411bc0",
            "funcEndAddr": "411c17",
            "decompiledFuncCode": "int64_t function_411bc0(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x411bc0\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x411bca\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x411bfb\n    int64_t result = -1; // 0x411c04\n    if (v1 != -1) {\n        // 0x411c06\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x411c12\n    return result;\n}\n"
        },
        {
            "funcName": "function_411c20",
            "funcStartAddr": "411c20",
            "funcEndAddr": "411cff",
            "decompiledFuncCode": "int64_t function_411c20(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x411c2c\n    uint32_t v2 = *v1; // 0x411c2c\n    int64_t v3 = a2 & 0xffffffff; // 0x411c31\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x411c34\n    uint64_t v5 = (int64_t)*v4; // 0x411c34\n    int64_t v6; // 0x411ca2\n    if (v3 <= v5) {\n      lab_0x411c9c_2:\n        // 0x411c9c\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x411c22\n    int64_t v8 = v2; // 0x411c20\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x411c9c\n        goto lab_0x411c9c_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x411c58\n    int64_t v17; // 0x411c66\n    int64_t * v18; // 0x411c80\n    int64_t * v19; // 0x411c83\n    int64_t v20; // 0x411c8e\n    int64_t v21; // 0x411c66\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x411c63\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x411c80\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x411c97\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x411c9c\n            goto lab_0x411c9c_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x411c9c\n            goto lab_0x411c9c_2;\n        }\n        // 0x411c52\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x411cdb\n    int64_t * v23 = (int64_t *)v22; // 0x411ce0\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x411ce3\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x411ce0\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x411cf7\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x411c4d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x411c9c\n            goto lab_0x411c9c_2;\n        }\n        // 0x411c52\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x411c63\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x411c80\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x411c97\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x411c9c\n                goto lab_0x411c9c_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x411c9c\n                goto lab_0x411c9c_2;\n            }\n            // 0x411c52\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x411cc0\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x411ce0\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x411cf7\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x411c9c\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_411d00",
            "funcStartAddr": "411d00",
            "funcEndAddr": "41231c",
            "decompiledFuncCode": "int64_t function_411d00(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x411d1f\n    int64_t v2 = *v1; // 0x411d1f\n    char * str2 = (char *)v2; // 0x411d2c\n    char c = *str2; // 0x411d2c\n    int64_t v3 = v2; // 0x411d58\n    int64_t v4 = 0; // 0x411d00\n    int32_t v5; // 0x411d00\n    int64_t v6; // 0x411d00\n    int64_t v7; // 0x411d00\n    int64_t v8; // 0x411d00\n    int64_t v9; // 0x411d00\n    int64_t v10; // 0x411d00\n    int64_t v11; // 0x411d00\n    int64_t v12; // 0x411d00\n    int64_t v13; // 0x411d00\n    int64_t str3; // 0x411d00\n    int64_t v14; // 0x411d00\n    int64_t v15; // 0x411d00\n    int64_t v16; // 0x411d00\n    int64_t v17; // 0x411d00\n    int32_t v18; // 0x411d00\n    int32_t v19; // 0x411d00\n    int32_t v20; // 0x411d00\n    int32_t v21; // 0x411d00\n    int32_t v22; // 0x411d00\n    int32_t v23; // 0x411d00\n    int32_t v24; // 0x411d00\n    int32_t v25; // 0x411d00\n    int32_t v26; // 0x411d00\n    int32_t v27; // 0x411d00\n    int32_t v28; // 0x411d00\n    int32_t v29; // 0x411d00\n    int64_t nmemb; // 0x411d00\n    int64_t v30; // 0x411d00\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x411d5c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x411d58\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x411d68\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x411d6e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x411d38\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x411d9c\n                int64_t v34; // 0x411d00\n                int64_t v35; // 0x411d00\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x411da5\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x411f20;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x411db6\n                int64_t v37 = *(int64_t *)v36; // 0x411dba\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x411d90\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x411da5\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x411f20;\n                        }\n                    }\n                    // 0x411db6\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x411e06:\n                    // 0x411e06\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x411e60;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x411fd0\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x411e60;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x411f80\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x411e2a;\n                                } else {\n                                    // 0x411f8c\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x411e2a;\n                                    } else {\n                                        // 0x411f9a\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x411e2a;\n                                        } else {\n                                            goto lab_0x411e60;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x411e2a;\n                            }\n                        }\n                    }\n                }\n              lab_0x411e71:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x412046\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x4121f2\n                            flockfile(g47);\n                            int64_t v41 = *v1; // 0x412212\n                            __fprintf_chk(g47, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x41225f\n                            int64_t v43 = (int64_t)g47;\n                            int64_t v44 = v43; // 0x412279\n                            int64_t v45; // 0x41227b\n                            if (*(char *)v42 != 0) {\n                                // 0x41227b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g47;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x412273\n                            while (v17 + nmemb != v42) {\n                                // 0x412275\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x41227b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g47;\n                                }\n                                // 0x412268\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x4122a0\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g47);\n                            v40 = *v1;\n                        } else {\n                            // 0x412054\n                            __fprintf_chk(g47, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x4121af\n                        free((int64_t *)v17);\n                    }\n                    // 0x4120a9\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x4120c0\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x411f6e\n                    return 63;\n                }\n                // 0x411e90\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x411f14\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x411f20:;\n                    int32_t * v49 = (int32_t *)a7; // 0x411f30\n                    uint32_t v50 = *v49; // 0x411f30\n                    int64_t v51 = v50; // 0x411f30\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x411f3a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x411f43\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x41216f\n                                __fprintf_chk(g47, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x41211a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x411f6e\n                            return 63;\n                        }\n                        // 0x411fb8\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x4122cf\n                                    __fprintf_chk(g47, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x4121cd\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x4121e0\n                                // 0x411f6e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x4120de\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x4120f2\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x411f5b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x411f5e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x411f62\n                    int64_t result = v59; // 0x411f68\n                    if (v58 != 0) {\n                        // 0x411f6a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x411f6e\n                    return result;\n                }\n            } else {\n                // 0x411d6e\n                v5 = v32;\n            }\n            // break -> 0x411e95\n            break;\n        }\n    }\n    // 0x411e95\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x411ead\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x411eb7\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x411f6e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x411ff9\n        __fprintf_chk(g47, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x411ee6\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x411ef6\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x411e60:\n    // 0x411e60\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x411e60\n    int64_t v63 = *(int64_t *)v62; // 0x411e64\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x411e71\n        goto lab_0x411e71;\n    }\n    goto lab_0x411e06;\n  lab_0x411e2a:\n    // 0x411e2a\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x411d00\n    int32_t v65; // 0x411d00\n    int32_t v66; // 0x411d00\n    if (v27 != 0) {\n        goto lab_0x411e60;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x411fe0\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x411e60;\n            } else {\n                goto lab_0x411e51;\n            }\n        } else {\n            // 0x411e45\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x41213c\n                int64_t v67 = (int64_t)mem; // 0x41213c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x411e60;\n                } else {\n                    // 0x41214f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x411e51;\n                }\n            } else {\n                goto lab_0x411e51;\n            }\n        }\n    }\n  lab_0x411e51:\n    // 0x411e51\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x411e60;\n}\n"
        },
        {
            "funcName": "function_412320",
            "funcStartAddr": "412320",
            "funcEndAddr": "4128e6",
            "decompiledFuncCode": "int64_t function_412320(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x412341\n    if (v3 < 1) {\n        // 0x4124fe\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x41233d\n    int32_t v5 = *(int32_t *)a7; // 0x412349\n    uint64_t v6 = a1 & 0xffffffff; // 0x41234b\n    int64_t v7 = v2; // 0x412350\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x412353\n    *v8 = 0;\n    int64_t v9; // 0x412320\n    int64_t v10; // 0x412320\n    int64_t v11; // 0x412320\n    int64_t v12; // 0x412320\n    int64_t str; // 0x412320\n    int64_t v13; // 0x412320\n    int64_t v14; // 0x412320\n    int64_t v15; // 0x412320\n    int64_t v16; // 0x412320\n    int64_t v17; // 0x412320\n    int32_t v18; // 0x412320\n    char v19; // 0x412320\n    if (v5 == 0) {\n        // 0x412538\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x41236a;\n    } else {\n        // 0x412363\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x4123b0\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x4123b3\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x412478;\n            } else {\n                int64_t v22 = v7 + 1; // 0x4123c6\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x4123d6\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x41248c;\n                } else {\n                    goto lab_0x4123e8;\n                }\n            }\n        } else {\n            goto lab_0x41236a;\n        }\n    }\n  lab_0x41236a:\n    // 0x41236a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x412370\n    *v24 = 0;\n    int64_t v25; // 0x412320\n    int64_t v26; // 0x412320\n    int64_t v27; // 0x412320\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x412460\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x41246d;\n        }\n        case 43: {\n            // 0x412770\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x41246d;\n        }\n        default: {\n            // 0x41238c\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x4126ef\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x412808\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x41246d;\n                } else {\n                    // 0x4126fd\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x41239a;\n                }\n            } else {\n                goto lab_0x41239a;\n            }\n        }\n    }\n  lab_0x412478:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x41247f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x4123e8;\n    } else {\n        goto lab_0x41248c;\n    }\n  lab_0x41239a:\n    // 0x41239a\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x41246d;\n  lab_0x41246d:\n    // 0x41246d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x412478;\n  lab_0x4123e8:;\n    uint32_t v30 = *(int32_t *)a7; // 0x4123e8\n    int64_t v31 = v30; // 0x4123e8\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x4123ea\n    if ((int64_t)*v32 > v31) {\n        // 0x4123ef\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x4123f2\n    if (*v33 > v30) {\n        // 0x4123f7\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x4123fa\n    int64_t v35 = v31; // 0x4123fe\n    int64_t v36 = v15; // 0x4123fe\n    int64_t v37; // 0x412320\n    int64_t v38; // 0x412320\n    int64_t v39; // 0x412320\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x412568\n        int64_t v41 = v40; // 0x412568\n        v2 = v41;\n        int64_t v42; // 0x412320\n        if (*v33 == v40) {\n            // 0x412750\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x412758\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x412574\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x412578\n                function_411c20(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x412588\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x412591\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x41259a\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x4125b1\n            int64_t v47 = v45 & 0xffffffff; // 0x4125b5\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x4125be\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x4125c4\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x4125c6;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x4125a0\n            int64_t v49 = v48 & 0xffffffff; // 0x4125a0\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x4125b1\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x4125be\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x4125c4\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x4125c6;\n                    }\n                }\n                // 0x4125a0\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x412768\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x4125c6;\n    } else {\n        goto lab_0x412404;\n    }\n  lab_0x41248c:\n    // 0x41248c\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x41248f\n    int64_t v51 = v12; // 0x41248f\n    int64_t v52 = v14; // 0x41248f\n    if (*(char *)v10 == 0) {\n        goto lab_0x4123e8;\n    } else {\n        goto lab_0x412495;\n    }\n  lab_0x412404:;\n    int32_t v53 = v35; // 0x412404\n    int64_t v54; // 0x412320\n    int64_t v55; // 0x412320\n    int64_t v56; // 0x412320\n    int64_t v57; // 0x412320\n    int64_t v58; // 0x412320\n    int64_t v59; // 0x412320\n    char * v60; // 0x412320\n    int64_t v61; // 0x412320\n    int64_t v62; // 0x412419\n    int64_t v63; // 0x412320\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x412553\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x412556;\n    } else {\n        // 0x41240c\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x412320\n        int64_t v66 = v65 ? -1 : 1; // 0x412420\n        int64_t v67 = (int64_t)\"--\"; // 0x412320\n        int64_t v68 = v62; // 0x412320\n        int64_t v69 = 3; // 0x412420\n        unsigned char v70 = *(char *)v68; // 0x412420\n        char v71 = *(char *)v67; // 0x412420\n        char v72 = v71; // 0x412420\n        bool v73 = false; // 0x412420\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x412510\n            if (*(char *)v62 == 45) {\n                // 0x4125d0\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x4125d0\n                if (c == 0) {\n                    goto lab_0x41251a;\n                } else {\n                    // 0x4125dd\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x412660;\n                    } else {\n                        if (c == 45) {\n                            // 0x412843\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x4126b5;\n                        } else {\n                            // 0x4125ee\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x412660;\n                            } else {\n                                // 0x4125f3\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x412614;\n                                } else {\n                                    // 0x4125fa\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x412660;\n                                    } else {\n                                        goto lab_0x412614;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x41251a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x412430\n            v2 = v75;\n            int32_t v76 = *v32; // 0x412433\n            int64_t v77 = v35 + 1; // 0x412436\n            int32_t v78 = v77; // 0x412439\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x4127a0\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x412447\n                    function_411c20(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x412455\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x412556;\n        }\n    }\n  lab_0x412495:;\n    // 0x412495\n    int64_t v79; // bp-104, 0x412320\n    int64_t v80 = &v79; // 0x41232a\n    int64_t v81 = v50 + 1; // 0x412495\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x41249c\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x4124a1\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x4124a5\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x4124a9\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x4124b1\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x4124b6\n    int32_t c2 = v84; // 0x4124b6\n    char * found_char_pos = strchr(str2, c2); // 0x4124b6\n    int64_t v87 = *v82; // 0x4124bb\n    v2 = v87;\n    int64_t v88 = *v85; // 0x4124c5\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x4124d0\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x4127c0\n            __fprintf_chk(g47, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x41278d\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x4124fe\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x4124b6\n    char v91 = *(char *)(v90 + 1); // 0x4124eb\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x4124a5\n        if (v91 != 58) {\n            // 0x4124fe\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x412714\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x412818\n                *v8 = 0;\n            } else {\n                // 0x4127fc\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x41273e\n            *v83 = 0;\n            // 0x4124fe\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x41271e\n        if (v93 != 0) {\n            // 0x4127b0\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x41273e\n            *v83 = 0;\n            // 0x4124fe\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x412731\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x41273e\n            *v83 = 0;\n            // 0x4124fe\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x41287a\n            __fprintf_chk(g47, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x41282a\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x412831\n        // 0x41273e\n        *v83 = 0;\n        // 0x4124fe\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x412689\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x41268b\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x4128b0\n                __fprintf_chk(g47, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x412861\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x412868\n            // 0x4124fe\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x412696\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x41269a\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x4126b5;\n  lab_0x4125c6:\n    // 0x4125c6\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x412404;\n  lab_0x4126b5:;\n    int64_t v99 = function_411d00(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x4126d3\n    // 0x4124fe\n    return v99 & 0xffffffff;\n  lab_0x412556:;\n    int32_t v100 = v55; // 0x412556\n    if (v100 != (int32_t)v59) {\n        // 0x41255a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x4124fe\n    return 0xffffffff;\n  lab_0x41251a:\n    // 0x41251a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x412521\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x4124fe\n    return v99 & 0xffffffff;\n  lab_0x412660:\n    // 0x412660\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x412495;\n  lab_0x412614:\n    // 0x412614\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_411d00(v6, a2, str, a4, a5, v57, v1, v11, &g16); // 0x41263a\n    if ((int32_t)v101 != -1) {\n        // 0x4124fe\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x41264f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x412660;\n}\n"
        },
        {
            "funcName": "function_4128f0",
            "funcStartAddr": "4128f0",
            "funcEndAddr": "412946",
            "decompiledFuncCode": "int64_t function_4128f0(int64_t a1) {\n    // 0x4128f0\n    *(int32_t *)&g81 = g41;\n    *(int32_t *)&g82 = g40;\n    int64_t v1; // 0x4128f0\n    int64_t result = function_412320(v1, v1, v1, v1, v1, v1, &g81, a1 & 0xffffffff); // 0x412916\n    g41 = *(int32_t *)&g81;\n    g86 = (char *)g84;\n    *(int32_t *)&g39 = g83;\n    return result;\n}\n"
        },
        {
            "funcName": "function_412950",
            "funcStartAddr": "412950",
            "funcEndAddr": "412968",
            "decompiledFuncCode": "int64_t function_412950(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x412950\n    return function_4128f0(1);\n}\n"
        },
        {
            "funcName": "function_412970",
            "funcStartAddr": "412970",
            "funcEndAddr": "412983",
            "decompiledFuncCode": "int64_t function_412970(int64_t a1, int64_t a2, char * a3, char (**a4)[7], int32_t a5, int64_t a6) {\n    // 0x412970\n    return function_4128f0(0);\n}\n"
        },
        {
            "funcName": "function_412990",
            "funcStartAddr": "412990",
            "funcEndAddr": "4129a5",
            "decompiledFuncCode": "int64_t function_412990(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x412990\n    return function_412320(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_4129b0",
            "funcStartAddr": "4129b0",
            "funcEndAddr": "4129c6",
            "decompiledFuncCode": "int64_t function_4129b0(void) {\n    // 0x4129b0\n    return function_4128f0(0);\n}\n"
        },
        {
            "funcName": "function_4129d0",
            "funcStartAddr": "4129d0",
            "funcEndAddr": "4129e8",
            "decompiledFuncCode": "int64_t function_4129d0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4129d0\n    return function_412320(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_4129f0",
            "funcStartAddr": "4129f0",
            "funcEndAddr": "412a6a",
            "decompiledFuncCode": "int64_t function_4129f0(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x4129fb\n    int64_t v2 = (int64_t)&g17; // 0x4129fb\n    int32_t * pwc; // 0x4129f0\n    int64_t v3; // 0x4129f0\n    int64_t n; // 0x4129f0\n    if (a2 == 0) {\n        goto lab_0x412a42;\n    } else {\n        // 0x4129fd\n        if (a3 == 0) {\n            // 0x412a28\n            return -2;\n        }\n        // 0x412a09\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x412a42;\n        } else {\n            goto lab_0x412a14;\n        }\n    }\n  lab_0x412a42:\n    // 0x412a42\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x4129f0\n    pwc = (int32_t *)&v4;\n    goto lab_0x412a14;\n  lab_0x412a14:;\n    char * wstr = (char *)v3; // 0x412a1a\n    int64_t ps; // 0x4129f0\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x412a1a\n    int64_t result = v5; // 0x412a1a\n    if (v5 < 0xfffffffe) {\n        // 0x412a28\n        return result;\n    }\n    int64_t result2 = result; // 0x412a59\n    if ((char)function_412fc0(0, v3) == 0) {\n        // 0x412a5b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x412a28\n    return result2;\n}\n"
        },
        {
            "funcName": "function_412a70",
            "funcStartAddr": "412a70",
            "funcEndAddr": "412b2d",
            "decompiledFuncCode": "int64_t function_412a70(int64_t stream, int64_t a2, int64_t * a3) {\n    int32_t v1 = 2000; // bp-2048, 0x412a90\n    int64_t v2; // bp-2040, 0x412a70\n    int64_t v3; // 0x412a70\n    int64_t v4 = function_414470(&v2, (int64_t *)&v1, a2, (int64_t)a3, v3, v3, 2000, (int64_t)&g90); // 0x412a9c\n    if (v4 == 0) {\n        // 0x412b1e\n        function_414460(stream);\n        // 0x412adc\n        return 0xffffffff;\n    }\n    int32_t nmemb = v1; // 0x412aa1\n    int64_t * data = (int64_t *)v4; // 0x412abc\n    if (nmemb > fwrite(data, 1, nmemb, (struct _IO_FILE *)stream)) {\n        // 0x412af0\n        if (v4 != (int64_t)&v2) {\n            int32_t * v5 = __errno_location(); // 0x412afa\n            free(data);\n        }\n        // 0x412adc\n        return 0xffffffff;\n    }\n    if (v4 != (int64_t)&v2) {\n        // 0x412acb\n        free(data);\n    }\n    // 0x412ad3\n    if (nmemb > -1) {\n        // 0x412adc\n        return (int64_t)nmemb & 0xffffffff;\n    }\n    // 0x412b13\n    *__errno_location() = 75;\n    // 0x412b1e\n    function_414460(stream);\n    // 0x412adc\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_412b30",
            "funcStartAddr": "412b30",
            "funcEndAddr": "412b35",
            "decompiledFuncCode": "int64_t function_412b30(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    // 0x412b30\n    *(int32_t *)a4 = (int32_t)a3;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_412b40",
            "funcStartAddr": "412b40",
            "funcEndAddr": "412b55",
            "decompiledFuncCode": "int64_t function_412b40(int64_t path, int64_t a2, int32_t mode) {\n    int32_t fd = a2; // 0x412b44\n    if (fd == -1) {\n        // 0x412b50\n        return chmod((char *)path, mode);\n    }\n    // 0x412b49\n    return fchmod(fd, mode);\n}\n"
        },
        {
            "funcName": "function_412b60",
            "funcStartAddr": "412b60",
            "funcEndAddr": "412b82",
            "decompiledFuncCode": "int64_t function_412b60(int64_t * a1, int64_t a2, int64_t a3) {\n    // 0x412b60\n    int64_t v1; // 0x412b60\n    int64_t result = (int32_t)function_412b40(a2, a3 & 0xffffffff, (int32_t)v1) != 0 ? 0xffffffff : 0; // 0x412b7f\n    return result;\n}\n"
        },
        {
            "funcName": "function_412b90",
            "funcStartAddr": "412b90",
            "funcEndAddr": "412b9a",
            "decompiledFuncCode": "int64_t function_412b90(void) {\n    // 0x412b90\n    return function_4046f0(1);\n}\n"
        },
        {
            "funcName": "function_412ba0",
            "funcStartAddr": "412ba0",
            "funcEndAddr": "412cb6",
            "decompiledFuncCode": "int64_t function_412ba0(int64_t a1, int64_t a2, int64_t a3, int64_t n) {\n    char * str = (char *)a1; // 0x412bc1\n    int32_t len = strlen(str); // 0x412bc1\n    if (a2 == 0) {\n        // 0x412c8d\n        return -1;\n    }\n    int64_t v1 = -1;\n    int64_t * str3 = (int64_t *)(v1 * n + a3);\n    int32_t v2 = 0;\n    int64_t v3 = 0; // 0x412c27\n    int64_t v4 = a3; // 0x412ba0\n    int64_t v5 = a2; // 0x412c2e\n    int64_t str4; // 0x412ba0\n    int64_t v6; // 0x412ba0\n    int32_t v7; // 0x412ba0\n    int32_t v8; // 0x412ba0\n    int32_t v9; // 0x412ba0\n    int64_t v10; // 0x412ba0\n    int64_t result; // 0x412ba0\n    int32_t v11; // 0x412c23\n    char * str2; // 0x412c42\n    while (true) {\n        // 0x412c37\n        str4 = v4;\n        v6 = v3;\n        v8 = v2;\n        str2 = (char *)v5;\n        v7 = v8;\n        if (strncmp(str2, str, len) == 0) {\n            // 0x412c4b\n            result = v6;\n            if (len == strlen(str2)) {\n                // 0x412c8d\n                return result;\n            }\n            if (v1 == -1) {\n                // break -> 0x412c5f\n                break;\n            }\n            // 0x412bf0\n            v7 = 1;\n            if (a3 != 0) {\n                // 0x412bfe\n                v11 = memcmp(str3, (int64_t *)str4, (int32_t)n) != 0 ? 1 : 0x1000000 * v8 >> 24;\n                v7 = v11;\n            }\n        }\n        // 0x412c27\n        v2 = v7;\n        v3 = v6 + 1;\n        v5 = *(int64_t *)(8 * v3 + a2);\n        v4 = str4 + n;\n        v10 = v1;\n        v9 = v2;\n        if (v5 == 0) {\n            return (char)v9 == 0 ? v10 : -2;\n        }\n    }\n    int64_t v12 = v6 + 1; // 0x412c63\n    int64_t v13 = *(int64_t *)(8 * v12 + a2); // 0x412c6a\n    v10 = v6;\n    v9 = v8;\n    while (v13 != 0) {\n        // 0x412c37\n        v1 = v6;\n        str3 = (int64_t *)(v1 * n + a3);\n        v2 = v8;\n        v3 = v12;\n        v4 = str4 + n;\n        v5 = v13;\n        while (true) {\n            // 0x412c37\n            str4 = v4;\n            v6 = v3;\n            v8 = v2;\n            str2 = (char *)v5;\n            v7 = v8;\n            if (strncmp(str2, str, len) == 0) {\n                // 0x412c4b\n                result = v6;\n                if (len == strlen(str2)) {\n                    // 0x412c8d\n                    return result;\n                }\n                if (v1 == -1) {\n                    // break -> 0x412c5f\n                    break;\n                }\n                // 0x412bf0\n                v7 = 1;\n                if (a3 != 0) {\n                    // 0x412bfe\n                    v11 = memcmp(str3, (int64_t *)str4, (int32_t)n) != 0 ? 1 : 0x1000000 * v8 >> 24;\n                    v7 = v11;\n                }\n            }\n            // 0x412c27\n            v2 = v7;\n            v3 = v6 + 1;\n            v5 = *(int64_t *)(8 * v3 + a2);\n            v4 = str4 + n;\n            v10 = v1;\n            v9 = v2;\n            if (v5 == 0) {\n                return (char)v9 == 0 ? v10 : -2;\n            }\n        }\n        // 0x412c5f\n        v12 = v6 + 1;\n        v13 = *(int64_t *)(8 * v12 + a2);\n        v10 = v6;\n        v9 = v8;\n    }\n  lab_0x412c78:\n    // 0x412c8d\n    return (char)v9 == 0 ? v10 : -2;\n}\n"
        },
        {
            "funcName": "function_412cc0",
            "funcStartAddr": "412cc0",
            "funcEndAddr": "412d31",
            "decompiledFuncCode": "int64_t function_412cc0(int64_t a1, int64_t a2, int64_t a3) {\n    char * format; // 0x412cc0\n    if (a3 == -1) {\n        // 0x412d20\n        format = dcgettext(NULL, \"invalid argument %s for %s\", 5);\n    } else {\n        // 0x412cd5\n        format = dcgettext(NULL, \"ambiguous argument %s for %s\", 5);\n    }\n    // 0x412ce4\n    function_40ec30(1, a1);\n    function_40e920(0, 8, a2);\n    error(0, 0, format);\n    return &g90;\n}\n"
        },
        {
            "funcName": "function_412d40",
            "funcStartAddr": "412d40",
            "funcEndAddr": "412e58",
            "decompiledFuncCode": "int64_t function_412d40(int64_t a1, int64_t a2, int64_t n) {\n    char * v1 = dcgettext(NULL, \"Valid arguments are:\", 5); // 0x412d6d\n    fputs_unlocked(v1, g47);\n    if (v1 != NULL) {\n        int64_t v2 = (int64_t)v1;\n        int64_t str = a2;\n        int64_t v3 = 0;\n        int64_t v4; // 0x412de0\n        int64_t v5; // 0x412de7\n        int64_t v6; // 0x412e07\n        while (v3 != 0) {\n            // 0x412dcb\n            if (memcmp((int64_t *)0, (int64_t *)str, (int32_t)n) != 0) {\n                // break -> 0x412d90\n                break;\n            }\n            // 0x412ddd\n            v4 = v3 + 1;\n            v5 = function_40ec50(v2);\n            __fprintf_chk(g47, 1, \", %s\", (char *)v5);\n            v6 = *(int64_t *)(8 * v4 + a1);\n            if (v6 == 0) {\n                // break (via goto) -> 0x412e10\n                goto lab_0x412e10;\n            }\n            v2 = v6;\n            str += n;\n            v3 = v4;\n        }\n        int64_t v7 = v3 + 1; // 0x412d93\n        int64_t v8 = function_40ec50(v2); // 0x412d9d\n        __fprintf_chk(g47, 1, \"\\n  - %s\", (char *)v8);\n        int64_t v9 = *(int64_t *)(8 * v7 + a1); // 0x412dbd\n        while (v9 != 0) {\n            int64_t * str2 = (int64_t *)str;\n            v2 = v9;\n            str += n;\n            v3 = v7;\n            while (v3 != 0) {\n                // 0x412dcb\n                if (memcmp(str2, (int64_t *)str, (int32_t)n) != 0) {\n                    // break -> 0x412d90\n                    break;\n                }\n                // 0x412ddd\n                v4 = v3 + 1;\n                v5 = function_40ec50(v2);\n                __fprintf_chk(g47, 1, \", %s\", (char *)v5);\n                v6 = *(int64_t *)(8 * v4 + a1);\n                if (v6 == 0) {\n                    // break (via goto) -> 0x412e10\n                    goto lab_0x412e10;\n                }\n                v2 = v6;\n                str += n;\n                v3 = v4;\n            }\n            // 0x412d90\n            v7 = v3 + 1;\n            v8 = function_40ec50(v2);\n            __fprintf_chk(g47, 1, \"\\n  - %s\", (char *)v8);\n            v9 = *(int64_t *)(8 * v7 + a1);\n        }\n    }\n  lab_0x412e10:;\n    int64_t v10 = (int64_t)g47; // 0x412e10\n    int64_t * v11 = (int64_t *)(v10 + 40); // 0x412e17\n    uint64_t result = *v11; // 0x412e17\n    if (result >= *(int64_t *)(v10 + 48)) {\n        // 0x412e40\n        return __overflow(g47, 10);\n    }\n    // 0x412e21\n    *v11 = result + 1;\n    *(char *)result = 10;\n    return result;\n}\n"
        },
        {
            "funcName": "function_412e60",
            "funcStartAddr": "412e60",
            "funcEndAddr": "412ed0",
            "decompiledFuncCode": "int64_t function_412e60(int64_t a1, int64_t a2, char ** a3, int64_t * a4, int64_t a5, int64_t a6) {\n    int64_t v1 = (int64_t)a4;\n    int64_t v2 = (int64_t)a3;\n    int64_t v3 = function_412ba0(a2, v2, v1, a5); // 0x412e8c\n    int64_t result = v3; // 0x412e94\n    if (v3 < 0) {\n        // 0x412ea8\n        function_412cc0(a1, a2, v3);\n        function_412d40(v2, v1, a5);\n        result = -1;\n    }\n    // 0x412e96\n    return result;\n}\n"
        },
        {
            "funcName": "function_412ed0",
            "funcStartAddr": "412ed0",
            "funcEndAddr": "412f1d",
            "decompiledFuncCode": "int64_t function_412ed0(int64_t a1, int64_t result, int64_t str2, int64_t a4) {\n    // 0x412ed0\n    if (result == 0) {\n        // 0x412f11\n        return 0;\n    }\n    int64_t * str = (int64_t *)a1; // 0x412f08\n    int32_t n = a4; // 0x412f08\n    int64_t v1 = result; // 0x412f0f\n    if (memcmp(str, (int64_t *)str2, n) == 0) {\n        // 0x412f11\n        return result;\n    }\n    int64_t str3 = str2; // 0x412f0f\n    v1 += 8;\n    int64_t v2 = *(int64_t *)v1; // 0x412ef0\n    int64_t result2 = 0; // 0x412efd\n    while (v2 != 0) {\n        // 0x412eff\n        str3 += a4;\n        result2 = v2;\n        if (memcmp(str, (int64_t *)str3, n) == 0) {\n            // break -> 0x412f11\n            break;\n        }\n        v1 += 8;\n        v2 = *(int64_t *)v1;\n        result2 = 0;\n    }\n    // 0x412f11\n    return result2;\n}\n"
        },
        {
            "funcName": "function_412f20",
            "funcStartAddr": "412f20",
            "funcEndAddr": "412f7d",
            "decompiledFuncCode": "int64_t function_412f20(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x412f27\n    int64_t v2; // 0x412f20\n    int64_t result = function_4143e0(a1, v2); // 0x412f38\n    if ((v2 & 32) != 0) {\n        // 0x412f60\n        if ((int32_t)result == 0) {\n            // 0x412f64\n            *__errno_location() = 0;\n        }\n        // 0x412f5a\n        return 0xffffffff;\n    }\n    // 0x412f41\n    if ((int32_t)result == 0) {\n        // 0x412f5a\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x412f48\n    if (v1 == 0) {\n        // 0x412f4a\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x412f5a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_412f80",
            "funcStartAddr": "412f80",
            "funcEndAddr": "412fba",
            "decompiledFuncCode": "int64_t function_412f80(int64_t tp) {\n    int64_t result = 0; // 0x412f94\n    if (clock_gettime(0, (struct timespec *)tp) != 0) {\n        // 0x412f96\n        int64_t tp2; // bp-24, 0x412f80\n        gettimeofday((struct timeval *)&tp2, NULL);\n        *(int64_t *)tp = tp2;\n        int128_t v1; // 0x412f80\n        result = 1000 * (int64_t)v1;\n        *(int64_t *)(tp + 8) = result;\n    }\n    // 0x412fb4\n    return result;\n}\n"
        },
        {
            "funcName": "function_412fc0",
            "funcStartAddr": "412fc0",
            "funcEndAddr": "41301e",
            "decompiledFuncCode": "int64_t function_412fc0(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x412fc6\n    if (locale == NULL) {\n        // 0x412ff3\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x412fc6\n    bool v2; // 0x412fc0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g18; // 0x412fc0\n    int64_t v5 = v1; // 0x412fc0\n    int64_t v6 = 2; // 0x412fe5\n    unsigned char v7 = *(char *)v5; // 0x412fe5\n    char v8 = *(char *)v4; // 0x412fe5\n    char v9 = v8; // 0x412fe5\n    bool v10 = false; // 0x412fe5\n    while (v7 == v8) {\n        // 0x412fd8\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x412ff1\n    int64_t v13 = v1; // 0x412ff1\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x412ff3\n        return 0;\n    }\n    int64_t v14 = 6; // 0x412ff1\n    unsigned char v15 = *(char *)v13; // 0x41300d\n    char v16 = *(char *)v12; // 0x41300d\n    char v17 = v16; // 0x41300d\n    bool v18 = false; // 0x41300d\n    while (v15 == v16) {\n        // 0x413000\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_413020",
            "funcStartAddr": "413020",
            "funcEndAddr": "413056",
            "decompiledFuncCode": "int64_t function_413020(int64_t a1, uint64_t a2, int64_t a3) {\n    char v1 = a1;\n    int64_t v2 = a1; // 0x413026\n    if (v1 == 0) {\n        // 0x413050\n        return 0;\n    }\n    uint64_t v3 = 0;\n    v2++;\n    int64_t v4 = (v3 / 0x80000000000000 | 512 * v3) + (int64_t)v1; // 0x413038\n    char v5 = *(char *)v2; // 0x41303b\n    while (v5 != 0) {\n        // 0x413030\n        v3 = v4;\n        v2++;\n        v4 = (v3 / 0x80000000000000 | 512 * v3) + (int64_t)v5;\n        v5 = *(char *)v2;\n    }\n    // 0x413043\n    return v4 % a2;\n}\n"
        },
        {
            "funcName": "function_413060",
            "funcStartAddr": "413060",
            "funcEndAddr": "4135c2",
            "decompiledFuncCode": "int64_t function_413060(void) {\n    char * v1 = nl_langinfo(14); // 0x413076\n    char * v2 = g85; // 0x41307b\n    char * v3; // 0x413060\n    int64_t v4; // 0x413060\n    int64_t v5; // 0x413060\n    int64_t v6; // 0x413060\n    int64_t v7; // 0x413060\n    int32_t size; // 0x413060\n    int32_t size2; // 0x413060\n    int32_t len; // 0x413132\n    int64_t v8; // 0x413132\n    char * env_val; // 0x41311d\n    if (v2 == NULL) {\n        // 0x413118\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x413185;\n        } else {\n            // 0x41312a\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x413185;\n            } else {\n                // 0x41312f\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x41311d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x4135b5\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x413185;\n                    } else {\n                        // 0x413529\n                        size2 = len + 14;\n                        goto lab_0x41314b;\n                    }\n                } else {\n                    goto lab_0x41314b;\n                }\n            }\n        }\n    } else {\n        // 0x413060\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x41309a;\n    }\n  lab_0x4133cc:;\n    // 0x4133cc\n    struct _IO_FILE * stream; // 0x41320b\n    int32_t v10 = __uflow(stream); // 0x4133cf\n    int64_t v11; // 0x413060\n    int64_t v12 = v11; // 0x4133d9\n    int64_t v13; // 0x413060\n    int64_t v14 = v13; // 0x4133d9\n    int32_t v15 = v10; // 0x4133d9\n    int64_t v16; // 0x413060\n    int64_t v17 = v16; // 0x4133d9\n    int64_t v18 = v11; // 0x4133d9\n    int64_t v19 = v13; // 0x4133d9\n    int64_t v20 = v16; // 0x4133d9\n    if (v10 == -1) {\n        // break -> 0x4133df\n        goto lab_0x4133df;\n    }\n    goto lab_0x413259;\n  lab_0x41324e:;\n    // 0x41324e\n    int64_t v90; // 0x413060\n    int64_t * v32; // 0x413240\n    *v32 = v90 + 1;\n    int64_t v89; // 0x413060\n    v12 = v89;\n    int64_t v91; // 0x413060\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x413060\n    v17 = v92;\n    goto lab_0x413259;\n  lab_0x413259:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x413060\n    int32_t v25; // bp-120, 0x413060\n    int32_t v26; // bp-184, 0x413060\n    int64_t v27; // 0x41320b\n    int64_t v28; // 0x413228\n    int64_t v29; // 0x41322d\n    int64_t * v30; // 0x413244\n    switch (c) {\n        case 32: {\n            goto lab_0x413240;\n        }\n        case 10: {\n            goto lab_0x413240;\n        }\n        case 9: {\n            goto lab_0x413240;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x413431\n            int32_t v33; // 0x413060\n            char v34; // 0x413060\n            int32_t v35; // 0x41343e\n            if (v31 < *v30) {\n                // 0x413410\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x41343b\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x413431\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x413410\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x41343b\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x413420\n                v36 = v33;\n            }\n            // 0x41350f\n            if (v36 == -1) {\n                // break -> 0x4133df\n                break;\n            }\n            goto lab_0x413240;\n        }\n        default: {\n            // 0x41326f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x4133df\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x413298\n            int64_t v39 = v37 + 4; // 0x41329a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x4132a6\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x4132a8\n            while (v41 == 0) {\n                // 0x413298\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x4132c6\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x4132d2\n            int64_t v45 = v43 + 4; // 0x4132d4\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x4132e0\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x4132e2\n            while (v47 == 0) {\n                // 0x4132d2\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x4132cf\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x4132f8\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x413308\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x41330c\n            int64_t v52 = v51 + v48; // 0x413315\n            int64_t * mem; // 0x413060\n            int64_t v53; // 0x413060\n            int64_t v54; // 0x413060\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x41344b\n                int64_t v56 = v55 + 3; // 0x413457\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x413331\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x413340\n            if (mem == NULL) {\n                // 0x41356c\n                free((int64_t *)v21);\n                function_4143e0(v27, v53);\n                v24 = (int64_t)&g17;\n                goto lab_0x4131e4;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x413358\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x413362\n            uint32_t v62 = (int32_t)v59; // 0x413365\n            int64_t v63; // 0x413060\n            if (v62 >= 8) {\n                // 0x413474\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x41348e\n                int64_t v66 = v61 - v65; // 0x413492\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x41349d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x4134ae\n                    int64_t v70 = v69 & 0xffffffff; // 0x4134ae\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x4134ab\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x41353f\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x413377\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x41337b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x41338b\n            int64_t v74 = v60 - 1; // 0x41338f\n            uint32_t v75 = (int32_t)v73; // 0x413394\n            int64_t v76; // 0x413060\n            if (v75 >= 8) {\n                // 0x4134c2\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x4134cc\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x4134dc\n                int64_t v80 = v74 - v79; // 0x4134e0\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x4134eb\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x4134fb\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x4134f9\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x413556\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x41355e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x4133a6\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x4133aa\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x4135a3\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x4133be\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x41324e;\n            } else {\n                goto lab_0x4133cc;\n            }\n        }\n    }\n  lab_0x413240:;\n    int64_t v93 = v23; // 0x413060\n    int64_t v94 = v22; // 0x413060\n    int64_t v95 = v21; // 0x413060\n    goto lab_0x413240_2;\n  lab_0x413185:;\n    int64_t * mem3 = malloc(size); // 0x413185\n    int64_t v97 = (int64_t)&g17; // 0x413190\n    int64_t v98; // 0x413060\n    int64_t path; // 0x413060\n    if (mem3 == NULL) {\n        goto lab_0x413162;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x413185\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x4131a6;\n    }\n  lab_0x41309a:;\n    int64_t str = v1 == NULL ? (int64_t)&g17 : (int64_t)v1; // 0x41308d\n    char v100 = *v3; // 0x41309a\n    int64_t v101; // 0x413060\n    if (v100 == 0) {\n        // 0x4130f4\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x413060\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x413060\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x4130e0\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x4130e7;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x4130b0\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x4130bd\n        char v107 = *(char *)v106; // 0x4130c2\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x4130f4\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x4130cb\n    v104 = v103 + 1;\n  lab_0x4130e7:\n    // 0x4130f4\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x413162:;\n    char * v108 = (char *)v97;\n    g85 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x41309a;\n  lab_0x4131a6:;\n    int64_t v109 = v98 + path; // 0x4131a6\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x4131d2\n    v24 = (int64_t)&g17;\n    if (fd >= 0) {\n        // 0x413201\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x413532\n            close(fd);\n            v24 = (int64_t)&g17;\n        } else {\n            // 0x413225\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x413240_2:;\n                uint64_t v96 = *v32; // 0x413240\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x4133cc;\n                } else {\n                    goto lab_0x41324e;\n                }\n            }\n          lab_0x4133df:\n            // 0x4133df\n            function_4143e0(v27, v19);\n            v24 = (int64_t)&g17;\n            if (v18 != 0) {\n                // 0x4133fe\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x4131e4;\n  lab_0x41314b:;\n    int64_t * mem4 = malloc(size2); // 0x41314b\n    v97 = (int64_t)&g17;\n    if (mem4 != NULL) {\n        // 0x4131f1\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x4131a6;\n    } else {\n        goto lab_0x413162;\n    }\n  lab_0x4131e4:\n    // 0x4131e4\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x413162;\n}\n"
        },
        {
            "funcName": "function_4135d0",
            "funcStartAddr": "4135d0",
            "funcEndAddr": "4137c9",
            "decompiledFuncCode": "int64_t function_4135d0(int64_t a1, int64_t path, int32_t a3, int32_t owner, int32_t group, int64_t a6, int64_t a7) {\n    int32_t fd = a1; // 0x4135f9\n    int32_t v1; // 0x4135d0\n    int32_t * v2; // 0x4135d0\n    int64_t v3; // 0x4135d0\n    int32_t v4; // 0x4135d0\n    int64_t v5; // bp-200, 0x4135d0\n    int32_t v6; // 0x4135d0\n    if (fd < 0) {\n        uint32_t v7 = __xstat(1, (char *)path, (struct stat *)&v5); // 0x41368d\n        if (v7 != 0) {\n            // 0x41369c\n            return (int64_t)v7 & 0xffffffff;\n        }\n        if ((v6 & 0xf000) != 0x4000) {\n            // 0x4137b6\n            *__errno_location() = 20;\n            // 0x41369c\n            return 0xffffffff;\n        }\n        goto lab_0x41362d;\n    } else {\n        int32_t v8 = __fxstat(1, fd, (struct stat *)&v5); // 0x413608\n        v4 = v8;\n        if (v8 != 0) {\n            goto lab_0x413750;\n        } else {\n            if ((v6 & 0xf000) != 0x4000) {\n                int32_t * v9 = __errno_location(); // 0x4136b0\n                *v9 = 20;\n                v3 = 0xffffffff;\n                v2 = v9;\n                v1 = 20;\n                goto lab_0x4136c9;\n            } else {\n                goto lab_0x41362d;\n            }\n        }\n    }\n  lab_0x41362d:;\n    int64_t v10 = v6;\n    int64_t v11; // 0x4135d0\n    if (owner == -1 || v6 == owner) {\n        // 0x4136e0\n        v11 = 0;\n        if (group != -1 == (v6 != group)) {\n            goto lab_0x413642;\n        } else {\n            goto lab_0x4136f3;\n        }\n    } else {\n        goto lab_0x413642;\n    }\n  lab_0x413750:;\n    int32_t * v12 = __errno_location(); // 0x413750\n    v3 = v4;\n    v2 = v12;\n    v1 = *v12;\n    goto lab_0x4136c9;\n  lab_0x413642:\n    if (fd >= 0) {\n        int32_t v15 = fchown(fd, owner, group); // 0x41373d\n        v4 = v15;\n        if (v15 == 0) {\n            // 0x413672\n            v11 = (v10 & 73) == 0 ? 0 : v10 & 3072;\n            goto lab_0x4136f3;\n        } else {\n            goto lab_0x413750;\n        }\n    } else {\n        char * path2 = (char *)path;\n        int32_t v16; // 0x4135d0\n        if (a3 == -1) {\n            // 0x413780\n            v16 = chown(path2, owner, group);\n        } else {\n            // 0x413663\n            v16 = lchown(path2, owner, group);\n        }\n        // 0x41366e\n        if (v16 != 0) {\n            // 0x41369c\n            return (int64_t)v16 & 0xffffffff;\n        }\n        // 0x413672\n        v11 = (v10 & 73) == 0 ? 0 : v10 & 3072;\n        goto lab_0x4136f3;\n    }\n  lab_0x4136c9:\n    // 0x4136c9\n    close(fd);\n    *v2 = v1;\n    // 0x41369c\n    return v3 & 0xffffffff;\n  lab_0x4136f3:;\n    uint64_t v13 = 0x100000000 * a7 >> 32;\n    if ((int32_t)((v11 | v10 ^ a6) & v13) == 0) {\n        // 0x413760\n        if (fd < 0) {\n            // 0x41369c\n            return 0;\n        }\n        // 0x41369c\n        return (int64_t)close(fd) & 0xffffffff;\n    }\n    int64_t mode = (v13 % 0x1000 ^ 4095) & v10 | a6 & 0xffffffff; // 0x413714\n    if (fd < 0) {\n        // 0x41369c\n        return (int64_t)chmod((char *)path, (int32_t)mode) & 0xffffffff;\n    }\n    int32_t v14 = fchmod(fd, (int32_t)mode); // 0x413793\n    v4 = v14;\n    if (v14 == 0) {\n        // 0x41369c\n        return (int64_t)close(fd) & 0xffffffff;\n    }\n    goto lab_0x413750;\n}\n"
        },
        {
            "funcName": "function_4137d0",
            "funcStartAddr": "4137d0",
            "funcEndAddr": "4137f3",
            "decompiledFuncCode": "int64_t function_4137d0(int64_t a1) {\n    int64_t result = function_4112e0(24); // 0x4137d9\n    *(int64_t *)result = a1;\n    *(int64_t *)(result + 16) = 0;\n    *(int64_t *)(result + 8) = 0;\n    return result;\n}\n"
        },
        {
            "funcName": "function_413800",
            "funcStartAddr": "413800",
            "funcEndAddr": "41382f",
            "decompiledFuncCode": "int64_t function_413800(void) {\n    // 0x413800\n    int64_t v1; // 0x413800\n    int64_t v2 = function_413a20(v1, v1, v1); // 0x413801\n    int64_t result = 0; // 0x41380e\n    if (v2 != 0) {\n        // 0x413810\n        result = function_4112e0(24);\n        *(int64_t *)result = v2;\n        *(int64_t *)(result + 16) = 0;\n        *(int64_t *)(result + 8) = 0;\n    }\n    // 0x41382d\n    return result;\n}\n"
        },
        {
            "funcName": "function_413830",
            "funcStartAddr": "413830",
            "funcEndAddr": "413834",
            "decompiledFuncCode": "int64_t function_413830(int64_t result) {\n    // 0x413830\n    return result;\n}\n"
        },
        {
            "funcName": "function_413840",
            "funcStartAddr": "413840",
            "funcEndAddr": "413935",
            "decompiledFuncCode": "int64_t function_413840(int64_t a1, uint64_t a2) {\n    uint64_t v1 = a2 + 1; // 0x413847\n    int64_t * v2 = (int64_t *)(a1 + 8); // 0x41385b\n    int64_t * v3 = (int64_t *)(a1 + 16); // 0x41385f\n    int64_t v4 = *v3; // 0x413863\n    int64_t result = *v2; // 0x413863\n    int64_t v5; // 0x413840\n    while (true) {\n        int64_t v6 = result;\n        int64_t v7 = v4;\n        int64_t v8 = v7; // 0x4138a0\n        int64_t v9; // 0x413840\n        int64_t v10; // 0x413840\n        if (v7 >= a2) {\n            // 0x413868\n            v10 = v7;\n            v9 = v6;\n            v5 = v6;\n            if (v7 == a2) {\n                // break -> 0x4138ff\n                break;\n            }\n        } else {\n            int64_t v11 = 1; // 0x4138b4\n            int64_t v12 = 256 * v8 | 255; // 0x4138b8\n            v8 = v12;\n            int64_t v13 = v11; // 0x4138c1\n            while (v12 < a2) {\n                // 0x4138b0\n                v11 = v13 + 1;\n                v12 = 256 * v8 | 255;\n                v8 = v12;\n                v13 = v11;\n            }\n            // 0x4138c3\n            int64_t v14; // bp-64, 0x413840\n            function_413d30(a1, &v14, v11);\n            int64_t v15 = &v14; // 0x4138d5\n            int64_t v16 = 256 * v7 | 255; // 0x4138e7\n            int64_t v17 = 256 * v6 | (int64_t)*(char *)v15; // 0x4138ee\n            v15++;\n            int64_t v18 = v16; // 0x4138f4\n            int64_t v19 = v17; // 0x4138f4\n            while (v16 < a2) {\n                // 0x4138d8\n                v16 = 256 * v18 | 255;\n                v17 = 256 * v19 | (int64_t)*(char *)v15;\n                v15++;\n                v18 = v16;\n                v19 = v17;\n            }\n            // 0x4138f6\n            v10 = v16;\n            v9 = v17;\n            v5 = v17;\n            if (v16 == a2) {\n                // break -> 0x4138ff\n                break;\n            }\n        }\n        uint64_t v20 = v9;\n        uint64_t v21 = v10 - a2; // 0x413876\n        uint64_t v22 = v21 % v1;\n        result = v20 % v1;\n        v4 = v22 - 1;\n        if (v20 <= v10 - v22) {\n            // 0x413928\n            *v2 = v20 / v1;\n            *v3 = v21 / v1;\n            return result;\n        }\n    }\n    // 0x4138ff\n    *v3 = 0;\n    *v2 = 0;\n    result = v5;\n  lab_0x41390f:\n    // 0x41390f\n    return result;\n}\n"
        },
        {
            "funcName": "function_413940",
            "funcStartAddr": "413940",
            "funcEndAddr": "41395e",
            "decompiledFuncCode": "int64_t function_413940(int64_t a1) {\n    // 0x413940\n    __explicit_bzero_chk(a1, 24, -1);\n    free((int64_t *)a1);\n    return &g90;\n}\n"
        },
        {
            "funcName": "function_413960",
            "funcStartAddr": "413960",
            "funcEndAddr": "4139b1",
            "decompiledFuncCode": "int64_t function_413960(int64_t a1) {\n    int64_t v1 = function_413e90(a1); // 0x413970\n    int32_t * v2 = __errno_location(); // 0x413978\n    __explicit_bzero_chk(a1, 24, -1);\n    free((int64_t *)a1);\n    return v1 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_4139c0",
            "funcStartAddr": "4139c0",
            "funcEndAddr": "413a1d",
            "decompiledFuncCode": "int64_t function_4139c0(int64_t a1) {\n    // 0x4139c0\n    function_40ec50(a1);\n    int32_t * err_num = __errno_location(); // 0x4139d7\n    char * format; // 0x4139c0\n    if (*err_num == 0) {\n        // 0x413a0f\n        format = dcgettext(NULL, \"%s: end of file\", 5);\n    } else {\n        // 0x4139e9\n        format = dcgettext(NULL, \"%s: read error\", 5);\n    }\n    // 0x4139f5\n    error(g33, *err_num, format);\n    return &g90;\n}\n"
        },
        {
            "funcName": "function_413a20",
            "funcStartAddr": "413a20",
            "funcEndAddr": "413d0f",
            "decompiledFuncCode": "int64_t function_413a20(int64_t a1, uint64_t a2, int64_t a3) {\n    if (a2 == 0) {\n        int64_t result = function_4112e0(0x1038); // 0x413b3d\n        *(int64_t *)result = 0;\n        *(int64_t *)(result + 8) = 0x4139c0;\n        *(int64_t *)(result + 16) = 0;\n        // 0x413a92\n        return result;\n    }\n    if (a1 != 0) {\n        int64_t stream = function_415f90(a1, \"rb\"); // 0x413a47\n        int64_t result2 = 0; // 0x413a52\n        if (stream != 0) {\n            // 0x413a58\n            result2 = function_4112e0(0x1038);\n            *(int64_t *)result2 = stream;\n            int64_t size = a2 < 0x1000 ? a2 : 0x1000; // 0x413a74\n            *(int64_t *)(result2 + 8) = 0x4139c0;\n            *(int64_t *)(result2 + 16) = a1;\n            setvbuf((struct _IO_FILE *)stream, (char *)(result2 + 24), 0, (int32_t)size);\n        }\n        // 0x413a92\n        return result2;\n    }\n    int64_t result3 = function_4112e0(0x1038); // 0x413aad\n    *(int64_t *)result3 = 0;\n    int64_t v1 = result3 + 32; // 0x413ac3\n    *(int64_t *)(result3 + 8) = 0x4139c0;\n    *(int64_t *)(result3 + 16) = 0;\n    *(int64_t *)(result3 + 24) = 0;\n    int32_t fd = open(\"/dev/urandom\", O_RDONLY); // 0x413ae1\n    int64_t v2; // 0x413a20\n    int128_t pid2; // bp-72, 0x413a20\n    if (fd < 0) {\n        // 0x413b68\n        gettimeofday((struct timeval *)&pid2, NULL);\n        __asm_movups(*(int128_t *)v1, __asm_movdqa(0));\n        int32_t pid = getpid(); // 0x413b87\n        pid2 = pid;\n        *(int32_t *)(result3 + 48) = pid;\n        v2 = 20;\n    } else {\n        int32_t v3 = __read_chk(fd, (int64_t *)v1, (int32_t)(a2 < 2048 ? a2 : 2048), 0x1018); // 0x413b0b\n        close(fd);\n        if (v3 >= 2048) {\n            // 0x413b28\n            function_414190(v1);\n            // 0x413a92\n            return result3;\n        }\n        int64_t v4 = v3 > 0 ? v3 : 0;\n        uint64_t v5 = 2048 - v4; // 0x413c96\n        int64_t v6 = v5 < 16 ? v5 : 16; // 0x413ca2\n        uint64_t v7 = v6 + v4; // 0x413ca8\n        gettimeofday((struct timeval *)&pid2, NULL);\n        __asm_rep_movsb_memcpy((char *)(v1 + v4), (char *)&pid2, v6);\n        if (v7 > 2047) {\n            // 0x413b28\n            function_414190(v1);\n            // 0x413a92\n            return result3;\n        }\n        uint64_t v8 = 2048 - v7; // 0x413cd1\n        int64_t v9 = v8 < 4 ? v8 : 4; // 0x413cdd\n        pid2 = getpid();\n        int64_t v10 = v9 + v7; // 0x413cf5\n        __asm_rep_movsb_memcpy((char *)(v7 + v1), (char *)&pid2, v9);\n        v2 = v10;\n        if (v10 >= 2048) {\n            // 0x413b28\n            function_414190(v1);\n            // 0x413a92\n            return result3;\n        }\n    }\n    int64_t v11 = &pid2;\n    uint64_t v12 = 2048 - v2; // 0x413b9d\n    int64_t v13 = v12 < 4 ? v12 : 4; // 0x413ba4\n    pid2 = getppid();\n    if (v13 != 0) {\n        int64_t v14 = 0;\n        int64_t v15 = v14 + 1; // 0x413bc0\n        *(char *)(v2 + v1 + v14) = *(char *)(v14 + v11);\n        while ((int32_t)v15 < (int32_t)v13) {\n            // 0x413bbe\n            v14 = v15 & 0xffffffff;\n            v15 = v14 + 1;\n            *(char *)(v2 + v1 + v14) = *(char *)(v14 + v11);\n        }\n    }\n    uint64_t v16 = v13 + v2; // 0x413bcf\n    if (v16 >= 2048) {\n        // 0x413b28\n        function_414190(v1);\n        // 0x413a92\n        return result3;\n    }\n    uint64_t v17 = 2048 - v16; // 0x413bea\n    int64_t v18 = v17 < 4 ? v17 : 4; // 0x413bf1\n    pid2 = getuid();\n    if (v18 != 0) {\n        int64_t v19 = 0;\n        int64_t v20 = v19 + 1; // 0x413c0f\n        *(char *)(v16 + v1 + v19) = *(char *)(v19 + v11);\n        while ((int32_t)v20 < (int32_t)v18) {\n            // 0x413c0d\n            v19 = v20 & 0xffffffff;\n            v20 = v19 + 1;\n            *(char *)(v16 + v1 + v19) = *(char *)(v19 + v11);\n        }\n    }\n    uint64_t v21 = v18 + v16; // 0x413c1e\n    if (v21 >= 2048) {\n        // 0x413b28\n        function_414190(v1);\n        // 0x413a92\n        return result3;\n    }\n    // 0x413c2e\n    pid2 = getgid();\n    uint64_t v22 = 2048 - v21; // 0x413c46\n    int64_t v23 = v22 < 4 ? v22 : 4; // 0x413c4d\n    if (v23 == 0) {\n        // 0x413b28\n        function_414190(v1);\n        // 0x413a92\n        return result3;\n    }\n    int64_t v24 = 0;\n    int64_t v25 = v24 + 1; // 0x413c5f\n    *(char *)(v21 + v1 + v24) = *(char *)(v24 + v11);\n    while ((int32_t)v25 < (int32_t)v23) {\n        // 0x413c5d\n        v24 = v25 & 0xffffffff;\n        v25 = v24 + 1;\n        *(char *)(v21 + v1 + v24) = *(char *)(v24 + v11);\n    }\n    // 0x413b28\n    function_414190(v1);\n    // 0x413a92\n    return result3;\n}\n"
        },
        {
            "funcName": "function_413d10",
            "funcStartAddr": "413d10",
            "funcEndAddr": "413d15",
            "decompiledFuncCode": "int64_t function_413d10(int64_t a1, int64_t a2) {\n    // 0x413d10\n    *(int64_t *)(a1 + 8) = a2;\n    int64_t result; // 0x413d10\n    return result;\n}\n"
        },
        {
            "funcName": "function_413d20",
            "funcStartAddr": "413d20",
            "funcEndAddr": "413d25",
            "decompiledFuncCode": "int64_t function_413d20(int64_t a1, int64_t a2) {\n    // 0x413d20\n    *(int64_t *)(a1 + 16) = a2;\n    int64_t result; // 0x413d20\n    return result;\n}\n"
        },
        {
            "funcName": "function_413d30",
            "funcStartAddr": "413d30",
            "funcEndAddr": "413e8c",
            "decompiledFuncCode": "int64_t function_413d30(int64_t a1, int64_t * a2, int64_t a3) {\n    int64_t v1 = (int64_t)a2;\n    if (a1 != 0) {\n        int32_t * v2 = __errno_location(); // 0x413d4f\n        int64_t result = fread_unlocked(a2, 1, (int32_t)a3, (struct _IO_FILE *)a1); // 0x413d8a\n        int64_t v3 = a3 - result; // 0x413d95\n        if (v3 == 0) {\n            // 0x413d9a\n            return result;\n        }\n        int64_t v4 = v3; // 0x413d95\n        int64_t v5 = result + v1; // 0x413d92\n        int64_t v6 = *(int64_t *)(a1 + 16); // 0x413d64\n        *v2 = (v1 & 32) == 0 ? 0 : *v2;\n        int64_t result2 = fread_unlocked((int64_t *)v5, 1, (int32_t)v4, (struct _IO_FILE *)v6); // 0x413d8a\n        v4 -= result2;\n        while (v4 != 0) {\n            int64_t v7 = v5;\n            v5 = result2 + v7;\n            v6 = *(int64_t *)(a1 + 16);\n            *v2 = (v7 & 32) == 0 ? 0 : *v2;\n            result2 = fread_unlocked((int64_t *)v5, 1, (int32_t)v4, (struct _IO_FILE *)v6);\n            v4 -= result2;\n        }\n        // 0x413d9a\n        return result2;\n    }\n    int64_t v8 = *(int64_t *)24; // 0x413db0\n    int64_t v9 = a3; // 0x413dc2\n    int64_t * v10; // 0x413d30\n    int64_t v11; // 0x413d30\n    int64_t v12; // 0x413d30\n    int64_t v13; // 0x413d30\n    if (v8 < a3) {\n        int64_t v14 = v8;\n        int64_t v15 = v14 + v1; // 0x413dd3\n        v9 -= v14;\n        memcpy((int64_t *)v1, (int64_t *)(0x1038 - v14), (int32_t)v14);\n        while (v15 % 8 != 0) {\n            // 0x413dea\n            function_413ee0(32, 2104);\n            v13 = v9;\n            v12 = v15;\n            v10 = (int64_t *)2104;\n            v11 = 2048;\n            if (v9 < 2049) {\n                goto lab_0x413e45;\n            }\n            v14 = 2048;\n            int64_t v16 = v15;\n            v15 = v14 + v16;\n            v9 -= v14;\n            memcpy((int64_t *)v16, (int64_t *)(0x1038 - v14), (int32_t)v14);\n        }\n        int64_t v17 = v15;\n        int64_t v18 = v9;\n        while (v18 >= 2048) {\n            int64_t result3 = function_413ee0(32, v17); // 0x413e1d\n            int64_t v19 = v18 - 2048; // 0x413e22\n            if (v19 == 0) {\n                // 0x413e68\n                *(int64_t *)24 = 0;\n                return result3;\n            }\n            v17 += 2048;\n            v18 = v19;\n        }\n        // 0x413e34\n        function_413ee0(32, 2104);\n        v13 = v18;\n        v12 = v17;\n        v10 = (int64_t *)2104;\n        v11 = 2048;\n    } else {\n        // 0x413e80\n        v13 = a3;\n        v12 = v1;\n        v10 = (int64_t *)(0x1038 - v8);\n        v11 = v8;\n    }\n  lab_0x413e45:;\n    int64_t * dest_mem = memcpy((int64_t *)v12, v10, (int32_t)v13); // 0x413e4e\n    *(int64_t *)24 = v11 - v13;\n    // 0x413d9a\n    return (int64_t)dest_mem;\n}\n"
        },
        {
            "funcName": "function_413e90",
            "funcStartAddr": "413e90",
            "funcEndAddr": "413ed9",
            "decompiledFuncCode": "int64_t function_413e90(int64_t a1) {\n    // 0x413e90\n    __explicit_bzero_chk(a1, 0x1038, -1);\n    free((int64_t *)a1);\n    if (a1 == 0) {\n        // 0x413ed0\n        return 0;\n    }\n    // 0x413eba\n    return function_4143e0(a1, 0x1038);\n}\n"
        },
        {
            "funcName": "function_413ee0",
            "funcStartAddr": "413ee0",
            "funcEndAddr": "414185",
            "decompiledFuncCode": "int64_t function_413ee0(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)(a1 + 2064); // 0x413ee0\n    int64_t * v2 = (int64_t *)(a1 + 2056); // 0x413ee7\n    int64_t * v3 = (int64_t *)(a1 + 2048); // 0x413ef6\n    int64_t v4 = *v1 + 1; // 0x413f00\n    *v1 = v4;\n    int64_t v5 = a2; // 0x413f11\n    int64_t v6 = *v3;\n    int64_t v7 = a1;\n    int64_t * v8 = (int64_t *)v7; // 0x413f22\n    int64_t v9 = *v8; // 0x413f22\n    uint64_t v10 = *(int64_t *)(v7 + 1024) + (0x200000 * v6 ^ -1 - v6); // 0x413f28\n    uint64_t v11 = v10 + *v2 + v4 + *(int64_t *)((v9 & 2040) + a1); // 0x413f43\n    *v8 = v11;\n    int64_t v12 = *(int64_t *)((v11 / 256 & 2040) + a1) + v9; // 0x413f62\n    *(int64_t *)v5 = v12;\n    int64_t * v13 = (int64_t *)(v7 + 8); // 0x413f68\n    int64_t v14 = *v13; // 0x413f68\n    int64_t v15 = *(int64_t *)(v7 + 1032) + (v10 / 32 ^ v10); // 0x413f6c\n    uint64_t v16 = v15 + v12 + *(int64_t *)((v14 & 2040) + a1); // 0x413f90\n    *v13 = v16;\n    int64_t v17 = *(int64_t *)((v16 / 256 & 2040) + a1) + v14; // 0x413fa5\n    *(int64_t *)(v5 + 8) = v17;\n    int64_t * v18 = (int64_t *)(v7 + 16); // 0x413fac\n    int64_t v19 = *v18; // 0x413fac\n    uint64_t v20 = *(int64_t *)(v7 + 1040) + (0x1000 * v15 ^ v15); // 0x413fb0\n    uint64_t v21 = v20 + v17 + *(int64_t *)((v19 & 2040) + a1); // 0x413fcb\n    *v18 = v21;\n    int64_t v22 = *(int64_t *)((v21 / 256 & 2040) + a1) + v19; // 0x413fdd\n    *(int64_t *)(v5 + 16) = v22;\n    int64_t * v23 = (int64_t *)(v7 + 24); // 0x413fe8\n    int64_t v24 = *v23; // 0x413fe8\n    int64_t v25 = *(int64_t *)(v7 + 1048) + (v20 / 0x200000000 ^ v20); // 0x413ff9\n    uint64_t v26 = v25 + v22 + *(int64_t *)((v24 & 2040) + a1); // 0x414010\n    int64_t v27 = v7 + 32; // 0x414013\n    *v23 = v26;\n    int64_t v28 = *(int64_t *)((v26 / 256 & 2040) + a1) + v24; // 0x41402d\n    *(int64_t *)(v5 + 24) = v28;\n    v5 += 32;\n    while (v7 != a1 + 992) {\n        // 0x413f18\n        v6 = v25;\n        v7 = v27;\n        v8 = (int64_t *)v7;\n        v9 = *v8;\n        v10 = *(int64_t *)(v7 + 1024) + (0x200000 * v6 ^ -1 - v6);\n        v11 = v10 + v28 + *(int64_t *)((v9 & 2040) + a1);\n        *v8 = v11;\n        v12 = *(int64_t *)((v11 / 256 & 2040) + a1) + v9;\n        *(int64_t *)v5 = v12;\n        v13 = (int64_t *)(v7 + 8);\n        v14 = *v13;\n        v15 = *(int64_t *)(v7 + 1032) + (v10 / 32 ^ v10);\n        v16 = v15 + v12 + *(int64_t *)((v14 & 2040) + a1);\n        *v13 = v16;\n        v17 = *(int64_t *)((v16 / 256 & 2040) + a1) + v14;\n        *(int64_t *)(v5 + 8) = v17;\n        v18 = (int64_t *)(v7 + 16);\n        v19 = *v18;\n        v20 = *(int64_t *)(v7 + 1040) + (0x1000 * v15 ^ v15);\n        v21 = v20 + v17 + *(int64_t *)((v19 & 2040) + a1);\n        *v18 = v21;\n        v22 = *(int64_t *)((v21 / 256 & 2040) + a1) + v19;\n        *(int64_t *)(v5 + 16) = v22;\n        v23 = (int64_t *)(v7 + 24);\n        v24 = *v23;\n        v25 = *(int64_t *)(v7 + 1048) + (v20 / 0x200000000 ^ v20);\n        v26 = v25 + v22 + *(int64_t *)((v24 & 2040) + a1);\n        v27 = v7 + 32;\n        *v23 = v26;\n        v28 = *(int64_t *)((v26 / 256 & 2040) + a1) + v24;\n        *(int64_t *)(v5 + 24) = v28;\n        v5 += 32;\n    }\n    int64_t v29 = a2 + 1024; // 0x41404b\n    int64_t v30 = v25;\n    int64_t v31 = v27;\n    int64_t * v32 = (int64_t *)v31; // 0x41405a\n    int64_t v33 = *v32; // 0x41405a\n    uint64_t v34 = *(int64_t *)(v31 - 1024) + (0x200000 * v30 ^ -1 - v30); // 0x414060\n    uint64_t v35 = v34 + v28 + *(int64_t *)((v33 & 2040) + a1); // 0x414085\n    *v32 = v35;\n    int64_t v36 = *(int64_t *)((v35 / 256 & 2040) + a1) + v33; // 0x414096\n    *(int64_t *)v29 = v36;\n    int64_t * v37 = (int64_t *)(v31 + 8); // 0x41409d\n    int64_t v38 = *v37; // 0x41409d\n    int64_t v39 = *(int64_t *)(v31 - 1016) + (v34 / 32 ^ v34); // 0x4140a4\n    uint64_t v40 = v39 + v36 + *(int64_t *)((v38 & 2040) + a1); // 0x4140c8\n    *v37 = v40;\n    int64_t v41 = *(int64_t *)((v40 / 256 & 2040) + a1) + v38; // 0x4140dd\n    *(int64_t *)(v29 + 8) = v41;\n    int64_t * v42 = (int64_t *)(v31 + 16); // 0x4140e4\n    int64_t v43 = *v42; // 0x4140e4\n    uint64_t v44 = *(int64_t *)(v31 - 1008) + (0x1000 * v39 ^ v39); // 0x4140e8\n    uint64_t v45 = v44 + v41 + *(int64_t *)((v43 & 2040) + a1); // 0x414103\n    *v42 = v45;\n    int64_t v46 = *(int64_t *)((v45 / 256 & 2040) + a1) + v43; // 0x414115\n    *(int64_t *)(v29 + 16) = v46;\n    int64_t * v47 = (int64_t *)(v31 + 24); // 0x414120\n    int64_t v48 = *v47; // 0x414120\n    int64_t v49 = *(int64_t *)(v31 - 1000) + (v44 / 0x200000000 ^ v44); // 0x414131\n    uint64_t v50 = v49 + v46 + *(int64_t *)((v48 & 2040) + a1); // 0x414148\n    int64_t result = v31 + 32; // 0x41414b\n    *v47 = v50;\n    int64_t v51 = *(int64_t *)((v50 / 256 & 2040) + a1) + v48; // 0x414165\n    *(int64_t *)(v29 + 24) = v51;\n    v29 += 32;\n    while (v31 != a1 + 2016) {\n        // 0x414050\n        v30 = v49;\n        v31 = result;\n        v32 = (int64_t *)v31;\n        v33 = *v32;\n        v34 = *(int64_t *)(v31 - 1024) + (0x200000 * v30 ^ -1 - v30);\n        v35 = v34 + v51 + *(int64_t *)((v33 & 2040) + a1);\n        *v32 = v35;\n        v36 = *(int64_t *)((v35 / 256 & 2040) + a1) + v33;\n        *(int64_t *)v29 = v36;\n        v37 = (int64_t *)(v31 + 8);\n        v38 = *v37;\n        v39 = *(int64_t *)(v31 - 1016) + (v34 / 32 ^ v34);\n        v40 = v39 + v36 + *(int64_t *)((v38 & 2040) + a1);\n        *v37 = v40;\n        v41 = *(int64_t *)((v40 / 256 & 2040) + a1) + v38;\n        *(int64_t *)(v29 + 8) = v41;\n        v42 = (int64_t *)(v31 + 16);\n        v43 = *v42;\n        v44 = *(int64_t *)(v31 - 1008) + (0x1000 * v39 ^ v39);\n        v45 = v44 + v41 + *(int64_t *)((v43 & 2040) + a1);\n        *v42 = v45;\n        v46 = *(int64_t *)((v45 / 256 & 2040) + a1) + v43;\n        *(int64_t *)(v29 + 16) = v46;\n        v47 = (int64_t *)(v31 + 24);\n        v48 = *v47;\n        v49 = *(int64_t *)(v31 - 1000) + (v44 / 0x200000000 ^ v44);\n        v50 = v49 + v46 + *(int64_t *)((v48 & 2040) + a1);\n        result = v31 + 32;\n        *v47 = v50;\n        v51 = *(int64_t *)((v50 / 256 & 2040) + a1) + v48;\n        *(int64_t *)(v29 + 24) = v51;\n        v29 += 32;\n    }\n    // 0x414175\n    *v3 = v49;\n    *v2 = v51;\n    return result;\n}\n"
        },
        {
            "funcName": "function_414190",
            "funcStartAddr": "414190",
            "funcEndAddr": "4143c4",
            "decompiledFuncCode": "int64_t function_414190(int64_t a1) {\n    int64_t v1 = a1 + 2048; // 0x4141d7\n    int64_t v2 = a1; // 0x4141f3\n    int64_t * v3 = (int64_t *)v2; // 0x4141f8\n    int64_t * v4 = (int64_t *)(v2 + 32); // 0x4141fb\n    int64_t v5 = *v4 - 0x7d0fac247caa1f32; // 0x4141fb\n    int64_t * v6 = (int64_t *)(v2 + 56); // 0x4141ff\n    uint64_t v7 = *v6 - 0x670a8fb093bb3f55; // 0x4141ff\n    int64_t * v8 = (int64_t *)(v2 + 40); // 0x414203\n    int64_t * v9 = (int64_t *)(v2 + 48); // 0x41420a\n    int64_t v10 = *v3 - v5 + 0x647c4677a2884b7c; // 0x41420e\n    int64_t v11 = *v8 + 0x48fe4a0fa5a09315 ^ v7 / 512; // 0x41421b\n    int64_t * v12 = (int64_t *)(v2 + 8); // 0x41421e\n    uint64_t v13 = *v12 - v11 - 0x46074cdd38c5379e; // 0x414225\n    int64_t v14 = *v9 - 0x5167a40d34037613 ^ 512 * v10; // 0x414232\n    int64_t * v15 = (int64_t *)(v2 + 16); // 0x414235\n    int64_t v16 = *v15 - v14 - 0x73f15afac2b8ed60; // 0x41423c\n    int64_t v17 = v13 / 0x800000 ^ v10 + v7; // 0x414249\n    int64_t * v18 = (int64_t *)(v2 + 24); // 0x41424c\n    uint64_t v19 = *v18 - v17 - 0x4d64d17db5a6aadc; // 0x414253\n    int64_t v20 = 0x8000 * v16 ^ v13 + v10; // 0x414260\n    int64_t v21 = v5 - v20; // 0x414266\n    *v3 = v20;\n    int64_t v22 = v19 / 0x4000 ^ v16 + v13; // 0x414270\n    uint64_t v23 = v11 - v22; // 0x414279\n    *v12 = v22;\n    int64_t v24 = v19 + v16 ^ 0x100000 * v21; // 0x414284\n    int64_t v25 = v14 - v24; // 0x41428e\n    *v15 = v24;\n    v2 += 64;\n    int64_t v26 = v23 / 0x20000 ^ v19 + v21; // 0x41429d\n    int64_t v27 = v23 + v25; // 0x4142a3\n    int64_t v28 = v17 - v26; // 0x4142a6\n    *v18 = v26;\n    int64_t v29 = 0x4000 * v25 ^ v23 + v21; // 0x4142b1\n    int64_t v30 = v28 + v25; // 0x4142b4\n    *v8 = v27;\n    *v4 = v29;\n    *v9 = v30;\n    *v6 = v28;\n    int64_t v31 = a1; // 0x4142ca\n    while (v1 != v2) {\n        // 0x4141f8\n        v3 = (int64_t *)v2;\n        v4 = (int64_t *)(v2 + 32);\n        v5 = *v4 + v29;\n        v6 = (int64_t *)(v2 + 56);\n        v7 = *v6 + v28;\n        v8 = (int64_t *)(v2 + 40);\n        v9 = (int64_t *)(v2 + 48);\n        v10 = *v3 - v5 + v20;\n        v11 = *v8 + v27 ^ v7 / 512;\n        v12 = (int64_t *)(v2 + 8);\n        v13 = *v12 - v11 + v22;\n        v14 = *v9 + v30 ^ 512 * v10;\n        v15 = (int64_t *)(v2 + 16);\n        v16 = *v15 - v14 + v24;\n        v17 = v13 / 0x800000 ^ v10 + v7;\n        v18 = (int64_t *)(v2 + 24);\n        v19 = *v18 - v17 + v26;\n        v20 = 0x8000 * v16 ^ v13 + v10;\n        v21 = v5 - v20;\n        *v3 = v20;\n        v22 = v19 / 0x4000 ^ v16 + v13;\n        v23 = v11 - v22;\n        *v12 = v22;\n        v24 = v19 + v16 ^ 0x100000 * v21;\n        v25 = v14 - v24;\n        *v15 = v24;\n        v2 += 64;\n        v26 = v23 / 0x20000 ^ v19 + v21;\n        v27 = v23 + v25;\n        v28 = v17 - v26;\n        *v18 = v26;\n        v29 = 0x4000 * v25 ^ v23 + v21;\n        v30 = v28 + v25;\n        *v8 = v27;\n        *v4 = v29;\n        *v9 = v30;\n        *v6 = v28;\n        v31 = a1;\n    }\n    int64_t * v32 = (int64_t *)(v31 + 56); // 0x4142d0\n    uint64_t v33 = *v32 + v28; // 0x4142d0\n    int64_t * v34 = (int64_t *)(v31 + 32); // 0x4142d4\n    int64_t v35 = *v34 + v29; // 0x4142d4\n    int64_t * v36 = (int64_t *)v31; // 0x4142d8\n    int64_t * v37 = (int64_t *)(v31 + 40); // 0x4142de\n    int64_t v38 = *v36 + v20 - v35; // 0x4142e2\n    int64_t * v39 = (int64_t *)(v31 + 8); // 0x4142e9\n    int64_t * v40 = (int64_t *)(v31 + 48); // 0x4142ed\n    int64_t v41 = *v37 + v27 ^ v33 / 512; // 0x4142f1\n    int64_t * v42 = (int64_t *)(v31 + 16); // 0x4142f7\n    uint64_t v43 = *v39 + v22 - v41; // 0x4142fe\n    int64_t * v44 = (int64_t *)(v31 + 24); // 0x414305\n    int64_t v45 = *v40 + v30 ^ 512 * v38; // 0x414309\n    int64_t v46 = *v42 + v24 - v45; // 0x414312\n    int64_t v47 = v43 / 0x800000 ^ v38 + v33; // 0x414319\n    uint64_t v48 = *v44 + v26 - v47; // 0x414322\n    int64_t v49 = 0x8000 * v46 ^ v43 + v38; // 0x414329\n    int64_t v50 = v35 - v49; // 0x414332\n    *v36 = v49;\n    int64_t v51 = v48 / 0x4000 ^ v46 + v43; // 0x41433c\n    uint64_t v52 = v41 - v51; // 0x414345\n    *v39 = v51;\n    int64_t v53 = 0x100000 * v50 ^ v48 + v46; // 0x414350\n    int64_t result = v52 + v50; // 0x414353\n    int64_t v54 = v45 - v53; // 0x41435a\n    *v42 = v53;\n    int64_t v55 = v31 + 64; // 0x414365\n    int64_t v56 = v52 / 0x20000 ^ v50 + v48; // 0x414369\n    int64_t v57 = v54 + v52; // 0x41436f\n    int64_t v58 = v47 - v56; // 0x414372\n    *v44 = v56;\n    int64_t v59 = 0x4000 * v54 ^ result; // 0x41437d\n    int64_t v60 = v58 + v54; // 0x414380\n    *v37 = v57;\n    *v34 = v59;\n    *v40 = v60;\n    *v32 = v58;\n    v31 = v55;\n    while (v1 != v55) {\n        // 0x4142d0\n        v32 = (int64_t *)(v31 + 56);\n        v33 = *v32 + v58;\n        v34 = (int64_t *)(v31 + 32);\n        v35 = *v34 + v59;\n        v36 = (int64_t *)v31;\n        v37 = (int64_t *)(v31 + 40);\n        v38 = *v36 + v49 - v35;\n        v39 = (int64_t *)(v31 + 8);\n        v40 = (int64_t *)(v31 + 48);\n        v41 = *v37 + v57 ^ v33 / 512;\n        v42 = (int64_t *)(v31 + 16);\n        v43 = *v39 + v51 - v41;\n        v44 = (int64_t *)(v31 + 24);\n        v45 = *v40 + v60 ^ 512 * v38;\n        v46 = *v42 + v53 - v45;\n        v47 = v43 / 0x800000 ^ v38 + v33;\n        v48 = *v44 + v56 - v47;\n        v49 = 0x8000 * v46 ^ v43 + v38;\n        v50 = v35 - v49;\n        *v36 = v49;\n        v51 = v48 / 0x4000 ^ v46 + v43;\n        v52 = v41 - v51;\n        *v39 = v51;\n        v53 = 0x100000 * v50 ^ v48 + v46;\n        result = v52 + v50;\n        v54 = v45 - v53;\n        *v42 = v53;\n        v55 = v31 + 64;\n        v56 = v52 / 0x20000 ^ v50 + v48;\n        v57 = v54 + v52;\n        v58 = v47 - v56;\n        *v44 = v56;\n        v59 = 0x4000 * v54 ^ result;\n        v60 = v58 + v54;\n        *v37 = v57;\n        *v34 = v59;\n        *v40 = v60;\n        *v32 = v58;\n        v31 = v55;\n    }\n    // 0x41439c\n    *(int64_t *)(a1 + 2064) = 0;\n    *(int64_t *)(a1 + 2056) = 0;\n    *(int64_t *)v1 = 0;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4143d0",
            "funcStartAddr": "4143d0",
            "funcEndAddr": "4143de",
            "decompiledFuncCode": "int64_t function_4143d0(int64_t a1, int64_t a2) {\n    // 0x4143d0\n    int64_t v1; // 0x4143d0\n    return function_411a10(a1, 0, 3, v1);\n}\n"
        },
        {
            "funcName": "function_4143e0",
            "funcStartAddr": "4143e0",
            "funcEndAddr": "41445b",
            "decompiledFuncCode": "int64_t function_4143e0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x4143e7\n    if (fileno(stream) < 0) {\n        // 0x414447\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x4143fa\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x41442b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x414447\n            return fclose(stream);\n        }\n    }\n    // 0x4143fc\n    if ((int32_t)function_411b50(a1, v1) == 0) {\n        // 0x414447\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x414408\n    int32_t v3 = *v2; // 0x414410\n    int64_t result = fclose(stream); // 0x41441e\n    if (v3 != 0) {\n        // 0x414450\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x414420\n    return result;\n}\n"
        },
        {
            "funcName": "function_414460",
            "funcStartAddr": "414460",
            "funcEndAddr": "414464",
            "decompiledFuncCode": "int64_t function_414460(int64_t a1) {\n    // 0x414460\n    int64_t result; // 0x414460\n    *(int32_t *)a1 = (int32_t)result | 32;\n    return result;\n}\n"
        },
        {
            "funcName": "function_414470",
            "funcStartAddr": "414470",
            "funcEndAddr": "415f89",
            "decompiledFuncCode": "int64_t function_414470(int64_t * a1, int64_t * a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8) {\n    // 0x414470\n    int64_t v1; // bp-1416, 0x414470\n    int64_t v2; // bp-1656, 0x414470\n    if ((int32_t)function_416250(a3, &v1, &v2) < 0) {\n        // 0x414ae0\n        return 0;\n    }\n    int64_t v3 = &v2; // 0x41447b\n    int64_t v4; // bp-1384, 0x414470\n    int64_t v5; // bp-1640, 0x414470\n    int64_t v6; // 0x414470\n    if ((int32_t)function_416030(a4, &v2, v3) < 0) {\n        if (v6 != (int64_t)&v4) {\n            // 0x4153c7\n            free((int64_t *)v6);\n        }\n        if (v6 != (int64_t)&v5) {\n            // 0x4153e3\n            free((int64_t *)v6);\n        }\n        // 0x4153e8\n        *__errno_location() = 22;\n        // 0x414ae0\n        return 0;\n    }\n    uint64_t v7 = v6 + 7; // 0x4144db\n    uint64_t v8 = v7 < 7 ? -1 : v7; // 0x4144e3\n    uint64_t v9 = v8 + v6; // 0x4144e7\n    int64_t v10; // 0x414470\n    char * v11; // 0x414470\n    int64_t v12; // 0x414470\n    if (v9 < v8) {\n        // 0x414b90\n        v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n        goto lab_0x414a99;\n    } else {\n        if (v9 > 0xfffffffffffffff9) {\n            // 0x414b90\n            v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n            goto lab_0x414a99;\n        } else {\n            uint64_t size = v9 + 6; // 0x4144f7\n            if (size < 4000) {\n                // 0x414640\n                v12 = 0;\n                int64_t v13; // bp-1784, 0x414470\n                v11 = (char *)(15 - (v9 + 29 & -16) + (int64_t)&v13 & -16);\n                goto lab_0x414534;\n            } else {\n                if (size == -1) {\n                    // 0x414b90\n                    v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n                    goto lab_0x414a99;\n                } else {\n                    int64_t * mem = malloc((int32_t)size); // 0x414518\n                    if (mem == NULL) {\n                        // 0x414b90\n                        v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n                        goto lab_0x414a99;\n                    } else {\n                        // 0x41452d\n                        v12 = (int64_t)mem;\n                        v11 = (char *)mem;\n                        goto lab_0x414534;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x414a60_2:;\n    // 0x414a60\n    int64_t v14; // 0x414470\n    int64_t v15 = v14;\n    int64_t v16 = 0x100000000000000 * (int64_t)__errno_location() >> 56; // 0x414a68\n    int64_t v17 = v16; // 0x414a76\n    int64_t v18 = v16; // 0x414a76\n    int64_t v19 = v15; // 0x414a76\n    int64_t v20; // 0x414470\n    if (v15 != v20 == (v15 != 0)) {\n        goto lab_0x414c88;\n    } else {\n        goto lab_0x414a81;\n    }\n  lab_0x414a99:\n    // 0x414a99\n    if (v6 != (int64_t)&v4) {\n        // 0x414ab0\n        free((int64_t *)v6);\n    }\n    if (v6 != (int64_t)&v5) {\n        // 0x414acc\n        free((int64_t *)v6);\n    }\n    // 0x414ad1\n    *(int32_t *)v10 = 12;\n    // 0x414ae0\n    return 0;\n  lab_0x414534:\n    // 0x414534\n    v20 = (int64_t)a1;\n    int64_t v21 = a1 == NULL ? 0 : v3;\n    int64_t * v22 = (int64_t *)v6; // 0x41456d\n    int64_t v23 = *v22; // 0x41456d\n    int64_t v24 = 0; // 0x414573\n    int64_t v25 = v20; // 0x414573\n    int64_t v26 = v21; // 0x414573\n    int64_t v27 = 0; // 0x414573\n    int64_t v28; // 0x414470\n    int64_t v29; // 0x414470\n    int64_t v30; // 0x414470\n    int64_t v31; // 0x414470\n    int64_t v32; // 0x414470\n    int64_t v33; // 0x414470\n    int64_t v34; // 0x414470\n    if (v23 == a3) {\n        goto lab_0x414b83;\n    } else {\n        int64_t v35 = v23 - a3; // 0x414579\n        v28 = v35;\n        v29 = v35;\n        v31 = 0;\n        v30 = v21;\n        v32 = a3;\n        v33 = v20;\n        v34 = 0;\n        goto lab_0x41458b;\n    }\n  lab_0x414b83:;\n    int64_t v36 = v24; // 0x414b86\n    float80_t v37; // 0x414470\n    float80_t v38 = v37; // 0x414b86\n    float80_t v39; // 0x414470\n    float80_t v40 = v39; // 0x414b86\n    int64_t v41 = v25; // 0x414b86\n    int64_t v42 = v26; // 0x414b86\n    int64_t v43 = v27; // 0x414b86\n    int64_t v44; // 0x414470\n    int64_t v45 = v44; // 0x414b86\n    goto lab_0x4146e8;\n  lab_0x4146e8:;\n    int64_t v46 = v43;\n    int64_t v47 = v42;\n    int64_t v48 = v41;\n    int64_t v49 = v36;\n    int64_t v50; // 0x414470\n    int64_t v51; // 0x414470\n    int64_t v52; // 0x414470\n    int64_t v53; // 0x414470\n    int64_t v54; // 0x414470\n    int64_t v55; // 0x414470\n    int64_t v56; // 0x414470\n    int64_t v57; // 0x414470\n    int64_t dest_mem2; // 0x414470\n    int64_t dest_mem3; // 0x414470\n    int64_t v58; // 0x414470\n    float80_t v59; // 0x414470\n    float80_t v60; // 0x414470\n    float80_t v61; // 0x414470\n    float80_t v62; // 0x414470\n    float80_t v63; // 0x414470\n    uint64_t v64; // 0x415816\n    char * v65; // 0x4146fc\n    char v66; // 0x4146fc\n    int64_t v67; // 0x414724\n    uint32_t v68; // 0x414728\n    int64_t v69; // 0x414b05\n    char v70; // 0x414470\n    if (v1 == v49) {\n        // 0x415810\n        v64 = v46 + 1;\n        if (v46 == -1) {\n            // 0x415f7a\n            v14 = v48;\n            dest_mem2 = v48;\n            v52 = -1;\n            if (v47 == -1) {\n                goto lab_0x415872;\n            } else {\n                goto lab_0x414a60_2;\n            }\n        } else {\n            // 0x415820\n            dest_mem2 = v48;\n            v52 = v47;\n            if (v47 >= v64) {\n                goto lab_0x415872;\n            } else {\n                if (v47 != 0) {\n                    // 0x415e3d\n                    v14 = v48;\n                    if (v47 < 0) {\n                        goto lab_0x414a60_2;\n                    } else {\n                        int64_t v71 = 2 * v47; // 0x415e43\n                        v51 = v71;\n                        if (v71 >= v64) {\n                            goto lab_0x41583e;\n                        } else {\n                            goto lab_0x415e4f;\n                        }\n                    }\n                } else {\n                    // 0x41582e\n                    v51 = 12;\n                    if (v64 < 13) {\n                        goto lab_0x41583e;\n                    } else {\n                        goto lab_0x415e4f;\n                    }\n                }\n            }\n        }\n    } else {\n        // 0x4146fc\n        v55 = v45;\n        v62 = v40;\n        v59 = v38;\n        v65 = (char *)(v55 + 72);\n        v66 = *v65;\n        int64_t v72 = *(int64_t *)(v55 + 80); // 0x414701\n        if (v66 == 37) {\n            if (v72 != -1) {\n                // 0x41519c\n                abort();\n                // UNREACHABLE\n            }\n            if (v46 == -1) {\n                // 0x4152d0\n                v14 = v48;\n                dest_mem3 = v48;\n                v54 = v47;\n                v56 = -1;\n                if (v47 != -1) {\n                    goto lab_0x414a60_2;\n                } else {\n                    goto lab_0x414b62;\n                }\n            } else {\n                // 0x414b12\n                v69 = v46 + 1;\n                dest_mem3 = v48;\n                v54 = v47;\n                v56 = v69;\n                if (v47 >= v69) {\n                    goto lab_0x414b62;\n                } else {\n                    if (v47 != 0) {\n                        // 0x415400\n                        v14 = v48;\n                        if (v47 < 0) {\n                            goto lab_0x414a60_2;\n                        } else {\n                            int64_t v73 = 2 * v47; // 0x415406\n                            v53 = v73;\n                            if (v73 >= v69) {\n                                goto lab_0x414b30;\n                            } else {\n                                goto lab_0x415412;\n                            }\n                        }\n                    } else {\n                        // 0x414b20\n                        v53 = 12;\n                        if (v69 < 13) {\n                            goto lab_0x414b30;\n                        } else {\n                            goto lab_0x415412;\n                        }\n                    }\n                }\n            }\n        } else {\n            if (v72 == -1) {\n                // 0x41519c\n                abort();\n                // UNREACHABLE\n            }\n            // 0x414719\n            v67 = 32 * v72 + v6;\n            v68 = *(int32_t *)v67;\n            g97 = v68 - 18;\n            switch (v68) {\n                case 18: {\n                    // 0x415090\n                    *(char *)*(int64_t *)(v67 + 16) = (char)v46;\n                    v60 = v59;\n                    v63 = v62;\n                    v58 = v48;\n                    v50 = v47;\n                    v57 = v46;\n                    goto lab_0x414b67;\n                }\n                case 19: {\n                    // 0x415080\n                    *(int16_t *)*(int64_t *)(v67 + 16) = (int16_t)v46;\n                    v60 = v59;\n                    v63 = v62;\n                    v58 = v48;\n                    v50 = v47;\n                    v57 = v46;\n                    goto lab_0x414b67;\n                }\n                case 20: {\n                    // 0x415068\n                    *(int32_t *)*(int64_t *)(v67 + 16) = (int32_t)v46;\n                    v60 = v59;\n                    v63 = v62;\n                    v58 = v48;\n                    v50 = v47;\n                    v57 = v46;\n                    goto lab_0x414b67;\n                }\n                case 21: {\n                    goto lab_0x414c50;\n                }\n                case 22: {\n                    goto lab_0x414c50;\n                }\n                default: {\n                    // 0x41473a\n                    v70 = v66 & -33;\n                    if (v68 == 12 == (v70 > 71 != v70 != 65)) {\n                        float80_t v74 = *(float80_t *)(v67 + 16); // 0x414be0\n                        v61 = v59;\n                        if (v74 != v74 || 0.0L != 0.0L) {\n                            goto lab_0x414bfd;\n                        } else {\n                            // 0x414be7\n                            v61 = v62;\n                            if (v62 != v59) {\n                                goto lab_0x414770;\n                            } else {\n                                goto lab_0x414bfd;\n                            }\n                        }\n                    } else {\n                        goto lab_0x414770;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x41458b:;\n    int64_t v75 = v34;\n    float80_t v76; // 0x414470\n    float80_t v77 = v76;\n    float80_t v78; // 0x414470\n    float80_t v79 = v78;\n    int64_t v80 = v33;\n    int64_t v81 = v32;\n    int64_t v82 = v30;\n    int64_t v83; // 0x414470\n    int64_t v84 = v83;\n    int64_t v85 = v31;\n    int64_t v86 = v29;\n    int64_t v87 = v28;\n    int64_t v88 = v86; // 0x41458e\n    int64_t v89 = v85; // 0x41458e\n    int64_t v90 = v84; // 0x41458e\n    float80_t v91 = v79; // 0x41458e\n    float80_t v92 = v77; // 0x41458e\n    int64_t v93 = v75; // 0x41458e\n    int64_t v94 = v80; // 0x41458e\n    int64_t v95 = v81; // 0x41458e\n    int64_t v96 = v82; // 0x41458e\n    int64_t v97 = v87; // 0x41458e\n    int64_t v98; // 0x414470\n    int64_t v99; // 0x414470\n    int64_t v100; // 0x414470\n    int64_t v101; // 0x414470\n    int64_t v102; // 0x414470\n    if (v82 >= v87) {\n        goto lab_0x4146d9;\n    } else {\n        if (v82 != 0) {\n            // 0x414670\n            v14 = v80;\n            if (v82 < 0) {\n                goto lab_0x414a60_2;\n            } else {\n                int64_t v103 = 2 * v82; // 0x414676\n                v99 = v103;\n                if (v103 >= v87) {\n                    goto lab_0x41468b;\n                } else {\n                    goto lab_0x41467e;\n                }\n            }\n        } else {\n            if (v87 < 13) {\n                int64_t v104 = v80 == v20; // 0x4145b4\n                v101 = v104;\n                v98 = 12;\n                v102 = v104;\n                v100 = 12;\n                if (v80 != 0) {\n                    goto lab_0x41469e;\n                } else {\n                    goto lab_0x4145c0;\n                }\n            } else {\n                goto lab_0x41467e;\n            }\n        }\n    }\n  lab_0x4146d9:\n    // 0x4146d9\n    memcpy((int64_t *)(v94 + v89), (int64_t *)v95, (int32_t)v88);\n    v36 = v93;\n    v38 = v92;\n    v40 = v91;\n    v41 = v94;\n    v42 = v96;\n    v43 = v97;\n    v45 = v90;\n    goto lab_0x4146e8;\n  lab_0x415872:\n    // 0x415872\n    *(char *)(dest_mem2 + v46) = 0;\n    int64_t result = dest_mem2; // 0x41587a\n    if (dest_mem2 != v20 && v52 > v64) {\n        int64_t * mem2 = realloc((int64_t *)dest_mem2, (int32_t)v64); // 0x41588b\n        result = mem2 != NULL ? (int64_t)mem2 : dest_mem2;\n    }\n    // 0x415897\n    if (v12 != 0) {\n        // 0x4158a3\n        free((int64_t *)v12);\n    }\n    if (v6 != (int64_t)&v4) {\n        // 0x4158c2\n        free(v22);\n    }\n    if (v6 != (int64_t)&v5) {\n        // 0x4158de\n        free((int64_t *)v6);\n    }\n    // 0x4158e3\n    *a2 = v46;\n    // 0x414ae0\n    return result;\n  lab_0x414c50:\n    // 0x414c50\n    *(int64_t *)*(int64_t *)(v67 + 16) = v46;\n    v60 = v59;\n    v63 = v62;\n    v58 = v48;\n    v50 = v47;\n    v57 = v46;\n    goto lab_0x414b67;\n  lab_0x41467e:\n    // 0x41467e\n    v99 = v87;\n    v14 = v80;\n    if (v87 == -1) {\n        goto lab_0x414a60_2;\n    } else {\n        goto lab_0x41468b;\n    }\n  lab_0x414c88:\n    // 0x414c88\n    free((int64_t *)v19);\n    v17 = v18;\n    goto lab_0x414a81;\n  lab_0x414a81:\n    if (v12 == 0) {\n        // 0x414b90\n        v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n        goto lab_0x414a99;\n    } else {\n        // 0x414a91\n        free((int64_t *)v12);\n        v10 = v17;\n        goto lab_0x414a99;\n    }\n  lab_0x414b62:\n    // 0x414b62\n    *(char *)(dest_mem3 + v46) = 37;\n    v60 = v59;\n    v63 = v62;\n    v58 = dest_mem3;\n    v50 = v54;\n    v57 = v56;\n    goto lab_0x414b67;\n  lab_0x414770:;\n    int64_t v273 = (int64_t)v11; // 0x414770\n    uint32_t v274 = *(int32_t *)(v55 + 16); // 0x414777\n    int64_t v275 = v273 + 1; // 0x41477b\n    *v11 = 37;\n    int64_t v276 = v275; // 0x414784\n    if (v274 % 2 != 0) {\n        // 0x414786\n        *(char *)v275 = 39;\n        v276 = v273 + 2;\n    }\n    int64_t v277 = v274; // 0x414777\n    int64_t v278 = v276;\n    int64_t v279 = v278; // 0x414797\n    if ((v277 & 2) != 0) {\n        // 0x414799\n        *(char *)v278 = 45;\n        v279 = v278 + 1;\n    }\n    int64_t v280 = v279;\n    int64_t v281 = v280; // 0x4147a3\n    if ((v277 & 4) != 0) {\n        // 0x4147a5\n        *(char *)v280 = 43;\n        v281 = v280 + 1;\n    }\n    int64_t v282 = v281;\n    int64_t v283 = v282; // 0x4147af\n    if ((v277 & 8) != 0) {\n        // 0x4147b1\n        *(char *)v282 = 32;\n        v283 = v282 + 1;\n    }\n    int64_t v284 = v283;\n    int64_t v285 = v284; // 0x4147bb\n    if ((v277 & 16) != 0) {\n        // 0x4147bd\n        *(char *)v284 = 35;\n        v285 = v284 + 1;\n    }\n    int64_t v286 = v285;\n    int64_t v287 = v286; // 0x4147c7\n    if ((v277 & 64) != 0) {\n        // 0x4147c9\n        *(char *)v286 = 73;\n        v287 = v286 + 1;\n    }\n    int64_t v288 = v287;\n    int64_t v289 = v288; // 0x4147d3\n    if ((v277 & 32) != 0) {\n        // 0x4147d5\n        *(char *)v288 = 48;\n        v289 = v288 + 1;\n    }\n    int64_t v290 = v289;\n    int64_t v291 = *(int64_t *)(v55 + 24); // 0x4147dd\n    int64_t v292 = *(int64_t *)(v55 + 32); // 0x4147e1\n    int64_t v293 = v290; // 0x4147e8\n    if (v292 != v291) {\n        int64_t v294 = v292 - v291; // 0x4147f7\n        memcpy((int64_t *)v290, (int64_t *)v291, (int32_t)v294);\n        v293 = (0x100000000000000 * v294 >> 56) + v290;\n    }\n    int64_t v295 = v293;\n    int64_t v296 = *(int64_t *)(v55 + 48); // 0x41481a\n    int64_t v297 = *(int64_t *)(v55 + 56); // 0x41481e\n    int64_t v298 = v295; // 0x414825\n    if (v297 != v296) {\n        int64_t v299 = v297 - v296; // 0x414834\n        memcpy((int64_t *)v295, (int64_t *)v296, (int32_t)v299);\n        v298 = (0x100000000000000 * v299 >> 56) + v295;\n    }\n    uint64_t v166 = (int64_t)v68; // 0x41472a\n    int64_t v300 = v298;\n    int64_t v158 = v300; // 0x414860\n    int64_t v272; // 0x414470\n    if (v68 < 17) {\n        uint64_t v301 = v166 % 64; // 0x414869\n        int64_t v302 = 1 << v301;\n        v272 = v300;\n        if ((v302 & 0x14180) != 0) {\n            goto lab_0x414c68;\n        } else {\n            if (v301 == 12) {\n                // 0x415428\n                *(char *)v300 = 76;\n                v158 = v300 + 1;\n                goto lab_0x414890;\n            } else {\n                // 0x414880\n                v158 = v300;\n                if ((v302 & 1536) != 0) {\n                    // 0x414c60\n                    *(char *)v300 = 108;\n                    v272 = v300 + 1;\n                    goto lab_0x414c68;\n                } else {\n                    goto lab_0x414890;\n                }\n            }\n        }\n    } else {\n        goto lab_0x414890;\n    }\n  lab_0x414b67:;\n    int64_t v105 = v57;\n    int64_t v106 = v50;\n    int64_t v107 = v58;\n    float80_t v108 = v63;\n    float80_t v109 = v60;\n    int64_t v110 = *(int64_t *)(v55 + 8); // 0x414b67\n    int64_t v111 = v55 + 88; // 0x414b6b\n    int64_t v112 = *(int64_t *)v111; // 0x414b6f\n    int64_t v113 = v49 + 1; // 0x414b72\n    v24 = v113;\n    v37 = v109;\n    v39 = v108;\n    v25 = v107;\n    v26 = v106;\n    v44 = v111;\n    v27 = v105;\n    if (v112 != v110) {\n        int64_t v114 = v112 - v110; // 0x414579\n        int64_t v115 = v114 + v105; // 0x41457f\n        v28 = v115;\n        v29 = v114;\n        v31 = v105;\n        v83 = v111;\n        v30 = v106;\n        v32 = v110;\n        v33 = v107;\n        v78 = v108;\n        v76 = v109;\n        v34 = v113;\n        if (v115 < v105) {\n            // 0x414ba8\n            v88 = v114;\n            v89 = v105;\n            v90 = v111;\n            v91 = v108;\n            v92 = v109;\n            v93 = v113;\n            v94 = v107;\n            v95 = v110;\n            v96 = v106;\n            v97 = -1;\n            v14 = v107;\n            if (v106 != -1) {\n                goto lab_0x414a60_2;\n            } else {\n                goto lab_0x4146d9;\n            }\n        } else {\n            goto lab_0x41458b;\n        }\n    } else {\n        goto lab_0x414b83;\n    }\n  lab_0x41468b:;\n    int64_t v116 = v80 == v20; // 0x414692\n    v101 = v116;\n    v98 = v99;\n    v102 = v116;\n    v100 = v99;\n    if (v80 == 0) {\n        goto lab_0x4145c0;\n    } else {\n        goto lab_0x41469e;\n    }\n  lab_0x41469e:;\n    int64_t v117 = v100;\n    v101 = v102;\n    v98 = v117;\n    int64_t v118; // 0x414470\n    if (v102 != 0) {\n        goto lab_0x4145c0;\n    } else {\n        int64_t * mem3 = realloc((int64_t *)v80, (int32_t)v117); // 0x4146ba\n        v118 = v80;\n        if (mem3 == NULL) {\n            goto lab_0x414c75;\n        } else {\n            // 0x4146c8\n            v88 = v86;\n            v89 = v85;\n            v90 = v84;\n            v91 = v79;\n            v92 = v77;\n            v93 = v75;\n            v94 = (int64_t)mem3;\n            v95 = 0x100000000000000 * v81 >> 56;\n            v96 = v117;\n            v97 = v87;\n            goto lab_0x4146d9;\n        }\n    }\n  lab_0x4145c0:;\n    int64_t size2 = v98;\n    int64_t * mem4 = malloc((int32_t)size2); // 0x4145d7\n    v14 = v80;\n    if (mem4 == NULL) {\n        goto lab_0x414a60_2;\n    } else {\n        // 0x4145fd\n        v88 = v86;\n        v89 = v85;\n        v90 = v84;\n        v91 = v79;\n        v92 = v77;\n        v93 = v75;\n        v94 = (int64_t)mem4;\n        v95 = v81;\n        v96 = size2;\n        v97 = v87;\n        if (v85 != 0 && (char)v101 != 0) {\n            int64_t * dest_mem = memcpy(mem4, (int64_t *)v80, (int32_t)v85); // 0x414625\n            v88 = v86;\n            v89 = v85;\n            v90 = v84;\n            v91 = v79;\n            v92 = v77;\n            v93 = v75;\n            v94 = (int64_t)dest_mem;\n            v95 = 0x100000000000000 * v81 >> 56;\n            v96 = size2;\n            v97 = v87;\n        }\n        goto lab_0x4146d9;\n    }\n  lab_0x41583e:;\n    int64_t size3 = v51;\n    if (v48 == 0 || v48 == v20) {\n        int64_t * mem5 = malloc((int32_t)size3); // 0x415e04\n        v14 = v48;\n        if (mem5 == NULL) {\n            goto lab_0x414a60_2;\n        } else {\n            // 0x415e15\n            dest_mem2 = (int64_t)mem5;\n            v52 = size3;\n            if (v48 == v20 && v46 != 0) {\n                // 0x415e2a\n                dest_mem2 = (int64_t)memcpy(mem5, (int64_t *)v48, (int32_t)v46);\n                v52 = size3;\n            }\n            goto lab_0x415872;\n        }\n    } else {\n        int64_t * mem6 = realloc((int64_t *)v48, (int32_t)size3); // 0x415861\n        v118 = v48;\n        if (mem6 == NULL) {\n            goto lab_0x414c75;\n        } else {\n            // 0x41586f\n            dest_mem2 = (int64_t)mem6;\n            v52 = size3;\n            goto lab_0x415872;\n        }\n    }\n  lab_0x415e4f:\n    // 0x415e4f\n    v14 = v48;\n    v51 = v64;\n    if (v64 == -1) {\n        goto lab_0x414a60_2;\n    } else {\n        goto lab_0x41583e;\n    }\n  lab_0x414bfd:;\n    float80_t v119 = v61;\n    int64_t v120 = *(int64_t *)(v55 + 24); // 0x414bfd\n    int64_t v121 = *(int64_t *)(v55 + 32); // 0x414c01\n    int64_t v122 = (int64_t)*(int32_t *)(v55 + 16); // 0x414c05\n    int64_t v123 = 0; // 0x414c0c\n    int64_t v124 = v122; // 0x414c0c\n    if (v120 != v121) {\n        int64_t v125 = *(int64_t *)(v55 + 40); // 0x414c12\n        int64_t v126 = v120; // 0x414c1a\n        if (v125 == -1) {\n            uint64_t v127 = 0;\n            int64_t v128 = v126 + 1; // 0x415ba1\n            uint64_t v129 = (int64_t)*(char *)v126 - 48; // 0x415bb9\n            int64_t v130 = v129 + (v127 < 0x199999999999999a ? 10 * v127 : -1); // 0x415bcb\n            int64_t v131 = v128; // 0x415bd4\n            int64_t v132 = v130; // 0x415bd4\n            int64_t v133; // 0x414470\n            int64_t v134; // 0x415be6\n            if (v130 < v129) {\n                // 0x415bd6\n                if (v121 == v128) {\n                    // break -> 0x4149f0\n                    break;\n                }\n                v133 = v128;\n                v134 = v133 + 1;\n                v131 = v134;\n                v132 = -1;\n                while (*(char *)v133 != 48) {\n                    // 0x4149db\n                    v123 = -1;\n                    v124 = v122;\n                    if (v121 == v134) {\n                        // break (via goto) -> 0x4149f0\n                        goto lab_0x4149f0;\n                    }\n                    v133 = v134;\n                    v134 = v133 + 1;\n                    v131 = v134;\n                    v132 = -1;\n                }\n            }\n            // 0x415b98\n            v123 = v132;\n            v124 = v122;\n            v126 = v131;\n            while (v121 != v131) {\n                // 0x415ba1\n                v127 = v132;\n                v128 = v126 + 1;\n                v129 = (int64_t)*(char *)v126 - 48;\n                v130 = v129 + (v127 < 0x199999999999999a ? 10 * v127 : -1);\n                v131 = v128;\n                v132 = v130;\n                if (v130 < v129) {\n                    // 0x415bd6\n                    v123 = -1;\n                    v124 = v122;\n                    v134 = v128;\n                    if (v121 == v128) {\n                        // break -> 0x4149f0\n                        break;\n                    }\n                    v133 = v134;\n                    v134 = v133 + 1;\n                    v131 = v134;\n                    v132 = -1;\n                    while (*(char *)v133 != 48) {\n                        // 0x4149db\n                        v123 = -1;\n                        v124 = v122;\n                        if (v121 == v134) {\n                            // break (via goto) -> 0x4149f0\n                            goto lab_0x4149f0;\n                        }\n                        v133 = v134;\n                        v134 = v133 + 1;\n                        v131 = v134;\n                        v132 = -1;\n                    }\n                }\n                // 0x415b98\n                v123 = v132;\n                v124 = v122;\n                v126 = v131;\n            }\n        } else {\n            int64_t v135 = 32 * v125 + v6; // 0x414c24\n            if (*(int32_t *)v135 != 5) {\n                // 0x41519c\n                abort();\n                // UNREACHABLE\n            }\n            int32_t v136 = *(int32_t *)(v135 + 16); // 0x414c30\n            int64_t v137 = v136; // 0x414c30\n            v123 = v137;\n            v124 = v122;\n            if (v136 < 0) {\n                // 0x414c3d\n                v123 = -v137;\n                v124 = v122 | 2;\n            }\n        }\n    }\n  lab_0x4149f0:;\n    int64_t v138 = v124;\n    int64_t v139 = v123;\n    int64_t v140 = *(int64_t *)(v55 + 48); // 0x4149f0\n    int64_t v141 = *(int64_t *)(v55 + 56); // 0x4149f4\n    int64_t v142; // 0x414470\n    int64_t v143; // 0x414470\n    int64_t v144; // 0x414470\n    if (v140 == v141) {\n        goto lab_0x4150a0;\n    } else {\n        int64_t v145 = *(int64_t *)(v55 + 64); // 0x414a01\n        if (v145 == -1) {\n            int64_t v146 = v140 + 1; // 0x415c04\n            v142 = 12;\n            v143 = 0;\n            int64_t v147 = v146; // 0x415c0d\n            if (v141 == v146) {\n                goto lab_0x4150be;\n            } else {\n                uint64_t v148 = 0;\n                int64_t v149 = v147 + 1; // 0x415c33\n                uint64_t v150 = (int64_t)*(char *)v147 - 48; // 0x415c3a\n                int64_t v151 = v150 + (v148 < 0x199999999999999a ? 10 * v148 : -1); // 0x415c53\n                int64_t v152 = v151; // 0x415c5c\n                int64_t v153 = v149; // 0x415c5c\n                int64_t v154; // 0x414470\n                int64_t v155; // 0x415c67\n                if (v151 < v150) {\n                    // 0x415c5e\n                    v14 = v48;\n                    if (v141 == v149) {\n                        goto lab_0x414a60_2;\n                    }\n                    v154 = v149;\n                    v155 = v154 + 1;\n                    v152 = -1;\n                    v153 = v155;\n                    while (*(char *)v154 != 48) {\n                        // 0x415c7a\n                        v14 = v48;\n                        if (v141 == v155) {\n                            goto lab_0x414a60_2;\n                        }\n                        v154 = v155;\n                        v155 = v154 + 1;\n                        v152 = -1;\n                        v153 = v155;\n                    }\n                }\n                // 0x415c20\n                v144 = v152;\n                v147 = v153;\n                while (v141 != v153) {\n                    // 0x415c29\n                    v148 = v152;\n                    v149 = v147 + 1;\n                    v150 = (int64_t)*(char *)v147 - 48;\n                    v151 = v150 + (v148 < 0x199999999999999a ? 10 * v148 : -1);\n                    v152 = v151;\n                    v153 = v149;\n                    if (v151 < v150) {\n                        // 0x415c5e\n                        v14 = v48;\n                        if (v141 == v149) {\n                            goto lab_0x414a60_2;\n                        }\n                        v154 = v149;\n                        v155 = v154 + 1;\n                        v152 = -1;\n                        v153 = v155;\n                        while (*(char *)v154 != 48) {\n                            // 0x415c7a\n                            v14 = v48;\n                            if (v141 == v155) {\n                                goto lab_0x414a60_2;\n                            }\n                            v154 = v155;\n                            v155 = v154 + 1;\n                            v152 = -1;\n                            v153 = v155;\n                        }\n                    }\n                    // 0x415c20\n                    v144 = v152;\n                    v147 = v153;\n                }\n                goto lab_0x414a2c;\n            }\n        } else {\n            int64_t v156 = 32 * v145 + v6; // 0x414a13\n            if (*(int32_t *)v156 != 5) {\n                // 0x41519c\n                abort();\n                // UNREACHABLE\n            }\n            int32_t v157 = *(int32_t *)(v156 + 16); // 0x414a20\n            v144 = v157;\n            if (v157 < 0) {\n                goto lab_0x4150a0;\n            } else {\n                goto lab_0x414a2c;\n            }\n        }\n    }\n  lab_0x414890:\n    // 0x414890\n    *(char *)(v158 + 1) = 0;\n    *(char *)v158 = *v65;\n    int64_t v159 = *(int64_t *)(v55 + 40); // 0x41489d\n    int64_t v160 = 0; // 0x4148a5\n    if (v159 != -1) {\n        // 0x4148ab\n        v160 = 4;\n        if (*(int32_t *)(32 * v159 + v6) != 5) {\n            // 0x41519c\n            abort();\n            // UNREACHABLE\n        }\n    }\n    int64_t v161 = *(int64_t *)(v55 + 64); // 0x4148ce\n    if (v161 != -1) {\n        int64_t v162 = 32 * v161 + v6; // 0x4148dc\n        if (*(int32_t *)v162 != 5) {\n            // 0x41519c\n            abort();\n            // UNREACHABLE\n        }\n        int32_t v163 = *(int32_t *)(v162 + 16); // 0x4148ef\n        int64_t v164; // bp-8, 0x414470\n        *(int32_t *)(v160 | (int64_t)&v164 - 1656) = v163;\n    }\n    int64_t size6; // 0x414470\n    uint64_t v165; // 0x414906\n    if (v46 > 0xfffffffffffffffd) {\n        // 0x415338\n        v14 = v48;\n        if (v47 == -1) {\n            // 0x414964\n            *(char *)(v48 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n        goto lab_0x414a60_2;\n    } else {\n        // 0x414910\n        v165 = v46 + 2;\n        if (v47 >= v165) {\n            // 0x414964\n            *(char *)(v48 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n        if (v47 != 0) {\n            // 0x415040\n            v14 = v48;\n            if (v47 < 0) {\n                goto lab_0x414a60_2;\n            } else {\n                int64_t v167 = 2 * v47; // 0x415046\n                size6 = v167;\n                if (v167 >= v165) {\n                    goto lab_0x414932;\n                } else {\n                    goto lab_0x415052;\n                }\n            }\n        } else {\n            // 0x414922\n            size6 = 12;\n            if (v165 < 13) {\n                goto lab_0x414932;\n            } else {\n                goto lab_0x415052;\n            }\n        }\n    }\n  lab_0x414b30:;\n    int64_t size4 = v53;\n    if (v48 == 0 || v48 == v20) {\n        int64_t * mem7 = malloc((int32_t)size4); // 0x415359\n        v14 = v48;\n        if (mem7 == NULL) {\n            goto lab_0x414a60_2;\n        } else {\n            // 0x415371\n            dest_mem3 = (int64_t)mem7;\n            v54 = size4;\n            v56 = v69;\n            if (v48 == v20 && v46 != 0) {\n                // 0x415382\n                dest_mem3 = (int64_t)memcpy(mem7, (int64_t *)v48, (int32_t)v46);\n                v54 = size4;\n                v56 = v69;\n            }\n            goto lab_0x414b62;\n        }\n    } else {\n        int64_t * mem8 = realloc((int64_t *)v48, (int32_t)size4); // 0x414b51\n        v118 = v48;\n        if (mem8 == NULL) {\n            goto lab_0x414c75;\n        } else {\n            // 0x414b5f\n            dest_mem3 = (int64_t)mem8;\n            v54 = size4;\n            v56 = v69;\n            goto lab_0x414b62;\n        }\n    }\n  lab_0x415412:\n    // 0x415412\n    v14 = v48;\n    v53 = v69;\n    if (v69 == -1) {\n        goto lab_0x414a60_2;\n    } else {\n        goto lab_0x414b30;\n    }\n  lab_0x4150a0:\n    // 0x4150a0\n    v142 = v70 != 65 ? 18 : 12;\n    v143 = v70 != 65 ? 6 : 0;\n    goto lab_0x4150be;\n  lab_0x414c68:\n    // 0x414c68\n    *(char *)v272 = 108;\n    v158 = v272 + 1;\n    goto lab_0x414890;\n  lab_0x414c75:\n    // 0x414c75\n    v18 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n    v19 = v118;\n    goto lab_0x414c88;\n  lab_0x4150be:;\n    uint64_t v168 = v142;\n    int64_t v169 = v139 >= v168 ? v139 : v168; // 0x4150c4\n    v14 = v48;\n    int64_t v170; // 0x414470\n    int64_t v171; // 0x414470\n    int64_t * v172; // 0x414470\n    int64_t v173; // 0x414470\n    int64_t v174; // bp-760, 0x414470\n    uint64_t size5; // 0x4150c8\n    if (v169 == -1) {\n        goto lab_0x414a60_2;\n    } else {\n        // 0x4150d9\n        v173 = v143;\n        size5 = v169 + 1;\n        v172 = &v174;\n        v170 = v139;\n        v171 = v138;\n        if (size5 < 701) {\n            goto lab_0x415139;\n        } else {\n            // 0x4150e5\n            v14 = v48;\n            if (size5 == -1) {\n                goto lab_0x414a60_2;\n            } else {\n                int64_t * mem9 = malloc((int32_t)size5); // 0x41510d\n                v14 = v48;\n                v172 = mem9;\n                v170 = 0x100000000 * v139 >> 32;\n                v171 = v138 & 0xffffffff;\n                if (mem9 == NULL) {\n                    goto lab_0x414a60_2;\n                } else {\n                    goto lab_0x415139;\n                }\n            }\n        }\n    }\n  lab_0x414a2c:;\n    int64_t v175 = v144;\n    v142 = 12;\n    v143 = 0;\n    if (v175 == 0) {\n        goto lab_0x4150be;\n    } else {\n        // 0x414a35\n        v14 = v48;\n        v142 = v175 + 12;\n        v143 = v175;\n        if (v175 <= 0xfffffffffffffff3) {\n            goto lab_0x4150be;\n        } else {\n            goto lab_0x414a60_2;\n        }\n    }\n  lab_0x414932:\n    // 0x414932\n    if (v48 == 0 || v48 == v20) {\n        int64_t * mem10 = malloc((int32_t)size6); // 0x4152f9\n        v14 = v48;\n        if (mem10 != NULL) {\n            int64_t dest_mem4 = (int64_t)mem10; // 0x415314\n            if (v48 == v20 && v46 != 0) {\n                // 0x415322\n                dest_mem4 = (int64_t)memcpy(mem10, (int64_t *)v48, (int32_t)v46);\n            }\n            // 0x414964\n            *(char *)(dest_mem4 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n    } else {\n        int64_t * mem11 = realloc((int64_t *)v48, (int32_t)size6); // 0x414953\n        v14 = v48;\n        if (mem11 != NULL) {\n            // 0x414964\n            *(char *)((int64_t)mem11 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n    }\n    goto lab_0x414a60_2;\n  lab_0x415052:\n    // 0x415052\n    size6 = v165;\n    v14 = v48;\n    if (v165 == -1) {\n        goto lab_0x414a60_2;\n    } else {\n        goto lab_0x414932;\n    }\n  lab_0x415139:;\n    int64_t v176 = v171;\n    int64_t v177 = v170;\n    int64_t * v178 = v172;\n    int64_t v179 = (int64_t)v178;\n    int64_t v180; // 0x414470\n    int64_t v181; // 0x414470\n    int64_t v182; // 0x414470\n    int64_t v183; // 0x414470\n    int64_t v184; // 0x414470\n    int64_t v185; // 0x414470\n    int64_t v186; // 0x414470\n    int64_t v187; // 0x414470\n    int64_t v188; // 0x414470\n    int64_t v189; // 0x414470\n    int64_t v190; // 0x414470\n    int64_t v191; // 0x414470\n    int64_t v192; // 0x414470\n    int64_t v193; // 0x414470\n    float80_t v194; // 0x414470\n    float80_t v195; // 0x414470\n    if (v119 != v119 || 0.0L != 0.0L) {\n        int64_t v196 = v179 + 3; // 0x415cb2\n        char * v197 = (char *)(v179 + 2);\n        if (v66 < 91) {\n            // 0x415cc0\n            *v197 = 78;\n            *(int16_t *)v178 = 0x414e;\n            v194 = v119;\n            v195 = v62;\n            v190 = v179;\n            v189 = v196;\n            v182 = v177;\n            v184 = v176;\n            v188 = 0;\n        } else {\n            // 0x415ded\n            *v197 = 110;\n            *(int16_t *)v178 = 0x616e;\n            v194 = v119;\n            v195 = v62;\n            v190 = v179;\n            v189 = v196;\n            v182 = v177;\n            v184 = v176;\n            v188 = 0;\n        }\n        goto lab_0x4155f9;\n    } else {\n        // 0x415141\n        int64_t v198; // 0x414470\n        float80_t v199; // 0x414470\n        if ((__asm_fxam(v119) & 512) == 0) {\n            if ((v176 & 4) == 0) {\n                // 0x415901\n                v199 = v119;\n                v198 = v179;\n                if ((v176 & 8) != 0) {\n                    // 0x41590e\n                    *(char *)v178 = 32;\n                    v199 = v119;\n                    v198 = v179 + 1;\n                }\n            } else {\n                // 0x41576a\n                *(char *)v178 = 43;\n                v199 = v119;\n                v198 = v179 + 1;\n            }\n        } else {\n            // 0x41516f\n            *(char *)v178 = 45;\n            v199 = -v119;\n            v198 = v179 + 1;\n        }\n        // 0x415178\n        v187 = v198;\n        if (v199 <= 0.0L) {\n            if (v62 != 0.0L) {\n                // 0x41519c\n                abort();\n                // UNREACHABLE\n            }\n            char v200 = *v65 & -33;\n            if (v200 != 70) {\n                if (v200 != 69) {\n                    if (v200 != 71) {\n                        if (v200 != 65) {\n                            // 0x41519c\n                            abort();\n                            // UNREACHABLE\n                        }\n                        // 0x415ce6\n                        *(char *)v187 = 48;\n                        *(char *)(v187 + 2) = 48;\n                        *(char *)(v187 + 1) = *v65 + 23;\n                        if ((v176 & 16) != 0) {\n                            // 0x415ce6\n                            v181 = v187 + 3;\n                            goto lab_0x415e61;\n                        } else {\n                            int64_t v201 = v187 + 3;\n                            v191 = v179;\n                            v193 = v201;\n                            v186 = v176;\n                            v181 = v201;\n                            if (v173 != 0) {\n                                goto lab_0x415e61;\n                            } else {\n                                goto lab_0x415d22;\n                            }\n                        }\n                    } else {\n                        // 0x4159f3\n                        *(char *)v187 = 48;\n                        if ((v176 & 16) == 0) {\n                            goto lab_0x4155e7;\n                        } else {\n                            int64_t v202 = v187 + 2; // 0x415a01\n                            if (v173 == 0) {\n                                char v203 = *nl_langinfo(0x10000); // 0x415f4a\n                                *(char *)(v187 + 1) = v203 == 0 ? 46 : v203;\n                                v194 = 0.0L;\n                                v195 = v62;\n                                v190 = v179;\n                                v189 = v202;\n                                v182 = v177;\n                                v184 = 0x1000000 * (int32_t)v176 >> 24;\n                                v188 = v187;\n                            } else {\n                                char * v204 = nl_langinfo(0x10000); // 0x415a48\n                                int64_t v205 = 0x100000000000000 * v173 - 0x100000000000000;\n                                char v206 = *v204; // 0x415a5b\n                                int64_t v207 = v176 & 0xffffffff; // 0x415a5e\n                                int64_t v208 = 0x100000000 * v202 >> 32; // 0x415a6c\n                                int64_t v209 = v187 + 1; // 0x415a89\n                                *(char *)v209 = v206 == 0 ? 46 : v206;\n                                v194 = 0.0L;\n                                v195 = v62;\n                                v190 = v179;\n                                v189 = v208;\n                                v182 = v177;\n                                v184 = v207;\n                                v188 = v187;\n                                if (v205 != 0) {\n                                    int64_t v210 = v208 + 1; // 0x415a9e\n                                    *(char *)v208 = 48;\n                                    while (v210 != v209 + v173) {\n                                        int64_t v211 = v210;\n                                        v210 = v211 + 1;\n                                        *(char *)v211 = 48;\n                                    }\n                                    // 0x415aab\n                                    v194 = 0.0L;\n                                    v195 = v62;\n                                    v190 = v179;\n                                    v189 = v208 + (v205 >> 56);\n                                    v182 = v177;\n                                    v184 = v207;\n                                    v188 = v187;\n                                }\n                            }\n                            goto lab_0x4155f9;\n                        }\n                    }\n                } else {\n                    // 0x415798\n                    *(char *)v187 = 48;\n                    if ((v176 & 16) != 0) {\n                        // 0x415798\n                        v180 = v187 + 1;\n                        goto lab_0x415d47;\n                    } else {\n                        int64_t v212 = v187 + 1;\n                        v192 = v212;\n                        v183 = v177;\n                        v185 = v176;\n                        v180 = v212;\n                        if (v173 != 0) {\n                            goto lab_0x415d47;\n                        } else {\n                            goto lab_0x4157b8;\n                        }\n                    }\n                }\n            } else {\n                // 0x4155d0\n                *(char *)v187 = 48;\n                if ((v176 & 16 || v173) == 0) {\n                    goto lab_0x4155e7;\n                } else {\n                    char * v213 = nl_langinfo(0x10000); // 0x415b1c\n                    int64_t v214 = 0x100000000000000 * v187 + 0x200000000000000 >> 56; // 0x415b2d\n                    char v215 = *v213; // 0x415b34\n                    *(char *)(v187 + 1) = v215 == 0 ? 46 : v215;\n                    v194 = 0.0L;\n                    v195 = v62;\n                    v190 = v179;\n                    v189 = v214;\n                    v182 = 0x100000000 * v177 >> 32;\n                    v184 = v176 & 0xffffffff;\n                    v188 = v187;\n                    if (v173 != 0) {\n                        int64_t v216 = v214 + 1; // 0x415b70\n                        *(char *)v214 = 48;\n                        while (v216 != v187 + 2 + v173) {\n                            int64_t v217 = v216;\n                            v216 = v217 + 1;\n                            *(char *)v217 = 48;\n                        }\n                        // 0x415b7d\n                        v194 = 0.0L;\n                        v195 = v62;\n                        v190 = v179;\n                        v189 = v214 + v173;\n                        int64_t v218; // 0x415b45\n                        v182 = v218;\n                        int64_t v219; // 0x415b37\n                        v184 = v219;\n                        v188 = v187;\n                    }\n                    goto lab_0x4155f9;\n                }\n            }\n        } else {\n            float80_t v220; // 0x414470\n            if (v220 != 0.0L) {\n                // 0x41519c\n                abort();\n                // UNREACHABLE\n            }\n            int64_t v221 = v187 + 3; // 0x4157eb\n            char * v222 = (char *)(v187 + 2);\n            if (*v65 < 91) {\n                // 0x4157fa\n                *v222 = 70;\n                *(int16_t *)v187 = 0x4e49;\n                v194 = 0.0L;\n                v195 = 0.0L;\n                v190 = v179;\n                v189 = v221;\n                v182 = v177;\n                v184 = v176;\n                v188 = 0;\n            } else {\n                // 0x415ad3\n                *v222 = 102;\n                *(int16_t *)v187 = 0x6e69;\n                v194 = 0.0L;\n                v195 = 0.0L;\n                v190 = v179;\n                v189 = v221;\n                v182 = v177;\n                v184 = v176;\n                v188 = 0;\n            }\n            goto lab_0x4155f9;\n        }\n    }\n  lab_0x4155f9:;\n    uint64_t v223 = v182;\n    int64_t v224 = v189;\n    int64_t v225 = v190;\n    float80_t v226 = v195;\n    float80_t v227 = v194;\n    int64_t v228 = v224 - v225; // 0x4155fc\n    int64_t v229 = v228; // 0x415602\n    if (v223 > v228) {\n        int64_t v230 = v184;\n        int64_t v231 = v223 - v228; // 0x415604\n        int64_t v232 = v231 + v224; // 0x415607\n        int64_t v233 = v232 - v225; // 0x41560e\n        if ((v230 & 2) != 0) {\n            // 0x415ab3\n            v229 = v233;\n            int64_t v234 = v224; // 0x415ab6\n            if (v231 != 0) {\n                int64_t v235 = v234 + 1; // 0x415ac0\n                *(char *)v234 = 32;\n                v229 = v233;\n                v234 = v235;\n                while (v232 != v235) {\n                    // 0x415ac0\n                    v235 = v234 + 1;\n                    *(char *)v234 = 32;\n                    v229 = v233;\n                    v234 = v235;\n                }\n            }\n        } else {\n            int64_t v236 = v188;\n            if ((v230 & 32) == 0 || v236 == 0) {\n                int64_t v237 = v225 + -1 - v224; // 0x415925\n                int64_t v238 = v224; // 0x41592b\n                if (v224 > v225) {\n                    int64_t v239 = -1;\n                    *(char *)(v239 + v232) = *(char *)(v239 + v224);\n                    int64_t v240 = v239 - 1; // 0x415939\n                    v238 = v225;\n                    while (v237 != v240) {\n                        // 0x415930\n                        v239 = v240;\n                        *(char *)(v239 + v232) = *(char *)(v239 + v224);\n                        v240 = v239 - 1;\n                        v238 = v225;\n                    }\n                }\n                // 0x415945\n                v229 = v233;\n                if (v231 != 0) {\n                    int64_t v241 = v238 + 1; // 0x415958\n                    *(char *)v238 = 32;\n                    v229 = v233;\n                    while (v241 != v238 + v231) {\n                        int64_t v242 = v241;\n                        v241 = v242 + 1;\n                        *(char *)v242 = 32;\n                        v229 = v233;\n                    }\n                }\n            } else {\n                int64_t v243 = v224; // 0x415631\n                if (v236 < v224) {\n                    int64_t v244 = -1;\n                    *(char *)(v244 + v232) = *(char *)(v244 + v224);\n                    int64_t v245 = v244 - 1; // 0x415651\n                    v243 = v236;\n                    while (v245 != v236 + -1 - v224) {\n                        // 0x415648\n                        v244 = v245;\n                        *(char *)(v244 + v232) = *(char *)(v244 + v224);\n                        v245 = v244 - 1;\n                        v243 = v236;\n                    }\n                }\n                // 0x41565a\n                v229 = v233;\n                if (v231 != 0) {\n                    int64_t v246 = v243 + 1; // 0x415668\n                    *(char *)v243 = 48;\n                    v229 = v233;\n                    while (v246 != v243 + v231) {\n                        int64_t v247 = v246;\n                        v246 = v247 + 1;\n                        *(char *)v247 = 48;\n                        v229 = v233;\n                    }\n                }\n            }\n        }\n    }\n    int64_t v248 = v229;\n    if (size5 <= v248) {\n        // 0x41519c\n        abort();\n        // UNREACHABLE\n    }\n    uint64_t v249 = v248 + v46; // 0x415698\n    int64_t dest_mem5 = v48; // 0x4156a5\n    int64_t v250 = v248; // 0x4156a5\n    int64_t v251 = v47; // 0x4156a5\n    int64_t v252; // 0x414470\n    if (v47 - v46 > v248) {\n        goto lab_0x415720;\n    } else {\n        if (v249 < v46) {\n            // 0x4158f2\n            v14 = v48;\n            dest_mem5 = v48;\n            v250 = v248;\n            v251 = v47;\n            if (v47 != -1) {\n                goto lab_0x414a60_2;\n            } else {\n                goto lab_0x415720;\n            }\n        } else {\n            // 0x4156b0\n            dest_mem5 = v48;\n            v250 = v248;\n            v251 = v47;\n            if (v47 >= v249) {\n                goto lab_0x415720;\n            } else {\n                if (v47 != 0) {\n                    // 0x415c88\n                    v14 = v48;\n                    if (v47 < 0) {\n                        goto lab_0x414a60_2;\n                    } else {\n                        int64_t v253 = 2 * v47; // 0x415c8e\n                        v252 = v253;\n                        if (v253 >= v249) {\n                            goto lab_0x4156ce;\n                        } else {\n                            goto lab_0x415c9a;\n                        }\n                    }\n                } else {\n                    // 0x4156be\n                    v252 = 12;\n                    if (v249 < 13) {\n                        goto lab_0x4156ce;\n                    } else {\n                        goto lab_0x415c9a;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x415720:;\n    int64_t v254 = v251;\n    int64_t v255 = dest_mem5;\n    int64_t * v256 = (int64_t *)v225; // 0x415731\n    memcpy((int64_t *)(v255 + v46), v256, (int32_t)v250);\n    v60 = v227;\n    v63 = v226;\n    v58 = v255;\n    v50 = v254;\n    v57 = v249;\n    if (v225 != (int64_t)&v174) {\n        // 0x41574d\n        free(v256);\n        v60 = v227;\n        v63 = v226;\n        v58 = v255;\n        v50 = v254;\n        v57 = v249;\n    }\n    goto lab_0x414b67;\n  lab_0x4155e7:\n    // 0x4155e7\n    v194 = 0.0L;\n    v195 = v62;\n    v190 = v179;\n    v189 = v187 + 1;\n    v182 = v177;\n    v184 = v176;\n    v188 = v187;\n    goto lab_0x4155f9;\n  lab_0x415d47:;\n    char * v257 = nl_langinfo(0x10000); // 0x415d7a\n    int64_t v258 = 0x100000000000000 * v187 + 0x200000000000000 >> 56; // 0x415d8b\n    char v259 = *v257; // 0x415d92\n    int64_t v260 = v176 & 0xffffffff; // 0x415d95\n    int64_t v261 = 0x100000000 * v177 >> 32; // 0x415da3\n    *(char *)v180 = v259 == 0 ? 46 : v259;\n    v192 = v258;\n    v183 = v261;\n    v185 = v260;\n    if (v173 != 0) {\n        int64_t v262 = v258 + 1; // 0x415dd0\n        *(char *)v258 = 48;\n        while (v262 != v187 + 2 + v173) {\n            int64_t v263 = v262;\n            v262 = v263 + 1;\n            *(char *)v263 = 48;\n        }\n        // 0x415ddd\n        v192 = v258 + v173;\n        v183 = v261;\n        v185 = v260;\n    }\n    goto lab_0x4157b8;\n  lab_0x4157b8:\n    // 0x4157b8\n    *(char *)(v192 + 3) = 48;\n    *(char *)v192 = *v65;\n    *(int16_t *)(v192 + 1) = 0x302b;\n    v194 = 0.0L;\n    v195 = v62;\n    v190 = v179;\n    v189 = v192 + 4;\n    v182 = v183;\n    v184 = v185;\n    v188 = v187;\n    goto lab_0x4155f9;\n  lab_0x4156ce:\n    // 0x4156ce\n    if (v48 == 0 || v48 == v20) {\n        // 0x41596b\n        int64_t size7; // 0x414470\n        int64_t * mem12 = malloc((int32_t)size7); // 0x415982\n        v14 = v48;\n        if (mem12 == NULL) {\n            goto lab_0x414a60_2;\n        } else {\n            int64_t v264 = 0x100000000000000 * v248 >> 56; // 0x41598e\n            dest_mem5 = (int64_t)mem12;\n            v250 = v264;\n            v251 = size7;\n            if (v48 == v20 && v46 != 0) {\n                // 0x4159b9\n                dest_mem5 = (int64_t)memcpy(mem12, (int64_t *)v48, (int32_t)v46);\n                v250 = v264;\n                v251 = size7;\n            }\n            goto lab_0x415720;\n        }\n    } else {\n        int64_t * mem13 = realloc((int64_t *)v48, (int32_t)v252); // 0x4156fd\n        v14 = v48;\n        if (mem13 == NULL) {\n            goto lab_0x414a60_2;\n        } else {\n            // 0x41570b\n            dest_mem5 = (int64_t)mem13;\n            v250 = 0x100000000000000 * v248 >> 56;\n            v251 = v252;\n            goto lab_0x415720;\n        }\n    }\n  lab_0x415c9a:\n    // 0x415c9a\n    v14 = v48;\n    v252 = v249;\n    if (v249 == -1) {\n        goto lab_0x414a60_2;\n    } else {\n        goto lab_0x4156ce;\n    }\n  lab_0x415e61:;\n    int64_t v265 = v187 + 4; // 0x415e61\n    char v266 = *nl_langinfo(0x10000); // 0x415eac\n    int64_t v267 = v176 & 0xffffffff; // 0x415eaf\n    int64_t v268 = 0x100000000 * v179 >> 32; // 0x415eb6\n    *(char *)v181 = v266 == 0 ? 46 : v266;\n    v191 = v268;\n    v193 = v265;\n    v186 = v267;\n    if (v173 != 0) {\n        int64_t v269 = v265 + v173; // 0x415edd\n        int64_t v270 = v265 + 1; // 0x415ee5\n        *(char *)v265 = 48;\n        v191 = v268;\n        v193 = v269;\n        v186 = v267;\n        while (v270 != v269) {\n            int64_t v271 = v270;\n            v270 = v271 + 1;\n            *(char *)v271 = 48;\n            v191 = v268;\n            v193 = v269;\n            v186 = v267;\n        }\n    }\n    goto lab_0x415d22;\n  lab_0x415d22:\n    // 0x415d22\n    *(int16_t *)(v193 + 1) = 0x302b;\n    *(char *)v193 = *v65 + 15;\n    v194 = 0.0L;\n    v195 = v62;\n    v190 = v191;\n    v189 = v193 + 3;\n    v182 = v177;\n    v184 = v186;\n    v188 = 0x100000000000000 * v187 + 0x200000000000000 >> 56;\n    goto lab_0x4155f9;\n}\n"
        },
        {
            "funcName": "function_415f90",
            "funcStartAddr": "415f90",
            "funcEndAddr": "416023",
            "decompiledFuncCode": "int64_t function_415f90(int64_t file_path, char * mode) {\n    struct _IO_FILE * file = fopen((char *)file_path, mode); // 0x415f97\n    int64_t result = (int64_t)file; // 0x415f97\n    if (file == NULL) {\n        // 0x415fb1\n        return result;\n    }\n    uint32_t v1 = fileno(file); // 0x415fa7\n    if (v1 >= 3) {\n        // 0x415fb1\n        return result;\n    }\n    int64_t v2 = (int64_t)mode;\n    int32_t fd = function_4143d0((int64_t)v1, v2); // 0x415fca\n    if (fd < 0) {\n        int32_t * v3 = __errno_location(); // 0x416008\n        function_4143e0(result, v2);\n        // 0x415fb1\n        return 0;\n    }\n    // 0x415fce\n    if ((int32_t)function_4143e0(result, v2) == 0) {\n        struct _IO_FILE * v4 = fdopen(fd, mode); // 0x415fe0\n        if (v4 != NULL) {\n            // 0x415fb1\n            return (int64_t)v4;\n        }\n    }\n    int32_t * v5 = __errno_location(); // 0x415fed\n    close(fd);\n    // 0x415fb1\n    return 0;\n}\n"
        },
        {
            "funcName": "function_416030",
            "funcStartAddr": "416030",
            "funcEndAddr": "416249",
            "decompiledFuncCode": "int64_t function_416030(int64_t a1, int64_t * a2, int64_t a3) {\n    int64_t v1 = a1;\n    if (a2 == NULL) {\n        // 0x416093\n        return 0;\n    }\n    uint64_t v2 = (int64_t)a2;\n    int64_t v3 = 0; // 0x416048\n    int64_t v4 = *(int64_t *)(v2 + 8);\n    uint32_t v5 = *(int32_t *)v4; // 0x416059\n    g87 = v5;\n    int64_t v6; // 0x416030\n    int64_t v7; // 0x416030\n    int64_t v8; // 0x416030\n    int64_t v9; // 0x416030\n    int64_t v10; // 0x416030\n    int64_t v11; // 0x416030\n    int64_t v12; // 0x416030\n    uint32_t v13; // 0x416150\n    int64_t * v14; // 0x416180\n    int64_t v15; // 0x416188\n    uint32_t v16; // 0x4161d0\n    uint32_t v17; // 0x4161a0\n    int64_t * v18; // 0x416130\n    int64_t v19; // 0x416130\n    int64_t * v20; // 0x416140\n    int64_t v21; // 0x416140\n    int64_t * v22; // 0x416118\n    int64_t v23; // 0x416118\n    int64_t * v24; // 0x416100\n    int64_t v25; // 0x416100\n    int64_t * v26; // 0x416220\n    uint32_t v27; // 0x4160e0\n    int64_t v28; // 0x416220\n    int64_t * v29; // 0x416210\n    int64_t v30; // 0x416210\n    uint32_t v31; // 0x4160c0\n    int64_t * v32; // 0x416238\n    int64_t v33; // 0x416238\n    int64_t v34; // 0x4161e3\n    uint32_t v35; // 0x4160a0\n    int64_t v36; // 0x4161b7\n    uint32_t v37; // 0x416068\n    int32_t * v38; // 0x416150\n    switch (v5) {\n        case 1: {\n        }\n        case 2: {\n            // 0x4160e0\n            v27 = *(int32_t *)&v1;\n            if (v27 < 48) {\n                // 0x4160e7\n                *(int32_t *)v1 = v27 + 8;\n                v9 = *(int64_t *)(v1 + 16) + (int64_t)v27;\n            } else {\n                // 0x416130\n                v18 = (int64_t *)(v1 + 8);\n                v19 = *v18;\n                *v18 = v19 + 8;\n                v9 = v19;\n            }\n            // 0x4160f3\n            *(char *)(v4 + 16) = (char)*(int32_t *)v9;\n            // break -> 0x416086\n            break;\n        }\n        case 3: {\n        }\n        case 4: {\n            // 0x4160c0\n            v31 = *(int32_t *)&v1;\n            if (v31 < 48) {\n                // 0x4160c7\n                *(int32_t *)v1 = v31 + 8;\n                v8 = *(int64_t *)(v1 + 16) + (int64_t)v31;\n            } else {\n                // 0x416140\n                v20 = (int64_t *)(v1 + 8);\n                v21 = *v20;\n                *v20 = v21 + 8;\n                v8 = v21;\n            }\n            // 0x4160d3\n            *(int16_t *)(v4 + 16) = (int16_t)*(int32_t *)v8;\n            // break -> 0x416086\n            break;\n        }\n        case 5: {\n        }\n        case 6: {\n        }\n        case 13: {\n        }\n        case 14: {\n            // 0x4160a0\n            v35 = *(int32_t *)&v1;\n            if (v35 < 48) {\n                // 0x4160a7\n                *(int32_t *)v1 = v35 + 8;\n                v7 = *(int64_t *)(v1 + 16) + (int64_t)v35;\n            } else {\n                // 0x416118\n                v22 = (int64_t *)(v1 + 8);\n                v23 = *v22;\n                *v22 = v23 + 8;\n                v7 = v23;\n            }\n            // 0x4160b3\n            *(int32_t *)(v4 + 16) = *(int32_t *)v7;\n            // break -> 0x416086\n            break;\n        }\n        case 7: {\n        }\n        case 8: {\n        }\n        case 9: {\n        }\n        case 10: {\n        }\n        case 17: {\n        }\n        case 18: {\n        }\n        case 19: {\n        }\n        case 20: {\n        }\n        case 21: {\n        }\n        case 22: {\n            // 0x416068\n            v37 = *(int32_t *)&v1;\n            if (v37 < 48) {\n                // 0x416073\n                *(int32_t *)v1 = v37 + 8;\n                v6 = *(int64_t *)(v1 + 16) + (int64_t)v37;\n            } else {\n                // 0x416100\n                v24 = (int64_t *)(v1 + 8);\n                v25 = *v24;\n                *v24 = v25 + 8;\n                v6 = v25;\n            }\n            // 0x41607f\n            *(int64_t *)(v4 + 16) = *(int64_t *)v6;\n            // break -> 0x416086\n            break;\n        }\n        case 11: {\n            // 0x416150\n            v38 = (int32_t *)(v1 + 4);\n            v13 = *v38;\n            if (v13 < 176) {\n                // 0x41615f\n                *v38 = v13 + 16;\n                v10 = *(int64_t *)(v1 + 16) + (int64_t)v13;\n            } else {\n                // 0x416220\n                v26 = (int64_t *)(v1 + 8);\n                v28 = *v26;\n                *v26 = v28 + 8;\n                v10 = v28;\n            }\n            // 0x41616c\n            *(int64_t *)(v4 + 16) = __asm_movsd_7(__asm_movsd(*(int64_t *)v10));\n            // break -> 0x416086\n            break;\n        }\n        case 12: {\n            // 0x416180\n            v14 = (int64_t *)(v1 + 8);\n            v15 = *v14 + 15 & -16;\n            *v14 = v15 + 16;\n            *(float80_t *)(v4 + 16) = *(float80_t *)v15;\n            // break -> 0x416086\n            break;\n        }\n        case 15: {\n            // 0x4161d0\n            v16 = *(int32_t *)&v1;\n            if (v16 < 48) {\n                // 0x4161d7\n                *(int32_t *)v1 = v16 + 8;\n                v12 = *(int64_t *)(v1 + 16) + (int64_t)v16;\n            } else {\n                // 0x416210\n                v29 = (int64_t *)(v1 + 8);\n                v30 = *v29;\n                *v29 = v30 + 8;\n                v12 = v30;\n            }\n            // 0x4161e3\n            v34 = *(int64_t *)v12;\n            *(int64_t *)(v4 + 16) = v34 == 0 ? (int64_t)\"(NULL)\" : v34;\n            // break -> 0x416086\n            break;\n        }\n        case 16: {\n            // 0x4161a0\n            v17 = *(int32_t *)&v1;\n            if (v17 < 48) {\n                // 0x4161ab\n                *(int32_t *)v1 = v17 + 8;\n                v11 = *(int64_t *)(v1 + 16) + (int64_t)v17;\n            } else {\n                // 0x416238\n                v32 = (int64_t *)(v1 + 8);\n                v33 = *v32;\n                *v32 = v33 + 8;\n                v11 = v33;\n            }\n            // 0x4161b7\n            v36 = *(int64_t *)v11;\n            *(int64_t *)(v4 + 16) = v36 == 0 ? (int64_t)L\"(NULL)\" : v36;\n            // break -> 0x416086\n            break;\n        }\n        default: {\n            // 0x416093\n            return 0xffffffff;\n        }\n    }\n    // 0x416086\n    v3++;\n    int64_t v39 = v4 + 32; // 0x416091\n    while (v3 < v2) {\n        // 0x416050\n        v4 = v39;\n        v5 = *(int32_t *)v4;\n        g87 = v5;\n        switch (v5) {\n            case 1: {\n            }\n            case 2: {\n                // 0x4160e0\n                v27 = *(int32_t *)&v1;\n                if (v27 < 48) {\n                    // 0x4160e7\n                    *(int32_t *)v1 = v27 + 8;\n                    v9 = *(int64_t *)(v1 + 16) + (int64_t)v27;\n                } else {\n                    // 0x416130\n                    v18 = (int64_t *)(v1 + 8);\n                    v19 = *v18;\n                    *v18 = v19 + 8;\n                    v9 = v19;\n                }\n                // 0x4160f3\n                *(char *)(v4 + 16) = (char)*(int32_t *)v9;\n                // break -> 0x416086\n                break;\n            }\n            case 3: {\n            }\n            case 4: {\n                // 0x4160c0\n                v31 = *(int32_t *)&v1;\n                if (v31 < 48) {\n                    // 0x4160c7\n                    *(int32_t *)v1 = v31 + 8;\n                    v8 = *(int64_t *)(v1 + 16) + (int64_t)v31;\n                } else {\n                    // 0x416140\n                    v20 = (int64_t *)(v1 + 8);\n                    v21 = *v20;\n                    *v20 = v21 + 8;\n                    v8 = v21;\n                }\n                // 0x4160d3\n                *(int16_t *)(v4 + 16) = (int16_t)*(int32_t *)v8;\n                // break -> 0x416086\n                break;\n            }\n            case 5: {\n            }\n            case 6: {\n            }\n            case 13: {\n            }\n            case 14: {\n                // 0x4160a0\n                v35 = *(int32_t *)&v1;\n                if (v35 < 48) {\n                    // 0x4160a7\n                    *(int32_t *)v1 = v35 + 8;\n                    v7 = *(int64_t *)(v1 + 16) + (int64_t)v35;\n                } else {\n                    // 0x416118\n                    v22 = (int64_t *)(v1 + 8);\n                    v23 = *v22;\n                    *v22 = v23 + 8;\n                    v7 = v23;\n                }\n                // 0x4160b3\n                *(int32_t *)(v4 + 16) = *(int32_t *)v7;\n                // break -> 0x416086\n                break;\n            }\n            case 7: {\n            }\n            case 8: {\n            }\n            case 9: {\n            }\n            case 10: {\n            }\n            case 17: {\n            }\n            case 18: {\n            }\n            case 19: {\n            }\n            case 20: {\n            }\n            case 21: {\n            }\n            case 22: {\n                // 0x416068\n                v37 = *(int32_t *)&v1;\n                if (v37 < 48) {\n                    // 0x416073\n                    *(int32_t *)v1 = v37 + 8;\n                    v6 = *(int64_t *)(v1 + 16) + (int64_t)v37;\n                } else {\n                    // 0x416100\n                    v24 = (int64_t *)(v1 + 8);\n                    v25 = *v24;\n                    *v24 = v25 + 8;\n                    v6 = v25;\n                }\n                // 0x41607f\n                *(int64_t *)(v4 + 16) = *(int64_t *)v6;\n                // break -> 0x416086\n                break;\n            }\n            case 11: {\n                // 0x416150\n                v38 = (int32_t *)(v1 + 4);\n                v13 = *v38;\n                if (v13 < 176) {\n                    // 0x41615f\n                    *v38 = v13 + 16;\n                    v10 = *(int64_t *)(v1 + 16) + (int64_t)v13;\n                } else {\n                    // 0x416220\n                    v26 = (int64_t *)(v1 + 8);\n                    v28 = *v26;\n                    *v26 = v28 + 8;\n                    v10 = v28;\n                }\n                // 0x41616c\n                *(int64_t *)(v4 + 16) = __asm_movsd_7(__asm_movsd(*(int64_t *)v10));\n                // break -> 0x416086\n                break;\n            }\n            case 12: {\n                // 0x416180\n                v14 = (int64_t *)(v1 + 8);\n                v15 = *v14 + 15 & -16;\n                *v14 = v15 + 16;\n                *(float80_t *)(v4 + 16) = *(float80_t *)v15;\n                // break -> 0x416086\n                break;\n            }\n            case 15: {\n                // 0x4161d0\n                v16 = *(int32_t *)&v1;\n                if (v16 < 48) {\n                    // 0x4161d7\n                    *(int32_t *)v1 = v16 + 8;\n                    v12 = *(int64_t *)(v1 + 16) + (int64_t)v16;\n                } else {\n                    // 0x416210\n                    v29 = (int64_t *)(v1 + 8);\n                    v30 = *v29;\n                    *v29 = v30 + 8;\n                    v12 = v30;\n                }\n                // 0x4161e3\n                v34 = *(int64_t *)v12;\n                *(int64_t *)(v4 + 16) = v34 == 0 ? (int64_t)\"(NULL)\" : v34;\n                // break -> 0x416086\n                break;\n            }\n            case 16: {\n                // 0x4161a0\n                v17 = *(int32_t *)&v1;\n                if (v17 < 48) {\n                    // 0x4161ab\n                    *(int32_t *)v1 = v17 + 8;\n                    v11 = *(int64_t *)(v1 + 16) + (int64_t)v17;\n                } else {\n                    // 0x416238\n                    v32 = (int64_t *)(v1 + 8);\n                    v33 = *v32;\n                    *v32 = v33 + 8;\n                    v11 = v33;\n                }\n                // 0x4161b7\n                v36 = *(int64_t *)v11;\n                *(int64_t *)(v4 + 16) = v36 == 0 ? (int64_t)L\"(NULL)\" : v36;\n                // break -> 0x416086\n                break;\n            }\n            default: {\n                // 0x416093\n                return 0xffffffff;\n            }\n        }\n        // 0x416086\n        v3++;\n        v39 = v4 + 32;\n    }\n    // 0x416093\n    return 0;\n}\n"
        },
        {
            "funcName": "function_416250",
            "funcStartAddr": "416250",
            "funcEndAddr": "416f59",
            "decompiledFuncCode": "int64_t function_416250(int64_t a1, int64_t * a2, int64_t * a3) {\n    int64_t v1 = (int64_t)a3;\n    int64_t v2 = (int64_t)a2;\n    int64_t v3 = v2 + 32; // 0x416252\n    int64_t v4 = v1 + 16; // 0x416256\n    *a2 = 0;\n    int64_t * v5 = (int64_t *)(v2 + 8); // 0x416289\n    *v5 = v3;\n    *a3 = 0;\n    int64_t * v6 = (int64_t *)(v1 + 8); // 0x41629e\n    *v6 = v4;\n    char v7 = *(char *)a1; // 0x4162cb\n    int32_t v8 = 0; // 0x4162d0\n    int64_t v9 = 0; // 0x4162d0\n    int64_t v10 = v3; // 0x4162d0\n    int64_t v11 = a1; // 0x4162d0\n    int64_t v12 = 0; // 0x4162d0\n    char v13; // 0x416250\n    int64_t v14; // 0x416250\n    int64_t v15; // 0x416250\n    int64_t v16; // 0x416250\n    int64_t v17; // 0x416250\n    int64_t v18; // 0x416250\n    int64_t v19; // 0x416250\n    int64_t v20; // 0x416250\n    int64_t v21; // 0x416250\n    int64_t v22; // 0x416250\n    int64_t v23; // 0x416250\n    int64_t v24; // 0x416250\n    int64_t v25; // 0x416250\n    int64_t v26; // 0x416250\n    int64_t v27; // 0x416250\n    int64_t v28; // 0x416250\n    int64_t v29; // 0x416250\n    int64_t v30; // 0x416250\n    int32_t v31; // 0x416250\n    int64_t v32; // 0x416250\n    int64_t v33; // 0x4162c0\n    int64_t v34; // 0x416310\n    int64_t * v35; // 0x416333\n    int64_t v36; // 0x416396\n    if (v7 != 0) {\n        // 0x4162c0\n        v13 = v7;\n        v14 = 0;\n        int64_t v37 = 7; // 0x416250\n        int64_t v38 = 7; // 0x416250\n        v25 = a1;\n        v21 = v3;\n        int64_t v39 = 0; // 0x416250\n        v32 = 0;\n        v31 = 0;\n        while (true) {\n          lab_0x4162c0:\n            // 0x4162c0\n            v22 = v21;\n            int64_t v40 = v25;\n            v15 = v14;\n            v33 = v40 + 1;\n            if (v13 == 37) {\n                // 0x416303\n                v34 = v22 + 88 * v15;\n                *(int64_t *)v34 = v40;\n                int32_t * v41 = (int32_t *)(v34 + 16); // 0x416318\n                *v41 = 0;\n                *(int64_t *)(v34 + 24) = 0;\n                *(int64_t *)(v34 + 32) = 0;\n                *(int64_t *)(v34 + 40) = -1;\n                *(int64_t *)(v34 + 48) = 0;\n                *(int64_t *)(v34 + 56) = 0;\n                *(int64_t *)(v34 + 64) = -1;\n                *(int64_t *)(v34 + 80) = -1;\n                unsigned char v42 = *(char *)v33; // 0x416354\n                int64_t v43 = v42; // 0x416354\n                int64_t v44 = v43; // 0x41635d\n                int64_t v45 = v33; // 0x41635d\n                if (v42 < 58) {\n                    int64_t v46 = v33 + 1; // 0x4166f0\n                    char v47 = *(char *)v46; // 0x4166f4\n                    int64_t v48 = v46; // 0x4166fd\n                    while (v47 < 58) {\n                        // 0x4166f0\n                        v46 = v48 + 1;\n                        v47 = *(char *)v46;\n                        v48 = v46;\n                    }\n                    // 0x4166ff\n                    v44 = v43;\n                    v45 = v33;\n                    if (v47 == 36) {\n                        uint64_t v49 = 0;\n                        uint64_t v50 = (int64_t)((0x1000000 * (int32_t)v43 >> 24) - 48);\n                        int64_t v51 = v33 + 1; // 0x416d95\n                        char v52 = *(char *)v51; // 0x416d95\n                        int64_t v53 = (v49 < 0x199999999999999a ? 10 * v49 : -1) + v50; // 0x416d99\n                        int64_t v54 = v33; // 0x416dad\n                        int64_t v55 = v51; // 0x416dad\n                        char v56 = v52; // 0x416dad\n                        int64_t v57 = v53; // 0x416dad\n                        bool v58 = v52 < 58; // 0x416dad\n                        bool v59 = v52 < 58; // 0x416dad\n                        char v60 = v52; // 0x416dad\n                        int64_t v61 = v51; // 0x416dad\n                        int64_t v62; // 0x416dc2\n                        int64_t v63; // 0x416d95\n                        char v64; // 0x416d95\n                        int64_t v65; // 0x416d99\n                        if (v53 < v50) {\n                            if (!v59) {\n                                goto lab_0x416a18_9;\n                            }\n                            // 0x416d93\n                            v62 = v60;\n                            v63 = v61 + 1;\n                            v64 = *(char *)v63;\n                            v65 = v62 - 49;\n                            v54 = v61;\n                            v55 = v63;\n                            v56 = v64;\n                            v57 = v65;\n                            v58 = v64 < 58;\n                            v61 = v63;\n                            while (v65 < v62 - 48) {\n                                // 0x416daf\n                                if (v64 >= 58) {\n                                    goto lab_0x416a18_9;\n                                }\n                                // 0x416d93\n                                v62 = v64;\n                                v63 = v61 + 1;\n                                v64 = *(char *)v63;\n                                v65 = v62 - 49;\n                                v54 = v61;\n                                v55 = v63;\n                                v56 = v64;\n                                v57 = v65;\n                                v58 = v64 < 58;\n                                v61 = v63;\n                            }\n                        }\n                        int64_t v66 = v57;\n                        int64_t v67 = v55; // 0x416d68\n                        while (v58) {\n                            // 0x416d6e\n                            v49 = v66;\n                            v50 = (int64_t)((0x1000000 * (int32_t)(int64_t)v56 >> 24) - 48);\n                            v51 = v67 + 1;\n                            v52 = *(char *)v51;\n                            v53 = (v49 < 0x199999999999999a ? 10 * v49 : -1) + v50;\n                            v54 = v67;\n                            v55 = v51;\n                            v56 = v52;\n                            v57 = v53;\n                            v58 = v52 < 58;\n                            v59 = v52 < 58;\n                            v60 = v52;\n                            v61 = v51;\n                            if (v53 < v50) {\n                                if (!v59) {\n                                    goto lab_0x416a18_9;\n                                }\n                                // 0x416d93\n                                v62 = v60;\n                                v63 = v61 + 1;\n                                v64 = *(char *)v63;\n                                v65 = v62 - 49;\n                                v54 = v61;\n                                v55 = v63;\n                                v56 = v64;\n                                v57 = v65;\n                                v58 = v64 < 58;\n                                v61 = v63;\n                                while (v65 < v62 - 48) {\n                                    // 0x416daf\n                                    if (v64 >= 58) {\n                                        goto lab_0x416a18_9;\n                                    }\n                                    // 0x416d93\n                                    v62 = v64;\n                                    v63 = v61 + 1;\n                                    v64 = *(char *)v63;\n                                    v65 = v62 - 49;\n                                    v54 = v61;\n                                    v55 = v63;\n                                    v56 = v64;\n                                    v57 = v65;\n                                    v58 = v64 < 58;\n                                    v61 = v63;\n                                }\n                            }\n                            // 0x416d64\n                            v66 = v57;\n                            v67 = v55;\n                        }\n                        // 0x416e6d\n                        if (v66 >= 0xffffffffffffffff) {\n                            goto lab_0x416a18_9;\n                        }\n                        int64_t v68 = v54 + 2; // 0x416e7e\n                        v44 = (int64_t)*(char *)v68;\n                        v45 = v68;\n                    }\n                }\n                int64_t v69 = v44; // 0x416250\n                v36 = v45;\n                char v70; // 0x416250\n                while (true) {\n                    // 0x416396\n                    v36++;\n                    v70 = v69;\n                    if (v70 != 39) {\n                        switch (v70) {\n                            case 45: {\n                                // 0x4163b0\n                                *v41 = *v41 | 2;\n                                // break -> 0x416390\n                                break;\n                            }\n                            case 43: {\n                                // 0x4163c0\n                                *v41 = *v41 | 4;\n                                // break -> 0x416390\n                                break;\n                            }\n                            case 32: {\n                                // 0x4163d0\n                                *v41 = *v41 | 8;\n                                // break -> 0x416390\n                                break;\n                            }\n                            case 35: {\n                                // 0x4163e0\n                                *v41 = *v41 | 16;\n                                // break -> 0x416390\n                                break;\n                            }\n                            case 48: {\n                                // 0x4163f0\n                                *v41 = *v41 | 32;\n                                // break -> 0x416390\n                                break;\n                            }\n                            default: {\n                                if (v70 != 73) {\n                                    // break -> 0x4163f8\n                                    break;\n                                }\n                                // 0x416386\n                                *v41 = *v41 | 64;\n                                // break -> 0x416390\n                                break;\n                            }\n                        }\n                    } else {\n                        // 0x41639f\n                        *v41 = *v41 | 1;\n                    }\n                    // 0x416390\n                    v69 = (int64_t)*(char *)v36;\n                }\n                int64_t v71; // 0x416250\n                int64_t * v72; // 0x416321\n                int64_t * v73; // 0x41632a\n                if (v70 == 42) {\n                    // 0x41646d\n                    *v72 = v71;\n                    *v73 = v36;\n                    char v74 = *(char *)v36; // 0x41648d\n                    int64_t v75 = v74; // 0x41648d\n                    int64_t v76 = v75 + 0xffffffd0; // 0x416491\n                    v26 = v76 & 0xffffffff;\n                    int64_t v77 = v36; // 0x416497\n                    if ((char)v76 < 10) {\n                        int64_t v78 = v77;\n                        int64_t v79 = v78 + 1; // 0x41686d\n                        char v80 = *(char *)v79; // 0x416871\n                        v77 = v79;\n                        while (v80 < 58) {\n                            // 0x41686d\n                            v78 = v77;\n                            v79 = v78 + 1;\n                            v80 = *(char *)v79;\n                            v77 = v79;\n                        }\n                        // 0x41687d\n                        v26 = v79;\n                        int64_t v81 = v75; // 0x416881\n                        int64_t v82 = v36; // 0x416881\n                        int64_t v83 = 0; // 0x416881\n                        if (v80 != 36) {\n                            goto lab_0x41649d;\n                        } else {\n                            uint64_t v84 = v83;\n                            int64_t v85 = v82;\n                            int64_t v86 = v81;\n                            int64_t v87 = v84 < 0x199999999999999a ? 10 * v84 : -1;\n                            int64_t v88 = v86; // 0x4168b2\n                            int64_t v89 = v85; // 0x4168b2\n                            int64_t v90 = v87; // 0x4168b2\n                            uint64_t v91 = v90;\n                            int64_t v92 = v89;\n                            int64_t v93 = v88;\n                            int64_t v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91; // 0x4168b7\n                            int64_t v95 = v92 + 1; // 0x4168ba\n                            char v96 = *(char *)v95; // 0x4168ba\n                            int64_t v97 = v96; // 0x4168ba\n                            while (v94 < v91) {\n                                // 0x4168d1\n                                v88 = v97;\n                                v89 = v95;\n                                v90 = -1;\n                                if (v96 >= 58) {\n                                    goto lab_0x416a18_9;\n                                }\n                                v91 = v90;\n                                v92 = v89;\n                                v93 = v88;\n                                v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91;\n                                v95 = v92 + 1;\n                                v96 = *(char *)v95;\n                                v97 = v96;\n                            }\n                            // 0x41688b\n                            v81 = v97;\n                            v82 = v95;\n                            v83 = v94;\n                            while (v96 < 58) {\n                                // 0x416894\n                                v84 = v83;\n                                v85 = v82;\n                                v86 = v81;\n                                v87 = v84 < 0x199999999999999a ? 10 * v84 : -1;\n                                v88 = v86;\n                                v89 = v85;\n                                v90 = v87;\n                                v91 = v90;\n                                v92 = v89;\n                                v93 = v88;\n                                v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91;\n                                v95 = v92 + 1;\n                                v96 = *(char *)v95;\n                                v97 = v96;\n                                while (v94 < v91) {\n                                    // 0x4168d1\n                                    v88 = v97;\n                                    v89 = v95;\n                                    v90 = -1;\n                                    if (v96 >= 58) {\n                                        goto lab_0x416a18_9;\n                                    }\n                                    v91 = v90;\n                                    v92 = v89;\n                                    v93 = v88;\n                                    v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91;\n                                    v95 = v92 + 1;\n                                    v96 = *(char *)v95;\n                                    v97 = v96;\n                                }\n                                // 0x41688b\n                                v81 = v97;\n                                v82 = v95;\n                                v83 = v94;\n                            }\n                            int64_t v98 = v94 - 1; // 0x416f0b\n                            if (v98 >= 0xfffffffffffffffe) {\n                                goto lab_0x416a18_9;\n                            }\n                            // 0x416f19\n                            *v35 = v98;\n                            v30 = v28;\n                            v24 = v92 + 2;\n                            v27 = v94;\n                            v20 = v98;\n                            goto lab_0x4164ac;\n                        }\n                    } else {\n                        goto lab_0x41649d;\n                    }\n                } else {\n                    // 0x4163fd\n                    v29 = v28;\n                    v23 = v36;\n                    int64_t v99; // 0x416250\n                    v19 = v99;\n                    v18 = v71;\n                    v17 = v16;\n                    if (v70 < 58) {\n                        // 0x416b1b\n                        *v72 = v71;\n                        char * v100 = (char *)v71;\n                        char v101 = *v100; // 0x416b20\n                        int64_t v102 = v71; // 0x416b29\n                        char * v103 = v100; // 0x416b29\n                        int64_t v104 = v36; // 0x416b29\n                        int64_t v105 = v71; // 0x416b29\n                        if (v101 < 58) {\n                            int64_t v106 = v102;\n                            int64_t v107 = v106 + 1; // 0x416b33\n                            char * v108 = (char *)v107;\n                            char v109 = *v108; // 0x416b33\n                            v102 = v107;\n                            while (v109 < 58) {\n                                // 0x416b33\n                                v106 = v102;\n                                v107 = v106 + 1;\n                                v108 = (char *)v107;\n                                v109 = *v108;\n                                v102 = v107;\n                            }\n                            // 0x416b42\n                            v103 = v108;\n                            v104 = v106 + 2;\n                            v105 = v107;\n                        }\n                        int64_t v110 = v105;\n                        int64_t v111 = v104;\n                        char * v112 = v103;\n                        *v73 = v110;\n                        unsigned char v113 = *v112; // 0x416b65\n                        v29 = v28;\n                        v23 = v111;\n                        v19 = v113;\n                        v18 = v110;\n                        v17 = v16;\n                    }\n                    goto lab_0x416408;\n                }\n            } else {\n                goto lab_0x4162c8;\n            }\n        }\n    }\n  lab_0x4162d2:\n    // 0x4162d2\n    *(int64_t *)(88 * v12 + v10) = v11;\n    *(int64_t *)(v2 + 16) = v9;\n    *(int64_t *)(v2 + 24) = (int64_t)v8;\n    // 0x4162f4\n    return 0;\n  lab_0x416a18_9:;\n    int64_t v114 = *v6;\n    if (v4 != v114) {\n        // 0x416a23\n        free((int64_t *)v114);\n    }\n    int64_t v115 = *v5; // 0x416a35\n    if (v3 != v115) {\n        // 0x416a40\n        free((int64_t *)v115);\n    }\n    // 0x416a45\n    *__errno_location() = 22;\n    // 0x4162f4\n    return 0xffffffff;\n  lab_0x416bf0_5:;\n    // 0x416bf0\n    int64_t v116; // 0x416250\n    int64_t v117 = v116;\n    int64_t v118 = v117; // 0x416bf5\n    int64_t v119; // 0x416250\n    if (v4 == v117) {\n        goto lab_0x416c09_3;\n    } else {\n        // 0x416bf7\n        v119 = v118;\n        free((int64_t *)v119);\n        goto lab_0x416c09_3;\n    }\n  lab_0x416c09_3:;\n    int64_t v120 = *v5; // 0x416c09\n    int32_t * v121; // 0x416c19\n    if (v3 == v120) {\n        // 0x416c19\n        v121 = __errno_location();\n        *v121 = 12;\n        return 0xffffffff;\n    }\n    // 0x416c14\n    free((int64_t *)v120);\n    // 0x416c19\n    v121 = __errno_location();\n    *v121 = 12;\n    return 0xffffffff;\n  lab_0x4162c8:;\n    int64_t v122 = v32;\n    int32_t v123 = v31;\n    char v124 = *(char *)v33; // 0x4162cb\n    v13 = v124;\n    v14 = v15;\n    v25 = v33;\n    v21 = v22;\n    v32 = v122;\n    v31 = v123;\n    v8 = v123;\n    v9 = v122;\n    v10 = v22;\n    v11 = v33;\n    v12 = v15;\n    if (v124 == 0) {\n        // break -> 0x4162d2\n        goto lab_0x4162d2;\n    }\n    goto lab_0x4162c0;\n  lab_0x41649d:;\n    int64_t v125 = v26;\n    int64_t v126 = *v35; // 0x41649d\n    v30 = v28;\n    v24 = v36;\n    v27 = v125;\n    v20 = v126;\n    if (v126 == -1) {\n        // 0x416843\n        *v35 = v28;\n        if (v28 == -1) {\n            goto lab_0x416a18_9;\n        }\n        // 0x41685b\n        v30 = v28 + 1;\n        v24 = v36;\n        v27 = v125;\n        v20 = v28;\n    }\n    goto lab_0x4164ac;\n  lab_0x416408:;\n    int64_t v337 = v17;\n    int64_t v338 = v18;\n    int64_t v339 = v19;\n    int64_t v340 = v29;\n    int64_t v149 = v340; // 0x41640b\n    int64_t v147 = v339; // 0x41640b\n    int64_t v145 = v338; // 0x41640b\n    int64_t v143 = v337; // 0x41640b\n    int64_t v186; // 0x416250\n    int64_t v190; // 0x416250\n    int64_t v189; // 0x416250\n    int64_t v188; // 0x416250\n    int64_t v187; // 0x416250\n    if ((char)v339 == 46) {\n        int64_t v341 = v23;\n        v186 = v338 + 1;\n        v187 = v340;\n        v188 = v341;\n        v189 = v338;\n        v190 = v337;\n        goto lab_0x416510;\n    } else {\n        goto lab_0x416411;\n    }\n  lab_0x4164ac:;\n    uint64_t v127 = v20;\n    int64_t v128 = v27;\n    int64_t v129 = v24;\n    int64_t v130 = v30;\n    int64_t v131 = *v6; // 0x4164ac\n    int64_t v132 = v128; // 0x4164b3\n    int64_t v133 = v16; // 0x4164b3\n    int64_t v134 = v131; // 0x4164b3\n    int64_t v135; // 0x416250\n    int64_t v136; // 0x416250\n    int64_t v137; // 0x416250\n    int64_t v138; // 0x41675f\n    if (v16 > v127) {\n        goto lab_0x4164bc;\n    } else {\n        uint64_t v139 = 2 * v16; // 0x416755\n        v138 = v139 > v127 ? v139 : v127 + 1;\n        v116 = v131;\n        if (v138 >= 0x800000000000000) {\n            goto lab_0x416bf0_5;\n        }\n        int64_t size = 32 * v138; // 0x41677e\n        if (v4 == v131) {\n            int64_t * mem = malloc((int32_t)size); // 0x416cdc\n            if (mem == NULL) {\n                goto lab_0x416c09_3;\n            }\n            // 0x416cfe\n            v135 = (int64_t)mem;\n            goto lab_0x416d09;\n        } else {\n            int64_t * mem2 = realloc((int64_t *)v131, (int32_t)size); // 0x41679f\n            int64_t v140 = *v6; // 0x4167a4\n            v116 = v140;\n            if (mem2 == NULL) {\n                goto lab_0x416bf0_5;\n            }\n            int64_t v141 = (int64_t)mem2; // 0x41679f\n            v137 = v128;\n            v136 = v141;\n            v135 = v141;\n            if (v4 == v140) {\n                goto lab_0x416d09;\n            } else {\n                goto lab_0x4167dd;\n            }\n        }\n    }\n  lab_0x416411:;\n    int64_t v142 = v143;\n    int64_t v144 = v145;\n    int64_t v146 = v147;\n    int64_t v148 = v149;\n    int64_t v150 = 0; // 0x416418\n    int64_t v151 = v146; // 0x416418\n    int64_t v152 = v144; // 0x416418\n    uint64_t v153; // 0x416250\n    int64_t v154; // 0x416250\n    int64_t v155; // 0x416457\n    while (true) {\n        int64_t v156 = v152;\n        v154 = v151;\n        v153 = v150;\n        v155 = v156 + 1;\n        char v157 = v154; // 0x41645b\n        int64_t v158; // 0x416250\n        if (v157 != 104) {\n            switch (v157) {\n                case 76: {\n                    // 0x4165c0\n                    v158 = v153 & 0xfffffffb | 4;\n                    // break -> 0x416453\n                    break;\n                }\n                default: {\n                    if ((v154 & 223) != 90 == (v157 != 116)) {\n                        // break -> 0x4165c8\n                        break;\n                    }\n                }\n                case 108: {\n                }\n                case 106: {\n                    // 0x416450\n                    v158 = v153 + 8 & 0xffffffff;\n                    // break -> 0x416453\n                    break;\n                }\n            }\n        } else {\n            // 0x416460\n            v158 = v153 & 0xffffffff | (int64_t)(1 << (int32_t)v153 % 2);\n        }\n        int64_t v159 = v158;\n        unsigned char v160 = *(char *)v155; // 0x416453\n        v150 = v159;\n        v151 = v160;\n        v152 = v155;\n    }\n    uint64_t v161 = v154 + 0xffffffdb; // 0x4165c8\n    int64_t v162 = v161 % 256; // 0x4165d4\n    g88 = v162;\n    int64_t v163 = 17; // 0x4165d7\n    int64_t v164 = v154; // 0x4165d7\n    int64_t v165 = v154; // 0x4165d7\n    switch ((char)v161) {\n        case 0: {\n            goto lab_0x416641;\n        }\n        case 28: {\n            goto lab_0x416992;\n        }\n        case 30: {\n            // 0x4169be\n            v163 = 14;\n            v164 = 99;\n            goto lab_0x4165e9;\n        }\n        case 32: {\n            goto lab_0x416992;\n        }\n        case 33: {\n            goto lab_0x416992;\n        }\n        case 34: {\n            goto lab_0x416992;\n        }\n        case 46: {\n            // 0x4169af\n            v163 = 16;\n            v164 = 115;\n            goto lab_0x4165e9;\n        }\n        case 51: {\n            goto lab_0x4169cd;\n        }\n        case 60: {\n            goto lab_0x416992;\n        }\n        case 62: {\n            int32_t v166 = v153; // 0x4168e9\n            int32_t v167 = v166 - 7; // 0x4168e9\n            int64_t v168 = v167 < 0 == (6 - v166 & v166) < 0 == (v167 != 0) ? 14 : 13; // 0x4168ef\n            v163 = v168;\n            v164 = v154;\n            goto lab_0x4165e9;\n        }\n        case 63: {\n            goto lab_0x416940;\n        }\n        case 64: {\n            goto lab_0x416992;\n        }\n        case 65: {\n            goto lab_0x416992;\n        }\n        case 66: {\n            goto lab_0x416992;\n        }\n        case 68: {\n            goto lab_0x416940;\n        }\n        case 73: {\n            uint32_t v169 = (int32_t)v153; // 0x4168ff\n            v163 = 22;\n            v164 = v154;\n            if (v169 <= 15) {\n                // 0x416905\n                v163 = 22;\n                v164 = v154;\n                if ((v153 & 4) == 0) {\n                    // 0x41690d\n                    v163 = 21;\n                    v164 = v154;\n                    if (v169 <= 7) {\n                        // 0x41691b\n                        v163 = 18;\n                        v164 = v154;\n                        if ((v153 & 2) == 0) {\n                            int64_t v170 = v153 % 2 == 0 ? 20 : 19; // 0x41692f\n                            v163 = v170;\n                            v164 = v154;\n                        }\n                    }\n                }\n            }\n            goto lab_0x4165e9;\n        }\n        case 74: {\n            goto lab_0x4169cd;\n        }\n        case 75: {\n            goto lab_0x4165e9;\n        }\n        case 78: {\n            int32_t v171 = v153; // 0x4165e0\n            int32_t v172 = v171 - 7; // 0x4165e0\n            int64_t v173 = v172 < 0 == (6 - v171 & v171) < 0 == (v172 != 0) ? 16 : 15; // 0x4165e6\n            v163 = v173;\n            v164 = v154;\n            goto lab_0x4165e9;\n        }\n        case 80: {\n            goto lab_0x4169cd;\n        }\n        case 83: {\n            goto lab_0x4169cd;\n        }\n        default: {\n            goto lab_0x416a18_9;\n        }\n    }\n  lab_0x4164bc:;\n    int64_t v174 = v134;\n    int64_t v175 = v133;\n    int64_t v176 = v132;\n    if (v176 <= v127) {\n        int64_t v177 = v174 - 32; // 0x4164d3\n        int64_t v178 = v176; // 0x416250\n        int64_t v179 = v178;\n        int64_t v180 = v179 + 1; // 0x4164c8\n        *(int32_t *)(v177 + 32 * v180) = 0;\n        v178 = v180;\n        while (v180 <= v127) {\n            // 0x4164c8\n            v179 = v178;\n            v180 = v179 + 1;\n            *(int32_t *)(v177 + 32 * v180) = 0;\n            v178 = v180;\n        }\n        // 0x4164e1\n        *a3 = v180;\n    }\n    int32_t * v181 = (int32_t *)(v174 + 32 * v127); // 0x4164ed\n    int32_t v182 = *v181; // 0x4164ed\n    if (v182 != 0) {\n        // 0x416b6e\n        if (v182 != 5) {\n            goto lab_0x416a18_9;\n        }\n        unsigned char v183 = *(char *)v129; // 0x416b77\n        v29 = v130;\n        v23 = v129 + 1;\n        v19 = v183;\n        v18 = v129;\n        v17 = v175;\n        goto lab_0x416408;\n    } else {\n        // 0x4164f7\n        *v181 = 5;\n        unsigned char v184 = *(char *)v129; // 0x4164fd\n        int64_t v185 = v129 + 1;\n        v149 = v130;\n        v147 = v184;\n        v145 = v129;\n        v143 = v175;\n        v186 = v185;\n        v187 = v130;\n        v188 = v185;\n        v189 = v129;\n        v190 = v175;\n        if (v184 != 46) {\n            goto lab_0x416411;\n        } else {\n            goto lab_0x416510;\n        }\n    }\n  lab_0x416510:;\n    int64_t v191 = v190;\n    int64_t v192 = v189;\n    int64_t v193 = v188;\n    int64_t v194 = v187;\n    int64_t v195 = v186;\n    char * v196 = (char *)v195; // 0x416510\n    char v197 = *v196; // 0x416510\n    int64_t * v198; // 0x416338\n    *v198 = v192;\n    int64_t v199; // 0x416250\n    int64_t v200; // 0x416250\n    int64_t v201; // 0x416250\n    int64_t v202; // 0x416250\n    int64_t v203; // 0x416250\n    int64_t * v204; // 0x416341\n    int64_t * v205; // 0x41634a\n    int64_t v206; // 0x416529\n    if (v197 != 42) {\n        char v207 = *v196; // 0x416710\n        int64_t v208 = v193; // 0x416719\n        char * v209; // 0x416250\n        int64_t v210; // 0x416250\n        if (v207 < 58) {\n            int64_t v211 = v208;\n            int64_t v212 = v211 + 1; // 0x416720\n            char * v213 = (char *)v212;\n            char v214 = *v213; // 0x416724\n            v208 = v212;\n            while (v214 < 58) {\n                // 0x416720\n                v211 = v208;\n                v212 = v211 + 1;\n                v213 = (char *)v212;\n                v214 = *v213;\n                v208 = v212;\n            }\n            // 0x41672e\n            v209 = v213;\n            v210 = v212;\n        } else {\n            // 0x416710\n            v209 = (char *)v193;\n            v210 = v193;\n        }\n        int64_t v215 = v210;\n        char * v216 = v209;\n        *v204 = v215;\n        unsigned char v217 = *v216; // 0x416741\n        v149 = v194;\n        v147 = v217;\n        v145 = v215;\n        v143 = v191;\n        goto lab_0x416411;\n    } else {\n        // 0x41651f\n        v206 = v192 + 2;\n        *v204 = v206;\n        char v218 = *(char *)v206; // 0x41653f\n        int64_t v219 = v218; // 0x41653f\n        int64_t v220 = v219 + 0xffffffd0; // 0x416543\n        v201 = v220 & 0xffffffff;\n        int64_t v221 = v206; // 0x416549\n        if ((char)v220 < 10) {\n            int64_t v222 = v221;\n            int64_t v223 = v222 + 1; // 0x416df4\n            char v224 = *(char *)v223; // 0x416df8\n            v221 = v223;\n            while (v224 < 58) {\n                // 0x416df4\n                v222 = v221;\n                v223 = v222 + 1;\n                v224 = *(char *)v223;\n                v221 = v223;\n            }\n            // 0x416e04\n            v201 = v223;\n            int64_t v225 = v219; // 0x416e08\n            int64_t v226 = v206; // 0x416e08\n            int64_t v227 = 0; // 0x416e08\n            if (v224 != 36) {\n                goto lab_0x41654f;\n            } else {\n                uint64_t v228 = v227;\n                int64_t v229 = v226;\n                int64_t v230 = v225;\n                int64_t v231 = v228 < 0x199999999999999a ? 10 * v228 : -1;\n                int64_t v232 = v230; // 0x416e39\n                int64_t v233 = v229; // 0x416e39\n                int64_t v234 = v231; // 0x416e39\n                uint64_t v235 = v234;\n                int64_t v236 = v233;\n                int64_t v237 = v232;\n                int64_t v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235; // 0x416e3e\n                int64_t v239 = v236 + 1; // 0x416e45\n                char v240 = *(char *)v239; // 0x416e49\n                int64_t v241 = v240; // 0x416e49\n                while (v238 < v235) {\n                    // 0x416e57\n                    v232 = v241;\n                    v233 = v239;\n                    v234 = -1;\n                    if (v240 >= 58) {\n                        goto lab_0x416a18_9;\n                    }\n                    v235 = v234;\n                    v236 = v233;\n                    v237 = v232;\n                    v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235;\n                    v239 = v236 + 1;\n                    v240 = *(char *)v239;\n                    v241 = v240;\n                }\n                // 0x416e12\n                v225 = v241;\n                v226 = v239;\n                v227 = v238;\n                while (v240 < 58) {\n                    // 0x416e1b\n                    v228 = v227;\n                    v229 = v226;\n                    v230 = v225;\n                    v231 = v228 < 0x199999999999999a ? 10 * v228 : -1;\n                    v232 = v230;\n                    v233 = v229;\n                    v234 = v231;\n                    v235 = v234;\n                    v236 = v233;\n                    v237 = v232;\n                    v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235;\n                    v239 = v236 + 1;\n                    v240 = *(char *)v239;\n                    v241 = v240;\n                    while (v238 < v235) {\n                        // 0x416e57\n                        v232 = v241;\n                        v233 = v239;\n                        v234 = -1;\n                        if (v240 >= 58) {\n                            goto lab_0x416a18_9;\n                        }\n                        v235 = v234;\n                        v236 = v233;\n                        v237 = v232;\n                        v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235;\n                        v239 = v236 + 1;\n                        v240 = *(char *)v239;\n                        v241 = v240;\n                    }\n                    // 0x416e12\n                    v225 = v241;\n                    v226 = v239;\n                    v227 = v238;\n                }\n                int64_t v242 = v238 - 1; // 0x416f27\n                if (v242 >= 0xfffffffffffffffe) {\n                    goto lab_0x416a18_9;\n                }\n                // 0x416f35\n                *v205 = v242;\n                v203 = v194;\n                v200 = v236 + 2;\n                v202 = v238;\n                v199 = v242;\n                goto lab_0x41655e;\n            }\n        } else {\n            goto lab_0x41654f;\n        }\n    }\n  lab_0x416641:;\n    int64_t v243 = v165;\n    *(char *)(v34 + 72) = (char)v243;\n    int64_t v244 = *a2; // 0x416646\n    *(int64_t *)(v34 + 8) = v155;\n    int64_t v245 = v244 + 1; // 0x41664e\n    *a2 = v245;\n    int64_t v246; // 0x416250\n    int64_t v247; // 0x416250\n    int64_t dest_mem; // 0x416250\n    int64_t v248; // 0x416250\n    int64_t v249; // 0x416f43\n    if (v246 > v245) {\n        // 0x41665a\n        goto lab_0x4162c8;\n    } else {\n        if (v246 < 0) {\n            // 0x416f43\n            v249 = *v6;\n            v116 = v249;\n            goto lab_0x416bf0_5;\n        }\n        int64_t v250 = 2 * v246; // 0x416676\n        if (v250 >= 0x2e8ba2e8ba2e8bb) {\n            // 0x416f43\n            v249 = *v6;\n            v116 = v249;\n            goto lab_0x416bf0_5;\n        }\n        int64_t v251 = *v5; // 0x416687\n        int64_t size2 = 176 * v246; // 0x416699\n        if (v3 == v251) {\n            int64_t * mem3 = malloc((int32_t)size2); // 0x4167e9\n            v248 = (int64_t)mem3;\n            v247 = v245;\n            if (mem3 == NULL) {\n                int64_t v252 = *v6; // 0x416d4c\n                v118 = v252;\n                if (v4 == v252) {\n                    // 0x416c19\n                    v121 = __errno_location();\n                    *v121 = 12;\n                    return 0xffffffff;\n                }\n                // 0x416bf7\n                v119 = v118;\n                free((int64_t *)v119);\n                goto lab_0x416c09_3;\n            }\n            goto lab_0x416804;\n        } else {\n            int64_t * mem4 = realloc((int64_t *)v251, (int32_t)size2); // 0x4166ab\n            if (mem4 == NULL) {\n                // 0x416f43\n                v249 = *v6;\n                v116 = v249;\n                goto lab_0x416bf0_5;\n            }\n            int64_t v253 = (int64_t)mem4; // 0x4166ab\n            int64_t v254 = *v5; // 0x4166cd\n            int64_t v255 = *a2; // 0x4166d1\n            dest_mem = v253;\n            v248 = v253;\n            v247 = v255;\n            if (v3 == v254) {\n                goto lab_0x416804;\n            } else {\n                goto lab_0x4166df;\n            }\n        }\n    }\n  lab_0x416992:\n    // 0x416992\n    v163 = 12;\n    v164 = v154;\n    if ((int32_t)v153 <= 15) {\n        int64_t v256 = (v153 & 4) != 0 ? 12 : 11; // 0x4169a7\n        v163 = v256;\n        v164 = v154;\n    }\n    goto lab_0x4165e9;\n  lab_0x4169cd:;\n    uint32_t v335 = (int32_t)v153; // 0x4169d5\n    v163 = 10;\n    v164 = v154;\n    if (v335 <= 15) {\n        // 0x4169db\n        v163 = 10;\n        v164 = v154;\n        if ((v153 & 4) == 0) {\n            // 0x4169e3\n            v163 = 8;\n            v164 = v154;\n            if (v335 <= 7) {\n                // 0x4169f1\n                v163 = 2;\n                v164 = v154;\n                if ((v153 & 2) == 0) {\n                    // 0x4169fe\n                    v163 = 2 * v153 & 2 ^ 6;\n                    v164 = v154;\n                }\n            }\n        }\n    }\n    goto lab_0x4165e9;\n  lab_0x416940:;\n    uint32_t v336 = (int32_t)v153; // 0x416948\n    v163 = 9;\n    v164 = v154;\n    if (v336 <= 15) {\n        // 0x41694e\n        v163 = 9;\n        v164 = v154;\n        if ((v153 & 4) == 0) {\n            // 0x416956\n            v163 = 7;\n            v164 = v154;\n            if (v336 <= 7) {\n                // 0x416964\n                v163 = 1;\n                v164 = v154;\n                if ((v153 & 2) == 0) {\n                    // 0x416971\n                    v163 = (2 * v153 & 2 ^ 2) + 3;\n                    v164 = v154;\n                }\n            }\n        }\n    }\n    goto lab_0x4165e9;\n  lab_0x4165e9:;\n    int64_t v257 = v164;\n    int64_t v258 = v163;\n    int64_t v259; // 0x416250\n    int64_t v260; // 0x416250\n    int64_t * v261; // 0x41634f\n    if (v259 == -1) {\n        // 0x416af4\n        *v261 = v148;\n        if (v148 == -1) {\n            goto lab_0x416a18_9;\n        }\n        // 0x416b0c\n        v260 = v148;\n    } else {\n        // 0x4165f3\n        *v261 = v259;\n        v260 = v259;\n    }\n    uint64_t v262 = v260;\n    int64_t v263 = *v6; // 0x4165f8\n    int64_t v264 = v258; // 0x4165ff\n    int64_t v265 = v162; // 0x4165ff\n    int64_t v266 = v263; // 0x4165ff\n    int64_t v267; // 0x416250\n    int64_t v268; // 0x416250\n    int64_t v269; // 0x416250\n    int64_t v270; // 0x416250\n    int64_t v271; // 0x416250\n    if (v142 > v262) {\n        goto lab_0x416605;\n    } else {\n        uint64_t v272 = 2 * v142; // 0x416a68\n        int64_t v273 = v272 > v262 ? v272 : v262 + 1; // 0x416a72\n        v116 = v263;\n        if (v273 >= 0x800000000000000) {\n            goto lab_0x416bf0_5;\n        }\n        int64_t size3 = 32 * v273; // 0x416a91\n        int64_t v274 = 0x100000000 * v258 >> 32; // 0x416aa4\n        if (v4 == v263) {\n            int64_t * mem5 = malloc((int32_t)size3); // 0x416b89\n            v268 = (int64_t)mem5;\n            v270 = v274 & 0xffffffff;\n            if (mem5 == NULL) {\n                goto lab_0x416c09_3;\n            }\n            goto lab_0x416ba6;\n        } else {\n            int64_t * mem6 = realloc((int64_t *)v263, (int32_t)size3); // 0x416ab1\n            if (mem6 == NULL) {\n                // 0x416f43\n                v249 = *v6;\n                v116 = v249;\n                goto lab_0x416bf0_5;\n            }\n            int64_t v275 = (int64_t)mem6; // 0x416ab1\n            int64_t v276 = v274 & 0xffffffff; // 0x416ab6\n            int64_t v277 = *v6; // 0x416ae1\n            v269 = v276;\n            v271 = v162;\n            v267 = v275;\n            v268 = v275;\n            v270 = v276;\n            if (v4 == v277) {\n                goto lab_0x416ba6;\n            } else {\n                goto lab_0x416aeb;\n            }\n        }\n    }\n  lab_0x416605:;\n    int64_t v278 = v266;\n    int64_t v279 = v265;\n    int64_t v280 = v264;\n    if (v279 <= v262) {\n        int64_t v281 = v278 - 32; // 0x41661b\n        int64_t v282 = v279; // 0x416250\n        int64_t v283 = v282;\n        int64_t v284 = v283 + 1; // 0x416610\n        *(int32_t *)(v281 + 32 * v284) = 0;\n        v282 = v284;\n        while (v284 <= v262) {\n            // 0x416610\n            v283 = v282;\n            v284 = v283 + 1;\n            *(int32_t *)(v281 + 32 * v284) = 0;\n            v282 = v284;\n        }\n        // 0x416629\n        *a3 = v284;\n    }\n    int32_t * v285 = (int32_t *)(v278 + 32 * v262); // 0x416635\n    int32_t v286 = *v285; // 0x416635\n    int32_t v287 = v280;\n    if (v286 != 0) {\n        // 0x416a5a\n        v165 = v257;\n        if (v286 != v287) {\n            goto lab_0x416a18_9;\n        }\n    } else {\n        // 0x41663f\n        *v285 = v287;\n        v165 = v257;\n    }\n    goto lab_0x416641;\n  lab_0x416d09:;\n    int64_t v288 = v135;\n    int64_t v289 = 32 * v128; // 0x416d09\n    int64_t * v290; // 0x416250\n    memcpy((int64_t *)v288, v290, (int32_t)v289);\n    v137 = v289;\n    v136 = v288;\n    goto lab_0x4167dd;\n  lab_0x4167dd:;\n    int64_t v291 = v136;\n    int64_t v292 = v137;\n    *v6 = v291;\n    v132 = v292;\n    v133 = v138;\n    v134 = v291;\n    goto lab_0x4164bc;\n  lab_0x41654f:;\n    int64_t v293 = v201;\n    int64_t v294 = *v205; // 0x41654f\n    v203 = v194;\n    v200 = v206;\n    v202 = v293;\n    v199 = v294;\n    if (v294 == -1) {\n        // 0x416dca\n        *v205 = v194;\n        if (v194 == -1) {\n            goto lab_0x416a18_9;\n        }\n        // 0x416de2\n        v203 = v194 + 1;\n        v200 = v206;\n        v202 = v293;\n        v199 = v194;\n    }\n    goto lab_0x41655e;\n  lab_0x41655e:;\n    uint64_t v295 = v199;\n    int64_t v296 = v202;\n    int64_t v297 = v200;\n    int64_t v298 = v203;\n    int64_t v299 = *v6; // 0x41655e\n    int64_t v300 = v296; // 0x416565\n    int64_t v301 = v191; // 0x416565\n    int64_t v302 = v299; // 0x416565\n    int64_t v303; // 0x416250\n    int64_t v304; // 0x416250\n    int64_t v305; // 0x416250\n    int64_t v306; // 0x416c42\n    if (v191 > v295) {\n        goto lab_0x41656e;\n    } else {\n        uint64_t v307 = 2 * v191; // 0x416c38\n        v306 = v307 > v295 ? v307 : v295 + 1;\n        v116 = v299;\n        if (v306 >= 0x800000000000000) {\n            goto lab_0x416bf0_5;\n        }\n        int64_t size4 = 32 * v306; // 0x416c5d\n        if (v4 == v299) {\n            int64_t * mem7 = malloc((int32_t)size4); // 0x416e8e\n            if (mem7 == NULL) {\n                goto lab_0x416c09_3;\n            }\n            // 0x416eb0\n            v304 = (int64_t)mem7;\n            goto lab_0x416ebb;\n        } else {\n            int64_t * mem8 = realloc((int64_t *)v299, (int32_t)size4); // 0x416c7e\n            int64_t v308 = *v6; // 0x416c83\n            v116 = v308;\n            if (mem8 == NULL) {\n                goto lab_0x416bf0_5;\n            }\n            int64_t v309 = (int64_t)mem8; // 0x416c7e\n            v305 = v296;\n            v303 = v309;\n            v304 = v309;\n            if (v4 == v308) {\n                goto lab_0x416ebb;\n            } else {\n                goto lab_0x416cbc;\n            }\n        }\n    }\n  lab_0x416804:;\n    int64_t v310 = v247;\n    int64_t v311 = v248;\n    int64_t * v312; // 0x416250\n    dest_mem = (int64_t)memcpy((int64_t *)v311, v312, 88 * (int32_t)v310);\n    goto lab_0x4166df;\n  lab_0x4166df:;\n    int64_t v313 = dest_mem;\n    *v5 = v313;\n    goto lab_0x4162c8;\n  lab_0x416ba6:;\n    int64_t v314 = v270;\n    int64_t v315 = v268;\n    int64_t v316 = 32 * v162; // 0x416bbc\n    memcpy((int64_t *)v315, v290, (int32_t)v316);\n    v269 = v314;\n    v271 = v316;\n    v267 = v315;\n    goto lab_0x416aeb;\n  lab_0x416aeb:;\n    int64_t v317 = v267;\n    int64_t v318 = v271;\n    int64_t v319 = v269;\n    *v6 = v317;\n    v264 = v319;\n    v265 = v318;\n    v266 = v317;\n    goto lab_0x416605;\n  lab_0x41656e:;\n    int64_t v320 = v302;\n    int64_t v321 = v301;\n    int64_t v322 = v300;\n    if (v322 <= v295) {\n        int64_t v323 = v320 - 32; // 0x416583\n        int64_t v324 = v322; // 0x416250\n        int64_t v325 = v324;\n        int64_t v326 = v325 + 1; // 0x416578\n        *(int32_t *)(v323 + 32 * v326) = 0;\n        v324 = v326;\n        while (v326 <= v295) {\n            // 0x416578\n            v325 = v324;\n            v326 = v325 + 1;\n            *(int32_t *)(v323 + 32 * v326) = 0;\n            v324 = v326;\n        }\n        // 0x416591\n        *a3 = v326;\n    }\n    int32_t * v327 = (int32_t *)(v320 + 32 * v295); // 0x41659e\n    int32_t v328 = *v327; // 0x41659e\n    if (v328 != 0) {\n        // 0x416cc5\n        if (v328 != 5) {\n            goto lab_0x416a18_9;\n        }\n        unsigned char v329 = *(char *)v297; // 0x416cce\n        v149 = v298;\n        v147 = v329;\n        v145 = v297;\n        v143 = v321;\n    } else {\n        // 0x4165a8\n        *v327 = 5;\n        unsigned char v330 = *(char *)v297; // 0x4165b1\n        v149 = v298;\n        v147 = v330;\n        v145 = v297;\n        v143 = v321;\n    }\n    goto lab_0x416411;\n  lab_0x416ebb:;\n    int64_t v331 = v304;\n    int64_t v332 = 32 * v296; // 0x416ebb\n    memcpy((int64_t *)v331, v290, (int32_t)v332);\n    v305 = v332;\n    v303 = v331;\n    goto lab_0x416cbc;\n  lab_0x416cbc:;\n    int64_t v333 = v303;\n    int64_t v334 = v305;\n    *v6 = v333;\n    v300 = v334;\n    v301 = v306;\n    v302 = v333;\n    goto lab_0x41656e;\n}\n"
        },
        {
            "funcName": "function_416f60",
            "funcStartAddr": "416f60",
            "funcEndAddr": "416fbd",
            "decompiledFuncCode": "int64_t function_416f60(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x416f60\n    return function_4027c8();\n}\n"
        },
        {
            "funcName": "function_416fc0",
            "funcStartAddr": "416fc0",
            "funcEndAddr": "416fc1",
            "decompiledFuncCode": "int64_t function_416fc0(void) {\n    // 0x416fc0\n    int64_t result; // 0x416fc0\n    return result;\n}\n"
        },
        {
            "funcName": "function_416fd0",
            "funcStartAddr": "416fd0",
            "funcEndAddr": "416fe8",
            "decompiledFuncCode": "int64_t function_416fd0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x416fd0\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g23);\n}\n"
        },
        {
            "funcName": "function_416fe8",
            "funcStartAddr": "416fe8",
            "funcEndAddr": "417008",
            "decompiledFuncCode": "int64_t function_416fe8(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g19; // 0x416ff2\n    while (*(int64_t *)v1 != -1) {\n        // 0x416ff3\n        v1 -= 8;\n    }\n    // 0x417004\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_install.elf"
}