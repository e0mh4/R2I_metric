{
    "binaryInfo": {
        "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_stty.elf",
        "isStripped": "True"
    },
    "buildInfo": {
        "decompilerName": "IDA Pro",
        "compilerName": "gcc",
        "compilerVersion": "9.4.0",
        "Optlevel": "-O"
    },
    "funcInfo": [
        {
            "funcName": "main",
            "funcStartAddr": "0x401aa0",
            "funcEndAddr": "0x402596",
            "decompiledFuncCode": "__int64 __fastcall main(int a1, char **a2, char **a3)\n{\n  int v3; // r15d\n  int v4; // r13d\n  int v5; // r12d\n  __int64 v6; // rbp\n  char **v7; // rbx\n  int v8; // eax\n  int v9; // esi\n  __int64 v10; // rcx\n  char **v11; // rax\n  char **v12; // rdx\n  int v13; // eax\n  char v14; // cl\n  int v15; // edx\n  int v16; // ecx\n  int v17; // r8d\n  int v18; // r9d\n  int v19; // eax\n  int v20; // ecx\n  int v21; // r8d\n  int v22; // r9d\n  int v24; // eax\n  int v25; // edx\n  int v26; // ecx\n  int v27; // r8d\n  int v28; // r9d\n  _IO_FILE *v29; // rdi\n  char *IO_write_ptr; // rax\n  char **v31; // rbx\n  char v32; // r13\n  const char *v33; // rax\n  int v34; // ecx\n  int v35; // r8d\n  int v36; // r9d\n  const char *v37; // rbp\n  int v38; // ecx\n  int v39; // r8d\n  int v40; // r9d\n  cc_t v41; // r12\n  char *v42; // rax\n  const char *v43; // rbx\n  int *v44; // rax\n  __int64 v45; // rbx\n  char *v46; // rax\n  char *v47; // rax\n  char **v48; // rbx\n  unsigned int v49; // ebp\n  char v50; // r12\n  int v51; // ecx\n  __int64 v52; // rdi\n  char *v53; // rax\n  _DWORD *v54; // rax\n  int v55; // r8d\n  int v56; // r9d\n  char *v57; // rdx\n  int v58; // ecx\n  char *v59; // rdx\n  char *v60; // rax\n  int v61; // edx\n  int v62; // ecx\n  int v63; // r8d\n  int v64; // r9d\n  _IO_FILE *v65; // rdi\n  char *v66; // rax\n  char **i; // rbx\n  const char *v68; // rax\n  int v69; // ecx\n  int v70; // r8d\n  int v71; // r9d\n  const char *v72; // rbp\n  int v73; // ecx\n  int v74; // r8d\n  int v75; // r9d\n  cc_t v76; // al\n  char *v77; // rax\n  char **v78; // rbx\n  unsigned int v79; // r12d\n  unsigned int v80; // ebp\n  char *v81; // rax\n  _DWORD *v82; // rax\n  int v83; // ecx\n  int v84; // r8d\n  int v85; // r9d\n  char *v86; // rdx\n  char *v87; // rdx\n  char *v88; // rax\n  char *v89; // rax\n  const char *v90; // rbx\n  int *v91; // rax\n  char *v92; // rax\n  __int64 v93; // rbp\n  char *v94; // rbx\n  int *v95; // rax\n  const char *v96; // rbx\n  int *v97; // rax\n  const char *v98; // rbx\n  int *v99; // rax\n  char **v100; // [rsp+8h] [rbp-60h]\n  char *file; // [rsp+10h] [rbp-58h]\n  char v102; // [rsp+1Dh] [rbp-4Bh]\n  char v103; // [rsp+1Eh] [rbp-4Ah]\n  char v104; // [rsp+1Fh] [rbp-49h]\n  char v105; // [rsp+2Eh] [rbp-3Ah] BYREF\n  char v106[57]; // [rsp+2Fh] [rbp-39h] BYREF\n\n  v3 = 1;\n  v4 = 0;\n  v5 = 0;\n  v6 = 0LL;\n  v7 = a2;\n  sub_404A50(*a2);\n  setlocale(6, \"\");\n  bindtextdomain(\n    \"coreutils\",\n    \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n  textdomain(\"coreutils\");\n  sub_40BD50(sub_404940);\n  v104 = 1;\n  dword_6132B8 = 0;\n  file = 0LL;\n  v102 = 0;\n  v103 = 0;\n  v100 = a2 + 1;\n  while ( 1 )\n  {\n    v8 = sub_4089E0((unsigned int)(a1 - v5), &v7[v6], \"-agF:\", &off_40C720, 0LL);\n    if ( v8 == -1 )\n      break;\n    if ( v8 == 70 )\n    {\n      if ( file )\n        goto LABEL_125;\n      file = (char *)qword_613580;\nLABEL_8:\n      v9 = dword_6132BC;\n      if ( dword_6132BC <= v3 )\n      {\n        v9 = v3;\n      }\n      else\n      {\n        v10 = v3 + v6;\n        v11 = &v7[v10];\n        v12 = &(&v100[v10])[dword_6132BC - 1 - v3];\n        do\n          *v11++ = 0LL;\n        while ( v11 != v12 );\n      }\n      v3 = v9;\n    }\n    else\n    {\n      if ( v8 <= 70 )\n      {\n        if ( v8 == -131 )\n        {\n          sub_406AF0(\n            (_DWORD)stdout,\n            (unsigned int)\"stty\",\n            (unsigned int)&unk_40BF30,\n            (_DWORD)off_613238,\n            (unsigned int)\"David MacKenzie\",\n            0);\n          exit(0);\n        }\n        if ( v8 == -130 )\n          sub_402D90(0);\n        goto LABEL_15;\n      }\n      if ( v8 == 97 )\n      {\n        v103 = 1;\n        v4 = 1;\n        goto LABEL_8;\n      }\n      if ( v8 == 103 )\n      {\n        v102 = 1;\n        v4 = 2;\n        goto LABEL_8;\n      }\nLABEL_15:\n      v5 += v3;\n      v6 = v5;\n      if ( strcmp(v7[v5], \"-drain\") )\n      {\n        v13 = strcmp(v7[v5], \"drain\");\n        v14 = v104;\n        if ( v13 )\n          v14 = 0;\n        v104 = v14;\n      }\n      dword_6132BC = 0;\n      v3 = 1;\n    }\n  }\n  if ( ((unsigned __int8)v102 & (unsigned __int8)v103) != 0 )\n  {\n    v88 = dcgettext(0LL, \"the options for verbose and stty-readable output styles are\\nmutually exclusive\", 5);\n    error(1, 0, v88);\nLABEL_125:\n    v89 = dcgettext(0LL, \"only one device may be specified\", 5);\n    error(1, 0, v89);\nLABEL_126:\n    v90 = (const char *)sub_4064F0(0LL, 3LL, file);\n    v91 = __errno_location();\n    error(1, *v91, \"%s\", v90);\nLABEL_127:\n    v92 = dcgettext(0LL, \"when specifying an output style, modes may not be set\", 5);\n    error(1, 0, v92);\n    goto LABEL_128;\n  }\n  if ( v104 )\n  {\n    if ( file )\n      goto LABEL_29;\n    file = dcgettext(0LL, \"standard input\", 5);\n    if ( !tcgetattr(0, &termios_p) )\n    {\nLABEL_39:\n      v24 = sub_4026E0();\n      dword_6133DC = 0;\n      dword_6133E0 = v24;\n      if ( v4 != 1 )\n      {\n        if ( v4 != 2 )\n        {\n          sub_402930(&termios_p);\n          sub_4027C0((unsigned int)\"line = %d;\", termios_p.c_line, v25, v26, v27, v28);\n          v29 = stdout;\n          IO_write_ptr = stdout->_IO_write_ptr;\n          if ( IO_write_ptr >= stdout->_IO_write_end )\n          {\nLABEL_137:\n            __overflow(v29, 10);\n          }\n          else\n          {\n            stdout->_IO_write_ptr = IO_write_ptr + 1;\n            *IO_write_ptr = 10;\n          }\n          dword_6133DC = 0;\n          v31 = &off_40C7E0;\n          v32 = 1;\n          while ( 1 )\n          {\n            v37 = *v31;\n            if ( !strcmp(*v31, \"min\") )\n              break;\n            v41 = termios_p.c_cc[(_QWORD)v31[2]];\n            if ( v41 != *((_BYTE *)v31 + 8) && strcmp(v37, \"flush\") )\n            {\n              if ( v41 )\n                LODWORD(v33) = sub_402B00(v41);\n              else\n                v33 = \"<undef>\";\n              sub_4027C0((unsigned int)\"%s = %s;\", (_DWORD)v37, (_DWORD)v33, v34, v35, v36);\n              v32 = 0;\n            }\n            v31 += 3;\n          }\n          if ( (termios_p.c_lflag & 2) != 0 )\n          {\n            if ( !v32 )\n            {\n              v47 = stdout->_IO_write_ptr;\n              if ( v47 >= stdout->_IO_write_end )\n              {\n                __overflow(stdout, 10);\n              }\n              else\n              {\n                stdout->_IO_write_ptr = v47 + 1;\n                *v47 = 10;\n              }\n            }\n          }\n          else\n          {\n            sub_4027C0((unsigned int)\"min = %lu; time = %lu;\\n\", termios_p.c_cc[6], termios_p.c_cc[5], v38, v39, v40);\n          }\n          v48 = &off_40C9C0;\n          v49 = 0;\n          v50 = 1;\n          dword_6133DC = 0;\n          while ( *v48 )\n          {\n            if ( (*((_BYTE *)v48 + 12) & 8) == 0 )\n            {\n              v52 = v49;\n              if ( *((_DWORD *)v48 + 2) != v49 )\n              {\n                if ( !v50 )\n                {\n                  v53 = stdout->_IO_write_ptr;\n                  if ( v53 >= stdout->_IO_write_end )\n                  {\n                    __overflow(stdout, 10);\n                  }\n                  else\n                  {\n                    stdout->_IO_write_ptr = v53 + 1;\n                    *v53 = 10;\n                  }\n                  dword_6133DC = 0;\n                }\n                v52 = *((unsigned int *)v48 + 2);\n                v50 = 1;\n                v49 = *((_DWORD *)v48 + 2);\n              }\n              v54 = (_DWORD *)sub_402750(v52, &termios_p);\n              v57 = v48[3];\n              if ( !v57 )\n                v57 = v48[2];\n              if ( !v54 )\n                __assert_fail(\"bitsp\", \"src/stty.c\", 0x7A2u, \"display_changed\");\n              v58 = *((unsigned __int8 *)v48 + 12);\n              v59 = (char *)(*v54 & (unsigned int)v57);\n              if ( v59 == v48[2] )\n              {\n                LOBYTE(v58) = v58 & 2;\n                if ( (_BYTE)v58 )\n                {\n                  v50 = 0;\n                  sub_4027C0((unsigned int)\"%s\", (unsigned int)*v48, (_DWORD)v59, v58, v55, v56);\n                }\n              }\n              else\n              {\n                v51 = v58 & 5;\n                if ( (_BYTE)v51 == 5 )\n                {\n                  v50 = 0;\n                  sub_4027C0((unsigned int)\"-%s\", (unsigned int)*v48, (_DWORD)v59, v51, v55, v56);\n                }\n              }\n            }\n            v48 += 4;\n          }\n          if ( v50 )\n            goto LABEL_89;\n          goto LABEL_87;\n        }\nLABEL_60:\n        v45 = 0LL;\n        __printf_chk(1LL, \"%lx:%lx:%lx:%lx\", termios_p.c_iflag, termios_p.c_oflag, termios_p.c_cflag, termios_p.c_lflag);\n        do\n        {\n          ++v45;\n          __printf_chk(1LL, \":%lx\", *(&termios_p.c_line + v45));\n        }\n        while ( v45 != 32 );\n        v46 = stdout->_IO_write_ptr;\n        if ( v46 >= stdout->_IO_write_end )\n        {\n          __overflow(stdout, 10);\n        }\n        else\n        {\n          stdout->_IO_write_ptr = v46 + 1;\n          *v46 = 10;\n        }\n        return 0LL;\n      }\n      sub_402930(&termios_p);\n      sub_402CA0(1LL, file);\n      sub_4027C0((unsigned int)\"line = %d;\", termios_p.c_line, v61, v62, v63, v64);\n      v65 = stdout;\n      v66 = stdout->_IO_write_ptr;\n      if ( v66 < stdout->_IO_write_end )\n      {\n        stdout->_IO_write_ptr = v66 + 1;\n        *v66 = 10;\n        goto LABEL_92;\n      }\nLABEL_130:\n      __overflow(v65, 10);\nLABEL_92:\n      dword_6133DC = 0;\n      for ( i = &off_40C7E0; ; i += 3 )\n      {\n        v72 = *i;\n        if ( !strcmp(*i, \"min\") )\n          break;\n        if ( strcmp(v72, \"flush\") )\n        {\n          v76 = termios_p.c_cc[(_QWORD)i[2]];\n          if ( v76 )\n            LODWORD(v68) = sub_402B00(v76);\n          else\n            v68 = \"<undef>\";\n          sub_4027C0((unsigned int)\"%s = %s;\", (_DWORD)v72, (_DWORD)v68, v69, v70, v71);\n        }\n      }\n      sub_4027C0((unsigned int)\"min = %lu; time = %lu;\", termios_p.c_cc[6], termios_p.c_cc[5], v73, v74, v75);\n      if ( dword_6133DC )\n      {\n        v77 = stdout->_IO_write_ptr;\n        if ( v77 >= stdout->_IO_write_end )\n        {\n          __overflow(stdout, 10);\n        }\n        else\n        {\n          stdout->_IO_write_ptr = v77 + 1;\n          *v77 = 10;\n        }\n      }\n      dword_6133DC = 0;\n      v78 = &off_40C9C0;\n      v79 = 0;\n      while ( *v78 )\n      {\n        if ( (*((_BYTE *)v78 + 12) & 8) == 0 )\n        {\n          v80 = *((_DWORD *)v78 + 2);\n          if ( v80 != v79 )\n          {\n            v81 = stdout->_IO_write_ptr;\n            if ( v81 >= stdout->_IO_write_end )\n            {\n              __overflow(stdout, 10);\n            }\n            else\n            {\n              stdout->_IO_write_ptr = v81 + 1;\n              *v81 = 10;\n            }\n            dword_6133DC = 0;\n            v79 = v80;\n            v80 = *((_DWORD *)v78 + 2);\n          }\n          v82 = (_DWORD *)sub_402750(v80, &termios_p);\n          v86 = v78[3];\n          if ( !v86 )\n            v86 = v78[2];\n          if ( !v82 )\n            __assert_fail(\"bitsp\", \"src/stty.c\", 0x7F6u, \"display_all\");\n          v87 = (char *)(*v82 & (unsigned int)v86);\n          if ( v87 == v78[2] )\n          {\n            sub_4027C0((unsigned int)\"%s\", (unsigned int)*v78, (_DWORD)v87, v83, v84, v85);\n          }\n          else if ( (*((_BYTE *)v78 + 12) & 4) != 0 )\n          {\n            sub_4027C0((unsigned int)\"-%s\", (unsigned int)*v78, (_DWORD)v87, v83, v84, v85);\n          }\n        }\n        v78 += 4;\n      }\nLABEL_87:\n      v60 = stdout->_IO_write_ptr;\n      if ( v60 >= stdout->_IO_write_end )\n      {\n        __overflow(stdout, 10);\n      }\n      else\n      {\n        stdout->_IO_write_ptr = v60 + 1;\n        *v60 = 10;\n      }\nLABEL_89:\n      dword_6133DC = 0;\n      return 0LL;\n    }\nLABEL_59:\n    v43 = (const char *)sub_4064F0(0LL, 3LL, file);\n    v44 = __errno_location();\n    error(1, *v44, \"%s\", v43);\n    goto LABEL_60;\n  }\n  if ( v103 || v102 )\n    goto LABEL_127;\n  if ( !file )\n    goto LABEL_58;\n  sub_403BD0(1, (_DWORD)file, (_DWORD)v7, a1, (unsigned int)&unk_6133A0, (unsigned int)v106, (__int64)&v105);\nLABEL_29:\n  if ( (int)sub_4049E0(0, file, 2048) < 0 )\n    goto LABEL_129;\n  v19 = sub_407B50(0, 3, v15, v16, v17, v18);\n  if ( v19 == -1 || (BYTE1(v19) &= ~8u, (int)sub_407B50(0, 4, v19, v20, v21, v22) < 0) )\n  {\nLABEL_128:\n    v93 = sub_4064F0(0LL, 3LL, file);\n    v94 = dcgettext(0LL, \"%s: couldn't reset non-blocking mode\", 5);\n    v95 = __errno_location();\n    error(1, *v95, v94, v93);\nLABEL_129:\n    v96 = (const char *)sub_4064F0(0LL, 3LL, file);\n    v97 = __errno_location();\n    v65 = (_IO_FILE *)1;\n    error(1, *v97, \"%s\", v96);\n    goto LABEL_130;\n  }\n  if ( tcgetattr(0, &termios_p) )\n    goto LABEL_59;\n  if ( (unsigned __int8)v104 | (unsigned __int8)v102 || v103 )\n    goto LABEL_39;\n  while ( 1 )\n  {\n    v106[0] = 0;\n    v105 = 0;\n    sub_403BD0(0, (_DWORD)file, (_DWORD)v7, a1, (unsigned int)&termios_p, (unsigned int)v106, (__int64)&v105);\n    if ( !v105 )\n      return 0LL;\n    if ( tcsetattr(0, optional_actions, &termios_p) )\n    {\n      v98 = (const char *)sub_4064F0(0LL, 3LL, file);\n      v99 = __errno_location();\n      v29 = (_IO_FILE *)1;\n      error(1, *v99, \"%s\", v98);\n      goto LABEL_137;\n    }\n    if ( tcgetattr(0, &stru_613320) )\n      goto LABEL_126;\n    if ( !memcmp(&termios_p, &stru_613320, 0x3CuLL) )\n      return 0LL;\n    stru_613320.c_cflag &= 0xEFF0FFFF;\n    if ( !v106[0] && !memcmp(&termios_p, &stru_613320, 0x3CuLL) )\n      return 0LL;\n    v7 = (char **)sub_4064F0(0LL, 3LL, file);\n    v42 = dcgettext(0LL, \"%s: unable to perform all requested operations\", 5);\n    error(1, 0, v42, v7);\nLABEL_58:\n    file = dcgettext(0LL, \"standard input\", 5);\n    sub_403BD0(1, (_DWORD)file, (_DWORD)v7, a1, (unsigned int)&unk_6133A0, (unsigned int)v106, (__int64)&v105);\n    if ( tcgetattr(0, &termios_p) )\n      goto LABEL_59;\n  }\n}\n"
        },
        {
            "funcName": "sub_4025CB",
            "funcStartAddr": "0x4025cb",
            "funcEndAddr": "0x4025ea",
            "decompiledFuncCode": "__int64 *sub_4025CB()\n{\n  return &program_invocation_short_name;\n}\n"
        },
        {
            "funcName": "sub_4025EA",
            "funcStartAddr": "0x4025ea",
            "funcEndAddr": "0x402621",
            "decompiledFuncCode": "__int64 sub_4025EA()\n{\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_402621",
            "funcStartAddr": "0x402621",
            "funcEndAddr": "0x402678",
            "decompiledFuncCode": "__int64 *sub_402621()\n{\n  __int64 *result; // rax\n\n  if ( !byte_6132E8 )\n  {\n    while ( qword_6132F0 < (unsigned __int64)(&qword_612E48 - qword_612E40 - 1) )\n      ((void (*)(void))qword_612E40[++qword_6132F0])();\n    result = sub_4025CB();\n    byte_6132E8 = 1;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_402678",
            "funcStartAddr": "0x402678",
            "funcEndAddr": "0x40267d",
            "decompiledFuncCode": "// attributes: thunk\n__int64 sub_402678()\n{\n  return sub_4025EA();\n}\n"
        },
        {
            "funcName": "sub_402680",
            "funcStartAddr": "0x402680",
            "funcEndAddr": "0x4026da",
            "decompiledFuncCode": "__int64 __fastcall sub_402680(char *s1)\n{\n  const char *v1; // rsi\n  int v2; // ebp\n  void **v3; // rbx\n\n  v1 = \"0\";\n  v2 = 0;\n  v3 = &off_40C3D8;\n  do\n  {\n    if ( !strcmp(s1, v1) )\n      return (unsigned int)dword_40C3C8[6 * v2];\n    v3 += 3;\n    v1 = (const char *)*(v3 - 3);\n    ++v2;\n  }\n  while ( v1 );\n  return 0xFFFFFFFFLL;\n}\n"
        },
        {
            "funcName": "sub_4026E0",
            "funcStartAddr": "0x4026e0",
            "funcEndAddr": "0x40274b",
            "decompiledFuncCode": "__int64 sub_4026E0()\n{\n  __int64 result; // rax\n  char *v1; // rax\n  __int64 v2; // [rsp+0h] [rbp-18h]\n  char v3[2]; // [rsp+8h] [rbp-10h] BYREF\n  unsigned __int16 v4; // [rsp+Ah] [rbp-Eh]\n\n  if ( ioctl(1, 0x5413uLL, v3) || (result = v4) == 0 )\n  {\n    v1 = getenv(\"COLUMNS\");\n    if ( !v1 )\n      return 80LL;\n    if ( (unsigned int)sub_406FC0(v1) )\n      return 80LL;\n    result = v2;\n    if ( (unsigned __int64)(v2 - 1) > 0x7FFFFFFE )\n      return 80LL;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_402750",
            "funcStartAddr": "0x401a70",
            "funcEndAddr": "0x401a75",
            "decompiledFuncCode": "__int64 __fastcall sub_402750(int a1, __int64 a2)\n{\n  __int64 result; // rax\n\n  switch ( a1 )\n  {\n    case 0:\n      result = a2 + 8;\n      break;\n    case 1:\n      result = a2;\n      break;\n    case 2:\n      result = a2 + 4;\n      break;\n    case 3:\n      result = a2 + 12;\n      break;\n    case 4:\n      result = 0LL;\n      break;\n    default:\n      abort();\n  }\n  return result;\n}\n\n__int64 __fastcall sub_402750(int a1, __int64 a2)\n{\n  __int64 result; // rax\n\n  switch ( a1 )\n  {\n    case 0:\n      result = a2 + 8;\n      break;\n    case 1:\n      result = a2;\n      break;\n    case 2:\n      result = a2 + 4;\n      break;\n    case 3:\n      result = a2 + 12;\n      break;\n    case 4:\n      result = 0LL;\n      break;\n    default:\n      abort();\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_402750",
            "funcStartAddr": "0x401a70",
            "funcEndAddr": "0x401a75",
            "decompiledFuncCode": "__int64 __fastcall sub_402750(int a1, __int64 a2)\n{\n  __int64 result; // rax\n\n  switch ( a1 )\n  {\n    case 0:\n      result = a2 + 8;\n      break;\n    case 1:\n      result = a2;\n      break;\n    case 2:\n      result = a2 + 4;\n      break;\n    case 3:\n      result = a2 + 12;\n      break;\n    case 4:\n      result = 0LL;\n      break;\n    default:\n      abort();\n  }\n  return result;\n}\n\n__int64 __fastcall sub_402750(int a1, __int64 a2)\n{\n  __int64 result; // rax\n\n  switch ( a1 )\n  {\n    case 0:\n      result = a2 + 8;\n      break;\n    case 1:\n      result = a2;\n      break;\n    case 2:\n      result = a2 + 4;\n      break;\n    case 3:\n      result = a2 + 12;\n      break;\n    case 4:\n      result = 0LL;\n      break;\n    default:\n      abort();\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4027C0",
            "funcStartAddr": "0x4027c0",
            "funcEndAddr": "0x402924",
            "decompiledFuncCode": "void sub_4027C0(__int64 a1, ...)\n{\n  int v1; // ebx\n  int v2; // eax\n  FILE *v3; // rdi\n  char *IO_write_ptr; // rcx\n  char *IO_write_end; // rsi\n  char *s; // [rsp+0h] [rbp-D8h] BYREF\n  gcc_va_list va; // [rsp+8h] [rbp-D0h] BYREF\n\n  va_start(va, a1);\n  v1 = sub_408AE0(&s, a1, va);\n  if ( v1 < 0 )\n    sub_406E80();\n  v2 = dword_6133DC;\n  v3 = stdout;\n  if ( dword_6133DC > 0 )\n  {\n    IO_write_ptr = stdout->_IO_write_ptr;\n    IO_write_end = stdout->_IO_write_end;\n    if ( dword_6133E0 - dword_6133DC >= v1 )\n    {\n      if ( IO_write_ptr >= IO_write_end )\n      {\n        __overflow(stdout, 32);\n        v2 = dword_6133DC;\n      }\n      else\n      {\n        stdout->_IO_write_ptr = IO_write_ptr + 1;\n        *IO_write_ptr = 32;\n      }\n      v3 = stdout;\n      dword_6133DC = v2 + 1;\n    }\n    else\n    {\n      if ( IO_write_ptr >= IO_write_end )\n      {\n        __overflow(stdout, 10);\n      }\n      else\n      {\n        stdout->_IO_write_ptr = IO_write_ptr + 1;\n        *IO_write_ptr = 10;\n      }\n      dword_6133DC = 0;\n      v3 = stdout;\n    }\n  }\n  fputs_unlocked(s, v3);\n  free(s);\n  dword_6133DC += v1;\n}\n"
        },
        {
            "funcName": "sub_402930",
            "funcStartAddr": "0x402930",
            "funcEndAddr": "0x402aab",
            "decompiledFuncCode": "void __fastcall sub_402930(struct termios *termios_p, char a2)\n{\n  speed_t v3; // r12d\n  speed_t v4; // eax\n  _DWORD *v5; // rdx\n  __int64 v6; // rcx\n  char *v7; // rsi\n  const char *v8; // rdi\n  speed_t v9; // eax\n  _DWORD *v10; // rdx\n  char *v11; // rsi\n  int v12; // ecx\n  __int64 v13; // r12\n  speed_t v14; // eax\n  _DWORD *v15; // rcx\n  char *v16; // rdi\n  int v17; // esi\n  __int64 v18; // rsi\n  const char *v19; // rdi\n\n  if ( cfgetispeed(termios_p) && (v3 = cfgetispeed(termios_p), v3 != cfgetospeed(termios_p)) )\n  {\n    v9 = cfgetospeed(termios_p);\n    if ( v9 )\n    {\n      v10 = &unk_40C3E0;\n      v11 = \"50\";\n      v12 = 0;\n      while ( 1 )\n      {\n        ++v12;\n        if ( !v11 )\n          break;\n        v10 += 6;\n        if ( v9 == *(v10 - 6) )\n        {\n          v13 = qword_40C3D0[3 * v12];\n          goto LABEL_20;\n        }\n        v11 = (char *)*((_QWORD *)v10 - 1);\n      }\n    }\n    v13 = 0LL;\nLABEL_20:\n    v14 = cfgetispeed(termios_p);\n    if ( v14 )\n    {\n      v15 = &unk_40C3E0;\n      v16 = \"50\";\n      v17 = 0;\n      while ( 1 )\n      {\n        ++v17;\n        if ( !v16 )\n          break;\n        v15 += 6;\n        if ( v14 == *(v15 - 6) )\n        {\n          v18 = qword_40C3D0[3 * v17];\n          goto LABEL_26;\n        }\n        v16 = (char *)*((_QWORD *)v15 - 1);\n      }\n    }\n    v18 = 0LL;\nLABEL_26:\n    v19 = \"ispeed %lu baud; ospeed %lu baud;\";\n    if ( !a2 )\n      v19 = (const char *)&unk_40BDBC;\n    sub_4027C0((__int64)v19, v18, v13);\n  }\n  else\n  {\n    v4 = cfgetospeed(termios_p);\n    if ( v4 )\n    {\n      v5 = &unk_40C3E0;\n      v7 = \"50\";\n      LODWORD(v6) = 0;\n      while ( 1 )\n      {\n        v6 = (unsigned int)(v6 + 1);\n        if ( !v7 )\n          break;\n        v5 += 6;\n        if ( v4 == *(v5 - 6) )\n        {\n          v6 = (int)v6;\n          v7 = (char *)qword_40C3D0[3 * (int)v6];\n          break;\n        }\n        v7 = (char *)*((_QWORD *)v5 - 1);\n      }\n    }\n    else\n    {\n      v7 = 0LL;\n    }\n    v8 = \"speed %lu baud;\";\n    if ( !a2 )\n      v8 = \"%lu\\n\";\n    sub_4027C0((__int64)v8, v7, v5, v6);\n  }\n  if ( !a2 )\n    dword_6133DC = 0;\n}\n"
        },
        {
            "funcName": "sub_402AB0",
            "funcStartAddr": "0x402ab0",
            "funcEndAddr": "0x402af2",
            "decompiledFuncCode": "__int64 __fastcall sub_402AB0(int a1, int a2)\n{\n  unsigned int v2; // eax\n\n  v2 = (unsigned int)dcgettext(0LL, \"invalid integer argument\", 5);\n  return sub_406EC0(a1, 0, 0, a2, (unsigned int)\"bB\", v2, 0);\n}\n"
        },
        {
            "funcName": "sub_402B00",
            "funcStartAddr": "0x402b00",
            "funcEndAddr": "0x402bce",
            "decompiledFuncCode": "__int16 *__fastcall sub_402B00(unsigned __int8 a1)\n{\n  __int16 *v1; // rax\n\n  if ( a1 <= 0x1Fu )\n  {\n    LOBYTE(word_613300) = 94;\n    HIBYTE(word_613300) = a1 + 64;\n    LOBYTE(word_613302) = 0;\n    return &word_613300;\n  }\n  else\n  {\n    if ( a1 > 0x7Eu )\n    {\n      if ( a1 == 127 )\n      {\n        v1 = &word_613302;\n        word_613300 = 16222;\n      }\n      else\n      {\n        word_613300 = 11597;\n        if ( a1 <= 0x9Fu )\n        {\n          LOBYTE(word_613302) = 94;\n          v1 = (__int16 *)&unk_613304;\n          HIBYTE(word_613302) = a1 - 64;\n        }\n        else if ( a1 == 0xFF )\n        {\n          word_613302 = 16222;\n          v1 = (__int16 *)&unk_613304;\n        }\n        else\n        {\n          v1 = &word_613302 + 1;\n          LOBYTE(word_613302) = a1 + 0x80;\n        }\n      }\n    }\n    else\n    {\n      LOBYTE(word_613300) = a1;\n      v1 = &word_613300 + 1;\n    }\n    *(_BYTE *)v1 = 0;\n    return &word_613300;\n  }\n}\n"
        },
        {
            "funcName": "sub_402BD0",
            "funcStartAddr": "0x402bd0",
            "funcEndAddr": "0x402ca0",
            "decompiledFuncCode": "int __fastcall sub_402BD0(int a1, int a2, __int64 a3)\n{\n  int *v4; // r13\n  int result; // eax\n  const char *v6; // rax\n  const char *v7; // rbx\n  __int64 v8; // rsi\n  __int64 v9[6]; // [rsp+8h] [rbp-30h] BYREF\n\n  if ( ioctl(0, 0x5413uLL, v9) )\n  {\n    v4 = __errno_location();\n    if ( *v4 != 22 )\n    {\n      v6 = (const char *)sub_4064F0(0LL, 3LL, a3);\n      error(1, *v4, \"%s\", v6);\nLABEL_11:\n      v7 = (const char *)sub_4064F0(0LL, 3LL, a3);\n      v8 = (unsigned int)*__errno_location();\n      error(1, v8, \"%s\", v7);\n      return sub_402CA0(1LL, v8);\n    }\n    v9[0] = 0LL;\n  }\n  if ( a1 >= 0 )\n    LOWORD(v9[0]) = a1;\n  if ( a2 >= 0 )\n    WORD1(v9[0]) = a2;\n  result = ioctl(0, 0x5414uLL, v9);\n  if ( result )\n    goto LABEL_11;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_402CA0",
            "funcStartAddr": "0x402ca0",
            "funcEndAddr": "0x402d90",
            "decompiledFuncCode": "void __fastcall sub_402CA0(char a1, __int64 a2)\n{\n  int *v2; // r12\n  const char *v3; // rax\n  __int64 v4; // rbx\n  char *v5; // rax\n  unsigned __int16 v6; // [rsp+8h] [rbp-20h] BYREF\n  unsigned __int16 v7; // [rsp+Ah] [rbp-1Eh]\n\n  if ( ioctl(0, 0x5413uLL, &v6) )\n  {\n    v2 = __errno_location();\n    if ( *v2 == 22 )\n    {\n      if ( a1 )\n        return;\n    }\n    else\n    {\n      v3 = (const char *)sub_4064F0(0LL, 3LL, a2);\n      error(1, *v2, \"%s\", v3);\n    }\n    v4 = sub_4064F0(0LL, 3LL, a2);\n    v5 = dcgettext(0LL, \"%s: no size information for this device\", 5);\n    error(1, 0, v5, v4);\n    sub_402D90(1);\n  }\n  if ( a1 )\n  {\n    sub_4027C0((__int64)\"rows %d; columns %d;\", v6, v7);\n  }\n  else\n  {\n    sub_4027C0((__int64)\"%d %d\\n\", v6, v7);\n    dword_6133DC = 0;\n  }\n}\n"
        },
        {
            "funcName": "sub_402D90",
            "funcStartAddr": "0x402d90",
            "funcEndAddr": "0x403bc1",
            "decompiledFuncCode": "void __fastcall __noreturn sub_402D90(int status)\n{\n  __int64 v1; // rbp\n  char *v2; // rax\n  char *v3; // rax\n  FILE *v4; // rbp\n  char *v5; // rax\n  FILE *v6; // rbp\n  char *v7; // rax\n  FILE *v8; // rbp\n  char *v9; // rax\n  FILE *v10; // rbp\n  char *v11; // rax\n  FILE *v12; // rbp\n  char *v13; // rax\n  FILE *v14; // rbp\n  char *v15; // rax\n  FILE *v16; // rbp\n  char *v17; // rax\n  FILE *v18; // rbp\n  char *v19; // rax\n  FILE *v20; // rbp\n  char *v21; // rax\n  FILE *v22; // rbp\n  char *v23; // rax\n  FILE *v24; // rbp\n  char *v25; // rax\n  FILE *v26; // rbp\n  char *v27; // rax\n  FILE *v28; // rbp\n  char *v29; // rax\n  FILE *v30; // rbp\n  char *v31; // rax\n  FILE *v32; // rbp\n  char *v33; // rax\n  FILE *v34; // rbp\n  char *v35; // rax\n  FILE *v36; // rbp\n  char *v37; // rax\n  FILE *v38; // rbp\n  char *v39; // rax\n  FILE *v40; // rbp\n  char *v41; // rax\n  char *v42; // rbp\n  char *v43; // rax\n  FILE *v44; // rbp\n  char *v45; // rax\n  FILE *v46; // rbp\n  char *v47; // rax\n  FILE *v48; // rbp\n  char *v49; // rax\n  FILE *v50; // rbp\n  char *v51; // rax\n  FILE *v52; // rbp\n  char *v53; // rax\n  FILE *v54; // rbp\n  char *v55; // rax\n  FILE *v56; // rbp\n  char *v57; // rax\n  FILE *v58; // rbp\n  char *v59; // rax\n  FILE *v60; // rbp\n  char *v61; // rax\n  FILE *v62; // rbp\n  char *v63; // rax\n  FILE *v64; // rbp\n  char *v65; // rax\n  FILE *v66; // rbp\n  char *v67; // rax\n  FILE *v68; // rbp\n  char *v69; // rax\n  FILE *v70; // rbp\n  char *v71; // rax\n  FILE *v72; // rbp\n  char *v73; // rax\n  FILE *v74; // rbp\n  char *v75; // rax\n  FILE *v76; // rbp\n  char *v77; // rax\n  FILE *v78; // rbp\n  char *v79; // rax\n  FILE *v80; // rbp\n  char *v81; // rax\n  FILE *v82; // rbp\n  char *v83; // rax\n  FILE *v84; // rbp\n  char *v85; // rax\n  FILE *v86; // rbp\n  char *v87; // rax\n  FILE *v88; // rbp\n  char *v89; // rax\n  FILE *v90; // rbp\n  char *v91; // rax\n  FILE *v92; // rbp\n  char *v93; // rax\n  FILE *v94; // rbp\n  char *v95; // rax\n  FILE *v96; // rbp\n  char *v97; // rax\n  FILE *v98; // rbp\n  char *v99; // rax\n  FILE *v100; // rbp\n  char *v101; // rax\n  FILE *v102; // rbp\n  char *v103; // rax\n  FILE *v104; // rbp\n  char *v105; // rax\n  FILE *v106; // rbp\n  char *v107; // rax\n  FILE *v108; // rbp\n  char *v109; // rax\n  FILE *v110; // rbp\n  char *v111; // rax\n  FILE *v112; // rbp\n  char *v113; // rax\n  FILE *v114; // rbp\n  char *v115; // rax\n  FILE *v116; // rbp\n  char *v117; // rax\n  FILE *v118; // rbp\n  char *v119; // rax\n  FILE *v120; // rbp\n  char *v121; // rax\n  FILE *v122; // rbp\n  char *v123; // rax\n  FILE *v124; // rbp\n  char *v125; // rax\n  FILE *v126; // rbp\n  char *v127; // rax\n  FILE *v128; // rbp\n  char *v129; // rax\n  char *v130; // rax\n  FILE *v131; // rbp\n  char *v132; // rax\n  FILE *v133; // rbp\n  char *v134; // rax\n  FILE *v135; // rbp\n  char *v136; // rax\n  FILE *v137; // rbp\n  char *v138; // rax\n  FILE *v139; // rbp\n  char *v140; // rax\n  FILE *v141; // rbp\n  char *v142; // rax\n  FILE *v143; // rbp\n  char *v144; // rax\n  FILE *v145; // rbp\n  char *v146; // rax\n  char *v147; // rax\n  char *v148; // rax\n  FILE *v149; // rbp\n  char *v150; // rax\n  FILE *v151; // rbp\n  char *v152; // rax\n  FILE *v153; // rbp\n  char *v154; // rax\n  FILE *v155; // rbp\n  char *v156; // rax\n  char *v157; // rax\n  FILE *v158; // rbp\n  char *v159; // rax\n  char *v160; // rax\n  char *v161; // rax\n  FILE *v162; // rbp\n  char *v163; // rax\n  __int64 *v164; // rax\n  char *v165; // rbp\n  char *v166; // rax\n  char *v167; // rax\n  const char *v168; // r12\n  char *v169; // rax\n  char *v170; // rax\n  char *v171; // rax\n  char *v172; // rax\n  char *v173; // rax\n  char *v174; // rax\n  __int64 v175[17]; // [rsp+0h] [rbp-88h] BYREF\n\n  v1 = qword_6133F8;\n  if ( status )\n  {\n    v2 = dcgettext(0LL, \"Try '%s --help' for more information.\\n\", 5);\n    __fprintf_chk(stderr, 1LL, v2, v1);\n    goto LABEL_3;\n  }\n  v3 = dcgettext(\n         0LL,\n         \"Usage: %s [-F DEVICE | --file=DEVICE] [SETTING]...\\n\"\n         \"  or:  %s [-F DEVICE | --file=DEVICE] [-a|--all]\\n\"\n         \"  or:  %s [-F DEVICE | --file=DEVICE] [-g|--save]\\n\",\n         5);\n  __printf_chk(1LL, v3, v1, v1, v1);\n  v4 = stdout;\n  v5 = dcgettext(0LL, \"Print or change terminal characteristics.\\n\", 5);\n  fputs_unlocked(v5, v4);\n  v6 = stdout;\n  v7 = dcgettext(0LL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5);\n  fputs_unlocked(v7, v6);\n  v8 = stdout;\n  v9 = dcgettext(\n         0LL,\n         \"  -a, --all          print all current settings in human-readable form\\n\"\n         \"  -g, --save         print all current settings in a stty-readable form\\n\"\n         \"  -F, --file=DEVICE  open and use the specified DEVICE instead of stdin\\n\",\n         5);\n  fputs_unlocked(v9, v8);\n  v10 = stdout;\n  v11 = dcgettext(0LL, \"      --help     display this help and exit\\n\", 5);\n  fputs_unlocked(v11, v10);\n  v12 = stdout;\n  v13 = dcgettext(0LL, \"      --version  output version information and exit\\n\", 5);\n  fputs_unlocked(v13, v12);\n  v14 = stdout;\n  v15 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"Optional - before SETTING indicates negation.  An * marks non-POSIX\\n\"\n          \"settings.  The underlying system defines which settings are available.\\n\",\n          5);\n  fputs_unlocked(v15, v14);\n  v16 = stdout;\n  v17 = dcgettext(0LL, \"\\nSpecial characters:\\n\", 5);\n  fputs_unlocked(v17, v16);\n  v18 = stdout;\n  v19 = dcgettext(0LL, \" * discard CHAR  CHAR will toggle discarding of output\\n\", 5);\n  fputs_unlocked(v19, v18);\n  v20 = stdout;\n  v21 = dcgettext(\n          0LL,\n          \"   eof CHAR      CHAR will send an end of file (terminate the input)\\n\"\n          \"   eol CHAR      CHAR will end the line\\n\",\n          5);\n  fputs_unlocked(v21, v20);\n  v22 = stdout;\n  v23 = dcgettext(0LL, \" * eol2 CHAR     alternate CHAR for ending the line\\n\", 5);\n  fputs_unlocked(v23, v22);\n  v24 = stdout;\n  v25 = dcgettext(\n          0LL,\n          \"   erase CHAR    CHAR will erase the last character typed\\n\"\n          \"   intr CHAR     CHAR will send an interrupt signal\\n\"\n          \"   kill CHAR     CHAR will erase the current line\\n\",\n          5);\n  fputs_unlocked(v25, v24);\n  v26 = stdout;\n  v27 = dcgettext(0LL, \" * lnext CHAR    CHAR will enter the next character quoted\\n\", 5);\n  fputs_unlocked(v27, v26);\n  v28 = stdout;\n  v29 = dcgettext(0LL, \"   quit CHAR     CHAR will send a quit signal\\n\", 5);\n  fputs_unlocked(v29, v28);\n  v30 = stdout;\n  v31 = dcgettext(0LL, \" * rprnt CHAR    CHAR will redraw the current line\\n\", 5);\n  fputs_unlocked(v31, v30);\n  v32 = stdout;\n  v33 = dcgettext(\n          0LL,\n          \"   start CHAR    CHAR will restart the output after stopping it\\n\"\n          \"   stop CHAR     CHAR will stop the output\\n\"\n          \"   susp CHAR     CHAR will send a terminal stop signal\\n\",\n          5);\n  fputs_unlocked(v33, v32);\n  v34 = stdout;\n  v35 = dcgettext(0LL, \" * swtch CHAR    CHAR will switch to a different shell layer\\n\", 5);\n  fputs_unlocked(v35, v34);\n  v36 = stdout;\n  v37 = dcgettext(0LL, \" * werase CHAR   CHAR will erase the last word typed\\n\", 5);\n  fputs_unlocked(v37, v36);\n  v38 = stdout;\n  v39 = dcgettext(0LL, \"\\nSpecial settings:\\n   N             set the input and output speeds to N bauds\\n\", 5);\n  fputs_unlocked(v39, v38);\n  v40 = stdout;\n  v41 = dcgettext(\n          0LL,\n          \" * cols N        tell the kernel that the terminal has N columns\\n * columns N     same as cols N\\n\",\n          5);\n  fputs_unlocked(v41, v40);\n  if ( optional_actions == 1 )\n    v42 = dcgettext(0LL, \"on\", 5);\n  else\n    v42 = dcgettext(0LL, \"off\", 5);\n  v43 = dcgettext(0LL, \" * [-]drain      wait for transmission before applying settings (%s by default)\\n\", 5);\n  __printf_chk(1LL, v43, v42);\n  v44 = stdout;\n  v45 = dcgettext(0LL, \"   ispeed N      set the input speed to N\\n\", 5);\n  fputs_unlocked(v45, v44);\n  v46 = stdout;\n  v47 = dcgettext(0LL, \" * line N        use line discipline N\\n\", 5);\n  fputs_unlocked(v47, v46);\n  v48 = stdout;\n  v49 = dcgettext(\n          0LL,\n          \"   min N         with -icanon, set N characters minimum for a completed read\\n\"\n          \"   ospeed N      set the output speed to N\\n\",\n          5);\n  fputs_unlocked(v49, v48);\n  v50 = stdout;\n  v51 = dcgettext(\n          0LL,\n          \" * rows N        tell the kernel that the terminal has N rows\\n\"\n          \" * size          print the number of rows and columns according to the kernel\\n\",\n          5);\n  fputs_unlocked(v51, v50);\n  v52 = stdout;\n  v53 = dcgettext(\n          0LL,\n          \"   speed         print the terminal speed\\n\"\n          \"   time N        with -icanon, set read timeout of N tenths of a second\\n\",\n          5);\n  fputs_unlocked(v53, v52);\n  v54 = stdout;\n  v55 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"Control settings:\\n\"\n          \"   [-]clocal     disable modem control signals\\n\"\n          \"   [-]cread      allow input to be received\\n\",\n          5);\n  fputs_unlocked(v55, v54);\n  v56 = stdout;\n  v57 = dcgettext(0LL, \" * [-]crtscts    enable RTS/CTS handshaking\\n\", 5);\n  fputs_unlocked(v57, v56);\n  v58 = stdout;\n  v59 = dcgettext(0LL, \"   csN           set character size to N bits, N in [5..8]\\n\", 5);\n  fputs_unlocked(v59, v58);\n  v60 = stdout;\n  v61 = dcgettext(\n          0LL,\n          \"   [-]cstopb     use two stop bits per character (one with '-')\\n\"\n          \"   [-]hup        send a hangup signal when the last process closes the tty\\n\"\n          \"   [-]hupcl      same as [-]hup\\n\"\n          \"   [-]parenb     generate parity bit in output and expect parity bit in input\\n\"\n          \"   [-]parodd     set odd parity (or even parity with '-')\\n\",\n          5);\n  fputs_unlocked(v61, v60);\n  v62 = stdout;\n  v63 = dcgettext(0LL, \" * [-]cmspar     use \\\"stick\\\" (mark/space) parity\\n\", 5);\n  fputs_unlocked(v63, v62);\n  v64 = stdout;\n  v65 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"Input settings:\\n\"\n          \"   [-]brkint     breaks cause an interrupt signal\\n\"\n          \"   [-]icrnl      translate carriage return to newline\\n\"\n          \"   [-]ignbrk     ignore break characters\\n\"\n          \"   [-]igncr      ignore carriage return\\n\"\n          \"   [-]ignpar     ignore characters with parity errors\\n\",\n          5);\n  fputs_unlocked(v65, v64);\n  v66 = stdout;\n  v67 = dcgettext(0LL, \" * [-]imaxbel    beep and do not flush a full input buffer on a character\\n\", 5);\n  fputs_unlocked(v67, v66);\n  v68 = stdout;\n  v69 = dcgettext(\n          0LL,\n          \"   [-]inlcr      translate newline to carriage return\\n\"\n          \"   [-]inpck      enable input parity checking\\n\"\n          \"   [-]istrip     clear high (8th) bit of input characters\\n\",\n          5);\n  fputs_unlocked(v69, v68);\n  v70 = stdout;\n  v71 = dcgettext(0LL, \" * [-]iutf8      assume input characters are UTF-8 encoded\\n\", 5);\n  fputs_unlocked(v71, v70);\n  v72 = stdout;\n  v73 = dcgettext(0LL, \" * [-]iuclc      translate uppercase characters to lowercase\\n\", 5);\n  fputs_unlocked(v73, v72);\n  v74 = stdout;\n  v75 = dcgettext(0LL, \" * [-]ixany      let any character restart output, not only start character\\n\", 5);\n  fputs_unlocked(v75, v74);\n  v76 = stdout;\n  v77 = dcgettext(\n          0LL,\n          \"   [-]ixoff      enable sending of start/stop characters\\n\"\n          \"   [-]ixon       enable XON/XOFF flow control\\n\"\n          \"   [-]parmrk     mark parity errors (with a 255-0-character sequence)\\n\"\n          \"   [-]tandem     same as [-]ixoff\\n\",\n          5);\n  fputs_unlocked(v77, v76);\n  v78 = stdout;\n  v79 = dcgettext(0LL, \"\\nOutput settings:\\n\", 5);\n  fputs_unlocked(v79, v78);\n  v80 = stdout;\n  v81 = dcgettext(0LL, \" * bsN           backspace delay style, N in [0..1]\\n\", 5);\n  fputs_unlocked(v81, v80);\n  v82 = stdout;\n  v83 = dcgettext(0LL, \" * crN           carriage return delay style, N in [0..3]\\n\", 5);\n  fputs_unlocked(v83, v82);\n  v84 = stdout;\n  v85 = dcgettext(0LL, \" * ffN           form feed delay style, N in [0..1]\\n\", 5);\n  fputs_unlocked(v85, v84);\n  v86 = stdout;\n  v87 = dcgettext(0LL, \" * nlN           newline delay style, N in [0..1]\\n\", 5);\n  fputs_unlocked(v87, v86);\n  v88 = stdout;\n  v89 = dcgettext(0LL, \" * [-]ocrnl      translate carriage return to newline\\n\", 5);\n  fputs_unlocked(v89, v88);\n  v90 = stdout;\n  v91 = dcgettext(0LL, \" * [-]ofdel      use delete characters for fill instead of NUL characters\\n\", 5);\n  fputs_unlocked(v91, v90);\n  v92 = stdout;\n  v93 = dcgettext(0LL, \" * [-]ofill      use fill (padding) characters instead of timing for delays\\n\", 5);\n  fputs_unlocked(v93, v92);\n  v94 = stdout;\n  v95 = dcgettext(0LL, \" * [-]olcuc      translate lowercase characters to uppercase\\n\", 5);\n  fputs_unlocked(v95, v94);\n  v96 = stdout;\n  v97 = dcgettext(0LL, \" * [-]onlcr      translate newline to carriage return-newline\\n\", 5);\n  fputs_unlocked(v97, v96);\n  v98 = stdout;\n  v99 = dcgettext(0LL, \" * [-]onlret     newline performs a carriage return\\n\", 5);\n  fputs_unlocked(v99, v98);\n  v100 = stdout;\n  v101 = dcgettext(0LL, \" * [-]onocr      do not print carriage returns in the first column\\n\", 5);\n  fputs_unlocked(v101, v100);\n  v102 = stdout;\n  v103 = dcgettext(0LL, \"   [-]opost      postprocess output\\n\", 5);\n  fputs_unlocked(v103, v102);\n  v104 = stdout;\n  v105 = dcgettext(\n           0LL,\n           \" * tabN          horizontal tab delay style, N in [0..3]\\n\"\n           \" * tabs          same as tab0\\n\"\n           \" * -tabs         same as tab3\\n\",\n           5);\n  fputs_unlocked(v105, v104);\n  v106 = stdout;\n  v107 = dcgettext(0LL, \" * vtN           vertical tab delay style, N in [0..1]\\n\", 5);\n  fputs_unlocked(v107, v106);\n  v108 = stdout;\n  v109 = dcgettext(0LL, \"\\nLocal settings:\\n   [-]crterase   echo erase characters as backspace-space-backspace\\n\", 5);\n  fputs_unlocked(v109, v108);\n  v110 = stdout;\n  v111 = dcgettext(\n           0LL,\n           \" * crtkill       kill all line by obeying the echoprt and echoe settings\\n\"\n           \" * -crtkill      kill all line by obeying the echoctl and echok settings\\n\",\n           5);\n  fputs_unlocked(v111, v110);\n  v112 = stdout;\n  v113 = dcgettext(0LL, \" * [-]ctlecho    echo control characters in hat notation ('^c')\\n\", 5);\n  fputs_unlocked(v113, v112);\n  v114 = stdout;\n  v115 = dcgettext(0LL, \"   [-]echo       echo input characters\\n\", 5);\n  fputs_unlocked(v115, v114);\n  v116 = stdout;\n  v117 = dcgettext(0LL, \" * [-]echoctl    same as [-]ctlecho\\n\", 5);\n  fputs_unlocked(v117, v116);\n  v118 = stdout;\n  v119 = dcgettext(\n           0LL,\n           \"   [-]echoe      same as [-]crterase\\n   [-]echok      echo a newline after a kill character\\n\",\n           5);\n  fputs_unlocked(v119, v118);\n  v120 = stdout;\n  v121 = dcgettext(0LL, \" * [-]echoke     same as [-]crtkill\\n\", 5);\n  fputs_unlocked(v121, v120);\n  v122 = stdout;\n  v123 = dcgettext(0LL, \"   [-]echonl     echo newline even if not echoing other characters\\n\", 5);\n  fputs_unlocked(v123, v122);\n  v124 = stdout;\n  v125 = dcgettext(0LL, \" * [-]echoprt    echo erased characters backward, between '\\\\' and '/'\\n\", 5);\n  fputs_unlocked(v125, v124);\n  v126 = stdout;\n  v127 = dcgettext(0LL, \" * [-]extproc    enable \\\"LINEMODE\\\"; useful with high latency links\\n\", 5);\n  fputs_unlocked(v127, v126);\n  v128 = stdout;\n  v129 = dcgettext(0LL, \" * [-]flusho     discard output\\n\", 5);\n  fputs_unlocked(v129, v128);\n  v130 = dcgettext(\n           0LL,\n           \"   [-]icanon     enable special characters: %s\\n   [-]iexten     enable non-POSIX special characters\\n\",\n           5);\n  __printf_chk(1LL, v130, \"erase, kill, werase, rprnt\");\n  v131 = stdout;\n  v132 = dcgettext(\n           0LL,\n           \"   [-]isig       enable interrupt, quit, and suspend special characters\\n\"\n           \"   [-]noflsh     disable flushing after interrupt and quit special characters\\n\",\n           5);\n  fputs_unlocked(v132, v131);\n  v133 = stdout;\n  v134 = dcgettext(0LL, \" * [-]prterase   same as [-]echoprt\\n\", 5);\n  fputs_unlocked(v134, v133);\n  v135 = stdout;\n  v136 = dcgettext(0LL, \" * [-]tostop     stop background jobs that try to write to the terminal\\n\", 5);\n  fputs_unlocked(v136, v135);\n  v137 = stdout;\n  v138 = dcgettext(0LL, \" * [-]xcase      with icanon, escape with '\\\\' for uppercase characters\\n\", 5);\n  fputs_unlocked(v138, v137);\n  v139 = stdout;\n  v140 = dcgettext(0LL, \"\\nCombination settings:\\n\", 5);\n  fputs_unlocked(v140, v139);\n  v141 = stdout;\n  v142 = dcgettext(0LL, \" * [-]LCASE      same as [-]lcase\\n\", 5);\n  fputs_unlocked(v142, v141);\n  v143 = stdout;\n  v144 = dcgettext(0LL, \"   cbreak        same as -icanon\\n   -cbreak       same as icanon\\n\", 5);\n  fputs_unlocked(v144, v143);\n  v145 = stdout;\n  v146 = dcgettext(\n           0LL,\n           \"   cooked        same as brkint ignpar istrip icrnl ixon opost isig\\n\"\n           \"                 icanon, eof and eol characters to their default values\\n\"\n           \"   -cooked       same as raw\\n\",\n           5);\n  fputs_unlocked(v146, v145);\n  v147 = dcgettext(0LL, \"   crt           same as %s\\n\", 5);\n  __printf_chk(1LL, v147, \"echoe echoctl echoke\");\n  v148 = dcgettext(0LL, \"   dec           same as %s intr ^c erase 0177\\n                 kill ^u\\n\", 5);\n  __printf_chk(1LL, v148, \"echoe echoctl echoke -ixany\");\n  v149 = stdout;\n  v150 = dcgettext(0LL, \" * [-]decctlq    same as [-]ixany\\n\", 5);\n  fputs_unlocked(v150, v149);\n  v151 = stdout;\n  v152 = dcgettext(\n           0LL,\n           \"   ek            erase and kill characters to their default values\\n\"\n           \"   evenp         same as parenb -parodd cs7\\n\"\n           \"   -evenp        same as -parenb cs8\\n\",\n           5);\n  fputs_unlocked(v152, v151);\n  v153 = stdout;\n  v154 = dcgettext(0LL, \" * [-]lcase      same as xcase iuclc olcuc\\n\", 5);\n  fputs_unlocked(v154, v153);\n  v155 = stdout;\n  v156 = dcgettext(\n           0LL,\n           \"   litout        same as -parenb -istrip -opost cs8\\n   -litout       same as parenb istrip opost cs7\\n\",\n           5);\n  fputs_unlocked(v156, v155);\n  v157 = dcgettext(0LL, \"   nl            same as %s\\n   -nl           same as %s\\n\", 5);\n  __printf_chk(1LL, v157, \"-icrnl -onlcr\", \"icrnl -inlcr -igncr onlcr -ocrnl -onlret\");\n  v158 = stdout;\n  v159 = dcgettext(\n           0LL,\n           \"   oddp          same as parenb parodd cs7\\n\"\n           \"   -oddp         same as -parenb cs8\\n\"\n           \"   [-]parity     same as [-]evenp\\n\"\n           \"   pass8         same as -parenb -istrip cs8\\n\"\n           \"   -pass8        same as parenb istrip cs7\\n\",\n           5);\n  fputs_unlocked(v159, v158);\n  v160 = dcgettext(\n           0LL,\n           \"   raw           same as -ignbrk -brkint -ignpar -parmrk -inpck -istrip\\n\"\n           \"                 -inlcr -igncr -icrnl -ixon -ixoff -icanon -opost\\n\"\n           \"                 -isig%s min 1 time 0\\n\"\n           \"   -raw          same as cooked\\n\",\n           5);\n  __printf_chk(1LL, v160, \" -iuclc -ixany -imaxbel -xcase\");\n  v161 = dcgettext(\n           0LL,\n           \"   sane          same as cread -ignbrk brkint -inlcr -igncr icrnl\\n\"\n           \"                 icanon iexten echo echoe echok -echonl -noflsh\\n\"\n           \"                 %s\\n\"\n           \"                 %s\\n\"\n           \"                 %s,\\n\"\n           \"                 all special characters to their default values\\n\",\n           5);\n  __printf_chk(\n    1LL,\n    v161,\n    \"-ixoff -iutf8 -iuclc -ixany imaxbel -xcase -olcuc -ocrnl\",\n    \"opost -ofill onlcr -onocr -onlret nl0 cr0 tab0 bs0 vt0 ff0\",\n    \"isig -tostop -ofdel -echoprt echoctl echoke -extproc -flusho\");\n  v162 = stdout;\n  v163 = dcgettext(\n           0LL,\n           \"\\n\"\n           \"Handle the tty line connected to standard input.  Without arguments,\\n\"\n           \"prints baud rate, line discipline, and deviations from stty sane.  In\\n\"\n           \"settings, CHAR is taken literally, or coded as in ^c, 0x37, 0177 or\\n\"\n           \"127; special values ^- or undef used to disable special characters.\\n\",\n           5);\n  fputs_unlocked(v163, v162);\n  v175[0] = (__int64)\"[\";\n  v164 = v175;\n  v175[1] = (__int64)\"test invocation\";\n  v175[2] = (__int64)\"coreutils\";\n  v175[3] = (__int64)\"Multi-call invocation\";\n  v175[4] = (__int64)\"sha224sum\";\n  v175[5] = (__int64)\"sha2 utilities\";\n  v175[6] = (__int64)\"sha256sum\";\n  v175[7] = (__int64)\"sha2 utilities\";\n  v175[8] = (__int64)\"sha384sum\";\n  v175[9] = (__int64)\"sha2 utilities\";\n  v175[10] = (__int64)\"sha512sum\";\n  v175[11] = (__int64)\"sha2 utilities\";\n  v175[12] = 0LL;\n  v175[13] = 0LL;\n  do\n    v164 += 2;\n  while ( *v164 && strcmp(\"stty\", (const char *)*v164) );\n  v165 = (char *)v164[1];\n  if ( v165 )\n  {\n    v166 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v166, &unk_40BF30, \"https://www.gnu.org/software/coreutils/\");\n    v167 = setlocale(5, 0LL);\n    if ( !v167 || !strncmp(v167, \"en_\", 3uLL) )\n      goto LABEL_12;\n  }\n  else\n  {\n    v172 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v172, &unk_40BF30, \"https://www.gnu.org/software/coreutils/\");\n    v173 = setlocale(5, 0LL);\n    if ( !v173 || !strncmp(v173, \"en_\", 3uLL) )\n    {\n      v165 = \"stty\";\n      v174 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n      v168 = \"Multi-call invocation\" + 10;\n      __printf_chk(1LL, v174, \"https://www.gnu.org/software/coreutils/\", \"stty\");\nLABEL_14:\n      v170 = dcgettext(0LL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5);\n      __printf_chk(1LL, v170, v165, v168);\nLABEL_3:\n      exit(status);\n    }\n    v165 = \"stty\";\n  }\n  v171 = dcgettext(0LL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5);\n  __printf_chk(1LL, v171, \"stty\");\nLABEL_12:\n  v168 = \"Multi-call invocation\" + 10;\n  v169 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n  __printf_chk(1LL, v169, \"https://www.gnu.org/software/coreutils/\", \"stty\");\n  if ( v165 != \"stty\" )\n    v168 = \"\";\n  goto LABEL_14;\n}\n"
        },
        {
            "funcName": "sub_403BD0",
            "funcStartAddr": "0x403bd0",
            "funcEndAddr": "0x404913",
            "decompiledFuncCode": "void __fastcall sub_403BD0(char a1, __int64 a2, __int64 a3, int a4, __int64 a5, _BYTE *a6, _BYTE *a7)\n{\n  int v7; // ebp\n  _BYTE *v8; // rbx\n  char v9; // r13\n  __int64 v10; // r15\n  const char *v11; // r14\n  char v12; // al\n  char *v13; // rdi\n  speed_t v14; // eax\n  char **v15; // r14\n  int v16; // r12d\n  const char *v17; // r13\n  char *v18; // r15\n  char **v19; // rbx\n  char v20; // r13\n  char v21; // r12\n  char *v22; // rdi\n  speed_t v23; // eax\n  struct termios *v24; // rdi\n  speed_t v25; // esi\n  _DWORD *v26; // rax\n  __int64 v27; // rdi\n  int v28; // eax\n  _DWORD *v29; // rax\n  __int64 v30; // rdi\n  int v31; // eax\n  unsigned int v32; // edx\n  char v33; // r14\n  _QWORD *v34; // r12\n  __int64 v35; // rax\n  __int64 v36; // rbx\n  char *v37; // rax\n  const char *v38; // rsi\n  __int64 v39; // rbx\n  int v40; // eax\n  speed_t v41; // eax\n  speed_t v42; // r12d\n  int v43; // eax\n  char *v44; // rax\n  _DWORD *v45; // rcx\n  int v46; // edx\n  unsigned int v47; // eax\n  unsigned int v48; // edx\n  char **i; // rax\n  char **j; // rbx\n  _DWORD *v51; // rax\n  char v52; // al\n  _DWORD *v53; // rax\n  char *v54; // r12\n  __int64 v55; // r13\n  int *v56; // r14\n  unsigned __int64 v57; // rax\n  char *v58; // rdx\n  __int64 v59; // r13\n  char v60; // r15\n  unsigned __int64 v61; // rax\n  unsigned __int64 v62; // rcx\n  unsigned int v63; // eax\n  int v64; // eax\n  int v65; // eax\n  __int64 v66; // rdx\n  int v67; // eax\n  __int64 v69; // [rsp+8h] [rbp-80h]\n  char *endptr; // [rsp+38h] [rbp-50h] BYREF\n  __int64 v76[9]; // [rsp+40h] [rbp-48h]\n\n  if ( a4 > 1 )\n  {\n    v7 = 1;\n    while ( 1 )\n    {\nLABEL_5:\n      v69 = 8LL * v7;\n      v8 = *(_BYTE **)(a3 + v69);\n      if ( !v8 )\n        goto LABEL_4;\n      v9 = 0;\n      if ( *v8 == 45 )\n      {\n        ++v8;\n        v9 = 1;\n      }\n      if ( !memcmp(v8, \"drain\", 6uLL) )\n      {\n        optional_actions = (unsigned __int8)v9 ^ 1;\n        goto LABEL_4;\n      }\n      v10 = 0LL;\n      v11 = \"parenb\";\n      while ( strcmp(v8, v11) )\n      {\n        ++v10;\n        v11 = (&off_40C9C0)[4 * v10];\n        if ( !v11 )\n        {\n          if ( v9 )\n            goto LABEL_76;\n          v15 = &off_40C7F8;\n          v16 = 0;\n          v17 = \"intr\";\n          while ( strcmp(v8, v17) )\n          {\n            v15 += 3;\n            v17 = *(v15 - 3);\n            ++v16;\n            if ( !v17 )\n              goto LABEL_13;\n          }\n          if ( a4 - 1 == v7 )\n            goto LABEL_100;\n          v18 = *(char **)(a3 + v69 + 8);\n          if ( !v18 )\n            goto LABEL_100;\n          ++v7;\n          v19 = &(&off_40C7E0)[3 * v16];\n          if ( !strcmp(v17, \"min\") || !strcmp(v17, \"time\") )\n            goto LABEL_46;\n          v20 = *v18;\n          if ( !*v18 || (v33 = v18[1]) == 0 )\n          {\n            v21 = *v18;\n            goto LABEL_29;\n          }\n          v21 = 0;\n          if ( strcmp(*(const char **)(a3 + v69 + 8), \"^-\") && strcmp(v18, \"undef\") )\n          {\n            if ( v20 == 94 )\n            {\n              if ( v33 == 63 )\n                v21 = 127;\n              else\n                v21 = v33 & 0x9F;\n              goto LABEL_29;\n            }\nLABEL_46:\n            v21 = sub_402AB0((int)v18, 255);\n          }\nLABEL_29:\n          v19[2][a5 + 17] = v21;\n          *a7 = 1;\nLABEL_4:\n          if ( a4 <= ++v7 )\n            return;\n          goto LABEL_5;\n        }\n      }\n      v12 = dword_40C9C8[8 * (int)v10 + 1];\n      if ( (v12 & 0x10) == 0 )\n        break;\nLABEL_13:\n      if ( strcmp(v8, \"ispeed\") )\n      {\n        if ( !strcmp(v8, \"ospeed\") )\n        {\n          if ( a4 - 1 != v7 )\n          {\n            v22 = *(char **)(a3 + v69 + 8);\n            if ( v22 )\n            {\n              ++v7;\n              if ( a1 )\n                goto LABEL_4;\n              v23 = sub_402680(v22);\n              v24 = (struct termios *)a5;\n              v25 = v23;\n              goto LABEL_35;\n            }\n          }\nLABEL_100:\n          v38 = \"missing argument to %s\";\n          v39 = sub_406670(v8);\nLABEL_101:\n          v44 = dcgettext(0LL, v38, 5);\n          error(0, 0, v44, v39);\n          sub_402D90(1);\n        }\n        if ( !strcmp(v8, \"rows\") )\n        {\n          if ( a4 - 1 != v7 )\n          {\n            v27 = *(_QWORD *)(a3 + v69 + 8);\n            if ( v27 )\n            {\n              ++v7;\n              if ( !a1 )\n              {\n                v28 = sub_402AB0(v27, 0x7FFFFFFF);\n                sub_402BD0(v28, -1, a2);\n              }\n              goto LABEL_4;\n            }\n          }\n          goto LABEL_100;\n        }\n        if ( !strcmp(v8, \"cols\") || !strcmp(v8, \"columns\") )\n        {\n          if ( a4 - 1 != v7 )\n          {\n            v30 = *(_QWORD *)(a3 + v69 + 8);\n            if ( v30 )\n            {\n              ++v7;\n              if ( !a1 )\n              {\n                v31 = sub_402AB0(v30, 0x7FFFFFFF);\n                sub_402BD0(-1, v31, a2);\n              }\n              goto LABEL_4;\n            }\n          }\n          goto LABEL_100;\n        }\n        if ( !strcmp(v8, \"size\") )\n        {\n          if ( !a1 )\n          {\n            v40 = sub_4026E0();\n            dword_6133DC = 0;\n            dword_6133E0 = v40;\n            sub_402CA0(0, a2);\n          }\n          goto LABEL_4;\n        }\n        if ( !strcmp(v8, \"line\") )\n        {\n          if ( a4 - 1 == v7 )\n            goto LABEL_100;\n          v34 = (_QWORD *)(a3 + v69 + 8);\n          if ( !*v34 )\n            goto LABEL_100;\n          ++v7;\n          v35 = sub_402AB0(*v34, -1);\n          *(_BYTE *)(a5 + 16) = v35;\n          if ( (v35 & 0xFFFFFFFFFFFFFF00LL) != 0 )\n          {\n            v36 = sub_406670(*v34);\n            v37 = dcgettext(0LL, \"invalid line discipline %s\", 5);\n            error(0, 0, v37, v36);\n          }\n        }\n        else\n        {\n          if ( !strcmp(v8, \"speed\") )\n          {\n            if ( !a1 )\n            {\n              dword_6133E0 = sub_4026E0();\n              sub_402930((struct termios *)a5, 0);\n            }\n            goto LABEL_4;\n          }\n          v41 = sub_402680(v8);\n          v42 = v41;\n          if ( v41 == -1 )\n          {\n            v54 = v8;\n            v55 = 0LL;\n            v56 = __errno_location();\n            do\n            {\n              *v56 = 0;\n              v57 = strtoul(v54, &endptr, 16);\n              if ( *v56 )\n                goto LABEL_135;\n              v58 = endptr;\n              if ( *endptr != 58 || endptr == v54 || v57 != (unsigned int)v57 )\n                goto LABEL_135;\n              *((_DWORD *)v76 + v55++) = v57;\n              v54 = v58 + 1;\n            }\n            while ( v55 != 4 );\n            v59 = 0LL;\n            v60 = 58;\n            *(_QWORD *)a5 = v76[0];\n            *(_QWORD *)(a5 + 8) = v76[1];\n            while ( 1 )\n            {\n              *v56 = 0;\n              v61 = strtoul(v54, &endptr, 16);\n              if ( *v56 )\n                break;\n              if ( *endptr != v60 )\n                break;\n              v60 = v54 == endptr;\n              if ( v54 == endptr || (v61 & 0xFFFFFFFFFFFFFF00LL) != 0 )\n                break;\n              v54 = endptr + 1;\n              *(_BYTE *)(a5 + v59++ + 17) = v61;\n              if ( v59 == 32 )\n                goto LABEL_36;\n              if ( v59 != 31 )\n                v60 = 58;\n            }\nLABEL_135:\n            v38 = \"invalid argument %s\";\n            v39 = sub_406670(v8);\n            goto LABEL_101;\n          }\n          if ( a1 )\n            goto LABEL_4;\n          cfsetispeed((struct termios *)a5, v41);\n          v25 = v42;\n          v24 = (struct termios *)a5;\nLABEL_35:\n          cfsetospeed(v24, v25);\n          *a6 = 1;\n        }\nLABEL_36:\n        *a7 = 1;\n        goto LABEL_4;\n      }\n      if ( a4 - 1 == v7 )\n        goto LABEL_100;\n      v13 = *(char **)(a3 + v69 + 8);\n      if ( !v13 )\n        goto LABEL_100;\n      ++v7;\n      if ( a1 )\n        goto LABEL_4;\n      v14 = sub_402680(v13);\n      ++v7;\n      cfsetispeed((struct termios *)a5, v14);\n      *a6 = 1;\n      *a7 = 1;\n      if ( a4 <= v7 )\n        return;\n    }\n    if ( v9 )\n    {\n      if ( (v12 & 4) == 0 )\n      {\n        *a7 = 1;\nLABEL_76:\n        v38 = \"invalid argument %s\";\n        v39 = sub_406670(v8 - 1);\n        goto LABEL_101;\n      }\n      v26 = (_DWORD *)sub_402750(dword_40C9C8[8 * (int)v10], a5);\n      if ( v26 )\n      {\n        *v26 &= ~(dword_40C9C8[8 * (int)v10 + 4] | *(_QWORD *)&dword_40C9C8[8 * (int)v10 + 2]);\n        *a7 = 1;\n        goto LABEL_4;\n      }\n      if ( !strcmp(v11, \"evenp\") || !strcmp(v11, \"parity\") || !strcmp(v11, \"oddp\") )\n      {\n        *(_DWORD *)(a5 + 8) = *(_DWORD *)(a5 + 8) & 0xFFFFFECF | 0x30;\n        goto LABEL_36;\n      }\n    }\n    else\n    {\n      v29 = (_DWORD *)sub_402750(dword_40C9C8[8 * (int)v10], a5);\n      if ( v29 )\n      {\n        *v29 = dword_40C9C8[8 * (int)v10 + 2] | *v29 & ~dword_40C9C8[8 * (int)v10 + 4];\n        *a7 = 1;\n        goto LABEL_4;\n      }\n      if ( !strcmp(v11, \"evenp\") || !strcmp(v11, \"parity\") )\n      {\n        *(_DWORD *)(a5 + 8) = *(_DWORD *)(a5 + 8) & 0xFFFFFCCF | 0x120;\n        *a7 = 1;\n        goto LABEL_4;\n      }\n      if ( !strcmp(v11, \"oddp\") )\n      {\n        *(_DWORD *)(a5 + 8) = *(_DWORD *)(a5 + 8) & 0xFFFFFCCF | 0x320;\n        goto LABEL_36;\n      }\n    }\n    if ( !strcmp(v11, \"nl\") )\n    {\n      if ( v9 )\n      {\n        v32 = *(_DWORD *)a5 & 0xFFFFFE3F;\n        BYTE1(v32) |= 1u;\n        *(_DWORD *)(a5 + 4) = *(_DWORD *)(a5 + 4) & 0xFFFFFFD3 | 4;\n        *(_DWORD *)a5 = v32;\n      }\n      else\n      {\n        *(_QWORD *)a5 &= 0xFFFFFFFBFFFFFEFFLL;\n      }\n      *a7 = 1;\n      goto LABEL_4;\n    }\n    if ( !strcmp(v11, \"ek\") )\n    {\n      *(_WORD *)(a5 + 19) = 5503;\n      *a7 = 1;\n      goto LABEL_4;\n    }\n    if ( !strcmp(v11, \"sane\") )\n    {\n      for ( i = &off_40C7E0; ; (*(i - 1))[a5 + 17] = *((_BYTE *)i - 16) )\n      {\n        i += 3;\n        if ( !*(i - 3) )\n          break;\n      }\n      for ( j = &off_40C9C0; *j; j += 4 )\n      {\n        v52 = *((_BYTE *)j + 12);\n        if ( (v52 & 0x10) == 0 )\n        {\n          if ( (v52 & 1) != 0 )\n          {\n            v51 = (_DWORD *)sub_402750(*((_DWORD *)j + 2), a5);\n            if ( !v51 )\n              __assert_fail(\"bitsp\", \"src/stty.c\", 0x8CBu, \"sane_mode\");\n            *v51 = *((_DWORD *)j + 4) | *v51 & ~*((_DWORD *)j + 6);\n          }\n          else if ( (v52 & 2) != 0 )\n          {\n            v53 = (_DWORD *)sub_402750(*((_DWORD *)j + 2), a5);\n            if ( !v53 )\n              __assert_fail(\"bitsp\", \"src/stty.c\", 0x8D1u, \"sane_mode\");\n            *v53 &= ~(*((_DWORD *)j + 6) | (unsigned int)j[2]);\n          }\n        }\n      }\n      goto LABEL_36;\n    }\n    if ( !strcmp(v11, \"cbreak\") )\n    {\n      v43 = *(_DWORD *)(a5 + 12);\n      if ( v9 )\n        *(_DWORD *)(a5 + 12) = v43 | 2;\n      else\n        *(_DWORD *)(a5 + 12) = v43 & 0xFFFFFFFD;\n      *a7 = 1;\n      goto LABEL_4;\n    }\n    if ( !strcmp(v11, \"pass8\") )\n    {\n      v45 = (_DWORD *)a5;\n      v46 = *(_DWORD *)a5;\n      v47 = *(_DWORD *)(a5 + 8) & 0xFFFFFECF;\n      if ( v9 )\n      {\n        v48 = v46 | 0x20;\n        *(_DWORD *)(a5 + 8) = v47 | 0x120;\n      }\n      else\n      {\n        v45 = (_DWORD *)a5;\n        v48 = v46 & 0xFFFFFFDF;\n        *(_DWORD *)(a5 + 8) = v47 | 0x30;\n      }\n      *v45 = v48;\n      *a7 = 1;\n      goto LABEL_4;\n    }\n    if ( !strcmp(v11, \"litout\") )\n    {\n      v62 = *(_QWORD *)a5 & 0xFFFFFFFEFFFFFFDFLL;\n      v63 = *(_DWORD *)(a5 + 8) & 0xFFFFFECF;\n      if ( v9 )\n      {\n        *(_QWORD *)a5 |= 0x100000020uLL;\n        *(_DWORD *)(a5 + 8) = v63 | 0x120;\n      }\n      else\n      {\n        *(_DWORD *)(a5 + 8) = v63 | 0x30;\n        *(_QWORD *)a5 = v62;\n      }\n      *a7 = 1;\n      goto LABEL_4;\n    }\n    if ( strcmp(v11, \"raw\") && strcmp(v11, \"cooked\") )\n    {\n      if ( !strcmp(v11, \"decctlq\") )\n      {\n        v64 = *(_DWORD *)a5;\n        if ( v9 )\n          BYTE1(v64) |= 8u;\n        else\n          BYTE1(v64) &= ~8u;\n        *(_DWORD *)a5 = v64;\n        *a7 = 1;\n        goto LABEL_4;\n      }\n      if ( !strcmp(v11, \"tabs\") )\n      {\n        v65 = *(_DWORD *)(a5 + 4);\n        if ( v9 )\n          BYTE1(v65) |= 0x18u;\n        else\n          BYTE1(v65) &= 0xE7u;\n        *(_DWORD *)(a5 + 4) = v65;\n        *a7 = 1;\n        goto LABEL_4;\n      }\n      if ( !strcmp(v11, \"lcase\") || !strcmp(v11, \"LCASE\") )\n      {\n        v66 = *(_QWORD *)a5 | 0x200000200LL;\n        v67 = *(_DWORD *)(a5 + 12);\n        if ( v9 )\n        {\n          *(_QWORD *)a5 &= 0xFFFFFFFDFFFFFDFFLL;\n          *(_DWORD *)(a5 + 12) = v67 & 0xFFFFFFFB;\n        }\n        else\n        {\n          *(_DWORD *)(a5 + 12) = v67 | 4;\n          *(_QWORD *)a5 = v66;\n        }\n        *a7 = 1;\n        goto LABEL_4;\n      }\n      if ( !strcmp(v11, \"crt\") )\n      {\n        *(_DWORD *)(a5 + 12) |= 0xA10u;\n        *a7 = 1;\n        goto LABEL_4;\n      }\n      if ( !strcmp(v11, \"dec\") )\n      {\n        *(_DWORD *)a5 &= ~0x800u;\n        *(_BYTE *)(a5 + 17) = 3;\n        *(_WORD *)(a5 + 19) = 5503;\n        *(_DWORD *)(a5 + 12) |= 0xA10u;\n        *a7 = 1;\n        goto LABEL_4;\n      }\n      goto LABEL_36;\n    }\n    if ( *v11 == 114 )\n    {\n      if ( !v9 )\n      {\nLABEL_152:\n        *(_DWORD *)a5 = 0;\n        *(_DWORD *)(a5 + 4) &= ~1u;\n        *(_DWORD *)(a5 + 12) &= 0xFFFFFFF8;\n        *(_WORD *)(a5 + 22) = 256;\n        *a7 = 1;\n        goto LABEL_4;\n      }\n    }\n    else if ( *v11 != 99 || v9 )\n    {\n      goto LABEL_152;\n    }\n    *(_DWORD *)(a5 + 12) |= 3u;\n    *(_QWORD *)a5 |= 0x100000526uLL;\n    *a7 = 1;\n    goto LABEL_4;\n  }\n}\n"
        },
        {
            "funcName": "sub_404940",
            "funcStartAddr": "0x404940",
            "funcEndAddr": "0x4049de",
            "decompiledFuncCode": "__int64 sub_404940()\n{\n  int *v0; // rax\n  int *v1; // rbx\n  __int64 result; // rax\n  char *v3; // rax\n  const char *v4; // rbp\n  const char *v5; // rax\n\n  if ( (unsigned int)sub_408B40(stdout) )\n  {\n    v0 = __errno_location();\n    v1 = v0;\n    if ( !byte_6133E8 || *v0 != 32 )\n    {\n      v3 = dcgettext(0LL, \"write error\", 5);\n      v4 = v3;\n      if ( qword_6133F0 )\n      {\n        v5 = (const char *)sub_4064C0();\n        error(0, *v1, \"%s: %s\", v5, v4);\n      }\n      else\n      {\n        error(0, *v1, \"%s\", v3);\n      }\nLABEL_8:\n      _exit(status);\n    }\n  }\n  result = sub_408B40(stderr);\n  if ( (_DWORD)result )\n    goto LABEL_8;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4049E0",
            "funcStartAddr": "0x4049e0",
            "funcEndAddr": "0x404a4a",
            "decompiledFuncCode": "__int64 __fastcall sub_4049E0(int fd2, char *file, int oflag, unsigned int a4)\n{\n  __int64 result; // rax\n  int v5; // ebx\n  unsigned int v6; // r12d\n  int *v7; // rax\n  int v8; // r13d\n  int *v9; // rbp\n\n  LODWORD(result) = open(file, oflag, a4);\n  v5 = result;\n  if ( fd2 == (_DWORD)result || (int)result < 0 )\n    return (unsigned int)result;\n  v6 = dup2(result, fd2);\n  v7 = __errno_location();\n  v8 = *v7;\n  v9 = v7;\n  close(v5);\n  result = v6;\n  *v9 = v8;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_404A50",
            "funcStartAddr": "0x404a50",
            "funcEndAddr": "0x404ae9",
            "decompiledFuncCode": "char *__fastcall sub_404A50(const char *a1)\n{\n  __int64 v1; // rbx\n  char *result; // rax\n\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v1 = (__int64)a1;\n  result = strrchr(a1, 47);\n  if ( result )\n  {\n    if ( result + 1 - a1 > 6 && !memcmp(result - 6, \"/.libs/\", 7uLL) )\n    {\n      v1 = (__int64)(result + 1);\n      if ( !memcmp(result + 1, \"lt-\", 3uLL) )\n      {\n        v1 = (__int64)(result + 4);\n        program_invocation_short_name = (__int64)(result + 4);\n      }\n    }\n  }\n  qword_6133F8 = v1;\n  program_invocation_name = v1;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_404AF0",
            "funcStartAddr": "0x404af0",
            "funcEndAddr": "0x404be2",
            "decompiledFuncCode": "char *__fastcall sub_404AF0(char *msgid, int a2)\n{\n  char *v2; // rbx\n  _BYTE *v4; // rax\n  bool v5; // zf\n  const char *v6; // rbx\n\n  v2 = dcgettext(0LL, msgid, 5);\n  if ( msgid != v2 )\n    return v2;\n  v4 = (_BYTE *)sub_408C00();\n  if ( (*v4 & 0xDF) == 85 )\n  {\n    if ( (v4[1] & 0xDF) == 84 && (v4[2] & 0xDF) == 70 && v4[3] == 45 && v4[4] == 56 && !v4[5] )\n    {\n      v5 = *v2 == 96;\n      v2 = (char *)&unk_40F771;\n      if ( !v5 )\n        return (char *)&unk_40F766;\n      return v2;\n    }\n  }\n  else if ( (*v4 & 0xDF) == 71\n         && (v4[1] & 0xDF) == 66\n         && v4[2] == 49\n         && v4[3] == 56\n         && v4[4] == 48\n         && v4[5] == 51\n         && v4[6] == 48\n         && !v4[7] )\n  {\n    v5 = *v2 == 96;\n    v2 = (char *)&unk_40F76D;\n    if ( !v5 )\n      return (char *)&unk_40F76A;\n    return v2;\n  }\n  v6 = \"\\\"\";\n  if ( a2 != 9 )\n    return \"'\";\n  return (char *)v6;\n}\n"
        },
        {
            "funcName": "sub_404BF0",
            "funcStartAddr": "0x401a75",
            "funcEndAddr": "0x401a7a",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_404BF0(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_404BF0((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_404BF0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_408A60((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_404BF0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_404AF0(\"`\", a5);\n        v51 = sub_404AF0(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n\nunsigned __int64 __fastcall sub_404BF0(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_404BF0((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_404BF0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_408A60((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_404BF0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_404AF0(\"`\", a5);\n        v51 = sub_404AF0(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n"
        },
        {
            "funcName": "sub_404BF0",
            "funcStartAddr": "0x401a75",
            "funcEndAddr": "0x401a7a",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_404BF0(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_404BF0((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_404BF0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_408A60((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_404BF0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_404AF0(\"`\", a5);\n        v51 = sub_404AF0(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n\nunsigned __int64 __fastcall sub_404BF0(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_404BF0((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_404BF0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_408A60((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_404BF0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_404AF0(\"`\", a5);\n        v51 = sub_404AF0(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n"
        },
        {
            "funcName": "sub_405E20",
            "funcStartAddr": "0x401a7a",
            "funcEndAddr": "0x401a7f",
            "decompiledFuncCode": "_BYTE *__fastcall sub_405E20(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)ptr;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_6132B0 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_406E80();\n    v9 = 16LL * (a1 + 1);\n    if ( ptr == &xmmword_6132A0 )\n    {\n      v7 = (__m128i *)sub_406C90(0LL, v9);\n      ptr = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_6132A0);\n    }\n    else\n    {\n      ptr = (void *)sub_406C90(ptr, v9);\n      v7 = (__m128i *)ptr;\n    }\n    memset(&v7[dword_6132B0], 0, 16LL * (a1 + 1 - dword_6132B0));\n    dword_6132B0 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_404BF0(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_613400 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_406C30(v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_404BF0(v14, v13, a2, a3, v15, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n\n_BYTE *__fastcall sub_405E20(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)ptr;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_6132B0 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_406E80();\n    v9 = 16LL * (a1 + 1);\n    if ( ptr == &xmmword_6132A0 )\n    {\n      v7 = (__m128i *)sub_406C90(0LL, v9);\n      ptr = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_6132A0);\n    }\n    else\n    {\n      ptr = (void *)sub_406C90(ptr, v9);\n      v7 = (__m128i *)ptr;\n    }\n    memset(&v7[dword_6132B0], 0, 16LL * (a1 + 1 - dword_6132B0));\n    dword_6132B0 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_404BF0(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_613400 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_406C30(v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_404BF0(v14, v13, a2, a3, v15, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n"
        },
        {
            "funcName": "sub_405E20",
            "funcStartAddr": "0x401a7a",
            "funcEndAddr": "0x401a7f",
            "decompiledFuncCode": "_BYTE *__fastcall sub_405E20(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)ptr;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_6132B0 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_406E80();\n    v9 = 16LL * (a1 + 1);\n    if ( ptr == &xmmword_6132A0 )\n    {\n      v7 = (__m128i *)sub_406C90(0LL, v9);\n      ptr = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_6132A0);\n    }\n    else\n    {\n      ptr = (void *)sub_406C90(ptr, v9);\n      v7 = (__m128i *)ptr;\n    }\n    memset(&v7[dword_6132B0], 0, 16LL * (a1 + 1 - dword_6132B0));\n    dword_6132B0 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_404BF0(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_613400 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_406C30(v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_404BF0(v14, v13, a2, a3, v15, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n\n_BYTE *__fastcall sub_405E20(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)ptr;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_6132B0 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_406E80();\n    v9 = 16LL * (a1 + 1);\n    if ( ptr == &xmmword_6132A0 )\n    {\n      v7 = (__m128i *)sub_406C90(0LL, v9);\n      ptr = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_6132A0);\n    }\n    else\n    {\n      ptr = (void *)sub_406C90(ptr, v9);\n      v7 = (__m128i *)ptr;\n    }\n    memset(&v7[dword_6132B0], 0, 16LL * (a1 + 1 - dword_6132B0));\n    dword_6132B0 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_404BF0(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_613400 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_406C30(v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_404BF0(v14, v13, a2, a3, v15, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n"
        },
        {
            "funcName": "sub_405FC0",
            "funcStartAddr": "0x405fc0",
            "funcEndAddr": "0x405ff4",
            "decompiledFuncCode": "__int64 __fastcall sub_405FC0(__int128 *a1)\n{\n  __int128 *v1; // rbx\n  int *v2; // rax\n  int v3; // r12d\n  int *v4; // rbp\n  __int64 result; // rax\n\n  v1 = a1;\n  v2 = __errno_location();\n  v3 = *v2;\n  v4 = v2;\n  if ( !a1 )\n    v1 = &xmmword_613500;\n  result = sub_406E30(v1, 0x38uLL);\n  *v4 = v3;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4060B0",
            "funcStartAddr": "0x4060b0",
            "funcEndAddr": "0x406122",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_4060B0(_BYTE *a1, unsigned __int64 a2, __int64 a3, unsigned __int64 a4, __int128 *a5)\n{\n  __int128 *v6; // rbx\n  int *v7; // rax\n  int v8; // r12d\n  int *v9; // rbp\n  unsigned __int64 result; // rax\n\n  v6 = a5;\n  if ( !a5 )\n    v6 = &xmmword_613500;\n  v7 = __errno_location();\n  v8 = *v7;\n  v9 = v7;\n  result = sub_404BF0(\n             a1,\n             a2,\n             a3,\n             a4,\n             *(_DWORD *)v6,\n             *((_DWORD *)v6 + 1),\n             (__int64)v6 + 8,\n             *((char **)v6 + 5),\n             *((char **)v6 + 6));\n  *v9 = v8;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_406130",
            "funcStartAddr": "0x406130",
            "funcEndAddr": "0x406211",
            "decompiledFuncCode": "_BYTE *__fastcall sub_406130(__int64 a1, unsigned __int64 a2, unsigned __int64 *a3, __int128 *a4)\n{\n  __int128 *v5; // rbx\n  int *v6; // r13\n  int v7; // ebp\n  int v9; // [rsp+Ch] [rbp-5Ch]\n  _BYTE *v10; // [rsp+10h] [rbp-58h]\n  unsigned __int64 v11; // [rsp+28h] [rbp-40h]\n\n  v5 = a4;\n  if ( !a4 )\n    v5 = &xmmword_613500;\n  v6 = __errno_location();\n  v7 = *((_DWORD *)v5 + 1) | (a3 == 0LL);\n  v9 = *v6;\n  v11 = sub_404BF0(0LL, 0LL, a1, a2, *(_DWORD *)v5, v7, (__int64)v5 + 8, *((char **)v5 + 5), *((char **)v5 + 6));\n  v10 = (_BYTE *)sub_406C30(v11 + 1);\n  sub_404BF0(v10, v11 + 1, a1, a2, *(_DWORD *)v5, v7, (__int64)v5 + 8, *((char **)v5 + 5), *((char **)v5 + 6));\n  *v6 = v9;\n  if ( a3 )\n    *a3 = v11;\n  return v10;\n}\n"
        },
        {
            "funcName": "sub_406230",
            "funcStartAddr": "0x406230",
            "funcEndAddr": "0x4062c5",
            "decompiledFuncCode": "void sub_406230()\n{\n  __int128 *v0; // r12\n  void **v1; // rbx\n  void **v2; // rbp\n  void *v3; // rdi\n  void *v4; // rdi\n\n  v0 = (__int128 *)ptr;\n  if ( dword_6132B0 > 1 )\n  {\n    v1 = (void **)((char *)ptr + 24);\n    v2 = (void **)((char *)ptr + 16 * (unsigned int)(dword_6132B0 - 2) + 40);\n    do\n    {\n      v3 = *v1;\n      v1 += 2;\n      free(v3);\n    }\n    while ( v1 != v2 );\n  }\n  v4 = (void *)*((_QWORD *)v0 + 1);\n  if ( v4 != &unk_613400 )\n  {\n    free(v4);\n    *(_QWORD *)&xmmword_6132A0 = 256LL;\n    *((_QWORD *)&xmmword_6132A0 + 1) = &unk_613400;\n  }\n  if ( v0 != &xmmword_6132A0 )\n  {\n    free(v0);\n    ptr = &xmmword_6132A0;\n  }\n  dword_6132B0 = 1;\n}\n"
        },
        {
            "funcName": "sub_406340",
            "funcStartAddr": "0x401a7f",
            "funcEndAddr": "0x401a84",
            "decompiledFuncCode": "_BYTE *__fastcall sub_406340(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_405E20(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_406340(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_405E20(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_406340",
            "funcStartAddr": "0x401a7f",
            "funcEndAddr": "0x401a84",
            "decompiledFuncCode": "_BYTE *__fastcall sub_406340(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_405E20(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_406340(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_405E20(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_4063B0",
            "funcStartAddr": "0x401a84",
            "funcEndAddr": "0x401a89",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4063B0(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_405E20(a1, a3, a4, (__int64)v5);\n}\n\n_BYTE *__fastcall sub_4063B0(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_405E20(a1, a3, a4, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_4063B0",
            "funcStartAddr": "0x401a84",
            "funcEndAddr": "0x401a89",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4063B0(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_405E20(a1, a3, a4, (__int64)v5);\n}\n\n_BYTE *__fastcall sub_4063B0(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_405E20(a1, a3, a4, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_406440",
            "funcStartAddr": "0x406440",
            "funcEndAddr": "0x4064b0",
            "decompiledFuncCode": "_BYTE *__fastcall sub_406440(__int64 a1, unsigned __int64 a2, unsigned __int8 a3)\n{\n  _DWORD *v3; // r8\n  __int128 v5[3]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+30h] [rbp-18h]\n\n  v6 = qword_613530;\n  v5[0] = (__int128)_mm_load_si128((const __m128i *)&xmmword_613500);\n  v5[1] = (__int128)_mm_load_si128((const __m128i *)&xmmword_613510);\n  v3 = (_DWORD *)v5 + (a3 >> 5) + 2;\n  v5[2] = (__int128)_mm_load_si128((const __m128i *)&xmmword_613520);\n  *v3 ^= (((*v3 >> (a3 & 0x1F)) & 1) == 0) << (a3 & 0x1F);\n  return sub_405E20(0, a1, a2, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_4064C0",
            "funcStartAddr": "0x4064c0",
            "funcEndAddr": "0x4064d1",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4064C0(__int64 a1)\n{\n  return sub_406440(a1, 0xFFFFFFFFFFFFFFFFLL, 0x3Au);\n}\n"
        },
        {
            "funcName": "sub_4064F0",
            "funcStartAddr": "0x401a89",
            "funcEndAddr": "0x401a8e",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4064F0(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_405E20(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_4064F0(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_405E20(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_4064F0",
            "funcStartAddr": "0x401a89",
            "funcEndAddr": "0x401a8e",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4064F0(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_405E20(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_4064F0(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_405E20(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_406560",
            "funcStartAddr": "0x406560",
            "funcEndAddr": "0x4065cc",
            "decompiledFuncCode": "_BYTE *__fastcall sub_406560(int a1, __int64 a2, __int64 a3, __int64 a4, unsigned __int64 a5)\n{\n  __int128 v6[2]; // [rsp+0h] [rbp-48h] BYREF\n  __m128i si128; // [rsp+20h] [rbp-28h]\n  __int64 v8; // [rsp+30h] [rbp-18h]\n\n  v6[0] = (__int128)_mm_load_si128((const __m128i *)&xmmword_613500);\n  v6[1] = (__int128)_mm_load_si128((const __m128i *)&xmmword_613510);\n  si128 = _mm_load_si128((const __m128i *)&xmmword_613520);\n  v8 = qword_613530;\n  LODWORD(v6[0]) = 10;\n  if ( !a2 || !a3 )\n    abort();\n  si128.m128i_i64[1] = a2;\n  v8 = a3;\n  return sub_405E20(a1, a4, a5, (__int64)v6);\n}\n"
        },
        {
            "funcName": "sub_406670",
            "funcStartAddr": "0x406670",
            "funcEndAddr": "0x406686",
            "decompiledFuncCode": "_BYTE *__fastcall sub_406670(__int64 a1)\n{\n  return sub_405E20(0, a1, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_613260);\n}\n"
        },
        {
            "funcName": "sub_406690",
            "funcStartAddr": "0x401a8e",
            "funcEndAddr": "0x401a93",
            "decompiledFuncCode": "__int64 __fastcall sub_406690(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v14 = *a5;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *a5;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *a5;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = a5[3];\n      v21 = *a5;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = a5[3];\n      v21 = *a5;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 7LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 8LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *a5;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *a5;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n\n__int64 __fastcall sub_406690(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v14 = *a5;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *a5;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *a5;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = a5[3];\n      v21 = *a5;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = a5[3];\n      v21 = *a5;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 7LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 8LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *a5;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *a5;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n"
        },
        {
            "funcName": "sub_406690",
            "funcStartAddr": "0x401a8e",
            "funcEndAddr": "0x401a93",
            "decompiledFuncCode": "__int64 __fastcall sub_406690(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v14 = *a5;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *a5;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *a5;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = a5[3];\n      v21 = *a5;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = a5[3];\n      v21 = *a5;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 7LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 8LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *a5;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *a5;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n\n__int64 __fastcall sub_406690(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v14 = *a5;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *a5;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *a5;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = a5[3];\n      v21 = *a5;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = a5[3];\n      v21 = *a5;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 7LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 8LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *a5;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *a5;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n"
        },
        {
            "funcName": "sub_406A90",
            "funcStartAddr": "0x406a90",
            "funcEndAddr": "0x406af0",
            "decompiledFuncCode": "__int64 __fastcall sub_406A90(FILE *a1, __int64 a2, __int64 a3, __int64 a4, int *a5)\n{\n  __int64 i; // r9\n  __int64 *v6; // r10\n  __int64 v7; // rax\n  unsigned int v8; // eax\n  __int64 *v9; // r10\n  __int64 v10; // rax\n  __int64 v12[11]; // [rsp+0h] [rbp-58h] BYREF\n\n  for ( i = 0LL; i != 10; ++i )\n  {\n    v8 = *a5;\n    if ( (unsigned int)*a5 <= 0x2F )\n    {\n      v6 = (__int64 *)(*((_QWORD *)a5 + 2) + v8);\n      *a5 = v8 + 8;\n      v7 = *v6;\n      v12[i] = *v6;\n      if ( !v7 )\n        return sub_406690(a1, a2, a3, a4, v12, i);\n      continue;\n    }\n    v9 = (__int64 *)*((_QWORD *)a5 + 1);\n    *((_QWORD *)a5 + 1) = v9 + 1;\n    v10 = *v9;\n    v12[i] = *v9;\n    if ( !v10 )\n      break;\n  }\n  return sub_406690(a1, a2, a3, a4, v12, i);\n}\n"
        },
        {
            "funcName": "sub_406AF0",
            "funcStartAddr": "0x406af0",
            "funcEndAddr": "0x406bac",
            "decompiledFuncCode": "__int64 __fastcall sub_406AF0(FILE *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, char a7)\n{\n  char *v7; // r10\n  unsigned int v8; // r8d\n  __int64 i; // r9\n  __int64 v10; // rax\n  __int64 v11; // rax\n  __int64 *v12; // rax\n  __int64 v13; // rax\n  __int64 v15[17]; // [rsp+20h] [rbp-88h] BYREF\n\n  v15[14] = a5;\n  v7 = &a7;\n  v8 = 32;\n  v15[15] = a6;\n  for ( i = 0LL; i != 10; ++i )\n  {\n    if ( v8 <= 0x2F )\n    {\n      v10 = v8;\n      v8 += 8;\n      v11 = *(__int64 *)((char *)&v15[10] + v10);\n      v15[i] = v11;\n      if ( !v11 )\n        return sub_406690(a1, a2, a3, a4, v15, i);\n      continue;\n    }\n    v12 = (__int64 *)v7;\n    v7 += 8;\n    v13 = *v12;\n    v15[i] = v13;\n    if ( !v13 )\n      break;\n  }\n  return sub_406690(a1, a2, a3, a4, v15, i);\n}\n"
        },
        {
            "funcName": "sub_406BB0",
            "funcStartAddr": "0x406bb0",
            "funcEndAddr": "0x406c24",
            "decompiledFuncCode": "int sub_406BB0()\n{\n  char *v0; // rax\n  char *v1; // rax\n  FILE *v2; // rbx\n  char *v3; // rax\n\n  v0 = dcgettext(0LL, \"\\nReport bugs to: %s\\n\", 5);\n  __printf_chk(1LL, v0, \"bug-coreutils@gnu.org\");\n  v1 = dcgettext(0LL, \"%s home page: <%s>\\n\", 5);\n  __printf_chk(1LL, v1, &unk_40BF30, \"https://www.gnu.org/software/coreutils/\");\n  v2 = stdout;\n  v3 = dcgettext(0LL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5);\n  return fputs_unlocked(v3, v2);\n}\n"
        },
        {
            "funcName": "sub_406C30",
            "funcStartAddr": "0x406c30",
            "funcEndAddr": "0x406c4a",
            "decompiledFuncCode": "void *__fastcall sub_406C30(size_t a1)\n{\n  void *result; // rax\n\n  result = malloc(a1);\n  if ( !result )\n  {\n    if ( a1 )\n      sub_406E80();\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_406C80",
            "funcStartAddr": "0x406c80",
            "funcEndAddr": "0x406c82",
            "decompiledFuncCode": "// attributes: thunk\nvoid *__fastcall sub_406C80(size_t a1)\n{\n  return sub_406C30(a1);\n}\n"
        },
        {
            "funcName": "sub_406C90",
            "funcStartAddr": "0x406c90",
            "funcEndAddr": "0x406cc6",
            "decompiledFuncCode": "void *__fastcall sub_406C90(void *a1, size_t a2)\n{\n  void *result; // rax\n\n  if ( !a2 && a1 )\n  {\n    free(a1);\n    return 0LL;\n  }\n  else\n  {\n    result = realloc(a1, a2);\n    if ( !result )\n    {\n      if ( a2 )\n        sub_406E80();\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_406DE0",
            "funcStartAddr": "0x406de0",
            "funcEndAddr": "0x406df7",
            "decompiledFuncCode": "void *__fastcall sub_406DE0(size_t n)\n{\n  void *v1; // rax\n\n  v1 = sub_406C30(n);\n  return memset(v1, 0, n);\n}\n"
        },
        {
            "funcName": "sub_406E00",
            "funcStartAddr": "0x406e00",
            "funcEndAddr": "0x406e2e",
            "decompiledFuncCode": "__int64 __fastcall sub_406E00(unsigned __int64 a1, unsigned __int64 a2)\n{\n  unsigned __int128 v2; // rax\n\n  v2 = a2 * (unsigned __int128)a1;\n  BYTE8(v2) = *((_QWORD *)&v2 + 1) != 0LL;\n  if ( (v2 & 0x8000000000000000LL) != 0LL\n    || (*((_QWORD *)&v2 + 1) = BYTE8(v2), !is_mul_ok(a2, a1))\n    || (*(_QWORD *)&v2 = calloc(a1, a2), !(_QWORD)v2) )\n  {\n    sub_406E80(a1, a2, *((_QWORD *)&v2 + 1));\n  }\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_406E30",
            "funcStartAddr": "0x406e30",
            "funcEndAddr": "0x406e58",
            "decompiledFuncCode": "void *__fastcall sub_406E30(void *src, size_t n)\n{\n  void *v2; // rax\n\n  v2 = sub_406C30(n);\n  return memcpy(v2, src, n);\n}\n"
        },
        {
            "funcName": "sub_406E60",
            "funcStartAddr": "0x406e60",
            "funcEndAddr": "0x406e73",
            "decompiledFuncCode": "void *__fastcall sub_406E60(char *src)\n{\n  size_t v1; // rax\n\n  v1 = strlen(src);\n  return sub_406E30(src, v1 + 1);\n}\n"
        },
        {
            "funcName": "sub_406E80",
            "funcStartAddr": "0x406e80",
            "funcEndAddr": "0x406eb1",
            "decompiledFuncCode": "void __noreturn sub_406E80()\n{\n  char *v0; // rax\n\n  v0 = dcgettext(0LL, \"memory exhausted\", 5);\n  error(status, 0, \"%s\", v0);\n  abort();\n}\n"
        },
        {
            "funcName": "sub_406EC0",
            "funcStartAddr": "0x406ec0",
            "funcEndAddr": "0x406f90",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_406EC0(\n        char *a1,\n        __int64 a2,\n        unsigned __int64 a3,\n        unsigned __int64 a4,\n        __int64 a5,\n        __int64 a6,\n        int a7)\n{\n  int v10; // ebx\n  int v11; // eax\n  unsigned __int64 v12; // rbp\n  int *v13; // r14\n  _BYTE *v14; // rax\n  int v15; // esi\n  int v17; // ebp\n  int *v18; // rax\n  unsigned __int64 v19; // [rsp+8h] [rbp-40h]\n\n  v10 = a7;\n  v11 = sub_407710(a1);\n  if ( v11 )\n  {\n    v17 = v11;\n    v18 = __errno_location();\n    v13 = v18;\n    if ( v17 == 1 )\n    {\n      *v18 = 75;\n    }\n    else if ( v17 == 3 )\n    {\n      *v18 = 0;\n    }\n  }\n  else\n  {\n    v12 = v19;\n    if ( v19 >= a3 && v19 <= a4 )\n      return v12;\n    v13 = __errno_location();\n    *v13 = v19 < 0x40000000 ? 34 : 75;\n  }\n  v14 = sub_406670((__int64)a1);\n  v15 = *v13;\n  if ( *v13 == 22 )\n    v15 = 0;\n  if ( !a7 )\n    v10 = 1;\n  error(v10, v15, \"%s: %s\", a6, v14);\n  return v19;\n}\n"
        },
        {
            "funcName": "sub_406F90",
            "funcStartAddr": "0x406f90",
            "funcEndAddr": "0x406fb1",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_406F90(\n        char *a1,\n        unsigned __int64 a2,\n        unsigned __int64 a3,\n        __int64 a4,\n        __int64 a5,\n        int a6)\n{\n  return sub_406EC0(a1, 10LL, a2, a3, a4, a5, a6);\n}\n"
        },
        {
            "funcName": "sub_406FC0",
            "funcStartAddr": "0x406fc0",
            "funcEndAddr": "0x407702",
            "decompiledFuncCode": "__int64 __fastcall sub_406FC0(char *nptr, char **a2, unsigned int a3, __int64 *a4, const char *a5)\n{\n  char **p_endptr; // rbx\n  int *v8; // rax\n  int *v9; // r13\n  __int64 v10; // rax\n  char *v11; // r15\n  __int64 v12; // rbp\n  unsigned int v13; // r12d\n  int v14; // r13d\n  __int64 v16; // rsi\n  int v17; // eax\n  __int64 v18; // rax\n  char v19; // al\n  char *v20; // rsi\n  __int64 v21; // rcx\n  __int64 v22; // rax\n  __int64 v23; // rax\n  __int64 v24; // rdi\n  __int64 v25; // rcx\n  __int64 v26; // r9\n  int v27; // edi\n  int v28; // r10d\n  __int64 v29; // rcx\n  __int64 v30; // r9\n  int v31; // edi\n  __int64 v32; // rcx\n  __int64 v33; // r9\n  int v34; // edi\n  __int64 v35; // rcx\n  __int64 v36; // r9\n  int v37; // edi\n  __int64 v38; // rcx\n  __int64 v39; // r9\n  int v40; // edi\n  __int64 v41; // rcx\n  __int64 v42; // r9\n  int v43; // edi\n  char *endptr; // [rsp+18h] [rbp-40h] BYREF\n\n  if ( a3 > 0x24 )\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 0x60u, \"xstrtol\");\n  p_endptr = a2;\n  if ( !a2 )\n    p_endptr = &endptr;\n  v8 = __errno_location();\n  *v8 = 0;\n  v9 = v8;\n  v10 = strtol(nptr, p_endptr, a3);\n  v11 = *p_endptr;\n  v12 = v10;\n  if ( *p_endptr == nptr )\n  {\n    if ( !a5 )\n      return 4;\n    v14 = (unsigned __int8)*v11;\n    v13 = 4;\n    if ( !(_BYTE)v14 )\n      return v13;\n    v12 = 1LL;\n    v13 = 0;\n    if ( !strchr(a5, (char)v14) )\n      return 4;\nLABEL_16:\n    if ( (unsigned __int8)(v14 - 69) > 0x2Fu\n      || (v18 = 0x814400308945LL, !_bittest64(&v18, (unsigned int)(v14 - 69)))\n      || !strchr(a5, 48) )\n    {\nLABEL_17:\n      LODWORD(v16) = 1;\n      v17 = 1024;\n      goto LABEL_18;\n    }\n    v19 = v11[1];\n    if ( v19 != 68 )\n    {\n      if ( v19 == 105 )\n      {\n        v17 = 1024;\n        LODWORD(v16) = 2 * (v11[2] == 66) + 1;\nLABEL_18:\n        switch ( (char)v14 )\n        {\n          case 'B':\n            v16 = (int)v16;\n            if ( v12 < (__int64)0xFFE0000000000000LL )\n              goto LABEL_46;\n            if ( v12 > 0x1FFFFFFFFFFFFFLL )\n              goto LABEL_105;\n            v12 <<= 10;\n            break;\n          case 'E':\n            v32 = v17;\n            v16 = (int)v16;\n            v33 = (__int64)0x8000000000000000LL / v17;\n            goto LABEL_67;\n          case 'G':\n          case 'g':\n            v35 = v17;\n            v16 = (int)v16;\n            v36 = (__int64)0x8000000000000000LL / v17;\n            goto LABEL_74;\n          case 'K':\n          case 'k':\n            v21 = v17;\n            v16 = (int)v16;\n            v22 = (__int64)0x8000000000000000LL / v17;\n            goto LABEL_38;\n          case 'M':\n          case 'm':\n            v21 = v17;\n            v16 = (int)v16;\n            v24 = (__int64)0x8000000000000000LL / v17;\n            goto LABEL_43;\n          case 'P':\n            v25 = v17;\n            v16 = (int)v16;\n            v26 = (__int64)0x8000000000000000LL / v17;\n            goto LABEL_53;\n          case 'T':\n          case 't':\n            v29 = v17;\n            v16 = (int)v16;\n            v30 = (__int64)0x8000000000000000LL / v17;\n            goto LABEL_60;\n          case 'Y':\n            v38 = v17;\n            v16 = (int)v16;\n            v39 = (__int64)0x8000000000000000LL / v17;\n            goto LABEL_81;\n          case 'Z':\n            v41 = v17;\n            v16 = (int)v16;\n            v42 = (__int64)0x8000000000000000LL / v17;\n            goto LABEL_88;\n          case 'b':\n            v16 = (int)v16;\n            goto LABEL_48;\n          case 'c':\n            v16 = (int)v16;\n            break;\n          case 'w':\n            v16 = (int)v16;\n            if ( v12 < (__int64)0xC000000000000000LL )\n              goto LABEL_46;\n            if ( v12 > 0x3FFFFFFFFFFFFFFFLL )\n              goto LABEL_105;\n            v12 *= 2LL;\n            break;\n          default:\n            goto LABEL_27;\n        }\nLABEL_31:\n        v20 = &v11[v16];\n        *p_endptr = v20;\n        if ( *v20 )\n          v13 |= 2u;\n        goto LABEL_9;\n      }\n      if ( v19 != 66 )\n      {\n        switch ( (char)v14 )\n        {\n          case 'E':\n            v16 = 1LL;\n            v32 = 1024LL;\n            v33 = 0xFFE0000000000000LL;\nLABEL_67:\n            v34 = 6;\n            v28 = 0;\n            do\n            {\n              if ( v12 >= v33 )\n              {\n                if ( 0x7FFFFFFFFFFFFFFFLL / v32 < v12 )\n                {\n                  v12 = 0x7FFFFFFFFFFFFFFFLL;\n                  v28 = 1;\n                }\n                else\n                {\n                  v12 *= v32;\n                }\n              }\n              else\n              {\n                v12 = 0x8000000000000000LL;\n                v28 = 1;\n              }\n              --v34;\n            }\n            while ( v34 );\n            goto LABEL_104;\n          case 'F':\n          case 'H':\n          case 'I':\n          case 'J':\n          case 'L':\n          case 'N':\n          case 'O':\n          case 'Q':\n          case 'R':\n          case 'S':\n          case 'U':\n          case 'V':\n          case 'W':\n          case 'X':\n          case '[':\n          case '\\\\':\n          case ']':\n          case '^':\n          case '_':\n          case '`':\n          case 'a':\n          case 'd':\n          case 'e':\n          case 'f':\n          case 'h':\n          case 'i':\n          case 'j':\n          case 'l':\n          case 'n':\n          case 'o':\n          case 'p':\n          case 'q':\n          case 'r':\n          case 's':\n            goto LABEL_27;\n          case 'G':\n          case 'g':\n            v16 = 1LL;\n            v35 = 1024LL;\n            v36 = 0xFFE0000000000000LL;\nLABEL_74:\n            v37 = 3;\n            v28 = 0;\n            do\n            {\n              if ( v12 >= v36 )\n              {\n                if ( 0x7FFFFFFFFFFFFFFFLL / v35 < v12 )\n                {\n                  v12 = 0x7FFFFFFFFFFFFFFFLL;\n                  v28 = 1;\n                }\n                else\n                {\n                  v12 *= v35;\n                }\n              }\n              else\n              {\n                v12 = 0x8000000000000000LL;\n                v28 = 1;\n              }\n              --v37;\n            }\n            while ( v37 );\n            goto LABEL_104;\n          case 'K':\n          case 'k':\n            v16 = 1LL;\n            v21 = 1024LL;\n            v22 = 0xFFE0000000000000LL;\nLABEL_38:\n            if ( v12 < v22 )\n              goto LABEL_46;\n            v23 = 0x7FFFFFFFFFFFFFFFLL / v21;\n            goto LABEL_40;\n          case 'M':\n          case 'm':\n            v16 = 1LL;\n            v21 = 1024LL;\n            v24 = 0xFFE0000000000000LL;\nLABEL_43:\n            if ( v12 < v24 )\n              goto LABEL_46;\n            v23 = 0x7FFFFFFFFFFFFFFFLL / v21;\n            if ( v12 > 0x7FFFFFFFFFFFFFFFLL / v21 )\n              goto LABEL_105;\n            v12 *= v21;\n            if ( v12 >= v24 )\n            {\nLABEL_40:\n              if ( v23 < v12 )\n              {\nLABEL_105:\n                v12 = 0x7FFFFFFFFFFFFFFFLL;\n                v13 = 1;\n              }\n              else\n              {\n                v12 *= v21;\n              }\n            }\n            else\n            {\nLABEL_46:\n              v12 = 0x8000000000000000LL;\n              v13 = 1;\n            }\n            break;\n          case 'P':\n            v16 = 1LL;\n            v25 = 1024LL;\n            v26 = 0xFFE0000000000000LL;\nLABEL_53:\n            v27 = 5;\n            v28 = 0;\n            do\n            {\n              if ( v26 <= v12 )\n              {\n                if ( 0x7FFFFFFFFFFFFFFFLL / v25 < v12 )\n                {\n                  v12 = 0x7FFFFFFFFFFFFFFFLL;\n                  v28 = 1;\n                }\n                else\n                {\n                  v12 *= v25;\n                }\n              }\n              else\n              {\n                v12 = 0x8000000000000000LL;\n                v28 = 1;\n              }\n              --v27;\n            }\n            while ( v27 );\n            goto LABEL_104;\n          case 'T':\n          case 't':\n            v16 = 1LL;\n            v29 = 1024LL;\n            v30 = 0xFFE0000000000000LL;\nLABEL_60:\n            v31 = 4;\n            v28 = 0;\n            do\n            {\n              if ( v30 <= v12 )\n              {\n                if ( 0x7FFFFFFFFFFFFFFFLL / v29 < v12 )\n                {\n                  v12 = 0x7FFFFFFFFFFFFFFFLL;\n                  v28 = 1;\n                }\n                else\n                {\n                  v12 *= v29;\n                }\n              }\n              else\n              {\n                v12 = 0x8000000000000000LL;\n                v28 = 1;\n              }\n              --v31;\n            }\n            while ( v31 );\n            goto LABEL_104;\n          case 'Y':\n            v16 = 1LL;\n            v38 = 1024LL;\n            v39 = 0xFFE0000000000000LL;\nLABEL_81:\n            v40 = 8;\n            v28 = 0;\n            do\n            {\n              if ( v39 <= v12 )\n              {\n                if ( 0x7FFFFFFFFFFFFFFFLL / v38 < v12 )\n                {\n                  v12 = 0x7FFFFFFFFFFFFFFFLL;\n                  v28 = 1;\n                }\n                else\n                {\n                  v12 *= v38;\n                }\n              }\n              else\n              {\n                v12 = 0x8000000000000000LL;\n                v28 = 1;\n              }\n              --v40;\n            }\n            while ( v40 );\n            goto LABEL_104;\n          case 'Z':\n            v16 = 1LL;\n            v41 = 1024LL;\n            v42 = 0xFFE0000000000000LL;\nLABEL_88:\n            v43 = 7;\n            v28 = 0;\n            do\n            {\n              if ( v42 <= v12 )\n              {\n                if ( 0x7FFFFFFFFFFFFFFFLL / v41 < v12 )\n                {\n                  v12 = 0x7FFFFFFFFFFFFFFFLL;\n                  v28 = 1;\n                }\n                else\n                {\n                  v12 *= v41;\n                }\n              }\n              else\n              {\n                v12 = 0x8000000000000000LL;\n                v28 = 1;\n              }\n              --v43;\n            }\n            while ( v43 );\nLABEL_104:\n            v13 |= v28;\n            goto LABEL_31;\n          case 'b':\n            v16 = 1LL;\nLABEL_48:\n            if ( v12 < (__int64)0xFFC0000000000000LL )\n              goto LABEL_46;\n            if ( v12 > 0x3FFFFFFFFFFFFFLL )\n              goto LABEL_105;\n            v12 <<= 9;\n            break;\n          case 'c':\n            v16 = 1LL;\n            goto LABEL_31;\n          default:\n            goto LABEL_17;\n        }\n        goto LABEL_31;\n      }\n    }\n    LODWORD(v16) = 2;\n    v17 = 1000;\n    goto LABEL_18;\n  }\n  if ( *v9 )\n  {\n    v13 = 4;\n    if ( *v9 != 34 )\n      return v13;\n    v13 = 1;\n  }\n  else\n  {\n    v13 = 0;\n  }\n  if ( a5 )\n  {\n    v14 = (unsigned __int8)*v11;\n    if ( (_BYTE)v14 )\n    {\n      if ( !strchr(a5, (char)v14) )\n      {\nLABEL_27:\n        v13 |= 2u;\n        *a4 = v12;\n        return v13;\n      }\n      goto LABEL_16;\n    }\n  }\nLABEL_9:\n  *a4 = v12;\n  return v13;\n}\n"
        },
        {
            "funcName": "sub_407710",
            "funcStartAddr": "0x407710",
            "funcEndAddr": "0x407b44",
            "decompiledFuncCode": "__int64 __fastcall sub_407710(char *nptr, char **a2, unsigned int a3, __int64 *a4, const char *a5)\n{\n  char **p_endptr; // r15\n  int *v8; // rax\n  int *v9; // r12\n  unsigned __int8 v10; // bl\n  const unsigned __int16 *v11; // rsi\n  char *v12; // rax\n  __int64 v13; // rbx\n  unsigned int v14; // ebp\n  int v15; // r12d\n  char *v17; // rax\n  char *v18; // r8\n  __int64 v19; // rax\n  char *v20; // rax\n  char v21; // al\n  int v22; // esi\n  unsigned __int64 v23; // rdx\n  char *v24; // r8\n  unsigned __int64 v25; // kr30_8\n  char *v26; // rax\n  int v27; // edi\n  int v28; // r9d\n  bool v29; // of\n  int v30; // edi\n  int v31; // edi\n  int v32; // edi\n  int v33; // edi\n  char *basea; // [rsp+0h] [rbp-58h]\n  char *baseb; // [rsp+0h] [rbp-58h]\n  char *v37; // [rsp+8h] [rbp-50h]\n  char *endptr; // [rsp+18h] [rbp-40h] BYREF\n\n  if ( a3 > 0x24 )\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 0x60u, \"xstrtoumax\");\n  p_endptr = a2;\n  if ( !a2 )\n    p_endptr = &endptr;\n  v8 = __errno_location();\n  *v8 = 0;\n  v9 = v8;\n  v10 = *nptr;\n  v11 = *__ctype_b_loc();\n  v12 = nptr;\n  while ( (v11[v10] & 0x2000) != 0 )\n    v10 = *++v12;\n  if ( v10 == 45 )\n    return 4;\n  v13 = __strtoul_internal(nptr, p_endptr, a3, 0);\n  if ( *p_endptr == nptr )\n  {\n    basea = *p_endptr;\n    if ( a5 )\n    {\n      v15 = (unsigned __int8)*nptr;\n      if ( (_BYTE)v15 )\n      {\n        v14 = 0;\n        v13 = 1LL;\n        v17 = strchr(a5, (char)v15);\n        v18 = basea;\n        if ( v17 )\n          goto LABEL_20;\n      }\n    }\n    return 4;\n  }\n  if ( *v9 )\n  {\n    v14 = 1;\n    if ( *v9 == 34 )\n      goto LABEL_11;\n    return 4;\n  }\n  v14 = 0;\nLABEL_11:\n  if ( a5 )\n  {\n    v15 = (unsigned __int8)**p_endptr;\n    if ( (_BYTE)v15 )\n    {\n      baseb = *p_endptr;\n      v26 = strchr(a5, (char)v15);\n      v18 = baseb;\n      if ( !v26 )\n      {\nLABEL_40:\n        *a4 = v13;\n        v14 |= 2u;\n        return v14;\n      }\nLABEL_20:\n      if ( (unsigned __int8)(v15 - 69) > 0x2Fu\n        || (v19 = 0x814400308945LL, !_bittest64(&v19, (unsigned int)(v15 - 69)))\n        || (v37 = v18, v20 = strchr(a5, 48), v18 = v37, !v20) )\n      {\nLABEL_27:\n        v22 = 1;\n        v23 = 1024LL;\n        goto LABEL_28;\n      }\n      v21 = v37[1];\n      if ( v21 != 68 )\n      {\n        if ( v21 == 105 )\n        {\n          v23 = 1024LL;\n          v22 = 2 * (v37[2] == 66) + 1;\nLABEL_28:\n          switch ( (char)v15 )\n          {\n            case 'B':\n              if ( (unsigned __int64)v13 >> 54 )\n                goto LABEL_38;\n              v13 <<= 10;\n              break;\n            case 'E':\n              goto LABEL_71;\n            case 'G':\n            case 'g':\n              goto LABEL_77;\n            case 'K':\n            case 'k':\n              goto LABEL_37;\n            case 'M':\n            case 'm':\n              goto LABEL_30;\n            case 'P':\n              goto LABEL_65;\n            case 'T':\n            case 't':\n              goto LABEL_59;\n            case 'Y':\n              goto LABEL_53;\n            case 'Z':\n              goto LABEL_47;\n            case 'b':\n              goto LABEL_44;\n            case 'c':\n              break;\n            case 'w':\n              if ( v13 < 0 )\n                goto LABEL_38;\n              v13 *= 2LL;\n              break;\n            default:\n              goto LABEL_40;\n          }\nLABEL_33:\n          v24 = &v18[v22];\n          *p_endptr = v24;\n          if ( *v24 )\n            v14 |= 2u;\n          goto LABEL_13;\n        }\n        if ( v21 != 66 )\n        {\n          switch ( (char)v15 )\n          {\n            case 'E':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_71:\n              v33 = 6;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v33;\n              }\n              while ( v33 );\n              goto LABEL_51;\n            case 'F':\n            case 'H':\n            case 'I':\n            case 'J':\n            case 'L':\n            case 'N':\n            case 'O':\n            case 'Q':\n            case 'R':\n            case 'S':\n            case 'U':\n            case 'V':\n            case 'W':\n            case 'X':\n            case '[':\n            case '\\\\':\n            case ']':\n            case '^':\n            case '_':\n            case '`':\n            case 'a':\n            case 'd':\n            case 'e':\n            case 'f':\n            case 'h':\n            case 'i':\n            case 'j':\n            case 'l':\n            case 'n':\n            case 'o':\n            case 'p':\n            case 'q':\n            case 'r':\n            case 's':\n              goto LABEL_40;\n            case 'G':\n            case 'g':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_77:\n              if ( is_mul_ok((int)v23, v13)\n                && is_mul_ok((int)v23, (int)v23 * v13)\n                && is_mul_ok((int)v23, (int)v23 * (int)v23 * v13) )\n              {\n                v13 *= (int)v23 * (int)v23 * (__int64)(int)v23;\n              }\n              else\n              {\n                v13 = -1LL;\n                v14 |= 1u;\n              }\n              goto LABEL_33;\n            case 'K':\n            case 'k':\n              v22 = 1;\n              v23 = 1024LL;\nLABEL_37:\n              v25 = v13;\n              v13 *= v23;\n              if ( is_mul_ok(v23, v25) )\n                goto LABEL_33;\n              goto LABEL_38;\n            case 'M':\n            case 'm':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_30:\n              if ( !is_mul_ok((int)v23, v13) || !is_mul_ok((int)v23, (int)v23 * v13) )\n                goto LABEL_38;\n              v13 *= (int)v23 * (__int64)(int)v23;\n              break;\n            case 'P':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_65:\n              v32 = 5;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v32;\n              }\n              while ( v32 );\n              goto LABEL_51;\n            case 'T':\n            case 't':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_59:\n              v31 = 4;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v31;\n              }\n              while ( v31 );\n              goto LABEL_51;\n            case 'Y':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_53:\n              v30 = 8;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v30;\n              }\n              while ( v30 );\n              goto LABEL_51;\n            case 'Z':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_47:\n              v27 = 7;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v27;\n              }\n              while ( v27 );\nLABEL_51:\n              v14 |= v28;\n              break;\n            case 'b':\n              v22 = 1;\nLABEL_44:\n              if ( (unsigned __int64)v13 >> 55 )\n              {\nLABEL_38:\n                v14 = 1;\n                v13 = -1LL;\n              }\n              else\n              {\n                v13 <<= 9;\n              }\n              break;\n            case 'c':\n              v22 = 1;\n              goto LABEL_33;\n            default:\n              goto LABEL_27;\n          }\n          goto LABEL_33;\n        }\n      }\n      v22 = 2;\n      v23 = 1000LL;\n      goto LABEL_28;\n    }\n  }\nLABEL_13:\n  *a4 = v13;\n  return v14;\n}\n"
        },
        {
            "funcName": "sub_407B50",
            "funcStartAddr": "0x407b50",
            "funcEndAddr": "0x407c85",
            "decompiledFuncCode": "__int64 __fastcall sub_407B50(int a1, int a2, __int64 a3, int a4, int a5, int a6)\n{\n  int v6; // ebx\n  int v8; // eax\n  int *v9; // rax\n  int v10; // edi\n  int v11; // r12d\n  int *v12; // rbp\n  int v13; // ecx\n  int v14; // r8d\n  int v15; // r9d\n  int v16; // [rsp+30h] [rbp-38h]\n\n  v16 = a3;\n  if ( a2 == 1030 )\n  {\n    if ( dword_613538 < 0 )\n    {\n      v6 = sub_407B50(a1, 0, a3, a4, a5, a6);\n      if ( v6 >= 0 && dword_613538 == -1 )\n      {\nLABEL_8:\n        v8 = fcntl(v6, 1);\n        if ( v8 < 0 || fcntl(v6, 2, v8 | 1u) == -1 )\n        {\n          v9 = __errno_location();\n          v10 = v6;\n          v6 = -1;\n          v11 = *v9;\n          v12 = v9;\n          close(v10);\n          *v12 = v11;\n        }\n      }\n    }\n    else\n    {\n      v6 = fcntl(a1, 1030, (unsigned int)a3);\n      if ( v6 < 0 && *__errno_location() == 22 )\n      {\n        v6 = sub_407B50(a1, 0, v16, v13, v14, v15);\n        if ( v6 >= 0 )\n        {\n          dword_613538 = -1;\n          goto LABEL_8;\n        }\n      }\n      else\n      {\n        dword_613538 = 1;\n      }\n    }\n    return (unsigned int)v6;\n  }\n  return (unsigned int)fcntl(a1, a2, a3);\n}\n"
        },
        {
            "funcName": "sub_407C90",
            "funcStartAddr": "0x407c90",
            "funcEndAddr": "0x407d6f",
            "decompiledFuncCode": "__int64 __fastcall sub_407C90(__int64 a1, int *a2)\n{\n  __int64 v2; // r11\n  int v3; // r12d\n  int v4; // ebp\n  __int64 v5; // rbx\n  int v6; // r9d\n  int v7; // r10d\n  int v8; // r8d\n  int v9; // r14d\n  int v10; // edx\n  __int64 *v11; // rax\n  __int64 *v12; // r13\n  __int64 v13; // rdx\n  __int64 v14; // rcx\n  __int64 result; // rax\n  __int64 *v16; // rax\n  __int64 v17; // rdx\n  __int64 v18; // rcx\n\n  v2 = a1 + 8;\n  v3 = a2[11];\n  v4 = *a2;\n  v5 = a2[12];\n  v6 = v3;\n  v7 = *a2;\n  v8 = a2[12];\nLABEL_2:\n  if ( v7 > v8 )\n  {\n    while ( v6 < v8 )\n    {\n      v9 = v7 - v8;\n      v10 = v8 - v6;\n      if ( v7 - v8 <= v8 - v6 )\n      {\n        v16 = (__int64 *)(a1 + 8LL * v6);\n        v17 = v5 - v6;\n        do\n        {\n          v18 = *v16;\n          *v16 = v16[v17];\n          v16[v17] = v18;\n          ++v16;\n        }\n        while ( v16 != (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v9 - 1))) );\n        v6 += v9;\n        goto LABEL_2;\n      }\n      v7 -= v10;\n      v11 = (__int64 *)(a1 + 8LL * v6);\n      v12 = (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v10 - 1)));\n      v13 = v7 - (__int64)v6;\n      do\n      {\n        v14 = *v11;\n        *v11 = v11[v13];\n        v11[v13] = v14;\n        ++v11;\n      }\n      while ( v12 != v11 );\n      if ( v7 <= v8 )\n        break;\n    }\n  }\n  a2[12] = v4;\n  result = (unsigned int)(v4 - v8);\n  a2[11] = result + v3;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_407D70",
            "funcStartAddr": "0x407d70",
            "funcEndAddr": "0x40838c",
            "decompiledFuncCode": "__int64 __fastcall sub_407D70(\n        int a1,\n        __int64 *a2,\n        const char *a3,\n        char **a4,\n        _DWORD *a5,\n        int a6,\n        int *a7,\n        int a8,\n        __int64 a9)\n{\n  const char *v9; // r14\n  char *v10; // rbp\n  size_t v11; // r13\n  char **v12; // rbx\n  __int64 v13; // r12\n  const char *v14; // r15\n  const char *v15; // rdi\n  __int64 v16; // r15\n  char **v17; // rbp\n  char *v18; // rdx\n  __int64 result; // rax\n  int v20; // edx\n  int v21; // eax\n  int v22; // ecx\n  char *v23; // rdx\n  __int64 v24; // rbx\n  char *v25; // rax\n  __int64 v26; // rbx\n  char *v27; // rax\n  __int64 v28; // rbp\n  char *v29; // rax\n  __int64 v30; // rbp\n  char *v31; // rax\n  FILE *v32; // rdi\n  char **v33; // rbx\n  _BYTE *v34; // rbp\n  __int64 v35; // r12\n  __int64 v36; // rbp\n  char *v37; // rax\n  char *s1; // [rsp+10h] [rbp-78h]\n  char *s1a; // [rsp+10h] [rbp-78h]\n  _BYTE *ptr; // [rsp+18h] [rbp-70h]\n  int v45; // [rsp+38h] [rbp-50h]\n  char v46; // [rsp+3Fh] [rbp-49h]\n  int v48; // [rsp+44h] [rbp-44h]\n  int v49; // [rsp+48h] [rbp-40h]\n\n  v9 = (const char *)*((_QWORD *)a7 + 4);\n  v10 = (char *)v9;\n  v46 = *v9;\n  if ( *v9 == 61 || !*v9 )\n  {\n    v11 = 0LL;\n  }\n  else\n  {\n    do\n      ++v10;\n    while ( *v10 && *v10 != 61 );\n    v11 = v10 - v9;\n  }\n  v12 = a4;\n  v13 = 0LL;\n  s1 = *a4;\n  v14 = *a4;\n  if ( !*a4 )\n  {\nLABEL_24:\n    if ( !a6 || *(_BYTE *)(a2[*a7] + 1) == 45 || (v18 = strchr(a3, v46), result = 0xFFFFFFFFLL, !v18) )\n    {\n      if ( a8 )\n      {\n        v24 = *a2;\n        v25 = dcgettext(0LL, \"%s: unrecognized option '%s%s'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v25, v24);\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n      ++*a7;\n      a7[2] = 0;\n      return 63LL;\n    }\n    return result;\n  }\n  while ( 1 )\n  {\n    if ( !strncmp(v14, v9, v11) && strlen(v14) == v11 )\n      goto LABEL_31;\n    v12 += 4;\n    v14 = *v12;\n    if ( !*v12 )\n      break;\n    v13 = (int)v13 + 1;\n  }\n  v12 = 0LL;\n  v48 = -1;\n  v15 = s1;\n  v16 = 0LL;\n  v45 = 0;\n  v49 = 0;\n  ptr = 0LL;\n  s1a = v10;\n  v17 = a4;\n  do\n  {\n    if ( strncmp(v15, v9, v11) )\n      goto LABEL_20;\n    if ( v12 )\n    {\n      if ( (a6\n         || *((_DWORD *)v12 + 2) != *((_DWORD *)v17 + 2)\n         || v12[2] != v17[2]\n         || *((_DWORD *)v12 + 6) != *((_DWORD *)v17 + 6))\n        && !v45 )\n      {\n        if ( a8 )\n        {\n          if ( ptr )\n            goto LABEL_19;\n          ptr = calloc((int)v13 + 1, 1uLL);\n          if ( ptr )\n          {\n            v49 = 1;\n            ptr[v48] = 1;\nLABEL_19:\n            ptr[v16] = 1;\n            goto LABEL_20;\n          }\n          v45 = 1;\n        }\n        else\n        {\n          v45 = 1;\n          if ( ptr )\n            goto LABEL_19;\n        }\n      }\n    }\n    else\n    {\n      v48 = v16;\n      v12 = v17;\n    }\nLABEL_20:\n    v17 += 4;\n    v15 = *v17;\n    ++v16;\n  }\n  while ( *v17 );\n  v10 = s1a;\n  if ( ptr || v45 )\n  {\n    if ( a8 )\n    {\n      if ( v45 )\n      {\n        v26 = *a2;\n        v27 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v27, v26);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n      else\n      {\n        flockfile(stderr);\n        v30 = *a2;\n        v31 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5);\n        __fprintf_chk(stderr, 1LL, v31, v30);\n        v32 = stderr;\n        v33 = a4;\n        v34 = ptr;\n        v35 = (__int64)&ptr[v13 + 1];\n        do\n        {\n          if ( *v34 )\n          {\n            __fprintf_chk(v32, 1LL, \" '%s%s'\", a9);\n            v32 = stderr;\n          }\n          ++v34;\n          v33 += 4;\n        }\n        while ( (_BYTE *)v35 != v34 );\n        fputc(10, v32);\n        funlockfile(stderr);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n    }\n    if ( v49 )\n      free(ptr);\n    *((_QWORD *)a7 + 4) = &v9[strlen(v9)];\n    ++*a7;\n    a7[2] = 0;\n    return 63LL;\n  }\n  else\n  {\n    if ( !v12 )\n      goto LABEL_24;\n    LODWORD(v13) = v48;\nLABEL_31:\n    v20 = *a7;\n    *((_QWORD *)a7 + 4) = 0LL;\n    v21 = v20 + 1;\n    *a7 = v20 + 1;\n    v22 = *((_DWORD *)v12 + 2);\n    if ( *v10 )\n    {\n      if ( v22 )\n      {\n        *((_QWORD *)a7 + 2) = v10 + 1;\n        goto LABEL_33;\n      }\n      if ( a8 )\n      {\n        v28 = *a2;\n        v29 = dcgettext(0LL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v29, v28);\n      }\n      a7[2] = *((_DWORD *)v12 + 6);\n      return 63LL;\n    }\n    else\n    {\n      if ( v22 != 1 )\n        goto LABEL_33;\n      if ( v21 >= a1 )\n      {\n        if ( a8 )\n        {\n          v36 = *a2;\n          v37 = dcgettext(0LL, \"%s: option '%s%s' requires an argument\\n\", 5);\n          __fprintf_chk(stderr, 1LL, v37, v36);\n        }\n        a7[2] = *((_DWORD *)v12 + 6);\n        return 5 * (unsigned int)(*a3 != 58) + 58;\n      }\n      else\n      {\n        *a7 = v20 + 2;\n        *((_QWORD *)a7 + 2) = a2[v21];\nLABEL_33:\n        if ( a5 )\n          *a5 = v13;\n        v23 = v12[2];\n        result = *((unsigned int *)v12 + 6);\n        if ( v23 )\n        {\n          *(_DWORD *)v23 = result;\n          return 0LL;\n        }\n      }\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_408390",
            "funcStartAddr": "0x408390",
            "funcEndAddr": "0x408956",
            "decompiledFuncCode": "__int64 __fastcall sub_408390(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int a6, int *a7, int a8)\n{\n  int v8; // r13d\n  int v9; // eax\n  int v10; // ebp\n  const char *v12; // r15\n  _BYTE *v13; // rdx\n  char v14; // al\n  char v15; // al\n  int v16; // eax\n  __int64 v17; // r14\n  int v18; // edx\n  int v19; // ecx\n  int v20; // eax\n  unsigned int v21; // r14d\n  char *v22; // rax\n  __int64 v23; // r8\n  char v24; // cl\n  int v26; // edx\n  __int64 v27; // rax\n  _BYTE *v28; // rcx\n  int v29; // esi\n  char v30; // cl\n  char *v31; // rax\n  __int64 v32; // rax\n  char *v34; // rax\n  char v35; // dl\n  __int64 v36; // rax\n  int v37; // edx\n  __int64 v38; // rax\n  __int64 v39; // rbp\n  char *v40; // rax\n  __int64 v41; // rbp\n  char *v42; // rax\n  __int64 v43; // rbp\n  char *v44; // rax\n  char v47; // [rsp+1Ch] [rbp-4Ch]\n  int v48; // [rsp+1Ch] [rbp-4Ch]\n  int v49; // [rsp+1Ch] [rbp-4Ch]\n  int v50; // [rsp+1Ch] [rbp-4Ch]\n  _BYTE *v51; // [rsp+20h] [rbp-48h]\n  _BYTE *v52; // [rsp+28h] [rbp-40h]\n\n  v8 = a7[1];\n  if ( a1 <= 0 )\n    return (unsigned int)-1;\n  v9 = *a7;\n  v10 = a1;\n  v12 = a3;\n  *((_QWORD *)a7 + 2) = 0LL;\n  if ( !v9 )\n  {\n    *a7 = 1;\n    v9 = 1;\nLABEL_4:\n    a7[12] = v9;\n    a7[11] = v9;\n    *((_QWORD *)a7 + 4) = 0LL;\n    if ( *a3 == 45 )\n    {\n      a7[10] = 2;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else if ( *a3 == 43 )\n    {\n      a7[10] = 0;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else\n    {\n      v13 = 0LL;\n      if ( !a8 )\n      {\n        v50 = a6;\n        v34 = getenv(\"POSIXLY_CORRECT\");\n        a6 = v50;\n        if ( !v34 )\n        {\n          a7[10] = 1;\n          v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n          goto LABEL_24;\n        }\n        v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n      }\n      a7[10] = 0;\n    }\nLABEL_24:\n    a7[6] = 1;\n    v14 = *v12;\n    goto LABEL_25;\n  }\n  if ( !a7[6] )\n    goto LABEL_4;\n  v14 = *a3;\n  v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n  if ( ((v14 - 43) & 0xFD) == 0 )\n  {\n    v15 = *++v12;\n    if ( v15 == 58 )\n      v8 = 0;\n    if ( !v13 )\n      goto LABEL_12;\n    goto LABEL_28;\n  }\nLABEL_25:\n  if ( v14 == 58 )\n    v8 = 0;\n  if ( !v13 )\n    goto LABEL_12;\nLABEL_28:\n  if ( !*v13 )\n  {\nLABEL_12:\n    v16 = *a7;\n    if ( a7[12] > *a7 )\n      a7[12] = v16;\n    if ( v16 < a7[11] )\n      a7[11] = v16;\n    if ( a7[10] == 1 )\n    {\n      v26 = a7[12];\n      if ( a7[11] == v26 )\n      {\n        if ( v16 != v26 )\n        {\n          a7[11] = v16;\n          v26 = v16;\n        }\n      }\n      else if ( v16 != v26 )\n      {\n        v48 = a6;\n        sub_407C90((__int64)a2, a7);\n        v26 = *a7;\n        a6 = v48;\n      }\n      if ( a1 <= v26 )\n      {\nLABEL_79:\n        v16 = v26;\n      }\n      else\n      {\n        v27 = v26;\n        while ( 1 )\n        {\n          v28 = (_BYTE *)a2[v27];\n          v29 = v27;\n          v26 = v27;\n          if ( *v28 == 45 )\n          {\n            if ( v28[1] )\n              break;\n          }\n          v26 = ++v27;\n          *a7 = v29 + 1;\n          if ( a1 <= (int)v27 )\n            goto LABEL_79;\n        }\n        v16 = *a7;\n      }\n      a7[12] = v26;\n    }\n    if ( a1 == v16 )\n    {\n      v10 = a7[12];\n      v18 = a7[11];\nLABEL_41:\n      if ( v18 != v10 )\n        *a7 = v18;\n      return (unsigned int)-1;\n    }\n    v17 = a2[v16];\n    if ( !strcmp((const char *)v17, \"--\") )\n    {\n      v18 = a7[11];\n      v19 = a7[12];\n      v20 = v16 + 1;\n      *a7 = v20;\n      if ( v18 == v19 )\n      {\n        a7[11] = v20;\n        v18 = v20;\n      }\n      else if ( v20 != v19 )\n      {\n        sub_407C90((__int64)a2, a7);\n        v18 = a7[11];\n      }\n      a7[12] = a1;\n      *a7 = a1;\n      goto LABEL_41;\n    }\n    if ( *(_BYTE *)v17 == 45 )\n    {\n      v30 = *(_BYTE *)(v17 + 1);\n      if ( v30 )\n      {\n        if ( a4 )\n        {\n          if ( v30 == 45 )\n          {\n            *((_QWORD *)a7 + 4) = v17 + 2;\n            return (unsigned int)sub_407D70(a1, a2, v12, a4, a5, a6, a7, v8, (__int64)\"--\");\n          }\n          if ( a6 )\n          {\n            if ( *(_BYTE *)(v17 + 2) || (v49 = a6, v31 = strchr(v12, v30), a6 = v49, !v31) )\n            {\n              *((_QWORD *)a7 + 4) = v17 + 1;\n              v21 = sub_407D70(a1, a2, v12, a4, a5, a6, a7, v8, (__int64)\"-\");\n              if ( v21 != -1 )\n                return v21;\n              v17 = a2[*a7];\n            }\n          }\n        }\n        v13 = (_BYTE *)(v17 + 1);\n        goto LABEL_29;\n      }\n    }\n    if ( a7[10] )\n    {\n      *((_QWORD *)a7 + 2) = v17;\n      v21 = 1;\n      *a7 = v16 + 1;\n      return v21;\n    }\n    return (unsigned int)-1;\n  }\nLABEL_29:\n  v51 = v13;\n  *((_QWORD *)a7 + 4) = v13 + 1;\n  v21 = (char)*v13;\n  v52 = v13 + 1;\n  v47 = *v13;\n  v22 = strchr(v12, v21);\n  v23 = (__int64)v52;\n  if ( !v51[1] )\n    ++*a7;\n  if ( (unsigned __int8)(v47 - 58) > 1u && v22 )\n  {\n    v24 = v22[1];\n    if ( *v22 == 87 && a4 && v24 == 59 )\n    {\n      if ( v51[1] )\n      {\nLABEL_68:\n        *((_QWORD *)a7 + 4) = v23;\n        *((_QWORD *)a7 + 2) = 0LL;\n        return (unsigned int)sub_407D70(a1, a2, v12, a4, a5, 0, a7, v8, (__int64)\"-W \");\n      }\n      v32 = *a7;\n      if ( (_DWORD)v32 != a1 )\n      {\n        v23 = a2[v32];\n        goto LABEL_68;\n      }\n      if ( v8 )\n      {\n        v43 = *a2;\n        v44 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v44, v43);\n      }\n      a7[2] = v21;\n      return 5 * (unsigned int)(*v12 != 58) + 58;\n    }\n    else if ( v24 == 58 )\n    {\n      v35 = v51[1];\n      if ( v22[2] == 58 )\n      {\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          ++*a7;\n        }\n        else\n        {\n          *((_QWORD *)a7 + 2) = 0LL;\n        }\n      }\n      else\n      {\n        v36 = *a7;\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          *a7 = v36 + 1;\n        }\n        else if ( a1 == (_DWORD)v36 )\n        {\n          if ( v8 )\n          {\n            v41 = *a2;\n            v42 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n            __fprintf_chk(stderr, 1LL, v42, v41);\n          }\n          a7[2] = v21;\n          v21 = 5 * (*v12 != 58) + 58;\n        }\n        else\n        {\n          v37 = v36 + 1;\n          v38 = a2[v36];\n          *a7 = v37;\n          *((_QWORD *)a7 + 2) = v38;\n        }\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n    }\n  }\n  else\n  {\n    if ( v8 )\n    {\n      v39 = *a2;\n      v40 = dcgettext(0LL, \"%s: invalid option -- '%c'\\n\", 5);\n      __fprintf_chk(stderr, 1LL, v40, v39);\n    }\n    a7[2] = v21;\n    return 63;\n  }\n  return v21;\n}\n"
        },
        {
            "funcName": "sub_408960",
            "funcStartAddr": "0x408960",
            "funcEndAddr": "0x4089b6",
            "decompiledFuncCode": "__int64 __fastcall sub_408960(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int a6, int a7)\n{\n  __int64 result; // rax\n\n  dword_613540 = dword_6132BC;\n  dword_613544 = dword_6132B8;\n  result = sub_408390(a1, a2, a3, a4, a5, a6, &dword_613540, a7);\n  dword_6132BC = dword_613540;\n  qword_613580 = qword_613550;\n  dword_6132B4 = dword_613548;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4089C0",
            "funcStartAddr": "0x4089c0",
            "funcEndAddr": "0x4089d8",
            "decompiledFuncCode": "__int64 __fastcall sub_4089C0(int a1, __int64 *a2, const char *a3)\n{\n  return sub_408960(a1, a2, a3, 0LL, 0LL, 0, 1);\n}\n"
        },
        {
            "funcName": "sub_4089E0",
            "funcStartAddr": "0x4089e0",
            "funcEndAddr": "0x4089f3",
            "decompiledFuncCode": "__int64 __fastcall sub_4089E0(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5)\n{\n  return sub_408960(a1, a2, a3, a4, a5, 0, 0);\n}\n"
        },
        {
            "funcName": "sub_408A00",
            "funcStartAddr": "0x408a00",
            "funcEndAddr": "0x408a15",
            "decompiledFuncCode": "__int64 __fastcall sub_408A00(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_408390(a1, a2, a3, a4, a5, 0, a6, 0);\n}\n"
        },
        {
            "funcName": "sub_408A20",
            "funcStartAddr": "0x408a20",
            "funcEndAddr": "0x408a36",
            "decompiledFuncCode": "__int64 __fastcall sub_408A20(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5)\n{\n  return sub_408960(a1, a2, a3, a4, a5, 1, 0);\n}\n"
        },
        {
            "funcName": "sub_408A40",
            "funcStartAddr": "0x408a40",
            "funcEndAddr": "0x408a58",
            "decompiledFuncCode": "__int64 __fastcall sub_408A40(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_408390(a1, a2, a3, a4, a5, 1, a6, 0);\n}\n"
        },
        {
            "funcName": "sub_408A60",
            "funcStartAddr": "0x408a60",
            "funcEndAddr": "0x408ada",
            "decompiledFuncCode": "size_t __fastcall sub_408A60(wchar_t *pwc, char *s, size_t a3, mbstate_t *a4)\n{\n  size_t v4; // rbx\n  wchar_t *v5; // r12\n  const char *v6; // rbp\n  char v8; // [rsp+Ch] [rbp-1Ch] BYREF\n\n  if ( !s )\n  {\n    a3 = 1LL;\n    v6 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_7:\n    v5 = (wchar_t *)&v8;\n    goto LABEL_4;\n  }\n  v4 = -2LL;\n  if ( !a3 )\n    return v4;\n  v5 = pwc;\n  v6 = s;\n  if ( !pwc )\n    goto LABEL_7;\nLABEL_4:\n  v4 = mbrtowc(v5, v6, a3, a4);\n  if ( v4 > 0xFFFFFFFFFFFFFFFDLL && !(unsigned __int8)sub_408BA0(0LL) )\n  {\n    v4 = 1LL;\n    *v5 = *(unsigned __int8 *)v6;\n  }\n  return v4;\n}\n"
        },
        {
            "funcName": "sub_408AE0",
            "funcStartAddr": "0x408ae0",
            "funcEndAddr": "0x408b39",
            "decompiledFuncCode": "__int64 __fastcall sub_408AE0(_QWORD *a1, __int64 a2, __int64 a3)\n{\n  void *v3; // rax\n  unsigned int v4; // edx\n  unsigned __int64 v6; // [rsp+8h] [rbp-10h] BYREF\n\n  v3 = (void *)sub_409290(0LL, &v6, a2, a3);\n  if ( !v3 )\n    return 0xFFFFFFFFLL;\n  v4 = v6;\n  if ( v6 > 0x7FFFFFFF )\n  {\n    free(v3);\n    *__errno_location() = 75;\n    return 0xFFFFFFFFLL;\n  }\n  else\n  {\n    *a1 = v3;\n    return v4;\n  }\n}\n"
        },
        {
            "funcName": "sub_408B40",
            "funcStartAddr": "0x408b40",
            "funcEndAddr": "0x408b9d",
            "decompiledFuncCode": "__int64 __fastcall sub_408B40(FILE *stream)\n{\n  size_t v1; // r12\n  int v2; // ebx\n  __int64 result; // rax\n\n  v1 = __fpending(stream);\n  v2 = stream->_flags & 0x20;\n  result = sub_409170(stream);\n  if ( v2 )\n  {\n    if ( !(_DWORD)result )\n    {\n      *__errno_location() = 0;\n      return 0xFFFFFFFFLL;\n    }\n    return 0xFFFFFFFFLL;\n  }\n  if ( !(_DWORD)result )\n    return result;\n  if ( v1 )\n    return 0xFFFFFFFFLL;\n  return (unsigned int)-(*__errno_location() != 9);\n}\n"
        },
        {
            "funcName": "sub_408BA0",
            "funcStartAddr": "0x408ba0",
            "funcEndAddr": "0x408bfe",
            "decompiledFuncCode": "bool __fastcall sub_408BA0(int a1)\n{\n  char *v1; // rdx\n  bool result; // al\n\n  v1 = setlocale(a1, 0LL);\n  result = 1;\n  if ( v1 )\n  {\n    result = 0;\n    if ( strcmp(v1, \"C\") )\n      return strcmp(v1, \"POSIX\") != 0;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_408C00",
            "funcStartAddr": "0x408c00",
            "funcEndAddr": "0x409162",
            "decompiledFuncCode": "const char *sub_408C00()\n{\n  char *v0; // rax\n  char *v1; // r15\n  const char *v2; // rbx\n  char v3; // bp\n  const char *v4; // rbp\n  char *v6; // rax\n  const char *v7; // r13\n  size_t v8; // rax\n  __int64 v9; // r12\n  size_t v10; // r14\n  size_t v11; // rdi\n  char *v12; // rax\n  char *v13; // rbp\n  size_t v14; // rdi\n  char *v15; // rax\n  int v16; // eax\n  int v17; // r12d\n  FILE *v18; // r13\n  const char *v19; // rax\n  FILE *v20; // rbx\n  const char *v21; // r13\n  char *IO_read_ptr; // rax\n  int v23; // edi\n  char *v24; // kr00_8\n  int *v25; // rdx\n  int v26; // esi\n  unsigned int v27; // eax\n  __int64 v28; // rdx\n  signed __int64 v29; // rax\n  char *v30; // rax\n  __int64 v31; // rcx\n  __int64 v32; // rdx\n  __int64 v33; // rsi\n  unsigned int v34; // ecx\n  signed __int64 v35; // rdi\n  char *v36; // rsi\n  unsigned int v37; // edx\n  char *v38; // rcx\n  FILE *v39; // rdi\n  int v40; // eax\n  bool v41; // dl\n  char *v42; // rax\n  signed __int64 v43; // rax\n  unsigned __int64 v44; // r9\n  char *v45; // rsi\n  char *v46; // r10\n  unsigned int v47; // ecx\n  unsigned int v48; // ecx\n  unsigned int v49; // esi\n  __int64 v50; // r8\n  unsigned __int64 v51; // rdi\n  char *v52; // rcx\n  char *v53; // r9\n  unsigned int v54; // edx\n  unsigned int v55; // edx\n  unsigned int v56; // ecx\n  __int64 v57; // rsi\n  const char *v58; // rax\n  char *v59; // rdi\n  FILE *v60; // r13\n  signed __int64 v61; // [rsp+8h] [rbp-D0h]\n  __int64 v62; // [rsp+18h] [rbp-C0h]\n  char v63[64]; // [rsp+20h] [rbp-B8h] BYREF\n  _QWORD v64[15]; // [rsp+60h] [rbp-78h] BYREF\n\n  v0 = nl_langinfo(14);\n  v1 = s;\n  v2 = v0;\n  if ( !v0 )\n    v2 = \"\";\n  if ( !s )\n  {\n    v6 = getenv(\"CHARSETALIASDIR\");\n    v7 = v6;\n    if ( v6 && *v6 )\n    {\n      v8 = strlen(v6);\n      v9 = v8;\n      v10 = v8;\n      if ( !v8 )\n      {\n        v11 = 14LL;\nLABEL_18:\n        v12 = (char *)malloc(v11);\n        v13 = v12;\n        if ( !v12 )\n        {\nLABEL_19:\n          v1 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\nLABEL_20:\n          s = v1;\n          goto LABEL_4;\n        }\n        memcpy(v12, v7, v10);\nLABEL_24:\n        strcpy(&v13[v9], \"charset.alias\");\n        v16 = open(v13, 0);\n        v17 = v16;\n        if ( v16 >= 0 )\n        {\n          v1 = 0LL;\n          v61 = 0LL;\n          v18 = fdopen(v16, \"r\");\n          if ( v18 )\n          {\n            v19 = v2;\n            v20 = v18;\n            v21 = v19;\nLABEL_30:\n            IO_read_ptr = v20->_IO_read_ptr;\n            if ( IO_read_ptr < v20->_IO_read_end )\n            {\nLABEL_31:\n              v20->_IO_read_ptr = IO_read_ptr + 1;\n              v23 = (unsigned __int8)*IO_read_ptr;\n              goto LABEL_32;\n            }\n            while ( 1 )\n            {\n              v23 = __uflow(v20);\n              if ( v23 == -1 )\n                break;\nLABEL_32:\n              if ( (unsigned int)(v23 - 9) <= 1 || v23 == 32 )\n                goto LABEL_30;\n              if ( v23 == 35 )\n              {\n                do\n                {\n                  v42 = v20->_IO_read_ptr;\n                  if ( v42 < v20->_IO_read_end )\n                  {\n                    v20->_IO_read_ptr = v42 + 1;\n                    v40 = (unsigned __int8)*v42;\n                    v41 = 1;\n                  }\n                  else\n                  {\n                    v40 = __uflow(v20);\n                    v41 = v40 != -1;\n                  }\n                }\n                while ( v40 != 10 && v41 );\n                if ( v40 == -1 )\n                  break;\n                goto LABEL_30;\n              }\n              ungetc(v23, v20);\n              if ( fscanf(v20, \"%50s %50s\", v63, v64) <= 1 )\n                break;\n              v24 = &v63[strlen(v63)];\n              v25 = (int *)v64;\n              do\n              {\n                v26 = *v25++;\n                v27 = ~v26 & (v26 - 16843009) & 0x80808080;\n              }\n              while ( !v27 );\n              if ( (~v26 & (v26 - 16843009) & 0x8080) == 0 )\n              {\n                v27 >>= 16;\n                v25 = (int *)((char *)v25 + 2);\n              }\n              v28 = (char *)v25 - __CFADD__((_BYTE)v27, (_BYTE)v27) - 3 - (char *)v64;\n              v29 = v24 - v63 + v28;\n              v62 = v28;\n              if ( v61 )\n              {\n                v43 = v61 + v29;\n                v61 = v43 + 2;\n                v30 = (char *)realloc(v1, v43 + 3);\n                v32 = v62;\n                v31 = v24 - v63;\n              }\n              else\n              {\n                v61 = v29 + 2;\n                v30 = (char *)malloc(v29 + 3);\n                v31 = v24 - v63;\n                v32 = v62;\n              }\n              if ( !v30 )\n              {\n                v58 = v21;\n                v59 = v1;\n                v60 = v20;\n                v1 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\n                v2 = v58;\n                free(v59);\n                sub_409170(v60);\n                goto LABEL_26;\n              }\n              v33 = -2 - v31;\n              v34 = v31 + 1;\n              v35 = v61 - v32;\n              v36 = &v30[v61 - v32 + v33];\n              if ( v34 >= 8 )\n              {\n                *(_QWORD *)v36 = *(_QWORD *)v63;\n                *(_QWORD *)&v36[v34 - 8] = *(_QWORD *)&v63[v34 - 8];\n                v44 = (unsigned __int64)(v36 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v45 = &v36[-v44];\n                v46 = (char *)(v63 - v45);\n                v47 = ((_DWORD)v45 + v34) & 0xFFFFFFF8;\n                if ( v47 >= 8 )\n                {\n                  v48 = v47 & 0xFFFFFFF8;\n                  v49 = 0;\n                  do\n                  {\n                    v50 = v49;\n                    v49 += 8;\n                    *(_QWORD *)(v44 + v50) = *(_QWORD *)&v46[v50];\n                  }\n                  while ( v49 < v48 );\n                }\n              }\n              else if ( (v34 & 4) != 0 )\n              {\n                *(_DWORD *)v36 = *(_DWORD *)v63;\n                *(_DWORD *)&v36[v34 - 4] = *(_DWORD *)&v63[v34 - 4];\n              }\n              else if ( v34 )\n              {\n                *v36 = v63[0];\n                if ( (v34 & 2) != 0 )\n                  *(_WORD *)&v36[v34 - 2] = *(_WORD *)&v63[v34 - 2];\n              }\n              v37 = v32 + 1;\n              v38 = &v30[v35 - 1];\n              if ( v37 >= 8 )\n              {\n                *(_QWORD *)v38 = v64[0];\n                *(_QWORD *)&v38[v37 - 8] = *(_QWORD *)&v63[v37 + 56];\n                v51 = (unsigned __int64)(v38 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v52 = &v38[-v51];\n                v53 = (char *)((char *)v64 - v52);\n                v54 = ((_DWORD)v52 + v37) & 0xFFFFFFF8;\n                if ( v54 >= 8 )\n                {\n                  v55 = v54 & 0xFFFFFFF8;\n                  v56 = 0;\n                  do\n                  {\n                    v57 = v56;\n                    v56 += 8;\n                    *(_QWORD *)(v51 + v57) = *(_QWORD *)&v53[v57];\n                  }\n                  while ( v56 < v55 );\n                }\n              }\n              else if ( (v37 & 4) != 0 )\n              {\n                *(_DWORD *)v38 = v64[0];\n                *(_DWORD *)&v38[v37 - 4] = *(_DWORD *)&v63[v37 + 60];\n              }\n              else if ( v37 )\n              {\n                *v38 = v64[0];\n                if ( (v37 & 2) != 0 )\n                  *(_WORD *)&v38[v37 - 2] = *(_WORD *)&v63[v37 + 62];\n              }\n              v1 = v30;\n              IO_read_ptr = v20->_IO_read_ptr;\n              if ( IO_read_ptr < v20->_IO_read_end )\n                goto LABEL_31;\n            }\n            v39 = v20;\n            v2 = v21;\n            sub_409170(v39);\n            if ( !v61 )\n              goto LABEL_25;\n            v1[v61] = 0;\n            goto LABEL_26;\n          }\n          close(v17);\n        }\nLABEL_25:\n        v1 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\nLABEL_26:\n        free(v13);\n        goto LABEL_20;\n      }\n      if ( v7[v8 - 1] == 47 )\n      {\n        v11 = v8 + 14;\n        goto LABEL_18;\n      }\n      v14 = v8 + 15;\n      v9 = v8 + 1;\n    }\n    else\n    {\n      v14 = 115LL;\n      v9 = 101LL;\n      v10 = 100LL;\n      v7 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n    }\n    v15 = (char *)malloc(v14);\n    v13 = v15;\n    if ( !v15 )\n      goto LABEL_19;\n    memcpy(v15, v7, v10);\n    v13[v10] = 47;\n    goto LABEL_24;\n  }\nLABEL_4:\n  v3 = *v1;\n  if ( *v1 )\n  {\n    while ( strcmp(v2, v1) && (v3 != 42 || v1[1]) )\n    {\n      v4 = &v1[strlen(v1) + 1];\n      v1 = (char *)&v4[strlen(v4) + 1];\n      v3 = *v1;\n      if ( !*v1 )\n        goto LABEL_11;\n    }\n    v2 = &v1[strlen(v1) + 1];\n  }\nLABEL_11:\n  if ( !*v2 )\n    return \"ASCII\";\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_409170",
            "funcStartAddr": "0x409170",
            "funcEndAddr": "0x4091eb",
            "decompiledFuncCode": "int __fastcall sub_409170(FILE *stream)\n{\n  int *v1; // rax\n  int v2; // r12d\n  int *v3; // rbp\n  int result; // eax\n  int v5; // eax\n\n  if ( fileno(stream) < 0 )\n    return fclose(stream);\n  if ( __freading(stream) )\n  {\n    v5 = fileno(stream);\n    if ( lseek(v5, 0LL, 1) == -1 )\n      return fclose(stream);\n  }\n  if ( !(unsigned int)sub_4091F0(stream) )\n    return fclose(stream);\n  v1 = __errno_location();\n  v2 = *v1;\n  v3 = v1;\n  result = fclose(stream);\n  if ( v2 )\n  {\n    *v3 = v2;\n    return -1;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4091F0",
            "funcStartAddr": "0x4091f0",
            "funcEndAddr": "0x409230",
            "decompiledFuncCode": "int __fastcall sub_4091F0(FILE *stream)\n{\n  if ( !stream || !__freading(stream) || (stream->_flags & 0x100) == 0 )\n    return fflush(stream);\n  sub_409230(stream, 0LL, 1LL);\n  return fflush(stream);\n}\n"
        },
        {
            "funcName": "sub_409230",
            "funcStartAddr": "0x409230",
            "funcEndAddr": "0x409287",
            "decompiledFuncCode": "int __fastcall sub_409230(FILE *a1, __off_t a2, int a3)\n{\n  __off_t v3; // rax\n  int v5; // eax\n\n  if ( a1->_IO_read_end == a1->_IO_read_ptr && a1->_IO_write_ptr == a1->_IO_write_base && !a1->_IO_save_base )\n  {\n    v5 = fileno(a1);\n    v3 = lseek(v5, a2, a3);\n    if ( v3 != -1 )\n    {\n      a1->_flags &= ~0x10u;\n      a1->_offset = v3;\n      LODWORD(v3) = 0;\n    }\n  }\n  else\n  {\n    LODWORD(v3) = fseeko(a1, a2, a3);\n  }\n  return v3;\n}\n"
        },
        {
            "funcName": "sub_409290",
            "funcStartAddr": "0x401a93",
            "funcEndAddr": "0x401a98",
            "decompiledFuncCode": "char *__fastcall sub_409290(void *a1, size_t *a2, _BYTE *a3, __int64 a4, double a5)\n{\n  __int64 v7; // rax\n  unsigned __int64 v8; // rax\n  size_t v9; // rdi\n  __int64 *v10; // rax\n  size_t v11; // r12\n  char *v12; // r14\n  _BYTE *v13; // r8\n  char *v14; // rbx\n  size_t v15; // r15\n  _BYTE *v16; // rcx\n  void *v17; // rcx\n  unsigned __int64 v18; // rax\n  size_t v19; // r13\n  bool v20; // dl\n  char *v21; // rax\n  char *v22; // rax\n  void *v23; // rsp\n  char *v24; // rax\n  char v25; // r15\n  __int64 v26; // rax\n  char *v27; // r8\n  long double *v28; // rdx\n  int v29; // eax\n  char v30; // al\n  int v31; // eax\n  char *v32; // r15\n  __int64 v33; // rdi\n  _BYTE *v34; // rsi\n  _BYTE *v35; // rdx\n  _BYTE *v36; // rsi\n  _BYTE *v37; // rdx\n  __int64 v38; // rax\n  char v39; // al\n  __int64 v40; // rax\n  char *v41; // rax\n  __int64 v42; // rax\n  char *v43; // r8\n  int v44; // eax\n  unsigned __int64 v45; // rax\n  char *v46; // r11\n  int *v47; // rax\n  char *v48; // r11\n  unsigned __int64 v49; // rbx\n  unsigned __int64 v50; // r10\n  char *v51; // rdx\n  char *v52; // rcx\n  __int64 v53; // rsi\n  _DWORD *v54; // r8\n  unsigned __int64 v55; // rdx\n  unsigned __int64 v56; // rcx\n  void *v57; // r15\n  unsigned __int64 v59; // rax\n  char *v60; // rax\n  char v62; // fps^1\n  char *v66; // rdx\n  char *v67; // rdi\n  int v68; // r11d\n  __int64 v69; // rcx\n  _DWORD *v70; // rcx\n  char *v71; // rdi\n  unsigned __int64 v72; // r9\n  int v73; // eax\n  int v74; // edx\n  __int64 v75; // rax\n  bool v76; // cf\n  unsigned __int64 v77; // rax\n  bool v78; // bl\n  char *v79; // rax\n  int v80; // ebx\n  __int64 v81; // rax\n  char *v82; // rdi\n  unsigned __int128 v83; // fst7\n  __int64 v84; // rax\n  char *v85; // rdi\n  unsigned __int64 v86; // rax\n  void *v87; // rax\n  char *v88; // rax\n  char *v89; // rcx\n  int v90; // r8d\n  __int16 v91; // ax\n  char *v92; // r15\n  char *v93; // rax\n  char *v94; // rax\n  char *v95; // rax\n  char v96; // al\n  char *v97; // r9\n  size_t v98; // r8\n  unsigned __int64 v99; // r10\n  char *v100; // rdi\n  __int64 v101; // rax\n  char *v102; // r10\n  unsigned __int64 v103; // rax\n  char *v104; // rax\n  char *v105; // rsi\n  char v106; // al\n  size_t v107; // r15\n  size_t v108; // r14\n  bool v109; // r13\n  char *v110; // rax\n  char *v111; // rax\n  __int64 v112; // rax\n  char *v113; // r10\n  char *v114; // rax\n  char *v115; // rax\n  char *v116; // rax\n  __int64 v117; // rsi\n  __int64 v118; // rdx\n  char v119; // al\n  __int64 v120; // rdx\n  char *v121; // rax\n  char *v122; // rax\n  __int64 v123; // rdx\n  char v124; // al\n  char *v125; // rax\n  char *v126; // rsi\n  __int64 v127; // r9\n  __int64 v128; // rdx\n  char *v129; // rax\n  char *v130; // rsi\n  char *v131; // rdi\n  __int64 v132; // rax\n  __int64 v133; // rsi\n  unsigned __int64 v134; // rax\n  char v135; // al\n  __int64 v136; // rsi\n  char v137; // al\n  char *v138; // rax\n  __int64 v139; // rdx\n  char v140; // al\n  char *v141; // rax\n  char *v142; // rax\n  char *v143; // rax\n  void *v144; // rdx\n  char v145; // al\n  _BYTE *v146; // rax\n  char *v147; // rax\n  char v148; // al\n  __int64 v149; // [rsp-8h] [rbp-718h]\n  int *v150; // [rsp+10h] [rbp-700h]\n  int *v151; // [rsp+18h] [rbp-6F8h]\n  __int64 v152; // [rsp+20h] [rbp-6F0h] BYREF\n  unsigned __int64 v153; // [rsp+28h] [rbp-6E8h]\n  char *v154; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v156; // [rsp+40h] [rbp-6D0h]\n  void *v157; // [rsp+48h] [rbp-6C8h]\n  char *v158; // [rsp+50h] [rbp-6C0h]\n  __int64 v159; // [rsp+58h] [rbp-6B8h]\n  _BYTE *v160; // [rsp+60h] [rbp-6B0h]\n  __int64 *v161; // [rsp+68h] [rbp-6A8h]\n  long double v162; // [rsp+70h] [rbp-6A0h]\n  void *v163; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v165; // [rsp+94h] [rbp-67Ch] BYREF\n  unsigned int v166; // [rsp+98h] [rbp-678h]\n  unsigned int v167; // [rsp+9Ch] [rbp-674h]\n  char v168[8]; // [rsp+A0h] [rbp-670h] BYREF\n  void *v169; // [rsp+A8h] [rbp-668h]\n  _BYTE v170[224]; // [rsp+B0h] [rbp-660h] BYREF\n  __int64 v171; // [rsp+190h] [rbp-580h] BYREF\n  void *v172; // [rsp+198h] [rbp-578h]\n  __int64 v173; // [rsp+1A0h] [rbp-570h]\n  __int64 v174; // [rsp+1A8h] [rbp-568h]\n  _BYTE v175[624]; // [rsp+1B0h] [rbp-560h] BYREF\n  char v176[752]; // [rsp+420h] [rbp-2F0h] BYREF\n\n  src = a1;\n  v156 = a2;\n  if ( (int)sub_40AFD0(a3, &v171, v168) < 0 )\n    return 0LL;\n  if ( (int)sub_40ADB0(a4, v168) >= 0 )\n  {\n    v7 = v173 + 7;\n    if ( (unsigned __int64)(v173 + 7) <= 6 )\n      v7 = -1LL;\n    v76 = __CFADD__(v174, v7);\n    v8 = v174 + v7;\n    if ( v76 )\n      goto LABEL_112;\n    v9 = v8 + 6;\n    if ( v8 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v9 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v23 = alloca(v8 + 14);\n      v161 = &v152;\n    }\n    else\n    {\n      if ( v8 == -7LL )\n        goto LABEL_112;\n      v10 = (__int64 *)malloc(v9);\n      v161 = v10;\n      if ( !v10 )\n        goto LABEL_112;\n      ptr = v10;\n    }\n    v11 = 0LL;\n    if ( src )\n      v11 = *v156;\n    v12 = (char *)v172;\n    v13 = a3;\n    v14 = (char *)src;\n    v159 = 0LL;\n    v15 = 0LL;\n    v16 = *(_BYTE **)v172;\n    if ( *(_BYTE **)v172 == v13 )\n      goto LABEL_111;\nLABEL_14:\n    v17 = (void *)(v16 - v13);\n    v18 = (unsigned __int64)v17 + v15;\n    v19 = (size_t)v17 + v15;\n    if ( __CFADD__(v17, v15) )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n      v19 = -1LL;\n    }\n    else if ( v11 < v18 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v18 )\n        {\nLABEL_28:\n          v20 = v14 == src;\n          if ( !v14 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v18 <= 0xC )\n      {\n        v11 = 12LL;\n        v20 = v14 == src;\n        if ( !v14 )\n        {\nLABEL_19:\n          v160 = v13;\n          LOBYTE(v162) = v20;\n          v163 = v17;\n          v21 = (char *)malloc(v11);\n          v17 = v163;\n          v13 = v160;\n          if ( !v21 )\n            goto LABEL_88;\n          if ( v15 && LOBYTE(v162) )\n          {\n            *(_QWORD *)&v162 = v160;\n            v22 = (char *)memcpy(v21, v14, v15);\n            v17 = v163;\n            v13 = *(_BYTE **)&v162;\n            v14 = v22;\n          }\n          else\n          {\n            v14 = v21;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v20 )\n        {\n          *(_QWORD *)&v162 = v13;\n          v163 = v17;\n          v24 = (char *)realloc(v14, v11);\n          if ( !v24 )\n            goto LABEL_126;\n          v17 = v163;\n          v13 = *(_BYTE **)&v162;\n          v14 = v24;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v18 == -1LL )\n        goto LABEL_88;\n      v11 = (size_t)v17 + v15;\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v14[v15], v13, (size_t)v17);\n    while ( v171 != v159 )\n    {\n      v25 = v12[72];\n      v26 = *((_QWORD *)v12 + 10);\n      if ( v25 == 37 )\n      {\n        if ( v26 != -1 )\n          goto LABEL_200;\n        v59 = v19 + 1;\n        v15 = v19 + 1;\n        if ( v19 == -1LL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n          v15 = -1LL;\n        }\n        else if ( v11 < v59 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 < v59 )\n              goto LABEL_238;\n          }\n          else\n          {\n            if ( v59 <= 0xC )\n            {\n              v11 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_238:\n            if ( v19 == -2LL )\n              goto LABEL_88;\n            v11 = v19 + 1;\n          }\nLABEL_105:\n          if ( v14 && v14 != src )\n          {\n            v60 = (char *)realloc(v14, v11);\n            if ( v60 )\n            {\n              v14 = v60;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v57 = v14;\n            *(_QWORD *)&v162 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v163) = v14 == src;\n          v95 = (char *)malloc(v11);\n          if ( !v95 )\n            goto LABEL_88;\n          if ( v19 && (_BYTE)v163 )\n            v14 = (char *)memcpy(v95, v14, v19);\n          else\n            v14 = v95;\n        }\nLABEL_109:\n        v14[v19] = 37;\n        goto LABEL_110;\n      }\n      if ( v26 == -1 )\n        goto LABEL_200;\n      v27 = (char *)v169;\n      v28 = (long double *)((char *)v169 + 32 * v26);\n      v29 = *(_DWORD *)v28;\n      LODWORD(v163) = *(_DWORD *)v28;\n      if ( v25 != 110 )\n      {\n        v30 = v25 & 0xDF;\n        if ( ((unsigned __int8)((v25 & 0xDF) - 69) <= 2u || v30 == 65) && (_DWORD)v163 == 12 )\n        {\n          _FST7 = v28[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v66 = (char *)*((_QWORD *)v12 + 3);\n            v67 = (char *)*((_QWORD *)v12 + 4);\n            v68 = *((_DWORD *)v12 + 4);\n            if ( v66 == v67 )\n            {\n              v50 = 0LL;\n            }\n            else\n            {\n              v69 = *((_QWORD *)v12 + 5);\n              if ( v69 == -1 )\n              {\n                v50 = 0LL;\n                v163 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v126 = v66 + 1;\n                  v127 = -1LL;\n                  v128 = *v66 - 48;\n                  if ( v50 <= 0x1999999999999999LL )\n                    v127 = 10 * v50;\n                  v76 = __CFADD__(v127, v128);\n                  v50 = v127 + v128;\n                  v66 = v126;\n                  if ( v76 )\n                  {\n                    if ( v67 == v126 )\n                    {\nLABEL_81:\n                      v50 = (unsigned __int64)v163;\n                      goto LABEL_82;\n                    }\n                    while ( *v66++ != 48 )\n                    {\n                      if ( v67 == v66 )\n                        goto LABEL_81;\n                    }\n                    v50 = -1LL;\n                  }\n                  if ( v67 == v66 )\n                    goto LABEL_82;\n                }\n              }\n              v70 = (char *)v169 + 32 * v69;\n              if ( *v70 != 5 )\n                goto LABEL_200;\n              v50 = (int)v70[4];\n              if ( (v50 & 0x80000000) != 0LL )\n              {\n                v68 |= 2u;\n                v50 = -(__int64)v50;\n              }\n            }\nLABEL_82:\n            v51 = (char *)*((_QWORD *)v12 + 6);\n            v52 = (char *)*((_QWORD *)v12 + 7);\n            if ( v51 != v52 )\n            {\n              v53 = *((_QWORD *)v12 + 8);\n              if ( v53 == -1 )\n              {\n                v129 = v51 + 1;\n                v55 = 0LL;\n                if ( v52 != v129 )\n                {\n                  v130 = v129;\n                  while ( 1 )\n                  {\n                    v131 = v130 + 1;\n                    v132 = *v130 - 48;\n                    v133 = -1LL;\n                    if ( v55 <= 0x1999999999999999LL )\n                      v133 = 10 * v55;\n                    v76 = __CFADD__(v133, v132);\n                    v134 = v133 + v132;\n                    v130 = v131;\n                    v55 = v134;\n                    if ( v76 )\n                    {\n                      if ( v52 == v131 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v130 = v131 + 1;\n                        if ( *v131 == 48 )\n                          break;\n                        if ( v52 == v130 )\n                          goto LABEL_88;\n                        ++v131;\n                      }\n                      v55 = -1LL;\n                    }\n                    if ( v52 == v130 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_375;\n              }\n              v54 = (char *)v169 + 32 * v53;\n              if ( *v54 != 5 )\n                goto LABEL_200;\n              v55 = (int)v54[4];\n              if ( (v55 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v55 )\n                {\n                  v56 = v55 + 12;\n                  if ( v55 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_190:\n                  v86 = v56;\n                  if ( v50 >= v56 )\n                    v86 = v50;\n                  v76 = __CFADD__(v86, 1LL);\n                  v87 = (void *)(v86 + 1);\n                  v163 = v87;\n                  if ( v76 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v87 <= 0x2BC )\n                  {\n                    v89 = v176;\n                  }\n                  else\n                  {\n                    v157 = (void *)v50;\n                    v158 = (char *)v55;\n                    LODWORD(v160) = v68;\n                    v162 = _FST7;\n                    if ( v87 == (void *)-1LL )\n                      goto LABEL_88;\n                    v88 = (char *)malloc((size_t)v87);\n                    v68 = (int)v160;\n                    _FST7 = v162;\n                    v89 = v88;\n                    v55 = (unsigned __int64)v158;\n                    v50 = (unsigned __int64)v157;\n                    if ( !v88 )\n                      goto LABEL_88;\n                  }\n                  v90 = (unsigned __int16)v166;\n                  LOBYTE(v91) = v166;\n                  HIBYTE(v91) = BYTE1(v166) | 3;\n                  LOWORD(v166) = v91;\n                  __asm { fxam }\n                  if ( (v62 & 2) != 0 )\n                  {\n                    *v89 = 45;\n                    _FST7 = -_FST7;\n                    v92 = v89 + 1;\n                  }\n                  else if ( (v68 & 4) != 0 )\n                  {\n                    v92 = v89 + 1;\n                    *v89 = 43;\n                  }\n                  else\n                  {\n                    v92 = v89;\n                    if ( (v68 & 8) != 0 )\n                    {\n                      v92 = v89 + 1;\n                      *v89 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_200;\n                    v97 = v92 + 3;\n                    if ( (unsigned __int8)(v12[72] - 65) > 0x19u )\n                    {\n                      v92[2] = 102;\n                      *(_WORD *)v92 = 28265;\n                    }\n                    else\n                    {\n                      v92[2] = 70;\n                      *(_WORD *)v92 = 20041;\n                    }\n                    v92 = 0LL;\n                    goto LABEL_263;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_200;\n                  v96 = v12[72] & 0xDF;\n                  switch ( v96 )\n                  {\n                    case 'F':\n                      *v92 = 48;\n                      if ( (v68 & 0x10) != 0 || v55 )\n                      {\n                        LODWORD(v153) = v90;\n                        v154 = (char *)v50;\n                        v157 = v89;\n                        v158 = (char *)v55;\n                        LODWORD(v160) = v68;\n                        *(_QWORD *)&v162 = v92 + 2;\n                        v122 = nl_langinfo(0x10000);\n                        v123 = (__int64)v158;\n                        v97 = *(char **)&v162;\n                        v124 = *v122;\n                        LOBYTE(v68) = (_BYTE)v160;\n                        v89 = (char *)v157;\n                        v50 = (unsigned __int64)v154;\n                        LOWORD(v90) = v153;\n                        if ( !v124 )\n                          v124 = 46;\n                        v92[1] = v124;\n                        if ( v123 )\n                        {\n                          v125 = v97;\n                          do\n                            *v125++ = 48;\n                          while ( v125 != &v92[v123 + 2] );\n                          v97 += v123;\n                        }\n                        goto LABEL_263;\n                      }\n                      goto LABEL_262;\n                    case 'E':\n                      *v92 = 48;\n                      if ( (v68 & 0x10) != 0 || (v105 = v92 + 1, v55) )\n                      {\n                        LODWORD(v153) = v90;\n                        v154 = (char *)v50;\n                        v157 = v89;\n                        v158 = (char *)v55;\n                        LODWORD(v160) = v68;\n                        *(_QWORD *)&v162 = v92 + 2;\n                        v138 = nl_langinfo(0x10000);\n                        v139 = (__int64)v158;\n                        v105 = *(char **)&v162;\n                        v140 = *v138;\n                        LOBYTE(v68) = (_BYTE)v160;\n                        v89 = (char *)v157;\n                        v50 = (unsigned __int64)v154;\n                        LOWORD(v90) = v153;\n                        if ( !v140 )\n                          v140 = 46;\n                        v92[1] = v140;\n                        if ( v139 )\n                        {\n                          v141 = v105;\n                          do\n                            *v141++ = 48;\n                          while ( v141 != &v92[v139 + 2] );\n                          v105 += v139;\n                        }\n                      }\n                      v106 = v12[72];\n                      v97 = v105 + 4;\n                      v105[3] = 48;\n                      *v105 = v106;\n                      *(_WORD *)(v105 + 1) = 12331;\n                      goto LABEL_263;\n                    case 'G':\n                      *v92 = 48;\n                      if ( (v68 & 0x10) != 0 )\n                      {\n                        if ( v55 )\n                        {\n                          HIDWORD(v152) = v90;\n                          v153 = v50;\n                          v154 = v92 + 2;\n                          v157 = v89;\n                          LODWORD(v158) = v68;\n                          v160 = (_BYTE *)v55;\n                          *(_QWORD *)&v162 = v55 - 1;\n                          v116 = nl_langinfo(0x10000);\n                          v117 = *(_QWORD *)&v162;\n                          v118 = (__int64)v160;\n                          v119 = *v116;\n                          LOBYTE(v68) = (_BYTE)v158;\n                          v89 = (char *)v157;\n                          v97 = v154;\n                          v50 = v153;\n                          LOWORD(v90) = WORD2(v152);\n                          if ( !v119 )\n                            v119 = 46;\n                          v92[1] = v119;\n                          if ( v117 )\n                          {\n                            v120 = (__int64)&v92[v118 + 1];\n                            v121 = v97;\n                            do\n                              *v121++ = 48;\n                            while ( v121 != (char *)v120 );\n                            v97 += v117;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v154) = v90;\n                          v157 = (void *)v50;\n                          v158 = v92 + 2;\n                          v160 = v89;\n                          LODWORD(v162) = v68;\n                          v147 = nl_langinfo(0x10000);\n                          LOBYTE(v68) = LOBYTE(v162);\n                          v89 = v160;\n                          v148 = *v147;\n                          v97 = v158;\n                          v50 = (unsigned __int64)v157;\n                          LOWORD(v90) = (_WORD)v154;\n                          if ( !v148 )\n                            v148 = 46;\n                          v92[1] = v148;\n                        }\n                        goto LABEL_263;\n                      }\nLABEL_262:\n                      v97 = v92 + 1;\n                      goto LABEL_263;\n                  }\n                  if ( v96 != 65 )\n                    goto LABEL_200;\n                  *v92 = 48;\n                  *(_QWORD *)&v162 = v92 + 2;\n                  v135 = v12[72];\n                  v92[2] = 48;\n                  v92[1] = v135 + 23;\n                  if ( (v68 & 0x10) != 0 || (v136 = (__int64)(v92 + 3), v55) )\n                  {\n                    HIDWORD(v152) = v90;\n                    v153 = v50;\n                    v154 = v89;\n                    v157 = (void *)v55;\n                    LODWORD(v158) = v68;\n                    v160 = v92 + 4;\n                    v143 = nl_langinfo(0x10000);\n                    v144 = v157;\n                    v136 = (__int64)v160;\n                    v145 = *v143;\n                    LOBYTE(v68) = (_BYTE)v158;\n                    v89 = v154;\n                    v50 = v153;\n                    LOWORD(v90) = WORD2(v152);\n                    if ( !v145 )\n                      v145 = 46;\n                    v92[3] = v145;\n                    if ( v144 )\n                    {\n                      v146 = (_BYTE *)v136;\n                      do\n                        *v146++ = 48;\n                      while ( v146 != (_BYTE *)v144 + (_QWORD)v92 + 4 );\n                      v136 += (__int64)v144;\n                    }\n                  }\n                  v137 = v12[72];\n                  v97 = (char *)(v136 + 3);\n                  *(_WORD *)(v136 + 1) = 12331;\n                  v92 = *(char **)&v162;\n                  *(_BYTE *)v136 = v137 + 15;\nLABEL_263:\n                  LOWORD(v166) = v90;\n                  v98 = v97 - v89;\n                  if ( v50 > v97 - v89 )\n                  {\n                    v99 = v50 - v98;\n                    v100 = &v97[v99];\n                    v98 = &v97[v99] - v89;\n                    if ( (v68 & 2) != 0 )\n                    {\n                      if ( v99 )\n                      {\n                        do\n                          *v97++ = 32;\n                        while ( v100 != v97 );\n                      }\n                    }\n                    else if ( (v68 & 0x20) != 0 && v92 )\n                    {\n                      if ( v92 >= v97 )\n                      {\n                        v92 = v97;\n                      }\n                      else\n                      {\n                        v101 = -1LL;\n                        do\n                        {\n                          v100[v101] = v97[v101];\n                          --v101;\n                        }\n                        while ( v101 != v92 - 1 - v97 );\n                      }\n                      if ( v99 )\n                      {\n                        v102 = &v92[v99];\n                        do\n                          *v92++ = 48;\n                        while ( v92 != v102 );\n                      }\n                    }\n                    else\n                    {\n                      v112 = -1LL;\n                      if ( v89 < v97 )\n                      {\n                        do\n                        {\n                          v100[v112] = v97[v112];\n                          --v112;\n                        }\n                        while ( v89 - 1 - v97 != v112 );\n                        v97 = v89;\n                      }\n                      if ( v99 )\n                      {\n                        v113 = &v97[v99];\n                        do\n                          *v97++ = 32;\n                        while ( v97 != v113 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v163 <= v98 )\n                    goto LABEL_200;\n                  v103 = v98 + v19;\n                  v15 = v98 + v19;\n                  if ( v11 - v19 <= v98 )\n                  {\n                    if ( __CFADD__(v98, v19) )\n                    {\n                      if ( v11 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v11 < v103 )\n                    {\n                      if ( v11 )\n                      {\n                        if ( (v11 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v11 *= 2LL;\n                        if ( v11 < v103 )\n                          goto LABEL_373;\n                      }\n                      else\n                      {\n                        if ( v103 <= 0xC )\n                        {\n                          v11 = 12LL;\n                          goto LABEL_280;\n                        }\nLABEL_373:\n                        if ( v103 == -1LL )\n                          goto LABEL_88;\n                        v11 = v98 + v19;\n                      }\nLABEL_280:\n                      if ( !v14 || v14 == src )\n                      {\n                        LOBYTE(v160) = v14 == src;\n                        *(_QWORD *)&v162 = v98;\n                        v163 = v89;\n                        v114 = (char *)malloc(v11);\n                        v89 = (char *)v163;\n                        v98 = *(_QWORD *)&v162;\n                        if ( !v114 )\n                          goto LABEL_88;\n                        if ( v19 && (_BYTE)v160 )\n                        {\n                          v115 = (char *)memcpy(v114, v14, v19);\n                          v89 = (char *)v163;\n                          v98 = *(_QWORD *)&v162;\n                          v14 = v115;\n                        }\n                        else\n                        {\n                          v14 = v114;\n                        }\n                      }\n                      else\n                      {\n                        *(_QWORD *)&v162 = v98;\n                        v163 = v89;\n                        v104 = (char *)realloc(v14, v11);\n                        if ( !v104 )\n                          goto LABEL_88;\n                        v89 = (char *)v163;\n                        v98 = *(_QWORD *)&v162;\n                        v14 = v104;\n                      }\n                    }\n                  }\n                  v163 = v89;\n                  memcpy(&v14[v19], v89, v98);\n                  if ( v163 != v176 )\n                    free(v163);\n                  goto LABEL_110;\n                }\nLABEL_375:\n                v56 = 12LL;\n                goto LABEL_190;\n              }\n            }\n            v56 = 12LL;\n            if ( v30 != 65 )\n              v56 = 18LL;\n            v55 = 0LL;\n            if ( v30 != 65 )\n              v55 = 6LL;\n            goto LABEL_190;\n          }\n        }\n        v31 = *((_DWORD *)v12 + 4);\n        v32 = (char *)v161 + 1;\n        *(_BYTE *)v161 = 37;\n        if ( (v31 & 1) != 0 )\n        {\n          v33 = (__int64)v161;\n          *((_BYTE *)v161 + 1) = 39;\n          v32 = (char *)(v33 + 2);\n        }\n        if ( (v31 & 2) != 0 )\n          *v32++ = 45;\n        if ( (v31 & 4) != 0 )\n          *v32++ = 43;\n        if ( (v31 & 8) != 0 )\n          *v32++ = 32;\n        if ( (v31 & 0x10) != 0 )\n          *v32++ = 35;\n        if ( (v31 & 0x40) != 0 )\n          *v32++ = 73;\n        if ( (v31 & 0x20) != 0 )\n          *v32++ = 48;\n        v34 = (_BYTE *)*((_QWORD *)v12 + 3);\n        v35 = (_BYTE *)*((_QWORD *)v12 + 4);\n        if ( v34 != v35 )\n        {\n          v160 = v27;\n          *(_QWORD *)&v162 = v35 - v34;\n          memcpy(v32, v34, v35 - v34);\n          v27 = v160;\n          v32 += *(_QWORD *)&v162;\n        }\n        v36 = (_BYTE *)*((_QWORD *)v12 + 6);\n        v37 = (_BYTE *)*((_QWORD *)v12 + 7);\n        if ( v36 != v37 )\n        {\n          v160 = v27;\n          *(_QWORD *)&v162 = v37 - v36;\n          memcpy(v32, v36, v37 - v36);\n          v27 = v160;\n          v32 += *(_QWORD *)&v162;\n        }\n        if ( (unsigned int)v163 <= 0x10 )\n        {\n          v38 = 1LL << (char)v163;\n          if ( ((1LL << (char)v163) & 0x14180) != 0 )\n            goto LABEL_125;\n          if ( (v38 & 0x1000) != 0 )\n          {\n            *v32++ = 76;\n          }\n          else\n          {\n            if ( (v38 & 0x600) == 0 )\n              goto LABEL_62;\n            *v32++ = 108;\nLABEL_125:\n            *v32++ = 108;\n          }\n        }\nLABEL_62:\n        v39 = v12[72];\n        v32[1] = 0;\n        *v32 = v39;\n        v40 = *((_QWORD *)v12 + 5);\n        if ( v40 != -1 )\n        {\n          v41 = &v27[32 * v40];\n          if ( *(_DWORD *)v41 == 5 )\n          {\n            LODWORD(v160) = 1;\n            v166 = *((_DWORD *)v41 + 4);\n            goto LABEL_65;\n          }\nLABEL_200:\n          abort();\n        }\n        LODWORD(v160) = 0;\nLABEL_65:\n        v42 = *((_QWORD *)v12 + 8);\n        if ( v42 != -1 )\n        {\n          v43 = &v27[32 * v42];\n          if ( *(_DWORD *)v43 != 5 )\n            goto LABEL_200;\n          v44 = (int)v160;\n          *(&v166 + (unsigned int)v160) = *((_DWORD *)v43 + 4);\n          LODWORD(v160) = v44 + 1;\n        }\n        v45 = v19 + 2;\n        if ( v19 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v11 < v45 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 >= v45 )\n              goto LABEL_73;\n          }\n          else if ( v45 <= 0xC )\n          {\n            v11 = 12LL;\nLABEL_73:\n            if ( v14 && v14 != src )\n            {\n              v46 = (char *)realloc(v14, v11);\n              if ( v46 )\n                goto LABEL_76;\nLABEL_88:\n              v57 = v14;\n              *(_QWORD *)&v162 = __errno_location();\nLABEL_89:\n              if ( v57 == src || !v57 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v172 != v175 )\n                    free(v172);\n                  if ( v169 != v170 )\n                    free(v169);\n                  v14 = 0LL;\n                  **(_DWORD **)&v162 = 12;\n                  return v14;\n                }\nLABEL_112:\n                *(_QWORD *)&v162 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v57);\n              goto LABEL_91;\n            }\n            LOBYTE(v162) = v14 == src;\n            v94 = (char *)malloc(v11);\n            v46 = v94;\n            if ( !v94 )\n              goto LABEL_88;\n            if ( v19 && LOBYTE(v162) )\n              v46 = (char *)memcpy(v94, v14, v19);\nLABEL_76:\n            v46[v19] = 0;\n            v158 = v46;\n            v47 = __errno_location();\n            v48 = v158;\n            v158 = v32;\n            *(_QWORD *)&v162 = v47;\n            LODWORD(v154) = *v47;\n            while ( 2 )\n            {\n              v49 = 0x7FFFFFFFLL;\n              v165 = -1;\n              **(_DWORD **)&v162 = 0;\n              if ( v11 - v19 <= 0x7FFFFFFF )\n                v49 = v11 - v19;\n              switch ( (int)v163 )\n              {\n                case 1:\n                  v72 = (unsigned int)*((char *)v169 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 2:\n                  v72 = *((unsigned __int8 *)v169 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 3:\n                  v72 = (unsigned int)*((__int16 *)v169 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 4:\n                  v72 = *((unsigned __int16 *)v169 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 5:\n                case 6:\n                case 13:\n                case 14:\n                  v72 = *((unsigned int *)v169 + 8 * *((_QWORD *)v12 + 10) + 4);\nLABEL_150:\n                  v71 = &v48[v19];\n                  v157 = v48;\n                  if ( (_DWORD)v160 != 1 )\n                  {\n                    if ( (_DWORD)v160 != 2 )\n                    {\n                      v150 = &v165;\n                      goto LABEL_153;\n                    }\n                    goto LABEL_209;\n                  }\n                  v151 = &v165;\n                  v150 = (int *)v72;\n                  break;\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                case 15:\n                case 16:\n                case 17:\n                  v71 = &v48[v19];\n                  v72 = *((_QWORD *)v169 + 4 * *((_QWORD *)v12 + 10) + 2);\n                  v157 = v48;\n                  if ( (_DWORD)v160 != 1 )\n                  {\n                    if ( (_DWORD)v160 != 2 )\n                    {\n                      v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v161, v72, a5, &v165, v151);\nLABEL_131:\n                      v48 = (char *)v157;\n                      goto LABEL_132;\n                    }\nLABEL_209:\n                    v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v161, v166, a5, v167, v72);\nLABEL_210:\n                    v48 = (char *)v157;\nLABEL_132:\n                    v74 = v165;\n                    if ( v165 < 0 )\n                    {\nLABEL_154:\n                      if ( v158[1] )\n                      {\n                        v158[1] = 0;\n                        continue;\n                      }\n                      if ( v73 < 0 )\n                      {\n                        v80 = **(_DWORD **)&v162;\n                        if ( !**(_DWORD **)&v162 )\n                        {\n                          v80 = 84;\n                          if ( (v12[72] & 0xEF) != 99 )\n                            v80 = 22;\n                        }\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v172 != v175 )\n                          free(v172);\n                        if ( v169 != v170 )\n                          free(v169);\n                        **(_DWORD **)&v162 = v80;\n                        return 0LL;\n                      }\nLABEL_136:\n                      v165 = v73;\n                      v74 = v73;\nLABEL_137:\n                      if ( (unsigned int)(v74 + 1) < v49 )\n                      {\n                        v14 = v48;\n                        v15 = v19 + v74;\n                        **(_DWORD **)&v162 = (_DWORD)v154;\n                        goto LABEL_110;\n                      }\n                      if ( v11 - v19 > 0x7FFFFFFE )\n                      {\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v172 != v175 )\n                          free(v172);\n                        if ( v169 != v170 )\n                          free(v169);\n                        v14 = 0LL;\n                        **(_DWORD **)&v162 = 75;\n                        return v14;\n                      }\n                      v75 = (unsigned int)(v74 + 2);\n                      v76 = __CFADD__(v19, v75);\n                      v77 = v19 + v75;\n                      if ( (v11 & 0x8000000000000000LL) != 0LL )\n                      {\n                        if ( v11 != -1LL )\n                          goto LABEL_202;\n                      }\n                      else\n                      {\n                        if ( v76 )\n                          goto LABEL_202;\n                        if ( 2 * v11 >= v77 )\n                          v77 = 2 * v11;\n                        if ( v11 < v77 )\n                        {\n                          v11 *= 2LL;\n                          if ( v11 < v77 )\n                          {\n                            if ( v77 == -1LL )\n                            {\nLABEL_202:\n                              v57 = v48;\n                              goto LABEL_89;\n                            }\n                            v11 = v77;\n                          }\n                          v78 = v48 == src;\n                          if ( !v48 || v48 == src )\n                          {\n                            v157 = v48;\n                            v93 = (char *)malloc(v11);\n                            v48 = (char *)v157;\n                            if ( !v93 )\n                              goto LABEL_202;\n                            if ( v19 && v78 )\n                              v48 = (char *)memcpy(v93, v157, v19);\n                            else\n                              v48 = v93;\n                          }\n                          else\n                          {\n                            v157 = v48;\n                            v79 = (char *)realloc(v48, v11);\n                            v48 = (char *)v157;\n                            if ( !v79 )\n                              goto LABEL_202;\n                            v48 = v79;\n                          }\n                        }\n                      }\n                      continue;\n                    }\nLABEL_133:\n                    if ( v74 < v49 && v48[v74 + v19] )\n                      goto LABEL_200;\n                    if ( v74 >= v73 )\n                      goto LABEL_137;\n                    goto LABEL_136;\n                  }\n                  v151 = &v165;\n                  v150 = (int *)v72;\n                  break;\n                case 11:\n                  v84 = *((_QWORD *)v12 + 10);\n                  v85 = &v48[v19];\n                  v157 = v48;\n                  a5 = *((double *)v169 + 4 * v84 + 2);\n                  if ( (_DWORD)v160 == 1 )\n                  {\n                    v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v161, v166, a5, &v165, v151);\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v160 != 2 )\n                    {\n                      v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v161, &v165, a5, v152, v153);\n                      v48 = (char *)v157;\n                      goto LABEL_132;\n                    }\n                    v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v161, v166, a5, v167, &v165);\n                  }\n                  v48 = (char *)v157;\n                  goto LABEL_132;\n                case 12:\n                  v81 = *((_QWORD *)v12 + 10);\n                  v82 = &v48[v19];\n                  v157 = v48;\n                  v83 = *((unsigned __int128 *)v169 + 2 * v81 + 1);\n                  if ( (_DWORD)v160 == 1 )\n                  {\n                    v73 = __snprintf_chk(v82, v49, 1LL, -1LL, v161, v166, a5, v83, v83 >> 64);\n                    goto LABEL_210;\n                  }\n                  if ( (_DWORD)v160 != 2 )\n                  {\n                    v73 = __snprintf_chk(v82, v49, 1LL, -1LL, v161, &v165, a5, v83, v83 >> 64);\n                    goto LABEL_131;\n                  }\n                  v73 = __snprintf_chk(v82, v49, 1LL, -1LL, v161, v166, a5, v167, v149);\n                  v48 = (char *)v157;\n                  goto LABEL_132;\n                default:\n                  goto LABEL_408;\n              }\n              break;\n            }\n            v72 = v166;\nLABEL_153:\n            v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v161, v72, a5, v150, v151);\n            v74 = v165;\n            v48 = (char *)v157;\n            if ( v165 < 0 )\n              goto LABEL_154;\n            goto LABEL_133;\n          }\n          if ( v19 != -3LL )\n          {\n            v11 = v19 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v46 = v14;\n        goto LABEL_76;\n      }\n      switch ( v29 )\n      {\n        case 18:\n          v15 = v19;\n          **((_BYTE **)v28 + 2) = v19;\n          break;\n        case 19:\n          v15 = v19;\n          **((_WORD **)v28 + 2) = v19;\n          break;\n        case 20:\n          v15 = v19;\n          **((_DWORD **)v28 + 2) = v19;\n          break;\n        case 21:\n        case 22:\n          v15 = v19;\n          **((_QWORD **)v28 + 2) = v19;\n          break;\n        default:\nLABEL_408:\n          abort();\n      }\nLABEL_110:\n      v13 = (_BYTE *)*((_QWORD *)v12 + 1);\n      v12 += 88;\n      v16 = *(_BYTE **)v12;\n      ++v159;\n      if ( v16 != v13 )\n        goto LABEL_14;\nLABEL_111:\n      v19 = v15;\n    }\n    v107 = v19;\n    v108 = v19 + 1;\n    if ( v19 == -1LL )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v11 < v108 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v108 )\n        {\nLABEL_303:\n          v109 = v14 == src;\n          if ( !v14 || v14 == src )\n          {\n            v142 = (char *)malloc(v11);\n            if ( !v142 )\n              goto LABEL_88;\n            if ( v107 && v109 )\n              v14 = (char *)memcpy(v142, v14, v107);\n            else\n              v14 = v142;\n          }\n          else\n          {\n            v110 = (char *)realloc(v14, v11);\n            if ( !v110 )\n              goto LABEL_126;\n            v14 = v110;\n          }\n          goto LABEL_307;\n        }\n      }\n      else if ( v108 <= 0xC )\n      {\n        v11 = 12LL;\n        goto LABEL_303;\n      }\n      if ( v19 == -2LL )\n        goto LABEL_88;\n      v11 = v19 + 1;\n      goto LABEL_303;\n    }\nLABEL_307:\n    v14[v107] = 0;\n    if ( v11 > v108 && v14 != src )\n    {\n      v111 = (char *)realloc(v14, v108);\n      if ( v111 )\n        v14 = v111;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v172 != v175 )\n      free(v172);\n    if ( v169 != v170 )\n      free(v169);\n    *v156 = v107;\n    return v14;\n  }\n  if ( v172 != v175 )\n    free(v172);\n  if ( v169 != v170 )\n    free(v169);\n  v14 = 0LL;\n  *__errno_location() = 22;\n  return v14;\n}\n\nchar *__fastcall sub_409290(void *a1, size_t *a2, _BYTE *a3, __int64 a4, double a5)\n{\n  __int64 v7; // rax\n  unsigned __int64 v8; // rax\n  size_t v9; // rdi\n  __int64 *v10; // rax\n  size_t v11; // r12\n  char *v12; // r14\n  _BYTE *v13; // r8\n  char *v14; // rbx\n  size_t v15; // r15\n  _BYTE *v16; // rcx\n  void *v17; // rcx\n  unsigned __int64 v18; // rax\n  size_t v19; // r13\n  bool v20; // dl\n  char *v21; // rax\n  char *v22; // rax\n  void *v23; // rsp\n  char *v24; // rax\n  char v25; // r15\n  __int64 v26; // rax\n  char *v27; // r8\n  long double *v28; // rdx\n  int v29; // eax\n  char v30; // al\n  int v31; // eax\n  char *v32; // r15\n  __int64 v33; // rdi\n  _BYTE *v34; // rsi\n  _BYTE *v35; // rdx\n  _BYTE *v36; // rsi\n  _BYTE *v37; // rdx\n  __int64 v38; // rax\n  char v39; // al\n  __int64 v40; // rax\n  char *v41; // rax\n  __int64 v42; // rax\n  char *v43; // r8\n  int v44; // eax\n  unsigned __int64 v45; // rax\n  char *v46; // r11\n  int *v47; // rax\n  char *v48; // r11\n  unsigned __int64 v49; // rbx\n  unsigned __int64 v50; // r10\n  char *v51; // rdx\n  char *v52; // rcx\n  __int64 v53; // rsi\n  _DWORD *v54; // r8\n  unsigned __int64 v55; // rdx\n  unsigned __int64 v56; // rcx\n  void *v57; // r15\n  unsigned __int64 v59; // rax\n  char *v60; // rax\n  char v62; // fps^1\n  char *v66; // rdx\n  char *v67; // rdi\n  int v68; // r11d\n  __int64 v69; // rcx\n  _DWORD *v70; // rcx\n  char *v71; // rdi\n  unsigned __int64 v72; // r9\n  int v73; // eax\n  int v74; // edx\n  __int64 v75; // rax\n  bool v76; // cf\n  unsigned __int64 v77; // rax\n  bool v78; // bl\n  char *v79; // rax\n  int v80; // ebx\n  __int64 v81; // rax\n  char *v82; // rdi\n  unsigned __int128 v83; // fst7\n  __int64 v84; // rax\n  char *v85; // rdi\n  unsigned __int64 v86; // rax\n  void *v87; // rax\n  char *v88; // rax\n  char *v89; // rcx\n  int v90; // r8d\n  __int16 v91; // ax\n  char *v92; // r15\n  char *v93; // rax\n  char *v94; // rax\n  char *v95; // rax\n  char v96; // al\n  char *v97; // r9\n  size_t v98; // r8\n  unsigned __int64 v99; // r10\n  char *v100; // rdi\n  __int64 v101; // rax\n  char *v102; // r10\n  unsigned __int64 v103; // rax\n  char *v104; // rax\n  char *v105; // rsi\n  char v106; // al\n  size_t v107; // r15\n  size_t v108; // r14\n  bool v109; // r13\n  char *v110; // rax\n  char *v111; // rax\n  __int64 v112; // rax\n  char *v113; // r10\n  char *v114; // rax\n  char *v115; // rax\n  char *v116; // rax\n  __int64 v117; // rsi\n  __int64 v118; // rdx\n  char v119; // al\n  __int64 v120; // rdx\n  char *v121; // rax\n  char *v122; // rax\n  __int64 v123; // rdx\n  char v124; // al\n  char *v125; // rax\n  char *v126; // rsi\n  __int64 v127; // r9\n  __int64 v128; // rdx\n  char *v129; // rax\n  char *v130; // rsi\n  char *v131; // rdi\n  __int64 v132; // rax\n  __int64 v133; // rsi\n  unsigned __int64 v134; // rax\n  char v135; // al\n  __int64 v136; // rsi\n  char v137; // al\n  char *v138; // rax\n  __int64 v139; // rdx\n  char v140; // al\n  char *v141; // rax\n  char *v142; // rax\n  char *v143; // rax\n  void *v144; // rdx\n  char v145; // al\n  _BYTE *v146; // rax\n  char *v147; // rax\n  char v148; // al\n  __int64 v149; // [rsp-8h] [rbp-718h]\n  int *v150; // [rsp+10h] [rbp-700h]\n  int *v151; // [rsp+18h] [rbp-6F8h]\n  __int64 v152; // [rsp+20h] [rbp-6F0h] BYREF\n  unsigned __int64 v153; // [rsp+28h] [rbp-6E8h]\n  char *v154; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v156; // [rsp+40h] [rbp-6D0h]\n  void *v157; // [rsp+48h] [rbp-6C8h]\n  char *v158; // [rsp+50h] [rbp-6C0h]\n  __int64 v159; // [rsp+58h] [rbp-6B8h]\n  _BYTE *v160; // [rsp+60h] [rbp-6B0h]\n  __int64 *v161; // [rsp+68h] [rbp-6A8h]\n  long double v162; // [rsp+70h] [rbp-6A0h]\n  void *v163; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v165; // [rsp+94h] [rbp-67Ch] BYREF\n  unsigned int v166; // [rsp+98h] [rbp-678h]\n  unsigned int v167; // [rsp+9Ch] [rbp-674h]\n  char v168[8]; // [rsp+A0h] [rbp-670h] BYREF\n  void *v169; // [rsp+A8h] [rbp-668h]\n  _BYTE v170[224]; // [rsp+B0h] [rbp-660h] BYREF\n  __int64 v171; // [rsp+190h] [rbp-580h] BYREF\n  void *v172; // [rsp+198h] [rbp-578h]\n  __int64 v173; // [rsp+1A0h] [rbp-570h]\n  __int64 v174; // [rsp+1A8h] [rbp-568h]\n  _BYTE v175[624]; // [rsp+1B0h] [rbp-560h] BYREF\n  char v176[752]; // [rsp+420h] [rbp-2F0h] BYREF\n\n  src = a1;\n  v156 = a2;\n  if ( (int)sub_40AFD0(a3, &v171, v168) < 0 )\n    return 0LL;\n  if ( (int)sub_40ADB0(a4, v168) >= 0 )\n  {\n    v7 = v173 + 7;\n    if ( (unsigned __int64)(v173 + 7) <= 6 )\n      v7 = -1LL;\n    v76 = __CFADD__(v174, v7);\n    v8 = v174 + v7;\n    if ( v76 )\n      goto LABEL_112;\n    v9 = v8 + 6;\n    if ( v8 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v9 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v23 = alloca(v8 + 14);\n      v161 = &v152;\n    }\n    else\n    {\n      if ( v8 == -7LL )\n        goto LABEL_112;\n      v10 = (__int64 *)malloc(v9);\n      v161 = v10;\n      if ( !v10 )\n        goto LABEL_112;\n      ptr = v10;\n    }\n    v11 = 0LL;\n    if ( src )\n      v11 = *v156;\n    v12 = (char *)v172;\n    v13 = a3;\n    v14 = (char *)src;\n    v159 = 0LL;\n    v15 = 0LL;\n    v16 = *(_BYTE **)v172;\n    if ( *(_BYTE **)v172 == v13 )\n      goto LABEL_111;\nLABEL_14:\n    v17 = (void *)(v16 - v13);\n    v18 = (unsigned __int64)v17 + v15;\n    v19 = (size_t)v17 + v15;\n    if ( __CFADD__(v17, v15) )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n      v19 = -1LL;\n    }\n    else if ( v11 < v18 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v18 )\n        {\nLABEL_28:\n          v20 = v14 == src;\n          if ( !v14 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v18 <= 0xC )\n      {\n        v11 = 12LL;\n        v20 = v14 == src;\n        if ( !v14 )\n        {\nLABEL_19:\n          v160 = v13;\n          LOBYTE(v162) = v20;\n          v163 = v17;\n          v21 = (char *)malloc(v11);\n          v17 = v163;\n          v13 = v160;\n          if ( !v21 )\n            goto LABEL_88;\n          if ( v15 && LOBYTE(v162) )\n          {\n            *(_QWORD *)&v162 = v160;\n            v22 = (char *)memcpy(v21, v14, v15);\n            v17 = v163;\n            v13 = *(_BYTE **)&v162;\n            v14 = v22;\n          }\n          else\n          {\n            v14 = v21;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v20 )\n        {\n          *(_QWORD *)&v162 = v13;\n          v163 = v17;\n          v24 = (char *)realloc(v14, v11);\n          if ( !v24 )\n            goto LABEL_126;\n          v17 = v163;\n          v13 = *(_BYTE **)&v162;\n          v14 = v24;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v18 == -1LL )\n        goto LABEL_88;\n      v11 = (size_t)v17 + v15;\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v14[v15], v13, (size_t)v17);\n    while ( v171 != v159 )\n    {\n      v25 = v12[72];\n      v26 = *((_QWORD *)v12 + 10);\n      if ( v25 == 37 )\n      {\n        if ( v26 != -1 )\n          goto LABEL_200;\n        v59 = v19 + 1;\n        v15 = v19 + 1;\n        if ( v19 == -1LL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n          v15 = -1LL;\n        }\n        else if ( v11 < v59 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 < v59 )\n              goto LABEL_238;\n          }\n          else\n          {\n            if ( v59 <= 0xC )\n            {\n              v11 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_238:\n            if ( v19 == -2LL )\n              goto LABEL_88;\n            v11 = v19 + 1;\n          }\nLABEL_105:\n          if ( v14 && v14 != src )\n          {\n            v60 = (char *)realloc(v14, v11);\n            if ( v60 )\n            {\n              v14 = v60;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v57 = v14;\n            *(_QWORD *)&v162 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v163) = v14 == src;\n          v95 = (char *)malloc(v11);\n          if ( !v95 )\n            goto LABEL_88;\n          if ( v19 && (_BYTE)v163 )\n            v14 = (char *)memcpy(v95, v14, v19);\n          else\n            v14 = v95;\n        }\nLABEL_109:\n        v14[v19] = 37;\n        goto LABEL_110;\n      }\n      if ( v26 == -1 )\n        goto LABEL_200;\n      v27 = (char *)v169;\n      v28 = (long double *)((char *)v169 + 32 * v26);\n      v29 = *(_DWORD *)v28;\n      LODWORD(v163) = *(_DWORD *)v28;\n      if ( v25 != 110 )\n      {\n        v30 = v25 & 0xDF;\n        if ( ((unsigned __int8)((v25 & 0xDF) - 69) <= 2u || v30 == 65) && (_DWORD)v163 == 12 )\n        {\n          _FST7 = v28[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v66 = (char *)*((_QWORD *)v12 + 3);\n            v67 = (char *)*((_QWORD *)v12 + 4);\n            v68 = *((_DWORD *)v12 + 4);\n            if ( v66 == v67 )\n            {\n              v50 = 0LL;\n            }\n            else\n            {\n              v69 = *((_QWORD *)v12 + 5);\n              if ( v69 == -1 )\n              {\n                v50 = 0LL;\n                v163 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v126 = v66 + 1;\n                  v127 = -1LL;\n                  v128 = *v66 - 48;\n                  if ( v50 <= 0x1999999999999999LL )\n                    v127 = 10 * v50;\n                  v76 = __CFADD__(v127, v128);\n                  v50 = v127 + v128;\n                  v66 = v126;\n                  if ( v76 )\n                  {\n                    if ( v67 == v126 )\n                    {\nLABEL_81:\n                      v50 = (unsigned __int64)v163;\n                      goto LABEL_82;\n                    }\n                    while ( *v66++ != 48 )\n                    {\n                      if ( v67 == v66 )\n                        goto LABEL_81;\n                    }\n                    v50 = -1LL;\n                  }\n                  if ( v67 == v66 )\n                    goto LABEL_82;\n                }\n              }\n              v70 = (char *)v169 + 32 * v69;\n              if ( *v70 != 5 )\n                goto LABEL_200;\n              v50 = (int)v70[4];\n              if ( (v50 & 0x80000000) != 0LL )\n              {\n                v68 |= 2u;\n                v50 = -(__int64)v50;\n              }\n            }\nLABEL_82:\n            v51 = (char *)*((_QWORD *)v12 + 6);\n            v52 = (char *)*((_QWORD *)v12 + 7);\n            if ( v51 != v52 )\n            {\n              v53 = *((_QWORD *)v12 + 8);\n              if ( v53 == -1 )\n              {\n                v129 = v51 + 1;\n                v55 = 0LL;\n                if ( v52 != v129 )\n                {\n                  v130 = v129;\n                  while ( 1 )\n                  {\n                    v131 = v130 + 1;\n                    v132 = *v130 - 48;\n                    v133 = -1LL;\n                    if ( v55 <= 0x1999999999999999LL )\n                      v133 = 10 * v55;\n                    v76 = __CFADD__(v133, v132);\n                    v134 = v133 + v132;\n                    v130 = v131;\n                    v55 = v134;\n                    if ( v76 )\n                    {\n                      if ( v52 == v131 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v130 = v131 + 1;\n                        if ( *v131 == 48 )\n                          break;\n                        if ( v52 == v130 )\n                          goto LABEL_88;\n                        ++v131;\n                      }\n                      v55 = -1LL;\n                    }\n                    if ( v52 == v130 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_375;\n              }\n              v54 = (char *)v169 + 32 * v53;\n              if ( *v54 != 5 )\n                goto LABEL_200;\n              v55 = (int)v54[4];\n              if ( (v55 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v55 )\n                {\n                  v56 = v55 + 12;\n                  if ( v55 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_190:\n                  v86 = v56;\n                  if ( v50 >= v56 )\n                    v86 = v50;\n                  v76 = __CFADD__(v86, 1LL);\n                  v87 = (void *)(v86 + 1);\n                  v163 = v87;\n                  if ( v76 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v87 <= 0x2BC )\n                  {\n                    v89 = v176;\n                  }\n                  else\n                  {\n                    v157 = (void *)v50;\n                    v158 = (char *)v55;\n                    LODWORD(v160) = v68;\n                    v162 = _FST7;\n                    if ( v87 == (void *)-1LL )\n                      goto LABEL_88;\n                    v88 = (char *)malloc((size_t)v87);\n                    v68 = (int)v160;\n                    _FST7 = v162;\n                    v89 = v88;\n                    v55 = (unsigned __int64)v158;\n                    v50 = (unsigned __int64)v157;\n                    if ( !v88 )\n                      goto LABEL_88;\n                  }\n                  v90 = (unsigned __int16)v166;\n                  LOBYTE(v91) = v166;\n                  HIBYTE(v91) = BYTE1(v166) | 3;\n                  LOWORD(v166) = v91;\n                  __asm { fxam }\n                  if ( (v62 & 2) != 0 )\n                  {\n                    *v89 = 45;\n                    _FST7 = -_FST7;\n                    v92 = v89 + 1;\n                  }\n                  else if ( (v68 & 4) != 0 )\n                  {\n                    v92 = v89 + 1;\n                    *v89 = 43;\n                  }\n                  else\n                  {\n                    v92 = v89;\n                    if ( (v68 & 8) != 0 )\n                    {\n                      v92 = v89 + 1;\n                      *v89 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_200;\n                    v97 = v92 + 3;\n                    if ( (unsigned __int8)(v12[72] - 65) > 0x19u )\n                    {\n                      v92[2] = 102;\n                      *(_WORD *)v92 = 28265;\n                    }\n                    else\n                    {\n                      v92[2] = 70;\n                      *(_WORD *)v92 = 20041;\n                    }\n                    v92 = 0LL;\n                    goto LABEL_263;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_200;\n                  v96 = v12[72] & 0xDF;\n                  switch ( v96 )\n                  {\n                    case 'F':\n                      *v92 = 48;\n                      if ( (v68 & 0x10) != 0 || v55 )\n                      {\n                        LODWORD(v153) = v90;\n                        v154 = (char *)v50;\n                        v157 = v89;\n                        v158 = (char *)v55;\n                        LODWORD(v160) = v68;\n                        *(_QWORD *)&v162 = v92 + 2;\n                        v122 = nl_langinfo(0x10000);\n                        v123 = (__int64)v158;\n                        v97 = *(char **)&v162;\n                        v124 = *v122;\n                        LOBYTE(v68) = (_BYTE)v160;\n                        v89 = (char *)v157;\n                        v50 = (unsigned __int64)v154;\n                        LOWORD(v90) = v153;\n                        if ( !v124 )\n                          v124 = 46;\n                        v92[1] = v124;\n                        if ( v123 )\n                        {\n                          v125 = v97;\n                          do\n                            *v125++ = 48;\n                          while ( v125 != &v92[v123 + 2] );\n                          v97 += v123;\n                        }\n                        goto LABEL_263;\n                      }\n                      goto LABEL_262;\n                    case 'E':\n                      *v92 = 48;\n                      if ( (v68 & 0x10) != 0 || (v105 = v92 + 1, v55) )\n                      {\n                        LODWORD(v153) = v90;\n                        v154 = (char *)v50;\n                        v157 = v89;\n                        v158 = (char *)v55;\n                        LODWORD(v160) = v68;\n                        *(_QWORD *)&v162 = v92 + 2;\n                        v138 = nl_langinfo(0x10000);\n                        v139 = (__int64)v158;\n                        v105 = *(char **)&v162;\n                        v140 = *v138;\n                        LOBYTE(v68) = (_BYTE)v160;\n                        v89 = (char *)v157;\n                        v50 = (unsigned __int64)v154;\n                        LOWORD(v90) = v153;\n                        if ( !v140 )\n                          v140 = 46;\n                        v92[1] = v140;\n                        if ( v139 )\n                        {\n                          v141 = v105;\n                          do\n                            *v141++ = 48;\n                          while ( v141 != &v92[v139 + 2] );\n                          v105 += v139;\n                        }\n                      }\n                      v106 = v12[72];\n                      v97 = v105 + 4;\n                      v105[3] = 48;\n                      *v105 = v106;\n                      *(_WORD *)(v105 + 1) = 12331;\n                      goto LABEL_263;\n                    case 'G':\n                      *v92 = 48;\n                      if ( (v68 & 0x10) != 0 )\n                      {\n                        if ( v55 )\n                        {\n                          HIDWORD(v152) = v90;\n                          v153 = v50;\n                          v154 = v92 + 2;\n                          v157 = v89;\n                          LODWORD(v158) = v68;\n                          v160 = (_BYTE *)v55;\n                          *(_QWORD *)&v162 = v55 - 1;\n                          v116 = nl_langinfo(0x10000);\n                          v117 = *(_QWORD *)&v162;\n                          v118 = (__int64)v160;\n                          v119 = *v116;\n                          LOBYTE(v68) = (_BYTE)v158;\n                          v89 = (char *)v157;\n                          v97 = v154;\n                          v50 = v153;\n                          LOWORD(v90) = WORD2(v152);\n                          if ( !v119 )\n                            v119 = 46;\n                          v92[1] = v119;\n                          if ( v117 )\n                          {\n                            v120 = (__int64)&v92[v118 + 1];\n                            v121 = v97;\n                            do\n                              *v121++ = 48;\n                            while ( v121 != (char *)v120 );\n                            v97 += v117;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v154) = v90;\n                          v157 = (void *)v50;\n                          v158 = v92 + 2;\n                          v160 = v89;\n                          LODWORD(v162) = v68;\n                          v147 = nl_langinfo(0x10000);\n                          LOBYTE(v68) = LOBYTE(v162);\n                          v89 = v160;\n                          v148 = *v147;\n                          v97 = v158;\n                          v50 = (unsigned __int64)v157;\n                          LOWORD(v90) = (_WORD)v154;\n                          if ( !v148 )\n                            v148 = 46;\n                          v92[1] = v148;\n                        }\n                        goto LABEL_263;\n                      }\nLABEL_262:\n                      v97 = v92 + 1;\n                      goto LABEL_263;\n                  }\n                  if ( v96 != 65 )\n                    goto LABEL_200;\n                  *v92 = 48;\n                  *(_QWORD *)&v162 = v92 + 2;\n                  v135 = v12[72];\n                  v92[2] = 48;\n                  v92[1] = v135 + 23;\n                  if ( (v68 & 0x10) != 0 || (v136 = (__int64)(v92 + 3), v55) )\n                  {\n                    HIDWORD(v152) = v90;\n                    v153 = v50;\n                    v154 = v89;\n                    v157 = (void *)v55;\n                    LODWORD(v158) = v68;\n                    v160 = v92 + 4;\n                    v143 = nl_langinfo(0x10000);\n                    v144 = v157;\n                    v136 = (__int64)v160;\n                    v145 = *v143;\n                    LOBYTE(v68) = (_BYTE)v158;\n                    v89 = v154;\n                    v50 = v153;\n                    LOWORD(v90) = WORD2(v152);\n                    if ( !v145 )\n                      v145 = 46;\n                    v92[3] = v145;\n                    if ( v144 )\n                    {\n                      v146 = (_BYTE *)v136;\n                      do\n                        *v146++ = 48;\n                      while ( v146 != (_BYTE *)v144 + (_QWORD)v92 + 4 );\n                      v136 += (__int64)v144;\n                    }\n                  }\n                  v137 = v12[72];\n                  v97 = (char *)(v136 + 3);\n                  *(_WORD *)(v136 + 1) = 12331;\n                  v92 = *(char **)&v162;\n                  *(_BYTE *)v136 = v137 + 15;\nLABEL_263:\n                  LOWORD(v166) = v90;\n                  v98 = v97 - v89;\n                  if ( v50 > v97 - v89 )\n                  {\n                    v99 = v50 - v98;\n                    v100 = &v97[v99];\n                    v98 = &v97[v99] - v89;\n                    if ( (v68 & 2) != 0 )\n                    {\n                      if ( v99 )\n                      {\n                        do\n                          *v97++ = 32;\n                        while ( v100 != v97 );\n                      }\n                    }\n                    else if ( (v68 & 0x20) != 0 && v92 )\n                    {\n                      if ( v92 >= v97 )\n                      {\n                        v92 = v97;\n                      }\n                      else\n                      {\n                        v101 = -1LL;\n                        do\n                        {\n                          v100[v101] = v97[v101];\n                          --v101;\n                        }\n                        while ( v101 != v92 - 1 - v97 );\n                      }\n                      if ( v99 )\n                      {\n                        v102 = &v92[v99];\n                        do\n                          *v92++ = 48;\n                        while ( v92 != v102 );\n                      }\n                    }\n                    else\n                    {\n                      v112 = -1LL;\n                      if ( v89 < v97 )\n                      {\n                        do\n                        {\n                          v100[v112] = v97[v112];\n                          --v112;\n                        }\n                        while ( v89 - 1 - v97 != v112 );\n                        v97 = v89;\n                      }\n                      if ( v99 )\n                      {\n                        v113 = &v97[v99];\n                        do\n                          *v97++ = 32;\n                        while ( v97 != v113 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v163 <= v98 )\n                    goto LABEL_200;\n                  v103 = v98 + v19;\n                  v15 = v98 + v19;\n                  if ( v11 - v19 <= v98 )\n                  {\n                    if ( __CFADD__(v98, v19) )\n                    {\n                      if ( v11 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v11 < v103 )\n                    {\n                      if ( v11 )\n                      {\n                        if ( (v11 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v11 *= 2LL;\n                        if ( v11 < v103 )\n                          goto LABEL_373;\n                      }\n                      else\n                      {\n                        if ( v103 <= 0xC )\n                        {\n                          v11 = 12LL;\n                          goto LABEL_280;\n                        }\nLABEL_373:\n                        if ( v103 == -1LL )\n                          goto LABEL_88;\n                        v11 = v98 + v19;\n                      }\nLABEL_280:\n                      if ( !v14 || v14 == src )\n                      {\n                        LOBYTE(v160) = v14 == src;\n                        *(_QWORD *)&v162 = v98;\n                        v163 = v89;\n                        v114 = (char *)malloc(v11);\n                        v89 = (char *)v163;\n                        v98 = *(_QWORD *)&v162;\n                        if ( !v114 )\n                          goto LABEL_88;\n                        if ( v19 && (_BYTE)v160 )\n                        {\n                          v115 = (char *)memcpy(v114, v14, v19);\n                          v89 = (char *)v163;\n                          v98 = *(_QWORD *)&v162;\n                          v14 = v115;\n                        }\n                        else\n                        {\n                          v14 = v114;\n                        }\n                      }\n                      else\n                      {\n                        *(_QWORD *)&v162 = v98;\n                        v163 = v89;\n                        v104 = (char *)realloc(v14, v11);\n                        if ( !v104 )\n                          goto LABEL_88;\n                        v89 = (char *)v163;\n                        v98 = *(_QWORD *)&v162;\n                        v14 = v104;\n                      }\n                    }\n                  }\n                  v163 = v89;\n                  memcpy(&v14[v19], v89, v98);\n                  if ( v163 != v176 )\n                    free(v163);\n                  goto LABEL_110;\n                }\nLABEL_375:\n                v56 = 12LL;\n                goto LABEL_190;\n              }\n            }\n            v56 = 12LL;\n            if ( v30 != 65 )\n              v56 = 18LL;\n            v55 = 0LL;\n            if ( v30 != 65 )\n              v55 = 6LL;\n            goto LABEL_190;\n          }\n        }\n        v31 = *((_DWORD *)v12 + 4);\n        v32 = (char *)v161 + 1;\n        *(_BYTE *)v161 = 37;\n        if ( (v31 & 1) != 0 )\n        {\n          v33 = (__int64)v161;\n          *((_BYTE *)v161 + 1) = 39;\n          v32 = (char *)(v33 + 2);\n        }\n        if ( (v31 & 2) != 0 )\n          *v32++ = 45;\n        if ( (v31 & 4) != 0 )\n          *v32++ = 43;\n        if ( (v31 & 8) != 0 )\n          *v32++ = 32;\n        if ( (v31 & 0x10) != 0 )\n          *v32++ = 35;\n        if ( (v31 & 0x40) != 0 )\n          *v32++ = 73;\n        if ( (v31 & 0x20) != 0 )\n          *v32++ = 48;\n        v34 = (_BYTE *)*((_QWORD *)v12 + 3);\n        v35 = (_BYTE *)*((_QWORD *)v12 + 4);\n        if ( v34 != v35 )\n        {\n          v160 = v27;\n          *(_QWORD *)&v162 = v35 - v34;\n          memcpy(v32, v34, v35 - v34);\n          v27 = v160;\n          v32 += *(_QWORD *)&v162;\n        }\n        v36 = (_BYTE *)*((_QWORD *)v12 + 6);\n        v37 = (_BYTE *)*((_QWORD *)v12 + 7);\n        if ( v36 != v37 )\n        {\n          v160 = v27;\n          *(_QWORD *)&v162 = v37 - v36;\n          memcpy(v32, v36, v37 - v36);\n          v27 = v160;\n          v32 += *(_QWORD *)&v162;\n        }\n        if ( (unsigned int)v163 <= 0x10 )\n        {\n          v38 = 1LL << (char)v163;\n          if ( ((1LL << (char)v163) & 0x14180) != 0 )\n            goto LABEL_125;\n          if ( (v38 & 0x1000) != 0 )\n          {\n            *v32++ = 76;\n          }\n          else\n          {\n            if ( (v38 & 0x600) == 0 )\n              goto LABEL_62;\n            *v32++ = 108;\nLABEL_125:\n            *v32++ = 108;\n          }\n        }\nLABEL_62:\n        v39 = v12[72];\n        v32[1] = 0;\n        *v32 = v39;\n        v40 = *((_QWORD *)v12 + 5);\n        if ( v40 != -1 )\n        {\n          v41 = &v27[32 * v40];\n          if ( *(_DWORD *)v41 == 5 )\n          {\n            LODWORD(v160) = 1;\n            v166 = *((_DWORD *)v41 + 4);\n            goto LABEL_65;\n          }\nLABEL_200:\n          abort();\n        }\n        LODWORD(v160) = 0;\nLABEL_65:\n        v42 = *((_QWORD *)v12 + 8);\n        if ( v42 != -1 )\n        {\n          v43 = &v27[32 * v42];\n          if ( *(_DWORD *)v43 != 5 )\n            goto LABEL_200;\n          v44 = (int)v160;\n          *(&v166 + (unsigned int)v160) = *((_DWORD *)v43 + 4);\n          LODWORD(v160) = v44 + 1;\n        }\n        v45 = v19 + 2;\n        if ( v19 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v11 < v45 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 >= v45 )\n              goto LABEL_73;\n          }\n          else if ( v45 <= 0xC )\n          {\n            v11 = 12LL;\nLABEL_73:\n            if ( v14 && v14 != src )\n            {\n              v46 = (char *)realloc(v14, v11);\n              if ( v46 )\n                goto LABEL_76;\nLABEL_88:\n              v57 = v14;\n              *(_QWORD *)&v162 = __errno_location();\nLABEL_89:\n              if ( v57 == src || !v57 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v172 != v175 )\n                    free(v172);\n                  if ( v169 != v170 )\n                    free(v169);\n                  v14 = 0LL;\n                  **(_DWORD **)&v162 = 12;\n                  return v14;\n                }\nLABEL_112:\n                *(_QWORD *)&v162 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v57);\n              goto LABEL_91;\n            }\n            LOBYTE(v162) = v14 == src;\n            v94 = (char *)malloc(v11);\n            v46 = v94;\n            if ( !v94 )\n              goto LABEL_88;\n            if ( v19 && LOBYTE(v162) )\n              v46 = (char *)memcpy(v94, v14, v19);\nLABEL_76:\n            v46[v19] = 0;\n            v158 = v46;\n            v47 = __errno_location();\n            v48 = v158;\n            v158 = v32;\n            *(_QWORD *)&v162 = v47;\n            LODWORD(v154) = *v47;\n            while ( 2 )\n            {\n              v49 = 0x7FFFFFFFLL;\n              v165 = -1;\n              **(_DWORD **)&v162 = 0;\n              if ( v11 - v19 <= 0x7FFFFFFF )\n                v49 = v11 - v19;\n              switch ( (int)v163 )\n              {\n                case 1:\n                  v72 = (unsigned int)*((char *)v169 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 2:\n                  v72 = *((unsigned __int8 *)v169 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 3:\n                  v72 = (unsigned int)*((__int16 *)v169 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 4:\n                  v72 = *((unsigned __int16 *)v169 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 5:\n                case 6:\n                case 13:\n                case 14:\n                  v72 = *((unsigned int *)v169 + 8 * *((_QWORD *)v12 + 10) + 4);\nLABEL_150:\n                  v71 = &v48[v19];\n                  v157 = v48;\n                  if ( (_DWORD)v160 != 1 )\n                  {\n                    if ( (_DWORD)v160 != 2 )\n                    {\n                      v150 = &v165;\n                      goto LABEL_153;\n                    }\n                    goto LABEL_209;\n                  }\n                  v151 = &v165;\n                  v150 = (int *)v72;\n                  break;\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                case 15:\n                case 16:\n                case 17:\n                  v71 = &v48[v19];\n                  v72 = *((_QWORD *)v169 + 4 * *((_QWORD *)v12 + 10) + 2);\n                  v157 = v48;\n                  if ( (_DWORD)v160 != 1 )\n                  {\n                    if ( (_DWORD)v160 != 2 )\n                    {\n                      v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v161, v72, a5, &v165, v151);\nLABEL_131:\n                      v48 = (char *)v157;\n                      goto LABEL_132;\n                    }\nLABEL_209:\n                    v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v161, v166, a5, v167, v72);\nLABEL_210:\n                    v48 = (char *)v157;\nLABEL_132:\n                    v74 = v165;\n                    if ( v165 < 0 )\n                    {\nLABEL_154:\n                      if ( v158[1] )\n                      {\n                        v158[1] = 0;\n                        continue;\n                      }\n                      if ( v73 < 0 )\n                      {\n                        v80 = **(_DWORD **)&v162;\n                        if ( !**(_DWORD **)&v162 )\n                        {\n                          v80 = 84;\n                          if ( (v12[72] & 0xEF) != 99 )\n                            v80 = 22;\n                        }\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v172 != v175 )\n                          free(v172);\n                        if ( v169 != v170 )\n                          free(v169);\n                        **(_DWORD **)&v162 = v80;\n                        return 0LL;\n                      }\nLABEL_136:\n                      v165 = v73;\n                      v74 = v73;\nLABEL_137:\n                      if ( (unsigned int)(v74 + 1) < v49 )\n                      {\n                        v14 = v48;\n                        v15 = v19 + v74;\n                        **(_DWORD **)&v162 = (_DWORD)v154;\n                        goto LABEL_110;\n                      }\n                      if ( v11 - v19 > 0x7FFFFFFE )\n                      {\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v172 != v175 )\n                          free(v172);\n                        if ( v169 != v170 )\n                          free(v169);\n                        v14 = 0LL;\n                        **(_DWORD **)&v162 = 75;\n                        return v14;\n                      }\n                      v75 = (unsigned int)(v74 + 2);\n                      v76 = __CFADD__(v19, v75);\n                      v77 = v19 + v75;\n                      if ( (v11 & 0x8000000000000000LL) != 0LL )\n                      {\n                        if ( v11 != -1LL )\n                          goto LABEL_202;\n                      }\n                      else\n                      {\n                        if ( v76 )\n                          goto LABEL_202;\n                        if ( 2 * v11 >= v77 )\n                          v77 = 2 * v11;\n                        if ( v11 < v77 )\n                        {\n                          v11 *= 2LL;\n                          if ( v11 < v77 )\n                          {\n                            if ( v77 == -1LL )\n                            {\nLABEL_202:\n                              v57 = v48;\n                              goto LABEL_89;\n                            }\n                            v11 = v77;\n                          }\n                          v78 = v48 == src;\n                          if ( !v48 || v48 == src )\n                          {\n                            v157 = v48;\n                            v93 = (char *)malloc(v11);\n                            v48 = (char *)v157;\n                            if ( !v93 )\n                              goto LABEL_202;\n                            if ( v19 && v78 )\n                              v48 = (char *)memcpy(v93, v157, v19);\n                            else\n                              v48 = v93;\n                          }\n                          else\n                          {\n                            v157 = v48;\n                            v79 = (char *)realloc(v48, v11);\n                            v48 = (char *)v157;\n                            if ( !v79 )\n                              goto LABEL_202;\n                            v48 = v79;\n                          }\n                        }\n                      }\n                      continue;\n                    }\nLABEL_133:\n                    if ( v74 < v49 && v48[v74 + v19] )\n                      goto LABEL_200;\n                    if ( v74 >= v73 )\n                      goto LABEL_137;\n                    goto LABEL_136;\n                  }\n                  v151 = &v165;\n                  v150 = (int *)v72;\n                  break;\n                case 11:\n                  v84 = *((_QWORD *)v12 + 10);\n                  v85 = &v48[v19];\n                  v157 = v48;\n                  a5 = *((double *)v169 + 4 * v84 + 2);\n                  if ( (_DWORD)v160 == 1 )\n                  {\n                    v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v161, v166, a5, &v165, v151);\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v160 != 2 )\n                    {\n                      v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v161, &v165, a5, v152, v153);\n                      v48 = (char *)v157;\n                      goto LABEL_132;\n                    }\n                    v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v161, v166, a5, v167, &v165);\n                  }\n                  v48 = (char *)v157;\n                  goto LABEL_132;\n                case 12:\n                  v81 = *((_QWORD *)v12 + 10);\n                  v82 = &v48[v19];\n                  v157 = v48;\n                  v83 = *((unsigned __int128 *)v169 + 2 * v81 + 1);\n                  if ( (_DWORD)v160 == 1 )\n                  {\n                    v73 = __snprintf_chk(v82, v49, 1LL, -1LL, v161, v166, a5, v83, v83 >> 64);\n                    goto LABEL_210;\n                  }\n                  if ( (_DWORD)v160 != 2 )\n                  {\n                    v73 = __snprintf_chk(v82, v49, 1LL, -1LL, v161, &v165, a5, v83, v83 >> 64);\n                    goto LABEL_131;\n                  }\n                  v73 = __snprintf_chk(v82, v49, 1LL, -1LL, v161, v166, a5, v167, v149);\n                  v48 = (char *)v157;\n                  goto LABEL_132;\n                default:\n                  goto LABEL_408;\n              }\n              break;\n            }\n            v72 = v166;\nLABEL_153:\n            v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v161, v72, a5, v150, v151);\n            v74 = v165;\n            v48 = (char *)v157;\n            if ( v165 < 0 )\n              goto LABEL_154;\n            goto LABEL_133;\n          }\n          if ( v19 != -3LL )\n          {\n            v11 = v19 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v46 = v14;\n        goto LABEL_76;\n      }\n      switch ( v29 )\n      {\n        case 18:\n          v15 = v19;\n          **((_BYTE **)v28 + 2) = v19;\n          break;\n        case 19:\n          v15 = v19;\n          **((_WORD **)v28 + 2) = v19;\n          break;\n        case 20:\n          v15 = v19;\n          **((_DWORD **)v28 + 2) = v19;\n          break;\n        case 21:\n        case 22:\n          v15 = v19;\n          **((_QWORD **)v28 + 2) = v19;\n          break;\n        default:\nLABEL_408:\n          abort();\n      }\nLABEL_110:\n      v13 = (_BYTE *)*((_QWORD *)v12 + 1);\n      v12 += 88;\n      v16 = *(_BYTE **)v12;\n      ++v159;\n      if ( v16 != v13 )\n        goto LABEL_14;\nLABEL_111:\n      v19 = v15;\n    }\n    v107 = v19;\n    v108 = v19 + 1;\n    if ( v19 == -1LL )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v11 < v108 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v108 )\n        {\nLABEL_303:\n          v109 = v14 == src;\n          if ( !v14 || v14 == src )\n          {\n            v142 = (char *)malloc(v11);\n            if ( !v142 )\n              goto LABEL_88;\n            if ( v107 && v109 )\n              v14 = (char *)memcpy(v142, v14, v107);\n            else\n              v14 = v142;\n          }\n          else\n          {\n            v110 = (char *)realloc(v14, v11);\n            if ( !v110 )\n              goto LABEL_126;\n            v14 = v110;\n          }\n          goto LABEL_307;\n        }\n      }\n      else if ( v108 <= 0xC )\n      {\n        v11 = 12LL;\n        goto LABEL_303;\n      }\n      if ( v19 == -2LL )\n        goto LABEL_88;\n      v11 = v19 + 1;\n      goto LABEL_303;\n    }\nLABEL_307:\n    v14[v107] = 0;\n    if ( v11 > v108 && v14 != src )\n    {\n      v111 = (char *)realloc(v14, v108);\n      if ( v111 )\n        v14 = v111;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v172 != v175 )\n      free(v172);\n    if ( v169 != v170 )\n      free(v169);\n    *v156 = v107;\n    return v14;\n  }\n  if ( v172 != v175 )\n    free(v172);\n  if ( v169 != v170 )\n    free(v169);\n  v14 = 0LL;\n  *__errno_location() = 22;\n  return v14;\n}\n"
        },
        {
            "funcName": "sub_409290",
            "funcStartAddr": "0x401a93",
            "funcEndAddr": "0x401a98",
            "decompiledFuncCode": "char *__fastcall sub_409290(void *a1, size_t *a2, _BYTE *a3, __int64 a4, double a5)\n{\n  __int64 v7; // rax\n  unsigned __int64 v8; // rax\n  size_t v9; // rdi\n  __int64 *v10; // rax\n  size_t v11; // r12\n  char *v12; // r14\n  _BYTE *v13; // r8\n  char *v14; // rbx\n  size_t v15; // r15\n  _BYTE *v16; // rcx\n  void *v17; // rcx\n  unsigned __int64 v18; // rax\n  size_t v19; // r13\n  bool v20; // dl\n  char *v21; // rax\n  char *v22; // rax\n  void *v23; // rsp\n  char *v24; // rax\n  char v25; // r15\n  __int64 v26; // rax\n  char *v27; // r8\n  long double *v28; // rdx\n  int v29; // eax\n  char v30; // al\n  int v31; // eax\n  char *v32; // r15\n  __int64 v33; // rdi\n  _BYTE *v34; // rsi\n  _BYTE *v35; // rdx\n  _BYTE *v36; // rsi\n  _BYTE *v37; // rdx\n  __int64 v38; // rax\n  char v39; // al\n  __int64 v40; // rax\n  char *v41; // rax\n  __int64 v42; // rax\n  char *v43; // r8\n  int v44; // eax\n  unsigned __int64 v45; // rax\n  char *v46; // r11\n  int *v47; // rax\n  char *v48; // r11\n  unsigned __int64 v49; // rbx\n  unsigned __int64 v50; // r10\n  char *v51; // rdx\n  char *v52; // rcx\n  __int64 v53; // rsi\n  _DWORD *v54; // r8\n  unsigned __int64 v55; // rdx\n  unsigned __int64 v56; // rcx\n  void *v57; // r15\n  unsigned __int64 v59; // rax\n  char *v60; // rax\n  char v62; // fps^1\n  char *v66; // rdx\n  char *v67; // rdi\n  int v68; // r11d\n  __int64 v69; // rcx\n  _DWORD *v70; // rcx\n  char *v71; // rdi\n  unsigned __int64 v72; // r9\n  int v73; // eax\n  int v74; // edx\n  __int64 v75; // rax\n  bool v76; // cf\n  unsigned __int64 v77; // rax\n  bool v78; // bl\n  char *v79; // rax\n  int v80; // ebx\n  __int64 v81; // rax\n  char *v82; // rdi\n  unsigned __int128 v83; // fst7\n  __int64 v84; // rax\n  char *v85; // rdi\n  unsigned __int64 v86; // rax\n  void *v87; // rax\n  char *v88; // rax\n  char *v89; // rcx\n  int v90; // r8d\n  __int16 v91; // ax\n  char *v92; // r15\n  char *v93; // rax\n  char *v94; // rax\n  char *v95; // rax\n  char v96; // al\n  char *v97; // r9\n  size_t v98; // r8\n  unsigned __int64 v99; // r10\n  char *v100; // rdi\n  __int64 v101; // rax\n  char *v102; // r10\n  unsigned __int64 v103; // rax\n  char *v104; // rax\n  char *v105; // rsi\n  char v106; // al\n  size_t v107; // r15\n  size_t v108; // r14\n  bool v109; // r13\n  char *v110; // rax\n  char *v111; // rax\n  __int64 v112; // rax\n  char *v113; // r10\n  char *v114; // rax\n  char *v115; // rax\n  char *v116; // rax\n  __int64 v117; // rsi\n  __int64 v118; // rdx\n  char v119; // al\n  __int64 v120; // rdx\n  char *v121; // rax\n  char *v122; // rax\n  __int64 v123; // rdx\n  char v124; // al\n  char *v125; // rax\n  char *v126; // rsi\n  __int64 v127; // r9\n  __int64 v128; // rdx\n  char *v129; // rax\n  char *v130; // rsi\n  char *v131; // rdi\n  __int64 v132; // rax\n  __int64 v133; // rsi\n  unsigned __int64 v134; // rax\n  char v135; // al\n  __int64 v136; // rsi\n  char v137; // al\n  char *v138; // rax\n  __int64 v139; // rdx\n  char v140; // al\n  char *v141; // rax\n  char *v142; // rax\n  char *v143; // rax\n  void *v144; // rdx\n  char v145; // al\n  _BYTE *v146; // rax\n  char *v147; // rax\n  char v148; // al\n  __int64 v149; // [rsp-8h] [rbp-718h]\n  int *v150; // [rsp+10h] [rbp-700h]\n  int *v151; // [rsp+18h] [rbp-6F8h]\n  __int64 v152; // [rsp+20h] [rbp-6F0h] BYREF\n  unsigned __int64 v153; // [rsp+28h] [rbp-6E8h]\n  char *v154; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v156; // [rsp+40h] [rbp-6D0h]\n  void *v157; // [rsp+48h] [rbp-6C8h]\n  char *v158; // [rsp+50h] [rbp-6C0h]\n  __int64 v159; // [rsp+58h] [rbp-6B8h]\n  _BYTE *v160; // [rsp+60h] [rbp-6B0h]\n  __int64 *v161; // [rsp+68h] [rbp-6A8h]\n  long double v162; // [rsp+70h] [rbp-6A0h]\n  void *v163; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v165; // [rsp+94h] [rbp-67Ch] BYREF\n  unsigned int v166; // [rsp+98h] [rbp-678h]\n  unsigned int v167; // [rsp+9Ch] [rbp-674h]\n  char v168[8]; // [rsp+A0h] [rbp-670h] BYREF\n  void *v169; // [rsp+A8h] [rbp-668h]\n  _BYTE v170[224]; // [rsp+B0h] [rbp-660h] BYREF\n  __int64 v171; // [rsp+190h] [rbp-580h] BYREF\n  void *v172; // [rsp+198h] [rbp-578h]\n  __int64 v173; // [rsp+1A0h] [rbp-570h]\n  __int64 v174; // [rsp+1A8h] [rbp-568h]\n  _BYTE v175[624]; // [rsp+1B0h] [rbp-560h] BYREF\n  char v176[752]; // [rsp+420h] [rbp-2F0h] BYREF\n\n  src = a1;\n  v156 = a2;\n  if ( (int)sub_40AFD0(a3, &v171, v168) < 0 )\n    return 0LL;\n  if ( (int)sub_40ADB0(a4, v168) >= 0 )\n  {\n    v7 = v173 + 7;\n    if ( (unsigned __int64)(v173 + 7) <= 6 )\n      v7 = -1LL;\n    v76 = __CFADD__(v174, v7);\n    v8 = v174 + v7;\n    if ( v76 )\n      goto LABEL_112;\n    v9 = v8 + 6;\n    if ( v8 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v9 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v23 = alloca(v8 + 14);\n      v161 = &v152;\n    }\n    else\n    {\n      if ( v8 == -7LL )\n        goto LABEL_112;\n      v10 = (__int64 *)malloc(v9);\n      v161 = v10;\n      if ( !v10 )\n        goto LABEL_112;\n      ptr = v10;\n    }\n    v11 = 0LL;\n    if ( src )\n      v11 = *v156;\n    v12 = (char *)v172;\n    v13 = a3;\n    v14 = (char *)src;\n    v159 = 0LL;\n    v15 = 0LL;\n    v16 = *(_BYTE **)v172;\n    if ( *(_BYTE **)v172 == v13 )\n      goto LABEL_111;\nLABEL_14:\n    v17 = (void *)(v16 - v13);\n    v18 = (unsigned __int64)v17 + v15;\n    v19 = (size_t)v17 + v15;\n    if ( __CFADD__(v17, v15) )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n      v19 = -1LL;\n    }\n    else if ( v11 < v18 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v18 )\n        {\nLABEL_28:\n          v20 = v14 == src;\n          if ( !v14 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v18 <= 0xC )\n      {\n        v11 = 12LL;\n        v20 = v14 == src;\n        if ( !v14 )\n        {\nLABEL_19:\n          v160 = v13;\n          LOBYTE(v162) = v20;\n          v163 = v17;\n          v21 = (char *)malloc(v11);\n          v17 = v163;\n          v13 = v160;\n          if ( !v21 )\n            goto LABEL_88;\n          if ( v15 && LOBYTE(v162) )\n          {\n            *(_QWORD *)&v162 = v160;\n            v22 = (char *)memcpy(v21, v14, v15);\n            v17 = v163;\n            v13 = *(_BYTE **)&v162;\n            v14 = v22;\n          }\n          else\n          {\n            v14 = v21;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v20 )\n        {\n          *(_QWORD *)&v162 = v13;\n          v163 = v17;\n          v24 = (char *)realloc(v14, v11);\n          if ( !v24 )\n            goto LABEL_126;\n          v17 = v163;\n          v13 = *(_BYTE **)&v162;\n          v14 = v24;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v18 == -1LL )\n        goto LABEL_88;\n      v11 = (size_t)v17 + v15;\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v14[v15], v13, (size_t)v17);\n    while ( v171 != v159 )\n    {\n      v25 = v12[72];\n      v26 = *((_QWORD *)v12 + 10);\n      if ( v25 == 37 )\n      {\n        if ( v26 != -1 )\n          goto LABEL_200;\n        v59 = v19 + 1;\n        v15 = v19 + 1;\n        if ( v19 == -1LL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n          v15 = -1LL;\n        }\n        else if ( v11 < v59 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 < v59 )\n              goto LABEL_238;\n          }\n          else\n          {\n            if ( v59 <= 0xC )\n            {\n              v11 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_238:\n            if ( v19 == -2LL )\n              goto LABEL_88;\n            v11 = v19 + 1;\n          }\nLABEL_105:\n          if ( v14 && v14 != src )\n          {\n            v60 = (char *)realloc(v14, v11);\n            if ( v60 )\n            {\n              v14 = v60;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v57 = v14;\n            *(_QWORD *)&v162 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v163) = v14 == src;\n          v95 = (char *)malloc(v11);\n          if ( !v95 )\n            goto LABEL_88;\n          if ( v19 && (_BYTE)v163 )\n            v14 = (char *)memcpy(v95, v14, v19);\n          else\n            v14 = v95;\n        }\nLABEL_109:\n        v14[v19] = 37;\n        goto LABEL_110;\n      }\n      if ( v26 == -1 )\n        goto LABEL_200;\n      v27 = (char *)v169;\n      v28 = (long double *)((char *)v169 + 32 * v26);\n      v29 = *(_DWORD *)v28;\n      LODWORD(v163) = *(_DWORD *)v28;\n      if ( v25 != 110 )\n      {\n        v30 = v25 & 0xDF;\n        if ( ((unsigned __int8)((v25 & 0xDF) - 69) <= 2u || v30 == 65) && (_DWORD)v163 == 12 )\n        {\n          _FST7 = v28[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v66 = (char *)*((_QWORD *)v12 + 3);\n            v67 = (char *)*((_QWORD *)v12 + 4);\n            v68 = *((_DWORD *)v12 + 4);\n            if ( v66 == v67 )\n            {\n              v50 = 0LL;\n            }\n            else\n            {\n              v69 = *((_QWORD *)v12 + 5);\n              if ( v69 == -1 )\n              {\n                v50 = 0LL;\n                v163 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v126 = v66 + 1;\n                  v127 = -1LL;\n                  v128 = *v66 - 48;\n                  if ( v50 <= 0x1999999999999999LL )\n                    v127 = 10 * v50;\n                  v76 = __CFADD__(v127, v128);\n                  v50 = v127 + v128;\n                  v66 = v126;\n                  if ( v76 )\n                  {\n                    if ( v67 == v126 )\n                    {\nLABEL_81:\n                      v50 = (unsigned __int64)v163;\n                      goto LABEL_82;\n                    }\n                    while ( *v66++ != 48 )\n                    {\n                      if ( v67 == v66 )\n                        goto LABEL_81;\n                    }\n                    v50 = -1LL;\n                  }\n                  if ( v67 == v66 )\n                    goto LABEL_82;\n                }\n              }\n              v70 = (char *)v169 + 32 * v69;\n              if ( *v70 != 5 )\n                goto LABEL_200;\n              v50 = (int)v70[4];\n              if ( (v50 & 0x80000000) != 0LL )\n              {\n                v68 |= 2u;\n                v50 = -(__int64)v50;\n              }\n            }\nLABEL_82:\n            v51 = (char *)*((_QWORD *)v12 + 6);\n            v52 = (char *)*((_QWORD *)v12 + 7);\n            if ( v51 != v52 )\n            {\n              v53 = *((_QWORD *)v12 + 8);\n              if ( v53 == -1 )\n              {\n                v129 = v51 + 1;\n                v55 = 0LL;\n                if ( v52 != v129 )\n                {\n                  v130 = v129;\n                  while ( 1 )\n                  {\n                    v131 = v130 + 1;\n                    v132 = *v130 - 48;\n                    v133 = -1LL;\n                    if ( v55 <= 0x1999999999999999LL )\n                      v133 = 10 * v55;\n                    v76 = __CFADD__(v133, v132);\n                    v134 = v133 + v132;\n                    v130 = v131;\n                    v55 = v134;\n                    if ( v76 )\n                    {\n                      if ( v52 == v131 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v130 = v131 + 1;\n                        if ( *v131 == 48 )\n                          break;\n                        if ( v52 == v130 )\n                          goto LABEL_88;\n                        ++v131;\n                      }\n                      v55 = -1LL;\n                    }\n                    if ( v52 == v130 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_375;\n              }\n              v54 = (char *)v169 + 32 * v53;\n              if ( *v54 != 5 )\n                goto LABEL_200;\n              v55 = (int)v54[4];\n              if ( (v55 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v55 )\n                {\n                  v56 = v55 + 12;\n                  if ( v55 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_190:\n                  v86 = v56;\n                  if ( v50 >= v56 )\n                    v86 = v50;\n                  v76 = __CFADD__(v86, 1LL);\n                  v87 = (void *)(v86 + 1);\n                  v163 = v87;\n                  if ( v76 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v87 <= 0x2BC )\n                  {\n                    v89 = v176;\n                  }\n                  else\n                  {\n                    v157 = (void *)v50;\n                    v158 = (char *)v55;\n                    LODWORD(v160) = v68;\n                    v162 = _FST7;\n                    if ( v87 == (void *)-1LL )\n                      goto LABEL_88;\n                    v88 = (char *)malloc((size_t)v87);\n                    v68 = (int)v160;\n                    _FST7 = v162;\n                    v89 = v88;\n                    v55 = (unsigned __int64)v158;\n                    v50 = (unsigned __int64)v157;\n                    if ( !v88 )\n                      goto LABEL_88;\n                  }\n                  v90 = (unsigned __int16)v166;\n                  LOBYTE(v91) = v166;\n                  HIBYTE(v91) = BYTE1(v166) | 3;\n                  LOWORD(v166) = v91;\n                  __asm { fxam }\n                  if ( (v62 & 2) != 0 )\n                  {\n                    *v89 = 45;\n                    _FST7 = -_FST7;\n                    v92 = v89 + 1;\n                  }\n                  else if ( (v68 & 4) != 0 )\n                  {\n                    v92 = v89 + 1;\n                    *v89 = 43;\n                  }\n                  else\n                  {\n                    v92 = v89;\n                    if ( (v68 & 8) != 0 )\n                    {\n                      v92 = v89 + 1;\n                      *v89 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_200;\n                    v97 = v92 + 3;\n                    if ( (unsigned __int8)(v12[72] - 65) > 0x19u )\n                    {\n                      v92[2] = 102;\n                      *(_WORD *)v92 = 28265;\n                    }\n                    else\n                    {\n                      v92[2] = 70;\n                      *(_WORD *)v92 = 20041;\n                    }\n                    v92 = 0LL;\n                    goto LABEL_263;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_200;\n                  v96 = v12[72] & 0xDF;\n                  switch ( v96 )\n                  {\n                    case 'F':\n                      *v92 = 48;\n                      if ( (v68 & 0x10) != 0 || v55 )\n                      {\n                        LODWORD(v153) = v90;\n                        v154 = (char *)v50;\n                        v157 = v89;\n                        v158 = (char *)v55;\n                        LODWORD(v160) = v68;\n                        *(_QWORD *)&v162 = v92 + 2;\n                        v122 = nl_langinfo(0x10000);\n                        v123 = (__int64)v158;\n                        v97 = *(char **)&v162;\n                        v124 = *v122;\n                        LOBYTE(v68) = (_BYTE)v160;\n                        v89 = (char *)v157;\n                        v50 = (unsigned __int64)v154;\n                        LOWORD(v90) = v153;\n                        if ( !v124 )\n                          v124 = 46;\n                        v92[1] = v124;\n                        if ( v123 )\n                        {\n                          v125 = v97;\n                          do\n                            *v125++ = 48;\n                          while ( v125 != &v92[v123 + 2] );\n                          v97 += v123;\n                        }\n                        goto LABEL_263;\n                      }\n                      goto LABEL_262;\n                    case 'E':\n                      *v92 = 48;\n                      if ( (v68 & 0x10) != 0 || (v105 = v92 + 1, v55) )\n                      {\n                        LODWORD(v153) = v90;\n                        v154 = (char *)v50;\n                        v157 = v89;\n                        v158 = (char *)v55;\n                        LODWORD(v160) = v68;\n                        *(_QWORD *)&v162 = v92 + 2;\n                        v138 = nl_langinfo(0x10000);\n                        v139 = (__int64)v158;\n                        v105 = *(char **)&v162;\n                        v140 = *v138;\n                        LOBYTE(v68) = (_BYTE)v160;\n                        v89 = (char *)v157;\n                        v50 = (unsigned __int64)v154;\n                        LOWORD(v90) = v153;\n                        if ( !v140 )\n                          v140 = 46;\n                        v92[1] = v140;\n                        if ( v139 )\n                        {\n                          v141 = v105;\n                          do\n                            *v141++ = 48;\n                          while ( v141 != &v92[v139 + 2] );\n                          v105 += v139;\n                        }\n                      }\n                      v106 = v12[72];\n                      v97 = v105 + 4;\n                      v105[3] = 48;\n                      *v105 = v106;\n                      *(_WORD *)(v105 + 1) = 12331;\n                      goto LABEL_263;\n                    case 'G':\n                      *v92 = 48;\n                      if ( (v68 & 0x10) != 0 )\n                      {\n                        if ( v55 )\n                        {\n                          HIDWORD(v152) = v90;\n                          v153 = v50;\n                          v154 = v92 + 2;\n                          v157 = v89;\n                          LODWORD(v158) = v68;\n                          v160 = (_BYTE *)v55;\n                          *(_QWORD *)&v162 = v55 - 1;\n                          v116 = nl_langinfo(0x10000);\n                          v117 = *(_QWORD *)&v162;\n                          v118 = (__int64)v160;\n                          v119 = *v116;\n                          LOBYTE(v68) = (_BYTE)v158;\n                          v89 = (char *)v157;\n                          v97 = v154;\n                          v50 = v153;\n                          LOWORD(v90) = WORD2(v152);\n                          if ( !v119 )\n                            v119 = 46;\n                          v92[1] = v119;\n                          if ( v117 )\n                          {\n                            v120 = (__int64)&v92[v118 + 1];\n                            v121 = v97;\n                            do\n                              *v121++ = 48;\n                            while ( v121 != (char *)v120 );\n                            v97 += v117;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v154) = v90;\n                          v157 = (void *)v50;\n                          v158 = v92 + 2;\n                          v160 = v89;\n                          LODWORD(v162) = v68;\n                          v147 = nl_langinfo(0x10000);\n                          LOBYTE(v68) = LOBYTE(v162);\n                          v89 = v160;\n                          v148 = *v147;\n                          v97 = v158;\n                          v50 = (unsigned __int64)v157;\n                          LOWORD(v90) = (_WORD)v154;\n                          if ( !v148 )\n                            v148 = 46;\n                          v92[1] = v148;\n                        }\n                        goto LABEL_263;\n                      }\nLABEL_262:\n                      v97 = v92 + 1;\n                      goto LABEL_263;\n                  }\n                  if ( v96 != 65 )\n                    goto LABEL_200;\n                  *v92 = 48;\n                  *(_QWORD *)&v162 = v92 + 2;\n                  v135 = v12[72];\n                  v92[2] = 48;\n                  v92[1] = v135 + 23;\n                  if ( (v68 & 0x10) != 0 || (v136 = (__int64)(v92 + 3), v55) )\n                  {\n                    HIDWORD(v152) = v90;\n                    v153 = v50;\n                    v154 = v89;\n                    v157 = (void *)v55;\n                    LODWORD(v158) = v68;\n                    v160 = v92 + 4;\n                    v143 = nl_langinfo(0x10000);\n                    v144 = v157;\n                    v136 = (__int64)v160;\n                    v145 = *v143;\n                    LOBYTE(v68) = (_BYTE)v158;\n                    v89 = v154;\n                    v50 = v153;\n                    LOWORD(v90) = WORD2(v152);\n                    if ( !v145 )\n                      v145 = 46;\n                    v92[3] = v145;\n                    if ( v144 )\n                    {\n                      v146 = (_BYTE *)v136;\n                      do\n                        *v146++ = 48;\n                      while ( v146 != (_BYTE *)v144 + (_QWORD)v92 + 4 );\n                      v136 += (__int64)v144;\n                    }\n                  }\n                  v137 = v12[72];\n                  v97 = (char *)(v136 + 3);\n                  *(_WORD *)(v136 + 1) = 12331;\n                  v92 = *(char **)&v162;\n                  *(_BYTE *)v136 = v137 + 15;\nLABEL_263:\n                  LOWORD(v166) = v90;\n                  v98 = v97 - v89;\n                  if ( v50 > v97 - v89 )\n                  {\n                    v99 = v50 - v98;\n                    v100 = &v97[v99];\n                    v98 = &v97[v99] - v89;\n                    if ( (v68 & 2) != 0 )\n                    {\n                      if ( v99 )\n                      {\n                        do\n                          *v97++ = 32;\n                        while ( v100 != v97 );\n                      }\n                    }\n                    else if ( (v68 & 0x20) != 0 && v92 )\n                    {\n                      if ( v92 >= v97 )\n                      {\n                        v92 = v97;\n                      }\n                      else\n                      {\n                        v101 = -1LL;\n                        do\n                        {\n                          v100[v101] = v97[v101];\n                          --v101;\n                        }\n                        while ( v101 != v92 - 1 - v97 );\n                      }\n                      if ( v99 )\n                      {\n                        v102 = &v92[v99];\n                        do\n                          *v92++ = 48;\n                        while ( v92 != v102 );\n                      }\n                    }\n                    else\n                    {\n                      v112 = -1LL;\n                      if ( v89 < v97 )\n                      {\n                        do\n                        {\n                          v100[v112] = v97[v112];\n                          --v112;\n                        }\n                        while ( v89 - 1 - v97 != v112 );\n                        v97 = v89;\n                      }\n                      if ( v99 )\n                      {\n                        v113 = &v97[v99];\n                        do\n                          *v97++ = 32;\n                        while ( v97 != v113 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v163 <= v98 )\n                    goto LABEL_200;\n                  v103 = v98 + v19;\n                  v15 = v98 + v19;\n                  if ( v11 - v19 <= v98 )\n                  {\n                    if ( __CFADD__(v98, v19) )\n                    {\n                      if ( v11 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v11 < v103 )\n                    {\n                      if ( v11 )\n                      {\n                        if ( (v11 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v11 *= 2LL;\n                        if ( v11 < v103 )\n                          goto LABEL_373;\n                      }\n                      else\n                      {\n                        if ( v103 <= 0xC )\n                        {\n                          v11 = 12LL;\n                          goto LABEL_280;\n                        }\nLABEL_373:\n                        if ( v103 == -1LL )\n                          goto LABEL_88;\n                        v11 = v98 + v19;\n                      }\nLABEL_280:\n                      if ( !v14 || v14 == src )\n                      {\n                        LOBYTE(v160) = v14 == src;\n                        *(_QWORD *)&v162 = v98;\n                        v163 = v89;\n                        v114 = (char *)malloc(v11);\n                        v89 = (char *)v163;\n                        v98 = *(_QWORD *)&v162;\n                        if ( !v114 )\n                          goto LABEL_88;\n                        if ( v19 && (_BYTE)v160 )\n                        {\n                          v115 = (char *)memcpy(v114, v14, v19);\n                          v89 = (char *)v163;\n                          v98 = *(_QWORD *)&v162;\n                          v14 = v115;\n                        }\n                        else\n                        {\n                          v14 = v114;\n                        }\n                      }\n                      else\n                      {\n                        *(_QWORD *)&v162 = v98;\n                        v163 = v89;\n                        v104 = (char *)realloc(v14, v11);\n                        if ( !v104 )\n                          goto LABEL_88;\n                        v89 = (char *)v163;\n                        v98 = *(_QWORD *)&v162;\n                        v14 = v104;\n                      }\n                    }\n                  }\n                  v163 = v89;\n                  memcpy(&v14[v19], v89, v98);\n                  if ( v163 != v176 )\n                    free(v163);\n                  goto LABEL_110;\n                }\nLABEL_375:\n                v56 = 12LL;\n                goto LABEL_190;\n              }\n            }\n            v56 = 12LL;\n            if ( v30 != 65 )\n              v56 = 18LL;\n            v55 = 0LL;\n            if ( v30 != 65 )\n              v55 = 6LL;\n            goto LABEL_190;\n          }\n        }\n        v31 = *((_DWORD *)v12 + 4);\n        v32 = (char *)v161 + 1;\n        *(_BYTE *)v161 = 37;\n        if ( (v31 & 1) != 0 )\n        {\n          v33 = (__int64)v161;\n          *((_BYTE *)v161 + 1) = 39;\n          v32 = (char *)(v33 + 2);\n        }\n        if ( (v31 & 2) != 0 )\n          *v32++ = 45;\n        if ( (v31 & 4) != 0 )\n          *v32++ = 43;\n        if ( (v31 & 8) != 0 )\n          *v32++ = 32;\n        if ( (v31 & 0x10) != 0 )\n          *v32++ = 35;\n        if ( (v31 & 0x40) != 0 )\n          *v32++ = 73;\n        if ( (v31 & 0x20) != 0 )\n          *v32++ = 48;\n        v34 = (_BYTE *)*((_QWORD *)v12 + 3);\n        v35 = (_BYTE *)*((_QWORD *)v12 + 4);\n        if ( v34 != v35 )\n        {\n          v160 = v27;\n          *(_QWORD *)&v162 = v35 - v34;\n          memcpy(v32, v34, v35 - v34);\n          v27 = v160;\n          v32 += *(_QWORD *)&v162;\n        }\n        v36 = (_BYTE *)*((_QWORD *)v12 + 6);\n        v37 = (_BYTE *)*((_QWORD *)v12 + 7);\n        if ( v36 != v37 )\n        {\n          v160 = v27;\n          *(_QWORD *)&v162 = v37 - v36;\n          memcpy(v32, v36, v37 - v36);\n          v27 = v160;\n          v32 += *(_QWORD *)&v162;\n        }\n        if ( (unsigned int)v163 <= 0x10 )\n        {\n          v38 = 1LL << (char)v163;\n          if ( ((1LL << (char)v163) & 0x14180) != 0 )\n            goto LABEL_125;\n          if ( (v38 & 0x1000) != 0 )\n          {\n            *v32++ = 76;\n          }\n          else\n          {\n            if ( (v38 & 0x600) == 0 )\n              goto LABEL_62;\n            *v32++ = 108;\nLABEL_125:\n            *v32++ = 108;\n          }\n        }\nLABEL_62:\n        v39 = v12[72];\n        v32[1] = 0;\n        *v32 = v39;\n        v40 = *((_QWORD *)v12 + 5);\n        if ( v40 != -1 )\n        {\n          v41 = &v27[32 * v40];\n          if ( *(_DWORD *)v41 == 5 )\n          {\n            LODWORD(v160) = 1;\n            v166 = *((_DWORD *)v41 + 4);\n            goto LABEL_65;\n          }\nLABEL_200:\n          abort();\n        }\n        LODWORD(v160) = 0;\nLABEL_65:\n        v42 = *((_QWORD *)v12 + 8);\n        if ( v42 != -1 )\n        {\n          v43 = &v27[32 * v42];\n          if ( *(_DWORD *)v43 != 5 )\n            goto LABEL_200;\n          v44 = (int)v160;\n          *(&v166 + (unsigned int)v160) = *((_DWORD *)v43 + 4);\n          LODWORD(v160) = v44 + 1;\n        }\n        v45 = v19 + 2;\n        if ( v19 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v11 < v45 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 >= v45 )\n              goto LABEL_73;\n          }\n          else if ( v45 <= 0xC )\n          {\n            v11 = 12LL;\nLABEL_73:\n            if ( v14 && v14 != src )\n            {\n              v46 = (char *)realloc(v14, v11);\n              if ( v46 )\n                goto LABEL_76;\nLABEL_88:\n              v57 = v14;\n              *(_QWORD *)&v162 = __errno_location();\nLABEL_89:\n              if ( v57 == src || !v57 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v172 != v175 )\n                    free(v172);\n                  if ( v169 != v170 )\n                    free(v169);\n                  v14 = 0LL;\n                  **(_DWORD **)&v162 = 12;\n                  return v14;\n                }\nLABEL_112:\n                *(_QWORD *)&v162 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v57);\n              goto LABEL_91;\n            }\n            LOBYTE(v162) = v14 == src;\n            v94 = (char *)malloc(v11);\n            v46 = v94;\n            if ( !v94 )\n              goto LABEL_88;\n            if ( v19 && LOBYTE(v162) )\n              v46 = (char *)memcpy(v94, v14, v19);\nLABEL_76:\n            v46[v19] = 0;\n            v158 = v46;\n            v47 = __errno_location();\n            v48 = v158;\n            v158 = v32;\n            *(_QWORD *)&v162 = v47;\n            LODWORD(v154) = *v47;\n            while ( 2 )\n            {\n              v49 = 0x7FFFFFFFLL;\n              v165 = -1;\n              **(_DWORD **)&v162 = 0;\n              if ( v11 - v19 <= 0x7FFFFFFF )\n                v49 = v11 - v19;\n              switch ( (int)v163 )\n              {\n                case 1:\n                  v72 = (unsigned int)*((char *)v169 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 2:\n                  v72 = *((unsigned __int8 *)v169 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 3:\n                  v72 = (unsigned int)*((__int16 *)v169 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 4:\n                  v72 = *((unsigned __int16 *)v169 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 5:\n                case 6:\n                case 13:\n                case 14:\n                  v72 = *((unsigned int *)v169 + 8 * *((_QWORD *)v12 + 10) + 4);\nLABEL_150:\n                  v71 = &v48[v19];\n                  v157 = v48;\n                  if ( (_DWORD)v160 != 1 )\n                  {\n                    if ( (_DWORD)v160 != 2 )\n                    {\n                      v150 = &v165;\n                      goto LABEL_153;\n                    }\n                    goto LABEL_209;\n                  }\n                  v151 = &v165;\n                  v150 = (int *)v72;\n                  break;\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                case 15:\n                case 16:\n                case 17:\n                  v71 = &v48[v19];\n                  v72 = *((_QWORD *)v169 + 4 * *((_QWORD *)v12 + 10) + 2);\n                  v157 = v48;\n                  if ( (_DWORD)v160 != 1 )\n                  {\n                    if ( (_DWORD)v160 != 2 )\n                    {\n                      v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v161, v72, a5, &v165, v151);\nLABEL_131:\n                      v48 = (char *)v157;\n                      goto LABEL_132;\n                    }\nLABEL_209:\n                    v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v161, v166, a5, v167, v72);\nLABEL_210:\n                    v48 = (char *)v157;\nLABEL_132:\n                    v74 = v165;\n                    if ( v165 < 0 )\n                    {\nLABEL_154:\n                      if ( v158[1] )\n                      {\n                        v158[1] = 0;\n                        continue;\n                      }\n                      if ( v73 < 0 )\n                      {\n                        v80 = **(_DWORD **)&v162;\n                        if ( !**(_DWORD **)&v162 )\n                        {\n                          v80 = 84;\n                          if ( (v12[72] & 0xEF) != 99 )\n                            v80 = 22;\n                        }\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v172 != v175 )\n                          free(v172);\n                        if ( v169 != v170 )\n                          free(v169);\n                        **(_DWORD **)&v162 = v80;\n                        return 0LL;\n                      }\nLABEL_136:\n                      v165 = v73;\n                      v74 = v73;\nLABEL_137:\n                      if ( (unsigned int)(v74 + 1) < v49 )\n                      {\n                        v14 = v48;\n                        v15 = v19 + v74;\n                        **(_DWORD **)&v162 = (_DWORD)v154;\n                        goto LABEL_110;\n                      }\n                      if ( v11 - v19 > 0x7FFFFFFE )\n                      {\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v172 != v175 )\n                          free(v172);\n                        if ( v169 != v170 )\n                          free(v169);\n                        v14 = 0LL;\n                        **(_DWORD **)&v162 = 75;\n                        return v14;\n                      }\n                      v75 = (unsigned int)(v74 + 2);\n                      v76 = __CFADD__(v19, v75);\n                      v77 = v19 + v75;\n                      if ( (v11 & 0x8000000000000000LL) != 0LL )\n                      {\n                        if ( v11 != -1LL )\n                          goto LABEL_202;\n                      }\n                      else\n                      {\n                        if ( v76 )\n                          goto LABEL_202;\n                        if ( 2 * v11 >= v77 )\n                          v77 = 2 * v11;\n                        if ( v11 < v77 )\n                        {\n                          v11 *= 2LL;\n                          if ( v11 < v77 )\n                          {\n                            if ( v77 == -1LL )\n                            {\nLABEL_202:\n                              v57 = v48;\n                              goto LABEL_89;\n                            }\n                            v11 = v77;\n                          }\n                          v78 = v48 == src;\n                          if ( !v48 || v48 == src )\n                          {\n                            v157 = v48;\n                            v93 = (char *)malloc(v11);\n                            v48 = (char *)v157;\n                            if ( !v93 )\n                              goto LABEL_202;\n                            if ( v19 && v78 )\n                              v48 = (char *)memcpy(v93, v157, v19);\n                            else\n                              v48 = v93;\n                          }\n                          else\n                          {\n                            v157 = v48;\n                            v79 = (char *)realloc(v48, v11);\n                            v48 = (char *)v157;\n                            if ( !v79 )\n                              goto LABEL_202;\n                            v48 = v79;\n                          }\n                        }\n                      }\n                      continue;\n                    }\nLABEL_133:\n                    if ( v74 < v49 && v48[v74 + v19] )\n                      goto LABEL_200;\n                    if ( v74 >= v73 )\n                      goto LABEL_137;\n                    goto LABEL_136;\n                  }\n                  v151 = &v165;\n                  v150 = (int *)v72;\n                  break;\n                case 11:\n                  v84 = *((_QWORD *)v12 + 10);\n                  v85 = &v48[v19];\n                  v157 = v48;\n                  a5 = *((double *)v169 + 4 * v84 + 2);\n                  if ( (_DWORD)v160 == 1 )\n                  {\n                    v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v161, v166, a5, &v165, v151);\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v160 != 2 )\n                    {\n                      v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v161, &v165, a5, v152, v153);\n                      v48 = (char *)v157;\n                      goto LABEL_132;\n                    }\n                    v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v161, v166, a5, v167, &v165);\n                  }\n                  v48 = (char *)v157;\n                  goto LABEL_132;\n                case 12:\n                  v81 = *((_QWORD *)v12 + 10);\n                  v82 = &v48[v19];\n                  v157 = v48;\n                  v83 = *((unsigned __int128 *)v169 + 2 * v81 + 1);\n                  if ( (_DWORD)v160 == 1 )\n                  {\n                    v73 = __snprintf_chk(v82, v49, 1LL, -1LL, v161, v166, a5, v83, v83 >> 64);\n                    goto LABEL_210;\n                  }\n                  if ( (_DWORD)v160 != 2 )\n                  {\n                    v73 = __snprintf_chk(v82, v49, 1LL, -1LL, v161, &v165, a5, v83, v83 >> 64);\n                    goto LABEL_131;\n                  }\n                  v73 = __snprintf_chk(v82, v49, 1LL, -1LL, v161, v166, a5, v167, v149);\n                  v48 = (char *)v157;\n                  goto LABEL_132;\n                default:\n                  goto LABEL_408;\n              }\n              break;\n            }\n            v72 = v166;\nLABEL_153:\n            v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v161, v72, a5, v150, v151);\n            v74 = v165;\n            v48 = (char *)v157;\n            if ( v165 < 0 )\n              goto LABEL_154;\n            goto LABEL_133;\n          }\n          if ( v19 != -3LL )\n          {\n            v11 = v19 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v46 = v14;\n        goto LABEL_76;\n      }\n      switch ( v29 )\n      {\n        case 18:\n          v15 = v19;\n          **((_BYTE **)v28 + 2) = v19;\n          break;\n        case 19:\n          v15 = v19;\n          **((_WORD **)v28 + 2) = v19;\n          break;\n        case 20:\n          v15 = v19;\n          **((_DWORD **)v28 + 2) = v19;\n          break;\n        case 21:\n        case 22:\n          v15 = v19;\n          **((_QWORD **)v28 + 2) = v19;\n          break;\n        default:\nLABEL_408:\n          abort();\n      }\nLABEL_110:\n      v13 = (_BYTE *)*((_QWORD *)v12 + 1);\n      v12 += 88;\n      v16 = *(_BYTE **)v12;\n      ++v159;\n      if ( v16 != v13 )\n        goto LABEL_14;\nLABEL_111:\n      v19 = v15;\n    }\n    v107 = v19;\n    v108 = v19 + 1;\n    if ( v19 == -1LL )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v11 < v108 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v108 )\n        {\nLABEL_303:\n          v109 = v14 == src;\n          if ( !v14 || v14 == src )\n          {\n            v142 = (char *)malloc(v11);\n            if ( !v142 )\n              goto LABEL_88;\n            if ( v107 && v109 )\n              v14 = (char *)memcpy(v142, v14, v107);\n            else\n              v14 = v142;\n          }\n          else\n          {\n            v110 = (char *)realloc(v14, v11);\n            if ( !v110 )\n              goto LABEL_126;\n            v14 = v110;\n          }\n          goto LABEL_307;\n        }\n      }\n      else if ( v108 <= 0xC )\n      {\n        v11 = 12LL;\n        goto LABEL_303;\n      }\n      if ( v19 == -2LL )\n        goto LABEL_88;\n      v11 = v19 + 1;\n      goto LABEL_303;\n    }\nLABEL_307:\n    v14[v107] = 0;\n    if ( v11 > v108 && v14 != src )\n    {\n      v111 = (char *)realloc(v14, v108);\n      if ( v111 )\n        v14 = v111;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v172 != v175 )\n      free(v172);\n    if ( v169 != v170 )\n      free(v169);\n    *v156 = v107;\n    return v14;\n  }\n  if ( v172 != v175 )\n    free(v172);\n  if ( v169 != v170 )\n    free(v169);\n  v14 = 0LL;\n  *__errno_location() = 22;\n  return v14;\n}\n\nchar *__fastcall sub_409290(void *a1, size_t *a2, _BYTE *a3, __int64 a4, double a5)\n{\n  __int64 v7; // rax\n  unsigned __int64 v8; // rax\n  size_t v9; // rdi\n  __int64 *v10; // rax\n  size_t v11; // r12\n  char *v12; // r14\n  _BYTE *v13; // r8\n  char *v14; // rbx\n  size_t v15; // r15\n  _BYTE *v16; // rcx\n  void *v17; // rcx\n  unsigned __int64 v18; // rax\n  size_t v19; // r13\n  bool v20; // dl\n  char *v21; // rax\n  char *v22; // rax\n  void *v23; // rsp\n  char *v24; // rax\n  char v25; // r15\n  __int64 v26; // rax\n  char *v27; // r8\n  long double *v28; // rdx\n  int v29; // eax\n  char v30; // al\n  int v31; // eax\n  char *v32; // r15\n  __int64 v33; // rdi\n  _BYTE *v34; // rsi\n  _BYTE *v35; // rdx\n  _BYTE *v36; // rsi\n  _BYTE *v37; // rdx\n  __int64 v38; // rax\n  char v39; // al\n  __int64 v40; // rax\n  char *v41; // rax\n  __int64 v42; // rax\n  char *v43; // r8\n  int v44; // eax\n  unsigned __int64 v45; // rax\n  char *v46; // r11\n  int *v47; // rax\n  char *v48; // r11\n  unsigned __int64 v49; // rbx\n  unsigned __int64 v50; // r10\n  char *v51; // rdx\n  char *v52; // rcx\n  __int64 v53; // rsi\n  _DWORD *v54; // r8\n  unsigned __int64 v55; // rdx\n  unsigned __int64 v56; // rcx\n  void *v57; // r15\n  unsigned __int64 v59; // rax\n  char *v60; // rax\n  char v62; // fps^1\n  char *v66; // rdx\n  char *v67; // rdi\n  int v68; // r11d\n  __int64 v69; // rcx\n  _DWORD *v70; // rcx\n  char *v71; // rdi\n  unsigned __int64 v72; // r9\n  int v73; // eax\n  int v74; // edx\n  __int64 v75; // rax\n  bool v76; // cf\n  unsigned __int64 v77; // rax\n  bool v78; // bl\n  char *v79; // rax\n  int v80; // ebx\n  __int64 v81; // rax\n  char *v82; // rdi\n  unsigned __int128 v83; // fst7\n  __int64 v84; // rax\n  char *v85; // rdi\n  unsigned __int64 v86; // rax\n  void *v87; // rax\n  char *v88; // rax\n  char *v89; // rcx\n  int v90; // r8d\n  __int16 v91; // ax\n  char *v92; // r15\n  char *v93; // rax\n  char *v94; // rax\n  char *v95; // rax\n  char v96; // al\n  char *v97; // r9\n  size_t v98; // r8\n  unsigned __int64 v99; // r10\n  char *v100; // rdi\n  __int64 v101; // rax\n  char *v102; // r10\n  unsigned __int64 v103; // rax\n  char *v104; // rax\n  char *v105; // rsi\n  char v106; // al\n  size_t v107; // r15\n  size_t v108; // r14\n  bool v109; // r13\n  char *v110; // rax\n  char *v111; // rax\n  __int64 v112; // rax\n  char *v113; // r10\n  char *v114; // rax\n  char *v115; // rax\n  char *v116; // rax\n  __int64 v117; // rsi\n  __int64 v118; // rdx\n  char v119; // al\n  __int64 v120; // rdx\n  char *v121; // rax\n  char *v122; // rax\n  __int64 v123; // rdx\n  char v124; // al\n  char *v125; // rax\n  char *v126; // rsi\n  __int64 v127; // r9\n  __int64 v128; // rdx\n  char *v129; // rax\n  char *v130; // rsi\n  char *v131; // rdi\n  __int64 v132; // rax\n  __int64 v133; // rsi\n  unsigned __int64 v134; // rax\n  char v135; // al\n  __int64 v136; // rsi\n  char v137; // al\n  char *v138; // rax\n  __int64 v139; // rdx\n  char v140; // al\n  char *v141; // rax\n  char *v142; // rax\n  char *v143; // rax\n  void *v144; // rdx\n  char v145; // al\n  _BYTE *v146; // rax\n  char *v147; // rax\n  char v148; // al\n  __int64 v149; // [rsp-8h] [rbp-718h]\n  int *v150; // [rsp+10h] [rbp-700h]\n  int *v151; // [rsp+18h] [rbp-6F8h]\n  __int64 v152; // [rsp+20h] [rbp-6F0h] BYREF\n  unsigned __int64 v153; // [rsp+28h] [rbp-6E8h]\n  char *v154; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v156; // [rsp+40h] [rbp-6D0h]\n  void *v157; // [rsp+48h] [rbp-6C8h]\n  char *v158; // [rsp+50h] [rbp-6C0h]\n  __int64 v159; // [rsp+58h] [rbp-6B8h]\n  _BYTE *v160; // [rsp+60h] [rbp-6B0h]\n  __int64 *v161; // [rsp+68h] [rbp-6A8h]\n  long double v162; // [rsp+70h] [rbp-6A0h]\n  void *v163; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v165; // [rsp+94h] [rbp-67Ch] BYREF\n  unsigned int v166; // [rsp+98h] [rbp-678h]\n  unsigned int v167; // [rsp+9Ch] [rbp-674h]\n  char v168[8]; // [rsp+A0h] [rbp-670h] BYREF\n  void *v169; // [rsp+A8h] [rbp-668h]\n  _BYTE v170[224]; // [rsp+B0h] [rbp-660h] BYREF\n  __int64 v171; // [rsp+190h] [rbp-580h] BYREF\n  void *v172; // [rsp+198h] [rbp-578h]\n  __int64 v173; // [rsp+1A0h] [rbp-570h]\n  __int64 v174; // [rsp+1A8h] [rbp-568h]\n  _BYTE v175[624]; // [rsp+1B0h] [rbp-560h] BYREF\n  char v176[752]; // [rsp+420h] [rbp-2F0h] BYREF\n\n  src = a1;\n  v156 = a2;\n  if ( (int)sub_40AFD0(a3, &v171, v168) < 0 )\n    return 0LL;\n  if ( (int)sub_40ADB0(a4, v168) >= 0 )\n  {\n    v7 = v173 + 7;\n    if ( (unsigned __int64)(v173 + 7) <= 6 )\n      v7 = -1LL;\n    v76 = __CFADD__(v174, v7);\n    v8 = v174 + v7;\n    if ( v76 )\n      goto LABEL_112;\n    v9 = v8 + 6;\n    if ( v8 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v9 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v23 = alloca(v8 + 14);\n      v161 = &v152;\n    }\n    else\n    {\n      if ( v8 == -7LL )\n        goto LABEL_112;\n      v10 = (__int64 *)malloc(v9);\n      v161 = v10;\n      if ( !v10 )\n        goto LABEL_112;\n      ptr = v10;\n    }\n    v11 = 0LL;\n    if ( src )\n      v11 = *v156;\n    v12 = (char *)v172;\n    v13 = a3;\n    v14 = (char *)src;\n    v159 = 0LL;\n    v15 = 0LL;\n    v16 = *(_BYTE **)v172;\n    if ( *(_BYTE **)v172 == v13 )\n      goto LABEL_111;\nLABEL_14:\n    v17 = (void *)(v16 - v13);\n    v18 = (unsigned __int64)v17 + v15;\n    v19 = (size_t)v17 + v15;\n    if ( __CFADD__(v17, v15) )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n      v19 = -1LL;\n    }\n    else if ( v11 < v18 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v18 )\n        {\nLABEL_28:\n          v20 = v14 == src;\n          if ( !v14 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v18 <= 0xC )\n      {\n        v11 = 12LL;\n        v20 = v14 == src;\n        if ( !v14 )\n        {\nLABEL_19:\n          v160 = v13;\n          LOBYTE(v162) = v20;\n          v163 = v17;\n          v21 = (char *)malloc(v11);\n          v17 = v163;\n          v13 = v160;\n          if ( !v21 )\n            goto LABEL_88;\n          if ( v15 && LOBYTE(v162) )\n          {\n            *(_QWORD *)&v162 = v160;\n            v22 = (char *)memcpy(v21, v14, v15);\n            v17 = v163;\n            v13 = *(_BYTE **)&v162;\n            v14 = v22;\n          }\n          else\n          {\n            v14 = v21;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v20 )\n        {\n          *(_QWORD *)&v162 = v13;\n          v163 = v17;\n          v24 = (char *)realloc(v14, v11);\n          if ( !v24 )\n            goto LABEL_126;\n          v17 = v163;\n          v13 = *(_BYTE **)&v162;\n          v14 = v24;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v18 == -1LL )\n        goto LABEL_88;\n      v11 = (size_t)v17 + v15;\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v14[v15], v13, (size_t)v17);\n    while ( v171 != v159 )\n    {\n      v25 = v12[72];\n      v26 = *((_QWORD *)v12 + 10);\n      if ( v25 == 37 )\n      {\n        if ( v26 != -1 )\n          goto LABEL_200;\n        v59 = v19 + 1;\n        v15 = v19 + 1;\n        if ( v19 == -1LL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n          v15 = -1LL;\n        }\n        else if ( v11 < v59 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 < v59 )\n              goto LABEL_238;\n          }\n          else\n          {\n            if ( v59 <= 0xC )\n            {\n              v11 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_238:\n            if ( v19 == -2LL )\n              goto LABEL_88;\n            v11 = v19 + 1;\n          }\nLABEL_105:\n          if ( v14 && v14 != src )\n          {\n            v60 = (char *)realloc(v14, v11);\n            if ( v60 )\n            {\n              v14 = v60;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v57 = v14;\n            *(_QWORD *)&v162 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v163) = v14 == src;\n          v95 = (char *)malloc(v11);\n          if ( !v95 )\n            goto LABEL_88;\n          if ( v19 && (_BYTE)v163 )\n            v14 = (char *)memcpy(v95, v14, v19);\n          else\n            v14 = v95;\n        }\nLABEL_109:\n        v14[v19] = 37;\n        goto LABEL_110;\n      }\n      if ( v26 == -1 )\n        goto LABEL_200;\n      v27 = (char *)v169;\n      v28 = (long double *)((char *)v169 + 32 * v26);\n      v29 = *(_DWORD *)v28;\n      LODWORD(v163) = *(_DWORD *)v28;\n      if ( v25 != 110 )\n      {\n        v30 = v25 & 0xDF;\n        if ( ((unsigned __int8)((v25 & 0xDF) - 69) <= 2u || v30 == 65) && (_DWORD)v163 == 12 )\n        {\n          _FST7 = v28[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v66 = (char *)*((_QWORD *)v12 + 3);\n            v67 = (char *)*((_QWORD *)v12 + 4);\n            v68 = *((_DWORD *)v12 + 4);\n            if ( v66 == v67 )\n            {\n              v50 = 0LL;\n            }\n            else\n            {\n              v69 = *((_QWORD *)v12 + 5);\n              if ( v69 == -1 )\n              {\n                v50 = 0LL;\n                v163 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v126 = v66 + 1;\n                  v127 = -1LL;\n                  v128 = *v66 - 48;\n                  if ( v50 <= 0x1999999999999999LL )\n                    v127 = 10 * v50;\n                  v76 = __CFADD__(v127, v128);\n                  v50 = v127 + v128;\n                  v66 = v126;\n                  if ( v76 )\n                  {\n                    if ( v67 == v126 )\n                    {\nLABEL_81:\n                      v50 = (unsigned __int64)v163;\n                      goto LABEL_82;\n                    }\n                    while ( *v66++ != 48 )\n                    {\n                      if ( v67 == v66 )\n                        goto LABEL_81;\n                    }\n                    v50 = -1LL;\n                  }\n                  if ( v67 == v66 )\n                    goto LABEL_82;\n                }\n              }\n              v70 = (char *)v169 + 32 * v69;\n              if ( *v70 != 5 )\n                goto LABEL_200;\n              v50 = (int)v70[4];\n              if ( (v50 & 0x80000000) != 0LL )\n              {\n                v68 |= 2u;\n                v50 = -(__int64)v50;\n              }\n            }\nLABEL_82:\n            v51 = (char *)*((_QWORD *)v12 + 6);\n            v52 = (char *)*((_QWORD *)v12 + 7);\n            if ( v51 != v52 )\n            {\n              v53 = *((_QWORD *)v12 + 8);\n              if ( v53 == -1 )\n              {\n                v129 = v51 + 1;\n                v55 = 0LL;\n                if ( v52 != v129 )\n                {\n                  v130 = v129;\n                  while ( 1 )\n                  {\n                    v131 = v130 + 1;\n                    v132 = *v130 - 48;\n                    v133 = -1LL;\n                    if ( v55 <= 0x1999999999999999LL )\n                      v133 = 10 * v55;\n                    v76 = __CFADD__(v133, v132);\n                    v134 = v133 + v132;\n                    v130 = v131;\n                    v55 = v134;\n                    if ( v76 )\n                    {\n                      if ( v52 == v131 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v130 = v131 + 1;\n                        if ( *v131 == 48 )\n                          break;\n                        if ( v52 == v130 )\n                          goto LABEL_88;\n                        ++v131;\n                      }\n                      v55 = -1LL;\n                    }\n                    if ( v52 == v130 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_375;\n              }\n              v54 = (char *)v169 + 32 * v53;\n              if ( *v54 != 5 )\n                goto LABEL_200;\n              v55 = (int)v54[4];\n              if ( (v55 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v55 )\n                {\n                  v56 = v55 + 12;\n                  if ( v55 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_190:\n                  v86 = v56;\n                  if ( v50 >= v56 )\n                    v86 = v50;\n                  v76 = __CFADD__(v86, 1LL);\n                  v87 = (void *)(v86 + 1);\n                  v163 = v87;\n                  if ( v76 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v87 <= 0x2BC )\n                  {\n                    v89 = v176;\n                  }\n                  else\n                  {\n                    v157 = (void *)v50;\n                    v158 = (char *)v55;\n                    LODWORD(v160) = v68;\n                    v162 = _FST7;\n                    if ( v87 == (void *)-1LL )\n                      goto LABEL_88;\n                    v88 = (char *)malloc((size_t)v87);\n                    v68 = (int)v160;\n                    _FST7 = v162;\n                    v89 = v88;\n                    v55 = (unsigned __int64)v158;\n                    v50 = (unsigned __int64)v157;\n                    if ( !v88 )\n                      goto LABEL_88;\n                  }\n                  v90 = (unsigned __int16)v166;\n                  LOBYTE(v91) = v166;\n                  HIBYTE(v91) = BYTE1(v166) | 3;\n                  LOWORD(v166) = v91;\n                  __asm { fxam }\n                  if ( (v62 & 2) != 0 )\n                  {\n                    *v89 = 45;\n                    _FST7 = -_FST7;\n                    v92 = v89 + 1;\n                  }\n                  else if ( (v68 & 4) != 0 )\n                  {\n                    v92 = v89 + 1;\n                    *v89 = 43;\n                  }\n                  else\n                  {\n                    v92 = v89;\n                    if ( (v68 & 8) != 0 )\n                    {\n                      v92 = v89 + 1;\n                      *v89 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_200;\n                    v97 = v92 + 3;\n                    if ( (unsigned __int8)(v12[72] - 65) > 0x19u )\n                    {\n                      v92[2] = 102;\n                      *(_WORD *)v92 = 28265;\n                    }\n                    else\n                    {\n                      v92[2] = 70;\n                      *(_WORD *)v92 = 20041;\n                    }\n                    v92 = 0LL;\n                    goto LABEL_263;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_200;\n                  v96 = v12[72] & 0xDF;\n                  switch ( v96 )\n                  {\n                    case 'F':\n                      *v92 = 48;\n                      if ( (v68 & 0x10) != 0 || v55 )\n                      {\n                        LODWORD(v153) = v90;\n                        v154 = (char *)v50;\n                        v157 = v89;\n                        v158 = (char *)v55;\n                        LODWORD(v160) = v68;\n                        *(_QWORD *)&v162 = v92 + 2;\n                        v122 = nl_langinfo(0x10000);\n                        v123 = (__int64)v158;\n                        v97 = *(char **)&v162;\n                        v124 = *v122;\n                        LOBYTE(v68) = (_BYTE)v160;\n                        v89 = (char *)v157;\n                        v50 = (unsigned __int64)v154;\n                        LOWORD(v90) = v153;\n                        if ( !v124 )\n                          v124 = 46;\n                        v92[1] = v124;\n                        if ( v123 )\n                        {\n                          v125 = v97;\n                          do\n                            *v125++ = 48;\n                          while ( v125 != &v92[v123 + 2] );\n                          v97 += v123;\n                        }\n                        goto LABEL_263;\n                      }\n                      goto LABEL_262;\n                    case 'E':\n                      *v92 = 48;\n                      if ( (v68 & 0x10) != 0 || (v105 = v92 + 1, v55) )\n                      {\n                        LODWORD(v153) = v90;\n                        v154 = (char *)v50;\n                        v157 = v89;\n                        v158 = (char *)v55;\n                        LODWORD(v160) = v68;\n                        *(_QWORD *)&v162 = v92 + 2;\n                        v138 = nl_langinfo(0x10000);\n                        v139 = (__int64)v158;\n                        v105 = *(char **)&v162;\n                        v140 = *v138;\n                        LOBYTE(v68) = (_BYTE)v160;\n                        v89 = (char *)v157;\n                        v50 = (unsigned __int64)v154;\n                        LOWORD(v90) = v153;\n                        if ( !v140 )\n                          v140 = 46;\n                        v92[1] = v140;\n                        if ( v139 )\n                        {\n                          v141 = v105;\n                          do\n                            *v141++ = 48;\n                          while ( v141 != &v92[v139 + 2] );\n                          v105 += v139;\n                        }\n                      }\n                      v106 = v12[72];\n                      v97 = v105 + 4;\n                      v105[3] = 48;\n                      *v105 = v106;\n                      *(_WORD *)(v105 + 1) = 12331;\n                      goto LABEL_263;\n                    case 'G':\n                      *v92 = 48;\n                      if ( (v68 & 0x10) != 0 )\n                      {\n                        if ( v55 )\n                        {\n                          HIDWORD(v152) = v90;\n                          v153 = v50;\n                          v154 = v92 + 2;\n                          v157 = v89;\n                          LODWORD(v158) = v68;\n                          v160 = (_BYTE *)v55;\n                          *(_QWORD *)&v162 = v55 - 1;\n                          v116 = nl_langinfo(0x10000);\n                          v117 = *(_QWORD *)&v162;\n                          v118 = (__int64)v160;\n                          v119 = *v116;\n                          LOBYTE(v68) = (_BYTE)v158;\n                          v89 = (char *)v157;\n                          v97 = v154;\n                          v50 = v153;\n                          LOWORD(v90) = WORD2(v152);\n                          if ( !v119 )\n                            v119 = 46;\n                          v92[1] = v119;\n                          if ( v117 )\n                          {\n                            v120 = (__int64)&v92[v118 + 1];\n                            v121 = v97;\n                            do\n                              *v121++ = 48;\n                            while ( v121 != (char *)v120 );\n                            v97 += v117;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v154) = v90;\n                          v157 = (void *)v50;\n                          v158 = v92 + 2;\n                          v160 = v89;\n                          LODWORD(v162) = v68;\n                          v147 = nl_langinfo(0x10000);\n                          LOBYTE(v68) = LOBYTE(v162);\n                          v89 = v160;\n                          v148 = *v147;\n                          v97 = v158;\n                          v50 = (unsigned __int64)v157;\n                          LOWORD(v90) = (_WORD)v154;\n                          if ( !v148 )\n                            v148 = 46;\n                          v92[1] = v148;\n                        }\n                        goto LABEL_263;\n                      }\nLABEL_262:\n                      v97 = v92 + 1;\n                      goto LABEL_263;\n                  }\n                  if ( v96 != 65 )\n                    goto LABEL_200;\n                  *v92 = 48;\n                  *(_QWORD *)&v162 = v92 + 2;\n                  v135 = v12[72];\n                  v92[2] = 48;\n                  v92[1] = v135 + 23;\n                  if ( (v68 & 0x10) != 0 || (v136 = (__int64)(v92 + 3), v55) )\n                  {\n                    HIDWORD(v152) = v90;\n                    v153 = v50;\n                    v154 = v89;\n                    v157 = (void *)v55;\n                    LODWORD(v158) = v68;\n                    v160 = v92 + 4;\n                    v143 = nl_langinfo(0x10000);\n                    v144 = v157;\n                    v136 = (__int64)v160;\n                    v145 = *v143;\n                    LOBYTE(v68) = (_BYTE)v158;\n                    v89 = v154;\n                    v50 = v153;\n                    LOWORD(v90) = WORD2(v152);\n                    if ( !v145 )\n                      v145 = 46;\n                    v92[3] = v145;\n                    if ( v144 )\n                    {\n                      v146 = (_BYTE *)v136;\n                      do\n                        *v146++ = 48;\n                      while ( v146 != (_BYTE *)v144 + (_QWORD)v92 + 4 );\n                      v136 += (__int64)v144;\n                    }\n                  }\n                  v137 = v12[72];\n                  v97 = (char *)(v136 + 3);\n                  *(_WORD *)(v136 + 1) = 12331;\n                  v92 = *(char **)&v162;\n                  *(_BYTE *)v136 = v137 + 15;\nLABEL_263:\n                  LOWORD(v166) = v90;\n                  v98 = v97 - v89;\n                  if ( v50 > v97 - v89 )\n                  {\n                    v99 = v50 - v98;\n                    v100 = &v97[v99];\n                    v98 = &v97[v99] - v89;\n                    if ( (v68 & 2) != 0 )\n                    {\n                      if ( v99 )\n                      {\n                        do\n                          *v97++ = 32;\n                        while ( v100 != v97 );\n                      }\n                    }\n                    else if ( (v68 & 0x20) != 0 && v92 )\n                    {\n                      if ( v92 >= v97 )\n                      {\n                        v92 = v97;\n                      }\n                      else\n                      {\n                        v101 = -1LL;\n                        do\n                        {\n                          v100[v101] = v97[v101];\n                          --v101;\n                        }\n                        while ( v101 != v92 - 1 - v97 );\n                      }\n                      if ( v99 )\n                      {\n                        v102 = &v92[v99];\n                        do\n                          *v92++ = 48;\n                        while ( v92 != v102 );\n                      }\n                    }\n                    else\n                    {\n                      v112 = -1LL;\n                      if ( v89 < v97 )\n                      {\n                        do\n                        {\n                          v100[v112] = v97[v112];\n                          --v112;\n                        }\n                        while ( v89 - 1 - v97 != v112 );\n                        v97 = v89;\n                      }\n                      if ( v99 )\n                      {\n                        v113 = &v97[v99];\n                        do\n                          *v97++ = 32;\n                        while ( v97 != v113 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v163 <= v98 )\n                    goto LABEL_200;\n                  v103 = v98 + v19;\n                  v15 = v98 + v19;\n                  if ( v11 - v19 <= v98 )\n                  {\n                    if ( __CFADD__(v98, v19) )\n                    {\n                      if ( v11 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v11 < v103 )\n                    {\n                      if ( v11 )\n                      {\n                        if ( (v11 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v11 *= 2LL;\n                        if ( v11 < v103 )\n                          goto LABEL_373;\n                      }\n                      else\n                      {\n                        if ( v103 <= 0xC )\n                        {\n                          v11 = 12LL;\n                          goto LABEL_280;\n                        }\nLABEL_373:\n                        if ( v103 == -1LL )\n                          goto LABEL_88;\n                        v11 = v98 + v19;\n                      }\nLABEL_280:\n                      if ( !v14 || v14 == src )\n                      {\n                        LOBYTE(v160) = v14 == src;\n                        *(_QWORD *)&v162 = v98;\n                        v163 = v89;\n                        v114 = (char *)malloc(v11);\n                        v89 = (char *)v163;\n                        v98 = *(_QWORD *)&v162;\n                        if ( !v114 )\n                          goto LABEL_88;\n                        if ( v19 && (_BYTE)v160 )\n                        {\n                          v115 = (char *)memcpy(v114, v14, v19);\n                          v89 = (char *)v163;\n                          v98 = *(_QWORD *)&v162;\n                          v14 = v115;\n                        }\n                        else\n                        {\n                          v14 = v114;\n                        }\n                      }\n                      else\n                      {\n                        *(_QWORD *)&v162 = v98;\n                        v163 = v89;\n                        v104 = (char *)realloc(v14, v11);\n                        if ( !v104 )\n                          goto LABEL_88;\n                        v89 = (char *)v163;\n                        v98 = *(_QWORD *)&v162;\n                        v14 = v104;\n                      }\n                    }\n                  }\n                  v163 = v89;\n                  memcpy(&v14[v19], v89, v98);\n                  if ( v163 != v176 )\n                    free(v163);\n                  goto LABEL_110;\n                }\nLABEL_375:\n                v56 = 12LL;\n                goto LABEL_190;\n              }\n            }\n            v56 = 12LL;\n            if ( v30 != 65 )\n              v56 = 18LL;\n            v55 = 0LL;\n            if ( v30 != 65 )\n              v55 = 6LL;\n            goto LABEL_190;\n          }\n        }\n        v31 = *((_DWORD *)v12 + 4);\n        v32 = (char *)v161 + 1;\n        *(_BYTE *)v161 = 37;\n        if ( (v31 & 1) != 0 )\n        {\n          v33 = (__int64)v161;\n          *((_BYTE *)v161 + 1) = 39;\n          v32 = (char *)(v33 + 2);\n        }\n        if ( (v31 & 2) != 0 )\n          *v32++ = 45;\n        if ( (v31 & 4) != 0 )\n          *v32++ = 43;\n        if ( (v31 & 8) != 0 )\n          *v32++ = 32;\n        if ( (v31 & 0x10) != 0 )\n          *v32++ = 35;\n        if ( (v31 & 0x40) != 0 )\n          *v32++ = 73;\n        if ( (v31 & 0x20) != 0 )\n          *v32++ = 48;\n        v34 = (_BYTE *)*((_QWORD *)v12 + 3);\n        v35 = (_BYTE *)*((_QWORD *)v12 + 4);\n        if ( v34 != v35 )\n        {\n          v160 = v27;\n          *(_QWORD *)&v162 = v35 - v34;\n          memcpy(v32, v34, v35 - v34);\n          v27 = v160;\n          v32 += *(_QWORD *)&v162;\n        }\n        v36 = (_BYTE *)*((_QWORD *)v12 + 6);\n        v37 = (_BYTE *)*((_QWORD *)v12 + 7);\n        if ( v36 != v37 )\n        {\n          v160 = v27;\n          *(_QWORD *)&v162 = v37 - v36;\n          memcpy(v32, v36, v37 - v36);\n          v27 = v160;\n          v32 += *(_QWORD *)&v162;\n        }\n        if ( (unsigned int)v163 <= 0x10 )\n        {\n          v38 = 1LL << (char)v163;\n          if ( ((1LL << (char)v163) & 0x14180) != 0 )\n            goto LABEL_125;\n          if ( (v38 & 0x1000) != 0 )\n          {\n            *v32++ = 76;\n          }\n          else\n          {\n            if ( (v38 & 0x600) == 0 )\n              goto LABEL_62;\n            *v32++ = 108;\nLABEL_125:\n            *v32++ = 108;\n          }\n        }\nLABEL_62:\n        v39 = v12[72];\n        v32[1] = 0;\n        *v32 = v39;\n        v40 = *((_QWORD *)v12 + 5);\n        if ( v40 != -1 )\n        {\n          v41 = &v27[32 * v40];\n          if ( *(_DWORD *)v41 == 5 )\n          {\n            LODWORD(v160) = 1;\n            v166 = *((_DWORD *)v41 + 4);\n            goto LABEL_65;\n          }\nLABEL_200:\n          abort();\n        }\n        LODWORD(v160) = 0;\nLABEL_65:\n        v42 = *((_QWORD *)v12 + 8);\n        if ( v42 != -1 )\n        {\n          v43 = &v27[32 * v42];\n          if ( *(_DWORD *)v43 != 5 )\n            goto LABEL_200;\n          v44 = (int)v160;\n          *(&v166 + (unsigned int)v160) = *((_DWORD *)v43 + 4);\n          LODWORD(v160) = v44 + 1;\n        }\n        v45 = v19 + 2;\n        if ( v19 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v11 < v45 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 >= v45 )\n              goto LABEL_73;\n          }\n          else if ( v45 <= 0xC )\n          {\n            v11 = 12LL;\nLABEL_73:\n            if ( v14 && v14 != src )\n            {\n              v46 = (char *)realloc(v14, v11);\n              if ( v46 )\n                goto LABEL_76;\nLABEL_88:\n              v57 = v14;\n              *(_QWORD *)&v162 = __errno_location();\nLABEL_89:\n              if ( v57 == src || !v57 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v172 != v175 )\n                    free(v172);\n                  if ( v169 != v170 )\n                    free(v169);\n                  v14 = 0LL;\n                  **(_DWORD **)&v162 = 12;\n                  return v14;\n                }\nLABEL_112:\n                *(_QWORD *)&v162 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v57);\n              goto LABEL_91;\n            }\n            LOBYTE(v162) = v14 == src;\n            v94 = (char *)malloc(v11);\n            v46 = v94;\n            if ( !v94 )\n              goto LABEL_88;\n            if ( v19 && LOBYTE(v162) )\n              v46 = (char *)memcpy(v94, v14, v19);\nLABEL_76:\n            v46[v19] = 0;\n            v158 = v46;\n            v47 = __errno_location();\n            v48 = v158;\n            v158 = v32;\n            *(_QWORD *)&v162 = v47;\n            LODWORD(v154) = *v47;\n            while ( 2 )\n            {\n              v49 = 0x7FFFFFFFLL;\n              v165 = -1;\n              **(_DWORD **)&v162 = 0;\n              if ( v11 - v19 <= 0x7FFFFFFF )\n                v49 = v11 - v19;\n              switch ( (int)v163 )\n              {\n                case 1:\n                  v72 = (unsigned int)*((char *)v169 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 2:\n                  v72 = *((unsigned __int8 *)v169 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 3:\n                  v72 = (unsigned int)*((__int16 *)v169 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 4:\n                  v72 = *((unsigned __int16 *)v169 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 5:\n                case 6:\n                case 13:\n                case 14:\n                  v72 = *((unsigned int *)v169 + 8 * *((_QWORD *)v12 + 10) + 4);\nLABEL_150:\n                  v71 = &v48[v19];\n                  v157 = v48;\n                  if ( (_DWORD)v160 != 1 )\n                  {\n                    if ( (_DWORD)v160 != 2 )\n                    {\n                      v150 = &v165;\n                      goto LABEL_153;\n                    }\n                    goto LABEL_209;\n                  }\n                  v151 = &v165;\n                  v150 = (int *)v72;\n                  break;\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                case 15:\n                case 16:\n                case 17:\n                  v71 = &v48[v19];\n                  v72 = *((_QWORD *)v169 + 4 * *((_QWORD *)v12 + 10) + 2);\n                  v157 = v48;\n                  if ( (_DWORD)v160 != 1 )\n                  {\n                    if ( (_DWORD)v160 != 2 )\n                    {\n                      v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v161, v72, a5, &v165, v151);\nLABEL_131:\n                      v48 = (char *)v157;\n                      goto LABEL_132;\n                    }\nLABEL_209:\n                    v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v161, v166, a5, v167, v72);\nLABEL_210:\n                    v48 = (char *)v157;\nLABEL_132:\n                    v74 = v165;\n                    if ( v165 < 0 )\n                    {\nLABEL_154:\n                      if ( v158[1] )\n                      {\n                        v158[1] = 0;\n                        continue;\n                      }\n                      if ( v73 < 0 )\n                      {\n                        v80 = **(_DWORD **)&v162;\n                        if ( !**(_DWORD **)&v162 )\n                        {\n                          v80 = 84;\n                          if ( (v12[72] & 0xEF) != 99 )\n                            v80 = 22;\n                        }\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v172 != v175 )\n                          free(v172);\n                        if ( v169 != v170 )\n                          free(v169);\n                        **(_DWORD **)&v162 = v80;\n                        return 0LL;\n                      }\nLABEL_136:\n                      v165 = v73;\n                      v74 = v73;\nLABEL_137:\n                      if ( (unsigned int)(v74 + 1) < v49 )\n                      {\n                        v14 = v48;\n                        v15 = v19 + v74;\n                        **(_DWORD **)&v162 = (_DWORD)v154;\n                        goto LABEL_110;\n                      }\n                      if ( v11 - v19 > 0x7FFFFFFE )\n                      {\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v172 != v175 )\n                          free(v172);\n                        if ( v169 != v170 )\n                          free(v169);\n                        v14 = 0LL;\n                        **(_DWORD **)&v162 = 75;\n                        return v14;\n                      }\n                      v75 = (unsigned int)(v74 + 2);\n                      v76 = __CFADD__(v19, v75);\n                      v77 = v19 + v75;\n                      if ( (v11 & 0x8000000000000000LL) != 0LL )\n                      {\n                        if ( v11 != -1LL )\n                          goto LABEL_202;\n                      }\n                      else\n                      {\n                        if ( v76 )\n                          goto LABEL_202;\n                        if ( 2 * v11 >= v77 )\n                          v77 = 2 * v11;\n                        if ( v11 < v77 )\n                        {\n                          v11 *= 2LL;\n                          if ( v11 < v77 )\n                          {\n                            if ( v77 == -1LL )\n                            {\nLABEL_202:\n                              v57 = v48;\n                              goto LABEL_89;\n                            }\n                            v11 = v77;\n                          }\n                          v78 = v48 == src;\n                          if ( !v48 || v48 == src )\n                          {\n                            v157 = v48;\n                            v93 = (char *)malloc(v11);\n                            v48 = (char *)v157;\n                            if ( !v93 )\n                              goto LABEL_202;\n                            if ( v19 && v78 )\n                              v48 = (char *)memcpy(v93, v157, v19);\n                            else\n                              v48 = v93;\n                          }\n                          else\n                          {\n                            v157 = v48;\n                            v79 = (char *)realloc(v48, v11);\n                            v48 = (char *)v157;\n                            if ( !v79 )\n                              goto LABEL_202;\n                            v48 = v79;\n                          }\n                        }\n                      }\n                      continue;\n                    }\nLABEL_133:\n                    if ( v74 < v49 && v48[v74 + v19] )\n                      goto LABEL_200;\n                    if ( v74 >= v73 )\n                      goto LABEL_137;\n                    goto LABEL_136;\n                  }\n                  v151 = &v165;\n                  v150 = (int *)v72;\n                  break;\n                case 11:\n                  v84 = *((_QWORD *)v12 + 10);\n                  v85 = &v48[v19];\n                  v157 = v48;\n                  a5 = *((double *)v169 + 4 * v84 + 2);\n                  if ( (_DWORD)v160 == 1 )\n                  {\n                    v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v161, v166, a5, &v165, v151);\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v160 != 2 )\n                    {\n                      v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v161, &v165, a5, v152, v153);\n                      v48 = (char *)v157;\n                      goto LABEL_132;\n                    }\n                    v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v161, v166, a5, v167, &v165);\n                  }\n                  v48 = (char *)v157;\n                  goto LABEL_132;\n                case 12:\n                  v81 = *((_QWORD *)v12 + 10);\n                  v82 = &v48[v19];\n                  v157 = v48;\n                  v83 = *((unsigned __int128 *)v169 + 2 * v81 + 1);\n                  if ( (_DWORD)v160 == 1 )\n                  {\n                    v73 = __snprintf_chk(v82, v49, 1LL, -1LL, v161, v166, a5, v83, v83 >> 64);\n                    goto LABEL_210;\n                  }\n                  if ( (_DWORD)v160 != 2 )\n                  {\n                    v73 = __snprintf_chk(v82, v49, 1LL, -1LL, v161, &v165, a5, v83, v83 >> 64);\n                    goto LABEL_131;\n                  }\n                  v73 = __snprintf_chk(v82, v49, 1LL, -1LL, v161, v166, a5, v167, v149);\n                  v48 = (char *)v157;\n                  goto LABEL_132;\n                default:\n                  goto LABEL_408;\n              }\n              break;\n            }\n            v72 = v166;\nLABEL_153:\n            v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v161, v72, a5, v150, v151);\n            v74 = v165;\n            v48 = (char *)v157;\n            if ( v165 < 0 )\n              goto LABEL_154;\n            goto LABEL_133;\n          }\n          if ( v19 != -3LL )\n          {\n            v11 = v19 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v46 = v14;\n        goto LABEL_76;\n      }\n      switch ( v29 )\n      {\n        case 18:\n          v15 = v19;\n          **((_BYTE **)v28 + 2) = v19;\n          break;\n        case 19:\n          v15 = v19;\n          **((_WORD **)v28 + 2) = v19;\n          break;\n        case 20:\n          v15 = v19;\n          **((_DWORD **)v28 + 2) = v19;\n          break;\n        case 21:\n        case 22:\n          v15 = v19;\n          **((_QWORD **)v28 + 2) = v19;\n          break;\n        default:\nLABEL_408:\n          abort();\n      }\nLABEL_110:\n      v13 = (_BYTE *)*((_QWORD *)v12 + 1);\n      v12 += 88;\n      v16 = *(_BYTE **)v12;\n      ++v159;\n      if ( v16 != v13 )\n        goto LABEL_14;\nLABEL_111:\n      v19 = v15;\n    }\n    v107 = v19;\n    v108 = v19 + 1;\n    if ( v19 == -1LL )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v11 < v108 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v108 )\n        {\nLABEL_303:\n          v109 = v14 == src;\n          if ( !v14 || v14 == src )\n          {\n            v142 = (char *)malloc(v11);\n            if ( !v142 )\n              goto LABEL_88;\n            if ( v107 && v109 )\n              v14 = (char *)memcpy(v142, v14, v107);\n            else\n              v14 = v142;\n          }\n          else\n          {\n            v110 = (char *)realloc(v14, v11);\n            if ( !v110 )\n              goto LABEL_126;\n            v14 = v110;\n          }\n          goto LABEL_307;\n        }\n      }\n      else if ( v108 <= 0xC )\n      {\n        v11 = 12LL;\n        goto LABEL_303;\n      }\n      if ( v19 == -2LL )\n        goto LABEL_88;\n      v11 = v19 + 1;\n      goto LABEL_303;\n    }\nLABEL_307:\n    v14[v107] = 0;\n    if ( v11 > v108 && v14 != src )\n    {\n      v111 = (char *)realloc(v14, v108);\n      if ( v111 )\n        v14 = v111;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v172 != v175 )\n      free(v172);\n    if ( v169 != v170 )\n      free(v169);\n    *v156 = v107;\n    return v14;\n  }\n  if ( v172 != v175 )\n    free(v172);\n  if ( v169 != v170 )\n    free(v169);\n  v14 = 0LL;\n  *__errno_location() = 22;\n  return v14;\n}\n"
        },
        {
            "funcName": "sub_40ADB0",
            "funcStartAddr": "0x40adb0",
            "funcEndAddr": "0x40afc9",
            "decompiledFuncCode": "__int64 __fastcall sub_40ADB0(int *a1, unsigned __int64 *a2)\n{\n  unsigned __int64 v2; // rax\n  unsigned __int64 v3; // rdx\n  unsigned int v4; // ecx\n  _QWORD *v5; // r10\n  unsigned int v7; // ecx\n  _DWORD *v8; // r10\n  unsigned int v9; // ecx\n  _DWORD *v10; // r10\n  unsigned int v11; // ecx\n  _DWORD *v12; // r10\n  unsigned int v13; // ecx\n  _QWORD *v14; // r10\n  long double *v15; // rcx\n  unsigned int v16; // ecx\n  void **v17; // r10\n  void *v18; // rcx\n  unsigned int v19; // ecx\n  const char **v20; // r10\n  const char *v21; // rcx\n\n  v2 = a2[1];\n  if ( *a2 )\n  {\n    v3 = 0LL;\n    while ( 2 )\n    {\n      switch ( *(_DWORD *)v2 )\n      {\n        case 1:\n        case 2:\n          v11 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v12 = (_DWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v12 + 2;\n          }\n          else\n          {\n            v12 = (_DWORD *)(*((_QWORD *)a1 + 2) + v11);\n            *a1 = v11 + 8;\n          }\n          *(_BYTE *)(v2 + 16) = *v12;\n          goto LABEL_7;\n        case 3:\n        case 4:\n          v9 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v10 = (_DWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v10 + 2;\n          }\n          else\n          {\n            v10 = (_DWORD *)(*((_QWORD *)a1 + 2) + v9);\n            *a1 = v9 + 8;\n          }\n          *(_WORD *)(v2 + 16) = *v10;\n          goto LABEL_7;\n        case 5:\n        case 6:\n        case 0xD:\n        case 0xE:\n          v7 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v8 = (_DWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v8 + 2;\n          }\n          else\n          {\n            v8 = (_DWORD *)(*((_QWORD *)a1 + 2) + v7);\n            *a1 = v7 + 8;\n          }\n          *(_DWORD *)(v2 + 16) = *v8;\n          goto LABEL_7;\n        case 7:\n        case 8:\n        case 9:\n        case 0xA:\n        case 0x11:\n        case 0x12:\n        case 0x13:\n        case 0x14:\n        case 0x15:\n        case 0x16:\n          v4 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v5 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v5 + 1;\n          }\n          else\n          {\n            v5 = (_QWORD *)(*((_QWORD *)a1 + 2) + v4);\n            *a1 = v4 + 8;\n          }\n          *(_QWORD *)(v2 + 16) = *v5;\n          goto LABEL_7;\n        case 0xB:\n          v13 = a1[1];\n          if ( v13 > 0xAF )\n          {\n            v14 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v14 + 1;\n          }\n          else\n          {\n            v14 = (_QWORD *)(*((_QWORD *)a1 + 2) + v13);\n            a1[1] = v13 + 16;\n          }\n          *(_QWORD *)(v2 + 16) = *v14;\n          goto LABEL_7;\n        case 0xC:\n          v15 = (long double *)((*((_QWORD *)a1 + 1) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);\n          *((_QWORD *)a1 + 1) = v15 + 1;\n          *(long double *)(v2 + 16) = *v15;\n          goto LABEL_7;\n        case 0xF:\n          v19 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v20 = (const char **)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v20 + 1;\n          }\n          else\n          {\n            v20 = (const char **)(*((_QWORD *)a1 + 2) + v19);\n            *a1 = v19 + 8;\n          }\n          v21 = *v20;\n          if ( !*v20 )\n            v21 = \"(NULL)\";\n          *(_QWORD *)(v2 + 16) = v21;\n          goto LABEL_7;\n        case 0x10:\n          v16 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v17 = (void **)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v17 + 1;\n          }\n          else\n          {\n            v17 = (void **)(*((_QWORD *)a1 + 2) + v16);\n            *a1 = v16 + 8;\n          }\n          v18 = *v17;\n          if ( !*v17 )\n            v18 = &unk_411250;\n          *(_QWORD *)(v2 + 16) = v18;\nLABEL_7:\n          ++v3;\n          v2 += 32LL;\n          if ( *a2 <= v3 )\n            return 0LL;\n          continue;\n        default:\n          return 0xFFFFFFFFLL;\n      }\n    }\n  }\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_40AFD0",
            "funcStartAddr": "0x40afd0",
            "funcEndAddr": "0x40bcd9",
            "decompiledFuncCode": "__int64 __fastcall sub_40AFD0(char *a1, _QWORD *a2, unsigned __int64 *a3)\n{\n  _QWORD *v3; // rcx\n  _QWORD *v4; // r8\n  unsigned __int64 v6; // r9\n  __int64 v7; // r11\n  __int64 v8; // r13\n  char *v9; // rbp\n  __int64 result; // rax\n  unsigned __int64 v11; // r14\n  char *v12; // r12\n  char v13; // bl\n  char *v14; // rcx\n  int v15; // eax\n  __int64 v16; // rax\n  int v17; // eax\n  unsigned __int64 v18; // rbx\n  _DWORD *v19; // r13\n  unsigned __int64 v20; // rdx\n  _DWORD *v21; // rax\n  bool v22; // zf\n  __int64 v23; // rax\n  _BYTE *v24; // rcx\n  int v25; // eax\n  unsigned __int64 v26; // rbx\n  unsigned __int64 v27; // rdx\n  _DWORD *v28; // rax\n  int v29; // ecx\n  unsigned __int64 v30; // rax\n  int *v31; // rax\n  __int64 v32; // rax\n  __int64 v33; // rbx\n  _QWORD *v34; // r12\n  _QWORD *v35; // rax\n  _BYTE *v36; // rax\n  unsigned __int64 v37; // rax\n  unsigned __int64 v38; // r9\n  _DWORD *v39; // rax\n  _DWORD *v40; // rsi\n  _QWORD *v41; // rax\n  _QWORD *v42; // rax\n  _BYTE *v43; // rdx\n  unsigned __int64 v44; // rsi\n  __int64 v45; // rdx\n  __int64 v46; // rax\n  char *v47; // rdi\n  bool v48; // cf\n  unsigned __int64 v49; // rdx\n  unsigned __int8 v50; // bl\n  _QWORD *v51; // rdi\n  unsigned __int64 v52; // r9\n  _DWORD *v53; // rax\n  char *i; // rcx\n  char *v55; // rdx\n  unsigned __int64 v56; // rax\n  const void *v57; // rsi\n  _QWORD *v58; // rdi\n  unsigned __int64 v59; // r9\n  _DWORD *v60; // rax\n  _DWORD *v61; // rax\n  unsigned __int64 v62; // rax\n  __int64 v63; // rsi\n  __int64 v64; // rdx\n  char *v65; // rcx\n  unsigned __int64 v66; // rdx\n  unsigned __int8 v67; // si\n  _BYTE *v68; // rdx\n  unsigned __int64 v69; // rsi\n  __int64 v70; // rdx\n  __int64 v71; // rax\n  _BYTE *v72; // rdi\n  unsigned __int64 v73; // rdx\n  unsigned __int8 v74; // bl\n  _DWORD *v75; // rax\n  _DWORD *src; // [rsp+8h] [rbp-80h]\n  _QWORD *srca; // [rsp+8h] [rbp-80h]\n  _QWORD *srcb; // [rsp+8h] [rbp-80h]\n  unsigned __int64 v79; // [rsp+10h] [rbp-78h]\n  unsigned __int64 v80; // [rsp+18h] [rbp-70h]\n  unsigned __int64 v81; // [rsp+20h] [rbp-68h]\n  _QWORD *v82; // [rsp+28h] [rbp-60h]\n  unsigned __int64 v83; // [rsp+30h] [rbp-58h]\n  char *v84; // [rsp+30h] [rbp-58h]\n  unsigned __int64 v85; // [rsp+30h] [rbp-58h]\n  int v86; // [rsp+30h] [rbp-58h]\n  int v87; // [rsp+30h] [rbp-58h]\n  _BYTE *v88; // [rsp+30h] [rbp-58h]\n  char *v89; // [rsp+30h] [rbp-58h]\n  _BYTE *v90; // [rsp+30h] [rbp-58h]\n  _QWORD *v91; // [rsp+38h] [rbp-50h]\n  __int64 v92; // [rsp+38h] [rbp-50h]\n  _QWORD *v93; // [rsp+38h] [rbp-50h]\n  __int64 v94; // [rsp+38h] [rbp-50h]\n  __int64 v95; // [rsp+38h] [rbp-50h]\n  __int64 v96; // [rsp+38h] [rbp-50h]\n  __int64 v97; // [rsp+38h] [rbp-50h]\n  __int64 v98; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v99; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v100; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v101; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v102; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v103; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v104; // [rsp+40h] [rbp-48h]\n  _QWORD *v105; // [rsp+48h] [rbp-40h]\n  _QWORD *v106; // [rsp+48h] [rbp-40h]\n  _QWORD *v107; // [rsp+48h] [rbp-40h]\n  _QWORD *v108; // [rsp+48h] [rbp-40h]\n  _QWORD *v109; // [rsp+48h] [rbp-40h]\n  _QWORD *v110; // [rsp+48h] [rbp-40h]\n\n  v3 = a2 + 4;\n  v4 = a2;\n  v6 = 7LL;\n  v7 = 7LL;\n  v8 = 0LL;\n  *a2 = 0LL;\n  a2[1] = a2 + 4;\n  v82 = a2 + 4;\n  *a3 = 0LL;\n  src = a3 + 2;\n  a3[1] = (unsigned __int64)(a3 + 2);\n  v80 = 0LL;\n  v79 = 0LL;\n  v81 = 0LL;\n  while ( 1 )\n  {\n    if ( !*a1 )\n    {\n      v3[11 * v8] = a1;\n      v4[2] = v79;\n      v4[3] = v80;\n      return 0LL;\n    }\n    v9 = a1 + 1;\n    if ( *a1 == 37 )\n      break;\nLABEL_3:\n    a1 = v9;\n  }\n  v11 = -1LL;\n  v12 = (char *)&v3[11 * v8];\n  *(_QWORD *)v12 = a1;\n  *((_DWORD *)v12 + 4) = 0;\n  *((_QWORD *)v12 + 3) = 0LL;\n  *((_QWORD *)v12 + 4) = 0LL;\n  *((_QWORD *)v12 + 5) = -1LL;\n  *((_QWORD *)v12 + 6) = 0LL;\n  *((_QWORD *)v12 + 7) = 0LL;\n  *((_QWORD *)v12 + 8) = -1LL;\n  *((_QWORD *)v12 + 10) = -1LL;\n  v13 = a1[1];\n  if ( (unsigned __int8)(v13 - 48) > 9u )\n    goto LABEL_16;\n  v36 = a1 + 1;\n  do\n    ++v36;\n  while ( (unsigned __int8)(*v36 - 48) <= 9u );\n  if ( *v36 != 36 )\n  {\n    v11 = -1LL;\n    goto LABEL_16;\n  }\n  v62 = 0LL;\n  do\n  {\n    v63 = -1LL;\n    v64 = v13 - 48;\n    if ( v62 <= 0x1999999999999999LL )\n      v63 = 10 * v62;\n    v65 = v9;\n    while ( 1 )\n    {\n      v13 = v9[1];\n      v48 = __CFADD__(v63, v64);\n      v66 = v63 + v64;\n      v62 = v66;\n      ++v9;\n      v67 = v13 - 48;\n      if ( !v48 )\n        break;\n      if ( v67 > 9u )\n        goto LABEL_130;\n      v63 = -1LL;\n      v65 = v9;\n      v64 = v13 - 48;\n    }\n  }\n  while ( v67 <= 9u );\n  v11 = v66 - 1;\n  if ( v66 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_130;\n  v9 = v65 + 2;\n  v13 = v65[2];\n  while ( 1 )\n  {\nLABEL_16:\n    v14 = v9 + 1;\n    switch ( v13 )\n    {\n      case '\\'':\n        *((_DWORD *)v12 + 4) |= 1u;\n        goto LABEL_15;\n      case '-':\n        *((_DWORD *)v12 + 4) |= 2u;\n        goto LABEL_15;\n      case '+':\n        *((_DWORD *)v12 + 4) |= 4u;\n        goto LABEL_15;\n      case ' ':\n        *((_DWORD *)v12 + 4) |= 8u;\n        goto LABEL_15;\n      case '#':\n        *((_DWORD *)v12 + 4) |= 0x10u;\n        goto LABEL_15;\n    }\n    if ( v13 != 48 )\n      break;\n    *((_DWORD *)v12 + 4) |= 0x20u;\nLABEL_15:\n    v13 = *v14;\n    ++v9;\n  }\n  if ( v13 == 73 )\n  {\n    *((_DWORD *)v12 + 4) |= 0x40u;\n    goto LABEL_15;\n  }\n  if ( v13 == 42 )\n  {\n    v16 = 1LL;\n    *((_QWORD *)v12 + 3) = v9;\n    *((_QWORD *)v12 + 4) = v14;\n    if ( v79 )\n      v16 = v79;\n    v79 = v16;\n    v17 = v9[1];\n    if ( (unsigned __int8)(v9[1] - 48) > 9u )\n      goto LABEL_39;\n    v43 = v9 + 1;\n    do\n      ++v43;\n    while ( (unsigned __int8)(*v43 - 48) <= 9u );\n    if ( *v43 == 36 )\n    {\n      v44 = 0LL;\n      do\n      {\n        v45 = -1LL;\n        v46 = v17 - 48;\n        if ( v44 <= 0x1999999999999999LL )\n          v45 = 10 * v44;\n        v47 = v14;\n        while ( 1 )\n        {\n          v48 = __CFADD__(v46, v45);\n          v49 = v46 + v45;\n          v17 = v14[1];\n          v44 = v49;\n          ++v14;\n          v50 = v17 - 48;\n          if ( !v48 )\n            break;\n          if ( v50 > 9u )\n            goto LABEL_130;\n          v45 = -1LL;\n          v47 = v14;\n          v46 = v17 - 48;\n        }\n      }\n      while ( v50 <= 9u );\n      v18 = v49 - 1;\n      if ( v49 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n        goto LABEL_130;\n      *((_QWORD *)v12 + 5) = v18;\n      v14 = v47 + 2;\n    }\n    else\n    {\nLABEL_39:\n      v18 = *((_QWORD *)v12 + 5);\n      if ( v18 == -1LL )\n      {\n        *((_QWORD *)v12 + 5) = v81;\n        if ( v81 == -1LL )\n          goto LABEL_130;\n        v18 = v81++;\n      }\n    }\n    v19 = (_DWORD *)a3[1];\n    if ( v6 > v18 )\n    {\n      v20 = *a3;\nLABEL_42:\n      if ( v20 <= v18 )\n      {\n        do\n        {\n          ++v20;\n          v19[8 * v20 - 8] = 0;\n        }\n        while ( v20 <= v18 );\n        *a3 = v20;\n      }\n      v21 = &v19[8 * v18];\n      if ( *v21 )\n      {\n        if ( *v21 == 5 )\n        {\n          v13 = *v14;\n          v9 = v14++;\n          goto LABEL_25;\n        }\n        goto LABEL_131;\n      }\n      *v21 = 5;\n      v13 = *v14;\n      v9 = v14++;\n      if ( v13 != 46 )\n        goto LABEL_26;\nLABEL_47:\n      v22 = v9[1] == 42;\n      *((_QWORD *)v12 + 6) = v9;\n      if ( !v22 )\n      {\n        if ( (unsigned __int8)(v9[1] - 48) > 9u )\n        {\n          v9 = v14;\n          v37 = 1LL;\n        }\n        else\n        {\n          do\n            ++v14;\n          while ( (unsigned __int8)(*v14 - 48) <= 9u );\n          v37 = v14 - v9;\n          v9 = v14;\n        }\n        *((_QWORD *)v12 + 7) = v14;\n        v13 = *v14;\n        if ( v80 >= v37 )\n          v37 = v80;\n        v80 = v37;\n        goto LABEL_26;\n      }\n      v23 = 2LL;\n      v24 = v9 + 2;\n      *((_QWORD *)v12 + 7) = v9 + 2;\n      if ( v80 >= 2 )\n        v23 = v80;\n      v80 = v23;\n      v25 = v9[2];\n      if ( (unsigned __int8)(v9[2] - 48) > 9u )\n        goto LABEL_51;\n      v68 = v9 + 2;\n      do\n        ++v68;\n      while ( (unsigned __int8)(*v68 - 48) <= 9u );\n      if ( *v68 == 36 )\n      {\n        v69 = 0LL;\n        do\n        {\n          v70 = -1LL;\n          v71 = v25 - 48;\n          if ( v69 <= 0x1999999999999999LL )\n            v70 = 10 * v69;\n          v72 = v24;\n          while ( 1 )\n          {\n            v48 = __CFADD__(v71, v70);\n            v73 = v71 + v70;\n            v25 = (char)*++v24;\n            v69 = v73;\n            v74 = v25 - 48;\n            if ( !v48 )\n              break;\n            if ( v74 > 9u )\n              goto LABEL_130;\n            v70 = -1LL;\n            v72 = v24;\n            v71 = v25 - 48;\n          }\n        }\n        while ( v74 <= 9u );\n        v26 = v73 - 1;\n        if ( v73 - 1 <= 0xFFFFFFFFFFFFFFFDLL )\n        {\n          *((_QWORD *)v12 + 8) = v26;\n          v24 = v72 + 2;\nLABEL_52:\n          v19 = (_DWORD *)a3[1];\n          if ( v6 > v26 )\n          {\n            v27 = *a3;\n            goto LABEL_54;\n          }\n          v59 = 2 * v6;\n          if ( v59 <= v26 )\n            v59 = v26 + 1;\n          if ( v59 <= 0x7FFFFFFFFFFFFFFLL )\n          {\n            v108 = v4;\n            v102 = v59;\n            v96 = v7;\n            v88 = v24;\n            if ( src == v19 )\n            {\n              v75 = malloc(32 * v59);\n              v24 = v88;\n              v7 = v96;\n              v6 = v102;\n              v4 = v108;\n              if ( !v75 )\n                goto LABEL_162;\n              v27 = *a3;\n              v40 = src;\n              v19 = v75;\n            }\n            else\n            {\n              v60 = realloc(v19, 32 * v59);\n              v40 = (_DWORD *)a3[1];\n              v24 = v88;\n              v19 = v60;\n              v7 = v96;\n              v6 = v102;\n              v4 = v108;\n              if ( !v60 )\n                goto LABEL_160;\n              v27 = *a3;\n              if ( src != v40 )\n                goto LABEL_171;\n            }\n            v110 = v4;\n            v104 = v6;\n            v98 = v7;\n            v90 = v24;\n            memcpy(v19, v40, 32 * v27);\n            v27 = *a3;\n            v4 = v110;\n            v6 = v104;\n            v7 = v98;\n            v24 = v90;\nLABEL_171:\n            a3[1] = (unsigned __int64)v19;\nLABEL_54:\n            if ( v27 <= v26 )\n            {\n              do\n              {\n                ++v27;\n                v19[8 * v27 - 8] = 0;\n              }\n              while ( v27 <= v26 );\n              *a3 = v27;\n            }\n            v28 = &v19[8 * v26];\n            if ( !*v28 )\n            {\n              *v28 = 5;\n              v9 = v24;\n              v13 = *v24;\n              goto LABEL_26;\n            }\n            if ( *v28 == 5 )\n            {\n              v13 = *v24;\n              v9 = v24;\n              goto LABEL_26;\n            }\n            goto LABEL_131;\n          }\nLABEL_159:\n          v40 = v19;\n          goto LABEL_160;\n        }\n      }\n      else\n      {\nLABEL_51:\n        v26 = *((_QWORD *)v12 + 8);\n        if ( v26 != -1LL )\n          goto LABEL_52;\n        *((_QWORD *)v12 + 8) = v81;\n        if ( v81 != -1LL )\n        {\n          v26 = v81++;\n          goto LABEL_52;\n        }\n      }\nLABEL_130:\n      v19 = (_DWORD *)a3[1];\nLABEL_131:\n      if ( src != v19 )\n      {\n        srca = v4;\n        free(v19);\n        v4 = srca;\n      }\n      v51 = (_QWORD *)v4[1];\n      if ( v82 != v51 )\n        free(v51);\n      *__errno_location() = 22;\n      return 0xFFFFFFFFLL;\n    }\n    v38 = 2 * v6;\n    if ( v38 <= v18 )\n      v38 = v18 + 1;\n    if ( v38 > 0x7FFFFFFFFFFFFFFLL )\n      goto LABEL_159;\n    v105 = v4;\n    v99 = v38;\n    v92 = v7;\n    v84 = v14;\n    if ( src == v19 )\n    {\n      v61 = malloc(32 * v38);\n      v14 = v84;\n      v7 = v92;\n      v6 = v99;\n      v4 = v105;\n      if ( !v61 )\n        goto LABEL_162;\n      v20 = *a3;\n      v40 = src;\n      v19 = v61;\n    }\n    else\n    {\n      v39 = realloc(v19, 32 * v38);\n      v40 = (_DWORD *)a3[1];\n      v14 = v84;\n      v19 = v39;\n      v7 = v92;\n      v6 = v99;\n      v4 = v105;\n      if ( !v39 )\n        goto LABEL_160;\n      v20 = *a3;\n      if ( src != v40 )\n        goto LABEL_93;\n    }\n    v109 = v4;\n    v103 = v6;\n    v97 = v7;\n    v89 = v14;\n    memcpy(v19, v40, 32 * v20);\n    v20 = *a3;\n    v4 = v109;\n    v6 = v103;\n    v7 = v97;\n    v14 = v89;\nLABEL_93:\n    a3[1] = (unsigned __int64)v19;\n    goto LABEL_42;\n  }\n  if ( (unsigned __int8)(v13 - 48) <= 9u )\n  {\n    *((_QWORD *)v12 + 3) = v9;\n    if ( (unsigned __int8)(*v9 - 48) <= 9u )\n    {\n      for ( i = v9; ; ++i )\n      {\n        v55 = i + 1;\n        if ( (unsigned __int8)(i[1] - 48) > 9u )\n          break;\n      }\n      v14 = i + 2;\n      v56 = v55 - v9;\n      v9 = v55;\n      if ( v79 >= v56 )\n        v56 = v79;\n      v79 = v56;\n    }\n    *((_QWORD *)v12 + 4) = v9;\n    v13 = *v9;\n  }\nLABEL_25:\n  if ( v13 == 46 )\n    goto LABEL_47;\nLABEL_26:\n  v15 = 0;\n  while ( 2 )\n  {\n    ++v9;\n    if ( v13 == 104 )\n    {\n      v15 |= 1 << (v15 & 1);\n      goto LABEL_33;\n    }\n    if ( v13 == 76 )\n    {\n      v15 |= 4u;\n      goto LABEL_33;\n    }\n    if ( v13 == 108 || v13 == 106 || (v13 & 0xDF) == 90 || v13 == 116 )\n    {\n      v15 += 8;\nLABEL_33:\n      v13 = *v9;\n      continue;\n    }\n    break;\n  }\n  switch ( v13 )\n  {\n    case '%':\n      goto LABEL_70;\n    case 'A':\n    case 'E':\n    case 'F':\n    case 'G':\n    case 'a':\n    case 'e':\n    case 'f':\n    case 'g':\n      v29 = 12;\n      if ( v15 <= 15 )\n        v29 = ((v15 & 4) != 0) + 11;\n      goto LABEL_62;\n    case 'C':\n      v29 = 14;\n      v13 = 99;\n      goto LABEL_62;\n    case 'S':\n      v29 = 16;\n      v13 = 115;\n      goto LABEL_62;\n    case 'X':\n    case 'o':\n    case 'u':\n    case 'x':\n      v29 = 10;\n      if ( v15 <= 15 && (v15 & 4) == 0 )\n      {\n        v29 = 8;\n        if ( v15 <= 7 )\n        {\n          v29 = 2;\n          if ( (v15 & 2) == 0 )\n            v29 = (v15 & 1) == 0 ? 6 : 4;\n        }\n      }\n      goto LABEL_62;\n    case 'c':\n      v29 = (v15 > 7) + 13;\n      goto LABEL_62;\n    case 'd':\n    case 'i':\n      v29 = 9;\n      if ( v15 <= 15 && (v15 & 4) == 0 )\n      {\n        v29 = 7;\n        if ( v15 <= 7 )\n        {\n          v29 = 1;\n          if ( (v15 & 2) == 0 )\n            v29 = (v15 & 1) == 0 ? 5 : 3;\n        }\n      }\n      goto LABEL_62;\n    case 'n':\n      v29 = 22;\n      if ( v15 <= 15 && (v15 & 4) == 0 )\n      {\n        v29 = 21;\n        if ( v15 <= 7 )\n        {\n          v29 = 18;\n          if ( (v15 & 2) == 0 )\n            v29 = ((v15 & 1) == 0) + 19;\n        }\n      }\n      goto LABEL_62;\n    case 'p':\n      v29 = 17;\n      goto LABEL_62;\n    case 's':\n      v29 = (v15 > 7) + 15;\nLABEL_62:\n      if ( v11 == -1LL )\n      {\n        *((_QWORD *)v12 + 10) = v81;\n        if ( v81 == -1LL )\n          goto LABEL_130;\n        v11 = v81++;\n      }\n      else\n      {\n        *((_QWORD *)v12 + 10) = v11;\n      }\n      v19 = (_DWORD *)a3[1];\n      if ( v6 > v11 )\n        goto LABEL_65;\n      v52 = 2 * v6;\n      if ( v52 <= v11 )\n        v52 = v11 + 1;\n      if ( v52 > 0x7FFFFFFFFFFFFFFLL )\n        goto LABEL_159;\n      v106 = v4;\n      v100 = v52;\n      v94 = v7;\n      v86 = v29;\n      if ( src == v19 )\n      {\n        v53 = malloc(32 * v52);\n        v29 = v86;\n        v7 = v94;\n        v6 = v100;\n        v4 = v106;\n        if ( !v53 )\n          goto LABEL_162;\n        goto LABEL_158;\n      }\n      v53 = realloc(v19, 32 * v52);\n      v29 = v86;\n      v7 = v94;\n      v19 = v53;\n      v6 = v100;\n      v4 = v106;\n      if ( !v53 )\n        goto LABEL_210;\n      if ( src == (_DWORD *)a3[1] )\n      {\n        v19 = src;\nLABEL_158:\n        v57 = v19;\n        v107 = v4;\n        v101 = v6;\n        v19 = v53;\n        v95 = v7;\n        v87 = v29;\n        memcpy(v53, v57, 32 * *a3);\n        v4 = v107;\n        v29 = v87;\n        v6 = v101;\n        v7 = v95;\n      }\n      a3[1] = (unsigned __int64)v19;\nLABEL_65:\n      v30 = *a3;\n      if ( *a3 <= v11 )\n      {\n        do\n        {\n          ++v30;\n          v19[8 * v30 - 8] = 0;\n        }\n        while ( v30 <= v11 );\n        *a3 = v30;\n      }\n      v31 = &v19[8 * v11];\n      if ( *v31 )\n      {\n        if ( *v31 != v29 )\n          goto LABEL_131;\n      }\n      else\n      {\n        *v31 = v29;\n      }\nLABEL_70:\n      v12[72] = v13;\n      v32 = *v4;\n      *((_QWORD *)v12 + 1) = v9;\n      v8 = v32 + 1;\n      *v4 = v32 + 1;\n      if ( v7 > (unsigned __int64)(v32 + 1) )\n      {\n        v3 = (_QWORD *)v4[1];\n        goto LABEL_3;\n      }\n      if ( v7 >= 0 )\n      {\n        v33 = 2 * v7;\n        if ( (unsigned __int64)(2 * v7) <= 0x2E8BA2E8BA2E8BALL )\n        {\n          v34 = (_QWORD *)v4[1];\n          v91 = v4;\n          v83 = v6;\n          if ( v82 == v34 )\n          {\n            v41 = malloc(176 * v7);\n            v6 = v83;\n            v4 = v91;\n            v3 = v41;\n            if ( !v41 )\n            {\n              v40 = (_DWORD *)a3[1];\n              if ( src != v40 )\n                goto LABEL_161;\n              goto LABEL_164;\n            }\n          }\n          else\n          {\n            v35 = realloc(v34, 176 * v7);\n            v6 = v83;\n            v4 = v91;\n            v3 = v35;\n            if ( !v35 )\n              goto LABEL_210;\n            v34 = (_QWORD *)v91[1];\n            v8 = *v91;\n            if ( v82 != v34 )\n              goto LABEL_77;\n          }\n          v93 = v4;\n          v85 = v6;\n          v42 = memcpy(v3, v34, 88 * v8);\n          v4 = v93;\n          v6 = v85;\n          v3 = v42;\n          v8 = *v93;\nLABEL_77:\n          v4[1] = v3;\n          v7 = v33;\n          goto LABEL_3;\n        }\n      }\nLABEL_210:\n      v40 = (_DWORD *)a3[1];\nLABEL_160:\n      if ( src != v40 )\n      {\nLABEL_161:\n        srcb = v4;\n        free(v40);\n        v4 = srcb;\n      }\nLABEL_162:\n      v58 = (_QWORD *)v4[1];\n      if ( v82 != v58 )\n        free(v58);\nLABEL_164:\n      *__errno_location() = 12;\n      result = 0xFFFFFFFFLL;\n      break;\n    default:\n      goto LABEL_130;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40BD50",
            "funcStartAddr": "0x40bd50",
            "funcEndAddr": "0x40bd68",
            "decompiledFuncCode": "int __fastcall sub_40BD50(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  v1 = 0LL;\n  if ( &qword_613228 )\n    v1 = (void *)qword_613228;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n"
        },
        {
            "funcName": "sub_40BD68",
            "funcStartAddr": "0x40bd68",
            "funcEndAddr": "0x40bd88",
            "decompiledFuncCode": "__int64 __fastcall sub_40BD68(__int64 a1, __int64 a2, __int64 a3)\n{\n  void (**i)(void); // rbx\n\n  for ( i = (void (**)(void))&qword_612E30; *i != (void (*)(void))-1LL; --i )\n    (*i)();\n  return a3;\n}\n"
        }
    ],
    "funcCount": 83
}