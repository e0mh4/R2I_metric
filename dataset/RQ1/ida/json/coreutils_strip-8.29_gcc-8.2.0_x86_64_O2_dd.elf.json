{
    "binaryInfo": {
        "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_dd.elf",
        "isStripped": "True"
    },
    "buildInfo": {
        "decompilerName": "IDA Pro",
        "compilerName": "gcc",
        "compilerVersion": "9.4.0",
        "Optlevel": "-O"
    },
    "funcInfo": [
        {
            "funcName": "main",
            "funcStartAddr": "0x401fd0",
            "funcEndAddr": "0x403c41",
            "decompiledFuncCode": "__int64 __fastcall main(int a1, const char **a2, char **a3)\n{\n  size_t v3; // r14\n  const char *v4; // r15\n  unsigned __int64 v5; // rbp\n  unsigned __int64 v7; // r12\n  __int64 i; // rax\n  unsigned __int64 v9; // r13\n  __int64 v10; // rax\n  char *v11; // rax\n  char *v12; // r8\n  const char *v13; // rdx\n  char v14; // al\n  const char *v15; // rcx\n  int v16; // ecx\n  char v17; // bp\n  int v18; // eax\n  __int64 (__fastcall *v19)(int, void *, size_t); // rax\n  int v20; // eax\n  char *v21; // rax\n  __int64 v22; // rdx\n  const __int32_t *v23; // rsi\n  char *v24; // rax\n  __int64 v25; // rdx\n  char *v26; // rax\n  __int64 v27; // rdx\n  __off_t v28; // rax\n  size_t v29; // rsi\n  __off_t v30; // rdi\n  __int64 v31; // rax\n  __int64 v32; // rbp\n  __int64 v33; // r12\n  size_t v34; // r15\n  __int64 v35; // r14\n  __int64 v36; // rbp\n  size_t v37; // r12\n  __sighandler_t sa_handler; // rbp\n  unsigned __int64 v39; // r12\n  __int64 v40; // rbx\n  unsigned __int64 v41; // r15\n  unsigned __int64 v42; // rbp\n  char v43; // si\n  void *v44; // r9\n  int v45; // esi\n  __int64 v46; // rax\n  bool v47; // zf\n  bool v48; // cf\n  unsigned __int64 v49; // r15\n  size_t v50; // rbp\n  size_t v51; // rdx\n  int v52; // esi\n  char *v53; // rdi\n  char *v54; // rbx\n  void *v55; // rdi\n  char v56; // r8\n  __int64 v57; // rax\n  const char *v58; // rax\n  char v59; // cl\n  const char *v60; // rdx\n  char v61; // al\n  const char *v62; // rax\n  char v63; // cl\n  const char *v64; // rdx\n  char v65; // al\n  const char *v66; // rax\n  char v67; // cl\n  const char *v68; // rdx\n  char v69; // al\n  const char *v70; // rax\n  char v71; // cl\n  const char *v72; // rdx\n  char v73; // al\n  size_t v74; // r14\n  const void *v75; // rsi\n  size_t v76; // rbp\n  size_t v77; // rdx\n  unsigned __int64 v78; // rbp\n  int v79; // ebp\n  unsigned int v80; // eax\n  int v81; // r8d\n  int v82; // r9d\n  int v83; // ebp\n  unsigned int v84; // eax\n  int v85; // r8d\n  int v86; // r9d\n  unsigned __int64 v87; // rbp\n  int v88; // ebp\n  unsigned int v89; // eax\n  int v90; // r8d\n  int v91; // r9d\n  char *v92; // rax\n  char *v93; // rax\n  char *v94; // rsi\n  char v95; // dl\n  __int64 v96; // rbx\n  int v97; // ebp\n  unsigned int v98; // eax\n  int v99; // r8d\n  int v100; // r9d\n  char *v101; // rsi\n  char *v102; // rax\n  __int64 v103; // rdx\n  __int64 v104; // rax\n  __off_t v105; // rax\n  __int64 v106; // rbx\n  unsigned int v107; // eax\n  int v108; // ecx\n  int v109; // r8d\n  int v110; // r9d\n  __int64 v111; // rax\n  const char *v112; // rsi\n  int v113; // ebx\n  unsigned int v114; // eax\n  int v115; // r8d\n  int v116; // r9d\n  char *v118; // rax\n  __int64 v119; // rdx\n  const __int32_t *v120; // rsi\n  char *v121; // rax\n  __int64 v122; // rdx\n  __off_t v123; // rdx\n  __off_t v124; // rdx\n  unsigned __int64 v125; // rbx\n  __off_t v126; // rdx\n  int v127; // ebx\n  unsigned int v128; // eax\n  int v129; // r8d\n  int v130; // r9d\n  const char *v131; // rax\n  char v132; // cl\n  const char *v133; // rdx\n  char v134; // al\n  unsigned int v135; // eax\n  int v136; // ecx\n  int v137; // r8d\n  int v138; // r9d\n  int v139; // eax\n  int v140; // ebx\n  unsigned int v141; // eax\n  int v142; // r8d\n  int v143; // r9d\n  unsigned int v144; // eax\n  int v145; // r9d\n  __int64 v146; // rax\n  int v147; // ebx\n  int v148; // ebp\n  unsigned int v149; // eax\n  int v150; // r9d\n  unsigned __int64 v151; // rax\n  char *v152; // r8\n  const char *v153; // rdx\n  char v154; // si\n  const char *v155; // rcx\n  char v156; // dl\n  unsigned __int64 v157; // rdx\n  int v158; // ebx\n  unsigned int v159; // eax\n  int v160; // r9d\n  int v161; // esi\n  const char *v162; // rdx\n  char v163; // si\n  char *v164; // rcx\n  char v165; // dl\n  const char *v166; // rdx\n  char v167; // si\n  const char *v168; // rcx\n  char v169; // dl\n  const char *v170; // rdx\n  char v171; // si\n  const char *v172; // rcx\n  char v173; // dl\n  int v174; // ebx\n  unsigned int v175; // eax\n  int v176; // r8d\n  int v177; // r9d\n  const char *v178; // rsi\n  int v179; // ebx\n  unsigned int v180; // eax\n  int v181; // r9d\n  const char *v182; // rdx\n  char v183; // si\n  char *v184; // rcx\n  char v185; // dl\n  int v186; // ebx\n  unsigned int v187; // eax\n  int v188; // r8d\n  int v189; // r9d\n  int v190; // ebx\n  unsigned int v191; // eax\n  int v192; // r8d\n  int v193; // r9d\n  int v194; // ebx\n  unsigned int v195; // eax\n  int v196; // r8d\n  int v197; // r9d\n  int v198; // ebx\n  unsigned int v199; // eax\n  int v200; // r8d\n  int v201; // r9d\n  unsigned int v202; // eax\n  int v203; // r9d\n  unsigned int v204; // eax\n  int v205; // r8d\n  int v206; // r9d\n  const char *v207; // rdx\n  char v208; // si\n  const char *v209; // rcx\n  char v210; // dl\n  unsigned int v211; // eax\n  int v212; // ecx\n  int v213; // r8d\n  int v214; // r9d\n  unsigned int v215; // eax\n  int v216; // ecx\n  int v217; // r8d\n  int v218; // r9d\n  const char *v219; // rdi\n  unsigned int v220; // eax\n  int v221; // ecx\n  int v222; // r8d\n  int v223; // r9d\n  unsigned int v224; // eax\n  int v225; // ecx\n  int v226; // r8d\n  int v227; // r9d\n  unsigned int v228; // eax\n  int v229; // ecx\n  int v230; // r8d\n  int v231; // r9d\n  const char *v232; // rdx\n  char v233; // si\n  const char *v234; // rcx\n  char v235; // dl\n  char v236; // [rsp+0h] [rbp-F8h]\n  unsigned __int64 v237; // [rsp+8h] [rbp-F0h]\n  char *v238; // [rsp+10h] [rbp-E8h]\n  char v239; // [rsp+1Ch] [rbp-DCh]\n  struct sigaction n; // [rsp+20h] [rbp-D8h] BYREF\n\n  LODWORD(v5) = a1;\n  v7 = (unsigned __int64)getenv(\"POSIXLY_CORRECT\");\n  sigemptyset(&set);\n  if ( v7 )\n    goto LABEL_2;\n  while ( 1 )\n  {\n    sigaddset(&set, 10);\nLABEL_2:\n    sigaction(2, 0LL, &n);\n    if ( n.sa_handler != (__sighandler_t)1 )\n      sigaddset(&set, 2);\n    *(__m128i *)n.sa_mask.__val = _mm_load_si128((const __m128i *)&set);\n    *(__m128i *)&n.sa_mask.__val[2] = _mm_load_si128((const __m128i *)&set.__val[2]);\n    *(__m128i *)&n.sa_mask.__val[4] = _mm_load_si128((const __m128i *)&set.__val[4]);\n    *(__m128i *)&n.sa_mask.__val[6] = _mm_load_si128((const __m128i *)&set.__val[6]);\n    *(__m128i *)&n.sa_mask.__val[8] = _mm_load_si128((const __m128i *)&set.__val[8]);\n    *(__m128i *)&n.sa_mask.__val[10] = _mm_load_si128((const __m128i *)&set.__val[10]);\n    *(__m128i *)&n.sa_mask.__val[12] = _mm_load_si128((const __m128i *)&set.__val[12]);\n    *(__m128i *)&n.sa_mask.__val[14] = _mm_load_si128((const __m128i *)&set.__val[14]);\n    if ( sigismember(&set, 10) )\n    {\n      n.sa_handler = (__sighandler_t)sub_403D40;\n      n.sa_flags = 0;\n      sigaction(10, &n, 0LL);\n    }\n    if ( sigismember(&set, 2) )\n    {\n      n.sa_handler = (__sighandler_t)sub_403D30;\n      n.sa_flags = -1073741824;\n      sigaction(2, &n, 0LL);\n    }\n    sub_406A10(*a2);\n    setlocale(6, \"\");\n    bindtextdomain(\n      \"coreutils\",\n      \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    sub_40DA80(sub_404720);\n    qword_614658 = getpagesize();\n    sub_406900(\n      v5,\n      (_DWORD)a2,\n      (unsigned int)\"dd\",\n      (unsigned int)\"coreutils\",\n      (_DWORD)off_6142C8,\n      (unsigned int)sub_405460,\n      \"Paul Rubin\",\n      \"David MacKenzie\",\n      \"Stuart Kemp\",\n      0LL);\n    byte_6142B8 = 0;\n    if ( (unsigned int)sub_40A500((unsigned int)v5, a2, \"\", &unk_40F680, 0LL) != -1 )\n      goto LABEL_336;\n    for ( i = 0LL; i != 256; ++i )\n      byte_6143E0[i] = i;\n    if ( (int)v5 > dword_61433C )\n    {\n      v9 = 0LL;\n      v3 = 0LL;\n      v237 = 0LL;\n      v10 = (unsigned int)(v5 + ~dword_61433C);\n      v7 = (unsigned __int64)&a2[dword_61433C];\n      v5 = -1LL;\n      a2 += dword_61433C + v10 + 1;\nLABEL_13:\n      v4 = *(const char **)v7;\n      v11 = strchr(*(const char **)v7, 61);\n      if ( v11 )\n      {\n        v12 = v11 + 1;\n        v13 = v4;\n        v14 = 105;\n        v15 = \"if\";\n        do\n        {\n          ++v13;\n          ++v15;\n          if ( *(v13 - 1) != v14 )\n            goto LABEL_116;\n          v14 = *v15;\n        }\n        while ( *v15 );\n        if ( !*v13 || *v13 == 61 )\n        {\n          qword_614668 = v12;\n          goto LABEL_20;\n        }\nLABEL_116:\n        v58 = v4;\n        v59 = 111;\n        v60 = \"of\";\n        do\n        {\n          ++v58;\n          ++v60;\n          if ( *(v58 - 1) != v59 )\n            goto LABEL_122;\n          v59 = *v60;\n        }\n        while ( *v60 );\n        v61 = *v58;\n        if ( v61 == 61 || !v61 )\n        {\n          qword_614660 = v12;\n          goto LABEL_20;\n        }\nLABEL_122:\n        v62 = v4;\n        v63 = 99;\n        v64 = \"conv\";\n        do\n        {\n          ++v62;\n          ++v64;\n          if ( *(v62 - 1) != v63 )\n            goto LABEL_128;\n          v63 = *v64;\n        }\n        while ( *v64 );\n        v65 = *v62;\n        if ( !v65 || v65 == 61 )\n        {\n          dword_61460C |= sub_4059D0(v12);\n          goto LABEL_20;\n        }\nLABEL_128:\n        v66 = v4;\n        v67 = 105;\n        v68 = \"iflag\";\n        do\n        {\n          ++v66;\n          ++v68;\n          if ( *(v66 - 1) != v67 )\n            goto LABEL_134;\n          v67 = *v68;\n        }\n        while ( *v68 );\n        v69 = *v66;\n        if ( !v69 || v69 == 61 )\n        {\n          oflag |= sub_4059D0(v12);\n          goto LABEL_20;\n        }\nLABEL_134:\n        v70 = v4;\n        v71 = 111;\n        v72 = \"oflag\";\n        do\n        {\n          ++v70;\n          ++v72;\n          if ( *(v70 - 1) != v71 )\n            goto LABEL_264;\n          v71 = *v72;\n        }\n        while ( *v72 );\n        v73 = *v70;\n        if ( !v73 || v73 == 61 )\n        {\n          dword_614604 |= sub_4059D0(v12);\n          goto LABEL_20;\n        }\nLABEL_264:\n        v131 = v4;\n        v132 = 115;\n        v133 = \"status\";\n        do\n        {\n          ++v131;\n          ++v133;\n          if ( *(v131 - 1) != v132 )\n            goto LABEL_295;\n          v132 = *v133;\n        }\n        while ( *v133 );\n        v134 = *v131;\n        if ( v134 == 61 || !v134 )\n        {\n          dword_6142BC = sub_4059D0(v12);\n          goto LABEL_20;\n        }\nLABEL_295:\n        v238 = v12;\n        LODWORD(n.sa_handler) = 0;\n        v151 = sub_4042D0(v12, &n, v133);\n        v152 = v238;\n        v153 = v4;\n        v154 = 105;\n        v155 = \"ibs\";\n        do\n        {\n          ++v153;\n          ++v155;\n          if ( *(v153 - 1) != v154 )\n            goto LABEL_318;\n          v154 = *v155;\n        }\n        while ( *v155 );\n        v156 = *v153;\n        if ( v156 != 61 && v156 )\n        {\nLABEL_318:\n          v166 = v4;\n          v167 = 111;\n          v168 = \"obs\";\n          do\n          {\n            ++v166;\n            ++v168;\n            if ( *(v166 - 1) != v167 )\n              goto LABEL_337;\n            v167 = *v168;\n          }\n          while ( *v168 );\n          v169 = *v166;\n          if ( v169 != 61 && v169 )\n          {\nLABEL_337:\n            v182 = v4;\n            v183 = 98;\n            v184 = \"cbs\" + 1;\n            do\n            {\n              ++v182;\n              ++v184;\n              if ( *(v182 - 1) != v183 )\n                goto LABEL_326;\n              v183 = *v184;\n            }\n            while ( *v184 );\n            v185 = *v182;\n            if ( v185 != 61 && v185 )\n            {\nLABEL_326:\n              v170 = v4;\n              v171 = 99;\n              v172 = \"cbs\";\n              do\n              {\n                ++v170;\n                ++v172;\n                if ( *(v170 - 1) != v171 )\n                  goto LABEL_351;\n                v171 = *v172;\n              }\n              while ( *v172 );\n              v173 = *v170;\n              if ( v173 != 61 && v173 )\n                goto LABEL_351;\n              qword_614640 = v151;\n              if ( v151 )\n                goto LABEL_315;\n              goto LABEL_332;\n            }\n            v3 = v151;\n            v157 = -2 * (qword_614658 + 2);\n            if ( v157 > 0x7FFFFFFFFFFFFFFFLL )\n              v157 = 0x7FFFFFFFFFFFFFFFLL;\n          }\n          else\n          {\n            offset = v151;\n            v157 = -qword_614658;\n            if ( (unsigned __int64)-qword_614658 > 0x7FFFFFFFFFFFFFFFLL )\n              v157 = 0x7FFFFFFFFFFFFFFFLL;\n          }\n        }\n        else\n        {\n          qword_614650 = v151;\n          v157 = -2 * (qword_614658 + 2);\n          if ( v157 > 0x7FFFFFFFFFFFFFFFLL )\n            v157 = 0x7FFFFFFFFFFFFFFFLL;\n        }\n        if ( v151 )\n        {\n          if ( v151 <= v157 )\n            goto LABEL_315;\n          LODWORD(n.sa_handler) = 1;\nLABEL_305:\n          v158 = sub_408630(v152);\n          v159 = (unsigned int)dcgettext(0LL, \"invalid number\", 5);\n          v161 = 75;\n          v30 = 1LL;\n          if ( LODWORD(n.sa_handler) != 1 )\n            v161 = 0;\n          sub_4041E0(1, v161, (unsigned int)\"%s: %s\", v159, v158, v160, v236);\n          goto LABEL_308;\n        }\nLABEL_332:\n        LODWORD(n.sa_handler) = 4;\n        goto LABEL_305;\n      }\nLABEL_345:\n      v186 = sub_408630(v4);\n      v187 = (unsigned int)dcgettext(0LL, \"unrecognized operand %s\", 5);\n      sub_4041E0(0, 0, v187, v186, v188, v189, v236);\nLABEL_336:\n      sub_405460(1);\n    }\n    v237 = 0LL;\n    v5 = -1LL;\n    v9 = 0LL;\nLABEL_140:\n    dword_61460C |= 0x800u;\n    if ( !qword_614650 )\n      qword_614650 = 512LL;\n    if ( !offset )\n      offset = 512LL;\n    while ( 1 )\n    {\n      if ( !qword_614640 )\n        dword_61460C &= 0xFFFFFFE7;\n      if ( (oflag & 0x101000) != 0 )\n        oflag |= 0x101000u;\n      if ( (dword_614604 & 1) != 0 )\n      {\n        v178 = \"invalid output flag\";\n        v179 = sub_408630(\"fullblock\");\n        goto LABEL_335;\n      }\n      v16 = oflag;\n      if ( (oflag & 0x10) != 0 )\n        goto LABEL_359;\n      if ( (dword_614604 & 0xC) != 0 )\n      {\n        v219 = \"count_bytes\";\n        if ( (dword_614604 & 4) == 0 )\n          v219 = \"skip_bytes\";\n        v178 = \"invalid output flag\";\n        v179 = sub_408630(v219);\nLABEL_335:\n        v180 = (unsigned int)dcgettext(0LL, v178, 5);\n        sub_4041E0(0, 0, (unsigned int)\"%s: %s\", v180, v179, v181, v236);\n        goto LABEL_336;\n      }\n      if ( (oflag & 8) != 0 )\n      {\n        if ( v9 )\n        {\n          *((_QWORD *)&xmmword_614630 + 1) = v9 / qword_614650;\n          *(_QWORD *)&xmmword_614630 = v9 % qword_614650;\n        }\n      }\n      else if ( v9 )\n      {\n        *((_QWORD *)&xmmword_614630 + 1) = v9;\n      }\n      if ( (oflag & 4) != 0 )\n      {\n        if ( v5 != -1LL )\n        {\n          qword_6142C0 = v5 / qword_614650;\n          qword_614610 = v5 % qword_614650;\n        }\n      }\n      else if ( v5 != -1LL )\n      {\n        qword_6142C0 = v5;\n      }\n      if ( (dword_614604 & 0x10) != 0 )\n      {\n        if ( v237 )\n        {\n          *((_QWORD *)&xmmword_614620 + 1) = v237 / offset;\n          *(_QWORD *)&xmmword_614620 = v237 % offset;\n        }\n      }\n      else if ( v237 )\n      {\n        *((_QWORD *)&xmmword_614620 + 1) = v237;\n      }\n      v17 = dword_61460C;\n      v18 = oflag & 1;\n      if ( v18 | dword_61460C & 0x800 )\n      {\n        v47 = v18 == 0;\n        v19 = sub_404A10;\n        byte_6145A8 = 0;\n        if ( v47 )\n          v19 = sub_404900;\n      }\n      else if ( *((_QWORD *)&xmmword_614630 + 1)\n             || (unsigned __int64)(qword_6142C0 - 1) <= 0xFFFFFFFFFFFFFFFDLL\n             || (((unsigned __int16)oflag | (unsigned __int16)dword_614604) & 0x4000) != 0 )\n      {\n        byte_6145A8 = 1;\n        v19 = sub_404900;\n      }\n      else\n      {\n        byte_6145A8 = 0;\n        v19 = sub_404900;\n      }\n      qword_6144E0 = (__int64 (__fastcall *)(_QWORD, _QWORD, _QWORD))v19;\n      oflag &= ~1u;\n      if ( (dword_61460C & 7 & ((dword_61460C & 7) - 1)) != 0 )\n      {\n        v220 = (unsigned int)dcgettext(0LL, \"cannot combine any two of {ascii,ebcdic,ibm}\", 5);\n        sub_4041E0(1, 0, v220, v221, v222, v223, v236);\nLABEL_364:\n        v224 = (unsigned int)dcgettext(0LL, \"cannot combine excl and nocreat\", 5);\n        sub_4041E0(1, 0, v224, v225, v226, v227, v236);\n        goto LABEL_365;\n      }\n      if ( (dword_61460C & 0x18 & ((dword_61460C & 0x18) - 1)) != 0 )\n      {\n        v211 = (unsigned int)dcgettext(0LL, \"cannot combine block and unblock\", 5);\n        sub_4041E0(1, 0, v211, v212, v213, v214, v236);\nLABEL_358:\n        v215 = (unsigned int)dcgettext(0LL, \"cannot combine lcase and ucase\", 5);\n        sub_4041E0(1, 0, v215, v216, v217, v218, v236);\nLABEL_359:\n        v178 = \"invalid input flag\";\n        v179 = sub_408630(\"seek_bytes\");\n        goto LABEL_335;\n      }\n      if ( (dword_61460C & 0x60 & ((dword_61460C & 0x60) - 1)) != 0 )\n        goto LABEL_358;\n      if ( (dword_61460C & 0x3000 & ((dword_61460C & 0x3000) - 1)) != 0 )\n        goto LABEL_364;\n      v20 = dword_614604 & 0x4002 & ((dword_614604 & 0x4002) - 1);\n      a2 = (const char **)(v20 | v16 & 0x4002 & ((v16 & 0x4002u) - 1));\n      v239 = v20 | v16 & 2 & ((v16 & 2) - 1);\n      if ( !(v20 | v16 & 0x4002 & ((v16 & 0x4002) - 1)) )\n        break;\nLABEL_365:\n      v228 = (unsigned int)dcgettext(0LL, \"cannot combine direct and nocache\", 5);\n      v151 = sub_4041E0(1, 0, v228, v229, v230, v231, v236);\nLABEL_366:\n      v232 = v4;\n      v233 = 99;\n      v234 = \"count\";\n      do\n      {\n        ++v232;\n        ++v234;\n        if ( *(v232 - 1) != v233 )\n          goto LABEL_345;\n        v233 = *v234;\n      }\n      while ( *v234 );\n      v235 = *v232;\n      if ( v235 != 61 && v235 )\n        goto LABEL_345;\n      v5 = v151;\nLABEL_315:\n      if ( LODWORD(n.sa_handler) )\n        goto LABEL_305;\nLABEL_20:\n      v7 += 8LL;\n      if ( a2 != (const char **)v7 )\n        goto LABEL_13;\n      if ( !v3 )\n        goto LABEL_140;\n      offset = v3;\n      qword_614650 = v3;\n    }\n    if ( (v16 & 2) != 0 )\n    {\n      byte_6144EB = 1;\n      byte_6144E9 = (qword_614610 | qword_6142C0) == 0;\n      oflag = v16 & 0xFFFFFFFC;\n    }\n    if ( (dword_614604 & 2) != 0 )\n    {\n      byte_6144EA = 1;\n      byte_6144E8 = (qword_614610 | qword_6142C0) == 0;\n      dword_614604 &= ~2u;\n    }\n    if ( (dword_61460C & 1) != 0 )\n    {\n      v21 = byte_6143E0;\n      do\n      {\n        v22 = (unsigned __int8)*v21++;\n        *(v21 - 1) = byte_40F0E0[v22];\n      }\n      while ( &qword_6144E0 != (__int64 (__fastcall **)(_QWORD, _QWORD, _QWORD))v21 );\n      byte_614600 = 1;\n    }\n    if ( (v17 & 0x40) != 0 )\n    {\n      v23 = *__ctype_toupper_loc();\n      v24 = byte_6143E0;\n      do\n      {\n        v25 = (unsigned __int8)*v24++;\n        *(v24 - 1) = v23[v25];\n      }\n      while ( &qword_6144E0 != (__int64 (__fastcall **)(_QWORD, _QWORD, _QWORD))v24 );\n      goto LABEL_58;\n    }\n    if ( (v17 & 0x20) != 0 )\n    {\n      v120 = *__ctype_tolower_loc();\n      v121 = byte_6143E0;\n      do\n      {\n        v122 = (unsigned __int8)*v121++;\n        *(v121 - 1) = v120[v122];\n      }\n      while ( &qword_6144E0 != (__int64 (__fastcall **)(_QWORD, _QWORD, _QWORD))v121 );\nLABEL_58:\n      byte_614600 = 1;\n    }\n    if ( (v17 & 2) != 0 )\n    {\n      v26 = byte_6143E0;\n      do\n      {\n        v27 = (unsigned __int8)*v26++;\n        *(v26 - 1) = byte_40F2E0[v27];\n      }\n      while ( &qword_6144E0 != (__int64 (__fastcall **)(_QWORD, _QWORD, _QWORD))v26 );\n      goto LABEL_62;\n    }\n    if ( (v17 & 4) != 0 )\n    {\n      v118 = byte_6143E0;\n      do\n      {\n        v119 = (unsigned __int8)*v118++;\n        *(v118 - 1) = byte_40F1E0[v119];\n      }\n      while ( v118 != (char *)&qword_6144E0 );\nLABEL_62:\n      byte_614600 = 1;\n      byte_6142BA = 37;\n      byte_6142B9 = 64;\n    }\n    v5 = (unsigned __int64)qword_614668;\n    v7 = (unsigned int)oflag;\n    v237 = (unsigned __int64)__errno_location();\n    if ( v5 )\n    {\n      if ( (int)sub_4048B0(0, (char *)v5, v7) >= 0 )\n        goto LABEL_65;\n      v194 = sub_4083E0(4LL, qword_614668);\n      v195 = (unsigned int)dcgettext(0LL, \"failed to open %s\", 5);\n      sub_4041E0(1, *(_DWORD *)v237, v195, v194, v196, v197, v236);\nLABEL_348:\n      v198 = sub_4083E0(4LL, qword_614660);\n      v199 = (unsigned int)dcgettext(0LL, \"failed to open %s\", 5);\n      sub_4041E0(1, *(_DWORD *)v237, v199, v198, v200, v201, v236);\nLABEL_349:\n      v202 = (unsigned int)dcgettext(\n                             0LL,\n                             \"offset too large: cannot truncate to a length of seek=%lu (%lu-byte) blocks\",\n                             5);\n      sub_4041E0(1, 0, v202, v5, v3, v203, v236);\nLABEL_350:\n      a2 = (const char **)sub_4083E0(4LL, qword_614660);\n      v204 = (unsigned int)dcgettext(0LL, \"cannot fstat %s\", 5);\n      v151 = sub_4041E0(1, *(_DWORD *)v237, v204, (_DWORD)a2, v205, v206, v236);\nLABEL_351:\n      v207 = v4;\n      v208 = 115;\n      v209 = \"skip\";\n      do\n      {\n        ++v207;\n        ++v209;\n        if ( *(v207 - 1) != v208 )\n          goto LABEL_309;\n        v208 = *v209;\n      }\n      while ( *v209 );\n      v210 = *v207;\n      if ( v210 == 61 || !v210 )\n      {\n        v9 = v151;\n        goto LABEL_315;\n      }\nLABEL_309:\n      v162 = v4;\n      v163 = 115;\n      v164 = (_BYTE *)(\"%s: cannot seek\" + 11);\n      do\n      {\n        ++v162;\n        ++v164;\n        if ( v163 != *(v162 - 1) )\n          goto LABEL_366;\n        v163 = *v164;\n      }\n      while ( *v164 );\n      v165 = *v162;\n      if ( v165 == 61 || !v165 )\n      {\n        v237 = v151;\n        goto LABEL_315;\n      }\n      goto LABEL_366;\n    }\n    qword_614668 = dcgettext(0LL, \"standard input\", 5);\n    sub_4043E0(0);\nLABEL_65:\n    v28 = lseek(0, 0LL, 1);\n    v29 = (size_t)qword_614660;\n    v7 = (unsigned int)dword_614604;\n    byte_6145BC = v28 >= 0;\n    if ( v28 < 0 )\n      v28 = 0LL;\n    qword_6145B0 = v28;\n    dword_6145B8 = *(_DWORD *)v237;\n    if ( !qword_614660 )\n      break;\n    v5 = (((dword_61460C & 0x1000) == 0) << 6) | dword_614604 | (dword_61460C >> 6) & 0x80u;\n    if ( *((_QWORD *)&xmmword_614620 + 1) )\n    {\n      v30 = 1LL;\n      if ( (int)sub_4048B0(1, qword_614660, (unsigned int)v5 | 2) < 0 )\n        goto LABEL_70;\n    }\n    else\n    {\n      v5 = ((dword_61460C & 0x200) == 0 ? 0x200 : 0) | (unsigned int)v5;\nLABEL_70:\n      v30 = 1LL;\n      v29 = (size_t)qword_614660;\n      if ( (int)sub_4048B0(1, qword_614660, (unsigned int)v5 | 1) < 0 )\n        goto LABEL_348;\n    }\n    v5 = *((_QWORD *)&xmmword_614620 + 1);\n    if ( !*((_QWORD *)&xmmword_614620 + 1) || (dword_61460C & 0x200) != 0 )\n      goto LABEL_75;\n    v3 = offset;\n    v7 = xmmword_614620 + offset * *((_QWORD *)&xmmword_614620 + 1);\n    if ( *((_QWORD *)&xmmword_614620 + 1) > 0x7FFFFFFFFFFFFFFFLL / offset )\n      goto LABEL_349;\n    v30 = xmmword_614620 + offset * *((_QWORD *)&xmmword_614620 + 1);\n    if ( !(unsigned int)sub_404BF0(v30) )\n      goto LABEL_75;\n    v29 = 1LL;\n    v30 = 1LL;\n    v5 = *(unsigned int *)v237;\n    if ( __fxstat(1, 1, (struct stat *)&n) )\n      goto LABEL_350;\n    if ( (((n.sa_mask.__val[2] & 0xF000) - 0x4000) & 0xFFFFB000) != 0 )\n      goto LABEL_75;\n    a2 = (const char **)sub_4083E0(4LL, qword_614660);\n    v144 = (unsigned int)dcgettext(0LL, \"failed to truncate to %lu bytes in output file %s\", 5);\n    sub_4041E0(1, v5, v144, v7, (_DWORD)a2, v145, v236);\n  }\n  v29 = (unsigned int)dword_614604;\n  v30 = 1LL;\n  qword_614660 = dcgettext(0LL, \"standard output\", 5);\n  sub_4043E0(1);\nLABEL_75:\n  v31 = sub_405C40();\n  v32 = *((_QWORD *)&xmmword_614630 + 1);\n  v33 = xmmword_614630;\n  qword_6145D0 = v31;\n  qword_6145C8 = v31 + 1000000000;\n  if ( xmmword_614630 != 0 )\n  {\n    v34 = qword_614650;\n    v29 = (size_t)qword_614668;\n    v30 = 0LL;\n    v35 = qword_6145B0;\n    if ( (sub_405150(0LL, qword_614668, *((_QWORD *)&xmmword_614630 + 1), qword_614650, &xmmword_614630)\n       || v34 * v32 + v33 + v35 != qword_6145B0 && byte_6145A9 != 1)\n      && dword_6142BC != 1 )\n    {\n      v79 = sub_4084B0(0LL, 3LL, qword_614668);\n      v80 = (unsigned int)dcgettext(0LL, \"%s: cannot skip to specified offset\", 5);\n      v29 = 0LL;\n      v30 = 0LL;\n      sub_4041E0(0, 0, v80, v79, v81, v82, v236);\n    }\n  }\n  if ( xmmword_614620 != 0 )\n  {\n    v30 = 1LL;\n    n.sa_handler = (__sighandler_t)xmmword_614620;\n    v29 = (size_t)qword_614660;\n    v36 = sub_405150(1LL, qword_614660, *((_QWORD *)&xmmword_614620 + 1), offset, &n);\n    if ( v36 )\n    {\n      memset(s1, 0, offset);\n      do\n      {\n        v37 = offset;\n        v30 = (__off_t)s1;\n        v29 = offset;\n        if ( v37 != sub_404C30(s1, offset) )\n          goto LABEL_346;\n        --v36;\n      }\n      while ( v36 );\n      sa_handler = n.sa_handler;\n      if ( n.sa_handler )\n      {\nLABEL_85:\n        v30 = (__off_t)s1;\n        v29 = (size_t)sa_handler;\n        if ( (__sighandler_t)sub_404C30(s1, (__off_t)sa_handler) != sa_handler )\n        {\nLABEL_346:\n          v190 = sub_4083E0(4LL, qword_614660);\n          v191 = (unsigned int)dcgettext(0LL, \"writing to %s\", 5);\n          sub_4041E0(0, *(_DWORD *)v237, v191, v190, v192, v193, v236);\n          sub_404E30();\n        }\n      }\n    }\n    else if ( n.sa_handler )\n    {\n      memset(s1, 0, (size_t)n.sa_handler);\n      sa_handler = n.sa_handler;\n      goto LABEL_85;\n    }\n  }\n  if ( !(qword_614610 | qword_6142C0) )\n  {\n    LODWORD(v238) = 0;\n    goto LABEL_254;\n  }\n  if ( !src )\n    sub_404A80();\n  sub_404BA0();\n  LODWORD(v238) = 0;\n  v39 = 0LL;\nLABEL_90:\n  if ( dword_6142BC == 4 )\n    goto LABEL_114;\n  while ( 1 )\n  {\n    v40 = qword_614610;\n    v41 = qword_6142C0;\n    v42 = qword_6145E8 + qword_6145E0;\n    v43 = dword_61460C;\n    if ( qword_6145E8 + qword_6145E0 >= qword_6142C0 + (unsigned __int64)(qword_614610 != 0) )\n      break;\n    v44 = src;\n    if ( (dword_61460C & 0x500) == 1280 )\n    {\n      v45 = dword_61460C & 0x18;\n      if ( (dword_61460C & 0x18) != 0 )\n        v45 = 32;\n      v44 = memset(src, v45, qword_614650);\n    }\n    if ( v42 < v41 )\n    {\n      v30 = 0LL;\n      v46 = qword_6144E0(0LL, v44, qword_614650);\n      v47 = v46 == 0;\n      if ( v46 > 0 )\n      {\nLABEL_98:\n        v48 = __CFADD__(qword_6145B0, v46);\n        v49 = v46;\n        qword_6145B0 += v46;\n        if ( v48 )\n          byte_6145A9 = 1;\n        if ( byte_6144EB )\n          sub_4045A0(0);\n        v50 = qword_614650;\n        if ( qword_614650 > v49 )\n          goto LABEL_103;\n        goto LABEL_165;\n      }\n    }\n    else\n    {\n      v30 = 0LL;\n      v46 = qword_6144E0(0LL, v44, v40);\n      v47 = v46 == 0;\n      if ( v46 > 0 )\n        goto LABEL_98;\n    }\n    v43 = dword_61460C;\n    if ( v47 )\n    {\n      byte_6144E9 |= byte_6144EB;\n      if ( byte_6144EA )\n        v239 = (dword_61460C & 0x200) == 0;\n      byte_6144E8 = (byte_6144E8 | v239) & 1;\n      break;\n    }\n    if ( (dword_61460C & 0x100) == 0 || dword_6142BC != 1 )\n    {\n      v83 = sub_4083E0(4LL, qword_614668);\n      v84 = (unsigned int)dcgettext(0LL, \"error reading %s\", 5);\n      v30 = 0LL;\n      sub_4041E0(0, *(_DWORD *)v237, v84, v83, v85, v86, v236);\n      v43 = dword_61460C;\n      if ( (dword_61460C & 0x100) == 0 )\n      {\n        LODWORD(v238) = 1;\n        break;\n      }\n    }\n    sub_4040B0();\n    v30 = 0LL;\n    v87 = qword_614650 - v39;\n    sub_4045A0(0);\n    if ( byte_6145BC )\n    {\n      v48 = __CFADD__(qword_6145B0, v87);\n      v96 = qword_6145B0 + v87;\n      qword_6145B0 += v87;\n      if ( v48 )\n      {\n        byte_6145A9 = 1;\nLABEL_176:\n        v97 = sub_4083E0(4LL, qword_614668);\n        v98 = (unsigned int)dcgettext(0LL, \"offset overflow while reading file %s\", 5);\n        v30 = 0LL;\n        sub_4041E0(0, 0, v98, v97, v99, v100, v236);\n        goto LABEL_161;\n      }\n      byte_6145A9 |= v96 < 0;\n      if ( byte_6145A9 )\n        goto LABEL_176;\n      v30 = 0LL;\n      v105 = lseek(0, 0LL, 1);\n      if ( v105 < 0 )\n        goto LABEL_160;\n      if ( v105 != v96 )\n      {\n        v106 = v96 - v105;\n        if ( (v106 < 0 || v87 < v106) && dword_6142BC != 1 )\n        {\n          v135 = (unsigned int)dcgettext(0LL, \"warning: invalid file offset after failed read\", 5);\n          sub_4041E0(0, 0, v135, v136, v137, v138, v236);\n        }\n        v30 = (__off_t)qword_614668;\n        if ( sub_4044D0(qword_614668, 0LL, v106, 1LL) < 0 )\n        {\n          if ( !*(_DWORD *)v237 )\n          {\n            v107 = (unsigned int)dcgettext(0LL, \"cannot work around kernel bug after all\", 5);\n            sub_4041E0(0, 0, v107, v108, v109, v110, v236);\n          }\nLABEL_160:\n          v88 = sub_4084B0(0LL, 3LL, qword_614668);\n          v89 = (unsigned int)dcgettext(0LL, \"%s: cannot seek\", 5);\n          v30 = 0LL;\n          sub_4041E0(0, *(_DWORD *)v237, v89, v88, v90, v91, v236);\nLABEL_161:\n          byte_6145BC = 0;\n          dword_6145B8 = 29;\n          LODWORD(v238) = 1;\n        }\n      }\n    }\n    else if ( dword_6145B8 != 29 )\n    {\n      *(_DWORD *)v237 = dword_6145B8;\n      goto LABEL_160;\n    }\n    if ( (dword_61460C & 0x400) == 0 || v39 )\n      goto LABEL_90;\n    v50 = qword_614650;\n    v49 = 0LL;\n    if ( qword_614650 )\n    {\nLABEL_103:\n      ++qword_6145E8;\n      v39 = v49;\n      if ( (dword_61460C & 0x400) != 0 )\n      {\n        if ( (dword_61460C & 0x100) != 0 )\n        {\n          v49 = v50;\n        }\n        else\n        {\n          v51 = v50 - v49;\n          v52 = dword_61460C & 0x18;\n          if ( (dword_61460C & 0x18) != 0 )\n            v52 = 32;\n          v39 = v49;\n          v53 = (char *)src + v49;\n          v49 = v50;\n          memset(v53, v52, v51);\n        }\n      }\n      goto LABEL_108;\n    }\nLABEL_165:\n    ++qword_6145E0;\n    v39 = 0LL;\nLABEL_108:\n    v54 = (char *)src;\n    v55 = s1;\n    if ( src == s1 )\n    {\n      v30 = (__off_t)src;\n      v104 = sub_404C30(src, v49);\n      qword_6145D8 += v104;\n      if ( v104 != v49 )\n        goto LABEL_201;\n      if ( qword_614650 == v49 )\n        ++qword_6145F0;\n      else\n        ++qword_6145F8;\n      goto LABEL_90;\n    }\n    if ( byte_614600 && v49 )\n    {\n      v101 = (char *)src + v49;\n      v102 = (char *)src;\n      do\n      {\n        v103 = (unsigned __int8)*v102++;\n        *(v102 - 1) = byte_6143E0[v103];\n      }\n      while ( v102 != v101 );\n    }\n    v56 = dword_61460C;\n    if ( (dword_61460C & 0x80u) != 0 )\n    {\n      if ( byte_6143C1 )\n      {\n        v92 = v54 - 1;\n        ++v49;\n        byte_6143C1 = 0;\n        *(v54 - 1) = byte_6143C0;\n      }\n      else\n      {\n        v92 = v54++;\n      }\n      if ( (v49 & 1) != 0 )\n      {\n        --v49;\n        byte_6143C1 = 1;\n        v93 = &v92[v49];\n        byte_6143C0 = *v93;\n      }\n      else\n      {\n        v93 = &v92[v49];\n      }\n      v94 = &v93[-2 * (v49 >> 1)];\n      if ( v49 >> 1 )\n      {\n        do\n        {\n          v95 = *(v93 - 2);\n          v93 -= 2;\n          v93[2] = v95;\n        }\n        while ( v93 != v94 );\n      }\n    }\n    if ( (v56 & 8) != 0 )\n    {\n      v30 = (__off_t)v54;\n      sub_404EF0(v54, v49);\n      goto LABEL_90;\n    }\n    if ( (v56 & 0x10) == 0 )\n    {\n      while ( 1 )\n      {\n        v74 = offset;\n        v75 = v54;\n        v76 = offset - qword_614588;\n        if ( offset - qword_614588 > v49 )\n          v76 = v49;\n        v30 = (__off_t)v55 + qword_614588;\n        v77 = v76;\n        v49 -= v76;\n        v54 += v76;\n        v78 = qword_614588 + v76;\n        memcpy((void *)v30, v75, v77);\n        qword_614588 = v78;\n        if ( v74 <= v78 )\n          sub_404E50();\n        if ( !v49 )\n          break;\n        v55 = s1;\n      }\n      goto LABEL_90;\n    }\n    v30 = (__off_t)v54;\n    sub_405000(v54, v49);\n    if ( dword_6142BC == 4 )\n    {\nLABEL_114:\n      v57 = sub_405C40();\n      if ( v57 >= qword_6145C8 )\n      {\n        v30 = v57;\n        sub_403D50(v57);\n        qword_6145C8 += 1000000000LL;\n      }\n    }\n  }\n  if ( byte_6143C1 )\n  {\n    if ( (v43 & 8) != 0 )\n    {\n      v30 = (__off_t)&byte_6143C0;\n      sub_404EF0(&byte_6143C0, 1LL);\n      v43 = dword_61460C;\n    }\n    else if ( (v43 & 0x10) != 0 )\n    {\n      v30 = (__off_t)&byte_6143C0;\n      sub_405000(&byte_6143C0, 1LL);\n      v43 = dword_61460C;\n    }\n    else\n    {\n      v123 = qword_614588;\n      v48 = ++qword_614588 < offset;\n      *((_BYTE *)s1 + v123) = byte_6143C0;\n      if ( v48 )\n        goto LABEL_235;\n      sub_404E50();\n      v43 = dword_61460C;\n    }\n  }\n  if ( (v43 & 8) == 0 )\n    goto LABEL_235;\n  v125 = qword_614580;\n  if ( qword_614580 )\n  {\n    if ( qword_614640 <= (unsigned __int64)qword_614580 )\n      goto LABEL_236;\n    do\n    {\n      v126 = qword_614588;\n      v48 = ++qword_614588 < offset;\n      *((_BYTE *)s1 + v126) = byte_6142B9;\n      if ( !v48 )\n        sub_404E50();\n      ++v125;\n    }\n    while ( v125 < qword_614640 );\nLABEL_235:\n    v43 = dword_61460C;\n    if ( qword_614580 )\n    {\nLABEL_236:\n      if ( (v43 & 0x10) == 0 )\n        goto LABEL_238;\n      v124 = qword_614588;\n      v48 = ++qword_614588 < offset;\n      *((_BYTE *)s1 + v124) = byte_6142BA;\n      if ( v48 )\n        goto LABEL_238;\nLABEL_308:\n      sub_404E50();\n    }\n  }\nLABEL_238:\n  if ( qword_614588 )\n  {\n    v30 = (__off_t)s1;\n    v111 = sub_404C30(s1, qword_614588);\n    qword_6145D8 += v111;\n    if ( v111 )\n      ++qword_6145F8;\n    if ( v111 != qword_614588 )\n    {\nLABEL_201:\n      v112 = \"error writing %s\";\n      v113 = sub_4083E0(4LL, qword_614660);\n      goto LABEL_202;\n    }\n  }\n  if ( byte_614618 )\n  {\n    v30 = 1LL;\n    if ( __fxstat(1, 1, (struct stat *)&n) )\n    {\n      v112 = \"cannot fstat %s\";\n      v113 = sub_4083E0(4LL, qword_614660);\nLABEL_202:\n      v114 = (unsigned int)dcgettext(0LL, v112, 5);\n      v30 = 0LL;\n      v29 = *(unsigned int *)v237;\n      sub_4041E0(0, v29, v114, v113, v115, v116, v236);\n    }\n    else\n    {\n      if ( (n.sa_mask.__val[2] & 0xF000) != 0x8000 )\n        goto LABEL_240;\n      v30 = 1LL;\n      v146 = lseek(1, 0LL, 1);\n      v147 = v146;\n      if ( v146 < 0 )\n        goto LABEL_240;\n      if ( v146 <= (__int64)n.sa_mask.__val[5] )\n        goto LABEL_240;\n      v30 = v146;\n      if ( !(unsigned int)sub_404BF0(v146) )\n        goto LABEL_240;\n      v148 = sub_4083E0(4LL, qword_614660);\n      v149 = (unsigned int)dcgettext(0LL, \"failed to truncate to %ld bytes in output file %s\", 5);\n      v30 = 0LL;\n      v29 = *(unsigned int *)v237;\n      sub_4041E0(0, v29, v149, v147, v148, v150, v236);\n    }\n    LODWORD(v238) = 1;\n  }\n  else\n  {\nLABEL_240:\n    LOWORD(v29) = dword_61460C;\n    if ( (dword_61460C & 0x4000) != 0 && (v30 = 1LL, v139 = fdatasync(1), v29 = (unsigned int)dword_61460C, v139) )\n    {\n      if ( ((*(_DWORD *)v237 - 22) & 0xFFFFFFEF) != 0 )\n      {\n        v174 = sub_4083E0(4LL, qword_614660);\n        v175 = (unsigned int)dcgettext(0LL, \"fdatasync failed for %s\", 5);\n        v29 = *(unsigned int *)v237;\n        sub_4041E0(0, v29, v175, v174, v176, v177, v236);\n        LODWORD(v238) = 1;\n      }\n      dword_61460C |= 0x8000u;\nLABEL_242:\n      while ( 1 )\n      {\n        v30 = 1LL;\n        if ( !fsync(1) )\n          break;\n        if ( *(_DWORD *)v237 != 4 )\n        {\n          v112 = \"fsync failed for %s\";\n          v113 = sub_4083E0(4LL, qword_614660);\n          goto LABEL_202;\n        }\n      }\n    }\n    else\n    {\n      v29 = (unsigned __int16)v29 & 0x8000;\n      if ( (_DWORD)v29 )\n        goto LABEL_242;\n    }\n  }\n  if ( qword_6142C0 || qword_614610 )\n  {\n    if ( byte_6144EB || byte_6144E9 )\n    {\n      v29 = 0LL;\n      v30 = 0LL;\n      sub_4045A0(0);\n    }\n    if ( byte_6144EA || byte_6144E8 )\n    {\n      v29 = 0LL;\n      v30 = 1LL;\n      sub_4045A0(1);\n    }\n  }\n  else\n  {\nLABEL_254:\n    if ( byte_6144EB )\n    {\n      v29 = 0LL;\n      v30 = 0LL;\n      if ( !(unsigned __int8)sub_4045A0(0) )\n      {\n        v140 = sub_4084B0(0LL, 3LL, qword_614668);\n        v141 = (unsigned int)dcgettext(0LL, \"failed to discard cache for: %s\", 5);\n        v30 = 0LL;\n        v29 = *(unsigned int *)v237;\n        sub_4041E0(0, v29, v141, v140, v142, v143, v236);\n        LODWORD(v238) = 1;\n      }\n    }\n    if ( byte_6144EA )\n    {\n      v29 = 0LL;\n      v30 = 1LL;\n      if ( !(unsigned __int8)sub_4045A0(1) )\n      {\n        v127 = sub_4084B0(0LL, 3LL, qword_614660);\n        v128 = (unsigned int)dcgettext(0LL, \"failed to discard cache for: %s\", 5);\n        v30 = 0LL;\n        v29 = *(unsigned int *)v237;\n        sub_4041E0(0, v29, v128, v127, v129, v130, v236);\n        LODWORD(v238) = 1;\n      }\n    }\n  }\n  sub_404760(v30, v29);\n  sub_4040B0();\n  sub_404810();\n  return (unsigned int)v238;\n}\n"
        },
        {
            "funcName": "sub_403C7B",
            "funcStartAddr": "0x403c7b",
            "funcEndAddr": "0x403c9a",
            "decompiledFuncCode": "void *sub_403C7B()\n{\n  return &unk_614348;\n}\n"
        },
        {
            "funcName": "sub_403C9A",
            "funcStartAddr": "0x403c9a",
            "funcEndAddr": "0x403cd1",
            "decompiledFuncCode": "__int64 sub_403C9A()\n{\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_403CD1",
            "funcStartAddr": "0x403cd1",
            "funcEndAddr": "0x403d28",
            "decompiledFuncCode": "void *sub_403CD1()\n{\n  void *result; // rax\n\n  if ( !byte_614388 )\n  {\n    while ( qword_614390 < (unsigned __int64)(&qword_613E48 - qword_613E40 - 1) )\n      ((void (*)(void))qword_613E40[++qword_614390])();\n    result = sub_403C7B();\n    byte_614388 = 1;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_403D28",
            "funcStartAddr": "0x403d28",
            "funcEndAddr": "0x403d2d",
            "decompiledFuncCode": "// attributes: thunk\n__int64 sub_403D28()\n{\n  return sub_403C9A();\n}\n"
        },
        {
            "funcName": "sub_403D30",
            "funcStartAddr": "0x403d30",
            "funcEndAddr": "0x403d37",
            "decompiledFuncCode": "void __fastcall sub_403D30(int a1)\n{\n  sig = a1;\n}\n"
        },
        {
            "funcName": "sub_403D40",
            "funcStartAddr": "0x403d40",
            "funcEndAddr": "0x403d50",
            "decompiledFuncCode": "__int64 sub_403D40()\n{\n  return (unsigned int)++dword_6144EC;\n}\n"
        },
        {
            "funcName": "sub_403D50",
            "funcStartAddr": "0x403d50",
            "funcEndAddr": "0x4040a7",
            "decompiledFuncCode": "int __fastcall sub_403D50(__int64 a1)\n{\n  __int64 v1; // rbx\n  const char *v2; // r12\n  const char *v3; // r13\n  __int64 v4; // rbx\n  double v5; // xmm0_8\n  const char *v6; // rbx\n  double v7; // xmm0_8\n  const char *v8; // r8\n  char *IO_write_ptr; // rax\n  size_t v10; // rax\n  unsigned __int64 v11; // r14\n  char *v12; // rax\n  char *v13; // r9\n  int v14; // ebx\n  char *v15; // rax\n  char *v16; // rax\n  unsigned __int64 v17; // r12\n  char *v18; // rax\n  char *v20; // [rsp-10h] [rbp-818h]\n  char v21[32]; // [rsp+10h] [rbp-7F8h] BYREF\n  char v22[654]; // [rsp+30h] [rbp-7D8h] BYREF\n  char v23[654]; // [rsp+2BEh] [rbp-54Ah] BYREF\n  char v24[700]; // [rsp+54Ch] [rbp-2BCh] BYREF\n\n  v1 = a1;\n  if ( !a1 )\n    v1 = sub_405C40();\n  v2 = (const char *)sub_405D70(qword_6145D8, v22, 465LL, 1LL, 1LL);\n  v3 = (const char *)sub_405D70(qword_6145D8, v23, 497LL, 1LL, 1LL);\n  if ( qword_6145D0 >= v1 )\n  {\n    v16 = dcgettext(0LL, \"Infinity\", 5);\n    v6 = v24;\n    __snprintf_chk(v24, 654LL, 1LL, 654LL, \"%s B/s\", v16);\n    v7 = 0.0;\n  }\n  else\n  {\n    v4 = v1 - qword_6145D0;\n    if ( v4 < 0 )\n      v5 = (double)(int)(v4 & 1 | ((unsigned __int64)v4 >> 1)) + (double)(int)(v4 & 1 | ((unsigned __int64)v4 >> 1));\n    else\n      v5 = (double)(int)v4;\n    v6 = (const char *)sub_405D70(qword_6145D8, v24, 465LL, 1000000000LL, v4);\n    v7 = v5 / 1000000000.0;\n    strcpy((char *)&v6[strlen(v6)], \"/s\");\n  }\n  v8 = \"%g s\";\n  if ( !a1 )\n    goto LABEL_10;\n  IO_write_ptr = stderr->_IO_write_ptr;\n  if ( IO_write_ptr < stderr->_IO_write_end )\n  {\n    v8 = \"%.0f s\";\n    stderr->_IO_write_ptr = IO_write_ptr + 1;\n    *IO_write_ptr = 13;\nLABEL_10:\n    __snprintf_chk(v21, 24LL, 1LL, 24LL, v8, v7);\n    goto LABEL_11;\n  }\n  __overflow(stderr, 13);\n  __snprintf_chk(v21, 24LL, 1LL, 24LL, \"%.0f s\", v7);\nLABEL_11:\n  if ( v2[strlen(v2) - 2] == 32 )\n  {\n    v17 = qword_6145D8;\n    v18 = dcngettext(0LL, \"%lu byte copied, %s, %s\", \"%lu bytes copied, %s, %s\", qword_6145D8, 5);\n    LODWORD(v15) = __fprintf_chk(stderr, 1LL, v18, v17, v21, v6);\n    v14 = (int)v15;\n  }\n  else\n  {\n    v10 = strlen(v3);\n    v11 = qword_6145D8;\n    if ( v3[v10 - 2] == 32 )\n    {\n      v12 = dcgettext(0LL, \"%lu bytes (%s) copied, %s, %s\", 5);\n      LODWORD(v20) = (_DWORD)v6;\n      v13 = v21;\n    }\n    else\n    {\n      v12 = dcgettext(0LL, \"%lu bytes (%s, %s) copied, %s, %s\", 5);\n      v13 = (char *)v3;\n      v20 = v21;\n    }\n    v14 = __fprintf_chk(stderr, 1LL, v12, v11, v2, v13);\n    LODWORD(v15) = (_DWORD)v20;\n  }\n  if ( a1 )\n  {\n    if ( v14 >= 0 && dword_6145C0 > v14 )\n      LODWORD(v15) = __fprintf_chk(stderr, 1LL, \"%*s\", dword_6145C0 - v14, \"\");\n    dword_6145C0 = v14;\n  }\n  else\n  {\n    v15 = stderr->_IO_write_ptr;\n    if ( v15 >= stderr->_IO_write_end )\n    {\n      LODWORD(v15) = __overflow(stderr, 10);\n    }\n    else\n    {\n      stderr->_IO_write_ptr = v15 + 1;\n      *v15 = 10;\n    }\n  }\n  return (int)v15;\n}\n"
        },
        {
            "funcName": "sub_4040B0",
            "funcStartAddr": "0x4040b0",
            "funcEndAddr": "0x4041d7",
            "decompiledFuncCode": "void sub_4040B0()\n{\n  char *IO_write_ptr; // rax\n  __int64 v1; // r13\n  __int64 v2; // rbx\n  __int64 v3; // r12\n  __int64 v4; // rbp\n  char *v5; // rax\n  unsigned __int64 v6; // rbx\n  char *v7; // rax\n\n  if ( dword_6142BC != 1 )\n  {\n    if ( dword_6145C0 > 0 )\n    {\n      IO_write_ptr = stderr->_IO_write_ptr;\n      if ( IO_write_ptr >= stderr->_IO_write_end )\n      {\n        __overflow(stderr, 10);\n      }\n      else\n      {\n        stderr->_IO_write_ptr = IO_write_ptr + 1;\n        *IO_write_ptr = 10;\n      }\n      dword_6145C0 = 0;\n    }\n    v1 = qword_6145F8;\n    v2 = qword_6145E0;\n    v3 = qword_6145F0;\n    v4 = qword_6145E8;\n    v5 = dcgettext(0LL, \"%lu+%lu records in\\n%lu+%lu records out\\n\", 5);\n    __fprintf_chk(stderr, 1LL, v5, v2, v4, v3, v1);\n    v6 = qword_6145A0;\n    if ( qword_6145A0 )\n    {\n      v7 = dcngettext(0LL, \"%lu truncated record\\n\", \"%lu truncated records\\n\", qword_6145A0, 5);\n      __fprintf_chk(stderr, 1LL, v7, v6);\n    }\n    if ( dword_6142BC != 2 )\n      sub_403D50(0LL);\n  }\n}\n"
        },
        {
            "funcName": "sub_4041E0",
            "funcStartAddr": "0x4041e0",
            "funcEndAddr": "0x4042c6",
            "decompiledFuncCode": "__int64 sub_4041E0(unsigned int a1, unsigned int a2, __int64 a3, ...)\n{\n  char *IO_write_ptr; // rax\n  __int64 v5; // [rsp+8h] [rbp-F0h]\n  gcc_va_list va; // [rsp+18h] [rbp-E0h] BYREF\n\n  if ( dword_6145C0 > 0 )\n  {\n    IO_write_ptr = stderr->_IO_write_ptr;\n    if ( IO_write_ptr >= stderr->_IO_write_end )\n    {\n      v5 = a3;\n      __overflow(stderr, 10);\n      a3 = v5;\n    }\n    else\n    {\n      stderr->_IO_write_ptr = IO_write_ptr + 1;\n      *IO_write_ptr = 10;\n    }\n    dword_6145C0 = 0;\n  }\n  va_start(va, a3);\n  return sub_408710(a1, a2, a3, va);\n}\n"
        },
        {
            "funcName": "sub_4042D0",
            "funcStartAddr": "0x4042d0",
            "funcEndAddr": "0x4043e0",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_4042D0(char *a1, unsigned int *a2)\n{\n  unsigned int v2; // eax\n  unsigned int v3; // edx\n  unsigned __int64 result; // rax\n  unsigned __int64 v5; // rax\n  unsigned __int64 v6; // rbx\n  unsigned __int64 v7; // rax\n  __int64 v8; // r12\n  __int64 v9; // rbp\n  char *v10; // rax\n  unsigned __int64 v11; // [rsp+0h] [rbp-28h]\n  _BYTE *v12; // [rsp+8h] [rbp-20h]\n\n  v2 = sub_408F50(a1);\n  v3 = v2;\n  if ( v2 != 2 )\n  {\n    result = v11;\n    if ( !v3 )\n      return result;\nLABEL_5:\n    *a2 = v3;\n    return 0LL;\n  }\n  if ( *v12 != 120 )\n    goto LABEL_5;\n  v5 = sub_4042D0(v12 + 1, a2, v2);\n  v6 = v5;\n  if ( v5 )\n  {\n    v7 = v5 * v11 / v5;\n    if ( v11 != v7 )\n    {\n      *a2 = 1;\n      return 0LL;\n    }\n  }\n  else\n  {\n    v7 = v11;\n  }\n  if ( !v7 && !memcmp(a1, \"0x\", 2uLL) )\n  {\n    v8 = sub_408610(1LL, \"00x\");\n    v9 = sub_408610(0LL, 4250511LL);\n    v10 = dcgettext(0LL, \"warning: %s is a zero multiplier; use %s if that is intended\", 5);\n    sub_4041E0(0, 0, (__int64)v10, v9, v8);\n    v7 = v11;\n  }\n  return v6 * v7;\n}\n"
        },
        {
            "funcName": "sub_4043E0",
            "funcStartAddr": "0x4043e0",
            "funcEndAddr": "0x4044c2",
            "decompiledFuncCode": "void __fastcall sub_4043E0(int fildes, int a2, __int64 a3, int a4, int a5, int a6)\n{\n  int v7; // eax\n  int v8; // ecx\n  int v9; // r8d\n  int v10; // r9d\n  __int64 v11; // rbp\n  __int64 v12; // rbx\n  int *v13; // rax\n  struct stat v14; // [rsp+0h] [rbp-B8h] BYREF\n\n  if ( (a2 & 0xFFFDFEFF) != 0 )\n  {\n    v7 = sub_4095D0(fildes, 3, a3, a4, a5, a6, v14.st_dev);\n    LODWORD(v11) = v7;\n    LODWORD(v12) = v7 | a2 & 0xFFFDFEFF;\n    if ( v7 < 0 )\n      goto LABEL_11;\n    if ( v7 != (_DWORD)v12 )\n    {\n      if ( v7 & 0x10000 | a2 & 0x10000 )\n      {\n        if ( !__fxstat(1, fildes, &v14) )\n        {\n          if ( (v14.st_mode & 0xF000) == 0x4000 )\n            goto LABEL_12;\n          *__errno_location() = 20;\n        }\n        goto LABEL_11;\n      }\n      while ( (unsigned int)sub_4095D0(fildes, 4, v12, v8, v9, v10, v14.st_dev) == -1 )\n      {\nLABEL_11:\n        v11 = sub_4083E0(4LL, a3);\n        v12 = (__int64)dcgettext(0LL, \"setting flags for %s\", 5);\n        v13 = __errno_location();\n        sub_4041E0(1u, *v13, v12, v11);\nLABEL_12:\n        LODWORD(v12) = v12 & 0xFFFEFFFF;\n        if ( (_DWORD)v12 == (_DWORD)v11 )\n          return;\n      }\n    }\n  }\n}\n"
        },
        {
            "funcName": "sub_4044D0",
            "funcStartAddr": "0x4044d0",
            "funcEndAddr": "0x40459e",
            "decompiledFuncCode": "__off_t __fastcall sub_4044D0(__int64 a1, int a2, __off_t a3, int a4)\n{\n  int v6; // r13d\n  __off_t v7; // rbp\n  __int64 v9; // rbx\n  char *v10; // rax\n  _QWORD v11[6]; // [rsp+0h] [rbp-88h] BYREF\n  __int64 v12[11]; // [rsp+30h] [rbp-58h] BYREF\n\n  v6 = ioctl(a2, 0x80306D02uLL, v11);\n  v7 = lseek(a2, a3, a4);\n  if ( v7 >= 0 && !v6 && !ioctl(a2, 0x80306D02uLL, v12) && v11[1] == v12[1] && v11[5] == v12[5] )\n  {\n    if ( dword_6142BC != 1 )\n    {\n      v9 = v12[0];\n      v10 = dcgettext(\n              0LL,\n              \"warning: working around lseek kernel bug for file (%s)\\n\"\n              \"  of mt_type=0x%0lx -- see <sys/mtio.h> for the list of types\",\n              5);\n      sub_4041E0(0, 0, (__int64)v10, a1, v9);\n    }\n    v7 = -1LL;\n    *__errno_location() = 0;\n  }\n  return v7;\n}\n"
        },
        {
            "funcName": "sub_4045A0",
            "funcStartAddr": "0x4045a0",
            "funcEndAddr": "0x404718",
            "decompiledFuncCode": "__int64 __fastcall sub_4045A0(int fd, __int64 a2)\n{\n  char v2; // r15\n  off_t *v3; // rax\n  off_t v4; // rbx\n  unsigned __int64 v5; // rbx\n  unsigned __int64 v6; // r14\n  unsigned int v7; // r12d\n  __int64 v9; // rbp\n  int v10; // r13d\n  __off_t v11; // rsi\n  unsigned __int64 v12; // rsi\n\n  if ( fd )\n  {\n    v2 = byte_6144E8;\n    v3 = (off_t *)&unk_6143A0;\n  }\n  else\n  {\n    v2 = byte_6144E9;\n    v3 = (off_t *)&unk_6143A8;\n  }\n  v4 = *v3;\n  if ( a2 )\n  {\n    v5 = a2 + v4;\n    v6 = v5 & 0x1FFFF;\n    *v3 = v6;\n    if ( v5 > v6 )\n    {\n      v4 = v5 - v6;\n      if ( v4 )\n      {\n        v9 = a2;\n        v10 = fd;\n        if ( fd )\n          goto LABEL_14;\nLABEL_10:\n        v7 = (unsigned __int8)byte_6145BC;\n        v11 = qword_6145B0;\n        if ( !byte_6145BC )\n        {\n          *__errno_location() = 29;\n          return v7;\n        }\n        goto LABEL_18;\n      }\n    }\n    return 1;\n  }\n  if ( !v4 && !v2 )\n    return 1;\n  v6 = 0LL;\n  v9 = 0LL;\n  v10 = fd;\n  if ( !fd )\n    goto LABEL_10;\nLABEL_14:\n  v11 = qword_6142B0;\n  v7 = 0;\n  if ( qword_6142B0 == -1 )\n    return v7;\n  if ( qword_6142B0 < 0 )\n  {\n    v11 = lseek(1, 0LL, 1);\n    qword_6142B0 = v11;\n  }\n  else\n  {\n    if ( !v9 )\n    {\nLABEL_19:\n      v12 = v11 - v4;\n      if ( v9 || !v4 )\n      {\n        v12 -= v6;\n        if ( v4 )\n          goto LABEL_23;\n      }\n      else if ( !v2 )\n      {\n        v12 -= v6;\nLABEL_23:\n        LOBYTE(v7) = posix_fadvise(v10, v12, v4, 4) != -1;\n        return v7;\n      }\n      v4 = 0LL;\n      v12 -= v12 % qword_614658;\n      goto LABEL_23;\n    }\n    v11 = v6 + v4 + qword_6142B0;\n    qword_6142B0 = v11;\n  }\nLABEL_18:\n  v7 = 0;\n  if ( v11 >= 0 )\n    goto LABEL_19;\n  return v7;\n}\n"
        },
        {
            "funcName": "sub_404720",
            "funcStartAddr": "0x404720",
            "funcEndAddr": "0x404753",
            "decompiledFuncCode": "__int64 sub_404720()\n{\n  __int64 result; // rax\n\n  if ( byte_6142B8 )\n    return sub_405B30();\n  result = sub_405AB0(stderr);\n  if ( (_DWORD)result )\n    _exit(1);\n  return result;\n}\n"
        },
        {
            "funcName": "sub_404760",
            "funcStartAddr": "0x404760",
            "funcEndAddr": "0x404810",
            "decompiledFuncCode": "int sub_404760()\n{\n  int result; // eax\n  __int64 v1; // rbp\n  char *v2; // rbx\n  int *v3; // rax\n  __int64 v4; // rbp\n  char *v5; // rbx\n  int *v6; // rax\n\n  if ( close(0) < 0 )\n  {\n    v1 = sub_4083E0(4LL, qword_614668);\n    v2 = dcgettext(0LL, \"closing input file %s\", 5);\n    v3 = __errno_location();\n    sub_4041E0(1u, *v3, (__int64)v2, v1);\n    goto LABEL_5;\n  }\n  result = close(1);\n  if ( result < 0 )\n  {\nLABEL_5:\n    v4 = sub_4083E0(4LL, qword_614660);\n    v5 = dcgettext(0LL, \"closing output file %s\", 5);\n    v6 = __errno_location();\n    sub_4041E0(1u, *v6, (__int64)v5, v4);\n    return sub_404810();\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_404810",
            "funcStartAddr": "0x404810",
            "funcEndAddr": "0x4048a1",
            "decompiledFuncCode": "__int64 sub_404810()\n{\n  __int64 result; // rax\n  int v1; // ebx\n  sigset_t v2; // [rsp-88h] [rbp-88h] BYREF\n\n  while ( 1 )\n  {\n    if ( !sig )\n    {\n      result = (unsigned int)dword_6144EC;\n      if ( !dword_6144EC )\n        break;\n    }\n    sigprocmask(0, &set, &v2);\n    v1 = sig;\n    if ( dword_6144EC )\n      --dword_6144EC;\n    sigprocmask(2, &v2, 0LL);\n    if ( v1 )\n    {\n      sub_404760();\n      sub_4040B0();\n      raise(v1);\n    }\n    else\n    {\n      sub_4040B0();\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4048B0",
            "funcStartAddr": "0x4048b0",
            "funcEndAddr": "0x4048f8",
            "decompiledFuncCode": "__int64 __fastcall sub_4048B0(int fd2, char *file, int oflag)\n{\n  int v4; // ebx\n\n  do\n  {\n    sub_404810();\n    v4 = sub_405BD0(fd2, file, oflag);\n  }\n  while ( v4 < 0 && *__errno_location() == 4 );\n  return (unsigned int)v4;\n}\n"
        },
        {
            "funcName": "sub_404900",
            "funcStartAddr": "0x404900",
            "funcEndAddr": "0x404a0a",
            "decompiledFuncCode": "__int64 __fastcall sub_404900(int fd, void *buf, size_t nbytes)\n{\n  int v4; // edx\n  ssize_t v5; // rax\n  __int64 v6; // rbx\n  int *v7; // rax\n  unsigned __int64 v9; // r12\n  char *v10; // rax\n\n  do\n  {\n    sub_404810();\n    v5 = read(fd, buf, nbytes);\n    v6 = v5;\n    if ( v5 == -1 )\n    {\n      v7 = __errno_location();\n      v4 = *v7;\n      if ( *v7 == 22 )\n      {\n        if ( (__int64)qword_6143B8 > 0 && qword_6143B8 < nbytes && (oflag & 0x4000) != 0 )\n        {\n          *v7 = 0;\n          v6 = 0LL;\n        }\n        goto LABEL_11;\n      }\n    }\n    else\n    {\n      if ( v5 >= 0 )\n        break;\n      v4 = *__errno_location();\n    }\n  }\n  while ( v4 == 4 );\n  if ( v6 <= 0 || v6 >= nbytes )\n  {\n    if ( v6 <= 0 )\n      goto LABEL_11;\n  }\n  else\n  {\n    sub_404810();\n  }\n  if ( byte_6145A8 )\n  {\n    v9 = qword_6143B8;\n    if ( (__int64)qword_6143B8 > 0 && qword_6143B8 < nbytes )\n    {\n      if ( dword_6142BC != 1 )\n      {\n        v10 = dcngettext(\n                0LL,\n                \"warning: partial read (%lu byte); suggest iflag=fullblock\",\n                \"warning: partial read (%lu bytes); suggest iflag=fullblock\",\n                qword_6143B8,\n                5);\n        sub_4041E0(0, 0, (__int64)v10, v9);\n      }\n      byte_6145A8 = 0;\n    }\n  }\nLABEL_11:\n  qword_6143B8 = v6;\n  return v6;\n}\n"
        },
        {
            "funcName": "sub_404A10",
            "funcStartAddr": "0x404a10",
            "funcEndAddr": "0x404a71",
            "decompiledFuncCode": "__int64 __fastcall sub_404A10(int fd, char *buf, size_t nbytes)\n{\n  __int64 v3; // r12\n  size_t v5; // rbx\n  __int64 result; // rax\n\n  if ( !nbytes )\n    return 0LL;\n  v3 = 0LL;\n  v5 = nbytes;\n  while ( 1 )\n  {\n    result = sub_404900(fd, buf, v5);\n    if ( result < 0 )\n      break;\n    if ( result )\n    {\n      v3 += result;\n      buf += result;\n      v5 -= result;\n      if ( v5 )\n        continue;\n    }\n    return v3;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_404A80",
            "funcStartAddr": "0x404a80",
            "funcEndAddr": "0x404b10",
            "decompiledFuncCode": "__int64 sub_404A80()\n{\n  unsigned __int64 v0; // rbx\n  size_t v1; // rbp\n  void *v2; // rax\n  unsigned __int64 v3; // rcx\n  __int64 result; // rax\n  __int64 v5; // rbx\n  char *v6; // rax\n  __int64 v7; // [rsp+0h] [rbp-2A8h] BYREF\n\n  v0 = qword_614658;\n  v1 = qword_614650;\n  v2 = malloc(qword_614650 + 2 * qword_614658 + 3);\n  if ( v2 )\n  {\n    v3 = (unsigned __int64)v2 + v0 + 1;\n    result = v3 / v0;\n    src = (void *)(v3 - v3 % v0);\n  }\n  else\n  {\n    v5 = sub_405D70(v1, &v7, 497LL, 1LL, 1LL);\n    v6 = dcgettext(0LL, \"memory exhausted by input buffer of size %lu bytes (%s)\", 5);\n    sub_4041E0(1u, 0, (__int64)v6, v1, v5);\n    return sub_404B10();\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_404B10",
            "funcStartAddr": "0x404b10",
            "funcEndAddr": "0x404ba0",
            "decompiledFuncCode": "__int64 sub_404B10()\n{\n  unsigned __int64 v0; // rbx\n  size_t v1; // rbp\n  void *v2; // rax\n  unsigned __int64 v3; // rcx\n  __int64 result; // rax\n  __int64 v5; // rbx\n  char *v6; // rax\n  __int64 v7; // [rsp+0h] [rbp-2A8h] BYREF\n\n  v0 = qword_614658;\n  v1 = offset;\n  v2 = malloc(qword_614658 + offset - 1);\n  if ( v2 )\n  {\n    v3 = (unsigned __int64)v2 + v0 - 1;\n    result = v3 / v0;\n    s1 = (void *)(v3 - v3 % v0);\n  }\n  else\n  {\n    v5 = sub_405D70(v1, &v7, 497LL, 1LL, 1LL);\n    v6 = dcgettext(0LL, \"memory exhausted by output buffer of size %lu bytes (%s)\", 5);\n    sub_4041E0(1u, 0, (__int64)v6, v1, v5);\n    return sub_404BA0();\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_404BA0",
            "funcStartAddr": "0x404ba0",
            "funcEndAddr": "0x404be8",
            "decompiledFuncCode": "void *sub_404BA0()\n{\n  void *result; // rax\n\n  if ( !s1 )\n  {\n    if ( (dword_61460C & 0x800) != 0 )\n    {\n      return (void *)sub_404B10();\n    }\n    else\n    {\n      if ( !src )\n        sub_404A80();\n      result = src;\n      s1 = src;\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_404BF0",
            "funcStartAddr": "0x404bf0",
            "funcEndAddr": "0x404c2b",
            "decompiledFuncCode": "__int64 __fastcall sub_404BF0(__off_t length)\n{\n  int v1; // ebx\n\n  do\n  {\n    sub_404810();\n    v1 = ftruncate(1, length);\n  }\n  while ( v1 < 0 && *__errno_location() == 4 );\n  return (unsigned int)v1;\n}\n"
        },
        {
            "funcName": "sub_404C30",
            "funcStartAddr": "0x404c30",
            "funcEndAddr": "0x404e28",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_404C30(char *s1, unsigned __int64 offset, int a3, int a4, int a5, int a6)\n{\n  unsigned __int64 v7; // rbx\n  int v8; // r13d\n  _BYTE *v9; // rsi\n  size_t v10; // rdx\n  ssize_t v11; // rax\n  int v13; // eax\n  int v14; // ecx\n  int v15; // r8d\n  int v16; // r9d\n  __int64 v17; // r13\n  char *v18; // rbx\n  int *v19; // rax\n\n  if ( (dword_614604 & 0x4000) != 0 && ::offset > offset )\n  {\n    v13 = sub_4095D0(1, 3, a3, a4, a5, a6);\n    BYTE1(v13) &= ~0x40u;\n    if ( (unsigned int)sub_4095D0(1, 4, v13, v14, v15, v16) && dword_6142BC != 1 )\n    {\n      v17 = sub_4084B0(0LL, 3LL, qword_614660);\n      v18 = dcgettext(0LL, \"failed to turn off O_DIRECT: %s\", 5);\n      v19 = __errno_location();\n      sub_4041E0(0, *v19, (__int64)v18, v17);\n    }\n    byte_6144E8 = 1;\n    sub_4045A0(1, 0LL);\n    dword_61460C |= 0x8000u;\n  }\n  v7 = 0LL;\n  if ( !offset )\n    return v7;\n  while ( 1 )\n  {\n    sub_404810();\n    v8 = dword_61460C;\n    byte_614618 = 0;\n    if ( (dword_61460C & 0x10000) != 0 )\n    {\n      v9 = s1;\n      v10 = offset;\n      while ( !*v9 )\n      {\n        ++v9;\n        if ( !--v10 )\n          goto LABEL_19;\n        if ( (v10 & 0xF) == 0 )\n        {\n          if ( memcmp(s1, v9, v10) )\n            break;\nLABEL_19:\n          if ( lseek(1, offset, 1) < 0 )\n          {\n            dword_61460C = v8 & 0xFFFEFFFF;\n            break;\n          }\n          byte_614618 = 1;\n          v11 = offset;\n          if ( (offset & 0x8000000000000000LL) == 0LL )\n            goto LABEL_6;\n          if ( *__errno_location() == 4 )\n            goto LABEL_7;\n          goto LABEL_16;\n        }\n      }\n    }\n    v11 = write(1, &s1[v7], offset - v7);\n    if ( v11 >= 0 )\n      break;\n    if ( *__errno_location() != 4 )\n      goto LABEL_16;\nLABEL_7:\n    if ( offset <= v7 )\n      goto LABEL_16;\n  }\n  if ( v11 )\n  {\nLABEL_6:\n    v7 += v11;\n    goto LABEL_7;\n  }\n  *__errno_location() = 28;\nLABEL_16:\n  if ( !byte_6144EA || !v7 )\n    return v7;\n  sub_4045A0(1, v7);\n  return v7;\n}\n"
        },
        {
            "funcName": "sub_404E30",
            "funcStartAddr": "0x404e30",
            "funcEndAddr": "0x404e4d",
            "decompiledFuncCode": "void __noreturn sub_404E30()\n{\n  sub_404760();\n  sub_4040B0();\n  sub_404810();\n  exit(1);\n}\n"
        },
        {
            "funcName": "sub_404E50",
            "funcStartAddr": "0x404e50",
            "funcEndAddr": "0x404ee2",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_404E50(__int64 a1, __int64 a2, int a3, int a4, int a5, int a6)\n{\n  unsigned __int64 result; // rax\n  unsigned __int64 v7; // rbx\n  __int64 v8; // r12\n  char *v9; // rbp\n  int *v10; // rax\n\n  result = sub_404C30((char *)s1, offset, a3, a4, a5, a6);\n  qword_6145D8 += result;\n  if ( offset != result )\n  {\n    v7 = result;\n    v8 = sub_4083E0(4LL, qword_614660);\n    v9 = dcgettext(0LL, \"writing to %s\", 5);\n    v10 = __errno_location();\n    sub_4041E0(0, *v10, (__int64)v9, v8);\n    if ( v7 )\n      ++qword_6145F8;\n    sub_404E30();\n  }\n  qword_614588 = 0LL;\n  ++qword_6145F0;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_404EF0",
            "funcStartAddr": "0x404ef0",
            "funcEndAddr": "0x404ff9",
            "decompiledFuncCode": "void __fastcall sub_404EF0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, int a5, int a6)\n{\n  _BYTE *v6; // r12\n  _BYTE *v7; // rbp\n  int v8; // ecx\n  void *v9; // rsi\n  __off_t v10; // rdx\n  bool v11; // cf\n  __off_t v12; // rdx\n  int v13; // ecx\n  __int64 v14; // rsi\n  unsigned __int64 v15; // rbx\n\n  v6 = (_BYTE *)(a1 + a2);\n  if ( a2 )\n  {\n    v7 = (_BYTE *)a1;\n    do\n    {\n      while ( 1 )\n      {\n        v15 = qword_614580;\n        if ( *v7 != byte_6142BA )\n          break;\n        if ( qword_614580 < (unsigned __int64)qword_614640 )\n        {\n          do\n          {\n            v12 = qword_614588;\n            v13 = (int)s1;\n            v14 = (unsigned __int8)byte_6142B9;\n            v11 = ++qword_614588 < offset;\n            *((_BYTE *)s1 + v12) = byte_6142B9;\n            if ( !v11 )\n              sub_404E50(a1, v14, v12, v13, a5, a6);\n            ++v15;\n          }\n          while ( qword_614640 > v15 );\n        }\n        qword_614580 = 0LL;\n        if ( v6 == ++v7 )\n          return;\n      }\n      if ( qword_614580 == qword_614640 )\n      {\n        ++qword_6145A0;\n      }\n      else if ( qword_614580 < (unsigned __int64)qword_614640 )\n      {\n        v8 = qword_614588;\n        v9 = s1;\n        v10 = qword_614588 + 1;\n        v11 = qword_614588 + 1 < offset;\n        *((_BYTE *)s1 + qword_614588) = *v7;\n        qword_614588 = v10;\n        if ( !v11 )\n        {\n          sub_404E50(a1, (__int64)v9, v10, v8, a5, a6);\n          v15 = qword_614580;\n        }\n      }\n      ++v7;\n      qword_614580 = v15 + 1;\n    }\n    while ( v6 != v7 );\n  }\n}\n"
        },
        {
            "funcName": "sub_405000",
            "funcStartAddr": "0x405000",
            "funcEndAddr": "0x40514c",
            "decompiledFuncCode": "void __fastcall sub_405000(_BYTE *a1, unsigned __int64 a2, __int64 a3, __int64 a4, int a5, int a6)\n{\n  unsigned __int64 v6; // r12\n  _BYTE *v7; // rbp\n  __off_t v9; // rdx\n  int v10; // ecx\n  unsigned __int64 v11; // rsi\n  bool v12; // cf\n  char v13; // r13\n  __off_t v14; // rax\n\n  if ( a2 )\n  {\n    v6 = 0LL;\n    v7 = a1;\n    do\n    {\n      while ( 1 )\n      {\n        v12 = qword_614580 < (unsigned __int64)qword_614640;\n        v13 = v7[v6];\n        ++qword_614580;\n        if ( v12 )\n          break;\n        v9 = qword_614588;\n        v10 = (int)s1;\n        qword_6143B0 = 0LL;\n        v11 = (unsigned __int8)byte_6142BA;\n        qword_614580 = 0LL;\n        v12 = ++qword_614588 < offset;\n        *((_BYTE *)s1 + v9) = byte_6142BA;\n        if ( !v12 )\n          goto LABEL_10;\nLABEL_4:\n        if ( a2 <= v6 )\n          return;\n      }\n      v10 = (unsigned __int8)byte_6142B9;\n      ++v6;\n      if ( byte_6142B9 != v13 )\n      {\n        a1 = s1;\n        v14 = qword_614588;\n        v11 = offset;\n        if ( qword_6143B0 )\n        {\n          while ( 1 )\n          {\n            v9 = v14 + 1;\n            a1[v14] = v10;\n            qword_614588 = v14 + 1;\n            if ( v14 + 1 >= v11 )\n            {\n              sub_404E50((__int64)a1, v11, v9, v10, a5, a6);\n              a1 = s1;\n              v9 = qword_614588;\n              v11 = offset;\n            }\n            if ( !--qword_6143B0 )\n              break;\n            v10 = (unsigned __int8)byte_6142B9;\n            v14 = v9;\n          }\n        }\n        else\n        {\n          v9 = qword_614588;\n        }\n        a1[v9] = v13;\n        qword_614588 = v9 + 1;\n        if ( v9 + 1 < v11 )\n          goto LABEL_4;\nLABEL_10:\n        sub_404E50((__int64)a1, v11, v9, v10, a5, a6);\n        goto LABEL_4;\n      }\n      ++qword_6143B0;\n    }\n    while ( a2 > v6 );\n  }\n}\n"
        },
        {
            "funcName": "sub_405150",
            "funcStartAddr": "0x405150",
            "funcEndAddr": "0x40545b",
            "decompiledFuncCode": "__off_t __fastcall sub_405150(unsigned int a1, __int64 a2, unsigned __int64 a3, unsigned __int64 a4, __int64 *a5)\n{\n  unsigned __int64 v8; // r12\n  unsigned int *v9; // r15\n  __off_t v10; // r12\n  __off_t result; // rax\n  void *v12; // r12\n  __int64 (__fastcall *v13)(_QWORD, void *, unsigned __int64); // rax\n  unsigned __int64 v14; // rdx\n  __int64 v15; // rax\n  bool v16; // cf\n  __int64 v17; // rdx\n  const char *v18; // rsi\n  __int64 v19; // rbx\n  __int64 v20; // rbx\n  char *v21; // rax\n  char *v22; // rax\n  __int64 v23; // rbx\n  char *v24; // rax\n  unsigned int v26; // [rsp+Ch] [rbp-CCh]\n  struct stat stat_buf; // [rsp+10h] [rbp-C8h] BYREF\n\n  v8 = *a5;\n  v9 = (unsigned int *)__errno_location();\n  *v9 = 0;\n  if ( 0x7FFFFFFFFFFFFFFFLL / a4 < a3 )\n  {\n    if ( sub_4044D0(a2, a1, 0LL, 2) >= 0 )\n      goto LABEL_45;\n    v26 = 0;\nLABEL_8:\n    if ( a1 )\n    {\n      sub_404BA0();\n      v12 = s1;\n    }\n    else\n    {\n      if ( !src )\n        sub_404A80();\n      v12 = src;\n    }\n    while ( 1 )\n    {\n      v13 = (__int64 (__fastcall *)(_QWORD, void *, unsigned __int64))qword_6144E0;\n      v14 = a4;\n      if ( !a3 )\n        break;\n      while ( 1 )\n      {\n        v15 = v13(a1, v12, v14);\n        if ( v15 < 0 )\n        {\n          if ( !a1 )\n          {\n            v20 = sub_4083E0(4LL, a2);\n            v21 = dcgettext(0LL, \"error reading %s\", 5);\n            sub_4041E0(0, *v9, (__int64)v21, v20);\n            if ( (dword_61460C & 0x100) != 0 )\n              sub_4040B0();\nLABEL_39:\n            sub_404E30();\n          }\n          v17 = a2;\nLABEL_41:\n          v18 = \"%s: cannot seek\";\n          v19 = sub_4084B0(0LL, 3LL, v17);\nLABEL_42:\n          v22 = dcgettext(0LL, v18, 5);\n          sub_4041E0(0, v26, (__int64)v22, v19);\n          goto LABEL_39;\n        }\n        if ( !v15 )\n          return a3;\n        if ( !a1 )\n        {\n          v16 = __CFADD__(qword_6145B0, v15);\n          qword_6145B0 += v15;\n          if ( v16 )\n            byte_6145A9 = 1;\n        }\n        if ( !a3 )\n          goto LABEL_4;\n        if ( --a3 )\n          break;\n        v14 = *a5;\n        if ( !*a5 )\n          return 0LL;\n        v13 = (__int64 (__fastcall *)(_QWORD, void *, unsigned __int64))qword_6144E0;\nLABEL_22:\n        a3 = 0LL;\n      }\n    }\n    v14 = *a5;\n    goto LABEL_22;\n  }\n  v10 = a4 * a3 + v8;\n  if ( sub_4044D0(a2, a1, v10, 1) < 0 )\n  {\n    v26 = *v9;\n    if ( sub_4044D0(a2, a1, 0LL, 2) >= 0 )\n    {\n      if ( v26 )\n      {\nLABEL_25:\n        v17 = a2;\n        if ( a1 )\n          goto LABEL_41;\n        v18 = (const char *)&unk_40DBF2;\n        v19 = sub_4084B0(0LL, 3LL, a2);\n        goto LABEL_42;\n      }\nLABEL_45:\n      v26 = 75;\n      goto LABEL_25;\n    }\n    goto LABEL_8;\n  }\n  if ( a1 )\n  {\nLABEL_4:\n    *a5 = 0LL;\n    return 0LL;\n  }\n  else if ( __fxstat(1, 0, &stat_buf) )\n  {\n    v23 = sub_4083E0(4LL, a2);\n    v24 = dcgettext(0LL, \"cannot fstat %s\", 5);\n    sub_4041E0(1u, *v9, (__int64)v24, v23);\n    return 0LL;\n  }\n  else\n  {\n    result = 0LL;\n    if ( (stat_buf.st_mode & 0xD000) == 0x8000 && stat_buf.st_size < (unsigned __int64)(v10 + qword_6145B0) )\n    {\n      result = (v10 - stat_buf.st_size) / a4;\n      v10 = stat_buf.st_size - qword_6145B0;\n    }\n    v16 = __CFADD__(qword_6145B0, v10);\n    qword_6145B0 += v10;\n    if ( v16 )\n      byte_6145A9 = 1;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_405460",
            "funcStartAddr": "0x405460",
            "funcEndAddr": "0x4059cd",
            "decompiledFuncCode": "void __fastcall __noreturn sub_405460(int status)\n{\n  __int64 v1; // rbp\n  char *v2; // rax\n  char *v3; // rax\n  FILE *v4; // rbp\n  char *v5; // rax\n  FILE *v6; // rbp\n  char *v7; // rax\n  FILE *v8; // rbp\n  char *v9; // rax\n  FILE *v10; // rbp\n  char *v11; // rax\n  FILE *v12; // rbp\n  char *v13; // rax\n  FILE *v14; // rbp\n  char *v15; // rax\n  FILE *v16; // rbp\n  char *v17; // rax\n  FILE *v18; // rbp\n  char *v19; // rax\n  FILE *v20; // rbp\n  char *v21; // rax\n  FILE *v22; // rbp\n  char *v23; // rax\n  FILE *v24; // rbp\n  char *v25; // rax\n  FILE *v26; // rbp\n  char *v27; // rax\n  FILE *v28; // rbp\n  char *v29; // rax\n  FILE *v30; // rbp\n  char *v31; // rax\n  FILE *v32; // rbp\n  char *v33; // rax\n  FILE *v34; // rbp\n  char *v35; // rax\n  FILE *v36; // rbp\n  char *v37; // rax\n  FILE *v38; // rbp\n  char *v39; // rax\n  char *v40; // rax\n  __int64 v41; // rcx\n  FILE *v42; // rbp\n  char *v43; // rax\n  FILE *v44; // rbp\n  char *v45; // rax\n  __int64 *v46; // rax\n  char *v47; // rbp\n  char *v48; // rax\n  char *v49; // rax\n  const char *v50; // r12\n  char *v51; // rax\n  char *v52; // rax\n  char *v53; // rax\n  char *v54; // rax\n  char *v55; // rax\n  char *v56; // rax\n  __int64 v57; // rcx\n  __int64 v58[17]; // [rsp+0h] [rbp-88h] BYREF\n\n  v1 = qword_614680;\n  if ( status )\n  {\n    v2 = dcgettext(0LL, \"Try '%s --help' for more information.\\n\", 5);\n    __fprintf_chk(stderr, 1LL, v2, v1);\n    goto LABEL_3;\n  }\n  v3 = dcgettext(0LL, \"Usage: %s [OPERAND]...\\n  or:  %s OPTION\\n\", 5);\n  __printf_chk(1LL, v3, v1, v1);\n  v4 = stdout;\n  v5 = dcgettext(\n         0LL,\n         \"Copy a file, converting and formatting according to the operands.\\n\"\n         \"\\n\"\n         \"  bs=BYTES        read and write up to BYTES bytes at a time (default: 512);\\n\"\n         \"                  overrides ibs and obs\\n\"\n         \"  cbs=BYTES       convert BYTES bytes at a time\\n\"\n         \"  conv=CONVS      convert the file as per the comma separated symbol list\\n\"\n         \"  count=N         copy only N input blocks\\n\"\n         \"  ibs=BYTES       read up to BYTES bytes at a time (default: 512)\\n\",\n         5);\n  fputs_unlocked(v5, v4);\n  v6 = stdout;\n  v7 = dcgettext(\n         0LL,\n         \"  if=FILE         read from FILE instead of stdin\\n\"\n         \"  iflag=FLAGS     read as per the comma separated symbol list\\n\"\n         \"  obs=BYTES       write BYTES bytes at a time (default: 512)\\n\"\n         \"  of=FILE         write to FILE instead of stdout\\n\"\n         \"  oflag=FLAGS     write as per the comma separated symbol list\\n\"\n         \"  seek=N          skip N obs-sized blocks at start of output\\n\"\n         \"  skip=N          skip N ibs-sized blocks at start of input\\n\"\n         \"  status=LEVEL    The LEVEL of information to print to stderr;\\n\"\n         \"                  'none' suppresses everything but error messages,\\n\"\n         \"                  'noxfer' suppresses the final transfer statistics,\\n\"\n         \"                  'progress' shows periodic transfer statistics\\n\",\n         5);\n  fputs_unlocked(v7, v6);\n  v8 = stdout;\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"N and BYTES may be followed by the following multiplicative suffixes:\\n\"\n         \"c =1, w =2, b =512, kB =1000, K =1024, MB =1000*1000, M =1024*1024, xM =M,\\n\"\n         \"GB =1000*1000*1000, G =1024*1024*1024, and so on for T, P, E, Z, Y.\\n\"\n         \"\\n\"\n         \"Each CONV symbol may be:\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, v8);\n  v10 = stdout;\n  v11 = dcgettext(\n          0LL,\n          \"  ascii     from EBCDIC to ASCII\\n\"\n          \"  ebcdic    from ASCII to EBCDIC\\n\"\n          \"  ibm       from ASCII to alternate EBCDIC\\n\"\n          \"  block     pad newline-terminated records with spaces to cbs-size\\n\"\n          \"  unblock   replace trailing spaces in cbs-size records with newline\\n\"\n          \"  lcase     change upper case to lower case\\n\"\n          \"  ucase     change lower case to upper case\\n\"\n          \"  sparse    try to seek rather than write the output for NUL input blocks\\n\"\n          \"  swab      swap every pair of input bytes\\n\"\n          \"  sync      pad every input block with NULs to ibs-size; when used\\n\"\n          \"            with block or unblock, pad with spaces rather than NULs\\n\",\n          5);\n  fputs_unlocked(v11, v10);\n  v12 = stdout;\n  v13 = dcgettext(\n          0LL,\n          \"  excl      fail if the output file already exists\\n\"\n          \"  nocreat   do not create the output file\\n\"\n          \"  notrunc   do not truncate the output file\\n\"\n          \"  noerror   continue after read errors\\n\"\n          \"  fdatasync  physically write output file data before finishing\\n\"\n          \"  fsync     likewise, but also write metadata\\n\",\n          5);\n  fputs_unlocked(v13, v12);\n  v14 = stdout;\n  v15 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"Each FLAG symbol may be:\\n\"\n          \"\\n\"\n          \"  append    append mode (makes sense only for output; conv=notrunc suggested)\\n\",\n          5);\n  fputs_unlocked(v15, v14);\n  v16 = stdout;\n  v17 = dcgettext(0LL, \"  direct    use direct I/O for data\\n\", 5);\n  fputs_unlocked(v17, v16);\n  v18 = stdout;\n  v19 = dcgettext(0LL, \"  directory  fail unless a directory\\n\", 5);\n  fputs_unlocked(v19, v18);\n  v20 = stdout;\n  v21 = dcgettext(0LL, \"  dsync     use synchronized I/O for data\\n\", 5);\n  fputs_unlocked(v21, v20);\n  v22 = stdout;\n  v23 = dcgettext(0LL, \"  sync      likewise, but also for metadata\\n\", 5);\n  fputs_unlocked(v23, v22);\n  v24 = stdout;\n  v25 = dcgettext(0LL, \"  fullblock  accumulate full blocks of input (iflag only)\\n\", 5);\n  fputs_unlocked(v25, v24);\n  v26 = stdout;\n  v27 = dcgettext(0LL, \"  nonblock  use non-blocking I/O\\n\", 5);\n  fputs_unlocked(v27, v26);\n  v28 = stdout;\n  v29 = dcgettext(0LL, \"  noatime   do not update access time\\n\", 5);\n  fputs_unlocked(v29, v28);\n  v30 = stdout;\n  v31 = dcgettext(0LL, \"  nocache   Request to drop cache.  See also oflag=sync\\n\", 5);\n  fputs_unlocked(v31, v30);\n  v32 = stdout;\n  v33 = dcgettext(0LL, \"  noctty    do not assign controlling terminal from file\\n\", 5);\n  fputs_unlocked(v33, v32);\n  v34 = stdout;\n  v35 = dcgettext(0LL, \"  count_bytes  treat 'count=N' as a byte count (iflag only)\\n\", 5);\n  fputs_unlocked(v35, v34);\n  v36 = stdout;\n  v37 = dcgettext(0LL, \"  skip_bytes  treat 'skip=N' as a byte count (iflag only)\\n\", 5);\n  fputs_unlocked(v37, v36);\n  v38 = stdout;\n  v39 = dcgettext(0LL, \"  seek_bytes  treat 'seek=N' as a byte count (oflag only)\\n\", 5);\n  fputs_unlocked(v39, v38);\n  v40 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"Sending a %s signal to a running 'dd' process makes it\\n\"\n          \"print I/O statistics to standard error and then resume copying.\\n\"\n          \"\\n\"\n          \"Options are:\\n\"\n          \"\\n\",\n          5);\n  __printf_chk(1LL, v40, \"USR1\", v41);\n  v42 = stdout;\n  v43 = dcgettext(0LL, \"      --help     display this help and exit\\n\", 5);\n  fputs_unlocked(v43, v42);\n  v44 = stdout;\n  v45 = dcgettext(0LL, \"      --version  output version information and exit\\n\", 5);\n  fputs_unlocked(v45, v44);\n  v58[0] = (__int64)\"[\";\n  v46 = v58;\n  v58[1] = (__int64)\"test invocation\";\n  v58[2] = (__int64)\"coreutils\";\n  v58[3] = (__int64)\"Multi-call invocation\";\n  v58[4] = (__int64)\"sha224sum\";\n  v58[5] = (__int64)\"sha2 utilities\";\n  v58[6] = (__int64)\"sha256sum\";\n  v58[7] = (__int64)\"sha2 utilities\";\n  v58[8] = (__int64)\"sha384sum\";\n  v58[9] = (__int64)\"sha2 utilities\";\n  v58[10] = (__int64)\"sha512sum\";\n  v58[11] = (__int64)\"sha2 utilities\";\n  v58[12] = 0LL;\n  v58[13] = 0LL;\n  do\n    v46 += 2;\n  while ( *v46 && strcmp(\"dd\", (const char *)*v46) );\n  v47 = (char *)v46[1];\n  if ( v47 )\n  {\n    v48 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v48, &unk_40DCA1, \"https://www.gnu.org/software/coreutils/\");\n    v49 = setlocale(5, 0LL);\n    if ( !v49 || !strncmp(v49, \"en_\", 3uLL) )\n      goto LABEL_10;\n  }\n  else\n  {\n    v53 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v53, &unk_40DCA1, \"https://www.gnu.org/software/coreutils/\");\n    v54 = setlocale(5, 0LL);\n    if ( !v54 || !strncmp(v54, \"en_\", 3uLL) )\n    {\n      v47 = \"dd\";\n      v55 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n      v50 = \"Multi-call invocation\" + 10;\n      __printf_chk(1LL, v55, \"https://www.gnu.org/software/coreutils/\", \"dd\");\nLABEL_12:\n      v52 = dcgettext(0LL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5);\n      __printf_chk(1LL, v52, v47, v50);\nLABEL_3:\n      exit(status);\n    }\n    v47 = \"dd\";\n  }\n  v56 = dcgettext(0LL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5);\n  __printf_chk(1LL, v56, \"dd\", v57);\nLABEL_10:\n  v50 = \"Multi-call invocation\" + 10;\n  v51 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n  __printf_chk(1LL, v51, \"https://www.gnu.org/software/coreutils/\", \"dd\");\n  if ( v47 != \"dd\" )\n    v50 = \"\";\n  goto LABEL_12;\n}\n"
        },
        {
            "funcName": "sub_4059D0",
            "funcStartAddr": "0x4059d0",
            "funcEndAddr": "0x405aa9",
            "decompiledFuncCode": "__int64 __fastcall sub_4059D0(char *s, __int64 a2, char a3, const char *a4)\n{\n  unsigned int v8; // ebx\n  char *v9; // rax\n  __int64 v10; // rdi\n  __int64 v11; // rdx\n  char v12; // cl\n  char v13; // si\n  unsigned int v14; // edx\n  int v15; // ebx\n  size_t v17; // rax\n  const char *v18; // rbx\n  char *v19; // rax\n\n  v8 = 0;\n  while ( 2 )\n  {\n    v9 = strchr(s, 44);\n    v10 = a2;\nLABEL_3:\n    v11 = 0LL;\n    while ( 1 )\n    {\n      v12 = *(_BYTE *)(v10 + v11);\n      v13 = s[v11];\n      if ( !v12 )\n        break;\n      ++v11;\n      if ( v12 != v13 )\n      {\nLABEL_9:\n        if ( !*(_BYTE *)v10 )\n        {\n          if ( v9 )\n            v17 = v9 - s;\n          else\n            v17 = strlen(s);\n          v18 = (const char *)sub_408370(0LL, 8LL, s, v17);\n          v19 = dcgettext(0LL, a4, 5);\n          sub_4041E0(0, 0, (__int64)\"%s: %s\", v19, v18);\n          sub_405460(1);\n        }\n        v10 += 16LL;\n        goto LABEL_3;\n      }\n    }\n    if ( v13 != 44 && v13 )\n      goto LABEL_9;\n    v14 = *(_DWORD *)(v10 + 12);\n    if ( !v14 )\n      goto LABEL_9;\n    v15 = v14 | v8;\n    if ( !a3 )\n      v14 = v15;\n    if ( v9 )\n    {\n      s = v9 + 1;\n      v8 = v14;\n      continue;\n    }\n    return v14;\n  }\n}\n"
        },
        {
            "funcName": "sub_405AB0",
            "funcStartAddr": "0x405ab0",
            "funcEndAddr": "0x405b0d",
            "decompiledFuncCode": "__int64 __fastcall sub_405AB0(FILE *stream)\n{\n  size_t v1; // r12\n  int v2; // ebx\n  __int64 result; // rax\n\n  v1 = __fpending(stream);\n  v2 = stream->_flags & 0x20;\n  result = sub_409550(stream);\n  if ( v2 )\n  {\n    if ( !(_DWORD)result )\n    {\n      *__errno_location() = 0;\n      return 0xFFFFFFFFLL;\n    }\n    return 0xFFFFFFFFLL;\n  }\n  if ( !(_DWORD)result )\n    return result;\n  if ( v1 )\n    return 0xFFFFFFFFLL;\n  return (unsigned int)-(*__errno_location() != 9);\n}\n"
        },
        {
            "funcName": "sub_405B30",
            "funcStartAddr": "0x405b30",
            "funcEndAddr": "0x405bce",
            "decompiledFuncCode": "__int64 sub_405B30()\n{\n  int *v0; // rax\n  int *v1; // rbx\n  __int64 result; // rax\n  char *v3; // rax\n  const char *v4; // rbp\n  const char *v5; // rax\n\n  if ( (unsigned int)sub_405AB0(stdout) )\n  {\n    v0 = __errno_location();\n    v1 = v0;\n    if ( !byte_614670 || *v0 != 32 )\n    {\n      v3 = dcgettext(0LL, \"write error\", 5);\n      v4 = v3;\n      if ( qword_614678 )\n      {\n        v5 = (const char *)sub_408480();\n        error(0, *v1, \"%s: %s\", v5, v4);\n      }\n      else\n      {\n        error(0, *v1, \"%s\", v3);\n      }\nLABEL_8:\n      _exit(status);\n    }\n  }\n  result = sub_405AB0(stderr);\n  if ( (_DWORD)result )\n    goto LABEL_8;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_405BD0",
            "funcStartAddr": "0x405bd0",
            "funcEndAddr": "0x405c3a",
            "decompiledFuncCode": "__int64 __fastcall sub_405BD0(int fd2, char *file, int oflag, unsigned int a4)\n{\n  __int64 result; // rax\n  int v5; // ebx\n  unsigned int v6; // r12d\n  int *v7; // rax\n  int v8; // r13d\n  int *v9; // rbp\n\n  LODWORD(result) = open(file, oflag, a4);\n  v5 = result;\n  if ( fd2 == (_DWORD)result || (int)result < 0 )\n    return (unsigned int)result;\n  v6 = dup2(result, fd2);\n  v7 = __errno_location();\n  v8 = *v7;\n  v9 = v7;\n  close(v5);\n  result = v6;\n  *v9 = v8;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_405C40",
            "funcStartAddr": "0x405c40",
            "funcEndAddr": "0x405c6f",
            "decompiledFuncCode": "__syscall_slong_t sub_405C40()\n{\n  struct timespec v1; // [rsp+0h] [rbp-18h] BYREF\n\n  if ( clock_gettime(1, &v1) )\n    sub_405C70(&v1);\n  return v1.tv_nsec + 1000000000 * v1.tv_sec;\n}\n"
        },
        {
            "funcName": "sub_405C70",
            "funcStartAddr": "0x405c70",
            "funcEndAddr": "0x405caa",
            "decompiledFuncCode": "int __fastcall sub_405C70(struct timespec *tp)\n{\n  int result; // eax\n  struct timeval v2; // [rsp+0h] [rbp-18h] BYREF\n\n  result = clock_gettime(0, tp);\n  if ( result )\n  {\n    gettimeofday(&v2, 0LL);\n    tp->tv_sec = v2.tv_sec;\n    result = 1000 * LODWORD(v2.tv_usec);\n    tp->tv_nsec = 1000 * v2.tv_usec;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_405CB0",
            "funcStartAddr": "0x405cb0",
            "funcEndAddr": "0x405d67",
            "decompiledFuncCode": "long double __fastcall sub_405CB0(int a1, long double a2)\n{\n  unsigned __int64 v7; // rax\n  long double v8; // fst6\n  long double result; // fst7\n\n  if ( a2 >= 9.223372e18 )\n    v7 = (__int64)(a2 - 9.223372e18) ^ 0x8000000000000000LL;\n  else\n    v7 = (__int64)a2;\n  v8 = (long double)v7;\n  if ( a1 )\n    return v8;\n  result = v8;\n  if ( a2 != v8 )\n    return (long double)(v7 + 1);\n  return result;\n}\n"
        },
        {
            "funcName": "sub_405D70",
            "funcStartAddr": "0x405d70",
            "funcEndAddr": "0x40673e",
            "decompiledFuncCode": "char *__fastcall sub_405D70(__int64 a1, __int64 a2, __int16 a3, unsigned __int64 a4, unsigned __int64 a5)\n{\n  struct lconv *v7; // rax\n  const char *decimal_point; // r15\n  struct lconv *v9; // r12\n  size_t v10; // r8\n  char *grouping; // rax\n  const char *thousands_sep; // r12\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rsi\n  long double v15; // fst7\n  long double v16; // fst6\n  long double v17; // fst7\n  long double v18; // fst6\n  long double v19; // fst7\n  long double v20; // fst6\n  int v21; // ebx\n  long double v22; // fst5\n  long double v23; // fst4\n  long double v24; // fst7\n  long double v25; // fst6\n  long double v26; // fst7\n  size_t v27; // r14\n  long double v28; // fst7\n  unsigned __int64 v29; // r15\n  long double v30; // fst6\n  size_t v31; // rax\n  long double v32; // fst6\n  long double v33; // fst7\n  size_t v34; // r14\n  char *v35; // r15\n  char *v36; // r14\n  int v37; // eax\n  unsigned __int64 v39; // rcx\n  unsigned __int64 v40; // rtt\n  unsigned __int64 v41; // rdx\n  int v42; // r9d\n  int v43; // edi\n  int v44; // ecx\n  char *v45; // rbp\n  unsigned __int8 *v46; // r15\n  size_t v47; // rbx\n  size_t v48; // rbp\n  unsigned __int8 v49; // dl\n  size_t v50; // rax\n  size_t v51; // rbp\n  char *v52; // r14\n  unsigned __int64 v53; // rax\n  char *v54; // rdx\n  unsigned __int64 v55; // r11\n  int v56; // eax\n  unsigned int v57; // edx\n  unsigned int v58; // edi\n  bool v59; // dl\n  char v60; // al\n  unsigned __int64 v61; // r9\n  unsigned int v62; // edx\n  __int64 v63; // rdi\n  unsigned __int64 v64; // rcx\n  signed __int64 v65; // r15\n  unsigned int v66; // edx\n  __int64 v67; // rsi\n  char *v68; // [rsp+10h] [rbp-A8h]\n  int v71; // [rsp+24h] [rbp-94h]\n  int v72; // [rsp+24h] [rbp-94h]\n  size_t v74; // [rsp+30h] [rbp-88h]\n  long double v75; // [rsp+30h] [rbp-88h]\n  float v76; // [rsp+30h] [rbp-88h]\n  size_t v77; // [rsp+30h] [rbp-88h]\n  long double v78; // [rsp+30h] [rbp-88h]\n  int v79; // [rsp+40h] [rbp-78h]\n  unsigned int v80; // [rsp+44h] [rbp-74h]\n  char *v81; // [rsp+48h] [rbp-70h]\n  char src[104]; // [rsp+50h] [rbp-68h] BYREF\n\n  v79 = a3 & 0x20;\n  v71 = a3 & 3;\n  v80 = v79 == 0 ? 1000 : 1024;\n  v7 = localeconv();\n  decimal_point = v7->decimal_point;\n  v9 = v7;\n  v10 = strlen(v7->decimal_point);\n  if ( v10 - 1 >= 0x10 )\n    decimal_point = \".\";\n  grouping = v9->grouping;\n  thousands_sep = v9->thousands_sep;\n  if ( v10 - 1 >= 0x10 )\n    v10 = 1LL;\n  v74 = v10;\n  v81 = grouping;\n  if ( strlen(thousands_sep) >= 0x11 )\n    thousands_sep = \"\";\n  v68 = (char *)(a2 + 647);\n  if ( a5 > a4 )\n  {\n    if ( !a4 || (v39 = a5 / a4, a5 % a4) )\n    {\nLABEL_10:\n      v15 = (long double)a4;\n      v16 = (long double)(__int64)a5;\n      if ( (a5 & 0x8000000000000000LL) != 0LL )\n      {\n        v17 = v15 / (v16 + 1.8446744e19);\n        v18 = (long double)a1;\n        if ( a1 >= 0 )\n        {\nLABEL_12:\n          v19 = v17 * v18;\n          if ( (a3 & 0x10) != 0 )\n          {\nLABEL_13:\n            v20 = (long double)(int)v80;\n            v21 = 0;\n            v22 = v20;\n            while ( 1 )\n            {\n              ++v21;\n              v23 = v19;\n              v24 = v22 * v20;\n              if ( v23 < v24 )\n                break;\n              if ( v21 == 8 )\n              {\n                v25 = v23;\n                v26 = v22;\n                goto LABEL_19;\n              }\n              v22 = v24;\n              v19 = v23;\n            }\n            v25 = v23;\n            v26 = v22;\nLABEL_19:\n            v27 = v74 + 1;\n            v28 = v25 / v26;\n            v29 = v74 + 1 + (v79 == 0) + 1;\n            if ( v71 == 1 )\n            {\n              __sprintf_chk(a2, 1LL, -1LL, \"%.1Lf\", v28);\n              v31 = strlen((const char *)a2);\n              if ( v31 > v29 )\n              {\n                v32 = 10.0;\n                v33 = v28 * 10.0;\n                goto LABEL_26;\n              }\n            }\n            else\n            {\n              if ( v28 < 1.8446744073709551615e19 )\n              {\n                v78 = v28;\n                v28 = sub_405CB0(v71, v28);\n                v30 = v78;\n              }\n              else\n              {\n                v30 = v28;\n              }\n              v75 = v30;\n              __sprintf_chk(a2, 1LL, -1LL, \"%.1Lf\", v28);\n              v31 = strlen((const char *)a2);\n              v28 = v30;\n              if ( v31 > v29 )\n              {\n                v32 = 10.0;\n                v33 = v75 * 10.0;\nLABEL_24:\n                if ( v33 < 1.8446744073709551615e19 )\n                {\n                  v76 = v32;\n                  v33 = sub_405CB0(v71, v33);\n                  v32 = v76;\n                }\n                goto LABEL_26;\n              }\n            }\n            if ( (a3 & 8) == 0 || *(_BYTE *)(a2 + v31 - 1) != 48 )\n            {\n              v34 = v31 - v27;\n              goto LABEL_31;\n            }\n            v32 = 10.0;\n            v33 = v28 * 10.0;\n            if ( v71 != 1 )\n              goto LABEL_24;\nLABEL_26:\n            __sprintf_chk(a2, 1LL, -1LL, \"%.0Lf\", v33 / v32);\n            v31 = strlen((const char *)a2);\n            v34 = v31;\nLABEL_31:\n            v35 = &v68[-v31];\n            v36 = &v68[v34 - v31];\n            memmove(&v68[-v31], (const void *)a2, v31);\n            goto LABEL_32;\n          }\nLABEL_27:\n          if ( v71 != 1 && v19 < 1.8446744073709551615e19 )\n            v19 = sub_405CB0(v71, v19);\n          __sprintf_chk(a2, 1LL, -1LL, \"%.0Lf\", v19);\n          v21 = -1;\n          v31 = strlen((const char *)a2);\n          v34 = v31;\n          goto LABEL_31;\n        }\n      }\n      else\n      {\n        v17 = v15 / v16;\n        v18 = (long double)a1;\n        if ( a1 >= 0 )\n          goto LABEL_12;\n      }\n      v19 = v17 * (v18 + 1.8446744e19);\n      if ( (a3 & 0x10) != 0 )\n        goto LABEL_13;\n      goto LABEL_27;\n    }\n    v14 = a1 / v39;\n    v40 = 10 * (a1 % v39);\n    v41 = 2 * (v40 % v39);\n    v42 = v40 / v39;\n    if ( v39 <= v41 )\n      v43 = (v39 < v41) + 2;\n    else\n      v43 = v41 != 0;\n    v44 = a3 & 0x10;\n    if ( (a3 & 0x10) == 0 )\n      goto LABEL_85;\n  }\n  else\n  {\n    v13 = a4 / a5;\n    if ( a4 % a5 )\n      goto LABEL_10;\n    v14 = a1 * v13;\n    if ( a1 * v13 / (a4 / a5) != a1 )\n      goto LABEL_10;\n    v43 = 0;\n    v42 = 0;\n    v44 = a3 & 0x10;\n    if ( (a3 & 0x10) == 0 )\n    {\nLABEL_85:\n      v21 = -1;\n      goto LABEL_47;\n    }\n  }\n  v21 = 0;\n  if ( v80 <= v14 )\n  {\n    while ( 1 )\n    {\n      v55 = v14 / v80;\n      v56 = (v42 + 10 * (v14 % v80)) / v80;\n      v57 = (v43 >> 1) + 2 * ((v42 + 10 * (v14 % v80)) % v80);\n      v42 = v56;\n      v14 = v55;\n      v58 = v57 + v43;\n      v43 = v80 > v57 ? v58 != 0 : (v80 < v58) + 2;\n      ++v21;\n      if ( v80 > v55 )\n        break;\n      if ( v21 == 8 )\n        goto LABEL_47;\n    }\n    if ( v55 <= 9 )\n    {\n      if ( v71 == 1 )\n        v59 = v43 + (v56 & 1) > 2;\n      else\n        v59 = v43 > 0 && v71 == 0;\n      if ( v59 )\n      {\n        if ( ++v56 == 10 )\n        {\n          v14 = v55 + 1;\n          if ( v55 == 9 )\n          {\n            v36 = v68;\nLABEL_114:\n            v43 = 0;\n            goto LABEL_115;\n          }\n          v43 = 0;\n          goto LABEL_107;\n        }\n      }\n      else if ( !v56 )\n      {\nLABEL_107:\n        v36 = v68;\n        if ( (a3 & 8) != 0 )\n        {\nLABEL_115:\n          if ( v71 == 1 )\n            goto LABEL_52;\n          v42 = 0;\n          goto LABEL_48;\n        }\n        v60 = 48;\n        goto LABEL_109;\n      }\n      v60 = v56 + 48;\nLABEL_109:\n      *(_BYTE *)(a2 + 646) = v60;\n      v36 = (char *)(a2 + 646 - v74);\n      if ( (unsigned int)v74 >= 8 )\n      {\n        v61 = (unsigned __int64)(v36 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n        *(_QWORD *)v36 = *(_QWORD *)decimal_point;\n        *(_QWORD *)&v36[(unsigned int)v74 - 8] = *(_QWORD *)&decimal_point[(unsigned int)v74 - 8];\n        if ( (((_DWORD)a2 + 646 - (_DWORD)v61) & 0xFFFFFFF8) >= 8 )\n        {\n          v62 = 0;\n          do\n          {\n            v63 = v62;\n            v62 += 8;\n            *(_QWORD *)(v61 + v63) = *(_QWORD *)(decimal_point - &v36[-v61] + v63);\n          }\n          while ( v62 < (((_DWORD)a2 + 646 - (_DWORD)v61) & 0xFFFFFFF8) );\n        }\n      }\n      else if ( (v74 & 4) != 0 )\n      {\n        *(_DWORD *)v36 = *(_DWORD *)decimal_point;\n        *(_DWORD *)&v36[(unsigned int)v74 - 4] = *(_DWORD *)&decimal_point[(unsigned int)v74 - 4];\n      }\n      else if ( (_DWORD)v74 )\n      {\n        *v36 = *decimal_point;\n        if ( (v74 & 2) != 0 )\n          *(_WORD *)&v36[(unsigned int)v74 - 2] = *(_WORD *)&decimal_point[(unsigned int)v74 - 2];\n      }\n      goto LABEL_114;\n    }\n  }\nLABEL_47:\n  v36 = v68;\n  if ( v71 == 1 )\n  {\n    if ( (v43 + (v14 & 1) != 0) + v42 <= 5 )\n      goto LABEL_52;\n    v36 = v68;\n    goto LABEL_50;\n  }\nLABEL_48:\n  if ( v71 || v42 + v43 <= 0 )\n  {\nLABEL_52:\n    v35 = v36;\n    while ( 1 )\n    {\n      *--v35 = v14 % 0xA + 48;\n      if ( v14 <= 9 )\n        break;\n      v14 /= 0xAuLL;\n    }\n    if ( (a3 & 4) == 0 )\n      goto LABEL_33;\n    goto LABEL_56;\n  }\nLABEL_50:\n  ++v14;\n  if ( !v44 || v80 != v14 || v21 == 8 )\n    goto LABEL_52;\n  ++v21;\n  if ( (a3 & 8) == 0 )\n  {\n    *(v36 - 1) = 48;\n    v36 += ~v74;\n    if ( (unsigned int)v74 >= 8 )\n    {\n      v64 = (unsigned __int64)(v36 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n      *(_QWORD *)v36 = *(_QWORD *)decimal_point;\n      *(_QWORD *)&v36[(unsigned int)v74 - 8] = *(_QWORD *)&decimal_point[(unsigned int)v74 - 8];\n      v65 = decimal_point - &v36[-v64];\n      if ( (((_DWORD)v74 + (_DWORD)v36 - (_DWORD)v64) & 0xFFFFFFF8) >= 8 )\n      {\n        v66 = 0;\n        do\n        {\n          v67 = v66;\n          v66 += 8;\n          *(_QWORD *)(v64 + v67) = *(_QWORD *)(v65 + v67);\n        }\n        while ( v66 < (((_DWORD)v74 + (_DWORD)v36 - (_DWORD)v64) & 0xFFFFFFF8) );\n      }\n    }\n    else if ( (v74 & 4) != 0 )\n    {\n      *(_DWORD *)v36 = *(_DWORD *)decimal_point;\n      *(_DWORD *)&v36[(unsigned int)v74 - 4] = *(_DWORD *)&decimal_point[(unsigned int)v74 - 4];\n    }\n    else if ( (_DWORD)v74 )\n    {\n      *v36 = *decimal_point;\n      if ( (v74 & 2) != 0 )\n        *(_WORD *)&v36[(unsigned int)v74 - 2] = *(_WORD *)&decimal_point[(unsigned int)v74 - 2];\n    }\n  }\n  v35 = v36 - 1;\n  *(v36 - 1) = 49;\nLABEL_32:\n  if ( (a3 & 4) == 0 )\n    goto LABEL_33;\nLABEL_56:\n  v45 = (char *)(v36 - v35);\n  v77 = strlen(thousands_sep);\n  __memcpy_chk(src, v35, v36 - v35, 41LL);\n  v72 = v21;\n  v46 = (unsigned __int8 *)v81;\n  v47 = (size_t)v45;\n  v48 = -1LL;\n  while ( 1 )\n  {\n    v49 = *v46;\n    if ( *v46 )\n    {\n      v50 = v49;\n      if ( v49 >= 0x7Fu )\n        v50 = v47;\n      ++v46;\n      v48 = v50;\n    }\n    if ( v48 > v47 )\n    {\n      v51 = v47;\n      v21 = v72;\n      v35 = &v36[-v51];\n      memcpy(&v36[-v51], src, v51);\n      goto LABEL_33;\n    }\n    v52 = &v36[-v48];\n    v47 -= v48;\n    memcpy(v52, &src[v47], v48);\n    if ( !v47 )\n      break;\n    v36 = &v52[-v77];\n    memcpy(v36, thousands_sep, v77);\n  }\n  v21 = v72;\n  v35 = v52;\nLABEL_33:\n  if ( (a3 & 0x80u) != 0 )\n  {\n    if ( v21 == -1 )\n    {\n      if ( a5 > 1 )\n      {\n        v21 = 1;\n        v53 = 1LL;\n        do\n        {\n          v53 *= v80;\n          if ( a5 <= v53 )\n            break;\n          ++v21;\n        }\n        while ( v21 != 8 );\n        v37 = a3 & 0x100;\n        if ( (a3 & 0x40) == 0 )\n          goto LABEL_72;\n        goto LABEL_70;\n      }\n      v21 = 0;\n    }\n    v37 = a3 & 0x100;\n    if ( !(v21 | v37) )\n      goto LABEL_36;\n    if ( (a3 & 0x40) == 0 )\n    {\nLABEL_71:\n      if ( !v21 )\n      {\n        v54 = v68;\n        if ( !v37 )\n          goto LABEL_36;\n        goto LABEL_77;\n      }\nLABEL_72:\n      if ( !v79 && v21 == 1 )\n      {\n        v54 = v68 + 1;\n        *v68 = 107;\n        if ( v37 )\n        {\nLABEL_77:\n          *v54 = 66;\n          v68 = v54 + 1;\n          goto LABEL_36;\n        }\n      }\n      else\n      {\n        v54 = v68 + 1;\n        *v68 = byte_40F728[v21];\n        if ( v37 )\n        {\n          if ( v79 )\n          {\n            v54 = v68 + 2;\n            v68[1] = 105;\n          }\n          goto LABEL_77;\n        }\n      }\n      v68 = v54;\n      goto LABEL_36;\n    }\nLABEL_70:\n    *(_BYTE *)(a2 + 647) = 32;\n    v68 = (char *)(a2 + 648);\n    goto LABEL_71;\n  }\nLABEL_36:\n  *v68 = 0;\n  return v35;\n}\n"
        },
        {
            "funcName": "sub_406740",
            "funcStartAddr": "0x406740",
            "funcEndAddr": "0x4068f7",
            "decompiledFuncCode": "__int64 __fastcall sub_406740(char *nptr, int *a2, __int64 *a3)\n{\n  char *v4; // rbx\n  int v5; // ebp\n  int v6; // eax\n  int v7; // ebp\n  __int64 result; // rax\n  __int64 v9; // rdx\n  char *v10; // [rsp+8h] [rbp-30h]\n\n  v4 = nptr;\n  if ( nptr || (v4 = getenv(\"BLOCK_SIZE\")) != 0LL || (v4 = getenv(\"BLOCKSIZE\")) != 0LL )\n  {\n    v5 = 0;\n    if ( *v4 == 39 )\n    {\n      ++v4;\n      v5 = 4;\n    }\n    v6 = sub_40A670(v4, off_40F710, dword_40F700, 4LL);\n    if ( v6 >= 0 )\n    {\n      *a3 = 1LL;\n      v7 = dword_40F700[v6] | v5;\n      result = 0LL;\n      *a2 = v7;\n      return result;\n    }\n    result = sub_408F50(v4);\n    if ( (_DWORD)result )\n    {\n      *a2 = 0;\n      v9 = *a3;\nLABEL_15:\n      if ( !v9 )\n      {\n        *a3 = getenv(\"POSIXLY_CORRECT\") == 0LL ? 1024LL : 512LL;\n        return 4LL;\n      }\n      return result;\n    }\n    if ( (unsigned __int8)(*v4 - 48) > 9u )\n    {\n      if ( v4 != v10 )\n      {\n        while ( (unsigned __int8)(*++v4 - 48) > 9u )\n        {\n          if ( v4 == v10 )\n            goto LABEL_22;\n        }\n        goto LABEL_13;\n      }\nLABEL_22:\n      if ( *(v10 - 1) == 66 )\n      {\n        v5 |= 0x180u;\n        if ( *(v10 - 2) != 105 )\n          goto LABEL_13;\n      }\n      else\n      {\n        LOBYTE(v5) = v5 | 0x80;\n      }\n      v5 |= 0x20u;\n    }\nLABEL_13:\n    v9 = *a3;\n    *a2 = v5;\n    goto LABEL_15;\n  }\n  result = (__int64)getenv(\"POSIXLY_CORRECT\");\n  if ( result )\n  {\n    *a3 = 512LL;\n    result = 0LL;\n  }\n  else\n  {\n    *a3 = 1024LL;\n  }\n  *a2 = 0;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_406900",
            "funcStartAddr": "0x406900",
            "funcEndAddr": "0x406a02",
            "decompiledFuncCode": "void sub_406900(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, void (__fastcall *a6)(_QWORD), ...)\n{\n  int v6; // ebx\n  int v11; // eax\n  gcc_va_list va; // [rsp+8h] [rbp-F0h] BYREF\n\n  v6 = dword_614338;\n  dword_614338 = 0;\n  if ( (_DWORD)a1 == 2 )\n  {\n    v11 = sub_40A500(a1, a2, &unk_40F750, &off_40F760, 0LL);\n    if ( v11 != -1 )\n    {\n      if ( v11 == 104 )\n      {\n        a6(0LL);\n      }\n      else if ( v11 == 118 )\n      {\n        va_start(va, a6);\n        sub_408B20(stdout, a3, a4, a5, va);\n        exit(0);\n      }\n    }\n  }\n  dword_614338 = v6;\n  dword_61433C = 0;\n}\n"
        },
        {
            "funcName": "sub_406A10",
            "funcStartAddr": "0x406a10",
            "funcEndAddr": "0x406aa9",
            "decompiledFuncCode": "char *__fastcall sub_406A10(const char *a1)\n{\n  __int64 v1; // rbx\n  char *result; // rax\n\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v1 = (__int64)a1;\n  result = strrchr(a1, 47);\n  if ( result )\n  {\n    if ( result + 1 - a1 > 6 && !memcmp(result - 6, \"/.libs/\", 7uLL) )\n    {\n      v1 = (__int64)(result + 1);\n      if ( !memcmp(result + 1, \"lt-\", 3uLL) )\n      {\n        v1 = (__int64)(result + 4);\n        program_invocation_short_name = (__int64)(result + 4);\n      }\n    }\n  }\n  qword_614680 = v1;\n  program_invocation_name = v1;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_406AB0",
            "funcStartAddr": "0x406ab0",
            "funcEndAddr": "0x406ba2",
            "decompiledFuncCode": "char *__fastcall sub_406AB0(char *msgid, int a2)\n{\n  char *v2; // rbx\n  _BYTE *v4; // rax\n  bool v5; // zf\n  const char *v6; // rbx\n\n  v2 = dcgettext(0LL, msgid, 5);\n  if ( msgid != v2 )\n    return v2;\n  v4 = (_BYTE *)sub_40AA50();\n  if ( (*v4 & 0xDF) == 85 )\n  {\n    if ( (v4[1] & 0xDF) == 84 && (v4[2] & 0xDF) == 70 && v4[3] == 45 && v4[4] == 56 && !v4[5] )\n    {\n      v5 = *v2 == 96;\n      v2 = (char *)&unk_40F811;\n      if ( !v5 )\n        return (char *)&unk_40F806;\n      return v2;\n    }\n  }\n  else if ( (*v4 & 0xDF) == 71\n         && (v4[1] & 0xDF) == 66\n         && v4[2] == 49\n         && v4[3] == 56\n         && v4[4] == 48\n         && v4[5] == 51\n         && v4[6] == 48\n         && !v4[7] )\n  {\n    v5 = *v2 == 96;\n    v2 = (char *)&unk_40F80D;\n    if ( !v5 )\n      return (char *)&unk_40F80A;\n    return v2;\n  }\n  v6 = \"\\\"\";\n  if ( a2 != 9 )\n    return \"'\";\n  return (char *)v6;\n}\n"
        },
        {
            "funcName": "sub_406BB0",
            "funcStartAddr": "0x401fa0",
            "funcEndAddr": "0x401fa5",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_406BB0(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_406BB0((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_406BB0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_40A580((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_406BB0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_406AB0(\"`\", a5);\n        v51 = sub_406AB0(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n\nunsigned __int64 __fastcall sub_406BB0(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_406BB0((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_406BB0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_40A580((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_406BB0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_406AB0(\"`\", a5);\n        v51 = sub_406AB0(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n"
        },
        {
            "funcName": "sub_406BB0",
            "funcStartAddr": "0x401fa0",
            "funcEndAddr": "0x401fa5",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_406BB0(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_406BB0((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_406BB0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_40A580((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_406BB0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_406AB0(\"`\", a5);\n        v51 = sub_406AB0(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n\nunsigned __int64 __fastcall sub_406BB0(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_406BB0((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_406BB0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_40A580((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_406BB0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_406AB0(\"`\", a5);\n        v51 = sub_406AB0(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n"
        },
        {
            "funcName": "sub_407DE0",
            "funcStartAddr": "0x401fa5",
            "funcEndAddr": "0x401faa",
            "decompiledFuncCode": "_BYTE *__fastcall sub_407DE0(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)ptr;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_614330 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_408F10();\n    v9 = 16LL * (a1 + 1);\n    if ( ptr == &xmmword_614320 )\n    {\n      v7 = (__m128i *)sub_408D20(0LL, v9);\n      ptr = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_614320);\n    }\n    else\n    {\n      ptr = (void *)sub_408D20(ptr, v9);\n      v7 = (__m128i *)ptr;\n    }\n    memset(&v7[dword_614330], 0, 16LL * (a1 + 1 - dword_614330));\n    dword_614330 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_406BB0(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_6146A0 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_408CC0(v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_406BB0(v14, v13, a2, a3, v15, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n\n_BYTE *__fastcall sub_407DE0(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)ptr;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_614330 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_408F10();\n    v9 = 16LL * (a1 + 1);\n    if ( ptr == &xmmword_614320 )\n    {\n      v7 = (__m128i *)sub_408D20(0LL, v9);\n      ptr = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_614320);\n    }\n    else\n    {\n      ptr = (void *)sub_408D20(ptr, v9);\n      v7 = (__m128i *)ptr;\n    }\n    memset(&v7[dword_614330], 0, 16LL * (a1 + 1 - dword_614330));\n    dword_614330 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_406BB0(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_6146A0 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_408CC0(v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_406BB0(v14, v13, a2, a3, v15, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n"
        },
        {
            "funcName": "sub_407DE0",
            "funcStartAddr": "0x401fa5",
            "funcEndAddr": "0x401faa",
            "decompiledFuncCode": "_BYTE *__fastcall sub_407DE0(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)ptr;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_614330 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_408F10();\n    v9 = 16LL * (a1 + 1);\n    if ( ptr == &xmmword_614320 )\n    {\n      v7 = (__m128i *)sub_408D20(0LL, v9);\n      ptr = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_614320);\n    }\n    else\n    {\n      ptr = (void *)sub_408D20(ptr, v9);\n      v7 = (__m128i *)ptr;\n    }\n    memset(&v7[dword_614330], 0, 16LL * (a1 + 1 - dword_614330));\n    dword_614330 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_406BB0(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_6146A0 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_408CC0(v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_406BB0(v14, v13, a2, a3, v15, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n\n_BYTE *__fastcall sub_407DE0(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)ptr;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_614330 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_408F10();\n    v9 = 16LL * (a1 + 1);\n    if ( ptr == &xmmword_614320 )\n    {\n      v7 = (__m128i *)sub_408D20(0LL, v9);\n      ptr = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_614320);\n    }\n    else\n    {\n      ptr = (void *)sub_408D20(ptr, v9);\n      v7 = (__m128i *)ptr;\n    }\n    memset(&v7[dword_614330], 0, 16LL * (a1 + 1 - dword_614330));\n    dword_614330 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_406BB0(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_6146A0 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_408CC0(v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_406BB0(v14, v13, a2, a3, v15, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n"
        },
        {
            "funcName": "sub_407F80",
            "funcStartAddr": "0x407f80",
            "funcEndAddr": "0x407fb4",
            "decompiledFuncCode": "__int64 __fastcall sub_407F80(__int128 *a1)\n{\n  __int128 *v1; // rbx\n  int *v2; // rax\n  int v3; // r12d\n  int *v4; // rbp\n  __int64 result; // rax\n\n  v1 = a1;\n  v2 = __errno_location();\n  v3 = *v2;\n  v4 = v2;\n  if ( !a1 )\n    v1 = &xmmword_6147A0;\n  result = sub_408EC0(v1, 0x38uLL);\n  *v4 = v3;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_408070",
            "funcStartAddr": "0x408070",
            "funcEndAddr": "0x4080e2",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_408070(_BYTE *a1, unsigned __int64 a2, __int64 a3, unsigned __int64 a4, __int128 *a5)\n{\n  __int128 *v6; // rbx\n  int *v7; // rax\n  int v8; // r12d\n  int *v9; // rbp\n  unsigned __int64 result; // rax\n\n  v6 = a5;\n  if ( !a5 )\n    v6 = &xmmword_6147A0;\n  v7 = __errno_location();\n  v8 = *v7;\n  v9 = v7;\n  result = sub_406BB0(\n             a1,\n             a2,\n             a3,\n             a4,\n             *(_DWORD *)v6,\n             *((_DWORD *)v6 + 1),\n             (__int64)v6 + 8,\n             *((char **)v6 + 5),\n             *((char **)v6 + 6));\n  *v9 = v8;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4080F0",
            "funcStartAddr": "0x4080f0",
            "funcEndAddr": "0x4081d1",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4080F0(__int64 a1, unsigned __int64 a2, unsigned __int64 *a3, __int128 *a4)\n{\n  __int128 *v5; // rbx\n  int *v6; // r13\n  int v7; // ebp\n  int v9; // [rsp+Ch] [rbp-5Ch]\n  _BYTE *v10; // [rsp+10h] [rbp-58h]\n  unsigned __int64 v11; // [rsp+28h] [rbp-40h]\n\n  v5 = a4;\n  if ( !a4 )\n    v5 = &xmmword_6147A0;\n  v6 = __errno_location();\n  v7 = *((_DWORD *)v5 + 1) | (a3 == 0LL);\n  v9 = *v6;\n  v11 = sub_406BB0(0LL, 0LL, a1, a2, *(_DWORD *)v5, v7, (__int64)v5 + 8, *((char **)v5 + 5), *((char **)v5 + 6));\n  v10 = (_BYTE *)sub_408CC0(v11 + 1);\n  sub_406BB0(v10, v11 + 1, a1, a2, *(_DWORD *)v5, v7, (__int64)v5 + 8, *((char **)v5 + 5), *((char **)v5 + 6));\n  *v6 = v9;\n  if ( a3 )\n    *a3 = v11;\n  return v10;\n}\n"
        },
        {
            "funcName": "sub_4081F0",
            "funcStartAddr": "0x4081f0",
            "funcEndAddr": "0x408285",
            "decompiledFuncCode": "void sub_4081F0()\n{\n  __int128 *v0; // r12\n  void **v1; // rbx\n  void **v2; // rbp\n  void *v3; // rdi\n  void *v4; // rdi\n\n  v0 = (__int128 *)ptr;\n  if ( dword_614330 > 1 )\n  {\n    v1 = (void **)((char *)ptr + 24);\n    v2 = (void **)((char *)ptr + 16 * (unsigned int)(dword_614330 - 2) + 40);\n    do\n    {\n      v3 = *v1;\n      v1 += 2;\n      free(v3);\n    }\n    while ( v1 != v2 );\n  }\n  v4 = (void *)*((_QWORD *)v0 + 1);\n  if ( v4 != &unk_6146A0 )\n  {\n    free(v4);\n    *(_QWORD *)&xmmword_614320 = 256LL;\n    *((_QWORD *)&xmmword_614320 + 1) = &unk_6146A0;\n  }\n  if ( v0 != &xmmword_614320 )\n  {\n    free(v0);\n    ptr = &xmmword_614320;\n  }\n  dword_614330 = 1;\n}\n"
        },
        {
            "funcName": "sub_408300",
            "funcStartAddr": "0x401faa",
            "funcEndAddr": "0x401faf",
            "decompiledFuncCode": "_BYTE *__fastcall sub_408300(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_407DE0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_408300(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_407DE0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_408300",
            "funcStartAddr": "0x401faa",
            "funcEndAddr": "0x401faf",
            "decompiledFuncCode": "_BYTE *__fastcall sub_408300(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_407DE0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_408300(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_407DE0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_408370",
            "funcStartAddr": "0x401faf",
            "funcEndAddr": "0x401fb4",
            "decompiledFuncCode": "_BYTE *__fastcall sub_408370(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_407DE0(a1, a3, a4, (__int64)v5);\n}\n\n_BYTE *__fastcall sub_408370(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_407DE0(a1, a3, a4, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_408370",
            "funcStartAddr": "0x401faf",
            "funcEndAddr": "0x401fb4",
            "decompiledFuncCode": "_BYTE *__fastcall sub_408370(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_407DE0(a1, a3, a4, (__int64)v5);\n}\n\n_BYTE *__fastcall sub_408370(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_407DE0(a1, a3, a4, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_4083E0",
            "funcStartAddr": "0x4083e0",
            "funcEndAddr": "0x4083ec",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4083E0(int a1, __int64 a2)\n{\n  return sub_408300(0, a1, a2);\n}\n"
        },
        {
            "funcName": "sub_408400",
            "funcStartAddr": "0x408400",
            "funcEndAddr": "0x408470",
            "decompiledFuncCode": "_BYTE *__fastcall sub_408400(__int64 a1, unsigned __int64 a2, unsigned __int8 a3)\n{\n  _DWORD *v3; // r8\n  __int128 v5[3]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+30h] [rbp-18h]\n\n  v6 = qword_6147D0;\n  v5[0] = (__int128)_mm_load_si128((const __m128i *)&xmmword_6147A0);\n  v5[1] = (__int128)_mm_load_si128((const __m128i *)&xmmword_6147B0);\n  v3 = (_DWORD *)v5 + (a3 >> 5) + 2;\n  v5[2] = (__int128)_mm_load_si128((const __m128i *)&xmmword_6147C0);\n  *v3 ^= (((*v3 >> (a3 & 0x1F)) & 1) == 0) << (a3 & 0x1F);\n  return sub_407DE0(0, a1, a2, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_408480",
            "funcStartAddr": "0x408480",
            "funcEndAddr": "0x408491",
            "decompiledFuncCode": "_BYTE *__fastcall sub_408480(__int64 a1)\n{\n  return sub_408400(a1, 0xFFFFFFFFFFFFFFFFLL, 0x3Au);\n}\n"
        },
        {
            "funcName": "sub_4084B0",
            "funcStartAddr": "0x401fb4",
            "funcEndAddr": "0x401fb9",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4084B0(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_407DE0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_4084B0(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_407DE0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_4084B0",
            "funcStartAddr": "0x401fb4",
            "funcEndAddr": "0x401fb9",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4084B0(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_407DE0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_4084B0(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_407DE0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_408520",
            "funcStartAddr": "0x408520",
            "funcEndAddr": "0x40858c",
            "decompiledFuncCode": "_BYTE *__fastcall sub_408520(int a1, __int64 a2, __int64 a3, __int64 a4, unsigned __int64 a5)\n{\n  __int128 v6[2]; // [rsp+0h] [rbp-48h] BYREF\n  __m128i si128; // [rsp+20h] [rbp-28h]\n  __int64 v8; // [rsp+30h] [rbp-18h]\n\n  v6[0] = (__int128)_mm_load_si128((const __m128i *)&xmmword_6147A0);\n  v6[1] = (__int128)_mm_load_si128((const __m128i *)&xmmword_6147B0);\n  si128 = _mm_load_si128((const __m128i *)&xmmword_6147C0);\n  v8 = qword_6147D0;\n  LODWORD(v6[0]) = 10;\n  if ( !a2 || !a3 )\n    abort();\n  si128.m128i_i64[1] = a2;\n  v8 = a3;\n  return sub_407DE0(a1, a4, a5, (__int64)v6);\n}\n"
        },
        {
            "funcName": "sub_408610",
            "funcStartAddr": "0x408610",
            "funcEndAddr": "0x408621",
            "decompiledFuncCode": "_BYTE *__fastcall sub_408610(int a1, __int64 a2)\n{\n  return sub_407DE0(a1, a2, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_6142E0);\n}\n"
        },
        {
            "funcName": "sub_408630",
            "funcStartAddr": "0x408630",
            "funcEndAddr": "0x408646",
            "decompiledFuncCode": "_BYTE *__fastcall sub_408630(__int64 a1)\n{\n  return sub_407DE0(0, a1, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_6142E0);\n}\n"
        },
        {
            "funcName": "sub_408650",
            "funcStartAddr": "0x408650",
            "funcEndAddr": "0x408701",
            "decompiledFuncCode": "void __fastcall sub_408650(int status, int errnum, char *fname, unsigned int lineno, __int64 a5, __int64 a6)\n{\n  const char *v8; // rax\n  char *v9; // rbx\n  char *v10; // rbx\n  int *v11; // rax\n\n  v8 = (const char *)sub_4094C0(a5, a6);\n  if ( !v8 )\n  {\n    v10 = dcgettext(0LL, \"unable to display error message\", 5);\n    v11 = __errno_location();\n    error(0, *v11, v10);\n    abort();\n  }\n  v9 = (char *)v8;\n  if ( fname )\n    error_at_line(status, errnum, fname, lineno, \"%s\", v8);\n  else\n    error(status, errnum, \"%s\", v8);\n  free(v9);\n}\n"
        },
        {
            "funcName": "sub_408710",
            "funcStartAddr": "0x408710",
            "funcEndAddr": "0x40871f",
            "decompiledFuncCode": "void __fastcall sub_408710(int a1, int a2, __int64 a3, __int64 a4)\n{\n  sub_408650(a1, a2, 0LL, 0, a3, a4);\n}\n"
        },
        {
            "funcName": "sub_408720",
            "funcStartAddr": "0x401fb9",
            "funcEndAddr": "0x401fbe",
            "decompiledFuncCode": "__int64 __fastcall sub_408720(FILE *stream, const char *a2, const char *a3, const char *a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r13\n  __int64 v13; // r12\n  __int64 v14; // r15\n  __int64 v15; // r14\n  __int64 v16; // rbx\n  char *v17; // rax\n  const char *v19; // rsi\n  __int64 v20; // r8\n  __int64 v21; // r13\n  __int64 v22; // r12\n  __int64 v23; // r15\n  __int64 v24; // r14\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // r15\n  __int64 v43; // r14\n  __int64 v44; // r13\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r13\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  __int64 v51; // r8\n  __int64 v52; // rbx\n  char *v53; // rax\n  __int64 v54; // r8\n  __int64 v55; // [rsp-10h] [rbp-68h]\n  __int64 v56; // [rsp+0h] [rbp-58h]\n  __int64 v57; // [rsp+0h] [rbp-58h]\n  __int64 v58; // [rsp+0h] [rbp-58h]\n  __int64 v59; // [rsp+0h] [rbp-58h]\n  __int64 v60; // [rsp+8h] [rbp-50h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+8h] [rbp-50h]\n  __int64 v63; // [rsp+10h] [rbp-48h]\n  __int64 v64; // [rsp+10h] [rbp-48h]\n  __int64 v65; // [rsp+18h] [rbp-40h]\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v27 = *a5;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v28, v27);\n    case 2LL:\n      v29 = a5[1];\n      v30 = *a5;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v31, v30, v29);\n    case 3LL:\n      v32 = a5[2];\n      v33 = a5[1];\n      v34 = *a5;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v35, v34, v33, v32);\n    case 4LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v40, v39, v38, v37, v36);\n      return v55;\n    case 6LL:\n      v41 = a5[5];\n      v42 = a5[4];\n      v43 = a5[3];\n      v58 = a5[1];\n      v44 = a5[2];\n      v45 = *a5;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v46, v45, v58, v44, v43, v42, v41);\n    case 7LL:\n      v47 = a5[6];\n      v48 = a5[5];\n      v49 = a5[4];\n      v50 = a5[3];\n      v51 = a5[1];\n      v62 = a5[2];\n      v52 = *a5;\n      v59 = v51;\n      v53 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v53, v52, v59, v62, v50, v49, v48, v47);\n    case 8LL:\n      v10 = a5[2];\n      v11 = a5[1];\n      v12 = a5[6];\n      v13 = a5[5];\n      v14 = a5[4];\n      v63 = a5[7];\n      v15 = a5[3];\n      v16 = *a5;\n      v56 = v10;\n      v60 = v11;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16, v60, v56, v15, v14, v13, v12, v63);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v54 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v54;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return __fprintf_chk(stream, 1LL, v26, v25, v61, v57, v24, v23, v22, v21, v64, v65);\n  }\n}\n\n__int64 __fastcall sub_408720(FILE *stream, const char *a2, const char *a3, const char *a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r13\n  __int64 v13; // r12\n  __int64 v14; // r15\n  __int64 v15; // r14\n  __int64 v16; // rbx\n  char *v17; // rax\n  const char *v19; // rsi\n  __int64 v20; // r8\n  __int64 v21; // r13\n  __int64 v22; // r12\n  __int64 v23; // r15\n  __int64 v24; // r14\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // r15\n  __int64 v43; // r14\n  __int64 v44; // r13\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r13\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  __int64 v51; // r8\n  __int64 v52; // rbx\n  char *v53; // rax\n  __int64 v54; // r8\n  __int64 v55; // [rsp-10h] [rbp-68h]\n  __int64 v56; // [rsp+0h] [rbp-58h]\n  __int64 v57; // [rsp+0h] [rbp-58h]\n  __int64 v58; // [rsp+0h] [rbp-58h]\n  __int64 v59; // [rsp+0h] [rbp-58h]\n  __int64 v60; // [rsp+8h] [rbp-50h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+8h] [rbp-50h]\n  __int64 v63; // [rsp+10h] [rbp-48h]\n  __int64 v64; // [rsp+10h] [rbp-48h]\n  __int64 v65; // [rsp+18h] [rbp-40h]\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v27 = *a5;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v28, v27);\n    case 2LL:\n      v29 = a5[1];\n      v30 = *a5;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v31, v30, v29);\n    case 3LL:\n      v32 = a5[2];\n      v33 = a5[1];\n      v34 = *a5;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v35, v34, v33, v32);\n    case 4LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v40, v39, v38, v37, v36);\n      return v55;\n    case 6LL:\n      v41 = a5[5];\n      v42 = a5[4];\n      v43 = a5[3];\n      v58 = a5[1];\n      v44 = a5[2];\n      v45 = *a5;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v46, v45, v58, v44, v43, v42, v41);\n    case 7LL:\n      v47 = a5[6];\n      v48 = a5[5];\n      v49 = a5[4];\n      v50 = a5[3];\n      v51 = a5[1];\n      v62 = a5[2];\n      v52 = *a5;\n      v59 = v51;\n      v53 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v53, v52, v59, v62, v50, v49, v48, v47);\n    case 8LL:\n      v10 = a5[2];\n      v11 = a5[1];\n      v12 = a5[6];\n      v13 = a5[5];\n      v14 = a5[4];\n      v63 = a5[7];\n      v15 = a5[3];\n      v16 = *a5;\n      v56 = v10;\n      v60 = v11;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16, v60, v56, v15, v14, v13, v12, v63);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v54 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v54;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return __fprintf_chk(stream, 1LL, v26, v25, v61, v57, v24, v23, v22, v21, v64, v65);\n  }\n}\n"
        },
        {
            "funcName": "sub_408720",
            "funcStartAddr": "0x401fb9",
            "funcEndAddr": "0x401fbe",
            "decompiledFuncCode": "__int64 __fastcall sub_408720(FILE *stream, const char *a2, const char *a3, const char *a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r13\n  __int64 v13; // r12\n  __int64 v14; // r15\n  __int64 v15; // r14\n  __int64 v16; // rbx\n  char *v17; // rax\n  const char *v19; // rsi\n  __int64 v20; // r8\n  __int64 v21; // r13\n  __int64 v22; // r12\n  __int64 v23; // r15\n  __int64 v24; // r14\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // r15\n  __int64 v43; // r14\n  __int64 v44; // r13\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r13\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  __int64 v51; // r8\n  __int64 v52; // rbx\n  char *v53; // rax\n  __int64 v54; // r8\n  __int64 v55; // [rsp-10h] [rbp-68h]\n  __int64 v56; // [rsp+0h] [rbp-58h]\n  __int64 v57; // [rsp+0h] [rbp-58h]\n  __int64 v58; // [rsp+0h] [rbp-58h]\n  __int64 v59; // [rsp+0h] [rbp-58h]\n  __int64 v60; // [rsp+8h] [rbp-50h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+8h] [rbp-50h]\n  __int64 v63; // [rsp+10h] [rbp-48h]\n  __int64 v64; // [rsp+10h] [rbp-48h]\n  __int64 v65; // [rsp+18h] [rbp-40h]\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v27 = *a5;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v28, v27);\n    case 2LL:\n      v29 = a5[1];\n      v30 = *a5;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v31, v30, v29);\n    case 3LL:\n      v32 = a5[2];\n      v33 = a5[1];\n      v34 = *a5;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v35, v34, v33, v32);\n    case 4LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v40, v39, v38, v37, v36);\n      return v55;\n    case 6LL:\n      v41 = a5[5];\n      v42 = a5[4];\n      v43 = a5[3];\n      v58 = a5[1];\n      v44 = a5[2];\n      v45 = *a5;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v46, v45, v58, v44, v43, v42, v41);\n    case 7LL:\n      v47 = a5[6];\n      v48 = a5[5];\n      v49 = a5[4];\n      v50 = a5[3];\n      v51 = a5[1];\n      v62 = a5[2];\n      v52 = *a5;\n      v59 = v51;\n      v53 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v53, v52, v59, v62, v50, v49, v48, v47);\n    case 8LL:\n      v10 = a5[2];\n      v11 = a5[1];\n      v12 = a5[6];\n      v13 = a5[5];\n      v14 = a5[4];\n      v63 = a5[7];\n      v15 = a5[3];\n      v16 = *a5;\n      v56 = v10;\n      v60 = v11;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16, v60, v56, v15, v14, v13, v12, v63);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v54 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v54;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return __fprintf_chk(stream, 1LL, v26, v25, v61, v57, v24, v23, v22, v21, v64, v65);\n  }\n}\n\n__int64 __fastcall sub_408720(FILE *stream, const char *a2, const char *a3, const char *a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r13\n  __int64 v13; // r12\n  __int64 v14; // r15\n  __int64 v15; // r14\n  __int64 v16; // rbx\n  char *v17; // rax\n  const char *v19; // rsi\n  __int64 v20; // r8\n  __int64 v21; // r13\n  __int64 v22; // r12\n  __int64 v23; // r15\n  __int64 v24; // r14\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // r15\n  __int64 v43; // r14\n  __int64 v44; // r13\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r13\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  __int64 v51; // r8\n  __int64 v52; // rbx\n  char *v53; // rax\n  __int64 v54; // r8\n  __int64 v55; // [rsp-10h] [rbp-68h]\n  __int64 v56; // [rsp+0h] [rbp-58h]\n  __int64 v57; // [rsp+0h] [rbp-58h]\n  __int64 v58; // [rsp+0h] [rbp-58h]\n  __int64 v59; // [rsp+0h] [rbp-58h]\n  __int64 v60; // [rsp+8h] [rbp-50h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+8h] [rbp-50h]\n  __int64 v63; // [rsp+10h] [rbp-48h]\n  __int64 v64; // [rsp+10h] [rbp-48h]\n  __int64 v65; // [rsp+18h] [rbp-40h]\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v27 = *a5;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v28, v27);\n    case 2LL:\n      v29 = a5[1];\n      v30 = *a5;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v31, v30, v29);\n    case 3LL:\n      v32 = a5[2];\n      v33 = a5[1];\n      v34 = *a5;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v35, v34, v33, v32);\n    case 4LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v40, v39, v38, v37, v36);\n      return v55;\n    case 6LL:\n      v41 = a5[5];\n      v42 = a5[4];\n      v43 = a5[3];\n      v58 = a5[1];\n      v44 = a5[2];\n      v45 = *a5;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v46, v45, v58, v44, v43, v42, v41);\n    case 7LL:\n      v47 = a5[6];\n      v48 = a5[5];\n      v49 = a5[4];\n      v50 = a5[3];\n      v51 = a5[1];\n      v62 = a5[2];\n      v52 = *a5;\n      v59 = v51;\n      v53 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v53, v52, v59, v62, v50, v49, v48, v47);\n    case 8LL:\n      v10 = a5[2];\n      v11 = a5[1];\n      v12 = a5[6];\n      v13 = a5[5];\n      v14 = a5[4];\n      v63 = a5[7];\n      v15 = a5[3];\n      v16 = *a5;\n      v56 = v10;\n      v60 = v11;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16, v60, v56, v15, v14, v13, v12, v63);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v54 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v54;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return __fprintf_chk(stream, 1LL, v26, v25, v61, v57, v24, v23, v22, v21, v64, v65);\n  }\n}\n"
        },
        {
            "funcName": "sub_408B20",
            "funcStartAddr": "0x408b20",
            "funcEndAddr": "0x408b80",
            "decompiledFuncCode": "__int64 __fastcall sub_408B20(FILE *a1, const char *a2, const char *a3, const char *a4, int *a5)\n{\n  __int64 i; // r9\n  __int64 *v6; // r10\n  __int64 v7; // rax\n  unsigned int v8; // eax\n  __int64 *v9; // r10\n  __int64 v10; // rax\n  __int64 v12[11]; // [rsp+0h] [rbp-58h] BYREF\n\n  for ( i = 0LL; i != 10; ++i )\n  {\n    v8 = *a5;\n    if ( (unsigned int)*a5 <= 0x2F )\n    {\n      v6 = (__int64 *)(*((_QWORD *)a5 + 2) + v8);\n      *a5 = v8 + 8;\n      v7 = *v6;\n      v12[i] = *v6;\n      if ( !v7 )\n        return sub_408720(a1, a2, a3, a4, v12, i);\n      continue;\n    }\n    v9 = (__int64 *)*((_QWORD *)a5 + 1);\n    *((_QWORD *)a5 + 1) = v9 + 1;\n    v10 = *v9;\n    v12[i] = *v9;\n    if ( !v10 )\n      break;\n  }\n  return sub_408720(a1, a2, a3, a4, v12, i);\n}\n"
        },
        {
            "funcName": "sub_408B80",
            "funcStartAddr": "0x408b80",
            "funcEndAddr": "0x408c3c",
            "decompiledFuncCode": "__int64 __fastcall sub_408B80(\n        FILE *a1,\n        const char *a2,\n        const char *a3,\n        const char *a4,\n        __int64 a5,\n        __int64 a6,\n        char a7)\n{\n  char *v7; // r10\n  unsigned int v8; // r8d\n  __int64 i; // r9\n  __int64 v10; // rax\n  __int64 v11; // rax\n  __int64 *v12; // rax\n  __int64 v13; // rax\n  __int64 v15[17]; // [rsp+20h] [rbp-88h] BYREF\n\n  v15[14] = a5;\n  v7 = &a7;\n  v8 = 32;\n  v15[15] = a6;\n  for ( i = 0LL; i != 10; ++i )\n  {\n    if ( v8 <= 0x2F )\n    {\n      v10 = v8;\n      v8 += 8;\n      v11 = *(__int64 *)((char *)&v15[10] + v10);\n      v15[i] = v11;\n      if ( !v11 )\n        return sub_408720(a1, a2, a3, a4, v15, i);\n      continue;\n    }\n    v12 = (__int64 *)v7;\n    v7 += 8;\n    v13 = *v12;\n    v15[i] = v13;\n    if ( !v13 )\n      break;\n  }\n  return sub_408720(a1, a2, a3, a4, v15, i);\n}\n"
        },
        {
            "funcName": "sub_408C40",
            "funcStartAddr": "0x408c40",
            "funcEndAddr": "0x408cb4",
            "decompiledFuncCode": "int sub_408C40()\n{\n  char *v0; // rax\n  __int64 v1; // rcx\n  char *v2; // rax\n  FILE *v3; // rbx\n  char *v4; // rax\n\n  v0 = dcgettext(0LL, \"\\nReport bugs to: %s\\n\", 5);\n  __printf_chk(1LL, v0, \"bug-coreutils@gnu.org\", v1);\n  v2 = dcgettext(0LL, \"%s home page: <%s>\\n\", 5);\n  __printf_chk(1LL, v2, &unk_40DCA1, \"https://www.gnu.org/software/coreutils/\");\n  v3 = stdout;\n  v4 = dcgettext(0LL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5);\n  return fputs_unlocked(v4, v3);\n}\n"
        },
        {
            "funcName": "sub_408CC0",
            "funcStartAddr": "0x408cc0",
            "funcEndAddr": "0x408cda",
            "decompiledFuncCode": "void *__fastcall sub_408CC0(size_t a1)\n{\n  void *result; // rax\n\n  result = malloc(a1);\n  if ( !result )\n  {\n    if ( a1 )\n      sub_408F10();\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_408D10",
            "funcStartAddr": "0x408d10",
            "funcEndAddr": "0x408d12",
            "decompiledFuncCode": "// attributes: thunk\nvoid *__fastcall sub_408D10(size_t a1)\n{\n  return sub_408CC0(a1);\n}\n"
        },
        {
            "funcName": "sub_408D20",
            "funcStartAddr": "0x408d20",
            "funcEndAddr": "0x408d56",
            "decompiledFuncCode": "void *__fastcall sub_408D20(void *a1, size_t a2)\n{\n  void *result; // rax\n\n  if ( !a2 && a1 )\n  {\n    free(a1);\n    return 0LL;\n  }\n  else\n  {\n    result = realloc(a1, a2);\n    if ( !result )\n    {\n      if ( a2 )\n        sub_408F10();\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_408E70",
            "funcStartAddr": "0x408e70",
            "funcEndAddr": "0x408e87",
            "decompiledFuncCode": "void *__fastcall sub_408E70(size_t n)\n{\n  void *v1; // rax\n\n  v1 = sub_408CC0(n);\n  return memset(v1, 0, n);\n}\n"
        },
        {
            "funcName": "sub_408E90",
            "funcStartAddr": "0x408e90",
            "funcEndAddr": "0x408ebe",
            "decompiledFuncCode": "__int64 __fastcall sub_408E90(unsigned __int64 a1, unsigned __int64 a2)\n{\n  unsigned __int128 v2; // rax\n\n  v2 = a2 * (unsigned __int128)a1;\n  BYTE8(v2) = *((_QWORD *)&v2 + 1) != 0LL;\n  if ( (v2 & 0x8000000000000000LL) != 0LL\n    || (*((_QWORD *)&v2 + 1) = BYTE8(v2), !is_mul_ok(a2, a1))\n    || (*(_QWORD *)&v2 = calloc(a1, a2), !(_QWORD)v2) )\n  {\n    sub_408F10(a1, a2, *((_QWORD *)&v2 + 1));\n  }\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_408EC0",
            "funcStartAddr": "0x408ec0",
            "funcEndAddr": "0x408ee8",
            "decompiledFuncCode": "void *__fastcall sub_408EC0(void *src, size_t n)\n{\n  void *v2; // rax\n\n  v2 = sub_408CC0(n);\n  return memcpy(v2, src, n);\n}\n"
        },
        {
            "funcName": "sub_408EF0",
            "funcStartAddr": "0x408ef0",
            "funcEndAddr": "0x408f03",
            "decompiledFuncCode": "void *__fastcall sub_408EF0(char *src)\n{\n  size_t v1; // rax\n\n  v1 = strlen(src);\n  return sub_408EC0(src, v1 + 1);\n}\n"
        },
        {
            "funcName": "sub_408F10",
            "funcStartAddr": "0x408f10",
            "funcEndAddr": "0x408f41",
            "decompiledFuncCode": "void __noreturn sub_408F10()\n{\n  char *v0; // rax\n\n  v0 = dcgettext(0LL, \"memory exhausted\", 5);\n  error(status, 0, \"%s\", v0);\n  abort();\n}\n"
        },
        {
            "funcName": "sub_408F50",
            "funcStartAddr": "0x408f50",
            "funcEndAddr": "0x409384",
            "decompiledFuncCode": "__int64 __fastcall sub_408F50(char *nptr, char **a2, unsigned int a3, __int64 *a4, const char *a5)\n{\n  char **p_endptr; // r15\n  int *v8; // rax\n  int *v9; // r12\n  unsigned __int8 v10; // bl\n  const unsigned __int16 *v11; // rsi\n  char *v12; // rax\n  __int64 v13; // rbx\n  unsigned int v14; // ebp\n  int v15; // r12d\n  char *v17; // rax\n  char *v18; // r8\n  __int64 v19; // rax\n  char *v20; // rax\n  char v21; // al\n  int v22; // esi\n  unsigned __int64 v23; // rdx\n  char *v24; // r8\n  unsigned __int64 v25; // kr30_8\n  char *v26; // rax\n  int v27; // edi\n  int v28; // r9d\n  bool v29; // of\n  int v30; // edi\n  int v31; // edi\n  int v32; // edi\n  int v33; // edi\n  char *basea; // [rsp+0h] [rbp-58h]\n  char *baseb; // [rsp+0h] [rbp-58h]\n  char *v37; // [rsp+8h] [rbp-50h]\n  char *endptr; // [rsp+18h] [rbp-40h] BYREF\n\n  if ( a3 > 0x24 )\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 0x60u, \"xstrtoumax\");\n  p_endptr = a2;\n  if ( !a2 )\n    p_endptr = &endptr;\n  v8 = __errno_location();\n  *v8 = 0;\n  v9 = v8;\n  v10 = *nptr;\n  v11 = *__ctype_b_loc();\n  v12 = nptr;\n  while ( (v11[v10] & 0x2000) != 0 )\n    v10 = *++v12;\n  if ( v10 == 45 )\n    return 4;\n  v13 = __strtoul_internal(nptr, p_endptr, a3, 0);\n  if ( *p_endptr == nptr )\n  {\n    basea = *p_endptr;\n    if ( a5 )\n    {\n      v15 = (unsigned __int8)*nptr;\n      if ( (_BYTE)v15 )\n      {\n        v14 = 0;\n        v13 = 1LL;\n        v17 = strchr(a5, (char)v15);\n        v18 = basea;\n        if ( v17 )\n          goto LABEL_20;\n      }\n    }\n    return 4;\n  }\n  if ( *v9 )\n  {\n    v14 = 1;\n    if ( *v9 == 34 )\n      goto LABEL_11;\n    return 4;\n  }\n  v14 = 0;\nLABEL_11:\n  if ( a5 )\n  {\n    v15 = (unsigned __int8)**p_endptr;\n    if ( (_BYTE)v15 )\n    {\n      baseb = *p_endptr;\n      v26 = strchr(a5, (char)v15);\n      v18 = baseb;\n      if ( !v26 )\n      {\nLABEL_40:\n        *a4 = v13;\n        v14 |= 2u;\n        return v14;\n      }\nLABEL_20:\n      if ( (unsigned __int8)(v15 - 69) > 0x2Fu\n        || (v19 = 0x814400308945LL, !_bittest64(&v19, (unsigned int)(v15 - 69)))\n        || (v37 = v18, v20 = strchr(a5, 48), v18 = v37, !v20) )\n      {\nLABEL_27:\n        v22 = 1;\n        v23 = 1024LL;\n        goto LABEL_28;\n      }\n      v21 = v37[1];\n      if ( v21 != 68 )\n      {\n        if ( v21 == 105 )\n        {\n          v23 = 1024LL;\n          v22 = 2 * (v37[2] == 66) + 1;\nLABEL_28:\n          switch ( (char)v15 )\n          {\n            case 'B':\n              if ( (unsigned __int64)v13 >> 54 )\n                goto LABEL_38;\n              v13 <<= 10;\n              break;\n            case 'E':\n              goto LABEL_71;\n            case 'G':\n            case 'g':\n              goto LABEL_77;\n            case 'K':\n            case 'k':\n              goto LABEL_37;\n            case 'M':\n            case 'm':\n              goto LABEL_30;\n            case 'P':\n              goto LABEL_65;\n            case 'T':\n            case 't':\n              goto LABEL_59;\n            case 'Y':\n              goto LABEL_53;\n            case 'Z':\n              goto LABEL_47;\n            case 'b':\n              goto LABEL_44;\n            case 'c':\n              break;\n            case 'w':\n              if ( v13 < 0 )\n                goto LABEL_38;\n              v13 *= 2LL;\n              break;\n            default:\n              goto LABEL_40;\n          }\nLABEL_33:\n          v24 = &v18[v22];\n          *p_endptr = v24;\n          if ( *v24 )\n            v14 |= 2u;\n          goto LABEL_13;\n        }\n        if ( v21 != 66 )\n        {\n          switch ( (char)v15 )\n          {\n            case 'E':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_71:\n              v33 = 6;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v33;\n              }\n              while ( v33 );\n              goto LABEL_51;\n            case 'F':\n            case 'H':\n            case 'I':\n            case 'J':\n            case 'L':\n            case 'N':\n            case 'O':\n            case 'Q':\n            case 'R':\n            case 'S':\n            case 'U':\n            case 'V':\n            case 'W':\n            case 'X':\n            case '[':\n            case '\\\\':\n            case ']':\n            case '^':\n            case '_':\n            case '`':\n            case 'a':\n            case 'd':\n            case 'e':\n            case 'f':\n            case 'h':\n            case 'i':\n            case 'j':\n            case 'l':\n            case 'n':\n            case 'o':\n            case 'p':\n            case 'q':\n            case 'r':\n            case 's':\n              goto LABEL_40;\n            case 'G':\n            case 'g':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_77:\n              if ( is_mul_ok((int)v23, v13)\n                && is_mul_ok((int)v23, (int)v23 * v13)\n                && is_mul_ok((int)v23, (int)v23 * (int)v23 * v13) )\n              {\n                v13 *= (int)v23 * (int)v23 * (__int64)(int)v23;\n              }\n              else\n              {\n                v13 = -1LL;\n                v14 |= 1u;\n              }\n              goto LABEL_33;\n            case 'K':\n            case 'k':\n              v22 = 1;\n              v23 = 1024LL;\nLABEL_37:\n              v25 = v13;\n              v13 *= v23;\n              if ( is_mul_ok(v23, v25) )\n                goto LABEL_33;\n              goto LABEL_38;\n            case 'M':\n            case 'm':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_30:\n              if ( !is_mul_ok((int)v23, v13) || !is_mul_ok((int)v23, (int)v23 * v13) )\n                goto LABEL_38;\n              v13 *= (int)v23 * (__int64)(int)v23;\n              break;\n            case 'P':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_65:\n              v32 = 5;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v32;\n              }\n              while ( v32 );\n              goto LABEL_51;\n            case 'T':\n            case 't':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_59:\n              v31 = 4;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v31;\n              }\n              while ( v31 );\n              goto LABEL_51;\n            case 'Y':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_53:\n              v30 = 8;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v30;\n              }\n              while ( v30 );\n              goto LABEL_51;\n            case 'Z':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_47:\n              v27 = 7;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v27;\n              }\n              while ( v27 );\nLABEL_51:\n              v14 |= v28;\n              break;\n            case 'b':\n              v22 = 1;\nLABEL_44:\n              if ( (unsigned __int64)v13 >> 55 )\n              {\nLABEL_38:\n                v14 = 1;\n                v13 = -1LL;\n              }\n              else\n              {\n                v13 <<= 9;\n              }\n              break;\n            case 'c':\n              v22 = 1;\n              goto LABEL_33;\n            default:\n              goto LABEL_27;\n          }\n          goto LABEL_33;\n        }\n      }\n      v22 = 2;\n      v23 = 1000LL;\n      goto LABEL_28;\n    }\n  }\nLABEL_13:\n  *a4 = v13;\n  return v14;\n}\n"
        },
        {
            "funcName": "sub_409390",
            "funcStartAddr": "0x409390",
            "funcEndAddr": "0x4094b7",
            "decompiledFuncCode": "_BYTE *__fastcall sub_409390(__int64 a1, __m128i *a2)\n{\n  __int64 v2; // r15\n  __int64 v3; // r13\n  __int64 v4; // rbp\n  unsigned __int64 v5; // rbx\n  const char **v6; // rdx\n  size_t v7; // rax\n  bool v8; // cf\n  unsigned __int32 v9; // eax\n  _BYTE *v10; // rbp\n  _BYTE *v11; // rbx\n  const char **v12; // rdx\n  const char *v13; // r15\n  size_t v14; // r14\n  unsigned __int32 v15; // eax\n  __m128i v17; // [rsp+8h] [rbp-50h]\n\n  v17 = _mm_loadu_si128(a2);\n  v2 = a2[1].m128i_i64[0];\n  if ( a1 )\n  {\n    v3 = a1;\n    v4 = a1;\n    v5 = 0LL;\n    do\n    {\n      v9 = v17.m128i_i32[0];\n      if ( v17.m128i_i32[0] <= 0x2Fu )\n      {\n        v17.m128i_i32[0] += 8;\n        v6 = (const char **)(v2 + v9);\n      }\n      else\n      {\n        v6 = (const char **)v17.m128i_i64[1];\n        v17.m128i_i64[1] += 8LL;\n      }\n      v7 = strlen(*v6);\n      v8 = __CFADD__(v7, v5);\n      v5 += v7;\n      if ( v8 )\n        v5 = -1LL;\n      --v4;\n    }\n    while ( v4 );\n    if ( v5 > 0x7FFFFFFF )\n    {\n      v10 = 0LL;\n      *__errno_location() = 75;\n      return v10;\n    }\n    v10 = sub_408CC0(v5 + 1);\n    v11 = v10;\n    do\n    {\n      v15 = a2->m128i_i32[0];\n      if ( a2->m128i_i32[0] <= 0x2Fu )\n      {\n        v12 = (const char **)(a2[1].m128i_i64[0] + v15);\n        a2->m128i_i32[0] = v15 + 8;\n      }\n      else\n      {\n        v12 = (const char **)a2->m128i_i64[1];\n        a2->m128i_i64[1] = (__int64)(v12 + 1);\n      }\n      v13 = *v12;\n      v14 = strlen(*v12);\n      memcpy(v11, v13, v14);\n      v11 += v14;\n      --v3;\n    }\n    while ( v3 );\n  }\n  else\n  {\n    v11 = sub_408CC0(1uLL);\n    v10 = v11;\n  }\n  *v11 = 0;\n  return v10;\n}\n"
        },
        {
            "funcName": "sub_4094C0",
            "funcStartAddr": "0x4094c0",
            "funcEndAddr": "0x40954a",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4094C0(_BYTE *a1, __m128i *a2)\n{\n  __int64 v2; // rax\n  char v3; // cl\n  __int64 v5; // [rsp+8h] [rbp-10h] BYREF\n\n  if ( !*a1 )\n  {\n    v2 = 0LL;\n    return sub_409390(v2, a2);\n  }\n  if ( *a1 == 37 && a1[1] == 115 )\n  {\n    v2 = 0LL;\n    do\n    {\n      ++v2;\n      v3 = a1[2 * v2];\n      if ( !v3 )\n        return sub_409390(v2, a2);\n    }\n    while ( v3 == 37 && a1[2 * v2 + 1] == 115 );\n  }\n  if ( (int)sub_40A600(&v5, a1, a2) >= 0 )\n    return (_BYTE *)v5;\n  if ( *__errno_location() == 12 )\n    sub_408F10();\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_409550",
            "funcStartAddr": "0x409550",
            "funcEndAddr": "0x4095cb",
            "decompiledFuncCode": "int __fastcall sub_409550(FILE *stream)\n{\n  int *v1; // rax\n  int v2; // r12d\n  int *v3; // rbp\n  int result; // eax\n  int v5; // eax\n\n  if ( fileno(stream) < 0 )\n    return fclose(stream);\n  if ( __freading(stream) )\n  {\n    v5 = fileno(stream);\n    if ( lseek(v5, 0LL, 1) == -1 )\n      return fclose(stream);\n  }\n  if ( !(unsigned int)sub_409710(stream) )\n    return fclose(stream);\n  v1 = __errno_location();\n  v2 = *v1;\n  v3 = v1;\n  result = fclose(stream);\n  if ( v2 )\n  {\n    *v3 = v2;\n    return -1;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4095D0",
            "funcStartAddr": "0x4095d0",
            "funcEndAddr": "0x409705",
            "decompiledFuncCode": "__int64 __fastcall sub_4095D0(int a1, int a2, __int64 a3, int a4, int a5, int a6)\n{\n  int v6; // ebx\n  int v8; // eax\n  int *v9; // rax\n  int v10; // edi\n  int v11; // r12d\n  int *v12; // rbp\n  int v13; // ecx\n  int v14; // r8d\n  int v15; // r9d\n  int v16; // [rsp+30h] [rbp-38h]\n\n  v16 = a3;\n  if ( a2 == 1030 )\n  {\n    if ( dword_6147D8 < 0 )\n    {\n      v6 = sub_4095D0(a1, 0, a3, a4, a5, a6);\n      if ( v6 >= 0 && dword_6147D8 == -1 )\n      {\nLABEL_8:\n        v8 = fcntl(v6, 1);\n        if ( v8 < 0 || fcntl(v6, 2, v8 | 1u) == -1 )\n        {\n          v9 = __errno_location();\n          v10 = v6;\n          v6 = -1;\n          v11 = *v9;\n          v12 = v9;\n          close(v10);\n          *v12 = v11;\n        }\n      }\n    }\n    else\n    {\n      v6 = fcntl(a1, 1030, (unsigned int)a3);\n      if ( v6 < 0 && *__errno_location() == 22 )\n      {\n        v6 = sub_4095D0(a1, 0, v16, v13, v14, v15);\n        if ( v6 >= 0 )\n        {\n          dword_6147D8 = -1;\n          goto LABEL_8;\n        }\n      }\n      else\n      {\n        dword_6147D8 = 1;\n      }\n    }\n    return (unsigned int)v6;\n  }\n  return (unsigned int)fcntl(a1, a2, a3);\n}\n"
        },
        {
            "funcName": "sub_409710",
            "funcStartAddr": "0x409710",
            "funcEndAddr": "0x409750",
            "decompiledFuncCode": "int __fastcall sub_409710(FILE *stream)\n{\n  if ( !stream || !__freading(stream) || (stream->_flags & 0x100) == 0 )\n    return fflush(stream);\n  sub_409750(stream, 0LL, 1LL);\n  return fflush(stream);\n}\n"
        },
        {
            "funcName": "sub_409750",
            "funcStartAddr": "0x409750",
            "funcEndAddr": "0x4097a7",
            "decompiledFuncCode": "int __fastcall sub_409750(FILE *a1, __off_t a2, int a3)\n{\n  __off_t v3; // rax\n  int v5; // eax\n\n  if ( a1->_IO_read_end == a1->_IO_read_ptr && a1->_IO_write_ptr == a1->_IO_write_base && !a1->_IO_save_base )\n  {\n    v5 = fileno(a1);\n    v3 = lseek(v5, a2, a3);\n    if ( v3 != -1 )\n    {\n      a1->_flags &= ~0x10u;\n      a1->_offset = v3;\n      LODWORD(v3) = 0;\n    }\n  }\n  else\n  {\n    LODWORD(v3) = fseeko(a1, a2, a3);\n  }\n  return v3;\n}\n"
        },
        {
            "funcName": "sub_4097B0",
            "funcStartAddr": "0x4097b0",
            "funcEndAddr": "0x40988f",
            "decompiledFuncCode": "__int64 __fastcall sub_4097B0(__int64 a1, int *a2)\n{\n  __int64 v2; // r11\n  int v3; // r12d\n  int v4; // ebp\n  __int64 v5; // rbx\n  int v6; // r9d\n  int v7; // r10d\n  int v8; // r8d\n  int v9; // r14d\n  int v10; // edx\n  __int64 *v11; // rax\n  __int64 *v12; // r13\n  __int64 v13; // rdx\n  __int64 v14; // rcx\n  __int64 result; // rax\n  __int64 *v16; // rax\n  __int64 v17; // rdx\n  __int64 v18; // rcx\n\n  v2 = a1 + 8;\n  v3 = a2[11];\n  v4 = *a2;\n  v5 = a2[12];\n  v6 = v3;\n  v7 = *a2;\n  v8 = a2[12];\nLABEL_2:\n  if ( v7 > v8 )\n  {\n    while ( v6 < v8 )\n    {\n      v9 = v7 - v8;\n      v10 = v8 - v6;\n      if ( v7 - v8 <= v8 - v6 )\n      {\n        v16 = (__int64 *)(a1 + 8LL * v6);\n        v17 = v5 - v6;\n        do\n        {\n          v18 = *v16;\n          *v16 = v16[v17];\n          v16[v17] = v18;\n          ++v16;\n        }\n        while ( v16 != (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v9 - 1))) );\n        v6 += v9;\n        goto LABEL_2;\n      }\n      v7 -= v10;\n      v11 = (__int64 *)(a1 + 8LL * v6);\n      v12 = (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v10 - 1)));\n      v13 = v7 - (__int64)v6;\n      do\n      {\n        v14 = *v11;\n        *v11 = v11[v13];\n        v11[v13] = v14;\n        ++v11;\n      }\n      while ( v12 != v11 );\n      if ( v7 <= v8 )\n        break;\n    }\n  }\n  a2[12] = v4;\n  result = (unsigned int)(v4 - v8);\n  a2[11] = result + v3;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_409890",
            "funcStartAddr": "0x409890",
            "funcEndAddr": "0x409eac",
            "decompiledFuncCode": "__int64 __fastcall sub_409890(\n        int a1,\n        __int64 *a2,\n        const char *a3,\n        char **a4,\n        _DWORD *a5,\n        int a6,\n        int *a7,\n        int a8,\n        const char *a9)\n{\n  const char *v9; // r14\n  char *v10; // rbp\n  size_t v11; // r13\n  char **v12; // rbx\n  __int64 v13; // r12\n  const char *v14; // r15\n  const char *v15; // rdi\n  __int64 v16; // r15\n  char **v17; // rbp\n  char *v18; // rdx\n  __int64 result; // rax\n  int v20; // edx\n  int v21; // eax\n  int v22; // ecx\n  char *v23; // rdx\n  __int64 v24; // rbx\n  char *v25; // rax\n  __int64 v26; // rbx\n  char *v27; // rax\n  const char *v28; // r12\n  __int64 v29; // rbp\n  char *v30; // rax\n  __int64 v31; // rbx\n  __int64 v32; // rbp\n  char *v33; // rax\n  FILE *v34; // rdi\n  const char **v35; // rbx\n  _BYTE *v36; // rbp\n  __int64 v37; // r12\n  const char *v38; // r12\n  __int64 v39; // rbp\n  char *v40; // rax\n  char *s1; // [rsp+10h] [rbp-78h]\n  char *s1a; // [rsp+10h] [rbp-78h]\n  _BYTE *ptr; // [rsp+18h] [rbp-70h]\n  int v48; // [rsp+38h] [rbp-50h]\n  char v49; // [rsp+3Fh] [rbp-49h]\n  int v51; // [rsp+44h] [rbp-44h]\n  int v52; // [rsp+48h] [rbp-40h]\n\n  v9 = (const char *)*((_QWORD *)a7 + 4);\n  v10 = (char *)v9;\n  v49 = *v9;\n  if ( *v9 == 61 || !*v9 )\n  {\n    v11 = 0LL;\n  }\n  else\n  {\n    do\n      ++v10;\n    while ( *v10 && *v10 != 61 );\n    v11 = v10 - v9;\n  }\n  v12 = a4;\n  v13 = 0LL;\n  s1 = *a4;\n  v14 = *a4;\n  if ( !*a4 )\n  {\nLABEL_24:\n    if ( !a6 || *(_BYTE *)(a2[*a7] + 1) == 45 || (v18 = strchr(a3, v49), result = 0xFFFFFFFFLL, !v18) )\n    {\n      if ( a8 )\n      {\n        v24 = *a2;\n        v25 = dcgettext(0LL, \"%s: unrecognized option '%s%s'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v25, v24, a9, v9);\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n      ++*a7;\n      a7[2] = 0;\n      return 63LL;\n    }\n    return result;\n  }\n  while ( 1 )\n  {\n    if ( !strncmp(v14, v9, v11) && strlen(v14) == v11 )\n      goto LABEL_31;\n    v12 += 4;\n    v14 = *v12;\n    if ( !*v12 )\n      break;\n    v13 = (int)v13 + 1;\n  }\n  v12 = 0LL;\n  v51 = -1;\n  v15 = s1;\n  v16 = 0LL;\n  v48 = 0;\n  v52 = 0;\n  ptr = 0LL;\n  s1a = v10;\n  v17 = a4;\n  do\n  {\n    if ( strncmp(v15, v9, v11) )\n      goto LABEL_20;\n    if ( v12 )\n    {\n      if ( (a6\n         || *((_DWORD *)v12 + 2) != *((_DWORD *)v17 + 2)\n         || v12[2] != v17[2]\n         || *((_DWORD *)v12 + 6) != *((_DWORD *)v17 + 6))\n        && !v48 )\n      {\n        if ( a8 )\n        {\n          if ( ptr )\n            goto LABEL_19;\n          ptr = calloc((int)v13 + 1, 1uLL);\n          if ( ptr )\n          {\n            v52 = 1;\n            ptr[v51] = 1;\nLABEL_19:\n            ptr[v16] = 1;\n            goto LABEL_20;\n          }\n          v48 = 1;\n        }\n        else\n        {\n          v48 = 1;\n          if ( ptr )\n            goto LABEL_19;\n        }\n      }\n    }\n    else\n    {\n      v51 = v16;\n      v12 = v17;\n    }\nLABEL_20:\n    v17 += 4;\n    v15 = *v17;\n    ++v16;\n  }\n  while ( *v17 );\n  v10 = s1a;\n  if ( ptr || v48 )\n  {\n    if ( a8 )\n    {\n      if ( v48 )\n      {\n        v26 = *a2;\n        v27 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v27, v26, a9, v9);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n      else\n      {\n        flockfile(stderr);\n        v31 = *((_QWORD *)a7 + 4);\n        v32 = *a2;\n        v33 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5);\n        __fprintf_chk(stderr, 1LL, v33, v32, a9, v31);\n        v34 = stderr;\n        v35 = (const char **)a4;\n        v36 = ptr;\n        v37 = (__int64)&ptr[v13 + 1];\n        do\n        {\n          if ( *v36 )\n          {\n            __fprintf_chk(v34, 1LL, \" '%s%s'\", a9, *v35);\n            v34 = stderr;\n          }\n          ++v36;\n          v35 += 4;\n        }\n        while ( (_BYTE *)v37 != v36 );\n        fputc(10, v34);\n        funlockfile(stderr);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n    }\n    if ( v52 )\n      free(ptr);\n    *((_QWORD *)a7 + 4) = &v9[strlen(v9)];\n    ++*a7;\n    a7[2] = 0;\n    return 63LL;\n  }\n  else\n  {\n    if ( !v12 )\n      goto LABEL_24;\n    LODWORD(v13) = v51;\nLABEL_31:\n    v20 = *a7;\n    *((_QWORD *)a7 + 4) = 0LL;\n    v21 = v20 + 1;\n    *a7 = v20 + 1;\n    v22 = *((_DWORD *)v12 + 2);\n    if ( *v10 )\n    {\n      if ( v22 )\n      {\n        *((_QWORD *)a7 + 2) = v10 + 1;\n        goto LABEL_33;\n      }\n      if ( a8 )\n      {\n        v28 = *v12;\n        v29 = *a2;\n        v30 = dcgettext(0LL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v30, v29, a9, v28);\n      }\n      a7[2] = *((_DWORD *)v12 + 6);\n      return 63LL;\n    }\n    else\n    {\n      if ( v22 != 1 )\n        goto LABEL_33;\n      if ( v21 >= a1 )\n      {\n        if ( a8 )\n        {\n          v38 = *v12;\n          v39 = *a2;\n          v40 = dcgettext(0LL, \"%s: option '%s%s' requires an argument\\n\", 5);\n          __fprintf_chk(stderr, 1LL, v40, v39, a9, v38);\n        }\n        a7[2] = *((_DWORD *)v12 + 6);\n        return 5 * (unsigned int)(*a3 != 58) + 58;\n      }\n      else\n      {\n        *a7 = v20 + 2;\n        *((_QWORD *)a7 + 2) = a2[v21];\nLABEL_33:\n        if ( a5 )\n          *a5 = v13;\n        v23 = v12[2];\n        result = *((unsigned int *)v12 + 6);\n        if ( v23 )\n        {\n          *(_DWORD *)v23 = result;\n          return 0LL;\n        }\n      }\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_409EB0",
            "funcStartAddr": "0x409eb0",
            "funcEndAddr": "0x40a476",
            "decompiledFuncCode": "__int64 __fastcall sub_409EB0(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int a6, int *a7, int a8)\n{\n  int v8; // r13d\n  int v9; // eax\n  int v10; // ebp\n  const char *v12; // r15\n  _BYTE *v13; // rdx\n  char v14; // al\n  char v15; // al\n  int v16; // eax\n  __int64 v17; // r14\n  int v18; // edx\n  int v19; // ecx\n  int v20; // eax\n  unsigned int v21; // r14d\n  char *v22; // rax\n  __int64 v23; // r8\n  char v24; // cl\n  int v26; // edx\n  __int64 v27; // rax\n  _BYTE *v28; // rcx\n  int v29; // esi\n  char v30; // cl\n  char *v31; // rax\n  __int64 v32; // rax\n  char *v34; // rax\n  char v35; // dl\n  __int64 v36; // rax\n  int v37; // edx\n  __int64 v38; // rax\n  __int64 v39; // rbp\n  char *v40; // rax\n  __int64 v41; // rbp\n  char *v42; // rax\n  __int64 v43; // rbp\n  char *v44; // rax\n  char v47; // [rsp+1Ch] [rbp-4Ch]\n  int v48; // [rsp+1Ch] [rbp-4Ch]\n  int v49; // [rsp+1Ch] [rbp-4Ch]\n  int v50; // [rsp+1Ch] [rbp-4Ch]\n  _BYTE *v51; // [rsp+20h] [rbp-48h]\n  _BYTE *v52; // [rsp+28h] [rbp-40h]\n\n  v8 = a7[1];\n  if ( a1 <= 0 )\n    return (unsigned int)-1;\n  v9 = *a7;\n  v10 = a1;\n  v12 = a3;\n  *((_QWORD *)a7 + 2) = 0LL;\n  if ( !v9 )\n  {\n    *a7 = 1;\n    v9 = 1;\nLABEL_4:\n    a7[12] = v9;\n    a7[11] = v9;\n    *((_QWORD *)a7 + 4) = 0LL;\n    if ( *a3 == 45 )\n    {\n      a7[10] = 2;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else if ( *a3 == 43 )\n    {\n      a7[10] = 0;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else\n    {\n      v13 = 0LL;\n      if ( !a8 )\n      {\n        v50 = a6;\n        v34 = getenv(\"POSIXLY_CORRECT\");\n        a6 = v50;\n        if ( !v34 )\n        {\n          a7[10] = 1;\n          v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n          goto LABEL_24;\n        }\n        v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n      }\n      a7[10] = 0;\n    }\nLABEL_24:\n    a7[6] = 1;\n    v14 = *v12;\n    goto LABEL_25;\n  }\n  if ( !a7[6] )\n    goto LABEL_4;\n  v14 = *a3;\n  v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n  if ( ((v14 - 43) & 0xFD) == 0 )\n  {\n    v15 = *++v12;\n    if ( v15 == 58 )\n      v8 = 0;\n    if ( !v13 )\n      goto LABEL_12;\n    goto LABEL_28;\n  }\nLABEL_25:\n  if ( v14 == 58 )\n    v8 = 0;\n  if ( !v13 )\n    goto LABEL_12;\nLABEL_28:\n  if ( !*v13 )\n  {\nLABEL_12:\n    v16 = *a7;\n    if ( a7[12] > *a7 )\n      a7[12] = v16;\n    if ( v16 < a7[11] )\n      a7[11] = v16;\n    if ( a7[10] == 1 )\n    {\n      v26 = a7[12];\n      if ( a7[11] == v26 )\n      {\n        if ( v16 != v26 )\n        {\n          a7[11] = v16;\n          v26 = v16;\n        }\n      }\n      else if ( v16 != v26 )\n      {\n        v48 = a6;\n        sub_4097B0((__int64)a2, a7);\n        v26 = *a7;\n        a6 = v48;\n      }\n      if ( a1 <= v26 )\n      {\nLABEL_79:\n        v16 = v26;\n      }\n      else\n      {\n        v27 = v26;\n        while ( 1 )\n        {\n          v28 = (_BYTE *)a2[v27];\n          v29 = v27;\n          v26 = v27;\n          if ( *v28 == 45 )\n          {\n            if ( v28[1] )\n              break;\n          }\n          v26 = ++v27;\n          *a7 = v29 + 1;\n          if ( a1 <= (int)v27 )\n            goto LABEL_79;\n        }\n        v16 = *a7;\n      }\n      a7[12] = v26;\n    }\n    if ( a1 == v16 )\n    {\n      v10 = a7[12];\n      v18 = a7[11];\nLABEL_41:\n      if ( v18 != v10 )\n        *a7 = v18;\n      return (unsigned int)-1;\n    }\n    v17 = a2[v16];\n    if ( !strcmp((const char *)v17, \"--\") )\n    {\n      v18 = a7[11];\n      v19 = a7[12];\n      v20 = v16 + 1;\n      *a7 = v20;\n      if ( v18 == v19 )\n      {\n        a7[11] = v20;\n        v18 = v20;\n      }\n      else if ( v20 != v19 )\n      {\n        sub_4097B0((__int64)a2, a7);\n        v18 = a7[11];\n      }\n      a7[12] = a1;\n      *a7 = a1;\n      goto LABEL_41;\n    }\n    if ( *(_BYTE *)v17 == 45 )\n    {\n      v30 = *(_BYTE *)(v17 + 1);\n      if ( v30 )\n      {\n        if ( a4 )\n        {\n          if ( v30 == 45 )\n          {\n            *((_QWORD *)a7 + 4) = v17 + 2;\n            return (unsigned int)sub_409890(a1, a2, v12, a4, a5, a6, a7, v8, \"--\");\n          }\n          if ( a6 )\n          {\n            if ( *(_BYTE *)(v17 + 2) || (v49 = a6, v31 = strchr(v12, v30), a6 = v49, !v31) )\n            {\n              *((_QWORD *)a7 + 4) = v17 + 1;\n              v21 = sub_409890(a1, a2, v12, a4, a5, a6, a7, v8, \"-\");\n              if ( v21 != -1 )\n                return v21;\n              v17 = a2[*a7];\n            }\n          }\n        }\n        v13 = (_BYTE *)(v17 + 1);\n        goto LABEL_29;\n      }\n    }\n    if ( a7[10] )\n    {\n      *((_QWORD *)a7 + 2) = v17;\n      v21 = 1;\n      *a7 = v16 + 1;\n      return v21;\n    }\n    return (unsigned int)-1;\n  }\nLABEL_29:\n  v51 = v13;\n  *((_QWORD *)a7 + 4) = v13 + 1;\n  v21 = (char)*v13;\n  v52 = v13 + 1;\n  v47 = *v13;\n  v22 = strchr(v12, v21);\n  v23 = (__int64)v52;\n  if ( !v51[1] )\n    ++*a7;\n  if ( (unsigned __int8)(v47 - 58) > 1u && v22 )\n  {\n    v24 = v22[1];\n    if ( *v22 == 87 && a4 && v24 == 59 )\n    {\n      if ( v51[1] )\n      {\nLABEL_68:\n        *((_QWORD *)a7 + 4) = v23;\n        *((_QWORD *)a7 + 2) = 0LL;\n        return (unsigned int)sub_409890(a1, a2, v12, a4, a5, 0, a7, v8, \"-W \");\n      }\n      v32 = *a7;\n      if ( (_DWORD)v32 != a1 )\n      {\n        v23 = a2[v32];\n        goto LABEL_68;\n      }\n      if ( v8 )\n      {\n        v43 = *a2;\n        v44 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v44, v43, v21);\n      }\n      a7[2] = v21;\n      return 5 * (unsigned int)(*v12 != 58) + 58;\n    }\n    else if ( v24 == 58 )\n    {\n      v35 = v51[1];\n      if ( v22[2] == 58 )\n      {\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          ++*a7;\n        }\n        else\n        {\n          *((_QWORD *)a7 + 2) = 0LL;\n        }\n      }\n      else\n      {\n        v36 = *a7;\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          *a7 = v36 + 1;\n        }\n        else if ( a1 == (_DWORD)v36 )\n        {\n          if ( v8 )\n          {\n            v41 = *a2;\n            v42 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n            __fprintf_chk(stderr, 1LL, v42, v41, v21);\n          }\n          a7[2] = v21;\n          v21 = 5 * (*v12 != 58) + 58;\n        }\n        else\n        {\n          v37 = v36 + 1;\n          v38 = a2[v36];\n          *a7 = v37;\n          *((_QWORD *)a7 + 2) = v38;\n        }\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n    }\n  }\n  else\n  {\n    if ( v8 )\n    {\n      v39 = *a2;\n      v40 = dcgettext(0LL, \"%s: invalid option -- '%c'\\n\", 5);\n      __fprintf_chk(stderr, 1LL, v40, v39, v21);\n    }\n    a7[2] = v21;\n    return 63;\n  }\n  return v21;\n}\n"
        },
        {
            "funcName": "sub_40A480",
            "funcStartAddr": "0x40a480",
            "funcEndAddr": "0x40a4d6",
            "decompiledFuncCode": "__int64 __fastcall sub_40A480(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int a6, int a7)\n{\n  __int64 result; // rax\n\n  dword_6147E0 = dword_61433C;\n  dword_6147E4 = dword_614338;\n  result = sub_409EB0(a1, a2, a3, a4, a5, a6, &dword_6147E0, a7);\n  dword_61433C = dword_6147E0;\n  qword_614820 = qword_6147F0;\n  dword_614334 = dword_6147E8;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40A4E0",
            "funcStartAddr": "0x40a4e0",
            "funcEndAddr": "0x40a4f8",
            "decompiledFuncCode": "__int64 __fastcall sub_40A4E0(int a1, __int64 *a2, const char *a3)\n{\n  return sub_40A480(a1, a2, a3, 0LL, 0LL, 0, 1);\n}\n"
        },
        {
            "funcName": "sub_40A500",
            "funcStartAddr": "0x40a500",
            "funcEndAddr": "0x40a513",
            "decompiledFuncCode": "__int64 __fastcall sub_40A500(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5)\n{\n  return sub_40A480(a1, a2, a3, a4, a5, 0, 0);\n}\n"
        },
        {
            "funcName": "sub_40A520",
            "funcStartAddr": "0x40a520",
            "funcEndAddr": "0x40a535",
            "decompiledFuncCode": "__int64 __fastcall sub_40A520(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_409EB0(a1, a2, a3, a4, a5, 0, a6, 0);\n}\n"
        },
        {
            "funcName": "sub_40A540",
            "funcStartAddr": "0x40a540",
            "funcEndAddr": "0x40a556",
            "decompiledFuncCode": "__int64 __fastcall sub_40A540(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5)\n{\n  return sub_40A480(a1, a2, a3, a4, a5, 1, 0);\n}\n"
        },
        {
            "funcName": "sub_40A560",
            "funcStartAddr": "0x40a560",
            "funcEndAddr": "0x40a578",
            "decompiledFuncCode": "__int64 __fastcall sub_40A560(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_409EB0(a1, a2, a3, a4, a5, 1, a6, 0);\n}\n"
        },
        {
            "funcName": "sub_40A580",
            "funcStartAddr": "0x40a580",
            "funcEndAddr": "0x40a5fa",
            "decompiledFuncCode": "size_t __fastcall sub_40A580(wchar_t *pwc, char *s, size_t a3, mbstate_t *a4)\n{\n  size_t v4; // rbx\n  wchar_t *v5; // r12\n  const char *v6; // rbp\n  char v8; // [rsp+Ch] [rbp-1Ch] BYREF\n\n  if ( !s )\n  {\n    a3 = 1LL;\n    v6 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_7:\n    v5 = (wchar_t *)&v8;\n    goto LABEL_4;\n  }\n  v4 = -2LL;\n  if ( !a3 )\n    return v4;\n  v5 = pwc;\n  v6 = s;\n  if ( !pwc )\n    goto LABEL_7;\nLABEL_4:\n  v4 = mbrtowc(v5, v6, a3, a4);\n  if ( v4 > 0xFFFFFFFFFFFFFFFDLL && !(unsigned __int8)sub_40A9F0(0LL) )\n  {\n    v4 = 1LL;\n    *v5 = *(unsigned __int8 *)v6;\n  }\n  return v4;\n}\n"
        },
        {
            "funcName": "sub_40A600",
            "funcStartAddr": "0x40a600",
            "funcEndAddr": "0x40a659",
            "decompiledFuncCode": "__int64 __fastcall sub_40A600(_QWORD *a1, __int64 a2, __int64 a3)\n{\n  void *v3; // rax\n  unsigned int v4; // edx\n  unsigned __int64 v6; // [rsp+8h] [rbp-10h] BYREF\n\n  v3 = (void *)sub_40AFC0(0LL, &v6, a2, a3);\n  if ( !v3 )\n    return 0xFFFFFFFFLL;\n  v4 = v6;\n  if ( v6 > 0x7FFFFFFF )\n  {\n    free(v3);\n    *__errno_location() = 75;\n    return 0xFFFFFFFFLL;\n  }\n  else\n  {\n    *a1 = v3;\n    return v4;\n  }\n}\n"
        },
        {
            "funcName": "sub_40A660",
            "funcStartAddr": "0x40a660",
            "funcEndAddr": "0x40a66a",
            "decompiledFuncCode": "void __noreturn sub_40A660()\n{\n  sub_405460(1);\n}\n"
        },
        {
            "funcName": "sub_40A670",
            "funcStartAddr": "0x40a670",
            "funcEndAddr": "0x40a786",
            "decompiledFuncCode": "__int64 __fastcall sub_40A670(const char *a1, const char **a2, char *a3, size_t a4)\n{\n  char *v5; // rbp\n  size_t v6; // rax\n  const char *v7; // r14\n  size_t v8; // r12\n  __int64 v9; // rbx\n  bool v10; // zf\n  char v11; // al\n  __int64 v12; // rax\n  __int64 v14; // [rsp+0h] [rbp-58h]\n  char v15; // [rsp+17h] [rbp-41h]\n\n  v5 = a3;\n  v6 = strlen(a1);\n  v7 = *a2;\n  v14 = -1LL;\n  if ( !*a2 )\n    return v14;\n  v8 = v6;\n  v15 = 0;\n  v9 = 0LL;\n  do\n  {\n    while ( strncmp(v7, a1, v8) )\n    {\nLABEL_7:\n      ++v9;\n      v5 += a4;\n      v7 = a2[v9];\n      if ( !v7 )\n        goto LABEL_12;\n    }\n    if ( strlen(v7) == v8 )\n      return v9;\n    if ( v14 != -1 )\n    {\n      if ( a3 )\n      {\n        v10 = memcmp(&a3[a4 * v14], v5, a4) == 0;\n        v11 = v15;\n        if ( !v10 )\n          v11 = 1;\n        v15 = v11;\n      }\n      else\n      {\n        v15 = 1;\n      }\n      goto LABEL_7;\n    }\n    v14 = v9++;\n    v5 += a4;\n    v7 = a2[v9];\n  }\n  while ( v7 );\nLABEL_12:\n  v12 = -2LL;\n  if ( !v15 )\n    return v14;\n  return v12;\n}\n"
        },
        {
            "funcName": "sub_40A790",
            "funcStartAddr": "0x40a790",
            "funcEndAddr": "0x40a801",
            "decompiledFuncCode": "void __fastcall sub_40A790(__int64 a1, __int64 a2, __int64 a3)\n{\n  char *v3; // rbx\n  _BYTE *v4; // rbp\n  _BYTE *v5; // rax\n\n  if ( a3 == -1 )\n    v3 = dcgettext(0LL, \"invalid argument %s for %s\", 5);\n  else\n    v3 = dcgettext(0LL, \"ambiguous argument %s for %s\", 5);\n  v4 = sub_408610(1, a1);\n  v5 = sub_408300(0, 8, a2);\n  error(0, 0, v3, v5, v4);\n}\n"
        },
        {
            "funcName": "sub_40A810",
            "funcStartAddr": "0x40a810",
            "funcEndAddr": "0x40a928",
            "decompiledFuncCode": "int __fastcall sub_40A810(__int64 *a1, char *a2, size_t a3)\n{\n  const void *v3; // r14\n  _IO_FILE *v6; // rbx\n  char *v7; // rax\n  FILE *v8; // rsi\n  __int64 v9; // rbx\n  __int64 i; // r12\n  const char *v11; // rax\n  const char *v12; // rax\n  char *IO_write_ptr; // rax\n\n  v3 = 0LL;\n  v6 = stderr;\n  v7 = dcgettext(0LL, \"Valid arguments are:\", 5);\n  v8 = v6;\n  v9 = 0LL;\n  fputs_unlocked(v7, v8);\n  for ( i = *a1; i; i = a1[v9] )\n  {\n    while ( !v9 || memcmp(v3, a2, a3) )\n    {\n      ++v9;\n      v3 = a2;\n      a2 += a3;\n      v11 = sub_408630(i);\n      __fprintf_chk(stderr, 1LL, \"\\n  - %s\", v11);\n      i = a1[v9];\n      if ( !i )\n        goto LABEL_7;\n    }\n    ++v9;\n    a2 += a3;\n    v12 = sub_408630(i);\n    __fprintf_chk(stderr, 1LL, \", %s\", v12);\n  }\nLABEL_7:\n  IO_write_ptr = stderr->_IO_write_ptr;\n  if ( IO_write_ptr >= stderr->_IO_write_end )\n  {\n    LODWORD(IO_write_ptr) = __overflow(stderr, 10);\n  }\n  else\n  {\n    stderr->_IO_write_ptr = IO_write_ptr + 1;\n    *IO_write_ptr = 10;\n  }\n  return (int)IO_write_ptr;\n}\n"
        },
        {
            "funcName": "sub_40A930",
            "funcStartAddr": "0x40a930",
            "funcEndAddr": "0x40a9a0",
            "decompiledFuncCode": "__int64 __fastcall sub_40A930(__int64 a1, const char *a2, const char **a3, char *a4, size_t a5, void (*a6)(void))\n{\n  __int64 result; // rax\n\n  result = sub_40A670(a2, a3, a4, a5);\n  if ( result < 0 )\n  {\n    sub_40A790(a1, (__int64)a2, result);\n    sub_40A810((__int64 *)a3, a4, a5);\n    a6();\n    return -1LL;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40A9A0",
            "funcStartAddr": "0x40a9a0",
            "funcEndAddr": "0x40a9ed",
            "decompiledFuncCode": "__int64 __fastcall sub_40A9A0(void *s1, __int64 *a2, char *a3, size_t a4)\n{\n  __int64 v4; // r14\n  __int64 *v6; // rbx\n\n  v4 = *a2;\n  if ( *a2 )\n  {\n    v6 = a2 + 1;\n    do\n    {\n      if ( !memcmp(s1, a3, a4) )\n        break;\n      v4 = *v6;\n      a3 += a4;\n      ++v6;\n    }\n    while ( v4 );\n  }\n  return v4;\n}\n"
        },
        {
            "funcName": "sub_40A9F0",
            "funcStartAddr": "0x40a9f0",
            "funcEndAddr": "0x40aa4e",
            "decompiledFuncCode": "bool __fastcall sub_40A9F0(int a1)\n{\n  char *v1; // rdx\n  bool result; // al\n\n  v1 = setlocale(a1, 0LL);\n  result = 1;\n  if ( v1 )\n  {\n    result = 0;\n    if ( strcmp(v1, \"C\") )\n      return strcmp(v1, \"POSIX\") != 0;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40AA50",
            "funcStartAddr": "0x40aa50",
            "funcEndAddr": "0x40afb2",
            "decompiledFuncCode": "const char *sub_40AA50()\n{\n  char *v0; // rax\n  char *v1; // r15\n  const char *v2; // rbx\n  char v3; // bp\n  const char *v4; // rbp\n  char *v6; // rax\n  const char *v7; // r13\n  size_t v8; // rax\n  __int64 v9; // r12\n  size_t v10; // r14\n  size_t v11; // rdi\n  char *v12; // rax\n  char *v13; // rbp\n  size_t v14; // rdi\n  char *v15; // rax\n  int v16; // eax\n  int v17; // r12d\n  FILE *v18; // r13\n  const char *v19; // rax\n  FILE *v20; // rbx\n  const char *v21; // r13\n  char *IO_read_ptr; // rax\n  int v23; // edi\n  char *v24; // kr00_8\n  int *v25; // rdx\n  int v26; // esi\n  unsigned int v27; // eax\n  __int64 v28; // rdx\n  signed __int64 v29; // rax\n  char *v30; // rax\n  __int64 v31; // rcx\n  __int64 v32; // rdx\n  __int64 v33; // rsi\n  unsigned int v34; // ecx\n  signed __int64 v35; // rdi\n  char *v36; // rsi\n  unsigned int v37; // edx\n  char *v38; // rcx\n  FILE *v39; // rdi\n  int v40; // eax\n  bool v41; // dl\n  char *v42; // rax\n  signed __int64 v43; // rax\n  unsigned __int64 v44; // r9\n  char *v45; // rsi\n  char *v46; // r10\n  unsigned int v47; // ecx\n  unsigned int v48; // ecx\n  unsigned int v49; // esi\n  __int64 v50; // r8\n  unsigned __int64 v51; // rdi\n  char *v52; // rcx\n  char *v53; // r9\n  unsigned int v54; // edx\n  unsigned int v55; // edx\n  unsigned int v56; // ecx\n  __int64 v57; // rsi\n  const char *v58; // rax\n  char *v59; // rdi\n  FILE *v60; // r13\n  signed __int64 v61; // [rsp+8h] [rbp-D0h]\n  __int64 v62; // [rsp+18h] [rbp-C0h]\n  char v63[64]; // [rsp+20h] [rbp-B8h] BYREF\n  _QWORD v64[15]; // [rsp+60h] [rbp-78h] BYREF\n\n  v0 = nl_langinfo(14);\n  v1 = qword_614818;\n  v2 = v0;\n  if ( !v0 )\n    v2 = \"\";\n  if ( !qword_614818 )\n  {\n    v6 = getenv(\"CHARSETALIASDIR\");\n    v7 = v6;\n    if ( v6 && *v6 )\n    {\n      v8 = strlen(v6);\n      v9 = v8;\n      v10 = v8;\n      if ( !v8 )\n      {\n        v11 = 14LL;\nLABEL_18:\n        v12 = (char *)malloc(v11);\n        v13 = v12;\n        if ( !v12 )\n        {\nLABEL_19:\n          v1 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\nLABEL_20:\n          qword_614818 = v1;\n          goto LABEL_4;\n        }\n        memcpy(v12, v7, v10);\nLABEL_24:\n        strcpy(&v13[v9], \"charset.alias\");\n        v16 = open(v13, 0);\n        v17 = v16;\n        if ( v16 >= 0 )\n        {\n          v1 = 0LL;\n          v61 = 0LL;\n          v18 = fdopen(v16, \"r\");\n          if ( v18 )\n          {\n            v19 = v2;\n            v20 = v18;\n            v21 = v19;\nLABEL_30:\n            IO_read_ptr = v20->_IO_read_ptr;\n            if ( IO_read_ptr < v20->_IO_read_end )\n            {\nLABEL_31:\n              v20->_IO_read_ptr = IO_read_ptr + 1;\n              v23 = (unsigned __int8)*IO_read_ptr;\n              goto LABEL_32;\n            }\n            while ( 1 )\n            {\n              v23 = __uflow(v20);\n              if ( v23 == -1 )\n                break;\nLABEL_32:\n              if ( (unsigned int)(v23 - 9) <= 1 || v23 == 32 )\n                goto LABEL_30;\n              if ( v23 == 35 )\n              {\n                do\n                {\n                  v42 = v20->_IO_read_ptr;\n                  if ( v42 < v20->_IO_read_end )\n                  {\n                    v20->_IO_read_ptr = v42 + 1;\n                    v40 = (unsigned __int8)*v42;\n                    v41 = 1;\n                  }\n                  else\n                  {\n                    v40 = __uflow(v20);\n                    v41 = v40 != -1;\n                  }\n                }\n                while ( v40 != 10 && v41 );\n                if ( v40 == -1 )\n                  break;\n                goto LABEL_30;\n              }\n              ungetc(v23, v20);\n              if ( fscanf(v20, \"%50s %50s\", v63, v64) <= 1 )\n                break;\n              v24 = &v63[strlen(v63)];\n              v25 = (int *)v64;\n              do\n              {\n                v26 = *v25++;\n                v27 = ~v26 & (v26 - 16843009) & 0x80808080;\n              }\n              while ( !v27 );\n              if ( (~v26 & (v26 - 16843009) & 0x8080) == 0 )\n              {\n                v27 >>= 16;\n                v25 = (int *)((char *)v25 + 2);\n              }\n              v28 = (char *)v25 - __CFADD__((_BYTE)v27, (_BYTE)v27) - 3 - (char *)v64;\n              v29 = v24 - v63 + v28;\n              v62 = v28;\n              if ( v61 )\n              {\n                v43 = v61 + v29;\n                v61 = v43 + 2;\n                v30 = (char *)realloc(v1, v43 + 3);\n                v32 = v62;\n                v31 = v24 - v63;\n              }\n              else\n              {\n                v61 = v29 + 2;\n                v30 = (char *)malloc(v29 + 3);\n                v31 = v24 - v63;\n                v32 = v62;\n              }\n              if ( !v30 )\n              {\n                v58 = v21;\n                v59 = v1;\n                v60 = v20;\n                v1 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\n                v2 = v58;\n                free(v59);\n                sub_409550(v60);\n                goto LABEL_26;\n              }\n              v33 = -2 - v31;\n              v34 = v31 + 1;\n              v35 = v61 - v32;\n              v36 = &v30[v61 - v32 + v33];\n              if ( v34 >= 8 )\n              {\n                *(_QWORD *)v36 = *(_QWORD *)v63;\n                *(_QWORD *)&v36[v34 - 8] = *(_QWORD *)&v63[v34 - 8];\n                v44 = (unsigned __int64)(v36 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v45 = &v36[-v44];\n                v46 = (char *)(v63 - v45);\n                v47 = ((_DWORD)v45 + v34) & 0xFFFFFFF8;\n                if ( v47 >= 8 )\n                {\n                  v48 = v47 & 0xFFFFFFF8;\n                  v49 = 0;\n                  do\n                  {\n                    v50 = v49;\n                    v49 += 8;\n                    *(_QWORD *)(v44 + v50) = *(_QWORD *)&v46[v50];\n                  }\n                  while ( v49 < v48 );\n                }\n              }\n              else if ( (v34 & 4) != 0 )\n              {\n                *(_DWORD *)v36 = *(_DWORD *)v63;\n                *(_DWORD *)&v36[v34 - 4] = *(_DWORD *)&v63[v34 - 4];\n              }\n              else if ( v34 )\n              {\n                *v36 = v63[0];\n                if ( (v34 & 2) != 0 )\n                  *(_WORD *)&v36[v34 - 2] = *(_WORD *)&v63[v34 - 2];\n              }\n              v37 = v32 + 1;\n              v38 = &v30[v35 - 1];\n              if ( v37 >= 8 )\n              {\n                *(_QWORD *)v38 = v64[0];\n                *(_QWORD *)&v38[v37 - 8] = *(_QWORD *)&v63[v37 + 56];\n                v51 = (unsigned __int64)(v38 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v52 = &v38[-v51];\n                v53 = (char *)((char *)v64 - v52);\n                v54 = ((_DWORD)v52 + v37) & 0xFFFFFFF8;\n                if ( v54 >= 8 )\n                {\n                  v55 = v54 & 0xFFFFFFF8;\n                  v56 = 0;\n                  do\n                  {\n                    v57 = v56;\n                    v56 += 8;\n                    *(_QWORD *)(v51 + v57) = *(_QWORD *)&v53[v57];\n                  }\n                  while ( v56 < v55 );\n                }\n              }\n              else if ( (v37 & 4) != 0 )\n              {\n                *(_DWORD *)v38 = v64[0];\n                *(_DWORD *)&v38[v37 - 4] = *(_DWORD *)&v63[v37 + 60];\n              }\n              else if ( v37 )\n              {\n                *v38 = v64[0];\n                if ( (v37 & 2) != 0 )\n                  *(_WORD *)&v38[v37 - 2] = *(_WORD *)&v63[v37 + 62];\n              }\n              v1 = v30;\n              IO_read_ptr = v20->_IO_read_ptr;\n              if ( IO_read_ptr < v20->_IO_read_end )\n                goto LABEL_31;\n            }\n            v39 = v20;\n            v2 = v21;\n            sub_409550(v39);\n            if ( !v61 )\n              goto LABEL_25;\n            v1[v61] = 0;\n            goto LABEL_26;\n          }\n          close(v17);\n        }\nLABEL_25:\n        v1 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\nLABEL_26:\n        free(v13);\n        goto LABEL_20;\n      }\n      if ( v7[v8 - 1] == 47 )\n      {\n        v11 = v8 + 14;\n        goto LABEL_18;\n      }\n      v14 = v8 + 15;\n      v9 = v8 + 1;\n    }\n    else\n    {\n      v14 = 115LL;\n      v9 = 101LL;\n      v10 = 100LL;\n      v7 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n    }\n    v15 = (char *)malloc(v14);\n    v13 = v15;\n    if ( !v15 )\n      goto LABEL_19;\n    memcpy(v15, v7, v10);\n    v13[v10] = 47;\n    goto LABEL_24;\n  }\nLABEL_4:\n  v3 = *v1;\n  if ( *v1 )\n  {\n    while ( strcmp(v2, v1) && (v3 != 42 || v1[1]) )\n    {\n      v4 = &v1[strlen(v1) + 1];\n      v1 = (char *)&v4[strlen(v4) + 1];\n      v3 = *v1;\n      if ( !*v1 )\n        goto LABEL_11;\n    }\n    v2 = &v1[strlen(v1) + 1];\n  }\nLABEL_11:\n  if ( !*v2 )\n    return \"ASCII\";\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_40AFC0",
            "funcStartAddr": "0x401fbe",
            "funcEndAddr": "0x401fc3",
            "decompiledFuncCode": "char *__fastcall sub_40AFC0(void *a1, size_t *a2, _BYTE *a3, __int64 a4)\n{\n  __int64 v6; // rax\n  unsigned __int64 v7; // rax\n  size_t v8; // rdi\n  char *v9; // rax\n  size_t v10; // r12\n  char *v11; // r14\n  _BYTE *v12; // r8\n  char *v13; // rbx\n  size_t v14; // r15\n  _BYTE *v15; // rcx\n  void *v16; // rcx\n  unsigned __int64 v17; // rax\n  size_t v18; // r13\n  bool v19; // dl\n  char *v20; // rax\n  char *v21; // rax\n  void *v22; // rsp\n  char *v23; // rax\n  char v24; // r15\n  __int64 v25; // rax\n  char *v26; // r8\n  long double *v27; // rdx\n  int v28; // eax\n  char v29; // al\n  int v30; // eax\n  char *v31; // r15\n  const char *v32; // rdi\n  _BYTE *v33; // rsi\n  _BYTE *v34; // rdx\n  _BYTE *v35; // rsi\n  _BYTE *v36; // rdx\n  __int64 v37; // rax\n  char v38; // al\n  __int64 v39; // rax\n  char *v40; // rax\n  __int64 v41; // rax\n  char *v42; // r8\n  int v43; // eax\n  unsigned __int64 v44; // rax\n  char *v45; // r11\n  int *v46; // rax\n  char *v47; // r11\n  unsigned __int64 v48; // rbx\n  unsigned __int64 v49; // r10\n  char *v50; // rdx\n  char *v51; // rcx\n  __int64 v52; // rsi\n  _DWORD *v53; // r8\n  unsigned __int64 v54; // rdx\n  unsigned __int64 v55; // rcx\n  void *v56; // r15\n  unsigned __int64 v58; // rax\n  char *v59; // rax\n  char v61; // fps^1\n  char *v65; // rdx\n  char *v66; // rdi\n  int v67; // r11d\n  __int64 v68; // rcx\n  _DWORD *v69; // rcx\n  char *v70; // rdi\n  unsigned __int64 v71; // r9\n  int v72; // eax\n  int v73; // edx\n  __int64 v74; // rax\n  bool v75; // cf\n  unsigned __int64 v76; // rax\n  bool v77; // bl\n  char *v78; // rax\n  int v79; // ebx\n  __int64 v80; // rax\n  char *v81; // rdi\n  long double v82; // fst7\n  __int64 v83; // rax\n  char *v84; // rdi\n  double v85; // xmm0_8\n  unsigned __int64 v86; // rax\n  void *v87; // rax\n  char *v88; // rax\n  char *v89; // rcx\n  int v90; // r8d\n  __int16 v91; // ax\n  char *v92; // r15\n  char *v93; // rax\n  char *v94; // rax\n  char *v95; // rax\n  char v96; // al\n  char *v97; // r9\n  size_t v98; // r8\n  unsigned __int64 v99; // r10\n  char *v100; // rdi\n  __int64 v101; // rax\n  char *v102; // r10\n  unsigned __int64 v103; // rax\n  char *v104; // rax\n  char *v105; // rsi\n  char v106; // al\n  size_t v107; // r15\n  size_t v108; // r14\n  bool v109; // r13\n  char *v110; // rax\n  char *v111; // rax\n  __int64 v112; // rax\n  char *v113; // r10\n  char *v114; // rax\n  char *v115; // rax\n  char *v116; // rax\n  __int64 v117; // rsi\n  __int64 v118; // rdx\n  char v119; // al\n  __int64 v120; // rdx\n  char *v121; // rax\n  char *v122; // rax\n  __int64 v123; // rdx\n  char v124; // al\n  char *v125; // rax\n  char *v126; // rsi\n  __int64 v127; // r9\n  __int64 v128; // rdx\n  char *v129; // rax\n  char *v130; // rsi\n  char *v131; // rdi\n  __int64 v132; // rax\n  __int64 v133; // rsi\n  unsigned __int64 v134; // rax\n  char v135; // al\n  __int64 v136; // rsi\n  char v137; // al\n  char *v138; // rax\n  __int64 v139; // rdx\n  char v140; // al\n  char *v141; // rax\n  char *v142; // rax\n  char *v143; // rax\n  void *v144; // rdx\n  char v145; // al\n  _BYTE *v146; // rax\n  char *v147; // rax\n  char v148; // al\n  int *v149; // [rsp+10h] [rbp-700h]\n  int *v150; // [rsp+18h] [rbp-6F8h]\n  __int64 v151; // [rsp+20h] [rbp-6F0h] BYREF\n  unsigned __int64 v152; // [rsp+28h] [rbp-6E8h]\n  char *v153; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v155; // [rsp+40h] [rbp-6D0h]\n  void *v156; // [rsp+48h] [rbp-6C8h]\n  char *v157; // [rsp+50h] [rbp-6C0h]\n  __int64 v158; // [rsp+58h] [rbp-6B8h]\n  _BYTE *v159; // [rsp+60h] [rbp-6B0h]\n  char *v160; // [rsp+68h] [rbp-6A8h]\n  long double v161; // [rsp+70h] [rbp-6A0h]\n  void *v162; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v164; // [rsp+94h] [rbp-67Ch] BYREF\n  unsigned int v165; // [rsp+98h] [rbp-678h]\n  unsigned int v166; // [rsp+9Ch] [rbp-674h]\n  char v167[8]; // [rsp+A0h] [rbp-670h] BYREF\n  void *v168; // [rsp+A8h] [rbp-668h]\n  _BYTE v169[224]; // [rsp+B0h] [rbp-660h] BYREF\n  __int64 v170; // [rsp+190h] [rbp-580h] BYREF\n  void *v171; // [rsp+198h] [rbp-578h]\n  __int64 v172; // [rsp+1A0h] [rbp-570h]\n  __int64 v173; // [rsp+1A8h] [rbp-568h]\n  _BYTE v174[624]; // [rsp+1B0h] [rbp-560h] BYREF\n  char v175[752]; // [rsp+420h] [rbp-2F0h] BYREF\n\n  src = a1;\n  v155 = a2;\n  if ( (int)sub_40CD00(a3, &v170, v167) < 0 )\n    return 0LL;\n  if ( (int)sub_40CAE0(a4, v167) >= 0 )\n  {\n    v6 = v172 + 7;\n    if ( (unsigned __int64)(v172 + 7) <= 6 )\n      v6 = -1LL;\n    v75 = __CFADD__(v173, v6);\n    v7 = v173 + v6;\n    if ( v75 )\n      goto LABEL_112;\n    v8 = v7 + 6;\n    if ( v7 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v8 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v22 = alloca(v7 + 14);\n      v160 = (char *)&v151;\n    }\n    else\n    {\n      if ( v7 == -7LL )\n        goto LABEL_112;\n      v9 = (char *)malloc(v8);\n      v160 = v9;\n      if ( !v9 )\n        goto LABEL_112;\n      ptr = v9;\n    }\n    v10 = 0LL;\n    if ( src )\n      v10 = *v155;\n    v11 = (char *)v171;\n    v12 = a3;\n    v13 = (char *)src;\n    v158 = 0LL;\n    v14 = 0LL;\n    v15 = *(_BYTE **)v171;\n    if ( *(_BYTE **)v171 == v12 )\n      goto LABEL_111;\nLABEL_14:\n    v16 = (void *)(v15 - v12);\n    v17 = (unsigned __int64)v16 + v14;\n    v18 = (size_t)v16 + v14;\n    if ( __CFADD__(v16, v14) )\n    {\n      if ( v10 != -1LL )\n        goto LABEL_88;\n      v18 = -1LL;\n    }\n    else if ( v10 < v17 )\n    {\n      if ( v10 )\n      {\n        if ( (v10 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v10 *= 2LL;\n        if ( v10 >= v17 )\n        {\nLABEL_28:\n          v19 = v13 == src;\n          if ( !v13 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v17 <= 0xC )\n      {\n        v10 = 12LL;\n        v19 = v13 == src;\n        if ( !v13 )\n        {\nLABEL_19:\n          v159 = v12;\n          LOBYTE(v161) = v19;\n          v162 = v16;\n          v20 = (char *)malloc(v10);\n          v16 = v162;\n          v12 = v159;\n          if ( !v20 )\n            goto LABEL_88;\n          if ( v14 && LOBYTE(v161) )\n          {\n            *(_QWORD *)&v161 = v159;\n            v21 = (char *)memcpy(v20, v13, v14);\n            v16 = v162;\n            v12 = *(_BYTE **)&v161;\n            v13 = v21;\n          }\n          else\n          {\n            v13 = v20;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v19 )\n        {\n          *(_QWORD *)&v161 = v12;\n          v162 = v16;\n          v23 = (char *)realloc(v13, v10);\n          if ( !v23 )\n            goto LABEL_126;\n          v16 = v162;\n          v12 = *(_BYTE **)&v161;\n          v13 = v23;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v17 == -1LL )\n        goto LABEL_88;\n      v10 = (size_t)v16 + v14;\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v13[v14], v12, (size_t)v16);\n    while ( v170 != v158 )\n    {\n      v24 = v11[72];\n      v25 = *((_QWORD *)v11 + 10);\n      if ( v24 == 37 )\n      {\n        if ( v25 != -1 )\n          goto LABEL_200;\n        v58 = v18 + 1;\n        v14 = v18 + 1;\n        if ( v18 == -1LL )\n        {\n          if ( v10 != -1LL )\n            goto LABEL_88;\n          v14 = -1LL;\n        }\n        else if ( v10 < v58 )\n        {\n          if ( v10 )\n          {\n            if ( (v10 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v10 *= 2LL;\n            if ( v10 < v58 )\n              goto LABEL_238;\n          }\n          else\n          {\n            if ( v58 <= 0xC )\n            {\n              v10 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_238:\n            if ( v18 == -2LL )\n              goto LABEL_88;\n            v10 = v18 + 1;\n          }\nLABEL_105:\n          if ( v13 && v13 != src )\n          {\n            v59 = (char *)realloc(v13, v10);\n            if ( v59 )\n            {\n              v13 = v59;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v56 = v13;\n            *(_QWORD *)&v161 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v162) = v13 == src;\n          v95 = (char *)malloc(v10);\n          if ( !v95 )\n            goto LABEL_88;\n          if ( v18 && (_BYTE)v162 )\n            v13 = (char *)memcpy(v95, v13, v18);\n          else\n            v13 = v95;\n        }\nLABEL_109:\n        v13[v18] = 37;\n        goto LABEL_110;\n      }\n      if ( v25 == -1 )\n        goto LABEL_200;\n      v26 = (char *)v168;\n      v27 = (long double *)((char *)v168 + 32 * v25);\n      v28 = *(_DWORD *)v27;\n      LODWORD(v162) = *(_DWORD *)v27;\n      if ( v24 != 110 )\n      {\n        v29 = v24 & 0xDF;\n        if ( ((unsigned __int8)((v24 & 0xDF) - 69) <= 2u || v29 == 65) && (_DWORD)v162 == 12 )\n        {\n          _FST7 = v27[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v65 = (char *)*((_QWORD *)v11 + 3);\n            v66 = (char *)*((_QWORD *)v11 + 4);\n            v67 = *((_DWORD *)v11 + 4);\n            if ( v65 == v66 )\n            {\n              v49 = 0LL;\n            }\n            else\n            {\n              v68 = *((_QWORD *)v11 + 5);\n              if ( v68 == -1 )\n              {\n                v49 = 0LL;\n                v162 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v126 = v65 + 1;\n                  v127 = -1LL;\n                  v128 = *v65 - 48;\n                  if ( v49 <= 0x1999999999999999LL )\n                    v127 = 10 * v49;\n                  v75 = __CFADD__(v127, v128);\n                  v49 = v127 + v128;\n                  v65 = v126;\n                  if ( v75 )\n                  {\n                    if ( v66 == v126 )\n                    {\nLABEL_81:\n                      v49 = (unsigned __int64)v162;\n                      goto LABEL_82;\n                    }\n                    while ( *v65++ != 48 )\n                    {\n                      if ( v66 == v65 )\n                        goto LABEL_81;\n                    }\n                    v49 = -1LL;\n                  }\n                  if ( v66 == v65 )\n                    goto LABEL_82;\n                }\n              }\n              v69 = (char *)v168 + 32 * v68;\n              if ( *v69 != 5 )\n                goto LABEL_200;\n              v49 = (int)v69[4];\n              if ( (v49 & 0x80000000) != 0LL )\n              {\n                v67 |= 2u;\n                v49 = -(__int64)v49;\n              }\n            }\nLABEL_82:\n            v50 = (char *)*((_QWORD *)v11 + 6);\n            v51 = (char *)*((_QWORD *)v11 + 7);\n            if ( v50 != v51 )\n            {\n              v52 = *((_QWORD *)v11 + 8);\n              if ( v52 == -1 )\n              {\n                v129 = v50 + 1;\n                v54 = 0LL;\n                if ( v51 != v129 )\n                {\n                  v130 = v129;\n                  while ( 1 )\n                  {\n                    v131 = v130 + 1;\n                    v132 = *v130 - 48;\n                    v133 = -1LL;\n                    if ( v54 <= 0x1999999999999999LL )\n                      v133 = 10 * v54;\n                    v75 = __CFADD__(v133, v132);\n                    v134 = v133 + v132;\n                    v130 = v131;\n                    v54 = v134;\n                    if ( v75 )\n                    {\n                      if ( v51 == v131 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v130 = v131 + 1;\n                        if ( *v131 == 48 )\n                          break;\n                        if ( v51 == v130 )\n                          goto LABEL_88;\n                        ++v131;\n                      }\n                      v54 = -1LL;\n                    }\n                    if ( v51 == v130 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_375;\n              }\n              v53 = (char *)v168 + 32 * v52;\n              if ( *v53 != 5 )\n                goto LABEL_200;\n              v54 = (int)v53[4];\n              if ( (v54 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v54 )\n                {\n                  v55 = v54 + 12;\n                  if ( v54 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_190:\n                  v86 = v55;\n                  if ( v49 >= v55 )\n                    v86 = v49;\n                  v75 = __CFADD__(v86, 1LL);\n                  v87 = (void *)(v86 + 1);\n                  v162 = v87;\n                  if ( v75 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v87 <= 0x2BC )\n                  {\n                    v89 = v175;\n                  }\n                  else\n                  {\n                    v156 = (void *)v49;\n                    v157 = (char *)v54;\n                    LODWORD(v159) = v67;\n                    v161 = _FST7;\n                    if ( v87 == (void *)-1LL )\n                      goto LABEL_88;\n                    v88 = (char *)malloc((size_t)v87);\n                    v67 = (int)v159;\n                    _FST7 = v161;\n                    v89 = v88;\n                    v54 = (unsigned __int64)v157;\n                    v49 = (unsigned __int64)v156;\n                    if ( !v88 )\n                      goto LABEL_88;\n                  }\n                  v90 = (unsigned __int16)v165;\n                  LOBYTE(v91) = v165;\n                  HIBYTE(v91) = BYTE1(v165) | 3;\n                  LOWORD(v165) = v91;\n                  __asm { fxam }\n                  if ( (v61 & 2) != 0 )\n                  {\n                    *v89 = 45;\n                    _FST7 = -_FST7;\n                    v92 = v89 + 1;\n                  }\n                  else if ( (v67 & 4) != 0 )\n                  {\n                    v92 = v89 + 1;\n                    *v89 = 43;\n                  }\n                  else\n                  {\n                    v92 = v89;\n                    if ( (v67 & 8) != 0 )\n                    {\n                      v92 = v89 + 1;\n                      *v89 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_200;\n                    v97 = v92 + 3;\n                    if ( (unsigned __int8)(v11[72] - 65) > 0x19u )\n                    {\n                      v92[2] = 102;\n                      *(_WORD *)v92 = 28265;\n                    }\n                    else\n                    {\n                      v92[2] = 70;\n                      *(_WORD *)v92 = 20041;\n                    }\n                    v92 = 0LL;\n                    goto LABEL_263;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_200;\n                  v96 = v11[72] & 0xDF;\n                  switch ( v96 )\n                  {\n                    case 'F':\n                      *v92 = 48;\n                      if ( (v67 & 0x10) != 0 || v54 )\n                      {\n                        LODWORD(v152) = v90;\n                        v153 = (char *)v49;\n                        v156 = v89;\n                        v157 = (char *)v54;\n                        LODWORD(v159) = v67;\n                        *(_QWORD *)&v161 = v92 + 2;\n                        v122 = nl_langinfo(0x10000);\n                        v123 = (__int64)v157;\n                        v97 = *(char **)&v161;\n                        v124 = *v122;\n                        LOBYTE(v67) = (_BYTE)v159;\n                        v89 = (char *)v156;\n                        v49 = (unsigned __int64)v153;\n                        LOWORD(v90) = v152;\n                        if ( !v124 )\n                          v124 = 46;\n                        v92[1] = v124;\n                        if ( v123 )\n                        {\n                          v125 = v97;\n                          do\n                            *v125++ = 48;\n                          while ( v125 != &v92[v123 + 2] );\n                          v97 += v123;\n                        }\n                        goto LABEL_263;\n                      }\n                      goto LABEL_262;\n                    case 'E':\n                      *v92 = 48;\n                      if ( (v67 & 0x10) != 0 || (v105 = v92 + 1, v54) )\n                      {\n                        LODWORD(v152) = v90;\n                        v153 = (char *)v49;\n                        v156 = v89;\n                        v157 = (char *)v54;\n                        LODWORD(v159) = v67;\n                        *(_QWORD *)&v161 = v92 + 2;\n                        v138 = nl_langinfo(0x10000);\n                        v139 = (__int64)v157;\n                        v105 = *(char **)&v161;\n                        v140 = *v138;\n                        LOBYTE(v67) = (_BYTE)v159;\n                        v89 = (char *)v156;\n                        v49 = (unsigned __int64)v153;\n                        LOWORD(v90) = v152;\n                        if ( !v140 )\n                          v140 = 46;\n                        v92[1] = v140;\n                        if ( v139 )\n                        {\n                          v141 = v105;\n                          do\n                            *v141++ = 48;\n                          while ( v141 != &v92[v139 + 2] );\n                          v105 += v139;\n                        }\n                      }\n                      v106 = v11[72];\n                      v97 = v105 + 4;\n                      v105[3] = 48;\n                      *v105 = v106;\n                      *(_WORD *)(v105 + 1) = 12331;\n                      goto LABEL_263;\n                    case 'G':\n                      *v92 = 48;\n                      if ( (v67 & 0x10) != 0 )\n                      {\n                        if ( v54 )\n                        {\n                          HIDWORD(v151) = v90;\n                          v152 = v49;\n                          v153 = v92 + 2;\n                          v156 = v89;\n                          LODWORD(v157) = v67;\n                          v159 = (_BYTE *)v54;\n                          *(_QWORD *)&v161 = v54 - 1;\n                          v116 = nl_langinfo(0x10000);\n                          v117 = *(_QWORD *)&v161;\n                          v118 = (__int64)v159;\n                          v119 = *v116;\n                          LOBYTE(v67) = (_BYTE)v157;\n                          v89 = (char *)v156;\n                          v97 = v153;\n                          v49 = v152;\n                          LOWORD(v90) = WORD2(v151);\n                          if ( !v119 )\n                            v119 = 46;\n                          v92[1] = v119;\n                          if ( v117 )\n                          {\n                            v120 = (__int64)&v92[v118 + 1];\n                            v121 = v97;\n                            do\n                              *v121++ = 48;\n                            while ( v121 != (char *)v120 );\n                            v97 += v117;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v153) = v90;\n                          v156 = (void *)v49;\n                          v157 = v92 + 2;\n                          v159 = v89;\n                          LODWORD(v161) = v67;\n                          v147 = nl_langinfo(0x10000);\n                          LOBYTE(v67) = LOBYTE(v161);\n                          v89 = v159;\n                          v148 = *v147;\n                          v97 = v157;\n                          v49 = (unsigned __int64)v156;\n                          LOWORD(v90) = (_WORD)v153;\n                          if ( !v148 )\n                            v148 = 46;\n                          v92[1] = v148;\n                        }\n                        goto LABEL_263;\n                      }\nLABEL_262:\n                      v97 = v92 + 1;\n                      goto LABEL_263;\n                  }\n                  if ( v96 != 65 )\n                    goto LABEL_200;\n                  *v92 = 48;\n                  *(_QWORD *)&v161 = v92 + 2;\n                  v135 = v11[72];\n                  v92[2] = 48;\n                  v92[1] = v135 + 23;\n                  if ( (v67 & 0x10) != 0 || (v136 = (__int64)(v92 + 3), v54) )\n                  {\n                    HIDWORD(v151) = v90;\n                    v152 = v49;\n                    v153 = v89;\n                    v156 = (void *)v54;\n                    LODWORD(v157) = v67;\n                    v159 = v92 + 4;\n                    v143 = nl_langinfo(0x10000);\n                    v144 = v156;\n                    v136 = (__int64)v159;\n                    v145 = *v143;\n                    LOBYTE(v67) = (_BYTE)v157;\n                    v89 = v153;\n                    v49 = v152;\n                    LOWORD(v90) = WORD2(v151);\n                    if ( !v145 )\n                      v145 = 46;\n                    v92[3] = v145;\n                    if ( v144 )\n                    {\n                      v146 = (_BYTE *)v136;\n                      do\n                        *v146++ = 48;\n                      while ( v146 != (_BYTE *)v144 + (_QWORD)v92 + 4 );\n                      v136 += (__int64)v144;\n                    }\n                  }\n                  v137 = v11[72];\n                  v97 = (char *)(v136 + 3);\n                  *(_WORD *)(v136 + 1) = 12331;\n                  v92 = *(char **)&v161;\n                  *(_BYTE *)v136 = v137 + 15;\nLABEL_263:\n                  LOWORD(v165) = v90;\n                  v98 = v97 - v89;\n                  if ( v49 > v97 - v89 )\n                  {\n                    v99 = v49 - v98;\n                    v100 = &v97[v99];\n                    v98 = &v97[v99] - v89;\n                    if ( (v67 & 2) != 0 )\n                    {\n                      if ( v99 )\n                      {\n                        do\n                          *v97++ = 32;\n                        while ( v100 != v97 );\n                      }\n                    }\n                    else if ( (v67 & 0x20) != 0 && v92 )\n                    {\n                      if ( v92 >= v97 )\n                      {\n                        v92 = v97;\n                      }\n                      else\n                      {\n                        v101 = -1LL;\n                        do\n                        {\n                          v100[v101] = v97[v101];\n                          --v101;\n                        }\n                        while ( v101 != v92 - 1 - v97 );\n                      }\n                      if ( v99 )\n                      {\n                        v102 = &v92[v99];\n                        do\n                          *v92++ = 48;\n                        while ( v92 != v102 );\n                      }\n                    }\n                    else\n                    {\n                      v112 = -1LL;\n                      if ( v89 < v97 )\n                      {\n                        do\n                        {\n                          v100[v112] = v97[v112];\n                          --v112;\n                        }\n                        while ( v89 - 1 - v97 != v112 );\n                        v97 = v89;\n                      }\n                      if ( v99 )\n                      {\n                        v113 = &v97[v99];\n                        do\n                          *v97++ = 32;\n                        while ( v97 != v113 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v162 <= v98 )\n                    goto LABEL_200;\n                  v103 = v98 + v18;\n                  v14 = v98 + v18;\n                  if ( v10 - v18 <= v98 )\n                  {\n                    if ( __CFADD__(v98, v18) )\n                    {\n                      if ( v10 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v10 < v103 )\n                    {\n                      if ( v10 )\n                      {\n                        if ( (v10 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v10 *= 2LL;\n                        if ( v10 < v103 )\n                          goto LABEL_373;\n                      }\n                      else\n                      {\n                        if ( v103 <= 0xC )\n                        {\n                          v10 = 12LL;\n                          goto LABEL_280;\n                        }\nLABEL_373:\n                        if ( v103 == -1LL )\n                          goto LABEL_88;\n                        v10 = v98 + v18;\n                      }\nLABEL_280:\n                      if ( !v13 || v13 == src )\n                      {\n                        LOBYTE(v159) = v13 == src;\n                        *(_QWORD *)&v161 = v98;\n                        v162 = v89;\n                        v114 = (char *)malloc(v10);\n                        v89 = (char *)v162;\n                        v98 = *(_QWORD *)&v161;\n                        if ( !v114 )\n                          goto LABEL_88;\n                        if ( v18 && (_BYTE)v159 )\n                        {\n                          v115 = (char *)memcpy(v114, v13, v18);\n                          v89 = (char *)v162;\n                          v98 = *(_QWORD *)&v161;\n                          v13 = v115;\n                        }\n                        else\n                        {\n                          v13 = v114;\n                        }\n                      }\n                      else\n                      {\n                        *(_QWORD *)&v161 = v98;\n                        v162 = v89;\n                        v104 = (char *)realloc(v13, v10);\n                        if ( !v104 )\n                          goto LABEL_88;\n                        v89 = (char *)v162;\n                        v98 = *(_QWORD *)&v161;\n                        v13 = v104;\n                      }\n                    }\n                  }\n                  v162 = v89;\n                  memcpy(&v13[v18], v89, v98);\n                  if ( v162 != v175 )\n                    free(v162);\n                  goto LABEL_110;\n                }\nLABEL_375:\n                v55 = 12LL;\n                goto LABEL_190;\n              }\n            }\n            v55 = 12LL;\n            if ( v29 != 65 )\n              v55 = 18LL;\n            v54 = 0LL;\n            if ( v29 != 65 )\n              v54 = 6LL;\n            goto LABEL_190;\n          }\n        }\n        v30 = *((_DWORD *)v11 + 4);\n        v31 = v160 + 1;\n        *v160 = 37;\n        if ( (v30 & 1) != 0 )\n        {\n          v32 = v160;\n          v160[1] = 39;\n          v31 = (char *)(v32 + 2);\n        }\n        if ( (v30 & 2) != 0 )\n          *v31++ = 45;\n        if ( (v30 & 4) != 0 )\n          *v31++ = 43;\n        if ( (v30 & 8) != 0 )\n          *v31++ = 32;\n        if ( (v30 & 0x10) != 0 )\n          *v31++ = 35;\n        if ( (v30 & 0x40) != 0 )\n          *v31++ = 73;\n        if ( (v30 & 0x20) != 0 )\n          *v31++ = 48;\n        v33 = (_BYTE *)*((_QWORD *)v11 + 3);\n        v34 = (_BYTE *)*((_QWORD *)v11 + 4);\n        if ( v33 != v34 )\n        {\n          v159 = v26;\n          *(_QWORD *)&v161 = v34 - v33;\n          memcpy(v31, v33, v34 - v33);\n          v26 = v159;\n          v31 += *(_QWORD *)&v161;\n        }\n        v35 = (_BYTE *)*((_QWORD *)v11 + 6);\n        v36 = (_BYTE *)*((_QWORD *)v11 + 7);\n        if ( v35 != v36 )\n        {\n          v159 = v26;\n          *(_QWORD *)&v161 = v36 - v35;\n          memcpy(v31, v35, v36 - v35);\n          v26 = v159;\n          v31 += *(_QWORD *)&v161;\n        }\n        if ( (unsigned int)v162 <= 0x10 )\n        {\n          v37 = 1LL << (char)v162;\n          if ( ((1LL << (char)v162) & 0x14180) != 0 )\n            goto LABEL_125;\n          if ( (v37 & 0x1000) != 0 )\n          {\n            *v31++ = 76;\n          }\n          else\n          {\n            if ( (v37 & 0x600) == 0 )\n              goto LABEL_62;\n            *v31++ = 108;\nLABEL_125:\n            *v31++ = 108;\n          }\n        }\nLABEL_62:\n        v38 = v11[72];\n        v31[1] = 0;\n        *v31 = v38;\n        v39 = *((_QWORD *)v11 + 5);\n        if ( v39 != -1 )\n        {\n          v40 = &v26[32 * v39];\n          if ( *(_DWORD *)v40 == 5 )\n          {\n            LODWORD(v159) = 1;\n            v165 = *((_DWORD *)v40 + 4);\n            goto LABEL_65;\n          }\nLABEL_200:\n          abort();\n        }\n        LODWORD(v159) = 0;\nLABEL_65:\n        v41 = *((_QWORD *)v11 + 8);\n        if ( v41 != -1 )\n        {\n          v42 = &v26[32 * v41];\n          if ( *(_DWORD *)v42 != 5 )\n            goto LABEL_200;\n          v43 = (int)v159;\n          *(&v165 + (unsigned int)v159) = *((_DWORD *)v42 + 4);\n          LODWORD(v159) = v43 + 1;\n        }\n        v44 = v18 + 2;\n        if ( v18 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v10 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v10 < v44 )\n        {\n          if ( v10 )\n          {\n            if ( (v10 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v10 *= 2LL;\n            if ( v10 >= v44 )\n              goto LABEL_73;\n          }\n          else if ( v44 <= 0xC )\n          {\n            v10 = 12LL;\nLABEL_73:\n            if ( v13 && v13 != src )\n            {\n              v45 = (char *)realloc(v13, v10);\n              if ( v45 )\n                goto LABEL_76;\nLABEL_88:\n              v56 = v13;\n              *(_QWORD *)&v161 = __errno_location();\nLABEL_89:\n              if ( v56 == src || !v56 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v171 != v174 )\n                    free(v171);\n                  if ( v168 != v169 )\n                    free(v168);\n                  v13 = 0LL;\n                  **(_DWORD **)&v161 = 12;\n                  return v13;\n                }\nLABEL_112:\n                *(_QWORD *)&v161 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v56);\n              goto LABEL_91;\n            }\n            LOBYTE(v161) = v13 == src;\n            v94 = (char *)malloc(v10);\n            v45 = v94;\n            if ( !v94 )\n              goto LABEL_88;\n            if ( v18 && LOBYTE(v161) )\n              v45 = (char *)memcpy(v94, v13, v18);\nLABEL_76:\n            v45[v18] = 0;\n            v157 = v45;\n            v46 = __errno_location();\n            v47 = v157;\n            v157 = v31;\n            *(_QWORD *)&v161 = v46;\n            LODWORD(v153) = *v46;\n            while ( 2 )\n            {\n              v48 = 0x7FFFFFFFLL;\n              v164 = -1;\n              **(_DWORD **)&v161 = 0;\n              if ( v10 - v18 <= 0x7FFFFFFF )\n                v48 = v10 - v18;\n              switch ( (int)v162 )\n              {\n                case 1:\n                  v71 = (unsigned int)*((char *)v168 + 32 * *((_QWORD *)v11 + 10) + 16);\n                  goto LABEL_150;\n                case 2:\n                  v71 = *((unsigned __int8 *)v168 + 32 * *((_QWORD *)v11 + 10) + 16);\n                  goto LABEL_150;\n                case 3:\n                  v71 = (unsigned int)*((__int16 *)v168 + 16 * *((_QWORD *)v11 + 10) + 8);\n                  goto LABEL_150;\n                case 4:\n                  v71 = *((unsigned __int16 *)v168 + 16 * *((_QWORD *)v11 + 10) + 8);\n                  goto LABEL_150;\n                case 5:\n                case 6:\n                case 13:\n                case 14:\n                  v71 = *((unsigned int *)v168 + 8 * *((_QWORD *)v11 + 10) + 4);\nLABEL_150:\n                  v70 = &v47[v18];\n                  v156 = v47;\n                  if ( (_DWORD)v159 != 1 )\n                  {\n                    if ( (_DWORD)v159 != 2 )\n                    {\n                      v149 = &v164;\n                      goto LABEL_153;\n                    }\n                    goto LABEL_209;\n                  }\n                  v150 = &v164;\n                  v149 = (int *)v71;\n                  break;\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                case 15:\n                case 16:\n                case 17:\n                  v70 = &v47[v18];\n                  v71 = *((_QWORD *)v168 + 4 * *((_QWORD *)v11 + 10) + 2);\n                  v156 = v47;\n                  if ( (_DWORD)v159 != 1 )\n                  {\n                    if ( (_DWORD)v159 != 2 )\n                    {\n                      v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                              v70,\n                              v48,\n                              1LL,\n                              -1LL,\n                              v160,\n                              v71,\n                              &v164,\n                              v150);\nLABEL_131:\n                      v47 = (char *)v156;\n                      goto LABEL_132;\n                    }\nLABEL_209:\n                    v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                            v70,\n                            v48,\n                            1LL,\n                            -1LL,\n                            v160,\n                            v165,\n                            v166,\n                            v71,\n                            &v164);\nLABEL_210:\n                    v47 = (char *)v156;\nLABEL_132:\n                    v73 = v164;\n                    if ( v164 < 0 )\n                    {\nLABEL_154:\n                      if ( v157[1] )\n                      {\n                        v157[1] = 0;\n                        continue;\n                      }\n                      if ( v72 < 0 )\n                      {\n                        v79 = **(_DWORD **)&v161;\n                        if ( !**(_DWORD **)&v161 )\n                        {\n                          v79 = 84;\n                          if ( (v11[72] & 0xEF) != 99 )\n                            v79 = 22;\n                        }\n                        if ( v47 != src && v47 )\n                          free(v47);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v171 != v174 )\n                          free(v171);\n                        if ( v168 != v169 )\n                          free(v168);\n                        **(_DWORD **)&v161 = v79;\n                        return 0LL;\n                      }\nLABEL_136:\n                      v164 = v72;\n                      v73 = v72;\nLABEL_137:\n                      if ( (unsigned int)(v73 + 1) < v48 )\n                      {\n                        v13 = v47;\n                        v14 = v18 + v73;\n                        **(_DWORD **)&v161 = (_DWORD)v153;\n                        goto LABEL_110;\n                      }\n                      if ( v10 - v18 > 0x7FFFFFFE )\n                      {\n                        if ( v47 != src && v47 )\n                          free(v47);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v171 != v174 )\n                          free(v171);\n                        if ( v168 != v169 )\n                          free(v168);\n                        v13 = 0LL;\n                        **(_DWORD **)&v161 = 75;\n                        return v13;\n                      }\n                      v74 = (unsigned int)(v73 + 2);\n                      v75 = __CFADD__(v18, v74);\n                      v76 = v18 + v74;\n                      if ( (v10 & 0x8000000000000000LL) != 0LL )\n                      {\n                        if ( v10 != -1LL )\n                          goto LABEL_202;\n                      }\n                      else\n                      {\n                        if ( v75 )\n                          goto LABEL_202;\n                        if ( 2 * v10 >= v76 )\n                          v76 = 2 * v10;\n                        if ( v10 < v76 )\n                        {\n                          v10 *= 2LL;\n                          if ( v10 < v76 )\n                          {\n                            if ( v76 == -1LL )\n                            {\nLABEL_202:\n                              v56 = v47;\n                              goto LABEL_89;\n                            }\n                            v10 = v76;\n                          }\n                          v77 = v47 == src;\n                          if ( !v47 || v47 == src )\n                          {\n                            v156 = v47;\n                            v93 = (char *)malloc(v10);\n                            v47 = (char *)v156;\n                            if ( !v93 )\n                              goto LABEL_202;\n                            if ( v18 && v77 )\n                              v47 = (char *)memcpy(v93, v156, v18);\n                            else\n                              v47 = v93;\n                          }\n                          else\n                          {\n                            v156 = v47;\n                            v78 = (char *)realloc(v47, v10);\n                            v47 = (char *)v156;\n                            if ( !v78 )\n                              goto LABEL_202;\n                            v47 = v78;\n                          }\n                        }\n                      }\n                      continue;\n                    }\nLABEL_133:\n                    if ( v73 < v48 && v47[v73 + v18] )\n                      goto LABEL_200;\n                    if ( v73 >= v72 )\n                      goto LABEL_137;\n                    goto LABEL_136;\n                  }\n                  v150 = &v164;\n                  v149 = (int *)v71;\n                  break;\n                case 11:\n                  v83 = *((_QWORD *)v11 + 10);\n                  v84 = &v47[v18];\n                  v156 = v47;\n                  v85 = *((double *)v168 + 4 * v83 + 2);\n                  if ( (_DWORD)v159 == 1 )\n                  {\n                    v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                            v84,\n                            v48,\n                            1LL,\n                            -1LL,\n                            v160,\n                            v165,\n                            v85,\n                            &v164,\n                            v150);\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v159 != 2 )\n                    {\n                      v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                              v84,\n                              v48,\n                              1LL,\n                              -1LL,\n                              v160,\n                              &v164,\n                              v85);\n                      v47 = (char *)v156;\n                      goto LABEL_132;\n                    }\n                    v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                            v84,\n                            v48,\n                            1LL,\n                            -1LL,\n                            v160,\n                            v165,\n                            v85,\n                            v166,\n                            &v164);\n                  }\n                  v47 = (char *)v156;\n                  goto LABEL_132;\n                case 12:\n                  v80 = *((_QWORD *)v11 + 10);\n                  v81 = &v47[v18];\n                  v156 = v47;\n                  v82 = *((long double *)v168 + 2 * v80 + 1);\n                  if ( (_DWORD)v159 == 1 )\n                  {\n                    v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                            v81,\n                            v48,\n                            1LL,\n                            -1LL,\n                            v160,\n                            v165,\n                            *(_OWORD *)&v82,\n                            &v164);\n                    goto LABEL_210;\n                  }\n                  if ( (_DWORD)v159 != 2 )\n                  {\n                    v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                            v81,\n                            v48,\n                            1LL,\n                            -1LL,\n                            v160,\n                            &v164,\n                            *(_OWORD *)&v82);\n                    goto LABEL_131;\n                  }\n                  v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                          v81,\n                          v48,\n                          1LL,\n                          -1LL,\n                          v160,\n                          v165,\n                          v166);\n                  v47 = (char *)v156;\n                  goto LABEL_132;\n                default:\n                  goto LABEL_408;\n              }\n              break;\n            }\n            v71 = v165;\nLABEL_153:\n            v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                    v70,\n                    v48,\n                    1LL,\n                    -1LL,\n                    v160,\n                    v71,\n                    v149,\n                    v150);\n            v73 = v164;\n            v47 = (char *)v156;\n            if ( v164 < 0 )\n              goto LABEL_154;\n            goto LABEL_133;\n          }\n          if ( v18 != -3LL )\n          {\n            v10 = v18 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v45 = v13;\n        goto LABEL_76;\n      }\n      switch ( v28 )\n      {\n        case 18:\n          v14 = v18;\n          **((_BYTE **)v27 + 2) = v18;\n          break;\n        case 19:\n          v14 = v18;\n          **((_WORD **)v27 + 2) = v18;\n          break;\n        case 20:\n          v14 = v18;\n          **((_DWORD **)v27 + 2) = v18;\n          break;\n        case 21:\n        case 22:\n          v14 = v18;\n          **((_QWORD **)v27 + 2) = v18;\n          break;\n        default:\nLABEL_408:\n          abort();\n      }\nLABEL_110:\n      v12 = (_BYTE *)*((_QWORD *)v11 + 1);\n      v11 += 88;\n      v15 = *(_BYTE **)v11;\n      ++v158;\n      if ( v15 != v12 )\n        goto LABEL_14;\nLABEL_111:\n      v18 = v14;\n    }\n    v107 = v18;\n    v108 = v18 + 1;\n    if ( v18 == -1LL )\n    {\n      if ( v10 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v10 < v108 )\n    {\n      if ( v10 )\n      {\n        if ( (v10 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v10 *= 2LL;\n        if ( v10 >= v108 )\n        {\nLABEL_303:\n          v109 = v13 == src;\n          if ( !v13 || v13 == src )\n          {\n            v142 = (char *)malloc(v10);\n            if ( !v142 )\n              goto LABEL_88;\n            if ( v107 && v109 )\n              v13 = (char *)memcpy(v142, v13, v107);\n            else\n              v13 = v142;\n          }\n          else\n          {\n            v110 = (char *)realloc(v13, v10);\n            if ( !v110 )\n              goto LABEL_126;\n            v13 = v110;\n          }\n          goto LABEL_307;\n        }\n      }\n      else if ( v108 <= 0xC )\n      {\n        v10 = 12LL;\n        goto LABEL_303;\n      }\n      if ( v18 == -2LL )\n        goto LABEL_88;\n      v10 = v18 + 1;\n      goto LABEL_303;\n    }\nLABEL_307:\n    v13[v107] = 0;\n    if ( v10 > v108 && v13 != src )\n    {\n      v111 = (char *)realloc(v13, v108);\n      if ( v111 )\n        v13 = v111;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v171 != v174 )\n      free(v171);\n    if ( v168 != v169 )\n      free(v168);\n    *v155 = v107;\n    return v13;\n  }\n  if ( v171 != v174 )\n    free(v171);\n  if ( v168 != v169 )\n    free(v168);\n  v13 = 0LL;\n  *__errno_location() = 22;\n  return v13;\n}\n\nchar *__fastcall sub_40AFC0(void *a1, size_t *a2, _BYTE *a3, __int64 a4)\n{\n  __int64 v6; // rax\n  unsigned __int64 v7; // rax\n  size_t v8; // rdi\n  char *v9; // rax\n  size_t v10; // r12\n  char *v11; // r14\n  _BYTE *v12; // r8\n  char *v13; // rbx\n  size_t v14; // r15\n  _BYTE *v15; // rcx\n  void *v16; // rcx\n  unsigned __int64 v17; // rax\n  size_t v18; // r13\n  bool v19; // dl\n  char *v20; // rax\n  char *v21; // rax\n  void *v22; // rsp\n  char *v23; // rax\n  char v24; // r15\n  __int64 v25; // rax\n  char *v26; // r8\n  long double *v27; // rdx\n  int v28; // eax\n  char v29; // al\n  int v30; // eax\n  char *v31; // r15\n  const char *v32; // rdi\n  _BYTE *v33; // rsi\n  _BYTE *v34; // rdx\n  _BYTE *v35; // rsi\n  _BYTE *v36; // rdx\n  __int64 v37; // rax\n  char v38; // al\n  __int64 v39; // rax\n  char *v40; // rax\n  __int64 v41; // rax\n  char *v42; // r8\n  int v43; // eax\n  unsigned __int64 v44; // rax\n  char *v45; // r11\n  int *v46; // rax\n  char *v47; // r11\n  unsigned __int64 v48; // rbx\n  unsigned __int64 v49; // r10\n  char *v50; // rdx\n  char *v51; // rcx\n  __int64 v52; // rsi\n  _DWORD *v53; // r8\n  unsigned __int64 v54; // rdx\n  unsigned __int64 v55; // rcx\n  void *v56; // r15\n  unsigned __int64 v58; // rax\n  char *v59; // rax\n  char v61; // fps^1\n  char *v65; // rdx\n  char *v66; // rdi\n  int v67; // r11d\n  __int64 v68; // rcx\n  _DWORD *v69; // rcx\n  char *v70; // rdi\n  unsigned __int64 v71; // r9\n  int v72; // eax\n  int v73; // edx\n  __int64 v74; // rax\n  bool v75; // cf\n  unsigned __int64 v76; // rax\n  bool v77; // bl\n  char *v78; // rax\n  int v79; // ebx\n  __int64 v80; // rax\n  char *v81; // rdi\n  long double v82; // fst7\n  __int64 v83; // rax\n  char *v84; // rdi\n  double v85; // xmm0_8\n  unsigned __int64 v86; // rax\n  void *v87; // rax\n  char *v88; // rax\n  char *v89; // rcx\n  int v90; // r8d\n  __int16 v91; // ax\n  char *v92; // r15\n  char *v93; // rax\n  char *v94; // rax\n  char *v95; // rax\n  char v96; // al\n  char *v97; // r9\n  size_t v98; // r8\n  unsigned __int64 v99; // r10\n  char *v100; // rdi\n  __int64 v101; // rax\n  char *v102; // r10\n  unsigned __int64 v103; // rax\n  char *v104; // rax\n  char *v105; // rsi\n  char v106; // al\n  size_t v107; // r15\n  size_t v108; // r14\n  bool v109; // r13\n  char *v110; // rax\n  char *v111; // rax\n  __int64 v112; // rax\n  char *v113; // r10\n  char *v114; // rax\n  char *v115; // rax\n  char *v116; // rax\n  __int64 v117; // rsi\n  __int64 v118; // rdx\n  char v119; // al\n  __int64 v120; // rdx\n  char *v121; // rax\n  char *v122; // rax\n  __int64 v123; // rdx\n  char v124; // al\n  char *v125; // rax\n  char *v126; // rsi\n  __int64 v127; // r9\n  __int64 v128; // rdx\n  char *v129; // rax\n  char *v130; // rsi\n  char *v131; // rdi\n  __int64 v132; // rax\n  __int64 v133; // rsi\n  unsigned __int64 v134; // rax\n  char v135; // al\n  __int64 v136; // rsi\n  char v137; // al\n  char *v138; // rax\n  __int64 v139; // rdx\n  char v140; // al\n  char *v141; // rax\n  char *v142; // rax\n  char *v143; // rax\n  void *v144; // rdx\n  char v145; // al\n  _BYTE *v146; // rax\n  char *v147; // rax\n  char v148; // al\n  int *v149; // [rsp+10h] [rbp-700h]\n  int *v150; // [rsp+18h] [rbp-6F8h]\n  __int64 v151; // [rsp+20h] [rbp-6F0h] BYREF\n  unsigned __int64 v152; // [rsp+28h] [rbp-6E8h]\n  char *v153; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v155; // [rsp+40h] [rbp-6D0h]\n  void *v156; // [rsp+48h] [rbp-6C8h]\n  char *v157; // [rsp+50h] [rbp-6C0h]\n  __int64 v158; // [rsp+58h] [rbp-6B8h]\n  _BYTE *v159; // [rsp+60h] [rbp-6B0h]\n  char *v160; // [rsp+68h] [rbp-6A8h]\n  long double v161; // [rsp+70h] [rbp-6A0h]\n  void *v162; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v164; // [rsp+94h] [rbp-67Ch] BYREF\n  unsigned int v165; // [rsp+98h] [rbp-678h]\n  unsigned int v166; // [rsp+9Ch] [rbp-674h]\n  char v167[8]; // [rsp+A0h] [rbp-670h] BYREF\n  void *v168; // [rsp+A8h] [rbp-668h]\n  _BYTE v169[224]; // [rsp+B0h] [rbp-660h] BYREF\n  __int64 v170; // [rsp+190h] [rbp-580h] BYREF\n  void *v171; // [rsp+198h] [rbp-578h]\n  __int64 v172; // [rsp+1A0h] [rbp-570h]\n  __int64 v173; // [rsp+1A8h] [rbp-568h]\n  _BYTE v174[624]; // [rsp+1B0h] [rbp-560h] BYREF\n  char v175[752]; // [rsp+420h] [rbp-2F0h] BYREF\n\n  src = a1;\n  v155 = a2;\n  if ( (int)sub_40CD00(a3, &v170, v167) < 0 )\n    return 0LL;\n  if ( (int)sub_40CAE0(a4, v167) >= 0 )\n  {\n    v6 = v172 + 7;\n    if ( (unsigned __int64)(v172 + 7) <= 6 )\n      v6 = -1LL;\n    v75 = __CFADD__(v173, v6);\n    v7 = v173 + v6;\n    if ( v75 )\n      goto LABEL_112;\n    v8 = v7 + 6;\n    if ( v7 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v8 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v22 = alloca(v7 + 14);\n      v160 = (char *)&v151;\n    }\n    else\n    {\n      if ( v7 == -7LL )\n        goto LABEL_112;\n      v9 = (char *)malloc(v8);\n      v160 = v9;\n      if ( !v9 )\n        goto LABEL_112;\n      ptr = v9;\n    }\n    v10 = 0LL;\n    if ( src )\n      v10 = *v155;\n    v11 = (char *)v171;\n    v12 = a3;\n    v13 = (char *)src;\n    v158 = 0LL;\n    v14 = 0LL;\n    v15 = *(_BYTE **)v171;\n    if ( *(_BYTE **)v171 == v12 )\n      goto LABEL_111;\nLABEL_14:\n    v16 = (void *)(v15 - v12);\n    v17 = (unsigned __int64)v16 + v14;\n    v18 = (size_t)v16 + v14;\n    if ( __CFADD__(v16, v14) )\n    {\n      if ( v10 != -1LL )\n        goto LABEL_88;\n      v18 = -1LL;\n    }\n    else if ( v10 < v17 )\n    {\n      if ( v10 )\n      {\n        if ( (v10 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v10 *= 2LL;\n        if ( v10 >= v17 )\n        {\nLABEL_28:\n          v19 = v13 == src;\n          if ( !v13 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v17 <= 0xC )\n      {\n        v10 = 12LL;\n        v19 = v13 == src;\n        if ( !v13 )\n        {\nLABEL_19:\n          v159 = v12;\n          LOBYTE(v161) = v19;\n          v162 = v16;\n          v20 = (char *)malloc(v10);\n          v16 = v162;\n          v12 = v159;\n          if ( !v20 )\n            goto LABEL_88;\n          if ( v14 && LOBYTE(v161) )\n          {\n            *(_QWORD *)&v161 = v159;\n            v21 = (char *)memcpy(v20, v13, v14);\n            v16 = v162;\n            v12 = *(_BYTE **)&v161;\n            v13 = v21;\n          }\n          else\n          {\n            v13 = v20;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v19 )\n        {\n          *(_QWORD *)&v161 = v12;\n          v162 = v16;\n          v23 = (char *)realloc(v13, v10);\n          if ( !v23 )\n            goto LABEL_126;\n          v16 = v162;\n          v12 = *(_BYTE **)&v161;\n          v13 = v23;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v17 == -1LL )\n        goto LABEL_88;\n      v10 = (size_t)v16 + v14;\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v13[v14], v12, (size_t)v16);\n    while ( v170 != v158 )\n    {\n      v24 = v11[72];\n      v25 = *((_QWORD *)v11 + 10);\n      if ( v24 == 37 )\n      {\n        if ( v25 != -1 )\n          goto LABEL_200;\n        v58 = v18 + 1;\n        v14 = v18 + 1;\n        if ( v18 == -1LL )\n        {\n          if ( v10 != -1LL )\n            goto LABEL_88;\n          v14 = -1LL;\n        }\n        else if ( v10 < v58 )\n        {\n          if ( v10 )\n          {\n            if ( (v10 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v10 *= 2LL;\n            if ( v10 < v58 )\n              goto LABEL_238;\n          }\n          else\n          {\n            if ( v58 <= 0xC )\n            {\n              v10 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_238:\n            if ( v18 == -2LL )\n              goto LABEL_88;\n            v10 = v18 + 1;\n          }\nLABEL_105:\n          if ( v13 && v13 != src )\n          {\n            v59 = (char *)realloc(v13, v10);\n            if ( v59 )\n            {\n              v13 = v59;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v56 = v13;\n            *(_QWORD *)&v161 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v162) = v13 == src;\n          v95 = (char *)malloc(v10);\n          if ( !v95 )\n            goto LABEL_88;\n          if ( v18 && (_BYTE)v162 )\n            v13 = (char *)memcpy(v95, v13, v18);\n          else\n            v13 = v95;\n        }\nLABEL_109:\n        v13[v18] = 37;\n        goto LABEL_110;\n      }\n      if ( v25 == -1 )\n        goto LABEL_200;\n      v26 = (char *)v168;\n      v27 = (long double *)((char *)v168 + 32 * v25);\n      v28 = *(_DWORD *)v27;\n      LODWORD(v162) = *(_DWORD *)v27;\n      if ( v24 != 110 )\n      {\n        v29 = v24 & 0xDF;\n        if ( ((unsigned __int8)((v24 & 0xDF) - 69) <= 2u || v29 == 65) && (_DWORD)v162 == 12 )\n        {\n          _FST7 = v27[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v65 = (char *)*((_QWORD *)v11 + 3);\n            v66 = (char *)*((_QWORD *)v11 + 4);\n            v67 = *((_DWORD *)v11 + 4);\n            if ( v65 == v66 )\n            {\n              v49 = 0LL;\n            }\n            else\n            {\n              v68 = *((_QWORD *)v11 + 5);\n              if ( v68 == -1 )\n              {\n                v49 = 0LL;\n                v162 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v126 = v65 + 1;\n                  v127 = -1LL;\n                  v128 = *v65 - 48;\n                  if ( v49 <= 0x1999999999999999LL )\n                    v127 = 10 * v49;\n                  v75 = __CFADD__(v127, v128);\n                  v49 = v127 + v128;\n                  v65 = v126;\n                  if ( v75 )\n                  {\n                    if ( v66 == v126 )\n                    {\nLABEL_81:\n                      v49 = (unsigned __int64)v162;\n                      goto LABEL_82;\n                    }\n                    while ( *v65++ != 48 )\n                    {\n                      if ( v66 == v65 )\n                        goto LABEL_81;\n                    }\n                    v49 = -1LL;\n                  }\n                  if ( v66 == v65 )\n                    goto LABEL_82;\n                }\n              }\n              v69 = (char *)v168 + 32 * v68;\n              if ( *v69 != 5 )\n                goto LABEL_200;\n              v49 = (int)v69[4];\n              if ( (v49 & 0x80000000) != 0LL )\n              {\n                v67 |= 2u;\n                v49 = -(__int64)v49;\n              }\n            }\nLABEL_82:\n            v50 = (char *)*((_QWORD *)v11 + 6);\n            v51 = (char *)*((_QWORD *)v11 + 7);\n            if ( v50 != v51 )\n            {\n              v52 = *((_QWORD *)v11 + 8);\n              if ( v52 == -1 )\n              {\n                v129 = v50 + 1;\n                v54 = 0LL;\n                if ( v51 != v129 )\n                {\n                  v130 = v129;\n                  while ( 1 )\n                  {\n                    v131 = v130 + 1;\n                    v132 = *v130 - 48;\n                    v133 = -1LL;\n                    if ( v54 <= 0x1999999999999999LL )\n                      v133 = 10 * v54;\n                    v75 = __CFADD__(v133, v132);\n                    v134 = v133 + v132;\n                    v130 = v131;\n                    v54 = v134;\n                    if ( v75 )\n                    {\n                      if ( v51 == v131 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v130 = v131 + 1;\n                        if ( *v131 == 48 )\n                          break;\n                        if ( v51 == v130 )\n                          goto LABEL_88;\n                        ++v131;\n                      }\n                      v54 = -1LL;\n                    }\n                    if ( v51 == v130 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_375;\n              }\n              v53 = (char *)v168 + 32 * v52;\n              if ( *v53 != 5 )\n                goto LABEL_200;\n              v54 = (int)v53[4];\n              if ( (v54 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v54 )\n                {\n                  v55 = v54 + 12;\n                  if ( v54 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_190:\n                  v86 = v55;\n                  if ( v49 >= v55 )\n                    v86 = v49;\n                  v75 = __CFADD__(v86, 1LL);\n                  v87 = (void *)(v86 + 1);\n                  v162 = v87;\n                  if ( v75 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v87 <= 0x2BC )\n                  {\n                    v89 = v175;\n                  }\n                  else\n                  {\n                    v156 = (void *)v49;\n                    v157 = (char *)v54;\n                    LODWORD(v159) = v67;\n                    v161 = _FST7;\n                    if ( v87 == (void *)-1LL )\n                      goto LABEL_88;\n                    v88 = (char *)malloc((size_t)v87);\n                    v67 = (int)v159;\n                    _FST7 = v161;\n                    v89 = v88;\n                    v54 = (unsigned __int64)v157;\n                    v49 = (unsigned __int64)v156;\n                    if ( !v88 )\n                      goto LABEL_88;\n                  }\n                  v90 = (unsigned __int16)v165;\n                  LOBYTE(v91) = v165;\n                  HIBYTE(v91) = BYTE1(v165) | 3;\n                  LOWORD(v165) = v91;\n                  __asm { fxam }\n                  if ( (v61 & 2) != 0 )\n                  {\n                    *v89 = 45;\n                    _FST7 = -_FST7;\n                    v92 = v89 + 1;\n                  }\n                  else if ( (v67 & 4) != 0 )\n                  {\n                    v92 = v89 + 1;\n                    *v89 = 43;\n                  }\n                  else\n                  {\n                    v92 = v89;\n                    if ( (v67 & 8) != 0 )\n                    {\n                      v92 = v89 + 1;\n                      *v89 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_200;\n                    v97 = v92 + 3;\n                    if ( (unsigned __int8)(v11[72] - 65) > 0x19u )\n                    {\n                      v92[2] = 102;\n                      *(_WORD *)v92 = 28265;\n                    }\n                    else\n                    {\n                      v92[2] = 70;\n                      *(_WORD *)v92 = 20041;\n                    }\n                    v92 = 0LL;\n                    goto LABEL_263;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_200;\n                  v96 = v11[72] & 0xDF;\n                  switch ( v96 )\n                  {\n                    case 'F':\n                      *v92 = 48;\n                      if ( (v67 & 0x10) != 0 || v54 )\n                      {\n                        LODWORD(v152) = v90;\n                        v153 = (char *)v49;\n                        v156 = v89;\n                        v157 = (char *)v54;\n                        LODWORD(v159) = v67;\n                        *(_QWORD *)&v161 = v92 + 2;\n                        v122 = nl_langinfo(0x10000);\n                        v123 = (__int64)v157;\n                        v97 = *(char **)&v161;\n                        v124 = *v122;\n                        LOBYTE(v67) = (_BYTE)v159;\n                        v89 = (char *)v156;\n                        v49 = (unsigned __int64)v153;\n                        LOWORD(v90) = v152;\n                        if ( !v124 )\n                          v124 = 46;\n                        v92[1] = v124;\n                        if ( v123 )\n                        {\n                          v125 = v97;\n                          do\n                            *v125++ = 48;\n                          while ( v125 != &v92[v123 + 2] );\n                          v97 += v123;\n                        }\n                        goto LABEL_263;\n                      }\n                      goto LABEL_262;\n                    case 'E':\n                      *v92 = 48;\n                      if ( (v67 & 0x10) != 0 || (v105 = v92 + 1, v54) )\n                      {\n                        LODWORD(v152) = v90;\n                        v153 = (char *)v49;\n                        v156 = v89;\n                        v157 = (char *)v54;\n                        LODWORD(v159) = v67;\n                        *(_QWORD *)&v161 = v92 + 2;\n                        v138 = nl_langinfo(0x10000);\n                        v139 = (__int64)v157;\n                        v105 = *(char **)&v161;\n                        v140 = *v138;\n                        LOBYTE(v67) = (_BYTE)v159;\n                        v89 = (char *)v156;\n                        v49 = (unsigned __int64)v153;\n                        LOWORD(v90) = v152;\n                        if ( !v140 )\n                          v140 = 46;\n                        v92[1] = v140;\n                        if ( v139 )\n                        {\n                          v141 = v105;\n                          do\n                            *v141++ = 48;\n                          while ( v141 != &v92[v139 + 2] );\n                          v105 += v139;\n                        }\n                      }\n                      v106 = v11[72];\n                      v97 = v105 + 4;\n                      v105[3] = 48;\n                      *v105 = v106;\n                      *(_WORD *)(v105 + 1) = 12331;\n                      goto LABEL_263;\n                    case 'G':\n                      *v92 = 48;\n                      if ( (v67 & 0x10) != 0 )\n                      {\n                        if ( v54 )\n                        {\n                          HIDWORD(v151) = v90;\n                          v152 = v49;\n                          v153 = v92 + 2;\n                          v156 = v89;\n                          LODWORD(v157) = v67;\n                          v159 = (_BYTE *)v54;\n                          *(_QWORD *)&v161 = v54 - 1;\n                          v116 = nl_langinfo(0x10000);\n                          v117 = *(_QWORD *)&v161;\n                          v118 = (__int64)v159;\n                          v119 = *v116;\n                          LOBYTE(v67) = (_BYTE)v157;\n                          v89 = (char *)v156;\n                          v97 = v153;\n                          v49 = v152;\n                          LOWORD(v90) = WORD2(v151);\n                          if ( !v119 )\n                            v119 = 46;\n                          v92[1] = v119;\n                          if ( v117 )\n                          {\n                            v120 = (__int64)&v92[v118 + 1];\n                            v121 = v97;\n                            do\n                              *v121++ = 48;\n                            while ( v121 != (char *)v120 );\n                            v97 += v117;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v153) = v90;\n                          v156 = (void *)v49;\n                          v157 = v92 + 2;\n                          v159 = v89;\n                          LODWORD(v161) = v67;\n                          v147 = nl_langinfo(0x10000);\n                          LOBYTE(v67) = LOBYTE(v161);\n                          v89 = v159;\n                          v148 = *v147;\n                          v97 = v157;\n                          v49 = (unsigned __int64)v156;\n                          LOWORD(v90) = (_WORD)v153;\n                          if ( !v148 )\n                            v148 = 46;\n                          v92[1] = v148;\n                        }\n                        goto LABEL_263;\n                      }\nLABEL_262:\n                      v97 = v92 + 1;\n                      goto LABEL_263;\n                  }\n                  if ( v96 != 65 )\n                    goto LABEL_200;\n                  *v92 = 48;\n                  *(_QWORD *)&v161 = v92 + 2;\n                  v135 = v11[72];\n                  v92[2] = 48;\n                  v92[1] = v135 + 23;\n                  if ( (v67 & 0x10) != 0 || (v136 = (__int64)(v92 + 3), v54) )\n                  {\n                    HIDWORD(v151) = v90;\n                    v152 = v49;\n                    v153 = v89;\n                    v156 = (void *)v54;\n                    LODWORD(v157) = v67;\n                    v159 = v92 + 4;\n                    v143 = nl_langinfo(0x10000);\n                    v144 = v156;\n                    v136 = (__int64)v159;\n                    v145 = *v143;\n                    LOBYTE(v67) = (_BYTE)v157;\n                    v89 = v153;\n                    v49 = v152;\n                    LOWORD(v90) = WORD2(v151);\n                    if ( !v145 )\n                      v145 = 46;\n                    v92[3] = v145;\n                    if ( v144 )\n                    {\n                      v146 = (_BYTE *)v136;\n                      do\n                        *v146++ = 48;\n                      while ( v146 != (_BYTE *)v144 + (_QWORD)v92 + 4 );\n                      v136 += (__int64)v144;\n                    }\n                  }\n                  v137 = v11[72];\n                  v97 = (char *)(v136 + 3);\n                  *(_WORD *)(v136 + 1) = 12331;\n                  v92 = *(char **)&v161;\n                  *(_BYTE *)v136 = v137 + 15;\nLABEL_263:\n                  LOWORD(v165) = v90;\n                  v98 = v97 - v89;\n                  if ( v49 > v97 - v89 )\n                  {\n                    v99 = v49 - v98;\n                    v100 = &v97[v99];\n                    v98 = &v97[v99] - v89;\n                    if ( (v67 & 2) != 0 )\n                    {\n                      if ( v99 )\n                      {\n                        do\n                          *v97++ = 32;\n                        while ( v100 != v97 );\n                      }\n                    }\n                    else if ( (v67 & 0x20) != 0 && v92 )\n                    {\n                      if ( v92 >= v97 )\n                      {\n                        v92 = v97;\n                      }\n                      else\n                      {\n                        v101 = -1LL;\n                        do\n                        {\n                          v100[v101] = v97[v101];\n                          --v101;\n                        }\n                        while ( v101 != v92 - 1 - v97 );\n                      }\n                      if ( v99 )\n                      {\n                        v102 = &v92[v99];\n                        do\n                          *v92++ = 48;\n                        while ( v92 != v102 );\n                      }\n                    }\n                    else\n                    {\n                      v112 = -1LL;\n                      if ( v89 < v97 )\n                      {\n                        do\n                        {\n                          v100[v112] = v97[v112];\n                          --v112;\n                        }\n                        while ( v89 - 1 - v97 != v112 );\n                        v97 = v89;\n                      }\n                      if ( v99 )\n                      {\n                        v113 = &v97[v99];\n                        do\n                          *v97++ = 32;\n                        while ( v97 != v113 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v162 <= v98 )\n                    goto LABEL_200;\n                  v103 = v98 + v18;\n                  v14 = v98 + v18;\n                  if ( v10 - v18 <= v98 )\n                  {\n                    if ( __CFADD__(v98, v18) )\n                    {\n                      if ( v10 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v10 < v103 )\n                    {\n                      if ( v10 )\n                      {\n                        if ( (v10 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v10 *= 2LL;\n                        if ( v10 < v103 )\n                          goto LABEL_373;\n                      }\n                      else\n                      {\n                        if ( v103 <= 0xC )\n                        {\n                          v10 = 12LL;\n                          goto LABEL_280;\n                        }\nLABEL_373:\n                        if ( v103 == -1LL )\n                          goto LABEL_88;\n                        v10 = v98 + v18;\n                      }\nLABEL_280:\n                      if ( !v13 || v13 == src )\n                      {\n                        LOBYTE(v159) = v13 == src;\n                        *(_QWORD *)&v161 = v98;\n                        v162 = v89;\n                        v114 = (char *)malloc(v10);\n                        v89 = (char *)v162;\n                        v98 = *(_QWORD *)&v161;\n                        if ( !v114 )\n                          goto LABEL_88;\n                        if ( v18 && (_BYTE)v159 )\n                        {\n                          v115 = (char *)memcpy(v114, v13, v18);\n                          v89 = (char *)v162;\n                          v98 = *(_QWORD *)&v161;\n                          v13 = v115;\n                        }\n                        else\n                        {\n                          v13 = v114;\n                        }\n                      }\n                      else\n                      {\n                        *(_QWORD *)&v161 = v98;\n                        v162 = v89;\n                        v104 = (char *)realloc(v13, v10);\n                        if ( !v104 )\n                          goto LABEL_88;\n                        v89 = (char *)v162;\n                        v98 = *(_QWORD *)&v161;\n                        v13 = v104;\n                      }\n                    }\n                  }\n                  v162 = v89;\n                  memcpy(&v13[v18], v89, v98);\n                  if ( v162 != v175 )\n                    free(v162);\n                  goto LABEL_110;\n                }\nLABEL_375:\n                v55 = 12LL;\n                goto LABEL_190;\n              }\n            }\n            v55 = 12LL;\n            if ( v29 != 65 )\n              v55 = 18LL;\n            v54 = 0LL;\n            if ( v29 != 65 )\n              v54 = 6LL;\n            goto LABEL_190;\n          }\n        }\n        v30 = *((_DWORD *)v11 + 4);\n        v31 = v160 + 1;\n        *v160 = 37;\n        if ( (v30 & 1) != 0 )\n        {\n          v32 = v160;\n          v160[1] = 39;\n          v31 = (char *)(v32 + 2);\n        }\n        if ( (v30 & 2) != 0 )\n          *v31++ = 45;\n        if ( (v30 & 4) != 0 )\n          *v31++ = 43;\n        if ( (v30 & 8) != 0 )\n          *v31++ = 32;\n        if ( (v30 & 0x10) != 0 )\n          *v31++ = 35;\n        if ( (v30 & 0x40) != 0 )\n          *v31++ = 73;\n        if ( (v30 & 0x20) != 0 )\n          *v31++ = 48;\n        v33 = (_BYTE *)*((_QWORD *)v11 + 3);\n        v34 = (_BYTE *)*((_QWORD *)v11 + 4);\n        if ( v33 != v34 )\n        {\n          v159 = v26;\n          *(_QWORD *)&v161 = v34 - v33;\n          memcpy(v31, v33, v34 - v33);\n          v26 = v159;\n          v31 += *(_QWORD *)&v161;\n        }\n        v35 = (_BYTE *)*((_QWORD *)v11 + 6);\n        v36 = (_BYTE *)*((_QWORD *)v11 + 7);\n        if ( v35 != v36 )\n        {\n          v159 = v26;\n          *(_QWORD *)&v161 = v36 - v35;\n          memcpy(v31, v35, v36 - v35);\n          v26 = v159;\n          v31 += *(_QWORD *)&v161;\n        }\n        if ( (unsigned int)v162 <= 0x10 )\n        {\n          v37 = 1LL << (char)v162;\n          if ( ((1LL << (char)v162) & 0x14180) != 0 )\n            goto LABEL_125;\n          if ( (v37 & 0x1000) != 0 )\n          {\n            *v31++ = 76;\n          }\n          else\n          {\n            if ( (v37 & 0x600) == 0 )\n              goto LABEL_62;\n            *v31++ = 108;\nLABEL_125:\n            *v31++ = 108;\n          }\n        }\nLABEL_62:\n        v38 = v11[72];\n        v31[1] = 0;\n        *v31 = v38;\n        v39 = *((_QWORD *)v11 + 5);\n        if ( v39 != -1 )\n        {\n          v40 = &v26[32 * v39];\n          if ( *(_DWORD *)v40 == 5 )\n          {\n            LODWORD(v159) = 1;\n            v165 = *((_DWORD *)v40 + 4);\n            goto LABEL_65;\n          }\nLABEL_200:\n          abort();\n        }\n        LODWORD(v159) = 0;\nLABEL_65:\n        v41 = *((_QWORD *)v11 + 8);\n        if ( v41 != -1 )\n        {\n          v42 = &v26[32 * v41];\n          if ( *(_DWORD *)v42 != 5 )\n            goto LABEL_200;\n          v43 = (int)v159;\n          *(&v165 + (unsigned int)v159) = *((_DWORD *)v42 + 4);\n          LODWORD(v159) = v43 + 1;\n        }\n        v44 = v18 + 2;\n        if ( v18 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v10 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v10 < v44 )\n        {\n          if ( v10 )\n          {\n            if ( (v10 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v10 *= 2LL;\n            if ( v10 >= v44 )\n              goto LABEL_73;\n          }\n          else if ( v44 <= 0xC )\n          {\n            v10 = 12LL;\nLABEL_73:\n            if ( v13 && v13 != src )\n            {\n              v45 = (char *)realloc(v13, v10);\n              if ( v45 )\n                goto LABEL_76;\nLABEL_88:\n              v56 = v13;\n              *(_QWORD *)&v161 = __errno_location();\nLABEL_89:\n              if ( v56 == src || !v56 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v171 != v174 )\n                    free(v171);\n                  if ( v168 != v169 )\n                    free(v168);\n                  v13 = 0LL;\n                  **(_DWORD **)&v161 = 12;\n                  return v13;\n                }\nLABEL_112:\n                *(_QWORD *)&v161 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v56);\n              goto LABEL_91;\n            }\n            LOBYTE(v161) = v13 == src;\n            v94 = (char *)malloc(v10);\n            v45 = v94;\n            if ( !v94 )\n              goto LABEL_88;\n            if ( v18 && LOBYTE(v161) )\n              v45 = (char *)memcpy(v94, v13, v18);\nLABEL_76:\n            v45[v18] = 0;\n            v157 = v45;\n            v46 = __errno_location();\n            v47 = v157;\n            v157 = v31;\n            *(_QWORD *)&v161 = v46;\n            LODWORD(v153) = *v46;\n            while ( 2 )\n            {\n              v48 = 0x7FFFFFFFLL;\n              v164 = -1;\n              **(_DWORD **)&v161 = 0;\n              if ( v10 - v18 <= 0x7FFFFFFF )\n                v48 = v10 - v18;\n              switch ( (int)v162 )\n              {\n                case 1:\n                  v71 = (unsigned int)*((char *)v168 + 32 * *((_QWORD *)v11 + 10) + 16);\n                  goto LABEL_150;\n                case 2:\n                  v71 = *((unsigned __int8 *)v168 + 32 * *((_QWORD *)v11 + 10) + 16);\n                  goto LABEL_150;\n                case 3:\n                  v71 = (unsigned int)*((__int16 *)v168 + 16 * *((_QWORD *)v11 + 10) + 8);\n                  goto LABEL_150;\n                case 4:\n                  v71 = *((unsigned __int16 *)v168 + 16 * *((_QWORD *)v11 + 10) + 8);\n                  goto LABEL_150;\n                case 5:\n                case 6:\n                case 13:\n                case 14:\n                  v71 = *((unsigned int *)v168 + 8 * *((_QWORD *)v11 + 10) + 4);\nLABEL_150:\n                  v70 = &v47[v18];\n                  v156 = v47;\n                  if ( (_DWORD)v159 != 1 )\n                  {\n                    if ( (_DWORD)v159 != 2 )\n                    {\n                      v149 = &v164;\n                      goto LABEL_153;\n                    }\n                    goto LABEL_209;\n                  }\n                  v150 = &v164;\n                  v149 = (int *)v71;\n                  break;\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                case 15:\n                case 16:\n                case 17:\n                  v70 = &v47[v18];\n                  v71 = *((_QWORD *)v168 + 4 * *((_QWORD *)v11 + 10) + 2);\n                  v156 = v47;\n                  if ( (_DWORD)v159 != 1 )\n                  {\n                    if ( (_DWORD)v159 != 2 )\n                    {\n                      v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                              v70,\n                              v48,\n                              1LL,\n                              -1LL,\n                              v160,\n                              v71,\n                              &v164,\n                              v150);\nLABEL_131:\n                      v47 = (char *)v156;\n                      goto LABEL_132;\n                    }\nLABEL_209:\n                    v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                            v70,\n                            v48,\n                            1LL,\n                            -1LL,\n                            v160,\n                            v165,\n                            v166,\n                            v71,\n                            &v164);\nLABEL_210:\n                    v47 = (char *)v156;\nLABEL_132:\n                    v73 = v164;\n                    if ( v164 < 0 )\n                    {\nLABEL_154:\n                      if ( v157[1] )\n                      {\n                        v157[1] = 0;\n                        continue;\n                      }\n                      if ( v72 < 0 )\n                      {\n                        v79 = **(_DWORD **)&v161;\n                        if ( !**(_DWORD **)&v161 )\n                        {\n                          v79 = 84;\n                          if ( (v11[72] & 0xEF) != 99 )\n                            v79 = 22;\n                        }\n                        if ( v47 != src && v47 )\n                          free(v47);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v171 != v174 )\n                          free(v171);\n                        if ( v168 != v169 )\n                          free(v168);\n                        **(_DWORD **)&v161 = v79;\n                        return 0LL;\n                      }\nLABEL_136:\n                      v164 = v72;\n                      v73 = v72;\nLABEL_137:\n                      if ( (unsigned int)(v73 + 1) < v48 )\n                      {\n                        v13 = v47;\n                        v14 = v18 + v73;\n                        **(_DWORD **)&v161 = (_DWORD)v153;\n                        goto LABEL_110;\n                      }\n                      if ( v10 - v18 > 0x7FFFFFFE )\n                      {\n                        if ( v47 != src && v47 )\n                          free(v47);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v171 != v174 )\n                          free(v171);\n                        if ( v168 != v169 )\n                          free(v168);\n                        v13 = 0LL;\n                        **(_DWORD **)&v161 = 75;\n                        return v13;\n                      }\n                      v74 = (unsigned int)(v73 + 2);\n                      v75 = __CFADD__(v18, v74);\n                      v76 = v18 + v74;\n                      if ( (v10 & 0x8000000000000000LL) != 0LL )\n                      {\n                        if ( v10 != -1LL )\n                          goto LABEL_202;\n                      }\n                      else\n                      {\n                        if ( v75 )\n                          goto LABEL_202;\n                        if ( 2 * v10 >= v76 )\n                          v76 = 2 * v10;\n                        if ( v10 < v76 )\n                        {\n                          v10 *= 2LL;\n                          if ( v10 < v76 )\n                          {\n                            if ( v76 == -1LL )\n                            {\nLABEL_202:\n                              v56 = v47;\n                              goto LABEL_89;\n                            }\n                            v10 = v76;\n                          }\n                          v77 = v47 == src;\n                          if ( !v47 || v47 == src )\n                          {\n                            v156 = v47;\n                            v93 = (char *)malloc(v10);\n                            v47 = (char *)v156;\n                            if ( !v93 )\n                              goto LABEL_202;\n                            if ( v18 && v77 )\n                              v47 = (char *)memcpy(v93, v156, v18);\n                            else\n                              v47 = v93;\n                          }\n                          else\n                          {\n                            v156 = v47;\n                            v78 = (char *)realloc(v47, v10);\n                            v47 = (char *)v156;\n                            if ( !v78 )\n                              goto LABEL_202;\n                            v47 = v78;\n                          }\n                        }\n                      }\n                      continue;\n                    }\nLABEL_133:\n                    if ( v73 < v48 && v47[v73 + v18] )\n                      goto LABEL_200;\n                    if ( v73 >= v72 )\n                      goto LABEL_137;\n                    goto LABEL_136;\n                  }\n                  v150 = &v164;\n                  v149 = (int *)v71;\n                  break;\n                case 11:\n                  v83 = *((_QWORD *)v11 + 10);\n                  v84 = &v47[v18];\n                  v156 = v47;\n                  v85 = *((double *)v168 + 4 * v83 + 2);\n                  if ( (_DWORD)v159 == 1 )\n                  {\n                    v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                            v84,\n                            v48,\n                            1LL,\n                            -1LL,\n                            v160,\n                            v165,\n                            v85,\n                            &v164,\n                            v150);\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v159 != 2 )\n                    {\n                      v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                              v84,\n                              v48,\n                              1LL,\n                              -1LL,\n                              v160,\n                              &v164,\n                              v85);\n                      v47 = (char *)v156;\n                      goto LABEL_132;\n                    }\n                    v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                            v84,\n                            v48,\n                            1LL,\n                            -1LL,\n                            v160,\n                            v165,\n                            v85,\n                            v166,\n                            &v164);\n                  }\n                  v47 = (char *)v156;\n                  goto LABEL_132;\n                case 12:\n                  v80 = *((_QWORD *)v11 + 10);\n                  v81 = &v47[v18];\n                  v156 = v47;\n                  v82 = *((long double *)v168 + 2 * v80 + 1);\n                  if ( (_DWORD)v159 == 1 )\n                  {\n                    v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                            v81,\n                            v48,\n                            1LL,\n                            -1LL,\n                            v160,\n                            v165,\n                            *(_OWORD *)&v82,\n                            &v164);\n                    goto LABEL_210;\n                  }\n                  if ( (_DWORD)v159 != 2 )\n                  {\n                    v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                            v81,\n                            v48,\n                            1LL,\n                            -1LL,\n                            v160,\n                            &v164,\n                            *(_OWORD *)&v82);\n                    goto LABEL_131;\n                  }\n                  v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                          v81,\n                          v48,\n                          1LL,\n                          -1LL,\n                          v160,\n                          v165,\n                          v166);\n                  v47 = (char *)v156;\n                  goto LABEL_132;\n                default:\n                  goto LABEL_408;\n              }\n              break;\n            }\n            v71 = v165;\nLABEL_153:\n            v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                    v70,\n                    v48,\n                    1LL,\n                    -1LL,\n                    v160,\n                    v71,\n                    v149,\n                    v150);\n            v73 = v164;\n            v47 = (char *)v156;\n            if ( v164 < 0 )\n              goto LABEL_154;\n            goto LABEL_133;\n          }\n          if ( v18 != -3LL )\n          {\n            v10 = v18 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v45 = v13;\n        goto LABEL_76;\n      }\n      switch ( v28 )\n      {\n        case 18:\n          v14 = v18;\n          **((_BYTE **)v27 + 2) = v18;\n          break;\n        case 19:\n          v14 = v18;\n          **((_WORD **)v27 + 2) = v18;\n          break;\n        case 20:\n          v14 = v18;\n          **((_DWORD **)v27 + 2) = v18;\n          break;\n        case 21:\n        case 22:\n          v14 = v18;\n          **((_QWORD **)v27 + 2) = v18;\n          break;\n        default:\nLABEL_408:\n          abort();\n      }\nLABEL_110:\n      v12 = (_BYTE *)*((_QWORD *)v11 + 1);\n      v11 += 88;\n      v15 = *(_BYTE **)v11;\n      ++v158;\n      if ( v15 != v12 )\n        goto LABEL_14;\nLABEL_111:\n      v18 = v14;\n    }\n    v107 = v18;\n    v108 = v18 + 1;\n    if ( v18 == -1LL )\n    {\n      if ( v10 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v10 < v108 )\n    {\n      if ( v10 )\n      {\n        if ( (v10 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v10 *= 2LL;\n        if ( v10 >= v108 )\n        {\nLABEL_303:\n          v109 = v13 == src;\n          if ( !v13 || v13 == src )\n          {\n            v142 = (char *)malloc(v10);\n            if ( !v142 )\n              goto LABEL_88;\n            if ( v107 && v109 )\n              v13 = (char *)memcpy(v142, v13, v107);\n            else\n              v13 = v142;\n          }\n          else\n          {\n            v110 = (char *)realloc(v13, v10);\n            if ( !v110 )\n              goto LABEL_126;\n            v13 = v110;\n          }\n          goto LABEL_307;\n        }\n      }\n      else if ( v108 <= 0xC )\n      {\n        v10 = 12LL;\n        goto LABEL_303;\n      }\n      if ( v18 == -2LL )\n        goto LABEL_88;\n      v10 = v18 + 1;\n      goto LABEL_303;\n    }\nLABEL_307:\n    v13[v107] = 0;\n    if ( v10 > v108 && v13 != src )\n    {\n      v111 = (char *)realloc(v13, v108);\n      if ( v111 )\n        v13 = v111;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v171 != v174 )\n      free(v171);\n    if ( v168 != v169 )\n      free(v168);\n    *v155 = v107;\n    return v13;\n  }\n  if ( v171 != v174 )\n    free(v171);\n  if ( v168 != v169 )\n    free(v168);\n  v13 = 0LL;\n  *__errno_location() = 22;\n  return v13;\n}\n"
        },
        {
            "funcName": "sub_40AFC0",
            "funcStartAddr": "0x401fbe",
            "funcEndAddr": "0x401fc3",
            "decompiledFuncCode": "char *__fastcall sub_40AFC0(void *a1, size_t *a2, _BYTE *a3, __int64 a4)\n{\n  __int64 v6; // rax\n  unsigned __int64 v7; // rax\n  size_t v8; // rdi\n  char *v9; // rax\n  size_t v10; // r12\n  char *v11; // r14\n  _BYTE *v12; // r8\n  char *v13; // rbx\n  size_t v14; // r15\n  _BYTE *v15; // rcx\n  void *v16; // rcx\n  unsigned __int64 v17; // rax\n  size_t v18; // r13\n  bool v19; // dl\n  char *v20; // rax\n  char *v21; // rax\n  void *v22; // rsp\n  char *v23; // rax\n  char v24; // r15\n  __int64 v25; // rax\n  char *v26; // r8\n  long double *v27; // rdx\n  int v28; // eax\n  char v29; // al\n  int v30; // eax\n  char *v31; // r15\n  const char *v32; // rdi\n  _BYTE *v33; // rsi\n  _BYTE *v34; // rdx\n  _BYTE *v35; // rsi\n  _BYTE *v36; // rdx\n  __int64 v37; // rax\n  char v38; // al\n  __int64 v39; // rax\n  char *v40; // rax\n  __int64 v41; // rax\n  char *v42; // r8\n  int v43; // eax\n  unsigned __int64 v44; // rax\n  char *v45; // r11\n  int *v46; // rax\n  char *v47; // r11\n  unsigned __int64 v48; // rbx\n  unsigned __int64 v49; // r10\n  char *v50; // rdx\n  char *v51; // rcx\n  __int64 v52; // rsi\n  _DWORD *v53; // r8\n  unsigned __int64 v54; // rdx\n  unsigned __int64 v55; // rcx\n  void *v56; // r15\n  unsigned __int64 v58; // rax\n  char *v59; // rax\n  char v61; // fps^1\n  char *v65; // rdx\n  char *v66; // rdi\n  int v67; // r11d\n  __int64 v68; // rcx\n  _DWORD *v69; // rcx\n  char *v70; // rdi\n  unsigned __int64 v71; // r9\n  int v72; // eax\n  int v73; // edx\n  __int64 v74; // rax\n  bool v75; // cf\n  unsigned __int64 v76; // rax\n  bool v77; // bl\n  char *v78; // rax\n  int v79; // ebx\n  __int64 v80; // rax\n  char *v81; // rdi\n  long double v82; // fst7\n  __int64 v83; // rax\n  char *v84; // rdi\n  double v85; // xmm0_8\n  unsigned __int64 v86; // rax\n  void *v87; // rax\n  char *v88; // rax\n  char *v89; // rcx\n  int v90; // r8d\n  __int16 v91; // ax\n  char *v92; // r15\n  char *v93; // rax\n  char *v94; // rax\n  char *v95; // rax\n  char v96; // al\n  char *v97; // r9\n  size_t v98; // r8\n  unsigned __int64 v99; // r10\n  char *v100; // rdi\n  __int64 v101; // rax\n  char *v102; // r10\n  unsigned __int64 v103; // rax\n  char *v104; // rax\n  char *v105; // rsi\n  char v106; // al\n  size_t v107; // r15\n  size_t v108; // r14\n  bool v109; // r13\n  char *v110; // rax\n  char *v111; // rax\n  __int64 v112; // rax\n  char *v113; // r10\n  char *v114; // rax\n  char *v115; // rax\n  char *v116; // rax\n  __int64 v117; // rsi\n  __int64 v118; // rdx\n  char v119; // al\n  __int64 v120; // rdx\n  char *v121; // rax\n  char *v122; // rax\n  __int64 v123; // rdx\n  char v124; // al\n  char *v125; // rax\n  char *v126; // rsi\n  __int64 v127; // r9\n  __int64 v128; // rdx\n  char *v129; // rax\n  char *v130; // rsi\n  char *v131; // rdi\n  __int64 v132; // rax\n  __int64 v133; // rsi\n  unsigned __int64 v134; // rax\n  char v135; // al\n  __int64 v136; // rsi\n  char v137; // al\n  char *v138; // rax\n  __int64 v139; // rdx\n  char v140; // al\n  char *v141; // rax\n  char *v142; // rax\n  char *v143; // rax\n  void *v144; // rdx\n  char v145; // al\n  _BYTE *v146; // rax\n  char *v147; // rax\n  char v148; // al\n  int *v149; // [rsp+10h] [rbp-700h]\n  int *v150; // [rsp+18h] [rbp-6F8h]\n  __int64 v151; // [rsp+20h] [rbp-6F0h] BYREF\n  unsigned __int64 v152; // [rsp+28h] [rbp-6E8h]\n  char *v153; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v155; // [rsp+40h] [rbp-6D0h]\n  void *v156; // [rsp+48h] [rbp-6C8h]\n  char *v157; // [rsp+50h] [rbp-6C0h]\n  __int64 v158; // [rsp+58h] [rbp-6B8h]\n  _BYTE *v159; // [rsp+60h] [rbp-6B0h]\n  char *v160; // [rsp+68h] [rbp-6A8h]\n  long double v161; // [rsp+70h] [rbp-6A0h]\n  void *v162; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v164; // [rsp+94h] [rbp-67Ch] BYREF\n  unsigned int v165; // [rsp+98h] [rbp-678h]\n  unsigned int v166; // [rsp+9Ch] [rbp-674h]\n  char v167[8]; // [rsp+A0h] [rbp-670h] BYREF\n  void *v168; // [rsp+A8h] [rbp-668h]\n  _BYTE v169[224]; // [rsp+B0h] [rbp-660h] BYREF\n  __int64 v170; // [rsp+190h] [rbp-580h] BYREF\n  void *v171; // [rsp+198h] [rbp-578h]\n  __int64 v172; // [rsp+1A0h] [rbp-570h]\n  __int64 v173; // [rsp+1A8h] [rbp-568h]\n  _BYTE v174[624]; // [rsp+1B0h] [rbp-560h] BYREF\n  char v175[752]; // [rsp+420h] [rbp-2F0h] BYREF\n\n  src = a1;\n  v155 = a2;\n  if ( (int)sub_40CD00(a3, &v170, v167) < 0 )\n    return 0LL;\n  if ( (int)sub_40CAE0(a4, v167) >= 0 )\n  {\n    v6 = v172 + 7;\n    if ( (unsigned __int64)(v172 + 7) <= 6 )\n      v6 = -1LL;\n    v75 = __CFADD__(v173, v6);\n    v7 = v173 + v6;\n    if ( v75 )\n      goto LABEL_112;\n    v8 = v7 + 6;\n    if ( v7 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v8 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v22 = alloca(v7 + 14);\n      v160 = (char *)&v151;\n    }\n    else\n    {\n      if ( v7 == -7LL )\n        goto LABEL_112;\n      v9 = (char *)malloc(v8);\n      v160 = v9;\n      if ( !v9 )\n        goto LABEL_112;\n      ptr = v9;\n    }\n    v10 = 0LL;\n    if ( src )\n      v10 = *v155;\n    v11 = (char *)v171;\n    v12 = a3;\n    v13 = (char *)src;\n    v158 = 0LL;\n    v14 = 0LL;\n    v15 = *(_BYTE **)v171;\n    if ( *(_BYTE **)v171 == v12 )\n      goto LABEL_111;\nLABEL_14:\n    v16 = (void *)(v15 - v12);\n    v17 = (unsigned __int64)v16 + v14;\n    v18 = (size_t)v16 + v14;\n    if ( __CFADD__(v16, v14) )\n    {\n      if ( v10 != -1LL )\n        goto LABEL_88;\n      v18 = -1LL;\n    }\n    else if ( v10 < v17 )\n    {\n      if ( v10 )\n      {\n        if ( (v10 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v10 *= 2LL;\n        if ( v10 >= v17 )\n        {\nLABEL_28:\n          v19 = v13 == src;\n          if ( !v13 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v17 <= 0xC )\n      {\n        v10 = 12LL;\n        v19 = v13 == src;\n        if ( !v13 )\n        {\nLABEL_19:\n          v159 = v12;\n          LOBYTE(v161) = v19;\n          v162 = v16;\n          v20 = (char *)malloc(v10);\n          v16 = v162;\n          v12 = v159;\n          if ( !v20 )\n            goto LABEL_88;\n          if ( v14 && LOBYTE(v161) )\n          {\n            *(_QWORD *)&v161 = v159;\n            v21 = (char *)memcpy(v20, v13, v14);\n            v16 = v162;\n            v12 = *(_BYTE **)&v161;\n            v13 = v21;\n          }\n          else\n          {\n            v13 = v20;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v19 )\n        {\n          *(_QWORD *)&v161 = v12;\n          v162 = v16;\n          v23 = (char *)realloc(v13, v10);\n          if ( !v23 )\n            goto LABEL_126;\n          v16 = v162;\n          v12 = *(_BYTE **)&v161;\n          v13 = v23;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v17 == -1LL )\n        goto LABEL_88;\n      v10 = (size_t)v16 + v14;\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v13[v14], v12, (size_t)v16);\n    while ( v170 != v158 )\n    {\n      v24 = v11[72];\n      v25 = *((_QWORD *)v11 + 10);\n      if ( v24 == 37 )\n      {\n        if ( v25 != -1 )\n          goto LABEL_200;\n        v58 = v18 + 1;\n        v14 = v18 + 1;\n        if ( v18 == -1LL )\n        {\n          if ( v10 != -1LL )\n            goto LABEL_88;\n          v14 = -1LL;\n        }\n        else if ( v10 < v58 )\n        {\n          if ( v10 )\n          {\n            if ( (v10 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v10 *= 2LL;\n            if ( v10 < v58 )\n              goto LABEL_238;\n          }\n          else\n          {\n            if ( v58 <= 0xC )\n            {\n              v10 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_238:\n            if ( v18 == -2LL )\n              goto LABEL_88;\n            v10 = v18 + 1;\n          }\nLABEL_105:\n          if ( v13 && v13 != src )\n          {\n            v59 = (char *)realloc(v13, v10);\n            if ( v59 )\n            {\n              v13 = v59;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v56 = v13;\n            *(_QWORD *)&v161 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v162) = v13 == src;\n          v95 = (char *)malloc(v10);\n          if ( !v95 )\n            goto LABEL_88;\n          if ( v18 && (_BYTE)v162 )\n            v13 = (char *)memcpy(v95, v13, v18);\n          else\n            v13 = v95;\n        }\nLABEL_109:\n        v13[v18] = 37;\n        goto LABEL_110;\n      }\n      if ( v25 == -1 )\n        goto LABEL_200;\n      v26 = (char *)v168;\n      v27 = (long double *)((char *)v168 + 32 * v25);\n      v28 = *(_DWORD *)v27;\n      LODWORD(v162) = *(_DWORD *)v27;\n      if ( v24 != 110 )\n      {\n        v29 = v24 & 0xDF;\n        if ( ((unsigned __int8)((v24 & 0xDF) - 69) <= 2u || v29 == 65) && (_DWORD)v162 == 12 )\n        {\n          _FST7 = v27[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v65 = (char *)*((_QWORD *)v11 + 3);\n            v66 = (char *)*((_QWORD *)v11 + 4);\n            v67 = *((_DWORD *)v11 + 4);\n            if ( v65 == v66 )\n            {\n              v49 = 0LL;\n            }\n            else\n            {\n              v68 = *((_QWORD *)v11 + 5);\n              if ( v68 == -1 )\n              {\n                v49 = 0LL;\n                v162 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v126 = v65 + 1;\n                  v127 = -1LL;\n                  v128 = *v65 - 48;\n                  if ( v49 <= 0x1999999999999999LL )\n                    v127 = 10 * v49;\n                  v75 = __CFADD__(v127, v128);\n                  v49 = v127 + v128;\n                  v65 = v126;\n                  if ( v75 )\n                  {\n                    if ( v66 == v126 )\n                    {\nLABEL_81:\n                      v49 = (unsigned __int64)v162;\n                      goto LABEL_82;\n                    }\n                    while ( *v65++ != 48 )\n                    {\n                      if ( v66 == v65 )\n                        goto LABEL_81;\n                    }\n                    v49 = -1LL;\n                  }\n                  if ( v66 == v65 )\n                    goto LABEL_82;\n                }\n              }\n              v69 = (char *)v168 + 32 * v68;\n              if ( *v69 != 5 )\n                goto LABEL_200;\n              v49 = (int)v69[4];\n              if ( (v49 & 0x80000000) != 0LL )\n              {\n                v67 |= 2u;\n                v49 = -(__int64)v49;\n              }\n            }\nLABEL_82:\n            v50 = (char *)*((_QWORD *)v11 + 6);\n            v51 = (char *)*((_QWORD *)v11 + 7);\n            if ( v50 != v51 )\n            {\n              v52 = *((_QWORD *)v11 + 8);\n              if ( v52 == -1 )\n              {\n                v129 = v50 + 1;\n                v54 = 0LL;\n                if ( v51 != v129 )\n                {\n                  v130 = v129;\n                  while ( 1 )\n                  {\n                    v131 = v130 + 1;\n                    v132 = *v130 - 48;\n                    v133 = -1LL;\n                    if ( v54 <= 0x1999999999999999LL )\n                      v133 = 10 * v54;\n                    v75 = __CFADD__(v133, v132);\n                    v134 = v133 + v132;\n                    v130 = v131;\n                    v54 = v134;\n                    if ( v75 )\n                    {\n                      if ( v51 == v131 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v130 = v131 + 1;\n                        if ( *v131 == 48 )\n                          break;\n                        if ( v51 == v130 )\n                          goto LABEL_88;\n                        ++v131;\n                      }\n                      v54 = -1LL;\n                    }\n                    if ( v51 == v130 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_375;\n              }\n              v53 = (char *)v168 + 32 * v52;\n              if ( *v53 != 5 )\n                goto LABEL_200;\n              v54 = (int)v53[4];\n              if ( (v54 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v54 )\n                {\n                  v55 = v54 + 12;\n                  if ( v54 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_190:\n                  v86 = v55;\n                  if ( v49 >= v55 )\n                    v86 = v49;\n                  v75 = __CFADD__(v86, 1LL);\n                  v87 = (void *)(v86 + 1);\n                  v162 = v87;\n                  if ( v75 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v87 <= 0x2BC )\n                  {\n                    v89 = v175;\n                  }\n                  else\n                  {\n                    v156 = (void *)v49;\n                    v157 = (char *)v54;\n                    LODWORD(v159) = v67;\n                    v161 = _FST7;\n                    if ( v87 == (void *)-1LL )\n                      goto LABEL_88;\n                    v88 = (char *)malloc((size_t)v87);\n                    v67 = (int)v159;\n                    _FST7 = v161;\n                    v89 = v88;\n                    v54 = (unsigned __int64)v157;\n                    v49 = (unsigned __int64)v156;\n                    if ( !v88 )\n                      goto LABEL_88;\n                  }\n                  v90 = (unsigned __int16)v165;\n                  LOBYTE(v91) = v165;\n                  HIBYTE(v91) = BYTE1(v165) | 3;\n                  LOWORD(v165) = v91;\n                  __asm { fxam }\n                  if ( (v61 & 2) != 0 )\n                  {\n                    *v89 = 45;\n                    _FST7 = -_FST7;\n                    v92 = v89 + 1;\n                  }\n                  else if ( (v67 & 4) != 0 )\n                  {\n                    v92 = v89 + 1;\n                    *v89 = 43;\n                  }\n                  else\n                  {\n                    v92 = v89;\n                    if ( (v67 & 8) != 0 )\n                    {\n                      v92 = v89 + 1;\n                      *v89 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_200;\n                    v97 = v92 + 3;\n                    if ( (unsigned __int8)(v11[72] - 65) > 0x19u )\n                    {\n                      v92[2] = 102;\n                      *(_WORD *)v92 = 28265;\n                    }\n                    else\n                    {\n                      v92[2] = 70;\n                      *(_WORD *)v92 = 20041;\n                    }\n                    v92 = 0LL;\n                    goto LABEL_263;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_200;\n                  v96 = v11[72] & 0xDF;\n                  switch ( v96 )\n                  {\n                    case 'F':\n                      *v92 = 48;\n                      if ( (v67 & 0x10) != 0 || v54 )\n                      {\n                        LODWORD(v152) = v90;\n                        v153 = (char *)v49;\n                        v156 = v89;\n                        v157 = (char *)v54;\n                        LODWORD(v159) = v67;\n                        *(_QWORD *)&v161 = v92 + 2;\n                        v122 = nl_langinfo(0x10000);\n                        v123 = (__int64)v157;\n                        v97 = *(char **)&v161;\n                        v124 = *v122;\n                        LOBYTE(v67) = (_BYTE)v159;\n                        v89 = (char *)v156;\n                        v49 = (unsigned __int64)v153;\n                        LOWORD(v90) = v152;\n                        if ( !v124 )\n                          v124 = 46;\n                        v92[1] = v124;\n                        if ( v123 )\n                        {\n                          v125 = v97;\n                          do\n                            *v125++ = 48;\n                          while ( v125 != &v92[v123 + 2] );\n                          v97 += v123;\n                        }\n                        goto LABEL_263;\n                      }\n                      goto LABEL_262;\n                    case 'E':\n                      *v92 = 48;\n                      if ( (v67 & 0x10) != 0 || (v105 = v92 + 1, v54) )\n                      {\n                        LODWORD(v152) = v90;\n                        v153 = (char *)v49;\n                        v156 = v89;\n                        v157 = (char *)v54;\n                        LODWORD(v159) = v67;\n                        *(_QWORD *)&v161 = v92 + 2;\n                        v138 = nl_langinfo(0x10000);\n                        v139 = (__int64)v157;\n                        v105 = *(char **)&v161;\n                        v140 = *v138;\n                        LOBYTE(v67) = (_BYTE)v159;\n                        v89 = (char *)v156;\n                        v49 = (unsigned __int64)v153;\n                        LOWORD(v90) = v152;\n                        if ( !v140 )\n                          v140 = 46;\n                        v92[1] = v140;\n                        if ( v139 )\n                        {\n                          v141 = v105;\n                          do\n                            *v141++ = 48;\n                          while ( v141 != &v92[v139 + 2] );\n                          v105 += v139;\n                        }\n                      }\n                      v106 = v11[72];\n                      v97 = v105 + 4;\n                      v105[3] = 48;\n                      *v105 = v106;\n                      *(_WORD *)(v105 + 1) = 12331;\n                      goto LABEL_263;\n                    case 'G':\n                      *v92 = 48;\n                      if ( (v67 & 0x10) != 0 )\n                      {\n                        if ( v54 )\n                        {\n                          HIDWORD(v151) = v90;\n                          v152 = v49;\n                          v153 = v92 + 2;\n                          v156 = v89;\n                          LODWORD(v157) = v67;\n                          v159 = (_BYTE *)v54;\n                          *(_QWORD *)&v161 = v54 - 1;\n                          v116 = nl_langinfo(0x10000);\n                          v117 = *(_QWORD *)&v161;\n                          v118 = (__int64)v159;\n                          v119 = *v116;\n                          LOBYTE(v67) = (_BYTE)v157;\n                          v89 = (char *)v156;\n                          v97 = v153;\n                          v49 = v152;\n                          LOWORD(v90) = WORD2(v151);\n                          if ( !v119 )\n                            v119 = 46;\n                          v92[1] = v119;\n                          if ( v117 )\n                          {\n                            v120 = (__int64)&v92[v118 + 1];\n                            v121 = v97;\n                            do\n                              *v121++ = 48;\n                            while ( v121 != (char *)v120 );\n                            v97 += v117;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v153) = v90;\n                          v156 = (void *)v49;\n                          v157 = v92 + 2;\n                          v159 = v89;\n                          LODWORD(v161) = v67;\n                          v147 = nl_langinfo(0x10000);\n                          LOBYTE(v67) = LOBYTE(v161);\n                          v89 = v159;\n                          v148 = *v147;\n                          v97 = v157;\n                          v49 = (unsigned __int64)v156;\n                          LOWORD(v90) = (_WORD)v153;\n                          if ( !v148 )\n                            v148 = 46;\n                          v92[1] = v148;\n                        }\n                        goto LABEL_263;\n                      }\nLABEL_262:\n                      v97 = v92 + 1;\n                      goto LABEL_263;\n                  }\n                  if ( v96 != 65 )\n                    goto LABEL_200;\n                  *v92 = 48;\n                  *(_QWORD *)&v161 = v92 + 2;\n                  v135 = v11[72];\n                  v92[2] = 48;\n                  v92[1] = v135 + 23;\n                  if ( (v67 & 0x10) != 0 || (v136 = (__int64)(v92 + 3), v54) )\n                  {\n                    HIDWORD(v151) = v90;\n                    v152 = v49;\n                    v153 = v89;\n                    v156 = (void *)v54;\n                    LODWORD(v157) = v67;\n                    v159 = v92 + 4;\n                    v143 = nl_langinfo(0x10000);\n                    v144 = v156;\n                    v136 = (__int64)v159;\n                    v145 = *v143;\n                    LOBYTE(v67) = (_BYTE)v157;\n                    v89 = v153;\n                    v49 = v152;\n                    LOWORD(v90) = WORD2(v151);\n                    if ( !v145 )\n                      v145 = 46;\n                    v92[3] = v145;\n                    if ( v144 )\n                    {\n                      v146 = (_BYTE *)v136;\n                      do\n                        *v146++ = 48;\n                      while ( v146 != (_BYTE *)v144 + (_QWORD)v92 + 4 );\n                      v136 += (__int64)v144;\n                    }\n                  }\n                  v137 = v11[72];\n                  v97 = (char *)(v136 + 3);\n                  *(_WORD *)(v136 + 1) = 12331;\n                  v92 = *(char **)&v161;\n                  *(_BYTE *)v136 = v137 + 15;\nLABEL_263:\n                  LOWORD(v165) = v90;\n                  v98 = v97 - v89;\n                  if ( v49 > v97 - v89 )\n                  {\n                    v99 = v49 - v98;\n                    v100 = &v97[v99];\n                    v98 = &v97[v99] - v89;\n                    if ( (v67 & 2) != 0 )\n                    {\n                      if ( v99 )\n                      {\n                        do\n                          *v97++ = 32;\n                        while ( v100 != v97 );\n                      }\n                    }\n                    else if ( (v67 & 0x20) != 0 && v92 )\n                    {\n                      if ( v92 >= v97 )\n                      {\n                        v92 = v97;\n                      }\n                      else\n                      {\n                        v101 = -1LL;\n                        do\n                        {\n                          v100[v101] = v97[v101];\n                          --v101;\n                        }\n                        while ( v101 != v92 - 1 - v97 );\n                      }\n                      if ( v99 )\n                      {\n                        v102 = &v92[v99];\n                        do\n                          *v92++ = 48;\n                        while ( v92 != v102 );\n                      }\n                    }\n                    else\n                    {\n                      v112 = -1LL;\n                      if ( v89 < v97 )\n                      {\n                        do\n                        {\n                          v100[v112] = v97[v112];\n                          --v112;\n                        }\n                        while ( v89 - 1 - v97 != v112 );\n                        v97 = v89;\n                      }\n                      if ( v99 )\n                      {\n                        v113 = &v97[v99];\n                        do\n                          *v97++ = 32;\n                        while ( v97 != v113 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v162 <= v98 )\n                    goto LABEL_200;\n                  v103 = v98 + v18;\n                  v14 = v98 + v18;\n                  if ( v10 - v18 <= v98 )\n                  {\n                    if ( __CFADD__(v98, v18) )\n                    {\n                      if ( v10 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v10 < v103 )\n                    {\n                      if ( v10 )\n                      {\n                        if ( (v10 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v10 *= 2LL;\n                        if ( v10 < v103 )\n                          goto LABEL_373;\n                      }\n                      else\n                      {\n                        if ( v103 <= 0xC )\n                        {\n                          v10 = 12LL;\n                          goto LABEL_280;\n                        }\nLABEL_373:\n                        if ( v103 == -1LL )\n                          goto LABEL_88;\n                        v10 = v98 + v18;\n                      }\nLABEL_280:\n                      if ( !v13 || v13 == src )\n                      {\n                        LOBYTE(v159) = v13 == src;\n                        *(_QWORD *)&v161 = v98;\n                        v162 = v89;\n                        v114 = (char *)malloc(v10);\n                        v89 = (char *)v162;\n                        v98 = *(_QWORD *)&v161;\n                        if ( !v114 )\n                          goto LABEL_88;\n                        if ( v18 && (_BYTE)v159 )\n                        {\n                          v115 = (char *)memcpy(v114, v13, v18);\n                          v89 = (char *)v162;\n                          v98 = *(_QWORD *)&v161;\n                          v13 = v115;\n                        }\n                        else\n                        {\n                          v13 = v114;\n                        }\n                      }\n                      else\n                      {\n                        *(_QWORD *)&v161 = v98;\n                        v162 = v89;\n                        v104 = (char *)realloc(v13, v10);\n                        if ( !v104 )\n                          goto LABEL_88;\n                        v89 = (char *)v162;\n                        v98 = *(_QWORD *)&v161;\n                        v13 = v104;\n                      }\n                    }\n                  }\n                  v162 = v89;\n                  memcpy(&v13[v18], v89, v98);\n                  if ( v162 != v175 )\n                    free(v162);\n                  goto LABEL_110;\n                }\nLABEL_375:\n                v55 = 12LL;\n                goto LABEL_190;\n              }\n            }\n            v55 = 12LL;\n            if ( v29 != 65 )\n              v55 = 18LL;\n            v54 = 0LL;\n            if ( v29 != 65 )\n              v54 = 6LL;\n            goto LABEL_190;\n          }\n        }\n        v30 = *((_DWORD *)v11 + 4);\n        v31 = v160 + 1;\n        *v160 = 37;\n        if ( (v30 & 1) != 0 )\n        {\n          v32 = v160;\n          v160[1] = 39;\n          v31 = (char *)(v32 + 2);\n        }\n        if ( (v30 & 2) != 0 )\n          *v31++ = 45;\n        if ( (v30 & 4) != 0 )\n          *v31++ = 43;\n        if ( (v30 & 8) != 0 )\n          *v31++ = 32;\n        if ( (v30 & 0x10) != 0 )\n          *v31++ = 35;\n        if ( (v30 & 0x40) != 0 )\n          *v31++ = 73;\n        if ( (v30 & 0x20) != 0 )\n          *v31++ = 48;\n        v33 = (_BYTE *)*((_QWORD *)v11 + 3);\n        v34 = (_BYTE *)*((_QWORD *)v11 + 4);\n        if ( v33 != v34 )\n        {\n          v159 = v26;\n          *(_QWORD *)&v161 = v34 - v33;\n          memcpy(v31, v33, v34 - v33);\n          v26 = v159;\n          v31 += *(_QWORD *)&v161;\n        }\n        v35 = (_BYTE *)*((_QWORD *)v11 + 6);\n        v36 = (_BYTE *)*((_QWORD *)v11 + 7);\n        if ( v35 != v36 )\n        {\n          v159 = v26;\n          *(_QWORD *)&v161 = v36 - v35;\n          memcpy(v31, v35, v36 - v35);\n          v26 = v159;\n          v31 += *(_QWORD *)&v161;\n        }\n        if ( (unsigned int)v162 <= 0x10 )\n        {\n          v37 = 1LL << (char)v162;\n          if ( ((1LL << (char)v162) & 0x14180) != 0 )\n            goto LABEL_125;\n          if ( (v37 & 0x1000) != 0 )\n          {\n            *v31++ = 76;\n          }\n          else\n          {\n            if ( (v37 & 0x600) == 0 )\n              goto LABEL_62;\n            *v31++ = 108;\nLABEL_125:\n            *v31++ = 108;\n          }\n        }\nLABEL_62:\n        v38 = v11[72];\n        v31[1] = 0;\n        *v31 = v38;\n        v39 = *((_QWORD *)v11 + 5);\n        if ( v39 != -1 )\n        {\n          v40 = &v26[32 * v39];\n          if ( *(_DWORD *)v40 == 5 )\n          {\n            LODWORD(v159) = 1;\n            v165 = *((_DWORD *)v40 + 4);\n            goto LABEL_65;\n          }\nLABEL_200:\n          abort();\n        }\n        LODWORD(v159) = 0;\nLABEL_65:\n        v41 = *((_QWORD *)v11 + 8);\n        if ( v41 != -1 )\n        {\n          v42 = &v26[32 * v41];\n          if ( *(_DWORD *)v42 != 5 )\n            goto LABEL_200;\n          v43 = (int)v159;\n          *(&v165 + (unsigned int)v159) = *((_DWORD *)v42 + 4);\n          LODWORD(v159) = v43 + 1;\n        }\n        v44 = v18 + 2;\n        if ( v18 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v10 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v10 < v44 )\n        {\n          if ( v10 )\n          {\n            if ( (v10 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v10 *= 2LL;\n            if ( v10 >= v44 )\n              goto LABEL_73;\n          }\n          else if ( v44 <= 0xC )\n          {\n            v10 = 12LL;\nLABEL_73:\n            if ( v13 && v13 != src )\n            {\n              v45 = (char *)realloc(v13, v10);\n              if ( v45 )\n                goto LABEL_76;\nLABEL_88:\n              v56 = v13;\n              *(_QWORD *)&v161 = __errno_location();\nLABEL_89:\n              if ( v56 == src || !v56 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v171 != v174 )\n                    free(v171);\n                  if ( v168 != v169 )\n                    free(v168);\n                  v13 = 0LL;\n                  **(_DWORD **)&v161 = 12;\n                  return v13;\n                }\nLABEL_112:\n                *(_QWORD *)&v161 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v56);\n              goto LABEL_91;\n            }\n            LOBYTE(v161) = v13 == src;\n            v94 = (char *)malloc(v10);\n            v45 = v94;\n            if ( !v94 )\n              goto LABEL_88;\n            if ( v18 && LOBYTE(v161) )\n              v45 = (char *)memcpy(v94, v13, v18);\nLABEL_76:\n            v45[v18] = 0;\n            v157 = v45;\n            v46 = __errno_location();\n            v47 = v157;\n            v157 = v31;\n            *(_QWORD *)&v161 = v46;\n            LODWORD(v153) = *v46;\n            while ( 2 )\n            {\n              v48 = 0x7FFFFFFFLL;\n              v164 = -1;\n              **(_DWORD **)&v161 = 0;\n              if ( v10 - v18 <= 0x7FFFFFFF )\n                v48 = v10 - v18;\n              switch ( (int)v162 )\n              {\n                case 1:\n                  v71 = (unsigned int)*((char *)v168 + 32 * *((_QWORD *)v11 + 10) + 16);\n                  goto LABEL_150;\n                case 2:\n                  v71 = *((unsigned __int8 *)v168 + 32 * *((_QWORD *)v11 + 10) + 16);\n                  goto LABEL_150;\n                case 3:\n                  v71 = (unsigned int)*((__int16 *)v168 + 16 * *((_QWORD *)v11 + 10) + 8);\n                  goto LABEL_150;\n                case 4:\n                  v71 = *((unsigned __int16 *)v168 + 16 * *((_QWORD *)v11 + 10) + 8);\n                  goto LABEL_150;\n                case 5:\n                case 6:\n                case 13:\n                case 14:\n                  v71 = *((unsigned int *)v168 + 8 * *((_QWORD *)v11 + 10) + 4);\nLABEL_150:\n                  v70 = &v47[v18];\n                  v156 = v47;\n                  if ( (_DWORD)v159 != 1 )\n                  {\n                    if ( (_DWORD)v159 != 2 )\n                    {\n                      v149 = &v164;\n                      goto LABEL_153;\n                    }\n                    goto LABEL_209;\n                  }\n                  v150 = &v164;\n                  v149 = (int *)v71;\n                  break;\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                case 15:\n                case 16:\n                case 17:\n                  v70 = &v47[v18];\n                  v71 = *((_QWORD *)v168 + 4 * *((_QWORD *)v11 + 10) + 2);\n                  v156 = v47;\n                  if ( (_DWORD)v159 != 1 )\n                  {\n                    if ( (_DWORD)v159 != 2 )\n                    {\n                      v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                              v70,\n                              v48,\n                              1LL,\n                              -1LL,\n                              v160,\n                              v71,\n                              &v164,\n                              v150);\nLABEL_131:\n                      v47 = (char *)v156;\n                      goto LABEL_132;\n                    }\nLABEL_209:\n                    v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                            v70,\n                            v48,\n                            1LL,\n                            -1LL,\n                            v160,\n                            v165,\n                            v166,\n                            v71,\n                            &v164);\nLABEL_210:\n                    v47 = (char *)v156;\nLABEL_132:\n                    v73 = v164;\n                    if ( v164 < 0 )\n                    {\nLABEL_154:\n                      if ( v157[1] )\n                      {\n                        v157[1] = 0;\n                        continue;\n                      }\n                      if ( v72 < 0 )\n                      {\n                        v79 = **(_DWORD **)&v161;\n                        if ( !**(_DWORD **)&v161 )\n                        {\n                          v79 = 84;\n                          if ( (v11[72] & 0xEF) != 99 )\n                            v79 = 22;\n                        }\n                        if ( v47 != src && v47 )\n                          free(v47);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v171 != v174 )\n                          free(v171);\n                        if ( v168 != v169 )\n                          free(v168);\n                        **(_DWORD **)&v161 = v79;\n                        return 0LL;\n                      }\nLABEL_136:\n                      v164 = v72;\n                      v73 = v72;\nLABEL_137:\n                      if ( (unsigned int)(v73 + 1) < v48 )\n                      {\n                        v13 = v47;\n                        v14 = v18 + v73;\n                        **(_DWORD **)&v161 = (_DWORD)v153;\n                        goto LABEL_110;\n                      }\n                      if ( v10 - v18 > 0x7FFFFFFE )\n                      {\n                        if ( v47 != src && v47 )\n                          free(v47);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v171 != v174 )\n                          free(v171);\n                        if ( v168 != v169 )\n                          free(v168);\n                        v13 = 0LL;\n                        **(_DWORD **)&v161 = 75;\n                        return v13;\n                      }\n                      v74 = (unsigned int)(v73 + 2);\n                      v75 = __CFADD__(v18, v74);\n                      v76 = v18 + v74;\n                      if ( (v10 & 0x8000000000000000LL) != 0LL )\n                      {\n                        if ( v10 != -1LL )\n                          goto LABEL_202;\n                      }\n                      else\n                      {\n                        if ( v75 )\n                          goto LABEL_202;\n                        if ( 2 * v10 >= v76 )\n                          v76 = 2 * v10;\n                        if ( v10 < v76 )\n                        {\n                          v10 *= 2LL;\n                          if ( v10 < v76 )\n                          {\n                            if ( v76 == -1LL )\n                            {\nLABEL_202:\n                              v56 = v47;\n                              goto LABEL_89;\n                            }\n                            v10 = v76;\n                          }\n                          v77 = v47 == src;\n                          if ( !v47 || v47 == src )\n                          {\n                            v156 = v47;\n                            v93 = (char *)malloc(v10);\n                            v47 = (char *)v156;\n                            if ( !v93 )\n                              goto LABEL_202;\n                            if ( v18 && v77 )\n                              v47 = (char *)memcpy(v93, v156, v18);\n                            else\n                              v47 = v93;\n                          }\n                          else\n                          {\n                            v156 = v47;\n                            v78 = (char *)realloc(v47, v10);\n                            v47 = (char *)v156;\n                            if ( !v78 )\n                              goto LABEL_202;\n                            v47 = v78;\n                          }\n                        }\n                      }\n                      continue;\n                    }\nLABEL_133:\n                    if ( v73 < v48 && v47[v73 + v18] )\n                      goto LABEL_200;\n                    if ( v73 >= v72 )\n                      goto LABEL_137;\n                    goto LABEL_136;\n                  }\n                  v150 = &v164;\n                  v149 = (int *)v71;\n                  break;\n                case 11:\n                  v83 = *((_QWORD *)v11 + 10);\n                  v84 = &v47[v18];\n                  v156 = v47;\n                  v85 = *((double *)v168 + 4 * v83 + 2);\n                  if ( (_DWORD)v159 == 1 )\n                  {\n                    v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                            v84,\n                            v48,\n                            1LL,\n                            -1LL,\n                            v160,\n                            v165,\n                            v85,\n                            &v164,\n                            v150);\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v159 != 2 )\n                    {\n                      v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                              v84,\n                              v48,\n                              1LL,\n                              -1LL,\n                              v160,\n                              &v164,\n                              v85);\n                      v47 = (char *)v156;\n                      goto LABEL_132;\n                    }\n                    v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                            v84,\n                            v48,\n                            1LL,\n                            -1LL,\n                            v160,\n                            v165,\n                            v85,\n                            v166,\n                            &v164);\n                  }\n                  v47 = (char *)v156;\n                  goto LABEL_132;\n                case 12:\n                  v80 = *((_QWORD *)v11 + 10);\n                  v81 = &v47[v18];\n                  v156 = v47;\n                  v82 = *((long double *)v168 + 2 * v80 + 1);\n                  if ( (_DWORD)v159 == 1 )\n                  {\n                    v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                            v81,\n                            v48,\n                            1LL,\n                            -1LL,\n                            v160,\n                            v165,\n                            *(_OWORD *)&v82,\n                            &v164);\n                    goto LABEL_210;\n                  }\n                  if ( (_DWORD)v159 != 2 )\n                  {\n                    v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                            v81,\n                            v48,\n                            1LL,\n                            -1LL,\n                            v160,\n                            &v164,\n                            *(_OWORD *)&v82);\n                    goto LABEL_131;\n                  }\n                  v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                          v81,\n                          v48,\n                          1LL,\n                          -1LL,\n                          v160,\n                          v165,\n                          v166);\n                  v47 = (char *)v156;\n                  goto LABEL_132;\n                default:\n                  goto LABEL_408;\n              }\n              break;\n            }\n            v71 = v165;\nLABEL_153:\n            v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                    v70,\n                    v48,\n                    1LL,\n                    -1LL,\n                    v160,\n                    v71,\n                    v149,\n                    v150);\n            v73 = v164;\n            v47 = (char *)v156;\n            if ( v164 < 0 )\n              goto LABEL_154;\n            goto LABEL_133;\n          }\n          if ( v18 != -3LL )\n          {\n            v10 = v18 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v45 = v13;\n        goto LABEL_76;\n      }\n      switch ( v28 )\n      {\n        case 18:\n          v14 = v18;\n          **((_BYTE **)v27 + 2) = v18;\n          break;\n        case 19:\n          v14 = v18;\n          **((_WORD **)v27 + 2) = v18;\n          break;\n        case 20:\n          v14 = v18;\n          **((_DWORD **)v27 + 2) = v18;\n          break;\n        case 21:\n        case 22:\n          v14 = v18;\n          **((_QWORD **)v27 + 2) = v18;\n          break;\n        default:\nLABEL_408:\n          abort();\n      }\nLABEL_110:\n      v12 = (_BYTE *)*((_QWORD *)v11 + 1);\n      v11 += 88;\n      v15 = *(_BYTE **)v11;\n      ++v158;\n      if ( v15 != v12 )\n        goto LABEL_14;\nLABEL_111:\n      v18 = v14;\n    }\n    v107 = v18;\n    v108 = v18 + 1;\n    if ( v18 == -1LL )\n    {\n      if ( v10 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v10 < v108 )\n    {\n      if ( v10 )\n      {\n        if ( (v10 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v10 *= 2LL;\n        if ( v10 >= v108 )\n        {\nLABEL_303:\n          v109 = v13 == src;\n          if ( !v13 || v13 == src )\n          {\n            v142 = (char *)malloc(v10);\n            if ( !v142 )\n              goto LABEL_88;\n            if ( v107 && v109 )\n              v13 = (char *)memcpy(v142, v13, v107);\n            else\n              v13 = v142;\n          }\n          else\n          {\n            v110 = (char *)realloc(v13, v10);\n            if ( !v110 )\n              goto LABEL_126;\n            v13 = v110;\n          }\n          goto LABEL_307;\n        }\n      }\n      else if ( v108 <= 0xC )\n      {\n        v10 = 12LL;\n        goto LABEL_303;\n      }\n      if ( v18 == -2LL )\n        goto LABEL_88;\n      v10 = v18 + 1;\n      goto LABEL_303;\n    }\nLABEL_307:\n    v13[v107] = 0;\n    if ( v10 > v108 && v13 != src )\n    {\n      v111 = (char *)realloc(v13, v108);\n      if ( v111 )\n        v13 = v111;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v171 != v174 )\n      free(v171);\n    if ( v168 != v169 )\n      free(v168);\n    *v155 = v107;\n    return v13;\n  }\n  if ( v171 != v174 )\n    free(v171);\n  if ( v168 != v169 )\n    free(v168);\n  v13 = 0LL;\n  *__errno_location() = 22;\n  return v13;\n}\n\nchar *__fastcall sub_40AFC0(void *a1, size_t *a2, _BYTE *a3, __int64 a4)\n{\n  __int64 v6; // rax\n  unsigned __int64 v7; // rax\n  size_t v8; // rdi\n  char *v9; // rax\n  size_t v10; // r12\n  char *v11; // r14\n  _BYTE *v12; // r8\n  char *v13; // rbx\n  size_t v14; // r15\n  _BYTE *v15; // rcx\n  void *v16; // rcx\n  unsigned __int64 v17; // rax\n  size_t v18; // r13\n  bool v19; // dl\n  char *v20; // rax\n  char *v21; // rax\n  void *v22; // rsp\n  char *v23; // rax\n  char v24; // r15\n  __int64 v25; // rax\n  char *v26; // r8\n  long double *v27; // rdx\n  int v28; // eax\n  char v29; // al\n  int v30; // eax\n  char *v31; // r15\n  const char *v32; // rdi\n  _BYTE *v33; // rsi\n  _BYTE *v34; // rdx\n  _BYTE *v35; // rsi\n  _BYTE *v36; // rdx\n  __int64 v37; // rax\n  char v38; // al\n  __int64 v39; // rax\n  char *v40; // rax\n  __int64 v41; // rax\n  char *v42; // r8\n  int v43; // eax\n  unsigned __int64 v44; // rax\n  char *v45; // r11\n  int *v46; // rax\n  char *v47; // r11\n  unsigned __int64 v48; // rbx\n  unsigned __int64 v49; // r10\n  char *v50; // rdx\n  char *v51; // rcx\n  __int64 v52; // rsi\n  _DWORD *v53; // r8\n  unsigned __int64 v54; // rdx\n  unsigned __int64 v55; // rcx\n  void *v56; // r15\n  unsigned __int64 v58; // rax\n  char *v59; // rax\n  char v61; // fps^1\n  char *v65; // rdx\n  char *v66; // rdi\n  int v67; // r11d\n  __int64 v68; // rcx\n  _DWORD *v69; // rcx\n  char *v70; // rdi\n  unsigned __int64 v71; // r9\n  int v72; // eax\n  int v73; // edx\n  __int64 v74; // rax\n  bool v75; // cf\n  unsigned __int64 v76; // rax\n  bool v77; // bl\n  char *v78; // rax\n  int v79; // ebx\n  __int64 v80; // rax\n  char *v81; // rdi\n  long double v82; // fst7\n  __int64 v83; // rax\n  char *v84; // rdi\n  double v85; // xmm0_8\n  unsigned __int64 v86; // rax\n  void *v87; // rax\n  char *v88; // rax\n  char *v89; // rcx\n  int v90; // r8d\n  __int16 v91; // ax\n  char *v92; // r15\n  char *v93; // rax\n  char *v94; // rax\n  char *v95; // rax\n  char v96; // al\n  char *v97; // r9\n  size_t v98; // r8\n  unsigned __int64 v99; // r10\n  char *v100; // rdi\n  __int64 v101; // rax\n  char *v102; // r10\n  unsigned __int64 v103; // rax\n  char *v104; // rax\n  char *v105; // rsi\n  char v106; // al\n  size_t v107; // r15\n  size_t v108; // r14\n  bool v109; // r13\n  char *v110; // rax\n  char *v111; // rax\n  __int64 v112; // rax\n  char *v113; // r10\n  char *v114; // rax\n  char *v115; // rax\n  char *v116; // rax\n  __int64 v117; // rsi\n  __int64 v118; // rdx\n  char v119; // al\n  __int64 v120; // rdx\n  char *v121; // rax\n  char *v122; // rax\n  __int64 v123; // rdx\n  char v124; // al\n  char *v125; // rax\n  char *v126; // rsi\n  __int64 v127; // r9\n  __int64 v128; // rdx\n  char *v129; // rax\n  char *v130; // rsi\n  char *v131; // rdi\n  __int64 v132; // rax\n  __int64 v133; // rsi\n  unsigned __int64 v134; // rax\n  char v135; // al\n  __int64 v136; // rsi\n  char v137; // al\n  char *v138; // rax\n  __int64 v139; // rdx\n  char v140; // al\n  char *v141; // rax\n  char *v142; // rax\n  char *v143; // rax\n  void *v144; // rdx\n  char v145; // al\n  _BYTE *v146; // rax\n  char *v147; // rax\n  char v148; // al\n  int *v149; // [rsp+10h] [rbp-700h]\n  int *v150; // [rsp+18h] [rbp-6F8h]\n  __int64 v151; // [rsp+20h] [rbp-6F0h] BYREF\n  unsigned __int64 v152; // [rsp+28h] [rbp-6E8h]\n  char *v153; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v155; // [rsp+40h] [rbp-6D0h]\n  void *v156; // [rsp+48h] [rbp-6C8h]\n  char *v157; // [rsp+50h] [rbp-6C0h]\n  __int64 v158; // [rsp+58h] [rbp-6B8h]\n  _BYTE *v159; // [rsp+60h] [rbp-6B0h]\n  char *v160; // [rsp+68h] [rbp-6A8h]\n  long double v161; // [rsp+70h] [rbp-6A0h]\n  void *v162; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v164; // [rsp+94h] [rbp-67Ch] BYREF\n  unsigned int v165; // [rsp+98h] [rbp-678h]\n  unsigned int v166; // [rsp+9Ch] [rbp-674h]\n  char v167[8]; // [rsp+A0h] [rbp-670h] BYREF\n  void *v168; // [rsp+A8h] [rbp-668h]\n  _BYTE v169[224]; // [rsp+B0h] [rbp-660h] BYREF\n  __int64 v170; // [rsp+190h] [rbp-580h] BYREF\n  void *v171; // [rsp+198h] [rbp-578h]\n  __int64 v172; // [rsp+1A0h] [rbp-570h]\n  __int64 v173; // [rsp+1A8h] [rbp-568h]\n  _BYTE v174[624]; // [rsp+1B0h] [rbp-560h] BYREF\n  char v175[752]; // [rsp+420h] [rbp-2F0h] BYREF\n\n  src = a1;\n  v155 = a2;\n  if ( (int)sub_40CD00(a3, &v170, v167) < 0 )\n    return 0LL;\n  if ( (int)sub_40CAE0(a4, v167) >= 0 )\n  {\n    v6 = v172 + 7;\n    if ( (unsigned __int64)(v172 + 7) <= 6 )\n      v6 = -1LL;\n    v75 = __CFADD__(v173, v6);\n    v7 = v173 + v6;\n    if ( v75 )\n      goto LABEL_112;\n    v8 = v7 + 6;\n    if ( v7 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v8 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v22 = alloca(v7 + 14);\n      v160 = (char *)&v151;\n    }\n    else\n    {\n      if ( v7 == -7LL )\n        goto LABEL_112;\n      v9 = (char *)malloc(v8);\n      v160 = v9;\n      if ( !v9 )\n        goto LABEL_112;\n      ptr = v9;\n    }\n    v10 = 0LL;\n    if ( src )\n      v10 = *v155;\n    v11 = (char *)v171;\n    v12 = a3;\n    v13 = (char *)src;\n    v158 = 0LL;\n    v14 = 0LL;\n    v15 = *(_BYTE **)v171;\n    if ( *(_BYTE **)v171 == v12 )\n      goto LABEL_111;\nLABEL_14:\n    v16 = (void *)(v15 - v12);\n    v17 = (unsigned __int64)v16 + v14;\n    v18 = (size_t)v16 + v14;\n    if ( __CFADD__(v16, v14) )\n    {\n      if ( v10 != -1LL )\n        goto LABEL_88;\n      v18 = -1LL;\n    }\n    else if ( v10 < v17 )\n    {\n      if ( v10 )\n      {\n        if ( (v10 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v10 *= 2LL;\n        if ( v10 >= v17 )\n        {\nLABEL_28:\n          v19 = v13 == src;\n          if ( !v13 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v17 <= 0xC )\n      {\n        v10 = 12LL;\n        v19 = v13 == src;\n        if ( !v13 )\n        {\nLABEL_19:\n          v159 = v12;\n          LOBYTE(v161) = v19;\n          v162 = v16;\n          v20 = (char *)malloc(v10);\n          v16 = v162;\n          v12 = v159;\n          if ( !v20 )\n            goto LABEL_88;\n          if ( v14 && LOBYTE(v161) )\n          {\n            *(_QWORD *)&v161 = v159;\n            v21 = (char *)memcpy(v20, v13, v14);\n            v16 = v162;\n            v12 = *(_BYTE **)&v161;\n            v13 = v21;\n          }\n          else\n          {\n            v13 = v20;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v19 )\n        {\n          *(_QWORD *)&v161 = v12;\n          v162 = v16;\n          v23 = (char *)realloc(v13, v10);\n          if ( !v23 )\n            goto LABEL_126;\n          v16 = v162;\n          v12 = *(_BYTE **)&v161;\n          v13 = v23;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v17 == -1LL )\n        goto LABEL_88;\n      v10 = (size_t)v16 + v14;\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v13[v14], v12, (size_t)v16);\n    while ( v170 != v158 )\n    {\n      v24 = v11[72];\n      v25 = *((_QWORD *)v11 + 10);\n      if ( v24 == 37 )\n      {\n        if ( v25 != -1 )\n          goto LABEL_200;\n        v58 = v18 + 1;\n        v14 = v18 + 1;\n        if ( v18 == -1LL )\n        {\n          if ( v10 != -1LL )\n            goto LABEL_88;\n          v14 = -1LL;\n        }\n        else if ( v10 < v58 )\n        {\n          if ( v10 )\n          {\n            if ( (v10 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v10 *= 2LL;\n            if ( v10 < v58 )\n              goto LABEL_238;\n          }\n          else\n          {\n            if ( v58 <= 0xC )\n            {\n              v10 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_238:\n            if ( v18 == -2LL )\n              goto LABEL_88;\n            v10 = v18 + 1;\n          }\nLABEL_105:\n          if ( v13 && v13 != src )\n          {\n            v59 = (char *)realloc(v13, v10);\n            if ( v59 )\n            {\n              v13 = v59;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v56 = v13;\n            *(_QWORD *)&v161 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v162) = v13 == src;\n          v95 = (char *)malloc(v10);\n          if ( !v95 )\n            goto LABEL_88;\n          if ( v18 && (_BYTE)v162 )\n            v13 = (char *)memcpy(v95, v13, v18);\n          else\n            v13 = v95;\n        }\nLABEL_109:\n        v13[v18] = 37;\n        goto LABEL_110;\n      }\n      if ( v25 == -1 )\n        goto LABEL_200;\n      v26 = (char *)v168;\n      v27 = (long double *)((char *)v168 + 32 * v25);\n      v28 = *(_DWORD *)v27;\n      LODWORD(v162) = *(_DWORD *)v27;\n      if ( v24 != 110 )\n      {\n        v29 = v24 & 0xDF;\n        if ( ((unsigned __int8)((v24 & 0xDF) - 69) <= 2u || v29 == 65) && (_DWORD)v162 == 12 )\n        {\n          _FST7 = v27[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v65 = (char *)*((_QWORD *)v11 + 3);\n            v66 = (char *)*((_QWORD *)v11 + 4);\n            v67 = *((_DWORD *)v11 + 4);\n            if ( v65 == v66 )\n            {\n              v49 = 0LL;\n            }\n            else\n            {\n              v68 = *((_QWORD *)v11 + 5);\n              if ( v68 == -1 )\n              {\n                v49 = 0LL;\n                v162 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v126 = v65 + 1;\n                  v127 = -1LL;\n                  v128 = *v65 - 48;\n                  if ( v49 <= 0x1999999999999999LL )\n                    v127 = 10 * v49;\n                  v75 = __CFADD__(v127, v128);\n                  v49 = v127 + v128;\n                  v65 = v126;\n                  if ( v75 )\n                  {\n                    if ( v66 == v126 )\n                    {\nLABEL_81:\n                      v49 = (unsigned __int64)v162;\n                      goto LABEL_82;\n                    }\n                    while ( *v65++ != 48 )\n                    {\n                      if ( v66 == v65 )\n                        goto LABEL_81;\n                    }\n                    v49 = -1LL;\n                  }\n                  if ( v66 == v65 )\n                    goto LABEL_82;\n                }\n              }\n              v69 = (char *)v168 + 32 * v68;\n              if ( *v69 != 5 )\n                goto LABEL_200;\n              v49 = (int)v69[4];\n              if ( (v49 & 0x80000000) != 0LL )\n              {\n                v67 |= 2u;\n                v49 = -(__int64)v49;\n              }\n            }\nLABEL_82:\n            v50 = (char *)*((_QWORD *)v11 + 6);\n            v51 = (char *)*((_QWORD *)v11 + 7);\n            if ( v50 != v51 )\n            {\n              v52 = *((_QWORD *)v11 + 8);\n              if ( v52 == -1 )\n              {\n                v129 = v50 + 1;\n                v54 = 0LL;\n                if ( v51 != v129 )\n                {\n                  v130 = v129;\n                  while ( 1 )\n                  {\n                    v131 = v130 + 1;\n                    v132 = *v130 - 48;\n                    v133 = -1LL;\n                    if ( v54 <= 0x1999999999999999LL )\n                      v133 = 10 * v54;\n                    v75 = __CFADD__(v133, v132);\n                    v134 = v133 + v132;\n                    v130 = v131;\n                    v54 = v134;\n                    if ( v75 )\n                    {\n                      if ( v51 == v131 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v130 = v131 + 1;\n                        if ( *v131 == 48 )\n                          break;\n                        if ( v51 == v130 )\n                          goto LABEL_88;\n                        ++v131;\n                      }\n                      v54 = -1LL;\n                    }\n                    if ( v51 == v130 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_375;\n              }\n              v53 = (char *)v168 + 32 * v52;\n              if ( *v53 != 5 )\n                goto LABEL_200;\n              v54 = (int)v53[4];\n              if ( (v54 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v54 )\n                {\n                  v55 = v54 + 12;\n                  if ( v54 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_190:\n                  v86 = v55;\n                  if ( v49 >= v55 )\n                    v86 = v49;\n                  v75 = __CFADD__(v86, 1LL);\n                  v87 = (void *)(v86 + 1);\n                  v162 = v87;\n                  if ( v75 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v87 <= 0x2BC )\n                  {\n                    v89 = v175;\n                  }\n                  else\n                  {\n                    v156 = (void *)v49;\n                    v157 = (char *)v54;\n                    LODWORD(v159) = v67;\n                    v161 = _FST7;\n                    if ( v87 == (void *)-1LL )\n                      goto LABEL_88;\n                    v88 = (char *)malloc((size_t)v87);\n                    v67 = (int)v159;\n                    _FST7 = v161;\n                    v89 = v88;\n                    v54 = (unsigned __int64)v157;\n                    v49 = (unsigned __int64)v156;\n                    if ( !v88 )\n                      goto LABEL_88;\n                  }\n                  v90 = (unsigned __int16)v165;\n                  LOBYTE(v91) = v165;\n                  HIBYTE(v91) = BYTE1(v165) | 3;\n                  LOWORD(v165) = v91;\n                  __asm { fxam }\n                  if ( (v61 & 2) != 0 )\n                  {\n                    *v89 = 45;\n                    _FST7 = -_FST7;\n                    v92 = v89 + 1;\n                  }\n                  else if ( (v67 & 4) != 0 )\n                  {\n                    v92 = v89 + 1;\n                    *v89 = 43;\n                  }\n                  else\n                  {\n                    v92 = v89;\n                    if ( (v67 & 8) != 0 )\n                    {\n                      v92 = v89 + 1;\n                      *v89 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_200;\n                    v97 = v92 + 3;\n                    if ( (unsigned __int8)(v11[72] - 65) > 0x19u )\n                    {\n                      v92[2] = 102;\n                      *(_WORD *)v92 = 28265;\n                    }\n                    else\n                    {\n                      v92[2] = 70;\n                      *(_WORD *)v92 = 20041;\n                    }\n                    v92 = 0LL;\n                    goto LABEL_263;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_200;\n                  v96 = v11[72] & 0xDF;\n                  switch ( v96 )\n                  {\n                    case 'F':\n                      *v92 = 48;\n                      if ( (v67 & 0x10) != 0 || v54 )\n                      {\n                        LODWORD(v152) = v90;\n                        v153 = (char *)v49;\n                        v156 = v89;\n                        v157 = (char *)v54;\n                        LODWORD(v159) = v67;\n                        *(_QWORD *)&v161 = v92 + 2;\n                        v122 = nl_langinfo(0x10000);\n                        v123 = (__int64)v157;\n                        v97 = *(char **)&v161;\n                        v124 = *v122;\n                        LOBYTE(v67) = (_BYTE)v159;\n                        v89 = (char *)v156;\n                        v49 = (unsigned __int64)v153;\n                        LOWORD(v90) = v152;\n                        if ( !v124 )\n                          v124 = 46;\n                        v92[1] = v124;\n                        if ( v123 )\n                        {\n                          v125 = v97;\n                          do\n                            *v125++ = 48;\n                          while ( v125 != &v92[v123 + 2] );\n                          v97 += v123;\n                        }\n                        goto LABEL_263;\n                      }\n                      goto LABEL_262;\n                    case 'E':\n                      *v92 = 48;\n                      if ( (v67 & 0x10) != 0 || (v105 = v92 + 1, v54) )\n                      {\n                        LODWORD(v152) = v90;\n                        v153 = (char *)v49;\n                        v156 = v89;\n                        v157 = (char *)v54;\n                        LODWORD(v159) = v67;\n                        *(_QWORD *)&v161 = v92 + 2;\n                        v138 = nl_langinfo(0x10000);\n                        v139 = (__int64)v157;\n                        v105 = *(char **)&v161;\n                        v140 = *v138;\n                        LOBYTE(v67) = (_BYTE)v159;\n                        v89 = (char *)v156;\n                        v49 = (unsigned __int64)v153;\n                        LOWORD(v90) = v152;\n                        if ( !v140 )\n                          v140 = 46;\n                        v92[1] = v140;\n                        if ( v139 )\n                        {\n                          v141 = v105;\n                          do\n                            *v141++ = 48;\n                          while ( v141 != &v92[v139 + 2] );\n                          v105 += v139;\n                        }\n                      }\n                      v106 = v11[72];\n                      v97 = v105 + 4;\n                      v105[3] = 48;\n                      *v105 = v106;\n                      *(_WORD *)(v105 + 1) = 12331;\n                      goto LABEL_263;\n                    case 'G':\n                      *v92 = 48;\n                      if ( (v67 & 0x10) != 0 )\n                      {\n                        if ( v54 )\n                        {\n                          HIDWORD(v151) = v90;\n                          v152 = v49;\n                          v153 = v92 + 2;\n                          v156 = v89;\n                          LODWORD(v157) = v67;\n                          v159 = (_BYTE *)v54;\n                          *(_QWORD *)&v161 = v54 - 1;\n                          v116 = nl_langinfo(0x10000);\n                          v117 = *(_QWORD *)&v161;\n                          v118 = (__int64)v159;\n                          v119 = *v116;\n                          LOBYTE(v67) = (_BYTE)v157;\n                          v89 = (char *)v156;\n                          v97 = v153;\n                          v49 = v152;\n                          LOWORD(v90) = WORD2(v151);\n                          if ( !v119 )\n                            v119 = 46;\n                          v92[1] = v119;\n                          if ( v117 )\n                          {\n                            v120 = (__int64)&v92[v118 + 1];\n                            v121 = v97;\n                            do\n                              *v121++ = 48;\n                            while ( v121 != (char *)v120 );\n                            v97 += v117;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v153) = v90;\n                          v156 = (void *)v49;\n                          v157 = v92 + 2;\n                          v159 = v89;\n                          LODWORD(v161) = v67;\n                          v147 = nl_langinfo(0x10000);\n                          LOBYTE(v67) = LOBYTE(v161);\n                          v89 = v159;\n                          v148 = *v147;\n                          v97 = v157;\n                          v49 = (unsigned __int64)v156;\n                          LOWORD(v90) = (_WORD)v153;\n                          if ( !v148 )\n                            v148 = 46;\n                          v92[1] = v148;\n                        }\n                        goto LABEL_263;\n                      }\nLABEL_262:\n                      v97 = v92 + 1;\n                      goto LABEL_263;\n                  }\n                  if ( v96 != 65 )\n                    goto LABEL_200;\n                  *v92 = 48;\n                  *(_QWORD *)&v161 = v92 + 2;\n                  v135 = v11[72];\n                  v92[2] = 48;\n                  v92[1] = v135 + 23;\n                  if ( (v67 & 0x10) != 0 || (v136 = (__int64)(v92 + 3), v54) )\n                  {\n                    HIDWORD(v151) = v90;\n                    v152 = v49;\n                    v153 = v89;\n                    v156 = (void *)v54;\n                    LODWORD(v157) = v67;\n                    v159 = v92 + 4;\n                    v143 = nl_langinfo(0x10000);\n                    v144 = v156;\n                    v136 = (__int64)v159;\n                    v145 = *v143;\n                    LOBYTE(v67) = (_BYTE)v157;\n                    v89 = v153;\n                    v49 = v152;\n                    LOWORD(v90) = WORD2(v151);\n                    if ( !v145 )\n                      v145 = 46;\n                    v92[3] = v145;\n                    if ( v144 )\n                    {\n                      v146 = (_BYTE *)v136;\n                      do\n                        *v146++ = 48;\n                      while ( v146 != (_BYTE *)v144 + (_QWORD)v92 + 4 );\n                      v136 += (__int64)v144;\n                    }\n                  }\n                  v137 = v11[72];\n                  v97 = (char *)(v136 + 3);\n                  *(_WORD *)(v136 + 1) = 12331;\n                  v92 = *(char **)&v161;\n                  *(_BYTE *)v136 = v137 + 15;\nLABEL_263:\n                  LOWORD(v165) = v90;\n                  v98 = v97 - v89;\n                  if ( v49 > v97 - v89 )\n                  {\n                    v99 = v49 - v98;\n                    v100 = &v97[v99];\n                    v98 = &v97[v99] - v89;\n                    if ( (v67 & 2) != 0 )\n                    {\n                      if ( v99 )\n                      {\n                        do\n                          *v97++ = 32;\n                        while ( v100 != v97 );\n                      }\n                    }\n                    else if ( (v67 & 0x20) != 0 && v92 )\n                    {\n                      if ( v92 >= v97 )\n                      {\n                        v92 = v97;\n                      }\n                      else\n                      {\n                        v101 = -1LL;\n                        do\n                        {\n                          v100[v101] = v97[v101];\n                          --v101;\n                        }\n                        while ( v101 != v92 - 1 - v97 );\n                      }\n                      if ( v99 )\n                      {\n                        v102 = &v92[v99];\n                        do\n                          *v92++ = 48;\n                        while ( v92 != v102 );\n                      }\n                    }\n                    else\n                    {\n                      v112 = -1LL;\n                      if ( v89 < v97 )\n                      {\n                        do\n                        {\n                          v100[v112] = v97[v112];\n                          --v112;\n                        }\n                        while ( v89 - 1 - v97 != v112 );\n                        v97 = v89;\n                      }\n                      if ( v99 )\n                      {\n                        v113 = &v97[v99];\n                        do\n                          *v97++ = 32;\n                        while ( v97 != v113 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v162 <= v98 )\n                    goto LABEL_200;\n                  v103 = v98 + v18;\n                  v14 = v98 + v18;\n                  if ( v10 - v18 <= v98 )\n                  {\n                    if ( __CFADD__(v98, v18) )\n                    {\n                      if ( v10 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v10 < v103 )\n                    {\n                      if ( v10 )\n                      {\n                        if ( (v10 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v10 *= 2LL;\n                        if ( v10 < v103 )\n                          goto LABEL_373;\n                      }\n                      else\n                      {\n                        if ( v103 <= 0xC )\n                        {\n                          v10 = 12LL;\n                          goto LABEL_280;\n                        }\nLABEL_373:\n                        if ( v103 == -1LL )\n                          goto LABEL_88;\n                        v10 = v98 + v18;\n                      }\nLABEL_280:\n                      if ( !v13 || v13 == src )\n                      {\n                        LOBYTE(v159) = v13 == src;\n                        *(_QWORD *)&v161 = v98;\n                        v162 = v89;\n                        v114 = (char *)malloc(v10);\n                        v89 = (char *)v162;\n                        v98 = *(_QWORD *)&v161;\n                        if ( !v114 )\n                          goto LABEL_88;\n                        if ( v18 && (_BYTE)v159 )\n                        {\n                          v115 = (char *)memcpy(v114, v13, v18);\n                          v89 = (char *)v162;\n                          v98 = *(_QWORD *)&v161;\n                          v13 = v115;\n                        }\n                        else\n                        {\n                          v13 = v114;\n                        }\n                      }\n                      else\n                      {\n                        *(_QWORD *)&v161 = v98;\n                        v162 = v89;\n                        v104 = (char *)realloc(v13, v10);\n                        if ( !v104 )\n                          goto LABEL_88;\n                        v89 = (char *)v162;\n                        v98 = *(_QWORD *)&v161;\n                        v13 = v104;\n                      }\n                    }\n                  }\n                  v162 = v89;\n                  memcpy(&v13[v18], v89, v98);\n                  if ( v162 != v175 )\n                    free(v162);\n                  goto LABEL_110;\n                }\nLABEL_375:\n                v55 = 12LL;\n                goto LABEL_190;\n              }\n            }\n            v55 = 12LL;\n            if ( v29 != 65 )\n              v55 = 18LL;\n            v54 = 0LL;\n            if ( v29 != 65 )\n              v54 = 6LL;\n            goto LABEL_190;\n          }\n        }\n        v30 = *((_DWORD *)v11 + 4);\n        v31 = v160 + 1;\n        *v160 = 37;\n        if ( (v30 & 1) != 0 )\n        {\n          v32 = v160;\n          v160[1] = 39;\n          v31 = (char *)(v32 + 2);\n        }\n        if ( (v30 & 2) != 0 )\n          *v31++ = 45;\n        if ( (v30 & 4) != 0 )\n          *v31++ = 43;\n        if ( (v30 & 8) != 0 )\n          *v31++ = 32;\n        if ( (v30 & 0x10) != 0 )\n          *v31++ = 35;\n        if ( (v30 & 0x40) != 0 )\n          *v31++ = 73;\n        if ( (v30 & 0x20) != 0 )\n          *v31++ = 48;\n        v33 = (_BYTE *)*((_QWORD *)v11 + 3);\n        v34 = (_BYTE *)*((_QWORD *)v11 + 4);\n        if ( v33 != v34 )\n        {\n          v159 = v26;\n          *(_QWORD *)&v161 = v34 - v33;\n          memcpy(v31, v33, v34 - v33);\n          v26 = v159;\n          v31 += *(_QWORD *)&v161;\n        }\n        v35 = (_BYTE *)*((_QWORD *)v11 + 6);\n        v36 = (_BYTE *)*((_QWORD *)v11 + 7);\n        if ( v35 != v36 )\n        {\n          v159 = v26;\n          *(_QWORD *)&v161 = v36 - v35;\n          memcpy(v31, v35, v36 - v35);\n          v26 = v159;\n          v31 += *(_QWORD *)&v161;\n        }\n        if ( (unsigned int)v162 <= 0x10 )\n        {\n          v37 = 1LL << (char)v162;\n          if ( ((1LL << (char)v162) & 0x14180) != 0 )\n            goto LABEL_125;\n          if ( (v37 & 0x1000) != 0 )\n          {\n            *v31++ = 76;\n          }\n          else\n          {\n            if ( (v37 & 0x600) == 0 )\n              goto LABEL_62;\n            *v31++ = 108;\nLABEL_125:\n            *v31++ = 108;\n          }\n        }\nLABEL_62:\n        v38 = v11[72];\n        v31[1] = 0;\n        *v31 = v38;\n        v39 = *((_QWORD *)v11 + 5);\n        if ( v39 != -1 )\n        {\n          v40 = &v26[32 * v39];\n          if ( *(_DWORD *)v40 == 5 )\n          {\n            LODWORD(v159) = 1;\n            v165 = *((_DWORD *)v40 + 4);\n            goto LABEL_65;\n          }\nLABEL_200:\n          abort();\n        }\n        LODWORD(v159) = 0;\nLABEL_65:\n        v41 = *((_QWORD *)v11 + 8);\n        if ( v41 != -1 )\n        {\n          v42 = &v26[32 * v41];\n          if ( *(_DWORD *)v42 != 5 )\n            goto LABEL_200;\n          v43 = (int)v159;\n          *(&v165 + (unsigned int)v159) = *((_DWORD *)v42 + 4);\n          LODWORD(v159) = v43 + 1;\n        }\n        v44 = v18 + 2;\n        if ( v18 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v10 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v10 < v44 )\n        {\n          if ( v10 )\n          {\n            if ( (v10 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v10 *= 2LL;\n            if ( v10 >= v44 )\n              goto LABEL_73;\n          }\n          else if ( v44 <= 0xC )\n          {\n            v10 = 12LL;\nLABEL_73:\n            if ( v13 && v13 != src )\n            {\n              v45 = (char *)realloc(v13, v10);\n              if ( v45 )\n                goto LABEL_76;\nLABEL_88:\n              v56 = v13;\n              *(_QWORD *)&v161 = __errno_location();\nLABEL_89:\n              if ( v56 == src || !v56 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v171 != v174 )\n                    free(v171);\n                  if ( v168 != v169 )\n                    free(v168);\n                  v13 = 0LL;\n                  **(_DWORD **)&v161 = 12;\n                  return v13;\n                }\nLABEL_112:\n                *(_QWORD *)&v161 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v56);\n              goto LABEL_91;\n            }\n            LOBYTE(v161) = v13 == src;\n            v94 = (char *)malloc(v10);\n            v45 = v94;\n            if ( !v94 )\n              goto LABEL_88;\n            if ( v18 && LOBYTE(v161) )\n              v45 = (char *)memcpy(v94, v13, v18);\nLABEL_76:\n            v45[v18] = 0;\n            v157 = v45;\n            v46 = __errno_location();\n            v47 = v157;\n            v157 = v31;\n            *(_QWORD *)&v161 = v46;\n            LODWORD(v153) = *v46;\n            while ( 2 )\n            {\n              v48 = 0x7FFFFFFFLL;\n              v164 = -1;\n              **(_DWORD **)&v161 = 0;\n              if ( v10 - v18 <= 0x7FFFFFFF )\n                v48 = v10 - v18;\n              switch ( (int)v162 )\n              {\n                case 1:\n                  v71 = (unsigned int)*((char *)v168 + 32 * *((_QWORD *)v11 + 10) + 16);\n                  goto LABEL_150;\n                case 2:\n                  v71 = *((unsigned __int8 *)v168 + 32 * *((_QWORD *)v11 + 10) + 16);\n                  goto LABEL_150;\n                case 3:\n                  v71 = (unsigned int)*((__int16 *)v168 + 16 * *((_QWORD *)v11 + 10) + 8);\n                  goto LABEL_150;\n                case 4:\n                  v71 = *((unsigned __int16 *)v168 + 16 * *((_QWORD *)v11 + 10) + 8);\n                  goto LABEL_150;\n                case 5:\n                case 6:\n                case 13:\n                case 14:\n                  v71 = *((unsigned int *)v168 + 8 * *((_QWORD *)v11 + 10) + 4);\nLABEL_150:\n                  v70 = &v47[v18];\n                  v156 = v47;\n                  if ( (_DWORD)v159 != 1 )\n                  {\n                    if ( (_DWORD)v159 != 2 )\n                    {\n                      v149 = &v164;\n                      goto LABEL_153;\n                    }\n                    goto LABEL_209;\n                  }\n                  v150 = &v164;\n                  v149 = (int *)v71;\n                  break;\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                case 15:\n                case 16:\n                case 17:\n                  v70 = &v47[v18];\n                  v71 = *((_QWORD *)v168 + 4 * *((_QWORD *)v11 + 10) + 2);\n                  v156 = v47;\n                  if ( (_DWORD)v159 != 1 )\n                  {\n                    if ( (_DWORD)v159 != 2 )\n                    {\n                      v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                              v70,\n                              v48,\n                              1LL,\n                              -1LL,\n                              v160,\n                              v71,\n                              &v164,\n                              v150);\nLABEL_131:\n                      v47 = (char *)v156;\n                      goto LABEL_132;\n                    }\nLABEL_209:\n                    v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                            v70,\n                            v48,\n                            1LL,\n                            -1LL,\n                            v160,\n                            v165,\n                            v166,\n                            v71,\n                            &v164);\nLABEL_210:\n                    v47 = (char *)v156;\nLABEL_132:\n                    v73 = v164;\n                    if ( v164 < 0 )\n                    {\nLABEL_154:\n                      if ( v157[1] )\n                      {\n                        v157[1] = 0;\n                        continue;\n                      }\n                      if ( v72 < 0 )\n                      {\n                        v79 = **(_DWORD **)&v161;\n                        if ( !**(_DWORD **)&v161 )\n                        {\n                          v79 = 84;\n                          if ( (v11[72] & 0xEF) != 99 )\n                            v79 = 22;\n                        }\n                        if ( v47 != src && v47 )\n                          free(v47);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v171 != v174 )\n                          free(v171);\n                        if ( v168 != v169 )\n                          free(v168);\n                        **(_DWORD **)&v161 = v79;\n                        return 0LL;\n                      }\nLABEL_136:\n                      v164 = v72;\n                      v73 = v72;\nLABEL_137:\n                      if ( (unsigned int)(v73 + 1) < v48 )\n                      {\n                        v13 = v47;\n                        v14 = v18 + v73;\n                        **(_DWORD **)&v161 = (_DWORD)v153;\n                        goto LABEL_110;\n                      }\n                      if ( v10 - v18 > 0x7FFFFFFE )\n                      {\n                        if ( v47 != src && v47 )\n                          free(v47);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v171 != v174 )\n                          free(v171);\n                        if ( v168 != v169 )\n                          free(v168);\n                        v13 = 0LL;\n                        **(_DWORD **)&v161 = 75;\n                        return v13;\n                      }\n                      v74 = (unsigned int)(v73 + 2);\n                      v75 = __CFADD__(v18, v74);\n                      v76 = v18 + v74;\n                      if ( (v10 & 0x8000000000000000LL) != 0LL )\n                      {\n                        if ( v10 != -1LL )\n                          goto LABEL_202;\n                      }\n                      else\n                      {\n                        if ( v75 )\n                          goto LABEL_202;\n                        if ( 2 * v10 >= v76 )\n                          v76 = 2 * v10;\n                        if ( v10 < v76 )\n                        {\n                          v10 *= 2LL;\n                          if ( v10 < v76 )\n                          {\n                            if ( v76 == -1LL )\n                            {\nLABEL_202:\n                              v56 = v47;\n                              goto LABEL_89;\n                            }\n                            v10 = v76;\n                          }\n                          v77 = v47 == src;\n                          if ( !v47 || v47 == src )\n                          {\n                            v156 = v47;\n                            v93 = (char *)malloc(v10);\n                            v47 = (char *)v156;\n                            if ( !v93 )\n                              goto LABEL_202;\n                            if ( v18 && v77 )\n                              v47 = (char *)memcpy(v93, v156, v18);\n                            else\n                              v47 = v93;\n                          }\n                          else\n                          {\n                            v156 = v47;\n                            v78 = (char *)realloc(v47, v10);\n                            v47 = (char *)v156;\n                            if ( !v78 )\n                              goto LABEL_202;\n                            v47 = v78;\n                          }\n                        }\n                      }\n                      continue;\n                    }\nLABEL_133:\n                    if ( v73 < v48 && v47[v73 + v18] )\n                      goto LABEL_200;\n                    if ( v73 >= v72 )\n                      goto LABEL_137;\n                    goto LABEL_136;\n                  }\n                  v150 = &v164;\n                  v149 = (int *)v71;\n                  break;\n                case 11:\n                  v83 = *((_QWORD *)v11 + 10);\n                  v84 = &v47[v18];\n                  v156 = v47;\n                  v85 = *((double *)v168 + 4 * v83 + 2);\n                  if ( (_DWORD)v159 == 1 )\n                  {\n                    v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                            v84,\n                            v48,\n                            1LL,\n                            -1LL,\n                            v160,\n                            v165,\n                            v85,\n                            &v164,\n                            v150);\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v159 != 2 )\n                    {\n                      v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                              v84,\n                              v48,\n                              1LL,\n                              -1LL,\n                              v160,\n                              &v164,\n                              v85);\n                      v47 = (char *)v156;\n                      goto LABEL_132;\n                    }\n                    v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                            v84,\n                            v48,\n                            1LL,\n                            -1LL,\n                            v160,\n                            v165,\n                            v85,\n                            v166,\n                            &v164);\n                  }\n                  v47 = (char *)v156;\n                  goto LABEL_132;\n                case 12:\n                  v80 = *((_QWORD *)v11 + 10);\n                  v81 = &v47[v18];\n                  v156 = v47;\n                  v82 = *((long double *)v168 + 2 * v80 + 1);\n                  if ( (_DWORD)v159 == 1 )\n                  {\n                    v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                            v81,\n                            v48,\n                            1LL,\n                            -1LL,\n                            v160,\n                            v165,\n                            *(_OWORD *)&v82,\n                            &v164);\n                    goto LABEL_210;\n                  }\n                  if ( (_DWORD)v159 != 2 )\n                  {\n                    v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                            v81,\n                            v48,\n                            1LL,\n                            -1LL,\n                            v160,\n                            &v164,\n                            *(_OWORD *)&v82);\n                    goto LABEL_131;\n                  }\n                  v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                          v81,\n                          v48,\n                          1LL,\n                          -1LL,\n                          v160,\n                          v165,\n                          v166);\n                  v47 = (char *)v156;\n                  goto LABEL_132;\n                default:\n                  goto LABEL_408;\n              }\n              break;\n            }\n            v71 = v165;\nLABEL_153:\n            v72 = ((__int64 (*)(char *, unsigned __int64, __int64, __int64, const char *, ...))__snprintf_chk)(\n                    v70,\n                    v48,\n                    1LL,\n                    -1LL,\n                    v160,\n                    v71,\n                    v149,\n                    v150);\n            v73 = v164;\n            v47 = (char *)v156;\n            if ( v164 < 0 )\n              goto LABEL_154;\n            goto LABEL_133;\n          }\n          if ( v18 != -3LL )\n          {\n            v10 = v18 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v45 = v13;\n        goto LABEL_76;\n      }\n      switch ( v28 )\n      {\n        case 18:\n          v14 = v18;\n          **((_BYTE **)v27 + 2) = v18;\n          break;\n        case 19:\n          v14 = v18;\n          **((_WORD **)v27 + 2) = v18;\n          break;\n        case 20:\n          v14 = v18;\n          **((_DWORD **)v27 + 2) = v18;\n          break;\n        case 21:\n        case 22:\n          v14 = v18;\n          **((_QWORD **)v27 + 2) = v18;\n          break;\n        default:\nLABEL_408:\n          abort();\n      }\nLABEL_110:\n      v12 = (_BYTE *)*((_QWORD *)v11 + 1);\n      v11 += 88;\n      v15 = *(_BYTE **)v11;\n      ++v158;\n      if ( v15 != v12 )\n        goto LABEL_14;\nLABEL_111:\n      v18 = v14;\n    }\n    v107 = v18;\n    v108 = v18 + 1;\n    if ( v18 == -1LL )\n    {\n      if ( v10 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v10 < v108 )\n    {\n      if ( v10 )\n      {\n        if ( (v10 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v10 *= 2LL;\n        if ( v10 >= v108 )\n        {\nLABEL_303:\n          v109 = v13 == src;\n          if ( !v13 || v13 == src )\n          {\n            v142 = (char *)malloc(v10);\n            if ( !v142 )\n              goto LABEL_88;\n            if ( v107 && v109 )\n              v13 = (char *)memcpy(v142, v13, v107);\n            else\n              v13 = v142;\n          }\n          else\n          {\n            v110 = (char *)realloc(v13, v10);\n            if ( !v110 )\n              goto LABEL_126;\n            v13 = v110;\n          }\n          goto LABEL_307;\n        }\n      }\n      else if ( v108 <= 0xC )\n      {\n        v10 = 12LL;\n        goto LABEL_303;\n      }\n      if ( v18 == -2LL )\n        goto LABEL_88;\n      v10 = v18 + 1;\n      goto LABEL_303;\n    }\nLABEL_307:\n    v13[v107] = 0;\n    if ( v10 > v108 && v13 != src )\n    {\n      v111 = (char *)realloc(v13, v108);\n      if ( v111 )\n        v13 = v111;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v171 != v174 )\n      free(v171);\n    if ( v168 != v169 )\n      free(v168);\n    *v155 = v107;\n    return v13;\n  }\n  if ( v171 != v174 )\n    free(v171);\n  if ( v168 != v169 )\n    free(v168);\n  v13 = 0LL;\n  *__errno_location() = 22;\n  return v13;\n}\n"
        },
        {
            "funcName": "sub_40CAE0",
            "funcStartAddr": "0x40cae0",
            "funcEndAddr": "0x40ccf9",
            "decompiledFuncCode": "__int64 __fastcall sub_40CAE0(int *a1, unsigned __int64 *a2)\n{\n  unsigned __int64 v2; // rax\n  unsigned __int64 v3; // rdx\n  unsigned int v4; // ecx\n  _QWORD *v5; // r10\n  unsigned int v7; // ecx\n  _DWORD *v8; // r10\n  unsigned int v9; // ecx\n  _DWORD *v10; // r10\n  unsigned int v11; // ecx\n  _DWORD *v12; // r10\n  unsigned int v13; // ecx\n  _QWORD *v14; // r10\n  long double *v15; // rcx\n  unsigned int v16; // ecx\n  void **v17; // r10\n  void *v18; // rcx\n  unsigned int v19; // ecx\n  const char **v20; // r10\n  const char *v21; // rcx\n\n  v2 = a2[1];\n  if ( *a2 )\n  {\n    v3 = 0LL;\n    while ( 2 )\n    {\n      switch ( *(_DWORD *)v2 )\n      {\n        case 1:\n        case 2:\n          v11 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v12 = (_DWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v12 + 2;\n          }\n          else\n          {\n            v12 = (_DWORD *)(*((_QWORD *)a1 + 2) + v11);\n            *a1 = v11 + 8;\n          }\n          *(_BYTE *)(v2 + 16) = *v12;\n          goto LABEL_7;\n        case 3:\n        case 4:\n          v9 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v10 = (_DWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v10 + 2;\n          }\n          else\n          {\n            v10 = (_DWORD *)(*((_QWORD *)a1 + 2) + v9);\n            *a1 = v9 + 8;\n          }\n          *(_WORD *)(v2 + 16) = *v10;\n          goto LABEL_7;\n        case 5:\n        case 6:\n        case 0xD:\n        case 0xE:\n          v7 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v8 = (_DWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v8 + 2;\n          }\n          else\n          {\n            v8 = (_DWORD *)(*((_QWORD *)a1 + 2) + v7);\n            *a1 = v7 + 8;\n          }\n          *(_DWORD *)(v2 + 16) = *v8;\n          goto LABEL_7;\n        case 7:\n        case 8:\n        case 9:\n        case 0xA:\n        case 0x11:\n        case 0x12:\n        case 0x13:\n        case 0x14:\n        case 0x15:\n        case 0x16:\n          v4 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v5 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v5 + 1;\n          }\n          else\n          {\n            v5 = (_QWORD *)(*((_QWORD *)a1 + 2) + v4);\n            *a1 = v4 + 8;\n          }\n          *(_QWORD *)(v2 + 16) = *v5;\n          goto LABEL_7;\n        case 0xB:\n          v13 = a1[1];\n          if ( v13 > 0xAF )\n          {\n            v14 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v14 + 1;\n          }\n          else\n          {\n            v14 = (_QWORD *)(*((_QWORD *)a1 + 2) + v13);\n            a1[1] = v13 + 16;\n          }\n          *(_QWORD *)(v2 + 16) = *v14;\n          goto LABEL_7;\n        case 0xC:\n          v15 = (long double *)((*((_QWORD *)a1 + 1) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);\n          *((_QWORD *)a1 + 1) = v15 + 1;\n          *(long double *)(v2 + 16) = *v15;\n          goto LABEL_7;\n        case 0xF:\n          v19 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v20 = (const char **)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v20 + 1;\n          }\n          else\n          {\n            v20 = (const char **)(*((_QWORD *)a1 + 2) + v19);\n            *a1 = v19 + 8;\n          }\n          v21 = *v20;\n          if ( !*v20 )\n            v21 = \"(NULL)\";\n          *(_QWORD *)(v2 + 16) = v21;\n          goto LABEL_7;\n        case 0x10:\n          v16 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v17 = (void **)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v17 + 1;\n          }\n          else\n          {\n            v17 = (void **)(*((_QWORD *)a1 + 2) + v16);\n            *a1 = v16 + 8;\n          }\n          v18 = *v17;\n          if ( !*v17 )\n            v18 = &unk_411020;\n          *(_QWORD *)(v2 + 16) = v18;\nLABEL_7:\n          ++v3;\n          v2 += 32LL;\n          if ( *a2 <= v3 )\n            return 0LL;\n          continue;\n        default:\n          return 0xFFFFFFFFLL;\n      }\n    }\n  }\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_40CD00",
            "funcStartAddr": "0x40cd00",
            "funcEndAddr": "0x40da09",
            "decompiledFuncCode": "__int64 __fastcall sub_40CD00(char *a1, _QWORD *a2, unsigned __int64 *a3)\n{\n  _QWORD *v3; // rcx\n  _QWORD *v4; // r8\n  unsigned __int64 v6; // r9\n  __int64 v7; // r11\n  __int64 v8; // r13\n  char *v9; // rbp\n  __int64 result; // rax\n  unsigned __int64 v11; // r14\n  char *v12; // r12\n  char v13; // bl\n  char *v14; // rcx\n  int v15; // eax\n  __int64 v16; // rax\n  int v17; // eax\n  unsigned __int64 v18; // rbx\n  _DWORD *v19; // r13\n  unsigned __int64 v20; // rdx\n  _DWORD *v21; // rax\n  bool v22; // zf\n  __int64 v23; // rax\n  _BYTE *v24; // rcx\n  int v25; // eax\n  unsigned __int64 v26; // rbx\n  unsigned __int64 v27; // rdx\n  _DWORD *v28; // rax\n  int v29; // ecx\n  unsigned __int64 v30; // rax\n  int *v31; // rax\n  __int64 v32; // rax\n  __int64 v33; // rbx\n  _QWORD *v34; // r12\n  _QWORD *v35; // rax\n  _BYTE *v36; // rax\n  unsigned __int64 v37; // rax\n  unsigned __int64 v38; // r9\n  _DWORD *v39; // rax\n  _DWORD *v40; // rsi\n  _QWORD *v41; // rax\n  _QWORD *v42; // rax\n  _BYTE *v43; // rdx\n  unsigned __int64 v44; // rsi\n  __int64 v45; // rdx\n  __int64 v46; // rax\n  char *v47; // rdi\n  bool v48; // cf\n  unsigned __int64 v49; // rdx\n  unsigned __int8 v50; // bl\n  _QWORD *v51; // rdi\n  unsigned __int64 v52; // r9\n  _DWORD *v53; // rax\n  char *i; // rcx\n  char *v55; // rdx\n  unsigned __int64 v56; // rax\n  const void *v57; // rsi\n  _QWORD *v58; // rdi\n  unsigned __int64 v59; // r9\n  _DWORD *v60; // rax\n  _DWORD *v61; // rax\n  unsigned __int64 v62; // rax\n  __int64 v63; // rsi\n  __int64 v64; // rdx\n  char *v65; // rcx\n  unsigned __int64 v66; // rdx\n  unsigned __int8 v67; // si\n  _BYTE *v68; // rdx\n  unsigned __int64 v69; // rsi\n  __int64 v70; // rdx\n  __int64 v71; // rax\n  _BYTE *v72; // rdi\n  unsigned __int64 v73; // rdx\n  unsigned __int8 v74; // bl\n  _DWORD *v75; // rax\n  _DWORD *src; // [rsp+8h] [rbp-80h]\n  _QWORD *srca; // [rsp+8h] [rbp-80h]\n  _QWORD *srcb; // [rsp+8h] [rbp-80h]\n  unsigned __int64 v79; // [rsp+10h] [rbp-78h]\n  unsigned __int64 v80; // [rsp+18h] [rbp-70h]\n  unsigned __int64 v81; // [rsp+20h] [rbp-68h]\n  _QWORD *v82; // [rsp+28h] [rbp-60h]\n  unsigned __int64 v83; // [rsp+30h] [rbp-58h]\n  char *v84; // [rsp+30h] [rbp-58h]\n  unsigned __int64 v85; // [rsp+30h] [rbp-58h]\n  int v86; // [rsp+30h] [rbp-58h]\n  int v87; // [rsp+30h] [rbp-58h]\n  _BYTE *v88; // [rsp+30h] [rbp-58h]\n  char *v89; // [rsp+30h] [rbp-58h]\n  _BYTE *v90; // [rsp+30h] [rbp-58h]\n  _QWORD *v91; // [rsp+38h] [rbp-50h]\n  __int64 v92; // [rsp+38h] [rbp-50h]\n  _QWORD *v93; // [rsp+38h] [rbp-50h]\n  __int64 v94; // [rsp+38h] [rbp-50h]\n  __int64 v95; // [rsp+38h] [rbp-50h]\n  __int64 v96; // [rsp+38h] [rbp-50h]\n  __int64 v97; // [rsp+38h] [rbp-50h]\n  __int64 v98; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v99; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v100; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v101; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v102; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v103; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v104; // [rsp+40h] [rbp-48h]\n  _QWORD *v105; // [rsp+48h] [rbp-40h]\n  _QWORD *v106; // [rsp+48h] [rbp-40h]\n  _QWORD *v107; // [rsp+48h] [rbp-40h]\n  _QWORD *v108; // [rsp+48h] [rbp-40h]\n  _QWORD *v109; // [rsp+48h] [rbp-40h]\n  _QWORD *v110; // [rsp+48h] [rbp-40h]\n\n  v3 = a2 + 4;\n  v4 = a2;\n  v6 = 7LL;\n  v7 = 7LL;\n  v8 = 0LL;\n  *a2 = 0LL;\n  a2[1] = a2 + 4;\n  v82 = a2 + 4;\n  *a3 = 0LL;\n  src = a3 + 2;\n  a3[1] = (unsigned __int64)(a3 + 2);\n  v80 = 0LL;\n  v79 = 0LL;\n  v81 = 0LL;\n  while ( 1 )\n  {\n    if ( !*a1 )\n    {\n      v3[11 * v8] = a1;\n      v4[2] = v79;\n      v4[3] = v80;\n      return 0LL;\n    }\n    v9 = a1 + 1;\n    if ( *a1 == 37 )\n      break;\nLABEL_3:\n    a1 = v9;\n  }\n  v11 = -1LL;\n  v12 = (char *)&v3[11 * v8];\n  *(_QWORD *)v12 = a1;\n  *((_DWORD *)v12 + 4) = 0;\n  *((_QWORD *)v12 + 3) = 0LL;\n  *((_QWORD *)v12 + 4) = 0LL;\n  *((_QWORD *)v12 + 5) = -1LL;\n  *((_QWORD *)v12 + 6) = 0LL;\n  *((_QWORD *)v12 + 7) = 0LL;\n  *((_QWORD *)v12 + 8) = -1LL;\n  *((_QWORD *)v12 + 10) = -1LL;\n  v13 = a1[1];\n  if ( (unsigned __int8)(v13 - 48) > 9u )\n    goto LABEL_16;\n  v36 = a1 + 1;\n  do\n    ++v36;\n  while ( (unsigned __int8)(*v36 - 48) <= 9u );\n  if ( *v36 != 36 )\n  {\n    v11 = -1LL;\n    goto LABEL_16;\n  }\n  v62 = 0LL;\n  do\n  {\n    v63 = -1LL;\n    v64 = v13 - 48;\n    if ( v62 <= 0x1999999999999999LL )\n      v63 = 10 * v62;\n    v65 = v9;\n    while ( 1 )\n    {\n      v13 = v9[1];\n      v48 = __CFADD__(v63, v64);\n      v66 = v63 + v64;\n      v62 = v66;\n      ++v9;\n      v67 = v13 - 48;\n      if ( !v48 )\n        break;\n      if ( v67 > 9u )\n        goto LABEL_130;\n      v63 = -1LL;\n      v65 = v9;\n      v64 = v13 - 48;\n    }\n  }\n  while ( v67 <= 9u );\n  v11 = v66 - 1;\n  if ( v66 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_130;\n  v9 = v65 + 2;\n  v13 = v65[2];\n  while ( 1 )\n  {\nLABEL_16:\n    v14 = v9 + 1;\n    switch ( v13 )\n    {\n      case '\\'':\n        *((_DWORD *)v12 + 4) |= 1u;\n        goto LABEL_15;\n      case '-':\n        *((_DWORD *)v12 + 4) |= 2u;\n        goto LABEL_15;\n      case '+':\n        *((_DWORD *)v12 + 4) |= 4u;\n        goto LABEL_15;\n      case ' ':\n        *((_DWORD *)v12 + 4) |= 8u;\n        goto LABEL_15;\n      case '#':\n        *((_DWORD *)v12 + 4) |= 0x10u;\n        goto LABEL_15;\n    }\n    if ( v13 != 48 )\n      break;\n    *((_DWORD *)v12 + 4) |= 0x20u;\nLABEL_15:\n    v13 = *v14;\n    ++v9;\n  }\n  if ( v13 == 73 )\n  {\n    *((_DWORD *)v12 + 4) |= 0x40u;\n    goto LABEL_15;\n  }\n  if ( v13 == 42 )\n  {\n    v16 = 1LL;\n    *((_QWORD *)v12 + 3) = v9;\n    *((_QWORD *)v12 + 4) = v14;\n    if ( v79 )\n      v16 = v79;\n    v79 = v16;\n    v17 = v9[1];\n    if ( (unsigned __int8)(v9[1] - 48) > 9u )\n      goto LABEL_39;\n    v43 = v9 + 1;\n    do\n      ++v43;\n    while ( (unsigned __int8)(*v43 - 48) <= 9u );\n    if ( *v43 == 36 )\n    {\n      v44 = 0LL;\n      do\n      {\n        v45 = -1LL;\n        v46 = v17 - 48;\n        if ( v44 <= 0x1999999999999999LL )\n          v45 = 10 * v44;\n        v47 = v14;\n        while ( 1 )\n        {\n          v48 = __CFADD__(v46, v45);\n          v49 = v46 + v45;\n          v17 = v14[1];\n          v44 = v49;\n          ++v14;\n          v50 = v17 - 48;\n          if ( !v48 )\n            break;\n          if ( v50 > 9u )\n            goto LABEL_130;\n          v45 = -1LL;\n          v47 = v14;\n          v46 = v17 - 48;\n        }\n      }\n      while ( v50 <= 9u );\n      v18 = v49 - 1;\n      if ( v49 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n        goto LABEL_130;\n      *((_QWORD *)v12 + 5) = v18;\n      v14 = v47 + 2;\n    }\n    else\n    {\nLABEL_39:\n      v18 = *((_QWORD *)v12 + 5);\n      if ( v18 == -1LL )\n      {\n        *((_QWORD *)v12 + 5) = v81;\n        if ( v81 == -1LL )\n          goto LABEL_130;\n        v18 = v81++;\n      }\n    }\n    v19 = (_DWORD *)a3[1];\n    if ( v6 > v18 )\n    {\n      v20 = *a3;\nLABEL_42:\n      if ( v20 <= v18 )\n      {\n        do\n        {\n          ++v20;\n          v19[8 * v20 - 8] = 0;\n        }\n        while ( v20 <= v18 );\n        *a3 = v20;\n      }\n      v21 = &v19[8 * v18];\n      if ( *v21 )\n      {\n        if ( *v21 == 5 )\n        {\n          v13 = *v14;\n          v9 = v14++;\n          goto LABEL_25;\n        }\n        goto LABEL_131;\n      }\n      *v21 = 5;\n      v13 = *v14;\n      v9 = v14++;\n      if ( v13 != 46 )\n        goto LABEL_26;\nLABEL_47:\n      v22 = v9[1] == 42;\n      *((_QWORD *)v12 + 6) = v9;\n      if ( !v22 )\n      {\n        if ( (unsigned __int8)(v9[1] - 48) > 9u )\n        {\n          v9 = v14;\n          v37 = 1LL;\n        }\n        else\n        {\n          do\n            ++v14;\n          while ( (unsigned __int8)(*v14 - 48) <= 9u );\n          v37 = v14 - v9;\n          v9 = v14;\n        }\n        *((_QWORD *)v12 + 7) = v14;\n        v13 = *v14;\n        if ( v80 >= v37 )\n          v37 = v80;\n        v80 = v37;\n        goto LABEL_26;\n      }\n      v23 = 2LL;\n      v24 = v9 + 2;\n      *((_QWORD *)v12 + 7) = v9 + 2;\n      if ( v80 >= 2 )\n        v23 = v80;\n      v80 = v23;\n      v25 = v9[2];\n      if ( (unsigned __int8)(v9[2] - 48) > 9u )\n        goto LABEL_51;\n      v68 = v9 + 2;\n      do\n        ++v68;\n      while ( (unsigned __int8)(*v68 - 48) <= 9u );\n      if ( *v68 == 36 )\n      {\n        v69 = 0LL;\n        do\n        {\n          v70 = -1LL;\n          v71 = v25 - 48;\n          if ( v69 <= 0x1999999999999999LL )\n            v70 = 10 * v69;\n          v72 = v24;\n          while ( 1 )\n          {\n            v48 = __CFADD__(v71, v70);\n            v73 = v71 + v70;\n            v25 = (char)*++v24;\n            v69 = v73;\n            v74 = v25 - 48;\n            if ( !v48 )\n              break;\n            if ( v74 > 9u )\n              goto LABEL_130;\n            v70 = -1LL;\n            v72 = v24;\n            v71 = v25 - 48;\n          }\n        }\n        while ( v74 <= 9u );\n        v26 = v73 - 1;\n        if ( v73 - 1 <= 0xFFFFFFFFFFFFFFFDLL )\n        {\n          *((_QWORD *)v12 + 8) = v26;\n          v24 = v72 + 2;\nLABEL_52:\n          v19 = (_DWORD *)a3[1];\n          if ( v6 > v26 )\n          {\n            v27 = *a3;\n            goto LABEL_54;\n          }\n          v59 = 2 * v6;\n          if ( v59 <= v26 )\n            v59 = v26 + 1;\n          if ( v59 <= 0x7FFFFFFFFFFFFFFLL )\n          {\n            v108 = v4;\n            v102 = v59;\n            v96 = v7;\n            v88 = v24;\n            if ( src == v19 )\n            {\n              v75 = malloc(32 * v59);\n              v24 = v88;\n              v7 = v96;\n              v6 = v102;\n              v4 = v108;\n              if ( !v75 )\n                goto LABEL_162;\n              v27 = *a3;\n              v40 = src;\n              v19 = v75;\n            }\n            else\n            {\n              v60 = realloc(v19, 32 * v59);\n              v40 = (_DWORD *)a3[1];\n              v24 = v88;\n              v19 = v60;\n              v7 = v96;\n              v6 = v102;\n              v4 = v108;\n              if ( !v60 )\n                goto LABEL_160;\n              v27 = *a3;\n              if ( src != v40 )\n                goto LABEL_171;\n            }\n            v110 = v4;\n            v104 = v6;\n            v98 = v7;\n            v90 = v24;\n            memcpy(v19, v40, 32 * v27);\n            v27 = *a3;\n            v4 = v110;\n            v6 = v104;\n            v7 = v98;\n            v24 = v90;\nLABEL_171:\n            a3[1] = (unsigned __int64)v19;\nLABEL_54:\n            if ( v27 <= v26 )\n            {\n              do\n              {\n                ++v27;\n                v19[8 * v27 - 8] = 0;\n              }\n              while ( v27 <= v26 );\n              *a3 = v27;\n            }\n            v28 = &v19[8 * v26];\n            if ( !*v28 )\n            {\n              *v28 = 5;\n              v9 = v24;\n              v13 = *v24;\n              goto LABEL_26;\n            }\n            if ( *v28 == 5 )\n            {\n              v13 = *v24;\n              v9 = v24;\n              goto LABEL_26;\n            }\n            goto LABEL_131;\n          }\nLABEL_159:\n          v40 = v19;\n          goto LABEL_160;\n        }\n      }\n      else\n      {\nLABEL_51:\n        v26 = *((_QWORD *)v12 + 8);\n        if ( v26 != -1LL )\n          goto LABEL_52;\n        *((_QWORD *)v12 + 8) = v81;\n        if ( v81 != -1LL )\n        {\n          v26 = v81++;\n          goto LABEL_52;\n        }\n      }\nLABEL_130:\n      v19 = (_DWORD *)a3[1];\nLABEL_131:\n      if ( src != v19 )\n      {\n        srca = v4;\n        free(v19);\n        v4 = srca;\n      }\n      v51 = (_QWORD *)v4[1];\n      if ( v82 != v51 )\n        free(v51);\n      *__errno_location() = 22;\n      return 0xFFFFFFFFLL;\n    }\n    v38 = 2 * v6;\n    if ( v38 <= v18 )\n      v38 = v18 + 1;\n    if ( v38 > 0x7FFFFFFFFFFFFFFLL )\n      goto LABEL_159;\n    v105 = v4;\n    v99 = v38;\n    v92 = v7;\n    v84 = v14;\n    if ( src == v19 )\n    {\n      v61 = malloc(32 * v38);\n      v14 = v84;\n      v7 = v92;\n      v6 = v99;\n      v4 = v105;\n      if ( !v61 )\n        goto LABEL_162;\n      v20 = *a3;\n      v40 = src;\n      v19 = v61;\n    }\n    else\n    {\n      v39 = realloc(v19, 32 * v38);\n      v40 = (_DWORD *)a3[1];\n      v14 = v84;\n      v19 = v39;\n      v7 = v92;\n      v6 = v99;\n      v4 = v105;\n      if ( !v39 )\n        goto LABEL_160;\n      v20 = *a3;\n      if ( src != v40 )\n        goto LABEL_93;\n    }\n    v109 = v4;\n    v103 = v6;\n    v97 = v7;\n    v89 = v14;\n    memcpy(v19, v40, 32 * v20);\n    v20 = *a3;\n    v4 = v109;\n    v6 = v103;\n    v7 = v97;\n    v14 = v89;\nLABEL_93:\n    a3[1] = (unsigned __int64)v19;\n    goto LABEL_42;\n  }\n  if ( (unsigned __int8)(v13 - 48) <= 9u )\n  {\n    *((_QWORD *)v12 + 3) = v9;\n    if ( (unsigned __int8)(*v9 - 48) <= 9u )\n    {\n      for ( i = v9; ; ++i )\n      {\n        v55 = i + 1;\n        if ( (unsigned __int8)(i[1] - 48) > 9u )\n          break;\n      }\n      v14 = i + 2;\n      v56 = v55 - v9;\n      v9 = v55;\n      if ( v79 >= v56 )\n        v56 = v79;\n      v79 = v56;\n    }\n    *((_QWORD *)v12 + 4) = v9;\n    v13 = *v9;\n  }\nLABEL_25:\n  if ( v13 == 46 )\n    goto LABEL_47;\nLABEL_26:\n  v15 = 0;\n  while ( 2 )\n  {\n    ++v9;\n    if ( v13 == 104 )\n    {\n      v15 |= 1 << (v15 & 1);\n      goto LABEL_33;\n    }\n    if ( v13 == 76 )\n    {\n      v15 |= 4u;\n      goto LABEL_33;\n    }\n    if ( v13 == 108 || v13 == 106 || (v13 & 0xDF) == 90 || v13 == 116 )\n    {\n      v15 += 8;\nLABEL_33:\n      v13 = *v9;\n      continue;\n    }\n    break;\n  }\n  switch ( v13 )\n  {\n    case '%':\n      goto LABEL_70;\n    case 'A':\n    case 'E':\n    case 'F':\n    case 'G':\n    case 'a':\n    case 'e':\n    case 'f':\n    case 'g':\n      v29 = 12;\n      if ( v15 <= 15 )\n        v29 = ((v15 & 4) != 0) + 11;\n      goto LABEL_62;\n    case 'C':\n      v29 = 14;\n      v13 = 99;\n      goto LABEL_62;\n    case 'S':\n      v29 = 16;\n      v13 = 115;\n      goto LABEL_62;\n    case 'X':\n    case 'o':\n    case 'u':\n    case 'x':\n      v29 = 10;\n      if ( v15 <= 15 && (v15 & 4) == 0 )\n      {\n        v29 = 8;\n        if ( v15 <= 7 )\n        {\n          v29 = 2;\n          if ( (v15 & 2) == 0 )\n            v29 = (v15 & 1) == 0 ? 6 : 4;\n        }\n      }\n      goto LABEL_62;\n    case 'c':\n      v29 = (v15 > 7) + 13;\n      goto LABEL_62;\n    case 'd':\n    case 'i':\n      v29 = 9;\n      if ( v15 <= 15 && (v15 & 4) == 0 )\n      {\n        v29 = 7;\n        if ( v15 <= 7 )\n        {\n          v29 = 1;\n          if ( (v15 & 2) == 0 )\n            v29 = (v15 & 1) == 0 ? 5 : 3;\n        }\n      }\n      goto LABEL_62;\n    case 'n':\n      v29 = 22;\n      if ( v15 <= 15 && (v15 & 4) == 0 )\n      {\n        v29 = 21;\n        if ( v15 <= 7 )\n        {\n          v29 = 18;\n          if ( (v15 & 2) == 0 )\n            v29 = ((v15 & 1) == 0) + 19;\n        }\n      }\n      goto LABEL_62;\n    case 'p':\n      v29 = 17;\n      goto LABEL_62;\n    case 's':\n      v29 = (v15 > 7) + 15;\nLABEL_62:\n      if ( v11 == -1LL )\n      {\n        *((_QWORD *)v12 + 10) = v81;\n        if ( v81 == -1LL )\n          goto LABEL_130;\n        v11 = v81++;\n      }\n      else\n      {\n        *((_QWORD *)v12 + 10) = v11;\n      }\n      v19 = (_DWORD *)a3[1];\n      if ( v6 > v11 )\n        goto LABEL_65;\n      v52 = 2 * v6;\n      if ( v52 <= v11 )\n        v52 = v11 + 1;\n      if ( v52 > 0x7FFFFFFFFFFFFFFLL )\n        goto LABEL_159;\n      v106 = v4;\n      v100 = v52;\n      v94 = v7;\n      v86 = v29;\n      if ( src == v19 )\n      {\n        v53 = malloc(32 * v52);\n        v29 = v86;\n        v7 = v94;\n        v6 = v100;\n        v4 = v106;\n        if ( !v53 )\n          goto LABEL_162;\n        goto LABEL_158;\n      }\n      v53 = realloc(v19, 32 * v52);\n      v29 = v86;\n      v7 = v94;\n      v19 = v53;\n      v6 = v100;\n      v4 = v106;\n      if ( !v53 )\n        goto LABEL_210;\n      if ( src == (_DWORD *)a3[1] )\n      {\n        v19 = src;\nLABEL_158:\n        v57 = v19;\n        v107 = v4;\n        v101 = v6;\n        v19 = v53;\n        v95 = v7;\n        v87 = v29;\n        memcpy(v53, v57, 32 * *a3);\n        v4 = v107;\n        v29 = v87;\n        v6 = v101;\n        v7 = v95;\n      }\n      a3[1] = (unsigned __int64)v19;\nLABEL_65:\n      v30 = *a3;\n      if ( *a3 <= v11 )\n      {\n        do\n        {\n          ++v30;\n          v19[8 * v30 - 8] = 0;\n        }\n        while ( v30 <= v11 );\n        *a3 = v30;\n      }\n      v31 = &v19[8 * v11];\n      if ( *v31 )\n      {\n        if ( *v31 != v29 )\n          goto LABEL_131;\n      }\n      else\n      {\n        *v31 = v29;\n      }\nLABEL_70:\n      v12[72] = v13;\n      v32 = *v4;\n      *((_QWORD *)v12 + 1) = v9;\n      v8 = v32 + 1;\n      *v4 = v32 + 1;\n      if ( v7 > (unsigned __int64)(v32 + 1) )\n      {\n        v3 = (_QWORD *)v4[1];\n        goto LABEL_3;\n      }\n      if ( v7 >= 0 )\n      {\n        v33 = 2 * v7;\n        if ( (unsigned __int64)(2 * v7) <= 0x2E8BA2E8BA2E8BALL )\n        {\n          v34 = (_QWORD *)v4[1];\n          v91 = v4;\n          v83 = v6;\n          if ( v82 == v34 )\n          {\n            v41 = malloc(176 * v7);\n            v6 = v83;\n            v4 = v91;\n            v3 = v41;\n            if ( !v41 )\n            {\n              v40 = (_DWORD *)a3[1];\n              if ( src != v40 )\n                goto LABEL_161;\n              goto LABEL_164;\n            }\n          }\n          else\n          {\n            v35 = realloc(v34, 176 * v7);\n            v6 = v83;\n            v4 = v91;\n            v3 = v35;\n            if ( !v35 )\n              goto LABEL_210;\n            v34 = (_QWORD *)v91[1];\n            v8 = *v91;\n            if ( v82 != v34 )\n              goto LABEL_77;\n          }\n          v93 = v4;\n          v85 = v6;\n          v42 = memcpy(v3, v34, 88 * v8);\n          v4 = v93;\n          v6 = v85;\n          v3 = v42;\n          v8 = *v93;\nLABEL_77:\n          v4[1] = v3;\n          v7 = v33;\n          goto LABEL_3;\n        }\n      }\nLABEL_210:\n      v40 = (_DWORD *)a3[1];\nLABEL_160:\n      if ( src != v40 )\n      {\nLABEL_161:\n        srcb = v4;\n        free(v40);\n        v4 = srcb;\n      }\nLABEL_162:\n      v58 = (_QWORD *)v4[1];\n      if ( v82 != v58 )\n        free(v58);\nLABEL_164:\n      *__errno_location() = 12;\n      result = 0xFFFFFFFFLL;\n      break;\n    default:\n      goto LABEL_130;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40DA80",
            "funcStartAddr": "0x40da80",
            "funcEndAddr": "0x40da98",
            "decompiledFuncCode": "int __fastcall sub_40DA80(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  v1 = 0LL;\n  if ( &qword_6142A8 )\n    v1 = (void *)qword_6142A8;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n"
        },
        {
            "funcName": "sub_40DA98",
            "funcStartAddr": "0x40da98",
            "funcEndAddr": "0x40dab8",
            "decompiledFuncCode": "__int64 __fastcall sub_40DA98(__int64 a1, __int64 a2, __int64 a3)\n{\n  void (**i)(void); // rbx\n\n  for ( i = (void (**)(void))&qword_613E30; *i != (void (*)(void))-1LL; --i )\n    (*i)();\n  return a3;\n}\n"
        }
    ],
    "funcCount": 113
}