{
    "binaryInfo": {
        "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_split.elf",
        "isStripped": "True"
    },
    "buildInfo": {
        "decompilerName": "IDA Pro",
        "compilerName": "gcc",
        "compilerVersion": "9.4.0",
        "Optlevel": "-O"
    },
    "funcInfo": [
        {
            "funcName": "main",
            "funcStartAddr": "0x401ea0",
            "funcEndAddr": "0x403bd4",
            "decompiledFuncCode": "__int64 __fastcall main(unsigned int a1, char **a2, char **a3)\n{\n  char *v3; // r15\n  signed __int64 v4; // r13\n  size_t v5; // rbp\n  const char *v6; // rbx\n  const char *v7; // rsi\n  unsigned int v8; // r14d\n  int v9; // eax\n  __int64 v10; // rdx\n  __int64 v11; // rcx\n  __int64 v12; // r8\n  char *v13; // r14\n  int v14; // eax\n  const char *v15; // rsi\n  __int64 v16; // rdx\n  __int64 v17; // rcx\n  __int64 v18; // r8\n  char *v19; // rax\n  char *v20; // rax\n  char *v21; // rax\n  __int64 v22; // rdx\n  __int64 v23; // rcx\n  __int64 v24; // r8\n  char *v25; // rsi\n  char *v26; // r14\n  __int64 v27; // rdx\n  __int64 v28; // rcx\n  char *i; // rax\n  char *v30; // rax\n  char *v31; // rax\n  const unsigned __int16 *v32; // rcx\n  char *j; // rax\n  char *v34; // r14\n  char *v35; // r14\n  char *v36; // rax\n  char *v37; // rax\n  unsigned __int64 v38; // r12\n  size_t v39; // rdi\n  int v40; // eax\n  __int64 v41; // rsi\n  char *v42; // rcx\n  char *v43; // rdx\n  const char *v44; // rsi\n  char *v45; // rbx\n  unsigned __int64 v46; // rsi\n  __blksize_t st_blksize; // rax\n  unsigned __int64 v48; // rbx\n  __int64 v49; // rdi\n  __int64 v50; // rax\n  char *v51; // rax\n  __int64 v52; // rdx\n  unsigned __int64 v53; // r9\n  unsigned __int64 v54; // rsi\n  unsigned __int64 v55; // rcx\n  __int64 v56; // rdi\n  int v57; // eax\n  unsigned __int64 v58; // rsi\n  __sighandler_t sa_handler; // r9\n  const char *v60; // rbx\n  unsigned __int64 v61; // rax\n  __int64 v62; // rax\n  unsigned __int64 v63; // r15\n  unsigned __int8 v64; // r12\n  char *v65; // rbx\n  char *v66; // rcx\n  __int64 v67; // rax\n  __int64 v68; // rdi\n  __int64 v69; // rax\n  char *v70; // rbx\n  _BOOL8 v71; // rdx\n  char *v72; // r8\n  _BOOL8 v73; // rdi\n  char *v74; // rsi\n  size_t v75; // r15\n  char *v76; // rsi\n  __int64 v77; // r12\n  char *v78; // rsi\n  void *v79; // rdi\n  char v80; // dl\n  unsigned __int64 v81; // r10\n  unsigned __int64 v82; // rbx\n  unsigned __int64 v83; // rax\n  int *v84; // r11\n  __int64 v85; // r10\n  unsigned __int8 v86; // bl\n  unsigned __int64 v87; // r8\n  unsigned __int64 v88; // rax\n  __int64 v89; // rax\n  int *v90; // rcx\n  signed __int64 v91; // rbp\n  char v92; // bl\n  char v93; // al\n  __int64 v94; // rbx\n  __int64 v95; // rax\n  __int64 v96; // rax\n  unsigned __int64 v97; // rax\n  bool v98; // zf\n  __int64 v99; // rax\n  bool v100; // al\n  char v101; // al\n  char v102; // al\n  int *v104; // rax\n  const char *v105; // rax\n  __int64 v106; // rax\n  int *v107; // rax\n  const char *v108; // rax\n  int *v109; // rax\n  __int64 v110; // rdi\n  unsigned __int64 v111; // rbx\n  __int64 v112; // rbp\n  unsigned __int64 k; // r12\n  __int64 v114; // rsi\n  size_t v115; // rbx\n  __int64 v116; // rax\n  char *v117; // rbx\n  int *v118; // rax\n  unsigned __int64 v119; // rsi\n  signed __int64 v120; // rbx\n  unsigned __int64 v121; // rax\n  size_t v122; // rbp\n  int *v123; // rax\n  const char *v124; // rax\n  __off_t st_size; // r14\n  unsigned __int64 v126; // rbp\n  __off_t v127; // rbx\n  __off_t v128; // rax\n  char *v129; // rbx\n  int *v130; // rax\n  __off_t v131; // rsi\n  __off_t v132; // rax\n  const char *v133; // rbx\n  int *v134; // rax\n  const char *v135; // rbx\n  int *v136; // rax\n  char *v137; // rax\n  unsigned __int64 v138; // r12\n  const char *v139; // rax\n  __int64 v140; // rbx\n  char *v141; // rax\n  __int64 v142; // rax\n  int v143; // edx\n  const char *v144; // rsi\n  const char *v145; // rbx\n  char *v146; // rax\n  __int64 v147; // rax\n  __int64 v148; // rdx\n  __int64 v149; // rcx\n  __int64 v150; // r8\n  char *v151; // rax\n  char *v152; // rax\n  __int64 v153; // rbx\n  char *v154; // rax\n  __int64 v155; // rax\n  const char *v156; // rbx\n  int *v157; // rax\n  __int64 v158; // rbp\n  char *v159; // rbx\n  int *v160; // rax\n  int *v161; // rax\n  const char *v162; // rbx\n  int *v163; // rax\n  char *v164; // rax\n  __int64 v165; // rax\n  const char *v166; // rbx\n  char *v167; // rax\n  char *v168; // rax\n  const char *v169; // rbx\n  int *v170; // rax\n  const char *v171; // rbx\n  int *v172; // rax\n  int *v173; // rax\n  unsigned __int64 offset; // [rsp+8h] [rbp-140h]\n  unsigned __int64 v175; // [rsp+10h] [rbp-138h]\n  __int64 v176; // [rsp+10h] [rbp-138h]\n  char *v177; // [rsp+10h] [rbp-138h]\n  unsigned int v178; // [rsp+10h] [rbp-138h]\n  __int64 ptr; // [rsp+18h] [rbp-130h]\n  unsigned __int64 v180; // [rsp+20h] [rbp-128h]\n  unsigned __int64 v181; // [rsp+20h] [rbp-128h]\n  unsigned __int64 nbytes; // [rsp+28h] [rbp-120h]\n  int *v183; // [rsp+30h] [rbp-118h]\n  __int64 v184; // [rsp+30h] [rbp-118h]\n  int *v185; // [rsp+30h] [rbp-118h]\n  int *v186; // [rsp+30h] [rbp-118h]\n  int *v187; // [rsp+38h] [rbp-110h]\n  unsigned __int64 v188; // [rsp+38h] [rbp-110h]\n  char v189; // [rsp+38h] [rbp-110h]\n  char *v190; // [rsp+38h] [rbp-110h]\n  unsigned __int64 v191; // [rsp+38h] [rbp-110h]\n  unsigned __int64 v192; // [rsp+38h] [rbp-110h]\n  __int64 v193; // [rsp+40h] [rbp-108h]\n  unsigned __int64 v194; // [rsp+48h] [rbp-100h]\n  char *s; // [rsp+50h] [rbp-F8h]\n  int *v196; // [rsp+58h] [rbp-F0h]\n  char v197; // [rsp+58h] [rbp-F0h]\n  int *v198; // [rsp+58h] [rbp-F0h]\n  int *v199; // [rsp+58h] [rbp-F0h]\n  unsigned __int64 v200; // [rsp+60h] [rbp-E8h]\n  char v201; // [rsp+6Eh] [rbp-DAh]\n  char v202; // [rsp+6Fh] [rbp-D9h]\n  struct sigaction v203; // [rsp+70h] [rbp-D8h] BYREF\n\n  v3 = 0LL;\n  v4 = 0LL;\n  v5 = a1;\n  v6 = (const char *)a2;\n  v175 = getpagesize();\n  sub_4053A0(*a2);\n  setlocale(6, \"\");\n  bindtextdomain(\n    \"coreutils\",\n    \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n  textdomain(\"coreutils\");\n  sub_409900(sub_4050E0);\n  qword_60E5F0 = \"-\";\n  src = \"x\";\n  offset = 0LL;\n  v194 = 0LL;\n  nbytes = 0LL;\n  while ( 1 )\n  {\n    v7 = v6;\n    v8 = dword_60E31C;\n    if ( !dword_60E31C )\n      v8 = 1;\n    v9 = sub_408CD0((unsigned int)v5, v6, \"0123456789C:a:b:del:n:t:ux\", &off_40AAA0, 0LL);\n    v12 = (unsigned int)v9;\n    if ( v9 == -1 )\n      break;\n    if ( v9 == 101 )\n    {\n      byte_60E541 = 1;\n    }\n    else if ( v9 <= 101 )\n    {\n      if ( v9 <= 57 )\n      {\n        if ( v9 < 48 )\n        {\n          if ( v9 == -131 )\n          {\n            sub_407550(\n              (_DWORD)stdout,\n              (unsigned int)\"split\",\n              (unsigned int)&unk_409B0F,\n              (_DWORD)off_60E2A8,\n              (unsigned int)\"Torbjorn Granlund\",\n              (unsigned int)\"Richard M. Stallman\",\n              0);\n            exit(0);\n          }\n          if ( v9 == -130 )\n            sub_404CF0(0);\n          goto LABEL_317;\n        }\n        if ( !(_DWORD)v4 )\n          goto LABEL_61;\n        if ( (_DWORD)v4 != 4 )\n          goto LABEL_327;\n        if ( !(_DWORD)v3 || (_DWORD)v3 == v8 )\n        {\n          if ( offset > 0x1999999999999999LL || (v52 = v9 - 48, v52 + 10 * offset < offset) )\n          {\nLABEL_326:\n            v178 = v12;\n            v140 = sub_405350(offset, &v203);\n            v141 = dcgettext(0LL, \"line count option -%s%c... is too large\", 5);\n            error(1, 0, v141, v140, v178);\nLABEL_327:\n            v44 = \"cannot split in more than one way\";\nLABEL_316:\n            v137 = dcgettext(0LL, v44, 5);\n            error(0, 0, v137);\nLABEL_317:\n            sub_404CF0(1);\n          }\n          offset = v52 + 10 * offset;\n          v3 = (char *)v8;\n        }\n        else\n        {\nLABEL_61:\n          v3 = (char *)v8;\n          v4 = 4LL;\n          offset = v9 - 48;\n        }\n      }\n      else if ( v9 == 97 )\n      {\n        v31 = dcgettext(0LL, \"invalid suffix length\", 5);\n        qword_60E608 = sub_4079F0(s1, 0LL, 0x1FFFFFFFFFFFFFFFLL, \"\", v31, 0LL);\n      }\n      else if ( v9 <= 97 )\n      {\n        if ( v9 != 67 )\n          goto LABEL_317;\n        if ( (_DWORD)v4 )\n          goto LABEL_327;\n        v4 = 2LL;\n        v30 = dcgettext(0LL, \"invalid number of bytes\", 5);\n        offset = sub_4079F0(s1, 1LL, 0x7FFFFFFFFFFFFFFFLL, \"bEGKkMmPTYZ0\", v30, 0LL);\n      }\n      else\n      {\n        if ( v9 != 98 )\n        {\n          if ( v9 != 100 )\n            goto LABEL_317;\n          v25 = \"0123456789\";\n          goto LABEL_41;\n        }\n        if ( (_DWORD)v4 )\n          goto LABEL_327;\n        v4 = 1LL;\n        v21 = dcgettext(0LL, \"invalid number of bytes\", 5);\n        offset = sub_4079F0(s1, 1LL, 0x7FFFFFFFFFFFFFFFLL, \"bEGKkMmPTYZ0\", v21, 0LL);\n      }\n    }\n    else if ( v9 == 120 )\n    {\n      v25 = \"0123456789abcdef\";\nLABEL_41:\n      v26 = s1;\n      LODWORD(ptr) = v9;\n      off_60E298 = v25;\n      if ( s1 )\n      {\n        v180 = strlen(s1);\n        if ( v180 != strspn(s1, v25) )\n        {\n          v142 = sub_406FC0(v26, v25, v27, v28, (unsigned int)ptr);\n          v143 = 5;\n          v144 = \"%s: invalid start value for hexadecimal suffix\";\n          v145 = (const char *)v142;\n          if ( (_DWORD)ptr == 100 )\n            goto LABEL_332;\n          goto LABEL_329;\n        }\n        if ( *v26 == 48 )\n        {\n          for ( i = v26 + 1; *i; ++i )\n          {\n            s1 = i;\n            v26 = i;\n            if ( *i != 48 )\n              break;\n          }\n        }\n        ::s = v26;\n      }\n    }\n    else if ( v9 > 120 )\n    {\n      if ( v9 == 129 )\n      {\n        qword_60E760 = (__int64)s1;\n      }\n      else if ( v9 <= 129 )\n      {\n        if ( v9 != 128 )\n          goto LABEL_317;\n        byte_60E542 = 1;\n      }\n      else if ( v9 == 130 )\n      {\n        v20 = dcgettext(0LL, \"invalid IO block size\", 5);\n        nbytes = sub_4079F0(s1, 1LL, ~v175, \"bEGKkMmPTYZ0\", v20, 0LL);\n      }\n      else\n      {\n        if ( v9 != 131 )\n          goto LABEL_317;\n        v13 = s1;\n        if ( v13 != (char *)sub_405180(s1, v6, v10, v11, 131LL) )\n          goto LABEL_336;\n        qword_60E5F8 = v13;\n      }\n    }\n    else if ( v9 == 110 )\n    {\n      if ( (_DWORD)v4 )\n        goto LABEL_327;\n      v32 = *__ctype_b_loc();\n      for ( j = s1; ; s1 = j )\n      {\n        v34 = j++;\n        if ( (v32[(unsigned __int8)*v34] & 0x2000) == 0 )\n          break;\n      }\n      if ( !memcmp(v34, \"r/\", 2uLL) )\n      {\n        v4 = 7LL;\n        s1 = v34 + 2;\n      }\n      else\n      {\n        v4 = 5LL;\n        if ( !strncmp(v34, \"l/\", 2uLL) )\n        {\n          v4 = 6LL;\n          s1 = v34 + 2;\n        }\n      }\n      v35 = strchr(s1, 47);\n      if ( v35 )\n      {\n        v36 = dcgettext(0LL, \"invalid number of chunks\", 5);\n        offset = sub_4079F0(v35 + 1, 1LL, -1LL, \"\", v36, 0LL);\n        if ( v35 != s1 )\n        {\n          *v35 = 0;\n          v37 = dcgettext(0LL, \"invalid chunk number\", 5);\n          v194 = sub_4079F0(s1, 1LL, offset, \"\", v37, 0LL);\n        }\n      }\n      else\n      {\n        v51 = dcgettext(0LL, \"invalid number of chunks\", 5);\n        offset = sub_4079F0(s1, 1LL, -1LL, \"\", v51, 0LL);\n      }\n    }\n    else if ( v9 <= 110 )\n    {\n      if ( v9 != 108 )\n        goto LABEL_317;\n      if ( (_DWORD)v4 )\n        goto LABEL_327;\n      v4 = 3LL;\n      v19 = dcgettext(0LL, \"invalid number of lines\", 5);\n      offset = sub_4079F0(s1, 1LL, -1LL, \"\", v19, 0LL);\n    }\n    else if ( v9 == 116 )\n    {\n      v13 = s1;\n      v14 = *s1;\n      if ( !*s1 )\n      {\n        v168 = dcgettext(0LL, \"empty record separator\", 5);\n        error(1, 0, v168);\nLABEL_354:\n        v169 = (const char *)sub_406E40(0LL, 3LL, qword_60E5F0);\n        v170 = __errno_location();\n        error(1, *v170, \"%s\", v169);\nLABEL_355:\n        v171 = (const char *)sub_406E40(0LL, 3LL, qword_60E5F0);\n        v172 = __errno_location();\n        error(1, *v172, \"%s\", v171);\n        goto LABEL_356;\n      }\n      if ( s1[1] )\n      {\n        v15 = \"\\\\0\";\n        if ( strcmp(s1, \"\\\\0\") )\n          goto LABEL_335;\n        v14 = 0;\n      }\n      if ( c >= 0 && c != v14 )\n      {\n        v152 = dcgettext(0LL, \"multiple separator characters specified\", 5);\n        v15 = 0LL;\n        error(1, 0, v152);\nLABEL_335:\n        v153 = sub_406FC0(v13, v15, v16, v17, v18);\n        v154 = dcgettext(0LL, \"multi-character separator %s\", 5);\n        v7 = 0LL;\n        error(1, 0, v154, v153);\nLABEL_336:\n        v155 = sub_406FC0(v13, v7, v22, v23, v24);\n        v144 = \"invalid suffix %s, contains directory separator\";\n        v145 = (const char *)v155;\nLABEL_329:\n        v146 = dcgettext(0LL, v144, 5);\n        goto LABEL_330;\n      }\n      c = v14;\n    }\n    else\n    {\n      if ( v9 != 117 )\n        goto LABEL_317;\n      byte_60E540 = 1;\n    }\n  }\n  if ( v194 && qword_60E760 )\n  {\n    v44 = \"--filter does not process a chunk extracted to stdout\";\n    goto LABEL_316;\n  }\n  if ( (_DWORD)v4 )\n  {\n    if ( !offset )\n    {\n      v166 = (const char *)sub_406FC0(\"0\", v6, v10, v11, (unsigned int)v9);\n      v167 = dcgettext(0LL, \"invalid number of lines\", 5);\n      error(0, 0, \"%s: %s\", v167, v166);\n      sub_404CF0(1);\n    }\n  }\n  else\n  {\n    offset = 1000LL;\n    LODWORD(v4) = 3;\n  }\n  if ( c < 0 )\n    c = 10;\n  v38 = (unsigned int)(v4 - 5);\n  if ( ::s )\n  {\n    byte_60E2A0 = 0;\n    if ( (unsigned int)v38 > 2 )\n      goto LABEL_84;\n    v57 = sub_407A20(::s);\n    v58 = offset;\n    v53 = offset;\n    if ( !v57 )\n    {\n      sa_handler = v203.sa_handler;\n      if ( (char *)~offset >= (char *)v203.sa_handler && (char *)v203.sa_handler < (char *)offset )\nLABEL_314:\n        v53 = (unsigned __int64)sa_handler + v58;\n      else\n        v53 = offset;\n    }\nLABEL_112:\n    v54 = strlen(off_60E298);\n    v55 = v53 / v54;\n    LOBYTE(v12) = v53 % v54 != 0;\n    v56 = 0LL;\n    if ( v54 <= v53 )\n    {\n      while ( 1 )\n      {\n        ++v56;\n        if ( v54 > v55 )\n          break;\n        v55 /= v54;\n      }\n    }\n    v12 = (unsigned __int8)v12;\n    byte_60E2A0 = 0;\n    v13 = (char *)((unsigned __int8)v12 + v56);\n    if ( qword_60E608 )\n    {\n      if ( (unsigned __int64)v13 <= qword_60E608 )\n        goto LABEL_118;\n      v164 = dcgettext(0LL, \"the suffix length needs to be at least %lu\", 5);\n      v41 = 0LL;\n      error(1, 0, v164, v13);\nLABEL_351:\n      v165 = sub_406FC0(*(_QWORD *)&v6[v41 + 16], v41, v43, v42, v12);\n      v144 = \"extra operand %s\";\n      v145 = (const char *)v165;\n      goto LABEL_329;\n    }\nLABEL_85:\n    v39 = 2LL;\n    if ( (unsigned __int64)v13 >= 2 )\n      v39 = (size_t)v13;\n    qword_60E608 = v39;\n  }\n  else\n  {\n    v53 = offset;\n    if ( (unsigned int)v38 <= 2 )\n      goto LABEL_112;\nLABEL_84:\n    v13 = 0LL;\n    if ( !qword_60E608 )\n      goto LABEL_85;\nLABEL_118:\n    byte_60E2A0 = 0;\n  }\n  v40 = dword_60E31C;\n  if ( dword_60E31C < (int)v5 )\n  {\n    v41 = 8LL * dword_60E31C;\n    v42 = *(char **)&v6[v41];\n    ++dword_60E31C;\n    qword_60E5F0 = v42;\n    if ( v40 + 1 < (int)v5 )\n    {\n      v43 = *(char **)&v6[v41 + 8];\n      dword_60E31C = v40 + 2;\n      src = v43;\n      if ( v40 + 2 < (int)v5 )\n        goto LABEL_351;\n    }\n  }\n  if ( ::s )\n  {\n    v44 = \"numerical suffix start value is too large for the suffix length\";\n    if ( strlen(::s) > qword_60E608 )\n      goto LABEL_316;\n  }\n  v45 = qword_60E5F0;\n  if ( strcmp(qword_60E5F0, \"-\") && (int)sub_405260(0, v45, 0) < 0 )\n    goto LABEL_338;\n  v46 = 0LL;\n  if ( __fxstat(1, 0, &stat_buf) )\n  {\n    v156 = (const char *)sub_406E40(0LL, 3LL, qword_60E5F0);\n    v157 = __errno_location();\n    error(1, *v157, \"%s\", v156);\nLABEL_338:\n    v158 = sub_406D70(4LL, qword_60E5F0);\n    v159 = dcgettext(0LL, \"cannot open %s for reading\", 5);\n    v160 = __errno_location();\n    error(1, *v160, v159, v158);\n    goto LABEL_339;\n  }\n  if ( !nbytes )\n  {\n    st_blksize = 0x20000LL;\n    if ( (unsigned __int64)(stat_buf.st_blksize - 0x20000) <= 0x1FFFFFFFFFFE0000LL )\n      st_blksize = stat_buf.st_blksize;\n    nbytes = st_blksize;\n  }\n  v48 = v175;\n  v5 = -1LL;\n  v49 = v175 + nbytes;\n  v50 = sub_407690(v175 + nbytes);\n  v175 = 0x7FFFFFFFFFFFFFFFLL;\n  s = (char *)(v50 + v48 - 1 - (v50 + v48 - 1) % v48);\n  if ( (unsigned int)v38 <= 1 )\n  {\n    v38 = 0LL;\n    v60 = (const char *)lseek(0, 0LL, 1);\n    if ( (__int64)v60 >= 0 )\n    {\n      v13 = s;\n      while ( 1 )\n      {\n        v49 = 0LL;\n        v46 = (unsigned __int64)&s[v38];\n        v62 = sub_406FE0(0, &s[v38], nbytes - v38);\n        if ( !v62 )\n          goto LABEL_128;\n        if ( v62 == -1 )\n          goto LABEL_305;\n        v61 = v38 + v62;\n        v38 = v61;\n        if ( nbytes <= v61 )\n          goto LABEL_295;\n      }\n    }\nLABEL_339:\n    v161 = __errno_location();\n    if ( *v161 == 29 )\n      *v161 = 0;\n    goto LABEL_305;\n  }\nLABEL_101:\n  if ( qword_60E760 )\n  {\n    sigemptyset(&set);\n    sigaction(13, 0LL, &v203);\n    if ( v203.sa_handler != (__sighandler_t)1 )\n      sigaddset(&set, 13);\n    v46 = (unsigned __int64)&set;\n    v49 = 0LL;\n    sigprocmask(0, &set, &oset);\n  }\n  v4 = (unsigned int)(v4 - 2);\n  switch ( (int)v4 )\n  {\n    case 0:\n      LOBYTE(v177) = 0;\n      v38 = 0LL;\n      v4 = 0LL;\n      v180 = 0LL;\n      ptr = 0LL;\n      goto LABEL_142;\n    case 1:\n    case 2:\n      v63 = offset;\n      v13 = 0LL;\n      v64 = 1;\n      while ( 1 )\n      {\n        v176 = sub_406FE0(0, s, nbytes);\n        if ( v176 == -1 )\n          goto LABEL_354;\n        v5 = (unsigned int)c;\n        v65 = &s[v176];\n        v4 = (signed __int64)s;\n        v66 = s;\n        s[v176] = c;\n        while ( 1 )\n        {\n          v67 = sub_408DD0(v66, (unsigned int)v5, v65 - v66 + 1);\n          if ( v65 == (char *)v67 )\n            break;\n          ++v13;\n          v66 = (char *)(v67 + 1);\n          if ( (unsigned __int64)v13 >= v63 )\n          {\n            v68 = v64;\n            offset = v67 + 1;\n            v13 = 0LL;\n            v64 = 1;\n            sub_4049A0(v68, v4, &v66[-v4]);\n            v66 = (char *)offset;\n            v5 = (unsigned int)c;\n            v4 = offset;\n          }\n        }\n        if ( v65 != (char *)v4 )\n        {\n          v110 = v64;\n          v64 = 0;\n          sub_4049A0(v110, v4, &v65[-v4]);\n        }\n        if ( !v176 )\n          goto LABEL_228;\n      }\n    case 3:\n      if ( v194 )\n        goto LABEL_276;\n      sub_404AB0(v175 / offset);\n      goto LABEL_228;\n    case 4:\n      if ( v194 > offset || v175 < offset )\n        __assert_fail(\"n && k <= n && n <= file_size\", \"src/split.c\", 0x361u, \"lines_chunk_split\");\n      v81 = v175 / offset;\n      if ( v194 <= 1 )\n        goto LABEL_306;\n      v38 = v194 - 1;\n      v180 = v175 / offset;\n      v82 = (v194 - 1) * v81 - 1;\n      v4 = v82;\n      if ( v5 > v82 )\n      {\n        v5 -= v82;\n        memmove(s, &s[v82], v5);\n        ptr = v82;\n        v81 = v175 / offset;\n        goto LABEL_170;\n      }\n      v131 = v82 - v5;\n      v5 = -1LL;\n      v132 = lseek(0, v131, 1);\n      ptr = v82;\n      v81 = v175 / offset;\n      if ( v132 < 0 )\n      {\n        v133 = (const char *)sub_406E40(0LL, 3LL, qword_60E5F0);\n        v134 = __errno_location();\n        error(1, *v134, \"%s\", v133);\n        goto LABEL_309;\n      }\nLABEL_170:\n      v202 = 0;\n      v13 = (char *)v194;\n      LOBYTE(v180) = 1;\n      v3 = (char *)v81;\n      v83 = v5;\n      v84 = (int *)(v175 - 1);\nLABEL_171:\n      if ( (__int64)v175 <= ptr )\n        goto LABEL_320;\n      if ( v83 == -1LL )\n        goto LABEL_312;\nLABEL_173:\n      if ( v83 )\n      {\n        v202 = 0;\n        v85 = (__int64)v3;\n        v5 = (size_t)s;\n        v86 = v180;\n        if ( v175 - ptr <= v83 )\n          v83 = v175 - ptr;\n        v87 = offset;\n        v200 = v83;\n        v3 = &s[v83];\n        while ( 1 )\n        {\n          v83 = -1LL;\n          if ( v3 == (char *)v5 )\n          {\n            LOBYTE(v180) = v86;\n            v3 = (char *)v85;\n            goto LABEL_171;\n          }\n          v88 = v4 - ptr;\n          if ( v4 - ptr < 0 )\n            v88 = 0LL;\n          v187 = v84;\n          v184 = v85;\n          v181 = v87;\n          if ( v88 > v200 )\n            v88 = v200;\n          v89 = sub_408DD0(v5 + v88, (unsigned int)c, v200 - v88);\n          v87 = v181;\n          v85 = v184;\n          v84 = v187;\n          if ( v89 )\n          {\n            v201 = 1;\n            v90 = (int *)(v89 + 1);\n          }\n          else\n          {\n            v90 = (int *)v3;\n            v201 = 0;\n          }\n          v180 = (unsigned __int64)v90 - v5;\n          if ( (char *)v38 == v13 )\n          {\n            v199 = v187;\n            v193 = v184;\n            v115 = (size_t)v90 - v5;\n            v192 = v87;\n            v183 = v90;\n            v116 = sub_4052D0(1, (void *)v5, (size_t)v90 - v5);\n            v90 = v183;\n            v87 = v192;\n            v85 = v193;\n            v84 = v199;\n            if ( v115 != v116 )\n            {\n              v117 = dcgettext(0LL, \"write error\", 5);\n              v118 = __errno_location();\n              error(1, *v118, \"%s\", v117);\nLABEL_276:\n              if ( v194 > offset || v175 < offset )\n                goto LABEL_342;\n              v119 = v175 / offset * (v194 - 1);\n              v120 = v119;\n              if ( v194 != offset )\n                v175 = v194 * (v175 / offset);\n              if ( v5 > v119 )\n              {\n                v5 -= v119;\n                memmove(s, &s[v119], v5);\nLABEL_282:\n                v4 = nbytes;\n                v121 = v5;\n                v3 = s;\n                while ( 1 )\n                {\n                  if ( (__int64)v175 <= v120 )\n                    goto LABEL_228;\n                  if ( v121 == -1LL )\n                  {\n                    v121 = sub_406FE0(0, s, v4);\n                    if ( v121 == -1LL )\n                      break;\n                  }\n                  if ( !v121 )\n                    goto LABEL_228;\n                  v122 = v175 - v120;\n                  if ( v175 - v120 > v121 )\n                    v122 = v121;\n                  if ( v122 != sub_4052D0(1, s, v122) )\n                  {\n                    v123 = __errno_location();\n                    if ( !qword_60E760 || *v123 != 32 )\n                    {\n                      v4 = (signed __int64)v123;\n                      v124 = (const char *)sub_406E40(0LL, 3LL, \"-\");\n                      error(1, *(_DWORD *)v4, \"%s\", v124);\n                    }\n                  }\n                  v120 += v122;\n                  v121 = -1LL;\n                }\n                v60 = (const char *)sub_406E40(0LL, 3LL, qword_60E5F0);\n                v49 = 1LL;\n                v46 = (unsigned int)*__errno_location();\n                error(1, v46, \"%s\", v60);\nLABEL_295:\n                st_size = stat_buf.st_size;\n                v126 = v61;\n                if ( !stat_buf.st_size )\n                  goto LABEL_304;\n                v127 = (__off_t)&v60[v61];\n                if ( (stat_buf.st_mode & 0xD000) == 0x8000 && stat_buf.st_size >= v127 )\n                  goto LABEL_303;\n                v46 = 0LL;\n                v49 = 0LL;\n                v128 = lseek(0, 0LL, 2);\n                st_size = v128;\n                if ( v128 >= 0 )\n                {\n                  if ( v127 == v128 )\n                    goto LABEL_303;\n                  v49 = 0LL;\n                  v46 = v127;\n                  if ( lseek(0, v127, 0) >= 0 )\n                  {\n                    if ( st_size < v127 )\n                      st_size = v127;\nLABEL_303:\n                    v13 = (char *)(st_size - v127);\n                    v38 = (unsigned __int64)&v13[v126];\n                    if ( &v13[v126] == (char *)0x7FFFFFFFFFFFFFFFLL )\n                    {\nLABEL_304:\n                      *__errno_location() = 75;\n                      goto LABEL_305;\n                    }\nLABEL_128:\n                    if ( (v38 & 0x8000000000000000LL) == 0LL )\n                    {\n                      v5 = nbytes;\n                      if ( v38 <= nbytes )\n                        v5 = v38;\n                      if ( (offset & 0x8000000000000000LL) == 0LL )\n                      {\n                        if ( v38 < offset )\n                          v38 = offset;\n                        v175 = v38;\n                        goto LABEL_101;\n                      }\n                      v147 = sub_405350(offset, &v203);\n                      v145 = (const char *)sub_406FC0(v147, &v203, v148, v149, v150);\n                      v151 = dcgettext(0LL, \"invalid number of chunks\", 5);\n                      error(1, 75, \"%s: %s\", v151, v145);\nLABEL_332:\n                      v146 = dcgettext(0LL, \"%s: invalid start value for numerical suffix\", v143);\nLABEL_330:\n                      error(0, 0, v146, v145);\n                      sub_404CF0(1);\n                    }\n                  }\n                }\nLABEL_305:\n                v5 = sub_406E40(0LL, 3LL, qword_60E5F0);\n                v129 = dcgettext(0LL, \"%s: cannot determine file size\", 5);\n                v130 = __errno_location();\n                error(1, *v130, v129, v5);\nLABEL_306:\n                v4 = v81 - 1;\n                v38 = 1LL;\n                ptr = 0LL;\n                goto LABEL_170;\n              }\n              v5 = -1LL;\n              if ( lseek(0, v119, 1) >= 0 )\n                goto LABEL_282;\n              v135 = (const char *)sub_406E40(0LL, 3LL, qword_60E5F0);\n              v136 = __errno_location();\n              error(1, *v136, \"%s\", v135);\nLABEL_312:\n              v183 = v84;\n              v83 = sub_406FE0(0, s, nbytes);\n              v84 = v183;\n              if ( v83 == -1LL )\n              {\n                v6 = (const char *)sub_406E40(0LL, 3LL, qword_60E5F0);\n                v58 = (unsigned int)*__errno_location();\n                error(1, v58, \"%s\", v6);\n                goto LABEL_314;\n              }\n              goto LABEL_173;\n            }\n          }\n          else if ( !v13 )\n          {\n            v198 = v187;\n            v193 = v184;\n            v191 = v87;\n            v186 = v90;\n            sub_4049A0(v86, v5, v180);\n            v84 = v198;\n            v85 = v193;\n            v87 = v191;\n            v90 = v186;\n          }\n          v91 = v180 + ptr;\n          ptr += v180;\n          v92 = v201;\n          while ( v91 > v4 || v92 )\n          {\n            v93 = (v3 == (char *)v90) & (v92 ^ 1);\n            if ( v93 )\n              goto LABEL_258;\n            if ( ++v38 > (unsigned __int64)v13 && v13 != 0LL )\n              goto LABEL_228;\n            v4 += v85;\n            if ( v38 == v87 )\n              v4 = (signed __int64)v84;\n            if ( v91 <= v4 )\n            {\n              v92 = 0;\n            }\n            else if ( !v13 )\n            {\n              v196 = v84;\n              v193 = v85;\n              v188 = v87;\n              v185 = v90;\n              sub_4049A0(1LL, 0LL, 0LL);\n              v90 = v185;\n              v87 = v188;\n              v85 = v193;\n              v84 = v196;\n            }\n          }\n          v93 = v202;\nLABEL_258:\n          v5 = (size_t)v90;\n          v200 -= v180;\n          v202 = v93;\n          v86 = v201;\n        }\n      }\nLABEL_320:\n      v138 = v38 - ((v202 == 0) - 1LL);\n      if ( !v194 )\n      {\n        while ( v138 <= offset )\n        {\n          ++v138;\n          sub_4049A0(1LL, 0LL, 0LL);\n        }\n      }\n      goto LABEL_228;\n    case 5:\n      if ( v194 )\n        goto LABEL_202;\n      v71 = (offset * (unsigned __int128)0x20uLL) >> 64 != 0;\n      if ( (offset & 0x400000000000000LL) != 0 || !is_mul_ok(offset, 0x20uLL) )\n        goto LABEL_319;\n      v5 = 0LL;\n      v193 = sub_407690(32 * offset);\n      v94 = v193;\n      do\n      {\n        sub_403CC0();\n        ++v5;\n        v94 += 32LL;\n        v95 = sub_4078C0(value);\n        *(_DWORD *)(v94 - 24) = -1;\n        *(_QWORD *)(v94 - 32) = v95;\n        *(_QWORD *)(v94 - 16) = 0LL;\n        *(_DWORD *)(v94 - 8) = 0;\n      }\n      while ( v5 != offset );\nLABEL_202:\n      ptr = 0LL;\n      v38 = 1LL;\n      v189 = 0;\n      LOBYTE(v180) = 0;\n      v197 = 0;\n      break;\n    default:\n      sub_404AB0(offset);\n      goto LABEL_228;\n  }\n  while ( 2 )\n  {\n    v96 = sub_406FE0(0, s, nbytes);\n    if ( v96 == -1 )\n      goto LABEL_355;\n    if ( v96 )\n    {\n      v177 = &s[v96];\n      if ( s == &s[v96] )\n        continue;\n      v75 = (size_t)s;\nLABEL_212:\n      v5 = (size_t)&v177[-v75];\n      v99 = sub_408DD0(v75, (unsigned int)c, &v177[-v75]);\n      if ( v99 )\n      {\n        v70 = (char *)(v99 + 1);\n        v4 = 1LL;\n        v5 = v99 + 1 - v75;\n      }\n      else\n      {\n        v70 = v177;\n        v4 = 0LL;\n      }\n      if ( !v194 )\n      {\n        v13 = (char *)(v193 + 32 * ptr);\n        v189 |= sub_404500(v193, ptr, offset);\n        v183 = __errno_location();\n        if ( !byte_60E540 )\n        {\n          if ( fwrite_unlocked((const void *)v75, v5, 1uLL, *((FILE **)v13 + 2)) == 1 )\n          {\n            v100 = *v183 == 32 && qword_60E760 != 0;\n            goto LABEL_218;\n          }\nLABEL_234:\n          if ( *v183 != 32 || !qword_60E760 )\n          {\n            v105 = (const char *)sub_406E40(0LL, 3LL, *(_QWORD *)v13);\n            LOBYTE(v49) = 1;\n            error(1, *v183, \"%s\", v105);\n            while ( 1 )\n            {\n              v49 = (unsigned __int8)v49;\n              v190 = v72;\n              sub_4049A0((unsigned __int8)v49, ptr, v38);\n              v4 = (signed __int64)v183;\n              v72 = v190;\n              v180 = nbytes;\n              if ( v38 > nbytes )\n                break;\n              do\n              {\n                while ( 1 )\n                {\n                  if ( !v72 )\n                    goto LABEL_239;\nLABEL_155:\n                  v76 = v70;\n                  v77 = v72 - v70 + 1;\n                  v49 = v4 == 0;\n                  v4 += v77;\n                  v5 -= v77;\n                  v70 = v72 + 1;\n                  sub_4049A0(v49, v76, v77);\n                  if ( v13 )\n                  {\n                    v75 -= v77;\n                    LOBYTE(v177) = v75 != 0;\n                    if ( v75 )\n                      goto LABEL_157;\n                    goto LABEL_357;\n                  }\n                  LOBYTE(v177) = v5 != 0;\n                  if ( v5 )\n                  {\n                    v75 = v5;\nLABEL_157:\n                    v38 = 0LL;\nLABEL_158:\n                    if ( v180 - v38 < v75 )\n                    {\n                      v46 = nbytes;\n                      if ( ~nbytes < v180 )\nLABEL_319:\n                        sub_4078E0(v49, v46, v71);\n                      v180 += nbytes;\n                      ptr = sub_4076F0(ptr, v180);\n                    }\n                    v78 = v70;\n                    v5 -= v75;\n                    v70 += v75;\n                    v79 = (void *)(ptr + v38);\n                    v38 += v75;\n                    memcpy(v79, v78, v75);\nLABEL_162:\n                    v80 = (char)v177;\n                    if ( v13 )\n                    {\n                      v80 = 0;\n                      v4 = 0LL;\n                    }\n                    LOBYTE(v177) = v80;\n                    goto LABEL_151;\n                  }\n                  v38 = 0LL;\n                  LOBYTE(v177) = 1;\nLABEL_151:\n                  if ( !v5 )\n                    goto LABEL_142;\nLABEL_152:\n                  v183 = (int *)(v38 + v4);\n                  v75 = offset - (v38 + v4);\n                  if ( v5 < v75 )\n                    break;\n                  v49 = (__int64)v70;\n                  v13 = &v70[v75 - 1];\n                  v72 = (char *)memrchr(v70, c, offset - (v38 + v4));\n                  if ( v38 )\n                    goto LABEL_146;\n                }\n                v49 = (__int64)v70;\n                v13 = 0LL;\n                v75 = 0LL;\n                v72 = (char *)memrchr(v70, c, v5);\n              }\n              while ( !v38 );\nLABEL_146:\n              LOBYTE(v49) = v4 == 0;\n              if ( !v72 && v4 )\n                goto LABEL_148;\n            }\n            v49 = ptr;\n            v106 = sub_4076F0(ptr, nbytes);\n            v72 = v190;\n            v180 = nbytes;\n            ptr = v106;\n            if ( v190 )\n              goto LABEL_155;\nLABEL_239:\n            v38 = 0LL;\nLABEL_148:\n            if ( (_BYTE)v177 )\n            {\n              if ( v13 && v75 )\n                goto LABEL_158;\n              if ( !v13 && v5 )\n              {\n                v75 = v5;\n                goto LABEL_158;\n              }\n              goto LABEL_162;\n            }\n            v73 = v4 == 0;\n            if ( v13 )\n            {\n              v74 = v70;\n              v5 -= v75;\n              v70 += v75;\n              sub_4049A0(v73, v74, v75);\n              v4 = 0LL;\n              goto LABEL_151;\n            }\n            v4 += v5;\n            sub_4049A0(v73, v70, v5);\nLABEL_142:\n            v69 = sub_406FE0(0, s, nbytes);\n            v5 = v69;\n            if ( v69 == -1 )\n            {\nLABEL_356:\n              v70 = (char *)sub_406E40(0LL, 3LL, qword_60E5F0);\n              v173 = __errno_location();\n              error(1, *v173, \"%s\", v70);\nLABEL_357:\n              LOBYTE(v177) = 1;\n              v38 = 0LL;\n              goto LABEL_162;\n            }\n            if ( v69 )\n            {\n              v70 = s;\n              goto LABEL_152;\n            }\n            if ( v38 )\nLABEL_309:\n              sub_4049A0(v4 == 0, ptr, v38);\n            free((void *)ptr);\n            goto LABEL_228;\n          }\nLABEL_221:\n          if ( !v189 )\n          {\nLABEL_222:\n            if ( (_BYTE)v4 )\n            {\n              if ( ++ptr == offset )\n              {\n                if ( !(_BYTE)v180 )\n                  goto LABEL_273;\n                ptr = 0LL;\n                v102 = v180;\n                LOBYTE(v180) = 0;\n                v197 = v102;\n              }\n            }\n            goto LABEL_211;\n          }\nLABEL_247:\n          if ( (unsigned int)sub_407E60(*((FILE **)v13 + 2)) )\n          {\n            v139 = (const char *)sub_406E40(0LL, 3LL, *(_QWORD *)v13);\n            error(1, *v183, \"%s\", v139);\n            goto LABEL_326;\n          }\n          *((_QWORD *)v13 + 2) = 0LL;\n          *((_DWORD *)v13 + 2) = -2;\n          goto LABEL_222;\n        }\n        v98 = v5 == sub_4052D0(*((_DWORD *)v13 + 2), (void *)v75, v5);\n        v107 = v183;\n        if ( !v98 )\n        {\n          if ( *v183 == 32 && qword_60E760 )\n            goto LABEL_221;\n          v108 = (const char *)sub_406E40(0LL, 3LL, *(_QWORD *)v13);\n          error(1, *v183, \"%s\", v108);\n          goto LABEL_247;\n        }\nLABEL_251:\n        v100 = qword_60E760 != 0 && *v107 == 32;\nLABEL_218:\n        v98 = !v100;\n        v101 = v180;\n        if ( v98 )\n          v101 = 1;\n        LOBYTE(v180) = v101;\n        goto LABEL_221;\n      }\n      if ( v194 == v38 )\n      {\n        if ( byte_60E540 )\n        {\n          if ( v5 != sub_4052D0(1, (void *)v75, v5) )\n          {\n            v70 = dcgettext(0LL, \"write error\", 5);\n            v109 = __errno_location();\n            error(1, *v109, \"%s\", v70);\n            goto LABEL_251;\n          }\n        }\n        else if ( fwrite_unlocked((const void *)v75, v5, 1uLL, stdout) != 1 )\n        {\n          clearerr_unlocked(stdout);\n          v70 = dcgettext(0LL, \"write error\", 5);\n          v104 = __errno_location();\n          error(1, *v104, \"%s\", v70);\n          goto LABEL_234;\n        }\n      }\n      if ( (_BYTE)v4 )\n      {\n        v97 = v38 + 1;\n        v98 = offset == v38;\n        v38 = 1LL;\n        if ( !v98 )\n          v38 = v97;\n      }\nLABEL_211:\n      v75 = (size_t)v70;\n      if ( v177 == v70 )\n        continue;\n      goto LABEL_212;\n    }\n    break;\n  }\n  if ( !v194 )\n  {\n    if ( v197 )\nLABEL_273:\n      v111 = (int)offset;\n    else\n      v111 = (int)ptr;\n    v112 = v193;\n    for ( k = 0LL; k != offset; ++k )\n    {\n      if ( v111 <= k && !byte_60E541 )\n        sub_404500(v193, k, offset);\n      v114 = *(unsigned int *)(v112 + 8);\n      if ( (int)v114 >= 0 )\n        sub_4046F0(*(_QWORD *)(v112 + 16), v114, *(unsigned int *)(v112 + 24), *(_QWORD *)v112);\n      *(_DWORD *)(v112 + 8) = -2;\n      v112 += 32LL;\n    }\n  }\nLABEL_228:\n  if ( close(0) )\n  {\n    v162 = (const char *)sub_406E40(0LL, 3LL, qword_60E5F0);\n    v163 = __errno_location();\n    error(1, *v163, \"%s\", v162);\nLABEL_342:\n    __assert_fail(\"k && n && k <= n && n <= file_size\", \"src/split.c\", 0x3DFu, \"bytes_chunk_extract\");\n  }\n  sub_4046F0(0LL, (unsigned int)dword_60E294, (unsigned int)dword_60E758, value);\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_403C0B",
            "funcStartAddr": "0x403c0b",
            "funcEndAddr": "0x403c2a",
            "decompiledFuncCode": "void *sub_403C0B()\n{\n  return &unk_60E4C8;\n}\n"
        },
        {
            "funcName": "sub_403C2A",
            "funcStartAddr": "0x403c2a",
            "funcEndAddr": "0x403c61",
            "decompiledFuncCode": "__int64 sub_403C2A()\n{\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_403C61",
            "funcStartAddr": "0x403c61",
            "funcEndAddr": "0x403cb8",
            "decompiledFuncCode": "void *sub_403C61()\n{\n  void *result; // rax\n\n  if ( !byte_60E508 )\n  {\n    while ( qword_60E510 < (unsigned __int64)(&qword_60DE48 - qword_60DE40 - 1) )\n      ((void (*)(void))qword_60DE40[++qword_60E510])();\n    result = sub_403C0B();\n    byte_60E508 = 1;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_403CB8",
            "funcStartAddr": "0x403cb8",
            "funcEndAddr": "0x403cbd",
            "decompiledFuncCode": "// attributes: thunk\n__int64 sub_403CB8()\n{\n  return sub_403C2A();\n}\n"
        },
        {
            "funcName": "sub_403CC0",
            "funcStartAddr": "0x403cc0",
            "funcEndAddr": "0x403fb9",
            "decompiledFuncCode": "size_t __fastcall sub_403CC0(char *a1, __int64 a2, __int64 a3)\n{\n  char *v3; // rbp\n  size_t v4; // rbx\n  size_t result; // rax\n  _QWORD *v6; // r9\n  char v7; // r8\n  char *v8; // rsi\n  __int64 *v9; // rcx\n  char v10; // dl\n  __int64 v11; // r12\n  size_t v12; // rax\n  unsigned __int64 v13; // r13\n  size_t v14; // rax\n  __int64 v15; // rax\n  __int64 v16; // rsi\n  char *v17; // rax\n  size_t v18; // rbx\n  char *v19; // rbp\n  char *v20; // rax\n  void *v21; // r13\n  char *v22; // rax\n  size_t v23; // rcx\n  __int64 v24; // rdx\n  char *v25; // rcx\n  size_t v26; // rbx\n  int v27; // esi\n  char *v28; // rax\n  char *v29; // r13\n  size_t v30; // rbx\n  size_t v31; // rbp\n  size_t v32; // r12\n  size_t v33; // rcx\n  char *v34; // rax\n\n  v3 = value;\n  v4 = qword_60E608;\n  if ( value )\n  {\n    result = qword_60E608 - 1;\n    if ( !qword_60E608 )\n    {\nLABEL_28:\n      v34 = dcgettext(0LL, \"output file suffixes exhausted\", 5);\n      error(1, 0, v34);\nLABEL_29:\n      __assert_fail(\"! widen\", \"src/split.c\", 0x198u, \"next_file_name\");\n    }\n    v6 = ptr;\n    v7 = byte_60E2A0;\n    v8 = off_60E298;\n    a1 = (char *)qword_60E610;\n    v9 = (__int64 *)((char *)ptr + 8 * qword_60E608 - 8);\n    while ( 1 )\n    {\n      a3 = *v9 + 1;\n      *v9 = a3;\n      if ( !result )\n      {\n        if ( v7 )\n          break;\n      }\n      v10 = v8[a3];\n      a1[result] = v10;\n      if ( v10 )\n        return result;\n      *v9-- = 0LL;\n      a1[result--] = *v8;\n      if ( result == -1LL )\n        goto LABEL_28;\n    }\n    if ( v8[*v6 + 1] )\n    {\n      result = (unsigned __int8)v8[a3];\n      *a1 = result;\n      if ( (_BYTE)result )\n        return result;\n      *v9 = 0LL;\n      *a1 = *v8;\n      goto LABEL_28;\n    }\n  }\n  v11 = qword_60E538;\n  if ( !qword_60E538 )\n  {\n    v12 = strlen(src);\n    a1 = qword_60E5F8;\n    v13 = v12;\n    n = v12;\n    v14 = 0LL;\n    if ( qword_60E5F8 )\n      v14 = strlen(qword_60E5F8);\n    qword_60E528 = v14;\n    v15 = v13 + v4 + v14;\n    v16 = v15 + 1;\n    qword_60E538 = v15;\n    if ( v13 <= v15 + 1 )\n    {\n      v17 = (char *)sub_4076F0(v3, v16);\n      v18 = n;\n      v19 = v17;\n      value = v17;\n      memcpy(v17, src, n);\n      v20 = off_60E298;\n      v21 = ptr;\n      goto LABEL_18;\n    }\nLABEL_26:\n    sub_4078E0(a1, v16, a3);\n  }\n  v16 = qword_60E538 + 3;\n  qword_60E538 += 2LL;\n  qword_60E608 = v4 + 1;\n  if ( v11 + 3 < n )\n    goto LABEL_26;\n  v22 = (char *)sub_4076F0(v3, v16);\n  v21 = ptr;\n  v23 = n;\n  v19 = v22;\n  value = v22;\n  v20 = off_60E298;\n  v24 = *(_QWORD *)ptr;\n  v18 = ++n;\n  v19[v23] = off_60E298[v24];\nLABEL_18:\n  v25 = &v19[v18];\n  v26 = qword_60E608;\n  v27 = *v20;\n  qword_60E610 = (__int64)v25;\n  v28 = (char *)memset(v25, v27, qword_60E608);\n  if ( qword_60E5F8 )\n    memcpy(&v28[v26], qword_60E5F8, qword_60E528);\n  v19[qword_60E538] = 0;\n  free(v21);\n  result = sub_407860(v26, 8LL);\n  v29 = s;\n  v30 = result;\n  ptr = (void *)result;\n  if ( s )\n  {\n    if ( v11 )\n      goto LABEL_29;\n    v31 = strlen(s);\n    v32 = 8 * qword_60E608;\n    result = (size_t)memcpy((void *)(qword_60E610 + qword_60E608 - v31), v29, v31);\n    v33 = v31 - 1;\n    if ( v31 )\n    {\n      result = v30 + v32 - 8 * v31;\n      do\n      {\n        *(_QWORD *)(result + 8 * v33) = v29[v33] - 48;\n        --v33;\n      }\n      while ( v33 != -1LL );\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_403FC0",
            "funcStartAddr": "0x403fc0",
            "funcEndAddr": "0x404500",
            "decompiledFuncCode": "__int64 __fastcall sub_403FC0(__int64 value, __int64 a2, __int64 a3, int a4, int a5, int a6)\n{\n  __int64 v6; // r12\n  __int64 v7; // rsi\n  char *v8; // rbp\n  __pid_t v9; // eax\n  int v10; // ebx\n  __int64 st_dev_low; // rdi\n  __int64 v12; // rdx\n  unsigned __int64 v13; // rcx\n  __int64 v14; // rax\n  unsigned int v15; // ebx\n  __int64 v17; // rbx\n  int *v18; // rbx\n  __int64 v19; // rdx\n  __int64 v20; // rcx\n  __int64 v21; // r8\n  const char *v22; // rax\n  char *v23; // rax\n  int v24; // eax\n  char *v25; // rbx\n  int *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  char *v29; // rax\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // rdx\n  char *v33; // rbx\n  int *v34; // rax\n  char *v35; // rbx\n  int *v36; // rax\n  __int64 v37; // rbx\n  char *v38; // rax\n  int *v39; // rax\n  char *v40; // rax\n  char *v41; // rbx\n  int *v42; // rax\n  __int64 v43; // rbp\n  int *v44; // rax\n  char *v45; // rax\n  char *v46; // rbx\n  __int64 v47; // rsi\n  __int64 v48; // rdx\n  struct stat fd; // [rsp+0h] [rbp-A8h] BYREF\n\n  v6 = value;\n  if ( !qword_60E760 )\n    goto LABEL_21;\n  v7 = value;\n  v8 = getenv(\"SHELL\");\n  if ( !v8 )\n    v8 = \"/bin/sh\";\n  if ( setenv(\"FILE\", (const char *)value, 1) )\n  {\nLABEL_48:\n    v46 = dcgettext(0LL, \"failed to set FILE environment variable\", 5);\n    v47 = (unsigned int)*__errno_location();\n    error(1, v47, v46);\n    return sub_404500(1LL, v47, v48);\n  }\n  if ( byte_60E542 )\n    goto LABEL_28;\n  while ( 1 )\n  {\n    if ( pipe((int *)&fd) )\n      goto LABEL_45;\n    v9 = fork();\n    v10 = v9;\n    if ( v9 )\n      break;\n    v17 = 0LL;\n    if ( qword_60E740 )\n    {\n      while ( !close(*(_DWORD *)(qword_60E750 + 4 * v17)) )\n      {\n        if ( qword_60E740 <= (unsigned __int64)++v17 )\n          goto LABEL_16;\n      }\n      v33 = dcgettext(0LL, \"closing prior pipe\", 5);\n      v34 = __errno_location();\n      error(1, *v34, v33);\n      goto LABEL_41;\n    }\nLABEL_16:\n    v6 = (unsigned int)close(SHIDWORD(fd.st_dev));\n    v18 = __errno_location();\n    if ( (_DWORD)v6 )\n      goto LABEL_44;\n    if ( LODWORD(fd.st_dev) )\n    {\n      if ( dup2(fd.st_dev, 0) )\n        goto LABEL_47;\n      if ( close(fd.st_dev) )\n      {\n        v29 = dcgettext(0LL, \"closing input pipe\", 5);\n        value = 1LL;\n        error(1, *v18, v29);\nLABEL_30:\n        v30 = sub_406D70(4LL, value);\n        v31 = dcgettext(0LL, \"creating file %s\\n\", 5);\n        __fprintf_chk(stdout, 1LL, v31, v30);\n        goto LABEL_22;\n      }\n    }\n    sigprocmask(2, &oset, 0LL);\n    v6 = qword_60E760;\n    v22 = (const char *)sub_405180(v8, &oset, v19, v20, v21);\n    execl(v8, v22, \"-c\", v6, 0LL);\n    v23 = dcgettext(0LL, \"failed to run command: \\\"%s -c %s\\\"\", 5);\n    value = 1LL;\n    error(1, *v18, v23, v8, v6);\nLABEL_21:\n    if ( byte_60E542 )\n      goto LABEL_30;\nLABEL_22:\n    v24 = sub_405210(v6, 65, 438, a4, a5, a6, fd.st_dev);\n    v15 = v24;\n    if ( v24 < 0 )\n      return v15;\n    if ( __fxstat(1, v24, &fd) )\n      goto LABEL_46;\n    if ( stat_buf.st_ino == fd.st_ino && stat_buf.st_dev == fd.st_dev )\n      goto LABEL_42;\n    if ( !ftruncate(v15, 0LL) )\n      return v15;\n    v8 = (char *)sub_406E40(0LL, 3LL, v6);\n    v25 = dcgettext(0LL, \"%s: error truncating\", 5);\n    v26 = __errno_location();\n    error(1, *v26, v25, v8);\nLABEL_28:\n    v27 = sub_406E40(0LL, 3LL, v6);\n    v28 = dcgettext(0LL, \"executing with FILE=%s\\n\", 5);\n    v7 = 1LL;\n    __fprintf_chk(stdout, 1LL, v28, v27);\n  }\n  if ( v9 == -1 )\n    goto LABEL_43;\n  st_dev_low = LODWORD(fd.st_dev);\n  if ( close(fd.st_dev) )\n  {\nLABEL_41:\n    v35 = dcgettext(0LL, \"failed to close input pipe\", 5);\n    v36 = __errno_location();\n    error(1, *v36, v35);\nLABEL_42:\n    v37 = sub_406D70(4LL, v6);\n    v38 = dcgettext(0LL, \"%s would overwrite input; aborting\", 5);\n    error(1, 0, v38, v37);\nLABEL_43:\n    v18 = (int *)dcgettext(0LL, \"fork system call failed\", 5);\n    v39 = __errno_location();\n    error(1, *v39, (const char *)v18);\nLABEL_44:\n    v40 = dcgettext(0LL, \"closing output pipe\", 5);\n    error(1, *v18, v40);\nLABEL_45:\n    v41 = dcgettext(0LL, \"failed to create pipe\", 5);\n    v42 = __errno_location();\n    error(1, *v42, v41);\nLABEL_46:\n    v43 = sub_406D70(4LL, v6);\n    v18 = (int *)dcgettext(0LL, \"failed to stat %s\", 5);\n    v44 = __errno_location();\n    error(1, *v44, (const char *)v18, v43);\nLABEL_47:\n    v45 = dcgettext(0LL, \"moving input pipe\", 5);\n    error(1, *v18, v45);\n    goto LABEL_48;\n  }\n  v12 = qword_60E740;\n  v13 = qword_60E748;\n  dword_60E758 = v10;\n  v14 = qword_60E750;\n  if ( qword_60E740 == qword_60E748 )\n  {\n    if ( qword_60E750 )\n    {\n      v32 = 0x1555555555555554LL;\n      if ( (unsigned __int64)qword_60E748 <= 0x1555555555555554LL )\n      {\n        v13 = qword_60E748 + ((unsigned __int64)qword_60E748 >> 1) + 1;\n        v7 = 4 * v13;\nLABEL_34:\n        qword_60E748 = v13;\n        v14 = sub_4076F0(qword_60E750, v7);\n        v12 = qword_60E740;\n        qword_60E750 = v14;\n        goto LABEL_11;\n      }\n    }\n    else\n    {\n      if ( !qword_60E748 )\n      {\n        v7 = 128LL;\n        v13 = 32LL;\n        goto LABEL_34;\n      }\n      v32 = (unsigned __int64)qword_60E748 >> 62 != 0;\n      v7 = 4 * qword_60E748;\n      if ( (qword_60E748 & 0x2000000000000000LL) == 0 && !((unsigned __int64)qword_60E748 >> 62) )\n        goto LABEL_34;\n    }\n    sub_4078E0(st_dev_low, v7, v32);\n  }\nLABEL_11:\n  qword_60E740 = v12 + 1;\n  *(_DWORD *)(v14 + 4 * v12) = HIDWORD(fd.st_dev);\n  return HIDWORD(fd.st_dev);\n}\n"
        },
        {
            "funcName": "sub_404500",
            "funcStartAddr": "0x404500",
            "funcEndAddr": "0x4046f0",
            "decompiledFuncCode": "__int64 __fastcall sub_404500(__int64 a1, __int64 a2, __int64 a3, int a4, int a5, int a6)\n{\n  _QWORD *v6; // r13\n  __int64 v7; // rbp\n  int v8; // eax\n  __int64 v10; // rbx\n  __int64 v11; // r14\n  __int64 v13; // r15\n  __int64 v14; // rdi\n  int v15; // eax\n  int *v16; // r8\n  __int64 v17; // rax\n  int v18; // eax\n  FILE *v19; // rax\n  int v20; // eax\n  const char *v21; // rax\n  const char *v22; // rax\n  const char *v23; // rax\n  const char *v24; // rbx\n  __int64 v25; // rsi\n  __int64 v26; // rdx\n  __int64 v27; // rcx\n  char v28; // [rsp+0h] [rbp-48h]\n  int *v29; // [rsp+8h] [rbp-40h]\n  int *v30; // [rsp+8h] [rbp-40h]\n\n  v6 = (_QWORD *)(a1 + 32 * a2);\n  v7 = 0LL;\n  v8 = *((_DWORD *)v6 + 2);\n  if ( v8 >= 0 )\n    return (unsigned int)v7;\n  v10 = a2 - 1;\n  v11 = a3 - 1;\n  v13 = a2;\n  if ( !a2 )\n    v10 = a3 - 1;\n  v14 = *v6;\n  if ( v8 == -1 )\n    goto LABEL_15;\nLABEL_6:\n  a2 = 3073LL;\n  v15 = sub_405210(v14, 3073, a3, a4, a5, a6, v28);\n  if ( v15 >= 0 )\n  {\nLABEL_16:\n    *((_DWORD *)v6 + 2) = v15;\n    v19 = fdopen(v15, \"a\");\n    v6[2] = v19;\n    if ( v19 )\n    {\n      v20 = dword_60E758;\n      dword_60E758 = 0;\n      *((_DWORD *)v6 + 6) = v20;\n      return (unsigned int)v7;\n    }\n  }\n  else\n  {\n    while ( 1 )\n    {\n      v16 = __errno_location();\n      if ( (unsigned int)(*v16 - 23) > 1 )\n        break;\n      while ( 1 )\n      {\n        v7 = a1 + 32 * v10;\n        if ( *(int *)(v7 + 8) >= 0 )\n          break;\n        v17 = v10 - 1;\n        if ( !v10 )\n          v17 = v11;\n        v10 = v17;\n        if ( v17 == v13 )\n        {\n          v30 = v16;\n          v21 = (const char *)sub_406E40(0LL, 3LL, *v6);\n          error(1, *v30, \"%s\", v21);\n          goto LABEL_19;\n        }\n      }\n      v29 = v16;\n      if ( (unsigned int)sub_407E60(*(FILE **)(v7 + 16)) )\n        goto LABEL_20;\n      *(_DWORD *)(v7 + 8) = -2;\n      v18 = *((_DWORD *)v6 + 2);\n      *(_QWORD *)(v7 + 16) = 0LL;\n      v14 = *v6;\n      v7 = 1LL;\n      if ( v18 != -1 )\n        goto LABEL_6;\nLABEL_15:\n      v15 = sub_403FC0(v14, a2, a3, a4, a5, a6);\n      if ( v15 >= 0 )\n        goto LABEL_16;\n    }\nLABEL_19:\n    v29 = v16;\n    v22 = (const char *)sub_406E40(0LL, 3LL, *v6);\n    error(1, *v29, \"%s\", v22);\nLABEL_20:\n    v23 = (const char *)sub_406E40(0LL, 3LL, *(_QWORD *)v7);\n    error(1, *v29, \"%s\", v23);\n  }\n  v24 = (const char *)sub_406E40(0LL, 3LL, *v6);\n  v25 = (unsigned int)*__errno_location();\n  error(1, v25, \"%s\", v24);\n  return sub_4046F0(1LL, v25, v26, v27);\n}\n"
        },
        {
            "funcName": "sub_4046F0",
            "funcStartAddr": "0x4046f0",
            "funcEndAddr": "0x4049a0",
            "decompiledFuncCode": "void __fastcall sub_4046F0(FILE *a1, int a2, __pid_t a3, const char *a4)\n{\n  int *v6; // rax\n  int *v7; // r13\n  const char *v8; // rax\n  __int64 v9; // rdx\n  __int64 v10; // rdi\n  __int64 v11; // rax\n  _DWORD *v12; // rcx\n  int *v13; // rax\n  int *v14; // rbp\n  __int64 v15; // r12\n  __int64 v16; // rbx\n  char *v17; // rax\n  int v18; // eax\n  unsigned int v19; // ebp\n  __int64 v20; // r12\n  __int64 v21; // rbx\n  char *v22; // rax\n  char *v23; // rax\n  char *v24; // rax\n  __int64 v25; // rdx\n  unsigned int v26; // [rsp+Ch] [rbp-5Ch]\n  int stat_loc; // [rsp+1Ch] [rbp-4Ch] BYREF\n  char v28[72]; // [rsp+20h] [rbp-48h] BYREF\n\n  if ( a1 )\n  {\n    if ( (unsigned int)sub_407E60(a1) )\n    {\n      v6 = __errno_location();\n      v7 = v6;\n      if ( !qword_60E760 || *v6 != 32 )\n      {\n        v8 = (const char *)sub_406E40(0LL, 3LL, a4);\n        error(1, *v7, \"%s\", v8);\n      }\n    }\n    if ( a2 < 0 )\n      goto LABEL_12;\n  }\n  else\n  {\n    if ( a2 < 0 )\n      goto LABEL_12;\n    if ( close(a2) < 0 )\n    {\n      a4 = (const char *)sub_406E40(0LL, 3LL, a4);\n      v13 = __errno_location();\n      error(1, *v13, \"%s\", a4);\n      goto LABEL_17;\n    }\n  }\n  if ( qword_60E740 )\n  {\n    if ( a2 == *(_DWORD *)qword_60E750 )\n    {\n      v12 = (_DWORD *)qword_60E750;\n      v10 = qword_60E740 - 1;\nLABEL_23:\n      v18 = *(_DWORD *)(qword_60E750 + 4 * v10);\n      qword_60E740 = v10;\n      *v12 = v18;\n    }\n    else\n    {\n      v9 = qword_60E750 + 4;\n      v10 = qword_60E740 - 1;\n      v11 = 0LL;\n      while ( v10 != v11 )\n      {\n        v12 = (_DWORD *)v9;\n        ++v11;\n        v9 += 4LL;\n        if ( *v12 == a2 )\n          goto LABEL_23;\n      }\n    }\n  }\nLABEL_12:\n  if ( a3 <= 0 )\n    return;\nLABEL_17:\n  stat_loc = 0;\n  if ( waitpid(a3, &stat_loc, 0) == -1 )\n  {\n    v14 = __errno_location();\n    if ( *v14 != 10 )\n    {\n      v23 = dcgettext(0LL, \"waiting for child process\", 5);\n      error(1, *v14, v23);\n      goto LABEL_29;\n    }\n  }\n  LODWORD(v14) = stat_loc & 0x7F;\n  if ( __OFSUB__((_BYTE)v14 + 1, 1) || (_BYTE)v14 == 0 )\n  {\n    if ( (stat_loc & 0x7F) != 0 )\n    {\n      v26 = stat_loc;\n      v24 = dcgettext(0LL, \"unknown status from command (0x%X)\", 5);\n      error(1, 0, v24, v26);\n      sub_4049A0(1LL, 0LL, v25);\n    }\n    else\n    {\n      v19 = BYTE1(stat_loc);\n      if ( BYTE1(stat_loc) )\n      {\n        v20 = qword_60E760;\n        v21 = sub_406E40(0LL, 3LL, a4);\n        v22 = dcgettext(0LL, \"with FILE=%s, exit %d from command: %s\", 5);\n        error(v19, 0, v22, v21, v19, v20);\n      }\n    }\n  }\n  else if ( (_DWORD)v14 != 13 )\n  {\n    if ( !(unsigned int)sub_409040(stat_loc & 0x7F, v28) )\n    {\nLABEL_21:\n      v15 = qword_60E760;\n      v16 = sub_406E40(0LL, 3LL, a4);\n      v17 = dcgettext(0LL, \"with FILE=%s, signal %s from command: %s\", 5);\n      error((_DWORD)v14 + 128, 0, v17, v16, v28, v15);\n      return;\n    }\nLABEL_29:\n    __sprintf_chk(v28, 1LL, 19LL, \"%d\", (unsigned int)v14);\n    goto LABEL_21;\n  }\n}\n"
        },
        {
            "funcName": "sub_4049A0",
            "funcStartAddr": "0x4049a0",
            "funcEndAddr": "0x404ab0",
            "decompiledFuncCode": "__int64 __fastcall sub_4049A0(char a1, unsigned __int64 a2, size_t a3)\n{\n  __int64 v5; // rsi\n  __int64 v6; // rdx\n  __int64 v7; // rdx\n  int v8; // ecx\n  int v9; // r8d\n  int v10; // r9d\n  int v11; // edi\n  int *v12; // rbx\n  __int64 result; // rax\n  const char *v14; // rax\n  const char *v15; // rbx\n  int *v16; // rax\n\n  if ( a1 )\n  {\n    if ( !(a3 | a2) && byte_60E541 )\n      return 1LL;\n    v5 = (unsigned int)dword_60E294;\n    sub_4046F0(0LL, dword_60E294, dword_60E758, value);\n    sub_403CC0(0LL, v5, v6);\n    v11 = sub_403FC0((__int64)value, v5, v7, v8, v9, v10);\n    dword_60E294 = v11;\n    if ( v11 < 0 )\n    {\n      v15 = (const char *)sub_406E40(0LL, 3LL, value);\n      v16 = __errno_location();\n      error(1, *v16, \"%s\", v15);\n      return sub_404AB0(1LL);\n    }\n  }\n  else\n  {\n    v11 = dword_60E294;\n  }\n  if ( sub_4052D0(v11, (void *)a2, a3) == a3 )\n    return 1LL;\n  v12 = __errno_location();\n  if ( !qword_60E760 || (result = 0LL, *v12 != 32) )\n  {\n    v14 = (const char *)sub_406E40(0LL, 3LL, value);\n    error(1, *v12, \"%s\", v14);\n    return 1LL;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_404AB0",
            "funcStartAddr": "0x404ab0",
            "funcEndAddr": "0x404cf0",
            "decompiledFuncCode": "void __fastcall sub_404AB0(unsigned __int64 offset, void *a2, size_t a3, unsigned __int64 a4, unsigned __int64 a5)\n{\n  unsigned __int64 v5; // r14\n  unsigned __int64 v6; // r12\n  char v7; // bp\n  unsigned __int8 v8; // bl\n  size_t v9; // r13\n  unsigned __int64 v10; // r9\n  bool v11; // r11\n  char v12; // al\n  unsigned __int64 v13; // rax\n  char v14; // al\n  __off_t v15; // rax\n  unsigned __int64 v16; // rbx\n  const char *v17; // rbx\n  int *v18; // rax\n  unsigned __int64 v19; // [rsp+8h] [rbp-60h]\n  unsigned __int64 v20; // [rsp+8h] [rbp-60h]\n  unsigned __int64 v21; // [rsp+8h] [rbp-60h]\n  unsigned __int64 v22; // [rsp+8h] [rbp-60h]\n  unsigned __int64 v23; // [rsp+8h] [rbp-60h]\n  unsigned __int64 v24; // [rsp+10h] [rbp-58h]\n  bool v25; // [rsp+1Eh] [rbp-4Ah]\n  bool v26; // [rsp+1Fh] [rbp-49h]\n\n  v5 = 0LL;\n  v6 = offset;\n  v7 = 1;\n  v8 = 1;\n  if ( a4 == -1LL )\n    goto LABEL_11;\n  v9 = a4;\n  v26 = a4 < a3;\n  if ( a4 < offset )\n    goto LABEL_14;\nLABEL_3:\n  v10 = (unsigned __int64)a2;\n  v11 = a5 == 0;\n  do\n  {\n    v7 |= v8;\n    if ( v7 )\n    {\n      v24 = a5;\n      v25 = v11;\n      v19 = v10;\n      v12 = sub_4049A0(v8, v10, v6);\n      a5 = v24;\n      v11 = v25;\n      v7 = v12;\n      v10 = v19;\n    }\n    v5 += v8;\n    v8 = v11 || v5 < a5;\n    if ( !v8 && !v7 )\n      return;\n    v9 -= v6;\n    v10 += v6;\n    v6 = offset;\n  }\n  while ( offset <= v9 );\n  if ( v9 )\n    goto LABEL_19;\n  while ( !v26 )\n  {\nLABEL_11:\n    if ( !v7 )\n    {\n      v22 = a5;\n      v15 = lseek(0, v6, 1);\n      a5 = v22;\n      if ( v15 != -1 )\n      {\n        v6 = offset;\n        v8 = 1;\n      }\n    }\n    v20 = a5;\n    v13 = sub_406FE0(0, a2, a3);\n    a5 = v20;\n    v9 = v13;\n    if ( v13 == -1LL )\n    {\n      v17 = (const char *)sub_406E40(0LL, 3LL, qword_60E5F0);\n      v18 = __errno_location();\n      error(1, *v18, \"%s\", v17);\n      sub_404CF0(1);\n    }\n    v26 = v13 == 0;\n    if ( v13 >= v6 )\n      goto LABEL_3;\nLABEL_14:\n    if ( v9 )\n    {\n      if ( !(v8 | (unsigned __int8)v7) )\n      {\n        v7 = 0;\n        v8 = a5 == v5;\n        if ( a5 == v5 )\n          return;\n        goto LABEL_20;\n      }\n      v10 = (unsigned __int64)a2;\nLABEL_19:\n      v21 = a5;\n      v14 = sub_4049A0(v8, v10, v9);\n      a5 = v21;\n      v7 = v14;\n      v5 += v8;\n      v8 = (v14 ^ 1) & (v21 == v5);\n      if ( v8 )\n        return;\nLABEL_20:\n      v6 -= v9;\n    }\n  }\n  v16 = v5 + 1;\n  if ( v5 < a5 )\n  {\n    while ( 1 )\n    {\n      v23 = a5;\n      sub_4049A0(1, 0LL, 0LL);\n      a5 = v23;\n      if ( v23 == v16 )\n        break;\n      ++v16;\n    }\n  }\n}\n"
        },
        {
            "funcName": "sub_404CF0",
            "funcStartAddr": "0x404cf0",
            "funcEndAddr": "0x4050bd",
            "decompiledFuncCode": "void __fastcall __noreturn sub_404CF0(int status)\n{\n  __int64 v1; // rbp\n  char *v2; // rax\n  char *v3; // rax\n  FILE *v4; // rbp\n  char *v5; // rax\n  FILE *v6; // rbp\n  char *v7; // rax\n  FILE *v8; // rbp\n  char *v9; // rax\n  char *v10; // rax\n  FILE *v11; // rbp\n  char *v12; // rax\n  FILE *v13; // rbp\n  char *v14; // rax\n  FILE *v15; // rbp\n  char *v16; // rax\n  FILE *v17; // rbp\n  char *v18; // rax\n  FILE *v19; // rbp\n  char *v20; // rax\n  __int64 *v21; // rax\n  const char *v22; // rbp\n  char *v23; // rax\n  char *v24; // rax\n  char *v25; // rax\n  char *v26; // rax\n  char *v27; // rax\n  char *v28; // rax\n  char *v29; // rax\n  char *v30; // rax\n  __int64 v31[17]; // [rsp+0h] [rbp-88h] BYREF\n\n  v1 = qword_60E778;\n  if ( status )\n  {\n    v2 = dcgettext(0LL, \"Try '%s --help' for more information.\\n\", 5);\n    __fprintf_chk(stderr, 1LL, v2, v1);\n    goto LABEL_3;\n  }\n  v3 = dcgettext(0LL, \"Usage: %s [OPTION]... [FILE [PREFIX]]\\n\", 5);\n  __printf_chk(1LL, v3, v1);\n  v4 = stdout;\n  v5 = dcgettext(\n         0LL,\n         \"Output pieces of FILE to PREFIXaa, PREFIXab, ...;\\ndefault size is 1000 lines, and default PREFIX is 'x'.\\n\",\n         5);\n  fputs_unlocked(v5, v4);\n  v6 = stdout;\n  v7 = dcgettext(0LL, \"\\nWith no FILE, or when FILE is -, read standard input.\\n\", 5);\n  fputs_unlocked(v7, v6);\n  v8 = stdout;\n  v9 = dcgettext(0LL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5);\n  fputs_unlocked(v9, v8);\n  v10 = dcgettext(\n          0LL,\n          \"  -a, --suffix-length=N   generate suffixes of length N (default %d)\\n\"\n          \"      --additional-suffix=SUFFIX  append an additional SUFFIX to file names\\n\"\n          \"  -b, --bytes=SIZE        put SIZE bytes per output file\\n\"\n          \"  -C, --line-bytes=SIZE   put at most SIZE bytes of records per output file\\n\"\n          \"  -d                      use numeric suffixes starting at 0, not alphabetic\\n\"\n          \"      --numeric-suffixes[=FROM]  same as -d, but allow setting the start value\\n\"\n          \"  -x                      use hex suffixes starting at 0, not alphabetic\\n\"\n          \"      --hex-suffixes[=FROM]  same as -x, but allow setting the start value\\n\"\n          \"  -e, --elide-empty-files  do not generate empty output files with '-n'\\n\"\n          \"      --filter=COMMAND    write to shell COMMAND; file name is $FILE\\n\"\n          \"  -l, --lines=NUMBER      put NUMBER lines/records per output file\\n\"\n          \"  -n, --number=CHUNKS     generate CHUNKS output files; see explanation below\\n\"\n          \"  -t, --separator=SEP     use SEP instead of newline as the record separator;\\n\"\n          \"                            '\\\\0' (zero) specifies the NUL character\\n\"\n          \"  -u, --unbuffered        immediately copy input to output with '-n r/...'\\n\",\n          5);\n  __fprintf_chk(stdout, 1LL, v10, 2LL);\n  v11 = stdout;\n  v12 = dcgettext(\n          0LL,\n          \"      --verbose           print a diagnostic just before each\\n\"\n          \"                            output file is opened\\n\",\n          5);\n  fputs_unlocked(v12, v11);\n  v13 = stdout;\n  v14 = dcgettext(0LL, \"      --help     display this help and exit\\n\", 5);\n  fputs_unlocked(v14, v13);\n  v15 = stdout;\n  v16 = dcgettext(0LL, \"      --version  output version information and exit\\n\", 5);\n  fputs_unlocked(v16, v15);\n  v17 = stdout;\n  v18 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"The SIZE argument is an integer and optional unit (example: 10K is 10*1024).\\n\"\n          \"Units are K,M,G,T,P,E,Z,Y (powers of 1024) or KB,MB,... (powers of 1000).\\n\",\n          5);\n  fputs_unlocked(v18, v17);\n  v19 = stdout;\n  v20 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"CHUNKS may be:\\n\"\n          \"  N       split into N files based on size of input\\n\"\n          \"  K/N     output Kth of N to stdout\\n\"\n          \"  l/N     split into N files without splitting lines/records\\n\"\n          \"  l/K/N   output Kth of N to stdout without splitting lines/records\\n\"\n          \"  r/N     like 'l' but use round robin distribution\\n\"\n          \"  r/K/N   likewise but only output Kth of N to stdout\\n\",\n          5);\n  fputs_unlocked(v20, v19);\n  v31[0] = (__int64)\"[\";\n  v21 = v31;\n  v31[1] = (__int64)\"test invocation\";\n  v31[2] = (__int64)\"coreutils\";\n  v31[3] = (__int64)\"Multi-call invocation\";\n  v31[4] = (__int64)\"sha224sum\";\n  v31[5] = (__int64)\"sha2 utilities\";\n  v31[6] = (__int64)\"sha256sum\";\n  v31[7] = (__int64)\"sha2 utilities\";\n  v31[8] = (__int64)\"sha384sum\";\n  v31[9] = (__int64)\"sha2 utilities\";\n  v31[10] = (__int64)\"sha512sum\";\n  v31[11] = (__int64)\"sha2 utilities\";\n  v31[12] = 0LL;\n  v31[13] = 0LL;\n  do\n    v21 += 2;\n  while ( *v21 && strcmp(\"split\", (const char *)*v21) );\n  v22 = (const char *)v21[1];\n  if ( v22 )\n  {\n    v23 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v23, &unk_409B0F);\n    v24 = setlocale(5, 0LL);\n    if ( !v24 || !strncmp(v24, \"en_\", 3uLL) )\n      goto LABEL_10;\n  }\n  else\n  {\n    v27 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v27, &unk_409B0F);\n    v28 = setlocale(5, 0LL);\n    if ( !v28 || !strncmp(v28, \"en_\", 3uLL) )\n    {\n      v22 = \"split\";\n      v29 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n      __printf_chk(1LL, v29, \"https://www.gnu.org/software/coreutils/\");\n      goto LABEL_11;\n    }\n    v22 = \"split\";\n  }\n  v30 = dcgettext(0LL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5);\n  __printf_chk(1LL, v30, \"split\");\nLABEL_10:\n  v25 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n  __printf_chk(1LL, v25, \"https://www.gnu.org/software/coreutils/\");\nLABEL_11:\n  v26 = dcgettext(0LL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5);\n  __printf_chk(1LL, v26, v22);\nLABEL_3:\n  exit(status);\n}\n"
        },
        {
            "funcName": "sub_4050E0",
            "funcStartAddr": "0x4050e0",
            "funcEndAddr": "0x40517e",
            "decompiledFuncCode": "__int64 sub_4050E0()\n{\n  int *v0; // rax\n  int *v1; // rbx\n  __int64 result; // rax\n  char *v3; // rax\n  const char *v4; // rbp\n  const char *v5; // rax\n\n  if ( (unsigned int)sub_409110(stdout) )\n  {\n    v0 = __errno_location();\n    v1 = v0;\n    if ( !byte_60E768 || *v0 != 32 )\n    {\n      v3 = dcgettext(0LL, \"write error\", 5);\n      v4 = v3;\n      if ( qword_60E770 )\n      {\n        v5 = (const char *)sub_406E10();\n        error(0, *v1, \"%s: %s\", v5, v4);\n      }\n      else\n      {\n        error(0, *v1, \"%s\", v3);\n      }\nLABEL_8:\n      _exit(status);\n    }\n  }\n  result = sub_409110(stderr);\n  if ( (_DWORD)result )\n    goto LABEL_8;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_405180",
            "funcStartAddr": "0x405180",
            "funcEndAddr": "0x4051db",
            "decompiledFuncCode": "_BYTE *__fastcall sub_405180(_BYTE *a1)\n{\n  char v1; // dl\n  _BYTE *result; // rax\n  _BYTE *v3; // rcx\n  char v4; // si\n\n  v1 = *a1;\n  for ( result = a1; *result == 47; v1 = *result )\n    ++result;\n  if ( v1 )\n  {\n    v3 = result;\n    v4 = 0;\n    do\n    {\n      while ( v1 == 47 )\n      {\n        v1 = *++v3;\n        v4 = 1;\n        if ( !*v3 )\n          return result;\n      }\n      if ( v4 )\n      {\n        result = v3;\n        v4 = 0;\n      }\n      v1 = *++v3;\n    }\n    while ( *v3 );\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4051E0",
            "funcStartAddr": "0x4051e0",
            "funcEndAddr": "0x40520b",
            "decompiledFuncCode": "size_t __fastcall sub_4051E0(const char *a1)\n{\n  size_t result; // rax\n  size_t v2; // rdx\n\n  result = strlen(a1);\n  if ( result > 1 )\n  {\n    do\n    {\n      v2 = result - 1;\n      if ( a1[result - 1] != 47 )\n        break;\n      --result;\n    }\n    while ( v2 != 1 );\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_405210",
            "funcStartAddr": "0x405210",
            "funcEndAddr": "0x40525a",
            "decompiledFuncCode": "__int64 __fastcall sub_405210(const char *a1, char a2, unsigned int a3)\n{\n  __int64 v3; // rdx\n  int v4; // eax\n\n  v3 = 0LL;\n  if ( (a2 & 0x40) != 0 )\n    v3 = a3;\n  v4 = open(a1, a2, v3);\n  return sub_4070A0(v4);\n}\n"
        },
        {
            "funcName": "sub_405260",
            "funcStartAddr": "0x405260",
            "funcEndAddr": "0x4052ca",
            "decompiledFuncCode": "__int64 __fastcall sub_405260(int fd2, char *file, int oflag, unsigned int a4)\n{\n  __int64 result; // rax\n  int v5; // ebx\n  unsigned int v6; // r12d\n  int *v7; // rax\n  int v8; // r13d\n  int *v9; // rbp\n\n  LODWORD(result) = open(file, oflag, a4);\n  v5 = result;\n  if ( fd2 == (_DWORD)result || (int)result < 0 )\n    return (unsigned int)result;\n  v6 = dup2(result, fd2);\n  v7 = __errno_location();\n  v8 = *v7;\n  v9 = v7;\n  close(v5);\n  result = v6;\n  *v9 = v8;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4052D0",
            "funcStartAddr": "0x4052d0",
            "funcEndAddr": "0x405346",
            "decompiledFuncCode": "__int64 __fastcall sub_4052D0(int fd, char *buf, size_t n)\n{\n  size_t v4; // rbx\n  __int64 v5; // r12\n  __int64 v6; // rax\n\n  if ( !n )\n    return 0LL;\n  v4 = n;\n  v5 = 0LL;\n  do\n  {\n    v6 = sub_407040(fd, buf, v4);\n    if ( v6 == -1 )\n      break;\n    if ( !v6 )\n    {\n      *__errno_location() = 28;\n      return v5;\n    }\n    v5 += v6;\n    buf += v6;\n    v4 -= v6;\n  }\n  while ( v4 );\n  return v5;\n}\n"
        },
        {
            "funcName": "sub_405350",
            "funcStartAddr": "0x405350",
            "funcEndAddr": "0x405398",
            "decompiledFuncCode": "__int64 __fastcall sub_405350(unsigned __int64 a1, __int64 a2)\n{\n  __int64 v2; // rcx\n\n  v2 = a2 + 20;\n  *(_BYTE *)(a2 + 20) = 0;\n  while ( 1 )\n  {\n    *(_BYTE *)--v2 = a1 % 0xA + 48;\n    if ( a1 <= 9 )\n      break;\n    a1 /= 0xAuLL;\n  }\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_4053A0",
            "funcStartAddr": "0x4053a0",
            "funcEndAddr": "0x405439",
            "decompiledFuncCode": "char *__fastcall sub_4053A0(const char *a1)\n{\n  __int64 v1; // rbx\n  char *result; // rax\n\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v1 = (__int64)a1;\n  result = strrchr(a1, 47);\n  if ( result )\n  {\n    if ( result + 1 - a1 > 6 && !memcmp(result - 6, \"/.libs/\", 7uLL) )\n    {\n      v1 = (__int64)(result + 1);\n      if ( !memcmp(result + 1, \"lt-\", 3uLL) )\n      {\n        v1 = (__int64)(result + 4);\n        program_invocation_short_name = (__int64)(result + 4);\n      }\n    }\n  }\n  qword_60E778 = v1;\n  program_invocation_name = v1;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_405440",
            "funcStartAddr": "0x405440",
            "funcEndAddr": "0x405532",
            "decompiledFuncCode": "char *__fastcall sub_405440(char *msgid, int a2)\n{\n  char *v2; // rbx\n  _BYTE *v4; // rax\n  bool v5; // zf\n  const char *v6; // rbx\n\n  v2 = dcgettext(0LL, msgid, 5);\n  if ( msgid != v2 )\n    return v2;\n  v4 = (_BYTE *)sub_4091D0();\n  if ( (*v4 & 0xDF) == 85 )\n  {\n    if ( (v4[1] & 0xDF) == 84 && (v4[2] & 0xDF) == 70 && v4[3] == 45 && v4[4] == 56 && !v4[5] )\n    {\n      v5 = *v2 == 96;\n      v2 = (char *)&unk_40AD19;\n      if ( !v5 )\n        return (char *)&unk_40AD0E;\n      return v2;\n    }\n  }\n  else if ( (*v4 & 0xDF) == 71\n         && (v4[1] & 0xDF) == 66\n         && v4[2] == 49\n         && v4[3] == 56\n         && v4[4] == 48\n         && v4[5] == 51\n         && v4[6] == 48\n         && !v4[7] )\n  {\n    v5 = *v2 == 96;\n    v2 = (char *)&unk_40AD15;\n    if ( !v5 )\n      return (char *)&unk_40AD12;\n    return v2;\n  }\n  v6 = \"\\\"\";\n  if ( a2 != 9 )\n    return \"'\";\n  return (char *)v6;\n}\n"
        },
        {
            "funcName": "sub_405540",
            "funcStartAddr": "0x401e80",
            "funcEndAddr": "0x401e85",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_405540(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_405540((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_405540((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_408D50((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_405540((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_405440(\"`\", a5);\n        v51 = sub_405440(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n\nunsigned __int64 __fastcall sub_405540(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_405540((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_405540((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_408D50((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_405540((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_405440(\"`\", a5);\n        v51 = sub_405440(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n"
        },
        {
            "funcName": "sub_405540",
            "funcStartAddr": "0x401e80",
            "funcEndAddr": "0x401e85",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_405540(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_405540((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_405540((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_408D50((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_405540((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_405440(\"`\", a5);\n        v51 = sub_405440(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n\nunsigned __int64 __fastcall sub_405540(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_405540((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_405540((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_408D50((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_405540((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_405440(\"`\", a5);\n        v51 = sub_405440(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n"
        },
        {
            "funcName": "sub_406770",
            "funcStartAddr": "0x401e85",
            "funcEndAddr": "0x401e8a",
            "decompiledFuncCode": "_BYTE *__fastcall sub_406770(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __int64 v7; // rdx\n  __m128i *v8; // rbx\n  int *v9; // r13\n  __int64 v10; // rsi\n  unsigned __int64 *v11; // rbx\n  _BYTE *v12; // r12\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rsi\n  _BYTE *v15; // rax\n  int v16; // r8d\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v20; // [rsp+10h] [rbp-48h]\n  int v21; // [rsp+18h] [rbp-40h]\n  int v22; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v8 = (__m128i *)off_60E2F8;\n  v9 = v6;\n  v21 = *v6;\n  if ( (int)a1 < 0 )\n    abort();\n  if ( dword_60E310 <= (int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_4078E0(a1, a2, v7);\n    v10 = 16LL * ((int)a1 + 1);\n    if ( off_60E2F8 == &xmmword_60E300 )\n    {\n      v8 = (__m128i *)sub_4076F0(0LL, v10);\n      off_60E2F8 = v8;\n      *v8 = _mm_load_si128((const __m128i *)&xmmword_60E300);\n    }\n    else\n    {\n      off_60E2F8 = (void *)sub_4076F0(off_60E2F8, v10);\n      v8 = (__m128i *)off_60E2F8;\n    }\n    memset(&v8[dword_60E310], 0, 16LL * ((int)a1 + 1 - dword_60E310));\n    dword_60E310 = a1 + 1;\n  }\n  v11 = (unsigned __int64 *)&v8[(int)a1];\n  v12 = (_BYTE *)v11[1];\n  v22 = *(_DWORD *)(a4 + 4) | 1;\n  v19 = *v11;\n  v13 = sub_405540(v12, *v11, a2, a3, *(_DWORD *)a4, v22, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v19 <= v13 )\n  {\n    v14 = v13 + 1;\n    *v11 = v13 + 1;\n    if ( v12 != (_BYTE *)&unk_60E780 )\n    {\n      v20 = v13 + 1;\n      free(v12);\n      v14 = v20;\n    }\n    v15 = (_BYTE *)sub_407690(v14);\n    v16 = *(_DWORD *)a4;\n    v11[1] = (unsigned __int64)v15;\n    v12 = v15;\n    sub_405540(v15, v14, a2, a3, v16, v22, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v9 = v21;\n  return v12;\n}\n\n_BYTE *__fastcall sub_406770(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __int64 v7; // rdx\n  __m128i *v8; // rbx\n  int *v9; // r13\n  __int64 v10; // rsi\n  unsigned __int64 *v11; // rbx\n  _BYTE *v12; // r12\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rsi\n  _BYTE *v15; // rax\n  int v16; // r8d\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v20; // [rsp+10h] [rbp-48h]\n  int v21; // [rsp+18h] [rbp-40h]\n  int v22; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v8 = (__m128i *)off_60E2F8;\n  v9 = v6;\n  v21 = *v6;\n  if ( (int)a1 < 0 )\n    abort();\n  if ( dword_60E310 <= (int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_4078E0(a1, a2, v7);\n    v10 = 16LL * ((int)a1 + 1);\n    if ( off_60E2F8 == &xmmword_60E300 )\n    {\n      v8 = (__m128i *)sub_4076F0(0LL, v10);\n      off_60E2F8 = v8;\n      *v8 = _mm_load_si128((const __m128i *)&xmmword_60E300);\n    }\n    else\n    {\n      off_60E2F8 = (void *)sub_4076F0(off_60E2F8, v10);\n      v8 = (__m128i *)off_60E2F8;\n    }\n    memset(&v8[dword_60E310], 0, 16LL * ((int)a1 + 1 - dword_60E310));\n    dword_60E310 = a1 + 1;\n  }\n  v11 = (unsigned __int64 *)&v8[(int)a1];\n  v12 = (_BYTE *)v11[1];\n  v22 = *(_DWORD *)(a4 + 4) | 1;\n  v19 = *v11;\n  v13 = sub_405540(v12, *v11, a2, a3, *(_DWORD *)a4, v22, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v19 <= v13 )\n  {\n    v14 = v13 + 1;\n    *v11 = v13 + 1;\n    if ( v12 != (_BYTE *)&unk_60E780 )\n    {\n      v20 = v13 + 1;\n      free(v12);\n      v14 = v20;\n    }\n    v15 = (_BYTE *)sub_407690(v14);\n    v16 = *(_DWORD *)a4;\n    v11[1] = (unsigned __int64)v15;\n    v12 = v15;\n    sub_405540(v15, v14, a2, a3, v16, v22, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v9 = v21;\n  return v12;\n}\n"
        },
        {
            "funcName": "sub_406770",
            "funcStartAddr": "0x401e85",
            "funcEndAddr": "0x401e8a",
            "decompiledFuncCode": "_BYTE *__fastcall sub_406770(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __int64 v7; // rdx\n  __m128i *v8; // rbx\n  int *v9; // r13\n  __int64 v10; // rsi\n  unsigned __int64 *v11; // rbx\n  _BYTE *v12; // r12\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rsi\n  _BYTE *v15; // rax\n  int v16; // r8d\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v20; // [rsp+10h] [rbp-48h]\n  int v21; // [rsp+18h] [rbp-40h]\n  int v22; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v8 = (__m128i *)off_60E2F8;\n  v9 = v6;\n  v21 = *v6;\n  if ( (int)a1 < 0 )\n    abort();\n  if ( dword_60E310 <= (int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_4078E0(a1, a2, v7);\n    v10 = 16LL * ((int)a1 + 1);\n    if ( off_60E2F8 == &xmmword_60E300 )\n    {\n      v8 = (__m128i *)sub_4076F0(0LL, v10);\n      off_60E2F8 = v8;\n      *v8 = _mm_load_si128((const __m128i *)&xmmword_60E300);\n    }\n    else\n    {\n      off_60E2F8 = (void *)sub_4076F0(off_60E2F8, v10);\n      v8 = (__m128i *)off_60E2F8;\n    }\n    memset(&v8[dword_60E310], 0, 16LL * ((int)a1 + 1 - dword_60E310));\n    dword_60E310 = a1 + 1;\n  }\n  v11 = (unsigned __int64 *)&v8[(int)a1];\n  v12 = (_BYTE *)v11[1];\n  v22 = *(_DWORD *)(a4 + 4) | 1;\n  v19 = *v11;\n  v13 = sub_405540(v12, *v11, a2, a3, *(_DWORD *)a4, v22, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v19 <= v13 )\n  {\n    v14 = v13 + 1;\n    *v11 = v13 + 1;\n    if ( v12 != (_BYTE *)&unk_60E780 )\n    {\n      v20 = v13 + 1;\n      free(v12);\n      v14 = v20;\n    }\n    v15 = (_BYTE *)sub_407690(v14);\n    v16 = *(_DWORD *)a4;\n    v11[1] = (unsigned __int64)v15;\n    v12 = v15;\n    sub_405540(v15, v14, a2, a3, v16, v22, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v9 = v21;\n  return v12;\n}\n\n_BYTE *__fastcall sub_406770(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __int64 v7; // rdx\n  __m128i *v8; // rbx\n  int *v9; // r13\n  __int64 v10; // rsi\n  unsigned __int64 *v11; // rbx\n  _BYTE *v12; // r12\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rsi\n  _BYTE *v15; // rax\n  int v16; // r8d\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v20; // [rsp+10h] [rbp-48h]\n  int v21; // [rsp+18h] [rbp-40h]\n  int v22; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v8 = (__m128i *)off_60E2F8;\n  v9 = v6;\n  v21 = *v6;\n  if ( (int)a1 < 0 )\n    abort();\n  if ( dword_60E310 <= (int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_4078E0(a1, a2, v7);\n    v10 = 16LL * ((int)a1 + 1);\n    if ( off_60E2F8 == &xmmword_60E300 )\n    {\n      v8 = (__m128i *)sub_4076F0(0LL, v10);\n      off_60E2F8 = v8;\n      *v8 = _mm_load_si128((const __m128i *)&xmmword_60E300);\n    }\n    else\n    {\n      off_60E2F8 = (void *)sub_4076F0(off_60E2F8, v10);\n      v8 = (__m128i *)off_60E2F8;\n    }\n    memset(&v8[dword_60E310], 0, 16LL * ((int)a1 + 1 - dword_60E310));\n    dword_60E310 = a1 + 1;\n  }\n  v11 = (unsigned __int64 *)&v8[(int)a1];\n  v12 = (_BYTE *)v11[1];\n  v22 = *(_DWORD *)(a4 + 4) | 1;\n  v19 = *v11;\n  v13 = sub_405540(v12, *v11, a2, a3, *(_DWORD *)a4, v22, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v19 <= v13 )\n  {\n    v14 = v13 + 1;\n    *v11 = v13 + 1;\n    if ( v12 != (_BYTE *)&unk_60E780 )\n    {\n      v20 = v13 + 1;\n      free(v12);\n      v14 = v20;\n    }\n    v15 = (_BYTE *)sub_407690(v14);\n    v16 = *(_DWORD *)a4;\n    v11[1] = (unsigned __int64)v15;\n    v12 = v15;\n    sub_405540(v15, v14, a2, a3, v16, v22, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v9 = v21;\n  return v12;\n}\n"
        },
        {
            "funcName": "sub_406910",
            "funcStartAddr": "0x406910",
            "funcEndAddr": "0x406944",
            "decompiledFuncCode": "__int64 __fastcall sub_406910(__int128 *a1)\n{\n  __int128 *v1; // rbx\n  int *v2; // rax\n  int v3; // r12d\n  int *v4; // rbp\n  __int64 result; // rax\n\n  v1 = a1;\n  v2 = __errno_location();\n  v3 = *v2;\n  v4 = v2;\n  if ( !a1 )\n    v1 = &xmmword_60E880;\n  result = sub_407890(v1, 0x38uLL);\n  *v4 = v3;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_406A00",
            "funcStartAddr": "0x406a00",
            "funcEndAddr": "0x406a72",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_406A00(_BYTE *a1, unsigned __int64 a2, __int64 a3, unsigned __int64 a4, __int128 *a5)\n{\n  __int128 *v6; // rbx\n  int *v7; // rax\n  int v8; // r12d\n  int *v9; // rbp\n  unsigned __int64 result; // rax\n\n  v6 = a5;\n  if ( !a5 )\n    v6 = &xmmword_60E880;\n  v7 = __errno_location();\n  v8 = *v7;\n  v9 = v7;\n  result = sub_405540(\n             a1,\n             a2,\n             a3,\n             a4,\n             *(_DWORD *)v6,\n             *((_DWORD *)v6 + 1),\n             (__int64)v6 + 8,\n             *((char **)v6 + 5),\n             *((char **)v6 + 6));\n  *v9 = v8;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_406A80",
            "funcStartAddr": "0x406a80",
            "funcEndAddr": "0x406b61",
            "decompiledFuncCode": "_BYTE *__fastcall sub_406A80(__int64 a1, unsigned __int64 a2, unsigned __int64 *a3, __int128 *a4)\n{\n  __int128 *v5; // rbx\n  int *v6; // r13\n  int v7; // ebp\n  int v9; // [rsp+Ch] [rbp-5Ch]\n  _BYTE *v10; // [rsp+10h] [rbp-58h]\n  unsigned __int64 v11; // [rsp+28h] [rbp-40h]\n\n  v5 = a4;\n  if ( !a4 )\n    v5 = &xmmword_60E880;\n  v6 = __errno_location();\n  v7 = *((_DWORD *)v5 + 1) | (a3 == 0LL);\n  v9 = *v6;\n  v11 = sub_405540(0LL, 0LL, a1, a2, *(_DWORD *)v5, v7, (__int64)v5 + 8, *((char **)v5 + 5), *((char **)v5 + 6));\n  v10 = (_BYTE *)sub_407690(v11 + 1);\n  sub_405540(v10, v11 + 1, a1, a2, *(_DWORD *)v5, v7, (__int64)v5 + 8, *((char **)v5 + 5), *((char **)v5 + 6));\n  *v6 = v9;\n  if ( a3 )\n    *a3 = v11;\n  return v10;\n}\n"
        },
        {
            "funcName": "sub_406B80",
            "funcStartAddr": "0x406b80",
            "funcEndAddr": "0x406c15",
            "decompiledFuncCode": "void sub_406B80()\n{\n  __int128 *v0; // r12\n  void **v1; // rbx\n  void **v2; // rbp\n  void *v3; // rdi\n  void *v4; // rdi\n\n  v0 = (__int128 *)off_60E2F8;\n  if ( dword_60E310 > 1 )\n  {\n    v1 = (void **)((char *)off_60E2F8 + 24);\n    v2 = (void **)((char *)off_60E2F8 + 16 * (unsigned int)(dword_60E310 - 2) + 40);\n    do\n    {\n      v3 = *v1;\n      v1 += 2;\n      free(v3);\n    }\n    while ( v1 != v2 );\n  }\n  v4 = (void *)*((_QWORD *)v0 + 1);\n  if ( v4 != &unk_60E780 )\n  {\n    free(v4);\n    *(_QWORD *)&xmmword_60E300 = 256LL;\n    *((_QWORD *)&xmmword_60E300 + 1) = &unk_60E780;\n  }\n  if ( v0 != &xmmword_60E300 )\n  {\n    free(v0);\n    off_60E2F8 = &xmmword_60E300;\n  }\n  dword_60E310 = 1;\n}\n"
        },
        {
            "funcName": "sub_406C90",
            "funcStartAddr": "0x401e8a",
            "funcEndAddr": "0x401e8f",
            "decompiledFuncCode": "_BYTE *__fastcall sub_406C90(__int64 a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_406770(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_406C90(__int64 a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_406770(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_406C90",
            "funcStartAddr": "0x401e8a",
            "funcEndAddr": "0x401e8f",
            "decompiledFuncCode": "_BYTE *__fastcall sub_406C90(__int64 a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_406770(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_406C90(__int64 a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_406770(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_406D00",
            "funcStartAddr": "0x401e8f",
            "funcEndAddr": "0x401e94",
            "decompiledFuncCode": "_BYTE *__fastcall sub_406D00(__int64 a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_406770(a1, a3, a4, (__int64)v5);\n}\n\n_BYTE *__fastcall sub_406D00(__int64 a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_406770(a1, a3, a4, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_406D00",
            "funcStartAddr": "0x401e8f",
            "funcEndAddr": "0x401e94",
            "decompiledFuncCode": "_BYTE *__fastcall sub_406D00(__int64 a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_406770(a1, a3, a4, (__int64)v5);\n}\n\n_BYTE *__fastcall sub_406D00(__int64 a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_406770(a1, a3, a4, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_406D70",
            "funcStartAddr": "0x406d70",
            "funcEndAddr": "0x406d7c",
            "decompiledFuncCode": "_BYTE *__fastcall sub_406D70(int a1, __int64 a2)\n{\n  return sub_406C90(0LL, a1, a2);\n}\n"
        },
        {
            "funcName": "sub_406D90",
            "funcStartAddr": "0x406d90",
            "funcEndAddr": "0x406e00",
            "decompiledFuncCode": "_BYTE *__fastcall sub_406D90(__int64 a1, unsigned __int64 a2, unsigned __int8 a3)\n{\n  _DWORD *v3; // r8\n  __int128 v5[3]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+30h] [rbp-18h]\n\n  v6 = qword_60E8B0;\n  v5[0] = (__int128)_mm_load_si128((const __m128i *)&xmmword_60E880);\n  v5[1] = (__int128)_mm_load_si128((const __m128i *)&xmmword_60E890);\n  v3 = (_DWORD *)v5 + (a3 >> 5) + 2;\n  v5[2] = (__int128)_mm_load_si128((const __m128i *)&xmmword_60E8A0);\n  *v3 ^= (((*v3 >> (a3 & 0x1F)) & 1) == 0) << (a3 & 0x1F);\n  return sub_406770(0LL, a1, a2, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_406E10",
            "funcStartAddr": "0x406e10",
            "funcEndAddr": "0x406e21",
            "decompiledFuncCode": "_BYTE *__fastcall sub_406E10(__int64 a1)\n{\n  return sub_406D90(a1, 0xFFFFFFFFFFFFFFFFLL, 0x3Au);\n}\n"
        },
        {
            "funcName": "sub_406E40",
            "funcStartAddr": "0x401e94",
            "funcEndAddr": "0x401e99",
            "decompiledFuncCode": "_BYTE *__fastcall sub_406E40(__int64 a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_406770(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_406E40(__int64 a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_406770(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_406E40",
            "funcStartAddr": "0x401e94",
            "funcEndAddr": "0x401e99",
            "decompiledFuncCode": "_BYTE *__fastcall sub_406E40(__int64 a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_406770(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_406E40(__int64 a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_406770(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_406EB0",
            "funcStartAddr": "0x406eb0",
            "funcEndAddr": "0x406f1c",
            "decompiledFuncCode": "_BYTE *__fastcall sub_406EB0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, unsigned __int64 a5)\n{\n  __int128 v6[2]; // [rsp+0h] [rbp-48h] BYREF\n  __m128i si128; // [rsp+20h] [rbp-28h]\n  __int64 v8; // [rsp+30h] [rbp-18h]\n\n  v6[0] = (__int128)_mm_load_si128((const __m128i *)&xmmword_60E880);\n  v6[1] = (__int128)_mm_load_si128((const __m128i *)&xmmword_60E890);\n  si128 = _mm_load_si128((const __m128i *)&xmmword_60E8A0);\n  v8 = qword_60E8B0;\n  LODWORD(v6[0]) = 10;\n  if ( !a2 || !a3 )\n    abort();\n  si128.m128i_i64[1] = a2;\n  v8 = a3;\n  return sub_406770(a1, a4, a5, (__int64)v6);\n}\n"
        },
        {
            "funcName": "sub_406FC0",
            "funcStartAddr": "0x406fc0",
            "funcEndAddr": "0x406fd6",
            "decompiledFuncCode": "_BYTE *__fastcall sub_406FC0(__int64 a1)\n{\n  return sub_406770(0LL, a1, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_60E2C0);\n}\n"
        },
        {
            "funcName": "sub_406FE0",
            "funcStartAddr": "0x406fe0",
            "funcEndAddr": "0x40703e",
            "decompiledFuncCode": "ssize_t __fastcall sub_406FE0(int fd, void *buf, size_t nbytes)\n{\n  ssize_t v4; // rbp\n  int v5; // eax\n\n  while ( 1 )\n  {\n    v4 = read(fd, buf, nbytes);\n    if ( v4 >= 0 )\n      break;\n    v5 = *__errno_location();\n    if ( v5 != 4 )\n    {\n      if ( nbytes <= 0x7FFFE000 || v5 != 22 )\n        return v4;\n      nbytes = 2147475456LL;\n    }\n  }\n  return v4;\n}\n"
        },
        {
            "funcName": "sub_407040",
            "funcStartAddr": "0x407040",
            "funcEndAddr": "0x40709e",
            "decompiledFuncCode": "ssize_t __fastcall sub_407040(int fd, void *buf, size_t n)\n{\n  ssize_t v4; // rbp\n  int v5; // eax\n\n  while ( 1 )\n  {\n    v4 = write(fd, buf, n);\n    if ( v4 >= 0 )\n      break;\n    v5 = *__errno_location();\n    if ( v5 != 4 )\n    {\n      if ( v5 != 22 || n <= 0x7FFFE000 )\n        return v4;\n      n = 2147475456LL;\n    }\n  }\n  return v4;\n}\n"
        },
        {
            "funcName": "sub_4070A0",
            "funcStartAddr": "0x4070a0",
            "funcEndAddr": "0x4070ee",
            "decompiledFuncCode": "__int64 __fastcall sub_4070A0(unsigned int fd)\n{\n  __int64 result; // rax\n  unsigned int v2; // r12d\n  int *v3; // rax\n  int v4; // r13d\n  int *v5; // rbp\n\n  if ( fd > 2 )\n    return fd;\n  v2 = sub_409740();\n  v3 = __errno_location();\n  v4 = *v3;\n  v5 = v3;\n  close(fd);\n  result = v2;\n  *v5 = v4;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4070F0",
            "funcStartAddr": "0x401e99",
            "funcEndAddr": "0x401e9e",
            "decompiledFuncCode": "__int64 __fastcall sub_4070F0(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v14 = *a5;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *a5;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *a5;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = a5[3];\n      v21 = *a5;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = a5[3];\n      v21 = *a5;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 7LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 8LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *a5;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *a5;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n\n__int64 __fastcall sub_4070F0(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v14 = *a5;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *a5;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *a5;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = a5[3];\n      v21 = *a5;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = a5[3];\n      v21 = *a5;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 7LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 8LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *a5;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *a5;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n"
        },
        {
            "funcName": "sub_4070F0",
            "funcStartAddr": "0x401e99",
            "funcEndAddr": "0x401e9e",
            "decompiledFuncCode": "__int64 __fastcall sub_4070F0(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v14 = *a5;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *a5;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *a5;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = a5[3];\n      v21 = *a5;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = a5[3];\n      v21 = *a5;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 7LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 8LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *a5;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *a5;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n\n__int64 __fastcall sub_4070F0(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v14 = *a5;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *a5;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *a5;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = a5[3];\n      v21 = *a5;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = a5[3];\n      v21 = *a5;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 7LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 8LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *a5;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *a5;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n"
        },
        {
            "funcName": "sub_4074F0",
            "funcStartAddr": "0x4074f0",
            "funcEndAddr": "0x407550",
            "decompiledFuncCode": "__int64 __fastcall sub_4074F0(FILE *a1, __int64 a2, __int64 a3, __int64 a4, int *a5)\n{\n  __int64 i; // r9\n  __int64 *v6; // r10\n  __int64 v7; // rax\n  unsigned int v8; // eax\n  __int64 *v9; // r10\n  __int64 v10; // rax\n  __int64 v12[11]; // [rsp+0h] [rbp-58h] BYREF\n\n  for ( i = 0LL; i != 10; ++i )\n  {\n    v8 = *a5;\n    if ( (unsigned int)*a5 <= 0x2F )\n    {\n      v6 = (__int64 *)(*((_QWORD *)a5 + 2) + v8);\n      *a5 = v8 + 8;\n      v7 = *v6;\n      v12[i] = *v6;\n      if ( !v7 )\n        return sub_4070F0(a1, a2, a3, a4, v12, i);\n      continue;\n    }\n    v9 = (__int64 *)*((_QWORD *)a5 + 1);\n    *((_QWORD *)a5 + 1) = v9 + 1;\n    v10 = *v9;\n    v12[i] = *v9;\n    if ( !v10 )\n      break;\n  }\n  return sub_4070F0(a1, a2, a3, a4, v12, i);\n}\n"
        },
        {
            "funcName": "sub_407550",
            "funcStartAddr": "0x407550",
            "funcEndAddr": "0x40760c",
            "decompiledFuncCode": "__int64 __fastcall sub_407550(FILE *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, char a7)\n{\n  char *v7; // r10\n  unsigned int v8; // r8d\n  __int64 i; // r9\n  __int64 v10; // rax\n  __int64 v11; // rax\n  __int64 *v12; // rax\n  __int64 v13; // rax\n  __int64 v15[17]; // [rsp+20h] [rbp-88h] BYREF\n\n  v15[14] = a5;\n  v7 = &a7;\n  v8 = 32;\n  v15[15] = a6;\n  for ( i = 0LL; i != 10; ++i )\n  {\n    if ( v8 <= 0x2F )\n    {\n      v10 = v8;\n      v8 += 8;\n      v11 = *(__int64 *)((char *)&v15[10] + v10);\n      v15[i] = v11;\n      if ( !v11 )\n        return sub_4070F0(a1, a2, a3, a4, v15, i);\n      continue;\n    }\n    v12 = (__int64 *)v7;\n    v7 += 8;\n    v13 = *v12;\n    v15[i] = v13;\n    if ( !v13 )\n      break;\n  }\n  return sub_4070F0(a1, a2, a3, a4, v15, i);\n}\n"
        },
        {
            "funcName": "sub_407610",
            "funcStartAddr": "0x407610",
            "funcEndAddr": "0x407684",
            "decompiledFuncCode": "int sub_407610()\n{\n  char *v0; // rax\n  char *v1; // rax\n  FILE *v2; // rbx\n  char *v3; // rax\n\n  v0 = dcgettext(0LL, \"\\nReport bugs to: %s\\n\", 5);\n  __printf_chk(1LL, v0, \"bug-coreutils@gnu.org\");\n  v1 = dcgettext(0LL, \"%s home page: <%s>\\n\", 5);\n  __printf_chk(1LL, v1, &unk_409B0F);\n  v2 = stdout;\n  v3 = dcgettext(0LL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5);\n  return fputs_unlocked(v3, v2);\n}\n"
        },
        {
            "funcName": "sub_407690",
            "funcStartAddr": "0x407690",
            "funcEndAddr": "0x4076aa",
            "decompiledFuncCode": "void *__fastcall sub_407690(size_t a1, __int64 a2)\n{\n  void *result; // rax\n  __int64 v3; // rdx\n\n  result = malloc(a1);\n  if ( !result )\n  {\n    if ( a1 )\n      sub_4078E0(a1, a2, v3);\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4076E0",
            "funcStartAddr": "0x4076e0",
            "funcEndAddr": "0x4076e2",
            "decompiledFuncCode": "// attributes: thunk\nvoid *__fastcall sub_4076E0(size_t a1, __int64 a2)\n{\n  return sub_407690(a1, a2);\n}\n"
        },
        {
            "funcName": "sub_4076F0",
            "funcStartAddr": "0x4076f0",
            "funcEndAddr": "0x407726",
            "decompiledFuncCode": "void *__fastcall sub_4076F0(void *a1, size_t a2)\n{\n  void *result; // rax\n  __int64 v3; // rdx\n\n  if ( !a2 && a1 )\n  {\n    free(a1);\n    return 0LL;\n  }\n  else\n  {\n    result = realloc(a1, a2);\n    if ( !result )\n    {\n      if ( a2 )\n        sub_4078E0(a1, a2, v3);\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_407840",
            "funcStartAddr": "0x407840",
            "funcEndAddr": "0x407857",
            "decompiledFuncCode": "void *__fastcall sub_407840(size_t n, __int64 a2)\n{\n  void *v2; // rax\n\n  v2 = sub_407690(n, a2);\n  return memset(v2, 0, n);\n}\n"
        },
        {
            "funcName": "sub_407860",
            "funcStartAddr": "0x407860",
            "funcEndAddr": "0x40788e",
            "decompiledFuncCode": "__int64 __fastcall sub_407860(unsigned __int64 a1, unsigned __int64 a2)\n{\n  unsigned __int128 v2; // rax\n\n  v2 = a2 * (unsigned __int128)a1;\n  BYTE8(v2) = *((_QWORD *)&v2 + 1) != 0LL;\n  if ( (v2 & 0x8000000000000000LL) != 0LL\n    || (*((_QWORD *)&v2 + 1) = BYTE8(v2), !is_mul_ok(a2, a1))\n    || (*(_QWORD *)&v2 = calloc(a1, a2), !(_QWORD)v2) )\n  {\n    sub_4078E0(a1, a2, *((_QWORD *)&v2 + 1));\n  }\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_407890",
            "funcStartAddr": "0x407890",
            "funcEndAddr": "0x4078b8",
            "decompiledFuncCode": "void *__fastcall sub_407890(void *src, size_t n)\n{\n  void *v2; // rax\n\n  v2 = sub_407690(n, n);\n  return memcpy(v2, src, n);\n}\n"
        },
        {
            "funcName": "sub_4078C0",
            "funcStartAddr": "0x4078c0",
            "funcEndAddr": "0x4078d3",
            "decompiledFuncCode": "void *__fastcall sub_4078C0(char *src)\n{\n  size_t v1; // rax\n\n  v1 = strlen(src);\n  return sub_407890(src, v1 + 1);\n}\n"
        },
        {
            "funcName": "sub_4078E0",
            "funcStartAddr": "0x4078e0",
            "funcEndAddr": "0x407911",
            "decompiledFuncCode": "void __noreturn sub_4078E0()\n{\n  char *v0; // rax\n\n  v0 = dcgettext(0LL, \"memory exhausted\", 5);\n  error(status, 0, \"%s\", v0);\n  abort();\n}\n"
        },
        {
            "funcName": "sub_407920",
            "funcStartAddr": "0x407920",
            "funcEndAddr": "0x4079f0",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_407920(\n        char *a1,\n        __int64 a2,\n        unsigned __int64 a3,\n        unsigned __int64 a4,\n        __int64 a5,\n        __int64 a6,\n        int a7)\n{\n  int v10; // ebx\n  int v11; // eax\n  unsigned __int64 v12; // rbp\n  int *v13; // r14\n  _BYTE *v14; // rax\n  int v15; // esi\n  int v17; // ebp\n  int *v18; // rax\n  unsigned __int64 v19; // [rsp+8h] [rbp-40h]\n\n  v10 = a7;\n  v11 = sub_407A20(a1);\n  if ( v11 )\n  {\n    v17 = v11;\n    v18 = __errno_location();\n    v13 = v18;\n    if ( v17 == 1 )\n    {\n      *v18 = 75;\n    }\n    else if ( v17 == 3 )\n    {\n      *v18 = 0;\n    }\n  }\n  else\n  {\n    v12 = v19;\n    if ( v19 >= a3 && v19 <= a4 )\n      return v12;\n    v13 = __errno_location();\n    *v13 = v19 < 0x40000000 ? 34 : 75;\n  }\n  v14 = sub_406FC0((__int64)a1);\n  v15 = *v13;\n  if ( *v13 == 22 )\n    v15 = 0;\n  if ( !a7 )\n    v10 = 1;\n  error(v10, v15, \"%s: %s\", a6, v14);\n  return v19;\n}\n"
        },
        {
            "funcName": "sub_4079F0",
            "funcStartAddr": "0x4079f0",
            "funcEndAddr": "0x407a11",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_4079F0(\n        char *a1,\n        unsigned __int64 a2,\n        unsigned __int64 a3,\n        __int64 a4,\n        __int64 a5,\n        int a6)\n{\n  return sub_407920(a1, 10LL, a2, a3, a4, a5, a6);\n}\n"
        },
        {
            "funcName": "sub_407A20",
            "funcStartAddr": "0x407a20",
            "funcEndAddr": "0x407e54",
            "decompiledFuncCode": "__int64 __fastcall sub_407A20(char *nptr, char **a2, unsigned int a3, __int64 *a4, const char *a5)\n{\n  char **p_endptr; // r15\n  int *v8; // rax\n  int *v9; // r12\n  unsigned __int8 v10; // bl\n  const unsigned __int16 *v11; // rsi\n  char *v12; // rax\n  __int64 v13; // rbx\n  unsigned int v14; // ebp\n  int v15; // r12d\n  char *v17; // rax\n  char *v18; // r8\n  __int64 v19; // rax\n  char *v20; // rax\n  char v21; // al\n  int v22; // esi\n  unsigned __int64 v23; // rdx\n  char *v24; // r8\n  unsigned __int64 v25; // kr30_8\n  char *v26; // rax\n  int v27; // edi\n  int v28; // r9d\n  bool v29; // of\n  int v30; // edi\n  int v31; // edi\n  int v32; // edi\n  int v33; // edi\n  char *basea; // [rsp+0h] [rbp-58h]\n  char *baseb; // [rsp+0h] [rbp-58h]\n  char *v37; // [rsp+8h] [rbp-50h]\n  char *endptr; // [rsp+18h] [rbp-40h] BYREF\n\n  if ( a3 > 0x24 )\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 0x60u, \"xstrtoumax\");\n  p_endptr = a2;\n  if ( !a2 )\n    p_endptr = &endptr;\n  v8 = __errno_location();\n  *v8 = 0;\n  v9 = v8;\n  v10 = *nptr;\n  v11 = *__ctype_b_loc();\n  v12 = nptr;\n  while ( (v11[v10] & 0x2000) != 0 )\n    v10 = *++v12;\n  if ( v10 == 45 )\n    return 4;\n  v13 = __strtoul_internal(nptr, p_endptr, a3, 0);\n  if ( *p_endptr == nptr )\n  {\n    basea = *p_endptr;\n    if ( a5 )\n    {\n      v15 = (unsigned __int8)*nptr;\n      if ( (_BYTE)v15 )\n      {\n        v14 = 0;\n        v13 = 1LL;\n        v17 = strchr(a5, (char)v15);\n        v18 = basea;\n        if ( v17 )\n          goto LABEL_20;\n      }\n    }\n    return 4;\n  }\n  if ( *v9 )\n  {\n    v14 = 1;\n    if ( *v9 == 34 )\n      goto LABEL_11;\n    return 4;\n  }\n  v14 = 0;\nLABEL_11:\n  if ( a5 )\n  {\n    v15 = (unsigned __int8)**p_endptr;\n    if ( (_BYTE)v15 )\n    {\n      baseb = *p_endptr;\n      v26 = strchr(a5, (char)v15);\n      v18 = baseb;\n      if ( !v26 )\n      {\nLABEL_40:\n        *a4 = v13;\n        v14 |= 2u;\n        return v14;\n      }\nLABEL_20:\n      if ( (unsigned __int8)(v15 - 69) > 0x2Fu\n        || (v19 = 0x814400308945LL, !_bittest64(&v19, (unsigned int)(v15 - 69)))\n        || (v37 = v18, v20 = strchr(a5, 48), v18 = v37, !v20) )\n      {\nLABEL_27:\n        v22 = 1;\n        v23 = 1024LL;\n        goto LABEL_28;\n      }\n      v21 = v37[1];\n      if ( v21 != 68 )\n      {\n        if ( v21 == 105 )\n        {\n          v23 = 1024LL;\n          v22 = 2 * (v37[2] == 66) + 1;\nLABEL_28:\n          switch ( (char)v15 )\n          {\n            case 'B':\n              if ( (unsigned __int64)v13 >> 54 )\n                goto LABEL_38;\n              v13 <<= 10;\n              break;\n            case 'E':\n              goto LABEL_71;\n            case 'G':\n            case 'g':\n              goto LABEL_77;\n            case 'K':\n            case 'k':\n              goto LABEL_37;\n            case 'M':\n            case 'm':\n              goto LABEL_30;\n            case 'P':\n              goto LABEL_65;\n            case 'T':\n            case 't':\n              goto LABEL_59;\n            case 'Y':\n              goto LABEL_53;\n            case 'Z':\n              goto LABEL_47;\n            case 'b':\n              goto LABEL_44;\n            case 'c':\n              break;\n            case 'w':\n              if ( v13 < 0 )\n                goto LABEL_38;\n              v13 *= 2LL;\n              break;\n            default:\n              goto LABEL_40;\n          }\nLABEL_33:\n          v24 = &v18[v22];\n          *p_endptr = v24;\n          if ( *v24 )\n            v14 |= 2u;\n          goto LABEL_13;\n        }\n        if ( v21 != 66 )\n        {\n          switch ( (char)v15 )\n          {\n            case 'E':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_71:\n              v33 = 6;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v33;\n              }\n              while ( v33 );\n              goto LABEL_51;\n            case 'F':\n            case 'H':\n            case 'I':\n            case 'J':\n            case 'L':\n            case 'N':\n            case 'O':\n            case 'Q':\n            case 'R':\n            case 'S':\n            case 'U':\n            case 'V':\n            case 'W':\n            case 'X':\n            case '[':\n            case '\\\\':\n            case ']':\n            case '^':\n            case '_':\n            case '`':\n            case 'a':\n            case 'd':\n            case 'e':\n            case 'f':\n            case 'h':\n            case 'i':\n            case 'j':\n            case 'l':\n            case 'n':\n            case 'o':\n            case 'p':\n            case 'q':\n            case 'r':\n            case 's':\n              goto LABEL_40;\n            case 'G':\n            case 'g':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_77:\n              if ( is_mul_ok((int)v23, v13)\n                && is_mul_ok((int)v23, (int)v23 * v13)\n                && is_mul_ok((int)v23, (int)v23 * (int)v23 * v13) )\n              {\n                v13 *= (int)v23 * (int)v23 * (__int64)(int)v23;\n              }\n              else\n              {\n                v13 = -1LL;\n                v14 |= 1u;\n              }\n              goto LABEL_33;\n            case 'K':\n            case 'k':\n              v22 = 1;\n              v23 = 1024LL;\nLABEL_37:\n              v25 = v13;\n              v13 *= v23;\n              if ( is_mul_ok(v23, v25) )\n                goto LABEL_33;\n              goto LABEL_38;\n            case 'M':\n            case 'm':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_30:\n              if ( !is_mul_ok((int)v23, v13) || !is_mul_ok((int)v23, (int)v23 * v13) )\n                goto LABEL_38;\n              v13 *= (int)v23 * (__int64)(int)v23;\n              break;\n            case 'P':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_65:\n              v32 = 5;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v32;\n              }\n              while ( v32 );\n              goto LABEL_51;\n            case 'T':\n            case 't':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_59:\n              v31 = 4;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v31;\n              }\n              while ( v31 );\n              goto LABEL_51;\n            case 'Y':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_53:\n              v30 = 8;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v30;\n              }\n              while ( v30 );\n              goto LABEL_51;\n            case 'Z':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_47:\n              v27 = 7;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v27;\n              }\n              while ( v27 );\nLABEL_51:\n              v14 |= v28;\n              break;\n            case 'b':\n              v22 = 1;\nLABEL_44:\n              if ( (unsigned __int64)v13 >> 55 )\n              {\nLABEL_38:\n                v14 = 1;\n                v13 = -1LL;\n              }\n              else\n              {\n                v13 <<= 9;\n              }\n              break;\n            case 'c':\n              v22 = 1;\n              goto LABEL_33;\n            default:\n              goto LABEL_27;\n          }\n          goto LABEL_33;\n        }\n      }\n      v22 = 2;\n      v23 = 1000LL;\n      goto LABEL_28;\n    }\n  }\nLABEL_13:\n  *a4 = v13;\n  return v14;\n}\n"
        },
        {
            "funcName": "sub_407E60",
            "funcStartAddr": "0x407e60",
            "funcEndAddr": "0x407edb",
            "decompiledFuncCode": "int __fastcall sub_407E60(FILE *stream)\n{\n  int *v1; // rax\n  int v2; // r12d\n  int *v3; // rbp\n  int result; // eax\n  int v5; // eax\n\n  if ( fileno(stream) < 0 )\n    return fclose(stream);\n  if ( __freading(stream) )\n  {\n    v5 = fileno(stream);\n    if ( lseek(v5, 0LL, 1) == -1 )\n      return fclose(stream);\n  }\n  if ( !(unsigned int)sub_407EE0(stream) )\n    return fclose(stream);\n  v1 = __errno_location();\n  v2 = *v1;\n  v3 = v1;\n  result = fclose(stream);\n  if ( v2 )\n  {\n    *v3 = v2;\n    return -1;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_407EE0",
            "funcStartAddr": "0x407ee0",
            "funcEndAddr": "0x407f20",
            "decompiledFuncCode": "int __fastcall sub_407EE0(FILE *stream)\n{\n  if ( !stream || !__freading(stream) || (stream->_flags & 0x100) == 0 )\n    return fflush(stream);\n  sub_407F20(stream, 0LL, 1LL);\n  return fflush(stream);\n}\n"
        },
        {
            "funcName": "sub_407F20",
            "funcStartAddr": "0x407f20",
            "funcEndAddr": "0x407f77",
            "decompiledFuncCode": "int __fastcall sub_407F20(FILE *a1, __off_t a2, int a3)\n{\n  __off_t v3; // rax\n  int v5; // eax\n\n  if ( a1->_IO_read_end == a1->_IO_read_ptr && a1->_IO_write_ptr == a1->_IO_write_base && !a1->_IO_save_base )\n  {\n    v5 = fileno(a1);\n    v3 = lseek(v5, a2, a3);\n    if ( v3 != -1 )\n    {\n      a1->_flags &= ~0x10u;\n      a1->_offset = v3;\n      LODWORD(v3) = 0;\n    }\n  }\n  else\n  {\n    LODWORD(v3) = fseeko(a1, a2, a3);\n  }\n  return v3;\n}\n"
        },
        {
            "funcName": "sub_407F80",
            "funcStartAddr": "0x407f80",
            "funcEndAddr": "0x40805f",
            "decompiledFuncCode": "__int64 __fastcall sub_407F80(__int64 a1, int *a2)\n{\n  __int64 v2; // r11\n  int v3; // r12d\n  int v4; // ebp\n  __int64 v5; // rbx\n  int v6; // r9d\n  int v7; // r10d\n  int v8; // r8d\n  int v9; // r14d\n  int v10; // edx\n  __int64 *v11; // rax\n  __int64 *v12; // r13\n  __int64 v13; // rdx\n  __int64 v14; // rcx\n  __int64 result; // rax\n  __int64 *v16; // rax\n  __int64 v17; // rdx\n  __int64 v18; // rcx\n\n  v2 = a1 + 8;\n  v3 = a2[11];\n  v4 = *a2;\n  v5 = a2[12];\n  v6 = v3;\n  v7 = *a2;\n  v8 = a2[12];\nLABEL_2:\n  if ( v7 > v8 )\n  {\n    while ( v6 < v8 )\n    {\n      v9 = v7 - v8;\n      v10 = v8 - v6;\n      if ( v7 - v8 <= v8 - v6 )\n      {\n        v16 = (__int64 *)(a1 + 8LL * v6);\n        v17 = v5 - v6;\n        do\n        {\n          v18 = *v16;\n          *v16 = v16[v17];\n          v16[v17] = v18;\n          ++v16;\n        }\n        while ( v16 != (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v9 - 1))) );\n        v6 += v9;\n        goto LABEL_2;\n      }\n      v7 -= v10;\n      v11 = (__int64 *)(a1 + 8LL * v6);\n      v12 = (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v10 - 1)));\n      v13 = v7 - (__int64)v6;\n      do\n      {\n        v14 = *v11;\n        *v11 = v11[v13];\n        v11[v13] = v14;\n        ++v11;\n      }\n      while ( v12 != v11 );\n      if ( v7 <= v8 )\n        break;\n    }\n  }\n  a2[12] = v4;\n  result = (unsigned int)(v4 - v8);\n  a2[11] = result + v3;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_408060",
            "funcStartAddr": "0x408060",
            "funcEndAddr": "0x40867c",
            "decompiledFuncCode": "__int64 __fastcall sub_408060(\n        int a1,\n        __int64 *a2,\n        const char *a3,\n        char **a4,\n        _DWORD *a5,\n        int a6,\n        int *a7,\n        int a8,\n        __int64 a9)\n{\n  const char *v9; // r14\n  char *v10; // rbp\n  size_t v11; // r13\n  char **v12; // rbx\n  __int64 v13; // r12\n  const char *v14; // r15\n  const char *v15; // rdi\n  __int64 v16; // r15\n  char **v17; // rbp\n  char *v18; // rdx\n  __int64 result; // rax\n  int v20; // edx\n  int v21; // eax\n  int v22; // ecx\n  char *v23; // rdx\n  __int64 v24; // rbx\n  char *v25; // rax\n  __int64 v26; // rbx\n  char *v27; // rax\n  __int64 v28; // rbp\n  char *v29; // rax\n  __int64 v30; // rbp\n  char *v31; // rax\n  FILE *v32; // rdi\n  char **v33; // rbx\n  _BYTE *v34; // rbp\n  __int64 v35; // r12\n  __int64 v36; // rbp\n  char *v37; // rax\n  char *s1; // [rsp+10h] [rbp-78h]\n  char *s1a; // [rsp+10h] [rbp-78h]\n  _BYTE *ptr; // [rsp+18h] [rbp-70h]\n  int v45; // [rsp+38h] [rbp-50h]\n  char v46; // [rsp+3Fh] [rbp-49h]\n  int v48; // [rsp+44h] [rbp-44h]\n  int v49; // [rsp+48h] [rbp-40h]\n\n  v9 = (const char *)*((_QWORD *)a7 + 4);\n  v10 = (char *)v9;\n  v46 = *v9;\n  if ( *v9 == 61 || !*v9 )\n  {\n    v11 = 0LL;\n  }\n  else\n  {\n    do\n      ++v10;\n    while ( *v10 && *v10 != 61 );\n    v11 = v10 - v9;\n  }\n  v12 = a4;\n  v13 = 0LL;\n  s1 = *a4;\n  v14 = *a4;\n  if ( !*a4 )\n  {\nLABEL_24:\n    if ( !a6 || *(_BYTE *)(a2[*a7] + 1) == 45 || (v18 = strchr(a3, v46), result = 0xFFFFFFFFLL, !v18) )\n    {\n      if ( a8 )\n      {\n        v24 = *a2;\n        v25 = dcgettext(0LL, \"%s: unrecognized option '%s%s'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v25, v24);\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n      ++*a7;\n      a7[2] = 0;\n      return 63LL;\n    }\n    return result;\n  }\n  while ( 1 )\n  {\n    if ( !strncmp(v14, v9, v11) && strlen(v14) == v11 )\n      goto LABEL_31;\n    v12 += 4;\n    v14 = *v12;\n    if ( !*v12 )\n      break;\n    v13 = (int)v13 + 1;\n  }\n  v12 = 0LL;\n  v48 = -1;\n  v15 = s1;\n  v16 = 0LL;\n  v45 = 0;\n  v49 = 0;\n  ptr = 0LL;\n  s1a = v10;\n  v17 = a4;\n  do\n  {\n    if ( strncmp(v15, v9, v11) )\n      goto LABEL_20;\n    if ( v12 )\n    {\n      if ( (a6\n         || *((_DWORD *)v12 + 2) != *((_DWORD *)v17 + 2)\n         || v12[2] != v17[2]\n         || *((_DWORD *)v12 + 6) != *((_DWORD *)v17 + 6))\n        && !v45 )\n      {\n        if ( a8 )\n        {\n          if ( ptr )\n            goto LABEL_19;\n          ptr = calloc((int)v13 + 1, 1uLL);\n          if ( ptr )\n          {\n            v49 = 1;\n            ptr[v48] = 1;\nLABEL_19:\n            ptr[v16] = 1;\n            goto LABEL_20;\n          }\n          v45 = 1;\n        }\n        else\n        {\n          v45 = 1;\n          if ( ptr )\n            goto LABEL_19;\n        }\n      }\n    }\n    else\n    {\n      v48 = v16;\n      v12 = v17;\n    }\nLABEL_20:\n    v17 += 4;\n    v15 = *v17;\n    ++v16;\n  }\n  while ( *v17 );\n  v10 = s1a;\n  if ( ptr || v45 )\n  {\n    if ( a8 )\n    {\n      if ( v45 )\n      {\n        v26 = *a2;\n        v27 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v27, v26);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n      else\n      {\n        flockfile(stderr);\n        v30 = *a2;\n        v31 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5);\n        __fprintf_chk(stderr, 1LL, v31, v30);\n        v32 = stderr;\n        v33 = a4;\n        v34 = ptr;\n        v35 = (__int64)&ptr[v13 + 1];\n        do\n        {\n          if ( *v34 )\n          {\n            __fprintf_chk(v32, 1LL, \" '%s%s'\", a9);\n            v32 = stderr;\n          }\n          ++v34;\n          v33 += 4;\n        }\n        while ( (_BYTE *)v35 != v34 );\n        fputc(10, v32);\n        funlockfile(stderr);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n    }\n    if ( v49 )\n      free(ptr);\n    *((_QWORD *)a7 + 4) = &v9[strlen(v9)];\n    ++*a7;\n    a7[2] = 0;\n    return 63LL;\n  }\n  else\n  {\n    if ( !v12 )\n      goto LABEL_24;\n    LODWORD(v13) = v48;\nLABEL_31:\n    v20 = *a7;\n    *((_QWORD *)a7 + 4) = 0LL;\n    v21 = v20 + 1;\n    *a7 = v20 + 1;\n    v22 = *((_DWORD *)v12 + 2);\n    if ( *v10 )\n    {\n      if ( v22 )\n      {\n        *((_QWORD *)a7 + 2) = v10 + 1;\n        goto LABEL_33;\n      }\n      if ( a8 )\n      {\n        v28 = *a2;\n        v29 = dcgettext(0LL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v29, v28);\n      }\n      a7[2] = *((_DWORD *)v12 + 6);\n      return 63LL;\n    }\n    else\n    {\n      if ( v22 != 1 )\n        goto LABEL_33;\n      if ( v21 >= a1 )\n      {\n        if ( a8 )\n        {\n          v36 = *a2;\n          v37 = dcgettext(0LL, \"%s: option '%s%s' requires an argument\\n\", 5);\n          __fprintf_chk(stderr, 1LL, v37, v36);\n        }\n        a7[2] = *((_DWORD *)v12 + 6);\n        return 5 * (unsigned int)(*a3 != 58) + 58;\n      }\n      else\n      {\n        *a7 = v20 + 2;\n        *((_QWORD *)a7 + 2) = a2[v21];\nLABEL_33:\n        if ( a5 )\n          *a5 = v13;\n        v23 = v12[2];\n        result = *((unsigned int *)v12 + 6);\n        if ( v23 )\n        {\n          *(_DWORD *)v23 = result;\n          return 0LL;\n        }\n      }\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_408680",
            "funcStartAddr": "0x408680",
            "funcEndAddr": "0x408c46",
            "decompiledFuncCode": "__int64 __fastcall sub_408680(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int a6, int *a7, int a8)\n{\n  int v8; // r13d\n  int v9; // eax\n  int v10; // ebp\n  const char *v12; // r15\n  _BYTE *v13; // rdx\n  char v14; // al\n  char v15; // al\n  int v16; // eax\n  __int64 v17; // r14\n  int v18; // edx\n  int v19; // ecx\n  int v20; // eax\n  unsigned int v21; // r14d\n  char *v22; // rax\n  __int64 v23; // r8\n  char v24; // cl\n  int v26; // edx\n  __int64 v27; // rax\n  _BYTE *v28; // rcx\n  int v29; // esi\n  char v30; // cl\n  char *v31; // rax\n  __int64 v32; // rax\n  char *v34; // rax\n  char v35; // dl\n  __int64 v36; // rax\n  int v37; // edx\n  __int64 v38; // rax\n  __int64 v39; // rbp\n  char *v40; // rax\n  __int64 v41; // rbp\n  char *v42; // rax\n  __int64 v43; // rbp\n  char *v44; // rax\n  char v47; // [rsp+1Ch] [rbp-4Ch]\n  int v48; // [rsp+1Ch] [rbp-4Ch]\n  int v49; // [rsp+1Ch] [rbp-4Ch]\n  int v50; // [rsp+1Ch] [rbp-4Ch]\n  _BYTE *v51; // [rsp+20h] [rbp-48h]\n  _BYTE *v52; // [rsp+28h] [rbp-40h]\n\n  v8 = a7[1];\n  if ( a1 <= 0 )\n    return (unsigned int)-1;\n  v9 = *a7;\n  v10 = a1;\n  v12 = a3;\n  *((_QWORD *)a7 + 2) = 0LL;\n  if ( !v9 )\n  {\n    *a7 = 1;\n    v9 = 1;\nLABEL_4:\n    a7[12] = v9;\n    a7[11] = v9;\n    *((_QWORD *)a7 + 4) = 0LL;\n    if ( *a3 == 45 )\n    {\n      a7[10] = 2;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else if ( *a3 == 43 )\n    {\n      a7[10] = 0;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else\n    {\n      v13 = 0LL;\n      if ( !a8 )\n      {\n        v50 = a6;\n        v34 = getenv(\"POSIXLY_CORRECT\");\n        a6 = v50;\n        if ( !v34 )\n        {\n          a7[10] = 1;\n          v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n          goto LABEL_24;\n        }\n        v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n      }\n      a7[10] = 0;\n    }\nLABEL_24:\n    a7[6] = 1;\n    v14 = *v12;\n    goto LABEL_25;\n  }\n  if ( !a7[6] )\n    goto LABEL_4;\n  v14 = *a3;\n  v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n  if ( ((v14 - 43) & 0xFD) == 0 )\n  {\n    v15 = *++v12;\n    if ( v15 == 58 )\n      v8 = 0;\n    if ( !v13 )\n      goto LABEL_12;\n    goto LABEL_28;\n  }\nLABEL_25:\n  if ( v14 == 58 )\n    v8 = 0;\n  if ( !v13 )\n    goto LABEL_12;\nLABEL_28:\n  if ( !*v13 )\n  {\nLABEL_12:\n    v16 = *a7;\n    if ( a7[12] > *a7 )\n      a7[12] = v16;\n    if ( v16 < a7[11] )\n      a7[11] = v16;\n    if ( a7[10] == 1 )\n    {\n      v26 = a7[12];\n      if ( a7[11] == v26 )\n      {\n        if ( v16 != v26 )\n        {\n          a7[11] = v16;\n          v26 = v16;\n        }\n      }\n      else if ( v16 != v26 )\n      {\n        v48 = a6;\n        sub_407F80((__int64)a2, a7);\n        v26 = *a7;\n        a6 = v48;\n      }\n      if ( a1 <= v26 )\n      {\nLABEL_79:\n        v16 = v26;\n      }\n      else\n      {\n        v27 = v26;\n        while ( 1 )\n        {\n          v28 = (_BYTE *)a2[v27];\n          v29 = v27;\n          v26 = v27;\n          if ( *v28 == 45 )\n          {\n            if ( v28[1] )\n              break;\n          }\n          v26 = ++v27;\n          *a7 = v29 + 1;\n          if ( a1 <= (int)v27 )\n            goto LABEL_79;\n        }\n        v16 = *a7;\n      }\n      a7[12] = v26;\n    }\n    if ( a1 == v16 )\n    {\n      v10 = a7[12];\n      v18 = a7[11];\nLABEL_41:\n      if ( v18 != v10 )\n        *a7 = v18;\n      return (unsigned int)-1;\n    }\n    v17 = a2[v16];\n    if ( !strcmp((const char *)v17, \"--\") )\n    {\n      v18 = a7[11];\n      v19 = a7[12];\n      v20 = v16 + 1;\n      *a7 = v20;\n      if ( v18 == v19 )\n      {\n        a7[11] = v20;\n        v18 = v20;\n      }\n      else if ( v20 != v19 )\n      {\n        sub_407F80((__int64)a2, a7);\n        v18 = a7[11];\n      }\n      a7[12] = a1;\n      *a7 = a1;\n      goto LABEL_41;\n    }\n    if ( *(_BYTE *)v17 == 45 )\n    {\n      v30 = *(_BYTE *)(v17 + 1);\n      if ( v30 )\n      {\n        if ( a4 )\n        {\n          if ( v30 == 45 )\n          {\n            *((_QWORD *)a7 + 4) = v17 + 2;\n            return (unsigned int)sub_408060(a1, a2, v12, a4, a5, a6, a7, v8, (__int64)\"--\");\n          }\n          if ( a6 )\n          {\n            if ( *(_BYTE *)(v17 + 2) || (v49 = a6, v31 = strchr(v12, v30), a6 = v49, !v31) )\n            {\n              *((_QWORD *)a7 + 4) = v17 + 1;\n              v21 = sub_408060(a1, a2, v12, a4, a5, a6, a7, v8, (__int64)\"-\");\n              if ( v21 != -1 )\n                return v21;\n              v17 = a2[*a7];\n            }\n          }\n        }\n        v13 = (_BYTE *)(v17 + 1);\n        goto LABEL_29;\n      }\n    }\n    if ( a7[10] )\n    {\n      *((_QWORD *)a7 + 2) = v17;\n      v21 = 1;\n      *a7 = v16 + 1;\n      return v21;\n    }\n    return (unsigned int)-1;\n  }\nLABEL_29:\n  v51 = v13;\n  *((_QWORD *)a7 + 4) = v13 + 1;\n  v21 = (char)*v13;\n  v52 = v13 + 1;\n  v47 = *v13;\n  v22 = strchr(v12, v21);\n  v23 = (__int64)v52;\n  if ( !v51[1] )\n    ++*a7;\n  if ( (unsigned __int8)(v47 - 58) > 1u && v22 )\n  {\n    v24 = v22[1];\n    if ( *v22 == 87 && a4 && v24 == 59 )\n    {\n      if ( v51[1] )\n      {\nLABEL_68:\n        *((_QWORD *)a7 + 4) = v23;\n        *((_QWORD *)a7 + 2) = 0LL;\n        return (unsigned int)sub_408060(a1, a2, v12, a4, a5, 0, a7, v8, (__int64)\"-W \");\n      }\n      v32 = *a7;\n      if ( (_DWORD)v32 != a1 )\n      {\n        v23 = a2[v32];\n        goto LABEL_68;\n      }\n      if ( v8 )\n      {\n        v43 = *a2;\n        v44 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v44, v43);\n      }\n      a7[2] = v21;\n      return 5 * (unsigned int)(*v12 != 58) + 58;\n    }\n    else if ( v24 == 58 )\n    {\n      v35 = v51[1];\n      if ( v22[2] == 58 )\n      {\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          ++*a7;\n        }\n        else\n        {\n          *((_QWORD *)a7 + 2) = 0LL;\n        }\n      }\n      else\n      {\n        v36 = *a7;\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          *a7 = v36 + 1;\n        }\n        else if ( a1 == (_DWORD)v36 )\n        {\n          if ( v8 )\n          {\n            v41 = *a2;\n            v42 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n            __fprintf_chk(stderr, 1LL, v42, v41);\n          }\n          a7[2] = v21;\n          v21 = 5 * (*v12 != 58) + 58;\n        }\n        else\n        {\n          v37 = v36 + 1;\n          v38 = a2[v36];\n          *a7 = v37;\n          *((_QWORD *)a7 + 2) = v38;\n        }\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n    }\n  }\n  else\n  {\n    if ( v8 )\n    {\n      v39 = *a2;\n      v40 = dcgettext(0LL, \"%s: invalid option -- '%c'\\n\", 5);\n      __fprintf_chk(stderr, 1LL, v40, v39);\n    }\n    a7[2] = v21;\n    return 63;\n  }\n  return v21;\n}\n"
        },
        {
            "funcName": "sub_408C50",
            "funcStartAddr": "0x408c50",
            "funcEndAddr": "0x408ca6",
            "decompiledFuncCode": "__int64 __fastcall sub_408C50(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int a6, int a7)\n{\n  __int64 result; // rax\n\n  dword_60E8C0 = dword_60E31C;\n  dword_60E8C4 = dword_60E318;\n  result = sub_408680(a1, a2, a3, a4, a5, a6, &dword_60E8C0, a7);\n  dword_60E31C = dword_60E8C0;\n  s1 = (char *)qword_60E8D0;\n  dword_60E314 = dword_60E8C8;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_408CB0",
            "funcStartAddr": "0x408cb0",
            "funcEndAddr": "0x408cc8",
            "decompiledFuncCode": "__int64 __fastcall sub_408CB0(int a1, __int64 *a2, const char *a3)\n{\n  return sub_408C50(a1, a2, a3, 0LL, 0LL, 0, 1);\n}\n"
        },
        {
            "funcName": "sub_408CD0",
            "funcStartAddr": "0x408cd0",
            "funcEndAddr": "0x408ce3",
            "decompiledFuncCode": "__int64 __fastcall sub_408CD0(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5)\n{\n  return sub_408C50(a1, a2, a3, a4, a5, 0, 0);\n}\n"
        },
        {
            "funcName": "sub_408CF0",
            "funcStartAddr": "0x408cf0",
            "funcEndAddr": "0x408d05",
            "decompiledFuncCode": "__int64 __fastcall sub_408CF0(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_408680(a1, a2, a3, a4, a5, 0, a6, 0);\n}\n"
        },
        {
            "funcName": "sub_408D10",
            "funcStartAddr": "0x408d10",
            "funcEndAddr": "0x408d26",
            "decompiledFuncCode": "__int64 __fastcall sub_408D10(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5)\n{\n  return sub_408C50(a1, a2, a3, a4, a5, 1, 0);\n}\n"
        },
        {
            "funcName": "sub_408D30",
            "funcStartAddr": "0x408d30",
            "funcEndAddr": "0x408d48",
            "decompiledFuncCode": "__int64 __fastcall sub_408D30(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_408680(a1, a2, a3, a4, a5, 1, a6, 0);\n}\n"
        },
        {
            "funcName": "sub_408D50",
            "funcStartAddr": "0x408d50",
            "funcEndAddr": "0x408dca",
            "decompiledFuncCode": "size_t __fastcall sub_408D50(wchar_t *pwc, char *s, size_t a3, mbstate_t *a4)\n{\n  size_t v4; // rbx\n  wchar_t *v5; // r12\n  const char *v6; // rbp\n  char v8; // [rsp+Ch] [rbp-1Ch] BYREF\n\n  if ( !s )\n  {\n    a3 = 1LL;\n    v6 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_7:\n    v5 = (wchar_t *)&v8;\n    goto LABEL_4;\n  }\n  v4 = -2LL;\n  if ( !a3 )\n    return v4;\n  v5 = pwc;\n  v6 = s;\n  if ( !pwc )\n    goto LABEL_7;\nLABEL_4:\n  v4 = mbrtowc(v5, v6, a3, a4);\n  if ( v4 > 0xFFFFFFFFFFFFFFFDLL && !(unsigned __int8)sub_409170(0LL) )\n  {\n    v4 = 1LL;\n    *v5 = *(unsigned __int8 *)v6;\n  }\n  return v4;\n}\n"
        },
        {
            "funcName": "sub_408DD0",
            "funcStartAddr": "0x408dd0",
            "funcEndAddr": "0x408ed4",
            "decompiledFuncCode": "_BYTE *__fastcall sub_408DD0(_BYTE *a1, __int16 a2, unsigned __int64 a3)\n{\n  _BYTE *result; // rax\n  __int64 v4; // r9\n  _BYTE *v5; // rcx\n  _BYTE *v6; // rdi\n\n  if ( !a3 )\n    return 0LL;\n  if ( ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( (_BYTE)a2 == *a1 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a3 )\n        return 0LL;\n      if ( ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v4 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8);\n  if ( a3 > 7 && (((v4 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v4 ^ *(_QWORD *)a1) & 0x8080808080808080LL) == 0 )\n  {\n    while ( 1 )\n    {\n      a3 -= 8LL;\n      a1 += 8;\n      if ( a3 <= 7 )\n        break;\n      if ( (((v4 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v4 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        goto LABEL_15;\n    }\n    if ( !a3 )\n      return 0LL;\n  }\nLABEL_15:\n  if ( (_BYTE)a2 != *a1 )\n  {\n    v5 = a1 + 1;\n    v6 = &a1[a3];\n    while ( 1 )\n    {\n      result = v5;\n      if ( v5 == v6 )\n        break;\n      if ( *v5++ == (_BYTE)a2 )\n        return result;\n    }\n    return 0LL;\n  }\n  return a1;\n}\n"
        },
        {
            "funcName": "sub_408EE0",
            "funcStartAddr": "0x408ee0",
            "funcEndAddr": "0x40903a",
            "decompiledFuncCode": "__int64 __fastcall sub_408EE0(char *s2, _DWORD *a2)\n{\n  const char *v2; // r13\n  __int64 v5; // rbx\n  __int64 v7; // rax\n  int v8; // r13d\n  int v9; // ebx\n  char *endptr[6]; // [rsp+8h] [rbp-30h] BYREF\n\n  v2 = nptr;\n  v5 = 0LL;\n  if ( (unsigned int)(*s2 - 48) > 9 )\n  {\n    do\n    {\n      if ( !strcmp(v2, s2) )\n      {\n        LODWORD(v7) = dword_60E320[3 * v5];\n        goto LABEL_6;\n      }\n      v5 = (unsigned int)(v5 + 1);\n      v2 += 12;\n    }\n    while ( (_DWORD)v5 != 35 );\n    v8 = __libc_current_sigrtmin();\n    v9 = __libc_current_sigrtmax();\n    if ( v8 > 0 && !memcmp(s2, \"RTMIN\", 5uLL) )\n    {\n      v7 = strtol(s2 + 5, endptr, 10);\n      if ( *endptr[0] || v7 < 0 || v7 > v9 - v8 )\n        goto LABEL_9;\n      LODWORD(v7) = v8 + v7;\n    }\n    else\n    {\n      if ( v9 <= 0 )\n        goto LABEL_9;\n      if ( memcmp(s2, \"RTMAX\", 5uLL) )\n        goto LABEL_9;\n      v7 = strtol(s2 + 5, endptr, 10);\n      if ( *endptr[0] || v7 < v8 - v9 || v7 > 0 )\n        goto LABEL_9;\n      LODWORD(v7) = v9 + v7;\n    }\nLABEL_6:\n    *a2 = v7;\n    return (unsigned int)((int)v7 >> 31);\n  }\n  v7 = strtol(s2, endptr, 10);\n  if ( !*endptr[0] && v7 <= 64 )\n    goto LABEL_6;\nLABEL_9:\n  *a2 = -1;\n  return 0xFFFFFFFFLL;\n}\n"
        },
        {
            "funcName": "sub_409040",
            "funcStartAddr": "0x409040",
            "funcEndAddr": "0x40910c",
            "decompiledFuncCode": "__int64 __fastcall sub_409040(int a1, char *a2)\n{\n  int *v2; // rcx\n  __int64 v3; // rdx\n  __int64 result; // rax\n  int v5; // r12d\n  int v6; // eax\n\n  v2 = dword_60E320;\n  v3 = 0LL;\n  do\n  {\n    if ( *v2 == a1 )\n    {\n      strcpy(a2, &nptr[12 * v3]);\n      return 0LL;\n    }\n    v3 = (unsigned int)(v3 + 1);\n    v2 += 3;\n  }\n  while ( (_DWORD)v3 != 35 );\n  v5 = __libc_current_sigrtmin();\n  v6 = __libc_current_sigrtmax();\n  if ( a1 < v5 || a1 > v6 )\n    return 0xFFFFFFFFLL;\n  if ( v5 + ((v6 - v5) >> 1) >= a1 )\n  {\n    strcpy(a2, \"RTMIN\");\n  }\n  else\n  {\n    strcpy(a2, \"RTMAX\");\n    v5 = v6;\n  }\n  result = (unsigned int)(a1 - v5);\n  if ( a1 != v5 )\n  {\n    __sprintf_chk(a2 + 5, 1LL, -1LL, \"%+d\", (unsigned int)result);\n    return 0LL;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_409110",
            "funcStartAddr": "0x409110",
            "funcEndAddr": "0x40916d",
            "decompiledFuncCode": "int __fastcall sub_409110(FILE *stream)\n{\n  size_t v1; // r12\n  int v2; // ebx\n  int result; // eax\n\n  v1 = __fpending(stream);\n  v2 = stream->_flags & 0x20;\n  result = sub_407E60(stream);\n  if ( v2 )\n  {\n    if ( !result )\n    {\n      *__errno_location() = 0;\n      return -1;\n    }\n    return -1;\n  }\n  if ( !result )\n    return result;\n  if ( v1 )\n    return -1;\n  return -(*__errno_location() != 9);\n}\n"
        },
        {
            "funcName": "sub_409170",
            "funcStartAddr": "0x409170",
            "funcEndAddr": "0x4091ce",
            "decompiledFuncCode": "bool __fastcall sub_409170(int a1)\n{\n  char *v1; // rdx\n  bool result; // al\n\n  v1 = setlocale(a1, 0LL);\n  result = 1;\n  if ( v1 )\n  {\n    result = 0;\n    if ( strcmp(v1, \"C\") )\n      return strcmp(v1, \"POSIX\") != 0;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4091D0",
            "funcStartAddr": "0x4091d0",
            "funcEndAddr": "0x409732",
            "decompiledFuncCode": "const char *sub_4091D0()\n{\n  char *v0; // rax\n  char *v1; // r15\n  const char *v2; // rbx\n  char v3; // bp\n  const char *v4; // rbp\n  char *v6; // rax\n  const char *v7; // r13\n  size_t v8; // rax\n  __int64 v9; // r12\n  size_t v10; // r14\n  size_t v11; // rdi\n  char *v12; // rax\n  char *v13; // rbp\n  size_t v14; // rdi\n  char *v15; // rax\n  int v16; // eax\n  int v17; // r12d\n  FILE *v18; // r13\n  const char *v19; // rax\n  FILE *v20; // rbx\n  const char *v21; // r13\n  char *IO_read_ptr; // rax\n  int v23; // edi\n  char *v24; // kr00_8\n  int *v25; // rdx\n  int v26; // esi\n  unsigned int v27; // eax\n  __int64 v28; // rdx\n  signed __int64 v29; // rax\n  char *v30; // rax\n  __int64 v31; // rcx\n  __int64 v32; // rdx\n  __int64 v33; // rsi\n  unsigned int v34; // ecx\n  signed __int64 v35; // rdi\n  char *v36; // rsi\n  unsigned int v37; // edx\n  char *v38; // rcx\n  FILE *v39; // rdi\n  int v40; // eax\n  bool v41; // dl\n  char *v42; // rax\n  signed __int64 v43; // rax\n  unsigned __int64 v44; // r9\n  char *v45; // rsi\n  char *v46; // r10\n  unsigned int v47; // ecx\n  unsigned int v48; // ecx\n  unsigned int v49; // esi\n  __int64 v50; // r8\n  unsigned __int64 v51; // rdi\n  char *v52; // rcx\n  char *v53; // r9\n  unsigned int v54; // edx\n  unsigned int v55; // edx\n  unsigned int v56; // ecx\n  __int64 v57; // rsi\n  const char *v58; // rax\n  char *v59; // rdi\n  FILE *v60; // r13\n  signed __int64 v61; // [rsp+8h] [rbp-D0h]\n  __int64 v62; // [rsp+18h] [rbp-C0h]\n  char v63[64]; // [rsp+20h] [rbp-B8h] BYREF\n  _QWORD v64[15]; // [rsp+60h] [rbp-78h] BYREF\n\n  v0 = nl_langinfo(14);\n  v1 = qword_60E8F8;\n  v2 = v0;\n  if ( !v0 )\n    v2 = \"\";\n  if ( !qword_60E8F8 )\n  {\n    v6 = getenv(\"CHARSETALIASDIR\");\n    v7 = v6;\n    if ( v6 && *v6 )\n    {\n      v8 = strlen(v6);\n      v9 = v8;\n      v10 = v8;\n      if ( !v8 )\n      {\n        v11 = 14LL;\nLABEL_18:\n        v12 = (char *)malloc(v11);\n        v13 = v12;\n        if ( !v12 )\n        {\nLABEL_19:\n          v1 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\nLABEL_20:\n          qword_60E8F8 = v1;\n          goto LABEL_4;\n        }\n        memcpy(v12, v7, v10);\nLABEL_24:\n        strcpy(&v13[v9], \"charset.alias\");\n        v16 = open(v13, 0);\n        v17 = v16;\n        if ( v16 >= 0 )\n        {\n          v1 = 0LL;\n          v61 = 0LL;\n          v18 = fdopen(v16, \"r\");\n          if ( v18 )\n          {\n            v19 = v2;\n            v20 = v18;\n            v21 = v19;\nLABEL_30:\n            IO_read_ptr = v20->_IO_read_ptr;\n            if ( IO_read_ptr < v20->_IO_read_end )\n            {\nLABEL_31:\n              v20->_IO_read_ptr = IO_read_ptr + 1;\n              v23 = (unsigned __int8)*IO_read_ptr;\n              goto LABEL_32;\n            }\n            while ( 1 )\n            {\n              v23 = __uflow(v20);\n              if ( v23 == -1 )\n                break;\nLABEL_32:\n              if ( (unsigned int)(v23 - 9) <= 1 || v23 == 32 )\n                goto LABEL_30;\n              if ( v23 == 35 )\n              {\n                do\n                {\n                  v42 = v20->_IO_read_ptr;\n                  if ( v42 < v20->_IO_read_end )\n                  {\n                    v20->_IO_read_ptr = v42 + 1;\n                    v40 = (unsigned __int8)*v42;\n                    v41 = 1;\n                  }\n                  else\n                  {\n                    v40 = __uflow(v20);\n                    v41 = v40 != -1;\n                  }\n                }\n                while ( v40 != 10 && v41 );\n                if ( v40 == -1 )\n                  break;\n                goto LABEL_30;\n              }\n              ungetc(v23, v20);\n              if ( fscanf(v20, \"%50s %50s\", v63, v64) <= 1 )\n                break;\n              v24 = &v63[strlen(v63)];\n              v25 = (int *)v64;\n              do\n              {\n                v26 = *v25++;\n                v27 = ~v26 & (v26 - 16843009) & 0x80808080;\n              }\n              while ( !v27 );\n              if ( (~v26 & (v26 - 16843009) & 0x8080) == 0 )\n              {\n                v27 >>= 16;\n                v25 = (int *)((char *)v25 + 2);\n              }\n              v28 = (char *)v25 - __CFADD__((_BYTE)v27, (_BYTE)v27) - 3 - (char *)v64;\n              v29 = v24 - v63 + v28;\n              v62 = v28;\n              if ( v61 )\n              {\n                v43 = v61 + v29;\n                v61 = v43 + 2;\n                v30 = (char *)realloc(v1, v43 + 3);\n                v32 = v62;\n                v31 = v24 - v63;\n              }\n              else\n              {\n                v61 = v29 + 2;\n                v30 = (char *)malloc(v29 + 3);\n                v31 = v24 - v63;\n                v32 = v62;\n              }\n              if ( !v30 )\n              {\n                v58 = v21;\n                v59 = v1;\n                v60 = v20;\n                v1 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\n                v2 = v58;\n                free(v59);\n                sub_407E60(v60);\n                goto LABEL_26;\n              }\n              v33 = -2 - v31;\n              v34 = v31 + 1;\n              v35 = v61 - v32;\n              v36 = &v30[v61 - v32 + v33];\n              if ( v34 >= 8 )\n              {\n                *(_QWORD *)v36 = *(_QWORD *)v63;\n                *(_QWORD *)&v36[v34 - 8] = *(_QWORD *)&v63[v34 - 8];\n                v44 = (unsigned __int64)(v36 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v45 = &v36[-v44];\n                v46 = (char *)(v63 - v45);\n                v47 = ((_DWORD)v45 + v34) & 0xFFFFFFF8;\n                if ( v47 >= 8 )\n                {\n                  v48 = v47 & 0xFFFFFFF8;\n                  v49 = 0;\n                  do\n                  {\n                    v50 = v49;\n                    v49 += 8;\n                    *(_QWORD *)(v44 + v50) = *(_QWORD *)&v46[v50];\n                  }\n                  while ( v49 < v48 );\n                }\n              }\n              else if ( (v34 & 4) != 0 )\n              {\n                *(_DWORD *)v36 = *(_DWORD *)v63;\n                *(_DWORD *)&v36[v34 - 4] = *(_DWORD *)&v63[v34 - 4];\n              }\n              else if ( v34 )\n              {\n                *v36 = v63[0];\n                if ( (v34 & 2) != 0 )\n                  *(_WORD *)&v36[v34 - 2] = *(_WORD *)&v63[v34 - 2];\n              }\n              v37 = v32 + 1;\n              v38 = &v30[v35 - 1];\n              if ( v37 >= 8 )\n              {\n                *(_QWORD *)v38 = v64[0];\n                *(_QWORD *)&v38[v37 - 8] = *(_QWORD *)&v63[v37 + 56];\n                v51 = (unsigned __int64)(v38 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v52 = &v38[-v51];\n                v53 = (char *)((char *)v64 - v52);\n                v54 = ((_DWORD)v52 + v37) & 0xFFFFFFF8;\n                if ( v54 >= 8 )\n                {\n                  v55 = v54 & 0xFFFFFFF8;\n                  v56 = 0;\n                  do\n                  {\n                    v57 = v56;\n                    v56 += 8;\n                    *(_QWORD *)(v51 + v57) = *(_QWORD *)&v53[v57];\n                  }\n                  while ( v56 < v55 );\n                }\n              }\n              else if ( (v37 & 4) != 0 )\n              {\n                *(_DWORD *)v38 = v64[0];\n                *(_DWORD *)&v38[v37 - 4] = *(_DWORD *)&v63[v37 + 60];\n              }\n              else if ( v37 )\n              {\n                *v38 = v64[0];\n                if ( (v37 & 2) != 0 )\n                  *(_WORD *)&v38[v37 - 2] = *(_WORD *)&v63[v37 + 62];\n              }\n              v1 = v30;\n              IO_read_ptr = v20->_IO_read_ptr;\n              if ( IO_read_ptr < v20->_IO_read_end )\n                goto LABEL_31;\n            }\n            v39 = v20;\n            v2 = v21;\n            sub_407E60(v39);\n            if ( !v61 )\n              goto LABEL_25;\n            v1[v61] = 0;\n            goto LABEL_26;\n          }\n          close(v17);\n        }\nLABEL_25:\n        v1 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\nLABEL_26:\n        free(v13);\n        goto LABEL_20;\n      }\n      if ( v7[v8 - 1] == 47 )\n      {\n        v11 = v8 + 14;\n        goto LABEL_18;\n      }\n      v14 = v8 + 15;\n      v9 = v8 + 1;\n    }\n    else\n    {\n      v14 = 115LL;\n      v9 = 101LL;\n      v10 = 100LL;\n      v7 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n    }\n    v15 = (char *)malloc(v14);\n    v13 = v15;\n    if ( !v15 )\n      goto LABEL_19;\n    memcpy(v15, v7, v10);\n    v13[v10] = 47;\n    goto LABEL_24;\n  }\nLABEL_4:\n  v3 = *v1;\n  if ( *v1 )\n  {\n    while ( strcmp(v2, v1) && (v3 != 42 || v1[1]) )\n    {\n      v4 = &v1[strlen(v1) + 1];\n      v1 = (char *)&v4[strlen(v4) + 1];\n      v3 = *v1;\n      if ( !*v1 )\n        goto LABEL_11;\n    }\n    v2 = &v1[strlen(v1) + 1];\n  }\nLABEL_11:\n  if ( !*v2 )\n    return \"ASCII\";\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_409740",
            "funcStartAddr": "0x409740",
            "funcEndAddr": "0x40974e",
            "decompiledFuncCode": "__int64 __fastcall sub_409740(int a1, __int64 a2, __int64 a3, int a4, int a5, int a6, char a7)\n{\n  return sub_409750(a1, 0, 3, a4, a5, a6, a7);\n}\n"
        },
        {
            "funcName": "sub_409750",
            "funcStartAddr": "0x409750",
            "funcEndAddr": "0x409885",
            "decompiledFuncCode": "__int64 __fastcall sub_409750(int a1, int a2, __int64 a3, int a4, int a5, int a6)\n{\n  int v6; // ebx\n  int v8; // eax\n  int *v9; // rax\n  int v10; // edi\n  int v11; // r12d\n  int *v12; // rbp\n  int v13; // ecx\n  int v14; // r8d\n  int v15; // r9d\n  int v16; // [rsp+30h] [rbp-38h]\n\n  v16 = a3;\n  if ( a2 == 1030 )\n  {\n    if ( dword_60E900 < 0 )\n    {\n      v6 = sub_409750(a1, 0, a3, a4, a5, a6);\n      if ( v6 >= 0 && dword_60E900 == -1 )\n      {\nLABEL_8:\n        v8 = fcntl(v6, 1);\n        if ( v8 < 0 || fcntl(v6, 2, v8 | 1u) == -1 )\n        {\n          v9 = __errno_location();\n          v10 = v6;\n          v6 = -1;\n          v11 = *v9;\n          v12 = v9;\n          close(v10);\n          *v12 = v11;\n        }\n      }\n    }\n    else\n    {\n      v6 = fcntl(a1, 1030, (unsigned int)a3);\n      if ( v6 < 0 && *__errno_location() == 22 )\n      {\n        v6 = sub_409750(a1, 0, v16, v13, v14, v15);\n        if ( v6 >= 0 )\n        {\n          dword_60E900 = -1;\n          goto LABEL_8;\n        }\n      }\n      else\n      {\n        dword_60E900 = 1;\n      }\n    }\n    return (unsigned int)v6;\n  }\n  return (unsigned int)fcntl(a1, a2, a3);\n}\n"
        },
        {
            "funcName": "sub_409900",
            "funcStartAddr": "0x409900",
            "funcEndAddr": "0x409918",
            "decompiledFuncCode": "int __fastcall sub_409900(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  v1 = 0LL;\n  if ( &qword_60E288 )\n    v1 = (void *)qword_60E288;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n"
        },
        {
            "funcName": "sub_409918",
            "funcStartAddr": "0x409918",
            "funcEndAddr": "0x409938",
            "decompiledFuncCode": "__int64 __fastcall sub_409918(__int64 a1, __int64 a2, __int64 a3)\n{\n  void (**i)(void); // rbx\n\n  for ( i = (void (**)(void))&qword_60DE30; *i != (void (*)(void))-1LL; --i )\n    (*i)();\n  return a3;\n}\n"
        }
    ],
    "funcCount": 85
}