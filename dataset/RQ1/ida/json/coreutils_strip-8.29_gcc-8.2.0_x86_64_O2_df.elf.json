{
    "binaryInfo": {
        "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_df.elf",
        "isStripped": "True"
    },
    "buildInfo": {
        "decompilerName": "IDA Pro",
        "compilerName": "gcc",
        "compilerVersion": "9.4.0",
        "Optlevel": "-O"
    },
    "funcInfo": [
        {
            "funcName": "main",
            "funcStartAddr": "0x4023e0",
            "funcEndAddr": "0x403907",
            "decompiledFuncCode": "__int64 __fastcall main(int a1, char **a2, char **a3)\n{\n  char v3; // r12\n  char *v5; // r13\n  int v6; // eax\n  char *v7; // r14\n  char **v8; // rax\n  __int64 v9; // rdx\n  char *v10; // r14\n  char **v11; // rax\n  __int64 v12; // rdx\n  unsigned int v13; // eax\n  __int64 v14; // r12\n  char v15; // r13\n  __int64 v16; // rbp\n  const char *v17; // r14\n  __int64 v18; // rbp\n  char *v19; // rax\n  __int64 v20; // rdi\n  __int64 v22; // rax\n  __int64 v23; // r12\n  __int64 v24; // r14\n  int v25; // eax\n  const char *v26; // rbp\n  int *v27; // rax\n  int v28; // ebp\n  char *v29; // r12\n  char *v30; // r13\n  int *v31; // rax\n  char *v32; // rax\n  const char *v33; // rsi\n  __int64 v34; // rax\n  const char *v35; // rcx\n  char *v36; // rbx\n  char *v37; // rax\n  __int64 v38; // rbp\n  char v39; // r14\n  const char *v40; // r12\n  char *v41; // rax\n  char *v42; // r13\n  __int64 v43; // r14\n  const char *v44; // rbx\n  const char **v45; // r15\n  char *v46; // rax\n  const char *v47; // rcx\n  int v48; // eax\n  char *v49; // rcx\n  size_t v50; // rax\n  char *v51; // rax\n  __int64 v52; // rbx\n  char *v53; // r13\n  __int64 v54; // r12\n  __dev_t v55; // rax\n  void *v56; // rax\n  void *v57; // rbx\n  int v58; // eax\n  int *v59; // r13\n  __int64 v60; // rbp\n  __int64 v61; // rax\n  _QWORD *v62; // rbx\n  char v63; // r12\n  __int64 i; // rbx\n  char *v65; // rsi\n  unsigned __int64 v66; // r13\n  __int64 v67; // rax\n  unsigned __int64 v68; // rbx\n  __int64 v69; // r14\n  bool v70; // zf\n  __int64 v71; // rbp\n  __int64 v72; // rax\n  char *v73; // r14\n  const char *v74; // rdi\n  char *IO_write_ptr; // rdx\n  char *v76; // rax\n  unsigned __int64 v77; // r14\n  __int64 v78; // rbp\n  unsigned __int64 v79; // r15\n  unsigned __int64 v80; // rcx\n  unsigned __int64 v81; // r10\n  char *v82; // rax\n  int v83; // eax\n  __int64 v84; // rbp\n  __int64 v85; // rax\n  void *v86; // rdi\n  _QWORD *v87; // r13\n  __dev_t st_dev; // rax\n  char v89; // al\n  char *v90; // r13\n  unsigned __int8 v91; // r14\n  __int64 v92; // rax\n  __int64 v93; // r13\n  __int64 v94; // r15\n  _BYTE *v95; // rdi\n  __int64 v96; // rcx\n  _BYTE *v97; // rdi\n  unsigned __int64 v98; // rsi\n  __int64 v99; // rcx\n  const char *v100; // r14\n  const char *v101; // rax\n  __int64 v102; // rbx\n  char *v103; // rax\n  const char *v104; // rcx\n  char *s2; // [rsp+0h] [rbp-158h]\n  char *s1; // [rsp+8h] [rbp-150h]\n  char *s1a; // [rsp+8h] [rbp-150h]\n  char v108; // [rsp+10h] [rbp-148h]\n  char *v109; // [rsp+10h] [rbp-148h]\n  const char *ptrb; // [rsp+18h] [rbp-140h]\n  char *ptr; // [rsp+18h] [rbp-140h]\n  void *ptra; // [rsp+18h] [rbp-140h]\n  char *name; // [rsp+20h] [rbp-138h]\n  unsigned __int64 v114; // [rsp+28h] [rbp-130h]\n  __int64 v115; // [rsp+30h] [rbp-128h]\n  __int64 v116; // [rsp+38h] [rbp-120h]\n  __int64 v117; // [rsp+40h] [rbp-118h]\n  char *v118; // [rsp+48h] [rbp-110h]\n  __int64 v119; // [rsp+50h] [rbp-108h]\n  bool v120; // [rsp+5Fh] [rbp-F9h]\n  __int64 v121; // [rsp+60h] [rbp-F8h]\n  char *v122; // [rsp+68h] [rbp-F0h]\n  __dev_t v123[4]; // [rsp+70h] [rbp-E8h] BYREF\n  struct stat stat_buf; // [rsp+90h] [rbp-C8h] BYREF\n\n  v3 = 0;\n  s2 = (char *)a2;\n  sub_4081C0(*a2, a2, a3);\n  setlocale(6, \"\");\n  bindtextdomain(\n    \"coreutils\",\n    \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n  textdomain(\"coreutils\");\n  sub_410F70(sub_4058F0);\n  qword_6176D0 = 0LL;\n  qword_6176C8 = 0LL;\n  byte_6176EE = 0;\n  byte_6176EC = 0;\n  dword_6176E8 = -1;\n  byte_6176B9 = 0;\n  byte_6176DD = 0;\n  dword_6176D8 = 0;\n  byte_6176B8 = 0;\n  qword_617680 = 1LL;\n  v5 = dcgettext(0LL, \"options %s and %s are mutually exclusive\", 5);\n  while ( 1 )\n  {\n    LODWORD(stat_buf.st_dev) = -1;\n    v6 = sub_40C380((unsigned int)a1, a2, \"aB:iF:hHklmPTt:vx:\", &off_411380, &stat_buf);\n    if ( v6 == -1 )\n      break;\n    if ( v6 == 105 )\n    {\n      if ( dword_617660 == 4 )\n        goto LABEL_295;\n      dword_617660 = 1;\n    }\n    else if ( v6 <= 105 )\n    {\n      if ( v6 == 72 )\n      {\n        dword_6176E8 = 144;\n        qword_6176E0 = 1LL;\n      }\n      else if ( v6 <= 72 )\n      {\n        if ( v6 == -130 )\n          sub_404930(0);\n        if ( v6 <= -130 )\n        {\n          if ( v6 == -131 )\n          {\n            sub_40A420(\n              (_DWORD)stdout,\n              (unsigned int)\"df\",\n              (unsigned int)&unk_4110B6,\n              (_DWORD)off_617560,\n              (unsigned int)\"Torbjorn Granlund\",\n              (unsigned int)\"David MacKenzie\",\n              \"Paul Eggert\",\n              0LL);\n            exit(0);\n          }\n          goto LABEL_47;\n        }\n        if ( v6 == 66 )\n        {\n          v13 = sub_407980(nptr);\n          if ( v13 )\n            sub_40A820(v13, LODWORD(stat_buf.st_dev), 66LL, &off_411380, nptr);\n        }\n        else\n        {\n          if ( v6 != 70 )\n            goto LABEL_47;\nLABEL_31:\n          v10 = nptr;\n          v11 = (char **)sub_40A560(16LL);\n          v12 = qword_6176D0;\n          *v11 = v10;\n          v11[1] = (char *)v12;\n          qword_6176D0 = (__int64)v11;\n        }\n      }\n      else if ( v6 == 84 )\n      {\n        if ( dword_617660 == 4 )\n          goto LABEL_290;\n        byte_6176B9 = 1;\n      }\n      else if ( v6 <= 84 )\n      {\n        if ( v6 != 80 )\n          goto LABEL_47;\n        if ( dword_617660 == 4 )\n        {\n          v104 = \"-P\";\n          goto LABEL_291;\n        }\n        v3 = 1;\n      }\n      else if ( v6 == 97 )\n      {\n        byte_6176EE = 1;\n      }\n      else\n      {\n        if ( v6 != 104 )\n          goto LABEL_47;\n        dword_6176E8 = 176;\n        qword_6176E0 = 1LL;\n      }\n    }\n    else if ( v6 != 118 )\n    {\n      if ( v6 <= 118 )\n      {\n        if ( v6 == 108 )\n        {\n          byte_6176ED = 1;\n        }\n        else if ( v6 <= 108 )\n        {\n          if ( v6 != 107 )\n            goto LABEL_47;\n          dword_6176E8 = 0;\n          qword_6176E0 = 1024LL;\n        }\n        else\n        {\n          if ( v6 != 109 )\n          {\n            if ( v6 != 116 )\n              goto LABEL_47;\n            goto LABEL_31;\n          }\n          dword_6176E8 = 0;\n          qword_6176E0 = 0x100000LL;\n        }\n      }\n      else if ( v6 == 129 )\n      {\n        byte_6176DC = 1;\n      }\n      else if ( v6 > 129 )\n      {\n        if ( v6 == 130 )\n        {\n          byte_6176B8 = 1;\n        }\n        else\n        {\n          if ( v6 != 131 )\n            goto LABEL_47;\n          if ( dword_617660 == 1 )\n          {\nLABEL_295:\n            v104 = \"-i\";\nLABEL_291:\n            error(0, 0, v5, v104, \"--output\");\nLABEL_47:\n            sub_404930(1);\n          }\n          if ( !dword_617660 && v3 )\n          {\n            error(0, 0, v5, \"-P\", \"--output\");\n            sub_404930(1);\n          }\n          if ( byte_6176B9 )\n          {\nLABEL_290:\n            v104 = \"-T\";\n            goto LABEL_291;\n          }\n          dword_617660 = 4;\n          if ( nptr )\n            sub_404D60(nptr);\n        }\n      }\n      else if ( v6 == 120 )\n      {\n        v7 = nptr;\n        v8 = (char **)sub_40A560(16LL);\n        v9 = qword_6176C8;\n        *v8 = v7;\n        v8[1] = (char *)v9;\n        qword_6176C8 = (__int64)v8;\n      }\n      else\n      {\n        if ( v6 != 128 )\n          goto LABEL_47;\n        byte_6176DC = 0;\n      }\n    }\n  }\n  if ( dword_6176E8 == -1 )\n  {\n    if ( v3 )\n    {\n      dword_6176E8 = 0;\n      qword_6176E0 = getenv(\"POSIXLY_CORRECT\") == 0LL ? 1024LL : 512LL;\n    }\n    else\n    {\n      v32 = getenv(\"DF_BLOCK_SIZE\");\n      sub_407980(v32);\n    }\n  }\n  if ( dword_617660 != 1 && dword_617660 != 4 )\n  {\n    if ( (dword_6176E8 & 0x10) != 0 )\n    {\n      dword_617660 = 2;\n    }\n    else if ( v3 )\n    {\n      dword_617660 = 3;\n    }\n  }\n  v14 = qword_6176D0;\n  v15 = 0;\n  if ( qword_6176D0 )\n  {\n    do\n    {\n      v16 = qword_6176C8;\n      if ( qword_6176C8 )\n      {\n        v17 = *(const char **)v14;\n        while ( strcmp(v17, *(const char **)v16) )\n        {\n          v16 = *(_QWORD *)(v16 + 8);\n          if ( !v16 )\n            goto LABEL_68;\n        }\n        v15 = 1;\n        v18 = sub_409DE0(v17);\n        v19 = dcgettext(0LL, \"file system type %s both selected and excluded\", 5);\n        error(0, 0, v19, v18);\n      }\nLABEL_68:\n      v14 = *(_QWORD *)(v14 + 8);\n    }\n    while ( v14 );\n    if ( v15 )\n      return 1LL;\n  }\n  if ( dword_6175E0 < a1 )\n  {\n    v22 = sub_40A560(144LL * (a1 - dword_6175E0));\n    v23 = dword_6175E0;\n    v121 = v22;\n    v24 = v22;\n    while ( a1 > (int)v23 )\n    {\n      if ( __xstat(1, a2[v23], (struct stat *)(v24 + 144LL * ((int)v23 - dword_6175E0))) )\n      {\n        v26 = (const char *)sub_409C60(0LL, 3LL, a2[v23]);\n        v27 = __errno_location();\n        error(0, *v27, \"%s\", v26);\n        dword_6176D8 = 1;\n        a2[v23] = 0LL;\n      }\n      else if ( (*(_DWORD *)(v24 + 144LL * ((int)v23 - dword_6175E0) + 24) & 0xF000) != 4096 )\n      {\n        v25 = open(a2[v23], 256);\n        if ( v25 >= 0 )\n          close(v25);\n      }\n      ++v23;\n    }\n  }\n  v20 = 1LL;\n  if ( !qword_6176D0 && !qword_6176C8 && !byte_6176B9 && !byte_61737C )\n    v20 = (unsigned __int8)byte_6176ED;\n  qword_6176C0 = sub_40C670(v20);\n  if ( !qword_6176C0 )\n  {\n    if ( dword_6175E0 >= a1 || byte_6176EE || byte_6176ED || qword_6176D0 || qword_6176C8 )\n    {\n      v28 = 1;\n      v29 = (char *)\"\";\n    }\n    else\n    {\n      v28 = 0;\n      v29 = dcgettext(0LL, \"Warning: \", 5);\n    }\n    v30 = dcgettext(0LL, \"cannot read table of mounted file systems\", 5);\n    v31 = __errno_location();\n    error(v28, *v31, \"%s%s\", v29, v30);\n  }\n  if ( byte_6176DC )\n    sync();\n  switch ( dword_617660 )\n  {\n    case 0:\n      sub_403E20(0LL, 0LL);\n      if ( byte_6176B9 )\n        sub_403E20(1LL, 0LL);\n      sub_403E20(2LL, 0LL);\n      sub_403E20(3LL, 0LL);\n      sub_403E20(4LL, 0LL);\n      v33 = 0LL;\n      goto LABEL_105;\n    case 1:\n      sub_403E20(0LL, 0LL);\n      if ( byte_6176B9 )\n        sub_403E20(1LL, 0LL);\n      sub_403E20(6LL, 0LL);\n      sub_403E20(7LL, 0LL);\n      sub_403E20(8LL, 0LL);\n      sub_403E20(9LL, 0LL);\n      sub_403E20(10LL, 0LL);\n      break;\n    case 2:\n      sub_403E20(0LL, 0LL);\n      if ( byte_6176B9 )\n        sub_403E20(1LL, 0LL);\n      sub_403E20(2LL, \"Size\");\n      sub_403E20(3LL, 0LL);\n      sub_403E20(4LL, \"Avail\");\n      v33 = 0LL;\n      goto LABEL_105;\n    case 3:\n      sub_403E20(0LL, 0LL);\n      if ( byte_6176B9 )\n        sub_403E20(1LL, 0LL);\n      sub_403E20(2LL, 0LL);\n      sub_403E20(3LL, 0LL);\n      sub_403E20(4LL, 0LL);\n      v33 = \"Capacity\";\nLABEL_105:\n      sub_403E20(5LL, v33);\n      sub_403E20(10LL, 0LL);\n      break;\n    case 4:\n      if ( !qword_617650 )\n        sub_404D60(\"source,fstype,itotal,iused,iavail,ipcent,size,used,avail,pcent,file,target\");\n      break;\n    default:\n      __assert_fail(\"!\\\"invalid header_mode\\\"\", \"src/df.c\", 0x1F0u, \"get_field_list\");\n  }\n  sub_403BA0();\n  if ( dword_6175E0 < a1 )\n  {\n    v34 = dword_6175E0;\n    byte_6176EC = 1;\n    v115 = dword_6175E0 + 1LL;\n    v116 = v115 + (unsigned int)(a1 + ~dword_6175E0);\n    goto LABEL_108;\n  }\n  v63 = byte_6176EE;\n  v60 = qword_6176C0;\n  v83 = 0;\n  while ( v60 )\n  {\n    v60 = *(_QWORD *)(v60 + 48);\n    ++v83;\n  }\n  qword_6176F0 = (void *)sub_406460(v83, 0LL, sub_4039F0, sub_403A00, j__free);\n  if ( !qword_6176F0 )\nLABEL_293:\n    sub_40A7B0();\n  v62 = 0LL;\n  if ( qword_6176C0 )\n  {\n    v84 = qword_6176C0;\n    while ( 1 )\n    {\n      v89 = *(_BYTE *)(v84 + 40);\n      if ( (v89 & 2) != 0 )\n      {\n        if ( byte_6176ED )\n          break;\n      }\n      if ( (v89 & 1) != 0 && !byte_6176EE && !byte_6176EC )\n        break;\n      v90 = *(char **)(v84 + 24);\n      if ( !(unsigned __int8)sub_403A10(v90) )\n        break;\n      v91 = sub_403A60(v90);\n      if ( v91 || __xstat(1, *(const char **)(v84 + 8), &stat_buf) == -1 )\n        break;\n      if ( !qword_6176F0 )\n        goto LABEL_247;\n      v123[0] = stat_buf.st_dev;\n      v92 = sub_4061F0(qword_6176F0, v123);\n      v93 = v92;\n      if ( !v92 )\n        goto LABEL_247;\n      v94 = *(_QWORD *)(v92 + 8);\n      v95 = *(_BYTE **)(v94 + 16);\n      if ( v95 && *(_QWORD *)(v84 + 16) )\n      {\n        v96 = -1LL;\n        do\n        {\n          if ( !v96 )\n            break;\n          v70 = *v95++ == v91;\n          --v96;\n        }\n        while ( !v70 );\n        v97 = *(_BYTE **)(v84 + 16);\n        v98 = -v96 - 2;\n        v99 = -1LL;\n        do\n        {\n          if ( !v99 )\n            break;\n          v70 = *v97++ == v91;\n          --v99;\n        }\n        while ( !v70 );\n        LODWORD(s2) = v98 < -v99 - 2;\n      }\n      else\n      {\n        LODWORD(s2) = 0;\n      }\n      v100 = *(const char **)v84;\n      if ( !byte_6176B8\n        && (*(_BYTE *)(v84 + 40) & 2) != 0\n        && (*(_BYTE *)(v94 + 40) & 2) != 0\n        && strcmp(*(const char **)v94, *(const char **)v84) )\n      {\n        goto LABEL_247;\n      }\n      if ( (!strchr(v100, 47) || strchr(*(const char **)v94, 47))\n        && (strlen(*(const char **)(v94 + 8)) <= strlen(*(const char **)(v84 + 8)) || (_DWORD)s2)\n        && ((v109 = *(char **)(v84 + 8), s2 = *(char **)(v94 + 8), !strcmp(*(const char **)v94, v100))\n         || strcmp(v109, s2)) )\n      {\n        v94 = v84;\n      }\n      else\n      {\n        *(_QWORD *)(v93 + 8) = v84;\n      }\n      v84 = *(_QWORD *)(v84 + 48);\n      if ( !v63 )\n        sub_40C620((void *)v94);\nLABEL_249:\n      if ( !v84 )\n      {\n        v60 = 0LL;\n        goto LABEL_184;\n      }\n    }\n    stat_buf.st_dev = *(_QWORD *)(v84 + 32);\nLABEL_247:\n    v85 = sub_40A560(24LL);\n    v86 = qword_6176F0;\n    v87 = (_QWORD *)v85;\n    *(_QWORD *)(v85 + 8) = v84;\n    st_dev = stat_buf.st_dev;\n    v87[2] = v62;\n    *v87 = st_dev;\n    if ( !sub_406C00(v86, v87) )\n      goto LABEL_293;\n    v84 = *(_QWORD *)(v84 + 48);\n    v62 = v87;\n    goto LABEL_249;\n  }\nLABEL_184:\n  if ( !v63 )\n  {\n    qword_6176C0 = 0LL;\n    while ( v62 )\n    {\n      v61 = v62[1];\n      v62 = (_QWORD *)v62[2];\n      v63 = 1;\n      *(_QWORD *)(v61 + 48) = v60;\n      v60 = v61;\n    }\n    if ( v63 )\n      qword_6176C0 = v60;\n    sub_4066A0(qword_6176F0);\n    qword_6176F0 = 0LL;\n  }\n  for ( i = qword_6176C0; i; i = *(_QWORD *)(i + 48) )\n    sub_403F10(*(char **)i, *(void **)(i + 8), (*(_BYTE *)(i + 40) & 2) != 0, 0LL, 1);\nLABEL_194:\n  if ( !byte_6176DD )\n  {\n    if ( dword_6176D8 )\n      return (unsigned int)dword_6176D8;\n    v82 = dcgettext(0LL, \"no file systems processed\", 5);\n    error(1, 0, v82);\nLABEL_235:\n    s1 = name;\nLABEL_114:\n    v38 = qword_6176C0;\n    if ( !qword_6176C0 )\n    {\n      free(v122);\n      goto LABEL_136;\n    }\n    v119 = 0LL;\n    v39 = 0;\n    v114 = -1LL;\n    v108 = 0;\n    while ( 1 )\n    {\n      v40 = *(const char **)v38;\n      v41 = canonicalize_file_name(*(const char **)v38);\n      v42 = v41;\n      if ( v41 && *v41 == 47 )\n        v40 = v41;\n      if ( strcmp(s1, v40) )\n        goto LABEL_133;\n      v43 = qword_6176C0;\n      v44 = *(const char **)(v38 + 8);\n      v45 = 0LL;\n      if ( !qword_6176C0 )\n        goto LABEL_168;\n      do\n      {\n        if ( !strcmp(*(const char **)(v43 + 8), v44) )\n          v45 = (const char **)v43;\n        v43 = *(_QWORD *)(v43 + 48);\n      }\n      while ( v43 );\n      if ( !v45 )\n        goto LABEL_168;\n      v46 = canonicalize_file_name(*v45);\n      v47 = v46;\n      if ( !v46 || *v46 != 47 )\n      {\n        free(v46);\n        v47 = (const char *)sub_40A790((void *)*v45);\n        if ( !v47 )\n          break;\n      }\n      ptrb = v47;\n      v48 = strcmp(v47, v40);\n      v49 = (char *)ptrb;\n      if ( v48 )\n      {\n        v39 = 1;\n        goto LABEL_132;\n      }\n      v44 = *(const char **)(v38 + 8);\nLABEL_130:\n      ptr = v49;\n      v50 = strlen(v44);\n      v49 = ptr;\n      v39 = (v114 > v50) | v108 ^ 1;\n      if ( v39 )\n      {\n        v118 = ptr;\n        v120 = v114 > v50;\n        ptra = (void *)v50;\n        v58 = __xstat(1, v44, &stat_buf);\n        v49 = v118;\n        if ( !v58 )\n          goto LABEL_173;\n        if ( v108 != 1 && v120 )\n        {\n          v39 = 0;\nLABEL_173:\n          if ( ptra == (void *)1 )\n          {\n            free(v118);\n            free(v42);\n            free(v122);\n            v119 = v38;\n            goto LABEL_232;\n          }\n          v114 = (unsigned __int64)ptra;\n          v119 = v38;\n        }\n        else\n        {\n          v39 = v108;\n        }\n        v108 = v39;\n        v39 = 0;\n        goto LABEL_132;\n      }\n      v108 = 1;\nLABEL_132:\n      free(v49);\nLABEL_133:\n      free(v42);\n      v38 = *(_QWORD *)(v38 + 48);\n      if ( !v38 )\n      {\n        free(v122);\n        if ( v119 )\n        {\nLABEL_232:\n          sub_403F10(*(char **)v119, *(void **)(v119 + 8), (*(_BYTE *)(v119 + 40) & 2) != 0, 0LL, 0);\n          goto LABEL_164;\n        }\n        if ( !v39 )\n          goto LABEL_136;\n        v102 = sub_409B90(4LL, name);\n        v103 = dcgettext(0LL, \"cannot access %s: over-mounted by another device\", 5);\n        error(0, 0, v103, v102);\n        dword_6176D8 = 1;\nLABEL_164:\n        while ( 2 )\n        {\n          v34 = v115;\n          if ( v116 != v115 )\n          {\n            ++v115;\nLABEL_108:\n            v35 = *(const char **)&s2[8 * v34];\n            v36 = (char *)v35;\n            name = (char *)v35;\n            if ( !v35 )\n              continue;\n            v117 = v121 + 144LL * ((int)v34 - dword_6175E0);\n            if ( (*(_DWORD *)(v117 + 24) & 0xB000) == 0x2000 )\n            {\n              v37 = canonicalize_file_name(v35);\n              v122 = v37;\n              if ( !v37 )\n                goto LABEL_235;\n              if ( *v37 != 47 )\n                v37 = v36;\n              s1 = v37;\n              goto LABEL_114;\n            }\nLABEL_136:\n            v51 = canonicalize_file_name(name);\n            v52 = qword_6176C0;\n            v53 = v51;\n            if ( v51 && *v51 == 47 )\n            {\n              v77 = strlen(v51);\n              if ( qword_6176C0 )\n              {\n                v78 = qword_6176C0;\n                v79 = 0LL;\n                v54 = 0LL;\n                do\n                {\n                  if ( strcmp(*(const char **)(v78 + 24), \"lofs\")\n                    && (!v54 || (*(_BYTE *)(v54 + 40) & 1) != 0 || (*(_BYTE *)(v78 + 40) & 1) == 0) )\n                  {\n                    v80 = strlen(*(const char **)(v78 + 8)) + 1;\n                    v81 = v80 - 1;\n                    if ( v80 - 1 >= v79 && v77 >= v81 )\n                    {\n                      if ( v80 == 2 )\n                      {\n                        v79 = 1LL;\n                        v54 = v78;\n                      }\n                      else if ( v77 == v81 || v53[v80 - 1] == 47 )\n                      {\n                        s1a = (char *)(v80 - 1);\n                        if ( !strncmp(*(const char **)(v78 + 8), v53, v80 - 1) )\n                        {\n                          v79 = (unsigned __int64)s1a;\n                          v54 = v78;\n                        }\n                      }\n                    }\n                  }\n                  v78 = *(_QWORD *)(v78 + 48);\n                }\n                while ( v78 );\n                free(v53);\n                if ( !v54 || __xstat(1, *(const char **)(v54 + 8), &stat_buf) || stat_buf.st_dev != *(_QWORD *)v117 )\n                {\nLABEL_139:\n                  v54 = 0LL;\n                  do\n                  {\n                    v55 = *(_QWORD *)(v52 + 32);\n                    if ( v55 == -1LL )\n                    {\n                      if ( __xstat(1, *(const char **)(v52 + 8), &stat_buf) )\n                      {\n                        v59 = __errno_location();\n                        if ( *v59 == 5 )\n                        {\n                          v101 = (const char *)sub_409C60(0LL, 3LL, *(_QWORD *)(v52 + 8));\n                          error(0, *v59, \"%s\", v101);\n                          dword_6176D8 = 1;\n                        }\n                        *(_QWORD *)(v52 + 32) = -2LL;\n                        v55 = -2LL;\n                      }\n                      else\n                      {\n                        v55 = stat_buf.st_dev;\n                        *(_QWORD *)(v52 + 32) = stat_buf.st_dev;\n                      }\n                    }\n                    if ( *(_QWORD *)v117 == v55\n                      && strcmp(*(const char **)(v52 + 24), \"lofs\")\n                      && (!v54 || (*(_BYTE *)(v54 + 40) & 1) != 0 || (*(_BYTE *)(v52 + 40) & 1) == 0) )\n                    {\n                      if ( !__xstat(1, *(const char **)(v52 + 8), &stat_buf) && stat_buf.st_dev == *(_QWORD *)(v52 + 32) )\n                        v54 = v52;\n                      else\n                        *(_QWORD *)(v52 + 32) = -2LL;\n                    }\n                    v52 = *(_QWORD *)(v52 + 48);\n                  }\n                  while ( v52 );\n                  if ( !v54 )\n                    goto LABEL_162;\n                }\n                sub_403F10(*(char **)v54, *(void **)(v54 + 8), (*(_BYTE *)(v54 + 40) & 2) != 0, 0LL, 0);\n                continue;\n              }\n              free(v51);\n            }\n            else\n            {\n              free(v51);\n              if ( v52 )\n                goto LABEL_139;\n            }\nLABEL_162:\n            v56 = (void *)sub_404ED0(name);\n            v57 = v56;\n            if ( v56 )\n            {\n              sub_403F10(0LL, v56, 0, 0LL, 0);\n              free(v57);\n            }\n            continue;\n          }\n          goto LABEL_194;\n        }\n      }\n    }\n    v44 = *(const char **)(v38 + 8);\nLABEL_168:\n    v49 = 0LL;\n    goto LABEL_130;\n  }\n  if ( byte_6176B8 )\n  {\n    v65 = \"-\";\n    if ( !byte_61734C )\n      v65 = \"total\";\n    sub_403F10(\"total\", v65, 0, (__int64)&qword_617680, 0);\n  }\n  if ( qword_617640 )\n  {\n    v66 = 0LL;\n    do\n    {\n      v67 = qword_617650;\n      if ( qword_617650 )\n      {\n        v68 = 0LL;\n        v69 = **(_QWORD **)(qword_617648 + 8 * v66);\n        while ( 1 )\n        {\n          v70 = v68 == v67 - 1;\n          v71 = 8 * v68;\n          v72 = *(_QWORD *)(qword_617658 + 8 * v68);\n          stat_buf.st_dev = *(_QWORD *)(v72 + 32);\n          v73 = (char *)sub_407F30(v69, &stat_buf, *(unsigned int *)(v72 + 40), 8 * (unsigned int)v70);\n          v74 = v73;\n          if ( !v73 )\n            v74 = *(const char **)(*(_QWORD *)(qword_617648 + 8 * v66) + 8 * v68);\n          fputs_unlocked(v74, stdout);\n          ++v68;\n          free(v73);\n          v67 = qword_617650;\n          if ( v68 >= qword_617650 )\n            break;\n          v69 = *(_QWORD *)(*(_QWORD *)(qword_617648 + 8 * v66) + v71 + 8);\n          if ( v68 )\n          {\n            IO_write_ptr = stdout->_IO_write_ptr;\n            if ( IO_write_ptr >= stdout->_IO_write_end )\n            {\n              __overflow(stdout, 32);\n              v67 = qword_617650;\n            }\n            else\n            {\n              stdout->_IO_write_ptr = IO_write_ptr + 1;\n              *IO_write_ptr = 32;\n            }\n          }\n        }\n      }\n      v76 = stdout->_IO_write_ptr;\n      if ( v76 >= stdout->_IO_write_end )\n      {\n        __overflow(stdout, 10);\n      }\n      else\n      {\n        stdout->_IO_write_ptr = v76 + 1;\n        *v76 = 10;\n      }\n      ++v66;\n    }\n    while ( v66 < qword_617640 );\n  }\n  return (unsigned int)dword_6176D8;\n}\n"
        },
        {
            "funcName": "sub_40393B",
            "funcStartAddr": "0x40393b",
            "funcEndAddr": "0x40395a",
            "decompiledFuncCode": "void *sub_40393B()\n{\n  return &unk_6175F0;\n}\n"
        },
        {
            "funcName": "sub_40395A",
            "funcStartAddr": "0x40395a",
            "funcEndAddr": "0x403991",
            "decompiledFuncCode": "__int64 sub_40395A()\n{\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_403991",
            "funcStartAddr": "0x403991",
            "funcEndAddr": "0x4039e8",
            "decompiledFuncCode": "void *sub_403991()\n{\n  void *result; // rax\n\n  if ( !byte_617628 )\n  {\n    while ( qword_617630 < (unsigned __int64)(&qword_616E48 - qword_616E40 - 1) )\n      ((void (*)(void))qword_616E40[++qword_617630])();\n    result = sub_40393B();\n    byte_617628 = 1;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4039E8",
            "funcStartAddr": "0x4039e8",
            "funcEndAddr": "0x4039ed",
            "decompiledFuncCode": "// attributes: thunk\n__int64 sub_4039E8()\n{\n  return sub_40395A();\n}\n"
        },
        {
            "funcName": "sub_4039F0",
            "funcStartAddr": "0x4039f0",
            "funcEndAddr": "0x4039fc",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_4039F0(_QWORD *a1, unsigned __int64 a2)\n{\n  return *a1 % a2;\n}\n"
        },
        {
            "funcName": "sub_403A00",
            "funcStartAddr": "0x403a00",
            "funcEndAddr": "0x403a0a",
            "decompiledFuncCode": "bool __fastcall sub_403A00(_QWORD *a1, _QWORD *a2)\n{\n  return *a1 == *a2;\n}\n"
        },
        {
            "funcName": "sub_403A10",
            "funcStartAddr": "0x403a10",
            "funcEndAddr": "0x403a5e",
            "decompiledFuncCode": "__int64 __fastcall sub_403A10(char *s1)\n{\n  unsigned int v1; // r12d\n  __int64 v2; // rbx\n\n  v2 = qword_6176D0;\n  LOBYTE(v1) = qword_6176D0 == 0 || s1 == 0LL;\n  if ( (_BYTE)v1 )\n    return v1;\n  while ( strcmp(s1, *(const char **)v2) )\n  {\n    v2 = *(_QWORD *)(v2 + 8);\n    if ( !v2 )\n      return v1;\n  }\n  return 1LL;\n}\n"
        },
        {
            "funcName": "sub_403A60",
            "funcStartAddr": "0x403a60",
            "funcEndAddr": "0x403abe",
            "decompiledFuncCode": "__int64 __fastcall sub_403A60(char *s1)\n{\n  unsigned int v1; // r12d\n  __int64 v2; // rbx\n\n  v2 = qword_6176C8;\n  LOBYTE(v1) = qword_6176C8 == 0 || s1 == 0LL;\n  if ( (_BYTE)v1 )\n    return 0LL;\n  while ( strcmp(s1, *(const char **)v2) )\n  {\n    v2 = *(_QWORD *)(v2 + 8);\n    if ( !v2 )\n      return v1;\n  }\n  return 1LL;\n}\n"
        },
        {
            "funcName": "thunk_403ac0",
            "funcStartAddr": "0x403ac0",
            "funcEndAddr": "0x403ac5",
            "decompiledFuncCode": "// attributes: thunk\nvoid j__free(void *ptr)\n{\n  free(ptr);\n}\n"
        },
        {
            "funcName": "sub_403AD0",
            "funcStartAddr": "0x403ad0",
            "funcEndAddr": "0x403b48",
            "decompiledFuncCode": "__int64 sub_403AD0()\n{\n  __int64 v0; // rdi\n  __int64 v1; // rsi\n  __int64 *v2; // rbx\n  __int64 result; // rax\n\n  v0 = qword_617648;\n  ++qword_617640;\n  v1 = 8 * qword_617640;\n  if ( (qword_617640 & 0x1000000000000000LL) != 0\n    || (unsigned __int64)qword_617640 >> 61\n    || (qword_617648 = sub_40A5C0(qword_617648, v1),\n        v2 = (__int64 *)(qword_617648 + 8 * qword_617640 - 8),\n        v0 = 8 * qword_617650,\n        (qword_617650 & 0x1000000000000000LL) != 0)\n    || (unsigned __int64)qword_617650 >> 61 )\n  {\n    sub_40A7B0(v0, v1);\n  }\n  result = sub_40A560(v0);\n  *v2 = result;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_403B50",
            "funcStartAddr": "0x403b50",
            "funcEndAddr": "0x403b91",
            "decompiledFuncCode": "unsigned __int8 *__fastcall sub_403B50(unsigned __int8 *a1)\n{\n  __int64 v1; // rbx\n  const unsigned __int16 **v2; // rax\n  _BYTE *v3; // rdx\n\n  v1 = *a1;\n  if ( (_BYTE)v1 )\n  {\n    v2 = __ctype_b_loc();\n    v3 = a1;\n    do\n    {\n      if ( ((*v2)[v1] & 2) != 0 )\n        *v3 = 63;\n      v1 = (unsigned __int8)*++v3;\n    }\n    while ( (_BYTE)v1 );\n  }\n  return a1;\n}\n"
        },
        {
            "funcName": "sub_403BA0",
            "funcStartAddr": "0x403ba0",
            "funcEndAddr": "0x403e20",
            "decompiledFuncCode": "__int64 sub_403BA0()\n{\n  __int64 result; // rax\n  __int64 v1; // rdx\n  __int64 v2; // rbp\n  unsigned __int8 *v3; // rdi\n  char *v4; // rdi\n  unsigned __int64 v5; // r13\n  __int64 v6; // rcx\n  bool v7; // cc\n  __int64 v8; // r13\n  char *v9; // rsi\n  __int64 v10; // rdx\n  __int64 v11; // rcx\n  __int64 v12; // r8\n  char *v13; // r14\n  __int16 v14; // r9\n  int v15; // r13d\n  int v16; // r8d\n  int v17; // r9d\n  unsigned __int64 v18; // r8\n  unsigned __int64 v19; // rsi\n  __int16 v20; // ax\n  __int64 v21; // rax\n  unsigned __int64 v22; // rcx\n  bool v23; // al\n  __int64 v24; // rdx\n  char v25; // [rsp+0h] [rbp-2C8h]\n  char *s; // [rsp+8h] [rbp-2C0h] BYREF\n  char v27[696]; // [rsp+10h] [rbp-2B8h] BYREF\n\n  result = sub_403AD0();\n  v1 = qword_617658;\n  if ( qword_617650 )\n  {\n    v2 = 0LL;\n    do\n    {\n      s = 0LL;\n      v8 = v1 + 8 * v2;\n      v9 = *(char **)(*(_QWORD *)v8 + 24LL);\n      v13 = dcgettext(0LL, v9, 5);\n      if ( **(_DWORD **)v8 == 2 )\n      {\n        v14 = dword_6176E8;\n        switch ( dword_617660 )\n        {\n          case 0:\n            goto LABEL_18;\n          case 4:\n            v14 = dword_6176E8;\n            if ( (dword_6176E8 & 0x10) == 0 )\n            {\nLABEL_18:\n              v18 = qword_6176E0;\n              v19 = qword_6176E0;\n              do\n              {\n                v20 = v18;\n                v18 >>= 10;\n                v21 = v20 & 0x3FF;\n                v22 = v19 % 0x3E8;\n                v19 /= 0x3E8uLL;\n              }\n              while ( !(v21 | v22) );\n              v23 = v21 == 0;\n              if ( (unsigned __int8)(v22 == 0) < (unsigned __int8)v23 )\n              {\n                v24 = v14 & 0x124;\n                LOBYTE(v24) = v14 & 4 | 0xB8;\n                goto LABEL_22;\n              }\n              if ( (unsigned __int8)(v22 == 0) > (unsigned __int8)v23 )\n              {\n                v24 = v14 & 0x104;\n                LOBYTE(v24) = v14 & 4 | 0x98;\n                goto LABEL_27;\n              }\n              v24 = v14 & 0x124;\n              LOBYTE(v24) = v14 & 0x24 | 0x98;\nLABEL_22:\n              if ( (v24 & 0x20) == 0 )\nLABEL_27:\n                BYTE1(v24) |= 1u;\n              v15 = sub_406FB0(qword_6176E0, v27, v24, 1LL, 1LL);\n              LODWORD(v13) = (unsigned int)dcgettext(0LL, \"blocks\", 5);\nLABEL_13:\n              v9 = dcgettext(0LL, \"%s-%s\", 5);\n              if ( (unsigned int)sub_40ACF0((unsigned int)&s, (_DWORD)v9, v15, (_DWORD)v13, v16, v17, v25) == -1 )\n                s = 0LL;\n              v3 = (unsigned __int8 *)s;\n              goto LABEL_4;\n            }\n            break;\n          case 3:\n            v15 = sub_407B40(qword_6176E0, v27, v10, v11, v12, (unsigned int)dword_6176E8);\n            goto LABEL_13;\n        }\n      }\n      s = strdup(v13);\n      v3 = (unsigned __int8 *)s;\nLABEL_4:\n      if ( !v3 )\n        sub_40A7B0(0LL, v9);\n      sub_403B50(v3);\n      v4 = s;\n      *(_QWORD *)(*(_QWORD *)(qword_617648 + 8 * qword_617640 - 8) + 8 * v2) = s;\n      v5 = *(_QWORD *)(*(_QWORD *)(qword_617658 + 8 * v2) + 32LL);\n      if ( v5 <= (int)sub_408190(v4) )\n      {\n        LODWORD(result) = sub_408190(s);\n        v1 = qword_617658;\n        result = (int)result;\n        v6 = *(_QWORD *)(qword_617658 + 8 * v2);\n      }\n      else\n      {\n        v1 = qword_617658;\n        v6 = *(_QWORD *)(qword_617658 + 8 * v2);\n        result = *(_QWORD *)(v6 + 32);\n      }\n      v7 = qword_617650 <= (unsigned __int64)++v2;\n      *(_QWORD *)(v6 + 32) = result;\n    }\n    while ( !v7 );\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_403E20",
            "funcStartAddr": "0x403e20",
            "funcEndAddr": "0x403ecc",
            "decompiledFuncCode": "__int64 __fastcall sub_403E20(int a1, __int64 a2)\n{\n  __int64 v3; // rsi\n  __int64 result; // rax\n\n  ++qword_617650;\n  v3 = 8 * qword_617650;\n  if ( (qword_617650 & 0x1000000000000000LL) != 0 || (unsigned __int64)qword_617650 >> 61 )\n    sub_40A7B0(qword_617658, v3);\n  qword_617658 = sub_40A5C0(qword_617658, v3);\n  *(_QWORD *)(qword_617658 + 8 * qword_617650 - 8) = 48LL * a1 + 6386464;\n  if ( a2 )\n    *((_QWORD *)&unk_617338 + 6 * a1) = a2;\n  result = 48LL * a1 + 6386464;\n  if ( byte_61734C[48 * a1] )\n    __assert_fail(\"!\\\"field used\\\"\", \"src/df.c\", 0x164u, \"alloc_field\");\n  byte_61734C[48 * a1] = 1;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_403ED0",
            "funcStartAddr": "0x403ed0",
            "funcEndAddr": "0x403f0f",
            "decompiledFuncCode": "_BYTE *__fastcall sub_403ED0(unsigned __int8 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5)\n{\n  __int64 v6; // rsi\n  _BYTE *result; // rax\n\n  v6 = a1 + a3;\n  if ( !a1 )\n    return (_BYTE *)sub_406FB0(a2, v6, (unsigned int)dword_6176E8, a4, a5);\n  result = (_BYTE *)(sub_406FB0(-a2, v6, (unsigned int)dword_6176E8, a4, a5) - 1);\n  *result = 45;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_403F10",
            "funcStartAddr": "0x403f10",
            "funcEndAddr": "0x40492c",
            "decompiledFuncCode": "void __fastcall sub_403F10(\n        char *s2,\n        __int64 *src,\n        char *a3,\n        char *a4,\n        char *a5,\n        char a6,\n        char a7,\n        const __m128i *a8,\n        char a9)\n{\n  __int64 *v10; // r14\n  char *v11; // r13\n  char *v14; // rdi\n  const char *v15; // rax\n  const char *v16; // rbx\n  size_t v17; // rax\n  __int64 v18; // rsi\n  unsigned __int64 v19; // r8\n  __int32 v20; // r9d\n  char v21; // al\n  __int64 v22; // rbx\n  __int64 v23; // rdx\n  _DWORD *v24; // rdx\n  __int64 v25; // rbp\n  int v26; // eax\n  unsigned __int64 v27; // rcx\n  unsigned __int64 v28; // rax\n  char *v29; // rdi\n  char *p_s; // rdi\n  unsigned __int64 v31; // r12\n  __int64 v32; // rcx\n  __int64 v33; // rax\n  bool v34; // cc\n  signed __int64 v35; // rdx\n  unsigned __int64 v36; // rsi\n  unsigned __int8 v37; // dl\n  unsigned __int64 v38; // rsi\n  char v39; // di\n  double v40; // xmm0_8\n  double v41; // xmm1_8\n  double v42; // xmm1_8\n  double v43; // xmm1_8\n  double v44; // xmm0_8\n  double v45; // xmm1_8\n  double v46; // xmm0_8\n  unsigned __int64 v47; // rax\n  unsigned __int64 v48; // rax\n  unsigned __int64 v49; // rax\n  unsigned __int64 v50; // rax\n  int *v51; // rax\n  int *v52; // rbx\n  int v53; // eax\n  const char *v54; // rax\n  __int64 v55; // rbx\n  char v56; // cl\n  unsigned __int64 v57; // rdx\n  __int64 v58; // rax\n  __int64 v59; // r12\n  unsigned __int64 v60; // rax\n  void *ptr; // [rsp+0h] [rbp-3B8h]\n  char *s; // [rsp+28h] [rbp-390h] BYREF\n  __m128i si128; // [rsp+30h] [rbp-388h]\n  __m128i v64; // [rsp+40h] [rbp-378h]\n  __m128i v65; // [rsp+50h] [rbp-368h]\n  unsigned __int64 v66; // [rsp+60h] [rbp-358h]\n  __int64 v67[4]; // [rsp+70h] [rbp-348h] BYREF\n  char v68; // [rsp+90h] [rbp-328h]\n  __int64 v69; // [rsp+98h] [rbp-320h]\n  __int64 v70; // [rsp+A0h] [rbp-318h]\n  bool v71; // [rsp+A8h] [rbp-310h]\n  __int64 v72[4]; // [rsp+B0h] [rbp-308h] BYREF\n  char v73; // [rsp+D0h] [rbp-2E8h]\n  unsigned __int64 v74; // [rsp+D8h] [rbp-2E0h]\n  unsigned __int64 v75; // [rsp+E0h] [rbp-2D8h]\n  bool v76; // [rsp+E8h] [rbp-2D0h]\n  struct stat stat_buf; // [rsp+F0h] [rbp-2C8h] BYREF\n\n  v10 = src;\n  v11 = a5;\n  if ( a7 && byte_6176ED )\n    return;\n  if ( a6 && !byte_6176EE && !byte_6176EC )\n    return;\n  if ( !(unsigned __int8)sub_403A10(a5) )\n    return;\n  v14 = v11;\n  if ( (unsigned __int8)sub_403A60(v11) )\n    return;\n  if ( !src || a8 )\n  {\n    if ( !a4 )\n    {\n      a4 = (char *)src;\n      if ( !src )\n        a4 = s2;\n    }\n    if ( a8 )\n    {\n      si128 = _mm_load_si128(a8);\n      v28 = a8[3].m128i_u64[0];\n      v64 = _mm_load_si128(a8 + 1);\n      v65 = _mm_load_si128(a8 + 2);\n      v66 = v28;\n      if ( !si128.m128i_i64[1] && !byte_6176EE && !byte_6176EC )\n        return;\n      goto LABEL_19;\n    }\n  }\n  else\n  {\n    if ( *(_BYTE *)src != 47 )\n      return;\n    if ( !a4 )\n      a4 = (char *)src;\n  }\n  src = (__int64 *)s2;\n  v14 = a4;\n  if ( !(unsigned int)sub_40B070(a4) )\n  {\n    if ( a9 )\n    {\n      if ( !byte_6176EE )\n      {\n        if ( !si128.m128i_i64[1] )\n          goto LABEL_17;\n        goto LABEL_18;\n      }\n      src = (__int64 *)a4;\n      v14 = (char *)1;\n      if ( !__xstat(1, a4, &stat_buf) )\n      {\n        v14 = (char *)qword_6176F0;\n        if ( qword_6176F0 )\n        {\n          src = v72;\n          v72[0] = stat_buf.st_dev;\n          v58 = sub_4061F0(qword_6176F0, v72);\n          if ( v58 )\n          {\n            v59 = *(_QWORD *)(v58 + 8);\n            if ( v59 )\n            {\n              v14 = *(char **)v59;\n              src = (__int64 *)s2;\n              if ( strcmp(*(const char **)v59, s2) )\n              {\n                if ( (*(_BYTE *)(v59 + 40) & 2) == 0 || !a7 )\n                {\n                  v65.m128i_i8[0] = 0;\n                  v11 = \"-\";\n                  v66 = -1LL;\n                  v65.m128i_i64[1] = -1LL;\n                  v64.m128i_i64[1] = -1LL;\n                  v64.m128i_i64[0] = -1LL;\n                  si128.m128i_i64[1] = -1LL;\n                  si128.m128i_i64[0] = -1LL;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    if ( !si128.m128i_i64[1] && !byte_6176EE )\n    {\nLABEL_17:\n      if ( !byte_6176EC )\n        return;\n    }\nLABEL_18:\n    byte_6176DD = 1;\nLABEL_19:\n    sub_403AD0(v14, src);\n    if ( !s2 )\n      s2 = \"-\";\n    if ( !a3 )\n      a3 = \"-\";\n    v15 = (const char *)sub_40A790(s2);\n    v16 = v15;\n    ptr = (void *)v15;\n    if ( a9 )\n    {\n      v17 = strlen(v15);\n      if ( v17 > 0x24 && strspn(&v16[v17 - 36], \"-0123456789abcdefABCDEF\") == 36 )\n      {\n        v55 = sub_405250(ptr);\n        if ( v55 )\n        {\n          free(ptr);\n          ptr = (void *)v55;\n        }\n      }\n    }\n    v18 = v65.m128i_i64[1];\n    if ( !v11 )\n      v11 = \"-\";\n    v73 = 0;\n    v72[1] = 1LL;\n    v72[0] = 1LL;\n    v72[2] = v65.m128i_i64[1];\n    v74 = v66;\n    v72[3] = v66;\n    v75 = -1LL;\n    v76 = 0;\n    if ( v65.m128i_i64[1] <= 0xFFFFFFFFFFFFFFFDLL && v66 <= 0xFFFFFFFFFFFFFFFDLL )\n    {\n      v75 = v65.m128i_i64[1] - v66;\n      v76 = v65.m128i_i64[1] < v66;\n    }\n    LODWORD(v19) = v64.m128i_i32[2];\n    v70 = -1LL;\n    v20 = si128.m128i_i32[0];\n    v71 = 0;\n    v67[1] = qword_6176E0;\n    v21 = v65.m128i_i8[0] & (v64.m128i_i64[1] <= 0xFFFFFFFFFFFFFFFDLL);\n    v67[2] = si128.m128i_i64[1];\n    v67[0] = si128.m128i_i64[0];\n    v67[3] = v64.m128i_i64[1];\n    v69 = v64.m128i_i64[0];\n    v68 = v21;\n    if ( si128.m128i_i64[1] <= 0xFFFFFFFFFFFFFFFDLL && v64.m128i_i64[0] <= 0xFFFFFFFFFFFFFFFDLL )\n    {\n      v70 = si128.m128i_i64[1] - v64.m128i_i64[0];\n      v71 = si128.m128i_i64[1] < (unsigned __int64)v64.m128i_i64[0];\n    }\n    if ( byte_6176B8 && !a8 )\n    {\n      if ( v65.m128i_i64[1] <= 0xFFFFFFFFFFFFFFFDLL )\n        qword_6176A8 += v65.m128i_i64[1];\n      if ( v66 <= 0xFFFFFFFFFFFFFFFDLL )\n        qword_6176B0 += v66;\n      if ( si128.m128i_i64[1] <= 0xFFFFFFFFFFFFFFFDLL )\n        qword_617688 += si128.m128i_i64[0] * si128.m128i_i64[1];\n      if ( v64.m128i_i64[0] <= 0xFFFFFFFFFFFFFFFDLL )\n        qword_617690 += si128.m128i_i64[0] * v64.m128i_i64[0];\n      if ( v64.m128i_i64[1] <= 0xFFFFFFFFFFFFFFFDLL )\n      {\n        v56 = byte_6176A0;\n        v19 = si128.m128i_i64[0] * v64.m128i_i64[1];\n        if ( byte_6176A0 == v21 )\n        {\n          v19 += qword_617698;\n          qword_617698 = v19;\n        }\n        else\n        {\n          v57 = -qword_617698;\n          if ( !byte_6176A0 )\n            v57 = qword_617698;\n          v18 = -(__int64)v19;\n          if ( v21 )\n            v19 = -(__int64)v19;\n          if ( v57 <= v19 )\n          {\n            v19 -= v57;\n            byte_6176A0 = v65.m128i_i8[0] & (v64.m128i_i64[1] <= 0xFFFFFFFFFFFFFFFDLL);\n            v56 = v65.m128i_i8[0] & (v64.m128i_i64[1] <= 0xFFFFFFFFFFFFFFFDLL);\n            qword_617698 = v19;\n          }\n          else\n          {\n            qword_617698 = v57 - v19;\n          }\n          if ( v56 )\n            qword_617698 = -qword_617698;\n        }\n      }\n    }\n    v22 = 0LL;\n    v23 = qword_617658;\n    if ( qword_617650 )\n    {\n      while ( 2 )\n      {\n        v24 = *(_DWORD **)(v23 + 8 * v22);\n        v25 = 8 * v22;\n        v26 = v24[4];\n        if ( v26 == 1 )\n        {\n          v27 = (unsigned __int64)v72;\n        }\n        else if ( v26 )\n        {\n          if ( v26 != 2 )\n            __assert_fail(\"!\\\"bad field_type\\\"\", \"src/df.c\", 0x435u, \"get_dev\");\n          v27 = 0LL;\n        }\n        else\n        {\n          v27 = (unsigned __int64)v67;\n        }\n        switch ( *v24 )\n        {\n          case 0:\n            p_s = (char *)sub_40A790(ptr);\n            s = p_s;\n            goto LABEL_49;\n          case 1:\n            p_s = (char *)sub_40A790(v11);\n            s = p_s;\n            goto LABEL_49;\n          case 2:\n          case 6:\n            v38 = *(_QWORD *)(v27 + 16);\n            v29 = \"-\";\n            if ( v38 <= 0xFFFFFFFFFFFFFFFDLL )\n              v29 = sub_403ED0(0, v38, (__int64)&stat_buf, *(_QWORD *)v27, *(_QWORD *)(v27 + 8));\n            goto LABEL_48;\n          case 3:\n          case 7:\n            v36 = *(_QWORD *)(v27 + 48);\n            v37 = *(_BYTE *)(v27 + 56);\n            if ( v36 <= 0xFFFFFFFFFFFFFFFDLL )\n              goto LABEL_60;\n            goto LABEL_59;\n          case 4:\n          case 8:\n            v36 = *(_QWORD *)(v27 + 24);\n            v37 = *(_BYTE *)(v27 + 32);\n            if ( v36 <= 0xFFFFFFFFFFFFFFFDLL )\n              goto LABEL_60;\nLABEL_59:\n            v29 = \"-\";\n            if ( v37 )\nLABEL_60:\n              v29 = sub_403ED0(v37, v36, (__int64)&stat_buf, *(_QWORD *)v27, *(_QWORD *)(v27 + 8));\nLABEL_48:\n            s = (char *)sub_40A790(v29);\n            p_s = s;\nLABEL_49:\n            if ( !p_s )\n              __assert_fail(\"!\\\"empty cell\\\"\", \"src/df.c\", 0x49Fu, \"get_dev\");\n            goto LABEL_50;\n          case 5:\n          case 9:\n            v35 = *(_QWORD *)(v27 + 48);\n            if ( (unsigned __int64)v35 > 0xFFFFFFFFFFFFFFFDLL )\n              goto LABEL_55;\n            v18 = *(_QWORD *)(v27 + 24);\n            if ( (unsigned __int64)v18 > 0xFFFFFFFFFFFFFFFDLL )\n              goto LABEL_55;\n            v39 = *(_BYTE *)(v27 + 32);\n            if ( *(_BYTE *)(v27 + 56) )\n            {\n              v35 = -v35;\n              if ( v35 < 0 )\n              {\n                v48 = v35;\n                LODWORD(v35) = v35 & 1;\n                v46 = (double)(int)(v35 | (v48 >> 1)) + (double)(int)(v35 | (v48 >> 1));\n              }\n              else\n              {\n                v46 = (double)(int)v35;\n              }\n              v40 = -v46;\n            }\n            else\n            {\n              if ( (unsigned __int64)v35 <= 0x28F5C28F5C28F5CLL )\n              {\n                v27 = v18 + v35;\n                if ( v18 + v35 )\n                {\n                  if ( v39 == __CFADD__(v18, v35) )\n                  {\n                    v35 = 100 * v35 / v27 + (100 * v35 % v27 != 0);\n                    if ( v35 < 0 )\n                    {\n                      v60 = v35;\n                      LODWORD(v35) = v35 & 1;\n                      v44 = (double)(int)(v35 | (v60 >> 1)) + (double)(int)(v35 | (v60 >> 1));\n                    }\n                    else\n                    {\n                      v44 = (double)(int)v35;\n                    }\n                    goto LABEL_85;\n                  }\n                }\n              }\n              if ( v35 < 0 )\n              {\n                v49 = v35;\n                LODWORD(v35) = v35 & 1;\n                v40 = (double)(int)(v35 | (v49 >> 1)) + (double)(int)(v35 | (v49 >> 1));\n              }\n              else\n              {\n                v40 = (double)(int)v35;\n              }\n            }\n            if ( v39 )\n            {\n              v18 = -v18;\n              if ( v18 < 0 )\n              {\n                v47 = v18;\n                v18 &= 1u;\n                v41 = (double)(int)(v18 | (v47 >> 1)) + (double)(int)(v18 | (v47 >> 1));\n              }\n              else\n              {\n                v41 = (double)(int)v18;\n              }\n              v42 = -v41;\n            }\n            else if ( v18 < 0 )\n            {\n              v50 = v18;\n              v18 &= 1u;\n              v42 = (double)(int)(v18 | (v50 >> 1)) + (double)(int)(v18 | (v50 >> 1));\n            }\n            else\n            {\n              v42 = (double)(int)v18;\n            }\n            v43 = v42 + v40;\n            if ( v43 == 0.0 )\n            {\nLABEL_55:\n              s = strdup(\"-\");\n              p_s = s;\n              goto LABEL_56;\n            }\n            v44 = v40 * 100.0 / v43;\n            v45 = (double)(int)v44;\n            if ( v44 > v45 - 1.0 && v45 + 1.0 >= v44 )\n            {\n              if ( v44 > v45 )\n                v44 = v45 + 1.0;\n              else\n                v44 = v45 + 0.0;\n            }\nLABEL_85:\n            if ( v44 < 0.0 )\n              goto LABEL_55;\n            v18 = (__int64)\"%.0f%%\";\n            p_s = (char *)&s;\n            if ( (unsigned int)sub_40ACF0((unsigned int)&s, (unsigned int)\"%.0f%%\", v35, v27, v19, v20, (char)ptr) == -1 )\n            {\n              s = 0LL;\nLABEL_89:\n              sub_40A7B0(p_s, v18);\n            }\n            p_s = s;\nLABEL_56:\n            if ( !p_s )\n              goto LABEL_89;\nLABEL_50:\n            sub_403B50((unsigned __int8 *)p_s);\n            v18 = 0LL;\n            v31 = *(_QWORD *)(*(_QWORD *)(qword_617658 + 8 * v22) + 32LL);\n            if ( v31 <= (int)sub_408190(s) )\n            {\n              v18 = 0LL;\n              LODWORD(v33) = sub_408190(s);\n              v23 = qword_617658;\n              v33 = (int)v33;\n              v32 = *(_QWORD *)(qword_617658 + 8 * v22);\n            }\n            else\n            {\n              v23 = qword_617658;\n              v32 = *(_QWORD *)(qword_617658 + 8 * v22);\n              v33 = *(_QWORD *)(v32 + 32);\n            }\n            *(_QWORD *)(v32 + 32) = v33;\n            v34 = qword_617650 <= (unsigned __int64)++v22;\n            *(_QWORD *)(*(_QWORD *)(qword_617648 + 8 * qword_617640 - 8) + v25) = s;\n            if ( v34 )\n              break;\n            continue;\n          case 0xA:\n            v29 = (char *)v10;\n            goto LABEL_48;\n          case 0xB:\n            v29 = a3;\n            goto LABEL_48;\n          default:\n            __assert_fail(\"!\\\"unhandled field\\\"\", \"src/df.c\", 0x49Bu, \"get_dev\");\n        }\n        break;\n      }\n    }\n    free(ptr);\n    return;\n  }\n  v51 = __errno_location();\n  v52 = v51;\n  if ( !a9 || (v53 = *v51, v53 != 13) && v53 != 2 )\n  {\n    v54 = (const char *)sub_409C60(0LL, 3LL, a4);\n    error(0, *v52, \"%s\", v54);\n    dword_6176D8 = 1;\n    return;\n  }\n  if ( byte_6176EE )\n  {\n    v65.m128i_i8[0] = 0;\n    v11 = \"-\";\n    v66 = -1LL;\n    v65.m128i_i64[1] = -1LL;\n    v64.m128i_i64[1] = -1LL;\n    v64.m128i_i64[0] = -1LL;\n    si128.m128i_i64[1] = -1LL;\n    si128.m128i_i64[0] = -1LL;\n    goto LABEL_18;\n  }\n}\n"
        },
        {
            "funcName": "sub_404930",
            "funcStartAddr": "0x404930",
            "funcEndAddr": "0x404d5d",
            "decompiledFuncCode": "void __fastcall __noreturn sub_404930(int status)\n{\n  __int64 v1; // rbp\n  char *v2; // rax\n  char *v3; // rax\n  FILE *v4; // rbp\n  char *v5; // rax\n  FILE *v6; // rbp\n  char *v7; // rax\n  FILE *v8; // rbp\n  char *v9; // rax\n  FILE *v10; // rbp\n  char *v11; // rax\n  FILE *v12; // rbp\n  char *v13; // rax\n  FILE *v14; // rbp\n  char *v15; // rax\n  FILE *v16; // rbp\n  char *v17; // rax\n  FILE *v18; // rbp\n  char *v19; // rax\n  FILE *v20; // rbp\n  char *v21; // rax\n  char *v22; // rax\n  FILE *v23; // rbp\n  char *v24; // rax\n  FILE *v25; // rbp\n  char *v26; // rax\n  __int64 *v27; // rax\n  const char *v28; // rbp\n  char *v29; // rax\n  char *v30; // rax\n  char *v31; // rax\n  char *v32; // rax\n  char *v33; // rax\n  char *v34; // rax\n  char *v35; // rax\n  char *v36; // rax\n  __int64 v37[17]; // [rsp+0h] [rbp-88h] BYREF\n\n  v1 = qword_617708;\n  if ( status )\n  {\n    v2 = dcgettext(0LL, \"Try '%s --help' for more information.\\n\", 5);\n    __fprintf_chk(stderr, 1LL, v2, v1);\n    goto LABEL_3;\n  }\n  v3 = dcgettext(0LL, \"Usage: %s [OPTION]... [FILE]...\\n\", 5);\n  __printf_chk(1LL, v3, v1);\n  v4 = stdout;\n  v5 = dcgettext(\n         0LL,\n         \"Show information about the file system on which each FILE resides,\\nor all file systems by default.\\n\",\n         5);\n  fputs_unlocked(v5, v4);\n  v6 = stdout;\n  v7 = dcgettext(0LL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5);\n  fputs_unlocked(v7, v6);\n  v8 = stdout;\n  v9 = dcgettext(\n         0LL,\n         \"  -a, --all             include pseudo, duplicate, inaccessible file systems\\n\"\n         \"  -B, --block-size=SIZE  scale sizes by SIZE before printing them; e.g.,\\n\"\n         \"                           '-BM' prints sizes in units of 1,048,576 bytes;\\n\"\n         \"                           see SIZE format below\\n\"\n         \"  -h, --human-readable  print sizes in powers of 1024 (e.g., 1023M)\\n\"\n         \"  -H, --si              print sizes in powers of 1000 (e.g., 1.1G)\\n\",\n         5);\n  fputs_unlocked(v9, v8);\n  v10 = stdout;\n  v11 = dcgettext(\n          0LL,\n          \"  -i, --inodes          list inode information instead of block usage\\n\"\n          \"  -k                    like --block-size=1K\\n\"\n          \"  -l, --local           limit listing to local file systems\\n\"\n          \"      --no-sync         do not invoke sync before getting usage info (default)\\n\",\n          5);\n  fputs_unlocked(v11, v10);\n  v12 = stdout;\n  v13 = dcgettext(\n          0LL,\n          \"      --output[=FIELD_LIST]  use the output format defined by FIELD_LIST,\\n\"\n          \"                               or print all fields if FIELD_LIST is omitted.\\n\"\n          \"  -P, --portability     use the POSIX output format\\n\"\n          \"      --sync            invoke sync before getting usage info\\n\",\n          5);\n  fputs_unlocked(v13, v12);\n  v14 = stdout;\n  v15 = dcgettext(\n          0LL,\n          \"      --total           elide all entries insignificant to available space,\\n\"\n          \"                          and produce a grand total\\n\",\n          5);\n  fputs_unlocked(v15, v14);\n  v16 = stdout;\n  v17 = dcgettext(\n          0LL,\n          \"  -t, --type=TYPE       limit listing to file systems of type TYPE\\n\"\n          \"  -T, --print-type      print file system type\\n\"\n          \"  -x, --exclude-type=TYPE   limit listing to file systems not of type TYPE\\n\"\n          \"  -v                    (ignored)\\n\",\n          5);\n  fputs_unlocked(v17, v16);\n  v18 = stdout;\n  v19 = dcgettext(0LL, \"      --help     display this help and exit\\n\", 5);\n  fputs_unlocked(v19, v18);\n  v20 = stdout;\n  v21 = dcgettext(0LL, \"      --version  output version information and exit\\n\", 5);\n  fputs_unlocked(v21, v20);\n  v22 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"Display values are in units of the first available SIZE from --block-size,\\n\"\n          \"and the %s_BLOCK_SIZE, BLOCK_SIZE and BLOCKSIZE environment variables.\\n\"\n          \"Otherwise, units default to 1024 bytes (or 512 if POSIXLY_CORRECT is set).\\n\",\n          5);\n  __printf_chk(1LL, v22, \"DF\");\n  v23 = stdout;\n  v24 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"The SIZE argument is an integer and optional unit (example: 10K is 10*1024).\\n\"\n          \"Units are K,M,G,T,P,E,Z,Y (powers of 1024) or KB,MB,... (powers of 1000).\\n\",\n          5);\n  fputs_unlocked(v24, v23);\n  v25 = stdout;\n  v26 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"FIELD_LIST is a comma-separated list of columns to be included.  Valid\\n\"\n          \"field names are: 'source', 'fstype', 'itotal', 'iused', 'iavail', 'ipcent',\\n\"\n          \"'size', 'used', 'avail', 'pcent', 'file' and 'target' (see info page).\\n\",\n          5);\n  fputs_unlocked(v26, v25);\n  v37[0] = (__int64)\"[\";\n  v27 = v37;\n  v37[1] = (__int64)\"test invocation\";\n  v37[2] = (__int64)\"coreutils\";\n  v37[3] = (__int64)\"Multi-call invocation\";\n  v37[4] = (__int64)\"sha224sum\";\n  v37[5] = (__int64)\"sha2 utilities\";\n  v37[6] = (__int64)\"sha256sum\";\n  v37[7] = (__int64)\"sha2 utilities\";\n  v37[8] = (__int64)\"sha384sum\";\n  v37[9] = (__int64)\"sha2 utilities\";\n  v37[10] = (__int64)\"sha512sum\";\n  v37[11] = (__int64)\"sha2 utilities\";\n  v37[12] = 0LL;\n  v37[13] = 0LL;\n  do\n    v27 += 2;\n  while ( *v27 && strcmp(\"df\", (const char *)*v27) );\n  v28 = (const char *)v27[1];\n  if ( v28 )\n  {\n    v29 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v29, &unk_4110B6);\n    v30 = setlocale(5, 0LL);\n    if ( !v30 || !strncmp(v30, \"en_\", 3uLL) )\n      goto LABEL_10;\n  }\n  else\n  {\n    v33 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v33, &unk_4110B6);\n    v34 = setlocale(5, 0LL);\n    if ( !v34 || !strncmp(v34, \"en_\", 3uLL) )\n    {\n      v28 = \"df\";\n      v35 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n      __printf_chk(1LL, v35, \"https://www.gnu.org/software/coreutils/\");\n      goto LABEL_11;\n    }\n    v28 = \"df\";\n  }\n  v36 = dcgettext(0LL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5);\n  __printf_chk(1LL, v36, \"df\");\nLABEL_10:\n  v31 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n  __printf_chk(1LL, v31, \"https://www.gnu.org/software/coreutils/\");\nLABEL_11:\n  v32 = dcgettext(0LL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5);\n  __printf_chk(1LL, v32, v28);\nLABEL_3:\n  exit(status);\n}\n"
        },
        {
            "funcName": "sub_404D60",
            "funcStartAddr": "0x404d60",
            "funcEndAddr": "0x404ec1",
            "decompiledFuncCode": "void __fastcall sub_404D60(void *a1)\n{\n  char *v1; // r14\n  const char *v2; // rbp\n  const char *v3; // r13\n  char *v4; // rax\n  __int64 v5; // rbx\n  const char *v6; // r15\n  const char *v7; // rsi\n  __int64 v8; // rbx\n  char *v9; // rax\n  __int64 v10; // rax\n\n  v1 = (char *)sub_40A790(a1);\n  v2 = v1;\n  do\n  {\n    v3 = 0LL;\n    v4 = strchr(v2, 44);\n    if ( v4 )\n    {\n      *v4 = 0;\n      v3 = v4 + 1;\n    }\n    v5 = 0LL;\n    while ( 1 )\n    {\n      v6 = (&off_617328)[6 * v5];\n      if ( !strcmp(v6, v2) )\n        break;\n      if ( ++v5 == 12 )\n      {\n        v7 = \"option --output: field %s unknown\";\n        v8 = sub_409DE0(v2);\n        goto LABEL_8;\n      }\n    }\n    if ( byte_61734C[48 * (unsigned int)v5] )\n    {\n      v7 = \"option --output: field %s used more than once\";\n      v8 = sub_409DE0(v6);\nLABEL_8:\n      v9 = dcgettext(0LL, v7, 5);\n      error(0, 0, v9, v8);\n      sub_404930(1);\n    }\n    v10 = 1LL << v5;\n    if ( ((1LL << v5) & 0xFEB) != 0 )\n    {\n      sub_403E20(v5, 0LL);\n    }\n    else if ( (v10 & 0x10) != 0 )\n    {\n      sub_403E20(v5, (__int64)\"Avail\");\n    }\n    else\n    {\n      if ( (v10 & 4) == 0 )\n        __assert_fail(\"!\\\"invalid field\\\"\", \"src/df.c\", 0x1ABu, \"decode_output_arg\");\n      sub_403E20(v5, (__int64)\"Size\");\n    }\n    v2 = v3;\n  }\n  while ( v3 );\n  free(v1);\n}\n"
        },
        {
            "funcName": "sub_404ED0",
            "funcStartAddr": "0x404ed0",
            "funcEndAddr": "0x405250",
            "decompiledFuncCode": "__int64 __fastcall sub_404ED0(char *path, const __m128i *a2)\n{\n  int v2; // r13d\n  int *v3; // r12\n  char *v4; // rbx\n  size_t v5; // rax\n  void *v6; // rsp\n  const char *v7; // r13\n  __int64 v8; // rbx\n  char *v9; // rax\n  __int64 v10; // rcx\n  __int64 v11; // rbx\n  __m128i si128; // xmm1\n  __m128i v13; // xmm2\n  __m128i v14; // xmm3\n  __m128i v15; // xmm4\n  __m128i v16; // xmm5\n  __m128i v17; // xmm6\n  __m128i v18; // xmm7\n  __m128i v19; // xmm0\n  const char *v20; // rsi\n  __int64 v21; // rbx\n  char *v22; // rax\n  __int64 v23; // rcx\n  int v24; // r13d\n  __m128i v26; // xmm2\n  __m128i v27; // xmm3\n  __m128i v28; // xmm4\n  __m128i v29; // xmm5\n  __m128i v30; // xmm6\n  __m128i v31; // xmm7\n  __m128i v32; // xmm1\n  __m128i v33; // xmm2\n  char *v34; // rsi\n  __int64 v35; // rbx\n  char *v36; // rax\n  __int64 v37; // rcx\n  char *v38; // rax\n  char *v39; // rax\n  char v40[15]; // [rsp+0h] [rbp-150h] BYREF\n  struct stat stat_buf; // [rsp+10h] [rbp-140h] BYREF\n  struct stat v42; // [rsp+A0h] [rbp-B0h] BYREF\n\n  v2 = sub_409F30(v40);\n  v3 = __errno_location();\n  if ( v2 )\n  {\n    v11 = 0LL;\n    v38 = dcgettext(0LL, \"cannot get current directory\", 5);\n    error(0, *v3, v38);\n    return v11;\n  }\n  if ( (a2[1].m128i_i32[2] & 0xF000) == 0x4000 )\n  {\n    v26 = _mm_loadu_si128(a2 + 1);\n    v27 = _mm_loadu_si128(a2 + 2);\n    v28 = _mm_loadu_si128(a2 + 3);\n    *(__m128i *)&stat_buf.st_dev = _mm_loadu_si128(a2);\n    v29 = _mm_loadu_si128(a2 + 4);\n    v30 = _mm_loadu_si128(a2 + 5);\n    *(__m128i *)&stat_buf.st_nlink = v26;\n    v31 = _mm_loadu_si128(a2 + 6);\n    v32 = _mm_loadu_si128(a2 + 7);\n    v33 = _mm_loadu_si128(a2 + 8);\n    *(__m128i *)&stat_buf.st_gid = v27;\n    *(__m128i *)&stat_buf.st_size = v28;\n    *(__m128i *)&stat_buf.st_blocks = v29;\n    *(__m128i *)&stat_buf.st_atim.tv_nsec = v30;\n    *(__m128i *)&stat_buf.st_mtim.tv_nsec = v31;\n    *(__m128i *)&stat_buf.st_ctim.tv_nsec = v32;\n    *(__m128i *)&stat_buf.__unused[1] = v33;\n    v34 = path;\n    if ( chdir(path) >= 0 )\n    {\nLABEL_10:\n      while ( __xstat(1, \"..\", &v42) >= 0 )\n      {\n        if ( v42.st_dev != stat_buf.st_dev || v42.st_ino == stat_buf.st_ino )\n        {\n          v11 = sub_40A7F0();\n          goto LABEL_14;\n        }\n        if ( chdir(\"..\") < 0 )\n        {\n          v20 = \"cannot change to directory %s\";\n          v21 = sub_409B90(4LL, \"..\");\n          goto LABEL_12;\n        }\n        si128 = _mm_load_si128((const __m128i *)&v42.st_nlink);\n        v13 = _mm_load_si128((const __m128i *)&v42.st_gid);\n        v14 = _mm_load_si128((const __m128i *)&v42.st_size);\n        *(__m128i *)&stat_buf.st_dev = _mm_load_si128((const __m128i *)&v42);\n        v15 = _mm_load_si128((const __m128i *)&v42.st_blocks);\n        v16 = _mm_load_si128((const __m128i *)&v42.st_atim.tv_nsec);\n        v17 = _mm_load_si128((const __m128i *)&v42.st_mtim.tv_nsec);\n        v18 = _mm_load_si128((const __m128i *)&v42.st_ctim.tv_nsec);\n        *(__m128i *)&stat_buf.st_nlink = si128;\n        v19 = _mm_load_si128((const __m128i *)&v42.__unused[1]);\n        *(__m128i *)&stat_buf.st_gid = v13;\n        *(__m128i *)&stat_buf.st_size = v14;\n        *(__m128i *)&stat_buf.st_blocks = v15;\n        *(__m128i *)&stat_buf.st_atim.tv_nsec = v16;\n        *(__m128i *)&stat_buf.st_mtim.tv_nsec = v17;\n        *(__m128i *)&stat_buf.st_ctim.tv_nsec = v18;\n        *(__m128i *)&stat_buf.__unused[1] = v19;\n      }\n      v20 = \"cannot stat %s\";\n      v21 = sub_409B90(4LL, \"..\");\nLABEL_12:\n      v22 = dcgettext(0LL, v20, 5);\n      v23 = v21;\n      v11 = 0LL;\n      error(0, *v3, v22, v23);\n      goto LABEL_14;\n    }\n    goto LABEL_18;\n  }\n  v4 = (char *)sub_405990(path);\n  v5 = strlen(v4);\n  v6 = alloca(v5 + 9);\n  v7 = (const char *)memcpy(v40, v4, v5 + 1);\n  free(v4);\n  if ( chdir(v7) < 0 )\n  {\n    v34 = (char *)v7;\nLABEL_18:\n    v35 = sub_409B90(4LL, v34);\n    v36 = dcgettext(0LL, \"cannot change to directory %s\", 5);\n    v37 = v35;\n    v11 = 0LL;\n    error(0, *v3, v36, v37);\n    return v11;\n  }\n  if ( __xstat(1, \".\", &stat_buf) >= 0 )\n    goto LABEL_10;\n  v8 = sub_409B90(4LL, v7);\n  v9 = dcgettext(0LL, \"cannot stat current directory (now %s)\", 5);\n  v10 = v8;\n  v11 = 0LL;\n  error(0, *v3, v9, v10);\nLABEL_14:\n  v24 = *v3;\n  if ( !(unsigned int)sub_409F80(v40) )\n  {\n    sub_409FA0(v40);\n    *v3 = v24;\n    return v11;\n  }\n  v39 = dcgettext(0LL, \"failed to return to initial working directory\", 5);\n  error(1, *v3, v39);\n  return sub_405250((void *)1);\n}\n"
        },
        {
            "funcName": "sub_405250",
            "funcStartAddr": "0x405250",
            "funcEndAddr": "0x4058c3",
            "decompiledFuncCode": "_BYTE *__fastcall sub_405250(_BYTE *src, char a2)\n{\n  _BYTE *v2; // r15\n  const char *v3; // rax\n  _BYTE *v4; // r12\n  size_t v5; // rax\n  size_t v6; // rbx\n  _BYTE *v7; // rbx\n  _BYTE *v8; // rbp\n  char v9; // al\n  char v10; // dl\n  _BYTE *i; // r13\n  _BYTE *v12; // r14\n  signed __int64 v13; // r8\n  __int64 v14; // rbp\n  __int64 v15; // rbx\n  __int64 v16; // rax\n  __int64 v17; // rbp\n  __int64 v18; // rax\n  bool v19; // al\n  int *v20; // rdx\n  int v21; // ecx\n  size_t v22; // rax\n  int v23; // eax\n  _BYTE *v24; // rax\n  const char *v26; // rax\n  char *v27; // r15\n  const char *v28; // rdi\n  size_t v29; // r13\n  size_t v30; // rax\n  size_t v31; // rdx\n  unsigned __int64 v32; // r8\n  int *v33; // rax\n  int v34; // ecx\n  int *v35; // rdx\n  int *v36; // rdx\n  int v37; // ecx\n  _BYTE *v38; // rdx\n  int *v39; // rax\n  __int64 v40; // rax\n  __int64 v41; // rax\n  __int64 v42; // rax\n  bool v43; // zf\n  signed __int64 v44; // [rsp+8h] [rbp-100h]\n  int *v45; // [rsp+8h] [rbp-100h]\n  int *v46; // [rsp+8h] [rbp-100h]\n  int *v47; // [rsp+8h] [rbp-100h]\n  int *v48; // [rsp+8h] [rbp-100h]\n  size_t v49; // [rsp+8h] [rbp-100h]\n  __int64 v50; // [rsp+8h] [rbp-100h]\n  int v51; // [rsp+14h] [rbp-F4h]\n  int v52; // [rsp+14h] [rbp-F4h]\n  int v53; // [rsp+14h] [rbp-F4h]\n  int v54; // [rsp+14h] [rbp-F4h]\n  void *v55; // [rsp+18h] [rbp-F0h]\n  _BYTE *v56; // [rsp+20h] [rbp-E8h]\n  size_t v57; // [rsp+20h] [rbp-E8h]\n  char *ptr; // [rsp+28h] [rbp-E0h]\n  unsigned __int64 v59; // [rsp+30h] [rbp-D8h]\n  int v60; // [rsp+3Ch] [rbp-CCh]\n  struct stat stat_buf; // [rsp+40h] [rbp-C8h] BYREF\n\n  v51 = a2 & 3;\n  if ( ((v51 - 1) & (unsigned __int8)v51) != 0 || (v2 = src) == 0LL )\n  {\n    v4 = 0LL;\n    *__errno_location() = 22;\n    return v4;\n  }\n  if ( !*src )\n  {\n    v4 = 0LL;\n    *__errno_location() = 2;\n    return v4;\n  }\n  if ( *src == 47 )\n  {\n    v4 = (_BYTE *)sub_40A560(4096LL);\n    v8 = v4 + 4096;\n    v7 = v4 + 1;\n    *v4 = 47;\n  }\n  else\n  {\n    v3 = (const char *)sub_40A7F0();\n    v4 = v3;\n    if ( !v3 )\n      return v4;\n    v5 = strlen(v3);\n    v6 = v5;\n    if ( v5 <= 0xFFF )\n    {\n      v4 = (_BYTE *)sub_40A5C0(v4, 4096LL);\n      v7 = &v4[v6];\n      v8 = v4 + 4096;\n    }\n    else\n    {\n      v7 = &v4[v5];\n      v8 = &v4[v5];\n    }\n  }\n  v56 = src;\n  v9 = *src;\n  v55 = 0LL;\n  v59 = 0LL;\n  ptr = 0LL;\n  while ( v9 )\n  {\n    v10 = v9;\n    if ( v9 == 47 )\n    {\n      do\n        v10 = *++v2;\n      while ( *v2 == 47 );\n      if ( !v10 )\n        break;\n    }\n    for ( i = v2; ; ++i )\n    {\n      v9 = i[1];\n      v12 = i + 1;\n      if ( !v9 || v9 == 47 )\n        break;\n    }\n    if ( v12 == v2 )\n      break;\n    v13 = v12 - v2;\n    if ( v12 - v2 == 1 )\n    {\n      if ( v10 == 46 )\n        goto LABEL_46;\n      goto LABEL_21;\n    }\n    if ( v10 == 46 && v13 == 2 && v2[1] == 46 )\n    {\n      v2 = i + 1;\n      if ( v7 > v4 + 1 )\n      {\n        v38 = v7 - 1;\n        if ( v4 >= v7 - 1 || *(v7 - 2) == 47 )\n        {\n          --v7;\n        }\n        else\n        {\n          v7 -= 2;\n          if ( v4 != v38 - 1 )\n          {\n            do\n            {\n              if ( *(v7 - 1) == 47 )\n                break;\n              --v7;\n            }\n            while ( v4 != v7 );\n          }\nLABEL_46:\n          v2 = i + 1;\n        }\n      }\n    }\n    else\n    {\nLABEL_21:\n      if ( *(v7 - 1) != 47 )\n        *v7++ = 47;\n      if ( v8 <= &v7[v13] )\n      {\n        v14 = v8 - v4;\n        v15 = v7 - v4;\n        v16 = v13 + v14 + 1;\n        v17 = v14 + 4096;\n        if ( v13 >= 4096 )\n          v17 = v16;\n        v18 = sub_40A5C0(v4, v17);\n        v13 = v12 - v2;\n        v4 = (_BYTE *)v18;\n        v8 = (_BYTE *)(v18 + v17);\n        v7 = (_BYTE *)(v18 + v15);\n      }\n      v44 = v13;\n      memcpy(v7, v2, v13);\n      v7 += v44;\n      *v7 = 0;\n      if ( v51 == 2 && (a2 & 4) != 0 )\n      {\nLABEL_29:\n        stat_buf.st_mode = 0;\nLABEL_30:\n        if ( *v12 && v51 != 2 )\n        {\n          v39 = __errno_location();\n          v21 = 20;\n          v20 = v39;\nLABEL_79:\n          v54 = v21;\n          v48 = v20;\n          free(ptr);\n          free(v4);\n          v36 = v48;\n          v37 = v54;\n          if ( v55 )\n            goto LABEL_68;\n          goto LABEL_69;\n        }\nLABEL_32:\n        v9 = *v12;\n        v2 = v12;\n      }\n      else\n      {\n        if ( (a2 & 4) != 0 )\n          v19 = __xstat(1, v4, &stat_buf) != 0;\n        else\n          v19 = __lxstat(1, v4, &stat_buf) != 0;\n        if ( v19 )\n        {\n          v20 = __errno_location();\n          v21 = *v20;\n          if ( (a2 & 3) == 0 )\n            goto LABEL_79;\n          if ( v51 != 1 )\n            goto LABEL_29;\n          v60 = *v20;\n          v45 = v20;\n          v22 = strspn(i + 1, \"/\");\n          v20 = v45;\n          v21 = v60;\n          if ( v12[v22] || v60 != 2 )\n            goto LABEL_79;\n        }\n        else\n        {\n          v23 = stat_buf.st_mode & 0xF000;\n          if ( v23 != 40960 )\n          {\n            if ( v23 == 0x4000 )\n              goto LABEL_32;\n            goto LABEL_30;\n          }\n          if ( !v55 )\n          {\n            v55 = (void *)sub_406460(7LL, 0LL, sub_406E20, sub_406E90, sub_406ED0);\n            if ( !v55 )\n              sub_40A7B0(7LL, 0LL);\n          }\n          if ( (unsigned __int8)sub_405B90(v55, v56, &stat_buf) )\n          {\n            if ( v51 != 2 )\n            {\n              v33 = __errno_location();\n              v34 = 40;\n              v35 = v33;\nLABEL_67:\n              v52 = v34;\n              v46 = v35;\n              free(ptr);\n              free(v4);\n              v36 = v46;\n              v37 = v52;\nLABEL_68:\n              v53 = v37;\n              v47 = v36;\n              sub_4066A0(v55);\n              v37 = v53;\n              v36 = v47;\nLABEL_69:\n              *v36 = v37;\n              return 0LL;\n            }\n          }\n          else\n          {\n            sub_405B00(v55, v56, &stat_buf);\n            v26 = (const char *)sub_40D6B0(v4);\n            v27 = (char *)v26;\n            if ( v26 )\n            {\n              v28 = i + 1;\n              v29 = strlen(v26);\n              v30 = strlen(v28);\n              v31 = v30;\n              v32 = v29 + v30 + 1;\n              if ( v59 )\n              {\n                if ( v32 > v59 )\n                {\n                  v50 = v29 + v30 + 1;\n                  v57 = v30;\n                  v42 = sub_40A5C0(ptr, v50);\n                  v31 = v57;\n                  ptr = (char *)v42;\n                  v59 = v50;\n                }\n              }\n              else\n              {\n                v49 = v30;\n                v40 = 4096LL;\n                if ( v32 >= 0x1000 )\n                  v40 = v32;\n                v59 = v40;\n                v41 = sub_40A560(v40);\n                v31 = v49;\n                ptr = (char *)v41;\n              }\n              memmove(&ptr[v29], v12, v31 + 1);\n              v12 = memcpy(ptr, v27, v29);\n              v56 = v12;\n              if ( *v27 == 47 )\n              {\n                *v4 = 47;\n                v7 = v4 + 1;\n              }\n              else if ( v7 > v4 + 1 )\n              {\n                if ( v4 >= v7 - 1 )\n                {\n                  --v7;\n                }\n                else\n                {\n                  v43 = *(v7 - 2) == 47;\n                  --v7;\n                  if ( !v43 )\n                  {\n                    do\n                      --v7;\n                    while ( v4 != v7 && *(v7 - 1) != 47 );\n                  }\n                }\n              }\n              free(v27);\n              goto LABEL_32;\n            }\n            v35 = __errno_location();\n            v34 = *v35;\n            if ( v51 != 2 || v34 == 12 )\n              goto LABEL_67;\n          }\n        }\n        v9 = i[1];\n        v2 = i + 1;\n      }\n    }\n  }\n  if ( v7 > v4 + 1 && *(v7 - 1) == 47 )\n    v24 = v7--;\n  else\n    v24 = v7 + 1;\n  *v7 = 0;\n  if ( v8 != v24 )\n    v4 = (_BYTE *)sub_40A5C0(v4, v7 - v4 + 1);\n  free(ptr);\n  if ( v55 )\n    sub_4066A0(v55);\n  return v4;\n}\n"
        },
        {
            "funcName": "sub_4058F0",
            "funcStartAddr": "0x4058f0",
            "funcEndAddr": "0x40598e",
            "decompiledFuncCode": "__int64 sub_4058F0()\n{\n  int *v0; // rax\n  int *v1; // rbx\n  __int64 result; // rax\n  char *v3; // rax\n  const char *v4; // rbp\n  const char *v5; // rax\n\n  if ( (unsigned int)sub_40DB30(stdout) )\n  {\n    v0 = __errno_location();\n    v1 = v0;\n    if ( !byte_6176F8 || *v0 != 32 )\n    {\n      v3 = dcgettext(0LL, \"write error\", 5);\n      v4 = v3;\n      if ( qword_617700 )\n      {\n        v5 = (const char *)sub_409C30();\n        error(0, *v1, \"%s: %s\", v5, v4);\n      }\n      else\n      {\n        error(0, *v1, \"%s\", v3);\n      }\nLABEL_8:\n      _exit(status);\n    }\n  }\n  result = sub_40DB30(stderr);\n  if ( (_DWORD)result )\n    goto LABEL_8;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_405990",
            "funcStartAddr": "0x405990",
            "funcEndAddr": "0x4059a8",
            "decompiledFuncCode": "__int64 __fastcall sub_405990(void *a1, __int64 a2)\n{\n  __int64 result; // rax\n\n  result = sub_405A10(a1);\n  if ( !result )\n    sub_40A7B0(a1, a2);\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4059B0",
            "funcStartAddr": "0x4059b0",
            "funcEndAddr": "0x405a0d",
            "decompiledFuncCode": "__int64 __fastcall sub_4059B0(_BYTE *a1)\n{\n  unsigned __int64 v1; // rbp\n  __int64 v2; // rax\n  __int64 v3; // rdx\n\n  v1 = *a1 == 47;\n  v2 = sub_405A70();\n  if ( v2 - (__int64)a1 <= v1 )\n    return v2 - (_QWORD)a1;\n  v3 = v2 - (_QWORD)a1 - 1;\n  if ( *(_BYTE *)(v2 - 1) != 47 )\n    return v2 - (_QWORD)a1;\n  while ( v1 != v3 && a1[v3 - 1] == 47 )\n    --v3;\n  return v3;\n}\n"
        },
        {
            "funcName": "sub_405A10",
            "funcStartAddr": "0x405a10",
            "funcEndAddr": "0x405a6a",
            "decompiledFuncCode": "_BYTE *__fastcall sub_405A10(_BYTE *src)\n{\n  __int64 v1; // rbx\n  _BYTE *v2; // rax\n  _BYTE *v3; // rcx\n  _BYTE *v4; // rax\n\n  v1 = sub_4059B0(src);\n  v2 = malloc(v1 + (v1 == 0) + 1);\n  v3 = v2;\n  if ( v2 )\n  {\n    v4 = memcpy(v2, src, v1);\n    v3 = v4;\n    if ( !v1 )\n    {\n      *v4 = 46;\n      v1 = 1LL;\n    }\n    v4[v1] = 0;\n  }\n  return v3;\n}\n"
        },
        {
            "funcName": "sub_405A70",
            "funcStartAddr": "0x405a70",
            "funcEndAddr": "0x405acb",
            "decompiledFuncCode": "_BYTE *__fastcall sub_405A70(_BYTE *a1)\n{\n  char v1; // dl\n  _BYTE *result; // rax\n  _BYTE *v3; // rcx\n  char v4; // si\n\n  v1 = *a1;\n  for ( result = a1; *result == 47; v1 = *result )\n    ++result;\n  if ( v1 )\n  {\n    v3 = result;\n    v4 = 0;\n    do\n    {\n      while ( v1 == 47 )\n      {\n        v1 = *++v3;\n        v4 = 1;\n        if ( !*v3 )\n          return result;\n      }\n      if ( v4 )\n      {\n        result = v3;\n        v4 = 0;\n      }\n      v1 = *++v3;\n    }\n    while ( *v3 );\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_405AD0",
            "funcStartAddr": "0x405ad0",
            "funcEndAddr": "0x405afb",
            "decompiledFuncCode": "size_t __fastcall sub_405AD0(const char *a1)\n{\n  size_t result; // rax\n  size_t v2; // rdx\n\n  result = strlen(a1);\n  if ( result > 1 )\n  {\n    do\n    {\n      v2 = result - 1;\n      if ( a1[result - 1] != 47 )\n        break;\n      --result;\n    }\n    while ( v2 != 1 );\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_405B00",
            "funcStartAddr": "0x405b00",
            "funcEndAddr": "0x405b86",
            "decompiledFuncCode": "void __fastcall sub_405B00(__int64 a1, void *a2, _QWORD *a3)\n{\n  _QWORD *v4; // rbx\n  __int64 v5; // rax\n\n  if ( a1 )\n  {\n    v4 = (_QWORD *)sub_40A560(24LL);\n    *v4 = sub_40A790(a2);\n    v4[1] = a3[1];\n    v4[2] = *a3;\n    v5 = sub_406C00(a1, v4);\n    if ( !v5 )\n      sub_40A7B0(a1, v4);\n    if ( v4 != (_QWORD *)v5 )\n      sub_406ED0(v4);\n  }\n}\n"
        },
        {
            "funcName": "sub_405B90",
            "funcStartAddr": "0x405b90",
            "funcEndAddr": "0x405bcb",
            "decompiledFuncCode": "bool __fastcall sub_405B90(__int64 a1, __int64 a2, __int64 *a3)\n{\n  __int64 v3; // rax\n  __int64 v5[5]; // [rsp+0h] [rbp-28h] BYREF\n\n  if ( !a1 )\n    return 0;\n  v3 = a3[1];\n  v5[0] = a2;\n  v5[1] = v3;\n  v5[2] = *a3;\n  return sub_4061F0(a1, v5) != 0;\n}\n"
        },
        {
            "funcName": "sub_405BD0",
            "funcStartAddr": "0x405bd0",
            "funcEndAddr": "0x405c63",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_405BD0(unsigned __int64 a1)\n{\n  __int64 v1; // rsi\n  unsigned __int64 v2; // rsi\n  unsigned __int64 v3; // rax\n  __int64 v4; // r8\n  unsigned __int64 v5; // rdi\n  unsigned __int64 v6; // rcx\n\n  v1 = 10LL;\n  if ( a1 >= 0xA )\n    v1 = a1;\n  v2 = v1 | 1;\n  if ( v2 != -1LL )\n  {\n    while ( 1 )\n    {\n      v3 = v2 % 3;\n      if ( v2 <= 9 )\n        goto LABEL_9;\n      if ( v2 % 3 )\n        break;\nLABEL_10:\n      v2 += 2LL;\n      if ( v2 == -1LL )\n        return v2;\n    }\n    v4 = 16LL;\n    v5 = 9LL;\n    v6 = 3LL;\n    while ( 1 )\n    {\n      v6 += 2LL;\n      v5 += v4;\n      v3 = v2 % v6;\n      if ( v5 >= v2 )\n        break;\n      v4 += 8LL;\n      if ( !(v2 % v6) )\n        goto LABEL_10;\n    }\nLABEL_9:\n    if ( v3 )\n      return v2;\n    goto LABEL_10;\n  }\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_405C70",
            "funcStartAddr": "0x405c70",
            "funcEndAddr": "0x405c80",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_405C70(__int64 a1, unsigned __int64 a2)\n{\n  return __ROR8__(a1, 3) % a2;\n}\n"
        },
        {
            "funcName": "sub_405C80",
            "funcStartAddr": "0x405c80",
            "funcEndAddr": "0x405c87",
            "decompiledFuncCode": "bool __fastcall sub_405C80(__int64 a1, __int64 a2)\n{\n  return a1 == a2;\n}\n"
        },
        {
            "funcName": "sub_405C90",
            "funcStartAddr": "0x4023a0",
            "funcEndAddr": "0x4023a5",
            "decompiledFuncCode": "__int64 __fastcall sub_405C90(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v2; // rax\n\n  v2 = (*(__int64 (__fastcall **)(__int64, _QWORD))(a1 + 48))(a2, *(_QWORD *)(a1 + 16));\n  if ( *(_QWORD *)(a1 + 16) <= v2 )\n    abort();\n  return *(_QWORD *)a1 + 16 * v2;\n}\n\n__int64 __fastcall sub_405C90(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v2; // rax\n\n  v2 = (*(__int64 (__fastcall **)(__int64, _QWORD))(a1 + 48))(a2, *(_QWORD *)(a1 + 16));\n  if ( *(_QWORD *)(a1 + 16) <= v2 )\n    abort();\n  return *(_QWORD *)a1 + 16 * v2;\n}\n"
        },
        {
            "funcName": "sub_405C90",
            "funcStartAddr": "0x4023a0",
            "funcEndAddr": "0x4023a5",
            "decompiledFuncCode": "__int64 __fastcall sub_405C90(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v2; // rax\n\n  v2 = (*(__int64 (__fastcall **)(__int64, _QWORD))(a1 + 48))(a2, *(_QWORD *)(a1 + 16));\n  if ( *(_QWORD *)(a1 + 16) <= v2 )\n    abort();\n  return *(_QWORD *)a1 + 16 * v2;\n}\n\n__int64 __fastcall sub_405C90(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v2; // rax\n\n  v2 = (*(__int64 (__fastcall **)(__int64, _QWORD))(a1 + 48))(a2, *(_QWORD *)(a1 + 16));\n  if ( *(_QWORD *)(a1 + 16) <= v2 )\n    abort();\n  return *(_QWORD *)a1 + 16 * v2;\n}\n"
        },
        {
            "funcName": "sub_405CC0",
            "funcStartAddr": "0x405cc0",
            "funcEndAddr": "0x405dd9",
            "decompiledFuncCode": "__int64 __fastcall sub_405CC0(__int64 a1, __int64 a2, __m128i **a3, char a4)\n{\n  __m128i *v7; // rax\n  __int64 v8; // rsi\n  __m128i *v9; // rbx\n  __int64 *v10; // rax\n  const __m128i *v12; // rax\n\n  v7 = (__m128i *)sub_405C90(a1, a2);\n  *a3 = v7;\n  v8 = v7->m128i_i64[0];\n  if ( v7->m128i_i64[0] )\n  {\n    v9 = v7;\n    if ( v8 != a2 )\n    {\n      if ( !(*(unsigned __int8 (__fastcall **)(__int64))(a1 + 56))(a2) )\n      {\n        v10 = (__int64 *)v9->m128i_i64[1];\n        if ( v10 )\n        {\n          v8 = *v10;\n          if ( a2 != *v10 )\n          {\n            while ( !(*(unsigned __int8 (__fastcall **)(__int64))(a1 + 56))(a2) )\n            {\n              v9 = (__m128i *)v9->m128i_i64[1];\n              v10 = (__int64 *)v9->m128i_i64[1];\n              if ( !v10 )\n                return 0LL;\n              v8 = *v10;\n              if ( *v10 == a2 )\n                goto LABEL_11;\n            }\n            v10 = (__int64 *)v9->m128i_i64[1];\n            v8 = *v10;\n          }\nLABEL_11:\n          if ( a4 )\n          {\n            v9->m128i_i64[1] = v10[1];\n            *v10 = 0LL;\n            v10[1] = *(_QWORD *)(a1 + 72);\n            *(_QWORD *)(a1 + 72) = v10;\n          }\n          return v8;\n        }\n        return 0LL;\n      }\n      v8 = v9->m128i_i64[0];\n    }\n    if ( a4 )\n    {\n      v12 = (const __m128i *)v9->m128i_i64[1];\n      if ( v12 )\n      {\n        *v9 = _mm_loadu_si128(v12);\n        v12->m128i_i64[0] = 0LL;\n        v12->m128i_i64[1] = *(_QWORD *)(a1 + 72);\n        *(_QWORD *)(a1 + 72) = v12;\n        return v8;\n      }\n      v9->m128i_i64[0] = 0LL;\n    }\n    return v8;\n  }\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_405DE0",
            "funcStartAddr": "0x405de0",
            "funcEndAddr": "0x405e5e",
            "decompiledFuncCode": "__int64 __fastcall sub_405DE0(float **a1)\n{\n  float *v1; // rax\n  float v2; // xmm0_4\n  float v3; // xmm1_4\n  float v4; // xmm2_4\n  __int64 result; // rax\n\n  v1 = *a1;\n  if ( *a1 == (float *)&unk_412280 )\n    return 1LL;\n  v2 = v1[2];\n  if ( v2 <= 0.1\n    || v2 >= 0.89999998\n    || v1[3] <= 1.1\n    || *v1 < 0.0\n    || (v3 = *v1 + 0.1, v4 = v1[1], v4 <= v3)\n    || v4 > 1.0\n    || (result = 1LL, v2 <= v3) )\n  {\n    *a1 = (float *)&unk_412280;\n    return 0LL;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_405E60",
            "funcStartAddr": "0x405e60",
            "funcEndAddr": "0x405faa",
            "decompiledFuncCode": "__int64 __fastcall sub_405E60(__int64 a1, __int64 a2, char a3)\n{\n  __int64 *v4; // r12\n  __int64 v5; // r15\n  __int64 *v6; // rbx\n  __int64 v7; // r15\n  _QWORD *v8; // rax\n  __int64 *v9; // rdx\n  _QWORD *v10; // rax\n  _QWORD *v11; // rbx\n  _QWORD *v12; // rax\n  __int64 v13; // rdx\n\n  v4 = *(__int64 **)a2;\n  if ( *(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) )\n    return 1LL;\n  while ( 1 )\n  {\n    while ( 1 )\n    {\n      v5 = *v4;\n      if ( *v4 )\n      {\n        v6 = (__int64 *)v4[1];\n        if ( v6 )\n        {\n          do\n          {\n            while ( 1 )\n            {\n              v7 = *v6;\n              v8 = (_QWORD *)sub_405C90(a1, *v6);\n              v9 = (__int64 *)v6[1];\n              if ( !*v8 )\n                break;\n              v6[1] = v8[1];\n              v8[1] = v6;\n              v6 = v9;\n              if ( !v9 )\n                goto LABEL_10;\n            }\n            *v8 = v7;\n            ++*(_QWORD *)(a1 + 24);\n            *v6 = 0LL;\n            v6[1] = *(_QWORD *)(a1 + 72);\n            *(_QWORD *)(a1 + 72) = v6;\n            v6 = v9;\n          }\n          while ( v9 );\nLABEL_10:\n          v5 = *v4;\n        }\n        v4[1] = 0LL;\n        if ( !a3 )\n          break;\n      }\n      v4 += 2;\n      if ( *(_QWORD *)(a2 + 8) <= (unsigned __int64)v4 )\n        return 1LL;\n    }\n    v10 = (_QWORD *)sub_405C90(a1, v5);\n    v11 = v10;\n    if ( !*v10 )\n    {\n      *v10 = v5;\n      ++*(_QWORD *)(a1 + 24);\n      goto LABEL_16;\n    }\n    v12 = *(_QWORD **)(a1 + 72);\n    if ( !v12 )\n      break;\n    *(_QWORD *)(a1 + 72) = v12[1];\nLABEL_15:\n    v13 = v11[1];\n    *v12 = v5;\n    v12[1] = v13;\n    v11[1] = v12;\nLABEL_16:\n    *v4 = 0LL;\n    v4 += 2;\n    --*(_QWORD *)(a2 + 24);\n    if ( *(_QWORD *)(a2 + 8) <= (unsigned __int64)v4 )\n      return 1LL;\n  }\n  v12 = malloc(0x10uLL);\n  if ( v12 )\n    goto LABEL_15;\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_4060A0",
            "funcStartAddr": "0x4060a0",
            "funcEndAddr": "0x4061e8",
            "decompiledFuncCode": "__int64 __fastcall sub_4060A0(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v3; // rbx\n  __int64 v4; // rcx\n  __int64 v5; // r12\n  __int64 v6; // r13\n  _QWORD *v7; // rsi\n  unsigned __int64 i; // rdi\n  __int64 v9; // rax\n  unsigned __int64 j; // rdx\n  double v11; // xmm0_8\n  double v12; // xmm1_8\n\n  v3 = 0LL;\n  v4 = *(_QWORD *)(a1 + 32);\n  v5 = *(_QWORD *)(a1 + 16);\n  v6 = *(_QWORD *)(a1 + 24);\n  v7 = *(_QWORD **)a1;\n  for ( i = *(_QWORD *)(a1 + 8); (unsigned __int64)v7 < i; v7 += 2 )\n  {\n    while ( !*v7 )\n    {\n      v7 += 2;\n      if ( (unsigned __int64)v7 >= i )\n        goto LABEL_10;\n    }\n    v9 = v7[1];\n    for ( j = 1LL; v9; ++j )\n      v9 = *(_QWORD *)(v9 + 8);\n    if ( v3 < j )\n      v3 = j;\n  }\nLABEL_10:\n  __fprintf_chk(a2, 1LL, \"# entries:         %lu\\n\", v4);\n  __fprintf_chk(a2, 1LL, \"# buckets:         %lu\\n\", v5);\n  if ( v6 < 0 )\n  {\n    v11 = ((double)(int)(v6 & 1 | ((unsigned __int64)v6 >> 1)) + (double)(int)(v6 & 1 | ((unsigned __int64)v6 >> 1)))\n        * 100.0;\n    if ( v5 >= 0 )\n      goto LABEL_12;\nLABEL_15:\n    v12 = (double)(int)(v5 & 1 | ((unsigned __int64)v5 >> 1)) + (double)(int)(v5 & 1 | ((unsigned __int64)v5 >> 1));\n    goto LABEL_13;\n  }\n  v11 = (double)(int)v6 * 100.0;\n  if ( v5 < 0 )\n    goto LABEL_15;\nLABEL_12:\n  v12 = (double)(int)v5;\nLABEL_13:\n  __fprintf_chk(a2, 1LL, \"# buckets used:    %lu (%.2f%%)\\n\", v6, v11 / v12);\n  return __fprintf_chk(a2, 1LL, \"max bucket length: %lu\\n\", v3);\n}\n"
        },
        {
            "funcName": "sub_4061F0",
            "funcStartAddr": "0x4061f0",
            "funcEndAddr": "0x406243",
            "decompiledFuncCode": "__int64 __fastcall sub_4061F0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbp\n  _QWORD *v3; // rax\n  __int64 v4; // rsi\n  _QWORD *v5; // rbx\n\n  v2 = a2;\n  v3 = (_QWORD *)sub_405C90(a1, a2);\n  v4 = *v3;\n  if ( !*v3 )\n    return 0LL;\n  v5 = v3;\n  while ( v4 != v2 )\n  {\n    if ( (*(unsigned __int8 (__fastcall **)(__int64))(a1 + 56))(v2) )\n      return *v5;\n    v5 = (_QWORD *)v5[1];\n    if ( !v5 )\n      return 0LL;\n    v4 = *v5;\n  }\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_4062A0",
            "funcStartAddr": "0x4062a0",
            "funcEndAddr": "0x40630a",
            "decompiledFuncCode": "__int64 __fastcall sub_4062A0(__int64 a1, __int64 a2)\n{\n  _QWORD *v2; // rcx\n  _QWORD *v3; // rdx\n  __int64 v4; // rax\n  __int64 result; // rax\n\n  v2 = (_QWORD *)sub_405C90(a1, a2);\n  v3 = v2;\n  while ( 1 )\n  {\n    v4 = *v3;\n    v3 = (_QWORD *)v3[1];\n    if ( v4 == a2 )\n      break;\n    if ( !v3 )\n      goto LABEL_7;\n  }\n  if ( v3 )\n    return *v3;\nLABEL_7:\n  while ( 1 )\n  {\n    v2 += 2;\n    if ( *(_QWORD *)(a1 + 8) <= (unsigned __int64)v2 )\n      break;\n    result = *v2;\n    if ( *v2 )\n      return result;\n  }\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_406380",
            "funcStartAddr": "0x406380",
            "funcEndAddr": "0x4063f8",
            "decompiledFuncCode": "__int64 __fastcall sub_406380(__int64 a1, unsigned __int8 (__fastcall *a2)(__int64, __int64), __int64 a3)\n{\n  __int64 *v3; // r14\n  __int64 v6; // rbp\n  __int64 v7; // rdi\n  __int64 *v9; // rbx\n\n  v3 = *(__int64 **)a1;\n  if ( *(_QWORD *)(a1 + 8) <= *(_QWORD *)a1 )\n    return 0LL;\n  v6 = 0LL;\n  while ( 1 )\n  {\n    v7 = *v3;\n    if ( *v3 )\n      break;\nLABEL_4:\n    v3 += 2;\n    if ( *(_QWORD *)(a1 + 8) <= (unsigned __int64)v3 )\n      return v6;\n  }\n  v9 = v3;\n  while ( a2(v7, a3) )\n  {\n    v9 = (__int64 *)v9[1];\n    ++v6;\n    if ( !v9 )\n      goto LABEL_4;\n    v7 = *v9;\n  }\n  return v6;\n}\n"
        },
        {
            "funcName": "sub_406460",
            "funcStartAddr": "0x406460",
            "funcEndAddr": "0x4065ea",
            "decompiledFuncCode": "_QWORD *__fastcall sub_406460(\n        __int64 a1,\n        __int64 a2,\n        unsigned __int64 (__fastcall *a3)(__int64 a1, unsigned __int64 a2),\n        bool (__fastcall *a4)(__int64 a1, __int64 a2),\n        __int64 a5)\n{\n  bool (__fastcall *v6)(__int64, __int64); // r13\n  unsigned __int64 (__fastcall *v7)(__int64, unsigned __int64); // r12\n  char *v9; // rax\n  _QWORD *v10; // rbx\n  float **v11; // rdi\n  unsigned __int64 v12; // rbp\n  char *v13; // rax\n  void *v14; // rdi\n  float v16; // xmm1_4\n  float v17; // xmm0_4\n  float v18; // xmm0_4\n\n  v6 = a4;\n  v7 = a3;\n  if ( !a3 )\n    v7 = sub_405C70;\n  if ( !a4 )\n    v6 = sub_405C80;\n  v9 = (char *)malloc(0x50uLL);\n  v10 = v9;\n  if ( v9 )\n  {\n    v11 = (float **)(v9 + 40);\n    if ( a2 )\n    {\n      *((_QWORD *)v9 + 5) = a2;\n      if ( !(unsigned __int8)sub_405DE0(v11) )\n        goto LABEL_14;\n      if ( *(_BYTE *)(a2 + 16) )\n      {\nLABEL_9:\n        v12 = sub_405BD0(a1);\n        if ( (v12 & 0x1000000000000000LL) == 0 && !(v12 >> 61) )\n        {\n          v10[2] = v12;\n          if ( v12 )\n          {\n            v13 = (char *)calloc(v12, 0x10uLL);\n            *v10 = v13;\n            if ( v13 )\n            {\n              v10[3] = 0LL;\n              v10[4] = 0LL;\n              v10[1] = &v13[16 * v12];\n              v10[6] = v7;\n              v10[7] = v6;\n              v10[8] = a5;\n              v10[9] = 0LL;\n              return v10;\n            }\n          }\n        }\nLABEL_14:\n        v14 = v10;\n        v10 = 0LL;\n        free(v14);\n        return v10;\n      }\n      v16 = *(float *)(a2 + 8);\n      if ( a1 < 0 )\n        goto LABEL_23;\n    }\n    else\n    {\n      *((_QWORD *)v9 + 5) = &unk_412280;\n      v16 = 0.80000001;\n      if ( !(unsigned __int8)sub_405DE0(v11) )\n        goto LABEL_14;\n      if ( a1 < 0 )\n      {\nLABEL_23:\n        v17 = (float)(a1 & 1 | (unsigned int)((unsigned __int64)a1 >> 1))\n            + (float)(a1 & 1 | (unsigned int)((unsigned __int64)a1 >> 1));\n        goto LABEL_19;\n      }\n    }\n    v17 = (float)(int)a1;\nLABEL_19:\n    v18 = v17 / v16;\n    if ( v18 >= 1.8446744e19 )\n      goto LABEL_14;\n    if ( v18 < 9.223372e18 )\n      a1 = (unsigned int)(int)v18;\n    else\n      a1 = (unsigned int)(int)(float)(v18 - 9.223372e18) ^ 0x8000000000000000LL;\n    goto LABEL_9;\n  }\n  return v10;\n}\n"
        },
        {
            "funcName": "sub_4065F0",
            "funcStartAddr": "0x4065f0",
            "funcEndAddr": "0x406698",
            "decompiledFuncCode": "void __fastcall sub_4065F0(_QWORD *a1)\n{\n  _QWORD *v1; // r12\n  _QWORD *v2; // rbx\n  void (__fastcall *v3)(_QWORD); // rax\n  _QWORD *v4; // rdx\n  __int64 v5; // rcx\n\n  v1 = (_QWORD *)*a1;\n  if ( *a1 < a1[1] )\n  {\n    do\n    {\n      while ( !*v1 )\n      {\n        v1 += 2;\n        if ( a1[1] <= (unsigned __int64)v1 )\n          goto LABEL_12;\n      }\n      v2 = (_QWORD *)v1[1];\n      v3 = (void (__fastcall *)(_QWORD))a1[8];\n      if ( v2 )\n      {\n        do\n        {\n          if ( v3 )\n          {\n            v3(*v2);\n            v3 = (void (__fastcall *)(_QWORD))a1[8];\n          }\n          v4 = (_QWORD *)v2[1];\n          v5 = a1[9];\n          *v2 = 0LL;\n          v2[1] = v5;\n          a1[9] = v2;\n          v2 = v4;\n        }\n        while ( v4 );\n      }\n      if ( v3 )\n        v3(*v1);\n      *v1 = 0LL;\n      v1 += 2;\n      *(v1 - 1) = 0LL;\n    }\n    while ( a1[1] > (unsigned __int64)v1 );\n  }\nLABEL_12:\n  a1[3] = 0LL;\n  a1[4] = 0LL;\n}\n"
        },
        {
            "funcName": "sub_4066A0",
            "funcStartAddr": "0x4066a0",
            "funcEndAddr": "0x406776",
            "decompiledFuncCode": "void __fastcall sub_4066A0(_QWORD *ptr)\n{\n  _QWORD *v2; // rbp\n  unsigned __int64 v3; // rax\n  _QWORD *v4; // rbx\n  _QWORD *v5; // rdi\n  _QWORD *v6; // rbx\n  _QWORD *v7; // rdi\n  _QWORD *v8; // rbx\n\n  v2 = (_QWORD *)*ptr;\n  v3 = ptr[1];\n  if ( ptr[8] && ptr[4] )\n  {\n    if ( (unsigned __int64)v2 >= v3 )\n      goto LABEL_15;\n    do\n    {\n      while ( !*v2 )\n      {\n        v2 += 2;\n        if ( v3 <= (unsigned __int64)v2 )\n          goto LABEL_10;\n      }\n      v4 = v2;\n      do\n      {\n        ((void (*)(void))ptr[8])();\n        v4 = (_QWORD *)v4[1];\n      }\n      while ( v4 );\n      v3 = ptr[1];\n      v2 += 2;\n    }\n    while ( v3 > (unsigned __int64)v2 );\nLABEL_10:\n    v2 = (_QWORD *)*ptr;\n  }\n  if ( (unsigned __int64)v2 < v3 )\n  {\n    do\n    {\n      v5 = (_QWORD *)v2[1];\n      if ( v5 )\n      {\n        do\n        {\n          v6 = (_QWORD *)v5[1];\n          free(v5);\n          v5 = v6;\n        }\n        while ( v6 );\n      }\n      v2 += 2;\n    }\n    while ( ptr[1] > (unsigned __int64)v2 );\n  }\nLABEL_15:\n  v7 = (_QWORD *)ptr[9];\n  if ( v7 )\n  {\n    do\n    {\n      v8 = (_QWORD *)v7[1];\n      free(v7);\n      v7 = v8;\n    }\n    while ( v8 );\n  }\n  free((void *)*ptr);\n  free(ptr);\n}\n"
        },
        {
            "funcName": "sub_406780",
            "funcStartAddr": "0x4023aa",
            "funcEndAddr": "0x4023af",
            "decompiledFuncCode": "__int64 __fastcall sub_406780(__int64 a1, __int64 a2)\n{\n  __int64 v2; // r12\n  float v3; // xmm0_4\n  float v4; // xmm0_4\n  unsigned __int64 v5; // rbx\n  _BOOL8 v6; // rax\n  void *v7; // rax\n  __int64 v8; // rbx\n  __int64 v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // rax\n  unsigned int v12; // ebx\n  void *ptr; // [rsp+0h] [rbp-68h] BYREF\n  __int64 v15; // [rsp+8h] [rbp-60h]\n  unsigned __int64 v16; // [rsp+10h] [rbp-58h]\n  __int64 v17; // [rsp+18h] [rbp-50h]\n  __int64 v18; // [rsp+20h] [rbp-48h]\n  __int64 v19; // [rsp+28h] [rbp-40h]\n  __int64 v20; // [rsp+30h] [rbp-38h]\n  __int64 v21; // [rsp+38h] [rbp-30h]\n  __int64 v22; // [rsp+40h] [rbp-28h]\n  __int64 v23; // [rsp+48h] [rbp-20h]\n\n  v2 = *(_QWORD *)(a1 + 40);\n  if ( !*(_BYTE *)(v2 + 16) )\n  {\n    if ( a2 < 0 )\n      v3 = (float)(a2 & 1 | (unsigned int)((unsigned __int64)a2 >> 1))\n         + (float)(a2 & 1 | (unsigned int)((unsigned __int64)a2 >> 1));\n    else\n      v3 = (float)(int)a2;\n    v4 = v3 / *(float *)(v2 + 8);\n    if ( v4 >= 1.8446744e19 )\n      return 0;\n    if ( v4 < 9.223372e18 )\n      a2 = (unsigned int)(int)v4;\n    else\n      a2 = (unsigned int)(int)(float)(v4 - 9.223372e18) ^ 0x8000000000000000LL;\n  }\n  v5 = sub_405BD0(a2);\n  v6 = v5 >> 61 != 0;\n  if ( (v5 & 0x1000000000000000LL) != 0 )\n    v6 = 1LL;\n  if ( !v5 || v6 )\n    return 0;\n  if ( *(_QWORD *)(a1 + 16) == v5 )\n    return 1LL;\n  v7 = calloc(v5, 0x10uLL);\n  ptr = v7;\n  if ( !v7 )\n    return 0;\n  v16 = v5;\n  v8 = (__int64)v7 + 16 * v5;\n  v9 = *(_QWORD *)(a1 + 48);\n  v17 = 0LL;\n  v15 = v8;\n  v20 = v9;\n  v10 = *(_QWORD *)(a1 + 56);\n  v18 = 0LL;\n  v21 = v10;\n  v11 = *(_QWORD *)(a1 + 64);\n  v19 = v2;\n  v22 = v11;\n  v23 = *(_QWORD *)(a1 + 72);\n  v12 = sub_405E60((__int64)&ptr, a1, 0);\n  if ( (_BYTE)v12 )\n  {\n    free(*(void **)a1);\n    *(_QWORD *)a1 = ptr;\n    *(_QWORD *)(a1 + 8) = v15;\n    *(_QWORD *)(a1 + 16) = v16;\n    *(_QWORD *)(a1 + 24) = v17;\n    *(_QWORD *)(a1 + 72) = v23;\n    return v12;\n  }\n  *(_QWORD *)(a1 + 72) = v23;\n  if ( !(unsigned __int8)sub_405E60(a1, (__int64)&ptr, 1) || !(unsigned __int8)sub_405E60(a1, (__int64)&ptr, 0) )\n    abort();\n  free(ptr);\n  return v12;\n}\n\n__int64 __fastcall sub_406780(__int64 a1, __int64 a2)\n{\n  __int64 v2; // r12\n  float v3; // xmm0_4\n  float v4; // xmm0_4\n  unsigned __int64 v5; // rbx\n  _BOOL8 v6; // rax\n  void *v7; // rax\n  __int64 v8; // rbx\n  __int64 v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // rax\n  unsigned int v12; // ebx\n  void *ptr; // [rsp+0h] [rbp-68h] BYREF\n  __int64 v15; // [rsp+8h] [rbp-60h]\n  unsigned __int64 v16; // [rsp+10h] [rbp-58h]\n  __int64 v17; // [rsp+18h] [rbp-50h]\n  __int64 v18; // [rsp+20h] [rbp-48h]\n  __int64 v19; // [rsp+28h] [rbp-40h]\n  __int64 v20; // [rsp+30h] [rbp-38h]\n  __int64 v21; // [rsp+38h] [rbp-30h]\n  __int64 v22; // [rsp+40h] [rbp-28h]\n  __int64 v23; // [rsp+48h] [rbp-20h]\n\n  v2 = *(_QWORD *)(a1 + 40);\n  if ( !*(_BYTE *)(v2 + 16) )\n  {\n    if ( a2 < 0 )\n      v3 = (float)(a2 & 1 | (unsigned int)((unsigned __int64)a2 >> 1))\n         + (float)(a2 & 1 | (unsigned int)((unsigned __int64)a2 >> 1));\n    else\n      v3 = (float)(int)a2;\n    v4 = v3 / *(float *)(v2 + 8);\n    if ( v4 >= 1.8446744e19 )\n      return 0;\n    if ( v4 < 9.223372e18 )\n      a2 = (unsigned int)(int)v4;\n    else\n      a2 = (unsigned int)(int)(float)(v4 - 9.223372e18) ^ 0x8000000000000000LL;\n  }\n  v5 = sub_405BD0(a2);\n  v6 = v5 >> 61 != 0;\n  if ( (v5 & 0x1000000000000000LL) != 0 )\n    v6 = 1LL;\n  if ( !v5 || v6 )\n    return 0;\n  if ( *(_QWORD *)(a1 + 16) == v5 )\n    return 1LL;\n  v7 = calloc(v5, 0x10uLL);\n  ptr = v7;\n  if ( !v7 )\n    return 0;\n  v16 = v5;\n  v8 = (__int64)v7 + 16 * v5;\n  v9 = *(_QWORD *)(a1 + 48);\n  v17 = 0LL;\n  v15 = v8;\n  v20 = v9;\n  v10 = *(_QWORD *)(a1 + 56);\n  v18 = 0LL;\n  v21 = v10;\n  v11 = *(_QWORD *)(a1 + 64);\n  v19 = v2;\n  v22 = v11;\n  v23 = *(_QWORD *)(a1 + 72);\n  v12 = sub_405E60((__int64)&ptr, a1, 0);\n  if ( (_BYTE)v12 )\n  {\n    free(*(void **)a1);\n    *(_QWORD *)a1 = ptr;\n    *(_QWORD *)(a1 + 8) = v15;\n    *(_QWORD *)(a1 + 16) = v16;\n    *(_QWORD *)(a1 + 24) = v17;\n    *(_QWORD *)(a1 + 72) = v23;\n    return v12;\n  }\n  *(_QWORD *)(a1 + 72) = v23;\n  if ( !(unsigned __int8)sub_405E60(a1, (__int64)&ptr, 1) || !(unsigned __int8)sub_405E60(a1, (__int64)&ptr, 0) )\n    abort();\n  free(ptr);\n  return v12;\n}\n"
        },
        {
            "funcName": "sub_406780",
            "funcStartAddr": "0x4023aa",
            "funcEndAddr": "0x4023af",
            "decompiledFuncCode": "__int64 __fastcall sub_406780(__int64 a1, __int64 a2)\n{\n  __int64 v2; // r12\n  float v3; // xmm0_4\n  float v4; // xmm0_4\n  unsigned __int64 v5; // rbx\n  _BOOL8 v6; // rax\n  void *v7; // rax\n  __int64 v8; // rbx\n  __int64 v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // rax\n  unsigned int v12; // ebx\n  void *ptr; // [rsp+0h] [rbp-68h] BYREF\n  __int64 v15; // [rsp+8h] [rbp-60h]\n  unsigned __int64 v16; // [rsp+10h] [rbp-58h]\n  __int64 v17; // [rsp+18h] [rbp-50h]\n  __int64 v18; // [rsp+20h] [rbp-48h]\n  __int64 v19; // [rsp+28h] [rbp-40h]\n  __int64 v20; // [rsp+30h] [rbp-38h]\n  __int64 v21; // [rsp+38h] [rbp-30h]\n  __int64 v22; // [rsp+40h] [rbp-28h]\n  __int64 v23; // [rsp+48h] [rbp-20h]\n\n  v2 = *(_QWORD *)(a1 + 40);\n  if ( !*(_BYTE *)(v2 + 16) )\n  {\n    if ( a2 < 0 )\n      v3 = (float)(a2 & 1 | (unsigned int)((unsigned __int64)a2 >> 1))\n         + (float)(a2 & 1 | (unsigned int)((unsigned __int64)a2 >> 1));\n    else\n      v3 = (float)(int)a2;\n    v4 = v3 / *(float *)(v2 + 8);\n    if ( v4 >= 1.8446744e19 )\n      return 0;\n    if ( v4 < 9.223372e18 )\n      a2 = (unsigned int)(int)v4;\n    else\n      a2 = (unsigned int)(int)(float)(v4 - 9.223372e18) ^ 0x8000000000000000LL;\n  }\n  v5 = sub_405BD0(a2);\n  v6 = v5 >> 61 != 0;\n  if ( (v5 & 0x1000000000000000LL) != 0 )\n    v6 = 1LL;\n  if ( !v5 || v6 )\n    return 0;\n  if ( *(_QWORD *)(a1 + 16) == v5 )\n    return 1LL;\n  v7 = calloc(v5, 0x10uLL);\n  ptr = v7;\n  if ( !v7 )\n    return 0;\n  v16 = v5;\n  v8 = (__int64)v7 + 16 * v5;\n  v9 = *(_QWORD *)(a1 + 48);\n  v17 = 0LL;\n  v15 = v8;\n  v20 = v9;\n  v10 = *(_QWORD *)(a1 + 56);\n  v18 = 0LL;\n  v21 = v10;\n  v11 = *(_QWORD *)(a1 + 64);\n  v19 = v2;\n  v22 = v11;\n  v23 = *(_QWORD *)(a1 + 72);\n  v12 = sub_405E60((__int64)&ptr, a1, 0);\n  if ( (_BYTE)v12 )\n  {\n    free(*(void **)a1);\n    *(_QWORD *)a1 = ptr;\n    *(_QWORD *)(a1 + 8) = v15;\n    *(_QWORD *)(a1 + 16) = v16;\n    *(_QWORD *)(a1 + 24) = v17;\n    *(_QWORD *)(a1 + 72) = v23;\n    return v12;\n  }\n  *(_QWORD *)(a1 + 72) = v23;\n  if ( !(unsigned __int8)sub_405E60(a1, (__int64)&ptr, 1) || !(unsigned __int8)sub_405E60(a1, (__int64)&ptr, 0) )\n    abort();\n  free(ptr);\n  return v12;\n}\n\n__int64 __fastcall sub_406780(__int64 a1, __int64 a2)\n{\n  __int64 v2; // r12\n  float v3; // xmm0_4\n  float v4; // xmm0_4\n  unsigned __int64 v5; // rbx\n  _BOOL8 v6; // rax\n  void *v7; // rax\n  __int64 v8; // rbx\n  __int64 v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // rax\n  unsigned int v12; // ebx\n  void *ptr; // [rsp+0h] [rbp-68h] BYREF\n  __int64 v15; // [rsp+8h] [rbp-60h]\n  unsigned __int64 v16; // [rsp+10h] [rbp-58h]\n  __int64 v17; // [rsp+18h] [rbp-50h]\n  __int64 v18; // [rsp+20h] [rbp-48h]\n  __int64 v19; // [rsp+28h] [rbp-40h]\n  __int64 v20; // [rsp+30h] [rbp-38h]\n  __int64 v21; // [rsp+38h] [rbp-30h]\n  __int64 v22; // [rsp+40h] [rbp-28h]\n  __int64 v23; // [rsp+48h] [rbp-20h]\n\n  v2 = *(_QWORD *)(a1 + 40);\n  if ( !*(_BYTE *)(v2 + 16) )\n  {\n    if ( a2 < 0 )\n      v3 = (float)(a2 & 1 | (unsigned int)((unsigned __int64)a2 >> 1))\n         + (float)(a2 & 1 | (unsigned int)((unsigned __int64)a2 >> 1));\n    else\n      v3 = (float)(int)a2;\n    v4 = v3 / *(float *)(v2 + 8);\n    if ( v4 >= 1.8446744e19 )\n      return 0;\n    if ( v4 < 9.223372e18 )\n      a2 = (unsigned int)(int)v4;\n    else\n      a2 = (unsigned int)(int)(float)(v4 - 9.223372e18) ^ 0x8000000000000000LL;\n  }\n  v5 = sub_405BD0(a2);\n  v6 = v5 >> 61 != 0;\n  if ( (v5 & 0x1000000000000000LL) != 0 )\n    v6 = 1LL;\n  if ( !v5 || v6 )\n    return 0;\n  if ( *(_QWORD *)(a1 + 16) == v5 )\n    return 1LL;\n  v7 = calloc(v5, 0x10uLL);\n  ptr = v7;\n  if ( !v7 )\n    return 0;\n  v16 = v5;\n  v8 = (__int64)v7 + 16 * v5;\n  v9 = *(_QWORD *)(a1 + 48);\n  v17 = 0LL;\n  v15 = v8;\n  v20 = v9;\n  v10 = *(_QWORD *)(a1 + 56);\n  v18 = 0LL;\n  v21 = v10;\n  v11 = *(_QWORD *)(a1 + 64);\n  v19 = v2;\n  v22 = v11;\n  v23 = *(_QWORD *)(a1 + 72);\n  v12 = sub_405E60((__int64)&ptr, a1, 0);\n  if ( (_BYTE)v12 )\n  {\n    free(*(void **)a1);\n    *(_QWORD *)a1 = ptr;\n    *(_QWORD *)(a1 + 8) = v15;\n    *(_QWORD *)(a1 + 16) = v16;\n    *(_QWORD *)(a1 + 24) = v17;\n    *(_QWORD *)(a1 + 72) = v23;\n    return v12;\n  }\n  *(_QWORD *)(a1 + 72) = v23;\n  if ( !(unsigned __int8)sub_405E60(a1, (__int64)&ptr, 1) || !(unsigned __int8)sub_405E60(a1, (__int64)&ptr, 0) )\n    abort();\n  free(ptr);\n  return v12;\n}\n"
        },
        {
            "funcName": "sub_406980",
            "funcStartAddr": "0x4023af",
            "funcEndAddr": "0x4023b4",
            "decompiledFuncCode": "__int64 __fastcall sub_406980(__int64 a1, __int64 a2, __int64 *a3)\n{\n  __int64 v5; // rdx\n  __int64 result; // rax\n  __int64 v7; // rax\n  __int64 v8; // rdx\n  float v9; // xmm1_4\n  __int64 v10; // rax\n  __m128i *v11; // r12\n  _QWORD *v12; // rax\n  __int64 v13; // rdx\n  int v14; // edx\n  float v15; // xmm1_4\n  __int64 v16; // rdx\n  __int64 v17; // rax\n  float v18; // xmm2_4\n  float v19; // xmm0_4\n  __int64 v20; // rax\n  float v21; // xmm1_4\n  float v22; // xmm0_4\n  __int64 v23; // rcx\n  __int64 v24; // rcx\n  __int64 v25; // rsi\n  __m128i *v26[4]; // [rsp+8h] [rbp-20h] BYREF\n\n  if ( !a2 )\n    goto LABEL_35;\n  v5 = sub_405CC0(a1, a2, v26, 0);\n  if ( !v5 )\n  {\n    v7 = *(_QWORD *)(a1 + 24);\n    if ( v7 < 0 )\n    {\n      v14 = v7 & 1 | ((unsigned __int64)v7 >> 1);\n      v10 = *(_QWORD *)(a1 + 16);\n      v15 = (float)v14;\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = v15 + v15;\n      if ( v10 >= 0 )\n      {\nLABEL_8:\n        if ( v9 <= (float)((float)(int)v10 * *(float *)(v8 + 8)) )\n          goto LABEL_9;\nLABEL_15:\n        sub_405DE0((float **)(a1 + 40));\n        v16 = *(_QWORD *)(a1 + 40);\n        v17 = *(_QWORD *)(a1 + 16);\n        v18 = *(float *)(v16 + 8);\n        if ( v17 < 0 )\n        {\n          v24 = *(_QWORD *)(a1 + 16) & 1LL | (*(_QWORD *)(a1 + 16) >> 1);\n          v19 = (float)(int)v24 + (float)(int)v24;\n        }\n        else\n        {\n          v19 = (float)(int)v17;\n        }\n        v20 = *(_QWORD *)(a1 + 24);\n        if ( v20 < 0 )\n        {\n          v23 = *(_QWORD *)(a1 + 24) & 1LL | (*(_QWORD *)(a1 + 24) >> 1);\n          v21 = (float)(int)v23 + (float)(int)v23;\n        }\n        else\n        {\n          v21 = (float)(int)v20;\n        }\n        if ( v21 <= (float)(v18 * v19) )\n          goto LABEL_9;\n        v22 = v19 * *(float *)(v16 + 12);\n        if ( !*(_BYTE *)(v16 + 16) )\n          v22 = v22 * v18;\n        if ( v22 >= 1.8446744e19 )\n          return 0xFFFFFFFFLL;\n        v25 = v22 >= 9.223372e18\n            ? (unsigned int)(int)(float)(v22 - 9.223372e18) ^ 0x8000000000000000LL\n            : (unsigned int)(int)v22;\n        if ( !(unsigned __int8)sub_406780(a1, v25) )\n          return 0xFFFFFFFFLL;\n        if ( !sub_405CC0(a1, a2, v26, 0) )\n        {\nLABEL_9:\n          v11 = v26[0];\n          if ( !*(_QWORD *)v26[0] )\n          {\n            *(_QWORD *)v26[0] = a2;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            ++*(_QWORD *)(a1 + 24);\n            return result;\n          }\n          v12 = *(_QWORD **)(a1 + 72);\n          if ( v12 )\n          {\n            *(_QWORD *)(a1 + 72) = v12[1];\nLABEL_12:\n            v13 = v11->m128i_i64[1];\n            *v12 = a2;\n            v12[1] = v13;\n            v11->m128i_i64[1] = (__int64)v12;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            return result;\n          }\n          v12 = malloc(0x10uLL);\n          if ( v12 )\n            goto LABEL_12;\n          return 0xFFFFFFFFLL;\n        }\nLABEL_35:\n        abort();\n      }\n    }\n    else\n    {\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = (float)(int)v7;\n      v10 = *(_QWORD *)(a1 + 16);\n      if ( v10 >= 0 )\n        goto LABEL_8;\n    }\n    if ( v9 <= (float)((float)((float)(v10 & 1 | (unsigned int)((unsigned __int64)v10 >> 1))\n                             + (float)(v10 & 1 | (unsigned int)((unsigned __int64)v10 >> 1)))\n                     * *(float *)(v8 + 8)) )\n      goto LABEL_9;\n    goto LABEL_15;\n  }\n  result = 0LL;\n  if ( a3 )\n    *a3 = v5;\n  return result;\n}\n\n__int64 __fastcall sub_406980(__int64 a1, __int64 a2, __int64 *a3)\n{\n  __int64 v5; // rdx\n  __int64 result; // rax\n  __int64 v7; // rax\n  __int64 v8; // rdx\n  float v9; // xmm1_4\n  __int64 v10; // rax\n  __m128i *v11; // r12\n  _QWORD *v12; // rax\n  __int64 v13; // rdx\n  int v14; // edx\n  float v15; // xmm1_4\n  __int64 v16; // rdx\n  __int64 v17; // rax\n  float v18; // xmm2_4\n  float v19; // xmm0_4\n  __int64 v20; // rax\n  float v21; // xmm1_4\n  float v22; // xmm0_4\n  __int64 v23; // rcx\n  __int64 v24; // rcx\n  __int64 v25; // rsi\n  __m128i *v26[4]; // [rsp+8h] [rbp-20h] BYREF\n\n  if ( !a2 )\n    goto LABEL_35;\n  v5 = sub_405CC0(a1, a2, v26, 0);\n  if ( !v5 )\n  {\n    v7 = *(_QWORD *)(a1 + 24);\n    if ( v7 < 0 )\n    {\n      v14 = v7 & 1 | ((unsigned __int64)v7 >> 1);\n      v10 = *(_QWORD *)(a1 + 16);\n      v15 = (float)v14;\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = v15 + v15;\n      if ( v10 >= 0 )\n      {\nLABEL_8:\n        if ( v9 <= (float)((float)(int)v10 * *(float *)(v8 + 8)) )\n          goto LABEL_9;\nLABEL_15:\n        sub_405DE0((float **)(a1 + 40));\n        v16 = *(_QWORD *)(a1 + 40);\n        v17 = *(_QWORD *)(a1 + 16);\n        v18 = *(float *)(v16 + 8);\n        if ( v17 < 0 )\n        {\n          v24 = *(_QWORD *)(a1 + 16) & 1LL | (*(_QWORD *)(a1 + 16) >> 1);\n          v19 = (float)(int)v24 + (float)(int)v24;\n        }\n        else\n        {\n          v19 = (float)(int)v17;\n        }\n        v20 = *(_QWORD *)(a1 + 24);\n        if ( v20 < 0 )\n        {\n          v23 = *(_QWORD *)(a1 + 24) & 1LL | (*(_QWORD *)(a1 + 24) >> 1);\n          v21 = (float)(int)v23 + (float)(int)v23;\n        }\n        else\n        {\n          v21 = (float)(int)v20;\n        }\n        if ( v21 <= (float)(v18 * v19) )\n          goto LABEL_9;\n        v22 = v19 * *(float *)(v16 + 12);\n        if ( !*(_BYTE *)(v16 + 16) )\n          v22 = v22 * v18;\n        if ( v22 >= 1.8446744e19 )\n          return 0xFFFFFFFFLL;\n        v25 = v22 >= 9.223372e18\n            ? (unsigned int)(int)(float)(v22 - 9.223372e18) ^ 0x8000000000000000LL\n            : (unsigned int)(int)v22;\n        if ( !(unsigned __int8)sub_406780(a1, v25) )\n          return 0xFFFFFFFFLL;\n        if ( !sub_405CC0(a1, a2, v26, 0) )\n        {\nLABEL_9:\n          v11 = v26[0];\n          if ( !*(_QWORD *)v26[0] )\n          {\n            *(_QWORD *)v26[0] = a2;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            ++*(_QWORD *)(a1 + 24);\n            return result;\n          }\n          v12 = *(_QWORD **)(a1 + 72);\n          if ( v12 )\n          {\n            *(_QWORD *)(a1 + 72) = v12[1];\nLABEL_12:\n            v13 = v11->m128i_i64[1];\n            *v12 = a2;\n            v12[1] = v13;\n            v11->m128i_i64[1] = (__int64)v12;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            return result;\n          }\n          v12 = malloc(0x10uLL);\n          if ( v12 )\n            goto LABEL_12;\n          return 0xFFFFFFFFLL;\n        }\nLABEL_35:\n        abort();\n      }\n    }\n    else\n    {\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = (float)(int)v7;\n      v10 = *(_QWORD *)(a1 + 16);\n      if ( v10 >= 0 )\n        goto LABEL_8;\n    }\n    if ( v9 <= (float)((float)((float)(v10 & 1 | (unsigned int)((unsigned __int64)v10 >> 1))\n                             + (float)(v10 & 1 | (unsigned int)((unsigned __int64)v10 >> 1)))\n                     * *(float *)(v8 + 8)) )\n      goto LABEL_9;\n    goto LABEL_15;\n  }\n  result = 0LL;\n  if ( a3 )\n    *a3 = v5;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_406980",
            "funcStartAddr": "0x4023af",
            "funcEndAddr": "0x4023b4",
            "decompiledFuncCode": "__int64 __fastcall sub_406980(__int64 a1, __int64 a2, __int64 *a3)\n{\n  __int64 v5; // rdx\n  __int64 result; // rax\n  __int64 v7; // rax\n  __int64 v8; // rdx\n  float v9; // xmm1_4\n  __int64 v10; // rax\n  __m128i *v11; // r12\n  _QWORD *v12; // rax\n  __int64 v13; // rdx\n  int v14; // edx\n  float v15; // xmm1_4\n  __int64 v16; // rdx\n  __int64 v17; // rax\n  float v18; // xmm2_4\n  float v19; // xmm0_4\n  __int64 v20; // rax\n  float v21; // xmm1_4\n  float v22; // xmm0_4\n  __int64 v23; // rcx\n  __int64 v24; // rcx\n  __int64 v25; // rsi\n  __m128i *v26[4]; // [rsp+8h] [rbp-20h] BYREF\n\n  if ( !a2 )\n    goto LABEL_35;\n  v5 = sub_405CC0(a1, a2, v26, 0);\n  if ( !v5 )\n  {\n    v7 = *(_QWORD *)(a1 + 24);\n    if ( v7 < 0 )\n    {\n      v14 = v7 & 1 | ((unsigned __int64)v7 >> 1);\n      v10 = *(_QWORD *)(a1 + 16);\n      v15 = (float)v14;\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = v15 + v15;\n      if ( v10 >= 0 )\n      {\nLABEL_8:\n        if ( v9 <= (float)((float)(int)v10 * *(float *)(v8 + 8)) )\n          goto LABEL_9;\nLABEL_15:\n        sub_405DE0((float **)(a1 + 40));\n        v16 = *(_QWORD *)(a1 + 40);\n        v17 = *(_QWORD *)(a1 + 16);\n        v18 = *(float *)(v16 + 8);\n        if ( v17 < 0 )\n        {\n          v24 = *(_QWORD *)(a1 + 16) & 1LL | (*(_QWORD *)(a1 + 16) >> 1);\n          v19 = (float)(int)v24 + (float)(int)v24;\n        }\n        else\n        {\n          v19 = (float)(int)v17;\n        }\n        v20 = *(_QWORD *)(a1 + 24);\n        if ( v20 < 0 )\n        {\n          v23 = *(_QWORD *)(a1 + 24) & 1LL | (*(_QWORD *)(a1 + 24) >> 1);\n          v21 = (float)(int)v23 + (float)(int)v23;\n        }\n        else\n        {\n          v21 = (float)(int)v20;\n        }\n        if ( v21 <= (float)(v18 * v19) )\n          goto LABEL_9;\n        v22 = v19 * *(float *)(v16 + 12);\n        if ( !*(_BYTE *)(v16 + 16) )\n          v22 = v22 * v18;\n        if ( v22 >= 1.8446744e19 )\n          return 0xFFFFFFFFLL;\n        v25 = v22 >= 9.223372e18\n            ? (unsigned int)(int)(float)(v22 - 9.223372e18) ^ 0x8000000000000000LL\n            : (unsigned int)(int)v22;\n        if ( !(unsigned __int8)sub_406780(a1, v25) )\n          return 0xFFFFFFFFLL;\n        if ( !sub_405CC0(a1, a2, v26, 0) )\n        {\nLABEL_9:\n          v11 = v26[0];\n          if ( !*(_QWORD *)v26[0] )\n          {\n            *(_QWORD *)v26[0] = a2;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            ++*(_QWORD *)(a1 + 24);\n            return result;\n          }\n          v12 = *(_QWORD **)(a1 + 72);\n          if ( v12 )\n          {\n            *(_QWORD *)(a1 + 72) = v12[1];\nLABEL_12:\n            v13 = v11->m128i_i64[1];\n            *v12 = a2;\n            v12[1] = v13;\n            v11->m128i_i64[1] = (__int64)v12;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            return result;\n          }\n          v12 = malloc(0x10uLL);\n          if ( v12 )\n            goto LABEL_12;\n          return 0xFFFFFFFFLL;\n        }\nLABEL_35:\n        abort();\n      }\n    }\n    else\n    {\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = (float)(int)v7;\n      v10 = *(_QWORD *)(a1 + 16);\n      if ( v10 >= 0 )\n        goto LABEL_8;\n    }\n    if ( v9 <= (float)((float)((float)(v10 & 1 | (unsigned int)((unsigned __int64)v10 >> 1))\n                             + (float)(v10 & 1 | (unsigned int)((unsigned __int64)v10 >> 1)))\n                     * *(float *)(v8 + 8)) )\n      goto LABEL_9;\n    goto LABEL_15;\n  }\n  result = 0LL;\n  if ( a3 )\n    *a3 = v5;\n  return result;\n}\n\n__int64 __fastcall sub_406980(__int64 a1, __int64 a2, __int64 *a3)\n{\n  __int64 v5; // rdx\n  __int64 result; // rax\n  __int64 v7; // rax\n  __int64 v8; // rdx\n  float v9; // xmm1_4\n  __int64 v10; // rax\n  __m128i *v11; // r12\n  _QWORD *v12; // rax\n  __int64 v13; // rdx\n  int v14; // edx\n  float v15; // xmm1_4\n  __int64 v16; // rdx\n  __int64 v17; // rax\n  float v18; // xmm2_4\n  float v19; // xmm0_4\n  __int64 v20; // rax\n  float v21; // xmm1_4\n  float v22; // xmm0_4\n  __int64 v23; // rcx\n  __int64 v24; // rcx\n  __int64 v25; // rsi\n  __m128i *v26[4]; // [rsp+8h] [rbp-20h] BYREF\n\n  if ( !a2 )\n    goto LABEL_35;\n  v5 = sub_405CC0(a1, a2, v26, 0);\n  if ( !v5 )\n  {\n    v7 = *(_QWORD *)(a1 + 24);\n    if ( v7 < 0 )\n    {\n      v14 = v7 & 1 | ((unsigned __int64)v7 >> 1);\n      v10 = *(_QWORD *)(a1 + 16);\n      v15 = (float)v14;\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = v15 + v15;\n      if ( v10 >= 0 )\n      {\nLABEL_8:\n        if ( v9 <= (float)((float)(int)v10 * *(float *)(v8 + 8)) )\n          goto LABEL_9;\nLABEL_15:\n        sub_405DE0((float **)(a1 + 40));\n        v16 = *(_QWORD *)(a1 + 40);\n        v17 = *(_QWORD *)(a1 + 16);\n        v18 = *(float *)(v16 + 8);\n        if ( v17 < 0 )\n        {\n          v24 = *(_QWORD *)(a1 + 16) & 1LL | (*(_QWORD *)(a1 + 16) >> 1);\n          v19 = (float)(int)v24 + (float)(int)v24;\n        }\n        else\n        {\n          v19 = (float)(int)v17;\n        }\n        v20 = *(_QWORD *)(a1 + 24);\n        if ( v20 < 0 )\n        {\n          v23 = *(_QWORD *)(a1 + 24) & 1LL | (*(_QWORD *)(a1 + 24) >> 1);\n          v21 = (float)(int)v23 + (float)(int)v23;\n        }\n        else\n        {\n          v21 = (float)(int)v20;\n        }\n        if ( v21 <= (float)(v18 * v19) )\n          goto LABEL_9;\n        v22 = v19 * *(float *)(v16 + 12);\n        if ( !*(_BYTE *)(v16 + 16) )\n          v22 = v22 * v18;\n        if ( v22 >= 1.8446744e19 )\n          return 0xFFFFFFFFLL;\n        v25 = v22 >= 9.223372e18\n            ? (unsigned int)(int)(float)(v22 - 9.223372e18) ^ 0x8000000000000000LL\n            : (unsigned int)(int)v22;\n        if ( !(unsigned __int8)sub_406780(a1, v25) )\n          return 0xFFFFFFFFLL;\n        if ( !sub_405CC0(a1, a2, v26, 0) )\n        {\nLABEL_9:\n          v11 = v26[0];\n          if ( !*(_QWORD *)v26[0] )\n          {\n            *(_QWORD *)v26[0] = a2;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            ++*(_QWORD *)(a1 + 24);\n            return result;\n          }\n          v12 = *(_QWORD **)(a1 + 72);\n          if ( v12 )\n          {\n            *(_QWORD *)(a1 + 72) = v12[1];\nLABEL_12:\n            v13 = v11->m128i_i64[1];\n            *v12 = a2;\n            v12[1] = v13;\n            v11->m128i_i64[1] = (__int64)v12;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            return result;\n          }\n          v12 = malloc(0x10uLL);\n          if ( v12 )\n            goto LABEL_12;\n          return 0xFFFFFFFFLL;\n        }\nLABEL_35:\n        abort();\n      }\n    }\n    else\n    {\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = (float)(int)v7;\n      v10 = *(_QWORD *)(a1 + 16);\n      if ( v10 >= 0 )\n        goto LABEL_8;\n    }\n    if ( v9 <= (float)((float)((float)(v10 & 1 | (unsigned int)((unsigned __int64)v10 >> 1))\n                             + (float)(v10 & 1 | (unsigned int)((unsigned __int64)v10 >> 1)))\n                     * *(float *)(v8 + 8)) )\n      goto LABEL_9;\n    goto LABEL_15;\n  }\n  result = 0LL;\n  if ( a3 )\n    *a3 = v5;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_406C00",
            "funcStartAddr": "0x406c00",
            "funcEndAddr": "0x406c3b",
            "decompiledFuncCode": "__int64 __fastcall sub_406C00(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbx\n  int v3; // eax\n  __int64 v5; // [rsp+8h] [rbp-10h] BYREF\n\n  v2 = a2;\n  v3 = sub_406980(a1, a2, &v5);\n  if ( v3 == -1 )\n    return 0LL;\n  if ( !v3 )\n    return v5;\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_406C40",
            "funcStartAddr": "0x406c40",
            "funcEndAddr": "0x406e17",
            "decompiledFuncCode": "__int64 __fastcall sub_406C40(__int64 a1, __int64 a2)\n{\n  __int64 v3; // rbp\n  __m128i *v4; // rax\n  __int64 v6; // rax\n  float *v7; // rdx\n  float v8; // xmm0_4\n  __int64 v9; // rax\n  float v10; // xmm1_4\n  __int64 v11; // rax\n  __int64 v12; // rdx\n  float v13; // xmm0_4\n  __int64 v14; // rax\n  float v15; // xmm1_4\n  float v16; // xmm0_4\n  __int64 v17; // rsi\n  _QWORD *v18; // rdi\n  _QWORD *v19; // r12\n  int v20; // edx\n  float v21; // xmm0_4\n  __int64 v22; // rcx\n  __int64 v23; // rcx\n  __m128i *v24; // [rsp+8h] [rbp-20h] BYREF\n\n  v3 = sub_405CC0(a1, a2, &v24, 1);\n  if ( !v3 )\n    return v3;\n  v4 = v24;\n  --*(_QWORD *)(a1 + 32);\n  if ( v4->m128i_i64[0] )\n    return v3;\n  v6 = *(_QWORD *)(a1 + 24) - 1LL;\n  *(_QWORD *)(a1 + 24) = v6;\n  if ( v6 < 0 )\n  {\n    v20 = v6 & 1 | ((unsigned __int64)v6 >> 1);\n    v9 = *(_QWORD *)(a1 + 16);\n    v21 = (float)v20;\n    v7 = *(float **)(a1 + 40);\n    v8 = v21 + v21;\n    if ( v9 >= 0 )\n      goto LABEL_6;\nLABEL_22:\n    v10 = (float)(v9 & 1 | (unsigned int)((unsigned __int64)v9 >> 1))\n        + (float)(v9 & 1 | (unsigned int)((unsigned __int64)v9 >> 1));\n    goto LABEL_7;\n  }\n  v7 = *(float **)(a1 + 40);\n  v8 = (float)(int)v6;\n  v9 = *(_QWORD *)(a1 + 16);\n  if ( v9 < 0 )\n    goto LABEL_22;\nLABEL_6:\n  v10 = (float)(int)v9;\nLABEL_7:\n  if ( (float)(v10 * *v7) > v8 )\n  {\n    sub_405DE0((float **)(a1 + 40));\n    v11 = *(_QWORD *)(a1 + 16);\n    v12 = *(_QWORD *)(a1 + 40);\n    if ( v11 < 0 )\n    {\n      v23 = *(_QWORD *)(a1 + 16) & 1LL | (*(_QWORD *)(a1 + 16) >> 1);\n      v13 = (float)(int)v23 + (float)(int)v23;\n    }\n    else\n    {\n      v13 = (float)(int)v11;\n    }\n    v14 = *(_QWORD *)(a1 + 24);\n    if ( v14 < 0 )\n    {\n      v22 = *(_QWORD *)(a1 + 24) & 1LL | (*(_QWORD *)(a1 + 24) >> 1);\n      v15 = (float)(int)v22 + (float)(int)v22;\n    }\n    else\n    {\n      v15 = (float)(int)v14;\n    }\n    if ( (float)(*(float *)v12 * v13) > v15 )\n    {\n      v16 = v13 * *(float *)(v12 + 4);\n      if ( !*(_BYTE *)(v12 + 16) )\n        v16 = v16 * *(float *)(v12 + 8);\n      if ( v16 >= 9.223372e18 )\n        v17 = (unsigned int)(int)(float)(v16 - 9.223372e18) ^ 0x8000000000000000LL;\n      else\n        v17 = (unsigned int)(int)v16;\n      if ( !(unsigned __int8)sub_406780(a1, v17) )\n      {\n        v18 = *(_QWORD **)(a1 + 72);\n        if ( v18 )\n        {\n          do\n          {\n            v19 = (_QWORD *)v18[1];\n            free(v18);\n            v18 = v19;\n          }\n          while ( v19 );\n        }\n        *(_QWORD *)(a1 + 72) = 0LL;\n      }\n    }\n  }\n  return v3;\n}\n"
        },
        {
            "funcName": "sub_406E20",
            "funcStartAddr": "0x406e20",
            "funcEndAddr": "0x406e47",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_406E20(_QWORD *a1, unsigned __int64 a2)\n{\n  return (a1[1] ^ (unsigned __int64)sub_40DC40(*a1)) % a2;\n}\n"
        },
        {
            "funcName": "sub_406E90",
            "funcStartAddr": "0x406e90",
            "funcEndAddr": "0x406ec3",
            "decompiledFuncCode": "bool __fastcall sub_406E90(__int64 a1, __int64 a2)\n{\n  bool result; // al\n\n  result = 0;\n  if ( *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8) && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) )\n    return strcmp(*(const char **)a1, *(const char **)a2) == 0;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_406ED0",
            "funcStartAddr": "0x406ed0",
            "funcEndAddr": "0x406ee5",
            "decompiledFuncCode": "void __fastcall sub_406ED0(void **ptr)\n{\n  free(*ptr);\n  free(ptr);\n}\n"
        },
        {
            "funcName": "sub_406EF0",
            "funcStartAddr": "0x406ef0",
            "funcEndAddr": "0x406fa7",
            "decompiledFuncCode": "long double __fastcall sub_406EF0(int a1, long double a2)\n{\n  unsigned __int64 v7; // rax\n  long double v8; // fst6\n  long double result; // fst7\n\n  if ( a2 >= 9.223372e18 )\n    v7 = (__int64)(a2 - 9.223372e18) ^ 0x8000000000000000LL;\n  else\n    v7 = (__int64)a2;\n  v8 = (long double)v7;\n  if ( a1 )\n    return v8;\n  result = v8;\n  if ( a2 != v8 )\n    return (long double)(v7 + 1);\n  return result;\n}\n"
        },
        {
            "funcName": "sub_406FB0",
            "funcStartAddr": "0x406fb0",
            "funcEndAddr": "0x40797e",
            "decompiledFuncCode": "char *__fastcall sub_406FB0(__int64 a1, __int64 a2, __int16 a3, unsigned __int64 a4, unsigned __int64 a5)\n{\n  struct lconv *v7; // rax\n  const char *decimal_point; // r15\n  struct lconv *v9; // r12\n  size_t v10; // r8\n  char *grouping; // rax\n  const char *thousands_sep; // r12\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rsi\n  long double v15; // fst7\n  long double v16; // fst6\n  long double v17; // fst7\n  long double v18; // fst6\n  long double v19; // fst7\n  long double v20; // fst6\n  int v21; // ebx\n  long double v22; // fst5\n  long double v23; // fst4\n  long double v24; // fst7\n  long double v25; // fst6\n  long double v26; // fst7\n  size_t v27; // r14\n  long double v28; // fst7\n  unsigned __int64 v29; // r15\n  long double v30; // fst6\n  size_t v31; // rax\n  long double v32; // fst6\n  long double v33; // fst7\n  size_t v34; // r14\n  char *v35; // r15\n  char *v36; // r14\n  int v37; // eax\n  unsigned __int64 v39; // rcx\n  unsigned __int64 v40; // rtt\n  unsigned __int64 v41; // rdx\n  int v42; // r9d\n  int v43; // edi\n  int v44; // ecx\n  char *v45; // rbp\n  unsigned __int8 *v46; // r15\n  size_t v47; // rbx\n  size_t v48; // rbp\n  unsigned __int8 v49; // dl\n  size_t v50; // rax\n  size_t v51; // rbp\n  char *v52; // r14\n  unsigned __int64 v53; // rax\n  char *v54; // rdx\n  unsigned __int64 v55; // r11\n  int v56; // eax\n  unsigned int v57; // edx\n  unsigned int v58; // edi\n  bool v59; // dl\n  char v60; // al\n  unsigned __int64 v61; // r9\n  unsigned int v62; // edx\n  __int64 v63; // rdi\n  unsigned __int64 v64; // rcx\n  signed __int64 v65; // r15\n  unsigned int v66; // edx\n  __int64 v67; // rsi\n  char *v68; // [rsp+10h] [rbp-A8h]\n  int v71; // [rsp+24h] [rbp-94h]\n  int v72; // [rsp+24h] [rbp-94h]\n  size_t v74; // [rsp+30h] [rbp-88h]\n  long double v75; // [rsp+30h] [rbp-88h]\n  float v76; // [rsp+30h] [rbp-88h]\n  size_t v77; // [rsp+30h] [rbp-88h]\n  long double v78; // [rsp+30h] [rbp-88h]\n  int v79; // [rsp+40h] [rbp-78h]\n  unsigned int v80; // [rsp+44h] [rbp-74h]\n  char *v81; // [rsp+48h] [rbp-70h]\n  char src[104]; // [rsp+50h] [rbp-68h] BYREF\n\n  v79 = a3 & 0x20;\n  v71 = a3 & 3;\n  v80 = v79 == 0 ? 1000 : 1024;\n  v7 = localeconv();\n  decimal_point = v7->decimal_point;\n  v9 = v7;\n  v10 = strlen(v7->decimal_point);\n  if ( v10 - 1 >= 0x10 )\n    decimal_point = \"..\" + 1;\n  grouping = v9->grouping;\n  thousands_sep = v9->thousands_sep;\n  if ( v10 - 1 >= 0x10 )\n    v10 = 1LL;\n  v74 = v10;\n  v81 = grouping;\n  if ( strlen(thousands_sep) >= 0x11 )\n    thousands_sep = \"\";\n  v68 = (char *)(a2 + 647);\n  if ( a5 > a4 )\n  {\n    if ( !a4 || (v39 = a5 / a4, a5 % a4) )\n    {\nLABEL_10:\n      v15 = (long double)a4;\n      v16 = (long double)(__int64)a5;\n      if ( (a5 & 0x8000000000000000LL) != 0LL )\n      {\n        v17 = v15 / (v16 + 1.8446744e19);\n        v18 = (long double)a1;\n        if ( a1 >= 0 )\n        {\nLABEL_12:\n          v19 = v17 * v18;\n          if ( (a3 & 0x10) != 0 )\n          {\nLABEL_13:\n            v20 = (long double)(int)v80;\n            v21 = 0;\n            v22 = v20;\n            while ( 1 )\n            {\n              ++v21;\n              v23 = v19;\n              v24 = v22 * v20;\n              if ( v23 < v24 )\n                break;\n              if ( v21 == 8 )\n              {\n                v25 = v23;\n                v26 = v22;\n                goto LABEL_19;\n              }\n              v22 = v24;\n              v19 = v23;\n            }\n            v25 = v23;\n            v26 = v22;\nLABEL_19:\n            v27 = v74 + 1;\n            v28 = v25 / v26;\n            v29 = v74 + 1 + (v79 == 0) + 1;\n            if ( v71 == 1 )\n            {\n              __sprintf_chk(a2, 1LL, -1LL, \"%.1Lf\", v28);\n              v31 = strlen((const char *)a2);\n              if ( v31 > v29 )\n              {\n                v32 = 10.0;\n                v33 = v28 * 10.0;\n                goto LABEL_26;\n              }\n            }\n            else\n            {\n              if ( v28 < 1.8446744073709551615e19 )\n              {\n                v78 = v28;\n                v28 = sub_406EF0(v71, v28);\n                v30 = v78;\n              }\n              else\n              {\n                v30 = v28;\n              }\n              v75 = v30;\n              __sprintf_chk(a2, 1LL, -1LL, \"%.1Lf\", v28);\n              v31 = strlen((const char *)a2);\n              v28 = v30;\n              if ( v31 > v29 )\n              {\n                v32 = 10.0;\n                v33 = v75 * 10.0;\nLABEL_24:\n                if ( v33 < 1.8446744073709551615e19 )\n                {\n                  v76 = v32;\n                  v33 = sub_406EF0(v71, v33);\n                  v32 = v76;\n                }\n                goto LABEL_26;\n              }\n            }\n            if ( (a3 & 8) == 0 || *(_BYTE *)(a2 + v31 - 1) != 48 )\n            {\n              v34 = v31 - v27;\n              goto LABEL_31;\n            }\n            v32 = 10.0;\n            v33 = v28 * 10.0;\n            if ( v71 != 1 )\n              goto LABEL_24;\nLABEL_26:\n            __sprintf_chk(a2, 1LL, -1LL, \"%.0Lf\", v33 / v32);\n            v31 = strlen((const char *)a2);\n            v34 = v31;\nLABEL_31:\n            v35 = &v68[-v31];\n            v36 = &v68[v34 - v31];\n            memmove(&v68[-v31], (const void *)a2, v31);\n            goto LABEL_32;\n          }\nLABEL_27:\n          if ( v71 != 1 && v19 < 1.8446744073709551615e19 )\n            v19 = sub_406EF0(v71, v19);\n          __sprintf_chk(a2, 1LL, -1LL, \"%.0Lf\", v19);\n          v21 = -1;\n          v31 = strlen((const char *)a2);\n          v34 = v31;\n          goto LABEL_31;\n        }\n      }\n      else\n      {\n        v17 = v15 / v16;\n        v18 = (long double)a1;\n        if ( a1 >= 0 )\n          goto LABEL_12;\n      }\n      v19 = v17 * (v18 + 1.8446744e19);\n      if ( (a3 & 0x10) != 0 )\n        goto LABEL_13;\n      goto LABEL_27;\n    }\n    v14 = a1 / v39;\n    v40 = 10 * (a1 % v39);\n    v41 = 2 * (v40 % v39);\n    v42 = v40 / v39;\n    if ( v39 <= v41 )\n      v43 = (v39 < v41) + 2;\n    else\n      v43 = v41 != 0;\n    v44 = a3 & 0x10;\n    if ( (a3 & 0x10) == 0 )\n      goto LABEL_85;\n  }\n  else\n  {\n    v13 = a4 / a5;\n    if ( a4 % a5 )\n      goto LABEL_10;\n    v14 = a1 * v13;\n    if ( a1 * v13 / (a4 / a5) != a1 )\n      goto LABEL_10;\n    v43 = 0;\n    v42 = 0;\n    v44 = a3 & 0x10;\n    if ( (a3 & 0x10) == 0 )\n    {\nLABEL_85:\n      v21 = -1;\n      goto LABEL_47;\n    }\n  }\n  v21 = 0;\n  if ( v80 <= v14 )\n  {\n    while ( 1 )\n    {\n      v55 = v14 / v80;\n      v56 = (v42 + 10 * (v14 % v80)) / v80;\n      v57 = (v43 >> 1) + 2 * ((v42 + 10 * (v14 % v80)) % v80);\n      v42 = v56;\n      v14 = v55;\n      v58 = v57 + v43;\n      v43 = v80 > v57 ? v58 != 0 : (v80 < v58) + 2;\n      ++v21;\n      if ( v80 > v55 )\n        break;\n      if ( v21 == 8 )\n        goto LABEL_47;\n    }\n    if ( v55 <= 9 )\n    {\n      if ( v71 == 1 )\n        v59 = v43 + (v56 & 1) > 2;\n      else\n        v59 = v43 > 0 && v71 == 0;\n      if ( v59 )\n      {\n        if ( ++v56 == 10 )\n        {\n          v14 = v55 + 1;\n          if ( v55 == 9 )\n          {\n            v36 = v68;\nLABEL_114:\n            v43 = 0;\n            goto LABEL_115;\n          }\n          v43 = 0;\n          goto LABEL_107;\n        }\n      }\n      else if ( !v56 )\n      {\nLABEL_107:\n        v36 = v68;\n        if ( (a3 & 8) != 0 )\n        {\nLABEL_115:\n          if ( v71 == 1 )\n            goto LABEL_52;\n          v42 = 0;\n          goto LABEL_48;\n        }\n        v60 = 48;\n        goto LABEL_109;\n      }\n      v60 = v56 + 48;\nLABEL_109:\n      *(_BYTE *)(a2 + 646) = v60;\n      v36 = (char *)(a2 + 646 - v74);\n      if ( (unsigned int)v74 >= 8 )\n      {\n        v61 = (unsigned __int64)(v36 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n        *(_QWORD *)v36 = *(_QWORD *)decimal_point;\n        *(_QWORD *)&v36[(unsigned int)v74 - 8] = *(_QWORD *)&decimal_point[(unsigned int)v74 - 8];\n        if ( (((_DWORD)a2 + 646 - (_DWORD)v61) & 0xFFFFFFF8) >= 8 )\n        {\n          v62 = 0;\n          do\n          {\n            v63 = v62;\n            v62 += 8;\n            *(_QWORD *)(v61 + v63) = *(_QWORD *)(decimal_point - &v36[-v61] + v63);\n          }\n          while ( v62 < (((_DWORD)a2 + 646 - (_DWORD)v61) & 0xFFFFFFF8) );\n        }\n      }\n      else if ( (v74 & 4) != 0 )\n      {\n        *(_DWORD *)v36 = *(_DWORD *)decimal_point;\n        *(_DWORD *)&v36[(unsigned int)v74 - 4] = *(_DWORD *)&decimal_point[(unsigned int)v74 - 4];\n      }\n      else if ( (_DWORD)v74 )\n      {\n        *v36 = *decimal_point;\n        if ( (v74 & 2) != 0 )\n          *(_WORD *)&v36[(unsigned int)v74 - 2] = *(_WORD *)&decimal_point[(unsigned int)v74 - 2];\n      }\n      goto LABEL_114;\n    }\n  }\nLABEL_47:\n  v36 = v68;\n  if ( v71 == 1 )\n  {\n    if ( (v43 + (v14 & 1) != 0) + v42 <= 5 )\n      goto LABEL_52;\n    v36 = v68;\n    goto LABEL_50;\n  }\nLABEL_48:\n  if ( v71 || v42 + v43 <= 0 )\n  {\nLABEL_52:\n    v35 = v36;\n    while ( 1 )\n    {\n      *--v35 = v14 % 0xA + 48;\n      if ( v14 <= 9 )\n        break;\n      v14 /= 0xAuLL;\n    }\n    if ( (a3 & 4) == 0 )\n      goto LABEL_33;\n    goto LABEL_56;\n  }\nLABEL_50:\n  ++v14;\n  if ( !v44 || v80 != v14 || v21 == 8 )\n    goto LABEL_52;\n  ++v21;\n  if ( (a3 & 8) == 0 )\n  {\n    *(v36 - 1) = 48;\n    v36 += ~v74;\n    if ( (unsigned int)v74 >= 8 )\n    {\n      v64 = (unsigned __int64)(v36 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n      *(_QWORD *)v36 = *(_QWORD *)decimal_point;\n      *(_QWORD *)&v36[(unsigned int)v74 - 8] = *(_QWORD *)&decimal_point[(unsigned int)v74 - 8];\n      v65 = decimal_point - &v36[-v64];\n      if ( (((_DWORD)v74 + (_DWORD)v36 - (_DWORD)v64) & 0xFFFFFFF8) >= 8 )\n      {\n        v66 = 0;\n        do\n        {\n          v67 = v66;\n          v66 += 8;\n          *(_QWORD *)(v64 + v67) = *(_QWORD *)(v65 + v67);\n        }\n        while ( v66 < (((_DWORD)v74 + (_DWORD)v36 - (_DWORD)v64) & 0xFFFFFFF8) );\n      }\n    }\n    else if ( (v74 & 4) != 0 )\n    {\n      *(_DWORD *)v36 = *(_DWORD *)decimal_point;\n      *(_DWORD *)&v36[(unsigned int)v74 - 4] = *(_DWORD *)&decimal_point[(unsigned int)v74 - 4];\n    }\n    else if ( (_DWORD)v74 )\n    {\n      *v36 = *decimal_point;\n      if ( (v74 & 2) != 0 )\n        *(_WORD *)&v36[(unsigned int)v74 - 2] = *(_WORD *)&decimal_point[(unsigned int)v74 - 2];\n    }\n  }\n  v35 = v36 - 1;\n  *(v36 - 1) = 49;\nLABEL_32:\n  if ( (a3 & 4) == 0 )\n    goto LABEL_33;\nLABEL_56:\n  v45 = (char *)(v36 - v35);\n  v77 = strlen(thousands_sep);\n  __memcpy_chk(src, v35, v36 - v35, 41LL);\n  v72 = v21;\n  v46 = (unsigned __int8 *)v81;\n  v47 = (size_t)v45;\n  v48 = -1LL;\n  while ( 1 )\n  {\n    v49 = *v46;\n    if ( *v46 )\n    {\n      v50 = v49;\n      if ( v49 >= 0x7Fu )\n        v50 = v47;\n      ++v46;\n      v48 = v50;\n    }\n    if ( v48 > v47 )\n    {\n      v51 = v47;\n      v21 = v72;\n      v35 = &v36[-v51];\n      memcpy(&v36[-v51], src, v51);\n      goto LABEL_33;\n    }\n    v52 = &v36[-v48];\n    v47 -= v48;\n    memcpy(v52, &src[v47], v48);\n    if ( !v47 )\n      break;\n    v36 = &v52[-v77];\n    memcpy(v36, thousands_sep, v77);\n  }\n  v21 = v72;\n  v35 = v52;\nLABEL_33:\n  if ( (a3 & 0x80u) != 0 )\n  {\n    if ( v21 == -1 )\n    {\n      if ( a5 > 1 )\n      {\n        v21 = 1;\n        v53 = 1LL;\n        do\n        {\n          v53 *= v80;\n          if ( a5 <= v53 )\n            break;\n          ++v21;\n        }\n        while ( v21 != 8 );\n        v37 = a3 & 0x100;\n        if ( (a3 & 0x40) == 0 )\n          goto LABEL_72;\n        goto LABEL_70;\n      }\n      v21 = 0;\n    }\n    v37 = a3 & 0x100;\n    if ( !(v21 | v37) )\n      goto LABEL_36;\n    if ( (a3 & 0x40) == 0 )\n    {\nLABEL_71:\n      if ( !v21 )\n      {\n        v54 = v68;\n        if ( !v37 )\n          goto LABEL_36;\n        goto LABEL_77;\n      }\nLABEL_72:\n      if ( !v79 && v21 == 1 )\n      {\n        v54 = v68 + 1;\n        *v68 = 107;\n        if ( v37 )\n        {\nLABEL_77:\n          *v54 = 66;\n          v68 = v54 + 1;\n          goto LABEL_36;\n        }\n      }\n      else\n      {\n        v54 = v68 + 1;\n        *v68 = byte_412308[v21];\n        if ( v37 )\n        {\n          if ( v79 )\n          {\n            v54 = v68 + 2;\n            v68[1] = 105;\n          }\n          goto LABEL_77;\n        }\n      }\n      v68 = v54;\n      goto LABEL_36;\n    }\nLABEL_70:\n    *(_BYTE *)(a2 + 647) = 32;\n    v68 = (char *)(a2 + 648);\n    goto LABEL_71;\n  }\nLABEL_36:\n  *v68 = 0;\n  return v35;\n}\n"
        },
        {
            "funcName": "sub_407980",
            "funcStartAddr": "0x407980",
            "funcEndAddr": "0x407b37",
            "decompiledFuncCode": "__int64 __fastcall sub_407980(char *nptr, int *a2, __int64 *a3)\n{\n  char *v4; // rbx\n  int v5; // ebp\n  int v6; // eax\n  int v7; // ebp\n  __int64 result; // rax\n  __int64 v9; // rdx\n  char *v10; // [rsp+8h] [rbp-30h]\n\n  v4 = nptr;\n  if ( nptr || (v4 = getenv(\"BLOCK_SIZE\")) != 0LL || (v4 = getenv(\"BLOCKSIZE\")) != 0LL )\n  {\n    v5 = 0;\n    if ( *v4 == 39 )\n    {\n      ++v4;\n      v5 = 4;\n    }\n    v6 = sub_40D7B0(v4, off_4122F0, dword_4122E0, 4LL);\n    if ( v6 >= 0 )\n    {\n      *a3 = 1LL;\n      v7 = dword_4122E0[v6] | v5;\n      result = 0LL;\n      *a2 = v7;\n      return result;\n    }\n    result = sub_40A8B0(v4);\n    if ( (_DWORD)result )\n    {\n      *a2 = 0;\n      v9 = *a3;\nLABEL_15:\n      if ( !v9 )\n      {\n        *a3 = getenv(\"POSIXLY_CORRECT\") == 0LL ? 1024LL : 512LL;\n        return 4LL;\n      }\n      return result;\n    }\n    if ( (unsigned __int8)(*v4 - 48) > 9u )\n    {\n      if ( v4 != v10 )\n      {\n        while ( (unsigned __int8)(*++v4 - 48) > 9u )\n        {\n          if ( v4 == v10 )\n            goto LABEL_22;\n        }\n        goto LABEL_13;\n      }\nLABEL_22:\n      if ( *(v10 - 1) == 66 )\n      {\n        v5 |= 0x180u;\n        if ( *(v10 - 2) != 105 )\n          goto LABEL_13;\n      }\n      else\n      {\n        LOBYTE(v5) = v5 | 0x80;\n      }\n      v5 |= 0x20u;\n    }\nLABEL_13:\n    v9 = *a3;\n    *a2 = v5;\n    goto LABEL_15;\n  }\n  result = (__int64)getenv(\"POSIXLY_CORRECT\");\n  if ( result )\n  {\n    *a3 = 512LL;\n    result = 0LL;\n  }\n  else\n  {\n    *a3 = 1024LL;\n  }\n  *a2 = 0;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_407B40",
            "funcStartAddr": "0x407b40",
            "funcEndAddr": "0x407b88",
            "decompiledFuncCode": "__int64 __fastcall sub_407B40(unsigned __int64 a1, __int64 a2)\n{\n  __int64 v2; // rcx\n\n  v2 = a2 + 20;\n  *(_BYTE *)(a2 + 20) = 0;\n  while ( 1 )\n  {\n    *(_BYTE *)--v2 = a1 % 0xA + 48;\n    if ( a1 <= 9 )\n      break;\n    a1 /= 0xAuLL;\n  }\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_407B90",
            "funcStartAddr": "0x407b90",
            "funcEndAddr": "0x407f2b",
            "decompiledFuncCode": "__int64 __fastcall sub_407B90(const char *a1, _BYTE *a2, __int64 a3, size_t *a4, int a5, char a6)\n{\n  size_t v9; // rax\n  size_t v10; // r14\n  size_t v11; // r15\n  char *v12; // r12\n  size_t v13; // rdx\n  size_t v14; // rax\n  int v15; // esi\n  size_t v16; // r13\n  size_t v17; // r15\n  unsigned __int64 v18; // rbp\n  _BYTE *v19; // rdi\n  size_t v20; // rdx\n  _BYTE *v21; // rax\n  _BYTE *v22; // rdx\n  __int64 v23; // r13\n  size_t v25; // r12\n  size_t v26; // rax\n  size_t v27; // r15\n  wint_t v28; // edi\n  wchar_t *v29; // rdx\n  char *v30; // rax\n  wchar_t *v31; // r14\n  wchar_t v32; // edi\n  __int64 v33; // rax\n  unsigned __int64 v34; // rax\n  wchar_t *ptr; // [rsp+0h] [rbp-68h]\n  void *src; // [rsp+18h] [rbp-50h]\n  void *srca; // [rsp+18h] [rbp-50h]\n  __int64 size; // [rsp+20h] [rbp-48h]\n  char sizea; // [rsp+20h] [rbp-48h]\n  size_t sizeb; // [rsp+20h] [rbp-48h]\n  wchar_t *v43; // [rsp+28h] [rbp-40h]\n\n  src = (void *)a1;\n  v9 = strlen(a1);\n  v10 = v9;\n  if ( (a6 & 2) != 0 || (v25 = v9, __ctype_get_mb_cur_max() <= 1) )\n  {\nLABEL_2:\n    ptr = 0LL;\n    v11 = v10;\n    v12 = 0LL;\n    goto LABEL_3;\n  }\n  v26 = mbstowcs(0LL, a1, 0LL);\n  if ( v26 == -1LL )\n  {\n    if ( (a6 & 1) == 0 )\n    {\nLABEL_36:\n      v12 = 0LL;\n      v23 = -1LL;\n      free(0LL);\n      goto LABEL_28;\n    }\n    goto LABEL_2;\n  }\n  v27 = v26 + 1;\n  size = v26 + 1;\n  ptr = (wchar_t *)malloc(size * 4);\n  if ( !ptr )\n  {\n    v11 = v10;\n    v12 = 0LL;\n    if ( (a6 & 1) == 0 )\n      goto LABEL_36;\nLABEL_3:\n    v13 = *a4;\n    if ( *a4 < v11 )\n    {\n      v10 = *a4;\n      v14 = 0LL;\n      goto LABEL_5;\n    }\nLABEL_30:\n    if ( v11 < v13 )\n    {\n      v15 = a5;\n      v14 = v13 - v11;\n      *a4 = v11;\n      if ( a5 )\n      {\nLABEL_6:\n        v16 = 0LL;\n        if ( v15 != 1 )\n        {\n          v16 = v14 >> 1;\n          v14 = (v14 >> 1) + (v14 & 1);\n        }\n        goto LABEL_8;\n      }\nLABEL_32:\n      v16 = v14;\n      v14 = 0LL;\nLABEL_8:\n      v17 = v14 + v10;\n      if ( (a6 & 4) != 0 )\n      {\n        v17 = v10;\n        v14 = 0LL;\n      }\n      if ( (a6 & 8) != 0 )\n        v16 = 0LL;\n      if ( a3 )\n      {\n        v18 = (unsigned __int64)&a2[a3 - 1];\n        v19 = a2;\n        if ( (unsigned __int64)a2 < v18 && v14 )\n        {\n          do\n            *v19++ = 32;\n          while ( v14 + a2 - v19 && v18 > (unsigned __int64)v19 );\n        }\n        *v19 = 0;\n        v20 = v18 - (_QWORD)v19;\n        if ( v18 - (unsigned __int64)v19 > v10 )\n          v20 = v10;\n        v21 = mempcpy(v19, src, v20);\n        v22 = v21;\n        if ( v18 > (unsigned __int64)v21 && v16 )\n        {\n          do\n            *v22++ = 32;\n          while ( &v21[v16 - (_QWORD)v22] && v18 > (unsigned __int64)v22 );\n        }\n        *v22 = 0;\n      }\n      v23 = v17 + v16;\n      goto LABEL_27;\n    }\n    v13 = v11;\n    v14 = 0LL;\nLABEL_5:\n    v15 = a5;\n    *a4 = v13;\n    if ( a5 )\n      goto LABEL_6;\n    goto LABEL_32;\n  }\n  if ( !mbstowcs(ptr, a1, v27) )\n  {\n    v11 = v10;\n    v12 = 0LL;\n    goto LABEL_3;\n  }\n  ptr[size - 1] = 0;\n  v28 = *ptr;\n  v29 = ptr;\n  if ( *ptr )\n  {\n    sizea = 0;\n    do\n    {\n      v43 = v29;\n      if ( !iswprint(v28) )\n      {\n        *v43 = 65533;\n        sizea = 1;\n      }\n      v29 = v43 + 1;\n      v28 = v43[1];\n    }\n    while ( v28 );\n    v11 = wcswidth(ptr, v27);\n    if ( sizea )\n    {\n      sizeb = wcstombs(0LL, ptr, 0LL) + 1;\n      v30 = (char *)malloc(sizeb);\n      goto LABEL_46;\n    }\n  }\n  else\n  {\n    v11 = wcswidth(ptr, v27);\n  }\n  v13 = *a4;\n  if ( *a4 >= v11 )\n  {\n    v12 = 0LL;\n    goto LABEL_30;\n  }\n  sizeb = v25 + 1;\n  v30 = (char *)malloc(v25 + 1);\nLABEL_46:\n  v12 = v30;\n  if ( v30 )\n  {\n    v31 = ptr;\n    v32 = *ptr;\n    srca = (void *)*a4;\n    if ( *ptr )\n    {\n      v11 = 0LL;\n      do\n      {\n        LODWORD(v33) = wcwidth(v32);\n        if ( (_DWORD)v33 == -1 )\n        {\n          *v31 = 65533;\n          v33 = 1LL;\n        }\n        else\n        {\n          v33 = (int)v33;\n        }\n        v34 = v11 + v33;\n        if ( (unsigned __int64)srca < v34 )\n          break;\n        v32 = *++v31;\n        v11 = v34;\n      }\n      while ( *v31 );\n    }\n    else\n    {\n      v31 = ptr;\n      v11 = 0LL;\n    }\n    *v31 = 0;\n    src = v12;\n    v10 = wcstombs(v12, ptr, sizeb);\n    goto LABEL_3;\n  }\n  if ( (a6 & 1) != 0 )\n    goto LABEL_3;\n  v23 = -1LL;\nLABEL_27:\n  free(ptr);\nLABEL_28:\n  free(v12);\n  return v23;\n}\n"
        },
        {
            "funcName": "sub_407F30",
            "funcStartAddr": "0x407f30",
            "funcEndAddr": "0x407fcd",
            "decompiledFuncCode": "_BYTE *__fastcall sub_407F30(const char *a1, size_t *a2, int a3, char a4)\n{\n  void *v4; // r12\n  size_t v5; // r13\n  unsigned __int64 v6; // rax\n  unsigned __int64 v7; // rbx\n  _BYTE *v8; // rax\n  _BYTE *v9; // r14\n  void *v11; // rdi\n\n  v4 = 0LL;\n  v5 = *a2;\n  v6 = *a2;\n  while ( 1 )\n  {\n    v7 = v6 + 1;\n    v8 = realloc(v4, v6 + 1);\n    v9 = v8;\n    if ( !v8 )\n    {\n      free(v4);\n      return v9;\n    }\n    *a2 = v5;\n    v6 = sub_407B90(a1, v8, v7, a2, a3, a4);\n    if ( v6 == -1LL )\n      break;\n    v4 = v9;\n    if ( v7 > v6 )\n      return v9;\n  }\n  v11 = v9;\n  v9 = 0LL;\n  free(v11);\n  return v9;\n}\n"
        },
        {
            "funcName": "sub_407FD0",
            "funcStartAddr": "0x407fd0",
            "funcEndAddr": "0x408183",
            "decompiledFuncCode": "__int64 __fastcall sub_407FD0(char *s, __int64 a2, char a3)\n{\n  char *v4; // r13\n  char *v5; // rbx\n  unsigned int v6; // r12d\n  char v7; // al\n  __int64 v8; // rax\n  __int64 v9; // rbp\n  int v10; // eax\n  int v12; // r15d\n  const unsigned __int16 *v13; // rdx\n  unsigned __int16 v14; // ax\n  wchar_t c; // [rsp+4h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+8h] [rbp-40h] BYREF\n\n  v4 = &s[a2];\n  v5 = s;\n  if ( __ctype_get_mb_cur_max() <= 1 )\n  {\n    v6 = 0;\n    if ( s >= v4 )\n      return v6;\n    v6 = 0;\n    v12 = a3 & 2;\n    v13 = *__ctype_b_loc();\n    while ( 1 )\n    {\n      v14 = v13[(unsigned __int8)*v5++];\n      if ( (v14 & 0x4000) != 0 )\n        goto LABEL_33;\n      if ( v12 )\n        return (unsigned int)-1;\n      if ( (v14 & 2) == 0 )\n      {\nLABEL_33:\n        if ( v6 == 0x7FFFFFFF )\n          return v6;\n        ++v6;\n      }\n      if ( v4 == v5 )\n        return v6;\n    }\n  }\n  v6 = 0;\n  if ( s < v4 )\n  {\n    do\n    {\n      v7 = *v5;\n      if ( *v5 <= 63 )\n      {\n        if ( v7 < 37 && (unsigned __int8)(v7 - 32) > 3u )\n        {\nLABEL_12:\n          ps = 0LL;\n          while ( 1 )\n          {\n            v8 = sub_40C400(&c, v5);\n            v9 = v8;\n            if ( v8 == -1 )\n            {\n              if ( (a3 & 1) == 0 )\n                goto LABEL_6;\n              return (unsigned int)-1;\n            }\n            if ( v8 == -2 )\n              break;\n            if ( !v8 )\n              v9 = 1LL;\n            v10 = wcwidth(c);\n            if ( v10 >= 0 )\n            {\n              if ( (int)(0x7FFFFFFF - v6) < v10 )\n                return 0x7FFFFFFF;\n              v6 += v10;\n            }\n            else\n            {\n              if ( (a3 & 2) != 0 )\n                return (unsigned int)-1;\n              if ( !iswcntrl(c) )\n              {\n                if ( v6 == 0x7FFFFFFF )\n                  return 0x7FFFFFFF;\n                ++v6;\n              }\n            }\n            v5 += v9;\n            if ( mbsinit(&ps) )\n              goto LABEL_7;\n          }\n          if ( (a3 & 1) != 0 )\n            return (unsigned int)-1;\n          ++v6;\n          v5 = &s[a2];\n          continue;\n        }\n      }\n      else if ( v7 < 65 || v7 > 95 && (unsigned __int8)(v7 - 97) > 0x1Du )\n      {\n        goto LABEL_12;\n      }\nLABEL_6:\n      ++v5;\n      ++v6;\nLABEL_7:\n      ;\n    }\n    while ( v5 < v4 );\n  }\n  return v6;\n}\n"
        },
        {
            "funcName": "sub_408190",
            "funcStartAddr": "0x408190",
            "funcEndAddr": "0x4081b3",
            "decompiledFuncCode": "__int64 __fastcall sub_408190(char *s, char a2)\n{\n  __int64 v2; // rax\n\n  v2 = strlen(s);\n  return sub_407FD0(s, v2, a2);\n}\n"
        },
        {
            "funcName": "sub_4081C0",
            "funcStartAddr": "0x4081c0",
            "funcEndAddr": "0x408259",
            "decompiledFuncCode": "char *__fastcall sub_4081C0(const char *a1)\n{\n  __int64 v1; // rbx\n  char *result; // rax\n\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v1 = (__int64)a1;\n  result = strrchr(a1, 47);\n  if ( result )\n  {\n    if ( result + 1 - a1 > 6 && !memcmp(result - 6, \"/.libs/\", 7uLL) )\n    {\n      v1 = (__int64)(result + 1);\n      if ( !memcmp(result + 1, \"lt-\", 3uLL) )\n      {\n        v1 = (__int64)(result + 4);\n        program_invocation_short_name = (__int64)(result + 4);\n      }\n    }\n  }\n  qword_617708 = v1;\n  program_invocation_name = v1;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_408260",
            "funcStartAddr": "0x408260",
            "funcEndAddr": "0x408352",
            "decompiledFuncCode": "const char *__fastcall sub_408260(char *msgid, int a2)\n{\n  char *v2; // rbx\n  _BYTE *v4; // rax\n  bool v5; // zf\n  __int64 v6; // rbx\n\n  v2 = dcgettext(0LL, msgid, 5);\n  if ( msgid != v2 )\n    return v2;\n  v4 = (_BYTE *)sub_40DC80();\n  if ( (*v4 & 0xDF) == 85 )\n  {\n    if ( (v4[1] & 0xDF) == 84 && (v4[2] & 0xDF) == 70 && v4[3] == 45 && v4[4] == 56 && !v4[5] )\n    {\n      v5 = *v2 == 96;\n      v2 = (char *)&unk_41237F;\n      if ( !v5 )\n        return (const char *)&unk_412374;\n      return v2;\n    }\n  }\n  else if ( (*v4 & 0xDF) == 71\n         && (v4[1] & 0xDF) == 66\n         && v4[2] == 49\n         && v4[3] == 56\n         && v4[4] == 48\n         && v4[5] == 51\n         && v4[6] == 48\n         && !v4[7] )\n  {\n    v5 = *v2 == 96;\n    v2 = (char *)&unk_41237B;\n    if ( !v5 )\n      return (const char *)&unk_412378;\n    return v2;\n  }\n  v6 = 4263910LL;\n  if ( a2 != 9 )\n    return \"'\";\n  return (const char *)v6;\n}\n"
        },
        {
            "funcName": "sub_408360",
            "funcStartAddr": "0x4023b4",
            "funcEndAddr": "0x4023b9",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_408360(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        const char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  const char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  const char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_408360((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_408360((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_40C400((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_408360((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"!\\\"field used\\\"\" + 12;\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"!\\\"field used\\\"\" + 12;\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"!\\\"field used\\\"\" + 12;\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_408260(\"`\", a5);\n        v51 = (char *)sub_408260((char *)\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n\nunsigned __int64 __fastcall sub_408360(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        const char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  const char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  const char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_408360((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_408360((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_40C400((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_408360((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"!\\\"field used\\\"\" + 12;\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"!\\\"field used\\\"\" + 12;\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"!\\\"field used\\\"\" + 12;\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_408260(\"`\", a5);\n        v51 = (char *)sub_408260((char *)\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n"
        },
        {
            "funcName": "sub_408360",
            "funcStartAddr": "0x4023b4",
            "funcEndAddr": "0x4023b9",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_408360(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        const char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  const char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  const char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_408360((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_408360((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_40C400((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_408360((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"!\\\"field used\\\"\" + 12;\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"!\\\"field used\\\"\" + 12;\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"!\\\"field used\\\"\" + 12;\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_408260(\"`\", a5);\n        v51 = (char *)sub_408260((char *)\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n\nunsigned __int64 __fastcall sub_408360(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        const char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  const char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  const char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_408360((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_408360((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_40C400((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_408360((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"!\\\"field used\\\"\" + 12;\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"!\\\"field used\\\"\" + 12;\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"!\\\"field used\\\"\" + 12;\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_408260(\"`\", a5);\n        v51 = (char *)sub_408260((char *)\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n"
        },
        {
            "funcName": "sub_409590",
            "funcStartAddr": "0x4023b9",
            "funcEndAddr": "0x4023be",
            "decompiledFuncCode": "_BYTE *__fastcall sub_409590(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)ptr;\n  v8 = v6;\n  v20 = *v6;\n  if ( (int)a1 < 0 )\n    abort();\n  if ( dword_6175D0 <= (int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_40A7B0(a1, a2);\n    v9 = 16LL * ((int)a1 + 1);\n    if ( ptr == &xmmword_6175C0 )\n    {\n      v7 = (__m128i *)sub_40A5C0(0LL, v9);\n      ptr = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_6175C0);\n    }\n    else\n    {\n      ptr = (void *)sub_40A5C0(ptr, v9);\n      v7 = (__m128i *)ptr;\n    }\n    memset(&v7[dword_6175D0], 0, 16LL * ((int)a1 + 1 - dword_6175D0));\n    dword_6175D0 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[(int)a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_408360(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(const char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_617720 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_40A560(v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_408360(v14, v13, a2, a3, v15, v21, a4 + 8, *(const char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n\n_BYTE *__fastcall sub_409590(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)ptr;\n  v8 = v6;\n  v20 = *v6;\n  if ( (int)a1 < 0 )\n    abort();\n  if ( dword_6175D0 <= (int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_40A7B0(a1, a2);\n    v9 = 16LL * ((int)a1 + 1);\n    if ( ptr == &xmmword_6175C0 )\n    {\n      v7 = (__m128i *)sub_40A5C0(0LL, v9);\n      ptr = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_6175C0);\n    }\n    else\n    {\n      ptr = (void *)sub_40A5C0(ptr, v9);\n      v7 = (__m128i *)ptr;\n    }\n    memset(&v7[dword_6175D0], 0, 16LL * ((int)a1 + 1 - dword_6175D0));\n    dword_6175D0 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[(int)a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_408360(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(const char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_617720 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_40A560(v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_408360(v14, v13, a2, a3, v15, v21, a4 + 8, *(const char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n"
        },
        {
            "funcName": "sub_409590",
            "funcStartAddr": "0x4023b9",
            "funcEndAddr": "0x4023be",
            "decompiledFuncCode": "_BYTE *__fastcall sub_409590(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)ptr;\n  v8 = v6;\n  v20 = *v6;\n  if ( (int)a1 < 0 )\n    abort();\n  if ( dword_6175D0 <= (int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_40A7B0(a1, a2);\n    v9 = 16LL * ((int)a1 + 1);\n    if ( ptr == &xmmword_6175C0 )\n    {\n      v7 = (__m128i *)sub_40A5C0(0LL, v9);\n      ptr = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_6175C0);\n    }\n    else\n    {\n      ptr = (void *)sub_40A5C0(ptr, v9);\n      v7 = (__m128i *)ptr;\n    }\n    memset(&v7[dword_6175D0], 0, 16LL * ((int)a1 + 1 - dword_6175D0));\n    dword_6175D0 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[(int)a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_408360(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(const char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_617720 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_40A560(v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_408360(v14, v13, a2, a3, v15, v21, a4 + 8, *(const char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n\n_BYTE *__fastcall sub_409590(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)ptr;\n  v8 = v6;\n  v20 = *v6;\n  if ( (int)a1 < 0 )\n    abort();\n  if ( dword_6175D0 <= (int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_40A7B0(a1, a2);\n    v9 = 16LL * ((int)a1 + 1);\n    if ( ptr == &xmmword_6175C0 )\n    {\n      v7 = (__m128i *)sub_40A5C0(0LL, v9);\n      ptr = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_6175C0);\n    }\n    else\n    {\n      ptr = (void *)sub_40A5C0(ptr, v9);\n      v7 = (__m128i *)ptr;\n    }\n    memset(&v7[dword_6175D0], 0, 16LL * ((int)a1 + 1 - dword_6175D0));\n    dword_6175D0 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[(int)a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_408360(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(const char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_617720 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_40A560(v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_408360(v14, v13, a2, a3, v15, v21, a4 + 8, *(const char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n"
        },
        {
            "funcName": "sub_409730",
            "funcStartAddr": "0x409730",
            "funcEndAddr": "0x409764",
            "decompiledFuncCode": "__int64 __fastcall sub_409730(__int128 *a1)\n{\n  __int128 *v1; // rbx\n  int *v2; // rax\n  int v3; // r12d\n  int *v4; // rbp\n  __int64 result; // rax\n\n  v1 = a1;\n  v2 = __errno_location();\n  v3 = *v2;\n  v4 = v2;\n  if ( !a1 )\n    v1 = &xmmword_617820;\n  result = sub_40A760(v1, 0x38uLL);\n  *v4 = v3;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_409820",
            "funcStartAddr": "0x409820",
            "funcEndAddr": "0x409892",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_409820(_BYTE *a1, unsigned __int64 a2, __int64 a3, unsigned __int64 a4, __int128 *a5)\n{\n  __int128 *v6; // rbx\n  int *v7; // rax\n  int v8; // r12d\n  int *v9; // rbp\n  unsigned __int64 result; // rax\n\n  v6 = a5;\n  if ( !a5 )\n    v6 = &xmmword_617820;\n  v7 = __errno_location();\n  v8 = *v7;\n  v9 = v7;\n  result = sub_408360(\n             a1,\n             a2,\n             a3,\n             a4,\n             *(_DWORD *)v6,\n             *((_DWORD *)v6 + 1),\n             (__int64)v6 + 8,\n             *((const char **)v6 + 5),\n             *((char **)v6 + 6));\n  *v9 = v8;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4098A0",
            "funcStartAddr": "0x4098a0",
            "funcEndAddr": "0x409981",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4098A0(__int64 a1, unsigned __int64 a2, unsigned __int64 *a3, __int128 *a4)\n{\n  __int128 *v5; // rbx\n  int *v6; // r13\n  int v7; // ebp\n  int v9; // [rsp+Ch] [rbp-5Ch]\n  _BYTE *v10; // [rsp+10h] [rbp-58h]\n  unsigned __int64 v11; // [rsp+28h] [rbp-40h]\n\n  v5 = a4;\n  if ( !a4 )\n    v5 = &xmmword_617820;\n  v6 = __errno_location();\n  v7 = *((_DWORD *)v5 + 1) | (a3 == 0LL);\n  v9 = *v6;\n  v11 = sub_408360(0LL, 0LL, a1, a2, *(_DWORD *)v5, v7, (__int64)v5 + 8, *((const char **)v5 + 5), *((char **)v5 + 6));\n  v10 = (_BYTE *)sub_40A560(v11 + 1);\n  sub_408360(v10, v11 + 1, a1, a2, *(_DWORD *)v5, v7, (__int64)v5 + 8, *((const char **)v5 + 5), *((char **)v5 + 6));\n  *v6 = v9;\n  if ( a3 )\n    *a3 = v11;\n  return v10;\n}\n"
        },
        {
            "funcName": "sub_4099A0",
            "funcStartAddr": "0x4099a0",
            "funcEndAddr": "0x409a35",
            "decompiledFuncCode": "void sub_4099A0()\n{\n  __int128 *v0; // r12\n  void **v1; // rbx\n  void **v2; // rbp\n  void *v3; // rdi\n  void *v4; // rdi\n\n  v0 = (__int128 *)ptr;\n  if ( dword_6175D0 > 1 )\n  {\n    v1 = (void **)((char *)ptr + 24);\n    v2 = (void **)((char *)ptr + 16 * (unsigned int)(dword_6175D0 - 2) + 40);\n    do\n    {\n      v3 = *v1;\n      v1 += 2;\n      free(v3);\n    }\n    while ( v1 != v2 );\n  }\n  v4 = (void *)*((_QWORD *)v0 + 1);\n  if ( v4 != &unk_617720 )\n  {\n    free(v4);\n    *(_QWORD *)&xmmword_6175C0 = 256LL;\n    *((_QWORD *)&xmmword_6175C0 + 1) = &unk_617720;\n  }\n  if ( v0 != &xmmword_6175C0 )\n  {\n    free(v0);\n    ptr = &xmmword_6175C0;\n  }\n  dword_6175D0 = 1;\n}\n"
        },
        {
            "funcName": "sub_409AB0",
            "funcStartAddr": "0x4023be",
            "funcEndAddr": "0x4023c3",
            "decompiledFuncCode": "_BYTE *__fastcall sub_409AB0(__int64 a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_409590(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_409AB0(__int64 a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_409590(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_409AB0",
            "funcStartAddr": "0x4023be",
            "funcEndAddr": "0x4023c3",
            "decompiledFuncCode": "_BYTE *__fastcall sub_409AB0(__int64 a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_409590(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_409AB0(__int64 a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_409590(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_409B20",
            "funcStartAddr": "0x4023c3",
            "funcEndAddr": "0x4023c8",
            "decompiledFuncCode": "_BYTE *__fastcall sub_409B20(__int64 a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_409590(a1, a3, a4, (__int64)v5);\n}\n\n_BYTE *__fastcall sub_409B20(__int64 a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_409590(a1, a3, a4, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_409B20",
            "funcStartAddr": "0x4023c3",
            "funcEndAddr": "0x4023c8",
            "decompiledFuncCode": "_BYTE *__fastcall sub_409B20(__int64 a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_409590(a1, a3, a4, (__int64)v5);\n}\n\n_BYTE *__fastcall sub_409B20(__int64 a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_409590(a1, a3, a4, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_409B90",
            "funcStartAddr": "0x409b90",
            "funcEndAddr": "0x409b9c",
            "decompiledFuncCode": "_BYTE *__fastcall sub_409B90(int a1, __int64 a2)\n{\n  return sub_409AB0(0LL, a1, a2);\n}\n"
        },
        {
            "funcName": "sub_409BB0",
            "funcStartAddr": "0x409bb0",
            "funcEndAddr": "0x409c20",
            "decompiledFuncCode": "_BYTE *__fastcall sub_409BB0(__int64 a1, unsigned __int64 a2, unsigned __int8 a3)\n{\n  _DWORD *v3; // r8\n  __int128 v5[3]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+30h] [rbp-18h]\n\n  v6 = qword_617850;\n  v5[0] = (__int128)_mm_load_si128((const __m128i *)&xmmword_617820);\n  v5[1] = (__int128)_mm_load_si128((const __m128i *)&xmmword_617830);\n  v3 = (_DWORD *)v5 + (a3 >> 5) + 2;\n  v5[2] = (__int128)_mm_load_si128((const __m128i *)&xmmword_617840);\n  *v3 ^= (((*v3 >> (a3 & 0x1F)) & 1) == 0) << (a3 & 0x1F);\n  return sub_409590(0LL, a1, a2, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_409C30",
            "funcStartAddr": "0x409c30",
            "funcEndAddr": "0x409c41",
            "decompiledFuncCode": "_BYTE *__fastcall sub_409C30(__int64 a1)\n{\n  return sub_409BB0(a1, 0xFFFFFFFFFFFFFFFFLL, 0x3Au);\n}\n"
        },
        {
            "funcName": "sub_409C60",
            "funcStartAddr": "0x4023c8",
            "funcEndAddr": "0x4023cd",
            "decompiledFuncCode": "_BYTE *__fastcall sub_409C60(__int64 a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_409590(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_409C60(__int64 a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_409590(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_409C60",
            "funcStartAddr": "0x4023c8",
            "funcEndAddr": "0x4023cd",
            "decompiledFuncCode": "_BYTE *__fastcall sub_409C60(__int64 a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_409590(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_409C60(__int64 a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_409590(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_409CD0",
            "funcStartAddr": "0x409cd0",
            "funcEndAddr": "0x409d3c",
            "decompiledFuncCode": "_BYTE *__fastcall sub_409CD0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, unsigned __int64 a5)\n{\n  __int128 v6[2]; // [rsp+0h] [rbp-48h] BYREF\n  __m128i si128; // [rsp+20h] [rbp-28h]\n  __int64 v8; // [rsp+30h] [rbp-18h]\n\n  v6[0] = (__int128)_mm_load_si128((const __m128i *)&xmmword_617820);\n  v6[1] = (__int128)_mm_load_si128((const __m128i *)&xmmword_617830);\n  si128 = _mm_load_si128((const __m128i *)&xmmword_617840);\n  v8 = qword_617850;\n  LODWORD(v6[0]) = 10;\n  if ( !a2 || !a3 )\n    abort();\n  si128.m128i_i64[1] = a2;\n  v8 = a3;\n  return sub_409590(a1, a4, a5, (__int64)v6);\n}\n"
        },
        {
            "funcName": "sub_409DC0",
            "funcStartAddr": "0x409dc0",
            "funcEndAddr": "0x409dd1",
            "decompiledFuncCode": "_BYTE *__fastcall sub_409DC0(__int64 a1, __int64 a2)\n{\n  return sub_409590(a1, a2, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_617580);\n}\n"
        },
        {
            "funcName": "sub_409DE0",
            "funcStartAddr": "0x409de0",
            "funcEndAddr": "0x409df6",
            "decompiledFuncCode": "_BYTE *__fastcall sub_409DE0(__int64 a1)\n{\n  return sub_409590(0LL, a1, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_617580);\n}\n"
        },
        {
            "funcName": "sub_409E00",
            "funcStartAddr": "0x409e00",
            "funcEndAddr": "0x409f30",
            "decompiledFuncCode": "__int64 __fastcall sub_409E00(_BYTE *a1, _BYTE *a2)\n{\n  unsigned int v2; // ebx\n  const char *v3; // rbp\n  const char *v4; // r12\n  size_t v5; // r13\n  char *v7; // rbp\n  char *v8; // r12\n  int *v9; // rax\n  int *v10; // rax\n  struct stat v11; // [rsp+0h] [rbp-158h] BYREF\n  struct stat stat_buf; // [rsp+90h] [rbp-C8h] BYREF\n\n  v2 = 0;\n  v3 = sub_405A70(a1);\n  v4 = sub_405A70(a2);\n  v5 = sub_405AD0(v3);\n  if ( v5 == sub_405AD0(v4) && !memcmp(v3, v4, v5) )\n  {\n    v7 = (char *)sub_405990(a1, (__int64)v4);\n    v8 = (char *)sub_405990(a2, (__int64)v4);\n    if ( __xstat(1, v7, &v11) )\n    {\n      v10 = __errno_location();\n      error(1, *v10, \"%s\", v7);\n    }\n    if ( __xstat(1, v8, &stat_buf) )\n    {\n      v9 = __errno_location();\n      error(1, *v9, \"%s\", v8);\n    }\n    v2 = 0;\n    if ( v11.st_ino == stat_buf.st_ino )\n      LOBYTE(v2) = v11.st_dev == stat_buf.st_dev;\n    free(v7);\n    free(v8);\n  }\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_409F30",
            "funcStartAddr": "0x409f30",
            "funcEndAddr": "0x409f7a",
            "decompiledFuncCode": "__int64 __fastcall sub_409F30(__int64 a1, __int64 a2, int a3, int a4, int a5, int a6)\n{\n  int v6; // edx\n  __int64 result; // rax\n  __int64 v8; // rax\n\n  *(_QWORD *)(a1 + 8) = 0LL;\n  v6 = sub_40DB90(4268428, 0x80000, a3, a4, a5, a6);\n  *(_DWORD *)a1 = v6;\n  result = 0LL;\n  if ( v6 < 0 )\n  {\n    v8 = sub_40B160(0LL, 0LL);\n    *(_QWORD *)(a1 + 8) = v8;\n    return (unsigned int)-(v8 == 0);\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_409F80",
            "funcStartAddr": "0x409f80",
            "funcEndAddr": "0x409f99",
            "decompiledFuncCode": "int __fastcall sub_409F80(__int64 a1)\n{\n  if ( *(int *)a1 < 0 )\n    return sub_40AE00(*(void **)(a1 + 8));\n  else\n    return fchdir(*(_DWORD *)a1);\n}\n"
        },
        {
            "funcName": "sub_409FA0",
            "funcStartAddr": "0x409fa0",
            "funcEndAddr": "0x409fb9",
            "decompiledFuncCode": "void __fastcall sub_409FA0(__int64 a1)\n{\n  int v2; // edi\n\n  v2 = *(_DWORD *)a1;\n  if ( v2 >= 0 )\n    close(v2);\n  free(*(void **)(a1 + 8));\n}\n"
        },
        {
            "funcName": "sub_409FC0",
            "funcStartAddr": "0x4023cd",
            "funcEndAddr": "0x4023d2",
            "decompiledFuncCode": "__int64 __fastcall sub_409FC0(FILE *stream, const char *a2, const char *a3, const char *a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r13\n  __int64 v13; // r12\n  __int64 v14; // r15\n  __int64 v15; // r14\n  __int64 v16; // rbx\n  char *v17; // rax\n  const char *v19; // rsi\n  __int64 v20; // r8\n  __int64 v21; // r13\n  __int64 v22; // r12\n  __int64 v23; // r15\n  __int64 v24; // r14\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // r15\n  __int64 v43; // r14\n  __int64 v44; // r13\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r13\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  __int64 v51; // r8\n  __int64 v52; // rbx\n  char *v53; // rax\n  __int64 v54; // r8\n  __int64 v55; // [rsp-10h] [rbp-68h]\n  __int64 v56; // [rsp+0h] [rbp-58h]\n  __int64 v57; // [rsp+0h] [rbp-58h]\n  __int64 v58; // [rsp+0h] [rbp-58h]\n  __int64 v59; // [rsp+0h] [rbp-58h]\n  __int64 v60; // [rsp+8h] [rbp-50h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+8h] [rbp-50h]\n  __int64 v63; // [rsp+10h] [rbp-48h]\n  __int64 v64; // [rsp+10h] [rbp-48h]\n  __int64 v65; // [rsp+18h] [rbp-40h]\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v27 = *a5;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v28, v27);\n    case 2LL:\n      v29 = a5[1];\n      v30 = *a5;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v31, v30, v29);\n    case 3LL:\n      v32 = a5[2];\n      v33 = a5[1];\n      v34 = *a5;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v35, v34, v33, v32);\n    case 4LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v40, v39, v38, v37, v36);\n      return v55;\n    case 6LL:\n      v41 = a5[5];\n      v42 = a5[4];\n      v43 = a5[3];\n      v58 = a5[1];\n      v44 = a5[2];\n      v45 = *a5;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v46, v45, v58, v44, v43, v42, v41);\n    case 7LL:\n      v47 = a5[6];\n      v48 = a5[5];\n      v49 = a5[4];\n      v50 = a5[3];\n      v51 = a5[1];\n      v62 = a5[2];\n      v52 = *a5;\n      v59 = v51;\n      v53 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v53, v52, v59, v62, v50, v49, v48, v47);\n    case 8LL:\n      v10 = a5[2];\n      v11 = a5[1];\n      v12 = a5[6];\n      v13 = a5[5];\n      v14 = a5[4];\n      v63 = a5[7];\n      v15 = a5[3];\n      v16 = *a5;\n      v56 = v10;\n      v60 = v11;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16, v60, v56, v15, v14, v13, v12, v63);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v54 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v54;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return __fprintf_chk(stream, 1LL, v26, v25, v61, v57, v24, v23, v22, v21, v64, v65);\n  }\n}\n\n__int64 __fastcall sub_409FC0(FILE *stream, const char *a2, const char *a3, const char *a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r13\n  __int64 v13; // r12\n  __int64 v14; // r15\n  __int64 v15; // r14\n  __int64 v16; // rbx\n  char *v17; // rax\n  const char *v19; // rsi\n  __int64 v20; // r8\n  __int64 v21; // r13\n  __int64 v22; // r12\n  __int64 v23; // r15\n  __int64 v24; // r14\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // r15\n  __int64 v43; // r14\n  __int64 v44; // r13\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r13\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  __int64 v51; // r8\n  __int64 v52; // rbx\n  char *v53; // rax\n  __int64 v54; // r8\n  __int64 v55; // [rsp-10h] [rbp-68h]\n  __int64 v56; // [rsp+0h] [rbp-58h]\n  __int64 v57; // [rsp+0h] [rbp-58h]\n  __int64 v58; // [rsp+0h] [rbp-58h]\n  __int64 v59; // [rsp+0h] [rbp-58h]\n  __int64 v60; // [rsp+8h] [rbp-50h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+8h] [rbp-50h]\n  __int64 v63; // [rsp+10h] [rbp-48h]\n  __int64 v64; // [rsp+10h] [rbp-48h]\n  __int64 v65; // [rsp+18h] [rbp-40h]\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v27 = *a5;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v28, v27);\n    case 2LL:\n      v29 = a5[1];\n      v30 = *a5;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v31, v30, v29);\n    case 3LL:\n      v32 = a5[2];\n      v33 = a5[1];\n      v34 = *a5;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v35, v34, v33, v32);\n    case 4LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v40, v39, v38, v37, v36);\n      return v55;\n    case 6LL:\n      v41 = a5[5];\n      v42 = a5[4];\n      v43 = a5[3];\n      v58 = a5[1];\n      v44 = a5[2];\n      v45 = *a5;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v46, v45, v58, v44, v43, v42, v41);\n    case 7LL:\n      v47 = a5[6];\n      v48 = a5[5];\n      v49 = a5[4];\n      v50 = a5[3];\n      v51 = a5[1];\n      v62 = a5[2];\n      v52 = *a5;\n      v59 = v51;\n      v53 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v53, v52, v59, v62, v50, v49, v48, v47);\n    case 8LL:\n      v10 = a5[2];\n      v11 = a5[1];\n      v12 = a5[6];\n      v13 = a5[5];\n      v14 = a5[4];\n      v63 = a5[7];\n      v15 = a5[3];\n      v16 = *a5;\n      v56 = v10;\n      v60 = v11;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16, v60, v56, v15, v14, v13, v12, v63);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v54 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v54;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return __fprintf_chk(stream, 1LL, v26, v25, v61, v57, v24, v23, v22, v21, v64, v65);\n  }\n}\n"
        },
        {
            "funcName": "sub_409FC0",
            "funcStartAddr": "0x4023cd",
            "funcEndAddr": "0x4023d2",
            "decompiledFuncCode": "__int64 __fastcall sub_409FC0(FILE *stream, const char *a2, const char *a3, const char *a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r13\n  __int64 v13; // r12\n  __int64 v14; // r15\n  __int64 v15; // r14\n  __int64 v16; // rbx\n  char *v17; // rax\n  const char *v19; // rsi\n  __int64 v20; // r8\n  __int64 v21; // r13\n  __int64 v22; // r12\n  __int64 v23; // r15\n  __int64 v24; // r14\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // r15\n  __int64 v43; // r14\n  __int64 v44; // r13\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r13\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  __int64 v51; // r8\n  __int64 v52; // rbx\n  char *v53; // rax\n  __int64 v54; // r8\n  __int64 v55; // [rsp-10h] [rbp-68h]\n  __int64 v56; // [rsp+0h] [rbp-58h]\n  __int64 v57; // [rsp+0h] [rbp-58h]\n  __int64 v58; // [rsp+0h] [rbp-58h]\n  __int64 v59; // [rsp+0h] [rbp-58h]\n  __int64 v60; // [rsp+8h] [rbp-50h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+8h] [rbp-50h]\n  __int64 v63; // [rsp+10h] [rbp-48h]\n  __int64 v64; // [rsp+10h] [rbp-48h]\n  __int64 v65; // [rsp+18h] [rbp-40h]\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v27 = *a5;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v28, v27);\n    case 2LL:\n      v29 = a5[1];\n      v30 = *a5;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v31, v30, v29);\n    case 3LL:\n      v32 = a5[2];\n      v33 = a5[1];\n      v34 = *a5;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v35, v34, v33, v32);\n    case 4LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v40, v39, v38, v37, v36);\n      return v55;\n    case 6LL:\n      v41 = a5[5];\n      v42 = a5[4];\n      v43 = a5[3];\n      v58 = a5[1];\n      v44 = a5[2];\n      v45 = *a5;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v46, v45, v58, v44, v43, v42, v41);\n    case 7LL:\n      v47 = a5[6];\n      v48 = a5[5];\n      v49 = a5[4];\n      v50 = a5[3];\n      v51 = a5[1];\n      v62 = a5[2];\n      v52 = *a5;\n      v59 = v51;\n      v53 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v53, v52, v59, v62, v50, v49, v48, v47);\n    case 8LL:\n      v10 = a5[2];\n      v11 = a5[1];\n      v12 = a5[6];\n      v13 = a5[5];\n      v14 = a5[4];\n      v63 = a5[7];\n      v15 = a5[3];\n      v16 = *a5;\n      v56 = v10;\n      v60 = v11;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16, v60, v56, v15, v14, v13, v12, v63);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v54 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v54;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return __fprintf_chk(stream, 1LL, v26, v25, v61, v57, v24, v23, v22, v21, v64, v65);\n  }\n}\n\n__int64 __fastcall sub_409FC0(FILE *stream, const char *a2, const char *a3, const char *a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r13\n  __int64 v13; // r12\n  __int64 v14; // r15\n  __int64 v15; // r14\n  __int64 v16; // rbx\n  char *v17; // rax\n  const char *v19; // rsi\n  __int64 v20; // r8\n  __int64 v21; // r13\n  __int64 v22; // r12\n  __int64 v23; // r15\n  __int64 v24; // r14\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // r15\n  __int64 v43; // r14\n  __int64 v44; // r13\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r13\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  __int64 v51; // r8\n  __int64 v52; // rbx\n  char *v53; // rax\n  __int64 v54; // r8\n  __int64 v55; // [rsp-10h] [rbp-68h]\n  __int64 v56; // [rsp+0h] [rbp-58h]\n  __int64 v57; // [rsp+0h] [rbp-58h]\n  __int64 v58; // [rsp+0h] [rbp-58h]\n  __int64 v59; // [rsp+0h] [rbp-58h]\n  __int64 v60; // [rsp+8h] [rbp-50h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+8h] [rbp-50h]\n  __int64 v63; // [rsp+10h] [rbp-48h]\n  __int64 v64; // [rsp+10h] [rbp-48h]\n  __int64 v65; // [rsp+18h] [rbp-40h]\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v27 = *a5;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v28, v27);\n    case 2LL:\n      v29 = a5[1];\n      v30 = *a5;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v31, v30, v29);\n    case 3LL:\n      v32 = a5[2];\n      v33 = a5[1];\n      v34 = *a5;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v35, v34, v33, v32);\n    case 4LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v40, v39, v38, v37, v36);\n      return v55;\n    case 6LL:\n      v41 = a5[5];\n      v42 = a5[4];\n      v43 = a5[3];\n      v58 = a5[1];\n      v44 = a5[2];\n      v45 = *a5;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v46, v45, v58, v44, v43, v42, v41);\n    case 7LL:\n      v47 = a5[6];\n      v48 = a5[5];\n      v49 = a5[4];\n      v50 = a5[3];\n      v51 = a5[1];\n      v62 = a5[2];\n      v52 = *a5;\n      v59 = v51;\n      v53 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v53, v52, v59, v62, v50, v49, v48, v47);\n    case 8LL:\n      v10 = a5[2];\n      v11 = a5[1];\n      v12 = a5[6];\n      v13 = a5[5];\n      v14 = a5[4];\n      v63 = a5[7];\n      v15 = a5[3];\n      v16 = *a5;\n      v56 = v10;\n      v60 = v11;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16, v60, v56, v15, v14, v13, v12, v63);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v54 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v54;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return __fprintf_chk(stream, 1LL, v26, v25, v61, v57, v24, v23, v22, v21, v64, v65);\n  }\n}\n"
        },
        {
            "funcName": "sub_40A3C0",
            "funcStartAddr": "0x40a3c0",
            "funcEndAddr": "0x40a420",
            "decompiledFuncCode": "__int64 __fastcall sub_40A3C0(FILE *a1, const char *a2, const char *a3, const char *a4, int *a5)\n{\n  __int64 i; // r9\n  __int64 *v6; // r10\n  __int64 v7; // rax\n  unsigned int v8; // eax\n  __int64 *v9; // r10\n  __int64 v10; // rax\n  __int64 v12[11]; // [rsp+0h] [rbp-58h] BYREF\n\n  for ( i = 0LL; i != 10; ++i )\n  {\n    v8 = *a5;\n    if ( (unsigned int)*a5 <= 0x2F )\n    {\n      v6 = (__int64 *)(*((_QWORD *)a5 + 2) + v8);\n      *a5 = v8 + 8;\n      v7 = *v6;\n      v12[i] = *v6;\n      if ( !v7 )\n        return sub_409FC0(a1, a2, a3, a4, v12, i);\n      continue;\n    }\n    v9 = (__int64 *)*((_QWORD *)a5 + 1);\n    *((_QWORD *)a5 + 1) = v9 + 1;\n    v10 = *v9;\n    v12[i] = *v9;\n    if ( !v10 )\n      break;\n  }\n  return sub_409FC0(a1, a2, a3, a4, v12, i);\n}\n"
        },
        {
            "funcName": "sub_40A420",
            "funcStartAddr": "0x40a420",
            "funcEndAddr": "0x40a4dc",
            "decompiledFuncCode": "__int64 __fastcall sub_40A420(\n        FILE *a1,\n        const char *a2,\n        const char *a3,\n        const char *a4,\n        __int64 a5,\n        __int64 a6,\n        char a7)\n{\n  char *v7; // r10\n  unsigned int v8; // r8d\n  __int64 i; // r9\n  __int64 v10; // rax\n  __int64 v11; // rax\n  __int64 *v12; // rax\n  __int64 v13; // rax\n  __int64 v15[17]; // [rsp+20h] [rbp-88h] BYREF\n\n  v15[14] = a5;\n  v7 = &a7;\n  v8 = 32;\n  v15[15] = a6;\n  for ( i = 0LL; i != 10; ++i )\n  {\n    if ( v8 <= 0x2F )\n    {\n      v10 = v8;\n      v8 += 8;\n      v11 = *(__int64 *)((char *)&v15[10] + v10);\n      v15[i] = v11;\n      if ( !v11 )\n        return sub_409FC0(a1, a2, a3, a4, v15, i);\n      continue;\n    }\n    v12 = (__int64 *)v7;\n    v7 += 8;\n    v13 = *v12;\n    v15[i] = v13;\n    if ( !v13 )\n      break;\n  }\n  return sub_409FC0(a1, a2, a3, a4, v15, i);\n}\n"
        },
        {
            "funcName": "sub_40A4E0",
            "funcStartAddr": "0x40a4e0",
            "funcEndAddr": "0x40a554",
            "decompiledFuncCode": "int sub_40A4E0()\n{\n  char *v0; // rax\n  char *v1; // rax\n  FILE *v2; // rbx\n  char *v3; // rax\n\n  v0 = dcgettext(0LL, \"\\nReport bugs to: %s\\n\", 5);\n  __printf_chk(1LL, v0, \"bug-coreutils@gnu.org\");\n  v1 = dcgettext(0LL, \"%s home page: <%s>\\n\", 5);\n  __printf_chk(1LL, v1, &unk_4110B6);\n  v2 = stdout;\n  v3 = dcgettext(0LL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5);\n  return fputs_unlocked(v3, v2);\n}\n"
        },
        {
            "funcName": "sub_40A560",
            "funcStartAddr": "0x40a560",
            "funcEndAddr": "0x40a57a",
            "decompiledFuncCode": "void *__fastcall sub_40A560(size_t a1, __int64 a2)\n{\n  void *result; // rax\n\n  result = malloc(a1);\n  if ( !result )\n  {\n    if ( a1 )\n      sub_40A7B0(a1, a2);\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40A5B0",
            "funcStartAddr": "0x40a5b0",
            "funcEndAddr": "0x40a5b2",
            "decompiledFuncCode": "// attributes: thunk\nvoid *__fastcall sub_40A5B0(size_t a1, __int64 a2)\n{\n  return sub_40A560(a1, a2);\n}\n"
        },
        {
            "funcName": "sub_40A5C0",
            "funcStartAddr": "0x40a5c0",
            "funcEndAddr": "0x40a5f6",
            "decompiledFuncCode": "void *__fastcall sub_40A5C0(void *a1, size_t a2)\n{\n  void *result; // rax\n\n  if ( !a2 && a1 )\n  {\n    free(a1);\n    return 0LL;\n  }\n  else\n  {\n    result = realloc(a1, a2);\n    if ( !result )\n    {\n      if ( a2 )\n        sub_40A7B0(a1, a2);\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40A710",
            "funcStartAddr": "0x40a710",
            "funcEndAddr": "0x40a727",
            "decompiledFuncCode": "void *__fastcall sub_40A710(size_t n, __int64 a2)\n{\n  void *v2; // rax\n\n  v2 = sub_40A560(n, a2);\n  return memset(v2, 0, n);\n}\n"
        },
        {
            "funcName": "sub_40A730",
            "funcStartAddr": "0x40a730",
            "funcEndAddr": "0x40a75e",
            "decompiledFuncCode": "void *__fastcall sub_40A730(unsigned __int64 a1, unsigned __int64 a2)\n{\n  void *result; // rax\n\n  if ( ((a2 * a1) & 0x8000000000000000LL) != 0LL || !is_mul_ok(a2, a1) || (result = calloc(a1, a2)) == 0LL )\n    sub_40A7B0(a1, a2);\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40A760",
            "funcStartAddr": "0x40a760",
            "funcEndAddr": "0x40a788",
            "decompiledFuncCode": "void *__fastcall sub_40A760(void *src, size_t n)\n{\n  void *v2; // rax\n\n  v2 = sub_40A560(n, n);\n  return memcpy(v2, src, n);\n}\n"
        },
        {
            "funcName": "sub_40A790",
            "funcStartAddr": "0x40a790",
            "funcEndAddr": "0x40a7a3",
            "decompiledFuncCode": "void *__fastcall sub_40A790(char *src)\n{\n  size_t v1; // rax\n\n  v1 = strlen(src);\n  return sub_40A760(src, v1 + 1);\n}\n"
        },
        {
            "funcName": "sub_40A7B0",
            "funcStartAddr": "0x40a7b0",
            "funcEndAddr": "0x40a7e1",
            "decompiledFuncCode": "void __noreturn sub_40A7B0()\n{\n  char *v0; // rax\n\n  v0 = dcgettext(0LL, \"memory exhausted\", 5);\n  error(status, 0, \"%s\", v0);\n  abort();\n}\n"
        },
        {
            "funcName": "sub_40A7F0",
            "funcStartAddr": "0x40a7f0",
            "funcEndAddr": "0x40a81f",
            "decompiledFuncCode": "__int64 sub_40A7F0()\n{\n  __int64 v0; // rbx\n\n  v0 = sub_40B160(0LL, 0LL);\n  if ( !v0 && *__errno_location() == 12 )\n    sub_40A7B0();\n  return v0;\n}\n"
        },
        {
            "funcName": "sub_40A820",
            "funcStartAddr": "0x4023d2",
            "funcEndAddr": "0x4023d7",
            "decompiledFuncCode": "void __fastcall __noreturn sub_40A820(int a1, int a2, char a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // rdi\n  int v6; // ebx\n  const char *v9; // rsi\n  char *v10; // r12\n  char *v11; // r13\n  char *v12; // rax\n  char v13[42]; // [rsp+Eh] [rbp-2Ah] BYREF\n\n  v5 = (unsigned int)(a1 - 1);\n  v6 = status;\n  if ( (unsigned int)v5 <= 3 )\n  {\n    v9 = (&off_4134E0)[v5];\n    if ( a2 < 0 )\n    {\n      v13[0] = a3;\n      v11 = v13;\n      v10 = &asc_413460[-a2];\n      v13[1] = 0;\n    }\n    else\n    {\n      v10 = \"--\";\n      v11 = *(char **)(a4 + 32LL * a2);\n    }\n    v12 = dcgettext(0LL, v9, 5);\n    error(v6, 0, v12, v10, v11, a5);\n    abort();\n  }\n  abort();\n}\n\nvoid __fastcall __noreturn sub_40A820(int a1, int a2, char a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // rdi\n  int v6; // ebx\n  const char *v9; // rsi\n  char *v10; // r12\n  char *v11; // r13\n  char *v12; // rax\n  char v13[42]; // [rsp+Eh] [rbp-2Ah] BYREF\n\n  v5 = (unsigned int)(a1 - 1);\n  v6 = status;\n  if ( (unsigned int)v5 <= 3 )\n  {\n    v9 = (&off_4134E0)[v5];\n    if ( a2 < 0 )\n    {\n      v13[0] = a3;\n      v11 = v13;\n      v10 = &asc_413460[-a2];\n      v13[1] = 0;\n    }\n    else\n    {\n      v10 = \"--\";\n      v11 = *(char **)(a4 + 32LL * a2);\n    }\n    v12 = dcgettext(0LL, v9, 5);\n    error(v6, 0, v12, v10, v11, a5);\n    abort();\n  }\n  abort();\n}\n"
        },
        {
            "funcName": "sub_40A820",
            "funcStartAddr": "0x4023d2",
            "funcEndAddr": "0x4023d7",
            "decompiledFuncCode": "void __fastcall __noreturn sub_40A820(int a1, int a2, char a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // rdi\n  int v6; // ebx\n  const char *v9; // rsi\n  char *v10; // r12\n  char *v11; // r13\n  char *v12; // rax\n  char v13[42]; // [rsp+Eh] [rbp-2Ah] BYREF\n\n  v5 = (unsigned int)(a1 - 1);\n  v6 = status;\n  if ( (unsigned int)v5 <= 3 )\n  {\n    v9 = (&off_4134E0)[v5];\n    if ( a2 < 0 )\n    {\n      v13[0] = a3;\n      v11 = v13;\n      v10 = &asc_413460[-a2];\n      v13[1] = 0;\n    }\n    else\n    {\n      v10 = \"--\";\n      v11 = *(char **)(a4 + 32LL * a2);\n    }\n    v12 = dcgettext(0LL, v9, 5);\n    error(v6, 0, v12, v10, v11, a5);\n    abort();\n  }\n  abort();\n}\n\nvoid __fastcall __noreturn sub_40A820(int a1, int a2, char a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // rdi\n  int v6; // ebx\n  const char *v9; // rsi\n  char *v10; // r12\n  char *v11; // r13\n  char *v12; // rax\n  char v13[42]; // [rsp+Eh] [rbp-2Ah] BYREF\n\n  v5 = (unsigned int)(a1 - 1);\n  v6 = status;\n  if ( (unsigned int)v5 <= 3 )\n  {\n    v9 = (&off_4134E0)[v5];\n    if ( a2 < 0 )\n    {\n      v13[0] = a3;\n      v11 = v13;\n      v10 = &asc_413460[-a2];\n      v13[1] = 0;\n    }\n    else\n    {\n      v10 = \"--\";\n      v11 = *(char **)(a4 + 32LL * a2);\n    }\n    v12 = dcgettext(0LL, v9, 5);\n    error(v6, 0, v12, v10, v11, a5);\n    abort();\n  }\n  abort();\n}\n"
        },
        {
            "funcName": "sub_40A8B0",
            "funcStartAddr": "0x40a8b0",
            "funcEndAddr": "0x40ace4",
            "decompiledFuncCode": "__int64 __fastcall sub_40A8B0(char *nptr, char **a2, unsigned int a3, __int64 *a4, const char *a5)\n{\n  char **p_endptr; // r15\n  int *v8; // rax\n  int *v9; // r12\n  unsigned __int8 v10; // bl\n  const unsigned __int16 *v11; // rsi\n  char *v12; // rax\n  __int64 v13; // rbx\n  unsigned int v14; // ebp\n  int v15; // r12d\n  char *v17; // rax\n  char *v18; // r8\n  __int64 v19; // rax\n  char *v20; // rax\n  char v21; // al\n  int v22; // esi\n  unsigned __int64 v23; // rdx\n  char *v24; // r8\n  unsigned __int64 v25; // kr30_8\n  char *v26; // rax\n  int v27; // edi\n  int v28; // r9d\n  bool v29; // of\n  int v30; // edi\n  int v31; // edi\n  int v32; // edi\n  int v33; // edi\n  char *basea; // [rsp+0h] [rbp-58h]\n  char *baseb; // [rsp+0h] [rbp-58h]\n  char *v37; // [rsp+8h] [rbp-50h]\n  char *endptr; // [rsp+18h] [rbp-40h] BYREF\n\n  if ( a3 > 0x24 )\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 0x60u, \"xstrtoumax\");\n  p_endptr = a2;\n  if ( !a2 )\n    p_endptr = &endptr;\n  v8 = __errno_location();\n  *v8 = 0;\n  v9 = v8;\n  v10 = *nptr;\n  v11 = *__ctype_b_loc();\n  v12 = nptr;\n  while ( (v11[v10] & 0x2000) != 0 )\n    v10 = *++v12;\n  if ( v10 == 45 )\n    return 4;\n  v13 = __strtoul_internal(nptr, p_endptr, a3, 0);\n  if ( *p_endptr == nptr )\n  {\n    basea = *p_endptr;\n    if ( a5 )\n    {\n      v15 = (unsigned __int8)*nptr;\n      if ( (_BYTE)v15 )\n      {\n        v14 = 0;\n        v13 = 1LL;\n        v17 = strchr(a5, (char)v15);\n        v18 = basea;\n        if ( v17 )\n          goto LABEL_20;\n      }\n    }\n    return 4;\n  }\n  if ( *v9 )\n  {\n    v14 = 1;\n    if ( *v9 == 34 )\n      goto LABEL_11;\n    return 4;\n  }\n  v14 = 0;\nLABEL_11:\n  if ( a5 )\n  {\n    v15 = (unsigned __int8)**p_endptr;\n    if ( (_BYTE)v15 )\n    {\n      baseb = *p_endptr;\n      v26 = strchr(a5, (char)v15);\n      v18 = baseb;\n      if ( !v26 )\n      {\nLABEL_40:\n        *a4 = v13;\n        v14 |= 2u;\n        return v14;\n      }\nLABEL_20:\n      if ( (unsigned __int8)(v15 - 69) > 0x2Fu\n        || (v19 = 0x814400308945LL, !_bittest64(&v19, (unsigned int)(v15 - 69)))\n        || (v37 = v18, v20 = strchr(a5, 48), v18 = v37, !v20) )\n      {\nLABEL_27:\n        v22 = 1;\n        v23 = 1024LL;\n        goto LABEL_28;\n      }\n      v21 = v37[1];\n      if ( v21 != 68 )\n      {\n        if ( v21 == 105 )\n        {\n          v23 = 1024LL;\n          v22 = 2 * (v37[2] == 66) + 1;\nLABEL_28:\n          switch ( (char)v15 )\n          {\n            case 'B':\n              if ( (unsigned __int64)v13 >> 54 )\n                goto LABEL_38;\n              v13 <<= 10;\n              break;\n            case 'E':\n              goto LABEL_71;\n            case 'G':\n            case 'g':\n              goto LABEL_77;\n            case 'K':\n            case 'k':\n              goto LABEL_37;\n            case 'M':\n            case 'm':\n              goto LABEL_30;\n            case 'P':\n              goto LABEL_65;\n            case 'T':\n            case 't':\n              goto LABEL_59;\n            case 'Y':\n              goto LABEL_53;\n            case 'Z':\n              goto LABEL_47;\n            case 'b':\n              goto LABEL_44;\n            case 'c':\n              break;\n            case 'w':\n              if ( v13 < 0 )\n                goto LABEL_38;\n              v13 *= 2LL;\n              break;\n            default:\n              goto LABEL_40;\n          }\nLABEL_33:\n          v24 = &v18[v22];\n          *p_endptr = v24;\n          if ( *v24 )\n            v14 |= 2u;\n          goto LABEL_13;\n        }\n        if ( v21 != 66 )\n        {\n          switch ( (char)v15 )\n          {\n            case 'E':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_71:\n              v33 = 6;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v33;\n              }\n              while ( v33 );\n              goto LABEL_51;\n            case 'F':\n            case 'H':\n            case 'I':\n            case 'J':\n            case 'L':\n            case 'N':\n            case 'O':\n            case 'Q':\n            case 'R':\n            case 'S':\n            case 'U':\n            case 'V':\n            case 'W':\n            case 'X':\n            case '[':\n            case '\\\\':\n            case ']':\n            case '^':\n            case '_':\n            case '`':\n            case 'a':\n            case 'd':\n            case 'e':\n            case 'f':\n            case 'h':\n            case 'i':\n            case 'j':\n            case 'l':\n            case 'n':\n            case 'o':\n            case 'p':\n            case 'q':\n            case 'r':\n            case 's':\n              goto LABEL_40;\n            case 'G':\n            case 'g':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_77:\n              if ( is_mul_ok((int)v23, v13)\n                && is_mul_ok((int)v23, (int)v23 * v13)\n                && is_mul_ok((int)v23, (int)v23 * (int)v23 * v13) )\n              {\n                v13 *= (int)v23 * (int)v23 * (__int64)(int)v23;\n              }\n              else\n              {\n                v13 = -1LL;\n                v14 |= 1u;\n              }\n              goto LABEL_33;\n            case 'K':\n            case 'k':\n              v22 = 1;\n              v23 = 1024LL;\nLABEL_37:\n              v25 = v13;\n              v13 *= v23;\n              if ( is_mul_ok(v23, v25) )\n                goto LABEL_33;\n              goto LABEL_38;\n            case 'M':\n            case 'm':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_30:\n              if ( !is_mul_ok((int)v23, v13) || !is_mul_ok((int)v23, (int)v23 * v13) )\n                goto LABEL_38;\n              v13 *= (int)v23 * (__int64)(int)v23;\n              break;\n            case 'P':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_65:\n              v32 = 5;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v32;\n              }\n              while ( v32 );\n              goto LABEL_51;\n            case 'T':\n            case 't':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_59:\n              v31 = 4;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v31;\n              }\n              while ( v31 );\n              goto LABEL_51;\n            case 'Y':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_53:\n              v30 = 8;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v30;\n              }\n              while ( v30 );\n              goto LABEL_51;\n            case 'Z':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_47:\n              v27 = 7;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v27;\n              }\n              while ( v27 );\nLABEL_51:\n              v14 |= v28;\n              break;\n            case 'b':\n              v22 = 1;\nLABEL_44:\n              if ( (unsigned __int64)v13 >> 55 )\n              {\nLABEL_38:\n                v14 = 1;\n                v13 = -1LL;\n              }\n              else\n              {\n                v13 <<= 9;\n              }\n              break;\n            case 'c':\n              v22 = 1;\n              goto LABEL_33;\n            default:\n              goto LABEL_27;\n          }\n          goto LABEL_33;\n        }\n      }\n      v22 = 2;\n      v23 = 1000LL;\n      goto LABEL_28;\n    }\n  }\nLABEL_13:\n  *a4 = v13;\n  return v14;\n}\n"
        },
        {
            "funcName": "sub_40ACF0",
            "funcStartAddr": "0x40acf0",
            "funcEndAddr": "0x40ad7f",
            "decompiledFuncCode": "__int64 sub_40ACF0(__int64 a1, __int64 a2, ...)\n{\n  gcc_va_list va; // [rsp+8h] [rbp-D0h] BYREF\n\n  va_start(va, a2);\n  return sub_40D650(a1, a2, va);\n}\n"
        },
        {
            "funcName": "sub_40AD80",
            "funcStartAddr": "0x40ad80",
            "funcEndAddr": "0x40adb3",
            "decompiledFuncCode": "void __fastcall sub_40AD80(int a1)\n{\n  if ( a1 >= 0 )\n  {\n    if ( close(a1) )\n      __assert_fail(\"! close_fail\", \"lib/chdir-long.c\", 0x40u, \"cdb_free\");\n  }\n}\n"
        },
        {
            "funcName": "sub_40ADC0",
            "funcStartAddr": "0x40adc0",
            "funcEndAddr": "0x40adf7",
            "decompiledFuncCode": "__int64 __fastcall sub_40ADC0(int *a1, const char *a2)\n{\n  int v2; // eax\n  int v3; // ebp\n\n  v2 = openat(*a1, a2, 67840);\n  if ( v2 < 0 )\n    return 0xFFFFFFFFLL;\n  v3 = v2;\n  sub_40AD80(*a1);\n  *a1 = v3;\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_40AE00",
            "funcStartAddr": "0x40ae00",
            "funcEndAddr": "0x40b06b",
            "decompiledFuncCode": "__int64 __fastcall sub_40AE00(const char *s)\n{\n  unsigned int v1; // ebx\n  int *v2; // r12\n  size_t v3; // rax\n  size_t v4; // r14\n  size_t v5; // rax\n  size_t v6; // rbx\n  const char *v7; // rbp\n  const char *v8; // r13\n  _BYTE *v9; // rax\n  _BYTE *v10; // rbx\n  int v11; // eax\n  int v12; // ebx\n  _BYTE *v14; // rax\n  _BYTE *v15; // rbx\n  int v16; // eax\n  int fd[11]; // [rsp+Ch] [rbp-2Ch] BYREF\n\n  v1 = chdir(s);\n  if ( v1 )\n  {\n    v2 = __errno_location();\n    if ( *v2 == 36 )\n    {\n      v3 = strlen(s);\n      fd[0] = -100;\n      v4 = v3;\n      if ( !v3 )\n        __assert_fail(\"0 < len\", \"lib/chdir-long.c\", 0x7Eu, \"chdir_long\");\n      if ( v3 <= 0xFFF )\n        __assert_fail(\"4096 <= len\", \"lib/chdir-long.c\", 0x7Fu, \"chdir_long\");\n      v5 = strspn(s, \"/\");\n      v6 = v5;\n      if ( v5 == 2 )\n      {\n        v14 = (_BYTE *)sub_40C480(s + 3, 47LL, v4 - 3);\n        v15 = v14;\n        if ( !v14 )\n          return (unsigned int)-1;\n        *v14 = 0;\n        v16 = sub_40ADC0(fd, s);\n        *v15 = 47;\n        if ( !v16 )\n        {\n          v7 = &v15[strspn(v15 + 1, \"/\") + 1];\n          goto LABEL_7;\n        }\n      }\n      else\n      {\n        v7 = s;\n        if ( !v5 )\n        {\nLABEL_7:\n          if ( *v7 == 47 )\n            __assert_fail(\"*dir != '/'\", \"lib/chdir-long.c\", 0xA2u, \"chdir_long\");\n          v8 = &s[v4];\n          if ( v7 > &s[v4] )\n            __assert_fail(\"dir <= dir_end\", \"lib/chdir-long.c\", 0xA3u, \"chdir_long\");\n          while ( v8 - v7 > 4095 )\n          {\n            v9 = memrchr(v7, 47, 0x1000uLL);\n            v10 = v9;\n            if ( !v9 )\n            {\n              *v2 = 36;\n              return (unsigned int)-1;\n            }\n            *v9 = 0;\n            if ( v9 - v7 > 4095 )\n              __assert_fail(\"slash - dir < 4096\", \"lib/chdir-long.c\", 0xB3u, \"chdir_long\");\n            v11 = sub_40ADC0(fd, v7);\n            *v10 = 47;\n            if ( v11 )\n              goto LABEL_18;\n            v7 = &v10[strspn(v10 + 1, \"/\") + 1];\n          }\n          if ( v8 <= v7 || !(unsigned int)sub_40ADC0(fd, v7) )\n          {\n            v1 = fchdir(fd[0]);\n            if ( !v1 )\n            {\n              sub_40AD80(fd[0]);\n              return v1;\n            }\n          }\n          goto LABEL_18;\n        }\n        if ( !(unsigned int)sub_40ADC0(fd, \"/\") )\n        {\n          v7 = &s[v6];\n          goto LABEL_7;\n        }\n      }\nLABEL_18:\n      v12 = *v2;\n      sub_40AD80(fd[0]);\n      *v2 = v12;\n      return (unsigned int)-1;\n    }\n  }\n  return v1;\n}\n"
        },
        {
            "funcName": "sub_40B070",
            "funcStartAddr": "0x40b070",
            "funcEndAddr": "0x40b15b",
            "decompiledFuncCode": "__int64 __fastcall sub_40B070(char *file, __int64 a2, __int64 a3)\n{\n  int v4; // edx\n  __int64 result; // rax\n  __int64 v6; // rax\n  __int64 v7; // rax\n  struct utsname vars0; // [rsp+0h] [rbp+0h] BYREF\n\n  if ( dword_6175D4 < 0 )\n  {\n    if ( !uname(&vars0) && strverscmp(vars0.release, \"2.6.36\") >= 0 )\n    {\n      dword_6175D4 = 1;\n      goto LABEL_3;\n    }\n    dword_6175D4 = 0;\nLABEL_8:\n    if ( statfs(file, (struct statfs *)&vars0) < 0 )\n      return 0xFFFFFFFFLL;\n    v6 = *(_QWORD *)&vars0.sysname[8];\n    goto LABEL_10;\n  }\n  if ( !dword_6175D4 )\n    goto LABEL_8;\nLABEL_3:\n  v4 = statvfs(file, (struct statvfs *)&vars0);\n  result = 0xFFFFFFFFLL;\n  if ( v4 < 0 )\n    return result;\n  v6 = *(_QWORD *)&vars0.sysname[8];\n  if ( !*(_QWORD *)&vars0.sysname[8] )\n    v6 = *(_QWORD *)vars0.sysname;\nLABEL_10:\n  *(_QWORD *)a3 = v6;\n  *(_QWORD *)(a3 + 8) = *(_QWORD *)&vars0.sysname[16];\n  *(_QWORD *)(a3 + 16) = *(_QWORD *)&vars0.sysname[24];\n  v7 = *(_QWORD *)&vars0.sysname[32];\n  *(_QWORD *)(a3 + 24) = *(_QWORD *)&vars0.sysname[32];\n  *(_BYTE *)(a3 + 32) = v7 < 0;\n  *(_QWORD *)(a3 + 40) = *(_QWORD *)&vars0.sysname[40];\n  *(_QWORD *)(a3 + 48) = *(_QWORD *)&vars0.sysname[48];\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_40B160",
            "funcStartAddr": "0x40b160",
            "funcEndAddr": "0x40b622",
            "decompiledFuncCode": "char *__fastcall sub_40B160(char *a1, size_t a2)\n{\n  char *v3; // rbx\n  __dev_t st_dev; // r15\n  __ino_t st_ino; // r14\n  DIR *v6; // rbp\n  int v7; // r15d\n  int *v8; // r12\n  int v9; // eax\n  bool v10; // r13\n  struct dirent *v11; // rax\n  const char *d_name; // rbx\n  __int64 v13; // r13\n  size_t v14; // r14\n  char *v15; // rdx\n  char *v16; // rax\n  size_t v17; // rbx\n  void *v18; // rax\n  int v19; // ebx\n  __dev_t v20; // [rsp+8h] [rbp-120h]\n  size_t v21; // [rsp+8h] [rbp-120h]\n  __dev_t v22; // [rsp+10h] [rbp-118h]\n  char *ptr; // [rsp+18h] [rbp-110h]\n  void *v24; // [rsp+20h] [rbp-108h]\n  size_t size; // [rsp+28h] [rbp-100h]\n  bool v26; // [rsp+3Fh] [rbp-E9h]\n  char *src; // [rsp+40h] [rbp-E8h]\n  char *srca; // [rsp+40h] [rbp-E8h]\n  __dev_t v29; // [rsp+48h] [rbp-E0h]\n  __ino_t v30; // [rsp+50h] [rbp-D8h]\n  __ino_t v31; // [rsp+58h] [rbp-D0h]\n  struct stat stat_buf; // [rsp+60h] [rbp-C8h] BYREF\n\n  v24 = a1;\n  if ( !a2 )\n  {\n    size = 4096LL;\n    if ( a1 )\n    {\n      ptr = 0LL;\n      *__errno_location() = 22;\n      return ptr;\n    }\nLABEL_3:\n    ptr = (char *)malloc(size);\n    if ( !ptr )\n      return ptr;\n    goto LABEL_7;\n  }\n  size = a2;\n  if ( !a1 )\n    goto LABEL_3;\n  ptr = a1;\nLABEL_7:\n  v3 = &ptr[size];\n  ptr[size - 1] = 0;\n  if ( __lxstat(1, \".\", &stat_buf) < 0\n    || (st_dev = stat_buf.st_dev, st_ino = stat_buf.st_ino, v20 = stat_buf.st_dev, __lxstat(1, \"/\", &stat_buf) < 0) )\n  {\n    v8 = __errno_location();\nLABEL_58:\n    v19 = *v8;\n    if ( a1 )\n      goto LABEL_56;\n    goto LABEL_59;\n  }\n  src = v3 - 1;\n  v30 = stat_buf.st_ino;\n  v29 = stat_buf.st_dev;\n  v26 = st_ino != stat_buf.st_ino || st_dev != stat_buf.st_dev;\n  if ( !v26 )\n    goto LABEL_37;\n  v6 = 0LL;\n  v7 = -100;\n  v8 = __errno_location();\n  do\n  {\n    v9 = openat(v7, \"..\", 0);\n    v7 = v9;\n    if ( v9 < 0 )\n    {\n      v19 = *v8;\n      if ( v6 )\nLABEL_54:\n        closedir(v6);\nLABEL_55:\n      if ( a1 )\n      {\nLABEL_56:\n        *v8 = v19;\n        return 0LL;\n      }\nLABEL_59:\n      free(ptr);\n      goto LABEL_56;\n    }\n    if ( __fxstat(1, v9, &stat_buf) )\n    {\n      v19 = *v8;\n      if ( v6 )\n        closedir(v6);\n      goto LABEL_62;\n    }\n    if ( v6 && closedir(v6) || (v22 = stat_buf.st_dev, v31 = stat_buf.st_ino, (v6 = fdopendir(v7)) == 0LL) )\n    {\n      v19 = *v8;\nLABEL_62:\n      close(v7);\n      goto LABEL_55;\n    }\n    v10 = v26;\n    do\n    {\n      while ( 1 )\n      {\n        *v8 = 0;\n        v11 = readdir(v6);\n        if ( v11 )\n        {\n          if ( v11->d_name[0] != 46 )\n            goto LABEL_19;\n          goto LABEL_48;\n        }\n        v19 = *v8;\n        if ( *v8 || !v10 )\n          goto LABEL_52;\n        rewinddir(v6);\n        v11 = readdir(v6);\n        if ( !v11 )\n        {\n          v19 = *v8;\nLABEL_52:\n          if ( !v19 )\n          {\n            *v8 = 2;\n            v19 = 2;\n          }\n          goto LABEL_54;\n        }\n        v10 = 0;\n        if ( v11->d_name[0] != 46 )\n          break;\nLABEL_48:\n        if ( v11->d_name[1] && *(_WORD *)&v11->d_name[1] != 46 )\n        {\nLABEL_19:\n          if ( !v10 )\n            break;\n          if ( v22 != v20 || v11->d_ino == st_ino )\n          {\n            v10 = v22 != v20 || v11->d_ino == st_ino;\n            break;\n          }\n        }\n      }\n      d_name = v11->d_name;\n    }\n    while ( __fxstatat(1, v7, v11->d_name, &stat_buf, 256)\n         || (stat_buf.st_mode & 0xF000) != 0x4000\n         || stat_buf.st_dev != v20\n         || stat_buf.st_ino != st_ino );\n    v13 = src - ptr;\n    v14 = strlen(d_name);\n    if ( src - ptr <= v14 )\n    {\n      if ( a2 )\n      {\n        *v8 = 34;\n        v19 = 34;\n        goto LABEL_54;\n      }\n      v15 = (char *)size;\n      if ( v14 >= size )\n        v15 = (char *)v14;\n      srca = v15;\n      v21 = (size_t)&v15[size];\n      if ( __CFADD__(v15, size) || (v16 = (char *)realloc(ptr, (size_t)&v15[size])) == 0LL )\n      {\n        *v8 = 12;\n        v19 = 12;\n        goto LABEL_54;\n      }\n      ptr = v16;\n      src = (char *)memcpy(&srca[v13 + (_QWORD)v16], &v16[v13], size - v13);\n      size = v21;\n    }\n    src = (char *)memcpy(&src[-v14], d_name, v14) - 1;\n    st_ino = v31;\n    *src = 47;\n    v20 = v22;\n  }\n  while ( v29 != v22 || v30 != v31 );\n  if ( closedir(v6) )\n    goto LABEL_58;\n  v3 = &ptr[size];\nLABEL_37:\n  if ( src == &ptr[size - 1] )\n    *--src = 47;\n  v17 = v3 - src;\n  memmove(ptr, src, v17);\n  if ( !a2 )\n    v24 = realloc(ptr, v17);\n  v18 = v24;\n  if ( !v24 )\n    return ptr;\n  return (char *)v18;\n}\n"
        },
        {
            "funcName": "sub_40B630",
            "funcStartAddr": "0x40b630",
            "funcEndAddr": "0x40b70f",
            "decompiledFuncCode": "__int64 __fastcall sub_40B630(__int64 a1, int *a2)\n{\n  __int64 v2; // r11\n  int v3; // r12d\n  int v4; // ebp\n  __int64 v5; // rbx\n  int v6; // r9d\n  int v7; // r10d\n  int v8; // r8d\n  int v9; // r14d\n  int v10; // edx\n  __int64 *v11; // rax\n  __int64 *v12; // r13\n  __int64 v13; // rdx\n  __int64 v14; // rcx\n  __int64 result; // rax\n  __int64 *v16; // rax\n  __int64 v17; // rdx\n  __int64 v18; // rcx\n\n  v2 = a1 + 8;\n  v3 = a2[11];\n  v4 = *a2;\n  v5 = a2[12];\n  v6 = v3;\n  v7 = *a2;\n  v8 = a2[12];\nLABEL_2:\n  if ( v7 > v8 )\n  {\n    while ( v6 < v8 )\n    {\n      v9 = v7 - v8;\n      v10 = v8 - v6;\n      if ( v7 - v8 <= v8 - v6 )\n      {\n        v16 = (__int64 *)(a1 + 8LL * v6);\n        v17 = v5 - v6;\n        do\n        {\n          v18 = *v16;\n          *v16 = v16[v17];\n          v16[v17] = v18;\n          ++v16;\n        }\n        while ( v16 != (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v9 - 1))) );\n        v6 += v9;\n        goto LABEL_2;\n      }\n      v7 -= v10;\n      v11 = (__int64 *)(a1 + 8LL * v6);\n      v12 = (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v10 - 1)));\n      v13 = v7 - (__int64)v6;\n      do\n      {\n        v14 = *v11;\n        *v11 = v11[v13];\n        v11[v13] = v14;\n        ++v11;\n      }\n      while ( v12 != v11 );\n      if ( v7 <= v8 )\n        break;\n    }\n  }\n  a2[12] = v4;\n  result = (unsigned int)(v4 - v8);\n  a2[11] = result + v3;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40B710",
            "funcStartAddr": "0x40b710",
            "funcEndAddr": "0x40bd2c",
            "decompiledFuncCode": "__int64 __fastcall sub_40B710(\n        int a1,\n        __int64 *a2,\n        const char *a3,\n        char **a4,\n        _DWORD *a5,\n        int a6,\n        int *a7,\n        int a8,\n        const char *a9)\n{\n  const char *v9; // r14\n  char *v10; // rbp\n  size_t v11; // r13\n  char **v12; // rbx\n  __int64 v13; // r12\n  const char *v14; // r15\n  const char *v15; // rdi\n  __int64 v16; // r15\n  char **v17; // rbp\n  char *v18; // rdx\n  __int64 result; // rax\n  int v20; // edx\n  int v21; // eax\n  int v22; // ecx\n  char *v23; // rdx\n  __int64 v24; // rbx\n  char *v25; // rax\n  __int64 v26; // rbx\n  char *v27; // rax\n  const char *v28; // r12\n  __int64 v29; // rbp\n  char *v30; // rax\n  __int64 v31; // rbx\n  __int64 v32; // rbp\n  char *v33; // rax\n  FILE *v34; // rdi\n  const char **v35; // rbx\n  _BYTE *v36; // rbp\n  __int64 v37; // r12\n  const char *v38; // r12\n  __int64 v39; // rbp\n  char *v40; // rax\n  char *s1; // [rsp+10h] [rbp-78h]\n  char *s1a; // [rsp+10h] [rbp-78h]\n  _BYTE *ptr; // [rsp+18h] [rbp-70h]\n  int v48; // [rsp+38h] [rbp-50h]\n  char v49; // [rsp+3Fh] [rbp-49h]\n  int v51; // [rsp+44h] [rbp-44h]\n  int v52; // [rsp+48h] [rbp-40h]\n\n  v9 = (const char *)*((_QWORD *)a7 + 4);\n  v10 = (char *)v9;\n  v49 = *v9;\n  if ( *v9 == 61 || !*v9 )\n  {\n    v11 = 0LL;\n  }\n  else\n  {\n    do\n      ++v10;\n    while ( *v10 && *v10 != 61 );\n    v11 = v10 - v9;\n  }\n  v12 = a4;\n  v13 = 0LL;\n  s1 = *a4;\n  v14 = *a4;\n  if ( !*a4 )\n  {\nLABEL_24:\n    if ( !a6 || *(_BYTE *)(a2[*a7] + 1) == 45 || (v18 = strchr(a3, v49), result = 0xFFFFFFFFLL, !v18) )\n    {\n      if ( a8 )\n      {\n        v24 = *a2;\n        v25 = dcgettext(0LL, \"%s: unrecognized option '%s%s'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v25, v24, a9, v9);\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n      ++*a7;\n      a7[2] = 0;\n      return 63LL;\n    }\n    return result;\n  }\n  while ( 1 )\n  {\n    if ( !strncmp(v14, v9, v11) && strlen(v14) == v11 )\n      goto LABEL_31;\n    v12 += 4;\n    v14 = *v12;\n    if ( !*v12 )\n      break;\n    v13 = (int)v13 + 1;\n  }\n  v12 = 0LL;\n  v51 = -1;\n  v15 = s1;\n  v16 = 0LL;\n  v48 = 0;\n  v52 = 0;\n  ptr = 0LL;\n  s1a = v10;\n  v17 = a4;\n  do\n  {\n    if ( strncmp(v15, v9, v11) )\n      goto LABEL_20;\n    if ( v12 )\n    {\n      if ( (a6\n         || *((_DWORD *)v12 + 2) != *((_DWORD *)v17 + 2)\n         || v12[2] != v17[2]\n         || *((_DWORD *)v12 + 6) != *((_DWORD *)v17 + 6))\n        && !v48 )\n      {\n        if ( a8 )\n        {\n          if ( ptr )\n            goto LABEL_19;\n          ptr = calloc((int)v13 + 1, 1uLL);\n          if ( ptr )\n          {\n            v52 = 1;\n            ptr[v51] = 1;\nLABEL_19:\n            ptr[v16] = 1;\n            goto LABEL_20;\n          }\n          v48 = 1;\n        }\n        else\n        {\n          v48 = 1;\n          if ( ptr )\n            goto LABEL_19;\n        }\n      }\n    }\n    else\n    {\n      v51 = v16;\n      v12 = v17;\n    }\nLABEL_20:\n    v17 += 4;\n    v15 = *v17;\n    ++v16;\n  }\n  while ( *v17 );\n  v10 = s1a;\n  if ( ptr || v48 )\n  {\n    if ( a8 )\n    {\n      if ( v48 )\n      {\n        v26 = *a2;\n        v27 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v27, v26, a9, v9);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n      else\n      {\n        flockfile(stderr);\n        v31 = *((_QWORD *)a7 + 4);\n        v32 = *a2;\n        v33 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5);\n        __fprintf_chk(stderr, 1LL, v33, v32, a9, v31);\n        v34 = stderr;\n        v35 = (const char **)a4;\n        v36 = ptr;\n        v37 = (__int64)&ptr[v13 + 1];\n        do\n        {\n          if ( *v36 )\n          {\n            __fprintf_chk(v34, 1LL, \" '%s%s'\", a9, *v35);\n            v34 = stderr;\n          }\n          ++v36;\n          v35 += 4;\n        }\n        while ( (_BYTE *)v37 != v36 );\n        fputc(10, v34);\n        funlockfile(stderr);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n    }\n    if ( v52 )\n      free(ptr);\n    *((_QWORD *)a7 + 4) = &v9[strlen(v9)];\n    ++*a7;\n    a7[2] = 0;\n    return 63LL;\n  }\n  else\n  {\n    if ( !v12 )\n      goto LABEL_24;\n    LODWORD(v13) = v51;\nLABEL_31:\n    v20 = *a7;\n    *((_QWORD *)a7 + 4) = 0LL;\n    v21 = v20 + 1;\n    *a7 = v20 + 1;\n    v22 = *((_DWORD *)v12 + 2);\n    if ( *v10 )\n    {\n      if ( v22 )\n      {\n        *((_QWORD *)a7 + 2) = v10 + 1;\n        goto LABEL_33;\n      }\n      if ( a8 )\n      {\n        v28 = *v12;\n        v29 = *a2;\n        v30 = dcgettext(0LL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v30, v29, a9, v28);\n      }\n      a7[2] = *((_DWORD *)v12 + 6);\n      return 63LL;\n    }\n    else\n    {\n      if ( v22 != 1 )\n        goto LABEL_33;\n      if ( v21 >= a1 )\n      {\n        if ( a8 )\n        {\n          v38 = *v12;\n          v39 = *a2;\n          v40 = dcgettext(0LL, \"%s: option '%s%s' requires an argument\\n\", 5);\n          __fprintf_chk(stderr, 1LL, v40, v39, a9, v38);\n        }\n        a7[2] = *((_DWORD *)v12 + 6);\n        return 5 * (unsigned int)(*a3 != 58) + 58;\n      }\n      else\n      {\n        *a7 = v20 + 2;\n        *((_QWORD *)a7 + 2) = a2[v21];\nLABEL_33:\n        if ( a5 )\n          *a5 = v13;\n        v23 = v12[2];\n        result = *((unsigned int *)v12 + 6);\n        if ( v23 )\n        {\n          *(_DWORD *)v23 = result;\n          return 0LL;\n        }\n      }\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40BD30",
            "funcStartAddr": "0x40bd30",
            "funcEndAddr": "0x40c2f6",
            "decompiledFuncCode": "__int64 __fastcall sub_40BD30(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int a6, int *a7, int a8)\n{\n  int v8; // r13d\n  int v9; // eax\n  int v10; // ebp\n  const char *v12; // r15\n  _BYTE *v13; // rdx\n  char v14; // al\n  char v15; // al\n  int v16; // eax\n  __int64 v17; // r14\n  int v18; // edx\n  int v19; // ecx\n  int v20; // eax\n  unsigned int v21; // r14d\n  char *v22; // rax\n  __int64 v23; // r8\n  char v24; // cl\n  int v26; // edx\n  __int64 v27; // rax\n  _BYTE *v28; // rcx\n  int v29; // esi\n  char v30; // cl\n  char *v31; // rax\n  __int64 v32; // rax\n  char *v34; // rax\n  char v35; // dl\n  __int64 v36; // rax\n  int v37; // edx\n  __int64 v38; // rax\n  __int64 v39; // rbp\n  char *v40; // rax\n  __int64 v41; // rbp\n  char *v42; // rax\n  __int64 v43; // rbp\n  char *v44; // rax\n  char v47; // [rsp+1Ch] [rbp-4Ch]\n  int v48; // [rsp+1Ch] [rbp-4Ch]\n  int v49; // [rsp+1Ch] [rbp-4Ch]\n  int v50; // [rsp+1Ch] [rbp-4Ch]\n  _BYTE *v51; // [rsp+20h] [rbp-48h]\n  _BYTE *v52; // [rsp+28h] [rbp-40h]\n\n  v8 = a7[1];\n  if ( a1 <= 0 )\n    return (unsigned int)-1;\n  v9 = *a7;\n  v10 = a1;\n  v12 = a3;\n  *((_QWORD *)a7 + 2) = 0LL;\n  if ( !v9 )\n  {\n    *a7 = 1;\n    v9 = 1;\nLABEL_4:\n    a7[12] = v9;\n    a7[11] = v9;\n    *((_QWORD *)a7 + 4) = 0LL;\n    if ( *a3 == 45 )\n    {\n      a7[10] = 2;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else if ( *a3 == 43 )\n    {\n      a7[10] = 0;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else\n    {\n      v13 = 0LL;\n      if ( !a8 )\n      {\n        v50 = a6;\n        v34 = getenv(\"POSIXLY_CORRECT\");\n        a6 = v50;\n        if ( !v34 )\n        {\n          a7[10] = 1;\n          v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n          goto LABEL_24;\n        }\n        v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n      }\n      a7[10] = 0;\n    }\nLABEL_24:\n    a7[6] = 1;\n    v14 = *v12;\n    goto LABEL_25;\n  }\n  if ( !a7[6] )\n    goto LABEL_4;\n  v14 = *a3;\n  v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n  if ( ((v14 - 43) & 0xFD) == 0 )\n  {\n    v15 = *++v12;\n    if ( v15 == 58 )\n      v8 = 0;\n    if ( !v13 )\n      goto LABEL_12;\n    goto LABEL_28;\n  }\nLABEL_25:\n  if ( v14 == 58 )\n    v8 = 0;\n  if ( !v13 )\n    goto LABEL_12;\nLABEL_28:\n  if ( !*v13 )\n  {\nLABEL_12:\n    v16 = *a7;\n    if ( a7[12] > *a7 )\n      a7[12] = v16;\n    if ( v16 < a7[11] )\n      a7[11] = v16;\n    if ( a7[10] == 1 )\n    {\n      v26 = a7[12];\n      if ( a7[11] == v26 )\n      {\n        if ( v16 != v26 )\n        {\n          a7[11] = v16;\n          v26 = v16;\n        }\n      }\n      else if ( v16 != v26 )\n      {\n        v48 = a6;\n        sub_40B630((__int64)a2, a7);\n        v26 = *a7;\n        a6 = v48;\n      }\n      if ( a1 <= v26 )\n      {\nLABEL_79:\n        v16 = v26;\n      }\n      else\n      {\n        v27 = v26;\n        while ( 1 )\n        {\n          v28 = (_BYTE *)a2[v27];\n          v29 = v27;\n          v26 = v27;\n          if ( *v28 == 45 )\n          {\n            if ( v28[1] )\n              break;\n          }\n          v26 = ++v27;\n          *a7 = v29 + 1;\n          if ( a1 <= (int)v27 )\n            goto LABEL_79;\n        }\n        v16 = *a7;\n      }\n      a7[12] = v26;\n    }\n    if ( a1 == v16 )\n    {\n      v10 = a7[12];\n      v18 = a7[11];\nLABEL_41:\n      if ( v18 != v10 )\n        *a7 = v18;\n      return (unsigned int)-1;\n    }\n    v17 = a2[v16];\n    if ( !strcmp((const char *)v17, \"--\") )\n    {\n      v18 = a7[11];\n      v19 = a7[12];\n      v20 = v16 + 1;\n      *a7 = v20;\n      if ( v18 == v19 )\n      {\n        a7[11] = v20;\n        v18 = v20;\n      }\n      else if ( v20 != v19 )\n      {\n        sub_40B630((__int64)a2, a7);\n        v18 = a7[11];\n      }\n      a7[12] = a1;\n      *a7 = a1;\n      goto LABEL_41;\n    }\n    if ( *(_BYTE *)v17 == 45 )\n    {\n      v30 = *(_BYTE *)(v17 + 1);\n      if ( v30 )\n      {\n        if ( a4 )\n        {\n          if ( v30 == 45 )\n          {\n            *((_QWORD *)a7 + 4) = v17 + 2;\n            return (unsigned int)sub_40B710(a1, a2, v12, a4, a5, a6, a7, v8, \"--\");\n          }\n          if ( a6 )\n          {\n            if ( *(_BYTE *)(v17 + 2) || (v49 = a6, v31 = strchr(v12, v30), a6 = v49, !v31) )\n            {\n              *((_QWORD *)a7 + 4) = v17 + 1;\n              v21 = sub_40B710(a1, a2, v12, a4, a5, a6, a7, v8, \"-\");\n              if ( v21 != -1 )\n                return v21;\n              v17 = a2[*a7];\n            }\n          }\n        }\n        v13 = (_BYTE *)(v17 + 1);\n        goto LABEL_29;\n      }\n    }\n    if ( a7[10] )\n    {\n      *((_QWORD *)a7 + 2) = v17;\n      v21 = 1;\n      *a7 = v16 + 1;\n      return v21;\n    }\n    return (unsigned int)-1;\n  }\nLABEL_29:\n  v51 = v13;\n  *((_QWORD *)a7 + 4) = v13 + 1;\n  v21 = (char)*v13;\n  v52 = v13 + 1;\n  v47 = *v13;\n  v22 = strchr(v12, v21);\n  v23 = (__int64)v52;\n  if ( !v51[1] )\n    ++*a7;\n  if ( (unsigned __int8)(v47 - 58) > 1u && v22 )\n  {\n    v24 = v22[1];\n    if ( *v22 == 87 && a4 && v24 == 59 )\n    {\n      if ( v51[1] )\n      {\nLABEL_68:\n        *((_QWORD *)a7 + 4) = v23;\n        *((_QWORD *)a7 + 2) = 0LL;\n        return (unsigned int)sub_40B710(a1, a2, v12, a4, a5, 0, a7, v8, \"-W \");\n      }\n      v32 = *a7;\n      if ( (_DWORD)v32 != a1 )\n      {\n        v23 = a2[v32];\n        goto LABEL_68;\n      }\n      if ( v8 )\n      {\n        v43 = *a2;\n        v44 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v44, v43, v21);\n      }\n      a7[2] = v21;\n      return 5 * (unsigned int)(*v12 != 58) + 58;\n    }\n    else if ( v24 == 58 )\n    {\n      v35 = v51[1];\n      if ( v22[2] == 58 )\n      {\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          ++*a7;\n        }\n        else\n        {\n          *((_QWORD *)a7 + 2) = 0LL;\n        }\n      }\n      else\n      {\n        v36 = *a7;\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          *a7 = v36 + 1;\n        }\n        else if ( a1 == (_DWORD)v36 )\n        {\n          if ( v8 )\n          {\n            v41 = *a2;\n            v42 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n            __fprintf_chk(stderr, 1LL, v42, v41, v21);\n          }\n          a7[2] = v21;\n          v21 = 5 * (*v12 != 58) + 58;\n        }\n        else\n        {\n          v37 = v36 + 1;\n          v38 = a2[v36];\n          *a7 = v37;\n          *((_QWORD *)a7 + 2) = v38;\n        }\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n    }\n  }\n  else\n  {\n    if ( v8 )\n    {\n      v39 = *a2;\n      v40 = dcgettext(0LL, \"%s: invalid option -- '%c'\\n\", 5);\n      __fprintf_chk(stderr, 1LL, v40, v39, v21);\n    }\n    a7[2] = v21;\n    return 63;\n  }\n  return v21;\n}\n"
        },
        {
            "funcName": "sub_40C300",
            "funcStartAddr": "0x40c300",
            "funcEndAddr": "0x40c356",
            "decompiledFuncCode": "__int64 __fastcall sub_40C300(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int a6, int a7)\n{\n  __int64 result; // rax\n\n  dword_617860 = dword_6175E0;\n  dword_617864 = dword_6175DC;\n  result = sub_40BD30(a1, a2, a3, a4, a5, a6, &dword_617860, a7);\n  dword_6175E0 = dword_617860;\n  nptr = (char *)qword_617870;\n  dword_6175D8 = dword_617868;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40C360",
            "funcStartAddr": "0x40c360",
            "funcEndAddr": "0x40c378",
            "decompiledFuncCode": "__int64 __fastcall sub_40C360(int a1, __int64 *a2, const char *a3)\n{\n  return sub_40C300(a1, a2, a3, 0LL, 0LL, 0, 1);\n}\n"
        },
        {
            "funcName": "sub_40C380",
            "funcStartAddr": "0x40c380",
            "funcEndAddr": "0x40c393",
            "decompiledFuncCode": "__int64 __fastcall sub_40C380(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5)\n{\n  return sub_40C300(a1, a2, a3, a4, a5, 0, 0);\n}\n"
        },
        {
            "funcName": "sub_40C3A0",
            "funcStartAddr": "0x40c3a0",
            "funcEndAddr": "0x40c3b5",
            "decompiledFuncCode": "__int64 __fastcall sub_40C3A0(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_40BD30(a1, a2, a3, a4, a5, 0, a6, 0);\n}\n"
        },
        {
            "funcName": "sub_40C3C0",
            "funcStartAddr": "0x40c3c0",
            "funcEndAddr": "0x40c3d6",
            "decompiledFuncCode": "__int64 __fastcall sub_40C3C0(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5)\n{\n  return sub_40C300(a1, a2, a3, a4, a5, 1, 0);\n}\n"
        },
        {
            "funcName": "sub_40C3E0",
            "funcStartAddr": "0x40c3e0",
            "funcEndAddr": "0x40c3f8",
            "decompiledFuncCode": "__int64 __fastcall sub_40C3E0(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_40BD30(a1, a2, a3, a4, a5, 1, a6, 0);\n}\n"
        },
        {
            "funcName": "sub_40C400",
            "funcStartAddr": "0x40c400",
            "funcEndAddr": "0x40c47a",
            "decompiledFuncCode": "size_t __fastcall sub_40C400(wchar_t *pwc, char *s, size_t a3, mbstate_t *a4)\n{\n  size_t v4; // rbx\n  wchar_t *v5; // r12\n  const char *v6; // rbp\n  char v8; // [rsp+Ch] [rbp-1Ch] BYREF\n\n  if ( !s )\n  {\n    a3 = 1LL;\n    v6 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_7:\n    v5 = (wchar_t *)&v8;\n    goto LABEL_4;\n  }\n  v4 = -2LL;\n  if ( !a3 )\n    return v4;\n  v5 = pwc;\n  v6 = s;\n  if ( !pwc )\n    goto LABEL_7;\nLABEL_4:\n  v4 = mbrtowc(v5, v6, a3, a4);\n  if ( v4 > 0xFFFFFFFFFFFFFFFDLL && !(unsigned __int8)sub_40DBE0(0LL) )\n  {\n    v4 = 1LL;\n    *v5 = *(unsigned __int8 *)v6;\n  }\n  return v4;\n}\n"
        },
        {
            "funcName": "sub_40C480",
            "funcStartAddr": "0x40c480",
            "funcEndAddr": "0x40c584",
            "decompiledFuncCode": "_BYTE *__fastcall sub_40C480(_BYTE *a1, __int16 a2, unsigned __int64 a3)\n{\n  _BYTE *result; // rax\n  __int64 v4; // r9\n  _BYTE *v5; // rcx\n  _BYTE *v6; // rdi\n\n  if ( !a3 )\n    return 0LL;\n  if ( ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( (_BYTE)a2 == *a1 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a3 )\n        return 0LL;\n      if ( ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v4 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8);\n  if ( a3 > 7 && (((v4 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v4 ^ *(_QWORD *)a1) & 0x8080808080808080LL) == 0 )\n  {\n    while ( 1 )\n    {\n      a3 -= 8LL;\n      a1 += 8;\n      if ( a3 <= 7 )\n        break;\n      if ( (((v4 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v4 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        goto LABEL_15;\n    }\n    if ( !a3 )\n      return 0LL;\n  }\nLABEL_15:\n  if ( (_BYTE)a2 != *a1 )\n  {\n    v5 = a1 + 1;\n    v6 = &a1[a3];\n    while ( 1 )\n    {\n      result = v5;\n      if ( v5 == v6 )\n        break;\n      if ( *v5++ == (_BYTE)a2 )\n        return result;\n    }\n    return 0LL;\n  }\n  return a1;\n}\n"
        },
        {
            "funcName": "sub_40C590",
            "funcStartAddr": "0x40c590",
            "funcEndAddr": "0x40c61a",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40C590(const char *a1)\n{\n  size_t v2; // rax\n  char *v3; // rcx\n  unsigned __int64 v4; // rdx\n  unsigned __int64 result; // rax\n  char v6; // di\n  unsigned __int64 v7; // rsi\n  char v8; // r9\n  char v9; // r10\n  unsigned __int8 v10; // r11\n\n  v2 = strlen(a1);\n  v3 = (char *)a1;\n  v4 = 0LL;\n  result = v2 + 1;\n  while ( 1 )\n  {\n    v6 = a1[v4];\n    v7 = v4 + 1;\n    if ( v6 != 92 )\n      break;\n    if ( v4 + 4 >= result )\n      break;\n    v8 = a1[v7];\n    if ( (unsigned __int8)(v8 - 48) > 3u )\n      break;\n    v9 = a1[v4 + 2];\n    if ( (unsigned __int8)(v9 - 48) > 7u )\n      break;\n    v10 = a1[v4 + 3] - 48;\n    if ( v10 > 7u )\n      break;\n    ++v3;\n    v7 = v4 + 4;\n    *(v3 - 1) = v10 + 8 * (v9 + 8 * v8) + 0x80;\nLABEL_3:\n    v4 = v7;\n  }\n  *v3++ = v6;\n  if ( result > v7 )\n    goto LABEL_3;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40C620",
            "funcStartAddr": "0x40c620",
            "funcEndAddr": "0x40c662",
            "decompiledFuncCode": "void __fastcall sub_40C620(void **ptr)\n{\n  free(*ptr);\n  free(ptr[1]);\n  free(ptr[2]);\n  if ( ((_BYTE)ptr[5] & 4) != 0 )\n    free(ptr[3]);\n  free(ptr);\n}\n"
        },
        {
            "funcName": "sub_40C670",
            "funcStartAddr": "0x40c670",
            "funcEndAddr": "0x40ce2f",
            "decompiledFuncCode": "void *sub_40C670()\n{\n  FILE *v0; // rax\n  FILE *v1; // rbp\n  void **p_ptr; // r12\n  const char *v3; // rax\n  const char *v4; // r15\n  bool v5; // r13\n  char *v6; // rbx\n  void *v7; // rax\n  char *v8; // rdi\n  void *v9; // rax\n  char *v10; // rdi\n  void *v11; // rax\n  __int64 v12; // rdi\n  const char *v13; // rax\n  __int64 v14; // rdx\n  const char *v15; // r15\n  __int64 v16; // rax\n  char v17; // al\n  __int64 v18; // r13\n  char *v19; // rax\n  bool v20; // dl\n  FILE *v22; // rax\n  FILE *v23; // r13\n  struct mntent *i; // rbp\n  char *v25; // r15\n  char *v26; // rbx\n  void *v27; // rax\n  char *mnt_dir; // rdi\n  void *v29; // rax\n  char *mnt_type; // rdi\n  const char *v31; // rax\n  const char *v32; // rbp\n  bool v33; // dl\n  int v34; // eax\n  __int64 v35; // r15\n  const char *v36; // rdi\n  char *v37; // rax\n  bool v38; // dl\n  char v39; // al\n  int *v40; // rax\n  int v41; // r14d\n  int *v42; // r13\n  void **v43; // rdi\n  void *v44; // rbx\n  int *v45; // rax\n  char v46; // [rsp+1Fh] [rbp-79h] BYREF\n  unsigned int v47; // [rsp+20h] [rbp-78h] BYREF\n  unsigned int v48; // [rsp+24h] [rbp-74h] BYREF\n  int v49; // [rsp+28h] [rbp-70h] BYREF\n  int v50; // [rsp+2Ch] [rbp-6Ch] BYREF\n  int v51; // [rsp+30h] [rbp-68h] BYREF\n  int v52; // [rsp+34h] [rbp-64h] BYREF\n  int v53; // [rsp+38h] [rbp-60h] BYREF\n  int v54; // [rsp+3Ch] [rbp-5Ch] BYREF\n  int v55; // [rsp+40h] [rbp-58h] BYREF\n  int v56; // [rsp+44h] [rbp-54h] BYREF\n  void *ptr; // [rsp+48h] [rbp-50h] BYREF\n  char *lineptr; // [rsp+50h] [rbp-48h] BYREF\n  size_t n[8]; // [rsp+58h] [rbp-40h] BYREF\n\n  v0 = fopen(\"/proc/self/mountinfo\", \"r\");\n  if ( v0 )\n  {\n    lineptr = 0LL;\n    v1 = v0;\n    p_ptr = &ptr;\n    n[0] = 0LL;\n    while ( __getdelim(&lineptr, n, 10, v1) != -1 )\n    {\n      if ( (sscanf(lineptr, \"%*u %*u %u:%u %n%*s%n %n%*s%n%c\", &v47, &v48, &v55, &v56, &v49, &v50, &v46) & 0xFFFFFFFB) == 3 )\n      {\n        v3 = (const char *)sub_40D2B0(&lineptr[v50], \" - \");\n        v4 = v3;\n        if ( v3 )\n        {\n          if ( (sscanf(v3, \" - %n%*s%n %n%*s%n %c\", &v51, &v52, &v53, &v54, &v46) & 0xFFFFFFFB) == 1 )\n          {\n            v5 = 1;\n            lineptr[v56] = 0;\n            lineptr[v50] = 0;\n            v4[v52] = 0;\n            v4[v54] = 0;\n            sub_40C590(&v4[v53]);\n            sub_40C590(&lineptr[v49]);\n            sub_40C590(&lineptr[v55]);\n            v6 = (char *)sub_40A560(0x38uLL, (__int64)\" - %n%*s%n %n%*s%n %c\");\n            v7 = sub_40A790((char *)&v4[v53]);\n            v8 = &lineptr[v49];\n            *(_QWORD *)v6 = v7;\n            v9 = sub_40A790(v8);\n            v10 = &lineptr[v55];\n            *((_QWORD *)v6 + 1) = v9;\n            v11 = sub_40A790(v10);\n            v12 = v51;\n            *((_QWORD *)v6 + 2) = v11;\n            v13 = (const char *)sub_40A790((char *)&v4[v12]);\n            v14 = v47;\n            v15 = v13;\n            *((_QWORD *)v6 + 3) = v13;\n            v16 = v48;\n            v6[40] |= 4u;\n            *((_QWORD *)v6 + 4) = (unsigned __int8)v16 | ((_DWORD)v14 << 8) & 0xFFF00 | (v14 << 32) & 0xFFFFF00000000000LL | (v16 << 12) & 0xFFFFFF00000LL;\n            if ( strcmp(v15, \"autofs\")\n              && strcmp(v15, \"proc\")\n              && strcmp(v15, \"subfs\")\n              && strcmp(v15, \"debugfs\")\n              && strcmp(v15, \"devpts\")\n              && strcmp(v15, \"fusectl\")\n              && strcmp(v15, \"mqueue\")\n              && strcmp(v15, \"rpc_pipefs\")\n              && strcmp(v15, \"sysfs\")\n              && strcmp(v15, \"devfs\")\n              && strcmp(v15, \"kernfs\")\n              && strcmp(v15, \"ignore\") )\n            {\n              v5 = strcmp(v15, \"none\") == 0;\n            }\n            v17 = v5 | v6[40] & 0xFE;\n            v18 = *(_QWORD *)v6;\n            v6[40] = v17;\n            v19 = strchr((const char *)v18, 58);\n            v20 = 1;\n            if ( !v19\n              && (*(_BYTE *)v18 != 47 || *(_BYTE *)(v18 + 1) != 47 || strcmp(v15, \"smbfs\") && strcmp(v15, \"cifs\")) )\n            {\n              v20 = strcmp(\"-hosts\", (const char *)v18) == 0;\n            }\n            v6[40] = (2 * v20) | v6[40] & 0xFD;\n            *p_ptr = v6;\n            p_ptr = (void **)(v6 + 48);\n          }\n        }\n      }\n    }\n    free(lineptr);\n    if ( (v1->_flags & 0x20) != 0 )\n    {\n      v45 = __errno_location();\n      v41 = *v45;\n      v42 = v45;\n      sub_40E240(v1);\n      *v42 = v41;\n      goto LABEL_46;\n    }\n    if ( (unsigned int)sub_40E240(v1) != -1 )\n    {\nLABEL_13:\n      *p_ptr = 0LL;\n      return ptr;\n    }\n  }\n  else\n  {\n    v22 = setmntent(\"/etc/mtab\", \"r\");\n    v23 = v22;\n    if ( !v22 )\n      return 0LL;\n    p_ptr = &ptr;\n    for ( i = getmntent(v22); i; i = getmntent(v23) )\n    {\n      v25 = hasmntopt(i, \"bind\");\n      v26 = (char *)sub_40A560(0x38uLL, (__int64)\"bind\");\n      v27 = sub_40A790(i->mnt_fsname);\n      mnt_dir = i->mnt_dir;\n      *(_QWORD *)v26 = v27;\n      v29 = sub_40A790(mnt_dir);\n      *((_QWORD *)v26 + 2) = 0LL;\n      mnt_type = i->mnt_type;\n      *((_QWORD *)v26 + 1) = v29;\n      v31 = (const char *)sub_40A790(mnt_type);\n      v26[40] |= 4u;\n      v32 = v31;\n      *((_QWORD *)v26 + 3) = v31;\n      v33 = 1;\n      if ( strcmp(v31, \"autofs\") )\n      {\n        if ( strcmp(v31, \"proc\") )\n        {\n          if ( strcmp(v31, \"subfs\") )\n          {\n            if ( strcmp(v31, \"debugfs\") )\n            {\n              if ( strcmp(v31, \"devpts\") )\n              {\n                if ( strcmp(v31, \"fusectl\") )\n                {\n                  if ( strcmp(v31, \"mqueue\") )\n                  {\n                    if ( strcmp(v31, \"rpc_pipefs\") )\n                    {\n                      if ( strcmp(v31, \"sysfs\") )\n                      {\n                        if ( strcmp(v31, \"devfs\") )\n                        {\n                          if ( strcmp(v31, \"kernfs\") )\n                          {\n                            v34 = strcmp(v31, \"ignore\");\n                            v33 = 1;\n                            if ( v34 )\n                              v33 = strcmp(v32, \"none\") == 0 && v25 == 0LL;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      v35 = *(_QWORD *)v26;\n      v36 = *(const char **)v26;\n      v26[40] = v33 | v26[40] & 0xFE;\n      v37 = strchr(v36, 58);\n      v38 = 1;\n      if ( !v37 && (*(_BYTE *)v35 != 47 || *(_BYTE *)(v35 + 1) != 47 || strcmp(v32, \"smbfs\") && strcmp(v32, \"cifs\")) )\n        v38 = strcmp(\"-hosts\", (const char *)v35) == 0;\n      v39 = v26[40];\n      *((_QWORD *)v26 + 4) = -1LL;\n      v26[40] = (2 * v38) | v39 & 0xFD;\n      *p_ptr = v26;\n      p_ptr = (void **)(v26 + 48);\n    }\n    if ( endmntent(v23) )\n      goto LABEL_13;\n  }\n  v40 = __errno_location();\n  v41 = *v40;\n  v42 = v40;\nLABEL_46:\n  *p_ptr = 0LL;\n  v43 = (void **)ptr;\n  if ( ptr )\n  {\n    do\n    {\n      v44 = v43[6];\n      sub_40C620(v43);\n      ptr = v44;\n      v43 = (void **)v44;\n    }\n    while ( v44 );\n  }\n  *v42 = v41;\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_40CE30",
            "funcStartAddr": "0x40ce30",
            "funcEndAddr": "0x40cf5e",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40CE30(__int64 a1, unsigned __int64 a2, __int64 *a3)\n{\n  __int64 v3; // r11\n  __int64 v4; // r8\n  unsigned __int64 v5; // r9\n  __int64 v6; // rax\n  unsigned __int64 v7; // rcx\n  unsigned __int8 v8; // bl\n  unsigned __int64 v9; // r11\n  __int64 v10; // rbx\n  __int64 v11; // r8\n  unsigned __int64 v12; // r9\n  __int64 v13; // r10\n  unsigned __int64 v14; // rcx\n  unsigned __int8 v15; // r11\n  unsigned __int64 v16; // rbx\n  unsigned __int64 v17; // r10\n  unsigned __int64 result; // rax\n\n  v3 = 1LL;\n  v4 = 1LL;\n  v5 = 0LL;\n  v6 = -1LL;\n  while ( 1 )\n  {\n    v7 = v4 + v5;\n    if ( v4 + v5 >= a2 )\n      break;\n    while ( 1 )\n    {\n      v8 = *(_BYTE *)(a1 + v6 + v4);\n      if ( *(_BYTE *)(a1 + v7) >= v8 )\n        break;\n      v5 = v7;\n      v4 = 1LL;\n      v9 = v7++;\n      v3 = v9 - v6;\n      if ( v7 >= a2 )\n        goto LABEL_5;\n    }\n    if ( *(_BYTE *)(a1 + v7) == v8 )\n    {\n      if ( v4 == v3 )\n      {\n        v5 = v7;\n        v4 = 1LL;\n      }\n      else\n      {\n        ++v4;\n      }\n    }\n    else\n    {\n      v6 = v5;\n      v3 = 1LL;\n      ++v5;\n      v4 = 1LL;\n    }\n  }\nLABEL_5:\n  *a3 = v3;\n  v10 = 1LL;\n  v11 = 1LL;\n  v12 = 0LL;\n  v13 = -1LL;\n  while ( 1 )\n  {\n    v14 = v11 + v12;\n    if ( a2 <= v11 + v12 )\n      break;\n    while ( 1 )\n    {\n      v15 = *(_BYTE *)(a1 + v13 + v11);\n      if ( *(_BYTE *)(a1 + v14) <= v15 )\n        break;\n      v12 = v14;\n      v11 = 1LL;\n      v16 = v14++;\n      v10 = v16 - v13;\n      if ( a2 <= v14 )\n        goto LABEL_9;\n    }\n    if ( *(_BYTE *)(a1 + v14) == v15 )\n    {\n      if ( v11 == v10 )\n      {\n        v12 = v14;\n        v11 = 1LL;\n      }\n      else\n      {\n        ++v11;\n      }\n    }\n    else\n    {\n      v13 = v12;\n      v10 = 1LL;\n      ++v12;\n      v11 = 1LL;\n    }\n  }\nLABEL_9:\n  v17 = v13 + 1;\n  result = v6 + 1;\n  if ( v17 >= result )\n  {\n    *a3 = v10;\n    return v17;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40CF60",
            "funcStartAddr": "0x40cf60",
            "funcEndAddr": "0x40d2a9",
            "decompiledFuncCode": "__int64 __fastcall sub_40CF60(__int64 a1, __int64 a2, unsigned __int8 *a3, unsigned __int64 a4)\n{\n  unsigned __int64 v7; // r13\n  char *v8; // rax\n  char *v9; // rsi\n  unsigned __int8 *v10; // rax\n  __int64 v11; // rdx\n  __int64 v12; // rcx\n  unsigned __int64 v13; // r14\n  unsigned __int64 v14; // rax\n  __int64 v15; // r9\n  _BYTE *v16; // rax\n  __int64 v17; // r9\n  __int64 v18; // rax\n  __int64 v19; // rdx\n  unsigned __int64 v20; // rax\n  unsigned __int64 v22; // r10\n  unsigned __int64 v23; // r11\n  __int64 v24; // r14\n  unsigned __int64 v25; // rax\n  unsigned __int64 v26; // rax\n  unsigned __int64 v27; // rax\n  __int64 v28; // [rsp+8h] [rbp-880h]\n  __int64 v29; // [rsp+8h] [rbp-880h]\n  __int64 v30; // [rsp+10h] [rbp-878h]\n  unsigned __int64 v31; // [rsp+10h] [rbp-878h]\n  unsigned __int64 v32; // [rsp+18h] [rbp-870h]\n  unsigned __int64 v33; // [rsp+20h] [rbp-868h]\n  unsigned __int64 v34; // [rsp+20h] [rbp-868h]\n  unsigned __int64 v35; // [rsp+48h] [rbp-840h] BYREF\n  __int64 v36[256]; // [rsp+50h] [rbp-838h] BYREF\n  char v37; // [rsp+850h] [rbp-38h] BYREF\n\n  if ( a4 <= 2 )\n  {\n    v35 = 1LL;\n    v7 = a4 - 1;\n    v33 = 1LL;\n  }\n  else\n  {\n    v7 = sub_40CE30((__int64)a3, a4, (__int64 *)&v35);\n    v33 = v35;\n  }\n  v8 = (char *)v36;\n  do\n  {\n    *(_QWORD *)v8 = a4;\n    v8 += 8;\n  }\n  while ( &v37 != v8 );\n  v9 = (char *)&a3[v33];\n  if ( a4 )\n  {\n    v10 = a3;\n    do\n    {\n      v11 = *v10;\n      v12 = &a3[a4 - 1] - v10++;\n      v36[v11] = v12;\n    }\n    while ( &a3[a4] != v10 );\n    if ( memcmp(a3, v9, v7) )\n      goto LABEL_9;\n    v22 = a4 - 1;\n    v23 = 0LL;\n    v24 = 0LL;\n    while ( 1 )\n    {\n      v32 = v22;\n      v31 = v23;\n      v29 = v24 + a4;\n      if ( sub_40C480((_BYTE *)(a1 + a2), 0, v24 + a4 - a2) )\n        break;\n      v22 = v32;\n      if ( !v29 )\n        break;\n      v25 = v36[*(unsigned __int8 *)(a1 + v29 - 1)];\n      if ( v25 )\n      {\n        if ( v25 < v33 && v31 )\n          v25 = a4 - v33;\n        v24 += v25;\n        v23 = 0LL;\n      }\n      else\n      {\n        v26 = v7;\n        if ( v31 >= v7 )\n          v26 = v31;\n        if ( v26 >= v32 )\n        {\nLABEL_48:\n          v27 = v7 - 1;\n          if ( v31 < v7 && *(_BYTE *)(a1 + v24 + v7 - 1) == a3[v7 - 1] )\n          {\n            while ( v31 != v27 && a3[v27 - 1] == *(_BYTE *)(v27 + a1 + v24 - 1) )\n              --v27;\n          }\n          else\n          {\n            v27 = v7;\n          }\n          if ( v31 + 1 > v27 )\n            return a1 + v24;\n          v24 += v33;\n          v23 = a4 - v33;\n        }\n        else\n        {\n          while ( a3[v26] == *(_BYTE *)(a1 + v24 + v26) )\n          {\n            if ( ++v26 == v32 )\n              goto LABEL_48;\n          }\n          v23 = 0LL;\n          v24 += v26 + 1 - v7;\n        }\n      }\n      a2 = v29;\n    }\n  }\n  else if ( memcmp(a3, v9, v7) )\n  {\nLABEL_9:\n    v13 = a4 - 1;\n    v14 = a4 - v7;\n    if ( a4 - v7 < v7 )\n      v14 = v7;\n    v15 = 0LL;\n    v34 = v14 + 1;\n    v35 = v14 + 1;\n    while ( 1 )\n    {\n      v30 = v15;\n      v28 = v15 + a4;\n      v16 = sub_40C480((_BYTE *)(a1 + a2), 0, v15 + a4 - a2);\n      if ( !v28 )\n        return 0LL;\n      v17 = v30;\n      if ( v16 )\n        return 0LL;\n      v18 = v36[*(unsigned __int8 *)(a1 + v28 - 1)];\n      if ( v18 )\n        goto LABEL_12;\n      v19 = a1 + v30;\n      if ( v7 < v13 )\n      {\n        v18 = v7;\n        if ( *(_BYTE *)(v19 + v7) != a3[v7] )\n        {\nLABEL_28:\n          v17 = 1 - v7 + v30;\nLABEL_12:\n          v15 = v18 + v17;\n          goto LABEL_13;\n        }\n        while ( ++v18 < v13 )\n        {\n          if ( a3[v18] != *(_BYTE *)(v19 + v18) )\n            goto LABEL_28;\n        }\n      }\n      v20 = v7 - 1;\n      if ( !v7 )\n        return a1 + v30;\n      if ( *(_BYTE *)(v19 + v20) == a3[v7 - 1] )\n      {\n        while ( --v20 != -1LL )\n        {\n          if ( a3[v20] != *(_BYTE *)(v19 + v20) )\n            goto LABEL_31;\n        }\n        return a1 + v30;\n      }\nLABEL_31:\n      v15 = v34 + v30;\nLABEL_13:\n      a2 = v28;\n    }\n  }\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_40D2B0",
            "funcStartAddr": "0x40d2b0",
            "funcEndAddr": "0x40d644",
            "decompiledFuncCode": "__int64 __fastcall sub_40D2B0(char *a1, unsigned __int8 *a2)\n{\n  unsigned __int8 v2; // al\n  signed __int8 v3; // r9\n  unsigned __int8 *v4; // rbx\n  unsigned __int8 *v5; // rdx\n  unsigned __int8 v6; // cl\n  char v7; // r8\n  bool v8; // al\n  char *v9; // r12\n  unsigned __int64 v10; // rbp\n  char *v11; // rax\n  __int64 v12; // r8\n  unsigned __int64 v14; // rax\n  size_t v15; // r15\n  int v16; // eax\n  __int64 v17; // r8\n  size_t v18; // r13\n  __int64 v19; // r14\n  _BYTE *v20; // rax\n  unsigned __int64 v21; // rax\n  unsigned __int64 v22; // rax\n  size_t v23; // rax\n  __int64 v24; // r14\n  __int64 v25; // r13\n  _BYTE *v26; // rax\n  char *v27; // rdx\n  size_t v28; // rax\n  size_t v29; // rax\n  __int64 v30; // [rsp+8h] [rbp-70h]\n  __int64 v31; // [rsp+8h] [rbp-70h]\n  __int64 v32; // [rsp+8h] [rbp-70h]\n  __int64 v33; // [rsp+18h] [rbp-60h]\n  size_t v34; // [rsp+18h] [rbp-60h]\n  __int64 v35[8]; // [rsp+38h] [rbp-40h] BYREF\n\n  v2 = *a1;\n  v3 = *a2;\n  if ( !*a1 )\n  {\n    v9 = 0LL;\n    if ( !v3 )\n      return (__int64)a1;\n    return (__int64)v9;\n  }\n  if ( !v3 )\n    return (__int64)a1;\n  v4 = a2;\n  v5 = (unsigned __int8 *)a1;\n  v6 = *a2;\n  v7 = 1;\n  while ( 1 )\n  {\n    ++v5;\n    ++v4;\n    v8 = v6 == v2;\n    v6 = *v4;\n    v7 &= v8;\n    v2 = *v5;\n    if ( !*v5 )\n      break;\n    if ( !v6 )\n      goto LABEL_7;\n  }\n  v9 = 0LL;\n  if ( v6 )\n    return (__int64)v9;\nLABEL_7:\n  v9 = a1;\n  if ( v7 )\n    return (__int64)v9;\n  v10 = v4 - a2;\n  v11 = strchr(a1 + 1, v3);\n  v9 = v11;\n  if ( !v11 || v10 == 1 )\n    return (__int64)v9;\n  v12 = &a1[v10] - v11;\n  if ( &a1[v10] < v11 )\n    v12 = 1LL;\n  if ( v10 > 0x1F )\n    return sub_40CF60((__int64)v11, v12, a2, v10);\n  if ( v10 <= 2 )\n  {\n    v35[0] = 1LL;\n    v15 = v10 - 1;\n    v33 = 1LL;\n  }\n  else\n  {\n    v30 = v12;\n    v14 = sub_40CE30((__int64)a2, v10, v35);\n    v12 = v30;\n    v15 = v14;\n    v33 = v35[0];\n  }\n  v31 = v12;\n  v16 = memcmp(a2, &a2[v33], v15);\n  v17 = v31;\n  if ( !v16 )\n  {\n    v18 = 0LL;\n    v19 = 0LL;\n    while ( 1 )\n    {\n      v32 = v10 + v19;\n      v20 = sub_40C480(&v9[v17], 0, v10 + v19 - v17);\n      if ( !(v10 + v19) || v20 )\n        return 0LL;\n      v21 = v18;\n      if ( v15 >= v18 )\n        v21 = v15;\n      if ( v10 > v21 )\n      {\n        if ( v9[v21 + v19] != a2[v21] )\n        {\nLABEL_37:\n          v18 = 0LL;\n          v19 += v21 + 1 - v15;\n          goto LABEL_36;\n        }\n        while ( v10 != ++v21 )\n        {\n          if ( a2[v21] != v9[v19 + v21] )\n            goto LABEL_37;\n        }\n      }\n      v22 = v15 - 1;\n      if ( v15 > v18 && a2[v15 - 1] == v9[v19 - 1 + v15] )\n      {\n        while ( v18 != v22 && a2[v22 - 1] == v9[v19 - 1 + v22] )\n          --v22;\n      }\n      else\n      {\n        v22 = v15;\n      }\n      if ( v18 + 1 > v22 )\n      {\n        v9 += v19;\n        return (__int64)v9;\n      }\n      v18 = v10 - v33;\n      v19 += v33;\nLABEL_36:\n      v17 = v32;\n    }\n  }\n  v23 = v10 - v15;\n  if ( v10 - v15 < v15 )\n    v23 = v15;\n  v24 = 0LL;\n  v34 = v23 + 1;\n  v35[0] = v23 + 1;\n  while ( 1 )\n  {\n    v25 = v10 + v24;\n    v26 = sub_40C480(&v9[v17], 0, v10 + v24 - v17);\n    if ( !(v10 + v24) || v26 )\n      return 0LL;\n    v27 = &v9[v24];\n    if ( v10 > v15 )\n    {\n      v28 = v15;\n      v27 = &v9[v24];\n      if ( v9[v15 + v24] != a2[v15] )\n      {\nLABEL_55:\n        v24 += v28 + 1 - v15;\n        goto LABEL_56;\n      }\n      while ( v10 > ++v28 )\n      {\n        if ( a2[v28] != v27[v28] )\n          goto LABEL_55;\n      }\n    }\n    v29 = v15 - 1;\n    if ( !v15 )\n      return (__int64)v27;\n    if ( v27[v29] == a2[v15 - 1] )\n      break;\nLABEL_57:\n    v24 += v34;\nLABEL_56:\n    v17 = v25;\n  }\n  while ( --v29 != -1LL )\n  {\n    if ( a2[v29] != v27[v29] )\n      goto LABEL_57;\n  }\n  return (__int64)v27;\n}\n"
        },
        {
            "funcName": "sub_40D650",
            "funcStartAddr": "0x40d650",
            "funcEndAddr": "0x40d6a9",
            "decompiledFuncCode": "__int64 __fastcall sub_40D650(_QWORD *a1, __int64 a2, __int64 a3)\n{\n  void *v3; // rax\n  unsigned int v4; // edx\n  unsigned __int64 v6; // [rsp+8h] [rbp-10h] BYREF\n\n  v3 = (void *)sub_40E360(0LL, &v6, a2, a3);\n  if ( !v3 )\n    return 0xFFFFFFFFLL;\n  v4 = v6;\n  if ( v6 > 0x7FFFFFFF )\n  {\n    free(v3);\n    *__errno_location() = 75;\n    return 0xFFFFFFFFLL;\n  }\n  else\n  {\n    *a1 = v3;\n    return v4;\n  }\n}\n"
        },
        {
            "funcName": "sub_40D6B0",
            "funcStartAddr": "0x40d6b0",
            "funcEndAddr": "0x40d79f",
            "decompiledFuncCode": "char *__fastcall sub_40D6B0(char *path, unsigned __int64 a2)\n{\n  size_t v2; // rbx\n  char *v3; // rax\n  char *v4; // rbp\n  ssize_t v5; // r12\n  char *v7; // rdi\n\n  v2 = a2 + 1;\n  if ( a2 >= 0x401 )\n    v2 = 1025LL;\n  while ( 2 )\n  {\n    v3 = (char *)malloc(v2);\n    v4 = v3;\n    if ( v3 )\n    {\n      while ( 1 )\n      {\n        v5 = readlink(path, v3, v2);\n        if ( v5 < 0 && *__errno_location() != 34 )\n        {\n          v7 = v4;\n          v4 = 0LL;\n          free(v7);\n          return v4;\n        }\n        if ( v2 > v5 )\n        {\n          v4[v5] = 0;\n          return v4;\n        }\n        free(v4);\n        if ( v2 > 0x3FFFFFFFFFFFFFFFLL )\n          break;\n        v2 *= 2LL;\n        v3 = (char *)malloc(v2);\n        v4 = v3;\n        if ( !v3 )\n          return v4;\n      }\n      if ( v2 <= 0x7FFFFFFFFFFFFFFELL )\n      {\n        v2 = 0x7FFFFFFFFFFFFFFFLL;\n        continue;\n      }\n      v4 = 0LL;\n      *__errno_location() = 12;\n    }\n    break;\n  }\n  return v4;\n}\n"
        },
        {
            "funcName": "sub_40D7A0",
            "funcStartAddr": "0x40d7a0",
            "funcEndAddr": "0x40d7aa",
            "decompiledFuncCode": "void __noreturn sub_40D7A0()\n{\n  sub_404930(1);\n}\n"
        },
        {
            "funcName": "sub_40D7B0",
            "funcStartAddr": "0x40d7b0",
            "funcEndAddr": "0x40d8c6",
            "decompiledFuncCode": "__int64 __fastcall sub_40D7B0(const char *a1, const char **a2, char *a3, size_t a4)\n{\n  char *v5; // rbp\n  size_t v6; // rax\n  const char *v7; // r14\n  size_t v8; // r12\n  __int64 v9; // rbx\n  bool v10; // zf\n  char v11; // al\n  __int64 v12; // rax\n  __int64 v14; // [rsp+0h] [rbp-58h]\n  char v15; // [rsp+17h] [rbp-41h]\n\n  v5 = a3;\n  v6 = strlen(a1);\n  v7 = *a2;\n  v14 = -1LL;\n  if ( !*a2 )\n    return v14;\n  v8 = v6;\n  v15 = 0;\n  v9 = 0LL;\n  do\n  {\n    while ( strncmp(v7, a1, v8) )\n    {\nLABEL_7:\n      ++v9;\n      v5 += a4;\n      v7 = a2[v9];\n      if ( !v7 )\n        goto LABEL_12;\n    }\n    if ( strlen(v7) == v8 )\n      return v9;\n    if ( v14 != -1 )\n    {\n      if ( a3 )\n      {\n        v10 = memcmp(&a3[a4 * v14], v5, a4) == 0;\n        v11 = v15;\n        if ( !v10 )\n          v11 = 1;\n        v15 = v11;\n      }\n      else\n      {\n        v15 = 1;\n      }\n      goto LABEL_7;\n    }\n    v14 = v9++;\n    v5 += a4;\n    v7 = a2[v9];\n  }\n  while ( v7 );\nLABEL_12:\n  v12 = -2LL;\n  if ( !v15 )\n    return v14;\n  return v12;\n}\n"
        },
        {
            "funcName": "sub_40D8D0",
            "funcStartAddr": "0x40d8d0",
            "funcEndAddr": "0x40d941",
            "decompiledFuncCode": "void __fastcall sub_40D8D0(__int64 a1, __int64 a2, __int64 a3)\n{\n  char *v3; // rbx\n  _BYTE *v4; // rbp\n  _BYTE *v5; // rax\n\n  if ( a3 == -1 )\n    v3 = dcgettext(0LL, \"invalid argument %s for %s\", 5);\n  else\n    v3 = dcgettext(0LL, \"ambiguous argument %s for %s\", 5);\n  v4 = sub_409DC0(1LL, a1);\n  v5 = sub_409AB0(0LL, 8, a2);\n  error(0, 0, v3, v5, v4);\n}\n"
        },
        {
            "funcName": "sub_40D950",
            "funcStartAddr": "0x40d950",
            "funcEndAddr": "0x40da68",
            "decompiledFuncCode": "int __fastcall sub_40D950(__int64 *a1, char *a2, size_t a3)\n{\n  const void *v3; // r14\n  FILE *v6; // rbx\n  char *v7; // rax\n  FILE *v8; // rsi\n  __int64 v9; // rbx\n  __int64 i; // r12\n  const char *v11; // rax\n  const char *v12; // rax\n  char *IO_write_ptr; // rax\n\n  v3 = 0LL;\n  v6 = stderr;\n  v7 = dcgettext(0LL, \"Valid arguments are:\", 5);\n  v8 = v6;\n  v9 = 0LL;\n  fputs_unlocked(v7, v8);\n  for ( i = *a1; i; i = a1[v9] )\n  {\n    while ( !v9 || memcmp(v3, a2, a3) )\n    {\n      ++v9;\n      v3 = a2;\n      a2 += a3;\n      v11 = sub_409DE0(i);\n      __fprintf_chk(stderr, 1LL, \"\\n  - %s\", v11);\n      i = a1[v9];\n      if ( !i )\n        goto LABEL_7;\n    }\n    ++v9;\n    a2 += a3;\n    v12 = sub_409DE0(i);\n    __fprintf_chk(stderr, 1LL, \", %s\", v12);\n  }\nLABEL_7:\n  IO_write_ptr = stderr->_IO_write_ptr;\n  if ( IO_write_ptr >= stderr->_IO_write_end )\n  {\n    LODWORD(IO_write_ptr) = __overflow(stderr, 10);\n  }\n  else\n  {\n    stderr->_IO_write_ptr = IO_write_ptr + 1;\n    *IO_write_ptr = 10;\n  }\n  return (int)IO_write_ptr;\n}\n"
        },
        {
            "funcName": "sub_40DA70",
            "funcStartAddr": "0x40da70",
            "funcEndAddr": "0x40dae0",
            "decompiledFuncCode": "__int64 __fastcall sub_40DA70(__int64 a1, const char *a2, const char **a3, char *a4, size_t a5, void (*a6)(void))\n{\n  __int64 result; // rax\n\n  result = sub_40D7B0(a2, a3, a4, a5);\n  if ( result < 0 )\n  {\n    sub_40D8D0(a1, (__int64)a2, result);\n    sub_40D950((__int64 *)a3, a4, a5);\n    a6();\n    return -1LL;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40DAE0",
            "funcStartAddr": "0x40dae0",
            "funcEndAddr": "0x40db2d",
            "decompiledFuncCode": "__int64 __fastcall sub_40DAE0(void *s1, __int64 *a2, char *a3, size_t a4)\n{\n  __int64 v4; // r14\n  __int64 *v6; // rbx\n\n  v4 = *a2;\n  if ( *a2 )\n  {\n    v6 = a2 + 1;\n    do\n    {\n      if ( !memcmp(s1, a3, a4) )\n        break;\n      v4 = *v6;\n      a3 += a4;\n      ++v6;\n    }\n    while ( v4 );\n  }\n  return v4;\n}\n"
        },
        {
            "funcName": "sub_40DB30",
            "funcStartAddr": "0x40db30",
            "funcEndAddr": "0x40db8d",
            "decompiledFuncCode": "__int64 __fastcall sub_40DB30(FILE *stream)\n{\n  size_t v1; // r12\n  int v2; // ebx\n  __int64 result; // rax\n\n  v1 = __fpending(stream);\n  v2 = stream->_flags & 0x20;\n  result = sub_40E240(stream);\n  if ( v2 )\n  {\n    if ( !(_DWORD)result )\n    {\n      *__errno_location() = 0;\n      return 0xFFFFFFFFLL;\n    }\n    return 0xFFFFFFFFLL;\n  }\n  if ( !(_DWORD)result )\n    return result;\n  if ( v1 )\n    return 0xFFFFFFFFLL;\n  return (unsigned int)-(*__errno_location() != 9);\n}\n"
        },
        {
            "funcName": "sub_40DB90",
            "funcStartAddr": "0x40db90",
            "funcEndAddr": "0x40dbda",
            "decompiledFuncCode": "__int64 __fastcall sub_40DB90(const char *a1, char a2, unsigned int a3)\n{\n  __int64 v3; // rdx\n  int v4; // eax\n\n  v3 = 0LL;\n  if ( (a2 & 0x40) != 0 )\n    v3 = a3;\n  v4 = open(a1, a2, v3);\n  return sub_40E1F0(v4);\n}\n"
        },
        {
            "funcName": "sub_40DBE0",
            "funcStartAddr": "0x40dbe0",
            "funcEndAddr": "0x40dc3e",
            "decompiledFuncCode": "bool __fastcall sub_40DBE0(int a1)\n{\n  char *v1; // rdx\n  bool result; // al\n\n  v1 = setlocale(a1, 0LL);\n  result = 1;\n  if ( v1 )\n  {\n    result = 0;\n    if ( strcmp(v1, \"C\") )\n      return strcmp(v1, \"POSIX\") != 0;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40DC40",
            "funcStartAddr": "0x40dc40",
            "funcEndAddr": "0x40dc76",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40DC40(char *a1, unsigned __int64 a2)\n{\n  __int64 v2; // rcx\n  unsigned __int64 v3; // rax\n\n  v2 = *a1;\n  if ( !(_BYTE)v2 )\n    return 0LL;\n  v3 = 0LL;\n  do\n  {\n    ++a1;\n    v3 = v2 + __ROL8__(v3, 9);\n    v2 = *a1;\n  }\n  while ( (_BYTE)v2 );\n  return v3 % a2;\n}\n"
        },
        {
            "funcName": "sub_40DC80",
            "funcStartAddr": "0x40dc80",
            "funcEndAddr": "0x40e1e2",
            "decompiledFuncCode": "const char *sub_40DC80()\n{\n  char *v0; // rax\n  char *v1; // r15\n  const char *v2; // rbx\n  char v3; // bp\n  const char *v4; // rbp\n  char *v6; // rax\n  const char *v7; // r13\n  size_t v8; // rax\n  __int64 v9; // r12\n  size_t v10; // r14\n  size_t v11; // rdi\n  char *v12; // rax\n  char *v13; // rbp\n  size_t v14; // rdi\n  char *v15; // rax\n  int v16; // eax\n  int v17; // r12d\n  FILE *v18; // r13\n  const char *v19; // rax\n  FILE *v20; // rbx\n  const char *v21; // r13\n  char *IO_read_ptr; // rax\n  int v23; // edi\n  char *v24; // kr00_8\n  int *v25; // rdx\n  int v26; // esi\n  unsigned int v27; // eax\n  __int64 v28; // rdx\n  signed __int64 v29; // rax\n  char *v30; // rax\n  __int64 v31; // rcx\n  __int64 v32; // rdx\n  __int64 v33; // rsi\n  unsigned int v34; // ecx\n  signed __int64 v35; // rdi\n  char *v36; // rsi\n  unsigned int v37; // edx\n  char *v38; // rcx\n  FILE *v39; // rdi\n  int v40; // eax\n  bool v41; // dl\n  char *v42; // rax\n  signed __int64 v43; // rax\n  unsigned __int64 v44; // r9\n  char *v45; // rsi\n  char *v46; // r10\n  unsigned int v47; // ecx\n  unsigned int v48; // ecx\n  unsigned int v49; // esi\n  __int64 v50; // r8\n  unsigned __int64 v51; // rdi\n  char *v52; // rcx\n  char *v53; // r9\n  unsigned int v54; // edx\n  unsigned int v55; // edx\n  unsigned int v56; // ecx\n  __int64 v57; // rsi\n  const char *v58; // rax\n  char *v59; // rdi\n  FILE *v60; // r13\n  signed __int64 v61; // [rsp+8h] [rbp-D0h]\n  __int64 v62; // [rsp+18h] [rbp-C0h]\n  char v63[64]; // [rsp+20h] [rbp-B8h] BYREF\n  _QWORD v64[15]; // [rsp+60h] [rbp-78h] BYREF\n\n  v0 = nl_langinfo(14);\n  v1 = s;\n  v2 = v0;\n  if ( !v0 )\n    v2 = \"\";\n  if ( !s )\n  {\n    v6 = getenv(\"CHARSETALIASDIR\");\n    v7 = v6;\n    if ( v6 && *v6 )\n    {\n      v8 = strlen(v6);\n      v9 = v8;\n      v10 = v8;\n      if ( !v8 )\n      {\n        v11 = 14LL;\nLABEL_18:\n        v12 = (char *)malloc(v11);\n        v13 = v12;\n        if ( !v12 )\n        {\nLABEL_19:\n          v1 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\nLABEL_20:\n          s = v1;\n          goto LABEL_4;\n        }\n        memcpy(v12, v7, v10);\nLABEL_24:\n        strcpy(&v13[v9], \"charset.alias\");\n        v16 = open(v13, 0);\n        v17 = v16;\n        if ( v16 >= 0 )\n        {\n          v1 = 0LL;\n          v61 = 0LL;\n          v18 = fdopen(v16, \"r\");\n          if ( v18 )\n          {\n            v19 = v2;\n            v20 = v18;\n            v21 = v19;\nLABEL_30:\n            IO_read_ptr = v20->_IO_read_ptr;\n            if ( IO_read_ptr < v20->_IO_read_end )\n            {\nLABEL_31:\n              v20->_IO_read_ptr = IO_read_ptr + 1;\n              v23 = (unsigned __int8)*IO_read_ptr;\n              goto LABEL_32;\n            }\n            while ( 1 )\n            {\n              v23 = __uflow(v20);\n              if ( v23 == -1 )\n                break;\nLABEL_32:\n              if ( (unsigned int)(v23 - 9) <= 1 || v23 == 32 )\n                goto LABEL_30;\n              if ( v23 == 35 )\n              {\n                do\n                {\n                  v42 = v20->_IO_read_ptr;\n                  if ( v42 < v20->_IO_read_end )\n                  {\n                    v20->_IO_read_ptr = v42 + 1;\n                    v40 = (unsigned __int8)*v42;\n                    v41 = 1;\n                  }\n                  else\n                  {\n                    v40 = __uflow(v20);\n                    v41 = v40 != -1;\n                  }\n                }\n                while ( v40 != 10 && v41 );\n                if ( v40 == -1 )\n                  break;\n                goto LABEL_30;\n              }\n              ungetc(v23, v20);\n              if ( fscanf(v20, \"%50s %50s\", v63, v64) <= 1 )\n                break;\n              v24 = &v63[strlen(v63)];\n              v25 = (int *)v64;\n              do\n              {\n                v26 = *v25++;\n                v27 = ~v26 & (v26 - 16843009) & 0x80808080;\n              }\n              while ( !v27 );\n              if ( (~v26 & (v26 - 16843009) & 0x8080) == 0 )\n              {\n                v27 >>= 16;\n                v25 = (int *)((char *)v25 + 2);\n              }\n              v28 = (char *)v25 - __CFADD__((_BYTE)v27, (_BYTE)v27) - 3 - (char *)v64;\n              v29 = v24 - v63 + v28;\n              v62 = v28;\n              if ( v61 )\n              {\n                v43 = v61 + v29;\n                v61 = v43 + 2;\n                v30 = (char *)realloc(v1, v43 + 3);\n                v32 = v62;\n                v31 = v24 - v63;\n              }\n              else\n              {\n                v61 = v29 + 2;\n                v30 = (char *)malloc(v29 + 3);\n                v31 = v24 - v63;\n                v32 = v62;\n              }\n              if ( !v30 )\n              {\n                v58 = v21;\n                v59 = v1;\n                v60 = v20;\n                v1 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\n                v2 = v58;\n                free(v59);\n                sub_40E240(v60);\n                goto LABEL_26;\n              }\n              v33 = -2 - v31;\n              v34 = v31 + 1;\n              v35 = v61 - v32;\n              v36 = &v30[v61 - v32 + v33];\n              if ( v34 >= 8 )\n              {\n                *(_QWORD *)v36 = *(_QWORD *)v63;\n                *(_QWORD *)&v36[v34 - 8] = *(_QWORD *)&v63[v34 - 8];\n                v44 = (unsigned __int64)(v36 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v45 = &v36[-v44];\n                v46 = (char *)(v63 - v45);\n                v47 = ((_DWORD)v45 + v34) & 0xFFFFFFF8;\n                if ( v47 >= 8 )\n                {\n                  v48 = v47 & 0xFFFFFFF8;\n                  v49 = 0;\n                  do\n                  {\n                    v50 = v49;\n                    v49 += 8;\n                    *(_QWORD *)(v44 + v50) = *(_QWORD *)&v46[v50];\n                  }\n                  while ( v49 < v48 );\n                }\n              }\n              else if ( (v34 & 4) != 0 )\n              {\n                *(_DWORD *)v36 = *(_DWORD *)v63;\n                *(_DWORD *)&v36[v34 - 4] = *(_DWORD *)&v63[v34 - 4];\n              }\n              else if ( v34 )\n              {\n                *v36 = v63[0];\n                if ( (v34 & 2) != 0 )\n                  *(_WORD *)&v36[v34 - 2] = *(_WORD *)&v63[v34 - 2];\n              }\n              v37 = v32 + 1;\n              v38 = &v30[v35 - 1];\n              if ( v37 >= 8 )\n              {\n                *(_QWORD *)v38 = v64[0];\n                *(_QWORD *)&v38[v37 - 8] = *(_QWORD *)&v63[v37 + 56];\n                v51 = (unsigned __int64)(v38 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v52 = &v38[-v51];\n                v53 = (char *)((char *)v64 - v52);\n                v54 = ((_DWORD)v52 + v37) & 0xFFFFFFF8;\n                if ( v54 >= 8 )\n                {\n                  v55 = v54 & 0xFFFFFFF8;\n                  v56 = 0;\n                  do\n                  {\n                    v57 = v56;\n                    v56 += 8;\n                    *(_QWORD *)(v51 + v57) = *(_QWORD *)&v53[v57];\n                  }\n                  while ( v56 < v55 );\n                }\n              }\n              else if ( (v37 & 4) != 0 )\n              {\n                *(_DWORD *)v38 = v64[0];\n                *(_DWORD *)&v38[v37 - 4] = *(_DWORD *)&v63[v37 + 60];\n              }\n              else if ( v37 )\n              {\n                *v38 = v64[0];\n                if ( (v37 & 2) != 0 )\n                  *(_WORD *)&v38[v37 - 2] = *(_WORD *)&v63[v37 + 62];\n              }\n              v1 = v30;\n              IO_read_ptr = v20->_IO_read_ptr;\n              if ( IO_read_ptr < v20->_IO_read_end )\n                goto LABEL_31;\n            }\n            v39 = v20;\n            v2 = v21;\n            sub_40E240(v39);\n            if ( !v61 )\n              goto LABEL_25;\n            v1[v61] = 0;\n            goto LABEL_26;\n          }\n          close(v17);\n        }\nLABEL_25:\n        v1 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\nLABEL_26:\n        free(v13);\n        goto LABEL_20;\n      }\n      if ( v7[v8 - 1] == 47 )\n      {\n        v11 = v8 + 14;\n        goto LABEL_18;\n      }\n      v14 = v8 + 15;\n      v9 = v8 + 1;\n    }\n    else\n    {\n      v14 = 115LL;\n      v9 = 101LL;\n      v10 = 100LL;\n      v7 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n    }\n    v15 = (char *)malloc(v14);\n    v13 = v15;\n    if ( !v15 )\n      goto LABEL_19;\n    memcpy(v15, v7, v10);\n    v13[v10] = 47;\n    goto LABEL_24;\n  }\nLABEL_4:\n  v3 = *v1;\n  if ( *v1 )\n  {\n    while ( strcmp(v2, v1) && (v3 != 42 || v1[1]) )\n    {\n      v4 = &v1[strlen(v1) + 1];\n      v1 = (char *)&v4[strlen(v4) + 1];\n      v3 = *v1;\n      if ( !*v1 )\n        goto LABEL_11;\n    }\n    v2 = &v1[strlen(v1) + 1];\n  }\nLABEL_11:\n  if ( !*v2 )\n    return \"ASCII\";\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_40E1F0",
            "funcStartAddr": "0x40e1f0",
            "funcEndAddr": "0x40e23e",
            "decompiledFuncCode": "__int64 __fastcall sub_40E1F0(unsigned int fd)\n{\n  __int64 result; // rax\n  unsigned int v2; // r12d\n  int *v3; // rax\n  int v4; // r13d\n  int *v5; // rbp\n\n  if ( fd > 2 )\n    return fd;\n  v2 = sub_40FE80();\n  v3 = __errno_location();\n  v4 = *v3;\n  v5 = v3;\n  close(fd);\n  result = v2;\n  *v5 = v4;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40E240",
            "funcStartAddr": "0x40e240",
            "funcEndAddr": "0x40e2bb",
            "decompiledFuncCode": "int __fastcall sub_40E240(FILE *stream)\n{\n  int *v1; // rax\n  int v2; // r12d\n  int *v3; // rbp\n  int result; // eax\n  int v5; // eax\n\n  if ( fileno(stream) < 0 )\n    return fclose(stream);\n  if ( __freading(stream) )\n  {\n    v5 = fileno(stream);\n    if ( lseek(v5, 0LL, 1) == -1 )\n      return fclose(stream);\n  }\n  if ( !(unsigned int)sub_40E2C0(stream) )\n    return fclose(stream);\n  v1 = __errno_location();\n  v2 = *v1;\n  v3 = v1;\n  result = fclose(stream);\n  if ( v2 )\n  {\n    *v3 = v2;\n    return -1;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40E2C0",
            "funcStartAddr": "0x40e2c0",
            "funcEndAddr": "0x40e300",
            "decompiledFuncCode": "int __fastcall sub_40E2C0(FILE *stream)\n{\n  if ( !stream || !__freading(stream) || (stream->_flags & 0x100) == 0 )\n    return fflush(stream);\n  sub_40E300(stream, 0LL, 1LL);\n  return fflush(stream);\n}\n"
        },
        {
            "funcName": "sub_40E300",
            "funcStartAddr": "0x40e300",
            "funcEndAddr": "0x40e357",
            "decompiledFuncCode": "int __fastcall sub_40E300(FILE *a1, __off_t a2, int a3)\n{\n  __off_t v3; // rax\n  int v5; // eax\n\n  if ( a1->_IO_read_end == a1->_IO_read_ptr && a1->_IO_write_ptr == a1->_IO_write_base && !a1->_IO_save_base )\n  {\n    v5 = fileno(a1);\n    v3 = lseek(v5, a2, a3);\n    if ( v3 != -1 )\n    {\n      a1->_flags &= ~0x10u;\n      a1->_offset = v3;\n      LODWORD(v3) = 0;\n    }\n  }\n  else\n  {\n    LODWORD(v3) = fseeko(a1, a2, a3);\n  }\n  return v3;\n}\n"
        },
        {
            "funcName": "sub_40E360",
            "funcStartAddr": "0x4023d7",
            "funcEndAddr": "0x4023dc",
            "decompiledFuncCode": "char *__fastcall sub_40E360(void *a1, size_t *a2, _BYTE *a3, __int64 a4, double a5)\n{\n  __int64 v7; // rax\n  unsigned __int64 v8; // rax\n  size_t v9; // rdi\n  __int64 *v10; // rax\n  size_t v11; // r12\n  char *v12; // r14\n  _BYTE *v13; // r8\n  char *v14; // rbx\n  size_t v15; // r15\n  _BYTE *v16; // rcx\n  void *v17; // rcx\n  unsigned __int64 v18; // rax\n  size_t v19; // r13\n  bool v20; // dl\n  char *v21; // rax\n  char *v22; // rax\n  void *v23; // rsp\n  char *v24; // rax\n  char v25; // r15\n  __int64 v26; // rax\n  char *v27; // r8\n  long double *v28; // rdx\n  int v29; // eax\n  char v30; // al\n  int v31; // eax\n  char *v32; // r15\n  __int64 v33; // rdi\n  _BYTE *v34; // rsi\n  _BYTE *v35; // rdx\n  _BYTE *v36; // rsi\n  _BYTE *v37; // rdx\n  __int64 v38; // rax\n  char v39; // al\n  __int64 v40; // rax\n  char *v41; // rax\n  __int64 v42; // rax\n  char *v43; // r8\n  int v44; // eax\n  unsigned __int64 v45; // rax\n  char *v46; // r11\n  int *v47; // rax\n  char *v48; // r11\n  unsigned __int64 v49; // rbx\n  unsigned __int64 v50; // r10\n  char *v51; // rdx\n  char *v52; // rcx\n  __int64 v53; // rsi\n  _DWORD *v54; // r8\n  unsigned __int64 v55; // rdx\n  unsigned __int64 v56; // rcx\n  void *v57; // r15\n  unsigned __int64 v59; // rax\n  char *v60; // rax\n  char v62; // fps^1\n  char *v66; // rdx\n  char *v67; // rdi\n  int v68; // r11d\n  __int64 v69; // rcx\n  _DWORD *v70; // rcx\n  char *v71; // rdi\n  unsigned __int64 v72; // r9\n  int v73; // eax\n  int v74; // edx\n  __int64 v75; // rax\n  bool v76; // cf\n  unsigned __int64 v77; // rax\n  bool v78; // bl\n  char *v79; // rax\n  int v80; // ebx\n  __int64 v81; // rax\n  char *v82; // rdi\n  unsigned __int128 v83; // fst7\n  __int64 v84; // rax\n  char *v85; // rdi\n  unsigned __int64 v86; // rax\n  void *v87; // rax\n  char *v88; // rax\n  char *v89; // rcx\n  int v90; // r8d\n  __int16 v91; // ax\n  char *v92; // r15\n  char *v93; // rax\n  char *v94; // rax\n  char *v95; // rax\n  char v96; // al\n  char *v97; // r9\n  size_t v98; // r8\n  unsigned __int64 v99; // r10\n  char *v100; // rdi\n  __int64 v101; // rax\n  char *v102; // r10\n  unsigned __int64 v103; // rax\n  char *v104; // rax\n  char *v105; // rsi\n  char v106; // al\n  size_t v107; // r15\n  size_t v108; // r14\n  bool v109; // r13\n  char *v110; // rax\n  char *v111; // rax\n  __int64 v112; // rax\n  char *v113; // r10\n  char *v114; // rax\n  char *v115; // rax\n  char *v116; // rax\n  __int64 v117; // rsi\n  __int64 v118; // rdx\n  char v119; // al\n  __int64 v120; // rdx\n  char *v121; // rax\n  char *v122; // rax\n  __int64 v123; // rdx\n  char v124; // al\n  char *v125; // rax\n  char *v126; // rsi\n  __int64 v127; // r9\n  __int64 v128; // rdx\n  char *v129; // rax\n  char *v130; // rsi\n  char *v131; // rdi\n  __int64 v132; // rax\n  __int64 v133; // rsi\n  unsigned __int64 v134; // rax\n  char v135; // al\n  __int64 v136; // rsi\n  char v137; // al\n  char *v138; // rax\n  __int64 v139; // rdx\n  char v140; // al\n  char *v141; // rax\n  char *v142; // rax\n  char *v143; // rax\n  void *v144; // rdx\n  char v145; // al\n  _BYTE *v146; // rax\n  char *v147; // rax\n  char v148; // al\n  __int64 v149; // [rsp-8h] [rbp-718h]\n  int *v150; // [rsp+10h] [rbp-700h]\n  int *v151; // [rsp+18h] [rbp-6F8h]\n  __int64 v152; // [rsp+20h] [rbp-6F0h] BYREF\n  unsigned __int64 v153; // [rsp+28h] [rbp-6E8h]\n  char *v154; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v156; // [rsp+40h] [rbp-6D0h]\n  void *v157; // [rsp+48h] [rbp-6C8h]\n  char *v158; // [rsp+50h] [rbp-6C0h]\n  __int64 v159; // [rsp+58h] [rbp-6B8h]\n  _BYTE *v160; // [rsp+60h] [rbp-6B0h]\n  __int64 *v161; // [rsp+68h] [rbp-6A8h]\n  long double v162; // [rsp+70h] [rbp-6A0h]\n  void *v163; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v165; // [rsp+94h] [rbp-67Ch] BYREF\n  unsigned int v166; // [rsp+98h] [rbp-678h]\n  unsigned int v167; // [rsp+9Ch] [rbp-674h]\n  char v168[8]; // [rsp+A0h] [rbp-670h] BYREF\n  void *v169; // [rsp+A8h] [rbp-668h]\n  _BYTE v170[224]; // [rsp+B0h] [rbp-660h] BYREF\n  __int64 v171; // [rsp+190h] [rbp-580h] BYREF\n  void *v172; // [rsp+198h] [rbp-578h]\n  __int64 v173; // [rsp+1A0h] [rbp-570h]\n  __int64 v174; // [rsp+1A8h] [rbp-568h]\n  _BYTE v175[624]; // [rsp+1B0h] [rbp-560h] BYREF\n  char v176[752]; // [rsp+420h] [rbp-2F0h] BYREF\n\n  src = a1;\n  v156 = a2;\n  if ( (int)sub_4101F0(a3, &v171, v168) < 0 )\n    return 0LL;\n  if ( (int)sub_40FFD0(a4, v168) >= 0 )\n  {\n    v7 = v173 + 7;\n    if ( (unsigned __int64)(v173 + 7) <= 6 )\n      v7 = -1LL;\n    v76 = __CFADD__(v174, v7);\n    v8 = v174 + v7;\n    if ( v76 )\n      goto LABEL_112;\n    v9 = v8 + 6;\n    if ( v8 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v9 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v23 = alloca(v8 + 14);\n      v161 = &v152;\n    }\n    else\n    {\n      if ( v8 == -7LL )\n        goto LABEL_112;\n      v10 = (__int64 *)malloc(v9);\n      v161 = v10;\n      if ( !v10 )\n        goto LABEL_112;\n      ptr = v10;\n    }\n    v11 = 0LL;\n    if ( src )\n      v11 = *v156;\n    v12 = (char *)v172;\n    v13 = a3;\n    v14 = (char *)src;\n    v159 = 0LL;\n    v15 = 0LL;\n    v16 = *(_BYTE **)v172;\n    if ( *(_BYTE **)v172 == v13 )\n      goto LABEL_111;\nLABEL_14:\n    v17 = (void *)(v16 - v13);\n    v18 = (unsigned __int64)v17 + v15;\n    v19 = (size_t)v17 + v15;\n    if ( __CFADD__(v17, v15) )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n      v19 = -1LL;\n    }\n    else if ( v11 < v18 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v18 )\n        {\nLABEL_28:\n          v20 = v14 == src;\n          if ( !v14 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v18 <= 0xC )\n      {\n        v11 = 12LL;\n        v20 = v14 == src;\n        if ( !v14 )\n        {\nLABEL_19:\n          v160 = v13;\n          LOBYTE(v162) = v20;\n          v163 = v17;\n          v21 = (char *)malloc(v11);\n          v17 = v163;\n          v13 = v160;\n          if ( !v21 )\n            goto LABEL_88;\n          if ( v15 && LOBYTE(v162) )\n          {\n            *(_QWORD *)&v162 = v160;\n            v22 = (char *)memcpy(v21, v14, v15);\n            v17 = v163;\n            v13 = *(_BYTE **)&v162;\n            v14 = v22;\n          }\n          else\n          {\n            v14 = v21;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v20 )\n        {\n          *(_QWORD *)&v162 = v13;\n          v163 = v17;\n          v24 = (char *)realloc(v14, v11);\n          if ( !v24 )\n            goto LABEL_126;\n          v17 = v163;\n          v13 = *(_BYTE **)&v162;\n          v14 = v24;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v18 == -1LL )\n        goto LABEL_88;\n      v11 = (size_t)v17 + v15;\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v14[v15], v13, (size_t)v17);\n    while ( v171 != v159 )\n    {\n      v25 = v12[72];\n      v26 = *((_QWORD *)v12 + 10);\n      if ( v25 == 37 )\n      {\n        if ( v26 != -1 )\n          goto LABEL_200;\n        v59 = v19 + 1;\n        v15 = v19 + 1;\n        if ( v19 == -1LL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n          v15 = -1LL;\n        }\n        else if ( v11 < v59 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 < v59 )\n              goto LABEL_238;\n          }\n          else\n          {\n            if ( v59 <= 0xC )\n            {\n              v11 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_238:\n            if ( v19 == -2LL )\n              goto LABEL_88;\n            v11 = v19 + 1;\n          }\nLABEL_105:\n          if ( v14 && v14 != src )\n          {\n            v60 = (char *)realloc(v14, v11);\n            if ( v60 )\n            {\n              v14 = v60;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v57 = v14;\n            *(_QWORD *)&v162 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v163) = v14 == src;\n          v95 = (char *)malloc(v11);\n          if ( !v95 )\n            goto LABEL_88;\n          if ( v19 && (_BYTE)v163 )\n            v14 = (char *)memcpy(v95, v14, v19);\n          else\n            v14 = v95;\n        }\nLABEL_109:\n        v14[v19] = 37;\n        goto LABEL_110;\n      }\n      if ( v26 == -1 )\n        goto LABEL_200;\n      v27 = (char *)v169;\n      v28 = (long double *)((char *)v169 + 32 * v26);\n      v29 = *(_DWORD *)v28;\n      LODWORD(v163) = *(_DWORD *)v28;\n      if ( v25 != 110 )\n      {\n        v30 = v25 & 0xDF;\n        if ( ((unsigned __int8)((v25 & 0xDF) - 69) <= 2u || v30 == 65) && (_DWORD)v163 == 12 )\n        {\n          _FST7 = v28[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v66 = (char *)*((_QWORD *)v12 + 3);\n            v67 = (char *)*((_QWORD *)v12 + 4);\n            v68 = *((_DWORD *)v12 + 4);\n            if ( v66 == v67 )\n            {\n              v50 = 0LL;\n            }\n            else\n            {\n              v69 = *((_QWORD *)v12 + 5);\n              if ( v69 == -1 )\n              {\n                v50 = 0LL;\n                v163 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v126 = v66 + 1;\n                  v127 = -1LL;\n                  v128 = *v66 - 48;\n                  if ( v50 <= 0x1999999999999999LL )\n                    v127 = 10 * v50;\n                  v76 = __CFADD__(v127, v128);\n                  v50 = v127 + v128;\n                  v66 = v126;\n                  if ( v76 )\n                  {\n                    if ( v67 == v126 )\n                    {\nLABEL_81:\n                      v50 = (unsigned __int64)v163;\n                      goto LABEL_82;\n                    }\n                    while ( *v66++ != 48 )\n                    {\n                      if ( v67 == v66 )\n                        goto LABEL_81;\n                    }\n                    v50 = -1LL;\n                  }\n                  if ( v67 == v66 )\n                    goto LABEL_82;\n                }\n              }\n              v70 = (char *)v169 + 32 * v69;\n              if ( *v70 != 5 )\n                goto LABEL_200;\n              v50 = (int)v70[4];\n              if ( (v50 & 0x80000000) != 0LL )\n              {\n                v68 |= 2u;\n                v50 = -(__int64)v50;\n              }\n            }\nLABEL_82:\n            v51 = (char *)*((_QWORD *)v12 + 6);\n            v52 = (char *)*((_QWORD *)v12 + 7);\n            if ( v51 != v52 )\n            {\n              v53 = *((_QWORD *)v12 + 8);\n              if ( v53 == -1 )\n              {\n                v129 = v51 + 1;\n                v55 = 0LL;\n                if ( v52 != v129 )\n                {\n                  v130 = v129;\n                  while ( 1 )\n                  {\n                    v131 = v130 + 1;\n                    v132 = *v130 - 48;\n                    v133 = -1LL;\n                    if ( v55 <= 0x1999999999999999LL )\n                      v133 = 10 * v55;\n                    v76 = __CFADD__(v133, v132);\n                    v134 = v133 + v132;\n                    v130 = v131;\n                    v55 = v134;\n                    if ( v76 )\n                    {\n                      if ( v52 == v131 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v130 = v131 + 1;\n                        if ( *v131 == 48 )\n                          break;\n                        if ( v52 == v130 )\n                          goto LABEL_88;\n                        ++v131;\n                      }\n                      v55 = -1LL;\n                    }\n                    if ( v52 == v130 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_375;\n              }\n              v54 = (char *)v169 + 32 * v53;\n              if ( *v54 != 5 )\n                goto LABEL_200;\n              v55 = (int)v54[4];\n              if ( (v55 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v55 )\n                {\n                  v56 = v55 + 12;\n                  if ( v55 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_190:\n                  v86 = v56;\n                  if ( v50 >= v56 )\n                    v86 = v50;\n                  v76 = __CFADD__(v86, 1LL);\n                  v87 = (void *)(v86 + 1);\n                  v163 = v87;\n                  if ( v76 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v87 <= 0x2BC )\n                  {\n                    v89 = v176;\n                  }\n                  else\n                  {\n                    v157 = (void *)v50;\n                    v158 = (char *)v55;\n                    LODWORD(v160) = v68;\n                    v162 = _FST7;\n                    if ( v87 == (void *)-1LL )\n                      goto LABEL_88;\n                    v88 = (char *)malloc((size_t)v87);\n                    v68 = (int)v160;\n                    _FST7 = v162;\n                    v89 = v88;\n                    v55 = (unsigned __int64)v158;\n                    v50 = (unsigned __int64)v157;\n                    if ( !v88 )\n                      goto LABEL_88;\n                  }\n                  v90 = (unsigned __int16)v166;\n                  LOBYTE(v91) = v166;\n                  HIBYTE(v91) = BYTE1(v166) | 3;\n                  LOWORD(v166) = v91;\n                  __asm { fxam }\n                  if ( (v62 & 2) != 0 )\n                  {\n                    *v89 = 45;\n                    _FST7 = -_FST7;\n                    v92 = v89 + 1;\n                  }\n                  else if ( (v68 & 4) != 0 )\n                  {\n                    v92 = v89 + 1;\n                    *v89 = 43;\n                  }\n                  else\n                  {\n                    v92 = v89;\n                    if ( (v68 & 8) != 0 )\n                    {\n                      v92 = v89 + 1;\n                      *v89 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_200;\n                    v97 = v92 + 3;\n                    if ( (unsigned __int8)(v12[72] - 65) > 0x19u )\n                    {\n                      v92[2] = 102;\n                      *(_WORD *)v92 = 28265;\n                    }\n                    else\n                    {\n                      v92[2] = 70;\n                      *(_WORD *)v92 = 20041;\n                    }\n                    v92 = 0LL;\n                    goto LABEL_263;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_200;\n                  v96 = v12[72] & 0xDF;\n                  switch ( v96 )\n                  {\n                    case 'F':\n                      *v92 = 48;\n                      if ( (v68 & 0x10) != 0 || v55 )\n                      {\n                        LODWORD(v153) = v90;\n                        v154 = (char *)v50;\n                        v157 = v89;\n                        v158 = (char *)v55;\n                        LODWORD(v160) = v68;\n                        *(_QWORD *)&v162 = v92 + 2;\n                        v122 = nl_langinfo(0x10000);\n                        v123 = (__int64)v158;\n                        v97 = *(char **)&v162;\n                        v124 = *v122;\n                        LOBYTE(v68) = (_BYTE)v160;\n                        v89 = (char *)v157;\n                        v50 = (unsigned __int64)v154;\n                        LOWORD(v90) = v153;\n                        if ( !v124 )\n                          v124 = 46;\n                        v92[1] = v124;\n                        if ( v123 )\n                        {\n                          v125 = v97;\n                          do\n                            *v125++ = 48;\n                          while ( v125 != &v92[v123 + 2] );\n                          v97 += v123;\n                        }\n                        goto LABEL_263;\n                      }\n                      goto LABEL_262;\n                    case 'E':\n                      *v92 = 48;\n                      if ( (v68 & 0x10) != 0 || (v105 = v92 + 1, v55) )\n                      {\n                        LODWORD(v153) = v90;\n                        v154 = (char *)v50;\n                        v157 = v89;\n                        v158 = (char *)v55;\n                        LODWORD(v160) = v68;\n                        *(_QWORD *)&v162 = v92 + 2;\n                        v138 = nl_langinfo(0x10000);\n                        v139 = (__int64)v158;\n                        v105 = *(char **)&v162;\n                        v140 = *v138;\n                        LOBYTE(v68) = (_BYTE)v160;\n                        v89 = (char *)v157;\n                        v50 = (unsigned __int64)v154;\n                        LOWORD(v90) = v153;\n                        if ( !v140 )\n                          v140 = 46;\n                        v92[1] = v140;\n                        if ( v139 )\n                        {\n                          v141 = v105;\n                          do\n                            *v141++ = 48;\n                          while ( v141 != &v92[v139 + 2] );\n                          v105 += v139;\n                        }\n                      }\n                      v106 = v12[72];\n                      v97 = v105 + 4;\n                      v105[3] = 48;\n                      *v105 = v106;\n                      *(_WORD *)(v105 + 1) = 12331;\n                      goto LABEL_263;\n                    case 'G':\n                      *v92 = 48;\n                      if ( (v68 & 0x10) != 0 )\n                      {\n                        if ( v55 )\n                        {\n                          HIDWORD(v152) = v90;\n                          v153 = v50;\n                          v154 = v92 + 2;\n                          v157 = v89;\n                          LODWORD(v158) = v68;\n                          v160 = (_BYTE *)v55;\n                          *(_QWORD *)&v162 = v55 - 1;\n                          v116 = nl_langinfo(0x10000);\n                          v117 = *(_QWORD *)&v162;\n                          v118 = (__int64)v160;\n                          v119 = *v116;\n                          LOBYTE(v68) = (_BYTE)v158;\n                          v89 = (char *)v157;\n                          v97 = v154;\n                          v50 = v153;\n                          LOWORD(v90) = WORD2(v152);\n                          if ( !v119 )\n                            v119 = 46;\n                          v92[1] = v119;\n                          if ( v117 )\n                          {\n                            v120 = (__int64)&v92[v118 + 1];\n                            v121 = v97;\n                            do\n                              *v121++ = 48;\n                            while ( v121 != (char *)v120 );\n                            v97 += v117;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v154) = v90;\n                          v157 = (void *)v50;\n                          v158 = v92 + 2;\n                          v160 = v89;\n                          LODWORD(v162) = v68;\n                          v147 = nl_langinfo(0x10000);\n                          LOBYTE(v68) = LOBYTE(v162);\n                          v89 = v160;\n                          v148 = *v147;\n                          v97 = v158;\n                          v50 = (unsigned __int64)v157;\n                          LOWORD(v90) = (_WORD)v154;\n                          if ( !v148 )\n                            v148 = 46;\n                          v92[1] = v148;\n                        }\n                        goto LABEL_263;\n                      }\nLABEL_262:\n                      v97 = v92 + 1;\n                      goto LABEL_263;\n                  }\n                  if ( v96 != 65 )\n                    goto LABEL_200;\n                  *v92 = 48;\n                  *(_QWORD *)&v162 = v92 + 2;\n                  v135 = v12[72];\n                  v92[2] = 48;\n                  v92[1] = v135 + 23;\n                  if ( (v68 & 0x10) != 0 || (v136 = (__int64)(v92 + 3), v55) )\n                  {\n                    HIDWORD(v152) = v90;\n                    v153 = v50;\n                    v154 = v89;\n                    v157 = (void *)v55;\n                    LODWORD(v158) = v68;\n                    v160 = v92 + 4;\n                    v143 = nl_langinfo(0x10000);\n                    v144 = v157;\n                    v136 = (__int64)v160;\n                    v145 = *v143;\n                    LOBYTE(v68) = (_BYTE)v158;\n                    v89 = v154;\n                    v50 = v153;\n                    LOWORD(v90) = WORD2(v152);\n                    if ( !v145 )\n                      v145 = 46;\n                    v92[3] = v145;\n                    if ( v144 )\n                    {\n                      v146 = (_BYTE *)v136;\n                      do\n                        *v146++ = 48;\n                      while ( v146 != (_BYTE *)v144 + (_QWORD)v92 + 4 );\n                      v136 += (__int64)v144;\n                    }\n                  }\n                  v137 = v12[72];\n                  v97 = (char *)(v136 + 3);\n                  *(_WORD *)(v136 + 1) = 12331;\n                  v92 = *(char **)&v162;\n                  *(_BYTE *)v136 = v137 + 15;\nLABEL_263:\n                  LOWORD(v166) = v90;\n                  v98 = v97 - v89;\n                  if ( v50 > v97 - v89 )\n                  {\n                    v99 = v50 - v98;\n                    v100 = &v97[v99];\n                    v98 = &v97[v99] - v89;\n                    if ( (v68 & 2) != 0 )\n                    {\n                      if ( v99 )\n                      {\n                        do\n                          *v97++ = 32;\n                        while ( v100 != v97 );\n                      }\n                    }\n                    else if ( (v68 & 0x20) != 0 && v92 )\n                    {\n                      if ( v92 >= v97 )\n                      {\n                        v92 = v97;\n                      }\n                      else\n                      {\n                        v101 = -1LL;\n                        do\n                        {\n                          v100[v101] = v97[v101];\n                          --v101;\n                        }\n                        while ( v101 != v92 - 1 - v97 );\n                      }\n                      if ( v99 )\n                      {\n                        v102 = &v92[v99];\n                        do\n                          *v92++ = 48;\n                        while ( v92 != v102 );\n                      }\n                    }\n                    else\n                    {\n                      v112 = -1LL;\n                      if ( v89 < v97 )\n                      {\n                        do\n                        {\n                          v100[v112] = v97[v112];\n                          --v112;\n                        }\n                        while ( v89 - 1 - v97 != v112 );\n                        v97 = v89;\n                      }\n                      if ( v99 )\n                      {\n                        v113 = &v97[v99];\n                        do\n                          *v97++ = 32;\n                        while ( v97 != v113 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v163 <= v98 )\n                    goto LABEL_200;\n                  v103 = v98 + v19;\n                  v15 = v98 + v19;\n                  if ( v11 - v19 <= v98 )\n                  {\n                    if ( __CFADD__(v98, v19) )\n                    {\n                      if ( v11 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v11 < v103 )\n                    {\n                      if ( v11 )\n                      {\n                        if ( (v11 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v11 *= 2LL;\n                        if ( v11 < v103 )\n                          goto LABEL_373;\n                      }\n                      else\n                      {\n                        if ( v103 <= 0xC )\n                        {\n                          v11 = 12LL;\n                          goto LABEL_280;\n                        }\nLABEL_373:\n                        if ( v103 == -1LL )\n                          goto LABEL_88;\n                        v11 = v98 + v19;\n                      }\nLABEL_280:\n                      if ( !v14 || v14 == src )\n                      {\n                        LOBYTE(v160) = v14 == src;\n                        *(_QWORD *)&v162 = v98;\n                        v163 = v89;\n                        v114 = (char *)malloc(v11);\n                        v89 = (char *)v163;\n                        v98 = *(_QWORD *)&v162;\n                        if ( !v114 )\n                          goto LABEL_88;\n                        if ( v19 && (_BYTE)v160 )\n                        {\n                          v115 = (char *)memcpy(v114, v14, v19);\n                          v89 = (char *)v163;\n                          v98 = *(_QWORD *)&v162;\n                          v14 = v115;\n                        }\n                        else\n                        {\n                          v14 = v114;\n                        }\n                      }\n                      else\n                      {\n                        *(_QWORD *)&v162 = v98;\n                        v163 = v89;\n                        v104 = (char *)realloc(v14, v11);\n                        if ( !v104 )\n                          goto LABEL_88;\n                        v89 = (char *)v163;\n                        v98 = *(_QWORD *)&v162;\n                        v14 = v104;\n                      }\n                    }\n                  }\n                  v163 = v89;\n                  memcpy(&v14[v19], v89, v98);\n                  if ( v163 != v176 )\n                    free(v163);\n                  goto LABEL_110;\n                }\nLABEL_375:\n                v56 = 12LL;\n                goto LABEL_190;\n              }\n            }\n            v56 = 12LL;\n            if ( v30 != 65 )\n              v56 = 18LL;\n            v55 = 0LL;\n            if ( v30 != 65 )\n              v55 = 6LL;\n            goto LABEL_190;\n          }\n        }\n        v31 = *((_DWORD *)v12 + 4);\n        v32 = (char *)v161 + 1;\n        *(_BYTE *)v161 = 37;\n        if ( (v31 & 1) != 0 )\n        {\n          v33 = (__int64)v161;\n          *((_BYTE *)v161 + 1) = 39;\n          v32 = (char *)(v33 + 2);\n        }\n        if ( (v31 & 2) != 0 )\n          *v32++ = 45;\n        if ( (v31 & 4) != 0 )\n          *v32++ = 43;\n        if ( (v31 & 8) != 0 )\n          *v32++ = 32;\n        if ( (v31 & 0x10) != 0 )\n          *v32++ = 35;\n        if ( (v31 & 0x40) != 0 )\n          *v32++ = 73;\n        if ( (v31 & 0x20) != 0 )\n          *v32++ = 48;\n        v34 = (_BYTE *)*((_QWORD *)v12 + 3);\n        v35 = (_BYTE *)*((_QWORD *)v12 + 4);\n        if ( v34 != v35 )\n        {\n          v160 = v27;\n          *(_QWORD *)&v162 = v35 - v34;\n          memcpy(v32, v34, v35 - v34);\n          v27 = v160;\n          v32 += *(_QWORD *)&v162;\n        }\n        v36 = (_BYTE *)*((_QWORD *)v12 + 6);\n        v37 = (_BYTE *)*((_QWORD *)v12 + 7);\n        if ( v36 != v37 )\n        {\n          v160 = v27;\n          *(_QWORD *)&v162 = v37 - v36;\n          memcpy(v32, v36, v37 - v36);\n          v27 = v160;\n          v32 += *(_QWORD *)&v162;\n        }\n        if ( (unsigned int)v163 <= 0x10 )\n        {\n          v38 = 1LL << (char)v163;\n          if ( ((1LL << (char)v163) & 0x14180) != 0 )\n            goto LABEL_125;\n          if ( (v38 & 0x1000) != 0 )\n          {\n            *v32++ = 76;\n          }\n          else\n          {\n            if ( (v38 & 0x600) == 0 )\n              goto LABEL_62;\n            *v32++ = 108;\nLABEL_125:\n            *v32++ = 108;\n          }\n        }\nLABEL_62:\n        v39 = v12[72];\n        v32[1] = 0;\n        *v32 = v39;\n        v40 = *((_QWORD *)v12 + 5);\n        if ( v40 != -1 )\n        {\n          v41 = &v27[32 * v40];\n          if ( *(_DWORD *)v41 == 5 )\n          {\n            LODWORD(v160) = 1;\n            v166 = *((_DWORD *)v41 + 4);\n            goto LABEL_65;\n          }\nLABEL_200:\n          abort();\n        }\n        LODWORD(v160) = 0;\nLABEL_65:\n        v42 = *((_QWORD *)v12 + 8);\n        if ( v42 != -1 )\n        {\n          v43 = &v27[32 * v42];\n          if ( *(_DWORD *)v43 != 5 )\n            goto LABEL_200;\n          v44 = (int)v160;\n          *(&v166 + (unsigned int)v160) = *((_DWORD *)v43 + 4);\n          LODWORD(v160) = v44 + 1;\n        }\n        v45 = v19 + 2;\n        if ( v19 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v11 < v45 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 >= v45 )\n              goto LABEL_73;\n          }\n          else if ( v45 <= 0xC )\n          {\n            v11 = 12LL;\nLABEL_73:\n            if ( v14 && v14 != src )\n            {\n              v46 = (char *)realloc(v14, v11);\n              if ( v46 )\n                goto LABEL_76;\nLABEL_88:\n              v57 = v14;\n              *(_QWORD *)&v162 = __errno_location();\nLABEL_89:\n              if ( v57 == src || !v57 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v172 != v175 )\n                    free(v172);\n                  if ( v169 != v170 )\n                    free(v169);\n                  v14 = 0LL;\n                  **(_DWORD **)&v162 = 12;\n                  return v14;\n                }\nLABEL_112:\n                *(_QWORD *)&v162 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v57);\n              goto LABEL_91;\n            }\n            LOBYTE(v162) = v14 == src;\n            v94 = (char *)malloc(v11);\n            v46 = v94;\n            if ( !v94 )\n              goto LABEL_88;\n            if ( v19 && LOBYTE(v162) )\n              v46 = (char *)memcpy(v94, v14, v19);\nLABEL_76:\n            v46[v19] = 0;\n            v158 = v46;\n            v47 = __errno_location();\n            v48 = v158;\n            v158 = v32;\n            *(_QWORD *)&v162 = v47;\n            LODWORD(v154) = *v47;\n            while ( 2 )\n            {\n              v49 = 0x7FFFFFFFLL;\n              v165 = -1;\n              **(_DWORD **)&v162 = 0;\n              if ( v11 - v19 <= 0x7FFFFFFF )\n                v49 = v11 - v19;\n              switch ( (int)v163 )\n              {\n                case 1:\n                  v72 = (unsigned int)*((char *)v169 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 2:\n                  v72 = *((unsigned __int8 *)v169 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 3:\n                  v72 = (unsigned int)*((__int16 *)v169 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 4:\n                  v72 = *((unsigned __int16 *)v169 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 5:\n                case 6:\n                case 13:\n                case 14:\n                  v72 = *((unsigned int *)v169 + 8 * *((_QWORD *)v12 + 10) + 4);\nLABEL_150:\n                  v71 = &v48[v19];\n                  v157 = v48;\n                  if ( (_DWORD)v160 != 1 )\n                  {\n                    if ( (_DWORD)v160 != 2 )\n                    {\n                      v150 = &v165;\n                      goto LABEL_153;\n                    }\n                    goto LABEL_209;\n                  }\n                  v151 = &v165;\n                  v150 = (int *)v72;\n                  break;\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                case 15:\n                case 16:\n                case 17:\n                  v71 = &v48[v19];\n                  v72 = *((_QWORD *)v169 + 4 * *((_QWORD *)v12 + 10) + 2);\n                  v157 = v48;\n                  if ( (_DWORD)v160 != 1 )\n                  {\n                    if ( (_DWORD)v160 != 2 )\n                    {\n                      v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v161, v72, a5, &v165, v151);\nLABEL_131:\n                      v48 = (char *)v157;\n                      goto LABEL_132;\n                    }\nLABEL_209:\n                    v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v161, v166, a5, v167, v72);\nLABEL_210:\n                    v48 = (char *)v157;\nLABEL_132:\n                    v74 = v165;\n                    if ( v165 < 0 )\n                    {\nLABEL_154:\n                      if ( v158[1] )\n                      {\n                        v158[1] = 0;\n                        continue;\n                      }\n                      if ( v73 < 0 )\n                      {\n                        v80 = **(_DWORD **)&v162;\n                        if ( !**(_DWORD **)&v162 )\n                        {\n                          v80 = 84;\n                          if ( (v12[72] & 0xEF) != 99 )\n                            v80 = 22;\n                        }\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v172 != v175 )\n                          free(v172);\n                        if ( v169 != v170 )\n                          free(v169);\n                        **(_DWORD **)&v162 = v80;\n                        return 0LL;\n                      }\nLABEL_136:\n                      v165 = v73;\n                      v74 = v73;\nLABEL_137:\n                      if ( (unsigned int)(v74 + 1) < v49 )\n                      {\n                        v14 = v48;\n                        v15 = v19 + v74;\n                        **(_DWORD **)&v162 = (_DWORD)v154;\n                        goto LABEL_110;\n                      }\n                      if ( v11 - v19 > 0x7FFFFFFE )\n                      {\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v172 != v175 )\n                          free(v172);\n                        if ( v169 != v170 )\n                          free(v169);\n                        v14 = 0LL;\n                        **(_DWORD **)&v162 = 75;\n                        return v14;\n                      }\n                      v75 = (unsigned int)(v74 + 2);\n                      v76 = __CFADD__(v19, v75);\n                      v77 = v19 + v75;\n                      if ( (v11 & 0x8000000000000000LL) != 0LL )\n                      {\n                        if ( v11 != -1LL )\n                          goto LABEL_202;\n                      }\n                      else\n                      {\n                        if ( v76 )\n                          goto LABEL_202;\n                        if ( 2 * v11 >= v77 )\n                          v77 = 2 * v11;\n                        if ( v11 < v77 )\n                        {\n                          v11 *= 2LL;\n                          if ( v11 < v77 )\n                          {\n                            if ( v77 == -1LL )\n                            {\nLABEL_202:\n                              v57 = v48;\n                              goto LABEL_89;\n                            }\n                            v11 = v77;\n                          }\n                          v78 = v48 == src;\n                          if ( !v48 || v48 == src )\n                          {\n                            v157 = v48;\n                            v93 = (char *)malloc(v11);\n                            v48 = (char *)v157;\n                            if ( !v93 )\n                              goto LABEL_202;\n                            if ( v19 && v78 )\n                              v48 = (char *)memcpy(v93, v157, v19);\n                            else\n                              v48 = v93;\n                          }\n                          else\n                          {\n                            v157 = v48;\n                            v79 = (char *)realloc(v48, v11);\n                            v48 = (char *)v157;\n                            if ( !v79 )\n                              goto LABEL_202;\n                            v48 = v79;\n                          }\n                        }\n                      }\n                      continue;\n                    }\nLABEL_133:\n                    if ( v74 < v49 && v48[v74 + v19] )\n                      goto LABEL_200;\n                    if ( v74 >= v73 )\n                      goto LABEL_137;\n                    goto LABEL_136;\n                  }\n                  v151 = &v165;\n                  v150 = (int *)v72;\n                  break;\n                case 11:\n                  v84 = *((_QWORD *)v12 + 10);\n                  v85 = &v48[v19];\n                  v157 = v48;\n                  a5 = *((double *)v169 + 4 * v84 + 2);\n                  if ( (_DWORD)v160 == 1 )\n                  {\n                    v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v161, v166, a5, &v165, v151);\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v160 != 2 )\n                    {\n                      v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v161, &v165, a5, v152, v153);\n                      v48 = (char *)v157;\n                      goto LABEL_132;\n                    }\n                    v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v161, v166, a5, v167, &v165);\n                  }\n                  v48 = (char *)v157;\n                  goto LABEL_132;\n                case 12:\n                  v81 = *((_QWORD *)v12 + 10);\n                  v82 = &v48[v19];\n                  v157 = v48;\n                  v83 = *((unsigned __int128 *)v169 + 2 * v81 + 1);\n                  if ( (_DWORD)v160 == 1 )\n                  {\n                    v73 = __snprintf_chk(v82, v49, 1LL, -1LL, v161, v166, a5, v83, v83 >> 64);\n                    goto LABEL_210;\n                  }\n                  if ( (_DWORD)v160 != 2 )\n                  {\n                    v73 = __snprintf_chk(v82, v49, 1LL, -1LL, v161, &v165, a5, v83, v83 >> 64);\n                    goto LABEL_131;\n                  }\n                  v73 = __snprintf_chk(v82, v49, 1LL, -1LL, v161, v166, a5, v167, v149);\n                  v48 = (char *)v157;\n                  goto LABEL_132;\n                default:\n                  goto LABEL_408;\n              }\n              break;\n            }\n            v72 = v166;\nLABEL_153:\n            v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v161, v72, a5, v150, v151);\n            v74 = v165;\n            v48 = (char *)v157;\n            if ( v165 < 0 )\n              goto LABEL_154;\n            goto LABEL_133;\n          }\n          if ( v19 != -3LL )\n          {\n            v11 = v19 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v46 = v14;\n        goto LABEL_76;\n      }\n      switch ( v29 )\n      {\n        case 18:\n          v15 = v19;\n          **((_BYTE **)v28 + 2) = v19;\n          break;\n        case 19:\n          v15 = v19;\n          **((_WORD **)v28 + 2) = v19;\n          break;\n        case 20:\n          v15 = v19;\n          **((_DWORD **)v28 + 2) = v19;\n          break;\n        case 21:\n        case 22:\n          v15 = v19;\n          **((_QWORD **)v28 + 2) = v19;\n          break;\n        default:\nLABEL_408:\n          abort();\n      }\nLABEL_110:\n      v13 = (_BYTE *)*((_QWORD *)v12 + 1);\n      v12 += 88;\n      v16 = *(_BYTE **)v12;\n      ++v159;\n      if ( v16 != v13 )\n        goto LABEL_14;\nLABEL_111:\n      v19 = v15;\n    }\n    v107 = v19;\n    v108 = v19 + 1;\n    if ( v19 == -1LL )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v11 < v108 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v108 )\n        {\nLABEL_303:\n          v109 = v14 == src;\n          if ( !v14 || v14 == src )\n          {\n            v142 = (char *)malloc(v11);\n            if ( !v142 )\n              goto LABEL_88;\n            if ( v107 && v109 )\n              v14 = (char *)memcpy(v142, v14, v107);\n            else\n              v14 = v142;\n          }\n          else\n          {\n            v110 = (char *)realloc(v14, v11);\n            if ( !v110 )\n              goto LABEL_126;\n            v14 = v110;\n          }\n          goto LABEL_307;\n        }\n      }\n      else if ( v108 <= 0xC )\n      {\n        v11 = 12LL;\n        goto LABEL_303;\n      }\n      if ( v19 == -2LL )\n        goto LABEL_88;\n      v11 = v19 + 1;\n      goto LABEL_303;\n    }\nLABEL_307:\n    v14[v107] = 0;\n    if ( v11 > v108 && v14 != src )\n    {\n      v111 = (char *)realloc(v14, v108);\n      if ( v111 )\n        v14 = v111;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v172 != v175 )\n      free(v172);\n    if ( v169 != v170 )\n      free(v169);\n    *v156 = v107;\n    return v14;\n  }\n  if ( v172 != v175 )\n    free(v172);\n  if ( v169 != v170 )\n    free(v169);\n  v14 = 0LL;\n  *__errno_location() = 22;\n  return v14;\n}\n\nchar *__fastcall sub_40E360(void *a1, size_t *a2, _BYTE *a3, __int64 a4, double a5)\n{\n  __int64 v7; // rax\n  unsigned __int64 v8; // rax\n  size_t v9; // rdi\n  __int64 *v10; // rax\n  size_t v11; // r12\n  char *v12; // r14\n  _BYTE *v13; // r8\n  char *v14; // rbx\n  size_t v15; // r15\n  _BYTE *v16; // rcx\n  void *v17; // rcx\n  unsigned __int64 v18; // rax\n  size_t v19; // r13\n  bool v20; // dl\n  char *v21; // rax\n  char *v22; // rax\n  void *v23; // rsp\n  char *v24; // rax\n  char v25; // r15\n  __int64 v26; // rax\n  char *v27; // r8\n  long double *v28; // rdx\n  int v29; // eax\n  char v30; // al\n  int v31; // eax\n  char *v32; // r15\n  __int64 v33; // rdi\n  _BYTE *v34; // rsi\n  _BYTE *v35; // rdx\n  _BYTE *v36; // rsi\n  _BYTE *v37; // rdx\n  __int64 v38; // rax\n  char v39; // al\n  __int64 v40; // rax\n  char *v41; // rax\n  __int64 v42; // rax\n  char *v43; // r8\n  int v44; // eax\n  unsigned __int64 v45; // rax\n  char *v46; // r11\n  int *v47; // rax\n  char *v48; // r11\n  unsigned __int64 v49; // rbx\n  unsigned __int64 v50; // r10\n  char *v51; // rdx\n  char *v52; // rcx\n  __int64 v53; // rsi\n  _DWORD *v54; // r8\n  unsigned __int64 v55; // rdx\n  unsigned __int64 v56; // rcx\n  void *v57; // r15\n  unsigned __int64 v59; // rax\n  char *v60; // rax\n  char v62; // fps^1\n  char *v66; // rdx\n  char *v67; // rdi\n  int v68; // r11d\n  __int64 v69; // rcx\n  _DWORD *v70; // rcx\n  char *v71; // rdi\n  unsigned __int64 v72; // r9\n  int v73; // eax\n  int v74; // edx\n  __int64 v75; // rax\n  bool v76; // cf\n  unsigned __int64 v77; // rax\n  bool v78; // bl\n  char *v79; // rax\n  int v80; // ebx\n  __int64 v81; // rax\n  char *v82; // rdi\n  unsigned __int128 v83; // fst7\n  __int64 v84; // rax\n  char *v85; // rdi\n  unsigned __int64 v86; // rax\n  void *v87; // rax\n  char *v88; // rax\n  char *v89; // rcx\n  int v90; // r8d\n  __int16 v91; // ax\n  char *v92; // r15\n  char *v93; // rax\n  char *v94; // rax\n  char *v95; // rax\n  char v96; // al\n  char *v97; // r9\n  size_t v98; // r8\n  unsigned __int64 v99; // r10\n  char *v100; // rdi\n  __int64 v101; // rax\n  char *v102; // r10\n  unsigned __int64 v103; // rax\n  char *v104; // rax\n  char *v105; // rsi\n  char v106; // al\n  size_t v107; // r15\n  size_t v108; // r14\n  bool v109; // r13\n  char *v110; // rax\n  char *v111; // rax\n  __int64 v112; // rax\n  char *v113; // r10\n  char *v114; // rax\n  char *v115; // rax\n  char *v116; // rax\n  __int64 v117; // rsi\n  __int64 v118; // rdx\n  char v119; // al\n  __int64 v120; // rdx\n  char *v121; // rax\n  char *v122; // rax\n  __int64 v123; // rdx\n  char v124; // al\n  char *v125; // rax\n  char *v126; // rsi\n  __int64 v127; // r9\n  __int64 v128; // rdx\n  char *v129; // rax\n  char *v130; // rsi\n  char *v131; // rdi\n  __int64 v132; // rax\n  __int64 v133; // rsi\n  unsigned __int64 v134; // rax\n  char v135; // al\n  __int64 v136; // rsi\n  char v137; // al\n  char *v138; // rax\n  __int64 v139; // rdx\n  char v140; // al\n  char *v141; // rax\n  char *v142; // rax\n  char *v143; // rax\n  void *v144; // rdx\n  char v145; // al\n  _BYTE *v146; // rax\n  char *v147; // rax\n  char v148; // al\n  __int64 v149; // [rsp-8h] [rbp-718h]\n  int *v150; // [rsp+10h] [rbp-700h]\n  int *v151; // [rsp+18h] [rbp-6F8h]\n  __int64 v152; // [rsp+20h] [rbp-6F0h] BYREF\n  unsigned __int64 v153; // [rsp+28h] [rbp-6E8h]\n  char *v154; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v156; // [rsp+40h] [rbp-6D0h]\n  void *v157; // [rsp+48h] [rbp-6C8h]\n  char *v158; // [rsp+50h] [rbp-6C0h]\n  __int64 v159; // [rsp+58h] [rbp-6B8h]\n  _BYTE *v160; // [rsp+60h] [rbp-6B0h]\n  __int64 *v161; // [rsp+68h] [rbp-6A8h]\n  long double v162; // [rsp+70h] [rbp-6A0h]\n  void *v163; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v165; // [rsp+94h] [rbp-67Ch] BYREF\n  unsigned int v166; // [rsp+98h] [rbp-678h]\n  unsigned int v167; // [rsp+9Ch] [rbp-674h]\n  char v168[8]; // [rsp+A0h] [rbp-670h] BYREF\n  void *v169; // [rsp+A8h] [rbp-668h]\n  _BYTE v170[224]; // [rsp+B0h] [rbp-660h] BYREF\n  __int64 v171; // [rsp+190h] [rbp-580h] BYREF\n  void *v172; // [rsp+198h] [rbp-578h]\n  __int64 v173; // [rsp+1A0h] [rbp-570h]\n  __int64 v174; // [rsp+1A8h] [rbp-568h]\n  _BYTE v175[624]; // [rsp+1B0h] [rbp-560h] BYREF\n  char v176[752]; // [rsp+420h] [rbp-2F0h] BYREF\n\n  src = a1;\n  v156 = a2;\n  if ( (int)sub_4101F0(a3, &v171, v168) < 0 )\n    return 0LL;\n  if ( (int)sub_40FFD0(a4, v168) >= 0 )\n  {\n    v7 = v173 + 7;\n    if ( (unsigned __int64)(v173 + 7) <= 6 )\n      v7 = -1LL;\n    v76 = __CFADD__(v174, v7);\n    v8 = v174 + v7;\n    if ( v76 )\n      goto LABEL_112;\n    v9 = v8 + 6;\n    if ( v8 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v9 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v23 = alloca(v8 + 14);\n      v161 = &v152;\n    }\n    else\n    {\n      if ( v8 == -7LL )\n        goto LABEL_112;\n      v10 = (__int64 *)malloc(v9);\n      v161 = v10;\n      if ( !v10 )\n        goto LABEL_112;\n      ptr = v10;\n    }\n    v11 = 0LL;\n    if ( src )\n      v11 = *v156;\n    v12 = (char *)v172;\n    v13 = a3;\n    v14 = (char *)src;\n    v159 = 0LL;\n    v15 = 0LL;\n    v16 = *(_BYTE **)v172;\n    if ( *(_BYTE **)v172 == v13 )\n      goto LABEL_111;\nLABEL_14:\n    v17 = (void *)(v16 - v13);\n    v18 = (unsigned __int64)v17 + v15;\n    v19 = (size_t)v17 + v15;\n    if ( __CFADD__(v17, v15) )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n      v19 = -1LL;\n    }\n    else if ( v11 < v18 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v18 )\n        {\nLABEL_28:\n          v20 = v14 == src;\n          if ( !v14 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v18 <= 0xC )\n      {\n        v11 = 12LL;\n        v20 = v14 == src;\n        if ( !v14 )\n        {\nLABEL_19:\n          v160 = v13;\n          LOBYTE(v162) = v20;\n          v163 = v17;\n          v21 = (char *)malloc(v11);\n          v17 = v163;\n          v13 = v160;\n          if ( !v21 )\n            goto LABEL_88;\n          if ( v15 && LOBYTE(v162) )\n          {\n            *(_QWORD *)&v162 = v160;\n            v22 = (char *)memcpy(v21, v14, v15);\n            v17 = v163;\n            v13 = *(_BYTE **)&v162;\n            v14 = v22;\n          }\n          else\n          {\n            v14 = v21;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v20 )\n        {\n          *(_QWORD *)&v162 = v13;\n          v163 = v17;\n          v24 = (char *)realloc(v14, v11);\n          if ( !v24 )\n            goto LABEL_126;\n          v17 = v163;\n          v13 = *(_BYTE **)&v162;\n          v14 = v24;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v18 == -1LL )\n        goto LABEL_88;\n      v11 = (size_t)v17 + v15;\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v14[v15], v13, (size_t)v17);\n    while ( v171 != v159 )\n    {\n      v25 = v12[72];\n      v26 = *((_QWORD *)v12 + 10);\n      if ( v25 == 37 )\n      {\n        if ( v26 != -1 )\n          goto LABEL_200;\n        v59 = v19 + 1;\n        v15 = v19 + 1;\n        if ( v19 == -1LL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n          v15 = -1LL;\n        }\n        else if ( v11 < v59 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 < v59 )\n              goto LABEL_238;\n          }\n          else\n          {\n            if ( v59 <= 0xC )\n            {\n              v11 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_238:\n            if ( v19 == -2LL )\n              goto LABEL_88;\n            v11 = v19 + 1;\n          }\nLABEL_105:\n          if ( v14 && v14 != src )\n          {\n            v60 = (char *)realloc(v14, v11);\n            if ( v60 )\n            {\n              v14 = v60;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v57 = v14;\n            *(_QWORD *)&v162 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v163) = v14 == src;\n          v95 = (char *)malloc(v11);\n          if ( !v95 )\n            goto LABEL_88;\n          if ( v19 && (_BYTE)v163 )\n            v14 = (char *)memcpy(v95, v14, v19);\n          else\n            v14 = v95;\n        }\nLABEL_109:\n        v14[v19] = 37;\n        goto LABEL_110;\n      }\n      if ( v26 == -1 )\n        goto LABEL_200;\n      v27 = (char *)v169;\n      v28 = (long double *)((char *)v169 + 32 * v26);\n      v29 = *(_DWORD *)v28;\n      LODWORD(v163) = *(_DWORD *)v28;\n      if ( v25 != 110 )\n      {\n        v30 = v25 & 0xDF;\n        if ( ((unsigned __int8)((v25 & 0xDF) - 69) <= 2u || v30 == 65) && (_DWORD)v163 == 12 )\n        {\n          _FST7 = v28[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v66 = (char *)*((_QWORD *)v12 + 3);\n            v67 = (char *)*((_QWORD *)v12 + 4);\n            v68 = *((_DWORD *)v12 + 4);\n            if ( v66 == v67 )\n            {\n              v50 = 0LL;\n            }\n            else\n            {\n              v69 = *((_QWORD *)v12 + 5);\n              if ( v69 == -1 )\n              {\n                v50 = 0LL;\n                v163 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v126 = v66 + 1;\n                  v127 = -1LL;\n                  v128 = *v66 - 48;\n                  if ( v50 <= 0x1999999999999999LL )\n                    v127 = 10 * v50;\n                  v76 = __CFADD__(v127, v128);\n                  v50 = v127 + v128;\n                  v66 = v126;\n                  if ( v76 )\n                  {\n                    if ( v67 == v126 )\n                    {\nLABEL_81:\n                      v50 = (unsigned __int64)v163;\n                      goto LABEL_82;\n                    }\n                    while ( *v66++ != 48 )\n                    {\n                      if ( v67 == v66 )\n                        goto LABEL_81;\n                    }\n                    v50 = -1LL;\n                  }\n                  if ( v67 == v66 )\n                    goto LABEL_82;\n                }\n              }\n              v70 = (char *)v169 + 32 * v69;\n              if ( *v70 != 5 )\n                goto LABEL_200;\n              v50 = (int)v70[4];\n              if ( (v50 & 0x80000000) != 0LL )\n              {\n                v68 |= 2u;\n                v50 = -(__int64)v50;\n              }\n            }\nLABEL_82:\n            v51 = (char *)*((_QWORD *)v12 + 6);\n            v52 = (char *)*((_QWORD *)v12 + 7);\n            if ( v51 != v52 )\n            {\n              v53 = *((_QWORD *)v12 + 8);\n              if ( v53 == -1 )\n              {\n                v129 = v51 + 1;\n                v55 = 0LL;\n                if ( v52 != v129 )\n                {\n                  v130 = v129;\n                  while ( 1 )\n                  {\n                    v131 = v130 + 1;\n                    v132 = *v130 - 48;\n                    v133 = -1LL;\n                    if ( v55 <= 0x1999999999999999LL )\n                      v133 = 10 * v55;\n                    v76 = __CFADD__(v133, v132);\n                    v134 = v133 + v132;\n                    v130 = v131;\n                    v55 = v134;\n                    if ( v76 )\n                    {\n                      if ( v52 == v131 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v130 = v131 + 1;\n                        if ( *v131 == 48 )\n                          break;\n                        if ( v52 == v130 )\n                          goto LABEL_88;\n                        ++v131;\n                      }\n                      v55 = -1LL;\n                    }\n                    if ( v52 == v130 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_375;\n              }\n              v54 = (char *)v169 + 32 * v53;\n              if ( *v54 != 5 )\n                goto LABEL_200;\n              v55 = (int)v54[4];\n              if ( (v55 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v55 )\n                {\n                  v56 = v55 + 12;\n                  if ( v55 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_190:\n                  v86 = v56;\n                  if ( v50 >= v56 )\n                    v86 = v50;\n                  v76 = __CFADD__(v86, 1LL);\n                  v87 = (void *)(v86 + 1);\n                  v163 = v87;\n                  if ( v76 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v87 <= 0x2BC )\n                  {\n                    v89 = v176;\n                  }\n                  else\n                  {\n                    v157 = (void *)v50;\n                    v158 = (char *)v55;\n                    LODWORD(v160) = v68;\n                    v162 = _FST7;\n                    if ( v87 == (void *)-1LL )\n                      goto LABEL_88;\n                    v88 = (char *)malloc((size_t)v87);\n                    v68 = (int)v160;\n                    _FST7 = v162;\n                    v89 = v88;\n                    v55 = (unsigned __int64)v158;\n                    v50 = (unsigned __int64)v157;\n                    if ( !v88 )\n                      goto LABEL_88;\n                  }\n                  v90 = (unsigned __int16)v166;\n                  LOBYTE(v91) = v166;\n                  HIBYTE(v91) = BYTE1(v166) | 3;\n                  LOWORD(v166) = v91;\n                  __asm { fxam }\n                  if ( (v62 & 2) != 0 )\n                  {\n                    *v89 = 45;\n                    _FST7 = -_FST7;\n                    v92 = v89 + 1;\n                  }\n                  else if ( (v68 & 4) != 0 )\n                  {\n                    v92 = v89 + 1;\n                    *v89 = 43;\n                  }\n                  else\n                  {\n                    v92 = v89;\n                    if ( (v68 & 8) != 0 )\n                    {\n                      v92 = v89 + 1;\n                      *v89 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_200;\n                    v97 = v92 + 3;\n                    if ( (unsigned __int8)(v12[72] - 65) > 0x19u )\n                    {\n                      v92[2] = 102;\n                      *(_WORD *)v92 = 28265;\n                    }\n                    else\n                    {\n                      v92[2] = 70;\n                      *(_WORD *)v92 = 20041;\n                    }\n                    v92 = 0LL;\n                    goto LABEL_263;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_200;\n                  v96 = v12[72] & 0xDF;\n                  switch ( v96 )\n                  {\n                    case 'F':\n                      *v92 = 48;\n                      if ( (v68 & 0x10) != 0 || v55 )\n                      {\n                        LODWORD(v153) = v90;\n                        v154 = (char *)v50;\n                        v157 = v89;\n                        v158 = (char *)v55;\n                        LODWORD(v160) = v68;\n                        *(_QWORD *)&v162 = v92 + 2;\n                        v122 = nl_langinfo(0x10000);\n                        v123 = (__int64)v158;\n                        v97 = *(char **)&v162;\n                        v124 = *v122;\n                        LOBYTE(v68) = (_BYTE)v160;\n                        v89 = (char *)v157;\n                        v50 = (unsigned __int64)v154;\n                        LOWORD(v90) = v153;\n                        if ( !v124 )\n                          v124 = 46;\n                        v92[1] = v124;\n                        if ( v123 )\n                        {\n                          v125 = v97;\n                          do\n                            *v125++ = 48;\n                          while ( v125 != &v92[v123 + 2] );\n                          v97 += v123;\n                        }\n                        goto LABEL_263;\n                      }\n                      goto LABEL_262;\n                    case 'E':\n                      *v92 = 48;\n                      if ( (v68 & 0x10) != 0 || (v105 = v92 + 1, v55) )\n                      {\n                        LODWORD(v153) = v90;\n                        v154 = (char *)v50;\n                        v157 = v89;\n                        v158 = (char *)v55;\n                        LODWORD(v160) = v68;\n                        *(_QWORD *)&v162 = v92 + 2;\n                        v138 = nl_langinfo(0x10000);\n                        v139 = (__int64)v158;\n                        v105 = *(char **)&v162;\n                        v140 = *v138;\n                        LOBYTE(v68) = (_BYTE)v160;\n                        v89 = (char *)v157;\n                        v50 = (unsigned __int64)v154;\n                        LOWORD(v90) = v153;\n                        if ( !v140 )\n                          v140 = 46;\n                        v92[1] = v140;\n                        if ( v139 )\n                        {\n                          v141 = v105;\n                          do\n                            *v141++ = 48;\n                          while ( v141 != &v92[v139 + 2] );\n                          v105 += v139;\n                        }\n                      }\n                      v106 = v12[72];\n                      v97 = v105 + 4;\n                      v105[3] = 48;\n                      *v105 = v106;\n                      *(_WORD *)(v105 + 1) = 12331;\n                      goto LABEL_263;\n                    case 'G':\n                      *v92 = 48;\n                      if ( (v68 & 0x10) != 0 )\n                      {\n                        if ( v55 )\n                        {\n                          HIDWORD(v152) = v90;\n                          v153 = v50;\n                          v154 = v92 + 2;\n                          v157 = v89;\n                          LODWORD(v158) = v68;\n                          v160 = (_BYTE *)v55;\n                          *(_QWORD *)&v162 = v55 - 1;\n                          v116 = nl_langinfo(0x10000);\n                          v117 = *(_QWORD *)&v162;\n                          v118 = (__int64)v160;\n                          v119 = *v116;\n                          LOBYTE(v68) = (_BYTE)v158;\n                          v89 = (char *)v157;\n                          v97 = v154;\n                          v50 = v153;\n                          LOWORD(v90) = WORD2(v152);\n                          if ( !v119 )\n                            v119 = 46;\n                          v92[1] = v119;\n                          if ( v117 )\n                          {\n                            v120 = (__int64)&v92[v118 + 1];\n                            v121 = v97;\n                            do\n                              *v121++ = 48;\n                            while ( v121 != (char *)v120 );\n                            v97 += v117;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v154) = v90;\n                          v157 = (void *)v50;\n                          v158 = v92 + 2;\n                          v160 = v89;\n                          LODWORD(v162) = v68;\n                          v147 = nl_langinfo(0x10000);\n                          LOBYTE(v68) = LOBYTE(v162);\n                          v89 = v160;\n                          v148 = *v147;\n                          v97 = v158;\n                          v50 = (unsigned __int64)v157;\n                          LOWORD(v90) = (_WORD)v154;\n                          if ( !v148 )\n                            v148 = 46;\n                          v92[1] = v148;\n                        }\n                        goto LABEL_263;\n                      }\nLABEL_262:\n                      v97 = v92 + 1;\n                      goto LABEL_263;\n                  }\n                  if ( v96 != 65 )\n                    goto LABEL_200;\n                  *v92 = 48;\n                  *(_QWORD *)&v162 = v92 + 2;\n                  v135 = v12[72];\n                  v92[2] = 48;\n                  v92[1] = v135 + 23;\n                  if ( (v68 & 0x10) != 0 || (v136 = (__int64)(v92 + 3), v55) )\n                  {\n                    HIDWORD(v152) = v90;\n                    v153 = v50;\n                    v154 = v89;\n                    v157 = (void *)v55;\n                    LODWORD(v158) = v68;\n                    v160 = v92 + 4;\n                    v143 = nl_langinfo(0x10000);\n                    v144 = v157;\n                    v136 = (__int64)v160;\n                    v145 = *v143;\n                    LOBYTE(v68) = (_BYTE)v158;\n                    v89 = v154;\n                    v50 = v153;\n                    LOWORD(v90) = WORD2(v152);\n                    if ( !v145 )\n                      v145 = 46;\n                    v92[3] = v145;\n                    if ( v144 )\n                    {\n                      v146 = (_BYTE *)v136;\n                      do\n                        *v146++ = 48;\n                      while ( v146 != (_BYTE *)v144 + (_QWORD)v92 + 4 );\n                      v136 += (__int64)v144;\n                    }\n                  }\n                  v137 = v12[72];\n                  v97 = (char *)(v136 + 3);\n                  *(_WORD *)(v136 + 1) = 12331;\n                  v92 = *(char **)&v162;\n                  *(_BYTE *)v136 = v137 + 15;\nLABEL_263:\n                  LOWORD(v166) = v90;\n                  v98 = v97 - v89;\n                  if ( v50 > v97 - v89 )\n                  {\n                    v99 = v50 - v98;\n                    v100 = &v97[v99];\n                    v98 = &v97[v99] - v89;\n                    if ( (v68 & 2) != 0 )\n                    {\n                      if ( v99 )\n                      {\n                        do\n                          *v97++ = 32;\n                        while ( v100 != v97 );\n                      }\n                    }\n                    else if ( (v68 & 0x20) != 0 && v92 )\n                    {\n                      if ( v92 >= v97 )\n                      {\n                        v92 = v97;\n                      }\n                      else\n                      {\n                        v101 = -1LL;\n                        do\n                        {\n                          v100[v101] = v97[v101];\n                          --v101;\n                        }\n                        while ( v101 != v92 - 1 - v97 );\n                      }\n                      if ( v99 )\n                      {\n                        v102 = &v92[v99];\n                        do\n                          *v92++ = 48;\n                        while ( v92 != v102 );\n                      }\n                    }\n                    else\n                    {\n                      v112 = -1LL;\n                      if ( v89 < v97 )\n                      {\n                        do\n                        {\n                          v100[v112] = v97[v112];\n                          --v112;\n                        }\n                        while ( v89 - 1 - v97 != v112 );\n                        v97 = v89;\n                      }\n                      if ( v99 )\n                      {\n                        v113 = &v97[v99];\n                        do\n                          *v97++ = 32;\n                        while ( v97 != v113 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v163 <= v98 )\n                    goto LABEL_200;\n                  v103 = v98 + v19;\n                  v15 = v98 + v19;\n                  if ( v11 - v19 <= v98 )\n                  {\n                    if ( __CFADD__(v98, v19) )\n                    {\n                      if ( v11 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v11 < v103 )\n                    {\n                      if ( v11 )\n                      {\n                        if ( (v11 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v11 *= 2LL;\n                        if ( v11 < v103 )\n                          goto LABEL_373;\n                      }\n                      else\n                      {\n                        if ( v103 <= 0xC )\n                        {\n                          v11 = 12LL;\n                          goto LABEL_280;\n                        }\nLABEL_373:\n                        if ( v103 == -1LL )\n                          goto LABEL_88;\n                        v11 = v98 + v19;\n                      }\nLABEL_280:\n                      if ( !v14 || v14 == src )\n                      {\n                        LOBYTE(v160) = v14 == src;\n                        *(_QWORD *)&v162 = v98;\n                        v163 = v89;\n                        v114 = (char *)malloc(v11);\n                        v89 = (char *)v163;\n                        v98 = *(_QWORD *)&v162;\n                        if ( !v114 )\n                          goto LABEL_88;\n                        if ( v19 && (_BYTE)v160 )\n                        {\n                          v115 = (char *)memcpy(v114, v14, v19);\n                          v89 = (char *)v163;\n                          v98 = *(_QWORD *)&v162;\n                          v14 = v115;\n                        }\n                        else\n                        {\n                          v14 = v114;\n                        }\n                      }\n                      else\n                      {\n                        *(_QWORD *)&v162 = v98;\n                        v163 = v89;\n                        v104 = (char *)realloc(v14, v11);\n                        if ( !v104 )\n                          goto LABEL_88;\n                        v89 = (char *)v163;\n                        v98 = *(_QWORD *)&v162;\n                        v14 = v104;\n                      }\n                    }\n                  }\n                  v163 = v89;\n                  memcpy(&v14[v19], v89, v98);\n                  if ( v163 != v176 )\n                    free(v163);\n                  goto LABEL_110;\n                }\nLABEL_375:\n                v56 = 12LL;\n                goto LABEL_190;\n              }\n            }\n            v56 = 12LL;\n            if ( v30 != 65 )\n              v56 = 18LL;\n            v55 = 0LL;\n            if ( v30 != 65 )\n              v55 = 6LL;\n            goto LABEL_190;\n          }\n        }\n        v31 = *((_DWORD *)v12 + 4);\n        v32 = (char *)v161 + 1;\n        *(_BYTE *)v161 = 37;\n        if ( (v31 & 1) != 0 )\n        {\n          v33 = (__int64)v161;\n          *((_BYTE *)v161 + 1) = 39;\n          v32 = (char *)(v33 + 2);\n        }\n        if ( (v31 & 2) != 0 )\n          *v32++ = 45;\n        if ( (v31 & 4) != 0 )\n          *v32++ = 43;\n        if ( (v31 & 8) != 0 )\n          *v32++ = 32;\n        if ( (v31 & 0x10) != 0 )\n          *v32++ = 35;\n        if ( (v31 & 0x40) != 0 )\n          *v32++ = 73;\n        if ( (v31 & 0x20) != 0 )\n          *v32++ = 48;\n        v34 = (_BYTE *)*((_QWORD *)v12 + 3);\n        v35 = (_BYTE *)*((_QWORD *)v12 + 4);\n        if ( v34 != v35 )\n        {\n          v160 = v27;\n          *(_QWORD *)&v162 = v35 - v34;\n          memcpy(v32, v34, v35 - v34);\n          v27 = v160;\n          v32 += *(_QWORD *)&v162;\n        }\n        v36 = (_BYTE *)*((_QWORD *)v12 + 6);\n        v37 = (_BYTE *)*((_QWORD *)v12 + 7);\n        if ( v36 != v37 )\n        {\n          v160 = v27;\n          *(_QWORD *)&v162 = v37 - v36;\n          memcpy(v32, v36, v37 - v36);\n          v27 = v160;\n          v32 += *(_QWORD *)&v162;\n        }\n        if ( (unsigned int)v163 <= 0x10 )\n        {\n          v38 = 1LL << (char)v163;\n          if ( ((1LL << (char)v163) & 0x14180) != 0 )\n            goto LABEL_125;\n          if ( (v38 & 0x1000) != 0 )\n          {\n            *v32++ = 76;\n          }\n          else\n          {\n            if ( (v38 & 0x600) == 0 )\n              goto LABEL_62;\n            *v32++ = 108;\nLABEL_125:\n            *v32++ = 108;\n          }\n        }\nLABEL_62:\n        v39 = v12[72];\n        v32[1] = 0;\n        *v32 = v39;\n        v40 = *((_QWORD *)v12 + 5);\n        if ( v40 != -1 )\n        {\n          v41 = &v27[32 * v40];\n          if ( *(_DWORD *)v41 == 5 )\n          {\n            LODWORD(v160) = 1;\n            v166 = *((_DWORD *)v41 + 4);\n            goto LABEL_65;\n          }\nLABEL_200:\n          abort();\n        }\n        LODWORD(v160) = 0;\nLABEL_65:\n        v42 = *((_QWORD *)v12 + 8);\n        if ( v42 != -1 )\n        {\n          v43 = &v27[32 * v42];\n          if ( *(_DWORD *)v43 != 5 )\n            goto LABEL_200;\n          v44 = (int)v160;\n          *(&v166 + (unsigned int)v160) = *((_DWORD *)v43 + 4);\n          LODWORD(v160) = v44 + 1;\n        }\n        v45 = v19 + 2;\n        if ( v19 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v11 < v45 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 >= v45 )\n              goto LABEL_73;\n          }\n          else if ( v45 <= 0xC )\n          {\n            v11 = 12LL;\nLABEL_73:\n            if ( v14 && v14 != src )\n            {\n              v46 = (char *)realloc(v14, v11);\n              if ( v46 )\n                goto LABEL_76;\nLABEL_88:\n              v57 = v14;\n              *(_QWORD *)&v162 = __errno_location();\nLABEL_89:\n              if ( v57 == src || !v57 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v172 != v175 )\n                    free(v172);\n                  if ( v169 != v170 )\n                    free(v169);\n                  v14 = 0LL;\n                  **(_DWORD **)&v162 = 12;\n                  return v14;\n                }\nLABEL_112:\n                *(_QWORD *)&v162 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v57);\n              goto LABEL_91;\n            }\n            LOBYTE(v162) = v14 == src;\n            v94 = (char *)malloc(v11);\n            v46 = v94;\n            if ( !v94 )\n              goto LABEL_88;\n            if ( v19 && LOBYTE(v162) )\n              v46 = (char *)memcpy(v94, v14, v19);\nLABEL_76:\n            v46[v19] = 0;\n            v158 = v46;\n            v47 = __errno_location();\n            v48 = v158;\n            v158 = v32;\n            *(_QWORD *)&v162 = v47;\n            LODWORD(v154) = *v47;\n            while ( 2 )\n            {\n              v49 = 0x7FFFFFFFLL;\n              v165 = -1;\n              **(_DWORD **)&v162 = 0;\n              if ( v11 - v19 <= 0x7FFFFFFF )\n                v49 = v11 - v19;\n              switch ( (int)v163 )\n              {\n                case 1:\n                  v72 = (unsigned int)*((char *)v169 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 2:\n                  v72 = *((unsigned __int8 *)v169 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 3:\n                  v72 = (unsigned int)*((__int16 *)v169 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 4:\n                  v72 = *((unsigned __int16 *)v169 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 5:\n                case 6:\n                case 13:\n                case 14:\n                  v72 = *((unsigned int *)v169 + 8 * *((_QWORD *)v12 + 10) + 4);\nLABEL_150:\n                  v71 = &v48[v19];\n                  v157 = v48;\n                  if ( (_DWORD)v160 != 1 )\n                  {\n                    if ( (_DWORD)v160 != 2 )\n                    {\n                      v150 = &v165;\n                      goto LABEL_153;\n                    }\n                    goto LABEL_209;\n                  }\n                  v151 = &v165;\n                  v150 = (int *)v72;\n                  break;\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                case 15:\n                case 16:\n                case 17:\n                  v71 = &v48[v19];\n                  v72 = *((_QWORD *)v169 + 4 * *((_QWORD *)v12 + 10) + 2);\n                  v157 = v48;\n                  if ( (_DWORD)v160 != 1 )\n                  {\n                    if ( (_DWORD)v160 != 2 )\n                    {\n                      v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v161, v72, a5, &v165, v151);\nLABEL_131:\n                      v48 = (char *)v157;\n                      goto LABEL_132;\n                    }\nLABEL_209:\n                    v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v161, v166, a5, v167, v72);\nLABEL_210:\n                    v48 = (char *)v157;\nLABEL_132:\n                    v74 = v165;\n                    if ( v165 < 0 )\n                    {\nLABEL_154:\n                      if ( v158[1] )\n                      {\n                        v158[1] = 0;\n                        continue;\n                      }\n                      if ( v73 < 0 )\n                      {\n                        v80 = **(_DWORD **)&v162;\n                        if ( !**(_DWORD **)&v162 )\n                        {\n                          v80 = 84;\n                          if ( (v12[72] & 0xEF) != 99 )\n                            v80 = 22;\n                        }\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v172 != v175 )\n                          free(v172);\n                        if ( v169 != v170 )\n                          free(v169);\n                        **(_DWORD **)&v162 = v80;\n                        return 0LL;\n                      }\nLABEL_136:\n                      v165 = v73;\n                      v74 = v73;\nLABEL_137:\n                      if ( (unsigned int)(v74 + 1) < v49 )\n                      {\n                        v14 = v48;\n                        v15 = v19 + v74;\n                        **(_DWORD **)&v162 = (_DWORD)v154;\n                        goto LABEL_110;\n                      }\n                      if ( v11 - v19 > 0x7FFFFFFE )\n                      {\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v172 != v175 )\n                          free(v172);\n                        if ( v169 != v170 )\n                          free(v169);\n                        v14 = 0LL;\n                        **(_DWORD **)&v162 = 75;\n                        return v14;\n                      }\n                      v75 = (unsigned int)(v74 + 2);\n                      v76 = __CFADD__(v19, v75);\n                      v77 = v19 + v75;\n                      if ( (v11 & 0x8000000000000000LL) != 0LL )\n                      {\n                        if ( v11 != -1LL )\n                          goto LABEL_202;\n                      }\n                      else\n                      {\n                        if ( v76 )\n                          goto LABEL_202;\n                        if ( 2 * v11 >= v77 )\n                          v77 = 2 * v11;\n                        if ( v11 < v77 )\n                        {\n                          v11 *= 2LL;\n                          if ( v11 < v77 )\n                          {\n                            if ( v77 == -1LL )\n                            {\nLABEL_202:\n                              v57 = v48;\n                              goto LABEL_89;\n                            }\n                            v11 = v77;\n                          }\n                          v78 = v48 == src;\n                          if ( !v48 || v48 == src )\n                          {\n                            v157 = v48;\n                            v93 = (char *)malloc(v11);\n                            v48 = (char *)v157;\n                            if ( !v93 )\n                              goto LABEL_202;\n                            if ( v19 && v78 )\n                              v48 = (char *)memcpy(v93, v157, v19);\n                            else\n                              v48 = v93;\n                          }\n                          else\n                          {\n                            v157 = v48;\n                            v79 = (char *)realloc(v48, v11);\n                            v48 = (char *)v157;\n                            if ( !v79 )\n                              goto LABEL_202;\n                            v48 = v79;\n                          }\n                        }\n                      }\n                      continue;\n                    }\nLABEL_133:\n                    if ( v74 < v49 && v48[v74 + v19] )\n                      goto LABEL_200;\n                    if ( v74 >= v73 )\n                      goto LABEL_137;\n                    goto LABEL_136;\n                  }\n                  v151 = &v165;\n                  v150 = (int *)v72;\n                  break;\n                case 11:\n                  v84 = *((_QWORD *)v12 + 10);\n                  v85 = &v48[v19];\n                  v157 = v48;\n                  a5 = *((double *)v169 + 4 * v84 + 2);\n                  if ( (_DWORD)v160 == 1 )\n                  {\n                    v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v161, v166, a5, &v165, v151);\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v160 != 2 )\n                    {\n                      v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v161, &v165, a5, v152, v153);\n                      v48 = (char *)v157;\n                      goto LABEL_132;\n                    }\n                    v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v161, v166, a5, v167, &v165);\n                  }\n                  v48 = (char *)v157;\n                  goto LABEL_132;\n                case 12:\n                  v81 = *((_QWORD *)v12 + 10);\n                  v82 = &v48[v19];\n                  v157 = v48;\n                  v83 = *((unsigned __int128 *)v169 + 2 * v81 + 1);\n                  if ( (_DWORD)v160 == 1 )\n                  {\n                    v73 = __snprintf_chk(v82, v49, 1LL, -1LL, v161, v166, a5, v83, v83 >> 64);\n                    goto LABEL_210;\n                  }\n                  if ( (_DWORD)v160 != 2 )\n                  {\n                    v73 = __snprintf_chk(v82, v49, 1LL, -1LL, v161, &v165, a5, v83, v83 >> 64);\n                    goto LABEL_131;\n                  }\n                  v73 = __snprintf_chk(v82, v49, 1LL, -1LL, v161, v166, a5, v167, v149);\n                  v48 = (char *)v157;\n                  goto LABEL_132;\n                default:\n                  goto LABEL_408;\n              }\n              break;\n            }\n            v72 = v166;\nLABEL_153:\n            v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v161, v72, a5, v150, v151);\n            v74 = v165;\n            v48 = (char *)v157;\n            if ( v165 < 0 )\n              goto LABEL_154;\n            goto LABEL_133;\n          }\n          if ( v19 != -3LL )\n          {\n            v11 = v19 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v46 = v14;\n        goto LABEL_76;\n      }\n      switch ( v29 )\n      {\n        case 18:\n          v15 = v19;\n          **((_BYTE **)v28 + 2) = v19;\n          break;\n        case 19:\n          v15 = v19;\n          **((_WORD **)v28 + 2) = v19;\n          break;\n        case 20:\n          v15 = v19;\n          **((_DWORD **)v28 + 2) = v19;\n          break;\n        case 21:\n        case 22:\n          v15 = v19;\n          **((_QWORD **)v28 + 2) = v19;\n          break;\n        default:\nLABEL_408:\n          abort();\n      }\nLABEL_110:\n      v13 = (_BYTE *)*((_QWORD *)v12 + 1);\n      v12 += 88;\n      v16 = *(_BYTE **)v12;\n      ++v159;\n      if ( v16 != v13 )\n        goto LABEL_14;\nLABEL_111:\n      v19 = v15;\n    }\n    v107 = v19;\n    v108 = v19 + 1;\n    if ( v19 == -1LL )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v11 < v108 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v108 )\n        {\nLABEL_303:\n          v109 = v14 == src;\n          if ( !v14 || v14 == src )\n          {\n            v142 = (char *)malloc(v11);\n            if ( !v142 )\n              goto LABEL_88;\n            if ( v107 && v109 )\n              v14 = (char *)memcpy(v142, v14, v107);\n            else\n              v14 = v142;\n          }\n          else\n          {\n            v110 = (char *)realloc(v14, v11);\n            if ( !v110 )\n              goto LABEL_126;\n            v14 = v110;\n          }\n          goto LABEL_307;\n        }\n      }\n      else if ( v108 <= 0xC )\n      {\n        v11 = 12LL;\n        goto LABEL_303;\n      }\n      if ( v19 == -2LL )\n        goto LABEL_88;\n      v11 = v19 + 1;\n      goto LABEL_303;\n    }\nLABEL_307:\n    v14[v107] = 0;\n    if ( v11 > v108 && v14 != src )\n    {\n      v111 = (char *)realloc(v14, v108);\n      if ( v111 )\n        v14 = v111;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v172 != v175 )\n      free(v172);\n    if ( v169 != v170 )\n      free(v169);\n    *v156 = v107;\n    return v14;\n  }\n  if ( v172 != v175 )\n    free(v172);\n  if ( v169 != v170 )\n    free(v169);\n  v14 = 0LL;\n  *__errno_location() = 22;\n  return v14;\n}\n"
        },
        {
            "funcName": "sub_40E360",
            "funcStartAddr": "0x4023d7",
            "funcEndAddr": "0x4023dc",
            "decompiledFuncCode": "char *__fastcall sub_40E360(void *a1, size_t *a2, _BYTE *a3, __int64 a4, double a5)\n{\n  __int64 v7; // rax\n  unsigned __int64 v8; // rax\n  size_t v9; // rdi\n  __int64 *v10; // rax\n  size_t v11; // r12\n  char *v12; // r14\n  _BYTE *v13; // r8\n  char *v14; // rbx\n  size_t v15; // r15\n  _BYTE *v16; // rcx\n  void *v17; // rcx\n  unsigned __int64 v18; // rax\n  size_t v19; // r13\n  bool v20; // dl\n  char *v21; // rax\n  char *v22; // rax\n  void *v23; // rsp\n  char *v24; // rax\n  char v25; // r15\n  __int64 v26; // rax\n  char *v27; // r8\n  long double *v28; // rdx\n  int v29; // eax\n  char v30; // al\n  int v31; // eax\n  char *v32; // r15\n  __int64 v33; // rdi\n  _BYTE *v34; // rsi\n  _BYTE *v35; // rdx\n  _BYTE *v36; // rsi\n  _BYTE *v37; // rdx\n  __int64 v38; // rax\n  char v39; // al\n  __int64 v40; // rax\n  char *v41; // rax\n  __int64 v42; // rax\n  char *v43; // r8\n  int v44; // eax\n  unsigned __int64 v45; // rax\n  char *v46; // r11\n  int *v47; // rax\n  char *v48; // r11\n  unsigned __int64 v49; // rbx\n  unsigned __int64 v50; // r10\n  char *v51; // rdx\n  char *v52; // rcx\n  __int64 v53; // rsi\n  _DWORD *v54; // r8\n  unsigned __int64 v55; // rdx\n  unsigned __int64 v56; // rcx\n  void *v57; // r15\n  unsigned __int64 v59; // rax\n  char *v60; // rax\n  char v62; // fps^1\n  char *v66; // rdx\n  char *v67; // rdi\n  int v68; // r11d\n  __int64 v69; // rcx\n  _DWORD *v70; // rcx\n  char *v71; // rdi\n  unsigned __int64 v72; // r9\n  int v73; // eax\n  int v74; // edx\n  __int64 v75; // rax\n  bool v76; // cf\n  unsigned __int64 v77; // rax\n  bool v78; // bl\n  char *v79; // rax\n  int v80; // ebx\n  __int64 v81; // rax\n  char *v82; // rdi\n  unsigned __int128 v83; // fst7\n  __int64 v84; // rax\n  char *v85; // rdi\n  unsigned __int64 v86; // rax\n  void *v87; // rax\n  char *v88; // rax\n  char *v89; // rcx\n  int v90; // r8d\n  __int16 v91; // ax\n  char *v92; // r15\n  char *v93; // rax\n  char *v94; // rax\n  char *v95; // rax\n  char v96; // al\n  char *v97; // r9\n  size_t v98; // r8\n  unsigned __int64 v99; // r10\n  char *v100; // rdi\n  __int64 v101; // rax\n  char *v102; // r10\n  unsigned __int64 v103; // rax\n  char *v104; // rax\n  char *v105; // rsi\n  char v106; // al\n  size_t v107; // r15\n  size_t v108; // r14\n  bool v109; // r13\n  char *v110; // rax\n  char *v111; // rax\n  __int64 v112; // rax\n  char *v113; // r10\n  char *v114; // rax\n  char *v115; // rax\n  char *v116; // rax\n  __int64 v117; // rsi\n  __int64 v118; // rdx\n  char v119; // al\n  __int64 v120; // rdx\n  char *v121; // rax\n  char *v122; // rax\n  __int64 v123; // rdx\n  char v124; // al\n  char *v125; // rax\n  char *v126; // rsi\n  __int64 v127; // r9\n  __int64 v128; // rdx\n  char *v129; // rax\n  char *v130; // rsi\n  char *v131; // rdi\n  __int64 v132; // rax\n  __int64 v133; // rsi\n  unsigned __int64 v134; // rax\n  char v135; // al\n  __int64 v136; // rsi\n  char v137; // al\n  char *v138; // rax\n  __int64 v139; // rdx\n  char v140; // al\n  char *v141; // rax\n  char *v142; // rax\n  char *v143; // rax\n  void *v144; // rdx\n  char v145; // al\n  _BYTE *v146; // rax\n  char *v147; // rax\n  char v148; // al\n  __int64 v149; // [rsp-8h] [rbp-718h]\n  int *v150; // [rsp+10h] [rbp-700h]\n  int *v151; // [rsp+18h] [rbp-6F8h]\n  __int64 v152; // [rsp+20h] [rbp-6F0h] BYREF\n  unsigned __int64 v153; // [rsp+28h] [rbp-6E8h]\n  char *v154; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v156; // [rsp+40h] [rbp-6D0h]\n  void *v157; // [rsp+48h] [rbp-6C8h]\n  char *v158; // [rsp+50h] [rbp-6C0h]\n  __int64 v159; // [rsp+58h] [rbp-6B8h]\n  _BYTE *v160; // [rsp+60h] [rbp-6B0h]\n  __int64 *v161; // [rsp+68h] [rbp-6A8h]\n  long double v162; // [rsp+70h] [rbp-6A0h]\n  void *v163; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v165; // [rsp+94h] [rbp-67Ch] BYREF\n  unsigned int v166; // [rsp+98h] [rbp-678h]\n  unsigned int v167; // [rsp+9Ch] [rbp-674h]\n  char v168[8]; // [rsp+A0h] [rbp-670h] BYREF\n  void *v169; // [rsp+A8h] [rbp-668h]\n  _BYTE v170[224]; // [rsp+B0h] [rbp-660h] BYREF\n  __int64 v171; // [rsp+190h] [rbp-580h] BYREF\n  void *v172; // [rsp+198h] [rbp-578h]\n  __int64 v173; // [rsp+1A0h] [rbp-570h]\n  __int64 v174; // [rsp+1A8h] [rbp-568h]\n  _BYTE v175[624]; // [rsp+1B0h] [rbp-560h] BYREF\n  char v176[752]; // [rsp+420h] [rbp-2F0h] BYREF\n\n  src = a1;\n  v156 = a2;\n  if ( (int)sub_4101F0(a3, &v171, v168) < 0 )\n    return 0LL;\n  if ( (int)sub_40FFD0(a4, v168) >= 0 )\n  {\n    v7 = v173 + 7;\n    if ( (unsigned __int64)(v173 + 7) <= 6 )\n      v7 = -1LL;\n    v76 = __CFADD__(v174, v7);\n    v8 = v174 + v7;\n    if ( v76 )\n      goto LABEL_112;\n    v9 = v8 + 6;\n    if ( v8 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v9 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v23 = alloca(v8 + 14);\n      v161 = &v152;\n    }\n    else\n    {\n      if ( v8 == -7LL )\n        goto LABEL_112;\n      v10 = (__int64 *)malloc(v9);\n      v161 = v10;\n      if ( !v10 )\n        goto LABEL_112;\n      ptr = v10;\n    }\n    v11 = 0LL;\n    if ( src )\n      v11 = *v156;\n    v12 = (char *)v172;\n    v13 = a3;\n    v14 = (char *)src;\n    v159 = 0LL;\n    v15 = 0LL;\n    v16 = *(_BYTE **)v172;\n    if ( *(_BYTE **)v172 == v13 )\n      goto LABEL_111;\nLABEL_14:\n    v17 = (void *)(v16 - v13);\n    v18 = (unsigned __int64)v17 + v15;\n    v19 = (size_t)v17 + v15;\n    if ( __CFADD__(v17, v15) )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n      v19 = -1LL;\n    }\n    else if ( v11 < v18 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v18 )\n        {\nLABEL_28:\n          v20 = v14 == src;\n          if ( !v14 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v18 <= 0xC )\n      {\n        v11 = 12LL;\n        v20 = v14 == src;\n        if ( !v14 )\n        {\nLABEL_19:\n          v160 = v13;\n          LOBYTE(v162) = v20;\n          v163 = v17;\n          v21 = (char *)malloc(v11);\n          v17 = v163;\n          v13 = v160;\n          if ( !v21 )\n            goto LABEL_88;\n          if ( v15 && LOBYTE(v162) )\n          {\n            *(_QWORD *)&v162 = v160;\n            v22 = (char *)memcpy(v21, v14, v15);\n            v17 = v163;\n            v13 = *(_BYTE **)&v162;\n            v14 = v22;\n          }\n          else\n          {\n            v14 = v21;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v20 )\n        {\n          *(_QWORD *)&v162 = v13;\n          v163 = v17;\n          v24 = (char *)realloc(v14, v11);\n          if ( !v24 )\n            goto LABEL_126;\n          v17 = v163;\n          v13 = *(_BYTE **)&v162;\n          v14 = v24;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v18 == -1LL )\n        goto LABEL_88;\n      v11 = (size_t)v17 + v15;\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v14[v15], v13, (size_t)v17);\n    while ( v171 != v159 )\n    {\n      v25 = v12[72];\n      v26 = *((_QWORD *)v12 + 10);\n      if ( v25 == 37 )\n      {\n        if ( v26 != -1 )\n          goto LABEL_200;\n        v59 = v19 + 1;\n        v15 = v19 + 1;\n        if ( v19 == -1LL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n          v15 = -1LL;\n        }\n        else if ( v11 < v59 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 < v59 )\n              goto LABEL_238;\n          }\n          else\n          {\n            if ( v59 <= 0xC )\n            {\n              v11 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_238:\n            if ( v19 == -2LL )\n              goto LABEL_88;\n            v11 = v19 + 1;\n          }\nLABEL_105:\n          if ( v14 && v14 != src )\n          {\n            v60 = (char *)realloc(v14, v11);\n            if ( v60 )\n            {\n              v14 = v60;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v57 = v14;\n            *(_QWORD *)&v162 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v163) = v14 == src;\n          v95 = (char *)malloc(v11);\n          if ( !v95 )\n            goto LABEL_88;\n          if ( v19 && (_BYTE)v163 )\n            v14 = (char *)memcpy(v95, v14, v19);\n          else\n            v14 = v95;\n        }\nLABEL_109:\n        v14[v19] = 37;\n        goto LABEL_110;\n      }\n      if ( v26 == -1 )\n        goto LABEL_200;\n      v27 = (char *)v169;\n      v28 = (long double *)((char *)v169 + 32 * v26);\n      v29 = *(_DWORD *)v28;\n      LODWORD(v163) = *(_DWORD *)v28;\n      if ( v25 != 110 )\n      {\n        v30 = v25 & 0xDF;\n        if ( ((unsigned __int8)((v25 & 0xDF) - 69) <= 2u || v30 == 65) && (_DWORD)v163 == 12 )\n        {\n          _FST7 = v28[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v66 = (char *)*((_QWORD *)v12 + 3);\n            v67 = (char *)*((_QWORD *)v12 + 4);\n            v68 = *((_DWORD *)v12 + 4);\n            if ( v66 == v67 )\n            {\n              v50 = 0LL;\n            }\n            else\n            {\n              v69 = *((_QWORD *)v12 + 5);\n              if ( v69 == -1 )\n              {\n                v50 = 0LL;\n                v163 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v126 = v66 + 1;\n                  v127 = -1LL;\n                  v128 = *v66 - 48;\n                  if ( v50 <= 0x1999999999999999LL )\n                    v127 = 10 * v50;\n                  v76 = __CFADD__(v127, v128);\n                  v50 = v127 + v128;\n                  v66 = v126;\n                  if ( v76 )\n                  {\n                    if ( v67 == v126 )\n                    {\nLABEL_81:\n                      v50 = (unsigned __int64)v163;\n                      goto LABEL_82;\n                    }\n                    while ( *v66++ != 48 )\n                    {\n                      if ( v67 == v66 )\n                        goto LABEL_81;\n                    }\n                    v50 = -1LL;\n                  }\n                  if ( v67 == v66 )\n                    goto LABEL_82;\n                }\n              }\n              v70 = (char *)v169 + 32 * v69;\n              if ( *v70 != 5 )\n                goto LABEL_200;\n              v50 = (int)v70[4];\n              if ( (v50 & 0x80000000) != 0LL )\n              {\n                v68 |= 2u;\n                v50 = -(__int64)v50;\n              }\n            }\nLABEL_82:\n            v51 = (char *)*((_QWORD *)v12 + 6);\n            v52 = (char *)*((_QWORD *)v12 + 7);\n            if ( v51 != v52 )\n            {\n              v53 = *((_QWORD *)v12 + 8);\n              if ( v53 == -1 )\n              {\n                v129 = v51 + 1;\n                v55 = 0LL;\n                if ( v52 != v129 )\n                {\n                  v130 = v129;\n                  while ( 1 )\n                  {\n                    v131 = v130 + 1;\n                    v132 = *v130 - 48;\n                    v133 = -1LL;\n                    if ( v55 <= 0x1999999999999999LL )\n                      v133 = 10 * v55;\n                    v76 = __CFADD__(v133, v132);\n                    v134 = v133 + v132;\n                    v130 = v131;\n                    v55 = v134;\n                    if ( v76 )\n                    {\n                      if ( v52 == v131 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v130 = v131 + 1;\n                        if ( *v131 == 48 )\n                          break;\n                        if ( v52 == v130 )\n                          goto LABEL_88;\n                        ++v131;\n                      }\n                      v55 = -1LL;\n                    }\n                    if ( v52 == v130 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_375;\n              }\n              v54 = (char *)v169 + 32 * v53;\n              if ( *v54 != 5 )\n                goto LABEL_200;\n              v55 = (int)v54[4];\n              if ( (v55 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v55 )\n                {\n                  v56 = v55 + 12;\n                  if ( v55 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_190:\n                  v86 = v56;\n                  if ( v50 >= v56 )\n                    v86 = v50;\n                  v76 = __CFADD__(v86, 1LL);\n                  v87 = (void *)(v86 + 1);\n                  v163 = v87;\n                  if ( v76 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v87 <= 0x2BC )\n                  {\n                    v89 = v176;\n                  }\n                  else\n                  {\n                    v157 = (void *)v50;\n                    v158 = (char *)v55;\n                    LODWORD(v160) = v68;\n                    v162 = _FST7;\n                    if ( v87 == (void *)-1LL )\n                      goto LABEL_88;\n                    v88 = (char *)malloc((size_t)v87);\n                    v68 = (int)v160;\n                    _FST7 = v162;\n                    v89 = v88;\n                    v55 = (unsigned __int64)v158;\n                    v50 = (unsigned __int64)v157;\n                    if ( !v88 )\n                      goto LABEL_88;\n                  }\n                  v90 = (unsigned __int16)v166;\n                  LOBYTE(v91) = v166;\n                  HIBYTE(v91) = BYTE1(v166) | 3;\n                  LOWORD(v166) = v91;\n                  __asm { fxam }\n                  if ( (v62 & 2) != 0 )\n                  {\n                    *v89 = 45;\n                    _FST7 = -_FST7;\n                    v92 = v89 + 1;\n                  }\n                  else if ( (v68 & 4) != 0 )\n                  {\n                    v92 = v89 + 1;\n                    *v89 = 43;\n                  }\n                  else\n                  {\n                    v92 = v89;\n                    if ( (v68 & 8) != 0 )\n                    {\n                      v92 = v89 + 1;\n                      *v89 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_200;\n                    v97 = v92 + 3;\n                    if ( (unsigned __int8)(v12[72] - 65) > 0x19u )\n                    {\n                      v92[2] = 102;\n                      *(_WORD *)v92 = 28265;\n                    }\n                    else\n                    {\n                      v92[2] = 70;\n                      *(_WORD *)v92 = 20041;\n                    }\n                    v92 = 0LL;\n                    goto LABEL_263;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_200;\n                  v96 = v12[72] & 0xDF;\n                  switch ( v96 )\n                  {\n                    case 'F':\n                      *v92 = 48;\n                      if ( (v68 & 0x10) != 0 || v55 )\n                      {\n                        LODWORD(v153) = v90;\n                        v154 = (char *)v50;\n                        v157 = v89;\n                        v158 = (char *)v55;\n                        LODWORD(v160) = v68;\n                        *(_QWORD *)&v162 = v92 + 2;\n                        v122 = nl_langinfo(0x10000);\n                        v123 = (__int64)v158;\n                        v97 = *(char **)&v162;\n                        v124 = *v122;\n                        LOBYTE(v68) = (_BYTE)v160;\n                        v89 = (char *)v157;\n                        v50 = (unsigned __int64)v154;\n                        LOWORD(v90) = v153;\n                        if ( !v124 )\n                          v124 = 46;\n                        v92[1] = v124;\n                        if ( v123 )\n                        {\n                          v125 = v97;\n                          do\n                            *v125++ = 48;\n                          while ( v125 != &v92[v123 + 2] );\n                          v97 += v123;\n                        }\n                        goto LABEL_263;\n                      }\n                      goto LABEL_262;\n                    case 'E':\n                      *v92 = 48;\n                      if ( (v68 & 0x10) != 0 || (v105 = v92 + 1, v55) )\n                      {\n                        LODWORD(v153) = v90;\n                        v154 = (char *)v50;\n                        v157 = v89;\n                        v158 = (char *)v55;\n                        LODWORD(v160) = v68;\n                        *(_QWORD *)&v162 = v92 + 2;\n                        v138 = nl_langinfo(0x10000);\n                        v139 = (__int64)v158;\n                        v105 = *(char **)&v162;\n                        v140 = *v138;\n                        LOBYTE(v68) = (_BYTE)v160;\n                        v89 = (char *)v157;\n                        v50 = (unsigned __int64)v154;\n                        LOWORD(v90) = v153;\n                        if ( !v140 )\n                          v140 = 46;\n                        v92[1] = v140;\n                        if ( v139 )\n                        {\n                          v141 = v105;\n                          do\n                            *v141++ = 48;\n                          while ( v141 != &v92[v139 + 2] );\n                          v105 += v139;\n                        }\n                      }\n                      v106 = v12[72];\n                      v97 = v105 + 4;\n                      v105[3] = 48;\n                      *v105 = v106;\n                      *(_WORD *)(v105 + 1) = 12331;\n                      goto LABEL_263;\n                    case 'G':\n                      *v92 = 48;\n                      if ( (v68 & 0x10) != 0 )\n                      {\n                        if ( v55 )\n                        {\n                          HIDWORD(v152) = v90;\n                          v153 = v50;\n                          v154 = v92 + 2;\n                          v157 = v89;\n                          LODWORD(v158) = v68;\n                          v160 = (_BYTE *)v55;\n                          *(_QWORD *)&v162 = v55 - 1;\n                          v116 = nl_langinfo(0x10000);\n                          v117 = *(_QWORD *)&v162;\n                          v118 = (__int64)v160;\n                          v119 = *v116;\n                          LOBYTE(v68) = (_BYTE)v158;\n                          v89 = (char *)v157;\n                          v97 = v154;\n                          v50 = v153;\n                          LOWORD(v90) = WORD2(v152);\n                          if ( !v119 )\n                            v119 = 46;\n                          v92[1] = v119;\n                          if ( v117 )\n                          {\n                            v120 = (__int64)&v92[v118 + 1];\n                            v121 = v97;\n                            do\n                              *v121++ = 48;\n                            while ( v121 != (char *)v120 );\n                            v97 += v117;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v154) = v90;\n                          v157 = (void *)v50;\n                          v158 = v92 + 2;\n                          v160 = v89;\n                          LODWORD(v162) = v68;\n                          v147 = nl_langinfo(0x10000);\n                          LOBYTE(v68) = LOBYTE(v162);\n                          v89 = v160;\n                          v148 = *v147;\n                          v97 = v158;\n                          v50 = (unsigned __int64)v157;\n                          LOWORD(v90) = (_WORD)v154;\n                          if ( !v148 )\n                            v148 = 46;\n                          v92[1] = v148;\n                        }\n                        goto LABEL_263;\n                      }\nLABEL_262:\n                      v97 = v92 + 1;\n                      goto LABEL_263;\n                  }\n                  if ( v96 != 65 )\n                    goto LABEL_200;\n                  *v92 = 48;\n                  *(_QWORD *)&v162 = v92 + 2;\n                  v135 = v12[72];\n                  v92[2] = 48;\n                  v92[1] = v135 + 23;\n                  if ( (v68 & 0x10) != 0 || (v136 = (__int64)(v92 + 3), v55) )\n                  {\n                    HIDWORD(v152) = v90;\n                    v153 = v50;\n                    v154 = v89;\n                    v157 = (void *)v55;\n                    LODWORD(v158) = v68;\n                    v160 = v92 + 4;\n                    v143 = nl_langinfo(0x10000);\n                    v144 = v157;\n                    v136 = (__int64)v160;\n                    v145 = *v143;\n                    LOBYTE(v68) = (_BYTE)v158;\n                    v89 = v154;\n                    v50 = v153;\n                    LOWORD(v90) = WORD2(v152);\n                    if ( !v145 )\n                      v145 = 46;\n                    v92[3] = v145;\n                    if ( v144 )\n                    {\n                      v146 = (_BYTE *)v136;\n                      do\n                        *v146++ = 48;\n                      while ( v146 != (_BYTE *)v144 + (_QWORD)v92 + 4 );\n                      v136 += (__int64)v144;\n                    }\n                  }\n                  v137 = v12[72];\n                  v97 = (char *)(v136 + 3);\n                  *(_WORD *)(v136 + 1) = 12331;\n                  v92 = *(char **)&v162;\n                  *(_BYTE *)v136 = v137 + 15;\nLABEL_263:\n                  LOWORD(v166) = v90;\n                  v98 = v97 - v89;\n                  if ( v50 > v97 - v89 )\n                  {\n                    v99 = v50 - v98;\n                    v100 = &v97[v99];\n                    v98 = &v97[v99] - v89;\n                    if ( (v68 & 2) != 0 )\n                    {\n                      if ( v99 )\n                      {\n                        do\n                          *v97++ = 32;\n                        while ( v100 != v97 );\n                      }\n                    }\n                    else if ( (v68 & 0x20) != 0 && v92 )\n                    {\n                      if ( v92 >= v97 )\n                      {\n                        v92 = v97;\n                      }\n                      else\n                      {\n                        v101 = -1LL;\n                        do\n                        {\n                          v100[v101] = v97[v101];\n                          --v101;\n                        }\n                        while ( v101 != v92 - 1 - v97 );\n                      }\n                      if ( v99 )\n                      {\n                        v102 = &v92[v99];\n                        do\n                          *v92++ = 48;\n                        while ( v92 != v102 );\n                      }\n                    }\n                    else\n                    {\n                      v112 = -1LL;\n                      if ( v89 < v97 )\n                      {\n                        do\n                        {\n                          v100[v112] = v97[v112];\n                          --v112;\n                        }\n                        while ( v89 - 1 - v97 != v112 );\n                        v97 = v89;\n                      }\n                      if ( v99 )\n                      {\n                        v113 = &v97[v99];\n                        do\n                          *v97++ = 32;\n                        while ( v97 != v113 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v163 <= v98 )\n                    goto LABEL_200;\n                  v103 = v98 + v19;\n                  v15 = v98 + v19;\n                  if ( v11 - v19 <= v98 )\n                  {\n                    if ( __CFADD__(v98, v19) )\n                    {\n                      if ( v11 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v11 < v103 )\n                    {\n                      if ( v11 )\n                      {\n                        if ( (v11 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v11 *= 2LL;\n                        if ( v11 < v103 )\n                          goto LABEL_373;\n                      }\n                      else\n                      {\n                        if ( v103 <= 0xC )\n                        {\n                          v11 = 12LL;\n                          goto LABEL_280;\n                        }\nLABEL_373:\n                        if ( v103 == -1LL )\n                          goto LABEL_88;\n                        v11 = v98 + v19;\n                      }\nLABEL_280:\n                      if ( !v14 || v14 == src )\n                      {\n                        LOBYTE(v160) = v14 == src;\n                        *(_QWORD *)&v162 = v98;\n                        v163 = v89;\n                        v114 = (char *)malloc(v11);\n                        v89 = (char *)v163;\n                        v98 = *(_QWORD *)&v162;\n                        if ( !v114 )\n                          goto LABEL_88;\n                        if ( v19 && (_BYTE)v160 )\n                        {\n                          v115 = (char *)memcpy(v114, v14, v19);\n                          v89 = (char *)v163;\n                          v98 = *(_QWORD *)&v162;\n                          v14 = v115;\n                        }\n                        else\n                        {\n                          v14 = v114;\n                        }\n                      }\n                      else\n                      {\n                        *(_QWORD *)&v162 = v98;\n                        v163 = v89;\n                        v104 = (char *)realloc(v14, v11);\n                        if ( !v104 )\n                          goto LABEL_88;\n                        v89 = (char *)v163;\n                        v98 = *(_QWORD *)&v162;\n                        v14 = v104;\n                      }\n                    }\n                  }\n                  v163 = v89;\n                  memcpy(&v14[v19], v89, v98);\n                  if ( v163 != v176 )\n                    free(v163);\n                  goto LABEL_110;\n                }\nLABEL_375:\n                v56 = 12LL;\n                goto LABEL_190;\n              }\n            }\n            v56 = 12LL;\n            if ( v30 != 65 )\n              v56 = 18LL;\n            v55 = 0LL;\n            if ( v30 != 65 )\n              v55 = 6LL;\n            goto LABEL_190;\n          }\n        }\n        v31 = *((_DWORD *)v12 + 4);\n        v32 = (char *)v161 + 1;\n        *(_BYTE *)v161 = 37;\n        if ( (v31 & 1) != 0 )\n        {\n          v33 = (__int64)v161;\n          *((_BYTE *)v161 + 1) = 39;\n          v32 = (char *)(v33 + 2);\n        }\n        if ( (v31 & 2) != 0 )\n          *v32++ = 45;\n        if ( (v31 & 4) != 0 )\n          *v32++ = 43;\n        if ( (v31 & 8) != 0 )\n          *v32++ = 32;\n        if ( (v31 & 0x10) != 0 )\n          *v32++ = 35;\n        if ( (v31 & 0x40) != 0 )\n          *v32++ = 73;\n        if ( (v31 & 0x20) != 0 )\n          *v32++ = 48;\n        v34 = (_BYTE *)*((_QWORD *)v12 + 3);\n        v35 = (_BYTE *)*((_QWORD *)v12 + 4);\n        if ( v34 != v35 )\n        {\n          v160 = v27;\n          *(_QWORD *)&v162 = v35 - v34;\n          memcpy(v32, v34, v35 - v34);\n          v27 = v160;\n          v32 += *(_QWORD *)&v162;\n        }\n        v36 = (_BYTE *)*((_QWORD *)v12 + 6);\n        v37 = (_BYTE *)*((_QWORD *)v12 + 7);\n        if ( v36 != v37 )\n        {\n          v160 = v27;\n          *(_QWORD *)&v162 = v37 - v36;\n          memcpy(v32, v36, v37 - v36);\n          v27 = v160;\n          v32 += *(_QWORD *)&v162;\n        }\n        if ( (unsigned int)v163 <= 0x10 )\n        {\n          v38 = 1LL << (char)v163;\n          if ( ((1LL << (char)v163) & 0x14180) != 0 )\n            goto LABEL_125;\n          if ( (v38 & 0x1000) != 0 )\n          {\n            *v32++ = 76;\n          }\n          else\n          {\n            if ( (v38 & 0x600) == 0 )\n              goto LABEL_62;\n            *v32++ = 108;\nLABEL_125:\n            *v32++ = 108;\n          }\n        }\nLABEL_62:\n        v39 = v12[72];\n        v32[1] = 0;\n        *v32 = v39;\n        v40 = *((_QWORD *)v12 + 5);\n        if ( v40 != -1 )\n        {\n          v41 = &v27[32 * v40];\n          if ( *(_DWORD *)v41 == 5 )\n          {\n            LODWORD(v160) = 1;\n            v166 = *((_DWORD *)v41 + 4);\n            goto LABEL_65;\n          }\nLABEL_200:\n          abort();\n        }\n        LODWORD(v160) = 0;\nLABEL_65:\n        v42 = *((_QWORD *)v12 + 8);\n        if ( v42 != -1 )\n        {\n          v43 = &v27[32 * v42];\n          if ( *(_DWORD *)v43 != 5 )\n            goto LABEL_200;\n          v44 = (int)v160;\n          *(&v166 + (unsigned int)v160) = *((_DWORD *)v43 + 4);\n          LODWORD(v160) = v44 + 1;\n        }\n        v45 = v19 + 2;\n        if ( v19 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v11 < v45 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 >= v45 )\n              goto LABEL_73;\n          }\n          else if ( v45 <= 0xC )\n          {\n            v11 = 12LL;\nLABEL_73:\n            if ( v14 && v14 != src )\n            {\n              v46 = (char *)realloc(v14, v11);\n              if ( v46 )\n                goto LABEL_76;\nLABEL_88:\n              v57 = v14;\n              *(_QWORD *)&v162 = __errno_location();\nLABEL_89:\n              if ( v57 == src || !v57 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v172 != v175 )\n                    free(v172);\n                  if ( v169 != v170 )\n                    free(v169);\n                  v14 = 0LL;\n                  **(_DWORD **)&v162 = 12;\n                  return v14;\n                }\nLABEL_112:\n                *(_QWORD *)&v162 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v57);\n              goto LABEL_91;\n            }\n            LOBYTE(v162) = v14 == src;\n            v94 = (char *)malloc(v11);\n            v46 = v94;\n            if ( !v94 )\n              goto LABEL_88;\n            if ( v19 && LOBYTE(v162) )\n              v46 = (char *)memcpy(v94, v14, v19);\nLABEL_76:\n            v46[v19] = 0;\n            v158 = v46;\n            v47 = __errno_location();\n            v48 = v158;\n            v158 = v32;\n            *(_QWORD *)&v162 = v47;\n            LODWORD(v154) = *v47;\n            while ( 2 )\n            {\n              v49 = 0x7FFFFFFFLL;\n              v165 = -1;\n              **(_DWORD **)&v162 = 0;\n              if ( v11 - v19 <= 0x7FFFFFFF )\n                v49 = v11 - v19;\n              switch ( (int)v163 )\n              {\n                case 1:\n                  v72 = (unsigned int)*((char *)v169 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 2:\n                  v72 = *((unsigned __int8 *)v169 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 3:\n                  v72 = (unsigned int)*((__int16 *)v169 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 4:\n                  v72 = *((unsigned __int16 *)v169 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 5:\n                case 6:\n                case 13:\n                case 14:\n                  v72 = *((unsigned int *)v169 + 8 * *((_QWORD *)v12 + 10) + 4);\nLABEL_150:\n                  v71 = &v48[v19];\n                  v157 = v48;\n                  if ( (_DWORD)v160 != 1 )\n                  {\n                    if ( (_DWORD)v160 != 2 )\n                    {\n                      v150 = &v165;\n                      goto LABEL_153;\n                    }\n                    goto LABEL_209;\n                  }\n                  v151 = &v165;\n                  v150 = (int *)v72;\n                  break;\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                case 15:\n                case 16:\n                case 17:\n                  v71 = &v48[v19];\n                  v72 = *((_QWORD *)v169 + 4 * *((_QWORD *)v12 + 10) + 2);\n                  v157 = v48;\n                  if ( (_DWORD)v160 != 1 )\n                  {\n                    if ( (_DWORD)v160 != 2 )\n                    {\n                      v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v161, v72, a5, &v165, v151);\nLABEL_131:\n                      v48 = (char *)v157;\n                      goto LABEL_132;\n                    }\nLABEL_209:\n                    v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v161, v166, a5, v167, v72);\nLABEL_210:\n                    v48 = (char *)v157;\nLABEL_132:\n                    v74 = v165;\n                    if ( v165 < 0 )\n                    {\nLABEL_154:\n                      if ( v158[1] )\n                      {\n                        v158[1] = 0;\n                        continue;\n                      }\n                      if ( v73 < 0 )\n                      {\n                        v80 = **(_DWORD **)&v162;\n                        if ( !**(_DWORD **)&v162 )\n                        {\n                          v80 = 84;\n                          if ( (v12[72] & 0xEF) != 99 )\n                            v80 = 22;\n                        }\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v172 != v175 )\n                          free(v172);\n                        if ( v169 != v170 )\n                          free(v169);\n                        **(_DWORD **)&v162 = v80;\n                        return 0LL;\n                      }\nLABEL_136:\n                      v165 = v73;\n                      v74 = v73;\nLABEL_137:\n                      if ( (unsigned int)(v74 + 1) < v49 )\n                      {\n                        v14 = v48;\n                        v15 = v19 + v74;\n                        **(_DWORD **)&v162 = (_DWORD)v154;\n                        goto LABEL_110;\n                      }\n                      if ( v11 - v19 > 0x7FFFFFFE )\n                      {\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v172 != v175 )\n                          free(v172);\n                        if ( v169 != v170 )\n                          free(v169);\n                        v14 = 0LL;\n                        **(_DWORD **)&v162 = 75;\n                        return v14;\n                      }\n                      v75 = (unsigned int)(v74 + 2);\n                      v76 = __CFADD__(v19, v75);\n                      v77 = v19 + v75;\n                      if ( (v11 & 0x8000000000000000LL) != 0LL )\n                      {\n                        if ( v11 != -1LL )\n                          goto LABEL_202;\n                      }\n                      else\n                      {\n                        if ( v76 )\n                          goto LABEL_202;\n                        if ( 2 * v11 >= v77 )\n                          v77 = 2 * v11;\n                        if ( v11 < v77 )\n                        {\n                          v11 *= 2LL;\n                          if ( v11 < v77 )\n                          {\n                            if ( v77 == -1LL )\n                            {\nLABEL_202:\n                              v57 = v48;\n                              goto LABEL_89;\n                            }\n                            v11 = v77;\n                          }\n                          v78 = v48 == src;\n                          if ( !v48 || v48 == src )\n                          {\n                            v157 = v48;\n                            v93 = (char *)malloc(v11);\n                            v48 = (char *)v157;\n                            if ( !v93 )\n                              goto LABEL_202;\n                            if ( v19 && v78 )\n                              v48 = (char *)memcpy(v93, v157, v19);\n                            else\n                              v48 = v93;\n                          }\n                          else\n                          {\n                            v157 = v48;\n                            v79 = (char *)realloc(v48, v11);\n                            v48 = (char *)v157;\n                            if ( !v79 )\n                              goto LABEL_202;\n                            v48 = v79;\n                          }\n                        }\n                      }\n                      continue;\n                    }\nLABEL_133:\n                    if ( v74 < v49 && v48[v74 + v19] )\n                      goto LABEL_200;\n                    if ( v74 >= v73 )\n                      goto LABEL_137;\n                    goto LABEL_136;\n                  }\n                  v151 = &v165;\n                  v150 = (int *)v72;\n                  break;\n                case 11:\n                  v84 = *((_QWORD *)v12 + 10);\n                  v85 = &v48[v19];\n                  v157 = v48;\n                  a5 = *((double *)v169 + 4 * v84 + 2);\n                  if ( (_DWORD)v160 == 1 )\n                  {\n                    v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v161, v166, a5, &v165, v151);\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v160 != 2 )\n                    {\n                      v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v161, &v165, a5, v152, v153);\n                      v48 = (char *)v157;\n                      goto LABEL_132;\n                    }\n                    v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v161, v166, a5, v167, &v165);\n                  }\n                  v48 = (char *)v157;\n                  goto LABEL_132;\n                case 12:\n                  v81 = *((_QWORD *)v12 + 10);\n                  v82 = &v48[v19];\n                  v157 = v48;\n                  v83 = *((unsigned __int128 *)v169 + 2 * v81 + 1);\n                  if ( (_DWORD)v160 == 1 )\n                  {\n                    v73 = __snprintf_chk(v82, v49, 1LL, -1LL, v161, v166, a5, v83, v83 >> 64);\n                    goto LABEL_210;\n                  }\n                  if ( (_DWORD)v160 != 2 )\n                  {\n                    v73 = __snprintf_chk(v82, v49, 1LL, -1LL, v161, &v165, a5, v83, v83 >> 64);\n                    goto LABEL_131;\n                  }\n                  v73 = __snprintf_chk(v82, v49, 1LL, -1LL, v161, v166, a5, v167, v149);\n                  v48 = (char *)v157;\n                  goto LABEL_132;\n                default:\n                  goto LABEL_408;\n              }\n              break;\n            }\n            v72 = v166;\nLABEL_153:\n            v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v161, v72, a5, v150, v151);\n            v74 = v165;\n            v48 = (char *)v157;\n            if ( v165 < 0 )\n              goto LABEL_154;\n            goto LABEL_133;\n          }\n          if ( v19 != -3LL )\n          {\n            v11 = v19 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v46 = v14;\n        goto LABEL_76;\n      }\n      switch ( v29 )\n      {\n        case 18:\n          v15 = v19;\n          **((_BYTE **)v28 + 2) = v19;\n          break;\n        case 19:\n          v15 = v19;\n          **((_WORD **)v28 + 2) = v19;\n          break;\n        case 20:\n          v15 = v19;\n          **((_DWORD **)v28 + 2) = v19;\n          break;\n        case 21:\n        case 22:\n          v15 = v19;\n          **((_QWORD **)v28 + 2) = v19;\n          break;\n        default:\nLABEL_408:\n          abort();\n      }\nLABEL_110:\n      v13 = (_BYTE *)*((_QWORD *)v12 + 1);\n      v12 += 88;\n      v16 = *(_BYTE **)v12;\n      ++v159;\n      if ( v16 != v13 )\n        goto LABEL_14;\nLABEL_111:\n      v19 = v15;\n    }\n    v107 = v19;\n    v108 = v19 + 1;\n    if ( v19 == -1LL )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v11 < v108 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v108 )\n        {\nLABEL_303:\n          v109 = v14 == src;\n          if ( !v14 || v14 == src )\n          {\n            v142 = (char *)malloc(v11);\n            if ( !v142 )\n              goto LABEL_88;\n            if ( v107 && v109 )\n              v14 = (char *)memcpy(v142, v14, v107);\n            else\n              v14 = v142;\n          }\n          else\n          {\n            v110 = (char *)realloc(v14, v11);\n            if ( !v110 )\n              goto LABEL_126;\n            v14 = v110;\n          }\n          goto LABEL_307;\n        }\n      }\n      else if ( v108 <= 0xC )\n      {\n        v11 = 12LL;\n        goto LABEL_303;\n      }\n      if ( v19 == -2LL )\n        goto LABEL_88;\n      v11 = v19 + 1;\n      goto LABEL_303;\n    }\nLABEL_307:\n    v14[v107] = 0;\n    if ( v11 > v108 && v14 != src )\n    {\n      v111 = (char *)realloc(v14, v108);\n      if ( v111 )\n        v14 = v111;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v172 != v175 )\n      free(v172);\n    if ( v169 != v170 )\n      free(v169);\n    *v156 = v107;\n    return v14;\n  }\n  if ( v172 != v175 )\n    free(v172);\n  if ( v169 != v170 )\n    free(v169);\n  v14 = 0LL;\n  *__errno_location() = 22;\n  return v14;\n}\n\nchar *__fastcall sub_40E360(void *a1, size_t *a2, _BYTE *a3, __int64 a4, double a5)\n{\n  __int64 v7; // rax\n  unsigned __int64 v8; // rax\n  size_t v9; // rdi\n  __int64 *v10; // rax\n  size_t v11; // r12\n  char *v12; // r14\n  _BYTE *v13; // r8\n  char *v14; // rbx\n  size_t v15; // r15\n  _BYTE *v16; // rcx\n  void *v17; // rcx\n  unsigned __int64 v18; // rax\n  size_t v19; // r13\n  bool v20; // dl\n  char *v21; // rax\n  char *v22; // rax\n  void *v23; // rsp\n  char *v24; // rax\n  char v25; // r15\n  __int64 v26; // rax\n  char *v27; // r8\n  long double *v28; // rdx\n  int v29; // eax\n  char v30; // al\n  int v31; // eax\n  char *v32; // r15\n  __int64 v33; // rdi\n  _BYTE *v34; // rsi\n  _BYTE *v35; // rdx\n  _BYTE *v36; // rsi\n  _BYTE *v37; // rdx\n  __int64 v38; // rax\n  char v39; // al\n  __int64 v40; // rax\n  char *v41; // rax\n  __int64 v42; // rax\n  char *v43; // r8\n  int v44; // eax\n  unsigned __int64 v45; // rax\n  char *v46; // r11\n  int *v47; // rax\n  char *v48; // r11\n  unsigned __int64 v49; // rbx\n  unsigned __int64 v50; // r10\n  char *v51; // rdx\n  char *v52; // rcx\n  __int64 v53; // rsi\n  _DWORD *v54; // r8\n  unsigned __int64 v55; // rdx\n  unsigned __int64 v56; // rcx\n  void *v57; // r15\n  unsigned __int64 v59; // rax\n  char *v60; // rax\n  char v62; // fps^1\n  char *v66; // rdx\n  char *v67; // rdi\n  int v68; // r11d\n  __int64 v69; // rcx\n  _DWORD *v70; // rcx\n  char *v71; // rdi\n  unsigned __int64 v72; // r9\n  int v73; // eax\n  int v74; // edx\n  __int64 v75; // rax\n  bool v76; // cf\n  unsigned __int64 v77; // rax\n  bool v78; // bl\n  char *v79; // rax\n  int v80; // ebx\n  __int64 v81; // rax\n  char *v82; // rdi\n  unsigned __int128 v83; // fst7\n  __int64 v84; // rax\n  char *v85; // rdi\n  unsigned __int64 v86; // rax\n  void *v87; // rax\n  char *v88; // rax\n  char *v89; // rcx\n  int v90; // r8d\n  __int16 v91; // ax\n  char *v92; // r15\n  char *v93; // rax\n  char *v94; // rax\n  char *v95; // rax\n  char v96; // al\n  char *v97; // r9\n  size_t v98; // r8\n  unsigned __int64 v99; // r10\n  char *v100; // rdi\n  __int64 v101; // rax\n  char *v102; // r10\n  unsigned __int64 v103; // rax\n  char *v104; // rax\n  char *v105; // rsi\n  char v106; // al\n  size_t v107; // r15\n  size_t v108; // r14\n  bool v109; // r13\n  char *v110; // rax\n  char *v111; // rax\n  __int64 v112; // rax\n  char *v113; // r10\n  char *v114; // rax\n  char *v115; // rax\n  char *v116; // rax\n  __int64 v117; // rsi\n  __int64 v118; // rdx\n  char v119; // al\n  __int64 v120; // rdx\n  char *v121; // rax\n  char *v122; // rax\n  __int64 v123; // rdx\n  char v124; // al\n  char *v125; // rax\n  char *v126; // rsi\n  __int64 v127; // r9\n  __int64 v128; // rdx\n  char *v129; // rax\n  char *v130; // rsi\n  char *v131; // rdi\n  __int64 v132; // rax\n  __int64 v133; // rsi\n  unsigned __int64 v134; // rax\n  char v135; // al\n  __int64 v136; // rsi\n  char v137; // al\n  char *v138; // rax\n  __int64 v139; // rdx\n  char v140; // al\n  char *v141; // rax\n  char *v142; // rax\n  char *v143; // rax\n  void *v144; // rdx\n  char v145; // al\n  _BYTE *v146; // rax\n  char *v147; // rax\n  char v148; // al\n  __int64 v149; // [rsp-8h] [rbp-718h]\n  int *v150; // [rsp+10h] [rbp-700h]\n  int *v151; // [rsp+18h] [rbp-6F8h]\n  __int64 v152; // [rsp+20h] [rbp-6F0h] BYREF\n  unsigned __int64 v153; // [rsp+28h] [rbp-6E8h]\n  char *v154; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v156; // [rsp+40h] [rbp-6D0h]\n  void *v157; // [rsp+48h] [rbp-6C8h]\n  char *v158; // [rsp+50h] [rbp-6C0h]\n  __int64 v159; // [rsp+58h] [rbp-6B8h]\n  _BYTE *v160; // [rsp+60h] [rbp-6B0h]\n  __int64 *v161; // [rsp+68h] [rbp-6A8h]\n  long double v162; // [rsp+70h] [rbp-6A0h]\n  void *v163; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v165; // [rsp+94h] [rbp-67Ch] BYREF\n  unsigned int v166; // [rsp+98h] [rbp-678h]\n  unsigned int v167; // [rsp+9Ch] [rbp-674h]\n  char v168[8]; // [rsp+A0h] [rbp-670h] BYREF\n  void *v169; // [rsp+A8h] [rbp-668h]\n  _BYTE v170[224]; // [rsp+B0h] [rbp-660h] BYREF\n  __int64 v171; // [rsp+190h] [rbp-580h] BYREF\n  void *v172; // [rsp+198h] [rbp-578h]\n  __int64 v173; // [rsp+1A0h] [rbp-570h]\n  __int64 v174; // [rsp+1A8h] [rbp-568h]\n  _BYTE v175[624]; // [rsp+1B0h] [rbp-560h] BYREF\n  char v176[752]; // [rsp+420h] [rbp-2F0h] BYREF\n\n  src = a1;\n  v156 = a2;\n  if ( (int)sub_4101F0(a3, &v171, v168) < 0 )\n    return 0LL;\n  if ( (int)sub_40FFD0(a4, v168) >= 0 )\n  {\n    v7 = v173 + 7;\n    if ( (unsigned __int64)(v173 + 7) <= 6 )\n      v7 = -1LL;\n    v76 = __CFADD__(v174, v7);\n    v8 = v174 + v7;\n    if ( v76 )\n      goto LABEL_112;\n    v9 = v8 + 6;\n    if ( v8 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v9 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v23 = alloca(v8 + 14);\n      v161 = &v152;\n    }\n    else\n    {\n      if ( v8 == -7LL )\n        goto LABEL_112;\n      v10 = (__int64 *)malloc(v9);\n      v161 = v10;\n      if ( !v10 )\n        goto LABEL_112;\n      ptr = v10;\n    }\n    v11 = 0LL;\n    if ( src )\n      v11 = *v156;\n    v12 = (char *)v172;\n    v13 = a3;\n    v14 = (char *)src;\n    v159 = 0LL;\n    v15 = 0LL;\n    v16 = *(_BYTE **)v172;\n    if ( *(_BYTE **)v172 == v13 )\n      goto LABEL_111;\nLABEL_14:\n    v17 = (void *)(v16 - v13);\n    v18 = (unsigned __int64)v17 + v15;\n    v19 = (size_t)v17 + v15;\n    if ( __CFADD__(v17, v15) )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n      v19 = -1LL;\n    }\n    else if ( v11 < v18 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v18 )\n        {\nLABEL_28:\n          v20 = v14 == src;\n          if ( !v14 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v18 <= 0xC )\n      {\n        v11 = 12LL;\n        v20 = v14 == src;\n        if ( !v14 )\n        {\nLABEL_19:\n          v160 = v13;\n          LOBYTE(v162) = v20;\n          v163 = v17;\n          v21 = (char *)malloc(v11);\n          v17 = v163;\n          v13 = v160;\n          if ( !v21 )\n            goto LABEL_88;\n          if ( v15 && LOBYTE(v162) )\n          {\n            *(_QWORD *)&v162 = v160;\n            v22 = (char *)memcpy(v21, v14, v15);\n            v17 = v163;\n            v13 = *(_BYTE **)&v162;\n            v14 = v22;\n          }\n          else\n          {\n            v14 = v21;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v20 )\n        {\n          *(_QWORD *)&v162 = v13;\n          v163 = v17;\n          v24 = (char *)realloc(v14, v11);\n          if ( !v24 )\n            goto LABEL_126;\n          v17 = v163;\n          v13 = *(_BYTE **)&v162;\n          v14 = v24;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v18 == -1LL )\n        goto LABEL_88;\n      v11 = (size_t)v17 + v15;\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v14[v15], v13, (size_t)v17);\n    while ( v171 != v159 )\n    {\n      v25 = v12[72];\n      v26 = *((_QWORD *)v12 + 10);\n      if ( v25 == 37 )\n      {\n        if ( v26 != -1 )\n          goto LABEL_200;\n        v59 = v19 + 1;\n        v15 = v19 + 1;\n        if ( v19 == -1LL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n          v15 = -1LL;\n        }\n        else if ( v11 < v59 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 < v59 )\n              goto LABEL_238;\n          }\n          else\n          {\n            if ( v59 <= 0xC )\n            {\n              v11 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_238:\n            if ( v19 == -2LL )\n              goto LABEL_88;\n            v11 = v19 + 1;\n          }\nLABEL_105:\n          if ( v14 && v14 != src )\n          {\n            v60 = (char *)realloc(v14, v11);\n            if ( v60 )\n            {\n              v14 = v60;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v57 = v14;\n            *(_QWORD *)&v162 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v163) = v14 == src;\n          v95 = (char *)malloc(v11);\n          if ( !v95 )\n            goto LABEL_88;\n          if ( v19 && (_BYTE)v163 )\n            v14 = (char *)memcpy(v95, v14, v19);\n          else\n            v14 = v95;\n        }\nLABEL_109:\n        v14[v19] = 37;\n        goto LABEL_110;\n      }\n      if ( v26 == -1 )\n        goto LABEL_200;\n      v27 = (char *)v169;\n      v28 = (long double *)((char *)v169 + 32 * v26);\n      v29 = *(_DWORD *)v28;\n      LODWORD(v163) = *(_DWORD *)v28;\n      if ( v25 != 110 )\n      {\n        v30 = v25 & 0xDF;\n        if ( ((unsigned __int8)((v25 & 0xDF) - 69) <= 2u || v30 == 65) && (_DWORD)v163 == 12 )\n        {\n          _FST7 = v28[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v66 = (char *)*((_QWORD *)v12 + 3);\n            v67 = (char *)*((_QWORD *)v12 + 4);\n            v68 = *((_DWORD *)v12 + 4);\n            if ( v66 == v67 )\n            {\n              v50 = 0LL;\n            }\n            else\n            {\n              v69 = *((_QWORD *)v12 + 5);\n              if ( v69 == -1 )\n              {\n                v50 = 0LL;\n                v163 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v126 = v66 + 1;\n                  v127 = -1LL;\n                  v128 = *v66 - 48;\n                  if ( v50 <= 0x1999999999999999LL )\n                    v127 = 10 * v50;\n                  v76 = __CFADD__(v127, v128);\n                  v50 = v127 + v128;\n                  v66 = v126;\n                  if ( v76 )\n                  {\n                    if ( v67 == v126 )\n                    {\nLABEL_81:\n                      v50 = (unsigned __int64)v163;\n                      goto LABEL_82;\n                    }\n                    while ( *v66++ != 48 )\n                    {\n                      if ( v67 == v66 )\n                        goto LABEL_81;\n                    }\n                    v50 = -1LL;\n                  }\n                  if ( v67 == v66 )\n                    goto LABEL_82;\n                }\n              }\n              v70 = (char *)v169 + 32 * v69;\n              if ( *v70 != 5 )\n                goto LABEL_200;\n              v50 = (int)v70[4];\n              if ( (v50 & 0x80000000) != 0LL )\n              {\n                v68 |= 2u;\n                v50 = -(__int64)v50;\n              }\n            }\nLABEL_82:\n            v51 = (char *)*((_QWORD *)v12 + 6);\n            v52 = (char *)*((_QWORD *)v12 + 7);\n            if ( v51 != v52 )\n            {\n              v53 = *((_QWORD *)v12 + 8);\n              if ( v53 == -1 )\n              {\n                v129 = v51 + 1;\n                v55 = 0LL;\n                if ( v52 != v129 )\n                {\n                  v130 = v129;\n                  while ( 1 )\n                  {\n                    v131 = v130 + 1;\n                    v132 = *v130 - 48;\n                    v133 = -1LL;\n                    if ( v55 <= 0x1999999999999999LL )\n                      v133 = 10 * v55;\n                    v76 = __CFADD__(v133, v132);\n                    v134 = v133 + v132;\n                    v130 = v131;\n                    v55 = v134;\n                    if ( v76 )\n                    {\n                      if ( v52 == v131 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v130 = v131 + 1;\n                        if ( *v131 == 48 )\n                          break;\n                        if ( v52 == v130 )\n                          goto LABEL_88;\n                        ++v131;\n                      }\n                      v55 = -1LL;\n                    }\n                    if ( v52 == v130 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_375;\n              }\n              v54 = (char *)v169 + 32 * v53;\n              if ( *v54 != 5 )\n                goto LABEL_200;\n              v55 = (int)v54[4];\n              if ( (v55 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v55 )\n                {\n                  v56 = v55 + 12;\n                  if ( v55 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_190:\n                  v86 = v56;\n                  if ( v50 >= v56 )\n                    v86 = v50;\n                  v76 = __CFADD__(v86, 1LL);\n                  v87 = (void *)(v86 + 1);\n                  v163 = v87;\n                  if ( v76 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v87 <= 0x2BC )\n                  {\n                    v89 = v176;\n                  }\n                  else\n                  {\n                    v157 = (void *)v50;\n                    v158 = (char *)v55;\n                    LODWORD(v160) = v68;\n                    v162 = _FST7;\n                    if ( v87 == (void *)-1LL )\n                      goto LABEL_88;\n                    v88 = (char *)malloc((size_t)v87);\n                    v68 = (int)v160;\n                    _FST7 = v162;\n                    v89 = v88;\n                    v55 = (unsigned __int64)v158;\n                    v50 = (unsigned __int64)v157;\n                    if ( !v88 )\n                      goto LABEL_88;\n                  }\n                  v90 = (unsigned __int16)v166;\n                  LOBYTE(v91) = v166;\n                  HIBYTE(v91) = BYTE1(v166) | 3;\n                  LOWORD(v166) = v91;\n                  __asm { fxam }\n                  if ( (v62 & 2) != 0 )\n                  {\n                    *v89 = 45;\n                    _FST7 = -_FST7;\n                    v92 = v89 + 1;\n                  }\n                  else if ( (v68 & 4) != 0 )\n                  {\n                    v92 = v89 + 1;\n                    *v89 = 43;\n                  }\n                  else\n                  {\n                    v92 = v89;\n                    if ( (v68 & 8) != 0 )\n                    {\n                      v92 = v89 + 1;\n                      *v89 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_200;\n                    v97 = v92 + 3;\n                    if ( (unsigned __int8)(v12[72] - 65) > 0x19u )\n                    {\n                      v92[2] = 102;\n                      *(_WORD *)v92 = 28265;\n                    }\n                    else\n                    {\n                      v92[2] = 70;\n                      *(_WORD *)v92 = 20041;\n                    }\n                    v92 = 0LL;\n                    goto LABEL_263;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_200;\n                  v96 = v12[72] & 0xDF;\n                  switch ( v96 )\n                  {\n                    case 'F':\n                      *v92 = 48;\n                      if ( (v68 & 0x10) != 0 || v55 )\n                      {\n                        LODWORD(v153) = v90;\n                        v154 = (char *)v50;\n                        v157 = v89;\n                        v158 = (char *)v55;\n                        LODWORD(v160) = v68;\n                        *(_QWORD *)&v162 = v92 + 2;\n                        v122 = nl_langinfo(0x10000);\n                        v123 = (__int64)v158;\n                        v97 = *(char **)&v162;\n                        v124 = *v122;\n                        LOBYTE(v68) = (_BYTE)v160;\n                        v89 = (char *)v157;\n                        v50 = (unsigned __int64)v154;\n                        LOWORD(v90) = v153;\n                        if ( !v124 )\n                          v124 = 46;\n                        v92[1] = v124;\n                        if ( v123 )\n                        {\n                          v125 = v97;\n                          do\n                            *v125++ = 48;\n                          while ( v125 != &v92[v123 + 2] );\n                          v97 += v123;\n                        }\n                        goto LABEL_263;\n                      }\n                      goto LABEL_262;\n                    case 'E':\n                      *v92 = 48;\n                      if ( (v68 & 0x10) != 0 || (v105 = v92 + 1, v55) )\n                      {\n                        LODWORD(v153) = v90;\n                        v154 = (char *)v50;\n                        v157 = v89;\n                        v158 = (char *)v55;\n                        LODWORD(v160) = v68;\n                        *(_QWORD *)&v162 = v92 + 2;\n                        v138 = nl_langinfo(0x10000);\n                        v139 = (__int64)v158;\n                        v105 = *(char **)&v162;\n                        v140 = *v138;\n                        LOBYTE(v68) = (_BYTE)v160;\n                        v89 = (char *)v157;\n                        v50 = (unsigned __int64)v154;\n                        LOWORD(v90) = v153;\n                        if ( !v140 )\n                          v140 = 46;\n                        v92[1] = v140;\n                        if ( v139 )\n                        {\n                          v141 = v105;\n                          do\n                            *v141++ = 48;\n                          while ( v141 != &v92[v139 + 2] );\n                          v105 += v139;\n                        }\n                      }\n                      v106 = v12[72];\n                      v97 = v105 + 4;\n                      v105[3] = 48;\n                      *v105 = v106;\n                      *(_WORD *)(v105 + 1) = 12331;\n                      goto LABEL_263;\n                    case 'G':\n                      *v92 = 48;\n                      if ( (v68 & 0x10) != 0 )\n                      {\n                        if ( v55 )\n                        {\n                          HIDWORD(v152) = v90;\n                          v153 = v50;\n                          v154 = v92 + 2;\n                          v157 = v89;\n                          LODWORD(v158) = v68;\n                          v160 = (_BYTE *)v55;\n                          *(_QWORD *)&v162 = v55 - 1;\n                          v116 = nl_langinfo(0x10000);\n                          v117 = *(_QWORD *)&v162;\n                          v118 = (__int64)v160;\n                          v119 = *v116;\n                          LOBYTE(v68) = (_BYTE)v158;\n                          v89 = (char *)v157;\n                          v97 = v154;\n                          v50 = v153;\n                          LOWORD(v90) = WORD2(v152);\n                          if ( !v119 )\n                            v119 = 46;\n                          v92[1] = v119;\n                          if ( v117 )\n                          {\n                            v120 = (__int64)&v92[v118 + 1];\n                            v121 = v97;\n                            do\n                              *v121++ = 48;\n                            while ( v121 != (char *)v120 );\n                            v97 += v117;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v154) = v90;\n                          v157 = (void *)v50;\n                          v158 = v92 + 2;\n                          v160 = v89;\n                          LODWORD(v162) = v68;\n                          v147 = nl_langinfo(0x10000);\n                          LOBYTE(v68) = LOBYTE(v162);\n                          v89 = v160;\n                          v148 = *v147;\n                          v97 = v158;\n                          v50 = (unsigned __int64)v157;\n                          LOWORD(v90) = (_WORD)v154;\n                          if ( !v148 )\n                            v148 = 46;\n                          v92[1] = v148;\n                        }\n                        goto LABEL_263;\n                      }\nLABEL_262:\n                      v97 = v92 + 1;\n                      goto LABEL_263;\n                  }\n                  if ( v96 != 65 )\n                    goto LABEL_200;\n                  *v92 = 48;\n                  *(_QWORD *)&v162 = v92 + 2;\n                  v135 = v12[72];\n                  v92[2] = 48;\n                  v92[1] = v135 + 23;\n                  if ( (v68 & 0x10) != 0 || (v136 = (__int64)(v92 + 3), v55) )\n                  {\n                    HIDWORD(v152) = v90;\n                    v153 = v50;\n                    v154 = v89;\n                    v157 = (void *)v55;\n                    LODWORD(v158) = v68;\n                    v160 = v92 + 4;\n                    v143 = nl_langinfo(0x10000);\n                    v144 = v157;\n                    v136 = (__int64)v160;\n                    v145 = *v143;\n                    LOBYTE(v68) = (_BYTE)v158;\n                    v89 = v154;\n                    v50 = v153;\n                    LOWORD(v90) = WORD2(v152);\n                    if ( !v145 )\n                      v145 = 46;\n                    v92[3] = v145;\n                    if ( v144 )\n                    {\n                      v146 = (_BYTE *)v136;\n                      do\n                        *v146++ = 48;\n                      while ( v146 != (_BYTE *)v144 + (_QWORD)v92 + 4 );\n                      v136 += (__int64)v144;\n                    }\n                  }\n                  v137 = v12[72];\n                  v97 = (char *)(v136 + 3);\n                  *(_WORD *)(v136 + 1) = 12331;\n                  v92 = *(char **)&v162;\n                  *(_BYTE *)v136 = v137 + 15;\nLABEL_263:\n                  LOWORD(v166) = v90;\n                  v98 = v97 - v89;\n                  if ( v50 > v97 - v89 )\n                  {\n                    v99 = v50 - v98;\n                    v100 = &v97[v99];\n                    v98 = &v97[v99] - v89;\n                    if ( (v68 & 2) != 0 )\n                    {\n                      if ( v99 )\n                      {\n                        do\n                          *v97++ = 32;\n                        while ( v100 != v97 );\n                      }\n                    }\n                    else if ( (v68 & 0x20) != 0 && v92 )\n                    {\n                      if ( v92 >= v97 )\n                      {\n                        v92 = v97;\n                      }\n                      else\n                      {\n                        v101 = -1LL;\n                        do\n                        {\n                          v100[v101] = v97[v101];\n                          --v101;\n                        }\n                        while ( v101 != v92 - 1 - v97 );\n                      }\n                      if ( v99 )\n                      {\n                        v102 = &v92[v99];\n                        do\n                          *v92++ = 48;\n                        while ( v92 != v102 );\n                      }\n                    }\n                    else\n                    {\n                      v112 = -1LL;\n                      if ( v89 < v97 )\n                      {\n                        do\n                        {\n                          v100[v112] = v97[v112];\n                          --v112;\n                        }\n                        while ( v89 - 1 - v97 != v112 );\n                        v97 = v89;\n                      }\n                      if ( v99 )\n                      {\n                        v113 = &v97[v99];\n                        do\n                          *v97++ = 32;\n                        while ( v97 != v113 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v163 <= v98 )\n                    goto LABEL_200;\n                  v103 = v98 + v19;\n                  v15 = v98 + v19;\n                  if ( v11 - v19 <= v98 )\n                  {\n                    if ( __CFADD__(v98, v19) )\n                    {\n                      if ( v11 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v11 < v103 )\n                    {\n                      if ( v11 )\n                      {\n                        if ( (v11 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v11 *= 2LL;\n                        if ( v11 < v103 )\n                          goto LABEL_373;\n                      }\n                      else\n                      {\n                        if ( v103 <= 0xC )\n                        {\n                          v11 = 12LL;\n                          goto LABEL_280;\n                        }\nLABEL_373:\n                        if ( v103 == -1LL )\n                          goto LABEL_88;\n                        v11 = v98 + v19;\n                      }\nLABEL_280:\n                      if ( !v14 || v14 == src )\n                      {\n                        LOBYTE(v160) = v14 == src;\n                        *(_QWORD *)&v162 = v98;\n                        v163 = v89;\n                        v114 = (char *)malloc(v11);\n                        v89 = (char *)v163;\n                        v98 = *(_QWORD *)&v162;\n                        if ( !v114 )\n                          goto LABEL_88;\n                        if ( v19 && (_BYTE)v160 )\n                        {\n                          v115 = (char *)memcpy(v114, v14, v19);\n                          v89 = (char *)v163;\n                          v98 = *(_QWORD *)&v162;\n                          v14 = v115;\n                        }\n                        else\n                        {\n                          v14 = v114;\n                        }\n                      }\n                      else\n                      {\n                        *(_QWORD *)&v162 = v98;\n                        v163 = v89;\n                        v104 = (char *)realloc(v14, v11);\n                        if ( !v104 )\n                          goto LABEL_88;\n                        v89 = (char *)v163;\n                        v98 = *(_QWORD *)&v162;\n                        v14 = v104;\n                      }\n                    }\n                  }\n                  v163 = v89;\n                  memcpy(&v14[v19], v89, v98);\n                  if ( v163 != v176 )\n                    free(v163);\n                  goto LABEL_110;\n                }\nLABEL_375:\n                v56 = 12LL;\n                goto LABEL_190;\n              }\n            }\n            v56 = 12LL;\n            if ( v30 != 65 )\n              v56 = 18LL;\n            v55 = 0LL;\n            if ( v30 != 65 )\n              v55 = 6LL;\n            goto LABEL_190;\n          }\n        }\n        v31 = *((_DWORD *)v12 + 4);\n        v32 = (char *)v161 + 1;\n        *(_BYTE *)v161 = 37;\n        if ( (v31 & 1) != 0 )\n        {\n          v33 = (__int64)v161;\n          *((_BYTE *)v161 + 1) = 39;\n          v32 = (char *)(v33 + 2);\n        }\n        if ( (v31 & 2) != 0 )\n          *v32++ = 45;\n        if ( (v31 & 4) != 0 )\n          *v32++ = 43;\n        if ( (v31 & 8) != 0 )\n          *v32++ = 32;\n        if ( (v31 & 0x10) != 0 )\n          *v32++ = 35;\n        if ( (v31 & 0x40) != 0 )\n          *v32++ = 73;\n        if ( (v31 & 0x20) != 0 )\n          *v32++ = 48;\n        v34 = (_BYTE *)*((_QWORD *)v12 + 3);\n        v35 = (_BYTE *)*((_QWORD *)v12 + 4);\n        if ( v34 != v35 )\n        {\n          v160 = v27;\n          *(_QWORD *)&v162 = v35 - v34;\n          memcpy(v32, v34, v35 - v34);\n          v27 = v160;\n          v32 += *(_QWORD *)&v162;\n        }\n        v36 = (_BYTE *)*((_QWORD *)v12 + 6);\n        v37 = (_BYTE *)*((_QWORD *)v12 + 7);\n        if ( v36 != v37 )\n        {\n          v160 = v27;\n          *(_QWORD *)&v162 = v37 - v36;\n          memcpy(v32, v36, v37 - v36);\n          v27 = v160;\n          v32 += *(_QWORD *)&v162;\n        }\n        if ( (unsigned int)v163 <= 0x10 )\n        {\n          v38 = 1LL << (char)v163;\n          if ( ((1LL << (char)v163) & 0x14180) != 0 )\n            goto LABEL_125;\n          if ( (v38 & 0x1000) != 0 )\n          {\n            *v32++ = 76;\n          }\n          else\n          {\n            if ( (v38 & 0x600) == 0 )\n              goto LABEL_62;\n            *v32++ = 108;\nLABEL_125:\n            *v32++ = 108;\n          }\n        }\nLABEL_62:\n        v39 = v12[72];\n        v32[1] = 0;\n        *v32 = v39;\n        v40 = *((_QWORD *)v12 + 5);\n        if ( v40 != -1 )\n        {\n          v41 = &v27[32 * v40];\n          if ( *(_DWORD *)v41 == 5 )\n          {\n            LODWORD(v160) = 1;\n            v166 = *((_DWORD *)v41 + 4);\n            goto LABEL_65;\n          }\nLABEL_200:\n          abort();\n        }\n        LODWORD(v160) = 0;\nLABEL_65:\n        v42 = *((_QWORD *)v12 + 8);\n        if ( v42 != -1 )\n        {\n          v43 = &v27[32 * v42];\n          if ( *(_DWORD *)v43 != 5 )\n            goto LABEL_200;\n          v44 = (int)v160;\n          *(&v166 + (unsigned int)v160) = *((_DWORD *)v43 + 4);\n          LODWORD(v160) = v44 + 1;\n        }\n        v45 = v19 + 2;\n        if ( v19 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v11 < v45 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 >= v45 )\n              goto LABEL_73;\n          }\n          else if ( v45 <= 0xC )\n          {\n            v11 = 12LL;\nLABEL_73:\n            if ( v14 && v14 != src )\n            {\n              v46 = (char *)realloc(v14, v11);\n              if ( v46 )\n                goto LABEL_76;\nLABEL_88:\n              v57 = v14;\n              *(_QWORD *)&v162 = __errno_location();\nLABEL_89:\n              if ( v57 == src || !v57 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v172 != v175 )\n                    free(v172);\n                  if ( v169 != v170 )\n                    free(v169);\n                  v14 = 0LL;\n                  **(_DWORD **)&v162 = 12;\n                  return v14;\n                }\nLABEL_112:\n                *(_QWORD *)&v162 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v57);\n              goto LABEL_91;\n            }\n            LOBYTE(v162) = v14 == src;\n            v94 = (char *)malloc(v11);\n            v46 = v94;\n            if ( !v94 )\n              goto LABEL_88;\n            if ( v19 && LOBYTE(v162) )\n              v46 = (char *)memcpy(v94, v14, v19);\nLABEL_76:\n            v46[v19] = 0;\n            v158 = v46;\n            v47 = __errno_location();\n            v48 = v158;\n            v158 = v32;\n            *(_QWORD *)&v162 = v47;\n            LODWORD(v154) = *v47;\n            while ( 2 )\n            {\n              v49 = 0x7FFFFFFFLL;\n              v165 = -1;\n              **(_DWORD **)&v162 = 0;\n              if ( v11 - v19 <= 0x7FFFFFFF )\n                v49 = v11 - v19;\n              switch ( (int)v163 )\n              {\n                case 1:\n                  v72 = (unsigned int)*((char *)v169 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 2:\n                  v72 = *((unsigned __int8 *)v169 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 3:\n                  v72 = (unsigned int)*((__int16 *)v169 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 4:\n                  v72 = *((unsigned __int16 *)v169 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 5:\n                case 6:\n                case 13:\n                case 14:\n                  v72 = *((unsigned int *)v169 + 8 * *((_QWORD *)v12 + 10) + 4);\nLABEL_150:\n                  v71 = &v48[v19];\n                  v157 = v48;\n                  if ( (_DWORD)v160 != 1 )\n                  {\n                    if ( (_DWORD)v160 != 2 )\n                    {\n                      v150 = &v165;\n                      goto LABEL_153;\n                    }\n                    goto LABEL_209;\n                  }\n                  v151 = &v165;\n                  v150 = (int *)v72;\n                  break;\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                case 15:\n                case 16:\n                case 17:\n                  v71 = &v48[v19];\n                  v72 = *((_QWORD *)v169 + 4 * *((_QWORD *)v12 + 10) + 2);\n                  v157 = v48;\n                  if ( (_DWORD)v160 != 1 )\n                  {\n                    if ( (_DWORD)v160 != 2 )\n                    {\n                      v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v161, v72, a5, &v165, v151);\nLABEL_131:\n                      v48 = (char *)v157;\n                      goto LABEL_132;\n                    }\nLABEL_209:\n                    v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v161, v166, a5, v167, v72);\nLABEL_210:\n                    v48 = (char *)v157;\nLABEL_132:\n                    v74 = v165;\n                    if ( v165 < 0 )\n                    {\nLABEL_154:\n                      if ( v158[1] )\n                      {\n                        v158[1] = 0;\n                        continue;\n                      }\n                      if ( v73 < 0 )\n                      {\n                        v80 = **(_DWORD **)&v162;\n                        if ( !**(_DWORD **)&v162 )\n                        {\n                          v80 = 84;\n                          if ( (v12[72] & 0xEF) != 99 )\n                            v80 = 22;\n                        }\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v172 != v175 )\n                          free(v172);\n                        if ( v169 != v170 )\n                          free(v169);\n                        **(_DWORD **)&v162 = v80;\n                        return 0LL;\n                      }\nLABEL_136:\n                      v165 = v73;\n                      v74 = v73;\nLABEL_137:\n                      if ( (unsigned int)(v74 + 1) < v49 )\n                      {\n                        v14 = v48;\n                        v15 = v19 + v74;\n                        **(_DWORD **)&v162 = (_DWORD)v154;\n                        goto LABEL_110;\n                      }\n                      if ( v11 - v19 > 0x7FFFFFFE )\n                      {\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v172 != v175 )\n                          free(v172);\n                        if ( v169 != v170 )\n                          free(v169);\n                        v14 = 0LL;\n                        **(_DWORD **)&v162 = 75;\n                        return v14;\n                      }\n                      v75 = (unsigned int)(v74 + 2);\n                      v76 = __CFADD__(v19, v75);\n                      v77 = v19 + v75;\n                      if ( (v11 & 0x8000000000000000LL) != 0LL )\n                      {\n                        if ( v11 != -1LL )\n                          goto LABEL_202;\n                      }\n                      else\n                      {\n                        if ( v76 )\n                          goto LABEL_202;\n                        if ( 2 * v11 >= v77 )\n                          v77 = 2 * v11;\n                        if ( v11 < v77 )\n                        {\n                          v11 *= 2LL;\n                          if ( v11 < v77 )\n                          {\n                            if ( v77 == -1LL )\n                            {\nLABEL_202:\n                              v57 = v48;\n                              goto LABEL_89;\n                            }\n                            v11 = v77;\n                          }\n                          v78 = v48 == src;\n                          if ( !v48 || v48 == src )\n                          {\n                            v157 = v48;\n                            v93 = (char *)malloc(v11);\n                            v48 = (char *)v157;\n                            if ( !v93 )\n                              goto LABEL_202;\n                            if ( v19 && v78 )\n                              v48 = (char *)memcpy(v93, v157, v19);\n                            else\n                              v48 = v93;\n                          }\n                          else\n                          {\n                            v157 = v48;\n                            v79 = (char *)realloc(v48, v11);\n                            v48 = (char *)v157;\n                            if ( !v79 )\n                              goto LABEL_202;\n                            v48 = v79;\n                          }\n                        }\n                      }\n                      continue;\n                    }\nLABEL_133:\n                    if ( v74 < v49 && v48[v74 + v19] )\n                      goto LABEL_200;\n                    if ( v74 >= v73 )\n                      goto LABEL_137;\n                    goto LABEL_136;\n                  }\n                  v151 = &v165;\n                  v150 = (int *)v72;\n                  break;\n                case 11:\n                  v84 = *((_QWORD *)v12 + 10);\n                  v85 = &v48[v19];\n                  v157 = v48;\n                  a5 = *((double *)v169 + 4 * v84 + 2);\n                  if ( (_DWORD)v160 == 1 )\n                  {\n                    v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v161, v166, a5, &v165, v151);\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v160 != 2 )\n                    {\n                      v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v161, &v165, a5, v152, v153);\n                      v48 = (char *)v157;\n                      goto LABEL_132;\n                    }\n                    v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v161, v166, a5, v167, &v165);\n                  }\n                  v48 = (char *)v157;\n                  goto LABEL_132;\n                case 12:\n                  v81 = *((_QWORD *)v12 + 10);\n                  v82 = &v48[v19];\n                  v157 = v48;\n                  v83 = *((unsigned __int128 *)v169 + 2 * v81 + 1);\n                  if ( (_DWORD)v160 == 1 )\n                  {\n                    v73 = __snprintf_chk(v82, v49, 1LL, -1LL, v161, v166, a5, v83, v83 >> 64);\n                    goto LABEL_210;\n                  }\n                  if ( (_DWORD)v160 != 2 )\n                  {\n                    v73 = __snprintf_chk(v82, v49, 1LL, -1LL, v161, &v165, a5, v83, v83 >> 64);\n                    goto LABEL_131;\n                  }\n                  v73 = __snprintf_chk(v82, v49, 1LL, -1LL, v161, v166, a5, v167, v149);\n                  v48 = (char *)v157;\n                  goto LABEL_132;\n                default:\n                  goto LABEL_408;\n              }\n              break;\n            }\n            v72 = v166;\nLABEL_153:\n            v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v161, v72, a5, v150, v151);\n            v74 = v165;\n            v48 = (char *)v157;\n            if ( v165 < 0 )\n              goto LABEL_154;\n            goto LABEL_133;\n          }\n          if ( v19 != -3LL )\n          {\n            v11 = v19 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v46 = v14;\n        goto LABEL_76;\n      }\n      switch ( v29 )\n      {\n        case 18:\n          v15 = v19;\n          **((_BYTE **)v28 + 2) = v19;\n          break;\n        case 19:\n          v15 = v19;\n          **((_WORD **)v28 + 2) = v19;\n          break;\n        case 20:\n          v15 = v19;\n          **((_DWORD **)v28 + 2) = v19;\n          break;\n        case 21:\n        case 22:\n          v15 = v19;\n          **((_QWORD **)v28 + 2) = v19;\n          break;\n        default:\nLABEL_408:\n          abort();\n      }\nLABEL_110:\n      v13 = (_BYTE *)*((_QWORD *)v12 + 1);\n      v12 += 88;\n      v16 = *(_BYTE **)v12;\n      ++v159;\n      if ( v16 != v13 )\n        goto LABEL_14;\nLABEL_111:\n      v19 = v15;\n    }\n    v107 = v19;\n    v108 = v19 + 1;\n    if ( v19 == -1LL )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v11 < v108 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v108 )\n        {\nLABEL_303:\n          v109 = v14 == src;\n          if ( !v14 || v14 == src )\n          {\n            v142 = (char *)malloc(v11);\n            if ( !v142 )\n              goto LABEL_88;\n            if ( v107 && v109 )\n              v14 = (char *)memcpy(v142, v14, v107);\n            else\n              v14 = v142;\n          }\n          else\n          {\n            v110 = (char *)realloc(v14, v11);\n            if ( !v110 )\n              goto LABEL_126;\n            v14 = v110;\n          }\n          goto LABEL_307;\n        }\n      }\n      else if ( v108 <= 0xC )\n      {\n        v11 = 12LL;\n        goto LABEL_303;\n      }\n      if ( v19 == -2LL )\n        goto LABEL_88;\n      v11 = v19 + 1;\n      goto LABEL_303;\n    }\nLABEL_307:\n    v14[v107] = 0;\n    if ( v11 > v108 && v14 != src )\n    {\n      v111 = (char *)realloc(v14, v108);\n      if ( v111 )\n        v14 = v111;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v172 != v175 )\n      free(v172);\n    if ( v169 != v170 )\n      free(v169);\n    *v156 = v107;\n    return v14;\n  }\n  if ( v172 != v175 )\n    free(v172);\n  if ( v169 != v170 )\n    free(v169);\n  v14 = 0LL;\n  *__errno_location() = 22;\n  return v14;\n}\n"
        },
        {
            "funcName": "sub_40FE80",
            "funcStartAddr": "0x40fe80",
            "funcEndAddr": "0x40fe8e",
            "decompiledFuncCode": "__int64 __fastcall sub_40FE80(int a1, __int64 a2, __int64 a3, int a4, int a5, int a6, char a7)\n{\n  return sub_40FE90(a1, 0, 3, a4, a5, a6, a7);\n}\n"
        },
        {
            "funcName": "sub_40FE90",
            "funcStartAddr": "0x40fe90",
            "funcEndAddr": "0x40ffc5",
            "decompiledFuncCode": "__int64 __fastcall sub_40FE90(int a1, int a2, __int64 a3, int a4, int a5, int a6)\n{\n  int v6; // ebx\n  int v8; // eax\n  int *v9; // rax\n  int v10; // edi\n  int v11; // r12d\n  int *v12; // rbp\n  int v13; // ecx\n  int v14; // r8d\n  int v15; // r9d\n  int v16; // [rsp+30h] [rbp-38h]\n\n  v16 = a3;\n  if ( a2 == 1030 )\n  {\n    if ( dword_6178A0 < 0 )\n    {\n      v6 = sub_40FE90(a1, 0, a3, a4, a5, a6);\n      if ( v6 >= 0 && dword_6178A0 == -1 )\n      {\nLABEL_8:\n        v8 = fcntl(v6, 1);\n        if ( v8 < 0 || fcntl(v6, 2, v8 | 1u) == -1 )\n        {\n          v9 = __errno_location();\n          v10 = v6;\n          v6 = -1;\n          v11 = *v9;\n          v12 = v9;\n          close(v10);\n          *v12 = v11;\n        }\n      }\n    }\n    else\n    {\n      v6 = fcntl(a1, 1030, (unsigned int)a3);\n      if ( v6 < 0 && *__errno_location() == 22 )\n      {\n        v6 = sub_40FE90(a1, 0, v16, v13, v14, v15);\n        if ( v6 >= 0 )\n        {\n          dword_6178A0 = -1;\n          goto LABEL_8;\n        }\n      }\n      else\n      {\n        dword_6178A0 = 1;\n      }\n    }\n    return (unsigned int)v6;\n  }\n  return (unsigned int)fcntl(a1, a2, a3);\n}\n"
        },
        {
            "funcName": "sub_40FFD0",
            "funcStartAddr": "0x40ffd0",
            "funcEndAddr": "0x4101e9",
            "decompiledFuncCode": "__int64 __fastcall sub_40FFD0(int *a1, unsigned __int64 *a2)\n{\n  unsigned __int64 v2; // rax\n  unsigned __int64 v3; // rdx\n  unsigned int v4; // ecx\n  _QWORD *v5; // r10\n  unsigned int v7; // ecx\n  _DWORD *v8; // r10\n  unsigned int v9; // ecx\n  _DWORD *v10; // r10\n  unsigned int v11; // ecx\n  _DWORD *v12; // r10\n  unsigned int v13; // ecx\n  _QWORD *v14; // r10\n  long double *v15; // rcx\n  unsigned int v16; // ecx\n  void **v17; // r10\n  void *v18; // rcx\n  unsigned int v19; // ecx\n  const char **v20; // r10\n  const char *v21; // rcx\n\n  v2 = a2[1];\n  if ( *a2 )\n  {\n    v3 = 0LL;\n    while ( 2 )\n    {\n      switch ( *(_DWORD *)v2 )\n      {\n        case 1:\n        case 2:\n          v11 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v12 = (_DWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v12 + 2;\n          }\n          else\n          {\n            v12 = (_DWORD *)(*((_QWORD *)a1 + 2) + v11);\n            *a1 = v11 + 8;\n          }\n          *(_BYTE *)(v2 + 16) = *v12;\n          goto LABEL_7;\n        case 3:\n        case 4:\n          v9 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v10 = (_DWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v10 + 2;\n          }\n          else\n          {\n            v10 = (_DWORD *)(*((_QWORD *)a1 + 2) + v9);\n            *a1 = v9 + 8;\n          }\n          *(_WORD *)(v2 + 16) = *v10;\n          goto LABEL_7;\n        case 5:\n        case 6:\n        case 0xD:\n        case 0xE:\n          v7 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v8 = (_DWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v8 + 2;\n          }\n          else\n          {\n            v8 = (_DWORD *)(*((_QWORD *)a1 + 2) + v7);\n            *a1 = v7 + 8;\n          }\n          *(_DWORD *)(v2 + 16) = *v8;\n          goto LABEL_7;\n        case 7:\n        case 8:\n        case 9:\n        case 0xA:\n        case 0x11:\n        case 0x12:\n        case 0x13:\n        case 0x14:\n        case 0x15:\n        case 0x16:\n          v4 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v5 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v5 + 1;\n          }\n          else\n          {\n            v5 = (_QWORD *)(*((_QWORD *)a1 + 2) + v4);\n            *a1 = v4 + 8;\n          }\n          *(_QWORD *)(v2 + 16) = *v5;\n          goto LABEL_7;\n        case 0xB:\n          v13 = a1[1];\n          if ( v13 > 0xAF )\n          {\n            v14 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v14 + 1;\n          }\n          else\n          {\n            v14 = (_QWORD *)(*((_QWORD *)a1 + 2) + v13);\n            a1[1] = v13 + 16;\n          }\n          *(_QWORD *)(v2 + 16) = *v14;\n          goto LABEL_7;\n        case 0xC:\n          v15 = (long double *)((*((_QWORD *)a1 + 1) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);\n          *((_QWORD *)a1 + 1) = v15 + 1;\n          *(long double *)(v2 + 16) = *v15;\n          goto LABEL_7;\n        case 0xF:\n          v19 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v20 = (const char **)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v20 + 1;\n          }\n          else\n          {\n            v20 = (const char **)(*((_QWORD *)a1 + 2) + v19);\n            *a1 = v19 + 8;\n          }\n          v21 = *v20;\n          if ( !*v20 )\n            v21 = \"(NULL)\";\n          *(_QWORD *)(v2 + 16) = v21;\n          goto LABEL_7;\n        case 0x10:\n          v16 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v17 = (void **)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v17 + 1;\n          }\n          else\n          {\n            v17 = (void **)(*((_QWORD *)a1 + 2) + v16);\n            *a1 = v16 + 8;\n          }\n          v18 = *v17;\n          if ( !*v17 )\n            v18 = &unk_413D60;\n          *(_QWORD *)(v2 + 16) = v18;\nLABEL_7:\n          ++v3;\n          v2 += 32LL;\n          if ( *a2 <= v3 )\n            return 0LL;\n          continue;\n        default:\n          return 0xFFFFFFFFLL;\n      }\n    }\n  }\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_4101F0",
            "funcStartAddr": "0x4101f0",
            "funcEndAddr": "0x410ef9",
            "decompiledFuncCode": "__int64 __fastcall sub_4101F0(char *a1, _QWORD *a2, unsigned __int64 *a3)\n{\n  _QWORD *v3; // rcx\n  _QWORD *v4; // r8\n  unsigned __int64 v6; // r9\n  __int64 v7; // r11\n  __int64 v8; // r13\n  char *v9; // rbp\n  __int64 result; // rax\n  unsigned __int64 v11; // r14\n  char *v12; // r12\n  char v13; // bl\n  char *v14; // rcx\n  int v15; // eax\n  __int64 v16; // rax\n  int v17; // eax\n  unsigned __int64 v18; // rbx\n  _DWORD *v19; // r13\n  unsigned __int64 v20; // rdx\n  _DWORD *v21; // rax\n  bool v22; // zf\n  __int64 v23; // rax\n  _BYTE *v24; // rcx\n  int v25; // eax\n  unsigned __int64 v26; // rbx\n  unsigned __int64 v27; // rdx\n  _DWORD *v28; // rax\n  int v29; // ecx\n  unsigned __int64 v30; // rax\n  int *v31; // rax\n  __int64 v32; // rax\n  __int64 v33; // rbx\n  _QWORD *v34; // r12\n  _QWORD *v35; // rax\n  _BYTE *v36; // rax\n  unsigned __int64 v37; // rax\n  unsigned __int64 v38; // r9\n  _DWORD *v39; // rax\n  _DWORD *v40; // rsi\n  _QWORD *v41; // rax\n  _QWORD *v42; // rax\n  _BYTE *v43; // rdx\n  unsigned __int64 v44; // rsi\n  __int64 v45; // rdx\n  __int64 v46; // rax\n  char *v47; // rdi\n  bool v48; // cf\n  unsigned __int64 v49; // rdx\n  unsigned __int8 v50; // bl\n  _QWORD *v51; // rdi\n  unsigned __int64 v52; // r9\n  _DWORD *v53; // rax\n  char *i; // rcx\n  char *v55; // rdx\n  unsigned __int64 v56; // rax\n  const void *v57; // rsi\n  _QWORD *v58; // rdi\n  unsigned __int64 v59; // r9\n  _DWORD *v60; // rax\n  _DWORD *v61; // rax\n  unsigned __int64 v62; // rax\n  __int64 v63; // rsi\n  __int64 v64; // rdx\n  char *v65; // rcx\n  unsigned __int64 v66; // rdx\n  unsigned __int8 v67; // si\n  _BYTE *v68; // rdx\n  unsigned __int64 v69; // rsi\n  __int64 v70; // rdx\n  __int64 v71; // rax\n  _BYTE *v72; // rdi\n  unsigned __int64 v73; // rdx\n  unsigned __int8 v74; // bl\n  _DWORD *v75; // rax\n  _DWORD *src; // [rsp+8h] [rbp-80h]\n  _QWORD *srca; // [rsp+8h] [rbp-80h]\n  _QWORD *srcb; // [rsp+8h] [rbp-80h]\n  unsigned __int64 v79; // [rsp+10h] [rbp-78h]\n  unsigned __int64 v80; // [rsp+18h] [rbp-70h]\n  unsigned __int64 v81; // [rsp+20h] [rbp-68h]\n  _QWORD *v82; // [rsp+28h] [rbp-60h]\n  unsigned __int64 v83; // [rsp+30h] [rbp-58h]\n  char *v84; // [rsp+30h] [rbp-58h]\n  unsigned __int64 v85; // [rsp+30h] [rbp-58h]\n  int v86; // [rsp+30h] [rbp-58h]\n  int v87; // [rsp+30h] [rbp-58h]\n  _BYTE *v88; // [rsp+30h] [rbp-58h]\n  char *v89; // [rsp+30h] [rbp-58h]\n  _BYTE *v90; // [rsp+30h] [rbp-58h]\n  _QWORD *v91; // [rsp+38h] [rbp-50h]\n  __int64 v92; // [rsp+38h] [rbp-50h]\n  _QWORD *v93; // [rsp+38h] [rbp-50h]\n  __int64 v94; // [rsp+38h] [rbp-50h]\n  __int64 v95; // [rsp+38h] [rbp-50h]\n  __int64 v96; // [rsp+38h] [rbp-50h]\n  __int64 v97; // [rsp+38h] [rbp-50h]\n  __int64 v98; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v99; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v100; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v101; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v102; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v103; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v104; // [rsp+40h] [rbp-48h]\n  _QWORD *v105; // [rsp+48h] [rbp-40h]\n  _QWORD *v106; // [rsp+48h] [rbp-40h]\n  _QWORD *v107; // [rsp+48h] [rbp-40h]\n  _QWORD *v108; // [rsp+48h] [rbp-40h]\n  _QWORD *v109; // [rsp+48h] [rbp-40h]\n  _QWORD *v110; // [rsp+48h] [rbp-40h]\n\n  v3 = a2 + 4;\n  v4 = a2;\n  v6 = 7LL;\n  v7 = 7LL;\n  v8 = 0LL;\n  *a2 = 0LL;\n  a2[1] = a2 + 4;\n  v82 = a2 + 4;\n  *a3 = 0LL;\n  src = a3 + 2;\n  a3[1] = (unsigned __int64)(a3 + 2);\n  v80 = 0LL;\n  v79 = 0LL;\n  v81 = 0LL;\n  while ( 1 )\n  {\n    if ( !*a1 )\n    {\n      v3[11 * v8] = a1;\n      v4[2] = v79;\n      v4[3] = v80;\n      return 0LL;\n    }\n    v9 = a1 + 1;\n    if ( *a1 == 37 )\n      break;\nLABEL_3:\n    a1 = v9;\n  }\n  v11 = -1LL;\n  v12 = (char *)&v3[11 * v8];\n  *(_QWORD *)v12 = a1;\n  *((_DWORD *)v12 + 4) = 0;\n  *((_QWORD *)v12 + 3) = 0LL;\n  *((_QWORD *)v12 + 4) = 0LL;\n  *((_QWORD *)v12 + 5) = -1LL;\n  *((_QWORD *)v12 + 6) = 0LL;\n  *((_QWORD *)v12 + 7) = 0LL;\n  *((_QWORD *)v12 + 8) = -1LL;\n  *((_QWORD *)v12 + 10) = -1LL;\n  v13 = a1[1];\n  if ( (unsigned __int8)(v13 - 48) > 9u )\n    goto LABEL_16;\n  v36 = a1 + 1;\n  do\n    ++v36;\n  while ( (unsigned __int8)(*v36 - 48) <= 9u );\n  if ( *v36 != 36 )\n  {\n    v11 = -1LL;\n    goto LABEL_16;\n  }\n  v62 = 0LL;\n  do\n  {\n    v63 = -1LL;\n    v64 = v13 - 48;\n    if ( v62 <= 0x1999999999999999LL )\n      v63 = 10 * v62;\n    v65 = v9;\n    while ( 1 )\n    {\n      v13 = v9[1];\n      v48 = __CFADD__(v63, v64);\n      v66 = v63 + v64;\n      v62 = v66;\n      ++v9;\n      v67 = v13 - 48;\n      if ( !v48 )\n        break;\n      if ( v67 > 9u )\n        goto LABEL_130;\n      v63 = -1LL;\n      v65 = v9;\n      v64 = v13 - 48;\n    }\n  }\n  while ( v67 <= 9u );\n  v11 = v66 - 1;\n  if ( v66 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_130;\n  v9 = v65 + 2;\n  v13 = v65[2];\n  while ( 1 )\n  {\nLABEL_16:\n    v14 = v9 + 1;\n    switch ( v13 )\n    {\n      case '\\'':\n        *((_DWORD *)v12 + 4) |= 1u;\n        goto LABEL_15;\n      case '-':\n        *((_DWORD *)v12 + 4) |= 2u;\n        goto LABEL_15;\n      case '+':\n        *((_DWORD *)v12 + 4) |= 4u;\n        goto LABEL_15;\n      case ' ':\n        *((_DWORD *)v12 + 4) |= 8u;\n        goto LABEL_15;\n      case '#':\n        *((_DWORD *)v12 + 4) |= 0x10u;\n        goto LABEL_15;\n    }\n    if ( v13 != 48 )\n      break;\n    *((_DWORD *)v12 + 4) |= 0x20u;\nLABEL_15:\n    v13 = *v14;\n    ++v9;\n  }\n  if ( v13 == 73 )\n  {\n    *((_DWORD *)v12 + 4) |= 0x40u;\n    goto LABEL_15;\n  }\n  if ( v13 == 42 )\n  {\n    v16 = 1LL;\n    *((_QWORD *)v12 + 3) = v9;\n    *((_QWORD *)v12 + 4) = v14;\n    if ( v79 )\n      v16 = v79;\n    v79 = v16;\n    v17 = v9[1];\n    if ( (unsigned __int8)(v9[1] - 48) > 9u )\n      goto LABEL_39;\n    v43 = v9 + 1;\n    do\n      ++v43;\n    while ( (unsigned __int8)(*v43 - 48) <= 9u );\n    if ( *v43 == 36 )\n    {\n      v44 = 0LL;\n      do\n      {\n        v45 = -1LL;\n        v46 = v17 - 48;\n        if ( v44 <= 0x1999999999999999LL )\n          v45 = 10 * v44;\n        v47 = v14;\n        while ( 1 )\n        {\n          v48 = __CFADD__(v46, v45);\n          v49 = v46 + v45;\n          v17 = v14[1];\n          v44 = v49;\n          ++v14;\n          v50 = v17 - 48;\n          if ( !v48 )\n            break;\n          if ( v50 > 9u )\n            goto LABEL_130;\n          v45 = -1LL;\n          v47 = v14;\n          v46 = v17 - 48;\n        }\n      }\n      while ( v50 <= 9u );\n      v18 = v49 - 1;\n      if ( v49 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n        goto LABEL_130;\n      *((_QWORD *)v12 + 5) = v18;\n      v14 = v47 + 2;\n    }\n    else\n    {\nLABEL_39:\n      v18 = *((_QWORD *)v12 + 5);\n      if ( v18 == -1LL )\n      {\n        *((_QWORD *)v12 + 5) = v81;\n        if ( v81 == -1LL )\n          goto LABEL_130;\n        v18 = v81++;\n      }\n    }\n    v19 = (_DWORD *)a3[1];\n    if ( v6 > v18 )\n    {\n      v20 = *a3;\nLABEL_42:\n      if ( v20 <= v18 )\n      {\n        do\n        {\n          ++v20;\n          v19[8 * v20 - 8] = 0;\n        }\n        while ( v20 <= v18 );\n        *a3 = v20;\n      }\n      v21 = &v19[8 * v18];\n      if ( *v21 )\n      {\n        if ( *v21 == 5 )\n        {\n          v13 = *v14;\n          v9 = v14++;\n          goto LABEL_25;\n        }\n        goto LABEL_131;\n      }\n      *v21 = 5;\n      v13 = *v14;\n      v9 = v14++;\n      if ( v13 != 46 )\n        goto LABEL_26;\nLABEL_47:\n      v22 = v9[1] == 42;\n      *((_QWORD *)v12 + 6) = v9;\n      if ( !v22 )\n      {\n        if ( (unsigned __int8)(v9[1] - 48) > 9u )\n        {\n          v9 = v14;\n          v37 = 1LL;\n        }\n        else\n        {\n          do\n            ++v14;\n          while ( (unsigned __int8)(*v14 - 48) <= 9u );\n          v37 = v14 - v9;\n          v9 = v14;\n        }\n        *((_QWORD *)v12 + 7) = v14;\n        v13 = *v14;\n        if ( v80 >= v37 )\n          v37 = v80;\n        v80 = v37;\n        goto LABEL_26;\n      }\n      v23 = 2LL;\n      v24 = v9 + 2;\n      *((_QWORD *)v12 + 7) = v9 + 2;\n      if ( v80 >= 2 )\n        v23 = v80;\n      v80 = v23;\n      v25 = v9[2];\n      if ( (unsigned __int8)(v9[2] - 48) > 9u )\n        goto LABEL_51;\n      v68 = v9 + 2;\n      do\n        ++v68;\n      while ( (unsigned __int8)(*v68 - 48) <= 9u );\n      if ( *v68 == 36 )\n      {\n        v69 = 0LL;\n        do\n        {\n          v70 = -1LL;\n          v71 = v25 - 48;\n          if ( v69 <= 0x1999999999999999LL )\n            v70 = 10 * v69;\n          v72 = v24;\n          while ( 1 )\n          {\n            v48 = __CFADD__(v71, v70);\n            v73 = v71 + v70;\n            v25 = (char)*++v24;\n            v69 = v73;\n            v74 = v25 - 48;\n            if ( !v48 )\n              break;\n            if ( v74 > 9u )\n              goto LABEL_130;\n            v70 = -1LL;\n            v72 = v24;\n            v71 = v25 - 48;\n          }\n        }\n        while ( v74 <= 9u );\n        v26 = v73 - 1;\n        if ( v73 - 1 <= 0xFFFFFFFFFFFFFFFDLL )\n        {\n          *((_QWORD *)v12 + 8) = v26;\n          v24 = v72 + 2;\nLABEL_52:\n          v19 = (_DWORD *)a3[1];\n          if ( v6 > v26 )\n          {\n            v27 = *a3;\n            goto LABEL_54;\n          }\n          v59 = 2 * v6;\n          if ( v59 <= v26 )\n            v59 = v26 + 1;\n          if ( v59 <= 0x7FFFFFFFFFFFFFFLL )\n          {\n            v108 = v4;\n            v102 = v59;\n            v96 = v7;\n            v88 = v24;\n            if ( src == v19 )\n            {\n              v75 = malloc(32 * v59);\n              v24 = v88;\n              v7 = v96;\n              v6 = v102;\n              v4 = v108;\n              if ( !v75 )\n                goto LABEL_162;\n              v27 = *a3;\n              v40 = src;\n              v19 = v75;\n            }\n            else\n            {\n              v60 = realloc(v19, 32 * v59);\n              v40 = (_DWORD *)a3[1];\n              v24 = v88;\n              v19 = v60;\n              v7 = v96;\n              v6 = v102;\n              v4 = v108;\n              if ( !v60 )\n                goto LABEL_160;\n              v27 = *a3;\n              if ( src != v40 )\n                goto LABEL_171;\n            }\n            v110 = v4;\n            v104 = v6;\n            v98 = v7;\n            v90 = v24;\n            memcpy(v19, v40, 32 * v27);\n            v27 = *a3;\n            v4 = v110;\n            v6 = v104;\n            v7 = v98;\n            v24 = v90;\nLABEL_171:\n            a3[1] = (unsigned __int64)v19;\nLABEL_54:\n            if ( v27 <= v26 )\n            {\n              do\n              {\n                ++v27;\n                v19[8 * v27 - 8] = 0;\n              }\n              while ( v27 <= v26 );\n              *a3 = v27;\n            }\n            v28 = &v19[8 * v26];\n            if ( !*v28 )\n            {\n              *v28 = 5;\n              v9 = v24;\n              v13 = *v24;\n              goto LABEL_26;\n            }\n            if ( *v28 == 5 )\n            {\n              v13 = *v24;\n              v9 = v24;\n              goto LABEL_26;\n            }\n            goto LABEL_131;\n          }\nLABEL_159:\n          v40 = v19;\n          goto LABEL_160;\n        }\n      }\n      else\n      {\nLABEL_51:\n        v26 = *((_QWORD *)v12 + 8);\n        if ( v26 != -1LL )\n          goto LABEL_52;\n        *((_QWORD *)v12 + 8) = v81;\n        if ( v81 != -1LL )\n        {\n          v26 = v81++;\n          goto LABEL_52;\n        }\n      }\nLABEL_130:\n      v19 = (_DWORD *)a3[1];\nLABEL_131:\n      if ( src != v19 )\n      {\n        srca = v4;\n        free(v19);\n        v4 = srca;\n      }\n      v51 = (_QWORD *)v4[1];\n      if ( v82 != v51 )\n        free(v51);\n      *__errno_location() = 22;\n      return 0xFFFFFFFFLL;\n    }\n    v38 = 2 * v6;\n    if ( v38 <= v18 )\n      v38 = v18 + 1;\n    if ( v38 > 0x7FFFFFFFFFFFFFFLL )\n      goto LABEL_159;\n    v105 = v4;\n    v99 = v38;\n    v92 = v7;\n    v84 = v14;\n    if ( src == v19 )\n    {\n      v61 = malloc(32 * v38);\n      v14 = v84;\n      v7 = v92;\n      v6 = v99;\n      v4 = v105;\n      if ( !v61 )\n        goto LABEL_162;\n      v20 = *a3;\n      v40 = src;\n      v19 = v61;\n    }\n    else\n    {\n      v39 = realloc(v19, 32 * v38);\n      v40 = (_DWORD *)a3[1];\n      v14 = v84;\n      v19 = v39;\n      v7 = v92;\n      v6 = v99;\n      v4 = v105;\n      if ( !v39 )\n        goto LABEL_160;\n      v20 = *a3;\n      if ( src != v40 )\n        goto LABEL_93;\n    }\n    v109 = v4;\n    v103 = v6;\n    v97 = v7;\n    v89 = v14;\n    memcpy(v19, v40, 32 * v20);\n    v20 = *a3;\n    v4 = v109;\n    v6 = v103;\n    v7 = v97;\n    v14 = v89;\nLABEL_93:\n    a3[1] = (unsigned __int64)v19;\n    goto LABEL_42;\n  }\n  if ( (unsigned __int8)(v13 - 48) <= 9u )\n  {\n    *((_QWORD *)v12 + 3) = v9;\n    if ( (unsigned __int8)(*v9 - 48) <= 9u )\n    {\n      for ( i = v9; ; ++i )\n      {\n        v55 = i + 1;\n        if ( (unsigned __int8)(i[1] - 48) > 9u )\n          break;\n      }\n      v14 = i + 2;\n      v56 = v55 - v9;\n      v9 = v55;\n      if ( v79 >= v56 )\n        v56 = v79;\n      v79 = v56;\n    }\n    *((_QWORD *)v12 + 4) = v9;\n    v13 = *v9;\n  }\nLABEL_25:\n  if ( v13 == 46 )\n    goto LABEL_47;\nLABEL_26:\n  v15 = 0;\n  while ( 2 )\n  {\n    ++v9;\n    if ( v13 == 104 )\n    {\n      v15 |= 1 << (v15 & 1);\n      goto LABEL_33;\n    }\n    if ( v13 == 76 )\n    {\n      v15 |= 4u;\n      goto LABEL_33;\n    }\n    if ( v13 == 108 || v13 == 106 || (v13 & 0xDF) == 90 || v13 == 116 )\n    {\n      v15 += 8;\nLABEL_33:\n      v13 = *v9;\n      continue;\n    }\n    break;\n  }\n  switch ( v13 )\n  {\n    case '%':\n      goto LABEL_70;\n    case 'A':\n    case 'E':\n    case 'F':\n    case 'G':\n    case 'a':\n    case 'e':\n    case 'f':\n    case 'g':\n      v29 = 12;\n      if ( v15 <= 15 )\n        v29 = ((v15 & 4) != 0) + 11;\n      goto LABEL_62;\n    case 'C':\n      v29 = 14;\n      v13 = 99;\n      goto LABEL_62;\n    case 'S':\n      v29 = 16;\n      v13 = 115;\n      goto LABEL_62;\n    case 'X':\n    case 'o':\n    case 'u':\n    case 'x':\n      v29 = 10;\n      if ( v15 <= 15 && (v15 & 4) == 0 )\n      {\n        v29 = 8;\n        if ( v15 <= 7 )\n        {\n          v29 = 2;\n          if ( (v15 & 2) == 0 )\n            v29 = (v15 & 1) == 0 ? 6 : 4;\n        }\n      }\n      goto LABEL_62;\n    case 'c':\n      v29 = (v15 > 7) + 13;\n      goto LABEL_62;\n    case 'd':\n    case 'i':\n      v29 = 9;\n      if ( v15 <= 15 && (v15 & 4) == 0 )\n      {\n        v29 = 7;\n        if ( v15 <= 7 )\n        {\n          v29 = 1;\n          if ( (v15 & 2) == 0 )\n            v29 = (v15 & 1) == 0 ? 5 : 3;\n        }\n      }\n      goto LABEL_62;\n    case 'n':\n      v29 = 22;\n      if ( v15 <= 15 && (v15 & 4) == 0 )\n      {\n        v29 = 21;\n        if ( v15 <= 7 )\n        {\n          v29 = 18;\n          if ( (v15 & 2) == 0 )\n            v29 = ((v15 & 1) == 0) + 19;\n        }\n      }\n      goto LABEL_62;\n    case 'p':\n      v29 = 17;\n      goto LABEL_62;\n    case 's':\n      v29 = (v15 > 7) + 15;\nLABEL_62:\n      if ( v11 == -1LL )\n      {\n        *((_QWORD *)v12 + 10) = v81;\n        if ( v81 == -1LL )\n          goto LABEL_130;\n        v11 = v81++;\n      }\n      else\n      {\n        *((_QWORD *)v12 + 10) = v11;\n      }\n      v19 = (_DWORD *)a3[1];\n      if ( v6 > v11 )\n        goto LABEL_65;\n      v52 = 2 * v6;\n      if ( v52 <= v11 )\n        v52 = v11 + 1;\n      if ( v52 > 0x7FFFFFFFFFFFFFFLL )\n        goto LABEL_159;\n      v106 = v4;\n      v100 = v52;\n      v94 = v7;\n      v86 = v29;\n      if ( src == v19 )\n      {\n        v53 = malloc(32 * v52);\n        v29 = v86;\n        v7 = v94;\n        v6 = v100;\n        v4 = v106;\n        if ( !v53 )\n          goto LABEL_162;\n        goto LABEL_158;\n      }\n      v53 = realloc(v19, 32 * v52);\n      v29 = v86;\n      v7 = v94;\n      v19 = v53;\n      v6 = v100;\n      v4 = v106;\n      if ( !v53 )\n        goto LABEL_210;\n      if ( src == (_DWORD *)a3[1] )\n      {\n        v19 = src;\nLABEL_158:\n        v57 = v19;\n        v107 = v4;\n        v101 = v6;\n        v19 = v53;\n        v95 = v7;\n        v87 = v29;\n        memcpy(v53, v57, 32 * *a3);\n        v4 = v107;\n        v29 = v87;\n        v6 = v101;\n        v7 = v95;\n      }\n      a3[1] = (unsigned __int64)v19;\nLABEL_65:\n      v30 = *a3;\n      if ( *a3 <= v11 )\n      {\n        do\n        {\n          ++v30;\n          v19[8 * v30 - 8] = 0;\n        }\n        while ( v30 <= v11 );\n        *a3 = v30;\n      }\n      v31 = &v19[8 * v11];\n      if ( *v31 )\n      {\n        if ( *v31 != v29 )\n          goto LABEL_131;\n      }\n      else\n      {\n        *v31 = v29;\n      }\nLABEL_70:\n      v12[72] = v13;\n      v32 = *v4;\n      *((_QWORD *)v12 + 1) = v9;\n      v8 = v32 + 1;\n      *v4 = v32 + 1;\n      if ( v7 > (unsigned __int64)(v32 + 1) )\n      {\n        v3 = (_QWORD *)v4[1];\n        goto LABEL_3;\n      }\n      if ( v7 >= 0 )\n      {\n        v33 = 2 * v7;\n        if ( (unsigned __int64)(2 * v7) <= 0x2E8BA2E8BA2E8BALL )\n        {\n          v34 = (_QWORD *)v4[1];\n          v91 = v4;\n          v83 = v6;\n          if ( v82 == v34 )\n          {\n            v41 = malloc(176 * v7);\n            v6 = v83;\n            v4 = v91;\n            v3 = v41;\n            if ( !v41 )\n            {\n              v40 = (_DWORD *)a3[1];\n              if ( src != v40 )\n                goto LABEL_161;\n              goto LABEL_164;\n            }\n          }\n          else\n          {\n            v35 = realloc(v34, 176 * v7);\n            v6 = v83;\n            v4 = v91;\n            v3 = v35;\n            if ( !v35 )\n              goto LABEL_210;\n            v34 = (_QWORD *)v91[1];\n            v8 = *v91;\n            if ( v82 != v34 )\n              goto LABEL_77;\n          }\n          v93 = v4;\n          v85 = v6;\n          v42 = memcpy(v3, v34, 88 * v8);\n          v4 = v93;\n          v6 = v85;\n          v3 = v42;\n          v8 = *v93;\nLABEL_77:\n          v4[1] = v3;\n          v7 = v33;\n          goto LABEL_3;\n        }\n      }\nLABEL_210:\n      v40 = (_DWORD *)a3[1];\nLABEL_160:\n      if ( src != v40 )\n      {\nLABEL_161:\n        srcb = v4;\n        free(v40);\n        v4 = srcb;\n      }\nLABEL_162:\n      v58 = (_QWORD *)v4[1];\n      if ( v82 != v58 )\n        free(v58);\nLABEL_164:\n      *__errno_location() = 12;\n      result = 0xFFFFFFFFLL;\n      break;\n    default:\n      goto LABEL_130;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_410F70",
            "funcStartAddr": "0x410f70",
            "funcEndAddr": "0x410f88",
            "decompiledFuncCode": "int __fastcall sub_410F70(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  v1 = 0LL;\n  if ( qword_617308 )\n    v1 = (void *)qword_617308[0];\n  return __cxa_atexit(a1, 0LL, v1);\n}\n"
        },
        {
            "funcName": "sub_410F88",
            "funcStartAddr": "0x410f88",
            "funcEndAddr": "0x410fa8",
            "decompiledFuncCode": "__int64 __fastcall sub_410F88(__int64 a1, __int64 a2, __int64 a3)\n{\n  void (**i)(void); // rbx\n\n  for ( i = (void (**)(void))&qword_616E30; *i != (void (*)(void))-1LL; --i )\n    (*i)();\n  return a3;\n}\n"
        }
    ],
    "funcCount": 154
}