{
    "binaryInfo": {
        "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_pr.elf",
        "isStripped": "True"
    },
    "buildInfo": {
        "decompilerName": "IDA Pro",
        "compilerName": "gcc",
        "compilerVersion": "9.4.0",
        "Optlevel": "-O"
    },
    "funcInfo": [
        {
            "funcName": "main",
            "funcStartAddr": "0x401d40",
            "funcEndAddr": "0x4025d0",
            "decompiledFuncCode": "__int64 __fastcall main(int a1, char **a2, char **a3)\n{\n  __int64 v3; // r15\n  char *v6; // rdi\n  __int64 v7; // rbx\n  _BYTE *v8; // r13\n  unsigned int v9; // r14d\n  unsigned int v10; // eax\n  unsigned int v11; // edx\n  __int64 v12; // rax\n  __int64 v13; // rdx\n  void *v14; // rdi\n  char *v15; // rax\n  int v16; // eax\n  char *v17; // rax\n  char *v18; // rax\n  char *v19; // rax\n  char *v20; // rax\n  __int64 v21; // rdx\n  char *v22; // rax\n  __int64 v23; // rcx\n  __int64 v24; // rax\n  char *v25; // rax\n  char v26; // di\n  char **v27; // rax\n  unsigned int v28; // esi\n  char *v29; // rcx\n  __int64 v30; // rdx\n  __int64 v31; // rbx\n  __int64 v32; // rsi\n  char *v34; // rbx\n  int *v35; // rax\n  const char *v36; // rax\n  __int64 v37; // rbx\n  char *v38; // rax\n  char *v39; // rax\n  char *v40; // rax\n  char *v41; // rax\n  char v42; // [rsp+8h] [rbp-50h]\n  char v43; // [rsp+Dh] [rbp-4Bh]\n  char v44; // [rsp+Eh] [rbp-4Ah]\n  char v45; // [rsp+Fh] [rbp-49h]\n  unsigned int v46; // [rsp+14h] [rbp-44h] BYREF\n  unsigned __int64 v47[8]; // [rsp+18h] [rbp-40h] BYREF\n\n  v3 = 0LL;\n  v6 = *a2;\n  v47[0] = 0LL;\n  sub_407110(v6);\n  setlocale(6, \"\");\n  bindtextdomain(\n    \"coreutils\",\n    \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n  textdomain(\"coreutils\");\n  sub_40CD90(sub_4053D0);\n  if ( a1 > 1 )\n    v3 = sub_409300(8LL * (a1 - 1));\n  v45 = 0;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0;\n  v44 = 0;\n  v43 = 0;\n  while ( 1 )\n  {\n    v46 = -1;\n    v10 = sub_40B9D0((unsigned int)a1, a2, \"-0123456789D:FJN:S::TW:abcde::fh:i::l:mn::o:rs::tvw:\", &off_40EBE0, &v46);\n    v11 = v10;\n    if ( v10 == -1 )\n      break;\n    v12 = v10 - 48;\n    if ( (unsigned int)v12 <= 9 )\n    {\n      v23 = v7 + 1;\n      if ( v7 + 1 >= v47[0] )\n      {\n        v42 = v11;\n        v24 = sub_409460(v8, v47);\n        LOBYTE(v11) = v42;\n        v23 = v7 + 1;\n        v8 = (_BYTE *)v24;\n      }\n      v8[v7] = v11;\n      v7 = v23;\n      v8[v23] = 0;\n    }\n    else\n    {\n      v13 = v11 + 131;\n      switch ( v13 )\n      {\n        case 0LL:\n          sub_4091C0(\n            (_DWORD)stdout,\n            (unsigned int)\"pr\",\n            (unsigned int)&unk_40CEF3,\n            (_DWORD)off_6142B8,\n            (unsigned int)\"Pete TerMaat\",\n            (unsigned int)\"Roland Huebner\",\n            0LL,\n            v12);\n          exit(0);\n        case 1LL:\n          sub_404DE0(0);\n        case 132LL:\n          v20 = nptr;\n          if ( qword_614418 || *nptr != 43 )\n            goto LABEL_36;\n          if ( (unsigned __int8)sub_402820(4294967294LL, 43LL, nptr + 1) )\n            goto LABEL_9;\n          v20 = nptr;\nLABEL_36:\n          v21 = v9;\n          v7 = 0LL;\n          ++v9;\n          *(_QWORD *)(v3 + 8 * v21) = v20;\n          continue;\n        case 199LL:\n          v7 = 0LL;\n          qword_6143C0 = (__int64)nptr;\n          continue;\n        case 201LL:\n        case 233LL:\n          byte_614447 = 1;\n          v7 = 0LL;\n          continue;\n        case 205LL:\n          byte_61443C = 1;\n          v7 = 0LL;\n          continue;\n        case 209LL:\n          v7 = 0LL;\n          byte_614280 = 0;\n          v19 = dcgettext(0LL, \"'-N NUMBER' invalid starting line number\", 5);\n          dword_61427C = sub_409680(nptr, 0xFFFFFFFF80000000LL, 0x7FFFFFFFLL, \"\", v19, 0LL);\n          continue;\n        case 214LL:\n          byte_6143E0 = 1;\n          off_614270 = \"\";\n          dword_6143DC = 0;\n          v45 = 0;\n          if ( !nptr )\n            goto LABEL_9;\n          sub_402920();\n          v7 = 0LL;\n          continue;\n        case 215LL:\n          byte_6142B5 = 0;\n          v7 = 0LL;\n          byte_61444A = 0;\n          continue;\n        case 218LL:\n          v7 = 0LL;\n          byte_61443D = 1;\n          v22 = dcgettext(0LL, \"'-W PAGE_WIDTH' invalid number of characters\", 5);\n          v44 = 0;\n          dword_6142AC = sub_409680(nptr, 1LL, 0x7FFFFFFFLL, \"\", v22, 0LL);\n          continue;\n        case 228LL:\n          byte_614445 = 1;\n          v7 = 0LL;\n          byte_6142B4 = 0;\n          continue;\n        case 229LL:\n          byte_614444 = 1;\n          v7 = 0LL;\n          continue;\n        case 230LL:\n          byte_6143E9 = 1;\n          v7 = 0LL;\n          continue;\n        case 231LL:\n          byte_6143E8 = 1;\n          v7 = 0LL;\n          continue;\n        case 232LL:\n          if ( nptr )\n            sub_4052E0(nptr);\n          byte_614435 = 1;\n          v7 = 0LL;\n          continue;\n        case 235LL:\n          v7 = 0LL;\n          qword_6143C8 = (__int64)nptr;\n          continue;\n        case 236LL:\n          if ( nptr )\n            sub_4052E0(nptr);\n          byte_614434 = 1;\n          v7 = 0LL;\n          continue;\n        case 239LL:\n          v7 = 0LL;\n          v18 = dcgettext(0LL, \"'-l PAGE_LENGTH' invalid number of lines\", 5);\n          dword_6142B0 = sub_409680(nptr, 1LL, 0x7FFFFFFFLL, \"\", v18, 0LL);\n          continue;\n        case 240LL:\n          byte_61444F = 1;\n          v7 = 0LL;\n          byte_6142B4 = 0;\n          continue;\n        case 241LL:\n          byte_6143FC = 1;\n          if ( !nptr )\n            goto LABEL_9;\n          v7 = 0LL;\n          sub_4052E0(nptr);\n          continue;\n        case 242LL:\n          v7 = 0LL;\n          v17 = dcgettext(0LL, \"'-o MARGIN' invalid line offset\", 5);\n          dword_61442C = sub_409680(nptr, 0LL, 0x7FFFFFFFLL, \"\", v17, 0LL);\n          continue;\n        case 245LL:\n          byte_6143E1 = 1;\n          v7 = 0LL;\n          continue;\n        case 246LL:\n          v43 = byte_6143E0;\n          v45 = byte_6143E0;\n          if ( byte_6143E0 )\n            goto LABEL_9;\n          if ( nptr )\n          {\n            sub_402920();\n            v7 = 0LL;\n            v45 = 1;\n          }\n          else\n          {\n            v45 = 1;\n            v7 = 0LL;\n          }\n          v43 = 1;\n          continue;\n        case 247LL:\n          byte_6142B5 = 0;\n          v7 = 0LL;\n          byte_61444A = 1;\n          continue;\n        case 249LL:\n          byte_6143EA = 1;\n          v7 = 0LL;\n          continue;\n        case 250LL:\n          v15 = dcgettext(0LL, \"'-w PAGE_WIDTH' invalid number of characters\", 5);\n          v16 = sub_409680(nptr, 1LL, 0x7FFFFFFFLL, \"\", v15, 0LL);\n          v43 = byte_61443D;\n          v44 = byte_61443D;\n          if ( byte_61443D )\n            goto LABEL_9;\n          dword_6142AC = v16;\n          v7 = 0LL;\n          v44 = 1;\n          v43 = 1;\n          continue;\n        case 259LL:\n          v7 = 0LL;\n          sub_402950(nptr, a2, v13);\n          v14 = v8;\n          v8 = 0LL;\n          free(v14);\n          v47[0] = 0LL;\n          continue;\n        case 260LL:\n          if ( !nptr )\n            goto LABEL_97;\n          if ( !(unsigned __int8)sub_402820(v46, 0LL, nptr) )\n          {\n            v37 = sub_408D30(nptr);\n            v38 = dcgettext(0LL, \"invalid page range %s\", 5);\n            error(1, 0, v38, v37);\nLABEL_97:\n            v39 = dcgettext(0LL, \"'--pages=FIRST_PAGE[:LAST_PAGE]' missing argument\", 5);\n            error(1, 0, v39);\nLABEL_98:\n            v40 = dcgettext(0LL, \"cannot specify number of columns when printing in parallel\", 5);\n            error(1, 0, v40);\nLABEL_99:\n            v41 = dcgettext(0LL, \"cannot specify both printing across and printing in parallel\", 5);\n            error(1, 0, v41);\n            start();\n          }\nLABEL_9:\n          v7 = 0LL;\n          break;\n        default:\n          sub_404DE0(1);\n      }\n    }\n  }\n  if ( v8 )\n  {\n    sub_402950(v8, a2, v10);\n    free(v8);\n  }\n  if ( !qword_6143C0 )\n    goto LABEL_88;\n  while ( 1 )\n  {\n    v25 = getenv(\"TZ\");\n    qword_6143B8 = sub_40BBA0(v25);\n    if ( !qword_614418 )\n      qword_614418 = 1LL;\n    v26 = byte_61444F;\n    if ( byte_61444F )\n    {\n      if ( byte_61444B )\n        goto LABEL_98;\n      if ( byte_614445 )\n        goto LABEL_99;\n    }\n    if ( v43 )\n    {\n      if ( v44 )\n      {\n        if ( byte_61444F || byte_61444B )\n        {\n          byte_61443D = 1;\n          if ( !v45 )\n            goto LABEL_66;\nLABEL_83:\n          byte_6143E0 = 1;\n          goto LABEL_66;\n        }\n        byte_61443C = 1;\n      }\n      else if ( byte_6143E0 != 1 && v45 && (byte_61444F || byte_61444B) )\n      {\n        if ( byte_61443D )\n          goto LABEL_83;\n        byte_61443C = 1;\n        if ( dword_6143DC > 0 )\n          goto LABEL_83;\n      }\n    }\nLABEL_66:\n    if ( a1 > dword_61433C )\n    {\n      v27 = &a2[dword_61433C];\n      v28 = v9 + a1 - dword_61433C;\n      do\n      {\n        v29 = *v27;\n        v30 = v9++;\n        ++v27;\n        *(_QWORD *)(v3 + 8 * v30) = v29;\n      }\n      while ( v9 != v28 );\n      dword_61433C = a1;\n    }\n    if ( v9 )\n    {\n      if ( v26 )\n      {\n        sub_403E40(v9, v3);\n      }\n      else\n      {\n        v31 = v3 + 8LL * (v9 - 1) + 8;\n        do\n        {\n          v32 = v3;\n          v3 += 8LL;\n          sub_403E40(1LL, v32);\n        }\n        while ( v31 != v3 );\n      }\n    }\n    else\n    {\n      sub_403E40(0LL, 0LL);\n    }\n    free(ptr);\n    free(qword_614398);\n    free(qword_614478);\n    free(qword_614458);\n    free(qword_614450);\n    free(qword_614470);\n    if ( !byte_614446 || (unsigned int)sub_40AA20(stdin) != -1 )\n      return (unsigned __int8)byte_614420;\n    v34 = dcgettext(0LL, \"standard input\", 5);\n    v35 = __errno_location();\n    error(1, *v35, v34);\nLABEL_88:\n    if ( !getenv(\"POSIXLY_CORRECT\") || (unsigned __int8)sub_405590(2LL) )\n      v36 = \"%Y-%m-%d %H:%M\";\n    else\n      v36 = \"%b %e %H:%M %Y\";\n    qword_6143C0 = (__int64)v36;\n  }\n}\n"
        },
        {
            "funcName": "sub_4025FB",
            "funcStartAddr": "0x4025fb",
            "funcEndAddr": "0x40261a",
            "decompiledFuncCode": "__int64 *sub_4025FB()\n{\n  return &program_invocation_short_name;\n}\n"
        },
        {
            "funcName": "sub_40261A",
            "funcStartAddr": "0x40261a",
            "funcEndAddr": "0x402651",
            "decompiledFuncCode": "__int64 sub_40261A()\n{\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_402651",
            "funcStartAddr": "0x402651",
            "funcEndAddr": "0x4026a8",
            "decompiledFuncCode": "__int64 *sub_402651()\n{\n  __int64 *result; // rax\n\n  if ( !byte_614368 )\n  {\n    while ( qword_614370 < (unsigned __int64)(&qword_613E48 - qword_613E40 - 1) )\n      ((void (*)(void))qword_613E40[++qword_614370])();\n    result = sub_4025FB();\n    byte_614368 = 1;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4026A8",
            "funcStartAddr": "0x4026a8",
            "funcEndAddr": "0x4026ad",
            "decompiledFuncCode": "// attributes: thunk\n__int64 sub_4026A8()\n{\n  return sub_40261A();\n}\n"
        },
        {
            "funcName": "sub_4026B0",
            "funcStartAddr": "0x4026b0",
            "funcEndAddr": "0x402708",
            "decompiledFuncCode": "__int64 sub_4026B0()\n{\n  __int64 result; // rax\n  _DWORD *v1; // rdx\n\n  result = (unsigned int)dword_614298;\n  v1 = qword_614478;\n  if ( dword_614298 )\n  {\n    result = 0LL;\n    do\n    {\n      if ( v1[4] <= 1u || byte_6142B4 && (int)v1[11] > 0 && (int)v1[12] > 0 )\n        result = (unsigned int)(result + 1);\n      v1 += 16;\n    }\n    while ( v1 != (_DWORD *)((char *)qword_614478 + 64 * (unsigned int)(dword_614298 - 1) + 64) );\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_402710",
            "funcStartAddr": "0x402710",
            "funcEndAddr": "0x402782",
            "decompiledFuncCode": "unsigned __int64 sub_402710()\n{\n  unsigned __int64 result; // rax\n  _DWORD *v1; // rdi\n  int v2; // ecx\n  char v3; // si\n  char *v4; // rdx\n\n  result = (unsigned int)dword_614298;\n  v1 = qword_614478;\n  if ( dword_614298 )\n  {\n    v2 = dword_614410;\n    result = (unsigned __int64)qword_614478;\n    v3 = 0;\n    v4 = (char *)qword_614478 + 64 * (unsigned int)(dword_614298 - 1) + 64;\n    do\n    {\n      if ( *(_DWORD *)(result + 16) == 2 )\n      {\n        *(_DWORD *)(result + 16) = 0;\n        ++v2;\n        v3 = 1;\n      }\n      result += 64LL;\n    }\n    while ( (char *)result != v4 );\n    if ( v3 )\n      dword_614410 = v2;\n  }\n  if ( byte_6142B4 )\n  {\n    result = v1[4] != 3;\n    dword_614410 = v1[4] != 3;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_402790",
            "funcStartAddr": "0x402790",
            "funcEndAddr": "0x4027eb",
            "decompiledFuncCode": "void *__fastcall sub_402790(char a1)\n{\n  void *result; // rax\n  int v2; // edx\n\n  result = qword_614470;\n  v2 = dword_614468;\n  if ( (unsigned int)dword_614468 >= (unsigned __int64)qword_614460 )\n  {\n    result = (void *)sub_409460(qword_614470, &qword_614460);\n    qword_614470 = result;\n    v2 = dword_614468;\n    *((_BYTE *)result + (unsigned int)dword_614468) = a1;\n  }\n  else\n  {\n    *((_BYTE *)qword_614470 + (unsigned int)dword_614468) = a1;\n  }\n  dword_614468 = v2 + 1;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4027F0",
            "funcStartAddr": "0x4027f0",
            "funcEndAddr": "0x402820",
            "decompiledFuncCode": "__int64 sub_4027F0()\n{\n  char *v0; // rax\n  __int64 v1; // rdx\n\n  v0 = dcgettext(0LL, \"integer overflow\", 5);\n  error(1, 0, v0);\n  return sub_402820(1LL, 0LL, v1);\n}\n"
        },
        {
            "funcName": "sub_402820",
            "funcStartAddr": "0x402820",
            "funcEndAddr": "0x402919",
            "decompiledFuncCode": "__int64 __fastcall sub_402820(unsigned int a1, char a2, char *a3)\n{\n  unsigned int v4; // eax\n  char v5; // al\n  char *v7; // [rsp+8h] [rbp-40h]\n  __int64 v8; // [rsp+10h] [rbp-38h]\n\n  v4 = sub_40A5E0(a3);\n  if ( (v4 & 0xFFFFFFFD) != 0 )\n    goto LABEL_11;\n  if ( v7 == a3 || !v8 )\n    return 0LL;\n  v5 = *v7;\n  if ( *v7 != 58 )\n    goto LABEL_5;\n  v4 = sub_40A5E0(v7 + 1);\n  if ( v4 )\nLABEL_11:\n    sub_40A550(v4, a1, (unsigned int)a2, &off_40EBE0, a3);\n  if ( v7 == v7 + 1 )\n    return 0LL;\n  v5 = *v7;\nLABEL_5:\n  if ( !v5 )\n  {\n    qword_614418 = v8;\n    qword_614290 = -1LL;\n    return 1LL;\n  }\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_402920",
            "funcStartAddr": "0x402920",
            "funcEndAddr": "0x402950",
            "decompiledFuncCode": "size_t __fastcall sub_402920(const char *a1, __int64 a2)\n{\n  size_t result; // rax\n  __int64 v3; // rdx\n\n  result = strlen(a1);\n  if ( result > 0x7FFFFFFF )\n  {\n    sub_4027F0();\n    return sub_402950(a1, a2, v3);\n  }\n  else\n  {\n    off_614270 = (void *)a1;\n    dword_6143DC = result;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_402950",
            "funcStartAddr": "0x402950",
            "funcEndAddr": "0x402991",
            "decompiledFuncCode": "__int64 __fastcall sub_402950(__int64 a1)\n{\n  char *v1; // rax\n  __int64 result; // rax\n\n  v1 = dcgettext(0LL, \"invalid number of columns\", 5);\n  result = sub_409680(a1, 1LL, 0x7FFFFFFFLL, \"\", v1, 0LL);\n  byte_61444B = 1;\n  dword_614298 = result;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4029A0",
            "funcStartAddr": "0x4029a0",
            "funcEndAddr": "0x402ab0",
            "decompiledFuncCode": "void __fastcall sub_4029A0(__int64 a1)\n{\n  FILE *v2; // rdi\n  char *v3; // rax\n  char *v4; // rdx\n  int v5; // ecx\n  const char *v6; // rbx\n  int *v7; // rax\n  const char *v8; // rbx\n  int *v9; // rax\n\n  if ( *(_DWORD *)(a1 + 16) == 3 )\n    return;\n  v2 = *(FILE **)a1;\n  if ( (v2->_flags & 0x20) != 0 )\n  {\n    v8 = (const char *)sub_408BB0(0LL, 3LL, *(_QWORD *)(a1 + 8));\n    v9 = __errno_location();\n    error(1, *v9, \"%s\", v8);\n    sub_402AB0();\n    return;\n  }\n  if ( fileno(v2) && (unsigned int)sub_40AA20(*(FILE **)a1) )\n  {\n    v6 = (const char *)sub_408BB0(0LL, 3LL, *(_QWORD *)(a1 + 8));\n    v7 = __errno_location();\n    error(1, *v7, \"%s\", v6);\n    return;\n  }\n  if ( byte_61444F )\n  {\n    *(_DWORD *)(a1 + 16) = 3;\n    *(_DWORD *)(a1 + 48) = 0;\n    goto LABEL_12;\n  }\n  v3 = (char *)qword_614478;\n  if ( !dword_614298 )\n  {\nLABEL_12:\n    --dword_614410;\n    return;\n  }\n  v4 = (char *)qword_614478 + 64 * (unsigned int)(dword_614298 - 1) + 64;\n  do\n  {\n    v5 = *((_DWORD *)v3 + 11);\n    *((_DWORD *)v3 + 4) = 3;\n    if ( !v5 )\n      *((_DWORD *)v3 + 12) = 0;\n    v3 += 64;\n  }\n  while ( v3 != v4 );\n  --dword_614410;\n}\n"
        },
        {
            "funcName": "sub_402AB0",
            "funcStartAddr": "0x402ab0",
            "funcEndAddr": "0x402c97",
            "decompiledFuncCode": "__int64 __fastcall sub_402AB0(const char *a1, int a2)\n{\n  int v2; // r12d\n  unsigned int tv_nsec; // r14d\n  __int64 v4; // r13\n  void *v5; // rbp\n  char *v6; // rax\n  int v7; // ebx\n  int v8; // ebx\n  __int64 result; // rax\n  const char *v10; // rax\n  struct timespec si128; // [rsp+0h] [rbp-128h] BYREF\n  char v12[32]; // [rsp+10h] [rbp-118h] BYREF\n  char v13[64]; // [rsp+30h] [rbp-F8h] BYREF\n  struct stat stat_buf; // [rsp+70h] [rbp-B8h] BYREF\n\n  v2 = a2;\n  if ( !strcmp(a1, \"-\") )\n  {\n    v2 = -1;\n    if ( tp.tv_sec )\n      goto LABEL_4;\n    goto LABEL_10;\n  }\n  if ( a2 < 0 || __fxstat(1, a2, &stat_buf) )\n  {\n    if ( tp.tv_sec )\n    {\nLABEL_4:\n      si128 = (struct timespec)_mm_load_si128((const __m128i *)&tp);\n      tv_nsec = si128.tv_nsec;\n      goto LABEL_5;\n    }\nLABEL_10:\n    sub_405550(&tp);\n    goto LABEL_4;\n  }\n  tv_nsec = stat_buf.st_mtim.tv_nsec;\n  si128 = stat_buf.st_mtim;\nLABEL_5:\n  if ( sub_40BE80(qword_6143B8, &si128, v13) )\n  {\n    v4 = sub_4070F0(0LL, -1LL, qword_6143C0, v13, qword_6143B8, tv_nsec) + 1;\n    v5 = (void *)sub_409300(v4);\n    sub_4070F0(v5, v4, qword_6143C0, v13, qword_6143B8, tv_nsec);\n  }\n  else\n  {\n    v5 = (void *)sub_409300(33LL);\n    v10 = (const char *)sub_4055F0(si128.tv_sec, v12);\n    __sprintf_chk(v5, 1LL, 33LL, \"%s.%09d\", v10, tv_nsec);\n  }\n  free(qword_6143B0);\n  v6 = (char *)qword_6143C8;\n  qword_6143B0 = v5;\n  if ( !qword_6143C8 )\n  {\n    v6 = \"\";\n    if ( v2 >= 0 )\n      v6 = (char *)a1;\n  }\n  v7 = dword_6142AC;\n  qword_6143A8 = v6;\n  v8 = v7 - sub_405850((char *)v5);\n  result = sub_405850(qword_6143A8);\n  dword_6143A0 = v8 - result;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_402CA0",
            "funcStartAddr": "0x402ca0",
            "funcEndAddr": "0x402d0c",
            "decompiledFuncCode": "void __fastcall sub_402CA0(int a1)\n{\n  int v1; // ebx\n  char *IO_write_ptr; // rax\n\n  v1 = dword_614428;\n  if ( byte_614434 )\n  {\n    dword_614430 = a1 - dword_614428;\n  }\n  else\n  {\n    while ( a1 >= ++v1 )\n    {\n      IO_write_ptr = stdout->_IO_write_ptr;\n      if ( IO_write_ptr >= stdout->_IO_write_end )\n      {\n        __overflow(stdout, 32);\n      }\n      else\n      {\n        stdout->_IO_write_ptr = IO_write_ptr + 1;\n        *IO_write_ptr = 32;\n      }\n    }\n    dword_614428 = a1;\n  }\n}\n"
        },
        {
            "funcName": "sub_402D10",
            "funcStartAddr": "0x402d10",
            "funcEndAddr": "0x402dcc",
            "decompiledFuncCode": "int sub_402D10()\n{\n  int v0; // ebp\n  int v1; // r12d\n  char *v2; // rax\n  int v3; // ebx\n  char v4; // si\n  char *IO_write_ptr; // rax\n\n  v0 = dword_614428;\n  v1 = dword_614428 + dword_614430;\n  while ( 1 )\n  {\n    LODWORD(v2) = v1 - v0;\n    if ( v1 - v0 <= 1 )\n      break;\n    LODWORD(v2) = v0 / dword_61429C;\n    v3 = dword_61429C - v0 % dword_61429C + v0;\n    if ( v1 < v3 )\n      break;\n    v4 = byte_6142A0;\n    IO_write_ptr = stdout->_IO_write_ptr;\n    if ( IO_write_ptr >= stdout->_IO_write_end )\n    {\n      __overflow(stdout, (unsigned __int8)byte_6142A0);\n      v0 = v3;\n    }\n    else\n    {\n      v0 += dword_61429C - v0 % dword_61429C;\n      stdout->_IO_write_ptr = IO_write_ptr + 1;\n      *IO_write_ptr = v4;\n    }\n  }\n  while ( v1 >= ++v0 )\n  {\n    v2 = stdout->_IO_write_ptr;\n    if ( v2 >= stdout->_IO_write_end )\n    {\n      LODWORD(v2) = __overflow(stdout, 32);\n    }\n    else\n    {\n      stdout->_IO_write_ptr = v2 + 1;\n      *v2 = 32;\n    }\n  }\n  dword_614428 = v1;\n  dword_614430 = 0;\n  return (int)v2;\n}\n"
        },
        {
            "funcName": "sub_402DD0",
            "funcStartAddr": "0x402dd0",
            "funcEndAddr": "0x402ed3",
            "decompiledFuncCode": "int sub_402DD0()\n{\n  int result; // eax\n  unsigned __int8 *v1; // r12\n  int v2; // ebp\n  unsigned __int8 *v3; // rbx\n  int v4; // r14d\n  int v5; // esi\n  char *IO_write_ptr; // rax\n  int v7; // edx\n\n  result = dword_614430;\n  if ( dword_6143D8 <= 0 )\n  {\n    if ( dword_614430 > 0 )\n      return sub_402D10();\n  }\n  else\n  {\n    v1 = (unsigned __int8 *)off_614270;\n    v2 = dword_6143DC;\n    while ( 1 )\n    {\n      v3 = v1;\n      v4 = v2 + (_DWORD)v1;\n      while ( v4 - (int)v3 > 0 )\n      {\n        while ( 1 )\n        {\n          v5 = *v3++;\n          if ( (_BYTE)v5 == 32 )\n            break;\n          if ( result > 0 )\n          {\n            sub_402D10();\n            v5 = *(v3 - 1);\n          }\n          IO_write_ptr = stdout->_IO_write_ptr;\n          if ( IO_write_ptr >= stdout->_IO_write_end )\n          {\n            __overflow(stdout, v5);\n          }\n          else\n          {\n            stdout->_IO_write_ptr = IO_write_ptr + 1;\n            *IO_write_ptr = v5;\n          }\n          ++dword_614428;\n          result = dword_614430;\n          if ( v4 - (int)v3 <= 0 )\n            goto LABEL_11;\n        }\n        dword_614430 = ++result;\n      }\nLABEL_11:\n      v7 = 0;\n      if ( v2 >= 0 )\n        v7 = v2;\n      v2 = v2 - 1 - v7;\n      v1 += v7;\n      if ( result > 0 )\n        sub_402D10();\n      result = dword_6143D8 - 1;\n      dword_6143D8 = result;\n      if ( result <= 0 )\n        break;\n      result = dword_614430;\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_402EE0",
            "funcStartAddr": "0x402ee0",
            "funcEndAddr": "0x402fe0",
            "decompiledFuncCode": "__int64 sub_402EE0()\n{\n  __int64 v0; // rbx\n  char *v1; // rax\n  __int64 result; // rax\n  char *v3; // rax\n  char v4[312]; // [rsp+0h] [rbp-138h] BYREF\n\n  dword_614428 = 0;\n  sub_402CA0(dword_61442C);\n  sub_402D10();\n  v0 = qword_614408;\n  if ( qword_614408 )\n  {\n    v1 = dcgettext(0LL, \"Page %lu\", 5);\n    __sprintf_chk(v4, 1LL, 276LL, v1, v0);\n    sub_405850(v4);\n    result = __printf_chk(1LL, \"\\n\\n%*s%s%*s%s%*s%s\\n\\n\\n\", (unsigned int)dword_61442C, \"\", qword_6143B0);\n    byte_614448 = 0;\n    dword_614428 = 0;\n  }\n  else\n  {\n    v3 = dcgettext(0LL, \"page number overflow\", 5);\n    error(1, 0, v3);\n    return sub_402FE0();\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_402FE0",
            "funcStartAddr": "0x402fe0",
            "funcEndAddr": "0x4031d7",
            "decompiledFuncCode": "__int64 __fastcall sub_402FE0(unsigned __int8 a1)\n{\n  unsigned __int8 *v1; // rbx\n  int v2; // eax\n  int v3; // esi\n  __int64 result; // rax\n  signed int v5; // edx\n  int v6; // ecx\n  unsigned int v7; // ecx\n  unsigned __int8 *v8; // rdx\n  int v9; // eax\n  char v10[28]; // [rsp+Ch] [rbp-1Ch] BYREF\n\n  v1 = (unsigned __int8 *)qword_614398;\n  if ( byte_6142A8 == a1 )\n  {\n    v3 = dword_614424;\n    v7 = dword_6142A4 - dword_614424 % dword_6142A4;\n    v5 = v7;\n    if ( !byte_614435 )\n    {\nLABEL_9:\n      *(_BYTE *)qword_614398 = a1;\n      result = 1LL;\n      goto LABEL_10;\n    }\n    if ( !v7 )\n    {\n      result = 0LL;\n      goto LABEL_12;\n    }\n    result = v7;\n  }\n  else\n  {\n    if ( a1 != 9 )\n    {\n      if ( ((*__ctype_b_loc())[a1] & 0x4000) != 0 )\n      {\n        v9 = dword_614424;\n        *v1 = a1;\n        v3 = v9 + 1;\n        result = 1LL;\n        goto LABEL_12;\n      }\n      if ( byte_6143EA )\n        goto LABEL_25;\n      if ( byte_6143E9 )\n      {\n        if ( (a1 & 0x80u) == 0 )\n        {\n          v2 = dword_614424;\n          *v1 = 94;\n          v3 = v2 + 2;\n          v1[1] = a1 ^ 0x40;\n          result = 2LL;\nLABEL_12:\n          dword_614424 = v3;\n          return result;\n        }\nLABEL_25:\n        *v1 = 92;\n        __sprintf_chk(v10, 1LL, 4LL, \"%03o\", a1);\n        v1[1] = v10[0];\n        v1[2] = v10[1];\n        v1[3] = v10[2];\n        v3 = dword_614424 + 4;\n        result = 4LL;\n        goto LABEL_12;\n      }\n      v3 = dword_614424;\n      if ( a1 != 8 )\n      {\n        *v1 = a1;\n        result = 1LL;\n        goto LABEL_12;\n      }\n      *v1 = 8;\n      if ( v3 )\n      {\n        v6 = 1;\n        v5 = -1;\n        result = 1LL;\nLABEL_15:\n        if ( v6 >= v3 )\n        {\n          dword_614424 = 0;\n          return result;\n        }\nLABEL_11:\n        v3 += v5;\n        goto LABEL_12;\n      }\n      goto LABEL_24;\n    }\n    v3 = dword_614424;\n    result = ((unsigned int)(dword_614424 >> 31) >> 29)\n           - (((_BYTE)dword_614424 + ((unsigned int)(dword_614424 >> 31) >> 29)) & 7)\n           + 8;\n    v5 = ((unsigned int)(dword_614424 >> 31) >> 29)\n       - (((_BYTE)dword_614424 + ((unsigned int)(dword_614424 >> 31) >> 29)) & 7)\n       + 8;\n    if ( !byte_614435 )\n      goto LABEL_9;\n  }\n  v8 = (unsigned __int8 *)qword_614398 + (unsigned int)(result - 1) + 1;\n  do\n    *v1++ = 32;\n  while ( v1 != v8 );\n  v5 = result;\nLABEL_10:\n  if ( v5 >= 0 )\n    goto LABEL_11;\n  if ( v3 )\n  {\n    v6 = -v5;\n    goto LABEL_15;\n  }\nLABEL_24:\n  dword_614424 = 0;\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_4031E0",
            "funcStartAddr": "0x4031e0",
            "funcEndAddr": "0x40327e",
            "decompiledFuncCode": "int __fastcall sub_4031E0(unsigned __int8 a1)\n{\n  char *IO_write_ptr; // rax\n\n  if ( byte_614434 )\n  {\n    if ( a1 == 32 )\n    {\n      LODWORD(IO_write_ptr) = ++dword_614430;\n      return (int)IO_write_ptr;\n    }\n    if ( dword_614430 > 0 )\n      sub_402D10();\n    if ( ((*__ctype_b_loc())[a1] & 0x4000) != 0 )\n    {\n      ++dword_614428;\n    }\n    else if ( a1 == 8 )\n    {\n      --dword_614428;\n    }\n  }\n  IO_write_ptr = stdout->_IO_write_ptr;\n  if ( IO_write_ptr >= stdout->_IO_write_end )\n  {\n    LODWORD(IO_write_ptr) = __overflow(stdout, a1);\n  }\n  else\n  {\n    stdout->_IO_write_ptr = IO_write_ptr + 1;\n    *IO_write_ptr = a1;\n  }\n  return (int)IO_write_ptr;\n}\n"
        },
        {
            "funcName": "sub_403280",
            "funcStartAddr": "0x403280",
            "funcEndAddr": "0x403408",
            "decompiledFuncCode": "__int64 __fastcall sub_403280(_DWORD *a1)\n{\n  __int64 v1; // r12\n  char *v2; // rbp\n  unsigned __int8 *v3; // rbx\n  unsigned __int8 *v4; // rbp\n  int v5; // eax\n  int v6; // edx\n  __int64 result; // rax\n  int *v8; // rcx\n  char *v9; // rax\n  char *v10; // rdx\n\n  v1 = (int)a1[10];\n  v2 = (char *)qword_614470;\n  byte_6143D0 = 1;\n  a1[10] = v1 + 1;\n  v3 = (unsigned __int8 *)&v2[*((int *)qword_614458 + v1)];\n  v4 = (unsigned __int8 *)&v2[*((int *)qword_614458 + v1 + 1)];\n  if ( byte_614448 )\n    sub_402EE0();\n  if ( a1[4] == 1 )\n  {\n    v8 = (int *)qword_614478;\n    if ( dword_614298 > 0 )\n    {\n      v9 = (char *)qword_614478;\n      v10 = (char *)qword_614478 + 64 * (unsigned int)(dword_614298 - 1) + 64;\n      do\n      {\n        *((_DWORD *)v9 + 4) = 2;\n        v9 += 64;\n      }\n      while ( v9 != v10 );\n    }\n    if ( v8[12] <= 0 )\n    {\n      if ( !byte_6142B5 )\n        byte_6143D0 = 0;\n      return 1LL;\n    }\n  }\n  if ( dword_6143DC < dword_6143D4 )\n  {\n    sub_402CA0(dword_6143D4 - dword_6143DC);\n    dword_6143D4 = 0;\n  }\n  if ( byte_6143E0 )\n    sub_402DD0();\n  while ( v4 != v3 )\n    sub_4031E0(*v3++);\n  if ( dword_614430 )\n    return 1LL;\n  v5 = a1[13];\n  v6 = v5 + *((_DWORD *)qword_614450 + v1);\n  dword_614428 = v6;\n  if ( v5 - dword_6143DC != dword_61442C )\n    return 1LL;\n  result = 1LL;\n  dword_614428 = v6 - dword_6143DC;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_403410",
            "funcStartAddr": "0x403410",
            "funcEndAddr": "0x403484",
            "decompiledFuncCode": "void __fastcall sub_403410(_DWORD *a1, _DWORD *a2)\n{\n  char *v2; // rax\n  int v3; // ecx\n  char *v4; // rdx\n\n  if ( byte_61444F )\n  {\n    *a1 = 2;\n    --dword_614410;\n    *a2 = 0;\n  }\n  else\n  {\n    v2 = (char *)qword_614478;\n    if ( dword_614298 )\n    {\n      v3 = 2 - (byte_6142B4 != 0);\n      v4 = (char *)qword_614478 + 64 * (unsigned int)(dword_614298 - 1) + 64;\n      do\n      {\n        *((_DWORD *)v2 + 4) = v3;\n        v2 += 64;\n      }\n      while ( v2 != v4 );\n    }\n    *a2 = 0;\n    --dword_614410;\n  }\n}\n"
        },
        {
            "funcName": "sub_403490",
            "funcStartAddr": "0x403490",
            "funcEndAddr": "0x4036b4",
            "decompiledFuncCode": "void __fastcall sub_403490(__int64 a1, int a2)\n{\n  _IO_FILE *v3; // rbx\n  unsigned __int8 *v4; // rax\n  int v5; // eax\n  char v6; // bp\n  char *v7; // rax\n  char *v8; // rax\n  char v9; // al\n  char *v10; // rax\n  char *v11; // rdx\n  char *IO_read_ptr; // rax\n  int v13; // edi\n  char *v14; // rax\n\n  v3 = *(_IO_FILE **)a1;\n  v4 = *(unsigned __int8 **)(*(_QWORD *)a1 + 8LL);\n  if ( (unsigned __int64)v4 >= *(_QWORD *)(*(_QWORD *)a1 + 16LL) )\n  {\n    v5 = __uflow(*(_IO_FILE **)a1);\n  }\n  else\n  {\n    v3->_IO_read_ptr = (char *)(v4 + 1);\n    v5 = *v4;\n  }\n  if ( v5 == 12 )\n  {\n    if ( !*(_BYTE *)(a1 + 57) )\n    {\n      v6 = byte_614390;\n      v9 = byte_614390;\n      if ( !byte_614390 )\n      {\n        v6 = 1;\nLABEL_31:\n        IO_read_ptr = v3->_IO_read_ptr;\n        if ( IO_read_ptr >= v3->_IO_read_end )\n        {\n          v13 = __uflow(v3);\n        }\n        else\n        {\n          v3->_IO_read_ptr = IO_read_ptr + 1;\n          v13 = (unsigned __int8)*IO_read_ptr;\n        }\n        if ( v13 != 10 )\n          ungetc(v13, v3);\n        sub_403410((_DWORD *)(a1 + 16), (_DWORD *)(a1 + 48));\n        goto LABEL_7;\n      }\n      *(_BYTE *)(a1 + 57) = 1;\nLABEL_26:\n      if ( v9 )\n      {\n        if ( byte_61444F )\n        {\n          *(_BYTE *)(a1 + 57) = 0;\n        }\n        else\n        {\n          v10 = (char *)qword_614478;\n          if ( dword_614298 )\n          {\n            v11 = (char *)qword_614478 + 64 * (unsigned int)(dword_614298 - 1) + 64;\n            do\n            {\n              v10[57] = 0;\n              v10 += 64;\n            }\n            while ( v10 != v11 );\n          }\n        }\n      }\n      goto LABEL_31;\n    }\n    v8 = v3->_IO_read_ptr;\n    if ( v8 >= v3->_IO_read_end )\n    {\n      v5 = __uflow(v3);\n    }\n    else\n    {\n      v3->_IO_read_ptr = v8 + 1;\n      v5 = (unsigned __int8)*v8;\n    }\n    if ( v5 == 10 )\n    {\n      v14 = v3->_IO_read_ptr;\n      if ( v14 >= v3->_IO_read_end )\n      {\n        v5 = __uflow(v3);\n      }\n      else\n      {\n        v3->_IO_read_ptr = v14 + 1;\n        v5 = (unsigned __int8)*v14;\n      }\n    }\n    *(_BYTE *)(a1 + 57) = 0;\n    v6 = v5 == 12;\n  }\n  else\n  {\n    *(_BYTE *)(a1 + 57) = 0;\n    v6 = 0;\n  }\n  if ( !byte_614390 )\n    goto LABEL_14;\n  *(_BYTE *)(a1 + 57) = 1;\n  if ( v5 != 10 )\n  {\n    while ( v5 != 12 )\n    {\n      if ( v5 == -1 )\n      {\n        sub_4029A0(a1);\n        goto LABEL_7;\n      }\n      v7 = v3->_IO_read_ptr;\n      if ( v7 < v3->_IO_read_end )\n      {\n        v3->_IO_read_ptr = v7 + 1;\n        v5 = (unsigned __int8)*v7;\n      }\n      else\n      {\n        v5 = __uflow(v3);\n      }\nLABEL_14:\n      if ( v5 == 10 )\n        goto LABEL_7;\n    }\n    v9 = byte_614390;\n    goto LABEL_26;\n  }\nLABEL_7:\n  if ( byte_614280 && (byte_61444F != 1 || a2 == 1) && !v6 )\n    ++dword_614284;\n}\n"
        },
        {
            "funcName": "sub_4036C0",
            "funcStartAddr": "0x4036c0",
            "funcEndAddr": "0x4037dd",
            "decompiledFuncCode": "__int64 __fastcall sub_4036C0(void (__fastcall **a1)(_QWORD))\n{\n  int v1; // eax\n  char *v2; // rbx\n  __int64 v3; // r12\n  __int64 result; // rax\n  int v5; // ebx\n  int v6; // ebx\n  int v7; // ecx\n\n  v1 = __sprintf_chk(ptr, 1LL, -1LL, \"%*d\", dword_614278, (unsigned int)dword_614400);\n  ++dword_614400;\n  v2 = (char *)ptr + v1 - dword_614278;\n  v3 = (__int64)&v2[dword_614278 - 1 + 1];\n  if ( dword_614278 > 0 )\n  {\n    do\n      (*a1)((unsigned int)*v2++);\n    while ( v2 != (char *)v3 );\n  }\n  if ( dword_614298 <= 1 )\n  {\n    result = ((__int64 (__fastcall *)(_QWORD))*a1)((unsigned int)byte_614288);\n    if ( byte_614288 == 9 )\n    {\n      v7 = dword_61429C - dword_614428 % dword_61429C;\n      result = (unsigned int)(v7 + dword_614428);\n      dword_614428 += v7;\n    }\n  }\n  else if ( byte_614288 == 9 )\n  {\n    result = (unsigned int)(dword_6143F8 - dword_614278);\n    v5 = result - 1;\n    if ( dword_6143F8 - dword_614278 > 0 )\n    {\n      do\n      {\n        v6 = v5 - 1;\n        result = ((__int64 (__fastcall *)(__int64))*a1)(32LL);\n        if ( v6 == -1 )\n          break;\n        v5 = v6 - 1;\n        result = ((__int64 (__fastcall *)(__int64))*a1)(32LL);\n      }\n      while ( v5 != -1 );\n    }\n  }\n  else\n  {\n    result = ((__int64 (*)(void))*a1)();\n  }\n  if ( byte_61443D )\n  {\n    if ( !byte_61444F )\n    {\n      result = (unsigned int)dword_6143F8;\n      dword_614424 += dword_6143F8;\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4037E0",
            "funcStartAddr": "0x4037e0",
            "funcEndAddr": "0x40383f",
            "decompiledFuncCode": "void __fastcall sub_4037E0(__int64 a1)\n{\n  int v2; // edi\n\n  v2 = *(_DWORD *)(a1 + 52);\n  dword_6143D4 = v2;\n  if ( v2 > dword_6143DC )\n  {\n    sub_402CA0(v2 - dword_6143DC);\n    dword_6143D4 = 0;\n    if ( !byte_6143E0 )\n    {\nLABEL_3:\n      if ( !*(_BYTE *)(a1 + 56) )\n        return;\nLABEL_7:\n      sub_4036C0((void (__fastcall **)(_QWORD))(a1 + 32));\n      return;\n    }\n  }\n  else if ( !byte_6143E0 )\n  {\n    goto LABEL_3;\n  }\n  sub_402DD0();\n  if ( *(_BYTE *)(a1 + 56) )\n    goto LABEL_7;\n}\n"
        },
        {
            "funcName": "sub_403840",
            "funcStartAddr": "0x403840",
            "funcEndAddr": "0x403c7f",
            "decompiledFuncCode": "__int64 __fastcall sub_403840(_BYTE *a1)\n{\n  int v1; // r12d\n  _IO_FILE *v3; // rdi\n  char *IO_read_ptr; // rax\n  int v5; // ebx\n  int v6; // r13d\n  int v7; // eax\n  char *v8; // r13\n  char *v9; // r14\n  __int64 v10; // rdi\n  int v11; // edi\n  int v12; // eax\n  __int64 result; // rax\n  char *v14; // rbx\n  char *v15; // r13\n  FILE *v16; // rdi\n  unsigned __int8 *v17; // rax\n  int v18; // eax\n  int v19; // ebx\n  int v20; // eax\n  char *v21; // rbx\n  char *v22; // r12\n  _IO_FILE *v23; // rdi\n  unsigned __int8 *v24; // rax\n  unsigned __int64 v25; // rdx\n  _IO_FILE *v26; // rdi\n  unsigned __int8 *v27; // rax\n  int v28; // edi\n  FILE *v29; // rdi\n  unsigned __int8 *v30; // rax\n  int v31; // edi\n\n  v3 = *(_IO_FILE **)a1;\n  IO_read_ptr = v3->_IO_read_ptr;\n  if ( IO_read_ptr >= v3->_IO_read_end )\n  {\n    v5 = __uflow(v3);\n  }\n  else\n  {\n    v3->_IO_read_ptr = IO_read_ptr + 1;\n    v5 = (unsigned __int8)*IO_read_ptr;\n  }\n  v6 = dword_614424;\n  if ( v5 == 12 )\n  {\n    v23 = *(_IO_FILE **)a1;\n    v24 = *(unsigned __int8 **)(*(_QWORD *)a1 + 8LL);\n    v25 = *(_QWORD *)(*(_QWORD *)a1 + 16LL);\n    if ( !a1[57] )\n      goto LABEL_50;\n    if ( (unsigned __int64)v24 >= v25 )\n    {\n      v5 = __uflow(v23);\n    }\n    else\n    {\n      v23->_IO_read_ptr = (char *)(v24 + 1);\n      v5 = *v24;\n    }\n    if ( v5 == 10 )\n    {\n      v26 = *(_IO_FILE **)a1;\n      v27 = *(unsigned __int8 **)(*(_QWORD *)a1 + 8LL);\n      if ( (unsigned __int64)v27 >= *(_QWORD *)(*(_QWORD *)a1 + 16LL) )\n      {\n        v5 = __uflow(v26);\n      }\n      else\n      {\n        v26->_IO_read_ptr = (char *)(v27 + 1);\n        v5 = *v27;\n      }\n    }\n  }\n  a1[57] = 0;\n  switch ( v5 )\n  {\n    case 10:\n      goto LABEL_8;\n    case 12:\n      v23 = *(_IO_FILE **)a1;\n      v24 = *(unsigned __int8 **)(*(_QWORD *)a1 + 8LL);\n      v25 = *(_QWORD *)(*(_QWORD *)a1 + 16LL);\nLABEL_50:\n      if ( v25 <= (unsigned __int64)v24 )\n      {\n        v28 = __uflow(v23);\n      }\n      else\n      {\n        v23->_IO_read_ptr = (char *)(v24 + 1);\n        v28 = *v24;\n      }\n      if ( v28 == 10 )\n      {\n        byte_61444C = 1;\n        if ( !byte_614448 )\n          goto LABEL_55;\n      }\n      else\n      {\n        ungetc(v28, *(FILE **)a1);\n        byte_61444C = 1;\n        if ( !byte_614448 )\n          goto LABEL_55;\n      }\n      if ( !byte_6142B4 )\n      {\n        byte_6143D0 = 1;\n        sub_402EE0();\nLABEL_57:\n        sub_403410((_DWORD *)a1 + 4, (_DWORD *)a1 + 12);\n        return 1LL;\n      }\nLABEL_55:\n      if ( byte_61444A )\n        byte_614449 = 1;\n      goto LABEL_57;\n    case -1:\nLABEL_22:\n      sub_4029A0((__int64)a1);\n      return 1LL;\n  }\n  v1 = sub_402FE0(v5);\nLABEL_8:\n  if ( byte_61443D && dword_614424 > dword_614438 )\n  {\n    dword_614424 = v6;\n    return 0LL;\n  }\n  else\n  {\n    if ( *((void *(__fastcall **)(char))a1 + 4) != sub_402790 )\n    {\n      byte_6143D0 = 1;\n      if ( byte_614448 && !byte_6142B4 )\n        sub_402EE0();\n      if ( byte_61444F && byte_61444E )\n      {\n        v7 = dword_6143D8;\n        v8 = (char *)qword_614478;\n        dword_6143D8 = 0;\n        if ( v7 > 0 )\n        {\n          v9 = (char *)qword_614478 + 64 * (unsigned int)(v7 - 1) + 64;\n          do\n          {\n            v10 = (__int64)v8;\n            v8 += 64;\n            sub_4037E0(v10);\n            ++dword_6143D8;\n          }\n          while ( v9 != v8 );\n        }\n        v11 = *((_DWORD *)a1 + 13);\n        v12 = 0;\n        byte_61444E = 0;\n        if ( byte_61443D )\n          v12 = dword_614438;\n        dword_6143D4 = v11;\n        dword_614430 = v12;\n      }\n      else\n      {\n        v11 = dword_6143D4;\n      }\n      if ( dword_6143DC < v11 )\n      {\n        sub_402CA0(v11 - dword_6143DC);\n        dword_6143D4 = 0;\n      }\n      if ( byte_6143E0 )\n        sub_402DD0();\n    }\n    if ( a1[56] )\n      sub_4036C0((void (__fastcall **)(_QWORD))a1 + 4);\n    byte_61444D = 0;\n    result = 1LL;\n    if ( v5 != 10 )\n    {\n      v14 = (char *)qword_614398;\n      v15 = (char *)qword_614398 + (unsigned int)(v1 - 1) + 1;\n      if ( v1 )\n      {\n        do\n          (*((void (__fastcall **)(_QWORD))a1 + 4))((unsigned int)*v14++);\n        while ( v15 != v14 );\n      }\n      while ( 1 )\n      {\n        v16 = *(FILE **)a1;\n        v17 = *(unsigned __int8 **)(*(_QWORD *)a1 + 8LL);\n        if ( (unsigned __int64)v17 >= *(_QWORD *)(*(_QWORD *)a1 + 16LL) )\n        {\n          v18 = __uflow(v16);\n        }\n        else\n        {\n          v16->_IO_read_ptr = (char *)(v17 + 1);\n          v18 = *v17;\n        }\n        if ( v18 == 10 )\n          return 1LL;\n        if ( v18 == 12 )\n          break;\n        if ( v18 == -1 )\n          goto LABEL_22;\n        v19 = dword_614424;\n        v20 = sub_402FE0(v18);\n        if ( byte_61443D && dword_614424 > dword_614438 )\n        {\n          dword_614424 = v19;\n          return 0LL;\n        }\n        v21 = (char *)qword_614398;\n        v22 = (char *)qword_614398 + (unsigned int)(v20 - 1) + 1;\n        if ( v20 )\n        {\n          do\n            (*((void (__fastcall **)(_QWORD))a1 + 4))((unsigned int)*v21++);\n          while ( v21 != v22 );\n        }\n      }\n      v29 = *(FILE **)a1;\n      v30 = *(unsigned __int8 **)(*(_QWORD *)a1 + 8LL);\n      if ( (unsigned __int64)v30 >= *(_QWORD *)(*(_QWORD *)a1 + 16LL) )\n      {\n        v31 = __uflow(v29);\n      }\n      else\n      {\n        v29->_IO_read_ptr = (char *)(v30 + 1);\n        v31 = *v30;\n      }\n      if ( v31 != 10 )\n        ungetc(v31, *(FILE **)a1);\n      goto LABEL_55;\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_403C80",
            "funcStartAddr": "0x403c80",
            "funcEndAddr": "0x403d71",
            "decompiledFuncCode": "__int64 __fastcall sub_403C80(const char *a1, __int64 a2)\n{\n  char *v3; // rax\n  FILE *v4; // rdi\n  unsigned int v6; // ebx\n  const char *v7; // rbp\n  int *v8; // rax\n\n  if ( !strcmp(a1, \"-\") )\n  {\n    v3 = dcgettext(0LL, \"standard input\", 5);\n    v4 = stdin;\n    byte_614446 = 1;\n    *(_QWORD *)(a2 + 8) = v3;\n    *(_QWORD *)a2 = v4;\n    if ( v4 )\n    {\nLABEL_3:\n      sub_405480(v4, 2LL);\n      *(_DWORD *)(a2 + 16) = 0;\n      *(_BYTE *)(a2 + 57) = 0;\n      ++dword_6143E4;\n      return 1LL;\n    }\n  }\n  else\n  {\n    *(_QWORD *)(a2 + 8) = a1;\n    v4 = (FILE *)sub_4054B0(a1, \"r\");\n    *(_QWORD *)a2 = v4;\n    if ( v4 )\n      goto LABEL_3;\n  }\n  v6 = (unsigned __int8)byte_6143E1;\n  byte_614420 = 1;\n  if ( byte_6143E1 )\n    return 0LL;\n  v7 = (const char *)sub_408BB0(v4, 3LL, a1);\n  v8 = __errno_location();\n  error(0, *v8, \"%s\", v7);\n  return v6;\n}\n"
        },
        {
            "funcName": "sub_403D80",
            "funcStartAddr": "0x403d80",
            "funcEndAddr": "0x403e3f",
            "decompiledFuncCode": "void __fastcall sub_403D80(__int64 a1)\n{\n  FILE *v2; // rbx\n  int v3; // eax\n  char *IO_read_ptr; // rax\n  char *v5; // rax\n  int v6; // edi\n\n  v2 = *(FILE **)a1;\n  do\n  {\n    IO_read_ptr = v2->_IO_read_ptr;\n    if ( IO_read_ptr < v2->_IO_read_end )\n    {\n      v2->_IO_read_ptr = IO_read_ptr + 1;\n      v3 = (unsigned __int8)*IO_read_ptr;\n      if ( v3 == 10 )\n        return;\n    }\n    else\n    {\n      v3 = __uflow(v2);\n      if ( v3 == 10 )\n        return;\n    }\n    if ( v3 == 12 )\n    {\n      v5 = v2->_IO_read_ptr;\n      if ( v5 >= v2->_IO_read_end )\n      {\n        v6 = __uflow(v2);\n      }\n      else\n      {\n        v2->_IO_read_ptr = v5 + 1;\n        v6 = (unsigned __int8)*v5;\n      }\n      if ( v6 == 10 )\n      {\n        if ( !byte_61444A )\n        {\nLABEL_13:\n          sub_403410((_DWORD *)(a1 + 16), (_DWORD *)(a1 + 48));\n          return;\n        }\n      }\n      else\n      {\n        ungetc(v6, v2);\n        if ( !byte_61444A )\n          goto LABEL_13;\n      }\n      byte_614449 = 1;\n      goto LABEL_13;\n    }\n  }\n  while ( v3 != -1 );\n  sub_4029A0(a1);\n}\n"
        },
        {
            "funcName": "sub_403E40",
            "funcStartAddr": "0x403e40",
            "funcEndAddr": "0x404ddb",
            "decompiledFuncCode": "__int64 __fastcall sub_403E40(int a1, const char **a2)\n{\n  int v4; // ecx\n  char *v5; // rax\n  unsigned int v6; // eax\n  __int64 v7; // rsi\n  int v8; // edi\n  int v9; // edx\n  int v10; // eax\n  int v11; // edi\n  void *v12; // rax\n  _BOOL8 v13; // rdx\n  unsigned __int64 v14; // rdi\n  void *v15; // rax\n  __int64 v16; // rbp\n  __int64 v17; // r12\n  __int64 result; // rax\n  const char *v19; // rdi\n  __int64 v20; // rdx\n  unsigned __int64 IO_write_ptr_high; // rcx\n  __int64 v22; // r13\n  char v23; // bp\n  __int64 v24; // r8\n  int v25; // r12d\n  _IO_FILE *v26; // r10\n  int v27; // r9d\n  char v28; // r11\n  __int64 v29; // rsi\n  char *v30; // rdx\n  int v31; // ebx\n  char v32; // al\n  unsigned __int64 IO_read_end_low; // rdi\n  _QWORD *v34; // rax\n  int v35; // edx\n  int v36; // r14d\n  int v37; // r13d\n  _IO_FILE *v38; // rbx\n  unsigned __int64 v39; // rdx\n  char *v40; // rdx\n  __int64 v41; // rcx\n  __int64 v42; // r8\n  int v43; // r9d\n  char *v44; // r10\n  int v45; // ebp\n  char v46; // r13\n  unsigned __int8 (__fastcall **v47)(unsigned int *); // rbx\n  int v48; // r14d\n  int v49; // eax\n  int v50; // eax\n  unsigned int v51; // eax\n  char *IO_write_ptr; // rax\n  char *v53; // rax\n  char *v54; // rax\n  char *v55; // rax\n  char *v56; // rax\n  char *v57; // rdx\n  int v58; // eax\n  int v59; // r13d\n  int v60; // ebp\n  __int64 v61; // r15\n  int v62; // r14d\n  int v63; // eax\n  _DWORD *v64; // rsi\n  _DWORD *v65; // rdx\n  char v66; // r9\n  int v67; // r11d\n  _IO_FILE *v68; // rax\n  __int64 v69; // rbx\n  int j; // ebp\n  char *v71; // rax\n  __int64 v72; // rdi\n  char *v73; // rax\n  __int64 v74; // r12\n  _DWORD *v75; // rbx\n  int v76; // r14d\n  int i; // r9d\n  int v78; // ebp\n  int v79; // esi\n  __int64 v80; // rdi\n  int v81; // ebp\n  int v82; // esi\n  __int64 v83; // rdi\n  char *v84; // rax\n  char *v85; // rdx\n  signed int v86; // ebx\n  int v87; // r12d\n  int v88; // ebp\n  char *v89; // rax\n  FILE *v90; // rax\n  __int64 v91; // rax\n  __int64 v92; // rbp\n  int v93; // eax\n  char *v94; // rax\n  char *v95; // rax\n  int v96; // [rsp+8h] [rbp-40h]\n  int v97; // [rsp+Ch] [rbp-3Ch]\n\n  dword_614440 = dword_6142B0 - 10;\n  if ( dword_6142B0 - 10 <= 0 )\n  {\n    byte_6142B5 = 0;\n    byte_61444A = 1;\n  }\n  else if ( byte_6142B5 )\n  {\n    goto LABEL_3;\n  }\n  dword_614440 = dword_6142B0;\nLABEL_3:\n  if ( byte_6143E8 )\n    dword_614440 /= 2;\n  if ( a1 )\n  {\n    if ( byte_61444F )\n    {\n      dword_614298 = a1;\n      v4 = a1;\n    }\n    else\n    {\n      v4 = dword_614298;\n    }\n  }\n  else\n  {\n    byte_61444F = 0;\n    v4 = dword_614298;\n  }\n  if ( byte_6142B4 )\n    byte_614444 = 1;\n  if ( v4 <= 1 )\n  {\n    byte_6142B4 = 0;\n    v6 = dword_6143DC;\n  }\n  else\n  {\n    if ( byte_6143E0 )\n    {\n      v6 = dword_6143DC;\n      if ( !byte_61443C && dword_6143DC == 1 && *(_BYTE *)off_614270 == 9 )\n        off_614270 = \" \";\n    }\n    else\n    {\n      v5 = \" \";\n      dword_6143DC = 1;\n      if ( byte_61443C )\n        v5 = \"\\t\";\n      byte_6143E0 = 1;\n      off_614270 = v5;\n      v6 = 1;\n    }\n    byte_61443D = 1;\n    byte_614434 = 1;\n  }\n  if ( byte_61443C )\n    byte_61443D = 0;\n  v7 = (unsigned __int8)byte_6143FC;\n  if ( !byte_6143FC )\n    goto LABEL_58;\n  dword_614284 = dword_61427C;\n  v8 = dword_614278 + 1;\n  if ( byte_614288 == 9 )\n    v8 = dword_614278\n       + ((unsigned int)(dword_614278 >> 31) >> 29)\n       - (((_BYTE)dword_614278 + ((unsigned int)(dword_614278 >> 31) >> 29)) & 7)\n       + 8;\n  dword_6143F8 = v8;\n  if ( !byte_61444F )\nLABEL_58:\n    v8 = 0;\n  v9 = v6 * (v4 - 1);\n  if ( !is_mul_ok(v6, v4 - 1) )\n    v9 = 0x7FFFFFFF;\n  v10 = dword_6142AC - v8 - v9;\n  if ( __OFSUB__(dword_6142AC - v8, v9) )\n  {\nLABEL_238:\n    dword_614438 = 0;\n    goto LABEL_239;\n  }\n  dword_614438 = v10 / v4;\n  if ( v10 / v4 <= 0 )\n  {\nLABEL_239:\n    v95 = dcgettext(0LL, \"page width too narrow\", 5);\n    v7 = 0LL;\n    v14 = 1LL;\n    error(1, 0, v95);\n    goto LABEL_240;\n  }\n  if ( byte_6143FC )\n  {\n    free(ptr);\n    v72 = dword_614278 + 1LL;\n    if ( (unsigned int)dword_614278 <= 0xB )\n      v72 = 12LL;\n    ptr = (void *)sub_409300(v72);\n  }\n  free(qword_614398);\n  v11 = 8;\n  if ( dword_6142A4 >= 8 )\n    v11 = dword_6142A4;\n  v12 = (void *)sub_409300(v11);\n  dword_6143E4 = 0;\n  qword_614398 = v12;\n  free(qword_614478);\n  v14 = (__int64)dword_614298 << 6;\n  if ( (dword_614298 & 0x200000000000000LL) != 0 || (unsigned __int64)dword_614298 >> 58 )\n    goto LABEL_240;\n  v15 = (void *)sub_409300(v14);\n  v16 = (__int64)v15;\n  qword_614478 = v15;\n  if ( byte_61444F )\n  {\n    if ( a1 )\n    {\n      v17 = (__int64)&a2[(unsigned int)(a1 - 1) + 1];\n      do\n      {\n        while ( (unsigned __int8)sub_403C80(*a2, v16) )\n        {\n          ++a2;\n          v16 += 64LL;\n          if ( a2 == (const char **)v17 )\n            goto LABEL_36;\n        }\n        ++a2;\n        --dword_614298;\n      }\n      while ( a2 != (const char **)v17 );\n    }\nLABEL_36:\n    result = (unsigned int)dword_614298;\n    if ( !dword_614298 )\n      return result;\n    v7 = 0xFFFFFFFFLL;\n    v19 = \"\\t\" + 1;\n    sub_402AB0(\"\", -1);\n  }\n  else\n  {\n    if ( a1 <= 0 )\n    {\n      v89 = dcgettext(0LL, \"standard input\", 5);\n      *(_BYTE *)(v16 + 57) = 0;\n      v19 = \"\\t\" + 1;\n      *(_QWORD *)(v16 + 8) = v89;\n      v90 = stdin;\n      *(_DWORD *)(v16 + 16) = 0;\n      *(_QWORD *)v16 = v90;\n      byte_614446 = 1;\n      ++dword_6143E4;\n      sub_402AB0(\"\", -1);\n      *(_DWORD *)(v16 + 44) = 0;\n    }\n    else\n    {\n      result = sub_403C80(*a2, (__int64)v15);\n      if ( !(_BYTE)result )\n        return result;\n      v93 = fileno(*(FILE **)v16);\n      v19 = *a2;\n      sub_402AB0(*a2, v93);\n      *(_DWORD *)(v16 + 44) = 0;\n    }\n    v7 = (unsigned int)dword_614298;\n    v91 = *(_QWORD *)(v16 + 8);\n    v20 = v16 + 64;\n    IO_write_ptr_high = *(_QWORD *)v16;\n    if ( dword_614298 != 1 )\n    {\n      v7 = ((unsigned int)(dword_614298 - 2) + 2LL) << 6;\n      v92 = v7 + v16;\n      do\n      {\n        *(_QWORD *)(v20 + 8) = v91;\n        v20 += 64LL;\n        *(_QWORD *)(v20 - 64) = IO_write_ptr_high;\n        *(_DWORD *)(v20 - 48) = 0;\n        *(_BYTE *)(v20 - 7) = 0;\n        *(_DWORD *)(v20 - 20) = 0;\n      }\n      while ( v20 != v92 );\n    }\n  }\n  dword_614410 = dword_6143E4;\n  if ( byte_6142B4 )\n  {\n    v86 = dword_614298 * dword_614440;\n    if ( is_mul_ok(dword_614298, dword_614440) )\n    {\n      v87 = v86 + 1;\n      if ( !__OFADD__(1, v86) && !__OFADD__(1, dword_614438) )\n      {\n        v88 = v86 * (dword_614438 + 1);\n        if ( is_mul_ok(v86, dword_614438 + 1) )\n        {\n          free(qword_614458);\n          v14 = 4LL * v87;\n          if ( (v87 & 0x2000000000000000LL) == 0 && !((unsigned __int64)v87 >> 62) )\n          {\n            qword_614458 = (void *)sub_409300(v14);\n            free(qword_614450);\n            v14 = 4LL * v86;\n            if ( (v86 & 0x2000000000000000LL) == 0 && !((unsigned __int64)v86 >> 62) )\n            {\n              qword_614450 = (void *)sub_409300(v14);\n              free(qword_614470);\n              v14 = (unsigned __int8)byte_6143E0 + 1LL;\n              v13 = (v14 * (unsigned __int128)(unsigned __int64)v88) >> 64 != 0;\n              if ( ((v14 * v88) & 0x8000000000000000LL) == 0LL && is_mul_ok(v14, v88) )\n              {\n                qword_614470 = (void *)sub_409300(v14 * v88);\n                qword_614460 = ((unsigned __int8)byte_6143E0 + 1LL) * v88;\n                goto LABEL_39;\n              }\n            }\n          }\nLABEL_240:\n          sub_409550(v14, v7, v13);\n        }\n      }\n    }\n    sub_4027F0(v19, v7, v20, IO_write_ptr_high);\n    goto LABEL_238;\n  }\nLABEL_39:\n  v22 = qword_614418;\n  if ( (unsigned __int64)qword_614418 <= 1 )\n  {\n    qword_614408 = 1LL;\n    goto LABEL_41;\n  }\n  v74 = 1LL;\n  while ( 1 )\n  {\n    v75 = qword_614478;\n    v76 = 1;\n    for ( i = dword_614298; v76 < dword_614440; ++v76 )\n    {\n      if ( i > 0 )\n      {\n        v78 = 1;\n        do\n        {\n          while ( v75[4] )\n          {\n            ++v78;\n            v75 += 16;\n            if ( v78 > i )\n              goto LABEL_193;\n          }\n          v79 = v78;\n          v80 = (__int64)v75;\n          ++v78;\n          v75 += 16;\n          sub_403490(v80, v79);\n          i = dword_614298;\n        }\n        while ( v78 <= dword_614298 );\nLABEL_193:\n        v75 = qword_614478;\n      }\n    }\n    byte_614390 = 1;\n    if ( i > 0 )\n    {\n      v81 = 1;\n      do\n      {\n        while ( v75[4] )\n        {\n          ++v81;\n          v75 += 16;\n          if ( v81 > i )\n            goto LABEL_200;\n        }\n        v82 = v81;\n        v83 = (__int64)v75;\n        ++v81;\n        v75 += 16;\n        sub_403490(v83, v82);\n        i = dword_614298;\n      }\n      while ( v81 <= dword_614298 );\nLABEL_200:\n      if ( byte_6142B4 )\n      {\n        v84 = (char *)qword_614478;\n        if ( i > 0 )\n        {\n          v85 = (char *)qword_614478 + 64 * (unsigned int)(i - 1) + 64;\n          do\n          {\n            if ( *((_DWORD *)v84 + 4) != 3 )\n              *((_DWORD *)v84 + 4) = 2;\n            v84 += 64;\n          }\n          while ( v84 != v85 );\n        }\n      }\n    }\n    sub_402710();\n    byte_614390 = 0;\n    if ( dword_614410 <= 0 )\n      break;\n    if ( v22 == ++v74 )\n      goto LABEL_208;\n  }\n  v94 = dcgettext(0LL, \"starting page number %lu exceeds page count %lu\", 5);\n  error(0, 0, v94, v22, v74);\n  result = (unsigned int)dword_614410;\n  if ( dword_614410 > 0 )\n  {\nLABEL_208:\n    qword_614408 = qword_614418;\nLABEL_41:\n    v23 = byte_61443D;\n    v24 = 0LL;\n    if ( byte_61443D )\n    {\n      v24 = (unsigned int)(dword_61442C + dword_614438);\n      if ( byte_61444F )\n      {\n        if ( byte_6143FC )\n          v24 = (unsigned int)(dword_6143F8 + v24);\n      }\n    }\n    v25 = dword_6143DC;\n    v26 = (_IO_FILE *)qword_614478;\n    v27 = dword_614298;\n    v28 = byte_6142B4;\n    v29 = (unsigned int)(dword_6143DC + dword_61442C);\n    v30 = (char *)qword_614478;\n    v31 = dword_614298;\n    v32 = byte_6142B4;\n    if ( dword_614298 <= 1 )\n    {\n      v31 = 1;\n      IO_read_end_low = (unsigned __int8)byte_6143FC;\n    }\n    else\n    {\n      IO_read_end_low = (unsigned __int8)byte_6143FC;\n      v34 = qword_614478;\n      v35 = 1;\n      v36 = dword_614438;\n      v37 = (unsigned __int8)byte_61444F ^ 1;\n      do\n      {\n        while ( 1 )\n        {\n          if ( v28 )\n          {\n            v34[4] = sub_402790;\n            v34[3] = sub_403280;\n          }\n          else\n          {\n            v34[4] = sub_4031E0;\n            v34[3] = sub_403840;\n          }\n          IO_write_ptr_high = 0LL;\n          if ( (_BYTE)IO_read_end_low )\n          {\n            LOBYTE(IO_write_ptr_high) = v35 == 1;\n            IO_write_ptr_high = v37 | (unsigned int)IO_write_ptr_high;\n          }\n          *((_BYTE *)v34 + 56) = IO_write_ptr_high;\n          *((_DWORD *)v34 + 13) = v29;\n          if ( !v23 )\n            break;\n          v29 = (unsigned int)(v25 + v24);\n          ++v35;\n          v34 += 8;\n          v24 = (unsigned int)(v29 + v36);\n          if ( v35 == v27 )\n            goto LABEL_65;\n        }\n        ++v35;\n        v24 = 0LL;\n        v29 = 0LL;\n        v34 += 8;\n      }\n      while ( v35 != v27 );\nLABEL_65:\n      v32 = v28;\n      v30 = (char *)(&v26->_flags + 16 * (unsigned int)(v27 - 2) + 16);\n    }\n    if ( v28 && byte_614444 )\n    {\n      *((_QWORD *)v30 + 4) = sub_402790;\n      *((_QWORD *)v30 + 3) = sub_403280;\n    }\n    else\n    {\n      *((_QWORD *)v30 + 4) = sub_4031E0;\n      *((_QWORD *)v30 + 3) = sub_403840;\n    }\n    if ( (_BYTE)IO_read_end_low )\n    {\n      LOBYTE(IO_write_ptr_high) = v31 == 1;\n      IO_read_end_low = (unsigned int)IO_write_ptr_high | (unsigned __int8)byte_61444F ^ 1;\n    }\n    v30[56] = IO_read_end_low;\n    v38 = v26;\n    *((_DWORD *)v30 + 13) = v29;\n    v39 = (unsigned int)dword_614284;\n    dword_614400 = dword_614284;\n    if ( v32 )\n      goto LABEL_129;\nLABEL_72:\n    if ( v27 )\n    {\n      IO_write_ptr_high = (unsigned int)dword_614440;\n      do\n      {\n        IO_read_end_low = LODWORD(v38->_IO_read_end);\n        v39 = 0LL;\n        if ( !(_DWORD)IO_read_end_low )\n          v39 = (unsigned int)IO_write_ptr_high;\n        v38 = (_IO_FILE *)((char *)v38 + 64);\n        *(_DWORD *)&v38[-1]._unused2[4] = v39;\n      }\n      while ( &v26->_flags + 16 * (unsigned int)(v27 - 1) + 16 != (int *)v38 );\n    }\n    while ( 1 )\n    {\n      result = sub_4026B0(IO_read_end_low, v29, v39, IO_write_ptr_high, v24);\n      if ( !(_DWORD)result )\n        return result;\n      if ( byte_6142B5 )\n        byte_614448 = 1;\n      v45 = dword_614440;\n      byte_6143D0 = 0;\n      if ( byte_6143E8 )\n        v45 = 2 * dword_614440;\n      v46 = 0;\n      if ( v45 > 0 )\n      {\n        while ( 2 )\n        {\n          if ( !(unsigned int)sub_4026B0(IO_read_end_low, v29, v40, v41, v42) )\n            goto LABEL_120;\n          v29 = (unsigned int)dword_614298;\n          dword_614428 = 0;\n          dword_614430 = 0;\n          v47 = (unsigned __int8 (__fastcall **)(unsigned int *))qword_614478;\n          dword_6143D8 = 0;\n          byte_6143D0 = 0;\n          byte_61444E = 0;\n          byte_61444D = 1;\n          if ( dword_614298 <= 0 )\n            goto LABEL_106;\n          v48 = 1;\nLABEL_97:\n          v41 = *((unsigned int *)v47 + 12);\n          dword_614424 = 0;\n          if ( (int)v41 > 0 || *((_DWORD *)v47 + 4) == 1 )\n          {\n            v49 = *((_DWORD *)v47 + 13);\n            byte_61444C = 0;\n            IO_read_end_low = (unsigned __int64)v47;\n            dword_6143D4 = v49;\n            if ( !v47[3]((unsigned int *)v47) )\n            {\n              IO_read_end_low = (unsigned __int64)v47;\n              sub_403D80((__int64)v47);\n            }\n            v50 = *((_DWORD *)v47 + 12) - 1;\n            v46 |= byte_6143D0;\n            *((_DWORD *)v47 + 12) = v50;\n            if ( v50 <= 0 && !(unsigned int)sub_4026B0(IO_read_end_low, v29, v40, v41, v42) )\n            {\n              if ( !v66 )\n                goto LABEL_149;\nLABEL_103:\n              IO_read_end_low = (unsigned __int64)stdout;\n              IO_write_ptr = stdout->_IO_write_ptr;\n              if ( IO_write_ptr >= stdout->_IO_write_end )\n              {\n                v29 = 10LL;\n                __overflow(stdout, 10);\n              }\n              else\n              {\n                v40 = IO_write_ptr + 1;\n                stdout->_IO_write_ptr = IO_write_ptr + 1;\n                *IO_write_ptr = 10;\n              }\n              --v45;\nLABEL_106:\n              if ( !(unsigned int)sub_4026B0(IO_read_end_low, v29, v40, v41, v42) )\n              {\nLABEL_149:\n                if ( byte_6142B5 )\n                  goto LABEL_107;\nLABEL_113:\n                if ( v45 )\n                  goto LABEL_120;\n                v43 = dword_614298;\n                v44 = (char *)qword_614478;\n                if ( dword_614298 <= 0 )\n                  goto LABEL_120;\n                goto LABEL_115;\n              }\nLABEL_107:\n              if ( byte_6143E8 && v46 )\n              {\n                IO_read_end_low = (unsigned __int64)stdout;\n                v53 = stdout->_IO_write_ptr;\n                if ( v53 >= stdout->_IO_write_end )\n                {\n                  v29 = 10LL;\n                  __overflow(stdout, 10);\n                }\n                else\n                {\n                  v40 = v53 + 1;\n                  stdout->_IO_write_ptr = v53 + 1;\n                  *v53 = 10;\n                }\n                --v45;\n              }\n              if ( v45 <= 0 )\n                goto LABEL_113;\n              continue;\n            }\n            if ( byte_61444F )\n            {\n              v51 = *((_DWORD *)v47 + 4);\n              if ( v51 )\n              {\n                if ( byte_61444D )\n                  goto LABEL_101;\n                if ( v51 == 3 || v51 == 2 && byte_61444C )\n                  goto LABEL_152;\n              }\n            }\n          }\n          else\n          {\n            if ( !byte_61444F )\n              break;\n            if ( byte_61444D )\n            {\nLABEL_101:\n              byte_61444E = 1;\n              break;\n            }\nLABEL_152:\n            IO_read_end_low = (unsigned __int64)v47;\n            sub_4037E0((__int64)v47);\n          }\n          break;\n        }\n        if ( byte_6143E0 )\n          ++dword_6143D8;\n        ++v48;\n        v47 += 8;\n        if ( v48 > dword_614298 )\n        {\n          if ( !byte_6143D0 )\n            goto LABEL_106;\n          goto LABEL_103;\n        }\n        goto LABEL_97;\n      }\n      if ( v45 || v43 <= 0 )\n        break;\nLABEL_115:\n      v54 = &v44[64 * (v43 - 1) + 64];\n      do\n      {\n        if ( !*((_DWORD *)v44 + 4) )\n          v44[57] = 1;\n        v44 += 64;\n      }\n      while ( v44 != v54 );\n      v45 = 0;\nLABEL_120:\n      byte_6143D0 = v46;\n      if ( !v46 || !byte_6142B5 )\n        break;\n      if ( byte_614447 )\n      {\n        IO_read_end_low = (unsigned __int64)stdout;\n        v73 = stdout->_IO_write_ptr;\n        if ( v73 >= stdout->_IO_write_end )\n        {\n          v29 = 12LL;\n          __overflow(stdout, 12);\n        }\n        else\n        {\n          stdout->_IO_write_ptr = v73 + 1;\n          *v73 = 12;\n        }\n      }\n      else\n      {\n        for ( j = v45 + 5; j; --j )\n        {\n          IO_read_end_low = (unsigned __int64)stdout;\n          v71 = stdout->_IO_write_ptr;\n          if ( v71 < stdout->_IO_write_end )\n          {\n            stdout->_IO_write_ptr = v71 + 1;\n            *v71 = 10;\n          }\n          else\n          {\n            v29 = 10LL;\n            __overflow(stdout, 10);\n          }\n        }\n      }\nLABEL_127:\n      result = ++qword_614408;\n      if ( qword_614408 > (unsigned __int64)qword_614290 )\n        return result;\n      sub_402710();\n      v26 = (_IO_FILE *)qword_614478;\n      v27 = dword_614298;\n      v38 = (_IO_FILE *)qword_614478;\n      if ( !byte_6142B4 )\n        goto LABEL_72;\nLABEL_129:\n      v24 = (unsigned __int8)byte_614444;\n      dword_614468 = 0;\n      v97 = v27 - (byte_614444 == 0);\n      if ( v97 <= 0 )\n      {\n        v58 = 0;\nLABEL_185:\n        v29 = 0LL;\n        v60 = 0;\n        goto LABEL_155;\n      }\n      v56 = (char *)v26;\n      v57 = (char *)(&v26->_flags + 16 * (v27 - (unsigned int)(byte_614444 == 0) - 1) + 16);\n      do\n      {\n        *((_DWORD *)v56 + 11) = 0;\n        v56 += 64;\n      }\n      while ( v56 != v57 );\n      v58 = dword_614410;\n      if ( !dword_614410 )\n        goto LABEL_185;\n      v96 = 1;\n      v59 = 0;\n      v60 = 0;\n      v61 = 0LL;\n      while ( 1 )\n      {\n        v62 = dword_614440;\n        LODWORD(v38->_IO_write_ptr) = v60;\n        if ( v62 )\n          break;\nLABEL_144:\n        ++v96;\n        v38 = (_IO_FILE *)((char *)v38 + 64);\n        IO_write_ptr_high = (unsigned int)v96;\n        v58 = v59;\n        v29 = 4 * v61;\n        if ( v97 < v96 || !dword_614410 )\n        {\n          v38 = (_IO_FILE *)qword_614478;\n          v27 = dword_614298;\n          v24 = (unsigned __int8)byte_614444;\n          v26 = (_IO_FILE *)qword_614478;\n          goto LABEL_155;\n        }\n      }\n      while ( dword_614410 )\n      {\n        if ( LODWORD(v38->_IO_read_end) )\n          goto LABEL_136;\n        IO_read_end_low = (unsigned __int64)v38;\n        dword_614424 = 0;\n        if ( !(unsigned __int8)sub_403840(v38) )\n        {\n          IO_read_end_low = (unsigned __int64)v38;\n          sub_403D80((__int64)v38);\n        }\n        v63 = dword_614468;\n        if ( LODWORD(v38->_IO_read_end) && dword_614468 == v59 )\n        {\nLABEL_136:\n          if ( !--v62 )\n            goto LABEL_144;\n        }\n        else\n        {\n          v64 = qword_614458;\n          ++HIDWORD(v38->_IO_write_ptr);\n          ++v60;\n          v65 = qword_614450;\n          v64[v61] = v59;\n          v59 = v63;\n          v65[v61] = dword_614424;\n          v61 = (unsigned int)v60;\n          if ( !--v62 )\n            goto LABEL_144;\n        }\n      }\n      v26 = (_IO_FILE *)qword_614478;\n      v27 = dword_614298;\n      v58 = v59;\n      v29 = 4 * v61;\n      v24 = (unsigned __int8)byte_614444;\n      v38 = (_IO_FILE *)qword_614478;\nLABEL_155:\n      v39 = (unsigned __int64)qword_614458;\n      *(_DWORD *)((char *)qword_614458 + v29) = v58;\n      if ( !(_BYTE)v24 )\n      {\n        if ( v27 == 1 )\n          goto LABEL_168;\n        goto LABEL_162;\n      }\n      if ( v27 > 0 )\n      {\n        LODWORD(IO_read_end_low) = 0;\n        v29 = (__int64)v26;\n        v39 = (unsigned int)(v60 >> 31);\n        LODWORD(IO_write_ptr_high) = 1;\n        LODWORD(v39) = v60 % v27;\n        do\n        {\n          v67 = v60 / v27;\n          *(_DWORD *)(v29 + 40) = IO_read_end_low;\n          if ( (int)v39 >= (int)IO_write_ptr_high )\n            v67 = v60 / v27 + 1;\n          IO_write_ptr_high = (unsigned int)(IO_write_ptr_high + 1);\n          v29 += 64LL;\n          *(_DWORD *)(v29 - 20) = v67;\n          IO_read_end_low = (unsigned int)(v67 + IO_read_end_low);\n        }\n        while ( (_DWORD)IO_write_ptr_high != v27 + 1 );\n      }\n      if ( v27 == 1 )\n      {\nLABEL_165:\n        LODWORD(v38->_IO_write_end) = HIDWORD(v38->_IO_write_ptr);\n      }\n      else\n      {\nLABEL_162:\n        v68 = v26;\n        v69 = (unsigned int)(v27 - 2);\n        v39 = (unsigned __int64)(&v26->_flags + 16 * v69 + 16);\n        do\n        {\n          IO_write_ptr_high = HIDWORD(v68->_IO_write_ptr);\n          v68 = (_IO_FILE *)((char *)v68 + 64);\n          *(_DWORD *)&v68[-1]._unused2[4] = IO_write_ptr_high;\n        }\n        while ( v68 != (_IO_FILE *)v39 );\n        v38 = (_IO_FILE *)(&v26->_flags + 16 * v69 + 16);\n        if ( (_BYTE)v24 )\n          goto LABEL_165;\nLABEL_168:\n        v24 = LODWORD(v38->_IO_read_end);\n        if ( (_DWORD)v24 )\n          LODWORD(v38->_IO_write_end) = 0;\n        else\n          LODWORD(v38->_IO_write_end) = dword_614440;\n      }\n    }\n    if ( byte_61444A && byte_614449 )\n    {\n      IO_read_end_low = (unsigned __int64)stdout;\n      v55 = stdout->_IO_write_ptr;\n      if ( v55 >= stdout->_IO_write_end )\n      {\n        v29 = 12LL;\n        __overflow(stdout, 12);\n      }\n      else\n      {\n        stdout->_IO_write_ptr = v55 + 1;\n        *v55 = 12;\n      }\n      byte_614449 = 0;\n    }\n    goto LABEL_127;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_404DE0",
            "funcStartAddr": "0x404de0",
            "funcEndAddr": "0x4052dd",
            "decompiledFuncCode": "void __fastcall __noreturn sub_404DE0(int status)\n{\n  __int64 v1; // rbp\n  char *v2; // rax\n  char *v3; // rax\n  __int64 v4; // rcx\n  __int64 v5; // r8\n  FILE *v6; // rbp\n  char *v7; // rax\n  FILE *v8; // rbp\n  char *v9; // rax\n  FILE *v10; // rbp\n  char *v11; // rax\n  FILE *v12; // rbp\n  char *v13; // rax\n  FILE *v14; // rbp\n  char *v15; // rax\n  FILE *v16; // rbp\n  char *v17; // rax\n  FILE *v18; // rbp\n  char *v19; // rax\n  FILE *v20; // rbp\n  char *v21; // rax\n  FILE *v22; // rbp\n  char *v23; // rax\n  FILE *v24; // rbp\n  char *v25; // rax\n  FILE *v26; // rbp\n  char *v27; // rax\n  FILE *v28; // rbp\n  char *v29; // rax\n  FILE *v30; // rbp\n  char *v31; // rax\n  FILE *v32; // rbp\n  char *v33; // rax\n  FILE *v34; // rbp\n  char *v35; // rax\n  FILE *v36; // rbp\n  char *v37; // rax\n  FILE *v38; // rbp\n  char *v39; // rax\n  FILE *v40; // rbp\n  char *v41; // rax\n  __int64 *v42; // rax\n  char *v43; // rbp\n  char *v44; // rax\n  __int64 v45; // r8\n  char *v46; // rax\n  __int64 v47; // r12\n  char *v48; // rax\n  __int64 v49; // r8\n  char *v50; // rax\n  __int64 v51; // r8\n  char *v52; // rax\n  __int64 v53; // r8\n  char *v54; // rax\n  char *v55; // rax\n  __int64 v56; // r8\n  char *v57; // rax\n  __int64 v58; // rcx\n  __int64 v59; // r8\n  __int64 v60[17]; // [rsp+0h] [rbp-88h] BYREF\n\n  v1 = qword_614490;\n  if ( status )\n  {\n    v2 = dcgettext(0LL, \"Try '%s --help' for more information.\\n\", 5);\n    __fprintf_chk(stderr, 1LL, v2, v1);\n    goto LABEL_3;\n  }\n  v3 = dcgettext(0LL, \"Usage: %s [OPTION]... [FILE]...\\n\", 5);\n  __printf_chk(1LL, v3, v1, v4, v5);\n  v6 = stdout;\n  v7 = dcgettext(0LL, \"Paginate or columnate FILE(s) for printing.\\n\", 5);\n  fputs_unlocked(v7, v6);\n  v8 = stdout;\n  v9 = dcgettext(0LL, \"\\nWith no FILE, or when FILE is -, read standard input.\\n\", 5);\n  fputs_unlocked(v9, v8);\n  v10 = stdout;\n  v11 = dcgettext(0LL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5);\n  fputs_unlocked(v11, v10);\n  v12 = stdout;\n  v13 = dcgettext(\n          0LL,\n          \"  +FIRST_PAGE[:LAST_PAGE], --pages=FIRST_PAGE[:LAST_PAGE]\\n\"\n          \"                    begin [stop] printing with page FIRST_[LAST_]PAGE\\n\"\n          \"  -COLUMN, --columns=COLUMN\\n\"\n          \"                    output COLUMN columns and print columns down,\\n\"\n          \"                    unless -a is used. Balance number of lines in the\\n\"\n          \"                    columns on each page\\n\",\n          5);\n  fputs_unlocked(v13, v12);\n  v14 = stdout;\n  v15 = dcgettext(\n          0LL,\n          \"  -a, --across      print columns across rather than down, used together\\n\"\n          \"                    with -COLUMN\\n\"\n          \"  -c, --show-control-chars\\n\"\n          \"                    use hat notation (^G) and octal backslash notation\\n\"\n          \"  -d, --double-space\\n\"\n          \"                    double space the output\\n\",\n          5);\n  fputs_unlocked(v15, v14);\n  v16 = stdout;\n  v17 = dcgettext(\n          0LL,\n          \"  -D, --date-format=FORMAT\\n\"\n          \"                    use FORMAT for the header date\\n\"\n          \"  -e[CHAR[WIDTH]], --expand-tabs[=CHAR[WIDTH]]\\n\"\n          \"                    expand input CHARs (TABs) to tab WIDTH (8)\\n\"\n          \"  -F, -f, --form-feed\\n\"\n          \"                    use form feeds instead of newlines to separate pages\\n\"\n          \"                    (by a 3-line page header with -F or a 5-line header\\n\"\n          \"                    and trailer without -F)\\n\",\n          5);\n  fputs_unlocked(v17, v16);\n  v18 = stdout;\n  v19 = dcgettext(\n          0LL,\n          \"  -h, --header=HEADER\\n\"\n          \"                    use a centered HEADER instead of filename in page header,\\n\"\n          \"                    -h \\\"\\\" prints a blank line, don't use -h\\\"\\\"\\n\"\n          \"  -i[CHAR[WIDTH]], --output-tabs[=CHAR[WIDTH]]\\n\"\n          \"                    replace spaces with CHARs (TABs) to tab WIDTH (8)\\n\"\n          \"  -J, --join-lines  merge full lines, turns off -W line truncation, no column\\n\"\n          \"                    alignment, --sep-string[=STRING] sets separators\\n\",\n          5);\n  fputs_unlocked(v19, v18);\n  v20 = stdout;\n  v21 = dcgettext(\n          0LL,\n          \"  -l, --length=PAGE_LENGTH\\n\"\n          \"                    set the page length to PAGE_LENGTH (66) lines\\n\"\n          \"                    (default number of lines of text 56, and with -F 63).\\n\"\n          \"                    implies -t if PAGE_LENGTH <= 10\\n\",\n          5);\n  fputs_unlocked(v21, v20);\n  v22 = stdout;\n  v23 = dcgettext(\n          0LL,\n          \"  -m, --merge       print all files in parallel, one in each column,\\n\"\n          \"                    truncate lines, but join lines of full length with -J\\n\",\n          5);\n  fputs_unlocked(v23, v22);\n  v24 = stdout;\n  v25 = dcgettext(\n          0LL,\n          \"  -n[SEP[DIGITS]], --number-lines[=SEP[DIGITS]]\\n\"\n          \"                    number lines, use DIGITS (5) digits, then SEP (TAB),\\n\"\n          \"                    default counting starts with 1st line of input file\\n\"\n          \"  -N, --first-line-number=NUMBER\\n\"\n          \"                    start counting with NUMBER at 1st line of first\\n\"\n          \"                    page printed (see +FIRST_PAGE)\\n\",\n          5);\n  fputs_unlocked(v25, v24);\n  v26 = stdout;\n  v27 = dcgettext(\n          0LL,\n          \"  -o, --indent=MARGIN\\n\"\n          \"                    offset each line with MARGIN (zero) spaces, do not\\n\"\n          \"                    affect -w or -W, MARGIN will be added to PAGE_WIDTH\\n\"\n          \"  -r, --no-file-warnings\\n\"\n          \"                    omit warning when a file cannot be opened\\n\",\n          5);\n  fputs_unlocked(v27, v26);\n  v28 = stdout;\n  v29 = dcgettext(\n          0LL,\n          \"  -s[CHAR], --separator[=CHAR]\\n\"\n          \"                    separate columns by a single character, default for CHAR\\n\"\n          \"                    is the <TAB> character without -w and 'no char' with -w.\\n\"\n          \"                    -s[CHAR] turns off line truncation of all 3 column\\n\"\n          \"                    options (-COLUMN|-a -COLUMN|-m) except -w is set\\n\",\n          5);\n  fputs_unlocked(v29, v28);\n  v30 = stdout;\n  v31 = dcgettext(\n          0LL,\n          \"  -S[STRING], --sep-string[=STRING]\\n\"\n          \"                    separate columns by STRING,\\n\"\n          \"                    without -S: Default separator <TAB> with -J and <space>\\n\"\n          \"                    otherwise (same as -S\\\" \\\"), no effect on column options\\n\",\n          5);\n  fputs_unlocked(v31, v30);\n  v32 = stdout;\n  v33 = dcgettext(\n          0LL,\n          \"  -t, --omit-header  omit page headers and trailers;\\n                     implied if PAGE_LENGTH <= 10\\n\",\n          5);\n  fputs_unlocked(v33, v32);\n  v34 = stdout;\n  v35 = dcgettext(\n          0LL,\n          \"  -T, --omit-pagination\\n\"\n          \"                    omit page headers and trailers, eliminate any pagination\\n\"\n          \"                    by form feeds set in input files\\n\"\n          \"  -v, --show-nonprinting\\n\"\n          \"                    use octal backslash notation\\n\"\n          \"  -w, --width=PAGE_WIDTH\\n\"\n          \"                    set page width to PAGE_WIDTH (72) characters for\\n\"\n          \"                    multiple text-column output only, -s[char] turns off (72)\\n\",\n          5);\n  fputs_unlocked(v35, v34);\n  v36 = stdout;\n  v37 = dcgettext(\n          0LL,\n          \"  -W, --page-width=PAGE_WIDTH\\n\"\n          \"                    set page width to PAGE_WIDTH (72) characters always,\\n\"\n          \"                    truncate lines, except -J option is set, no interference\\n\"\n          \"                    with -S or -s\\n\",\n          5);\n  fputs_unlocked(v37, v36);\n  v38 = stdout;\n  v39 = dcgettext(0LL, \"      --help     display this help and exit\\n\", 5);\n  fputs_unlocked(v39, v38);\n  v40 = stdout;\n  v41 = dcgettext(0LL, \"      --version  output version information and exit\\n\", 5);\n  fputs_unlocked(v41, v40);\n  v60[0] = (__int64)\"[\";\n  v42 = v60;\n  v60[1] = (__int64)\"test invocation\";\n  v60[2] = (__int64)\"coreutils\";\n  v60[3] = (__int64)\"Multi-call invocation\";\n  v60[4] = (__int64)\"sha224sum\";\n  v60[5] = (__int64)\"sha2 utilities\";\n  v60[6] = (__int64)\"sha256sum\";\n  v60[7] = (__int64)\"sha2 utilities\";\n  v60[8] = (__int64)\"sha384sum\";\n  v60[9] = (__int64)\"sha2 utilities\";\n  v60[10] = (__int64)\"sha512sum\";\n  v60[11] = (__int64)\"sha2 utilities\";\n  v60[12] = 0LL;\n  v60[13] = 0LL;\n  do\n    v42 += 2;\n  while ( *v42 && strcmp(\"pr\", (const char *)*v42) );\n  v43 = (char *)v42[1];\n  if ( v43 )\n  {\n    v44 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v44, &unk_40CEF3, \"https://www.gnu.org/software/coreutils/\", v45);\n    v46 = setlocale(5, 0LL);\n    if ( !v46 || !strncmp(v46, \"en_\", 3uLL) )\n      goto LABEL_10;\n  }\n  else\n  {\n    v52 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v52, &unk_40CEF3, \"https://www.gnu.org/software/coreutils/\", v53);\n    v54 = setlocale(5, 0LL);\n    if ( !v54 || !strncmp(v54, \"en_\", 3uLL) )\n    {\n      v43 = \"pr\";\n      v55 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n      v47 = 4247193LL;\n      __printf_chk(1LL, v55, \"https://www.gnu.org/software/coreutils/\", \"pr\", v56);\nLABEL_12:\n      v50 = dcgettext(0LL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5);\n      __printf_chk(1LL, v50, v43, v47, v51);\nLABEL_3:\n      exit(status);\n    }\n    v43 = \"pr\";\n  }\n  v57 = dcgettext(0LL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5);\n  __printf_chk(1LL, v57, \"pr\", v58, v59);\nLABEL_10:\n  v47 = 4247193LL;\n  v48 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n  __printf_chk(1LL, v48, \"https://www.gnu.org/software/coreutils/\", \"pr\", v49);\n  if ( v43 != \"pr\" )\n    v47 = 4247139LL;\n  goto LABEL_12;\n}\n"
        },
        {
            "funcName": "sub_4052E0",
            "funcStartAddr": "0x4052e0",
            "funcEndAddr": "0x4053aa",
            "decompiledFuncCode": "__int64 __fastcall sub_4052E0(char *nptr, char a2, _BYTE *a3, _DWORD *a4)\n{\n  char *v5; // rbx\n  __int64 result; // rax\n  unsigned int v7; // r12d\n  __int64 v8; // rbp\n  int v9; // esi\n  char *v10; // rbx\n  __int64 v11; // [rsp+8h] [rbp-20h]\n\n  v5 = nptr;\n  result = (unsigned int)*nptr;\n  if ( (unsigned int)(result - 48) > 9 )\n  {\n    *a3 = *nptr;\n    result = (unsigned __int8)nptr[1];\n    v5 = nptr + 1;\n  }\n  if ( (_BYTE)result )\n  {\n    if ( (unsigned int)sub_409E00(v5) || (result = v11, (unsigned __int64)(v11 - 1) > 0x7FFFFFFE) )\n    {\n      v7 = a2;\n      v8 = sub_408D30(v5);\n      v9 = 75;\n      v10 = dcgettext(0LL, \"'-%c' extra characters or invalid number in the argument: %s\", 5);\n      if ( v11 <= 0x7FFFFFFF )\n        v9 = *__errno_location();\n      error(0, v9, v10, v7, v8);\n      sub_404DE0(1);\n    }\n    *a4 = v11;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4053B0",
            "funcStartAddr": "0x4053b0",
            "funcEndAddr": "0x4053b8",
            "decompiledFuncCode": "void __fastcall sub_4053B0(__int64 a1)\n{\n  qword_614488 = a1;\n}\n"
        },
        {
            "funcName": "sub_4053D0",
            "funcStartAddr": "0x4053d0",
            "funcEndAddr": "0x40546e",
            "decompiledFuncCode": "__int64 sub_4053D0()\n{\n  int *v0; // rax\n  int *v1; // rbx\n  __int64 result; // rax\n  char *v3; // rax\n  const char *v4; // rbp\n  const char *v5; // rax\n\n  if ( (unsigned int)sub_40C070(stdout) )\n  {\n    v0 = __errno_location();\n    v1 = v0;\n    if ( !byte_614480 || *v0 != 32 )\n    {\n      v3 = dcgettext(0LL, \"write error\", 5);\n      v4 = v3;\n      if ( qword_614488 )\n      {\n        v5 = (const char *)sub_408B80();\n        error(0, *v1, \"%s: %s\", v5, v4);\n      }\n      else\n      {\n        error(0, *v1, \"%s\", v3);\n      }\nLABEL_8:\n      _exit(status);\n    }\n  }\n  result = sub_40C070(stderr);\n  if ( (_DWORD)result )\n    goto LABEL_8;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_405480",
            "funcStartAddr": "0x405480",
            "funcEndAddr": "0x4054a1",
            "decompiledFuncCode": "void __fastcall sub_405480(FILE *a1, int a2)\n{\n  int v2; // eax\n\n  if ( a1 )\n  {\n    v2 = fileno(a1);\n    posix_fadvise(v2, 0LL, 0LL, a2);\n  }\n}\n"
        },
        {
            "funcName": "sub_4054B0",
            "funcStartAddr": "0x4054b0",
            "funcEndAddr": "0x405543",
            "decompiledFuncCode": "FILE *__fastcall sub_4054B0(const char *a1, const char *a2)\n{\n  FILE *v2; // rax\n  FILE *v3; // rbx\n  unsigned int v4; // eax\n  int v6; // r12d\n  int *v7; // rax\n  int v8; // ebp\n  int *v9; // rbx\n  int *v10; // rax\n  FILE *v11; // rdi\n  int v12; // r12d\n  int *v13; // rbp\n\n  v2 = fopen(a1, a2);\n  v3 = v2;\n  if ( v2 )\n  {\n    v4 = fileno(v2);\n    if ( v4 <= 2 )\n    {\n      v6 = sub_408D50(v4);\n      if ( v6 < 0 )\n      {\n        v10 = __errno_location();\n        v11 = v3;\n        v3 = 0LL;\n        v12 = *v10;\n        v13 = v10;\n        sub_40AA20(v11);\n        *v13 = v12;\n      }\n      else if ( (unsigned int)sub_40AA20(v3) || (v3 = fdopen(v6, a2)) == 0LL )\n      {\n        v7 = __errno_location();\n        v8 = *v7;\n        v9 = v7;\n        close(v6);\n        *v9 = v8;\n        return 0LL;\n      }\n    }\n  }\n  return v3;\n}\n"
        },
        {
            "funcName": "sub_405550",
            "funcStartAddr": "0x405550",
            "funcEndAddr": "0x40558a",
            "decompiledFuncCode": "int __fastcall sub_405550(struct timespec *tp)\n{\n  int result; // eax\n  struct timeval v2; // [rsp+0h] [rbp-18h] BYREF\n\n  result = clock_gettime(0, tp);\n  if ( result )\n  {\n    gettimeofday(&v2, 0LL);\n    tp->tv_sec = v2.tv_sec;\n    result = 1000 * LODWORD(v2.tv_usec);\n    tp->tv_nsec = 1000 * v2.tv_usec;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_405590",
            "funcStartAddr": "0x405590",
            "funcEndAddr": "0x4055ee",
            "decompiledFuncCode": "bool __fastcall sub_405590(int a1)\n{\n  char *v1; // rdx\n  bool result; // al\n\n  v1 = setlocale(a1, 0LL);\n  result = 1;\n  if ( v1 )\n  {\n    result = 0;\n    if ( strcmp(v1, \"C\") )\n      return strcmp(v1, \"POSIX\") != 0;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4055F0",
            "funcStartAddr": "0x4055f0",
            "funcEndAddr": "0x40568c",
            "decompiledFuncCode": "__int64 __fastcall sub_4055F0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rcx\n  int v4; // eax\n\n  v2 = a2 + 20;\n  *(_BYTE *)(a2 + 20) = 0;\n  if ( a1 < 0 )\n  {\n    while ( 1 )\n    {\n      v4 = 10 * (a1 / 10) + 48 - a1;\n      a1 /= 10LL;\n      *(_BYTE *)(v2 - 1) = v4;\n      if ( !a1 )\n        break;\n      --v2;\n    }\n    *(_BYTE *)(v2 - 2) = 45;\n    return v2 - 2;\n  }\n  else\n  {\n    do\n    {\n      *(_BYTE *)--v2 = a1 % 0xAuLL + 48;\n      a1 /= 0xAuLL;\n    }\n    while ( a1 );\n    return v2;\n  }\n}\n"
        },
        {
            "funcName": "sub_405690",
            "funcStartAddr": "0x405690",
            "funcEndAddr": "0x405843",
            "decompiledFuncCode": "__int64 __fastcall sub_405690(char *s, __int64 a2, char a3)\n{\n  char *v4; // r13\n  char *v5; // rbx\n  unsigned int v6; // r12d\n  char v7; // al\n  __int64 v8; // rax\n  __int64 v9; // rbp\n  int v10; // eax\n  int v12; // r15d\n  const unsigned __int16 *v13; // rdx\n  unsigned __int16 v14; // ax\n  wchar_t c; // [rsp+4h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+8h] [rbp-40h] BYREF\n\n  v4 = &s[a2];\n  v5 = s;\n  if ( __ctype_get_mb_cur_max() <= 1 )\n  {\n    v6 = 0;\n    if ( s >= v4 )\n      return v6;\n    v6 = 0;\n    v12 = a3 & 2;\n    v13 = *__ctype_b_loc();\n    while ( 1 )\n    {\n      v14 = v13[(unsigned __int8)*v5++];\n      if ( (v14 & 0x4000) != 0 )\n        goto LABEL_33;\n      if ( v12 )\n        return (unsigned int)-1;\n      if ( (v14 & 2) == 0 )\n      {\nLABEL_33:\n        if ( v6 == 0x7FFFFFFF )\n          return v6;\n        ++v6;\n      }\n      if ( v4 == v5 )\n        return v6;\n    }\n  }\n  v6 = 0;\n  if ( s < v4 )\n  {\n    do\n    {\n      v7 = *v5;\n      if ( *v5 <= 63 )\n      {\n        if ( v7 < 37 && (unsigned __int8)(v7 - 32) > 3u )\n        {\nLABEL_12:\n          ps = 0LL;\n          while ( 1 )\n          {\n            v8 = sub_40BA50(&c, v5);\n            v9 = v8;\n            if ( v8 == -1 )\n            {\n              if ( (a3 & 1) == 0 )\n                goto LABEL_6;\n              return (unsigned int)-1;\n            }\n            if ( v8 == -2 )\n              break;\n            if ( !v8 )\n              v9 = 1LL;\n            v10 = wcwidth(c);\n            if ( v10 >= 0 )\n            {\n              if ( (int)(0x7FFFFFFF - v6) < v10 )\n                return 0x7FFFFFFF;\n              v6 += v10;\n            }\n            else\n            {\n              if ( (a3 & 2) != 0 )\n                return (unsigned int)-1;\n              if ( !iswcntrl(c) )\n              {\n                if ( v6 == 0x7FFFFFFF )\n                  return 0x7FFFFFFF;\n                ++v6;\n              }\n            }\n            v5 += v9;\n            if ( mbsinit(&ps) )\n              goto LABEL_7;\n          }\n          if ( (a3 & 1) != 0 )\n            return (unsigned int)-1;\n          ++v6;\n          v5 = &s[a2];\n          continue;\n        }\n      }\n      else if ( v7 < 65 || v7 > 95 && (unsigned __int8)(v7 - 97) > 0x1Du )\n      {\n        goto LABEL_12;\n      }\nLABEL_6:\n      ++v5;\n      ++v6;\nLABEL_7:\n      ;\n    }\n    while ( v5 < v4 );\n  }\n  return v6;\n}\n"
        },
        {
            "funcName": "sub_405850",
            "funcStartAddr": "0x405850",
            "funcEndAddr": "0x405873",
            "decompiledFuncCode": "__int64 __fastcall sub_405850(char *s, char a2)\n{\n  __int64 v2; // rax\n\n  v2 = strlen(s);\n  return sub_405690(s, v2, a2);\n}\n"
        },
        {
            "funcName": "sub_405880",
            "funcStartAddr": "0x405880",
            "funcEndAddr": "0x4058c1",
            "decompiledFuncCode": "__int64 __fastcall sub_405880(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // rbx\n  const __int32_t **v4; // rax\n\n  if ( a3 )\n  {\n    v3 = a3 - 1;\n    v4 = __ctype_tolower_loc();\n    do\n    {\n      *(_BYTE *)(a1 + v3) = (*v4)[*(unsigned __int8 *)(a2 + v3)];\n      --v3;\n    }\n    while ( v3 != -1 );\n  }\n  return a1;\n}\n"
        },
        {
            "funcName": "sub_4058D0",
            "funcStartAddr": "0x4058d0",
            "funcEndAddr": "0x405911",
            "decompiledFuncCode": "__int64 __fastcall sub_4058D0(__int64 a1, __int64 a2, __int64 a3)\n{\n  __int64 v3; // rbx\n  const __int32_t **v4; // rax\n\n  if ( a3 )\n  {\n    v3 = a3 - 1;\n    v4 = __ctype_toupper_loc();\n    do\n    {\n      *(_BYTE *)(a1 + v3) = (*v4)[*(unsigned __int8 *)(a2 + v3)];\n      --v3;\n    }\n    while ( v3 != -1 );\n  }\n  return a1;\n}\n"
        },
        {
            "funcName": "sub_405920",
            "funcStartAddr": "0x405920",
            "funcEndAddr": "0x4070e5",
            "decompiledFuncCode": "__int64 __fastcall sub_405920(\n        char *s,\n        __int64 a2,\n        unsigned __int64 a3,\n        const __m128i *a4,\n        char a5,\n        __int64 a6,\n        __int64 a7,\n        int a8)\n{\n  char *v9; // rbx\n  __int64 v10; // r12\n  int v11; // r11d\n  char v12; // al\n  __int64 v13; // r14\n  char *v14; // r8\n  char v16; // r11\n  __int64 v17; // r8\n  int i; // r12d\n  unsigned int v19; // eax\n  __int64 v20; // rcx\n  __int64 v21; // r9\n  bool v22; // cc\n  int v23; // ebp\n  unsigned int v24; // eax\n  int v25; // edi\n  char *v26; // rax\n  char *v27; // r8\n  char v28; // r13\n  size_t v29; // rax\n  unsigned __int64 v30; // rcx\n  int v31; // eax\n  unsigned __int64 v32; // rbx\n  size_t v33; // rdx\n  char *v34; // rdi\n  char *v35; // rsi\n  size_t v36; // rdx\n  char *v37; // rdi\n  unsigned __int64 v38; // rcx\n  char *v39; // r13\n  __m128i v40; // xmm4\n  __m128i v41; // xmm2\n  __int64 v42; // rax\n  __int64 v43; // rax\n  __int64 v44; // rsi\n  __int64 v45; // rcx\n  int v46; // edx\n  unsigned int v47; // eax\n  int v48; // r10d\n  char *v49; // rcx\n  unsigned __int64 v50; // rax\n  size_t v51; // r9\n  unsigned __int64 v52; // r9\n  size_t v53; // rdx\n  char *v54; // rdi\n  unsigned __int64 v55; // r10\n  int v56; // eax\n  unsigned __int64 v57; // rsi\n  size_t v58; // rdx\n  char *v59; // rdi\n  __int32 v60; // r10d\n  __int32 v61; // r13d\n  int v62; // edi\n  int v63; // r8d\n  int v64; // eax\n  int v65; // r13d\n  int v66; // r13d\n  int v67; // edi\n  unsigned int v68; // esi\n  int v69; // edi\n  unsigned int v70; // r8d\n  unsigned __int64 v71; // r13\n  int v72; // eax\n  unsigned __int64 v73; // rsi\n  char v74; // r11\n  char v75; // r8\n  size_t v76; // rdx\n  char *v77; // rdi\n  int v78; // esi\n  unsigned __int64 v79; // r13\n  size_t v80; // rdx\n  char *v81; // rdi\n  char *v82; // rcx\n  char *v83; // rax\n  unsigned __int64 v84; // rsi\n  size_t v85; // rdx\n  char *v86; // rdi\n  size_t v87; // rdx\n  char *v88; // rdi\n  int v89; // esi\n  int v90; // edi\n  int v91; // edx\n  char *v92; // rax\n  char *v93; // r9\n  size_t v94; // rcx\n  size_t v95; // rax\n  size_t v96; // rdx\n  char *v97; // rdi\n  size_t v98; // rcx\n  __int64 j; // r13\n  __int64 v100; // rsi\n  int v101; // eax\n  int v102; // esi\n  char v103; // cl\n  int v104; // esi\n  size_t v105; // rdx\n  char *v106; // rdi\n  char v107; // al\n  char v108; // cl\n  unsigned __int64 v109; // r12\n  unsigned __int64 v110; // r8\n  size_t v111; // rdx\n  __int64 v112; // r12\n  char *v113; // rdi\n  int v114; // eax\n  unsigned __int64 v115; // rcx\n  char *v116; // rdi\n  int v117; // esi\n  int v118; // edx\n  __int32 v119; // r10d\n  __int32 v120; // esi\n  int k; // edi\n  __int32 v122; // esi\n  bool v123; // sf\n  bool v124; // of\n  int v125; // eax\n  int v126; // eax\n  int v127; // esi\n  int v128; // esi\n  char *v131; // [rsp+20h] [rbp-4A8h]\n  int v133; // [rsp+2Ch] [rbp-49Ch]\n  char *v134; // [rsp+30h] [rbp-498h]\n  char v135; // [rsp+30h] [rbp-498h]\n  unsigned __int64 v136; // [rsp+30h] [rbp-498h]\n  char v137; // [rsp+30h] [rbp-498h]\n  int v138; // [rsp+30h] [rbp-498h]\n  char v139; // [rsp+30h] [rbp-498h]\n  char v140; // [rsp+30h] [rbp-498h]\n  size_t v141; // [rsp+30h] [rbp-498h]\n  char v142; // [rsp+30h] [rbp-498h]\n  size_t v143; // [rsp+30h] [rbp-498h]\n  int v144; // [rsp+30h] [rbp-498h]\n  char v145; // [rsp+40h] [rbp-488h]\n  char *v146; // [rsp+40h] [rbp-488h]\n  char *v147; // [rsp+40h] [rbp-488h]\n  char v148; // [rsp+40h] [rbp-488h]\n  char *v149; // [rsp+40h] [rbp-488h]\n  char v150; // [rsp+40h] [rbp-488h]\n  char v151; // [rsp+40h] [rbp-488h]\n  char v152; // [rsp+40h] [rbp-488h]\n  char *v153; // [rsp+40h] [rbp-488h]\n  char *v154; // [rsp+40h] [rbp-488h]\n  char v155; // [rsp+40h] [rbp-488h]\n  char *v156; // [rsp+40h] [rbp-488h]\n  char v157; // [rsp+40h] [rbp-488h]\n  int v158; // [rsp+48h] [rbp-480h]\n  unsigned __int64 v159; // [rsp+48h] [rbp-480h]\n  char *v160; // [rsp+48h] [rbp-480h]\n  unsigned __int64 v161; // [rsp+48h] [rbp-480h]\n  char v162; // [rsp+48h] [rbp-480h]\n  char *v163; // [rsp+48h] [rbp-480h]\n  char *v164; // [rsp+48h] [rbp-480h]\n  char v165; // [rsp+48h] [rbp-480h]\n  int v166; // [rsp+48h] [rbp-480h]\n  char v167; // [rsp+48h] [rbp-480h]\n  unsigned __int64 v168; // [rsp+50h] [rbp-478h]\n  int v169; // [rsp+50h] [rbp-478h]\n  size_t v170; // [rsp+50h] [rbp-478h]\n  unsigned __int64 v171; // [rsp+50h] [rbp-478h]\n  int v172; // [rsp+50h] [rbp-478h]\n  size_t v173; // [rsp+58h] [rbp-470h]\n  char *v174; // [rsp+58h] [rbp-470h]\n  char v175; // [rsp+58h] [rbp-470h]\n  unsigned __int64 v176; // [rsp+58h] [rbp-470h]\n  unsigned __int64 v177; // [rsp+58h] [rbp-470h]\n  unsigned __int64 v178; // [rsp+60h] [rbp-468h]\n  char format[2]; // [rsp+70h] [rbp-458h] BYREF\n  char v180; // [rsp+72h] [rbp-456h] BYREF\n  char v181; // [rsp+73h] [rbp-455h] BYREF\n  char v182[9]; // [rsp+87h] [rbp-441h] BYREF\n  char sa[16]; // [rsp+90h] [rbp-438h] BYREF\n  __m128i v184; // [rsp+A0h] [rbp-428h]\n  __m128i v185; // [rsp+B0h] [rbp-418h]\n  __int64 v186; // [rsp+C0h] [rbp-408h]\n\n  v9 = (char *)a3;\n  v10 = a4[3].m128i_i64[0];\n  v11 = a4->m128i_i32[2];\n  if ( !v10 )\n    v10 = 4247139LL;\n  if ( v11 <= 12 )\n  {\n    if ( !v11 )\n      v11 = 12;\n  }\n  else\n  {\n    v11 -= 12;\n  }\n  v12 = *(_BYTE *)a3;\n  v13 = 0LL;\n  if ( !*(_BYTE *)a3 )\n  {\nLABEL_13:\n    if ( s && a2 )\n      *s = 0;\n    return v13;\n  }\n  v133 = v11;\n  v131 = (char *)v10;\n  while ( v12 != 37 )\n  {\n    a3 = a2 - v13;\n    if ( (unsigned __int64)(a2 - v13) <= 1 )\n      return 0LL;\n    if ( s )\n      *s++ = v12;\n    ++v13;\n    v14 = v9;\nLABEL_12:\n    v12 = v14[1];\n    v9 = v14 + 1;\n    if ( !v12 )\n      goto LABEL_13;\n  }\n  v16 = a5;\n  v17 = 0LL;\nLABEL_22:\n  for ( i = 0; ; i = v19 )\n  {\n    v19 = *++v9;\n    v20 = v19;\n    v21 = v19;\n    v22 = *v9 <= 48;\n    if ( *v9 != 48 )\n      break;\nLABEL_26:\n    ;\n  }\n  while ( 1 )\n  {\n    if ( !v22 )\n    {\n      if ( (_BYTE)v19 == 94 )\n      {\n        v16 = 1;\n        goto LABEL_22;\n      }\n      if ( (_BYTE)v19 != 95 )\n      {\n        v23 = -1;\n        if ( v19 - 48 > 9 )\n          goto LABEL_29;\n        goto LABEL_37;\n      }\n      goto LABEL_26;\n    }\n    if ( (_BYTE)v19 != 35 )\n      break;\n    v19 = *++v9;\n    v17 = 1LL;\n    v20 = v19;\n    v21 = v19;\n    v22 = *v9 <= 48;\n    if ( *v9 == 48 )\n      goto LABEL_26;\n  }\n  if ( (_BYTE)v19 == 45 )\n    goto LABEL_26;\n  v23 = -1;\n  if ( v19 - 48 > 9 )\n    goto LABEL_29;\nLABEL_37:\n  v23 = 0;\n  while ( 1 )\n  {\n    v24 = v9[1];\n    v20 = v24;\n    a3 = v24 - 48;\n    if ( v23 > 214748364 )\n      break;\n    v25 = *v9;\n    if ( v23 == 214748364 && (char)v25 > 55 )\n      break;\n    ++v9;\n    v23 = v25 + 10 * v23 - 48;\nLABEL_41:\n    if ( (unsigned int)a3 > 9 )\n    {\n      v21 = v24;\n      goto LABEL_29;\n    }\n  }\n  if ( (unsigned int)a3 <= 9 )\n  {\n    v24 = v9[2];\n    v23 = 0x7FFFFFFF;\n    v9 += 2;\n    v20 = v24;\n    a3 = v24 - 48;\n    goto LABEL_41;\n  }\n  v21 = v24;\n  ++v9;\n  v23 = 0x7FFFFFFF;\nLABEL_29:\n  if ( (_BYTE)v20 == 69 || (_BYTE)v20 == 79 )\n    v20 = (unsigned __int8)*++v9;\n  else\n    v21 = 0LL;\n  switch ( (char)v20 )\n  {\n    case 0:\n      v93 = v9 - 1;\n      v103 = *(v9 - 1);\n      goto LABEL_261;\n    case 37:\n      LODWORD(v95) = 0;\n      v79 = 1LL;\n      a3 = a2 - v13;\n      if ( v23 >= 0 )\n        LODWORD(v95) = v23;\n      v95 = (int)v95;\n      if ( (_DWORD)v95 )\n        v79 = (int)v95;\n      if ( (_DWORD)v21 )\n      {\n        v14 = v9;\n        v93 = v9;\n        v94 = 1LL;\n        goto LABEL_242;\n      }\n      if ( v79 < a3 )\n      {\n        if ( s )\n        {\n          if ( v23 > 1 )\n          {\n            v105 = v23 - 1LL;\n            v106 = s;\n            s += v105;\n            if ( i == 48 )\n              memset(v106, 48, v105);\n            else\n              memset(v106, 32, v105);\n            LOBYTE(v20) = *v9;\n          }\n          *s++ = v20;\n        }\nLABEL_174:\n        v13 += v79;\n        v14 = v9;\n        goto LABEL_12;\n      }\n      return 0LL;\n    case 58:\n      v107 = v9[1];\n      a3 = (unsigned __int64)(v9 + 1);\n      for ( j = 1LL; v107 == 58; a3 = (unsigned __int64)&v9[j] )\n        v107 = v9[++j];\n      if ( v107 != 122 )\n        goto LABEL_236;\n      v9 = (char *)a3;\n      goto LABEL_252;\n    case 65:\n    case 66:\n    case 97:\n      if ( (_DWORD)v21 )\n        goto LABEL_236;\n      if ( (_BYTE)v17 )\n        v16 = v17;\n      goto LABEL_51;\n    case 67:\n      if ( (_DWORD)v21 == 69 )\n        goto LABEL_334;\n      v139 = 0;\n      v48 = 2;\n      LOBYTE(v70) = a4[1].m128i_i32[1] < -1900;\n      v68 = a4[1].m128i_i32[1] / 100\n          + 19\n          - ((a4[1].m128i_i32[1] / 100 + 19 > 0) & ((unsigned int)(a4[1].m128i_i32[1] % 100) >> 31));\n      v69 = 0;\n      goto LABEL_122;\n    case 68:\n      if ( !(_DWORD)v21 )\n        goto LABEL_94;\n      goto LABEL_236;\n    case 70:\n      if ( !(_DWORD)v21 )\n        goto LABEL_94;\n      goto LABEL_236;\n    case 71:\n    case 86:\n    case 103:\n      if ( (_DWORD)v21 == 69 )\n        goto LABEL_236;\n      v60 = a4[1].m128i_i32[3];\n      v61 = a4[1].m128i_i32[2];\n      v138 = a4[1].m128i_i32[1];\n      v62 = v138 + ((v138 >> 31) & 0x190) - 100;\n      v63 = v61 - 382 + 7 * ((v60 - v61 + 382) / 7) + 3;\n      if ( v63 < 0 )\n      {\n        v117 = v138 + ((v138 >> 31) & 0x190) - 101;\n        v118 = 365;\n        if ( (((_BYTE)v138 + ((v138 >> 31) & 0x90) - 101) & 3) == 0 )\n        {\n          v118 = 366;\n          if ( v117 == 100 * (v117 / 100) )\n            v118 = 366 - (v117 % 400 != 0);\n        }\n        v119 = v118 + v60;\n        v120 = v119 - v61;\n        v66 = -1;\n        v63 = v119 - (v120 + 382) + 7 * ((v120 + 382) / 7) + 3;\n      }\n      else\n      {\n        v64 = 365;\n        if ( (v62 & 3) == 0 )\n        {\n          v64 = 366;\n          if ( v62 == 100 * (v62 / 100) )\n            v64 = (v62 == 400 * (v62 / 400)) + 365;\n        }\n        v65 = v61 - 382 + 7 * ((v60 - v64 - v61 + 382) / 7) + 3;\n        if ( v65 >= 0 )\n          v63 = v65;\n        v66 = (v65 >> 31) + 1;\n      }\n      if ( (_BYTE)v20 == 71 )\n      {\n        v122 = a4[1].m128i_i32[1];\n        v139 = 0;\n        v48 = 4;\n        v124 = __OFSUB__(v122, -1900 - v66);\n        v123 = v122 - (-1900 - v66) < 0;\n        v68 = v122 + v66 + 1900;\n        LOBYTE(v70) = v123 ^ v124;\n        v69 = 0;\n        goto LABEL_122;\n      }\n      if ( (_BYTE)v20 == 103 )\n      {\n        v48 = 2;\n        v67 = (v66 + v138 % 100) % 100;\n        v68 = v67;\n        if ( v67 < 0 )\n        {\n          v68 = v67 + 100;\n          if ( v138 < -1900 - v66 )\n            v68 = -v67;\n        }\n      }\n      else\n      {\n        v48 = 2;\n        v68 = v63 / 7 + 1;\n      }\n      goto LABEL_121;\n    case 72:\n      if ( (_DWORD)v21 == 69 )\n        goto LABEL_236;\n      v48 = 2;\n      v68 = a4->m128i_u32[2];\n      goto LABEL_121;\n    case 73:\n      if ( (_DWORD)v21 == 69 )\n        goto LABEL_236;\n      v68 = v133;\n      v48 = 2;\n      goto LABEL_121;\n    case 77:\n      if ( (_DWORD)v21 == 69 )\n        goto LABEL_236;\n      v48 = 2;\n      v68 = a4->m128i_u32[1];\n      goto LABEL_121;\n    case 78:\n      if ( (_DWORD)v21 == 69 )\n        goto LABEL_236;\n      if ( v23 == -1 )\n      {\n        v68 = a8;\n        v23 = 9;\n        v48 = 9;\n      }\n      else\n      {\n        if ( v23 > 8 )\n        {\n          v68 = a8;\n        }\n        else\n        {\n          v68 = a8;\n          for ( k = v23; k != 9; ++k )\n            v68 = (int)v68 / 10;\n        }\n        v48 = v23;\n      }\n      goto LABEL_121;\n    case 80:\n      v28 = 1;\n      goto LABEL_152;\n    case 82:\n    case 84:\nLABEL_94:\n      v55 = sub_405920(0LL, a7, a8);\n      v56 = 0;\n      if ( v23 >= 0 )\n        v56 = v23;\n      v57 = v56;\n      if ( v55 >= v56 )\n        v57 = v55;\n      if ( a2 - v13 <= v57 )\n        return 0LL;\n      if ( s )\n      {\n        if ( v55 < v56 )\n        {\n          v168 = v55;\n          v58 = v23 - v55;\n          v59 = s;\n          s += v58;\n          if ( i == 48 )\n            memset(v59, 48, v58);\n          else\n            memset(v59, 32, v58);\n          v55 = v168;\n        }\n        v161 = v55;\n        sub_405920(s, a7, a8);\n        s += v161;\n      }\n      v13 += v57;\n      v14 = v9;\n      goto LABEL_12;\n    case 83:\n      if ( (_DWORD)v21 == 69 )\n        goto LABEL_236;\n      v48 = 2;\n      v68 = a4->m128i_i32[0];\n      goto LABEL_121;\n    case 85:\n      if ( (_DWORD)v21 == 69 )\n        goto LABEL_236;\n      v90 = a4[1].m128i_i32[3] - a4[1].m128i_i32[2] + 7;\n      v91 = (unsigned __int64)(-1840700269LL * v90) >> 32;\n      goto LABEL_226;\n    case 87:\n      if ( (_DWORD)v21 == 69 )\n        goto LABEL_236;\n      v90 = 7 * ((a4[1].m128i_i32[2] + 6) / 7) - (a4[1].m128i_i32[2] + 6) + a4[1].m128i_i32[3] + 7;\n      v91 = (unsigned __int64)(-1840700269LL * v90) >> 32;\nLABEL_226:\n      v48 = 2;\n      v68 = ((v91 + v90) >> 2) - (v90 >> 31);\n      goto LABEL_121;\n    case 88:\n    case 99:\n    case 120:\n      if ( (_DWORD)v21 != 79 )\n        goto LABEL_69;\n      goto LABEL_236;\n    case 89:\n      if ( (_DWORD)v21 == 69 )\n        goto LABEL_334;\n      if ( (_DWORD)v21 == 79 )\n        goto LABEL_236;\n      v139 = 0;\n      v48 = 4;\n      v89 = a4[1].m128i_i32[1];\n      LOBYTE(v70) = v89 < -1900;\n      v68 = v89 + 1900;\n      v69 = 0;\n      goto LABEL_220;\n    case 90:\n      v162 = v17;\n      if ( (_BYTE)v17 )\n        v16 = 0;\n      v150 = v16;\n      v71 = strlen(v131);\n      v72 = 0;\n      if ( v23 >= 0 )\n        v72 = v23;\n      v73 = v72;\n      if ( v71 >= v72 )\n        v73 = v71;\n      a3 = a2 - v13;\n      if ( a2 - v13 <= v73 )\n        return 0LL;\n      if ( s )\n      {\n        v74 = v150;\n        v75 = v162;\n        if ( v71 < v72 )\n        {\n          v76 = v23 - v71;\n          v77 = s;\n          s += v76;\n          if ( i == 48 )\n          {\n            memset(v77, 48, v76);\n            v74 = v150;\n            v75 = v162;\n          }\n          else\n          {\n            memset(v77, 32, v76);\n            v75 = v162;\n            v74 = v150;\n          }\n        }\n        if ( v75 )\n        {\n          sub_405880((__int64)s, (__int64)v131, v71);\n        }\n        else if ( v74 )\n        {\n          sub_4058D0((__int64)s, (__int64)v131, v71);\n        }\n        else\n        {\n          memcpy(s, v131, v71);\n        }\n        s += v71;\n      }\n      v13 += v73;\n      v14 = v9;\n      goto LABEL_12;\n    case 98:\n    case 104:\n      if ( (_BYTE)v17 )\n        v16 = v17;\n      if ( (_DWORD)v21 )\n        goto LABEL_236;\nLABEL_51:\n      v26 = &v180;\n      v27 = v9;\n      v28 = 0;\n      *(_WORD *)format = 9504;\n      LODWORD(v21) = 0;\n      goto LABEL_52;\n    case 100:\n      if ( (_DWORD)v21 == 69 )\n        goto LABEL_236;\n      v48 = 2;\n      v68 = a4->m128i_u32[3];\n      goto LABEL_121;\n    case 101:\n      if ( (_DWORD)v21 == 69 )\n        goto LABEL_236;\n      v68 = a4->m128i_u32[3];\n      goto LABEL_157;\n    case 106:\n      if ( (_DWORD)v21 == 69 )\n        goto LABEL_236;\n      v139 = 0;\n      v48 = 3;\n      v104 = a4[1].m128i_i32[3];\n      LOBYTE(v70) = v104 < -1;\n      v68 = v104 + 1;\n      v69 = 0;\n      goto LABEL_122;\n    case 107:\n      if ( (_DWORD)v21 == 69 )\n        goto LABEL_236;\n      v68 = a4->m128i_u32[2];\n      goto LABEL_157;\n    case 108:\n      if ( (_DWORD)v21 == 69 )\n        goto LABEL_236;\n      v68 = v133;\nLABEL_157:\n      v48 = 2;\n      if ( i != 48 && i != 45 )\n        i = 95;\n      goto LABEL_121;\n    case 109:\n      if ( (_DWORD)v21 == 69 )\n        goto LABEL_236;\n      v139 = 0;\n      v48 = 2;\n      v78 = a4[1].m128i_i32[0];\n      LOBYTE(v70) = v78 < -1;\n      v68 = v78 + 1;\n      v69 = 0;\n      goto LABEL_122;\n    case 110:\n      LODWORD(v79) = 0;\n      if ( v23 >= 0 )\n        LODWORD(v79) = v23;\n      v79 = (int)v79;\n      if ( !(_DWORD)v79 )\n        v79 = 1LL;\n      if ( a2 - v13 <= v79 )\n        return 0LL;\n      if ( s )\n      {\n        if ( v23 > 1 )\n        {\n          v80 = v23 - 1LL;\n          v81 = s;\n          s += v80;\n          if ( i == 48 )\n            memset(v81, 48, v80);\n          else\n            memset(v81, 32, v80);\n        }\n        *s++ = 10;\n      }\n      goto LABEL_174;\n    case 112:\n      v28 = 0;\nLABEL_152:\n      LOBYTE(v20) = 112;\n      if ( (_BYTE)v17 )\n      {\n        v28 = v17;\n        v16 = 0;\n      }\n      goto LABEL_70;\n    case 113:\n      v48 = 1;\n      if ( (_DWORD)v21 == 79 )\n        goto LABEL_124;\n      v139 = 0;\n      LOBYTE(v70) = 0;\n      v69 = 0;\n      v68 = ((11 * a4[1].m128i_i32[0]) >> 5) + 1;\n      goto LABEL_177;\n    case 114:\nLABEL_69:\n      v28 = 0;\nLABEL_70:\n      *(_WORD *)format = 9504;\n      if ( !(_DWORD)v21 )\n      {\n        v27 = v9;\n        v26 = &v180;\n        goto LABEL_52;\n      }\n      v48 = 0;\n      goto LABEL_125;\n    case 115:\n      v148 = v16;\n      v39 = v182;\n      v40 = _mm_loadu_si128(a4 + 2);\n      v41 = _mm_loadu_si128(a4 + 1);\n      v42 = a4[3].m128i_i64[0];\n      *(__m128i *)sa = _mm_loadu_si128(a4);\n      v184 = v41;\n      v185 = v40;\n      v186 = v42;\n      v43 = sub_40BF30(a7, sa, a3, v20, v17, v21);\n      v16 = v148;\n      v44 = v43;\n      v45 = v43;\n      do\n      {\n        v46 = v45 % 10;\n        v45 /= 10LL;\n        v47 = 48 - v46;\n        a3 = (unsigned int)(v46 + 48);\n        if ( v44 < 0 )\n          a3 = v47;\n        *--v39 = a3;\n      }\n      while ( v45 );\n      v48 = 1;\n      if ( v23 > 0 )\n        v48 = v23;\n      if ( v44 >= 0 )\n        goto LABEL_79;\n      goto LABEL_298;\n    case 116:\n      LODWORD(v79) = 0;\n      if ( v23 >= 0 )\n        LODWORD(v79) = v23;\n      v79 = (int)v79;\n      if ( !(_DWORD)v79 )\n        v79 = 1LL;\n      if ( a2 - v13 <= v79 )\n        return 0LL;\n      if ( s )\n      {\n        if ( v23 > 1 )\n        {\n          v87 = v23 - 1LL;\n          v88 = s;\n          s += v87;\n          if ( i == 48 )\n            memset(v88, 48, v87);\n          else\n            memset(v88, 32, v87);\n        }\n        *s++ = 9;\n      }\n      goto LABEL_174;\n    case 117:\n      v48 = 1;\n      v68 = (a4[1].m128i_i32[2] + 6) % 7 + 1;\n      goto LABEL_121;\n    case 119:\n      if ( (_DWORD)v21 == 69 )\n        goto LABEL_236;\n      v48 = 1;\n      v68 = a4[1].m128i_u32[2];\n      goto LABEL_121;\n    case 121:\n      if ( (_DWORD)v21 == 69 )\n      {\nLABEL_334:\n        v48 = 0;\n        goto LABEL_124;\n      }\n      v48 = 2;\n      v68 = a4[1].m128i_i32[1] % 100;\n      if ( (v68 & 0x80000000) != 0 )\n      {\n        v68 += 100;\n        if ( a4[1].m128i_i32[1] <= -1901 )\n          v68 = -(a4[1].m128i_i32[1] % 100);\n      }\nLABEL_121:\n      v139 = 0;\n      v69 = 0;\n      v70 = v68 >> 31;\nLABEL_122:\n      if ( (_DWORD)v21 == 79 )\n      {\n        if ( (_BYTE)v70 )\n          goto LABEL_221;\nLABEL_124:\n        v28 = 0;\n        *(_WORD *)format = 9504;\nLABEL_125:\n        v180 = v21;\n        v27 = v9;\n        LODWORD(v21) = v48;\n        v26 = &v181;\nLABEL_52:\n        *v26 = v20;\n        v26[1] = 0;\n        v134 = v27;\n        v158 = v21;\n        v145 = v16;\n        v29 = strftime(sa, 0x400uLL, format, (const struct tm *)a4);\n        v14 = v134;\n        if ( v29 )\n        {\n          v30 = v29 - 1;\n          v31 = 0;\n          if ( v23 >= 0 )\n            v31 = v23;\n          v32 = v31;\n          if ( v30 >= v31 )\n            v32 = v30;\n          a3 = a2 - v13;\n          if ( a2 - v13 > v32 )\n          {\n            if ( s )\n            {\n              v16 = v145;\n              if ( !v158 && v30 < v31 )\n              {\n                v159 = v30;\n                v33 = v23 - v30;\n                v146 = v134;\n                v135 = v16;\n                v34 = s;\n                s += v33;\n                if ( i == 48 )\n                {\n                  memset(v34, 48, v33);\n                  v16 = v135;\n                  v14 = v146;\n                  v30 = v159;\n                }\n                else\n                {\n                  memset(v34, 32, v33);\n                  v30 = v159;\n                  v14 = v146;\n                  v16 = v135;\n                }\n              }\n              v147 = v14;\n              v35 = &sa[1];\n              v36 = v30;\n              v37 = s;\n              v136 = v30;\n              if ( !v28 )\n                goto LABEL_64;\n              sub_405880((__int64)s, (__int64)&sa[1], v30);\n              v38 = v136;\n              v14 = v147;\n              goto LABEL_66;\n            }\n            goto LABEL_67;\n          }\n          return 0LL;\n        }\n        goto LABEL_12;\n      }\nLABEL_220:\n      if ( (_BYTE)v70 )\nLABEL_221:\n        v68 = -v68;\nLABEL_177:\n      v82 = v182;\n      while ( 1 )\n      {\n        v39 = v82 - 1;\n        if ( (v69 & 1) != 0 )\n        {\n          v83 = v82 - 2;\n          *--v82 = 58;\n          v39 = v83;\n        }\n        v69 >>= 1;\n        a3 = v68 / 0xA;\n        *(v82 - 1) = v68 % 0xA + 48;\n        v82 = v39;\n        if ( v68 <= 9 && !v69 )\n          break;\n        v68 /= 0xAu;\n      }\n      if ( v48 < v23 )\n        v48 = v23;\n      if ( (_BYTE)v70 )\n      {\nLABEL_298:\n        v140 = 45;\n        v108 = 45;\n        if ( i == 45 )\n          goto LABEL_299;\nLABEL_189:\n        v49 = (char *)(v182 - v39);\n        LODWORD(v51) = v48 - 1 - (v182 - v39);\n        v50 = a2 - v13;\n        if ( (int)v51 <= 0 )\n        {\n          LODWORD(v52) = 0;\n          v110 = 1LL;\n          if ( v23 >= 0 )\n            LODWORD(v52) = v23;\n          v52 = (int)v52;\n          if ( (_DWORD)v52 )\n            v110 = (int)v52;\n          if ( v110 >= v50 )\n            return 0LL;\n          if ( s )\n          {\n            if ( !v48 && (unsigned __int64)(int)v52 > 1 )\n            {\n              v111 = v23 - 1LL;\n              v178 = v110;\n              v176 = (int)v52;\n              v156 = &s[v111];\n              v165 = v16;\n              if ( i == 48 )\n              {\n                memset(s, 48, v111);\n                s = v156;\n                v16 = v165;\n                v48 = 0;\n                v52 = v176;\n                v110 = v178;\n                v49 = (char *)(v182 - v39);\n              }\n              else\n              {\n                memset(s, 32, v111);\n                s = v156;\n                v49 = (char *)(v182 - v39);\n                v110 = v178;\n                v52 = v176;\n                v48 = 0;\n                v16 = v165;\n              }\n            }\n            *s++ = v140;\n          }\n          v13 += v110;\n          v14 = v9;\n          v50 = a2 - v13;\n          goto LABEL_84;\n        }\n        if ( i != 95 )\n        {\n          if ( v48 >= v50 )\n            return 0LL;\n          LODWORD(a3) = 0;\n          v84 = 1LL;\n          if ( v23 >= 0 )\n            LODWORD(a3) = v23;\n          a3 = (int)a3;\n          if ( (_DWORD)a3 )\n            v84 = (int)a3;\n          if ( v84 >= v50 )\n            return 0LL;\n          v13 += v84;\n          v51 = (int)v51;\n          v14 = v9;\n          if ( !s )\n            goto LABEL_205;\n          if ( !v48 && (unsigned __int64)(int)a3 > 1 )\n          {\n            v173 = (int)v51;\n            v85 = v23 - 1LL;\n            v151 = v16;\n            v86 = s;\n            s += v85;\n            if ( i == 48 )\n            {\n              memset(v86, 48, v85);\n              v16 = v151;\n              v48 = 0;\n              v49 = (char *)(v182 - v39);\n              v51 = v173;\n            }\n            else\n            {\n              memset(v86, 32, v85);\n              v51 = v173;\n              v49 = (char *)(v182 - v39);\n              v48 = 0;\n              v16 = v151;\n            }\n          }\n          ++s;\n          v14 = v9;\n          *(s - 1) = v140;\nLABEL_203:\n          if ( s )\n          {\n            v174 = v49;\n            v169 = v48;\n            v163 = v14;\n            v152 = v16;\n            v141 = v51;\n            memset(s, 48, v51);\n            v51 = v141;\n            v49 = v174;\n            v48 = v169;\n            v14 = v163;\n            v16 = v152;\n            s += v141;\n          }\nLABEL_205:\n          v13 += v51;\n          v23 = 0;\n          v52 = 0LL;\n          v50 = a2 - v13;\n          goto LABEL_84;\n        }\nLABEL_326:\n        v112 = (int)v51;\n        if ( (int)v51 >= v50 )\n          return 0LL;\n        if ( s )\n        {\n          v113 = s;\n          v172 = v51;\n          v166 = v48;\n          s += (int)v51;\n          v157 = v16;\n          memset(v113, 32, (int)v51);\n          LODWORD(v51) = v172;\n          v48 = v166;\n          v16 = v157;\n        }\n        v13 += v112;\n        v114 = v23 - v51;\n        v22 = (int)v51 < v23;\n        v23 = 0;\n        if ( v22 )\n          v23 = v114;\n        v50 = a2 - v13;\n        if ( v140 )\n        {\n          v52 = v23;\n          v115 = 1LL;\n          if ( v23 )\n            v115 = v23;\n          if ( v115 >= v50 )\n            return 0LL;\n          if ( s )\n          {\n            if ( !v48 && (unsigned __int64)v23 > 1 )\n            {\n              v116 = s;\n              v177 = v115;\n              s += v23 - 1;\n              v167 = v16;\n              memset(v116, 32, v23 - 1LL);\n              v115 = v177;\n              v48 = 0;\n              v16 = v167;\n              v52 = v23;\n            }\n            *s++ = v140;\n          }\n          v13 += v115;\n          v14 = v9;\n          i = 95;\n          v49 = (char *)(v182 - v39);\n          v50 = a2 - v13;\n        }\n        else\n        {\n          v52 = v23;\n          v14 = v9;\n          i = 95;\n          v49 = (char *)(v182 - v39);\n        }\n        goto LABEL_84;\n      }\n      if ( !v139 )\n      {\nLABEL_79:\n        v49 = (char *)(v182 - v39);\n        v50 = a2 - v13;\n        if ( i == 45 || (LODWORD(v51) = v48 - (_DWORD)v49, v48 - (int)v49 <= 0) )\n        {\n          LODWORD(v52) = 0;\n          v14 = v9;\n          if ( v23 >= 0 )\n            LODWORD(v52) = v23;\n          v52 = (int)v52;\n          goto LABEL_84;\n        }\n        if ( i != 95 )\n        {\n          a3 = v48;\n          if ( v48 >= v50 )\n            return 0LL;\n          v51 = (int)v51;\n          v14 = v9;\n          goto LABEL_203;\n        }\n        v140 = 0;\n        goto LABEL_326;\n      }\n      if ( i != 45 )\n      {\n        v140 = 43;\n        goto LABEL_189;\n      }\n      v108 = 43;\nLABEL_299:\n      LODWORD(v52) = 0;\n      v109 = 1LL;\n      if ( v23 >= 0 )\n        LODWORD(v52) = v23;\n      v52 = (int)v52;\n      if ( (_DWORD)v52 )\n        v109 = (int)v52;\n      if ( a2 - v13 <= v109 )\n        return 0LL;\n      if ( s )\n      {\n        if ( !v48 && (unsigned __int64)(int)v52 > 1 )\n        {\n          v175 = v108;\n          v171 = (int)v52;\n          v155 = v16;\n          memset(s, 32, v23 - 1LL);\n          v108 = v175;\n          v52 = v171;\n          v48 = 0;\n          v16 = v155;\n          s += v23 - 1;\n        }\n        *s++ = v108;\n      }\n      v13 += v109;\n      v14 = v9;\n      i = 45;\n      v49 = (char *)(v182 - v39);\n      v50 = a2 - v13;\nLABEL_84:\n      v32 = v52;\n      if ( (unsigned __int64)v49 >= v52 )\n        v32 = (unsigned __int64)v49;\n      if ( v32 < v50 )\n      {\n        if ( s )\n        {\n          if ( !v48 && (unsigned __int64)v49 < v52 )\n          {\n            v160 = v49;\n            v53 = v23 - (_QWORD)v49;\n            v149 = v14;\n            v137 = v16;\n            v54 = s;\n            s += v53;\n            if ( i == 48 )\n            {\n              memset(v54, 48, v53);\n              v16 = v137;\n              v14 = v149;\n              v49 = v160;\n            }\n            else\n            {\n              memset(v54, 32, v53);\n              v49 = v160;\n              v14 = v149;\n              v16 = v137;\n            }\n          }\n          v147 = v14;\n          v36 = (size_t)v49;\n          v35 = v39;\n          v37 = s;\n          v136 = (unsigned __int64)v49;\nLABEL_64:\n          if ( v16 )\n          {\n            sub_4058D0((__int64)v37, (__int64)v35, v36);\n            v38 = v136;\n            v14 = v147;\n          }\n          else\n          {\n            memcpy(v37, v35, v36);\n            v14 = v147;\n            v38 = v136;\n          }\nLABEL_66:\n          s += v38;\n        }\nLABEL_67:\n        v13 += v32;\n        goto LABEL_12;\n      }\n      return 0LL;\n    case 122:\n      j = 0LL;\nLABEL_252:\n      if ( a4[2].m128i_i32[0] < 0 )\n      {\n        v14 = v9;\n        goto LABEL_12;\n      }\n      v100 = a4[2].m128i_i64[1];\n      LOBYTE(v70) = 1;\n      if ( (int)v100 >= 0 )\n      {\n        LOBYTE(v70) = 0;\n        if ( !(_DWORD)v100 )\n          LOBYTE(v70) = *v131 == 45;\n      }\n      v144 = (int)v100 / 3600;\n      v101 = (int)v100 / 60 % 60;\n      v69 = v101;\n      v102 = (int)v100 % 60;\n      if ( j == 1 )\n        goto LABEL_362;\n      if ( j )\n      {\n        if ( j == 2 )\n          goto LABEL_361;\n        if ( j != 3 )\n        {\n          v103 = *v9;\n          v93 = v9;\nLABEL_261:\n          LODWORD(v95) = 0;\n          a3 = a2 - v13;\n          if ( v23 >= 0 )\n            LODWORD(v95) = v23;\n          v95 = (int)v95;\n          if ( v103 == 37 )\n          {\n            v79 = 1LL;\n            v14 = v93;\n            v94 = 1LL;\n            if ( (_DWORD)v95 )\n              v79 = (int)v95;\n          }\n          else\n          {\n            v9 = v93;\nLABEL_236:\n            v92 = v9 - 1;\n            do\n            {\n              v93 = v92;\n              LODWORD(v94) = (_DWORD)v9 - 1 + 2 - (_DWORD)v92--;\n            }\n            while ( v92[1] != 37 );\n            LODWORD(v95) = 0;\n            v94 = (int)v94;\n            v14 = v9;\n            a3 = a2 - v13;\n            if ( v23 >= 0 )\n              LODWORD(v95) = v23;\n            v95 = (int)v95;\n            v79 = (int)v95;\n            if ( (int)v94 >= (unsigned __int64)(int)v95 )\n              v79 = (int)v94;\n          }\nLABEL_242:\n          if ( a3 > v79 )\n          {\n            if ( s )\n            {\n              if ( v94 < v95 )\n              {\n                v170 = v94;\n                v96 = v23 - v94;\n                v164 = v14;\n                v153 = v93;\n                v142 = v16;\n                v97 = s;\n                s += v96;\n                if ( i == 48 )\n                {\n                  memset(v97, 48, v96);\n                  v16 = v142;\n                  v93 = v153;\n                  v14 = v164;\n                  v94 = v170;\n                }\n                else\n                {\n                  memset(v97, 32, v96);\n                  v94 = v170;\n                  v14 = v164;\n                  v93 = v153;\n                  v16 = v142;\n                }\n              }\n              v154 = v14;\n              v143 = v94;\n              if ( v16 )\n              {\n                sub_4058D0((__int64)s, (__int64)v93, v94);\n                v98 = v143;\n                v14 = v154;\n              }\n              else\n              {\n                memcpy(s, v93, v94);\n                v14 = v154;\n                v98 = v143;\n              }\n              s += v98;\n            }\n            v13 += v79;\n            goto LABEL_12;\n          }\n          return 0LL;\n        }\n        if ( v102 )\n        {\nLABEL_361:\n          v125 = 10000 * v144;\n          v48 = 9;\n          v139 = 1;\n          v126 = 100 * v69 + v125;\n          v69 = 20;\n          v68 = v126 + v102;\n        }\n        else if ( v101 )\n        {\nLABEL_362:\n          v127 = 100 * v144;\n          v48 = 6;\n          v139 = 1;\n          v68 = v101 + v127;\n          v69 = 4;\n        }\n        else\n        {\n          v68 = v144;\n          v48 = 3;\n          v139 = 1;\n        }\n      }\n      else\n      {\n        v128 = 100 * v144;\n        v69 = 0;\n        v139 = 1;\n        v48 = 5;\n        v68 = v101 + v128;\n      }\n      goto LABEL_122;\n    default:\n      goto LABEL_236;\n  }\n}\n"
        },
        {
            "funcName": "sub_4070F0",
            "funcStartAddr": "0x4070f0",
            "funcEndAddr": "0x40710f",
            "decompiledFuncCode": "__int64 __fastcall sub_4070F0(char *a1, __int64 a2, unsigned __int64 a3, const __m128i *a4, __int64 a5, int a6)\n{\n  char v7[9]; // [rsp+Fh] [rbp-9h] BYREF\n\n  v7[0] = 0;\n  return sub_405920(a1, a2, a3, a4, 0, (__int64)v7, a5, a6);\n}\n"
        },
        {
            "funcName": "sub_407110",
            "funcStartAddr": "0x407110",
            "funcEndAddr": "0x4071a9",
            "decompiledFuncCode": "char *__fastcall sub_407110(const char *a1)\n{\n  __int64 v1; // rbx\n  char *result; // rax\n\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v1 = (__int64)a1;\n  result = strrchr(a1, 47);\n  if ( result )\n  {\n    if ( result + 1 - a1 > 6 && !memcmp(result - 6, \"/.libs/\", 7uLL) )\n    {\n      v1 = (__int64)(result + 1);\n      if ( !memcmp(result + 1, \"lt-\", 3uLL) )\n      {\n        v1 = (__int64)(result + 4);\n        program_invocation_short_name = (__int64)(result + 4);\n      }\n    }\n  }\n  qword_614490 = v1;\n  program_invocation_name = v1;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4071B0",
            "funcStartAddr": "0x4071b0",
            "funcEndAddr": "0x4072a2",
            "decompiledFuncCode": "char *__fastcall sub_4071B0(char *msgid, int a2)\n{\n  char *v2; // rbx\n  _BYTE *v4; // rax\n  bool v5; // zf\n  const char *v6; // rbx\n\n  v2 = dcgettext(0LL, msgid, 5);\n  if ( msgid != v2 )\n    return v2;\n  v4 = (_BYTE *)sub_40C0D0();\n  if ( (*v4 & 0xDF) == 85 )\n  {\n    if ( (v4[1] & 0xDF) == 84 && (v4[2] & 0xDF) == 70 && v4[3] == 45 && v4[4] == 56 && !v4[5] )\n    {\n      v5 = *v2 == 96;\n      v2 = (char *)&unk_40F3D9;\n      if ( !v5 )\n        return (char *)&unk_40F3CE;\n      return v2;\n    }\n  }\n  else if ( (*v4 & 0xDF) == 71\n         && (v4[1] & 0xDF) == 66\n         && v4[2] == 49\n         && v4[3] == 56\n         && v4[4] == 48\n         && v4[5] == 51\n         && v4[6] == 48\n         && !v4[7] )\n  {\n    v5 = *v2 == 96;\n    v2 = (char *)&unk_40F3D5;\n    if ( !v5 )\n      return (char *)&unk_40F3D2;\n    return v2;\n  }\n  v6 = \"\\\"\";\n  if ( a2 != 9 )\n    return \"'\";\n  return (char *)v6;\n}\n"
        },
        {
            "funcName": "sub_4072B0",
            "funcStartAddr": "0x401d10",
            "funcEndAddr": "0x401d15",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_4072B0(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_4072B0((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_4072B0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_40BA50((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_4072B0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_4071B0(\"`\", a5);\n        v51 = sub_4071B0(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n\nunsigned __int64 __fastcall sub_4072B0(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_4072B0((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_4072B0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_40BA50((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_4072B0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_4071B0(\"`\", a5);\n        v51 = sub_4071B0(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n"
        },
        {
            "funcName": "sub_4072B0",
            "funcStartAddr": "0x401d10",
            "funcEndAddr": "0x401d15",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_4072B0(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_4072B0((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_4072B0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_40BA50((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_4072B0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_4071B0(\"`\", a5);\n        v51 = sub_4071B0(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n\nunsigned __int64 __fastcall sub_4072B0(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_4072B0((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_4072B0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_40BA50((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_4072B0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_4071B0(\"`\", a5);\n        v51 = sub_4071B0(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n"
        },
        {
            "funcName": "sub_4084E0",
            "funcStartAddr": "0x401d15",
            "funcEndAddr": "0x401d1a",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4084E0(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __int64 v7; // rdx\n  __m128i *v8; // rbx\n  int *v9; // r13\n  __int64 v10; // rsi\n  unsigned __int64 *v11; // rbx\n  _BYTE *v12; // r12\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rsi\n  _BYTE *v15; // rax\n  int v16; // r8d\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v20; // [rsp+10h] [rbp-48h]\n  int v21; // [rsp+18h] [rbp-40h]\n  int v22; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v8 = (__m128i *)off_614318;\n  v9 = v6;\n  v21 = *v6;\n  if ( (int)a1 < 0 )\n    abort();\n  if ( dword_614330 <= (int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_409550(a1, a2, v7);\n    v10 = 16LL * ((int)a1 + 1);\n    if ( off_614318 == &xmmword_614320 )\n    {\n      v8 = (__m128i *)sub_409360(0LL, v10);\n      off_614318 = v8;\n      *v8 = _mm_load_si128((const __m128i *)&xmmword_614320);\n    }\n    else\n    {\n      off_614318 = (void *)sub_409360(off_614318, v10);\n      v8 = (__m128i *)off_614318;\n    }\n    memset(&v8[dword_614330], 0, 16LL * ((int)a1 + 1 - dword_614330));\n    dword_614330 = a1 + 1;\n  }\n  v11 = (unsigned __int64 *)&v8[(int)a1];\n  v12 = (_BYTE *)v11[1];\n  v22 = *(_DWORD *)(a4 + 4) | 1;\n  v19 = *v11;\n  v13 = sub_4072B0(v12, *v11, a2, a3, *(_DWORD *)a4, v22, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v19 <= v13 )\n  {\n    v14 = v13 + 1;\n    *v11 = v13 + 1;\n    if ( v12 != (_BYTE *)&unk_6144A0 )\n    {\n      v20 = v13 + 1;\n      free(v12);\n      v14 = v20;\n    }\n    v15 = (_BYTE *)sub_409300(v14);\n    v16 = *(_DWORD *)a4;\n    v11[1] = (unsigned __int64)v15;\n    v12 = v15;\n    sub_4072B0(v15, v14, a2, a3, v16, v22, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v9 = v21;\n  return v12;\n}\n\n_BYTE *__fastcall sub_4084E0(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __int64 v7; // rdx\n  __m128i *v8; // rbx\n  int *v9; // r13\n  __int64 v10; // rsi\n  unsigned __int64 *v11; // rbx\n  _BYTE *v12; // r12\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rsi\n  _BYTE *v15; // rax\n  int v16; // r8d\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v20; // [rsp+10h] [rbp-48h]\n  int v21; // [rsp+18h] [rbp-40h]\n  int v22; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v8 = (__m128i *)off_614318;\n  v9 = v6;\n  v21 = *v6;\n  if ( (int)a1 < 0 )\n    abort();\n  if ( dword_614330 <= (int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_409550(a1, a2, v7);\n    v10 = 16LL * ((int)a1 + 1);\n    if ( off_614318 == &xmmword_614320 )\n    {\n      v8 = (__m128i *)sub_409360(0LL, v10);\n      off_614318 = v8;\n      *v8 = _mm_load_si128((const __m128i *)&xmmword_614320);\n    }\n    else\n    {\n      off_614318 = (void *)sub_409360(off_614318, v10);\n      v8 = (__m128i *)off_614318;\n    }\n    memset(&v8[dword_614330], 0, 16LL * ((int)a1 + 1 - dword_614330));\n    dword_614330 = a1 + 1;\n  }\n  v11 = (unsigned __int64 *)&v8[(int)a1];\n  v12 = (_BYTE *)v11[1];\n  v22 = *(_DWORD *)(a4 + 4) | 1;\n  v19 = *v11;\n  v13 = sub_4072B0(v12, *v11, a2, a3, *(_DWORD *)a4, v22, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v19 <= v13 )\n  {\n    v14 = v13 + 1;\n    *v11 = v13 + 1;\n    if ( v12 != (_BYTE *)&unk_6144A0 )\n    {\n      v20 = v13 + 1;\n      free(v12);\n      v14 = v20;\n    }\n    v15 = (_BYTE *)sub_409300(v14);\n    v16 = *(_DWORD *)a4;\n    v11[1] = (unsigned __int64)v15;\n    v12 = v15;\n    sub_4072B0(v15, v14, a2, a3, v16, v22, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v9 = v21;\n  return v12;\n}\n"
        },
        {
            "funcName": "sub_4084E0",
            "funcStartAddr": "0x401d15",
            "funcEndAddr": "0x401d1a",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4084E0(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __int64 v7; // rdx\n  __m128i *v8; // rbx\n  int *v9; // r13\n  __int64 v10; // rsi\n  unsigned __int64 *v11; // rbx\n  _BYTE *v12; // r12\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rsi\n  _BYTE *v15; // rax\n  int v16; // r8d\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v20; // [rsp+10h] [rbp-48h]\n  int v21; // [rsp+18h] [rbp-40h]\n  int v22; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v8 = (__m128i *)off_614318;\n  v9 = v6;\n  v21 = *v6;\n  if ( (int)a1 < 0 )\n    abort();\n  if ( dword_614330 <= (int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_409550(a1, a2, v7);\n    v10 = 16LL * ((int)a1 + 1);\n    if ( off_614318 == &xmmword_614320 )\n    {\n      v8 = (__m128i *)sub_409360(0LL, v10);\n      off_614318 = v8;\n      *v8 = _mm_load_si128((const __m128i *)&xmmword_614320);\n    }\n    else\n    {\n      off_614318 = (void *)sub_409360(off_614318, v10);\n      v8 = (__m128i *)off_614318;\n    }\n    memset(&v8[dword_614330], 0, 16LL * ((int)a1 + 1 - dword_614330));\n    dword_614330 = a1 + 1;\n  }\n  v11 = (unsigned __int64 *)&v8[(int)a1];\n  v12 = (_BYTE *)v11[1];\n  v22 = *(_DWORD *)(a4 + 4) | 1;\n  v19 = *v11;\n  v13 = sub_4072B0(v12, *v11, a2, a3, *(_DWORD *)a4, v22, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v19 <= v13 )\n  {\n    v14 = v13 + 1;\n    *v11 = v13 + 1;\n    if ( v12 != (_BYTE *)&unk_6144A0 )\n    {\n      v20 = v13 + 1;\n      free(v12);\n      v14 = v20;\n    }\n    v15 = (_BYTE *)sub_409300(v14);\n    v16 = *(_DWORD *)a4;\n    v11[1] = (unsigned __int64)v15;\n    v12 = v15;\n    sub_4072B0(v15, v14, a2, a3, v16, v22, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v9 = v21;\n  return v12;\n}\n\n_BYTE *__fastcall sub_4084E0(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __int64 v7; // rdx\n  __m128i *v8; // rbx\n  int *v9; // r13\n  __int64 v10; // rsi\n  unsigned __int64 *v11; // rbx\n  _BYTE *v12; // r12\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rsi\n  _BYTE *v15; // rax\n  int v16; // r8d\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v20; // [rsp+10h] [rbp-48h]\n  int v21; // [rsp+18h] [rbp-40h]\n  int v22; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v8 = (__m128i *)off_614318;\n  v9 = v6;\n  v21 = *v6;\n  if ( (int)a1 < 0 )\n    abort();\n  if ( dword_614330 <= (int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_409550(a1, a2, v7);\n    v10 = 16LL * ((int)a1 + 1);\n    if ( off_614318 == &xmmword_614320 )\n    {\n      v8 = (__m128i *)sub_409360(0LL, v10);\n      off_614318 = v8;\n      *v8 = _mm_load_si128((const __m128i *)&xmmword_614320);\n    }\n    else\n    {\n      off_614318 = (void *)sub_409360(off_614318, v10);\n      v8 = (__m128i *)off_614318;\n    }\n    memset(&v8[dword_614330], 0, 16LL * ((int)a1 + 1 - dword_614330));\n    dword_614330 = a1 + 1;\n  }\n  v11 = (unsigned __int64 *)&v8[(int)a1];\n  v12 = (_BYTE *)v11[1];\n  v22 = *(_DWORD *)(a4 + 4) | 1;\n  v19 = *v11;\n  v13 = sub_4072B0(v12, *v11, a2, a3, *(_DWORD *)a4, v22, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v19 <= v13 )\n  {\n    v14 = v13 + 1;\n    *v11 = v13 + 1;\n    if ( v12 != (_BYTE *)&unk_6144A0 )\n    {\n      v20 = v13 + 1;\n      free(v12);\n      v14 = v20;\n    }\n    v15 = (_BYTE *)sub_409300(v14);\n    v16 = *(_DWORD *)a4;\n    v11[1] = (unsigned __int64)v15;\n    v12 = v15;\n    sub_4072B0(v15, v14, a2, a3, v16, v22, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v9 = v21;\n  return v12;\n}\n"
        },
        {
            "funcName": "sub_408680",
            "funcStartAddr": "0x408680",
            "funcEndAddr": "0x4086b4",
            "decompiledFuncCode": "__int64 __fastcall sub_408680(__int128 *a1)\n{\n  __int128 *v1; // rbx\n  int *v2; // rax\n  int v3; // r12d\n  int *v4; // rbp\n  __int64 result; // rax\n\n  v1 = a1;\n  v2 = __errno_location();\n  v3 = *v2;\n  v4 = v2;\n  if ( !a1 )\n    v1 = &xmmword_6145A0;\n  result = sub_409500(v1, 0x38uLL);\n  *v4 = v3;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_408770",
            "funcStartAddr": "0x408770",
            "funcEndAddr": "0x4087e2",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_408770(_BYTE *a1, unsigned __int64 a2, __int64 a3, unsigned __int64 a4, __int128 *a5)\n{\n  __int128 *v6; // rbx\n  int *v7; // rax\n  int v8; // r12d\n  int *v9; // rbp\n  unsigned __int64 result; // rax\n\n  v6 = a5;\n  if ( !a5 )\n    v6 = &xmmword_6145A0;\n  v7 = __errno_location();\n  v8 = *v7;\n  v9 = v7;\n  result = sub_4072B0(\n             a1,\n             a2,\n             a3,\n             a4,\n             *(_DWORD *)v6,\n             *((_DWORD *)v6 + 1),\n             (__int64)v6 + 8,\n             *((char **)v6 + 5),\n             *((char **)v6 + 6));\n  *v9 = v8;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4087F0",
            "funcStartAddr": "0x4087f0",
            "funcEndAddr": "0x4088d1",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4087F0(__int64 a1, unsigned __int64 a2, unsigned __int64 *a3, __int128 *a4)\n{\n  __int128 *v5; // rbx\n  int *v6; // r13\n  int v7; // ebp\n  int v9; // [rsp+Ch] [rbp-5Ch]\n  _BYTE *v10; // [rsp+10h] [rbp-58h]\n  unsigned __int64 v11; // [rsp+28h] [rbp-40h]\n\n  v5 = a4;\n  if ( !a4 )\n    v5 = &xmmword_6145A0;\n  v6 = __errno_location();\n  v7 = *((_DWORD *)v5 + 1) | (a3 == 0LL);\n  v9 = *v6;\n  v11 = sub_4072B0(0LL, 0LL, a1, a2, *(_DWORD *)v5, v7, (__int64)v5 + 8, *((char **)v5 + 5), *((char **)v5 + 6));\n  v10 = (_BYTE *)sub_409300(v11 + 1);\n  sub_4072B0(v10, v11 + 1, a1, a2, *(_DWORD *)v5, v7, (__int64)v5 + 8, *((char **)v5 + 5), *((char **)v5 + 6));\n  *v6 = v9;\n  if ( a3 )\n    *a3 = v11;\n  return v10;\n}\n"
        },
        {
            "funcName": "sub_4088F0",
            "funcStartAddr": "0x4088f0",
            "funcEndAddr": "0x408985",
            "decompiledFuncCode": "void sub_4088F0()\n{\n  __int128 *v0; // r12\n  void **v1; // rbx\n  void **v2; // rbp\n  void *v3; // rdi\n  void *v4; // rdi\n\n  v0 = (__int128 *)off_614318;\n  if ( dword_614330 > 1 )\n  {\n    v1 = (void **)((char *)off_614318 + 24);\n    v2 = (void **)((char *)off_614318 + 16 * (unsigned int)(dword_614330 - 2) + 40);\n    do\n    {\n      v3 = *v1;\n      v1 += 2;\n      free(v3);\n    }\n    while ( v1 != v2 );\n  }\n  v4 = (void *)*((_QWORD *)v0 + 1);\n  if ( v4 != &unk_6144A0 )\n  {\n    free(v4);\n    *(_QWORD *)&xmmword_614320 = 256LL;\n    *((_QWORD *)&xmmword_614320 + 1) = &unk_6144A0;\n  }\n  if ( v0 != &xmmword_614320 )\n  {\n    free(v0);\n    off_614318 = &xmmword_614320;\n  }\n  dword_614330 = 1;\n}\n"
        },
        {
            "funcName": "sub_408A00",
            "funcStartAddr": "0x401d1a",
            "funcEndAddr": "0x401d1f",
            "decompiledFuncCode": "_BYTE *__fastcall sub_408A00(__int64 a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_4084E0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_408A00(__int64 a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_4084E0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_408A00",
            "funcStartAddr": "0x401d1a",
            "funcEndAddr": "0x401d1f",
            "decompiledFuncCode": "_BYTE *__fastcall sub_408A00(__int64 a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_4084E0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_408A00(__int64 a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_4084E0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_408A70",
            "funcStartAddr": "0x401d1f",
            "funcEndAddr": "0x401d24",
            "decompiledFuncCode": "_BYTE *__fastcall sub_408A70(__int64 a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_4084E0(a1, a3, a4, (__int64)v5);\n}\n\n_BYTE *__fastcall sub_408A70(__int64 a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_4084E0(a1, a3, a4, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_408A70",
            "funcStartAddr": "0x401d1f",
            "funcEndAddr": "0x401d24",
            "decompiledFuncCode": "_BYTE *__fastcall sub_408A70(__int64 a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_4084E0(a1, a3, a4, (__int64)v5);\n}\n\n_BYTE *__fastcall sub_408A70(__int64 a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_4084E0(a1, a3, a4, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_408B00",
            "funcStartAddr": "0x408b00",
            "funcEndAddr": "0x408b70",
            "decompiledFuncCode": "_BYTE *__fastcall sub_408B00(__int64 a1, unsigned __int64 a2, unsigned __int8 a3)\n{\n  _DWORD *v3; // r8\n  __int128 v5[3]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+30h] [rbp-18h]\n\n  v6 = qword_6145D0;\n  v5[0] = (__int128)_mm_load_si128((const __m128i *)&xmmword_6145A0);\n  v5[1] = (__int128)_mm_load_si128((const __m128i *)&xmmword_6145B0);\n  v3 = (_DWORD *)v5 + (a3 >> 5) + 2;\n  v5[2] = (__int128)_mm_load_si128((const __m128i *)&xmmword_6145C0);\n  *v3 ^= (((*v3 >> (a3 & 0x1F)) & 1) == 0) << (a3 & 0x1F);\n  return sub_4084E0(0LL, a1, a2, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_408B80",
            "funcStartAddr": "0x408b80",
            "funcEndAddr": "0x408b91",
            "decompiledFuncCode": "_BYTE *__fastcall sub_408B80(__int64 a1)\n{\n  return sub_408B00(a1, 0xFFFFFFFFFFFFFFFFLL, 0x3Au);\n}\n"
        },
        {
            "funcName": "sub_408BB0",
            "funcStartAddr": "0x401d24",
            "funcEndAddr": "0x401d29",
            "decompiledFuncCode": "_BYTE *__fastcall sub_408BB0(__int64 a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_4084E0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_408BB0(__int64 a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_4084E0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_408BB0",
            "funcStartAddr": "0x401d24",
            "funcEndAddr": "0x401d29",
            "decompiledFuncCode": "_BYTE *__fastcall sub_408BB0(__int64 a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_4084E0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_408BB0(__int64 a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_4084E0(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_408C20",
            "funcStartAddr": "0x408c20",
            "funcEndAddr": "0x408c8c",
            "decompiledFuncCode": "_BYTE *__fastcall sub_408C20(__int64 a1, __int64 a2, __int64 a3, __int64 a4, unsigned __int64 a5)\n{\n  __int128 v6[2]; // [rsp+0h] [rbp-48h] BYREF\n  __m128i si128; // [rsp+20h] [rbp-28h]\n  __int64 v8; // [rsp+30h] [rbp-18h]\n\n  v6[0] = (__int128)_mm_load_si128((const __m128i *)&xmmword_6145A0);\n  v6[1] = (__int128)_mm_load_si128((const __m128i *)&xmmword_6145B0);\n  si128 = _mm_load_si128((const __m128i *)&xmmword_6145C0);\n  v8 = qword_6145D0;\n  LODWORD(v6[0]) = 10;\n  if ( !a2 || !a3 )\n    abort();\n  si128.m128i_i64[1] = a2;\n  v8 = a3;\n  return sub_4084E0(a1, a4, a5, (__int64)v6);\n}\n"
        },
        {
            "funcName": "sub_408D30",
            "funcStartAddr": "0x408d30",
            "funcEndAddr": "0x408d46",
            "decompiledFuncCode": "_BYTE *__fastcall sub_408D30(__int64 a1)\n{\n  return sub_4084E0(0LL, a1, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_6142E0);\n}\n"
        },
        {
            "funcName": "sub_408D50",
            "funcStartAddr": "0x408d50",
            "funcEndAddr": "0x408d5e",
            "decompiledFuncCode": "__int64 __fastcall sub_408D50(int a1, __int64 a2, __int64 a3, int a4, int a5, int a6, char a7)\n{\n  return sub_40AAA0(a1, 0, 3, a4, a5, a6, a7);\n}\n"
        },
        {
            "funcName": "sub_408D60",
            "funcStartAddr": "0x401d29",
            "funcEndAddr": "0x401d2e",
            "decompiledFuncCode": "__int64 __fastcall sub_408D60(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v14 = *a5;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *a5;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *a5;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = a5[3];\n      v21 = *a5;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = a5[3];\n      v21 = *a5;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 7LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 8LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *a5;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *a5;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n\n__int64 __fastcall sub_408D60(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v14 = *a5;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *a5;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *a5;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = a5[3];\n      v21 = *a5;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = a5[3];\n      v21 = *a5;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 7LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 8LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *a5;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *a5;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n"
        },
        {
            "funcName": "sub_408D60",
            "funcStartAddr": "0x401d29",
            "funcEndAddr": "0x401d2e",
            "decompiledFuncCode": "__int64 __fastcall sub_408D60(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v14 = *a5;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *a5;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *a5;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = a5[3];\n      v21 = *a5;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = a5[3];\n      v21 = *a5;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 7LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 8LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *a5;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *a5;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n\n__int64 __fastcall sub_408D60(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v14 = *a5;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *a5;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *a5;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = a5[3];\n      v21 = *a5;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = a5[3];\n      v21 = *a5;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 7LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 8LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *a5;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *a5;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n"
        },
        {
            "funcName": "sub_409160",
            "funcStartAddr": "0x409160",
            "funcEndAddr": "0x4091c0",
            "decompiledFuncCode": "__int64 __fastcall sub_409160(FILE *a1, __int64 a2, __int64 a3, __int64 a4, int *a5)\n{\n  __int64 i; // r9\n  __int64 *v6; // r10\n  __int64 v7; // rax\n  unsigned int v8; // eax\n  __int64 *v9; // r10\n  __int64 v10; // rax\n  __int64 v12[11]; // [rsp+0h] [rbp-58h] BYREF\n\n  for ( i = 0LL; i != 10; ++i )\n  {\n    v8 = *a5;\n    if ( (unsigned int)*a5 <= 0x2F )\n    {\n      v6 = (__int64 *)(*((_QWORD *)a5 + 2) + v8);\n      *a5 = v8 + 8;\n      v7 = *v6;\n      v12[i] = *v6;\n      if ( !v7 )\n        return sub_408D60(a1, a2, a3, a4, v12, i);\n      continue;\n    }\n    v9 = (__int64 *)*((_QWORD *)a5 + 1);\n    *((_QWORD *)a5 + 1) = v9 + 1;\n    v10 = *v9;\n    v12[i] = *v9;\n    if ( !v10 )\n      break;\n  }\n  return sub_408D60(a1, a2, a3, a4, v12, i);\n}\n"
        },
        {
            "funcName": "sub_4091C0",
            "funcStartAddr": "0x4091c0",
            "funcEndAddr": "0x40927c",
            "decompiledFuncCode": "__int64 __fastcall sub_4091C0(FILE *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, char a7)\n{\n  char *v7; // r10\n  unsigned int v8; // r8d\n  __int64 i; // r9\n  __int64 v10; // rax\n  __int64 v11; // rax\n  __int64 *v12; // rax\n  __int64 v13; // rax\n  __int64 v15[17]; // [rsp+20h] [rbp-88h] BYREF\n\n  v15[14] = a5;\n  v7 = &a7;\n  v8 = 32;\n  v15[15] = a6;\n  for ( i = 0LL; i != 10; ++i )\n  {\n    if ( v8 <= 0x2F )\n    {\n      v10 = v8;\n      v8 += 8;\n      v11 = *(__int64 *)((char *)&v15[10] + v10);\n      v15[i] = v11;\n      if ( !v11 )\n        return sub_408D60(a1, a2, a3, a4, v15, i);\n      continue;\n    }\n    v12 = (__int64 *)v7;\n    v7 += 8;\n    v13 = *v12;\n    v15[i] = v13;\n    if ( !v13 )\n      break;\n  }\n  return sub_408D60(a1, a2, a3, a4, v15, i);\n}\n"
        },
        {
            "funcName": "sub_409280",
            "funcStartAddr": "0x409280",
            "funcEndAddr": "0x4092f4",
            "decompiledFuncCode": "int sub_409280()\n{\n  char *v0; // rax\n  __int64 v1; // rcx\n  __int64 v2; // r8\n  char *v3; // rax\n  __int64 v4; // r8\n  FILE *v5; // rbx\n  char *v6; // rax\n\n  v0 = dcgettext(0LL, \"\\nReport bugs to: %s\\n\", 5);\n  __printf_chk(1LL, v0, \"bug-coreutils@gnu.org\", v1, v2);\n  v3 = dcgettext(0LL, \"%s home page: <%s>\\n\", 5);\n  __printf_chk(1LL, v3, &unk_40CEF3, \"https://www.gnu.org/software/coreutils/\", v4);\n  v5 = stdout;\n  v6 = dcgettext(0LL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5);\n  return fputs_unlocked(v6, v5);\n}\n"
        },
        {
            "funcName": "sub_409300",
            "funcStartAddr": "0x409300",
            "funcEndAddr": "0x40931a",
            "decompiledFuncCode": "void *__fastcall sub_409300(size_t a1, __int64 a2)\n{\n  void *result; // rax\n  __int64 v3; // rdx\n\n  result = malloc(a1);\n  if ( !result )\n  {\n    if ( a1 )\n      sub_409550(a1, a2, v3);\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_409350",
            "funcStartAddr": "0x409350",
            "funcEndAddr": "0x409352",
            "decompiledFuncCode": "// attributes: thunk\nvoid *__fastcall sub_409350(size_t a1, __int64 a2)\n{\n  return sub_409300(a1, a2);\n}\n"
        },
        {
            "funcName": "sub_409360",
            "funcStartAddr": "0x409360",
            "funcEndAddr": "0x409396",
            "decompiledFuncCode": "void *__fastcall sub_409360(void *a1, size_t a2)\n{\n  void *result; // rax\n  __int64 v3; // rdx\n\n  if ( !a2 && a1 )\n  {\n    free(a1);\n    return 0LL;\n  }\n  else\n  {\n    result = realloc(a1, a2);\n    if ( !result )\n    {\n      if ( a2 )\n        sub_409550(a1, a2, v3);\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_409460",
            "funcStartAddr": "0x409460",
            "funcEndAddr": "0x4094b0",
            "decompiledFuncCode": "void *__fastcall sub_409460(void *a1, size_t *a2, __int64 a3)\n{\n  size_t v3; // rax\n\n  v3 = *a2;\n  if ( a1 )\n  {\n    a3 = 0x5555555555555553LL;\n    if ( v3 <= 0x5555555555555553LL )\n    {\n      v3 += (v3 >> 1) + 1;\nLABEL_4:\n      *a2 = v3;\n      return sub_409360(a1, v3);\n    }\nLABEL_8:\n    sub_409550(a1, a2, a3);\n  }\n  if ( v3 )\n  {\n    if ( (v3 & 0x8000000000000000LL) == 0LL )\n      goto LABEL_4;\n    goto LABEL_8;\n  }\n  *a2 = 128LL;\n  return sub_409360(0LL, 0x80uLL);\n}\n"
        },
        {
            "funcName": "sub_4094B0",
            "funcStartAddr": "0x4094b0",
            "funcEndAddr": "0x4094c7",
            "decompiledFuncCode": "void *__fastcall sub_4094B0(size_t n, __int64 a2)\n{\n  void *v2; // rax\n\n  v2 = sub_409300(n, a2);\n  return memset(v2, 0, n);\n}\n"
        },
        {
            "funcName": "sub_4094D0",
            "funcStartAddr": "0x4094d0",
            "funcEndAddr": "0x4094fe",
            "decompiledFuncCode": "__int64 __fastcall sub_4094D0(unsigned __int64 a1, unsigned __int64 a2)\n{\n  unsigned __int128 v2; // rax\n\n  v2 = a2 * (unsigned __int128)a1;\n  BYTE8(v2) = *((_QWORD *)&v2 + 1) != 0LL;\n  if ( (v2 & 0x8000000000000000LL) != 0LL\n    || (*((_QWORD *)&v2 + 1) = BYTE8(v2), !is_mul_ok(a2, a1))\n    || (*(_QWORD *)&v2 = calloc(a1, a2), !(_QWORD)v2) )\n  {\n    sub_409550(a1, a2, *((_QWORD *)&v2 + 1));\n  }\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_409500",
            "funcStartAddr": "0x409500",
            "funcEndAddr": "0x409528",
            "decompiledFuncCode": "void *__fastcall sub_409500(void *src, size_t n)\n{\n  void *v2; // rax\n\n  v2 = sub_409300(n, n);\n  return memcpy(v2, src, n);\n}\n"
        },
        {
            "funcName": "sub_409530",
            "funcStartAddr": "0x409530",
            "funcEndAddr": "0x409543",
            "decompiledFuncCode": "void *__fastcall sub_409530(char *src)\n{\n  size_t v1; // rax\n\n  v1 = strlen(src);\n  return sub_409500(src, v1 + 1);\n}\n"
        },
        {
            "funcName": "sub_409550",
            "funcStartAddr": "0x409550",
            "funcEndAddr": "0x409581",
            "decompiledFuncCode": "void __noreturn sub_409550()\n{\n  char *v0; // rax\n\n  v0 = dcgettext(0LL, \"memory exhausted\", 5);\n  error(status, 0, \"%s\", v0);\n  abort();\n}\n"
        },
        {
            "funcName": "sub_409590",
            "funcStartAddr": "0x409590",
            "funcEndAddr": "0x409674",
            "decompiledFuncCode": "__int64 __fastcall sub_409590(char *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, int a7)\n{\n  int v10; // ebx\n  int v11; // eax\n  __int64 v12; // rbp\n  int *v13; // r14\n  _BYTE *v14; // rax\n  int v15; // esi\n  int v17; // ebp\n  int *v18; // rax\n  int v19; // eax\n  __int64 v20; // [rsp+8h] [rbp-40h]\n\n  v10 = a7;\n  v11 = sub_4096B0(a1);\n  if ( v11 )\n  {\n    v17 = v11;\n    v18 = __errno_location();\n    v13 = v18;\n    if ( v17 != 1 )\n    {\n      if ( v17 == 3 )\n        *v18 = 0;\n      goto LABEL_6;\n    }\n  }\n  else\n  {\n    v12 = v20;\n    if ( v20 >= a3 && v20 <= a4 )\n      return v12;\n    v13 = __errno_location();\n    if ( v20 <= 0x3FFFFFFF )\n    {\n      v19 = 34;\n      if ( v20 <= -1073741825 )\n        v19 = 75;\n      *v13 = v19;\n      goto LABEL_6;\n    }\n  }\n  *v13 = 75;\nLABEL_6:\n  v14 = sub_408D30((__int64)a1);\n  v15 = *v13;\n  if ( *v13 == 22 )\n    v15 = 0;\n  if ( !a7 )\n    v10 = 1;\n  error(v10, v15, \"%s: %s\", a6, v14);\n  return v20;\n}\n"
        },
        {
            "funcName": "sub_409680",
            "funcStartAddr": "0x409680",
            "funcEndAddr": "0x4096a1",
            "decompiledFuncCode": "__int64 __fastcall sub_409680(char *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, int a6)\n{\n  return sub_409590(a1, 10LL, a2, a3, a4, a5, a6);\n}\n"
        },
        {
            "funcName": "sub_4096B0",
            "funcStartAddr": "0x4096b0",
            "funcEndAddr": "0x409df2",
            "decompiledFuncCode": "__int64 __fastcall sub_4096B0(char *nptr, char **a2, unsigned int a3, __int64 *a4, const char *a5)\n{\n  char **p_endptr; // rbx\n  int *v8; // rax\n  int *v9; // r13\n  __int64 v10; // rax\n  char *v11; // r15\n  __int64 v12; // rbp\n  unsigned int v13; // r12d\n  int v14; // r13d\n  __int64 v16; // rsi\n  int v17; // eax\n  __int64 v18; // rax\n  char v19; // al\n  char *v20; // rsi\n  __int64 v21; // rcx\n  __int64 v22; // rax\n  __int64 v23; // rax\n  __int64 v24; // rdi\n  __int64 v25; // rcx\n  __int64 v26; // r9\n  int v27; // edi\n  int v28; // r10d\n  __int64 v29; // rcx\n  __int64 v30; // r9\n  int v31; // edi\n  __int64 v32; // rcx\n  __int64 v33; // r9\n  int v34; // edi\n  __int64 v35; // rcx\n  __int64 v36; // r9\n  int v37; // edi\n  __int64 v38; // rcx\n  __int64 v39; // r9\n  int v40; // edi\n  __int64 v41; // rcx\n  __int64 v42; // r9\n  int v43; // edi\n  char *endptr; // [rsp+18h] [rbp-40h] BYREF\n\n  if ( a3 > 0x24 )\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 0x60u, \"xstrtoimax\");\n  p_endptr = a2;\n  if ( !a2 )\n    p_endptr = &endptr;\n  v8 = __errno_location();\n  *v8 = 0;\n  v9 = v8;\n  v10 = __strtol_internal(nptr, p_endptr, a3, 0);\n  v11 = *p_endptr;\n  v12 = v10;\n  if ( *p_endptr == nptr )\n  {\n    if ( !a5 )\n      return 4;\n    v14 = (unsigned __int8)*v11;\n    v13 = 4;\n    if ( !(_BYTE)v14 )\n      return v13;\n    v12 = 1LL;\n    v13 = 0;\n    if ( !strchr(a5, (char)v14) )\n      return 4;\nLABEL_16:\n    if ( (unsigned __int8)(v14 - 69) > 0x2Fu\n      || (v18 = 0x814400308945LL, !_bittest64(&v18, (unsigned int)(v14 - 69)))\n      || !strchr(a5, 48) )\n    {\nLABEL_17:\n      LODWORD(v16) = 1;\n      v17 = 1024;\n      goto LABEL_18;\n    }\n    v19 = v11[1];\n    if ( v19 != 68 )\n    {\n      if ( v19 == 105 )\n      {\n        v17 = 1024;\n        LODWORD(v16) = 2 * (v11[2] == 66) + 1;\nLABEL_18:\n        switch ( (char)v14 )\n        {\n          case 'B':\n            v16 = (int)v16;\n            if ( v12 < (__int64)0xFFE0000000000000LL )\n              goto LABEL_46;\n            if ( v12 > 0x1FFFFFFFFFFFFFLL )\n              goto LABEL_105;\n            v12 <<= 10;\n            break;\n          case 'E':\n            v32 = v17;\n            v16 = (int)v16;\n            v33 = (__int64)0x8000000000000000LL / v17;\n            goto LABEL_67;\n          case 'G':\n          case 'g':\n            v35 = v17;\n            v16 = (int)v16;\n            v36 = (__int64)0x8000000000000000LL / v17;\n            goto LABEL_74;\n          case 'K':\n          case 'k':\n            v21 = v17;\n            v16 = (int)v16;\n            v22 = (__int64)0x8000000000000000LL / v17;\n            goto LABEL_38;\n          case 'M':\n          case 'm':\n            v21 = v17;\n            v16 = (int)v16;\n            v24 = (__int64)0x8000000000000000LL / v17;\n            goto LABEL_43;\n          case 'P':\n            v25 = v17;\n            v16 = (int)v16;\n            v26 = (__int64)0x8000000000000000LL / v17;\n            goto LABEL_53;\n          case 'T':\n          case 't':\n            v29 = v17;\n            v16 = (int)v16;\n            v30 = (__int64)0x8000000000000000LL / v17;\n            goto LABEL_60;\n          case 'Y':\n            v38 = v17;\n            v16 = (int)v16;\n            v39 = (__int64)0x8000000000000000LL / v17;\n            goto LABEL_81;\n          case 'Z':\n            v41 = v17;\n            v16 = (int)v16;\n            v42 = (__int64)0x8000000000000000LL / v17;\n            goto LABEL_88;\n          case 'b':\n            v16 = (int)v16;\n            goto LABEL_48;\n          case 'c':\n            v16 = (int)v16;\n            break;\n          case 'w':\n            v16 = (int)v16;\n            if ( v12 < (__int64)0xC000000000000000LL )\n              goto LABEL_46;\n            if ( v12 > 0x3FFFFFFFFFFFFFFFLL )\n              goto LABEL_105;\n            v12 *= 2LL;\n            break;\n          default:\n            goto LABEL_27;\n        }\nLABEL_31:\n        v20 = &v11[v16];\n        *p_endptr = v20;\n        if ( *v20 )\n          v13 |= 2u;\n        goto LABEL_9;\n      }\n      if ( v19 != 66 )\n      {\n        switch ( (char)v14 )\n        {\n          case 'E':\n            v16 = 1LL;\n            v32 = 1024LL;\n            v33 = 0xFFE0000000000000LL;\nLABEL_67:\n            v34 = 6;\n            v28 = 0;\n            do\n            {\n              if ( v12 >= v33 )\n              {\n                if ( 0x7FFFFFFFFFFFFFFFLL / v32 < v12 )\n                {\n                  v12 = 0x7FFFFFFFFFFFFFFFLL;\n                  v28 = 1;\n                }\n                else\n                {\n                  v12 *= v32;\n                }\n              }\n              else\n              {\n                v12 = 0x8000000000000000LL;\n                v28 = 1;\n              }\n              --v34;\n            }\n            while ( v34 );\n            goto LABEL_104;\n          case 'F':\n          case 'H':\n          case 'I':\n          case 'J':\n          case 'L':\n          case 'N':\n          case 'O':\n          case 'Q':\n          case 'R':\n          case 'S':\n          case 'U':\n          case 'V':\n          case 'W':\n          case 'X':\n          case '[':\n          case '\\\\':\n          case ']':\n          case '^':\n          case '_':\n          case '`':\n          case 'a':\n          case 'd':\n          case 'e':\n          case 'f':\n          case 'h':\n          case 'i':\n          case 'j':\n          case 'l':\n          case 'n':\n          case 'o':\n          case 'p':\n          case 'q':\n          case 'r':\n          case 's':\n            goto LABEL_27;\n          case 'G':\n          case 'g':\n            v16 = 1LL;\n            v35 = 1024LL;\n            v36 = 0xFFE0000000000000LL;\nLABEL_74:\n            v37 = 3;\n            v28 = 0;\n            do\n            {\n              if ( v12 >= v36 )\n              {\n                if ( 0x7FFFFFFFFFFFFFFFLL / v35 < v12 )\n                {\n                  v12 = 0x7FFFFFFFFFFFFFFFLL;\n                  v28 = 1;\n                }\n                else\n                {\n                  v12 *= v35;\n                }\n              }\n              else\n              {\n                v12 = 0x8000000000000000LL;\n                v28 = 1;\n              }\n              --v37;\n            }\n            while ( v37 );\n            goto LABEL_104;\n          case 'K':\n          case 'k':\n            v16 = 1LL;\n            v21 = 1024LL;\n            v22 = 0xFFE0000000000000LL;\nLABEL_38:\n            if ( v12 < v22 )\n              goto LABEL_46;\n            v23 = 0x7FFFFFFFFFFFFFFFLL / v21;\n            goto LABEL_40;\n          case 'M':\n          case 'm':\n            v16 = 1LL;\n            v21 = 1024LL;\n            v24 = 0xFFE0000000000000LL;\nLABEL_43:\n            if ( v12 < v24 )\n              goto LABEL_46;\n            v23 = 0x7FFFFFFFFFFFFFFFLL / v21;\n            if ( v12 > 0x7FFFFFFFFFFFFFFFLL / v21 )\n              goto LABEL_105;\n            v12 *= v21;\n            if ( v12 >= v24 )\n            {\nLABEL_40:\n              if ( v23 < v12 )\n              {\nLABEL_105:\n                v12 = 0x7FFFFFFFFFFFFFFFLL;\n                v13 = 1;\n              }\n              else\n              {\n                v12 *= v21;\n              }\n            }\n            else\n            {\nLABEL_46:\n              v12 = 0x8000000000000000LL;\n              v13 = 1;\n            }\n            break;\n          case 'P':\n            v16 = 1LL;\n            v25 = 1024LL;\n            v26 = 0xFFE0000000000000LL;\nLABEL_53:\n            v27 = 5;\n            v28 = 0;\n            do\n            {\n              if ( v26 <= v12 )\n              {\n                if ( 0x7FFFFFFFFFFFFFFFLL / v25 < v12 )\n                {\n                  v12 = 0x7FFFFFFFFFFFFFFFLL;\n                  v28 = 1;\n                }\n                else\n                {\n                  v12 *= v25;\n                }\n              }\n              else\n              {\n                v12 = 0x8000000000000000LL;\n                v28 = 1;\n              }\n              --v27;\n            }\n            while ( v27 );\n            goto LABEL_104;\n          case 'T':\n          case 't':\n            v16 = 1LL;\n            v29 = 1024LL;\n            v30 = 0xFFE0000000000000LL;\nLABEL_60:\n            v31 = 4;\n            v28 = 0;\n            do\n            {\n              if ( v30 <= v12 )\n              {\n                if ( 0x7FFFFFFFFFFFFFFFLL / v29 < v12 )\n                {\n                  v12 = 0x7FFFFFFFFFFFFFFFLL;\n                  v28 = 1;\n                }\n                else\n                {\n                  v12 *= v29;\n                }\n              }\n              else\n              {\n                v12 = 0x8000000000000000LL;\n                v28 = 1;\n              }\n              --v31;\n            }\n            while ( v31 );\n            goto LABEL_104;\n          case 'Y':\n            v16 = 1LL;\n            v38 = 1024LL;\n            v39 = 0xFFE0000000000000LL;\nLABEL_81:\n            v40 = 8;\n            v28 = 0;\n            do\n            {\n              if ( v39 <= v12 )\n              {\n                if ( 0x7FFFFFFFFFFFFFFFLL / v38 < v12 )\n                {\n                  v12 = 0x7FFFFFFFFFFFFFFFLL;\n                  v28 = 1;\n                }\n                else\n                {\n                  v12 *= v38;\n                }\n              }\n              else\n              {\n                v12 = 0x8000000000000000LL;\n                v28 = 1;\n              }\n              --v40;\n            }\n            while ( v40 );\n            goto LABEL_104;\n          case 'Z':\n            v16 = 1LL;\n            v41 = 1024LL;\n            v42 = 0xFFE0000000000000LL;\nLABEL_88:\n            v43 = 7;\n            v28 = 0;\n            do\n            {\n              if ( v42 <= v12 )\n              {\n                if ( 0x7FFFFFFFFFFFFFFFLL / v41 < v12 )\n                {\n                  v12 = 0x7FFFFFFFFFFFFFFFLL;\n                  v28 = 1;\n                }\n                else\n                {\n                  v12 *= v41;\n                }\n              }\n              else\n              {\n                v12 = 0x8000000000000000LL;\n                v28 = 1;\n              }\n              --v43;\n            }\n            while ( v43 );\nLABEL_104:\n            v13 |= v28;\n            goto LABEL_31;\n          case 'b':\n            v16 = 1LL;\nLABEL_48:\n            if ( v12 < (__int64)0xFFC0000000000000LL )\n              goto LABEL_46;\n            if ( v12 > 0x3FFFFFFFFFFFFFLL )\n              goto LABEL_105;\n            v12 <<= 9;\n            break;\n          case 'c':\n            v16 = 1LL;\n            goto LABEL_31;\n          default:\n            goto LABEL_17;\n        }\n        goto LABEL_31;\n      }\n    }\n    LODWORD(v16) = 2;\n    v17 = 1000;\n    goto LABEL_18;\n  }\n  if ( *v9 )\n  {\n    v13 = 4;\n    if ( *v9 != 34 )\n      return v13;\n    v13 = 1;\n  }\n  else\n  {\n    v13 = 0;\n  }\n  if ( a5 )\n  {\n    v14 = (unsigned __int8)*v11;\n    if ( (_BYTE)v14 )\n    {\n      if ( !strchr(a5, (char)v14) )\n      {\nLABEL_27:\n        v13 |= 2u;\n        *a4 = v12;\n        return v13;\n      }\n      goto LABEL_16;\n    }\n  }\nLABEL_9:\n  *a4 = v12;\n  return v13;\n}\n"
        },
        {
            "funcName": "sub_409E00",
            "funcStartAddr": "0x409e00",
            "funcEndAddr": "0x40a542",
            "decompiledFuncCode": "__int64 __fastcall sub_409E00(char *nptr, char **a2, unsigned int a3, __int64 *a4, const char *a5)\n{\n  char **p_endptr; // rbx\n  int *v8; // rax\n  int *v9; // r13\n  __int64 v10; // rax\n  char *v11; // r15\n  __int64 v12; // rbp\n  unsigned int v13; // r12d\n  int v14; // r13d\n  __int64 v16; // rsi\n  int v17; // eax\n  __int64 v18; // rax\n  char v19; // al\n  char *v20; // rsi\n  __int64 v21; // rcx\n  __int64 v22; // rax\n  __int64 v23; // rax\n  __int64 v24; // rdi\n  __int64 v25; // rcx\n  __int64 v26; // r9\n  int v27; // edi\n  int v28; // r10d\n  __int64 v29; // rcx\n  __int64 v30; // r9\n  int v31; // edi\n  __int64 v32; // rcx\n  __int64 v33; // r9\n  int v34; // edi\n  __int64 v35; // rcx\n  __int64 v36; // r9\n  int v37; // edi\n  __int64 v38; // rcx\n  __int64 v39; // r9\n  int v40; // edi\n  __int64 v41; // rcx\n  __int64 v42; // r9\n  int v43; // edi\n  char *endptr; // [rsp+18h] [rbp-40h] BYREF\n\n  if ( a3 > 0x24 )\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 0x60u, \"xstrtol\");\n  p_endptr = a2;\n  if ( !a2 )\n    p_endptr = &endptr;\n  v8 = __errno_location();\n  *v8 = 0;\n  v9 = v8;\n  v10 = strtol(nptr, p_endptr, a3);\n  v11 = *p_endptr;\n  v12 = v10;\n  if ( *p_endptr == nptr )\n  {\n    if ( !a5 )\n      return 4;\n    v14 = (unsigned __int8)*v11;\n    v13 = 4;\n    if ( !(_BYTE)v14 )\n      return v13;\n    v12 = 1LL;\n    v13 = 0;\n    if ( !strchr(a5, (char)v14) )\n      return 4;\nLABEL_16:\n    if ( (unsigned __int8)(v14 - 69) > 0x2Fu\n      || (v18 = 0x814400308945LL, !_bittest64(&v18, (unsigned int)(v14 - 69)))\n      || !strchr(a5, 48) )\n    {\nLABEL_17:\n      LODWORD(v16) = 1;\n      v17 = 1024;\n      goto LABEL_18;\n    }\n    v19 = v11[1];\n    if ( v19 != 68 )\n    {\n      if ( v19 == 105 )\n      {\n        v17 = 1024;\n        LODWORD(v16) = 2 * (v11[2] == 66) + 1;\nLABEL_18:\n        switch ( (char)v14 )\n        {\n          case 'B':\n            v16 = (int)v16;\n            if ( v12 < (__int64)0xFFE0000000000000LL )\n              goto LABEL_46;\n            if ( v12 > 0x1FFFFFFFFFFFFFLL )\n              goto LABEL_105;\n            v12 <<= 10;\n            break;\n          case 'E':\n            v32 = v17;\n            v16 = (int)v16;\n            v33 = (__int64)0x8000000000000000LL / v17;\n            goto LABEL_67;\n          case 'G':\n          case 'g':\n            v35 = v17;\n            v16 = (int)v16;\n            v36 = (__int64)0x8000000000000000LL / v17;\n            goto LABEL_74;\n          case 'K':\n          case 'k':\n            v21 = v17;\n            v16 = (int)v16;\n            v22 = (__int64)0x8000000000000000LL / v17;\n            goto LABEL_38;\n          case 'M':\n          case 'm':\n            v21 = v17;\n            v16 = (int)v16;\n            v24 = (__int64)0x8000000000000000LL / v17;\n            goto LABEL_43;\n          case 'P':\n            v25 = v17;\n            v16 = (int)v16;\n            v26 = (__int64)0x8000000000000000LL / v17;\n            goto LABEL_53;\n          case 'T':\n          case 't':\n            v29 = v17;\n            v16 = (int)v16;\n            v30 = (__int64)0x8000000000000000LL / v17;\n            goto LABEL_60;\n          case 'Y':\n            v38 = v17;\n            v16 = (int)v16;\n            v39 = (__int64)0x8000000000000000LL / v17;\n            goto LABEL_81;\n          case 'Z':\n            v41 = v17;\n            v16 = (int)v16;\n            v42 = (__int64)0x8000000000000000LL / v17;\n            goto LABEL_88;\n          case 'b':\n            v16 = (int)v16;\n            goto LABEL_48;\n          case 'c':\n            v16 = (int)v16;\n            break;\n          case 'w':\n            v16 = (int)v16;\n            if ( v12 < (__int64)0xC000000000000000LL )\n              goto LABEL_46;\n            if ( v12 > 0x3FFFFFFFFFFFFFFFLL )\n              goto LABEL_105;\n            v12 *= 2LL;\n            break;\n          default:\n            goto LABEL_27;\n        }\nLABEL_31:\n        v20 = &v11[v16];\n        *p_endptr = v20;\n        if ( *v20 )\n          v13 |= 2u;\n        goto LABEL_9;\n      }\n      if ( v19 != 66 )\n      {\n        switch ( (char)v14 )\n        {\n          case 'E':\n            v16 = 1LL;\n            v32 = 1024LL;\n            v33 = 0xFFE0000000000000LL;\nLABEL_67:\n            v34 = 6;\n            v28 = 0;\n            do\n            {\n              if ( v12 >= v33 )\n              {\n                if ( 0x7FFFFFFFFFFFFFFFLL / v32 < v12 )\n                {\n                  v12 = 0x7FFFFFFFFFFFFFFFLL;\n                  v28 = 1;\n                }\n                else\n                {\n                  v12 *= v32;\n                }\n              }\n              else\n              {\n                v12 = 0x8000000000000000LL;\n                v28 = 1;\n              }\n              --v34;\n            }\n            while ( v34 );\n            goto LABEL_104;\n          case 'F':\n          case 'H':\n          case 'I':\n          case 'J':\n          case 'L':\n          case 'N':\n          case 'O':\n          case 'Q':\n          case 'R':\n          case 'S':\n          case 'U':\n          case 'V':\n          case 'W':\n          case 'X':\n          case '[':\n          case '\\\\':\n          case ']':\n          case '^':\n          case '_':\n          case '`':\n          case 'a':\n          case 'd':\n          case 'e':\n          case 'f':\n          case 'h':\n          case 'i':\n          case 'j':\n          case 'l':\n          case 'n':\n          case 'o':\n          case 'p':\n          case 'q':\n          case 'r':\n          case 's':\n            goto LABEL_27;\n          case 'G':\n          case 'g':\n            v16 = 1LL;\n            v35 = 1024LL;\n            v36 = 0xFFE0000000000000LL;\nLABEL_74:\n            v37 = 3;\n            v28 = 0;\n            do\n            {\n              if ( v12 >= v36 )\n              {\n                if ( 0x7FFFFFFFFFFFFFFFLL / v35 < v12 )\n                {\n                  v12 = 0x7FFFFFFFFFFFFFFFLL;\n                  v28 = 1;\n                }\n                else\n                {\n                  v12 *= v35;\n                }\n              }\n              else\n              {\n                v12 = 0x8000000000000000LL;\n                v28 = 1;\n              }\n              --v37;\n            }\n            while ( v37 );\n            goto LABEL_104;\n          case 'K':\n          case 'k':\n            v16 = 1LL;\n            v21 = 1024LL;\n            v22 = 0xFFE0000000000000LL;\nLABEL_38:\n            if ( v12 < v22 )\n              goto LABEL_46;\n            v23 = 0x7FFFFFFFFFFFFFFFLL / v21;\n            goto LABEL_40;\n          case 'M':\n          case 'm':\n            v16 = 1LL;\n            v21 = 1024LL;\n            v24 = 0xFFE0000000000000LL;\nLABEL_43:\n            if ( v12 < v24 )\n              goto LABEL_46;\n            v23 = 0x7FFFFFFFFFFFFFFFLL / v21;\n            if ( v12 > 0x7FFFFFFFFFFFFFFFLL / v21 )\n              goto LABEL_105;\n            v12 *= v21;\n            if ( v12 >= v24 )\n            {\nLABEL_40:\n              if ( v23 < v12 )\n              {\nLABEL_105:\n                v12 = 0x7FFFFFFFFFFFFFFFLL;\n                v13 = 1;\n              }\n              else\n              {\n                v12 *= v21;\n              }\n            }\n            else\n            {\nLABEL_46:\n              v12 = 0x8000000000000000LL;\n              v13 = 1;\n            }\n            break;\n          case 'P':\n            v16 = 1LL;\n            v25 = 1024LL;\n            v26 = 0xFFE0000000000000LL;\nLABEL_53:\n            v27 = 5;\n            v28 = 0;\n            do\n            {\n              if ( v26 <= v12 )\n              {\n                if ( 0x7FFFFFFFFFFFFFFFLL / v25 < v12 )\n                {\n                  v12 = 0x7FFFFFFFFFFFFFFFLL;\n                  v28 = 1;\n                }\n                else\n                {\n                  v12 *= v25;\n                }\n              }\n              else\n              {\n                v12 = 0x8000000000000000LL;\n                v28 = 1;\n              }\n              --v27;\n            }\n            while ( v27 );\n            goto LABEL_104;\n          case 'T':\n          case 't':\n            v16 = 1LL;\n            v29 = 1024LL;\n            v30 = 0xFFE0000000000000LL;\nLABEL_60:\n            v31 = 4;\n            v28 = 0;\n            do\n            {\n              if ( v30 <= v12 )\n              {\n                if ( 0x7FFFFFFFFFFFFFFFLL / v29 < v12 )\n                {\n                  v12 = 0x7FFFFFFFFFFFFFFFLL;\n                  v28 = 1;\n                }\n                else\n                {\n                  v12 *= v29;\n                }\n              }\n              else\n              {\n                v12 = 0x8000000000000000LL;\n                v28 = 1;\n              }\n              --v31;\n            }\n            while ( v31 );\n            goto LABEL_104;\n          case 'Y':\n            v16 = 1LL;\n            v38 = 1024LL;\n            v39 = 0xFFE0000000000000LL;\nLABEL_81:\n            v40 = 8;\n            v28 = 0;\n            do\n            {\n              if ( v39 <= v12 )\n              {\n                if ( 0x7FFFFFFFFFFFFFFFLL / v38 < v12 )\n                {\n                  v12 = 0x7FFFFFFFFFFFFFFFLL;\n                  v28 = 1;\n                }\n                else\n                {\n                  v12 *= v38;\n                }\n              }\n              else\n              {\n                v12 = 0x8000000000000000LL;\n                v28 = 1;\n              }\n              --v40;\n            }\n            while ( v40 );\n            goto LABEL_104;\n          case 'Z':\n            v16 = 1LL;\n            v41 = 1024LL;\n            v42 = 0xFFE0000000000000LL;\nLABEL_88:\n            v43 = 7;\n            v28 = 0;\n            do\n            {\n              if ( v42 <= v12 )\n              {\n                if ( 0x7FFFFFFFFFFFFFFFLL / v41 < v12 )\n                {\n                  v12 = 0x7FFFFFFFFFFFFFFFLL;\n                  v28 = 1;\n                }\n                else\n                {\n                  v12 *= v41;\n                }\n              }\n              else\n              {\n                v12 = 0x8000000000000000LL;\n                v28 = 1;\n              }\n              --v43;\n            }\n            while ( v43 );\nLABEL_104:\n            v13 |= v28;\n            goto LABEL_31;\n          case 'b':\n            v16 = 1LL;\nLABEL_48:\n            if ( v12 < (__int64)0xFFC0000000000000LL )\n              goto LABEL_46;\n            if ( v12 > 0x3FFFFFFFFFFFFFLL )\n              goto LABEL_105;\n            v12 <<= 9;\n            break;\n          case 'c':\n            v16 = 1LL;\n            goto LABEL_31;\n          default:\n            goto LABEL_17;\n        }\n        goto LABEL_31;\n      }\n    }\n    LODWORD(v16) = 2;\n    v17 = 1000;\n    goto LABEL_18;\n  }\n  if ( *v9 )\n  {\n    v13 = 4;\n    if ( *v9 != 34 )\n      return v13;\n    v13 = 1;\n  }\n  else\n  {\n    v13 = 0;\n  }\n  if ( a5 )\n  {\n    v14 = (unsigned __int8)*v11;\n    if ( (_BYTE)v14 )\n    {\n      if ( !strchr(a5, (char)v14) )\n      {\nLABEL_27:\n        v13 |= 2u;\n        *a4 = v12;\n        return v13;\n      }\n      goto LABEL_16;\n    }\n  }\nLABEL_9:\n  *a4 = v12;\n  return v13;\n}\n"
        },
        {
            "funcName": "sub_40A550",
            "funcStartAddr": "0x401d2e",
            "funcEndAddr": "0x401d33",
            "decompiledFuncCode": "void __fastcall __noreturn sub_40A550(int a1, int a2, char a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // rdi\n  int v6; // ebx\n  const char *v9; // rsi\n  char *v10; // r12\n  char *v11; // r13\n  char *v12; // rax\n  char v13[42]; // [rsp+Eh] [rbp-2Ah] BYREF\n\n  v5 = (unsigned int)(a1 - 1);\n  v6 = status;\n  if ( (unsigned int)v5 <= 3 )\n  {\n    v9 = (&off_410BE0)[v5];\n    if ( a2 < 0 )\n    {\n      v13[0] = a3;\n      v11 = v13;\n      v10 = &asc_410B70[-a2];\n      v13[1] = 0;\n    }\n    else\n    {\n      v10 = \"--\";\n      v11 = *(char **)(a4 + 32LL * a2);\n    }\n    v12 = dcgettext(0LL, v9, 5);\n    error(v6, 0, v12, v10, v11, a5);\n    abort();\n  }\n  abort();\n}\n\nvoid __fastcall __noreturn sub_40A550(int a1, int a2, char a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // rdi\n  int v6; // ebx\n  const char *v9; // rsi\n  char *v10; // r12\n  char *v11; // r13\n  char *v12; // rax\n  char v13[42]; // [rsp+Eh] [rbp-2Ah] BYREF\n\n  v5 = (unsigned int)(a1 - 1);\n  v6 = status;\n  if ( (unsigned int)v5 <= 3 )\n  {\n    v9 = (&off_410BE0)[v5];\n    if ( a2 < 0 )\n    {\n      v13[0] = a3;\n      v11 = v13;\n      v10 = &asc_410B70[-a2];\n      v13[1] = 0;\n    }\n    else\n    {\n      v10 = \"--\";\n      v11 = *(char **)(a4 + 32LL * a2);\n    }\n    v12 = dcgettext(0LL, v9, 5);\n    error(v6, 0, v12, v10, v11, a5);\n    abort();\n  }\n  abort();\n}\n"
        },
        {
            "funcName": "sub_40A550",
            "funcStartAddr": "0x401d2e",
            "funcEndAddr": "0x401d33",
            "decompiledFuncCode": "void __fastcall __noreturn sub_40A550(int a1, int a2, char a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // rdi\n  int v6; // ebx\n  const char *v9; // rsi\n  char *v10; // r12\n  char *v11; // r13\n  char *v12; // rax\n  char v13[42]; // [rsp+Eh] [rbp-2Ah] BYREF\n\n  v5 = (unsigned int)(a1 - 1);\n  v6 = status;\n  if ( (unsigned int)v5 <= 3 )\n  {\n    v9 = (&off_410BE0)[v5];\n    if ( a2 < 0 )\n    {\n      v13[0] = a3;\n      v11 = v13;\n      v10 = &asc_410B70[-a2];\n      v13[1] = 0;\n    }\n    else\n    {\n      v10 = \"--\";\n      v11 = *(char **)(a4 + 32LL * a2);\n    }\n    v12 = dcgettext(0LL, v9, 5);\n    error(v6, 0, v12, v10, v11, a5);\n    abort();\n  }\n  abort();\n}\n\nvoid __fastcall __noreturn sub_40A550(int a1, int a2, char a3, __int64 a4, __int64 a5)\n{\n  __int64 v5; // rdi\n  int v6; // ebx\n  const char *v9; // rsi\n  char *v10; // r12\n  char *v11; // r13\n  char *v12; // rax\n  char v13[42]; // [rsp+Eh] [rbp-2Ah] BYREF\n\n  v5 = (unsigned int)(a1 - 1);\n  v6 = status;\n  if ( (unsigned int)v5 <= 3 )\n  {\n    v9 = (&off_410BE0)[v5];\n    if ( a2 < 0 )\n    {\n      v13[0] = a3;\n      v11 = v13;\n      v10 = &asc_410B70[-a2];\n      v13[1] = 0;\n    }\n    else\n    {\n      v10 = \"--\";\n      v11 = *(char **)(a4 + 32LL * a2);\n    }\n    v12 = dcgettext(0LL, v9, 5);\n    error(v6, 0, v12, v10, v11, a5);\n    abort();\n  }\n  abort();\n}\n"
        },
        {
            "funcName": "sub_40A5E0",
            "funcStartAddr": "0x40a5e0",
            "funcEndAddr": "0x40aa14",
            "decompiledFuncCode": "__int64 __fastcall sub_40A5E0(char *nptr, char **a2, unsigned int a3, __int64 *a4, const char *a5)\n{\n  char **p_endptr; // r15\n  int *v8; // rax\n  int *v9; // r12\n  unsigned __int8 v10; // bl\n  const unsigned __int16 *v11; // rsi\n  char *v12; // rax\n  __int64 v13; // rbx\n  unsigned int v14; // ebp\n  int v15; // r12d\n  char *v17; // rax\n  char *v18; // r8\n  __int64 v19; // rax\n  char *v20; // rax\n  char v21; // al\n  int v22; // esi\n  unsigned __int64 v23; // rdx\n  char *v24; // r8\n  unsigned __int64 v25; // kr30_8\n  char *v26; // rax\n  int v27; // edi\n  int v28; // r9d\n  bool v29; // of\n  int v30; // edi\n  int v31; // edi\n  int v32; // edi\n  int v33; // edi\n  char *basea; // [rsp+0h] [rbp-58h]\n  char *baseb; // [rsp+0h] [rbp-58h]\n  char *v37; // [rsp+8h] [rbp-50h]\n  char *endptr; // [rsp+18h] [rbp-40h] BYREF\n\n  if ( a3 > 0x24 )\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 0x60u, \"xstrtoumax\");\n  p_endptr = a2;\n  if ( !a2 )\n    p_endptr = &endptr;\n  v8 = __errno_location();\n  *v8 = 0;\n  v9 = v8;\n  v10 = *nptr;\n  v11 = *__ctype_b_loc();\n  v12 = nptr;\n  while ( (v11[v10] & 0x2000) != 0 )\n    v10 = *++v12;\n  if ( v10 == 45 )\n    return 4;\n  v13 = __strtoul_internal(nptr, p_endptr, a3, 0);\n  if ( *p_endptr == nptr )\n  {\n    basea = *p_endptr;\n    if ( a5 )\n    {\n      v15 = (unsigned __int8)*nptr;\n      if ( (_BYTE)v15 )\n      {\n        v14 = 0;\n        v13 = 1LL;\n        v17 = strchr(a5, (char)v15);\n        v18 = basea;\n        if ( v17 )\n          goto LABEL_20;\n      }\n    }\n    return 4;\n  }\n  if ( *v9 )\n  {\n    v14 = 1;\n    if ( *v9 == 34 )\n      goto LABEL_11;\n    return 4;\n  }\n  v14 = 0;\nLABEL_11:\n  if ( a5 )\n  {\n    v15 = (unsigned __int8)**p_endptr;\n    if ( (_BYTE)v15 )\n    {\n      baseb = *p_endptr;\n      v26 = strchr(a5, (char)v15);\n      v18 = baseb;\n      if ( !v26 )\n      {\nLABEL_40:\n        *a4 = v13;\n        v14 |= 2u;\n        return v14;\n      }\nLABEL_20:\n      if ( (unsigned __int8)(v15 - 69) > 0x2Fu\n        || (v19 = 0x814400308945LL, !_bittest64(&v19, (unsigned int)(v15 - 69)))\n        || (v37 = v18, v20 = strchr(a5, 48), v18 = v37, !v20) )\n      {\nLABEL_27:\n        v22 = 1;\n        v23 = 1024LL;\n        goto LABEL_28;\n      }\n      v21 = v37[1];\n      if ( v21 != 68 )\n      {\n        if ( v21 == 105 )\n        {\n          v23 = 1024LL;\n          v22 = 2 * (v37[2] == 66) + 1;\nLABEL_28:\n          switch ( (char)v15 )\n          {\n            case 'B':\n              if ( (unsigned __int64)v13 >> 54 )\n                goto LABEL_38;\n              v13 <<= 10;\n              break;\n            case 'E':\n              goto LABEL_71;\n            case 'G':\n            case 'g':\n              goto LABEL_77;\n            case 'K':\n            case 'k':\n              goto LABEL_37;\n            case 'M':\n            case 'm':\n              goto LABEL_30;\n            case 'P':\n              goto LABEL_65;\n            case 'T':\n            case 't':\n              goto LABEL_59;\n            case 'Y':\n              goto LABEL_53;\n            case 'Z':\n              goto LABEL_47;\n            case 'b':\n              goto LABEL_44;\n            case 'c':\n              break;\n            case 'w':\n              if ( v13 < 0 )\n                goto LABEL_38;\n              v13 *= 2LL;\n              break;\n            default:\n              goto LABEL_40;\n          }\nLABEL_33:\n          v24 = &v18[v22];\n          *p_endptr = v24;\n          if ( *v24 )\n            v14 |= 2u;\n          goto LABEL_13;\n        }\n        if ( v21 != 66 )\n        {\n          switch ( (char)v15 )\n          {\n            case 'E':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_71:\n              v33 = 6;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v33;\n              }\n              while ( v33 );\n              goto LABEL_51;\n            case 'F':\n            case 'H':\n            case 'I':\n            case 'J':\n            case 'L':\n            case 'N':\n            case 'O':\n            case 'Q':\n            case 'R':\n            case 'S':\n            case 'U':\n            case 'V':\n            case 'W':\n            case 'X':\n            case '[':\n            case '\\\\':\n            case ']':\n            case '^':\n            case '_':\n            case '`':\n            case 'a':\n            case 'd':\n            case 'e':\n            case 'f':\n            case 'h':\n            case 'i':\n            case 'j':\n            case 'l':\n            case 'n':\n            case 'o':\n            case 'p':\n            case 'q':\n            case 'r':\n            case 's':\n              goto LABEL_40;\n            case 'G':\n            case 'g':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_77:\n              if ( is_mul_ok((int)v23, v13)\n                && is_mul_ok((int)v23, (int)v23 * v13)\n                && is_mul_ok((int)v23, (int)v23 * (int)v23 * v13) )\n              {\n                v13 *= (int)v23 * (int)v23 * (__int64)(int)v23;\n              }\n              else\n              {\n                v13 = -1LL;\n                v14 |= 1u;\n              }\n              goto LABEL_33;\n            case 'K':\n            case 'k':\n              v22 = 1;\n              v23 = 1024LL;\nLABEL_37:\n              v25 = v13;\n              v13 *= v23;\n              if ( is_mul_ok(v23, v25) )\n                goto LABEL_33;\n              goto LABEL_38;\n            case 'M':\n            case 'm':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_30:\n              if ( !is_mul_ok((int)v23, v13) || !is_mul_ok((int)v23, (int)v23 * v13) )\n                goto LABEL_38;\n              v13 *= (int)v23 * (__int64)(int)v23;\n              break;\n            case 'P':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_65:\n              v32 = 5;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v32;\n              }\n              while ( v32 );\n              goto LABEL_51;\n            case 'T':\n            case 't':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_59:\n              v31 = 4;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v31;\n              }\n              while ( v31 );\n              goto LABEL_51;\n            case 'Y':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_53:\n              v30 = 8;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v30;\n              }\n              while ( v30 );\n              goto LABEL_51;\n            case 'Z':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_47:\n              v27 = 7;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v27;\n              }\n              while ( v27 );\nLABEL_51:\n              v14 |= v28;\n              break;\n            case 'b':\n              v22 = 1;\nLABEL_44:\n              if ( (unsigned __int64)v13 >> 55 )\n              {\nLABEL_38:\n                v14 = 1;\n                v13 = -1LL;\n              }\n              else\n              {\n                v13 <<= 9;\n              }\n              break;\n            case 'c':\n              v22 = 1;\n              goto LABEL_33;\n            default:\n              goto LABEL_27;\n          }\n          goto LABEL_33;\n        }\n      }\n      v22 = 2;\n      v23 = 1000LL;\n      goto LABEL_28;\n    }\n  }\nLABEL_13:\n  *a4 = v13;\n  return v14;\n}\n"
        },
        {
            "funcName": "sub_40AA20",
            "funcStartAddr": "0x40aa20",
            "funcEndAddr": "0x40aa9b",
            "decompiledFuncCode": "int __fastcall sub_40AA20(FILE *stream)\n{\n  int *v1; // rax\n  int v2; // r12d\n  int *v3; // rbp\n  int result; // eax\n  int v5; // eax\n\n  if ( fileno(stream) < 0 )\n    return fclose(stream);\n  if ( __freading(stream) )\n  {\n    v5 = fileno(stream);\n    if ( lseek(v5, 0LL, 1) == -1 )\n      return fclose(stream);\n  }\n  if ( !(unsigned int)sub_40ABE0(stream) )\n    return fclose(stream);\n  v1 = __errno_location();\n  v2 = *v1;\n  v3 = v1;\n  result = fclose(stream);\n  if ( v2 )\n  {\n    *v3 = v2;\n    return -1;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40AAA0",
            "funcStartAddr": "0x40aaa0",
            "funcEndAddr": "0x40abd5",
            "decompiledFuncCode": "__int64 __fastcall sub_40AAA0(int a1, int a2, __int64 a3, int a4, int a5, int a6)\n{\n  int v6; // ebx\n  int v8; // eax\n  int *v9; // rax\n  int v10; // edi\n  int v11; // r12d\n  int *v12; // rbp\n  int v13; // ecx\n  int v14; // r8d\n  int v15; // r9d\n  int v16; // [rsp+30h] [rbp-38h]\n\n  v16 = a3;\n  if ( a2 == 1030 )\n  {\n    if ( dword_6145D8 < 0 )\n    {\n      v6 = sub_40AAA0(a1, 0, a3, a4, a5, a6);\n      if ( v6 >= 0 && dword_6145D8 == -1 )\n      {\nLABEL_8:\n        v8 = fcntl(v6, 1);\n        if ( v8 < 0 || fcntl(v6, 2, v8 | 1u) == -1 )\n        {\n          v9 = __errno_location();\n          v10 = v6;\n          v6 = -1;\n          v11 = *v9;\n          v12 = v9;\n          close(v10);\n          *v12 = v11;\n        }\n      }\n    }\n    else\n    {\n      v6 = fcntl(a1, 1030, (unsigned int)a3);\n      if ( v6 < 0 && *__errno_location() == 22 )\n      {\n        v6 = sub_40AAA0(a1, 0, v16, v13, v14, v15);\n        if ( v6 >= 0 )\n        {\n          dword_6145D8 = -1;\n          goto LABEL_8;\n        }\n      }\n      else\n      {\n        dword_6145D8 = 1;\n      }\n    }\n    return (unsigned int)v6;\n  }\n  return (unsigned int)fcntl(a1, a2, a3);\n}\n"
        },
        {
            "funcName": "sub_40ABE0",
            "funcStartAddr": "0x40abe0",
            "funcEndAddr": "0x40ac20",
            "decompiledFuncCode": "int __fastcall sub_40ABE0(FILE *stream)\n{\n  if ( !stream || !__freading(stream) || (stream->_flags & 0x100) == 0 )\n    return fflush(stream);\n  sub_40AC20(stream, 0LL, 1LL);\n  return fflush(stream);\n}\n"
        },
        {
            "funcName": "sub_40AC20",
            "funcStartAddr": "0x40ac20",
            "funcEndAddr": "0x40ac77",
            "decompiledFuncCode": "int __fastcall sub_40AC20(FILE *a1, __off_t a2, int a3)\n{\n  __off_t v3; // rax\n  int v5; // eax\n\n  if ( a1->_IO_read_end == a1->_IO_read_ptr && a1->_IO_write_ptr == a1->_IO_write_base && !a1->_IO_save_base )\n  {\n    v5 = fileno(a1);\n    v3 = lseek(v5, a2, a3);\n    if ( v3 != -1 )\n    {\n      a1->_flags &= ~0x10u;\n      a1->_offset = v3;\n      LODWORD(v3) = 0;\n    }\n  }\n  else\n  {\n    LODWORD(v3) = fseeko(a1, a2, a3);\n  }\n  return v3;\n}\n"
        },
        {
            "funcName": "sub_40AC80",
            "funcStartAddr": "0x40ac80",
            "funcEndAddr": "0x40ad5f",
            "decompiledFuncCode": "__int64 __fastcall sub_40AC80(__int64 a1, int *a2)\n{\n  __int64 v2; // r11\n  int v3; // r12d\n  int v4; // ebp\n  __int64 v5; // rbx\n  int v6; // r9d\n  int v7; // r10d\n  int v8; // r8d\n  int v9; // r14d\n  int v10; // edx\n  __int64 *v11; // rax\n  __int64 *v12; // r13\n  __int64 v13; // rdx\n  __int64 v14; // rcx\n  __int64 result; // rax\n  __int64 *v16; // rax\n  __int64 v17; // rdx\n  __int64 v18; // rcx\n\n  v2 = a1 + 8;\n  v3 = a2[11];\n  v4 = *a2;\n  v5 = a2[12];\n  v6 = v3;\n  v7 = *a2;\n  v8 = a2[12];\nLABEL_2:\n  if ( v7 > v8 )\n  {\n    while ( v6 < v8 )\n    {\n      v9 = v7 - v8;\n      v10 = v8 - v6;\n      if ( v7 - v8 <= v8 - v6 )\n      {\n        v16 = (__int64 *)(a1 + 8LL * v6);\n        v17 = v5 - v6;\n        do\n        {\n          v18 = *v16;\n          *v16 = v16[v17];\n          v16[v17] = v18;\n          ++v16;\n        }\n        while ( v16 != (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v9 - 1))) );\n        v6 += v9;\n        goto LABEL_2;\n      }\n      v7 -= v10;\n      v11 = (__int64 *)(a1 + 8LL * v6);\n      v12 = (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v10 - 1)));\n      v13 = v7 - (__int64)v6;\n      do\n      {\n        v14 = *v11;\n        *v11 = v11[v13];\n        v11[v13] = v14;\n        ++v11;\n      }\n      while ( v12 != v11 );\n      if ( v7 <= v8 )\n        break;\n    }\n  }\n  a2[12] = v4;\n  result = (unsigned int)(v4 - v8);\n  a2[11] = result + v3;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40AD60",
            "funcStartAddr": "0x40ad60",
            "funcEndAddr": "0x40b37c",
            "decompiledFuncCode": "__int64 __fastcall sub_40AD60(\n        int a1,\n        __int64 *a2,\n        const char *a3,\n        char **a4,\n        _DWORD *a5,\n        int a6,\n        int *a7,\n        int a8,\n        __int64 a9)\n{\n  const char *v9; // r14\n  char *v10; // rbp\n  size_t v11; // r13\n  char **v12; // rbx\n  __int64 v13; // r12\n  const char *v14; // r15\n  const char *v15; // rdi\n  __int64 v16; // r15\n  char **v17; // rbp\n  char *v18; // rdx\n  __int64 result; // rax\n  int v20; // edx\n  int v21; // eax\n  int v22; // ecx\n  char *v23; // rdx\n  __int64 v24; // rbx\n  char *v25; // rax\n  __int64 v26; // rbx\n  char *v27; // rax\n  __int64 v28; // rbp\n  char *v29; // rax\n  __int64 v30; // rbp\n  char *v31; // rax\n  FILE *v32; // rdi\n  char **v33; // rbx\n  _BYTE *v34; // rbp\n  __int64 v35; // r12\n  __int64 v36; // rbp\n  char *v37; // rax\n  char *s1; // [rsp+10h] [rbp-78h]\n  char *s1a; // [rsp+10h] [rbp-78h]\n  _BYTE *ptr; // [rsp+18h] [rbp-70h]\n  int v45; // [rsp+38h] [rbp-50h]\n  char v46; // [rsp+3Fh] [rbp-49h]\n  int v48; // [rsp+44h] [rbp-44h]\n  int v49; // [rsp+48h] [rbp-40h]\n\n  v9 = (const char *)*((_QWORD *)a7 + 4);\n  v10 = (char *)v9;\n  v46 = *v9;\n  if ( *v9 == 61 || !*v9 )\n  {\n    v11 = 0LL;\n  }\n  else\n  {\n    do\n      ++v10;\n    while ( *v10 && *v10 != 61 );\n    v11 = v10 - v9;\n  }\n  v12 = a4;\n  v13 = 0LL;\n  s1 = *a4;\n  v14 = *a4;\n  if ( !*a4 )\n  {\nLABEL_24:\n    if ( !a6 || *(_BYTE *)(a2[*a7] + 1) == 45 || (v18 = strchr(a3, v46), result = 0xFFFFFFFFLL, !v18) )\n    {\n      if ( a8 )\n      {\n        v24 = *a2;\n        v25 = dcgettext(0LL, \"%s: unrecognized option '%s%s'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v25, v24);\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n      ++*a7;\n      a7[2] = 0;\n      return 63LL;\n    }\n    return result;\n  }\n  while ( 1 )\n  {\n    if ( !strncmp(v14, v9, v11) && strlen(v14) == v11 )\n      goto LABEL_31;\n    v12 += 4;\n    v14 = *v12;\n    if ( !*v12 )\n      break;\n    v13 = (int)v13 + 1;\n  }\n  v12 = 0LL;\n  v48 = -1;\n  v15 = s1;\n  v16 = 0LL;\n  v45 = 0;\n  v49 = 0;\n  ptr = 0LL;\n  s1a = v10;\n  v17 = a4;\n  do\n  {\n    if ( strncmp(v15, v9, v11) )\n      goto LABEL_20;\n    if ( v12 )\n    {\n      if ( (a6\n         || *((_DWORD *)v12 + 2) != *((_DWORD *)v17 + 2)\n         || v12[2] != v17[2]\n         || *((_DWORD *)v12 + 6) != *((_DWORD *)v17 + 6))\n        && !v45 )\n      {\n        if ( a8 )\n        {\n          if ( ptr )\n            goto LABEL_19;\n          ptr = calloc((int)v13 + 1, 1uLL);\n          if ( ptr )\n          {\n            v49 = 1;\n            ptr[v48] = 1;\nLABEL_19:\n            ptr[v16] = 1;\n            goto LABEL_20;\n          }\n          v45 = 1;\n        }\n        else\n        {\n          v45 = 1;\n          if ( ptr )\n            goto LABEL_19;\n        }\n      }\n    }\n    else\n    {\n      v48 = v16;\n      v12 = v17;\n    }\nLABEL_20:\n    v17 += 4;\n    v15 = *v17;\n    ++v16;\n  }\n  while ( *v17 );\n  v10 = s1a;\n  if ( ptr || v45 )\n  {\n    if ( a8 )\n    {\n      if ( v45 )\n      {\n        v26 = *a2;\n        v27 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v27, v26);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n      else\n      {\n        flockfile(stderr);\n        v30 = *a2;\n        v31 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5);\n        __fprintf_chk(stderr, 1LL, v31, v30);\n        v32 = stderr;\n        v33 = a4;\n        v34 = ptr;\n        v35 = (__int64)&ptr[v13 + 1];\n        do\n        {\n          if ( *v34 )\n          {\n            __fprintf_chk(v32, 1LL, \" '%s%s'\", a9);\n            v32 = stderr;\n          }\n          ++v34;\n          v33 += 4;\n        }\n        while ( (_BYTE *)v35 != v34 );\n        fputc(10, v32);\n        funlockfile(stderr);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n    }\n    if ( v49 )\n      free(ptr);\n    *((_QWORD *)a7 + 4) = &v9[strlen(v9)];\n    ++*a7;\n    a7[2] = 0;\n    return 63LL;\n  }\n  else\n  {\n    if ( !v12 )\n      goto LABEL_24;\n    LODWORD(v13) = v48;\nLABEL_31:\n    v20 = *a7;\n    *((_QWORD *)a7 + 4) = 0LL;\n    v21 = v20 + 1;\n    *a7 = v20 + 1;\n    v22 = *((_DWORD *)v12 + 2);\n    if ( *v10 )\n    {\n      if ( v22 )\n      {\n        *((_QWORD *)a7 + 2) = v10 + 1;\n        goto LABEL_33;\n      }\n      if ( a8 )\n      {\n        v28 = *a2;\n        v29 = dcgettext(0LL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v29, v28);\n      }\n      a7[2] = *((_DWORD *)v12 + 6);\n      return 63LL;\n    }\n    else\n    {\n      if ( v22 != 1 )\n        goto LABEL_33;\n      if ( v21 >= a1 )\n      {\n        if ( a8 )\n        {\n          v36 = *a2;\n          v37 = dcgettext(0LL, \"%s: option '%s%s' requires an argument\\n\", 5);\n          __fprintf_chk(stderr, 1LL, v37, v36);\n        }\n        a7[2] = *((_DWORD *)v12 + 6);\n        return 5 * (unsigned int)(*a3 != 58) + 58;\n      }\n      else\n      {\n        *a7 = v20 + 2;\n        *((_QWORD *)a7 + 2) = a2[v21];\nLABEL_33:\n        if ( a5 )\n          *a5 = v13;\n        v23 = v12[2];\n        result = *((unsigned int *)v12 + 6);\n        if ( v23 )\n        {\n          *(_DWORD *)v23 = result;\n          return 0LL;\n        }\n      }\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40B380",
            "funcStartAddr": "0x40b380",
            "funcEndAddr": "0x40b946",
            "decompiledFuncCode": "__int64 __fastcall sub_40B380(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int a6, int *a7, int a8)\n{\n  int v8; // r13d\n  int v9; // eax\n  int v10; // ebp\n  const char *v12; // r15\n  _BYTE *v13; // rdx\n  char v14; // al\n  char v15; // al\n  int v16; // eax\n  __int64 v17; // r14\n  int v18; // edx\n  int v19; // ecx\n  int v20; // eax\n  unsigned int v21; // r14d\n  char *v22; // rax\n  __int64 v23; // r8\n  char v24; // cl\n  int v26; // edx\n  __int64 v27; // rax\n  _BYTE *v28; // rcx\n  int v29; // esi\n  char v30; // cl\n  char *v31; // rax\n  __int64 v32; // rax\n  char *v34; // rax\n  char v35; // dl\n  __int64 v36; // rax\n  int v37; // edx\n  __int64 v38; // rax\n  __int64 v39; // rbp\n  char *v40; // rax\n  __int64 v41; // rbp\n  char *v42; // rax\n  __int64 v43; // rbp\n  char *v44; // rax\n  char v47; // [rsp+1Ch] [rbp-4Ch]\n  int v48; // [rsp+1Ch] [rbp-4Ch]\n  int v49; // [rsp+1Ch] [rbp-4Ch]\n  int v50; // [rsp+1Ch] [rbp-4Ch]\n  _BYTE *v51; // [rsp+20h] [rbp-48h]\n  _BYTE *v52; // [rsp+28h] [rbp-40h]\n\n  v8 = a7[1];\n  if ( a1 <= 0 )\n    return (unsigned int)-1;\n  v9 = *a7;\n  v10 = a1;\n  v12 = a3;\n  *((_QWORD *)a7 + 2) = 0LL;\n  if ( !v9 )\n  {\n    *a7 = 1;\n    v9 = 1;\nLABEL_4:\n    a7[12] = v9;\n    a7[11] = v9;\n    *((_QWORD *)a7 + 4) = 0LL;\n    if ( *a3 == 45 )\n    {\n      a7[10] = 2;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else if ( *a3 == 43 )\n    {\n      a7[10] = 0;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else\n    {\n      v13 = 0LL;\n      if ( !a8 )\n      {\n        v50 = a6;\n        v34 = getenv(\"POSIXLY_CORRECT\");\n        a6 = v50;\n        if ( !v34 )\n        {\n          a7[10] = 1;\n          v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n          goto LABEL_24;\n        }\n        v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n      }\n      a7[10] = 0;\n    }\nLABEL_24:\n    a7[6] = 1;\n    v14 = *v12;\n    goto LABEL_25;\n  }\n  if ( !a7[6] )\n    goto LABEL_4;\n  v14 = *a3;\n  v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n  if ( ((v14 - 43) & 0xFD) == 0 )\n  {\n    v15 = *++v12;\n    if ( v15 == 58 )\n      v8 = 0;\n    if ( !v13 )\n      goto LABEL_12;\n    goto LABEL_28;\n  }\nLABEL_25:\n  if ( v14 == 58 )\n    v8 = 0;\n  if ( !v13 )\n    goto LABEL_12;\nLABEL_28:\n  if ( !*v13 )\n  {\nLABEL_12:\n    v16 = *a7;\n    if ( a7[12] > *a7 )\n      a7[12] = v16;\n    if ( v16 < a7[11] )\n      a7[11] = v16;\n    if ( a7[10] == 1 )\n    {\n      v26 = a7[12];\n      if ( a7[11] == v26 )\n      {\n        if ( v16 != v26 )\n        {\n          a7[11] = v16;\n          v26 = v16;\n        }\n      }\n      else if ( v16 != v26 )\n      {\n        v48 = a6;\n        sub_40AC80((__int64)a2, a7);\n        v26 = *a7;\n        a6 = v48;\n      }\n      if ( a1 <= v26 )\n      {\nLABEL_79:\n        v16 = v26;\n      }\n      else\n      {\n        v27 = v26;\n        while ( 1 )\n        {\n          v28 = (_BYTE *)a2[v27];\n          v29 = v27;\n          v26 = v27;\n          if ( *v28 == 45 )\n          {\n            if ( v28[1] )\n              break;\n          }\n          v26 = ++v27;\n          *a7 = v29 + 1;\n          if ( a1 <= (int)v27 )\n            goto LABEL_79;\n        }\n        v16 = *a7;\n      }\n      a7[12] = v26;\n    }\n    if ( a1 == v16 )\n    {\n      v10 = a7[12];\n      v18 = a7[11];\nLABEL_41:\n      if ( v18 != v10 )\n        *a7 = v18;\n      return (unsigned int)-1;\n    }\n    v17 = a2[v16];\n    if ( !strcmp((const char *)v17, \"--\") )\n    {\n      v18 = a7[11];\n      v19 = a7[12];\n      v20 = v16 + 1;\n      *a7 = v20;\n      if ( v18 == v19 )\n      {\n        a7[11] = v20;\n        v18 = v20;\n      }\n      else if ( v20 != v19 )\n      {\n        sub_40AC80((__int64)a2, a7);\n        v18 = a7[11];\n      }\n      a7[12] = a1;\n      *a7 = a1;\n      goto LABEL_41;\n    }\n    if ( *(_BYTE *)v17 == 45 )\n    {\n      v30 = *(_BYTE *)(v17 + 1);\n      if ( v30 )\n      {\n        if ( a4 )\n        {\n          if ( v30 == 45 )\n          {\n            *((_QWORD *)a7 + 4) = v17 + 2;\n            return (unsigned int)sub_40AD60(a1, a2, v12, a4, a5, a6, a7, v8, (__int64)\"--\");\n          }\n          if ( a6 )\n          {\n            if ( *(_BYTE *)(v17 + 2) || (v49 = a6, v31 = strchr(v12, v30), a6 = v49, !v31) )\n            {\n              *((_QWORD *)a7 + 4) = v17 + 1;\n              v21 = sub_40AD60(a1, a2, v12, a4, a5, a6, a7, v8, 4262769LL);\n              if ( v21 != -1 )\n                return v21;\n              v17 = a2[*a7];\n            }\n          }\n        }\n        v13 = (_BYTE *)(v17 + 1);\n        goto LABEL_29;\n      }\n    }\n    if ( a7[10] )\n    {\n      *((_QWORD *)a7 + 2) = v17;\n      v21 = 1;\n      *a7 = v16 + 1;\n      return v21;\n    }\n    return (unsigned int)-1;\n  }\nLABEL_29:\n  v51 = v13;\n  *((_QWORD *)a7 + 4) = v13 + 1;\n  v21 = (char)*v13;\n  v52 = v13 + 1;\n  v47 = *v13;\n  v22 = strchr(v12, v21);\n  v23 = (__int64)v52;\n  if ( !v51[1] )\n    ++*a7;\n  if ( (unsigned __int8)(v47 - 58) > 1u && v22 )\n  {\n    v24 = v22[1];\n    if ( *v22 == 87 && a4 && v24 == 59 )\n    {\n      if ( v51[1] )\n      {\nLABEL_68:\n        *((_QWORD *)a7 + 4) = v23;\n        *((_QWORD *)a7 + 2) = 0LL;\n        return (unsigned int)sub_40AD60(a1, a2, v12, a4, a5, 0, a7, v8, (__int64)\"-W \");\n      }\n      v32 = *a7;\n      if ( (_DWORD)v32 != a1 )\n      {\n        v23 = a2[v32];\n        goto LABEL_68;\n      }\n      if ( v8 )\n      {\n        v43 = *a2;\n        v44 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v44, v43);\n      }\n      a7[2] = v21;\n      return 5 * (unsigned int)(*v12 != 58) + 58;\n    }\n    else if ( v24 == 58 )\n    {\n      v35 = v51[1];\n      if ( v22[2] == 58 )\n      {\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          ++*a7;\n        }\n        else\n        {\n          *((_QWORD *)a7 + 2) = 0LL;\n        }\n      }\n      else\n      {\n        v36 = *a7;\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          *a7 = v36 + 1;\n        }\n        else if ( a1 == (_DWORD)v36 )\n        {\n          if ( v8 )\n          {\n            v41 = *a2;\n            v42 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n            __fprintf_chk(stderr, 1LL, v42, v41);\n          }\n          a7[2] = v21;\n          v21 = 5 * (*v12 != 58) + 58;\n        }\n        else\n        {\n          v37 = v36 + 1;\n          v38 = a2[v36];\n          *a7 = v37;\n          *((_QWORD *)a7 + 2) = v38;\n        }\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n    }\n  }\n  else\n  {\n    if ( v8 )\n    {\n      v39 = *a2;\n      v40 = dcgettext(0LL, \"%s: invalid option -- '%c'\\n\", 5);\n      __fprintf_chk(stderr, 1LL, v40, v39);\n    }\n    a7[2] = v21;\n    return 63;\n  }\n  return v21;\n}\n"
        },
        {
            "funcName": "sub_40B950",
            "funcStartAddr": "0x40b950",
            "funcEndAddr": "0x40b9a6",
            "decompiledFuncCode": "__int64 __fastcall sub_40B950(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int a6, int a7)\n{\n  __int64 result; // rax\n\n  dword_6145E0 = dword_61433C;\n  dword_6145E4 = dword_614338;\n  result = sub_40B380(a1, a2, a3, a4, a5, a6, &dword_6145E0, a7);\n  dword_61433C = dword_6145E0;\n  nptr = (char *)qword_6145F0;\n  dword_614334 = dword_6145E8;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40B9B0",
            "funcStartAddr": "0x40b9b0",
            "funcEndAddr": "0x40b9c8",
            "decompiledFuncCode": "__int64 __fastcall sub_40B9B0(int a1, __int64 *a2, const char *a3)\n{\n  return sub_40B950(a1, a2, a3, 0LL, 0LL, 0, 1);\n}\n"
        },
        {
            "funcName": "sub_40B9D0",
            "funcStartAddr": "0x40b9d0",
            "funcEndAddr": "0x40b9e3",
            "decompiledFuncCode": "__int64 __fastcall sub_40B9D0(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5)\n{\n  return sub_40B950(a1, a2, a3, a4, a5, 0, 0);\n}\n"
        },
        {
            "funcName": "sub_40B9F0",
            "funcStartAddr": "0x40b9f0",
            "funcEndAddr": "0x40ba05",
            "decompiledFuncCode": "__int64 __fastcall sub_40B9F0(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_40B380(a1, a2, a3, a4, a5, 0, a6, 0);\n}\n"
        },
        {
            "funcName": "sub_40BA10",
            "funcStartAddr": "0x40ba10",
            "funcEndAddr": "0x40ba26",
            "decompiledFuncCode": "__int64 __fastcall sub_40BA10(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5)\n{\n  return sub_40B950(a1, a2, a3, a4, a5, 1, 0);\n}\n"
        },
        {
            "funcName": "sub_40BA30",
            "funcStartAddr": "0x40ba30",
            "funcEndAddr": "0x40ba48",
            "decompiledFuncCode": "__int64 __fastcall sub_40BA30(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_40B380(a1, a2, a3, a4, a5, 1, a6, 0);\n}\n"
        },
        {
            "funcName": "sub_40BA50",
            "funcStartAddr": "0x40ba50",
            "funcEndAddr": "0x40baca",
            "decompiledFuncCode": "size_t __fastcall sub_40BA50(wchar_t *pwc, char *s, size_t a3, mbstate_t *a4)\n{\n  size_t v4; // rbx\n  wchar_t *v5; // r12\n  const char *v6; // rbp\n  char v8; // [rsp+Ch] [rbp-1Ch] BYREF\n\n  if ( !s )\n  {\n    a3 = 1LL;\n    v6 = \"\\t\" + 1;\nLABEL_7:\n    v5 = (wchar_t *)&v8;\n    goto LABEL_4;\n  }\n  v4 = -2LL;\n  if ( !a3 )\n    return v4;\n  v5 = pwc;\n  v6 = s;\n  if ( !pwc )\n    goto LABEL_7;\nLABEL_4:\n  v4 = mbrtowc(v5, v6, a3, a4);\n  if ( v4 > 0xFFFFFFFFFFFFFFFDLL && !sub_405590(0) )\n  {\n    v4 = 1LL;\n    *v5 = *(unsigned __int8 *)v6;\n  }\n  return v4;\n}\n"
        },
        {
            "funcName": "sub_40BAD0",
            "funcStartAddr": "0x40bad0",
            "funcEndAddr": "0x40bb15",
            "decompiledFuncCode": "__int64 __fastcall sub_40BAD0(__int64 a1)\n{\n  int v1; // eax\n  unsigned int v2; // edx\n\n  if ( *(_BYTE *)(a1 + 8) )\n    v1 = setenv(\"TZ\", (const char *)(a1 + 9), 1);\n  else\n    v1 = unsetenv(\"TZ\");\n  v2 = 0;\n  if ( !v1 )\n  {\n    tzset();\n    return 1;\n  }\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_40BB20",
            "funcStartAddr": "0x40bb20",
            "funcEndAddr": "0x40bb49",
            "decompiledFuncCode": "void __fastcall sub_40BB20(_QWORD *a1)\n{\n  _QWORD *v1; // rbx\n\n  if ( a1 )\n  {\n    do\n    {\n      v1 = (_QWORD *)*a1;\n      free(a1);\n      a1 = v1;\n    }\n    while ( v1 );\n  }\n}\n"
        },
        {
            "funcName": "sub_40BB50",
            "funcStartAddr": "0x40bb50",
            "funcEndAddr": "0x40bb91",
            "decompiledFuncCode": "__int64 __fastcall sub_40BB50(_QWORD *a1)\n{\n  int *v1; // rbx\n  int v2; // r13d\n  unsigned int v3; // ebp\n\n  v1 = __errno_location();\n  v2 = *v1;\n  v3 = sub_40BAD0((__int64)a1);\n  if ( !(_BYTE)v3 )\n    v2 = *v1;\n  sub_40BB20(a1);\n  *v1 = v2;\n  return v3;\n}\n"
        },
        {
            "funcName": "sub_40BBA0",
            "funcStartAddr": "0x40bba0",
            "funcEndAddr": "0x40bc2f",
            "decompiledFuncCode": "_QWORD *__fastcall sub_40BBA0(const char *src)\n{\n  size_t v2; // rax\n  __int64 v3; // rdi\n  size_t v4; // rbp\n  char *v5; // rax\n  _BYTE *v6; // rbx\n  _QWORD *result; // rax\n\n  if ( src )\n  {\n    v2 = strlen(src);\n    v3 = 118LL;\n    v4 = v2 + 1;\n    if ( v2 + 1 >= 0x76 )\n      v3 = v2 + 1;\n    v5 = (char *)malloc((v3 + 17) & 0xFFFFFFFFFFFFFFF8LL);\n    v6 = v5;\n    if ( v5 )\n    {\n      *(_QWORD *)v5 = 0LL;\n      *((_WORD *)v5 + 4) = 1;\n      memcpy(v5 + 9, src, v4);\n      v6[v4 + 9] = 0;\n    }\n    return v6;\n  }\n  result = malloc(0x80uLL);\n  v6 = result;\n  if ( !result )\n    return v6;\n  *result = 0LL;\n  *((_WORD *)result + 4) = 0;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40BC30",
            "funcStartAddr": "0x40bc30",
            "funcEndAddr": "0x40bda5",
            "decompiledFuncCode": "__int64 __fastcall sub_40BC30(__int64 *a1, unsigned __int64 a2)\n{\n  const char *v2; // r12\n  __int64 *v3; // rbp\n  __int64 result; // rax\n  char *v5; // rbx\n  __int64 v6; // r14\n  __int64 *v7; // rax\n  size_t v8; // r15\n  char *v9; // rax\n  _QWORD *v10; // rax\n\n  v2 = *(const char **)(a2 + 48);\n  if ( !v2 )\n    return 1LL;\n  v3 = a1;\n  if ( a2 > (unsigned __int64)v2 || (result = 1LL, (unsigned __int64)v2 >= a2 + 56) )\n  {\n    v5 = (char *)a1 + 9;\n    if ( !*v2 )\n    {\n      v5 = \"\\t\" + 1;\n      goto LABEL_12;\n    }\nLABEL_5:\n    if ( !strcmp(v5, v2) )\n      goto LABEL_12;\n    while ( 1 )\n    {\n      if ( !*v5 )\n      {\n        v6 = (__int64)v3 + 9;\n        if ( (char *)v3 + 9 != v5 )\n        {\n          v8 = strlen(v2) + 1;\n          v9 = &v5[-v6];\n          if ( ~(unsigned __int64)&v5[-v6] < v8 )\n          {\n            *__errno_location() = 12;\n            return 0LL;\n          }\nLABEL_19:\n          if ( (unsigned __int64)&v9[v8] <= 0x76 )\n          {\n            memcpy(v5, v2, v8);\n            v5[v8] = 0;\n            goto LABEL_12;\n          }\n          v10 = sub_40BBA0(v2);\n          *v3 = (__int64)v10;\n          if ( !v10 )\n            return 0LL;\n          *((_BYTE *)v10 + 8) = 0;\n          v5 = (char *)v10 + 9;\nLABEL_12:\n          *(_QWORD *)(a2 + 48) = v5;\n          return 1LL;\n        }\n        if ( !*((_BYTE *)v3 + 8) )\n        {\n          v8 = strlen(v2) + 1;\n          v9 = 0LL;\n          goto LABEL_19;\n        }\n      }\n      v5 += strlen(v5) + 1;\n      if ( *v5 )\n        goto LABEL_5;\n      v7 = (__int64 *)*v3;\n      if ( !*v3 )\n        goto LABEL_5;\n      v5 = (char *)v7 + 9;\n      v3 = (__int64 *)*v3;\n      if ( !strcmp((const char *)v7 + 9, v2) )\n        goto LABEL_12;\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40BDB0",
            "funcStartAddr": "0x40bdb0",
            "funcEndAddr": "0x40be5f",
            "decompiledFuncCode": "__int64 __fastcall sub_40BDB0(__int64 a1)\n{\n  char *v1; // rax\n  const char *v2; // rbp\n  _QWORD *v3; // rbx\n  int *v5; // rbp\n  int v6; // r12d\n\n  v1 = getenv(\"TZ\");\n  v2 = v1;\n  if ( v1 )\n  {\n    if ( *(_BYTE *)(a1 + 8) && !strcmp((const char *)(a1 + 9), v1) )\n      return 1LL;\n  }\n  else if ( !*(_BYTE *)(a1 + 8) )\n  {\n    return 1LL;\n  }\n  v3 = sub_40BBA0(v2);\n  if ( !v3 || (unsigned __int8)sub_40BAD0(a1) )\n    return (__int64)v3;\n  v5 = __errno_location();\n  v6 = *v5;\n  if ( v3 != (_QWORD *)1 )\n    sub_40BB20(v3);\n  *v5 = v6;\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_40BE80",
            "funcStartAddr": "0x40be80",
            "funcEndAddr": "0x40bf25",
            "decompiledFuncCode": "struct tm *__fastcall sub_40BE80(__int64 *a1, const time_t *a2, struct tm *a3)\n{\n  _QWORD *v4; // r13\n\n  if ( !a1 )\n    return gmtime_r(a2, a3);\n  v4 = (_QWORD *)sub_40BDB0((__int64)a1);\n  if ( v4 )\n  {\n    if ( localtime_r(a2, a3) && (unsigned __int8)sub_40BC30(a1, (unsigned __int64)a3) )\n    {\n      if ( v4 == (_QWORD *)1 || (unsigned __int8)sub_40BB50(v4) )\n        return a3;\n    }\n    else if ( v4 != (_QWORD *)1 )\n    {\n      sub_40BB50(v4);\n    }\n  }\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_40BF30",
            "funcStartAddr": "0x40bf30",
            "funcEndAddr": "0x40c04c",
            "decompiledFuncCode": "time_t __fastcall sub_40BF30(__int64 *a1, _DWORD *a2)\n{\n  _QWORD *v2; // r12\n  int v4; // eax\n  time_t timer; // [rsp+8h] [rbp-60h] BYREF\n  struct tm tp; // [rsp+10h] [rbp-58h] BYREF\n\n  if ( !a1 )\n    return sub_40C050(a2);\n  v2 = (_QWORD *)sub_40BDB0((__int64)a1);\n  if ( !v2 )\n    return -1LL;\n  timer = sub_40CD00(a2);\n  if ( timer != -1\n    || localtime_r(&timer, &tp)\n    && ((v4 = a2[8], (v4 == 0) == (tp.tm_isdst == 0)) || v4 < 0 || tp.tm_isdst < 0)\n    && !(tp.tm_sec ^ *a2 | tp.tm_min ^ a2[1] | tp.tm_hour ^ a2[2] | tp.tm_mday ^ a2[3] | tp.tm_year ^ a2[5] | tp.tm_mon ^ a2[4]) )\n  {\n    if ( !(unsigned __int8)sub_40BC30(a1, (unsigned __int64)a2) )\n      timer = -1LL;\n  }\n  if ( v2 == (_QWORD *)1 || (unsigned __int8)sub_40BB50(v2) )\n    return timer;\n  else\n    return -1LL;\n}\n"
        },
        {
            "funcName": "sub_40C050",
            "funcStartAddr": "0x40c050",
            "funcEndAddr": "0x40c066",
            "decompiledFuncCode": "__int64 __fastcall sub_40C050(__int64 a1)\n{\n  *(_DWORD *)(a1 + 32) = 0;\n  return sub_40C8C0(a1, gmtime_r, &unk_614618);\n}\n"
        },
        {
            "funcName": "sub_40C070",
            "funcStartAddr": "0x40c070",
            "funcEndAddr": "0x40c0cd",
            "decompiledFuncCode": "int __fastcall sub_40C070(FILE *stream)\n{\n  size_t v1; // r12\n  int v2; // ebx\n  int result; // eax\n\n  v1 = __fpending(stream);\n  v2 = stream->_flags & 0x20;\n  result = sub_40AA20(stream);\n  if ( v2 )\n  {\n    if ( !result )\n    {\n      *__errno_location() = 0;\n      return -1;\n    }\n    return -1;\n  }\n  if ( !result )\n    return result;\n  if ( v1 )\n    return -1;\n  return -(*__errno_location() != 9);\n}\n"
        },
        {
            "funcName": "sub_40C0D0",
            "funcStartAddr": "0x40c0d0",
            "funcEndAddr": "0x40c632",
            "decompiledFuncCode": "const char *sub_40C0D0()\n{\n  char *v0; // rax\n  char *v1; // r15\n  const char *v2; // rbx\n  char v3; // bp\n  const char *v4; // rbp\n  char *v6; // rax\n  const char *v7; // r13\n  size_t v8; // rax\n  __int64 v9; // r12\n  size_t v10; // r14\n  size_t v11; // rdi\n  char *v12; // rax\n  char *v13; // rbp\n  size_t v14; // rdi\n  char *v15; // rax\n  int v16; // eax\n  int v17; // r12d\n  FILE *v18; // r13\n  const char *v19; // rax\n  FILE *v20; // rbx\n  const char *v21; // r13\n  char *IO_read_ptr; // rax\n  int v23; // edi\n  char *v24; // kr00_8\n  int *v25; // rdx\n  int v26; // esi\n  unsigned int v27; // eax\n  __int64 v28; // rdx\n  signed __int64 v29; // rax\n  char *v30; // rax\n  __int64 v31; // rcx\n  __int64 v32; // rdx\n  __int64 v33; // rsi\n  unsigned int v34; // ecx\n  signed __int64 v35; // rdi\n  char *v36; // rsi\n  unsigned int v37; // edx\n  char *v38; // rcx\n  FILE *v39; // rdi\n  int v40; // eax\n  bool v41; // dl\n  char *v42; // rax\n  signed __int64 v43; // rax\n  unsigned __int64 v44; // r9\n  char *v45; // rsi\n  char *v46; // r10\n  unsigned int v47; // ecx\n  unsigned int v48; // ecx\n  unsigned int v49; // esi\n  __int64 v50; // r8\n  unsigned __int64 v51; // rdi\n  char *v52; // rcx\n  char *v53; // r9\n  unsigned int v54; // edx\n  unsigned int v55; // edx\n  unsigned int v56; // ecx\n  __int64 v57; // rsi\n  const char *v58; // rax\n  char *v59; // rdi\n  FILE *v60; // r13\n  signed __int64 v61; // [rsp+8h] [rbp-D0h]\n  __int64 v62; // [rsp+18h] [rbp-C0h]\n  char v63[64]; // [rsp+20h] [rbp-B8h] BYREF\n  _QWORD v64[15]; // [rsp+60h] [rbp-78h] BYREF\n\n  v0 = nl_langinfo(14);\n  v1 = s;\n  v2 = v0;\n  if ( !v0 )\n    v2 = \"\";\n  if ( !s )\n  {\n    v6 = getenv(\"CHARSETALIASDIR\");\n    v7 = v6;\n    if ( v6 && *v6 )\n    {\n      v8 = strlen(v6);\n      v9 = v8;\n      v10 = v8;\n      if ( !v8 )\n      {\n        v11 = 14LL;\nLABEL_18:\n        v12 = (char *)malloc(v11);\n        v13 = v12;\n        if ( !v12 )\n        {\nLABEL_19:\n          v1 = \"\\t\" + 1;\nLABEL_20:\n          s = v1;\n          goto LABEL_4;\n        }\n        memcpy(v12, v7, v10);\nLABEL_24:\n        strcpy(&v13[v9], \"charset.alias\");\n        v16 = open(v13, 0);\n        v17 = v16;\n        if ( v16 >= 0 )\n        {\n          v1 = 0LL;\n          v61 = 0LL;\n          v18 = fdopen(v16, \"r\");\n          if ( v18 )\n          {\n            v19 = v2;\n            v20 = v18;\n            v21 = v19;\nLABEL_30:\n            IO_read_ptr = v20->_IO_read_ptr;\n            if ( IO_read_ptr < v20->_IO_read_end )\n            {\nLABEL_31:\n              v20->_IO_read_ptr = IO_read_ptr + 1;\n              v23 = (unsigned __int8)*IO_read_ptr;\n              goto LABEL_32;\n            }\n            while ( 1 )\n            {\n              v23 = __uflow(v20);\n              if ( v23 == -1 )\n                break;\nLABEL_32:\n              if ( (unsigned int)(v23 - 9) <= 1 || v23 == 32 )\n                goto LABEL_30;\n              if ( v23 == 35 )\n              {\n                do\n                {\n                  v42 = v20->_IO_read_ptr;\n                  if ( v42 < v20->_IO_read_end )\n                  {\n                    v20->_IO_read_ptr = v42 + 1;\n                    v40 = (unsigned __int8)*v42;\n                    v41 = 1;\n                  }\n                  else\n                  {\n                    v40 = __uflow(v20);\n                    v41 = v40 != -1;\n                  }\n                }\n                while ( v40 != 10 && v41 );\n                if ( v40 == -1 )\n                  break;\n                goto LABEL_30;\n              }\n              ungetc(v23, v20);\n              if ( fscanf(v20, \"%50s %50s\", v63, v64) <= 1 )\n                break;\n              v24 = &v63[strlen(v63)];\n              v25 = (int *)v64;\n              do\n              {\n                v26 = *v25++;\n                v27 = ~v26 & (v26 - 16843009) & 0x80808080;\n              }\n              while ( !v27 );\n              if ( (~v26 & (v26 - 16843009) & 0x8080) == 0 )\n              {\n                v27 >>= 16;\n                v25 = (int *)((char *)v25 + 2);\n              }\n              v28 = (char *)v25 - __CFADD__((_BYTE)v27, (_BYTE)v27) - 3 - (char *)v64;\n              v29 = v24 - v63 + v28;\n              v62 = v28;\n              if ( v61 )\n              {\n                v43 = v61 + v29;\n                v61 = v43 + 2;\n                v30 = (char *)realloc(v1, v43 + 3);\n                v32 = v62;\n                v31 = v24 - v63;\n              }\n              else\n              {\n                v61 = v29 + 2;\n                v30 = (char *)malloc(v29 + 3);\n                v31 = v24 - v63;\n                v32 = v62;\n              }\n              if ( !v30 )\n              {\n                v58 = v21;\n                v59 = v1;\n                v60 = v20;\n                v1 = \"\\t\" + 1;\n                v2 = v58;\n                free(v59);\n                sub_40AA20(v60);\n                goto LABEL_26;\n              }\n              v33 = -2 - v31;\n              v34 = v31 + 1;\n              v35 = v61 - v32;\n              v36 = &v30[v61 - v32 + v33];\n              if ( v34 >= 8 )\n              {\n                *(_QWORD *)v36 = *(_QWORD *)v63;\n                *(_QWORD *)&v36[v34 - 8] = *(_QWORD *)&v63[v34 - 8];\n                v44 = (unsigned __int64)(v36 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v45 = &v36[-v44];\n                v46 = (char *)(v63 - v45);\n                v47 = ((_DWORD)v45 + v34) & 0xFFFFFFF8;\n                if ( v47 >= 8 )\n                {\n                  v48 = v47 & 0xFFFFFFF8;\n                  v49 = 0;\n                  do\n                  {\n                    v50 = v49;\n                    v49 += 8;\n                    *(_QWORD *)(v44 + v50) = *(_QWORD *)&v46[v50];\n                  }\n                  while ( v49 < v48 );\n                }\n              }\n              else if ( (v34 & 4) != 0 )\n              {\n                *(_DWORD *)v36 = *(_DWORD *)v63;\n                *(_DWORD *)&v36[v34 - 4] = *(_DWORD *)&v63[v34 - 4];\n              }\n              else if ( v34 )\n              {\n                *v36 = v63[0];\n                if ( (v34 & 2) != 0 )\n                  *(_WORD *)&v36[v34 - 2] = *(_WORD *)&v63[v34 - 2];\n              }\n              v37 = v32 + 1;\n              v38 = &v30[v35 - 1];\n              if ( v37 >= 8 )\n              {\n                *(_QWORD *)v38 = v64[0];\n                *(_QWORD *)&v38[v37 - 8] = *(_QWORD *)&v63[v37 + 56];\n                v51 = (unsigned __int64)(v38 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v52 = &v38[-v51];\n                v53 = (char *)((char *)v64 - v52);\n                v54 = ((_DWORD)v52 + v37) & 0xFFFFFFF8;\n                if ( v54 >= 8 )\n                {\n                  v55 = v54 & 0xFFFFFFF8;\n                  v56 = 0;\n                  do\n                  {\n                    v57 = v56;\n                    v56 += 8;\n                    *(_QWORD *)(v51 + v57) = *(_QWORD *)&v53[v57];\n                  }\n                  while ( v56 < v55 );\n                }\n              }\n              else if ( (v37 & 4) != 0 )\n              {\n                *(_DWORD *)v38 = v64[0];\n                *(_DWORD *)&v38[v37 - 4] = *(_DWORD *)&v63[v37 + 60];\n              }\n              else if ( v37 )\n              {\n                *v38 = v64[0];\n                if ( (v37 & 2) != 0 )\n                  *(_WORD *)&v38[v37 - 2] = *(_WORD *)&v63[v37 + 62];\n              }\n              v1 = v30;\n              IO_read_ptr = v20->_IO_read_ptr;\n              if ( IO_read_ptr < v20->_IO_read_end )\n                goto LABEL_31;\n            }\n            v39 = v20;\n            v2 = v21;\n            sub_40AA20(v39);\n            if ( !v61 )\n              goto LABEL_25;\n            v1[v61] = 0;\n            goto LABEL_26;\n          }\n          close(v17);\n        }\nLABEL_25:\n        v1 = \"\\t\" + 1;\nLABEL_26:\n        free(v13);\n        goto LABEL_20;\n      }\n      if ( v7[v8 - 1] == 47 )\n      {\n        v11 = v8 + 14;\n        goto LABEL_18;\n      }\n      v14 = v8 + 15;\n      v9 = v8 + 1;\n    }\n    else\n    {\n      v14 = 115LL;\n      v9 = 101LL;\n      v10 = 100LL;\n      v7 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n    }\n    v15 = (char *)malloc(v14);\n    v13 = v15;\n    if ( !v15 )\n      goto LABEL_19;\n    memcpy(v15, v7, v10);\n    v13[v10] = 47;\n    goto LABEL_24;\n  }\nLABEL_4:\n  v3 = *v1;\n  if ( *v1 )\n  {\n    while ( strcmp(v2, v1) && (v3 != 42 || v1[1]) )\n    {\n      v4 = &v1[strlen(v1) + 1];\n      v1 = (char *)&v4[strlen(v4) + 1];\n      v3 = *v1;\n      if ( !*v1 )\n        goto LABEL_11;\n    }\n    v2 = &v1[strlen(v1) + 1];\n  }\nLABEL_11:\n  if ( !*v2 )\n    return \"ASCII\";\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_40C640",
            "funcStartAddr": "0x40c640",
            "funcEndAddr": "0x40c757",
            "decompiledFuncCode": "__int64 __fastcall sub_40C640(__int64 a1, __int64 a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)\n{\n  int v10; // r10d\n  int v11; // r12d\n\n  v10 = (a1 >> 2) + 475 - ((a1 & 3) == 0);\n  v11 = (__PAIR64__((a6 >> 2) + 475, a6 & 3) - 1) >> 32;\n  return a5\n       + 60\n       * (a4\n        + 60\n        * (a3\n         + 24\n         * ((int)(v10\n                - v11\n                - (v10 / 25\n                 - ((unsigned int)(v10 % 25) >> 31)\n                 - (v11 / 25\n                  - ((unsigned int)(v11 % 25) >> 31)))\n                + ((int)(v10 / 25 - ((unsigned int)(v10 % 25) >> 31)) >> 2)\n                - ((int)(v11 / 25 - ((unsigned int)(v11 % 25) >> 31)) >> 2))\n          + 365 * (a1 - a6)\n          + a2\n          - a7)\n         - a8)\n        - a9)\n       - a10;\n}\n"
        },
        {
            "funcName": "sub_40C760",
            "funcStartAddr": "0x40c760",
            "funcEndAddr": "0x40c7f1",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40C760(__int64 a1, __int64 a2, int a3, int a4, int a5, __int64 a6, int *a7)\n{\n  __int64 v8; // rax\n  bool v9; // of\n  unsigned __int64 result; // rax\n\n  if ( !a7\n    || (v8 = sub_40C640(a1, a2, a3, a4, a5, a7[5], a7[7], a7[2], a7[1], *a7),\n        v9 = __OFADD__(a6, v8),\n        result = a6 + v8,\n        v9) )\n  {\n    if ( a6 < 0 )\n    {\n      if ( a6 >= (__int64)0x8000000000000002LL )\n        return 0x8000000000000000LL;\n      else\n        return a6 + 1;\n    }\n    else\n    {\n      result = 0x7FFFFFFFFFFFFFFFLL;\n      if ( a6 > 0x7FFFFFFFFFFFFFFDLL )\n        return a6 - 1;\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40C800",
            "funcStartAddr": "0x40c800",
            "funcEndAddr": "0x40c8bf",
            "decompiledFuncCode": "__int64 __fastcall sub_40C800(__int64 (__fastcall *a1)(__int64 *, __int64), __int64 *a2, __int64 a3)\n{\n  __int64 result; // rax\n  __int64 v5; // r14\n  __int64 v6; // rbp\n  __int64 v7; // rdx\n  __int64 v8; // rbx\n  __int64 v9[6]; // [rsp+8h] [rbp-30h] BYREF\n\n  v9[0] = *a2;\n  result = a1(v9, a3);\n  if ( !result )\n  {\n    v5 = *a2;\n    v6 = 0LL;\n    if ( *a2 )\n    {\n      while ( 1 )\n      {\n        v7 = (v6 >> 1) + (v5 >> 1);\n        v8 = v7 + (((unsigned __int8)v5 | (unsigned __int8)v6) & 1);\n        if ( v6 != v8 && v5 != v8 )\n          break;\n        v9[0] = v7 + (((unsigned __int8)v5 | (unsigned __int8)v6) & 1);\n        result = a1(v9, a3);\n        if ( !result )\n        {\n          v5 = v8;\n          v8 = v6;\n        }\n        v6 = v8;\n      }\n      if ( !result && v6 )\n      {\n        v9[0] = v6;\n        return a1(v9, a3);\n      }\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40C8C0",
            "funcStartAddr": "0x40c8c0",
            "funcEndAddr": "0x40ccfa",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40C8C0(int *a1, __int64 (__fastcall *a2)(__int64 *, __int64), _QWORD *a3)\n{\n  __int64 v4; // rsi\n  int v5; // eax\n  int v6; // edi\n  _BOOL4 v7; // edx\n  __int64 v8; // rbx\n  int v9; // r12d\n  int v10; // ebp\n  __int64 v11; // rsi\n  int v12; // eax\n  __int64 v13; // r13\n  _BOOL4 v14; // r12d\n  __int64 v15; // r14\n  int *v16; // rax\n  __int64 v17; // r15\n  unsigned __int64 result; // rax\n  bool v19; // dl\n  __m128i *v20; // r14\n  __int32 v21; // esi\n  __int64 v22; // rdx\n  bool v23; // of\n  __int64 v24; // rax\n  __m128i v25; // xmm1\n  __m128i v26; // xmm2\n  __int64 v27; // rdx\n  int i; // r13d\n  int v29; // r12d\n  int v30; // r15d\n  int v31; // [rsp+Ch] [rbp-10Ch]\n  int v33; // [rsp+18h] [rbp-100h]\n  int v34; // [rsp+1Ch] [rbp-FCh]\n  int v35; // [rsp+28h] [rbp-F0h]\n  __int64 v37; // [rsp+38h] [rbp-E0h]\n  int v38; // [rsp+40h] [rbp-D8h]\n  int v39; // [rsp+44h] [rbp-D4h]\n  int *v40; // [rsp+48h] [rbp-D0h]\n  unsigned __int64 v41; // [rsp+50h] [rbp-C8h] BYREF\n  __int64 v42; // [rsp+58h] [rbp-C0h] BYREF\n  __m128i v43; // [rsp+60h] [rbp-B8h] BYREF\n  __m128i v44; // [rsp+70h] [rbp-A8h] BYREF\n  __m128i v45; // [rsp+80h] [rbp-98h] BYREF\n  __int64 v46; // [rsp+90h] [rbp-88h]\n  __int64 v47[4]; // [rsp+A0h] [rbp-78h] BYREF\n  int v48; // [rsp+C0h] [rbp-58h]\n\n  v4 = a1[3];\n  v38 = *a1;\n  v31 = a1[1];\n  v5 = a1[2];\n  v6 = a1[4];\n  v33 = v5;\n  v35 = a1[8];\n  v7 = 0;\n  v8 = a1[5] + (__int64)(int)(v6 / 12 - ((unsigned int)(v6 % 12) >> 31));\n  if ( (v8 & 3) == 0 )\n  {\n    v7 = 1;\n    if ( v8 == 100 * (v8 / 100) )\n      v7 = ((v8 / 100) & 3) == 1;\n  }\n  v9 = 59;\n  v10 = 6;\n  v11 = (unsigned __int16)word_411100[13 * v7 + (((v6 % 12) >> 31) & 0xC) + v6 % 12] - 1 + v4;\n  if ( v38 <= 59 )\n    v9 = v38;\n  v12 = 0;\n  if ( v9 >= 0 )\n    v12 = v9;\n  v34 = v12;\n  v39 = -(int)*a3;\n  v13 = sub_40C640(v8, v11, v33, v31, v12, 70, 0, 0, 0, v39);\n  v37 = v13;\n  v41 = v13;\n  v40 = a1;\n  v14 = 0;\n  v15 = v13;\n  while ( 1 )\n  {\n    v16 = (int *)sub_40C800(a2, (__int64 *)&v41, (__int64)&v43);\n    v17 = v41;\n    result = sub_40C760(v8, v11, v33, v31, v34, v41, v16);\n    if ( v17 == result )\n      break;\n    if ( v17 == v13 && v17 != v15 )\n    {\n      if ( v45.m128i_i32[0] < 0 )\n        goto LABEL_17;\n      v19 = v45.m128i_i32[0] != 0;\n      if ( v35 < 0 )\n      {\n        if ( (unsigned __int8)v19 >= v14 )\n        {\nLABEL_17:\n          v20 = (__m128i *)v40;\n          result = v17;\n          goto LABEL_18;\n        }\n      }\n      else if ( (v35 != 0) != v19 )\n      {\n        goto LABEL_17;\n      }\n    }\n    if ( !--v10 )\n      return -1LL;\n    v41 = result;\n    v13 = v15;\n    v15 = v17;\n    v14 = v45.m128i_i32[0] != 0;\n  }\n  v20 = (__m128i *)v40;\n  if ( (v35 == 0) != (v45.m128i_i32[0] == 0) && v35 >= 0 && v45.m128i_i32[0] >= 0 )\n  {\n    for ( i = 601200; i != 269337600; i += 601200 )\n    {\n      v29 = 2;\n      v30 = -i;\n      v42 = result + -i;\n      if ( !__OFADD__(result, -i) )\n      {\nLABEL_34:\n        sub_40C800(a2, &v42, (__int64)v47);\n        if ( (v35 == 0) == (v48 == 0) || v48 < 0 )\n        {\n          v41 = sub_40C760(v8, v11, v33, v31, v34, v42, (int *)v47);\n          sub_40C800(a2, (__int64 *)&v41, (__int64)&v43);\n          result = v41;\n          break;\n        }\n        result = v41;\n      }\n      while ( 1 )\n      {\n        v30 += 2 * i;\n        if ( v29 == 1 )\n          break;\n        v29 = 1;\n        v42 = result + v30;\n        if ( !__OFADD__(result, v30) )\n          goto LABEL_34;\n      }\n    }\n  }\nLABEL_18:\n  v21 = v43.m128i_i32[0];\n  *a3 = result - (v37 + v39);\n  if ( v21 == v38 )\n    goto LABEL_22;\n  v22 = ((v38 <= 0) & (unsigned __int8)(v21 == 60)) - (__int64)v34 + v38;\n  v23 = __OFADD__(v22, result);\n  v24 = v22 + result;\n  v41 = v24;\n  if ( !v23 )\n  {\n    v47[0] = v24;\n    if ( a2(v47, (__int64)&v43) )\n    {\n      result = v41;\nLABEL_22:\n      v25 = _mm_load_si128(&v44);\n      v26 = _mm_load_si128(&v45);\n      v27 = v46;\n      *v20 = _mm_load_si128(&v43);\n      v20[1] = v25;\n      v20[2] = v26;\n      v20[3].m128i_i64[0] = v27;\n      return result;\n    }\n  }\n  return -1LL;\n}\n"
        },
        {
            "funcName": "sub_40CD00",
            "funcStartAddr": "0x40cd00",
            "funcEndAddr": "0x40cd1c",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40CD00(int *a1)\n{\n  tzset();\n  return sub_40C8C0(a1, (__int64 (__fastcall *)(__int64 *, __int64))localtime_r, &qword_614628);\n}\n"
        },
        {
            "funcName": "sub_40CD90",
            "funcStartAddr": "0x40cd90",
            "funcEndAddr": "0x40cda8",
            "decompiledFuncCode": "int __fastcall sub_40CD90(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  v1 = 0LL;\n  if ( &qword_614268 )\n    v1 = (void *)qword_614268;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n"
        },
        {
            "funcName": "sub_40CDA8",
            "funcStartAddr": "0x40cda8",
            "funcEndAddr": "0x40cdc8",
            "decompiledFuncCode": "__int64 __fastcall sub_40CDA8(__int64 a1, __int64 a2, __int64 a3)\n{\n  void (**i)(void); // rbx\n\n  for ( i = (void (**)(void))&qword_613E30; *i != (void (*)(void))-1LL; --i )\n    (*i)();\n  return a3;\n}\n"
        }
    ],
    "funcCount": 121
}