{
    "binaryInfo": {
        "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_cut.elf",
        "isStripped": "True"
    },
    "buildInfo": {
        "decompilerName": "IDA Pro",
        "compilerName": "gcc",
        "compilerVersion": "9.4.0",
        "Optlevel": "-O"
    },
    "funcInfo": [
        {
            "funcName": "main",
            "funcStartAddr": "0x401a40",
            "funcEndAddr": "0x401df4",
            "decompiledFuncCode": "__int64 __fastcall main(int a1, char **a2, char **a3)\n{\n  void *v3; // r13\n  char v4; // r12\n  int v6; // eax\n  unsigned __int64 v7; // rax\n  const char *v8; // rsi\n  int v9; // eax\n  int v10; // r12d\n  int *v12; // rax\n  char *v13; // rax\n\n  v4 = 0;\n  sub_403790(*a2, a2, a3);\n  setlocale(6, \"\");\n  bindtextdomain(\n    \"coreutils\",\n    \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n  textdomain(\"coreutils\");\n  sub_4074F0(sub_4031D0);\n  byte_60B313 = 0;\n  dword_60B314 = 0;\n  byte_60B311 = 0;\n  byte_60B2FA = 0;\n  while ( 1 )\n  {\n    v6 = sub_406AC0((unsigned int)a1, a2, \"b:c:d:f:nsz\", &off_407FA0, 0LL);\n    if ( v6 == -1 )\n      break;\n    if ( v6 == 102 )\n    {\n      if ( dword_60B314 )\n      {\nLABEL_47:\n        v8 = \"only one type of list may be specified\";\n        goto LABEL_48;\n      }\n      dword_60B314 = 2;\n      v3 = src;\n    }\n    else if ( v6 <= 102 )\n    {\n      if ( v6 > 99 )\n      {\n        if ( v6 != 100 )\n          goto LABEL_49;\n        if ( *(_BYTE *)src && *((_BYTE *)src + 1) )\n        {\n          v8 = \"the delimiter must be a single character\";\n          goto LABEL_48;\n        }\n        byte_60B311 = *(_BYTE *)src;\n        v4 = 1;\n      }\n      else\n      {\n        if ( v6 < 98 )\n        {\n          if ( v6 == -131 )\n          {\n            sub_405830(\n              (_DWORD)stdout,\n              (unsigned int)\"cut\",\n              (unsigned int)&unk_4075D5,\n              (_DWORD)off_60B238,\n              (unsigned int)\"David M. Ihnat\",\n              (unsigned int)\"David MacKenzie\",\n              \"Jim Meyering\",\n              0LL);\n            exit(0);\n          }\n          if ( v6 == -130 )\n            sub_4026B0(0);\nLABEL_49:\n          sub_4026B0(1);\n        }\n        if ( dword_60B314 )\n          goto LABEL_47;\n        dword_60B314 = 1;\n        v3 = src;\n      }\n    }\n    else if ( v6 == 122 )\n    {\n      byte_60B230 = 0;\n    }\n    else if ( v6 > 122 )\n    {\n      if ( v6 == 128 )\n      {\n        byte_60B310 = 1;\n        v7 = 1LL;\n        if ( *(_BYTE *)src )\n          v7 = strlen((const char *)src);\n        n = v7;\n        ptr = (void *)sub_405BA0(src);\n      }\n      else\n      {\n        if ( v6 != 129 )\n          goto LABEL_49;\n        byte_60B312 = 1;\n      }\n    }\n    else if ( v6 != 110 )\n    {\n      if ( v6 != 115 )\n        goto LABEL_49;\n      byte_60B313 = 1;\n    }\n  }\n  v8 = \"you must specify a list of bytes, characters, or fields\";\n  if ( !dword_60B314 )\n    goto LABEL_48;\n  if ( dword_60B314 != 2 && v4 )\n  {\n    v8 = \"an input delimiter may be specified only when operating on fields\";\n    goto LABEL_48;\n  }\n  if ( ((dword_60B314 != 2) & (unsigned __int8)byte_60B313) != 0 )\n  {\n    v8 = \"suppressing non-delimited lines makes sense\\n\\tonly when operating on fields\";\nLABEL_48:\n    v13 = dcgettext(0LL, v8, 5);\n    error(0, 0, v13);\n    goto LABEL_49;\n  }\n  sub_402BD0(v3, (byte_60B312 != 0 ? 2 : 0) | (4 * (unsigned int)(dword_60B314 != 2)));\n  if ( !v4 )\n    byte_60B311 = 9;\n  if ( !ptr )\n  {\n    byte_60B2F9 = 0;\n    ptr = &byte_60B2F8;\n    byte_60B2F8 = byte_60B311;\n    n = 1LL;\n  }\n  v9 = dword_60B2BC;\n  if ( dword_60B2BC == a1 )\n  {\n    LOBYTE(v10) = sub_401EE0(\"-\");\n  }\n  else\n  {\n    v10 = 1;\n    if ( dword_60B2BC < a1 )\n    {\n      do\n      {\n        v10 &= sub_401EE0(a2[v9]);\n        v9 = dword_60B2BC + 1;\n        dword_60B2BC = v9;\n      }\n      while ( v9 < a1 );\n    }\n  }\n  if ( byte_60B2FA && (unsigned int)sub_405C20(stdin) == -1 )\n  {\n    v12 = __errno_location();\n    LOBYTE(v10) = 0;\n    error(0, *v12, \"-\");\n  }\n  return (unsigned __int8)v10 ^ 1u;\n}\n"
        },
        {
            "funcName": "sub_401E2B",
            "funcStartAddr": "0x401e2b",
            "funcEndAddr": "0x401e4a",
            "decompiledFuncCode": "__int64 *sub_401E2B()\n{\n  return &program_invocation_short_name;\n}\n"
        },
        {
            "funcName": "sub_401E4A",
            "funcStartAddr": "0x401e4a",
            "funcEndAddr": "0x401e81",
            "decompiledFuncCode": "__int64 sub_401E4A()\n{\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_401E81",
            "funcStartAddr": "0x401e81",
            "funcEndAddr": "0x401ed8",
            "decompiledFuncCode": "__int64 *sub_401E81()\n{\n  __int64 *result; // rax\n\n  if ( !byte_60B2E8 )\n  {\n    while ( qword_60B2F0 < (unsigned __int64)(&qword_60AE48 - qword_60AE40 - 1) )\n      ((void (*)(void))qword_60AE40[++qword_60B2F0])();\n    result = sub_401E2B();\n    byte_60B2E8 = 1;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_401ED8",
            "funcStartAddr": "0x401ed8",
            "funcEndAddr": "0x401edd",
            "decompiledFuncCode": "// attributes: thunk\n__int64 sub_401ED8()\n{\n  return sub_401E4A();\n}\n"
        },
        {
            "funcName": "sub_401EE0",
            "funcStartAddr": "0x401ee0",
            "funcEndAddr": "0x4026af",
            "decompiledFuncCode": "__int64 __fastcall sub_401EE0(char *filename)\n{\n  FILE *v2; // r13\n  char *IO_read_ptr; // rax\n  int v4; // edi\n  unsigned __int64 v5; // rbx\n  char v6; // bp\n  int v7; // edx\n  char v8; // r12\n  unsigned __int64 *v9; // rax\n  int v10; // r12d\n  int v11; // ebp\n  int v12; // edx\n  unsigned __int8 v13; // al\n  int v14; // ecx\n  char v15; // di\n  int v16; // r15d\n  char *v17; // rax\n  char *v18; // rax\n  char *v19; // rax\n  char v20; // r9\n  int v21; // esi\n  bool v22; // cl\n  char *v23; // rcx\n  signed __int64 v24; // rbx\n  char *IO_write_ptr; // rax\n  int flags; // eax\n  int v27; // edx\n  __int64 result; // rax\n  int v29; // ecx\n  bool v30; // r8\n  char *v31; // rax\n  char *v32; // rax\n  int v33; // eax\n  const char *v34; // rbx\n  int *v35; // rax\n  unsigned __int64 v36; // rbx\n  char v37; // r12\n  char *v38; // rax\n  int v39; // esi\n  int v40; // ebp\n  unsigned __int64 *v41; // rax\n  unsigned __int64 v42; // rax\n  FILE *v43; // rdi\n  char *v44; // rax\n  int v45; // eax\n  char *v46; // rdx\n  char *v47; // rax\n  char v48; // [rsp+Bh] [rbp-3Dh]\n  int v49; // [rsp+Ch] [rbp-3Ch]\n\n  if ( !strcmp(filename, \"-\") )\n  {\n    byte_60B2FA = 1;\n    v2 = stdin;\n  }\n  else\n  {\n    v2 = fopen(filename, \"r\");\n    if ( !v2 )\n    {\nLABEL_85:\n      v34 = (const char *)sub_405230(0LL, 3LL, filename);\n      v35 = __errno_location();\n      error(0, *v35, \"%s\", v34);\n      return 0LL;\n    }\n  }\n  sub_403280(v2, 2LL);\n  qword_60B328 = (__int64)base;\n  if ( dword_60B314 != 1 )\n  {\n    IO_read_ptr = v2->_IO_read_ptr;\n    if ( IO_read_ptr >= v2->_IO_read_end )\n    {\n      v4 = __uflow(v2);\n      if ( v4 == -1 )\n        goto LABEL_49;\n    }\n    else\n    {\n      v2->_IO_read_ptr = IO_read_ptr + 1;\n      v4 = (unsigned __int8)*IO_read_ptr;\n    }\n    v5 = 1LL;\n    ungetc(v4, v2);\n    v6 = 0;\n    v7 = 0;\n    v48 = byte_60B313 ^ (*(_QWORD *)qword_60B328 > 1uLL);\n    while ( 1 )\n    {\nLABEL_7:\n      v8 = v48 & (v5 == 1);\n      if ( v8 )\n      {\n        while ( 1 )\n        {\n          v24 = sub_4032B0(\n                  &qword_60B320,\n                  &unk_60B318,\n                  0LL,\n                  -1LL,\n                  (unsigned __int8)byte_60B311,\n                  (unsigned __int8)byte_60B230,\n                  v2);\n          if ( v24 < 0 )\n            break;\n          if ( !v24 )\n            __assert_fail(\"n_bytes != 0\", \"src/cut.c\", 0x149u, \"cut_fields\");\n          if ( *((char *)qword_60B320 + v24 - 1) == byte_60B311 )\n          {\n            v9 = (unsigned __int64 *)qword_60B328;\n            if ( *(_QWORD *)qword_60B328 > 1uLL )\n              goto LABEL_69;\n            fwrite_unlocked(qword_60B320, 1uLL, v24 - 1, stdout);\n            if ( byte_60B311 != byte_60B230 )\n            {\nLABEL_76:\n              v9 = (unsigned __int64 *)qword_60B328;\n              v6 = v8;\n              goto LABEL_69;\n            }\n            v32 = v2->_IO_read_ptr;\n            if ( v32 >= v2->_IO_read_end )\n            {\n              v33 = __uflow(v2);\n              if ( v33 == -1 )\n              {\n                v9 = (unsigned __int64 *)qword_60B328;\nLABEL_69:\n                if ( v9[1] > 1 )\n                {\n                  v5 = 2LL;\n                  v10 = 0;\n                }\n                else\n                {\n                  v9 += 2;\n                  v5 = 2LL;\n                  v10 = 0;\n                  qword_60B328 = (__int64)v9;\n                }\n                goto LABEL_9;\n              }\n            }\n            else\n            {\n              v2->_IO_read_ptr = v32 + 1;\n              v33 = (unsigned __int8)*v32;\n            }\n            ungetc(v33, v2);\n            goto LABEL_76;\n          }\n          if ( byte_60B313 )\n          {\n            v5 = 1LL;\n            v7 = 0;\n            goto LABEL_7;\n          }\n          fwrite_unlocked(qword_60B320, 1uLL, v24, stdout);\n          v7 = (unsigned __int8)byte_60B230;\n          if ( *((char *)qword_60B320 + v24 - 1) != (unsigned __int8)byte_60B230 )\n          {\n            IO_write_ptr = stdout->_IO_write_ptr;\n            if ( IO_write_ptr >= stdout->_IO_write_end )\n            {\n              __overflow(stdout, (unsigned __int8)byte_60B230);\n              v7 = (unsigned __int8)byte_60B230;\n            }\n            else\n            {\n              stdout->_IO_write_ptr = IO_write_ptr + 1;\n              *IO_write_ptr = v7;\n            }\n          }\nLABEL_40:\n          v5 = 1LL;\n          v8 = v48 & 1;\n          if ( (v48 & 1) == 0 )\n            goto LABEL_8;\n        }\n        free(qword_60B320);\n        flags = v2->_flags;\n        qword_60B320 = 0LL;\n        if ( (flags & 0x30) == 0 )\n          sub_405BC0();\n        goto LABEL_50;\n      }\nLABEL_8:\n      v9 = (unsigned __int64 *)qword_60B328;\n      v10 = v7;\nLABEL_9:\n      if ( *v9 > v5 )\n      {\n        while ( 1 )\n        {\n          v19 = v2->_IO_read_ptr;\n          if ( v19 < v2->_IO_read_end )\n          {\n            v2->_IO_read_ptr = v19 + 1;\n            v16 = (unsigned __int8)*v19;\n          }\n          else\n          {\n            v16 = __uflow(v2);\n          }\n          v12 = (unsigned __int8)byte_60B311;\n          v13 = byte_60B230;\n          LOBYTE(v14) = byte_60B311;\n          v15 = byte_60B311;\n          if ( (unsigned __int8)byte_60B311 == v16 )\n            break;\n          v7 = (unsigned __int8)byte_60B230;\n          if ( v16 == (unsigned __int8)byte_60B230 )\n          {\nLABEL_55:\n            v14 = (unsigned __int8)v14;\n            v15 = v14;\n            if ( byte_60B230 != (_BYTE)v14 )\n              goto LABEL_56;\n            v30 = 0;\n            goto LABEL_63;\n          }\n          if ( v16 == -1 )\n          {\nLABEL_30:\n            v15 = v14;\n            v20 = v6;\n            v21 = v13;\n            v7 = -1;\n            v22 = 0;\n            v6 = 1;\n            goto LABEL_31;\n          }\n          v10 = v16;\n        }\n      }\n      else\n      {\n        if ( v6 )\n          fwrite_unlocked(ptr, 1uLL, n, stdout);\n        while ( 1 )\n        {\n          v18 = v2->_IO_read_ptr;\n          if ( v18 < v2->_IO_read_end )\n          {\n            v2->_IO_read_ptr = v18 + 1;\n            v11 = (unsigned __int8)*v18;\n          }\n          else\n          {\n            v11 = __uflow(v2);\n          }\n          v12 = (unsigned __int8)byte_60B311;\n          v13 = byte_60B230;\n          LOBYTE(v14) = byte_60B311;\n          v15 = byte_60B311;\n          v16 = (unsigned __int8)byte_60B311;\n          if ( v11 == (unsigned __int8)byte_60B311 )\n            break;\n          v7 = (unsigned __int8)byte_60B230;\n          if ( v11 == (unsigned __int8)byte_60B230 )\n          {\n            v6 = 1;\n            goto LABEL_55;\n          }\n          if ( v11 == -1 )\n          {\n            v6 = 1;\n            goto LABEL_30;\n          }\n          v17 = stdout->_IO_write_ptr;\n          if ( v17 >= stdout->_IO_write_end )\n          {\n            __overflow(stdout, (unsigned __int8)v11);\n          }\n          else\n          {\n            stdout->_IO_write_ptr = v17 + 1;\n            *v17 = v11;\n          }\n          v10 = v11;\n        }\n        v6 = 1;\n      }\n      if ( v13 == (_BYTE)v14 )\n      {\n        v31 = v2->_IO_read_ptr;\n        if ( v31 >= v2->_IO_read_end )\n        {\n          v7 = __uflow(v2);\n          if ( v7 == -1 )\n          {\n            v21 = (unsigned __int8)byte_60B230;\n            v20 = v6;\n            v15 = byte_60B311;\n            v22 = 0;\n            v6 = 1;\n            v13 = byte_60B230;\nLABEL_31:\n            if ( v20 || byte_60B313 != 1 || v5 != 1 )\n            {\n              if ( v15 != (char)v13 && v21 == v10 && !v22 )\n                goto LABEL_49;\n              v23 = stdout->_IO_write_ptr;\n              if ( v23 >= stdout->_IO_write_end )\n              {\n                v49 = v7;\n                __overflow(stdout, v21);\n                v7 = v49;\n              }\n              else\n              {\n                stdout->_IO_write_ptr = v23 + 1;\n                *v23 = v13;\n              }\n            }\n            if ( !v6 )\n            {\n              qword_60B328 = (__int64)base;\n              goto LABEL_40;\n            }\nLABEL_49:\n            flags = v2->_flags;\n            goto LABEL_50;\n          }\n        }\n        else\n        {\n          v2->_IO_read_ptr = v31 + 1;\n          v7 = (unsigned __int8)*v31;\n        }\n        ungetc(v7, v2);\n        v14 = (unsigned __int8)byte_60B311;\n        v7 = v16;\n        v15 = byte_60B311;\nLABEL_56:\n        if ( v7 == v14 )\n          goto LABEL_57;\nLABEL_62:\n        v13 = byte_60B230;\n        v30 = v7 == -1;\nLABEL_63:\n        v21 = v13;\n        v22 = v13 == v7;\n        if ( v30 || v13 == v7 )\n        {\n          v20 = v6;\n          v6 = v30;\n          goto LABEL_31;\n        }\n      }\n      else\n      {\n        v29 = v12;\n        v7 = v16;\n        if ( v16 != v29 )\n          goto LABEL_62;\nLABEL_57:\n        if ( ++v5 > *(_QWORD *)(qword_60B328 + 8) )\n          qword_60B328 += 16LL;\n      }\n    }\n  }\n  v36 = 0LL;\n  v37 = 0;\nLABEL_87:\n  v38 = v2->_IO_read_ptr;\n  if ( v38 < v2->_IO_read_end )\n  {\nLABEL_88:\n    v39 = (unsigned __int8)byte_60B230;\n    v2->_IO_read_ptr = v38 + 1;\n    v40 = (unsigned __int8)*v38;\n    if ( v40 == v39 )\n      goto LABEL_103;\n    goto LABEL_89;\n  }\n  while ( 1 )\n  {\n    v45 = __uflow(v2);\n    v39 = (unsigned __int8)byte_60B230;\n    LOBYTE(v40) = v45;\n    if ( v45 == (unsigned __int8)byte_60B230 )\n    {\nLABEL_103:\n      v47 = stdout->_IO_write_ptr;\n      if ( v47 >= stdout->_IO_write_end )\n      {\n        __overflow(stdout, v39);\n      }\n      else\n      {\n        stdout->_IO_write_ptr = v47 + 1;\n        *v47 = v39;\n      }\n      v36 = 0LL;\n      v37 = 0;\n      qword_60B328 = (__int64)base;\n      goto LABEL_87;\n    }\n    if ( v45 == -1 )\n      break;\nLABEL_89:\n    v41 = (unsigned __int64 *)qword_60B328;\n    if ( ++v36 > *(_QWORD *)(qword_60B328 + 8) )\n    {\n      v41 = (unsigned __int64 *)(qword_60B328 + 16);\n      qword_60B328 += 16LL;\n    }\n    v42 = *v41;\n    if ( v36 < v42 )\n      goto LABEL_87;\n    v43 = stdout;\n    if ( byte_60B310 )\n    {\n      v37 &= v36 == v42;\n      if ( v37 )\n      {\n        fwrite_unlocked(ptr, 1uLL, n, stdout);\n        v43 = stdout;\n      }\n      else\n      {\n        v37 = byte_60B310;\n      }\n    }\n    v44 = v43->_IO_write_ptr;\n    if ( v44 >= v43->_IO_write_end )\n    {\n      __overflow(v43, (unsigned __int8)v40);\n      goto LABEL_87;\n    }\n    v43->_IO_write_ptr = v44 + 1;\n    *v44 = v40;\n    v38 = v2->_IO_read_ptr;\n    if ( v38 < v2->_IO_read_end )\n      goto LABEL_88;\n  }\n  if ( !v36 )\n    goto LABEL_49;\n  v46 = stdout->_IO_write_ptr;\n  if ( v46 >= stdout->_IO_write_end )\n  {\n    __overflow(stdout, (unsigned __int8)byte_60B230);\n  }\n  else\n  {\n    stdout->_IO_write_ptr = v46 + 1;\n    *v46 = v39;\n  }\n  flags = v2->_flags;\nLABEL_50:\n  if ( (flags & 0x20) != 0 )\n    goto LABEL_85;\n  if ( !strcmp(filename, \"-\") )\n  {\n    clearerr_unlocked(v2);\n    return 1LL;\n  }\n  v27 = sub_405C20(v2);\n  result = 1LL;\n  if ( v27 == -1 )\n    goto LABEL_85;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4026B0",
            "funcStartAddr": "0x4026b0",
            "funcEndAddr": "0x402add",
            "decompiledFuncCode": "void __fastcall __noreturn sub_4026B0(int status)\n{\n  __int64 v1; // rbp\n  char *v2; // rax\n  char *v3; // rax\n  FILE *v4; // rbp\n  char *v5; // rax\n  FILE *v6; // rbp\n  char *v7; // rax\n  FILE *v8; // rbp\n  char *v9; // rax\n  FILE *v10; // rbp\n  char *v11; // rax\n  FILE *v12; // rbp\n  char *v13; // rax\n  FILE *v14; // rbp\n  char *v15; // rax\n  FILE *v16; // rbp\n  char *v17; // rax\n  FILE *v18; // rbp\n  char *v19; // rax\n  FILE *v20; // rbp\n  char *v21; // rax\n  FILE *v22; // rbp\n  char *v23; // rax\n  FILE *v24; // rbp\n  char *v25; // rax\n  FILE *v26; // rbp\n  char *v27; // rax\n  __int64 *v28; // rax\n  const char *v29; // rbp\n  char *v30; // rax\n  char *v31; // rax\n  char *v32; // rax\n  char *v33; // rax\n  char *v34; // rax\n  char *v35; // rax\n  char *v36; // rax\n  char *v37; // rax\n  __int64 v38[17]; // [rsp+0h] [rbp-88h] BYREF\n\n  v1 = qword_60B350;\n  if ( status )\n  {\n    v2 = dcgettext(0LL, \"Try '%s --help' for more information.\\n\", 5);\n    __fprintf_chk(stderr, 1LL, v2, v1);\n    goto LABEL_3;\n  }\n  v3 = dcgettext(0LL, \"Usage: %s OPTION... [FILE]...\\n\", 5);\n  __printf_chk(1LL, v3, v1);\n  v4 = stdout;\n  v5 = dcgettext(0LL, \"Print selected parts of lines from each FILE to standard output.\\n\", 5);\n  fputs_unlocked(v5, v4);\n  v6 = stdout;\n  v7 = dcgettext(0LL, \"\\nWith no FILE, or when FILE is -, read standard input.\\n\", 5);\n  fputs_unlocked(v7, v6);\n  v8 = stdout;\n  v9 = dcgettext(0LL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5);\n  fputs_unlocked(v9, v8);\n  v10 = stdout;\n  v11 = dcgettext(\n          0LL,\n          \"  -b, --bytes=LIST        select only these bytes\\n\"\n          \"  -c, --characters=LIST   select only these characters\\n\"\n          \"  -d, --delimiter=DELIM   use DELIM instead of TAB for field delimiter\\n\",\n          5);\n  fputs_unlocked(v11, v10);\n  v12 = stdout;\n  v13 = dcgettext(\n          0LL,\n          \"  -f, --fields=LIST       select only these fields;  also print any line\\n\"\n          \"                            that contains no delimiter character, unless\\n\"\n          \"                            the -s option is specified\\n\"\n          \"  -n                      (ignored)\\n\",\n          5);\n  fputs_unlocked(v13, v12);\n  v14 = stdout;\n  v15 = dcgettext(\n          0LL,\n          \"      --complement        complement the set of selected bytes, characters\\n\"\n          \"                            or fields\\n\",\n          5);\n  fputs_unlocked(v15, v14);\n  v16 = stdout;\n  v17 = dcgettext(\n          0LL,\n          \"  -s, --only-delimited    do not print lines not containing delimiters\\n\"\n          \"      --output-delimiter=STRING  use STRING as the output delimiter\\n\"\n          \"                            the default is to use the input delimiter\\n\",\n          5);\n  fputs_unlocked(v17, v16);\n  v18 = stdout;\n  v19 = dcgettext(0LL, \"  -z, --zero-terminated    line delimiter is NUL, not newline\\n\", 5);\n  fputs_unlocked(v19, v18);\n  v20 = stdout;\n  v21 = dcgettext(0LL, \"      --help     display this help and exit\\n\", 5);\n  fputs_unlocked(v21, v20);\n  v22 = stdout;\n  v23 = dcgettext(0LL, \"      --version  output version information and exit\\n\", 5);\n  fputs_unlocked(v23, v22);\n  v24 = stdout;\n  v25 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"Use one, and only one of -b, -c or -f.  Each LIST is made up of one\\n\"\n          \"range, or many ranges separated by commas.  Selected input is written\\n\"\n          \"in the same order that it is read, and is written exactly once.\\n\",\n          5);\n  fputs_unlocked(v25, v24);\n  v26 = stdout;\n  v27 = dcgettext(\n          0LL,\n          \"Each range is one of:\\n\"\n          \"\\n\"\n          \"  N     N'th byte, character or field, counted from 1\\n\"\n          \"  N-    from N'th byte, character or field, to end of line\\n\"\n          \"  N-M   from N'th to M'th (included) byte, character or field\\n\"\n          \"  -M    from first to M'th (included) byte, character or field\\n\",\n          5);\n  fputs_unlocked(v27, v26);\n  v38[0] = (__int64)\"[\";\n  v28 = v38;\n  v38[1] = (__int64)\"test invocation\";\n  v38[2] = (__int64)\"coreutils\";\n  v38[3] = (__int64)\"Multi-call invocation\";\n  v38[4] = (__int64)\"sha224sum\";\n  v38[5] = (__int64)\"sha2 utilities\";\n  v38[6] = (__int64)\"sha256sum\";\n  v38[7] = (__int64)\"sha2 utilities\";\n  v38[8] = (__int64)\"sha384sum\";\n  v38[9] = (__int64)\"sha2 utilities\";\n  v38[10] = (__int64)\"sha512sum\";\n  v38[11] = (__int64)\"sha2 utilities\";\n  v38[12] = 0LL;\n  v38[13] = 0LL;\n  do\n    v28 += 2;\n  while ( *v28 && strcmp(\"cut\", (const char *)*v28) );\n  v29 = (const char *)v28[1];\n  if ( v29 )\n  {\n    v30 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v30, &unk_4075D5);\n    v31 = setlocale(5, 0LL);\n    if ( !v31 || !strncmp(v31, \"en_\", 3uLL) )\n      goto LABEL_10;\n  }\n  else\n  {\n    v34 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v34, &unk_4075D5);\n    v35 = setlocale(5, 0LL);\n    if ( !v35 || !strncmp(v35, \"en_\", 3uLL) )\n    {\n      v29 = \"cut\";\n      v36 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n      __printf_chk(1LL, v36, \"https://www.gnu.org/software/coreutils/\");\n      goto LABEL_11;\n    }\n    v29 = \"cut\";\n  }\n  v37 = dcgettext(0LL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5);\n  __printf_chk(1LL, v37, \"cut\");\nLABEL_10:\n  v32 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n  __printf_chk(1LL, v32, \"https://www.gnu.org/software/coreutils/\");\nLABEL_11:\n  v33 = dcgettext(0LL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5);\n  __printf_chk(1LL, v33, v29);\nLABEL_3:\n  exit(status);\n}\n"
        },
        {
            "funcName": "compar_402ae0",
            "funcStartAddr": "0x402ae0",
            "funcEndAddr": "0x402af2",
            "decompiledFuncCode": "__int64 __fastcall compar(_DWORD *a1, _DWORD *a2)\n{\n  __int64 result; // rax\n\n  result = 0xFFFFFFFFLL;\n  if ( *a1 >= *a2 )\n    return *a1 > *a2;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_402B00",
            "funcStartAddr": "0x402b00",
            "funcEndAddr": "0x402bcc",
            "decompiledFuncCode": "char *__fastcall sub_402B00(__int64 a1, __int64 a2)\n{\n  size_t v3; // rdx\n  unsigned __int64 v4; // rcx\n  char *v5; // rax\n  char *result; // rax\n  __int64 v7; // rsi\n\n  v3 = nmemb;\n  v4 = qword_60B338;\n  v5 = (char *)base;\n  if ( nmemb == qword_60B338 )\n  {\n    if ( base )\n    {\n      if ( (unsigned __int64)qword_60B338 <= 0x555555555555554LL )\n      {\n        v4 = qword_60B338 + ((unsigned __int64)qword_60B338 >> 1) + 1;\n        v7 = 16 * v4;\nLABEL_6:\n        qword_60B338 = v4;\n        v5 = (char *)sub_4059D0(base, v7);\n        v3 = nmemb;\n        base = v5;\n        goto LABEL_2;\n      }\n    }\n    else\n    {\n      if ( !qword_60B338 )\n      {\n        v7 = 128LL;\n        v4 = 8LL;\n        goto LABEL_6;\n      }\n      v7 = 16 * qword_60B338;\n      if ( (qword_60B338 & 0x800000000000000LL) == 0 && !((unsigned __int64)qword_60B338 >> 60) )\n        goto LABEL_6;\n    }\n    sub_405BC0();\n  }\nLABEL_2:\n  result = &v5[16 * v3];\n  *(_QWORD *)result = a1;\n  *((_QWORD *)result + 1) = a2;\n  nmemb = v3 + 1;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_402BD0",
            "funcStartAddr": "0x402bd0",
            "funcEndAddr": "0x40316e",
            "decompiledFuncCode": "_QWORD *__fastcall sub_402BD0(const char *a1, char a2)\n{\n  char *v2; // r15\n  unsigned __int64 v3; // rdi\n  char v4; // bl\n  char v5; // bp\n  char v6; // r12\n  char v7; // r14\n  char v8; // r13\n  size_t v9; // r15\n  size_t v10; // rbx\n  unsigned __int64 *v11; // r14\n  __int64 v12; // rbp\n  __int64 v13; // r12\n  unsigned __int64 *v14; // rdi\n  char *v15; // rdx\n  unsigned __int64 v16; // rax\n  _QWORD *result; // rax\n  unsigned __int64 v18; // rax\n  unsigned __int64 v19; // rax\n  unsigned __int64 *v20; // rbp\n  __int64 v21; // rdi\n  unsigned __int64 v22; // rax\n  const char *v23; // rsi\n  char *v24; // rax\n  char *v25; // rbx\n  size_t v26; // rax\n  void *v27; // rbx\n  __int64 v28; // rbp\n  char *v29; // rax\n  __int64 v30; // rbx\n  char *v31; // rax\n  unsigned __int64 v32; // [rsp+8h] [rbp-50h]\n\n  v2 = (char *)a1;\n  if ( (a2 & 1) != 0 && !strcmp(a1, \"-\") )\n  {\n    v2 = (char *)(a1 + 1);\n    v3 = 1LL;\n    v4 = 1;\n  }\n  else\n  {\n    v3 = 0LL;\n    v4 = 0;\n  }\n  v5 = v4;\n  v6 = 0;\n  v7 = 0;\n  v32 = 1LL;\n  while ( 1 )\n  {\n    v8 = *v2;\n    if ( *v2 == 45 )\n    {\n      if ( !v5 )\n      {\n        v6 = v4 & (v3 == 0);\n        if ( !v6 )\n        {\n          if ( v4 )\n          {\n            v32 = v3;\n            v5 = v4;\n            v3 = 0LL;\n          }\n          else\n          {\n            v6 = 0;\n            v3 = 0LL;\n            v5 = 1;\n            v32 = 1LL;\n          }\n          goto LABEL_16;\n        }\n        if ( (a2 & 4) != 0 )\n          goto LABEL_69;\nLABEL_72:\n        v24 = dcgettext(0LL, \"fields are numbered from 1\", 5);\n        goto LABEL_63;\n      }\n      if ( (a2 & 4) != 0 )\n        v24 = dcgettext(0LL, \"invalid byte or character range\", 5);\n      else\n        v24 = dcgettext(0LL, \"invalid field range\", 5);\nLABEL_63:\n      error(0, 0, v24);\n      sub_4026B0(1);\n    }\n    if ( v8 == 44 || ((*__ctype_b_loc())[(unsigned __int8)v8] & 1) != 0 || !v8 )\n      break;\n    if ( (unsigned int)(v8 - 48) > 9 )\n    {\n      v30 = sub_4053B0(v2);\n      if ( (a2 & 4) != 0 )\n        v31 = dcgettext(0LL, \"invalid byte/character position %s\", 5);\n      else\n        v31 = dcgettext(0LL, \"invalid field value %s\", 5);\n      error(0, 0, v31, v30);\n      sub_4026B0(1);\n    }\n    if ( !v6 || !s )\n      s = v2;\n    if ( v5 )\n      v7 = v5;\n    else\n      v4 = 1;\n    if ( v3 > 0x1999999999999999LL || (v18 = v8 - 48 + 10 * v3, v18 < v3) || v18 == -1LL )\n    {\n      v25 = s;\n      v26 = strspn(s, \"0123456789\");\n      v27 = (void *)sub_405C00(v25, v26);\n      v28 = sub_4053B0(v27);\n      if ( (a2 & 4) != 0 )\n        v29 = dcgettext(0LL, \"byte/character offset %s is too large\", 5);\n      else\n        v29 = dcgettext(0LL, \"field number %s is too large\", 5);\n      error(0, 0, v29, v28);\n      free(v27);\n      sub_4026B0(1);\n    }\n    v3 = v8 - 48 + 10 * v3;\n    v6 = 1;\nLABEL_16:\n    ++v2;\n  }\n  if ( v5 )\n  {\n    if ( v4 )\n    {\n      if ( !v7 )\n        goto LABEL_13;\n    }\n    else if ( !v7 )\n    {\n      if ( (a2 & 1) == 0 )\n      {\n        v23 = \"invalid range with no endpoint: -\";\n        goto LABEL_62;\n      }\n      v32 = 1LL;\nLABEL_13:\n      sub_402B00(v32, -1LL);\nLABEL_14:\n      if ( !*v2 )\n        goto LABEL_24;\nLABEL_15:\n      v3 = 0LL;\n      v6 = 0;\n      v5 = 0;\n      v7 = 0;\n      v4 = 0;\n      goto LABEL_16;\n    }\n    if ( v32 > v3 )\n    {\n      v23 = \"invalid decreasing range\";\n      goto LABEL_62;\n    }\n    sub_402B00(v32, v3);\n    goto LABEL_14;\n  }\n  if ( !v3 )\n  {\n    if ( (a2 & 4) != 0 )\n    {\nLABEL_69:\n      v24 = dcgettext(0LL, \"byte/character positions are numbered from 1\", 5);\n      goto LABEL_63;\n    }\n    goto LABEL_72;\n  }\n  sub_402B00(v3, v3);\n  if ( *v2 )\n    goto LABEL_15;\nLABEL_24:\n  if ( !nmemb )\n  {\n    if ( (a2 & 4) != 0 )\n    {\n      v24 = dcgettext(0LL, \"missing list of byte/character positions\", 5);\n    }\n    else\n    {\n      v23 = \"missing list of fields\";\nLABEL_62:\n      v24 = dcgettext(0LL, v23, 5);\n    }\n    goto LABEL_63;\n  }\n  v9 = 0LL;\n  qsort(base, nmemb, 0x10uLL, (__compar_fn_t)compar);\n  v10 = nmemb;\n  v11 = (unsigned __int64 *)base;\n  while ( v9 < v10 )\n  {\nLABEL_27:\n    if ( ++v9 < v10 )\n    {\n      v12 = 2 * v9;\n      v13 = 16 * v9 - 16;\n      v14 = &v11[2 * v9];\n      v15 = (char *)v11 + v13;\n      v16 = *(unsigned __int64 *)((char *)v11 + v13 + 8);\n      if ( v16 >= *v14 )\n      {\n        while ( 1 )\n        {\n          if ( v14[1] >= v16 )\n            v16 = v14[1];\n          *((_QWORD *)v15 + 1) = v16;\n          memmove(v14, &v11[v12 + 2], 16 * (v10 - v9) - 16);\n          v11 = (unsigned __int64 *)base;\n          v10 = nmemb - 1;\n          nmemb = v10;\n          if ( v10 <= v9 )\n            break;\n          v15 = (char *)base + v13;\n          v14 = (unsigned __int64 *)((char *)base + v12 * 8);\n          v16 = *(_QWORD *)((char *)base + v13 + 8);\n          if ( *((_QWORD *)base + 2 * v9) > v16 )\n          {\n            if ( v9 < v10 )\n              goto LABEL_27;\n            goto LABEL_34;\n          }\n        }\n      }\n    }\n  }\nLABEL_34:\n  if ( (a2 & 2) != 0 )\n  {\n    base = 0LL;\n    v19 = *v11;\n    nmemb = 0LL;\n    qword_60B338 = 0LL;\n    if ( v19 > 1 )\n      sub_402B00(1LL, v19 - 1);\n    v20 = v11 + 2;\n    if ( v10 > 1 )\n    {\n      do\n      {\n        v21 = *(v20 - 1) + 1;\n        if ( v21 != *v20 )\n          sub_402B00(v21, *v20 - 1);\n        v20 += 2;\n      }\n      while ( &v11[2 * v10] != v20 );\n    }\n    v22 = v11[2 * v10 - 1];\n    if ( v22 != -1LL )\n      sub_402B00(v22 + 1, -1LL);\n    free(v11);\n    v10 = nmemb;\n    v11 = (unsigned __int64 *)base;\n  }\n  nmemb = v10 + 1;\n  base = (void *)sub_4059D0(v11, 16 * (v10 + 1));\n  result = (char *)base + 16 * nmemb - 16;\n  result[1] = -1LL;\n  *result = -1LL;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_403170",
            "funcStartAddr": "0x403170",
            "funcEndAddr": "0x4031a6",
            "decompiledFuncCode": "void sub_403170()\n{\n  nmemb = 0LL;\n  qword_60B338 = 0LL;\n  free(base);\n  base = 0LL;\n}\n"
        },
        {
            "funcName": "sub_4031D0",
            "funcStartAddr": "0x4031d0",
            "funcEndAddr": "0x40326e",
            "decompiledFuncCode": "__int64 sub_4031D0()\n{\n  int *v0; // rax\n  int *v1; // rbx\n  __int64 result; // rax\n  char *v3; // rax\n  const char *v4; // rbp\n  const char *v5; // rax\n\n  if ( (unsigned int)sub_406CD0(stdout) )\n  {\n    v0 = __errno_location();\n    v1 = v0;\n    if ( !byte_60B340 || *v0 != 32 )\n    {\n      v3 = dcgettext(0LL, \"write error\", 5);\n      v4 = v3;\n      if ( qword_60B348 )\n      {\n        v5 = (const char *)sub_405200();\n        error(0, *v1, \"%s: %s\", v5, v4);\n      }\n      else\n      {\n        error(0, *v1, \"%s\", v3);\n      }\nLABEL_8:\n      _exit(status);\n    }\n  }\n  result = sub_406CD0(stderr);\n  if ( (_DWORD)result )\n    goto LABEL_8;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_403280",
            "funcStartAddr": "0x403280",
            "funcEndAddr": "0x4032a1",
            "decompiledFuncCode": "void __fastcall sub_403280(FILE *a1, int a2)\n{\n  int v2; // eax\n\n  if ( a1 )\n  {\n    v2 = fileno(a1);\n    posix_fadvise(v2, 0LL, 0LL, a2);\n  }\n}\n"
        },
        {
            "funcName": "sub_4032B0",
            "funcStartAddr": "0x4032b0",
            "funcEndAddr": "0x4035fd",
            "decompiledFuncCode": "__int64 __fastcall sub_4032B0(\n        void **a1,\n        size_t *a2,\n        size_t a3,\n        unsigned __int64 a4,\n        unsigned int a5,\n        unsigned int a6,\n        _IO_FILE *stream)\n{\n  size_t v7; // r12\n  unsigned __int64 v8; // rbp\n  unsigned int v9; // ebx\n  char *v10; // rbx\n  size_t v11; // r13\n  unsigned __int64 v12; // rcx\n  bool v13; // r13\n  size_t v14; // rcx\n  __int64 v15; // rax\n  const void *v16; // r15\n  char *IO_read_ptr; // rax\n  __int64 result; // rax\n  size_t v19; // rdx\n  __int64 v20; // rbx\n  char *v21; // rax\n  __int64 v22; // rax\n  __int64 v23; // rax\n  char *ptr; // [rsp+10h] [rbp-78h]\n  int v27; // [rsp+18h] [rbp-70h]\n  size_t v29; // [rsp+20h] [rbp-68h]\n  size_t v30; // [rsp+20h] [rbp-68h]\n  size_t n[8]; // [rsp+48h] [rbp-40h] BYREF\n\n  v7 = *a2;\n  ptr = (char *)*a1;\n  if ( !*a1 )\n  {\n    v7 = 64LL;\n    if ( a4 <= 0x40 )\n      v7 = a4;\n    ptr = (char *)malloc(v7);\n    if ( !ptr )\n      return -1LL;\n  }\n  if ( v7 < a3 || (v8 = v7 - a3, v7 >= a4 && v7 == a3) )\n  {\nLABEL_28:\n    *a1 = ptr;\n    *a2 = v7;\n    return -1LL;\n  }\n  if ( a5 == -1 )\n  {\n    a5 = a6;\n  }\n  else\n  {\n    v9 = a6;\n    if ( a6 == -1 )\n      v9 = a5;\n    a6 = v9;\n  }\n  v10 = &ptr[a3];\n  while ( 1 )\n  {\n    v15 = sub_405CE0(stream, n);\n    v16 = (const void *)v15;\n    if ( v15 )\n    {\n      v11 = n[0];\n      if ( a5 == -1 || (v22 = sub_403600(v15, a5, a6, n[0])) == 0 )\n      {\n        v12 = v11 + 1;\n        v13 = 0;\n      }\n      else\n      {\n        v23 = v22 - (_QWORD)v16;\n        v13 = 1;\n        v12 = v23 + 2;\n        n[0] = v23 + 1;\n      }\n      goto LABEL_11;\n    }\n    IO_read_ptr = stream->_IO_read_ptr;\n    if ( IO_read_ptr >= stream->_IO_read_end )\n      break;\n    stream->_IO_read_ptr = IO_read_ptr + 1;\n    v27 = (unsigned __int8)*IO_read_ptr;\nLABEL_25:\n    v12 = 2LL;\n    n[0] = 1LL;\n    v13 = a6 == v27 || a5 == v27;\nLABEL_11:\n    if ( v7 < a4 && v8 < v12 )\n    {\n      v19 = 2 * v7;\n      if ( v7 <= 0x3F )\n        v19 = v7 + 64;\n      v20 = v10 - ptr;\n      if ( v19 - v20 < v12 )\n        v19 = v20 + v12;\n      if ( v7 >= v19 || v19 > a4 )\n        v19 = a4;\n      if ( (__int64)(v19 - a3) < 0 )\n      {\n        v19 = a3 + 0x8000000000000000LL;\n        if ( v7 == a3 + 0x8000000000000000LL )\n          goto LABEL_28;\n      }\n      v30 = v19;\n      v8 = v19 - v20;\n      v21 = (char *)realloc(ptr, v19);\n      if ( !v21 )\n        goto LABEL_28;\n      v10 = &v21[v20];\n      ptr = v21;\n      v7 = v30;\n    }\n    if ( v8 > 1 )\n    {\n      v14 = v8 - 1;\n      if ( n[0] <= v8 - 1 )\n        v14 = n[0];\n      if ( v16 )\n      {\n        v29 = v14;\n        memcpy(v10, v16, v14);\n        v14 = v29;\n      }\n      else\n      {\n        *v10 = v27;\n      }\n      v10 += v14;\n      v8 -= v14;\n    }\n    if ( v16 && (unsigned int)sub_406D30(stream) )\n      goto LABEL_28;\n    if ( v13 )\n      goto LABEL_44;\n  }\n  v27 = __uflow(stream);\n  if ( v27 != -1 )\n    goto LABEL_25;\n  if ( v10 == ptr )\n    goto LABEL_28;\nLABEL_44:\n  *v10 = 0;\n  *a1 = ptr;\n  result = v10 - &ptr[a3];\n  *a2 = v7;\n  if ( !result )\n    return -1LL;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_403600",
            "funcStartAddr": "0x406cc0",
            "funcEndAddr": "0x406cc4",
            "decompiledFuncCode": "char *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n\nchar *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n\nchar *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n\nchar *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n\nchar *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n\nchar *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n\nchar *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_403600",
            "funcStartAddr": "0x406cc0",
            "funcEndAddr": "0x406cc4",
            "decompiledFuncCode": "char *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n\nchar *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n\nchar *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n\nchar *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n\nchar *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n\nchar *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n\nchar *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_403600",
            "funcStartAddr": "0x406cc0",
            "funcEndAddr": "0x406cc4",
            "decompiledFuncCode": "char *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n\nchar *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n\nchar *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n\nchar *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n\nchar *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n\nchar *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n\nchar *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_403600",
            "funcStartAddr": "0x406cc0",
            "funcEndAddr": "0x406cc4",
            "decompiledFuncCode": "char *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n\nchar *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n\nchar *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n\nchar *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n\nchar *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n\nchar *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n\nchar *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_403600",
            "funcStartAddr": "0x406cc0",
            "funcEndAddr": "0x406cc4",
            "decompiledFuncCode": "char *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n\nchar *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n\nchar *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n\nchar *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n\nchar *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n\nchar *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n\nchar *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_403600",
            "funcStartAddr": "0x406cc0",
            "funcEndAddr": "0x406cc4",
            "decompiledFuncCode": "char *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n\nchar *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n\nchar *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n\nchar *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n\nchar *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n\nchar *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n\nchar *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_403600",
            "funcStartAddr": "0x406cc0",
            "funcEndAddr": "0x406cc4",
            "decompiledFuncCode": "char *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n\nchar *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n\nchar *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n\nchar *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n\nchar *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n\nchar *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n\nchar *__fastcall sub_403600(_BYTE *a1, __int16 a2, __int16 a3, unsigned __int64 a4)\n{\n  char v4; // r10\n  char v5; // r9\n  __int64 v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rdx\n  char *v9; // rdi\n  char v10; // si\n  char *result; // rax\n  unsigned __int64 v12; // rdx\n  __int64 v13; // r9\n  char *v14; // rcx\n  char *v15; // rdi\n\n  if ( (_BYTE)a2 == (_BYTE)a3 )\n  {\n    v12 = a4;\n    if ( a4 )\n    {\n      if ( ((unsigned __int8)a1 & 7) != 0 )\n      {\n        if ( (_BYTE)a2 == *a1 )\n          return a1;\n        while ( 1 )\n        {\n          ++a1;\n          if ( !--v12 )\n            break;\n          if ( ((unsigned __int8)a1 & 7) == 0 )\n            goto LABEL_36;\n          if ( *a1 == (_BYTE)a2 )\n            return a1;\n        }\n      }\n      else\n      {\nLABEL_36:\n        v13 = ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 32) | ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)((unsigned __int8)a2 << 8);\n        if ( v12 <= 7\n          || (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n        {\n          goto LABEL_42;\n        }\n        while ( 1 )\n        {\n          v12 -= 8LL;\n          a1 += 8;\n          if ( v12 <= 7 )\n            break;\n          if ( (((v13 ^ *(_QWORD *)a1) - 0x101010101010101LL) & ~(v13 ^ *(_QWORD *)a1) & 0x8080808080808080LL) != 0 )\n            goto LABEL_42;\n        }\n        if ( v12 )\n        {\nLABEL_42:\n          if ( (_BYTE)a2 == *a1 )\n            return a1;\n          v14 = a1 + 1;\n          v15 = &a1[v12];\n          while ( 1 )\n          {\n            result = v14;\n            if ( v14 == v15 )\n              break;\n            if ( *v14++ == (_BYTE)a2 )\n              return result;\n          }\n        }\n      }\n    }\n    return 0LL;\n  }\n  v4 = a2;\n  v5 = a3;\n  if ( a4 && ((unsigned __int8)a1 & 7) != 0 )\n  {\n    if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n      return a1;\n    while ( 1 )\n    {\n      ++a1;\n      if ( !--a4 || ((unsigned __int8)a1 & 7) == 0 )\n        break;\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n    }\n  }\n  v6 = ((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8) | ((((__int64)((unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 16) | (unsigned __int8)a3 | (unsigned int)(unsigned __int16)(a3 << 8)) << 32);\n  v7 = ((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8) | ((((__int64)((unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 16) | (unsigned __int8)a2 | (unsigned int)(unsigned __int16)(a2 << 8)) << 32);\n  if ( a4 > 7 )\n  {\n    if ( ((~(*(_QWORD *)a1 ^ v7) & ((*(_QWORD *)a1 ^ v7) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                 - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n    {\nLABEL_17:\n      if ( *a1 == (_BYTE)a3 || *a1 == (_BYTE)a2 )\n        return a1;\n      v8 = a1 + 1;\n      v9 = &a1[a4];\n      while ( 1 )\n      {\n        result = v8;\n        if ( v8 == v9 )\n          break;\n        v10 = *v8++;\n        if ( v10 == v4 || v10 == v5 )\n          return result;\n      }\n      return 0LL;\n    }\n    while ( 1 )\n    {\n      a4 -= 8LL;\n      a1 += 8;\n      if ( a4 <= 7 )\n        break;\n      if ( ((~(v7 ^ *(_QWORD *)a1) & ((v7 ^ *(_QWORD *)a1) - 0x101010101010101LL) | ((v6 ^ *(_QWORD *)a1)\n                                                                                   - 0x101010101010101LL) & ~(v6 ^ *(_QWORD *)a1)) & 0x8080808080808080LL) != 0 )\n        goto LABEL_17;\n    }\n  }\n  if ( a4 )\n    goto LABEL_17;\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_403790",
            "funcStartAddr": "0x403790",
            "funcEndAddr": "0x403829",
            "decompiledFuncCode": "char *__fastcall sub_403790(const char *a1)\n{\n  __int64 v1; // rbx\n  char *result; // rax\n\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v1 = (__int64)a1;\n  result = strrchr(a1, 47);\n  if ( result )\n  {\n    if ( result + 1 - a1 > 6 && !memcmp(result - 6, \"/.libs/\", 7uLL) )\n    {\n      v1 = (__int64)(result + 1);\n      if ( !memcmp(result + 1, \"lt-\", 3uLL) )\n      {\n        v1 = (__int64)(result + 4);\n        program_invocation_short_name = (__int64)(result + 4);\n      }\n    }\n  }\n  qword_60B350 = v1;\n  program_invocation_name = v1;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_403830",
            "funcStartAddr": "0x403830",
            "funcEndAddr": "0x403922",
            "decompiledFuncCode": "char *__fastcall sub_403830(char *msgid, int a2)\n{\n  char *v2; // rbx\n  _BYTE *v4; // rax\n  bool v5; // zf\n  const char *v6; // rbx\n\n  v2 = dcgettext(0LL, msgid, 5);\n  if ( msgid != v2 )\n    return v2;\n  v4 = (_BYTE *)sub_406EE0();\n  if ( (*v4 & 0xDF) == 85 )\n  {\n    if ( (v4[1] & 0xDF) == 84 && (v4[2] & 0xDF) == 70 && v4[3] == 45 && v4[4] == 56 && !v4[5] )\n    {\n      v5 = *v2 == 96;\n      v2 = (char *)&unk_408301;\n      if ( !v5 )\n        return (char *)&unk_4082F6;\n      return v2;\n    }\n  }\n  else if ( (*v4 & 0xDF) == 71\n         && (v4[1] & 0xDF) == 66\n         && v4[2] == 49\n         && v4[3] == 56\n         && v4[4] == 48\n         && v4[5] == 51\n         && v4[6] == 48\n         && !v4[7] )\n  {\n    v5 = *v2 == 96;\n    v2 = (char *)&unk_4082FD;\n    if ( !v5 )\n      return (char *)&unk_4082FA;\n    return v2;\n  }\n  v6 = \"\\\"\";\n  if ( a2 != 9 )\n    return \"'\";\n  return (char *)v6;\n}\n"
        },
        {
            "funcName": "sub_403930",
            "funcStartAddr": "0x401a20",
            "funcEndAddr": "0x401a25",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_403930(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_403930((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_403930((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_406B40((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_403930((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_403830(\"`\", a5);\n        v51 = sub_403830(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n\nunsigned __int64 __fastcall sub_403930(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_403930((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_403930((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_406B40((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_403930((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_403830(\"`\", a5);\n        v51 = sub_403830(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n"
        },
        {
            "funcName": "sub_403930",
            "funcStartAddr": "0x401a20",
            "funcEndAddr": "0x401a25",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_403930(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_403930((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_403930((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_406B40((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_403930((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_403830(\"`\", a5);\n        v51 = sub_403830(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n\nunsigned __int64 __fastcall sub_403930(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_403930((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_403930((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_406B40((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_403930((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_403830(\"`\", a5);\n        v51 = sub_403830(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n"
        },
        {
            "funcName": "sub_404B60",
            "funcStartAddr": "0x401a25",
            "funcEndAddr": "0x401a2a",
            "decompiledFuncCode": "_BYTE *__fastcall sub_404B60(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)off_60B298;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_60B2B0 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_405BC0();\n    v9 = 16LL * (a1 + 1);\n    if ( off_60B298 == &xmmword_60B2A0 )\n    {\n      v7 = (__m128i *)sub_4059D0(0LL, v9);\n      off_60B298 = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_60B2A0);\n    }\n    else\n    {\n      off_60B298 = (void *)sub_4059D0(off_60B298, v9);\n      v7 = (__m128i *)off_60B298;\n    }\n    memset(&v7[dword_60B2B0], 0, 16LL * (a1 + 1 - dword_60B2B0));\n    dword_60B2B0 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_403930(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_60B360 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_405970(v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_403930(v14, v13, a2, a3, v15, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n\n_BYTE *__fastcall sub_404B60(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)off_60B298;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_60B2B0 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_405BC0();\n    v9 = 16LL * (a1 + 1);\n    if ( off_60B298 == &xmmword_60B2A0 )\n    {\n      v7 = (__m128i *)sub_4059D0(0LL, v9);\n      off_60B298 = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_60B2A0);\n    }\n    else\n    {\n      off_60B298 = (void *)sub_4059D0(off_60B298, v9);\n      v7 = (__m128i *)off_60B298;\n    }\n    memset(&v7[dword_60B2B0], 0, 16LL * (a1 + 1 - dword_60B2B0));\n    dword_60B2B0 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_403930(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_60B360 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_405970(v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_403930(v14, v13, a2, a3, v15, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n"
        },
        {
            "funcName": "sub_404B60",
            "funcStartAddr": "0x401a25",
            "funcEndAddr": "0x401a2a",
            "decompiledFuncCode": "_BYTE *__fastcall sub_404B60(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)off_60B298;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_60B2B0 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_405BC0();\n    v9 = 16LL * (a1 + 1);\n    if ( off_60B298 == &xmmword_60B2A0 )\n    {\n      v7 = (__m128i *)sub_4059D0(0LL, v9);\n      off_60B298 = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_60B2A0);\n    }\n    else\n    {\n      off_60B298 = (void *)sub_4059D0(off_60B298, v9);\n      v7 = (__m128i *)off_60B298;\n    }\n    memset(&v7[dword_60B2B0], 0, 16LL * (a1 + 1 - dword_60B2B0));\n    dword_60B2B0 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_403930(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_60B360 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_405970(v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_403930(v14, v13, a2, a3, v15, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n\n_BYTE *__fastcall sub_404B60(int a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __m128i *v7; // rbx\n  int *v8; // r13\n  __int64 v9; // rsi\n  unsigned __int64 *v10; // rbx\n  _BYTE *v11; // r12\n  unsigned __int64 v12; // rax\n  unsigned __int64 v13; // rsi\n  _BYTE *v14; // rax\n  int v15; // r8d\n  unsigned __int64 v18; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  int v20; // [rsp+18h] [rbp-40h]\n  int v21; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v7 = (__m128i *)off_60B298;\n  v8 = v6;\n  v20 = *v6;\n  if ( a1 < 0 )\n    abort();\n  if ( dword_60B2B0 <= a1 )\n  {\n    if ( a1 == 0x7FFFFFFF )\n      sub_405BC0();\n    v9 = 16LL * (a1 + 1);\n    if ( off_60B298 == &xmmword_60B2A0 )\n    {\n      v7 = (__m128i *)sub_4059D0(0LL, v9);\n      off_60B298 = v7;\n      *v7 = _mm_load_si128((const __m128i *)&xmmword_60B2A0);\n    }\n    else\n    {\n      off_60B298 = (void *)sub_4059D0(off_60B298, v9);\n      v7 = (__m128i *)off_60B298;\n    }\n    memset(&v7[dword_60B2B0], 0, 16LL * (a1 + 1 - dword_60B2B0));\n    dword_60B2B0 = a1 + 1;\n  }\n  v10 = (unsigned __int64 *)&v7[a1];\n  v11 = (_BYTE *)v10[1];\n  v21 = *(_DWORD *)(a4 + 4) | 1;\n  v18 = *v10;\n  v12 = sub_403930(v11, *v10, a2, a3, *(_DWORD *)a4, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v18 <= v12 )\n  {\n    v13 = v12 + 1;\n    *v10 = v12 + 1;\n    if ( v11 != (_BYTE *)&unk_60B360 )\n    {\n      v19 = v12 + 1;\n      free(v11);\n      v13 = v19;\n    }\n    v14 = (_BYTE *)sub_405970(v13);\n    v15 = *(_DWORD *)a4;\n    v10[1] = (unsigned __int64)v14;\n    v11 = v14;\n    sub_403930(v14, v13, a2, a3, v15, v21, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v8 = v20;\n  return v11;\n}\n"
        },
        {
            "funcName": "sub_404D00",
            "funcStartAddr": "0x404d00",
            "funcEndAddr": "0x404d34",
            "decompiledFuncCode": "__int64 __fastcall sub_404D00(__int128 *a1)\n{\n  __int128 *v1; // rbx\n  int *v2; // rax\n  int v3; // r12d\n  int *v4; // rbp\n  __int64 result; // rax\n\n  v1 = a1;\n  v2 = __errno_location();\n  v3 = *v2;\n  v4 = v2;\n  if ( !a1 )\n    v1 = &xmmword_60B460;\n  result = sub_405B70(v1, 0x38uLL);\n  *v4 = v3;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_404DF0",
            "funcStartAddr": "0x404df0",
            "funcEndAddr": "0x404e62",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_404DF0(_BYTE *a1, unsigned __int64 a2, __int64 a3, unsigned __int64 a4, __int128 *a5)\n{\n  __int128 *v6; // rbx\n  int *v7; // rax\n  int v8; // r12d\n  int *v9; // rbp\n  unsigned __int64 result; // rax\n\n  v6 = a5;\n  if ( !a5 )\n    v6 = &xmmword_60B460;\n  v7 = __errno_location();\n  v8 = *v7;\n  v9 = v7;\n  result = sub_403930(\n             a1,\n             a2,\n             a3,\n             a4,\n             *(_DWORD *)v6,\n             *((_DWORD *)v6 + 1),\n             (__int64)v6 + 8,\n             *((char **)v6 + 5),\n             *((char **)v6 + 6));\n  *v9 = v8;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_404E70",
            "funcStartAddr": "0x404e70",
            "funcEndAddr": "0x404f51",
            "decompiledFuncCode": "_BYTE *__fastcall sub_404E70(__int64 a1, unsigned __int64 a2, unsigned __int64 *a3, __int128 *a4)\n{\n  __int128 *v5; // rbx\n  int *v6; // r13\n  int v7; // ebp\n  int v9; // [rsp+Ch] [rbp-5Ch]\n  _BYTE *v10; // [rsp+10h] [rbp-58h]\n  unsigned __int64 v11; // [rsp+28h] [rbp-40h]\n\n  v5 = a4;\n  if ( !a4 )\n    v5 = &xmmword_60B460;\n  v6 = __errno_location();\n  v7 = *((_DWORD *)v5 + 1) | (a3 == 0LL);\n  v9 = *v6;\n  v11 = sub_403930(0LL, 0LL, a1, a2, *(_DWORD *)v5, v7, (__int64)v5 + 8, *((char **)v5 + 5), *((char **)v5 + 6));\n  v10 = (_BYTE *)sub_405970(v11 + 1);\n  sub_403930(v10, v11 + 1, a1, a2, *(_DWORD *)v5, v7, (__int64)v5 + 8, *((char **)v5 + 5), *((char **)v5 + 6));\n  *v6 = v9;\n  if ( a3 )\n    *a3 = v11;\n  return v10;\n}\n"
        },
        {
            "funcName": "sub_404F70",
            "funcStartAddr": "0x404f70",
            "funcEndAddr": "0x405005",
            "decompiledFuncCode": "void sub_404F70()\n{\n  __int128 *v0; // r12\n  void **v1; // rbx\n  void **v2; // rbp\n  void *v3; // rdi\n  void *v4; // rdi\n\n  v0 = (__int128 *)off_60B298;\n  if ( dword_60B2B0 > 1 )\n  {\n    v1 = (void **)((char *)off_60B298 + 24);\n    v2 = (void **)((char *)off_60B298 + 16 * (unsigned int)(dword_60B2B0 - 2) + 40);\n    do\n    {\n      v3 = *v1;\n      v1 += 2;\n      free(v3);\n    }\n    while ( v1 != v2 );\n  }\n  v4 = (void *)*((_QWORD *)v0 + 1);\n  if ( v4 != &unk_60B360 )\n  {\n    free(v4);\n    *(_QWORD *)&xmmword_60B2A0 = 256LL;\n    *((_QWORD *)&xmmword_60B2A0 + 1) = &unk_60B360;\n  }\n  if ( v0 != &xmmword_60B2A0 )\n  {\n    free(v0);\n    off_60B298 = &xmmword_60B2A0;\n  }\n  dword_60B2B0 = 1;\n}\n"
        },
        {
            "funcName": "sub_405080",
            "funcStartAddr": "0x401a2a",
            "funcEndAddr": "0x401a2f",
            "decompiledFuncCode": "_BYTE *__fastcall sub_405080(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_404B60(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_405080(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_404B60(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_405080",
            "funcStartAddr": "0x401a2a",
            "funcEndAddr": "0x401a2f",
            "decompiledFuncCode": "_BYTE *__fastcall sub_405080(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_404B60(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_405080(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_404B60(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_4050F0",
            "funcStartAddr": "0x401a2f",
            "funcEndAddr": "0x401a34",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4050F0(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_404B60(a1, a3, a4, (__int64)v5);\n}\n\n_BYTE *__fastcall sub_4050F0(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_404B60(a1, a3, a4, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_4050F0",
            "funcStartAddr": "0x401a2f",
            "funcEndAddr": "0x401a34",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4050F0(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_404B60(a1, a3, a4, (__int64)v5);\n}\n\n_BYTE *__fastcall sub_4050F0(int a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_404B60(a1, a3, a4, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_405180",
            "funcStartAddr": "0x405180",
            "funcEndAddr": "0x4051f0",
            "decompiledFuncCode": "_BYTE *__fastcall sub_405180(__int64 a1, unsigned __int64 a2, unsigned __int8 a3)\n{\n  _DWORD *v3; // r8\n  __int128 v5[3]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+30h] [rbp-18h]\n\n  v6 = qword_60B490;\n  v5[0] = (__int128)_mm_load_si128((const __m128i *)&xmmword_60B460);\n  v5[1] = (__int128)_mm_load_si128((const __m128i *)&xmmword_60B470);\n  v3 = (_DWORD *)v5 + (a3 >> 5) + 2;\n  v5[2] = (__int128)_mm_load_si128((const __m128i *)&xmmword_60B480);\n  *v3 ^= (((*v3 >> (a3 & 0x1F)) & 1) == 0) << (a3 & 0x1F);\n  return sub_404B60(0, a1, a2, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_405200",
            "funcStartAddr": "0x405200",
            "funcEndAddr": "0x405211",
            "decompiledFuncCode": "_BYTE *__fastcall sub_405200(__int64 a1)\n{\n  return sub_405180(a1, 0xFFFFFFFFFFFFFFFFLL, 0x3Au);\n}\n"
        },
        {
            "funcName": "sub_405230",
            "funcStartAddr": "0x401a34",
            "funcEndAddr": "0x401a39",
            "decompiledFuncCode": "_BYTE *__fastcall sub_405230(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_404B60(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_405230(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_404B60(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_405230",
            "funcStartAddr": "0x401a34",
            "funcEndAddr": "0x401a39",
            "decompiledFuncCode": "_BYTE *__fastcall sub_405230(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_404B60(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_405230(int a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_404B60(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_4052A0",
            "funcStartAddr": "0x4052a0",
            "funcEndAddr": "0x40530c",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4052A0(int a1, __int64 a2, __int64 a3, __int64 a4, unsigned __int64 a5)\n{\n  __int128 v6[2]; // [rsp+0h] [rbp-48h] BYREF\n  __m128i si128; // [rsp+20h] [rbp-28h]\n  __int64 v8; // [rsp+30h] [rbp-18h]\n\n  v6[0] = (__int128)_mm_load_si128((const __m128i *)&xmmword_60B460);\n  v6[1] = (__int128)_mm_load_si128((const __m128i *)&xmmword_60B470);\n  si128 = _mm_load_si128((const __m128i *)&xmmword_60B480);\n  v8 = qword_60B490;\n  LODWORD(v6[0]) = 10;\n  if ( !a2 || !a3 )\n    abort();\n  si128.m128i_i64[1] = a2;\n  v8 = a3;\n  return sub_404B60(a1, a4, a5, (__int64)v6);\n}\n"
        },
        {
            "funcName": "sub_4053B0",
            "funcStartAddr": "0x4053b0",
            "funcEndAddr": "0x4053c6",
            "decompiledFuncCode": "_BYTE *__fastcall sub_4053B0(__int64 a1)\n{\n  return sub_404B60(0, a1, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_60B260);\n}\n"
        },
        {
            "funcName": "sub_4053D0",
            "funcStartAddr": "0x401a39",
            "funcEndAddr": "0x401a3e",
            "decompiledFuncCode": "__int64 __fastcall sub_4053D0(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v14 = *a5;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *a5;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *a5;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = a5[3];\n      v21 = *a5;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = a5[3];\n      v21 = *a5;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 7LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 8LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *a5;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *a5;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n\n__int64 __fastcall sub_4053D0(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v14 = *a5;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *a5;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *a5;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = a5[3];\n      v21 = *a5;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = a5[3];\n      v21 = *a5;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 7LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 8LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *a5;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *a5;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n"
        },
        {
            "funcName": "sub_4053D0",
            "funcStartAddr": "0x401a39",
            "funcEndAddr": "0x401a3e",
            "decompiledFuncCode": "__int64 __fastcall sub_4053D0(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v14 = *a5;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *a5;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *a5;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = a5[3];\n      v21 = *a5;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = a5[3];\n      v21 = *a5;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 7LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 8LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *a5;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *a5;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n\n__int64 __fastcall sub_4053D0(FILE *stream, __int64 a2, __int64 a3, __int64 a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rbx\n  char *v11; // rax\n  const char *v13; // rsi\n  __int64 v14; // rbx\n  char *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  __int64 v18; // rbx\n  char *v19; // rax\n  __int64 v20; // r14\n  __int64 v21; // rbx\n  char *v22; // rax\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v14 = *a5;\n      v15 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v15, v14);\n    case 2LL:\n      v16 = *a5;\n      v17 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16);\n    case 3LL:\n      v18 = *a5;\n      v19 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v19, v18);\n    case 4LL:\n      v20 = a5[3];\n      v21 = *a5;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v20 = a5[3];\n      v21 = *a5;\n      v22 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v22, v21);\n      return v20;\n    case 6LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 7LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 8LL:\n      v10 = *a5;\n      v11 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n    case 9LL:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v10 = *a5;\n      goto LABEL_8;\n    default:\n      v13 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v10 = *a5;\nLABEL_8:\n      v11 = dcgettext(0LL, v13, 5);\n      return __fprintf_chk(stream, 1LL, v11, v10);\n  }\n}\n"
        },
        {
            "funcName": "sub_4057D0",
            "funcStartAddr": "0x4057d0",
            "funcEndAddr": "0x405830",
            "decompiledFuncCode": "__int64 __fastcall sub_4057D0(FILE *a1, __int64 a2, __int64 a3, __int64 a4, int *a5)\n{\n  __int64 i; // r9\n  __int64 *v6; // r10\n  __int64 v7; // rax\n  unsigned int v8; // eax\n  __int64 *v9; // r10\n  __int64 v10; // rax\n  __int64 v12[11]; // [rsp+0h] [rbp-58h] BYREF\n\n  for ( i = 0LL; i != 10; ++i )\n  {\n    v8 = *a5;\n    if ( (unsigned int)*a5 <= 0x2F )\n    {\n      v6 = (__int64 *)(*((_QWORD *)a5 + 2) + v8);\n      *a5 = v8 + 8;\n      v7 = *v6;\n      v12[i] = *v6;\n      if ( !v7 )\n        return sub_4053D0(a1, a2, a3, a4, v12, i);\n      continue;\n    }\n    v9 = (__int64 *)*((_QWORD *)a5 + 1);\n    *((_QWORD *)a5 + 1) = v9 + 1;\n    v10 = *v9;\n    v12[i] = *v9;\n    if ( !v10 )\n      break;\n  }\n  return sub_4053D0(a1, a2, a3, a4, v12, i);\n}\n"
        },
        {
            "funcName": "sub_405830",
            "funcStartAddr": "0x405830",
            "funcEndAddr": "0x4058ec",
            "decompiledFuncCode": "__int64 __fastcall sub_405830(FILE *a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, char a7)\n{\n  char *v7; // r10\n  unsigned int v8; // r8d\n  __int64 i; // r9\n  __int64 v10; // rax\n  __int64 v11; // rax\n  __int64 *v12; // rax\n  __int64 v13; // rax\n  __int64 v15[17]; // [rsp+20h] [rbp-88h] BYREF\n\n  v15[14] = a5;\n  v7 = &a7;\n  v8 = 32;\n  v15[15] = a6;\n  for ( i = 0LL; i != 10; ++i )\n  {\n    if ( v8 <= 0x2F )\n    {\n      v10 = v8;\n      v8 += 8;\n      v11 = *(__int64 *)((char *)&v15[10] + v10);\n      v15[i] = v11;\n      if ( !v11 )\n        return sub_4053D0(a1, a2, a3, a4, v15, i);\n      continue;\n    }\n    v12 = (__int64 *)v7;\n    v7 += 8;\n    v13 = *v12;\n    v15[i] = v13;\n    if ( !v13 )\n      break;\n  }\n  return sub_4053D0(a1, a2, a3, a4, v15, i);\n}\n"
        },
        {
            "funcName": "sub_4058F0",
            "funcStartAddr": "0x4058f0",
            "funcEndAddr": "0x405964",
            "decompiledFuncCode": "int sub_4058F0()\n{\n  char *v0; // rax\n  char *v1; // rax\n  FILE *v2; // rbx\n  char *v3; // rax\n\n  v0 = dcgettext(0LL, \"\\nReport bugs to: %s\\n\", 5);\n  __printf_chk(1LL, v0, \"bug-coreutils@gnu.org\");\n  v1 = dcgettext(0LL, \"%s home page: <%s>\\n\", 5);\n  __printf_chk(1LL, v1, &unk_4075D5);\n  v2 = stdout;\n  v3 = dcgettext(0LL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5);\n  return fputs_unlocked(v3, v2);\n}\n"
        },
        {
            "funcName": "sub_405970",
            "funcStartAddr": "0x405970",
            "funcEndAddr": "0x40598a",
            "decompiledFuncCode": "void *__fastcall sub_405970(size_t a1)\n{\n  void *result; // rax\n\n  result = malloc(a1);\n  if ( !result )\n  {\n    if ( a1 )\n      sub_405BC0();\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4059C0",
            "funcStartAddr": "0x4059c0",
            "funcEndAddr": "0x4059c2",
            "decompiledFuncCode": "// attributes: thunk\nvoid *__fastcall sub_4059C0(size_t a1)\n{\n  return sub_405970(a1);\n}\n"
        },
        {
            "funcName": "sub_4059D0",
            "funcStartAddr": "0x4059d0",
            "funcEndAddr": "0x405a06",
            "decompiledFuncCode": "void *__fastcall sub_4059D0(void *a1, size_t a2)\n{\n  void *result; // rax\n\n  if ( !a2 && a1 )\n  {\n    free(a1);\n    return 0LL;\n  }\n  else\n  {\n    result = realloc(a1, a2);\n    if ( !result )\n    {\n      if ( a2 )\n        sub_405BC0();\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_405B20",
            "funcStartAddr": "0x405b20",
            "funcEndAddr": "0x405b37",
            "decompiledFuncCode": "void *__fastcall sub_405B20(size_t n)\n{\n  void *v1; // rax\n\n  v1 = sub_405970(n);\n  return memset(v1, 0, n);\n}\n"
        },
        {
            "funcName": "sub_405B40",
            "funcStartAddr": "0x405b40",
            "funcEndAddr": "0x405b6e",
            "decompiledFuncCode": "__int64 __fastcall sub_405B40(unsigned __int64 a1, unsigned __int64 a2)\n{\n  unsigned __int128 v2; // rax\n\n  v2 = a2 * (unsigned __int128)a1;\n  BYTE8(v2) = *((_QWORD *)&v2 + 1) != 0LL;\n  if ( (v2 & 0x8000000000000000LL) != 0LL\n    || (*((_QWORD *)&v2 + 1) = BYTE8(v2), !is_mul_ok(a2, a1))\n    || (*(_QWORD *)&v2 = calloc(a1, a2), !(_QWORD)v2) )\n  {\n    sub_405BC0(a1, a2, *((_QWORD *)&v2 + 1));\n  }\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_405B70",
            "funcStartAddr": "0x405b70",
            "funcEndAddr": "0x405b98",
            "decompiledFuncCode": "void *__fastcall sub_405B70(void *src, size_t n)\n{\n  void *v2; // rax\n\n  v2 = sub_405970(n);\n  return memcpy(v2, src, n);\n}\n"
        },
        {
            "funcName": "sub_405BA0",
            "funcStartAddr": "0x405ba0",
            "funcEndAddr": "0x405bb3",
            "decompiledFuncCode": "void *__fastcall sub_405BA0(char *src)\n{\n  size_t v1; // rax\n\n  v1 = strlen(src);\n  return sub_405B70(src, v1 + 1);\n}\n"
        },
        {
            "funcName": "sub_405BC0",
            "funcStartAddr": "0x405bc0",
            "funcEndAddr": "0x405bf1",
            "decompiledFuncCode": "void __noreturn sub_405BC0()\n{\n  char *v0; // rax\n\n  v0 = dcgettext(0LL, \"memory exhausted\", 5);\n  error(status, 0, \"%s\", v0);\n  abort();\n}\n"
        },
        {
            "funcName": "sub_405C00",
            "funcStartAddr": "0x405c00",
            "funcEndAddr": "0x405c18",
            "decompiledFuncCode": "char *__fastcall sub_405C00(const char *a1, size_t a2)\n{\n  char *result; // rax\n\n  result = strndup(a1, a2);\n  if ( !result )\n    sub_405BC0();\n  return result;\n}\n"
        },
        {
            "funcName": "sub_405C20",
            "funcStartAddr": "0x405c20",
            "funcEndAddr": "0x405c9b",
            "decompiledFuncCode": "int __fastcall sub_405C20(FILE *stream)\n{\n  int *v1; // rax\n  int v2; // r12d\n  int *v3; // rbp\n  int result; // eax\n  int v5; // eax\n\n  if ( fileno(stream) < 0 )\n    return fclose(stream);\n  if ( __freading(stream) )\n  {\n    v5 = fileno(stream);\n    if ( lseek(v5, 0LL, 1) == -1 )\n      return fclose(stream);\n  }\n  if ( !(unsigned int)sub_405CA0(stream) )\n    return fclose(stream);\n  v1 = __errno_location();\n  v2 = *v1;\n  v3 = v1;\n  result = fclose(stream);\n  if ( v2 )\n  {\n    *v3 = v2;\n    return -1;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_405CA0",
            "funcStartAddr": "0x405ca0",
            "funcEndAddr": "0x405ce0",
            "decompiledFuncCode": "int __fastcall sub_405CA0(FILE *stream)\n{\n  if ( !stream || !__freading(stream) || (stream->_flags & 0x100) == 0 )\n    return fflush(stream);\n  sub_405D10(stream, 0LL, 1LL);\n  return fflush(stream);\n}\n"
        },
        {
            "funcName": "sub_405CE0",
            "funcStartAddr": "0x405ce0",
            "funcEndAddr": "0x405d03",
            "decompiledFuncCode": "__int64 __fastcall sub_405CE0(_QWORD *a1, _QWORD *a2)\n{\n  __int64 result; // rax\n  __int64 v3; // rdx\n\n  if ( a1[5] > a1[4] )\n    return 0LL;\n  result = a1[1];\n  v3 = a1[2] - result;\n  if ( !v3 )\n    return 0LL;\n  *a2 = v3;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_405D10",
            "funcStartAddr": "0x405d10",
            "funcEndAddr": "0x405d67",
            "decompiledFuncCode": "int __fastcall sub_405D10(FILE *a1, __off_t a2, int a3)\n{\n  __off_t v3; // rax\n  int v5; // eax\n\n  if ( a1->_IO_read_end == a1->_IO_read_ptr && a1->_IO_write_ptr == a1->_IO_write_base && !a1->_IO_save_base )\n  {\n    v5 = fileno(a1);\n    v3 = lseek(v5, a2, a3);\n    if ( v3 != -1 )\n    {\n      a1->_flags &= ~0x10u;\n      a1->_offset = v3;\n      LODWORD(v3) = 0;\n    }\n  }\n  else\n  {\n    LODWORD(v3) = fseeko(a1, a2, a3);\n  }\n  return v3;\n}\n"
        },
        {
            "funcName": "sub_405D70",
            "funcStartAddr": "0x405d70",
            "funcEndAddr": "0x405e4f",
            "decompiledFuncCode": "__int64 __fastcall sub_405D70(__int64 a1, int *a2)\n{\n  __int64 v2; // r11\n  int v3; // r12d\n  int v4; // ebp\n  __int64 v5; // rbx\n  int v6; // r9d\n  int v7; // r10d\n  int v8; // r8d\n  int v9; // r14d\n  int v10; // edx\n  __int64 *v11; // rax\n  __int64 *v12; // r13\n  __int64 v13; // rdx\n  __int64 v14; // rcx\n  __int64 result; // rax\n  __int64 *v16; // rax\n  __int64 v17; // rdx\n  __int64 v18; // rcx\n\n  v2 = a1 + 8;\n  v3 = a2[11];\n  v4 = *a2;\n  v5 = a2[12];\n  v6 = v3;\n  v7 = *a2;\n  v8 = a2[12];\nLABEL_2:\n  if ( v7 > v8 )\n  {\n    while ( v6 < v8 )\n    {\n      v9 = v7 - v8;\n      v10 = v8 - v6;\n      if ( v7 - v8 <= v8 - v6 )\n      {\n        v16 = (__int64 *)(a1 + 8LL * v6);\n        v17 = v5 - v6;\n        do\n        {\n          v18 = *v16;\n          *v16 = v16[v17];\n          v16[v17] = v18;\n          ++v16;\n        }\n        while ( v16 != (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v9 - 1))) );\n        v6 += v9;\n        goto LABEL_2;\n      }\n      v7 -= v10;\n      v11 = (__int64 *)(a1 + 8LL * v6);\n      v12 = (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v10 - 1)));\n      v13 = v7 - (__int64)v6;\n      do\n      {\n        v14 = *v11;\n        *v11 = v11[v13];\n        v11[v13] = v14;\n        ++v11;\n      }\n      while ( v12 != v11 );\n      if ( v7 <= v8 )\n        break;\n    }\n  }\n  a2[12] = v4;\n  result = (unsigned int)(v4 - v8);\n  a2[11] = result + v3;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_405E50",
            "funcStartAddr": "0x405e50",
            "funcEndAddr": "0x40646c",
            "decompiledFuncCode": "__int64 __fastcall sub_405E50(\n        int a1,\n        __int64 *a2,\n        const char *a3,\n        char **a4,\n        _DWORD *a5,\n        int a6,\n        int *a7,\n        int a8,\n        __int64 a9)\n{\n  const char *v9; // r14\n  char *v10; // rbp\n  size_t v11; // r13\n  char **v12; // rbx\n  __int64 v13; // r12\n  const char *v14; // r15\n  const char *v15; // rdi\n  __int64 v16; // r15\n  char **v17; // rbp\n  char *v18; // rdx\n  __int64 result; // rax\n  int v20; // edx\n  int v21; // eax\n  int v22; // ecx\n  char *v23; // rdx\n  __int64 v24; // rbx\n  char *v25; // rax\n  __int64 v26; // rbx\n  char *v27; // rax\n  __int64 v28; // rbp\n  char *v29; // rax\n  __int64 v30; // rbp\n  char *v31; // rax\n  FILE *v32; // rdi\n  char **v33; // rbx\n  _BYTE *v34; // rbp\n  __int64 v35; // r12\n  __int64 v36; // rbp\n  char *v37; // rax\n  char *s1; // [rsp+10h] [rbp-78h]\n  char *s1a; // [rsp+10h] [rbp-78h]\n  _BYTE *ptr; // [rsp+18h] [rbp-70h]\n  int v45; // [rsp+38h] [rbp-50h]\n  char v46; // [rsp+3Fh] [rbp-49h]\n  int v48; // [rsp+44h] [rbp-44h]\n  int v49; // [rsp+48h] [rbp-40h]\n\n  v9 = (const char *)*((_QWORD *)a7 + 4);\n  v10 = (char *)v9;\n  v46 = *v9;\n  if ( *v9 == 61 || !*v9 )\n  {\n    v11 = 0LL;\n  }\n  else\n  {\n    do\n      ++v10;\n    while ( *v10 && *v10 != 61 );\n    v11 = v10 - v9;\n  }\n  v12 = a4;\n  v13 = 0LL;\n  s1 = *a4;\n  v14 = *a4;\n  if ( !*a4 )\n  {\nLABEL_24:\n    if ( !a6 || *(_BYTE *)(a2[*a7] + 1) == 45 || (v18 = strchr(a3, v46), result = 0xFFFFFFFFLL, !v18) )\n    {\n      if ( a8 )\n      {\n        v24 = *a2;\n        v25 = dcgettext(0LL, \"%s: unrecognized option '%s%s'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v25, v24);\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n      ++*a7;\n      a7[2] = 0;\n      return 63LL;\n    }\n    return result;\n  }\n  while ( 1 )\n  {\n    if ( !strncmp(v14, v9, v11) && strlen(v14) == v11 )\n      goto LABEL_31;\n    v12 += 4;\n    v14 = *v12;\n    if ( !*v12 )\n      break;\n    v13 = (int)v13 + 1;\n  }\n  v12 = 0LL;\n  v48 = -1;\n  v15 = s1;\n  v16 = 0LL;\n  v45 = 0;\n  v49 = 0;\n  ptr = 0LL;\n  s1a = v10;\n  v17 = a4;\n  do\n  {\n    if ( strncmp(v15, v9, v11) )\n      goto LABEL_20;\n    if ( v12 )\n    {\n      if ( (a6\n         || *((_DWORD *)v12 + 2) != *((_DWORD *)v17 + 2)\n         || v12[2] != v17[2]\n         || *((_DWORD *)v12 + 6) != *((_DWORD *)v17 + 6))\n        && !v45 )\n      {\n        if ( a8 )\n        {\n          if ( ptr )\n            goto LABEL_19;\n          ptr = calloc((int)v13 + 1, 1uLL);\n          if ( ptr )\n          {\n            v49 = 1;\n            ptr[v48] = 1;\nLABEL_19:\n            ptr[v16] = 1;\n            goto LABEL_20;\n          }\n          v45 = 1;\n        }\n        else\n        {\n          v45 = 1;\n          if ( ptr )\n            goto LABEL_19;\n        }\n      }\n    }\n    else\n    {\n      v48 = v16;\n      v12 = v17;\n    }\nLABEL_20:\n    v17 += 4;\n    v15 = *v17;\n    ++v16;\n  }\n  while ( *v17 );\n  v10 = s1a;\n  if ( ptr || v45 )\n  {\n    if ( a8 )\n    {\n      if ( v45 )\n      {\n        v26 = *a2;\n        v27 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v27, v26);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n      else\n      {\n        flockfile(stderr);\n        v30 = *a2;\n        v31 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5);\n        __fprintf_chk(stderr, 1LL, v31, v30);\n        v32 = stderr;\n        v33 = a4;\n        v34 = ptr;\n        v35 = (__int64)&ptr[v13 + 1];\n        do\n        {\n          if ( *v34 )\n          {\n            __fprintf_chk(v32, 1LL, \" '%s%s'\", a9);\n            v32 = stderr;\n          }\n          ++v34;\n          v33 += 4;\n        }\n        while ( (_BYTE *)v35 != v34 );\n        fputc(10, v32);\n        funlockfile(stderr);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n    }\n    if ( v49 )\n      free(ptr);\n    *((_QWORD *)a7 + 4) = &v9[strlen(v9)];\n    ++*a7;\n    a7[2] = 0;\n    return 63LL;\n  }\n  else\n  {\n    if ( !v12 )\n      goto LABEL_24;\n    LODWORD(v13) = v48;\nLABEL_31:\n    v20 = *a7;\n    *((_QWORD *)a7 + 4) = 0LL;\n    v21 = v20 + 1;\n    *a7 = v20 + 1;\n    v22 = *((_DWORD *)v12 + 2);\n    if ( *v10 )\n    {\n      if ( v22 )\n      {\n        *((_QWORD *)a7 + 2) = v10 + 1;\n        goto LABEL_33;\n      }\n      if ( a8 )\n      {\n        v28 = *a2;\n        v29 = dcgettext(0LL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v29, v28);\n      }\n      a7[2] = *((_DWORD *)v12 + 6);\n      return 63LL;\n    }\n    else\n    {\n      if ( v22 != 1 )\n        goto LABEL_33;\n      if ( v21 >= a1 )\n      {\n        if ( a8 )\n        {\n          v36 = *a2;\n          v37 = dcgettext(0LL, \"%s: option '%s%s' requires an argument\\n\", 5);\n          __fprintf_chk(stderr, 1LL, v37, v36);\n        }\n        a7[2] = *((_DWORD *)v12 + 6);\n        return 5 * (unsigned int)(*a3 != 58) + 58;\n      }\n      else\n      {\n        *a7 = v20 + 2;\n        *((_QWORD *)a7 + 2) = a2[v21];\nLABEL_33:\n        if ( a5 )\n          *a5 = v13;\n        v23 = v12[2];\n        result = *((unsigned int *)v12 + 6);\n        if ( v23 )\n        {\n          *(_DWORD *)v23 = result;\n          return 0LL;\n        }\n      }\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_406470",
            "funcStartAddr": "0x406470",
            "funcEndAddr": "0x406a36",
            "decompiledFuncCode": "__int64 __fastcall sub_406470(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int a6, int *a7, int a8)\n{\n  int v8; // r13d\n  int v9; // eax\n  int v10; // ebp\n  const char *v12; // r15\n  _BYTE *v13; // rdx\n  char v14; // al\n  char v15; // al\n  int v16; // eax\n  __int64 v17; // r14\n  int v18; // edx\n  int v19; // ecx\n  int v20; // eax\n  unsigned int v21; // r14d\n  char *v22; // rax\n  __int64 v23; // r8\n  char v24; // cl\n  int v26; // edx\n  __int64 v27; // rax\n  _BYTE *v28; // rcx\n  int v29; // esi\n  char v30; // cl\n  char *v31; // rax\n  __int64 v32; // rax\n  char *v34; // rax\n  char v35; // dl\n  __int64 v36; // rax\n  int v37; // edx\n  __int64 v38; // rax\n  __int64 v39; // rbp\n  char *v40; // rax\n  __int64 v41; // rbp\n  char *v42; // rax\n  __int64 v43; // rbp\n  char *v44; // rax\n  char v47; // [rsp+1Ch] [rbp-4Ch]\n  int v48; // [rsp+1Ch] [rbp-4Ch]\n  int v49; // [rsp+1Ch] [rbp-4Ch]\n  int v50; // [rsp+1Ch] [rbp-4Ch]\n  _BYTE *v51; // [rsp+20h] [rbp-48h]\n  _BYTE *v52; // [rsp+28h] [rbp-40h]\n\n  v8 = a7[1];\n  if ( a1 <= 0 )\n    return (unsigned int)-1;\n  v9 = *a7;\n  v10 = a1;\n  v12 = a3;\n  *((_QWORD *)a7 + 2) = 0LL;\n  if ( !v9 )\n  {\n    *a7 = 1;\n    v9 = 1;\nLABEL_4:\n    a7[12] = v9;\n    a7[11] = v9;\n    *((_QWORD *)a7 + 4) = 0LL;\n    if ( *a3 == 45 )\n    {\n      a7[10] = 2;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else if ( *a3 == 43 )\n    {\n      a7[10] = 0;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else\n    {\n      v13 = 0LL;\n      if ( !a8 )\n      {\n        v50 = a6;\n        v34 = getenv(\"POSIXLY_CORRECT\");\n        a6 = v50;\n        if ( !v34 )\n        {\n          a7[10] = 1;\n          v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n          goto LABEL_24;\n        }\n        v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n      }\n      a7[10] = 0;\n    }\nLABEL_24:\n    a7[6] = 1;\n    v14 = *v12;\n    goto LABEL_25;\n  }\n  if ( !a7[6] )\n    goto LABEL_4;\n  v14 = *a3;\n  v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n  if ( ((v14 - 43) & 0xFD) == 0 )\n  {\n    v15 = *++v12;\n    if ( v15 == 58 )\n      v8 = 0;\n    if ( !v13 )\n      goto LABEL_12;\n    goto LABEL_28;\n  }\nLABEL_25:\n  if ( v14 == 58 )\n    v8 = 0;\n  if ( !v13 )\n    goto LABEL_12;\nLABEL_28:\n  if ( !*v13 )\n  {\nLABEL_12:\n    v16 = *a7;\n    if ( a7[12] > *a7 )\n      a7[12] = v16;\n    if ( v16 < a7[11] )\n      a7[11] = v16;\n    if ( a7[10] == 1 )\n    {\n      v26 = a7[12];\n      if ( a7[11] == v26 )\n      {\n        if ( v16 != v26 )\n        {\n          a7[11] = v16;\n          v26 = v16;\n        }\n      }\n      else if ( v16 != v26 )\n      {\n        v48 = a6;\n        sub_405D70((__int64)a2, a7);\n        v26 = *a7;\n        a6 = v48;\n      }\n      if ( a1 <= v26 )\n      {\nLABEL_79:\n        v16 = v26;\n      }\n      else\n      {\n        v27 = v26;\n        while ( 1 )\n        {\n          v28 = (_BYTE *)a2[v27];\n          v29 = v27;\n          v26 = v27;\n          if ( *v28 == 45 )\n          {\n            if ( v28[1] )\n              break;\n          }\n          v26 = ++v27;\n          *a7 = v29 + 1;\n          if ( a1 <= (int)v27 )\n            goto LABEL_79;\n        }\n        v16 = *a7;\n      }\n      a7[12] = v26;\n    }\n    if ( a1 == v16 )\n    {\n      v10 = a7[12];\n      v18 = a7[11];\nLABEL_41:\n      if ( v18 != v10 )\n        *a7 = v18;\n      return (unsigned int)-1;\n    }\n    v17 = a2[v16];\n    if ( !strcmp((const char *)v17, \"--\") )\n    {\n      v18 = a7[11];\n      v19 = a7[12];\n      v20 = v16 + 1;\n      *a7 = v20;\n      if ( v18 == v19 )\n      {\n        a7[11] = v20;\n        v18 = v20;\n      }\n      else if ( v20 != v19 )\n      {\n        sub_405D70((__int64)a2, a7);\n        v18 = a7[11];\n      }\n      a7[12] = a1;\n      *a7 = a1;\n      goto LABEL_41;\n    }\n    if ( *(_BYTE *)v17 == 45 )\n    {\n      v30 = *(_BYTE *)(v17 + 1);\n      if ( v30 )\n      {\n        if ( a4 )\n        {\n          if ( v30 == 45 )\n          {\n            *((_QWORD *)a7 + 4) = v17 + 2;\n            return (unsigned int)sub_405E50(a1, a2, v12, a4, a5, a6, a7, v8, (__int64)\"--\");\n          }\n          if ( a6 )\n          {\n            if ( *(_BYTE *)(v17 + 2) || (v49 = a6, v31 = strchr(v12, v30), a6 = v49, !v31) )\n            {\n              *((_QWORD *)a7 + 4) = v17 + 1;\n              v21 = sub_405E50(a1, a2, v12, a4, a5, a6, a7, v8, (__int64)\"-\");\n              if ( v21 != -1 )\n                return v21;\n              v17 = a2[*a7];\n            }\n          }\n        }\n        v13 = (_BYTE *)(v17 + 1);\n        goto LABEL_29;\n      }\n    }\n    if ( a7[10] )\n    {\n      *((_QWORD *)a7 + 2) = v17;\n      v21 = 1;\n      *a7 = v16 + 1;\n      return v21;\n    }\n    return (unsigned int)-1;\n  }\nLABEL_29:\n  v51 = v13;\n  *((_QWORD *)a7 + 4) = v13 + 1;\n  v21 = (char)*v13;\n  v52 = v13 + 1;\n  v47 = *v13;\n  v22 = strchr(v12, v21);\n  v23 = (__int64)v52;\n  if ( !v51[1] )\n    ++*a7;\n  if ( (unsigned __int8)(v47 - 58) > 1u && v22 )\n  {\n    v24 = v22[1];\n    if ( *v22 == 87 && a4 && v24 == 59 )\n    {\n      if ( v51[1] )\n      {\nLABEL_68:\n        *((_QWORD *)a7 + 4) = v23;\n        *((_QWORD *)a7 + 2) = 0LL;\n        return (unsigned int)sub_405E50(a1, a2, v12, a4, a5, 0, a7, v8, (__int64)\"-W \");\n      }\n      v32 = *a7;\n      if ( (_DWORD)v32 != a1 )\n      {\n        v23 = a2[v32];\n        goto LABEL_68;\n      }\n      if ( v8 )\n      {\n        v43 = *a2;\n        v44 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v44, v43);\n      }\n      a7[2] = v21;\n      return 5 * (unsigned int)(*v12 != 58) + 58;\n    }\n    else if ( v24 == 58 )\n    {\n      v35 = v51[1];\n      if ( v22[2] == 58 )\n      {\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          ++*a7;\n        }\n        else\n        {\n          *((_QWORD *)a7 + 2) = 0LL;\n        }\n      }\n      else\n      {\n        v36 = *a7;\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          *a7 = v36 + 1;\n        }\n        else if ( a1 == (_DWORD)v36 )\n        {\n          if ( v8 )\n          {\n            v41 = *a2;\n            v42 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n            __fprintf_chk(stderr, 1LL, v42, v41);\n          }\n          a7[2] = v21;\n          v21 = 5 * (*v12 != 58) + 58;\n        }\n        else\n        {\n          v37 = v36 + 1;\n          v38 = a2[v36];\n          *a7 = v37;\n          *((_QWORD *)a7 + 2) = v38;\n        }\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n    }\n  }\n  else\n  {\n    if ( v8 )\n    {\n      v39 = *a2;\n      v40 = dcgettext(0LL, \"%s: invalid option -- '%c'\\n\", 5);\n      __fprintf_chk(stderr, 1LL, v40, v39);\n    }\n    a7[2] = v21;\n    return 63;\n  }\n  return v21;\n}\n"
        },
        {
            "funcName": "sub_406A40",
            "funcStartAddr": "0x406a40",
            "funcEndAddr": "0x406a96",
            "decompiledFuncCode": "__int64 __fastcall sub_406A40(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int a6, int a7)\n{\n  __int64 result; // rax\n\n  dword_60B4A0 = dword_60B2BC;\n  dword_60B4A4 = dword_60B2B8;\n  result = sub_406470(a1, a2, a3, a4, a5, a6, &dword_60B4A0, a7);\n  dword_60B2BC = dword_60B4A0;\n  src = (void *)qword_60B4B0;\n  dword_60B2B4 = dword_60B4A8;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_406AA0",
            "funcStartAddr": "0x406aa0",
            "funcEndAddr": "0x406ab8",
            "decompiledFuncCode": "__int64 __fastcall sub_406AA0(int a1, __int64 *a2, const char *a3)\n{\n  return sub_406A40(a1, a2, a3, 0LL, 0LL, 0, 1);\n}\n"
        },
        {
            "funcName": "sub_406AC0",
            "funcStartAddr": "0x406ac0",
            "funcEndAddr": "0x406ad3",
            "decompiledFuncCode": "__int64 __fastcall sub_406AC0(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5)\n{\n  return sub_406A40(a1, a2, a3, a4, a5, 0, 0);\n}\n"
        },
        {
            "funcName": "sub_406AE0",
            "funcStartAddr": "0x406ae0",
            "funcEndAddr": "0x406af5",
            "decompiledFuncCode": "__int64 __fastcall sub_406AE0(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_406470(a1, a2, a3, a4, a5, 0, a6, 0);\n}\n"
        },
        {
            "funcName": "sub_406B00",
            "funcStartAddr": "0x406b00",
            "funcEndAddr": "0x406b16",
            "decompiledFuncCode": "__int64 __fastcall sub_406B00(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5)\n{\n  return sub_406A40(a1, a2, a3, a4, a5, 1, 0);\n}\n"
        },
        {
            "funcName": "sub_406B20",
            "funcStartAddr": "0x406b20",
            "funcEndAddr": "0x406b38",
            "decompiledFuncCode": "__int64 __fastcall sub_406B20(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_406470(a1, a2, a3, a4, a5, 1, a6, 0);\n}\n"
        },
        {
            "funcName": "sub_406B40",
            "funcStartAddr": "0x406b40",
            "funcEndAddr": "0x406bba",
            "decompiledFuncCode": "size_t __fastcall sub_406B40(wchar_t *pwc, char *s, size_t a3, mbstate_t *a4)\n{\n  size_t v4; // rbx\n  wchar_t *v5; // r12\n  const char *v6; // rbp\n  char v8; // [rsp+Ch] [rbp-1Ch] BYREF\n\n  if ( !s )\n  {\n    a3 = 1LL;\n    v6 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_7:\n    v5 = (wchar_t *)&v8;\n    goto LABEL_4;\n  }\n  v4 = -2LL;\n  if ( !a3 )\n    return v4;\n  v5 = pwc;\n  v6 = s;\n  if ( !pwc )\n    goto LABEL_7;\nLABEL_4:\n  v4 = mbrtowc(v5, v6, a3, a4);\n  if ( v4 > 0xFFFFFFFFFFFFFFFDLL && !(unsigned __int8)sub_406E80(0LL) )\n  {\n    v4 = 1LL;\n    *v5 = *(unsigned __int8 *)v6;\n  }\n  return v4;\n}\n"
        },
        {
            "funcName": "sub_406CD0",
            "funcStartAddr": "0x406cd0",
            "funcEndAddr": "0x406d2d",
            "decompiledFuncCode": "int __fastcall sub_406CD0(FILE *stream)\n{\n  size_t v1; // r12\n  int v2; // ebx\n  int result; // eax\n\n  v1 = __fpending(stream);\n  v2 = stream->_flags & 0x20;\n  result = sub_405C20(stream);\n  if ( v2 )\n  {\n    if ( !result )\n    {\n      *__errno_location() = 0;\n      return -1;\n    }\n    return -1;\n  }\n  if ( !result )\n    return result;\n  if ( v1 )\n    return -1;\n  return -(*__errno_location() != 9);\n}\n"
        },
        {
            "funcName": "sub_406D30",
            "funcStartAddr": "0x406d30",
            "funcEndAddr": "0x406e80",
            "decompiledFuncCode": "int __fastcall sub_406D30(FILE *stream, unsigned __int64 a2)\n{\n  int result; // eax\n  unsigned __int64 v3; // rbx\n  __int64 v4; // rbp\n  __int64 v5; // rax\n  int v6; // eax\n  unsigned __int64 v7; // rbp\n  __int64 v8[517]; // [rsp+0h] [rbp-1028h] BYREF\n\n  result = 0;\n  if ( a2 )\n  {\n    v3 = a2;\n    v4 = sub_407450();\n    if ( v4 )\n    {\n      while ( 1 )\n      {\n        if ( sub_405CE0(stream, v8) )\n        {\n          v5 = v8[0];\n          if ( v8[0] )\n          {\n            if ( v8[0] > v3 )\n              v5 = v3;\n            stream->_IO_read_ptr += v5;\n            v3 -= v5;\n            if ( !v3 )\n              return 0;\n            v4 -= v5;\n            if ( !v4 )\n              goto LABEL_16;\n          }\n        }\n        if ( fgetc(stream) == -1 )\n          return -(ferror(stream) != 0);\n        if ( !--v3 )\n          return 0;\n        if ( !--v4 )\n          goto LABEL_16;\n      }\n    }\n    else\n    {\nLABEL_16:\n      v6 = fileno(stream);\n      if ( v6 < 0 || lseek(v6, 0LL, 1) < 0 )\n      {\n        while ( 1 )\n        {\n          v7 = 4096LL;\n          if ( v3 <= 0x1000 )\n            v7 = v3;\n          if ( v7 > __fread_chk(v8, 4096LL, 1LL, v7, stream) )\n            break;\n          v3 -= v7;\n          if ( !v3 )\n            return 0;\n        }\n        return -(ferror(stream) != 0);\n      }\n      else\n      {\n        return sub_405D10(stream, v3, 1);\n      }\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_406E80",
            "funcStartAddr": "0x406e80",
            "funcEndAddr": "0x406ede",
            "decompiledFuncCode": "bool __fastcall sub_406E80(int a1)\n{\n  char *v1; // rdx\n  bool result; // al\n\n  v1 = setlocale(a1, 0LL);\n  result = 1;\n  if ( v1 )\n  {\n    result = 0;\n    if ( strcmp(v1, \"C\") )\n      return strcmp(v1, \"POSIX\") != 0;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_406EE0",
            "funcStartAddr": "0x406ee0",
            "funcEndAddr": "0x407442",
            "decompiledFuncCode": "const char *sub_406EE0()\n{\n  char *v0; // rax\n  char *v1; // r15\n  const char *v2; // rbx\n  char v3; // bp\n  const char *v4; // rbp\n  char *v6; // rax\n  const char *v7; // r13\n  size_t v8; // rax\n  __int64 v9; // r12\n  size_t v10; // r14\n  size_t v11; // rdi\n  char *v12; // rax\n  char *v13; // rbp\n  size_t v14; // rdi\n  char *v15; // rax\n  int v16; // eax\n  int v17; // r12d\n  FILE *v18; // r13\n  const char *v19; // rax\n  FILE *v20; // rbx\n  const char *v21; // r13\n  char *IO_read_ptr; // rax\n  int v23; // edi\n  char *v24; // kr00_8\n  int *v25; // rdx\n  int v26; // esi\n  unsigned int v27; // eax\n  __int64 v28; // rdx\n  signed __int64 v29; // rax\n  char *v30; // rax\n  __int64 v31; // rcx\n  __int64 v32; // rdx\n  __int64 v33; // rsi\n  unsigned int v34; // ecx\n  signed __int64 v35; // rdi\n  char *v36; // rsi\n  unsigned int v37; // edx\n  char *v38; // rcx\n  FILE *v39; // rdi\n  int v40; // eax\n  bool v41; // dl\n  char *v42; // rax\n  signed __int64 v43; // rax\n  unsigned __int64 v44; // r9\n  char *v45; // rsi\n  char *v46; // r10\n  unsigned int v47; // ecx\n  unsigned int v48; // ecx\n  unsigned int v49; // esi\n  __int64 v50; // r8\n  unsigned __int64 v51; // rdi\n  char *v52; // rcx\n  char *v53; // r9\n  unsigned int v54; // edx\n  unsigned int v55; // edx\n  unsigned int v56; // ecx\n  __int64 v57; // rsi\n  const char *v58; // rax\n  char *v59; // rdi\n  FILE *v60; // r13\n  signed __int64 v61; // [rsp+8h] [rbp-D0h]\n  __int64 v62; // [rsp+18h] [rbp-C0h]\n  char v63[64]; // [rsp+20h] [rbp-B8h] BYREF\n  _QWORD v64[15]; // [rsp+60h] [rbp-78h] BYREF\n\n  v0 = nl_langinfo(14);\n  v1 = qword_60B4D8;\n  v2 = v0;\n  if ( !v0 )\n    v2 = \"\";\n  if ( !qword_60B4D8 )\n  {\n    v6 = getenv(\"CHARSETALIASDIR\");\n    v7 = v6;\n    if ( v6 && *v6 )\n    {\n      v8 = strlen(v6);\n      v9 = v8;\n      v10 = v8;\n      if ( !v8 )\n      {\n        v11 = 14LL;\nLABEL_18:\n        v12 = (char *)malloc(v11);\n        v13 = v12;\n        if ( !v12 )\n        {\nLABEL_19:\n          v1 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\nLABEL_20:\n          qword_60B4D8 = v1;\n          goto LABEL_4;\n        }\n        memcpy(v12, v7, v10);\nLABEL_24:\n        strcpy(&v13[v9], \"charset.alias\");\n        v16 = open(v13, 0);\n        v17 = v16;\n        if ( v16 >= 0 )\n        {\n          v1 = 0LL;\n          v61 = 0LL;\n          v18 = fdopen(v16, \"r\");\n          if ( v18 )\n          {\n            v19 = v2;\n            v20 = v18;\n            v21 = v19;\nLABEL_30:\n            IO_read_ptr = v20->_IO_read_ptr;\n            if ( IO_read_ptr < v20->_IO_read_end )\n            {\nLABEL_31:\n              v20->_IO_read_ptr = IO_read_ptr + 1;\n              v23 = (unsigned __int8)*IO_read_ptr;\n              goto LABEL_32;\n            }\n            while ( 1 )\n            {\n              v23 = __uflow(v20);\n              if ( v23 == -1 )\n                break;\nLABEL_32:\n              if ( (unsigned int)(v23 - 9) <= 1 || v23 == 32 )\n                goto LABEL_30;\n              if ( v23 == 35 )\n              {\n                do\n                {\n                  v42 = v20->_IO_read_ptr;\n                  if ( v42 < v20->_IO_read_end )\n                  {\n                    v20->_IO_read_ptr = v42 + 1;\n                    v40 = (unsigned __int8)*v42;\n                    v41 = 1;\n                  }\n                  else\n                  {\n                    v40 = __uflow(v20);\n                    v41 = v40 != -1;\n                  }\n                }\n                while ( v40 != 10 && v41 );\n                if ( v40 == -1 )\n                  break;\n                goto LABEL_30;\n              }\n              ungetc(v23, v20);\n              if ( fscanf(v20, \"%50s %50s\", v63, v64) <= 1 )\n                break;\n              v24 = &v63[strlen(v63)];\n              v25 = (int *)v64;\n              do\n              {\n                v26 = *v25++;\n                v27 = ~v26 & (v26 - 16843009) & 0x80808080;\n              }\n              while ( !v27 );\n              if ( (~v26 & (v26 - 16843009) & 0x8080) == 0 )\n              {\n                v27 >>= 16;\n                v25 = (int *)((char *)v25 + 2);\n              }\n              v28 = (char *)v25 - __CFADD__((_BYTE)v27, (_BYTE)v27) - 3 - (char *)v64;\n              v29 = v24 - v63 + v28;\n              v62 = v28;\n              if ( v61 )\n              {\n                v43 = v61 + v29;\n                v61 = v43 + 2;\n                v30 = (char *)realloc(v1, v43 + 3);\n                v32 = v62;\n                v31 = v24 - v63;\n              }\n              else\n              {\n                v61 = v29 + 2;\n                v30 = (char *)malloc(v29 + 3);\n                v31 = v24 - v63;\n                v32 = v62;\n              }\n              if ( !v30 )\n              {\n                v58 = v21;\n                v59 = v1;\n                v60 = v20;\n                v1 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\n                v2 = v58;\n                free(v59);\n                sub_405C20(v60);\n                goto LABEL_26;\n              }\n              v33 = -2 - v31;\n              v34 = v31 + 1;\n              v35 = v61 - v32;\n              v36 = &v30[v61 - v32 + v33];\n              if ( v34 >= 8 )\n              {\n                *(_QWORD *)v36 = *(_QWORD *)v63;\n                *(_QWORD *)&v36[v34 - 8] = *(_QWORD *)&v63[v34 - 8];\n                v44 = (unsigned __int64)(v36 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v45 = &v36[-v44];\n                v46 = (char *)(v63 - v45);\n                v47 = ((_DWORD)v45 + v34) & 0xFFFFFFF8;\n                if ( v47 >= 8 )\n                {\n                  v48 = v47 & 0xFFFFFFF8;\n                  v49 = 0;\n                  do\n                  {\n                    v50 = v49;\n                    v49 += 8;\n                    *(_QWORD *)(v44 + v50) = *(_QWORD *)&v46[v50];\n                  }\n                  while ( v49 < v48 );\n                }\n              }\n              else if ( (v34 & 4) != 0 )\n              {\n                *(_DWORD *)v36 = *(_DWORD *)v63;\n                *(_DWORD *)&v36[v34 - 4] = *(_DWORD *)&v63[v34 - 4];\n              }\n              else if ( v34 )\n              {\n                *v36 = v63[0];\n                if ( (v34 & 2) != 0 )\n                  *(_WORD *)&v36[v34 - 2] = *(_WORD *)&v63[v34 - 2];\n              }\n              v37 = v32 + 1;\n              v38 = &v30[v35 - 1];\n              if ( v37 >= 8 )\n              {\n                *(_QWORD *)v38 = v64[0];\n                *(_QWORD *)&v38[v37 - 8] = *(_QWORD *)&v63[v37 + 56];\n                v51 = (unsigned __int64)(v38 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v52 = &v38[-v51];\n                v53 = (char *)((char *)v64 - v52);\n                v54 = ((_DWORD)v52 + v37) & 0xFFFFFFF8;\n                if ( v54 >= 8 )\n                {\n                  v55 = v54 & 0xFFFFFFF8;\n                  v56 = 0;\n                  do\n                  {\n                    v57 = v56;\n                    v56 += 8;\n                    *(_QWORD *)(v51 + v57) = *(_QWORD *)&v53[v57];\n                  }\n                  while ( v56 < v55 );\n                }\n              }\n              else if ( (v37 & 4) != 0 )\n              {\n                *(_DWORD *)v38 = v64[0];\n                *(_DWORD *)&v38[v37 - 4] = *(_DWORD *)&v63[v37 + 60];\n              }\n              else if ( v37 )\n              {\n                *v38 = v64[0];\n                if ( (v37 & 2) != 0 )\n                  *(_WORD *)&v38[v37 - 2] = *(_WORD *)&v63[v37 + 62];\n              }\n              v1 = v30;\n              IO_read_ptr = v20->_IO_read_ptr;\n              if ( IO_read_ptr < v20->_IO_read_end )\n                goto LABEL_31;\n            }\n            v39 = v20;\n            v2 = v21;\n            sub_405C20(v39);\n            if ( !v61 )\n              goto LABEL_25;\n            v1[v61] = 0;\n            goto LABEL_26;\n          }\n          close(v17);\n        }\nLABEL_25:\n        v1 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\nLABEL_26:\n        free(v13);\n        goto LABEL_20;\n      }\n      if ( v7[v8 - 1] == 47 )\n      {\n        v11 = v8 + 14;\n        goto LABEL_18;\n      }\n      v14 = v8 + 15;\n      v9 = v8 + 1;\n    }\n    else\n    {\n      v14 = 115LL;\n      v9 = 101LL;\n      v10 = 100LL;\n      v7 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n    }\n    v15 = (char *)malloc(v14);\n    v13 = v15;\n    if ( !v15 )\n      goto LABEL_19;\n    memcpy(v15, v7, v10);\n    v13[v10] = 47;\n    goto LABEL_24;\n  }\nLABEL_4:\n  v3 = *v1;\n  if ( *v1 )\n  {\n    while ( strcmp(v2, v1) && (v3 != 42 || v1[1]) )\n    {\n      v4 = &v1[strlen(v1) + 1];\n      v1 = (char *)&v4[strlen(v4) + 1];\n      v3 = *v1;\n      if ( !*v1 )\n        goto LABEL_11;\n    }\n    v2 = &v1[strlen(v1) + 1];\n  }\nLABEL_11:\n  if ( !*v2 )\n    return \"ASCII\";\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_407450",
            "funcStartAddr": "0x407450",
            "funcEndAddr": "0x407478",
            "decompiledFuncCode": "__int64 __fastcall sub_407450(__int64 a1)\n{\n  __int64 result; // rax\n\n  result = 0LL;\n  if ( *(_QWORD *)(a1 + 40) <= *(_QWORD *)(a1 + 32) )\n  {\n    result = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);\n    if ( (*(_DWORD *)a1 & 0x100) != 0 )\n      result += *(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 72);\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4074F0",
            "funcStartAddr": "0x4074f0",
            "funcEndAddr": "0x407508",
            "decompiledFuncCode": "int __fastcall sub_4074F0(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  v1 = 0LL;\n  if ( &qword_60B228 )\n    v1 = (void *)qword_60B228;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n"
        },
        {
            "funcName": "sub_407508",
            "funcStartAddr": "0x407508",
            "funcEndAddr": "0x407528",
            "decompiledFuncCode": "__int64 __fastcall sub_407508(__int64 a1, __int64 a2, __int64 a3)\n{\n  void (**i)(void); // rbx\n\n  for ( i = (void (**)(void))&qword_60AE30; *i != (void (*)(void))-1LL; --i )\n    (*i)();\n  return a3;\n}\n"
        }
    ],
    "funcCount": 79
}