{
    "binaryInfo": {
        "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_install.elf",
        "isStripped": "True"
    },
    "buildInfo": {
        "decompilerName": "IDA Pro",
        "compilerName": "gcc",
        "compilerVersion": "9.4.0",
        "Optlevel": "-O"
    },
    "funcInfo": [
        {
            "funcName": "main",
            "funcStartAddr": "0x403050",
            "funcEndAddr": "0x403cd0",
            "decompiledFuncCode": "__int64 __fastcall main(int a1, char **a2, char **a3)\n{\n  char v3; // r15\n  int v4; // r14d\n  __int64 v5; // r13\n  char *v6; // r12\n  __int64 v7; // rbp\n  int *v8; // rbx\n  __int64 v9; // rdi\n  int v10; // eax\n  char **v11; // rax\n  const char *v12; // rsi\n  char *v13; // rax\n  int v14; // eax\n  int v15; // eax\n  unsigned __int8 v16; // al\n  __int64 v17; // rax\n  void *v18; // r13\n  const char *v19; // rsi\n  struct passwd *v20; // rax\n  __uid_t pw_uid; // eax\n  struct group *v22; // rax\n  __gid_t st_dev; // eax\n  char *v25; // rax\n  __int64 v26; // rax\n  __int64 v27; // rcx\n  _BYTE *v28; // rdi\n  bool v29; // zf\n  char *v30; // rax\n  int *v31; // rax\n  char *v32; // rax\n  __int64 v33; // r13\n  char *v34; // r15\n  __int64 v35; // rax\n  __int64 v36; // rax\n  void *v37; // rbx\n  char *v38; // rax\n  char *v39; // rbx\n  char v40; // al\n  char v41; // dl\n  char *v43; // rax\n  char *v44; // rax\n  char *v45; // rax\n  char *v46; // rax\n  char *v47; // rax\n  __int64 v48; // rbx\n  char *v49; // rax\n  __int64 v50; // rbp\n  char *v51; // rbx\n  int *v52; // rax\n  const char *v53; // rsi\n  __int64 v54; // rbx\n  char *v55; // rax\n  char *v56; // rax\n  char *v57; // rax\n  char *v58; // rax\n  __int64 v59; // rbx\n  char *v60; // rax\n  char *v61; // rax\n  __int64 v62; // rbx\n  char *v63; // rax\n  __int64 v64; // rbx\n  char *v65; // rax\n  char **v66; // [rsp+8h] [rbp-140h]\n  void *v67; // [rsp+10h] [rbp-138h]\n  unsigned int v68; // [rsp+10h] [rbp-138h]\n  void *v69; // [rsp+18h] [rbp-130h]\n  int v70; // [rsp+18h] [rbp-130h]\n  char v71; // [rsp+27h] [rbp-121h]\n  void *v72; // [rsp+28h] [rbp-120h]\n  __int64 v73[3]; // [rsp+30h] [rbp-118h] BYREF\n  __int16 v74; // [rsp+48h] [rbp-100h]\n  int v75; // [rsp+4Ch] [rbp-FCh]\n  __int64 v76; // [rsp+50h] [rbp-F8h]\n  __int64 v77; // [rsp+58h] [rbp-F0h]\n  char v78; // [rsp+60h] [rbp-E8h]\n  int v79; // [rsp+64h] [rbp-E4h]\n  __int64 v80; // [rsp+68h] [rbp-E0h]\n  __int64 v81; // [rsp+70h] [rbp-D8h]\n  struct stat stat_buf; // [rsp+80h] [rbp-C8h] BYREF\n\n  v3 = 0;\n  v4 = 0;\n  v5 = (__int64)a2;\n  v6 = 0LL;\n  LOBYTE(v7) = 0;\n  LODWORD(v8) = a1;\n  v9 = (__int64)*a2;\n  dword_621560 = 0;\n  sub_40CFD0(v9);\n  setlocale(6, \"\");\n  bindtextdomain(\n    \"coreutils\",\n    \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n  textdomain(\"coreutils\");\n  sub_416FD0(sub_40AA00);\n  sub_405700(v73);\n  v73[0] = 0x400000000LL;\n  v73[1] = 0x200000004LL;\n  v79 = 0;\n  v73[2] = 0x10100000180LL;\n  v74 = 256;\n  v75 = 0;\n  v76 = 0x1000000LL;\n  v77 = 0x1000000LL;\n  v78 = 0;\n  v80 = 0LL;\n  v81 = 0LL;\n  nptr = 0LL;\n  qword_621548 = 0LL;\n  byte_621541 = 0;\n  byte_621540 = 0;\n  umask(0);\n  v71 = 0;\n  v72 = 0LL;\n  v66 = 0LL;\n  v67 = 0LL;\n  v69 = 0LL;\n  while ( 1 )\n  {\n    v10 = sub_412970((unsigned int)v8, v5, \"bcCsDdg:m:o:pt:TvS:Z\", &off_418380, 0LL);\n    if ( v10 == -1 )\n      break;\n    if ( v10 == 100 )\n    {\n      byte_621540 = 1;\n    }\n    else if ( v10 <= 100 )\n    {\n      if ( v10 == 83 )\n      {\n        v3 = 1;\n        v67 = qword_621B80;\n      }\n      else if ( v10 <= 83 )\n      {\n        if ( v10 == -130 )\n          sub_4046F0(0);\n        if ( v10 <= -130 )\n        {\n          if ( v10 == -131 )\n          {\n            sub_411160(\n              (_DWORD)stdout,\n              (unsigned int)\"install\",\n              (unsigned int)&unk_417166,\n              (_DWORD)off_61F460,\n              (unsigned int)\"David MacKenzie\",\n              0);\n            exit(0);\n          }\n          goto LABEL_22;\n        }\n        if ( v10 == 67 )\n        {\n          byte_621542 = 1;\n        }\n        else\n        {\n          if ( v10 != 68 )\n            goto LABEL_22;\n          LOBYTE(v7) = 1;\n        }\n      }\n      else if ( v10 == 90 )\n      {\n        if ( dword_621560 )\n        {\n          byte_61F44C = 0;\n          if ( qword_621B80 )\n            v72 = qword_621B80;\n          else\n            BYTE1(v76) = 1;\n        }\n        else if ( qword_621B80 )\n        {\n          v12 = \"warning: ignoring --context; it requires an SELinux-enabled kernel\";\nLABEL_55:\n          v13 = dcgettext(0LL, v12, 5);\n          error(0, 0, v13);\n        }\n      }\n      else if ( v10 <= 90 )\n      {\n        if ( v10 != 84 )\n          goto LABEL_22;\n        v4 = 1;\n      }\n      else if ( v10 == 98 )\n      {\n        v11 = (char **)qword_621B80;\n        v3 = 1;\n        if ( !qword_621B80 )\n          v11 = v66;\n        v66 = v11;\n      }\n      else if ( v10 != 99 )\n      {\n        goto LABEL_22;\n      }\n    }\n    else if ( v10 == 115 )\n    {\n      byte_621541 = 1;\n      signal(17, 0LL);\n    }\n    else if ( v10 > 115 )\n    {\n      if ( v10 == 118 )\n      {\n        BYTE6(v77) = 1;\n      }\n      else if ( v10 <= 118 )\n      {\n        if ( v10 != 116 )\n          goto LABEL_22;\n        if ( v6 )\n        {\n          v47 = dcgettext(0LL, \"multiple target directories specified\", 5);\n          error(1, 0, v47);\n          goto LABEL_139;\n        }\n        v6 = (char *)qword_621B80;\n      }\n      else if ( v10 == 128 )\n      {\n        v12 = \"WARNING: ignoring --preserve-context; this kernel is not SELinux-enabled\";\n        if ( !dword_621560 )\n          goto LABEL_55;\n        BYTE5(v76) = 1;\n        byte_61F44C = 0;\n      }\n      else\n      {\n        if ( v10 != 129 )\n          goto LABEL_22;\n        v71 = 1;\n        arg = (char *)sub_411510(qword_621B80);\n      }\n    }\n    else if ( v10 == 109 )\n    {\n      v69 = qword_621B80;\n    }\n    else if ( v10 <= 109 )\n    {\n      if ( v10 != 103 )\n        goto LABEL_22;\n      qword_621548 = (char *)qword_621B80;\n    }\n    else if ( v10 == 111 )\n    {\n      nptr = (char *)qword_621B80;\n    }\n    else\n    {\n      if ( v10 != 112 )\n        goto LABEL_22;\n      HIBYTE(v75) = 1;\n    }\n  }\n  if ( !byte_621540 )\n  {\n    if ( !v6 )\n      goto LABEL_62;\n    v14 = __xstat(1, v6, &stat_buf);\n    if ( (_BYTE)v7 || !v14 )\n    {\n      if ( v14 || (stat_buf.st_mode & 0xF000) == 0x4000 )\n        goto LABEL_62;\nLABEL_139:\n      v48 = sub_40EA00(4LL, v6);\n      v49 = dcgettext(0LL, \"target %s is not a directory\", 5);\n      error(1, 0, v49, v48);\n    }\n    v50 = sub_40EA00(4LL, v6);\n    v51 = dcgettext(0LL, \"failed to access %s\", 5);\n    v52 = __errno_location();\n    error(1, *v52, v51, v50);\nLABEL_141:\n    v53 = \"extra operand %s\";\n    v54 = sub_40EA00(4LL, v66[2]);\nLABEL_142:\n    v55 = dcgettext(0LL, v53, 5);\n    error(0, 0, v55, v54);\n    goto LABEL_22;\n  }\n  if ( byte_621541 )\n    goto LABEL_151;\n  if ( v6 )\n  {\n    v25 = dcgettext(0LL, \"target directory not allowed when installing a directory\", 5);\n    error(1, 0, v25);\n    goto LABEL_96;\n  }\nLABEL_62:\n  v15 = 0;\n  if ( v3 )\n  {\n    v38 = dcgettext(0LL, \"backup type\", 5);\n    v15 = sub_40A930(v38, v66);\n  }\n  LODWORD(v73[0]) = v15;\n  sub_40A380(v67);\n  if ( !BYTE5(v76) )\n    goto LABEL_109;\n  if ( BYTE1(v76) || v72 )\n  {\n    v57 = dcgettext(0LL, \"cannot set target context and preserve it\", 5);\n    error(1, 0, v57);\n    goto LABEL_147;\n  }\n  while ( 2 )\n  {\n    LODWORD(v8) = (_DWORD)v8 - dword_61F4DC;\n    v66 = (char **)(v5 + 8LL * dword_61F4DC);\n    v16 = (v6 == 0LL) & (byte_621540 ^ 1);\n    if ( v16 >= (int)v8 )\n      goto LABEL_144;\n    if ( (_BYTE)v4 )\n    {\n      if ( !v6 )\n      {\n        if ( (int)v8 <= 2 )\n          goto LABEL_71;\n        goto LABEL_141;\n      }\n      v56 = dcgettext(0LL, \"cannot combine --target-directory (-t) and --no-target-directory (-T)\", 5);\n      error(1, 0, v56);\nLABEL_144:\n      if ( (_DWORD)v8 == 1 )\n      {\n        v53 = \"missing destination file operand after %s\";\n        v54 = sub_40EA00(4LL, *v66);\n        goto LABEL_142;\n      }\nLABEL_147:\n      v19 = \"missing file operand\";\n      goto LABEL_148;\n    }\nLABEL_96:\n    if ( !v16 )\n      goto LABEL_71;\n    v6 = 0LL;\n    if ( (_DWORD)v8 == 1 )\n      goto LABEL_71;\n    v5 = 1LL;\n    v6 = v66[(int)v8 - 1];\n    v26 = sub_40AD40(v6);\n    v27 = -1LL;\n    v28 = (_BYTE *)v26;\n    do\n    {\n      if ( !v27 )\n        break;\n      v29 = *v28++ == (unsigned __int8)v4;\n      --v27;\n    }\n    while ( !v29 );\n    if ( -v27 != 2 )\n      v5 = *(_BYTE *)(v26 + -v27 - 2 - 1) == 47;\n    if ( __xstat(1, v6, &stat_buf) )\n    {\n      v4 = *__errno_location();\n      if ( v4 )\n      {\n        if ( v4 != 2 )\n          goto LABEL_152;\nLABEL_106:\n        if ( (_DWORD)v5 )\n          goto LABEL_153;\n        v6 = 0LL;\n        if ( (_DWORD)v8 == 2 )\n          goto LABEL_71;\n        v8 = (int *)sub_40EA00(4LL, v66[(int)v8 - 1]);\n        v30 = dcgettext(0LL, \"target %s is not a directory\", 5);\n        error(1, 0, v30, v8);\nLABEL_109:\n        if ( v72 )\n        {\n          v31 = __errno_location();\n          *v31 = 95;\n          v8 = v31;\n          v7 = sub_40EC50(v72);\n          v32 = dcgettext(0LL, \"failed to set default file creation context to %s\", 5);\n          error(1, *v8, v32, v7);\nLABEL_111:\n          sub_409A90();\n          if ( v6 )\n          {\n            v33 = 0LL;\n            sub_4056A0(v73);\n            v68 = 0;\n            v70 = (int)v8;\n            do\n            {\n              v34 = v66[v33];\n              v35 = sub_40AD40(v34);\n              v36 = sub_40B0C0(v6, v35, 0LL);\n              v37 = (void *)v36;\n              if ( (((unsigned __int8)v7 & ((_DWORD)v33 == 0)) == 0 || (unsigned __int8)sub_403DB0(v34, v36, v73, 1LL))\n                && (unsigned __int8)sub_404090(v34, (char *)v37) )\n              {\n                free(v37);\n              }\n              else\n              {\n                free(v37);\n                v68 = 1;\n              }\n              ++v33;\n            }\n            while ( v70 > (int)v33 );\n            return v68;\n          }\n          v6 = v66[1];\n          v39 = *v66;\n          if ( (_BYTE)v7 )\n          {\n            v40 = sub_403DB0(*v66, v66[1], v73, 0LL);\n            v41 = 0;\n            if ( !v40 )\n              return !(v41 & 1);\n            goto LABEL_133;\n          }\n          return (unsigned __int8)(sub_404090(*v66, v66[1]) ^ 1);\n        }\n        continue;\n      }\n    }\n    break;\n  }\n  if ( (stat_buf.st_mode & 0xF000) != 0x4000 )\n  {\n    v4 = 0;\n    goto LABEL_106;\n  }\n  LODWORD(v8) = (_DWORD)v8 - 1;\n  v6 = v66[(int)v8];\nLABEL_71:\n  if ( v69 )\n  {\n    v17 = sub_40CA80(v69);\n    v18 = (void *)v17;\n    if ( v17 )\n    {\n      mode = sub_40CE50(0LL, 0LL, 0LL, v17, 0LL);\n      dword_61F444 = sub_40CE50(0LL, 1LL, 0LL, v18, &dword_61F440);\n      free(v18);\n      goto LABEL_74;\n    }\n    v59 = sub_40EC50(v69);\n    v60 = dcgettext(0LL, \"invalid mode %s\", 5);\n    error(1, 0, v60, v59);\nLABEL_151:\n    v61 = dcgettext(0LL, \"the strip option may not be used when installing a directory\", 5);\n    error(1, 0, v61);\nLABEL_152:\n    v62 = sub_40EA00(4LL, v6);\n    v63 = dcgettext(0LL, \"failed to access %s\", 5);\n    error(1, v4, v63, v62);\nLABEL_153:\n    v64 = sub_40EA00(4LL, v6);\n    v65 = dcgettext(0LL, \"target %s is not a directory\", 5);\n    error(1, v4, v65, v64);\n    start();\n  }\nLABEL_74:\n  if ( v71 && !byte_621541 )\n  {\n    v44 = dcgettext(0LL, \"WARNING: ignoring --strip-program option as -s option was not specified\", 5);\n    error(0, 0, v44);\n  }\n  if ( byte_621542 )\n  {\n    if ( HIBYTE(v75) )\n    {\n      v19 = \"options --compare (-C) and --preserve-timestamps are mutually exclusive\";\n    }\n    else\n    {\n      v19 = \"options --compare (-C) and --strip are mutually exclusive\";\n      if ( !byte_621541 )\n      {\n        if ( (mode & 0xFFFF0E00) != 0 )\n        {\n          v43 = dcgettext(\n                  0LL,\n                  \"the --compare (-C) option is ignored when you specify a mode with non-permission bits\",\n                  5);\n          error(0, 0, v43);\n        }\n        goto LABEL_82;\n      }\n    }\nLABEL_148:\n    v58 = dcgettext(0LL, v19, 5);\n    error(0, 0, v58);\nLABEL_22:\n    sub_4046F0(1);\n  }\nLABEL_82:\n  if ( nptr )\n  {\n    v20 = getpwnam(nptr);\n    if ( v20 )\n    {\n      pw_uid = v20->pw_uid;\n      goto LABEL_85;\n    }\n    if ( (unsigned int)sub_411570(nptr) || (pw_uid = stat_buf.st_dev, stat_buf.st_dev > 0xFFFFFFFF) )\n    {\n      v8 = (int *)sub_40EC50(nptr);\n      v45 = dcgettext(0LL, \"invalid user %s\", 5);\n      error(1, 0, v45, v8);\nLABEL_130:\n      if ( (unsigned int)sub_411570(qword_621548) || (st_dev = stat_buf.st_dev, stat_buf.st_dev > 0xFFFFFFFF) )\n      {\n        v39 = (char *)sub_40EC50(qword_621548);\n        v46 = dcgettext(0LL, \"invalid group %s\", 5);\n        error(1, 0, v46, v39);\nLABEL_133:\n        v41 = sub_404090(v39, v6);\n        return !(v41 & 1);\n      }\n      goto LABEL_89;\n    }\nLABEL_85:\n    owner = pw_uid;\n    endpwent();\n  }\n  else\n  {\n    owner = -1;\n  }\n  if ( qword_621548 )\n  {\n    v22 = getgrnam(qword_621548);\n    if ( !v22 )\n      goto LABEL_130;\n    st_dev = v22->gr_gid;\nLABEL_89:\n    group = st_dev;\n    endgrent();\n  }\n  else\n  {\n    group = -1;\n  }\n  if ( !byte_621540 )\n    goto LABEL_111;\n  return (unsigned int)sub_40F910((unsigned int)v8, v66, sub_403F50, v73);\n}\n"
        },
        {
            "funcName": "sub_403CFB",
            "funcStartAddr": "0x403cfb",
            "funcEndAddr": "0x403d1a",
            "decompiledFuncCode": "void *sub_403CFB()\n{\n  return &unk_61F4E8;\n}\n"
        },
        {
            "funcName": "sub_403D1A",
            "funcStartAddr": "0x403d1a",
            "funcEndAddr": "0x403d51",
            "decompiledFuncCode": "__int64 sub_403D1A()\n{\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_403D51",
            "funcStartAddr": "0x403d51",
            "funcEndAddr": "0x403da8",
            "decompiledFuncCode": "void *sub_403D51()\n{\n  void *result; // rax\n\n  if ( !byte_61F528 )\n  {\n    while ( qword_61F530 < (unsigned __int64)(&qword_61EE48 - qword_61EE40 - 1) )\n      ((void (*)(void))qword_61EE40[++qword_61F530])();\n    result = sub_403CFB();\n    byte_61F528 = 1;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_403DA8",
            "funcStartAddr": "0x403da8",
            "funcEndAddr": "0x403dad",
            "decompiledFuncCode": "// attributes: thunk\n__int64 sub_403DA8()\n{\n  return sub_403D1A();\n}\n"
        },
        {
            "funcName": "sub_403DB0",
            "funcStartAddr": "0x403db0",
            "funcEndAddr": "0x403f4a",
            "decompiledFuncCode": "__int64 __fastcall sub_403DB0(_BYTE *a1, _BYTE *a2, __int64 a3, char a4)\n{\n  __int64 v5; // rbp\n  int *v6; // r12\n  __int64 v7; // rbx\n  char *v8; // rax\n  int v10; // eax\n  int v11; // r12d\n  int v12; // ebp\n  __int64 v13; // rbp\n  char *v14; // rbx\n  int *v15; // rax\n  __int64 v16; // rbx\n  char *v17; // rax\n  int v18[8]; // [rsp+8h] [rbp-20h] BYREF\n\n  if ( !a4 && *a1 == 47 && *a2 == 47 )\n  {\n    v18[0] = 0;\n    sub_40F8A0(v18);\n    if ( sub_40C5E0(a2, v18, &sub_404020, a3) == -1 )\n    {\n      v13 = sub_40EA00(4LL, a2);\n      v14 = dcgettext(0LL, \"cannot create directory %s\", 5);\n      v15 = __errno_location();\n      error(0, *v15, v14, v13);\n      return 0LL;\n    }\n    return 1LL;\n  }\n  v18[0] = 0;\n  v5 = sub_40C5E0(a2, v18, &sub_404020, a3);\n  v6 = __errno_location();\n  if ( v5 == -1 )\n  {\n    v7 = sub_40EA00(4LL, a2);\n    v8 = dcgettext(0LL, \"cannot create directory %s\", 5);\n    error(0, *v6, v8, v7);\n    sub_40F770(v18, 1LL);\n    sub_40F8A0(v18);\n    return 0LL;\n  }\n  v10 = sub_40F770(v18, 0LL);\n  v11 = *v6;\n  v12 = v10;\n  sub_40F8A0(v18);\n  if ( v12 > 0 )\n    return 0LL;\n  if ( !v12 )\n    return 1LL;\n  v16 = sub_40EA00(4LL, a2);\n  v17 = dcgettext(0LL, \"cannot create directory %s\", 5);\n  error(0, v11, v17, v16);\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_403F50",
            "funcStartAddr": "0x403f50",
            "funcEndAddr": "0x403fb2",
            "decompiledFuncCode": "__int64 __fastcall sub_403F50(__int64 a1, __int64 a2, __int64 a3)\n{\n  unsigned __int8 v4; // al\n  unsigned int v5; // ebp\n\n  v4 = sub_40C770(\n         a1,\n         a2,\n         &sub_404020,\n         a3,\n         (unsigned int)dword_61F444,\n         sub_404000,\n         (unsigned int)dword_61F440,\n         owner,\n         group,\n         0LL) ^ 1;\n  v5 = v4;\n  if ( !v4 && *(_BYTE *)(a3 + 33) )\n    *__errno_location() = 95;\n  return v5;\n}\n"
        },
        {
            "funcName": "sub_403FC0",
            "funcStartAddr": "0x403fc0",
            "funcEndAddr": "0x403ff7",
            "decompiledFuncCode": "__int64 __fastcall sub_403FC0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, char a7)\n{\n  sub_40EA00(4LL, a1);\n  dcgettext(0LL, \"creating directory %s\", 5);\n  return sub_404AE0(stdout, a7);\n}\n"
        },
        {
            "funcName": "sub_404000",
            "funcStartAddr": "0x404000",
            "funcEndAddr": "0x404012",
            "decompiledFuncCode": "__int64 __fastcall sub_404000(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, char a7)\n{\n  __int64 result; // rax\n\n  if ( *(_BYTE *)(a2 + 46) )\n    return sub_403FC0(a1, a2, a3, a4, a5, a6, a7);\n  return result;\n}\n"
        },
        {
            "funcName": "sub_404020",
            "funcStartAddr": "0x404020",
            "funcEndAddr": "0x404081",
            "decompiledFuncCode": "int __fastcall sub_404020(__int64 a1, const char *a2, __int64 a3)\n{\n  int result; // eax\n  __int64 v5; // rdx\n  __int64 v6; // rcx\n  __int64 v7; // r8\n  __int64 v8; // r9\n  char v9; // [rsp+0h] [rbp-28h]\n\n  if ( *(_BYTE *)(a3 + 33) )\n    *__errno_location() = 95;\n  result = mkdir(a2, 0x1EDu);\n  if ( !result )\n  {\n    if ( *(_BYTE *)(a3 + 46) )\n    {\n      sub_403FC0(a1, 493LL, v5, v6, v7, v8, v9);\n      return 0;\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_404090",
            "funcStartAddr": "0x404090",
            "funcEndAddr": "0x4046eb",
            "decompiledFuncCode": "__int64 __fastcall sub_404090(char *file, char *filename, __int64 a3)\n{\n  __int64 v3; // rbp\n  char *v4; // rbx\n  __mode_t v5; // r14d\n  __uid_t v6; // eax\n  __gid_t v7; // eax\n  int v8; // r14d\n  int v9; // r15d\n  size_t v10; // rax\n  __int64 v11; // rax\n  unsigned int v12; // ebp\n  __pid_t v14; // eax\n  const char *v15; // rsi\n  char *v16; // rbp\n  int *v17; // rax\n  __int64 v18; // rbp\n  char *v19; // rbx\n  int *v20; // rax\n  const char *v21; // rsi\n  __int64 v22; // rbp\n  char *v23; // rbx\n  int *v24; // rax\n  const char *v25; // rsi\n  __int64 v26; // r12\n  char *v27; // rbp\n  int *v28; // rax\n  const char *v29; // rdx\n  char *v30; // rax\n  char v31; // al\n  char *v32; // r12\n  size_t v33; // rbx\n  char *v34; // rax\n  char *v35; // r13\n  _BYTE *v36; // rdx\n  int *v37; // rax\n  int *v38; // r14\n  int *v39; // rax\n  int *v40; // r14\n  char *v41; // rbp\n  int *v42; // rax\n  __int64 v43; // [rsp+8h] [rbp-1F0h]\n  struct stat stat_buf; // [rsp+10h] [rbp-1E8h] BYREF\n  struct stat v45; // [rsp+A0h] [rbp-158h] BYREF\n  struct stat v46; // [rsp+130h] [rbp-C8h] BYREF\n\n  v3 = a3;\n  v4 = filename;\n  if ( *(_BYTE *)(a3 + 31) && __xstat(1, file, &stat_buf) )\n    goto LABEL_46;\n  if ( byte_621542 )\n  {\n    v5 = mode;\n    if ( (mode & 0xFFFF0E00) == 0\n      && !__lxstat(1, file, &v45)\n      && !__lxstat(1, filename, &v46)\n      && (v45.st_mode & 0xF000) == 0x8000\n      && (v46.st_mode & 0xF000) == 0x8000\n      && ((v46.st_mode | v45.st_mode) & 0xFFFF0E00) == 0\n      && v45.st_size == v46.st_size\n      && v5 == (v46.st_mode & 0xFFF) )\n    {\n      v6 = owner;\n      if ( owner != -1 || (v37 = __errno_location(), *v37 = 0, v38 = v37, v6 = getuid(), v6 != -1) || !*v38 )\n      {\n        if ( v6 == v46.st_uid )\n        {\n          v7 = group;\n          if ( group != -1 || (v39 = __errno_location(), *v39 = 0, v40 = v39, v7 = getgid(), v7 != -1) || !*v40 )\n          {\n            if ( v7 == v46.st_gid )\n            {\n              if ( dword_621560 && *(_BYTE *)(v3 + 37) )\n                goto LABEL_77;\n              v8 = open(file, 0);\n              if ( v8 >= 0 )\n              {\n                v9 = open(filename, 0);\n                if ( v9 >= 0 )\n                {\n                  do\n                  {\n                    v11 = sub_40B1C0(v8, &unk_61F540, 0x1000uLL);\n                    if ( !v11 )\n                    {\n                      close(v8);\n                      close(v9);\n                      goto LABEL_25;\n                    }\n                    v43 = v11;\n                    v10 = sub_40B1C0(v9, &unk_620540, 0x1000uLL);\n                  }\n                  while ( v10 == v43 && !memcmp(&unk_61F540, &unk_620540, v10) );\n                  close(v8);\n                  close(v9);\n                }\n                else\n                {\n                  close(v8);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  while ( 1 )\n  {\n    if ( !(unsigned __int8)sub_409810(file, v4, 0LL, v3, &v46, 0LL) )\n      return 0;\nLABEL_25:\n    if ( !byte_621541 )\n    {\n      if ( *(_BYTE *)(v3 + 31) )\n        goto LABEL_27;\n      goto LABEL_29;\n    }\n    v14 = fork();\n    if ( v14 == -1 )\n    {\n      v15 = \"fork system call failed\";\nLABEL_43:\n      v16 = dcgettext(0LL, v15, 5);\n      v17 = __errno_location();\n      error(0, *v17, v16);\n      goto LABEL_44;\n    }\n    if ( v14 )\n      break;\n    v41 = arg;\n    execlp(arg, arg, v4, 0LL);\n    v3 = sub_40EA00(4LL, v41);\n    v4 = dcgettext(0LL, \"cannot run %s\", 5);\n    v42 = __errno_location();\n    error(1, *v42, v4, v3);\nLABEL_77:\n    *__errno_location() = 95;\n  }\n  if ( waitpid(v14, (int *)&v46, 0) < 0 )\n  {\n    v15 = \"waiting for strip\";\n    goto LABEL_43;\n  }\n  if ( !(v46.st_dev & 0x7F | BYTE1(v46.st_dev)) )\n  {\n    if ( *(_BYTE *)(v3 + 31) )\n    {\n      if ( byte_621541 )\n        goto LABEL_28;\nLABEL_27:\n      if ( (stat_buf.st_mode & 0xF000) != 0x8000 )\n      {\nLABEL_28:\n        v46.st_dev = stat_buf.st_atim.tv_sec;\n        v46.st_ino = stat_buf.st_atim.tv_nsec;\n        *(struct timespec *)&v46.st_nlink = stat_buf.st_mtim;\n        if ( (unsigned int)sub_410AA0(v4) )\n        {\n          v21 = \"cannot set timestamps for %s\";\n          v22 = sub_40EA00(4LL, v4);\n          goto LABEL_47;\n        }\n      }\n    }\nLABEL_29:\n    if ( (group & owner) != -1 && lchown(v4, owner, group) )\n    {\n      v25 = \"cannot change ownership of %s\";\n      v26 = sub_40EA00(4LL, v4);\n    }\n    else\n    {\n      v12 = 1;\n      if ( !chmod(v4, mode) )\n      {\nLABEL_32:\n        if ( byte_61F44C && dword_621560 == 1 && !__lxstat(1, v4, &v46) )\n        {\n          if ( byte_61F430 && *v4 == 47 )\n          {\n            v31 = v4[1];\n            v32 = v4 + 1;\n            if ( v31 == 47 )\n            {\n              while ( 1 )\n              {\n                v31 = v32[1];\n                v36 = v32 + 1;\n                if ( v31 != 47 )\n                  break;\n                ++v32;\n              }\n            }\n            else\n            {\n              v36 = v4 + 1;\n              v32 = v4;\n            }\n            if ( v31 )\n            {\n              do\n                ++v36;\n              while ( *v36 && *v36 != 47 );\n              v33 = v36 - v32;\n              v34 = (char *)malloc(v36 - v32 + 2);\n              v35 = v34;\n              if ( v34 )\n              {\n                *(_WORD *)stpncpy(v34, v32, v33) = 47;\n                free(v35);\n              }\n            }\n          }\n          byte_61F430 = 0;\n          *__errno_location() = 95;\n        }\n        return v12;\n      }\n      v25 = \"cannot change permissions of %s\";\n      v26 = sub_40EA00(4LL, v4);\n    }\n    v27 = dcgettext(0LL, v25, 5);\n    v28 = __errno_location();\n    v29 = v27;\n    v12 = 0;\n    error(0, *v28, v29, v26);\n    goto LABEL_32;\n  }\n  v30 = dcgettext(0LL, \"strip process terminated abnormally\", 5);\n  error(0, 0, v30);\nLABEL_44:\n  if ( !unlink(v4) )\n    return 0;\n  v18 = sub_40EA00(4LL, v4);\n  v19 = dcgettext(0LL, \"cannot unlink %s\", 5);\n  v20 = __errno_location();\n  error(1, *v20, v19, v18);\nLABEL_46:\n  v21 = \"cannot stat %s\";\n  v22 = sub_40EA00(4LL, file);\nLABEL_47:\n  v23 = dcgettext(0LL, v21, 5);\n  v24 = __errno_location();\n  error(0, *v24, v23, v22);\n  return 0;\n}\n"
        },
        {
            "funcName": "sub_4046F0",
            "funcStartAddr": "0x4046f0",
            "funcEndAddr": "0x404add",
            "decompiledFuncCode": "void __fastcall __noreturn sub_4046F0(int status)\n{\n  char *v1; // rbp\n  char *v2; // rax\n  char *v3; // rax\n  FILE *v4; // rbp\n  char *v5; // rax\n  FILE *v6; // rbp\n  char *v7; // rax\n  FILE *v8; // rbp\n  char *v9; // rax\n  FILE *v10; // rbp\n  char *v11; // rax\n  FILE *v12; // rbp\n  char *v13; // rax\n  FILE *v14; // rbp\n  char *v15; // rax\n  FILE *v16; // rbp\n  char *v17; // rax\n  FILE *v18; // rbp\n  char *v19; // rax\n  FILE *v20; // rbp\n  char *v21; // rax\n  FILE *v22; // rbp\n  char *v23; // rax\n  __int64 *v24; // rax\n  char *v25; // rbp\n  char *v26; // rax\n  __int64 v27; // r8\n  __int64 v28; // r9\n  char *v29; // rax\n  const char *v30; // r12\n  char *v31; // rax\n  __int64 v32; // r8\n  __int64 v33; // r9\n  char *v34; // rax\n  __int64 v35; // r8\n  __int64 v36; // r9\n  char *v37; // rax\n  __int64 v38; // r8\n  __int64 v39; // r9\n  char *v40; // rax\n  char *v41; // rax\n  __int64 v42; // r8\n  __int64 v43; // r9\n  char *v44; // rax\n  __int64 v45; // rcx\n  __int64 v46; // r8\n  __int64 v47; // r9\n  __int64 v48[17]; // [rsp+0h] [rbp-88h] BYREF\n\n  v1 = s;\n  if ( status )\n  {\n    v2 = dcgettext(0LL, \"Try '%s --help' for more information.\\n\", 5);\n    __fprintf_chk(stderr, 1LL, v2, v1);\n    goto LABEL_3;\n  }\n  v3 = dcgettext(\n         0LL,\n         \"Usage: %s [OPTION]... [-T] SOURCE DEST\\n\"\n         \"  or:  %s [OPTION]... SOURCE... DIRECTORY\\n\"\n         \"  or:  %s [OPTION]... -t DIRECTORY SOURCE...\\n\"\n         \"  or:  %s [OPTION]... -d DIRECTORY...\\n\",\n         5);\n  __printf_chk(1LL, v3, v1, v1, v1, v1);\n  v4 = stdout;\n  v5 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"This install program copies files (often just compiled) into destination\\n\"\n         \"locations you choose.  If you want to download and install a ready-to-use\\n\"\n         \"package on a GNU/Linux system, you should instead be using a package manager\\n\"\n         \"like yum(1) or apt-get(1).\\n\"\n         \"\\n\"\n         \"In the first three forms, copy SOURCE to DEST or multiple SOURCE(s) to\\n\"\n         \"the existing DIRECTORY, while setting permission modes and owner/group.\\n\"\n         \"In the 4th form, create all components of the given DIRECTORY(ies).\\n\",\n         5);\n  fputs_unlocked(v5, v4);\n  v6 = stdout;\n  v7 = dcgettext(0LL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5);\n  fputs_unlocked(v7, v6);\n  v8 = stdout;\n  v9 = dcgettext(\n         0LL,\n         \"      --backup[=CONTROL]  make a backup of each existing destination file\\n\"\n         \"  -b                  like --backup but does not accept an argument\\n\"\n         \"  -c                  (ignored)\\n\"\n         \"  -C, --compare       compare each pair of source and destination files, and\\n\"\n         \"                        in some cases, do not modify the destination at all\\n\"\n         \"  -d, --directory     treat all arguments as directory names; create all\\n\"\n         \"                        components of the specified directories\\n\",\n         5);\n  fputs_unlocked(v9, v8);\n  v10 = stdout;\n  v11 = dcgettext(\n          0LL,\n          \"  -D                  create all leading components of DEST except the last,\\n\"\n          \"                        or all components of --target-directory,\\n\"\n          \"                        then copy SOURCE to DEST\\n\"\n          \"  -g, --group=GROUP   set group ownership, instead of process' current group\\n\"\n          \"  -m, --mode=MODE     set permission mode (as in chmod), instead of rwxr-xr-x\\n\"\n          \"  -o, --owner=OWNER   set ownership (super-user only)\\n\",\n          5);\n  fputs_unlocked(v11, v10);\n  v12 = stdout;\n  v13 = dcgettext(\n          0LL,\n          \"  -p, --preserve-timestamps   apply access/modification times of SOURCE files\\n\"\n          \"                        to corresponding destination files\\n\"\n          \"  -s, --strip         strip symbol tables\\n\"\n          \"      --strip-program=PROGRAM  program used to strip binaries\\n\"\n          \"  -S, --suffix=SUFFIX  override the usual backup suffix\\n\"\n          \"  -t, --target-directory=DIRECTORY  copy all SOURCE arguments into DIRECTORY\\n\"\n          \"  -T, --no-target-directory  treat DEST as a normal file\\n\"\n          \"  -v, --verbose       print the name of each directory as it is created\\n\",\n          5);\n  fputs_unlocked(v13, v12);\n  v14 = stdout;\n  v15 = dcgettext(\n          0LL,\n          \"      --preserve-context  preserve SELinux security context\\n\"\n          \"  -Z                      set SELinux security context of destination\\n\"\n          \"                            file and each created directory to default type\\n\"\n          \"      --context[=CTX]     like -Z, or if CTX is specified then set the\\n\"\n          \"                            SELinux or SMACK security context to CTX\\n\",\n          5);\n  fputs_unlocked(v15, v14);\n  v16 = stdout;\n  v17 = dcgettext(0LL, \"      --help     display this help and exit\\n\", 5);\n  fputs_unlocked(v17, v16);\n  v18 = stdout;\n  v19 = dcgettext(0LL, \"      --version  output version information and exit\\n\", 5);\n  fputs_unlocked(v19, v18);\n  v20 = stdout;\n  v21 = dcgettext(\n          0LL,\n          \"\\n\"\n          \"The backup suffix is '~', unless set with --suffix or SIMPLE_BACKUP_SUFFIX.\\n\"\n          \"The version control method may be selected via the --backup option or through\\n\"\n          \"the VERSION_CONTROL environment variable.  Here are the values:\\n\"\n          \"\\n\",\n          5);\n  fputs_unlocked(v21, v20);\n  v22 = stdout;\n  v23 = dcgettext(\n          0LL,\n          \"  none, off       never make backups (even if --backup is given)\\n\"\n          \"  numbered, t     make numbered backups\\n\"\n          \"  existing, nil   numbered if numbered backups exist, simple otherwise\\n\"\n          \"  simple, never   always make simple backups\\n\",\n          5);\n  fputs_unlocked(v23, v22);\n  v48[0] = (__int64)\"[\";\n  v24 = v48;\n  v48[1] = (__int64)\"test invocation\";\n  v48[2] = (__int64)\"coreutils\";\n  v48[3] = (__int64)\"Multi-call invocation\";\n  v48[4] = (__int64)\"sha224sum\";\n  v48[5] = (__int64)\"sha2 utilities\";\n  v48[6] = (__int64)\"sha256sum\";\n  v48[7] = (__int64)\"sha2 utilities\";\n  v48[8] = (__int64)\"sha384sum\";\n  v48[9] = (__int64)\"sha2 utilities\";\n  v48[10] = (__int64)\"sha512sum\";\n  v48[11] = (__int64)\"sha2 utilities\";\n  v48[12] = 0LL;\n  v48[13] = 0LL;\n  do\n    v24 += 2;\n  while ( *v24 && strcmp(\"install\", (const char *)*v24) );\n  v25 = (char *)v24[1];\n  if ( v25 )\n  {\n    v26 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v26, &unk_417166, \"https://www.gnu.org/software/coreutils/\", v27, v28);\n    v29 = setlocale(5, 0LL);\n    if ( !v29 || !strncmp(v29, \"en_\", 3uLL) )\n      goto LABEL_10;\n  }\n  else\n  {\n    v37 = dcgettext(0LL, \"\\n%s online help: <%s>\\n\", 5);\n    __printf_chk(1LL, v37, &unk_417166, \"https://www.gnu.org/software/coreutils/\", v38, v39);\n    v40 = setlocale(5, 0LL);\n    if ( !v40 || !strncmp(v40, \"en_\", 3uLL) )\n    {\n      v25 = \"install\";\n      v41 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n      v30 = \"Multi-call invocation\" + 10;\n      __printf_chk(1LL, v41, \"https://www.gnu.org/software/coreutils/\", \"install\", v42, v43);\nLABEL_12:\n      v34 = dcgettext(0LL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5);\n      __printf_chk(1LL, v34, v25, v30, v35, v36);\nLABEL_3:\n      exit(status);\n    }\n    v25 = \"install\";\n  }\n  v44 = dcgettext(0LL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5);\n  __printf_chk(1LL, v44, \"install\", v45, v46, v47);\nLABEL_10:\n  v30 = \"Multi-call invocation\" + 10;\n  v31 = dcgettext(0LL, \"Full documentation at: <%s%s>\\n\", 5);\n  __printf_chk(1LL, v31, \"https://www.gnu.org/software/coreutils/\", \"install\", v32, v33);\n  if ( v25 != \"install\" )\n    v30 = \"\";\n  goto LABEL_12;\n}\n"
        },
        {
            "funcName": "sub_404AE0",
            "funcStartAddr": "0x404ae0",
            "funcEndAddr": "0x404bcf",
            "decompiledFuncCode": "int __fastcall sub_404AE0(FILE *s)\n{\n  char *IO_write_ptr; // rax\n\n  fputs_unlocked(::s, s);\n  fwrite_unlocked(&unk_4185C0, 1uLL, 2uLL, s);\n  sub_412A70(s);\n  IO_write_ptr = s->_IO_write_ptr;\n  if ( IO_write_ptr >= s->_IO_write_end )\n  {\n    LODWORD(IO_write_ptr) = __overflow(s, 10);\n  }\n  else\n  {\n    s->_IO_write_ptr = IO_write_ptr + 1;\n    *IO_write_ptr = 10;\n  }\n  return (int)IO_write_ptr;\n}\n"
        },
        {
            "funcName": "sub_404BD0",
            "funcStartAddr": "0x404bd0",
            "funcEndAddr": "0x404c14",
            "decompiledFuncCode": "bool __fastcall sub_404BD0(char *name, __int16 a2)\n{\n  if ( (a2 & 0xF000) == 40960 )\n    return 1;\n  if ( (unsigned __int8)sub_4112A0() )\n    return 1;\n  return euidaccess(name, 2) == 0;\n}\n"
        },
        {
            "funcName": "sub_404C20",
            "funcStartAddr": "0x404c20",
            "funcEndAddr": "0x404cc2",
            "decompiledFuncCode": "__int64 __fastcall sub_404C20(int fd, size_t a2)\n{\n  size_t v2; // rbx\n  size_t v3; // rbp\n  __int64 v4; // rax\n  void *v6; // rax\n\n  v2 = a2;\n  if ( !buf )\n  {\n    v6 = calloc(n, 1uLL);\n    if ( v6 )\n    {\n      buf = v6;\n    }\n    else\n    {\n      buf = &unk_621580;\n      n = 1024LL;\n    }\n  }\n  if ( !a2 )\n    return 1LL;\n  while ( 1 )\n  {\n    v3 = v2;\n    if ( n <= v2 )\n      v3 = n;\n    v4 = sub_40B240(fd, buf, v3);\n    if ( v4 != v3 )\n      break;\n    v2 -= v4;\n    if ( !v2 )\n      return 1LL;\n  }\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_404CD0",
            "funcStartAddr": "0x404cd0",
            "funcEndAddr": "0x404d07",
            "decompiledFuncCode": "__int64 __fastcall sub_404CD0(int a1, __off_t a2, __off_t a3)\n{\n  int v3; // ebx\n  int v5; // eax\n\n  v3 = fallocate(a1, 3, a2, a3);\n  if ( v3 < 0 && ((v5 = *__errno_location(), v5 == 38) || v5 == 95) )\n    return 0LL;\n  else\n    return (unsigned int)v3;\n}\n"
        },
        {
            "funcName": "sub_404D10",
            "funcStartAddr": "0x404d10",
            "funcEndAddr": "0x404d2d",
            "decompiledFuncCode": "int __fastcall sub_404D10(int a1, const char *a2, __mode_t a3)\n{\n  if ( a1 >= 0 )\n    return fchmod(a1, a3);\n  else\n    return chmod(a2, a3);\n}\n"
        },
        {
            "funcName": "sub_404D30",
            "funcStartAddr": "0x404d30",
            "funcEndAddr": "0x404d70",
            "decompiledFuncCode": "__int64 sub_404D30()\n{\n  int *v0; // rax\n  int *v1; // rbx\n  char *v2; // rax\n\n  v0 = __errno_location();\n  *v0 = 95;\n  v1 = v0;\n  v2 = dcgettext(0LL, \"failed to restore the default file creation context\", 5);\n  error(1, *v1, v2);\n  return sub_404D70();\n}\n"
        },
        {
            "funcName": "sub_404D70",
            "funcStartAddr": "0x404d70",
            "funcEndAddr": "0x404e1e",
            "decompiledFuncCode": "int __fastcall sub_404D70(__int64 a1, __int64 a2, __int64 a3)\n{\n  const char *v4; // rbp\n  const char *v5; // rax\n  __int64 v6; // rbx\n  char *v7; // rax\n  char *IO_write_ptr; // rax\n\n  v4 = (const char *)sub_40E920(1LL, 4LL, a2);\n  v5 = (const char *)sub_40E920(0LL, 4LL, a1);\n  __printf_chk(1LL, \"%s -> %s\", v5, v4);\n  if ( a3 )\n  {\n    v6 = sub_40EA00(4LL, a3);\n    v7 = dcgettext(0LL, \" (backup: %s)\", 5);\n    __printf_chk(1LL, v7, v6);\n  }\n  IO_write_ptr = stdout->_IO_write_ptr;\n  if ( IO_write_ptr >= stdout->_IO_write_end )\n  {\n    LODWORD(IO_write_ptr) = __overflow(stdout, 10);\n  }\n  else\n  {\n    stdout->_IO_write_ptr = IO_write_ptr + 1;\n    *IO_write_ptr = 10;\n  }\n  return (int)IO_write_ptr;\n}\n"
        },
        {
            "funcName": "sub_404E20",
            "funcStartAddr": "0x404e20",
            "funcEndAddr": "0x404f4c",
            "decompiledFuncCode": "__int64 __fastcall sub_404E20(__int64 a1, char *a2, _DWORD *a3)\n{\n  char *v4; // rbx\n  char *v5; // rdx\n  FILE *v6; // rdi\n  char *v8; // rbx\n  char *v9; // rax\n  char v10[52]; // [rsp+4h] [rbp-34h] BYREF\n\n  if ( sub_404BD0(a2, *a3) )\n  {\n    sub_40EA00(4LL, a2);\n    v8 = s;\n    v9 = dcgettext(0LL, \"%s: overwrite %s? \", 5);\n    __fprintf_chk(stderr, 1LL, v9, v8);\n    return ((__int64 (*)(void))sub_4119A0)();\n  }\n  else\n  {\n    sub_40AF30((unsigned int)*a3, v10);\n    v10[10] = 0;\n    sub_40EA00(4LL, a2);\n    v4 = s;\n    if ( *(_BYTE *)(a1 + 24) || (*(_DWORD *)(a1 + 20) & 0xFFFF00) != 0 )\n      v5 = dcgettext(0LL, \"%s: replace %s, overriding mode %04lo (%s)? \", 5);\n    else\n      v5 = dcgettext(0LL, \"%s: unwritable %s (mode %04lo, %s); try anyway? \", 5);\n    v6 = stderr;\n    __fprintf_chk(stderr, 1LL, v5, v4);\n    return ((__int64 (__fastcall *)(FILE *, __int64))sub_4119A0)(v6, 1LL);\n  }\n}\n"
        },
        {
            "funcName": "sub_404F50",
            "funcStartAddr": "0x404f50",
            "funcEndAddr": "0x405053",
            "decompiledFuncCode": "__int64 __fastcall sub_404F50(__int64 a1, __int64 a2, unsigned __int8 a3, char a4, char a5)\n{\n  unsigned int v6; // ebx\n  int v7; // eax\n  __int64 v9; // rbp\n  char *v10; // rax\n  __int64 v11; // r13\n  __int64 v12; // rbp\n  char *v13; // rbx\n  int *v14; // rax\n\n  v6 = a1;\n  v7 = sub_409E90(4294967196LL, a1, 4294967196LL, a2, (unsigned __int8)(a5 != 0) << 10, a3);\n  if ( v7 < 0 )\n  {\n    v11 = sub_40E920(1LL, 4LL, a1);\n    v12 = sub_40E920(0LL, 4LL, a2);\n    v13 = dcgettext(0LL, \"cannot create hard link %s to %s\", 5);\n    v14 = __errno_location();\n    error(0, *v14, v13, v12, v11);\n    return 0LL;\n  }\n  else\n  {\n    LOBYTE(v6) = a4 & (v7 > 0);\n    if ( (_BYTE)v6 )\n    {\n      v9 = sub_40EA00(4LL, a2);\n      v10 = dcgettext(0LL, \"removed %s\\n\", 5);\n      __printf_chk(1LL, v10, v9);\n      return v6;\n    }\n    else\n    {\n      return 1LL;\n    }\n  }\n}\n"
        },
        {
            "funcName": "sub_405060",
            "funcStartAddr": "0x405060",
            "funcEndAddr": "0x405117",
            "decompiledFuncCode": "__int64 __fastcall sub_405060(int a1, __int64 a2, char a3, __off_t a4)\n{\n  __off_t v6; // rax\n  __int64 v8; // rax\n  const char *v9; // rsi\n  __int64 v10; // rbp\n  __int64 v11; // rax\n  char *v12; // rbx\n  int *v13; // rax\n\n  v6 = lseek(a1, a4, 1);\n  if ( v6 < 0 )\n  {\n    v11 = sub_40EA00(4LL, a2);\n    v9 = \"cannot lseek %s\";\n    v10 = v11;\n  }\n  else\n  {\n    if ( !a3 || (int)sub_404CD0(a1, v6 - a4, a4) >= 0 )\n      return 1LL;\n    v8 = sub_40EA00(4LL, a2);\n    v9 = \"error deallocating %s\";\n    v10 = v8;\n  }\n  v12 = dcgettext(0LL, v9, 5);\n  v13 = __errno_location();\n  error(0, *v13, v12, v10);\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_405120",
            "funcStartAddr": "0x405120",
            "funcEndAddr": "0x405543",
            "decompiledFuncCode": "__int64 __fastcall sub_405120(\n        int a1,\n        int a2,\n        char *a3,\n        unsigned __int64 a4,\n        unsigned __int64 a5,\n        char a6,\n        __int64 a7,\n        __int64 a8,\n        unsigned __int64 a9,\n        _QWORD *a10,\n        _BYTE *a11)\n{\n  unsigned int v11; // ebp\n  unsigned int v12; // r14d\n  unsigned __int64 v13; // r15\n  size_t v14; // rdx\n  ssize_t v15; // rax\n  int *v16; // rax\n  int *v17; // rbx\n  unsigned int v18; // r15d\n  __int64 v19; // rbp\n  char *v20; // rax\n  char *v22; // r13\n  unsigned __int64 v23; // r12\n  unsigned __int64 v24; // rbx\n  void *v25; // r11\n  _BYTE *v26; // rsi\n  size_t v27; // rdx\n  int v28; // eax\n  char v29; // dl\n  bool v30; // al\n  char v31; // r9\n  __int64 v32; // rax\n  char v33; // r9\n  unsigned int v34; // eax\n  bool v35; // zf\n  __int64 v36; // rbx\n  char *v37; // rax\n  __int64 v38; // rbp\n  char *v39; // rbx\n  int *v40; // rax\n  __off_t v41; // r13\n  void *v42; // [rsp+8h] [rbp-A0h]\n  int v43; // [rsp+8h] [rbp-A0h]\n  bool v45; // [rsp+1Dh] [rbp-8Bh]\n  char v46; // [rsp+1Eh] [rbp-8Ah]\n  unsigned __int64 v49; // [rsp+28h] [rbp-80h]\n  ssize_t v50; // [rsp+30h] [rbp-78h]\n  unsigned __int64 v52; // [rsp+50h] [rbp-58h]\n  unsigned __int64 v53; // [rsp+58h] [rbp-50h]\n\n  *a11 = 0;\n  v49 = a9;\n  *a10 = 0LL;\n  if ( !a9 )\n    return 1;\n  v53 = a5;\n  if ( !a5 )\n    a5 = a4;\n  v12 = 0;\n  v13 = 0LL;\n  v52 = a5;\n  while ( 1 )\n  {\nLABEL_5:\n    v14 = v49;\n    if ( a4 <= v49 )\n      v14 = a4;\n    v15 = read(a1, a3, v14);\n    v50 = v15;\n    if ( v15 >= 0 )\n      break;\n    v16 = __errno_location();\n    if ( *v16 != 4 )\n    {\n      v17 = v16;\n      v18 = 0;\n      v19 = sub_40EA00(4LL, a7);\n      v20 = dcgettext(0LL, \"error reading %s\", 5);\n      error(0, *v17, v20, v19);\n      return v18;\n    }\n  }\n  if ( !v15 )\n  {\n    v41 = v13;\n    LOBYTE(v11) = v12;\n    goto LABEL_51;\n  }\n  v22 = a3;\n  v23 = v15;\n  v24 = v52;\n  *a10 += v15;\n  v25 = a3;\n  v45 = v53 != 0;\n  while ( 1 )\n  {\n    if ( v24 > v23 )\n      v24 = v23;\n    LOBYTE(v11) = v45 && v24 != 0;\n    if ( (_BYTE)v11 )\n      break;\n    v11 = v12;\n    if ( (((unsigned __int8)v12 ^ 1) & (v24 == v23)) == 0 && v24 )\n    {\nLABEL_38:\n      if ( 0x7FFFFFFFFFFFFFFFLL - v24 < v13 )\n      {\n        v18 = 0;\n        v36 = sub_40EA00(4LL, a7);\n        v37 = dcgettext(0LL, \"overflow reading %s\", 5);\n        error(0, 0, v37, v36);\n        return v18;\n      }\n      v13 += v24;\n      v23 -= v24;\n      v22 += v24;\n      v12 = v11;\n      goto LABEL_40;\n    }\nLABEL_33:\n    v13 += v24;\n    v43 = 1;\n    v46 = 0;\n    if ( !(_BYTE)v12 )\n      goto LABEL_26;\nLABEL_34:\n    v34 = sub_405060(a2, a8, a6, v13);\n    v33 = v46;\n    if ( !(_BYTE)v34 )\n      return v34;\nLABEL_27:\n    if ( v43 )\n    {\n      if ( !v24 )\n      {\n        v13 = 0LL;\nLABEL_44:\n        v35 = v49 == v50;\n        v49 -= v50;\n        *a11 = v11;\n        if ( !v35 )\n        {\n          v12 = v11;\n          goto LABEL_5;\n        }\n        v41 = v13;\nLABEL_51:\n        if ( (_BYTE)v11 )\n          return sub_405060(a2, a8, a6, v41);\n        return 1;\n      }\n      if ( !v33 )\n      {\n        v25 = v22;\n        v23 -= v24;\n        v12 = v11;\n        v22 += v24;\n        v13 = 0LL;\n        goto LABEL_40;\n      }\n      v13 = v24;\n      v25 = v22;\n      v12 = v11;\n      v24 = 0LL;\n    }\n    else\n    {\n      v25 = v22;\n      v23 -= v24;\n      v12 = v11;\n      v22 += v24;\n      v13 = v24;\nLABEL_40:\n      if ( !v23 )\n        goto LABEL_44;\n    }\n  }\n  v26 = v22;\n  v27 = v24;\n  do\n  {\n    if ( *v26 )\n    {\n      v30 = v45 && v24 != 0;\n      v29 = v12;\n      v11 = 0;\n      goto LABEL_21;\n    }\n    ++v26;\n    if ( !--v27 )\n    {\n      v31 = (v13 != 0) & (v12 ^ 1);\n      goto LABEL_37;\n    }\n  }\n  while ( (v27 & 0xF) != 0 );\n  v42 = v25;\n  v28 = memcmp(v22, v26, v27);\n  v25 = v42;\n  LOBYTE(v11) = v28 == 0;\n  v29 = v12 ^ (v28 == 0);\n  v30 = v28 != 0;\nLABEL_21:\n  v31 = v29 & (v13 != 0);\n  if ( v24 != v23 || !v30 )\n  {\nLABEL_37:\n    if ( !v31 )\n      goto LABEL_38;\n    v43 = 0;\n    goto LABEL_25;\n  }\n  if ( !v31 )\n  {\n    v11 = 0;\n    goto LABEL_33;\n  }\n  v43 = 1;\n  v11 = 0;\nLABEL_25:\n  v46 = v31;\n  if ( (_BYTE)v12 )\n    goto LABEL_34;\nLABEL_26:\n  v32 = sub_40B240(a2, v25, v13);\n  v33 = v46;\n  if ( v13 == v32 )\n    goto LABEL_27;\n  v18 = v12;\n  v38 = sub_40EA00(4LL, a8);\n  v39 = dcgettext(0LL, \"error writing %s\", 5);\n  v40 = __errno_location();\n  error(0, *v40, v39, v38);\n  return v18;\n}\n"
        },
        {
            "funcName": "sub_405550",
            "funcStartAddr": "0x405550",
            "funcEndAddr": "0x405618",
            "decompiledFuncCode": "__int64 __fastcall sub_405550(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, _BYTE *a5)\n{\n  int *v6; // rax\n  int *v7; // r13\n  __int64 v8; // rbx\n  char *v9; // rax\n  int v10; // ebx\n  unsigned int v12; // ebx\n\n  if ( a5[37] )\n  {\n    v6 = __errno_location();\n    v7 = v6;\n    if ( !a5[35] || (v10 = (unsigned __int8)a5[38], (_BYTE)v10) )\n    {\n      *v6 = 95;\n      v8 = sub_40EA00(4LL, a1);\n      v9 = dcgettext(0LL, \"failed to get security context of %s\", 5);\n      error(0, *v7, v9, v8);\n      v10 = (unsigned __int8)a5[38];\n    }\n    else\n    {\n      *v6 = 95;\n    }\n    return v10 ^ 1u;\n  }\n  else\n  {\n    v12 = a4;\n    LOBYTE(v12) = a5[33] & a4;\n    if ( (_BYTE)v12 )\n    {\n      *__errno_location() = 95;\n      return v12;\n    }\n    else\n    {\n      return 1LL;\n    }\n  }\n}\n"
        },
        {
            "funcName": "sub_405620",
            "funcStartAddr": "0x405620",
            "funcEndAddr": "0x405693",
            "decompiledFuncCode": "__int64 __fastcall sub_405620(__int64 a1, __int64 a2, __int64 a3, __int64 a4)\n{\n  int *v5; // rax\n  int *v6; // rbp\n  __int64 v7; // rbx\n  char *v8; // rax\n\n  v5 = __errno_location();\n  v6 = v5;\n  if ( !*(_BYTE *)(a4 + 35) || *(_BYTE *)(a4 + 38) )\n  {\n    *v5 = 95;\n    v7 = sub_40E920(0LL, 4LL, a1);\n    v8 = dcgettext(0LL, \"failed to set the security context of %s\", 5);\n    error(0, *v6, v8, v7);\n    return 0LL;\n  }\n  else\n  {\n    *v5 = 95;\n    return 0LL;\n  }\n}\n"
        },
        {
            "funcName": "sub_4056A0",
            "funcStartAddr": "0x4056a0",
            "funcEndAddr": "0x4056c6",
            "decompiledFuncCode": "__int64 __fastcall sub_4056A0(__int64 a1)\n{\n  __int64 result; // rax\n\n  result = sub_40BB50(61LL, 0LL, sub_40C510, sub_40C550, sub_40C5C0);\n  *(_QWORD *)(a1 + 56) = result;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4056D0",
            "funcStartAddr": "0x4056d0",
            "funcEndAddr": "0x4056f6",
            "decompiledFuncCode": "__int64 __fastcall sub_4056D0(__int64 a1)\n{\n  __int64 result; // rax\n\n  result = sub_40BB50(61LL, 0LL, sub_40C540, sub_40C550, sub_40C5C0);\n  *(_QWORD *)(a1 + 64) = result;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_405700",
            "funcStartAddr": "0x405700",
            "funcEndAddr": "0x405731",
            "decompiledFuncCode": "bool __fastcall sub_405700(__int64 a1)\n{\n  bool result; // al\n\n  *(_QWORD *)(a1 + 64) = 0LL;\n  *(_OWORD *)a1 = 0LL;\n  *(_OWORD *)(a1 + 16) = 0LL;\n  *(_OWORD *)(a1 + 32) = 0LL;\n  *(_OWORD *)(a1 + 48) = 0LL;\n  result = geteuid() == 0;\n  *(_BYTE *)(a1 + 27) = result;\n  *(_BYTE *)(a1 + 26) = result;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_405740",
            "funcStartAddr": "0x405740",
            "funcEndAddr": "0x405764",
            "decompiledFuncCode": "char __fastcall sub_405740(__int64 a1)\n{\n  int *v1; // rax\n  char result; // al\n\n  v1 = __errno_location();\n  result = *v1 == 22 || *v1 == 1;\n  if ( result )\n    return *(_BYTE *)(a1 + 26) ^ 1;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_405770",
            "funcStartAddr": "0x405770",
            "funcEndAddr": "0x40595b",
            "decompiledFuncCode": "__int64 __fastcall sub_405770(__int64 a1, const char *a2, unsigned int a3, _DWORD *a4, char a5, __int64 a6)\n{\n  __uid_t v8; // r14d\n  __gid_t v9; // r13d\n  int v10; // esi\n  int v11; // edx\n  int v12; // eax\n  int *v13; // rax\n  int v14; // r14d\n  int *v15; // r15\n  char v16; // al\n  unsigned int v17; // edx\n  int *v19; // rax\n  int v20; // ebx\n  int *v21; // r14\n  __int64 v22; // r12\n  char *v23; // rbx\n  int *v24; // rax\n  int *v25; // rbx\n  __int64 v26; // r12\n  char *v27; // rax\n\n  v8 = a4[7];\n  v9 = a4[8];\n  if ( !a5 )\n  {\n    if ( (*(_QWORD *)(a1 + 24) & 0xFF0000000000FFLL) != 0 )\n    {\n      v10 = *(_DWORD *)(a6 + 24);\n      v11 = a4[6];\n    }\n    else\n    {\n      if ( !*(_BYTE *)(a1 + 43) )\n        goto LABEL_6;\n      v10 = *(_DWORD *)(a6 + 24);\n      v11 = *(_DWORD *)(a1 + 16);\n    }\n    v12 = ~v11;\n    BYTE1(v12) = ((unsigned __int16)~(_WORD)v11 >> 8) | 0xE;\n    if ( (v10 & v12 & 0xFFF) != 0\n      && (unsigned int)sub_40D0B0(a2, a3, (unsigned __int16)v10 & (unsigned __int16)v11 & 0x1C0) )\n    {\n      v25 = __errno_location();\n      if ( *v25 != 1 && *v25 != 22 || *(_BYTE *)(a1 + 27) )\n      {\n        v26 = sub_40EA00(4LL, a2);\n        v27 = dcgettext(0LL, \"clearing permissions for %s\", 5);\n        error(0, *v25, v27, v26);\n      }\n      return (unsigned int)-*(unsigned __int8 *)(a1 + 36);\n    }\n  }\nLABEL_6:\n  if ( a3 != -1 )\n  {\n    if ( fchown(a3, v8, v9) )\n    {\n      v13 = __errno_location();\n      v14 = *v13;\n      v15 = v13;\n      if ( *v13 == 1 || v14 == 22 )\n      {\n        fchown(a3, 0xFFFFFFFF, v9);\n        *v15 = v14;\n      }\n      goto LABEL_10;\n    }\n    return 1;\n  }\n  if ( !lchown(a2, v8, v9) )\n    return 1;\n  v19 = __errno_location();\n  v20 = *v19;\n  v21 = v19;\n  if ( *v19 == 1 || v20 == 22 )\n  {\n    lchown(a2, 0xFFFFFFFF, v9);\n    *v21 = v20;\n  }\nLABEL_10:\n  v16 = sub_405740(a1);\n  v17 = 0;\n  if ( !v16 )\n  {\n    v22 = sub_40EA00(4LL, a2);\n    v23 = dcgettext(0LL, \"failed to preserve ownership for %s\", 5);\n    v24 = __errno_location();\n    error(0, *v24, v23, v22);\n    return (unsigned int)-*(unsigned __int8 *)(a1 + 36);\n  }\n  return v17;\n}\n"
        },
        {
            "funcName": "sub_405960",
            "funcStartAddr": "0x405960",
            "funcEndAddr": "0x40598a",
            "decompiledFuncCode": "__int64 sub_405960()\n{\n  __mode_t v0; // ebx\n\n  v0 = dword_61F450;\n  if ( dword_61F450 == -1 )\n  {\n    v0 = umask(0);\n    dword_61F450 = v0;\n    umask(v0);\n  }\n  return v0;\n}\n"
        },
        {
            "funcName": "sub_405990",
            "funcStartAddr": "0x405990",
            "funcEndAddr": "0x40980c",
            "decompiledFuncCode": "__int64 __fastcall sub_405990(\n        const char *a1,\n        char *a2,\n        unsigned int a3,\n        struct timespec *a4,\n        __int64 a5,\n        __m128i *a6,\n        unsigned int a7,\n        _BYTE *a8,\n        _BYTE *a9,\n        _BYTE *a10)\n{\n  unsigned int v10; // r15d\n  char *v11; // r14\n  __m128i *v12; // r13\n  bool v14; // zf\n  __int64 v15; // rbx\n  int v16; // eax\n  char *v17; // rsi\n  __int64 v18; // rdi\n  __int32 v19; // eax\n  int v20; // eax\n  __int64 v21; // r8\n  __int32 v22; // eax\n  __int16 v23; // ax\n  __int64 v24; // rcx\n  __int32 v25; // r12d\n  __int64 v26; // rdi\n  char v27; // al\n  char v28; // al\n  int v29; // eax\n  int *v30; // rax\n  int *v31; // r12\n  struct stat *v32; // rdx\n  __int64 v33; // r12\n  const char *v34; // rsi\n  __int64 v35; // rbx\n  char *v36; // rax\n  int v37; // r12d\n  char v38; // al\n  int v39; // edx\n  int v40; // ecx\n  int v41; // r8d\n  int v42; // r9d\n  void *v43; // r12\n  char v44; // r8\n  bool v45; // r12\n  __int64 v46; // rsi\n  char v47; // al\n  int v48; // eax\n  __int64 v49; // r12\n  char *v50; // rbx\n  int *v51; // rax\n  int v52; // eax\n  __mode_t v53; // edx\n  __int64 v54; // r12\n  char *v55; // rbx\n  int *v56; // rax\n  unsigned int v57; // eax\n  int v58; // eax\n  __int64 v59; // r12\n  char *v60; // rbx\n  int *v61; // rax\n  __dev_t st_dev; // rdx\n  __ino_t st_ino; // rdi\n  __int64 v65; // rdx\n  __int64 v66; // rcx\n  __int64 v67; // r8\n  __int64 v68; // r9\n  __int64 v69; // rdx\n  __int64 v70; // rcx\n  __int64 v71; // r8\n  __int64 v72; // r9\n  __int32 v73; // eax\n  __int64 v74; // r12\n  char *v75; // rax\n  __int64 v76; // r12\n  __int64 v77; // rbx\n  char *v78; // rax\n  int *v79; // r12\n  int v80; // eax\n  int *v81; // rax\n  __int64 v82; // rbx\n  char *v83; // rax\n  __int32 v84; // eax\n  char v85; // al\n  _QWORD *v86; // rax\n  const char *v87; // rsi\n  char *v88; // rax\n  int v89; // eax\n  const char *v90; // rsi\n  char *v91; // r12\n  int *v92; // rax\n  __mode_t v93; // r12d\n  int v94; // eax\n  __int64 v95; // r12\n  char *v96; // rax\n  __m128i v97; // xmm1\n  __m128i v98; // xmm2\n  __m128i v99; // xmm3\n  __blkcnt_t v100; // rax\n  char *v101; // r12\n  char v102; // r15\n  void *v103; // rbx\n  void *v104; // rsi\n  char v105; // al\n  char v106; // r12\n  __int64 v107; // rax\n  int v108; // edx\n  const char *v109; // rsi\n  char *v110; // rax\n  _BOOL8 v111; // rcx\n  int v112; // eax\n  __int64 v113; // rax\n  char v114; // r12\n  __int64 v115; // rcx\n  __m128i *v116; // r9\n  __m128i *v117; // rdx\n  char v118; // al\n  __int64 v119; // r13\n  const char *v120; // rsi\n  __int64 v121; // rbx\n  char *v122; // rax\n  int v123; // eax\n  int v124; // eax\n  bool v125; // al\n  char v126; // al\n  __int64 v127; // r12\n  char *v128; // rbx\n  int *v129; // rax\n  int v130; // esi\n  int v131; // edx\n  int v132; // ecx\n  int v133; // r8d\n  int v134; // r9d\n  char *v135; // r12\n  int v136; // ecx\n  int *v137; // rax\n  int *v138; // r12\n  int *v139; // rax\n  int tv_sec; // r12d\n  char *v141; // rax\n  __int64 v142; // rcx\n  __int64 v143; // rbx\n  char *v144; // rax\n  __int64 v145; // r12\n  char *v146; // rax\n  __int64 v147; // rcx\n  char *v148; // rax\n  _BYTE *v149; // rax\n  __int64 v150; // rdx\n  _BYTE *v151; // r8\n  size_t v152; // r12\n  size_t v153; // rax\n  int v154; // eax\n  int v155; // eax\n  void *v156; // r12\n  char *v157; // rax\n  __int64 v158; // rsi\n  char *v159; // rax\n  char *v160; // r12\n  size_t v161; // rax\n  void *v162; // rsp\n  char *v163; // r12\n  char v164; // al\n  int v165; // r12d\n  char *v166; // rax\n  __int64 v167; // r12\n  __int64 v168; // rbx\n  char *v169; // rax\n  __int64 v170; // r12\n  char *v171; // r14\n  int *v172; // rax\n  __int64 v173; // rax\n  char *v174; // r12\n  __int64 v175; // r12\n  char *v176; // rax\n  __int64 v177; // rdx\n  unsigned int v178; // eax\n  _BYTE *v179; // rax\n  __int64 v180; // rbx\n  char *v181; // rax\n  char v182; // al\n  int v183; // r12d\n  int v184; // eax\n  __int64 v185; // rcx\n  char v186; // al\n  char *v187; // r12\n  int *v188; // rax\n  int *v189; // rax\n  const char *v190; // rsi\n  __int64 v191; // rbx\n  char *v192; // rax\n  char *v193; // r12\n  int *v194; // rax\n  char *v195; // r12\n  int *v196; // rax\n  char *v197; // rax\n  __int64 v198; // rcx\n  int v199; // eax\n  __int64 v200; // r12\n  char *v201; // rax\n  __int64 v202; // r12\n  char *v203; // rax\n  unsigned __int64 v204; // r12\n  __int64 v205; // rax\n  __blksize_t v206; // rdi\n  unsigned __int64 v207; // rax\n  char *v208; // rsi\n  unsigned __int64 v209; // rdx\n  bool v210; // r9\n  int v211; // eax\n  char v212; // r8\n  int v213; // eax\n  char *v214; // r12\n  int *v215; // rax\n  int v216; // ecx\n  int v217; // r9d\n  int v218; // r8d\n  char *v219; // r12\n  int *v220; // rax\n  int v221; // eax\n  int v222; // eax\n  char *v223; // r12\n  int *v224; // rax\n  int v225; // eax\n  __off_t v226; // r12\n  char *v227; // rcx\n  __off_t v228; // rbx\n  char v229; // r15\n  unsigned __int64 v230; // r14\n  char v231; // al\n  unsigned __int64 v232; // rdx\n  __off_t v233; // rsi\n  unsigned int v234; // r13d\n  __int64 v235; // rax\n  unsigned __int64 v236; // r8\n  __off_t *v237; // rax\n  __int64 v238; // rcx\n  bool v239; // r12\n  const char *v240; // rsi\n  char *v241; // r12\n  int *v242; // rax\n  __int64 v243; // rdx\n  char *v244; // rbx\n  __int64 v245; // r12\n  __int64 v246; // rax\n  __int32 v247; // eax\n  __int64 v248; // r12\n  int *v249; // rax\n  char *v250; // r12\n  int *v251; // rax\n  __int64 v252; // rcx\n  char *v253; // rdi\n  void *v254; // rax\n  __int64 v255; // r12\n  char *v256; // rax\n  const char *v257; // rsi\n  char *v258; // r12\n  int *v259; // rax\n  char *v260; // rax\n  int v261; // eax\n  int v262; // eax\n  char *v263; // r12\n  int *v264; // rax\n  unsigned __int64 v265; // rax\n  __int64 v266; // r12\n  char *v267; // rax\n  _QWORD v268[4]; // [rsp-Eh] [rbp-390h] BYREF\n  char v269[8]; // [rsp+12h] [rbp-370h] BYREF\n  __off_t st_size; // [rsp+1Ah] [rbp-368h]\n  __m128i *v271; // [rsp+22h] [rbp-360h]\n  unsigned int v272; // [rsp+2Ah] [rbp-358h]\n  int v273; // [rsp+2Eh] [rbp-354h]\n  char *v274; // [rsp+32h] [rbp-350h]\n  int v275; // [rsp+3Ah] [rbp-348h]\n  __mode_t v276; // [rsp+3Eh] [rbp-344h]\n  __m128i *st_blksize; // [rsp+42h] [rbp-340h]\n  char *v278; // [rsp+4Ah] [rbp-338h]\n  char *s; // [rsp+52h] [rbp-330h]\n  unsigned int v280; // [rsp+5Ah] [rbp-328h]\n  char v281; // [rsp+5Fh] [rbp-323h]\n  unsigned __int8 v282; // [rsp+60h] [rbp-322h]\n  char v283; // [rsp+61h] [rbp-321h]\n  struct stat *p_dev; // [rsp+62h] [rbp-320h]\n  size_t v285; // [rsp+6Ah] [rbp-318h]\n  char *s2; // [rsp+72h] [rbp-310h]\n  void *s1; // [rsp+7Ah] [rbp-308h]\n  char *old; // [rsp+82h] [rbp-300h]\n  struct timespec *p_length; // [rsp+8Ah] [rbp-2F8h]\n  size_t n; // [rsp+92h] [rbp-2F0h]\n  int fd[2]; // [rsp+9Ah] [rbp-2E8h]\n  void *ptr; // [rsp+A2h] [rbp-2E0h]\n  struct stat *p_stat_buf; // [rsp+AAh] [rbp-2D8h]\n  char *src; // [rsp+B2h] [rbp-2D0h]\n  __mode_t st_mode; // [rsp+BAh] [rbp-2C8h]\n  int v296; // [rsp+BEh] [rbp-2C4h]\n  int fildes[2]; // [rsp+C2h] [rbp-2C0h]\n  char *filename; // [rsp+CAh] [rbp-2B8h]\n  char v299; // [rsp+D9h] [rbp-2A9h] BYREF\n  __int64 v300; // [rsp+DAh] [rbp-2A8h] BYREF\n  struct timespec length; // [rsp+E2h] [rbp-2A0h] BYREF\n  struct timespec st_mtim; // [rsp+F2h] [rbp-290h]\n  char v303; // [rsp+102h] [rbp-280h]\n  char v304; // [rsp+103h] [rbp-27Fh]\n  void *v305; // [rsp+10Ah] [rbp-278h]\n  struct stat stat_buf; // [rsp+112h] [rbp-270h] BYREF\n  struct stat v307; // [rsp+1A2h] [rbp-1E0h] BYREF\n  struct stat v308; // [rsp+232h] [rbp-150h] BYREF\n  struct stat dev; // [rsp+2C2h] [rbp-C0h] BYREF\n\n  v11 = (char *)a1;\n  v12 = a6;\n  filename = a2;\n  LOBYTE(fildes[0]) = a10 != 0LL;\n  v14 = a6[1].m128i_i8[8] == 0;\n  v15 = a7;\n  p_length = a4;\n  *(_QWORD *)fd = a5;\n  if ( !v14 && a10 )\n    *a10 = 0;\n  v14 = a6->m128i_i32[1] == 2;\n  *a9 = 0;\n  p_stat_buf = &stat_buf;\n  if ( !v14 )\n  {\n    v16 = __xstat(1, a1, &stat_buf);\n    v17 = (char *)a1;\n    LOBYTE(v10) = v16 != 0;\n    if ( !v16 )\n      goto LABEL_6;\nLABEL_117:\n    v10 = 0;\n    v59 = sub_40EA00(4LL, v17);\n    v60 = dcgettext(0LL, \"cannot stat %s\", 5);\n    v61 = __errno_location();\n    error(0, *v61, v60, v59);\n    return v10;\n  }\n  v58 = __lxstat(1, a1, &stat_buf);\n  v17 = (char *)a1;\n  LOBYTE(v10) = v58 != 0;\n  if ( v58 )\n    goto LABEL_117;\nLABEL_6:\n  st_mode = stat_buf.st_mode;\n  v296 = stat_buf.st_mode & 0xF000;\n  if ( v296 != 0x4000 )\n  {\n    if ( !(_BYTE)a7 )\n      goto LABEL_10;\n    v18 = v12[4].m128i_i64[0];\n    if ( v12->m128i_i32[0] )\n    {\n      sub_40AE60(v18, v11, p_stat_buf);\n      goto LABEL_10;\n    }\n    v85 = sub_40AEF0(v18, v11, p_stat_buf);\n    if ( v85 )\n    {\n      LOBYTE(filename) = v85;\n      v143 = sub_40EA00(4LL, v11);\n      v144 = dcgettext(0LL, \"warning: source file %s specified more than once\", 5);\n      error(0, 0, v144, v143);\n      return (unsigned __int8)filename;\n    }\n    goto LABEL_169;\n  }\n  if ( !v12[2].m128i_i8[10] )\n  {\n    v107 = sub_40EA00(4LL, v17);\n    v108 = 5;\n    v15 = v107;\n    if ( !v12[1].m128i_i8[9] )\n    {\nLABEL_240:\n      v110 = dcgettext(0LL, \"-r not specified; omitting directory %s\", v108);\n      goto LABEL_226;\n    }\n    v109 = \"omitting directory %s\";\n    goto LABEL_225;\n  }\n  if ( (_BYTE)a7 )\nLABEL_169:\n    sub_40AE60(v12[4].m128i_i64[0], v11, p_stat_buf);\nLABEL_10:\n  LODWORD(ptr) = 1;\n  v19 = v12->m128i_i32[1];\n  if ( v19 != 4 )\n    LODWORD(ptr) = (unsigned __int8)a7 & (v19 == 3);\n  if ( (_BYTE)a3 )\n  {\nLABEL_58:\n    LOBYTE(src) = 1;\n    LOBYTE(v24) = 0;\n    old = 0LL;\n    goto LABEL_59;\n  }\n  if ( v296 != 0x8000 && (!v12[1].m128i_i8[4] || v296 == 0x4000 || v296 == 40960)\n    || v12[1].m128i_i8[8]\n    || v12[2].m128i_i8[12]\n    || v12[1].m128i_i8[7]\n    || v12->m128i_i32[0]\n    || v12[1].m128i_i8[5] )\n  {\n    n = (size_t)&v307;\n    v80 = __lxstat(1, filename, &v307);\n    v21 = a3;\n    LOBYTE(src) = v80 != 0;\n    if ( !v80 )\n      goto LABEL_23;\n    goto LABEL_157;\n  }\n  n = (size_t)&v307;\n  v20 = __xstat(1, filename, &v307);\n  v21 = 1LL;\n  LOBYTE(src) = v20 != 0;\n  if ( v20 )\n  {\nLABEL_157:\n    v81 = __errno_location();\n    if ( *v81 != 2 )\n    {\n      *(_QWORD *)fildes = v81;\n      v10 = a3;\n      v82 = sub_40EA00(4LL, filename);\n      v83 = dcgettext(0LL, \"cannot stat %s\", 5);\n      error(0, **(_DWORD **)fildes, v83, v82);\n      return v10;\n    }\n    goto LABEL_58;\n  }\nLABEL_23:\n  if ( stat_buf.st_ino == v307.st_ino && stat_buf.st_dev == v307.st_dev )\n  {\n    v114 = v12[1].m128i_i8[7];\n    if ( v114 )\n      goto LABEL_324;\n    if ( v12->m128i_i32[1] != 2 )\n    {\n      LOBYTE(old) = v21;\n      s2 = (char *)&v308;\n      v123 = __lxstat(1, filename, &v308);\n      LODWORD(v21) = (unsigned __int8)old;\n      if ( v123 )\n        goto LABEL_25;\n      p_dev = &dev;\n      v124 = __lxstat(1, v11, &dev);\n      v21 = (unsigned __int8)old;\n      if ( v124 )\n        goto LABEL_25;\n      if ( dev.st_ino == v308.st_ino )\n        v114 = dev.st_dev == v308.st_dev;\n      v116 = (__m128i *)s2;\n      v117 = (__m128i *)p_dev;\n      if ( (dev.st_mode & 0xF000) == 40960 && (v308.st_mode & 0xF000) == 40960 && v12[1].m128i_i8[5] )\n        goto LABEL_25;\n      goto LABEL_243;\n    }\n    v114 = 1;\n    v115 = 1LL;\n  }\n  else\n  {\n    if ( v12->m128i_i32[1] != 2 )\n      goto LABEL_25;\n    v114 = 0;\n    v115 = 0LL;\n  }\n  v116 = (__m128i *)n;\n  v117 = (__m128i *)p_stat_buf;\n  if ( (stat_buf.st_mode & 0xF000) == 40960 && (v307.st_mode & 0xF000) == 40960 )\n  {\n    LODWORD(s1) = v115;\n    LOBYTE(old) = v21;\n    if ( (unsigned __int8)sub_40EF80(v11, filename, p_stat_buf, v115, v21, n) )\n      goto LABEL_249;\n    LODWORD(v21) = (unsigned __int8)old;\n    if ( v12->m128i_i32[0] || !(_DWORD)s1 )\n      goto LABEL_25;\n    v164 = 1;\n    LOBYTE(v165) = v12[1].m128i_i8[8] ^ 1;\n    goto LABEL_368;\n  }\nLABEL_243:\n  if ( v12->m128i_i32[0] )\n  {\n    if ( !v114 )\n    {\n      if ( v12[1].m128i_i8[8]\n        || v12->m128i_i32[1] == 2\n        || (v117[1].m128i_i32[2] & 0xF000) != 40960\n        || (v116[1].m128i_i32[2] & 0xF000) == 40960 )\n      {\n        goto LABEL_25;\n      }\nLABEL_249:\n      v33 = sub_40E920(1LL, 4LL, filename);\n      v34 = \"%s and %s are the same file\";\n      v35 = sub_40E920(0LL, 4LL, v11);\n      goto LABEL_56;\n    }\n    LOBYTE(src) = v21;\n    v186 = sub_40EF80(v11, filename, v117, v115, v21, v116);\n    LODWORD(v21) = (unsigned __int8)src;\n    LOBYTE(v165) = v186 ^ 1;\n    v164 = 0;\nLABEL_368:\n    if ( (_BYTE)v165 )\n    {\n      LOBYTE(src) = v164;\n      goto LABEL_25;\n    }\n    goto LABEL_249;\n  }\n  v142 = v12[1].m128i_u8[8];\n  if ( (_BYTE)v142 || v12[1].m128i_i8[5] )\n  {\n    if ( (v116[1].m128i_i32[2] & 0xF000) == 40960 )\n      goto LABEL_25;\n    if ( !v114 || v116[1].m128i_i64[0] <= 1uLL )\n    {\n      if ( (v117[1].m128i_i32[2] & 0xF000) == 40960 )\n        goto LABEL_311;\n      goto LABEL_341;\n    }\n    LOBYTE(s2) = v21;\n    s1 = v116;\n    old = (char *)v117;\n    v164 = sub_40EF80(v11, filename, v117, v142, v21, v116);\n    v117 = (__m128i *)old;\n    v116 = (__m128i *)s1;\n    LODWORD(v21) = (unsigned __int8)s2;\n    if ( !v164 )\n    {\n      LOBYTE(v165) = v12[1].m128i_i8[8] ^ 1;\n      goto LABEL_368;\n    }\n    if ( (*((_DWORD *)old + 6) & 0xF000) == 40960 )\n      goto LABEL_310;\n  }\n  else if ( (v117[1].m128i_i32[2] & 0xF000) == 40960 )\n  {\n    goto LABEL_313;\n  }\n  if ( (v116[1].m128i_i32[2] & 0xF000) != 40960 )\n  {\nLABEL_341:\n    if ( v117->m128i_i64[1] != v116->m128i_i64[1] || v117->m128i_i64[0] != v116->m128i_i64[0] )\n      goto LABEL_25;\n    if ( v12[1].m128i_i8[7] )\n      goto LABEL_324;\n  }\nLABEL_310:\n  LOBYTE(v142) = v12[1].m128i_i8[8];\nLABEL_311:\n  if ( (_BYTE)v142 )\n  {\n    if ( (stat_buf.st_mode & 0xF000) == 40960 && v116[1].m128i_i64[0] > 1uLL )\n    {\n      LOBYTE(s2) = v21;\n      s1 = v116;\n      old = (char *)v117;\n      v197 = canonicalize_file_name(v11);\n      v117 = (__m128i *)old;\n      v116 = (__m128i *)s1;\n      LODWORD(v21) = (unsigned __int8)s2;\n      if ( v197 )\n      {\n        LOBYTE(old) = (_BYTE)s2;\n        src = v197;\n        v165 = sub_40EF80(v197, filename, v117, v198, (unsigned __int8)s2, s1) ^ 1;\n        free(src);\n        v164 = 0;\n        LODWORD(v21) = (unsigned __int8)s2;\n        goto LABEL_368;\n      }\n    }\n  }\nLABEL_313:\n  if ( v12[2].m128i_i8[12] || (v12[1].m128i_i32[1] & 0xFF00FF00) != 0 && (v116[1].m128i_i32[2] & 0xF000) == 40960 )\n  {\n    LOBYTE(v165) = v116->m128i_i64[0] == v117->m128i_i64[0];\n    v164 = 0;\n    goto LABEL_368;\n  }\n  if ( v12->m128i_i32[1] != 2 )\n    goto LABEL_249;\n  if ( (v117[1].m128i_i32[2] & 0xF000) == 40960 )\n  {\n    LOBYTE(s1) = v21;\n    old = (char *)v116;\n    v222 = __xstat(1, v11, &dev);\n    v116 = (__m128i *)old;\n    LODWORD(v21) = (unsigned __int8)s1;\n    if ( v222 )\n      goto LABEL_25;\n  }\n  else\n  {\n    *(__m128i *)&dev.st_dev = _mm_load_si128(v117);\n    *(__m128i *)&dev.st_nlink = _mm_load_si128(v117 + 1);\n    *(__m128i *)&dev.st_gid = _mm_load_si128(v117 + 2);\n    *(__m128i *)&dev.st_size = _mm_load_si128(v117 + 3);\n    *(__m128i *)&dev.st_blocks = _mm_load_si128(v117 + 4);\n    *(__m128i *)&dev.st_atim.tv_nsec = _mm_load_si128(v117 + 5);\n    *(__m128i *)&dev.st_mtim.tv_nsec = _mm_load_si128(v117 + 6);\n    *(__m128i *)&dev.st_ctim.tv_nsec = _mm_load_si128(v117 + 7);\n    *(__m128i *)&dev.__unused[1] = _mm_load_si128(v117 + 8);\n  }\n  if ( (v116[1].m128i_i32[2] & 0xF000) == 40960 )\n  {\n    LOBYTE(old) = v21;\n    v221 = __xstat(1, filename, &v308);\n    LODWORD(v21) = (unsigned __int8)old;\n    if ( v221 )\n      goto LABEL_25;\n  }\n  else\n  {\n    *(__m128i *)&v308.st_dev = _mm_load_si128(v116);\n    *(__m128i *)&v308.st_nlink = _mm_load_si128(v116 + 1);\n    *(__m128i *)&v308.st_gid = _mm_load_si128(v116 + 2);\n    *(__m128i *)&v308.st_size = _mm_load_si128(v116 + 3);\n    *(__m128i *)&v308.st_blocks = _mm_load_si128(v116 + 4);\n    *(__m128i *)&v308.st_atim.tv_nsec = _mm_load_si128(v116 + 5);\n    *(__m128i *)&v308.st_mtim.tv_nsec = _mm_load_si128(v116 + 6);\n    *(__m128i *)&v308.st_ctim.tv_nsec = _mm_load_si128(v116 + 7);\n    *(__m128i *)&v308.__unused[1] = _mm_load_si128(v116 + 8);\n  }\n  if ( dev.st_ino == v308.st_ino && dev.st_dev == v308.st_dev )\n  {\n    if ( !v12[1].m128i_i8[7] )\n      goto LABEL_249;\nLABEL_324:\n    LOBYTE(src) = 1;\n  }\nLABEL_25:\n  if ( v296 == 0x4000 )\n  {\n    if ( !v12[1].m128i_i8[8] )\n      goto LABEL_30;\n    v22 = v12->m128i_i32[2];\n  }\n  else\n  {\n    if ( v12[2].m128i_i8[13] )\n    {\n      v111 = 0LL;\n      if ( v12[1].m128i_i8[15] )\n      {\n        v111 = 1LL;\n        if ( v12[1].m128i_i8[8] )\n          v111 = v307.st_dev != stat_buf.st_dev;\n      }\n      LOBYTE(old) = v21;\n      v112 = sub_40FD60(filename, n, p_stat_buf, v111);\n      LODWORD(v21) = (unsigned __int8)old;\n      if ( v112 >= 0 )\n      {\n        if ( a10 )\n          *a10 = 1;\n        v113 = sub_409A10(filename);\n        if ( v113 && !(unsigned __int8)sub_404F50(v113, (__int64)filename, 1u, v12[2].m128i_i8[14], (char)ptr) )\n        {\n          if ( !v12[2].m128i_i8[5] )\n            return v10;\n          goto LABEL_239;\n        }\n        return 1;\n      }\n    }\n    v22 = v12->m128i_i32[2];\n    if ( !v12[1].m128i_i8[8] )\n    {\n      if ( v22 == 2 )\n        return 1;\n      if ( v22 == 3 )\n      {\n        LOBYTE(old) = v21;\n        v182 = sub_404E20((__int64)v12, filename, (_DWORD *)(n + 24));\n        LODWORD(v21) = (unsigned __int8)old;\n        if ( !v182 )\n          return 1;\n      }\n      goto LABEL_30;\n    }\n  }\n  if ( v22 == 2\n    || (v22 == 3\n     || v22 == 4\n     && v12[2].m128i_i8[15]\n     && (LOBYTE(old) = v21, v125 = sub_404BD0(filename, v307.st_mode), LODWORD(v21) = (unsigned __int8)old, !v125))\n    && (LOBYTE(old) = v21,\n        v126 = sub_404E20((__int64)v12, filename, (_DWORD *)(n + 24)),\n        LODWORD(v21) = (unsigned __int8)old,\n        !v126) )\n  {\n    if ( !a10 )\n      return 1;\nLABEL_284:\n    v10 = 1;\n    *a10 = 1;\n    return v10;\n  }\nLABEL_30:\n  if ( (_BYTE)src )\n    return 1;\n  v23 = v307.st_mode;\n  v24 = (unsigned int)v21 ^ 1;\n  if ( (v307.st_mode & 0xF000) != 0x4000 )\n  {\n    if ( v296 == 0x4000 )\n    {\n      if ( !v12[1].m128i_i8[8] || (v25 = v12->m128i_i32[0]) == 0 )\n      {\n        v33 = sub_40E920(1LL, 4LL, v11);\n        v34 = \"cannot overwrite non-directory %s with directory %s\";\n        v35 = sub_40E920(0LL, 4LL, filename);\n        goto LABEL_56;\n      }\n      if ( !(_BYTE)a7 )\n        goto LABEL_349;\n    }\n    else\n    {\n      v25 = v12->m128i_i32[0];\n      if ( !(_BYTE)a7 )\n        goto LABEL_39;\n    }\n    if ( v25 != 3 )\n    {\n      v26 = v12[3].m128i_i64[1];\n      LOBYTE(old) = v21 ^ 1;\n      v27 = sub_40AEF0(v26, filename, n);\n      v24 = (unsigned __int8)old;\n      if ( v27 )\n      {\n        v33 = sub_40E920(1LL, 4LL, v11);\n        v34 = \"will not overwrite just-created %s with %s\";\n        v35 = sub_40E920(0LL, 4LL, filename);\n        goto LABEL_56;\n      }\n      if ( v296 == 0x4000 )\n        goto LABEL_38;\n      v23 = v307.st_mode;\n      if ( (v307.st_mode & 0xF000) != 0x4000 )\n        goto LABEL_38;\n      goto LABEL_347;\n    }\n    if ( !v12[1].m128i_i8[8] )\n      goto LABEL_390;\nLABEL_349:\n    if ( (stat_buf.st_mode & 0xF000) != 0x4000 )\n      goto LABEL_350;\n    goto LABEL_408;\n  }\n  if ( v296 != 0x4000 )\n  {\nLABEL_347:\n    if ( v12[1].m128i_i8[8] )\n    {\n      v25 = v12->m128i_i32[0];\n      if ( v12->m128i_i32[0] )\n        goto LABEL_349;\n    }\n    v109 = \"cannot overwrite directory %s with non-directory\";\n    v15 = sub_40EA00(4LL, filename);\nLABEL_225:\n    v110 = dcgettext(0LL, v109, 5);\nLABEL_226:\n    v10 = 0;\n    error(0, 0, v110, v15);\n    return v10;\n  }\nLABEL_38:\n  v25 = v12->m128i_i32[0];\nLABEL_39:\n  v28 = v12[1].m128i_i8[8];\n  if ( v28 )\n  {\n    if ( (stat_buf.st_mode & 0xF000) != 0x4000 )\n      goto LABEL_394;\n    v23 = v307.st_mode;\nLABEL_408:\n    if ( (v23 & 0xF000) == 0x4000 )\n    {\nLABEL_394:\n      if ( !v25 )\n        goto LABEL_392;\n      goto LABEL_350;\n    }\n    if ( !v25 )\n    {\n      v33 = sub_40EAD0(0LL, 3LL, filename, v24);\n      v34 = \"cannot move directory onto non-directory: %s -> %s\";\n      v35 = sub_40EAD0(0LL, 3LL, v11, v185);\n      goto LABEL_56;\n    }\nLABEL_350:\n    LOBYTE(n) = v24;\n    v149 = (_BYTE *)sub_40AD40(v11);\n    v24 = (unsigned __int8)n;\n    v151 = v149;\n    if ( *v149 != 46 )\n      goto LABEL_351;\n    v28 = 1;\n    goto LABEL_430;\n  }\n  if ( v25 )\n  {\nLABEL_390:\n    LOBYTE(n) = v24;\n    v179 = (_BYTE *)sub_40AD40(v11);\n    v24 = (unsigned __int8)n;\n    v151 = v179;\n    if ( *v179 != 46 )\n    {\nLABEL_391:\n      if ( (v307.st_mode & 0xF000) == 0x4000 )\n      {\nLABEL_392:\n        old = 0LL;\n        goto LABEL_59;\n      }\nLABEL_351:\n      if ( v25 != 3 )\n      {\n        LOBYTE(n) = v24;\n        s1 = v151;\n        src = (char *)strlen(v151);\n        old = (char *)sub_40AD40(filename);\n        v152 = strlen(old);\n        s2 = ::src;\n        v153 = strlen(::src);\n        v24 = (unsigned __int8)n;\n        v285 = v153;\n        if ( src == (char *)(v152 + v153) )\n        {\n          LOBYTE(src) = n;\n          n = (size_t)s1;\n          v154 = memcmp(s1, old, v152);\n          v24 = (unsigned __int8)src;\n          if ( !v154 )\n          {\n            v155 = strcmp((const char *)(n + v152), s2);\n            v24 = (unsigned __int8)src;\n            if ( !v155 )\n            {\n              LOBYTE(old) = (_BYTE)src;\n              n = strlen(filename);\n              v156 = (void *)sub_4112E0(v285 + n + 1);\n              src = ::src;\n              v157 = (char *)mempcpy(v156, filename, n);\n              strcpy(v157, src);\n              LODWORD(src) = __xstat(1, (const char *)v156, &dev);\n              free(v156);\n              v24 = (unsigned __int8)old;\n              if ( !(_DWORD)src && stat_buf.st_ino == dev.st_ino && stat_buf.st_dev == dev.st_dev )\n              {\n                if ( v12[1].m128i_i8[8] )\n                  v244 = dcgettext(0LL, \"backing up %s might destroy source;  %s not moved\", 5);\n                else\n                  v244 = dcgettext(0LL, \"backing up %s might destroy source;  %s not copied\", 5);\n                v245 = sub_40E920(1LL, 4LL, v11);\n                v246 = sub_40E920(0LL, 4LL, filename);\n                error(0, 0, v244, v246, v245);\n                return 0;\n              }\n            }\n          }\n        }\n      }\n      v158 = v12->m128i_u32[0];\n      LOBYTE(src) = v24;\n      v159 = (char *)sub_40A8B0(filename, v158, v150, v24, v151);\n      v160 = v159;\n      old = v159;\n      LOBYTE(n) = (_BYTE)src;\n      if ( v159 )\n      {\n        v161 = strlen(v159);\n        v162 = alloca(v161 + 9);\n        v163 = (char *)memcpy(v269, v160, v161 + 1);\n        free(old);\n        old = v163;\n        LOBYTE(v24) = n;\n        LOBYTE(src) = 1;\n        goto LABEL_59;\n      }\n      v189 = __errno_location();\n      LOBYTE(src) = 1;\n      LOBYTE(v24) = n;\n      v31 = v189;\n      if ( *v189 == 2 )\n        goto LABEL_59;\n      v190 = \"cannot backup %s\";\n      v191 = sub_40EA00(4LL, filename);\nLABEL_421:\n      v10 = 0;\n      v192 = dcgettext(0LL, v190, 5);\n      error(0, *v31, v192, v191);\n      return v10;\n    }\n    v28 = 0;\nLABEL_430:\n    v150 = (unsigned __int8)v151[(v151[1] == 46) + 1];\n    if ( !(_BYTE)v150 || (_BYTE)v150 == 47 )\n      goto LABEL_41;\n    if ( v28 )\n      goto LABEL_351;\n    goto LABEL_391;\n  }\nLABEL_41:\n  old = 0LL;\n  if ( (unsigned __int8)v28 | ((v307.st_mode & 0xF000) == 0x4000)\n    || (LOBYTE(src) = v12[1].m128i_i8[5], !(_BYTE)src)\n    && (!v12[2].m128i_i8[2] || v307.st_nlink <= 1)\n    && ((old = 0LL, v12->m128i_i32[1] != 2) || (stat_buf.st_mode & 0xF000) == 0x8000) )\n  {\nLABEL_59:\n    if ( !(_BYTE)a7 || !v12[3].m128i_i64[1] )\n      goto LABEL_60;\n    goto LABEL_50;\n  }\n  LOBYTE(src) = v24;\n  v29 = unlink(filename);\n  LOBYTE(v24) = (_BYTE)src;\n  if ( v29 )\n  {\n    v30 = __errno_location();\n    LOBYTE(v24) = (_BYTE)src;\n    v31 = v30;\n    if ( *v30 != 2 )\n    {\n      v190 = \"cannot remove %s\";\n      v191 = sub_40EA00(4LL, filename);\n      goto LABEL_421;\n    }\n  }\n  LOBYTE(src) = v12[2].m128i_i8[14];\n  if ( (_BYTE)src )\n  {\n    LOBYTE(n) = v24;\n    v202 = sub_40EA00(4LL, filename);\n    v203 = dcgettext(0LL, \"removed %s\\n\", 5);\n    __printf_chk(1LL, v203, v202);\n    LOBYTE(v24) = n;\n    old = 0LL;\n    goto LABEL_59;\n  }\n  if ( !(_BYTE)a7 )\n  {\n    LOBYTE(src) = v12[2].m128i_i8[10] & (v296 == 0x4000);\n    if ( (_BYTE)src )\n    {\n      st_dev = stat_buf.st_dev;\n      st_ino = stat_buf.st_ino;\n      old = 0LL;\n      goto LABEL_228;\n    }\n    LOBYTE(src) = 1;\n    old = 0LL;\n    goto LABEL_64;\n  }\n  v14 = v12[3].m128i_i64[1] == 0;\n  LOBYTE(src) = a7;\n  old = 0LL;\n  if ( !v14 )\n  {\nLABEL_50:\n    if ( v12[1].m128i_i8[8] )\n    {\n      if ( v12[2].m128i_i8[14] )\n      {\nLABEL_143:\n        if ( v296 != 0x4000 || !v12[2].m128i_i8[10] )\n          goto LABEL_145;\nLABEL_125:\n        st_dev = stat_buf.st_dev;\n        st_ino = stat_buf.st_ino;\n        if ( (_BYTE)a7 )\n        {\n          n = sub_409A10(filename);\n          goto LABEL_127;\n        }\nLABEL_228:\n        n = sub_4099D0(st_ino, st_dev);\nLABEL_127:\n        if ( !n )\n          goto LABEL_141;\n        goto LABEL_128;\n      }\n      goto LABEL_123;\n    }\n    if ( v12->m128i_i32[0] )\n    {\n      if ( !v12[2].m128i_i8[14] )\n      {\n        if ( v296 != 0x4000 )\n          goto LABEL_65;\n        goto LABEL_186;\n      }\nLABEL_62:\n      if ( v296 != 0x4000 )\n      {\n        sub_404D70((__int64)v11, (__int64)filename, (__int64)old);\n        goto LABEL_64;\n      }\nLABEL_186:\n      if ( v12[2].m128i_i8[10] )\n        goto LABEL_125;\nLABEL_65:\n      if ( !v12[2].m128i_i8[2] )\n      {\n        n = 0LL;\n        fildes[0] = (unsigned __int8)src;\n        goto LABEL_67;\n      }\nLABEL_139:\n      if ( v12[1].m128i_i8[7] )\n      {\n        n = 0LL;\n        goto LABEL_141;\n      }\n      if ( stat_buf.st_nlink <= 1 )\n      {\n        v84 = v12->m128i_i32[1];\n        if ( !(_BYTE)a7 || v84 != 3 )\n        {\n          n = 0LL;\n          if ( v84 != 4 )\n            goto LABEL_141;\n        }\n      }\n      n = sub_409A10(filename);\n      goto LABEL_164;\n    }\n    v32 = &v307;\n    if ( !(_BYTE)v24 )\n    {\n      if ( __lxstat(1, filename, &dev) )\n        goto LABEL_60;\n      v32 = &dev;\n    }\n    if ( (v32->st_mode & 0xF000) != 40960 || !(unsigned __int8)sub_40AEF0(v12[3].m128i_i64[1], filename, v32) )\n    {\nLABEL_60:\n      if ( v12[2].m128i_i8[14] )\n      {\n        if ( !v12[1].m128i_i8[8] )\n          goto LABEL_62;\n        goto LABEL_143;\n      }\n      goto LABEL_123;\n    }\n    v33 = sub_40E920(1LL, 4LL, filename);\n    v34 = \"will not copy %s through just-created symlink %s\";\n    v35 = sub_40E920(0LL, 4LL, v11);\nLABEL_56:\n    v36 = dcgettext(0LL, v34, 5);\n    error(0, 0, v36, v35, v33);\n    return 0;\n  }\nLABEL_123:\n  if ( v12[2].m128i_i8[10] && v296 == 0x4000 )\n    goto LABEL_125;\nLABEL_64:\n  if ( !v12[1].m128i_i8[8] )\n    goto LABEL_65;\nLABEL_145:\n  if ( stat_buf.st_nlink != 1 )\n  {\n    if ( !v12[2].m128i_i8[2] )\n    {\n      n = 0LL;\n      goto LABEL_148;\n    }\n    goto LABEL_139;\n  }\n  n = sub_4099D0(stat_buf.st_ino, stat_buf.st_dev);\nLABEL_164:\n  if ( !n )\n    goto LABEL_141;\n  if ( v296 != 0x4000 )\n  {\n    if ( (unsigned __int8)sub_404F50(n, (__int64)filename, 1u, v12[2].m128i_i8[14], (char)ptr) )\n      return 1;\n    goto LABEL_134;\n  }\nLABEL_128:\n  if ( (unsigned __int8)sub_40EF80(v11, n, v65, v66, v67, v68) )\n  {\n    v15 = sub_40E920(1LL, 4LL, qword_621988);\n    v145 = sub_40E920(0LL, 4LL, qword_621990);\n    v146 = dcgettext(0LL, \"cannot copy a directory, %s, into itself, %s\", 5);\n    error(0, 0, v146, v145, v15);\n    *a9 = 1;\nLABEL_134:\n    if ( !v12[2].m128i_i8[5] )\n      goto LABEL_135;\n    goto LABEL_239;\n  }\n  if ( (unsigned __int8)sub_40EF80(filename, n, v69, v70, v71, v72) )\n  {\n    v180 = sub_40EA00(4LL, qword_621990);\n    v181 = dcgettext(0LL, \"warning: source directory %s specified more than once\", 5);\n    error(0, 0, v181, v180);\n    if ( !v12[1].m128i_i8[8] || !LOBYTE(fildes[0]) )\n      return 1;\n    goto LABEL_284;\n  }\n  v73 = v12->m128i_i32[1];\n  if ( v73 != 4 && (v73 != 3 || !(_BYTE)a7) )\n  {\n    v74 = sub_40E920(1LL, 4LL, n);\n    v15 = sub_40E920(0LL, 4LL, filename);\n    v75 = dcgettext(0LL, \"will not create hard link %s to directory %s\", 5);\n    error(0, 0, v75, v15, v74);\n    goto LABEL_134;\n  }\nLABEL_141:\n  if ( !v12[1].m128i_i8[8] )\n  {\n    fildes[0] = (unsigned __int8)src;\n    goto LABEL_67;\n  }\nLABEL_148:\n  if ( !rename(v11, filename) )\n  {\n    if ( v12[2].m128i_i8[14] )\n    {\n      v148 = dcgettext(0LL, \"renamed \", 5);\n      __printf_chk(1LL, v148);\n      sub_404D70((__int64)v11, (__int64)filename, (__int64)old);\n    }\n    if ( v12[2].m128i_i8[1] )\n      sub_405620((__int64)filename, 0LL, 1LL, (__int64)v12);\n    if ( a10 )\n      *a10 = 1;\n    if ( (_BYTE)a7 )\n    {\n      v10 = a7;\n      sub_40AE60(v12[3].m128i_i64[1], filename, p_stat_buf);\n      return v10;\n    }\n    return 1;\n  }\n  v79 = __errno_location();\n  if ( *v79 == 22 )\n  {\n    v10 = 1;\n    v167 = sub_40E920(1LL, 4LL, qword_621988);\n    v168 = sub_40E920(0LL, 4LL, qword_621990);\n    v169 = dcgettext(0LL, \"cannot move %s to a subdirectory of itself, %s\", 5);\n    error(0, 0, v169, v168, v167);\n    *a9 = 1;\n    return v10;\n  }\n  if ( *v79 != 18 )\n  {\n    v119 = sub_40E920(1LL, 4LL, filename);\n    v120 = \"cannot move %s to %s\";\n    v121 = sub_40E920(0LL, 4LL, v11);\n    goto LABEL_255;\n  }\n  if ( v296 == 0x4000 )\n  {\n    if ( !rmdir(filename) || *v79 == 2 )\n      goto LABEL_155;\n    goto LABEL_254;\n  }\n  if ( unlink(filename) && *v79 != 2 )\n  {\nLABEL_254:\n    v119 = sub_40E920(1LL, 4LL, filename);\n    v120 = \"inter-device move failed: %s to %s; unable to remove target\";\n    v121 = sub_40E920(0LL, 4LL, v11);\nLABEL_255:\n    v122 = dcgettext(0LL, v120, 5);\n    error(0, *v79, v122, v121, v119);\n    sub_409980(stat_buf.st_ino, stat_buf.st_dev);\n    return v10;\n  }\n  LOBYTE(src) = v12[2].m128i_i8[14] & (v296 != 0x4000);\n  if ( !(_BYTE)src )\n  {\nLABEL_155:\n    fildes[0] = 1;\n    LOBYTE(src) = 1;\n    goto LABEL_67;\n  }\n  v166 = dcgettext(0LL, \"copied \", 5);\n  __printf_chk(1LL, v166);\n  sub_404D70((__int64)v11, (__int64)filename, (__int64)old);\n  fildes[0] = 1;\nLABEL_67:\n  v37 = st_mode & 0xFFF;\n  if ( v12[2].m128i_i8[11] )\n    v37 = v12[1].m128i_i32[0] & 0xFFF;\n  if ( v12[1].m128i_i8[13] )\n  {\n    if ( !(unsigned __int8)sub_405550((__int64)v11, (__int64)filename, st_mode, fildes[0], v12) )\n      return v10;\n    LODWORD(s1) = v37 & 0x3F;\n    if ( v296 != 0x4000 )\n      goto LABEL_72;\nLABEL_177:\n    v86 = *(_QWORD **)fd;\n    if ( *(_QWORD *)fd )\n    {\n      while ( v86[1] != stat_buf.st_ino || v86[2] != stat_buf.st_dev )\n      {\n        v86 = (_QWORD *)*v86;\n        if ( !v86 )\n          goto LABEL_199;\n      }\n      v87 = \"cannot copy cyclic symbolic link %s\";\n      v15 = sub_40EA00(4LL, v11);\n      goto LABEL_183;\n    }\nLABEL_199:\n    v285 = (size_t)v268;\n    v268[0] = *(_QWORD *)fd;\n    v268[1] = stat_buf.st_ino;\n    v268[2] = stat_buf.st_dev;\n    if ( !(_BYTE)src && (v307.st_mode & 0xF000) == 0x4000 )\n    {\n      if ( (v12[2].m128i_i64[0] & 0xFF000000FF00LL) != 0\n        && !(unsigned __int8)sub_405620((__int64)filename, v12[2].m128i_u8[5], 0LL, (__int64)v12)\n        && v12[2].m128i_i8[6] )\n      {\n        goto LABEL_196;\n      }\n      v283 = 0;\n      LODWORD(s1) = 0;\n    }\n    else\n    {\n      if ( mkdir(filename, v37 & ~(_DWORD)s1) )\n      {\n        v90 = \"cannot create directory %s\";\n        v15 = sub_40EA00(4LL, filename);\n        goto LABEL_195;\n      }\n      if ( __lxstat(1, filename, &v307) )\n      {\n        v90 = \"cannot stat %s\";\n        v15 = sub_40EA00(4LL, filename);\n        goto LABEL_195;\n      }\n      v93 = v307.st_mode;\n      v283 = 0;\n      if ( (v307.st_mode & 0x1C0) != 448 )\n      {\n        v94 = chmod(filename, v307.st_mode | 0x1C0);\n        v276 = v93;\n        v283 = 1;\n        if ( v94 )\n        {\n          v90 = \"setting permissions for %s\";\n          v15 = sub_40EA00(4LL, filename);\n          goto LABEL_195;\n        }\n      }\n      if ( !*a8 )\n      {\n        sub_409A10(filename);\n        *a8 = 1;\n      }\n      if ( v12[2].m128i_i8[14] )\n      {\n        if ( v12[1].m128i_i8[8] )\n        {\n          v95 = sub_40EA00(4LL, filename);\n          v96 = dcgettext(0LL, \"created directory %s\\n\", 5);\n          __printf_chk(1LL, v96, v95);\n        }\n        else\n        {\n          sub_404D70((__int64)v11, (__int64)filename, 0LL);\n        }\n      }\n    }\n    LOBYTE(ptr) = v12[1].m128i_i8[12] & (p_length != 0LL);\n    if ( !(_BYTE)ptr || (LOBYTE(fd[0]) = 0, v44 = 0, p_length->tv_sec == stat_buf.st_dev) )\n    {\n      v97 = _mm_loadu_si128(v12 + 1);\n      v98 = _mm_loadu_si128(v12 + 2);\n      v99 = _mm_loadu_si128(v12 + 3);\n      v100 = v12[4].m128i_i64[0];\n      *(__m128i *)&dev.st_dev = _mm_loadu_si128(v12);\n      *(__m128i *)&dev.st_nlink = v97;\n      *(__m128i *)&dev.st_gid = v98;\n      *(__m128i *)&dev.st_size = v99;\n      dev.st_blocks = v100;\n      s = (char *)sub_40F480(v11, 2LL);\n      if ( s )\n      {\n        if ( v12->m128i_i32[1] == 3 )\n          HIDWORD(dev.st_dev) = 2;\n        if ( *s )\n        {\n          LOBYTE(v278) = v10;\n          v101 = s;\n          s2 = (char *)&v308;\n          v102 = 0;\n          p_dev = &dev;\n          st_blksize = v12;\n          LOBYTE(ptr) = 1;\n          p_length = &length;\n          *(_QWORD *)fd = v11;\n          v280 = a7;\n          do\n          {\n            v103 = (void *)sub_40B0C0(*(_QWORD *)fd, v101, 0LL);\n            v104 = (void *)sub_40B0C0(filename, v101, 0LL);\n            LOBYTE(v308.st_dev) = *a8;\n            v105 = sub_405990(\n                     (_DWORD)v103,\n                     (_DWORD)v104,\n                     fildes[0],\n                     (_DWORD)p_stat_buf,\n                     v285,\n                     (_DWORD)p_dev,\n                     0,\n                     (__int64)s2,\n                     (__int64)p_length,\n                     0LL);\n            LOBYTE(ptr) = v105 & (unsigned __int8)ptr;\n            *a9 |= LOBYTE(length.tv_sec);\n            free(v104);\n            free(v103);\n            if ( LOBYTE(length.tv_sec) )\n              break;\n            v102 |= LOBYTE(v308.st_dev);\n            v101 += strlen(v101) + 1;\n          }\n          while ( *v101 );\n          v106 = v102;\n          v11 = *(char **)fd;\n          v10 = (unsigned __int8)v278;\n          v12 = st_blksize;\n          v15 = v280;\n        }\n        else\n        {\n          v106 = 0;\n          LOBYTE(ptr) = 1;\n        }\n        free(s);\n        *a8 = v106;\n      }\n      else\n      {\n        *(_QWORD *)fildes = sub_40EA00(4LL, v11);\n        v195 = dcgettext(0LL, \"cannot access %s\", 5);\n        v196 = __errno_location();\n        error(0, *v196, v195, *(_QWORD *)fildes);\n        LOBYTE(ptr) = 0;\n      }\n      LOBYTE(fd[0]) = 0;\n      v44 = 0;\n    }\n    goto LABEL_78;\n  }\n  if ( v296 == 0x4000 )\n  {\n    if ( !(unsigned __int8)sub_405550((__int64)v11, (__int64)filename, st_mode, fildes[0], v12) )\n      return v10;\n    LODWORD(s1) = v37 & 0x12;\n    goto LABEL_177;\n  }\n  v38 = sub_405550((__int64)v11, (__int64)filename, st_mode, fildes[0], v12);\n  LODWORD(s1) = 0;\n  if ( !v38 )\n    return v10;\nLABEL_72:\n  LOBYTE(fd[0]) = v12[2].m128i_i8[12];\n  if ( LOBYTE(fd[0]) )\n  {\n    if ( *v11 == 47 )\n    {\nLABEL_76:\n      if ( (int)sub_409FD0(v11, 4294967196LL, filename, v12[1].m128i_u8[6]) < 0 )\n      {\n        v15 = sub_40E920(1LL, 4LL, v11);\n        v170 = sub_40E920(0LL, 4LL, filename);\n        v171 = dcgettext(0LL, \"cannot create symbolic link %s to %s\", 5);\n        v172 = __errno_location();\n        error(0, *v172, v171, v170, v15);\n        goto LABEL_196;\n      }\n      v283 = 0;\n      v44 = 0;\n      LOBYTE(ptr) = fd[0];\n      goto LABEL_78;\n    }\n    v43 = (void *)sub_40AC60(filename);\n    if ( !strcmp(\".\", (const char *)v43)\n      || __xstat(1, \".\", &v308)\n      || __xstat(1, (const char *)v43, &dev)\n      || v308.st_ino == dev.st_ino && v308.st_dev == dev.st_dev )\n    {\n      free(v43);\n      goto LABEL_76;\n    }\n    free(v43);\n    v87 = \"%s: can make relative symbolic links only in current directory\";\n    v15 = sub_40EAD0(0LL, 3LL, filename, v147);\nLABEL_183:\n    v88 = dcgettext(0LL, v87, 5);\n    error(0, 0, v88, v15);\n    goto LABEL_196;\n  }\n  v283 = v12[1].m128i_i8[7];\n  if ( v283 )\n  {\n    v118 = sub_404F50((__int64)v11, (__int64)filename, v12[1].m128i_u8[6], 0, (char)ptr);\n    v44 = 0;\n    v283 = 0;\n    LOBYTE(ptr) = v118;\n    if ( !v118 )\n      goto LABEL_196;\nLABEL_78:\n    v45 = v296 != 0x4000;\n    if ( !(_BYTE)src && v12[1].m128i_i8[4] != 1 && v296 != 0x4000 && (v12[2].m128i_i64[0] & 0xFF000000FF00LL) != 0 )\n    {\n      v46 = v12[2].m128i_u8[5];\n      LOBYTE(fildes[0]) = v44;\n      v47 = sub_405620((__int64)filename, v46, 0LL, (__int64)v12);\n      v44 = fildes[0];\n      if ( !v47 )\n      {\n        if ( v12[2].m128i_i8[6] )\n          goto LABEL_196;\n      }\n    }\n    if ( (_BYTE)v15 )\n    {\n      if ( v12[3].m128i_i64[1] )\n      {\n        LOBYTE(fildes[0]) = v44;\n        v48 = __lxstat(1, filename, &dev);\n        v44 = fildes[0];\n        if ( !v48 )\n        {\n          sub_40AE60(v12[3].m128i_i64[1], filename, &dev);\n          v44 = fildes[0];\n        }\n      }\n    }\n    if ( v12[1].m128i_i8[7] && v45 || v44 )\n      return (unsigned __int8)ptr;\n    if ( v12[1].m128i_i8[15] )\n    {\n      dev.st_dev = stat_buf.st_atim.tv_sec;\n      dev.st_ino = stat_buf.st_atim.tv_nsec;\n      *(struct timespec *)&dev.st_nlink = stat_buf.st_mtim;\n      if ( !LOBYTE(fd[0]) )\n      {\n        if ( !(unsigned int)sub_410AA0(filename) )\n        {\nLABEL_97:\n          if ( !v12[1].m128i_i8[13] || !(_BYTE)src && stat_buf.st_uid == v307.st_uid && stat_buf.st_gid == v307.st_gid )\n            goto LABEL_104;\n          v52 = sub_405770((__int64)v12, filename, 0xFFFFFFFF, p_stat_buf, (char)src, (__int64)&v307);\n          if ( v52 != -1 )\n          {\n            v53 = st_mode;\n            BYTE1(v53) = BYTE1(st_mode) & 0xF1;\n            if ( v52 )\n              v53 = st_mode;\n            st_mode = v53;\nLABEL_104:\n            if ( (v12[1].m128i_i64[1] & 0xFF0000000000FFLL) == 0 )\n            {\n              if ( v12[2].m128i_i8[11] )\n              {\n                v177 = v12[1].m128i_u32[0];\n              }\n              else\n              {\n                if ( !v12[2].m128i_i8[0] )\n                {\n                  if ( (_DWORD)s1 && (LODWORD(s1) = ~(unsigned int)sub_405960() & (unsigned int)s1, (_DWORD)s1) )\n                  {\n                    if ( v283 != 1 )\n                    {\n                      if ( (_BYTE)src && __lxstat(1, filename, &v307) )\n                      {\n                        v17 = filename;\n                        goto LABEL_117;\n                      }\n                      v276 = v307.st_mode;\n                      if ( (~v307.st_mode & (unsigned int)s1) == 0 )\n                        return (unsigned __int8)ptr;\n                    }\n                  }\n                  else if ( !v283 )\n                  {\n                    return (unsigned __int8)ptr;\n                  }\n                  if ( !chmod(filename, (unsigned int)s1 | v276) )\n                    return (unsigned __int8)ptr;\n                  v54 = sub_40EA00(4LL, filename);\n                  v55 = dcgettext(0LL, \"preserving permissions for %s\", 5);\n                  v56 = __errno_location();\n                  error(0, *v56, v55, v54);\nLABEL_111:\n                  v57 = (unsigned __int8)ptr;\n                  if ( v12[2].m128i_i8[4] )\n                    return v10;\n                  return v57;\n                }\n                v177 = ~(unsigned __int16)sub_405960() & 0x1FF;\n              }\n              v14 = (unsigned int)sub_40A160(filename, 0xFFFFFFFFLL, v177) == 0;\n              v178 = (unsigned __int8)ptr;\n              if ( !v14 )\n                return v10;\n              return v178;\n            }\n            if ( !(unsigned int)sub_40A0D0(v11, 0xFFFFFFFFLL, filename, 0xFFFFFFFFLL, st_mode) )\n              return (unsigned __int8)ptr;\n            goto LABEL_111;\n          }\n          return 0;\n        }\n        goto LABEL_95;\n      }\n      if ( (unsigned int)sub_410AB0(filename) && *__errno_location() != 38 )\n      {\nLABEL_95:\n        v49 = sub_40EA00(4LL, filename);\n        v50 = dcgettext(0LL, \"preserving times for %s\", 5);\n        v51 = __errno_location();\n        error(0, *v51, v50, v49);\n        if ( v12[2].m128i_i8[4] )\n          return 0;\n      }\n    }\n    if ( LOBYTE(fd[0]) )\n      return (unsigned __int8)ptr;\n    goto LABEL_97;\n  }\n  if ( v296 != 0x8000 )\n  {\n    LOBYTE(v41) = v12[1].m128i_i8[4] & (v296 != 40960);\n    if ( !(_BYTE)v41 )\n    {\n      LOBYTE(fildes[0]) = 0;\n      if ( v296 == 4096 )\n      {\n        dev.st_dev = 0LL;\n        v183 = st_mode & ~(_DWORD)s1;\n        v184 = __xmknod(0, filename, v183, &dev.st_dev);\n        v44 = fildes[0];\n        if ( !v184 || (v199 = mkfifo(filename, v183 & 0xFFFFEFFF), v44 = fildes[0], !v199) )\n        {\n          LOBYTE(fd[0]) = v44;\n          v283 = v44;\n          LOBYTE(ptr) = 1;\n          goto LABEL_78;\n        }\n        v90 = \"cannot create fifo %s\";\n        v15 = sub_40EA00(4LL, filename);\n        goto LABEL_195;\n      }\n      LOBYTE(ptr) = v296 == 49152 || (st_mode & 0xB000) == 0x2000;\n      if ( (_BYTE)ptr )\n      {\n        dev.st_dev = stat_buf.st_rdev;\n        v89 = __xmknod(0, filename, st_mode & ~(_DWORD)s1, &dev.st_dev);\n        v44 = fildes[0];\n        LOBYTE(fd[0]) = fildes[0];\n        v283 = fildes[0];\n        if ( !v89 )\n          goto LABEL_78;\n        v90 = \"cannot create special file %s\";\n        v15 = sub_40EA00(4LL, filename);\nLABEL_195:\n        v91 = dcgettext(0LL, v90, 5);\n        v92 = __errno_location();\n        error(0, *v92, v91, v15);\n        goto LABEL_196;\n      }\n      if ( v296 != 40960 )\n      {\n        v87 = \"%s has unknown file type\";\n        v15 = sub_40EA00(4LL, v11);\n        goto LABEL_183;\n      }\n      v173 = sub_40A1C0(v11);\n      v174 = (char *)v173;\n      if ( !v173 )\n      {\n        v90 = \"cannot read symbolic link %s\";\n        v15 = sub_40EA00(4LL, v11);\n        goto LABEL_195;\n      }\n      if ( (int)sub_409FD0(v173, 4294967196LL, filename, v12[1].m128i_u8[6]) < 0 )\n      {\n        fildes[0] = *__errno_location();\n        if ( fildes[0] )\n        {\n          if ( v12[2].m128i_i8[13] == 1 && !(_BYTE)src && (v307.st_mode & 0xF000) == 40960 )\n          {\n            v252 = -1LL;\n            v253 = v174;\n            do\n            {\n              if ( !v252 )\n                break;\n              v14 = *v253++ == (char)src;\n              --v252;\n            }\n            while ( !v14 );\n            if ( v307.st_size == -v252 - 2 )\n            {\n              v254 = (void *)sub_40A1C0(filename);\n              if ( v254 )\n              {\n                ptr = v254;\n                if ( !strcmp((const char *)v254, v174) )\n                {\n                  free(ptr);\n                  goto LABEL_376;\n                }\n                free(ptr);\n              }\n            }\n          }\n          free(v174);\n          v200 = sub_40EA00(4LL, filename);\n          v201 = dcgettext(0LL, \"cannot create symbolic link %s\", 5);\n          error(0, fildes[0], v201, v200);\n          goto LABEL_196;\n        }\n      }\nLABEL_376:\n      free(v174);\n      v283 = v12[2].m128i_i8[5];\n      if ( !v283 )\n      {\n        v44 = v12[1].m128i_i8[13];\n        if ( v44 )\n        {\n          LOBYTE(fildes[0]) = v12[1].m128i_i8[13];\n          if ( lchown(filename, stat_buf.st_uid, stat_buf.st_gid) )\n          {\n            LOBYTE(fd[0]) = sub_405740((__int64)v12);\n            if ( LOBYTE(fd[0]) )\n            {\n              v44 = 0;\n              LOBYTE(ptr) = fd[0];\n            }\n            else\n            {\n              v250 = dcgettext(0LL, \"failed to preserve ownership for %s\", 5);\n              v251 = __errno_location();\n              error(0, *v251, v250, filename);\n              v283 = v12[2].m128i_i8[4];\n              if ( v283 )\n                goto LABEL_196;\n              LOBYTE(fd[0]) = fildes[0];\n              LOBYTE(ptr) = fildes[0];\n              v44 = 0;\n            }\n          }\n          else\n          {\n            LOBYTE(fd[0]) = fildes[0];\n            LOBYTE(ptr) = fildes[0];\n            v44 = 0;\n          }\n        }\n        else\n        {\n          v283 = 0;\n          LOBYTE(fd[0]) = 1;\n          LOBYTE(ptr) = 1;\n        }\n        goto LABEL_78;\n      }\nLABEL_239:\n      sub_404D30();\n      goto LABEL_240;\n    }\n  }\n  v130 = v12->m128i_i32[1] == 2;\n  LODWORD(v285) = stat_buf.st_mode;\n  LOBYTE(s2) = v12[2].m128i_i8[3];\n  fildes[0] = sub_40AE10((_DWORD)v11, v130 << 17, v39, v40, v41, v42, v269[0]);\n  if ( fildes[0] < 0 )\n  {\n    v90 = \"cannot open %s for reading\";\n    v15 = sub_40EA00(4LL, v11);\n    goto LABEL_195;\n  }\n  if ( __fxstat(1, fildes[0], &v308) )\n  {\n    ptr = (void *)sub_40EA00(4LL, v11);\n    v193 = dcgettext(0LL, \"cannot fstat %s\", 5);\n    v194 = __errno_location();\n    error(0, *v194, v193, ptr);\n    goto LABEL_302;\n  }\n  if ( stat_buf.st_ino != v308.st_ino || stat_buf.st_dev != v308.st_dev )\n  {\n    v175 = sub_40EA00(4LL, v11);\n    v176 = dcgettext(0LL, \"skipping file %s, as it was replaced while being copied\", 5);\n    error(0, 0, v176, v175);\n    goto LABEL_302;\n  }\n  v273 = v37 & 0x1FF;\n  if ( (_BYTE)src )\n    goto LABEL_440;\n  v135 = filename;\n  v136 = sub_40AE10((_DWORD)filename, v12[2].m128i_i8[3] == 0 ? 1 : 513, v131, v132, v133, v134, v269[0]);\n  fd[0] = v136;\n  if ( (v12[2].m128i_i64[0] & 0xFF000000FF00LL) != 0 )\n  {\n    if ( v136 < 0 )\n    {\nLABEL_294:\n      v137 = __errno_location();\n      v138 = v137;\n      if ( !v12[1].m128i_i8[6] )\n      {\n        tv_sec = *v137;\n        if ( *v137 != 2 || v12[1].m128i_i8[8] )\n        {\n          LOBYTE(src) = 0;\n          goto LABEL_301;\n        }\n        v275 = 0;\n        goto LABEL_299;\n      }\n      if ( unlink(filename) )\n      {\n        ptr = (void *)sub_40EA00(4LL, filename);\n        v260 = dcgettext(0LL, \"cannot remove %s\", 5);\n        error(0, *v138, v260, ptr);\n        goto LABEL_302;\n      }\n      if ( v12[2].m128i_i8[14] )\n      {\n        v255 = sub_40EA00(4LL, filename);\n        v256 = dcgettext(0LL, \"removed %s\\n\", 5);\n        __printf_chk(1LL, v256, v255);\n      }\n      v132 = (int)s1;\n      LOBYTE(src) = v12[2].m128i_i8[1];\n      v275 = (int)s1;\n      if ( !(_BYTE)src )\n      {\nLABEL_299:\n        LODWORD(ptr) = v273 & ~v275;\n        fd[0] = sub_40AE10((_DWORD)filename, 193, (_DWORD)ptr, v132, v133, v134, v269[0]);\n        v139 = __errno_location();\n        tv_sec = *v139;\n        p_length = (struct timespec *)v139;\n        LOBYTE(p_dev) = fd[0] < 0 && tv_sec == 17;\n        if ( (_BYTE)p_dev )\n        {\n          tv_sec = 17;\n          LOBYTE(src) = v12[1].m128i_i8[8];\n          if ( (_BYTE)src )\n            goto LABEL_301;\n          if ( !__lxstat(1, filename, &dev) && (dev.st_mode & 0xF000) == 40960 )\n          {\n            v218 = v12[3].m128i_u8[0];\n            if ( !(_BYTE)v218 )\n            {\n              LOBYTE(fd[0]) = 0;\n              v266 = sub_40EA00(4LL, filename);\n              v267 = dcgettext(0LL, \"not writing through dangling symlink %s\", 5);\n              error(0, 0, v267, v266);\n              ptr = 0LL;\n              LOBYTE(v133) = fd[0];\n              LOBYTE(src) = (_BYTE)p_dev;\n              goto LABEL_303;\n            }\n            fd[0] = sub_40AE10((_DWORD)filename, 65, (_DWORD)ptr, v216, v218, v217, v269[0]);\n            tv_sec = p_length->tv_sec;\n          }\n        }\n        LOBYTE(src) = fd[0] < 0 && tv_sec == 21;\n        if ( (_BYTE)src )\n        {\n          tv_sec = 21;\n          if ( *filename )\n            tv_sec = (filename[strlen(filename) - 1] != 47) + 20;\n          goto LABEL_301;\n        }\n        LOBYTE(src) = 1;\n        if ( fd[0] < 0 )\n        {\nLABEL_301:\n          ptr = (void *)sub_40EA00(4LL, filename);\n          v141 = dcgettext(0LL, \"cannot create regular file %s\", 5);\n          error(0, tv_sec, v141, ptr);\nLABEL_302:\n          LOBYTE(v133) = 0;\n          ptr = 0LL;\n          goto LABEL_303;\n        }\n        goto LABEL_457;\n      }\n      v133 = sub_405550((__int64)v11, (__int64)filename, (unsigned int)v273, 1u, v12);\n      if ( !(_BYTE)v133 )\n      {\n        ptr = 0LL;\n        goto LABEL_303;\n      }\nLABEL_440:\n      v275 = (int)s1;\n      goto LABEL_299;\n    }\n    v212 = sub_405620((__int64)v135, v12[2].m128i_u8[5], 0LL, (__int64)v12);\n    if ( !v212 )\n    {\n      LOBYTE(src) = v12[2].m128i_i8[6];\n      if ( (_BYTE)src )\n      {\n        LOBYTE(src) = 0;\n        ptr = 0LL;\n        goto LABEL_489;\n      }\n    }\n  }\n  else if ( fd[0] < 0 )\n  {\n    goto LABEL_294;\n  }\n  v275 = 0;\nLABEL_457:\n  p_dev = &dev;\n  LODWORD(p_length) = __fxstat(1, fd[0], &dev);\n  if ( (_DWORD)p_length )\n  {\n    ptr = (void *)sub_40EA00(4LL, filename);\n    v223 = dcgettext(0LL, \"cannot fstat %s\", 5);\n    v224 = __errno_location();\n    error(0, *v224, v223, ptr);\n    v212 = 0;\n    ptr = 0LL;\n    goto LABEL_489;\n  }\n  if ( !(_BYTE)s2 )\n    goto LABEL_504;\n  if ( !v12[3].m128i_i32[1] )\n    goto LABEL_460;\n  if ( !ioctl(fd[0], 0x40049409uLL, (unsigned int)fildes[0]) )\n  {\nLABEL_504:\n    ptr = 0LL;\n    goto LABEL_476;\n  }\n  if ( v12[3].m128i_i32[1] == 2 )\n  {\n    p_length = (struct timespec *)sub_40E920(1LL, 4LL, v11);\n    v248 = sub_40E920(0LL, 4LL, filename);\n    ptr = dcgettext(0LL, \"failed to clone %s from %s\", 5);\n    v249 = __errno_location();\n    error(0, *v249, (const char *)ptr, v248, p_length);\n    v212 = 0;\n    ptr = 0LL;\n    goto LABEL_489;\n  }\nLABEL_460:\n  v204 = getpagesize();\n  st_blksize = (__m128i *)dev.st_blksize;\n  s = (char *)dev.st_blksize;\n  if ( (unsigned __int64)(dev.st_blksize - 0x20000) > 0x1FFFFFFFFFFE0000LL )\n  {\n    s = (char *)0x20000;\n    v205 = 512LL;\n    if ( (unsigned __int64)&st_blksize[-1].m128i_u64[1] + 7 <= 0x1FFFFFFFFFFFFFFFLL )\n      v205 = (__int64)st_blksize;\n    st_blksize = (__m128i *)v205;\n  }\n  j__posix_fadvise(fildes[0], 0LL, 0LL, 2);\n  if ( (v308.st_mode & 0xF000) == 0x8000 )\n    LODWORD(p_length) = v308.st_blocks < v308.st_size / 512;\n  ptr = (void *)(v204 - 1);\n  if ( (dev.st_mode & 0xF000) != 0x8000 )\n    goto LABEL_467;\n  v247 = v12->m128i_i32[3];\n  if ( v247 == 3 )\n  {\n    ptr = (void *)sub_4112E0(&s[v204]);\n    v209 = ((unsigned __int64)ptr + v204 - 1) % v204;\n    v274 = (char *)ptr + v204 - v209 - 1;\n    if ( !(_DWORD)p_length )\n    {\n      v210 = v12->m128i_i32[3] == 3;\n      p_length = &length;\n      goto LABEL_474;\n    }\n  }\n  else\n  {\n    if ( v247 != 2 || ((unsigned __int8)p_length & 1) == 0 )\n    {\nLABEL_467:\n      v206 = v308.st_blksize;\n      LODWORD(v278) = v308.st_mode & 0xF000;\n      ptr = (void *)(0x7FFFFFFFFFFFFFFFLL - v204);\n      if ( (unsigned __int64)(v308.st_blksize - 0x20000) > 0x1FFFFFFFFFFE0000LL )\n        v206 = 0x20000LL;\n      v207 = sub_40A980(v206, s, 0x7FFFFFFFFFFFFFFFLL - v204);\n      if ( (_DWORD)v278 == 0x8000 && (unsigned __int64)s > v308.st_size )\n        s = (char *)(v308.st_size + 1);\n      v208 = &s[v207 - 1 - (unsigned __int64)&s[v207 - 1] % v207];\n      s = v208;\n      if ( !v208 || ptr < v208 )\n        s = (char *)v207;\n      ptr = (void *)sub_4112E0(&s[v204]);\n      v209 = ((unsigned __int64)ptr + v204 - 1) % v204;\n      v274 = (char *)ptr + v204 - v209 - 1;\n      if ( !(_DWORD)p_length )\n      {\n        v14 = v12->m128i_i32[3] == 3;\n        st_blksize = 0LL;\n        p_length = &length;\n        v210 = v14;\nLABEL_474:\n        v268[3] = v209;\n        if ( !(unsigned __int8)sub_405120(\n                                 fildes[0],\n                                 fd[0],\n                                 v274,\n                                 (unsigned __int64)s,\n                                 (unsigned __int64)st_blksize,\n                                 v210,\n                                 (__int64)v11,\n                                 (__int64)filename,\n                                 0xFFFFFFFFFFFFFFFFLL,\n                                 p_length,\n                                 &v300) )\n          goto LABEL_512;\n        if ( !(_BYTE)v300 || ftruncate(fd[0], length.tv_sec) >= 0 )\n          goto LABEL_476;\n        goto LABEL_601;\n      }\n      v281 = 0;\n      v280 = 1;\n      goto LABEL_528;\n    }\n    ptr = (void *)sub_4112E0(&s[v204]);\n    v274 = (char *)ptr + v204 - ((unsigned __int64)ptr + v204 - 1) % v204 - 1;\n  }\n  v280 = v12->m128i_u32[3];\n  v281 = (char)s2;\nLABEL_528:\n  v226 = 0LL;\n  p_length = &length;\n  st_size = v308.st_size;\n  sub_409AE0((unsigned int)fildes[0], &length);\n  v272 = a7;\n  v227 = 0LL;\n  v271 = v12;\n  v228 = st_size;\n  v282 = v10;\n  v229 = (char)s2;\n  v278 = v11;\n  v230 = 0LL;\n  do\n  {\n    s2 = v227;\n    v231 = sub_409B10(p_length);\n    v227 = s2;\n    if ( !v231 )\n    {\n      LOBYTE(s2) = v229;\n      v11 = v278;\n      v10 = v282;\n      v12 = v271;\n      v15 = v272;\n      if ( v304 )\n        goto LABEL_554;\n      if ( !v303 )\n      {\n        v240 = \"%s: failed to get extents info\";\n        p_length = (struct timespec *)sub_40EAD0(0LL, 3LL, v278, v227);\n        goto LABEL_562;\n      }\n      v265 = 0LL;\n      v210 = v271->m128i_i32[3] == 3;\n      if ( v281 )\n        v265 = (unsigned __int64)st_blksize;\n      st_blksize = (__m128i *)v265;\n      goto LABEL_474;\n    }\n    if ( !st_mtim.tv_nsec )\n      goto LABEL_552;\n    v232 = v230;\n    v233 = v226;\n    v234 = 0;\n    v235 = 0LL;\n    while ( 1 )\n    {\n      v237 = (__off_t *)((char *)v305 + 24 * v235);\n      v226 = *v237;\n      v230 = v237[1];\n      if ( v228 < (__int64)(*v237 + v230) )\n      {\n        if ( v226 > v228 )\n          v226 = v228;\n        v230 = v228 - v226;\n      }\n      v229 = 0;\n      if ( v226 - v233 != v232 )\n      {\n        s2 = (char *)(v226 - v233 - v232);\n        if ( lseek(fildes[0], v226, 0) < 0 )\n        {\n          v11 = v278;\n          v10 = v282;\n          v12 = v271;\n          v15 = v272;\n          v257 = \"cannot lseek %s\";\n          p_length = (struct timespec *)sub_40EA00(4LL, v278);\n        }\n        else\n        {\n          if ( v280 != 1 )\n          {\n            v229 = sub_405060(fd[0], (__int64)filename, v280 == 3, (__off_t)s2);\n            if ( !v229 )\n            {\nLABEL_547:\n              v10 = v282;\n              v11 = v278;\n              v12 = v271;\n              v15 = v272;\nLABEL_548:\n              free(v305);\n              goto LABEL_512;\n            }\n            goto LABEL_532;\n          }\n          if ( (unsigned __int8)sub_404C20(fd[0], (size_t)s2) )\n          {\n            v236 = 0LL;\n            goto LABEL_534;\n          }\n          v10 = v282;\n          v11 = v278;\n          v12 = v271;\n          v15 = v272;\n          v257 = \"%s: write failed\";\n          p_length = (struct timespec *)sub_40EAD0(0LL, 3LL, filename, v238);\n        }\n        v258 = dcgettext(0LL, v257, 5);\n        v259 = __errno_location();\n        error(0, *v259, v258, p_length);\n        goto LABEL_548;\n      }\nLABEL_532:\n      v236 = 0LL;\n      if ( v280 == 3 )\n        v236 = (unsigned __int64)st_blksize;\nLABEL_534:\n      if ( !(unsigned __int8)sub_405120(\n                               fildes[0],\n                               fd[0],\n                               v274,\n                               (unsigned __int64)s,\n                               v236,\n                               1,\n                               (__int64)v278,\n                               (__int64)filename,\n                               v230,\n                               &v300,\n                               &v299) )\n        goto LABEL_547;\n      v227 = (char *)(v226 + v300);\n      if ( v300 )\n        v229 = v299;\n      if ( (char *)v228 == v227 )\n        break;\n      v233 = v226;\n      v232 = v230;\n      v235 = ++v234;\n      if ( (unsigned __int64)v234 >= st_mtim.tv_nsec )\n        goto LABEL_552;\n    }\n    v304 = 1;\nLABEL_552:\n    s2 = v227;\n    free(v305);\n    v305 = 0LL;\n    st_mtim.tv_nsec = 0LL;\n    v227 = s2;\n  }\n  while ( !v304 );\n  LOBYTE(s2) = v229;\n  v11 = v278;\n  v10 = v282;\n  v12 = v271;\n  v15 = v272;\nLABEL_554:\n  v239 = st_size > (__int64)v227;\n  if ( st_size <= (__int64)v227 && !(_BYTE)s2 )\n    goto LABEL_476;\n  if ( v280 == 1 )\n  {\n    if ( (unsigned __int8)sub_404C20(fd[0], st_size - (_QWORD)v227) )\n      goto LABEL_476;\n    goto LABEL_601;\n  }\n  p_length = (struct timespec *)v227;\n  if ( ftruncate(fd[0], st_size) )\n  {\nLABEL_601:\n    v240 = \"failed to extend %s\";\n    p_length = (struct timespec *)sub_40EA00(4LL, filename);\nLABEL_562:\n    v241 = dcgettext(0LL, v240, 5);\n    v242 = __errno_location();\n    error(0, *v242, v241, p_length);\n    goto LABEL_512;\n  }\n  if ( v280 == 3 && v239 && (int)sub_404CD0(fd[0], (__off_t)p_length, st_size - (_QWORD)p_length) < 0 )\n  {\n    v240 = \"error deallocating %s\";\n    p_length = (struct timespec *)sub_40EA00(4LL, filename);\n    goto LABEL_562;\n  }\nLABEL_476:\n  if ( !v12[1].m128i_i8[15]\n    || (length = stat_buf.st_atim, st_mtim = stat_buf.st_mtim, !(unsigned int)sub_410660(fd[0], filename))\n    || (p_length = (struct timespec *)sub_40EA00(4LL, filename),\n        v219 = dcgettext(0LL, \"preserving times for %s\", 5),\n        v220 = __errno_location(),\n        error(0, *v220, v219, p_length),\n        !v12[2].m128i_i8[4]) )\n  {\n    if ( v12[1].m128i_i8[13] && (stat_buf.st_uid != dev.st_uid || stat_buf.st_gid != dev.st_gid) )\n    {\n      v211 = sub_405770((__int64)v12, filename, fd[0], p_stat_buf, (char)src, (__int64)p_dev);\n      if ( v211 == -1 )\n        goto LABEL_512;\n      if ( !v211 )\n        LODWORD(v285) = v285 & 0xFFFFF1FF;\n    }\n    if ( v12[2].m128i_i8[7] && SLOBYTE(dev.st_mode) >= 0 && geteuid() && !sub_404D10(fd[0], filename, 0x180u) )\n      sub_404D10(fd[0], filename, v273 & ~v275);\n    if ( (v12[1].m128i_i64[1] & 0xFF0000000000FFLL) == 0 )\n    {\n      if ( v12[2].m128i_i8[11] )\n      {\n        v243 = v12[1].m128i_u32[0];\n      }\n      else\n      {\n        if ( !v12[2].m128i_i8[0] )\n        {\n          v212 = 1;\n          if ( !v275 )\n            goto LABEL_489;\n          LOBYTE(p_length) = 1;\n          v261 = sub_405960();\n          v212 = (char)p_length;\n          if ( (~v261 & v275) == 0 )\n            goto LABEL_489;\n          v262 = sub_404D10(fd[0], filename, v273);\n          v212 = (char)p_length;\n          if ( !v262 )\n            goto LABEL_489;\n          p_length = (struct timespec *)sub_40EA00(4LL, filename);\n          v263 = dcgettext(0LL, \"preserving permissions for %s\", 5);\n          v264 = __errno_location();\n          error(0, *v264, v263, p_length);\n          goto LABEL_522;\n        }\n        v243 = ~(unsigned __int16)sub_405960() & 0x1B6;\n      }\n      v212 = (unsigned int)sub_40A160(filename, (unsigned int)fd[0], v243) == 0;\n      goto LABEL_489;\n    }\n    v225 = sub_40A0D0(v11, (unsigned int)fildes[0], filename, (unsigned int)fd[0], (unsigned int)v285);\n    v212 = 1;\n    if ( !v225 )\n      goto LABEL_489;\nLABEL_522:\n    v212 = v12[2].m128i_i8[4] ^ 1;\n    goto LABEL_489;\n  }\nLABEL_512:\n  v212 = 0;\nLABEL_489:\n  LOBYTE(p_length) = v212;\n  v213 = close(fd[0]);\n  LOBYTE(v133) = (_BYTE)p_length;\n  if ( v213 < 0 )\n  {\n    *(_QWORD *)fd = sub_40EA00(4LL, filename);\n    v214 = dcgettext(0LL, \"failed to close %s\", 5);\n    v215 = __errno_location();\n    error(0, *v215, v214, *(_QWORD *)fd);\n    LOBYTE(v133) = 0;\n  }\nLABEL_303:\n  LOBYTE(fd[0]) = v133;\n  if ( close(fildes[0]) < 0 )\n  {\n    v15 = sub_40EA00(4LL, v11);\n    v187 = dcgettext(0LL, \"failed to close %s\", 5);\n    v188 = __errno_location();\n    error(0, *v188, v187, v15);\n    free(ptr);\n    goto LABEL_196;\n  }\n  LOBYTE(fildes[0]) = fd[0];\n  free(ptr);\n  v44 = fildes[0];\n  LOBYTE(fd[0]) = 0;\n  LOBYTE(ptr) = fildes[0];\n  if ( LOBYTE(fildes[0]) )\n    goto LABEL_78;\nLABEL_196:\n  if ( v12[2].m128i_i8[5] )\n    goto LABEL_239;\n  if ( !n )\n    sub_409980(stat_buf.st_ino, stat_buf.st_dev);\nLABEL_135:\n  if ( old )\n  {\n    if ( rename(old, filename) )\n    {\n      v127 = sub_40EA00(4LL, filename);\n      v128 = dcgettext(0LL, \"cannot un-backup %s\", 5);\n      v129 = __errno_location();\n      error(0, *v129, v128, v127);\n    }\n    else if ( v12[2].m128i_i8[14] )\n    {\n      v76 = sub_40E920(1LL, 4LL, filename);\n      v77 = sub_40E920(0LL, 4LL, old);\n      v78 = dcgettext(0LL, \"%s -> %s (unbackup)\\n\", 5);\n      __printf_chk(1LL, v78, v77, v76);\n    }\n  }\n  return v10;\n}\n"
        },
        {
            "funcName": "sub_409810",
            "funcStartAddr": "0x409810",
            "funcEndAddr": "0x40992c",
            "decompiledFuncCode": "__int64 __fastcall sub_409810(const char *a1, char *a2, unsigned __int8 a3, __m128i *a4, _BYTE *a5, _BYTE *a6)\n{\n  __int32 v6; // eax\n  unsigned int v7; // r10d\n  char v9[9]; // [rsp+Fh] [rbp-9h] BYREF\n\n  if ( !a4 )\n    __assert_fail(\"co != NULL\", \"src/copy.c\", 0xB60u, \"valid_options\");\n  if ( a4->m128i_i32[0] > 3u )\n    __assert_fail(\"VALID_BACKUP_TYPE (co->backup_type)\", \"src/copy.c\", 0xB61u, \"valid_options\");\n  v6 = a4->m128i_i32[3];\n  if ( (unsigned int)(v6 - 1) > 2 )\n    __assert_fail(\"VALID_SPARSE_MODE (co->sparse_mode)\", \"src/copy.c\", 0xB62u, \"valid_options\");\n  v7 = a4[3].m128i_u32[1];\n  if ( v7 > 2 )\n    __assert_fail(\"VALID_REFLINK_MODE (co->reflink_mode)\", \"src/copy.c\", 0xB63u, \"valid_options\");\n  if ( a4[1].m128i_i8[7] && a4[2].m128i_i8[12] )\n    __assert_fail(\"!(co->hard_link && co->symbolic_link)\", \"src/copy.c\", 0xB64u, \"valid_options\");\n  if ( v6 != 2 && v7 == 2 )\n    __assert_fail(\n      \"! (co->reflink_mode == REFLINK_ALWAYS && co->sparse_mode != SPARSE_AUTO)\",\n      \"src/copy.c\",\n      0xB67u,\n      \"valid_options\");\n  v9[0] = 0;\n  qword_621990 = (__int64)a1;\n  qword_621988 = (__int64)a2;\n  return sub_405990(a1, a2, a3, 0LL, 0LL, a4, 1u, v9, a5, a6);\n}\n"
        },
        {
            "funcName": "sub_409930",
            "funcStartAddr": "0x409930",
            "funcEndAddr": "0x40993c",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_409930(_QWORD *a1, unsigned __int64 a2)\n{\n  return *a1 % a2;\n}\n"
        },
        {
            "funcName": "sub_409940",
            "funcStartAddr": "0x409940",
            "funcEndAddr": "0x40995c",
            "decompiledFuncCode": "bool __fastcall sub_409940(_QWORD *a1, _QWORD *a2)\n{\n  bool result; // al\n\n  result = 0;\n  if ( *a1 == *a2 )\n    return a1[1] == a2[1];\n  return result;\n}\n"
        },
        {
            "funcName": "sub_409960",
            "funcStartAddr": "0x409960",
            "funcEndAddr": "0x409976",
            "decompiledFuncCode": "void __fastcall sub_409960(void **ptr)\n{\n  free(ptr[2]);\n  free(ptr);\n}\n"
        },
        {
            "funcName": "sub_409980",
            "funcStartAddr": "0x409980",
            "funcEndAddr": "0x4099c5",
            "decompiledFuncCode": "void __fastcall sub_409980(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rax\n  void *v3; // rbx\n  __int64 v4[5]; // [rsp+0h] [rbp-28h] BYREF\n\n  v4[0] = a1;\n  v4[1] = a2;\n  v4[2] = 0LL;\n  v2 = sub_40C330(qword_621998, v4);\n  if ( v2 )\n  {\n    v3 = (void *)v2;\n    free(*(void **)(v2 + 16));\n    free(v3);\n  }\n}\n"
        },
        {
            "funcName": "sub_4099D0",
            "funcStartAddr": "0x4099d0",
            "funcEndAddr": "0x409a07",
            "decompiledFuncCode": "__int64 __fastcall sub_4099D0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rax\n  __int64 v4[5]; // [rsp+0h] [rbp-28h] BYREF\n\n  v4[0] = a1;\n  v4[1] = a2;\n  v2 = sub_40B8E0(qword_621998, v4);\n  if ( v2 )\n    return *(_QWORD *)(v2 + 16);\n  else\n    return 0LL;\n}\n"
        },
        {
            "funcName": "sub_409A10",
            "funcStartAddr": "0x409a10",
            "funcEndAddr": "0x409a86",
            "decompiledFuncCode": "__int64 __fastcall sub_409A10(void *src, __int64 a2, __int64 a3)\n{\n  _QWORD *v4; // rbx\n  __int64 v5; // rax\n  void *v6; // rdi\n  __int64 v7; // rax\n  _QWORD *v8; // rbp\n  __int64 result; // rax\n\n  v4 = (_QWORD *)sub_4112E0(24LL);\n  v5 = sub_411510(src);\n  v6 = qword_621998;\n  *v4 = a2;\n  v4[2] = v5;\n  v4[1] = a3;\n  v7 = sub_40C2F0(v6, v4);\n  if ( !v7 )\n    sub_411530();\n  v8 = (_QWORD *)v7;\n  result = 0LL;\n  if ( v4 != v8 )\n  {\n    free((void *)v4[2]);\n    free(v4);\n    return v8[2];\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_409A90",
            "funcStartAddr": "0x409a90",
            "funcEndAddr": "0x409ac6",
            "decompiledFuncCode": "void *sub_409A90()\n{\n  void *result; // rax\n\n  result = (void *)sub_40BB50(103LL, 0LL, sub_409930, sub_409940, sub_409960);\n  qword_621998 = result;\n  if ( !result )\n    sub_411530();\n  return result;\n}\n"
        },
        {
            "funcName": "sub_409AD0",
            "funcStartAddr": "0x409ad0",
            "funcEndAddr": "0x409adc",
            "decompiledFuncCode": "__int64 sub_409AD0()\n{\n  return sub_40BD90(qword_621998);\n}\n"
        },
        {
            "funcName": "sub_409AE0",
            "funcStartAddr": "0x409ae0",
            "funcEndAddr": "0x409b08",
            "decompiledFuncCode": "__int64 __fastcall sub_409AE0(int a1, __int64 a2)\n{\n  __int64 result; // rax\n\n  result = 0LL;\n  *(_DWORD *)a2 = a1;\n  *(_QWORD *)(a2 + 40) = 0LL;\n  *(_QWORD *)(a2 + 8) = 0LL;\n  *(_QWORD *)(a2 + 24) = 0LL;\n  *(_WORD *)(a2 + 32) = 0;\n  *(_DWORD *)(a2 + 16) = 1;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_409B10",
            "funcStartAddr": "0x409b10",
            "funcEndAddr": "0x409dd5",
            "decompiledFuncCode": "bool __fastcall sub_409B10(__int64 a1)\n{\n  unsigned int v1; // r13d\n  __int64 v3; // rbx\n  __int64 v4; // rdx\n  int v5; // eax\n  int v6; // edi\n  unsigned __int64 v7; // rcx\n  __int64 v8; // rdi\n  unsigned __int64 v9; // rcx\n  __int64 v10; // rbx\n  __int64 v11; // rax\n  unsigned int v12; // r8d\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rdx\n  unsigned int v15; // edi\n  __int64 *v16; // rcx\n  int v17; // r9d\n  __int64 v18; // r10\n  unsigned __int64 v19; // rsi\n  __int64 v20; // rcx\n  char v21; // al\n  __int64 v22; // rax\n  __int64 v23; // rdx\n  bool result; // al\n  bool v25; // zf\n  __int64 vars0[519]; // [rsp+0h] [rbp+0h] BYREF\n\n  v1 = 0;\n  v3 = *(_QWORD *)(a1 + 40);\n  v4 = *(_QWORD *)(a1 + 8);\n  while ( 1 )\n  {\n    memset(vars0, 0, 0x1000uLL);\n    v5 = *(_DWORD *)(a1 + 16);\n    v6 = *(_DWORD *)a1;\n    vars0[0] = v4;\n    LODWORD(vars0[3]) = 72;\n    LODWORD(vars0[2]) = v5;\n    vars0[1] = ~v4;\n    if ( ioctl(v6, 0xC020660BuLL, vars0) < 0 )\n      break;\n    if ( !HIDWORD(vars0[2]) )\n    {\n      v25 = *(_QWORD *)(a1 + 8) == 0LL;\n      *(_BYTE *)(a1 + 33) = 1;\n      return !v25;\n    }\n    v7 = *(_QWORD *)(a1 + 24);\n    if ( v7 > ~(unsigned __int64)HIDWORD(vars0[2]) )\n      __assert_fail(\n        \"scan->ei_count <= SIZE_MAX - fiemap->fm_mapped_extents\",\n        \"src/extent-scan.c\",\n        0x7Eu,\n        \"extent_scan_read\");\n    v8 = *(_QWORD *)(a1 + 40);\n    v9 = HIDWORD(vars0[2]) + v7;\n    *(_QWORD *)(a1 + 24) = v9;\n    v10 = v3 - v8;\n    if ( ((24 * v9) & 0x8000000000000000LL) != 0LL || !is_mul_ok(v9, 0x18uLL) )\n      sub_411530(v8, 3223348747LL, (v9 * (unsigned __int128)0x18uLL) >> 64 != 0);\n    v11 = sub_411340(v8, 24 * v9);\n    v12 = HIDWORD(vars0[2]);\n    *(_QWORD *)(a1 + 40) = v11;\n    v3 = v11 + v10;\n    if ( v12 )\n    {\n      v13 = vars0[6];\n      v14 = vars0[4];\n      if ( vars0[4] > (unsigned __int64)(0x7FFFFFFFFFFFFFFFLL - vars0[6]) )\nLABEL_17:\n        __assert_fail(\n          \"fm_extents[i].fe_logical <= OFF_T_MAX - fm_extents[i].fe_length\",\n          \"src/extent-scan.c\",\n          0x8Du,\n          \"extent_scan_read\");\n      v15 = 0;\n      v16 = &vars0[4];\n      while ( 2 )\n      {\n        if ( v1 )\n        {\n          v17 = *((_DWORD *)v16 + 10);\n          v18 = *(_QWORD *)(v3 + 8);\n          v19 = v18 + *(_QWORD *)v3;\n          if ( *(_DWORD *)(v3 + 16) == (v17 & 0xFFFFFFFE) && v14 == v19 )\n          {\n            *(_DWORD *)(v3 + 16) = v17;\n            ++v15;\n            *(_QWORD *)(v3 + 8) = v18 + v13;\nLABEL_15:\n            if ( v15 >= v12 )\n              goto LABEL_21;\nLABEL_16:\n            v16 = &vars0[7 * v15 + 4];\n            v13 = v16[2];\n            v14 = *v16;\n            if ( *v16 > 0x7FFFFFFFFFFFFFFFLL - v13 )\n              goto LABEL_17;\n            continue;\n          }\n          if ( v19 > v14 )\n          {\nLABEL_13:\n            if ( v19 - v14 < v13 )\n              goto LABEL_27;\n            *v16 = v19;\n            v16[2] = v13 + v14 - v19;\n            goto LABEL_15;\n          }\n        }\n        else\n        {\n          v19 = *(_QWORD *)(a1 + 8);\n          if ( v19 > v14 )\n            goto LABEL_13;\n          v17 = *((_DWORD *)v16 + 10);\n        }\n        break;\n      }\n      v20 = v1;\n      ++v15;\n      ++v1;\n      v3 = *(_QWORD *)(a1 + 40) + 24 * v20;\n      *(_QWORD *)v3 = v14;\n      *(_QWORD *)(v3 + 8) = v13;\n      *(_DWORD *)(v3 + 16) = v17;\n      if ( v15 >= v12 )\n        goto LABEL_21;\n      goto LABEL_16;\n    }\nLABEL_21:\n    if ( (*(_BYTE *)(v3 + 16) & 1) != 0 )\n    {\n      *(_BYTE *)(a1 + 33) = 1;\nLABEL_35:\n      *(_QWORD *)(a1 + 24) = v1;\n      return 1;\n    }\n    v21 = *(_BYTE *)(a1 + 33);\n    if ( v1 > 0x48 )\n    {\n      if ( v21 )\n        goto LABEL_35;\n      v22 = v1 - 1;\n      v23 = *(_QWORD *)(a1 + 40);\n      *(_QWORD *)(a1 + 24) = v22;\n      *(_QWORD *)(a1 + 8) = *(_QWORD *)(v23 + 24 * v22 - 24) + *(_QWORD *)(v23 + 24 * v22 - 16);\n      return 1;\n    }\n    *(_QWORD *)(a1 + 24) = v1;\n    if ( !v21 )\n    {\n      v4 = *(_QWORD *)v3 + *(_QWORD *)(v3 + 8);\n      *(_QWORD *)(a1 + 8) = v4;\n      if ( v1 != 72 )\n        continue;\n    }\n    return 1;\n  }\nLABEL_27:\n  result = 0;\n  if ( !*(_QWORD *)(a1 + 8) )\n  {\n    *(_BYTE *)(a1 + 32) = 1;\n    return 0;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_409DE0",
            "funcStartAddr": "0x409de0",
            "funcEndAddr": "0x409df8",
            "decompiledFuncCode": "int __fastcall sub_409DE0(char *to, __int64 a2)\n{\n  return linkat(*(_DWORD *)a2, *(const char **)(a2 + 8), *(_DWORD *)(a2 + 16), to, *(_DWORD *)(a2 + 20));\n}\n"
        },
        {
            "funcName": "sub_409E00",
            "funcStartAddr": "0x409e00",
            "funcEndAddr": "0x409e64",
            "decompiledFuncCode": "void *__fastcall sub_409E00(void *src, void *dest)\n{\n  __int64 v3; // rax\n  size_t v4; // rbp\n\n  v3 = sub_40AD40(src) - (_QWORD)src;\n  v4 = v3;\n  if ( (unsigned __int64)(v3 + 9) > 0x100 )\n  {\n    dest = malloc(v3 + 9);\n    if ( !dest )\n      return 0LL;\n  }\n  strcpy((char *)mempcpy(dest, src, v4), \"CuXXXXXX\");\n  return dest;\n}\n"
        },
        {
            "funcName": "sub_409E70",
            "funcStartAddr": "0x409e70",
            "funcEndAddr": "0x409e81",
            "decompiledFuncCode": "int __fastcall sub_409E70(char *to, __int64 a2)\n{\n  return symlinkat(*(const char **)a2, *(_DWORD *)(a2 + 8), to);\n}\n"
        },
        {
            "funcName": "sub_409E90",
            "funcStartAddr": "0x409e90",
            "funcEndAddr": "0x409fc5",
            "decompiledFuncCode": "__int64 __fastcall sub_409E90(int a1, const char *a2, int a3, char *a4, int a5, char a6)\n{\n  int v8; // eax\n  unsigned int v9; // ebx\n  int *v10; // rax\n  char *v12; // rax\n  char *v13; // rbx\n  int v14; // eax\n  int *v15; // r9\n  int v16; // r12d\n  int *v18; // [rsp+8h] [rbp-160h]\n  int *v19; // [rsp+8h] [rbp-160h]\n  char dest[312]; // [rsp+30h] [rbp-138h] BYREF\n\n  v8 = linkat(a1, a2, a3, a4, a5);\n  v9 = v8;\n  if ( a6 == 1 )\n  {\n    if ( v8 )\n    {\n      v10 = __errno_location();\n      if ( *v10 == 17 )\n      {\n        v18 = v10;\n        v12 = (char *)sub_409E00(a4, dest);\n        v13 = v12;\n        if ( v12 )\n        {\n          v14 = sub_40FB10(v12);\n          v15 = v18;\n          if ( v14 )\n          {\n            v16 = *v18;\n          }\n          else\n          {\n            v16 = renameat(a3, v13, a3, a4);\n            if ( v16 )\n              v16 = *v18;\n            unlinkat(a3, v13, 0);\n            v15 = v18;\n          }\n          if ( v13 != dest )\n          {\n            v19 = v15;\n            free(v13);\n            v15 = v19;\n          }\n          v9 = 1;\n          if ( v16 )\n          {\n            *v15 = v16;\n            return (unsigned int)-1;\n          }\n        }\n        else\n        {\n          return (unsigned int)-1;\n        }\n      }\n    }\n  }\n  return v9;\n}\n"
        },
        {
            "funcName": "sub_409FD0",
            "funcStartAddr": "0x409fd0",
            "funcEndAddr": "0x40a0d0",
            "decompiledFuncCode": "__int64 __fastcall sub_409FD0(const char *a1, int a2, char *a3, char a4)\n{\n  int v6; // eax\n  unsigned int v7; // ebx\n  int *v8; // r14\n  char *v10; // rax\n  char *v11; // rbx\n  int v12; // r12d\n  char dest[312]; // [rsp+10h] [rbp-138h] BYREF\n\n  v6 = symlinkat(a1, a2, a3);\n  v7 = v6;\n  if ( a4 == 1 )\n  {\n    if ( v6 )\n    {\n      v8 = __errno_location();\n      if ( *v8 == 17 )\n      {\n        v10 = (char *)sub_409E00(a3, dest);\n        v11 = v10;\n        if ( !v10 )\n          return (unsigned int)-1;\n        if ( (unsigned int)sub_40FB10(v10) )\n        {\n          v12 = *v8;\n        }\n        else\n        {\n          if ( !renameat(a2, v11, a2, a3) )\n          {\n            if ( v11 != dest )\n              free(v11);\n            return 1;\n          }\n          v12 = *v8;\n          unlinkat(a2, v11, 0);\n        }\n        if ( v11 != dest )\n          free(v11);\n        if ( v12 )\n        {\n          *v8 = v12;\n          return (unsigned int)-1;\n        }\n        return 1;\n      }\n    }\n  }\n  return v7;\n}\n"
        },
        {
            "funcName": "sub_40A0D0",
            "funcStartAddr": "0x40a0d0",
            "funcEndAddr": "0x40a15a",
            "decompiledFuncCode": "__int64 __fastcall sub_40A0D0(__int64 a1, __int64 a2, __int64 a3)\n{\n  unsigned int v4; // eax\n  unsigned int v5; // ebx\n  __int64 v6; // r12\n  char *v7; // rbp\n  int *v8; // rax\n  const char *v10; // rbp\n  int *v11; // rax\n\n  v4 = sub_40D070();\n  v5 = v4;\n  if ( v4 == -2 )\n  {\n    v10 = (const char *)sub_40EC50(a1);\n    v11 = __errno_location();\n    error(0, *v11, \"%s\", v10);\n    return 4294967294LL;\n  }\n  else\n  {\n    if ( v4 == -1 )\n    {\n      v6 = sub_40EC50(a3);\n      v7 = dcgettext(0LL, \"preserving permissions for %s\", 5);\n      v8 = __errno_location();\n      error(0, *v8, v7, v6);\n    }\n    return v5;\n  }\n}\n"
        },
        {
            "funcName": "sub_40A160",
            "funcStartAddr": "0x40a160",
            "funcEndAddr": "0x40a1bc",
            "decompiledFuncCode": "__int64 __fastcall sub_40A160(__int64 a1, __int64 a2, __int64 a3)\n{\n  unsigned int v3; // ebx\n  __int64 v5; // r12\n  char *v6; // rbp\n  int *v7; // rax\n\n  v3 = sub_40D0B0(a1, a2, a3);\n  if ( v3 )\n  {\n    v5 = sub_40EC50(a1);\n    v6 = dcgettext(0LL, \"setting permissions for %s\", 5);\n    v7 = __errno_location();\n    error(0, *v7, v6, v5);\n  }\n  return v3;\n}\n"
        },
        {
            "funcName": "sub_40A1C0",
            "funcStartAddr": "0x40a1c0",
            "funcEndAddr": "0x40a2af",
            "decompiledFuncCode": "char *__fastcall sub_40A1C0(char *path, unsigned __int64 a2)\n{\n  size_t v2; // rbx\n  char *v3; // rax\n  char *v4; // rbp\n  ssize_t v5; // r12\n  char *v7; // rdi\n\n  v2 = a2 + 1;\n  if ( a2 >= 0x401 )\n    v2 = 1025LL;\n  while ( 2 )\n  {\n    v3 = (char *)malloc(v2);\n    v4 = v3;\n    if ( v3 )\n    {\n      while ( 1 )\n      {\n        v5 = readlink(path, v3, v2);\n        if ( v5 < 0 && *__errno_location() != 34 )\n        {\n          v7 = v4;\n          v4 = 0LL;\n          free(v7);\n          return v4;\n        }\n        if ( v2 > v5 )\n        {\n          v4[v5] = 0;\n          return v4;\n        }\n        free(v4);\n        if ( v2 > 0x3FFFFFFFFFFFFFFFLL )\n          break;\n        v2 *= 2LL;\n        v3 = (char *)malloc(v2);\n        v4 = v3;\n        if ( !v3 )\n          return v4;\n      }\n      if ( v2 <= 0x7FFFFFFFFFFFFFFELL )\n      {\n        v2 = 0x7FFFFFFFFFFFFFFFLL;\n        continue;\n      }\n      v4 = 0LL;\n      *__errno_location() = 12;\n    }\n    break;\n  }\n  return v4;\n}\n"
        },
        {
            "funcName": "sub_40A2B0",
            "funcStartAddr": "0x40a2b0",
            "funcEndAddr": "0x40a37e",
            "decompiledFuncCode": "char *__fastcall sub_40A2B0(char *path, __int64 a2)\n{\n  char *v3; // rbp\n  char *result; // rax\n  __int16 v5; // r14\n  char *v6; // r12\n  int *v7; // rax\n  int *v8; // r15\n  unsigned __int64 v9; // rdx\n  char *v10; // rsi\n\n  v3 = (char *)sub_40AD40(path);\n  result = (char *)sub_40ADA0(v3);\n  if ( (unsigned __int64)result > 0xE )\n  {\n    v5 = *(_WORD *)v3;\n    v6 = result;\n    *(_WORD *)v3 = 46;\n    v7 = __errno_location();\n    *v7 = 0;\n    v8 = v7;\n    result = (char *)pathconf(path, 3);\n    if ( (__int64)result >= 0 || (v9 = 255LL, !*v8) )\n      v9 = (unsigned __int64)result;\n    *(_WORD *)v3 = v5;\n    if ( (unsigned __int64)v6 > v9 )\n    {\n      v10 = &path[a2];\n      result = (char *)(&path[a2] - v3);\n      if ( (unsigned __int64)result >= v9 )\n        v10 = &v3[v9 - 1];\n      else\n        v9 = (unsigned __int64)(result + 1);\n      *v10 = 126;\n      v3[v9] = 0;\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40A380",
            "funcStartAddr": "0x40a380",
            "funcEndAddr": "0x40a3d4",
            "decompiledFuncCode": "void __fastcall sub_40A380(char *a1)\n{\n  char *v1; // rbx\n\n  v1 = a1;\n  if ( (a1 || (v1 = getenv(\"SIMPLE_BACKUP_SUFFIX\")) != 0LL) && *v1 && (char *)sub_40AD40(v1) == v1 )\n    src = v1;\n  else\n    src = \"~\";\n}\n"
        },
        {
            "funcName": "sub_40A3E0",
            "funcStartAddr": "0x40a3e0",
            "funcEndAddr": "0x40a8a1",
            "decompiledFuncCode": "char *__fastcall sub_40A3E0(_BYTE *a1, int a2, char a3)\n{\n  const char *v3; // r14\n  size_t v4; // rax\n  signed __int64 v5; // r14\n  const char *v6; // rdi\n  size_t v7; // rax\n  bool v8; // cf\n  __int64 v9; // rbx\n  __int64 v10; // rsi\n  __int64 v11; // rax\n  char *v12; // r15\n  DIR *v13; // r12\n  char *v14; // rbx\n  __int64 v15; // r13\n  int v16; // ebp\n  struct dirent *v17; // rax\n  char *d_name; // rbx\n  char *v19; // rbx\n  unsigned __int64 v20; // rcx\n  unsigned __int8 v21; // r8\n  int i; // eax\n  int v23; // eax\n  __int64 v24; // rdx\n  __int64 v25; // rax\n  char *v26; // rax\n  char *v27; // r8\n  char *v28; // rax\n  char *v29; // rax\n  char v30; // dl\n  char *v31; // rax\n  int v32; // eax\n  char *v33; // rcx\n  int v34; // edx\n  int *v35; // rax\n  int v36; // ebp\n  int *v37; // rbx\n  void *v38; // rdi\n  __int16 v40; // ax\n  void *v41; // rdi\n  _BOOL4 v42; // ebp\n  __int64 v43; // [rsp+8h] [rbp-90h]\n  unsigned __int8 v45; // [rsp+18h] [rbp-80h]\n  unsigned __int64 v46; // [rsp+18h] [rbp-80h]\n  unsigned __int64 v47; // [rsp+18h] [rbp-80h]\n  __int16 v48; // [rsp+18h] [rbp-80h]\n  size_t v49; // [rsp+20h] [rbp-78h]\n  unsigned __int64 size; // [rsp+28h] [rbp-70h]\n  unsigned __int64 v53; // [rsp+48h] [rbp-50h]\n  unsigned __int64 v54; // [rsp+50h] [rbp-48h]\n  __int64 v55; // [rsp+50h] [rbp-48h]\n  char *v56; // [rsp+50h] [rbp-48h]\n  size_t v57; // [rsp+58h] [rbp-40h]\n\n  v3 = (const char *)sub_40AD40(a1);\n  v4 = strlen(v3);\n  v5 = v3 - a1;\n  v6 = src;\n  v43 = v5 + v4;\n  if ( !src )\n  {\n    sub_40A380(src);\n    v6 = src;\n  }\n  v7 = strlen(v6) + 1;\n  v8 = v7 < 9;\n  v9 = v43 + 1;\n  v57 = v7;\n  v10 = v7;\n  v11 = 9LL;\n  if ( !v8 )\n    v11 = v10;\n  v53 = v9 + v11;\n  v12 = (char *)malloc(v9 + v11);\n  if ( v12 )\n  {\n    v13 = 0LL;\n    while ( 1 )\n    {\n      memcpy(v12, a1, v43 + 1);\n      if ( a2 == 1 )\n      {\n        memcpy(&v12[v43], src, v57);\n        goto LABEL_33;\n      }\n      v14 = &v12[v5];\n      v15 = sub_40ADA0(&v12[v5]);\n      if ( v13 )\n        break;\n      v40 = *(_WORD *)v14;\n      *(_WORD *)v14 = 46;\n      v48 = v40;\n      v13 = (DIR *)sub_40ABC0(v12);\n      if ( v13 )\n      {\n        *(_WORD *)v14 = v48;\n        strcpy(&v14[v15], \".~1~\");\nLABEL_10:\n        v16 = 2;\n        v49 = 1LL;\n        size = v53;\n        while ( 1 )\n        {\n          v17 = readdir(v13);\n          if ( !v17 )\n            goto LABEL_30;\n          while ( 1 )\n          {\n            d_name = v17->d_name;\n            if ( strlen(v17->d_name) < v15 + 4 )\n              break;\n            if ( memcmp(&v12[v5], d_name, v15 + 2) )\n              break;\n            v19 = &d_name[v15 + 2];\n            if ( (unsigned __int8)(*v19 - 49) > 8u )\n              break;\n            v20 = 1LL;\n            v21 = *v19 == 57;\n            for ( i = v19[1]; (unsigned int)(i - 48) <= 9; i = v19[v20] )\n            {\n              ++v20;\n              v21 &= (_BYTE)i == 57;\n            }\n            if ( (_BYTE)i != 126 )\n              break;\n            if ( v19[v20 + 1] )\n              break;\n            if ( v49 >= v20 )\n            {\n              v54 = v20;\n              v45 = v21;\n              if ( v49 != v20 )\n                break;\n              v23 = memcmp(&v12[v43 + 2], v19, v49);\n              v21 = v45;\n              v20 = v54;\n              if ( v23 > 0 )\n                break;\n            }\n            v24 = v21;\n            v16 = v21;\n            v49 = v21 + v20;\n            v25 = v43 + v49 + 4;\n            if ( v25 <= size )\n            {\n              v27 = v12;\n            }\n            else\n            {\n              if ( (v25 & 0x4000000000000000LL) != 0 || v25 < 0 )\n                size = v43 + v49 + 4;\n              else\n                size = 2 * v25;\n              v55 = v21;\n              v46 = v20;\n              v26 = (char *)realloc(v12, size);\n              v20 = v46;\n              v24 = v55;\n              v27 = v26;\n              if ( !v26 )\n                goto LABEL_49;\n            }\n            v56 = v27;\n            v47 = v20;\n            v28 = &v27[v43];\n            *(_WORD *)v28 = 32302;\n            v28[2] = 48;\n            v29 = (char *)memcpy(&v27[v43 + 2 + v24], v19, v20 + 2);\n            v30 = v29[v47 - 1];\n            v31 = &v29[v47 - 1];\n            if ( v30 == 57 )\n            {\n              do\n              {\n                *v31-- = 48;\n                v30 = *v31;\n              }\n              while ( *v31 == 57 );\n            }\n            v12 = v56;\n            *v31 = v30 + 1;\n            v17 = readdir(v13);\n            if ( !v17 )\n              goto LABEL_30;\n          }\n        }\n      }\n      v42 = *__errno_location() == 12;\n      *(_WORD *)v14 = v48;\n      v16 = v42 + 2;\n      strcpy(&v14[v15], \".~1~\");\nLABEL_30:\n      switch ( v16 )\n      {\n        case 2:\n          if ( a2 == 2 )\n          {\n            memcpy(&v12[v43], src, v57);\n            a2 = 1;\n          }\nLABEL_46:\n          sub_40A2B0(v12, v43);\n          break;\n        case 3:\nLABEL_49:\n          v41 = v12;\n          v12 = 0LL;\n          free(v41);\n          *__errno_location() = 12;\n          return v12;\n        case 1:\n          goto LABEL_46;\n      }\nLABEL_33:\n      if ( !a3 )\n        goto LABEL_53;\n      if ( !v13 || (v32 = dirfd(v13), v33 = &v12[v5], v34 = v32, v32 < 0) )\n      {\n        v33 = v12;\n        v34 = -100;\n        v5 = 0LL;\n      }\n      if ( !(unsigned int)sub_40EC70(-100, a1, v34, v33) )\n      {\nLABEL_53:\n        if ( v13 )\n          closedir(v13);\n        return v12;\n      }\n      v35 = __errno_location();\n      v36 = *v35;\n      if ( *v35 != 17 )\n      {\n        v37 = v35;\n        if ( v13 )\n          closedir(v13);\n        v38 = v12;\n        v12 = 0LL;\n        free(v38);\n        *v37 = v36;\n        return v12;\n      }\n    }\n    rewinddir(v13);\n    goto LABEL_10;\n  }\n  return v12;\n}\n"
        },
        {
            "funcName": "sub_40A8B0",
            "funcStartAddr": "0x40a8b0",
            "funcEndAddr": "0x40a8ba",
            "decompiledFuncCode": "char *__fastcall sub_40A8B0(_BYTE *a1, int a2)\n{\n  return sub_40A3E0(a1, a2, 1);\n}\n"
        },
        {
            "funcName": "sub_40A8C0",
            "funcStartAddr": "0x40a8c0",
            "funcEndAddr": "0x40a8ec",
            "decompiledFuncCode": "__int64 __fastcall sub_40A8C0(__int64 a1, __int64 a2)\n{\n  return (unsigned int)dword_419020[sub_412E60(a1, a2, off_419040, dword_419020, 4LL, off_61F4E0)];\n}\n"
        },
        {
            "funcName": "sub_40A8F0",
            "funcStartAddr": "0x40a8f0",
            "funcEndAddr": "0x40a90a",
            "decompiledFuncCode": "char *__fastcall sub_40A8F0(_BYTE *a1, __int64 a2)\n{\n  char *result; // rax\n  __int64 v3; // rdx\n\n  result = sub_40A3E0(a1, a2, 0);\n  if ( !result )\n    sub_411530(a1, a2, v3);\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40A930",
            "funcStartAddr": "0x40a930",
            "funcEndAddr": "0x40a971",
            "decompiledFuncCode": "__int64 __fastcall sub_40A930(void *a1, char *a2)\n{\n  char *v2; // rax\n\n  if ( !a2 || !*a2 )\n  {\n    v2 = getenv(\"VERSION_CONTROL\");\n    if ( !v2 || !*v2 )\n      return 2LL;\n    a2 = v2;\n    a1 = &unk_418FCD;\n  }\n  return sub_40A8C0((__int64)a1, (__int64)a2);\n}\n"
        },
        {
            "funcName": "sub_40A980",
            "funcStartAddr": "0x40a980",
            "funcEndAddr": "0x40a9f0",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40A980(unsigned __int64 a1, unsigned __int64 a2, unsigned __int64 a3)\n{\n  unsigned __int64 v4; // r8\n  unsigned __int64 v6; // r8\n  unsigned __int64 v7; // rax\n  unsigned __int64 v8; // rdx\n  unsigned __int64 v9; // rax\n\n  if ( a1 )\n  {\n    if ( a2 )\n    {\n      v6 = a2;\n      v7 = a1;\n      while ( 1 )\n      {\n        v8 = v7 % v6;\n        if ( !(v7 % v6) )\n          break;\n        v7 = v6;\n        v6 = v8;\n      }\n      v9 = a1 / v6;\n      v4 = a1 / v6 * a2;\n      if ( v9 * a2 <= a3 && v4 / a2 == v9 )\n        return v4;\n    }\n  }\n  else\n  {\n    a1 = 0x2000LL;\n    if ( a2 )\n      a1 = a2;\n  }\n  if ( a1 <= a3 )\n    return a1;\n  return a3;\n}\n"
        },
        {
            "funcName": "sub_40AA00",
            "funcStartAddr": "0x40aa00",
            "funcEndAddr": "0x40aafd",
            "decompiledFuncCode": "__int64 sub_40AA00()\n{\n  FILE *v0; // rbx\n  int v2; // eax\n  FILE *v3; // rdi\n  char *v4; // rax\n  __int64 v5; // rbx\n  const char *v6; // r12\n  int *v7; // rax\n  int *v8; // rbp\n  const char *v9; // rax\n  int v10; // eax\n\n  v0 = stdin;\n  if ( sub_411B90(stdin) )\n  {\n    v10 = sub_411BC0(v0, 0LL, 1LL);\n    v3 = stdin;\n    if ( v10 || (v2 = sub_411B50(stdin), v3 = stdin, !v2) )\n    {\n      if ( !(unsigned int)sub_412F20(v3) )\n        return sub_40AB20();\n    }\n    else\n    {\n      sub_412F20(stdin);\n    }\nLABEL_6:\n    v4 = dcgettext(0LL, \"error closing file\", 5);\n    v5 = qword_6219A8;\n    v6 = v4;\n    v7 = __errno_location();\n    v8 = v7;\n    if ( v5 )\n    {\n      v9 = (const char *)sub_40EAA0(v5);\n      error(0, *v8, \"%s: %s\", v9, v6);\n    }\n    else\n    {\n      error(0, *v7, \"%s\", v6);\n    }\n    sub_40AB20();\n    _exit(status);\n  }\n  if ( (unsigned int)sub_412F20(v0) )\n    goto LABEL_6;\n  return sub_40AB20();\n}\n"
        },
        {
            "funcName": "sub_40AB20",
            "funcStartAddr": "0x40ab20",
            "funcEndAddr": "0x40abbe",
            "decompiledFuncCode": "__int64 sub_40AB20()\n{\n  int *v0; // rax\n  int *v1; // rbx\n  __int64 result; // rax\n  char *v3; // rax\n  const char *v4; // rbp\n  const char *v5; // rax\n\n  if ( (unsigned int)sub_412F20(stdout) )\n  {\n    v0 = __errno_location();\n    v1 = v0;\n    if ( !byte_6219B0 || *v0 != 32 )\n    {\n      v3 = dcgettext(0LL, \"write error\", 5);\n      v4 = v3;\n      if ( qword_6219B8 )\n      {\n        v5 = (const char *)sub_40EAA0(qword_6219B8);\n        error(0, *v1, \"%s: %s\", v5, v4);\n      }\n      else\n      {\n        error(0, *v1, \"%s\", v3);\n      }\nLABEL_8:\n      _exit(status);\n    }\n  }\n  result = sub_412F20(stderr);\n  if ( (_DWORD)result )\n    goto LABEL_8;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40ABC0",
            "funcStartAddr": "0x40abc0",
            "funcEndAddr": "0x40ac56",
            "decompiledFuncCode": "DIR *__fastcall sub_40ABC0(const char *a1)\n{\n  DIR *v1; // rax\n  DIR *v2; // rbx\n  unsigned int v3; // eax\n  int v4; // ecx\n  int v5; // r8d\n  int v6; // r9d\n  int v8; // r12d\n  int *v9; // rax\n  int *v10; // rbp\n  int v11; // r14d\n  DIR *v12; // r13\n  DIR *v13; // rax\n\n  v1 = opendir(a1);\n  v2 = v1;\n  if ( !v1 )\n    return v2;\n  v3 = dirfd(v1);\n  if ( v3 > 2 )\n    return v2;\n  v8 = sub_411A10(v3, 1030, 3, v4, v5, v6);\n  v9 = __errno_location();\n  v10 = v9;\n  if ( v8 >= 0 )\n  {\n    v13 = fdopendir(v8);\n    v11 = *v10;\n    v12 = v13;\n    if ( !v13 )\n      close(v8);\n  }\n  else\n  {\n    v11 = *v9;\n    v12 = 0LL;\n  }\n  closedir(v2);\n  *v10 = v11;\n  return v12;\n}\n"
        },
        {
            "funcName": "sub_40AC60",
            "funcStartAddr": "0x40ac60",
            "funcEndAddr": "0x40ac78",
            "decompiledFuncCode": "__int64 __fastcall sub_40AC60(void *a1, __int64 a2)\n{\n  __int64 result; // rax\n  __int64 v3; // rdx\n\n  result = sub_40ACE0(a1);\n  if ( !result )\n    sub_411530(a1, a2, v3);\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40AC80",
            "funcStartAddr": "0x40ac80",
            "funcEndAddr": "0x40acdd",
            "decompiledFuncCode": "__int64 __fastcall sub_40AC80(_BYTE *a1)\n{\n  unsigned __int64 v1; // rbp\n  __int64 v2; // rax\n  __int64 v3; // rdx\n\n  v1 = *a1 == 47;\n  v2 = sub_40AD40(a1);\n  if ( v2 - (__int64)a1 <= v1 )\n    return v2 - (_QWORD)a1;\n  v3 = v2 - (_QWORD)a1 - 1;\n  if ( *(_BYTE *)(v2 - 1) != 47 )\n    return v2 - (_QWORD)a1;\n  while ( v1 != v3 && a1[v3 - 1] == 47 )\n    --v3;\n  return v3;\n}\n"
        },
        {
            "funcName": "sub_40ACE0",
            "funcStartAddr": "0x40ace0",
            "funcEndAddr": "0x40ad3a",
            "decompiledFuncCode": "_BYTE *__fastcall sub_40ACE0(_BYTE *src)\n{\n  __int64 v1; // rbx\n  _BYTE *v2; // rax\n  _BYTE *v3; // rcx\n  _BYTE *v4; // rax\n\n  v1 = sub_40AC80(src);\n  v2 = malloc(v1 + (v1 == 0) + 1);\n  v3 = v2;\n  if ( v2 )\n  {\n    v4 = memcpy(v2, src, v1);\n    v3 = v4;\n    if ( !v1 )\n    {\n      *v4 = 46;\n      v1 = 1LL;\n    }\n    v4[v1] = 0;\n  }\n  return v3;\n}\n"
        },
        {
            "funcName": "sub_40AD40",
            "funcStartAddr": "0x40ad40",
            "funcEndAddr": "0x40ad9b",
            "decompiledFuncCode": "_BYTE *__fastcall sub_40AD40(_BYTE *a1)\n{\n  char v1; // dl\n  _BYTE *result; // rax\n  _BYTE *v3; // rcx\n  char v4; // si\n\n  v1 = *a1;\n  for ( result = a1; *result == 47; v1 = *result )\n    ++result;\n  if ( v1 )\n  {\n    v3 = result;\n    v4 = 0;\n    do\n    {\n      while ( v1 == 47 )\n      {\n        v1 = *++v3;\n        v4 = 1;\n        if ( !*v3 )\n          return result;\n      }\n      if ( v4 )\n      {\n        result = v3;\n        v4 = 0;\n      }\n      v1 = *++v3;\n    }\n    while ( *v3 );\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40ADA0",
            "funcStartAddr": "0x40ada0",
            "funcEndAddr": "0x40adcb",
            "decompiledFuncCode": "size_t __fastcall sub_40ADA0(const char *a1)\n{\n  size_t result; // rax\n  size_t v2; // rdx\n\n  result = strlen(a1);\n  if ( result > 1 )\n  {\n    do\n    {\n      v2 = result - 1;\n      if ( a1[result - 1] != 47 )\n        break;\n      --result;\n    }\n    while ( v2 != 1 );\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "thunk_40add0",
            "funcStartAddr": "0x40add0",
            "funcEndAddr": "0x40add5",
            "decompiledFuncCode": "// attributes: thunk\nint j__posix_fadvise(int fd, off_t offset, off_t len, int advise)\n{\n  return posix_fadvise(fd, offset, len, advise);\n}\n"
        },
        {
            "funcName": "sub_40AE10",
            "funcStartAddr": "0x40ae10",
            "funcEndAddr": "0x40ae5a",
            "decompiledFuncCode": "__int64 __fastcall sub_40AE10(const char *a1, char a2, unsigned int a3)\n{\n  __int64 v3; // rdx\n  int v4; // eax\n\n  v3 = 0LL;\n  if ( (a2 & 0x40) != 0 )\n    v3 = a3;\n  v4 = open(a1, a2, v3);\n  return sub_40FCF0(v4);\n}\n"
        },
        {
            "funcName": "sub_40AE60",
            "funcStartAddr": "0x40ae60",
            "funcEndAddr": "0x40aee6",
            "decompiledFuncCode": "void __fastcall sub_40AE60(__int64 a1, void *a2, _QWORD *a3)\n{\n  _QWORD *v4; // rbx\n  __int64 v5; // rax\n  __int64 v6; // rdx\n\n  if ( a1 )\n  {\n    v4 = (_QWORD *)sub_4112E0(24LL);\n    *v4 = sub_411510(a2);\n    v4[1] = a3[1];\n    v4[2] = *a3;\n    v5 = sub_40C2F0(a1, v4);\n    if ( !v5 )\n      sub_411530(a1, v4, v6);\n    if ( v4 != (_QWORD *)v5 )\n      sub_40C5C0(v4);\n  }\n}\n"
        },
        {
            "funcName": "sub_40AEF0",
            "funcStartAddr": "0x40aef0",
            "funcEndAddr": "0x40af2b",
            "decompiledFuncCode": "bool __fastcall sub_40AEF0(__int64 a1, __int64 a2, __int64 *a3)\n{\n  __int64 v3; // rax\n  __int64 v5[5]; // [rsp+0h] [rbp-28h] BYREF\n\n  if ( !a1 )\n    return 0;\n  v3 = a3[1];\n  v5[0] = a2;\n  v5[1] = v3;\n  v5[2] = *a3;\n  return sub_40B8E0(a1, v5) != 0;\n}\n"
        },
        {
            "funcName": "sub_40AF30",
            "funcStartAddr": "0x40af30",
            "funcEndAddr": "0x40b0a3",
            "decompiledFuncCode": "__int64 __fastcall sub_40AF30(__int16 a1, __int64 a2)\n{\n  char v2; // al\n  int v3; // edx\n  int v4; // eax\n  char v5; // al\n  int v6; // eax\n  char v7; // al\n  int v8; // eax\n  __int64 result; // rax\n\n  v2 = 45;\n  v3 = a1 & 0xF000;\n  if ( v3 != 0x8000 )\n  {\n    v2 = 100;\n    if ( v3 != 0x4000 )\n    {\n      v2 = 98;\n      if ( v3 != 24576 )\n      {\n        v2 = 99;\n        if ( v3 != 0x2000 )\n        {\n          v2 = 108;\n          if ( v3 != 40960 )\n          {\n            v2 = 112;\n            if ( v3 != 4096 )\n            {\n              v2 = 115;\n              if ( v3 != 49152 )\n                v2 = 63;\n            }\n          }\n        }\n      }\n    }\n  }\n  *(_BYTE *)a2 = v2;\n  *(_BYTE *)(a2 + 1) = (a1 & 0x100) == 0 ? 45 : 114;\n  *(_BYTE *)(a2 + 2) = (a1 & 0x80) == 0 ? 45 : 119;\n  v4 = -((a1 & 0x40) == 0);\n  if ( (a1 & 0x800) != 0 )\n    v5 = (v4 & 0xE0) + 115;\n  else\n    v5 = (v4 & 0xB5) + 120;\n  *(_BYTE *)(a2 + 3) = v5;\n  *(_BYTE *)(a2 + 4) = (a1 & 0x20) == 0 ? 45 : 114;\n  *(_BYTE *)(a2 + 5) = (a1 & 0x10) == 0 ? 45 : 119;\n  v6 = -((a1 & 8) == 0);\n  if ( (a1 & 0x400) != 0 )\n    v7 = (v6 & 0xE0) + 115;\n  else\n    v7 = (v6 & 0xB5) + 120;\n  *(_BYTE *)(a2 + 6) = v7;\n  *(_BYTE *)(a2 + 7) = (a1 & 4) == 0 ? 45 : 114;\n  *(_BYTE *)(a2 + 8) = (a1 & 2) == 0 ? 45 : 119;\n  v8 = -((a1 & 1) == 0);\n  if ( (a1 & 0x200) != 0 )\n    *(_BYTE *)(a2 + 9) = (v8 & 0xE0) + 116;\n  else\n    *(_BYTE *)(a2 + 9) = (v8 & 0xB5) + 120;\n  result = 32LL;\n  *(_WORD *)(a2 + 10) = 32;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40B0C0",
            "funcStartAddr": "0x40b0c0",
            "funcEndAddr": "0x40b0d8",
            "decompiledFuncCode": "__int64 __fastcall sub_40B0C0(void *a1, void *a2)\n{\n  __int64 result; // rax\n  __int64 v3; // rdx\n\n  result = sub_40B0E0(a1, a2);\n  if ( !result )\n    sub_411530(a1, a2, v3);\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40B0E0",
            "funcStartAddr": "0x40b0e0",
            "funcEndAddr": "0x40b1b9",
            "decompiledFuncCode": "void *__fastcall sub_40B0E0(_BYTE *src, const char *a2, _QWORD *a3)\n{\n  const char *v3; // r12\n  const char *v4; // r14\n  size_t v5; // rax\n  _BOOL8 v6; // rbx\n  size_t v7; // rbp\n  size_t v8; // r14\n  void *v9; // rax\n  void *v10; // r15\n  _BYTE *v11; // rax\n  char *v12; // rdi\n  char v15; // [rsp+Fh] [rbp-39h]\n\n  v3 = a2;\n  v4 = sub_40AD40(src);\n  v5 = sub_40ADA0(v4);\n  v6 = v5;\n  v7 = v5 + v4 - src;\n  if ( v5 )\n    v6 = v4[v5 - 1] != 47;\n  v15 = *a2;\n  if ( *a2 == 47 )\n  {\n    do\n      ++v3;\n    while ( *v3 == 47 );\n  }\n  v8 = strlen(v3);\n  v9 = malloc(v8 + v6 + v7 + 1);\n  v10 = v9;\n  if ( v9 )\n  {\n    v11 = mempcpy(v9, src, v7);\n    *v11 = 47;\n    v12 = &v11[v6];\n    if ( a3 )\n      *a3 = &v12[-(v15 == 47)];\n    *(_BYTE *)mempcpy(v12, v3, v8) = 0;\n  }\n  return v10;\n}\n"
        },
        {
            "funcName": "sub_40B1C0",
            "funcStartAddr": "0x40b1c0",
            "funcEndAddr": "0x40b236",
            "decompiledFuncCode": "__int64 __fastcall sub_40B1C0(int fd, char *buf, size_t nbytes)\n{\n  size_t v4; // rbx\n  __int64 v5; // r12\n  __int64 v6; // rax\n\n  if ( !nbytes )\n    return 0LL;\n  v4 = nbytes;\n  v5 = 0LL;\n  do\n  {\n    v6 = sub_40EEC0(fd, buf, v4);\n    if ( v6 == -1 )\n      break;\n    if ( !v6 )\n    {\n      *__errno_location() = 0;\n      return v5;\n    }\n    v5 += v6;\n    buf += v6;\n    v4 -= v6;\n  }\n  while ( v4 );\n  return v5;\n}\n"
        },
        {
            "funcName": "sub_40B240",
            "funcStartAddr": "0x40b240",
            "funcEndAddr": "0x40b2b6",
            "decompiledFuncCode": "__int64 __fastcall sub_40B240(int fd, char *buf, size_t n)\n{\n  size_t v4; // rbx\n  __int64 v5; // r12\n  __int64 v6; // rax\n\n  if ( !n )\n    return 0LL;\n  v4 = n;\n  v5 = 0LL;\n  do\n  {\n    v6 = sub_40EF20(fd, buf, v4);\n    if ( v6 == -1 )\n      break;\n    if ( !v6 )\n    {\n      *__errno_location() = 28;\n      return v5;\n    }\n    v5 += v6;\n    buf += v6;\n    v4 -= v6;\n  }\n  while ( v4 );\n  return v5;\n}\n"
        },
        {
            "funcName": "sub_40B2C0",
            "funcStartAddr": "0x40b2c0",
            "funcEndAddr": "0x40b353",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40B2C0(unsigned __int64 a1)\n{\n  __int64 v1; // rsi\n  unsigned __int64 v2; // rsi\n  unsigned __int64 v3; // rax\n  __int64 v4; // r8\n  unsigned __int64 v5; // rdi\n  unsigned __int64 v6; // rcx\n\n  v1 = 10LL;\n  if ( a1 >= 0xA )\n    v1 = a1;\n  v2 = v1 | 1;\n  if ( v2 != -1LL )\n  {\n    while ( 1 )\n    {\n      v3 = v2 % 3;\n      if ( v2 <= 9 )\n        goto LABEL_9;\n      if ( v2 % 3 )\n        break;\nLABEL_10:\n      v2 += 2LL;\n      if ( v2 == -1LL )\n        return v2;\n    }\n    v4 = 16LL;\n    v5 = 9LL;\n    v6 = 3LL;\n    while ( 1 )\n    {\n      v6 += 2LL;\n      v5 += v4;\n      v3 = v2 % v6;\n      if ( v5 >= v2 )\n        break;\n      v4 += 8LL;\n      if ( !(v2 % v6) )\n        goto LABEL_10;\n    }\nLABEL_9:\n    if ( v3 )\n      return v2;\n    goto LABEL_10;\n  }\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_40B360",
            "funcStartAddr": "0x40b360",
            "funcEndAddr": "0x40b370",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40B360(__int64 a1, unsigned __int64 a2)\n{\n  return __ROR8__(a1, 3) % a2;\n}\n"
        },
        {
            "funcName": "sub_40B370",
            "funcStartAddr": "0x40b370",
            "funcEndAddr": "0x40b377",
            "decompiledFuncCode": "bool __fastcall sub_40B370(__int64 a1, __int64 a2)\n{\n  return a1 == a2;\n}\n"
        },
        {
            "funcName": "sub_40B380",
            "funcStartAddr": "0x403010",
            "funcEndAddr": "0x403015",
            "decompiledFuncCode": "__int64 __fastcall sub_40B380(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v2; // rax\n\n  v2 = (*(__int64 (__fastcall **)(__int64, _QWORD))(a1 + 48))(a2, *(_QWORD *)(a1 + 16));\n  if ( *(_QWORD *)(a1 + 16) <= v2 )\n    abort();\n  return *(_QWORD *)a1 + 16 * v2;\n}\n\n__int64 __fastcall sub_40B380(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v2; // rax\n\n  v2 = (*(__int64 (__fastcall **)(__int64, _QWORD))(a1 + 48))(a2, *(_QWORD *)(a1 + 16));\n  if ( *(_QWORD *)(a1 + 16) <= v2 )\n    abort();\n  return *(_QWORD *)a1 + 16 * v2;\n}\n"
        },
        {
            "funcName": "sub_40B380",
            "funcStartAddr": "0x403010",
            "funcEndAddr": "0x403015",
            "decompiledFuncCode": "__int64 __fastcall sub_40B380(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v2; // rax\n\n  v2 = (*(__int64 (__fastcall **)(__int64, _QWORD))(a1 + 48))(a2, *(_QWORD *)(a1 + 16));\n  if ( *(_QWORD *)(a1 + 16) <= v2 )\n    abort();\n  return *(_QWORD *)a1 + 16 * v2;\n}\n\n__int64 __fastcall sub_40B380(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v2; // rax\n\n  v2 = (*(__int64 (__fastcall **)(__int64, _QWORD))(a1 + 48))(a2, *(_QWORD *)(a1 + 16));\n  if ( *(_QWORD *)(a1 + 16) <= v2 )\n    abort();\n  return *(_QWORD *)a1 + 16 * v2;\n}\n"
        },
        {
            "funcName": "sub_40B3B0",
            "funcStartAddr": "0x40b3b0",
            "funcEndAddr": "0x40b4c9",
            "decompiledFuncCode": "__int64 __fastcall sub_40B3B0(__int64 a1, __int64 a2, __m128i **a3, char a4)\n{\n  __m128i *v7; // rax\n  __int64 v8; // rsi\n  __m128i *v9; // rbx\n  __int64 *v10; // rax\n  const __m128i *v12; // rax\n\n  v7 = (__m128i *)sub_40B380(a1, a2);\n  *a3 = v7;\n  v8 = v7->m128i_i64[0];\n  if ( v7->m128i_i64[0] )\n  {\n    v9 = v7;\n    if ( v8 != a2 )\n    {\n      if ( !(*(unsigned __int8 (__fastcall **)(__int64))(a1 + 56))(a2) )\n      {\n        v10 = (__int64 *)v9->m128i_i64[1];\n        if ( v10 )\n        {\n          v8 = *v10;\n          if ( a2 != *v10 )\n          {\n            while ( !(*(unsigned __int8 (__fastcall **)(__int64))(a1 + 56))(a2) )\n            {\n              v9 = (__m128i *)v9->m128i_i64[1];\n              v10 = (__int64 *)v9->m128i_i64[1];\n              if ( !v10 )\n                return 0LL;\n              v8 = *v10;\n              if ( *v10 == a2 )\n                goto LABEL_11;\n            }\n            v10 = (__int64 *)v9->m128i_i64[1];\n            v8 = *v10;\n          }\nLABEL_11:\n          if ( a4 )\n          {\n            v9->m128i_i64[1] = v10[1];\n            *v10 = 0LL;\n            v10[1] = *(_QWORD *)(a1 + 72);\n            *(_QWORD *)(a1 + 72) = v10;\n          }\n          return v8;\n        }\n        return 0LL;\n      }\n      v8 = v9->m128i_i64[0];\n    }\n    if ( a4 )\n    {\n      v12 = (const __m128i *)v9->m128i_i64[1];\n      if ( v12 )\n      {\n        *v9 = _mm_loadu_si128(v12);\n        v12->m128i_i64[0] = 0LL;\n        v12->m128i_i64[1] = *(_QWORD *)(a1 + 72);\n        *(_QWORD *)(a1 + 72) = v12;\n        return v8;\n      }\n      v9->m128i_i64[0] = 0LL;\n    }\n    return v8;\n  }\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_40B4D0",
            "funcStartAddr": "0x40b4d0",
            "funcEndAddr": "0x40b54e",
            "decompiledFuncCode": "__int64 __fastcall sub_40B4D0(float **a1)\n{\n  float *v1; // rax\n  float v2; // xmm0_4\n  float v3; // xmm1_4\n  float v4; // xmm2_4\n  __int64 result; // rax\n\n  v1 = *a1;\n  if ( *a1 == (float *)&unk_419120 )\n    return 1LL;\n  v2 = v1[2];\n  if ( v2 <= 0.1\n    || v2 >= 0.89999998\n    || v1[3] <= 1.1\n    || *v1 < 0.0\n    || (v3 = *v1 + 0.1, v4 = v1[1], v4 <= v3)\n    || v4 > 1.0\n    || (result = 1LL, v2 <= v3) )\n  {\n    *a1 = (float *)&unk_419120;\n    return 0LL;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40B550",
            "funcStartAddr": "0x40b550",
            "funcEndAddr": "0x40b69a",
            "decompiledFuncCode": "__int64 __fastcall sub_40B550(__int64 a1, __int64 a2, char a3)\n{\n  __int64 *v4; // r12\n  __int64 v5; // r15\n  __int64 *v6; // rbx\n  __int64 v7; // r15\n  _QWORD *v8; // rax\n  __int64 *v9; // rdx\n  _QWORD *v10; // rax\n  _QWORD *v11; // rbx\n  _QWORD *v12; // rax\n  __int64 v13; // rdx\n\n  v4 = *(__int64 **)a2;\n  if ( *(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) )\n    return 1LL;\n  while ( 1 )\n  {\n    while ( 1 )\n    {\n      v5 = *v4;\n      if ( *v4 )\n      {\n        v6 = (__int64 *)v4[1];\n        if ( v6 )\n        {\n          do\n          {\n            while ( 1 )\n            {\n              v7 = *v6;\n              v8 = (_QWORD *)sub_40B380(a1, *v6);\n              v9 = (__int64 *)v6[1];\n              if ( !*v8 )\n                break;\n              v6[1] = v8[1];\n              v8[1] = v6;\n              v6 = v9;\n              if ( !v9 )\n                goto LABEL_10;\n            }\n            *v8 = v7;\n            ++*(_QWORD *)(a1 + 24);\n            *v6 = 0LL;\n            v6[1] = *(_QWORD *)(a1 + 72);\n            *(_QWORD *)(a1 + 72) = v6;\n            v6 = v9;\n          }\n          while ( v9 );\nLABEL_10:\n          v5 = *v4;\n        }\n        v4[1] = 0LL;\n        if ( !a3 )\n          break;\n      }\n      v4 += 2;\n      if ( *(_QWORD *)(a2 + 8) <= (unsigned __int64)v4 )\n        return 1LL;\n    }\n    v10 = (_QWORD *)sub_40B380(a1, v5);\n    v11 = v10;\n    if ( !*v10 )\n    {\n      *v10 = v5;\n      ++*(_QWORD *)(a1 + 24);\n      goto LABEL_16;\n    }\n    v12 = *(_QWORD **)(a1 + 72);\n    if ( !v12 )\n      break;\n    *(_QWORD *)(a1 + 72) = v12[1];\nLABEL_15:\n    v13 = v11[1];\n    *v12 = v5;\n    v12[1] = v13;\n    v11[1] = v12;\nLABEL_16:\n    *v4 = 0LL;\n    v4 += 2;\n    --*(_QWORD *)(a2 + 24);\n    if ( *(_QWORD *)(a2 + 8) <= (unsigned __int64)v4 )\n      return 1LL;\n  }\n  v12 = malloc(0x10uLL);\n  if ( v12 )\n    goto LABEL_15;\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_40B790",
            "funcStartAddr": "0x40b790",
            "funcEndAddr": "0x40b8d8",
            "decompiledFuncCode": "__int64 __fastcall sub_40B790(__int64 a1, __int64 a2)\n{\n  unsigned __int64 v3; // rbx\n  __int64 v4; // rcx\n  __int64 v5; // r12\n  __int64 v6; // r13\n  _QWORD *v7; // rsi\n  unsigned __int64 i; // rdi\n  __int64 v9; // rax\n  unsigned __int64 j; // rdx\n  double v11; // xmm0_8\n  double v12; // xmm1_8\n\n  v3 = 0LL;\n  v4 = *(_QWORD *)(a1 + 32);\n  v5 = *(_QWORD *)(a1 + 16);\n  v6 = *(_QWORD *)(a1 + 24);\n  v7 = *(_QWORD **)a1;\n  for ( i = *(_QWORD *)(a1 + 8); (unsigned __int64)v7 < i; v7 += 2 )\n  {\n    while ( !*v7 )\n    {\n      v7 += 2;\n      if ( (unsigned __int64)v7 >= i )\n        goto LABEL_10;\n    }\n    v9 = v7[1];\n    for ( j = 1LL; v9; ++j )\n      v9 = *(_QWORD *)(v9 + 8);\n    if ( v3 < j )\n      v3 = j;\n  }\nLABEL_10:\n  __fprintf_chk(a2, 1LL, \"# entries:         %lu\\n\", v4);\n  __fprintf_chk(a2, 1LL, \"# buckets:         %lu\\n\", v5);\n  if ( v6 < 0 )\n  {\n    v11 = ((double)(int)(v6 & 1 | ((unsigned __int64)v6 >> 1)) + (double)(int)(v6 & 1 | ((unsigned __int64)v6 >> 1)))\n        * 100.0;\n    if ( v5 >= 0 )\n      goto LABEL_12;\nLABEL_15:\n    v12 = (double)(int)(v5 & 1 | ((unsigned __int64)v5 >> 1)) + (double)(int)(v5 & 1 | ((unsigned __int64)v5 >> 1));\n    goto LABEL_13;\n  }\n  v11 = (double)(int)v6 * 100.0;\n  if ( v5 < 0 )\n    goto LABEL_15;\nLABEL_12:\n  v12 = (double)(int)v5;\nLABEL_13:\n  __fprintf_chk(a2, 1LL, \"# buckets used:    %lu (%.2f%%)\\n\", v6, v11 / v12);\n  return __fprintf_chk(a2, 1LL, \"max bucket length: %lu\\n\", v3);\n}\n"
        },
        {
            "funcName": "sub_40B8E0",
            "funcStartAddr": "0x40b8e0",
            "funcEndAddr": "0x40b933",
            "decompiledFuncCode": "__int64 __fastcall sub_40B8E0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbp\n  _QWORD *v3; // rax\n  __int64 v4; // rsi\n  _QWORD *v5; // rbx\n\n  v2 = a2;\n  v3 = (_QWORD *)sub_40B380(a1, a2);\n  v4 = *v3;\n  if ( !*v3 )\n    return 0LL;\n  v5 = v3;\n  while ( v4 != v2 )\n  {\n    if ( (*(unsigned __int8 (__fastcall **)(__int64))(a1 + 56))(v2) )\n      return *v5;\n    v5 = (_QWORD *)v5[1];\n    if ( !v5 )\n      return 0LL;\n    v4 = *v5;\n  }\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_40B990",
            "funcStartAddr": "0x40b990",
            "funcEndAddr": "0x40b9fa",
            "decompiledFuncCode": "__int64 __fastcall sub_40B990(__int64 a1, __int64 a2)\n{\n  _QWORD *v2; // rcx\n  _QWORD *v3; // rdx\n  __int64 v4; // rax\n  __int64 result; // rax\n\n  v2 = (_QWORD *)sub_40B380(a1, a2);\n  v3 = v2;\n  while ( 1 )\n  {\n    v4 = *v3;\n    v3 = (_QWORD *)v3[1];\n    if ( v4 == a2 )\n      break;\n    if ( !v3 )\n      goto LABEL_7;\n  }\n  if ( v3 )\n    return *v3;\nLABEL_7:\n  while ( 1 )\n  {\n    v2 += 2;\n    if ( *(_QWORD *)(a1 + 8) <= (unsigned __int64)v2 )\n      break;\n    result = *v2;\n    if ( *v2 )\n      return result;\n  }\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_40BA70",
            "funcStartAddr": "0x40ba70",
            "funcEndAddr": "0x40bae8",
            "decompiledFuncCode": "__int64 __fastcall sub_40BA70(__int64 a1, unsigned __int8 (__fastcall *a2)(__int64, __int64), __int64 a3)\n{\n  __int64 *v3; // r14\n  __int64 v6; // rbp\n  __int64 v7; // rdi\n  __int64 *v9; // rbx\n\n  v3 = *(__int64 **)a1;\n  if ( *(_QWORD *)(a1 + 8) <= *(_QWORD *)a1 )\n    return 0LL;\n  v6 = 0LL;\n  while ( 1 )\n  {\n    v7 = *v3;\n    if ( *v3 )\n      break;\nLABEL_4:\n    v3 += 2;\n    if ( *(_QWORD *)(a1 + 8) <= (unsigned __int64)v3 )\n      return v6;\n  }\n  v9 = v3;\n  while ( a2(v7, a3) )\n  {\n    v9 = (__int64 *)v9[1];\n    ++v6;\n    if ( !v9 )\n      goto LABEL_4;\n    v7 = *v9;\n  }\n  return v6;\n}\n"
        },
        {
            "funcName": "sub_40BB50",
            "funcStartAddr": "0x40bb50",
            "funcEndAddr": "0x40bcda",
            "decompiledFuncCode": "_QWORD *__fastcall sub_40BB50(\n        __int64 a1,\n        __int64 a2,\n        unsigned __int64 (__fastcall *a3)(__int64 a1, unsigned __int64 a2),\n        bool (__fastcall *a4)(__int64 a1, __int64 a2),\n        __int64 a5)\n{\n  bool (__fastcall *v6)(__int64, __int64); // r13\n  unsigned __int64 (__fastcall *v7)(__int64, unsigned __int64); // r12\n  char *v9; // rax\n  _QWORD *v10; // rbx\n  float **v11; // rdi\n  unsigned __int64 v12; // rbp\n  char *v13; // rax\n  void *v14; // rdi\n  float v16; // xmm1_4\n  float v17; // xmm0_4\n  float v18; // xmm0_4\n\n  v6 = a4;\n  v7 = a3;\n  if ( !a3 )\n    v7 = sub_40B360;\n  if ( !a4 )\n    v6 = sub_40B370;\n  v9 = (char *)malloc(0x50uLL);\n  v10 = v9;\n  if ( v9 )\n  {\n    v11 = (float **)(v9 + 40);\n    if ( a2 )\n    {\n      *((_QWORD *)v9 + 5) = a2;\n      if ( !(unsigned __int8)sub_40B4D0(v11) )\n        goto LABEL_14;\n      if ( *(_BYTE *)(a2 + 16) )\n      {\nLABEL_9:\n        v12 = sub_40B2C0(a1);\n        if ( (v12 & 0x1000000000000000LL) == 0 && !(v12 >> 61) )\n        {\n          v10[2] = v12;\n          if ( v12 )\n          {\n            v13 = (char *)calloc(v12, 0x10uLL);\n            *v10 = v13;\n            if ( v13 )\n            {\n              v10[3] = 0LL;\n              v10[4] = 0LL;\n              v10[1] = &v13[16 * v12];\n              v10[6] = v7;\n              v10[7] = v6;\n              v10[8] = a5;\n              v10[9] = 0LL;\n              return v10;\n            }\n          }\n        }\nLABEL_14:\n        v14 = v10;\n        v10 = 0LL;\n        free(v14);\n        return v10;\n      }\n      v16 = *(float *)(a2 + 8);\n      if ( a1 < 0 )\n        goto LABEL_23;\n    }\n    else\n    {\n      *((_QWORD *)v9 + 5) = &unk_419120;\n      v16 = 0.80000001;\n      if ( !(unsigned __int8)sub_40B4D0(v11) )\n        goto LABEL_14;\n      if ( a1 < 0 )\n      {\nLABEL_23:\n        v17 = (float)(a1 & 1 | (unsigned int)((unsigned __int64)a1 >> 1))\n            + (float)(a1 & 1 | (unsigned int)((unsigned __int64)a1 >> 1));\n        goto LABEL_19;\n      }\n    }\n    v17 = (float)(int)a1;\nLABEL_19:\n    v18 = v17 / v16;\n    if ( v18 >= 1.8446744e19 )\n      goto LABEL_14;\n    if ( v18 < 9.223372e18 )\n      a1 = (unsigned int)(int)v18;\n    else\n      a1 = (unsigned int)(int)(float)(v18 - 9.223372e18) ^ 0x8000000000000000LL;\n    goto LABEL_9;\n  }\n  return v10;\n}\n"
        },
        {
            "funcName": "sub_40BCE0",
            "funcStartAddr": "0x40bce0",
            "funcEndAddr": "0x40bd88",
            "decompiledFuncCode": "void __fastcall sub_40BCE0(_QWORD *a1)\n{\n  _QWORD *v1; // r12\n  _QWORD *v2; // rbx\n  void (__fastcall *v3)(_QWORD); // rax\n  _QWORD *v4; // rdx\n  __int64 v5; // rcx\n\n  v1 = (_QWORD *)*a1;\n  if ( *a1 < a1[1] )\n  {\n    do\n    {\n      while ( !*v1 )\n      {\n        v1 += 2;\n        if ( a1[1] <= (unsigned __int64)v1 )\n          goto LABEL_12;\n      }\n      v2 = (_QWORD *)v1[1];\n      v3 = (void (__fastcall *)(_QWORD))a1[8];\n      if ( v2 )\n      {\n        do\n        {\n          if ( v3 )\n          {\n            v3(*v2);\n            v3 = (void (__fastcall *)(_QWORD))a1[8];\n          }\n          v4 = (_QWORD *)v2[1];\n          v5 = a1[9];\n          *v2 = 0LL;\n          v2[1] = v5;\n          a1[9] = v2;\n          v2 = v4;\n        }\n        while ( v4 );\n      }\n      if ( v3 )\n        v3(*v1);\n      *v1 = 0LL;\n      v1 += 2;\n      *(v1 - 1) = 0LL;\n    }\n    while ( a1[1] > (unsigned __int64)v1 );\n  }\nLABEL_12:\n  a1[3] = 0LL;\n  a1[4] = 0LL;\n}\n"
        },
        {
            "funcName": "sub_40BD90",
            "funcStartAddr": "0x40bd90",
            "funcEndAddr": "0x40be66",
            "decompiledFuncCode": "void __fastcall sub_40BD90(_QWORD *ptr)\n{\n  _QWORD *v2; // rbp\n  unsigned __int64 v3; // rax\n  _QWORD *v4; // rbx\n  _QWORD *v5; // rdi\n  _QWORD *v6; // rbx\n  _QWORD *v7; // rdi\n  _QWORD *v8; // rbx\n\n  v2 = (_QWORD *)*ptr;\n  v3 = ptr[1];\n  if ( ptr[8] && ptr[4] )\n  {\n    if ( (unsigned __int64)v2 >= v3 )\n      goto LABEL_15;\n    do\n    {\n      while ( !*v2 )\n      {\n        v2 += 2;\n        if ( v3 <= (unsigned __int64)v2 )\n          goto LABEL_10;\n      }\n      v4 = v2;\n      do\n      {\n        ((void (*)(void))ptr[8])();\n        v4 = (_QWORD *)v4[1];\n      }\n      while ( v4 );\n      v3 = ptr[1];\n      v2 += 2;\n    }\n    while ( v3 > (unsigned __int64)v2 );\nLABEL_10:\n    v2 = (_QWORD *)*ptr;\n  }\n  if ( (unsigned __int64)v2 < v3 )\n  {\n    do\n    {\n      v5 = (_QWORD *)v2[1];\n      if ( v5 )\n      {\n        do\n        {\n          v6 = (_QWORD *)v5[1];\n          free(v5);\n          v5 = v6;\n        }\n        while ( v6 );\n      }\n      v2 += 2;\n    }\n    while ( ptr[1] > (unsigned __int64)v2 );\n  }\nLABEL_15:\n  v7 = (_QWORD *)ptr[9];\n  if ( v7 )\n  {\n    do\n    {\n      v8 = (_QWORD *)v7[1];\n      free(v7);\n      v7 = v8;\n    }\n    while ( v8 );\n  }\n  free((void *)*ptr);\n  free(ptr);\n}\n"
        },
        {
            "funcName": "sub_40BE70",
            "funcStartAddr": "0x40301a",
            "funcEndAddr": "0x40301f",
            "decompiledFuncCode": "__int64 __fastcall sub_40BE70(__int64 a1, __int64 a2)\n{\n  __int64 v2; // r12\n  float v3; // xmm0_4\n  float v4; // xmm0_4\n  unsigned __int64 v5; // rbx\n  _BOOL8 v6; // rax\n  void *v7; // rax\n  __int64 v8; // rbx\n  __int64 v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // rax\n  unsigned int v12; // ebx\n  void *ptr; // [rsp+0h] [rbp-68h] BYREF\n  __int64 v15; // [rsp+8h] [rbp-60h]\n  unsigned __int64 v16; // [rsp+10h] [rbp-58h]\n  __int64 v17; // [rsp+18h] [rbp-50h]\n  __int64 v18; // [rsp+20h] [rbp-48h]\n  __int64 v19; // [rsp+28h] [rbp-40h]\n  __int64 v20; // [rsp+30h] [rbp-38h]\n  __int64 v21; // [rsp+38h] [rbp-30h]\n  __int64 v22; // [rsp+40h] [rbp-28h]\n  __int64 v23; // [rsp+48h] [rbp-20h]\n\n  v2 = *(_QWORD *)(a1 + 40);\n  if ( !*(_BYTE *)(v2 + 16) )\n  {\n    if ( a2 < 0 )\n      v3 = (float)(a2 & 1 | (unsigned int)((unsigned __int64)a2 >> 1))\n         + (float)(a2 & 1 | (unsigned int)((unsigned __int64)a2 >> 1));\n    else\n      v3 = (float)(int)a2;\n    v4 = v3 / *(float *)(v2 + 8);\n    if ( v4 >= 1.8446744e19 )\n      return 0;\n    if ( v4 < 9.223372e18 )\n      a2 = (unsigned int)(int)v4;\n    else\n      a2 = (unsigned int)(int)(float)(v4 - 9.223372e18) ^ 0x8000000000000000LL;\n  }\n  v5 = sub_40B2C0(a2);\n  v6 = v5 >> 61 != 0;\n  if ( (v5 & 0x1000000000000000LL) != 0 )\n    v6 = 1LL;\n  if ( !v5 || v6 )\n    return 0;\n  if ( *(_QWORD *)(a1 + 16) == v5 )\n    return 1LL;\n  v7 = calloc(v5, 0x10uLL);\n  ptr = v7;\n  if ( !v7 )\n    return 0;\n  v16 = v5;\n  v8 = (__int64)v7 + 16 * v5;\n  v9 = *(_QWORD *)(a1 + 48);\n  v17 = 0LL;\n  v15 = v8;\n  v20 = v9;\n  v10 = *(_QWORD *)(a1 + 56);\n  v18 = 0LL;\n  v21 = v10;\n  v11 = *(_QWORD *)(a1 + 64);\n  v19 = v2;\n  v22 = v11;\n  v23 = *(_QWORD *)(a1 + 72);\n  v12 = sub_40B550((__int64)&ptr, a1, 0);\n  if ( (_BYTE)v12 )\n  {\n    free(*(void **)a1);\n    *(_QWORD *)a1 = ptr;\n    *(_QWORD *)(a1 + 8) = v15;\n    *(_QWORD *)(a1 + 16) = v16;\n    *(_QWORD *)(a1 + 24) = v17;\n    *(_QWORD *)(a1 + 72) = v23;\n    return v12;\n  }\n  *(_QWORD *)(a1 + 72) = v23;\n  if ( !(unsigned __int8)sub_40B550(a1, (__int64)&ptr, 1) || !(unsigned __int8)sub_40B550(a1, (__int64)&ptr, 0) )\n    abort();\n  free(ptr);\n  return v12;\n}\n\n__int64 __fastcall sub_40BE70(__int64 a1, __int64 a2)\n{\n  __int64 v2; // r12\n  float v3; // xmm0_4\n  float v4; // xmm0_4\n  unsigned __int64 v5; // rbx\n  _BOOL8 v6; // rax\n  void *v7; // rax\n  __int64 v8; // rbx\n  __int64 v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // rax\n  unsigned int v12; // ebx\n  void *ptr; // [rsp+0h] [rbp-68h] BYREF\n  __int64 v15; // [rsp+8h] [rbp-60h]\n  unsigned __int64 v16; // [rsp+10h] [rbp-58h]\n  __int64 v17; // [rsp+18h] [rbp-50h]\n  __int64 v18; // [rsp+20h] [rbp-48h]\n  __int64 v19; // [rsp+28h] [rbp-40h]\n  __int64 v20; // [rsp+30h] [rbp-38h]\n  __int64 v21; // [rsp+38h] [rbp-30h]\n  __int64 v22; // [rsp+40h] [rbp-28h]\n  __int64 v23; // [rsp+48h] [rbp-20h]\n\n  v2 = *(_QWORD *)(a1 + 40);\n  if ( !*(_BYTE *)(v2 + 16) )\n  {\n    if ( a2 < 0 )\n      v3 = (float)(a2 & 1 | (unsigned int)((unsigned __int64)a2 >> 1))\n         + (float)(a2 & 1 | (unsigned int)((unsigned __int64)a2 >> 1));\n    else\n      v3 = (float)(int)a2;\n    v4 = v3 / *(float *)(v2 + 8);\n    if ( v4 >= 1.8446744e19 )\n      return 0;\n    if ( v4 < 9.223372e18 )\n      a2 = (unsigned int)(int)v4;\n    else\n      a2 = (unsigned int)(int)(float)(v4 - 9.223372e18) ^ 0x8000000000000000LL;\n  }\n  v5 = sub_40B2C0(a2);\n  v6 = v5 >> 61 != 0;\n  if ( (v5 & 0x1000000000000000LL) != 0 )\n    v6 = 1LL;\n  if ( !v5 || v6 )\n    return 0;\n  if ( *(_QWORD *)(a1 + 16) == v5 )\n    return 1LL;\n  v7 = calloc(v5, 0x10uLL);\n  ptr = v7;\n  if ( !v7 )\n    return 0;\n  v16 = v5;\n  v8 = (__int64)v7 + 16 * v5;\n  v9 = *(_QWORD *)(a1 + 48);\n  v17 = 0LL;\n  v15 = v8;\n  v20 = v9;\n  v10 = *(_QWORD *)(a1 + 56);\n  v18 = 0LL;\n  v21 = v10;\n  v11 = *(_QWORD *)(a1 + 64);\n  v19 = v2;\n  v22 = v11;\n  v23 = *(_QWORD *)(a1 + 72);\n  v12 = sub_40B550((__int64)&ptr, a1, 0);\n  if ( (_BYTE)v12 )\n  {\n    free(*(void **)a1);\n    *(_QWORD *)a1 = ptr;\n    *(_QWORD *)(a1 + 8) = v15;\n    *(_QWORD *)(a1 + 16) = v16;\n    *(_QWORD *)(a1 + 24) = v17;\n    *(_QWORD *)(a1 + 72) = v23;\n    return v12;\n  }\n  *(_QWORD *)(a1 + 72) = v23;\n  if ( !(unsigned __int8)sub_40B550(a1, (__int64)&ptr, 1) || !(unsigned __int8)sub_40B550(a1, (__int64)&ptr, 0) )\n    abort();\n  free(ptr);\n  return v12;\n}\n"
        },
        {
            "funcName": "sub_40BE70",
            "funcStartAddr": "0x40301a",
            "funcEndAddr": "0x40301f",
            "decompiledFuncCode": "__int64 __fastcall sub_40BE70(__int64 a1, __int64 a2)\n{\n  __int64 v2; // r12\n  float v3; // xmm0_4\n  float v4; // xmm0_4\n  unsigned __int64 v5; // rbx\n  _BOOL8 v6; // rax\n  void *v7; // rax\n  __int64 v8; // rbx\n  __int64 v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // rax\n  unsigned int v12; // ebx\n  void *ptr; // [rsp+0h] [rbp-68h] BYREF\n  __int64 v15; // [rsp+8h] [rbp-60h]\n  unsigned __int64 v16; // [rsp+10h] [rbp-58h]\n  __int64 v17; // [rsp+18h] [rbp-50h]\n  __int64 v18; // [rsp+20h] [rbp-48h]\n  __int64 v19; // [rsp+28h] [rbp-40h]\n  __int64 v20; // [rsp+30h] [rbp-38h]\n  __int64 v21; // [rsp+38h] [rbp-30h]\n  __int64 v22; // [rsp+40h] [rbp-28h]\n  __int64 v23; // [rsp+48h] [rbp-20h]\n\n  v2 = *(_QWORD *)(a1 + 40);\n  if ( !*(_BYTE *)(v2 + 16) )\n  {\n    if ( a2 < 0 )\n      v3 = (float)(a2 & 1 | (unsigned int)((unsigned __int64)a2 >> 1))\n         + (float)(a2 & 1 | (unsigned int)((unsigned __int64)a2 >> 1));\n    else\n      v3 = (float)(int)a2;\n    v4 = v3 / *(float *)(v2 + 8);\n    if ( v4 >= 1.8446744e19 )\n      return 0;\n    if ( v4 < 9.223372e18 )\n      a2 = (unsigned int)(int)v4;\n    else\n      a2 = (unsigned int)(int)(float)(v4 - 9.223372e18) ^ 0x8000000000000000LL;\n  }\n  v5 = sub_40B2C0(a2);\n  v6 = v5 >> 61 != 0;\n  if ( (v5 & 0x1000000000000000LL) != 0 )\n    v6 = 1LL;\n  if ( !v5 || v6 )\n    return 0;\n  if ( *(_QWORD *)(a1 + 16) == v5 )\n    return 1LL;\n  v7 = calloc(v5, 0x10uLL);\n  ptr = v7;\n  if ( !v7 )\n    return 0;\n  v16 = v5;\n  v8 = (__int64)v7 + 16 * v5;\n  v9 = *(_QWORD *)(a1 + 48);\n  v17 = 0LL;\n  v15 = v8;\n  v20 = v9;\n  v10 = *(_QWORD *)(a1 + 56);\n  v18 = 0LL;\n  v21 = v10;\n  v11 = *(_QWORD *)(a1 + 64);\n  v19 = v2;\n  v22 = v11;\n  v23 = *(_QWORD *)(a1 + 72);\n  v12 = sub_40B550((__int64)&ptr, a1, 0);\n  if ( (_BYTE)v12 )\n  {\n    free(*(void **)a1);\n    *(_QWORD *)a1 = ptr;\n    *(_QWORD *)(a1 + 8) = v15;\n    *(_QWORD *)(a1 + 16) = v16;\n    *(_QWORD *)(a1 + 24) = v17;\n    *(_QWORD *)(a1 + 72) = v23;\n    return v12;\n  }\n  *(_QWORD *)(a1 + 72) = v23;\n  if ( !(unsigned __int8)sub_40B550(a1, (__int64)&ptr, 1) || !(unsigned __int8)sub_40B550(a1, (__int64)&ptr, 0) )\n    abort();\n  free(ptr);\n  return v12;\n}\n\n__int64 __fastcall sub_40BE70(__int64 a1, __int64 a2)\n{\n  __int64 v2; // r12\n  float v3; // xmm0_4\n  float v4; // xmm0_4\n  unsigned __int64 v5; // rbx\n  _BOOL8 v6; // rax\n  void *v7; // rax\n  __int64 v8; // rbx\n  __int64 v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // rax\n  unsigned int v12; // ebx\n  void *ptr; // [rsp+0h] [rbp-68h] BYREF\n  __int64 v15; // [rsp+8h] [rbp-60h]\n  unsigned __int64 v16; // [rsp+10h] [rbp-58h]\n  __int64 v17; // [rsp+18h] [rbp-50h]\n  __int64 v18; // [rsp+20h] [rbp-48h]\n  __int64 v19; // [rsp+28h] [rbp-40h]\n  __int64 v20; // [rsp+30h] [rbp-38h]\n  __int64 v21; // [rsp+38h] [rbp-30h]\n  __int64 v22; // [rsp+40h] [rbp-28h]\n  __int64 v23; // [rsp+48h] [rbp-20h]\n\n  v2 = *(_QWORD *)(a1 + 40);\n  if ( !*(_BYTE *)(v2 + 16) )\n  {\n    if ( a2 < 0 )\n      v3 = (float)(a2 & 1 | (unsigned int)((unsigned __int64)a2 >> 1))\n         + (float)(a2 & 1 | (unsigned int)((unsigned __int64)a2 >> 1));\n    else\n      v3 = (float)(int)a2;\n    v4 = v3 / *(float *)(v2 + 8);\n    if ( v4 >= 1.8446744e19 )\n      return 0;\n    if ( v4 < 9.223372e18 )\n      a2 = (unsigned int)(int)v4;\n    else\n      a2 = (unsigned int)(int)(float)(v4 - 9.223372e18) ^ 0x8000000000000000LL;\n  }\n  v5 = sub_40B2C0(a2);\n  v6 = v5 >> 61 != 0;\n  if ( (v5 & 0x1000000000000000LL) != 0 )\n    v6 = 1LL;\n  if ( !v5 || v6 )\n    return 0;\n  if ( *(_QWORD *)(a1 + 16) == v5 )\n    return 1LL;\n  v7 = calloc(v5, 0x10uLL);\n  ptr = v7;\n  if ( !v7 )\n    return 0;\n  v16 = v5;\n  v8 = (__int64)v7 + 16 * v5;\n  v9 = *(_QWORD *)(a1 + 48);\n  v17 = 0LL;\n  v15 = v8;\n  v20 = v9;\n  v10 = *(_QWORD *)(a1 + 56);\n  v18 = 0LL;\n  v21 = v10;\n  v11 = *(_QWORD *)(a1 + 64);\n  v19 = v2;\n  v22 = v11;\n  v23 = *(_QWORD *)(a1 + 72);\n  v12 = sub_40B550((__int64)&ptr, a1, 0);\n  if ( (_BYTE)v12 )\n  {\n    free(*(void **)a1);\n    *(_QWORD *)a1 = ptr;\n    *(_QWORD *)(a1 + 8) = v15;\n    *(_QWORD *)(a1 + 16) = v16;\n    *(_QWORD *)(a1 + 24) = v17;\n    *(_QWORD *)(a1 + 72) = v23;\n    return v12;\n  }\n  *(_QWORD *)(a1 + 72) = v23;\n  if ( !(unsigned __int8)sub_40B550(a1, (__int64)&ptr, 1) || !(unsigned __int8)sub_40B550(a1, (__int64)&ptr, 0) )\n    abort();\n  free(ptr);\n  return v12;\n}\n"
        },
        {
            "funcName": "sub_40C070",
            "funcStartAddr": "0x40301f",
            "funcEndAddr": "0x403024",
            "decompiledFuncCode": "__int64 __fastcall sub_40C070(__int64 a1, __int64 a2, __int64 *a3)\n{\n  __int64 v5; // rdx\n  __int64 result; // rax\n  __int64 v7; // rax\n  __int64 v8; // rdx\n  float v9; // xmm1_4\n  __int64 v10; // rax\n  __m128i *v11; // r12\n  _QWORD *v12; // rax\n  __int64 v13; // rdx\n  int v14; // edx\n  float v15; // xmm1_4\n  __int64 v16; // rdx\n  __int64 v17; // rax\n  float v18; // xmm2_4\n  float v19; // xmm0_4\n  __int64 v20; // rax\n  float v21; // xmm1_4\n  float v22; // xmm0_4\n  __int64 v23; // rcx\n  __int64 v24; // rcx\n  __int64 v25; // rsi\n  __m128i *v26[4]; // [rsp+8h] [rbp-20h] BYREF\n\n  if ( !a2 )\n    goto LABEL_35;\n  v5 = sub_40B3B0(a1, a2, v26, 0);\n  if ( !v5 )\n  {\n    v7 = *(_QWORD *)(a1 + 24);\n    if ( v7 < 0 )\n    {\n      v14 = v7 & 1 | ((unsigned __int64)v7 >> 1);\n      v10 = *(_QWORD *)(a1 + 16);\n      v15 = (float)v14;\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = v15 + v15;\n      if ( v10 >= 0 )\n      {\nLABEL_8:\n        if ( v9 <= (float)((float)(int)v10 * *(float *)(v8 + 8)) )\n          goto LABEL_9;\nLABEL_15:\n        sub_40B4D0((float **)(a1 + 40));\n        v16 = *(_QWORD *)(a1 + 40);\n        v17 = *(_QWORD *)(a1 + 16);\n        v18 = *(float *)(v16 + 8);\n        if ( v17 < 0 )\n        {\n          v24 = *(_QWORD *)(a1 + 16) & 1LL | (*(_QWORD *)(a1 + 16) >> 1);\n          v19 = (float)(int)v24 + (float)(int)v24;\n        }\n        else\n        {\n          v19 = (float)(int)v17;\n        }\n        v20 = *(_QWORD *)(a1 + 24);\n        if ( v20 < 0 )\n        {\n          v23 = *(_QWORD *)(a1 + 24) & 1LL | (*(_QWORD *)(a1 + 24) >> 1);\n          v21 = (float)(int)v23 + (float)(int)v23;\n        }\n        else\n        {\n          v21 = (float)(int)v20;\n        }\n        if ( v21 <= (float)(v18 * v19) )\n          goto LABEL_9;\n        v22 = v19 * *(float *)(v16 + 12);\n        if ( !*(_BYTE *)(v16 + 16) )\n          v22 = v22 * v18;\n        if ( v22 >= 1.8446744e19 )\n          return 0xFFFFFFFFLL;\n        v25 = v22 >= 9.223372e18\n            ? (unsigned int)(int)(float)(v22 - 9.223372e18) ^ 0x8000000000000000LL\n            : (unsigned int)(int)v22;\n        if ( !(unsigned __int8)sub_40BE70(a1, v25) )\n          return 0xFFFFFFFFLL;\n        if ( !sub_40B3B0(a1, a2, v26, 0) )\n        {\nLABEL_9:\n          v11 = v26[0];\n          if ( !*(_QWORD *)v26[0] )\n          {\n            *(_QWORD *)v26[0] = a2;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            ++*(_QWORD *)(a1 + 24);\n            return result;\n          }\n          v12 = *(_QWORD **)(a1 + 72);\n          if ( v12 )\n          {\n            *(_QWORD *)(a1 + 72) = v12[1];\nLABEL_12:\n            v13 = v11->m128i_i64[1];\n            *v12 = a2;\n            v12[1] = v13;\n            v11->m128i_i64[1] = (__int64)v12;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            return result;\n          }\n          v12 = malloc(0x10uLL);\n          if ( v12 )\n            goto LABEL_12;\n          return 0xFFFFFFFFLL;\n        }\nLABEL_35:\n        abort();\n      }\n    }\n    else\n    {\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = (float)(int)v7;\n      v10 = *(_QWORD *)(a1 + 16);\n      if ( v10 >= 0 )\n        goto LABEL_8;\n    }\n    if ( v9 <= (float)((float)((float)(v10 & 1 | (unsigned int)((unsigned __int64)v10 >> 1))\n                             + (float)(v10 & 1 | (unsigned int)((unsigned __int64)v10 >> 1)))\n                     * *(float *)(v8 + 8)) )\n      goto LABEL_9;\n    goto LABEL_15;\n  }\n  result = 0LL;\n  if ( a3 )\n    *a3 = v5;\n  return result;\n}\n\n__int64 __fastcall sub_40C070(__int64 a1, __int64 a2, __int64 *a3)\n{\n  __int64 v5; // rdx\n  __int64 result; // rax\n  __int64 v7; // rax\n  __int64 v8; // rdx\n  float v9; // xmm1_4\n  __int64 v10; // rax\n  __m128i *v11; // r12\n  _QWORD *v12; // rax\n  __int64 v13; // rdx\n  int v14; // edx\n  float v15; // xmm1_4\n  __int64 v16; // rdx\n  __int64 v17; // rax\n  float v18; // xmm2_4\n  float v19; // xmm0_4\n  __int64 v20; // rax\n  float v21; // xmm1_4\n  float v22; // xmm0_4\n  __int64 v23; // rcx\n  __int64 v24; // rcx\n  __int64 v25; // rsi\n  __m128i *v26[4]; // [rsp+8h] [rbp-20h] BYREF\n\n  if ( !a2 )\n    goto LABEL_35;\n  v5 = sub_40B3B0(a1, a2, v26, 0);\n  if ( !v5 )\n  {\n    v7 = *(_QWORD *)(a1 + 24);\n    if ( v7 < 0 )\n    {\n      v14 = v7 & 1 | ((unsigned __int64)v7 >> 1);\n      v10 = *(_QWORD *)(a1 + 16);\n      v15 = (float)v14;\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = v15 + v15;\n      if ( v10 >= 0 )\n      {\nLABEL_8:\n        if ( v9 <= (float)((float)(int)v10 * *(float *)(v8 + 8)) )\n          goto LABEL_9;\nLABEL_15:\n        sub_40B4D0((float **)(a1 + 40));\n        v16 = *(_QWORD *)(a1 + 40);\n        v17 = *(_QWORD *)(a1 + 16);\n        v18 = *(float *)(v16 + 8);\n        if ( v17 < 0 )\n        {\n          v24 = *(_QWORD *)(a1 + 16) & 1LL | (*(_QWORD *)(a1 + 16) >> 1);\n          v19 = (float)(int)v24 + (float)(int)v24;\n        }\n        else\n        {\n          v19 = (float)(int)v17;\n        }\n        v20 = *(_QWORD *)(a1 + 24);\n        if ( v20 < 0 )\n        {\n          v23 = *(_QWORD *)(a1 + 24) & 1LL | (*(_QWORD *)(a1 + 24) >> 1);\n          v21 = (float)(int)v23 + (float)(int)v23;\n        }\n        else\n        {\n          v21 = (float)(int)v20;\n        }\n        if ( v21 <= (float)(v18 * v19) )\n          goto LABEL_9;\n        v22 = v19 * *(float *)(v16 + 12);\n        if ( !*(_BYTE *)(v16 + 16) )\n          v22 = v22 * v18;\n        if ( v22 >= 1.8446744e19 )\n          return 0xFFFFFFFFLL;\n        v25 = v22 >= 9.223372e18\n            ? (unsigned int)(int)(float)(v22 - 9.223372e18) ^ 0x8000000000000000LL\n            : (unsigned int)(int)v22;\n        if ( !(unsigned __int8)sub_40BE70(a1, v25) )\n          return 0xFFFFFFFFLL;\n        if ( !sub_40B3B0(a1, a2, v26, 0) )\n        {\nLABEL_9:\n          v11 = v26[0];\n          if ( !*(_QWORD *)v26[0] )\n          {\n            *(_QWORD *)v26[0] = a2;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            ++*(_QWORD *)(a1 + 24);\n            return result;\n          }\n          v12 = *(_QWORD **)(a1 + 72);\n          if ( v12 )\n          {\n            *(_QWORD *)(a1 + 72) = v12[1];\nLABEL_12:\n            v13 = v11->m128i_i64[1];\n            *v12 = a2;\n            v12[1] = v13;\n            v11->m128i_i64[1] = (__int64)v12;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            return result;\n          }\n          v12 = malloc(0x10uLL);\n          if ( v12 )\n            goto LABEL_12;\n          return 0xFFFFFFFFLL;\n        }\nLABEL_35:\n        abort();\n      }\n    }\n    else\n    {\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = (float)(int)v7;\n      v10 = *(_QWORD *)(a1 + 16);\n      if ( v10 >= 0 )\n        goto LABEL_8;\n    }\n    if ( v9 <= (float)((float)((float)(v10 & 1 | (unsigned int)((unsigned __int64)v10 >> 1))\n                             + (float)(v10 & 1 | (unsigned int)((unsigned __int64)v10 >> 1)))\n                     * *(float *)(v8 + 8)) )\n      goto LABEL_9;\n    goto LABEL_15;\n  }\n  result = 0LL;\n  if ( a3 )\n    *a3 = v5;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40C070",
            "funcStartAddr": "0x40301f",
            "funcEndAddr": "0x403024",
            "decompiledFuncCode": "__int64 __fastcall sub_40C070(__int64 a1, __int64 a2, __int64 *a3)\n{\n  __int64 v5; // rdx\n  __int64 result; // rax\n  __int64 v7; // rax\n  __int64 v8; // rdx\n  float v9; // xmm1_4\n  __int64 v10; // rax\n  __m128i *v11; // r12\n  _QWORD *v12; // rax\n  __int64 v13; // rdx\n  int v14; // edx\n  float v15; // xmm1_4\n  __int64 v16; // rdx\n  __int64 v17; // rax\n  float v18; // xmm2_4\n  float v19; // xmm0_4\n  __int64 v20; // rax\n  float v21; // xmm1_4\n  float v22; // xmm0_4\n  __int64 v23; // rcx\n  __int64 v24; // rcx\n  __int64 v25; // rsi\n  __m128i *v26[4]; // [rsp+8h] [rbp-20h] BYREF\n\n  if ( !a2 )\n    goto LABEL_35;\n  v5 = sub_40B3B0(a1, a2, v26, 0);\n  if ( !v5 )\n  {\n    v7 = *(_QWORD *)(a1 + 24);\n    if ( v7 < 0 )\n    {\n      v14 = v7 & 1 | ((unsigned __int64)v7 >> 1);\n      v10 = *(_QWORD *)(a1 + 16);\n      v15 = (float)v14;\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = v15 + v15;\n      if ( v10 >= 0 )\n      {\nLABEL_8:\n        if ( v9 <= (float)((float)(int)v10 * *(float *)(v8 + 8)) )\n          goto LABEL_9;\nLABEL_15:\n        sub_40B4D0((float **)(a1 + 40));\n        v16 = *(_QWORD *)(a1 + 40);\n        v17 = *(_QWORD *)(a1 + 16);\n        v18 = *(float *)(v16 + 8);\n        if ( v17 < 0 )\n        {\n          v24 = *(_QWORD *)(a1 + 16) & 1LL | (*(_QWORD *)(a1 + 16) >> 1);\n          v19 = (float)(int)v24 + (float)(int)v24;\n        }\n        else\n        {\n          v19 = (float)(int)v17;\n        }\n        v20 = *(_QWORD *)(a1 + 24);\n        if ( v20 < 0 )\n        {\n          v23 = *(_QWORD *)(a1 + 24) & 1LL | (*(_QWORD *)(a1 + 24) >> 1);\n          v21 = (float)(int)v23 + (float)(int)v23;\n        }\n        else\n        {\n          v21 = (float)(int)v20;\n        }\n        if ( v21 <= (float)(v18 * v19) )\n          goto LABEL_9;\n        v22 = v19 * *(float *)(v16 + 12);\n        if ( !*(_BYTE *)(v16 + 16) )\n          v22 = v22 * v18;\n        if ( v22 >= 1.8446744e19 )\n          return 0xFFFFFFFFLL;\n        v25 = v22 >= 9.223372e18\n            ? (unsigned int)(int)(float)(v22 - 9.223372e18) ^ 0x8000000000000000LL\n            : (unsigned int)(int)v22;\n        if ( !(unsigned __int8)sub_40BE70(a1, v25) )\n          return 0xFFFFFFFFLL;\n        if ( !sub_40B3B0(a1, a2, v26, 0) )\n        {\nLABEL_9:\n          v11 = v26[0];\n          if ( !*(_QWORD *)v26[0] )\n          {\n            *(_QWORD *)v26[0] = a2;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            ++*(_QWORD *)(a1 + 24);\n            return result;\n          }\n          v12 = *(_QWORD **)(a1 + 72);\n          if ( v12 )\n          {\n            *(_QWORD *)(a1 + 72) = v12[1];\nLABEL_12:\n            v13 = v11->m128i_i64[1];\n            *v12 = a2;\n            v12[1] = v13;\n            v11->m128i_i64[1] = (__int64)v12;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            return result;\n          }\n          v12 = malloc(0x10uLL);\n          if ( v12 )\n            goto LABEL_12;\n          return 0xFFFFFFFFLL;\n        }\nLABEL_35:\n        abort();\n      }\n    }\n    else\n    {\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = (float)(int)v7;\n      v10 = *(_QWORD *)(a1 + 16);\n      if ( v10 >= 0 )\n        goto LABEL_8;\n    }\n    if ( v9 <= (float)((float)((float)(v10 & 1 | (unsigned int)((unsigned __int64)v10 >> 1))\n                             + (float)(v10 & 1 | (unsigned int)((unsigned __int64)v10 >> 1)))\n                     * *(float *)(v8 + 8)) )\n      goto LABEL_9;\n    goto LABEL_15;\n  }\n  result = 0LL;\n  if ( a3 )\n    *a3 = v5;\n  return result;\n}\n\n__int64 __fastcall sub_40C070(__int64 a1, __int64 a2, __int64 *a3)\n{\n  __int64 v5; // rdx\n  __int64 result; // rax\n  __int64 v7; // rax\n  __int64 v8; // rdx\n  float v9; // xmm1_4\n  __int64 v10; // rax\n  __m128i *v11; // r12\n  _QWORD *v12; // rax\n  __int64 v13; // rdx\n  int v14; // edx\n  float v15; // xmm1_4\n  __int64 v16; // rdx\n  __int64 v17; // rax\n  float v18; // xmm2_4\n  float v19; // xmm0_4\n  __int64 v20; // rax\n  float v21; // xmm1_4\n  float v22; // xmm0_4\n  __int64 v23; // rcx\n  __int64 v24; // rcx\n  __int64 v25; // rsi\n  __m128i *v26[4]; // [rsp+8h] [rbp-20h] BYREF\n\n  if ( !a2 )\n    goto LABEL_35;\n  v5 = sub_40B3B0(a1, a2, v26, 0);\n  if ( !v5 )\n  {\n    v7 = *(_QWORD *)(a1 + 24);\n    if ( v7 < 0 )\n    {\n      v14 = v7 & 1 | ((unsigned __int64)v7 >> 1);\n      v10 = *(_QWORD *)(a1 + 16);\n      v15 = (float)v14;\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = v15 + v15;\n      if ( v10 >= 0 )\n      {\nLABEL_8:\n        if ( v9 <= (float)((float)(int)v10 * *(float *)(v8 + 8)) )\n          goto LABEL_9;\nLABEL_15:\n        sub_40B4D0((float **)(a1 + 40));\n        v16 = *(_QWORD *)(a1 + 40);\n        v17 = *(_QWORD *)(a1 + 16);\n        v18 = *(float *)(v16 + 8);\n        if ( v17 < 0 )\n        {\n          v24 = *(_QWORD *)(a1 + 16) & 1LL | (*(_QWORD *)(a1 + 16) >> 1);\n          v19 = (float)(int)v24 + (float)(int)v24;\n        }\n        else\n        {\n          v19 = (float)(int)v17;\n        }\n        v20 = *(_QWORD *)(a1 + 24);\n        if ( v20 < 0 )\n        {\n          v23 = *(_QWORD *)(a1 + 24) & 1LL | (*(_QWORD *)(a1 + 24) >> 1);\n          v21 = (float)(int)v23 + (float)(int)v23;\n        }\n        else\n        {\n          v21 = (float)(int)v20;\n        }\n        if ( v21 <= (float)(v18 * v19) )\n          goto LABEL_9;\n        v22 = v19 * *(float *)(v16 + 12);\n        if ( !*(_BYTE *)(v16 + 16) )\n          v22 = v22 * v18;\n        if ( v22 >= 1.8446744e19 )\n          return 0xFFFFFFFFLL;\n        v25 = v22 >= 9.223372e18\n            ? (unsigned int)(int)(float)(v22 - 9.223372e18) ^ 0x8000000000000000LL\n            : (unsigned int)(int)v22;\n        if ( !(unsigned __int8)sub_40BE70(a1, v25) )\n          return 0xFFFFFFFFLL;\n        if ( !sub_40B3B0(a1, a2, v26, 0) )\n        {\nLABEL_9:\n          v11 = v26[0];\n          if ( !*(_QWORD *)v26[0] )\n          {\n            *(_QWORD *)v26[0] = a2;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            ++*(_QWORD *)(a1 + 24);\n            return result;\n          }\n          v12 = *(_QWORD **)(a1 + 72);\n          if ( v12 )\n          {\n            *(_QWORD *)(a1 + 72) = v12[1];\nLABEL_12:\n            v13 = v11->m128i_i64[1];\n            *v12 = a2;\n            v12[1] = v13;\n            v11->m128i_i64[1] = (__int64)v12;\n            result = 1LL;\n            ++*(_QWORD *)(a1 + 32);\n            return result;\n          }\n          v12 = malloc(0x10uLL);\n          if ( v12 )\n            goto LABEL_12;\n          return 0xFFFFFFFFLL;\n        }\nLABEL_35:\n        abort();\n      }\n    }\n    else\n    {\n      v8 = *(_QWORD *)(a1 + 40);\n      v9 = (float)(int)v7;\n      v10 = *(_QWORD *)(a1 + 16);\n      if ( v10 >= 0 )\n        goto LABEL_8;\n    }\n    if ( v9 <= (float)((float)((float)(v10 & 1 | (unsigned int)((unsigned __int64)v10 >> 1))\n                             + (float)(v10 & 1 | (unsigned int)((unsigned __int64)v10 >> 1)))\n                     * *(float *)(v8 + 8)) )\n      goto LABEL_9;\n    goto LABEL_15;\n  }\n  result = 0LL;\n  if ( a3 )\n    *a3 = v5;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40C2F0",
            "funcStartAddr": "0x40c2f0",
            "funcEndAddr": "0x40c32b",
            "decompiledFuncCode": "__int64 __fastcall sub_40C2F0(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbx\n  int v3; // eax\n  __int64 v5; // [rsp+8h] [rbp-10h] BYREF\n\n  v2 = a2;\n  v3 = sub_40C070(a1, a2, &v5);\n  if ( v3 == -1 )\n    return 0LL;\n  if ( !v3 )\n    return v5;\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_40C330",
            "funcStartAddr": "0x40c330",
            "funcEndAddr": "0x40c507",
            "decompiledFuncCode": "__int64 __fastcall sub_40C330(__int64 a1, __int64 a2)\n{\n  __int64 v3; // rbp\n  __m128i *v4; // rax\n  __int64 v6; // rax\n  float *v7; // rdx\n  float v8; // xmm0_4\n  __int64 v9; // rax\n  float v10; // xmm1_4\n  __int64 v11; // rax\n  __int64 v12; // rdx\n  float v13; // xmm0_4\n  __int64 v14; // rax\n  float v15; // xmm1_4\n  float v16; // xmm0_4\n  __int64 v17; // rsi\n  _QWORD *v18; // rdi\n  _QWORD *v19; // r12\n  int v20; // edx\n  float v21; // xmm0_4\n  __int64 v22; // rcx\n  __int64 v23; // rcx\n  __m128i *v24; // [rsp+8h] [rbp-20h] BYREF\n\n  v3 = sub_40B3B0(a1, a2, &v24, 1);\n  if ( !v3 )\n    return v3;\n  v4 = v24;\n  --*(_QWORD *)(a1 + 32);\n  if ( v4->m128i_i64[0] )\n    return v3;\n  v6 = *(_QWORD *)(a1 + 24) - 1LL;\n  *(_QWORD *)(a1 + 24) = v6;\n  if ( v6 < 0 )\n  {\n    v20 = v6 & 1 | ((unsigned __int64)v6 >> 1);\n    v9 = *(_QWORD *)(a1 + 16);\n    v21 = (float)v20;\n    v7 = *(float **)(a1 + 40);\n    v8 = v21 + v21;\n    if ( v9 >= 0 )\n      goto LABEL_6;\nLABEL_22:\n    v10 = (float)(v9 & 1 | (unsigned int)((unsigned __int64)v9 >> 1))\n        + (float)(v9 & 1 | (unsigned int)((unsigned __int64)v9 >> 1));\n    goto LABEL_7;\n  }\n  v7 = *(float **)(a1 + 40);\n  v8 = (float)(int)v6;\n  v9 = *(_QWORD *)(a1 + 16);\n  if ( v9 < 0 )\n    goto LABEL_22;\nLABEL_6:\n  v10 = (float)(int)v9;\nLABEL_7:\n  if ( (float)(v10 * *v7) > v8 )\n  {\n    sub_40B4D0((float **)(a1 + 40));\n    v11 = *(_QWORD *)(a1 + 16);\n    v12 = *(_QWORD *)(a1 + 40);\n    if ( v11 < 0 )\n    {\n      v23 = *(_QWORD *)(a1 + 16) & 1LL | (*(_QWORD *)(a1 + 16) >> 1);\n      v13 = (float)(int)v23 + (float)(int)v23;\n    }\n    else\n    {\n      v13 = (float)(int)v11;\n    }\n    v14 = *(_QWORD *)(a1 + 24);\n    if ( v14 < 0 )\n    {\n      v22 = *(_QWORD *)(a1 + 24) & 1LL | (*(_QWORD *)(a1 + 24) >> 1);\n      v15 = (float)(int)v22 + (float)(int)v22;\n    }\n    else\n    {\n      v15 = (float)(int)v14;\n    }\n    if ( (float)(*(float *)v12 * v13) > v15 )\n    {\n      v16 = v13 * *(float *)(v12 + 4);\n      if ( !*(_BYTE *)(v12 + 16) )\n        v16 = v16 * *(float *)(v12 + 8);\n      if ( v16 >= 9.223372e18 )\n        v17 = (unsigned int)(int)(float)(v16 - 9.223372e18) ^ 0x8000000000000000LL;\n      else\n        v17 = (unsigned int)(int)v16;\n      if ( !(unsigned __int8)sub_40BE70(a1, v17) )\n      {\n        v18 = *(_QWORD **)(a1 + 72);\n        if ( v18 )\n        {\n          do\n          {\n            v19 = (_QWORD *)v18[1];\n            free(v18);\n            v18 = v19;\n          }\n          while ( v19 );\n        }\n        *(_QWORD *)(a1 + 72) = 0LL;\n      }\n    }\n  }\n  return v3;\n}\n"
        },
        {
            "funcName": "sub_40C510",
            "funcStartAddr": "0x40c510",
            "funcEndAddr": "0x40c537",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40C510(_QWORD *a1, unsigned __int64 a2)\n{\n  return (a1[1] ^ (unsigned __int64)sub_413020(*a1)) % a2;\n}\n"
        },
        {
            "funcName": "sub_40C540",
            "funcStartAddr": "0x40c540",
            "funcEndAddr": "0x40c54d",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40C540(__int64 a1, unsigned __int64 a2)\n{\n  return *(_QWORD *)(a1 + 8) % a2;\n}\n"
        },
        {
            "funcName": "sub_40C550",
            "funcStartAddr": "0x40c550",
            "funcEndAddr": "0x40c575",
            "decompiledFuncCode": "__int64 __fastcall sub_40C550(_QWORD *a1, _QWORD *a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6)\n{\n  if ( a1[1] == a2[1] && a1[2] == a2[2] )\n    return sub_40EF80(*a1, *a2, a3, a4, a5, a6);\n  else\n    return 0LL;\n}\n"
        },
        {
            "funcName": "sub_40C5C0",
            "funcStartAddr": "0x40c5c0",
            "funcEndAddr": "0x40c5d5",
            "decompiledFuncCode": "void __fastcall sub_40C5C0(void **ptr)\n{\n  free(*ptr);\n  free(ptr);\n}\n"
        },
        {
            "funcName": "sub_40C5E0",
            "funcStartAddr": "0x40c5e0",
            "funcEndAddr": "0x40c768",
            "decompiledFuncCode": "_BYTE *__fastcall sub_40C5E0(char *a1, __int64 a2, int (__fastcall *a3)(char *, char *, __int64), __int64 a4)\n{\n  char *v5; // r13\n  char *v6; // r12\n  char *v7; // rbp\n  char v8; // dl\n  bool v9; // r15\n  __int64 v10; // rdx\n  int v11; // r15d\n  int v12; // eax\n  int v13; // r13d\n  int *v15; // rax\n  bool v16; // [rsp+14h] [rbp-44h]\n\n  v5 = a1;\n  v6 = a1;\n  v7 = 0LL;\n  v16 = 0;\nLABEL_2:\n  while ( 1 )\n  {\n    v8 = *v6++;\n    if ( !v8 )\n      return (_BYTE *)(v5 - a1);\n    while ( *v6 != 47 )\n    {\n      v9 = *v6 != 0 && v8 == 47;\n      if ( !v9 || !v7 )\n        goto LABEL_2;\n      if ( v7 - v5 == 1 )\n      {\n        if ( *v5 == 46 )\n          goto LABEL_12;\n        *v7 = 0;\n      }\n      else\n      {\n        *v7 = 0;\n        if ( v7 - v5 == 2 && *v5 == 46 && v5[1] == 46 )\n        {\n          v11 = 0;\n          v16 = 0;\n          v10 = 0LL;\n          goto LABEL_10;\n        }\n      }\n      if ( a3(a1, v5, a4) < 0 )\n      {\n        v11 = *__errno_location();\n        v10 = v16;\n      }\n      else\n      {\n        v16 = v9;\n        v10 = 1LL;\n        v11 = 0;\n      }\nLABEL_10:\n      v12 = sub_40F520(a2, v5, v10, 0LL);\n      v13 = v12;\n      if ( v12 == -1 || (*v7 = 47, v12) )\n      {\n        if ( v11 )\n        {\n          v15 = __errno_location();\n          if ( *v15 == 2 )\n            *v15 = v11;\n        }\n        return (_BYTE *)v13;\n      }\nLABEL_12:\n      v5 = v6++;\n      v8 = *(v6 - 1);\n      if ( !v8 )\n        return (_BYTE *)(v5 - a1);\n    }\n    if ( v8 != 47 )\n      v7 = v6;\n  }\n}\n"
        },
        {
            "funcName": "sub_40C770",
            "funcStartAddr": "0x40c770",
            "funcEndAddr": "0x40ca78",
            "decompiledFuncCode": "__int64 __fastcall sub_40C770(\n        char *a1,\n        _DWORD *a2,\n        int (__fastcall *a3)(char *, char *, __int64),\n        __int64 a4,\n        __mode_t a5,\n        void (__fastcall *a6)(char *, __int64),\n        int a7,\n        int a8,\n        int a9,\n        char a10)\n{\n  _BYTE *v12; // rax\n  _BYTE *v13; // rbp\n  char *v14; // rbp\n  int v15; // eax\n  int v16; // r15d\n  __int64 v17; // rbx\n  char *v18; // rax\n  __int64 result; // rax\n  __int64 v20; // rdx\n  int v21; // eax\n  int *v22; // rbp\n  const char *v23; // rsi\n  __int64 v24; // rbx\n  char *v25; // rax\n  struct stat stat_buf; // [rsp+20h] [rbp-C8h] BYREF\n\n  if ( *a1 != 47 && *a2 == 4 )\n  {\n    v16 = a2[1];\n    if ( v16 )\n      goto LABEL_14;\n    if ( a3 )\n    {\nLABEL_4:\n      v12 = sub_40C5E0(a1, (__int64)a2, a3, a4);\n      v13 = v12;\n      if ( (__int64)v12 >= 0 )\n      {\n        v14 = &v12[(_QWORD)a1];\n        goto LABEL_6;\n      }\n      result = 1LL;\n      if ( v13 != (_BYTE *)-1LL )\n        return result;\n      v16 = *__errno_location();\nLABEL_14:\n      v17 = sub_40EC50(a1);\n      v18 = dcgettext(0LL, \"cannot create directory %s\", 5);\n      error(0, v16, v18, v17);\n      return 0LL;\n    }\n  }\n  else if ( a3 )\n  {\n    goto LABEL_4;\n  }\n  v14 = a1;\nLABEL_6:\n  if ( (a9 & a8) != -1 )\n  {\n    v15 = mkdir(v14, a5 & 0xFFFFFFC0);\n    goto LABEL_8;\n  }\n  if ( a5 & 0x200 | a7 & 0xC00 )\n  {\n    v15 = mkdir(v14, a5 & 0xFFFFFFED);\nLABEL_8:\n    v16 = v15;\n    if ( !v15 )\n    {\n      a6(a1, a4);\n      v20 = 3LL;\n      goto LABEL_28;\n    }\n    goto LABEL_9;\n  }\n  v16 = mkdir(v14, a5);\n  if ( !v16 )\n  {\n    a6(a1, a4);\n    if ( ((unsigned __int16)a5 & (unsigned __int16)a7 & 0x1FF) == 0 )\n      return 1LL;\n    v20 = 3LL;\n    goto LABEL_28;\n  }\nLABEL_9:\n  v16 = *__errno_location();\n  if ( a10 )\n  {\n    if ( !v16 || v16 != 2 && a3 && !__xstat(1, v14, &stat_buf) && (stat_buf.st_mode & 0xF000) == 0x4000 )\n      return 1LL;\n    goto LABEL_14;\n  }\n  v20 = 2LL;\nLABEL_28:\n  v21 = sub_40F520(a2, v14, v20, &stat_buf);\n  if ( v21 < -1 )\n    return 1LL;\n  if ( !v21 )\n    v14 = \".\";\n  if ( !(unsigned int)sub_4135D0(stat_buf.st_dev, v14, a7) )\n    return 1LL;\n  if ( v16 && (v16 == 2 || !a3 || *__errno_location() == 20) )\n    goto LABEL_14;\n  v22 = __errno_location();\n  v23 = \"cannot change permissions of %s\";\n  v24 = sub_40EC50(a1);\n  if ( (a9 & a8) != -1 )\n    v23 = \"cannot change owner and permissions of %s\";\n  v25 = dcgettext(0LL, v23, 5);\n  error(0, *v22, v25, v24);\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_40CA80",
            "funcStartAddr": "0x40ca80",
            "funcEndAddr": "0x40cde1",
            "decompiledFuncCode": "_WORD *__fastcall sub_40CA80(_BYTE *a1, __int64 a2)\n{\n  _BYTE *v2; // rcx\n  char *v3; // rbx\n  __int64 v4; // rdx\n  unsigned __int64 v5; // rdi\n  bool v6; // al\n  bool v7; // al\n  __int64 v8; // rdi\n  _WORD *result; // rax\n  __int64 v10; // r10\n  int v11; // edi\n  char v12; // r9\n  unsigned int v13; // ebp\n  __int64 v14; // r11\n  _WORD *v15; // r10\n  int v16; // ecx\n  int v17; // edx\n  char *v18; // r8\n  char *v19; // rsi\n  unsigned int v20; // ecx\n  unsigned __int8 v21; // si\n  char v22; // bl\n  int v23; // ebx\n\n  v2 = a1;\n  v3 = a1;\n  LODWORD(v4) = (char)*a1;\n  if ( (unsigned __int8)(*a1 - 48) > 7u )\n  {\n    v5 = 1LL;\n    if ( (_BYTE)v4 )\n    {\n      do\n      {\n        ++v2;\n        v6 = (_BYTE)v4 == 43 || (v4 & 0xEF) == 45;\n        v4 = (unsigned __int8)*v2;\n        v5 += v6;\n      }\n      while ( (_BYTE)v4 );\n      v7 = v5 >> 60 != 0;\n      v8 = 16 * v5;\n      if ( v8 < 0 || v7 )\n        sub_411530(v8, a2, v4);\n    }\n    else\n    {\n      v8 = 16LL;\n    }\n    result = (_WORD *)sub_4112E0(v8);\n    v10 = 0LL;\nLABEL_7:\n    v11 = 0;\n    while ( 1 )\n    {\n      v12 = *v3;\n      if ( *v3 == 97 )\n      {\n        v11 = 4095;\n        goto LABEL_54;\n      }\n      if ( v12 <= 97 )\n        break;\n      switch ( v12 )\n      {\n        case 'o':\n          v11 |= 0x207u;\n          break;\n        case 'u':\n          v11 |= 0x9C0u;\n          break;\n        case 'g':\n          v11 |= 0x438u;\n          break;\n        default:\n          goto LABEL_13;\n      }\nLABEL_54:\n      ++v3;\n    }\n    if ( v12 != 45 && v12 != 61 && v12 != 43 )\n      goto LABEL_13;\n    v14 = v10 + 1;\n    v15 = &result[8 * v10];\n    while ( 1 )\n    {\n      v17 = v3[1];\n      v18 = v3 + 1;\n      if ( v3[1] == 103 )\n      {\n        v19 = v3 + 2;\n        v16 = 56;\n      }\n      else\n      {\n        if ( v3[1] <= 103 )\n        {\n          if ( (unsigned __int8)(v17 - 48) <= 7u )\n          {\n            v20 = 0;\n            while ( 1 )\n            {\n              v20 = v17 + 8 * v20 - 48;\n              ++v18;\n              if ( v20 > 0xFFF )\n                goto LABEL_13;\n              v17 = *v18;\n              if ( (unsigned __int8)(*v18 - 48) > 7u )\n              {\n                if ( !v11 && (!(_BYTE)v17 || (_BYTE)v17 == 44) )\n                {\n                  *(_BYTE *)v15 = v12;\n                  v3 = v18;\n                  v12 = v17;\n                  v11 = 4095;\n                  *((_DWORD *)v15 + 2) = v20;\n                  v16 = 4095;\n                  *((_BYTE *)v15 + 1) = 1;\n                  *((_DWORD *)v15 + 1) = 4095;\n                  goto LABEL_27;\n                }\n                goto LABEL_13;\n              }\n            }\n          }\nLABEL_42:\n          v21 = v17 - 88;\n          v22 = 1;\n          v16 = 0;\n          while ( 2 )\n          {\n            switch ( v21 )\n            {\n              case 0u:\n                v22 = 2;\n                goto LABEL_45;\n              case 0x1Au:\n                v16 |= 0x124u;\n                goto LABEL_45;\n              case 0x1Bu:\n                BYTE1(v16) |= 0xCu;\n                goto LABEL_45;\n              case 0x1Cu:\n                BYTE1(v16) |= 2u;\n                goto LABEL_45;\n              case 0x1Fu:\n                LOBYTE(v16) = v16 | 0x92;\n                goto LABEL_45;\n              case 0x20u:\n                v16 |= 0x49u;\nLABEL_45:\n                LOBYTE(v17) = *++v18;\n                v21 = *v18 - 88;\n                if ( v21 > 0x20u )\n                  goto LABEL_46;\n                continue;\n              default:\nLABEL_46:\n                *(_BYTE *)v15 = v12;\n                v12 = v17;\n                *((_BYTE *)v15 + 1) = v22;\n                v3 = v18;\n                *((_DWORD *)v15 + 1) = v11;\n                *((_DWORD *)v15 + 2) = v16;\n                break;\n            }\n            goto LABEL_25;\n          }\n        }\n        v19 = v3 + 2;\n        if ( (_BYTE)v17 == 111 )\n        {\n          v16 = 7;\n        }\n        else\n        {\n          v16 = 448;\n          if ( (_BYTE)v17 != 117 )\n            goto LABEL_42;\n        }\n      }\n      *((_BYTE *)v15 + 1) = 3;\n      *((_DWORD *)v15 + 1) = v11;\n      *((_DWORD *)v15 + 2) = v16;\n      *(_BYTE *)v15 = v12;\n      v12 = v3[2];\n      v3 = v19;\nLABEL_25:\n      if ( v11 )\n        v16 &= v11;\nLABEL_27:\n      *((_DWORD *)v15 + 3) = v16;\n      v15 += 8;\n      if ( (v12 & 0xEF) != 45 && v12 != 43 )\n      {\n        if ( v12 == 44 )\n        {\n          ++v3;\n          v10 = v14;\n          goto LABEL_7;\n        }\n        if ( !v12 )\n        {\n          HIBYTE(result[8 * v14]) = 0;\n          return result;\n        }\nLABEL_13:\n        free(result);\n        return 0LL;\n      }\n      ++v14;\n    }\n  }\n  v13 = 0;\n  do\n  {\n    v13 = v4 + 8 * v13 - 48;\n    ++v2;\n    if ( v13 > 0xFFF )\n      return 0LL;\n    LODWORD(v4) = (char)*v2;\n  }\n  while ( (unsigned __int8)(*v2 - 48) <= 7u );\n  result = 0LL;\n  if ( !(_BYTE)v4 )\n  {\n    v23 = v13 & 0xC00 | 0x3FF;\n    if ( v2 - a1 >= 5 )\n      v23 = 4095;\n    result = (_WORD *)sub_4112E0(32LL);\n    *result = 317;\n    *((_DWORD *)result + 1) = 4095;\n    *((_DWORD *)result + 2) = v13;\n    *((_DWORD *)result + 3) = v23;\n    *((_BYTE *)result + 17) = 0;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40CDF0",
            "funcStartAddr": "0x40cdf0",
            "funcEndAddr": "0x40ce44",
            "decompiledFuncCode": "__int64 __fastcall sub_40CDF0(char *filename)\n{\n  int v1; // edx\n  __int64 result; // rax\n  __mode_t st_mode; // ebx\n  struct stat v4; // [rsp+0h] [rbp-98h] BYREF\n\n  v1 = __xstat(1, filename, &v4);\n  result = 0LL;\n  if ( !v1 )\n  {\n    st_mode = v4.st_mode;\n    result = sub_4112E0(32LL);\n    *(_WORD *)result = 317;\n    *(_DWORD *)(result + 4) = 4095;\n    *(_DWORD *)(result + 8) = st_mode;\n    *(_DWORD *)(result + 12) = 4095;\n    *(_BYTE *)(result + 17) = 0;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40CE50",
            "funcStartAddr": "0x40ce50",
            "funcEndAddr": "0x40cfcd",
            "decompiledFuncCode": "__int64 __fastcall sub_40CE50(__int16 a1, char a2, int a3, char *a4, _DWORD *a5)\n{\n  char v5; // r11\n  __int64 result; // rax\n  int v7; // ebx\n  int v8; // edx\n  unsigned int v9; // r10d\n  int v10; // edi\n  int v11; // r9d\n  int v12; // r11d\n  int v13; // r13d\n  int v14; // r9d\n  char v15; // r11\n  int v16; // r9d\n  int v17; // r9d\n  int v18; // r12d\n\n  v5 = a4[1];\n  result = a1 & 0xFFF;\n  v7 = 0;\n  if ( v5 )\n  {\n    v8 = ~a3;\n    while ( 1 )\n    {\n      v18 = *((_DWORD *)a4 + 1);\n      v14 = *((_DWORD *)a4 + 2);\n      if ( a2 )\n        break;\n      v9 = -1;\n      v10 = 0;\n      if ( v5 == 2 )\n      {\n        if ( (result & 0x49) == 0 )\n          goto LABEL_10;\nLABEL_18:\n        v15 = *a4;\n        v16 = v9 & (v14 | 0x49);\n        if ( !v18 )\n          goto LABEL_11;\nLABEL_19:\n        v17 = v18 & v16;\n        if ( v15 != 45 )\n        {\n          if ( v15 == 61 )\n          {\n            v10 |= ~v18;\n            LOWORD(v9) = ~(_WORD)v10;\n            goto LABEL_22;\n          }\nLABEL_13:\n          if ( v15 == 43 )\n          {\n            v7 |= v17;\n            result = v17 | (unsigned int)result;\n          }\n          goto LABEL_15;\n        }\nLABEL_26:\n        v7 |= v17;\n        result = ~v17 & (unsigned int)result;\nLABEL_15:\n        a4 += 16;\n        v5 = a4[1];\n        if ( !v5 )\n          goto LABEL_23;\n      }\n      else\n      {\nLABEL_4:\n        if ( v5 == 3 )\n        {\n          v11 = result & v14;\n          v12 = (v11 & 0x124) != 0 ? 0x124 : 0;\n          v13 = v12;\n          if ( (v11 & 0x92) != 0 )\n          {\n            LOBYTE(v13) = ((v11 & 0x124) != 0 ? 0x24 : 0) | 0x92;\n            v12 = v13;\n          }\n          if ( (v11 & 0x49) != 0 )\n            v12 |= 0x49u;\n          v14 = v12 | v11;\n        }\nLABEL_10:\n        v15 = *a4;\n        v16 = v9 & v14;\n        if ( v18 )\n          goto LABEL_19;\nLABEL_11:\n        v17 = v8 & v16;\n        if ( v15 == 45 )\n          goto LABEL_26;\n        if ( v15 != 61 )\n          goto LABEL_13;\nLABEL_22:\n        a4 += 16;\n        v5 = a4[1];\n        v7 |= v9 & 0xFFF;\n        result = v17 | v10 & (unsigned int)result;\n        if ( !v5 )\n          goto LABEL_23;\n      }\n    }\n    v9 = *((_DWORD *)a4 + 3) | 0xFFFFF3FF;\n    v10 = ~(unsigned __int16)*((_DWORD *)a4 + 3) & 0xC00;\n    if ( v5 == 2 )\n      goto LABEL_18;\n    goto LABEL_4;\n  }\nLABEL_23:\n  if ( a5 )\n    *a5 = v7;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40CFD0",
            "funcStartAddr": "0x40cfd0",
            "funcEndAddr": "0x40d069",
            "decompiledFuncCode": "char *__fastcall sub_40CFD0(const char *a1)\n{\n  char *v1; // rbx\n  char *result; // rax\n\n  if ( !a1 )\n  {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 1uLL, 0x37uLL, stderr);\n    abort();\n  }\n  v1 = (char *)a1;\n  result = strrchr(a1, 47);\n  if ( result )\n  {\n    if ( result + 1 - a1 > 6 && !memcmp(result - 6, \"/.libs/\", 7uLL) )\n    {\n      v1 = result + 1;\n      if ( !memcmp(result + 1, \"lt-\", 3uLL) )\n      {\n        v1 = result + 4;\n        program_invocation_short_name = (__int64)(result + 4);\n      }\n    }\n  }\n  s = v1;\n  program_invocation_name = (__int64)v1;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40D070",
            "funcStartAddr": "0x40d070",
            "funcEndAddr": "0x40d0af",
            "decompiledFuncCode": "__int64 __fastcall sub_40D070(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, unsigned int a5)\n{\n  char v8[28]; // [rsp+Ch] [rbp-1Ch] BYREF\n\n  if ( (unsigned int)sub_412B30(a1, a2, a5, v8) )\n    return 4294967294LL;\n  else\n    return sub_412B60(v8, a3, a4);\n}\n"
        },
        {
            "funcName": "sub_40D0B0",
            "funcStartAddr": "0x40d0b0",
            "funcEndAddr": "0x40d0cc",
            "decompiledFuncCode": "__int64 __fastcall sub_40D0B0(__int64 a1, unsigned int a2, int a3)\n{\n  int v4[3]; // [rsp+Ch] [rbp-Ch] BYREF\n\n  v4[0] = a3;\n  return sub_412B60(v4, a1, a2);\n}\n"
        },
        {
            "funcName": "sub_40D0D0",
            "funcStartAddr": "0x40d0d0",
            "funcEndAddr": "0x40d1c2",
            "decompiledFuncCode": "char *__fastcall sub_40D0D0(char *msgid, int a2)\n{\n  char *v2; // rbx\n  _BYTE *v4; // rax\n  bool v5; // zf\n  const char *v6; // rbx\n\n  v2 = dcgettext(0LL, msgid, 5);\n  if ( msgid != v2 )\n    return v2;\n  v4 = (_BYTE *)sub_413060();\n  if ( (*v4 & 0xDF) == 85 )\n  {\n    if ( (v4[1] & 0xDF) == 84 && (v4[2] & 0xDF) == 70 && v4[3] == 45 && v4[4] == 56 && !v4[5] )\n    {\n      v5 = *v2 == 96;\n      v2 = (char *)&unk_4192E9;\n      if ( !v5 )\n        return (char *)&unk_4192DE;\n      return v2;\n    }\n  }\n  else if ( (*v4 & 0xDF) == 71\n         && (v4[1] & 0xDF) == 66\n         && v4[2] == 49\n         && v4[3] == 56\n         && v4[4] == 48\n         && v4[5] == 51\n         && v4[6] == 48\n         && !v4[7] )\n  {\n    v5 = *v2 == 96;\n    v2 = (char *)&unk_4192E5;\n    if ( !v5 )\n      return (char *)&unk_4192E2;\n    return v2;\n  }\n  v6 = \"\\\"\";\n  if ( a2 != 9 )\n    return \"'\";\n  return (char *)v6;\n}\n"
        },
        {
            "funcName": "sub_40D1D0",
            "funcStartAddr": "0x403024",
            "funcEndAddr": "0x403029",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40D1D0(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_40D1D0((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_40D1D0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_4129F0((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_40D1D0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_40D0D0(\"`\", a5);\n        v51 = sub_40D0D0(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n\nunsigned __int64 __fastcall sub_40D1D0(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_40D1D0((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_40D1D0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_4129F0((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_40D1D0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_40D0D0(\"`\", a5);\n        v51 = sub_40D0D0(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n"
        },
        {
            "funcName": "sub_40D1D0",
            "funcStartAddr": "0x403024",
            "funcEndAddr": "0x403029",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40D1D0(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_40D1D0((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_40D1D0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_4129F0((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_40D1D0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_40D0D0(\"`\", a5);\n        v51 = sub_40D0D0(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n\nunsigned __int64 __fastcall sub_40D1D0(\n        _BYTE *a1,\n        unsigned __int64 a2,\n        __int64 a3,\n        unsigned __int64 a4,\n        int a5,\n        int a6,\n        __int64 a7,\n        char *a8,\n        char *a9)\n{\n  _BYTE *v9; // r15\n  unsigned __int64 v10; // r14\n  int v12; // ebp\n  unsigned __int64 v13; // r11\n  int v14; // r10d\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  int v18; // r11d\n  _BYTE *v19; // r8\n  size_t v20; // rax\n  int v21; // eax\n  unsigned __int64 v22; // rbp\n  bool v23; // al\n  unsigned __int8 v24; // dl\n  const unsigned __int16 **v25; // rax\n  int v26; // eax\n  char v27; // di\n  unsigned __int64 v28; // rdx\n  char v29; // cl\n  int v30; // r13d\n  unsigned __int8 v31; // al\n  bool v33; // dl\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // rdi\n  int v36; // edx\n  unsigned __int8 v37; // al\n  unsigned __int8 v38; // al\n  int v39; // r13d\n  bool v40; // dl\n  bool v41; // dl\n  bool v42; // al\n  size_t v43; // rax\n  const unsigned __int16 **v44; // rbx\n  char *v45; // r15\n  const unsigned __int16 **v46; // r14\n  char *v47; // rax\n  int v48; // esi\n  unsigned __int64 v49; // rcx\n  unsigned __int8 v50; // di\n  char *v51; // rax\n  size_t v52; // rax\n  __int64 v53; // rsi\n  char *v54; // rsi\n  _BYTE *v55; // rcx\n  char i; // al\n  char v57; // dl\n  char *v58; // rax\n  unsigned __int8 v60; // [rsp+8h] [rbp-C0h]\n  unsigned __int8 v61; // [rsp+10h] [rbp-B8h]\n  unsigned __int64 v62; // [rsp+10h] [rbp-B8h]\n  char v63; // [rsp+1Fh] [rbp-A9h]\n  size_t n; // [rsp+28h] [rbp-A0h]\n  _BYTE *v66; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v67; // [rsp+30h] [rbp-98h]\n  _BYTE *v68; // [rsp+30h] [rbp-98h]\n  unsigned __int64 v69; // [rsp+30h] [rbp-98h]\n  unsigned __int8 v70; // [rsp+38h] [rbp-90h]\n  unsigned __int8 v71; // [rsp+38h] [rbp-90h]\n  unsigned __int64 v72; // [rsp+38h] [rbp-90h]\n  char v73; // [rsp+38h] [rbp-90h]\n  int v74; // [rsp+38h] [rbp-90h]\n  int v75; // [rsp+40h] [rbp-88h]\n  unsigned __int64 v76; // [rsp+40h] [rbp-88h]\n  int v77; // [rsp+40h] [rbp-88h]\n  int v78; // [rsp+40h] [rbp-88h]\n  _BYTE *v79; // [rsp+40h] [rbp-88h]\n  int v80; // [rsp+48h] [rbp-80h]\n  unsigned __int64 v81; // [rsp+48h] [rbp-80h]\n  char *s2; // [rsp+50h] [rbp-78h]\n  unsigned __int64 v83; // [rsp+58h] [rbp-70h]\n  size_t mb_cur_max; // [rsp+60h] [rbp-68h]\n  bool v86; // [rsp+6Ch] [rbp-5Ch]\n  char v87; // [rsp+6Dh] [rbp-5Bh]\n  unsigned __int8 v88; // [rsp+6Eh] [rbp-5Ah]\n  unsigned __int64 v89; // [rsp+70h] [rbp-58h]\n  _BYTE *v90; // [rsp+78h] [rbp-50h]\n  wint_t wc; // [rsp+84h] [rbp-44h] BYREF\n  mbstate_t ps; // [rsp+88h] [rbp-40h] BYREF\n\n  v9 = a1;\n  v10 = a2;\n  v12 = a6 & 2;\n  mb_cur_max = __ctype_get_mb_cur_max();\n  v86 = v12 != 0;\n  v13 = a4;\n  switch ( a5 )\n  {\n    case 0:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 0;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 1:\n      goto LABEL_2;\n    case 2:\n      if ( !v12 )\n      {\n        v60 = 0;\n        goto LABEL_216;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 0;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 3:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 2;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"'\";\n      goto LABEL_3;\n    case 4:\n      if ( v12 )\n      {\nLABEL_2:\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        a5 = 2;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 0;\n        n = 1LL;\n        s2 = \"'\";\n        goto LABEL_3;\n      }\n      v60 = 1;\nLABEL_216:\n      if ( a2 )\n      {\n        v14 = 0;\n        v42 = 0;\n        v63 = 1;\n        v83 = 0LL;\n        goto LABEL_142;\n      }\n      v63 = 1;\n      v14 = 0;\n      v15 = 1LL;\n      a5 = 2;\n      v83 = 0LL;\n      v87 = 0;\n      v86 = 0;\n      n = 1LL;\n      s2 = \"'\";\nLABEL_3:\n      v16 = v13;\n      v17 = 0LL;\n      v18 = a5;\n      while ( 1 )\n      {\nLABEL_4:\n        LOBYTE(a5) = v16 != v17;\n        if ( v16 == -1LL )\n          LOBYTE(a5) = *(_BYTE *)(a3 + v17) != 0;\n        if ( !(_BYTE)a5 )\n        {\n          v39 = v18;\n          v13 = v16;\n          v40 = v39 == 2;\n          if ( !v15 && v40 && v86 )\n          {\n            v30 = 2;\n            goto LABEL_72;\n          }\n          v41 = !v86 && v40;\n          if ( v41 )\n          {\n            if ( v87 )\n            {\n              if ( v63 )\n                return sub_40D1D0((int)v9, v83, a3, v16, 5, a6, a7, (__int64)a8, a9);\n              v42 = v83 != 0 && v10 == 0;\n              if ( v42 )\n              {\n                v10 = v83;\nLABEL_142:\n                *v9 = 39;\n                a5 = 2;\n                v15 = 1LL;\n                s2 = \"'\";\n                n = 1LL;\n                v86 = 0;\n                v87 = v42;\n                goto LABEL_3;\n              }\n              v41 = v87;\n            }\n          }\n          else\n          {\n            v41 = !v86;\n          }\n          if ( s2 )\n          {\n            if ( v41 )\n            {\n              v57 = *s2;\n              if ( *s2 )\n              {\n                v58 = &s2[-v15];\n                do\n                {\n                  if ( v10 > v15 )\n                    v9[v15] = v57;\n                  v57 = v58[++v15];\n                }\n                while ( v57 );\n              }\n            }\n          }\n          if ( v10 > v15 )\n            v9[v15] = 0;\n          return v15;\n        }\n        v19 = (_BYTE *)(a3 + v17);\n        v61 = v60 & (v18 != 2);\n        if ( !v61 )\n          break;\n        if ( n )\n        {\n          if ( v16 == -1LL && n > 1 )\n          {\n            v75 = v18;\n            v70 = v14;\n            v20 = strlen((const char *)a3);\n            v18 = v75;\n            v14 = v70;\n            v19 = (_BYTE *)(a3 + v17);\n            v16 = v20;\n          }\n          if ( v17 + n <= v16 )\n          {\n            v80 = v18;\n            v76 = v16;\n            v71 = v14;\n            v66 = v19;\n            v21 = memcmp(v19, s2, n);\n            v19 = v66;\n            v14 = v71;\n            v16 = v76;\n            v18 = v80;\n            if ( !v21 )\n            {\n              if ( !v86 )\n              {\n                LOBYTE(v22) = *v66;\n                switch ( *v66 )\n                {\n                  case 0:\n                    goto LABEL_87;\n                  case 7:\n                    LOBYTE(v22) = 97;\n                    goto LABEL_83;\n                  case 8:\n                    v24 = 0;\n                    a5 = 0;\n                    LOBYTE(v22) = 98;\n                    goto LABEL_29;\n                  case 9:\n                    goto LABEL_76;\n                  case 0xA:\n                    goto LABEL_68;\n                  case 0xB:\n                    goto LABEL_84;\n                  case 0xC:\n                    goto LABEL_81;\n                  case 0xD:\n                    goto LABEL_80;\n                  case 0x20:\n                    v37 = v61;\n                    goto LABEL_132;\n                  case 0x21:\n                  case 0x22:\n                  case 0x24:\n                  case 0x26:\n                  case 0x28:\n                  case 0x29:\n                  case 0x2A:\n                  case 0x3B:\n                  case 0x3C:\n                  case 0x3D:\n                  case 0x3E:\n                  case 0x5B:\n                  case 0x5E:\n                  case 0x60:\n                  case 0x7C:\n                    goto LABEL_78;\n                  case 0x23:\n                  case 0x7E:\n                    v38 = v61;\n                    goto LABEL_129;\n                  case 0x25:\n                  case 0x2B:\n                  case 0x2C:\n                  case 0x2D:\n                  case 0x2E:\n                  case 0x2F:\n                  case 0x30:\n                  case 0x31:\n                  case 0x32:\n                  case 0x33:\n                  case 0x34:\n                  case 0x35:\n                  case 0x36:\n                  case 0x37:\n                  case 0x38:\n                  case 0x39:\n                  case 0x3A:\n                  case 0x41:\n                  case 0x42:\n                  case 0x43:\n                  case 0x44:\n                  case 0x45:\n                  case 0x46:\n                  case 0x47:\n                  case 0x48:\n                  case 0x49:\n                  case 0x4A:\n                  case 0x4B:\n                  case 0x4C:\n                  case 0x4D:\n                  case 0x4E:\n                  case 0x4F:\n                  case 0x50:\n                  case 0x51:\n                  case 0x52:\n                  case 0x53:\n                  case 0x54:\n                  case 0x55:\n                  case 0x56:\n                  case 0x57:\n                  case 0x58:\n                  case 0x59:\n                  case 0x5A:\n                  case 0x5D:\n                  case 0x5F:\n                  case 0x61:\n                  case 0x62:\n                  case 0x63:\n                  case 0x64:\n                  case 0x65:\n                  case 0x66:\n                  case 0x67:\n                  case 0x68:\n                  case 0x69:\n                  case 0x6A:\n                  case 0x6B:\n                  case 0x6C:\n                  case 0x6D:\n                  case 0x6E:\n                  case 0x6F:\n                  case 0x70:\n                  case 0x71:\n                  case 0x72:\n                  case 0x73:\n                  case 0x74:\n                  case 0x75:\n                  case 0x76:\n                  case 0x77:\n                  case 0x78:\n                  case 0x79:\n                  case 0x7A:\n                    v37 = v61;\n                    goto LABEL_127;\n                  case 0x27:\n                    goto LABEL_62;\n                  case 0x3F:\n                    goto LABEL_58;\n                  case 0x5C:\n                    goto LABEL_65;\n                  case 0x7B:\n                  case 0x7D:\n                    goto LABEL_17;\n                  default:\n                    goto LABEL_102;\n                }\n              }\nLABEL_277:\n              v30 = v18;\n              LODWORD(v13) = v16;\n              return sub_40D1D0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n            }\n          }\n        }\n        LOBYTE(v22) = *v19;\n        switch ( *v19 )\n        {\n          case 0:\n            goto LABEL_85;\n          case 7:\n            LOBYTE(v22) = 97;\n            goto LABEL_82;\n          case 8:\n            LOBYTE(v22) = 98;\n            goto LABEL_69;\n          case 9:\nLABEL_76:\n            LOBYTE(v22) = 116;\n            goto LABEL_69;\n          case 0xA:\nLABEL_68:\n            LOBYTE(v22) = 110;\nLABEL_69:\n            v24 = 0;\n            a5 = 0;\n            if ( v86 )\n              goto LABEL_70;\n            goto LABEL_29;\n          case 0xB:\nLABEL_84:\n            LOBYTE(v22) = 118;\n            goto LABEL_82;\n          case 0xC:\nLABEL_81:\n            LOBYTE(v22) = 102;\nLABEL_82:\n            if ( v86 )\n            {\n              v30 = v18;\n              v31 = 0;\n              LODWORD(v13) = v16;\n              goto LABEL_71;\n            }\nLABEL_83:\n            a5 = 0;\n            goto LABEL_37;\n          case 0xD:\n            v61 = 0;\nLABEL_80:\n            LOBYTE(v22) = 13;\n            v29 = 114;\n            v24 = v18 == 2;\n            goto LABEL_66;\n          case 0x20:\n            v37 = 0;\nLABEL_132:\n            LOBYTE(v22) = 32;\n            goto LABEL_127;\n          case 0x21:\n          case 0x22:\n          case 0x24:\n          case 0x26:\n          case 0x28:\n          case 0x29:\n          case 0x2A:\n          case 0x3B:\n          case 0x3C:\n          case 0x3D:\n          case 0x3E:\n          case 0x5B:\n          case 0x5E:\n          case 0x60:\n          case 0x7C:\n            v61 = 0;\nLABEL_78:\n            v24 = 0;\n            goto LABEL_67;\n          case 0x23:\n          case 0x7E:\n            v38 = 0;\nLABEL_129:\n            if ( !v17 )\n            {\n              a5 = v61;\n              v24 = 0;\n              v61 = v38;\n              goto LABEL_23;\n            }\n            v61 = v38;\n            a5 = 0;\n            break;\n          case 0x25:\n          case 0x2B:\n          case 0x2C:\n          case 0x2D:\n          case 0x2E:\n          case 0x2F:\n          case 0x30:\n          case 0x31:\n          case 0x32:\n          case 0x33:\n          case 0x34:\n          case 0x35:\n          case 0x36:\n          case 0x37:\n          case 0x38:\n          case 0x39:\n          case 0x3A:\n          case 0x41:\n          case 0x42:\n          case 0x43:\n          case 0x44:\n          case 0x45:\n          case 0x46:\n          case 0x47:\n          case 0x48:\n          case 0x49:\n          case 0x4A:\n          case 0x4B:\n          case 0x4C:\n          case 0x4D:\n          case 0x4E:\n          case 0x4F:\n          case 0x50:\n          case 0x51:\n          case 0x52:\n          case 0x53:\n          case 0x54:\n          case 0x55:\n          case 0x56:\n          case 0x57:\n          case 0x58:\n          case 0x59:\n          case 0x5A:\n          case 0x5D:\n          case 0x5F:\n          case 0x61:\n          case 0x62:\n          case 0x63:\n          case 0x64:\n          case 0x65:\n          case 0x66:\n          case 0x67:\n          case 0x68:\n          case 0x69:\n          case 0x6A:\n          case 0x6B:\n          case 0x6C:\n          case 0x6D:\n          case 0x6E:\n          case 0x6F:\n          case 0x70:\n          case 0x71:\n          case 0x72:\n          case 0x73:\n          case 0x74:\n          case 0x75:\n          case 0x76:\n          case 0x77:\n          case 0x78:\n          case 0x79:\n          case 0x7A:\n            v37 = 0;\nLABEL_127:\n            a5 = v61;\n            v61 = v37;\n            LOBYTE(v25) = 0;\n            goto LABEL_25;\n          case 0x27:\n            v61 = 0;\n            goto LABEL_62;\n          case 0x3F:\n            v61 = 0;\n            goto LABEL_58;\n          case 0x5C:\n            v61 = 0;\n            goto LABEL_65;\n          case 0x7B:\n          case 0x7D:\n            v61 = 0;\n            goto LABEL_17;\n          default:\n            v61 = 0;\n            goto LABEL_102;\n        }\nLABEL_24:\n        LOBYTE(v25) = 0;\nLABEL_25:\n        if ( a7 && ((*(_DWORD *)(a7 + 4LL * ((unsigned __int8)v22 >> 5)) >> v22) & 1) != 0 )\n        {\n          v24 = v18 == 2;\nLABEL_28:\n          if ( v86 )\n          {\nLABEL_70:\n            v30 = v18;\n            v31 = v24;\n            LODWORD(v13) = v16;\nLABEL_71:\n            v60 &= v31;\n            goto LABEL_72;\n          }\nLABEL_29:\n          v26 = v14 ^ 1;\n          if ( (v24 & ((unsigned __int8)v14 ^ 1)) != 0 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v15 + 1 < v10 )\n              v9[v15 + 1] = 36;\n            if ( v15 + 2 < v10 )\n              v9[v15 + 2] = 39;\n            v15 += 3LL;\n            LOBYTE(v26) = v24 & (v14 ^ 1);\n            v14 = v26;\n          }\nLABEL_37:\n          if ( v10 > v15 )\n            v9[v15] = 92;\n          ++v15;\n          ++v17;\n          goto LABEL_40;\n        }\nLABEL_49:\n        v24 = v18 == 2;\n        if ( v61 )\n          goto LABEL_28;\n        ++v17;\n        LOBYTE(v25) = v14 & ((unsigned __int8)v25 ^ 1);\nLABEL_51:\n        if ( (_BYTE)v25 )\n        {\n          if ( v10 > v15 )\n            v9[v15] = 39;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 39;\n          v15 += 2LL;\n          v14 = 0;\n        }\nLABEL_40:\n        if ( v15 < v10 )\n          v9[v15] = v22;\n        v27 = v63;\n        ++v15;\n        if ( !(_BYTE)a5 )\n          v27 = 0;\n        v63 = v27;\n      }\n      LOBYTE(v22) = *v19;\n      switch ( *v19 )\n      {\n        case 0:\n          if ( !v60 )\n          {\n            if ( (a6 & 1) == 0 )\n            {\n              v61 = 0;\n              v24 = v18 == 2;\n              a5 = 0;\n              LOBYTE(v22) = 0;\n              goto LABEL_23;\n            }\n            ++v17;\n            goto LABEL_4;\n          }\nLABEL_85:\n          if ( v86 )\n          {\n            v30 = v18;\n            LODWORD(v13) = v16;\n            v60 = v30 == 2;\n            goto LABEL_72;\n          }\n          v61 = 0;\nLABEL_87:\n          v33 = v18 == 2;\n          LODWORD(v25) = v14 ^ 1;\n          LOBYTE(v25) = (v18 == 2) & (v14 ^ 1);\n          if ( (_BYTE)v25 )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 36;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v34 = v15 + 3;\n            if ( v10 <= v15 + 3 )\n            {\n              v15 += 4LL;\n              v14 = (int)v25;\n              a5 = 0;\n              LOBYTE(v22) = 48;\n              goto LABEL_49;\n            }\n            goto LABEL_95;\n          }\n          v34 = v15;\n          if ( v10 > v15 )\n          {\n            LODWORD(v25) = v14;\nLABEL_95:\n            v9[v34] = 92;\n            v14 = (int)v25;\n          }\n          v15 = v34 + 1;\n          if ( v18 == 2 )\n          {\n            LOBYTE(v25) = a5;\n            LOBYTE(v22) = 48;\n            a5 = 0;\n            goto LABEL_49;\n          }\n          LOBYTE(v22) = 48;\n          if ( v17 + 1 < v16 && (unsigned __int8)(*(_BYTE *)(a3 + v17 + 1) - 48) <= 9u )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 48;\n            if ( v10 > v34 + 2 )\n              v9[v34 + 2] = 48;\n            v15 = v34 + 3;\n            LOBYTE(v22) = 48;\n          }\nLABEL_99:\n          LOBYTE(v25) = a5;\n          a5 = 0;\n          if ( v33 | v60 ^ 1 )\n            goto LABEL_49;\n          goto LABEL_25;\n        case 7:\n          LOBYTE(v22) = 7;\n          v29 = 97;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 8:\n          LOBYTE(v22) = 8;\n          v29 = 98;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 9:\n          LOBYTE(v22) = 9;\n          v29 = 116;\n          goto LABEL_108;\n        case 0xA:\n          LOBYTE(v22) = 10;\n          v29 = 110;\n          goto LABEL_108;\n        case 0xB:\n          LOBYTE(v22) = 11;\n          v29 = 118;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xC:\n          LOBYTE(v22) = 12;\n          v29 = 102;\n          v24 = v18 == 2;\n          goto LABEL_66;\n        case 0xD:\n          LOBYTE(v22) = 13;\n          v29 = 114;\nLABEL_108:\n          v24 = v18 == 2;\n          v61 = v18 == 2 && v86;\n          if ( v61 )\n            goto LABEL_109;\n          goto LABEL_66;\n        case 0x20:\n          LOBYTE(v22) = 32;\n          v24 = v18 == 2;\n          goto LABEL_21;\n        case 0x21:\n        case 0x22:\n        case 0x24:\n        case 0x26:\n        case 0x28:\n        case 0x29:\n        case 0x2A:\n        case 0x3B:\n        case 0x3C:\n        case 0x3D:\n        case 0x3E:\n        case 0x5B:\n        case 0x5E:\n        case 0x60:\n        case 0x7C:\n          v24 = v18 == 2;\n          a5 = 0;\n          goto LABEL_21;\n        case 0x23:\n        case 0x7E:\n          v24 = v18 == 2;\n          goto LABEL_20;\n        case 0x25:\n        case 0x2B:\n        case 0x2C:\n        case 0x2D:\n        case 0x2E:\n        case 0x2F:\n        case 0x30:\n        case 0x31:\n        case 0x32:\n        case 0x33:\n        case 0x34:\n        case 0x35:\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3A:\n        case 0x41:\n        case 0x42:\n        case 0x43:\n        case 0x44:\n        case 0x45:\n        case 0x46:\n        case 0x47:\n        case 0x48:\n        case 0x49:\n        case 0x4A:\n        case 0x4B:\n        case 0x4C:\n        case 0x4D:\n        case 0x4E:\n        case 0x4F:\n        case 0x50:\n        case 0x51:\n        case 0x52:\n        case 0x53:\n        case 0x54:\n        case 0x55:\n        case 0x56:\n        case 0x57:\n        case 0x58:\n        case 0x59:\n        case 0x5A:\n        case 0x5D:\n        case 0x5F:\n        case 0x61:\n        case 0x62:\n        case 0x63:\n        case 0x64:\n        case 0x65:\n        case 0x66:\n        case 0x67:\n        case 0x68:\n        case 0x69:\n        case 0x6A:\n        case 0x6B:\n        case 0x6C:\n        case 0x6D:\n        case 0x6E:\n        case 0x6F:\n        case 0x70:\n        case 0x71:\n        case 0x72:\n        case 0x73:\n        case 0x74:\n        case 0x75:\n        case 0x76:\n        case 0x77:\n        case 0x78:\n        case 0x79:\n        case 0x7A:\n          goto LABEL_105;\n        case 0x27:\nLABEL_62:\n          if ( v18 != 2 )\n          {\n            v87 = a5;\n            v24 = 0;\n            LOBYTE(v22) = 39;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_288;\n          if ( !v10 || (v28 = 0LL, v83) )\n          {\n            if ( v10 > v15 )\n              v9[v15] = 39;\n            if ( v10 > v15 + 1 )\n              v9[v15 + 1] = 92;\n            v28 = v10;\n            if ( v10 > v15 + 2 )\n              v9[v15 + 2] = 39;\n            v10 = v83;\n          }\n          v87 = a5;\n          v15 += 3LL;\n          LOBYTE(v25) = 0;\n          v14 = 0;\n          v83 = v10;\n          LOBYTE(v22) = 39;\n          v10 = v28;\n          goto LABEL_49;\n        case 0x3F:\nLABEL_58:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n            {\nLABEL_288:\n              v30 = 2;\n              LODWORD(v13) = v16;\n              goto LABEL_72;\n            }\n            a5 = 0;\n            LOBYTE(v25) = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_49;\n          }\n          if ( v18 != 5 )\n          {\n            LOBYTE(v22) = 63;\n            v24 = v18 == 2;\n            a5 = 0;\n            goto LABEL_23;\n          }\n          if ( (a6 & 4) == 0\n            || v17 + 2 >= v16\n            || *(_BYTE *)(a3 + v17 + 1) != 63\n            || (v22 = *(unsigned __int8 *)(a3 + v17 + 2), (unsigned __int8)v22 > 0x3Eu)\n            || (v53 = 0x7000A38200000000LL, !_bittest64(&v53, v22)) )\n          {\n            v24 = 0;\n            a5 = 0;\n            LOBYTE(v22) = 63;\n            goto LABEL_23;\n          }\n          if ( v86 )\n            goto LABEL_277;\n          if ( v10 > v15 )\n            v9[v15] = 63;\n          if ( v10 > v15 + 1 )\n            v9[v15 + 1] = 34;\n          if ( v10 > v15 + 2 )\n            v9[v15 + 2] = 34;\n          if ( v10 > v15 + 3 )\n            v9[v15 + 3] = 63;\n          v15 += 4LL;\n          v33 = 0;\n          LOBYTE(a5) = 0;\n          v17 += 2LL;\n          goto LABEL_99;\n        case 0x5C:\n          if ( v18 == 2 )\n          {\n            if ( v86 )\n              goto LABEL_288;\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            LOBYTE(v22) = 92;\n            goto LABEL_51;\n          }\nLABEL_65:\n          LOBYTE(v22) = 92;\n          v29 = 92;\n          v24 = (n != 0) & v86 & v60;\n          if ( v24 )\n          {\n            ++v17;\n            LOBYTE(v25) = v14;\n            a5 = 0;\n            goto LABEL_51;\n          }\nLABEL_66:\n          if ( !v60 )\n          {\nLABEL_67:\n            a5 = 0;\n            goto LABEL_23;\n          }\n          LOBYTE(v22) = v29;\n          a5 = 0;\n          goto LABEL_28;\n        case 0x7B:\n        case 0x7D:\nLABEL_17:\n          v23 = v16 != 1;\n          if ( v16 == -1LL )\n            v23 = *(_BYTE *)(a3 + 1) != 0;\n          v24 = v18 == 2;\n          if ( v23 )\n            goto LABEL_67;\nLABEL_20:\n          if ( v17 )\n            goto LABEL_67;\nLABEL_21:\n          if ( !v86 || !v24 )\n            goto LABEL_23;\nLABEL_109:\n          LODWORD(v13) = v16;\n          v30 = 2;\n          goto LABEL_72;\n        default:\nLABEL_102:\n          if ( mb_cur_max == 1 )\n          {\n            v77 = v18;\n            v72 = v16;\n            v67 = v14;\n            v25 = __ctype_b_loc();\n            v14 = v67;\n            v16 = v72;\n            v18 = v77;\n            v35 = 1LL;\n            LODWORD(v25) = (*v25)[(unsigned __int8)v22];\n            LOWORD(v25) = (unsigned __int16)v25 & 0x4000;\n            LOBYTE(a5) = (_WORD)v25 != 0;\n            LOBYTE(v36) = v60 & ((_WORD)v25 == 0);\nLABEL_104:\n            if ( (_BYTE)v36 )\n            {\n              v36 = v60;\n              LOBYTE(a5) = 0;\nLABEL_178:\n              v48 = 0;\n              v49 = v17 + v35;\n              v50 = v61;\n              while ( 1 )\n              {\n                if ( (_BYTE)v36 )\n                {\n                  if ( v86 )\n                  {\n                    v30 = v18;\n                    v60 = v18 == 2;\n                    LODWORD(v13) = v16;\n                    goto LABEL_72;\n                  }\n                  LOBYTE(v25) = (v14 ^ 1) & (v18 == 2);\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 36;\n                    if ( v10 > v15 + 2 )\n                      v9[v15 + 2] = 39;\n                    v15 += 3LL;\n                    v14 = (int)v25;\n                  }\n                  if ( v10 > v15 )\n                    v9[v15] = 92;\n                  if ( v10 > v15 + 1 )\n                    v9[v15 + 1] = ((unsigned __int8)v22 >> 6) + 48;\n                  LODWORD(v25) = v15 + 2;\n                  if ( v10 > v15 + 2 )\n                  {\n                    LODWORD(v25) = (((unsigned __int8)v22 >> 3) & 7) + 48;\n                    v9[v15 + 2] = (_BYTE)v25;\n                  }\n                  ++v17;\n                  v15 += 3LL;\n                  LOBYTE(v22) = (v22 & 7) + 48;\n                  if ( v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_40;\n                  }\n                  v48 = v36;\n                }\n                else\n                {\n                  LODWORD(v25) = v14 & (v48 ^ 1);\n                  if ( v50 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 92;\n                    ++v15;\n                  }\n                  if ( ++v17 >= v49 )\n                  {\n                    a5 = (unsigned __int8)a5;\n                    goto LABEL_51;\n                  }\n                  if ( (_BYTE)v25 )\n                  {\n                    if ( v10 > v15 )\n                      v9[v15] = 39;\n                    LODWORD(v25) = v15 + 1;\n                    if ( v10 > v15 + 1 )\n                      v9[v15 + 1] = 39;\n                    v15 += 2LL;\n                    v50 = 0;\n                    v14 = 0;\n                  }\n                  else\n                  {\n                    v50 = 0;\n                  }\n                }\n                if ( v10 > v15 )\n                  v9[v15] = v22;\n                LOBYTE(v22) = *(_BYTE *)(a3 + v17);\n                ++v15;\n              }\n            }\nLABEL_105:\n            v24 = v18 == 2;\nLABEL_23:\n            LOBYTE(v25) = v86 | (v24 | v60 ^ 1) ^ 1;\n            if ( !(_BYTE)v25 )\n              goto LABEL_49;\n            goto LABEL_24;\n          }\n          ps = 0LL;\n          if ( v16 == -1LL )\n          {\n            v78 = v18;\n            v73 = v14;\n            v68 = v19;\n            v43 = strlen((const char *)a3);\n            v18 = v78;\n            LOBYTE(v14) = v73;\n            v19 = v68;\n            v16 = v43;\n          }\n          v89 = v15;\n          v90 = v19;\n          v44 = 0LL;\n          v88 = v14;\n          v79 = v9;\n          v81 = v10;\n          v69 = v16;\n          v74 = v18;\n          break;\n      }\n      while ( 2 )\n      {\n        v45 = (char *)v44 + v17;\n        v25 = (const unsigned __int16 **)sub_4129F0((wchar_t *)&wc, (char *)v44 + v17 + a3);\n        v46 = v25;\n        if ( !v25 )\n        {\nLABEL_245:\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          v14 = v88;\n          v9 = v79;\n          v36 = a5 ^ 1;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          LOBYTE(v36) = v60 & (a5 ^ 1);\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-1LL )\n        {\n          v35 = (unsigned __int64)v44;\n          v15 = v89;\n          a5 = 0;\n          v14 = v88;\n          v9 = v79;\n          v10 = v81;\n          v16 = v69;\n          v18 = v74;\n          v36 = v60;\n          goto LABEL_246;\n        }\n        if ( v25 == (const unsigned __int16 **)-2LL )\n        {\n          v16 = v69;\n          v54 = (char *)v44 + v17;\n          v55 = (char *)v44 + v17 + a3;\n          v25 = v44;\n          v35 = (unsigned __int64)v44;\n          v14 = v88;\n          v15 = v89;\n          v9 = v79;\n          v10 = v81;\n          v18 = v74;\n          if ( (unsigned __int64)v54 < v69 && *v55 )\n          {\n            do\n              v25 = (const unsigned __int16 **)((char *)v25 + 1);\n            while ( (unsigned __int64)v25 + v17 < v69 && *((_BYTE *)v25 + (_QWORD)v90) );\n            v35 = (unsigned __int64)v25;\n          }\n          v36 = v60;\n          a5 = 0;\nLABEL_246:\n          if ( v35 > 1 )\n            goto LABEL_178;\n          goto LABEL_104;\n        }\n        if ( v74 != 2 || !v86 || v25 == (const unsigned __int16 **)1 )\n        {\nLABEL_152:\n          if ( !iswprint(wc) )\n            a5 = 0;\n          v44 = (const unsigned __int16 **)((char *)v44 + (_QWORD)v46);\n          LODWORD(v25) = mbsinit(&ps);\n          if ( (_DWORD)v25 )\n            goto LABEL_245;\n          continue;\n        }\n        break;\n      }\n      v47 = &v45[a3 + 1];\n      while ( (unsigned __int8)(*v47 - 91) > 0x21u || ((1LL << (*v47 - 91)) & 0x20000002BLL) == 0 )\n      {\n        if ( (char *)v46 + a3 + (_QWORD)v45 == ++v47 )\n          goto LABEL_152;\n      }\n      LODWORD(v9) = (_DWORD)v79;\n      LODWORD(v10) = v81;\n      v30 = 2;\n      LODWORD(v13) = v69;\nLABEL_72:\n      if ( v60 )\n        v30 = 4;\n      return sub_40D1D0((int)v9, v10, a3, v13, v30, a6 & 0xFFFFFFFD, 0LL, (__int64)a8, a9);\n    case 5:\n      if ( v12 )\n      {\n        v63 = 1;\n        v14 = 0;\n        v15 = 0LL;\n        v87 = 0;\n        v83 = 0LL;\n        v86 = 1;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      else\n      {\n        if ( a2 )\n        {\n          *a1 = 34;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n          v83 = 0LL;\n        }\n        else\n        {\n          v83 = 0LL;\n          v14 = 0;\n          v63 = 1;\n          v87 = 0;\n        }\n        v86 = 0;\n        v15 = 1LL;\n        v60 = 1;\n        n = 1LL;\n        s2 = \"\\\"\";\n      }\n      goto LABEL_3;\n    case 6:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      a5 = 5;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 1;\n      v60 = 1;\n      n = 1LL;\n      s2 = \"\\\"\";\n      goto LABEL_3;\n    case 7:\n      v63 = 1;\n      v14 = 0;\n      v15 = 0LL;\n      v87 = 0;\n      v83 = 0LL;\n      v86 = 0;\n      v60 = 1;\n      n = 0LL;\n      s2 = 0LL;\n      goto LABEL_3;\n    case 8:\n    case 9:\n    case 10:\n      if ( v12 )\n      {\n        a8 = sub_40D0D0(\"`\", a5);\n        v51 = sub_40D0D0(\"'\", a5);\n        v13 = a4;\n        a9 = v51;\n      }\n      v15 = 0LL;\n      if ( !v12 )\n      {\n        for ( i = *a8; i; i = a8[v15] )\n        {\n          if ( a2 > v15 )\n            a1[v15] = i;\n          ++v15;\n        }\n      }\n      v62 = v13;\n      v52 = strlen(a9);\n      v63 = 1;\n      v14 = 0;\n      v13 = v62;\n      n = v52;\n      v87 = 0;\n      s2 = a9;\n      v83 = 0LL;\n      v60 = 1;\n      goto LABEL_3;\n    default:\n      abort();\n  }\n}\n"
        },
        {
            "funcName": "sub_40E400",
            "funcStartAddr": "0x403029",
            "funcEndAddr": "0x40302e",
            "decompiledFuncCode": "_BYTE *__fastcall sub_40E400(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __int64 v7; // rdx\n  __m128i *v8; // rbx\n  int *v9; // r13\n  __int64 v10; // rsi\n  unsigned __int64 *v11; // rbx\n  _BYTE *v12; // r12\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rsi\n  _BYTE *v15; // rax\n  int v16; // r8d\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v20; // [rsp+10h] [rbp-48h]\n  int v21; // [rsp+18h] [rbp-40h]\n  int v22; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v8 = (__m128i *)ptr;\n  v9 = v6;\n  v21 = *v6;\n  if ( (int)a1 < 0 )\n    abort();\n  if ( dword_61F4D0 <= (int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_411530(a1, a2, v7);\n    v10 = 16LL * ((int)a1 + 1);\n    if ( ptr == &xmmword_61F4C0 )\n    {\n      v8 = (__m128i *)sub_411340(0LL, v10);\n      ptr = v8;\n      *v8 = _mm_load_si128((const __m128i *)&xmmword_61F4C0);\n    }\n    else\n    {\n      ptr = (void *)sub_411340(ptr, v10);\n      v8 = (__m128i *)ptr;\n    }\n    memset(&v8[dword_61F4D0], 0, 16LL * ((int)a1 + 1 - dword_61F4D0));\n    dword_61F4D0 = a1 + 1;\n  }\n  v11 = (unsigned __int64 *)&v8[(int)a1];\n  v12 = (_BYTE *)v11[1];\n  v22 = *(_DWORD *)(a4 + 4) | 1;\n  v19 = *v11;\n  v13 = sub_40D1D0(v12, *v11, a2, a3, *(_DWORD *)a4, v22, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v19 <= v13 )\n  {\n    v14 = v13 + 1;\n    *v11 = v13 + 1;\n    if ( v12 != (_BYTE *)&unk_6219E0 )\n    {\n      v20 = v13 + 1;\n      free(v12);\n      v14 = v20;\n    }\n    v15 = (_BYTE *)sub_4112E0(v14);\n    v16 = *(_DWORD *)a4;\n    v11[1] = (unsigned __int64)v15;\n    v12 = v15;\n    sub_40D1D0(v15, v14, a2, a3, v16, v22, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v9 = v21;\n  return v12;\n}\n\n_BYTE *__fastcall sub_40E400(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __int64 v7; // rdx\n  __m128i *v8; // rbx\n  int *v9; // r13\n  __int64 v10; // rsi\n  unsigned __int64 *v11; // rbx\n  _BYTE *v12; // r12\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rsi\n  _BYTE *v15; // rax\n  int v16; // r8d\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v20; // [rsp+10h] [rbp-48h]\n  int v21; // [rsp+18h] [rbp-40h]\n  int v22; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v8 = (__m128i *)ptr;\n  v9 = v6;\n  v21 = *v6;\n  if ( (int)a1 < 0 )\n    abort();\n  if ( dword_61F4D0 <= (int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_411530(a1, a2, v7);\n    v10 = 16LL * ((int)a1 + 1);\n    if ( ptr == &xmmword_61F4C0 )\n    {\n      v8 = (__m128i *)sub_411340(0LL, v10);\n      ptr = v8;\n      *v8 = _mm_load_si128((const __m128i *)&xmmword_61F4C0);\n    }\n    else\n    {\n      ptr = (void *)sub_411340(ptr, v10);\n      v8 = (__m128i *)ptr;\n    }\n    memset(&v8[dword_61F4D0], 0, 16LL * ((int)a1 + 1 - dword_61F4D0));\n    dword_61F4D0 = a1 + 1;\n  }\n  v11 = (unsigned __int64 *)&v8[(int)a1];\n  v12 = (_BYTE *)v11[1];\n  v22 = *(_DWORD *)(a4 + 4) | 1;\n  v19 = *v11;\n  v13 = sub_40D1D0(v12, *v11, a2, a3, *(_DWORD *)a4, v22, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v19 <= v13 )\n  {\n    v14 = v13 + 1;\n    *v11 = v13 + 1;\n    if ( v12 != (_BYTE *)&unk_6219E0 )\n    {\n      v20 = v13 + 1;\n      free(v12);\n      v14 = v20;\n    }\n    v15 = (_BYTE *)sub_4112E0(v14);\n    v16 = *(_DWORD *)a4;\n    v11[1] = (unsigned __int64)v15;\n    v12 = v15;\n    sub_40D1D0(v15, v14, a2, a3, v16, v22, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v9 = v21;\n  return v12;\n}\n"
        },
        {
            "funcName": "sub_40E400",
            "funcStartAddr": "0x403029",
            "funcEndAddr": "0x40302e",
            "decompiledFuncCode": "_BYTE *__fastcall sub_40E400(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __int64 v7; // rdx\n  __m128i *v8; // rbx\n  int *v9; // r13\n  __int64 v10; // rsi\n  unsigned __int64 *v11; // rbx\n  _BYTE *v12; // r12\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rsi\n  _BYTE *v15; // rax\n  int v16; // r8d\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v20; // [rsp+10h] [rbp-48h]\n  int v21; // [rsp+18h] [rbp-40h]\n  int v22; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v8 = (__m128i *)ptr;\n  v9 = v6;\n  v21 = *v6;\n  if ( (int)a1 < 0 )\n    abort();\n  if ( dword_61F4D0 <= (int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_411530(a1, a2, v7);\n    v10 = 16LL * ((int)a1 + 1);\n    if ( ptr == &xmmword_61F4C0 )\n    {\n      v8 = (__m128i *)sub_411340(0LL, v10);\n      ptr = v8;\n      *v8 = _mm_load_si128((const __m128i *)&xmmword_61F4C0);\n    }\n    else\n    {\n      ptr = (void *)sub_411340(ptr, v10);\n      v8 = (__m128i *)ptr;\n    }\n    memset(&v8[dword_61F4D0], 0, 16LL * ((int)a1 + 1 - dword_61F4D0));\n    dword_61F4D0 = a1 + 1;\n  }\n  v11 = (unsigned __int64 *)&v8[(int)a1];\n  v12 = (_BYTE *)v11[1];\n  v22 = *(_DWORD *)(a4 + 4) | 1;\n  v19 = *v11;\n  v13 = sub_40D1D0(v12, *v11, a2, a3, *(_DWORD *)a4, v22, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v19 <= v13 )\n  {\n    v14 = v13 + 1;\n    *v11 = v13 + 1;\n    if ( v12 != (_BYTE *)&unk_6219E0 )\n    {\n      v20 = v13 + 1;\n      free(v12);\n      v14 = v20;\n    }\n    v15 = (_BYTE *)sub_4112E0(v14);\n    v16 = *(_DWORD *)a4;\n    v11[1] = (unsigned __int64)v15;\n    v12 = v15;\n    sub_40D1D0(v15, v14, a2, a3, v16, v22, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v9 = v21;\n  return v12;\n}\n\n_BYTE *__fastcall sub_40E400(__int64 a1, __int64 a2, unsigned __int64 a3, __int64 a4)\n{\n  int *v6; // rax\n  __int64 v7; // rdx\n  __m128i *v8; // rbx\n  int *v9; // r13\n  __int64 v10; // rsi\n  unsigned __int64 *v11; // rbx\n  _BYTE *v12; // r12\n  unsigned __int64 v13; // rax\n  unsigned __int64 v14; // rsi\n  _BYTE *v15; // rax\n  int v16; // r8d\n  unsigned __int64 v19; // [rsp+10h] [rbp-48h]\n  unsigned __int64 v20; // [rsp+10h] [rbp-48h]\n  int v21; // [rsp+18h] [rbp-40h]\n  int v22; // [rsp+1Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v8 = (__m128i *)ptr;\n  v9 = v6;\n  v21 = *v6;\n  if ( (int)a1 < 0 )\n    abort();\n  if ( dword_61F4D0 <= (int)a1 )\n  {\n    if ( (_DWORD)a1 == 0x7FFFFFFF )\n      sub_411530(a1, a2, v7);\n    v10 = 16LL * ((int)a1 + 1);\n    if ( ptr == &xmmword_61F4C0 )\n    {\n      v8 = (__m128i *)sub_411340(0LL, v10);\n      ptr = v8;\n      *v8 = _mm_load_si128((const __m128i *)&xmmword_61F4C0);\n    }\n    else\n    {\n      ptr = (void *)sub_411340(ptr, v10);\n      v8 = (__m128i *)ptr;\n    }\n    memset(&v8[dword_61F4D0], 0, 16LL * ((int)a1 + 1 - dword_61F4D0));\n    dword_61F4D0 = a1 + 1;\n  }\n  v11 = (unsigned __int64 *)&v8[(int)a1];\n  v12 = (_BYTE *)v11[1];\n  v22 = *(_DWORD *)(a4 + 4) | 1;\n  v19 = *v11;\n  v13 = sub_40D1D0(v12, *v11, a2, a3, *(_DWORD *)a4, v22, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  if ( v19 <= v13 )\n  {\n    v14 = v13 + 1;\n    *v11 = v13 + 1;\n    if ( v12 != (_BYTE *)&unk_6219E0 )\n    {\n      v20 = v13 + 1;\n      free(v12);\n      v14 = v20;\n    }\n    v15 = (_BYTE *)sub_4112E0(v14);\n    v16 = *(_DWORD *)a4;\n    v11[1] = (unsigned __int64)v15;\n    v12 = v15;\n    sub_40D1D0(v15, v14, a2, a3, v16, v22, a4 + 8, *(char **)(a4 + 40), *(char **)(a4 + 48));\n  }\n  *v9 = v21;\n  return v12;\n}\n"
        },
        {
            "funcName": "sub_40E5A0",
            "funcStartAddr": "0x40e5a0",
            "funcEndAddr": "0x40e5d4",
            "decompiledFuncCode": "__int64 __fastcall sub_40E5A0(__int128 *a1)\n{\n  __int128 *v1; // rbx\n  int *v2; // rax\n  int v3; // r12d\n  int *v4; // rbp\n  __int64 result; // rax\n\n  v1 = a1;\n  v2 = __errno_location();\n  v3 = *v2;\n  v4 = v2;\n  if ( !a1 )\n    v1 = &xmmword_621AE0;\n  result = sub_4114E0(v1, 0x38uLL);\n  *v4 = v3;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40E690",
            "funcStartAddr": "0x40e690",
            "funcEndAddr": "0x40e702",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40E690(_BYTE *a1, unsigned __int64 a2, __int64 a3, unsigned __int64 a4, __int128 *a5)\n{\n  __int128 *v6; // rbx\n  int *v7; // rax\n  int v8; // r12d\n  int *v9; // rbp\n  unsigned __int64 result; // rax\n\n  v6 = a5;\n  if ( !a5 )\n    v6 = &xmmword_621AE0;\n  v7 = __errno_location();\n  v8 = *v7;\n  v9 = v7;\n  result = sub_40D1D0(\n             a1,\n             a2,\n             a3,\n             a4,\n             *(_DWORD *)v6,\n             *((_DWORD *)v6 + 1),\n             (__int64)v6 + 8,\n             *((char **)v6 + 5),\n             *((char **)v6 + 6));\n  *v9 = v8;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40E710",
            "funcStartAddr": "0x40e710",
            "funcEndAddr": "0x40e7f1",
            "decompiledFuncCode": "_BYTE *__fastcall sub_40E710(__int64 a1, unsigned __int64 a2, unsigned __int64 *a3, __int128 *a4)\n{\n  __int128 *v5; // rbx\n  int *v6; // r13\n  int v7; // ebp\n  int v9; // [rsp+Ch] [rbp-5Ch]\n  _BYTE *v10; // [rsp+10h] [rbp-58h]\n  unsigned __int64 v11; // [rsp+28h] [rbp-40h]\n\n  v5 = a4;\n  if ( !a4 )\n    v5 = &xmmword_621AE0;\n  v6 = __errno_location();\n  v7 = *((_DWORD *)v5 + 1) | (a3 == 0LL);\n  v9 = *v6;\n  v11 = sub_40D1D0(0LL, 0LL, a1, a2, *(_DWORD *)v5, v7, (__int64)v5 + 8, *((char **)v5 + 5), *((char **)v5 + 6));\n  v10 = (_BYTE *)sub_4112E0(v11 + 1);\n  sub_40D1D0(v10, v11 + 1, a1, a2, *(_DWORD *)v5, v7, (__int64)v5 + 8, *((char **)v5 + 5), *((char **)v5 + 6));\n  *v6 = v9;\n  if ( a3 )\n    *a3 = v11;\n  return v10;\n}\n"
        },
        {
            "funcName": "sub_40E810",
            "funcStartAddr": "0x40e810",
            "funcEndAddr": "0x40e8a5",
            "decompiledFuncCode": "void sub_40E810()\n{\n  __int128 *v0; // r12\n  void **v1; // rbx\n  void **v2; // rbp\n  void *v3; // rdi\n  void *v4; // rdi\n\n  v0 = (__int128 *)ptr;\n  if ( dword_61F4D0 > 1 )\n  {\n    v1 = (void **)((char *)ptr + 24);\n    v2 = (void **)((char *)ptr + 16 * (unsigned int)(dword_61F4D0 - 2) + 40);\n    do\n    {\n      v3 = *v1;\n      v1 += 2;\n      free(v3);\n    }\n    while ( v1 != v2 );\n  }\n  v4 = (void *)*((_QWORD *)v0 + 1);\n  if ( v4 != &unk_6219E0 )\n  {\n    free(v4);\n    *(_QWORD *)&xmmword_61F4C0 = 256LL;\n    *((_QWORD *)&xmmword_61F4C0 + 1) = &unk_6219E0;\n  }\n  if ( v0 != &xmmword_61F4C0 )\n  {\n    free(v0);\n    ptr = &xmmword_61F4C0;\n  }\n  dword_61F4D0 = 1;\n}\n"
        },
        {
            "funcName": "sub_40E920",
            "funcStartAddr": "0x40302e",
            "funcEndAddr": "0x403033",
            "decompiledFuncCode": "_BYTE *__fastcall sub_40E920(__int64 a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_40E400(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_40E920(__int64 a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_40E400(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_40E920",
            "funcStartAddr": "0x40302e",
            "funcEndAddr": "0x403033",
            "decompiledFuncCode": "_BYTE *__fastcall sub_40E920(__int64 a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_40E400(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_40E920(__int64 a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v4[1] = 0;\n  v5 = 0LL;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_40E400(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_40E990",
            "funcStartAddr": "0x403033",
            "funcEndAddr": "0x403038",
            "decompiledFuncCode": "_BYTE *__fastcall sub_40E990(__int64 a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_40E400(a1, a3, a4, (__int64)v5);\n}\n\n_BYTE *__fastcall sub_40E990(__int64 a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_40E400(a1, a3, a4, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_40E990",
            "funcStartAddr": "0x403033",
            "funcEndAddr": "0x403038",
            "decompiledFuncCode": "_BYTE *__fastcall sub_40E990(__int64 a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_40E400(a1, a3, a4, (__int64)v5);\n}\n\n_BYTE *__fastcall sub_40E990(__int64 a1, int a2, __int64 a3, unsigned __int64 a4)\n{\n  int v5[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+8h] [rbp-40h]\n  __int64 v7; // [rsp+10h] [rbp-38h]\n  __int64 v8; // [rsp+18h] [rbp-30h]\n  __int64 v9; // [rsp+20h] [rbp-28h]\n  __int64 v10; // [rsp+28h] [rbp-20h]\n  __int64 v11; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v5[0] = a2;\n  v5[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  v11 = 0LL;\n  return sub_40E400(a1, a3, a4, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_40EA00",
            "funcStartAddr": "0x40ea00",
            "funcEndAddr": "0x40ea0c",
            "decompiledFuncCode": "_BYTE *__fastcall sub_40EA00(int a1, __int64 a2)\n{\n  return sub_40E920(0LL, a1, a2);\n}\n"
        },
        {
            "funcName": "sub_40EA20",
            "funcStartAddr": "0x40ea20",
            "funcEndAddr": "0x40ea90",
            "decompiledFuncCode": "_BYTE *__fastcall sub_40EA20(__int64 a1, unsigned __int64 a2, unsigned __int8 a3)\n{\n  _DWORD *v3; // r8\n  __int128 v5[3]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v6; // [rsp+30h] [rbp-18h]\n\n  v6 = qword_621B10;\n  v5[0] = (__int128)_mm_load_si128((const __m128i *)&xmmword_621AE0);\n  v5[1] = (__int128)_mm_load_si128((const __m128i *)&xmmword_621AF0);\n  v3 = (_DWORD *)v5 + (a3 >> 5) + 2;\n  v5[2] = (__int128)_mm_load_si128((const __m128i *)&xmmword_621B00);\n  *v3 ^= (((*v3 >> (a3 & 0x1F)) & 1) == 0) << (a3 & 0x1F);\n  return sub_40E400(0LL, a1, a2, (__int64)v5);\n}\n"
        },
        {
            "funcName": "sub_40EAA0",
            "funcStartAddr": "0x40eaa0",
            "funcEndAddr": "0x40eab1",
            "decompiledFuncCode": "_BYTE *__fastcall sub_40EAA0(__int64 a1)\n{\n  return sub_40EA20(a1, 0xFFFFFFFFFFFFFFFFLL, 0x3Au);\n}\n"
        },
        {
            "funcName": "sub_40EAD0",
            "funcStartAddr": "0x403038",
            "funcEndAddr": "0x40303d",
            "decompiledFuncCode": "_BYTE *__fastcall sub_40EAD0(__int64 a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_40E400(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_40EAD0(__int64 a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_40E400(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_40EAD0",
            "funcStartAddr": "0x403038",
            "funcEndAddr": "0x40303d",
            "decompiledFuncCode": "_BYTE *__fastcall sub_40EAD0(__int64 a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_40E400(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n\n_BYTE *__fastcall sub_40EAD0(__int64 a1, int a2, __int64 a3)\n{\n  int v4[2]; // [rsp+0h] [rbp-48h] BYREF\n  __int64 v5; // [rsp+8h] [rbp-40h]\n  __int64 v6; // [rsp+10h] [rbp-38h]\n  __int64 v7; // [rsp+18h] [rbp-30h]\n  __int64 v8; // [rsp+20h] [rbp-28h]\n  __int64 v9; // [rsp+28h] [rbp-20h]\n  __int64 v10; // [rsp+30h] [rbp-18h]\n\n  if ( a2 == 10 )\n    abort();\n  v4[0] = a2;\n  v5 = 0x400000000000000LL;\n  v4[1] = 0;\n  v6 = 0LL;\n  v7 = 0LL;\n  v8 = 0LL;\n  v9 = 0LL;\n  v10 = 0LL;\n  return sub_40E400(a1, a3, 0xFFFFFFFFFFFFFFFFLL, (__int64)v4);\n}\n"
        },
        {
            "funcName": "sub_40EB40",
            "funcStartAddr": "0x40eb40",
            "funcEndAddr": "0x40ebac",
            "decompiledFuncCode": "_BYTE *__fastcall sub_40EB40(__int64 a1, __int64 a2, __int64 a3, __int64 a4, unsigned __int64 a5)\n{\n  __int128 v6[2]; // [rsp+0h] [rbp-48h] BYREF\n  __m128i si128; // [rsp+20h] [rbp-28h]\n  __int64 v8; // [rsp+30h] [rbp-18h]\n\n  v6[0] = (__int128)_mm_load_si128((const __m128i *)&xmmword_621AE0);\n  v6[1] = (__int128)_mm_load_si128((const __m128i *)&xmmword_621AF0);\n  si128 = _mm_load_si128((const __m128i *)&xmmword_621B00);\n  v8 = qword_621B10;\n  LODWORD(v6[0]) = 10;\n  if ( !a2 || !a3 )\n    abort();\n  si128.m128i_i64[1] = a2;\n  v8 = a3;\n  return sub_40E400(a1, a4, a5, (__int64)v6);\n}\n"
        },
        {
            "funcName": "sub_40EC30",
            "funcStartAddr": "0x40ec30",
            "funcEndAddr": "0x40ec41",
            "decompiledFuncCode": "_BYTE *__fastcall sub_40EC30(__int64 a1, __int64 a2)\n{\n  return sub_40E400(a1, a2, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_61F480);\n}\n"
        },
        {
            "funcName": "sub_40EC50",
            "funcStartAddr": "0x40ec50",
            "funcEndAddr": "0x40ec66",
            "decompiledFuncCode": "_BYTE *__fastcall sub_40EC50(__int64 a1)\n{\n  return sub_40E400(0LL, a1, 0xFFFFFFFFFFFFFFFFLL, (__int64)&unk_61F480);\n}\n"
        },
        {
            "funcName": "sub_40EC70",
            "funcStartAddr": "0x40ec70",
            "funcEndAddr": "0x40eeb2",
            "decompiledFuncCode": "__int64 __fastcall sub_40EC70(unsigned int oldfd, char *old, unsigned int newfd, char *a4, unsigned int a5)\n{\n  int v8; // eax\n  unsigned int v9; // edx\n  int *v10; // rax\n  int *v11; // r9\n  bool v12; // r15\n  int v14; // eax\n  size_t v15; // rbp\n  size_t v16; // rax\n  int v17; // [rsp+8h] [rbp-160h]\n  int *v18; // [rsp+8h] [rbp-160h]\n  int *v19; // [rsp+8h] [rbp-160h]\n  struct stat v20; // [rsp+10h] [rbp-158h] BYREF\n  struct stat stat_buf; // [rsp+A0h] [rbp-C8h] BYREF\n\n  v8 = syscall(316LL, oldfd, old, newfd, a4, a5);\n  v9 = v8;\n  if ( v8 < 0 )\n  {\n    v17 = v8;\n    v10 = __errno_location();\n    v9 = v17;\n    v11 = v10;\n    v12 = *v10 != 95 && ((*v10 - 22) & 0xFFFFFFEF) != 0;\n    if ( !v12 )\n    {\n      if ( a5 )\n      {\n        if ( (a5 & 0xFFFFFFFE) != 0 )\n        {\n          *v10 = 95;\n          return (unsigned int)-1;\n        }\n        v18 = v10;\n        v14 = __fxstatat(1, newfd, a4, &stat_buf, 256);\n        v11 = v18;\n        if ( !v14 || *v18 == 75 )\n        {\n          *v18 = 17;\n          return (unsigned int)-1;\n        }\n        if ( *v18 != 2 )\n          return (unsigned int)-1;\n        v12 = 1;\n      }\n      v19 = v11;\n      v15 = strlen(old);\n      v16 = strlen(a4);\n      if ( !v15 || !v16 || old[v15 - 1] != 47 && a4[v16 - 1] != 47 )\n        return (unsigned int)renameat(oldfd, old, newfd, a4);\n      if ( !__fxstatat(1, oldfd, old, &v20, 256) )\n      {\n        if ( v12 )\n        {\n          if ( (v20.st_mode & 0xF000) != 0x4000 )\n          {\n            *v19 = 2;\n            return (unsigned int)-1;\n          }\n          return (unsigned int)renameat(oldfd, old, newfd, a4);\n        }\n        if ( __fxstatat(1, newfd, a4, &stat_buf, 256) )\n        {\n          if ( *v19 == 2 && (v20.st_mode & 0xF000) == 0x4000 )\n            return (unsigned int)renameat(oldfd, old, newfd, a4);\n        }\n        else\n        {\n          if ( (stat_buf.st_mode & 0xF000) == 0x4000 )\n          {\n            if ( (v20.st_mode & 0xF000) != 0x4000 )\n            {\n              *v19 = 21;\n              return (unsigned int)-1;\n            }\n            return (unsigned int)renameat(oldfd, old, newfd, a4);\n          }\n          *v19 = 20;\n        }\n      }\n      return (unsigned int)-1;\n    }\n  }\n  return v9;\n}\n"
        },
        {
            "funcName": "sub_40EEC0",
            "funcStartAddr": "0x40eec0",
            "funcEndAddr": "0x40ef1e",
            "decompiledFuncCode": "ssize_t __fastcall sub_40EEC0(int fd, void *buf, size_t nbytes)\n{\n  ssize_t v4; // rbp\n  int v5; // eax\n\n  while ( 1 )\n  {\n    v4 = read(fd, buf, nbytes);\n    if ( v4 >= 0 )\n      break;\n    v5 = *__errno_location();\n    if ( v5 != 4 )\n    {\n      if ( nbytes <= 0x7FFFE000 || v5 != 22 )\n        return v4;\n      nbytes = 2147475456LL;\n    }\n  }\n  return v4;\n}\n"
        },
        {
            "funcName": "sub_40EF20",
            "funcStartAddr": "0x40ef20",
            "funcEndAddr": "0x40ef7e",
            "decompiledFuncCode": "ssize_t __fastcall sub_40EF20(int fd, void *buf, size_t n)\n{\n  ssize_t v4; // rbp\n  int v5; // eax\n\n  while ( 1 )\n  {\n    v4 = write(fd, buf, n);\n    if ( v4 >= 0 )\n      break;\n    v5 = *__errno_location();\n    if ( v5 != 4 )\n    {\n      if ( v5 != 22 || n <= 0x7FFFE000 )\n        return v4;\n      n = 2147475456LL;\n    }\n  }\n  return v4;\n}\n"
        },
        {
            "funcName": "sub_40EF80",
            "funcStartAddr": "0x40ef80",
            "funcEndAddr": "0x40f0b0",
            "decompiledFuncCode": "__int64 __fastcall sub_40EF80(_BYTE *a1, _BYTE *a2)\n{\n  unsigned int v2; // ebx\n  const char *v3; // rbp\n  const char *v4; // r12\n  size_t v5; // r13\n  char *v7; // rbp\n  char *v8; // r12\n  int *v9; // rax\n  int *v10; // rax\n  struct stat v11; // [rsp+0h] [rbp-158h] BYREF\n  struct stat stat_buf; // [rsp+90h] [rbp-C8h] BYREF\n\n  v2 = 0;\n  v3 = sub_40AD40(a1);\n  v4 = sub_40AD40(a2);\n  v5 = sub_40ADA0(v3);\n  if ( v5 == sub_40ADA0(v4) && !memcmp(v3, v4, v5) )\n  {\n    v7 = (char *)sub_40AC60(a1, (__int64)v4);\n    v8 = (char *)sub_40AC60(a2, (__int64)v4);\n    if ( __xstat(1, v7, &v11) )\n    {\n      v10 = __errno_location();\n      error(1, *v10, \"%s\", v7);\n    }\n    if ( __xstat(1, v8, &stat_buf) )\n    {\n      v9 = __errno_location();\n      error(1, *v9, \"%s\", v8);\n    }\n    v2 = 0;\n    if ( v11.st_ino == stat_buf.st_ino )\n      LOBYTE(v2) = v11.st_dev == stat_buf.st_dev;\n    free(v7);\n    free(v8);\n  }\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_40F0B0",
            "funcStartAddr": "0x40f0b0",
            "funcEndAddr": "0x40f0c6",
            "decompiledFuncCode": "__int64 __fastcall sub_40F0B0(__int64 a1, __int64 a2)\n{\n  __int64 result; // rax\n  unsigned __int64 v3; // rdx\n\n  result = 0xFFFFFFFFLL;\n  v3 = *(_QWORD *)(a2 + 8);\n  if ( *(_QWORD *)(a1 + 8) >= v3 )\n    return *(_QWORD *)(a1 + 8) > v3;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40F0D0",
            "funcStartAddr": "0x40f0d0",
            "funcEndAddr": "0x40f0db",
            "decompiledFuncCode": "int __fastcall sub_40F0D0(const char **a1, const char **a2)\n{\n  return strcmp(*a1, *a2);\n}\n"
        },
        {
            "funcName": "sub_40F0E0",
            "funcStartAddr": "0x40f0e0",
            "funcEndAddr": "0x40f474",
            "decompiledFuncCode": "__int64 __fastcall sub_40F0E0(DIR *dirp, __int64 a2)\n{\n  unsigned __int64 v3; // r15\n  size_t v4; // r12\n  char *v5; // r14\n  __int64 v6; // r13\n  int *v7; // rbp\n  struct dirent *v8; // rax\n  struct dirent *v9; // rcx\n  const char *d_name; // r8\n  char v11; // al\n  const char *v12; // rdi\n  size_t v13; // rax\n  void *v14; // r8\n  size_t v15; // rdx\n  struct dirent *v16; // rcx\n  char *v17; // r12\n  int v18; // ebx\n  char *v19; // rbp\n  char *v20; // rbp\n  const char **v21; // r12\n  const char **v22; // rbx\n  const char *v23; // rsi\n  __int64 v25; // rax\n  __int64 v26; // rax\n  __int64 v27; // rax\n  void *v28; // rdi\n  int (*compar)(const void *, const void *); // [rsp+8h] [rbp-70h]\n  __int64 v30; // [rsp+10h] [rbp-68h]\n  const char *srcb; // [rsp+18h] [rbp-60h]\n  __int64 src; // [rsp+18h] [rbp-60h]\n  unsigned __int64 srca; // [rsp+18h] [rbp-60h]\n  __int64 v34; // [rsp+20h] [rbp-58h]\n  struct dirent *v35; // [rsp+28h] [rbp-50h]\n  struct dirent *v36; // [rsp+28h] [rbp-50h]\n  void *v37; // [rsp+28h] [rbp-50h]\n  size_t n; // [rsp+30h] [rbp-48h]\n  size_t na; // [rsp+30h] [rbp-48h]\n  size_t nb; // [rsp+30h] [rbp-48h]\n  size_t v41; // [rsp+38h] [rbp-40h]\n\n  a2 = (unsigned int)a2;\n  compar = (int (*)(const void *, const void *))qword_41A020[(unsigned int)a2];\n  if ( !dirp )\n    return 0LL;\n  v3 = 0LL;\n  v4 = 0LL;\n  v5 = 0LL;\n  v6 = 0LL;\n  v34 = 0LL;\n  v30 = 0LL;\n  v7 = __errno_location();\n  while ( 1 )\n  {\n    *v7 = 0;\n    v8 = readdir(dirp);\n    v9 = v8;\n    if ( !v8 )\n      break;\n    d_name = v8->d_name;\n    v11 = v8->d_name[0];\n    if ( v11 == 46 )\n    {\n      if ( v9->d_name[1] == 46 )\n      {\n        v11 = v9->d_name[2];\n        goto LABEL_3;\n      }\n      if ( v9->d_name[1] )\n        goto LABEL_8;\n    }\n    else\n    {\nLABEL_3:\n      if ( v11 )\n      {\nLABEL_8:\n        v12 = d_name;\n        srcb = d_name;\n        v35 = v9;\n        v13 = strlen(d_name);\n        v14 = (void *)srcb;\n        v15 = v13 + 1;\n        if ( compar )\n        {\n          v16 = v35;\n          src = v4 + 1;\n          if ( v4 == v34 )\n          {\n            if ( v5 )\n            {\n              if ( v4 > 0x555555555555554LL )\n                goto LABEL_41;\n              v34 = src + (v4 >> 1);\n              a2 = 16 * v34;\n            }\n            else if ( v4 )\n            {\n              a2 = 16 * v4;\n              if ( (v4 & 0x800000000000000LL) != 0 || v4 >> 60 )\nLABEL_41:\n                sub_411530(v12, a2, v15);\n            }\n            else\n            {\n              v34 = 8LL;\n              a2 = 128LL;\n              src = 1LL;\n            }\n            v41 = v13 + 1;\n            nb = (size_t)v14;\n            v27 = sub_411340(v5, a2);\n            v15 = v41;\n            v14 = (void *)nb;\n            v5 = (char *)v27;\n            v16 = v35;\n          }\n          n = v15;\n          v36 = v16;\n          v17 = &v5[16 * v4];\n          *(_QWORD *)v17 = sub_411510(v14);\n          v3 += n;\n          *((_QWORD *)v17 + 1) = v36->d_ino;\n          v4 = src;\n        }\n        else\n        {\n          a2 = v15 + v3;\n          srca = v15 + v3;\n          if ( v30 - v3 > v15 )\n            goto LABEL_29;\n          if ( __CFADD__(v15, v3) )\n            goto LABEL_41;\n          if ( v6 )\n          {\n            a2 = v15 + v3;\n            if ( srca > 0x5555555555555553LL )\n              goto LABEL_41;\n            v25 = srca + (srca >> 1) + 1;\n          }\n          else\n          {\n            v25 = v15 + v3;\n            if ( !a2 )\n            {\n              v30 = 128LL;\n              goto LABEL_28;\n            }\n            if ( a2 < 0 )\n              goto LABEL_41;\n          }\n          v30 = v25;\nLABEL_28:\n          na = v15;\n          v37 = v14;\n          v26 = sub_411340(v6, v30);\n          v15 = na;\n          v14 = v37;\n          v6 = v26;\nLABEL_29:\n          a2 = (__int64)v14;\n          memcpy((void *)(v6 + v3), v14, v15);\n          v3 = srca;\n        }\n      }\n    }\n  }\n  v18 = *v7;\n  if ( *v7 )\n  {\n    free(v5);\n    v28 = (void *)v6;\n    v6 = 0LL;\n    free(v28);\n    *v7 = v18;\n  }\n  else\n  {\n    if ( compar )\n    {\n      if ( v4 )\n      {\n        v20 = 0LL;\n        qsort(v5, v4, 0x10uLL, compar);\n        v21 = (const char **)&v5[16 * v4];\n        v22 = (const char **)v5;\n        v6 = sub_4112E0(v3 + 1);\n        do\n        {\n          v23 = *v22;\n          v22 += 2;\n          v20 = &stpcpy(&v20[v6], v23)[-v6 + 1];\n          free((void *)*(v22 - 2));\n        }\n        while ( v22 != v21 );\n        v19 = &v20[v6];\n      }\n      else\n      {\n        v6 = sub_4112E0(v3 + 1);\n        v19 = (char *)v6;\n      }\n      free(v5);\n    }\n    else if ( v30 == v3 )\n    {\n      v6 = sub_411340(v6, v30 + 1);\n      v19 = (char *)(v6 + v30);\n    }\n    else\n    {\n      v19 = (char *)(v6 + v3);\n    }\n    *v19 = 0;\n  }\n  return v6;\n}\n"
        },
        {
            "funcName": "sub_40F480",
            "funcStartAddr": "0x40f480",
            "funcEndAddr": "0x40f4e8",
            "decompiledFuncCode": "void *__fastcall sub_40F480(const char *a1, unsigned int a2)\n{\n  DIR *v2; // rax\n  DIR *v3; // rbx\n  void *v4; // rbp\n  void *result; // rax\n  int *v6; // rax\n  int v7; // r12d\n  int *v8; // rbx\n\n  v2 = sub_40ABC0(a1);\n  if ( !v2 )\n    return 0LL;\n  v3 = v2;\n  v4 = (void *)sub_40F0E0(v2, a2);\n  if ( !closedir(v3) )\n    return v4;\n  v6 = __errno_location();\n  v7 = *v6;\n  v8 = v6;\n  free(v4);\n  result = 0LL;\n  *v8 = v7;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40F520",
            "funcStartAddr": "0x40f520",
            "funcEndAddr": "0x40f769",
            "decompiledFuncCode": "__int64 __fastcall sub_40F520(int *a1, const char *a2, unsigned int a3, int *a4)\n{\n  char v5; // r14\n  int v6; // eax\n  int v7; // r13d\n  int v8; // eax\n  int v9; // ecx\n  int v10; // eax\n  unsigned int v11; // r12d\n  bool v12; // al\n  __int64 result; // rax\n  int *v14; // rax\n  int v15; // ebp\n  int *v16; // rbx\n  __pid_t v17; // eax\n  int v18; // eax\n\n  if ( a4 )\n  {\n    v5 = a3;\n    v6 = __open_2(a2, (a3 << 17) & 0x20000 | 0x10900);\n    *a4 = v6;\n    v7 = v6;\n    v8 = *__errno_location();\n    a4[1] = v8;\n    if ( v7 < 0 )\n    {\n      if ( v8 != 13 )\n        return (unsigned int)-1;\n    }\n    else if ( (v5 & 2) != 0 )\n    {\n      return 0;\n    }\n  }\n  else\n  {\n    v7 = -1;\n  }\n  v9 = *a1;\n  if ( (unsigned int)*a1 > 5 )\n    goto LABEL_37;\n  if ( ((1LL << v9) & 0x36) != 0 )\n    goto LABEL_10;\n  if ( ((1LL << v9) & 8) != 0 )\n  {\n    if ( a1[1] >= 0 )\n      goto LABEL_10;\n    goto LABEL_26;\n  }\n  if ( v9 )\nLABEL_37:\n    __assert_fail(\"0\", \"lib/savewd.c\", 0x63u, \"savewd_save\");\n  v10 = sub_40AE10(\".\", 0, a3);\n  if ( v10 >= 0 )\n  {\n    *a1 = 1;\n    a1[1] = v10;\n    goto LABEL_10;\n  }\n  v18 = *__errno_location();\n  if ( v18 != 13 && v18 != 116 )\n  {\n    *a1 = 4;\n    a1[1] = v18;\n    goto LABEL_10;\n  }\n  *(_QWORD *)a1 = 0xFFFFFFFF00000003LL;\nLABEL_26:\n  v17 = fork();\n  a1[1] = v17;\n  if ( v17 )\n  {\n    if ( v17 > 0 )\n    {\n      v12 = 1;\n      v11 = -2;\n      goto LABEL_21;\n    }\n    *a1 = 4;\n    a1[1] = *__errno_location();\n  }\nLABEL_10:\n  if ( v7 < 0 )\n  {\n    v11 = chdir(a2);\n    if ( !v11 )\n      goto LABEL_18;\n    return v11;\n  }\n  v11 = fchdir(v7);\n  if ( v11 )\n  {\n    v12 = a4 == 0LL;\n    goto LABEL_21;\n  }\nLABEL_18:\n  switch ( *a1 )\n  {\n    case 1:\n      *a1 = 2;\n      break;\n    case 2:\n    case 4:\n    case 5:\n      break;\n    case 3:\n      if ( a1[1] )\n        __assert_fail(\"wd->val.child == 0\", \"lib/savewd.c\", 0x9Bu, \"savewd_chdir\");\n      return result;\n    default:\n      __assert_fail(\"0\", \"lib/savewd.c\", 0x9Fu, \"savewd_chdir\");\n  }\n  v12 = a4 == 0LL;\n  v11 = 0;\nLABEL_21:\n  if ( v7 < 0 || !v12 )\n    return v11;\n  v14 = __errno_location();\n  v15 = *v14;\n  v16 = v14;\n  close(v7);\n  result = v11;\n  *v16 = v15;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40F770",
            "funcStartAddr": "0x40f770",
            "funcEndAddr": "0x40f896",
            "decompiledFuncCode": "int __fastcall sub_40F770(_DWORD *a1, int a2)\n{\n  __pid_t v2; // ebp\n  int result; // eax\n  int v4; // r12d\n  int *v5; // rbp\n  __int16 v6; // ax\n  int *v7; // rax\n  int stat_loc; // [rsp+Ch] [rbp-1Ch] BYREF\n\n  switch ( *a1 )\n  {\n    case 0:\n    case 1:\n      return 0;\n    case 2:\n      result = fchdir(a1[1]);\n      if ( result )\n      {\n        v7 = __errno_location();\n        v4 = *v7;\n        v5 = v7;\n        close(a1[1]);\n        *a1 = 4;\n        a1[1] = v4;\nLABEL_6:\n        *v5 = v4;\n        return -1;\n      }\n      else\n      {\n        *a1 = 1;\n      }\n      return result;\n    case 3:\n      v2 = a1[1];\n      if ( !v2 )\n        _exit(a2);\n      if ( v2 <= 0 )\n        return 0;\n      while ( waitpid(v2, &stat_loc, 0) < 0 )\n      {\n        if ( *__errno_location() != 4 )\n          __assert_fail(\"(*__errno_location ()) == 4\", \"lib/savewd.c\", 0xD8u, \"savewd_restore\");\n      }\n      v6 = stat_loc;\n      a1[1] = -1;\n      if ( (v6 & 0x7F) != 0 )\n      {\n        raise(v6 & 0x7F);\n        HIBYTE(v6) = BYTE1(stat_loc);\n      }\n      return HIBYTE(v6);\n    case 4:\n      v4 = a1[1];\n      v5 = __errno_location();\n      goto LABEL_6;\n    default:\n      __assert_fail(\"0\", \"lib/savewd.c\", 0xE2u, \"savewd_restore\");\n  }\n}\n"
        },
        {
            "funcName": "sub_40F8A0",
            "funcStartAddr": "0x40f8a0",
            "funcEndAddr": "0x40f909",
            "decompiledFuncCode": "int __fastcall sub_40F8A0(int *a1)\n{\n  int result; // eax\n\n  result = *a1;\n  switch ( *a1 )\n  {\n    case 0:\n    case 4:\n      break;\n    case 1:\n    case 2:\n      result = close(a1[1]);\n      break;\n    case 3:\n      result = a1[1];\n      if ( result >= 0 )\n        __assert_fail(\"wd->val.child < 0\", \"lib/savewd.c\", 0xF7u, \"savewd_finish\");\n      return result;\n    default:\n      __assert_fail(\"0\", \"lib/savewd.c\", 0xFBu, \"savewd_finish\");\n  }\n  *a1 = 5;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40F910",
            "funcStartAddr": "0x40f910",
            "funcEndAddr": "0x40fa58",
            "decompiledFuncCode": "__int64 __fastcall sub_40F910(int a1, __int64 a2, __int64 (__fastcall *a3)(_QWORD, int *, __int64), __int64 a4)\n{\n  int v5; // ebp\n  __int64 v6; // rax\n  _BYTE *v7; // rdx\n  __int64 v8; // r15\n  int v9; // r14d\n  int i; // eax\n  int v11; // eax\n  int v12; // eax\n  _QWORD *v13; // r15\n  unsigned __int64 v14; // rbp\n  int v15; // eax\n  int v18[16]; // [rsp+28h] [rbp-40h] BYREF\n\n  v18[0] = 0;\n  if ( a1 - 1 < 0 )\n    goto LABEL_18;\n  v5 = a1 - 1;\n  if ( **(_BYTE **)(a2 + 8LL * (a1 - 1)) == 47 )\n  {\n    v6 = a1 - 2;\n    do\n    {\n      v5 = v6;\n      if ( (int)v6 < 0 )\n        break;\n      v7 = *(_BYTE **)(a2 + 8 * v6--);\n    }\n    while ( *v7 == 47 );\n  }\n  if ( v5 <= 0 )\n  {\nLABEL_18:\n    v9 = 0;\n    v5 = 0;\n  }\n  else\n  {\n    v8 = a2;\n    v9 = 0;\n    for ( i = 0; ; i = v18[0] )\n    {\n      if ( i != 3 || v18[1] <= 0 )\n      {\n        v11 = a3(*(_QWORD *)v8, v18, a4);\n        if ( v9 < v11 )\n          v9 = v11;\n      }\n      if ( **(_BYTE **)(v8 + 8) != 47 )\n      {\n        v12 = sub_40F770(v18, v9);\n        if ( v9 < v12 )\n          v9 = v12;\n      }\n      v8 += 8LL;\n      if ( v8 == a2 + 8LL * (unsigned int)(v5 - 1) + 8 )\n        break;\n    }\n  }\n  sub_40F8A0(v18);\n  if ( a1 > v5 )\n  {\n    v13 = (_QWORD *)(a2 + 8LL * v5);\n    v14 = a2 + 8 * (v5 + (unsigned __int64)(unsigned int)(a1 - 1 - v5)) + 8;\n    do\n    {\n      v15 = a3(*v13, v18, a4);\n      if ( v9 < v15 )\n        v9 = v15;\n      ++v13;\n    }\n    while ( v13 != (_QWORD *)v14 );\n  }\n  return (unsigned int)v9;\n}\n"
        },
        {
            "funcName": "sub_40FA60",
            "funcStartAddr": "0x40fa60",
            "funcEndAddr": "0x40fab4",
            "decompiledFuncCode": "__int64 __fastcall sub_40FA60(char *filename)\n{\n  int v1; // ebx\n  int *v2; // rax\n  struct stat v4; // [rsp+0h] [rbp-98h] BYREF\n\n  v1 = __lxstat(1, filename, &v4);\n  v2 = __errno_location();\n  if ( v1 && *v2 != 75 )\n    return (unsigned int)-(*v2 != 2);\n  *v2 = 17;\n  return 0xFFFFFFFFLL;\n}\n"
        },
        {
            "funcName": "sub_40FAC0",
            "funcStartAddr": "0x40fac0",
            "funcEndAddr": "0x40faca",
            "decompiledFuncCode": "int __fastcall sub_40FAC0(const char *a1)\n{\n  return mkdir(a1, 0x1C0u);\n}\n"
        },
        {
            "funcName": "sub_40FAF0",
            "funcStartAddr": "0x40faf0",
            "funcEndAddr": "0x40fb0d",
            "decompiledFuncCode": "void __noreturn sub_40FAF0()\n{\n  __assert_fail(\"! \\\"invalid KIND in __gen_tempname\\\"\", \"lib/tempname.c\", 0x147u, \"gen_tempname_len\");\n}\n"
        },
        {
            "funcName": "sub_40FB10",
            "funcStartAddr": "0x40fb10",
            "funcEndAddr": "0x40fc6d",
            "decompiledFuncCode": "__int64 __fastcall sub_40FB10(char *s, int a2, __int64 a3, __int64 (__fastcall *a4)(char *, __int64), size_t a5)\n{\n  int *v6; // r15\n  size_t v7; // rax\n  size_t v8; // rdx\n  size_t v9; // rbx\n  void *v10; // rbp\n  int v11; // r12d\n  char *v12; // rbx\n  char *v13; // r14\n  int v14; // edx\n  int v15; // ecx\n  unsigned int v16; // edx\n  int v18; // [rsp+8h] [rbp-60h]\n  const char *v19; // [rsp+10h] [rbp-58h]\n  int v20; // [rsp+10h] [rbp-58h]\n  int v23; // [rsp+2Ch] [rbp-3Ch]\n\n  v6 = __errno_location();\n  v23 = *v6;\n  v7 = strlen(s);\n  v8 = a5 + a2;\n  if ( v8 > v7 || (v9 = v7 - v8, v19 = &s[v7 - v8], a5 > strspn(v19, \"X\")) )\n  {\n    *v6 = 22;\n    return (unsigned int)-1;\n  }\n  else\n  {\n    v10 = (void *)sub_413800(0LL, a5);\n    if ( v10 )\n    {\n      v11 = 238328;\n      v12 = &s[a5 + v9];\n      while ( 1 )\n      {\n        v13 = (char *)v19;\n        if ( a5 )\n        {\n          do\n            *v13++ = byte_41A1C0[sub_413840(v10, 61LL)];\n          while ( v13 != v12 );\n        }\n        v14 = a4(s, a3);\n        if ( v14 >= 0 )\n        {\n          *v6 = v23;\n          v15 = v23;\n          goto LABEL_12;\n        }\n        v15 = *v6;\n        if ( *v6 != 17 )\n          break;\n        if ( !--v11 )\n        {\n          sub_413960(v10);\n          *v6 = 17;\n          return (unsigned int)-1;\n        }\n      }\n      v14 = -1;\nLABEL_12:\n      v20 = v14;\n      v18 = v15;\n      sub_413960(v10);\n      v16 = v20;\n      *v6 = v18;\n    }\n    else\n    {\n      return (unsigned int)-1;\n    }\n  }\n  return v16;\n}\n"
        },
        {
            "funcName": "sub_40FC70",
            "funcStartAddr": "0x40fc70",
            "funcEndAddr": "0x40fc9b",
            "decompiledFuncCode": "__int64 __fastcall sub_40FC70(char *a1, int a2, int a3, unsigned int a4, size_t a5)\n{\n  int v6[3]; // [rsp+Ch] [rbp-Ch] BYREF\n\n  v6[0] = a3;\n  if ( a4 > 2 )\n    sub_40FAF0();\n  return sub_40FB10(a1, a2, (__int64)v6, (__int64 (__fastcall *)(char *, __int64))*(&off_41A180 + a4), a5);\n}\n"
        },
        {
            "funcName": "sub_40FCA0",
            "funcStartAddr": "0x40fca0",
            "funcEndAddr": "0x40fcd1",
            "decompiledFuncCode": "__int64 __fastcall sub_40FCA0(char *a1, int a2, int a3, unsigned int a4)\n{\n  int v5[3]; // [rsp+Ch] [rbp-Ch] BYREF\n\n  v5[0] = a3;\n  if ( a4 > 2 )\n    sub_40FAF0();\n  return sub_40FB10(a1, a2, (__int64)v5, (__int64 (__fastcall *)(char *, __int64))*(&off_41A180 + a4), 6uLL);\n}\n"
        },
        {
            "funcName": "sub_40FCE0",
            "funcStartAddr": "0x40fce0",
            "funcEndAddr": "0x40fceb",
            "decompiledFuncCode": "__int64 __fastcall sub_40FCE0(char *a1, int a2, __int64 a3, __int64 (__fastcall *a4)(char *, __int64))\n{\n  return sub_40FB10(a1, a2, a3, a4, 6uLL);\n}\n"
        },
        {
            "funcName": "sub_40FCF0",
            "funcStartAddr": "0x40fcf0",
            "funcEndAddr": "0x40fd3e",
            "decompiledFuncCode": "__int64 __fastcall sub_40FCF0(unsigned int fd)\n{\n  __int64 result; // rax\n  unsigned int v2; // r12d\n  int *v3; // rax\n  int v4; // r13d\n  int *v5; // rbp\n\n  if ( fd > 2 )\n    return fd;\n  v2 = sub_4143D0();\n  v3 = __errno_location();\n  v4 = *v3;\n  v5 = v3;\n  close(fd);\n  result = v2;\n  *v5 = v4;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_40FD40",
            "funcStartAddr": "0x40fd40",
            "funcEndAddr": "0x40fd4c",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_40FD40(_QWORD *a1, unsigned __int64 a2)\n{\n  return *a1 % a2;\n}\n"
        },
        {
            "funcName": "sub_40FD50",
            "funcStartAddr": "0x40fd50",
            "funcEndAddr": "0x40fd5a",
            "decompiledFuncCode": "bool __fastcall sub_40FD50(_QWORD *a1, _QWORD *a2)\n{\n  return *a1 == *a2;\n}\n"
        },
        {
            "funcName": "sub_40FD60",
            "funcStartAddr": "0x40fd60",
            "funcEndAddr": "0x4104c9",
            "decompiledFuncCode": "__int64 __fastcall sub_40FD60(char *a1, __int64 a2, __int64 a3, char a4)\n{\n  __int64 v4; // r13\n  __int64 v5; // r12\n  signed __int64 v6; // rbp\n  __int64 v7; // r14\n  int v8; // r15d\n  unsigned int i; // ebx\n  _QWORD *v10; // rdx\n  _QWORD *v11; // rsi\n  __int64 v12; // rax\n  __int64 *v13; // r9\n  int v14; // edi\n  __int64 v16; // rcx\n  int v17; // r10d\n  int v18; // edi\n  int v19; // ecx\n  int v20; // esi\n  int v21; // r8d\n  int v22; // r15d\n  int v23; // r11d\n  signed __int64 v24; // rax\n  int v25; // eax\n  int v26; // r8d\n  __int64 *v27; // r9\n  int v28; // eax\n  int v29; // r8d\n  int v30; // r10d\n  char tv_sec; // al\n  int tv_nsec; // ecx\n  int v33; // eax\n  int v34; // r10d\n  int v35; // ecx\n  int v36; // esi\n  __int64 v37; // rax\n  _QWORD *v38; // rax\n  __int64 v39; // rdi\n  __int64 *v40; // [rsp+0h] [rbp-148h]\n  __int64 *v41; // [rsp+0h] [rbp-148h]\n  __int64 *v42; // [rsp+0h] [rbp-148h]\n  bool v43; // [rsp+8h] [rbp-140h]\n  int v45; // [rsp+10h] [rbp-138h]\n  int v46; // [rsp+18h] [rbp-130h]\n  int v47; // [rsp+18h] [rbp-130h]\n  int v48; // [rsp+18h] [rbp-130h]\n  int v49; // [rsp+18h] [rbp-130h]\n  _QWORD *v50; // [rsp+18h] [rbp-130h]\n  __int64 v52; // [rsp+30h] [rbp-118h]\n  __int64 v53; // [rsp+48h] [rbp-100h]\n  __int64 v54; // [rsp+50h] [rbp-F8h] BYREF\n  int v55; // [rsp+58h] [rbp-F0h]\n  char v56; // [rsp+5Ch] [rbp-ECh]\n  __int64 v57; // [rsp+60h] [rbp-E8h]\n  __int64 v58; // [rsp+68h] [rbp-E0h]\n  __int64 v59; // [rsp+70h] [rbp-D8h]\n  __int64 v60; // [rsp+78h] [rbp-D0h]\n  struct stat stat_buf; // [rsp+80h] [rbp-C8h] BYREF\n\n  v4 = *(_QWORD *)(a3 + 96);\n  v5 = *(_QWORD *)(a2 + 88);\n  v6 = *(_QWORD *)(a3 + 88);\n  v7 = *(_QWORD *)(a2 + 96);\n  v8 = v4;\n  i = a4 & 1;\n  if ( (a4 & 1) == 0 )\n  {\nLABEL_12:\n    if ( v6 > v5 )\n      return (unsigned int)-1;\n    i = 1;\n    if ( v6 == v5 )\n    {\n      if ( v8 <= (int)v7 )\n        return v8 < (int)v7;\n      return (unsigned int)-1;\n    }\n    return i;\n  }\n  v43 = v5 == v6 && (_DWORD)v7 == (_DWORD)v4;\n  if ( v43 )\n    return 0;\n  if ( v6 - 1 > v5 )\n    return (unsigned int)-1;\n  if ( v5 - 1 <= v6 )\n  {\n    v10 = (_QWORD *)qword_621B20;\n    if ( !qword_621B20 )\n    {\n      v10 = sub_40BB50(\n              16LL,\n              0LL,\n              (unsigned __int64 (__fastcall *)(__int64, unsigned __int64))sub_40FD40,\n              (bool (__fastcall *)(__int64, __int64))sub_40FD50,\n              (__int64)free);\n      qword_621B20 = (__int64)v10;\n      if ( !v10 )\n        goto LABEL_21;\n    }\n    v11 = (_QWORD *)qword_621B18;\n    if ( !qword_621B18 )\n    {\n      v50 = v10;\n      v38 = malloc(0x10uLL);\n      v11 = v38;\n      qword_621B18 = (__int64)v38;\n      if ( !v38 )\n      {\n        v39 = qword_621B20;\n        goto LABEL_59;\n      }\n      *((_DWORD *)v38 + 2) = 2000000000;\n      v10 = v50;\n      *((_BYTE *)v38 + 12) = 0;\n    }\n    *v11 = *(_QWORD *)a2;\n    v12 = sub_40C2F0((__int64)v10, (__int64)v11);\n    v13 = (__int64 *)v12;\n    if ( v12 )\n    {\n      if ( qword_621B18 == v12 )\n        qword_621B18 = 0LL;\nLABEL_10:\n      v14 = *((_DWORD *)v13 + 2);\n      v46 = v14;\n      if ( *((_BYTE *)v13 + 12) )\n      {\n        v6 = ~(v14 == 2000000000) & (unsigned __int64)v6;\n        v8 = v4 - (int)v4 % v14;\n        goto LABEL_12;\n      }\nLABEL_22:\n      v16 = *(_QWORD *)(a2 + 112);\n      v52 = *(_QWORD *)(a2 + 80);\n      v17 = (int)v16 / 10;\n      v18 = (int)v7 / 10;\n      if ( ((int)v7 % 10) | ((int)v52 % 10) | ((int)v16 % 10) )\n      {\nLABEL_55:\n        *((_DWORD *)v13 + 2) = i;\n        *((_BYTE *)v13 + 12) = 1;\n        goto LABEL_12;\n      }\n      v19 = (int)v52 / 10;\n      v20 = v17;\n      v53 = *(_QWORD *)(a2 + 72);\n      if ( v46 <= 10 )\n      {\n        *((_DWORD *)v13 + 2) = 10;\n        v24 = v6;\n        v21 = 10;\n      }\n      else\n      {\n        v21 = 10;\n        if ( ((int)v7 / 10 % 10) | (v17 % 10) | ((int)v52 / 10 % 10) )\n        {\n          *((_DWORD *)v13 + 2) = 10;\n          v24 = v6;\n        }\n        else\n        {\n          v22 = 8;\n          do\n          {\n            v23 = 10 * v21;\n            v21 = v23;\n            v19 /= 10;\n            v20 /= 10;\n            v18 /= 10;\n            if ( v23 >= v46 || (v18 % 10) | (v20 % 10) | (v19 % 10) )\n            {\n              v43 = v23 == 2000000000;\n              v8 = v4;\n              *((_DWORD *)v13 + 2) = v23;\n              v24 = v6 & ~(v23 == 2000000000);\n              goto LABEL_31;\n            }\n            --v22;\n          }\n          while ( v22 );\n          v8 = v4;\n          if ( ((*(_BYTE *)(a2 + 104) | (unsigned __int8)(v5 | v53)) & 1) != 0 )\n          {\n            *((_DWORD *)v13 + 2) = 1000000000;\n            v24 = v6;\n            v21 = 1000000000;\n          }\n          else\n          {\n            *((_DWORD *)v13 + 2) = 2000000000;\n            v21 = 2000000000;\n            v24 = v6 & 0xFFFFFFFFFFFFFFFELL;\n            v43 = 1;\n          }\n        }\n      }\nLABEL_31:\n      if ( v5 > v6 || (int)v7 >= (int)v4 && v5 == v6 )\n        return i;\n      if ( v5 < v24 || v5 == v24 && (int)v4 - v8 % v21 > (int)v7 )\n        return (unsigned int)-1;\n      v47 = v21;\n      v57 = v53;\n      v58 = (int)v52;\n      v59 = v5 | v43;\n      v60 = (int)(v21 / 9u + v7);\n      v40 = v13;\n      if ( (*(_DWORD *)(a2 + 24) & 0xF000) == 40960 )\n      {\n        v25 = sub_410AB0(a1);\n        v27 = v40;\n        v26 = v47;\n      }\n      else\n      {\n        v25 = sub_410AA0(a1);\n        v26 = v47;\n        v27 = v40;\n      }\n      if ( v25 )\n        return (unsigned int)-2;\n      v48 = v26;\n      v41 = v27;\n      if ( (*(_DWORD *)(a2 + 24) & 0xF000) == 40960 )\n      {\n        v28 = __lxstat(1, a1, &stat_buf);\n        v13 = v41;\n        v29 = v48;\n      }\n      else\n      {\n        v28 = __xstat(1, a1, &stat_buf);\n        v29 = v48;\n        v13 = v41;\n      }\n      v30 = v28;\n      tv_sec = stat_buf.st_mtim.tv_sec;\n      tv_nsec = stat_buf.st_mtim.tv_nsec;\n      if ( v30 | v5 ^ stat_buf.st_mtim.tv_sec | stat_buf.st_mtim.tv_nsec ^ (int)v7 )\n      {\n        v60 = (int)v7;\n        v59 = v5;\n        v33 = *(_DWORD *)(a2 + 24);\n        v49 = v29;\n        v45 = v30;\n        v42 = v13;\n        if ( (v33 & 0xF000) == 40960 )\n        {\n          sub_410AB0(a1);\n          v13 = v42;\n          v34 = v45;\n          v29 = v49;\n        }\n        else\n        {\n          sub_410AA0(a1);\n          v29 = v49;\n          v34 = v45;\n          v13 = v42;\n        }\n        if ( v34 )\n          return (unsigned int)-2;\n        tv_sec = stat_buf.st_mtim.tv_sec;\n        tv_nsec = stat_buf.st_mtim.tv_nsec;\n      }\n      v35 = 1000000000 * (tv_sec & 1) + tv_nsec;\n      if ( v35 == 10 * (v35 / 10) )\n      {\n        if ( v29 != 10 )\n        {\n          v36 = 9;\n          for ( i = 10; i != v29; i *= 10 )\n          {\n            v35 /= 10;\n            if ( v35 != 10 * (v35 / 10) )\n              break;\n            if ( !--v36 )\n            {\n              v37 = -2LL;\n              i = 2000000000;\n              goto LABEL_54;\n            }\n          }\n          v37 = ~(i == 2000000000);\n          goto LABEL_54;\n        }\n        i = 10;\n      }\n      v37 = -1LL;\nLABEL_54:\n      v6 &= v37;\n      v8 = v4 - v8 % (int)i;\n      goto LABEL_55;\n    }\n    v39 = qword_621B20;\n    if ( !qword_621B20 )\n    {\nLABEL_21:\n      v55 = 2000000000;\n      v13 = &v54;\n      v56 = 0;\n      v46 = 2000000000;\n      goto LABEL_22;\n    }\nLABEL_59:\n    v54 = *(_QWORD *)a2;\n    v13 = (__int64 *)sub_40B8E0(v39, (__int64)&v54);\n    if ( v13 )\n      goto LABEL_10;\n    goto LABEL_21;\n  }\n  return i;\n}\n"
        },
        {
            "funcName": "sub_4104D0",
            "funcStartAddr": "0x4104d0",
            "funcEndAddr": "0x41059e",
            "decompiledFuncCode": "__int64 __fastcall sub_4104D0(_QWORD *a1, struct timespec **a2)\n{\n  struct timespec *v2; // rbx\n  __syscall_slong_t tv_nsec; // rax\n  __syscall_slong_t v4; // rdx\n  __syscall_slong_t v5; // rax\n  __int64 result; // rax\n  __syscall_slong_t v7; // rax\n\n  v2 = *a2;\n  tv_nsec = (*a2)->tv_nsec;\n  v4 = (*a2)[1].tv_nsec;\n  if ( tv_nsec == 1073741822 )\n  {\n    result = 1LL;\n    if ( v4 == 1073741822 )\n      return result;\n    v7 = a1[10];\n    v2->tv_sec = a1[9];\n    v2->tv_nsec = v7;\n  }\n  else if ( tv_nsec == 0x3FFFFFFF )\n  {\n    if ( v4 == 0x3FFFFFFF )\n    {\n      *a2 = 0LL;\n      return 0LL;\n    }\n    sub_412F80(*a2);\n    v4 = v2[1].tv_nsec;\n    if ( v4 == 1073741822 )\n      goto LABEL_4;\n  }\n  else if ( v4 == 1073741822 )\n  {\nLABEL_4:\n    v5 = a1[12];\n    v2[1].tv_sec = a1[11];\n    v2[1].tv_nsec = v5;\n    return 0LL;\n  }\n  result = 0LL;\n  if ( v4 == 0x3FFFFFFF )\n  {\n    sub_412F80(v2 + 1);\n    return 0LL;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4105A0",
            "funcStartAddr": "0x4105a0",
            "funcEndAddr": "0x410649",
            "decompiledFuncCode": "__int64 __fastcall sub_4105A0(_QWORD *a1)\n{\n  unsigned __int64 v1; // r9\n  unsigned __int64 v2; // rdx\n  int v3; // ecx\n  int v4; // r10d\n\n  v1 = a1[1];\n  if ( v1 - 1073741822 > 1 && v1 > 0x3B9AC9FF || (v2 = a1[3], v2 - 1073741822 > 1) && v2 > 0x3B9AC9FF )\n  {\n    *__errno_location() = 22;\n    return 0xFFFFFFFFLL;\n  }\n  else\n  {\n    v3 = 0;\n    v4 = 0;\n    if ( v1 - 1073741822 <= 1 )\n    {\n      *a1 = 0LL;\n      v4 = 1;\n      v3 = v1 == 1073741822;\n    }\n    if ( v2 - 1073741822 <= 1 )\n    {\n      a1[2] = 0LL;\n      v4 = 1;\n      v3 += v2 == 1073741822;\n    }\n    return v4 + (unsigned int)(v3 == 1);\n  }\n}\n"
        },
        {
            "funcName": "sub_410660",
            "funcStartAddr": "0x410660",
            "funcEndAddr": "0x410a9e",
            "decompiledFuncCode": "__int64 __fastcall sub_410660(int fd, char *filename, const __m128i *a3)\n{\n  __m128i v5; // xmm1\n  int v6; // r13d\n  struct timespec *v7; // rsi\n  unsigned int v8; // r12d\n  bool v9; // zf\n  __syscall_slong_t v11; // rdi\n  const __m128i *p_tvp; // r13\n  __syscall_slong_t v13; // rsi\n  struct timeval *v14; // rdx\n  struct utimbuf *p_file_times; // rsi\n  __time_t v16; // rax\n  bool v18; // al\n  __time_t tv_sec; // rdx\n  bool v20; // bp\n  bool v21; // r14\n  __time_t v22; // rax\n  __m128i si128; // xmm3\n  bool v24; // dl\n  bool v25; // r14\n  __syscall_slong_t tv_nsec; // rax\n  struct timespec *times; // [rsp+8h] [rbp-120h] BYREF\n  __int128 v28[2]; // [rsp+10h] [rbp-118h] BYREF\n  struct timeval tvp; // [rsp+30h] [rbp-F8h] BYREF\n  __time_t v30; // [rsp+40h] [rbp-E8h]\n  __syscall_slong_t v31; // [rsp+48h] [rbp-E0h]\n  struct utimbuf file_times; // [rsp+50h] [rbp-D8h] BYREF\n  __m128i v33; // [rsp+60h] [rbp-C8h]\n  struct stat stat_buf; // [rsp+70h] [rbp-B8h] BYREF\n\n  if ( a3 )\n  {\n    v5 = _mm_loadu_si128(a3 + 1);\n    times = (struct timespec *)v28;\n    v28[0] = (__int128)_mm_loadu_si128(a3);\n    v28[1] = (__int128)v5;\n    v6 = sub_4105A0(v28);\n    if ( v6 < 0 )\n      return (unsigned int)-1;\n  }\n  else\n  {\n    times = 0LL;\n    v6 = 0;\n  }\n  if ( fd < 0 && !filename )\n  {\n    *__errno_location() = 9;\n    return (unsigned int)-1;\n  }\n  if ( dword_621B2C < 0 )\n    goto LABEL_11;\n  if ( v6 == 2 )\n  {\n    if ( fd < 0 )\n      v18 = __xstat(1, filename, &stat_buf) != 0;\n    else\n      v18 = __fxstat(1, fd, &stat_buf) != 0;\n    if ( v18 )\n      return (unsigned int)-1;\n    v7 = times;\n    if ( times->tv_nsec == 1073741822 )\n    {\n      tv_nsec = stat_buf.st_atim.tv_nsec;\n      v6 = 3;\n      times->tv_sec = stat_buf.st_atim.tv_sec;\n      v7->tv_nsec = tv_nsec;\n    }\n    else\n    {\n      v6 = 3;\n      if ( times[1].tv_nsec == 1073741822 )\n      {\n        tv_sec = stat_buf.st_mtim.tv_sec;\n        times[1].tv_nsec = stat_buf.st_mtim.tv_nsec;\n        v7[1].tv_sec = tv_sec;\n      }\n    }\n  }\n  else\n  {\n    v7 = times;\n  }\n  if ( fd < 0 )\n  {\n    v8 = utimensat(-100, filename, v7, 0);\n    v9 = v8 == 0;\n    if ( (int)v8 > 0 )\n      goto LABEL_10;\n  }\n  else\n  {\n    v8 = futimens(fd, v7);\n    v9 = v8 == 0;\n    if ( (int)v8 > 0 )\n    {\nLABEL_10:\n      *__errno_location() = 38;\n      goto LABEL_11;\n    }\n  }\n  if ( v9 || *__errno_location() != 38 )\n  {\n    dword_621B2C = 1;\n    return v8;\n  }\nLABEL_11:\n  dword_621B2C = -1;\n  dword_621B28 = -1;\n  if ( !v6 )\n    goto LABEL_18;\n  if ( v6 != 3 && (fd < 0 ? __xstat(1, filename, &stat_buf) != 0 : __fxstat(1, fd, &stat_buf) != 0) )\n    return (unsigned int)-1;\n  if ( !times )\n    goto LABEL_26;\n  v8 = 0;\n  if ( (unsigned __int8)sub_4104D0(&stat_buf, &times) )\n    return v8;\nLABEL_18:\n  if ( times )\n  {\n    v11 = times->tv_nsec;\n    p_tvp = (const __m128i *)&tvp;\n    tvp.tv_sec = times->tv_sec;\n    v13 = times[1].tv_nsec;\n    v30 = times[1].tv_sec;\n    tvp.tv_usec = v11 / 1000;\n    v14 = &tvp;\n    v31 = v13 / 1000;\n    if ( fd >= 0 )\n      goto LABEL_20;\n    return (unsigned int)futimesat(-100, filename, v14);\n  }\nLABEL_26:\n  p_tvp = 0LL;\n  v14 = 0LL;\n  if ( fd < 0 )\n    return (unsigned int)futimesat(-100, filename, v14);\nLABEL_20:\n  v8 = futimesat(fd, 0LL, v14);\n  if ( !v8 )\n  {\n    if ( !p_tvp )\n      return v8;\n    v20 = p_tvp->m128i_i64[1] > 499999;\n    v21 = p_tvp[1].m128i_i64[1] > 499999;\n    if ( p_tvp->m128i_i64[1] <= 499999 && p_tvp[1].m128i_i64[1] <= 499999 )\n      return v8;\n    if ( __fxstat(1, fd, &stat_buf) )\n      return v8;\n    v22 = stat_buf.st_atim.tv_sec - p_tvp->m128i_i64[0];\n    si128 = _mm_load_si128(p_tvp + 1);\n    v24 = stat_buf.st_mtim.tv_sec - p_tvp[1].m128i_i64[0] == 1;\n    file_times = (struct utimbuf)_mm_load_si128(p_tvp);\n    v33 = si128;\n    v25 = v24 && v21;\n    if ( v22 == 1 && v20 && !stat_buf.st_atim.tv_nsec )\n    {\n      file_times.modtime = 0LL;\n      if ( !v25 || stat_buf.st_mtim.tv_nsec )\n        goto LABEL_48;\n    }\n    else if ( !v25 || stat_buf.st_mtim.tv_nsec )\n    {\n      return 0;\n    }\n    v33.m128i_i64[1] = 0LL;\nLABEL_48:\n    futimesat(fd, 0LL, (const struct timeval *)&file_times);\n    return 0;\n  }\n  v8 = -1;\n  if ( filename )\n  {\n    p_file_times = 0LL;\n    if ( times )\n    {\n      v16 = times[1].tv_sec;\n      p_file_times = &file_times;\n      file_times.actime = times->tv_sec;\n      file_times.modtime = v16;\n    }\n    return (unsigned int)utime(filename, p_file_times);\n  }\n  return v8;\n}\n"
        },
        {
            "funcName": "sub_410AA0",
            "funcStartAddr": "0x410aa0",
            "funcEndAddr": "0x410ab0",
            "decompiledFuncCode": "__int64 __fastcall sub_410AA0(char *filename, const __m128i *a2)\n{\n  return sub_410660(-1, filename, a2);\n}\n"
        },
        {
            "funcName": "sub_410AB0",
            "funcStartAddr": "0x410ab0",
            "funcEndAddr": "0x410cf8",
            "decompiledFuncCode": "__int64 __fastcall sub_410AB0(char *filename, const __m128i *a2)\n{\n  __m128i v2; // xmm1\n  int v3; // ebx\n  struct timespec *v4; // rdx\n  int v5; // eax\n  unsigned int v6; // ebp\n  unsigned int v7; // ebp\n  __int64 result; // rax\n  __time_t tv_sec; // rcx\n  __syscall_slong_t tv_nsec; // rax\n  struct timespec *times; // [rsp+8h] [rbp-D0h] BYREF\n  __int128 v12[2]; // [rsp+10h] [rbp-C8h] BYREF\n  struct stat stat_buf; // [rsp+30h] [rbp-A8h] BYREF\n\n  if ( a2 )\n  {\n    v2 = _mm_loadu_si128(a2 + 1);\n    times = (struct timespec *)v12;\n    v12[0] = (__int128)_mm_loadu_si128(a2);\n    v12[1] = (__int128)v2;\n    v3 = sub_4105A0(v12);\n    if ( v3 < 0 )\n      return (unsigned int)-1;\n    if ( dword_621B28 < 0 )\n      goto LABEL_8;\n    if ( v3 == 2 )\n    {\n      if ( __lxstat(1, filename, &stat_buf) )\n        return (unsigned int)-1;\n      v4 = times;\n      if ( times->tv_nsec == 1073741822 )\n      {\n        tv_nsec = stat_buf.st_atim.tv_nsec;\n        v3 = 3;\n        times->tv_sec = stat_buf.st_atim.tv_sec;\n        v4->tv_nsec = tv_nsec;\n      }\n      else\n      {\n        v3 = 3;\n        if ( times[1].tv_nsec == 1073741822 )\n        {\n          tv_sec = stat_buf.st_mtim.tv_sec;\n          times[1].tv_nsec = stat_buf.st_mtim.tv_nsec;\n          v4[1].tv_sec = tv_sec;\n        }\n      }\n    }\n    else\n    {\n      v4 = times;\n    }\n  }\n  else\n  {\n    v4 = 0LL;\n    v3 = 0;\n    times = 0LL;\n    if ( dword_621B28 < 0 )\n    {\n      dword_621B28 = -1;\n      goto LABEL_17;\n    }\n  }\n  v5 = utimensat(-100, filename, v4, 256);\n  v6 = v5;\n  if ( v5 > 0 )\n  {\n    *__errno_location() = 38;\n    goto LABEL_8;\n  }\n  if ( v5 && *__errno_location() == 38 )\n  {\nLABEL_8:\n    dword_621B28 = -1;\n    if ( v3 )\n    {\n      if ( v3 == 3 )\n      {\n        if ( !times )\n        {\nLABEL_12:\n          if ( (stat_buf.st_mode & 0xF000) != 40960 )\n            return (unsigned int)sub_410660(-1, filename, (const __m128i *)times);\n          *__errno_location() = 38;\n          return (unsigned int)-1;\n        }\n      }\n      else\n      {\n        if ( __lxstat(1, filename, &stat_buf) )\n          return (unsigned int)-1;\n        if ( !times )\n          goto LABEL_12;\n      }\n      v7 = 0;\n      if ( (unsigned __int8)sub_4104D0(&stat_buf, &times) )\n        return v7;\n      goto LABEL_12;\n    }\nLABEL_17:\n    if ( __lxstat(1, filename, &stat_buf) )\n      return (unsigned int)-1;\n    goto LABEL_12;\n  }\n  dword_621B2C = 1;\n  result = v6;\n  dword_621B28 = 1;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_410D00",
            "funcStartAddr": "0x40303d",
            "funcEndAddr": "0x403042",
            "decompiledFuncCode": "__int64 __fastcall sub_410D00(FILE *stream, const char *a2, const char *a3, const char *a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r13\n  __int64 v13; // r12\n  __int64 v14; // r15\n  __int64 v15; // r14\n  __int64 v16; // rbx\n  char *v17; // rax\n  const char *v19; // rsi\n  __int64 v20; // r8\n  __int64 v21; // r13\n  __int64 v22; // r12\n  __int64 v23; // r15\n  __int64 v24; // r14\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // r15\n  __int64 v43; // r14\n  __int64 v44; // r13\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r13\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  __int64 v51; // r8\n  __int64 v52; // rbx\n  char *v53; // rax\n  __int64 v54; // r8\n  __int64 v55; // [rsp-10h] [rbp-68h]\n  __int64 v56; // [rsp+0h] [rbp-58h]\n  __int64 v57; // [rsp+0h] [rbp-58h]\n  __int64 v58; // [rsp+0h] [rbp-58h]\n  __int64 v59; // [rsp+0h] [rbp-58h]\n  __int64 v60; // [rsp+8h] [rbp-50h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+8h] [rbp-50h]\n  __int64 v63; // [rsp+10h] [rbp-48h]\n  __int64 v64; // [rsp+10h] [rbp-48h]\n  __int64 v65; // [rsp+18h] [rbp-40h]\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v27 = *a5;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v28, v27);\n    case 2LL:\n      v29 = a5[1];\n      v30 = *a5;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v31, v30, v29);\n    case 3LL:\n      v32 = a5[2];\n      v33 = a5[1];\n      v34 = *a5;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v35, v34, v33, v32);\n    case 4LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v40, v39, v38, v37, v36);\n      return v55;\n    case 6LL:\n      v41 = a5[5];\n      v42 = a5[4];\n      v43 = a5[3];\n      v58 = a5[1];\n      v44 = a5[2];\n      v45 = *a5;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v46, v45, v58, v44, v43, v42, v41);\n    case 7LL:\n      v47 = a5[6];\n      v48 = a5[5];\n      v49 = a5[4];\n      v50 = a5[3];\n      v51 = a5[1];\n      v62 = a5[2];\n      v52 = *a5;\n      v59 = v51;\n      v53 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v53, v52, v59, v62, v50, v49, v48, v47);\n    case 8LL:\n      v10 = a5[2];\n      v11 = a5[1];\n      v12 = a5[6];\n      v13 = a5[5];\n      v14 = a5[4];\n      v63 = a5[7];\n      v15 = a5[3];\n      v16 = *a5;\n      v56 = v10;\n      v60 = v11;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16, v60, v56, v15, v14, v13, v12, v63);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v54 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v54;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return __fprintf_chk(stream, 1LL, v26, v25, v61, v57, v24, v23, v22, v21, v64, v65);\n  }\n}\n\n__int64 __fastcall sub_410D00(FILE *stream, const char *a2, const char *a3, const char *a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r13\n  __int64 v13; // r12\n  __int64 v14; // r15\n  __int64 v15; // r14\n  __int64 v16; // rbx\n  char *v17; // rax\n  const char *v19; // rsi\n  __int64 v20; // r8\n  __int64 v21; // r13\n  __int64 v22; // r12\n  __int64 v23; // r15\n  __int64 v24; // r14\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // r15\n  __int64 v43; // r14\n  __int64 v44; // r13\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r13\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  __int64 v51; // r8\n  __int64 v52; // rbx\n  char *v53; // rax\n  __int64 v54; // r8\n  __int64 v55; // [rsp-10h] [rbp-68h]\n  __int64 v56; // [rsp+0h] [rbp-58h]\n  __int64 v57; // [rsp+0h] [rbp-58h]\n  __int64 v58; // [rsp+0h] [rbp-58h]\n  __int64 v59; // [rsp+0h] [rbp-58h]\n  __int64 v60; // [rsp+8h] [rbp-50h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+8h] [rbp-50h]\n  __int64 v63; // [rsp+10h] [rbp-48h]\n  __int64 v64; // [rsp+10h] [rbp-48h]\n  __int64 v65; // [rsp+18h] [rbp-40h]\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v27 = *a5;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v28, v27);\n    case 2LL:\n      v29 = a5[1];\n      v30 = *a5;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v31, v30, v29);\n    case 3LL:\n      v32 = a5[2];\n      v33 = a5[1];\n      v34 = *a5;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v35, v34, v33, v32);\n    case 4LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v40, v39, v38, v37, v36);\n      return v55;\n    case 6LL:\n      v41 = a5[5];\n      v42 = a5[4];\n      v43 = a5[3];\n      v58 = a5[1];\n      v44 = a5[2];\n      v45 = *a5;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v46, v45, v58, v44, v43, v42, v41);\n    case 7LL:\n      v47 = a5[6];\n      v48 = a5[5];\n      v49 = a5[4];\n      v50 = a5[3];\n      v51 = a5[1];\n      v62 = a5[2];\n      v52 = *a5;\n      v59 = v51;\n      v53 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v53, v52, v59, v62, v50, v49, v48, v47);\n    case 8LL:\n      v10 = a5[2];\n      v11 = a5[1];\n      v12 = a5[6];\n      v13 = a5[5];\n      v14 = a5[4];\n      v63 = a5[7];\n      v15 = a5[3];\n      v16 = *a5;\n      v56 = v10;\n      v60 = v11;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16, v60, v56, v15, v14, v13, v12, v63);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v54 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v54;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return __fprintf_chk(stream, 1LL, v26, v25, v61, v57, v24, v23, v22, v21, v64, v65);\n  }\n}\n"
        },
        {
            "funcName": "sub_410D00",
            "funcStartAddr": "0x40303d",
            "funcEndAddr": "0x403042",
            "decompiledFuncCode": "__int64 __fastcall sub_410D00(FILE *stream, const char *a2, const char *a3, const char *a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r13\n  __int64 v13; // r12\n  __int64 v14; // r15\n  __int64 v15; // r14\n  __int64 v16; // rbx\n  char *v17; // rax\n  const char *v19; // rsi\n  __int64 v20; // r8\n  __int64 v21; // r13\n  __int64 v22; // r12\n  __int64 v23; // r15\n  __int64 v24; // r14\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // r15\n  __int64 v43; // r14\n  __int64 v44; // r13\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r13\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  __int64 v51; // r8\n  __int64 v52; // rbx\n  char *v53; // rax\n  __int64 v54; // r8\n  __int64 v55; // [rsp-10h] [rbp-68h]\n  __int64 v56; // [rsp+0h] [rbp-58h]\n  __int64 v57; // [rsp+0h] [rbp-58h]\n  __int64 v58; // [rsp+0h] [rbp-58h]\n  __int64 v59; // [rsp+0h] [rbp-58h]\n  __int64 v60; // [rsp+8h] [rbp-50h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+8h] [rbp-50h]\n  __int64 v63; // [rsp+10h] [rbp-48h]\n  __int64 v64; // [rsp+10h] [rbp-48h]\n  __int64 v65; // [rsp+18h] [rbp-40h]\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v27 = *a5;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v28, v27);\n    case 2LL:\n      v29 = a5[1];\n      v30 = *a5;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v31, v30, v29);\n    case 3LL:\n      v32 = a5[2];\n      v33 = a5[1];\n      v34 = *a5;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v35, v34, v33, v32);\n    case 4LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v40, v39, v38, v37, v36);\n      return v55;\n    case 6LL:\n      v41 = a5[5];\n      v42 = a5[4];\n      v43 = a5[3];\n      v58 = a5[1];\n      v44 = a5[2];\n      v45 = *a5;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v46, v45, v58, v44, v43, v42, v41);\n    case 7LL:\n      v47 = a5[6];\n      v48 = a5[5];\n      v49 = a5[4];\n      v50 = a5[3];\n      v51 = a5[1];\n      v62 = a5[2];\n      v52 = *a5;\n      v59 = v51;\n      v53 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v53, v52, v59, v62, v50, v49, v48, v47);\n    case 8LL:\n      v10 = a5[2];\n      v11 = a5[1];\n      v12 = a5[6];\n      v13 = a5[5];\n      v14 = a5[4];\n      v63 = a5[7];\n      v15 = a5[3];\n      v16 = *a5;\n      v56 = v10;\n      v60 = v11;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16, v60, v56, v15, v14, v13, v12, v63);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v54 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v54;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return __fprintf_chk(stream, 1LL, v26, v25, v61, v57, v24, v23, v22, v21, v64, v65);\n  }\n}\n\n__int64 __fastcall sub_410D00(FILE *stream, const char *a2, const char *a3, const char *a4, __int64 *a5, __int64 a6)\n{\n  char *v8; // rax\n  char *v9; // rax\n  __int64 v10; // rax\n  __int64 v11; // r8\n  __int64 v12; // r13\n  __int64 v13; // r12\n  __int64 v14; // r15\n  __int64 v15; // r14\n  __int64 v16; // rbx\n  char *v17; // rax\n  const char *v19; // rsi\n  __int64 v20; // r8\n  __int64 v21; // r13\n  __int64 v22; // r12\n  __int64 v23; // r15\n  __int64 v24; // r14\n  __int64 v25; // rbx\n  char *v26; // rax\n  __int64 v27; // rbx\n  char *v28; // rax\n  __int64 v29; // r12\n  __int64 v30; // rbx\n  char *v31; // rax\n  __int64 v32; // r13\n  __int64 v33; // r12\n  __int64 v34; // rbx\n  char *v35; // rax\n  __int64 v36; // r14\n  __int64 v37; // r13\n  __int64 v38; // r12\n  __int64 v39; // rbx\n  char *v40; // rax\n  __int64 v41; // r12\n  __int64 v42; // r15\n  __int64 v43; // r14\n  __int64 v44; // r13\n  __int64 v45; // rbx\n  char *v46; // rax\n  __int64 v47; // r13\n  __int64 v48; // r12\n  __int64 v49; // r15\n  __int64 v50; // r14\n  __int64 v51; // r8\n  __int64 v52; // rbx\n  char *v53; // rax\n  __int64 v54; // r8\n  __int64 v55; // [rsp-10h] [rbp-68h]\n  __int64 v56; // [rsp+0h] [rbp-58h]\n  __int64 v57; // [rsp+0h] [rbp-58h]\n  __int64 v58; // [rsp+0h] [rbp-58h]\n  __int64 v59; // [rsp+0h] [rbp-58h]\n  __int64 v60; // [rsp+8h] [rbp-50h]\n  __int64 v61; // [rsp+8h] [rbp-50h]\n  __int64 v62; // [rsp+8h] [rbp-50h]\n  __int64 v63; // [rsp+10h] [rbp-48h]\n  __int64 v64; // [rsp+10h] [rbp-48h]\n  __int64 v65; // [rsp+18h] [rbp-40h]\n\n  if ( a2 )\n    __fprintf_chk(stream, 1LL, \"%s (%s) %s\\n\", a2, a3, a4);\n  else\n    __fprintf_chk(stream, 1LL, \"%s %s\\n\", a3, a4);\n  v8 = dcgettext(0LL, \"(C)\", 5);\n  __fprintf_chk(stream, 1LL, \"Copyright %s %d Free Software Foundation, Inc.\", v8, 2017LL);\n  v9 = dcgettext(\n         0LL,\n         \"\\n\"\n         \"License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\n\"\n         \"This is free software: you are free to change and redistribute it.\\n\"\n         \"There is NO WARRANTY, to the extent permitted by law.\\n\"\n         \"\\n\",\n         5);\n  fputs_unlocked(v9, stream);\n  switch ( a6 )\n  {\n    case 0LL:\n      abort();\n    case 1LL:\n      v27 = *a5;\n      v28 = dcgettext(0LL, \"Written by %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v28, v27);\n    case 2LL:\n      v29 = a5[1];\n      v30 = *a5;\n      v31 = dcgettext(0LL, \"Written by %s and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v31, v30, v29);\n    case 3LL:\n      v32 = a5[2];\n      v33 = a5[1];\n      v34 = *a5;\n      v35 = dcgettext(0LL, \"Written by %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v35, v34, v33, v32);\n    case 4LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n      goto LABEL_13;\n    case 5LL:\n      v36 = a5[3];\n      v37 = a5[2];\n      v38 = a5[1];\n      v39 = *a5;\n      v40 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, and %s.\\n\", 5);\nLABEL_13:\n      __fprintf_chk(stream, 1LL, v40, v39, v38, v37, v36);\n      return v55;\n    case 6LL:\n      v41 = a5[5];\n      v42 = a5[4];\n      v43 = a5[3];\n      v58 = a5[1];\n      v44 = a5[2];\n      v45 = *a5;\n      v46 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v46, v45, v58, v44, v43, v42, v41);\n    case 7LL:\n      v47 = a5[6];\n      v48 = a5[5];\n      v49 = a5[4];\n      v50 = a5[3];\n      v51 = a5[1];\n      v62 = a5[2];\n      v52 = *a5;\n      v59 = v51;\n      v53 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v53, v52, v59, v62, v50, v49, v48, v47);\n    case 8LL:\n      v10 = a5[2];\n      v11 = a5[1];\n      v12 = a5[6];\n      v13 = a5[5];\n      v14 = a5[4];\n      v63 = a5[7];\n      v15 = a5[3];\n      v16 = *a5;\n      v56 = v10;\n      v60 = v11;\n      v17 = dcgettext(0LL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\", 5);\n      return __fprintf_chk(stream, 1LL, v17, v16, v60, v56, v15, v14, v13, v12, v63);\n    case 9LL:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n      v20 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v20;\n      goto LABEL_8;\n    default:\n      v19 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n      v54 = a5[1];\n      v21 = a5[6];\n      v22 = a5[5];\n      v65 = a5[8];\n      v23 = a5[4];\n      v24 = a5[3];\n      v64 = a5[7];\n      v57 = a5[2];\n      v25 = *a5;\n      v61 = v54;\nLABEL_8:\n      v26 = dcgettext(0LL, v19, 5);\n      return __fprintf_chk(stream, 1LL, v26, v25, v61, v57, v24, v23, v22, v21, v64, v65);\n  }\n}\n"
        },
        {
            "funcName": "sub_411100",
            "funcStartAddr": "0x411100",
            "funcEndAddr": "0x411160",
            "decompiledFuncCode": "__int64 __fastcall sub_411100(FILE *a1, const char *a2, const char *a3, const char *a4, int *a5)\n{\n  __int64 i; // r9\n  __int64 *v6; // r10\n  __int64 v7; // rax\n  unsigned int v8; // eax\n  __int64 *v9; // r10\n  __int64 v10; // rax\n  __int64 v12[11]; // [rsp+0h] [rbp-58h] BYREF\n\n  for ( i = 0LL; i != 10; ++i )\n  {\n    v8 = *a5;\n    if ( (unsigned int)*a5 <= 0x2F )\n    {\n      v6 = (__int64 *)(*((_QWORD *)a5 + 2) + v8);\n      *a5 = v8 + 8;\n      v7 = *v6;\n      v12[i] = *v6;\n      if ( !v7 )\n        return sub_410D00(a1, a2, a3, a4, v12, i);\n      continue;\n    }\n    v9 = (__int64 *)*((_QWORD *)a5 + 1);\n    *((_QWORD *)a5 + 1) = v9 + 1;\n    v10 = *v9;\n    v12[i] = *v9;\n    if ( !v10 )\n      break;\n  }\n  return sub_410D00(a1, a2, a3, a4, v12, i);\n}\n"
        },
        {
            "funcName": "sub_411160",
            "funcStartAddr": "0x411160",
            "funcEndAddr": "0x41121c",
            "decompiledFuncCode": "__int64 __fastcall sub_411160(\n        FILE *a1,\n        const char *a2,\n        const char *a3,\n        const char *a4,\n        __int64 a5,\n        __int64 a6,\n        char a7)\n{\n  char *v7; // r10\n  unsigned int v8; // r8d\n  __int64 i; // r9\n  __int64 v10; // rax\n  __int64 v11; // rax\n  __int64 *v12; // rax\n  __int64 v13; // rax\n  __int64 v15[17]; // [rsp+20h] [rbp-88h] BYREF\n\n  v15[14] = a5;\n  v7 = &a7;\n  v8 = 32;\n  v15[15] = a6;\n  for ( i = 0LL; i != 10; ++i )\n  {\n    if ( v8 <= 0x2F )\n    {\n      v10 = v8;\n      v8 += 8;\n      v11 = *(__int64 *)((char *)&v15[10] + v10);\n      v15[i] = v11;\n      if ( !v11 )\n        return sub_410D00(a1, a2, a3, a4, v15, i);\n      continue;\n    }\n    v12 = (__int64 *)v7;\n    v7 += 8;\n    v13 = *v12;\n    v15[i] = v13;\n    if ( !v13 )\n      break;\n  }\n  return sub_410D00(a1, a2, a3, a4, v15, i);\n}\n"
        },
        {
            "funcName": "sub_411220",
            "funcStartAddr": "0x411220",
            "funcEndAddr": "0x411294",
            "decompiledFuncCode": "int sub_411220()\n{\n  char *v0; // rax\n  char *v1; // rax\n  FILE *v2; // rbx\n  char *v3; // rax\n\n  v0 = dcgettext(0LL, \"\\nReport bugs to: %s\\n\", 5);\n  __printf_chk(1LL, v0, \"bug-coreutils@gnu.org\");\n  v1 = dcgettext(0LL, \"%s home page: <%s>\\n\", 5);\n  __printf_chk(1LL, v1, &unk_417166, \"https://www.gnu.org/software/coreutils/\");\n  v2 = stdout;\n  v3 = dcgettext(0LL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5);\n  return fputs_unlocked(v3, v2);\n}\n"
        },
        {
            "funcName": "sub_4112A0",
            "funcStartAddr": "0x4112a0",
            "funcEndAddr": "0x4112d8",
            "decompiledFuncCode": "char sub_4112A0()\n{\n  char result; // al\n  __uid_t v1; // eax\n\n  if ( byte_621B31 )\n    return byte_621B30;\n  v1 = geteuid();\n  byte_621B31 = 1;\n  result = v1 == 0;\n  byte_621B30 = result;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4112E0",
            "funcStartAddr": "0x4112e0",
            "funcEndAddr": "0x4112fa",
            "decompiledFuncCode": "void *__fastcall sub_4112E0(size_t a1, __int64 a2)\n{\n  void *result; // rax\n  __int64 v3; // rdx\n\n  result = malloc(a1);\n  if ( !result )\n  {\n    if ( a1 )\n      sub_411530(a1, a2, v3);\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_411330",
            "funcStartAddr": "0x411330",
            "funcEndAddr": "0x411332",
            "decompiledFuncCode": "// attributes: thunk\nvoid *__fastcall sub_411330(size_t a1, __int64 a2)\n{\n  return sub_4112E0(a1, a2);\n}\n"
        },
        {
            "funcName": "sub_411340",
            "funcStartAddr": "0x411340",
            "funcEndAddr": "0x411376",
            "decompiledFuncCode": "void *__fastcall sub_411340(void *a1, size_t a2)\n{\n  void *result; // rax\n  __int64 v3; // rdx\n\n  if ( !a2 && a1 )\n  {\n    free(a1);\n    return 0LL;\n  }\n  else\n  {\n    result = realloc(a1, a2);\n    if ( !result )\n    {\n      if ( a2 )\n        sub_411530(a1, a2, v3);\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_411490",
            "funcStartAddr": "0x411490",
            "funcEndAddr": "0x4114a7",
            "decompiledFuncCode": "void *__fastcall sub_411490(size_t n, __int64 a2)\n{\n  void *v2; // rax\n\n  v2 = sub_4112E0(n, a2);\n  return memset(v2, 0, n);\n}\n"
        },
        {
            "funcName": "sub_4114B0",
            "funcStartAddr": "0x4114b0",
            "funcEndAddr": "0x4114de",
            "decompiledFuncCode": "__int64 __fastcall sub_4114B0(unsigned __int64 a1, unsigned __int64 a2)\n{\n  unsigned __int128 v2; // rax\n\n  v2 = a2 * (unsigned __int128)a1;\n  BYTE8(v2) = *((_QWORD *)&v2 + 1) != 0LL;\n  if ( (v2 & 0x8000000000000000LL) != 0LL\n    || (*((_QWORD *)&v2 + 1) = BYTE8(v2), !is_mul_ok(a2, a1))\n    || (*(_QWORD *)&v2 = calloc(a1, a2), !(_QWORD)v2) )\n  {\n    sub_411530(a1, a2, *((_QWORD *)&v2 + 1));\n  }\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_4114E0",
            "funcStartAddr": "0x4114e0",
            "funcEndAddr": "0x411508",
            "decompiledFuncCode": "void *__fastcall sub_4114E0(void *src, size_t n)\n{\n  void *v2; // rax\n\n  v2 = sub_4112E0(n, n);\n  return memcpy(v2, src, n);\n}\n"
        },
        {
            "funcName": "sub_411510",
            "funcStartAddr": "0x411510",
            "funcEndAddr": "0x411523",
            "decompiledFuncCode": "void *__fastcall sub_411510(char *src)\n{\n  size_t v1; // rax\n\n  v1 = strlen(src);\n  return sub_4114E0(src, v1 + 1);\n}\n"
        },
        {
            "funcName": "sub_411530",
            "funcStartAddr": "0x411530",
            "funcEndAddr": "0x411561",
            "decompiledFuncCode": "void __noreturn sub_411530()\n{\n  char *v0; // rax\n\n  v0 = dcgettext(0LL, \"memory exhausted\", 5);\n  error(status, 0, \"%s\", v0);\n  abort();\n}\n"
        },
        {
            "funcName": "sub_411570",
            "funcStartAddr": "0x411570",
            "funcEndAddr": "0x411994",
            "decompiledFuncCode": "__int64 __fastcall sub_411570(char *nptr, char **a2, unsigned int a3, __int64 *a4, const char *a5)\n{\n  char **p_endptr; // r15\n  int *v8; // rax\n  int *v9; // r12\n  unsigned __int8 v10; // bl\n  const unsigned __int16 *v11; // rsi\n  char *v12; // rax\n  __int64 v13; // rbx\n  unsigned int v14; // ebp\n  int v15; // r12d\n  char *v17; // rax\n  char *v18; // r8\n  __int64 v19; // rax\n  char *v20; // rax\n  char v21; // al\n  int v22; // esi\n  unsigned __int64 v23; // rdx\n  char *v24; // r8\n  unsigned __int64 v25; // kr30_8\n  char *v26; // rax\n  int v27; // edi\n  int v28; // r9d\n  bool v29; // of\n  int v30; // edi\n  int v31; // edi\n  int v32; // edi\n  int v33; // edi\n  char *basea; // [rsp+0h] [rbp-58h]\n  char *baseb; // [rsp+0h] [rbp-58h]\n  char *v37; // [rsp+8h] [rbp-50h]\n  char *endptr; // [rsp+18h] [rbp-40h] BYREF\n\n  if ( a3 > 0x24 )\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 0x60u, \"xstrtoul\");\n  p_endptr = a2;\n  if ( !a2 )\n    p_endptr = &endptr;\n  v8 = __errno_location();\n  *v8 = 0;\n  v9 = v8;\n  v10 = *nptr;\n  v11 = *__ctype_b_loc();\n  v12 = nptr;\n  while ( (v11[v10] & 0x2000) != 0 )\n    v10 = *++v12;\n  if ( v10 == 45 )\n    return 4;\n  v13 = strtoul(nptr, p_endptr, a3);\n  if ( *p_endptr == nptr )\n  {\n    basea = *p_endptr;\n    if ( a5 )\n    {\n      v15 = (unsigned __int8)*nptr;\n      if ( (_BYTE)v15 )\n      {\n        v14 = 0;\n        v13 = 1LL;\n        v17 = strchr(a5, (char)v15);\n        v18 = basea;\n        if ( v17 )\n          goto LABEL_20;\n      }\n    }\n    return 4;\n  }\n  if ( *v9 )\n  {\n    v14 = 1;\n    if ( *v9 == 34 )\n      goto LABEL_11;\n    return 4;\n  }\n  v14 = 0;\nLABEL_11:\n  if ( a5 )\n  {\n    v15 = (unsigned __int8)**p_endptr;\n    if ( (_BYTE)v15 )\n    {\n      baseb = *p_endptr;\n      v26 = strchr(a5, (char)v15);\n      v18 = baseb;\n      if ( !v26 )\n      {\nLABEL_40:\n        *a4 = v13;\n        v14 |= 2u;\n        return v14;\n      }\nLABEL_20:\n      if ( (unsigned __int8)(v15 - 69) > 0x2Fu\n        || (v19 = 0x814400308945LL, !_bittest64(&v19, (unsigned int)(v15 - 69)))\n        || (v37 = v18, v20 = strchr(a5, 48), v18 = v37, !v20) )\n      {\nLABEL_27:\n        v22 = 1;\n        v23 = 1024LL;\n        goto LABEL_28;\n      }\n      v21 = v37[1];\n      if ( v21 != 68 )\n      {\n        if ( v21 == 105 )\n        {\n          v23 = 1024LL;\n          v22 = 2 * (v37[2] == 66) + 1;\nLABEL_28:\n          switch ( (char)v15 )\n          {\n            case 'B':\n              if ( (unsigned __int64)v13 >> 54 )\n                goto LABEL_38;\n              v13 <<= 10;\n              break;\n            case 'E':\n              goto LABEL_71;\n            case 'G':\n            case 'g':\n              goto LABEL_77;\n            case 'K':\n            case 'k':\n              goto LABEL_37;\n            case 'M':\n            case 'm':\n              goto LABEL_30;\n            case 'P':\n              goto LABEL_65;\n            case 'T':\n            case 't':\n              goto LABEL_59;\n            case 'Y':\n              goto LABEL_53;\n            case 'Z':\n              goto LABEL_47;\n            case 'b':\n              goto LABEL_44;\n            case 'c':\n              break;\n            case 'w':\n              if ( v13 < 0 )\n                goto LABEL_38;\n              v13 *= 2LL;\n              break;\n            default:\n              goto LABEL_40;\n          }\nLABEL_33:\n          v24 = &v18[v22];\n          *p_endptr = v24;\n          if ( *v24 )\n            v14 |= 2u;\n          goto LABEL_13;\n        }\n        if ( v21 != 66 )\n        {\n          switch ( (char)v15 )\n          {\n            case 'E':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_71:\n              v33 = 6;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v33;\n              }\n              while ( v33 );\n              goto LABEL_51;\n            case 'F':\n            case 'H':\n            case 'I':\n            case 'J':\n            case 'L':\n            case 'N':\n            case 'O':\n            case 'Q':\n            case 'R':\n            case 'S':\n            case 'U':\n            case 'V':\n            case 'W':\n            case 'X':\n            case '[':\n            case '\\\\':\n            case ']':\n            case '^':\n            case '_':\n            case '`':\n            case 'a':\n            case 'd':\n            case 'e':\n            case 'f':\n            case 'h':\n            case 'i':\n            case 'j':\n            case 'l':\n            case 'n':\n            case 'o':\n            case 'p':\n            case 'q':\n            case 'r':\n            case 's':\n              goto LABEL_40;\n            case 'G':\n            case 'g':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_77:\n              if ( is_mul_ok((int)v23, v13)\n                && is_mul_ok((int)v23, (int)v23 * v13)\n                && is_mul_ok((int)v23, (int)v23 * (int)v23 * v13) )\n              {\n                v13 *= (int)v23 * (int)v23 * (__int64)(int)v23;\n              }\n              else\n              {\n                v13 = -1LL;\n                v14 |= 1u;\n              }\n              goto LABEL_33;\n            case 'K':\n            case 'k':\n              v22 = 1;\n              v23 = 1024LL;\nLABEL_37:\n              v25 = v13;\n              v13 *= v23;\n              if ( is_mul_ok(v23, v25) )\n                goto LABEL_33;\n              goto LABEL_38;\n            case 'M':\n            case 'm':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_30:\n              if ( !is_mul_ok((int)v23, v13) || !is_mul_ok((int)v23, (int)v23 * v13) )\n                goto LABEL_38;\n              v13 *= (int)v23 * (__int64)(int)v23;\n              break;\n            case 'P':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_65:\n              v32 = 5;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v32;\n              }\n              while ( v32 );\n              goto LABEL_51;\n            case 'T':\n            case 't':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_59:\n              v31 = 4;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v31;\n              }\n              while ( v31 );\n              goto LABEL_51;\n            case 'Y':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_53:\n              v30 = 8;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v30;\n              }\n              while ( v30 );\n              goto LABEL_51;\n            case 'Z':\n              v22 = 1;\n              LODWORD(v23) = 1024;\nLABEL_47:\n              v27 = 7;\n              v28 = 0;\n              do\n              {\n                v29 = ((unsigned __int64)(int)v23 * (unsigned __int128)(unsigned __int64)v13) >> 64 != 0;\n                v13 *= (int)v23;\n                if ( v29 )\n                {\n                  v28 = 1;\n                  v13 = -1LL;\n                }\n                --v27;\n              }\n              while ( v27 );\nLABEL_51:\n              v14 |= v28;\n              break;\n            case 'b':\n              v22 = 1;\nLABEL_44:\n              if ( (unsigned __int64)v13 >> 55 )\n              {\nLABEL_38:\n                v14 = 1;\n                v13 = -1LL;\n              }\n              else\n              {\n                v13 <<= 9;\n              }\n              break;\n            case 'c':\n              v22 = 1;\n              goto LABEL_33;\n            default:\n              goto LABEL_27;\n          }\n          goto LABEL_33;\n        }\n      }\n      v22 = 2;\n      v23 = 1000LL;\n      goto LABEL_28;\n    }\n  }\nLABEL_13:\n  *a4 = v13;\n  return v14;\n}\n"
        },
        {
            "funcName": "sub_4119A0",
            "funcStartAddr": "0x4119a0",
            "funcEndAddr": "0x411a09",
            "decompiledFuncCode": "__int64 sub_4119A0()\n{\n  unsigned int v0; // ebx\n  __ssize_t v1; // rax\n  char *v2; // rdi\n  char *v3; // rax\n  char *response; // [rsp+0h] [rbp-18h] BYREF\n  size_t n[2]; // [rsp+8h] [rbp-10h] BYREF\n\n  v0 = 0;\n  response = 0LL;\n  n[0] = 0LL;\n  v1 = __getdelim(&response, n, 10, stdin);\n  if ( v1 > 0 )\n  {\n    v2 = response;\n    v3 = &response[v1 - 1];\n    if ( *v3 == 10 )\n    {\n      *v3 = 0;\n      v2 = response;\n    }\n    LOBYTE(v0) = rpmatch(v2) > 0;\n  }\n  free(response);\n  return v0;\n}\n"
        },
        {
            "funcName": "sub_411A10",
            "funcStartAddr": "0x411a10",
            "funcEndAddr": "0x411b45",
            "decompiledFuncCode": "__int64 __fastcall sub_411A10(int a1, int a2, __int64 a3, int a4, int a5, int a6)\n{\n  int v6; // ebx\n  int v8; // eax\n  int *v9; // rax\n  int v10; // edi\n  int v11; // r12d\n  int *v12; // rbp\n  int v13; // ecx\n  int v14; // r8d\n  int v15; // r9d\n  int v16; // [rsp+30h] [rbp-38h]\n\n  v16 = a3;\n  if ( a2 == 1030 )\n  {\n    if ( dword_621B34 < 0 )\n    {\n      v6 = sub_411A10(a1, 0, a3, a4, a5, a6);\n      if ( v6 >= 0 && dword_621B34 == -1 )\n      {\nLABEL_8:\n        v8 = fcntl(v6, 1);\n        if ( v8 < 0 || fcntl(v6, 2, v8 | 1u) == -1 )\n        {\n          v9 = __errno_location();\n          v10 = v6;\n          v6 = -1;\n          v11 = *v9;\n          v12 = v9;\n          close(v10);\n          *v12 = v11;\n        }\n      }\n    }\n    else\n    {\n      v6 = fcntl(a1, 1030, (unsigned int)a3);\n      if ( v6 < 0 && *__errno_location() == 22 )\n      {\n        v6 = sub_411A10(a1, 0, v16, v13, v14, v15);\n        if ( v6 >= 0 )\n        {\n          dword_621B34 = -1;\n          goto LABEL_8;\n        }\n      }\n      else\n      {\n        dword_621B34 = 1;\n      }\n    }\n    return (unsigned int)v6;\n  }\n  return (unsigned int)fcntl(a1, a2, a3);\n}\n"
        },
        {
            "funcName": "sub_411B50",
            "funcStartAddr": "0x411b50",
            "funcEndAddr": "0x411b90",
            "decompiledFuncCode": "int __fastcall sub_411B50(FILE *stream)\n{\n  if ( !stream || !__freading(stream) || (stream->_flags & 0x100) == 0 )\n    return fflush(stream);\n  sub_411BC0(stream, 0LL, 1LL);\n  return fflush(stream);\n}\n"
        },
        {
            "funcName": "sub_411B90",
            "funcStartAddr": "0x411b90",
            "funcEndAddr": "0x411bb8",
            "decompiledFuncCode": "__int64 __fastcall sub_411B90(__int64 a1)\n{\n  __int64 result; // rax\n\n  result = 0LL;\n  if ( *(_QWORD *)(a1 + 40) <= *(_QWORD *)(a1 + 32) )\n  {\n    result = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);\n    if ( (*(_DWORD *)a1 & 0x100) != 0 )\n      result += *(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 72);\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_411BC0",
            "funcStartAddr": "0x411bc0",
            "funcEndAddr": "0x411c17",
            "decompiledFuncCode": "int __fastcall sub_411BC0(FILE *a1, __off_t a2, int a3)\n{\n  __off_t v3; // rax\n  int v5; // eax\n\n  if ( a1->_IO_read_end == a1->_IO_read_ptr && a1->_IO_write_ptr == a1->_IO_write_base && !a1->_IO_save_base )\n  {\n    v5 = fileno(a1);\n    v3 = lseek(v5, a2, a3);\n    if ( v3 != -1 )\n    {\n      a1->_flags &= ~0x10u;\n      a1->_offset = v3;\n      LODWORD(v3) = 0;\n    }\n  }\n  else\n  {\n    LODWORD(v3) = fseeko(a1, a2, a3);\n  }\n  return v3;\n}\n"
        },
        {
            "funcName": "sub_411C20",
            "funcStartAddr": "0x411c20",
            "funcEndAddr": "0x411cff",
            "decompiledFuncCode": "__int64 __fastcall sub_411C20(__int64 a1, int *a2)\n{\n  __int64 v2; // r11\n  int v3; // r12d\n  int v4; // ebp\n  __int64 v5; // rbx\n  int v6; // r9d\n  int v7; // r10d\n  int v8; // r8d\n  int v9; // r14d\n  int v10; // edx\n  __int64 *v11; // rax\n  __int64 *v12; // r13\n  __int64 v13; // rdx\n  __int64 v14; // rcx\n  __int64 result; // rax\n  __int64 *v16; // rax\n  __int64 v17; // rdx\n  __int64 v18; // rcx\n\n  v2 = a1 + 8;\n  v3 = a2[11];\n  v4 = *a2;\n  v5 = a2[12];\n  v6 = v3;\n  v7 = *a2;\n  v8 = a2[12];\nLABEL_2:\n  if ( v7 > v8 )\n  {\n    while ( v6 < v8 )\n    {\n      v9 = v7 - v8;\n      v10 = v8 - v6;\n      if ( v7 - v8 <= v8 - v6 )\n      {\n        v16 = (__int64 *)(a1 + 8LL * v6);\n        v17 = v5 - v6;\n        do\n        {\n          v18 = *v16;\n          *v16 = v16[v17];\n          v16[v17] = v18;\n          ++v16;\n        }\n        while ( v16 != (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v9 - 1))) );\n        v6 += v9;\n        goto LABEL_2;\n      }\n      v7 -= v10;\n      v11 = (__int64 *)(a1 + 8LL * v6);\n      v12 = (__int64 *)(v2 + 8 * (v6 + (unsigned __int64)(unsigned int)(v10 - 1)));\n      v13 = v7 - (__int64)v6;\n      do\n      {\n        v14 = *v11;\n        *v11 = v11[v13];\n        v11[v13] = v14;\n        ++v11;\n      }\n      while ( v12 != v11 );\n      if ( v7 <= v8 )\n        break;\n    }\n  }\n  a2[12] = v4;\n  result = (unsigned int)(v4 - v8);\n  a2[11] = result + v3;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_411D00",
            "funcStartAddr": "0x411d00",
            "funcEndAddr": "0x41231c",
            "decompiledFuncCode": "__int64 __fastcall sub_411D00(\n        int a1,\n        __int64 *a2,\n        const char *a3,\n        char **a4,\n        _DWORD *a5,\n        int a6,\n        int *a7,\n        int a8,\n        const char *a9)\n{\n  const char *v9; // r14\n  char *v10; // rbp\n  size_t v11; // r13\n  char **v12; // rbx\n  __int64 v13; // r12\n  const char *v14; // r15\n  const char *v15; // rdi\n  __int64 v16; // r15\n  char **v17; // rbp\n  char *v18; // rdx\n  __int64 result; // rax\n  int v20; // edx\n  int v21; // eax\n  int v22; // ecx\n  char *v23; // rdx\n  __int64 v24; // rbx\n  char *v25; // rax\n  __int64 v26; // rbx\n  char *v27; // rax\n  const char *v28; // r12\n  __int64 v29; // rbp\n  char *v30; // rax\n  __int64 v31; // rbx\n  __int64 v32; // rbp\n  char *v33; // rax\n  FILE *v34; // rdi\n  const char **v35; // rbx\n  _BYTE *v36; // rbp\n  __int64 v37; // r12\n  const char *v38; // r12\n  __int64 v39; // rbp\n  char *v40; // rax\n  char *s1; // [rsp+10h] [rbp-78h]\n  char *s1a; // [rsp+10h] [rbp-78h]\n  _BYTE *ptr; // [rsp+18h] [rbp-70h]\n  int v48; // [rsp+38h] [rbp-50h]\n  char v49; // [rsp+3Fh] [rbp-49h]\n  int v51; // [rsp+44h] [rbp-44h]\n  int v52; // [rsp+48h] [rbp-40h]\n\n  v9 = (const char *)*((_QWORD *)a7 + 4);\n  v10 = (char *)v9;\n  v49 = *v9;\n  if ( *v9 == 61 || !*v9 )\n  {\n    v11 = 0LL;\n  }\n  else\n  {\n    do\n      ++v10;\n    while ( *v10 && *v10 != 61 );\n    v11 = v10 - v9;\n  }\n  v12 = a4;\n  v13 = 0LL;\n  s1 = *a4;\n  v14 = *a4;\n  if ( !*a4 )\n  {\nLABEL_24:\n    if ( !a6 || *(_BYTE *)(a2[*a7] + 1) == 45 || (v18 = strchr(a3, v49), result = 0xFFFFFFFFLL, !v18) )\n    {\n      if ( a8 )\n      {\n        v24 = *a2;\n        v25 = dcgettext(0LL, \"%s: unrecognized option '%s%s'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v25, v24, a9, v9);\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n      ++*a7;\n      a7[2] = 0;\n      return 63LL;\n    }\n    return result;\n  }\n  while ( 1 )\n  {\n    if ( !strncmp(v14, v9, v11) && strlen(v14) == v11 )\n      goto LABEL_31;\n    v12 += 4;\n    v14 = *v12;\n    if ( !*v12 )\n      break;\n    v13 = (int)v13 + 1;\n  }\n  v12 = 0LL;\n  v51 = -1;\n  v15 = s1;\n  v16 = 0LL;\n  v48 = 0;\n  v52 = 0;\n  ptr = 0LL;\n  s1a = v10;\n  v17 = a4;\n  do\n  {\n    if ( strncmp(v15, v9, v11) )\n      goto LABEL_20;\n    if ( v12 )\n    {\n      if ( (a6\n         || *((_DWORD *)v12 + 2) != *((_DWORD *)v17 + 2)\n         || v12[2] != v17[2]\n         || *((_DWORD *)v12 + 6) != *((_DWORD *)v17 + 6))\n        && !v48 )\n      {\n        if ( a8 )\n        {\n          if ( ptr )\n            goto LABEL_19;\n          ptr = calloc((int)v13 + 1, 1uLL);\n          if ( ptr )\n          {\n            v52 = 1;\n            ptr[v51] = 1;\nLABEL_19:\n            ptr[v16] = 1;\n            goto LABEL_20;\n          }\n          v48 = 1;\n        }\n        else\n        {\n          v48 = 1;\n          if ( ptr )\n            goto LABEL_19;\n        }\n      }\n    }\n    else\n    {\n      v51 = v16;\n      v12 = v17;\n    }\nLABEL_20:\n    v17 += 4;\n    v15 = *v17;\n    ++v16;\n  }\n  while ( *v17 );\n  v10 = s1a;\n  if ( ptr || v48 )\n  {\n    if ( a8 )\n    {\n      if ( v48 )\n      {\n        v26 = *a2;\n        v27 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v27, v26, a9, v9);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n      else\n      {\n        flockfile(stderr);\n        v31 = *((_QWORD *)a7 + 4);\n        v32 = *a2;\n        v33 = dcgettext(0LL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5);\n        __fprintf_chk(stderr, 1LL, v33, v32, a9, v31);\n        v34 = stderr;\n        v35 = (const char **)a4;\n        v36 = ptr;\n        v37 = (__int64)&ptr[v13 + 1];\n        do\n        {\n          if ( *v36 )\n          {\n            __fprintf_chk(v34, 1LL, \" '%s%s'\", a9, *v35);\n            v34 = stderr;\n          }\n          ++v36;\n          v35 += 4;\n        }\n        while ( (_BYTE *)v37 != v36 );\n        fputc(10, v34);\n        funlockfile(stderr);\n        v9 = (const char *)*((_QWORD *)a7 + 4);\n      }\n    }\n    if ( v52 )\n      free(ptr);\n    *((_QWORD *)a7 + 4) = &v9[strlen(v9)];\n    ++*a7;\n    a7[2] = 0;\n    return 63LL;\n  }\n  else\n  {\n    if ( !v12 )\n      goto LABEL_24;\n    LODWORD(v13) = v51;\nLABEL_31:\n    v20 = *a7;\n    *((_QWORD *)a7 + 4) = 0LL;\n    v21 = v20 + 1;\n    *a7 = v20 + 1;\n    v22 = *((_DWORD *)v12 + 2);\n    if ( *v10 )\n    {\n      if ( v22 )\n      {\n        *((_QWORD *)a7 + 2) = v10 + 1;\n        goto LABEL_33;\n      }\n      if ( a8 )\n      {\n        v28 = *v12;\n        v29 = *a2;\n        v30 = dcgettext(0LL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v30, v29, a9, v28);\n      }\n      a7[2] = *((_DWORD *)v12 + 6);\n      return 63LL;\n    }\n    else\n    {\n      if ( v22 != 1 )\n        goto LABEL_33;\n      if ( v21 >= a1 )\n      {\n        if ( a8 )\n        {\n          v38 = *v12;\n          v39 = *a2;\n          v40 = dcgettext(0LL, \"%s: option '%s%s' requires an argument\\n\", 5);\n          __fprintf_chk(stderr, 1LL, v40, v39, a9, v38);\n        }\n        a7[2] = *((_DWORD *)v12 + 6);\n        return 5 * (unsigned int)(*a3 != 58) + 58;\n      }\n      else\n      {\n        *a7 = v20 + 2;\n        *((_QWORD *)a7 + 2) = a2[v21];\nLABEL_33:\n        if ( a5 )\n          *a5 = v13;\n        v23 = v12[2];\n        result = *((unsigned int *)v12 + 6);\n        if ( v23 )\n        {\n          *(_DWORD *)v23 = result;\n          return 0LL;\n        }\n      }\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_412320",
            "funcStartAddr": "0x412320",
            "funcEndAddr": "0x4128e6",
            "decompiledFuncCode": "__int64 __fastcall sub_412320(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int a6, int *a7, int a8)\n{\n  int v8; // r13d\n  int v9; // eax\n  int v10; // ebp\n  const char *v12; // r15\n  _BYTE *v13; // rdx\n  char v14; // al\n  char v15; // al\n  int v16; // eax\n  __int64 v17; // r14\n  int v18; // edx\n  int v19; // ecx\n  int v20; // eax\n  unsigned int v21; // r14d\n  char *v22; // rax\n  __int64 v23; // r8\n  char v24; // cl\n  int v26; // edx\n  __int64 v27; // rax\n  _BYTE *v28; // rcx\n  int v29; // esi\n  char v30; // cl\n  char *v31; // rax\n  __int64 v32; // rax\n  char *v34; // rax\n  char v35; // dl\n  __int64 v36; // rax\n  int v37; // edx\n  __int64 v38; // rax\n  __int64 v39; // rbp\n  char *v40; // rax\n  __int64 v41; // rbp\n  char *v42; // rax\n  __int64 v43; // rbp\n  char *v44; // rax\n  char v47; // [rsp+1Ch] [rbp-4Ch]\n  int v48; // [rsp+1Ch] [rbp-4Ch]\n  int v49; // [rsp+1Ch] [rbp-4Ch]\n  int v50; // [rsp+1Ch] [rbp-4Ch]\n  _BYTE *v51; // [rsp+20h] [rbp-48h]\n  _BYTE *v52; // [rsp+28h] [rbp-40h]\n\n  v8 = a7[1];\n  if ( a1 <= 0 )\n    return (unsigned int)-1;\n  v9 = *a7;\n  v10 = a1;\n  v12 = a3;\n  *((_QWORD *)a7 + 2) = 0LL;\n  if ( !v9 )\n  {\n    *a7 = 1;\n    v9 = 1;\nLABEL_4:\n    a7[12] = v9;\n    a7[11] = v9;\n    *((_QWORD *)a7 + 4) = 0LL;\n    if ( *a3 == 45 )\n    {\n      a7[10] = 2;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else if ( *a3 == 43 )\n    {\n      a7[10] = 0;\n      v12 = a3 + 1;\n      v13 = 0LL;\n    }\n    else\n    {\n      v13 = 0LL;\n      if ( !a8 )\n      {\n        v50 = a6;\n        v34 = getenv(\"POSIXLY_CORRECT\");\n        a6 = v50;\n        if ( !v34 )\n        {\n          a7[10] = 1;\n          v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n          goto LABEL_24;\n        }\n        v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n      }\n      a7[10] = 0;\n    }\nLABEL_24:\n    a7[6] = 1;\n    v14 = *v12;\n    goto LABEL_25;\n  }\n  if ( !a7[6] )\n    goto LABEL_4;\n  v14 = *a3;\n  v13 = (_BYTE *)*((_QWORD *)a7 + 4);\n  if ( ((v14 - 43) & 0xFD) == 0 )\n  {\n    v15 = *++v12;\n    if ( v15 == 58 )\n      v8 = 0;\n    if ( !v13 )\n      goto LABEL_12;\n    goto LABEL_28;\n  }\nLABEL_25:\n  if ( v14 == 58 )\n    v8 = 0;\n  if ( !v13 )\n    goto LABEL_12;\nLABEL_28:\n  if ( !*v13 )\n  {\nLABEL_12:\n    v16 = *a7;\n    if ( a7[12] > *a7 )\n      a7[12] = v16;\n    if ( v16 < a7[11] )\n      a7[11] = v16;\n    if ( a7[10] == 1 )\n    {\n      v26 = a7[12];\n      if ( a7[11] == v26 )\n      {\n        if ( v16 != v26 )\n        {\n          a7[11] = v16;\n          v26 = v16;\n        }\n      }\n      else if ( v16 != v26 )\n      {\n        v48 = a6;\n        sub_411C20((__int64)a2, a7);\n        v26 = *a7;\n        a6 = v48;\n      }\n      if ( a1 <= v26 )\n      {\nLABEL_79:\n        v16 = v26;\n      }\n      else\n      {\n        v27 = v26;\n        while ( 1 )\n        {\n          v28 = (_BYTE *)a2[v27];\n          v29 = v27;\n          v26 = v27;\n          if ( *v28 == 45 )\n          {\n            if ( v28[1] )\n              break;\n          }\n          v26 = ++v27;\n          *a7 = v29 + 1;\n          if ( a1 <= (int)v27 )\n            goto LABEL_79;\n        }\n        v16 = *a7;\n      }\n      a7[12] = v26;\n    }\n    if ( a1 == v16 )\n    {\n      v10 = a7[12];\n      v18 = a7[11];\nLABEL_41:\n      if ( v18 != v10 )\n        *a7 = v18;\n      return (unsigned int)-1;\n    }\n    v17 = a2[v16];\n    if ( !strcmp((const char *)v17, \"--\") )\n    {\n      v18 = a7[11];\n      v19 = a7[12];\n      v20 = v16 + 1;\n      *a7 = v20;\n      if ( v18 == v19 )\n      {\n        a7[11] = v20;\n        v18 = v20;\n      }\n      else if ( v20 != v19 )\n      {\n        sub_411C20((__int64)a2, a7);\n        v18 = a7[11];\n      }\n      a7[12] = a1;\n      *a7 = a1;\n      goto LABEL_41;\n    }\n    if ( *(_BYTE *)v17 == 45 )\n    {\n      v30 = *(_BYTE *)(v17 + 1);\n      if ( v30 )\n      {\n        if ( a4 )\n        {\n          if ( v30 == 45 )\n          {\n            *((_QWORD *)a7 + 4) = v17 + 2;\n            return (unsigned int)sub_411D00(a1, a2, v12, a4, a5, a6, a7, v8, \"--\");\n          }\n          if ( a6 )\n          {\n            if ( *(_BYTE *)(v17 + 2) || (v49 = a6, v31 = strchr(v12, v30), a6 = v49, !v31) )\n            {\n              *((_QWORD *)a7 + 4) = v17 + 1;\n              v21 = sub_411D00(a1, a2, v12, a4, a5, a6, a7, v8, \"-\");\n              if ( v21 != -1 )\n                return v21;\n              v17 = a2[*a7];\n            }\n          }\n        }\n        v13 = (_BYTE *)(v17 + 1);\n        goto LABEL_29;\n      }\n    }\n    if ( a7[10] )\n    {\n      *((_QWORD *)a7 + 2) = v17;\n      v21 = 1;\n      *a7 = v16 + 1;\n      return v21;\n    }\n    return (unsigned int)-1;\n  }\nLABEL_29:\n  v51 = v13;\n  *((_QWORD *)a7 + 4) = v13 + 1;\n  v21 = (char)*v13;\n  v52 = v13 + 1;\n  v47 = *v13;\n  v22 = strchr(v12, v21);\n  v23 = (__int64)v52;\n  if ( !v51[1] )\n    ++*a7;\n  if ( (unsigned __int8)(v47 - 58) > 1u && v22 )\n  {\n    v24 = v22[1];\n    if ( *v22 == 87 && a4 && v24 == 59 )\n    {\n      if ( v51[1] )\n      {\nLABEL_68:\n        *((_QWORD *)a7 + 4) = v23;\n        *((_QWORD *)a7 + 2) = 0LL;\n        return (unsigned int)sub_411D00(a1, a2, v12, a4, a5, 0, a7, v8, \"-W \");\n      }\n      v32 = *a7;\n      if ( (_DWORD)v32 != a1 )\n      {\n        v23 = a2[v32];\n        goto LABEL_68;\n      }\n      if ( v8 )\n      {\n        v43 = *a2;\n        v44 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n        __fprintf_chk(stderr, 1LL, v44, v43, v21);\n      }\n      a7[2] = v21;\n      return 5 * (unsigned int)(*v12 != 58) + 58;\n    }\n    else if ( v24 == 58 )\n    {\n      v35 = v51[1];\n      if ( v22[2] == 58 )\n      {\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          ++*a7;\n        }\n        else\n        {\n          *((_QWORD *)a7 + 2) = 0LL;\n        }\n      }\n      else\n      {\n        v36 = *a7;\n        if ( v35 )\n        {\n          *((_QWORD *)a7 + 2) = v52;\n          *a7 = v36 + 1;\n        }\n        else if ( a1 == (_DWORD)v36 )\n        {\n          if ( v8 )\n          {\n            v41 = *a2;\n            v42 = dcgettext(0LL, \"%s: option requires an argument -- '%c'\\n\", 5);\n            __fprintf_chk(stderr, 1LL, v42, v41, v21);\n          }\n          a7[2] = v21;\n          v21 = 5 * (*v12 != 58) + 58;\n        }\n        else\n        {\n          v37 = v36 + 1;\n          v38 = a2[v36];\n          *a7 = v37;\n          *((_QWORD *)a7 + 2) = v38;\n        }\n      }\n      *((_QWORD *)a7 + 4) = 0LL;\n    }\n  }\n  else\n  {\n    if ( v8 )\n    {\n      v39 = *a2;\n      v40 = dcgettext(0LL, \"%s: invalid option -- '%c'\\n\", 5);\n      __fprintf_chk(stderr, 1LL, v40, v39, v21);\n    }\n    a7[2] = v21;\n    return 63;\n  }\n  return v21;\n}\n"
        },
        {
            "funcName": "sub_4128F0",
            "funcStartAddr": "0x4128f0",
            "funcEndAddr": "0x412946",
            "decompiledFuncCode": "__int64 __fastcall sub_4128F0(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int a6, int a7)\n{\n  __int64 result; // rax\n\n  dword_621B40 = dword_61F4DC;\n  dword_621B44 = dword_61F4D8;\n  result = sub_412320(a1, a2, a3, a4, a5, a6, &dword_621B40, a7);\n  dword_61F4DC = dword_621B40;\n  qword_621B80 = (void *)qword_621B50;\n  dword_61F4D4 = dword_621B48;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_412950",
            "funcStartAddr": "0x412950",
            "funcEndAddr": "0x412968",
            "decompiledFuncCode": "__int64 __fastcall sub_412950(int a1, __int64 *a2, const char *a3)\n{\n  return sub_4128F0(a1, a2, a3, 0LL, 0LL, 0, 1);\n}\n"
        },
        {
            "funcName": "sub_412970",
            "funcStartAddr": "0x412970",
            "funcEndAddr": "0x412983",
            "decompiledFuncCode": "__int64 __fastcall sub_412970(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5)\n{\n  return sub_4128F0(a1, a2, a3, a4, a5, 0, 0);\n}\n"
        },
        {
            "funcName": "sub_412990",
            "funcStartAddr": "0x412990",
            "funcEndAddr": "0x4129a5",
            "decompiledFuncCode": "__int64 __fastcall sub_412990(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_412320(a1, a2, a3, a4, a5, 0, a6, 0);\n}\n"
        },
        {
            "funcName": "sub_4129B0",
            "funcStartAddr": "0x4129b0",
            "funcEndAddr": "0x4129c6",
            "decompiledFuncCode": "__int64 __fastcall sub_4129B0(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5)\n{\n  return sub_4128F0(a1, a2, a3, a4, a5, 1, 0);\n}\n"
        },
        {
            "funcName": "sub_4129D0",
            "funcStartAddr": "0x4129d0",
            "funcEndAddr": "0x4129e8",
            "decompiledFuncCode": "__int64 __fastcall sub_4129D0(int a1, __int64 *a2, const char *a3, char **a4, _DWORD *a5, int *a6)\n{\n  return sub_412320(a1, a2, a3, a4, a5, 1, a6, 0);\n}\n"
        },
        {
            "funcName": "sub_4129F0",
            "funcStartAddr": "0x4129f0",
            "funcEndAddr": "0x412a6a",
            "decompiledFuncCode": "size_t __fastcall sub_4129F0(wchar_t *pwc, char *s, size_t a3, mbstate_t *a4)\n{\n  size_t v4; // rbx\n  wchar_t *v5; // r12\n  const char *v6; // rbp\n  char v8; // [rsp+Ch] [rbp-1Ch] BYREF\n\n  if ( !s )\n  {\n    a3 = 1LL;\n    v6 = \"%s: invalid option -- '%c'\\n\" + 27;\nLABEL_7:\n    v5 = (wchar_t *)&v8;\n    goto LABEL_4;\n  }\n  v4 = -2LL;\n  if ( !a3 )\n    return v4;\n  v5 = pwc;\n  v6 = s;\n  if ( !pwc )\n    goto LABEL_7;\nLABEL_4:\n  v4 = mbrtowc(v5, v6, a3, a4);\n  if ( v4 > 0xFFFFFFFFFFFFFFFDLL && !(unsigned __int8)sub_412FC0(0LL) )\n  {\n    v4 = 1LL;\n    *v5 = *(unsigned __int8 *)v6;\n  }\n  return v4;\n}\n"
        },
        {
            "funcName": "sub_412A70",
            "funcStartAddr": "0x412a70",
            "funcEndAddr": "0x412b2d",
            "decompiledFuncCode": "__int64 __fastcall sub_412A70(FILE *s, __int64 a2, __int64 a3)\n{\n  char *v3; // rax\n  size_t v4; // rbx\n  char *v5; // rbp\n  int *v7; // rax\n  int v8; // r13d\n  int *v9; // r12\n  size_t n; // [rsp+8h] [rbp-800h] BYREF\n  char v11[2040]; // [rsp+10h] [rbp-7F8h] BYREF\n\n  n = 2000LL;\n  v3 = (char *)sub_414470(v11, &n, a2, a3);\n  v4 = n;\n  if ( !v3 )\n    goto LABEL_10;\n  v5 = v3;\n  if ( fwrite(v3, 1uLL, n, s) >= v4 )\n  {\n    if ( v5 != v11 )\n      free(v5);\n    if ( v4 <= 0x7FFFFFFF )\n      return (unsigned int)v4;\n    *__errno_location() = 75;\nLABEL_10:\n    LODWORD(v4) = -1;\n    sub_414460(s);\n    return (unsigned int)v4;\n  }\n  LODWORD(v4) = -1;\n  if ( v5 != v11 )\n  {\n    v7 = __errno_location();\n    v8 = *v7;\n    v9 = v7;\n    free(v5);\n    *v9 = v8;\n  }\n  return (unsigned int)v4;\n}\n"
        },
        {
            "funcName": "sub_412B30",
            "funcStartAddr": "0x412b30",
            "funcEndAddr": "0x412b35",
            "decompiledFuncCode": "__int64 __fastcall sub_412B30(__int64 a1, __int64 a2, int a3, _DWORD *a4)\n{\n  *a4 = a3;\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_412B40",
            "funcStartAddr": "0x412b40",
            "funcEndAddr": "0x412b55",
            "decompiledFuncCode": "int __fastcall sub_412B40(const char *a1, int a2, __mode_t a3)\n{\n  if ( a2 == -1 )\n    return chmod(a1, a3);\n  else\n    return fchmod(a2, a3);\n}\n"
        },
        {
            "funcName": "sub_412B60",
            "funcStartAddr": "0x412b60",
            "funcEndAddr": "0x412b82",
            "decompiledFuncCode": "__int64 __fastcall sub_412B60(__mode_t *a1, const char *a2, int a3)\n{\n  return (unsigned int)-(sub_412B40(a2, a3, *a1) != 0);\n}\n"
        },
        {
            "funcName": "sub_412B90",
            "funcStartAddr": "0x412b90",
            "funcEndAddr": "0x412b9a",
            "decompiledFuncCode": "void __noreturn sub_412B90()\n{\n  sub_4046F0(1);\n}\n"
        },
        {
            "funcName": "sub_412BA0",
            "funcStartAddr": "0x412ba0",
            "funcEndAddr": "0x412cb6",
            "decompiledFuncCode": "__int64 __fastcall sub_412BA0(const char *a1, const char **a2, char *a3, size_t a4)\n{\n  char *v5; // rbp\n  size_t v6; // rax\n  const char *v7; // r14\n  size_t v8; // r12\n  __int64 v9; // rbx\n  bool v10; // zf\n  char v11; // al\n  __int64 v12; // rax\n  __int64 v14; // [rsp+0h] [rbp-58h]\n  char v15; // [rsp+17h] [rbp-41h]\n\n  v5 = a3;\n  v6 = strlen(a1);\n  v7 = *a2;\n  v14 = -1LL;\n  if ( !*a2 )\n    return v14;\n  v8 = v6;\n  v15 = 0;\n  v9 = 0LL;\n  do\n  {\n    while ( strncmp(v7, a1, v8) )\n    {\nLABEL_7:\n      ++v9;\n      v5 += a4;\n      v7 = a2[v9];\n      if ( !v7 )\n        goto LABEL_12;\n    }\n    if ( strlen(v7) == v8 )\n      return v9;\n    if ( v14 != -1 )\n    {\n      if ( a3 )\n      {\n        v10 = memcmp(&a3[a4 * v14], v5, a4) == 0;\n        v11 = v15;\n        if ( !v10 )\n          v11 = 1;\n        v15 = v11;\n      }\n      else\n      {\n        v15 = 1;\n      }\n      goto LABEL_7;\n    }\n    v14 = v9++;\n    v5 += a4;\n    v7 = a2[v9];\n  }\n  while ( v7 );\nLABEL_12:\n  v12 = -2LL;\n  if ( !v15 )\n    return v14;\n  return v12;\n}\n"
        },
        {
            "funcName": "sub_412CC0",
            "funcStartAddr": "0x412cc0",
            "funcEndAddr": "0x412d31",
            "decompiledFuncCode": "void __fastcall sub_412CC0(__int64 a1, __int64 a2, __int64 a3)\n{\n  char *v3; // rbx\n  _BYTE *v4; // rbp\n  _BYTE *v5; // rax\n\n  if ( a3 == -1 )\n    v3 = dcgettext(0LL, \"invalid argument %s for %s\", 5);\n  else\n    v3 = dcgettext(0LL, \"ambiguous argument %s for %s\", 5);\n  v4 = sub_40EC30(1LL, a1);\n  v5 = sub_40E920(0LL, 8, a2);\n  error(0, 0, v3, v5, v4);\n}\n"
        },
        {
            "funcName": "sub_412D40",
            "funcStartAddr": "0x412d40",
            "funcEndAddr": "0x412e58",
            "decompiledFuncCode": "int __fastcall sub_412D40(__int64 *a1, char *a2, size_t a3)\n{\n  const void *v3; // r14\n  FILE *v6; // rbx\n  char *v7; // rax\n  FILE *v8; // rsi\n  __int64 v9; // rbx\n  __int64 i; // r12\n  const char *v11; // rax\n  const char *v12; // rax\n  char *IO_write_ptr; // rax\n\n  v3 = 0LL;\n  v6 = stderr;\n  v7 = dcgettext(0LL, \"Valid arguments are:\", 5);\n  v8 = v6;\n  v9 = 0LL;\n  fputs_unlocked(v7, v8);\n  for ( i = *a1; i; i = a1[v9] )\n  {\n    while ( !v9 || memcmp(v3, a2, a3) )\n    {\n      ++v9;\n      v3 = a2;\n      a2 += a3;\n      v11 = sub_40EC50(i);\n      __fprintf_chk(stderr, 1LL, \"\\n  - %s\", v11);\n      i = a1[v9];\n      if ( !i )\n        goto LABEL_7;\n    }\n    ++v9;\n    a2 += a3;\n    v12 = sub_40EC50(i);\n    __fprintf_chk(stderr, 1LL, \", %s\", v12);\n  }\nLABEL_7:\n  IO_write_ptr = stderr->_IO_write_ptr;\n  if ( IO_write_ptr >= stderr->_IO_write_end )\n  {\n    LODWORD(IO_write_ptr) = __overflow(stderr, 10);\n  }\n  else\n  {\n    stderr->_IO_write_ptr = IO_write_ptr + 1;\n    *IO_write_ptr = 10;\n  }\n  return (int)IO_write_ptr;\n}\n"
        },
        {
            "funcName": "sub_412E60",
            "funcStartAddr": "0x412e60",
            "funcEndAddr": "0x412ed0",
            "decompiledFuncCode": "__int64 __fastcall sub_412E60(__int64 a1, const char *a2, const char **a3, char *a4, size_t a5, void (*a6)(void))\n{\n  __int64 result; // rax\n\n  result = sub_412BA0(a2, a3, a4, a5);\n  if ( result < 0 )\n  {\n    sub_412CC0(a1, (__int64)a2, result);\n    sub_412D40((__int64 *)a3, a4, a5);\n    a6();\n    return -1LL;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_412ED0",
            "funcStartAddr": "0x412ed0",
            "funcEndAddr": "0x412f1d",
            "decompiledFuncCode": "__int64 __fastcall sub_412ED0(void *s1, __int64 *a2, char *a3, size_t a4)\n{\n  __int64 v4; // r14\n  __int64 *v6; // rbx\n\n  v4 = *a2;\n  if ( *a2 )\n  {\n    v6 = a2 + 1;\n    do\n    {\n      if ( !memcmp(s1, a3, a4) )\n        break;\n      v4 = *v6;\n      a3 += a4;\n      ++v6;\n    }\n    while ( v4 );\n  }\n  return v4;\n}\n"
        },
        {
            "funcName": "sub_412F20",
            "funcStartAddr": "0x412f20",
            "funcEndAddr": "0x412f7d",
            "decompiledFuncCode": "__int64 __fastcall sub_412F20(FILE *stream)\n{\n  size_t v1; // r12\n  int v2; // ebx\n  __int64 result; // rax\n\n  v1 = __fpending(stream);\n  v2 = stream->_flags & 0x20;\n  result = sub_4143E0(stream);\n  if ( v2 )\n  {\n    if ( !(_DWORD)result )\n    {\n      *__errno_location() = 0;\n      return 0xFFFFFFFFLL;\n    }\n    return 0xFFFFFFFFLL;\n  }\n  if ( !(_DWORD)result )\n    return result;\n  if ( v1 )\n    return 0xFFFFFFFFLL;\n  return (unsigned int)-(*__errno_location() != 9);\n}\n"
        },
        {
            "funcName": "sub_412F80",
            "funcStartAddr": "0x412f80",
            "funcEndAddr": "0x412fba",
            "decompiledFuncCode": "int __fastcall sub_412F80(struct timespec *tp)\n{\n  int result; // eax\n  struct timeval v2; // [rsp+0h] [rbp-18h] BYREF\n\n  result = clock_gettime(0, tp);\n  if ( result )\n  {\n    gettimeofday(&v2, 0LL);\n    tp->tv_sec = v2.tv_sec;\n    result = 1000 * LODWORD(v2.tv_usec);\n    tp->tv_nsec = 1000 * v2.tv_usec;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_412FC0",
            "funcStartAddr": "0x412fc0",
            "funcEndAddr": "0x41301e",
            "decompiledFuncCode": "bool __fastcall sub_412FC0(int a1)\n{\n  char *v1; // rdx\n  bool result; // al\n\n  v1 = setlocale(a1, 0LL);\n  result = 1;\n  if ( v1 )\n  {\n    result = 0;\n    if ( strcmp(v1, \"C\") )\n      return strcmp(v1, \"POSIX\") != 0;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_413020",
            "funcStartAddr": "0x413020",
            "funcEndAddr": "0x413056",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_413020(char *a1, unsigned __int64 a2)\n{\n  __int64 v2; // rcx\n  unsigned __int64 v3; // rax\n\n  v2 = *a1;\n  if ( !(_BYTE)v2 )\n    return 0LL;\n  v3 = 0LL;\n  do\n  {\n    ++a1;\n    v3 = v2 + __ROL8__(v3, 9);\n    v2 = *a1;\n  }\n  while ( (_BYTE)v2 );\n  return v3 % a2;\n}\n"
        },
        {
            "funcName": "sub_413060",
            "funcStartAddr": "0x413060",
            "funcEndAddr": "0x4135c2",
            "decompiledFuncCode": "const char *sub_413060()\n{\n  char *v0; // rax\n  char *v1; // r15\n  const char *v2; // rbx\n  char v3; // bp\n  const char *v4; // rbp\n  char *v6; // rax\n  const char *v7; // r13\n  size_t v8; // rax\n  __int64 v9; // r12\n  size_t v10; // r14\n  size_t v11; // rdi\n  char *v12; // rax\n  char *v13; // rbp\n  size_t v14; // rdi\n  char *v15; // rax\n  int v16; // eax\n  int v17; // r12d\n  FILE *v18; // r13\n  const char *v19; // rax\n  FILE *v20; // rbx\n  const char *v21; // r13\n  char *IO_read_ptr; // rax\n  int v23; // edi\n  char *v24; // kr00_8\n  int *v25; // rdx\n  int v26; // esi\n  unsigned int v27; // eax\n  __int64 v28; // rdx\n  signed __int64 v29; // rax\n  char *v30; // rax\n  __int64 v31; // rcx\n  __int64 v32; // rdx\n  __int64 v33; // rsi\n  unsigned int v34; // ecx\n  signed __int64 v35; // rdi\n  char *v36; // rsi\n  unsigned int v37; // edx\n  char *v38; // rcx\n  FILE *v39; // rdi\n  int v40; // eax\n  bool v41; // dl\n  char *v42; // rax\n  signed __int64 v43; // rax\n  unsigned __int64 v44; // r9\n  char *v45; // rsi\n  char *v46; // r10\n  unsigned int v47; // ecx\n  unsigned int v48; // ecx\n  unsigned int v49; // esi\n  __int64 v50; // r8\n  unsigned __int64 v51; // rdi\n  char *v52; // rcx\n  char *v53; // r9\n  unsigned int v54; // edx\n  unsigned int v55; // edx\n  unsigned int v56; // ecx\n  __int64 v57; // rsi\n  const char *v58; // rax\n  char *v59; // rdi\n  FILE *v60; // r13\n  signed __int64 v61; // [rsp+8h] [rbp-D0h]\n  __int64 v62; // [rsp+18h] [rbp-C0h]\n  char v63[64]; // [rsp+20h] [rbp-B8h] BYREF\n  _QWORD v64[15]; // [rsp+60h] [rbp-78h] BYREF\n\n  v0 = nl_langinfo(14);\n  v1 = qword_621B78;\n  v2 = v0;\n  if ( !v0 )\n    v2 = \"\";\n  if ( !qword_621B78 )\n  {\n    v6 = getenv(\"CHARSETALIASDIR\");\n    v7 = v6;\n    if ( v6 && *v6 )\n    {\n      v8 = strlen(v6);\n      v9 = v8;\n      v10 = v8;\n      if ( !v8 )\n      {\n        v11 = 14LL;\nLABEL_18:\n        v12 = (char *)malloc(v11);\n        v13 = v12;\n        if ( !v12 )\n        {\nLABEL_19:\n          v1 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\nLABEL_20:\n          qword_621B78 = v1;\n          goto LABEL_4;\n        }\n        memcpy(v12, v7, v10);\nLABEL_24:\n        strcpy(&v13[v9], \"charset.alias\");\n        v16 = open(v13, 0);\n        v17 = v16;\n        if ( v16 >= 0 )\n        {\n          v1 = 0LL;\n          v61 = 0LL;\n          v18 = fdopen(v16, \"r\");\n          if ( v18 )\n          {\n            v19 = v2;\n            v20 = v18;\n            v21 = v19;\nLABEL_30:\n            IO_read_ptr = v20->_IO_read_ptr;\n            if ( IO_read_ptr < v20->_IO_read_end )\n            {\nLABEL_31:\n              v20->_IO_read_ptr = IO_read_ptr + 1;\n              v23 = (unsigned __int8)*IO_read_ptr;\n              goto LABEL_32;\n            }\n            while ( 1 )\n            {\n              v23 = __uflow(v20);\n              if ( v23 == -1 )\n                break;\nLABEL_32:\n              if ( (unsigned int)(v23 - 9) <= 1 || v23 == 32 )\n                goto LABEL_30;\n              if ( v23 == 35 )\n              {\n                do\n                {\n                  v42 = v20->_IO_read_ptr;\n                  if ( v42 < v20->_IO_read_end )\n                  {\n                    v20->_IO_read_ptr = v42 + 1;\n                    v40 = (unsigned __int8)*v42;\n                    v41 = 1;\n                  }\n                  else\n                  {\n                    v40 = __uflow(v20);\n                    v41 = v40 != -1;\n                  }\n                }\n                while ( v40 != 10 && v41 );\n                if ( v40 == -1 )\n                  break;\n                goto LABEL_30;\n              }\n              ungetc(v23, v20);\n              if ( fscanf(v20, \"%50s %50s\", v63, v64) <= 1 )\n                break;\n              v24 = &v63[strlen(v63)];\n              v25 = (int *)v64;\n              do\n              {\n                v26 = *v25++;\n                v27 = ~v26 & (v26 - 16843009) & 0x80808080;\n              }\n              while ( !v27 );\n              if ( (~v26 & (v26 - 16843009) & 0x8080) == 0 )\n              {\n                v27 >>= 16;\n                v25 = (int *)((char *)v25 + 2);\n              }\n              v28 = (char *)v25 - __CFADD__((_BYTE)v27, (_BYTE)v27) - 3 - (char *)v64;\n              v29 = v24 - v63 + v28;\n              v62 = v28;\n              if ( v61 )\n              {\n                v43 = v61 + v29;\n                v61 = v43 + 2;\n                v30 = (char *)realloc(v1, v43 + 3);\n                v32 = v62;\n                v31 = v24 - v63;\n              }\n              else\n              {\n                v61 = v29 + 2;\n                v30 = (char *)malloc(v29 + 3);\n                v31 = v24 - v63;\n                v32 = v62;\n              }\n              if ( !v30 )\n              {\n                v58 = v21;\n                v59 = v1;\n                v60 = v20;\n                v1 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\n                v2 = v58;\n                free(v59);\n                sub_4143E0(v60);\n                goto LABEL_26;\n              }\n              v33 = -2 - v31;\n              v34 = v31 + 1;\n              v35 = v61 - v32;\n              v36 = &v30[v61 - v32 + v33];\n              if ( v34 >= 8 )\n              {\n                *(_QWORD *)v36 = *(_QWORD *)v63;\n                *(_QWORD *)&v36[v34 - 8] = *(_QWORD *)&v63[v34 - 8];\n                v44 = (unsigned __int64)(v36 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v45 = &v36[-v44];\n                v46 = (char *)(v63 - v45);\n                v47 = ((_DWORD)v45 + v34) & 0xFFFFFFF8;\n                if ( v47 >= 8 )\n                {\n                  v48 = v47 & 0xFFFFFFF8;\n                  v49 = 0;\n                  do\n                  {\n                    v50 = v49;\n                    v49 += 8;\n                    *(_QWORD *)(v44 + v50) = *(_QWORD *)&v46[v50];\n                  }\n                  while ( v49 < v48 );\n                }\n              }\n              else if ( (v34 & 4) != 0 )\n              {\n                *(_DWORD *)v36 = *(_DWORD *)v63;\n                *(_DWORD *)&v36[v34 - 4] = *(_DWORD *)&v63[v34 - 4];\n              }\n              else if ( v34 )\n              {\n                *v36 = v63[0];\n                if ( (v34 & 2) != 0 )\n                  *(_WORD *)&v36[v34 - 2] = *(_WORD *)&v63[v34 - 2];\n              }\n              v37 = v32 + 1;\n              v38 = &v30[v35 - 1];\n              if ( v37 >= 8 )\n              {\n                *(_QWORD *)v38 = v64[0];\n                *(_QWORD *)&v38[v37 - 8] = *(_QWORD *)&v63[v37 + 56];\n                v51 = (unsigned __int64)(v38 + 8) & 0xFFFFFFFFFFFFFFF8LL;\n                v52 = &v38[-v51];\n                v53 = (char *)((char *)v64 - v52);\n                v54 = ((_DWORD)v52 + v37) & 0xFFFFFFF8;\n                if ( v54 >= 8 )\n                {\n                  v55 = v54 & 0xFFFFFFF8;\n                  v56 = 0;\n                  do\n                  {\n                    v57 = v56;\n                    v56 += 8;\n                    *(_QWORD *)(v51 + v57) = *(_QWORD *)&v53[v57];\n                  }\n                  while ( v56 < v55 );\n                }\n              }\n              else if ( (v37 & 4) != 0 )\n              {\n                *(_DWORD *)v38 = v64[0];\n                *(_DWORD *)&v38[v37 - 4] = *(_DWORD *)&v63[v37 + 60];\n              }\n              else if ( v37 )\n              {\n                *v38 = v64[0];\n                if ( (v37 & 2) != 0 )\n                  *(_WORD *)&v38[v37 - 2] = *(_WORD *)&v63[v37 + 62];\n              }\n              v1 = v30;\n              IO_read_ptr = v20->_IO_read_ptr;\n              if ( IO_read_ptr < v20->_IO_read_end )\n                goto LABEL_31;\n            }\n            v39 = v20;\n            v2 = v21;\n            sub_4143E0(v39);\n            if ( !v61 )\n              goto LABEL_25;\n            v1[v61] = 0;\n            goto LABEL_26;\n          }\n          close(v17);\n        }\nLABEL_25:\n        v1 = (_BYTE *)(\"%s: invalid option -- '%c'\\n\" + 27);\nLABEL_26:\n        free(v13);\n        goto LABEL_20;\n      }\n      if ( v7[v8 - 1] == 47 )\n      {\n        v11 = v8 + 14;\n        goto LABEL_18;\n      }\n      v14 = v8 + 15;\n      v9 = v8 + 1;\n    }\n    else\n    {\n      v14 = 115LL;\n      v9 = 101LL;\n      v10 = 100LL;\n      v7 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n    }\n    v15 = (char *)malloc(v14);\n    v13 = v15;\n    if ( !v15 )\n      goto LABEL_19;\n    memcpy(v15, v7, v10);\n    v13[v10] = 47;\n    goto LABEL_24;\n  }\nLABEL_4:\n  v3 = *v1;\n  if ( *v1 )\n  {\n    while ( strcmp(v2, v1) && (v3 != 42 || v1[1]) )\n    {\n      v4 = &v1[strlen(v1) + 1];\n      v1 = (char *)&v4[strlen(v4) + 1];\n      v3 = *v1;\n      if ( !*v1 )\n        goto LABEL_11;\n    }\n    v2 = &v1[strlen(v1) + 1];\n  }\nLABEL_11:\n  if ( !*v2 )\n    return \"ASCII\";\n  return v2;\n}\n"
        },
        {
            "funcName": "sub_4135D0",
            "funcStartAddr": "0x4135d0",
            "funcEndAddr": "0x4137c9",
            "decompiledFuncCode": "__int64 __fastcall sub_4135D0(int fd, char *file, int a3, __uid_t a4, __gid_t a5, int a6, int a7)\n{\n  unsigned int v11; // ebx\n  __mode_t st_mode; // ecx\n  int v13; // eax\n  int v14; // edx\n  int *v16; // rax\n  int v17; // r12d\n  int *v18; // rbp\n  int v19; // esi\n  int v20; // eax\n  __mode_t v22; // [rsp+Ch] [rbp-CCh]\n  __mode_t v23; // [rsp+Ch] [rbp-CCh]\n  struct stat stat_buf; // [rsp+10h] [rbp-C8h] BYREF\n\n  if ( fd < 0 )\n  {\n    v11 = __xstat(1, file, &stat_buf);\n    if ( v11 )\n      return v11;\n    st_mode = stat_buf.st_mode;\n    if ( (stat_buf.st_mode & 0xF000) != 0x4000 )\n    {\n      v11 = -1;\n      *__errno_location() = 20;\n      return v11;\n    }\n  }\n  else\n  {\n    v11 = __fxstat(1, fd, &stat_buf);\n    if ( v11 )\n      goto LABEL_23;\n    st_mode = stat_buf.st_mode;\n    if ( (stat_buf.st_mode & 0xF000) != 0x4000 )\n    {\n      v16 = __errno_location();\n      v17 = 20;\n      v11 = -1;\n      *v16 = 20;\n      v18 = v16;\nLABEL_15:\n      close(fd);\n      *v18 = v17;\n      return v11;\n    }\n  }\n  if ( (a4 == -1 || stat_buf.st_uid == a4) && (a5 == -1 || stat_buf.st_gid == a5) )\n    goto LABEL_18;\n  if ( fd >= 0 )\n  {\n    v23 = st_mode;\n    v20 = fchown(fd, a4, a5);\n    st_mode = v23;\n    v11 = v20;\n    if ( !v20 )\n      goto LABEL_10;\nLABEL_23:\n    v18 = __errno_location();\n    v17 = *v18;\n    goto LABEL_15;\n  }\n  v22 = st_mode;\n  if ( a3 == -1 )\n    v13 = chown(file, a4, a5);\n  else\n    v13 = lchown(file, a4, a5);\n  st_mode = v22;\n  v11 = v13;\n  if ( !v13 )\n  {\nLABEL_10:\n    if ( (st_mode & 0x49) != 0 )\n    {\n      v14 = st_mode & 0xC00;\n      goto LABEL_19;\n    }\nLABEL_18:\n    v14 = 0;\nLABEL_19:\n    if ( ((v14 | a6 ^ st_mode) & a7) != 0 )\n    {\n      v19 = a6 | (unsigned __int16)st_mode & (unsigned __int16)~(_WORD)a7 & 0xFFF;\n      if ( fd < 0 )\n        return (unsigned int)chmod(file, v19);\n      v11 = fchmod(fd, v19);\n      if ( v11 )\n        goto LABEL_23;\n    }\n    else\n    {\n      v11 = 0;\n      if ( fd < 0 )\n        return v11;\n    }\n    return (unsigned int)close(fd);\n  }\n  return v11;\n}\n"
        },
        {
            "funcName": "sub_4137D0",
            "funcStartAddr": "0x4137d0",
            "funcEndAddr": "0x4137f3",
            "decompiledFuncCode": "_QWORD *__fastcall sub_4137D0(__int64 a1, __int64 a2)\n{\n  _QWORD *result; // rax\n\n  result = sub_4112E0(0x18uLL, a2);\n  *result = a1;\n  result[2] = 0LL;\n  result[1] = 0LL;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_413800",
            "funcStartAddr": "0x413800",
            "funcEndAddr": "0x41382f",
            "decompiledFuncCode": "_QWORD *__fastcall sub_413800(__int64 a1, __int64 a2)\n{\n  __int64 v2; // rbx\n  _QWORD *result; // rax\n\n  v2 = sub_413A20();\n  result = 0LL;\n  if ( v2 )\n  {\n    result = sub_4112E0(0x18uLL, a2);\n    *result = v2;\n    result[2] = 0LL;\n    result[1] = 0LL;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_413840",
            "funcStartAddr": "0x413840",
            "funcEndAddr": "0x413935",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_413840(__int64 *a1, unsigned __int64 a2)\n{\n  unsigned __int64 v2; // r14\n  __int64 v4; // r12\n  unsigned __int64 v5; // rbp\n  unsigned __int64 v6; // rbx\n  unsigned __int64 v7; // rsi\n  unsigned __int64 v8; // rax\n  __int64 v9; // rdx\n  char *v10; // rax\n  __int64 v11; // rdx\n  char v13[64]; // [rsp+8h] [rbp-40h] BYREF\n\n  v2 = a2 + 1;\n  v4 = *a1;\n  v5 = a1[1];\n  v6 = a1[2];\n  while ( 1 )\n  {\n    if ( v6 >= a2 )\n    {\n      if ( v6 == a2 )\n        goto LABEL_11;\n    }\n    else\n    {\n      v8 = v6;\n      v9 = 0LL;\n      do\n      {\n        ++v9;\n        v8 = (v8 << 8) + 255;\n      }\n      while ( a2 > v8 );\n      sub_413D30(v4, v13, v9);\n      v10 = v13;\n      do\n      {\n        v11 = (unsigned __int8)*v10++;\n        v6 = (v6 << 8) + 255;\n        v5 = v11 + (v5 << 8);\n      }\n      while ( a2 > v6 );\n      if ( v6 == a2 )\n      {\nLABEL_11:\n        a1[2] = 0LL;\n        a1[1] = 0LL;\n        return v5;\n      }\n    }\n    v7 = (v6 - a2) % v2;\n    if ( v5 <= v6 - v7 )\n      break;\n    v6 = v7 - 1;\n    v5 %= v2;\n  }\n  a1[1] = v5 / v2;\n  v5 %= v2;\n  a1[2] = (v6 - a2) / v2;\n  return v5;\n}\n"
        },
        {
            "funcName": "sub_413940",
            "funcStartAddr": "0x413940",
            "funcEndAddr": "0x41395e",
            "decompiledFuncCode": "void __fastcall sub_413940(void *ptr)\n{\n  __explicit_bzero_chk(ptr, 24LL, -1LL);\n  free(ptr);\n}\n"
        },
        {
            "funcName": "sub_413960",
            "funcStartAddr": "0x413960",
            "funcEndAddr": "0x4139b1",
            "decompiledFuncCode": "__int64 __fastcall sub_413960(void **ptr)\n{\n  unsigned int v1; // r12d\n  int *v2; // rax\n  int v3; // r13d\n  int *v4; // rbp\n\n  v1 = sub_413E90(*ptr);\n  v2 = __errno_location();\n  v3 = *v2;\n  v4 = v2;\n  __explicit_bzero_chk(ptr, 24LL, -1LL);\n  free(ptr);\n  *v4 = v3;\n  return v1;\n}\n"
        },
        {
            "funcName": "sub_4139C0",
            "funcStartAddr": "0x403042",
            "funcEndAddr": "0x403047",
            "decompiledFuncCode": "void __fastcall __noreturn sub_4139C0(__int64 a1)\n{\n  _BYTE *v1; // rbp\n  int *v2; // rbx\n  char *v3; // rax\n\n  if ( a1 )\n  {\n    v1 = sub_40EC50(a1);\n    v2 = __errno_location();\n    if ( *v2 )\n      v3 = dcgettext(0LL, \"%s: read error\", 5);\n    else\n      v3 = dcgettext(0LL, \"%s: end of file\", 5);\n    error(status, *v2, v3, v1);\n  }\n  abort();\n}\n\nvoid __fastcall __noreturn sub_4139C0(__int64 a1)\n{\n  _BYTE *v1; // rbp\n  int *v2; // rbx\n  char *v3; // rax\n\n  if ( a1 )\n  {\n    v1 = sub_40EC50(a1);\n    v2 = __errno_location();\n    if ( *v2 )\n      v3 = dcgettext(0LL, \"%s: read error\", 5);\n    else\n      v3 = dcgettext(0LL, \"%s: end of file\", 5);\n    error(status, *v2, v3, v1);\n  }\n  abort();\n}\n"
        },
        {
            "funcName": "sub_4139C0",
            "funcStartAddr": "0x403042",
            "funcEndAddr": "0x403047",
            "decompiledFuncCode": "void __fastcall __noreturn sub_4139C0(__int64 a1)\n{\n  _BYTE *v1; // rbp\n  int *v2; // rbx\n  char *v3; // rax\n\n  if ( a1 )\n  {\n    v1 = sub_40EC50(a1);\n    v2 = __errno_location();\n    if ( *v2 )\n      v3 = dcgettext(0LL, \"%s: read error\", 5);\n    else\n      v3 = dcgettext(0LL, \"%s: end of file\", 5);\n    error(status, *v2, v3, v1);\n  }\n  abort();\n}\n\nvoid __fastcall __noreturn sub_4139C0(__int64 a1)\n{\n  _BYTE *v1; // rbp\n  int *v2; // rbx\n  char *v3; // rax\n\n  if ( a1 )\n  {\n    v1 = sub_40EC50(a1);\n    v2 = __errno_location();\n    if ( *v2 )\n      v3 = dcgettext(0LL, \"%s: read error\", 5);\n    else\n      v3 = dcgettext(0LL, \"%s: end of file\", 5);\n    error(status, *v2, v3, v1);\n  }\n  abort();\n}\n"
        },
        {
            "funcName": "sub_413A20",
            "funcStartAddr": "0x413a20",
            "funcEndAddr": "0x413d0f",
            "decompiledFuncCode": "__m128i *__fastcall sub_413A20(__int64 a1, unsigned __int64 a2)\n{\n  FILE *v2; // r13\n  __m128i *v3; // rax\n  size_t v4; // rcx\n  __m128i *v5; // rbx\n  __m128i *v7; // rax\n  __m128i *v8; // r13\n  int v9; // eax\n  int v10; // r15d\n  __int64 v11; // rdx\n  __int64 chk; // rbp\n  unsigned __int64 v13; // r14\n  __int64 v14; // rbp\n  unsigned int v15; // eax\n  __int64 v16; // rdx\n  unsigned __int64 v17; // rbp\n  __int64 v18; // r14\n  unsigned int v19; // eax\n  __int64 v20; // rdx\n  unsigned __int64 v21; // rbp\n  int v22; // eax\n  unsigned int v23; // edi\n  unsigned int v24; // eax\n  __int64 v25; // rdx\n  __int64 v26; // rcx\n  struct timeval *v27; // r15\n  __int64 v28; // rbp\n  __int64 v29; // r14\n  unsigned __int64 v30; // rcx\n  unsigned int v31; // [rsp+8h] [rbp-50h]\n  struct timeval tv; // [rsp+10h] [rbp-48h] BYREF\n\n  if ( !a2 )\n  {\n    v5 = (__m128i *)sub_4112E0(0x1038uLL, 0LL);\n    v5->m128i_i64[0] = 0LL;\n    v5->m128i_i64[1] = (__int64)sub_4139C0;\n    v5[1].m128i_i64[0] = 0LL;\n    return v5;\n  }\n  if ( !a1 )\n  {\n    v7 = (__m128i *)sub_4112E0(0x1038uLL, a2);\n    v7->m128i_i64[0] = 0LL;\n    v5 = v7;\n    v8 = v7 + 2;\n    v7->m128i_i64[1] = (__int64)sub_4139C0;\n    v7[1].m128i_i64[0] = 0LL;\n    v7[1].m128i_i64[1] = 0LL;\n    v9 = open(\"/dev/urandom\", 0);\n    v10 = v9;\n    if ( v9 < 0 )\n    {\n      v13 = 20LL;\n      gettimeofday(&tv, 0LL);\n      v5[2] = _mm_load_si128((const __m128i *)&tv);\n      LODWORD(tv.tv_sec) = getpid();\n      v5[3].m128i_i32[0] = tv.tv_sec;\n    }\n    else\n    {\n      v11 = a2;\n      if ( a2 > 0x800 )\n        v11 = 2048LL;\n      chk = __read_chk((unsigned int)v9, v8, v11, 4120LL);\n      close(v10);\n      if ( chk > 2047 )\n        goto LABEL_12;\n      if ( chk < 0 )\n        chk = 0LL;\n      v26 = 2048 - chk;\n      v27 = (struct timeval *)&v8->m128i_i8[chk];\n      if ( (unsigned __int64)(2048 - chk) > 0x10 )\n        v26 = 16LL;\n      v28 = v26 + chk;\n      v31 = v26;\n      gettimeofday(&tv, 0LL);\n      qmemcpy(v27, &tv, v31);\n      if ( v28 > 2047 )\n        goto LABEL_12;\n      v29 = 2048 - v28;\n      if ( (unsigned __int64)(2048 - v28) > 4 )\n        v29 = 4LL;\n      LODWORD(tv.tv_sec) = getpid();\n      v30 = (unsigned int)v29;\n      v13 = v28 + v29;\n      qmemcpy(&v8->m128i_i8[v28], &tv, v30);\n      if ( v13 > 0x7FF )\n        goto LABEL_12;\n    }\n    v14 = 2048 - v13;\n    if ( 2048 - v13 > 4 )\n      v14 = 4LL;\n    LODWORD(tv.tv_sec) = getppid();\n    if ( (_DWORD)v14 )\n    {\n      v15 = 0;\n      do\n      {\n        v16 = v15++;\n        v8->m128i_i8[v13 + v16] = *((_BYTE *)&tv.tv_sec + v16);\n      }\n      while ( v15 < (unsigned int)v14 );\n    }\n    v17 = v13 + v14;\n    if ( v17 <= 0x7FF )\n    {\n      v18 = 2048 - v17;\n      if ( 2048 - v17 > 4 )\n        v18 = 4LL;\n      LODWORD(tv.tv_sec) = getuid();\n      if ( (_DWORD)v18 )\n      {\n        v19 = 0;\n        do\n        {\n          v20 = v19++;\n          v8->m128i_i8[v17 + v20] = *((_BYTE *)&tv.tv_sec + v20);\n        }\n        while ( v19 < (unsigned int)v18 );\n      }\n      v21 = v18 + v17;\n      if ( v21 <= 0x7FF )\n      {\n        LODWORD(tv.tv_sec) = getgid();\n        v22 = 2048 - v21;\n        if ( 2048 - v21 > 4 )\n          v22 = 4;\n        v23 = v22;\n        if ( v22 )\n        {\n          v24 = 0;\n          do\n          {\n            v25 = v24++;\n            v8->m128i_i8[v21 + v25] = *((_BYTE *)&tv.tv_sec + v25);\n          }\n          while ( v24 < v23 );\n        }\n      }\n    }\nLABEL_12:\n    sub_414190(v8);\n    return v5;\n  }\n  v2 = (FILE *)sub_415F90(a1, \"rb\");\n  if ( !v2 )\n    return 0LL;\n  v3 = (__m128i *)sub_4112E0(0x1038uLL, (__int64)\"rb\");\n  v4 = 4096LL;\n  v3->m128i_i64[0] = (__int64)v2;\n  if ( a2 <= 0x1000 )\n    v4 = a2;\n  v3->m128i_i64[1] = (__int64)sub_4139C0;\n  v5 = v3;\n  v3[1].m128i_i64[0] = a1;\n  setvbuf(v2, &v3[1].m128i_i8[8], 0, v4);\n  return v5;\n}\n"
        },
        {
            "funcName": "sub_413D30",
            "funcStartAddr": "0x413d30",
            "funcEndAddr": "0x413e8c",
            "decompiledFuncCode": "__int64 __fastcall sub_413D30(__int64 a1, char *a2, size_t a3)\n{\n  size_t v5; // rbx\n  FILE *v6; // r13\n  int *v7; // r14\n  __int64 v8; // rdi\n  int v9; // edx\n  __int64 result; // rax\n  size_t v11; // r15\n  char *v12; // r13\n  __int64 v13; // r14\n  void *v14; // rdi\n  char *v15; // rsi\n\n  v5 = a3;\n  v6 = *(FILE **)a1;\n  if ( *(_QWORD *)a1 )\n  {\n    v7 = __errno_location();\n    while ( 1 )\n    {\n      result = fread_unlocked(a2, 1uLL, v5, v6);\n      v9 = *v7;\n      a2 += result;\n      v5 -= result;\n      if ( !v5 )\n        break;\n      v8 = *(_QWORD *)(a1 + 16);\n      if ( (**(_BYTE **)a1 & 0x20) == 0 )\n        v9 = 0;\n      *v7 = v9;\n      (*(void (__fastcall **)(__int64))(a1 + 8))(v8);\n      v6 = *(FILE **)a1;\n    }\n  }\n  else\n  {\n    v11 = *(_QWORD *)(a1 + 24);\n    v12 = (char *)(a1 + 2104);\n    v13 = a1 + 32;\n    if ( a3 <= v11 )\n    {\n      v12 = &v12[-v11 + 2048];\nLABEL_16:\n      result = (__int64)memcpy(a2, v12, v5);\n      *(_QWORD *)(a1 + 24) = v11 - v5;\n    }\n    else\n    {\n      while ( 1 )\n      {\n        v14 = a2;\n        a2 += v11;\n        v5 -= v11;\n        memcpy(v14, &v12[2048 - v11], v11);\n        if ( ((unsigned __int8)a2 & 7) == 0 )\n          break;\n        v11 = 2048LL;\n        sub_413EE0(v13, v12);\n        if ( v5 <= 0x800 )\n        {\nLABEL_15:\n          v11 = 2048LL;\n          goto LABEL_16;\n        }\n      }\n      do\n      {\n        if ( v5 <= 0x7FF )\n        {\n          sub_413EE0(v13, v12);\n          goto LABEL_15;\n        }\n        v15 = a2;\n        a2 += 2048;\n        result = sub_413EE0(v13, v15);\n        v5 -= 2048LL;\n      }\n      while ( v5 );\n      *(_QWORD *)(a1 + 24) = 0LL;\n    }\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_413E90",
            "funcStartAddr": "0x413e90",
            "funcEndAddr": "0x413ed9",
            "decompiledFuncCode": "__int64 __fastcall sub_413E90(FILE **ptr)\n{\n  FILE *v1; // rbp\n\n  v1 = *ptr;\n  __explicit_bzero_chk(ptr, 4152LL, -1LL);\n  free(ptr);\n  if ( v1 )\n    return sub_4143E0(v1);\n  else\n    return 0LL;\n}\n"
        },
        {
            "funcName": "sub_413EE0",
            "funcStartAddr": "0x413ee0",
            "funcEndAddr": "0x414185",
            "decompiledFuncCode": "unsigned __int64 *__fastcall sub_413EE0(unsigned __int64 *a1, unsigned __int64 *a2)\n{\n  unsigned __int64 v2; // r11\n  unsigned __int64 v3; // rdx\n  unsigned __int64 *v4; // r9\n  __int64 v5; // r8\n  unsigned __int64 *result; // rax\n  unsigned __int64 v7; // r11\n  unsigned __int64 v8; // rcx\n  unsigned __int64 v9; // rdx\n  unsigned __int64 v10; // r8\n  unsigned __int64 v11; // rbx\n  unsigned __int64 v12; // r8\n  unsigned __int64 v13; // r11\n  unsigned __int64 v14; // rcx\n  unsigned __int64 v15; // rbx\n  unsigned __int64 v16; // rcx\n  unsigned __int64 v17; // rdx\n  unsigned __int64 v18; // r8\n  unsigned __int64 v19; // rcx\n  unsigned __int64 v20; // r8\n  unsigned __int64 v21; // rcx\n  unsigned __int64 *v22; // rsi\n  unsigned __int64 v23; // rcx\n  unsigned __int64 v24; // rdx\n  unsigned __int64 v25; // rbx\n  unsigned __int64 v26; // rcx\n  unsigned __int64 v27; // r8\n  unsigned __int64 v28; // r10\n  unsigned __int64 v29; // rcx\n  unsigned __int64 v30; // r11\n  unsigned __int64 v31; // rcx\n  unsigned __int64 v32; // rdx\n  unsigned __int64 v33; // r8\n  unsigned __int64 v34; // rcx\n  unsigned __int64 v35; // r8\n  unsigned __int64 v36; // rcx\n\n  v2 = a1[257];\n  v3 = a1[256];\n  v4 = a2;\n  v5 = a1[258] + 1;\n  result = a1;\n  a1[258] = v5;\n  v7 = v5 + v2;\n  do\n  {\n    v8 = *result;\n    v9 = result[128] + ~((v3 << 21) ^ v3);\n    v10 = v7 + v9 + *(unsigned __int64 *)((char *)a1 + (*result & 0x7F8));\n    *result = v10;\n    v11 = v8 + *(unsigned __int64 *)((char *)a1 + ((v10 >> 8) & 0x7F8));\n    *v4 = v11;\n    v12 = result[1];\n    v13 = result[129] + ((v9 >> 5) ^ v9);\n    v14 = v11 + v13 + *(unsigned __int64 *)((char *)a1 + (v12 & 0x7F8));\n    result[1] = v14;\n    v15 = v12 + *(unsigned __int64 *)((char *)a1 + ((v14 >> 8) & 0x7F8));\n    v4[1] = v15;\n    v16 = result[2];\n    v17 = result[130] + (v13 ^ (v13 << 12));\n    v18 = v15 + v17 + *(unsigned __int64 *)((char *)a1 + (v16 & 0x7F8));\n    result[2] = v18;\n    v19 = *(unsigned __int64 *)((char *)a1 + ((v18 >> 8) & 0x7F8)) + v16;\n    v4[2] = v19;\n    v20 = result[3];\n    v3 = result[131] + ((v17 >> 33) ^ v17);\n    v21 = v19 + v3 + *(unsigned __int64 *)((char *)a1 + (v20 & 0x7F8));\n    result += 4;\n    v4 += 4;\n    *(result - 1) = v21;\n    v7 = v20 + *(unsigned __int64 *)((char *)a1 + ((v21 >> 8) & 0x7F8));\n    *(v4 - 1) = v7;\n  }\n  while ( result != a1 + 128 );\n  v22 = a2 + 128;\n  do\n  {\n    v23 = *result;\n    v24 = *(result - 128) + ~((v3 << 21) ^ v3);\n    v25 = v24 + *(unsigned __int64 *)((char *)a1 + (*result & 0x7F8));\n    *result = v7 + v25;\n    v26 = *(unsigned __int64 *)((char *)a1 + (((v7 + v25) >> 8) & 0x7F8)) + v23;\n    *v22 = v26;\n    v27 = result[1];\n    v28 = *(result - 127) + ((v24 >> 5) ^ v24);\n    v29 = v26 + v28 + *(unsigned __int64 *)((char *)a1 + (v27 & 0x7F8));\n    result[1] = v29;\n    v30 = v27 + *(unsigned __int64 *)((char *)a1 + ((v29 >> 8) & 0x7F8));\n    v22[1] = v30;\n    v31 = result[2];\n    v32 = *(result - 126) + (v28 ^ (v28 << 12));\n    v33 = v30 + v32 + *(unsigned __int64 *)((char *)a1 + (v31 & 0x7F8));\n    result[2] = v33;\n    v34 = *(unsigned __int64 *)((char *)a1 + ((v33 >> 8) & 0x7F8)) + v31;\n    v22[2] = v34;\n    v35 = result[3];\n    v3 = *(result - 125) + ((v32 >> 33) ^ v32);\n    v36 = v34 + v3 + *(unsigned __int64 *)((char *)a1 + (v35 & 0x7F8));\n    result += 4;\n    v22 += 4;\n    *(result - 1) = v36;\n    v7 = v35 + *(unsigned __int64 *)((char *)a1 + ((v36 >> 8) & 0x7F8));\n    *(v22 - 1) = v7;\n  }\n  while ( result != a1 + 256 );\n  a1[256] = v3;\n  a1[257] = v7;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_414190",
            "funcStartAddr": "0x414190",
            "funcEndAddr": "0x4143c4",
            "decompiledFuncCode": "unsigned __int64 __fastcall sub_414190(__int64 *a1)\n{\n  __int64 *v1; // rdx\n  __int64 *v2; // rax\n  unsigned __int64 v3; // rcx\n  unsigned __int64 v4; // rsi\n  unsigned __int64 v5; // r11\n  unsigned __int64 v6; // r12\n  unsigned __int64 v7; // r10\n  unsigned __int64 v8; // r9\n  __int64 *v9; // rbp\n  __int64 v10; // r8\n  __int64 v11; // rbx\n  unsigned __int64 v12; // rsi\n  unsigned __int64 v13; // rcx\n  __int64 v14; // r8\n  __int64 v15; // rbx\n  unsigned __int64 v16; // r9\n  unsigned __int64 v17; // r12\n  unsigned __int64 v18; // r10\n  unsigned __int64 v19; // rcx\n  unsigned __int64 v20; // r11\n  unsigned __int64 v21; // rsi\n  unsigned __int64 v22; // rbx\n  unsigned __int64 v23; // r13\n  unsigned __int64 v24; // r12\n  unsigned __int64 v25; // rcx\n  unsigned __int64 v26; // rsi\n  unsigned __int64 v27; // r8\n  __int64 v28; // rbx\n  unsigned __int64 v29; // r9\n  unsigned __int64 v30; // r12\n  unsigned __int64 v31; // r10\n  unsigned __int64 v32; // rcx\n  unsigned __int64 v33; // r11\n  unsigned __int64 v34; // rsi\n  unsigned __int64 v35; // rbx\n  unsigned __int64 result; // rax\n  unsigned __int64 v37; // r12\n\n  v1 = a1;\n  v2 = a1;\n  v3 = 0x98F5704F6C44C0ABLL;\n  v4 = 0x82F053DB8355E0CELL;\n  v5 = 0xB29B2E824A595524LL;\n  v6 = 0xAE985BF2CBFC89EDLL;\n  v7 = 0x8C0EA5053D4712A0LL;\n  v8 = 0xB9F8B322C73AC862LL;\n  v9 = a1 + 256;\n  v10 = 0x647C4677A2884B7CLL;\n  v11 = 0x48FE4A0FA5A09315LL;\n  do\n  {\n    v12 = v2[4] + v4;\n    v13 = v2[7] + v3;\n    v14 = *v2 - v12 + v10;\n    v15 = (v13 >> 9) ^ (v2[5] + v11);\n    v16 = v2[1] - v15 + v8;\n    v17 = (v14 << 9) ^ (v2[6] + v6);\n    v18 = v2[2] - v17 + v7;\n    v19 = (v16 >> 23) ^ (v14 + v13);\n    v20 = v2[3] - v19 + v5;\n    v10 = (v18 << 15) ^ (v16 + v14);\n    v21 = v12 - v10;\n    *v2 = v10;\n    v8 = (v20 >> 14) ^ (v18 + v16);\n    v22 = v15 - v8;\n    v2[1] = v8;\n    v7 = (v21 << 20) ^ (v20 + v18);\n    v23 = v21 + v22;\n    v24 = v17 - v7;\n    v2[2] = v7;\n    v2 += 8;\n    v5 = (v22 >> 17) ^ (v21 + v20);\n    v11 = v24 + v22;\n    v3 = v19 - v5;\n    *(v2 - 5) = v5;\n    v4 = v23 ^ (v24 << 14);\n    v6 = v3 + v24;\n    *(v2 - 3) = v11;\n    *(v2 - 4) = v4;\n    *(v2 - 2) = v6;\n    *(v2 - 1) = v3;\n  }\n  while ( v9 != v2 );\n  do\n  {\n    v25 = v1[7] + v3;\n    v26 = v1[4] + v4;\n    v27 = *v1 + v10 - v26;\n    v28 = (v25 >> 9) ^ (v1[5] + v11);\n    v29 = v1[1] + v8 - v28;\n    v30 = (v27 << 9) ^ (v1[6] + v6);\n    v31 = v1[2] + v7 - v30;\n    v32 = (v29 >> 23) ^ (v27 + v25);\n    v33 = v1[3] + v5 - v32;\n    v10 = (v31 << 15) ^ (v29 + v27);\n    v34 = v26 - v10;\n    *v1 = v10;\n    v8 = (v33 >> 14) ^ (v31 + v29);\n    v35 = v28 - v8;\n    v1[1] = v8;\n    v7 = (v34 << 20) ^ (v33 + v31);\n    result = v34 + v35;\n    v37 = v30 - v7;\n    v1[2] = v7;\n    v1 += 8;\n    v5 = (v35 >> 17) ^ (v34 + v33);\n    v11 = v37 + v35;\n    v3 = v32 - v5;\n    *(v1 - 5) = v5;\n    v4 = result ^ (v37 << 14);\n    v6 = v3 + v37;\n    *(v1 - 3) = v11;\n    *(v1 - 4) = v4;\n    *(v1 - 2) = v6;\n    *(v1 - 1) = v3;\n  }\n  while ( v9 != v1 );\n  a1[258] = 0LL;\n  a1[257] = 0LL;\n  a1[256] = 0LL;\n  return result;\n}\n"
        },
        {
            "funcName": "sub_4143D0",
            "funcStartAddr": "0x4143d0",
            "funcEndAddr": "0x4143de",
            "decompiledFuncCode": "__int64 __fastcall sub_4143D0(int a1, __int64 a2, __int64 a3, int a4, int a5, int a6)\n{\n  return sub_411A10(a1, 0, 3LL, a4, a5, a6);\n}\n"
        },
        {
            "funcName": "sub_4143E0",
            "funcStartAddr": "0x4143e0",
            "funcEndAddr": "0x41445b",
            "decompiledFuncCode": "int __fastcall sub_4143E0(FILE *stream)\n{\n  int *v1; // rax\n  int v2; // r12d\n  int *v3; // rbp\n  int result; // eax\n  int v5; // eax\n\n  if ( fileno(stream) < 0 )\n    return fclose(stream);\n  if ( __freading(stream) )\n  {\n    v5 = fileno(stream);\n    if ( lseek(v5, 0LL, 1) == -1 )\n      return fclose(stream);\n  }\n  if ( !sub_411B50(stream) )\n    return fclose(stream);\n  v1 = __errno_location();\n  v2 = *v1;\n  v3 = v1;\n  result = fclose(stream);\n  if ( v2 )\n  {\n    *v3 = v2;\n    return -1;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_414460",
            "funcStartAddr": "0x414460",
            "funcEndAddr": "0x414464",
            "decompiledFuncCode": "void __fastcall sub_414460(_DWORD *a1)\n{\n  *a1 |= 0x20u;\n}\n"
        },
        {
            "funcName": "sub_414470",
            "funcStartAddr": "0x403047",
            "funcEndAddr": "0x40304c",
            "decompiledFuncCode": "char *__fastcall sub_414470(void *a1, size_t *a2, _BYTE *a3, __int64 a4, double a5)\n{\n  __int64 v7; // rax\n  unsigned __int64 v8; // rax\n  size_t v9; // rdi\n  __int64 *v10; // rax\n  size_t v11; // r12\n  char *v12; // r14\n  _BYTE *v13; // r8\n  char *v14; // rbx\n  size_t v15; // r15\n  _BYTE *v16; // rcx\n  void *v17; // rcx\n  unsigned __int64 v18; // rax\n  size_t v19; // r13\n  bool v20; // dl\n  char *v21; // rax\n  char *v22; // rax\n  void *v23; // rsp\n  char *v24; // rax\n  char v25; // r15\n  __int64 v26; // rax\n  char *v27; // r8\n  long double *v28; // rdx\n  int v29; // eax\n  char v30; // al\n  int v31; // eax\n  char *v32; // r15\n  __int64 v33; // rdi\n  _BYTE *v34; // rsi\n  _BYTE *v35; // rdx\n  _BYTE *v36; // rsi\n  _BYTE *v37; // rdx\n  __int64 v38; // rax\n  char v39; // al\n  __int64 v40; // rax\n  char *v41; // rax\n  __int64 v42; // rax\n  char *v43; // r8\n  int v44; // eax\n  unsigned __int64 v45; // rax\n  char *v46; // r11\n  int *v47; // rax\n  char *v48; // r11\n  unsigned __int64 v49; // rbx\n  unsigned __int64 v50; // r10\n  char *v51; // rdx\n  char *v52; // rcx\n  __int64 v53; // rsi\n  _DWORD *v54; // r8\n  unsigned __int64 v55; // rdx\n  unsigned __int64 v56; // rcx\n  void *v57; // r15\n  unsigned __int64 v59; // rax\n  char *v60; // rax\n  char v62; // fps^1\n  char *v66; // rdx\n  char *v67; // rdi\n  int v68; // r11d\n  __int64 v69; // rcx\n  _DWORD *v70; // rcx\n  char *v71; // rdi\n  unsigned __int64 v72; // r9\n  int v73; // eax\n  int v74; // edx\n  __int64 v75; // rax\n  bool v76; // cf\n  unsigned __int64 v77; // rax\n  bool v78; // bl\n  char *v79; // rax\n  int v80; // ebx\n  __int64 v81; // rax\n  char *v82; // rdi\n  unsigned __int128 v83; // fst7\n  __int64 v84; // rax\n  char *v85; // rdi\n  unsigned __int64 v86; // rax\n  void *v87; // rax\n  char *v88; // rax\n  char *v89; // rcx\n  int v90; // r8d\n  __int16 v91; // ax\n  char *v92; // r15\n  char *v93; // rax\n  char *v94; // rax\n  char *v95; // rax\n  char v96; // al\n  char *v97; // r9\n  size_t v98; // r8\n  unsigned __int64 v99; // r10\n  char *v100; // rdi\n  __int64 v101; // rax\n  char *v102; // r10\n  unsigned __int64 v103; // rax\n  char *v104; // rax\n  char *v105; // rsi\n  char v106; // al\n  size_t v107; // r15\n  size_t v108; // r14\n  bool v109; // r13\n  char *v110; // rax\n  char *v111; // rax\n  __int64 v112; // rax\n  char *v113; // r10\n  char *v114; // rax\n  char *v115; // rax\n  char *v116; // rax\n  __int64 v117; // rsi\n  __int64 v118; // rdx\n  char v119; // al\n  __int64 v120; // rdx\n  char *v121; // rax\n  char *v122; // rax\n  __int64 v123; // rdx\n  char v124; // al\n  char *v125; // rax\n  char *v126; // rsi\n  __int64 v127; // r9\n  __int64 v128; // rdx\n  char *v129; // rax\n  char *v130; // rsi\n  char *v131; // rdi\n  __int64 v132; // rax\n  __int64 v133; // rsi\n  unsigned __int64 v134; // rax\n  char v135; // al\n  __int64 v136; // rsi\n  char v137; // al\n  char *v138; // rax\n  __int64 v139; // rdx\n  char v140; // al\n  char *v141; // rax\n  char *v142; // rax\n  char *v143; // rax\n  void *v144; // rdx\n  char v145; // al\n  _BYTE *v146; // rax\n  char *v147; // rax\n  char v148; // al\n  __int64 v149; // [rsp-8h] [rbp-718h]\n  int *v150; // [rsp+10h] [rbp-700h]\n  int *v151; // [rsp+18h] [rbp-6F8h]\n  __int64 v152; // [rsp+20h] [rbp-6F0h] BYREF\n  unsigned __int64 v153; // [rsp+28h] [rbp-6E8h]\n  char *v154; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v156; // [rsp+40h] [rbp-6D0h]\n  void *v157; // [rsp+48h] [rbp-6C8h]\n  char *v158; // [rsp+50h] [rbp-6C0h]\n  __int64 v159; // [rsp+58h] [rbp-6B8h]\n  _BYTE *v160; // [rsp+60h] [rbp-6B0h]\n  __int64 *v161; // [rsp+68h] [rbp-6A8h]\n  long double v162; // [rsp+70h] [rbp-6A0h]\n  void *v163; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v165; // [rsp+94h] [rbp-67Ch] BYREF\n  unsigned int v166; // [rsp+98h] [rbp-678h]\n  unsigned int v167; // [rsp+9Ch] [rbp-674h]\n  char v168[8]; // [rsp+A0h] [rbp-670h] BYREF\n  void *v169; // [rsp+A8h] [rbp-668h]\n  _BYTE v170[224]; // [rsp+B0h] [rbp-660h] BYREF\n  __int64 v171; // [rsp+190h] [rbp-580h] BYREF\n  void *v172; // [rsp+198h] [rbp-578h]\n  __int64 v173; // [rsp+1A0h] [rbp-570h]\n  __int64 v174; // [rsp+1A8h] [rbp-568h]\n  _BYTE v175[624]; // [rsp+1B0h] [rbp-560h] BYREF\n  char v176[752]; // [rsp+420h] [rbp-2F0h] BYREF\n\n  src = a1;\n  v156 = a2;\n  if ( (int)sub_416250(a3, &v171, v168) < 0 )\n    return 0LL;\n  if ( (int)sub_416030(a4, v168) >= 0 )\n  {\n    v7 = v173 + 7;\n    if ( (unsigned __int64)(v173 + 7) <= 6 )\n      v7 = -1LL;\n    v76 = __CFADD__(v174, v7);\n    v8 = v174 + v7;\n    if ( v76 )\n      goto LABEL_112;\n    v9 = v8 + 6;\n    if ( v8 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v9 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v23 = alloca(v8 + 14);\n      v161 = &v152;\n    }\n    else\n    {\n      if ( v8 == -7LL )\n        goto LABEL_112;\n      v10 = (__int64 *)malloc(v9);\n      v161 = v10;\n      if ( !v10 )\n        goto LABEL_112;\n      ptr = v10;\n    }\n    v11 = 0LL;\n    if ( src )\n      v11 = *v156;\n    v12 = (char *)v172;\n    v13 = a3;\n    v14 = (char *)src;\n    v159 = 0LL;\n    v15 = 0LL;\n    v16 = *(_BYTE **)v172;\n    if ( *(_BYTE **)v172 == v13 )\n      goto LABEL_111;\nLABEL_14:\n    v17 = (void *)(v16 - v13);\n    v18 = (unsigned __int64)v17 + v15;\n    v19 = (size_t)v17 + v15;\n    if ( __CFADD__(v17, v15) )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n      v19 = -1LL;\n    }\n    else if ( v11 < v18 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v18 )\n        {\nLABEL_28:\n          v20 = v14 == src;\n          if ( !v14 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v18 <= 0xC )\n      {\n        v11 = 12LL;\n        v20 = v14 == src;\n        if ( !v14 )\n        {\nLABEL_19:\n          v160 = v13;\n          LOBYTE(v162) = v20;\n          v163 = v17;\n          v21 = (char *)malloc(v11);\n          v17 = v163;\n          v13 = v160;\n          if ( !v21 )\n            goto LABEL_88;\n          if ( v15 && LOBYTE(v162) )\n          {\n            *(_QWORD *)&v162 = v160;\n            v22 = (char *)memcpy(v21, v14, v15);\n            v17 = v163;\n            v13 = *(_BYTE **)&v162;\n            v14 = v22;\n          }\n          else\n          {\n            v14 = v21;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v20 )\n        {\n          *(_QWORD *)&v162 = v13;\n          v163 = v17;\n          v24 = (char *)realloc(v14, v11);\n          if ( !v24 )\n            goto LABEL_126;\n          v17 = v163;\n          v13 = *(_BYTE **)&v162;\n          v14 = v24;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v18 == -1LL )\n        goto LABEL_88;\n      v11 = (size_t)v17 + v15;\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v14[v15], v13, (size_t)v17);\n    while ( v171 != v159 )\n    {\n      v25 = v12[72];\n      v26 = *((_QWORD *)v12 + 10);\n      if ( v25 == 37 )\n      {\n        if ( v26 != -1 )\n          goto LABEL_200;\n        v59 = v19 + 1;\n        v15 = v19 + 1;\n        if ( v19 == -1LL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n          v15 = -1LL;\n        }\n        else if ( v11 < v59 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 < v59 )\n              goto LABEL_238;\n          }\n          else\n          {\n            if ( v59 <= 0xC )\n            {\n              v11 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_238:\n            if ( v19 == -2LL )\n              goto LABEL_88;\n            v11 = v19 + 1;\n          }\nLABEL_105:\n          if ( v14 && v14 != src )\n          {\n            v60 = (char *)realloc(v14, v11);\n            if ( v60 )\n            {\n              v14 = v60;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v57 = v14;\n            *(_QWORD *)&v162 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v163) = v14 == src;\n          v95 = (char *)malloc(v11);\n          if ( !v95 )\n            goto LABEL_88;\n          if ( v19 && (_BYTE)v163 )\n            v14 = (char *)memcpy(v95, v14, v19);\n          else\n            v14 = v95;\n        }\nLABEL_109:\n        v14[v19] = 37;\n        goto LABEL_110;\n      }\n      if ( v26 == -1 )\n        goto LABEL_200;\n      v27 = (char *)v169;\n      v28 = (long double *)((char *)v169 + 32 * v26);\n      v29 = *(_DWORD *)v28;\n      LODWORD(v163) = *(_DWORD *)v28;\n      if ( v25 != 110 )\n      {\n        v30 = v25 & 0xDF;\n        if ( ((unsigned __int8)((v25 & 0xDF) - 69) <= 2u || v30 == 65) && (_DWORD)v163 == 12 )\n        {\n          _FST7 = v28[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v66 = (char *)*((_QWORD *)v12 + 3);\n            v67 = (char *)*((_QWORD *)v12 + 4);\n            v68 = *((_DWORD *)v12 + 4);\n            if ( v66 == v67 )\n            {\n              v50 = 0LL;\n            }\n            else\n            {\n              v69 = *((_QWORD *)v12 + 5);\n              if ( v69 == -1 )\n              {\n                v50 = 0LL;\n                v163 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v126 = v66 + 1;\n                  v127 = -1LL;\n                  v128 = *v66 - 48;\n                  if ( v50 <= 0x1999999999999999LL )\n                    v127 = 10 * v50;\n                  v76 = __CFADD__(v127, v128);\n                  v50 = v127 + v128;\n                  v66 = v126;\n                  if ( v76 )\n                  {\n                    if ( v67 == v126 )\n                    {\nLABEL_81:\n                      v50 = (unsigned __int64)v163;\n                      goto LABEL_82;\n                    }\n                    while ( *v66++ != 48 )\n                    {\n                      if ( v67 == v66 )\n                        goto LABEL_81;\n                    }\n                    v50 = -1LL;\n                  }\n                  if ( v67 == v66 )\n                    goto LABEL_82;\n                }\n              }\n              v70 = (char *)v169 + 32 * v69;\n              if ( *v70 != 5 )\n                goto LABEL_200;\n              v50 = (int)v70[4];\n              if ( (v50 & 0x80000000) != 0LL )\n              {\n                v68 |= 2u;\n                v50 = -(__int64)v50;\n              }\n            }\nLABEL_82:\n            v51 = (char *)*((_QWORD *)v12 + 6);\n            v52 = (char *)*((_QWORD *)v12 + 7);\n            if ( v51 != v52 )\n            {\n              v53 = *((_QWORD *)v12 + 8);\n              if ( v53 == -1 )\n              {\n                v129 = v51 + 1;\n                v55 = 0LL;\n                if ( v52 != v129 )\n                {\n                  v130 = v129;\n                  while ( 1 )\n                  {\n                    v131 = v130 + 1;\n                    v132 = *v130 - 48;\n                    v133 = -1LL;\n                    if ( v55 <= 0x1999999999999999LL )\n                      v133 = 10 * v55;\n                    v76 = __CFADD__(v133, v132);\n                    v134 = v133 + v132;\n                    v130 = v131;\n                    v55 = v134;\n                    if ( v76 )\n                    {\n                      if ( v52 == v131 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v130 = v131 + 1;\n                        if ( *v131 == 48 )\n                          break;\n                        if ( v52 == v130 )\n                          goto LABEL_88;\n                        ++v131;\n                      }\n                      v55 = -1LL;\n                    }\n                    if ( v52 == v130 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_375;\n              }\n              v54 = (char *)v169 + 32 * v53;\n              if ( *v54 != 5 )\n                goto LABEL_200;\n              v55 = (int)v54[4];\n              if ( (v55 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v55 )\n                {\n                  v56 = v55 + 12;\n                  if ( v55 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_190:\n                  v86 = v56;\n                  if ( v50 >= v56 )\n                    v86 = v50;\n                  v76 = __CFADD__(v86, 1LL);\n                  v87 = (void *)(v86 + 1);\n                  v163 = v87;\n                  if ( v76 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v87 <= 0x2BC )\n                  {\n                    v89 = v176;\n                  }\n                  else\n                  {\n                    v157 = (void *)v50;\n                    v158 = (char *)v55;\n                    LODWORD(v160) = v68;\n                    v162 = _FST7;\n                    if ( v87 == (void *)-1LL )\n                      goto LABEL_88;\n                    v88 = (char *)malloc((size_t)v87);\n                    v68 = (int)v160;\n                    _FST7 = v162;\n                    v89 = v88;\n                    v55 = (unsigned __int64)v158;\n                    v50 = (unsigned __int64)v157;\n                    if ( !v88 )\n                      goto LABEL_88;\n                  }\n                  v90 = (unsigned __int16)v166;\n                  LOBYTE(v91) = v166;\n                  HIBYTE(v91) = BYTE1(v166) | 3;\n                  LOWORD(v166) = v91;\n                  __asm { fxam }\n                  if ( (v62 & 2) != 0 )\n                  {\n                    *v89 = 45;\n                    _FST7 = -_FST7;\n                    v92 = v89 + 1;\n                  }\n                  else if ( (v68 & 4) != 0 )\n                  {\n                    v92 = v89 + 1;\n                    *v89 = 43;\n                  }\n                  else\n                  {\n                    v92 = v89;\n                    if ( (v68 & 8) != 0 )\n                    {\n                      v92 = v89 + 1;\n                      *v89 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_200;\n                    v97 = v92 + 3;\n                    if ( (unsigned __int8)(v12[72] - 65) > 0x19u )\n                    {\n                      v92[2] = 102;\n                      *(_WORD *)v92 = 28265;\n                    }\n                    else\n                    {\n                      v92[2] = 70;\n                      *(_WORD *)v92 = 20041;\n                    }\n                    v92 = 0LL;\n                    goto LABEL_263;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_200;\n                  v96 = v12[72] & 0xDF;\n                  switch ( v96 )\n                  {\n                    case 'F':\n                      *v92 = 48;\n                      if ( (v68 & 0x10) != 0 || v55 )\n                      {\n                        LODWORD(v153) = v90;\n                        v154 = (char *)v50;\n                        v157 = v89;\n                        v158 = (char *)v55;\n                        LODWORD(v160) = v68;\n                        *(_QWORD *)&v162 = v92 + 2;\n                        v122 = nl_langinfo(0x10000);\n                        v123 = (__int64)v158;\n                        v97 = *(char **)&v162;\n                        v124 = *v122;\n                        LOBYTE(v68) = (_BYTE)v160;\n                        v89 = (char *)v157;\n                        v50 = (unsigned __int64)v154;\n                        LOWORD(v90) = v153;\n                        if ( !v124 )\n                          v124 = 46;\n                        v92[1] = v124;\n                        if ( v123 )\n                        {\n                          v125 = v97;\n                          do\n                            *v125++ = 48;\n                          while ( v125 != &v92[v123 + 2] );\n                          v97 += v123;\n                        }\n                        goto LABEL_263;\n                      }\n                      goto LABEL_262;\n                    case 'E':\n                      *v92 = 48;\n                      if ( (v68 & 0x10) != 0 || (v105 = v92 + 1, v55) )\n                      {\n                        LODWORD(v153) = v90;\n                        v154 = (char *)v50;\n                        v157 = v89;\n                        v158 = (char *)v55;\n                        LODWORD(v160) = v68;\n                        *(_QWORD *)&v162 = v92 + 2;\n                        v138 = nl_langinfo(0x10000);\n                        v139 = (__int64)v158;\n                        v105 = *(char **)&v162;\n                        v140 = *v138;\n                        LOBYTE(v68) = (_BYTE)v160;\n                        v89 = (char *)v157;\n                        v50 = (unsigned __int64)v154;\n                        LOWORD(v90) = v153;\n                        if ( !v140 )\n                          v140 = 46;\n                        v92[1] = v140;\n                        if ( v139 )\n                        {\n                          v141 = v105;\n                          do\n                            *v141++ = 48;\n                          while ( v141 != &v92[v139 + 2] );\n                          v105 += v139;\n                        }\n                      }\n                      v106 = v12[72];\n                      v97 = v105 + 4;\n                      v105[3] = 48;\n                      *v105 = v106;\n                      *(_WORD *)(v105 + 1) = 12331;\n                      goto LABEL_263;\n                    case 'G':\n                      *v92 = 48;\n                      if ( (v68 & 0x10) != 0 )\n                      {\n                        if ( v55 )\n                        {\n                          HIDWORD(v152) = v90;\n                          v153 = v50;\n                          v154 = v92 + 2;\n                          v157 = v89;\n                          LODWORD(v158) = v68;\n                          v160 = (_BYTE *)v55;\n                          *(_QWORD *)&v162 = v55 - 1;\n                          v116 = nl_langinfo(0x10000);\n                          v117 = *(_QWORD *)&v162;\n                          v118 = (__int64)v160;\n                          v119 = *v116;\n                          LOBYTE(v68) = (_BYTE)v158;\n                          v89 = (char *)v157;\n                          v97 = v154;\n                          v50 = v153;\n                          LOWORD(v90) = WORD2(v152);\n                          if ( !v119 )\n                            v119 = 46;\n                          v92[1] = v119;\n                          if ( v117 )\n                          {\n                            v120 = (__int64)&v92[v118 + 1];\n                            v121 = v97;\n                            do\n                              *v121++ = 48;\n                            while ( v121 != (char *)v120 );\n                            v97 += v117;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v154) = v90;\n                          v157 = (void *)v50;\n                          v158 = v92 + 2;\n                          v160 = v89;\n                          LODWORD(v162) = v68;\n                          v147 = nl_langinfo(0x10000);\n                          LOBYTE(v68) = LOBYTE(v162);\n                          v89 = v160;\n                          v148 = *v147;\n                          v97 = v158;\n                          v50 = (unsigned __int64)v157;\n                          LOWORD(v90) = (_WORD)v154;\n                          if ( !v148 )\n                            v148 = 46;\n                          v92[1] = v148;\n                        }\n                        goto LABEL_263;\n                      }\nLABEL_262:\n                      v97 = v92 + 1;\n                      goto LABEL_263;\n                  }\n                  if ( v96 != 65 )\n                    goto LABEL_200;\n                  *v92 = 48;\n                  *(_QWORD *)&v162 = v92 + 2;\n                  v135 = v12[72];\n                  v92[2] = 48;\n                  v92[1] = v135 + 23;\n                  if ( (v68 & 0x10) != 0 || (v136 = (__int64)(v92 + 3), v55) )\n                  {\n                    HIDWORD(v152) = v90;\n                    v153 = v50;\n                    v154 = v89;\n                    v157 = (void *)v55;\n                    LODWORD(v158) = v68;\n                    v160 = v92 + 4;\n                    v143 = nl_langinfo(0x10000);\n                    v144 = v157;\n                    v136 = (__int64)v160;\n                    v145 = *v143;\n                    LOBYTE(v68) = (_BYTE)v158;\n                    v89 = v154;\n                    v50 = v153;\n                    LOWORD(v90) = WORD2(v152);\n                    if ( !v145 )\n                      v145 = 46;\n                    v92[3] = v145;\n                    if ( v144 )\n                    {\n                      v146 = (_BYTE *)v136;\n                      do\n                        *v146++ = 48;\n                      while ( v146 != (_BYTE *)v144 + (_QWORD)v92 + 4 );\n                      v136 += (__int64)v144;\n                    }\n                  }\n                  v137 = v12[72];\n                  v97 = (char *)(v136 + 3);\n                  *(_WORD *)(v136 + 1) = 12331;\n                  v92 = *(char **)&v162;\n                  *(_BYTE *)v136 = v137 + 15;\nLABEL_263:\n                  LOWORD(v166) = v90;\n                  v98 = v97 - v89;\n                  if ( v50 > v97 - v89 )\n                  {\n                    v99 = v50 - v98;\n                    v100 = &v97[v99];\n                    v98 = &v97[v99] - v89;\n                    if ( (v68 & 2) != 0 )\n                    {\n                      if ( v99 )\n                      {\n                        do\n                          *v97++ = 32;\n                        while ( v100 != v97 );\n                      }\n                    }\n                    else if ( (v68 & 0x20) != 0 && v92 )\n                    {\n                      if ( v92 >= v97 )\n                      {\n                        v92 = v97;\n                      }\n                      else\n                      {\n                        v101 = -1LL;\n                        do\n                        {\n                          v100[v101] = v97[v101];\n                          --v101;\n                        }\n                        while ( v101 != v92 - 1 - v97 );\n                      }\n                      if ( v99 )\n                      {\n                        v102 = &v92[v99];\n                        do\n                          *v92++ = 48;\n                        while ( v92 != v102 );\n                      }\n                    }\n                    else\n                    {\n                      v112 = -1LL;\n                      if ( v89 < v97 )\n                      {\n                        do\n                        {\n                          v100[v112] = v97[v112];\n                          --v112;\n                        }\n                        while ( v89 - 1 - v97 != v112 );\n                        v97 = v89;\n                      }\n                      if ( v99 )\n                      {\n                        v113 = &v97[v99];\n                        do\n                          *v97++ = 32;\n                        while ( v97 != v113 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v163 <= v98 )\n                    goto LABEL_200;\n                  v103 = v98 + v19;\n                  v15 = v98 + v19;\n                  if ( v11 - v19 <= v98 )\n                  {\n                    if ( __CFADD__(v98, v19) )\n                    {\n                      if ( v11 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v11 < v103 )\n                    {\n                      if ( v11 )\n                      {\n                        if ( (v11 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v11 *= 2LL;\n                        if ( v11 < v103 )\n                          goto LABEL_373;\n                      }\n                      else\n                      {\n                        if ( v103 <= 0xC )\n                        {\n                          v11 = 12LL;\n                          goto LABEL_280;\n                        }\nLABEL_373:\n                        if ( v103 == -1LL )\n                          goto LABEL_88;\n                        v11 = v98 + v19;\n                      }\nLABEL_280:\n                      if ( !v14 || v14 == src )\n                      {\n                        LOBYTE(v160) = v14 == src;\n                        *(_QWORD *)&v162 = v98;\n                        v163 = v89;\n                        v114 = (char *)malloc(v11);\n                        v89 = (char *)v163;\n                        v98 = *(_QWORD *)&v162;\n                        if ( !v114 )\n                          goto LABEL_88;\n                        if ( v19 && (_BYTE)v160 )\n                        {\n                          v115 = (char *)memcpy(v114, v14, v19);\n                          v89 = (char *)v163;\n                          v98 = *(_QWORD *)&v162;\n                          v14 = v115;\n                        }\n                        else\n                        {\n                          v14 = v114;\n                        }\n                      }\n                      else\n                      {\n                        *(_QWORD *)&v162 = v98;\n                        v163 = v89;\n                        v104 = (char *)realloc(v14, v11);\n                        if ( !v104 )\n                          goto LABEL_88;\n                        v89 = (char *)v163;\n                        v98 = *(_QWORD *)&v162;\n                        v14 = v104;\n                      }\n                    }\n                  }\n                  v163 = v89;\n                  memcpy(&v14[v19], v89, v98);\n                  if ( v163 != v176 )\n                    free(v163);\n                  goto LABEL_110;\n                }\nLABEL_375:\n                v56 = 12LL;\n                goto LABEL_190;\n              }\n            }\n            v56 = 12LL;\n            if ( v30 != 65 )\n              v56 = 18LL;\n            v55 = 0LL;\n            if ( v30 != 65 )\n              v55 = 6LL;\n            goto LABEL_190;\n          }\n        }\n        v31 = *((_DWORD *)v12 + 4);\n        v32 = (char *)v161 + 1;\n        *(_BYTE *)v161 = 37;\n        if ( (v31 & 1) != 0 )\n        {\n          v33 = (__int64)v161;\n          *((_BYTE *)v161 + 1) = 39;\n          v32 = (char *)(v33 + 2);\n        }\n        if ( (v31 & 2) != 0 )\n          *v32++ = 45;\n        if ( (v31 & 4) != 0 )\n          *v32++ = 43;\n        if ( (v31 & 8) != 0 )\n          *v32++ = 32;\n        if ( (v31 & 0x10) != 0 )\n          *v32++ = 35;\n        if ( (v31 & 0x40) != 0 )\n          *v32++ = 73;\n        if ( (v31 & 0x20) != 0 )\n          *v32++ = 48;\n        v34 = (_BYTE *)*((_QWORD *)v12 + 3);\n        v35 = (_BYTE *)*((_QWORD *)v12 + 4);\n        if ( v34 != v35 )\n        {\n          v160 = v27;\n          *(_QWORD *)&v162 = v35 - v34;\n          memcpy(v32, v34, v35 - v34);\n          v27 = v160;\n          v32 += *(_QWORD *)&v162;\n        }\n        v36 = (_BYTE *)*((_QWORD *)v12 + 6);\n        v37 = (_BYTE *)*((_QWORD *)v12 + 7);\n        if ( v36 != v37 )\n        {\n          v160 = v27;\n          *(_QWORD *)&v162 = v37 - v36;\n          memcpy(v32, v36, v37 - v36);\n          v27 = v160;\n          v32 += *(_QWORD *)&v162;\n        }\n        if ( (unsigned int)v163 <= 0x10 )\n        {\n          v38 = 1LL << (char)v163;\n          if ( ((1LL << (char)v163) & 0x14180) != 0 )\n            goto LABEL_125;\n          if ( (v38 & 0x1000) != 0 )\n          {\n            *v32++ = 76;\n          }\n          else\n          {\n            if ( (v38 & 0x600) == 0 )\n              goto LABEL_62;\n            *v32++ = 108;\nLABEL_125:\n            *v32++ = 108;\n          }\n        }\nLABEL_62:\n        v39 = v12[72];\n        v32[1] = 0;\n        *v32 = v39;\n        v40 = *((_QWORD *)v12 + 5);\n        if ( v40 != -1 )\n        {\n          v41 = &v27[32 * v40];\n          if ( *(_DWORD *)v41 == 5 )\n          {\n            LODWORD(v160) = 1;\n            v166 = *((_DWORD *)v41 + 4);\n            goto LABEL_65;\n          }\nLABEL_200:\n          abort();\n        }\n        LODWORD(v160) = 0;\nLABEL_65:\n        v42 = *((_QWORD *)v12 + 8);\n        if ( v42 != -1 )\n        {\n          v43 = &v27[32 * v42];\n          if ( *(_DWORD *)v43 != 5 )\n            goto LABEL_200;\n          v44 = (int)v160;\n          *(&v166 + (unsigned int)v160) = *((_DWORD *)v43 + 4);\n          LODWORD(v160) = v44 + 1;\n        }\n        v45 = v19 + 2;\n        if ( v19 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v11 < v45 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 >= v45 )\n              goto LABEL_73;\n          }\n          else if ( v45 <= 0xC )\n          {\n            v11 = 12LL;\nLABEL_73:\n            if ( v14 && v14 != src )\n            {\n              v46 = (char *)realloc(v14, v11);\n              if ( v46 )\n                goto LABEL_76;\nLABEL_88:\n              v57 = v14;\n              *(_QWORD *)&v162 = __errno_location();\nLABEL_89:\n              if ( v57 == src || !v57 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v172 != v175 )\n                    free(v172);\n                  if ( v169 != v170 )\n                    free(v169);\n                  v14 = 0LL;\n                  **(_DWORD **)&v162 = 12;\n                  return v14;\n                }\nLABEL_112:\n                *(_QWORD *)&v162 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v57);\n              goto LABEL_91;\n            }\n            LOBYTE(v162) = v14 == src;\n            v94 = (char *)malloc(v11);\n            v46 = v94;\n            if ( !v94 )\n              goto LABEL_88;\n            if ( v19 && LOBYTE(v162) )\n              v46 = (char *)memcpy(v94, v14, v19);\nLABEL_76:\n            v46[v19] = 0;\n            v158 = v46;\n            v47 = __errno_location();\n            v48 = v158;\n            v158 = v32;\n            *(_QWORD *)&v162 = v47;\n            LODWORD(v154) = *v47;\n            while ( 2 )\n            {\n              v49 = 0x7FFFFFFFLL;\n              v165 = -1;\n              **(_DWORD **)&v162 = 0;\n              if ( v11 - v19 <= 0x7FFFFFFF )\n                v49 = v11 - v19;\n              switch ( (int)v163 )\n              {\n                case 1:\n                  v72 = (unsigned int)*((char *)v169 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 2:\n                  v72 = *((unsigned __int8 *)v169 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 3:\n                  v72 = (unsigned int)*((__int16 *)v169 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 4:\n                  v72 = *((unsigned __int16 *)v169 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 5:\n                case 6:\n                case 13:\n                case 14:\n                  v72 = *((unsigned int *)v169 + 8 * *((_QWORD *)v12 + 10) + 4);\nLABEL_150:\n                  v71 = &v48[v19];\n                  v157 = v48;\n                  if ( (_DWORD)v160 != 1 )\n                  {\n                    if ( (_DWORD)v160 != 2 )\n                    {\n                      v150 = &v165;\n                      goto LABEL_153;\n                    }\n                    goto LABEL_209;\n                  }\n                  v151 = &v165;\n                  v150 = (int *)v72;\n                  break;\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                case 15:\n                case 16:\n                case 17:\n                  v71 = &v48[v19];\n                  v72 = *((_QWORD *)v169 + 4 * *((_QWORD *)v12 + 10) + 2);\n                  v157 = v48;\n                  if ( (_DWORD)v160 != 1 )\n                  {\n                    if ( (_DWORD)v160 != 2 )\n                    {\n                      v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v161, v72, a5, &v165, v151);\nLABEL_131:\n                      v48 = (char *)v157;\n                      goto LABEL_132;\n                    }\nLABEL_209:\n                    v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v161, v166, a5, v167, v72);\nLABEL_210:\n                    v48 = (char *)v157;\nLABEL_132:\n                    v74 = v165;\n                    if ( v165 < 0 )\n                    {\nLABEL_154:\n                      if ( v158[1] )\n                      {\n                        v158[1] = 0;\n                        continue;\n                      }\n                      if ( v73 < 0 )\n                      {\n                        v80 = **(_DWORD **)&v162;\n                        if ( !**(_DWORD **)&v162 )\n                        {\n                          v80 = 84;\n                          if ( (v12[72] & 0xEF) != 99 )\n                            v80 = 22;\n                        }\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v172 != v175 )\n                          free(v172);\n                        if ( v169 != v170 )\n                          free(v169);\n                        **(_DWORD **)&v162 = v80;\n                        return 0LL;\n                      }\nLABEL_136:\n                      v165 = v73;\n                      v74 = v73;\nLABEL_137:\n                      if ( (unsigned int)(v74 + 1) < v49 )\n                      {\n                        v14 = v48;\n                        v15 = v19 + v74;\n                        **(_DWORD **)&v162 = (_DWORD)v154;\n                        goto LABEL_110;\n                      }\n                      if ( v11 - v19 > 0x7FFFFFFE )\n                      {\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v172 != v175 )\n                          free(v172);\n                        if ( v169 != v170 )\n                          free(v169);\n                        v14 = 0LL;\n                        **(_DWORD **)&v162 = 75;\n                        return v14;\n                      }\n                      v75 = (unsigned int)(v74 + 2);\n                      v76 = __CFADD__(v19, v75);\n                      v77 = v19 + v75;\n                      if ( (v11 & 0x8000000000000000LL) != 0LL )\n                      {\n                        if ( v11 != -1LL )\n                          goto LABEL_202;\n                      }\n                      else\n                      {\n                        if ( v76 )\n                          goto LABEL_202;\n                        if ( 2 * v11 >= v77 )\n                          v77 = 2 * v11;\n                        if ( v11 < v77 )\n                        {\n                          v11 *= 2LL;\n                          if ( v11 < v77 )\n                          {\n                            if ( v77 == -1LL )\n                            {\nLABEL_202:\n                              v57 = v48;\n                              goto LABEL_89;\n                            }\n                            v11 = v77;\n                          }\n                          v78 = v48 == src;\n                          if ( !v48 || v48 == src )\n                          {\n                            v157 = v48;\n                            v93 = (char *)malloc(v11);\n                            v48 = (char *)v157;\n                            if ( !v93 )\n                              goto LABEL_202;\n                            if ( v19 && v78 )\n                              v48 = (char *)memcpy(v93, v157, v19);\n                            else\n                              v48 = v93;\n                          }\n                          else\n                          {\n                            v157 = v48;\n                            v79 = (char *)realloc(v48, v11);\n                            v48 = (char *)v157;\n                            if ( !v79 )\n                              goto LABEL_202;\n                            v48 = v79;\n                          }\n                        }\n                      }\n                      continue;\n                    }\nLABEL_133:\n                    if ( v74 < v49 && v48[v74 + v19] )\n                      goto LABEL_200;\n                    if ( v74 >= v73 )\n                      goto LABEL_137;\n                    goto LABEL_136;\n                  }\n                  v151 = &v165;\n                  v150 = (int *)v72;\n                  break;\n                case 11:\n                  v84 = *((_QWORD *)v12 + 10);\n                  v85 = &v48[v19];\n                  v157 = v48;\n                  a5 = *((double *)v169 + 4 * v84 + 2);\n                  if ( (_DWORD)v160 == 1 )\n                  {\n                    v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v161, v166, a5, &v165, v151);\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v160 != 2 )\n                    {\n                      v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v161, &v165, a5, v152, v153);\n                      v48 = (char *)v157;\n                      goto LABEL_132;\n                    }\n                    v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v161, v166, a5, v167, &v165);\n                  }\n                  v48 = (char *)v157;\n                  goto LABEL_132;\n                case 12:\n                  v81 = *((_QWORD *)v12 + 10);\n                  v82 = &v48[v19];\n                  v157 = v48;\n                  v83 = *((unsigned __int128 *)v169 + 2 * v81 + 1);\n                  if ( (_DWORD)v160 == 1 )\n                  {\n                    v73 = __snprintf_chk(v82, v49, 1LL, -1LL, v161, v166, a5, v83, v83 >> 64);\n                    goto LABEL_210;\n                  }\n                  if ( (_DWORD)v160 != 2 )\n                  {\n                    v73 = __snprintf_chk(v82, v49, 1LL, -1LL, v161, &v165, a5, v83, v83 >> 64);\n                    goto LABEL_131;\n                  }\n                  v73 = __snprintf_chk(v82, v49, 1LL, -1LL, v161, v166, a5, v167, v149);\n                  v48 = (char *)v157;\n                  goto LABEL_132;\n                default:\n                  goto LABEL_408;\n              }\n              break;\n            }\n            v72 = v166;\nLABEL_153:\n            v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v161, v72, a5, v150, v151);\n            v74 = v165;\n            v48 = (char *)v157;\n            if ( v165 < 0 )\n              goto LABEL_154;\n            goto LABEL_133;\n          }\n          if ( v19 != -3LL )\n          {\n            v11 = v19 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v46 = v14;\n        goto LABEL_76;\n      }\n      switch ( v29 )\n      {\n        case 18:\n          v15 = v19;\n          **((_BYTE **)v28 + 2) = v19;\n          break;\n        case 19:\n          v15 = v19;\n          **((_WORD **)v28 + 2) = v19;\n          break;\n        case 20:\n          v15 = v19;\n          **((_DWORD **)v28 + 2) = v19;\n          break;\n        case 21:\n        case 22:\n          v15 = v19;\n          **((_QWORD **)v28 + 2) = v19;\n          break;\n        default:\nLABEL_408:\n          abort();\n      }\nLABEL_110:\n      v13 = (_BYTE *)*((_QWORD *)v12 + 1);\n      v12 += 88;\n      v16 = *(_BYTE **)v12;\n      ++v159;\n      if ( v16 != v13 )\n        goto LABEL_14;\nLABEL_111:\n      v19 = v15;\n    }\n    v107 = v19;\n    v108 = v19 + 1;\n    if ( v19 == -1LL )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v11 < v108 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v108 )\n        {\nLABEL_303:\n          v109 = v14 == src;\n          if ( !v14 || v14 == src )\n          {\n            v142 = (char *)malloc(v11);\n            if ( !v142 )\n              goto LABEL_88;\n            if ( v107 && v109 )\n              v14 = (char *)memcpy(v142, v14, v107);\n            else\n              v14 = v142;\n          }\n          else\n          {\n            v110 = (char *)realloc(v14, v11);\n            if ( !v110 )\n              goto LABEL_126;\n            v14 = v110;\n          }\n          goto LABEL_307;\n        }\n      }\n      else if ( v108 <= 0xC )\n      {\n        v11 = 12LL;\n        goto LABEL_303;\n      }\n      if ( v19 == -2LL )\n        goto LABEL_88;\n      v11 = v19 + 1;\n      goto LABEL_303;\n    }\nLABEL_307:\n    v14[v107] = 0;\n    if ( v11 > v108 && v14 != src )\n    {\n      v111 = (char *)realloc(v14, v108);\n      if ( v111 )\n        v14 = v111;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v172 != v175 )\n      free(v172);\n    if ( v169 != v170 )\n      free(v169);\n    *v156 = v107;\n    return v14;\n  }\n  if ( v172 != v175 )\n    free(v172);\n  if ( v169 != v170 )\n    free(v169);\n  v14 = 0LL;\n  *__errno_location() = 22;\n  return v14;\n}\n\nchar *__fastcall sub_414470(void *a1, size_t *a2, _BYTE *a3, __int64 a4, double a5)\n{\n  __int64 v7; // rax\n  unsigned __int64 v8; // rax\n  size_t v9; // rdi\n  __int64 *v10; // rax\n  size_t v11; // r12\n  char *v12; // r14\n  _BYTE *v13; // r8\n  char *v14; // rbx\n  size_t v15; // r15\n  _BYTE *v16; // rcx\n  void *v17; // rcx\n  unsigned __int64 v18; // rax\n  size_t v19; // r13\n  bool v20; // dl\n  char *v21; // rax\n  char *v22; // rax\n  void *v23; // rsp\n  char *v24; // rax\n  char v25; // r15\n  __int64 v26; // rax\n  char *v27; // r8\n  long double *v28; // rdx\n  int v29; // eax\n  char v30; // al\n  int v31; // eax\n  char *v32; // r15\n  __int64 v33; // rdi\n  _BYTE *v34; // rsi\n  _BYTE *v35; // rdx\n  _BYTE *v36; // rsi\n  _BYTE *v37; // rdx\n  __int64 v38; // rax\n  char v39; // al\n  __int64 v40; // rax\n  char *v41; // rax\n  __int64 v42; // rax\n  char *v43; // r8\n  int v44; // eax\n  unsigned __int64 v45; // rax\n  char *v46; // r11\n  int *v47; // rax\n  char *v48; // r11\n  unsigned __int64 v49; // rbx\n  unsigned __int64 v50; // r10\n  char *v51; // rdx\n  char *v52; // rcx\n  __int64 v53; // rsi\n  _DWORD *v54; // r8\n  unsigned __int64 v55; // rdx\n  unsigned __int64 v56; // rcx\n  void *v57; // r15\n  unsigned __int64 v59; // rax\n  char *v60; // rax\n  char v62; // fps^1\n  char *v66; // rdx\n  char *v67; // rdi\n  int v68; // r11d\n  __int64 v69; // rcx\n  _DWORD *v70; // rcx\n  char *v71; // rdi\n  unsigned __int64 v72; // r9\n  int v73; // eax\n  int v74; // edx\n  __int64 v75; // rax\n  bool v76; // cf\n  unsigned __int64 v77; // rax\n  bool v78; // bl\n  char *v79; // rax\n  int v80; // ebx\n  __int64 v81; // rax\n  char *v82; // rdi\n  unsigned __int128 v83; // fst7\n  __int64 v84; // rax\n  char *v85; // rdi\n  unsigned __int64 v86; // rax\n  void *v87; // rax\n  char *v88; // rax\n  char *v89; // rcx\n  int v90; // r8d\n  __int16 v91; // ax\n  char *v92; // r15\n  char *v93; // rax\n  char *v94; // rax\n  char *v95; // rax\n  char v96; // al\n  char *v97; // r9\n  size_t v98; // r8\n  unsigned __int64 v99; // r10\n  char *v100; // rdi\n  __int64 v101; // rax\n  char *v102; // r10\n  unsigned __int64 v103; // rax\n  char *v104; // rax\n  char *v105; // rsi\n  char v106; // al\n  size_t v107; // r15\n  size_t v108; // r14\n  bool v109; // r13\n  char *v110; // rax\n  char *v111; // rax\n  __int64 v112; // rax\n  char *v113; // r10\n  char *v114; // rax\n  char *v115; // rax\n  char *v116; // rax\n  __int64 v117; // rsi\n  __int64 v118; // rdx\n  char v119; // al\n  __int64 v120; // rdx\n  char *v121; // rax\n  char *v122; // rax\n  __int64 v123; // rdx\n  char v124; // al\n  char *v125; // rax\n  char *v126; // rsi\n  __int64 v127; // r9\n  __int64 v128; // rdx\n  char *v129; // rax\n  char *v130; // rsi\n  char *v131; // rdi\n  __int64 v132; // rax\n  __int64 v133; // rsi\n  unsigned __int64 v134; // rax\n  char v135; // al\n  __int64 v136; // rsi\n  char v137; // al\n  char *v138; // rax\n  __int64 v139; // rdx\n  char v140; // al\n  char *v141; // rax\n  char *v142; // rax\n  char *v143; // rax\n  void *v144; // rdx\n  char v145; // al\n  _BYTE *v146; // rax\n  char *v147; // rax\n  char v148; // al\n  __int64 v149; // [rsp-8h] [rbp-718h]\n  int *v150; // [rsp+10h] [rbp-700h]\n  int *v151; // [rsp+18h] [rbp-6F8h]\n  __int64 v152; // [rsp+20h] [rbp-6F0h] BYREF\n  unsigned __int64 v153; // [rsp+28h] [rbp-6E8h]\n  char *v154; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v156; // [rsp+40h] [rbp-6D0h]\n  void *v157; // [rsp+48h] [rbp-6C8h]\n  char *v158; // [rsp+50h] [rbp-6C0h]\n  __int64 v159; // [rsp+58h] [rbp-6B8h]\n  _BYTE *v160; // [rsp+60h] [rbp-6B0h]\n  __int64 *v161; // [rsp+68h] [rbp-6A8h]\n  long double v162; // [rsp+70h] [rbp-6A0h]\n  void *v163; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v165; // [rsp+94h] [rbp-67Ch] BYREF\n  unsigned int v166; // [rsp+98h] [rbp-678h]\n  unsigned int v167; // [rsp+9Ch] [rbp-674h]\n  char v168[8]; // [rsp+A0h] [rbp-670h] BYREF\n  void *v169; // [rsp+A8h] [rbp-668h]\n  _BYTE v170[224]; // [rsp+B0h] [rbp-660h] BYREF\n  __int64 v171; // [rsp+190h] [rbp-580h] BYREF\n  void *v172; // [rsp+198h] [rbp-578h]\n  __int64 v173; // [rsp+1A0h] [rbp-570h]\n  __int64 v174; // [rsp+1A8h] [rbp-568h]\n  _BYTE v175[624]; // [rsp+1B0h] [rbp-560h] BYREF\n  char v176[752]; // [rsp+420h] [rbp-2F0h] BYREF\n\n  src = a1;\n  v156 = a2;\n  if ( (int)sub_416250(a3, &v171, v168) < 0 )\n    return 0LL;\n  if ( (int)sub_416030(a4, v168) >= 0 )\n  {\n    v7 = v173 + 7;\n    if ( (unsigned __int64)(v173 + 7) <= 6 )\n      v7 = -1LL;\n    v76 = __CFADD__(v174, v7);\n    v8 = v174 + v7;\n    if ( v76 )\n      goto LABEL_112;\n    v9 = v8 + 6;\n    if ( v8 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v9 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v23 = alloca(v8 + 14);\n      v161 = &v152;\n    }\n    else\n    {\n      if ( v8 == -7LL )\n        goto LABEL_112;\n      v10 = (__int64 *)malloc(v9);\n      v161 = v10;\n      if ( !v10 )\n        goto LABEL_112;\n      ptr = v10;\n    }\n    v11 = 0LL;\n    if ( src )\n      v11 = *v156;\n    v12 = (char *)v172;\n    v13 = a3;\n    v14 = (char *)src;\n    v159 = 0LL;\n    v15 = 0LL;\n    v16 = *(_BYTE **)v172;\n    if ( *(_BYTE **)v172 == v13 )\n      goto LABEL_111;\nLABEL_14:\n    v17 = (void *)(v16 - v13);\n    v18 = (unsigned __int64)v17 + v15;\n    v19 = (size_t)v17 + v15;\n    if ( __CFADD__(v17, v15) )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n      v19 = -1LL;\n    }\n    else if ( v11 < v18 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v18 )\n        {\nLABEL_28:\n          v20 = v14 == src;\n          if ( !v14 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v18 <= 0xC )\n      {\n        v11 = 12LL;\n        v20 = v14 == src;\n        if ( !v14 )\n        {\nLABEL_19:\n          v160 = v13;\n          LOBYTE(v162) = v20;\n          v163 = v17;\n          v21 = (char *)malloc(v11);\n          v17 = v163;\n          v13 = v160;\n          if ( !v21 )\n            goto LABEL_88;\n          if ( v15 && LOBYTE(v162) )\n          {\n            *(_QWORD *)&v162 = v160;\n            v22 = (char *)memcpy(v21, v14, v15);\n            v17 = v163;\n            v13 = *(_BYTE **)&v162;\n            v14 = v22;\n          }\n          else\n          {\n            v14 = v21;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v20 )\n        {\n          *(_QWORD *)&v162 = v13;\n          v163 = v17;\n          v24 = (char *)realloc(v14, v11);\n          if ( !v24 )\n            goto LABEL_126;\n          v17 = v163;\n          v13 = *(_BYTE **)&v162;\n          v14 = v24;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v18 == -1LL )\n        goto LABEL_88;\n      v11 = (size_t)v17 + v15;\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v14[v15], v13, (size_t)v17);\n    while ( v171 != v159 )\n    {\n      v25 = v12[72];\n      v26 = *((_QWORD *)v12 + 10);\n      if ( v25 == 37 )\n      {\n        if ( v26 != -1 )\n          goto LABEL_200;\n        v59 = v19 + 1;\n        v15 = v19 + 1;\n        if ( v19 == -1LL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n          v15 = -1LL;\n        }\n        else if ( v11 < v59 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 < v59 )\n              goto LABEL_238;\n          }\n          else\n          {\n            if ( v59 <= 0xC )\n            {\n              v11 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_238:\n            if ( v19 == -2LL )\n              goto LABEL_88;\n            v11 = v19 + 1;\n          }\nLABEL_105:\n          if ( v14 && v14 != src )\n          {\n            v60 = (char *)realloc(v14, v11);\n            if ( v60 )\n            {\n              v14 = v60;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v57 = v14;\n            *(_QWORD *)&v162 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v163) = v14 == src;\n          v95 = (char *)malloc(v11);\n          if ( !v95 )\n            goto LABEL_88;\n          if ( v19 && (_BYTE)v163 )\n            v14 = (char *)memcpy(v95, v14, v19);\n          else\n            v14 = v95;\n        }\nLABEL_109:\n        v14[v19] = 37;\n        goto LABEL_110;\n      }\n      if ( v26 == -1 )\n        goto LABEL_200;\n      v27 = (char *)v169;\n      v28 = (long double *)((char *)v169 + 32 * v26);\n      v29 = *(_DWORD *)v28;\n      LODWORD(v163) = *(_DWORD *)v28;\n      if ( v25 != 110 )\n      {\n        v30 = v25 & 0xDF;\n        if ( ((unsigned __int8)((v25 & 0xDF) - 69) <= 2u || v30 == 65) && (_DWORD)v163 == 12 )\n        {\n          _FST7 = v28[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v66 = (char *)*((_QWORD *)v12 + 3);\n            v67 = (char *)*((_QWORD *)v12 + 4);\n            v68 = *((_DWORD *)v12 + 4);\n            if ( v66 == v67 )\n            {\n              v50 = 0LL;\n            }\n            else\n            {\n              v69 = *((_QWORD *)v12 + 5);\n              if ( v69 == -1 )\n              {\n                v50 = 0LL;\n                v163 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v126 = v66 + 1;\n                  v127 = -1LL;\n                  v128 = *v66 - 48;\n                  if ( v50 <= 0x1999999999999999LL )\n                    v127 = 10 * v50;\n                  v76 = __CFADD__(v127, v128);\n                  v50 = v127 + v128;\n                  v66 = v126;\n                  if ( v76 )\n                  {\n                    if ( v67 == v126 )\n                    {\nLABEL_81:\n                      v50 = (unsigned __int64)v163;\n                      goto LABEL_82;\n                    }\n                    while ( *v66++ != 48 )\n                    {\n                      if ( v67 == v66 )\n                        goto LABEL_81;\n                    }\n                    v50 = -1LL;\n                  }\n                  if ( v67 == v66 )\n                    goto LABEL_82;\n                }\n              }\n              v70 = (char *)v169 + 32 * v69;\n              if ( *v70 != 5 )\n                goto LABEL_200;\n              v50 = (int)v70[4];\n              if ( (v50 & 0x80000000) != 0LL )\n              {\n                v68 |= 2u;\n                v50 = -(__int64)v50;\n              }\n            }\nLABEL_82:\n            v51 = (char *)*((_QWORD *)v12 + 6);\n            v52 = (char *)*((_QWORD *)v12 + 7);\n            if ( v51 != v52 )\n            {\n              v53 = *((_QWORD *)v12 + 8);\n              if ( v53 == -1 )\n              {\n                v129 = v51 + 1;\n                v55 = 0LL;\n                if ( v52 != v129 )\n                {\n                  v130 = v129;\n                  while ( 1 )\n                  {\n                    v131 = v130 + 1;\n                    v132 = *v130 - 48;\n                    v133 = -1LL;\n                    if ( v55 <= 0x1999999999999999LL )\n                      v133 = 10 * v55;\n                    v76 = __CFADD__(v133, v132);\n                    v134 = v133 + v132;\n                    v130 = v131;\n                    v55 = v134;\n                    if ( v76 )\n                    {\n                      if ( v52 == v131 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v130 = v131 + 1;\n                        if ( *v131 == 48 )\n                          break;\n                        if ( v52 == v130 )\n                          goto LABEL_88;\n                        ++v131;\n                      }\n                      v55 = -1LL;\n                    }\n                    if ( v52 == v130 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_375;\n              }\n              v54 = (char *)v169 + 32 * v53;\n              if ( *v54 != 5 )\n                goto LABEL_200;\n              v55 = (int)v54[4];\n              if ( (v55 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v55 )\n                {\n                  v56 = v55 + 12;\n                  if ( v55 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_190:\n                  v86 = v56;\n                  if ( v50 >= v56 )\n                    v86 = v50;\n                  v76 = __CFADD__(v86, 1LL);\n                  v87 = (void *)(v86 + 1);\n                  v163 = v87;\n                  if ( v76 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v87 <= 0x2BC )\n                  {\n                    v89 = v176;\n                  }\n                  else\n                  {\n                    v157 = (void *)v50;\n                    v158 = (char *)v55;\n                    LODWORD(v160) = v68;\n                    v162 = _FST7;\n                    if ( v87 == (void *)-1LL )\n                      goto LABEL_88;\n                    v88 = (char *)malloc((size_t)v87);\n                    v68 = (int)v160;\n                    _FST7 = v162;\n                    v89 = v88;\n                    v55 = (unsigned __int64)v158;\n                    v50 = (unsigned __int64)v157;\n                    if ( !v88 )\n                      goto LABEL_88;\n                  }\n                  v90 = (unsigned __int16)v166;\n                  LOBYTE(v91) = v166;\n                  HIBYTE(v91) = BYTE1(v166) | 3;\n                  LOWORD(v166) = v91;\n                  __asm { fxam }\n                  if ( (v62 & 2) != 0 )\n                  {\n                    *v89 = 45;\n                    _FST7 = -_FST7;\n                    v92 = v89 + 1;\n                  }\n                  else if ( (v68 & 4) != 0 )\n                  {\n                    v92 = v89 + 1;\n                    *v89 = 43;\n                  }\n                  else\n                  {\n                    v92 = v89;\n                    if ( (v68 & 8) != 0 )\n                    {\n                      v92 = v89 + 1;\n                      *v89 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_200;\n                    v97 = v92 + 3;\n                    if ( (unsigned __int8)(v12[72] - 65) > 0x19u )\n                    {\n                      v92[2] = 102;\n                      *(_WORD *)v92 = 28265;\n                    }\n                    else\n                    {\n                      v92[2] = 70;\n                      *(_WORD *)v92 = 20041;\n                    }\n                    v92 = 0LL;\n                    goto LABEL_263;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_200;\n                  v96 = v12[72] & 0xDF;\n                  switch ( v96 )\n                  {\n                    case 'F':\n                      *v92 = 48;\n                      if ( (v68 & 0x10) != 0 || v55 )\n                      {\n                        LODWORD(v153) = v90;\n                        v154 = (char *)v50;\n                        v157 = v89;\n                        v158 = (char *)v55;\n                        LODWORD(v160) = v68;\n                        *(_QWORD *)&v162 = v92 + 2;\n                        v122 = nl_langinfo(0x10000);\n                        v123 = (__int64)v158;\n                        v97 = *(char **)&v162;\n                        v124 = *v122;\n                        LOBYTE(v68) = (_BYTE)v160;\n                        v89 = (char *)v157;\n                        v50 = (unsigned __int64)v154;\n                        LOWORD(v90) = v153;\n                        if ( !v124 )\n                          v124 = 46;\n                        v92[1] = v124;\n                        if ( v123 )\n                        {\n                          v125 = v97;\n                          do\n                            *v125++ = 48;\n                          while ( v125 != &v92[v123 + 2] );\n                          v97 += v123;\n                        }\n                        goto LABEL_263;\n                      }\n                      goto LABEL_262;\n                    case 'E':\n                      *v92 = 48;\n                      if ( (v68 & 0x10) != 0 || (v105 = v92 + 1, v55) )\n                      {\n                        LODWORD(v153) = v90;\n                        v154 = (char *)v50;\n                        v157 = v89;\n                        v158 = (char *)v55;\n                        LODWORD(v160) = v68;\n                        *(_QWORD *)&v162 = v92 + 2;\n                        v138 = nl_langinfo(0x10000);\n                        v139 = (__int64)v158;\n                        v105 = *(char **)&v162;\n                        v140 = *v138;\n                        LOBYTE(v68) = (_BYTE)v160;\n                        v89 = (char *)v157;\n                        v50 = (unsigned __int64)v154;\n                        LOWORD(v90) = v153;\n                        if ( !v140 )\n                          v140 = 46;\n                        v92[1] = v140;\n                        if ( v139 )\n                        {\n                          v141 = v105;\n                          do\n                            *v141++ = 48;\n                          while ( v141 != &v92[v139 + 2] );\n                          v105 += v139;\n                        }\n                      }\n                      v106 = v12[72];\n                      v97 = v105 + 4;\n                      v105[3] = 48;\n                      *v105 = v106;\n                      *(_WORD *)(v105 + 1) = 12331;\n                      goto LABEL_263;\n                    case 'G':\n                      *v92 = 48;\n                      if ( (v68 & 0x10) != 0 )\n                      {\n                        if ( v55 )\n                        {\n                          HIDWORD(v152) = v90;\n                          v153 = v50;\n                          v154 = v92 + 2;\n                          v157 = v89;\n                          LODWORD(v158) = v68;\n                          v160 = (_BYTE *)v55;\n                          *(_QWORD *)&v162 = v55 - 1;\n                          v116 = nl_langinfo(0x10000);\n                          v117 = *(_QWORD *)&v162;\n                          v118 = (__int64)v160;\n                          v119 = *v116;\n                          LOBYTE(v68) = (_BYTE)v158;\n                          v89 = (char *)v157;\n                          v97 = v154;\n                          v50 = v153;\n                          LOWORD(v90) = WORD2(v152);\n                          if ( !v119 )\n                            v119 = 46;\n                          v92[1] = v119;\n                          if ( v117 )\n                          {\n                            v120 = (__int64)&v92[v118 + 1];\n                            v121 = v97;\n                            do\n                              *v121++ = 48;\n                            while ( v121 != (char *)v120 );\n                            v97 += v117;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v154) = v90;\n                          v157 = (void *)v50;\n                          v158 = v92 + 2;\n                          v160 = v89;\n                          LODWORD(v162) = v68;\n                          v147 = nl_langinfo(0x10000);\n                          LOBYTE(v68) = LOBYTE(v162);\n                          v89 = v160;\n                          v148 = *v147;\n                          v97 = v158;\n                          v50 = (unsigned __int64)v157;\n                          LOWORD(v90) = (_WORD)v154;\n                          if ( !v148 )\n                            v148 = 46;\n                          v92[1] = v148;\n                        }\n                        goto LABEL_263;\n                      }\nLABEL_262:\n                      v97 = v92 + 1;\n                      goto LABEL_263;\n                  }\n                  if ( v96 != 65 )\n                    goto LABEL_200;\n                  *v92 = 48;\n                  *(_QWORD *)&v162 = v92 + 2;\n                  v135 = v12[72];\n                  v92[2] = 48;\n                  v92[1] = v135 + 23;\n                  if ( (v68 & 0x10) != 0 || (v136 = (__int64)(v92 + 3), v55) )\n                  {\n                    HIDWORD(v152) = v90;\n                    v153 = v50;\n                    v154 = v89;\n                    v157 = (void *)v55;\n                    LODWORD(v158) = v68;\n                    v160 = v92 + 4;\n                    v143 = nl_langinfo(0x10000);\n                    v144 = v157;\n                    v136 = (__int64)v160;\n                    v145 = *v143;\n                    LOBYTE(v68) = (_BYTE)v158;\n                    v89 = v154;\n                    v50 = v153;\n                    LOWORD(v90) = WORD2(v152);\n                    if ( !v145 )\n                      v145 = 46;\n                    v92[3] = v145;\n                    if ( v144 )\n                    {\n                      v146 = (_BYTE *)v136;\n                      do\n                        *v146++ = 48;\n                      while ( v146 != (_BYTE *)v144 + (_QWORD)v92 + 4 );\n                      v136 += (__int64)v144;\n                    }\n                  }\n                  v137 = v12[72];\n                  v97 = (char *)(v136 + 3);\n                  *(_WORD *)(v136 + 1) = 12331;\n                  v92 = *(char **)&v162;\n                  *(_BYTE *)v136 = v137 + 15;\nLABEL_263:\n                  LOWORD(v166) = v90;\n                  v98 = v97 - v89;\n                  if ( v50 > v97 - v89 )\n                  {\n                    v99 = v50 - v98;\n                    v100 = &v97[v99];\n                    v98 = &v97[v99] - v89;\n                    if ( (v68 & 2) != 0 )\n                    {\n                      if ( v99 )\n                      {\n                        do\n                          *v97++ = 32;\n                        while ( v100 != v97 );\n                      }\n                    }\n                    else if ( (v68 & 0x20) != 0 && v92 )\n                    {\n                      if ( v92 >= v97 )\n                      {\n                        v92 = v97;\n                      }\n                      else\n                      {\n                        v101 = -1LL;\n                        do\n                        {\n                          v100[v101] = v97[v101];\n                          --v101;\n                        }\n                        while ( v101 != v92 - 1 - v97 );\n                      }\n                      if ( v99 )\n                      {\n                        v102 = &v92[v99];\n                        do\n                          *v92++ = 48;\n                        while ( v92 != v102 );\n                      }\n                    }\n                    else\n                    {\n                      v112 = -1LL;\n                      if ( v89 < v97 )\n                      {\n                        do\n                        {\n                          v100[v112] = v97[v112];\n                          --v112;\n                        }\n                        while ( v89 - 1 - v97 != v112 );\n                        v97 = v89;\n                      }\n                      if ( v99 )\n                      {\n                        v113 = &v97[v99];\n                        do\n                          *v97++ = 32;\n                        while ( v97 != v113 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v163 <= v98 )\n                    goto LABEL_200;\n                  v103 = v98 + v19;\n                  v15 = v98 + v19;\n                  if ( v11 - v19 <= v98 )\n                  {\n                    if ( __CFADD__(v98, v19) )\n                    {\n                      if ( v11 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v11 < v103 )\n                    {\n                      if ( v11 )\n                      {\n                        if ( (v11 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v11 *= 2LL;\n                        if ( v11 < v103 )\n                          goto LABEL_373;\n                      }\n                      else\n                      {\n                        if ( v103 <= 0xC )\n                        {\n                          v11 = 12LL;\n                          goto LABEL_280;\n                        }\nLABEL_373:\n                        if ( v103 == -1LL )\n                          goto LABEL_88;\n                        v11 = v98 + v19;\n                      }\nLABEL_280:\n                      if ( !v14 || v14 == src )\n                      {\n                        LOBYTE(v160) = v14 == src;\n                        *(_QWORD *)&v162 = v98;\n                        v163 = v89;\n                        v114 = (char *)malloc(v11);\n                        v89 = (char *)v163;\n                        v98 = *(_QWORD *)&v162;\n                        if ( !v114 )\n                          goto LABEL_88;\n                        if ( v19 && (_BYTE)v160 )\n                        {\n                          v115 = (char *)memcpy(v114, v14, v19);\n                          v89 = (char *)v163;\n                          v98 = *(_QWORD *)&v162;\n                          v14 = v115;\n                        }\n                        else\n                        {\n                          v14 = v114;\n                        }\n                      }\n                      else\n                      {\n                        *(_QWORD *)&v162 = v98;\n                        v163 = v89;\n                        v104 = (char *)realloc(v14, v11);\n                        if ( !v104 )\n                          goto LABEL_88;\n                        v89 = (char *)v163;\n                        v98 = *(_QWORD *)&v162;\n                        v14 = v104;\n                      }\n                    }\n                  }\n                  v163 = v89;\n                  memcpy(&v14[v19], v89, v98);\n                  if ( v163 != v176 )\n                    free(v163);\n                  goto LABEL_110;\n                }\nLABEL_375:\n                v56 = 12LL;\n                goto LABEL_190;\n              }\n            }\n            v56 = 12LL;\n            if ( v30 != 65 )\n              v56 = 18LL;\n            v55 = 0LL;\n            if ( v30 != 65 )\n              v55 = 6LL;\n            goto LABEL_190;\n          }\n        }\n        v31 = *((_DWORD *)v12 + 4);\n        v32 = (char *)v161 + 1;\n        *(_BYTE *)v161 = 37;\n        if ( (v31 & 1) != 0 )\n        {\n          v33 = (__int64)v161;\n          *((_BYTE *)v161 + 1) = 39;\n          v32 = (char *)(v33 + 2);\n        }\n        if ( (v31 & 2) != 0 )\n          *v32++ = 45;\n        if ( (v31 & 4) != 0 )\n          *v32++ = 43;\n        if ( (v31 & 8) != 0 )\n          *v32++ = 32;\n        if ( (v31 & 0x10) != 0 )\n          *v32++ = 35;\n        if ( (v31 & 0x40) != 0 )\n          *v32++ = 73;\n        if ( (v31 & 0x20) != 0 )\n          *v32++ = 48;\n        v34 = (_BYTE *)*((_QWORD *)v12 + 3);\n        v35 = (_BYTE *)*((_QWORD *)v12 + 4);\n        if ( v34 != v35 )\n        {\n          v160 = v27;\n          *(_QWORD *)&v162 = v35 - v34;\n          memcpy(v32, v34, v35 - v34);\n          v27 = v160;\n          v32 += *(_QWORD *)&v162;\n        }\n        v36 = (_BYTE *)*((_QWORD *)v12 + 6);\n        v37 = (_BYTE *)*((_QWORD *)v12 + 7);\n        if ( v36 != v37 )\n        {\n          v160 = v27;\n          *(_QWORD *)&v162 = v37 - v36;\n          memcpy(v32, v36, v37 - v36);\n          v27 = v160;\n          v32 += *(_QWORD *)&v162;\n        }\n        if ( (unsigned int)v163 <= 0x10 )\n        {\n          v38 = 1LL << (char)v163;\n          if ( ((1LL << (char)v163) & 0x14180) != 0 )\n            goto LABEL_125;\n          if ( (v38 & 0x1000) != 0 )\n          {\n            *v32++ = 76;\n          }\n          else\n          {\n            if ( (v38 & 0x600) == 0 )\n              goto LABEL_62;\n            *v32++ = 108;\nLABEL_125:\n            *v32++ = 108;\n          }\n        }\nLABEL_62:\n        v39 = v12[72];\n        v32[1] = 0;\n        *v32 = v39;\n        v40 = *((_QWORD *)v12 + 5);\n        if ( v40 != -1 )\n        {\n          v41 = &v27[32 * v40];\n          if ( *(_DWORD *)v41 == 5 )\n          {\n            LODWORD(v160) = 1;\n            v166 = *((_DWORD *)v41 + 4);\n            goto LABEL_65;\n          }\nLABEL_200:\n          abort();\n        }\n        LODWORD(v160) = 0;\nLABEL_65:\n        v42 = *((_QWORD *)v12 + 8);\n        if ( v42 != -1 )\n        {\n          v43 = &v27[32 * v42];\n          if ( *(_DWORD *)v43 != 5 )\n            goto LABEL_200;\n          v44 = (int)v160;\n          *(&v166 + (unsigned int)v160) = *((_DWORD *)v43 + 4);\n          LODWORD(v160) = v44 + 1;\n        }\n        v45 = v19 + 2;\n        if ( v19 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v11 < v45 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 >= v45 )\n              goto LABEL_73;\n          }\n          else if ( v45 <= 0xC )\n          {\n            v11 = 12LL;\nLABEL_73:\n            if ( v14 && v14 != src )\n            {\n              v46 = (char *)realloc(v14, v11);\n              if ( v46 )\n                goto LABEL_76;\nLABEL_88:\n              v57 = v14;\n              *(_QWORD *)&v162 = __errno_location();\nLABEL_89:\n              if ( v57 == src || !v57 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v172 != v175 )\n                    free(v172);\n                  if ( v169 != v170 )\n                    free(v169);\n                  v14 = 0LL;\n                  **(_DWORD **)&v162 = 12;\n                  return v14;\n                }\nLABEL_112:\n                *(_QWORD *)&v162 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v57);\n              goto LABEL_91;\n            }\n            LOBYTE(v162) = v14 == src;\n            v94 = (char *)malloc(v11);\n            v46 = v94;\n            if ( !v94 )\n              goto LABEL_88;\n            if ( v19 && LOBYTE(v162) )\n              v46 = (char *)memcpy(v94, v14, v19);\nLABEL_76:\n            v46[v19] = 0;\n            v158 = v46;\n            v47 = __errno_location();\n            v48 = v158;\n            v158 = v32;\n            *(_QWORD *)&v162 = v47;\n            LODWORD(v154) = *v47;\n            while ( 2 )\n            {\n              v49 = 0x7FFFFFFFLL;\n              v165 = -1;\n              **(_DWORD **)&v162 = 0;\n              if ( v11 - v19 <= 0x7FFFFFFF )\n                v49 = v11 - v19;\n              switch ( (int)v163 )\n              {\n                case 1:\n                  v72 = (unsigned int)*((char *)v169 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 2:\n                  v72 = *((unsigned __int8 *)v169 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 3:\n                  v72 = (unsigned int)*((__int16 *)v169 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 4:\n                  v72 = *((unsigned __int16 *)v169 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 5:\n                case 6:\n                case 13:\n                case 14:\n                  v72 = *((unsigned int *)v169 + 8 * *((_QWORD *)v12 + 10) + 4);\nLABEL_150:\n                  v71 = &v48[v19];\n                  v157 = v48;\n                  if ( (_DWORD)v160 != 1 )\n                  {\n                    if ( (_DWORD)v160 != 2 )\n                    {\n                      v150 = &v165;\n                      goto LABEL_153;\n                    }\n                    goto LABEL_209;\n                  }\n                  v151 = &v165;\n                  v150 = (int *)v72;\n                  break;\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                case 15:\n                case 16:\n                case 17:\n                  v71 = &v48[v19];\n                  v72 = *((_QWORD *)v169 + 4 * *((_QWORD *)v12 + 10) + 2);\n                  v157 = v48;\n                  if ( (_DWORD)v160 != 1 )\n                  {\n                    if ( (_DWORD)v160 != 2 )\n                    {\n                      v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v161, v72, a5, &v165, v151);\nLABEL_131:\n                      v48 = (char *)v157;\n                      goto LABEL_132;\n                    }\nLABEL_209:\n                    v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v161, v166, a5, v167, v72);\nLABEL_210:\n                    v48 = (char *)v157;\nLABEL_132:\n                    v74 = v165;\n                    if ( v165 < 0 )\n                    {\nLABEL_154:\n                      if ( v158[1] )\n                      {\n                        v158[1] = 0;\n                        continue;\n                      }\n                      if ( v73 < 0 )\n                      {\n                        v80 = **(_DWORD **)&v162;\n                        if ( !**(_DWORD **)&v162 )\n                        {\n                          v80 = 84;\n                          if ( (v12[72] & 0xEF) != 99 )\n                            v80 = 22;\n                        }\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v172 != v175 )\n                          free(v172);\n                        if ( v169 != v170 )\n                          free(v169);\n                        **(_DWORD **)&v162 = v80;\n                        return 0LL;\n                      }\nLABEL_136:\n                      v165 = v73;\n                      v74 = v73;\nLABEL_137:\n                      if ( (unsigned int)(v74 + 1) < v49 )\n                      {\n                        v14 = v48;\n                        v15 = v19 + v74;\n                        **(_DWORD **)&v162 = (_DWORD)v154;\n                        goto LABEL_110;\n                      }\n                      if ( v11 - v19 > 0x7FFFFFFE )\n                      {\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v172 != v175 )\n                          free(v172);\n                        if ( v169 != v170 )\n                          free(v169);\n                        v14 = 0LL;\n                        **(_DWORD **)&v162 = 75;\n                        return v14;\n                      }\n                      v75 = (unsigned int)(v74 + 2);\n                      v76 = __CFADD__(v19, v75);\n                      v77 = v19 + v75;\n                      if ( (v11 & 0x8000000000000000LL) != 0LL )\n                      {\n                        if ( v11 != -1LL )\n                          goto LABEL_202;\n                      }\n                      else\n                      {\n                        if ( v76 )\n                          goto LABEL_202;\n                        if ( 2 * v11 >= v77 )\n                          v77 = 2 * v11;\n                        if ( v11 < v77 )\n                        {\n                          v11 *= 2LL;\n                          if ( v11 < v77 )\n                          {\n                            if ( v77 == -1LL )\n                            {\nLABEL_202:\n                              v57 = v48;\n                              goto LABEL_89;\n                            }\n                            v11 = v77;\n                          }\n                          v78 = v48 == src;\n                          if ( !v48 || v48 == src )\n                          {\n                            v157 = v48;\n                            v93 = (char *)malloc(v11);\n                            v48 = (char *)v157;\n                            if ( !v93 )\n                              goto LABEL_202;\n                            if ( v19 && v78 )\n                              v48 = (char *)memcpy(v93, v157, v19);\n                            else\n                              v48 = v93;\n                          }\n                          else\n                          {\n                            v157 = v48;\n                            v79 = (char *)realloc(v48, v11);\n                            v48 = (char *)v157;\n                            if ( !v79 )\n                              goto LABEL_202;\n                            v48 = v79;\n                          }\n                        }\n                      }\n                      continue;\n                    }\nLABEL_133:\n                    if ( v74 < v49 && v48[v74 + v19] )\n                      goto LABEL_200;\n                    if ( v74 >= v73 )\n                      goto LABEL_137;\n                    goto LABEL_136;\n                  }\n                  v151 = &v165;\n                  v150 = (int *)v72;\n                  break;\n                case 11:\n                  v84 = *((_QWORD *)v12 + 10);\n                  v85 = &v48[v19];\n                  v157 = v48;\n                  a5 = *((double *)v169 + 4 * v84 + 2);\n                  if ( (_DWORD)v160 == 1 )\n                  {\n                    v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v161, v166, a5, &v165, v151);\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v160 != 2 )\n                    {\n                      v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v161, &v165, a5, v152, v153);\n                      v48 = (char *)v157;\n                      goto LABEL_132;\n                    }\n                    v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v161, v166, a5, v167, &v165);\n                  }\n                  v48 = (char *)v157;\n                  goto LABEL_132;\n                case 12:\n                  v81 = *((_QWORD *)v12 + 10);\n                  v82 = &v48[v19];\n                  v157 = v48;\n                  v83 = *((unsigned __int128 *)v169 + 2 * v81 + 1);\n                  if ( (_DWORD)v160 == 1 )\n                  {\n                    v73 = __snprintf_chk(v82, v49, 1LL, -1LL, v161, v166, a5, v83, v83 >> 64);\n                    goto LABEL_210;\n                  }\n                  if ( (_DWORD)v160 != 2 )\n                  {\n                    v73 = __snprintf_chk(v82, v49, 1LL, -1LL, v161, &v165, a5, v83, v83 >> 64);\n                    goto LABEL_131;\n                  }\n                  v73 = __snprintf_chk(v82, v49, 1LL, -1LL, v161, v166, a5, v167, v149);\n                  v48 = (char *)v157;\n                  goto LABEL_132;\n                default:\n                  goto LABEL_408;\n              }\n              break;\n            }\n            v72 = v166;\nLABEL_153:\n            v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v161, v72, a5, v150, v151);\n            v74 = v165;\n            v48 = (char *)v157;\n            if ( v165 < 0 )\n              goto LABEL_154;\n            goto LABEL_133;\n          }\n          if ( v19 != -3LL )\n          {\n            v11 = v19 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v46 = v14;\n        goto LABEL_76;\n      }\n      switch ( v29 )\n      {\n        case 18:\n          v15 = v19;\n          **((_BYTE **)v28 + 2) = v19;\n          break;\n        case 19:\n          v15 = v19;\n          **((_WORD **)v28 + 2) = v19;\n          break;\n        case 20:\n          v15 = v19;\n          **((_DWORD **)v28 + 2) = v19;\n          break;\n        case 21:\n        case 22:\n          v15 = v19;\n          **((_QWORD **)v28 + 2) = v19;\n          break;\n        default:\nLABEL_408:\n          abort();\n      }\nLABEL_110:\n      v13 = (_BYTE *)*((_QWORD *)v12 + 1);\n      v12 += 88;\n      v16 = *(_BYTE **)v12;\n      ++v159;\n      if ( v16 != v13 )\n        goto LABEL_14;\nLABEL_111:\n      v19 = v15;\n    }\n    v107 = v19;\n    v108 = v19 + 1;\n    if ( v19 == -1LL )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v11 < v108 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v108 )\n        {\nLABEL_303:\n          v109 = v14 == src;\n          if ( !v14 || v14 == src )\n          {\n            v142 = (char *)malloc(v11);\n            if ( !v142 )\n              goto LABEL_88;\n            if ( v107 && v109 )\n              v14 = (char *)memcpy(v142, v14, v107);\n            else\n              v14 = v142;\n          }\n          else\n          {\n            v110 = (char *)realloc(v14, v11);\n            if ( !v110 )\n              goto LABEL_126;\n            v14 = v110;\n          }\n          goto LABEL_307;\n        }\n      }\n      else if ( v108 <= 0xC )\n      {\n        v11 = 12LL;\n        goto LABEL_303;\n      }\n      if ( v19 == -2LL )\n        goto LABEL_88;\n      v11 = v19 + 1;\n      goto LABEL_303;\n    }\nLABEL_307:\n    v14[v107] = 0;\n    if ( v11 > v108 && v14 != src )\n    {\n      v111 = (char *)realloc(v14, v108);\n      if ( v111 )\n        v14 = v111;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v172 != v175 )\n      free(v172);\n    if ( v169 != v170 )\n      free(v169);\n    *v156 = v107;\n    return v14;\n  }\n  if ( v172 != v175 )\n    free(v172);\n  if ( v169 != v170 )\n    free(v169);\n  v14 = 0LL;\n  *__errno_location() = 22;\n  return v14;\n}\n"
        },
        {
            "funcName": "sub_414470",
            "funcStartAddr": "0x403047",
            "funcEndAddr": "0x40304c",
            "decompiledFuncCode": "char *__fastcall sub_414470(void *a1, size_t *a2, _BYTE *a3, __int64 a4, double a5)\n{\n  __int64 v7; // rax\n  unsigned __int64 v8; // rax\n  size_t v9; // rdi\n  __int64 *v10; // rax\n  size_t v11; // r12\n  char *v12; // r14\n  _BYTE *v13; // r8\n  char *v14; // rbx\n  size_t v15; // r15\n  _BYTE *v16; // rcx\n  void *v17; // rcx\n  unsigned __int64 v18; // rax\n  size_t v19; // r13\n  bool v20; // dl\n  char *v21; // rax\n  char *v22; // rax\n  void *v23; // rsp\n  char *v24; // rax\n  char v25; // r15\n  __int64 v26; // rax\n  char *v27; // r8\n  long double *v28; // rdx\n  int v29; // eax\n  char v30; // al\n  int v31; // eax\n  char *v32; // r15\n  __int64 v33; // rdi\n  _BYTE *v34; // rsi\n  _BYTE *v35; // rdx\n  _BYTE *v36; // rsi\n  _BYTE *v37; // rdx\n  __int64 v38; // rax\n  char v39; // al\n  __int64 v40; // rax\n  char *v41; // rax\n  __int64 v42; // rax\n  char *v43; // r8\n  int v44; // eax\n  unsigned __int64 v45; // rax\n  char *v46; // r11\n  int *v47; // rax\n  char *v48; // r11\n  unsigned __int64 v49; // rbx\n  unsigned __int64 v50; // r10\n  char *v51; // rdx\n  char *v52; // rcx\n  __int64 v53; // rsi\n  _DWORD *v54; // r8\n  unsigned __int64 v55; // rdx\n  unsigned __int64 v56; // rcx\n  void *v57; // r15\n  unsigned __int64 v59; // rax\n  char *v60; // rax\n  char v62; // fps^1\n  char *v66; // rdx\n  char *v67; // rdi\n  int v68; // r11d\n  __int64 v69; // rcx\n  _DWORD *v70; // rcx\n  char *v71; // rdi\n  unsigned __int64 v72; // r9\n  int v73; // eax\n  int v74; // edx\n  __int64 v75; // rax\n  bool v76; // cf\n  unsigned __int64 v77; // rax\n  bool v78; // bl\n  char *v79; // rax\n  int v80; // ebx\n  __int64 v81; // rax\n  char *v82; // rdi\n  unsigned __int128 v83; // fst7\n  __int64 v84; // rax\n  char *v85; // rdi\n  unsigned __int64 v86; // rax\n  void *v87; // rax\n  char *v88; // rax\n  char *v89; // rcx\n  int v90; // r8d\n  __int16 v91; // ax\n  char *v92; // r15\n  char *v93; // rax\n  char *v94; // rax\n  char *v95; // rax\n  char v96; // al\n  char *v97; // r9\n  size_t v98; // r8\n  unsigned __int64 v99; // r10\n  char *v100; // rdi\n  __int64 v101; // rax\n  char *v102; // r10\n  unsigned __int64 v103; // rax\n  char *v104; // rax\n  char *v105; // rsi\n  char v106; // al\n  size_t v107; // r15\n  size_t v108; // r14\n  bool v109; // r13\n  char *v110; // rax\n  char *v111; // rax\n  __int64 v112; // rax\n  char *v113; // r10\n  char *v114; // rax\n  char *v115; // rax\n  char *v116; // rax\n  __int64 v117; // rsi\n  __int64 v118; // rdx\n  char v119; // al\n  __int64 v120; // rdx\n  char *v121; // rax\n  char *v122; // rax\n  __int64 v123; // rdx\n  char v124; // al\n  char *v125; // rax\n  char *v126; // rsi\n  __int64 v127; // r9\n  __int64 v128; // rdx\n  char *v129; // rax\n  char *v130; // rsi\n  char *v131; // rdi\n  __int64 v132; // rax\n  __int64 v133; // rsi\n  unsigned __int64 v134; // rax\n  char v135; // al\n  __int64 v136; // rsi\n  char v137; // al\n  char *v138; // rax\n  __int64 v139; // rdx\n  char v140; // al\n  char *v141; // rax\n  char *v142; // rax\n  char *v143; // rax\n  void *v144; // rdx\n  char v145; // al\n  _BYTE *v146; // rax\n  char *v147; // rax\n  char v148; // al\n  __int64 v149; // [rsp-8h] [rbp-718h]\n  int *v150; // [rsp+10h] [rbp-700h]\n  int *v151; // [rsp+18h] [rbp-6F8h]\n  __int64 v152; // [rsp+20h] [rbp-6F0h] BYREF\n  unsigned __int64 v153; // [rsp+28h] [rbp-6E8h]\n  char *v154; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v156; // [rsp+40h] [rbp-6D0h]\n  void *v157; // [rsp+48h] [rbp-6C8h]\n  char *v158; // [rsp+50h] [rbp-6C0h]\n  __int64 v159; // [rsp+58h] [rbp-6B8h]\n  _BYTE *v160; // [rsp+60h] [rbp-6B0h]\n  __int64 *v161; // [rsp+68h] [rbp-6A8h]\n  long double v162; // [rsp+70h] [rbp-6A0h]\n  void *v163; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v165; // [rsp+94h] [rbp-67Ch] BYREF\n  unsigned int v166; // [rsp+98h] [rbp-678h]\n  unsigned int v167; // [rsp+9Ch] [rbp-674h]\n  char v168[8]; // [rsp+A0h] [rbp-670h] BYREF\n  void *v169; // [rsp+A8h] [rbp-668h]\n  _BYTE v170[224]; // [rsp+B0h] [rbp-660h] BYREF\n  __int64 v171; // [rsp+190h] [rbp-580h] BYREF\n  void *v172; // [rsp+198h] [rbp-578h]\n  __int64 v173; // [rsp+1A0h] [rbp-570h]\n  __int64 v174; // [rsp+1A8h] [rbp-568h]\n  _BYTE v175[624]; // [rsp+1B0h] [rbp-560h] BYREF\n  char v176[752]; // [rsp+420h] [rbp-2F0h] BYREF\n\n  src = a1;\n  v156 = a2;\n  if ( (int)sub_416250(a3, &v171, v168) < 0 )\n    return 0LL;\n  if ( (int)sub_416030(a4, v168) >= 0 )\n  {\n    v7 = v173 + 7;\n    if ( (unsigned __int64)(v173 + 7) <= 6 )\n      v7 = -1LL;\n    v76 = __CFADD__(v174, v7);\n    v8 = v174 + v7;\n    if ( v76 )\n      goto LABEL_112;\n    v9 = v8 + 6;\n    if ( v8 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v9 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v23 = alloca(v8 + 14);\n      v161 = &v152;\n    }\n    else\n    {\n      if ( v8 == -7LL )\n        goto LABEL_112;\n      v10 = (__int64 *)malloc(v9);\n      v161 = v10;\n      if ( !v10 )\n        goto LABEL_112;\n      ptr = v10;\n    }\n    v11 = 0LL;\n    if ( src )\n      v11 = *v156;\n    v12 = (char *)v172;\n    v13 = a3;\n    v14 = (char *)src;\n    v159 = 0LL;\n    v15 = 0LL;\n    v16 = *(_BYTE **)v172;\n    if ( *(_BYTE **)v172 == v13 )\n      goto LABEL_111;\nLABEL_14:\n    v17 = (void *)(v16 - v13);\n    v18 = (unsigned __int64)v17 + v15;\n    v19 = (size_t)v17 + v15;\n    if ( __CFADD__(v17, v15) )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n      v19 = -1LL;\n    }\n    else if ( v11 < v18 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v18 )\n        {\nLABEL_28:\n          v20 = v14 == src;\n          if ( !v14 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v18 <= 0xC )\n      {\n        v11 = 12LL;\n        v20 = v14 == src;\n        if ( !v14 )\n        {\nLABEL_19:\n          v160 = v13;\n          LOBYTE(v162) = v20;\n          v163 = v17;\n          v21 = (char *)malloc(v11);\n          v17 = v163;\n          v13 = v160;\n          if ( !v21 )\n            goto LABEL_88;\n          if ( v15 && LOBYTE(v162) )\n          {\n            *(_QWORD *)&v162 = v160;\n            v22 = (char *)memcpy(v21, v14, v15);\n            v17 = v163;\n            v13 = *(_BYTE **)&v162;\n            v14 = v22;\n          }\n          else\n          {\n            v14 = v21;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v20 )\n        {\n          *(_QWORD *)&v162 = v13;\n          v163 = v17;\n          v24 = (char *)realloc(v14, v11);\n          if ( !v24 )\n            goto LABEL_126;\n          v17 = v163;\n          v13 = *(_BYTE **)&v162;\n          v14 = v24;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v18 == -1LL )\n        goto LABEL_88;\n      v11 = (size_t)v17 + v15;\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v14[v15], v13, (size_t)v17);\n    while ( v171 != v159 )\n    {\n      v25 = v12[72];\n      v26 = *((_QWORD *)v12 + 10);\n      if ( v25 == 37 )\n      {\n        if ( v26 != -1 )\n          goto LABEL_200;\n        v59 = v19 + 1;\n        v15 = v19 + 1;\n        if ( v19 == -1LL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n          v15 = -1LL;\n        }\n        else if ( v11 < v59 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 < v59 )\n              goto LABEL_238;\n          }\n          else\n          {\n            if ( v59 <= 0xC )\n            {\n              v11 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_238:\n            if ( v19 == -2LL )\n              goto LABEL_88;\n            v11 = v19 + 1;\n          }\nLABEL_105:\n          if ( v14 && v14 != src )\n          {\n            v60 = (char *)realloc(v14, v11);\n            if ( v60 )\n            {\n              v14 = v60;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v57 = v14;\n            *(_QWORD *)&v162 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v163) = v14 == src;\n          v95 = (char *)malloc(v11);\n          if ( !v95 )\n            goto LABEL_88;\n          if ( v19 && (_BYTE)v163 )\n            v14 = (char *)memcpy(v95, v14, v19);\n          else\n            v14 = v95;\n        }\nLABEL_109:\n        v14[v19] = 37;\n        goto LABEL_110;\n      }\n      if ( v26 == -1 )\n        goto LABEL_200;\n      v27 = (char *)v169;\n      v28 = (long double *)((char *)v169 + 32 * v26);\n      v29 = *(_DWORD *)v28;\n      LODWORD(v163) = *(_DWORD *)v28;\n      if ( v25 != 110 )\n      {\n        v30 = v25 & 0xDF;\n        if ( ((unsigned __int8)((v25 & 0xDF) - 69) <= 2u || v30 == 65) && (_DWORD)v163 == 12 )\n        {\n          _FST7 = v28[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v66 = (char *)*((_QWORD *)v12 + 3);\n            v67 = (char *)*((_QWORD *)v12 + 4);\n            v68 = *((_DWORD *)v12 + 4);\n            if ( v66 == v67 )\n            {\n              v50 = 0LL;\n            }\n            else\n            {\n              v69 = *((_QWORD *)v12 + 5);\n              if ( v69 == -1 )\n              {\n                v50 = 0LL;\n                v163 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v126 = v66 + 1;\n                  v127 = -1LL;\n                  v128 = *v66 - 48;\n                  if ( v50 <= 0x1999999999999999LL )\n                    v127 = 10 * v50;\n                  v76 = __CFADD__(v127, v128);\n                  v50 = v127 + v128;\n                  v66 = v126;\n                  if ( v76 )\n                  {\n                    if ( v67 == v126 )\n                    {\nLABEL_81:\n                      v50 = (unsigned __int64)v163;\n                      goto LABEL_82;\n                    }\n                    while ( *v66++ != 48 )\n                    {\n                      if ( v67 == v66 )\n                        goto LABEL_81;\n                    }\n                    v50 = -1LL;\n                  }\n                  if ( v67 == v66 )\n                    goto LABEL_82;\n                }\n              }\n              v70 = (char *)v169 + 32 * v69;\n              if ( *v70 != 5 )\n                goto LABEL_200;\n              v50 = (int)v70[4];\n              if ( (v50 & 0x80000000) != 0LL )\n              {\n                v68 |= 2u;\n                v50 = -(__int64)v50;\n              }\n            }\nLABEL_82:\n            v51 = (char *)*((_QWORD *)v12 + 6);\n            v52 = (char *)*((_QWORD *)v12 + 7);\n            if ( v51 != v52 )\n            {\n              v53 = *((_QWORD *)v12 + 8);\n              if ( v53 == -1 )\n              {\n                v129 = v51 + 1;\n                v55 = 0LL;\n                if ( v52 != v129 )\n                {\n                  v130 = v129;\n                  while ( 1 )\n                  {\n                    v131 = v130 + 1;\n                    v132 = *v130 - 48;\n                    v133 = -1LL;\n                    if ( v55 <= 0x1999999999999999LL )\n                      v133 = 10 * v55;\n                    v76 = __CFADD__(v133, v132);\n                    v134 = v133 + v132;\n                    v130 = v131;\n                    v55 = v134;\n                    if ( v76 )\n                    {\n                      if ( v52 == v131 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v130 = v131 + 1;\n                        if ( *v131 == 48 )\n                          break;\n                        if ( v52 == v130 )\n                          goto LABEL_88;\n                        ++v131;\n                      }\n                      v55 = -1LL;\n                    }\n                    if ( v52 == v130 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_375;\n              }\n              v54 = (char *)v169 + 32 * v53;\n              if ( *v54 != 5 )\n                goto LABEL_200;\n              v55 = (int)v54[4];\n              if ( (v55 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v55 )\n                {\n                  v56 = v55 + 12;\n                  if ( v55 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_190:\n                  v86 = v56;\n                  if ( v50 >= v56 )\n                    v86 = v50;\n                  v76 = __CFADD__(v86, 1LL);\n                  v87 = (void *)(v86 + 1);\n                  v163 = v87;\n                  if ( v76 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v87 <= 0x2BC )\n                  {\n                    v89 = v176;\n                  }\n                  else\n                  {\n                    v157 = (void *)v50;\n                    v158 = (char *)v55;\n                    LODWORD(v160) = v68;\n                    v162 = _FST7;\n                    if ( v87 == (void *)-1LL )\n                      goto LABEL_88;\n                    v88 = (char *)malloc((size_t)v87);\n                    v68 = (int)v160;\n                    _FST7 = v162;\n                    v89 = v88;\n                    v55 = (unsigned __int64)v158;\n                    v50 = (unsigned __int64)v157;\n                    if ( !v88 )\n                      goto LABEL_88;\n                  }\n                  v90 = (unsigned __int16)v166;\n                  LOBYTE(v91) = v166;\n                  HIBYTE(v91) = BYTE1(v166) | 3;\n                  LOWORD(v166) = v91;\n                  __asm { fxam }\n                  if ( (v62 & 2) != 0 )\n                  {\n                    *v89 = 45;\n                    _FST7 = -_FST7;\n                    v92 = v89 + 1;\n                  }\n                  else if ( (v68 & 4) != 0 )\n                  {\n                    v92 = v89 + 1;\n                    *v89 = 43;\n                  }\n                  else\n                  {\n                    v92 = v89;\n                    if ( (v68 & 8) != 0 )\n                    {\n                      v92 = v89 + 1;\n                      *v89 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_200;\n                    v97 = v92 + 3;\n                    if ( (unsigned __int8)(v12[72] - 65) > 0x19u )\n                    {\n                      v92[2] = 102;\n                      *(_WORD *)v92 = 28265;\n                    }\n                    else\n                    {\n                      v92[2] = 70;\n                      *(_WORD *)v92 = 20041;\n                    }\n                    v92 = 0LL;\n                    goto LABEL_263;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_200;\n                  v96 = v12[72] & 0xDF;\n                  switch ( v96 )\n                  {\n                    case 'F':\n                      *v92 = 48;\n                      if ( (v68 & 0x10) != 0 || v55 )\n                      {\n                        LODWORD(v153) = v90;\n                        v154 = (char *)v50;\n                        v157 = v89;\n                        v158 = (char *)v55;\n                        LODWORD(v160) = v68;\n                        *(_QWORD *)&v162 = v92 + 2;\n                        v122 = nl_langinfo(0x10000);\n                        v123 = (__int64)v158;\n                        v97 = *(char **)&v162;\n                        v124 = *v122;\n                        LOBYTE(v68) = (_BYTE)v160;\n                        v89 = (char *)v157;\n                        v50 = (unsigned __int64)v154;\n                        LOWORD(v90) = v153;\n                        if ( !v124 )\n                          v124 = 46;\n                        v92[1] = v124;\n                        if ( v123 )\n                        {\n                          v125 = v97;\n                          do\n                            *v125++ = 48;\n                          while ( v125 != &v92[v123 + 2] );\n                          v97 += v123;\n                        }\n                        goto LABEL_263;\n                      }\n                      goto LABEL_262;\n                    case 'E':\n                      *v92 = 48;\n                      if ( (v68 & 0x10) != 0 || (v105 = v92 + 1, v55) )\n                      {\n                        LODWORD(v153) = v90;\n                        v154 = (char *)v50;\n                        v157 = v89;\n                        v158 = (char *)v55;\n                        LODWORD(v160) = v68;\n                        *(_QWORD *)&v162 = v92 + 2;\n                        v138 = nl_langinfo(0x10000);\n                        v139 = (__int64)v158;\n                        v105 = *(char **)&v162;\n                        v140 = *v138;\n                        LOBYTE(v68) = (_BYTE)v160;\n                        v89 = (char *)v157;\n                        v50 = (unsigned __int64)v154;\n                        LOWORD(v90) = v153;\n                        if ( !v140 )\n                          v140 = 46;\n                        v92[1] = v140;\n                        if ( v139 )\n                        {\n                          v141 = v105;\n                          do\n                            *v141++ = 48;\n                          while ( v141 != &v92[v139 + 2] );\n                          v105 += v139;\n                        }\n                      }\n                      v106 = v12[72];\n                      v97 = v105 + 4;\n                      v105[3] = 48;\n                      *v105 = v106;\n                      *(_WORD *)(v105 + 1) = 12331;\n                      goto LABEL_263;\n                    case 'G':\n                      *v92 = 48;\n                      if ( (v68 & 0x10) != 0 )\n                      {\n                        if ( v55 )\n                        {\n                          HIDWORD(v152) = v90;\n                          v153 = v50;\n                          v154 = v92 + 2;\n                          v157 = v89;\n                          LODWORD(v158) = v68;\n                          v160 = (_BYTE *)v55;\n                          *(_QWORD *)&v162 = v55 - 1;\n                          v116 = nl_langinfo(0x10000);\n                          v117 = *(_QWORD *)&v162;\n                          v118 = (__int64)v160;\n                          v119 = *v116;\n                          LOBYTE(v68) = (_BYTE)v158;\n                          v89 = (char *)v157;\n                          v97 = v154;\n                          v50 = v153;\n                          LOWORD(v90) = WORD2(v152);\n                          if ( !v119 )\n                            v119 = 46;\n                          v92[1] = v119;\n                          if ( v117 )\n                          {\n                            v120 = (__int64)&v92[v118 + 1];\n                            v121 = v97;\n                            do\n                              *v121++ = 48;\n                            while ( v121 != (char *)v120 );\n                            v97 += v117;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v154) = v90;\n                          v157 = (void *)v50;\n                          v158 = v92 + 2;\n                          v160 = v89;\n                          LODWORD(v162) = v68;\n                          v147 = nl_langinfo(0x10000);\n                          LOBYTE(v68) = LOBYTE(v162);\n                          v89 = v160;\n                          v148 = *v147;\n                          v97 = v158;\n                          v50 = (unsigned __int64)v157;\n                          LOWORD(v90) = (_WORD)v154;\n                          if ( !v148 )\n                            v148 = 46;\n                          v92[1] = v148;\n                        }\n                        goto LABEL_263;\n                      }\nLABEL_262:\n                      v97 = v92 + 1;\n                      goto LABEL_263;\n                  }\n                  if ( v96 != 65 )\n                    goto LABEL_200;\n                  *v92 = 48;\n                  *(_QWORD *)&v162 = v92 + 2;\n                  v135 = v12[72];\n                  v92[2] = 48;\n                  v92[1] = v135 + 23;\n                  if ( (v68 & 0x10) != 0 || (v136 = (__int64)(v92 + 3), v55) )\n                  {\n                    HIDWORD(v152) = v90;\n                    v153 = v50;\n                    v154 = v89;\n                    v157 = (void *)v55;\n                    LODWORD(v158) = v68;\n                    v160 = v92 + 4;\n                    v143 = nl_langinfo(0x10000);\n                    v144 = v157;\n                    v136 = (__int64)v160;\n                    v145 = *v143;\n                    LOBYTE(v68) = (_BYTE)v158;\n                    v89 = v154;\n                    v50 = v153;\n                    LOWORD(v90) = WORD2(v152);\n                    if ( !v145 )\n                      v145 = 46;\n                    v92[3] = v145;\n                    if ( v144 )\n                    {\n                      v146 = (_BYTE *)v136;\n                      do\n                        *v146++ = 48;\n                      while ( v146 != (_BYTE *)v144 + (_QWORD)v92 + 4 );\n                      v136 += (__int64)v144;\n                    }\n                  }\n                  v137 = v12[72];\n                  v97 = (char *)(v136 + 3);\n                  *(_WORD *)(v136 + 1) = 12331;\n                  v92 = *(char **)&v162;\n                  *(_BYTE *)v136 = v137 + 15;\nLABEL_263:\n                  LOWORD(v166) = v90;\n                  v98 = v97 - v89;\n                  if ( v50 > v97 - v89 )\n                  {\n                    v99 = v50 - v98;\n                    v100 = &v97[v99];\n                    v98 = &v97[v99] - v89;\n                    if ( (v68 & 2) != 0 )\n                    {\n                      if ( v99 )\n                      {\n                        do\n                          *v97++ = 32;\n                        while ( v100 != v97 );\n                      }\n                    }\n                    else if ( (v68 & 0x20) != 0 && v92 )\n                    {\n                      if ( v92 >= v97 )\n                      {\n                        v92 = v97;\n                      }\n                      else\n                      {\n                        v101 = -1LL;\n                        do\n                        {\n                          v100[v101] = v97[v101];\n                          --v101;\n                        }\n                        while ( v101 != v92 - 1 - v97 );\n                      }\n                      if ( v99 )\n                      {\n                        v102 = &v92[v99];\n                        do\n                          *v92++ = 48;\n                        while ( v92 != v102 );\n                      }\n                    }\n                    else\n                    {\n                      v112 = -1LL;\n                      if ( v89 < v97 )\n                      {\n                        do\n                        {\n                          v100[v112] = v97[v112];\n                          --v112;\n                        }\n                        while ( v89 - 1 - v97 != v112 );\n                        v97 = v89;\n                      }\n                      if ( v99 )\n                      {\n                        v113 = &v97[v99];\n                        do\n                          *v97++ = 32;\n                        while ( v97 != v113 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v163 <= v98 )\n                    goto LABEL_200;\n                  v103 = v98 + v19;\n                  v15 = v98 + v19;\n                  if ( v11 - v19 <= v98 )\n                  {\n                    if ( __CFADD__(v98, v19) )\n                    {\n                      if ( v11 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v11 < v103 )\n                    {\n                      if ( v11 )\n                      {\n                        if ( (v11 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v11 *= 2LL;\n                        if ( v11 < v103 )\n                          goto LABEL_373;\n                      }\n                      else\n                      {\n                        if ( v103 <= 0xC )\n                        {\n                          v11 = 12LL;\n                          goto LABEL_280;\n                        }\nLABEL_373:\n                        if ( v103 == -1LL )\n                          goto LABEL_88;\n                        v11 = v98 + v19;\n                      }\nLABEL_280:\n                      if ( !v14 || v14 == src )\n                      {\n                        LOBYTE(v160) = v14 == src;\n                        *(_QWORD *)&v162 = v98;\n                        v163 = v89;\n                        v114 = (char *)malloc(v11);\n                        v89 = (char *)v163;\n                        v98 = *(_QWORD *)&v162;\n                        if ( !v114 )\n                          goto LABEL_88;\n                        if ( v19 && (_BYTE)v160 )\n                        {\n                          v115 = (char *)memcpy(v114, v14, v19);\n                          v89 = (char *)v163;\n                          v98 = *(_QWORD *)&v162;\n                          v14 = v115;\n                        }\n                        else\n                        {\n                          v14 = v114;\n                        }\n                      }\n                      else\n                      {\n                        *(_QWORD *)&v162 = v98;\n                        v163 = v89;\n                        v104 = (char *)realloc(v14, v11);\n                        if ( !v104 )\n                          goto LABEL_88;\n                        v89 = (char *)v163;\n                        v98 = *(_QWORD *)&v162;\n                        v14 = v104;\n                      }\n                    }\n                  }\n                  v163 = v89;\n                  memcpy(&v14[v19], v89, v98);\n                  if ( v163 != v176 )\n                    free(v163);\n                  goto LABEL_110;\n                }\nLABEL_375:\n                v56 = 12LL;\n                goto LABEL_190;\n              }\n            }\n            v56 = 12LL;\n            if ( v30 != 65 )\n              v56 = 18LL;\n            v55 = 0LL;\n            if ( v30 != 65 )\n              v55 = 6LL;\n            goto LABEL_190;\n          }\n        }\n        v31 = *((_DWORD *)v12 + 4);\n        v32 = (char *)v161 + 1;\n        *(_BYTE *)v161 = 37;\n        if ( (v31 & 1) != 0 )\n        {\n          v33 = (__int64)v161;\n          *((_BYTE *)v161 + 1) = 39;\n          v32 = (char *)(v33 + 2);\n        }\n        if ( (v31 & 2) != 0 )\n          *v32++ = 45;\n        if ( (v31 & 4) != 0 )\n          *v32++ = 43;\n        if ( (v31 & 8) != 0 )\n          *v32++ = 32;\n        if ( (v31 & 0x10) != 0 )\n          *v32++ = 35;\n        if ( (v31 & 0x40) != 0 )\n          *v32++ = 73;\n        if ( (v31 & 0x20) != 0 )\n          *v32++ = 48;\n        v34 = (_BYTE *)*((_QWORD *)v12 + 3);\n        v35 = (_BYTE *)*((_QWORD *)v12 + 4);\n        if ( v34 != v35 )\n        {\n          v160 = v27;\n          *(_QWORD *)&v162 = v35 - v34;\n          memcpy(v32, v34, v35 - v34);\n          v27 = v160;\n          v32 += *(_QWORD *)&v162;\n        }\n        v36 = (_BYTE *)*((_QWORD *)v12 + 6);\n        v37 = (_BYTE *)*((_QWORD *)v12 + 7);\n        if ( v36 != v37 )\n        {\n          v160 = v27;\n          *(_QWORD *)&v162 = v37 - v36;\n          memcpy(v32, v36, v37 - v36);\n          v27 = v160;\n          v32 += *(_QWORD *)&v162;\n        }\n        if ( (unsigned int)v163 <= 0x10 )\n        {\n          v38 = 1LL << (char)v163;\n          if ( ((1LL << (char)v163) & 0x14180) != 0 )\n            goto LABEL_125;\n          if ( (v38 & 0x1000) != 0 )\n          {\n            *v32++ = 76;\n          }\n          else\n          {\n            if ( (v38 & 0x600) == 0 )\n              goto LABEL_62;\n            *v32++ = 108;\nLABEL_125:\n            *v32++ = 108;\n          }\n        }\nLABEL_62:\n        v39 = v12[72];\n        v32[1] = 0;\n        *v32 = v39;\n        v40 = *((_QWORD *)v12 + 5);\n        if ( v40 != -1 )\n        {\n          v41 = &v27[32 * v40];\n          if ( *(_DWORD *)v41 == 5 )\n          {\n            LODWORD(v160) = 1;\n            v166 = *((_DWORD *)v41 + 4);\n            goto LABEL_65;\n          }\nLABEL_200:\n          abort();\n        }\n        LODWORD(v160) = 0;\nLABEL_65:\n        v42 = *((_QWORD *)v12 + 8);\n        if ( v42 != -1 )\n        {\n          v43 = &v27[32 * v42];\n          if ( *(_DWORD *)v43 != 5 )\n            goto LABEL_200;\n          v44 = (int)v160;\n          *(&v166 + (unsigned int)v160) = *((_DWORD *)v43 + 4);\n          LODWORD(v160) = v44 + 1;\n        }\n        v45 = v19 + 2;\n        if ( v19 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v11 < v45 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 >= v45 )\n              goto LABEL_73;\n          }\n          else if ( v45 <= 0xC )\n          {\n            v11 = 12LL;\nLABEL_73:\n            if ( v14 && v14 != src )\n            {\n              v46 = (char *)realloc(v14, v11);\n              if ( v46 )\n                goto LABEL_76;\nLABEL_88:\n              v57 = v14;\n              *(_QWORD *)&v162 = __errno_location();\nLABEL_89:\n              if ( v57 == src || !v57 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v172 != v175 )\n                    free(v172);\n                  if ( v169 != v170 )\n                    free(v169);\n                  v14 = 0LL;\n                  **(_DWORD **)&v162 = 12;\n                  return v14;\n                }\nLABEL_112:\n                *(_QWORD *)&v162 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v57);\n              goto LABEL_91;\n            }\n            LOBYTE(v162) = v14 == src;\n            v94 = (char *)malloc(v11);\n            v46 = v94;\n            if ( !v94 )\n              goto LABEL_88;\n            if ( v19 && LOBYTE(v162) )\n              v46 = (char *)memcpy(v94, v14, v19);\nLABEL_76:\n            v46[v19] = 0;\n            v158 = v46;\n            v47 = __errno_location();\n            v48 = v158;\n            v158 = v32;\n            *(_QWORD *)&v162 = v47;\n            LODWORD(v154) = *v47;\n            while ( 2 )\n            {\n              v49 = 0x7FFFFFFFLL;\n              v165 = -1;\n              **(_DWORD **)&v162 = 0;\n              if ( v11 - v19 <= 0x7FFFFFFF )\n                v49 = v11 - v19;\n              switch ( (int)v163 )\n              {\n                case 1:\n                  v72 = (unsigned int)*((char *)v169 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 2:\n                  v72 = *((unsigned __int8 *)v169 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 3:\n                  v72 = (unsigned int)*((__int16 *)v169 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 4:\n                  v72 = *((unsigned __int16 *)v169 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 5:\n                case 6:\n                case 13:\n                case 14:\n                  v72 = *((unsigned int *)v169 + 8 * *((_QWORD *)v12 + 10) + 4);\nLABEL_150:\n                  v71 = &v48[v19];\n                  v157 = v48;\n                  if ( (_DWORD)v160 != 1 )\n                  {\n                    if ( (_DWORD)v160 != 2 )\n                    {\n                      v150 = &v165;\n                      goto LABEL_153;\n                    }\n                    goto LABEL_209;\n                  }\n                  v151 = &v165;\n                  v150 = (int *)v72;\n                  break;\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                case 15:\n                case 16:\n                case 17:\n                  v71 = &v48[v19];\n                  v72 = *((_QWORD *)v169 + 4 * *((_QWORD *)v12 + 10) + 2);\n                  v157 = v48;\n                  if ( (_DWORD)v160 != 1 )\n                  {\n                    if ( (_DWORD)v160 != 2 )\n                    {\n                      v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v161, v72, a5, &v165, v151);\nLABEL_131:\n                      v48 = (char *)v157;\n                      goto LABEL_132;\n                    }\nLABEL_209:\n                    v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v161, v166, a5, v167, v72);\nLABEL_210:\n                    v48 = (char *)v157;\nLABEL_132:\n                    v74 = v165;\n                    if ( v165 < 0 )\n                    {\nLABEL_154:\n                      if ( v158[1] )\n                      {\n                        v158[1] = 0;\n                        continue;\n                      }\n                      if ( v73 < 0 )\n                      {\n                        v80 = **(_DWORD **)&v162;\n                        if ( !**(_DWORD **)&v162 )\n                        {\n                          v80 = 84;\n                          if ( (v12[72] & 0xEF) != 99 )\n                            v80 = 22;\n                        }\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v172 != v175 )\n                          free(v172);\n                        if ( v169 != v170 )\n                          free(v169);\n                        **(_DWORD **)&v162 = v80;\n                        return 0LL;\n                      }\nLABEL_136:\n                      v165 = v73;\n                      v74 = v73;\nLABEL_137:\n                      if ( (unsigned int)(v74 + 1) < v49 )\n                      {\n                        v14 = v48;\n                        v15 = v19 + v74;\n                        **(_DWORD **)&v162 = (_DWORD)v154;\n                        goto LABEL_110;\n                      }\n                      if ( v11 - v19 > 0x7FFFFFFE )\n                      {\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v172 != v175 )\n                          free(v172);\n                        if ( v169 != v170 )\n                          free(v169);\n                        v14 = 0LL;\n                        **(_DWORD **)&v162 = 75;\n                        return v14;\n                      }\n                      v75 = (unsigned int)(v74 + 2);\n                      v76 = __CFADD__(v19, v75);\n                      v77 = v19 + v75;\n                      if ( (v11 & 0x8000000000000000LL) != 0LL )\n                      {\n                        if ( v11 != -1LL )\n                          goto LABEL_202;\n                      }\n                      else\n                      {\n                        if ( v76 )\n                          goto LABEL_202;\n                        if ( 2 * v11 >= v77 )\n                          v77 = 2 * v11;\n                        if ( v11 < v77 )\n                        {\n                          v11 *= 2LL;\n                          if ( v11 < v77 )\n                          {\n                            if ( v77 == -1LL )\n                            {\nLABEL_202:\n                              v57 = v48;\n                              goto LABEL_89;\n                            }\n                            v11 = v77;\n                          }\n                          v78 = v48 == src;\n                          if ( !v48 || v48 == src )\n                          {\n                            v157 = v48;\n                            v93 = (char *)malloc(v11);\n                            v48 = (char *)v157;\n                            if ( !v93 )\n                              goto LABEL_202;\n                            if ( v19 && v78 )\n                              v48 = (char *)memcpy(v93, v157, v19);\n                            else\n                              v48 = v93;\n                          }\n                          else\n                          {\n                            v157 = v48;\n                            v79 = (char *)realloc(v48, v11);\n                            v48 = (char *)v157;\n                            if ( !v79 )\n                              goto LABEL_202;\n                            v48 = v79;\n                          }\n                        }\n                      }\n                      continue;\n                    }\nLABEL_133:\n                    if ( v74 < v49 && v48[v74 + v19] )\n                      goto LABEL_200;\n                    if ( v74 >= v73 )\n                      goto LABEL_137;\n                    goto LABEL_136;\n                  }\n                  v151 = &v165;\n                  v150 = (int *)v72;\n                  break;\n                case 11:\n                  v84 = *((_QWORD *)v12 + 10);\n                  v85 = &v48[v19];\n                  v157 = v48;\n                  a5 = *((double *)v169 + 4 * v84 + 2);\n                  if ( (_DWORD)v160 == 1 )\n                  {\n                    v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v161, v166, a5, &v165, v151);\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v160 != 2 )\n                    {\n                      v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v161, &v165, a5, v152, v153);\n                      v48 = (char *)v157;\n                      goto LABEL_132;\n                    }\n                    v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v161, v166, a5, v167, &v165);\n                  }\n                  v48 = (char *)v157;\n                  goto LABEL_132;\n                case 12:\n                  v81 = *((_QWORD *)v12 + 10);\n                  v82 = &v48[v19];\n                  v157 = v48;\n                  v83 = *((unsigned __int128 *)v169 + 2 * v81 + 1);\n                  if ( (_DWORD)v160 == 1 )\n                  {\n                    v73 = __snprintf_chk(v82, v49, 1LL, -1LL, v161, v166, a5, v83, v83 >> 64);\n                    goto LABEL_210;\n                  }\n                  if ( (_DWORD)v160 != 2 )\n                  {\n                    v73 = __snprintf_chk(v82, v49, 1LL, -1LL, v161, &v165, a5, v83, v83 >> 64);\n                    goto LABEL_131;\n                  }\n                  v73 = __snprintf_chk(v82, v49, 1LL, -1LL, v161, v166, a5, v167, v149);\n                  v48 = (char *)v157;\n                  goto LABEL_132;\n                default:\n                  goto LABEL_408;\n              }\n              break;\n            }\n            v72 = v166;\nLABEL_153:\n            v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v161, v72, a5, v150, v151);\n            v74 = v165;\n            v48 = (char *)v157;\n            if ( v165 < 0 )\n              goto LABEL_154;\n            goto LABEL_133;\n          }\n          if ( v19 != -3LL )\n          {\n            v11 = v19 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v46 = v14;\n        goto LABEL_76;\n      }\n      switch ( v29 )\n      {\n        case 18:\n          v15 = v19;\n          **((_BYTE **)v28 + 2) = v19;\n          break;\n        case 19:\n          v15 = v19;\n          **((_WORD **)v28 + 2) = v19;\n          break;\n        case 20:\n          v15 = v19;\n          **((_DWORD **)v28 + 2) = v19;\n          break;\n        case 21:\n        case 22:\n          v15 = v19;\n          **((_QWORD **)v28 + 2) = v19;\n          break;\n        default:\nLABEL_408:\n          abort();\n      }\nLABEL_110:\n      v13 = (_BYTE *)*((_QWORD *)v12 + 1);\n      v12 += 88;\n      v16 = *(_BYTE **)v12;\n      ++v159;\n      if ( v16 != v13 )\n        goto LABEL_14;\nLABEL_111:\n      v19 = v15;\n    }\n    v107 = v19;\n    v108 = v19 + 1;\n    if ( v19 == -1LL )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v11 < v108 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v108 )\n        {\nLABEL_303:\n          v109 = v14 == src;\n          if ( !v14 || v14 == src )\n          {\n            v142 = (char *)malloc(v11);\n            if ( !v142 )\n              goto LABEL_88;\n            if ( v107 && v109 )\n              v14 = (char *)memcpy(v142, v14, v107);\n            else\n              v14 = v142;\n          }\n          else\n          {\n            v110 = (char *)realloc(v14, v11);\n            if ( !v110 )\n              goto LABEL_126;\n            v14 = v110;\n          }\n          goto LABEL_307;\n        }\n      }\n      else if ( v108 <= 0xC )\n      {\n        v11 = 12LL;\n        goto LABEL_303;\n      }\n      if ( v19 == -2LL )\n        goto LABEL_88;\n      v11 = v19 + 1;\n      goto LABEL_303;\n    }\nLABEL_307:\n    v14[v107] = 0;\n    if ( v11 > v108 && v14 != src )\n    {\n      v111 = (char *)realloc(v14, v108);\n      if ( v111 )\n        v14 = v111;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v172 != v175 )\n      free(v172);\n    if ( v169 != v170 )\n      free(v169);\n    *v156 = v107;\n    return v14;\n  }\n  if ( v172 != v175 )\n    free(v172);\n  if ( v169 != v170 )\n    free(v169);\n  v14 = 0LL;\n  *__errno_location() = 22;\n  return v14;\n}\n\nchar *__fastcall sub_414470(void *a1, size_t *a2, _BYTE *a3, __int64 a4, double a5)\n{\n  __int64 v7; // rax\n  unsigned __int64 v8; // rax\n  size_t v9; // rdi\n  __int64 *v10; // rax\n  size_t v11; // r12\n  char *v12; // r14\n  _BYTE *v13; // r8\n  char *v14; // rbx\n  size_t v15; // r15\n  _BYTE *v16; // rcx\n  void *v17; // rcx\n  unsigned __int64 v18; // rax\n  size_t v19; // r13\n  bool v20; // dl\n  char *v21; // rax\n  char *v22; // rax\n  void *v23; // rsp\n  char *v24; // rax\n  char v25; // r15\n  __int64 v26; // rax\n  char *v27; // r8\n  long double *v28; // rdx\n  int v29; // eax\n  char v30; // al\n  int v31; // eax\n  char *v32; // r15\n  __int64 v33; // rdi\n  _BYTE *v34; // rsi\n  _BYTE *v35; // rdx\n  _BYTE *v36; // rsi\n  _BYTE *v37; // rdx\n  __int64 v38; // rax\n  char v39; // al\n  __int64 v40; // rax\n  char *v41; // rax\n  __int64 v42; // rax\n  char *v43; // r8\n  int v44; // eax\n  unsigned __int64 v45; // rax\n  char *v46; // r11\n  int *v47; // rax\n  char *v48; // r11\n  unsigned __int64 v49; // rbx\n  unsigned __int64 v50; // r10\n  char *v51; // rdx\n  char *v52; // rcx\n  __int64 v53; // rsi\n  _DWORD *v54; // r8\n  unsigned __int64 v55; // rdx\n  unsigned __int64 v56; // rcx\n  void *v57; // r15\n  unsigned __int64 v59; // rax\n  char *v60; // rax\n  char v62; // fps^1\n  char *v66; // rdx\n  char *v67; // rdi\n  int v68; // r11d\n  __int64 v69; // rcx\n  _DWORD *v70; // rcx\n  char *v71; // rdi\n  unsigned __int64 v72; // r9\n  int v73; // eax\n  int v74; // edx\n  __int64 v75; // rax\n  bool v76; // cf\n  unsigned __int64 v77; // rax\n  bool v78; // bl\n  char *v79; // rax\n  int v80; // ebx\n  __int64 v81; // rax\n  char *v82; // rdi\n  unsigned __int128 v83; // fst7\n  __int64 v84; // rax\n  char *v85; // rdi\n  unsigned __int64 v86; // rax\n  void *v87; // rax\n  char *v88; // rax\n  char *v89; // rcx\n  int v90; // r8d\n  __int16 v91; // ax\n  char *v92; // r15\n  char *v93; // rax\n  char *v94; // rax\n  char *v95; // rax\n  char v96; // al\n  char *v97; // r9\n  size_t v98; // r8\n  unsigned __int64 v99; // r10\n  char *v100; // rdi\n  __int64 v101; // rax\n  char *v102; // r10\n  unsigned __int64 v103; // rax\n  char *v104; // rax\n  char *v105; // rsi\n  char v106; // al\n  size_t v107; // r15\n  size_t v108; // r14\n  bool v109; // r13\n  char *v110; // rax\n  char *v111; // rax\n  __int64 v112; // rax\n  char *v113; // r10\n  char *v114; // rax\n  char *v115; // rax\n  char *v116; // rax\n  __int64 v117; // rsi\n  __int64 v118; // rdx\n  char v119; // al\n  __int64 v120; // rdx\n  char *v121; // rax\n  char *v122; // rax\n  __int64 v123; // rdx\n  char v124; // al\n  char *v125; // rax\n  char *v126; // rsi\n  __int64 v127; // r9\n  __int64 v128; // rdx\n  char *v129; // rax\n  char *v130; // rsi\n  char *v131; // rdi\n  __int64 v132; // rax\n  __int64 v133; // rsi\n  unsigned __int64 v134; // rax\n  char v135; // al\n  __int64 v136; // rsi\n  char v137; // al\n  char *v138; // rax\n  __int64 v139; // rdx\n  char v140; // al\n  char *v141; // rax\n  char *v142; // rax\n  char *v143; // rax\n  void *v144; // rdx\n  char v145; // al\n  _BYTE *v146; // rax\n  char *v147; // rax\n  char v148; // al\n  __int64 v149; // [rsp-8h] [rbp-718h]\n  int *v150; // [rsp+10h] [rbp-700h]\n  int *v151; // [rsp+18h] [rbp-6F8h]\n  __int64 v152; // [rsp+20h] [rbp-6F0h] BYREF\n  unsigned __int64 v153; // [rsp+28h] [rbp-6E8h]\n  char *v154; // [rsp+30h] [rbp-6E0h]\n  void *ptr; // [rsp+38h] [rbp-6D8h]\n  size_t *v156; // [rsp+40h] [rbp-6D0h]\n  void *v157; // [rsp+48h] [rbp-6C8h]\n  char *v158; // [rsp+50h] [rbp-6C0h]\n  __int64 v159; // [rsp+58h] [rbp-6B8h]\n  _BYTE *v160; // [rsp+60h] [rbp-6B0h]\n  __int64 *v161; // [rsp+68h] [rbp-6A8h]\n  long double v162; // [rsp+70h] [rbp-6A0h]\n  void *v163; // [rsp+80h] [rbp-690h]\n  void *src; // [rsp+88h] [rbp-688h]\n  int v165; // [rsp+94h] [rbp-67Ch] BYREF\n  unsigned int v166; // [rsp+98h] [rbp-678h]\n  unsigned int v167; // [rsp+9Ch] [rbp-674h]\n  char v168[8]; // [rsp+A0h] [rbp-670h] BYREF\n  void *v169; // [rsp+A8h] [rbp-668h]\n  _BYTE v170[224]; // [rsp+B0h] [rbp-660h] BYREF\n  __int64 v171; // [rsp+190h] [rbp-580h] BYREF\n  void *v172; // [rsp+198h] [rbp-578h]\n  __int64 v173; // [rsp+1A0h] [rbp-570h]\n  __int64 v174; // [rsp+1A8h] [rbp-568h]\n  _BYTE v175[624]; // [rsp+1B0h] [rbp-560h] BYREF\n  char v176[752]; // [rsp+420h] [rbp-2F0h] BYREF\n\n  src = a1;\n  v156 = a2;\n  if ( (int)sub_416250(a3, &v171, v168) < 0 )\n    return 0LL;\n  if ( (int)sub_416030(a4, v168) >= 0 )\n  {\n    v7 = v173 + 7;\n    if ( (unsigned __int64)(v173 + 7) <= 6 )\n      v7 = -1LL;\n    v76 = __CFADD__(v174, v7);\n    v8 = v174 + v7;\n    if ( v76 )\n      goto LABEL_112;\n    v9 = v8 + 6;\n    if ( v8 >= 0xFFFFFFFFFFFFFFFALL )\n      goto LABEL_112;\n    if ( v9 <= 0xF9F )\n    {\n      ptr = 0LL;\n      v23 = alloca(v8 + 14);\n      v161 = &v152;\n    }\n    else\n    {\n      if ( v8 == -7LL )\n        goto LABEL_112;\n      v10 = (__int64 *)malloc(v9);\n      v161 = v10;\n      if ( !v10 )\n        goto LABEL_112;\n      ptr = v10;\n    }\n    v11 = 0LL;\n    if ( src )\n      v11 = *v156;\n    v12 = (char *)v172;\n    v13 = a3;\n    v14 = (char *)src;\n    v159 = 0LL;\n    v15 = 0LL;\n    v16 = *(_BYTE **)v172;\n    if ( *(_BYTE **)v172 == v13 )\n      goto LABEL_111;\nLABEL_14:\n    v17 = (void *)(v16 - v13);\n    v18 = (unsigned __int64)v17 + v15;\n    v19 = (size_t)v17 + v15;\n    if ( __CFADD__(v17, v15) )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n      v19 = -1LL;\n    }\n    else if ( v11 < v18 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v18 )\n        {\nLABEL_28:\n          v20 = v14 == src;\n          if ( !v14 )\n            goto LABEL_19;\n          goto LABEL_29;\n        }\n      }\n      else if ( v18 <= 0xC )\n      {\n        v11 = 12LL;\n        v20 = v14 == src;\n        if ( !v14 )\n        {\nLABEL_19:\n          v160 = v13;\n          LOBYTE(v162) = v20;\n          v163 = v17;\n          v21 = (char *)malloc(v11);\n          v17 = v163;\n          v13 = v160;\n          if ( !v21 )\n            goto LABEL_88;\n          if ( v15 && LOBYTE(v162) )\n          {\n            *(_QWORD *)&v162 = v160;\n            v22 = (char *)memcpy(v21, v14, v15);\n            v17 = v163;\n            v13 = *(_BYTE **)&v162;\n            v14 = v22;\n          }\n          else\n          {\n            v14 = v21;\n          }\n          goto LABEL_32;\n        }\nLABEL_29:\n        if ( !v20 )\n        {\n          *(_QWORD *)&v162 = v13;\n          v163 = v17;\n          v24 = (char *)realloc(v14, v11);\n          if ( !v24 )\n            goto LABEL_126;\n          v17 = v163;\n          v13 = *(_BYTE **)&v162;\n          v14 = v24;\n          goto LABEL_32;\n        }\n        goto LABEL_19;\n      }\n      if ( v18 == -1LL )\n        goto LABEL_88;\n      v11 = (size_t)v17 + v15;\n      goto LABEL_28;\n    }\nLABEL_32:\n    memcpy(&v14[v15], v13, (size_t)v17);\n    while ( v171 != v159 )\n    {\n      v25 = v12[72];\n      v26 = *((_QWORD *)v12 + 10);\n      if ( v25 == 37 )\n      {\n        if ( v26 != -1 )\n          goto LABEL_200;\n        v59 = v19 + 1;\n        v15 = v19 + 1;\n        if ( v19 == -1LL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n          v15 = -1LL;\n        }\n        else if ( v11 < v59 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 < v59 )\n              goto LABEL_238;\n          }\n          else\n          {\n            if ( v59 <= 0xC )\n            {\n              v11 = 12LL;\n              goto LABEL_105;\n            }\nLABEL_238:\n            if ( v19 == -2LL )\n              goto LABEL_88;\n            v11 = v19 + 1;\n          }\nLABEL_105:\n          if ( v14 && v14 != src )\n          {\n            v60 = (char *)realloc(v14, v11);\n            if ( v60 )\n            {\n              v14 = v60;\n              goto LABEL_109;\n            }\nLABEL_126:\n            v57 = v14;\n            *(_QWORD *)&v162 = __errno_location();\n            goto LABEL_127;\n          }\n          LOBYTE(v163) = v14 == src;\n          v95 = (char *)malloc(v11);\n          if ( !v95 )\n            goto LABEL_88;\n          if ( v19 && (_BYTE)v163 )\n            v14 = (char *)memcpy(v95, v14, v19);\n          else\n            v14 = v95;\n        }\nLABEL_109:\n        v14[v19] = 37;\n        goto LABEL_110;\n      }\n      if ( v26 == -1 )\n        goto LABEL_200;\n      v27 = (char *)v169;\n      v28 = (long double *)((char *)v169 + 32 * v26);\n      v29 = *(_DWORD *)v28;\n      LODWORD(v163) = *(_DWORD *)v28;\n      if ( v25 != 110 )\n      {\n        v30 = v25 & 0xDF;\n        if ( ((unsigned __int8)((v25 & 0xDF) - 69) <= 2u || v30 == 65) && (_DWORD)v163 == 12 )\n        {\n          _FST7 = v28[1];\n          if ( _FST7 == _FST7 + _FST7 )\n          {\n            v66 = (char *)*((_QWORD *)v12 + 3);\n            v67 = (char *)*((_QWORD *)v12 + 4);\n            v68 = *((_DWORD *)v12 + 4);\n            if ( v66 == v67 )\n            {\n              v50 = 0LL;\n            }\n            else\n            {\n              v69 = *((_QWORD *)v12 + 5);\n              if ( v69 == -1 )\n              {\n                v50 = 0LL;\n                v163 = (void *)-1LL;\n                while ( 1 )\n                {\n                  v126 = v66 + 1;\n                  v127 = -1LL;\n                  v128 = *v66 - 48;\n                  if ( v50 <= 0x1999999999999999LL )\n                    v127 = 10 * v50;\n                  v76 = __CFADD__(v127, v128);\n                  v50 = v127 + v128;\n                  v66 = v126;\n                  if ( v76 )\n                  {\n                    if ( v67 == v126 )\n                    {\nLABEL_81:\n                      v50 = (unsigned __int64)v163;\n                      goto LABEL_82;\n                    }\n                    while ( *v66++ != 48 )\n                    {\n                      if ( v67 == v66 )\n                        goto LABEL_81;\n                    }\n                    v50 = -1LL;\n                  }\n                  if ( v67 == v66 )\n                    goto LABEL_82;\n                }\n              }\n              v70 = (char *)v169 + 32 * v69;\n              if ( *v70 != 5 )\n                goto LABEL_200;\n              v50 = (int)v70[4];\n              if ( (v50 & 0x80000000) != 0LL )\n              {\n                v68 |= 2u;\n                v50 = -(__int64)v50;\n              }\n            }\nLABEL_82:\n            v51 = (char *)*((_QWORD *)v12 + 6);\n            v52 = (char *)*((_QWORD *)v12 + 7);\n            if ( v51 != v52 )\n            {\n              v53 = *((_QWORD *)v12 + 8);\n              if ( v53 == -1 )\n              {\n                v129 = v51 + 1;\n                v55 = 0LL;\n                if ( v52 != v129 )\n                {\n                  v130 = v129;\n                  while ( 1 )\n                  {\n                    v131 = v130 + 1;\n                    v132 = *v130 - 48;\n                    v133 = -1LL;\n                    if ( v55 <= 0x1999999999999999LL )\n                      v133 = 10 * v55;\n                    v76 = __CFADD__(v133, v132);\n                    v134 = v133 + v132;\n                    v130 = v131;\n                    v55 = v134;\n                    if ( v76 )\n                    {\n                      if ( v52 == v131 )\n                        goto LABEL_88;\n                      while ( 1 )\n                      {\n                        v130 = v131 + 1;\n                        if ( *v131 == 48 )\n                          break;\n                        if ( v52 == v130 )\n                          goto LABEL_88;\n                        ++v131;\n                      }\n                      v55 = -1LL;\n                    }\n                    if ( v52 == v130 )\n                      goto LABEL_86;\n                  }\n                }\n                goto LABEL_375;\n              }\n              v54 = (char *)v169 + 32 * v53;\n              if ( *v54 != 5 )\n                goto LABEL_200;\n              v55 = (int)v54[4];\n              if ( (v55 & 0x80000000) == 0LL )\n              {\nLABEL_86:\n                if ( v55 )\n                {\n                  v56 = v55 + 12;\n                  if ( v55 >= 0xFFFFFFFFFFFFFFF4LL )\n                    goto LABEL_88;\nLABEL_190:\n                  v86 = v56;\n                  if ( v50 >= v56 )\n                    v86 = v50;\n                  v76 = __CFADD__(v86, 1LL);\n                  v87 = (void *)(v86 + 1);\n                  v163 = v87;\n                  if ( v76 )\n                    goto LABEL_88;\n                  if ( (unsigned __int64)v87 <= 0x2BC )\n                  {\n                    v89 = v176;\n                  }\n                  else\n                  {\n                    v157 = (void *)v50;\n                    v158 = (char *)v55;\n                    LODWORD(v160) = v68;\n                    v162 = _FST7;\n                    if ( v87 == (void *)-1LL )\n                      goto LABEL_88;\n                    v88 = (char *)malloc((size_t)v87);\n                    v68 = (int)v160;\n                    _FST7 = v162;\n                    v89 = v88;\n                    v55 = (unsigned __int64)v158;\n                    v50 = (unsigned __int64)v157;\n                    if ( !v88 )\n                      goto LABEL_88;\n                  }\n                  v90 = (unsigned __int16)v166;\n                  LOBYTE(v91) = v166;\n                  HIBYTE(v91) = BYTE1(v166) | 3;\n                  LOWORD(v166) = v91;\n                  __asm { fxam }\n                  if ( (v62 & 2) != 0 )\n                  {\n                    *v89 = 45;\n                    _FST7 = -_FST7;\n                    v92 = v89 + 1;\n                  }\n                  else if ( (v68 & 4) != 0 )\n                  {\n                    v92 = v89 + 1;\n                    *v89 = 43;\n                  }\n                  else\n                  {\n                    v92 = v89;\n                    if ( (v68 & 8) != 0 )\n                    {\n                      v92 = v89 + 1;\n                      *v89 = 32;\n                    }\n                  }\n                  if ( _FST7 > 0.0 )\n                  {\n                    if ( _FST7 + _FST7 != _FST7 )\n                      goto LABEL_200;\n                    v97 = v92 + 3;\n                    if ( (unsigned __int8)(v12[72] - 65) > 0x19u )\n                    {\n                      v92[2] = 102;\n                      *(_WORD *)v92 = 28265;\n                    }\n                    else\n                    {\n                      v92[2] = 70;\n                      *(_WORD *)v92 = 20041;\n                    }\n                    v92 = 0LL;\n                    goto LABEL_263;\n                  }\n                  if ( _FST7 != 0.0 )\n                    goto LABEL_200;\n                  v96 = v12[72] & 0xDF;\n                  switch ( v96 )\n                  {\n                    case 'F':\n                      *v92 = 48;\n                      if ( (v68 & 0x10) != 0 || v55 )\n                      {\n                        LODWORD(v153) = v90;\n                        v154 = (char *)v50;\n                        v157 = v89;\n                        v158 = (char *)v55;\n                        LODWORD(v160) = v68;\n                        *(_QWORD *)&v162 = v92 + 2;\n                        v122 = nl_langinfo(0x10000);\n                        v123 = (__int64)v158;\n                        v97 = *(char **)&v162;\n                        v124 = *v122;\n                        LOBYTE(v68) = (_BYTE)v160;\n                        v89 = (char *)v157;\n                        v50 = (unsigned __int64)v154;\n                        LOWORD(v90) = v153;\n                        if ( !v124 )\n                          v124 = 46;\n                        v92[1] = v124;\n                        if ( v123 )\n                        {\n                          v125 = v97;\n                          do\n                            *v125++ = 48;\n                          while ( v125 != &v92[v123 + 2] );\n                          v97 += v123;\n                        }\n                        goto LABEL_263;\n                      }\n                      goto LABEL_262;\n                    case 'E':\n                      *v92 = 48;\n                      if ( (v68 & 0x10) != 0 || (v105 = v92 + 1, v55) )\n                      {\n                        LODWORD(v153) = v90;\n                        v154 = (char *)v50;\n                        v157 = v89;\n                        v158 = (char *)v55;\n                        LODWORD(v160) = v68;\n                        *(_QWORD *)&v162 = v92 + 2;\n                        v138 = nl_langinfo(0x10000);\n                        v139 = (__int64)v158;\n                        v105 = *(char **)&v162;\n                        v140 = *v138;\n                        LOBYTE(v68) = (_BYTE)v160;\n                        v89 = (char *)v157;\n                        v50 = (unsigned __int64)v154;\n                        LOWORD(v90) = v153;\n                        if ( !v140 )\n                          v140 = 46;\n                        v92[1] = v140;\n                        if ( v139 )\n                        {\n                          v141 = v105;\n                          do\n                            *v141++ = 48;\n                          while ( v141 != &v92[v139 + 2] );\n                          v105 += v139;\n                        }\n                      }\n                      v106 = v12[72];\n                      v97 = v105 + 4;\n                      v105[3] = 48;\n                      *v105 = v106;\n                      *(_WORD *)(v105 + 1) = 12331;\n                      goto LABEL_263;\n                    case 'G':\n                      *v92 = 48;\n                      if ( (v68 & 0x10) != 0 )\n                      {\n                        if ( v55 )\n                        {\n                          HIDWORD(v152) = v90;\n                          v153 = v50;\n                          v154 = v92 + 2;\n                          v157 = v89;\n                          LODWORD(v158) = v68;\n                          v160 = (_BYTE *)v55;\n                          *(_QWORD *)&v162 = v55 - 1;\n                          v116 = nl_langinfo(0x10000);\n                          v117 = *(_QWORD *)&v162;\n                          v118 = (__int64)v160;\n                          v119 = *v116;\n                          LOBYTE(v68) = (_BYTE)v158;\n                          v89 = (char *)v157;\n                          v97 = v154;\n                          v50 = v153;\n                          LOWORD(v90) = WORD2(v152);\n                          if ( !v119 )\n                            v119 = 46;\n                          v92[1] = v119;\n                          if ( v117 )\n                          {\n                            v120 = (__int64)&v92[v118 + 1];\n                            v121 = v97;\n                            do\n                              *v121++ = 48;\n                            while ( v121 != (char *)v120 );\n                            v97 += v117;\n                          }\n                        }\n                        else\n                        {\n                          LODWORD(v154) = v90;\n                          v157 = (void *)v50;\n                          v158 = v92 + 2;\n                          v160 = v89;\n                          LODWORD(v162) = v68;\n                          v147 = nl_langinfo(0x10000);\n                          LOBYTE(v68) = LOBYTE(v162);\n                          v89 = v160;\n                          v148 = *v147;\n                          v97 = v158;\n                          v50 = (unsigned __int64)v157;\n                          LOWORD(v90) = (_WORD)v154;\n                          if ( !v148 )\n                            v148 = 46;\n                          v92[1] = v148;\n                        }\n                        goto LABEL_263;\n                      }\nLABEL_262:\n                      v97 = v92 + 1;\n                      goto LABEL_263;\n                  }\n                  if ( v96 != 65 )\n                    goto LABEL_200;\n                  *v92 = 48;\n                  *(_QWORD *)&v162 = v92 + 2;\n                  v135 = v12[72];\n                  v92[2] = 48;\n                  v92[1] = v135 + 23;\n                  if ( (v68 & 0x10) != 0 || (v136 = (__int64)(v92 + 3), v55) )\n                  {\n                    HIDWORD(v152) = v90;\n                    v153 = v50;\n                    v154 = v89;\n                    v157 = (void *)v55;\n                    LODWORD(v158) = v68;\n                    v160 = v92 + 4;\n                    v143 = nl_langinfo(0x10000);\n                    v144 = v157;\n                    v136 = (__int64)v160;\n                    v145 = *v143;\n                    LOBYTE(v68) = (_BYTE)v158;\n                    v89 = v154;\n                    v50 = v153;\n                    LOWORD(v90) = WORD2(v152);\n                    if ( !v145 )\n                      v145 = 46;\n                    v92[3] = v145;\n                    if ( v144 )\n                    {\n                      v146 = (_BYTE *)v136;\n                      do\n                        *v146++ = 48;\n                      while ( v146 != (_BYTE *)v144 + (_QWORD)v92 + 4 );\n                      v136 += (__int64)v144;\n                    }\n                  }\n                  v137 = v12[72];\n                  v97 = (char *)(v136 + 3);\n                  *(_WORD *)(v136 + 1) = 12331;\n                  v92 = *(char **)&v162;\n                  *(_BYTE *)v136 = v137 + 15;\nLABEL_263:\n                  LOWORD(v166) = v90;\n                  v98 = v97 - v89;\n                  if ( v50 > v97 - v89 )\n                  {\n                    v99 = v50 - v98;\n                    v100 = &v97[v99];\n                    v98 = &v97[v99] - v89;\n                    if ( (v68 & 2) != 0 )\n                    {\n                      if ( v99 )\n                      {\n                        do\n                          *v97++ = 32;\n                        while ( v100 != v97 );\n                      }\n                    }\n                    else if ( (v68 & 0x20) != 0 && v92 )\n                    {\n                      if ( v92 >= v97 )\n                      {\n                        v92 = v97;\n                      }\n                      else\n                      {\n                        v101 = -1LL;\n                        do\n                        {\n                          v100[v101] = v97[v101];\n                          --v101;\n                        }\n                        while ( v101 != v92 - 1 - v97 );\n                      }\n                      if ( v99 )\n                      {\n                        v102 = &v92[v99];\n                        do\n                          *v92++ = 48;\n                        while ( v92 != v102 );\n                      }\n                    }\n                    else\n                    {\n                      v112 = -1LL;\n                      if ( v89 < v97 )\n                      {\n                        do\n                        {\n                          v100[v112] = v97[v112];\n                          --v112;\n                        }\n                        while ( v89 - 1 - v97 != v112 );\n                        v97 = v89;\n                      }\n                      if ( v99 )\n                      {\n                        v113 = &v97[v99];\n                        do\n                          *v97++ = 32;\n                        while ( v97 != v113 );\n                      }\n                    }\n                  }\n                  if ( (unsigned __int64)v163 <= v98 )\n                    goto LABEL_200;\n                  v103 = v98 + v19;\n                  v15 = v98 + v19;\n                  if ( v11 - v19 <= v98 )\n                  {\n                    if ( __CFADD__(v98, v19) )\n                    {\n                      if ( v11 != -1LL )\n                        goto LABEL_88;\n                    }\n                    else if ( v11 < v103 )\n                    {\n                      if ( v11 )\n                      {\n                        if ( (v11 & 0x8000000000000000LL) != 0LL )\n                          goto LABEL_88;\n                        v11 *= 2LL;\n                        if ( v11 < v103 )\n                          goto LABEL_373;\n                      }\n                      else\n                      {\n                        if ( v103 <= 0xC )\n                        {\n                          v11 = 12LL;\n                          goto LABEL_280;\n                        }\nLABEL_373:\n                        if ( v103 == -1LL )\n                          goto LABEL_88;\n                        v11 = v98 + v19;\n                      }\nLABEL_280:\n                      if ( !v14 || v14 == src )\n                      {\n                        LOBYTE(v160) = v14 == src;\n                        *(_QWORD *)&v162 = v98;\n                        v163 = v89;\n                        v114 = (char *)malloc(v11);\n                        v89 = (char *)v163;\n                        v98 = *(_QWORD *)&v162;\n                        if ( !v114 )\n                          goto LABEL_88;\n                        if ( v19 && (_BYTE)v160 )\n                        {\n                          v115 = (char *)memcpy(v114, v14, v19);\n                          v89 = (char *)v163;\n                          v98 = *(_QWORD *)&v162;\n                          v14 = v115;\n                        }\n                        else\n                        {\n                          v14 = v114;\n                        }\n                      }\n                      else\n                      {\n                        *(_QWORD *)&v162 = v98;\n                        v163 = v89;\n                        v104 = (char *)realloc(v14, v11);\n                        if ( !v104 )\n                          goto LABEL_88;\n                        v89 = (char *)v163;\n                        v98 = *(_QWORD *)&v162;\n                        v14 = v104;\n                      }\n                    }\n                  }\n                  v163 = v89;\n                  memcpy(&v14[v19], v89, v98);\n                  if ( v163 != v176 )\n                    free(v163);\n                  goto LABEL_110;\n                }\nLABEL_375:\n                v56 = 12LL;\n                goto LABEL_190;\n              }\n            }\n            v56 = 12LL;\n            if ( v30 != 65 )\n              v56 = 18LL;\n            v55 = 0LL;\n            if ( v30 != 65 )\n              v55 = 6LL;\n            goto LABEL_190;\n          }\n        }\n        v31 = *((_DWORD *)v12 + 4);\n        v32 = (char *)v161 + 1;\n        *(_BYTE *)v161 = 37;\n        if ( (v31 & 1) != 0 )\n        {\n          v33 = (__int64)v161;\n          *((_BYTE *)v161 + 1) = 39;\n          v32 = (char *)(v33 + 2);\n        }\n        if ( (v31 & 2) != 0 )\n          *v32++ = 45;\n        if ( (v31 & 4) != 0 )\n          *v32++ = 43;\n        if ( (v31 & 8) != 0 )\n          *v32++ = 32;\n        if ( (v31 & 0x10) != 0 )\n          *v32++ = 35;\n        if ( (v31 & 0x40) != 0 )\n          *v32++ = 73;\n        if ( (v31 & 0x20) != 0 )\n          *v32++ = 48;\n        v34 = (_BYTE *)*((_QWORD *)v12 + 3);\n        v35 = (_BYTE *)*((_QWORD *)v12 + 4);\n        if ( v34 != v35 )\n        {\n          v160 = v27;\n          *(_QWORD *)&v162 = v35 - v34;\n          memcpy(v32, v34, v35 - v34);\n          v27 = v160;\n          v32 += *(_QWORD *)&v162;\n        }\n        v36 = (_BYTE *)*((_QWORD *)v12 + 6);\n        v37 = (_BYTE *)*((_QWORD *)v12 + 7);\n        if ( v36 != v37 )\n        {\n          v160 = v27;\n          *(_QWORD *)&v162 = v37 - v36;\n          memcpy(v32, v36, v37 - v36);\n          v27 = v160;\n          v32 += *(_QWORD *)&v162;\n        }\n        if ( (unsigned int)v163 <= 0x10 )\n        {\n          v38 = 1LL << (char)v163;\n          if ( ((1LL << (char)v163) & 0x14180) != 0 )\n            goto LABEL_125;\n          if ( (v38 & 0x1000) != 0 )\n          {\n            *v32++ = 76;\n          }\n          else\n          {\n            if ( (v38 & 0x600) == 0 )\n              goto LABEL_62;\n            *v32++ = 108;\nLABEL_125:\n            *v32++ = 108;\n          }\n        }\nLABEL_62:\n        v39 = v12[72];\n        v32[1] = 0;\n        *v32 = v39;\n        v40 = *((_QWORD *)v12 + 5);\n        if ( v40 != -1 )\n        {\n          v41 = &v27[32 * v40];\n          if ( *(_DWORD *)v41 == 5 )\n          {\n            LODWORD(v160) = 1;\n            v166 = *((_DWORD *)v41 + 4);\n            goto LABEL_65;\n          }\nLABEL_200:\n          abort();\n        }\n        LODWORD(v160) = 0;\nLABEL_65:\n        v42 = *((_QWORD *)v12 + 8);\n        if ( v42 != -1 )\n        {\n          v43 = &v27[32 * v42];\n          if ( *(_DWORD *)v43 != 5 )\n            goto LABEL_200;\n          v44 = (int)v160;\n          *(&v166 + (unsigned int)v160) = *((_DWORD *)v43 + 4);\n          LODWORD(v160) = v44 + 1;\n        }\n        v45 = v19 + 2;\n        if ( v19 >= 0xFFFFFFFFFFFFFFFELL )\n        {\n          if ( v11 != -1LL )\n            goto LABEL_88;\n        }\n        else if ( v11 < v45 )\n        {\n          if ( v11 )\n          {\n            if ( (v11 & 0x8000000000000000LL) != 0LL )\n              goto LABEL_88;\n            v11 *= 2LL;\n            if ( v11 >= v45 )\n              goto LABEL_73;\n          }\n          else if ( v45 <= 0xC )\n          {\n            v11 = 12LL;\nLABEL_73:\n            if ( v14 && v14 != src )\n            {\n              v46 = (char *)realloc(v14, v11);\n              if ( v46 )\n                goto LABEL_76;\nLABEL_88:\n              v57 = v14;\n              *(_QWORD *)&v162 = __errno_location();\nLABEL_89:\n              if ( v57 == src || !v57 )\n              {\nLABEL_91:\n                if ( ptr )\n                {\n                  free(ptr);\nLABEL_93:\n                  if ( v172 != v175 )\n                    free(v172);\n                  if ( v169 != v170 )\n                    free(v169);\n                  v14 = 0LL;\n                  **(_DWORD **)&v162 = 12;\n                  return v14;\n                }\nLABEL_112:\n                *(_QWORD *)&v162 = __errno_location();\n                goto LABEL_93;\n              }\nLABEL_127:\n              free(v57);\n              goto LABEL_91;\n            }\n            LOBYTE(v162) = v14 == src;\n            v94 = (char *)malloc(v11);\n            v46 = v94;\n            if ( !v94 )\n              goto LABEL_88;\n            if ( v19 && LOBYTE(v162) )\n              v46 = (char *)memcpy(v94, v14, v19);\nLABEL_76:\n            v46[v19] = 0;\n            v158 = v46;\n            v47 = __errno_location();\n            v48 = v158;\n            v158 = v32;\n            *(_QWORD *)&v162 = v47;\n            LODWORD(v154) = *v47;\n            while ( 2 )\n            {\n              v49 = 0x7FFFFFFFLL;\n              v165 = -1;\n              **(_DWORD **)&v162 = 0;\n              if ( v11 - v19 <= 0x7FFFFFFF )\n                v49 = v11 - v19;\n              switch ( (int)v163 )\n              {\n                case 1:\n                  v72 = (unsigned int)*((char *)v169 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 2:\n                  v72 = *((unsigned __int8 *)v169 + 32 * *((_QWORD *)v12 + 10) + 16);\n                  goto LABEL_150;\n                case 3:\n                  v72 = (unsigned int)*((__int16 *)v169 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 4:\n                  v72 = *((unsigned __int16 *)v169 + 16 * *((_QWORD *)v12 + 10) + 8);\n                  goto LABEL_150;\n                case 5:\n                case 6:\n                case 13:\n                case 14:\n                  v72 = *((unsigned int *)v169 + 8 * *((_QWORD *)v12 + 10) + 4);\nLABEL_150:\n                  v71 = &v48[v19];\n                  v157 = v48;\n                  if ( (_DWORD)v160 != 1 )\n                  {\n                    if ( (_DWORD)v160 != 2 )\n                    {\n                      v150 = &v165;\n                      goto LABEL_153;\n                    }\n                    goto LABEL_209;\n                  }\n                  v151 = &v165;\n                  v150 = (int *)v72;\n                  break;\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                case 15:\n                case 16:\n                case 17:\n                  v71 = &v48[v19];\n                  v72 = *((_QWORD *)v169 + 4 * *((_QWORD *)v12 + 10) + 2);\n                  v157 = v48;\n                  if ( (_DWORD)v160 != 1 )\n                  {\n                    if ( (_DWORD)v160 != 2 )\n                    {\n                      v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v161, v72, a5, &v165, v151);\nLABEL_131:\n                      v48 = (char *)v157;\n                      goto LABEL_132;\n                    }\nLABEL_209:\n                    v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v161, v166, a5, v167, v72);\nLABEL_210:\n                    v48 = (char *)v157;\nLABEL_132:\n                    v74 = v165;\n                    if ( v165 < 0 )\n                    {\nLABEL_154:\n                      if ( v158[1] )\n                      {\n                        v158[1] = 0;\n                        continue;\n                      }\n                      if ( v73 < 0 )\n                      {\n                        v80 = **(_DWORD **)&v162;\n                        if ( !**(_DWORD **)&v162 )\n                        {\n                          v80 = 84;\n                          if ( (v12[72] & 0xEF) != 99 )\n                            v80 = 22;\n                        }\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v172 != v175 )\n                          free(v172);\n                        if ( v169 != v170 )\n                          free(v169);\n                        **(_DWORD **)&v162 = v80;\n                        return 0LL;\n                      }\nLABEL_136:\n                      v165 = v73;\n                      v74 = v73;\nLABEL_137:\n                      if ( (unsigned int)(v74 + 1) < v49 )\n                      {\n                        v14 = v48;\n                        v15 = v19 + v74;\n                        **(_DWORD **)&v162 = (_DWORD)v154;\n                        goto LABEL_110;\n                      }\n                      if ( v11 - v19 > 0x7FFFFFFE )\n                      {\n                        if ( v48 != src && v48 )\n                          free(v48);\n                        if ( ptr )\n                          free(ptr);\n                        if ( v172 != v175 )\n                          free(v172);\n                        if ( v169 != v170 )\n                          free(v169);\n                        v14 = 0LL;\n                        **(_DWORD **)&v162 = 75;\n                        return v14;\n                      }\n                      v75 = (unsigned int)(v74 + 2);\n                      v76 = __CFADD__(v19, v75);\n                      v77 = v19 + v75;\n                      if ( (v11 & 0x8000000000000000LL) != 0LL )\n                      {\n                        if ( v11 != -1LL )\n                          goto LABEL_202;\n                      }\n                      else\n                      {\n                        if ( v76 )\n                          goto LABEL_202;\n                        if ( 2 * v11 >= v77 )\n                          v77 = 2 * v11;\n                        if ( v11 < v77 )\n                        {\n                          v11 *= 2LL;\n                          if ( v11 < v77 )\n                          {\n                            if ( v77 == -1LL )\n                            {\nLABEL_202:\n                              v57 = v48;\n                              goto LABEL_89;\n                            }\n                            v11 = v77;\n                          }\n                          v78 = v48 == src;\n                          if ( !v48 || v48 == src )\n                          {\n                            v157 = v48;\n                            v93 = (char *)malloc(v11);\n                            v48 = (char *)v157;\n                            if ( !v93 )\n                              goto LABEL_202;\n                            if ( v19 && v78 )\n                              v48 = (char *)memcpy(v93, v157, v19);\n                            else\n                              v48 = v93;\n                          }\n                          else\n                          {\n                            v157 = v48;\n                            v79 = (char *)realloc(v48, v11);\n                            v48 = (char *)v157;\n                            if ( !v79 )\n                              goto LABEL_202;\n                            v48 = v79;\n                          }\n                        }\n                      }\n                      continue;\n                    }\nLABEL_133:\n                    if ( v74 < v49 && v48[v74 + v19] )\n                      goto LABEL_200;\n                    if ( v74 >= v73 )\n                      goto LABEL_137;\n                    goto LABEL_136;\n                  }\n                  v151 = &v165;\n                  v150 = (int *)v72;\n                  break;\n                case 11:\n                  v84 = *((_QWORD *)v12 + 10);\n                  v85 = &v48[v19];\n                  v157 = v48;\n                  a5 = *((double *)v169 + 4 * v84 + 2);\n                  if ( (_DWORD)v160 == 1 )\n                  {\n                    v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v161, v166, a5, &v165, v151);\n                  }\n                  else\n                  {\n                    if ( (_DWORD)v160 != 2 )\n                    {\n                      v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v161, &v165, a5, v152, v153);\n                      v48 = (char *)v157;\n                      goto LABEL_132;\n                    }\n                    v73 = __snprintf_chk(v85, v49, 1LL, -1LL, v161, v166, a5, v167, &v165);\n                  }\n                  v48 = (char *)v157;\n                  goto LABEL_132;\n                case 12:\n                  v81 = *((_QWORD *)v12 + 10);\n                  v82 = &v48[v19];\n                  v157 = v48;\n                  v83 = *((unsigned __int128 *)v169 + 2 * v81 + 1);\n                  if ( (_DWORD)v160 == 1 )\n                  {\n                    v73 = __snprintf_chk(v82, v49, 1LL, -1LL, v161, v166, a5, v83, v83 >> 64);\n                    goto LABEL_210;\n                  }\n                  if ( (_DWORD)v160 != 2 )\n                  {\n                    v73 = __snprintf_chk(v82, v49, 1LL, -1LL, v161, &v165, a5, v83, v83 >> 64);\n                    goto LABEL_131;\n                  }\n                  v73 = __snprintf_chk(v82, v49, 1LL, -1LL, v161, v166, a5, v167, v149);\n                  v48 = (char *)v157;\n                  goto LABEL_132;\n                default:\n                  goto LABEL_408;\n              }\n              break;\n            }\n            v72 = v166;\nLABEL_153:\n            v73 = __snprintf_chk(v71, v49, 1LL, -1LL, v161, v72, a5, v150, v151);\n            v74 = v165;\n            v48 = (char *)v157;\n            if ( v165 < 0 )\n              goto LABEL_154;\n            goto LABEL_133;\n          }\n          if ( v19 != -3LL )\n          {\n            v11 = v19 + 2;\n            goto LABEL_73;\n          }\n          goto LABEL_88;\n        }\n        v46 = v14;\n        goto LABEL_76;\n      }\n      switch ( v29 )\n      {\n        case 18:\n          v15 = v19;\n          **((_BYTE **)v28 + 2) = v19;\n          break;\n        case 19:\n          v15 = v19;\n          **((_WORD **)v28 + 2) = v19;\n          break;\n        case 20:\n          v15 = v19;\n          **((_DWORD **)v28 + 2) = v19;\n          break;\n        case 21:\n        case 22:\n          v15 = v19;\n          **((_QWORD **)v28 + 2) = v19;\n          break;\n        default:\nLABEL_408:\n          abort();\n      }\nLABEL_110:\n      v13 = (_BYTE *)*((_QWORD *)v12 + 1);\n      v12 += 88;\n      v16 = *(_BYTE **)v12;\n      ++v159;\n      if ( v16 != v13 )\n        goto LABEL_14;\nLABEL_111:\n      v19 = v15;\n    }\n    v107 = v19;\n    v108 = v19 + 1;\n    if ( v19 == -1LL )\n    {\n      if ( v11 != -1LL )\n        goto LABEL_88;\n    }\n    else if ( v11 < v108 )\n    {\n      if ( v11 )\n      {\n        if ( (v11 & 0x8000000000000000LL) != 0LL )\n          goto LABEL_88;\n        v11 *= 2LL;\n        if ( v11 >= v108 )\n        {\nLABEL_303:\n          v109 = v14 == src;\n          if ( !v14 || v14 == src )\n          {\n            v142 = (char *)malloc(v11);\n            if ( !v142 )\n              goto LABEL_88;\n            if ( v107 && v109 )\n              v14 = (char *)memcpy(v142, v14, v107);\n            else\n              v14 = v142;\n          }\n          else\n          {\n            v110 = (char *)realloc(v14, v11);\n            if ( !v110 )\n              goto LABEL_126;\n            v14 = v110;\n          }\n          goto LABEL_307;\n        }\n      }\n      else if ( v108 <= 0xC )\n      {\n        v11 = 12LL;\n        goto LABEL_303;\n      }\n      if ( v19 == -2LL )\n        goto LABEL_88;\n      v11 = v19 + 1;\n      goto LABEL_303;\n    }\nLABEL_307:\n    v14[v107] = 0;\n    if ( v11 > v108 && v14 != src )\n    {\n      v111 = (char *)realloc(v14, v108);\n      if ( v111 )\n        v14 = v111;\n    }\n    if ( ptr )\n      free(ptr);\n    if ( v172 != v175 )\n      free(v172);\n    if ( v169 != v170 )\n      free(v169);\n    *v156 = v107;\n    return v14;\n  }\n  if ( v172 != v175 )\n    free(v172);\n  if ( v169 != v170 )\n    free(v169);\n  v14 = 0LL;\n  *__errno_location() = 22;\n  return v14;\n}\n"
        },
        {
            "funcName": "sub_415F90",
            "funcStartAddr": "0x415f90",
            "funcEndAddr": "0x416023",
            "decompiledFuncCode": "FILE *__fastcall sub_415F90(const char *a1, const char *a2)\n{\n  FILE *v2; // rax\n  FILE *v3; // rbx\n  unsigned int v4; // eax\n  __int64 v5; // rdx\n  int v6; // ecx\n  int v7; // r8d\n  int v8; // r9d\n  int v10; // r12d\n  int *v11; // rax\n  int v12; // ebp\n  int *v13; // rbx\n  int *v14; // rax\n  FILE *v15; // rdi\n  int v16; // r12d\n  int *v17; // rbp\n\n  v2 = fopen(a1, a2);\n  v3 = v2;\n  if ( v2 )\n  {\n    v4 = fileno(v2);\n    if ( v4 <= 2 )\n    {\n      v10 = sub_4143D0(v4, (__int64)a2, v5, v6, v7, v8);\n      if ( v10 < 0 )\n      {\n        v14 = __errno_location();\n        v15 = v3;\n        v3 = 0LL;\n        v16 = *v14;\n        v17 = v14;\n        sub_4143E0(v15);\n        *v17 = v16;\n      }\n      else if ( sub_4143E0(v3) || (v3 = fdopen(v10, a2)) == 0LL )\n      {\n        v11 = __errno_location();\n        v12 = *v11;\n        v13 = v11;\n        close(v10);\n        *v13 = v12;\n        return 0LL;\n      }\n    }\n  }\n  return v3;\n}\n"
        },
        {
            "funcName": "sub_416030",
            "funcStartAddr": "0x416030",
            "funcEndAddr": "0x416249",
            "decompiledFuncCode": "__int64 __fastcall sub_416030(int *a1, unsigned __int64 *a2)\n{\n  unsigned __int64 v2; // rax\n  unsigned __int64 v3; // rdx\n  unsigned int v4; // ecx\n  _QWORD *v5; // r10\n  unsigned int v7; // ecx\n  _DWORD *v8; // r10\n  unsigned int v9; // ecx\n  _DWORD *v10; // r10\n  unsigned int v11; // ecx\n  _DWORD *v12; // r10\n  unsigned int v13; // ecx\n  _QWORD *v14; // r10\n  long double *v15; // rcx\n  unsigned int v16; // ecx\n  void **v17; // r10\n  void *v18; // rcx\n  unsigned int v19; // ecx\n  const char **v20; // r10\n  const char *v21; // rcx\n\n  v2 = a2[1];\n  if ( *a2 )\n  {\n    v3 = 0LL;\n    while ( 2 )\n    {\n      switch ( *(_DWORD *)v2 )\n      {\n        case 1:\n        case 2:\n          v11 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v12 = (_DWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v12 + 2;\n          }\n          else\n          {\n            v12 = (_DWORD *)(*((_QWORD *)a1 + 2) + v11);\n            *a1 = v11 + 8;\n          }\n          *(_BYTE *)(v2 + 16) = *v12;\n          goto LABEL_7;\n        case 3:\n        case 4:\n          v9 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v10 = (_DWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v10 + 2;\n          }\n          else\n          {\n            v10 = (_DWORD *)(*((_QWORD *)a1 + 2) + v9);\n            *a1 = v9 + 8;\n          }\n          *(_WORD *)(v2 + 16) = *v10;\n          goto LABEL_7;\n        case 5:\n        case 6:\n        case 0xD:\n        case 0xE:\n          v7 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v8 = (_DWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v8 + 2;\n          }\n          else\n          {\n            v8 = (_DWORD *)(*((_QWORD *)a1 + 2) + v7);\n            *a1 = v7 + 8;\n          }\n          *(_DWORD *)(v2 + 16) = *v8;\n          goto LABEL_7;\n        case 7:\n        case 8:\n        case 9:\n        case 0xA:\n        case 0x11:\n        case 0x12:\n        case 0x13:\n        case 0x14:\n        case 0x15:\n        case 0x16:\n          v4 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v5 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v5 + 1;\n          }\n          else\n          {\n            v5 = (_QWORD *)(*((_QWORD *)a1 + 2) + v4);\n            *a1 = v4 + 8;\n          }\n          *(_QWORD *)(v2 + 16) = *v5;\n          goto LABEL_7;\n        case 0xB:\n          v13 = a1[1];\n          if ( v13 > 0xAF )\n          {\n            v14 = (_QWORD *)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v14 + 1;\n          }\n          else\n          {\n            v14 = (_QWORD *)(*((_QWORD *)a1 + 2) + v13);\n            a1[1] = v13 + 16;\n          }\n          *(_QWORD *)(v2 + 16) = *v14;\n          goto LABEL_7;\n        case 0xC:\n          v15 = (long double *)((*((_QWORD *)a1 + 1) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);\n          *((_QWORD *)a1 + 1) = v15 + 1;\n          *(long double *)(v2 + 16) = *v15;\n          goto LABEL_7;\n        case 0xF:\n          v19 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v20 = (const char **)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v20 + 1;\n          }\n          else\n          {\n            v20 = (const char **)(*((_QWORD *)a1 + 2) + v19);\n            *a1 = v19 + 8;\n          }\n          v21 = *v20;\n          if ( !*v20 )\n            v21 = \"(NULL)\";\n          *(_QWORD *)(v2 + 16) = v21;\n          goto LABEL_7;\n        case 0x10:\n          v16 = *a1;\n          if ( (unsigned int)*a1 > 0x2F )\n          {\n            v17 = (void **)*((_QWORD *)a1 + 1);\n            *((_QWORD *)a1 + 1) = v17 + 1;\n          }\n          else\n          {\n            v17 = (void **)(*((_QWORD *)a1 + 2) + v16);\n            *a1 = v16 + 8;\n          }\n          v18 = *v17;\n          if ( !*v17 )\n            v18 = &unk_41ACE0;\n          *(_QWORD *)(v2 + 16) = v18;\nLABEL_7:\n          ++v3;\n          v2 += 32LL;\n          if ( *a2 <= v3 )\n            return 0LL;\n          continue;\n        default:\n          return 0xFFFFFFFFLL;\n      }\n    }\n  }\n  return 0LL;\n}\n"
        },
        {
            "funcName": "sub_416250",
            "funcStartAddr": "0x416250",
            "funcEndAddr": "0x416f59",
            "decompiledFuncCode": "__int64 __fastcall sub_416250(char *a1, _QWORD *a2, unsigned __int64 *a3)\n{\n  _QWORD *v3; // rcx\n  _QWORD *v4; // r8\n  unsigned __int64 v6; // r9\n  __int64 v7; // r11\n  __int64 v8; // r13\n  char *v9; // rbp\n  __int64 result; // rax\n  unsigned __int64 v11; // r14\n  char *v12; // r12\n  char v13; // bl\n  char *v14; // rcx\n  int v15; // eax\n  __int64 v16; // rax\n  int v17; // eax\n  unsigned __int64 v18; // rbx\n  _DWORD *v19; // r13\n  unsigned __int64 v20; // rdx\n  _DWORD *v21; // rax\n  bool v22; // zf\n  __int64 v23; // rax\n  _BYTE *v24; // rcx\n  int v25; // eax\n  unsigned __int64 v26; // rbx\n  unsigned __int64 v27; // rdx\n  _DWORD *v28; // rax\n  int v29; // ecx\n  unsigned __int64 v30; // rax\n  int *v31; // rax\n  __int64 v32; // rax\n  __int64 v33; // rbx\n  _QWORD *v34; // r12\n  _QWORD *v35; // rax\n  _BYTE *v36; // rax\n  unsigned __int64 v37; // rax\n  unsigned __int64 v38; // r9\n  _DWORD *v39; // rax\n  _DWORD *v40; // rsi\n  _QWORD *v41; // rax\n  _QWORD *v42; // rax\n  _BYTE *v43; // rdx\n  unsigned __int64 v44; // rsi\n  __int64 v45; // rdx\n  __int64 v46; // rax\n  char *v47; // rdi\n  bool v48; // cf\n  unsigned __int64 v49; // rdx\n  unsigned __int8 v50; // bl\n  _QWORD *v51; // rdi\n  unsigned __int64 v52; // r9\n  _DWORD *v53; // rax\n  char *i; // rcx\n  char *v55; // rdx\n  unsigned __int64 v56; // rax\n  const void *v57; // rsi\n  _QWORD *v58; // rdi\n  unsigned __int64 v59; // r9\n  _DWORD *v60; // rax\n  _DWORD *v61; // rax\n  unsigned __int64 v62; // rax\n  __int64 v63; // rsi\n  __int64 v64; // rdx\n  char *v65; // rcx\n  unsigned __int64 v66; // rdx\n  unsigned __int8 v67; // si\n  _BYTE *v68; // rdx\n  unsigned __int64 v69; // rsi\n  __int64 v70; // rdx\n  __int64 v71; // rax\n  _BYTE *v72; // rdi\n  unsigned __int64 v73; // rdx\n  unsigned __int8 v74; // bl\n  _DWORD *v75; // rax\n  _DWORD *src; // [rsp+8h] [rbp-80h]\n  _QWORD *srca; // [rsp+8h] [rbp-80h]\n  _QWORD *srcb; // [rsp+8h] [rbp-80h]\n  unsigned __int64 v79; // [rsp+10h] [rbp-78h]\n  unsigned __int64 v80; // [rsp+18h] [rbp-70h]\n  unsigned __int64 v81; // [rsp+20h] [rbp-68h]\n  _QWORD *v82; // [rsp+28h] [rbp-60h]\n  unsigned __int64 v83; // [rsp+30h] [rbp-58h]\n  char *v84; // [rsp+30h] [rbp-58h]\n  unsigned __int64 v85; // [rsp+30h] [rbp-58h]\n  int v86; // [rsp+30h] [rbp-58h]\n  int v87; // [rsp+30h] [rbp-58h]\n  _BYTE *v88; // [rsp+30h] [rbp-58h]\n  char *v89; // [rsp+30h] [rbp-58h]\n  _BYTE *v90; // [rsp+30h] [rbp-58h]\n  _QWORD *v91; // [rsp+38h] [rbp-50h]\n  __int64 v92; // [rsp+38h] [rbp-50h]\n  _QWORD *v93; // [rsp+38h] [rbp-50h]\n  __int64 v94; // [rsp+38h] [rbp-50h]\n  __int64 v95; // [rsp+38h] [rbp-50h]\n  __int64 v96; // [rsp+38h] [rbp-50h]\n  __int64 v97; // [rsp+38h] [rbp-50h]\n  __int64 v98; // [rsp+38h] [rbp-50h]\n  unsigned __int64 v99; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v100; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v101; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v102; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v103; // [rsp+40h] [rbp-48h]\n  unsigned __int64 v104; // [rsp+40h] [rbp-48h]\n  _QWORD *v105; // [rsp+48h] [rbp-40h]\n  _QWORD *v106; // [rsp+48h] [rbp-40h]\n  _QWORD *v107; // [rsp+48h] [rbp-40h]\n  _QWORD *v108; // [rsp+48h] [rbp-40h]\n  _QWORD *v109; // [rsp+48h] [rbp-40h]\n  _QWORD *v110; // [rsp+48h] [rbp-40h]\n\n  v3 = a2 + 4;\n  v4 = a2;\n  v6 = 7LL;\n  v7 = 7LL;\n  v8 = 0LL;\n  *a2 = 0LL;\n  a2[1] = a2 + 4;\n  v82 = a2 + 4;\n  *a3 = 0LL;\n  src = a3 + 2;\n  a3[1] = (unsigned __int64)(a3 + 2);\n  v80 = 0LL;\n  v79 = 0LL;\n  v81 = 0LL;\n  while ( 1 )\n  {\n    if ( !*a1 )\n    {\n      v3[11 * v8] = a1;\n      v4[2] = v79;\n      v4[3] = v80;\n      return 0LL;\n    }\n    v9 = a1 + 1;\n    if ( *a1 == 37 )\n      break;\nLABEL_3:\n    a1 = v9;\n  }\n  v11 = -1LL;\n  v12 = (char *)&v3[11 * v8];\n  *(_QWORD *)v12 = a1;\n  *((_DWORD *)v12 + 4) = 0;\n  *((_QWORD *)v12 + 3) = 0LL;\n  *((_QWORD *)v12 + 4) = 0LL;\n  *((_QWORD *)v12 + 5) = -1LL;\n  *((_QWORD *)v12 + 6) = 0LL;\n  *((_QWORD *)v12 + 7) = 0LL;\n  *((_QWORD *)v12 + 8) = -1LL;\n  *((_QWORD *)v12 + 10) = -1LL;\n  v13 = a1[1];\n  if ( (unsigned __int8)(v13 - 48) > 9u )\n    goto LABEL_16;\n  v36 = a1 + 1;\n  do\n    ++v36;\n  while ( (unsigned __int8)(*v36 - 48) <= 9u );\n  if ( *v36 != 36 )\n  {\n    v11 = -1LL;\n    goto LABEL_16;\n  }\n  v62 = 0LL;\n  do\n  {\n    v63 = -1LL;\n    v64 = v13 - 48;\n    if ( v62 <= 0x1999999999999999LL )\n      v63 = 10 * v62;\n    v65 = v9;\n    while ( 1 )\n    {\n      v13 = v9[1];\n      v48 = __CFADD__(v63, v64);\n      v66 = v63 + v64;\n      v62 = v66;\n      ++v9;\n      v67 = v13 - 48;\n      if ( !v48 )\n        break;\n      if ( v67 > 9u )\n        goto LABEL_130;\n      v63 = -1LL;\n      v65 = v9;\n      v64 = v13 - 48;\n    }\n  }\n  while ( v67 <= 9u );\n  v11 = v66 - 1;\n  if ( v66 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n    goto LABEL_130;\n  v9 = v65 + 2;\n  v13 = v65[2];\n  while ( 1 )\n  {\nLABEL_16:\n    v14 = v9 + 1;\n    switch ( v13 )\n    {\n      case '\\'':\n        *((_DWORD *)v12 + 4) |= 1u;\n        goto LABEL_15;\n      case '-':\n        *((_DWORD *)v12 + 4) |= 2u;\n        goto LABEL_15;\n      case '+':\n        *((_DWORD *)v12 + 4) |= 4u;\n        goto LABEL_15;\n      case ' ':\n        *((_DWORD *)v12 + 4) |= 8u;\n        goto LABEL_15;\n      case '#':\n        *((_DWORD *)v12 + 4) |= 0x10u;\n        goto LABEL_15;\n    }\n    if ( v13 != 48 )\n      break;\n    *((_DWORD *)v12 + 4) |= 0x20u;\nLABEL_15:\n    v13 = *v14;\n    ++v9;\n  }\n  if ( v13 == 73 )\n  {\n    *((_DWORD *)v12 + 4) |= 0x40u;\n    goto LABEL_15;\n  }\n  if ( v13 == 42 )\n  {\n    v16 = 1LL;\n    *((_QWORD *)v12 + 3) = v9;\n    *((_QWORD *)v12 + 4) = v14;\n    if ( v79 )\n      v16 = v79;\n    v79 = v16;\n    v17 = v9[1];\n    if ( (unsigned __int8)(v9[1] - 48) > 9u )\n      goto LABEL_39;\n    v43 = v9 + 1;\n    do\n      ++v43;\n    while ( (unsigned __int8)(*v43 - 48) <= 9u );\n    if ( *v43 == 36 )\n    {\n      v44 = 0LL;\n      do\n      {\n        v45 = -1LL;\n        v46 = v17 - 48;\n        if ( v44 <= 0x1999999999999999LL )\n          v45 = 10 * v44;\n        v47 = v14;\n        while ( 1 )\n        {\n          v48 = __CFADD__(v46, v45);\n          v49 = v46 + v45;\n          v17 = v14[1];\n          v44 = v49;\n          ++v14;\n          v50 = v17 - 48;\n          if ( !v48 )\n            break;\n          if ( v50 > 9u )\n            goto LABEL_130;\n          v45 = -1LL;\n          v47 = v14;\n          v46 = v17 - 48;\n        }\n      }\n      while ( v50 <= 9u );\n      v18 = v49 - 1;\n      if ( v49 - 1 > 0xFFFFFFFFFFFFFFFDLL )\n        goto LABEL_130;\n      *((_QWORD *)v12 + 5) = v18;\n      v14 = v47 + 2;\n    }\n    else\n    {\nLABEL_39:\n      v18 = *((_QWORD *)v12 + 5);\n      if ( v18 == -1LL )\n      {\n        *((_QWORD *)v12 + 5) = v81;\n        if ( v81 == -1LL )\n          goto LABEL_130;\n        v18 = v81++;\n      }\n    }\n    v19 = (_DWORD *)a3[1];\n    if ( v6 > v18 )\n    {\n      v20 = *a3;\nLABEL_42:\n      if ( v20 <= v18 )\n      {\n        do\n        {\n          ++v20;\n          v19[8 * v20 - 8] = 0;\n        }\n        while ( v20 <= v18 );\n        *a3 = v20;\n      }\n      v21 = &v19[8 * v18];\n      if ( *v21 )\n      {\n        if ( *v21 == 5 )\n        {\n          v13 = *v14;\n          v9 = v14++;\n          goto LABEL_25;\n        }\n        goto LABEL_131;\n      }\n      *v21 = 5;\n      v13 = *v14;\n      v9 = v14++;\n      if ( v13 != 46 )\n        goto LABEL_26;\nLABEL_47:\n      v22 = v9[1] == 42;\n      *((_QWORD *)v12 + 6) = v9;\n      if ( !v22 )\n      {\n        if ( (unsigned __int8)(v9[1] - 48) > 9u )\n        {\n          v9 = v14;\n          v37 = 1LL;\n        }\n        else\n        {\n          do\n            ++v14;\n          while ( (unsigned __int8)(*v14 - 48) <= 9u );\n          v37 = v14 - v9;\n          v9 = v14;\n        }\n        *((_QWORD *)v12 + 7) = v14;\n        v13 = *v14;\n        if ( v80 >= v37 )\n          v37 = v80;\n        v80 = v37;\n        goto LABEL_26;\n      }\n      v23 = 2LL;\n      v24 = v9 + 2;\n      *((_QWORD *)v12 + 7) = v9 + 2;\n      if ( v80 >= 2 )\n        v23 = v80;\n      v80 = v23;\n      v25 = v9[2];\n      if ( (unsigned __int8)(v9[2] - 48) > 9u )\n        goto LABEL_51;\n      v68 = v9 + 2;\n      do\n        ++v68;\n      while ( (unsigned __int8)(*v68 - 48) <= 9u );\n      if ( *v68 == 36 )\n      {\n        v69 = 0LL;\n        do\n        {\n          v70 = -1LL;\n          v71 = v25 - 48;\n          if ( v69 <= 0x1999999999999999LL )\n            v70 = 10 * v69;\n          v72 = v24;\n          while ( 1 )\n          {\n            v48 = __CFADD__(v71, v70);\n            v73 = v71 + v70;\n            v25 = (char)*++v24;\n            v69 = v73;\n            v74 = v25 - 48;\n            if ( !v48 )\n              break;\n            if ( v74 > 9u )\n              goto LABEL_130;\n            v70 = -1LL;\n            v72 = v24;\n            v71 = v25 - 48;\n          }\n        }\n        while ( v74 <= 9u );\n        v26 = v73 - 1;\n        if ( v73 - 1 <= 0xFFFFFFFFFFFFFFFDLL )\n        {\n          *((_QWORD *)v12 + 8) = v26;\n          v24 = v72 + 2;\nLABEL_52:\n          v19 = (_DWORD *)a3[1];\n          if ( v6 > v26 )\n          {\n            v27 = *a3;\n            goto LABEL_54;\n          }\n          v59 = 2 * v6;\n          if ( v59 <= v26 )\n            v59 = v26 + 1;\n          if ( v59 <= 0x7FFFFFFFFFFFFFFLL )\n          {\n            v108 = v4;\n            v102 = v59;\n            v96 = v7;\n            v88 = v24;\n            if ( src == v19 )\n            {\n              v75 = malloc(32 * v59);\n              v24 = v88;\n              v7 = v96;\n              v6 = v102;\n              v4 = v108;\n              if ( !v75 )\n                goto LABEL_162;\n              v27 = *a3;\n              v40 = src;\n              v19 = v75;\n            }\n            else\n            {\n              v60 = realloc(v19, 32 * v59);\n              v40 = (_DWORD *)a3[1];\n              v24 = v88;\n              v19 = v60;\n              v7 = v96;\n              v6 = v102;\n              v4 = v108;\n              if ( !v60 )\n                goto LABEL_160;\n              v27 = *a3;\n              if ( src != v40 )\n                goto LABEL_171;\n            }\n            v110 = v4;\n            v104 = v6;\n            v98 = v7;\n            v90 = v24;\n            memcpy(v19, v40, 32 * v27);\n            v27 = *a3;\n            v4 = v110;\n            v6 = v104;\n            v7 = v98;\n            v24 = v90;\nLABEL_171:\n            a3[1] = (unsigned __int64)v19;\nLABEL_54:\n            if ( v27 <= v26 )\n            {\n              do\n              {\n                ++v27;\n                v19[8 * v27 - 8] = 0;\n              }\n              while ( v27 <= v26 );\n              *a3 = v27;\n            }\n            v28 = &v19[8 * v26];\n            if ( !*v28 )\n            {\n              *v28 = 5;\n              v9 = v24;\n              v13 = *v24;\n              goto LABEL_26;\n            }\n            if ( *v28 == 5 )\n            {\n              v13 = *v24;\n              v9 = v24;\n              goto LABEL_26;\n            }\n            goto LABEL_131;\n          }\nLABEL_159:\n          v40 = v19;\n          goto LABEL_160;\n        }\n      }\n      else\n      {\nLABEL_51:\n        v26 = *((_QWORD *)v12 + 8);\n        if ( v26 != -1LL )\n          goto LABEL_52;\n        *((_QWORD *)v12 + 8) = v81;\n        if ( v81 != -1LL )\n        {\n          v26 = v81++;\n          goto LABEL_52;\n        }\n      }\nLABEL_130:\n      v19 = (_DWORD *)a3[1];\nLABEL_131:\n      if ( src != v19 )\n      {\n        srca = v4;\n        free(v19);\n        v4 = srca;\n      }\n      v51 = (_QWORD *)v4[1];\n      if ( v82 != v51 )\n        free(v51);\n      *__errno_location() = 22;\n      return 0xFFFFFFFFLL;\n    }\n    v38 = 2 * v6;\n    if ( v38 <= v18 )\n      v38 = v18 + 1;\n    if ( v38 > 0x7FFFFFFFFFFFFFFLL )\n      goto LABEL_159;\n    v105 = v4;\n    v99 = v38;\n    v92 = v7;\n    v84 = v14;\n    if ( src == v19 )\n    {\n      v61 = malloc(32 * v38);\n      v14 = v84;\n      v7 = v92;\n      v6 = v99;\n      v4 = v105;\n      if ( !v61 )\n        goto LABEL_162;\n      v20 = *a3;\n      v40 = src;\n      v19 = v61;\n    }\n    else\n    {\n      v39 = realloc(v19, 32 * v38);\n      v40 = (_DWORD *)a3[1];\n      v14 = v84;\n      v19 = v39;\n      v7 = v92;\n      v6 = v99;\n      v4 = v105;\n      if ( !v39 )\n        goto LABEL_160;\n      v20 = *a3;\n      if ( src != v40 )\n        goto LABEL_93;\n    }\n    v109 = v4;\n    v103 = v6;\n    v97 = v7;\n    v89 = v14;\n    memcpy(v19, v40, 32 * v20);\n    v20 = *a3;\n    v4 = v109;\n    v6 = v103;\n    v7 = v97;\n    v14 = v89;\nLABEL_93:\n    a3[1] = (unsigned __int64)v19;\n    goto LABEL_42;\n  }\n  if ( (unsigned __int8)(v13 - 48) <= 9u )\n  {\n    *((_QWORD *)v12 + 3) = v9;\n    if ( (unsigned __int8)(*v9 - 48) <= 9u )\n    {\n      for ( i = v9; ; ++i )\n      {\n        v55 = i + 1;\n        if ( (unsigned __int8)(i[1] - 48) > 9u )\n          break;\n      }\n      v14 = i + 2;\n      v56 = v55 - v9;\n      v9 = v55;\n      if ( v79 >= v56 )\n        v56 = v79;\n      v79 = v56;\n    }\n    *((_QWORD *)v12 + 4) = v9;\n    v13 = *v9;\n  }\nLABEL_25:\n  if ( v13 == 46 )\n    goto LABEL_47;\nLABEL_26:\n  v15 = 0;\n  while ( 2 )\n  {\n    ++v9;\n    if ( v13 == 104 )\n    {\n      v15 |= 1 << (v15 & 1);\n      goto LABEL_33;\n    }\n    if ( v13 == 76 )\n    {\n      v15 |= 4u;\n      goto LABEL_33;\n    }\n    if ( v13 == 108 || v13 == 106 || (v13 & 0xDF) == 90 || v13 == 116 )\n    {\n      v15 += 8;\nLABEL_33:\n      v13 = *v9;\n      continue;\n    }\n    break;\n  }\n  switch ( v13 )\n  {\n    case '%':\n      goto LABEL_70;\n    case 'A':\n    case 'E':\n    case 'F':\n    case 'G':\n    case 'a':\n    case 'e':\n    case 'f':\n    case 'g':\n      v29 = 12;\n      if ( v15 <= 15 )\n        v29 = ((v15 & 4) != 0) + 11;\n      goto LABEL_62;\n    case 'C':\n      v29 = 14;\n      v13 = 99;\n      goto LABEL_62;\n    case 'S':\n      v29 = 16;\n      v13 = 115;\n      goto LABEL_62;\n    case 'X':\n    case 'o':\n    case 'u':\n    case 'x':\n      v29 = 10;\n      if ( v15 <= 15 && (v15 & 4) == 0 )\n      {\n        v29 = 8;\n        if ( v15 <= 7 )\n        {\n          v29 = 2;\n          if ( (v15 & 2) == 0 )\n            v29 = (v15 & 1) == 0 ? 6 : 4;\n        }\n      }\n      goto LABEL_62;\n    case 'c':\n      v29 = (v15 > 7) + 13;\n      goto LABEL_62;\n    case 'd':\n    case 'i':\n      v29 = 9;\n      if ( v15 <= 15 && (v15 & 4) == 0 )\n      {\n        v29 = 7;\n        if ( v15 <= 7 )\n        {\n          v29 = 1;\n          if ( (v15 & 2) == 0 )\n            v29 = (v15 & 1) == 0 ? 5 : 3;\n        }\n      }\n      goto LABEL_62;\n    case 'n':\n      v29 = 22;\n      if ( v15 <= 15 && (v15 & 4) == 0 )\n      {\n        v29 = 21;\n        if ( v15 <= 7 )\n        {\n          v29 = 18;\n          if ( (v15 & 2) == 0 )\n            v29 = ((v15 & 1) == 0) + 19;\n        }\n      }\n      goto LABEL_62;\n    case 'p':\n      v29 = 17;\n      goto LABEL_62;\n    case 's':\n      v29 = (v15 > 7) + 15;\nLABEL_62:\n      if ( v11 == -1LL )\n      {\n        *((_QWORD *)v12 + 10) = v81;\n        if ( v81 == -1LL )\n          goto LABEL_130;\n        v11 = v81++;\n      }\n      else\n      {\n        *((_QWORD *)v12 + 10) = v11;\n      }\n      v19 = (_DWORD *)a3[1];\n      if ( v6 > v11 )\n        goto LABEL_65;\n      v52 = 2 * v6;\n      if ( v52 <= v11 )\n        v52 = v11 + 1;\n      if ( v52 > 0x7FFFFFFFFFFFFFFLL )\n        goto LABEL_159;\n      v106 = v4;\n      v100 = v52;\n      v94 = v7;\n      v86 = v29;\n      if ( src == v19 )\n      {\n        v53 = malloc(32 * v52);\n        v29 = v86;\n        v7 = v94;\n        v6 = v100;\n        v4 = v106;\n        if ( !v53 )\n          goto LABEL_162;\n        goto LABEL_158;\n      }\n      v53 = realloc(v19, 32 * v52);\n      v29 = v86;\n      v7 = v94;\n      v19 = v53;\n      v6 = v100;\n      v4 = v106;\n      if ( !v53 )\n        goto LABEL_210;\n      if ( src == (_DWORD *)a3[1] )\n      {\n        v19 = src;\nLABEL_158:\n        v57 = v19;\n        v107 = v4;\n        v101 = v6;\n        v19 = v53;\n        v95 = v7;\n        v87 = v29;\n        memcpy(v53, v57, 32 * *a3);\n        v4 = v107;\n        v29 = v87;\n        v6 = v101;\n        v7 = v95;\n      }\n      a3[1] = (unsigned __int64)v19;\nLABEL_65:\n      v30 = *a3;\n      if ( *a3 <= v11 )\n      {\n        do\n        {\n          ++v30;\n          v19[8 * v30 - 8] = 0;\n        }\n        while ( v30 <= v11 );\n        *a3 = v30;\n      }\n      v31 = &v19[8 * v11];\n      if ( *v31 )\n      {\n        if ( *v31 != v29 )\n          goto LABEL_131;\n      }\n      else\n      {\n        *v31 = v29;\n      }\nLABEL_70:\n      v12[72] = v13;\n      v32 = *v4;\n      *((_QWORD *)v12 + 1) = v9;\n      v8 = v32 + 1;\n      *v4 = v32 + 1;\n      if ( v7 > (unsigned __int64)(v32 + 1) )\n      {\n        v3 = (_QWORD *)v4[1];\n        goto LABEL_3;\n      }\n      if ( v7 >= 0 )\n      {\n        v33 = 2 * v7;\n        if ( (unsigned __int64)(2 * v7) <= 0x2E8BA2E8BA2E8BALL )\n        {\n          v34 = (_QWORD *)v4[1];\n          v91 = v4;\n          v83 = v6;\n          if ( v82 == v34 )\n          {\n            v41 = malloc(176 * v7);\n            v6 = v83;\n            v4 = v91;\n            v3 = v41;\n            if ( !v41 )\n            {\n              v40 = (_DWORD *)a3[1];\n              if ( src != v40 )\n                goto LABEL_161;\n              goto LABEL_164;\n            }\n          }\n          else\n          {\n            v35 = realloc(v34, 176 * v7);\n            v6 = v83;\n            v4 = v91;\n            v3 = v35;\n            if ( !v35 )\n              goto LABEL_210;\n            v34 = (_QWORD *)v91[1];\n            v8 = *v91;\n            if ( v82 != v34 )\n              goto LABEL_77;\n          }\n          v93 = v4;\n          v85 = v6;\n          v42 = memcpy(v3, v34, 88 * v8);\n          v4 = v93;\n          v6 = v85;\n          v3 = v42;\n          v8 = *v93;\nLABEL_77:\n          v4[1] = v3;\n          v7 = v33;\n          goto LABEL_3;\n        }\n      }\nLABEL_210:\n      v40 = (_DWORD *)a3[1];\nLABEL_160:\n      if ( src != v40 )\n      {\nLABEL_161:\n        srcb = v4;\n        free(v40);\n        v4 = srcb;\n      }\nLABEL_162:\n      v58 = (_QWORD *)v4[1];\n      if ( v82 != v58 )\n        free(v58);\nLABEL_164:\n      *__errno_location() = 12;\n      result = 0xFFFFFFFFLL;\n      break;\n    default:\n      goto LABEL_130;\n  }\n  return result;\n}\n"
        },
        {
            "funcName": "sub_416FD0",
            "funcStartAddr": "0x416fd0",
            "funcEndAddr": "0x416fe8",
            "decompiledFuncCode": "int __fastcall sub_416FD0(void (__fastcall *a1)(void *))\n{\n  void *v1; // rdx\n\n  v1 = 0LL;\n  if ( &qword_61F428 )\n    v1 = (void *)qword_61F428;\n  return __cxa_atexit(a1, 0LL, v1);\n}\n"
        },
        {
            "funcName": "sub_416FE8",
            "funcStartAddr": "0x416fe8",
            "funcEndAddr": "0x417008",
            "decompiledFuncCode": "__int64 __fastcall sub_416FE8(__int64 a1, __int64 a2, __int64 a3)\n{\n  void (**i)(void); // rbx\n\n  for ( i = (void (**)(void))&qword_61EE30; *i != (void (*)(void))-1LL; --i )\n    (*i)();\n  return a3;\n}\n"
        }
    ],
    "funcCount": 229
}