{
    "funcCount": 109,
    "funcInfo": [
        {
            "funcStartAddr": "0x401b45",
            "funcEndAddr": "0x401b4a",
            "decompiledFuncCode": "\nvoid FUN_00401b45(void)\n\n{\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n",
            "funcName": "FUN_00401b45"
        },
        {
            "funcStartAddr": "0x401b4a",
            "funcEndAddr": "0x401b4f",
            "decompiledFuncCode": "\nvoid FUN_00401b4a(void)\n\n{\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n",
            "funcName": "FUN_00401b4a"
        },
        {
            "funcStartAddr": "0x401b4f",
            "funcEndAddr": "0x401b54",
            "decompiledFuncCode": "\nvoid FUN_00401b4f(void)\n\n{\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n",
            "funcName": "FUN_00401b4f"
        },
        {
            "funcStartAddr": "0x401b54",
            "funcEndAddr": "0x401b59",
            "decompiledFuncCode": "\nvoid FUN_00401b54(void)\n\n{\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n",
            "funcName": "FUN_00401b54"
        },
        {
            "funcStartAddr": "0x401b60",
            "funcEndAddr": "0x402893",
            "decompiledFuncCode": "\nundefined8 FUN_00401b60(int param_1,undefined8 *param_2)\n\n{\n  char cVar1;\n  int *piVar2;\n  int iVar3;\n  int iVar4;\n  uint uVar5;\n  char *pcVar6;\n  size_t sVar7;\n  long lVar8;\n  __ssize_t _Var9;\n  int *piVar10;\n  ushort **ppuVar11;\n  undefined8 uVar12;\n  undefined8 uVar13;\n  char cVar14;\n  long lVar15;\n  uint uVar16;\n  char *pcVar17;\n  int *piVar18;\n  undefined *puVar19;\n  long lVar20;\n  char *pcVar21;\n  bool bVar22;\n  undefined auVar23 [16];\n  int *local_58;\n  int *local_50;\n  char *local_48;\n  int *local_40 [2];\n  \n  FUN_00405970(*param_2);\n  pcVar6 = setlocale(6,\"\");\n  bindtextdomain(\"coreutils\",\n                 \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\"\n                );\n  textdomain(\"coreutils\");\n  DAT_00610340 = nl_langinfo(0x10000);\n  if ((DAT_00610340 == (char *)0x0) || (*DAT_00610340 == '\\0')) {\n    DAT_00610340 = \".\";\n  }\n  sVar7 = strlen(DAT_00610340);\n  DAT_0061033c = (undefined4)sVar7;\n  FUN_00409fa0(FUN_00405490);\n  iVar4 = DAT_00610254;\nLAB_00401bf0:\n  DAT_00610254 = iVar4;\n  iVar3 = FUN_004096e0(param_1,param_2,&DAT_0040a1bf,&PTR_s_from_0040bd80,0);\n  if (iVar3 == -1) {\n    if ((DAT_00610370 != (char *)0x0) && (DAT_00610398 != 0)) goto LAB_00402745;\n    if ((pcVar6 == (char *)0x0) && (DAT_00610348 != '\\0')) {\n      uVar12 = dcgettext(0,\"failed to set locale\",5);\n      error(0,0,uVar12);\n    }\n    if ((DAT_00610348 == '\\0') || ((DAT_006103b0 | DAT_006103ac) != 0)) {\nLAB_00402065:\n      pcVar6 = DAT_00610370;\n      if (DAT_00610370 == (char *)0x0) goto LAB_004021a2;\n    }\n    else if (DAT_00610398 == 0) {\n      if (DAT_00610380 == (int *)0x0) {\n        if (DAT_00610370 == (char *)0x0) {\n          uVar12 = dcgettext(0,\"no conversion option specified\",5);\n          error(0,0,uVar12);\n          goto LAB_00402065;\n        }\n      }\n      else if (DAT_00610370 == (char *)0x0) goto LAB_004021af;\n    }\n    else if (DAT_00610370 == (char *)0x0) goto LAB_00402370;\n    pcVar6 = DAT_00610370;\n    local_40[0] = (int *)0x0;\n    lVar20 = 0;\n    lVar8 = 0;\n    goto LAB_0040209c;\n  }\n  if (iVar3 == 0x84) {\nLAB_00401f60:\n    lVar8 = FUN_004053b0(\"--round\",DAT_00610570,&PTR_DAT_0040c060,&DAT_0040c030);\n    DAT_00610278 = *(undefined4 *)(&DAT_0040c030 + lVar8 * 4);\n    iVar4 = DAT_00610254;\n    goto LAB_00401bf0;\n  }\n  iVar4 = DAT_00610254;\n  if (iVar3 < 0x85) {\n    if (iVar3 == 0x7a) {\n      DAT_00610250 = 0;\n      goto LAB_00401bf0;\n    }\n    if (iVar3 < 0x7b) {\n      if (iVar3 == -0x82) {\n        FUN_00404360(0);\n        goto LAB_004026e5;\n      }\n      if (iVar3 != 100) {\n        if (iVar3 == -0x83) {\n          FUN_00407a10(stdout,\"numfmt\",\"GNU coreutils\",PTR_DAT_00610280,\"Assaf Gordon\",0);\n                    /* WARNING: Subroutine does not return */\n          exit(0);\n        }\n        goto LAB_00401e73;\n      }\n      cVar14 = *DAT_00610570;\n      iVar4 = (int)cVar14;\n      if ((cVar14 == '\\0') || (DAT_00610570[1] == '\\0')) goto LAB_00401bf0;\n      goto LAB_0040289f;\n    }\n    if (iVar3 == 0x81) {\n      DAT_00610270 = FUN_004029b0(DAT_00610570);\n      iVar4 = DAT_00610254;\n      goto LAB_00401bf0;\n    }\n    if (0x81 < iVar3) {\n      if (iVar3 == 0x82) {\n        lVar8 = FUN_004053b0(&DAT_0040a1ca,DAT_00610570,&PTR_DAT_0040c0a0,&DAT_0040c090);\n        DAT_006103ac = *(uint *)(&DAT_0040c090 + lVar8 * 4);\n        iVar4 = DAT_00610254;\n      }\n      else {\n        if (iVar3 != 0x83) goto LAB_00401e73;\n        DAT_00610268 = FUN_004029b0(DAT_00610570);\n        iVar4 = DAT_00610254;\n      }\n      goto LAB_00401bf0;\n    }\n    if (iVar3 == 0x80) {\n      lVar8 = FUN_004053b0(\"--from\",DAT_00610570,&PTR_DAT_0040c100,&DAT_0040c0d0);\n      DAT_006103b0 = *(uint *)(&DAT_0040c0d0 + lVar8 * 4);\n      iVar4 = DAT_00610254;\n      goto LAB_00401bf0;\n    }\nLAB_00401e73:\n    FUN_00404360(1);\n  }\n  else {\n    if (iVar3 == 0x89) goto LAB_00401e87;\n    if (iVar3 < 0x8a) {\n      if (iVar3 == 0x86) {\n        DAT_00610398 = 1;\n        goto LAB_00401bf0;\n      }\n      if (iVar3 < 0x86) {\n        DAT_006103a0 = DAT_00610570;\n        goto LAB_00401bf0;\n      }\n      if (iVar3 == 0x87) {\n        iVar4 = FUN_00407e00(DAT_00610570,0,10,&DAT_00610380);\n        if ((iVar4 != 0) || (DAT_00610380 == (int *)0x0)) goto LAB_00402849;\n        iVar4 = DAT_00610254;\n        if ((long)DAT_00610380 < 0) {\n          DAT_00610258 = 0;\n          DAT_00610380 = (int *)-(long)DAT_00610380;\n        }\n        goto LAB_00401bf0;\n      }\n      if (iVar3 == 0x88) {\n        if (DAT_00610568 != 0) goto LAB_0040287d;\n        FUN_00404b00(DAT_00610570,1);\n        iVar4 = DAT_00610254;\n        goto LAB_00401bf0;\n      }\n      goto LAB_00401e73;\n    }\n    if (iVar3 == 0x8b) {\n      if (DAT_00610570 == (char *)0x0) {\n        DAT_00610350 = 1;\n      }\n      else {\n        iVar4 = FUN_00408550(DAT_00610570,0,10,&DAT_00610350);\n        if ((iVar4 != 0) || (iVar4 = DAT_00610254, DAT_00610350 == 0)) {\n          pcVar6 = (char *)FUN_00407590(DAT_00610570);\n          uVar12 = dcgettext(0,\"invalid header value %s\",5);\n          error(1,0,uVar12,pcVar6);\n          goto LAB_00401f60;\n        }\n      }\n      goto LAB_00401bf0;\n    }\n    if (0x8a < iVar3) {\n      if (iVar3 == 0x8c) {\n        DAT_00610370 = DAT_00610570;\n      }\n      else {\n        if (iVar3 != 0x8d) goto LAB_00401e73;\n        lVar8 = FUN_004053b0(\"--invalid\",DAT_00610570,&PTR_s_abort_0040c000,&DAT_0040bfe0);\n        DAT_006103a8 = *(int *)(&DAT_0040bfe0 + lVar8 * 4);\n        iVar4 = DAT_00610254;\n      }\n      goto LAB_00401bf0;\n    }\n  }\n  DAT_00610338 = '\\x01';\nLAB_00401e87:\n  DAT_00610348 = '\\x01';\n  iVar4 = DAT_00610254;\n  goto LAB_00401bf0;\nLAB_0040209c:\n  if (DAT_00610370[lVar8] == '%') {\n    lVar15 = lVar8 + 1;\n    if (DAT_00610370[lVar8 + 1] != '%') goto LAB_004023b4;\n    lVar15 = 2;\n  }\n  else {\n    if (DAT_00610370[lVar8] == '\\0') goto LAB_004026e5;\n    lVar15 = 1;\n  }\n  lVar8 = lVar8 + lVar15;\n  lVar20 = lVar20 + 1;\n  goto LAB_0040209c;\nLAB_004023b4:\n  bVar22 = false;\n  local_58 = (int *)(DAT_00610370 + lVar15);\n  do {\n    while( true ) {\n      while( true ) {\n        sVar7 = strspn((char *)local_58,\" \");\n        lVar15 = lVar15 + sVar7;\n        local_58 = (int *)(pcVar6 + lVar15);\n        if (*(char *)local_58 != '\\'') break;\n        DAT_00610398 = 1;\n        lVar15 = lVar15 + 1;\n        local_58 = (int *)(pcVar6 + lVar15);\n      }\n      if (*(char *)local_58 != '0') break;\n      lVar15 = lVar15 + 1;\n      bVar22 = true;\n      local_58 = (int *)(pcVar6 + lVar15);\n    }\n  } while (sVar7 != 0);\n  local_50 = __errno_location();\n  *local_50 = 0;\n  piVar10 = (int *)strtol((char *)local_58,(char **)local_40,10);\n  if (*local_50 == 0x22) goto LAB_00402715;\n  piVar18 = local_50;\n  piVar2 = DAT_00610380;\n  if ((local_40[0] != local_58) && (piVar10 != (int *)0x0)) {\n    if ((DAT_00610348 == '\\0') || (DAT_00610380 == (int *)0x0)) {\nLAB_00402625:\n      if ((long)piVar10 < 0) {\n        DAT_00610258 = 0;\n        piVar2 = (int *)-(long)piVar10;\n      }\n      else {\n        piVar2 = piVar10;\n        if (bVar22) goto LAB_0040246a;\n      }\n    }\n    else {\n      if ((!bVar22) || ((long)piVar10 < 1)) {\n        local_58 = local_50;\n        local_50 = piVar10;\n        uVar12 = dcgettext(0,\"--format padding overriding --padding\",5);\n        error(0,0,uVar12);\n        piVar18 = local_58;\n        piVar10 = local_50;\n        goto LAB_00402625;\n      }\nLAB_0040246a:\n      DAT_00610378 = piVar10;\n      piVar2 = DAT_00610380;\n    }\n  }\n  DAT_00610380 = piVar2;\n  lVar8 = (long)local_40[0] - (long)pcVar6;\n  if (*(char *)local_40[0] != '\\0') {\n    if (*(char *)local_40[0] == '.') {\n      *piVar18 = 0;\n      local_58 = piVar18;\n      DAT_00610260 = strtol(pcVar6 + lVar8 + 1,(char **)local_40,10);\n      if ((*local_58 == 0x22) || (DAT_00610260 < 0)) goto LAB_00402819;\n      ppuVar11 = __ctype_b_loc();\n      cVar14 = pcVar6[lVar8 + 1];\n      if (((*(byte *)(*ppuVar11 + cVar14) & 1) != 0) || (cVar14 == '+')) goto LAB_00402819;\n      lVar8 = (long)local_40[0] - (long)pcVar6;\n    }\n    if (pcVar6[lVar8] == 'f') {\n      lVar8 = lVar8 + 1;\n      pcVar17 = pcVar6 + lVar8;\n      cVar14 = *pcVar17;\n      if (*pcVar17 == '\\0') {\n        if (lVar20 != 0) {\nLAB_004020c4:\n          DAT_00610368 = (char *)FUN_00407de0(pcVar6,lVar20);\n          if (*pcVar17 != '\\0') goto LAB_004025b4;\n        }\n      }\n      else {\n        do {\n          cVar1 = pcVar6[lVar8 + 1];\n          lVar15 = lVar8 + 1;\n          if (cVar14 == '%') {\n            if (cVar1 != '%') goto LAB_00402789;\n            cVar1 = pcVar6[lVar8 + 2];\n            lVar15 = lVar8 + 2;\n          }\n          lVar8 = lVar15;\n          cVar14 = cVar1;\n        } while (cVar1 != '\\0');\n        if (lVar20 != 0) goto LAB_004020c4;\nLAB_004025b4:\n        DAT_00610360 = (char *)FUN_00407d80(pcVar17);\n      }\n      if (DAT_00610338 != '\\0') {\n        pcVar17 = DAT_00610360;\n        if (DAT_00610360 == (char *)0x0) {\n          pcVar17 = \"\";\n        }\n        local_50 = (int *)FUN_00407570(2,pcVar17);\n        pcVar17 = DAT_00610368;\n        if (DAT_00610368 == (char *)0x0) {\n          pcVar17 = \"\";\n        }\n        pcVar21 = \"Left\";\n        puVar19 = &DAT_0040a1b6;\n        uVar12 = FUN_00407570(1,pcVar17);\n        if (DAT_00610258 != 0) {\n          pcVar21 = \"Right\";\n        }\n        local_58 = DAT_00610380;\n        if (DAT_00610398 == 0) {\n          puVar19 = &DAT_0040a1ba;\n        }\n        auVar23 = FUN_00407570(0,pcVar6);\n        __fprintf_chk(stderr,1,\n                      \"format String:\\n  input: %s\\n  grouping: %s\\n  padding width: %ld\\n  alignment: %s\\n  prefix: %s\\n  suffix: %s\\n\"\n                      ,SUB168(auVar23,0),puVar19,local_58,pcVar21,uVar12,local_50,\n                      SUB168(auVar23 >> 0x40,0));\n      }\nLAB_004021a2:\n      if (DAT_00610398 == 0) {\nLAB_004021af:\n        if (DAT_00610388 <= DAT_00610380) {\n          FUN_00402bd0();\n        }\n        DAT_00610358 = 0;\n        if (DAT_00610380 == (int *)0x0) {\n          DAT_00610358 = (uint)(DAT_00610254 == 0x80);\n        }\n        if (DAT_006103a8 != 0) {\n          DAT_0061025c = 0;\n        }\n        if (DAT_006102f8._4_4_ < param_1) {\n          if ((DAT_00610348 != '\\0') && (DAT_00610350 != 0)) {\n            uVar12 = dcgettext(0,\"--header ignored with command-line input\",5);\n            error(0,0,uVar12);\n            if (param_1 <= DAT_006102f8._4_4_) {\n              return 0;\n            }\n          }\n          uVar16 = 1;\n          do {\n            uVar5 = FUN_004041a0(param_2[DAT_006102f8._4_4_],1);\n            uVar16 = uVar16 & uVar5;\n            DAT_006102f8._4_4_ = DAT_006102f8._4_4_ + 1;\n          } while (DAT_006102f8._4_4_ < param_1);\n        }\n        else {\n          local_48 = (char *)0x0;\n          local_40[0] = (int *)0x0;\n          while ((bVar22 = DAT_00610350 != 0, DAT_00610350 = DAT_00610350 + -1, bVar22 &&\n                 (_Var9 = getdelim(&local_48,(size_t *)local_40,(uint)DAT_00610250,stdin), 0 < _Var9\n                 ))) {\n            fputs_unlocked(local_48,stdout);\n          }\n          uVar16 = 1;\n          while (_Var9 = getdelim(&local_48,(size_t *)local_40,(uint)DAT_00610250,stdin), 0 < _Var9)\n          {\n            bVar22 = (int)local_48[_Var9 + -1] == (uint)DAT_00610250;\n            if (bVar22) {\n              local_48[_Var9 + -1] = '\\0';\n            }\n            uVar5 = FUN_004041a0(local_48,bVar22);\n            uVar16 = uVar16 & uVar5;\n          }\n          if ((*(byte *)&stdin->_flags & 0x20) != 0) {\n            uVar12 = dcgettext(0,\"error reading input\",5);\n            piVar10 = __errno_location();\n            error(0,*piVar10,uVar12);\n          }\n        }\n        if (DAT_00610348 == '\\0') {\n          if (uVar16 != 0) {\n            return 0;\n          }\n        }\n        else {\n          if (uVar16 != 0) {\n            return 0;\n          }\n          uVar12 = dcgettext(0,\"failed to convert some of the input numbers\",5);\n          error(0,0,uVar12);\n        }\n        if (DAT_006103a8 - 2U < 2) {\n          return 0;\n        }\n        return 2;\n      }\n      if (DAT_006103ac == 0) {\nLAB_00402370:\n        if ((DAT_00610348 != '\\0') && (pcVar6 = nl_langinfo(0x10001), *pcVar6 == '\\0')) {\n          uVar12 = dcgettext(0,\"grouping has no effect in this locale\",5);\n          error(0,0,uVar12);\n        }\n        goto LAB_004021af;\n      }\n      goto LAB_00402767;\n    }\n    goto LAB_004027b9;\n  }\nLAB_004027e9:\n  pcVar6 = (char *)FUN_00407590(pcVar6);\n  uVar12 = dcgettext(0,\"format %s ends in %%\",5);\n  error(1,0,uVar12,pcVar6);\nLAB_00402819:\n  uVar12 = FUN_00407590(pcVar6);\n  uVar13 = dcgettext(0,\"invalid precision in format %s\",5);\n  error(1,0,uVar13,uVar12);\nLAB_00402849:\n  uVar12 = FUN_00407590(DAT_00610570);\n  uVar13 = dcgettext(0,\"invalid padding value %s\",5);\n  error(1,0,uVar13,uVar12);\nLAB_0040287d:\n  uVar12 = dcgettext(0,\"multiple field specifications\",5);\n  error(1,0,uVar12);\nLAB_0040289f:\n  uVar12 = dcgettext(0,\"the delimiter must be a single character\",5);\n  auVar23 = error(1,0,uVar12);\n  piVar10 = local_58;\n  local_58 = SUB168(auVar23,0);\n  (*(code *)PTR___libc_start_main_0060fff0)\n            (FUN_00401b60,piVar10,&local_50,FUN_00409f30,FUN_00409f90,SUB168(auVar23 >> 0x40,0),\n             &local_58);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\nLAB_004026e5:\n  pcVar6 = (char *)FUN_00407590(pcVar6);\n  uVar12 = dcgettext(0,\"format %s has no %% directive\",5);\n  error(1,0,uVar12,pcVar6);\nLAB_00402715:\n  pcVar6 = (char *)FUN_00407590(pcVar6);\n  uVar12 = dcgettext(0,\"invalid format %s (width overflow)\",5);\n  error(1,0,uVar12,pcVar6);\nLAB_00402745:\n  uVar12 = dcgettext(0,\"--grouping cannot be combined with --format\",5);\n  error(1,0,uVar12);\nLAB_00402767:\n  uVar12 = dcgettext(0,\"grouping cannot be combined with --to\",5);\n  error(1,0,uVar12);\nLAB_00402789:\n  pcVar6 = (char *)FUN_00407590(pcVar6);\n  uVar12 = dcgettext(0,\"format %s has too many %% directives\",5);\n  error(1,0,uVar12,pcVar6);\nLAB_004027b9:\n  pcVar6 = (char *)FUN_00407590(pcVar6);\n  uVar12 = dcgettext(0,\"invalid format %s, directive must be %%[0][\\'][-][N][.][N]f\",5);\n  error(1,0,uVar12,pcVar6);\n  goto LAB_004027e9;\n}\n\n",
            "funcName": "FUN_00401b60"
        },
        {
            "funcStartAddr": "0x4028d0",
            "funcEndAddr": "0x4028fb",
            "decompiledFuncCode": "\nvoid FUN_004028d0(undefined8 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  undefined8 unaff_retaddr;\n  undefined auStack_8 [8];\n  \n  (*(code *)PTR___libc_start_main_0060fff0)\n            (FUN_00401b60,unaff_retaddr,&stack0x00000008,FUN_00409f30,FUN_00409f90,param_3,auStack_8\n            );\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "funcName": "FUN_004028d0"
        },
        {
            "funcStartAddr": "0x4028fb",
            "funcEndAddr": "0x40291a",
            "decompiledFuncCode": "\n/* WARNING: Removing unreachable block (ram,0x00402908) */\n/* WARNING: Removing unreachable block (ram,0x00402912) */\n\nvoid FUN_004028fb(void)\n\n{\n  return;\n}\n\n",
            "funcName": "FUN_004028fb"
        },
        {
            "funcStartAddr": "0x40291a",
            "funcEndAddr": "0x402951",
            "decompiledFuncCode": "\n/* WARNING: Removing unreachable block (ram,0x00402949) */\n\nvoid FUN_0040291a(void)\n\n{\n  return;\n}\n\n",
            "funcName": "FUN_0040291a"
        },
        {
            "funcStartAddr": "0x402951",
            "funcEndAddr": "0x4029a8",
            "decompiledFuncCode": "\n/* WARNING: Removing unreachable block (ram,0x00402986) */\n\nvoid FUN_00402951(void)\n\n{\n  if (DAT_00610328 != '\\0') {\n    return;\n  }\n  FUN_004028fb();\n  DAT_00610328 = 1;\n  return;\n}\n\n",
            "funcName": "FUN_00402951"
        },
        {
            "funcStartAddr": "0x4029a8",
            "funcEndAddr": "0x4029ad",
            "decompiledFuncCode": "\n/* WARNING: Removing unreachable block (ram,0x00402949) */\n\nvoid thunk_FUN_0040291a(void)\n\n{\n  return;\n}\n\n",
            "funcName": "thunk_4029a8"
        },
        {
            "funcStartAddr": "0x4029b0",
            "funcEndAddr": "0x402ae8",
            "decompiledFuncCode": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nlong FUN_004029b0(char *param_1)\n\n{\n  int iVar1;\n  size_t __n;\n  void *__dest;\n  undefined8 uVar2;\n  undefined8 uVar3;\n  long lVar4;\n  char *pcVar5;\n  uint uVar6;\n  char *extraout_RDX;\n  float10 *pfVar7;\n  char **ppcVar8;\n  uint uVar9;\n  char *pcVar10;\n  char *pcVar11;\n  float10 fVar12;\n  float10 fVar13;\n  char *local_28;\n  long local_20;\n  \n  __n = strlen(param_1);\n  local_28 = (char *)0x0;\n  if ((__n == 0) || ((int)param_1[__n - 1] - 0x30U < 10)) {\n    pcVar5 = param_1;\n    pcVar10 = (char *)0x0;\n  }\n  else {\n    __dest = (void *)FUN_00407b50(__n + 2);\n    pcVar11 = (char *)((__n - 1) + (long)__dest);\n    local_28 = pcVar11;\n    pcVar5 = (char *)memcpy(__dest,param_1,__n);\n    pcVar10 = pcVar5;\n    if (((*pcVar11 == 'i') && (__n != 1)) && (9 < (int)pcVar11[-1] - 0x30U)) {\n      *pcVar11 = '\\0';\n    }\n    else {\n      local_28 = pcVar11 + 2;\n      *(undefined2 *)(pcVar11 + 1) = 0x42;\n    }\n  }\n  iVar1 = FUN_00408550(pcVar5,&local_28,10,&local_20);\n  if (((iVar1 == 0) && (*local_28 == '\\0')) && (local_20 != 0)) {\n    free(pcVar10);\n    return local_20;\n  }\n  free(pcVar10);\n  uVar2 = FUN_00407590(param_1);\n  uVar3 = dcgettext(0,\"invalid unit size: %s\",5);\n  pfVar7 = (float10 *)0x0;\n  ppcVar8 = (char **)0x1;\n  error(1,0,uVar3,uVar2);\n  pcVar5 = *ppcVar8;\n  if ((pcVar5 == (char *)0x0) || (uVar6 = (int)*pcVar5 - 0x30, 9 < uVar6)) {\n    iVar1 = strncmp(pcVar5,DAT_00610340,(long)DAT_0061033c);\n    if (iVar1 != 0) {\n      return 3;\n    }\n    lVar4 = 0;\n    fVar13 = (float10)0;\n  }\n  else {\n    lVar4 = 0;\n    uVar9 = 0;\n    fVar13 = (float10)0;\n    do {\n      pcVar5 = pcVar5 + 1;\n      if (((float10)0 != fVar13) || (uVar6 != 0)) {\n        uVar9 = uVar9 + 1;\n      }\n      if (0x12 < uVar9) {\n        if (0x1b < uVar9) {\n          return 2;\n        }\n        lVar4 = 1;\n      }\n      fVar12 = (float10)_DAT_0040c130;\n      *ppcVar8 = pcVar5;\n      fVar13 = (float10)uVar6 + fVar12 * fVar13;\n    } while ((pcVar5 != (char *)0x0) && (uVar6 = (int)*pcVar5 - 0x30, uVar6 < 10));\n  }\n  if (*extraout_RDX != '\\0') {\n    fVar13 = -fVar13;\n  }\n  *pfVar7 = fVar13;\n  return lVar4;\n}\n\n",
            "funcName": "FUN_004029b0"
        },
        {
            "funcStartAddr": "0x402af0",
            "funcEndAddr": "0x402bb9",
            "decompiledFuncCode": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nundefined8 FUN_00402af0(char **param_1,float10 *param_2,char *param_3)\n\n{\n  int iVar1;\n  undefined8 uVar2;\n  char *__s1;\n  uint uVar3;\n  uint uVar4;\n  float10 fVar5;\n  float10 fVar6;\n  \n  __s1 = *param_1;\n  if ((__s1 == (char *)0x0) || (uVar3 = (int)*__s1 - 0x30, 9 < uVar3)) {\n    iVar1 = strncmp(__s1,DAT_00610340,(long)DAT_0061033c);\n    if (iVar1 != 0) {\n      return 3;\n    }\n    uVar2 = 0;\n    fVar6 = (float10)0;\n  }\n  else {\n    uVar2 = 0;\n    uVar4 = 0;\n    fVar6 = (float10)0;\n    do {\n      __s1 = __s1 + 1;\n      if (((float10)0 != fVar6) || (uVar3 != 0)) {\n        uVar4 = uVar4 + 1;\n      }\n      if (0x12 < uVar4) {\n        if (0x1b < uVar4) {\n          return 2;\n        }\n        uVar2 = 1;\n      }\n      fVar5 = (float10)_DAT_0040c130;\n      *param_1 = __s1;\n      fVar6 = (float10)uVar3 + fVar5 * fVar6;\n    } while ((__s1 != (char *)0x0) && (uVar3 = (int)*__s1 - 0x30, uVar3 < 10));\n  }\n  if (*param_3 != '\\0') {\n    fVar6 = -fVar6;\n  }\n  *param_2 = fVar6;\n  return uVar2;\n}\n\n",
            "funcName": "FUN_00402af0"
        },
        {
            "funcStartAddr": "0x402bd0",
            "funcEndAddr": "0x402bf7",
            "decompiledFuncCode": "\nvoid FUN_00402bd0(long param_1)\n\n{\n  DAT_00610388 = param_1 + 1;\n  DAT_00610390 = FUN_00407bb0(DAT_00610390);\n  return;\n}\n\n",
            "funcName": "FUN_00402bd0"
        },
        {
            "funcStartAddr": "0x402c00",
            "funcEndAddr": "0x404029",
            "decompiledFuncCode": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nundefined8 FUN_00402c00(byte *param_1,ulong param_2)\n\n{\n  byte *pbVar1;\n  undefined4 uVar2;\n  uint uVar3;\n  int iVar4;\n  uint uVar5;\n  int iVar6;\n  uint uVar7;\n  ulong *puVar8;\n  size_t sVar9;\n  size_t sVar10;\n  ushort **ppuVar11;\n  byte *pbVar12;\n  char *pcVar13;\n  undefined8 uVar14;\n  undefined8 uVar15;\n  undefined8 uVar16;\n  byte bVar17;\n  uint *puVar18;\n  uint *puVar19;\n  undefined *puVar20;\n  ulong uVar21;\n  byte extraout_DL;\n  int iVar22;\n  int iVar23;\n  float *pfVar24;\n  float10 *pfVar25;\n  float *pfVar26;\n  float10 *pfVar27;\n  uint *__src;\n  ulong uVar28;\n  undefined4 *puVar29;\n  byte *pbVar30;\n  ulong uVar31;\n  bool bVar32;\n  undefined2 in_FPUControlWord;\n  float10 in_ST0;\n  float10 fVar33;\n  float10 fVar34;\n  float10 fVar35;\n  float10 fVar36;\n  unkbyte10 Var37;\n  float10 in_ST1;\n  float10 fVar38;\n  float10 fVar39;\n  float10 in_ST2;\n  float10 in_ST3;\n  float10 in_ST4;\n  byte *apbStack_190 [5];\n  float local_168 [4];\n  int local_158;\n  byte local_148;\n  long local_128;\n  ushort local_11c [9];\n  char local_10a;\n  char local_109;\n  byte *local_108 [2];\n  undefined8 local_f8;\n  undefined2 uStack_f0;\n  float10 local_b8 [13];\n  \n  pcVar13 = DAT_006103a0;\n  pfVar26 = local_168;\n  pfVar24 = local_168;\n  puVar8 = DAT_00610560;\n  if (DAT_00610560 != (ulong *)0x0) {\n    for (; *puVar8 != 0xffffffffffffffff; puVar8 = puVar8 + 2) {\n      if ((*puVar8 <= param_2) && (param_2 < puVar8[1] || param_2 == puVar8[1])) goto LAB_00402c76;\n    }\nLAB_00402c40:\n    fputs_unlocked((char *)param_1,stdout);\n    return 1;\n  }\n  if (param_2 != 1) goto LAB_00402c40;\nLAB_00402c76:\n  if (DAT_006103a0 != (char *)0x0) {\n    sVar9 = strlen((char *)param_1);\n    sVar10 = strlen(pcVar13);\n    if (sVar10 < sVar9) {\n      iVar4 = strcmp(pcVar13,(char *)(param_1 + (sVar9 - sVar10)));\n      bVar17 = DAT_00610338;\n      if (iVar4 == 0) {\n        param_1[sVar9 - sVar10] = 0;\n        if (bVar17 != 0) {\n          uVar14 = FUN_00407590(pcVar13);\n          __fprintf_chk(stderr,1,\"trimming suffix %s\\n\",uVar14);\n        }\n      }\n      else if (DAT_00610338 != 0) {\n        fwrite(\"no valid suffix found\\n\",1,0x16,stderr);\n      }\n    }\n  }\n  bVar17 = *param_1;\n  pbVar30 = param_1;\n  if (bVar17 == 0) {\n    iVar4 = 0;\n  }\n  else {\n    ppuVar11 = __ctype_b_loc();\n    do {\n      if ((*(byte *)(*ppuVar11 + bVar17) & 1) == 0) break;\n      pbVar30 = pbVar30 + 1;\n      bVar17 = *pbVar30;\n    } while (bVar17 != 0);\n    iVar4 = (int)param_1 - (int)pbVar30;\n  }\n  if (DAT_00610358 == 0) {\nLAB_00402fcd:\n    local_158 = DAT_006103b0;\n    local_108[0] = (byte *)0x0;\n    local_168[0] = 0.0;\n    local_f8 = SUB108((float10)0.0,0);\n    uStack_f0 = (undefined2)((unkuint10)(float10)0.0 >> 0x40);\n    uVar21 = (ulong)((-(uint)(DAT_006103b0 - 3U < 2) & 0x18) + 1000);\n    if (DAT_00610338 != 0) {\n      uVar14 = FUN_00407570(1,DAT_00610340);\n      uVar15 = FUN_00407570(0,pbVar30);\n      __fprintf_chk(stderr,1,\n                    \"simple_strtod_human:\\n  input string: %s\\n  locale decimal-point: %s\\n  MAX_UNSCALED_DIGITS: %d\\n\"\n                    ,uVar15,uVar14,0x12);\n    }\n  }\n  else {\n    if ((iVar4 == 0) && ((long)param_2 < 2)) {\n      DAT_00610380 = (undefined *)0x0;\n    }\n    else {\n      DAT_00610380 = (undefined *)strlen((char *)param_1);\n      if (DAT_00610388 <= DAT_00610380) {\n        FUN_00402bd0(DAT_00610380);\n      }\n    }\n    if (DAT_00610338 != 0) {\n      __fprintf_chk(stderr,1,\"setting Auto-Padding to %ld characters\\n\",DAT_00610380);\n      goto LAB_00402fcd;\n    }\n    local_168[0] = 0.0;\n    local_158 = DAT_006103b0;\n    local_f8 = SUB108((float10)0.0,0);\n    uStack_f0 = (undefined2)((unkuint10)(float10)0.0 >> 0x40);\n    uVar21 = (ulong)((-(uint)(DAT_006103b0 - 3U < 2) & 0x18) + 1000);\n  }\n  local_10a = *pbVar30 == 0x2d;\n  local_108[0] = pbVar30;\n  if ((bool)local_10a) {\n    local_108[0] = pbVar30 + 1;\n  }\n  uVar5 = FUN_00402af0(local_108,&local_f8,&local_10a);\n  pbVar12 = local_108[0];\n  __src = (uint *)(ulong)uVar5;\n  if (uVar5 < 2) {\n    sVar9 = (size_t)DAT_0061033c;\n    iVar4 = strncmp((char *)local_108[0],DAT_00610340,sVar9);\n    if (iVar4 != 0) {\n      uVar31 = 0;\nLAB_00402dca:\n      uVar5 = (uint)__src;\n      if (DAT_00610338 != 0) {\n        __fprintf_chk(stderr,1,\"  parsed numeric value: %Lf\\n  input precision = %d\\n\",\n                      uVar31 & 0xffffffff);\n      }\n      pbVar12 = local_108[0];\n      local_148 = *local_108[0];\n      if (*local_108[0] == 0) {\n        if (local_158 != 4) {\n          fVar33 = (float10)1;\n          bVar17 = DAT_00610338;\n          goto LAB_00402eb4;\n        }\n        uVar5 = 6;\n        pcVar13 = \"missing \\'i\\' suffix in input: %s (e.g Ki/Mi/Gi)\";\n      }\n      else {\n        ppuVar11 = __ctype_b_loc();\n        while (pbVar1 = pbVar12 + 1, (*(byte *)(*ppuVar11 + local_148) & 1) != 0) {\n          local_148 = pbVar12[1];\n          pbVar12 = pbVar1;\n          local_108[0] = pbVar1;\n        }\n        pcVar13 = strchr(\"KMGTPEZY\",(int)(char)local_148);\n        if (pcVar13 == (char *)0x0) {\n          uVar5 = 5;\n          pcVar13 = \"invalid suffix in input: %s\";\n        }\n        else {\n          if (local_158 != 0) {\n            iVar4 = 0;\n            if ((byte)(local_148 + 0xbb) < 0x16) {\n              iVar4 = *(int *)(&DAT_0040bd20 + (ulong)(byte)(local_148 + 0xbb) * 4);\n            }\n            local_108[0] = pbVar12 + 1;\n            iVar6 = (int)uVar21;\n            if (local_158 == 1) {\n              if (pbVar12[1] == 0x69) {\n                local_108[0] = pbVar12 + 2;\n                if (DAT_00610338 == 0) {\n                  fVar33 = (float10)_DAT_0040c134;\n                  uVar21 = 0x400;\n                }\n                else {\n                  uVar21 = 0x400;\n                  local_158 = iVar4;\n                  __fprintf_chk(stderr,1,\"  Auto-scaling, found \\'i\\', switching to base %d\\n\",0x400\n                               );\n                  fVar33 = (float10)_DAT_0040c134;\n                  iVar4 = local_158;\n                }\n              }\n              else {\n                local_158 = iVar6;\n                fVar33 = (float10)iVar6;\n              }\n            }\n            else {\n              if (local_158 == 4) {\n                if (pbVar12[1] != 0x69) {\n                  uVar31 = 0;\n                  uVar5 = 6;\n                  pcVar13 = \"missing \\'i\\' suffix in input: %s (e.g Ki/Mi/Gi)\";\n                  goto LAB_004034ed;\n                }\n                local_108[0] = pbVar12 + 2;\n              }\n              local_158 = iVar6;\n              fVar33 = (float10)iVar6;\n            }\n            bVar17 = DAT_00610338;\n            if (iVar4 == 0) goto LAB_0040411c;\n            iVar4 = iVar4 + -1;\n            fVar34 = fVar33;\n            if (iVar4 != 0) {\n              do {\n                fVar34 = fVar34 * fVar33;\n                iVar4 = iVar4 + -1;\n              } while (iVar4 != 0);\n              uVar31 = 0;\n              pfVar24 = local_168;\n              fVar33 = fVar34;\n              goto LAB_00402eb4;\n            }\n            uVar31 = 0;\n            pfVar24 = local_168;\n            goto LAB_00402eb4;\n          }\n          uVar5 = 4;\n          pcVar13 = \"rejecting suffix in input: %s (consider using --from)\";\n        }\n      }\n      goto LAB_004034ed;\n    }\n    local_b8[0] = (float10)local_168[0];\n    local_108[0] = pbVar12 + sVar9;\n    local_108[1] = local_108[0];\n    if (*local_108[0] == 0x2d) {\n      local_108[1] = local_108[0] + 1;\n      iVar4 = 1;\n    }\n    local_109 = (char)iVar4;\n    uVar5 = FUN_00402af0(local_108 + 1,local_b8,&local_109);\n    if (1 < uVar5) {\n      __src = (uint *)(ulong)uVar5;\n      goto LAB_004031aa;\n    }\n    if (uVar5 == 1) {\n      __src = (uint *)0x1;\n    }\n    if (local_109 == '\\0') {\n      uVar31 = (long)local_108[1] - (long)local_108[0];\n      fVar33 = local_b8[0];\n      if ((int)uVar31 != 0) {\n        iVar4 = (int)uVar31 + -1;\n        if (iVar4 == 0) {\n          fVar33 = local_b8[0] / (float10)_DAT_0040c130;\n        }\n        else {\n          fVar33 = (float10)_DAT_0040c130;\n          do {\n            fVar33 = fVar33 * (float10)_DAT_0040c130;\n            iVar4 = iVar4 + -1;\n          } while (iVar4 != 0);\n          fVar33 = local_b8[0] / fVar33;\n        }\n      }\n      if (local_10a == '\\0') {\n        fVar33 = (float10)CONCAT28(uStack_f0,local_f8) + fVar33;\n      }\n      else {\n        fVar33 = (float10)CONCAT28(uStack_f0,local_f8) - fVar33;\n      }\n      local_f8 = SUB108(fVar33,0);\n      uStack_f0 = (undefined2)((unkuint10)fVar33 >> 0x40);\n      local_108[0] = local_108[1];\n      goto LAB_00402dca;\n    }\nswitchD_004031b5_caseD_3:\n    uVar31 = 0;\n    uVar5 = 3;\n    pcVar13 = \"invalid number: %s\";\n  }\n  else {\nLAB_004031aa:\n    uVar5 = (uint)__src;\n    switch(__src) {\n    default:\n      uVar31 = 0;\n      pcVar13 = (char *)0x0;\n      break;\n    case (uint *)0x2:\n      uVar31 = 0;\n      pcVar13 = \"value too large to be converted: %s\";\n      break;\n    case (uint *)0x3:\n      goto switchD_004031b5_caseD_3;\n    case (uint *)0x4:\n      uVar31 = 0;\n      pcVar13 = \"rejecting suffix in input: %s (consider using --from)\";\n      break;\n    case (uint *)0x5:\n      uVar31 = 0;\n      pcVar13 = \"invalid suffix in input: %s\";\n      break;\n    case (uint *)0x6:\n      uVar31 = 0;\n      pcVar13 = \"missing \\'i\\' suffix in input: %s (e.g Ki/Mi/Gi)\";\n    }\n  }\nLAB_004034ed:\n  pfVar25 = (float10 *)local_168;\n  if (DAT_006103a8 != 3) {\n    uVar14 = FUN_00407590(pbVar30);\n    uVar15 = dcgettext(0,pcVar13,5);\n    error(DAT_0061025c,0,uVar15,uVar14);\n    pfVar25 = (float10 *)local_168;\n  }\nLAB_00402f40:\n  uVar3 = DAT_006103ac;\n  iVar4 = DAT_00610398;\n  uVar7 = DAT_00610278;\n  uVar2 = DAT_0061025c;\n  fVar33 = *(float10 *)((long)pfVar25 + 0x70);\n  if ((DAT_00610270 != 1) || (DAT_00610268 != 1)) {\n    *(long *)((long)pfVar25 + 0x10) = DAT_00610270;\n    fVar34 = (float10)*(long *)((long)pfVar25 + 0x10);\n    if (DAT_00610270 < 0) {\n      fVar34 = fVar34 + (float10)_DAT_0040c138;\n    }\n    *(long *)((long)pfVar25 + 0x10) = DAT_00610268;\n    fVar35 = (float10)*(long *)((long)pfVar25 + 0x10);\n    if (DAT_00610268 < 0) {\n      fVar35 = fVar35 + (float10)_DAT_0040c138;\n    }\n    fVar33 = (fVar34 * fVar33) / fVar35;\n  }\n  if (1 < uVar5) goto LAB_00402f98;\n  if (DAT_00610260 != 0xffffffffffffffff) {\n    uVar31 = DAT_00610260;\n  }\n  if ((fVar33 < _DAT_0040c150) || (_DAT_0040c160 < fVar33)) {\n    if ((DAT_006103ac == 0) && (0x12 < uVar31)) {\nLAB_00403691:\n      if (DAT_006103a8 != 3) {\n        *pfVar25 = fVar33;\n        if (uVar31 == 0) {\n          *(undefined8 *)((long)pfVar25 + -8) = 0x403fad;\n          uVar14 = dcgettext(0,\"value too large to be printed: \\'%Lg\\' (consider using --to)\",5);\n          *(float10 *)((long)pfVar25 + -0x10) = *pfVar25;\n          *(undefined8 *)((long)pfVar25 + -0x18) = 0x403fc5;\n          error(uVar2,0,uVar14);\n        }\n        else {\n          *(undefined8 *)((long)pfVar25 + -8) = 0x4036c1;\n          uVar14 = dcgettext(0,\n                             \"value/precision too large to be printed: \\'%Lg/%lu\\' (consider using --to)\"\n                             ,5);\n          *(float10 *)((long)pfVar25 + -0x10) = *pfVar25;\n          *(undefined8 *)((long)pfVar25 + -0x18) = 0x4036dc;\n          error(uVar2,0,uVar14,uVar31);\n        }\n      }\nLAB_00402f98:\n      *(undefined8 *)((long)pfVar25 + -8) = 0x402fa9;\n      fputs_unlocked((char *)param_1,stdout);\n      return 0;\n    }\n  }\n  else {\n    uVar5 = 0;\n    fVar34 = fVar33;\n    while( true ) {\n      fVar35 = -fVar34;\n      if ((float10)0 <= fVar34) {\n        fVar35 = fVar34;\n      }\n      if (fVar35 < (float10)_DAT_0040c130) break;\n      fVar34 = (float10)_DAT_0040c130 / fVar34;\n      uVar5 = uVar5 + 1;\n    }\n    if ((DAT_006103ac == 0) && (0x12 < uVar5 + uVar31)) goto LAB_00403691;\n    in_ST3 = in_ST2;\n    in_ST4 = in_ST2;\n    if (0x1a < uVar5) {\n      *pfVar25 = fVar33;\n      if (DAT_006103a8 != 3) {\n        *(undefined8 *)((long)pfVar25 + -8) = 0x40326e;\n        uVar14 = dcgettext(0,\"value too large to be printed: \\'%Lg\\' (cannot handle values > 999Y)\",\n                           5);\n        *(float10 *)((long)pfVar25 + -0x10) = *pfVar25;\n        *(undefined8 *)((long)pfVar25 + -0x18) = 0x40328a;\n        error(DAT_0061025c,0,uVar14);\n      }\n      goto LAB_00402f98;\n    }\n  }\n  uVar21 = (ulong)DAT_006103ac;\n  uVar28 = (ulong)DAT_00610278;\n  *(undefined *)((long)pfVar25 + 0x70) = 0x25;\n  puVar29 = (undefined4 *)((long)pfVar25 + 0x71);\n  if (DAT_00610398 != 0) {\n    *(undefined *)((long)pfVar25 + 0x71) = 0x27;\n    puVar29 = (undefined4 *)((long)pfVar25 + 0x72);\n  }\n  if (DAT_00610378 != 0) {\n    *(float10 *)((long)pfVar25 + 0x10) = fVar33;\n    *(undefined8 *)((long)pfVar25 + -8) = 0x403679;\n    iVar6 = __snprintf_chk(puVar29,0x3e,1,0x3f,&DAT_0040a0c9);\n    fVar33 = *(float10 *)((long)pfVar25 + 0x10);\n    puVar29 = (undefined4 *)((long)puVar29 + (long)iVar6);\n  }\n  if (DAT_00610338 != 0) {\n    *(float10 *)((long)pfVar25 + 0x10) = fVar33;\n    *(undefined8 *)((long)pfVar25 + -8) = 0x403646;\n    fwrite(\"double_to_human:\\n\",1,0x11,stderr);\n    fVar33 = *(float10 *)((long)pfVar25 + 0x10);\n  }\n  if (uVar3 == 0) {\n    iVar6 = (int)uVar31;\n    if (iVar6 == 0) {\n      *(undefined2 *)((long)pfVar25 + 0x4e) = in_FPUControlWord;\n      *(ushort *)((long)pfVar25 + 0x4c) =\n           *(ushort *)((long)pfVar25 + 0x4e) & 0xff |\n           (ushort)(byte)((ulong)*(ushort *)((long)pfVar25 + 0x4e) >> 8) << 8 | 0xc00;\n      *(long *)((long)pfVar25 + 0x10) = (long)ROUND(fVar33 / _DAT_0040c170);\n      in_FPUControlWord = *(undefined2 *)((long)pfVar25 + 0x4e);\n      if (uVar7 < 5) goto LAB_004035cd;\n      fVar34 = (float10)0;\n    }\n    else {\n      iVar22 = iVar6 + -1;\n      if (iVar22 == 0) {\n        *(undefined2 *)((long)pfVar25 + 0x4e) = in_FPUControlWord;\n        *(ushort *)((long)pfVar25 + 0x4c) =\n             *(ushort *)((long)pfVar25 + 0x4e) & 0xff |\n             (ushort)(byte)((ulong)*(ushort *)((long)pfVar25 + 0x4e) >> 8) << 8 | 0xc00;\n        *(long *)((long)pfVar25 + 0x10) =\n             (long)ROUND((fVar33 * (float10)_DAT_0040c130) / _DAT_0040c170);\n        in_FPUControlWord = *(undefined2 *)((long)pfVar25 + 0x4e);\n        if (uVar7 < 5) goto LAB_004035cd;\n        fVar34 = (float10)0;\n        in_ST4 = in_ST3;\n      }\n      else {\n        fVar35 = (float10)_DAT_0040c130;\n        fVar34 = fVar35;\n        iVar23 = iVar22;\n        do {\n          fVar34 = fVar34 * fVar35;\n          iVar23 = iVar23 + -1;\n        } while (iVar23 != 0);\n        *(undefined2 *)((long)pfVar25 + 0x4e) = in_FPUControlWord;\n        *(ushort *)((long)pfVar25 + 0x4c) =\n             *(ushort *)((long)pfVar25 + 0x4e) & 0xff |\n             (ushort)(byte)((ulong)*(ushort *)((long)pfVar25 + 0x4e) >> 8) << 8 | 0xc00;\n        *(long *)((long)pfVar25 + 0x10) = (long)ROUND((fVar34 * fVar33) / _DAT_0040c170);\n        in_FPUControlWord = *(undefined2 *)((long)pfVar25 + 0x4e);\n        if (uVar7 < 5) {\nLAB_004035cd:\n                    /* WARNING: Could not recover jumptable at 0x004035cd. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar14 = (*(code *)(&PTR_DAT_0040bc40)[uVar28])();\n          return uVar14;\n        }\n        fVar34 = fVar35;\n        do {\n          fVar34 = fVar34 * fVar35;\n          iVar22 = iVar22 + -1;\n        } while (iVar22 != 0);\n        fVar34 = (float10)0 / fVar34;\n        in_ST3 = in_ST2;\n        in_ST4 = in_ST2;\n      }\n    }\n    uVar28 = uVar31 & 0xffffffff;\n    in_ST0 = in_ST1;\n    fVar35 = in_ST2;\n    fVar36 = in_ST3;\n    fVar38 = in_ST4;\n    if (DAT_00610338 != 0) {\n      *(float10 *)((long)pfVar25 + 0x10) = fVar33;\n      pcVar13 = \"  no scaling, returning (grouped) value: %\\'.*Lf\\n\";\n      *(int *)((long)pfVar25 + 0x20) = iVar6;\n      if (iVar4 == 0) {\n        pcVar13 = \"  no scaling, returning value: %.*Lf\\n\";\n      }\n      *(float10 *)((long)pfVar25 + -0x10) = fVar34;\n      *pfVar25 = fVar34;\n      *(undefined8 *)((long)pfVar25 + -0x18) = 0x403771;\n      fVar39 = in_ST4;\n      __fprintf_chk(stderr,1,pcVar13,uVar31 & 0xffffffff);\n      fVar34 = *pfVar25;\n      fVar33 = *(float10 *)((long)pfVar25 + 0x10);\n      uVar28 = (ulong)*(uint *)((long)pfVar25 + 0x20);\n      in_ST0 = in_ST1;\n      fVar35 = in_ST2;\n      fVar36 = in_ST3;\n      fVar38 = in_ST4;\n      in_ST4 = fVar39;\n    }\n    in_ST3 = fVar38;\n    in_ST2 = fVar36;\n    in_ST1 = fVar35;\n    *(float10 *)((long)pfVar25 + 0x10) = fVar33;\n    __src = (uint *)((long)pfVar25 + 0xb0);\n    *puVar29 = 0x664c2a2e;\n    *(undefined *)(puVar29 + 1) = 0;\n    *(float10 *)((long)pfVar25 + -0x10) = fVar34;\n    *pfVar25 = fVar34;\n    *(undefined8 *)((long)pfVar25 + -0x18) = 0x4037cd;\n    uVar5 = __snprintf_chk(__src,0x80,1,0x80,(long)pfVar25 + 0x70,uVar28);\n    param_1 = *(byte **)((long)pfVar25 + -0x10);\n    pbVar30 = *(byte **)((long)pfVar25 + -8);\n    if (0x7f < uVar5) goto LAB_004040ef;\n    Var37 = *(unkbyte10 *)((long)pfVar25 + 0x10);\nLAB_004037ea:\n    puVar19 = __src;\n    bVar17 = DAT_00610338;\n    if (DAT_006103a0 != (char *)0x0) {\nLAB_004037f9:\n      do {\n        puVar18 = puVar19;\n        bVar17 = DAT_00610338;\n        uVar7 = *puVar18 + 0xfefefeff & ~*puVar18;\n        uVar5 = uVar7 & 0x80808080;\n        puVar19 = puVar18 + 1;\n      } while (uVar5 == 0);\n      *pfVar25 = (float10)Var37;\n      bVar32 = (uVar7 & 0x8080) == 0;\n      if (bVar32) {\n        uVar5 = uVar5 >> 0x10;\n      }\n      if (bVar32) {\n        puVar19 = (uint *)((long)puVar18 + 6);\n      }\n      *(undefined8 *)((long)pfVar25 + -8) = 0x403847;\n      __strncat_chk(__src,DAT_006103a0,\n                    (undefined *)\n                    ((long)__src +\n                    (0x7f - (long)((long)puVar19 + (-3 - (ulong)CARRY1((byte)uVar5,(byte)uVar5))))),\n                    0x80);\n      Var37 = *pfVar25;\n    }\n    puVar19 = __src;\n    if (bVar17 != 0) {\n      *pfVar25 = (float10)Var37;\n      *(undefined8 *)((long)pfVar25 + -8) = 0x403859;\n      uVar14 = FUN_00407590(__src);\n      *(float10 *)((long)pfVar25 + -0x10) = *pfVar25;\n      *(undefined8 *)((long)pfVar25 + -0x18) = 0x40387e;\n      __fprintf_chk(stderr,1,\"formatting output:\\n  value: %Lf\\n  humanized: %s\\n\",uVar14);\n    }\nLAB_0040388e:\n    do {\n      puVar18 = puVar19;\n      uVar7 = *puVar18 + 0xfefefeff & ~*puVar18;\n      uVar5 = uVar7 & 0x80808080;\n      puVar19 = puVar18 + 1;\n    } while (uVar5 == 0);\n    bVar32 = (uVar7 & 0x8080) == 0;\n    if (bVar32) {\n      uVar5 = uVar5 >> 0x10;\n    }\n    if (bVar32) {\n      puVar19 = (uint *)((long)puVar18 + 6);\n    }\n    puVar20 = (undefined *)\n              ((long)puVar19 + ((-3 - (ulong)CARRY1((byte)uVar5,(byte)uVar5)) - (long)__src));\n    if ((DAT_00610380 == (undefined *)0x0) || (DAT_00610380 <= puVar20)) {\n      if (DAT_00610388 <= puVar20 + 1) {\n        *(undefined8 *)((long)pfVar25 + -8) = 0x4038e9;\n        FUN_00402bd0();\n      }\n      *(undefined8 *)((long)pfVar25 + -8) = 0x4038f8;\n      strcpy(DAT_00610390,(char *)__src);\n    }\n    else {\n      *(undefined **)((long)pfVar25 + 0x70) = DAT_00610380;\n      *(undefined8 *)((long)pfVar25 + -8) = 0x403e28;\n      FUN_00405530(__src,DAT_00610390,DAT_00610388,(undefined *)((long)pfVar25 + 0x70),DAT_00610258,\n                   2);\n      if (DAT_00610338 != 0) {\n        *(undefined8 *)((long)pfVar25 + -8) = 0x403e41;\n        uVar14 = FUN_00407590(DAT_00610390);\n        *(undefined8 *)((long)pfVar25 + -8) = 0x403e5c;\n        __fprintf_chk(stderr,1,\"  After padding: %s\\n\",uVar14);\n      }\n    }\n    if (DAT_00610368 != (char *)0x0) {\n      *(undefined8 *)((long)pfVar25 + -8) = 0x403910;\n      fputs_unlocked(DAT_00610368,stdout);\n    }\n    *(undefined8 *)((long)pfVar25 + -8) = 0x403928;\n    fputs_unlocked(DAT_00610390,stdout);\n    if (DAT_00610360 == (char *)0x0) {\n      return 1;\n    }\n    *(undefined8 *)((long)pfVar25 + -8) = 0x403944;\n    fputs_unlocked(DAT_00610360,stdout);\n    return 1;\n  }\n  if (uVar3 - 3 < 2) {\n    *(undefined4 *)((long)pfVar25 + 0x20) = 0x400;\n    *(undefined8 *)((long)pfVar25 + 0x10) = DAT_0040c140;\n  }\n  else {\n    *(undefined4 *)((long)pfVar25 + 0x20) = 1000;\n    *(undefined8 *)((long)pfVar25 + 0x10) = DAT_0040c148;\n  }\n  fVar34 = fVar33;\n  if ((fVar33 < _DAT_0040c150) || (_DAT_0040c160 < fVar33)) {\n    uVar5 = 0;\n  }\n  else {\n    uVar5 = 0;\n    while( true ) {\n      fVar35 = -fVar34;\n      if ((float10)0 <= fVar34) {\n        fVar35 = fVar34;\n      }\n      in_ST3 = in_ST2;\n      if (fVar35 < (float10)*(int *)((long)pfVar25 + 0x20)) break;\n      fVar34 = fVar34 / (float10)*(int *)((long)pfVar25 + 0x20);\n      uVar5 = uVar5 + 1;\n    }\n  }\n  if (DAT_00610338 != 0) {\n    *(float10 *)((long)pfVar25 + 0x30) = fVar33;\n    *(float10 *)((long)pfVar25 + -0x10) = fVar34;\n    *(float10 *)((long)pfVar25 + 0x20) = fVar34;\n    *(undefined8 *)((long)pfVar25 + -0x18) = 0x403efb;\n    __fprintf_chk(*(undefined8 *)((long)pfVar25 + 0x10),stderr,1,\n                  \"  scaled value to %Lf * %0.f ^ %u\\n\",uVar5);\n    fVar33 = *(float10 *)((long)pfVar25 + 0x30);\n    fVar34 = *(float10 *)((long)pfVar25 + 0x20);\n  }\n  uVar21 = (ulong)DAT_00610338;\n  fVar35 = in_ST2;\n  bVar17 = DAT_00610338;\n  if (DAT_00610260 != 0xffffffffffffffff) {\n    uVar31 = (ulong)(uVar5 * 3);\n    if ((long)DAT_00610260 < (long)(ulong)(uVar5 * 3)) {\n      uVar31 = DAT_00610260;\n    }\n    iVar4 = (int)uVar31;\n    if (iVar4 == 0) goto LAB_00403d0d;\n    iVar6 = iVar4 + -1;\n    if (iVar6 == 0) goto LAB_00403e7f;\n    fVar35 = (float10)_DAT_0040c130;\n    fVar36 = fVar35;\n    iVar22 = iVar6;\n    do {\n      fVar36 = fVar36 * fVar35;\n      iVar22 = iVar22 + -1;\n    } while (iVar22 != 0);\n    *(undefined2 *)((long)pfVar25 + 0x4e) = in_FPUControlWord;\n    *(ushort *)((long)pfVar25 + 0x4c) =\n         *(ushort *)((long)pfVar25 + 0x4e) & 0xff |\n         (ushort)(byte)((ulong)*(ushort *)((long)pfVar25 + 0x4e) >> 8) << 8 | 0xc00;\n    *(long *)((long)pfVar25 + 0x20) = (long)ROUND((fVar36 * fVar34) / _DAT_0040c170);\n    fVar38 = (float10)*(long *)((long)pfVar25 + 0x20) * _DAT_0040c170;\n    fVar34 = fVar36 * fVar34 - fVar38;\n    fVar36 = (float10)*(double *)((long)pfVar25 + 0x10);\n    pfVar27 = pfVar25;\n    switch(uVar28) {\n    case 0:\n      goto LAB_00403a1f;\n    case 1:\n      goto LAB_00403c10;\n    case 2:\n      goto LAB_00403b7e;\n    case 3:\n      *(long *)((long)pfVar25 + 0x20) = (long)ROUND(fVar34);\n      fVar39 = (float10)*(long *)((long)pfVar25 + 0x20) + fVar38;\n      break;\n    case 4:\n      goto LAB_00403bd6;\n    default:\n      goto switchD_004033ed_caseD_5;\n    }\n    goto LAB_00403a62;\n  }\n  fVar36 = -fVar34;\n  if ((float10)0 <= fVar34) {\n    fVar36 = fVar34;\n  }\n  in_ST3 = in_ST2;\n  if ((float10)_DAT_0040c130 <= fVar36) {\nLAB_00403d0d:\n    *(undefined2 *)((long)pfVar25 + 0x4e) = in_FPUControlWord;\n    *(ushort *)((long)pfVar25 + 0x4c) =\n         *(ushort *)((long)pfVar25 + 0x4e) & 0xff |\n         (ushort)(byte)((ulong)*(ushort *)((long)pfVar25 + 0x4e) >> 8) << 8 | 0xc00;\n    *(long *)((long)pfVar25 + 0x20) = (long)ROUND(fVar34 / _DAT_0040c170);\n    fVar38 = (float10)*(long *)((long)pfVar25 + 0x20) * _DAT_0040c170;\n    fVar34 = fVar34 - fVar38;\n    fVar36 = (float10)*(double *)((long)pfVar25 + 0x10);\n    switch(uVar28) {\n    case 0:\n      iVar4 = 0;\n      break;\n    case 1:\n      iVar4 = 0;\n      goto LAB_00403c10;\n    case 2:\n      iVar4 = 0;\n      goto LAB_00403b7e;\n    case 3:\n      *(long *)((long)pfVar25 + 0x20) = (long)ROUND(fVar34);\n      fVar39 = (float10)*(long *)((long)pfVar25 + 0x20) + fVar38;\n      goto LAB_00403a73;\n    case 4:\n      iVar4 = 0;\n      goto LAB_00403bd6;\n    default:\nswitchD_00403d49_caseD_5:\n      fVar39 = (float10)0;\n      goto LAB_00403a7d;\n    }\n    goto LAB_00403a1f;\n  }\nLAB_00403e7f:\n  *(undefined2 *)((long)pfVar25 + 0x4e) = in_FPUControlWord;\n  *(ushort *)((long)pfVar25 + 0x4c) =\n       *(ushort *)((long)pfVar25 + 0x4e) & 0xff |\n       (ushort)(byte)((ulong)*(ushort *)((long)pfVar25 + 0x4e) >> 8) << 8 | 0xc00;\n  *(long *)((long)pfVar25 + 0x20) = (long)ROUND((fVar34 * (float10)_DAT_0040c130) / _DAT_0040c170);\n  fVar38 = (float10)*(long *)((long)pfVar25 + 0x20) * _DAT_0040c170;\n  fVar34 = fVar34 * (float10)_DAT_0040c130 - fVar38;\n  fVar36 = (float10)*(double *)((long)pfVar25 + 0x10);\n  in_ST3 = in_ST2;\n  switch(uVar28) {\n  case 0:\n    iVar4 = 1;\n    goto LAB_00403a1f;\n  case 1:\n    iVar4 = 1;\nLAB_00403c10:\n    fVar34 = -fVar34;\n    *(long *)((long)pfVar25 + 0x40) = (long)ROUND(fVar34);\nLAB_00403b9a:\n    *(long *)((long)pfVar25 + 0x20) = *(long *)((long)pfVar25 + 0x40);\n    *(ulong *)((long)pfVar25 + 0x20) =\n         -(*(long *)((long)pfVar25 + 0x40) +\n          (ulong)((float10)*(long *)((long)pfVar25 + 0x20) < fVar34));\n    fVar39 = (float10)*(long *)((long)pfVar25 + 0x20);\n    break;\n  case 2:\n    iVar4 = 1;\nLAB_00403b7e:\n    if (fVar34 < (float10)0) {\n      fVar34 = -fVar34;\n      *(long *)((long)pfVar25 + 0x40) = (long)ROUND(fVar34);\n      goto LAB_00403b9a;\n    }\nLAB_00403a1f:\n    *(long *)((long)pfVar25 + 0x20) = (long)ROUND(fVar34);\n    fVar39 = (float10)*(long *)((long)pfVar25 + 0x20);\n    if (fVar39 < fVar34) {\n      *(long *)((long)pfVar25 + 0x20) = *(long *)((long)pfVar25 + 0x20) + 1;\n      fVar39 = (float10)*(long *)((long)pfVar25 + 0x20);\n    }\n    break;\n  case 3:\n    *(long *)((long)pfVar25 + 0x20) = (long)ROUND(fVar34);\n    fVar39 = (float10)*(long *)((long)pfVar25 + 0x20) + fVar38;\n    goto LAB_00403c5d;\n  case 4:\n    iVar4 = 1;\nLAB_00403bd6:\n    if (fVar34 < (float10)0) {\n      *(long *)((long)pfVar25 + 0x20) = (long)ROUND(fVar34 - (float10)_DAT_0040c13c);\n      fVar39 = (float10)*(long *)((long)pfVar25 + 0x20);\n    }\n    else {\n      *(long *)((long)pfVar25 + 0x20) = (long)ROUND(fVar34 + (float10)_DAT_0040c13c);\n      fVar39 = (float10)*(long *)((long)pfVar25 + 0x20);\n    }\n    break;\n  default:\n    goto switchD_00403d49_caseD_5;\n  }\n  fVar39 = fVar39 + fVar38;\n  fVar35 = in_ST2;\n  in_ST3 = in_ST2;\n  if (iVar4 == 0) goto LAB_00403a73;\n  fVar35 = (float10)_DAT_0040c130;\n  iVar6 = iVar4 + -1;\n  if (iVar6 == 0) {\nLAB_00403c5d:\n    fVar39 = fVar39 / (float10)_DAT_0040c130;\n    fVar35 = in_ST2;\n    in_ST3 = in_ST2;\n    goto LAB_00403a73;\n  }\nLAB_00403a62:\n  do {\n    fVar34 = fVar35;\n    do {\n      fVar34 = fVar34 * fVar35;\n      iVar6 = iVar6 + -1;\n    } while (iVar6 != 0);\n    fVar39 = fVar39 / fVar34;\n    fVar35 = in_ST2;\n    in_ST3 = in_ST2;\n    bVar17 = (byte)uVar21;\nLAB_00403a73:\n    if (fVar39 < (float10)0) {\n      fVar34 = -fVar39;\n      if (fVar36 <= -fVar39) goto LAB_00403a85;\nLAB_00403cec:\n      fVar36 = in_ST0;\n      uVar7 = (uint)(uVar5 != 0 && fVar34 < (float10)_DAT_0040c130);\n    }\n    else {\nLAB_00403a7d:\n      if (fVar36 <= fVar39) {\nLAB_00403a85:\n        uVar5 = uVar5 + 1;\n        fVar39 = fVar39 / fVar36;\n      }\n      if (fVar39 != (float10)0) {\n        fVar34 = fVar39;\n        if (fVar39 < (float10)0) {\n          fVar34 = -fVar39;\n        }\n        goto LAB_00403cec;\n      }\n      uVar7 = 0;\n      fVar36 = in_ST0;\n    }\n    in_ST0 = in_ST3;\n    if (bVar17 != 0) {\n      *(float10 *)((long)pfVar25 + 0x20) = fVar33;\n      *(uint *)((long)pfVar25 + 0x30) = uVar7;\n      *(float10 *)((long)pfVar25 + -0x10) = fVar39;\n      *pfVar25 = fVar39;\n      *(undefined8 *)((long)pfVar25 + -0x18) = 0x403dc5;\n      __fprintf_chk(*(undefined8 *)((long)pfVar25 + 0x10),stderr,1,\n                    \"  after rounding, value=%Lf * %0.f ^ %u\\n\",uVar5);\n      fVar33 = *(float10 *)((long)pfVar25 + 0x20);\n      fVar39 = *pfVar25;\n    }\n    pcVar13 = \"(error)\";\n    *puVar29 = 0x664c2a2e;\n    *(undefined2 *)(puVar29 + 1) = 0x7325;\n    *(undefined *)((long)puVar29 + 6) = 0;\n    if (uVar5 < 9) {\n      pcVar13 = *(char **)(&UNK_0040bcc0 + (ulong)uVar5 * 8);\n    }\n    *(float10 *)((long)pfVar25 + 0x10) = fVar33;\n    uVar21 = 0x80;\n    __src = (uint *)((long)pfVar25 + 0xb0);\n    *(char **)((long)pfVar25 + -0x10) = pcVar13;\n    *(float10 *)((long)pfVar25 + -0x20) = fVar39;\n    *pfVar25 = fVar39;\n    *(undefined8 *)(pfVar25 + -4) = 0x403b2a;\n    in_ST2 = in_ST0;\n    uVar7 = __snprintf_chk(__src,0x7f,1,0x80,(undefined *)((long)pfVar25 + 0x70));\n    Var37 = *(unkbyte10 *)((long)pfVar25 + 0x10);\n    if (uVar7 < 0x7f) {\n      if ((uVar5 != 0) && (uVar3 == 4)) {\n        *pfVar25 = (float10)Var37;\n        *(undefined8 *)((long)pfVar25 + -8) = 0x403feb;\n        __strncat_chk(__src,&DAT_0040a35f,0x7f - (long)(int)uVar7,0x80);\n        Var37 = *pfVar25;\n      }\n      if (DAT_00610338 != 0) {\n        *pfVar25 = (float10)Var37;\n        *(undefined8 *)((long)pfVar25 + -8) = 0x403f1e;\n        uVar14 = FUN_00407590(__src);\n        *(undefined8 *)((long)pfVar25 + -8) = 0x403f39;\n        __fprintf_chk(stderr,1,\"  returning value: %s\\n\",uVar14);\n        Var37 = *pfVar25;\n        goto LAB_004037ea;\n      }\n      puVar19 = __src;\n      if (DAT_006103a0 == (char *)0x0) goto LAB_0040388e;\n      goto LAB_004037f9;\n    }\n    *(undefined8 *)((long)pfVar25 + -8) = 0x40414f;\n    uVar14 = dcgettext(0,\"failed to prepare value \\'%Lf\\' for printing\",5);\n    *(ulong *)((long)pfVar25 + -8) = uVar21;\n    pfVar27 = (float10 *)((long)pfVar25 + -0x10);\n    *(ulong *)((long)pfVar25 + -0x10) = uVar21;\n    *(float10 *)((long)pfVar25 + -0x10) = *pfVar25;\n    *(undefined8 *)((long)pfVar25 + -0x18) = 0x404168;\n    iVar6 = error(1,0,uVar14);\n    fVar33 = in_ST3;\nswitchD_004033ed_caseD_5:\n    fVar39 = (float10)0;\n    pfVar25 = pfVar27;\n  } while( true );\nLAB_004040ef:\n  *pfVar25 = *pfVar25;\n  *(undefined8 *)((long)pfVar25 + -8) = 0x404103;\n  uVar14 = dcgettext(0,\"failed to prepare value \\'%Lf\\' for printing\",5);\n  *(ulong *)((long)pfVar25 + -8) = uVar21;\n  pfVar26 = (float *)((long)pfVar25 + -0x10);\n  *(ulong *)((long)pfVar25 + -0x10) = uVar21;\n  *(float10 *)((long)pfVar25 + -0x10) = *pfVar25;\n  *(undefined8 *)((long)pfVar25 + -0x18) = 0x40411c;\n  error(1,0,uVar14);\n  bVar17 = extraout_DL;\nLAB_0040411c:\n  uVar5 = (uint)__src;\n  uVar31 = 0;\n  fVar33 = (float10)1;\n  pfVar24 = pfVar26;\nLAB_00402eb4:\n  if (bVar17 == 0) {\n    *(float10 *)((long)pfVar24 + 0x70) = *(float10 *)((long)pfVar24 + 0x70) * fVar33;\n  }\n  else {\n    *(float10 *)((long)pfVar24 + -0x10) = fVar33;\n    *(float10 *)((long)pfVar24 + 0x10) = fVar33;\n    *(undefined8 *)((long)pfVar24 + -0x18) = 0x40348e;\n    __fprintf_chk(stderr,1,\"  suffix power=%d^%d = %Lf\\n\",uVar21);\n    fVar33 = *(float10 *)((long)pfVar24 + 0x10) * *(float10 *)((long)pfVar24 + 0x70);\n    *(float10 *)((long)pfVar24 + 0x70) = fVar33;\n    if (DAT_00610338 != 0) {\n      *(float10 *)((long)pfVar24 + -0x10) = fVar33;\n      *(float10 *)((long)pfVar24 + -0x20) = fVar33;\n      *(undefined8 *)((long)pfVar24 + -0x28) = 0x4034da;\n      __fprintf_chk(stderr,1,\"  returning value: %Lf (%LG)\\n\");\n    }\n  }\n  pfVar25 = (float10 *)pfVar24;\n  if ((*(char **)((long)pfVar24 + 0x60) == (char *)0x0) ||\n     (**(char **)((long)pfVar24 + 0x60) == '\\0')) {\n    if ((uVar5 == 1) && (DAT_00610348 != '\\0')) {\n      *(undefined8 *)((long)pfVar24 + -8) = 0x40317e;\n      uVar14 = FUN_00407590();\n      *(undefined8 *)((long)pfVar24 + -8) = 0x403192;\n      uVar15 = dcgettext(0,\"large input value %s: possible precision loss\",5);\n      *(undefined8 *)((long)pfVar24 + -8) = 0x4031a3;\n      error(0,0,uVar15,uVar14);\n    }\n  }\n  else {\n    uVar5 = 5;\n    if (DAT_006103a8 != 3) {\n      *(undefined8 *)((long)pfVar24 + -8) = 0x402eff;\n      uVar14 = FUN_00407570(1);\n      *(undefined8 *)((long)pfVar24 + -8) = 0x402f0c;\n      uVar15 = FUN_00407570(0,pbVar30);\n      *(undefined8 *)((long)pfVar24 + -8) = 0x402f20;\n      uVar16 = dcgettext(0,\"invalid suffix in input %s: %s\",5);\n      *(undefined8 *)((long)pfVar24 + -8) = 0x402f38;\n      error(DAT_0061025c,0,uVar16,uVar15,uVar14);\n    }\n  }\n  goto LAB_00402f40;\n}\n\n",
            "funcName": "FUN_00402c00"
        },
        {
            "funcStartAddr": "0x4041a0",
            "funcEndAddr": "0x404341",
            "decompiledFuncCode": "\nundefined4 FUN_004041a0(byte *param_1,char param_2)\n\n{\n  char *pcVar1;\n  char cVar2;\n  uint uVar3;\n  ushort **ppuVar4;\n  byte *pbVar5;\n  byte bVar6;\n  uint uVar7;\n  undefined4 uVar8;\n  long lVar9;\n  \n  lVar9 = 0;\n  uVar8 = 1;\n  uVar3 = DAT_00610254;\n  do {\n    lVar9 = lVar9 + 1;\n    bVar6 = *param_1;\n    pbVar5 = param_1;\n    if (uVar3 == 0x80) {\n      if (bVar6 == 0) {\nLAB_00404213:\n        cVar2 = FUN_00402c00(param_1,lVar9);\n        bVar6 = DAT_00610250;\n        if (cVar2 == '\\0') {\n          uVar8 = 0;\n        }\n        if (param_2 != '\\0') {\n          pbVar5 = (byte *)stdout->_IO_write_ptr;\n          if (pbVar5 < stdout->_IO_write_end) {\n            stdout->_IO_write_ptr = (char *)(pbVar5 + 1);\n            *pbVar5 = bVar6;\n          }\n          else {\n            __overflow(stdout,(uint)DAT_00610250);\n          }\n        }\n        return uVar8;\n      }\n      ppuVar4 = __ctype_b_loc();\n      while (((*(byte *)(*ppuVar4 + bVar6) & 1) != 0 || (bVar6 == 10))) {\n        pbVar5 = pbVar5 + 1;\n        bVar6 = *pbVar5;\n        if (bVar6 == 0) goto LAB_00404213;\n      }\n      bVar6 = *pbVar5;\n      while( true ) {\n        if (bVar6 == 0) goto LAB_00404213;\n        if (((*(byte *)(*ppuVar4 + bVar6) & 1) != 0) || (bVar6 == 10)) break;\n        pbVar5 = pbVar5 + 1;\n        bVar6 = *pbVar5;\n      }\n      bVar6 = *pbVar5;\nLAB_004042ac:\n      if (bVar6 == 0) goto LAB_00404213;\n    }\n    else {\n      if ((int)(char)bVar6 == uVar3) goto LAB_004042ac;\n      if (bVar6 == 0) goto LAB_00404213;\n      do {\n        pbVar5 = pbVar5 + 1;\n        if (*pbVar5 == 0) goto LAB_00404213;\n      } while ((int)(char)*pbVar5 != uVar3);\n    }\n    *pbVar5 = 0;\n    cVar2 = FUN_00402c00(param_1,lVar9);\n    uVar3 = DAT_00610254;\n    if (cVar2 == '\\0') {\n      uVar8 = 0;\n    }\n    pcVar1 = stdout->_IO_write_ptr;\n    uVar7 = 0x20;\n    if (DAT_00610254 != 0x80) {\n      uVar7 = DAT_00610254;\n    }\n    if (pcVar1 < stdout->_IO_write_end) {\n      stdout->_IO_write_ptr = pcVar1 + 1;\n      *pcVar1 = (char)uVar7;\n    }\n    else {\n      __overflow(stdout,uVar7 & 0xff);\n      uVar3 = DAT_00610254;\n    }\n    param_1 = pbVar5 + 1;\n  } while( true );\n}\n\n",
            "funcName": "FUN_004041a0"
        },
        {
            "funcStartAddr": "0x404360",
            "funcEndAddr": "0x404a0d",
            "decompiledFuncCode": "\nvoid FUN_00404360(int param_1)\n\n{\n  FILE *pFVar1;\n  int iVar2;\n  undefined8 uVar3;\n  char *pcVar4;\n  byte **ppbVar5;\n  undefined8 uVar7;\n  char *pcVar8;\n  long lVar9;\n  byte *pbVar10;\n  byte *pbVar11;\n  bool bVar12;\n  bool bVar13;\n  byte bVar14;\n  undefined auVar15 [16];\n  byte *local_88;\n  char *local_80;\n  byte *local_78 [5];\n  char *local_50;\n  char *local_48;\n  char *local_40;\n  char *local_38;\n  char *local_30;\n  undefined8 local_28;\n  undefined8 local_20;\n  byte **ppbVar6;\n  \n  uVar7 = DAT_006103d8;\n  bVar14 = 0;\n  if (param_1 != 0) {\n    uVar3 = dcgettext(0,\"Try \\'%s --help\\' for more information.\\n\",5);\n    __fprintf_chk(stderr,1,uVar3,uVar7);\n    goto LAB_0040439f;\n  }\n  uVar3 = dcgettext(0,\"Usage: %s [OPTION]... [NUMBER]...\\n\",5);\n  __printf_chk(1,uVar3,uVar7);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \"Reformat NUMBER(s), or the numbers from standard input if none are specified.\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \"\\nMandatory arguments to long options are mandatory for short options too.\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\"      --debug          print warnings about invalid input\\n\",5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \"  -d, --delimiter=X    use X instead of whitespace for field delimiter\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \"      --field=FIELDS   replace the numbers in these input fields (default=1)\\n                         see FIELDS below\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \"      --format=FORMAT  use printf style floating-point FORMAT;\\n                         see FORMAT below for details\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \"      --from=UNIT      auto-scale input numbers to UNITs; default is \\'none\\';\\n                         see UNIT below\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \"      --from-unit=N    specify the input unit size (instead of the default 1)\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \"      --grouping       use locale-defined grouping of digits, e.g. 1,000,000\\n                         (which means it has no effect in the C/POSIX locale)\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \"      --header[=N]     print (without converting) the first N header lines;\\n                         N defaults to 1 if not specified\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \"      --invalid=MODE   failure mode for invalid numbers: MODE can be:\\n                         abort (default), fail, warn, ignore\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \"      --padding=N      pad the output to N characters; positive N will\\n                         right-align; negative N will left-align;\\n                         padding is ignored if the output is wider than N;\\n                         the default is to automatically pad if a whitespace\\n                         is found\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \"      --round=METHOD   use METHOD for rounding when scaling; METHOD can be:\\n                         up, down, from-zero (default), towards-zero, nearest\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \"      --suffix=SUFFIX  add SUFFIX to output numbers, and accept optional\\n                         SUFFIX in input numbers\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \"      --to=UNIT        auto-scale output numbers to UNITs; see UNIT below\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \"      --to-unit=N      the output unit size (instead of the default 1)\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\"  -z, --zero-terminated    line delimiter is NUL, not newline\\n\",5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\"      --help     display this help and exit\\n\",5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\"      --version  output version information and exit\\n\",5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\"\\nUNIT options:\\n\",5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \"  none       no auto-scaling is done; suffixes will trigger an error\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \"  auto       accept optional single/two letter suffix:\\n               1K = 1000,\\n               1Ki = 1024,\\n               1M = 1000000,\\n               1Mi = 1048576,\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \"  si         accept optional single letter suffix:\\n               1K = 1000,\\n               1M = 1000000,\\n               ...\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \"  iec        accept optional single letter suffix:\\n               1K = 1024,\\n               1M = 1048576,\\n               ...\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \"  iec-i      accept optional two-letter suffix:\\n               1Ki = 1024,\\n               1Mi = 1048576,\\n               ...\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \"\\nFIELDS supports cut(1) style field ranges:\\n  N    N\\'th field, counted from 1\\n  N-   from N\\'th field, to end of line\\n  N-M  from N\\'th to M\\'th field (inclusive)\\n  -M   from first to M\\'th field (inclusive)\\n  -    all fields\\nMultiple fields/ranges can be separated with commas\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \"\\nFORMAT must be suitable for printing one floating-point argument \\'%f\\'.\\nOptional quote (%\\'f) will enable --grouping (if supported by current locale).\\nOptional width value (%10f) will pad output. Optional zero (%010f) width\\nwill zero pad the number. Optional negative values (%-10f) will left align.\\nOptional precision (%.1f) will override the input determined precision.\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  uVar7 = DAT_006103d8;\n  uVar3 = dcgettext(0,\n                    \"\\nExit status is 0 if all input numbers were successfully converted.\\nBy default, %s will stop at the first conversion error with exit status 2.\\nWith --invalid=\\'fail\\' a warning is printed for each conversion error\\nand the exit status is 2.  With --invalid=\\'warn\\' each conversion error is\\ndiagnosed, but the exit status is 0.  With --invalid=\\'ignore\\' conversion\\nerrors are not diagnosed and the exit status is 0.\\n\"\n                    ,5);\n  __printf_chk(1,uVar3,uVar7);\n  uVar7 = DAT_006103d8;\n  auVar15 = dcgettext(0,\n                      \"\\nExamples:\\n  $ %s --to=si 1000\\n            -> \\\"1.0K\\\"\\n  $ %s --to=iec 2048\\n           -> \\\"2.0K\\\"\\n  $ %s --to=iec-i 4096\\n           -> \\\"4.0Ki\\\"\\n  $ echo 1K | %s --from=si\\n           -> \\\"1000\\\"\\n  $ echo 1K | %s --from=iec\\n           -> \\\"1024\\\"\\n  $ df -B1 | %s --header --field 2-4 --to=si\\n  $ ls -l  | %s --header --field 5 --to=iec\\n  $ ls -lh | %s --header --field 5 --from=iec --padding=10\\n  $ ls -lh | %s --header --field 5 --from=iec --format %%10f\\n\"\n                      ,5);\n  __printf_chk(1,SUB168(auVar15,0),uVar7,uVar7,uVar7,uVar7,uVar7,uVar7,uVar7,uVar7,uVar7,\n               SUB168(auVar15 >> 0x40,0));\n  local_88 = &DAT_0040a123;\n  local_80 = \"test invocation\";\n  local_78[0] = (byte *)0x40a19d;\n  local_78[1] = (byte *)0x40a135;\n  local_78[2] = (byte *)0x40a14b;\n  local_78[3] = (byte *)0x40a155;\n  local_78[4] = (byte *)0x40a164;\n  local_50 = \"sha2 utilities\";\n  local_48 = \"sha384sum\";\n  local_40 = \"sha2 utilities\";\n  local_38 = \"sha512sum\";\n  local_30 = \"sha2 utilities\";\n  local_28 = 0;\n  local_20 = 0;\n  ppbVar5 = &local_88;\n  do {\n    ppbVar6 = ppbVar5;\n    ppbVar5 = ppbVar6 + 2;\n    pbVar11 = *ppbVar5;\n    bVar12 = false;\n    bVar13 = pbVar11 == (byte *)0x0;\n    if (bVar13) break;\n    lVar9 = 7;\n    pbVar10 = (byte *)\"numfmt\";\n    do {\n      if (lVar9 == 0) break;\n      lVar9 = lVar9 + -1;\n      bVar12 = *pbVar10 < *pbVar11;\n      bVar13 = *pbVar10 == *pbVar11;\n      pbVar10 = pbVar10 + (ulong)bVar14 * -2 + 1;\n      pbVar11 = pbVar11 + (ulong)bVar14 * -2 + 1;\n    } while (bVar13);\n  } while ((!bVar12 && !bVar13) != bVar12);\n  pcVar4 = (char *)ppbVar6[3];\n  if ((byte *)pcVar4 == (byte *)0x0) {\n    uVar7 = dcgettext(0,\"\\n%s online help: <%s>\\n\",5);\n    __printf_chk(1,uVar7,\"GNU coreutils\",\"https://www.gnu.org/software/coreutils/\");\n    pcVar4 = setlocale(5,(char *)0x0);\n    if (pcVar4 != (char *)0x0) {\n      iVar2 = strncmp(pcVar4,\"en_\",3);\n      if (iVar2 != 0) {\n        pcVar4 = \"numfmt\";\n        goto LAB_004049e3;\n      }\n    }\n    pcVar4 = \"numfmt\";\n    uVar7 = dcgettext(0,\"Full documentation at: <%s%s>\\n\",5);\n    pcVar8 = \" invocation\";\n    __printf_chk(1,uVar7,\"https://www.gnu.org/software/coreutils/\",\"numfmt\");\n  }\n  else {\n    uVar7 = dcgettext(0,\"\\n%s online help: <%s>\\n\",5);\n    __printf_chk(1,uVar7,\"GNU coreutils\",\"https://www.gnu.org/software/coreutils/\");\n    pcVar8 = setlocale(5,(char *)0x0);\n    if (pcVar8 != (char *)0x0) {\n      iVar2 = strncmp(pcVar8,\"en_\",3);\n      if (iVar2 != 0) {\nLAB_004049e3:\n        uVar7 = dcgettext(0,\"Report %s translation bugs to <https://translationproject.org/team/>\\n\"\n                          ,5);\n        __printf_chk(1,uVar7,\"numfmt\");\n      }\n    }\n    pcVar8 = \" invocation\";\n    uVar7 = dcgettext(0,\"Full documentation at: <%s%s>\\n\",5);\n    __printf_chk(1,uVar7,\"https://www.gnu.org/software/coreutils/\",\"numfmt\");\n    if (pcVar4 != \"numfmt\") {\n      pcVar8 = \"\";\n    }\n  }\n  uVar7 = dcgettext(0,\"or available locally via: info \\'(coreutils) %s%s\\'\\n\",5);\n  __printf_chk(1,uVar7,pcVar4,pcVar8);\nLAB_0040439f:\n                    /* WARNING: Subroutine does not return */\n  exit(param_1);\n}\n\n",
            "funcName": "FUN_00404360"
        },
        {
            "funcStartAddr": "0x404a10",
            "funcEndAddr": "0x404a22",
            "decompiledFuncCode": "\nulong FUN_00404a10(int *param_1,int *param_2)\n\n{\n  int iVar1;\n  ulong uVar2;\n  \n  uVar2 = 0xffffffff;\n  iVar1 = *param_2;\n  if (iVar1 <= *param_1) {\n    uVar2 = (ulong)(*param_1 != iVar1 && iVar1 <= *param_1);\n  }\n  return uVar2;\n}\n\n",
            "funcName": "FUN_00404a10"
        },
        {
            "funcStartAddr": "0x404a30",
            "funcEndAddr": "0x404aee",
            "decompiledFuncCode": "\nvoid FUN_00404a30(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined8 *puVar1;\n  long lVar2;\n  \n  if (DAT_00610568 == DAT_006103c0) {\n    if (DAT_00610560 == 0) {\n      if (DAT_006103c0 == 0) {\n        lVar2 = 0x80;\n        DAT_006103c0 = 8;\n      }\n      else {\n        lVar2 = DAT_006103c0 << 4;\n        if ((lVar2 < 0) || (DAT_006103c0 >> 0x3c != 0)) goto LAB_00404ae7;\n      }\n    }\n    else {\n      if (0x555555555555554 < DAT_006103c0) {\nLAB_00404ae7:\n                    /* WARNING: Subroutine does not return */\n        FUN_00407da0();\n      }\n      DAT_006103c0 = DAT_006103c0 + 1 + (DAT_006103c0 >> 1);\n      lVar2 = DAT_006103c0 * 0x10;\n    }\n    DAT_00610560 = FUN_00407bb0(DAT_00610560,lVar2);\n  }\n  puVar1 = (undefined8 *)(DAT_00610560 + DAT_00610568 * 0x10);\n  *puVar1 = param_1;\n  puVar1[1] = param_2;\n  DAT_00610568 = DAT_00610568 + 1;\n  return;\n}\n\n",
            "funcName": "FUN_00404a30"
        },
        {
            "funcStartAddr": "0x404b00",
            "funcEndAddr": "0x40506d",
            "decompiledFuncCode": "\nvoid FUN_00404b00(byte *param_1,uint param_2)\n\n{\n  undefined8 *puVar1;\n  byte bVar2;\n  bool bVar3;\n  bool bVar4;\n  bool bVar5;\n  ushort **ppuVar6;\n  ulong uVar7;\n  size_t sVar8;\n  void *__ptr;\n  undefined8 uVar9;\n  undefined8 uVar10;\n  long lVar11;\n  ulong *puVar12;\n  undefined8 extraout_RDX;\n  byte *pbVar13;\n  char *pcVar14;\n  byte *pbVar15;\n  ulong *__dest;\n  ulong uVar16;\n  ulong *__ptr_00;\n  ulong uVar17;\n  bool bVar18;\n  bool bVar19;\n  ulong local_50;\n  \n  bVar18 = false;\n  bVar19 = (param_2 & 1) == 0;\n  if (!bVar19) {\n    lVar11 = 2;\n    pbVar13 = param_1;\n    pbVar15 = &DAT_0040dc7a;\n    do {\n      if (lVar11 == 0) break;\n      lVar11 = lVar11 + -1;\n      bVar18 = *pbVar13 < *pbVar15;\n      bVar19 = *pbVar13 == *pbVar15;\n      pbVar13 = pbVar13 + 1;\n      pbVar15 = pbVar15 + 1;\n    } while (bVar19);\n    if ((!bVar18 && !bVar19) == bVar18) {\n      param_1 = param_1 + 1;\n      uVar16 = 1;\n      bVar18 = true;\n      goto LAB_00404b40;\n    }\n  }\n  uVar16 = 0;\n  bVar18 = false;\nLAB_00404b40:\n  bVar5 = false;\n  bVar19 = false;\n  local_50 = 1;\n  bVar4 = bVar18;\n  do {\n    bVar2 = *param_1;\n    if (bVar2 == 0x2d) {\n      if (bVar18) {\n        if ((param_2 & 4) == 0) {\n          uVar10 = dcgettext(0,\"invalid field range\",5);\n        }\n        else {\n          uVar10 = dcgettext(0,\"invalid byte or character range\",5);\n        }\n        goto LAB_00404f0b;\n      }\n      bVar5 = (bool)(uVar16 == 0 & bVar4);\n      if (bVar5) {\n        if ((param_2 & 4) == 0) {\nLAB_00404fd8:\n          uVar10 = dcgettext(0,\"fields are numbered from 1\",5);\n        }\n        else {\n          uVar10 = dcgettext(0,\"byte/character positions are numbered from 1\",5);\n        }\n        goto LAB_00404f0b;\n      }\n      if (bVar4) {\n        uVar17 = 0;\n        local_50 = uVar16;\n        bVar18 = bVar4;\n      }\n      else {\n        uVar17 = 0;\n        local_50 = 1;\n        bVar18 = true;\n        bVar5 = bVar4;\n      }\n    }\n    else if (((bVar2 == 0x2c) || (ppuVar6 = __ctype_b_loc(), (*(byte *)(*ppuVar6 + bVar2) & 1) != 0)\n             ) || (bVar2 == 0)) {\n      if (bVar18) {\n        if (bVar4) {\n          if (!bVar19) goto LAB_00404bbb;\nLAB_00404d79:\n          if (uVar16 < local_50) goto LAB_00404f8f;\n          FUN_00404a30(local_50,uVar16);\n        }\n        else {\n          if (bVar19) goto LAB_00404d79;\n          if ((param_2 & 1) == 0) {\n            uVar10 = 5;\n            pcVar14 = \"invalid range with no endpoint: -\";\n            goto LAB_00404f04;\n          }\n          local_50 = 1;\nLAB_00404bbb:\n          FUN_00404a30(local_50,0xffffffffffffffff);\n        }\n        bVar2 = *param_1;\n      }\n      else {\n        if (uVar16 == 0) {\n          if ((param_2 & 4) == 0) goto LAB_00404fd8;\n          uVar10 = dcgettext(0,\"byte/character positions are numbered from 1\",5);\n          goto LAB_00404f0b;\n        }\n        FUN_00404a30(uVar16,uVar16);\n        bVar2 = *param_1;\n      }\n      if (bVar2 == 0) {\n        if (DAT_00610568 != 0) {\n          uVar17 = 0;\n          qsort(DAT_00610560,DAT_00610568,0x10,FUN_00404a10);\n          uVar16 = DAT_00610568;\n          __ptr_00 = DAT_00610560;\nLAB_00404c80:\n          do {\n            if (uVar16 <= uVar17) {\nLAB_00404d11:\n              DAT_00610568 = uVar16;\n              if ((param_2 & 2) != 0) {\n                DAT_00610560 = (ulong *)0x0;\n                DAT_00610568 = 0;\n                DAT_006103c0 = 0;\n                if (1 < *__ptr_00) {\n                  FUN_00404a30(1,*__ptr_00 - 1);\n                }\n                puVar12 = __ptr_00 + 2;\n                if (1 < uVar16) {\n                  do {\n                    if (puVar12[-1] + 1 != *puVar12) {\n                      FUN_00404a30(puVar12[-1] + 1,*puVar12 - 1);\n                    }\n                    puVar12 = puVar12 + 2;\n                  } while (__ptr_00 + uVar16 * 2 != puVar12);\n                }\n                if (__ptr_00[uVar16 * 2 + -1] != 0xffffffffffffffff) {\n                  FUN_00404a30(__ptr_00[uVar16 * 2 + -1] + 1,0xffffffffffffffff);\n                }\n                free(__ptr_00);\n                __ptr_00 = DAT_00610560;\n              }\n              DAT_00610568 = DAT_00610568 + 1;\n              DAT_00610560 = (ulong *)FUN_00407bb0(__ptr_00,DAT_00610568 * 0x10);\n              puVar1 = (undefined8 *)((long)DAT_00610560 + -0x10 + DAT_00610568 * 0x10);\n              puVar1[1] = 0xffffffffffffffff;\n              *puVar1 = 0xffffffffffffffff;\n              return;\n            }\n            while (uVar17 = uVar17 + 1, uVar17 < uVar16) {\n              __dest = __ptr_00 + uVar17 * 2;\n              puVar12 = __ptr_00 + uVar17 * 2 + -2;\n              uVar7 = puVar12[1];\n              if (uVar7 < *__dest) break;\n              do {\n                if (uVar7 <= __dest[1]) {\n                  uVar7 = __dest[1];\n                }\n                puVar12[1] = uVar7;\n                memmove(__dest,__ptr_00 + uVar17 * 2 + 2,(uVar16 - uVar17) * 0x10 - 0x10);\n                uVar16 = DAT_00610568 - 1;\n                __ptr_00 = DAT_00610560;\n                DAT_00610568 = uVar16;\n                if (uVar16 <= uVar17) goto LAB_00404c80;\n                puVar12 = DAT_00610560 + uVar17 * 2 + -2;\n                __dest = DAT_00610560 + uVar17 * 2;\n                uVar7 = puVar12[1];\n              } while (*__dest < uVar7 || *__dest == uVar7);\n              if (uVar16 <= uVar17) goto LAB_00404d11;\n            }\n          } while( true );\n        }\n        uVar10 = 5;\n        if ((param_2 & 4) != 0) {\n          uVar10 = dcgettext(0,\"missing list of byte/character positions\",5);\nLAB_00404f0b:\n          do {\n            error(0,0,uVar10);\n            FUN_00404360(1);\nLAB_00404f23:\n            pbVar13 = DAT_006103b8;\n            sVar8 = strspn((char *)DAT_006103b8,\"0123456789\");\n            __ptr = (void *)FUN_00407de0(pbVar13,sVar8);\n            uVar10 = FUN_00407590(__ptr);\n            if ((param_2 & 4) == 0) {\n              uVar9 = dcgettext(0,\"field number %s is too large\",5);\n            }\n            else {\n              uVar9 = dcgettext(0,\"byte/character offset %s is too large\",5);\n            }\n            error(0,0,uVar9,uVar10);\n            free(__ptr);\n            FUN_00404360();\nLAB_00404f8f:\n            uVar10 = 5;\n            pcVar14 = \"invalid decreasing range\";\nLAB_00404f04:\n            uVar10 = dcgettext(0,pcVar14,uVar10);\n          } while( true );\n        }\nLAB_00405086:\n        pcVar14 = \"missing list of fields\";\n        goto LAB_00404f04;\n      }\n      uVar17 = 0;\n      bVar5 = false;\n      bVar18 = false;\n      bVar4 = false;\n      bVar19 = false;\n    }\n    else {\n      if (9 < (int)(char)bVar2 - 0x30U) {\n        uVar10 = FUN_00407590(param_1);\n        if ((param_2 & 4) == 0) {\n          uVar9 = dcgettext(0,\"invalid field value %s\",5);\n        }\n        else {\n          uVar9 = dcgettext(0,\"invalid byte/character position %s\",5);\n        }\n        error(0,0,uVar9,uVar10);\n        FUN_00404360(1);\n        uVar10 = extraout_RDX;\n        goto LAB_00405086;\n      }\n      if ((!bVar5) || (DAT_006103b8 == (byte *)0x0)) {\n        DAT_006103b8 = param_1;\n      }\n      bVar3 = bVar18;\n      if (!bVar18) {\n        bVar4 = true;\n        bVar3 = bVar19;\n      }\n      if (0x1999999999999999 < uVar16) goto LAB_00404f23;\n      uVar17 = (long)((char)bVar2 + -0x30) + uVar16 * 10;\n      if (uVar17 < uVar16) goto LAB_00404f23;\n      if (uVar17 == 0xffffffffffffffff) goto LAB_00404f23;\n      bVar5 = true;\n      bVar19 = bVar3;\n    }\n    param_1 = param_1 + 1;\n    uVar16 = uVar17;\n  } while( true );\n}\n\n",
            "funcName": "FUN_00404b00"
        },
        {
            "funcStartAddr": "0x4050a0",
            "funcEndAddr": "0x4050d6",
            "decompiledFuncCode": "\nvoid FUN_004050a0(void)\n\n{\n  DAT_00610568 = 0;\n  DAT_006103c0 = 0;\n  free(DAT_00610560);\n  DAT_00610560 = (void *)0x0;\n  return;\n}\n\n",
            "funcName": "FUN_004050a0"
        },
        {
            "funcStartAddr": "0x4050e0",
            "funcEndAddr": "0x4050ea",
            "decompiledFuncCode": "\nvoid FUN_004050e0(void)\n\n{\n  FUN_00404360(1);\n  return;\n}\n\n",
            "funcName": "FUN_004050e0"
        },
        {
            "funcStartAddr": "0x4050f0",
            "funcEndAddr": "0x4051f3",
            "decompiledFuncCode": "\nlong FUN_004050f0(char *param_1,char **param_2,void *param_3,size_t param_4)\n\n{\n  bool bVar1;\n  long lVar2;\n  int iVar3;\n  size_t __n;\n  size_t sVar4;\n  long lVar5;\n  void *__s2;\n  char *__s1;\n  long local_58;\n  \n  __n = strlen(param_1);\n  __s1 = *param_2;\n  local_58 = -1;\n  lVar2 = local_58;\n  if (__s1 != (char *)0x0) {\n    bVar1 = false;\n    lVar2 = 0;\n    __s2 = param_3;\nLAB_00405187:\n    do {\n      lVar5 = lVar2;\n      iVar3 = strncmp(__s1,param_1,__n);\n      if (iVar3 == 0) {\n        sVar4 = strlen(__s1);\n        if (sVar4 == __n) {\n          return lVar5;\n        }\n        if (local_58 == -1) {\n          __s2 = (void *)((long)__s2 + param_4);\n          __s1 = param_2[lVar5 + 1];\n          lVar2 = lVar5 + 1;\n          local_58 = lVar5;\n          if (__s1 == (char *)0x0) break;\n          goto LAB_00405187;\n        }\n        if (param_3 == (void *)0x0) {\n          bVar1 = true;\n        }\n        else {\n          iVar3 = memcmp((void *)(local_58 * param_4 + (long)param_3),__s2,param_4);\n          if (iVar3 != 0) {\n            bVar1 = true;\n          }\n        }\n      }\n      __s2 = (void *)((long)__s2 + param_4);\n      __s1 = param_2[lVar5 + 1];\n      lVar2 = lVar5 + 1;\n    } while (__s1 != (char *)0x0);\n    lVar2 = -2;\n    if (!bVar1) {\n      lVar2 = local_58;\n    }\n  }\n  local_58 = lVar2;\n  return local_58;\n}\n\n",
            "funcName": "FUN_004050f0"
        },
        {
            "funcStartAddr": "0x405210",
            "funcEndAddr": "0x40527c",
            "decompiledFuncCode": "\nvoid FUN_00405210(undefined8 param_1,undefined8 param_2,long param_3)\n\n{\n  undefined8 uVar1;\n  undefined8 uVar2;\n  undefined8 uVar3;\n  \n  if (param_3 == -1) {\n    uVar1 = dcgettext(0,\"invalid argument %s for %s\",5);\n  }\n  else {\n    uVar1 = dcgettext(0,\"ambiguous argument %s for %s\",5);\n  }\n  uVar2 = FUN_00407570(1,param_1);\n  uVar3 = FUN_00407260(0,8,param_2);\n  error(0,0,uVar1,uVar3,uVar2);\n  return;\n}\n\n",
            "funcName": "FUN_00405210"
        },
        {
            "funcStartAddr": "0x405290",
            "funcEndAddr": "0x40539f",
            "decompiledFuncCode": "\nvoid FUN_00405290(long *param_1,void *param_2,size_t param_3)\n\n{\n  FILE *__stream;\n  int iVar1;\n  char *pcVar2;\n  undefined8 uVar3;\n  long lVar4;\n  void *__s2;\n  long lVar5;\n  void *__s1;\n  \n  __stream = stderr;\n  __s1 = (void *)0x0;\n  pcVar2 = (char *)dcgettext(0,\"Valid arguments are:\",5);\n  lVar4 = 0;\n  fputs_unlocked(pcVar2,__stream);\n  lVar5 = *param_1;\n  while (lVar5 != 0) {\n    while ((__s2 = param_2, lVar4 == 0 || (iVar1 = memcmp(__s1,__s2,param_3), iVar1 != 0))) {\n      lVar4 = lVar4 + 1;\n      uVar3 = FUN_00407590(lVar5);\n      __fprintf_chk(stderr,1,\"\\n  - %s\",uVar3);\n      lVar5 = param_1[lVar4];\n      param_2 = (void *)((long)__s2 + param_3);\n      __s1 = __s2;\n      if (lVar5 == 0) goto LAB_00405360;\n    }\n    lVar4 = lVar4 + 1;\n    param_2 = (void *)((long)__s2 + param_3);\n    uVar3 = FUN_00407590(lVar5);\n    __fprintf_chk(stderr,1,&DAT_0040c36b,uVar3);\n    lVar5 = param_1[lVar4];\n  }\nLAB_00405360:\n  pcVar2 = stderr->_IO_write_ptr;\n  if (pcVar2 < stderr->_IO_write_end) {\n    stderr->_IO_write_ptr = pcVar2 + 1;\n    *pcVar2 = '\\n';\n    return;\n  }\n  __overflow(stderr,10);\n  return;\n}\n\n",
            "funcName": "FUN_00405290"
        },
        {
            "funcStartAddr": "0x4053b0",
            "funcEndAddr": "0x40541d",
            "decompiledFuncCode": "\nlong FUN_004053b0(undefined8 param_1,undefined8 param_2,undefined8 param_3,undefined8 param_4,\n                 undefined8 param_5,code *param_6)\n\n{\n  long lVar1;\n  \n  lVar1 = FUN_004050f0(param_2,param_3,param_4,param_5);\n  if (lVar1 < 0) {\n    FUN_00405210(param_1,param_2,lVar1);\n    FUN_00405290(param_3,param_4,param_5);\n    (*param_6)();\n    lVar1 = -1;\n  }\n  return lVar1;\n}\n\n",
            "funcName": "FUN_004053b0"
        },
        {
            "funcStartAddr": "0x405420",
            "funcEndAddr": "0x40546c",
            "decompiledFuncCode": "\nlong FUN_00405420(void *param_1,long *param_2,void *param_3,size_t param_4)\n\n{\n  int iVar1;\n  long lVar2;\n  \n  lVar2 = *param_2;\n  if (lVar2 != 0) {\n    param_2 = param_2 + 1;\n    do {\n      iVar1 = memcmp(param_1,param_3,param_4);\n      if (iVar1 == 0) {\n        return lVar2;\n      }\n      lVar2 = *param_2;\n      param_3 = (void *)((long)param_3 + param_4);\n      param_2 = param_2 + 1;\n    } while (lVar2 != 0);\n  }\n  return lVar2;\n}\n\n",
            "funcName": "FUN_00405420"
        },
        {
            "funcStartAddr": "0x405470",
            "funcEndAddr": "0x405478",
            "decompiledFuncCode": "\nvoid FUN_00405470(undefined8 param_1)\n\n{\n  DAT_006103d0 = param_1;\n  return;\n}\n\n",
            "funcName": "FUN_00405470"
        },
        {
            "funcStartAddr": "0x405480",
            "funcEndAddr": "0x405488",
            "decompiledFuncCode": "\nvoid FUN_00405480(undefined param_1)\n\n{\n  DAT_006103c8 = param_1;\n  return;\n}\n\n",
            "funcName": "FUN_00405480"
        },
        {
            "funcStartAddr": "0x405490",
            "funcEndAddr": "0x40552e",
            "decompiledFuncCode": "\nvoid FUN_00405490(void)\n\n{\n  int iVar1;\n  int *piVar2;\n  undefined8 uVar3;\n  undefined8 uVar4;\n  \n  iVar1 = FUN_004097e0(stdout);\n  if (iVar1 != 0) {\n    piVar2 = __errno_location();\n    if ((DAT_006103c8 == '\\0') || (*piVar2 != 0x20)) {\n      uVar3 = dcgettext(0,\"write error\",5);\n      if (DAT_006103d0 == 0) {\n        error(0,*piVar2,&DAT_0040c36d,uVar3);\n      }\n      else {\n        uVar4 = FUN_004073e0();\n        error(0,*piVar2,\"%s: %s\",uVar4,uVar3);\n      }\n      goto LAB_0040550e;\n    }\n  }\n  iVar1 = FUN_004097e0(stderr);\n  if (iVar1 == 0) {\n    return;\n  }\nLAB_0040550e:\n                    /* WARNING: Subroutine does not return */\n  _exit(DAT_00610290);\n}\n\n",
            "funcName": "FUN_00405490"
        },
        {
            "funcStartAddr": "0x405530",
            "funcEndAddr": "0x4058a0",
            "decompiledFuncCode": "\nlong FUN_00405530(char *param_1,undefined *param_2,long param_3,ulong *param_4,int param_5,\n                 uint param_6)\n\n{\n  size_t __n;\n  undefined *puVar1;\n  bool bVar2;\n  int iVar3;\n  ulong uVar4;\n  undefined *puVar5;\n  ulong uVar6;\n  size_t sVar7;\n  size_t sVar8;\n  char *__s;\n  ulong uVar9;\n  undefined *puVar10;\n  wchar_t *pwVar12;\n  wchar_t wVar13;\n  ulong uVar14;\n  long lVar15;\n  ulong uVar16;\n  wchar_t *local_68;\n  char *local_50;\n  size_t local_48;\n  undefined *puVar11;\n  \n  uVar4 = strlen(param_1);\n  uVar14 = uVar4;\n  if (((param_6 & 2) == 0) && (sVar7 = __ctype_get_mb_cur_max(), 1 < sVar7)) {\n    sVar7 = mbstowcs((wchar_t *)0x0,param_1,0);\n    if (sVar7 == 0xffffffffffffffff) {\n      if ((param_6 & 1) == 0) {\nLAB_004056e0:\n        local_68 = (wchar_t *)0x0;\n        __s = (char *)0x0;\n        lVar15 = -1;\n        goto LAB_0040564e;\n      }\n      goto LAB_00405568;\n    }\n    __n = sVar7 + 1;\n    local_68 = (wchar_t *)malloc(__n * 4);\n    local_50 = param_1;\n    if (local_68 == (wchar_t *)0x0) {\n      __s = (char *)0x0;\n      if ((param_6 & 1) == 0) goto LAB_004056e0;\n      goto LAB_00405576;\n    }\n    sVar8 = mbstowcs(local_68,param_1,__n);\n    if (sVar8 == 0) {\n      __s = (char *)0x0;\n      goto LAB_00405576;\n    }\n    local_68[sVar7] = L'\\0';\n    wVar13 = *local_68;\n    if (wVar13 != L'\\0') {\n      bVar2 = false;\n      pwVar12 = local_68;\n      do {\n        iVar3 = iswprint(wVar13);\n        if (iVar3 == 0) {\n          *pwVar12 = L'\u00ef\u00bf\u00bd';\n          bVar2 = true;\n        }\n        pwVar12 = pwVar12 + 1;\n        wVar13 = *pwVar12;\n      } while (wVar13 != L'\\0');\n      iVar3 = wcswidth(local_68,__n);\n      uVar14 = (ulong)iVar3;\n      if (!bVar2) goto LAB_00405850;\n      local_48 = wcstombs((char *)0x0,local_68,0);\nLAB_004057c0:\n      local_48 = local_48 + 1;\n      __s = (char *)malloc(local_48);\n      if (__s == (char *)0x0) {\n        if ((param_6 & 1) == 0) {\n          lVar15 = -1;\n          goto LAB_0040564e;\n        }\n      }\n      else {\n        uVar4 = *param_4;\n        wVar13 = *local_68;\n        pwVar12 = local_68;\n        if (wVar13 == L'\\0') {\n          uVar14 = 0;\n        }\n        else {\n          uVar14 = 0;\n          do {\n            iVar3 = wcwidth(wVar13);\n            if (iVar3 == -1) {\n              *pwVar12 = L'\u00ef\u00bf\u00bd';\n              lVar15 = 1;\n            }\n            else {\n              lVar15 = (long)iVar3;\n            }\n            uVar6 = lVar15 + uVar14;\n            if (uVar4 < uVar6) break;\n            pwVar12 = pwVar12 + 1;\n            wVar13 = *pwVar12;\n            uVar14 = uVar6;\n          } while (wVar13 != L'\\0');\n        }\n        *pwVar12 = L'\\0';\n        uVar4 = wcstombs(__s,local_68,local_48);\n        local_50 = __s;\n      }\n      goto LAB_00405576;\n    }\n    iVar3 = wcswidth(local_68,__n);\n    uVar14 = (ulong)iVar3;\nLAB_00405850:\n    uVar6 = *param_4;\n    local_48 = uVar4;\n    if (uVar6 < uVar14) goto LAB_004057c0;\n    __s = (char *)0x0;\nLAB_0040567b:\n    uVar16 = uVar4;\n    uVar9 = uVar14;\n    if (uVar6 <= uVar14) goto LAB_00405588;\n    uVar6 = uVar6 - uVar14;\n    *param_4 = uVar14;\n    if (param_5 != 0) goto LAB_00405598;\nLAB_0040569d:\n    uVar4 = 0;\n    uVar14 = uVar6;\n  }\n  else {\nLAB_00405568:\n    local_68 = (wchar_t *)0x0;\n    __s = (char *)0x0;\n    local_50 = param_1;\nLAB_00405576:\n    uVar6 = *param_4;\n    uVar9 = uVar6;\n    uVar16 = uVar6;\n    if (uVar14 <= uVar6) goto LAB_0040567b;\nLAB_00405588:\n    uVar6 = 0;\n    *param_4 = uVar9;\n    if (param_5 == 0) goto LAB_0040569d;\nLAB_00405598:\n    uVar4 = uVar6;\n    uVar14 = 0;\n    if (param_5 != 1) {\n      uVar4 = (ulong)((uint)uVar6 & 1) + (uVar6 >> 1);\n      uVar14 = uVar6 >> 1;\n    }\n  }\n  uVar6 = uVar4 + uVar16;\n  if ((param_6 & 4) != 0) {\n    uVar4 = 0;\n    uVar6 = uVar16;\n  }\n  if ((param_6 & 8) != 0) {\n    uVar14 = 0;\n  }\n  if (param_3 != 0) {\n    puVar1 = param_2 + param_3 + -1;\n    puVar10 = param_2;\n    if ((param_2 < puVar1) && (puVar5 = param_2, uVar4 != 0)) {\n      do {\n        puVar10 = puVar5 + 1;\n        *puVar5 = 0x20;\n        if (param_2 + (uVar4 - (long)puVar10) == (undefined *)0x0) break;\n        puVar5 = puVar10;\n      } while (puVar10 < puVar1);\n    }\n    *puVar10 = 0;\n    uVar4 = (long)puVar1 - (long)puVar10;\n    if (uVar16 < (ulong)((long)puVar1 - (long)puVar10)) {\n      uVar4 = uVar16;\n    }\n    puVar5 = (undefined *)mempcpy(puVar10,local_50,uVar4);\n    puVar10 = puVar5;\n    if ((puVar5 < puVar1) && (puVar11 = puVar5, uVar14 != 0)) {\n      do {\n        puVar10 = puVar11 + 1;\n        *puVar11 = 0x20;\n        if (puVar5 + (uVar14 - (long)puVar10) == (undefined *)0x0) break;\n        puVar11 = puVar10;\n      } while (puVar10 < puVar1);\n    }\n    *puVar10 = 0;\n  }\n  lVar15 = uVar14 + uVar6;\nLAB_0040564e:\n  free(local_68);\n  free(__s);\n  return lVar15;\n}\n\n",
            "funcName": "FUN_00405530"
        },
        {
            "funcStartAddr": "0x4058d0",
            "funcEndAddr": "0x405965",
            "decompiledFuncCode": "\nvoid * FUN_004058d0(undefined8 param_1,ulong *param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  ulong __size;\n  ulong uVar1;\n  void *__ptr;\n  ulong uVar2;\n  void *__ptr_00;\n  \n  uVar1 = *param_2;\n  uVar2 = uVar1;\n  __ptr_00 = (void *)0x0;\n  while( true ) {\n    __size = uVar2 + 1;\n    __ptr = realloc(__ptr_00,__size);\n    if (__ptr == (void *)0x0) {\n      free(__ptr_00);\n      return (void *)0x0;\n    }\n    *param_2 = uVar1;\n    uVar2 = FUN_00405530(param_1,__ptr,__size,param_2,param_3,param_4);\n    if (uVar2 == 0xffffffffffffffff) break;\n    __ptr_00 = __ptr;\n    if (uVar2 < __size) {\n      return __ptr;\n    }\n  }\n  free(__ptr);\n  return (void *)0x0;\n}\n\n",
            "funcName": "FUN_004058d0"
        },
        {
            "funcStartAddr": "0x405970",
            "funcEndAddr": "0x405a09",
            "decompiledFuncCode": "\nvoid FUN_00405970(byte *param_1)\n\n{\n  byte *pbVar1;\n  char *pcVar2;\n  long lVar3;\n  ulong uVar4;\n  byte *pbVar5;\n  byte *pbVar6;\n  bool bVar7;\n  bool bVar8;\n  bool bVar9;\n  byte bVar10;\n  \n  bVar10 = 0;\n  if (param_1 == (byte *)0x0) {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\",1,0x37,stderr);\n                    /* WARNING: Subroutine does not return */\n    abort();\n  }\n  pcVar2 = strrchr((char *)param_1,0x2f);\n  if (pcVar2 != (char *)0x0) {\n    pbVar1 = (byte *)(pcVar2 + 1);\n    uVar4 = (long)pbVar1 - (long)param_1;\n    bVar7 = uVar4 < 6;\n    bVar9 = uVar4 == 6;\n    if (6 < (long)uVar4) {\n      lVar3 = 7;\n      pbVar5 = (byte *)(pcVar2 + -6);\n      pbVar6 = (byte *)\"/.libs/\";\n      do {\n        if (lVar3 == 0) break;\n        lVar3 = lVar3 + -1;\n        bVar7 = *pbVar5 < *pbVar6;\n        bVar9 = *pbVar5 == *pbVar6;\n        pbVar5 = pbVar5 + (ulong)bVar10 * -2 + 1;\n        pbVar6 = pbVar6 + (ulong)bVar10 * -2 + 1;\n      } while (bVar9);\n      bVar8 = false;\n      bVar7 = (!bVar7 && !bVar9) == bVar7;\n      if (bVar7) {\n        lVar3 = 3;\n        pbVar5 = pbVar1;\n        pbVar6 = &DAT_0040c3c8;\n        do {\n          if (lVar3 == 0) break;\n          lVar3 = lVar3 + -1;\n          bVar8 = *pbVar5 < *pbVar6;\n          bVar7 = *pbVar5 == *pbVar6;\n          pbVar5 = pbVar5 + (ulong)bVar10 * -2 + 1;\n          pbVar6 = pbVar6 + (ulong)bVar10 * -2 + 1;\n        } while (bVar7);\n        param_1 = pbVar1;\n        if ((!bVar8 && !bVar7) == bVar8) {\n          param_1 = (byte *)(pcVar2 + 4);\n          program_invocation_short_name = param_1;\n        }\n      }\n    }\n  }\n  DAT_006103d8 = param_1;\n  program_invocation_name = param_1;\n  return;\n}\n\n",
            "funcName": "FUN_00405970"
        },
        {
            "funcStartAddr": "0x405a10",
            "funcEndAddr": "0x405aef",
            "decompiledFuncCode": "\nchar * FUN_00405a10(char *param_1,int param_2)\n\n{\n  char cVar1;\n  char *pcVar2;\n  byte *pbVar3;\n  \n  pcVar2 = (char *)dcgettext(0,param_1,5);\n  if (param_1 == pcVar2) {\n    pbVar3 = (byte *)FUN_004098a0();\n    if ((*pbVar3 & 0xdf) == 0x55) {\n      if (((((pbVar3[1] & 0xdf) != 0x54) || ((pbVar3[2] & 0xdf) != 0x46)) || (pbVar3[3] != 0x2d)) ||\n         ((pbVar3[4] != 0x38 || (pbVar3[5] != 0)))) {\nLAB_00405ae8:\n        pcVar2 = \"\\\"\";\n        if (param_2 != 9) {\n          pcVar2 = \"\\'\";\n        }\n        return pcVar2;\n      }\n      cVar1 = *pcVar2;\n      pcVar2 = &DAT_0040c3d9;\n      if (cVar1 != '`') {\n        pcVar2 = &DAT_0040c3ce;\n      }\n    }\n    else {\n      if (((((*pbVar3 & 0xdf) != 0x47) || ((pbVar3[1] & 0xdf) != 0x42)) || (pbVar3[2] != 0x31)) ||\n         (((pbVar3[3] != 0x38 || (pbVar3[4] != 0x30)) ||\n          ((pbVar3[5] != 0x33 || ((pbVar3[6] != 0x30 || (pbVar3[7] != 0)))))))) goto LAB_00405ae8;\n      cVar1 = *pcVar2;\n      pcVar2 = &DAT_0040c3d5;\n      if (cVar1 != '`') {\n        pcVar2 = &DAT_0040c3d2;\n      }\n    }\n  }\n  return pcVar2;\n}\n\n",
            "funcName": "FUN_00405a10"
        },
        {
            "funcStartAddr": "0x405b10",
            "funcEndAddr": "0x406c43",
            "decompiledFuncCode": "\nulong FUN_00405b10(undefined *param_1,ulong param_2,char *param_3,ulong param_4,int param_5,\n                  uint param_6,long param_7,char *param_8,char *param_9)\n\n{\n  byte *__s1;\n  ulong uVar1;\n  bool bVar2;\n  bool bVar3;\n  bool bVar4;\n  bool bVar5;\n  bool bVar6;\n  int iVar7;\n  size_t sVar8;\n  ulong uVar9;\n  ushort **ppuVar10;\n  long lVar11;\n  char *pcVar12;\n  byte bVar13;\n  char cVar14;\n  ulong uVar15;\n  ulong uVar16;\n  byte bVar17;\n  uint uVar18;\n  ulong uVar19;\n  bool bVar20;\n  ulong uVar21;\n  ulong uVar22;\n  bool bVar23;\n  bool bVar24;\n  bool bVar25;\n  bool bVar26;\n  size_t local_a0;\n  char *local_78;\n  ulong local_70;\n  bool local_5c;\n  bool local_5b;\n  wint_t local_44;\n  mbstate_t local_40 [2];\n  \n  sVar8 = __ctype_get_mb_cur_max();\n  uVar18 = param_6 & 2;\n  local_5c = uVar18 != 0;\n  uVar9 = param_2;\n  switch(param_5) {\n  case 0:\n    bVar2 = true;\n    bVar3 = false;\n    uVar15 = 0;\n    local_5b = false;\n    local_70 = 0;\n    local_5c = false;\n    bVar6 = false;\n    local_a0 = 0;\n    local_78 = (char *)0x0;\n    break;\n  case 2:\n    if (uVar18 != 0) {\n      bVar2 = true;\n      bVar3 = false;\n      uVar15 = 0;\n      local_5b = false;\n      local_70 = 0;\n      local_5c = true;\n      bVar6 = false;\n      local_a0 = 1;\n      local_78 = \"\\'\";\n      break;\n    }\n    bVar6 = false;\nLAB_00406761:\n    if (param_2 != 0) {\n      bVar3 = false;\n      local_5b = false;\n      bVar2 = true;\n      local_70 = 0;\n      goto LAB_00406396;\n    }\n    bVar2 = true;\n    bVar3 = false;\n    uVar15 = 1;\n    param_5 = 2;\n    local_70 = 0;\n    local_5b = false;\n    local_5c = false;\n    local_a0 = 1;\n    local_78 = \"\\'\";\n    break;\n  case 3:\n    bVar2 = true;\n    bVar3 = false;\n    uVar15 = 0;\n    param_5 = 2;\n    local_5b = false;\n    local_70 = 0;\n    local_5c = true;\n    bVar6 = true;\n    local_a0 = 1;\n    local_78 = \"\\'\";\n    break;\n  case 4:\n    if (uVar18 == 0) {\n      bVar6 = true;\n      goto LAB_00406761;\n    }\n  case 1:\n    bVar2 = true;\n    bVar3 = false;\n    uVar15 = 0;\n    param_5 = 2;\n    local_5b = false;\n    local_70 = 0;\n    local_5c = true;\n    bVar6 = false;\n    local_a0 = 1;\n    local_78 = \"\\'\";\n    break;\n  case 5:\n    if (uVar18 == 0) {\n      if (param_2 != 0) {\n        *param_1 = 0x22;\n      }\n      local_5b = false;\n      local_70 = 0;\n      bVar2 = true;\n      bVar3 = false;\n      local_5c = false;\n      uVar15 = 1;\n      bVar6 = true;\n      local_a0 = 1;\n      local_78 = \"\\\"\";\n    }\n    else {\n      bVar2 = true;\n      bVar3 = false;\n      uVar15 = 0;\n      local_5b = false;\n      local_70 = 0;\n      local_5c = true;\n      bVar6 = true;\n      local_a0 = 1;\n      local_78 = \"\\\"\";\n    }\n    break;\n  case 6:\n    bVar2 = true;\n    bVar3 = false;\n    uVar15 = 0;\n    param_5 = 5;\n    local_5b = false;\n    local_70 = 0;\n    local_5c = true;\n    bVar6 = true;\n    local_a0 = 1;\n    local_78 = \"\\\"\";\n    break;\n  case 7:\n    bVar2 = true;\n    bVar3 = false;\n    uVar15 = 0;\n    local_5b = false;\n    local_70 = 0;\n    local_5c = false;\n    bVar6 = true;\n    local_a0 = 0;\n    local_78 = (char *)0x0;\n    break;\n  case 8:\n  case 9:\n  case 10:\n    if (param_5 != 10) {\n      param_8 = (char *)FUN_00405a10(&DAT_0040c3dd,param_5);\n      param_9 = (char *)FUN_00405a10(&DAT_0040dc67);\n    }\n    uVar15 = 0;\n    if (uVar18 == 0) {\n      cVar14 = *param_8;\n      while (cVar14 != '\\0') {\n        if (uVar15 < param_2) {\n          param_1[uVar15] = cVar14;\n        }\n        uVar15 = uVar15 + 1;\n        cVar14 = param_8[uVar15];\n      }\n    }\n    local_a0 = strlen(param_9);\n    bVar2 = true;\n    bVar3 = false;\n    local_78 = param_9;\n    local_5b = false;\n    local_70 = 0;\n    bVar6 = true;\n    break;\n  default:\n                    /* WARNING: Subroutine does not return */\n    abort();\n  }\nLAB_00405ba8:\n  uVar22 = 0;\n  bVar5 = local_5b;\nLAB_00405bb8:\n  bVar23 = param_4 != uVar22;\n  if (param_4 == 0xffffffffffffffff) {\n    bVar23 = param_3[uVar22] != '\\0';\n  }\n  bVar26 = bVar6;\n  if (!bVar23) goto LAB_00406338;\n  bVar20 = (bool)(param_5 != 2 & bVar6);\n  __s1 = (byte *)(param_3 + uVar22);\n  uVar16 = uVar15;\n  bVar4 = bVar3;\n  if (bVar20) {\n    if (local_a0 == 0) {\nLAB_004062b0:\n      uVar19 = (ulong)*__s1;\n      switch(uVar19) {\n      case 0:\n        goto switchD_004062c2_caseD_0;\n      default:\n        bVar20 = false;\n        goto switchD_0040612e_caseD_1;\n      case 7:\n        bVar17 = 0x61;\n        goto LAB_00405fc5;\n      case 8:\n        bVar17 = 0x62;\n        break;\n      case 9:\nswitchD_004062c2_caseD_9:\n        bVar17 = 0x74;\n        break;\n      case 10:\nswitchD_004062c2_caseD_a:\n        bVar17 = 0x6e;\n        break;\n      case 0xb:\nswitchD_004062c2_caseD_b:\n        bVar17 = 0x76;\n        goto LAB_00405fc5;\n      case 0xc:\nswitchD_004062c2_caseD_c:\n        bVar17 = 0x66;\nLAB_00405fc5:\n        if (local_5c) {\n          bVar25 = false;\n          goto LAB_00405f18;\n        }\nLAB_00405fd0:\n        bVar23 = false;\n        goto LAB_00405d8b;\n      case 0xd:\n        bVar20 = false;\nswitchD_00405ca8_caseD_d:\n        bVar25 = param_5 == 2;\n        uVar19 = 0xd;\n        bVar13 = 0x72;\n        goto LAB_00405ee0;\n      case 0x20:\n        bVar25 = false;\nLAB_0040630a:\n        uVar19 = 0x20;\n        goto LAB_004062d2;\n      case 0x21:\n      case 0x22:\n      case 0x24:\n      case 0x26:\n      case 0x28:\n      case 0x29:\n      case 0x2a:\n      case 0x3b:\n      case 0x3c:\n      case 0x3d:\n      case 0x3e:\n      case 0x5b:\n      case 0x5e:\n      case 0x60:\n      case 0x7c:\n        bVar20 = false;\nswitchD_00405ca8_caseD_21:\n        bVar25 = false;\n        goto LAB_00405eeb;\n      case 0x23:\n      case 0x7e:\n        bVar26 = false;\nLAB_004062ea:\n        if (uVar22 == 0) {\n          bVar25 = false;\n          bVar23 = bVar20;\n          bVar20 = bVar26;\n          goto LAB_00405cf8;\n        }\n        bVar23 = false;\n        goto LAB_00405d0f;\n      case 0x25:\n      case 0x2b:\n      case 0x2c:\n      case 0x2d:\n      case 0x2e:\n      case 0x2f:\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x3a:\n      case 0x41:\n      case 0x42:\n      case 0x43:\n      case 0x44:\n      case 0x45:\n      case 0x46:\n      case 0x47:\n      case 0x48:\n      case 0x49:\n      case 0x4a:\n      case 0x4b:\n      case 0x4c:\n      case 0x4d:\n      case 0x4e:\n      case 0x4f:\n      case 0x50:\n      case 0x51:\n      case 0x52:\n      case 0x53:\n      case 0x54:\n      case 0x55:\n      case 0x56:\n      case 0x57:\n      case 0x58:\n      case 0x59:\n      case 0x5a:\n      case 0x5d:\n      case 0x5f:\n      case 0x61:\n      case 0x62:\n      case 99:\n      case 100:\n      case 0x65:\n      case 0x66:\n      case 0x67:\n      case 0x68:\n      case 0x69:\n      case 0x6a:\n      case 0x6b:\n      case 0x6c:\n      case 0x6d:\n      case 0x6e:\n      case 0x6f:\n      case 0x70:\n      case 0x71:\n      case 0x72:\n      case 0x73:\n      case 0x74:\n      case 0x75:\n      case 0x76:\n      case 0x77:\n      case 0x78:\n      case 0x79:\n      case 0x7a:\n        bVar25 = false;\nLAB_004062d2:\n        bVar24 = false;\n        bVar23 = bVar20;\n        bVar20 = bVar25;\n        goto LAB_00405d11;\n      case 0x27:\n        bVar20 = false;\n        goto switchD_0040612e_caseD_27;\n      case 0x3f:\n        bVar20 = false;\n        goto switchD_0040612e_caseD_3f;\n      case 0x5c:\n        bVar20 = false;\n        goto switchD_00405ca8_caseD_5c;\n      case 0x7b:\n      case 0x7d:\n        bVar20 = false;\n        goto switchD_0040612e_caseD_7b;\n      }\n      bVar25 = false;\n      bVar23 = false;\n      goto joined_r0x00405f07;\n    }\n    if ((param_4 == 0xffffffffffffffff) && (1 < local_a0)) {\n      param_4 = strlen(param_3);\n    }\n    if ((param_4 < uVar22 + local_a0) || (iVar7 = memcmp(__s1,local_78,local_a0), iVar7 != 0))\n    goto LAB_004062b0;\n    if (!local_5c) {\n      uVar19 = (ulong)*__s1;\n      bVar25 = bVar20;\n      switch(uVar19) {\n      case 0:\n        goto switchD_00405ca8_caseD_0;\n      default:\n        goto switchD_0040612e_caseD_1;\n      case 7:\n        bVar17 = 0x61;\n        goto LAB_00405fd0;\n      case 8:\n        bVar25 = false;\n        bVar23 = false;\n        bVar17 = 0x62;\n        break;\n      case 9:\n        goto switchD_004062c2_caseD_9;\n      case 10:\n        goto switchD_004062c2_caseD_a;\n      case 0xb:\n        goto switchD_004062c2_caseD_b;\n      case 0xc:\n        goto switchD_004062c2_caseD_c;\n      case 0xd:\n        goto switchD_00405ca8_caseD_d;\n      case 0x20:\n        goto LAB_0040630a;\n      case 0x21:\n      case 0x22:\n      case 0x24:\n      case 0x26:\n      case 0x28:\n      case 0x29:\n      case 0x2a:\n      case 0x3b:\n      case 0x3c:\n      case 0x3d:\n      case 0x3e:\n      case 0x5b:\n      case 0x5e:\n      case 0x60:\n      case 0x7c:\n        goto switchD_00405ca8_caseD_21;\n      case 0x23:\n      case 0x7e:\n        bVar26 = bVar20;\n        goto LAB_004062ea;\n      case 0x25:\n      case 0x2b:\n      case 0x2c:\n      case 0x2d:\n      case 0x2e:\n      case 0x2f:\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x3a:\n      case 0x41:\n      case 0x42:\n      case 0x43:\n      case 0x44:\n      case 0x45:\n      case 0x46:\n      case 0x47:\n      case 0x48:\n      case 0x49:\n      case 0x4a:\n      case 0x4b:\n      case 0x4c:\n      case 0x4d:\n      case 0x4e:\n      case 0x4f:\n      case 0x50:\n      case 0x51:\n      case 0x52:\n      case 0x53:\n      case 0x54:\n      case 0x55:\n      case 0x56:\n      case 0x57:\n      case 0x58:\n      case 0x59:\n      case 0x5a:\n      case 0x5d:\n      case 0x5f:\n      case 0x61:\n      case 0x62:\n      case 99:\n      case 100:\n      case 0x65:\n      case 0x66:\n      case 0x67:\n      case 0x68:\n      case 0x69:\n      case 0x6a:\n      case 0x6b:\n      case 0x6c:\n      case 0x6d:\n      case 0x6e:\n      case 0x6f:\n      case 0x70:\n      case 0x71:\n      case 0x72:\n      case 0x73:\n      case 0x74:\n      case 0x75:\n      case 0x76:\n      case 0x77:\n      case 0x78:\n      case 0x79:\n      case 0x7a:\n        goto LAB_004062d2;\n      case 0x27:\n        goto switchD_0040612e_caseD_27;\n      case 0x3f:\n        goto switchD_0040612e_caseD_3f;\n      case 0x5c:\n        goto switchD_00405ca8_caseD_5c;\n      case 0x7b:\n      case 0x7d:\n        goto switchD_0040612e_caseD_7b;\n      }\n      goto LAB_00405d52;\n    }\n    goto LAB_00405f2a;\n  }\n  uVar19 = (ulong)*__s1;\n  switch(uVar19) {\n  case 0:\n    if (bVar6) {\nswitchD_004062c2_caseD_0:\n      if (!local_5c) {\n        bVar20 = false;\nswitchD_00405ca8_caseD_0:\n        bVar26 = param_5 == 2;\n        bVar24 = (bool)((bVar3 ^ 1U) & bVar26);\n        if (bVar24) {\n          if (uVar15 < uVar9) {\n            param_1[uVar15] = 0x27;\n          }\n          if (uVar15 + 1 < uVar9) {\n            param_1[uVar15 + 1] = 0x24;\n          }\n          if (uVar15 + 2 < uVar9) {\n            param_1[uVar15 + 2] = 0x27;\n          }\n          uVar16 = uVar15 + 3;\n          bVar3 = bVar24;\n          if (uVar9 <= uVar15 + 3) {\n            uVar16 = uVar15 + 4;\n            bVar23 = false;\n            bVar17 = 0x30;\n            bVar4 = bVar24;\n            goto LAB_00405e08;\n          }\nLAB_0040604a:\n          param_1[uVar16] = 0x5c;\n          uVar15 = uVar16;\n        }\n        else if (uVar15 < uVar9) goto LAB_0040604a;\n        uVar16 = uVar15 + 1;\n        bVar24 = bVar23;\n        if (param_5 == 2) {\n          bVar17 = 0x30;\n          bVar23 = false;\n          bVar4 = bVar3;\n          goto LAB_00405e08;\n        }\n        uVar19 = 0x30;\n        if ((uVar22 + 1 < param_4) && ((byte)(param_3[uVar22 + 1] - 0x30U) < 10)) {\n          if (uVar16 < uVar9) {\n            param_1[uVar16] = 0x30;\n          }\n          if (uVar15 + 2 < uVar9) {\n            param_1[uVar15 + 2] = 0x30;\n          }\n          uVar16 = uVar15 + 3;\n          uVar19 = 0x30;\n        }\nLAB_00406089:\n        bVar17 = (byte)uVar19;\n        bVar23 = false;\n        uVar15 = uVar16;\n        bVar4 = bVar3;\n        if ((bool)(bVar6 ^ 1U | bVar26)) goto LAB_00405e08;\n        goto LAB_00405d11;\n      }\n      bVar26 = param_5 == 2;\n      goto LAB_00405f1c;\n    }\n    if ((param_6 & 1) == 0) {\n      bVar25 = param_5 == 2;\n      uVar19 = 0;\n      bVar23 = false;\n      bVar20 = false;\n      goto LAB_00405cf8;\n    }\n    uVar22 = uVar22 + 1;\n    goto LAB_00405bb8;\n  default:\nswitchD_0040612e_caseD_1:\n    bVar25 = bVar6;\n    if (sVar8 != 1) {\n      local_40[0] = (mbstate_t)0x0;\n      if (param_4 == 0xffffffffffffffff) {\n        param_4 = strlen(param_3);\n      }\n      uVar21 = 0;\n      do {\n        uVar1 = uVar22 + uVar21;\n        lVar11 = FUN_00409760(&local_44,param_3 + uVar1,param_4 - uVar1,local_40);\n        if (lVar11 == 0) break;\n        if (lVar11 == -1) {\n          bVar23 = false;\n          goto LAB_00406a3a;\n        }\n        if (lVar11 == -2) {\n          if ((param_4 <= uVar1) || (param_3[uVar1] == '\\0')) goto LAB_00406b77;\n          goto LAB_00406b67;\n        }\n        if (((param_5 == 2) && (local_5c)) && (lVar11 != 1)) {\n          pcVar12 = param_3 + uVar1 + 1;\n          do {\n            if (((byte)(*pcVar12 + 0xa5U) < 0x22) &&\n               ((1L << (*pcVar12 + 0xa5U & 0x3f) & 0x20000002bU) != 0)) {\n              param_5 = 2;\n              goto LAB_00405f1c;\n            }\n            pcVar12 = pcVar12 + 1;\n          } while (param_3 + uVar1 + lVar11 != pcVar12);\n        }\n        iVar7 = iswprint(local_44);\n        if (iVar7 == 0) {\n          bVar23 = false;\n        }\n        uVar21 = uVar21 + lVar11;\n        iVar7 = mbsinit(local_40);\n      } while (iVar7 == 0);\n      bVar25 = (bool)((bVar23 ^ 1U) & bVar6);\n      goto LAB_00406a3a;\n    }\n    ppuVar10 = __ctype_b_loc();\n    uVar21 = 1;\n    bVar25 = ((*ppuVar10)[uVar19] & 0x4000) == 0;\n    bVar23 = !bVar25;\n    bVar25 = (bool)(bVar25 & bVar6);\n    goto LAB_00406104;\n  case 7:\n    bVar25 = param_5 == 2;\n    uVar19 = 7;\n    bVar13 = 0x61;\n    break;\n  case 8:\n    bVar25 = param_5 == 2;\n    uVar19 = 8;\n    bVar13 = 0x62;\n    break;\n  case 9:\n    uVar19 = 9;\n    bVar13 = 0x74;\n    goto LAB_00406142;\n  case 10:\n    uVar19 = 10;\n    bVar13 = 0x6e;\n    goto LAB_00406142;\n  case 0xb:\n    bVar25 = param_5 == 2;\n    uVar19 = 0xb;\n    bVar13 = 0x76;\n    break;\n  case 0xc:\n    bVar25 = param_5 == 2;\n    uVar19 = 0xc;\n    bVar13 = 0x66;\n    break;\n  case 0xd:\n    uVar19 = 0xd;\n    bVar13 = 0x72;\nLAB_00406142:\n    bVar25 = param_5 == 2;\n    bVar20 = (bool)(local_5c & bVar25);\n    if (bVar20) {\nLAB_0040615a:\n      param_5 = 2;\n      goto LAB_00405f1c;\n    }\n    break;\n  case 0x20:\n    uVar19 = 0x20;\n    goto LAB_00405ce6;\n  case 0x21:\n  case 0x22:\n  case 0x24:\n  case 0x26:\n  case 0x28:\n  case 0x29:\n  case 0x2a:\n  case 0x3b:\n  case 0x3c:\n  case 0x3d:\n  case 0x3e:\n  case 0x5b:\n  case 0x5e:\n  case 0x60:\n  case 0x7c:\n    bVar23 = false;\nLAB_00405ce6:\n    bVar25 = param_5 == 2;\n    if ((local_5c) && (bVar25)) goto LAB_0040615a;\n    goto LAB_00405cf8;\n  case 0x23:\n  case 0x7e:\nLAB_00405cdd:\n    bVar25 = param_5 == 2;\n    if (uVar22 == 0) goto LAB_00405ce6;\n    goto LAB_00405eeb;\n  case 0x25:\n  case 0x2b:\n  case 0x2c:\n  case 0x2d:\n  case 0x2e:\n  case 0x2f:\n  case 0x30:\n  case 0x31:\n  case 0x32:\n  case 0x33:\n  case 0x34:\n  case 0x35:\n  case 0x36:\n  case 0x37:\n  case 0x38:\n  case 0x39:\n  case 0x3a:\n  case 0x41:\n  case 0x42:\n  case 0x43:\n  case 0x44:\n  case 0x45:\n  case 0x46:\n  case 0x47:\n  case 0x48:\n  case 0x49:\n  case 0x4a:\n  case 0x4b:\n  case 0x4c:\n  case 0x4d:\n  case 0x4e:\n  case 0x4f:\n  case 0x50:\n  case 0x51:\n  case 0x52:\n  case 0x53:\n  case 0x54:\n  case 0x55:\n  case 0x56:\n  case 0x57:\n  case 0x58:\n  case 0x59:\n  case 0x5a:\n  case 0x5d:\n  case 0x5f:\n  case 0x61:\n  case 0x62:\n  case 99:\n  case 100:\n  case 0x65:\n  case 0x66:\n  case 0x67:\n  case 0x68:\n  case 0x69:\n  case 0x6a:\n  case 0x6b:\n  case 0x6c:\n  case 0x6d:\n  case 0x6e:\n  case 0x6f:\n  case 0x70:\n  case 0x71:\n  case 0x72:\n  case 0x73:\n  case 0x74:\n  case 0x75:\n  case 0x76:\n  case 0x77:\n  case 0x78:\n  case 0x79:\n  case 0x7a:\n    goto switchD_0040612e_caseD_25;\n  case 0x27:\nswitchD_0040612e_caseD_27:\n    bVar5 = bVar23;\n    if (param_5 != 2) {\n      bVar25 = false;\n      uVar19 = 0x27;\n      goto LAB_00405cf8;\n    }\n    if (!local_5c) {\n      if ((uVar9 == 0) || (uVar19 = 0, uVar21 = uVar9, local_70 != 0)) {\n        if (uVar15 < uVar9) {\n          param_1[uVar15] = 0x27;\n        }\n        if (uVar15 + 1 < uVar9) {\n          param_1[uVar15 + 1] = 0x5c;\n        }\n        uVar19 = uVar9;\n        uVar21 = local_70;\n        if (uVar15 + 2 < uVar9) {\n          param_1[uVar15 + 2] = 0x27;\n        }\n      }\n      uVar16 = uVar15 + 3;\n      bVar17 = 0x27;\n      uVar9 = uVar19;\n      local_70 = uVar21;\n      bVar24 = false;\n      bVar4 = false;\n      goto LAB_00405e08;\n    }\n    goto LAB_00405f1c;\n  case 0x3f:\nswitchD_0040612e_caseD_3f:\n    if (param_5 == 2) {\n      if (!local_5c) {\n        bVar17 = 0x3f;\n        bVar24 = false;\n        bVar23 = false;\n        goto LAB_00405e08;\n      }\n      goto LAB_00405f1c;\n    }\n    if (param_5 != 5) {\n      bVar25 = param_5 == 2;\n      uVar19 = 0x3f;\n      bVar23 = false;\n      goto LAB_00405cf8;\n    }\n    if (((((param_6 & 4) != 0) && (uVar21 = uVar22 + 2, uVar21 < param_4)) &&\n        (param_3[uVar22 + 1] == '?')) &&\n       ((uVar19 = (ulong)(byte)param_3[uVar21], (byte)param_3[uVar21] < 0x3f &&\n        ((0x7000a38200000000U >> (uVar19 & 0x3f) & 1) != 0)))) {\n      if (!local_5c) {\n        if (uVar15 < uVar9) {\n          param_1[uVar15] = 0x3f;\n        }\n        if (uVar15 + 1 < uVar9) {\n          param_1[uVar15 + 1] = 0x22;\n        }\n        if (uVar15 + 2 < uVar9) {\n          param_1[uVar15 + 2] = 0x22;\n        }\n        if (uVar15 + 3 < uVar9) {\n          param_1[uVar15 + 3] = 0x3f;\n        }\n        uVar16 = uVar15 + 4;\n        bVar26 = false;\n        uVar22 = uVar21;\n        bVar24 = false;\n        goto LAB_00406089;\n      }\n      goto LAB_00405f2a;\n    }\n    bVar25 = false;\n    uVar19 = 0x3f;\n    bVar23 = false;\n    goto LAB_00405cf8;\n  case 0x5c:\n    if (param_5 != 2) {\nswitchD_00405ca8_caseD_5c:\n      uVar19 = 0x5c;\n      bVar17 = 0x5c;\n      bVar13 = 0x5c;\n      bVar25 = (bool)(bVar6 & local_5c & local_a0 != 0);\n      if (!bVar25) break;\n      uVar22 = uVar22 + 1;\n      bVar23 = false;\n      goto LAB_00405e24;\n    }\n    if (local_5c) goto LAB_00405f1c;\n    uVar22 = uVar22 + 1;\n    bVar23 = false;\n    bVar17 = 0x5c;\n    goto LAB_00405e24;\n  case 0x7b:\n  case 0x7d:\nswitchD_0040612e_caseD_7b:\n    bVar24 = param_4 != 1;\n    if (param_4 == 0xffffffffffffffff) {\n      bVar24 = param_3[1] != '\\0';\n    }\n    bVar25 = param_5 == 2;\n    if (!bVar24) goto LAB_00405cdd;\n    goto LAB_00405eeb;\n  }\nLAB_00405ee0:\n  if (!bVar6) {\nLAB_00405eeb:\n    bVar23 = false;\n    goto LAB_00405cf8;\n  }\n  bVar23 = false;\n  bVar17 = bVar13;\n  goto joined_r0x00405f07;\nLAB_00406338:\n  if ((uVar15 == 0) && ((bool)(local_5c & param_5 == 2))) {\n    param_5 = 2;\nLAB_00405f1c:\n    if (bVar26) {\n      param_5 = 4;\n    }\nLAB_00405f2a:\n    uVar9 = FUN_00405b10(param_1,uVar9,param_3,param_4,param_5,param_6 & 0xfffffffd,0,param_8,\n                         param_9);\n    return uVar9;\n  }\n  bVar26 = (bool)(param_5 == 2 & (local_5c ^ 1U));\n  bVar23 = (bool)(local_5c ^ 1U);\n  if ((!bVar26) || (bVar23 = bVar26, !bVar5)) {\nLAB_00406c0d:\n    uVar22 = uVar15;\n    if (((local_78 != (char *)0x0) && (bVar23)) && (cVar14 = *local_78, cVar14 != '\\0')) {\n      do {\n        if (uVar22 < uVar9) {\n          param_1[uVar22] = cVar14;\n        }\n        uVar22 = uVar22 + 1;\n        cVar14 = local_78[uVar22 - uVar15];\n      } while (cVar14 != '\\0');\n    }\n    if (uVar22 < uVar9) {\n      param_1[uVar22] = 0;\n    }\n    return uVar22;\n  }\n  if (bVar2) {\n    uVar9 = FUN_00405b10(param_1,local_70,param_3,param_4,5,param_6,param_7,param_8,param_9);\n    return uVar9;\n  }\n  local_5b = uVar9 == 0 && local_70 != 0;\n  param_2 = local_70;\n  bVar23 = bVar5;\n  if (uVar9 != 0 || local_70 == 0) goto LAB_00406c0d;\nLAB_00406396:\n  *param_1 = 0x27;\n  param_5 = 2;\n  uVar15 = 1;\n  local_78 = \"\\'\";\n  local_a0 = 1;\n  local_5c = false;\n  uVar9 = param_2;\n  goto LAB_00405ba8;\n  while (__s1[uVar21] != 0) {\nLAB_00406b67:\n    uVar21 = uVar21 + 1;\n    if (param_4 <= uVar22 + uVar21) break;\n  }\nLAB_00406b77:\n  bVar23 = false;\nLAB_00406a3a:\n  if (1 < uVar21) {\nLAB_004065fe:\n    bVar26 = false;\n    uVar21 = uVar21 + uVar22;\n    uVar16 = uVar22;\n    do {\n      bVar17 = (byte)uVar19;\n      if (bVar25) {\n        bVar26 = param_5 == 2;\n        if (local_5c) goto LAB_00405f1c;\n        bVar26 = (bool)(bVar26 & (bVar4 ^ 1U));\n        if (bVar26) {\n          if (uVar15 < uVar9) {\n            param_1[uVar15] = 0x27;\n          }\n          if (uVar15 + 1 < uVar9) {\n            param_1[uVar15 + 1] = 0x24;\n          }\n          if (uVar15 + 2 < uVar9) {\n            param_1[uVar15 + 2] = 0x27;\n          }\n          uVar15 = uVar15 + 3;\n          bVar4 = bVar26;\n        }\n        if (uVar15 < uVar9) {\n          param_1[uVar15] = 0x5c;\n        }\n        if (uVar15 + 1 < uVar9) {\n          param_1[uVar15 + 1] = (char)(uVar19 >> 6) + '0';\n        }\n        if (uVar15 + 2 < uVar9) {\n          param_1[uVar15 + 2] = ((byte)(uVar19 >> 3) & 7) + 0x30;\n        }\n        uVar22 = uVar16 + 1;\n        uVar15 = uVar15 + 3;\n        bVar17 = (bVar17 & 7) + 0x30;\n        bVar26 = bVar25;\n        if (uVar21 <= uVar22) goto LAB_00405d9d;\n      }\n      else {\n        bVar3 = (bool)((bVar26 ^ 1U) & bVar4);\n        if (bVar20) {\n          if (uVar15 < uVar9) {\n            param_1[uVar15] = 0x5c;\n          }\n          uVar15 = uVar15 + 1;\n        }\n        uVar22 = uVar16 + 1;\n        if (uVar21 <= uVar22) goto LAB_00405e24;\n        if (bVar3) {\n          if (uVar15 < uVar9) {\n            param_1[uVar15] = 0x27;\n          }\n          if (uVar15 + 1 < uVar9) {\n            param_1[uVar15 + 1] = 0x27;\n          }\n          uVar15 = uVar15 + 2;\n          bVar20 = false;\n          bVar4 = false;\n        }\n        else {\n          bVar20 = false;\n        }\n      }\n      uVar16 = uVar16 + 1;\n      if (uVar15 < uVar9) {\n        param_1[uVar15] = bVar17;\n      }\n      uVar19 = (ulong)(byte)param_3[uVar16];\n      uVar15 = uVar15 + 1;\n    } while( true );\n  }\nLAB_00406104:\n  if (bVar25) {\n    bVar23 = false;\n    bVar25 = bVar6;\n    goto LAB_004065fe;\n  }\nswitchD_0040612e_caseD_25:\n  bVar25 = param_5 == 2;\nLAB_00405cf8:\n  bVar17 = (byte)uVar19;\n  bVar24 = (bool)((bVar6 ^ 1U | bVar25) ^ 1 | local_5c);\n  bVar26 = bVar20;\n  if (bVar24) {\nLAB_00405d0f:\n    bVar24 = false;\n    bVar20 = bVar26;\nLAB_00405d11:\n    bVar17 = (byte)uVar19;\n    uVar16 = uVar15;\n    bVar4 = bVar3;\n    if ((param_7 == 0) || ((*(uint *)(param_7 + (uVar19 >> 5) * 4) >> (bVar17 & 0x1f) & 1) == 0))\n    goto LAB_00405e08;\n    bVar25 = param_5 == 2;\n  }\n  else {\nLAB_00405e08:\n    bVar25 = param_5 == 2;\n    uVar15 = uVar16;\n    bVar3 = bVar4;\n    if (!bVar20) {\n      uVar22 = uVar22 + 1;\n      bVar3 = (bool)((bVar24 ^ 1U) & bVar4);\nLAB_00405e24:\n      if (bVar3) {\n        if (uVar15 < uVar9) {\n          param_1[uVar15] = 0x27;\n        }\n        if (uVar15 + 1 < uVar9) {\n          param_1[uVar15 + 1] = 0x27;\n        }\n        uVar15 = uVar15 + 2;\n        bVar4 = false;\n      }\n      goto LAB_00405d9d;\n    }\n  }\njoined_r0x00405f07:\n  if (local_5c) {\nLAB_00405f18:\n    bVar26 = (bool)(bVar6 & bVar25);\n    goto LAB_00405f1c;\n  }\nLAB_00405d52:\n  bVar25 = (bool)((bVar3 ^ 1U) & bVar25);\n  if (bVar25) {\n    if (uVar15 < uVar9) {\n      param_1[uVar15] = 0x27;\n    }\n    if (uVar15 + 1 < uVar9) {\n      param_1[uVar15 + 1] = 0x24;\n    }\n    if (uVar15 + 2 < uVar9) {\n      param_1[uVar15 + 2] = 0x27;\n    }\n    uVar15 = uVar15 + 3;\n    bVar3 = bVar25;\n  }\nLAB_00405d8b:\n  if (uVar15 < uVar9) {\n    param_1[uVar15] = 0x5c;\n  }\n  uVar15 = uVar15 + 1;\n  uVar22 = uVar22 + 1;\n  bVar4 = bVar3;\nLAB_00405d9d:\n  bVar3 = bVar4;\n  if (uVar15 < uVar9) {\n    param_1[uVar15] = bVar17;\n  }\n  uVar15 = uVar15 + 1;\n  if (!bVar23) {\n    bVar2 = false;\n  }\n  goto LAB_00405bb8;\n}\n\n",
            "funcName": "FUN_00405b10"
        },
        {
            "funcStartAddr": "0x406d40",
            "funcEndAddr": "0x406edb",
            "decompiledFuncCode": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nundefined * FUN_00406d40(int param_1,undefined8 param_2,undefined8 param_3,undefined4 *param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  undefined4 uVar3;\n  ulong uVar4;\n  undefined4 uVar5;\n  undefined4 uVar6;\n  int *piVar7;\n  undefined4 *puVar8;\n  ulong uVar9;\n  undefined *__ptr;\n  ulong *puVar10;\n  \n  piVar7 = __errno_location();\n  iVar1 = *piVar7;\n  if (param_1 < 0) {\n                    /* WARNING: Subroutine does not return */\n    abort();\n  }\n  puVar8 = (undefined4 *)PTR_DAT_006102d8;\n  if (DAT_006102f0 <= param_1) {\n    if (param_1 == 0x7fffffff) {\n                    /* WARNING: Subroutine does not return */\n      FUN_00407da0();\n    }\n    if (PTR_DAT_006102d8 == &DAT_006102e0) {\n      puVar8 = (undefined4 *)FUN_00407bb0(0);\n      uVar6 = PTR_DAT_006102e8._4_4_;\n      uVar5 = PTR_DAT_006102e8._0_4_;\n      uVar3 = _UNK_006102e4;\n      PTR_DAT_006102d8 = (undefined *)puVar8;\n      *puVar8 = _DAT_006102e0;\n      puVar8[1] = uVar3;\n      puVar8[2] = uVar5;\n      puVar8[3] = uVar6;\n    }\n    else {\n      puVar8 = (undefined4 *)FUN_00407bb0(PTR_DAT_006102d8);\n      PTR_DAT_006102d8 = (undefined *)puVar8;\n    }\n    memset(puVar8 + (long)DAT_006102f0 * 4,0,(long)((param_1 + 1) - DAT_006102f0) << 4);\n    DAT_006102f0 = param_1 + 1;\n  }\n  uVar2 = param_4[1];\n  puVar10 = (ulong *)(puVar8 + (long)param_1 * 4);\n  uVar4 = *puVar10;\n  __ptr = (undefined *)puVar10[1];\n  uVar9 = FUN_00405b10(__ptr,uVar4,param_2,param_3,*param_4,uVar2 | 1,param_4 + 2,\n                       *(undefined8 *)(param_4 + 10),*(undefined8 *)(param_4 + 0xc));\n  if (uVar4 <= uVar9) {\n    uVar9 = uVar9 + 1;\n    *puVar10 = uVar9;\n    if (__ptr != &DAT_006103e0) {\n      free(__ptr);\n    }\n    __ptr = (undefined *)FUN_00407b50(uVar9);\n    uVar3 = *param_4;\n    puVar10[1] = (ulong)__ptr;\n    FUN_00405b10(__ptr,uVar9,param_2,param_3,uVar3,uVar2 | 1,param_4 + 2,\n                 *(undefined8 *)(param_4 + 10),*(undefined8 *)(param_4 + 0xc));\n  }\n  *piVar7 = iVar1;\n  return __ptr;\n}\n\n",
            "funcName": "FUN_00406d40"
        },
        {
            "funcStartAddr": "0x406ee0",
            "funcEndAddr": "0x406f14",
            "decompiledFuncCode": "\nvoid FUN_00406ee0(undefined *param_1)\n\n{\n  int iVar1;\n  int *piVar2;\n  \n  piVar2 = __errno_location();\n  iVar1 = *piVar2;\n  if (param_1 == (undefined *)0x0) {\n    param_1 = &DAT_006104e0;\n  }\n  FUN_00407d50(param_1,0x38);\n  *piVar2 = iVar1;\n  return;\n}\n\n",
            "funcName": "FUN_00406ee0"
        },
        {
            "funcStartAddr": "0x406f20",
            "funcEndAddr": "0x406f2f",
            "decompiledFuncCode": "\nundefined4 FUN_00406f20(undefined4 *param_1)\n\n{\n  if (param_1 == (undefined4 *)0x0) {\n    param_1 = (undefined4 *)&DAT_006104e0;\n  }\n  return *param_1;\n}\n\n",
            "funcName": "FUN_00406f20"
        },
        {
            "funcStartAddr": "0x406f30",
            "funcEndAddr": "0x406f3f",
            "decompiledFuncCode": "\nvoid FUN_00406f30(undefined4 *param_1,undefined4 param_2)\n\n{\n  if (param_1 == (undefined4 *)0x0) {\n    param_1 = (undefined4 *)&DAT_006104e0;\n  }\n  *param_1 = param_2;\n  return;\n}\n\n",
            "funcName": "FUN_00406f30"
        },
        {
            "funcStartAddr": "0x406f40",
            "funcEndAddr": "0x406f73",
            "decompiledFuncCode": "\nuint FUN_00406f40(undefined *param_1,byte param_2,uint param_3)\n\n{\n  uint uVar1;\n  uint uVar2;\n  \n  if (param_1 == (undefined *)0x0) {\n    param_1 = &DAT_006104e0;\n  }\n  uVar1 = *(uint *)(param_1 + (ulong)(param_2 >> 5) * 4 + 8);\n  uVar2 = uVar1 >> (param_2 & 0x1f);\n  *(uint *)(param_1 + (ulong)(param_2 >> 5) * 4 + 8) =\n       ((param_3 ^ uVar2) & 1) << (param_2 & 0x1f) ^ uVar1;\n  return uVar2 & 1;\n}\n\n",
            "funcName": "FUN_00406f40"
        },
        {
            "funcStartAddr": "0x406f80",
            "funcEndAddr": "0x406f93",
            "decompiledFuncCode": "\nundefined4 FUN_00406f80(undefined *param_1,undefined4 param_2)\n\n{\n  undefined4 uVar1;\n  \n  if (param_1 == (undefined *)0x0) {\n    param_1 = &DAT_006104e0;\n  }\n  uVar1 = *(undefined4 *)(param_1 + 4);\n  *(undefined4 *)(param_1 + 4) = param_2;\n  return uVar1;\n}\n\n",
            "funcName": "FUN_00406f80"
        },
        {
            "funcStartAddr": "0x406fa0",
            "funcEndAddr": "0x406fcb",
            "decompiledFuncCode": "\nvoid FUN_00406fa0(undefined4 *param_1,long param_2,long param_3)\n\n{\n  if (param_1 == (undefined4 *)0x0) {\n    param_1 = (undefined4 *)&DAT_006104e0;\n  }\n  *param_1 = 10;\n  if ((param_2 != 0) && (param_3 != 0)) {\n    *(long *)(param_1 + 10) = param_2;\n    *(long *)(param_1 + 0xc) = param_3;\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n",
            "funcName": "FUN_00406fa0"
        },
        {
            "funcStartAddr": "0x406fd0",
            "funcEndAddr": "0x407042",
            "decompiledFuncCode": "\nvoid FUN_00406fd0(undefined8 param_1,undefined8 param_2,undefined8 param_3,undefined8 param_4,\n                 undefined4 *param_5)\n\n{\n  int iVar1;\n  int *piVar2;\n  \n  if (param_5 == (undefined4 *)0x0) {\n    param_5 = (undefined4 *)&DAT_006104e0;\n  }\n  piVar2 = __errno_location();\n  iVar1 = *piVar2;\n  FUN_00405b10(param_1,param_2,param_3,param_4,*param_5,param_5[1],param_5 + 2,\n               *(undefined8 *)(param_5 + 10),*(undefined8 *)(param_5 + 0xc));\n  *piVar2 = iVar1;\n  return;\n}\n\n",
            "funcName": "FUN_00406fd0"
        },
        {
            "funcStartAddr": "0x407050",
            "funcEndAddr": "0x407131",
            "decompiledFuncCode": "\nundefined8 FUN_00407050(undefined8 param_1,undefined8 param_2,long *param_3,undefined4 *param_4)\n\n{\n  int iVar1;\n  int *piVar2;\n  long lVar3;\n  undefined8 uVar4;\n  uint uVar5;\n  \n  if (param_4 == (undefined4 *)0x0) {\n    param_4 = (undefined4 *)&DAT_006104e0;\n  }\n  piVar2 = __errno_location();\n  iVar1 = *piVar2;\n  uVar5 = (uint)(param_3 == (long *)0x0) | param_4[1];\n  lVar3 = FUN_00405b10(0,0,param_1,param_2,*param_4,uVar5,param_4 + 2,*(undefined8 *)(param_4 + 10),\n                       *(undefined8 *)(param_4 + 0xc));\n  uVar4 = FUN_00407b50(lVar3 + 1);\n  FUN_00405b10(uVar4,lVar3 + 1,param_1,param_2,*param_4,uVar5,param_4 + 2,\n               *(undefined8 *)(param_4 + 10),*(undefined8 *)(param_4 + 0xc));\n  *piVar2 = iVar1;\n  if (param_3 != (long *)0x0) {\n    *param_3 = lVar3;\n  }\n  return uVar4;\n}\n\n",
            "funcName": "FUN_00407050"
        },
        {
            "funcStartAddr": "0x407140",
            "funcEndAddr": "0x40714a",
            "decompiledFuncCode": "\nvoid FUN_00407140(undefined8 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  FUN_00407050(param_1,param_2,0,param_3);\n  return;\n}\n\n",
            "funcName": "FUN_00407140"
        },
        {
            "funcStartAddr": "0x407150",
            "funcEndAddr": "0x4071e5",
            "decompiledFuncCode": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nvoid FUN_00407150(void)\n\n{\n  void **ppvVar1;\n  void *__ptr;\n  undefined *__ptr_00;\n  void **ppvVar2;\n  \n  __ptr_00 = PTR_DAT_006102d8;\n  if (1 < DAT_006102f0) {\n    ppvVar2 = (void **)(PTR_DAT_006102d8 + 0x18);\n    ppvVar1 = (void **)(PTR_DAT_006102d8 + (ulong)(DAT_006102f0 - 2) * 0x10 + 0x28);\n    do {\n      __ptr = *ppvVar2;\n      ppvVar2 = ppvVar2 + 2;\n      free(__ptr);\n    } while (ppvVar2 != ppvVar1);\n  }\n  if (*(undefined **)(__ptr_00 + 8) != &DAT_006103e0) {\n    free(*(undefined **)(__ptr_00 + 8));\n    _DAT_006102e0 = 0x100;\n    PTR_DAT_006102e8 = &DAT_006103e0;\n  }\n  if (__ptr_00 != &DAT_006102e0) {\n    free(__ptr_00);\n    PTR_DAT_006102d8 = &DAT_006102e0;\n  }\n  DAT_006102f0 = 1;\n  return;\n}\n\n",
            "funcName": "FUN_00407150"
        },
        {
            "funcStartAddr": "0x4071f0",
            "funcEndAddr": "0x407201",
            "decompiledFuncCode": "\nvoid FUN_004071f0(undefined8 param_1,undefined8 param_2)\n\n{\n  FUN_00406d40(param_1,param_2,0xffffffffffffffff,&DAT_006104e0);\n  return;\n}\n\n",
            "funcName": "FUN_004071f0"
        },
        {
            "funcStartAddr": "0x407210",
            "funcEndAddr": "0x40721a",
            "decompiledFuncCode": "\nvoid FUN_00407210(void)\n\n{\n  FUN_00406d40();\n  return;\n}\n\n",
            "funcName": "FUN_00407210"
        },
        {
            "funcStartAddr": "0x407220",
            "funcEndAddr": "0x407236",
            "decompiledFuncCode": "\nvoid FUN_00407220(undefined8 param_1)\n\n{\n  FUN_00406d40(0,param_1,0xffffffffffffffff,&DAT_006104e0);\n  return;\n}\n\n",
            "funcName": "FUN_00407220"
        },
        {
            "funcStartAddr": "0x407240",
            "funcEndAddr": "0x407252",
            "decompiledFuncCode": "\nvoid FUN_00407240(undefined8 param_1,undefined8 param_2)\n\n{\n  FUN_00406d40(0,param_1,param_2,&DAT_006104e0);\n  return;\n}\n\n",
            "funcName": "FUN_00407240"
        },
        {
            "funcStartAddr": "0x407260",
            "funcEndAddr": "0x4072c8",
            "decompiledFuncCode": "\nvoid FUN_00407260(undefined8 param_1,int param_2,undefined8 param_3)\n\n{\n  int local_48;\n  undefined4 local_44;\n  undefined8 local_40;\n  undefined8 local_38;\n  undefined8 local_30;\n  undefined8 local_28;\n  undefined8 local_20;\n  undefined8 local_18;\n  \n  if (param_2 != 10) {\n    local_44 = 0;\n    local_40 = 0;\n    local_38 = 0;\n    local_30 = 0;\n    local_28 = 0;\n    local_20 = 0;\n    local_18 = 0;\n    local_48 = param_2;\n    FUN_00406d40(param_1,param_3,0xffffffffffffffff,&local_48);\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n",
            "funcName": "FUN_00407260"
        },
        {
            "funcStartAddr": "0x4072d0",
            "funcEndAddr": "0x407334",
            "decompiledFuncCode": "\nvoid FUN_004072d0(undefined8 param_1,int param_2,undefined8 param_3,undefined8 param_4)\n\n{\n  int local_48;\n  undefined4 local_44;\n  undefined8 local_40;\n  undefined8 local_38;\n  undefined8 local_30;\n  undefined8 local_28;\n  undefined8 local_20;\n  undefined8 local_18;\n  \n  if (param_2 != 10) {\n    local_44 = 0;\n    local_40 = 0;\n    local_38 = 0;\n    local_30 = 0;\n    local_28 = 0;\n    local_20 = 0;\n    local_18 = 0;\n    local_48 = param_2;\n    FUN_00406d40(param_1,param_3,param_4,&local_48);\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n",
            "funcName": "FUN_004072d0"
        },
        {
            "funcStartAddr": "0x407340",
            "funcEndAddr": "0x40734c",
            "decompiledFuncCode": "\nvoid FUN_00407340(undefined4 param_1,undefined8 param_2)\n\n{\n  FUN_00407260(0,param_1,param_2);\n  return;\n}\n\n",
            "funcName": "FUN_00407340"
        },
        {
            "funcStartAddr": "0x407350",
            "funcEndAddr": "0x40735f",
            "decompiledFuncCode": "\nvoid FUN_00407350(undefined4 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  FUN_004072d0(0,param_1,param_2,param_3);\n  return;\n}\n\n",
            "funcName": "FUN_00407350"
        },
        {
            "funcStartAddr": "0x407360",
            "funcEndAddr": "0x4073d0",
            "decompiledFuncCode": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nvoid FUN_00407360(undefined8 param_1,undefined8 param_2,byte param_3)\n\n{\n  uint *puVar1;\n  uint uVar2;\n  undefined8 local_48;\n  undefined8 uStack_40;\n  undefined8 local_38;\n  undefined8 uStack_30;\n  undefined8 local_28;\n  undefined8 uStack_20;\n  undefined8 local_18;\n  \n  local_18 = DAT_00610510;\n  local_48 = _DAT_006104e0;\n  uStack_40 = uRam00000000006104e8;\n  local_38 = _DAT_006104f0;\n  uStack_30 = uRam00000000006104f8;\n  puVar1 = (uint *)((long)&uStack_40 + (ulong)(param_3 >> 5) * 4);\n  local_28 = _DAT_00610500;\n  uStack_20 = uRam0000000000610508;\n  uVar2 = *puVar1;\n  *puVar1 = (~(uVar2 >> (param_3 & 0x1f)) & 1) << (param_3 & 0x1f) ^ uVar2;\n  FUN_00406d40(0,param_1,param_2,&local_48);\n  return;\n}\n\n",
            "funcName": "FUN_00407360"
        },
        {
            "funcStartAddr": "0x4073d0",
            "funcEndAddr": "0x4073dd",
            "decompiledFuncCode": "\nvoid FUN_004073d0(undefined8 param_1,char param_2)\n\n{\n  FUN_00407360(param_1,0xffffffffffffffff,(int)param_2);\n  return;\n}\n\n",
            "funcName": "FUN_004073d0"
        },
        {
            "funcStartAddr": "0x4073e0",
            "funcEndAddr": "0x4073f1",
            "decompiledFuncCode": "\nvoid FUN_004073e0(undefined8 param_1)\n\n{\n  FUN_00407360(param_1,0xffffffffffffffff,0x3a);\n  return;\n}\n\n",
            "funcName": "FUN_004073e0"
        },
        {
            "funcStartAddr": "0x407400",
            "funcEndAddr": "0x40740a",
            "decompiledFuncCode": "\nvoid FUN_00407400(undefined8 param_1,undefined8 param_2)\n\n{\n  FUN_00407360(param_1,param_2,0x3a);\n  return;\n}\n\n",
            "funcName": "FUN_00407400"
        },
        {
            "funcStartAddr": "0x407410",
            "funcEndAddr": "0x40747e",
            "decompiledFuncCode": "\nvoid FUN_00407410(undefined8 param_1,int param_2,undefined8 param_3)\n\n{\n  int local_48;\n  undefined4 local_44;\n  undefined8 local_40;\n  undefined8 local_38;\n  undefined8 local_30;\n  undefined8 local_28;\n  undefined8 local_20;\n  undefined8 local_18;\n  \n  if (param_2 != 10) {\n    local_40 = 0x400000000000000;\n    local_44 = 0;\n    local_38 = 0;\n    local_30 = 0;\n    local_28 = 0;\n    local_20 = 0;\n    local_18 = 0;\n    local_48 = param_2;\n    FUN_00406d40(param_1,param_3,0xffffffffffffffff,&local_48);\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n",
            "funcName": "FUN_00407410"
        },
        {
            "funcStartAddr": "0x407480",
            "funcEndAddr": "0x4074ec",
            "decompiledFuncCode": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nvoid FUN_00407480(undefined8 param_1,long param_2,long param_3,undefined8 param_4,undefined8 param_5\n                 )\n\n{\n  undefined8 local_48;\n  undefined8 uStack_40;\n  undefined8 local_38;\n  undefined8 uStack_30;\n  undefined8 local_28;\n  long lStack_20;\n  long local_18;\n  \n  uStack_40 = uRam00000000006104e8;\n  local_38 = _DAT_006104f0;\n  uStack_30 = uRam00000000006104f8;\n  local_28 = _DAT_00610500;\n  lStack_20 = uRam0000000000610508;\n  local_18 = DAT_00610510;\n  local_48 = CONCAT44((int)((ulong)_DAT_006104e0 >> 0x20),10);\n  if ((param_2 != 0) && (param_3 != 0)) {\n    lStack_20 = param_2;\n    local_18 = param_3;\n    FUN_00406d40(param_1,param_4,param_5,&local_48);\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n",
            "funcName": "FUN_00407480"
        },
        {
            "funcStartAddr": "0x4074f0",
            "funcEndAddr": "0x4074f9",
            "decompiledFuncCode": "\nvoid FUN_004074f0(void)\n\n{\n  FUN_00407480();\n  return;\n}\n\n",
            "funcName": "FUN_004074f0"
        },
        {
            "funcStartAddr": "0x407500",
            "funcEndAddr": "0x407517",
            "decompiledFuncCode": "\nvoid FUN_00407500(undefined8 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  FUN_00407480(0,param_1,param_2,param_3,0xffffffffffffffff);\n  return;\n}\n\n",
            "funcName": "FUN_00407500"
        },
        {
            "funcStartAddr": "0x407520",
            "funcEndAddr": "0x407533",
            "decompiledFuncCode": "\nvoid FUN_00407520(undefined8 param_1,undefined8 param_2,undefined8 param_3,undefined8 param_4)\n\n{\n  FUN_00407480(0,param_1,param_2,param_3,param_4);\n  return;\n}\n\n",
            "funcName": "FUN_00407520"
        },
        {
            "funcStartAddr": "0x407540",
            "funcEndAddr": "0x40754a",
            "decompiledFuncCode": "\nvoid FUN_00407540(void)\n\n{\n  FUN_00406d40();\n  return;\n}\n\n",
            "funcName": "FUN_00407540"
        },
        {
            "funcStartAddr": "0x407550",
            "funcEndAddr": "0x407562",
            "decompiledFuncCode": "\nvoid FUN_00407550(undefined8 param_1,undefined8 param_2)\n\n{\n  FUN_00406d40(0,param_1,param_2,&DAT_006102a0);\n  return;\n}\n\n",
            "funcName": "FUN_00407550"
        },
        {
            "funcStartAddr": "0x407570",
            "funcEndAddr": "0x407581",
            "decompiledFuncCode": "\nvoid FUN_00407570(undefined8 param_1,undefined8 param_2)\n\n{\n  FUN_00406d40(param_1,param_2,0xffffffffffffffff,&DAT_006102a0);\n  return;\n}\n\n",
            "funcName": "FUN_00407570"
        },
        {
            "funcStartAddr": "0x407590",
            "funcEndAddr": "0x4075a6",
            "decompiledFuncCode": "\nvoid FUN_00407590(undefined8 param_1)\n\n{\n  FUN_00406d40(0,param_1,0xffffffffffffffff,&DAT_006102a0);\n  return;\n}\n\n",
            "funcName": "FUN_00407590"
        },
        {
            "funcStartAddr": "0x4075b0",
            "funcEndAddr": "0x407954",
            "decompiledFuncCode": "\nundefined8\nFUN_004075b0(FILE *param_1,long param_2,undefined8 param_3,undefined8 param_4,undefined8 *param_5,\n            undefined8 param_6)\n\n{\n  undefined8 uVar1;\n  char *pcVar2;\n  undefined8 uVar3;\n  undefined8 uVar4;\n  undefined8 uVar5;\n  undefined8 uVar6;\n  undefined8 uVar7;\n  undefined8 local_58;\n  undefined8 local_50;\n  undefined8 local_48;\n  \n  if (param_2 == 0) {\n    __fprintf_chk(param_1,1,\"%s %s\\n\",param_3,param_4);\n  }\n  else {\n    __fprintf_chk(param_1,1,\"%s (%s) %s\\n\",param_2,param_3,param_4);\n  }\n  uVar1 = dcgettext(0,&DAT_0040d12b,5);\n  __fprintf_chk(param_1,1,\"Copyright %s %d Free Software Foundation, Inc.\",uVar1,0x7e1);\n  pcVar2 = (char *)dcgettext(0,\n                             \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\"\n                             ,5);\n  fputs_unlocked(pcVar2,param_1);\n  switch(param_6) {\n  case 0:\n                    /* WARNING: Subroutine does not return */\n    abort();\n  case 1:\n    uVar1 = *param_5;\n    uVar4 = dcgettext(0,\"Written by %s.\\n\",5);\n    uVar1 = __fprintf_chk(param_1,1,uVar4,uVar1);\n    return uVar1;\n  case 2:\n    uVar1 = param_5[1];\n    uVar4 = *param_5;\n    uVar5 = dcgettext(0,\"Written by %s and %s.\\n\",5);\n    uVar1 = __fprintf_chk(param_1,1,uVar5,uVar4,uVar1);\n    return uVar1;\n  case 3:\n    uVar1 = param_5[2];\n    uVar4 = param_5[1];\n    uVar5 = *param_5;\n    uVar6 = dcgettext(0,\"Written by %s, %s, and %s.\\n\",5);\n    uVar1 = __fprintf_chk(param_1,1,uVar6,uVar5,uVar4,uVar1);\n    return uVar1;\n  case 4:\n    uVar1 = param_5[3];\n    uVar4 = param_5[2];\n    uVar5 = param_5[1];\n    uVar6 = *param_5;\n    uVar7 = dcgettext(0,\"Written by %s, %s, %s,\\nand %s.\\n\",5);\n    goto LAB_0040782c;\n  case 5:\n    uVar1 = param_5[3];\n    uVar4 = param_5[2];\n    uVar5 = param_5[1];\n    uVar6 = *param_5;\n    uVar7 = dcgettext(0,\"Written by %s, %s, %s,\\n%s, and %s.\\n\",5);\nLAB_0040782c:\n    __fprintf_chk(param_1,1,uVar7,uVar6,uVar5,uVar4);\n    return uVar1;\n  case 6:\n    local_58 = param_5[1];\n    uVar4 = param_5[5];\n    uVar5 = param_5[4];\n    uVar6 = param_5[3];\n    uVar1 = param_5[2];\n    uVar7 = *param_5;\n    uVar3 = dcgettext(0,\"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\",5);\n    goto LAB_004078c9;\n  case 7:\n    uVar1 = param_5[2];\n    uVar4 = param_5[5];\n    uVar5 = param_5[4];\n    uVar6 = param_5[3];\n    local_58 = param_5[1];\n    uVar7 = *param_5;\n    uVar3 = dcgettext(0,\"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\",5);\nLAB_004078c9:\n    uVar1 = __fprintf_chk(param_1,1,uVar3,uVar7,local_58,uVar1,uVar6,uVar5,uVar4);\n    return uVar1;\n  case 8:\n    local_48 = param_5[7];\n    local_58 = param_5[2];\n    local_50 = param_5[1];\n    uVar1 = param_5[6];\n    uVar4 = param_5[5];\n    uVar5 = param_5[4];\n    uVar6 = param_5[3];\n    uVar7 = *param_5;\n    uVar3 = dcgettext(0,\"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\",5);\n    goto LAB_004076aa;\n  case 9:\n    local_48 = param_5[7];\n    pcVar2 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n    local_58 = param_5[2];\n    local_50 = param_5[1];\n    uVar1 = param_5[6];\n    uVar4 = param_5[5];\n    uVar5 = param_5[4];\n    uVar6 = param_5[3];\n    uVar7 = *param_5;\n    break;\n  default:\n    local_48 = param_5[7];\n    pcVar2 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n    local_58 = param_5[2];\n    local_50 = param_5[1];\n    uVar1 = param_5[6];\n    uVar4 = param_5[5];\n    uVar5 = param_5[4];\n    uVar6 = param_5[3];\n    uVar7 = *param_5;\n  }\n  uVar3 = dcgettext(0,pcVar2,5);\nLAB_004076aa:\n  uVar1 = __fprintf_chk(param_1,1,uVar3,uVar7,local_50,local_58,uVar6,uVar5,uVar4,uVar1,local_48);\n  return uVar1;\n}\n\n",
            "funcName": "FUN_004075b0"
        },
        {
            "funcStartAddr": "0x407990",
            "funcEndAddr": "0x4079b0",
            "decompiledFuncCode": "\nvoid FUN_00407990(void)\n\n{\n  long lVar1;\n  long *in_R8;\n  long lVar2;\n  \n  lVar2 = 0;\n  lVar1 = *in_R8;\n  while (lVar1 != 0) {\n    lVar2 = lVar2 + 1;\n    lVar1 = in_R8[lVar2];\n  }\n  FUN_004075b0();\n  return;\n}\n\n",
            "funcName": "FUN_00407990"
        },
        {
            "funcStartAddr": "0x4079b0",
            "funcEndAddr": "0x407a09",
            "decompiledFuncCode": "\nvoid FUN_004079b0(void)\n\n{\n  uint uVar1;\n  long *plVar2;\n  long lVar3;\n  uint *in_R8;\n  long lVar4;\n  long local_58 [11];\n  \n  lVar4 = 0;\n  do {\n    uVar1 = *in_R8;\n    if (uVar1 < 0x30) {\n      *in_R8 = uVar1 + 8;\n      lVar3 = *(long *)((ulong)uVar1 + *(long *)(in_R8 + 4));\n      local_58[lVar4] = lVar3;\n    }\n    else {\n      plVar2 = *(long **)(in_R8 + 2);\n      *(long **)(in_R8 + 2) = plVar2 + 1;\n      lVar3 = *plVar2;\n      local_58[lVar4] = lVar3;\n    }\n  } while ((lVar3 != 0) && (lVar4 = lVar4 + 1, lVar4 != 10));\n  FUN_004075b0();\n  return;\n}\n\n",
            "funcName": "FUN_004079b0"
        },
        {
            "funcStartAddr": "0x407a10",
            "funcEndAddr": "0x407ac8",
            "decompiledFuncCode": "\nvoid FUN_00407a10(void)\n\n{\n  long lVar1;\n  undefined8 in_R8;\n  ulong uVar2;\n  undefined8 in_R9;\n  long lVar3;\n  long *plVar4;\n  long local_88 [10];\n  long local_38 [4];\n  long local_18 [3];\n  \n  local_18[0] = in_R8;\n  plVar4 = (long *)&stack0x00000008;\n  uVar2 = 0x20;\n  local_18[1] = in_R9;\n  lVar3 = 0;\n  do {\n    if ((uint)uVar2 < 0x30) {\n      lVar1 = *(long *)((long)local_38 + uVar2);\n      local_88[lVar3] = lVar1;\n      uVar2 = (ulong)((uint)uVar2 + 8);\n    }\n    else {\n      lVar1 = *plVar4;\n      local_88[lVar3] = lVar1;\n      plVar4 = plVar4 + 1;\n    }\n  } while ((lVar1 != 0) && (lVar3 = lVar3 + 1, lVar3 != 10));\n  FUN_004075b0();\n  return;\n}\n\n",
            "funcName": "FUN_00407a10"
        },
        {
            "funcStartAddr": "0x407ad0",
            "funcEndAddr": "0x407b44",
            "decompiledFuncCode": "\nvoid FUN_00407ad0(void)\n\n{\n  FILE *__stream;\n  undefined8 uVar1;\n  char *__s;\n  \n  uVar1 = dcgettext(0,\"\\nReport bugs to: %s\\n\",5);\n  __printf_chk(1,uVar1,\"bug-coreutils@gnu.org\");\n  uVar1 = dcgettext(0,\"%s home page: <%s>\\n\",5);\n  __printf_chk(1,uVar1,\"GNU coreutils\",\"https://www.gnu.org/software/coreutils/\");\n  __stream = stdout;\n  __s = (char *)dcgettext(0,\"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\",5);\n  fputs_unlocked(__s,__stream);\n  return;\n}\n\n",
            "funcName": "FUN_00407ad0"
        },
        {
            "funcStartAddr": "0x407b50",
            "funcEndAddr": "0x407b6a",
            "decompiledFuncCode": "\nvoid FUN_00407b50(size_t param_1)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(param_1);\n  if ((pvVar1 == (void *)0x0) && (param_1 != 0)) {\n                    /* WARNING: Subroutine does not return */\n    FUN_00407da0();\n  }\n  return;\n}\n\n",
            "funcName": "FUN_00407b50"
        },
        {
            "funcStartAddr": "0x407b70",
            "funcEndAddr": "0x407b91",
            "decompiledFuncCode": "\nvoid FUN_00407b70(ulong param_1,ulong param_2)\n\n{\n  if ((-1 < SUB168(ZEXT816(param_1) * ZEXT816(param_2),0)) &&\n     (SUB168(ZEXT816(param_1) * ZEXT816(param_2) >> 0x40,0) == 0)) {\n    FUN_00407b50();\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  FUN_00407da0();\n}\n\n",
            "funcName": "FUN_00407b70"
        },
        {
            "funcStartAddr": "0x407ba0",
            "funcEndAddr": "0x407ba2",
            "decompiledFuncCode": "\nvoid thunk_FUN_00407b50(size_t param_1)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(param_1);\n  if ((pvVar1 == (void *)0x0) && (param_1 != 0)) {\n                    /* WARNING: Subroutine does not return */\n    FUN_00407da0();\n  }\n  return;\n}\n\n",
            "funcName": "thunk_407ba0"
        },
        {
            "funcStartAddr": "0x407bb0",
            "funcEndAddr": "0x407be0",
            "decompiledFuncCode": "\nvoid * FUN_00407bb0(void *param_1,size_t param_2)\n\n{\n  void *pvVar1;\n  \n  if ((param_2 == 0) && (param_1 != (void *)0x0)) {\n    free(param_1);\n    return (void *)0x0;\n  }\n  pvVar1 = realloc(param_1,param_2);\n  if ((pvVar1 == (void *)0x0) && (param_2 != 0)) {\n                    /* WARNING: Subroutine does not return */\n    FUN_00407da0();\n  }\n  return pvVar1;\n}\n\n",
            "funcName": "FUN_00407bb0"
        },
        {
            "funcStartAddr": "0x407bf0",
            "funcEndAddr": "0x407c11",
            "decompiledFuncCode": "\nvoid FUN_00407bf0(undefined8 param_1,ulong param_2,ulong param_3)\n\n{\n  if ((-1 < SUB168(ZEXT816(param_2) * ZEXT816(param_3),0)) &&\n     (SUB168(ZEXT816(param_2) * ZEXT816(param_3) >> 0x40,0) == 0)) {\n    FUN_00407bb0();\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  FUN_00407da0();\n}\n\n",
            "funcName": "FUN_00407bf0"
        },
        {
            "funcStartAddr": "0x407c20",
            "funcEndAddr": "0x407c98",
            "decompiledFuncCode": "\nvoid FUN_00407c20(long param_1,ulong *param_2,ulong param_3)\n\n{\n  undefined auVar1 [16];\n  ulong uVar2;\n  ulong uVar3;\n  \n  uVar2 = *param_2;\n  if (param_1 == 0) {\n    if (uVar2 == 0) {\n      uVar2 = (ulong)(0x80 < param_3) +\n              SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / ZEXT816(param_3),0);\n    }\n    uVar3 = (ulong)(SUB168(ZEXT816(uVar2) * ZEXT816(param_3) >> 0x40,0) != 0);\n    if ((SUB168(ZEXT816(uVar2) * ZEXT816(param_3),0) < 0) || (uVar3 != 0)) goto LAB_00407c7b;\n  }\n  else {\n    auVar1 = ZEXT816(0) << 0x40 | ZEXT816(0x5555555555555554);\n    uVar3 = SUB168(auVar1 % ZEXT816(param_3),0);\n    if (SUB168(auVar1 / ZEXT816(param_3),0) <= uVar2) {\nLAB_00407c7b:\n                    /* WARNING: Subroutine does not return */\n      FUN_00407da0(param_1,param_2,uVar3);\n    }\n    uVar2 = (uVar2 >> 1) + 1 + uVar2;\n  }\n  *param_2 = uVar2;\n  FUN_00407bb0(param_1,uVar2 * param_3);\n  return;\n}\n\n",
            "funcName": "FUN_00407c20"
        },
        {
            "funcStartAddr": "0x407cb0",
            "funcEndAddr": "0x407cfa",
            "decompiledFuncCode": "\nvoid FUN_00407cb0(long param_1,ulong *param_2)\n\n{\n  ulong uVar1;\n  \n  uVar1 = *param_2;\n  if (param_1 == 0) {\n    if (uVar1 == 0) {\n      *param_2 = 0x80;\n      FUN_00407bb0(0,0x80);\n      return;\n    }\n    if ((long)uVar1 < 0) goto LAB_00407cfa;\n  }\n  else {\n    if (0x5555555555555553 < uVar1) {\nLAB_00407cfa:\n                    /* WARNING: Subroutine does not return */\n      FUN_00407da0();\n    }\n    uVar1 = (uVar1 >> 1) + 1 + uVar1;\n  }\n  *param_2 = uVar1;\n  FUN_00407bb0(param_1,uVar1);\n  return;\n}\n\n",
            "funcName": "FUN_00407cb0"
        },
        {
            "funcStartAddr": "0x407d00",
            "funcEndAddr": "0x407d17",
            "decompiledFuncCode": "\nvoid FUN_00407d00(size_t param_1)\n\n{\n  void *__s;\n  \n  __s = (void *)FUN_00407b50();\n  memset(__s,0,param_1);\n  return;\n}\n\n",
            "funcName": "FUN_00407d00"
        },
        {
            "funcStartAddr": "0x407d20",
            "funcEndAddr": "0x407d4e",
            "decompiledFuncCode": "\nvoid FUN_00407d20(size_t param_1,ulong param_2)\n\n{\n  void *pvVar1;\n  \n  if ((-1 < SUB168(ZEXT816(param_1) * ZEXT816(param_2),0)) &&\n     (SUB168(ZEXT816(param_1) * ZEXT816(param_2) >> 0x40,0) == 0)) {\n    pvVar1 = calloc(param_1,param_2);\n    if (pvVar1 != (void *)0x0) {\n      return;\n    }\n  }\n                    /* WARNING: Subroutine does not return */\n  FUN_00407da0();\n}\n\n",
            "funcName": "FUN_00407d20"
        },
        {
            "funcStartAddr": "0x407d50",
            "funcEndAddr": "0x407d78",
            "decompiledFuncCode": "\nvoid FUN_00407d50(void *param_1,size_t param_2)\n\n{\n  void *__dest;\n  \n  __dest = (void *)FUN_00407b50(param_2);\n  memcpy(__dest,param_1,param_2);\n  return;\n}\n\n",
            "funcName": "FUN_00407d50"
        },
        {
            "funcStartAddr": "0x407d80",
            "funcEndAddr": "0x407d93",
            "decompiledFuncCode": "\nvoid FUN_00407d80(char *param_1)\n\n{\n  void *__dest;\n  size_t sVar1;\n  \n  sVar1 = strlen(param_1);\n  __dest = (void *)FUN_00407b50(sVar1 + 1);\n  memcpy(__dest,param_1,sVar1 + 1);\n  return;\n}\n\n",
            "funcName": "FUN_00407d80"
        },
        {
            "funcStartAddr": "0x407da0",
            "funcEndAddr": "0x407dd1",
            "decompiledFuncCode": "\nvoid FUN_00407da0(void)\n\n{\n  undefined8 uVar1;\n  \n  uVar1 = dcgettext(0,\"memory exhausted\",5);\n  error(DAT_00610290,0,&DAT_0040c36d,uVar1);\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n",
            "funcName": "FUN_00407da0"
        },
        {
            "funcStartAddr": "0x407de0",
            "funcEndAddr": "0x407df8",
            "decompiledFuncCode": "\nvoid FUN_00407de0(char *param_1,size_t param_2)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strndup(param_1,param_2);\n  if (pcVar1 != (char *)0x0) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  FUN_00407da0();\n}\n\n",
            "funcName": "FUN_00407de0"
        },
        {
            "funcStartAddr": "0x407e00",
            "funcEndAddr": "0x4083eb",
            "decompiledFuncCode": "\nulong FUN_00407e00(byte *param_1,byte **param_2,uint param_3,long *param_4,char *param_5)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte *pbVar3;\n  int *piVar4;\n  long lVar5;\n  ulong uVar6;\n  char *pcVar7;\n  long lVar8;\n  long lVar9;\n  long lVar10;\n  byte bVar11;\n  uint uVar12;\n  int iVar13;\n  int iVar14;\n  uint uVar15;\n  byte *local_40 [2];\n  \n  if (0x24 < param_3) {\n                    /* WARNING: Subroutine does not return */\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\",\"lib/xstrtol.c\",0x60,\"xstrtol\");\n  }\n  if (param_2 == (byte **)0x0) {\n    param_2 = local_40;\n  }\n  piVar4 = __errno_location();\n  *piVar4 = 0;\n  lVar5 = strtol((char *)param_1,(char **)param_2,param_3);\n  pbVar3 = *param_2;\n  if (pbVar3 == param_1) {\n    if (param_5 == (char *)0x0) {\n      return 4;\n    }\n    bVar1 = *pbVar3;\n    if (bVar1 == 0) {\n      return 4;\n    }\n    lVar5 = 1;\n    uVar6 = 0;\n    pcVar7 = strchr(param_5,(int)(char)bVar1);\n    if (pcVar7 == (char *)0x0) {\n      return 4;\n    }\n  }\n  else {\n    if (*piVar4 == 0) {\n      uVar6 = 0;\n    }\n    else {\n      if (*piVar4 != 0x22) {\n        return 4;\n      }\n      uVar6 = 1;\n    }\n    uVar15 = (uint)uVar6;\n    if ((param_5 == (char *)0x0) || (bVar1 = *pbVar3, bVar1 == 0)) goto LAB_00407e75;\n    pcVar7 = strchr(param_5,(int)(char)bVar1);\n    if (pcVar7 == (char *)0x0) goto switchD_00407f02_caseD_1;\n  }\n  uVar15 = (uint)uVar6;\n  uVar12 = bVar1 - 0x45;\n  bVar11 = (byte)uVar12;\n  if (((bVar11 < 0x30) && ((0x814400308945U >> ((ulong)uVar12 & 0x3f) & 1) != 0)) &&\n     (pcVar7 = strchr(param_5,0x30), pcVar7 != (char *)0x0)) {\n    bVar2 = pbVar3[1];\n    if (bVar2 != 0x44) {\n      if (bVar2 == 0x69) {\n        iVar14 = 0x400;\n        iVar13 = (pbVar3[2] == 0x42) + 1 + (uint)(pbVar3[2] == 0x42);\n        goto LAB_00407ef0;\n      }\n      if (bVar2 != 0x42) {\n                    /* WARNING: Could not recover jumptable at 0x00407f58. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n        uVar6 = (*(code *)(&PTR_LAB_0040d6a8)[bVar11])();\n        return uVar6;\n      }\n    }\n    iVar13 = 2;\n    iVar14 = 1000;\n  }\n  else {\n    iVar13 = 1;\n    iVar14 = 0x400;\n  }\nLAB_00407ef0:\n  switch(bVar1 - 0x42 & 0xff) {\n  case 0:\n    if (lVar5 < -0x20000000000000) goto LAB_00408098;\n    if (lVar5 < 0x20000000000000) {\n      lVar5 = lVar5 << 10;\n    }\n    else {\nLAB_00408450:\n      lVar5 = 0x7fffffffffffffff;\n      uVar6 = 1;\n    }\n    break;\n  default:\nswitchD_00407f02_caseD_1:\n    *param_4 = lVar5;\n    return (ulong)(uVar15 | 2);\n  case 3:\n    lVar10 = (long)iVar14;\n    iVar14 = 6;\n    uVar12 = 0;\n    do {\n      if (lVar5 < SUB168((SEXT816(-0x8000000000000000) & (undefined  [16])0xffffffffffffffff |\n                         ZEXT816(0x8000000000000000)) / SEXT816(lVar10),0)) {\n        lVar5 = -0x8000000000000000;\n        uVar12 = 1;\n      }\n      else if (SUB168((SEXT816(0x7fffffffffffffff) & (undefined  [16])0xffffffffffffffff |\n                      ZEXT816(0x7fffffffffffffff)) / SEXT816(lVar10),0) < lVar5) {\n        lVar5 = 0x7fffffffffffffff;\n        uVar12 = 1;\n      }\n      else {\n        lVar5 = lVar5 * lVar10;\n      }\n      iVar14 = iVar14 + -1;\n    } while (iVar14 != 0);\n    goto LAB_00408440;\n  case 5:\n  case 0x25:\n    lVar10 = (long)iVar14;\n    iVar14 = 3;\n    uVar12 = 0;\n    do {\n      if (lVar5 < SUB168((SEXT816(-0x8000000000000000) & (undefined  [16])0xffffffffffffffff |\n                         ZEXT816(0x8000000000000000)) / SEXT816(lVar10),0)) {\n        lVar5 = -0x8000000000000000;\n        uVar12 = 1;\n      }\n      else if (SUB168((SEXT816(0x7fffffffffffffff) & (undefined  [16])0xffffffffffffffff |\n                      ZEXT816(0x7fffffffffffffff)) / SEXT816(lVar10),0) < lVar5) {\n        lVar5 = 0x7fffffffffffffff;\n        uVar12 = 1;\n      }\n      else {\n        lVar5 = lVar5 * lVar10;\n      }\n      iVar14 = iVar14 + -1;\n    } while (iVar14 != 0);\n    goto LAB_00408440;\n  case 9:\n  case 0x29:\n    if (lVar5 < SUB168((SEXT816(-0x8000000000000000) & (undefined  [16])0xffffffffffffffff |\n                       ZEXT816(0x8000000000000000)) / SEXT816((long)iVar14),0)) goto LAB_00408098;\n    lVar8 = SUB168((SEXT816(0x7fffffffffffffff) & (undefined  [16])0xffffffffffffffff |\n                   ZEXT816(0x7fffffffffffffff)) / SEXT816((long)iVar14),0);\nLAB_0040803c:\n    if (lVar8 < lVar5) goto LAB_00408450;\n    lVar5 = lVar5 * iVar14;\n    break;\n  case 0xb:\n  case 0x2b:\n    lVar9 = (long)iVar14;\n    lVar10 = SUB168((SEXT816(-0x8000000000000000) & (undefined  [16])0xffffffffffffffff |\n                    ZEXT816(0x8000000000000000)) / SEXT816(lVar9),0);\n    if (lVar10 <= lVar5) {\n      lVar8 = SUB168((SEXT816(0x7fffffffffffffff) & (undefined  [16])0xffffffffffffffff |\n                     ZEXT816(0x7fffffffffffffff)) / SEXT816(lVar9),0);\n      if (lVar8 < lVar5) goto LAB_00408450;\n      lVar5 = lVar5 * lVar9;\n      if (lVar10 <= lVar5) goto LAB_0040803c;\n    }\nLAB_00408098:\n    lVar5 = -0x8000000000000000;\n    uVar6 = 1;\n    break;\n  case 0xe:\n    lVar10 = (long)iVar14;\n    iVar14 = 5;\n    uVar12 = 0;\n    do {\n      if (lVar5 < SUB168((SEXT816(-0x8000000000000000) & (undefined  [16])0xffffffffffffffff |\n                         ZEXT816(0x8000000000000000)) / SEXT816(lVar10),0)) {\n        lVar5 = -0x8000000000000000;\n        uVar12 = 1;\n      }\n      else if (SUB168((SEXT816(0x7fffffffffffffff) & (undefined  [16])0xffffffffffffffff |\n                      ZEXT816(0x7fffffffffffffff)) / SEXT816(lVar10),0) < lVar5) {\n        lVar5 = 0x7fffffffffffffff;\n        uVar12 = 1;\n      }\n      else {\n        lVar5 = lVar5 * lVar10;\n      }\n      iVar14 = iVar14 + -1;\n    } while (iVar14 != 0);\n    goto LAB_00408440;\n  case 0x12:\n  case 0x32:\n    lVar10 = (long)iVar14;\n    iVar14 = 4;\n    uVar12 = 0;\n    do {\n      if (lVar5 < SUB168((SEXT816(-0x8000000000000000) & (undefined  [16])0xffffffffffffffff |\n                         ZEXT816(0x8000000000000000)) / SEXT816(lVar10),0)) {\n        lVar5 = -0x8000000000000000;\n        uVar12 = 1;\n      }\n      else if (SUB168((SEXT816(0x7fffffffffffffff) & (undefined  [16])0xffffffffffffffff |\n                      ZEXT816(0x7fffffffffffffff)) / SEXT816(lVar10),0) < lVar5) {\n        lVar5 = 0x7fffffffffffffff;\n        uVar12 = 1;\n      }\n      else {\n        lVar5 = lVar5 * lVar10;\n      }\n      iVar14 = iVar14 + -1;\n    } while (iVar14 != 0);\n    goto LAB_00408440;\n  case 0x17:\n    lVar10 = (long)iVar14;\n    iVar14 = 8;\n    uVar12 = 0;\n    do {\n      if (lVar5 < SUB168((SEXT816(-0x8000000000000000) & (undefined  [16])0xffffffffffffffff |\n                         ZEXT816(0x8000000000000000)) / SEXT816(lVar10),0)) {\n        lVar5 = -0x8000000000000000;\n        uVar12 = 1;\n      }\n      else if (SUB168((SEXT816(0x7fffffffffffffff) & (undefined  [16])0xffffffffffffffff |\n                      ZEXT816(0x7fffffffffffffff)) / SEXT816(lVar10),0) < lVar5) {\n        lVar5 = 0x7fffffffffffffff;\n        uVar12 = 1;\n      }\n      else {\n        lVar5 = lVar5 * lVar10;\n      }\n      iVar14 = iVar14 + -1;\n    } while (iVar14 != 0);\n    goto LAB_00408440;\n  case 0x18:\n    lVar10 = (long)iVar14;\n    iVar14 = 7;\n    uVar12 = 0;\n    do {\n      if (lVar5 < SUB168((SEXT816(-0x8000000000000000) & (undefined  [16])0xffffffffffffffff |\n                         ZEXT816(0x8000000000000000)) / SEXT816(lVar10),0)) {\n        lVar5 = -0x8000000000000000;\n        uVar12 = 1;\n      }\n      else if (SUB168((SEXT816(0x7fffffffffffffff) & (undefined  [16])0xffffffffffffffff |\n                      ZEXT816(0x7fffffffffffffff)) / SEXT816(lVar10),0) < lVar5) {\n        lVar5 = 0x7fffffffffffffff;\n        uVar12 = 1;\n      }\n      else {\n        lVar5 = lVar5 * lVar10;\n      }\n      iVar14 = iVar14 + -1;\n    } while (iVar14 != 0);\nLAB_00408440:\n    uVar6 = (ulong)(uVar15 | uVar12);\n    break;\n  case 0x20:\n    if (lVar5 < -0x40000000000000) goto LAB_00408098;\n    if (0x3fffffffffffff < lVar5) goto LAB_00408450;\n    lVar5 = lVar5 << 9;\n    break;\n  case 0x21:\n    break;\n  case 0x35:\n    if (lVar5 < -0x4000000000000000) goto LAB_00408098;\n    if (0x3fffffffffffffff < lVar5) goto LAB_00408450;\n    lVar5 = lVar5 * 2;\n  }\n  *param_2 = pbVar3 + iVar13;\n  if (pbVar3[iVar13] != 0) {\n    uVar6 = (ulong)((uint)uVar6 | 2);\n  }\nLAB_00407e75:\n  *param_4 = lVar5;\n  return uVar6;\n}\n\n",
            "funcName": "FUN_00407e00"
        },
        {
            "funcStartAddr": "0x408550",
            "funcEndAddr": "0x4088fe",
            "decompiledFuncCode": "\nulong FUN_00408550(byte *param_1,byte **param_2,uint param_3,ulong *param_4,char *param_5)\n\n{\n  byte bVar1;\n  undefined auVar2 [16];\n  int *piVar3;\n  ushort **ppuVar4;\n  byte *pbVar5;\n  ulong uVar6;\n  char *pcVar7;\n  byte bVar8;\n  uint uVar9;\n  int iVar10;\n  ulong uVar11;\n  byte bVar12;\n  uint uVar13;\n  ulong uVar14;\n  int iVar15;\n  int iVar16;\n  byte *local_40 [2];\n  \n  if (0x24 < param_3) {\n                    /* WARNING: Subroutine does not return */\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\",\"lib/xstrtol.c\",0x60,\"xstrtoumax\");\n  }\n  if (param_2 == (byte **)0x0) {\n    param_2 = local_40;\n  }\n  piVar3 = __errno_location();\n  *piVar3 = 0;\n  bVar12 = *param_1;\n  ppuVar4 = __ctype_b_loc();\n  pbVar5 = param_1;\n  while ((*(byte *)((long)*ppuVar4 + (ulong)bVar12 * 2 + 1) & 0x20) != 0) {\n    pbVar5 = pbVar5 + 1;\n    bVar12 = *pbVar5;\n  }\n  if (bVar12 == 0x2d) {\n    return 4;\n  }\n  uVar6 = __strtoul_internal(param_1,param_2,param_3,0);\n  pbVar5 = *param_2;\n  if (pbVar5 == param_1) {\n    if ((param_5 == (char *)0x0) || (bVar12 = *param_1, bVar12 == 0)) {\n      return 4;\n    }\n    uVar14 = 0;\n    uVar6 = 1;\n    pcVar7 = strchr(param_5,(int)(char)bVar12);\n    if (pcVar7 == (char *)0x0) {\n      return 4;\n    }\n  }\n  else {\n    if (*piVar3 == 0) {\n      uVar14 = 0;\n    }\n    else {\n      uVar14 = 1;\n      if (*piVar3 != 0x22) {\n        return 4;\n      }\n    }\n    uVar13 = (uint)uVar14;\n    if ((param_5 == (char *)0x0) || (bVar12 = *pbVar5, bVar12 == 0)) goto LAB_004085f2;\n    pcVar7 = strchr(param_5,(int)(char)bVar12);\n    if (pcVar7 == (char *)0x0) goto switchD_004086dc_caseD_1;\n  }\n  uVar13 = (uint)uVar14;\n  uVar9 = bVar12 - 0x45;\n  bVar8 = (byte)uVar9;\n  if (((bVar8 < 0x30) && ((0x814400308945U >> ((ulong)uVar9 & 0x3f) & 1) != 0)) &&\n     (pcVar7 = strchr(param_5,0x30), pcVar7 != (char *)0x0)) {\n    bVar1 = pbVar5[1];\n    if (bVar1 != 0x44) {\n      if (bVar1 == 0x69) {\n        uVar11 = 0x400;\n        iVar15 = (pbVar5[2] == 0x42) + 1 + (uint)(pbVar5[2] == 0x42);\n        goto LAB_004086ca;\n      }\n      if (bVar1 != 0x42) {\n                    /* WARNING: Could not recover jumptable at 0x004086b1. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n        uVar6 = (*(code *)(&PTR_LAB_0040d830)[bVar8])();\n        return uVar6;\n      }\n    }\n    iVar15 = 2;\n    uVar11 = 1000;\n  }\n  else {\n    iVar15 = 1;\n    uVar11 = 0x400;\n  }\nLAB_004086ca:\n  iVar10 = (int)uVar11;\n  switch(bVar12 - 0x42 & 0xff) {\n  case 0:\n    if (uVar6 >> 0x36 == 0) {\n      uVar6 = uVar6 << 10;\n      break;\n    }\n    goto LAB_00408737;\n  default:\nswitchD_004086dc_caseD_1:\n    *param_4 = uVar6;\n    return (ulong)(uVar13 | 2);\n  case 3:\n    iVar16 = 6;\n    uVar9 = 0;\n    do {\n      auVar2 = ZEXT816(uVar6);\n      uVar6 = SUB168(auVar2 * ZEXT816((ulong)(long)iVar10),0);\n      if (SUB168(auVar2 * ZEXT816((ulong)(long)iVar10) >> 0x40,0) != 0) {\n        uVar9 = 1;\n        uVar6 = 0xffffffffffffffff;\n      }\n      iVar16 = iVar16 + -1;\n    } while (iVar16 != 0);\n    goto LAB_004087c4;\n  case 5:\n  case 0x25:\n    uVar11 = (ulong)iVar10;\n    if (((SUB168(ZEXT816(uVar6) * ZEXT816(uVar11) >> 0x40,0) != 0) ||\n        (auVar2 = (ZEXT816(uVar6) * ZEXT816(uVar11) & (undefined  [16])0xffffffffffffffff) *\n                  ZEXT816(uVar11), SUB168(auVar2 >> 0x40,0) != 0)) ||\n       (auVar2 = (auVar2 & (undefined  [16])0xffffffffffffffff) * ZEXT816(uVar11),\n       uVar6 = SUB168(auVar2,0), SUB168(auVar2 >> 0x40,0) != 0)) {\n      uVar6 = 0xffffffffffffffff;\n      uVar14 = 1;\n    }\n    break;\n  case 9:\n  case 0x29:\n    auVar2 = ZEXT816(uVar6) * ZEXT816(uVar11);\n    goto joined_r0x004086fc;\n  case 0xb:\n  case 0x2b:\n    auVar2 = ZEXT816(uVar6) * ZEXT816((ulong)(long)iVar10);\n    if (SUB168(auVar2 >> 0x40,0) != 0) goto LAB_00408737;\n    auVar2 = (auVar2 & (undefined  [16])0xffffffffffffffff) * ZEXT816((ulong)(long)iVar10);\njoined_r0x004086fc:\n    uVar6 = SUB168(auVar2,0);\n    if (SUB168(auVar2 >> 0x40,0) != 0) {\nLAB_00408737:\n      uVar14 = 1;\n      uVar6 = 0xffffffffffffffff;\n    }\n    break;\n  case 0xe:\n    iVar16 = 5;\n    uVar9 = 0;\n    do {\n      auVar2 = ZEXT816(uVar6);\n      uVar6 = SUB168(auVar2 * ZEXT816((ulong)(long)iVar10),0);\n      if (SUB168(auVar2 * ZEXT816((ulong)(long)iVar10) >> 0x40,0) != 0) {\n        uVar9 = 1;\n        uVar6 = 0xffffffffffffffff;\n      }\n      iVar16 = iVar16 + -1;\n    } while (iVar16 != 0);\n    goto LAB_004087c4;\n  case 0x12:\n  case 0x32:\n    iVar16 = 4;\n    uVar9 = 0;\n    do {\n      auVar2 = ZEXT816(uVar6);\n      uVar6 = SUB168(auVar2 * ZEXT816((ulong)(long)iVar10),0);\n      if (SUB168(auVar2 * ZEXT816((ulong)(long)iVar10) >> 0x40,0) != 0) {\n        uVar9 = 1;\n        uVar6 = 0xffffffffffffffff;\n      }\n      iVar16 = iVar16 + -1;\n    } while (iVar16 != 0);\n    goto LAB_004087c4;\n  case 0x17:\n    iVar16 = 8;\n    uVar9 = 0;\n    do {\n      auVar2 = ZEXT816(uVar6);\n      uVar6 = SUB168(auVar2 * ZEXT816((ulong)(long)iVar10),0);\n      if (SUB168(auVar2 * ZEXT816((ulong)(long)iVar10) >> 0x40,0) != 0) {\n        uVar9 = 1;\n        uVar6 = 0xffffffffffffffff;\n      }\n      iVar16 = iVar16 + -1;\n    } while (iVar16 != 0);\n    goto LAB_004087c4;\n  case 0x18:\n    iVar16 = 7;\n    uVar9 = 0;\n    do {\n      auVar2 = ZEXT816(uVar6);\n      uVar6 = SUB168(auVar2 * ZEXT816((ulong)(long)iVar10),0);\n      if (SUB168(auVar2 * ZEXT816((ulong)(long)iVar10) >> 0x40,0) != 0) {\n        uVar9 = 1;\n        uVar6 = 0xffffffffffffffff;\n      }\n      iVar16 = iVar16 + -1;\n    } while (iVar16 != 0);\nLAB_004087c4:\n    uVar14 = (ulong)(uVar13 | uVar9);\n    break;\n  case 0x20:\n    if (uVar6 >> 0x37 != 0) goto LAB_00408737;\n    uVar6 = uVar6 << 9;\n    break;\n  case 0x21:\n    break;\n  case 0x35:\n    if ((long)uVar6 < 0) goto LAB_00408737;\n    uVar6 = uVar6 * 2;\n  }\n  *param_2 = pbVar5 + iVar15;\n  if (pbVar5[iVar15] != 0) {\n    uVar14 = (ulong)((uint)uVar14 | 2);\n  }\nLAB_004085f2:\n  *param_4 = uVar6;\n  return uVar14;\n}\n\n",
            "funcName": "FUN_00408550"
        },
        {
            "funcStartAddr": "0x408990",
            "funcEndAddr": "0x408a65",
            "decompiledFuncCode": "\nvoid FUN_00408990(long param_1,int *param_2)\n\n{\n  int iVar1;\n  int iVar2;\n  int iVar3;\n  undefined8 uVar4;\n  undefined8 *puVar5;\n  long lVar6;\n  int iVar7;\n  int iVar8;\n  int iVar9;\n  int iVar10;\n  \n  iVar1 = param_2[0xb];\n  iVar2 = *param_2;\n  iVar3 = param_2[0xc];\n  iVar8 = iVar1;\n  iVar9 = iVar2;\n  while (iVar3 < iVar9) {\n    while( true ) {\n      if (iVar3 <= iVar8) goto LAB_00408a0c;\n      iVar10 = iVar9 - iVar3;\n      iVar7 = iVar3 - iVar8;\n      if (iVar10 <= iVar7) break;\n      lVar6 = (long)iVar8;\n      iVar9 = iVar9 - iVar7;\n      puVar5 = (undefined8 *)(param_1 + lVar6 * 8);\n      do {\n        uVar4 = *puVar5;\n        *puVar5 = puVar5[iVar9 - lVar6];\n        puVar5[iVar9 - lVar6] = uVar4;\n        puVar5 = puVar5 + 1;\n      } while ((undefined8 *)(param_1 + 8 + ((ulong)(iVar7 - 1) + lVar6) * 8) != puVar5);\n      if (iVar9 <= iVar3) goto LAB_00408a0c;\n    }\n    lVar6 = (long)iVar8;\n    puVar5 = (undefined8 *)(param_1 + lVar6 * 8);\n    do {\n      uVar4 = *puVar5;\n      *puVar5 = puVar5[iVar3 - lVar6];\n      puVar5[iVar3 - lVar6] = uVar4;\n      puVar5 = puVar5 + 1;\n    } while (puVar5 != (undefined8 *)(param_1 + 8 + ((ulong)(iVar10 - 1) + lVar6) * 8));\n    iVar8 = iVar8 + iVar10;\n  }\nLAB_00408a0c:\n  param_2[0xc] = iVar2;\n  param_2[0xb] = iVar1 + (iVar2 - iVar3);\n  return;\n}\n\n",
            "funcName": "FUN_00408990"
        },
        {
            "funcStartAddr": "0x408a70",
            "funcEndAddr": "0x40906e",
            "decompiledFuncCode": "\nint FUN_00408a70(int param_1,undefined8 *param_2,char *param_3,char **param_4,undefined4 *param_5,\n                int param_6,int *param_7,int param_8,undefined8 param_9)\n\n{\n  char cVar1;\n  undefined8 uVar2;\n  bool bVar3;\n  bool bVar4;\n  int iVar5;\n  int iVar6;\n  size_t sVar7;\n  undefined8 uVar8;\n  undefined8 uVar9;\n  char **ppcVar10;\n  char *pcVar11;\n  char **ppcVar12;\n  char *pcVar13;\n  char *__s1;\n  FILE *__stream;\n  ulong uVar14;\n  size_t sVar15;\n  char *__s1_00;\n  long lVar16;\n  char *local_70;\n  uint local_44;\n  \n  pcVar13 = *(char **)(param_7 + 8);\n  cVar1 = *pcVar13;\n  pcVar11 = pcVar13;\n  if ((cVar1 == '=') || (cVar1 == '\\0')) {\n    sVar15 = 0;\n  }\n  else {\n    do {\n      pcVar11 = pcVar11 + 1;\n      if (*pcVar11 == '\\0') break;\n    } while (*pcVar11 != '=');\n    sVar15 = (long)pcVar11 - (long)pcVar13;\n  }\n  uVar14 = 0;\n  __s1 = *param_4;\n  ppcVar10 = param_4;\n  __s1_00 = __s1;\n  if (__s1 != (char *)0x0) {\n    while( true ) {\n      iVar5 = strncmp(__s1_00,pcVar13,sVar15);\n      if ((iVar5 == 0) && (sVar7 = strlen(__s1_00), sVar7 == sVar15)) goto LAB_00408c90;\n      ppcVar10 = ppcVar10 + 4;\n      __s1_00 = *ppcVar10;\n      iVar5 = (int)uVar14 + 1;\n      if (__s1_00 == (char *)0x0) break;\n      uVar14 = (ulong)iVar5;\n    }\n    lVar16 = 0;\n    ppcVar10 = (char **)0x0;\n    local_44 = 0xffffffff;\n    bVar3 = false;\n    bVar4 = false;\n    local_70 = (char *)0x0;\n    ppcVar12 = param_4;\n    do {\n      iVar6 = strncmp(__s1,pcVar13,sVar15);\n      if (iVar6 == 0) {\n        if (ppcVar10 == (char **)0x0) {\n          local_44 = (uint)lVar16;\n          ppcVar10 = ppcVar12;\n        }\n        else if (((((param_6 != 0) || (*(int *)(ppcVar10 + 1) != *(int *)(ppcVar12 + 1))) ||\n                  (ppcVar10[2] != ppcVar12[2])) ||\n                 (*(int *)(ppcVar10 + 3) != *(int *)(ppcVar12 + 3))) && (!bVar3)) {\n          if (param_8 == 0) {\n            bVar3 = true;\n            if (local_70 == (char *)0x0) goto LAB_00408bd0;\n          }\n          else if (local_70 == (char *)0x0) {\n            local_70 = (char *)calloc((long)iVar5,1);\n            if (local_70 == (char *)0x0) {\n              bVar3 = true;\n              goto LAB_00408bd0;\n            }\n            bVar4 = true;\n            local_70[(int)local_44] = '\\x01';\n          }\n          local_70[lVar16] = '\\x01';\n        }\n      }\nLAB_00408bd0:\n      ppcVar12 = ppcVar12 + 4;\n      __s1 = *ppcVar12;\n      lVar16 = lVar16 + 1;\n    } while (__s1 != (char *)0x0);\n    if ((local_70 != (char *)0x0) || (bVar3)) {\n      if (param_8 != 0) {\n        if (bVar3) {\n          uVar2 = *param_2;\n          uVar8 = dcgettext(0,\"%s: option \\'%s%s\\' is ambiguous\\n\",5);\n          __fprintf_chk(stderr,1,uVar8,uVar2,param_9,pcVar13);\n          pcVar13 = *(char **)(param_7 + 8);\n        }\n        else {\n          flockfile(stderr);\n          uVar2 = *(undefined8 *)(param_7 + 8);\n          uVar8 = *param_2;\n          uVar9 = dcgettext(0,\"%s: option \\'%s%s\\' is ambiguous; possibilities:\",5);\n          __fprintf_chk(stderr,1,uVar9,uVar8,param_9,uVar2);\n          pcVar13 = local_70;\n          __stream = stderr;\n          do {\n            if (*pcVar13 != '\\0') {\n              __fprintf_chk(__stream,1,&DAT_0040dc61,param_9,*param_4);\n              __stream = stderr;\n            }\n            pcVar13 = pcVar13 + 1;\n            param_4 = param_4 + 4;\n          } while (local_70 + uVar14 + 1 != pcVar13);\n          fputc(10,__stream);\n          funlockfile(stderr);\n          pcVar13 = *(char **)(param_7 + 8);\n        }\n      }\n      if (bVar4) {\n        free(local_70);\n      }\n      sVar15 = strlen(pcVar13);\n      *(char **)(param_7 + 8) = pcVar13 + sVar15;\n      *param_7 = *param_7 + 1;\n      param_7[2] = 0;\n      return 0x3f;\n    }\n    if (ppcVar10 != (char **)0x0) {\n      uVar14 = (ulong)local_44;\nLAB_00408c90:\n      iVar6 = *param_7;\n      *(undefined8 *)(param_7 + 8) = 0;\n      iVar5 = iVar6 + 1;\n      *param_7 = iVar5;\n      if (*pcVar11 == '\\0') {\n        if (*(int *)(ppcVar10 + 1) == 1) {\n          if (param_1 <= iVar5) {\n            if (param_8 != 0) {\n              pcVar13 = *ppcVar10;\n              uVar2 = *param_2;\n              uVar8 = dcgettext(0,\"%s: option \\'%s%s\\' requires an argument\\n\",5);\n              __fprintf_chk(stderr,1,uVar8,uVar2,param_9,pcVar13);\n            }\n            param_7[2] = *(int *)(ppcVar10 + 3);\n            return (uint)(*param_3 != ':') * 5 + 0x3a;\n          }\n          *param_7 = iVar6 + 2;\n          *(undefined8 *)(param_7 + 4) = param_2[iVar5];\n        }\n      }\n      else {\n        if (*(int *)(ppcVar10 + 1) == 0) {\n          if (param_8 != 0) {\n            pcVar13 = *ppcVar10;\n            uVar2 = *param_2;\n            uVar8 = dcgettext(0,\"%s: option \\'%s%s\\' doesn\\'t allow an argument\\n\",5);\n            __fprintf_chk(stderr,1,uVar8,uVar2,param_9,pcVar13);\n          }\n          param_7[2] = *(int *)(ppcVar10 + 3);\n          return 0x3f;\n        }\n        *(char **)(param_7 + 4) = pcVar11 + 1;\n      }\n      if (param_5 != (undefined4 *)0x0) {\n        *param_5 = (int)uVar14;\n      }\n      if ((int *)ppcVar10[2] == (int *)0x0) {\n        return *(int *)(ppcVar10 + 3);\n      }\n      *(int *)ppcVar10[2] = *(int *)(ppcVar10 + 3);\n      return 0;\n    }\n  }\n  if (((param_6 != 0) && (*(char *)(param_2[*param_7] + 1) != '-')) &&\n     (pcVar11 = strchr(param_3,(int)cVar1), pcVar11 != (char *)0x0)) {\n    return -1;\n  }\n  if (param_8 != 0) {\n    uVar2 = *param_2;\n    uVar8 = dcgettext(0,\"%s: unrecognized option \\'%s%s\\'\\n\",5);\n    __fprintf_chk(stderr,1,uVar8,uVar2,param_9,pcVar13);\n  }\n  *(undefined8 *)(param_7 + 8) = 0;\n  *param_7 = *param_7 + 1;\n  param_7[2] = 0;\n  return 0x3f;\n}\n\n",
            "funcName": "FUN_00408a70"
        },
        {
            "funcStartAddr": "0x409090",
            "funcEndAddr": "0x4095f7",
            "decompiledFuncCode": "\nuint FUN_00409090(uint param_1,undefined8 *param_2,char *param_3,long param_4,undefined8 param_5,\n                 ulong param_6,uint *param_7,int param_8)\n\n{\n  undefined8 uVar1;\n  char cVar2;\n  uint uVar3;\n  char *pcVar4;\n  undefined8 uVar5;\n  long lVar6;\n  uint uVar7;\n  byte *pbVar8;\n  byte *pbVar9;\n  byte *pbVar10;\n  uint uVar11;\n  bool bVar12;\n  bool bVar13;\n  byte bVar14;\n  undefined1 *puVar15;\n  \n  bVar14 = 0;\n  uVar3 = param_7[1];\n  if ((int)param_1 < 1) {\n    return 0xffffffff;\n  }\n  uVar11 = *param_7;\n  *(undefined8 *)(param_7 + 4) = 0;\n  if (uVar11 == 0) {\n    *param_7 = 1;\n    uVar11 = 1;\nLAB_004090da:\n    param_7[0xc] = uVar11;\n    param_7[0xb] = uVar11;\n    *(undefined8 *)(param_7 + 8) = 0;\n    if (*param_3 == '-') {\n      param_7[10] = 2;\n      param_3 = param_3 + 1;\n      pbVar8 = (byte *)0x0;\n    }\n    else if (*param_3 == '+') {\n      param_7[10] = 0;\n      param_3 = param_3 + 1;\n      pbVar8 = (byte *)0x0;\n    }\n    else {\n      pbVar8 = (byte *)0x0;\n      if (param_8 == 0) {\n        pcVar4 = getenv(\"POSIXLY_CORRECT\");\n        param_6 = param_6 & 0xffffffff;\n        if (pcVar4 == (char *)0x0) {\n          param_7[10] = 1;\n          pbVar8 = *(byte **)(param_7 + 8);\n          goto LAB_004091dd;\n        }\n        pbVar8 = *(byte **)(param_7 + 8);\n      }\n      param_7[10] = 0;\n    }\nLAB_004091dd:\n    param_7[6] = 1;\n    cVar2 = *param_3;\nLAB_004091e8:\n    if (cVar2 == ':') {\n      uVar3 = 0;\n    }\n    if (pbVar8 == (byte *)0x0) goto LAB_00409158;\nLAB_004091fc:\n    if (*pbVar8 == 0) goto LAB_00409158;\n  }\n  else {\n    if (param_7[6] == 0) goto LAB_004090da;\n    cVar2 = *param_3;\n    pbVar8 = *(byte **)(param_7 + 8);\n    if ((cVar2 - 0x2bU & 0xfd) != 0) goto LAB_004091e8;\n    pcVar4 = param_3 + 1;\n    param_3 = param_3 + 1;\n    if (*pcVar4 == ':') {\n      uVar3 = 0;\n    }\n    if (pbVar8 != (byte *)0x0) goto LAB_004091fc;\nLAB_00409158:\n    uVar11 = *param_7;\n    if (param_7[0xc] != uVar11 && (int)uVar11 <= (int)param_7[0xc]) {\n      param_7[0xc] = uVar11;\n    }\n    if ((int)uVar11 < (int)param_7[0xb]) {\n      param_7[0xb] = uVar11;\n    }\n    if (param_7[10] == 1) {\n      uVar7 = param_7[0xc];\n      if (param_7[0xb] == uVar7) {\n        if (uVar11 != uVar7) {\n          param_7[0xb] = uVar11;\n          uVar7 = uVar11;\n        }\n      }\n      else if (uVar11 != uVar7) {\n        FUN_00408990(param_2,param_7);\n        param_6 = param_6 & 0xffffffff;\n        uVar7 = *param_7;\n      }\n      uVar11 = uVar7;\n      uVar7 = uVar11;\n      if ((int)uVar11 < (int)param_1) {\n        lVar6 = (long)(int)uVar11;\n        do {\n          if ((*(char *)param_2[lVar6] == '-') && (((char *)param_2[lVar6])[1] != '\\0')) {\n            uVar11 = *param_7;\n            uVar7 = (uint)lVar6;\n            break;\n          }\n          uVar11 = (uint)lVar6 + 1;\n          lVar6 = lVar6 + 1;\n          *param_7 = uVar11;\n          uVar7 = uVar11;\n        } while ((int)lVar6 < (int)param_1);\n      }\n      param_7[0xc] = uVar7;\n    }\n    bVar12 = param_1 < uVar11;\n    bVar13 = param_1 == uVar11;\n    if (bVar13) {\n      param_1 = param_7[0xc];\n      uVar11 = param_7[0xb];\nLAB_004092c6:\n      if (uVar11 != param_1) {\n        *param_7 = uVar11;\n      }\n      return 0xffffffff;\n    }\n    lVar6 = 3;\n    pbVar8 = (byte *)param_2[(int)uVar11];\n    pbVar9 = pbVar8;\n    pbVar10 = &DAT_0040dc79;\n    do {\n      if (lVar6 == 0) break;\n      lVar6 = lVar6 + -1;\n      bVar12 = *pbVar9 < *pbVar10;\n      bVar13 = *pbVar9 == *pbVar10;\n      pbVar9 = pbVar9 + (ulong)bVar14 * -2 + 1;\n      pbVar10 = pbVar10 + (ulong)bVar14 * -2 + 1;\n    } while (bVar13);\n    if ((!bVar12 && !bVar13) == bVar12) {\n      uVar11 = uVar11 + 1;\n      *param_7 = uVar11;\n      if (param_7[0xb] == param_7[0xc]) {\n        param_7[0xb] = uVar11;\n      }\n      else {\n        bVar12 = uVar11 != param_7[0xc];\n        uVar11 = param_7[0xb];\n        if (bVar12) {\n          FUN_00408990(param_2,param_7);\n          uVar11 = param_7[0xb];\n        }\n      }\n      param_7[0xc] = param_1;\n      *param_7 = param_1;\n      goto LAB_004092c6;\n    }\n    if ((*pbVar8 != 0x2d) || (bVar14 = pbVar8[1], bVar14 == 0)) {\n      if (param_7[10] == 0) {\n        return 0xffffffff;\n      }\n      *(byte **)(param_7 + 4) = pbVar8;\n      *param_7 = uVar11 + 1;\n      return 1;\n    }\n    if (param_4 != 0) {\n      if (bVar14 == 0x2d) {\n        *(byte **)(param_7 + 8) = pbVar8 + 2;\n        puVar15 = &DAT_0040dc79;\n        goto LAB_00409425;\n      }\n      if ((int)param_6 != 0) {\n        if (pbVar8[2] == 0) {\n          pcVar4 = strchr(param_3,(int)(char)bVar14);\n          param_6 = param_6 & 0xffffffff;\n          if (pcVar4 != (char *)0x0) goto LAB_004093d0;\n        }\n        *(byte **)(param_7 + 8) = pbVar8 + 1;\n        uVar11 = FUN_00408a70(param_1,param_2,param_3,param_4,param_5,param_6,param_7,uVar3,\n                              &DAT_0040dc7a);\n        if (uVar11 != 0xffffffff) {\n          return uVar11;\n        }\n        pbVar8 = (byte *)param_2[(int)*param_7];\n      }\n    }\nLAB_004093d0:\n    pbVar8 = pbVar8 + 1;\n  }\n  pbVar9 = pbVar8 + 1;\n  *(byte **)(param_7 + 8) = pbVar9;\n  bVar14 = *pbVar8;\n  uVar11 = (uint)(char)bVar14;\n  pcVar4 = strchr(param_3,uVar11);\n  if (pbVar8[1] == 0) {\n    *param_7 = *param_7 + 1;\n  }\n  if (((byte)(bVar14 - 0x3a) < 2) || (pcVar4 == (char *)0x0)) {\n    if (uVar3 != 0) {\n      uVar1 = *param_2;\n      uVar5 = dcgettext(0,\"%s: invalid option -- \\'%c\\'\\n\",5);\n      __fprintf_chk(stderr,1,uVar5,uVar1,uVar11);\n    }\n    param_7[2] = uVar11;\n    return 0x3f;\n  }\n  if (((*pcVar4 != 'W') || (param_4 == 0)) || (pcVar4[1] != ';')) {\n    if (pcVar4[1] == ':') {\n      if (pcVar4[2] == ':') {\n        if (pbVar8[1] == 0) {\n          *(undefined8 *)(param_7 + 4) = 0;\n        }\n        else {\n          *(byte **)(param_7 + 4) = pbVar9;\n          *param_7 = *param_7 + 1;\n        }\n      }\n      else {\n        uVar7 = *param_7;\n        if (pbVar8[1] == 0) {\n          if (param_1 == uVar7) {\n            if (uVar3 != 0) {\n              uVar1 = *param_2;\n              uVar5 = dcgettext(0,\"%s: option requires an argument -- \\'%c\\'\\n\",5);\n              __fprintf_chk(stderr,1,uVar5,uVar1,uVar11);\n            }\n            param_7[2] = uVar11;\n            uVar11 = (uint)(*param_3 != ':') * 5 + 0x3a;\n          }\n          else {\n            uVar1 = param_2[(int)uVar7];\n            *param_7 = uVar7 + 1;\n            *(undefined8 *)(param_7 + 4) = uVar1;\n          }\n        }\n        else {\n          *(byte **)(param_7 + 4) = pbVar9;\n          *param_7 = uVar7 + 1;\n        }\n      }\n      *(undefined8 *)(param_7 + 8) = 0;\n      return uVar11;\n    }\n    return uVar11;\n  }\n  if (pbVar8[1] == 0) {\n    if (*param_7 == param_1) {\n      if (uVar3 != 0) {\n        uVar1 = *param_2;\n        uVar5 = dcgettext(0,\"%s: option requires an argument -- \\'%c\\'\\n\",5);\n        __fprintf_chk(stderr,1,uVar5,uVar1,uVar11);\n      }\n      param_7[2] = uVar11;\n      return (uint)(*param_3 != ':') * 5 + 0x3a;\n    }\n    pbVar9 = (byte *)param_2[(int)*param_7];\n  }\n  *(byte **)(param_7 + 8) = pbVar9;\n  param_6 = 0;\n  *(undefined8 *)(param_7 + 4) = 0;\n  puVar15 = &DAT_0040dc98;\nLAB_00409425:\n  uVar3 = FUN_00408a70(param_1,param_2,param_3,param_4,param_5,param_6,param_7,uVar3,puVar15);\n  return uVar3;\n}\n\n",
            "funcName": "FUN_00409090"
        },
        {
            "funcStartAddr": "0x409660",
            "funcEndAddr": "0x4096b6",
            "decompiledFuncCode": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nvoid FUN_00409660(void)\n\n{\n  DAT_00610520 = DAT_006102f8._4_4_;\n  _DAT_00610524 = (undefined4)DAT_006102f8;\n  FUN_00409090();\n  DAT_006102f8._4_4_ = DAT_00610520;\n  DAT_00610570 = DAT_00610530;\n  _DAT_006102f4 = DAT_00610528;\n  return;\n}\n\n",
            "funcName": "FUN_00409660"
        },
        {
            "funcStartAddr": "0x4096c0",
            "funcEndAddr": "0x4096d8",
            "decompiledFuncCode": "\nvoid FUN_004096c0(void)\n\n{\n  FUN_00409660();\n  return;\n}\n\n",
            "funcName": "FUN_004096c0"
        },
        {
            "funcStartAddr": "0x4096e0",
            "funcEndAddr": "0x4096f3",
            "decompiledFuncCode": "\nvoid FUN_004096e0(void)\n\n{\n  FUN_00409660();\n  return;\n}\n\n",
            "funcName": "FUN_004096e0"
        },
        {
            "funcStartAddr": "0x409700",
            "funcEndAddr": "0x409715",
            "decompiledFuncCode": "\nvoid FUN_00409700(void)\n\n{\n  FUN_00409090();\n  return;\n}\n\n",
            "funcName": "FUN_00409700"
        },
        {
            "funcStartAddr": "0x409720",
            "funcEndAddr": "0x409736",
            "decompiledFuncCode": "\nvoid FUN_00409720(void)\n\n{\n  FUN_00409660();\n  return;\n}\n\n",
            "funcName": "FUN_00409720"
        },
        {
            "funcStartAddr": "0x409740",
            "funcEndAddr": "0x409758",
            "decompiledFuncCode": "\nvoid FUN_00409740(void)\n\n{\n  FUN_00409090();\n  return;\n}\n\n",
            "funcName": "FUN_00409740"
        },
        {
            "funcStartAddr": "0x409760",
            "funcEndAddr": "0x4097cf",
            "decompiledFuncCode": "\nsize_t FUN_00409760(wchar_t *param_1,byte *param_2,size_t param_3,mbstate_t *param_4)\n\n{\n  char cVar1;\n  size_t sVar2;\n  wchar_t local_1c;\n  \n  if (param_2 == (byte *)0x0) {\n    param_3 = 1;\n    param_2 = (byte *)0x40dc97;\n  }\n  else {\n    if (param_3 == 0) {\n      return 0xfffffffffffffffe;\n    }\n    if (param_1 != (wchar_t *)0x0) goto LAB_00409784;\n  }\n  param_1 = &local_1c;\nLAB_00409784:\n  sVar2 = mbrtowc(param_1,(char *)param_2,param_3,param_4);\n  if ((0xfffffffffffffffd < sVar2) && (cVar1 = FUN_00409840(0), cVar1 == '\\0')) {\n    sVar2 = 1;\n    *param_1 = (uint)*param_2;\n  }\n  return sVar2;\n}\n\n",
            "funcName": "FUN_00409760"
        },
        {
            "funcStartAddr": "0x4097e0",
            "funcEndAddr": "0x40983c",
            "decompiledFuncCode": "\nulong FUN_004097e0(uint *param_1)\n\n{\n  uint uVar1;\n  long lVar2;\n  ulong uVar3;\n  int *piVar4;\n  \n  lVar2 = __fpending();\n  uVar1 = *param_1;\n  uVar3 = FUN_00409e10(param_1);\n  if ((uVar1 & 0x20) == 0) {\n    if ((int)uVar3 == 0) {\n      return uVar3;\n    }\n    if (lVar2 == 0) {\n      piVar4 = __errno_location();\n      return (ulong)-(uint)(*piVar4 != 9);\n    }\n  }\n  else if ((int)uVar3 == 0) {\n    piVar4 = __errno_location();\n    *piVar4 = 0;\n    return 0xffffffff;\n  }\n  return 0xffffffff;\n}\n\n",
            "funcName": "FUN_004097e0"
        },
        {
            "funcStartAddr": "0x409840",
            "funcEndAddr": "0x409896",
            "decompiledFuncCode": "\nbool FUN_00409840(int param_1)\n\n{\n  bool bVar1;\n  byte *pbVar2;\n  long lVar3;\n  byte *pbVar4;\n  byte *pbVar5;\n  bool bVar6;\n  bool bVar7;\n  bool bVar8;\n  byte bVar9;\n  \n  bVar9 = 0;\n  pbVar2 = (byte *)setlocale(param_1,(char *)0x0);\n  bVar1 = true;\n  bVar6 = false;\n  bVar8 = pbVar2 == (byte *)0x0;\n  if (!bVar8) {\n    lVar3 = 2;\n    pbVar4 = pbVar2;\n    pbVar5 = &DAT_0040dc9c;\n    do {\n      if (lVar3 == 0) break;\n      lVar3 = lVar3 + -1;\n      bVar6 = *pbVar4 < *pbVar5;\n      bVar8 = *pbVar4 == *pbVar5;\n      pbVar4 = pbVar4 + (ulong)bVar9 * -2 + 1;\n      pbVar5 = pbVar5 + (ulong)bVar9 * -2 + 1;\n    } while (bVar8);\n    bVar1 = false;\n    bVar7 = false;\n    bVar6 = (!bVar6 && !bVar8) == bVar6;\n    if (!bVar6) {\n      lVar3 = 6;\n      pbVar4 = (byte *)\"POSIX\";\n      do {\n        if (lVar3 == 0) break;\n        lVar3 = lVar3 + -1;\n        bVar7 = *pbVar2 < *pbVar4;\n        bVar6 = *pbVar2 == *pbVar4;\n        pbVar2 = pbVar2 + (ulong)bVar9 * -2 + 1;\n        pbVar4 = pbVar4 + (ulong)bVar9 * -2 + 1;\n      } while (bVar6);\n      return (!bVar7 && !bVar6) != bVar7;\n    }\n  }\n  return bVar1;\n}\n\n",
            "funcName": "FUN_00409840"
        },
        {
            "funcStartAddr": "0x4098a0",
            "funcEndAddr": "0x409df4",
            "decompiledFuncCode": "\n/* WARNING: Could not reconcile some variable overlaps */\n\nchar * FUN_004098a0(void)\n\n{\n  char cVar1;\n  int iVar2;\n  uint uVar3;\n  uint uVar4;\n  char *__s1;\n  size_t sVar5;\n  size_t sVar6;\n  char *pcVar7;\n  size_t __n;\n  char *__file;\n  FILE *__stream;\n  byte *pbVar8;\n  long lVar9;\n  undefined8 *puVar10;\n  long lVar11;\n  ulong uVar12;\n  undefined8 *puVar13;\n  char *__ptr;\n  bool bVar14;\n  long local_d0;\n  undefined8 local_c0;\n  undefined8 local_b8;\n  undefined auStack_80 [8];\n  undefined8 local_78;\n  \n  __s1 = nl_langinfo(0xe);\n  if (__s1 == (char *)0x0) {\n    __s1 = \"\";\n  }\n  if (DAT_00610558 != (char *)0x0) goto LAB_004098da;\n  pcVar7 = getenv(\"CHARSETALIASDIR\");\n  if ((pcVar7 == (char *)0x0) || (*pcVar7 == '\\0')) {\n    sVar6 = 0x73;\n    sVar5 = 0x65;\n    __n = 100;\n    pcVar7 = \n    \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\"\n    ;\nLAB_004099c5:\n    __file = (char *)malloc(sVar6);\n    if (__file != (char *)0x0) {\n      memcpy(__file,pcVar7,__n);\n      __file[__n] = '/';\n      goto LAB_004099e6;\n    }\n  }\n  else {\n    __n = strlen(pcVar7);\n    if (__n == 0) {\n      sVar6 = 0xe;\n    }\n    else {\n      if (pcVar7[__n - 1] != '/') {\n        sVar6 = __n + 0xf;\n        sVar5 = __n + 1;\n        goto LAB_004099c5;\n      }\n      sVar6 = __n + 0xe;\n    }\n    __file = (char *)malloc(sVar6);\n    if (__file != (char *)0x0) {\n      memcpy(__file,pcVar7,__n);\n      sVar5 = __n;\nLAB_004099e6:\n      puVar13 = (undefined8 *)(__file + sVar5);\n      *puVar13 = 0x2e74657372616863;\n      *(undefined2 *)((long)puVar13 + 0xc) = 0x73;\n      *(undefined4 *)(puVar13 + 1) = 0x61696c61;\n      iVar2 = open(__file,0);\n      if (-1 < iVar2) {\n        __stream = fdopen(iVar2,\"r\");\n        local_d0 = 0;\n        if (__stream != (FILE *)0x0) {\n          pcVar7 = (char *)0x0;\nLAB_00409a80:\n          pbVar8 = (byte *)__stream->_IO_read_ptr;\n          if (__stream->_IO_read_end <= pbVar8) goto LAB_00409c0c;\n          do {\n            __stream->_IO_read_ptr = (char *)(pbVar8 + 1);\n            uVar4 = (uint)*pbVar8;\n            __ptr = pcVar7;\n            while( true ) {\n              pcVar7 = __ptr;\n              if ((uVar4 - 9 < 2) || (uVar4 == 0x20)) goto LAB_00409a80;\n              if (uVar4 == 0x23) goto LAB_00409c71;\n              ungetc(uVar4,__stream);\n              iVar2 = fscanf(__stream,\"%50s %50s\",&local_b8,&local_78);\n              puVar13 = &local_b8;\n              if (iVar2 < 2) goto LAB_00409c1f;\n              do {\n                puVar10 = puVar13;\n                uVar3 = *(uint *)puVar10 + 0xfefefeff & ~*(uint *)puVar10;\n                uVar4 = uVar3 & 0x80808080;\n                puVar13 = (undefined8 *)((long)puVar10 + 4);\n              } while (uVar4 == 0);\n              bVar14 = (uVar3 & 0x8080) == 0;\n              if (bVar14) {\n                uVar4 = uVar4 >> 0x10;\n              }\n              if (bVar14) {\n                puVar13 = (undefined8 *)((long)puVar10 + 6);\n              }\n              lVar11 = (long)puVar13 +\n                       ((-3 - (ulong)CARRY1((byte)uVar4,(byte)uVar4)) - (long)&local_b8);\n              puVar13 = &local_78;\n              do {\n                puVar10 = puVar13;\n                uVar3 = *(uint *)puVar10 + 0xfefefeff & ~*(uint *)puVar10;\n                uVar4 = uVar3 & 0x80808080;\n                puVar13 = (undefined8 *)((long)puVar10 + 4);\n              } while (uVar4 == 0);\n              bVar14 = (uVar3 & 0x8080) == 0;\n              if (bVar14) {\n                uVar4 = uVar4 >> 0x10;\n              }\n              if (bVar14) {\n                puVar13 = (undefined8 *)((long)puVar10 + 6);\n              }\n              local_c0 = (long)puVar13 +\n                         ((-3 - (ulong)CARRY1((byte)uVar4,(byte)uVar4)) - (long)&local_78);\n              lVar9 = lVar11 + local_c0;\n              if (local_d0 == 0) {\n                pcVar7 = (char *)malloc(lVar9 + 3);\n              }\n              else {\n                lVar9 = lVar9 + local_d0;\n                pcVar7 = (char *)realloc(__ptr,lVar9 + 3);\n              }\n              local_d0 = lVar9 + 2;\n              if (pcVar7 == (char *)0x0) {\n                pcVar7 = \"\";\n                free(__ptr);\n                FUN_00409e10(__stream);\n                goto LAB_00409a24;\n              }\n              uVar12 = lVar11 + 1;\n              puVar13 = (undefined8 *)(pcVar7 + (-2 - lVar11) + (local_d0 - local_c0));\n              uVar4 = (uint)uVar12;\n              if (uVar4 < 8) {\n                if ((uVar12 & 4) == 0) {\n                  if (uVar4 != 0) {\n                    *(undefined *)puVar13 = (undefined)local_b8;\n                    if ((uVar12 & 2) != 0) {\n                      *(undefined2 *)((long)puVar13 + ((uVar12 & 0xffffffff) - 2)) =\n                           *(undefined2 *)((long)&local_b8 + ((uVar12 & 0xffffffff) - 2));\n                    }\n                  }\n                }\n                else {\n                  *(undefined4 *)puVar13 = (undefined4)local_b8;\n                  *(undefined4 *)((long)puVar13 + ((uVar12 & 0xffffffff) - 4)) =\n                       *(undefined4 *)((long)&local_b8 + ((uVar12 & 0xffffffff) - 4));\n                }\n              }\n              else {\n                *puVar13 = CONCAT44(local_b8._4_4_,(undefined4)local_b8);\n                *(undefined8 *)((long)puVar13 + ((uVar12 & 0xffffffff) - 8)) =\n                     *(undefined8 *)((long)&local_b8 + ((uVar12 & 0xffffffff) - 8));\n                lVar11 = (long)puVar13 - ((ulong)(puVar13 + 1) & 0xfffffffffffffff8);\n                uVar4 = uVar4 + (int)lVar11 & 0xfffffff8;\n                if (7 < uVar4) {\n                  uVar3 = 0;\n                  do {\n                    uVar12 = (ulong)uVar3;\n                    uVar3 = uVar3 + 8;\n                    *(undefined8 *)(((ulong)(puVar13 + 1) & 0xfffffffffffffff8) + uVar12) =\n                         *(undefined8 *)((long)&local_b8 + (uVar12 - lVar11));\n                  } while (uVar3 < uVar4);\n                }\n              }\n              uVar12 = local_c0 + 1;\n              puVar13 = (undefined8 *)(pcVar7 + (local_d0 - local_c0) + -1);\n              uVar4 = (uint)uVar12;\n              if (uVar4 < 8) {\n                if ((uVar12 & 4) == 0) {\n                  if (uVar4 != 0) {\n                    *(undefined *)puVar13 = (undefined)local_78;\n                    if ((uVar12 & 2) != 0) {\n                      *(undefined2 *)((long)puVar13 + ((uVar12 & 0xffffffff) - 2)) =\n                           *(undefined2 *)((long)auStack_80 + (uVar12 & 0xffffffff) + 6);\n                    }\n                  }\n                }\n                else {\n                  *(undefined4 *)puVar13 = (undefined4)local_78;\n                  *(undefined4 *)((long)puVar13 + ((uVar12 & 0xffffffff) - 4)) =\n                       *(undefined4 *)((long)auStack_80 + (uVar12 & 0xffffffff) + 4);\n                }\n              }\n              else {\n                *puVar13 = CONCAT44(local_78._4_4_,(undefined4)local_78);\n                *(undefined8 *)((long)puVar13 + ((uVar12 & 0xffffffff) - 8)) =\n                     *(undefined8 *)((long)auStack_80 + (uVar12 & 0xffffffff));\n                lVar11 = (long)puVar13 - ((ulong)(puVar13 + 1) & 0xfffffffffffffff8);\n                uVar4 = uVar4 + (int)lVar11 & 0xfffffff8;\n                if (7 < uVar4) {\n                  uVar3 = 0;\n                  do {\n                    uVar12 = (ulong)uVar3;\n                    uVar3 = uVar3 + 8;\n                    *(undefined8 *)(((ulong)(puVar13 + 1) & 0xfffffffffffffff8) + uVar12) =\n                         *(undefined8 *)((long)&local_78 + (uVar12 - lVar11));\n                  } while (uVar3 < uVar4);\n                }\n              }\n              pbVar8 = (byte *)__stream->_IO_read_ptr;\n              if (pbVar8 < __stream->_IO_read_end) break;\nLAB_00409c0c:\n              uVar4 = __uflow(__stream);\n              __ptr = pcVar7;\n              if (uVar4 == 0xffffffff) goto LAB_00409c1f;\n            }\n          } while( true );\n        }\n        close(iVar2);\n      }\n      goto LAB_00409a1e;\n    }\n  }\n  DAT_00610558 = \"\";\nLAB_004098da:\n  cVar1 = *DAT_00610558;\n  pcVar7 = DAT_00610558;\n  do {\n    if (cVar1 == '\\0') {\nLAB_00409934:\n      if (*__s1 == '\\0') {\n        __s1 = \"ASCII\";\n      }\n      return __s1;\n    }\n    iVar2 = strcmp(__s1,pcVar7);\n    if ((iVar2 == 0) || ((cVar1 == '*' && (pcVar7[1] == '\\0')))) {\n      sVar6 = strlen(pcVar7);\n      __s1 = pcVar7 + sVar6 + 1;\n      goto LAB_00409934;\n    }\n    sVar6 = strlen(pcVar7);\n    sVar5 = strlen(pcVar7 + sVar6 + 1);\n    pcVar7 = pcVar7 + sVar6 + 1 + sVar5 + 1;\n    cVar1 = *pcVar7;\n  } while( true );\nLAB_00409c71:\n  do {\n    pbVar8 = (byte *)__stream->_IO_read_ptr;\n    if (pbVar8 < __stream->_IO_read_end) {\n      __stream->_IO_read_ptr = (char *)(pbVar8 + 1);\n      uVar4 = (uint)*pbVar8;\n      bVar14 = true;\n    }\n    else {\n      uVar4 = __uflow(__stream);\n      bVar14 = uVar4 != 0xffffffff;\n    }\n  } while ((uVar4 != 10) && (bVar14));\n  if (uVar4 == 0xffffffff) goto LAB_00409c1f;\n  goto LAB_00409a80;\nLAB_00409c1f:\n  FUN_00409e10(__stream);\n  if (local_d0 == 0) {\nLAB_00409a1e:\n    pcVar7 = \"\";\n  }\n  else {\n    pcVar7[local_d0] = '\\0';\n  }\nLAB_00409a24:\n  free(__file);\n  DAT_00610558 = pcVar7;\n  goto LAB_004098da;\n}\n\n",
            "funcName": "FUN_004098a0"
        },
        {
            "funcStartAddr": "0x409e10",
            "funcEndAddr": "0x409e88",
            "decompiledFuncCode": "\nint FUN_00409e10(FILE *param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  int *piVar3;\n  __off_t _Var4;\n  \n  iVar1 = fileno(param_1);\n  if (-1 < iVar1) {\n    iVar1 = __freading();\n    if (iVar1 != 0) {\n      iVar1 = fileno(param_1);\n      _Var4 = lseek(iVar1,0,1);\n      if (_Var4 == -1) goto LAB_00409e77;\n    }\n    iVar1 = FUN_00409e90(param_1);\n    if (iVar1 != 0) {\n      piVar3 = __errno_location();\n      iVar1 = *piVar3;\n      iVar2 = fclose(param_1);\n      if (iVar1 != 0) {\n        *piVar3 = iVar1;\n        iVar2 = -1;\n      }\n      return iVar2;\n    }\n  }\nLAB_00409e77:\n  iVar1 = fclose(param_1);\n  return iVar1;\n}\n\n",
            "funcName": "FUN_00409e10"
        },
        {
            "funcStartAddr": "0x409e90",
            "funcEndAddr": "0x409ecb",
            "decompiledFuncCode": "\nvoid FUN_00409e90(FILE *param_1)\n\n{\n  int iVar1;\n  \n  if (param_1 != (FILE *)0x0) {\n    iVar1 = __freading();\n    if ((iVar1 != 0) && ((param_1->_flags & 0x100U) != 0)) {\n      FUN_00409ed0(param_1,0,1);\n      fflush(param_1);\n      return;\n    }\n  }\n  fflush(param_1);\n  return;\n}\n\n",
            "funcName": "FUN_00409e90"
        },
        {
            "funcStartAddr": "0x409ed0",
            "funcEndAddr": "0x409f26",
            "decompiledFuncCode": "\nulong FUN_00409ed0(FILE *param_1,__off_t param_2,int param_3)\n\n{\n  uint uVar1;\n  int __fd;\n  ulong uVar2;\n  \n  if (((param_1->_IO_read_end == param_1->_IO_read_ptr) &&\n      (param_1->_IO_write_ptr == param_1->_IO_write_base)) &&\n     (param_1->_IO_save_base == (char *)0x0)) {\n    __fd = fileno(param_1);\n    uVar2 = lseek(__fd,param_2,param_3);\n    if (uVar2 != 0xffffffffffffffff) {\n      param_1->_flags = param_1->_flags & 0xffffffef;\n      param_1->_offset = uVar2;\n      uVar2 = 0;\n    }\n    return uVar2;\n  }\n  uVar1 = fseeko(param_1,param_2,param_3);\n  return (ulong)uVar1;\n}\n\n",
            "funcName": "FUN_00409ed0"
        },
        {
            "funcStartAddr": "0x409f30",
            "funcEndAddr": "0x409f8d",
            "decompiledFuncCode": "\n/* WARNING: Removing unreachable block (ram,0x00409f63) */\n/* WARNING: Removing unreachable block (ram,0x00409f68) */\n\nvoid FUN_00409f30(void)\n\n{\n  __DT_INIT();\n  return;\n}\n\n",
            "funcName": "FUN_00409f30"
        },
        {
            "funcStartAddr": "0x409f90",
            "funcEndAddr": "0x409f91",
            "decompiledFuncCode": "\nvoid FUN_00409f90(void)\n\n{\n  return;\n}\n\n",
            "funcName": "FUN_00409f90"
        },
        {
            "funcStartAddr": "0x409fa0",
            "funcEndAddr": "0x409fb8",
            "decompiledFuncCode": "\nvoid FUN_00409fa0(undefined8 param_1)\n\n{\n  __cxa_atexit(param_1,0,DAT_00610248);\n  return;\n}\n\n",
            "funcName": "FUN_00409fa0"
        },
        {
            "funcStartAddr": "0x409fb8",
            "funcEndAddr": "0x409fd8",
            "decompiledFuncCode": "\nundefined8 FUN_00409fb8(undefined8 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  code **ppcVar1;\n  \n  for (ppcVar1 = (code **)&DAT_0060fe30; *ppcVar1 != (code *)0xffffffffffffffff;\n      ppcVar1 = ppcVar1 + -1) {\n    (**ppcVar1)();\n  }\n  return param_3;\n}\n\n",
            "funcName": "FUN_00409fb8"
        }
    ],
    "decompilerName": "Ghidra",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf",
    "isStripped": "True",
    "compilerName": "gcc",
    "optLevel": "-O"
}