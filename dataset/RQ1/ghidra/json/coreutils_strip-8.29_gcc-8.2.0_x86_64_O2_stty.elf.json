{
    "funcCount": 111,
    "funcInfo": [
        {
            "funcStartAddr": "0x401a7a",
            "funcEndAddr": "0x401a7f",
            "decompiledFuncCode": "\nvoid FUN_00401a7a(void)\n\n{\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n",
            "funcName": "FUN_00401a7a"
        },
        {
            "funcStartAddr": "0x401a7f",
            "funcEndAddr": "0x401a84",
            "decompiledFuncCode": "\nvoid FUN_00401a7f(void)\n\n{\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n",
            "funcName": "FUN_00401a7f"
        },
        {
            "funcStartAddr": "0x401a84",
            "funcEndAddr": "0x401a89",
            "decompiledFuncCode": "\nvoid FUN_00401a84(void)\n\n{\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n",
            "funcName": "FUN_00401a84"
        },
        {
            "funcStartAddr": "0x401a89",
            "funcEndAddr": "0x401a8e",
            "decompiledFuncCode": "\nvoid FUN_00401a89(void)\n\n{\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n",
            "funcName": "FUN_00401a89"
        },
        {
            "funcStartAddr": "0x401aa0",
            "funcEndAddr": "0x402578",
            "decompiledFuncCode": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nundefined8 FUN_00401aa0(int param_1,undefined8 *param_2)\n\n{\n  char cVar1;\n  char *pcVar2;\n  bool bVar3;\n  bool bVar4;\n  bool bVar5;\n  uint uVar6;\n  int iVar7;\n  uint uVar8;\n  int iVar9;\n  undefined8 uVar10;\n  undefined8 *puVar11;\n  uint *puVar12;\n  char *pcVar13;\n  int *piVar14;\n  undefined8 uVar15;\n  uint uVar16;\n  long lVar17;\n  undefined *puVar18;\n  undefined **ppuVar19;\n  int iVar20;\n  long lVar21;\n  byte *pbVar22;\n  undefined4 *puVar23;\n  byte *pbVar24;\n  _IO_FILE *p_Var25;\n  char *in_R9;\n  uint uVar26;\n  bool bVar27;\n  bool bVar28;\n  byte bVar29;\n  long local_58;\n  char local_3a;\n  char local_39 [9];\n  \n  bVar29 = 0;\n  iVar9 = 0;\n  uVar26 = 0;\n  lVar21 = 0;\n  FUN_00404a50(*param_2);\n  setlocale(6,\"\");\n  bindtextdomain(\"coreutils\",\n                 \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\"\n                );\n  textdomain(\"coreutils\");\n  FUN_0040bd50(FUN_00404940);\n  bVar4 = true;\n  DAT_006132b8 = 0;\n  local_58 = 0;\n  bVar3 = false;\n  bVar5 = false;\n  uVar8 = 1;\nLAB_00401b27:\n  uVar10 = FUN_004089e0(param_1 - uVar26,param_2 + lVar21,\"-agF:\",&PTR_DAT_0040c720,0);\n  uVar6 = DAT_006132bc;\n  iVar7 = (int)uVar10;\n  if (iVar7 != -1) {\n    if (iVar7 == 0x46) {\n      if (local_58 != 0) goto LAB_00402407;\n      local_58 = DAT_00613580;\n    }\n    else {\n      if (iVar7 < 0x47) {\n        if (iVar7 == -0x83) {\n          FUN_00406af0(stdout,&DAT_0040bdfd,\"GNU coreutils\",PTR_DAT_00613238,\"David MacKenzie\",0);\n                    /* WARNING: Subroutine does not return */\n          exit(0);\n        }\n        if (iVar7 == -0x82) {\n          p_Var25 = (_IO_FILE *)0x0;\n          FUN_00402d90();\n          goto LAB_004023ce;\n        }\nLAB_00401c0b:\n        bVar27 = CARRY4(uVar26,uVar8);\n        uVar26 = uVar26 + uVar8;\n        bVar28 = uVar26 == 0;\n        lVar17 = 7;\n        lVar21 = (long)(int)uVar26;\n        pbVar22 = (byte *)param_2[lVar21];\n        pbVar24 = (byte *)\"-drain\";\n        do {\n          if (lVar17 == 0) break;\n          lVar17 = lVar17 + -1;\n          bVar27 = *pbVar22 < *pbVar24;\n          bVar28 = *pbVar22 == *pbVar24;\n          pbVar22 = pbVar22 + (ulong)bVar29 * -2 + 1;\n          pbVar24 = pbVar24 + (ulong)bVar29 * -2 + 1;\n        } while (bVar28);\n        if (((!bVar27 && !bVar28) != bVar27) &&\n           (iVar7 = strcmp((char *)(byte *)param_2[lVar21],\"drain\"), iVar7 != 0)) {\n          bVar4 = false;\n        }\n        DAT_006132bc = 0;\n        uVar8 = 1;\n        goto LAB_00401b27;\n      }\n      if (iVar7 == 0x61) {\n        bVar5 = true;\n        iVar9 = 1;\n      }\n      else {\n        if (iVar7 != 0x67) goto LAB_00401c0b;\n        bVar3 = true;\n        iVar9 = 2;\n      }\n    }\n    if ((int)uVar8 < (int)DAT_006132bc) {\n      lVar17 = (long)(int)uVar8;\n      uVar16 = (DAT_006132bc - 1) - uVar8;\n      puVar11 = param_2 + lVar17 + lVar21;\n      do {\n        *puVar11 = 0;\n        puVar11 = puVar11 + 1;\n        uVar8 = uVar6;\n      } while (puVar11 != param_2 + (ulong)uVar16 + lVar17 + lVar21 + 1);\n    }\n    goto LAB_00401b27;\n  }\n  if ((bool)(bVar5 & bVar3)) {\n    uVar10 = dcgettext(0,\n                       \"the options for verbose and stty-readable output styles are\\nmutually exclusive\"\n                       ,5);\n    error(1,0,uVar10);\nLAB_00402407:\n    uVar10 = dcgettext(0,\"only one device may be specified\",5);\n    error(1,0,uVar10);\nLAB_00402429:\n    uVar10 = FUN_004064f0(0,3,local_58);\n    piVar14 = __errno_location();\n    error(1,*piVar14,\"%s\",uVar10);\nLAB_00402458:\n    uVar10 = dcgettext(0,\"when specifying an output style, modes may not be set\",5);\n    error(1,0,uVar10);\nLAB_0040247a:\n    uVar10 = FUN_004064f0(0,3,local_58);\n    uVar15 = dcgettext(0,\"%s: couldn\\'t reset non-blocking mode\",5);\n    piVar14 = __errno_location();\n    error(1,*piVar14,uVar15,uVar10);\nLAB_004024bb:\n    uVar10 = FUN_004064f0(0,3,local_58);\n    piVar14 = __errno_location();\n    p_Var25 = (_IO_FILE *)0x1;\n    error(1,*piVar14,\"%s\",uVar10);\nLAB_004024ea:\n    __overflow(p_Var25,10);\n  }\n  else {\n    if (!bVar4) {\n      if ((!bVar5) && (!bVar3)) {\n        if (local_58 == 0) goto LAB_00401f9e;\n        FUN_00403bd0(1,local_58,param_2,param_1,&DAT_006133a0,local_39,&local_3a,uVar10);\n        goto LAB_00401d02;\n      }\n      goto LAB_00402458;\n    }\n    if (local_58 != 0) {\nLAB_00401d02:\n      iVar7 = FUN_004049e0(0,local_58,0x800,0);\n      if (-1 < iVar7) {\n        uVar8 = FUN_00407b50(0,3);\n        if ((uVar8 != 0xffffffff) && (iVar7 = FUN_00407b50(0,4,uVar8 & 0xfffff7ff), -1 < iVar7)) {\n          puVar23 = &DAT_00613360;\n          iVar7 = tcgetattr(0,(termios *)&DAT_00613360);\n          if (iVar7 == 0) {\n            if (((bool)(bVar3 | bVar4)) || (bVar5)) goto LAB_00401e03;\n            do {\n              in_R9 = local_39;\n              local_39[0] = '\\0';\n              local_3a = '\\0';\n              FUN_00403bd0(0,local_58,param_2,param_1,&DAT_00613360,in_R9,&local_3a,puVar23);\n              if (local_3a == '\\0') {\n                return 0;\n              }\n              iVar9 = tcsetattr(0,DAT_00613230,(termios *)&DAT_00613360);\n              if (iVar9 != 0) {\n                uVar10 = FUN_004064f0(0,3,local_58);\n                piVar14 = __errno_location();\n                p_Var25 = (_IO_FILE *)0x1;\n                error(1,*piVar14,\"%s\",uVar10);\n                goto LAB_00402587;\n              }\n              iVar9 = tcgetattr(0,(termios *)&DAT_00613320);\n              if (iVar9 != 0) goto LAB_00402429;\n              iVar9 = memcmp(&DAT_00613360,&DAT_00613320,0x3c);\n              if (iVar9 == 0) {\n                return 0;\n              }\n              _DAT_00613328 = _DAT_00613328 & 0xeff0ffff;\n              if ((local_39[0] == '\\0') &&\n                 (iVar9 = memcmp(&DAT_00613360,&DAT_00613320,0x3c), iVar9 == 0)) {\n                return 0;\n              }\n              param_2 = (undefined8 *)FUN_004064f0(0,3,local_58);\n              uVar10 = dcgettext(0,\"%s: unable to perform all requested operations\",5);\n              error(1,0,uVar10,param_2);\nLAB_00401f9e:\n              local_58 = dcgettext(0,\"standard input\",5);\n              FUN_00403bd0(1,local_58,param_2,param_1,&DAT_006133a0,local_39,&local_3a,in_R9);\n              puVar23 = &DAT_00613360;\n              iVar9 = tcgetattr(0,(termios *)&DAT_00613360);\n            } while (iVar9 == 0);\n          }\n          goto LAB_00401ff5;\n        }\n        goto LAB_0040247a;\n      }\n      goto LAB_004024bb;\n    }\n    local_58 = dcgettext(0,\"standard input\",5);\n    iVar7 = tcgetattr(0,(termios *)&DAT_00613360);\n    if (iVar7 != 0) {\nLAB_00401ff5:\n      uVar10 = FUN_004064f0(0,3,local_58);\n      piVar14 = __errno_location();\n      error(1,*piVar14,\"%s\",uVar10);\nLAB_00402024:\n      __printf_chk(1,\"%lx:%lx:%lx:%lx\",DAT_00613360,DAT_00613364,DAT_00613368,DAT_0061336c);\n      lVar21 = 0;\n      do {\n        lVar17 = lVar21 + 1;\n        __printf_chk(1,\":%lx\",(&DAT_00613371)[lVar21]);\n        lVar21 = lVar17;\n      } while (lVar17 != 0x20);\n      pcVar2 = stdout->_IO_write_ptr;\n      if (stdout->_IO_write_end <= pcVar2) {\n        __overflow(stdout,10);\n        return 0;\n      }\n      stdout->_IO_write_ptr = pcVar2 + 1;\n      *pcVar2 = '\\n';\n      return 0;\n    }\nLAB_00401e03:\n    DAT_006133e0 = FUN_004026e0();\n    DAT_006133dc = 0;\n    if (iVar9 != 1) {\n      if (iVar9 == 2) goto LAB_00402024;\n      FUN_00402930(&DAT_00613360,1);\n      FUN_004027c0(\"line = %d;\",DAT_00613370);\n      pcVar2 = stdout->_IO_write_ptr;\n      p_Var25 = stdout;\n      if (pcVar2 < stdout->_IO_write_end) {\n        stdout->_IO_write_ptr = pcVar2 + 1;\n        *pcVar2 = '\\n';\n      }\n      else {\nLAB_00402587:\n        __overflow(p_Var25,10);\n      }\n      DAT_006133dc = 0;\n      ppuVar19 = &PTR_DAT_0040c7e0;\n      bVar3 = true;\n      while( true ) {\n        pcVar2 = *ppuVar19;\n        iVar9 = strcmp(pcVar2,\"min\");\n        if (iVar9 == 0) break;\n        cVar1 = ppuVar19[2][0x613371];\n        if ((cVar1 != *(char *)(ppuVar19 + 1)) && (iVar9 = strcmp(pcVar2,\"flush\"), iVar9 != 0)) {\n          if (cVar1 == '\\0') {\n            pcVar13 = \"<undef>\";\n          }\n          else {\n            pcVar13 = (char *)FUN_00402b00(cVar1);\n          }\n          FUN_004027c0(\"%s = %s;\",pcVar2,pcVar13);\n          bVar3 = false;\n        }\n        ppuVar19 = ppuVar19 + 3;\n      }\n      if ((DAT_0061336c & 2) == 0) {\n        FUN_004027c0(\"min = %lu; time = %lu;\\n\",DAT_00613377,DAT_00613376);\n      }\n      else if (!bVar3) {\n        pcVar2 = stdout->_IO_write_ptr;\n        p_Var25 = stdout;\n        if (pcVar2 < stdout->_IO_write_end) {\n          stdout->_IO_write_ptr = pcVar2 + 1;\n          *pcVar2 = '\\n';\n        }\n        else {\nLAB_004023ce:\n          __overflow(p_Var25,10);\n        }\n      }\n      iVar9 = 0;\n      bVar3 = true;\n      DAT_006133dc = 0;\n      for (ppuVar19 = &PTR_s_parenb_0040c9c0; *ppuVar19 != (undefined *)0x0; ppuVar19 = ppuVar19 + 4\n          ) {\n        if ((*(byte *)((long)ppuVar19 + 0xc) & 8) == 0) {\n          if (*(int *)(ppuVar19 + 1) != iVar9) {\n            if (!bVar3) {\n              pcVar2 = stdout->_IO_write_ptr;\n              if (pcVar2 < stdout->_IO_write_end) {\n                stdout->_IO_write_ptr = pcVar2 + 1;\n                *pcVar2 = '\\n';\n              }\n              else {\n                __overflow(stdout,10);\n              }\n              DAT_006133dc = 0;\n            }\n            iVar9 = *(int *)(ppuVar19 + 1);\n            bVar3 = true;\n          }\n          puVar12 = (uint *)FUN_00402750(iVar9,&DAT_00613360);\n          puVar18 = ppuVar19[3];\n          if (puVar18 == (undefined *)0x0) {\n            puVar18 = ppuVar19[2];\n          }\n          if (puVar12 == (uint *)0x0) {\n                    /* WARNING: Subroutine does not return */\n            __assert_fail(\"bitsp\",\"src/stty.c\",0x7a2,\"display_changed\");\n          }\n          if ((undefined *)(ulong)((uint)puVar18 & *puVar12) == ppuVar19[2]) {\n            if ((*(byte *)((long)ppuVar19 + 0xc) & 2) != 0) {\n              bVar3 = false;\n              FUN_004027c0(\"%s\",*ppuVar19);\n            }\n          }\n          else if ((*(byte *)((long)ppuVar19 + 0xc) & 5) == 5) {\n            bVar3 = false;\n            FUN_004027c0(&DAT_0040c0a1,*ppuVar19);\n          }\n        }\n      }\n      if (bVar3) {\n        DAT_006133dc = 0;\n        return 0;\n      }\n      goto LAB_004021b0;\n    }\n    FUN_00402930(&DAT_00613360,1);\n    FUN_00402ca0(1,local_58);\n    FUN_004027c0(\"line = %d;\",DAT_00613370);\n    pcVar2 = stdout->_IO_write_ptr;\n    p_Var25 = stdout;\n    if (stdout->_IO_write_end <= pcVar2) goto LAB_004024ea;\n    stdout->_IO_write_ptr = pcVar2 + 1;\n    *pcVar2 = '\\n';\n  }\n  DAT_006133dc = 0;\n  ppuVar19 = &PTR_DAT_0040c7e0;\n  while( true ) {\n    pcVar2 = *ppuVar19;\n    iVar9 = strcmp(pcVar2,\"min\");\n    if (iVar9 == 0) break;\n    iVar9 = strcmp(pcVar2,\"flush\");\n    if (iVar9 != 0) {\n      if (ppuVar19[2][0x613371] == '\\0') {\n        pcVar13 = \"<undef>\";\n      }\n      else {\n        pcVar13 = (char *)FUN_00402b00(ppuVar19[2][0x613371]);\n      }\n      FUN_004027c0(\"%s = %s;\",pcVar2,pcVar13);\n    }\n    ppuVar19 = ppuVar19 + 3;\n  }\n  FUN_004027c0(\"min = %lu; time = %lu;\",DAT_00613377,DAT_00613376);\n  if (DAT_006133dc != 0) {\n    pcVar2 = stdout->_IO_write_ptr;\n    if (pcVar2 < stdout->_IO_write_end) {\n      stdout->_IO_write_ptr = pcVar2 + 1;\n      *pcVar2 = '\\n';\n    }\n    else {\n      __overflow(stdout,10);\n    }\n  }\n  DAT_006133dc = 0;\n  iVar9 = 0;\n  for (ppuVar19 = &PTR_s_parenb_0040c9c0; *ppuVar19 != (undefined *)0x0; ppuVar19 = ppuVar19 + 4) {\n    if ((*(byte *)((long)ppuVar19 + 0xc) & 8) == 0) {\n      iVar7 = *(int *)(ppuVar19 + 1);\n      iVar20 = iVar7;\n      if (iVar7 != iVar9) {\n        pcVar2 = stdout->_IO_write_ptr;\n        if (pcVar2 < stdout->_IO_write_end) {\n          stdout->_IO_write_ptr = pcVar2 + 1;\n          *pcVar2 = '\\n';\n        }\n        else {\n          __overflow(stdout,10);\n        }\n        DAT_006133dc = 0;\n        iVar20 = *(int *)(ppuVar19 + 1);\n        iVar9 = iVar7;\n      }\n      puVar12 = (uint *)FUN_00402750(iVar20,&DAT_00613360);\n      puVar18 = ppuVar19[3];\n      if (puVar18 == (undefined *)0x0) {\n        puVar18 = ppuVar19[2];\n      }\n      if (puVar12 == (uint *)0x0) {\n                    /* WARNING: Subroutine does not return */\n        __assert_fail(\"bitsp\",\"src/stty.c\",0x7f6,\"display_all\");\n      }\n      if ((undefined *)(ulong)((uint)puVar18 & *puVar12) == ppuVar19[2]) {\n        FUN_004027c0(\"%s\",*ppuVar19);\n      }\n      else if ((*(byte *)((long)ppuVar19 + 0xc) & 4) != 0) {\n        FUN_004027c0(&DAT_0040c0a1,*ppuVar19);\n      }\n    }\n  }\nLAB_004021b0:\n  pcVar2 = stdout->_IO_write_ptr;\n  if (pcVar2 < stdout->_IO_write_end) {\n    stdout->_IO_write_ptr = pcVar2 + 1;\n    *pcVar2 = '\\n';\n  }\n  else {\n    __overflow(stdout,10);\n  }\n  DAT_006133dc = 0;\n  return 0;\n}\n\n",
            "funcName": "FUN_00401aa0"
        },
        {
            "funcStartAddr": "0x4025a0",
            "funcEndAddr": "0x4025cb",
            "decompiledFuncCode": "\nvoid FUN_004025a0(undefined8 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  undefined8 unaff_retaddr;\n  undefined auStack_8 [8];\n  \n  (*(code *)PTR___libc_start_main_00612ff0)\n            (FUN_00401aa0,unaff_retaddr,&stack0x00000008,FUN_0040bce0,FUN_0040bd40,param_3,auStack_8\n            );\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "funcName": "FUN_004025a0"
        },
        {
            "funcStartAddr": "0x4025cb",
            "funcEndAddr": "0x4025ea",
            "decompiledFuncCode": "\n/* WARNING: Removing unreachable block (ram,0x004025d8) */\n/* WARNING: Removing unreachable block (ram,0x004025e2) */\n\nvoid FUN_004025cb(void)\n\n{\n  return;\n}\n\n",
            "funcName": "FUN_004025cb"
        },
        {
            "funcStartAddr": "0x4025ea",
            "funcEndAddr": "0x402621",
            "decompiledFuncCode": "\n/* WARNING: Removing unreachable block (ram,0x00402619) */\n\nvoid FUN_004025ea(void)\n\n{\n  return;\n}\n\n",
            "funcName": "FUN_004025ea"
        },
        {
            "funcStartAddr": "0x402621",
            "funcEndAddr": "0x402678",
            "decompiledFuncCode": "\n/* WARNING: Removing unreachable block (ram,0x00402656) */\n\nvoid FUN_00402621(void)\n\n{\n  if (DAT_006132e8 != '\\0') {\n    return;\n  }\n  FUN_004025cb();\n  DAT_006132e8 = 1;\n  return;\n}\n\n",
            "funcName": "FUN_00402621"
        },
        {
            "funcStartAddr": "0x402678",
            "funcEndAddr": "0x40267d",
            "decompiledFuncCode": "\n/* WARNING: Removing unreachable block (ram,0x00402619) */\n\nvoid thunk_FUN_004025ea(void)\n\n{\n  return;\n}\n\n",
            "funcName": "thunk_402678"
        },
        {
            "funcStartAddr": "0x402680",
            "funcEndAddr": "0x4026cf",
            "decompiledFuncCode": "\nundefined4 FUN_00402680(char *param_1)\n\n{\n  int iVar1;\n  char **ppcVar2;\n  int iVar3;\n  char *__s2;\n  \n  __s2 = \"0\";\n  iVar3 = 0;\n  ppcVar2 = &PTR_DAT_0040c3d8;\n  do {\n    iVar1 = strcmp(param_1,__s2);\n    if (iVar1 == 0) {\n      return (&DAT_0040c3c8)[(long)iVar3 * 6];\n    }\n    __s2 = *ppcVar2;\n    iVar3 = iVar3 + 1;\n    ppcVar2 = ppcVar2 + 3;\n  } while (__s2 != (char *)0x0);\n  return 0xffffffff;\n}\n\n",
            "funcName": "FUN_00402680"
        },
        {
            "funcStartAddr": "0x4026e0",
            "funcEndAddr": "0x40274b",
            "decompiledFuncCode": "\nulong FUN_004026e0(void)\n\n{\n  int iVar1;\n  char *pcVar2;\n  ulong uVar3;\n  ulong local_18;\n  undefined local_10 [2];\n  ushort local_e;\n  \n  iVar1 = ioctl(1,0x5413,local_10);\n  if ((iVar1 != 0) || (uVar3 = (ulong)local_e, local_e == 0)) {\n    pcVar2 = getenv(\"COLUMNS\");\n    if ((pcVar2 != (char *)0x0) &&\n       ((iVar1 = FUN_00406fc0(pcVar2,0,0,&local_18,\"\"), iVar1 == 0 && (local_18 - 1 < 0x7fffffff))))\n    {\n      return local_18;\n    }\n    uVar3 = 0x50;\n  }\n  return uVar3;\n}\n\n",
            "funcName": "FUN_004026e0"
        },
        {
            "funcStartAddr": "0x402750",
            "funcEndAddr": "0x402790",
            "decompiledFuncCode": "\nlong FUN_00402750(undefined4 param_1,long param_2)\n\n{\n  switch(param_1) {\n  case 0:\n    return param_2 + 8;\n  case 1:\n    return param_2;\n  case 2:\n    return param_2 + 4;\n  case 3:\n    return param_2 + 0xc;\n  case 4:\n    return 0;\n  default:\n                    /* WARNING: Subroutine does not return */\n    abort();\n  }\n}\n\n",
            "funcName": "FUN_00402750"
        },
        {
            "funcStartAddr": "0x4027c0",
            "funcEndAddr": "0x402913",
            "decompiledFuncCode": "\nvoid FUN_004027c0(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n                 undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n                 undefined8 param_9,undefined8 param_10,undefined8 param_11,undefined8 param_12,\n                 undefined8 param_13,undefined8 param_14)\n\n{\n  char *pcVar1;\n  char in_AL;\n  int iVar2;\n  char *local_d8;\n  undefined4 local_d0;\n  undefined4 local_cc;\n  undefined *local_c8;\n  undefined *local_c0;\n  undefined local_b8 [8];\n  undefined8 local_b0;\n  undefined8 local_a8;\n  undefined8 local_a0;\n  undefined8 local_98;\n  undefined8 local_90;\n  undefined4 local_88;\n  undefined4 local_78;\n  undefined4 local_68;\n  undefined4 local_58;\n  undefined4 local_48;\n  undefined4 local_38;\n  undefined4 local_28;\n  undefined4 local_18;\n  \n  if (in_AL != '\\0') {\n    local_88 = param_1;\n    local_78 = param_2;\n    local_68 = param_3;\n    local_58 = param_4;\n    local_48 = param_5;\n    local_38 = param_6;\n    local_28 = param_7;\n    local_18 = param_8;\n  }\n  local_c8 = &stack0x00000008;\n  local_c0 = local_b8;\n  local_d0 = 8;\n  local_cc = 0x30;\n  local_b0 = param_10;\n  local_a8 = param_11;\n  local_a0 = param_12;\n  local_98 = param_13;\n  local_90 = param_14;\n  iVar2 = FUN_00408ae0(&local_d8,param_9,&local_d0);\n  if (-1 < iVar2) {\n    if (0 < DAT_006133dc) {\n      pcVar1 = stdout->_IO_write_ptr;\n      if (DAT_006133e0 - DAT_006133dc < iVar2) {\n        if (pcVar1 < stdout->_IO_write_end) {\n          stdout->_IO_write_ptr = pcVar1 + 1;\n          *pcVar1 = '\\n';\n        }\n        else {\n          __overflow(stdout,10);\n        }\n        DAT_006133dc = 0;\n      }\n      else {\n        if (pcVar1 < stdout->_IO_write_end) {\n          stdout->_IO_write_ptr = pcVar1 + 1;\n          *pcVar1 = ' ';\n        }\n        else {\n          __overflow(stdout,0x20);\n        }\n        DAT_006133dc = DAT_006133dc + 1;\n      }\n    }\n    fputs_unlocked(local_d8,stdout);\n    free(local_d8);\n    DAT_006133dc = DAT_006133dc + iVar2;\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  FUN_00406e80();\n}\n\n",
            "funcName": "FUN_004027c0"
        },
        {
            "funcStartAddr": "0x402930",
            "funcEndAddr": "0x402a81",
            "decompiledFuncCode": "\nvoid FUN_00402930(termios *param_1,char param_2)\n\n{\n  speed_t sVar1;\n  speed_t sVar2;\n  int iVar3;\n  speed_t *psVar4;\n  undefined *puVar5;\n  undefined8 uVar6;\n  char *pcVar7;\n  undefined8 uVar8;\n  \n  sVar1 = cfgetispeed(param_1);\n  if (sVar1 != 0) {\n    sVar1 = cfgetispeed(param_1);\n    sVar2 = cfgetospeed(param_1);\n    if (sVar1 != sVar2) {\n      sVar1 = cfgetospeed(param_1);\n      if (sVar1 != 0) {\n        iVar3 = 0;\n        puVar5 = &DAT_0040c0de;\n        psVar4 = &DAT_0040c3e0;\n        while (iVar3 = iVar3 + 1, puVar5 != (undefined *)0x0) {\n          if (sVar1 == *psVar4) {\n            uVar8 = *(undefined8 *)(&UNK_0040c3d0 + (long)iVar3 * 0x18);\n            goto LAB_00402a04;\n          }\n          puVar5 = *(undefined **)(psVar4 + 4);\n          psVar4 = psVar4 + 6;\n        }\n      }\n      uVar8 = 0;\nLAB_00402a04:\n      sVar1 = cfgetispeed(param_1);\n      if (sVar1 != 0) {\n        iVar3 = 0;\n        puVar5 = &DAT_0040c0de;\n        psVar4 = &DAT_0040c3e0;\n        while (iVar3 = iVar3 + 1, puVar5 != (undefined *)0x0) {\n          if (sVar1 == *psVar4) {\n            uVar6 = *(undefined8 *)(&UNK_0040c3d0 + (long)iVar3 * 0x18);\n            goto LAB_00402a37;\n          }\n          puVar5 = *(undefined **)(psVar4 + 4);\n          psVar4 = psVar4 + 6;\n        }\n      }\n      uVar6 = 0;\nLAB_00402a37:\n      pcVar7 = \"ispeed %lu baud; ospeed %lu baud;\";\n      if (param_2 == '\\0') {\n        pcVar7 = \"%lu %lu\\n\";\n      }\n      FUN_004027c0(pcVar7,uVar6,uVar8);\n      goto LAB_004029b0;\n    }\n  }\n  sVar1 = cfgetospeed(param_1);\n  if (sVar1 == 0) {\n    puVar5 = (undefined *)0x0;\n  }\n  else {\n    iVar3 = 0;\n    puVar5 = &DAT_0040c0de;\n    psVar4 = &DAT_0040c3e0;\n    while (iVar3 = iVar3 + 1, puVar5 != (undefined *)0x0) {\n      if (sVar1 == *psVar4) {\n        puVar5 = *(undefined **)(&UNK_0040c3d0 + (long)iVar3 * 0x18);\n        break;\n      }\n      puVar5 = *(undefined **)(psVar4 + 4);\n      psVar4 = psVar4 + 6;\n    }\n  }\n  pcVar7 = \"speed %lu baud;\";\n  if (param_2 == '\\0') {\n    pcVar7 = \"%lu\\n\";\n  }\n  FUN_004027c0(pcVar7,puVar5);\nLAB_004029b0:\n  if (param_2 == '\\0') {\n    DAT_006133dc = 0;\n  }\n  return;\n}\n\n",
            "funcName": "FUN_00402930"
        },
        {
            "funcStartAddr": "0x402ab0",
            "funcEndAddr": "0x402af2",
            "decompiledFuncCode": "\nvoid FUN_00402ab0(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined8 uVar1;\n  \n  uVar1 = dcgettext(0,\"invalid integer argument\",5);\n  FUN_00406ec0(param_1,0,0,param_2,&DAT_0040bdde,uVar1,0);\n  return;\n}\n\n",
            "funcName": "FUN_00402ab0"
        },
        {
            "funcStartAddr": "0x402b00",
            "funcEndAddr": "0x402bb3",
            "decompiledFuncCode": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nundefined * FUN_00402b00(byte param_1)\n\n{\n  undefined *puVar1;\n  \n  if (0x1f < param_1) {\n    if (param_1 < 0x7f) {\n      _DAT_00613300 = _DAT_00613300 & 0xff00 | (ushort)param_1;\n      puVar1 = &DAT_00613301;\n    }\n    else if (param_1 == 0x7f) {\n      puVar1 = &DAT_00613302;\n      _DAT_00613300 = 0x3f5e;\n    }\n    else {\n      _DAT_00613300 = 0x2d4d;\n      if (param_1 < 0xa0) {\n        puVar1 = &DAT_00613304;\n        _DAT_00613302 = CONCAT11(param_1 - 0x40,0x5e);\n      }\n      else if (param_1 == 0xff) {\n        _DAT_00613302 = 0x3f5e;\n        puVar1 = &DAT_00613304;\n      }\n      else {\n        puVar1 = &DAT_00613303;\n        _DAT_00613302 = _DAT_00613302 & 0xff00 | (ushort)(byte)(param_1 + 0x80);\n      }\n    }\n    *puVar1 = 0;\n    return &DAT_00613300;\n  }\n  _DAT_00613300 = CONCAT11(param_1 + 0x40,0x5e);\n  _DAT_00613302 = _DAT_00613302 & 0xff00;\n  return &DAT_00613300;\n}\n\n",
            "funcName": "FUN_00402b00"
        },
        {
            "funcStartAddr": "0x402bd0",
            "funcEndAddr": "0x402ca0",
            "decompiledFuncCode": "\n/* WARNING: Could not reconcile some variable overlaps */\n\nvoid FUN_00402bd0(ulong param_1,int param_2,undefined8 param_3)\n\n{\n  FILE *pFVar1;\n  int iVar2;\n  int iVar3;\n  int *piVar4;\n  uint *puVar5;\n  undefined8 uVar6;\n  undefined8 uVar7;\n  char *pcVar8;\n  byte **ppbVar9;\n  long lVar11;\n  byte *pbVar12;\n  byte *pbVar13;\n  char cVar14;\n  bool bVar15;\n  bool bVar16;\n  byte bVar17;\n  byte *pbStack_e8;\n  char *pcStack_e0;\n  byte *apbStack_d8 [5];\n  char *pcStack_b0;\n  char *pcStack_a8;\n  char *pcStack_a0;\n  char *pcStack_98;\n  char *pcStack_90;\n  undefined8 uStack_88;\n  undefined8 uStack_80;\n  undefined8 uStack_78;\n  ulong uStack_70;\n  int *piStack_68;\n  undefined2 uStack_58;\n  undefined2 uStack_56;\n  undefined8 uStack_50;\n  ulong uStack_48;\n  undefined8 uStack_40;\n  ulong local_30 [2];\n  byte **ppbVar10;\n  \n  bVar17 = 0;\n  uStack_48 = param_1 & 0xffffffff;\n  uStack_40 = 0x402bf4;\n  iVar2 = ioctl(0,0x5413,local_30);\n  if (iVar2 == 0) {\nLAB_00402c0e:\n    if (-1 < (int)uStack_48) {\n      local_30[0] = local_30[0] & 0xffffffffffff0000 | param_1 & 0xffff;\n    }\n    if (-1 < param_2) {\n      local_30[0]._0_4_ = CONCAT22((short)param_2,(undefined2)local_30[0]);\n      local_30[0] = local_30[0] & 0xffffffff00000000 | (ulong)(uint)local_30[0];\n    }\n    uStack_40 = 0x402c33;\n    iVar2 = ioctl(0,0x5414,local_30);\n    if (iVar2 == 0) {\n      return;\n    }\n  }\n  else {\n    uStack_40 = 0x402bfd;\n    piVar4 = __errno_location();\n    if (*piVar4 == 0x16) {\n      local_30[0] = 0;\n      goto LAB_00402c0e;\n    }\n    uStack_40 = 0x402c51;\n    uVar6 = FUN_004064f0(0,3,param_3);\n    uStack_40 = 0x402c69;\n    error(1,*piVar4,\"%s\",uVar6);\n  }\n  uStack_40 = 0x402c78;\n  uStack_50 = FUN_004064f0(0,3,param_3);\n  uStack_40 = 0x402c80;\n  puVar5 = (uint *)__errno_location();\n  cVar14 = '\\x01';\n  uStack_70 = (ulong)*puVar5;\n  uStack_40 = 0x402c96;\n  error(1,uStack_70,\"%s\",uStack_50);\n  piStack_68 = (int *)0x402cc0;\n  uStack_40 = param_3;\n  iVar2 = ioctl(0,0x5413,&uStack_58);\n  if (iVar2 == 0) {\n    if (cVar14 == '\\0') {\n      piStack_68 = (int *)0x402cfa;\n      FUN_004027c0(\"%d %d\\n\",uStack_58,uStack_56);\n      DAT_006133dc = 0;\n      return;\n    }\n    piStack_68 = (int *)0x402d1c;\n    FUN_004027c0(\"rows %d; columns %d;\",uStack_58,uStack_56);\n    return;\n  }\n  piStack_68 = (int *)0x402cc9;\n  piVar4 = __errno_location();\n  if (*piVar4 == 0x16) {\n    if (cVar14 != '\\0') {\n      return;\n    }\n  }\n  else {\n    piStack_68 = (int *)0x402d34;\n    uVar6 = FUN_004064f0(0,3,uStack_70);\n    piStack_68 = (int *)0x402d4c;\n    error(1,*piVar4,\"%s\",uVar6);\n  }\n  piStack_68 = (int *)0x402d5b;\n  uStack_78 = FUN_004064f0(0,3,uStack_70);\n  piStack_68 = (int *)0x402d6f;\n  uVar6 = dcgettext(0,\"%s: no size information for this device\",5);\n  iVar2 = 1;\n  piStack_68 = (int *)0x402d83;\n  error(1,0,uVar6,uStack_78);\n  uVar6 = DAT_006133f8;\n  piStack_68 = piVar4;\n  if (iVar2 != 0) {\n    uVar7 = dcgettext(0,\"Try \\'%s --help\\' for more information.\\n\",5);\n    __fprintf_chk(stderr,1,uVar7,uVar6);\n    goto LAB_00402dcf;\n  }\n  uVar7 = dcgettext(0,\n                    \"Usage: %s [-F DEVICE | --file=DEVICE] [SETTING]...\\n  or:  %s [-F DEVICE | --file=DEVICE] [-a|--all]\\n  or:  %s [-F DEVICE | --file=DEVICE] [-g|--save]\\n\"\n                    ,5);\n  __printf_chk(1,uVar7,uVar6,uVar6,uVar6);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\"Print or change terminal characteristics.\\n\",5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\n                             \"\\nMandatory arguments to long options are mandatory for short options too.\\n\"\n                             ,5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\n                             \"  -a, --all          print all current settings in human-readable form\\n  -g, --save         print all current settings in a stty-readable form\\n  -F, --file=DEVICE  open and use the specified DEVICE instead of stdin\\n\"\n                             ,5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\"      --help     display this help and exit\\n\",5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\"      --version  output version information and exit\\n\",5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\n                             \"\\nOptional - before SETTING indicates negation.  An * marks non-POSIX\\nsettings.  The underlying system defines which settings are available.\\n\"\n                             ,5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\"\\nSpecial characters:\\n\",5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\" * discard CHAR  CHAR will toggle discarding of output\\n\",5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\n                             \"   eof CHAR      CHAR will send an end of file (terminate the input)\\n   eol CHAR      CHAR will end the line\\n\"\n                             ,5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\" * eol2 CHAR     alternate CHAR for ending the line\\n\",5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\n                             \"   erase CHAR    CHAR will erase the last character typed\\n   intr CHAR     CHAR will send an interrupt signal\\n   kill CHAR     CHAR will erase the current line\\n\"\n                             ,5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\" * lnext CHAR    CHAR will enter the next character quoted\\n\",5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\"   quit CHAR     CHAR will send a quit signal\\n\",5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\" * rprnt CHAR    CHAR will redraw the current line\\n\",5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\n                             \"   start CHAR    CHAR will restart the output after stopping it\\n   stop CHAR     CHAR will stop the output\\n   susp CHAR     CHAR will send a terminal stop signal\\n\"\n                             ,5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\" * swtch CHAR    CHAR will switch to a different shell layer\\n\",5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\" * werase CHAR   CHAR will erase the last word typed\\n\",5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\n                             \"\\nSpecial settings:\\n   N             set the input and output speeds to N bauds\\n\"\n                             ,5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\n                             \" * cols N        tell the kernel that the terminal has N columns\\n * columns N     same as cols N\\n\"\n                             ,5);\n  fputs_unlocked(pcVar8,pFVar1);\n  if (DAT_00613230 == 1) {\n    uVar6 = dcgettext(0,\"on\",5);\n  }\n  else {\n    uVar6 = dcgettext(0,&DAT_0040c256,5);\n  }\n  uVar7 = dcgettext(0,\n                    \" * [-]drain      wait for transmission before applying settings (%s by default)\\n\"\n                    ,5);\n  __printf_chk(1,uVar7,uVar6);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\"   ispeed N      set the input speed to N\\n\",5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\" * line N        use line discipline N\\n\",5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\n                             \"   min N         with -icanon, set N characters minimum for a completed read\\n   ospeed N      set the output speed to N\\n\"\n                             ,5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\n                             \" * rows N        tell the kernel that the terminal has N rows\\n * size          print the number of rows and columns according to the kernel\\n\"\n                             ,5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\n                             \"   speed         print the terminal speed\\n   time N        with -icanon, set read timeout of N tenths of a second\\n\"\n                             ,5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\n                             \"\\nControl settings:\\n   [-]clocal     disable modem control signals\\n   [-]cread      allow input to be received\\n\"\n                             ,5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\" * [-]crtscts    enable RTS/CTS handshaking\\n\",5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\"   csN           set character size to N bits, N in [5..8]\\n\",5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\n                             \"   [-]cstopb     use two stop bits per character (one with \\'-\\')\\n   [-]hup        send a hangup signal when the last process closes the tty\\n   [-]hupcl      same as [-]hup\\n   [-]parenb     generate parity bit in output and expect parity bit in input\\n   [-]parodd     set odd parity (or even parity with \\'-\\')\\n\"\n                             ,5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\" * [-]cmspar     use \\\"stick\\\" (mark/space) parity\\n\",5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\n                             \"\\nInput settings:\\n   [-]brkint     breaks cause an interrupt signal\\n   [-]icrnl      translate carriage return to newline\\n   [-]ignbrk     ignore break characters\\n   [-]igncr      ignore carriage return\\n   [-]ignpar     ignore characters with parity errors\\n\"\n                             ,5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\n                             \" * [-]imaxbel    beep and do not flush a full input buffer on a character\\n\"\n                             ,5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\n                             \"   [-]inlcr      translate newline to carriage return\\n   [-]inpck      enable input parity checking\\n   [-]istrip     clear high (8th) bit of input characters\\n\"\n                             ,5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\" * [-]iutf8      assume input characters are UTF-8 encoded\\n\",5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\" * [-]iuclc      translate uppercase characters to lowercase\\n\",5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\n                             \" * [-]ixany      let any character restart output, not only start character\\n\"\n                             ,5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\n                             \"   [-]ixoff      enable sending of start/stop characters\\n   [-]ixon       enable XON/XOFF flow control\\n   [-]parmrk     mark parity errors (with a 255-0-character sequence)\\n   [-]tandem     same as [-]ixoff\\n\"\n                             ,5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\"\\nOutput settings:\\n\",5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\" * bsN           backspace delay style, N in [0..1]\\n\",5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\" * crN           carriage return delay style, N in [0..3]\\n\",5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\" * ffN           form feed delay style, N in [0..1]\\n\",5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\" * nlN           newline delay style, N in [0..1]\\n\",5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\" * [-]ocrnl      translate carriage return to newline\\n\",5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\n                             \" * [-]ofdel      use delete characters for fill instead of NUL characters\\n\"\n                             ,5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\n                             \" * [-]ofill      use fill (padding) characters instead of timing for delays\\n\"\n                             ,5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\" * [-]olcuc      translate lowercase characters to uppercase\\n\",5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\" * [-]onlcr      translate newline to carriage return-newline\\n\",5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\" * [-]onlret     newline performs a carriage return\\n\",5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\n                             \" * [-]onocr      do not print carriage returns in the first column\\n\",\n                             5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\"   [-]opost      postprocess output\\n\",5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\n                             \" * tabN          horizontal tab delay style, N in [0..3]\\n * tabs          same as tab0\\n * -tabs         same as tab3\\n\"\n                             ,5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\" * vtN           vertical tab delay style, N in [0..1]\\n\",5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\n                             \"\\nLocal settings:\\n   [-]crterase   echo erase characters as backspace-space-backspace\\n\"\n                             ,5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\n                             \" * crtkill       kill all line by obeying the echoprt and echoe settings\\n * -crtkill      kill all line by obeying the echoctl and echok settings\\n\"\n                             ,5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\" * [-]ctlecho    echo control characters in hat notation (\\'^c\\')\\n\"\n                             ,5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\"   [-]echo       echo input characters\\n\",5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\" * [-]echoctl    same as [-]ctlecho\\n\",5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\n                             \"   [-]echoe      same as [-]crterase\\n   [-]echok      echo a newline after a kill character\\n\"\n                             ,5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\" * [-]echoke     same as [-]crtkill\\n\",5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\n                             \"   [-]echonl     echo newline even if not echoing other characters\\n\",\n                             5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\n                             \" * [-]echoprt    echo erased characters backward, between \\'\\\\\\' and \\'/\\'\\n\"\n                             ,5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\n                             \" * [-]extproc    enable \\\"LINEMODE\\\"; useful with high latency links\\n\"\n                             ,5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\" * [-]flusho     discard output\\n\",5);\n  fputs_unlocked(pcVar8,pFVar1);\n  uVar6 = dcgettext(0,\n                    \"   [-]icanon     enable special characters: %s\\n   [-]iexten     enable non-POSIX special characters\\n\"\n                    ,5);\n  __printf_chk(1,uVar6,\"erase, kill, werase, rprnt\");\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\n                             \"   [-]isig       enable interrupt, quit, and suspend special characters\\n   [-]noflsh     disable flushing after interrupt and quit special characters\\n\"\n                             ,5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\" * [-]prterase   same as [-]echoprt\\n\",5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\n                             \" * [-]tostop     stop background jobs that try to write to the terminal\\n\"\n                             ,5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\n                             \" * [-]xcase      with icanon, escape with \\'\\\\\\' for uppercase characters\\n\"\n                             ,5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\"\\nCombination settings:\\n\",5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\" * [-]LCASE      same as [-]lcase\\n\",5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\"   cbreak        same as -icanon\\n   -cbreak       same as icanon\\n\"\n                             ,5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\n                             \"   cooked        same as brkint ignpar istrip icrnl ixon opost isig\\n                 icanon, eof and eol characters to their default values\\n   -cooked       same as raw\\n\"\n                             ,5);\n  fputs_unlocked(pcVar8,pFVar1);\n  uVar6 = dcgettext(0,\"   crt           same as %s\\n\",5);\n  __printf_chk(1,uVar6,\"echoe echoctl echoke\");\n  uVar6 = dcgettext(0,\"   dec           same as %s intr ^c erase 0177\\n                 kill ^u\\n\",5\n                   );\n  __printf_chk(1,uVar6,\"echoe echoctl echoke -ixany\");\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\" * [-]decctlq    same as [-]ixany\\n\",5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\n                             \"   ek            erase and kill characters to their default values\\n   evenp         same as parenb -parodd cs7\\n   -evenp        same as -parenb cs8\\n\"\n                             ,5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\" * [-]lcase      same as xcase iuclc olcuc\\n\",5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\n                             \"   litout        same as -parenb -istrip -opost cs8\\n   -litout       same as parenb istrip opost cs7\\n\"\n                             ,5);\n  fputs_unlocked(pcVar8,pFVar1);\n  uVar6 = dcgettext(0,\"   nl            same as %s\\n   -nl           same as %s\\n\",5);\n  __printf_chk(1,uVar6,\"-icrnl -onlcr\",\"icrnl -inlcr -igncr onlcr -ocrnl -onlret\");\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\n                             \"   oddp          same as parenb parodd cs7\\n   -oddp         same as -parenb cs8\\n   [-]parity     same as [-]evenp\\n   pass8         same as -parenb -istrip cs8\\n   -pass8        same as parenb istrip cs7\\n\"\n                             ,5);\n  fputs_unlocked(pcVar8,pFVar1);\n  uVar6 = dcgettext(0,\n                    \"   raw           same as -ignbrk -brkint -ignpar -parmrk -inpck -istrip\\n                 -inlcr -igncr -icrnl -ixon -ixoff -icanon -opost\\n                 -isig%s min 1 time 0\\n   -raw          same as cooked\\n\"\n                    ,5);\n  __printf_chk(1,uVar6,\" -iuclc -ixany -imaxbel -xcase\");\n  uVar6 = dcgettext(0,\n                    \"   sane          same as cread -ignbrk brkint -inlcr -igncr icrnl\\n                 icanon iexten echo echoe echok -echonl -noflsh\\n                 %s\\n                 %s\\n                 %s,\\n                 all special characters to their default values\\n\"\n                    ,5);\n  __printf_chk(1,uVar6,\"-ixoff -iutf8 -iuclc -ixany imaxbel -xcase -olcuc -ocrnl\",\n               \"opost -ofill onlcr -onocr -onlret nl0 cr0 tab0 bs0 vt0 ff0\",\n               \"isig -tostop -ofdel -echoprt echoctl echoke -extproc -flusho\");\n  pFVar1 = stdout;\n  pcVar8 = (char *)dcgettext(0,\n                             \"\\nHandle the tty line connected to standard input.  Without arguments,\\nprints baud rate, line discipline, and deviations from stty sane.  In\\nsettings, CHAR is taken literally, or coded as in ^c, 0x37, 0177 or\\n127; special values ^- or undef used to disable special characters.\\n\"\n                             ,5);\n  fputs_unlocked(pcVar8,pFVar1);\n  pbStack_e8 = &DAT_0040beba;\n  pcStack_e0 = \"test invocation\";\n  apbStack_d8[0] = (byte *)0x40bf34;\n  apbStack_d8[1] = (byte *)0x40becc;\n  apbStack_d8[2] = (byte *)0x40bee2;\n  apbStack_d8[3] = (byte *)0x40beec;\n  apbStack_d8[4] = (byte *)0x40befb;\n  pcStack_b0 = \"sha2 utilities\";\n  pcStack_a8 = \"sha384sum\";\n  pcStack_a0 = \"sha2 utilities\";\n  pcStack_98 = \"sha512sum\";\n  pcStack_90 = \"sha2 utilities\";\n  uStack_88 = 0;\n  uStack_80 = 0;\n  ppbVar9 = &pbStack_e8;\n  do {\n    ppbVar10 = ppbVar9;\n    ppbVar9 = ppbVar10 + 2;\n    pbVar12 = *ppbVar9;\n    bVar15 = false;\n    bVar16 = pbVar12 == (byte *)0x0;\n    if (bVar16) break;\n    lVar11 = 5;\n    pbVar13 = &DAT_0040bdfd;\n    do {\n      if (lVar11 == 0) break;\n      lVar11 = lVar11 + -1;\n      bVar15 = *pbVar13 < *pbVar12;\n      bVar16 = *pbVar13 == *pbVar12;\n      pbVar13 = pbVar13 + (ulong)bVar17 * -2 + 1;\n      pbVar12 = pbVar12 + (ulong)bVar17 * -2 + 1;\n    } while (bVar16);\n  } while ((!bVar15 && !bVar16) != bVar15);\n  pbVar12 = ppbVar10[3];\n  if (pbVar12 == (byte *)0x0) {\n    uVar6 = dcgettext(0,\"\\n%s online help: <%s>\\n\",5);\n    __printf_chk(1,uVar6,\"GNU coreutils\",\"https://www.gnu.org/software/coreutils/\");\n    pcVar8 = setlocale(5,(char *)0x0);\n    if (pcVar8 != (char *)0x0) {\n      iVar3 = strncmp(pcVar8,\"en_\",3);\n      if (iVar3 != 0) {\n        pbVar12 = &DAT_0040bdfd;\n        goto LAB_00403b18;\n      }\n    }\n    pbVar12 = &DAT_0040bdfd;\n    uVar6 = dcgettext(0,\"Full documentation at: <%s%s>\\n\",5);\n    pcVar8 = \" invocation\";\n    __printf_chk(1,uVar6,\"https://www.gnu.org/software/coreutils/\",&DAT_0040bdfd);\n  }\n  else {\n    uVar6 = dcgettext(0,\"\\n%s online help: <%s>\\n\",5);\n    __printf_chk(1,uVar6,\"GNU coreutils\",\"https://www.gnu.org/software/coreutils/\");\n    pcVar8 = setlocale(5,(char *)0x0);\n    if (pcVar8 != (char *)0x0) {\n      iVar3 = strncmp(pcVar8,\"en_\",3);\n      if (iVar3 != 0) {\nLAB_00403b18:\n        uVar6 = dcgettext(0,\"Report %s translation bugs to <https://translationproject.org/team/>\\n\"\n                          ,5);\n        __printf_chk(1,uVar6,&DAT_0040bdfd);\n      }\n    }\n    pcVar8 = \" invocation\";\n    uVar6 = dcgettext(0,\"Full documentation at: <%s%s>\\n\",5);\n    __printf_chk(1,uVar6,\"https://www.gnu.org/software/coreutils/\",&DAT_0040bdfd);\n    if (pbVar12 != &DAT_0040bdfd) {\n      pcVar8 = \"\";\n    }\n  }\n  uVar6 = dcgettext(0,\"or available locally via: info \\'(coreutils) %s%s\\'\\n\",5);\n  __printf_chk(1,uVar6,pbVar12,pcVar8);\nLAB_00402dcf:\n                    /* WARNING: Subroutine does not return */\n  exit(iVar2);\n}\n\n",
            "funcName": "FUN_00402bd0"
        },
        {
            "funcStartAddr": "0x402ca0",
            "funcEndAddr": "0x402d8b",
            "decompiledFuncCode": "\nvoid FUN_00402ca0(char param_1,undefined8 param_2)\n\n{\n  FILE *pFVar1;\n  int iVar2;\n  int iVar3;\n  int *piVar4;\n  undefined8 uVar5;\n  undefined8 uVar6;\n  char *pcVar7;\n  byte **ppbVar8;\n  long lVar10;\n  byte *pbVar11;\n  byte *pbVar12;\n  bool bVar13;\n  bool bVar14;\n  byte bVar15;\n  byte *pbStack_b0;\n  char *pcStack_a8;\n  byte *apbStack_a0 [5];\n  char *pcStack_78;\n  char *pcStack_70;\n  char *pcStack_68;\n  char *pcStack_60;\n  char *pcStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  int *piStack_30;\n  undefined2 local_20;\n  undefined2 local_1e;\n  byte **ppbVar9;\n  \n  bVar15 = 0;\n  piStack_30 = (int *)0x402cc0;\n  iVar2 = ioctl(0,0x5413,&local_20);\n  if (iVar2 == 0) {\n    if (param_1 == '\\0') {\n      piStack_30 = (int *)0x402cfa;\n      FUN_004027c0(\"%d %d\\n\",local_20,local_1e);\n      DAT_006133dc = 0;\n      return;\n    }\n    piStack_30 = (int *)0x402d1c;\n    FUN_004027c0(\"rows %d; columns %d;\",local_20,local_1e);\n    return;\n  }\n  piStack_30 = (int *)0x402cc9;\n  piVar4 = __errno_location();\n  if (*piVar4 == 0x16) {\n    if (param_1 != '\\0') {\n      return;\n    }\n  }\n  else {\n    piStack_30 = (int *)0x402d34;\n    uVar5 = FUN_004064f0(0,3,param_2);\n    piStack_30 = (int *)0x402d4c;\n    error(1,*piVar4,\"%s\",uVar5);\n  }\n  piStack_30 = (int *)0x402d5b;\n  uStack_40 = FUN_004064f0(0,3,param_2);\n  piStack_30 = (int *)0x402d6f;\n  uVar5 = dcgettext(0,\"%s: no size information for this device\",5);\n  iVar2 = 1;\n  piStack_30 = (int *)0x402d83;\n  error(1,0,uVar5,uStack_40);\n  uVar5 = DAT_006133f8;\n  uStack_38 = param_2;\n  piStack_30 = piVar4;\n  if (iVar2 != 0) {\n    uVar6 = dcgettext(0,\"Try \\'%s --help\\' for more information.\\n\",5);\n    __fprintf_chk(stderr,1,uVar6,uVar5);\n    goto LAB_00402dcf;\n  }\n  uVar6 = dcgettext(0,\n                    \"Usage: %s [-F DEVICE | --file=DEVICE] [SETTING]...\\n  or:  %s [-F DEVICE | --file=DEVICE] [-a|--all]\\n  or:  %s [-F DEVICE | --file=DEVICE] [-g|--save]\\n\"\n                    ,5);\n  __printf_chk(1,uVar6,uVar5,uVar5,uVar5);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\"Print or change terminal characteristics.\\n\",5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\n                             \"\\nMandatory arguments to long options are mandatory for short options too.\\n\"\n                             ,5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\n                             \"  -a, --all          print all current settings in human-readable form\\n  -g, --save         print all current settings in a stty-readable form\\n  -F, --file=DEVICE  open and use the specified DEVICE instead of stdin\\n\"\n                             ,5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\"      --help     display this help and exit\\n\",5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\"      --version  output version information and exit\\n\",5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\n                             \"\\nOptional - before SETTING indicates negation.  An * marks non-POSIX\\nsettings.  The underlying system defines which settings are available.\\n\"\n                             ,5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\"\\nSpecial characters:\\n\",5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\" * discard CHAR  CHAR will toggle discarding of output\\n\",5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\n                             \"   eof CHAR      CHAR will send an end of file (terminate the input)\\n   eol CHAR      CHAR will end the line\\n\"\n                             ,5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\" * eol2 CHAR     alternate CHAR for ending the line\\n\",5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\n                             \"   erase CHAR    CHAR will erase the last character typed\\n   intr CHAR     CHAR will send an interrupt signal\\n   kill CHAR     CHAR will erase the current line\\n\"\n                             ,5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\" * lnext CHAR    CHAR will enter the next character quoted\\n\",5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\"   quit CHAR     CHAR will send a quit signal\\n\",5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\" * rprnt CHAR    CHAR will redraw the current line\\n\",5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\n                             \"   start CHAR    CHAR will restart the output after stopping it\\n   stop CHAR     CHAR will stop the output\\n   susp CHAR     CHAR will send a terminal stop signal\\n\"\n                             ,5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\" * swtch CHAR    CHAR will switch to a different shell layer\\n\",5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\" * werase CHAR   CHAR will erase the last word typed\\n\",5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\n                             \"\\nSpecial settings:\\n   N             set the input and output speeds to N bauds\\n\"\n                             ,5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\n                             \" * cols N        tell the kernel that the terminal has N columns\\n * columns N     same as cols N\\n\"\n                             ,5);\n  fputs_unlocked(pcVar7,pFVar1);\n  if (DAT_00613230 == 1) {\n    uVar5 = dcgettext(0,\"on\",5);\n  }\n  else {\n    uVar5 = dcgettext(0,&DAT_0040c256,5);\n  }\n  uVar6 = dcgettext(0,\n                    \" * [-]drain      wait for transmission before applying settings (%s by default)\\n\"\n                    ,5);\n  __printf_chk(1,uVar6,uVar5);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\"   ispeed N      set the input speed to N\\n\",5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\" * line N        use line discipline N\\n\",5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\n                             \"   min N         with -icanon, set N characters minimum for a completed read\\n   ospeed N      set the output speed to N\\n\"\n                             ,5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\n                             \" * rows N        tell the kernel that the terminal has N rows\\n * size          print the number of rows and columns according to the kernel\\n\"\n                             ,5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\n                             \"   speed         print the terminal speed\\n   time N        with -icanon, set read timeout of N tenths of a second\\n\"\n                             ,5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\n                             \"\\nControl settings:\\n   [-]clocal     disable modem control signals\\n   [-]cread      allow input to be received\\n\"\n                             ,5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\" * [-]crtscts    enable RTS/CTS handshaking\\n\",5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\"   csN           set character size to N bits, N in [5..8]\\n\",5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\n                             \"   [-]cstopb     use two stop bits per character (one with \\'-\\')\\n   [-]hup        send a hangup signal when the last process closes the tty\\n   [-]hupcl      same as [-]hup\\n   [-]parenb     generate parity bit in output and expect parity bit in input\\n   [-]parodd     set odd parity (or even parity with \\'-\\')\\n\"\n                             ,5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\" * [-]cmspar     use \\\"stick\\\" (mark/space) parity\\n\",5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\n                             \"\\nInput settings:\\n   [-]brkint     breaks cause an interrupt signal\\n   [-]icrnl      translate carriage return to newline\\n   [-]ignbrk     ignore break characters\\n   [-]igncr      ignore carriage return\\n   [-]ignpar     ignore characters with parity errors\\n\"\n                             ,5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\n                             \" * [-]imaxbel    beep and do not flush a full input buffer on a character\\n\"\n                             ,5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\n                             \"   [-]inlcr      translate newline to carriage return\\n   [-]inpck      enable input parity checking\\n   [-]istrip     clear high (8th) bit of input characters\\n\"\n                             ,5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\" * [-]iutf8      assume input characters are UTF-8 encoded\\n\",5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\" * [-]iuclc      translate uppercase characters to lowercase\\n\",5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\n                             \" * [-]ixany      let any character restart output, not only start character\\n\"\n                             ,5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\n                             \"   [-]ixoff      enable sending of start/stop characters\\n   [-]ixon       enable XON/XOFF flow control\\n   [-]parmrk     mark parity errors (with a 255-0-character sequence)\\n   [-]tandem     same as [-]ixoff\\n\"\n                             ,5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\"\\nOutput settings:\\n\",5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\" * bsN           backspace delay style, N in [0..1]\\n\",5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\" * crN           carriage return delay style, N in [0..3]\\n\",5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\" * ffN           form feed delay style, N in [0..1]\\n\",5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\" * nlN           newline delay style, N in [0..1]\\n\",5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\" * [-]ocrnl      translate carriage return to newline\\n\",5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\n                             \" * [-]ofdel      use delete characters for fill instead of NUL characters\\n\"\n                             ,5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\n                             \" * [-]ofill      use fill (padding) characters instead of timing for delays\\n\"\n                             ,5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\" * [-]olcuc      translate lowercase characters to uppercase\\n\",5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\" * [-]onlcr      translate newline to carriage return-newline\\n\",5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\" * [-]onlret     newline performs a carriage return\\n\",5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\n                             \" * [-]onocr      do not print carriage returns in the first column\\n\",\n                             5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\"   [-]opost      postprocess output\\n\",5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\n                             \" * tabN          horizontal tab delay style, N in [0..3]\\n * tabs          same as tab0\\n * -tabs         same as tab3\\n\"\n                             ,5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\" * vtN           vertical tab delay style, N in [0..1]\\n\",5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\n                             \"\\nLocal settings:\\n   [-]crterase   echo erase characters as backspace-space-backspace\\n\"\n                             ,5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\n                             \" * crtkill       kill all line by obeying the echoprt and echoe settings\\n * -crtkill      kill all line by obeying the echoctl and echok settings\\n\"\n                             ,5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\" * [-]ctlecho    echo control characters in hat notation (\\'^c\\')\\n\"\n                             ,5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\"   [-]echo       echo input characters\\n\",5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\" * [-]echoctl    same as [-]ctlecho\\n\",5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\n                             \"   [-]echoe      same as [-]crterase\\n   [-]echok      echo a newline after a kill character\\n\"\n                             ,5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\" * [-]echoke     same as [-]crtkill\\n\",5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\n                             \"   [-]echonl     echo newline even if not echoing other characters\\n\",\n                             5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\n                             \" * [-]echoprt    echo erased characters backward, between \\'\\\\\\' and \\'/\\'\\n\"\n                             ,5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\n                             \" * [-]extproc    enable \\\"LINEMODE\\\"; useful with high latency links\\n\"\n                             ,5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\" * [-]flusho     discard output\\n\",5);\n  fputs_unlocked(pcVar7,pFVar1);\n  uVar5 = dcgettext(0,\n                    \"   [-]icanon     enable special characters: %s\\n   [-]iexten     enable non-POSIX special characters\\n\"\n                    ,5);\n  __printf_chk(1,uVar5,\"erase, kill, werase, rprnt\");\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\n                             \"   [-]isig       enable interrupt, quit, and suspend special characters\\n   [-]noflsh     disable flushing after interrupt and quit special characters\\n\"\n                             ,5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\" * [-]prterase   same as [-]echoprt\\n\",5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\n                             \" * [-]tostop     stop background jobs that try to write to the terminal\\n\"\n                             ,5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\n                             \" * [-]xcase      with icanon, escape with \\'\\\\\\' for uppercase characters\\n\"\n                             ,5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\"\\nCombination settings:\\n\",5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\" * [-]LCASE      same as [-]lcase\\n\",5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\"   cbreak        same as -icanon\\n   -cbreak       same as icanon\\n\"\n                             ,5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\n                             \"   cooked        same as brkint ignpar istrip icrnl ixon opost isig\\n                 icanon, eof and eol characters to their default values\\n   -cooked       same as raw\\n\"\n                             ,5);\n  fputs_unlocked(pcVar7,pFVar1);\n  uVar5 = dcgettext(0,\"   crt           same as %s\\n\",5);\n  __printf_chk(1,uVar5,\"echoe echoctl echoke\");\n  uVar5 = dcgettext(0,\"   dec           same as %s intr ^c erase 0177\\n                 kill ^u\\n\",5\n                   );\n  __printf_chk(1,uVar5,\"echoe echoctl echoke -ixany\");\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\" * [-]decctlq    same as [-]ixany\\n\",5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\n                             \"   ek            erase and kill characters to their default values\\n   evenp         same as parenb -parodd cs7\\n   -evenp        same as -parenb cs8\\n\"\n                             ,5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\" * [-]lcase      same as xcase iuclc olcuc\\n\",5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\n                             \"   litout        same as -parenb -istrip -opost cs8\\n   -litout       same as parenb istrip opost cs7\\n\"\n                             ,5);\n  fputs_unlocked(pcVar7,pFVar1);\n  uVar5 = dcgettext(0,\"   nl            same as %s\\n   -nl           same as %s\\n\",5);\n  __printf_chk(1,uVar5,\"-icrnl -onlcr\",\"icrnl -inlcr -igncr onlcr -ocrnl -onlret\");\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\n                             \"   oddp          same as parenb parodd cs7\\n   -oddp         same as -parenb cs8\\n   [-]parity     same as [-]evenp\\n   pass8         same as -parenb -istrip cs8\\n   -pass8        same as parenb istrip cs7\\n\"\n                             ,5);\n  fputs_unlocked(pcVar7,pFVar1);\n  uVar5 = dcgettext(0,\n                    \"   raw           same as -ignbrk -brkint -ignpar -parmrk -inpck -istrip\\n                 -inlcr -igncr -icrnl -ixon -ixoff -icanon -opost\\n                 -isig%s min 1 time 0\\n   -raw          same as cooked\\n\"\n                    ,5);\n  __printf_chk(1,uVar5,\" -iuclc -ixany -imaxbel -xcase\");\n  uVar5 = dcgettext(0,\n                    \"   sane          same as cread -ignbrk brkint -inlcr -igncr icrnl\\n                 icanon iexten echo echoe echok -echonl -noflsh\\n                 %s\\n                 %s\\n                 %s,\\n                 all special characters to their default values\\n\"\n                    ,5);\n  __printf_chk(1,uVar5,\"-ixoff -iutf8 -iuclc -ixany imaxbel -xcase -olcuc -ocrnl\",\n               \"opost -ofill onlcr -onocr -onlret nl0 cr0 tab0 bs0 vt0 ff0\",\n               \"isig -tostop -ofdel -echoprt echoctl echoke -extproc -flusho\");\n  pFVar1 = stdout;\n  pcVar7 = (char *)dcgettext(0,\n                             \"\\nHandle the tty line connected to standard input.  Without arguments,\\nprints baud rate, line discipline, and deviations from stty sane.  In\\nsettings, CHAR is taken literally, or coded as in ^c, 0x37, 0177 or\\n127; special values ^- or undef used to disable special characters.\\n\"\n                             ,5);\n  fputs_unlocked(pcVar7,pFVar1);\n  pbStack_b0 = &DAT_0040beba;\n  pcStack_a8 = \"test invocation\";\n  apbStack_a0[0] = (byte *)0x40bf34;\n  apbStack_a0[1] = (byte *)0x40becc;\n  apbStack_a0[2] = (byte *)0x40bee2;\n  apbStack_a0[3] = (byte *)0x40beec;\n  apbStack_a0[4] = (byte *)0x40befb;\n  pcStack_78 = \"sha2 utilities\";\n  pcStack_70 = \"sha384sum\";\n  pcStack_68 = \"sha2 utilities\";\n  pcStack_60 = \"sha512sum\";\n  pcStack_58 = \"sha2 utilities\";\n  uStack_50 = 0;\n  uStack_48 = 0;\n  ppbVar8 = &pbStack_b0;\n  do {\n    ppbVar9 = ppbVar8;\n    ppbVar8 = ppbVar9 + 2;\n    pbVar11 = *ppbVar8;\n    bVar13 = false;\n    bVar14 = pbVar11 == (byte *)0x0;\n    if (bVar14) break;\n    lVar10 = 5;\n    pbVar12 = &DAT_0040bdfd;\n    do {\n      if (lVar10 == 0) break;\n      lVar10 = lVar10 + -1;\n      bVar13 = *pbVar12 < *pbVar11;\n      bVar14 = *pbVar12 == *pbVar11;\n      pbVar12 = pbVar12 + (ulong)bVar15 * -2 + 1;\n      pbVar11 = pbVar11 + (ulong)bVar15 * -2 + 1;\n    } while (bVar14);\n  } while ((!bVar13 && !bVar14) != bVar13);\n  pbVar11 = ppbVar9[3];\n  if (pbVar11 == (byte *)0x0) {\n    uVar5 = dcgettext(0,\"\\n%s online help: <%s>\\n\",5);\n    __printf_chk(1,uVar5,\"GNU coreutils\",\"https://www.gnu.org/software/coreutils/\");\n    pcVar7 = setlocale(5,(char *)0x0);\n    if (pcVar7 != (char *)0x0) {\n      iVar3 = strncmp(pcVar7,\"en_\",3);\n      if (iVar3 != 0) {\n        pbVar11 = &DAT_0040bdfd;\n        goto LAB_00403b18;\n      }\n    }\n    pbVar11 = &DAT_0040bdfd;\n    uVar5 = dcgettext(0,\"Full documentation at: <%s%s>\\n\",5);\n    pcVar7 = \" invocation\";\n    __printf_chk(1,uVar5,\"https://www.gnu.org/software/coreutils/\",&DAT_0040bdfd);\n  }\n  else {\n    uVar5 = dcgettext(0,\"\\n%s online help: <%s>\\n\",5);\n    __printf_chk(1,uVar5,\"GNU coreutils\",\"https://www.gnu.org/software/coreutils/\");\n    pcVar7 = setlocale(5,(char *)0x0);\n    if (pcVar7 != (char *)0x0) {\n      iVar3 = strncmp(pcVar7,\"en_\",3);\n      if (iVar3 != 0) {\nLAB_00403b18:\n        uVar5 = dcgettext(0,\"Report %s translation bugs to <https://translationproject.org/team/>\\n\"\n                          ,5);\n        __printf_chk(1,uVar5,&DAT_0040bdfd);\n      }\n    }\n    pcVar7 = \" invocation\";\n    uVar5 = dcgettext(0,\"Full documentation at: <%s%s>\\n\",5);\n    __printf_chk(1,uVar5,\"https://www.gnu.org/software/coreutils/\",&DAT_0040bdfd);\n    if (pbVar11 != &DAT_0040bdfd) {\n      pcVar7 = \"\";\n    }\n  }\n  uVar5 = dcgettext(0,\"or available locally via: info \\'(coreutils) %s%s\\'\\n\",5);\n  __printf_chk(1,uVar5,pbVar11,pcVar7);\nLAB_00402dcf:\n                    /* WARNING: Subroutine does not return */\n  exit(iVar2);\n}\n\n",
            "funcName": "FUN_00402ca0"
        },
        {
            "funcStartAddr": "0x402d90",
            "funcEndAddr": "0x403bc1",
            "decompiledFuncCode": "\nvoid FUN_00402d90(int param_1)\n\n{\n  FILE *pFVar1;\n  int iVar2;\n  undefined8 uVar3;\n  char *pcVar4;\n  undefined8 uVar5;\n  byte **ppbVar6;\n  long lVar8;\n  byte *pbVar9;\n  byte *pbVar10;\n  bool bVar11;\n  bool bVar12;\n  byte bVar13;\n  byte *local_88;\n  char *local_80;\n  byte *local_78 [5];\n  char *local_50;\n  char *local_48;\n  char *local_40;\n  char *local_38;\n  char *local_30;\n  undefined8 local_28;\n  undefined8 local_20;\n  byte **ppbVar7;\n  \n  uVar5 = DAT_006133f8;\n  bVar13 = 0;\n  if (param_1 != 0) {\n    uVar3 = dcgettext(0,\"Try \\'%s --help\\' for more information.\\n\",5);\n    __fprintf_chk(stderr,1,uVar3,uVar5);\n    goto LAB_00402dcf;\n  }\n  uVar3 = dcgettext(0,\n                    \"Usage: %s [-F DEVICE | --file=DEVICE] [SETTING]...\\n  or:  %s [-F DEVICE | --file=DEVICE] [-a|--all]\\n  or:  %s [-F DEVICE | --file=DEVICE] [-g|--save]\\n\"\n                    ,5);\n  __printf_chk(1,uVar3,uVar5,uVar5,uVar5);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\"Print or change terminal characteristics.\\n\",5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \"\\nMandatory arguments to long options are mandatory for short options too.\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \"  -a, --all          print all current settings in human-readable form\\n  -g, --save         print all current settings in a stty-readable form\\n  -F, --file=DEVICE  open and use the specified DEVICE instead of stdin\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\"      --help     display this help and exit\\n\",5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\"      --version  output version information and exit\\n\",5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \"\\nOptional - before SETTING indicates negation.  An * marks non-POSIX\\nsettings.  The underlying system defines which settings are available.\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\"\\nSpecial characters:\\n\",5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\" * discard CHAR  CHAR will toggle discarding of output\\n\",5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \"   eof CHAR      CHAR will send an end of file (terminate the input)\\n   eol CHAR      CHAR will end the line\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\" * eol2 CHAR     alternate CHAR for ending the line\\n\",5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \"   erase CHAR    CHAR will erase the last character typed\\n   intr CHAR     CHAR will send an interrupt signal\\n   kill CHAR     CHAR will erase the current line\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\" * lnext CHAR    CHAR will enter the next character quoted\\n\",5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\"   quit CHAR     CHAR will send a quit signal\\n\",5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\" * rprnt CHAR    CHAR will redraw the current line\\n\",5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \"   start CHAR    CHAR will restart the output after stopping it\\n   stop CHAR     CHAR will stop the output\\n   susp CHAR     CHAR will send a terminal stop signal\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\" * swtch CHAR    CHAR will switch to a different shell layer\\n\",5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\" * werase CHAR   CHAR will erase the last word typed\\n\",5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \"\\nSpecial settings:\\n   N             set the input and output speeds to N bauds\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \" * cols N        tell the kernel that the terminal has N columns\\n * columns N     same as cols N\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  if (DAT_00613230 == 1) {\n    uVar5 = dcgettext(0,\"on\",5);\n  }\n  else {\n    uVar5 = dcgettext(0,&DAT_0040c256,5);\n  }\n  uVar3 = dcgettext(0,\n                    \" * [-]drain      wait for transmission before applying settings (%s by default)\\n\"\n                    ,5);\n  __printf_chk(1,uVar3,uVar5);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\"   ispeed N      set the input speed to N\\n\",5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\" * line N        use line discipline N\\n\",5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \"   min N         with -icanon, set N characters minimum for a completed read\\n   ospeed N      set the output speed to N\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \" * rows N        tell the kernel that the terminal has N rows\\n * size          print the number of rows and columns according to the kernel\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \"   speed         print the terminal speed\\n   time N        with -icanon, set read timeout of N tenths of a second\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \"\\nControl settings:\\n   [-]clocal     disable modem control signals\\n   [-]cread      allow input to be received\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\" * [-]crtscts    enable RTS/CTS handshaking\\n\",5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\"   csN           set character size to N bits, N in [5..8]\\n\",5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \"   [-]cstopb     use two stop bits per character (one with \\'-\\')\\n   [-]hup        send a hangup signal when the last process closes the tty\\n   [-]hupcl      same as [-]hup\\n   [-]parenb     generate parity bit in output and expect parity bit in input\\n   [-]parodd     set odd parity (or even parity with \\'-\\')\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\" * [-]cmspar     use \\\"stick\\\" (mark/space) parity\\n\",5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \"\\nInput settings:\\n   [-]brkint     breaks cause an interrupt signal\\n   [-]icrnl      translate carriage return to newline\\n   [-]ignbrk     ignore break characters\\n   [-]igncr      ignore carriage return\\n   [-]ignpar     ignore characters with parity errors\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \" * [-]imaxbel    beep and do not flush a full input buffer on a character\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \"   [-]inlcr      translate newline to carriage return\\n   [-]inpck      enable input parity checking\\n   [-]istrip     clear high (8th) bit of input characters\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\" * [-]iutf8      assume input characters are UTF-8 encoded\\n\",5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\" * [-]iuclc      translate uppercase characters to lowercase\\n\",5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \" * [-]ixany      let any character restart output, not only start character\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \"   [-]ixoff      enable sending of start/stop characters\\n   [-]ixon       enable XON/XOFF flow control\\n   [-]parmrk     mark parity errors (with a 255-0-character sequence)\\n   [-]tandem     same as [-]ixoff\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\"\\nOutput settings:\\n\",5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\" * bsN           backspace delay style, N in [0..1]\\n\",5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\" * crN           carriage return delay style, N in [0..3]\\n\",5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\" * ffN           form feed delay style, N in [0..1]\\n\",5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\" * nlN           newline delay style, N in [0..1]\\n\",5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\" * [-]ocrnl      translate carriage return to newline\\n\",5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \" * [-]ofdel      use delete characters for fill instead of NUL characters\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \" * [-]ofill      use fill (padding) characters instead of timing for delays\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\" * [-]olcuc      translate lowercase characters to uppercase\\n\",5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\" * [-]onlcr      translate newline to carriage return-newline\\n\",5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\" * [-]onlret     newline performs a carriage return\\n\",5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \" * [-]onocr      do not print carriage returns in the first column\\n\",\n                             5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\"   [-]opost      postprocess output\\n\",5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \" * tabN          horizontal tab delay style, N in [0..3]\\n * tabs          same as tab0\\n * -tabs         same as tab3\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\" * vtN           vertical tab delay style, N in [0..1]\\n\",5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \"\\nLocal settings:\\n   [-]crterase   echo erase characters as backspace-space-backspace\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \" * crtkill       kill all line by obeying the echoprt and echoe settings\\n * -crtkill      kill all line by obeying the echoctl and echok settings\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\" * [-]ctlecho    echo control characters in hat notation (\\'^c\\')\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\"   [-]echo       echo input characters\\n\",5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\" * [-]echoctl    same as [-]ctlecho\\n\",5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \"   [-]echoe      same as [-]crterase\\n   [-]echok      echo a newline after a kill character\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\" * [-]echoke     same as [-]crtkill\\n\",5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \"   [-]echonl     echo newline even if not echoing other characters\\n\",\n                             5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \" * [-]echoprt    echo erased characters backward, between \\'\\\\\\' and \\'/\\'\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \" * [-]extproc    enable \\\"LINEMODE\\\"; useful with high latency links\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\" * [-]flusho     discard output\\n\",5);\n  fputs_unlocked(pcVar4,pFVar1);\n  uVar5 = dcgettext(0,\n                    \"   [-]icanon     enable special characters: %s\\n   [-]iexten     enable non-POSIX special characters\\n\"\n                    ,5);\n  __printf_chk(1,uVar5,\"erase, kill, werase, rprnt\");\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \"   [-]isig       enable interrupt, quit, and suspend special characters\\n   [-]noflsh     disable flushing after interrupt and quit special characters\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\" * [-]prterase   same as [-]echoprt\\n\",5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \" * [-]tostop     stop background jobs that try to write to the terminal\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \" * [-]xcase      with icanon, escape with \\'\\\\\\' for uppercase characters\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\"\\nCombination settings:\\n\",5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\" * [-]LCASE      same as [-]lcase\\n\",5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\"   cbreak        same as -icanon\\n   -cbreak       same as icanon\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \"   cooked        same as brkint ignpar istrip icrnl ixon opost isig\\n                 icanon, eof and eol characters to their default values\\n   -cooked       same as raw\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  uVar5 = dcgettext(0,\"   crt           same as %s\\n\",5);\n  __printf_chk(1,uVar5,\"echoe echoctl echoke\");\n  uVar5 = dcgettext(0,\"   dec           same as %s intr ^c erase 0177\\n                 kill ^u\\n\",5\n                   );\n  __printf_chk(1,uVar5,\"echoe echoctl echoke -ixany\");\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\" * [-]decctlq    same as [-]ixany\\n\",5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \"   ek            erase and kill characters to their default values\\n   evenp         same as parenb -parodd cs7\\n   -evenp        same as -parenb cs8\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\" * [-]lcase      same as xcase iuclc olcuc\\n\",5);\n  fputs_unlocked(pcVar4,pFVar1);\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \"   litout        same as -parenb -istrip -opost cs8\\n   -litout       same as parenb istrip opost cs7\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  uVar5 = dcgettext(0,\"   nl            same as %s\\n   -nl           same as %s\\n\",5);\n  __printf_chk(1,uVar5,\"-icrnl -onlcr\",\"icrnl -inlcr -igncr onlcr -ocrnl -onlret\");\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \"   oddp          same as parenb parodd cs7\\n   -oddp         same as -parenb cs8\\n   [-]parity     same as [-]evenp\\n   pass8         same as -parenb -istrip cs8\\n   -pass8        same as parenb istrip cs7\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  uVar5 = dcgettext(0,\n                    \"   raw           same as -ignbrk -brkint -ignpar -parmrk -inpck -istrip\\n                 -inlcr -igncr -icrnl -ixon -ixoff -icanon -opost\\n                 -isig%s min 1 time 0\\n   -raw          same as cooked\\n\"\n                    ,5);\n  __printf_chk(1,uVar5,\" -iuclc -ixany -imaxbel -xcase\");\n  uVar5 = dcgettext(0,\n                    \"   sane          same as cread -ignbrk brkint -inlcr -igncr icrnl\\n                 icanon iexten echo echoe echok -echonl -noflsh\\n                 %s\\n                 %s\\n                 %s,\\n                 all special characters to their default values\\n\"\n                    ,5);\n  __printf_chk(1,uVar5,\"-ixoff -iutf8 -iuclc -ixany imaxbel -xcase -olcuc -ocrnl\",\n               \"opost -ofill onlcr -onocr -onlret nl0 cr0 tab0 bs0 vt0 ff0\",\n               \"isig -tostop -ofdel -echoprt echoctl echoke -extproc -flusho\");\n  pFVar1 = stdout;\n  pcVar4 = (char *)dcgettext(0,\n                             \"\\nHandle the tty line connected to standard input.  Without arguments,\\nprints baud rate, line discipline, and deviations from stty sane.  In\\nsettings, CHAR is taken literally, or coded as in ^c, 0x37, 0177 or\\n127; special values ^- or undef used to disable special characters.\\n\"\n                             ,5);\n  fputs_unlocked(pcVar4,pFVar1);\n  local_88 = &DAT_0040beba;\n  local_80 = \"test invocation\";\n  local_78[0] = (byte *)0x40bf34;\n  local_78[1] = (byte *)0x40becc;\n  local_78[2] = (byte *)0x40bee2;\n  local_78[3] = (byte *)0x40beec;\n  local_78[4] = (byte *)0x40befb;\n  local_50 = \"sha2 utilities\";\n  local_48 = \"sha384sum\";\n  local_40 = \"sha2 utilities\";\n  local_38 = \"sha512sum\";\n  local_30 = \"sha2 utilities\";\n  local_28 = 0;\n  local_20 = 0;\n  ppbVar6 = &local_88;\n  do {\n    ppbVar7 = ppbVar6;\n    ppbVar6 = ppbVar7 + 2;\n    pbVar9 = *ppbVar6;\n    bVar11 = false;\n    bVar12 = pbVar9 == (byte *)0x0;\n    if (bVar12) break;\n    lVar8 = 5;\n    pbVar10 = &DAT_0040bdfd;\n    do {\n      if (lVar8 == 0) break;\n      lVar8 = lVar8 + -1;\n      bVar11 = *pbVar10 < *pbVar9;\n      bVar12 = *pbVar10 == *pbVar9;\n      pbVar10 = pbVar10 + (ulong)bVar13 * -2 + 1;\n      pbVar9 = pbVar9 + (ulong)bVar13 * -2 + 1;\n    } while (bVar12);\n  } while ((!bVar11 && !bVar12) != bVar11);\n  pbVar9 = ppbVar7[3];\n  if (pbVar9 == (byte *)0x0) {\n    uVar5 = dcgettext(0,\"\\n%s online help: <%s>\\n\",5);\n    __printf_chk(1,uVar5,\"GNU coreutils\",\"https://www.gnu.org/software/coreutils/\");\n    pcVar4 = setlocale(5,(char *)0x0);\n    if (pcVar4 != (char *)0x0) {\n      iVar2 = strncmp(pcVar4,\"en_\",3);\n      if (iVar2 != 0) {\n        pbVar9 = &DAT_0040bdfd;\n        goto LAB_00403b18;\n      }\n    }\n    pbVar9 = &DAT_0040bdfd;\n    uVar5 = dcgettext(0,\"Full documentation at: <%s%s>\\n\",5);\n    pcVar4 = \" invocation\";\n    __printf_chk(1,uVar5,\"https://www.gnu.org/software/coreutils/\",&DAT_0040bdfd);\n  }\n  else {\n    uVar5 = dcgettext(0,\"\\n%s online help: <%s>\\n\",5);\n    __printf_chk(1,uVar5,\"GNU coreutils\",\"https://www.gnu.org/software/coreutils/\");\n    pcVar4 = setlocale(5,(char *)0x0);\n    if (pcVar4 != (char *)0x0) {\n      iVar2 = strncmp(pcVar4,\"en_\",3);\n      if (iVar2 != 0) {\nLAB_00403b18:\n        uVar5 = dcgettext(0,\"Report %s translation bugs to <https://translationproject.org/team/>\\n\"\n                          ,5);\n        __printf_chk(1,uVar5,&DAT_0040bdfd);\n      }\n    }\n    pcVar4 = \" invocation\";\n    uVar5 = dcgettext(0,\"Full documentation at: <%s%s>\\n\",5);\n    __printf_chk(1,uVar5,\"https://www.gnu.org/software/coreutils/\",&DAT_0040bdfd);\n    if (pbVar9 != &DAT_0040bdfd) {\n      pcVar4 = \"\";\n    }\n  }\n  uVar5 = dcgettext(0,\"or available locally via: info \\'(coreutils) %s%s\\'\\n\",5);\n  __printf_chk(1,uVar5,pbVar9,pcVar4);\nLAB_00402dcf:\n                    /* WARNING: Subroutine does not return */\n  exit(param_1);\n}\n\n",
            "funcName": "FUN_00402d90"
        },
        {
            "funcStartAddr": "0x403bd0",
            "funcEndAddr": "0x4048ee",
            "decompiledFuncCode": "\nvoid FUN_00403bd0(char param_1,undefined8 param_2,long param_3,int param_4,termios *param_5,\n                 undefined *param_6,undefined *param_7)\n\n{\n  long *plVar1;\n  byte bVar2;\n  byte bVar3;\n  int iVar4;\n  speed_t sVar5;\n  int iVar6;\n  undefined4 uVar7;\n  uint *puVar8;\n  ulong uVar9;\n  undefined8 uVar10;\n  undefined8 uVar11;\n  int *piVar12;\n  long lVar13;\n  byte *pbVar14;\n  undefined **ppuVar15;\n  uint uVar16;\n  uint uVar17;\n  byte *pbVar18;\n  byte *pbVar19;\n  long lVar20;\n  byte *pbVar21;\n  long lVar22;\n  char *pcVar23;\n  byte **ppbVar24;\n  bool bVar25;\n  bool bVar26;\n  bool bVar27;\n  byte bVar28;\n  byte bVar29;\n  byte *local_50;\n  undefined8 local_48;\n  undefined8 local_40;\n  \n  bVar29 = 0;\n  if (param_4 < 2) {\n    return;\n  }\n  uVar17 = 1;\nLAB_00403c2c:\n  lVar22 = (long)(int)uVar17 * 8;\n  pbVar14 = *(byte **)(param_3 + (long)(int)uVar17 * 8);\n  uVar16 = uVar17;\n  if (pbVar14 != (byte *)0x0) {\n    bVar25 = *pbVar14 < 0x2d;\n    bVar26 = *pbVar14 == 0x2d;\n    bVar27 = bVar26;\n    if (bVar26) {\n      bVar25 = (byte *)0xfffffffffffffffe < pbVar14;\n      pbVar14 = pbVar14 + 1;\n      bVar27 = pbVar14 == (byte *)0x0;\n    }\n    lVar13 = 6;\n    pbVar21 = pbVar14;\n    pbVar19 = (byte *)0x40c054;\n    do {\n      if (lVar13 == 0) break;\n      lVar13 = lVar13 + -1;\n      bVar25 = *pbVar21 < *pbVar19;\n      bVar27 = *pbVar21 == *pbVar19;\n      pbVar21 = pbVar21 + (ulong)bVar29 * -2 + 1;\n      pbVar19 = pbVar19 + (ulong)bVar29 * -2 + 1;\n    } while (bVar27);\n    if ((!bVar25 && !bVar27) != bVar25) {\n      lVar13 = 0;\n      pcVar23 = \"parenb\";\nLAB_00403c9b:\n      lVar20 = (long)(int)lVar13;\n      iVar4 = strcmp((char *)pbVar14,pcVar23);\n      if (iVar4 != 0) goto LAB_00403c80;\n      bVar27 = ((&DAT_0040c9cc)[lVar20 * 0x20] & 0x10) == 0;\n      if (!bVar27) goto LAB_00403cc6;\n      if (bVar26) {\n        if (((&DAT_0040c9cc)[lVar20 * 0x20] & 4) == 0) {\n          *param_7 = 1;\n          goto LAB_0040421b;\n        }\n        puVar8 = (uint *)FUN_00402750((&DAT_0040c9c8)[lVar20 * 8],param_5);\n        if (puVar8 != (uint *)0x0) {\n          *puVar8 = *puVar8 & ~((uint)(&DAT_0040c9d0)[lVar20 * 4] |\n                               *(uint *)(&DAT_0040c9d8 + lVar20 * 4));\n          *param_7 = 1;\n          goto LAB_00403c1f;\n        }\n        iVar4 = strcmp(pcVar23,\"evenp\");\n        if (((iVar4 == 0) || (iVar4 = strcmp(pcVar23,\"parity\"), iVar4 == 0)) ||\n           (iVar4 = strcmp(pcVar23,\"oddp\"), iVar4 == 0)) {\n          param_5->c_cflag = param_5->c_cflag & 0xfffffecf | 0x30;\n          goto LAB_00403eb1;\n        }\n      }\n      else {\n        puVar8 = (uint *)FUN_00402750((&DAT_0040c9c8)[lVar20 * 8],param_5);\n        if (puVar8 != (uint *)0x0) {\n          *puVar8 = ~*(uint *)(&DAT_0040c9d8 + lVar20 * 4) & *puVar8 |\n                    *(uint *)(&DAT_0040c9d0 + lVar20 * 4);\n          *param_7 = 1;\n          goto LAB_00403c1f;\n        }\n        iVar4 = strcmp(pcVar23,\"evenp\");\n        if ((iVar4 == 0) || (iVar4 = strcmp(pcVar23,\"parity\"), iVar4 == 0)) {\n          param_5->c_cflag = param_5->c_cflag & 0xfffffccf | 0x120;\n          *param_7 = 1;\n          goto LAB_00403c1f;\n        }\n        iVar4 = strcmp(pcVar23,\"oddp\");\n        if (iVar4 == 0) {\n          param_5->c_cflag = param_5->c_cflag & 0xfffffccf | 800;\n          goto LAB_00403eb1;\n        }\n      }\n      iVar4 = strcmp(pcVar23,\"nl\");\n      if (iVar4 == 0) {\n        if (bVar26) {\n          param_5->c_oflag = param_5->c_oflag & 0xffffffd3 | 4;\n          param_5->c_iflag = param_5->c_iflag & 0xfffffe3f | 0x100;\n          *param_7 = 1;\n        }\n        else {\n          *(ulong *)param_5 = *(ulong *)param_5 & 0xfffffffbfffffeff;\n          *param_7 = 1;\n        }\n        goto LAB_00403c1f;\n      }\n      iVar4 = strcmp(pcVar23,\"ek\");\n      if (iVar4 == 0) {\n        *(undefined2 *)(param_5->c_cc + 2) = 0x157f;\n        *param_7 = 1;\n        goto LAB_00403c1f;\n      }\n      iVar4 = strcmp(pcVar23,\"sane\");\n      if (iVar4 == 0) {\n        ppuVar15 = &PTR_DAT_0040c7e0;\n        while (*ppuVar15 != (undefined *)0x0) {\n          param_5->c_cc[(long)ppuVar15[2]] = *(cc_t *)(ppuVar15 + 1);\n          ppuVar15 = ppuVar15 + 3;\n        }\n        for (ppuVar15 = &PTR_s_parenb_0040c9c0; *ppuVar15 != (undefined *)0x0;\n            ppuVar15 = ppuVar15 + 4) {\n          bVar28 = *(byte *)((long)ppuVar15 + 0xc);\n          if ((bVar28 & 0x10) == 0) {\n            if ((bVar28 & 1) == 0) {\n              if ((bVar28 & 2) != 0) {\n                puVar8 = (uint *)FUN_00402750(*(undefined4 *)(ppuVar15 + 1),param_5);\n                if (puVar8 == (uint *)0x0) {\n                    /* WARNING: Subroutine does not return */\n                  __assert_fail(\"bitsp\",\"src/stty.c\",0x8d1,\"sane_mode\");\n                }\n                *puVar8 = *puVar8 & ~((uint)ppuVar15[2] | *(uint *)(ppuVar15 + 3));\n              }\n            }\n            else {\n              puVar8 = (uint *)FUN_00402750(*(undefined4 *)(ppuVar15 + 1),param_5);\n              if (puVar8 == (uint *)0x0) {\n                    /* WARNING: Subroutine does not return */\n                __assert_fail(\"bitsp\",\"src/stty.c\",0x8cb,\"sane_mode\");\n              }\n              *puVar8 = ~*(uint *)(ppuVar15 + 3) & *puVar8 | *(uint *)(ppuVar15 + 2);\n            }\n          }\n        }\n        goto LAB_00403eb1;\n      }\n      iVar4 = strcmp(pcVar23,\"cbreak\");\n      if (iVar4 == 0) {\n        uVar17 = param_5->c_lflag;\n        if (!bVar26) goto LAB_00404431;\n        param_5->c_lflag = uVar17 | 2;\n        *param_7 = 1;\n        goto LAB_00403c1f;\n      }\n      iVar4 = strcmp(pcVar23,\"pass8\");\n      if (iVar4 == 0) {\n        uVar17 = param_5->c_cflag & 0xfffffecf;\n        if (bVar26) {\n          param_5->c_cflag = uVar17 | 0x120;\n          param_5->c_iflag = param_5->c_iflag | 0x20;\n          *param_7 = 1;\n        }\n        else {\n          param_5->c_cflag = uVar17 | 0x30;\n          param_5->c_iflag = param_5->c_iflag & 0xffffffdf;\n          *param_7 = 1;\n        }\n        goto LAB_00403c1f;\n      }\n      iVar4 = strcmp(pcVar23,\"litout\");\n      if (iVar4 == 0) {\n        uVar17 = param_5->c_cflag & 0xfffffecf;\n        if (bVar26) {\n          *(ulong *)param_5 = *(ulong *)param_5 | 0x100000020;\n          param_5->c_cflag = uVar17 | 0x120;\n          *param_7 = 1;\n        }\n        else {\n          param_5->c_cflag = uVar17 | 0x30;\n          *(ulong *)param_5 = *(ulong *)param_5 & 0xfffffffeffffffdf;\n          *param_7 = 1;\n        }\n        goto LAB_00403c1f;\n      }\n      iVar4 = strcmp(pcVar23,\"raw\");\n      if ((iVar4 == 0) || (iVar4 = strcmp(pcVar23,\"cooked\"), iVar4 == 0)) {\n        if (*pcVar23 == 'r') {\n          if (bVar26) goto LAB_00404791;\n        }\n        else if ((*pcVar23 == 'c') && (!bVar26)) {\nLAB_00404791:\n          param_5->c_lflag = param_5->c_lflag | 3;\n          *(ulong *)param_5 = *(ulong *)param_5 | 0x100000526;\n          *param_7 = 1;\n          goto LAB_00403c1f;\n        }\n        param_5->c_iflag = 0;\n        param_5->c_oflag = param_5->c_oflag & 0xfffffffe;\n        param_5->c_lflag = param_5->c_lflag & 0xfffffff8;\n        *(undefined2 *)(param_5->c_cc + 5) = 0x100;\n        *param_7 = 1;\n        goto LAB_00403c1f;\n      }\n      iVar4 = strcmp(pcVar23,\"decctlq\");\n      if (iVar4 == 0) {\n        if (bVar26) {\n          param_5->c_iflag = param_5->c_iflag | 0x800;\n          *param_7 = 1;\n        }\n        else {\n          param_5->c_iflag = param_5->c_iflag & 0xfffff7ff;\n          *param_7 = 1;\n        }\n        goto LAB_00403c1f;\n      }\n      iVar4 = strcmp(pcVar23,\"tabs\");\n      if (iVar4 == 0) {\n        if (bVar26) {\n          param_5->c_oflag = param_5->c_oflag | 0x1800;\n          *param_7 = 1;\n        }\n        else {\n          param_5->c_oflag = param_5->c_oflag & 0xffffe7ff;\n          *param_7 = 1;\n        }\n        goto LAB_00403c1f;\n      }\n      iVar4 = strcmp(pcVar23,\"lcase\");\n      if ((iVar4 == 0) || (iVar4 = strcmp(pcVar23,\"LCASE\"), iVar4 == 0)) {\n        if (bVar26) {\n          *(ulong *)param_5 = *(ulong *)param_5 & 0xfffffffdfffffdff;\n          param_5->c_lflag = param_5->c_lflag & 0xfffffffb;\n          *param_7 = 1;\n        }\n        else {\n          param_5->c_lflag = param_5->c_lflag | 4;\n          *(ulong *)param_5 = *(ulong *)param_5 | 0x200000200;\n          *param_7 = 1;\n        }\n      }\n      else {\n        iVar4 = strcmp(pcVar23,\"crt\");\n        if (iVar4 == 0) {\n          param_5->c_lflag = param_5->c_lflag | 0xa10;\n          *param_7 = 1;\n        }\n        else {\n          iVar4 = strcmp(pcVar23,\"dec\");\n          if (iVar4 != 0) goto LAB_00403eb1;\n          param_5->c_iflag = param_5->c_iflag & 0xfffff7ff;\n          param_5->c_cc[0] = '\\x03';\n          *(undefined2 *)(param_5->c_cc + 2) = 0x157f;\n          param_5->c_lflag = param_5->c_lflag | 0xa10;\n          *param_7 = 1;\n        }\n      }\n      goto LAB_00403c1f;\n    }\n    DAT_00613230 = bVar26 ^ 1;\n  }\n  goto LAB_00403c1f;\nLAB_00403c80:\n  lVar13 = lVar13 + 1;\n  pcVar23 = (&PTR_s_parenb_0040c9c0)[lVar13 * 4];\n  if (pcVar23 == (char *)0x0) goto LAB_00403d60;\n  goto LAB_00403c9b;\nLAB_00403d60:\n  if (bVar26) {\nLAB_0040421b:\n    uVar10 = FUN_00406670(pbVar14 + -1);\n    pcVar23 = \"invalid argument %s\";\nLAB_0040440f:\n    uVar11 = dcgettext(0,pcVar23,5);\n    error(0,0,uVar11,uVar10);\n    uVar17 = FUN_00402d90(1);\nLAB_00404431:\n    param_5->c_lflag = uVar17 & 0xfffffffd;\n    *param_7 = 1;\n  }\n  else {\n    iVar4 = 0;\n    pbVar21 = &DAT_0040bf49;\n    ppbVar24 = &PTR_DAT_0040c7f8;\n    do {\n      iVar6 = strcmp((char *)pbVar14,(char *)pbVar21);\n      if (iVar6 == 0) {\n        if ((param_4 - 1U == uVar17) ||\n           (pbVar19 = *(byte **)(param_3 + 8 + lVar22), pbVar19 == (byte *)0x0)) goto LAB_004043fa;\n        lVar22 = 4;\n        bVar27 = 0xfffffffe < uVar17;\n        bVar25 = uVar17 + 1 == 0;\n        pbVar14 = pbVar21;\n        pbVar18 = &DAT_0040bfd2;\n        goto code_r0x00403dda;\n      }\n      pbVar21 = *ppbVar24;\n      iVar4 = iVar4 + 1;\n      bVar27 = pbVar21 == (byte *)0x0;\n      ppbVar24 = ppbVar24 + 3;\n    } while (!bVar27);\nLAB_00403cc6:\n    bVar25 = false;\n    lVar13 = 7;\n    pbVar21 = pbVar14;\n    pbVar19 = (byte *)\"ispeed\";\n    do {\n      if (lVar13 == 0) break;\n      lVar13 = lVar13 + -1;\n      bVar25 = *pbVar21 < *pbVar19;\n      bVar27 = *pbVar21 == *pbVar19;\n      pbVar21 = pbVar21 + (ulong)bVar29 * -2 + 1;\n      pbVar19 = pbVar19 + (ulong)bVar29 * -2 + 1;\n    } while (bVar27);\n    bVar26 = false;\n    bVar27 = (!bVar25 && !bVar27) == bVar25;\n    if (bVar27) {\n      if ((param_4 - 1U == uVar17) || (*(long *)(param_3 + 8 + lVar22) == 0)) {\nLAB_004043fa:\n        uVar10 = FUN_00406670(pbVar14);\n        pcVar23 = \"missing argument to %s\";\n        goto LAB_0040440f;\n      }\n      uVar16 = uVar17 + 1;\n      if (param_1 == '\\0') {\n        sVar5 = FUN_00402680();\n        uVar17 = uVar17 + 2;\n        cfsetispeed(param_5,sVar5);\n        *param_6 = 1;\n        *param_7 = 1;\n        goto joined_r0x00403c26;\n      }\n    }\n    else {\n      lVar13 = 7;\n      pbVar21 = pbVar14;\n      pbVar19 = (byte *)\"ospeed\";\n      do {\n        if (lVar13 == 0) break;\n        lVar13 = lVar13 + -1;\n        bVar26 = *pbVar21 < *pbVar19;\n        bVar27 = *pbVar21 == *pbVar19;\n        pbVar21 = pbVar21 + (ulong)bVar29 * -2 + 1;\n        pbVar19 = pbVar19 + (ulong)bVar29 * -2 + 1;\n      } while (bVar27);\n      bVar25 = false;\n      bVar27 = (!bVar26 && !bVar27) == bVar26;\n      if (bVar27) {\n        if ((param_4 - 1U == uVar17) || (*(long *)(param_3 + 8 + lVar22) == 0)) goto LAB_004043fa;\n        uVar17 = uVar17 + 1;\n        uVar16 = uVar17;\n        if (param_1 == '\\0') {\n          sVar5 = FUN_00402680();\nLAB_00403ea4:\n          cfsetospeed(param_5,sVar5);\n          *param_6 = 1;\nLAB_00403eb1:\n          *param_7 = 1;\n          uVar16 = uVar17;\n        }\n      }\n      else {\n        lVar13 = 5;\n        pbVar21 = pbVar14;\n        pbVar19 = &DAT_0040bfeb;\n        do {\n          if (lVar13 == 0) break;\n          lVar13 = lVar13 + -1;\n          bVar25 = *pbVar21 < *pbVar19;\n          bVar27 = *pbVar21 == *pbVar19;\n          pbVar21 = pbVar21 + (ulong)bVar29 * -2 + 1;\n          pbVar19 = pbVar19 + (ulong)bVar29 * -2 + 1;\n        } while (bVar27);\n        bVar26 = false;\n        bVar27 = (!bVar25 && !bVar27) == bVar25;\n        if (bVar27) {\n          if ((param_4 - 1U == uVar17) || (lVar22 = *(long *)(param_3 + 8 + lVar22), lVar22 == 0))\n          goto LAB_004043fa;\n          uVar16 = uVar17 + 1;\n          if (param_1 == '\\0') {\n            uVar7 = FUN_00402ab0(lVar22,0x7fffffff);\n            FUN_00402bd0(uVar7,0xffffffff,param_2);\n          }\n        }\n        else {\n          lVar13 = 5;\n          pbVar21 = pbVar14;\n          pbVar19 = &DAT_0040bff0;\n          do {\n            if (lVar13 == 0) break;\n            lVar13 = lVar13 + -1;\n            bVar26 = *pbVar21 < *pbVar19;\n            bVar27 = *pbVar21 == *pbVar19;\n            pbVar21 = pbVar21 + (ulong)bVar29 * -2 + 1;\n            pbVar19 = pbVar19 + (ulong)bVar29 * -2 + 1;\n          } while (bVar27);\n          if (((!bVar26 && !bVar27) == bVar26) ||\n             (iVar4 = strcmp((char *)pbVar14,\"columns\"), iVar4 == 0)) {\n            if ((param_4 - 1U == uVar17) || (lVar22 = *(long *)(param_3 + 8 + lVar22), lVar22 == 0))\n            goto LAB_004043fa;\n            uVar16 = uVar17 + 1;\n            if (param_1 == '\\0') {\n              uVar7 = FUN_00402ab0(lVar22,0x7fffffff);\n              FUN_00402bd0(0xffffffff,uVar7,param_2);\n            }\n          }\n          else {\n            iVar4 = strcmp((char *)pbVar14,\"size\");\n            if (iVar4 == 0) {\n              if (param_1 == '\\0') {\n                DAT_006133e0 = FUN_004026e0();\n                DAT_006133dc = 0;\n                FUN_00402ca0(0,param_2);\n              }\n            }\n            else {\n              iVar4 = strcmp((char *)pbVar14,\"line\");\n              if (iVar4 == 0) {\n                if (param_4 - 1U != uVar17) {\n                  plVar1 = (long *)(param_3 + 8 + lVar22);\n                  lVar22 = *plVar1;\n                  if (lVar22 != 0) {\n                    uVar17 = uVar17 + 1;\n                    uVar9 = FUN_00402ab0(lVar22,0xffffffffffffffff);\n                    param_5->c_line = (cc_t)uVar9;\n                    if ((uVar9 & 0xffffffffffffff00) != 0) {\n                      uVar10 = FUN_00406670(*plVar1);\n                      uVar11 = dcgettext(0,\"invalid line discipline %s\",5);\n                      error(0,0,uVar11,uVar10);\n                    }\n                    goto LAB_00403eb1;\n                  }\n                }\n                goto LAB_004043fa;\n              }\n              iVar4 = strcmp((char *)pbVar14,\"speed\");\n              if (iVar4 == 0) {\n                if (param_1 == '\\0') {\n                  DAT_006133e0 = FUN_004026e0();\n                  FUN_00402930(param_5,0);\n                }\n              }\n              else {\n                sVar5 = FUN_00402680(pbVar14);\n                if (sVar5 == 0xffffffff) {\n                  piVar12 = __errno_location();\n                  lVar22 = 0;\n                  pbVar21 = pbVar14;\n                  do {\n                    *piVar12 = 0;\n                    uVar9 = strtoul((char *)pbVar21,(char **)&local_50,0x10);\n                    if ((((*piVar12 != 0) || (*local_50 != 0x3a)) || (local_50 == pbVar21)) ||\n                       (uVar9 != (uVar9 & 0xffffffff))) goto LAB_00404631;\n                    *(int *)((long)&local_48 + lVar22 * 4) = (int)uVar9;\n                    lVar22 = lVar22 + 1;\n                    pbVar21 = local_50 + 1;\n                  } while (lVar22 != 4);\n                  lVar22 = 0;\n                  bVar28 = 0x3a;\n                  *(undefined8 *)param_5 = local_48;\n                  *(undefined8 *)&param_5->c_cflag = local_40;\n                  while( true ) {\n                    *piVar12 = 0;\n                    uVar9 = strtoul((char *)pbVar21,(char **)&local_50,0x10);\n                    if (((*piVar12 != 0) || (*local_50 != bVar28)) ||\n                       ((bVar28 = pbVar21 == local_50, (bool)bVar28 ||\n                        ((uVar9 & 0xffffffffffffff00) != 0)))) break;\n                    pbVar21 = local_50 + 1;\n                    param_5->c_cc[lVar22] = (cc_t)uVar9;\n                    lVar22 = lVar22 + 1;\n                    if (lVar22 == 0x20) goto LAB_00403eb1;\n                    if (lVar22 != 0x1f) {\n                      bVar28 = 0x3a;\n                    }\n                  }\nLAB_00404631:\n                  uVar10 = FUN_00406670(pbVar14);\n                  pcVar23 = \"invalid argument %s\";\n                  goto LAB_0040440f;\n                }\n                if (param_1 == '\\0') {\n                  cfsetispeed(param_5,sVar5);\n                  goto LAB_00403ea4;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  goto LAB_00403c1f;\n  while( true ) {\n    lVar22 = lVar22 + -1;\n    bVar27 = *pbVar14 < *pbVar18;\n    bVar25 = *pbVar14 == *pbVar18;\n    pbVar14 = pbVar14 + (ulong)bVar29 * -2 + 1;\n    pbVar18 = pbVar18 + (ulong)bVar29 * -2 + 1;\n    if (!bVar25) break;\ncode_r0x00403dda:\n    if (lVar22 == 0) break;\n  }\n  bVar26 = false;\n  bVar27 = (!bVar27 && !bVar25) == bVar27;\n  if (bVar27) {\nLAB_00403f7e:\n    bVar3 = FUN_00402ab0(pbVar19,0xff);\n  }\n  else {\n    lVar22 = 5;\n    pbVar14 = &DAT_0040bfd6;\n    do {\n      if (lVar22 == 0) break;\n      lVar22 = lVar22 + -1;\n      bVar26 = *pbVar21 < *pbVar14;\n      bVar27 = *pbVar21 == *pbVar14;\n      pbVar21 = pbVar21 + (ulong)bVar29 * -2 + 1;\n      pbVar14 = pbVar14 + (ulong)bVar29 * -2 + 1;\n    } while (bVar27);\n    if ((!bVar26 && !bVar27) == bVar26) goto LAB_00403f7e;\n    bVar28 = *pbVar19;\n    bVar3 = bVar28;\n    if ((bVar28 != 0) && (bVar2 = pbVar19[1], bVar2 != 0)) {\n      iVar6 = strcmp((char *)pbVar19,\"^-\");\n      bVar3 = 0;\n      if ((iVar6 != 0) && (iVar6 = strcmp((char *)pbVar19,\"undef\"), iVar6 != 0)) {\n        if (bVar28 != 0x5e) goto LAB_00403f7e;\n        if (bVar2 == 0x3f) {\n          bVar3 = 0x7f;\n        }\n        else {\n          bVar3 = bVar2 & 0x9f;\n        }\n      }\n    }\n  }\n  param_5->c_cc[(&DAT_0040c7f0)[(long)iVar4 * 3]] = bVar3;\n  *param_7 = 1;\n  uVar16 = uVar17 + 1;\nLAB_00403c1f:\n  uVar17 = uVar16 + 1;\njoined_r0x00403c26:\n  if (param_4 <= (int)uVar17) {\n    return;\n  }\n  goto LAB_00403c2c;\n}\n\n",
            "funcName": "FUN_00403bd0"
        },
        {
            "funcStartAddr": "0x404920",
            "funcEndAddr": "0x404928",
            "decompiledFuncCode": "\nvoid FUN_00404920(undefined8 param_1)\n\n{\n  DAT_006133f0 = param_1;\n  return;\n}\n\n",
            "funcName": "FUN_00404920"
        },
        {
            "funcStartAddr": "0x404930",
            "funcEndAddr": "0x404938",
            "decompiledFuncCode": "\nvoid FUN_00404930(undefined param_1)\n\n{\n  DAT_006133e8 = param_1;\n  return;\n}\n\n",
            "funcName": "FUN_00404930"
        },
        {
            "funcStartAddr": "0x404940",
            "funcEndAddr": "0x4049de",
            "decompiledFuncCode": "\nvoid FUN_00404940(void)\n\n{\n  int iVar1;\n  int *piVar2;\n  undefined8 uVar3;\n  undefined8 uVar4;\n  \n  iVar1 = FUN_00408b40(stdout);\n  if (iVar1 != 0) {\n    piVar2 = __errno_location();\n    if ((DAT_006133e8 == '\\0') || (*piVar2 != 0x20)) {\n      uVar3 = dcgettext(0,\"write error\",5);\n      if (DAT_006133f0 == 0) {\n        error(0,*piVar2,\"%s\",uVar3);\n      }\n      else {\n        uVar4 = FUN_004064c0();\n        error(0,*piVar2,\"%s: %s\",uVar4,uVar3);\n      }\n      goto LAB_004049be;\n    }\n  }\n  iVar1 = FUN_00408b40(stderr);\n  if (iVar1 == 0) {\n    return;\n  }\nLAB_004049be:\n                    /* WARNING: Subroutine does not return */\n  _exit(DAT_00613240);\n}\n\n",
            "funcName": "FUN_00404940"
        },
        {
            "funcStartAddr": "0x4049e0",
            "funcEndAddr": "0x404a43",
            "decompiledFuncCode": "\nint FUN_004049e0(int param_1,char *param_2,int param_3,uint param_4)\n\n{\n  int iVar1;\n  int __fd;\n  int iVar2;\n  int *piVar3;\n  \n  __fd = open(param_2,param_3,(ulong)param_4);\n  if ((param_1 != __fd) && (-1 < __fd)) {\n    iVar2 = dup2(__fd,param_1);\n    piVar3 = __errno_location();\n    iVar1 = *piVar3;\n    close(__fd);\n    *piVar3 = iVar1;\n    return iVar2;\n  }\n  return __fd;\n}\n\n",
            "funcName": "FUN_004049e0"
        },
        {
            "funcStartAddr": "0x404a50",
            "funcEndAddr": "0x404ae9",
            "decompiledFuncCode": "\nvoid FUN_00404a50(byte *param_1)\n\n{\n  byte *pbVar1;\n  char *pcVar2;\n  long lVar3;\n  ulong uVar4;\n  byte *pbVar5;\n  byte *pbVar6;\n  bool bVar7;\n  bool bVar8;\n  bool bVar9;\n  byte bVar10;\n  \n  bVar10 = 0;\n  if (param_1 == (byte *)0x0) {\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\",1,0x37,stderr);\n                    /* WARNING: Subroutine does not return */\n    abort();\n  }\n  pcVar2 = strrchr((char *)param_1,0x2f);\n  if (pcVar2 != (char *)0x0) {\n    pbVar1 = (byte *)(pcVar2 + 1);\n    uVar4 = (long)pbVar1 - (long)param_1;\n    bVar7 = uVar4 < 6;\n    bVar9 = uVar4 == 6;\n    if (6 < (long)uVar4) {\n      lVar3 = 7;\n      pbVar5 = (byte *)(pcVar2 + -6);\n      pbVar6 = (byte *)\"/.libs/\";\n      do {\n        if (lVar3 == 0) break;\n        lVar3 = lVar3 + -1;\n        bVar7 = *pbVar5 < *pbVar6;\n        bVar9 = *pbVar5 == *pbVar6;\n        pbVar5 = pbVar5 + (ulong)bVar10 * -2 + 1;\n        pbVar6 = pbVar6 + (ulong)bVar10 * -2 + 1;\n      } while (bVar9);\n      bVar8 = false;\n      bVar7 = (!bVar7 && !bVar9) == bVar7;\n      if (bVar7) {\n        lVar3 = 3;\n        pbVar5 = pbVar1;\n        pbVar6 = &DAT_0040f760;\n        do {\n          if (lVar3 == 0) break;\n          lVar3 = lVar3 + -1;\n          bVar8 = *pbVar5 < *pbVar6;\n          bVar7 = *pbVar5 == *pbVar6;\n          pbVar5 = pbVar5 + (ulong)bVar10 * -2 + 1;\n          pbVar6 = pbVar6 + (ulong)bVar10 * -2 + 1;\n        } while (bVar7);\n        param_1 = pbVar1;\n        if ((!bVar8 && !bVar7) == bVar8) {\n          param_1 = (byte *)(pcVar2 + 4);\n          program_invocation_short_name = param_1;\n        }\n      }\n    }\n  }\n  DAT_006133f8 = param_1;\n  program_invocation_name = param_1;\n  return;\n}\n\n",
            "funcName": "FUN_00404a50"
        },
        {
            "funcStartAddr": "0x404af0",
            "funcEndAddr": "0x404bcf",
            "decompiledFuncCode": "\nchar * FUN_00404af0(char *param_1,int param_2)\n\n{\n  char cVar1;\n  char *pcVar2;\n  byte *pbVar3;\n  \n  pcVar2 = (char *)dcgettext(0,param_1,5);\n  if (param_1 == pcVar2) {\n    pbVar3 = (byte *)FUN_00408c00();\n    if ((*pbVar3 & 0xdf) == 0x55) {\n      if (((((pbVar3[1] & 0xdf) != 0x54) || ((pbVar3[2] & 0xdf) != 0x46)) || (pbVar3[3] != 0x2d)) ||\n         ((pbVar3[4] != 0x38 || (pbVar3[5] != 0)))) {\nLAB_00404bc8:\n        pcVar2 = \"\\\"\";\n        if (param_2 != 9) {\n          pcVar2 = \"\\'\";\n        }\n        return pcVar2;\n      }\n      cVar1 = *pcVar2;\n      pcVar2 = &DAT_0040f771;\n      if (cVar1 != '`') {\n        pcVar2 = &DAT_0040f766;\n      }\n    }\n    else {\n      if (((((*pbVar3 & 0xdf) != 0x47) || ((pbVar3[1] & 0xdf) != 0x42)) || (pbVar3[2] != 0x31)) ||\n         (((pbVar3[3] != 0x38 || (pbVar3[4] != 0x30)) ||\n          ((pbVar3[5] != 0x33 || ((pbVar3[6] != 0x30 || (pbVar3[7] != 0)))))))) goto LAB_00404bc8;\n      cVar1 = *pcVar2;\n      pcVar2 = &DAT_0040f76d;\n      if (cVar1 != '`') {\n        pcVar2 = &DAT_0040f76a;\n      }\n    }\n  }\n  return pcVar2;\n}\n\n",
            "funcName": "FUN_00404af0"
        },
        {
            "funcStartAddr": "0x404bf0",
            "funcEndAddr": "0x405d23",
            "decompiledFuncCode": "\nulong FUN_00404bf0(undefined *param_1,ulong param_2,char *param_3,ulong param_4,int param_5,\n                  uint param_6,long param_7,char *param_8,char *param_9)\n\n{\n  byte *__s1;\n  ulong uVar1;\n  bool bVar2;\n  bool bVar3;\n  bool bVar4;\n  bool bVar5;\n  bool bVar6;\n  int iVar7;\n  size_t sVar8;\n  ulong uVar9;\n  ushort **ppuVar10;\n  long lVar11;\n  char *pcVar12;\n  byte bVar13;\n  char cVar14;\n  ulong uVar15;\n  ulong uVar16;\n  byte bVar17;\n  uint uVar18;\n  ulong uVar19;\n  bool bVar20;\n  ulong uVar21;\n  ulong uVar22;\n  bool bVar23;\n  bool bVar24;\n  bool bVar25;\n  bool bVar26;\n  size_t local_a0;\n  char *local_78;\n  ulong local_70;\n  bool local_5c;\n  bool local_5b;\n  wint_t local_44;\n  mbstate_t local_40 [2];\n  \n  sVar8 = __ctype_get_mb_cur_max();\n  uVar18 = param_6 & 2;\n  local_5c = uVar18 != 0;\n  uVar9 = param_2;\n  switch(param_5) {\n  case 0:\n    bVar2 = true;\n    bVar3 = false;\n    uVar15 = 0;\n    local_5b = false;\n    local_70 = 0;\n    local_5c = false;\n    bVar6 = false;\n    local_a0 = 0;\n    local_78 = (char *)0x0;\n    break;\n  case 2:\n    if (uVar18 != 0) {\n      bVar2 = true;\n      bVar3 = false;\n      uVar15 = 0;\n      local_5b = false;\n      local_70 = 0;\n      local_5c = true;\n      bVar6 = false;\n      local_a0 = 1;\n      local_78 = \"\\'\";\n      break;\n    }\n    bVar6 = false;\nLAB_00405841:\n    if (param_2 != 0) {\n      bVar3 = false;\n      local_5b = false;\n      bVar2 = true;\n      local_70 = 0;\n      goto LAB_00405476;\n    }\n    bVar2 = true;\n    bVar3 = false;\n    uVar15 = 1;\n    param_5 = 2;\n    local_70 = 0;\n    local_5b = false;\n    local_5c = false;\n    local_a0 = 1;\n    local_78 = \"\\'\";\n    break;\n  case 3:\n    bVar2 = true;\n    bVar3 = false;\n    uVar15 = 0;\n    param_5 = 2;\n    local_5b = false;\n    local_70 = 0;\n    local_5c = true;\n    bVar6 = true;\n    local_a0 = 1;\n    local_78 = \"\\'\";\n    break;\n  case 4:\n    if (uVar18 == 0) {\n      bVar6 = true;\n      goto LAB_00405841;\n    }\n  case 1:\n    bVar2 = true;\n    bVar3 = false;\n    uVar15 = 0;\n    param_5 = 2;\n    local_5b = false;\n    local_70 = 0;\n    local_5c = true;\n    bVar6 = false;\n    local_a0 = 1;\n    local_78 = \"\\'\";\n    break;\n  case 5:\n    if (uVar18 == 0) {\n      if (param_2 != 0) {\n        *param_1 = 0x22;\n      }\n      local_5b = false;\n      local_70 = 0;\n      bVar2 = true;\n      bVar3 = false;\n      local_5c = false;\n      uVar15 = 1;\n      bVar6 = true;\n      local_a0 = 1;\n      local_78 = \"\\\"\";\n    }\n    else {\n      bVar2 = true;\n      bVar3 = false;\n      uVar15 = 0;\n      local_5b = false;\n      local_70 = 0;\n      local_5c = true;\n      bVar6 = true;\n      local_a0 = 1;\n      local_78 = \"\\\"\";\n    }\n    break;\n  case 6:\n    bVar2 = true;\n    bVar3 = false;\n    uVar15 = 0;\n    param_5 = 5;\n    local_5b = false;\n    local_70 = 0;\n    local_5c = true;\n    bVar6 = true;\n    local_a0 = 1;\n    local_78 = \"\\\"\";\n    break;\n  case 7:\n    bVar2 = true;\n    bVar3 = false;\n    uVar15 = 0;\n    local_5b = false;\n    local_70 = 0;\n    local_5c = false;\n    bVar6 = true;\n    local_a0 = 0;\n    local_78 = (char *)0x0;\n    break;\n  case 8:\n  case 9:\n  case 10:\n    if (param_5 != 10) {\n      param_8 = (char *)FUN_00404af0(&DAT_0040f775,param_5);\n      param_9 = (char *)FUN_00404af0(&DAT_00411007);\n    }\n    uVar15 = 0;\n    if (uVar18 == 0) {\n      cVar14 = *param_8;\n      while (cVar14 != '\\0') {\n        if (uVar15 < param_2) {\n          param_1[uVar15] = cVar14;\n        }\n        uVar15 = uVar15 + 1;\n        cVar14 = param_8[uVar15];\n      }\n    }\n    local_a0 = strlen(param_9);\n    bVar2 = true;\n    bVar3 = false;\n    local_78 = param_9;\n    local_5b = false;\n    local_70 = 0;\n    bVar6 = true;\n    break;\n  default:\n                    /* WARNING: Subroutine does not return */\n    abort();\n  }\nLAB_00404c88:\n  uVar22 = 0;\n  bVar5 = local_5b;\nLAB_00404c98:\n  bVar23 = param_4 != uVar22;\n  if (param_4 == 0xffffffffffffffff) {\n    bVar23 = param_3[uVar22] != '\\0';\n  }\n  bVar26 = bVar6;\n  if (!bVar23) goto LAB_00405418;\n  bVar20 = (bool)(param_5 != 2 & bVar6);\n  __s1 = (byte *)(param_3 + uVar22);\n  uVar16 = uVar15;\n  bVar4 = bVar3;\n  if (bVar20) {\n    if (local_a0 == 0) {\nLAB_00405390:\n      uVar19 = (ulong)*__s1;\n      switch(uVar19) {\n      case 0:\n        goto switchD_004053a2_caseD_0;\n      default:\n        bVar20 = false;\n        goto switchD_0040520e_caseD_1;\n      case 7:\n        bVar17 = 0x61;\n        goto LAB_004050a5;\n      case 8:\n        bVar17 = 0x62;\n        break;\n      case 9:\nswitchD_004053a2_caseD_9:\n        bVar17 = 0x74;\n        break;\n      case 10:\nswitchD_004053a2_caseD_a:\n        bVar17 = 0x6e;\n        break;\n      case 0xb:\nswitchD_004053a2_caseD_b:\n        bVar17 = 0x76;\n        goto LAB_004050a5;\n      case 0xc:\nswitchD_004053a2_caseD_c:\n        bVar17 = 0x66;\nLAB_004050a5:\n        if (local_5c) {\n          bVar25 = false;\n          goto LAB_00404ff8;\n        }\nLAB_004050b0:\n        bVar23 = false;\n        goto LAB_00404e6b;\n      case 0xd:\n        bVar20 = false;\nswitchD_00404d88_caseD_d:\n        bVar25 = param_5 == 2;\n        uVar19 = 0xd;\n        bVar13 = 0x72;\n        goto LAB_00404fc0;\n      case 0x20:\n        bVar25 = false;\nLAB_004053ea:\n        uVar19 = 0x20;\n        goto LAB_004053b2;\n      case 0x21:\n      case 0x22:\n      case 0x24:\n      case 0x26:\n      case 0x28:\n      case 0x29:\n      case 0x2a:\n      case 0x3b:\n      case 0x3c:\n      case 0x3d:\n      case 0x3e:\n      case 0x5b:\n      case 0x5e:\n      case 0x60:\n      case 0x7c:\n        bVar20 = false;\nswitchD_00404d88_caseD_21:\n        bVar25 = false;\n        goto LAB_00404fcb;\n      case 0x23:\n      case 0x7e:\n        bVar26 = false;\nLAB_004053ca:\n        if (uVar22 == 0) {\n          bVar25 = false;\n          bVar23 = bVar20;\n          bVar20 = bVar26;\n          goto LAB_00404dd8;\n        }\n        bVar23 = false;\n        goto LAB_00404def;\n      case 0x25:\n      case 0x2b:\n      case 0x2c:\n      case 0x2d:\n      case 0x2e:\n      case 0x2f:\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x3a:\n      case 0x41:\n      case 0x42:\n      case 0x43:\n      case 0x44:\n      case 0x45:\n      case 0x46:\n      case 0x47:\n      case 0x48:\n      case 0x49:\n      case 0x4a:\n      case 0x4b:\n      case 0x4c:\n      case 0x4d:\n      case 0x4e:\n      case 0x4f:\n      case 0x50:\n      case 0x51:\n      case 0x52:\n      case 0x53:\n      case 0x54:\n      case 0x55:\n      case 0x56:\n      case 0x57:\n      case 0x58:\n      case 0x59:\n      case 0x5a:\n      case 0x5d:\n      case 0x5f:\n      case 0x61:\n      case 0x62:\n      case 99:\n      case 100:\n      case 0x65:\n      case 0x66:\n      case 0x67:\n      case 0x68:\n      case 0x69:\n      case 0x6a:\n      case 0x6b:\n      case 0x6c:\n      case 0x6d:\n      case 0x6e:\n      case 0x6f:\n      case 0x70:\n      case 0x71:\n      case 0x72:\n      case 0x73:\n      case 0x74:\n      case 0x75:\n      case 0x76:\n      case 0x77:\n      case 0x78:\n      case 0x79:\n      case 0x7a:\n        bVar25 = false;\nLAB_004053b2:\n        bVar24 = false;\n        bVar23 = bVar20;\n        bVar20 = bVar25;\n        goto LAB_00404df1;\n      case 0x27:\n        bVar20 = false;\n        goto switchD_0040520e_caseD_27;\n      case 0x3f:\n        bVar20 = false;\n        goto switchD_0040520e_caseD_3f;\n      case 0x5c:\n        bVar20 = false;\n        goto switchD_00404d88_caseD_5c;\n      case 0x7b:\n      case 0x7d:\n        bVar20 = false;\n        goto switchD_0040520e_caseD_7b;\n      }\n      bVar25 = false;\n      bVar23 = false;\n      goto joined_r0x00404fe7;\n    }\n    if ((param_4 == 0xffffffffffffffff) && (1 < local_a0)) {\n      param_4 = strlen(param_3);\n    }\n    if ((param_4 < uVar22 + local_a0) || (iVar7 = memcmp(__s1,local_78,local_a0), iVar7 != 0))\n    goto LAB_00405390;\n    if (!local_5c) {\n      uVar19 = (ulong)*__s1;\n      bVar25 = bVar20;\n      switch(uVar19) {\n      case 0:\n        goto switchD_00404d88_caseD_0;\n      default:\n        goto switchD_0040520e_caseD_1;\n      case 7:\n        bVar17 = 0x61;\n        goto LAB_004050b0;\n      case 8:\n        bVar25 = false;\n        bVar23 = false;\n        bVar17 = 0x62;\n        break;\n      case 9:\n        goto switchD_004053a2_caseD_9;\n      case 10:\n        goto switchD_004053a2_caseD_a;\n      case 0xb:\n        goto switchD_004053a2_caseD_b;\n      case 0xc:\n        goto switchD_004053a2_caseD_c;\n      case 0xd:\n        goto switchD_00404d88_caseD_d;\n      case 0x20:\n        goto LAB_004053ea;\n      case 0x21:\n      case 0x22:\n      case 0x24:\n      case 0x26:\n      case 0x28:\n      case 0x29:\n      case 0x2a:\n      case 0x3b:\n      case 0x3c:\n      case 0x3d:\n      case 0x3e:\n      case 0x5b:\n      case 0x5e:\n      case 0x60:\n      case 0x7c:\n        goto switchD_00404d88_caseD_21;\n      case 0x23:\n      case 0x7e:\n        bVar26 = bVar20;\n        goto LAB_004053ca;\n      case 0x25:\n      case 0x2b:\n      case 0x2c:\n      case 0x2d:\n      case 0x2e:\n      case 0x2f:\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x3a:\n      case 0x41:\n      case 0x42:\n      case 0x43:\n      case 0x44:\n      case 0x45:\n      case 0x46:\n      case 0x47:\n      case 0x48:\n      case 0x49:\n      case 0x4a:\n      case 0x4b:\n      case 0x4c:\n      case 0x4d:\n      case 0x4e:\n      case 0x4f:\n      case 0x50:\n      case 0x51:\n      case 0x52:\n      case 0x53:\n      case 0x54:\n      case 0x55:\n      case 0x56:\n      case 0x57:\n      case 0x58:\n      case 0x59:\n      case 0x5a:\n      case 0x5d:\n      case 0x5f:\n      case 0x61:\n      case 0x62:\n      case 99:\n      case 100:\n      case 0x65:\n      case 0x66:\n      case 0x67:\n      case 0x68:\n      case 0x69:\n      case 0x6a:\n      case 0x6b:\n      case 0x6c:\n      case 0x6d:\n      case 0x6e:\n      case 0x6f:\n      case 0x70:\n      case 0x71:\n      case 0x72:\n      case 0x73:\n      case 0x74:\n      case 0x75:\n      case 0x76:\n      case 0x77:\n      case 0x78:\n      case 0x79:\n      case 0x7a:\n        goto LAB_004053b2;\n      case 0x27:\n        goto switchD_0040520e_caseD_27;\n      case 0x3f:\n        goto switchD_0040520e_caseD_3f;\n      case 0x5c:\n        goto switchD_00404d88_caseD_5c;\n      case 0x7b:\n      case 0x7d:\n        goto switchD_0040520e_caseD_7b;\n      }\n      goto LAB_00404e32;\n    }\n    goto LAB_0040500a;\n  }\n  uVar19 = (ulong)*__s1;\n  switch(uVar19) {\n  case 0:\n    if (bVar6) {\nswitchD_004053a2_caseD_0:\n      if (!local_5c) {\n        bVar20 = false;\nswitchD_00404d88_caseD_0:\n        bVar26 = param_5 == 2;\n        bVar24 = (bool)((bVar3 ^ 1U) & bVar26);\n        if (bVar24) {\n          if (uVar15 < uVar9) {\n            param_1[uVar15] = 0x27;\n          }\n          if (uVar15 + 1 < uVar9) {\n            param_1[uVar15 + 1] = 0x24;\n          }\n          if (uVar15 + 2 < uVar9) {\n            param_1[uVar15 + 2] = 0x27;\n          }\n          uVar16 = uVar15 + 3;\n          bVar3 = bVar24;\n          if (uVar9 <= uVar15 + 3) {\n            uVar16 = uVar15 + 4;\n            bVar23 = false;\n            bVar17 = 0x30;\n            bVar4 = bVar24;\n            goto LAB_00404ee8;\n          }\nLAB_0040512a:\n          param_1[uVar16] = 0x5c;\n          uVar15 = uVar16;\n        }\n        else if (uVar15 < uVar9) goto LAB_0040512a;\n        uVar16 = uVar15 + 1;\n        bVar24 = bVar23;\n        if (param_5 == 2) {\n          bVar17 = 0x30;\n          bVar23 = false;\n          bVar4 = bVar3;\n          goto LAB_00404ee8;\n        }\n        uVar19 = 0x30;\n        if ((uVar22 + 1 < param_4) && ((byte)(param_3[uVar22 + 1] - 0x30U) < 10)) {\n          if (uVar16 < uVar9) {\n            param_1[uVar16] = 0x30;\n          }\n          if (uVar15 + 2 < uVar9) {\n            param_1[uVar15 + 2] = 0x30;\n          }\n          uVar16 = uVar15 + 3;\n          uVar19 = 0x30;\n        }\nLAB_00405169:\n        bVar17 = (byte)uVar19;\n        bVar23 = false;\n        uVar15 = uVar16;\n        bVar4 = bVar3;\n        if ((bool)(bVar6 ^ 1U | bVar26)) goto LAB_00404ee8;\n        goto LAB_00404df1;\n      }\n      bVar26 = param_5 == 2;\n      goto LAB_00404ffc;\n    }\n    if ((param_6 & 1) == 0) {\n      bVar25 = param_5 == 2;\n      uVar19 = 0;\n      bVar23 = false;\n      bVar20 = false;\n      goto LAB_00404dd8;\n    }\n    uVar22 = uVar22 + 1;\n    goto LAB_00404c98;\n  default:\nswitchD_0040520e_caseD_1:\n    bVar25 = bVar6;\n    if (sVar8 != 1) {\n      local_40[0] = (mbstate_t)0x0;\n      if (param_4 == 0xffffffffffffffff) {\n        param_4 = strlen(param_3);\n      }\n      uVar21 = 0;\n      do {\n        uVar1 = uVar22 + uVar21;\n        lVar11 = FUN_00408a60(&local_44,param_3 + uVar1,param_4 - uVar1,local_40);\n        if (lVar11 == 0) break;\n        if (lVar11 == -1) {\n          bVar23 = false;\n          goto LAB_00405b1a;\n        }\n        if (lVar11 == -2) {\n          if ((param_4 <= uVar1) || (param_3[uVar1] == '\\0')) goto LAB_00405c57;\n          goto LAB_00405c47;\n        }\n        if (((param_5 == 2) && (local_5c)) && (lVar11 != 1)) {\n          pcVar12 = param_3 + uVar1 + 1;\n          do {\n            if (((byte)(*pcVar12 + 0xa5U) < 0x22) &&\n               ((1L << (*pcVar12 + 0xa5U & 0x3f) & 0x20000002bU) != 0)) {\n              param_5 = 2;\n              goto LAB_00404ffc;\n            }\n            pcVar12 = pcVar12 + 1;\n          } while (param_3 + uVar1 + lVar11 != pcVar12);\n        }\n        iVar7 = iswprint(local_44);\n        if (iVar7 == 0) {\n          bVar23 = false;\n        }\n        uVar21 = uVar21 + lVar11;\n        iVar7 = mbsinit(local_40);\n      } while (iVar7 == 0);\n      bVar25 = (bool)((bVar23 ^ 1U) & bVar6);\n      goto LAB_00405b1a;\n    }\n    ppuVar10 = __ctype_b_loc();\n    uVar21 = 1;\n    bVar25 = ((*ppuVar10)[uVar19] & 0x4000) == 0;\n    bVar23 = !bVar25;\n    bVar25 = (bool)(bVar25 & bVar6);\n    goto LAB_004051e4;\n  case 7:\n    bVar25 = param_5 == 2;\n    uVar19 = 7;\n    bVar13 = 0x61;\n    break;\n  case 8:\n    bVar25 = param_5 == 2;\n    uVar19 = 8;\n    bVar13 = 0x62;\n    break;\n  case 9:\n    uVar19 = 9;\n    bVar13 = 0x74;\n    goto LAB_00405222;\n  case 10:\n    uVar19 = 10;\n    bVar13 = 0x6e;\n    goto LAB_00405222;\n  case 0xb:\n    bVar25 = param_5 == 2;\n    uVar19 = 0xb;\n    bVar13 = 0x76;\n    break;\n  case 0xc:\n    bVar25 = param_5 == 2;\n    uVar19 = 0xc;\n    bVar13 = 0x66;\n    break;\n  case 0xd:\n    uVar19 = 0xd;\n    bVar13 = 0x72;\nLAB_00405222:\n    bVar25 = param_5 == 2;\n    bVar20 = (bool)(local_5c & bVar25);\n    if (bVar20) {\nLAB_0040523a:\n      param_5 = 2;\n      goto LAB_00404ffc;\n    }\n    break;\n  case 0x20:\n    uVar19 = 0x20;\n    goto LAB_00404dc6;\n  case 0x21:\n  case 0x22:\n  case 0x24:\n  case 0x26:\n  case 0x28:\n  case 0x29:\n  case 0x2a:\n  case 0x3b:\n  case 0x3c:\n  case 0x3d:\n  case 0x3e:\n  case 0x5b:\n  case 0x5e:\n  case 0x60:\n  case 0x7c:\n    bVar23 = false;\nLAB_00404dc6:\n    bVar25 = param_5 == 2;\n    if ((local_5c) && (bVar25)) goto LAB_0040523a;\n    goto LAB_00404dd8;\n  case 0x23:\n  case 0x7e:\nLAB_00404dbd:\n    bVar25 = param_5 == 2;\n    if (uVar22 == 0) goto LAB_00404dc6;\n    goto LAB_00404fcb;\n  case 0x25:\n  case 0x2b:\n  case 0x2c:\n  case 0x2d:\n  case 0x2e:\n  case 0x2f:\n  case 0x30:\n  case 0x31:\n  case 0x32:\n  case 0x33:\n  case 0x34:\n  case 0x35:\n  case 0x36:\n  case 0x37:\n  case 0x38:\n  case 0x39:\n  case 0x3a:\n  case 0x41:\n  case 0x42:\n  case 0x43:\n  case 0x44:\n  case 0x45:\n  case 0x46:\n  case 0x47:\n  case 0x48:\n  case 0x49:\n  case 0x4a:\n  case 0x4b:\n  case 0x4c:\n  case 0x4d:\n  case 0x4e:\n  case 0x4f:\n  case 0x50:\n  case 0x51:\n  case 0x52:\n  case 0x53:\n  case 0x54:\n  case 0x55:\n  case 0x56:\n  case 0x57:\n  case 0x58:\n  case 0x59:\n  case 0x5a:\n  case 0x5d:\n  case 0x5f:\n  case 0x61:\n  case 0x62:\n  case 99:\n  case 100:\n  case 0x65:\n  case 0x66:\n  case 0x67:\n  case 0x68:\n  case 0x69:\n  case 0x6a:\n  case 0x6b:\n  case 0x6c:\n  case 0x6d:\n  case 0x6e:\n  case 0x6f:\n  case 0x70:\n  case 0x71:\n  case 0x72:\n  case 0x73:\n  case 0x74:\n  case 0x75:\n  case 0x76:\n  case 0x77:\n  case 0x78:\n  case 0x79:\n  case 0x7a:\n    goto switchD_0040520e_caseD_25;\n  case 0x27:\nswitchD_0040520e_caseD_27:\n    bVar5 = bVar23;\n    if (param_5 != 2) {\n      bVar25 = false;\n      uVar19 = 0x27;\n      goto LAB_00404dd8;\n    }\n    if (!local_5c) {\n      if ((uVar9 == 0) || (uVar19 = 0, uVar21 = uVar9, local_70 != 0)) {\n        if (uVar15 < uVar9) {\n          param_1[uVar15] = 0x27;\n        }\n        if (uVar15 + 1 < uVar9) {\n          param_1[uVar15 + 1] = 0x5c;\n        }\n        uVar19 = uVar9;\n        uVar21 = local_70;\n        if (uVar15 + 2 < uVar9) {\n          param_1[uVar15 + 2] = 0x27;\n        }\n      }\n      uVar16 = uVar15 + 3;\n      bVar17 = 0x27;\n      uVar9 = uVar19;\n      local_70 = uVar21;\n      bVar24 = false;\n      bVar4 = false;\n      goto LAB_00404ee8;\n    }\n    goto LAB_00404ffc;\n  case 0x3f:\nswitchD_0040520e_caseD_3f:\n    if (param_5 == 2) {\n      if (!local_5c) {\n        bVar17 = 0x3f;\n        bVar24 = false;\n        bVar23 = false;\n        goto LAB_00404ee8;\n      }\n      goto LAB_00404ffc;\n    }\n    if (param_5 != 5) {\n      bVar25 = param_5 == 2;\n      uVar19 = 0x3f;\n      bVar23 = false;\n      goto LAB_00404dd8;\n    }\n    if (((((param_6 & 4) != 0) && (uVar21 = uVar22 + 2, uVar21 < param_4)) &&\n        (param_3[uVar22 + 1] == '?')) &&\n       ((uVar19 = (ulong)(byte)param_3[uVar21], (byte)param_3[uVar21] < 0x3f &&\n        ((0x7000a38200000000U >> (uVar19 & 0x3f) & 1) != 0)))) {\n      if (!local_5c) {\n        if (uVar15 < uVar9) {\n          param_1[uVar15] = 0x3f;\n        }\n        if (uVar15 + 1 < uVar9) {\n          param_1[uVar15 + 1] = 0x22;\n        }\n        if (uVar15 + 2 < uVar9) {\n          param_1[uVar15 + 2] = 0x22;\n        }\n        if (uVar15 + 3 < uVar9) {\n          param_1[uVar15 + 3] = 0x3f;\n        }\n        uVar16 = uVar15 + 4;\n        bVar26 = false;\n        uVar22 = uVar21;\n        bVar24 = false;\n        goto LAB_00405169;\n      }\n      goto LAB_0040500a;\n    }\n    bVar25 = false;\n    uVar19 = 0x3f;\n    bVar23 = false;\n    goto LAB_00404dd8;\n  case 0x5c:\n    if (param_5 != 2) {\nswitchD_00404d88_caseD_5c:\n      uVar19 = 0x5c;\n      bVar17 = 0x5c;\n      bVar13 = 0x5c;\n      bVar25 = (bool)(bVar6 & local_5c & local_a0 != 0);\n      if (!bVar25) break;\n      uVar22 = uVar22 + 1;\n      bVar23 = false;\n      goto LAB_00404f04;\n    }\n    if (local_5c) goto LAB_00404ffc;\n    uVar22 = uVar22 + 1;\n    bVar23 = false;\n    bVar17 = 0x5c;\n    goto LAB_00404f04;\n  case 0x7b:\n  case 0x7d:\nswitchD_0040520e_caseD_7b:\n    bVar24 = param_4 != 1;\n    if (param_4 == 0xffffffffffffffff) {\n      bVar24 = param_3[1] != '\\0';\n    }\n    bVar25 = param_5 == 2;\n    if (!bVar24) goto LAB_00404dbd;\n    goto LAB_00404fcb;\n  }\nLAB_00404fc0:\n  if (!bVar6) {\nLAB_00404fcb:\n    bVar23 = false;\n    goto LAB_00404dd8;\n  }\n  bVar23 = false;\n  bVar17 = bVar13;\n  goto joined_r0x00404fe7;\nLAB_00405418:\n  if ((uVar15 == 0) && ((bool)(local_5c & param_5 == 2))) {\n    param_5 = 2;\nLAB_00404ffc:\n    if (bVar26) {\n      param_5 = 4;\n    }\nLAB_0040500a:\n    uVar9 = FUN_00404bf0(param_1,uVar9,param_3,param_4,param_5,param_6 & 0xfffffffd,0,param_8,\n                         param_9);\n    return uVar9;\n  }\n  bVar26 = (bool)(param_5 == 2 & (local_5c ^ 1U));\n  bVar23 = (bool)(local_5c ^ 1U);\n  if ((!bVar26) || (bVar23 = bVar26, !bVar5)) {\nLAB_00405ced:\n    uVar22 = uVar15;\n    if (((local_78 != (char *)0x0) && (bVar23)) && (cVar14 = *local_78, cVar14 != '\\0')) {\n      do {\n        if (uVar22 < uVar9) {\n          param_1[uVar22] = cVar14;\n        }\n        uVar22 = uVar22 + 1;\n        cVar14 = local_78[uVar22 - uVar15];\n      } while (cVar14 != '\\0');\n    }\n    if (uVar22 < uVar9) {\n      param_1[uVar22] = 0;\n    }\n    return uVar22;\n  }\n  if (bVar2) {\n    uVar9 = FUN_00404bf0(param_1,local_70,param_3,param_4,5,param_6,param_7,param_8,param_9);\n    return uVar9;\n  }\n  local_5b = uVar9 == 0 && local_70 != 0;\n  param_2 = local_70;\n  bVar23 = bVar5;\n  if (uVar9 != 0 || local_70 == 0) goto LAB_00405ced;\nLAB_00405476:\n  *param_1 = 0x27;\n  param_5 = 2;\n  uVar15 = 1;\n  local_78 = \"\\'\";\n  local_a0 = 1;\n  local_5c = false;\n  uVar9 = param_2;\n  goto LAB_00404c88;\n  while (__s1[uVar21] != 0) {\nLAB_00405c47:\n    uVar21 = uVar21 + 1;\n    if (param_4 <= uVar22 + uVar21) break;\n  }\nLAB_00405c57:\n  bVar23 = false;\nLAB_00405b1a:\n  if (1 < uVar21) {\nLAB_004056de:\n    bVar26 = false;\n    uVar21 = uVar21 + uVar22;\n    uVar16 = uVar22;\n    do {\n      bVar17 = (byte)uVar19;\n      if (bVar25) {\n        bVar26 = param_5 == 2;\n        if (local_5c) goto LAB_00404ffc;\n        bVar26 = (bool)(bVar26 & (bVar4 ^ 1U));\n        if (bVar26) {\n          if (uVar15 < uVar9) {\n            param_1[uVar15] = 0x27;\n          }\n          if (uVar15 + 1 < uVar9) {\n            param_1[uVar15 + 1] = 0x24;\n          }\n          if (uVar15 + 2 < uVar9) {\n            param_1[uVar15 + 2] = 0x27;\n          }\n          uVar15 = uVar15 + 3;\n          bVar4 = bVar26;\n        }\n        if (uVar15 < uVar9) {\n          param_1[uVar15] = 0x5c;\n        }\n        if (uVar15 + 1 < uVar9) {\n          param_1[uVar15 + 1] = (char)(uVar19 >> 6) + '0';\n        }\n        if (uVar15 + 2 < uVar9) {\n          param_1[uVar15 + 2] = ((byte)(uVar19 >> 3) & 7) + 0x30;\n        }\n        uVar22 = uVar16 + 1;\n        uVar15 = uVar15 + 3;\n        bVar17 = (bVar17 & 7) + 0x30;\n        bVar26 = bVar25;\n        if (uVar21 <= uVar22) goto LAB_00404e7d;\n      }\n      else {\n        bVar3 = (bool)((bVar26 ^ 1U) & bVar4);\n        if (bVar20) {\n          if (uVar15 < uVar9) {\n            param_1[uVar15] = 0x5c;\n          }\n          uVar15 = uVar15 + 1;\n        }\n        uVar22 = uVar16 + 1;\n        if (uVar21 <= uVar22) goto LAB_00404f04;\n        if (bVar3) {\n          if (uVar15 < uVar9) {\n            param_1[uVar15] = 0x27;\n          }\n          if (uVar15 + 1 < uVar9) {\n            param_1[uVar15 + 1] = 0x27;\n          }\n          uVar15 = uVar15 + 2;\n          bVar20 = false;\n          bVar4 = false;\n        }\n        else {\n          bVar20 = false;\n        }\n      }\n      uVar16 = uVar16 + 1;\n      if (uVar15 < uVar9) {\n        param_1[uVar15] = bVar17;\n      }\n      uVar19 = (ulong)(byte)param_3[uVar16];\n      uVar15 = uVar15 + 1;\n    } while( true );\n  }\nLAB_004051e4:\n  if (bVar25) {\n    bVar23 = false;\n    bVar25 = bVar6;\n    goto LAB_004056de;\n  }\nswitchD_0040520e_caseD_25:\n  bVar25 = param_5 == 2;\nLAB_00404dd8:\n  bVar17 = (byte)uVar19;\n  bVar24 = (bool)((bVar6 ^ 1U | bVar25) ^ 1 | local_5c);\n  bVar26 = bVar20;\n  if (bVar24) {\nLAB_00404def:\n    bVar24 = false;\n    bVar20 = bVar26;\nLAB_00404df1:\n    bVar17 = (byte)uVar19;\n    uVar16 = uVar15;\n    bVar4 = bVar3;\n    if ((param_7 == 0) || ((*(uint *)(param_7 + (uVar19 >> 5) * 4) >> (bVar17 & 0x1f) & 1) == 0))\n    goto LAB_00404ee8;\n    bVar25 = param_5 == 2;\n  }\n  else {\nLAB_00404ee8:\n    bVar25 = param_5 == 2;\n    uVar15 = uVar16;\n    bVar3 = bVar4;\n    if (!bVar20) {\n      uVar22 = uVar22 + 1;\n      bVar3 = (bool)((bVar24 ^ 1U) & bVar4);\nLAB_00404f04:\n      if (bVar3) {\n        if (uVar15 < uVar9) {\n          param_1[uVar15] = 0x27;\n        }\n        if (uVar15 + 1 < uVar9) {\n          param_1[uVar15 + 1] = 0x27;\n        }\n        uVar15 = uVar15 + 2;\n        bVar4 = false;\n      }\n      goto LAB_00404e7d;\n    }\n  }\njoined_r0x00404fe7:\n  if (local_5c) {\nLAB_00404ff8:\n    bVar26 = (bool)(bVar6 & bVar25);\n    goto LAB_00404ffc;\n  }\nLAB_00404e32:\n  bVar25 = (bool)((bVar3 ^ 1U) & bVar25);\n  if (bVar25) {\n    if (uVar15 < uVar9) {\n      param_1[uVar15] = 0x27;\n    }\n    if (uVar15 + 1 < uVar9) {\n      param_1[uVar15 + 1] = 0x24;\n    }\n    if (uVar15 + 2 < uVar9) {\n      param_1[uVar15 + 2] = 0x27;\n    }\n    uVar15 = uVar15 + 3;\n    bVar3 = bVar25;\n  }\nLAB_00404e6b:\n  if (uVar15 < uVar9) {\n    param_1[uVar15] = 0x5c;\n  }\n  uVar15 = uVar15 + 1;\n  uVar22 = uVar22 + 1;\n  bVar4 = bVar3;\nLAB_00404e7d:\n  bVar3 = bVar4;\n  if (uVar15 < uVar9) {\n    param_1[uVar15] = bVar17;\n  }\n  uVar15 = uVar15 + 1;\n  if (!bVar23) {\n    bVar2 = false;\n  }\n  goto LAB_00404c98;\n}\n\n",
            "funcName": "FUN_00404bf0"
        },
        {
            "funcStartAddr": "0x405e20",
            "funcEndAddr": "0x405fbb",
            "decompiledFuncCode": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nundefined * FUN_00405e20(int param_1,undefined8 param_2,undefined8 param_3,undefined4 *param_4)\n\n{\n  int iVar1;\n  uint uVar2;\n  undefined4 uVar3;\n  ulong uVar4;\n  undefined4 uVar5;\n  undefined4 uVar6;\n  int *piVar7;\n  undefined4 *puVar8;\n  ulong uVar9;\n  undefined *__ptr;\n  ulong *puVar10;\n  \n  piVar7 = __errno_location();\n  iVar1 = *piVar7;\n  if (param_1 < 0) {\n                    /* WARNING: Subroutine does not return */\n    abort();\n  }\n  puVar8 = (undefined4 *)PTR_DAT_00613298;\n  if (DAT_006132b0 <= param_1) {\n    if (param_1 == 0x7fffffff) {\n                    /* WARNING: Subroutine does not return */\n      FUN_00406e80();\n    }\n    if (PTR_DAT_00613298 == &DAT_006132a0) {\n      puVar8 = (undefined4 *)FUN_00406c90(0);\n      uVar6 = PTR_DAT_006132a8._4_4_;\n      uVar5 = PTR_DAT_006132a8._0_4_;\n      uVar3 = _UNK_006132a4;\n      PTR_DAT_00613298 = (undefined *)puVar8;\n      *puVar8 = _DAT_006132a0;\n      puVar8[1] = uVar3;\n      puVar8[2] = uVar5;\n      puVar8[3] = uVar6;\n    }\n    else {\n      puVar8 = (undefined4 *)FUN_00406c90(PTR_DAT_00613298);\n      PTR_DAT_00613298 = (undefined *)puVar8;\n    }\n    memset(puVar8 + (long)DAT_006132b0 * 4,0,(long)((param_1 + 1) - DAT_006132b0) << 4);\n    DAT_006132b0 = param_1 + 1;\n  }\n  uVar2 = param_4[1];\n  puVar10 = (ulong *)(puVar8 + (long)param_1 * 4);\n  uVar4 = *puVar10;\n  __ptr = (undefined *)puVar10[1];\n  uVar9 = FUN_00404bf0(__ptr,uVar4,param_2,param_3,*param_4,uVar2 | 1,param_4 + 2,\n                       *(undefined8 *)(param_4 + 10),*(undefined8 *)(param_4 + 0xc));\n  if (uVar4 <= uVar9) {\n    uVar9 = uVar9 + 1;\n    *puVar10 = uVar9;\n    if (__ptr != &DAT_00613400) {\n      free(__ptr);\n    }\n    __ptr = (undefined *)FUN_00406c30(uVar9);\n    uVar3 = *param_4;\n    puVar10[1] = (ulong)__ptr;\n    FUN_00404bf0(__ptr,uVar9,param_2,param_3,uVar3,uVar2 | 1,param_4 + 2,\n                 *(undefined8 *)(param_4 + 10),*(undefined8 *)(param_4 + 0xc));\n  }\n  *piVar7 = iVar1;\n  return __ptr;\n}\n\n",
            "funcName": "FUN_00405e20"
        },
        {
            "funcStartAddr": "0x405fc0",
            "funcEndAddr": "0x405ff4",
            "decompiledFuncCode": "\nvoid FUN_00405fc0(undefined *param_1)\n\n{\n  int iVar1;\n  int *piVar2;\n  \n  piVar2 = __errno_location();\n  iVar1 = *piVar2;\n  if (param_1 == (undefined *)0x0) {\n    param_1 = &DAT_00613500;\n  }\n  FUN_00406e30(param_1,0x38);\n  *piVar2 = iVar1;\n  return;\n}\n\n",
            "funcName": "FUN_00405fc0"
        },
        {
            "funcStartAddr": "0x406000",
            "funcEndAddr": "0x40600f",
            "decompiledFuncCode": "\nundefined4 FUN_00406000(undefined4 *param_1)\n\n{\n  if (param_1 == (undefined4 *)0x0) {\n    param_1 = (undefined4 *)&DAT_00613500;\n  }\n  return *param_1;\n}\n\n",
            "funcName": "FUN_00406000"
        },
        {
            "funcStartAddr": "0x406010",
            "funcEndAddr": "0x40601f",
            "decompiledFuncCode": "\nvoid FUN_00406010(undefined4 *param_1,undefined4 param_2)\n\n{\n  if (param_1 == (undefined4 *)0x0) {\n    param_1 = (undefined4 *)&DAT_00613500;\n  }\n  *param_1 = param_2;\n  return;\n}\n\n",
            "funcName": "FUN_00406010"
        },
        {
            "funcStartAddr": "0x406020",
            "funcEndAddr": "0x406053",
            "decompiledFuncCode": "\nuint FUN_00406020(undefined *param_1,byte param_2,uint param_3)\n\n{\n  uint uVar1;\n  uint uVar2;\n  \n  if (param_1 == (undefined *)0x0) {\n    param_1 = &DAT_00613500;\n  }\n  uVar1 = *(uint *)(param_1 + (ulong)(param_2 >> 5) * 4 + 8);\n  uVar2 = uVar1 >> (param_2 & 0x1f);\n  *(uint *)(param_1 + (ulong)(param_2 >> 5) * 4 + 8) =\n       ((param_3 ^ uVar2) & 1) << (param_2 & 0x1f) ^ uVar1;\n  return uVar2 & 1;\n}\n\n",
            "funcName": "FUN_00406020"
        },
        {
            "funcStartAddr": "0x406060",
            "funcEndAddr": "0x406073",
            "decompiledFuncCode": "\nundefined4 FUN_00406060(undefined *param_1,undefined4 param_2)\n\n{\n  undefined4 uVar1;\n  \n  if (param_1 == (undefined *)0x0) {\n    param_1 = &DAT_00613500;\n  }\n  uVar1 = *(undefined4 *)(param_1 + 4);\n  *(undefined4 *)(param_1 + 4) = param_2;\n  return uVar1;\n}\n\n",
            "funcName": "FUN_00406060"
        },
        {
            "funcStartAddr": "0x406080",
            "funcEndAddr": "0x4060ab",
            "decompiledFuncCode": "\nvoid FUN_00406080(undefined4 *param_1,long param_2,long param_3)\n\n{\n  if (param_1 == (undefined4 *)0x0) {\n    param_1 = (undefined4 *)&DAT_00613500;\n  }\n  *param_1 = 10;\n  if ((param_2 != 0) && (param_3 != 0)) {\n    *(long *)(param_1 + 10) = param_2;\n    *(long *)(param_1 + 0xc) = param_3;\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n",
            "funcName": "FUN_00406080"
        },
        {
            "funcStartAddr": "0x4060b0",
            "funcEndAddr": "0x406122",
            "decompiledFuncCode": "\nvoid FUN_004060b0(undefined8 param_1,undefined8 param_2,undefined8 param_3,undefined8 param_4,\n                 undefined4 *param_5)\n\n{\n  int iVar1;\n  int *piVar2;\n  \n  if (param_5 == (undefined4 *)0x0) {\n    param_5 = (undefined4 *)&DAT_00613500;\n  }\n  piVar2 = __errno_location();\n  iVar1 = *piVar2;\n  FUN_00404bf0(param_1,param_2,param_3,param_4,*param_5,param_5[1],param_5 + 2,\n               *(undefined8 *)(param_5 + 10),*(undefined8 *)(param_5 + 0xc));\n  *piVar2 = iVar1;\n  return;\n}\n\n",
            "funcName": "FUN_004060b0"
        },
        {
            "funcStartAddr": "0x406130",
            "funcEndAddr": "0x406211",
            "decompiledFuncCode": "\nundefined8 FUN_00406130(undefined8 param_1,undefined8 param_2,long *param_3,undefined4 *param_4)\n\n{\n  int iVar1;\n  int *piVar2;\n  long lVar3;\n  undefined8 uVar4;\n  uint uVar5;\n  \n  if (param_4 == (undefined4 *)0x0) {\n    param_4 = (undefined4 *)&DAT_00613500;\n  }\n  piVar2 = __errno_location();\n  iVar1 = *piVar2;\n  uVar5 = (uint)(param_3 == (long *)0x0) | param_4[1];\n  lVar3 = FUN_00404bf0(0,0,param_1,param_2,*param_4,uVar5,param_4 + 2,*(undefined8 *)(param_4 + 10),\n                       *(undefined8 *)(param_4 + 0xc));\n  uVar4 = FUN_00406c30(lVar3 + 1);\n  FUN_00404bf0(uVar4,lVar3 + 1,param_1,param_2,*param_4,uVar5,param_4 + 2,\n               *(undefined8 *)(param_4 + 10),*(undefined8 *)(param_4 + 0xc));\n  *piVar2 = iVar1;\n  if (param_3 != (long *)0x0) {\n    *param_3 = lVar3;\n  }\n  return uVar4;\n}\n\n",
            "funcName": "FUN_00406130"
        },
        {
            "funcStartAddr": "0x406220",
            "funcEndAddr": "0x40622a",
            "decompiledFuncCode": "\nvoid FUN_00406220(undefined8 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  FUN_00406130(param_1,param_2,0,param_3);\n  return;\n}\n\n",
            "funcName": "FUN_00406220"
        },
        {
            "funcStartAddr": "0x406230",
            "funcEndAddr": "0x4062c5",
            "decompiledFuncCode": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nvoid FUN_00406230(void)\n\n{\n  void **ppvVar1;\n  void *__ptr;\n  undefined *__ptr_00;\n  void **ppvVar2;\n  \n  __ptr_00 = PTR_DAT_00613298;\n  if (1 < DAT_006132b0) {\n    ppvVar2 = (void **)(PTR_DAT_00613298 + 0x18);\n    ppvVar1 = (void **)(PTR_DAT_00613298 + (ulong)(DAT_006132b0 - 2) * 0x10 + 0x28);\n    do {\n      __ptr = *ppvVar2;\n      ppvVar2 = ppvVar2 + 2;\n      free(__ptr);\n    } while (ppvVar2 != ppvVar1);\n  }\n  if (*(undefined **)(__ptr_00 + 8) != &DAT_00613400) {\n    free(*(undefined **)(__ptr_00 + 8));\n    _DAT_006132a0 = 0x100;\n    PTR_DAT_006132a8 = &DAT_00613400;\n  }\n  if (__ptr_00 != &DAT_006132a0) {\n    free(__ptr_00);\n    PTR_DAT_00613298 = &DAT_006132a0;\n  }\n  DAT_006132b0 = 1;\n  return;\n}\n\n",
            "funcName": "FUN_00406230"
        },
        {
            "funcStartAddr": "0x4062d0",
            "funcEndAddr": "0x4062e1",
            "decompiledFuncCode": "\nvoid FUN_004062d0(undefined8 param_1,undefined8 param_2)\n\n{\n  FUN_00405e20(param_1,param_2,0xffffffffffffffff,&DAT_00613500);\n  return;\n}\n\n",
            "funcName": "FUN_004062d0"
        },
        {
            "funcStartAddr": "0x4062f0",
            "funcEndAddr": "0x4062fa",
            "decompiledFuncCode": "\nvoid FUN_004062f0(void)\n\n{\n  FUN_00405e20();\n  return;\n}\n\n",
            "funcName": "FUN_004062f0"
        },
        {
            "funcStartAddr": "0x406300",
            "funcEndAddr": "0x406316",
            "decompiledFuncCode": "\nvoid FUN_00406300(undefined8 param_1)\n\n{\n  FUN_00405e20(0,param_1,0xffffffffffffffff,&DAT_00613500);\n  return;\n}\n\n",
            "funcName": "FUN_00406300"
        },
        {
            "funcStartAddr": "0x406320",
            "funcEndAddr": "0x406332",
            "decompiledFuncCode": "\nvoid FUN_00406320(undefined8 param_1,undefined8 param_2)\n\n{\n  FUN_00405e20(0,param_1,param_2,&DAT_00613500);\n  return;\n}\n\n",
            "funcName": "FUN_00406320"
        },
        {
            "funcStartAddr": "0x406340",
            "funcEndAddr": "0x4063a8",
            "decompiledFuncCode": "\nvoid FUN_00406340(undefined8 param_1,int param_2,undefined8 param_3)\n\n{\n  int local_48;\n  undefined4 local_44;\n  undefined8 local_40;\n  undefined8 local_38;\n  undefined8 local_30;\n  undefined8 local_28;\n  undefined8 local_20;\n  undefined8 local_18;\n  \n  if (param_2 != 10) {\n    local_44 = 0;\n    local_40 = 0;\n    local_38 = 0;\n    local_30 = 0;\n    local_28 = 0;\n    local_20 = 0;\n    local_18 = 0;\n    local_48 = param_2;\n    FUN_00405e20(param_1,param_3,0xffffffffffffffff,&local_48);\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n",
            "funcName": "FUN_00406340"
        },
        {
            "funcStartAddr": "0x4063b0",
            "funcEndAddr": "0x406414",
            "decompiledFuncCode": "\nvoid FUN_004063b0(undefined8 param_1,int param_2,undefined8 param_3,undefined8 param_4)\n\n{\n  int local_48;\n  undefined4 local_44;\n  undefined8 local_40;\n  undefined8 local_38;\n  undefined8 local_30;\n  undefined8 local_28;\n  undefined8 local_20;\n  undefined8 local_18;\n  \n  if (param_2 != 10) {\n    local_44 = 0;\n    local_40 = 0;\n    local_38 = 0;\n    local_30 = 0;\n    local_28 = 0;\n    local_20 = 0;\n    local_18 = 0;\n    local_48 = param_2;\n    FUN_00405e20(param_1,param_3,param_4,&local_48);\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n",
            "funcName": "FUN_004063b0"
        },
        {
            "funcStartAddr": "0x406420",
            "funcEndAddr": "0x40642c",
            "decompiledFuncCode": "\nvoid FUN_00406420(undefined4 param_1,undefined8 param_2)\n\n{\n  FUN_00406340(0,param_1,param_2);\n  return;\n}\n\n",
            "funcName": "FUN_00406420"
        },
        {
            "funcStartAddr": "0x406430",
            "funcEndAddr": "0x40643f",
            "decompiledFuncCode": "\nvoid FUN_00406430(undefined4 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  FUN_004063b0(0,param_1,param_2,param_3);\n  return;\n}\n\n",
            "funcName": "FUN_00406430"
        },
        {
            "funcStartAddr": "0x406440",
            "funcEndAddr": "0x4064b0",
            "decompiledFuncCode": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nvoid FUN_00406440(undefined8 param_1,undefined8 param_2,byte param_3)\n\n{\n  uint *puVar1;\n  uint uVar2;\n  undefined8 local_48;\n  undefined8 uStack_40;\n  undefined8 local_38;\n  undefined8 uStack_30;\n  undefined8 local_28;\n  undefined8 uStack_20;\n  undefined8 local_18;\n  \n  local_18 = DAT_00613530;\n  local_48 = _DAT_00613500;\n  uStack_40 = uRam0000000000613508;\n  local_38 = _DAT_00613510;\n  uStack_30 = uRam0000000000613518;\n  puVar1 = (uint *)((long)&uStack_40 + (ulong)(param_3 >> 5) * 4);\n  local_28 = _DAT_00613520;\n  uStack_20 = uRam0000000000613528;\n  uVar2 = *puVar1;\n  *puVar1 = (~(uVar2 >> (param_3 & 0x1f)) & 1) << (param_3 & 0x1f) ^ uVar2;\n  FUN_00405e20(0,param_1,param_2,&local_48);\n  return;\n}\n\n",
            "funcName": "FUN_00406440"
        },
        {
            "funcStartAddr": "0x4064b0",
            "funcEndAddr": "0x4064bd",
            "decompiledFuncCode": "\nvoid FUN_004064b0(undefined8 param_1,char param_2)\n\n{\n  FUN_00406440(param_1,0xffffffffffffffff,(int)param_2);\n  return;\n}\n\n",
            "funcName": "FUN_004064b0"
        },
        {
            "funcStartAddr": "0x4064c0",
            "funcEndAddr": "0x4064d1",
            "decompiledFuncCode": "\nvoid FUN_004064c0(undefined8 param_1)\n\n{\n  FUN_00406440(param_1,0xffffffffffffffff,0x3a);\n  return;\n}\n\n",
            "funcName": "FUN_004064c0"
        },
        {
            "funcStartAddr": "0x4064e0",
            "funcEndAddr": "0x4064ea",
            "decompiledFuncCode": "\nvoid FUN_004064e0(undefined8 param_1,undefined8 param_2)\n\n{\n  FUN_00406440(param_1,param_2,0x3a);\n  return;\n}\n\n",
            "funcName": "FUN_004064e0"
        },
        {
            "funcStartAddr": "0x4064f0",
            "funcEndAddr": "0x40655e",
            "decompiledFuncCode": "\nvoid FUN_004064f0(undefined8 param_1,int param_2,undefined8 param_3)\n\n{\n  int local_48;\n  undefined4 local_44;\n  undefined8 local_40;\n  undefined8 local_38;\n  undefined8 local_30;\n  undefined8 local_28;\n  undefined8 local_20;\n  undefined8 local_18;\n  \n  if (param_2 != 10) {\n    local_40 = 0x400000000000000;\n    local_44 = 0;\n    local_38 = 0;\n    local_30 = 0;\n    local_28 = 0;\n    local_20 = 0;\n    local_18 = 0;\n    local_48 = param_2;\n    FUN_00405e20(param_1,param_3,0xffffffffffffffff,&local_48);\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n",
            "funcName": "FUN_004064f0"
        },
        {
            "funcStartAddr": "0x406560",
            "funcEndAddr": "0x4065cc",
            "decompiledFuncCode": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nvoid FUN_00406560(undefined8 param_1,long param_2,long param_3,undefined8 param_4,undefined8 param_5\n                 )\n\n{\n  undefined8 local_48;\n  undefined8 uStack_40;\n  undefined8 local_38;\n  undefined8 uStack_30;\n  undefined8 local_28;\n  long lStack_20;\n  long local_18;\n  \n  uStack_40 = uRam0000000000613508;\n  local_38 = _DAT_00613510;\n  uStack_30 = uRam0000000000613518;\n  local_28 = _DAT_00613520;\n  lStack_20 = uRam0000000000613528;\n  local_18 = DAT_00613530;\n  local_48 = CONCAT44((int)((ulong)_DAT_00613500 >> 0x20),10);\n  if ((param_2 != 0) && (param_3 != 0)) {\n    lStack_20 = param_2;\n    local_18 = param_3;\n    FUN_00405e20(param_1,param_4,param_5,&local_48);\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n",
            "funcName": "FUN_00406560"
        },
        {
            "funcStartAddr": "0x4065d0",
            "funcEndAddr": "0x4065d9",
            "decompiledFuncCode": "\nvoid FUN_004065d0(void)\n\n{\n  FUN_00406560();\n  return;\n}\n\n",
            "funcName": "FUN_004065d0"
        },
        {
            "funcStartAddr": "0x4065e0",
            "funcEndAddr": "0x4065f7",
            "decompiledFuncCode": "\nvoid FUN_004065e0(undefined8 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  FUN_00406560(0,param_1,param_2,param_3,0xffffffffffffffff);\n  return;\n}\n\n",
            "funcName": "FUN_004065e0"
        },
        {
            "funcStartAddr": "0x406600",
            "funcEndAddr": "0x406613",
            "decompiledFuncCode": "\nvoid FUN_00406600(undefined8 param_1,undefined8 param_2,undefined8 param_3,undefined8 param_4)\n\n{\n  FUN_00406560(0,param_1,param_2,param_3,param_4);\n  return;\n}\n\n",
            "funcName": "FUN_00406600"
        },
        {
            "funcStartAddr": "0x406620",
            "funcEndAddr": "0x40662a",
            "decompiledFuncCode": "\nvoid FUN_00406620(void)\n\n{\n  FUN_00405e20();\n  return;\n}\n\n",
            "funcName": "FUN_00406620"
        },
        {
            "funcStartAddr": "0x406630",
            "funcEndAddr": "0x406642",
            "decompiledFuncCode": "\nvoid FUN_00406630(undefined8 param_1,undefined8 param_2)\n\n{\n  FUN_00405e20(0,param_1,param_2,&DAT_00613260);\n  return;\n}\n\n",
            "funcName": "FUN_00406630"
        },
        {
            "funcStartAddr": "0x406650",
            "funcEndAddr": "0x406661",
            "decompiledFuncCode": "\nvoid FUN_00406650(undefined8 param_1,undefined8 param_2)\n\n{\n  FUN_00405e20(param_1,param_2,0xffffffffffffffff,&DAT_00613260);\n  return;\n}\n\n",
            "funcName": "FUN_00406650"
        },
        {
            "funcStartAddr": "0x406670",
            "funcEndAddr": "0x406686",
            "decompiledFuncCode": "\nvoid FUN_00406670(undefined8 param_1)\n\n{\n  FUN_00405e20(0,param_1,0xffffffffffffffff,&DAT_00613260);\n  return;\n}\n\n",
            "funcName": "FUN_00406670"
        },
        {
            "funcStartAddr": "0x406690",
            "funcEndAddr": "0x406a34",
            "decompiledFuncCode": "\nundefined8\nFUN_00406690(FILE *param_1,long param_2,undefined8 param_3,undefined8 param_4,undefined8 *param_5,\n            undefined8 param_6)\n\n{\n  undefined8 uVar1;\n  char *pcVar2;\n  undefined8 uVar3;\n  undefined8 uVar4;\n  undefined8 uVar5;\n  undefined8 uVar6;\n  undefined8 uVar7;\n  undefined8 local_58;\n  undefined8 local_50;\n  undefined8 local_48;\n  \n  if (param_2 == 0) {\n    __fprintf_chk(param_1,1,\"%s %s\\n\",param_3,param_4);\n  }\n  else {\n    __fprintf_chk(param_1,1,\"%s (%s) %s\\n\",param_2,param_3,param_4);\n  }\n  uVar1 = dcgettext(0,&DAT_004104cb,5);\n  __fprintf_chk(param_1,1,\"Copyright %s %d Free Software Foundation, Inc.\",uVar1,0x7e1);\n  pcVar2 = (char *)dcgettext(0,\n                             \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\"\n                             ,5);\n  fputs_unlocked(pcVar2,param_1);\n  switch(param_6) {\n  case 0:\n                    /* WARNING: Subroutine does not return */\n    abort();\n  case 1:\n    uVar1 = *param_5;\n    uVar4 = dcgettext(0,\"Written by %s.\\n\",5);\n    uVar1 = __fprintf_chk(param_1,1,uVar4,uVar1);\n    return uVar1;\n  case 2:\n    uVar1 = param_5[1];\n    uVar4 = *param_5;\n    uVar5 = dcgettext(0,\"Written by %s and %s.\\n\",5);\n    uVar1 = __fprintf_chk(param_1,1,uVar5,uVar4,uVar1);\n    return uVar1;\n  case 3:\n    uVar1 = param_5[2];\n    uVar4 = param_5[1];\n    uVar5 = *param_5;\n    uVar6 = dcgettext(0,\"Written by %s, %s, and %s.\\n\",5);\n    uVar1 = __fprintf_chk(param_1,1,uVar6,uVar5,uVar4,uVar1);\n    return uVar1;\n  case 4:\n    uVar1 = param_5[3];\n    uVar4 = param_5[2];\n    uVar5 = param_5[1];\n    uVar6 = *param_5;\n    uVar7 = dcgettext(0,\"Written by %s, %s, %s,\\nand %s.\\n\",5);\n    goto LAB_0040690c;\n  case 5:\n    uVar1 = param_5[3];\n    uVar4 = param_5[2];\n    uVar5 = param_5[1];\n    uVar6 = *param_5;\n    uVar7 = dcgettext(0,\"Written by %s, %s, %s,\\n%s, and %s.\\n\",5);\nLAB_0040690c:\n    __fprintf_chk(param_1,1,uVar7,uVar6,uVar5,uVar4);\n    return uVar1;\n  case 6:\n    local_58 = param_5[1];\n    uVar4 = param_5[5];\n    uVar5 = param_5[4];\n    uVar6 = param_5[3];\n    uVar1 = param_5[2];\n    uVar7 = *param_5;\n    uVar3 = dcgettext(0,\"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\",5);\n    goto LAB_004069a9;\n  case 7:\n    uVar1 = param_5[2];\n    uVar4 = param_5[5];\n    uVar5 = param_5[4];\n    uVar6 = param_5[3];\n    local_58 = param_5[1];\n    uVar7 = *param_5;\n    uVar3 = dcgettext(0,\"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\",5);\nLAB_004069a9:\n    uVar1 = __fprintf_chk(param_1,1,uVar3,uVar7,local_58,uVar1,uVar6,uVar5,uVar4);\n    return uVar1;\n  case 8:\n    local_48 = param_5[7];\n    local_58 = param_5[2];\n    local_50 = param_5[1];\n    uVar1 = param_5[6];\n    uVar4 = param_5[5];\n    uVar5 = param_5[4];\n    uVar6 = param_5[3];\n    uVar7 = *param_5;\n    uVar3 = dcgettext(0,\"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\",5);\n    goto LAB_0040678a;\n  case 9:\n    local_48 = param_5[7];\n    pcVar2 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n    local_58 = param_5[2];\n    local_50 = param_5[1];\n    uVar1 = param_5[6];\n    uVar4 = param_5[5];\n    uVar5 = param_5[4];\n    uVar6 = param_5[3];\n    uVar7 = *param_5;\n    break;\n  default:\n    local_48 = param_5[7];\n    pcVar2 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n    local_58 = param_5[2];\n    local_50 = param_5[1];\n    uVar1 = param_5[6];\n    uVar4 = param_5[5];\n    uVar5 = param_5[4];\n    uVar6 = param_5[3];\n    uVar7 = *param_5;\n  }\n  uVar3 = dcgettext(0,pcVar2,5);\nLAB_0040678a:\n  uVar1 = __fprintf_chk(param_1,1,uVar3,uVar7,local_50,local_58,uVar6,uVar5,uVar4,uVar1,local_48);\n  return uVar1;\n}\n\n",
            "funcName": "FUN_00406690"
        },
        {
            "funcStartAddr": "0x406a70",
            "funcEndAddr": "0x406a90",
            "decompiledFuncCode": "\nvoid FUN_00406a70(void)\n\n{\n  long lVar1;\n  long *in_R8;\n  long lVar2;\n  \n  lVar2 = 0;\n  lVar1 = *in_R8;\n  while (lVar1 != 0) {\n    lVar2 = lVar2 + 1;\n    lVar1 = in_R8[lVar2];\n  }\n  FUN_00406690();\n  return;\n}\n\n",
            "funcName": "FUN_00406a70"
        },
        {
            "funcStartAddr": "0x406a90",
            "funcEndAddr": "0x406ae9",
            "decompiledFuncCode": "\nvoid FUN_00406a90(void)\n\n{\n  uint uVar1;\n  long *plVar2;\n  long lVar3;\n  uint *in_R8;\n  long lVar4;\n  long local_58 [11];\n  \n  lVar4 = 0;\n  do {\n    uVar1 = *in_R8;\n    if (uVar1 < 0x30) {\n      *in_R8 = uVar1 + 8;\n      lVar3 = *(long *)((ulong)uVar1 + *(long *)(in_R8 + 4));\n      local_58[lVar4] = lVar3;\n    }\n    else {\n      plVar2 = *(long **)(in_R8 + 2);\n      *(long **)(in_R8 + 2) = plVar2 + 1;\n      lVar3 = *plVar2;\n      local_58[lVar4] = lVar3;\n    }\n  } while ((lVar3 != 0) && (lVar4 = lVar4 + 1, lVar4 != 10));\n  FUN_00406690();\n  return;\n}\n\n",
            "funcName": "FUN_00406a90"
        },
        {
            "funcStartAddr": "0x406af0",
            "funcEndAddr": "0x406ba8",
            "decompiledFuncCode": "\nvoid FUN_00406af0(void)\n\n{\n  long lVar1;\n  undefined8 in_R8;\n  ulong uVar2;\n  undefined8 in_R9;\n  long lVar3;\n  long *plVar4;\n  long local_88 [10];\n  long local_38 [4];\n  long local_18 [3];\n  \n  local_18[0] = in_R8;\n  plVar4 = (long *)&stack0x00000008;\n  uVar2 = 0x20;\n  local_18[1] = in_R9;\n  lVar3 = 0;\n  do {\n    if ((uint)uVar2 < 0x30) {\n      lVar1 = *(long *)((long)local_38 + uVar2);\n      local_88[lVar3] = lVar1;\n      uVar2 = (ulong)((uint)uVar2 + 8);\n    }\n    else {\n      lVar1 = *plVar4;\n      local_88[lVar3] = lVar1;\n      plVar4 = plVar4 + 1;\n    }\n  } while ((lVar1 != 0) && (lVar3 = lVar3 + 1, lVar3 != 10));\n  FUN_00406690();\n  return;\n}\n\n",
            "funcName": "FUN_00406af0"
        },
        {
            "funcStartAddr": "0x406bb0",
            "funcEndAddr": "0x406c24",
            "decompiledFuncCode": "\nvoid FUN_00406bb0(void)\n\n{\n  FILE *__stream;\n  undefined8 uVar1;\n  char *__s;\n  \n  uVar1 = dcgettext(0,\"\\nReport bugs to: %s\\n\",5);\n  __printf_chk(1,uVar1,\"bug-coreutils@gnu.org\");\n  uVar1 = dcgettext(0,\"%s home page: <%s>\\n\",5);\n  __printf_chk(1,uVar1,\"GNU coreutils\",\"https://www.gnu.org/software/coreutils/\");\n  __stream = stdout;\n  __s = (char *)dcgettext(0,\"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\",5);\n  fputs_unlocked(__s,__stream);\n  return;\n}\n\n",
            "funcName": "FUN_00406bb0"
        },
        {
            "funcStartAddr": "0x406c30",
            "funcEndAddr": "0x406c4a",
            "decompiledFuncCode": "\nvoid FUN_00406c30(size_t param_1)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(param_1);\n  if ((pvVar1 == (void *)0x0) && (param_1 != 0)) {\n                    /* WARNING: Subroutine does not return */\n    FUN_00406e80();\n  }\n  return;\n}\n\n",
            "funcName": "FUN_00406c30"
        },
        {
            "funcStartAddr": "0x406c50",
            "funcEndAddr": "0x406c71",
            "decompiledFuncCode": "\nvoid FUN_00406c50(ulong param_1,ulong param_2)\n\n{\n  if ((-1 < SUB168(ZEXT816(param_1) * ZEXT816(param_2),0)) &&\n     (SUB168(ZEXT816(param_1) * ZEXT816(param_2) >> 0x40,0) == 0)) {\n    FUN_00406c30();\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  FUN_00406e80();\n}\n\n",
            "funcName": "FUN_00406c50"
        },
        {
            "funcStartAddr": "0x406c80",
            "funcEndAddr": "0x406c82",
            "decompiledFuncCode": "\nvoid thunk_FUN_00406c30(size_t param_1)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(param_1);\n  if ((pvVar1 == (void *)0x0) && (param_1 != 0)) {\n                    /* WARNING: Subroutine does not return */\n    FUN_00406e80();\n  }\n  return;\n}\n\n",
            "funcName": "thunk_406c80"
        },
        {
            "funcStartAddr": "0x406c90",
            "funcEndAddr": "0x406cc0",
            "decompiledFuncCode": "\nvoid * FUN_00406c90(void *param_1,size_t param_2)\n\n{\n  void *pvVar1;\n  \n  if ((param_2 == 0) && (param_1 != (void *)0x0)) {\n    free(param_1);\n    return (void *)0x0;\n  }\n  pvVar1 = realloc(param_1,param_2);\n  if ((pvVar1 == (void *)0x0) && (param_2 != 0)) {\n                    /* WARNING: Subroutine does not return */\n    FUN_00406e80();\n  }\n  return pvVar1;\n}\n\n",
            "funcName": "FUN_00406c90"
        },
        {
            "funcStartAddr": "0x406cd0",
            "funcEndAddr": "0x406cf1",
            "decompiledFuncCode": "\nvoid FUN_00406cd0(undefined8 param_1,ulong param_2,ulong param_3)\n\n{\n  if ((-1 < SUB168(ZEXT816(param_2) * ZEXT816(param_3),0)) &&\n     (SUB168(ZEXT816(param_2) * ZEXT816(param_3) >> 0x40,0) == 0)) {\n    FUN_00406c90();\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  FUN_00406e80();\n}\n\n",
            "funcName": "FUN_00406cd0"
        },
        {
            "funcStartAddr": "0x406d00",
            "funcEndAddr": "0x406d78",
            "decompiledFuncCode": "\nvoid FUN_00406d00(long param_1,ulong *param_2,ulong param_3)\n\n{\n  undefined auVar1 [16];\n  ulong uVar2;\n  ulong uVar3;\n  \n  uVar2 = *param_2;\n  if (param_1 == 0) {\n    if (uVar2 == 0) {\n      uVar2 = (ulong)(0x80 < param_3) +\n              SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / ZEXT816(param_3),0);\n    }\n    uVar3 = (ulong)(SUB168(ZEXT816(uVar2) * ZEXT816(param_3) >> 0x40,0) != 0);\n    if ((SUB168(ZEXT816(uVar2) * ZEXT816(param_3),0) < 0) || (uVar3 != 0)) goto LAB_00406d5b;\n  }\n  else {\n    auVar1 = ZEXT816(0) << 0x40 | ZEXT816(0x5555555555555554);\n    uVar3 = SUB168(auVar1 % ZEXT816(param_3),0);\n    if (SUB168(auVar1 / ZEXT816(param_3),0) <= uVar2) {\nLAB_00406d5b:\n                    /* WARNING: Subroutine does not return */\n      FUN_00406e80(param_1,param_2,uVar3);\n    }\n    uVar2 = (uVar2 >> 1) + 1 + uVar2;\n  }\n  *param_2 = uVar2;\n  FUN_00406c90(param_1,uVar2 * param_3);\n  return;\n}\n\n",
            "funcName": "FUN_00406d00"
        },
        {
            "funcStartAddr": "0x406d90",
            "funcEndAddr": "0x406dda",
            "decompiledFuncCode": "\nvoid FUN_00406d90(long param_1,ulong *param_2)\n\n{\n  ulong uVar1;\n  \n  uVar1 = *param_2;\n  if (param_1 == 0) {\n    if (uVar1 == 0) {\n      *param_2 = 0x80;\n      FUN_00406c90(0,0x80);\n      return;\n    }\n    if ((long)uVar1 < 0) goto LAB_00406dda;\n  }\n  else {\n    if (0x5555555555555553 < uVar1) {\nLAB_00406dda:\n                    /* WARNING: Subroutine does not return */\n      FUN_00406e80();\n    }\n    uVar1 = (uVar1 >> 1) + 1 + uVar1;\n  }\n  *param_2 = uVar1;\n  FUN_00406c90(param_1,uVar1);\n  return;\n}\n\n",
            "funcName": "FUN_00406d90"
        },
        {
            "funcStartAddr": "0x406de0",
            "funcEndAddr": "0x406df7",
            "decompiledFuncCode": "\nvoid FUN_00406de0(size_t param_1)\n\n{\n  void *__s;\n  \n  __s = (void *)FUN_00406c30();\n  memset(__s,0,param_1);\n  return;\n}\n\n",
            "funcName": "FUN_00406de0"
        },
        {
            "funcStartAddr": "0x406e00",
            "funcEndAddr": "0x406e2e",
            "decompiledFuncCode": "\nvoid FUN_00406e00(size_t param_1,ulong param_2)\n\n{\n  void *pvVar1;\n  \n  if ((-1 < SUB168(ZEXT816(param_1) * ZEXT816(param_2),0)) &&\n     (SUB168(ZEXT816(param_1) * ZEXT816(param_2) >> 0x40,0) == 0)) {\n    pvVar1 = calloc(param_1,param_2);\n    if (pvVar1 != (void *)0x0) {\n      return;\n    }\n  }\n                    /* WARNING: Subroutine does not return */\n  FUN_00406e80();\n}\n\n",
            "funcName": "FUN_00406e00"
        },
        {
            "funcStartAddr": "0x406e30",
            "funcEndAddr": "0x406e58",
            "decompiledFuncCode": "\nvoid FUN_00406e30(void *param_1,size_t param_2)\n\n{\n  void *__dest;\n  \n  __dest = (void *)FUN_00406c30(param_2);\n  memcpy(__dest,param_1,param_2);\n  return;\n}\n\n",
            "funcName": "FUN_00406e30"
        },
        {
            "funcStartAddr": "0x406e60",
            "funcEndAddr": "0x406e73",
            "decompiledFuncCode": "\nvoid FUN_00406e60(char *param_1)\n\n{\n  void *__dest;\n  size_t sVar1;\n  \n  sVar1 = strlen(param_1);\n  __dest = (void *)FUN_00406c30(sVar1 + 1);\n  memcpy(__dest,param_1,sVar1 + 1);\n  return;\n}\n\n",
            "funcName": "FUN_00406e60"
        },
        {
            "funcStartAddr": "0x406e80",
            "funcEndAddr": "0x406eb1",
            "decompiledFuncCode": "\nvoid FUN_00406e80(void)\n\n{\n  undefined8 uVar1;\n  \n  uVar1 = dcgettext(0,\"memory exhausted\",5);\n  error(DAT_00613240,0,\"%s\",uVar1);\n                    /* WARNING: Subroutine does not return */\n  abort();\n}\n\n",
            "funcName": "FUN_00406e80"
        },
        {
            "funcStartAddr": "0x406ec0",
            "funcEndAddr": "0x406f88",
            "decompiledFuncCode": "\nulong FUN_00406ec0(undefined8 param_1,undefined4 param_2,ulong param_3,ulong param_4,\n                  undefined8 param_5,undefined8 param_6,int param_7)\n\n{\n  ulong uVar1;\n  int iVar2;\n  int *piVar3;\n  undefined8 uVar4;\n  ulong local_40 [2];\n  \n  iVar2 = FUN_00407710(param_1,0,param_2,local_40);\n  uVar1 = local_40[0];\n  if (iVar2 == 0) {\n    if ((param_3 <= local_40[0]) && (local_40[0] <= param_4)) {\n      return local_40[0];\n    }\n    piVar3 = __errno_location();\n    *piVar3 = (-(uint)(uVar1 < 0x40000000) & 0xffffffd7) + 0x4b;\n  }\n  else {\n    piVar3 = __errno_location();\n    if (iVar2 == 1) {\n      *piVar3 = 0x4b;\n    }\n    else if (iVar2 == 3) {\n      *piVar3 = 0;\n    }\n  }\n  uVar4 = FUN_00406670(param_1);\n  iVar2 = *piVar3;\n  if (iVar2 == 0x16) {\n    iVar2 = 0;\n  }\n  if (param_7 == 0) {\n    param_7 = 1;\n  }\n  error(param_7,iVar2,\"%s: %s\",param_6,uVar4);\n  return local_40[0];\n}\n\n",
            "funcName": "FUN_00406ec0"
        },
        {
            "funcStartAddr": "0x406f90",
            "funcEndAddr": "0x406fb1",
            "decompiledFuncCode": "\nvoid FUN_00406f90(undefined8 param_1,undefined8 param_2,undefined8 param_3,undefined8 param_4,\n                 undefined8 param_5,undefined8 param_6)\n\n{\n  FUN_00406ec0(param_1,10,param_2,param_3,param_4,param_5,param_6);\n  return;\n}\n\n",
            "funcName": "FUN_00406f90"
        },
        {
            "funcStartAddr": "0x406fc0",
            "funcEndAddr": "0x4075ab",
            "decompiledFuncCode": "\nulong FUN_00406fc0(byte *param_1,byte **param_2,uint param_3,long *param_4,char *param_5)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte *pbVar3;\n  int *piVar4;\n  long lVar5;\n  ulong uVar6;\n  char *pcVar7;\n  long lVar8;\n  long lVar9;\n  long lVar10;\n  byte bVar11;\n  uint uVar12;\n  int iVar13;\n  int iVar14;\n  uint uVar15;\n  byte *local_40 [2];\n  \n  if (0x24 < param_3) {\n                    /* WARNING: Subroutine does not return */\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\",\"lib/xstrtol.c\",0x60,\"xstrtol\");\n  }\n  if (param_2 == (byte **)0x0) {\n    param_2 = local_40;\n  }\n  piVar4 = __errno_location();\n  *piVar4 = 0;\n  lVar5 = strtol((char *)param_1,(char **)param_2,param_3);\n  pbVar3 = *param_2;\n  if (pbVar3 == param_1) {\n    if (param_5 == (char *)0x0) {\n      return 4;\n    }\n    bVar1 = *pbVar3;\n    if (bVar1 == 0) {\n      return 4;\n    }\n    lVar5 = 1;\n    uVar6 = 0;\n    pcVar7 = strchr(param_5,(int)(char)bVar1);\n    if (pcVar7 == (char *)0x0) {\n      return 4;\n    }\n  }\n  else {\n    if (*piVar4 == 0) {\n      uVar6 = 0;\n    }\n    else {\n      if (*piVar4 != 0x22) {\n        return 4;\n      }\n      uVar6 = 1;\n    }\n    uVar15 = (uint)uVar6;\n    if ((param_5 == (char *)0x0) || (bVar1 = *pbVar3, bVar1 == 0)) goto LAB_00407035;\n    pcVar7 = strchr(param_5,(int)(char)bVar1);\n    if (pcVar7 == (char *)0x0) goto switchD_004070c2_caseD_1;\n  }\n  uVar15 = (uint)uVar6;\n  uVar12 = bVar1 - 0x45;\n  bVar11 = (byte)uVar12;\n  if (((bVar11 < 0x30) && ((0x814400308945U >> ((ulong)uVar12 & 0x3f) & 1) != 0)) &&\n     (pcVar7 = strchr(param_5,0x30), pcVar7 != (char *)0x0)) {\n    bVar2 = pbVar3[1];\n    if (bVar2 != 0x44) {\n      if (bVar2 == 0x69) {\n        iVar14 = 0x400;\n        iVar13 = (pbVar3[2] == 0x42) + 1 + (uint)(pbVar3[2] == 0x42);\n        goto LAB_004070b0;\n      }\n      if (bVar2 != 0x42) {\n                    /* WARNING: Could not recover jumptable at 0x00407118. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n        uVar6 = (*(code *)(&PTR_LAB_00410a48)[bVar11])();\n        return uVar6;\n      }\n    }\n    iVar13 = 2;\n    iVar14 = 1000;\n  }\n  else {\n    iVar13 = 1;\n    iVar14 = 0x400;\n  }\nLAB_004070b0:\n  switch(bVar1 - 0x42 & 0xff) {\n  case 0:\n    if (lVar5 < -0x20000000000000) goto LAB_00407258;\n    if (lVar5 < 0x20000000000000) {\n      lVar5 = lVar5 << 10;\n    }\n    else {\nLAB_00407610:\n      lVar5 = 0x7fffffffffffffff;\n      uVar6 = 1;\n    }\n    break;\n  default:\nswitchD_004070c2_caseD_1:\n    *param_4 = lVar5;\n    return (ulong)(uVar15 | 2);\n  case 3:\n    lVar10 = (long)iVar14;\n    iVar14 = 6;\n    uVar12 = 0;\n    do {\n      if (lVar5 < SUB168((SEXT816(-0x8000000000000000) & (undefined  [16])0xffffffffffffffff |\n                         ZEXT816(0x8000000000000000)) / SEXT816(lVar10),0)) {\n        lVar5 = -0x8000000000000000;\n        uVar12 = 1;\n      }\n      else if (SUB168((SEXT816(0x7fffffffffffffff) & (undefined  [16])0xffffffffffffffff |\n                      ZEXT816(0x7fffffffffffffff)) / SEXT816(lVar10),0) < lVar5) {\n        lVar5 = 0x7fffffffffffffff;\n        uVar12 = 1;\n      }\n      else {\n        lVar5 = lVar5 * lVar10;\n      }\n      iVar14 = iVar14 + -1;\n    } while (iVar14 != 0);\n    goto LAB_00407600;\n  case 5:\n  case 0x25:\n    lVar10 = (long)iVar14;\n    iVar14 = 3;\n    uVar12 = 0;\n    do {\n      if (lVar5 < SUB168((SEXT816(-0x8000000000000000) & (undefined  [16])0xffffffffffffffff |\n                         ZEXT816(0x8000000000000000)) / SEXT816(lVar10),0)) {\n        lVar5 = -0x8000000000000000;\n        uVar12 = 1;\n      }\n      else if (SUB168((SEXT816(0x7fffffffffffffff) & (undefined  [16])0xffffffffffffffff |\n                      ZEXT816(0x7fffffffffffffff)) / SEXT816(lVar10),0) < lVar5) {\n        lVar5 = 0x7fffffffffffffff;\n        uVar12 = 1;\n      }\n      else {\n        lVar5 = lVar5 * lVar10;\n      }\n      iVar14 = iVar14 + -1;\n    } while (iVar14 != 0);\n    goto LAB_00407600;\n  case 9:\n  case 0x29:\n    if (lVar5 < SUB168((SEXT816(-0x8000000000000000) & (undefined  [16])0xffffffffffffffff |\n                       ZEXT816(0x8000000000000000)) / SEXT816((long)iVar14),0)) goto LAB_00407258;\n    lVar8 = SUB168((SEXT816(0x7fffffffffffffff) & (undefined  [16])0xffffffffffffffff |\n                   ZEXT816(0x7fffffffffffffff)) / SEXT816((long)iVar14),0);\nLAB_004071fc:\n    if (lVar8 < lVar5) goto LAB_00407610;\n    lVar5 = lVar5 * iVar14;\n    break;\n  case 0xb:\n  case 0x2b:\n    lVar9 = (long)iVar14;\n    lVar10 = SUB168((SEXT816(-0x8000000000000000) & (undefined  [16])0xffffffffffffffff |\n                    ZEXT816(0x8000000000000000)) / SEXT816(lVar9),0);\n    if (lVar10 <= lVar5) {\n      lVar8 = SUB168((SEXT816(0x7fffffffffffffff) & (undefined  [16])0xffffffffffffffff |\n                     ZEXT816(0x7fffffffffffffff)) / SEXT816(lVar9),0);\n      if (lVar8 < lVar5) goto LAB_00407610;\n      lVar5 = lVar5 * lVar9;\n      if (lVar10 <= lVar5) goto LAB_004071fc;\n    }\nLAB_00407258:\n    lVar5 = -0x8000000000000000;\n    uVar6 = 1;\n    break;\n  case 0xe:\n    lVar10 = (long)iVar14;\n    iVar14 = 5;\n    uVar12 = 0;\n    do {\n      if (lVar5 < SUB168((SEXT816(-0x8000000000000000) & (undefined  [16])0xffffffffffffffff |\n                         ZEXT816(0x8000000000000000)) / SEXT816(lVar10),0)) {\n        lVar5 = -0x8000000000000000;\n        uVar12 = 1;\n      }\n      else if (SUB168((SEXT816(0x7fffffffffffffff) & (undefined  [16])0xffffffffffffffff |\n                      ZEXT816(0x7fffffffffffffff)) / SEXT816(lVar10),0) < lVar5) {\n        lVar5 = 0x7fffffffffffffff;\n        uVar12 = 1;\n      }\n      else {\n        lVar5 = lVar5 * lVar10;\n      }\n      iVar14 = iVar14 + -1;\n    } while (iVar14 != 0);\n    goto LAB_00407600;\n  case 0x12:\n  case 0x32:\n    lVar10 = (long)iVar14;\n    iVar14 = 4;\n    uVar12 = 0;\n    do {\n      if (lVar5 < SUB168((SEXT816(-0x8000000000000000) & (undefined  [16])0xffffffffffffffff |\n                         ZEXT816(0x8000000000000000)) / SEXT816(lVar10),0)) {\n        lVar5 = -0x8000000000000000;\n        uVar12 = 1;\n      }\n      else if (SUB168((SEXT816(0x7fffffffffffffff) & (undefined  [16])0xffffffffffffffff |\n                      ZEXT816(0x7fffffffffffffff)) / SEXT816(lVar10),0) < lVar5) {\n        lVar5 = 0x7fffffffffffffff;\n        uVar12 = 1;\n      }\n      else {\n        lVar5 = lVar5 * lVar10;\n      }\n      iVar14 = iVar14 + -1;\n    } while (iVar14 != 0);\n    goto LAB_00407600;\n  case 0x17:\n    lVar10 = (long)iVar14;\n    iVar14 = 8;\n    uVar12 = 0;\n    do {\n      if (lVar5 < SUB168((SEXT816(-0x8000000000000000) & (undefined  [16])0xffffffffffffffff |\n                         ZEXT816(0x8000000000000000)) / SEXT816(lVar10),0)) {\n        lVar5 = -0x8000000000000000;\n        uVar12 = 1;\n      }\n      else if (SUB168((SEXT816(0x7fffffffffffffff) & (undefined  [16])0xffffffffffffffff |\n                      ZEXT816(0x7fffffffffffffff)) / SEXT816(lVar10),0) < lVar5) {\n        lVar5 = 0x7fffffffffffffff;\n        uVar12 = 1;\n      }\n      else {\n        lVar5 = lVar5 * lVar10;\n      }\n      iVar14 = iVar14 + -1;\n    } while (iVar14 != 0);\n    goto LAB_00407600;\n  case 0x18:\n    lVar10 = (long)iVar14;\n    iVar14 = 7;\n    uVar12 = 0;\n    do {\n      if (lVar5 < SUB168((SEXT816(-0x8000000000000000) & (undefined  [16])0xffffffffffffffff |\n                         ZEXT816(0x8000000000000000)) / SEXT816(lVar10),0)) {\n        lVar5 = -0x8000000000000000;\n        uVar12 = 1;\n      }\n      else if (SUB168((SEXT816(0x7fffffffffffffff) & (undefined  [16])0xffffffffffffffff |\n                      ZEXT816(0x7fffffffffffffff)) / SEXT816(lVar10),0) < lVar5) {\n        lVar5 = 0x7fffffffffffffff;\n        uVar12 = 1;\n      }\n      else {\n        lVar5 = lVar5 * lVar10;\n      }\n      iVar14 = iVar14 + -1;\n    } while (iVar14 != 0);\nLAB_00407600:\n    uVar6 = (ulong)(uVar15 | uVar12);\n    break;\n  case 0x20:\n    if (lVar5 < -0x40000000000000) goto LAB_00407258;\n    if (0x3fffffffffffff < lVar5) goto LAB_00407610;\n    lVar5 = lVar5 << 9;\n    break;\n  case 0x21:\n    break;\n  case 0x35:\n    if (lVar5 < -0x4000000000000000) goto LAB_00407258;\n    if (0x3fffffffffffffff < lVar5) goto LAB_00407610;\n    lVar5 = lVar5 * 2;\n  }\n  *param_2 = pbVar3 + iVar13;\n  if (pbVar3[iVar13] != 0) {\n    uVar6 = (ulong)((uint)uVar6 | 2);\n  }\nLAB_00407035:\n  *param_4 = lVar5;\n  return uVar6;\n}\n\n",
            "funcName": "FUN_00406fc0"
        },
        {
            "funcStartAddr": "0x407710",
            "funcEndAddr": "0x407abe",
            "decompiledFuncCode": "\nulong FUN_00407710(byte *param_1,byte **param_2,uint param_3,ulong *param_4,char *param_5)\n\n{\n  byte bVar1;\n  undefined auVar2 [16];\n  int *piVar3;\n  ushort **ppuVar4;\n  byte *pbVar5;\n  ulong uVar6;\n  char *pcVar7;\n  byte bVar8;\n  uint uVar9;\n  int iVar10;\n  ulong uVar11;\n  byte bVar12;\n  uint uVar13;\n  ulong uVar14;\n  int iVar15;\n  int iVar16;\n  byte *local_40 [2];\n  \n  if (0x24 < param_3) {\n                    /* WARNING: Subroutine does not return */\n    __assert_fail(\"0 <= strtol_base && strtol_base <= 36\",\"lib/xstrtol.c\",0x60,\"xstrtoumax\");\n  }\n  if (param_2 == (byte **)0x0) {\n    param_2 = local_40;\n  }\n  piVar3 = __errno_location();\n  *piVar3 = 0;\n  bVar12 = *param_1;\n  ppuVar4 = __ctype_b_loc();\n  pbVar5 = param_1;\n  while ((*(byte *)((long)*ppuVar4 + (ulong)bVar12 * 2 + 1) & 0x20) != 0) {\n    pbVar5 = pbVar5 + 1;\n    bVar12 = *pbVar5;\n  }\n  if (bVar12 == 0x2d) {\n    return 4;\n  }\n  uVar6 = __strtoul_internal(param_1,param_2,param_3,0);\n  pbVar5 = *param_2;\n  if (pbVar5 == param_1) {\n    if ((param_5 == (char *)0x0) || (bVar12 = *param_1, bVar12 == 0)) {\n      return 4;\n    }\n    uVar14 = 0;\n    uVar6 = 1;\n    pcVar7 = strchr(param_5,(int)(char)bVar12);\n    if (pcVar7 == (char *)0x0) {\n      return 4;\n    }\n  }\n  else {\n    if (*piVar3 == 0) {\n      uVar14 = 0;\n    }\n    else {\n      uVar14 = 1;\n      if (*piVar3 != 0x22) {\n        return 4;\n      }\n    }\n    uVar13 = (uint)uVar14;\n    if ((param_5 == (char *)0x0) || (bVar12 = *pbVar5, bVar12 == 0)) goto LAB_004077b2;\n    pcVar7 = strchr(param_5,(int)(char)bVar12);\n    if (pcVar7 == (char *)0x0) goto switchD_0040789c_caseD_1;\n  }\n  uVar13 = (uint)uVar14;\n  uVar9 = bVar12 - 0x45;\n  bVar8 = (byte)uVar9;\n  if (((bVar8 < 0x30) && ((0x814400308945U >> ((ulong)uVar9 & 0x3f) & 1) != 0)) &&\n     (pcVar7 = strchr(param_5,0x30), pcVar7 != (char *)0x0)) {\n    bVar1 = pbVar5[1];\n    if (bVar1 != 0x44) {\n      if (bVar1 == 0x69) {\n        uVar11 = 0x400;\n        iVar15 = (pbVar5[2] == 0x42) + 1 + (uint)(pbVar5[2] == 0x42);\n        goto LAB_0040788a;\n      }\n      if (bVar1 != 0x42) {\n                    /* WARNING: Could not recover jumptable at 0x00407871. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n        uVar6 = (*(code *)(&PTR_LAB_00410bd0)[bVar8])();\n        return uVar6;\n      }\n    }\n    iVar15 = 2;\n    uVar11 = 1000;\n  }\n  else {\n    iVar15 = 1;\n    uVar11 = 0x400;\n  }\nLAB_0040788a:\n  iVar10 = (int)uVar11;\n  switch(bVar12 - 0x42 & 0xff) {\n  case 0:\n    if (uVar6 >> 0x36 == 0) {\n      uVar6 = uVar6 << 10;\n      break;\n    }\n    goto LAB_004078f7;\n  default:\nswitchD_0040789c_caseD_1:\n    *param_4 = uVar6;\n    return (ulong)(uVar13 | 2);\n  case 3:\n    iVar16 = 6;\n    uVar9 = 0;\n    do {\n      auVar2 = ZEXT816(uVar6);\n      uVar6 = SUB168(auVar2 * ZEXT816((ulong)(long)iVar10),0);\n      if (SUB168(auVar2 * ZEXT816((ulong)(long)iVar10) >> 0x40,0) != 0) {\n        uVar9 = 1;\n        uVar6 = 0xffffffffffffffff;\n      }\n      iVar16 = iVar16 + -1;\n    } while (iVar16 != 0);\n    goto LAB_00407984;\n  case 5:\n  case 0x25:\n    uVar11 = (ulong)iVar10;\n    if (((SUB168(ZEXT816(uVar6) * ZEXT816(uVar11) >> 0x40,0) != 0) ||\n        (auVar2 = (ZEXT816(uVar6) * ZEXT816(uVar11) & (undefined  [16])0xffffffffffffffff) *\n                  ZEXT816(uVar11), SUB168(auVar2 >> 0x40,0) != 0)) ||\n       (auVar2 = (auVar2 & (undefined  [16])0xffffffffffffffff) * ZEXT816(uVar11),\n       uVar6 = SUB168(auVar2,0), SUB168(auVar2 >> 0x40,0) != 0)) {\n      uVar6 = 0xffffffffffffffff;\n      uVar14 = 1;\n    }\n    break;\n  case 9:\n  case 0x29:\n    auVar2 = ZEXT816(uVar6) * ZEXT816(uVar11);\n    goto joined_r0x004078bc;\n  case 0xb:\n  case 0x2b:\n    auVar2 = ZEXT816(uVar6) * ZEXT816((ulong)(long)iVar10);\n    if (SUB168(auVar2 >> 0x40,0) != 0) goto LAB_004078f7;\n    auVar2 = (auVar2 & (undefined  [16])0xffffffffffffffff) * ZEXT816((ulong)(long)iVar10);\njoined_r0x004078bc:\n    uVar6 = SUB168(auVar2,0);\n    if (SUB168(auVar2 >> 0x40,0) != 0) {\nLAB_004078f7:\n      uVar14 = 1;\n      uVar6 = 0xffffffffffffffff;\n    }\n    break;\n  case 0xe:\n    iVar16 = 5;\n    uVar9 = 0;\n    do {\n      auVar2 = ZEXT816(uVar6);\n      uVar6 = SUB168(auVar2 * ZEXT816((ulong)(long)iVar10),0);\n      if (SUB168(auVar2 * ZEXT816((ulong)(long)iVar10) >> 0x40,0) != 0) {\n        uVar9 = 1;\n        uVar6 = 0xffffffffffffffff;\n      }\n      iVar16 = iVar16 + -1;\n    } while (iVar16 != 0);\n    goto LAB_00407984;\n  case 0x12:\n  case 0x32:\n    iVar16 = 4;\n    uVar9 = 0;\n    do {\n      auVar2 = ZEXT816(uVar6);\n      uVar6 = SUB168(auVar2 * ZEXT816((ulong)(long)iVar10),0);\n      if (SUB168(auVar2 * ZEXT816((ulong)(long)iVar10) >> 0x40,0) != 0) {\n        uVar9 = 1;\n        uVar6 = 0xffffffffffffffff;\n      }\n      iVar16 = iVar16 + -1;\n    } while (iVar16 != 0);\n    goto LAB_00407984;\n  case 0x17:\n    iVar16 = 8;\n    uVar9 = 0;\n    do {\n      auVar2 = ZEXT816(uVar6);\n      uVar6 = SUB168(auVar2 * ZEXT816((ulong)(long)iVar10),0);\n      if (SUB168(auVar2 * ZEXT816((ulong)(long)iVar10) >> 0x40,0) != 0) {\n        uVar9 = 1;\n        uVar6 = 0xffffffffffffffff;\n      }\n      iVar16 = iVar16 + -1;\n    } while (iVar16 != 0);\n    goto LAB_00407984;\n  case 0x18:\n    iVar16 = 7;\n    uVar9 = 0;\n    do {\n      auVar2 = ZEXT816(uVar6);\n      uVar6 = SUB168(auVar2 * ZEXT816((ulong)(long)iVar10),0);\n      if (SUB168(auVar2 * ZEXT816((ulong)(long)iVar10) >> 0x40,0) != 0) {\n        uVar9 = 1;\n        uVar6 = 0xffffffffffffffff;\n      }\n      iVar16 = iVar16 + -1;\n    } while (iVar16 != 0);\nLAB_00407984:\n    uVar14 = (ulong)(uVar13 | uVar9);\n    break;\n  case 0x20:\n    if (uVar6 >> 0x37 != 0) goto LAB_004078f7;\n    uVar6 = uVar6 << 9;\n    break;\n  case 0x21:\n    break;\n  case 0x35:\n    if ((long)uVar6 < 0) goto LAB_004078f7;\n    uVar6 = uVar6 * 2;\n  }\n  *param_2 = pbVar5 + iVar15;\n  if (pbVar5[iVar15] != 0) {\n    uVar14 = (ulong)((uint)uVar14 | 2);\n  }\nLAB_004077b2:\n  *param_4 = uVar6;\n  return uVar14;\n}\n\n",
            "funcName": "FUN_00407710"
        },
        {
            "funcStartAddr": "0x407b50",
            "funcEndAddr": "0x407c7c",
            "decompiledFuncCode": "\n/* WARNING: Restarted to delay deadcode elimination for space: stack */\n\nint FUN_00407b50(ulong param_1,int param_2,ulong param_3)\n\n{\n  int iVar1;\n  uint uVar2;\n  int iVar3;\n  int *piVar4;\n  \n  if (param_2 != 0x406) {\n    iVar1 = fcntl((int)param_1,param_2,param_3);\n    return iVar1;\n  }\n  if (DAT_00613538 < 0) {\n    iVar1 = FUN_00407b50(param_1,0,param_3 & 0xffffffff);\n    if (iVar1 < 0) {\n      return iVar1;\n    }\n    if (DAT_00613538 != -1) {\n      return iVar1;\n    }\n  }\n  else {\n    iVar1 = fcntl((int)param_1,0x406);\n    if ((-1 < iVar1) || (piVar4 = __errno_location(), *piVar4 != 0x16)) {\n      DAT_00613538 = 1;\n      return iVar1;\n    }\n    iVar1 = FUN_00407b50(param_1 & 0xffffffff,0,param_3 & 0xffffffff);\n    if (iVar1 < 0) {\n      return iVar1;\n    }\n    DAT_00613538 = -1;\n  }\n  uVar2 = fcntl(iVar1,1);\n  if ((-1 < (int)uVar2) && (iVar3 = fcntl(iVar1,2,(ulong)(uVar2 | 1)), iVar3 != -1)) {\n    return iVar1;\n  }\n  piVar4 = __errno_location();\n  iVar3 = *piVar4;\n  close(iVar1);\n  *piVar4 = iVar3;\n  return -1;\n}\n\n",
            "funcName": "FUN_00407b50"
        },
        {
            "funcStartAddr": "0x407c90",
            "funcEndAddr": "0x407d65",
            "decompiledFuncCode": "\nvoid FUN_00407c90(long param_1,int *param_2)\n\n{\n  int iVar1;\n  int iVar2;\n  int iVar3;\n  undefined8 uVar4;\n  undefined8 *puVar5;\n  long lVar6;\n  int iVar7;\n  int iVar8;\n  int iVar9;\n  int iVar10;\n  \n  iVar1 = param_2[0xb];\n  iVar2 = *param_2;\n  iVar3 = param_2[0xc];\n  iVar8 = iVar1;\n  iVar9 = iVar2;\n  while (iVar3 < iVar9) {\n    while( true ) {\n      if (iVar3 <= iVar8) goto LAB_00407d0c;\n      iVar10 = iVar9 - iVar3;\n      iVar7 = iVar3 - iVar8;\n      if (iVar10 <= iVar7) break;\n      lVar6 = (long)iVar8;\n      iVar9 = iVar9 - iVar7;\n      puVar5 = (undefined8 *)(param_1 + lVar6 * 8);\n      do {\n        uVar4 = *puVar5;\n        *puVar5 = puVar5[iVar9 - lVar6];\n        puVar5[iVar9 - lVar6] = uVar4;\n        puVar5 = puVar5 + 1;\n      } while ((undefined8 *)(param_1 + 8 + ((ulong)(iVar7 - 1) + lVar6) * 8) != puVar5);\n      if (iVar9 <= iVar3) goto LAB_00407d0c;\n    }\n    lVar6 = (long)iVar8;\n    puVar5 = (undefined8 *)(param_1 + lVar6 * 8);\n    do {\n      uVar4 = *puVar5;\n      *puVar5 = puVar5[iVar3 - lVar6];\n      puVar5[iVar3 - lVar6] = uVar4;\n      puVar5 = puVar5 + 1;\n    } while (puVar5 != (undefined8 *)(param_1 + 8 + ((ulong)(iVar10 - 1) + lVar6) * 8));\n    iVar8 = iVar8 + iVar10;\n  }\nLAB_00407d0c:\n  param_2[0xc] = iVar2;\n  param_2[0xb] = iVar1 + (iVar2 - iVar3);\n  return;\n}\n\n",
            "funcName": "FUN_00407c90"
        },
        {
            "funcStartAddr": "0x407d70",
            "funcEndAddr": "0x40836e",
            "decompiledFuncCode": "\nint FUN_00407d70(int param_1,undefined8 *param_2,char *param_3,char **param_4,undefined4 *param_5,\n                int param_6,int *param_7,int param_8,undefined8 param_9)\n\n{\n  char cVar1;\n  undefined8 uVar2;\n  bool bVar3;\n  bool bVar4;\n  int iVar5;\n  int iVar6;\n  size_t sVar7;\n  undefined8 uVar8;\n  undefined8 uVar9;\n  char **ppcVar10;\n  char *pcVar11;\n  char **ppcVar12;\n  char *pcVar13;\n  char *__s1;\n  FILE *__stream;\n  ulong uVar14;\n  size_t sVar15;\n  char *__s1_00;\n  long lVar16;\n  char *local_70;\n  uint local_44;\n  \n  pcVar13 = *(char **)(param_7 + 8);\n  cVar1 = *pcVar13;\n  pcVar11 = pcVar13;\n  if ((cVar1 == '=') || (cVar1 == '\\0')) {\n    sVar15 = 0;\n  }\n  else {\n    do {\n      pcVar11 = pcVar11 + 1;\n      if (*pcVar11 == '\\0') break;\n    } while (*pcVar11 != '=');\n    sVar15 = (long)pcVar11 - (long)pcVar13;\n  }\n  uVar14 = 0;\n  __s1 = *param_4;\n  ppcVar10 = param_4;\n  __s1_00 = __s1;\n  if (__s1 != (char *)0x0) {\n    while( true ) {\n      iVar5 = strncmp(__s1_00,pcVar13,sVar15);\n      if ((iVar5 == 0) && (sVar7 = strlen(__s1_00), sVar7 == sVar15)) goto LAB_00407f90;\n      ppcVar10 = ppcVar10 + 4;\n      __s1_00 = *ppcVar10;\n      iVar5 = (int)uVar14 + 1;\n      if (__s1_00 == (char *)0x0) break;\n      uVar14 = (ulong)iVar5;\n    }\n    lVar16 = 0;\n    ppcVar10 = (char **)0x0;\n    local_44 = 0xffffffff;\n    bVar3 = false;\n    bVar4 = false;\n    local_70 = (char *)0x0;\n    ppcVar12 = param_4;\n    do {\n      iVar6 = strncmp(__s1,pcVar13,sVar15);\n      if (iVar6 == 0) {\n        if (ppcVar10 == (char **)0x0) {\n          local_44 = (uint)lVar16;\n          ppcVar10 = ppcVar12;\n        }\n        else if (((((param_6 != 0) || (*(int *)(ppcVar10 + 1) != *(int *)(ppcVar12 + 1))) ||\n                  (ppcVar10[2] != ppcVar12[2])) ||\n                 (*(int *)(ppcVar10 + 3) != *(int *)(ppcVar12 + 3))) && (!bVar3)) {\n          if (param_8 == 0) {\n            bVar3 = true;\n            if (local_70 == (char *)0x0) goto LAB_00407ed0;\n          }\n          else if (local_70 == (char *)0x0) {\n            local_70 = (char *)calloc((long)iVar5,1);\n            if (local_70 == (char *)0x0) {\n              bVar3 = true;\n              goto LAB_00407ed0;\n            }\n            bVar4 = true;\n            local_70[(int)local_44] = '\\x01';\n          }\n          local_70[lVar16] = '\\x01';\n        }\n      }\nLAB_00407ed0:\n      ppcVar12 = ppcVar12 + 4;\n      __s1 = *ppcVar12;\n      lVar16 = lVar16 + 1;\n    } while (__s1 != (char *)0x0);\n    if ((local_70 != (char *)0x0) || (bVar3)) {\n      if (param_8 != 0) {\n        if (bVar3) {\n          uVar2 = *param_2;\n          uVar8 = dcgettext(0,\"%s: option \\'%s%s\\' is ambiguous\\n\",5);\n          __fprintf_chk(stderr,1,uVar8,uVar2,param_9,pcVar13);\n          pcVar13 = *(char **)(param_7 + 8);\n        }\n        else {\n          flockfile(stderr);\n          uVar2 = *(undefined8 *)(param_7 + 8);\n          uVar8 = *param_2;\n          uVar9 = dcgettext(0,\"%s: option \\'%s%s\\' is ambiguous; possibilities:\",5);\n          __fprintf_chk(stderr,1,uVar9,uVar8,param_9,uVar2);\n          pcVar13 = local_70;\n          __stream = stderr;\n          do {\n            if (*pcVar13 != '\\0') {\n              __fprintf_chk(__stream,1,&DAT_00411001,param_9,*param_4);\n              __stream = stderr;\n            }\n            pcVar13 = pcVar13 + 1;\n            param_4 = param_4 + 4;\n          } while (local_70 + uVar14 + 1 != pcVar13);\n          fputc(10,__stream);\n          funlockfile(stderr);\n          pcVar13 = *(char **)(param_7 + 8);\n        }\n      }\n      if (bVar4) {\n        free(local_70);\n      }\n      sVar15 = strlen(pcVar13);\n      *(char **)(param_7 + 8) = pcVar13 + sVar15;\n      *param_7 = *param_7 + 1;\n      param_7[2] = 0;\n      return 0x3f;\n    }\n    if (ppcVar10 != (char **)0x0) {\n      uVar14 = (ulong)local_44;\nLAB_00407f90:\n      iVar6 = *param_7;\n      *(undefined8 *)(param_7 + 8) = 0;\n      iVar5 = iVar6 + 1;\n      *param_7 = iVar5;\n      if (*pcVar11 == '\\0') {\n        if (*(int *)(ppcVar10 + 1) == 1) {\n          if (param_1 <= iVar5) {\n            if (param_8 != 0) {\n              pcVar13 = *ppcVar10;\n              uVar2 = *param_2;\n              uVar8 = dcgettext(0,\"%s: option \\'%s%s\\' requires an argument\\n\",5);\n              __fprintf_chk(stderr,1,uVar8,uVar2,param_9,pcVar13);\n            }\n            param_7[2] = *(int *)(ppcVar10 + 3);\n            return (uint)(*param_3 != ':') * 5 + 0x3a;\n          }\n          *param_7 = iVar6 + 2;\n          *(undefined8 *)(param_7 + 4) = param_2[iVar5];\n        }\n      }\n      else {\n        if (*(int *)(ppcVar10 + 1) == 0) {\n          if (param_8 != 0) {\n            pcVar13 = *ppcVar10;\n            uVar2 = *param_2;\n            uVar8 = dcgettext(0,\"%s: option \\'%s%s\\' doesn\\'t allow an argument\\n\",5);\n            __fprintf_chk(stderr,1,uVar8,uVar2,param_9,pcVar13);\n          }\n          param_7[2] = *(int *)(ppcVar10 + 3);\n          return 0x3f;\n        }\n        *(char **)(param_7 + 4) = pcVar11 + 1;\n      }\n      if (param_5 != (undefined4 *)0x0) {\n        *param_5 = (int)uVar14;\n      }\n      if ((int *)ppcVar10[2] == (int *)0x0) {\n        return *(int *)(ppcVar10 + 3);\n      }\n      *(int *)ppcVar10[2] = *(int *)(ppcVar10 + 3);\n      return 0;\n    }\n  }\n  if (((param_6 != 0) && (*(char *)(param_2[*param_7] + 1) != '-')) &&\n     (pcVar11 = strchr(param_3,(int)cVar1), pcVar11 != (char *)0x0)) {\n    return -1;\n  }\n  if (param_8 != 0) {\n    uVar2 = *param_2;\n    uVar8 = dcgettext(0,\"%s: unrecognized option \\'%s%s\\'\\n\",5);\n    __fprintf_chk(stderr,1,uVar8,uVar2,param_9,pcVar13);\n  }\n  *(undefined8 *)(param_7 + 8) = 0;\n  *param_7 = *param_7 + 1;\n  param_7[2] = 0;\n  return 0x3f;\n}\n\n",
            "funcName": "FUN_00407d70"
        },
        {
            "funcStartAddr": "0x408390",
            "funcEndAddr": "0x4088f7",
            "decompiledFuncCode": "\nuint FUN_00408390(uint param_1,undefined8 *param_2,char *param_3,long param_4,undefined8 param_5,\n                 ulong param_6,uint *param_7,int param_8)\n\n{\n  undefined8 uVar1;\n  char cVar2;\n  uint uVar3;\n  char *pcVar4;\n  undefined8 uVar5;\n  long lVar6;\n  uint uVar7;\n  byte *pbVar8;\n  byte *pbVar9;\n  byte *pbVar10;\n  uint uVar11;\n  bool bVar12;\n  bool bVar13;\n  byte bVar14;\n  undefined1 *puVar15;\n  \n  bVar14 = 0;\n  uVar3 = param_7[1];\n  if ((int)param_1 < 1) {\n    return 0xffffffff;\n  }\n  uVar11 = *param_7;\n  *(undefined8 *)(param_7 + 4) = 0;\n  if (uVar11 == 0) {\n    *param_7 = 1;\n    uVar11 = 1;\nLAB_004083da:\n    param_7[0xc] = uVar11;\n    param_7[0xb] = uVar11;\n    *(undefined8 *)(param_7 + 8) = 0;\n    if (*param_3 == '-') {\n      param_7[10] = 2;\n      param_3 = param_3 + 1;\n      pbVar8 = (byte *)0x0;\n    }\n    else if (*param_3 == '+') {\n      param_7[10] = 0;\n      param_3 = param_3 + 1;\n      pbVar8 = (byte *)0x0;\n    }\n    else {\n      pbVar8 = (byte *)0x0;\n      if (param_8 == 0) {\n        pcVar4 = getenv(\"POSIXLY_CORRECT\");\n        param_6 = param_6 & 0xffffffff;\n        if (pcVar4 == (char *)0x0) {\n          param_7[10] = 1;\n          pbVar8 = *(byte **)(param_7 + 8);\n          goto LAB_004084dd;\n        }\n        pbVar8 = *(byte **)(param_7 + 8);\n      }\n      param_7[10] = 0;\n    }\nLAB_004084dd:\n    param_7[6] = 1;\n    cVar2 = *param_3;\nLAB_004084e8:\n    if (cVar2 == ':') {\n      uVar3 = 0;\n    }\n    if (pbVar8 == (byte *)0x0) goto LAB_00408458;\nLAB_004084fc:\n    if (*pbVar8 == 0) goto LAB_00408458;\n  }\n  else {\n    if (param_7[6] == 0) goto LAB_004083da;\n    cVar2 = *param_3;\n    pbVar8 = *(byte **)(param_7 + 8);\n    if ((cVar2 - 0x2bU & 0xfd) != 0) goto LAB_004084e8;\n    pcVar4 = param_3 + 1;\n    param_3 = param_3 + 1;\n    if (*pcVar4 == ':') {\n      uVar3 = 0;\n    }\n    if (pbVar8 != (byte *)0x0) goto LAB_004084fc;\nLAB_00408458:\n    uVar11 = *param_7;\n    if (param_7[0xc] != uVar11 && (int)uVar11 <= (int)param_7[0xc]) {\n      param_7[0xc] = uVar11;\n    }\n    if ((int)uVar11 < (int)param_7[0xb]) {\n      param_7[0xb] = uVar11;\n    }\n    if (param_7[10] == 1) {\n      uVar7 = param_7[0xc];\n      if (param_7[0xb] == uVar7) {\n        if (uVar11 != uVar7) {\n          param_7[0xb] = uVar11;\n          uVar7 = uVar11;\n        }\n      }\n      else if (uVar11 != uVar7) {\n        FUN_00407c90(param_2,param_7);\n        param_6 = param_6 & 0xffffffff;\n        uVar7 = *param_7;\n      }\n      uVar11 = uVar7;\n      uVar7 = uVar11;\n      if ((int)uVar11 < (int)param_1) {\n        lVar6 = (long)(int)uVar11;\n        do {\n          if ((*(char *)param_2[lVar6] == '-') && (((char *)param_2[lVar6])[1] != '\\0')) {\n            uVar11 = *param_7;\n            uVar7 = (uint)lVar6;\n            break;\n          }\n          uVar11 = (uint)lVar6 + 1;\n          lVar6 = lVar6 + 1;\n          *param_7 = uVar11;\n          uVar7 = uVar11;\n        } while ((int)lVar6 < (int)param_1);\n      }\n      param_7[0xc] = uVar7;\n    }\n    bVar12 = param_1 < uVar11;\n    bVar13 = param_1 == uVar11;\n    if (bVar13) {\n      param_1 = param_7[0xc];\n      uVar11 = param_7[0xb];\nLAB_004085c6:\n      if (uVar11 != param_1) {\n        *param_7 = uVar11;\n      }\n      return 0xffffffff;\n    }\n    lVar6 = 3;\n    pbVar8 = (byte *)param_2[(int)uVar11];\n    pbVar9 = pbVar8;\n    pbVar10 = &DAT_00411019;\n    do {\n      if (lVar6 == 0) break;\n      lVar6 = lVar6 + -1;\n      bVar12 = *pbVar9 < *pbVar10;\n      bVar13 = *pbVar9 == *pbVar10;\n      pbVar9 = pbVar9 + (ulong)bVar14 * -2 + 1;\n      pbVar10 = pbVar10 + (ulong)bVar14 * -2 + 1;\n    } while (bVar13);\n    if ((!bVar12 && !bVar13) == bVar12) {\n      uVar11 = uVar11 + 1;\n      *param_7 = uVar11;\n      if (param_7[0xb] == param_7[0xc]) {\n        param_7[0xb] = uVar11;\n      }\n      else {\n        bVar12 = uVar11 != param_7[0xc];\n        uVar11 = param_7[0xb];\n        if (bVar12) {\n          FUN_00407c90(param_2,param_7);\n          uVar11 = param_7[0xb];\n        }\n      }\n      param_7[0xc] = param_1;\n      *param_7 = param_1;\n      goto LAB_004085c6;\n    }\n    if ((*pbVar8 != 0x2d) || (bVar14 = pbVar8[1], bVar14 == 0)) {\n      if (param_7[10] == 0) {\n        return 0xffffffff;\n      }\n      *(byte **)(param_7 + 4) = pbVar8;\n      *param_7 = uVar11 + 1;\n      return 1;\n    }\n    if (param_4 != 0) {\n      if (bVar14 == 0x2d) {\n        *(byte **)(param_7 + 8) = pbVar8 + 2;\n        puVar15 = &DAT_00411019;\n        goto LAB_00408725;\n      }\n      if ((int)param_6 != 0) {\n        if (pbVar8[2] == 0) {\n          pcVar4 = strchr(param_3,(int)(char)bVar14);\n          param_6 = param_6 & 0xffffffff;\n          if (pcVar4 != (char *)0x0) goto LAB_004086d0;\n        }\n        *(byte **)(param_7 + 8) = pbVar8 + 1;\n        uVar11 = FUN_00407d70(param_1,param_2,param_3,param_4,param_5,param_6,param_7,uVar3,\n                              &DAT_0041101a);\n        if (uVar11 != 0xffffffff) {\n          return uVar11;\n        }\n        pbVar8 = (byte *)param_2[(int)*param_7];\n      }\n    }\nLAB_004086d0:\n    pbVar8 = pbVar8 + 1;\n  }\n  pbVar9 = pbVar8 + 1;\n  *(byte **)(param_7 + 8) = pbVar9;\n  bVar14 = *pbVar8;\n  uVar11 = (uint)(char)bVar14;\n  pcVar4 = strchr(param_3,uVar11);\n  if (pbVar8[1] == 0) {\n    *param_7 = *param_7 + 1;\n  }\n  if (((byte)(bVar14 - 0x3a) < 2) || (pcVar4 == (char *)0x0)) {\n    if (uVar3 != 0) {\n      uVar1 = *param_2;\n      uVar5 = dcgettext(0,\"%s: invalid option -- \\'%c\\'\\n\",5);\n      __fprintf_chk(stderr,1,uVar5,uVar1,uVar11);\n    }\n    param_7[2] = uVar11;\n    return 0x3f;\n  }\n  if (((*pcVar4 != 'W') || (param_4 == 0)) || (pcVar4[1] != ';')) {\n    if (pcVar4[1] == ':') {\n      if (pcVar4[2] == ':') {\n        if (pbVar8[1] == 0) {\n          *(undefined8 *)(param_7 + 4) = 0;\n        }\n        else {\n          *(byte **)(param_7 + 4) = pbVar9;\n          *param_7 = *param_7 + 1;\n        }\n      }\n      else {\n        uVar7 = *param_7;\n        if (pbVar8[1] == 0) {\n          if (param_1 == uVar7) {\n            if (uVar3 != 0) {\n              uVar1 = *param_2;\n              uVar5 = dcgettext(0,\"%s: option requires an argument -- \\'%c\\'\\n\",5);\n              __fprintf_chk(stderr,1,uVar5,uVar1,uVar11);\n            }\n            param_7[2] = uVar11;\n            uVar11 = (uint)(*param_3 != ':') * 5 + 0x3a;\n          }\n          else {\n            uVar1 = param_2[(int)uVar7];\n            *param_7 = uVar7 + 1;\n            *(undefined8 *)(param_7 + 4) = uVar1;\n          }\n        }\n        else {\n          *(byte **)(param_7 + 4) = pbVar9;\n          *param_7 = uVar7 + 1;\n        }\n      }\n      *(undefined8 *)(param_7 + 8) = 0;\n      return uVar11;\n    }\n    return uVar11;\n  }\n  if (pbVar8[1] == 0) {\n    if (*param_7 == param_1) {\n      if (uVar3 != 0) {\n        uVar1 = *param_2;\n        uVar5 = dcgettext(0,\"%s: option requires an argument -- \\'%c\\'\\n\",5);\n        __fprintf_chk(stderr,1,uVar5,uVar1,uVar11);\n      }\n      param_7[2] = uVar11;\n      return (uint)(*param_3 != ':') * 5 + 0x3a;\n    }\n    pbVar9 = (byte *)param_2[(int)*param_7];\n  }\n  *(byte **)(param_7 + 8) = pbVar9;\n  param_6 = 0;\n  *(undefined8 *)(param_7 + 4) = 0;\n  puVar15 = &DAT_00411038;\nLAB_00408725:\n  uVar3 = FUN_00407d70(param_1,param_2,param_3,param_4,param_5,param_6,param_7,uVar3,puVar15);\n  return uVar3;\n}\n\n",
            "funcName": "FUN_00408390"
        },
        {
            "funcStartAddr": "0x408960",
            "funcEndAddr": "0x4089b6",
            "decompiledFuncCode": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nvoid FUN_00408960(void)\n\n{\n  DAT_00613540 = DAT_006132bc;\n  _DAT_00613544 = DAT_006132b8;\n  FUN_00408390();\n  DAT_006132bc = DAT_00613540;\n  DAT_00613580 = DAT_00613550;\n  _DAT_006132b4 = DAT_00613548;\n  return;\n}\n\n",
            "funcName": "FUN_00408960"
        },
        {
            "funcStartAddr": "0x4089c0",
            "funcEndAddr": "0x4089d8",
            "decompiledFuncCode": "\nvoid FUN_004089c0(void)\n\n{\n  FUN_00408960();\n  return;\n}\n\n",
            "funcName": "FUN_004089c0"
        },
        {
            "funcStartAddr": "0x4089e0",
            "funcEndAddr": "0x4089f3",
            "decompiledFuncCode": "\nvoid FUN_004089e0(void)\n\n{\n  FUN_00408960();\n  return;\n}\n\n",
            "funcName": "FUN_004089e0"
        },
        {
            "funcStartAddr": "0x408a00",
            "funcEndAddr": "0x408a15",
            "decompiledFuncCode": "\nvoid FUN_00408a00(void)\n\n{\n  FUN_00408390();\n  return;\n}\n\n",
            "funcName": "FUN_00408a00"
        },
        {
            "funcStartAddr": "0x408a20",
            "funcEndAddr": "0x408a36",
            "decompiledFuncCode": "\nvoid FUN_00408a20(void)\n\n{\n  FUN_00408960();\n  return;\n}\n\n",
            "funcName": "FUN_00408a20"
        },
        {
            "funcStartAddr": "0x408a40",
            "funcEndAddr": "0x408a58",
            "decompiledFuncCode": "\nvoid FUN_00408a40(void)\n\n{\n  FUN_00408390();\n  return;\n}\n\n",
            "funcName": "FUN_00408a40"
        },
        {
            "funcStartAddr": "0x408a60",
            "funcEndAddr": "0x408acf",
            "decompiledFuncCode": "\nsize_t FUN_00408a60(wchar_t *param_1,byte *param_2,size_t param_3,mbstate_t *param_4)\n\n{\n  char cVar1;\n  size_t sVar2;\n  wchar_t local_1c;\n  \n  if (param_2 == (byte *)0x0) {\n    param_3 = 1;\n    param_2 = (byte *)0x411037;\n  }\n  else {\n    if (param_3 == 0) {\n      return 0xfffffffffffffffe;\n    }\n    if (param_1 != (wchar_t *)0x0) goto LAB_00408a84;\n  }\n  param_1 = &local_1c;\nLAB_00408a84:\n  sVar2 = mbrtowc(param_1,(char *)param_2,param_3,param_4);\n  if ((0xfffffffffffffffd < sVar2) && (cVar1 = FUN_00408ba0(0), cVar1 == '\\0')) {\n    sVar2 = 1;\n    *param_1 = (uint)*param_2;\n  }\n  return sVar2;\n}\n\n",
            "funcName": "FUN_00408a60"
        },
        {
            "funcStartAddr": "0x408ae0",
            "funcEndAddr": "0x408b39",
            "decompiledFuncCode": "\nulong FUN_00408ae0(void **param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  void *__ptr;\n  int *piVar1;\n  ulong local_10;\n  \n  __ptr = (void *)FUN_00409290(0,&local_10,param_2,param_3);\n  if (__ptr == (void *)0x0) {\n    local_10 = 0xffffffff;\n  }\n  else if (local_10 < 0x80000000) {\n    *param_1 = __ptr;\n    local_10 = local_10 & 0xffffffff;\n  }\n  else {\n    free(__ptr);\n    piVar1 = __errno_location();\n    *piVar1 = 0x4b;\n    local_10 = 0xffffffff;\n  }\n  return local_10;\n}\n\n",
            "funcName": "FUN_00408ae0"
        },
        {
            "funcStartAddr": "0x408b40",
            "funcEndAddr": "0x408b9c",
            "decompiledFuncCode": "\nulong FUN_00408b40(uint *param_1)\n\n{\n  uint uVar1;\n  long lVar2;\n  ulong uVar3;\n  int *piVar4;\n  \n  lVar2 = __fpending();\n  uVar1 = *param_1;\n  uVar3 = FUN_00409170(param_1);\n  if ((uVar1 & 0x20) == 0) {\n    if ((int)uVar3 == 0) {\n      return uVar3;\n    }\n    if (lVar2 == 0) {\n      piVar4 = __errno_location();\n      return (ulong)-(uint)(*piVar4 != 9);\n    }\n  }\n  else if ((int)uVar3 == 0) {\n    piVar4 = __errno_location();\n    *piVar4 = 0;\n    return 0xffffffff;\n  }\n  return 0xffffffff;\n}\n\n",
            "funcName": "FUN_00408b40"
        },
        {
            "funcStartAddr": "0x408ba0",
            "funcEndAddr": "0x408bf6",
            "decompiledFuncCode": "\nbool FUN_00408ba0(int param_1)\n\n{\n  bool bVar1;\n  byte *pbVar2;\n  long lVar3;\n  byte *pbVar4;\n  byte *pbVar5;\n  bool bVar6;\n  bool bVar7;\n  bool bVar8;\n  byte bVar9;\n  \n  bVar9 = 0;\n  pbVar2 = (byte *)setlocale(param_1,(char *)0x0);\n  bVar1 = true;\n  bVar6 = false;\n  bVar8 = pbVar2 == (byte *)0x0;\n  if (!bVar8) {\n    lVar3 = 2;\n    pbVar4 = pbVar2;\n    pbVar5 = &DAT_0041103c;\n    do {\n      if (lVar3 == 0) break;\n      lVar3 = lVar3 + -1;\n      bVar6 = *pbVar4 < *pbVar5;\n      bVar8 = *pbVar4 == *pbVar5;\n      pbVar4 = pbVar4 + (ulong)bVar9 * -2 + 1;\n      pbVar5 = pbVar5 + (ulong)bVar9 * -2 + 1;\n    } while (bVar8);\n    bVar1 = false;\n    bVar7 = false;\n    bVar6 = (!bVar6 && !bVar8) == bVar6;\n    if (!bVar6) {\n      lVar3 = 6;\n      pbVar4 = (byte *)\"POSIX\";\n      do {\n        if (lVar3 == 0) break;\n        lVar3 = lVar3 + -1;\n        bVar7 = *pbVar2 < *pbVar4;\n        bVar6 = *pbVar2 == *pbVar4;\n        pbVar2 = pbVar2 + (ulong)bVar9 * -2 + 1;\n        pbVar4 = pbVar4 + (ulong)bVar9 * -2 + 1;\n      } while (bVar6);\n      return (!bVar7 && !bVar6) != bVar7;\n    }\n  }\n  return bVar1;\n}\n\n",
            "funcName": "FUN_00408ba0"
        },
        {
            "funcStartAddr": "0x408c00",
            "funcEndAddr": "0x409154",
            "decompiledFuncCode": "\n/* WARNING: Could not reconcile some variable overlaps */\n\nchar * FUN_00408c00(void)\n\n{\n  char cVar1;\n  int iVar2;\n  uint uVar3;\n  uint uVar4;\n  char *__s1;\n  size_t sVar5;\n  size_t sVar6;\n  char *pcVar7;\n  size_t __n;\n  char *__file;\n  FILE *__stream;\n  byte *pbVar8;\n  long lVar9;\n  undefined8 *puVar10;\n  long lVar11;\n  ulong uVar12;\n  undefined8 *puVar13;\n  char *__ptr;\n  bool bVar14;\n  long local_d0;\n  undefined8 local_c0;\n  undefined8 local_b8;\n  undefined auStack_80 [8];\n  undefined8 local_78;\n  \n  __s1 = nl_langinfo(0xe);\n  if (__s1 == (char *)0x0) {\n    __s1 = \"\";\n  }\n  if (DAT_00613578 != (char *)0x0) goto LAB_00408c3a;\n  pcVar7 = getenv(\"CHARSETALIASDIR\");\n  if ((pcVar7 == (char *)0x0) || (*pcVar7 == '\\0')) {\n    sVar6 = 0x73;\n    sVar5 = 0x65;\n    __n = 100;\n    pcVar7 = \n    \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\"\n    ;\nLAB_00408d25:\n    __file = (char *)malloc(sVar6);\n    if (__file != (char *)0x0) {\n      memcpy(__file,pcVar7,__n);\n      __file[__n] = '/';\n      goto LAB_00408d46;\n    }\n  }\n  else {\n    __n = strlen(pcVar7);\n    if (__n == 0) {\n      sVar6 = 0xe;\n    }\n    else {\n      if (pcVar7[__n - 1] != '/') {\n        sVar6 = __n + 0xf;\n        sVar5 = __n + 1;\n        goto LAB_00408d25;\n      }\n      sVar6 = __n + 0xe;\n    }\n    __file = (char *)malloc(sVar6);\n    if (__file != (char *)0x0) {\n      memcpy(__file,pcVar7,__n);\n      sVar5 = __n;\nLAB_00408d46:\n      puVar13 = (undefined8 *)(__file + sVar5);\n      *puVar13 = 0x2e74657372616863;\n      *(undefined2 *)((long)puVar13 + 0xc) = 0x73;\n      *(undefined4 *)(puVar13 + 1) = 0x61696c61;\n      iVar2 = open(__file,0);\n      if (-1 < iVar2) {\n        __stream = fdopen(iVar2,\"r\");\n        local_d0 = 0;\n        if (__stream != (FILE *)0x0) {\n          pcVar7 = (char *)0x0;\nLAB_00408de0:\n          pbVar8 = (byte *)__stream->_IO_read_ptr;\n          if (__stream->_IO_read_end <= pbVar8) goto LAB_00408f6c;\n          do {\n            __stream->_IO_read_ptr = (char *)(pbVar8 + 1);\n            uVar4 = (uint)*pbVar8;\n            __ptr = pcVar7;\n            while( true ) {\n              pcVar7 = __ptr;\n              if ((uVar4 - 9 < 2) || (uVar4 == 0x20)) goto LAB_00408de0;\n              if (uVar4 == 0x23) goto LAB_00408fd1;\n              ungetc(uVar4,__stream);\n              iVar2 = fscanf(__stream,\"%50s %50s\",&local_b8,&local_78);\n              puVar13 = &local_b8;\n              if (iVar2 < 2) goto LAB_00408f7f;\n              do {\n                puVar10 = puVar13;\n                uVar3 = *(uint *)puVar10 + 0xfefefeff & ~*(uint *)puVar10;\n                uVar4 = uVar3 & 0x80808080;\n                puVar13 = (undefined8 *)((long)puVar10 + 4);\n              } while (uVar4 == 0);\n              bVar14 = (uVar3 & 0x8080) == 0;\n              if (bVar14) {\n                uVar4 = uVar4 >> 0x10;\n              }\n              if (bVar14) {\n                puVar13 = (undefined8 *)((long)puVar10 + 6);\n              }\n              lVar11 = (long)puVar13 +\n                       ((-3 - (ulong)CARRY1((byte)uVar4,(byte)uVar4)) - (long)&local_b8);\n              puVar13 = &local_78;\n              do {\n                puVar10 = puVar13;\n                uVar3 = *(uint *)puVar10 + 0xfefefeff & ~*(uint *)puVar10;\n                uVar4 = uVar3 & 0x80808080;\n                puVar13 = (undefined8 *)((long)puVar10 + 4);\n              } while (uVar4 == 0);\n              bVar14 = (uVar3 & 0x8080) == 0;\n              if (bVar14) {\n                uVar4 = uVar4 >> 0x10;\n              }\n              if (bVar14) {\n                puVar13 = (undefined8 *)((long)puVar10 + 6);\n              }\n              local_c0 = (long)puVar13 +\n                         ((-3 - (ulong)CARRY1((byte)uVar4,(byte)uVar4)) - (long)&local_78);\n              lVar9 = lVar11 + local_c0;\n              if (local_d0 == 0) {\n                pcVar7 = (char *)malloc(lVar9 + 3);\n              }\n              else {\n                lVar9 = lVar9 + local_d0;\n                pcVar7 = (char *)realloc(__ptr,lVar9 + 3);\n              }\n              local_d0 = lVar9 + 2;\n              if (pcVar7 == (char *)0x0) {\n                pcVar7 = \"\";\n                free(__ptr);\n                FUN_00409170(__stream);\n                goto LAB_00408d84;\n              }\n              uVar12 = lVar11 + 1;\n              puVar13 = (undefined8 *)(pcVar7 + (-2 - lVar11) + (local_d0 - local_c0));\n              uVar4 = (uint)uVar12;\n              if (uVar4 < 8) {\n                if ((uVar12 & 4) == 0) {\n                  if (uVar4 != 0) {\n                    *(undefined *)puVar13 = (undefined)local_b8;\n                    if ((uVar12 & 2) != 0) {\n                      *(undefined2 *)((long)puVar13 + ((uVar12 & 0xffffffff) - 2)) =\n                           *(undefined2 *)((long)&local_b8 + ((uVar12 & 0xffffffff) - 2));\n                    }\n                  }\n                }\n                else {\n                  *(undefined4 *)puVar13 = (undefined4)local_b8;\n                  *(undefined4 *)((long)puVar13 + ((uVar12 & 0xffffffff) - 4)) =\n                       *(undefined4 *)((long)&local_b8 + ((uVar12 & 0xffffffff) - 4));\n                }\n              }\n              else {\n                *puVar13 = CONCAT44(local_b8._4_4_,(undefined4)local_b8);\n                *(undefined8 *)((long)puVar13 + ((uVar12 & 0xffffffff) - 8)) =\n                     *(undefined8 *)((long)&local_b8 + ((uVar12 & 0xffffffff) - 8));\n                lVar11 = (long)puVar13 - ((ulong)(puVar13 + 1) & 0xfffffffffffffff8);\n                uVar4 = uVar4 + (int)lVar11 & 0xfffffff8;\n                if (7 < uVar4) {\n                  uVar3 = 0;\n                  do {\n                    uVar12 = (ulong)uVar3;\n                    uVar3 = uVar3 + 8;\n                    *(undefined8 *)(((ulong)(puVar13 + 1) & 0xfffffffffffffff8) + uVar12) =\n                         *(undefined8 *)((long)&local_b8 + (uVar12 - lVar11));\n                  } while (uVar3 < uVar4);\n                }\n              }\n              uVar12 = local_c0 + 1;\n              puVar13 = (undefined8 *)(pcVar7 + (local_d0 - local_c0) + -1);\n              uVar4 = (uint)uVar12;\n              if (uVar4 < 8) {\n                if ((uVar12 & 4) == 0) {\n                  if (uVar4 != 0) {\n                    *(undefined *)puVar13 = (undefined)local_78;\n                    if ((uVar12 & 2) != 0) {\n                      *(undefined2 *)((long)puVar13 + ((uVar12 & 0xffffffff) - 2)) =\n                           *(undefined2 *)((long)auStack_80 + (uVar12 & 0xffffffff) + 6);\n                    }\n                  }\n                }\n                else {\n                  *(undefined4 *)puVar13 = (undefined4)local_78;\n                  *(undefined4 *)((long)puVar13 + ((uVar12 & 0xffffffff) - 4)) =\n                       *(undefined4 *)((long)auStack_80 + (uVar12 & 0xffffffff) + 4);\n                }\n              }\n              else {\n                *puVar13 = CONCAT44(local_78._4_4_,(undefined4)local_78);\n                *(undefined8 *)((long)puVar13 + ((uVar12 & 0xffffffff) - 8)) =\n                     *(undefined8 *)((long)auStack_80 + (uVar12 & 0xffffffff));\n                lVar11 = (long)puVar13 - ((ulong)(puVar13 + 1) & 0xfffffffffffffff8);\n                uVar4 = uVar4 + (int)lVar11 & 0xfffffff8;\n                if (7 < uVar4) {\n                  uVar3 = 0;\n                  do {\n                    uVar12 = (ulong)uVar3;\n                    uVar3 = uVar3 + 8;\n                    *(undefined8 *)(((ulong)(puVar13 + 1) & 0xfffffffffffffff8) + uVar12) =\n                         *(undefined8 *)((long)&local_78 + (uVar12 - lVar11));\n                  } while (uVar3 < uVar4);\n                }\n              }\n              pbVar8 = (byte *)__stream->_IO_read_ptr;\n              if (pbVar8 < __stream->_IO_read_end) break;\nLAB_00408f6c:\n              uVar4 = __uflow(__stream);\n              __ptr = pcVar7;\n              if (uVar4 == 0xffffffff) goto LAB_00408f7f;\n            }\n          } while( true );\n        }\n        close(iVar2);\n      }\n      goto LAB_00408d7e;\n    }\n  }\n  DAT_00613578 = \"\";\nLAB_00408c3a:\n  cVar1 = *DAT_00613578;\n  pcVar7 = DAT_00613578;\n  do {\n    if (cVar1 == '\\0') {\nLAB_00408c94:\n      if (*__s1 == '\\0') {\n        __s1 = \"ASCII\";\n      }\n      return __s1;\n    }\n    iVar2 = strcmp(__s1,pcVar7);\n    if ((iVar2 == 0) || ((cVar1 == '*' && (pcVar7[1] == '\\0')))) {\n      sVar6 = strlen(pcVar7);\n      __s1 = pcVar7 + sVar6 + 1;\n      goto LAB_00408c94;\n    }\n    sVar6 = strlen(pcVar7);\n    sVar5 = strlen(pcVar7 + sVar6 + 1);\n    pcVar7 = pcVar7 + sVar6 + 1 + sVar5 + 1;\n    cVar1 = *pcVar7;\n  } while( true );\nLAB_00408fd1:\n  do {\n    pbVar8 = (byte *)__stream->_IO_read_ptr;\n    if (pbVar8 < __stream->_IO_read_end) {\n      __stream->_IO_read_ptr = (char *)(pbVar8 + 1);\n      uVar4 = (uint)*pbVar8;\n      bVar14 = true;\n    }\n    else {\n      uVar4 = __uflow(__stream);\n      bVar14 = uVar4 != 0xffffffff;\n    }\n  } while ((uVar4 != 10) && (bVar14));\n  if (uVar4 == 0xffffffff) goto LAB_00408f7f;\n  goto LAB_00408de0;\nLAB_00408f7f:\n  FUN_00409170(__stream);\n  if (local_d0 == 0) {\nLAB_00408d7e:\n    pcVar7 = \"\";\n  }\n  else {\n    pcVar7[local_d0] = '\\0';\n  }\nLAB_00408d84:\n  free(__file);\n  DAT_00613578 = pcVar7;\n  goto LAB_00408c3a;\n}\n\n",
            "funcName": "FUN_00408c00"
        },
        {
            "funcStartAddr": "0x409170",
            "funcEndAddr": "0x4091e8",
            "decompiledFuncCode": "\nint FUN_00409170(FILE *param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  int *piVar3;\n  __off_t _Var4;\n  \n  iVar1 = fileno(param_1);\n  if (-1 < iVar1) {\n    iVar1 = __freading();\n    if (iVar1 != 0) {\n      iVar1 = fileno(param_1);\n      _Var4 = lseek(iVar1,0,1);\n      if (_Var4 == -1) goto LAB_004091d7;\n    }\n    iVar1 = FUN_004091f0(param_1);\n    if (iVar1 != 0) {\n      piVar3 = __errno_location();\n      iVar1 = *piVar3;\n      iVar2 = fclose(param_1);\n      if (iVar1 != 0) {\n        *piVar3 = iVar1;\n        iVar2 = -1;\n      }\n      return iVar2;\n    }\n  }\nLAB_004091d7:\n  iVar1 = fclose(param_1);\n  return iVar1;\n}\n\n",
            "funcName": "FUN_00409170"
        },
        {
            "funcStartAddr": "0x4091f0",
            "funcEndAddr": "0x40922b",
            "decompiledFuncCode": "\nvoid FUN_004091f0(FILE *param_1)\n\n{\n  int iVar1;\n  \n  if (param_1 != (FILE *)0x0) {\n    iVar1 = __freading();\n    if ((iVar1 != 0) && ((param_1->_flags & 0x100U) != 0)) {\n      FUN_00409230(param_1,0,1);\n      fflush(param_1);\n      return;\n    }\n  }\n  fflush(param_1);\n  return;\n}\n\n",
            "funcName": "FUN_004091f0"
        },
        {
            "funcStartAddr": "0x409230",
            "funcEndAddr": "0x409286",
            "decompiledFuncCode": "\nulong FUN_00409230(FILE *param_1,__off_t param_2,int param_3)\n\n{\n  uint uVar1;\n  int __fd;\n  ulong uVar2;\n  \n  if (((param_1->_IO_read_end == param_1->_IO_read_ptr) &&\n      (param_1->_IO_write_ptr == param_1->_IO_write_base)) &&\n     (param_1->_IO_save_base == (char *)0x0)) {\n    __fd = fileno(param_1);\n    uVar2 = lseek(__fd,param_2,param_3);\n    if (uVar2 != 0xffffffffffffffff) {\n      param_1->_flags = param_1->_flags & 0xffffffef;\n      param_1->_offset = uVar2;\n      uVar2 = 0;\n    }\n    return uVar2;\n  }\n  uVar1 = fseeko(param_1,param_2,param_3);\n  return (ulong)uVar1;\n}\n\n",
            "funcName": "FUN_00409230"
        },
        {
            "funcStartAddr": "0x409290",
            "funcEndAddr": "0x40aca4",
            "decompiledFuncCode": "\n/* WARNING: Removing unreachable block (ram,0x0040aacc) */\n/* WARNING: Removing unreachable block (ram,0x0040ac0d) */\n/* WARNING: Removing unreachable block (ram,0x0040aae0) */\n/* WARNING: Removing unreachable block (ram,0x00409fb4) */\n/* WARNING: Removing unreachable block (ram,0x00409580) */\n/* WARNING: Type propagation algorithm not settling */\n/* WARNING: Could not reconcile some variable overlaps */\n\nundefined2 *\nFUN_00409290(undefined2 *param_1,undefined8 *param_2,undefined2 *param_3,undefined8 param_4)\n\n{\n  undefined8 uVar1;\n  unkbyte10 Var2;\n  undefined uVar3;\n  uint uVar4;\n  void *pvVar5;\n  char *pcVar6;\n  uint uVar7;\n  byte bVar8;\n  char cVar9;\n  int iVar10;\n  ulong uVar11;\n  ulong uVar12;\n  undefined *__n;\n  undefined2 *puVar13;\n  undefined *puVar14;\n  uint *puVar15;\n  int *piVar16;\n  undefined2 *puVar17;\n  undefined2 *puVar18;\n  ulong uVar19;\n  undefined2 *puVar20;\n  char *pcVar21;\n  undefined2 *puVar22;\n  undefined *puVar23;\n  undefined2 *puVar24;\n  char *pcVar25;\n  char *pcVar26;\n  undefined *puVar27;\n  size_t sVar28;\n  uint uVar29;\n  long lVar30;\n  undefined *puVar31;\n  undefined8 *puVar32;\n  bool bVar33;\n  ushort in_FPUControlWord;\n  float10 fVar34;\n  undefined auStack_6f8 [4];\n  uint local_6f4;\n  undefined2 *local_6f0;\n  undefined2 *local_6e8;\n  undefined *local_6e0;\n  undefined8 *local_6d8;\n  undefined2 *local_6d0;\n  undefined2 *local_6c8;\n  long local_6c0;\n  undefined8 local_6b8;\n  undefined *local_6b0;\n  undefined local_6a8 [4];\n  undefined auStack_6a4 [12];\n  undefined2 *local_698;\n  undefined2 *local_690;\n  int local_684;\n  undefined4 local_680;\n  uint local_67c;\n  undefined local_678 [8];\n  undefined2 *local_670;\n  undefined2 auStack_668 [112];\n  long local_588;\n  undefined8 *local_580;\n  long local_578;\n  ulong local_570;\n  undefined8 auStack_568 [78];\n  undefined2 local_2f8 [356];\n  \n  local_6d8 = param_2;\n  local_690 = param_1;\n  iVar10 = FUN_0040afd0(param_3,&local_588,local_678);\n  if (iVar10 < 0) {\n    return (undefined2 *)0x0;\n  }\n  iVar10 = FUN_0040adb0(param_4,local_678);\n  if (iVar10 < 0) {\n    if (local_580 != auStack_568) {\n      free(local_580);\n    }\n    if (local_670 != auStack_668) {\n      free(local_670);\n    }\n    piVar16 = __errno_location();\n    *piVar16 = 0x16;\n    return (undefined2 *)0x0;\n  }\n  uVar11 = local_578 + 7;\n  if (uVar11 < 7) {\n    uVar11 = 0xffffffffffffffff;\n  }\n  uVar12 = uVar11 + local_570;\n  puVar27 = auStack_6f8;\n  if ((!CARRY8(uVar11,local_570)) &&\n     (sVar28 = uVar12 + 6, puVar27 = auStack_6f8, uVar12 < 0xfffffffffffffffa)) {\n    if (sVar28 < 4000) {\n      local_6e0 = (undefined *)0x0;\n      lVar30 = -(uVar12 + 0x1d & 0xfffffffffffffff0);\n      puVar27 = auStack_6f8 + lVar30;\n      local_6b0 = (undefined *)((long)&local_6f0 + lVar30);\nLAB_00409354:\n      puVar31 = (undefined *)0x0;\n      if (local_690 != (undefined2 *)0x0) {\n        puVar31 = (undefined *)*local_6d8;\n      }\n      __n = (undefined *)0x0;\n      local_6c0 = 0;\n      puVar24 = (undefined2 *)*local_580;\n      puVar20 = local_690;\n      _local_6a8 = (int *)param_3;\n      puVar32 = local_580;\n      puVar14 = __n;\n      if (puVar24 == param_3) goto LAB_00409508;\n      do {\n        puVar24 = (undefined2 *)((long)puVar24 - (long)_local_6a8);\n        __n = puVar14 + (long)puVar24;\n        puVar13 = puVar20;\n        if (CARRY8((ulong)puVar14,(ulong)puVar24)) {\n          if (puVar31 != (undefined *)0xffffffffffffffff) goto LAB_00409880;\n          __n = (undefined *)0xffffffffffffffff;\n        }\n        else if (puVar31 < __n) {\n          if (puVar31 == (undefined *)0x0) {\n            if (__n < (undefined *)0xd) {\n              puVar31 = (undefined *)0xc;\n            }\n            else {\nLAB_0040949e:\n              puVar31 = __n;\n              if (__n == (undefined *)0xffffffffffffffff) goto LAB_00409880;\n            }\n          }\n          else {\n            if ((long)puVar31 < 0) goto LAB_00409880;\n            puVar31 = (undefined *)((long)puVar31 * 2);\n            if (puVar31 < __n) goto LAB_0040949e;\n          }\n          if ((puVar20 == (undefined2 *)0x0) || (puVar20 == local_690)) {\n            local_6b8 = (undefined2 *)_local_6a8;\n            _local_6a8 = (float10)CONCAT91(stack0xfffffffffffff959,puVar20 == local_690);\n            local_698 = puVar24;\n            *(undefined8 *)(puVar27 + -8) = 0x4093fc;\n            puVar13 = (undefined2 *)malloc((size_t)puVar31);\n            if (puVar13 == (undefined2 *)0x0) goto LAB_00409880;\n            puVar24 = local_698;\n            _local_6a8 = (int *)local_6b8;\n            if ((puVar14 != (undefined *)0x0) && (local_6a8[0] != '\\0')) {\n              _local_6a8 = (float10)CONCAT28(auStack_6a4._4_2_,local_6b8);\n              *(undefined8 *)(puVar27 + -8) = 0x40944a;\n              puVar13 = (undefined2 *)memcpy(puVar13,puVar20,(size_t)puVar14);\n              puVar24 = local_698;\n            }\n          }\n          else {\n            local_698 = puVar24;\n            *(undefined8 *)(puVar27 + -8) = 0x4094df;\n            puVar13 = (undefined2 *)realloc(puVar20,(size_t)puVar31);\n            if (puVar13 == (undefined2 *)0x0) {\nLAB_00409a95:\n              *(undefined8 *)(puVar27 + -8) = 0x409a9a;\n              piVar16 = __errno_location();\n              _local_6a8 = (float10)CONCAT28(auStack_6a4._4_2_,piVar16);\n              goto LAB_00409aa8;\n            }\n            puVar24 = local_698;\n          }\n        }\n        *(undefined8 *)(puVar27 + -8) = 0x409508;\n        memcpy((undefined *)((long)puVar13 + (long)puVar14),_local_6a8,(size_t)puVar24);\n        puVar20 = puVar13;\nLAB_00409508:\n        do {\n          if (local_588 == local_6c0) {\n            puVar14 = __n + 1;\n            puVar24 = puVar20;\n            if ((undefined *)0xfffffffffffffffe < __n) {\n              if (puVar31 == (undefined *)0xffffffffffffffff) goto LAB_0040a692;\n              goto LAB_00409880;\n            }\n            if (puVar14 <= puVar31) goto LAB_0040a692;\n            if (puVar31 == (undefined *)0x0) {\n              if (puVar14 < (undefined *)0xd) {\n                puVar31 = (undefined *)0xc;\n              }\n              else {\nLAB_0040ac6f:\n                puVar31 = puVar14;\n                if (puVar14 == (undefined *)0xffffffffffffffff) goto LAB_00409880;\n              }\n            }\n            else {\n              if ((long)puVar31 < 0) goto LAB_00409880;\n              puVar31 = (undefined *)((long)puVar31 * 2);\n              if (puVar31 < puVar14) goto LAB_0040ac6f;\n            }\n            bVar33 = puVar20 == local_690;\n            if ((puVar20 == (undefined2 *)0x0) || (bVar33)) {\n              *(undefined8 *)(puVar27 + -8) = 0x40ac29;\n              puVar24 = (undefined2 *)malloc((size_t)puVar31);\n              if (puVar24 == (undefined2 *)0x0) goto LAB_00409880;\n              if ((__n != (undefined *)0x0) && (bVar33)) {\n                *(undefined8 *)(puVar27 + -8) = 0x40ac55;\n                puVar24 = (undefined2 *)memcpy(puVar24,puVar20,(size_t)__n);\n              }\n            }\n            else {\n              *(undefined8 *)(puVar27 + -8) = 0x40a686;\n              puVar24 = (undefined2 *)realloc(puVar20,(size_t)puVar31);\n              if (puVar24 == (undefined2 *)0x0) goto LAB_00409a95;\n            }\nLAB_0040a692:\n            *(undefined *)((long)puVar24 + (long)__n) = 0;\n            if ((puVar14 < puVar31) && (puVar24 != local_690)) {\n              *(undefined8 *)(puVar27 + -8) = 0x40a6b0;\n              puVar20 = (undefined2 *)realloc(puVar24,(size_t)puVar14);\n              if (puVar20 != (undefined2 *)0x0) {\n                puVar24 = puVar20;\n              }\n            }\n            puVar31 = local_6e0;\n            if (local_6e0 != (undefined *)0x0) {\n              *(undefined8 *)(puVar27 + -8) = 0x40a6cb;\n              free(puVar31);\n            }\n            if (local_580 != auStack_568) {\n              *(undefined8 *)(puVar27 + -8) = 0x40a6e7;\n              free(local_580);\n            }\n            if (local_670 != auStack_668) {\n              *(undefined8 *)(puVar27 + -8) = 0x40a703;\n              free(local_670);\n            }\n            *local_6d8 = __n;\n            return puVar24;\n          }\n          bVar8 = *(byte *)(puVar32 + 9);\n          lVar30 = puVar32[10];\n          if (bVar8 == 0x25) {\n            if (lVar30 != -1) goto LAB_00409fbc;\n            puVar14 = __n + 1;\n            puVar24 = puVar20;\n            if (__n < (undefined *)0xffffffffffffffff) {\n              if (puVar31 < puVar14) {\n                if (puVar31 == (undefined *)0x0) {\n                  if (puVar14 < (undefined *)0xd) {\n                    puVar31 = (undefined *)0xc;\n                  }\n                  else {\nLAB_0040a232:\n                    puVar31 = puVar14;\n                    if (puVar14 == (undefined *)0xffffffffffffffff) goto LAB_00409880;\n                  }\n                }\n                else {\n                  if ((long)puVar31 < 0) goto LAB_00409880;\n                  puVar31 = (undefined *)((long)puVar31 * 2);\n                  if (puVar31 < puVar14) goto LAB_0040a232;\n                }\n                if ((puVar20 == (undefined2 *)0x0) || (puVar20 == local_690)) {\n                  local_698 = (undefined2 *)\n                              ((ulong)local_698 & 0xffffffffffffff00 | (ulong)(puVar20 == local_690)\n                              );\n                  *(undefined8 *)(puVar27 + -8) = 0x40a17e;\n                  puVar24 = (undefined2 *)malloc((size_t)puVar31);\n                  if (puVar24 == (undefined2 *)0x0) goto LAB_00409880;\n                  if ((__n != (undefined *)0x0) && ((char)local_698 != '\\0')) {\n                    *(undefined8 *)(puVar27 + -8) = 0x40a1b0;\n                    puVar24 = (undefined2 *)memcpy(puVar24,puVar20,(size_t)__n);\n                  }\n                }\n                else {\n                  *(undefined8 *)(puVar27 + -8) = 0x409976;\n                  puVar24 = (undefined2 *)realloc(puVar20,(size_t)puVar31);\n                  if (puVar24 == (undefined2 *)0x0) goto LAB_00409a95;\n                }\n              }\n            }\n            else {\n              if (puVar31 != (undefined *)0xffffffffffffffff) goto LAB_00409880;\n              puVar14 = (undefined *)0xffffffffffffffff;\n            }\n            *(undefined *)((long)puVar24 + (long)__n) = 0x25;\n            puVar20 = puVar24;\n            __n = puVar14;\n            goto LAB_00409987;\n          }\n          if (lVar30 == -1) goto LAB_00409fbc;\n          puVar15 = (uint *)(local_670 + lVar30 * 0x10);\n          uVar4 = *puVar15;\n          local_698 = (undefined2 *)((ulong)local_698 & 0xffffffff00000000 | (ulong)uVar4);\n          if (bVar8 == 0x6e) {\n            switch(uVar4) {\n            case 0x12:\n              **(undefined **)(puVar15 + 4) = (char)__n;\n              break;\n            case 0x13:\n              **(undefined2 **)(puVar15 + 4) = (short)__n;\n              break;\n            case 0x14:\n              **(undefined4 **)(puVar15 + 4) = (int)__n;\n              break;\n            case 0x15:\n            case 0x16:\n              **(undefined8 **)(puVar15 + 4) = __n;\n              break;\n            default:\nswitchD_004099ec_caseD_5:\n                    /* WARNING: Subroutine does not return */\n              *(undefined8 *)(puVar27 + -8) = 0x401a98;\n              abort();\n            }\n          }\n          else {\n            bVar8 = bVar8 & 0xdf;\n            if (((((byte)(bVar8 + 0xbb) < 3) || (bVar8 == 0x41)) && (uVar4 == 0xc)) &&\n               (fVar34 = *(float10 *)(puVar15 + 4), fVar34 == fVar34 + fVar34)) {\n              pcVar21 = (char *)puVar32[4];\n              local_6b8._0_4_ = *(uint *)(puVar32 + 2);\n              if ((char *)puVar32[3] == pcVar21) {\n                puVar24 = (undefined2 *)0x0;\n              }\n              else {\n                puVar13 = (undefined2 *)puVar32[5];\n                if (puVar13 == (undefined2 *)0xffffffffffffffff) {\n                  puVar24 = (undefined2 *)0x0;\n                  local_698 = puVar13;\n                  pcVar25 = (char *)puVar32[3];\n                  do {\n                    pcVar26 = pcVar25 + 1;\n                    uVar11 = 0xffffffffffffffff;\n                    if (puVar24 < (undefined2 *)0x199999999999999a) {\n                      uVar11 = (long)puVar24 * 10;\n                    }\n                    puVar24 = (undefined2 *)((long)(*pcVar25 + -0x30) + uVar11);\n                    pcVar6 = pcVar26;\n                    if (CARRY8((long)(*pcVar25 + -0x30),uVar11)) {\n                      do {\n                        puVar24 = local_698;\n                        if (pcVar21 == pcVar6) goto LAB_00409810;\n                        pcVar26 = pcVar6 + 1;\n                        cVar9 = *pcVar6;\n                        pcVar6 = pcVar26;\n                      } while (cVar9 != '0');\n                      puVar24 = (undefined2 *)0xffffffffffffffff;\n                    }\n                    pcVar25 = pcVar26;\n                  } while (pcVar21 != pcVar26);\n                }\n                else {\n                  if (*(int *)(local_670 + (long)puVar13 * 0x10) != 5) goto LAB_00409fbc;\n                  iVar10 = *(int *)((long)(local_670 + (long)puVar13 * 0x10) + 0x10);\n                  puVar24 = (undefined2 *)(long)iVar10;\n                  if (iVar10 < 0) {\n                    local_6b8._0_4_ = (uint)local_6b8 | 2;\n                    puVar24 = (undefined2 *)-(long)(undefined2 *)(long)iVar10;\n                  }\n                }\n              }\nLAB_00409810:\n              pcVar21 = (char *)puVar32[7];\n              if ((char *)puVar32[6] == pcVar21) {\nLAB_00409ec0:\n                puVar18 = (undefined2 *)0xc;\n                if (bVar8 != 0x41) {\n                  puVar18 = (undefined2 *)0x12;\n                }\n                puVar13 = (undefined2 *)0x0;\n                if (bVar8 != 0x41) {\n                  puVar13 = (undefined2 *)0x6;\n                }\n              }\n              else {\n                if (puVar32[8] == -1) {\n                  pcVar25 = (char *)puVar32[6] + 1;\n                  puVar13 = (undefined2 *)0x0;\n                  if (pcVar21 != pcVar25) {\n                    do {\n                      pcVar26 = pcVar25 + 1;\n                      uVar11 = 0xffffffffffffffff;\n                      if (puVar13 < (undefined2 *)0x199999999999999a) {\n                        uVar11 = (long)puVar13 * 10;\n                      }\n                      puVar13 = (undefined2 *)((long)(*pcVar25 + -0x30) + uVar11);\n                      pcVar6 = pcVar26;\n                      if (CARRY8((long)(*pcVar25 + -0x30),uVar11)) {\n                        do {\n                          if (pcVar21 == pcVar6) goto LAB_00409880;\n                          pcVar26 = pcVar6 + 1;\n                          cVar9 = *pcVar6;\n                          pcVar6 = pcVar26;\n                        } while (cVar9 != '0');\n                        puVar13 = (undefined2 *)0xffffffffffffffff;\n                      }\n                      pcVar25 = pcVar26;\n                    } while (pcVar21 != pcVar26);\n                    goto LAB_0040984c;\n                  }\n                }\n                else {\n                  if (*(int *)(local_670 + puVar32[8] * 0x10) != 5) goto LAB_00409fbc;\n                  iVar10 = *(int *)((long)(local_670 + puVar32[8] * 0x10) + 0x10);\n                  puVar13 = (undefined2 *)(long)iVar10;\n                  if (iVar10 < 0) goto LAB_00409ec0;\nLAB_0040984c:\n                  if (puVar13 != (undefined2 *)0x0) {\n                    puVar18 = puVar13 + 6;\n                    if (puVar13 < (undefined2 *)0xfffffffffffffff4) goto LAB_00409ede;\n                    goto LAB_00409880;\n                  }\n                }\n                puVar18 = (undefined2 *)0xc;\n              }\nLAB_00409ede:\n              if (puVar18 <= puVar24) {\n                puVar18 = puVar24;\n              }\n              puVar17 = (undefined2 *)((long)puVar18 + 1);\n              local_698 = puVar17;\n              if (puVar18 == (undefined2 *)0xffffffffffffffff) goto LAB_00409880;\n              if (puVar17 < (undefined2 *)0x2bd) {\n                puVar18 = local_2f8;\n              }\n              else {\n                local_6d0 = puVar24;\n                local_6c8 = puVar13;\n                local_6b8 = (undefined2 *)\n                            ((ulong)local_6b8 & 0xffffffff00000000 | (ulong)(uint)local_6b8);\n                _local_6a8 = fVar34;\n                if (puVar17 == (undefined2 *)0xffffffffffffffff) goto LAB_00409880;\n                *(undefined8 *)(puVar27 + -8) = 0x409f32;\n                puVar18 = (undefined2 *)malloc((size_t)puVar17);\n                puVar13 = local_6c8;\n                puVar24 = local_6d0;\n                fVar34 = _local_6a8;\n                if (puVar18 == (undefined2 *)0x0) goto LAB_00409880;\n              }\n              uVar4 = local_680 & 0xffff0000;\n              uVar29 = (uint)in_FPUControlWord;\n              local_680 = uVar4 | uVar29;\n              uVar7 = local_680;\n              local_680 = local_680 | 0x300;\n              if ((float10)0 <= fVar34) {\n                if (((uint)local_6b8 & 4) == 0) {\n                  puVar17 = puVar18;\n                  if (((uint)local_6b8 & 8) != 0) {\n                    puVar17 = (undefined2 *)((long)puVar18 + 1);\n                    *(undefined *)puVar18 = 0x20;\n                  }\n                }\n                else {\n                  *(undefined *)puVar18 = 0x2b;\n                  puVar17 = (undefined2 *)((long)puVar18 + 1);\n                }\n              }\n              else {\n                *(undefined *)puVar18 = 0x2d;\n                fVar34 = -fVar34;\n                puVar17 = (undefined2 *)((long)puVar18 + 1);\n              }\n              local_680._2_2_ = (undefined2)(uVar4 >> 0x10);\n              if (fVar34 <= (float10)0) {\n                if (fVar34 != (float10)0) goto LAB_00409fbc;\n                bVar8 = *(byte *)(puVar32 + 9) & 0xdf;\n                if (bVar8 == 0x46) {\n                  *(undefined *)puVar17 = 0x30;\n                  if ((((uint)local_6b8 & 0x10) == 0) && (puVar13 == (undefined2 *)0x0)) {\nLAB_0040a407:\n                    puVar13 = (undefined2 *)((long)puVar17 + 1);\n                  }\n                  else {\n                    local_6f0 = (undefined2 *)\n                                ((ulong)local_6f0 & 0xffffffff00000000 |\n                                (ulong)uVar7 & 0xffffffff0000ffff);\n                    local_6e8 = puVar24;\n                    local_6d0 = puVar18;\n                    local_6c8 = puVar13;\n                    local_6b8 = (undefined2 *)\n                                ((ulong)local_6b8 & 0xffffffff00000000 | (ulong)(uint)local_6b8);\n                    _local_6a8 = (float10)CONCAT28(auStack_6a4._4_2_,puVar17 + 1);\n                    *(undefined8 *)(puVar27 + -8) = 0x40a941;\n                    pcVar21 = nl_langinfo(0x10000);\n                    cVar9 = *pcVar21;\n                    in_FPUControlWord = (ushort)local_6f0;\n                    if (cVar9 == '\\0') {\n                      cVar9 = '.';\n                    }\n                    *(char *)((long)puVar17 + 1) = cVar9;\n                    puVar18 = local_6d0;\n                    puVar13 = (undefined2 *)_local_6a8;\n                    puVar24 = local_6e8;\n                    if (local_6c8 != (undefined2 *)0x0) {\n                      do {\n                        puVar22 = (undefined2 *)((long)puVar13 + 1);\n                        *(undefined *)puVar13 = 0x30;\n                        puVar13 = puVar22;\n                      } while (puVar22 != (undefined2 *)((long)(puVar17 + 1) + (long)local_6c8));\n                      puVar13 = (undefined2 *)((long)_local_6a8 + (long)local_6c8);\n                    }\n                  }\n                }\n                else if (bVar8 == 0x45) {\n                  *(undefined *)puVar17 = 0x30;\n                  if ((((uint)local_6b8 & 0x10) != 0) ||\n                     (_local_6a8 = (int *)((long)puVar17 + 1), puVar13 != (undefined2 *)0x0)) {\n                    local_6f0 = (undefined2 *)\n                                ((ulong)local_6f0 & 0xffffffff00000000 |\n                                (ulong)uVar7 & 0xffffffff0000ffff);\n                    local_6e8 = puVar24;\n                    local_6d0 = puVar18;\n                    local_6c8 = puVar13;\n                    local_6b8 = (undefined2 *)\n                                ((ulong)local_6b8 & 0xffffffff00000000 | (ulong)(uint)local_6b8);\n                    _local_6a8 = (float10)CONCAT28(auStack_6a4._4_2_,puVar17 + 1);\n                    *(undefined8 *)(puVar27 + -8) = 0x40ab9f;\n                    pcVar21 = nl_langinfo(0x10000);\n                    cVar9 = *pcVar21;\n                    if (cVar9 == '\\0') {\n                      cVar9 = '.';\n                    }\n                    *(char *)((long)puVar17 + 1) = cVar9;\n                    puVar18 = local_6d0;\n                    puVar24 = local_6e8;\n                    in_FPUControlWord = (ushort)local_6f0;\n                    if (local_6c8 != (undefined2 *)0x0) {\n                      puVar14 = (undefined *)_local_6a8;\n                      do {\n                        puVar23 = puVar14 + 1;\n                        *puVar14 = 0x30;\n                        puVar14 = puVar23;\n                      } while (puVar23 != (undefined *)((long)(puVar17 + 1) + (long)local_6c8));\n                      _local_6a8 = (int *)((long)_local_6a8 + (long)local_6c8);\n                    }\n                  }\n                  uVar3 = *(undefined *)(puVar32 + 9);\n                  puVar13 = (undefined2 *)((long)_local_6a8 + 4);\n                  *(undefined *)((long)_local_6a8 + 3) = 0x30;\n                  *(undefined *)_local_6a8 = uVar3;\n                  *(undefined2 *)((long)_local_6a8 + 1) = 0x302b;\n                }\n                else if (bVar8 == 0x47) {\n                  *(undefined *)puVar17 = 0x30;\n                  if (((uint)local_6b8 & 0x10) == 0) goto LAB_0040a407;\n                  if (puVar13 == (undefined2 *)0x0) {\n                    local_6e8 = (undefined2 *)\n                                ((ulong)local_6e8 & 0xffffffff00000000 |\n                                (ulong)uVar7 & 0xffffffff0000ffff);\n                    local_6d0 = puVar24;\n                    local_6c8 = puVar17 + 1;\n                    local_6b8 = puVar18;\n                    _local_6a8 = (float10)CONCAT64(auStack_6a4._0_6_,(uint)local_6b8);\n                    *(undefined8 *)(puVar27 + -8) = 0x40ad57;\n                    pcVar21 = nl_langinfo(0x10000);\n                    cVar9 = *pcVar21;\n                    in_FPUControlWord = (ushort)local_6e8;\n                    if (cVar9 == '\\0') {\n                      cVar9 = '.';\n                    }\n                    *(char *)((long)puVar17 + 1) = cVar9;\n                    puVar18 = local_6b8;\n                    puVar13 = local_6c8;\n                    puVar24 = local_6d0;\n                    local_6b8._0_4_ = (uint)local_6a8;\n                  }\n                  else {\n                    local_6f4 = uVar29;\n                    local_6f0 = puVar24;\n                    local_6e8 = puVar17 + 1;\n                    local_6d0 = puVar18;\n                    local_6c8 = (undefined2 *)\n                                ((ulong)local_6c8 & 0xffffffff00000000 | (ulong)(uint)local_6b8);\n                    local_6b8 = puVar13;\n                    _local_6a8 = (float10)CONCAT28(auStack_6a4._4_2_,\n                                                   (undefined *)((long)puVar13 + -1));\n                    *(undefined8 *)(puVar27 + -8) = 0x40a86d;\n                    pcVar21 = nl_langinfo(0x10000);\n                    cVar9 = *pcVar21;\n                    in_FPUControlWord = (ushort)local_6f4;\n                    if (cVar9 == '\\0') {\n                      cVar9 = '.';\n                    }\n                    *(char *)((long)puVar17 + 1) = cVar9;\n                    puVar18 = local_6d0;\n                    puVar13 = local_6e8;\n                    puVar24 = local_6f0;\n                    local_6b8._0_4_ = (uint)local_6c8;\n                    if (_local_6a8 != (int *)0x0) {\n                      do {\n                        puVar22 = (undefined2 *)((long)puVar13 + 1);\n                        *(undefined *)puVar13 = 0x30;\n                        puVar13 = puVar22;\n                      } while (puVar22 !=\n                               (undefined2 *)((undefined *)((long)puVar17 + 1) + (long)local_6b8));\n                      puVar13 = (undefined2 *)((long)local_6e8 + (long)_local_6a8);\n                    }\n                  }\n                }\n                else {\n                  if (bVar8 != 0x41) goto LAB_00409fbc;\n                  *(undefined *)puVar17 = 0x30;\n                  _local_6a8 = (float10)CONCAT28(auStack_6a4._4_2_,puVar17 + 1);\n                  cVar9 = *(char *)(puVar32 + 9);\n                  *(undefined *)(puVar17 + 1) = 0x30;\n                  *(char *)((long)puVar17 + 1) = cVar9 + '\\x17';\n                  if ((((uint)local_6b8 & 0x10) != 0) ||\n                     (puVar22 = (undefined2 *)((long)puVar17 + 3), puVar13 != (undefined2 *)0x0)) {\n                    local_6f4 = uVar29;\n                    local_6f0 = puVar24;\n                    local_6e8 = puVar18;\n                    local_6d0 = puVar13;\n                    local_6c8 = (undefined2 *)\n                                ((ulong)local_6c8 & 0xffffffff00000000 | (ulong)(uint)local_6b8);\n                    local_6b8 = puVar17 + 2;\n                    *(undefined8 *)(puVar27 + -8) = 0x40acb9;\n                    pcVar21 = nl_langinfo(0x10000);\n                    cVar9 = *pcVar21;\n                    if (cVar9 == '\\0') {\n                      cVar9 = '.';\n                    }\n                    *(char *)((long)puVar17 + 3) = cVar9;\n                    puVar18 = local_6e8;\n                    puVar22 = local_6b8;\n                    puVar24 = local_6f0;\n                    local_6b8._0_4_ = (uint)local_6c8;\n                    uVar29 = local_6f4;\n                    if (local_6d0 != (undefined2 *)0x0) {\n                      puVar13 = local_6b8;\n                      do {\n                        puVar22 = (undefined2 *)((long)puVar13 + 1);\n                        *(undefined *)puVar13 = 0x30;\n                        puVar13 = puVar22;\n                      } while (puVar22 != (undefined2 *)((long)(puVar17 + 2) + (long)local_6d0));\n                      puVar22 = (undefined2 *)((long)local_6b8 + (long)local_6d0);\n                    }\n                  }\n                  in_FPUControlWord = (ushort)uVar29;\n                  cVar9 = *(char *)(puVar32 + 9);\n                  puVar13 = (undefined2 *)((long)puVar22 + 3);\n                  *(undefined2 *)((long)puVar22 + 1) = 0x302b;\n                  *(char *)puVar22 = cVar9 + '\\x0f';\n                  puVar17 = (undefined2 *)_local_6a8;\n                }\n              }\n              else {\n                if (fVar34 + fVar34 != fVar34) goto LAB_00409fbc;\n                puVar13 = (undefined2 *)((long)puVar17 + 3);\n                if ((byte)(*(char *)(puVar32 + 9) + 0xbfU) < 0x1a) {\n                  *(undefined *)(puVar17 + 1) = 0x46;\n                  *puVar17 = 0x4e49;\n                  puVar17 = (undefined2 *)0x0;\n                }\n                else {\n                  *(undefined *)(puVar17 + 1) = 0x66;\n                  *puVar17 = 0x6e69;\n                  puVar17 = (undefined2 *)0x0;\n                }\n              }\n              local_680 = CONCAT22(local_680._2_2_,in_FPUControlWord);\n              _local_6a8 = (int *)((long)puVar13 - (long)puVar18);\n              if (_local_6a8 < puVar24) {\n                lVar30 = (long)puVar24 - (long)_local_6a8;\n                puVar24 = (undefined2 *)((long)puVar13 + lVar30);\n                _local_6a8 = (int *)((long)puVar24 - (long)puVar18);\n                if (((uint)local_6b8 & 2) == 0) {\n                  if ((((uint)local_6b8 & 0x20) == 0) || (puVar17 == (undefined2 *)0x0)) {\n                    puVar14 = (undefined *)0xffffffffffffffff;\n                    puVar17 = puVar13;\n                    if (puVar18 < puVar13) {\n                      do {\n                        *(undefined *)((long)puVar24 + (long)puVar14) =\n                             *(undefined *)((long)puVar13 + (long)puVar14);\n                        puVar14 = puVar14 + -1;\n                        puVar17 = puVar18;\n                      } while ((undefined *)((long)puVar18 + (-1 - (long)puVar13)) != puVar14);\n                    }\n                    if (lVar30 != 0) {\n                      puVar24 = puVar17;\n                      do {\n                        puVar13 = (undefined2 *)((long)puVar24 + 1);\n                        *(undefined *)puVar24 = 0x20;\n                        puVar24 = puVar13;\n                      } while (puVar13 != (undefined2 *)(lVar30 + (long)puVar17));\n                    }\n                  }\n                  else {\n                    puVar22 = puVar13;\n                    if (puVar17 < puVar13) {\n                      puVar14 = (undefined *)0xffffffffffffffff;\n                      do {\n                        *(undefined *)((long)puVar24 + (long)puVar14) =\n                             *(undefined *)((long)puVar13 + (long)puVar14);\n                        puVar14 = puVar14 + -1;\n                        puVar22 = puVar17;\n                      } while (puVar14 != (undefined *)((long)puVar17 + (-1 - (long)puVar13)));\n                    }\n                    if (lVar30 != 0) {\n                      puVar24 = puVar22;\n                      do {\n                        puVar13 = (undefined2 *)((long)puVar24 + 1);\n                        *(undefined *)puVar24 = 0x30;\n                        puVar24 = puVar13;\n                      } while (puVar13 != (undefined2 *)(lVar30 + (long)puVar22));\n                    }\n                  }\n                }\n                else if (lVar30 != 0) {\n                  do {\n                    puVar17 = (undefined2 *)((long)puVar13 + 1);\n                    *(undefined *)puVar13 = 0x20;\n                    puVar13 = puVar17;\n                  } while (puVar24 != puVar17);\n                }\n              }\n              if (local_698 <= _local_6a8) {\nLAB_00409fbc:\n                    /* WARNING: Subroutine does not return */\n                *(undefined **)(puVar27 + -8) = &UNK_00409fc1;\n                abort();\n              }\n              puVar14 = __n + (long)_local_6a8;\n              puVar24 = puVar20;\n              if (puVar31 + -(long)__n <= _local_6a8) {\n                if (CARRY8((ulong)__n,(ulong)_local_6a8) == false) {\n                  if (puVar31 < puVar14) {\n                    if (puVar31 == (undefined *)0x0) {\n                      if (puVar14 < (undefined *)0xd) {\n                        puVar31 = (undefined *)0xc;\n                      }\n                      else {\nLAB_0040aaba:\n                        puVar31 = puVar14;\n                        if (puVar14 == (undefined *)0xffffffffffffffff) goto LAB_00409880;\n                      }\n                    }\n                    else {\n                      if ((long)puVar31 < 0) goto LAB_00409880;\n                      puVar31 = (undefined *)((long)puVar31 * 2);\n                      if (puVar31 < puVar14) goto LAB_0040aaba;\n                    }\n                    if ((puVar20 == (undefined2 *)0x0) || (puVar20 == local_690)) {\n                      local_6b8 = (undefined2 *)\n                                  ((ulong)local_6b8 & 0xffffffffffffff00 |\n                                  (ulong)(puVar20 == local_690));\n                      local_698 = puVar18;\n                      *(undefined8 *)(puVar27 + -8) = 0x40a7a7;\n                      puVar24 = (undefined2 *)malloc((size_t)puVar31);\n                      if (puVar24 == (undefined2 *)0x0) goto LAB_00409880;\n                      puVar18 = local_698;\n                      if ((__n != (undefined *)0x0) && ((char)local_6b8 != '\\0')) {\n                        *(undefined8 *)(puVar27 + -8) = 0x40a7f5;\n                        puVar24 = (undefined2 *)memcpy(puVar24,puVar20,(size_t)__n);\n                        puVar18 = local_698;\n                      }\n                    }\n                    else {\n                      local_698 = puVar18;\n                      *(undefined8 *)(puVar27 + -8) = 0x40a522;\n                      puVar24 = (undefined2 *)realloc(puVar20,(size_t)puVar31);\n                      if (puVar24 == (undefined2 *)0x0) goto LAB_00409880;\n                      puVar18 = local_698;\n                    }\n                  }\n                }\n                else if (puVar31 != (undefined *)0xffffffffffffffff) goto LAB_00409880;\n              }\n              local_698 = puVar18;\n              *(undefined8 *)(puVar27 + -8) = 0x40a556;\n              memcpy((undefined *)((long)puVar24 + (long)__n),puVar18,(size_t)_local_6a8);\n              puVar13 = local_698;\n              puVar20 = puVar24;\n              __n = puVar14;\n              if (local_698 != local_2f8) {\n                *(undefined8 *)(puVar27 + -8) = 0x40a575;\n                free(puVar13);\n              }\n            }\n            else {\n              uVar4 = *(uint *)(puVar32 + 2);\n              puVar24 = (undefined2 *)(local_6b0 + 1);\n              *local_6b0 = 0x25;\n              if ((uVar4 & 1) != 0) {\n                local_6b0[1] = 0x27;\n                puVar24 = (undefined2 *)(local_6b0 + 2);\n              }\n              if ((uVar4 & 2) != 0) {\n                *(undefined *)puVar24 = 0x2d;\n                puVar24 = (undefined2 *)((long)puVar24 + 1);\n              }\n              if ((uVar4 & 4) != 0) {\n                *(undefined *)puVar24 = 0x2b;\n                puVar24 = (undefined2 *)((long)puVar24 + 1);\n              }\n              if ((uVar4 & 8) != 0) {\n                *(undefined *)puVar24 = 0x20;\n                puVar24 = (undefined2 *)((long)puVar24 + 1);\n              }\n              if ((uVar4 & 0x10) != 0) {\n                *(undefined *)puVar24 = 0x23;\n                puVar24 = (undefined2 *)((long)puVar24 + 1);\n              }\n              if ((uVar4 & 0x40) != 0) {\n                *(undefined *)puVar24 = 0x49;\n                puVar24 = (undefined2 *)((long)puVar24 + 1);\n              }\n              if ((uVar4 & 0x20) != 0) {\n                *(undefined *)puVar24 = 0x30;\n                puVar24 = (undefined2 *)((long)puVar24 + 1);\n              }\n              pvVar5 = (void *)puVar32[3];\n              puVar13 = local_670;\n              if (pvVar5 != (void *)puVar32[4]) {\n                local_6b8 = local_670;\n                sVar28 = (long)(void *)puVar32[4] - (long)pvVar5;\n                _local_6a8 = (float10)CONCAT28(auStack_6a4._4_2_,sVar28);\n                *(undefined8 *)(puVar27 + -8) = 0x409629;\n                memcpy(puVar24,pvVar5,sVar28);\n                puVar24 = (undefined2 *)((long)puVar24 + (long)_local_6a8);\n                puVar13 = local_6b8;\n              }\n              pvVar5 = (void *)puVar32[6];\n              if (pvVar5 != (void *)puVar32[7]) {\n                local_6b8 = puVar13;\n                sVar28 = (long)(void *)puVar32[7] - (long)pvVar5;\n                _local_6a8 = (float10)CONCAT28(auStack_6a4._4_2_,sVar28);\n                *(undefined8 *)(puVar27 + -8) = 0x409666;\n                memcpy(puVar24,pvVar5,sVar28);\n                puVar24 = (undefined2 *)((long)puVar24 + (long)_local_6a8);\n                puVar13 = local_6b8;\n              }\n              if ((uint)local_698 < 0x11) {\n                uVar11 = 1L << ((byte)local_698 & 0x3f);\n                if ((uVar11 & 0x14180) == 0) {\n                  if ((uVar11 & 0x1000) == 0) {\n                    if ((uVar11 & 0x600) != 0) {\n                      *(undefined *)puVar24 = 0x6c;\n                      puVar24 = (undefined2 *)((long)puVar24 + 1);\n                      goto LAB_00409a88;\n                    }\n                  }\n                  else {\n                    *(undefined *)puVar24 = 0x4c;\n                    puVar24 = (undefined2 *)((long)puVar24 + 1);\n                  }\n                }\n                else {\nLAB_00409a88:\n                  *(undefined *)puVar24 = 0x6c;\n                  puVar24 = (undefined2 *)((long)puVar24 + 1);\n                }\n              }\n              uVar3 = *(undefined *)(puVar32 + 9);\n              *(undefined *)((long)puVar24 + 1) = 0;\n              *(undefined *)puVar24 = uVar3;\n              if (puVar32[5] == -1) {\n                local_6b8 = (undefined2 *)((ulong)local_6b8._4_4_ << 0x20);\n              }\n              else {\n                if (*(int *)(puVar13 + puVar32[5] * 0x10) != 5) goto LAB_00409fbc;\n                local_6b8 = (undefined2 *)CONCAT44(local_6b8._4_4_,1);\n                local_680 = *(uint *)((long)(puVar13 + puVar32[5] * 0x10) + 0x10);\n              }\n              if (puVar32[8] != -1) {\n                if (*(int *)(puVar13 + puVar32[8] * 0x10) != 5) goto LAB_00409fbc;\n                (&local_680)[(ulong)local_6b8 & 0xffffffff] =\n                     *(int *)((long)(puVar13 + puVar32[8] * 0x10) + 0x10);\n                local_6b8 = (undefined2 *)\n                            ((ulong)local_6b8 & 0xffffffff00000000 | (ulong)((uint)local_6b8 + 1));\n              }\n              puVar14 = __n + 2;\n              puVar13 = puVar20;\n              if (__n < (undefined *)0xfffffffffffffffe) {\n                if (puVar31 < puVar14) {\n                  if (puVar31 == (undefined *)0x0) {\n                    if (puVar14 < (undefined *)0xd) {\n                      puVar31 = (undefined *)0xc;\n                    }\n                    else {\nLAB_00409e72:\n                      puVar31 = puVar14;\n                      if (puVar14 == (undefined *)0xffffffffffffffff) goto LAB_00409880;\n                    }\n                  }\n                  else {\n                    if ((long)puVar31 < 0) goto LAB_00409880;\n                    puVar31 = (undefined *)((long)puVar31 * 2);\n                    if (puVar31 < puVar14) goto LAB_00409e72;\n                  }\n                  if ((puVar20 == (undefined2 *)0x0) || (puVar20 == local_690)) {\n                    _local_6a8 = (float10)CONCAT91(stack0xfffffffffffff959,puVar20 == local_690);\n                    *(undefined8 *)(puVar27 + -8) = 0x40a11e;\n                    puVar13 = (undefined2 *)malloc((size_t)puVar31);\n                    if (puVar13 == (undefined2 *)0x0) goto LAB_00409880;\n                    if ((__n != (undefined *)0x0) && (local_6a8[0] != '\\0')) {\n                      *(undefined8 *)(puVar27 + -8) = 0x40a150;\n                      puVar13 = (undefined2 *)memcpy(puVar13,puVar20,(size_t)__n);\n                    }\n                  }\n                  else {\n                    *(undefined8 *)(puVar27 + -8) = 0x409778;\n                    puVar13 = (undefined2 *)realloc(puVar20,(size_t)puVar31);\n                    if (puVar13 == (undefined2 *)0x0) goto LAB_00409880;\n                  }\n                }\n              }\n              else if (puVar31 != (undefined *)0xffffffffffffffff) goto LAB_00409880;\n              *(undefined *)((long)puVar13 + (long)__n) = 0;\n              local_6c8 = puVar13;\n              *(undefined8 *)(puVar27 + -8) = 0x409795;\n              puVar15 = (uint *)__errno_location();\n              puVar13 = local_6c8;\n              local_6c8 = puVar24;\n              _local_6a8 = (float10)CONCAT28(auStack_6a4._4_2_,puVar15);\n              local_6e8 = (undefined2 *)((ulong)local_6e8 & 0xffffffff00000000 | (ulong)*puVar15);\nLAB_004097b8:\n              uVar4 = local_680;\n              puVar14 = local_6b0;\n              local_684 = -1;\n              uVar12 = (long)puVar31 - (long)__n;\n              *_local_6a8 = 0;\n              uVar11 = 0x7fffffff;\n              if (uVar12 < 0x80000000) {\n                uVar11 = uVar12;\n              }\n              switch((ulong)local_698 & 0xffffffff) {\n              default:\n                goto switchD_004099ec_caseD_5;\n              case 1:\n                uVar19 = (ulong)(uint)(int)*(char *)(local_670 + puVar32[10] * 0x10 + 8);\n                break;\n              case 2:\n                uVar19 = (ulong)*(byte *)(local_670 + puVar32[10] * 0x10 + 8);\n                break;\n              case 3:\n                uVar19 = (ulong)(uint)(int)(short)local_670[puVar32[10] * 0x10 + 8];\n                break;\n              case 4:\n                uVar19 = (ulong)(ushort)local_670[puVar32[10] * 0x10 + 8];\n                break;\n              case 5:\n              case 6:\n              case 0xd:\n              case 0xe:\n                uVar19 = (ulong)*(uint *)(local_670 + puVar32[10] * 0x10 + 8);\n                break;\n              case 7:\n              case 8:\n              case 9:\n              case 10:\n              case 0xf:\n              case 0x10:\n              case 0x11:\n                piVar16 = *(int **)(local_670 + puVar32[10] * 0x10 + 8);\n                local_6d0 = puVar13;\n                if ((uint)local_6b8 == 1) {\n                  *(int **)(puVar27 + -8) = &local_684;\n                  *(int **)(puVar27 + -0x10) = piVar16;\n                  goto LAB_0040a092;\n                }\n                if ((uint)local_6b8 != 2) {\n                  *(int **)(puVar27 + -0x10) = &local_684;\nLAB_00409afa:\n                  puVar14 = local_6b0;\n                  *(undefined8 *)(puVar27 + -0x18) = 0x409b17;\n                  iVar10 = __snprintf_chk((undefined *)((long)puVar13 + (long)__n),uVar11,1,\n                                          0xffffffffffffffff,puVar14,piVar16);\n                  goto LAB_00409b20;\n                }\n                *(int **)(puVar27 + -0x10) = &local_684;\n                *(int **)(puVar27 + -0x18) = piVar16;\n                goto LAB_0040a046;\n              case 0xb:\n                local_6d0 = puVar13;\n                uVar1 = *(undefined8 *)(local_670 + puVar32[10] * 0x10 + 8);\n                if ((uint)local_6b8 == 1) {\n                  *(int **)(puVar27 + -0x10) = &local_684;\n                }\n                else {\n                  if ((uint)local_6b8 != 2) {\n                    *(undefined8 *)(puVar27 + -8) = 0x409dee;\n                    iVar10 = __snprintf_chk(uVar1,(undefined *)((long)puVar13 + (long)__n),uVar11,1,\n                                            0xffffffffffffffff,puVar14,&local_684);\n                    goto LAB_00409b20;\n                  }\n                  *(int **)(puVar27 + -8) = &local_684;\n                  *(ulong *)(puVar27 + -0x10) = (ulong)local_67c;\n                }\n                uVar4 = local_680;\n                puVar14 = local_6b0;\n                *(undefined8 *)(puVar27 + -0x18) = 0x40a28e;\n                iVar10 = __snprintf_chk(uVar1,(undefined *)((long)puVar13 + (long)__n),uVar11,1,\n                                        0xffffffffffffffff,puVar14,uVar4);\n                goto LAB_00409b20;\n              case 0xc:\n                local_6d0 = puVar13;\n                Var2 = *(unkbyte10 *)(local_670 + puVar32[10] * 0x10 + 8);\n                if ((uint)local_6b8 != 1) {\n                  if ((uint)local_6b8 != 2) {\n                    piVar16 = &local_684;\n                    *(unkbyte10 *)(puVar27 + -0x10) = Var2;\n                    goto LAB_00409afa;\n                  }\n                  *(int **)(puVar27 + -0x10) = &local_684;\n                  uVar19 = (ulong)local_67c;\n                  *(unkbyte10 *)(puVar27 + -0x20) = Var2;\n                  *(ulong *)(puVar27 + -0x30) = uVar19;\n                  *(undefined8 *)(puVar27 + -0x38) = 0x40a2ef;\n                  iVar10 = __snprintf_chk((undefined *)((long)puVar13 + (long)__n),uVar11,1,\n                                          0xffffffffffffffff,puVar14,uVar4);\n                  goto LAB_00409b20;\n                }\n                *(int **)(puVar27 + -0x10) = &local_684;\n                *(unkbyte10 *)(puVar27 + -0x20) = Var2;\n                goto LAB_0040a04d;\n              }\n              local_6d0 = puVar13;\n              if ((uint)local_6b8 == 1) {\n                *(int **)(puVar27 + -8) = &local_684;\n                *(ulong *)(puVar27 + -0x10) = uVar19;\nLAB_0040a092:\n                uVar19 = (ulong)local_680;\nLAB_00409c3a:\n                puVar14 = local_6b0;\n                *(undefined8 *)(puVar27 + -0x18) = 0x409c57;\n                iVar10 = __snprintf_chk((undefined *)((long)puVar13 + (long)__n),uVar11,1,\n                                        0xffffffffffffffff,puVar14,uVar19);\n                if (-1 < local_684) goto LAB_00409b2e;\nLAB_00409c6e:\n                puVar24 = local_6d0;\n                if (*(char *)((long)local_6c8 + 1) == '\\0') {\n                  if (iVar10 < 0) {\n                    iVar10 = *_local_6a8;\n                    if ((iVar10 == 0) && (iVar10 = 0x54, (*(byte *)(puVar32 + 9) & 0xef) != 99)) {\n                      iVar10 = 0x16;\n                    }\n                    if ((local_6d0 != local_690) && (local_6d0 != (undefined2 *)0x0)) {\n                      *(undefined8 *)(puVar27 + -8) = 0x409cc4;\n                      free(puVar24);\n                    }\n                    puVar31 = local_6e0;\n                    if (local_6e0 != (undefined *)0x0) {\n                      *(undefined8 *)(puVar27 + -8) = 0x409cd8;\n                      free(puVar31);\n                    }\n                    if (local_580 != auStack_568) {\n                      *(undefined8 *)(puVar27 + -8) = 0x409cf4;\n                      free(local_580);\n                    }\n                    if (local_670 != auStack_668) {\n                      *(undefined8 *)(puVar27 + -8) = 0x409d10;\n                      free(local_670);\n                    }\n                    *_local_6a8 = iVar10;\n                    return (undefined2 *)0x0;\n                  }\n                  goto LAB_00409b48;\n                }\n                *(undefined *)((long)local_6c8 + 1) = 0;\n                puVar13 = local_6d0;\n                goto LAB_004097b8;\n              }\n              if ((uint)local_6b8 != 2) {\n                *(int **)(puVar27 + -0x10) = &local_684;\n                goto LAB_00409c3a;\n              }\n              *(int **)(puVar27 + -0x10) = &local_684;\n              *(ulong *)(puVar27 + -0x18) = uVar19;\nLAB_0040a046:\n              *(ulong *)(puVar27 + -0x20) = (ulong)local_67c;\nLAB_0040a04d:\n              uVar4 = local_680;\n              puVar14 = local_6b0;\n              *(undefined8 *)(puVar27 + -0x28) = 0x40a071;\n              iVar10 = __snprintf_chk((undefined *)((long)puVar13 + (long)__n),uVar11,1,\n                                      0xffffffffffffffff,puVar14,uVar4);\nLAB_00409b20:\n              if (local_684 < 0) goto LAB_00409c6e;\nLAB_00409b2e:\n              if (((ulong)(long)local_684 < uVar11) &&\n                 (((undefined *)((long)local_684 + (long)local_6d0))[(long)__n] != '\\0'))\n              goto LAB_00409fbc;\n              if (local_684 < iVar10) {\nLAB_00409b48:\n                local_684 = iVar10;\n              }\n              puVar24 = local_6d0;\n              puVar20 = local_6d0;\n              if (uVar11 <= local_684 + 1) {\n                if (0x7ffffffe < uVar12) {\n                  if ((local_6d0 != local_690) && (local_6d0 != (undefined2 *)0x0)) {\n                    *(undefined8 *)(puVar27 + -8) = 0x40a356;\n                    free(puVar24);\n                  }\n                  puVar31 = local_6e0;\n                  if (local_6e0 != (undefined *)0x0) {\n                    *(undefined8 *)(puVar27 + -8) = 0x40a36a;\n                    free(puVar31);\n                  }\n                  if (local_580 != auStack_568) {\n                    *(undefined8 *)(puVar27 + -8) = 0x40a386;\n                    free(local_580);\n                  }\n                  if (local_670 != auStack_668) {\n                    *(undefined8 *)(puVar27 + -8) = 0x40a3a2;\n                    free(local_670);\n                  }\n                  *_local_6a8 = 0x4b;\n                  return (undefined2 *)0x0;\n                }\n                puVar13 = local_6d0;\n                if ((long)puVar31 < 0) {\n                  if (puVar31 != (undefined *)0xffffffffffffffff) goto LAB_0040988f;\n                }\n                else {\n                  if (CARRY8((ulong)(local_684 + 2),(ulong)__n) != false) goto LAB_0040988f;\n                  puVar14 = __n + (local_684 + 2);\n                  if (__n + (local_684 + 2) <= (undefined *)((long)puVar31 * 2)) {\n                    puVar14 = (undefined *)((long)puVar31 * 2);\n                  }\n                  if (puVar31 < puVar14) {\n                    puVar31 = (undefined *)((long)puVar31 * 2);\n                    if ((puVar31 < puVar14) &&\n                       (puVar31 = puVar14, puVar14 == (undefined *)0xffffffffffffffff))\n                    goto LAB_0040988f;\n                    bVar33 = local_6d0 == local_690;\n                    if ((local_6d0 == (undefined2 *)0x0) || (bVar33)) {\n                      *(undefined8 *)(puVar27 + -8) = 0x409fef;\n                      puVar13 = (undefined2 *)malloc((size_t)puVar31);\n                      puVar24 = local_6d0;\n                      puVar20 = local_6d0;\n                      if (puVar13 == (undefined2 *)0x0) goto LAB_0040988f;\n                      if ((__n != (undefined *)0x0) && (bVar33)) {\n                        *(undefined8 *)(puVar27 + -8) = 0x40a01d;\n                        puVar13 = (undefined2 *)memcpy(puVar13,puVar24,(size_t)__n);\n                      }\n                    }\n                    else {\n                      *(undefined8 *)(puVar27 + -8) = 0x409bdd;\n                      puVar13 = (undefined2 *)realloc(puVar24,(size_t)puVar31);\n                      puVar20 = local_6d0;\n                      if (puVar13 == (undefined2 *)0x0) goto LAB_0040988f;\n                    }\n                  }\n                }\n                goto LAB_004097b8;\n              }\n              __n = __n + local_684;\n              *_local_6a8 = local_6e8._0_4_;\n            }\n          }\nLAB_00409987:\n          _local_6a8 = (int *)puVar32[1];\n          puVar32 = puVar32 + 0xb;\n          puVar24 = (undefined2 *)*puVar32;\n          local_6c0 = local_6c0 + 1;\n          puVar14 = __n;\n        } while ((int *)puVar24 == _local_6a8);\n      } while( true );\n    }\n    puVar27 = auStack_6f8;\n    if (sVar28 != 0xffffffffffffffff) {\n      local_6b0 = (undefined *)malloc(sVar28);\n      puVar27 = auStack_6f8;\n      if (local_6b0 != (undefined *)0x0) {\n        local_6e0 = local_6b0;\n        puVar27 = auStack_6f8;\n        goto LAB_00409354;\n      }\n    }\n  }\n  goto LAB_004099b0;\nLAB_00409880:\n  *(undefined8 *)(puVar27 + -8) = 0x409885;\n  piVar16 = __errno_location();\n  _local_6a8 = (float10)CONCAT28(auStack_6a4._4_2_,piVar16);\nLAB_0040988f:\n  if ((puVar20 != local_690) && (puVar20 != (undefined2 *)0x0)) {\nLAB_00409aa8:\n    *(undefined8 *)(puVar27 + -8) = 0x409ab0;\n    free(puVar20);\n  }\n  puVar31 = local_6e0;\n  if (local_6e0 != (undefined *)0x0) {\n    *(undefined8 *)(puVar27 + -8) = 0x4098b9;\n    free(puVar31);\n    goto LAB_004098b9;\n  }\nLAB_004099b0:\n  *(undefined8 *)(puVar27 + -8) = 0x4099b5;\n  piVar16 = __errno_location();\n  _local_6a8 = (float10)CONCAT28(auStack_6a4._4_2_,piVar16);\nLAB_004098b9:\n  if (local_580 != auStack_568) {\n    *(undefined8 *)(puVar27 + -8) = 0x4098d5;\n    free(local_580);\n  }\n  if (local_670 != auStack_668) {\n    *(undefined8 *)(puVar27 + -8) = 0x4098f1;\n    free(local_670);\n  }\n  *_local_6a8 = 0xc;\n  return (undefined2 *)0x0;\n}\n\n",
            "funcName": "FUN_00409290"
        },
        {
            "funcStartAddr": "0x40adb0",
            "funcEndAddr": "0x40af6c",
            "decompiledFuncCode": "\nundefined8 FUN_0040adb0(uint *param_1,ulong *param_2)\n\n{\n  uint uVar1;\n  undefined4 *puVar2;\n  unkbyte10 *pVar3;\n  undefined *puVar4;\n  char *pcVar5;\n  ulong uVar6;\n  undefined8 *puVar7;\n  undefined4 *puVar8;\n  char **ppcVar9;\n  \n  puVar2 = (undefined4 *)param_2[1];\n  if (*param_2 != 0) {\n    uVar6 = 0;\n    do {\n      switch(*puVar2) {\n      default:\n        return 0xffffffff;\n      case 1:\n      case 2:\n        uVar1 = *param_1;\n        if (uVar1 < 0x30) {\n          puVar8 = (undefined4 *)((ulong)uVar1 + *(long *)(param_1 + 4));\n          *param_1 = uVar1 + 8;\n        }\n        else {\n          puVar8 = *(undefined4 **)(param_1 + 2);\n          *(undefined4 **)(param_1 + 2) = puVar8 + 2;\n        }\n        *(char *)(puVar2 + 4) = (char)*puVar8;\n        break;\n      case 3:\n      case 4:\n        uVar1 = *param_1;\n        if (uVar1 < 0x30) {\n          puVar8 = (undefined4 *)((ulong)uVar1 + *(long *)(param_1 + 4));\n          *param_1 = uVar1 + 8;\n        }\n        else {\n          puVar8 = *(undefined4 **)(param_1 + 2);\n          *(undefined4 **)(param_1 + 2) = puVar8 + 2;\n        }\n        *(short *)(puVar2 + 4) = (short)*puVar8;\n        break;\n      case 5:\n      case 6:\n      case 0xd:\n      case 0xe:\n        uVar1 = *param_1;\n        if (uVar1 < 0x30) {\n          puVar8 = (undefined4 *)((ulong)uVar1 + *(long *)(param_1 + 4));\n          *param_1 = uVar1 + 8;\n        }\n        else {\n          puVar8 = *(undefined4 **)(param_1 + 2);\n          *(undefined4 **)(param_1 + 2) = puVar8 + 2;\n        }\n        puVar2[4] = *puVar8;\n        break;\n      case 7:\n      case 8:\n      case 9:\n      case 10:\n      case 0x11:\n      case 0x12:\n      case 0x13:\n      case 0x14:\n      case 0x15:\n      case 0x16:\n        uVar1 = *param_1;\n        if (uVar1 < 0x30) {\n          puVar7 = (undefined8 *)((ulong)uVar1 + *(long *)(param_1 + 4));\n          *param_1 = uVar1 + 8;\n        }\n        else {\n          puVar7 = *(undefined8 **)(param_1 + 2);\n          *(undefined8 **)(param_1 + 2) = puVar7 + 1;\n        }\n        *(undefined8 *)(puVar2 + 4) = *puVar7;\n        break;\n      case 0xb:\n        uVar1 = param_1[1];\n        if (uVar1 < 0xb0) {\n          puVar7 = (undefined8 *)((ulong)uVar1 + *(long *)(param_1 + 4));\n          param_1[1] = uVar1 + 0x10;\n        }\n        else {\n          puVar7 = *(undefined8 **)(param_1 + 2);\n          *(undefined8 **)(param_1 + 2) = puVar7 + 1;\n        }\n        *(undefined8 *)(puVar2 + 4) = *puVar7;\n        break;\n      case 0xc:\n        pVar3 = (unkbyte10 *)(*(long *)(param_1 + 2) + 0xfU & 0xfffffffffffffff0);\n        *(long *)(param_1 + 2) = (long)pVar3 + 0x10;\n        *(unkbyte10 *)(puVar2 + 4) = *pVar3;\n        break;\n      case 0xf:\n        uVar1 = *param_1;\n        if (uVar1 < 0x30) {\n          ppcVar9 = (char **)((ulong)uVar1 + *(long *)(param_1 + 4));\n          *param_1 = uVar1 + 8;\n        }\n        else {\n          ppcVar9 = *(char ***)(param_1 + 2);\n          *(char ***)(param_1 + 2) = ppcVar9 + 1;\n        }\n        pcVar5 = *ppcVar9;\n        if (pcVar5 == (char *)0x0) {\n          pcVar5 = \"(NULL)\";\n        }\n        *(char **)(puVar2 + 4) = pcVar5;\n        break;\n      case 0x10:\n        uVar1 = *param_1;\n        if (uVar1 < 0x30) {\n          puVar7 = (undefined8 *)((ulong)uVar1 + *(long *)(param_1 + 4));\n          *param_1 = uVar1 + 8;\n        }\n        else {\n          puVar7 = *(undefined8 **)(param_1 + 2);\n          *(undefined8 **)(param_1 + 2) = puVar7 + 1;\n        }\n        puVar4 = (undefined *)*puVar7;\n        if (puVar4 == (undefined *)0x0) {\n          puVar4 = &DAT_00411250;\n        }\n        *(undefined **)(puVar2 + 4) = puVar4;\n      }\n      uVar6 = uVar6 + 1;\n      puVar2 = puVar2 + 8;\n    } while (uVar6 <= *param_2 && *param_2 != uVar6);\n  }\n  return 0;\n}\n\n",
            "funcName": "FUN_0040adb0"
        },
        {
            "funcStartAddr": "0x40afd0",
            "funcEndAddr": "0x40bc86",
            "decompiledFuncCode": "\nundefined8 FUN_0040afd0(byte *param_1,ulong *param_2,byte **param_3)\n\n{\n  ulong *puVar1;\n  byte **ppbVar2;\n  byte **ppbVar3;\n  byte bVar4;\n  uint uVar5;\n  int iVar6;\n  int iVar7;\n  ulong *__dest;\n  ulong uVar8;\n  int *piVar9;\n  byte **__dest_00;\n  byte *pbVar10;\n  byte *pbVar11;\n  byte *pbVar12;\n  byte *pbVar13;\n  byte *pbVar14;\n  ulong uVar15;\n  ulong uVar16;\n  byte bVar17;\n  byte *pbVar18;\n  byte **__ptr;\n  byte *pbVar19;\n  ulong uVar20;\n  ulong *__ptr_00;\n  bool bVar21;\n  ulong local_78;\n  ulong local_70;\n  byte *local_68;\n  \n  puVar1 = param_2 + 4;\n  ppbVar2 = param_3 + 2;\n  pbVar19 = (byte *)0x7;\n  uVar8 = 0;\n  *param_2 = 0;\n  param_2[1] = (ulong)puVar1;\n  *param_3 = (byte *)0x0;\n  param_3[1] = (byte *)ppbVar2;\n  local_70 = 0;\n  local_78 = 0;\n  local_68 = (byte *)0x0;\n  __dest = puVar1;\n  uVar20 = 7;\nLAB_0040b04b:\n  do {\n    pbVar11 = param_1;\n    pbVar12 = (byte *)0xffffffffffffffff;\n    if (*pbVar11 == 0) {\n      __dest[uVar8 * 0xb] = (ulong)pbVar11;\n      param_2[2] = local_78;\n      param_2[3] = local_70;\n      return 0;\n    }\n    param_1 = pbVar11 + 1;\n  } while (*pbVar11 != 0x25);\n  ppbVar3 = (byte **)(__dest + uVar8 * 0xb);\n  *ppbVar3 = pbVar11;\n  *(undefined4 *)(ppbVar3 + 2) = 0;\n  ppbVar3[3] = (byte *)0x0;\n  ppbVar3[4] = (byte *)0x0;\n  ppbVar3[5] = (byte *)0xffffffffffffffff;\n  ppbVar3[6] = (byte *)0x0;\n  ppbVar3[7] = (byte *)0x0;\n  ppbVar3[8] = (byte *)0xffffffffffffffff;\n  ppbVar3[10] = (byte *)0xffffffffffffffff;\n  bVar17 = pbVar11[1];\n  pbVar11 = param_1;\n  pbVar18 = (byte *)0xffffffffffffffff;\n  if (9 < (byte)(bVar17 - 0x30)) {\nLAB_0040b116:\n    do {\n      pbVar11 = param_1 + 1;\n      if (bVar17 == 0x27) {\n        *(uint *)(ppbVar3 + 2) = *(uint *)(ppbVar3 + 2) | 1;\n      }\n      else if (bVar17 == 0x2d) {\n        *(uint *)(ppbVar3 + 2) = *(uint *)(ppbVar3 + 2) | 2;\n      }\n      else if (bVar17 == 0x2b) {\n        *(uint *)(ppbVar3 + 2) = *(uint *)(ppbVar3 + 2) | 4;\n      }\n      else if (bVar17 == 0x20) {\n        *(uint *)(ppbVar3 + 2) = *(uint *)(ppbVar3 + 2) | 8;\n      }\n      else if (bVar17 == 0x23) {\n        *(uint *)(ppbVar3 + 2) = *(uint *)(ppbVar3 + 2) | 0x10;\n      }\n      else if (bVar17 == 0x30) {\n        *(uint *)(ppbVar3 + 2) = *(uint *)(ppbVar3 + 2) | 0x20;\n      }\n      else {\n        if (bVar17 != 0x49) goto LAB_0040b178;\n        *(uint *)(ppbVar3 + 2) = *(uint *)(ppbVar3 + 2) | 0x40;\n      }\n      bVar17 = *pbVar11;\n      param_1 = pbVar11;\n    } while( true );\n  }\n  do {\n    bVar4 = pbVar11[1];\n    pbVar11 = pbVar11 + 1;\n  } while ((byte)(bVar4 - 0x30) < 10);\n  pbVar18 = pbVar12;\n  if (bVar4 != 0x24) goto LAB_0040b116;\n  pbVar11 = (byte *)0x0;\n  do {\n    pbVar18 = param_1;\n    pbVar14 = (byte *)0xffffffffffffffff;\n    if (pbVar11 < (byte *)0x199999999999999a) {\n      pbVar14 = (byte *)((long)pbVar11 * 10);\n    }\n    while( true ) {\n      iVar6 = (int)(char)bVar17;\n      bVar17 = pbVar18[1];\n      pbVar11 = pbVar14 + (iVar6 + -0x30);\n      param_1 = pbVar18 + 1;\n      if (CARRY8((long)(iVar6 + -0x30),(ulong)pbVar14) == false) break;\n      pbVar18 = param_1;\n      pbVar14 = pbVar12;\n      if (9 < (byte)(bVar17 - 0x30)) goto switchD_0040b357_caseD_26;\n    }\n  } while ((byte)(bVar17 - 0x30) < 10);\n  if (pbVar11 + -1 < (byte *)0xfffffffffffffffe) {\n    param_1 = pbVar18 + 2;\n    bVar17 = pbVar18[2];\n    pbVar18 = pbVar11 + -1;\n    goto LAB_0040b116;\n  }\n  goto switchD_0040b357_caseD_26;\nLAB_0040b178:\n  if (bVar17 != 0x2a) {\n    pbVar12 = local_68;\n    if ((byte)(bVar17 - 0x30) < 10) {\n      ppbVar3[3] = param_1;\n      pbVar14 = param_1;\n      uVar8 = local_78;\n      if ((byte)(*param_1 - 0x30) < 10) {\n        do {\n          pbVar11 = pbVar14;\n          pbVar14 = pbVar11 + 1;\n        } while ((byte)(pbVar11[1] - 0x30) < 10);\n        pbVar11 = pbVar11 + 2;\n        uVar8 = (long)pbVar14 - (long)param_1;\n        if ((ulong)((long)pbVar14 - (long)param_1) <= local_78) {\n          uVar8 = local_78;\n        }\n      }\n      local_78 = uVar8;\n      ppbVar3[4] = pbVar14;\n      bVar17 = *pbVar14;\n      param_1 = pbVar14;\n    }\njoined_r0x0040b28a:\n    uVar8 = local_70;\n    local_68 = pbVar12;\n    if (bVar17 != 0x2e) goto LAB_0040b191;\n    bVar17 = param_1[1];\n    ppbVar3[6] = param_1;\n    if (bVar17 != 0x2a) {\n      if ((byte)(param_1[1] - 0x30) < 10) {\n        do {\n          pbVar11 = pbVar11 + 1;\n        } while ((byte)(*pbVar11 - 0x30) < 10);\n        uVar8 = (long)pbVar11 - (long)param_1;\n      }\n      else {\n        uVar8 = 1;\n      }\n      ppbVar3[7] = pbVar11;\n      bVar17 = *pbVar11;\n      param_1 = pbVar11;\n      if (uVar8 <= local_70) {\n        uVar8 = local_70;\n      }\n      goto LAB_0040b191;\n    }\n    pbVar11 = param_1 + 2;\n    ppbVar3[7] = pbVar11;\n    uVar8 = 2;\n    if (1 < local_70) {\n      uVar8 = local_70;\n    }\n    iVar6 = (int)(char)param_1[2];\n    pbVar14 = pbVar11;\n    if ((byte)(param_1[2] - 0x30) < 10) {\n      do {\n        bVar17 = pbVar14[1];\n        pbVar14 = pbVar14 + 1;\n      } while ((byte)(bVar17 - 0x30) < 10);\n      if (bVar17 != 0x24) goto LAB_0040b2cf;\n      uVar16 = 0;\n      do {\n        pbVar12 = pbVar11;\n        uVar15 = 0xffffffffffffffff;\n        if (uVar16 < 0x199999999999999a) {\n          uVar15 = uVar16 * 10;\n        }\n        while( true ) {\n          iVar7 = iVar6 + -0x30;\n          uVar16 = uVar15 + (long)iVar7;\n          pbVar11 = pbVar12 + 1;\n          iVar6 = (int)(char)*pbVar11;\n          bVar17 = *pbVar11 - 0x30;\n          if (CARRY8(uVar15,(long)iVar7) == false) break;\n          pbVar12 = pbVar11;\n          uVar15 = 0xffffffffffffffff;\n          if (9 < bVar17) goto switchD_0040b357_caseD_26;\n        }\n      } while (bVar17 < 10);\n      pbVar14 = (byte *)(uVar16 - 1);\n      if ((byte *)0xfffffffffffffffd < pbVar14) goto switchD_0040b357_caseD_26;\n      ppbVar3[8] = pbVar14;\n      pbVar11 = pbVar12 + 2;\n    }\n    else {\nLAB_0040b2cf:\n      pbVar14 = ppbVar3[8];\n      if (ppbVar3[8] == (byte *)0xffffffffffffffff) {\n        local_68 = pbVar12 + 1;\n        ppbVar3[8] = pbVar12;\n        pbVar14 = pbVar12;\n        if (pbVar12 == (byte *)0xffffffffffffffff) goto switchD_0040b357_caseD_26;\n      }\n    }\n    __ptr = (byte **)param_3[1];\n    if (pbVar14 < pbVar19) {\n      pbVar12 = *param_3;\n      __dest_00 = __ptr;\nLAB_0040b2ee:\n      if (pbVar12 <= pbVar14) {\n        do {\n          pbVar12 = pbVar12 + 1;\n          *(undefined4 *)(__dest_00 + (long)pbVar12 * 4 + -4) = 0;\n        } while (pbVar12 <= pbVar14);\n        *param_3 = pbVar12;\n      }\n      iVar6 = *(int *)(__dest_00 + (long)pbVar14 * 4);\n      param_1 = pbVar11;\n      if (iVar6 == 0) {\n        *(undefined4 *)(__dest_00 + (long)pbVar14 * 4) = 5;\n        bVar17 = *pbVar11;\nLAB_0040b191:\n        local_70 = uVar8;\n        uVar5 = 0;\n        do {\n          param_1 = param_1 + 1;\n          if (bVar17 == 0x68) {\n            uVar5 = uVar5 | 1 << ((byte)uVar5 & 1);\n          }\n          else if (bVar17 == 0x4c) {\n            uVar5 = uVar5 | 4;\n          }\n          else {\n            if ((((bVar17 != 0x6c) && (bVar17 != 0x6a)) && ((bVar17 & 0xdf) != 0x5a)) &&\n               (bVar17 != 0x74)) goto code_r0x0040b354;\n            uVar5 = uVar5 + 8;\n          }\n          bVar17 = *param_1;\n        } while( true );\n      }\n      if (iVar6 == 5) {\n        bVar17 = *pbVar11;\n        goto LAB_0040b191;\n      }\n      goto LAB_0040b79c;\n    }\n    pbVar19 = (byte *)((long)pbVar19 * 2);\n    if (pbVar19 <= pbVar14) {\n      pbVar19 = pbVar14 + 1;\n    }\n    if (pbVar19 < (byte *)0x800000000000000) {\n      if (ppbVar2 == __ptr) {\n        __dest_00 = (byte **)malloc((long)pbVar19 << 5);\n        if (__dest_00 == (byte **)0x0) goto LAB_0040b989;\n        pbVar12 = *param_3;\n        __ptr = ppbVar2;\nLAB_0040bc3b:\n        memcpy(__dest_00,__ptr,(long)pbVar12 << 5);\n        pbVar12 = *param_3;\n      }\n      else {\n        __dest_00 = (byte **)realloc(__ptr,(long)pbVar19 << 5);\n        __ptr = (byte **)param_3[1];\n        if (__dest_00 == (byte **)0x0) goto LAB_0040b970;\n        pbVar12 = *param_3;\n        if (ppbVar2 == __ptr) goto LAB_0040bc3b;\n      }\n      param_3[1] = (byte *)__dest_00;\n      goto LAB_0040b2ee;\n    }\n    goto LAB_0040b970;\n  }\n  ppbVar3[3] = param_1;\n  ppbVar3[4] = pbVar11;\n  uVar8 = 1;\n  if (local_78 != 0) {\n    uVar8 = local_78;\n  }\n  iVar6 = (int)(char)param_1[1];\n  pbVar14 = pbVar11;\n  if ((byte)(param_1[1] - 0x30) < 10) {\n    do {\n      bVar17 = pbVar14[1];\n      pbVar14 = pbVar14 + 1;\n    } while ((byte)(bVar17 - 0x30) < 10);\n    if (bVar17 != 0x24) goto LAB_0040b21d;\n    pbVar14 = (byte *)0x0;\n    do {\n      pbVar10 = pbVar11;\n      pbVar13 = (byte *)0xffffffffffffffff;\n      if (pbVar14 < (byte *)0x199999999999999a) {\n        pbVar13 = (byte *)((long)pbVar14 * 10);\n      }\n      while( true ) {\n        iVar7 = iVar6 + -0x30;\n        pbVar14 = pbVar13 + iVar7;\n        iVar6 = (int)(char)pbVar10[1];\n        pbVar11 = pbVar10 + 1;\n        bVar17 = pbVar10[1] - 0x30;\n        if (CARRY8((ulong)pbVar13,(long)iVar7) == false) break;\n        pbVar10 = pbVar11;\n        pbVar13 = pbVar12;\n        if (9 < bVar17) goto switchD_0040b357_caseD_26;\n      }\n    } while (bVar17 < 10);\n    pbVar14 = pbVar14 + -1;\n    if ((byte *)0xfffffffffffffffd < pbVar14) goto switchD_0040b357_caseD_26;\n    ppbVar3[5] = pbVar14;\n    pbVar11 = pbVar10 + 2;\n  }\n  else {\nLAB_0040b21d:\n    pbVar14 = ppbVar3[5];\n    if (ppbVar3[5] == (byte *)0xffffffffffffffff) {\n      ppbVar3[5] = local_68;\n      bVar21 = local_68 == (byte *)0xffffffffffffffff;\n      pbVar14 = local_68;\n      local_68 = local_68 + 1;\n      if (bVar21) goto switchD_0040b357_caseD_26;\n    }\n  }\n  __ptr = (byte **)param_3[1];\n  if (pbVar14 < pbVar19) {\n    pbVar12 = *param_3;\n    __dest_00 = __ptr;\nLAB_0040b23c:\n    if (pbVar12 <= pbVar14) {\n      do {\n        pbVar12 = pbVar12 + 1;\n        *(undefined4 *)(__dest_00 + (long)pbVar12 * 4 + -4) = 0;\n      } while (pbVar12 <= pbVar14);\n      *param_3 = pbVar12;\n    }\n    iVar6 = *(int *)(__dest_00 + (long)pbVar14 * 4);\n    param_1 = pbVar11;\n    local_78 = uVar8;\n    pbVar12 = local_68;\n    if (iVar6 == 0) {\n      *(undefined4 *)(__dest_00 + (long)pbVar14 * 4) = 5;\n      bVar17 = *pbVar11;\n      pbVar11 = pbVar11 + 1;\n    }\n    else {\n      if (iVar6 != 5) goto LAB_0040b79c;\n      bVar17 = *pbVar11;\n      pbVar11 = pbVar11 + 1;\n    }\n    goto joined_r0x0040b28a;\n  }\n  pbVar19 = (byte *)((long)pbVar19 * 2);\n  if (pbVar19 <= pbVar14) {\n    pbVar19 = pbVar14 + 1;\n  }\n  if ((byte *)0x7ffffffffffffff < pbVar19) goto LAB_0040b970;\n  if (ppbVar2 != __ptr) {\n    __dest_00 = (byte **)realloc(__ptr,(long)pbVar19 << 5);\n    __ptr = (byte **)param_3[1];\n    if (__dest_00 != (byte **)0x0) {\n      pbVar12 = *param_3;\n      if (ppbVar2 == __ptr) goto LAB_0040ba89;\n      goto LAB_0040b55d;\n    }\n    goto LAB_0040b970;\n  }\n  __dest_00 = (byte **)malloc((long)pbVar19 << 5);\n  if (__dest_00 != (byte **)0x0) {\n    pbVar12 = *param_3;\n    __ptr = ppbVar2;\nLAB_0040ba89:\n    memcpy(__dest_00,__ptr,(long)pbVar12 << 5);\n    pbVar12 = *param_3;\nLAB_0040b55d:\n    param_3[1] = (byte *)__dest_00;\n    goto LAB_0040b23c;\n  }\n  goto LAB_0040b989;\ncode_r0x0040b354:\n  switch(bVar17) {\n  case 0x25:\n    goto switchD_0040b357_caseD_25;\n  default:\n    goto switchD_0040b357_caseD_26;\n  case 0x41:\n  case 0x45:\n  case 0x46:\n  case 0x47:\n  case 0x61:\n  case 0x65:\n  case 0x66:\n  case 0x67:\n    iVar6 = 0xc;\n    if ((int)uVar5 < 0x10) {\n      iVar6 = ((uVar5 & 4) != 0) + 0xb;\n    }\n    break;\n  case 0x43:\n    iVar6 = 0xe;\n    bVar17 = 99;\n    break;\n  case 0x53:\n    iVar6 = 0x10;\n    bVar17 = 0x73;\n    break;\n  case 0x58:\n  case 0x6f:\n  case 0x75:\n  case 0x78:\n    iVar6 = 10;\n    if (((((int)uVar5 < 0x10) && ((uVar5 & 4) == 0)) && (iVar6 = 8, (int)uVar5 < 8)) &&\n       (iVar6 = 2, (uVar5 & 2) == 0)) {\n      iVar6 = (-(uint)((uVar5 & 1) == 0) & 2) + 4;\n    }\n    break;\n  case 99:\n    iVar6 = (7 < (int)uVar5) + 0xd;\n    break;\n  case 100:\n  case 0x69:\n    iVar6 = 9;\n    if ((((int)uVar5 < 0x10) && ((uVar5 & 4) == 0)) &&\n       ((iVar6 = 7, (int)uVar5 < 8 && (iVar6 = 1, (uVar5 & 2) == 0)))) {\n      iVar6 = (-(uint)((uVar5 & 1) == 0) & 2) + 3;\n    }\n    break;\n  case 0x6e:\n    iVar6 = 0x16;\n    if ((((int)uVar5 < 0x10) && ((uVar5 & 4) == 0)) &&\n       ((iVar6 = 0x15, (int)uVar5 < 8 && (iVar6 = 0x12, (uVar5 & 2) == 0)))) {\n      iVar6 = ((uVar5 & 1) == 0) + 0x13;\n    }\n    break;\n  case 0x70:\n    iVar6 = 0x11;\n    break;\n  case 0x73:\n    iVar6 = (7 < (int)uVar5) + 0xf;\n  }\n  if (pbVar18 == (byte *)0xffffffffffffffff) {\n    ppbVar3[10] = local_68;\n    bVar21 = local_68 == (byte *)0xffffffffffffffff;\n    pbVar18 = local_68;\n    local_68 = local_68 + 1;\n    if (bVar21) {\nswitchD_0040b357_caseD_26:\n      __dest_00 = (byte **)param_3[1];\n      goto LAB_0040b79c;\n    }\n  }\n  else {\n    ppbVar3[10] = pbVar18;\n  }\n  __ptr = (byte **)param_3[1];\n  __dest_00 = __ptr;\n  if (pbVar18 < pbVar19) {\nLAB_0040b385:\n    pbVar11 = *param_3;\n    if (pbVar11 <= pbVar18) {\n      do {\n        pbVar11 = pbVar11 + 1;\n        *(undefined4 *)(__dest_00 + (long)pbVar11 * 4 + -4) = 0;\n      } while (pbVar11 <= pbVar18);\n      *param_3 = pbVar11;\n    }\n    iVar7 = *(int *)(__dest_00 + (long)pbVar18 * 4);\n    if (iVar7 == 0) {\n      *(int *)(__dest_00 + (long)pbVar18 * 4) = iVar6;\n    }\n    else if (iVar7 != iVar6) {\nLAB_0040b79c:\n      if (ppbVar2 != __dest_00) {\n        free(__dest_00);\n      }\n      if (puVar1 != (ulong *)param_2[1]) {\n        free((ulong *)param_2[1]);\n      }\n      piVar9 = __errno_location();\n      *piVar9 = 0x16;\n      return 0xffffffff;\n    }\nswitchD_0040b357_caseD_25:\n    *(byte *)(ppbVar3 + 9) = bVar17;\n    uVar8 = *param_2;\n    ppbVar3[1] = param_1;\n    uVar8 = uVar8 + 1;\n    *param_2 = uVar8;\n    if (uVar8 < uVar20) {\n      __dest = (ulong *)param_2[1];\n      goto LAB_0040b04b;\n    }\n    if (((long)uVar20 < 0) || (0x2e8ba2e8ba2e8ba < uVar20 * 2)) {\nLAB_0040bcc3:\n      __ptr = (byte **)param_3[1];\n      goto LAB_0040b970;\n    }\n    __ptr_00 = (ulong *)param_2[1];\n    if (puVar1 != __ptr_00) {\n      __dest = (ulong *)realloc(__ptr_00,uVar20 * 0xb0);\n      if (__dest == (ulong *)0x0) goto LAB_0040bcc3;\n      __ptr_00 = (ulong *)param_2[1];\n      uVar8 = *param_2;\n      if (puVar1 != __ptr_00) goto LAB_0040b45f;\nLAB_0040b584:\n      __dest = (ulong *)memcpy(__dest,__ptr_00,uVar8 * 0x58);\n      uVar8 = *param_2;\nLAB_0040b45f:\n      param_2[1] = (ulong)__dest;\n      uVar20 = uVar20 * 2;\n      goto LAB_0040b04b;\n    }\n    __dest = (ulong *)malloc(uVar20 * 0xb0);\n    if (__dest != (ulong *)0x0) goto LAB_0040b584;\n    __ptr = (byte **)param_3[1];\n    if (ppbVar2 == __ptr) goto LAB_0040b999;\n  }\n  else {\n    pbVar19 = (byte *)((long)pbVar19 * 2);\n    if (pbVar19 <= pbVar18) {\n      pbVar19 = pbVar18 + 1;\n    }\n    if (pbVar19 < (byte *)0x800000000000000) {\n      if (ppbVar2 == __ptr) {\n        __dest_00 = (byte **)malloc((long)pbVar19 << 5);\n        if (__dest_00 == (byte **)0x0) goto LAB_0040b989;\nLAB_0040b926:\n        memcpy(__dest_00,__ptr,(long)*param_3 << 5);\nLAB_0040b86b:\n        param_3[1] = (byte *)__dest_00;\n        goto LAB_0040b385;\n      }\n      __dest_00 = (byte **)realloc(__ptr,(long)pbVar19 << 5);\n      if (__dest_00 != (byte **)0x0) {\n        __ptr = ppbVar2;\n        if (ppbVar2 == (byte **)param_3[1]) goto LAB_0040b926;\n        goto LAB_0040b86b;\n      }\n      goto LAB_0040bcc3;\n    }\nLAB_0040b970:\n    if (ppbVar2 == __ptr) goto LAB_0040b989;\n  }\n  free(__ptr);\nLAB_0040b989:\n  if (puVar1 != (ulong *)param_2[1]) {\n    free((ulong *)param_2[1]);\n  }\nLAB_0040b999:\n  piVar9 = __errno_location();\n  *piVar9 = 0xc;\n  return 0xffffffff;\n}\n\n",
            "funcName": "FUN_0040afd0"
        },
        {
            "funcStartAddr": "0x40bce0",
            "funcEndAddr": "0x40bd3d",
            "decompiledFuncCode": "\n/* WARNING: Removing unreachable block (ram,0x0040bd13) */\n/* WARNING: Removing unreachable block (ram,0x0040bd18) */\n\nvoid FUN_0040bce0(void)\n\n{\n  __DT_INIT();\n  return;\n}\n\n",
            "funcName": "FUN_0040bce0"
        },
        {
            "funcStartAddr": "0x40bd40",
            "funcEndAddr": "0x40bd41",
            "decompiledFuncCode": "\nvoid FUN_0040bd40(void)\n\n{\n  return;\n}\n\n",
            "funcName": "FUN_0040bd40"
        },
        {
            "funcStartAddr": "0x40bd50",
            "funcEndAddr": "0x40bd68",
            "decompiledFuncCode": "\nvoid FUN_0040bd50(undefined8 param_1)\n\n{\n  __cxa_atexit(param_1,0,DAT_00613228);\n  return;\n}\n\n",
            "funcName": "FUN_0040bd50"
        },
        {
            "funcStartAddr": "0x40bd68",
            "funcEndAddr": "0x40bd88",
            "decompiledFuncCode": "\nundefined8 FUN_0040bd68(undefined8 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  code **ppcVar1;\n  \n  for (ppcVar1 = (code **)&DAT_00612e30; *ppcVar1 != (code *)0xffffffffffffffff;\n      ppcVar1 = ppcVar1 + -1) {\n    (**ppcVar1)();\n  }\n  return param_3;\n}\n\n",
            "funcName": "FUN_0040bd68"
        }
    ],
    "decompilerName": "Ghidra",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_stty.elf",
    "isStripped": "True",
    "compilerName": "gcc",
    "optLevel": "-O"
}