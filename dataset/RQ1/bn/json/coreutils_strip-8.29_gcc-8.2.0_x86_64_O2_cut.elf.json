{
    "decompilerName": "binaryNinja",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_cut.elf",
    "isStripped": "True",
    "compilerName": "gcc",
    "optLevel": "-O",
    "funcCount": 140,
    "funcInfo": [
        {
            "funcName": "sub_401630",
            "funcStartAddr": "0x401630",
            "funcEndAddr": "0x40163c",
            "decompiledFuncCode": "int64_t sub_401630()\n{\n    int64_t var_8 = data_60b008;\n    /* jump -> data_60b010 */\n}\n\n"
        },
        {
            "funcName": "sub_401646",
            "funcStartAddr": "0x401646",
            "funcEndAddr": "0x401650",
            "decompiledFuncCode": "int64_t sub_401646()\n{\n    int64_t var_8 = 0;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_401656",
            "funcStartAddr": "0x401656",
            "funcEndAddr": "0x401660",
            "decompiledFuncCode": "int64_t sub_401656()\n{\n    int64_t var_8 = 1;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_401666",
            "funcStartAddr": "0x401666",
            "funcEndAddr": "0x401670",
            "decompiledFuncCode": "int64_t sub_401666()\n{\n    int64_t var_8 = 2;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_401676",
            "funcStartAddr": "0x401676",
            "funcEndAddr": "0x401680",
            "decompiledFuncCode": "int64_t sub_401676()\n{\n    int64_t var_8 = 3;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_401686",
            "funcStartAddr": "0x401686",
            "funcEndAddr": "0x401690",
            "decompiledFuncCode": "int64_t sub_401686()\n{\n    int64_t var_8 = 4;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_401696",
            "funcStartAddr": "0x401696",
            "funcEndAddr": "0x4016a0",
            "decompiledFuncCode": "int64_t sub_401696()\n{\n    int64_t var_8 = 5;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_4016a6",
            "funcStartAddr": "0x4016a6",
            "funcEndAddr": "0x4016b0",
            "decompiledFuncCode": "int64_t sub_4016a6()\n{\n    int64_t var_8 = 6;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_4016b6",
            "funcStartAddr": "0x4016b6",
            "funcEndAddr": "0x4016c0",
            "decompiledFuncCode": "int64_t sub_4016b6()\n{\n    int64_t var_8 = 7;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_4016c6",
            "funcStartAddr": "0x4016c6",
            "funcEndAddr": "0x4016d0",
            "decompiledFuncCode": "int64_t sub_4016c6()\n{\n    int64_t var_8 = 8;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_4016d6",
            "funcStartAddr": "0x4016d6",
            "funcEndAddr": "0x4016e0",
            "decompiledFuncCode": "int64_t sub_4016d6()\n{\n    int64_t var_8 = 9;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_4016e6",
            "funcStartAddr": "0x4016e6",
            "funcEndAddr": "0x4016f0",
            "decompiledFuncCode": "int64_t sub_4016e6()\n{\n    int64_t var_8 = 0xa;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_4016f6",
            "funcStartAddr": "0x4016f6",
            "funcEndAddr": "0x401700",
            "decompiledFuncCode": "int64_t sub_4016f6()\n{\n    int64_t var_8 = 0xb;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_401706",
            "funcStartAddr": "0x401706",
            "funcEndAddr": "0x401710",
            "decompiledFuncCode": "int64_t sub_401706()\n{\n    int64_t var_8 = 0xc;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_401716",
            "funcStartAddr": "0x401716",
            "funcEndAddr": "0x401720",
            "decompiledFuncCode": "int64_t sub_401716()\n{\n    int64_t var_8 = 0xd;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_401726",
            "funcStartAddr": "0x401726",
            "funcEndAddr": "0x401730",
            "decompiledFuncCode": "int64_t sub_401726()\n{\n    int64_t var_8 = 0xe;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_401736",
            "funcStartAddr": "0x401736",
            "funcEndAddr": "0x401740",
            "decompiledFuncCode": "int64_t sub_401736()\n{\n    int64_t var_8 = 0xf;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_401746",
            "funcStartAddr": "0x401746",
            "funcEndAddr": "0x401750",
            "decompiledFuncCode": "int64_t sub_401746()\n{\n    int64_t var_8 = 0x10;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_401756",
            "funcStartAddr": "0x401756",
            "funcEndAddr": "0x401760",
            "decompiledFuncCode": "int64_t sub_401756()\n{\n    int64_t var_8 = 0x11;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_401766",
            "funcStartAddr": "0x401766",
            "funcEndAddr": "0x401770",
            "decompiledFuncCode": "int64_t sub_401766()\n{\n    int64_t var_8 = 0x12;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_401776",
            "funcStartAddr": "0x401776",
            "funcEndAddr": "0x401780",
            "decompiledFuncCode": "int64_t sub_401776()\n{\n    int64_t var_8 = 0x13;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_401786",
            "funcStartAddr": "0x401786",
            "funcEndAddr": "0x401790",
            "decompiledFuncCode": "int64_t sub_401786()\n{\n    int64_t var_8 = 0x14;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_401796",
            "funcStartAddr": "0x401796",
            "funcEndAddr": "0x4017a0",
            "decompiledFuncCode": "int64_t sub_401796()\n{\n    int64_t var_8 = 0x15;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_4017a6",
            "funcStartAddr": "0x4017a6",
            "funcEndAddr": "0x4017b0",
            "decompiledFuncCode": "int64_t sub_4017a6()\n{\n    int64_t var_8 = 0x16;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_4017b6",
            "funcStartAddr": "0x4017b6",
            "funcEndAddr": "0x4017c0",
            "decompiledFuncCode": "int64_t sub_4017b6()\n{\n    int64_t var_8 = 0x17;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_4017c6",
            "funcStartAddr": "0x4017c6",
            "funcEndAddr": "0x4017d0",
            "decompiledFuncCode": "int64_t sub_4017c6()\n{\n    int64_t var_8 = 0x18;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_4017d6",
            "funcStartAddr": "0x4017d6",
            "funcEndAddr": "0x4017e0",
            "decompiledFuncCode": "int64_t sub_4017d6()\n{\n    int64_t var_8 = 0x19;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_4017e6",
            "funcStartAddr": "0x4017e6",
            "funcEndAddr": "0x4017f0",
            "decompiledFuncCode": "int64_t sub_4017e6()\n{\n    int64_t var_8 = 0x1a;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_401806",
            "funcStartAddr": "0x401806",
            "funcEndAddr": "0x401810",
            "decompiledFuncCode": "int64_t sub_401806()\n{\n    int64_t var_8 = 0x1c;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_401826",
            "funcStartAddr": "0x401826",
            "funcEndAddr": "0x401830",
            "decompiledFuncCode": "int64_t sub_401826()\n{\n    int64_t var_8 = 0x1e;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_401836",
            "funcStartAddr": "0x401836",
            "funcEndAddr": "0x401840",
            "decompiledFuncCode": "int64_t sub_401836()\n{\n    int64_t var_8 = 0x1f;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_401846",
            "funcStartAddr": "0x401846",
            "funcEndAddr": "0x401850",
            "decompiledFuncCode": "int64_t sub_401846()\n{\n    int64_t var_8 = 0x20;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_401856",
            "funcStartAddr": "0x401856",
            "funcEndAddr": "0x401860",
            "decompiledFuncCode": "int64_t sub_401856()\n{\n    int64_t var_8 = 0x21;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_401866",
            "funcStartAddr": "0x401866",
            "funcEndAddr": "0x401870",
            "decompiledFuncCode": "int64_t sub_401866()\n{\n    int64_t var_8 = 0x22;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_401876",
            "funcStartAddr": "0x401876",
            "funcEndAddr": "0x401880",
            "decompiledFuncCode": "int64_t sub_401876()\n{\n    int64_t var_8 = 0x23;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_401886",
            "funcStartAddr": "0x401886",
            "funcEndAddr": "0x401890",
            "decompiledFuncCode": "int64_t sub_401886()\n{\n    int64_t var_8 = 0x24;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_401896",
            "funcStartAddr": "0x401896",
            "funcEndAddr": "0x4018a0",
            "decompiledFuncCode": "int64_t sub_401896()\n{\n    int64_t var_8 = 0x25;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_4018a6",
            "funcStartAddr": "0x4018a6",
            "funcEndAddr": "0x4018b0",
            "decompiledFuncCode": "int64_t sub_4018a6()\n{\n    int64_t var_8 = 0x26;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_4018b6",
            "funcStartAddr": "0x4018b6",
            "funcEndAddr": "0x4018c0",
            "decompiledFuncCode": "int64_t sub_4018b6()\n{\n    int64_t var_8 = 0x27;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_4018c6",
            "funcStartAddr": "0x4018c6",
            "funcEndAddr": "0x4018d0",
            "decompiledFuncCode": "int64_t sub_4018c6()\n{\n    int64_t var_8 = 0x28;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_4018d6",
            "funcStartAddr": "0x4018d6",
            "funcEndAddr": "0x4018e0",
            "decompiledFuncCode": "int64_t sub_4018d6()\n{\n    int64_t var_8 = 0x29;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_4018e6",
            "funcStartAddr": "0x4018e6",
            "funcEndAddr": "0x4018f0",
            "decompiledFuncCode": "int64_t sub_4018e6()\n{\n    int64_t var_8 = 0x2a;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_4018f6",
            "funcStartAddr": "0x4018f6",
            "funcEndAddr": "0x401900",
            "decompiledFuncCode": "int64_t sub_4018f6()\n{\n    int64_t var_8 = 0x2b;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_401906",
            "funcStartAddr": "0x401906",
            "funcEndAddr": "0x401910",
            "decompiledFuncCode": "int64_t sub_401906()\n{\n    int64_t var_8 = 0x2c;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_401916",
            "funcStartAddr": "0x401916",
            "funcEndAddr": "0x401920",
            "decompiledFuncCode": "int64_t sub_401916()\n{\n    int64_t var_8 = 0x2d;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_401926",
            "funcStartAddr": "0x401926",
            "funcEndAddr": "0x401930",
            "decompiledFuncCode": "int64_t sub_401926()\n{\n    int64_t var_8 = 0x2e;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_401936",
            "funcStartAddr": "0x401936",
            "funcEndAddr": "0x401940",
            "decompiledFuncCode": "int64_t sub_401936()\n{\n    int64_t var_8 = 0x2f;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_401946",
            "funcStartAddr": "0x401946",
            "funcEndAddr": "0x401950",
            "decompiledFuncCode": "int64_t sub_401946()\n{\n    int64_t var_8 = 0x30;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_401956",
            "funcStartAddr": "0x401956",
            "funcEndAddr": "0x401960",
            "decompiledFuncCode": "int64_t sub_401956()\n{\n    int64_t var_8 = 0x31;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_401966",
            "funcStartAddr": "0x401966",
            "funcEndAddr": "0x401970",
            "decompiledFuncCode": "int64_t sub_401966()\n{\n    int64_t var_8 = 0x32;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_401976",
            "funcStartAddr": "0x401976",
            "funcEndAddr": "0x401980",
            "decompiledFuncCode": "int64_t sub_401976()\n{\n    int64_t var_8 = 0x33;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_401986",
            "funcStartAddr": "0x401986",
            "funcEndAddr": "0x401990",
            "decompiledFuncCode": "int64_t sub_401986()\n{\n    int64_t var_8 = 0x34;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_401996",
            "funcStartAddr": "0x401996",
            "funcEndAddr": "0x4019a0",
            "decompiledFuncCode": "int64_t sub_401996()\n{\n    int64_t var_8 = 0x35;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_4019a6",
            "funcStartAddr": "0x4019a6",
            "funcEndAddr": "0x4019b0",
            "decompiledFuncCode": "int64_t sub_4019a6()\n{\n    int64_t var_8 = 0x36;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_4019b6",
            "funcStartAddr": "0x4019b6",
            "funcEndAddr": "0x4019c0",
            "decompiledFuncCode": "int64_t sub_4019b6()\n{\n    int64_t var_8 = 0x37;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_4019c6",
            "funcStartAddr": "0x4019c6",
            "funcEndAddr": "0x4019d0",
            "decompiledFuncCode": "int64_t sub_4019c6()\n{\n    int64_t var_8 = 0x38;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_4019d6",
            "funcStartAddr": "0x4019d6",
            "funcEndAddr": "0x4019e0",
            "decompiledFuncCode": "int64_t sub_4019d6()\n{\n    int64_t var_8 = 0x39;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_4019e6",
            "funcStartAddr": "0x4019e6",
            "funcEndAddr": "0x4019f0",
            "decompiledFuncCode": "int64_t sub_4019e6()\n{\n    int64_t var_8 = 0x3a;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "sub_401a06",
            "funcStartAddr": "0x401a06",
            "funcEndAddr": "0x401a10",
            "decompiledFuncCode": "int64_t sub_401a06()\n{\n    int64_t var_8 = 0x3c;\n    /* tailcall */\n    return sub_401630();\n}\n\n"
        },
        {
            "funcName": "main",
            "funcStartAddr": "0x401a40",
            "funcEndAddr": "0x401df4",
            "decompiledFuncCode": "int32_t main(int32_t argc, char** argv, char** envp)\n{\n    int64_t r13;\n    int64_t var_10 = r13;\n    char r12 = 0;\n    char* rdi = *argv;\n    int64_t rcx;\n    int64_t rdx;\n    uint64_t r8;\n    ssize_t r9;\n    rcx = sub_403790(rdi);\n    int32_t rbx;\n    int32_t rbp;\n    setlocale(6, &data_4094ec[0x1b], rdx, rcx, r8, r9, rbx, rbp);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_\u2026\");\n    textdomain(\"coreutils\");\n    sub_4074f0(sub_4031d0);\n    data_60b313 = 0;\n    data_60b314 = 0;\n    data_60b311 = 0;\n    data_60b2fa = 0;\n    while (true)\n    {\n        int32_t rax_1 = getopt_long(argc, argv, \"b:c:d:f:nsz\", &data_407fa0, nullptr);\n        char const* const rsi_1;\n        if (rax_1 == 0xffffffff)\n        {\n            int32_t rax_9 = data_60b314;\n            rsi_1 = \"you must specify a list of bytes\u2026\";\n            if (rax_9 != 0)\n            {\n                bool rdx_4 = rax_9 != 2;\n                if ((rax_9 != 2 && r12 != 0))\n                {\n                    rsi_1 = \"an input delimiter may be specif\u2026\";\n                }\n                if ((rax_9 == 2 || (rax_9 != 2 && r12 == 0)))\n                {\n                    if ((data_60b313 & rdx_4) == 0)\n                    {\n                        int32_t rsi_2;\n                        rsi_2 = rax_9 != 2;\n                        sub_402bd0(r13, ((rsi_2 << 2) | ((!(rax_9 - rax_9)) & 2)));\n                        if (r12 == 0)\n                        {\n                            data_60b311 = 9;\n                        }\n                        if (data_60b300 == 0)\n                        {\n                            char rax_22 = data_60b311;\n                            data_60b2f9 = 0;\n                            data_60b300 = 0x60b2f8;\n                            data_60b2f8 = rax_22;\n                            data_60b308 = 1;\n                        }\n                        int32_t rax_16 = data_60b2bc;\n                        bool cond:4 = rax_16 >= argc;\n                        int32_t r12_1;\n                        if (rax_16 == argc)\n                        {\n                            r12_1 = sub_401ee0(&data_4094ea);\n                        }\n                        else\n                        {\n                            r12_1 = 1;\n                            if ((!cond:4))\n                            {\n                                do\n                                {\n                                    r12_1 = (r12_1 & sub_401ee0(argv[rax_16]));\n                                    rax_16 = (data_60b2bc + 1);\n                                    data_60b2bc = rax_16;\n                                } while (rax_16 < argc);\n                            }\n                        }\n                        if ((data_60b2fa != 0 && sub_405c20(stdin) == 0xffffffff))\n                        {\n                            r12_1 = 0;\n                            error(0, *__errno_location(), &data_4094ea);\n                        }\n                        return (r12_1 ^ 1);\n                    }\n                    rsi_1 = \"suppressing non-delimited lines \u2026\";\n                }\n            }\n        }\n        else\n        {\n            bool cond:1_1 = rax_1 <= 0x66;\n            if (rax_1 != 0x66)\n            {\n                if (cond:1_1)\n                {\n                    if (rax_1 > 0x63)\n                    {\n                        if (rax_1 != 0x64)\n                        {\n                            break;\n                        }\n                        int64_t rdx_2 = data_60b4f0;\n                        char rax_7 = *rdx_2;\n                        if ((rax_7 == 0 || (rax_7 != 0 && *(rdx_2 + 1) == 0)))\n                        {\n                            data_60b311 = rax_7;\n                            r12 = 1;\n                            continue;\n                        }\n                        if ((rax_7 != 0 && *(rdx_2 + 1) != 0))\n                        {\n                            rsi_1 = \"the delimiter must be a single c\u2026\";\n                        }\n                    }\n                    else\n                    {\n                        if (rax_1 < 0x62)\n                        {\n                            if (rax_1 == 0xffffff7d)\n                            {\n                                int64_t var_30 = 0;\n                                char const* const var_38 = \"Jim Meyering\";\n                                sub_405830(stdout, &data_40755b, \"GNU coreutils\", data_60b238);\n                                exit(0);\n                                /* no return */\n                            }\n                            if (rax_1 == 0xffffff7e)\n                            {\n                                sub_4026b0(0);\n                                /* no return */\n                            }\n                            break;\n                        }\n                        if (data_60b314 == 0)\n                        {\n                            data_60b314 = 1;\n                            r13 = data_60b4f0;\n                            continue;\n                        }\n                    }\n                }\n                else\n                {\n                    bool cond:3_1 = rax_1 > 0x7a;\n                    if (rax_1 == 0x7a)\n                    {\n                        data_60b230 = 0;\n                        continue;\n                    }\n                    else if (cond:3_1)\n                    {\n                        if (rax_1 == 0x80)\n                        {\n                            int64_t rdx_1 = data_60b4f0;\n                            data_60b310 = 1;\n                            int64_t rax_3 = 1;\n                            if (*rdx_1 != 0)\n                            {\n                                int64_t rcx_2 = -1;\n                                int64_t rdi_3 = rdx_1;\n                                while (rcx_2 != 0)\n                                {\n                                    bool cond:5_1 = 0 != *rdi_3;\n                                    rdi_3 = (rdi_3 + 1);\n                                    rcx_2 = (rcx_2 - 1);\n                                    if ((!cond:5_1))\n                                    {\n                                        break;\n                                    }\n                                }\n                                rax_3 = ((!rcx_2) - 1);\n                            }\n                            data_60b308 = rax_3;\n                            data_60b300 = sub_405ba0(rdx_1);\n                            continue;\n                        }\n                        else\n                        {\n                            if (rax_1 != 0x81)\n                            {\n                                break;\n                            }\n                            data_60b312 = 1;\n                            continue;\n                        }\n                    }\n                    else if (rax_1 == 0x6e)\n                    {\n                        continue;\n                    }\n                    else\n                    {\n                        if (rax_1 != 0x73)\n                        {\n                            break;\n                        }\n                        data_60b313 = 1;\n                        continue;\n                    }\n                }\n            }\n            else if (data_60b314 == 0)\n            {\n                data_60b314 = 2;\n                r13 = data_60b4f0;\n                continue;\n            }\n            if ((rax_1 == 0x66 || ((rax_1 != 0x66 && cond:1_1) && rax_1 <= 0x63)))\n            {\n                rsi_1 = \"only one type of list may be spe\u2026\";\n            }\n        }\n        error(0, 0, dcgettext(nullptr, rsi_1, 5));\n        break;\n    }\n    sub_4026b0(1);\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "_start",
            "funcStartAddr": "0x401e00",
            "funcEndAddr": "0x401e2a",
            "decompiledFuncCode": "int64_t _start(int64_t arg1, int64_t arg2, void (* arg3)()) __noreturn\n{\n    int64_t rax;\n    int64_t var_8 = rax;\n    __libc_start_main(main, __return_addr, &arg_8, init, fini, arg3, &var_8);\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_401e2b",
            "funcStartAddr": "0x401e2b",
            "funcEndAddr": "0x401e4a",
            "decompiledFuncCode": "void sub_401e2b()\n{\n    return;\n}\n\n"
        },
        {
            "funcName": "sub_401e4a",
            "funcStartAddr": "0x401e4a",
            "funcEndAddr": "0x401e81",
            "decompiledFuncCode": "int64_t sub_401e4a()\n{\n    int64_t rax;\n    int64_t rdx;\n    rdx = HIGHD(0);\n    rax = LOWD(0);\n    return (COMBINE(rdx, rax) / 2);\n}\n\n"
        },
        {
            "funcName": "sub_401e81",
            "funcStartAddr": "0x401e81",
            "funcEndAddr": "0x401ed8",
            "decompiledFuncCode": "void sub_401e81()\n{\n    if (data_60b2e8 != 0)\n    {\n        return;\n    }\n    while (true)\n    {\n        int64_t rax_1 = data_60b2f0;\n        if (rax_1 >= 0)\n        {\n            break;\n        }\n        data_60b2f0 = (rax_1 + 1);\n        *(0x60ae40 + ((rax_1 + 1) << 3))();\n    }\n    sub_401e2b();\n    data_60b2e8 = 1;\n}\n\n"
        },
        {
            "funcName": "thunk_401ed8",
            "funcStartAddr": "0x401ed8",
            "funcEndAddr": "0x401edd",
            "decompiledFuncCode": "int64_t j_sub_401e4a()\n{\n    /* tailcall */\n    return sub_401e4a();\n}\n\n"
        },
        {
            "funcName": "sub_401ee0",
            "funcStartAddr": "0x401ee0",
            "funcEndAddr": "0x4026af",
            "decompiledFuncCode": "int64_t sub_401ee0(uint64_t arg1)\n{\n    uint64_t rsi = arg1;\n    int64_t rcx = 2;\n    void* const rdi = &data_4094ea;\n    uint64_t r12;\n    uint64_t var_20 = r12;\n    int64_t __saved_rbx;\n    bool c = &__saved_rbx < 0x18;\n    bool z = &__saved_rbx == 0x18;\n    while (rcx != 0)\n    {\n        char temp1_1 = *rsi;\n        char temp2_1 = *rdi;\n        c = temp1_1 < temp2_1;\n        z = temp1_1 == temp2_1;\n        rsi = (rsi + 1);\n        rdi = (rdi + 1);\n        rcx = (rcx - 1);\n        if ((!z))\n        {\n            break;\n        }\n    }\n    FILE* rax_30;\n    uint64_t* const r13;\n    if ((((!z) && (!c)) - 0) != 0)\n    {\n        rax_30 = fopen(arg1, &data_40764e);\n        r13 = rax_30;\n    }\n    else\n    {\n        data_60b2fa = 1;\n        r13 = stdin;\n    }\n    if (((((!z) && (!c)) - 0) == 0 || ((((!z) && (!c)) - 0) != 0 && rax_30 != 0)))\n    {\n        sub_403280(r13, 2);\n        bool cond:2_1 = data_60b314 == 1;\n        data_60b328 = data_60b4e0;\n        char rax_19;\n        if (cond:2_1)\n        {\n            int64_t rbx_4 = 0;\n            char r12_4 = 0;\n            int32_t rbp_3;\n            uint32_t rsi_10;\n            while (true)\n            {\n            label_4024b0:\n                char* rax_35 = r13[1];\n                int64_t rax_37;\n                if (rax_35 < r13[2])\n                {\n                    do\n                    {\n                        rsi_10 = data_60b230;\n                        r13[1] = &rax_35[1];\n                        rbp_3 = *rax_35;\n                        if (rbp_3 == rsi_10)\n                        {\n                            break;\n                        }\n                    label_4024d8:\n                        int64_t rax_36 = data_60b328;\n                        rbx_4 = (rbx_4 + 1);\n                        if (rbx_4 > *(rax_36 + 8))\n                        {\n                            rax_36 = (rax_36 + 0x10);\n                            data_60b328 = rax_36;\n                        }\n                        rax_37 = *rax_36;\n                        if (rbx_4 < rax_37)\n                        {\n                            break;\n                        }\n                        char rdx_16 = data_60b310;\n                        FILE* rdi_18 = stdout;\n                        if (rdx_16 != 0)\n                        {\n                            rax_37 = rbx_4 == rax_37;\n                            r12_4 = (r12_4 & rax_37);\n                            if (r12_4 != 0)\n                            {\n                                fwrite_unlocked(data_60b300, 1, data_60b308, stdout);\n                                rdi_18 = stdout;\n                            }\n                            else\n                            {\n                                r12_4 = rdx_16;\n                            }\n                        }\n                        char* rax_38 = stdout[5];\n                        if (rax_38 >= stdout[6])\n                        {\n                            __overflow(rdi_18, rbp_3);\n                            goto label_4024b0;\n                        }\n                        stdout[5] = &rax_38[1];\n                        *rax_38 = rbp_3;\n                        rax_35 = r13[1];\n                    } while (rax_35 < r13[2]);\n                    if (((rbp_3 != rsi_10 && rbp_3 != rsi_10) && rbx_4 < rax_37))\n                    {\n                        continue;\n                    }\n                }\n                if ((rax_35 >= r13[2] || ((rax_35 < r13[2] && rbp_3 != rsi_10) && (!(rbp_3 != rsi_10 && rbx_4 < rax_37)))))\n                {\n                    rsi_10 = data_60b230;\n                    rbp_3 = __uflow(r13);\n                    if (rbp_3 != rsi_10)\n                    {\n                        break;\n                    }\n                }\n                FILE* rdi_21 = stdout;\n                char* rax_40 = stdout[5];\n                if (rax_40 >= stdout[6])\n                {\n                    __overflow(rdi_21, rsi_10);\n                }\n                else\n                {\n                    stdout[5] = &rax_40[1];\n                    *rax_40 = rsi_10;\n                }\n                rbx_4 = 0;\n                r12_4 = 0;\n                data_60b328 = data_60b4e0;\n            }\n            if (rbp_3 != 0xffffffff)\n            {\n                goto label_4024d8;\n            }\n            if (rbx_4 != 0)\n            {\n                FILE* rdi_20 = stdout;\n                char* rdx_18 = stdout[5];\n                if (rdx_18 >= stdout[6])\n                {\n                    __overflow(rdi_20, rsi_10);\n                    rax_19 = *r13;\n                }\n                else\n                {\n                    stdout[5] = &rdx_18[1];\n                    *rdx_18 = rsi_10;\n                    rax_19 = *r13;\n                }\n                goto label_402234;\n            }\n        }\n        else\n        {\n            char* rax_2 = r13[1];\n            uint32_t rax_18;\n            uint32_t rdi_2;\n            if (rax_2 >= r13[2])\n            {\n                rax_18 = __uflow(r13);\n                rdi_2 = rax_18;\n            }\n            else\n            {\n                r13[1] = &rax_2[1];\n                rdi_2 = *rax_2;\n            }\n            if ((rax_2 < r13[2] || (rax_2 >= r13[2] && rax_18 != 0xffffffff)))\n            {\n                int64_t rbx_1 = 1;\n                ungetc(rdi_2, r13);\n                int64_t r15;\n                r15 = **&data_60b328 > 1;\n                r15 = (r15 ^ data_60b313);\n                bool rbp_1 = false;\n                int32_t rdx_2 = 0;\n                char var_3d_1 = r15;\n                while (true)\n                {\n                label_401f94:\n                    r12 = rbx_1 == 1;\n                    r12 = (r12 & var_3d_1);\n                    int64_t rax_4;\n                    if (r12 == 0)\n                    {\n                        while (true)\n                        {\n                            rax_4 = data_60b328;\n                            r12 = rdx_2;\n                        label_401fad:\n                            char rax_5;\n                            bool rcx_2;\n                            uint32_t rdx_11;\n                            int32_t rbp_2;\n                            bool rdi_4;\n                            uint32_t r15_1;\n                            if (*rax_4 > rbx_1)\n                            {\n                            label_402094:\n                                char* rax_9 = r13[1];\n                                if (rax_9 < r13[2])\n                                {\n                                    r13[1] = &rax_9[1];\n                                    r15_1 = *rax_9;\n                                }\n                                else\n                                {\n                                    r15_1 = __uflow(r13);\n                                }\n                                rdx_11 = data_60b311;\n                                rax_5 = data_60b230;\n                                rcx_2 = rdx_11;\n                                rdi_4 = rdx_11;\n                                if (rdx_11 != r15_1)\n                                {\n                                    rdx_2 = rax_5;\n                                    if ((r15_1 != rdx_2 && r15_1 != 0xffffffff))\n                                    {\n                                        r12 = r15_1;\n                                        goto label_402094;\n                                    }\n                                }\n                            }\n                            else\n                            {\n                                if (rbp_1 != 0)\n                                {\n                                    fwrite_unlocked(data_60b300, 1, data_60b308, stdout);\n                                }\n                            label_40203f:\n                                char* rax_7 = r13[1];\n                                if (rax_7 < r13[2])\n                                {\n                                    r13[1] = &rax_7[1];\n                                    rbp_2 = *rax_7;\n                                }\n                                else\n                                {\n                                    rbp_2 = __uflow(r13);\n                                }\n                                rdx_11 = data_60b311;\n                                rax_5 = data_60b230;\n                                rcx_2 = rdx_11;\n                                rdi_4 = rdx_11;\n                                r15_1 = rdx_11;\n                                if (rbp_2 == rdx_11)\n                                {\n                                    rbp_1 = true;\n                                }\n                            }\n                            char* rax_24;\n                            int32_t rax_26;\n                            uint32_t rcx_3;\n                            int32_t rsi_3;\n                            bool r8_1;\n                            bool r9_1;\n                            if (((*rax_4 <= rbx_1 && rbp_2 == rdx_11) || (*rax_4 > rbx_1 && rdx_11 == r15_1)))\n                            {\n                                if (rax_5 != rcx_2)\n                                {\n                                    rdx_2 = r15_1;\n                                    if (rdx_2 == rdx_11)\n                                    {\n                                    label_402296:\n                                        int64_t rax_22 = data_60b328;\n                                        rbx_1 = (rbx_1 + 1);\n                                        if (rbx_1 <= *(rax_22 + 8))\n                                        {\n                                            goto label_401f94;\n                                        }\n                                        data_60b328 = (rax_22 + 0x10);\n                                        goto label_401f94;\n                                    }\n                                label_4022d5:\n                                    rax_5 = data_60b230;\n                                    r8_1 = rdx_2 == 0xffffffff;\n                                    goto label_4022e0;\n                                }\n                                rax_24 = r13[1];\n                                if (rax_24 >= r13[2])\n                                {\n                                    rax_26 = __uflow(r13);\n                                    rdx_2 = rax_26;\n                                    if (rax_26 == 0xffffffff)\n                                    {\n                                        rsi_3 = data_60b230;\n                                        r9_1 = rbp_1;\n                                        rdi_4 = data_60b311;\n                                        rcx_3 = 0;\n                                        rbp_1 = true;\n                                        rax_5 = rsi_3;\n                                    }\n                                }\n                                else\n                                {\n                                    r13[1] = &rax_24[1];\n                                    rdx_2 = *rax_24;\n                                }\n                                if ((rax_24 < r13[2] || (rax_24 >= r13[2] && rax_26 != 0xffffffff)))\n                                {\n                                    ungetc(rdx_2, r13);\n                                    rcx_3 = data_60b311;\n                                    rdx_2 = r15_1;\n                                    rdi_4 = rcx_3;\n                                }\n                            }\n                            if ((*rax_4 <= rbx_1 && rbp_2 != rdx_11))\n                            {\n                                rdx_2 = rax_5;\n                                if (rbp_2 == rdx_2)\n                                {\n                                    rbp_1 = true;\n                                }\n                            }\n                            if ((((*rax_4 <= rbx_1 && rbp_2 != rdx_11) && rbp_2 == rdx_2) || ((*rax_4 > rbx_1 && rdx_11 != r15_1) && r15_1 == rdx_2)))\n                            {\n                                rcx_3 = rcx_2;\n                                rdi_4 = rcx_3;\n                            }\n                            if ((((((*rax_4 <= rbx_1 && rbp_2 == rdx_11) || (*rax_4 > rbx_1 && rdx_11 == r15_1)) && rax_5 == rcx_2) && (rax_24 < r13[2] || (rax_24 >= r13[2] && rax_26 != 0xffffffff))) || ((((*rax_4 <= rbx_1 && rbp_2 != rdx_11) && rbp_2 == rdx_2) || ((*rax_4 > rbx_1 && rdx_11 != r15_1) && r15_1 == rdx_2)) && data_60b230 != rcx_3)))\n                            {\n                                if (rdx_2 == rcx_3)\n                                {\n                                    goto label_402296;\n                                }\n                                goto label_4022d5;\n                            }\n                            if (((((*rax_4 <= rbx_1 && rbp_2 != rdx_11) && rbp_2 == rdx_2) || ((*rax_4 > rbx_1 && rdx_11 != r15_1) && r15_1 == rdx_2)) && data_60b230 == rcx_3))\n                            {\n                                r8_1 = false;\n                            label_4022e0:\n                                rsi_3 = rax_5;\n                                rcx_3 = rsi_3 == rdx_2;\n                                if ((r8_1 == 0 && rcx_3 == 0))\n                                {\n                                    goto label_401f94;\n                                }\n                                r9_1 = rbp_1;\n                                rbp_1 = r8_1;\n                            }\n                            if (((*rax_4 <= rbx_1 && rbp_2 != rdx_11) && rbp_2 != rdx_2))\n                            {\n                                if (rbp_2 != 0xffffffff)\n                                {\n                                    FILE* rdi_5 = stdout;\n                                    char* rax_6 = stdout[5];\n                                    if (rax_6 >= stdout[6])\n                                    {\n                                        __overflow(rdi_5, rbp_2);\n                                    }\n                                    else\n                                    {\n                                        stdout[5] = &rax_6[1];\n                                        *rax_6 = rbp_2;\n                                    }\n                                    r12 = rbp_2;\n                                    goto label_40203f;\n                                }\n                                rbp_1 = true;\n                            }\n                            if ((((*rax_4 > rbx_1 && rdx_11 != r15_1) && r15_1 != rdx_2) || ((*rax_4 <= rbx_1 && rbp_2 != rdx_11) && rbp_2 != rdx_2)))\n                            {\n                                rdi_4 = rcx_2;\n                                r9_1 = rbp_1;\n                                rsi_3 = rax_5;\n                                rdx_2 = -1;\n                                rcx_3 = 0;\n                                rbp_1 = true;\n                            }\n                            if ((((((*rax_4 > rbx_1 && rdx_11 != r15_1) && r15_1 != rdx_2) || ((*rax_4 <= rbx_1 && rbp_2 != rdx_11) && rbp_2 != rdx_2)) || (((((*rax_4 <= rbx_1 && rbp_2 == rdx_11) || (*rax_4 > rbx_1 && rdx_11 == r15_1)) && rax_5 == rcx_2) && rax_24 >= r13[2]) && rax_26 == 0xffffffff)) || ((((*rax_4 <= rbx_1 && rbp_2 != rdx_11) && rbp_2 == rdx_2) || ((*rax_4 > rbx_1 && rdx_11 != r15_1) && r15_1 == rdx_2)) && data_60b230 == rcx_3)))\n                            {\n                                if (r9_1 != 0)\n                                {\n                                label_4020f7:\n                                    rdi_4 = rdi_4 == rax_5;\n                                    if (((rsi_3 != r12 | rdi_4) == 0 && rcx_3 == 0))\n                                    {\n                                        goto label_402230;\n                                    }\n                                    FILE* rdi_8 = stdout;\n                                    char* rcx_4 = stdout[5];\n                                    if (rcx_4 >= stdout[6])\n                                    {\n                                        __overflow(rdi_8, rsi_3);\n                                    }\n                                    else\n                                    {\n                                        stdout[5] = &rcx_4[1];\n                                        *rcx_4 = rax_5;\n                                    }\n                                }\n                                else\n                                {\n                                    if (data_60b313 != 1)\n                                    {\n                                        goto label_4020f7;\n                                    }\n                                    if (rbx_1 != 1)\n                                    {\n                                        goto label_4020f7;\n                                    }\n                                }\n                                if (rbp_1 != 0)\n                                {\n                                    goto label_402230;\n                                }\n                                data_60b328 = data_60b4e0;\n                            label_40213e:\n                                rbx_1 = 1;\n                                r12 = true;\n                                r12 = (1 & var_3d_1);\n                                if (r12 != 0)\n                                {\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    void* rax_12 = sub_4032b0(&data_60b320, &data_60b318, nullptr, -1, data_60b311, data_60b230, r13);\n                    bool cond:5_1 = rax_12 == 0;\n                    if (rax_12 < 0)\n                    {\n                        free(data_60b320);\n                        rax_19 = *r13;\n                        data_60b320 = 0;\n                        if ((rax_19 & 0x30) == 0)\n                        {\n                            sub_405bc0();\n                            /* no return */\n                        }\n                        break;\n                    }\n                    if (cond:5_1)\n                    {\n                        __assert_fail(\"n_bytes != 0\", \"src/cut.c\", 0x149, \"cut_fields\");\n                        /* no return */\n                    }\n                    int64_t rdi_9 = data_60b320;\n                    void* rdx_8 = (rax_12 - 1);\n                    if (*((rdi_9 + rax_12) - 1) == data_60b311)\n                    {\n                        rax_4 = data_60b328;\n                        if (*rax_4 <= 1)\n                        {\n                            fwrite_unlocked(rdi_9, 1, rdx_8, stdout);\n                            char* rax_28;\n                            int32_t rax_29;\n                            if (data_60b311 == data_60b230)\n                            {\n                                rax_28 = r13[1];\n                                if (rax_28 >= r13[2])\n                                {\n                                    rax_29 = __uflow(r13);\n                                    if (rax_29 == 0xffffffff)\n                                    {\n                                        rax_4 = data_60b328;\n                                    }\n                                }\n                                else\n                                {\n                                    r13[1] = &rax_28[1];\n                                    rax_29 = *rax_28;\n                                }\n                                if ((rax_28 < r13[2] || (rax_28 >= r13[2] && rax_29 != 0xffffffff)))\n                                {\n                                    ungetc(rax_29, r13);\n                                }\n                            }\n                            if (((data_60b311 == data_60b230 && (rax_28 < r13[2] || (rax_28 >= r13[2] && rax_29 != 0xffffffff))) || data_60b311 != data_60b230))\n                            {\n                                rax_4 = data_60b328;\n                                rbp_1 = r12;\n                            }\n                        }\n                        if (*(rax_4 + 8) > 1)\n                        {\n                            rbx_1 = 2;\n                            r12 = 0;\n                            goto label_401fad;\n                        }\n                        rax_4 = (rax_4 + 0x10);\n                        rbx_1 = 2;\n                        r12 = 0;\n                        data_60b328 = rax_4;\n                        goto label_401fad;\n                    }\n                    if (data_60b313 == 0)\n                    {\n                        fwrite_unlocked(rdi_9, 1, rax_12, stdout);\n                        rdx_2 = data_60b230;\n                        if (*((data_60b320 + rax_12) - 1) == rdx_2)\n                        {\n                            goto label_40213e;\n                        }\n                        FILE* rdi_10 = stdout;\n                        char* rax_17 = stdout[5];\n                        if (rax_17 >= stdout[6])\n                        {\n                            __overflow(rdi_10, rdx_2);\n                            rdx_2 = data_60b230;\n                            goto label_40213e;\n                        }\n                        stdout[5] = &rax_17[1];\n                        *rax_17 = rdx_2;\n                        goto label_40213e;\n                    }\n                    rbx_1 = 1;\n                    rdx_2 = 0;\n                }\n                goto label_402234;\n            }\n        }\n    label_402230:\n        rax_19 = *r13;\n    label_402234:\n        bool c_1 = false;\n        bool z_1 = (rax_19 & 0x20) == 0;\n        if (z_1)\n        {\n            void* const rdi_12 = &data_4094ea;\n            int64_t rcx_6 = 2;\n            uint64_t rsi_6 = arg1;\n            while (rcx_6 != 0)\n            {\n                char temp4_1 = *rsi_6;\n                char temp5_1 = *rdi_12;\n                c_1 = temp4_1 < temp5_1;\n                z_1 = temp4_1 == temp5_1;\n                rsi_6 = (rsi_6 + 1);\n                rdi_12 = (rdi_12 + 1);\n                rcx_6 = (rcx_6 - 1);\n                if ((!z_1))\n                {\n                    break;\n                }\n            }\n            if ((((!z_1) && (!c_1)) - 0) == 0)\n            {\n                clearerr_unlocked(r13);\n                return 1;\n            }\n            if (sub_405c20(r13) != 0xffffffff)\n            {\n                return 1;\n            }\n        }\n    }\n    if (((((((!z) && (!c)) - 0) != 0 && rax_30 == 0) || (((!z) && (!c)) - 0) == 0) || ((((!z) && (!c)) - 0) != 0 && rax_30 != 0)))\n    {\n        error(0, *__errno_location(), \"%s\", sub_405230(0, 3, arg1));\n        return 0;\n    }\n}\n\n"
        },
        {
            "funcName": "sub_4026b0",
            "funcStartAddr": "0x4026b0",
            "funcEndAddr": "0x402add",
            "decompiledFuncCode": "int64_t sub_4026b0(int32_t arg1) __noreturn\n{\n    int64_t rbp = data_60b350;\n    if (arg1 != 0)\n    {\n        __fprintf_chk(stderr, 1, dcgettext(nullptr, \"Try '%s --help' for more informa\u2026\", 5), rbp);\n    }\n    else\n    {\n        __printf_chk(1, dcgettext(nullptr, \"Usage: %s OPTION... [FILE]...\\n\", 5), rbp);\n        fputs_unlocked(dcgettext(nullptr, \"Print selected parts of lines fr\u2026\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"\\nWith no FILE, or when FILE is \u2026\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"\\nMandatory arguments to long op\u2026\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"  -b, --bytes=LIST        select\u2026\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"  -f, --fields=LIST       select\u2026\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"      --complement        comple\u2026\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"  -s, --only-delimited    do not\u2026\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"  -z, --zero-terminated    line \u2026\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"      --help     display this he\u2026\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"      --version  output version \u2026\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"\\nUse one, and only one of -b, -\u2026\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"Each range is one of:\\n\\n  N    \u2026\", 5), stdout);\n        void* const var_88 = &data_40755f;\n        void* const* rax_16 = &var_88;\n        void* const var_78_1 = \"coreutils\";\n        void* const var_70_1 = \"Multi-call invocation\";\n        void* const var_68_1 = \"sha224sum\";\n        void* const var_60_1 = \"sha2 utilities\";\n        void* const var_58_1 = \"sha256sum\";\n        void* const var_50_1 = \"sha2 utilities\";\n        void* const var_48_1 = \"sha384sum\";\n        void* const var_40_1 = \"sha2 utilities\";\n        void* const var_38_1 = \"sha512sum\";\n        void* const var_30_1 = \"sha2 utilities\";\n        int64_t var_28_1 = 0;\n        int64_t var_20_1 = 0;\n        bool c_1;\n        bool z_1;\n        do\n        {\n            rax_16 = &rax_16[2];\n            void* const rdi_14 = *rax_16;\n            c_1 = false;\n            z_1 = (rdi_14 & rdi_14) == 0;\n            if (z_1)\n            {\n                break;\n            }\n            void* const rsi_14 = &data_40755b;\n            int64_t rcx_2 = 4;\n            while (rcx_2 != 0)\n            {\n                char temp0_1 = *rsi_14;\n                char temp1_1 = *rdi_14;\n                c_1 = temp0_1 < temp1_1;\n                z_1 = temp0_1 == temp1_1;\n                rsi_14 = (rsi_14 + 1);\n                rdi_14 = (rdi_14 + 1);\n                rcx_2 = (rcx_2 - 1);\n                if ((!z_1))\n                {\n                    break;\n                }\n            }\n        } while ((((!z_1) && (!c_1)) - 0) != 0);\n        void* const rbp_1 = rax_16[1];\n        char* rax_27;\n        int32_t rax_28;\n        void* const r12_1;\n        if (rbp_1 == 0)\n        {\n            int64_t rcx_5;\n            int64_t rdx_5;\n            uint64_t r8_2;\n            ssize_t r9_2;\n            rcx_5 = __printf_chk(1, dcgettext(nullptr, \"\\n%s online help: <%s>\\n\", 5), \"GNU coreutils\", \"https://www.gnu.org/software/cor\u2026\");\n            rax_27 = setlocale(5, nullptr, rdx_5, rcx_5, r8_2, r9_2, var_88, \"test invocation\");\n            if (rax_27 != 0)\n            {\n                rax_28 = strncmp(rax_27, &data_4075e3, 3);\n                if (rax_28 != 0)\n                {\n                    rbp_1 = &data_40755b;\n                }\n            }\n            if ((rax_27 == 0 || (rax_27 != 0 && rax_28 == 0)))\n            {\n                rbp_1 = &data_40755b;\n                r12_1 = \" invocation\";\n                __printf_chk(1, dcgettext(nullptr, \"Full documentation at: <%s%s>\\n\", 5), \"https://www.gnu.org/software/cor\u2026\", &data_40755b);\n            }\n        }\n        else\n        {\n            int64_t rcx_3;\n            int64_t rdx_3;\n            uint64_t r8_1;\n            ssize_t r9_1;\n            rcx_3 = __printf_chk(1, dcgettext(nullptr, \"\\n%s online help: <%s>\\n\", 5), \"GNU coreutils\", \"https://www.gnu.org/software/cor\u2026\");\n            char* rax_19 = setlocale(5, nullptr, rdx_3, rcx_3, r8_1, r9_1, var_88, \"test invocation\");\n            if (rax_19 == 0)\n            {\n                goto label_4029d0;\n            }\n            if (strncmp(rax_19, &data_4075e3, 3) == 0)\n            {\n                goto label_4029d0;\n            }\n        }\n        if ((((rbp_1 == 0 && rax_27 != 0) && rax_28 != 0) || rbp_1 != 0))\n        {\n            __printf_chk(1, dcgettext(nullptr, \"Report %s translation bugs to <h\u2026\", 5), &data_40755b);\n        label_4029d0:\n            r12_1 = \" invocation\";\n            __printf_chk(1, dcgettext(nullptr, \"Full documentation at: <%s%s>\\n\", 5), \"https://www.gnu.org/software/cor\u2026\", &data_40755b);\n            if (rbp_1 != &data_40755b)\n            {\n                r12_1 = &data_4094ec[0x1b];\n            }\n        }\n        __printf_chk(1, dcgettext(nullptr, \"or available locally via: info '\u2026\", 5), rbp_1, r12_1);\n    }\n    exit(arg1);\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_402ae0",
            "funcStartAddr": "0x402ae0",
            "funcEndAddr": "0x402af2",
            "decompiledFuncCode": "uint64_t sub_402ae0(int32_t* arg1, int32_t* arg2)\n{\n    uint64_t rax = 0xffffffff;\n    int32_t rdx = *arg2;\n    int32_t temp0 = *arg1;\n    bool cond:0 = temp0 > rdx;\n    if (temp0 >= rdx)\n    {\n        rax = cond:0;\n        rax = rax;\n    }\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_402b00",
            "funcStartAddr": "0x402b00",
            "funcEndAddr": "0x402bcc",
            "decompiledFuncCode": "int64_t* sub_402b00(int64_t arg1, int64_t arg2)\n{\n    int64_t rdx = data_60b4e8;\n    int64_t rcx = data_60b338;\n    void* rax = data_60b4e0;\n    if (rdx == rcx)\n    {\n        uint64_t rsi_1;\n        if (rax != 0)\n        {\n            if (rcx > 0x555555555555554)\n            {\n            label_402bb7:\n                sub_405bc0();\n                /* no return */\n            }\n            rcx = ((rcx + (rcx >> 1)) + 1);\n            rsi_1 = (rcx << 4);\n            goto label_402b79;\n        }\n        if (rcx != 0)\n        {\n            int64_t rdx_4;\n            rdx_4 = (rcx >> 0x3c) != 0;\n            rsi_1 = (rcx << 4);\n            if (rsi_1 < 0)\n            {\n                goto label_402bb7;\n            }\n            if (rdx_4 == 0)\n            {\n                goto label_402b79;\n            }\n            goto label_402bb7;\n        }\n        rsi_1 = 0x80;\n        rcx = 8;\n    label_402b79:\n        data_60b338 = rcx;\n        rax = sub_4059d0(rax, rsi_1);\n        rdx = data_60b4e8;\n        data_60b4e0 = rax;\n    }\n    int64_t* rax_1 = (rax + (rdx << 4));\n    *rax_1 = arg1;\n    rax_1[1] = arg2;\n    data_60b4e8 = (rdx + 1);\n    return rax_1;\n}\n\n"
        },
        {
            "funcName": "sub_402bd0",
            "funcStartAddr": "0x402bd0",
            "funcEndAddr": "0x40316e",
            "decompiledFuncCode": "int64_t* sub_402bd0(char* arg1, int32_t arg2)\n{\n    char* r15 = arg1;\n    bool c = false;\n    bool z = (arg2 & 1) == 0;\n    char var_3c = arg2;\n    int32_t var_40 = (arg2 & 1);\n    int32_t rax_1;\n    void* rcx;\n    char rbx;\n    char* rdi_1;\n    if ((!z))\n    {\n        void* const rdi = &data_4094ea;\n        rcx = 2;\n        char* rsi = r15;\n        while (rcx != 0)\n        {\n            char temp1_1 = *rsi;\n            char temp2_1 = *rdi;\n            c = temp1_1 < temp2_1;\n            z = temp1_1 == temp2_1;\n            rsi = &rsi[1];\n            rdi = (rdi + 1);\n            rcx = (rcx - 1);\n            if ((!z))\n            {\n                break;\n            }\n        }\n        rax_1 = ((!z) && (!c));\n        rax_1 = (rax_1 - 0);\n        if (rax_1 == 0)\n        {\n            r15 = &r15[1];\n            rdi_1 = 1;\n            rbx = 1;\n        }\n    }\n    if ((z || ((!z) && rax_1 != 0)))\n    {\n        rdi_1 = nullptr;\n        rbx = 0;\n    }\n    char rbp = rbx;\n    char r12 = 0;\n    char r14 = 0;\n    char* var_50 = 1;\n    char* rax_16;\n    while (true)\n    {\n        char r13_1 = *r15;\n        if (r13_1 == 0x2d)\n        {\n            if (rbp != 0)\n            {\n                if ((var_3c & 4) == 0)\n                {\n                    rax_16 = dcgettext(nullptr, \"invalid field range\", 5);\n                }\n                else\n                {\n                    rax_16 = dcgettext(nullptr, \"invalid byte or character range\", 5);\n                }\n                break;\n            }\n            rcx = rdi_1 == 0;\n            rcx = (rcx & rbx);\n            r12 = rcx;\n            if (rcx == 0)\n            {\n                if (rbx != 0)\n                {\n                    var_50 = rdi_1;\n                    rbp = rbx;\n                    rdi_1 = nullptr;\n                }\n                else\n                {\n                    r12 = rbx;\n                    rdi_1 = nullptr;\n                    rbp = 1;\n                    var_50 = 1;\n                }\n                goto label_402cae;\n            }\n            if ((var_3c & 4) != 0)\n            {\n                rax_16 = dcgettext(nullptr, \"byte/character positions are num\u2026\", 5);\n                break;\n            }\n            goto label_4030af;\n        }\n        if ((r13_1 != 0x2c && ((*__ctype_b_loc()[r13_1] & 1) == 0 && r13_1 != 0)))\n        {\n            int32_t rax_9 = r13_1;\n            if ((rax_9 - 0x30) > 9)\n            {\n                int64_t rax_23 = sub_4053b0(r15);\n                char* rax_24;\n                if ((var_3c & 4) == 0)\n                {\n                    rax_24 = dcgettext(nullptr, \"invalid field value %s\", 5);\n                }\n                else\n                {\n                    rax_24 = dcgettext(nullptr, \"invalid byte/character position \u2026\", 5);\n                }\n                error(0, 0, rax_24, rax_23);\n                sub_4026b0(1);\n                /* no return */\n            }\n            if ((r12 == 0 || (r12 != 0 && data_60b330 == 0)))\n            {\n                data_60b330 = r15;\n            }\n            bool cond:5_1 = rbp != 0;\n            if (rbp == 0)\n            {\n                rbx = 1;\n            }\n            if (cond:5_1)\n            {\n                r14 = rbp;\n            }\n            char* rax_12;\n            if (rdi_1 <= 0x1999999999999999)\n            {\n                rax_12 = ((rax_9 - 0x30) + (rdi_1 * 0xa));\n                if ((rax_12 >= rdi_1 && rax_12 != -1))\n                {\n                    rdi_1 = rax_12;\n                    r12 = 1;\n                }\n            }\n            if (((rdi_1 > 0x1999999999999999 || (rdi_1 <= 0x1999999999999999 && rax_12 < rdi_1)) || ((rdi_1 <= 0x1999999999999999 && rax_12 >= rdi_1) && rax_12 == -1)))\n            {\n                int64_t rbx_6 = data_60b330;\n                strspn(rbx_6, \"0123456789\");\n                char* rax_19 = sub_405c00(rbx_6);\n                int64_t rax_20 = sub_4053b0(rax_19);\n                char* rax_21;\n                if ((var_3c & 4) == 0)\n                {\n                    rax_21 = dcgettext(nullptr, \"field number %s is too large\", 5);\n                }\n                else\n                {\n                    rax_21 = dcgettext(nullptr, \"byte/character offset %s is too \u2026\", 5);\n                }\n                error(0, 0, rax_21, rax_20);\n                free(rax_19);\n                sub_4026b0(1);\n                /* no return */\n            }\n            goto label_402cae;\n        }\n        char* rsi_10;\n        if (rbp == 0)\n        {\n            if (rdi_1 == 0)\n            {\n                if ((var_3c & 4) != 0)\n                {\n                    rax_16 = dcgettext(rdi_1, \"byte/character positions are num\u2026\", 5);\n                    break;\n                }\n            label_4030af:\n                rax_16 = dcgettext(nullptr, \"fields are numbered from 1\", 5);\n                break;\n            }\n            sub_402b00(rdi_1, rdi_1);\n            if (*r15 == 0)\n            {\n            label_402d17:\n                int64_t rsi_2 = data_60b4e8;\n                if (rsi_2 != 0)\n                {\n                    int64_t r15_1 = 0;\n                    qsort(data_60b4e0, rsi_2, 0x10, sub_402ae0);\n                    int64_t rbx_1 = data_60b4e8;\n                    int64_t r14_1 = data_60b4e0;\n                    while (r15_1 < rbx_1)\n                    {\n                        do\n                        {\n                            r15_1 = (r15_1 + 1);\n                            if (r15_1 >= rbx_1)\n                            {\n                                break;\n                            }\n                            int64_t rbp_2 = (r15_1 << 4);\n                            int64_t r12_1 = (rbp_2 - 0x10);\n                            int64_t rdi_4 = (r14_1 + rbp_2);\n                            void* rdx_1 = (r14_1 + r12_1);\n                            int64_t rax_5 = *(rdx_1 + 8);\n                            if (rax_5 < *rdi_4)\n                            {\n                                break;\n                            }\n                            int64_t r13_2 = (rbp_2 + 0x10);\n                            do\n                            {\n                                if (*(rdi_4 + 8) >= rax_5)\n                                {\n                                    rax_5 = *(rdi_4 + 8);\n                                }\n                                *(rdx_1 + 8) = rax_5;\n                                memmove(rdi_4, (r14_1 + r13_2), (((rbx_1 - r15_1) << 4) - 0x10));\n                                r14_1 = data_60b4e0;\n                                rbx_1 = (data_60b4e8 - 1);\n                                data_60b4e8 = rbx_1;\n                                if (rbx_1 <= r15_1)\n                                {\n                                    break;\n                                }\n                                rdx_1 = (r14_1 + r12_1);\n                                rdi_4 = (r14_1 + rbp_2);\n                                rax_5 = *(rdx_1 + 8);\n                            } while (*rdi_4 <= rax_5);\n                            if (rbx_1 <= r15_1)\n                            {\n                                break;\n                            }\n                        } while (r15_1 < rbx_1);\n                        if (r15_1 < rbx_1)\n                        {\n                            break;\n                        }\n                    }\n                    if ((var_3c & 2) != 0)\n                    {\n                        data_60b4e0 = 0;\n                        int64_t rax_13 = *r14_1;\n                        data_60b4e8 = 0;\n                        data_60b338 = 0;\n                        if (rax_13 > 1)\n                        {\n                            sub_402b00(1, (rax_13 - 1));\n                        }\n                        int64_t* rbp_3 = (r14_1 + 0x10);\n                        int64_t r12_4 = ((rbx_1 << 4) + r14_1);\n                        if (rbx_1 > 1)\n                        {\n                            do\n                            {\n                                int64_t rsi_7 = *rbp_3;\n                                int64_t rdi_7 = (rbp_3[-1] + 1);\n                                if (rdi_7 != rsi_7)\n                                {\n                                    sub_402b00(rdi_7, (rsi_7 - 1));\n                                }\n                                rbp_3 = &rbp_3[2];\n                            } while (r12_4 != rbp_3);\n                        }\n                        int64_t rax_15 = *((r14_1 + (rbx_1 << 4)) - 8);\n                        if (rax_15 != -1)\n                        {\n                            sub_402b00((rax_15 + 1), -1);\n                        }\n                        free(r14_1);\n                        rbx_1 = data_60b4e8;\n                        r14_1 = data_60b4e0;\n                    }\n                    data_60b4e8 = (rbx_1 + 1);\n                    int64_t rax_7 = sub_4059d0(r14_1, ((rbx_1 + 1) << 4));\n                    int64_t rdx_3 = data_60b4e8;\n                    data_60b4e0 = rax_7;\n                    *((rax_7 + (rdx_3 << 4)) - 8) = -1;\n                    *((rax_7 + (rdx_3 << 4)) - 0x10) = -1;\n                    return ((rax_7 + (rdx_3 << 4)) - 0x10);\n                }\n                if ((var_3c & 4) != 0)\n                {\n                    rax_16 = dcgettext(nullptr, \"missing list of byte/character p\u2026\", 5);\n                    break;\n                }\n                rsi_10 = \"missing list of fields\";\n                goto label_402fd6;\n            }\n        label_402ca2:\n            rdi_1 = nullptr;\n            r12 = 0;\n            rbp = 0;\n            r14 = 0;\n            rbx = 0;\n        label_402cae:\n            r15 = &r15[1];\n        }\n        else\n        {\n            if (((rbx != 0 && r14 != 0) || (rbx == 0 && r14 != 0)))\n            {\n                if (var_50 > rdi_1)\n                {\n                    rsi_10 = \"invalid decreasing range\";\n                    goto label_402fd6;\n                }\n                sub_402b00(var_50, rdi_1);\n            }\n            if ((rbx == 0 && r14 == 0))\n            {\n                if (var_40 == 0)\n                {\n                    rsi_10 = \"invalid range with no endpoint: \u2026\";\n                label_402fd6:\n                    rax_16 = dcgettext(nullptr, rsi_10, 5);\n                    break;\n                }\n                var_50 = 1;\n            }\n            if (((rbx != 0 && r14 == 0) || (rbx == 0 && r14 == 0)))\n            {\n                sub_402b00(var_50, -1);\n            }\n            if ((((rbx != 0 && r14 == 0) || (rbx == 0 && r14 == 0)) || (((rbx != 0 && r14 != 0) || (rbx == 0 && r14 != 0)) && var_50 <= rdi_1)))\n            {\n                if (*r15 != 0)\n                {\n                    goto label_402ca2;\n                }\n                goto label_402d17;\n            }\n        }\n    }\n    error(0, 0, rax_16);\n    sub_4026b0(1);\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_403170",
            "funcStartAddr": "0x403170",
            "funcEndAddr": "0x4031a6",
            "decompiledFuncCode": "int64_t sub_403170()\n{\n    int64_t rdi = data_60b4e0;\n    data_60b4e8 = 0;\n    data_60b338 = 0;\n    int64_t rax = free(rdi);\n    data_60b4e0 = 0;\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_4031b0",
            "funcStartAddr": "0x4031b0",
            "funcEndAddr": "0x4031b8",
            "decompiledFuncCode": "int64_t sub_4031b0(int64_t arg1)\n{\n    data_60b348 = arg1;\n}\n\n"
        },
        {
            "funcName": "sub_4031c0",
            "funcStartAddr": "0x4031c0",
            "funcEndAddr": "0x4031c8",
            "decompiledFuncCode": "int64_t sub_4031c0(char arg1)\n{\n    data_60b340 = arg1;\n}\n\n"
        },
        {
            "funcName": "sub_4031d0",
            "funcStartAddr": "0x4031d0",
            "funcEndAddr": "0x40326e",
            "decompiledFuncCode": "void sub_4031d0(void* arg1)\n{\n    int32_t rax = sub_406cd0(stdout);\n    int32_t* rax_1;\n    if (rax != 0)\n    {\n        rax_1 = __errno_location();\n        if ((data_60b340 == 0 || (data_60b340 != 0 && *rax_1 != 0x20)))\n        {\n            char* rax_3 = dcgettext(nullptr, \"write error\", 5);\n            int64_t rdi_2 = data_60b348;\n            if (rdi_2 == 0)\n            {\n                error(0, *rax_1, \"%s\", rax_3);\n            }\n            else\n            {\n                error(0, *rax_1, \"%s: %s\", sub_405200(rdi_2), rax_3);\n            }\n        }\n    }\n    if (((rax == 0 || ((rax != 0 && data_60b340 != 0) && *rax_1 == 0x20)) && sub_406cd0(stderr) == 0))\n    {\n        return;\n    }\n    _exit(data_60b240);\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_403270",
            "funcStartAddr": "0x403270",
            "funcEndAddr": "0x403275",
            "decompiledFuncCode": "int64_t sub_403270(int32_t arg1, int64_t arg2, off64_t arg3, int32_t arg4)\n{\n    /* tailcall */\n    return posix_fadvise(arg1, arg2, arg3, arg4);\n}\n\n"
        },
        {
            "funcName": "sub_403280",
            "funcStartAddr": "0x403280",
            "funcEndAddr": "0x4032a1",
            "decompiledFuncCode": "void sub_403280(FILE* arg1, int32_t arg2)\n{\n    if (arg1 == 0)\n    {\n        return;\n    }\n    /* tailcall */\n    return posix_fadvise(fileno(arg1), 0, 0, arg2);\n}\n\n"
        },
        {
            "funcName": "sub_4032b0",
            "funcStartAddr": "0x4032b0",
            "funcEndAddr": "0x4035fd",
            "decompiledFuncCode": "void* sub_4032b0(int64_t* arg1, int64_t* arg2, void* arg3, uint64_t arg4, \n    int32_t arg5, int32_t arg6, FILE* arg7)\n{\n    uint64_t r13;\n    uint64_t var_18 = r13;\n    void* rax = *arg1;\n    uint64_t r12 = *arg2;\n    void* var_60 = arg3;\n    int32_t var_84 = arg5;\n    int32_t var_6c = arg6;\n    void* var_78 = rax;\n    if (rax == 0)\n    {\n        r12 = 0x40;\n        if (arg4 <= 0x40)\n        {\n            r12 = arg4;\n        }\n        rax = malloc(r12);\n        var_78 = rax;\n        if (rax == 0)\n        {\n        label_4035c1:\n            return -1;\n        }\n    }\n    void* rax_10;\n    if (r12 >= var_60)\n    {\n        void* rbp_2 = (r12 - var_60);\n        arg3 = r12 == var_60;\n        rax = r12 >= arg4;\n        if ((arg3 & rax) == 0)\n        {\n            if (var_84 == 0xffffffff)\n            {\n                var_84 = var_6c;\n            }\n            else\n            {\n                int32_t rbx_1 = var_6c;\n                if (rbx_1 == 0xffffffff)\n                {\n                    rbx_1 = var_84;\n                }\n                var_6c = rbx_1;\n            }\n            void* rbx_3 = (var_78 + var_60);\n            while (true)\n            {\n                off_t var_40;\n                char* rax_3 = sub_405ce0(arg7, &var_40);\n                uint32_t var_70;\n                char* rax_4;\n                uint32_t rax_7;\n                void* rcx;\n                if (rax_3 == 0)\n                {\n                    rax_4 = arg7->_IO_read_ptr;\n                    if (rax_4 >= arg7->_IO_read_end)\n                    {\n                        rax_7 = __uflow(arg7);\n                        var_70 = rax_7;\n                        if ((rax_7 == 0xffffffff && rbx_3 == var_78))\n                        {\n                            break;\n                        }\n                    }\n                    else\n                    {\n                        arg7->_IO_read_ptr = &rax_4[1];\n                        var_70 = *rax_4;\n                    }\n                    if ((rax_4 < arg7->_IO_read_end || (rax_4 >= arg7->_IO_read_end && rax_7 != 0xffffffff)))\n                    {\n                        rcx = 2;\n                        var_40 = 1;\n                        r13 = var_84 == var_70;\n                        uint32_t rax_6;\n                        rax_6 = var_6c == var_70;\n                        r13 = (r13 | rax_6);\n                    }\n                }\n                else\n                {\n                    off_t r13_1 = var_40;\n                    char* rax_16;\n                    if (var_84 != 0xffffffff)\n                    {\n                        rax_16 = sub_403600(rax_3, var_84, var_6c, r13_1);\n                        if (rax_16 != 0)\n                        {\n                            void* rax_17 = (rax_16 - rax_3);\n                            r13 = 1;\n                            rcx = (rax_17 + 2);\n                            var_40 = (rax_17 + 1);\n                        }\n                    }\n                    if ((var_84 == 0xffffffff || (var_84 != 0xffffffff && rax_16 == 0)))\n                    {\n                        rcx = (r13_1 + 1);\n                        r13 = 0;\n                    }\n                }\n                if (((rax_3 == 0 && (rax_4 < arg7->_IO_read_end || (rax_4 >= arg7->_IO_read_end && rax_7 != 0xffffffff))) || rax_3 != 0))\n                {\n                    if ((r12 < arg4 && rbp_2 < rcx))\n                    {\n                        uint64_t rax_12 = (r12 + 0x40);\n                        uint64_t rdx_2 = (r12 + r12);\n                        if (r12 <= 0x3f)\n                        {\n                            rdx_2 = rax_12;\n                        }\n                        void* rbx_5 = (rbx_3 - var_78);\n                        void* rax_13 = (rbx_5 + rcx);\n                        if ((rdx_2 - rbx_5) < rcx)\n                        {\n                            rdx_2 = rax_13;\n                        }\n                        if ((r12 >= rdx_2 || (r12 < rdx_2 && rdx_2 > arg4)))\n                        {\n                            rdx_2 = arg4;\n                        }\n                        if ((rdx_2 - var_60) < 0)\n                        {\n                            rdx_2 = (-0x8000000000000000 + var_60);\n                            if (r12 == rdx_2)\n                            {\n                                break;\n                            }\n                        }\n                        rbp_2 = (rdx_2 - rbx_5);\n                        void* rax_15 = realloc(var_78, rdx_2);\n                        if (rax_15 == 0)\n                        {\n                            break;\n                        }\n                        rbx_3 = (rbx_5 + rax_15);\n                        var_78 = rax_15;\n                        r12 = rdx_2;\n                    }\n                    if (rbp_2 > 1)\n                    {\n                        off_t rcx_1 = (rbp_2 - 1);\n                        if (var_40 <= rcx_1)\n                        {\n                            rcx_1 = var_40;\n                        }\n                        if (rax_3 == 0)\n                        {\n                            *rbx_3 = var_70;\n                        }\n                        else\n                        {\n                            memcpy(rbx_3, rax_3, rcx_1);\n                        }\n                        rbx_3 = (rbx_3 + rcx_1);\n                        rbp_2 = (rbp_2 - rcx_1);\n                    }\n                    if ((rax_3 != 0 && sub_406d30(arg7, var_40) != 0))\n                    {\n                        break;\n                    }\n                    if (r13 == 0)\n                    {\n                        continue;\n                    }\n                }\n                *rbx_3 = 0;\n                void* rax_19 = (var_60 + var_78);\n                *arg1 = var_78;\n                rax_10 = (rbx_3 - rax_19);\n                *arg2 = r12;\n                if (rbx_3 == rax_19)\n                {\n                    goto label_4035c1;\n                }\n                goto label_403482;\n            }\n        }\n    }\n    *arg1 = var_78;\n    *arg2 = r12;\n    rax_10 = ffffffffffffffff;\nlabel_403482:\n    return rax_10;\n}\n\n"
        },
        {
            "funcName": "sub_403600",
            "funcStartAddr": "0x403600",
            "funcEndAddr": "0x403789",
            "decompiledFuncCode": "char* sub_403600(char* arg1, int32_t arg2, int32_t arg3, int64_t arg4)\n{\n    if (arg2 == arg3)\n    {\n        /* tailcall */\n        return sub_406bc0(arg1, arg2, arg4);\n    }\n    char r10 = arg2;\n    char r9 = arg3;\n    if ((arg4 != 0 && (arg1 & 7) != 0))\n    {\n        char rax_1 = *arg1;\n        if ((rax_1 == arg3 || (rax_1 != arg3 && rax_1 == arg2)))\n        {\n            return arg1;\n        }\n        if ((rax_1 != arg3 && rax_1 != arg2))\n        {\n            while (true)\n            {\n                arg1 = &arg1[1];\n                int64_t temp0_1 = arg4;\n                arg4 = (arg4 - 1);\n                if (temp0_1 == 1)\n                {\n                    break;\n                }\n                if ((arg1 & 7) == 0)\n                {\n                    break;\n                }\n                char rax_2 = *arg1;\n                if (rax_2 == r9)\n                {\n                    return arg1;\n                }\n                if (rax_2 == r10)\n                {\n                    return arg1;\n                }\n            }\n        }\n    }\n    int64_t rax_7 = ((arg3 << 8) | arg3);\n    int64_t r8_4 = ((arg2 << 8) | arg2);\n    int64_t rax_8 = (rax_7 | (rax_7 << 0x10));\n    int64_t r8_5 = (r8_4 | (r8_4 << 0x10));\n    int64_t rbp_5 = ((rax_8 << 0x20) | rax_8);\n    int64_t rbx_5 = ((r8_5 << 0x20) | r8_5);\n    int64_t rax_10;\n    void* rax_20;\n    int64_t r12_2;\n    if (arg4 > 7)\n    {\n        int64_t rax_9 = *arg1;\n        r12_2 = (rbx_5 ^ rax_9);\n        rax_10 = (rax_9 ^ rbp_5);\n        if (((((!rax_10) & (rax_10 - 0x101010101010101)) | ((r12_2 - 0x101010101010101) & (!r12_2))) & 0x8080808080808080) != 0)\n        {\n        label_40372c:\n            char rax_19 = *arg1;\n            if (rax_19 != arg3)\n            {\n                if (rax_19 == arg2)\n                {\n                    goto label_403784;\n                }\n                void* rdx = &arg1[1];\n                void* rdi = &arg1[arg4];\n                while (true)\n                {\n                    rax_20 = rdx;\n                    if (rdx == rdi)\n                    {\n                        break;\n                    }\n                    char rsi = *rdx;\n                    rdx = (rdx + 1);\n                    if (rsi == r10)\n                    {\n                        return rax_20;\n                    }\n                    if (rsi == r9)\n                    {\n                        return rax_20;\n                    }\n                }\n                goto label_403761;\n            }\n        label_403784:\n            rax_20 = arg1;\n        }\n        else\n        {\n            int64_t rax_15;\n            int64_t r13_2;\n            do\n            {\n                arg4 = (arg4 - 8);\n                arg1 = &arg1[8];\n                if (arg4 <= 7)\n                {\n                    break;\n                }\n                int64_t rax_14 = *arg1;\n                rax_15 = (rax_14 ^ rbp_5);\n                r13_2 = (rax_14 ^ rbx_5);\n            } while (((((!rax_15) & (rax_15 - 0x101010101010101)) | ((r13_2 - 0x101010101010101) & (!r13_2))) & 0x8080808080808080) == 0);\n            if (arg4 > 7)\n            {\n                goto label_40372c;\n            }\n        }\n    }\n    if (((arg4 <= 7 || (arg4 > 7 && ((((!rax_10) & (rax_10 - 0x101010101010101)) | ((r12_2 - 0x101010101010101) & (!r12_2))) & 0x8080808080808080) == 0)) && arg4 == 0))\n    {\n    label_403761:\n        rax_20 = nullptr;\n    }\n    if ((((arg4 <= 7 || (arg4 > 7 && ((((!rax_10) & (rax_10 - 0x101010101010101)) | ((r12_2 - 0x101010101010101) & (!r12_2))) & 0x8080808080808080) == 0)) && arg4 == 0) || (arg4 > 7 && ((((!rax_10) & (rax_10 - 0x101010101010101)) | ((r12_2 - 0x101010101010101) & (!r12_2))) & 0x8080808080808080) != 0)))\n    {\n        return rax_20;\n    }\n    if (((arg4 <= 7 || (arg4 > 7 && ((((!rax_10) & (rax_10 - 0x101010101010101)) | ((r12_2 - 0x101010101010101) & (!r12_2))) & 0x8080808080808080) == 0)) && arg4 != 0))\n    {\n        goto label_40372c;\n    }\n}\n\n"
        },
        {
            "funcName": "sub_403790",
            "funcStartAddr": "0x403790",
            "funcEndAddr": "0x403829",
            "decompiledFuncCode": "char* sub_403790(char* arg1)\n{\n    if (arg1 == 0)\n    {\n        fwrite(\"A NULL argv[0] was passed throug\u2026\", 1, 0x37, stderr);\n        abort();\n        /* no return */\n    }\n    void* rbx = arg1;\n    char* rax = strrchr(arg1, 0x2f);\n    if (rax != 0)\n    {\n        void* r8_1 = &rax[1];\n        int64_t rdx_2 = (r8_1 - rbx);\n        bool c_1 = rdx_2 < 6;\n        bool z_1 = rdx_2 == 6;\n        if ((!(z_1 || (rdx_2 - 6) < 0 != (rdx_2 - 6))))\n        {\n            void* rsi_1 = &rax[-6];\n            void* const rdi = \"/.libs/\";\n            int64_t rcx_1 = 7;\n            while (rcx_1 != 0)\n            {\n                char temp0_1 = *rsi_1;\n                char temp1_1 = *rdi;\n                c_1 = temp0_1 < temp1_1;\n                z_1 = temp0_1 == temp1_1;\n                rsi_1 = (rsi_1 + 1);\n                rdi = (rdi + 1);\n                rcx_1 = (rcx_1 - 1);\n                if ((!z_1))\n                {\n                    break;\n                }\n            }\n            rdx_2 = ((!z_1) && (!c_1));\n            rdx_2 = (rdx_2 - 0);\n            bool c_2 = false;\n            bool z_2 = (rdx_2 & rdx_2) == 0;\n            if (z_2)\n            {\n                void* const rdi_1 = &data_4082f0;\n                int64_t rcx_2 = 3;\n                void* rsi_2 = r8_1;\n                rbx = r8_1;\n                while (rcx_2 != 0)\n                {\n                    char temp2_1 = *rsi_2;\n                    char temp3_1 = *rdi_1;\n                    c_2 = temp2_1 < temp3_1;\n                    z_2 = temp2_1 == temp3_1;\n                    rsi_2 = (rsi_2 + 1);\n                    rdi_1 = (rdi_1 + 1);\n                    rcx_2 = (rcx_2 - 1);\n                    if ((!z_2))\n                    {\n                        break;\n                    }\n                }\n                rdx_2 = ((!z_2) && (!c_2));\n                rdx_2 = (rdx_2 - 0);\n                if (rdx_2 == 0)\n                {\n                    rbx = &rax[4];\n                    program_invocation_short_name = rbx;\n                }\n            }\n        }\n    }\n    data_60b350 = rbx;\n    __progname_full = rbx;\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_403830",
            "funcStartAddr": "0x403830",
            "funcEndAddr": "0x403922",
            "decompiledFuncCode": "char* sub_403830(char* arg1, int32_t arg2)\n{\n    char* rax = dcgettext(nullptr, arg1, 5);\n    char* rbx = rax;\n    if (arg1 == rax)\n    {\n        char* rax_2 = sub_406ee0();\n        char rdx_2 = (*rax_2 & 0xdf);\n        if (rdx_2 != 0x55)\n        {\n            if (rdx_2 != 0x47)\n            {\n            label_403911:\n                void* const rbx_1 = &data_4082f4;\n                if (arg2 != 9)\n                {\n                    rbx_1 = \"'\";\n                }\n                return rbx_1;\n            }\n            if ((rax_2[1] & 0xdf) != 0x42)\n            {\n                goto label_403911;\n            }\n            if (rax_2[2] != 0x31)\n            {\n                goto label_403911;\n            }\n            if (rax_2[3] != 0x38)\n            {\n                goto label_403911;\n            }\n            if (rax_2[4] != 0x30)\n            {\n                goto label_403911;\n            }\n            if (rax_2[5] != 0x33)\n            {\n                goto label_403911;\n            }\n            if (rax_2[6] != 0x30)\n            {\n                goto label_403911;\n            }\n            if (rax_2[7] != 0)\n            {\n                goto label_403911;\n            }\n            bool cond:2_1 = *rbx != 0x60;\n            rbx = &data_4082fd;\n            if (cond:2_1)\n            {\n                rbx = &data_4082fa;\n            }\n        }\n        else\n        {\n            if ((rax_2[1] & 0xdf) != 0x54)\n            {\n                goto label_403911;\n            }\n            if ((rax_2[2] & 0xdf) != 0x46)\n            {\n                goto label_403911;\n            }\n            if (rax_2[3] != 0x2d)\n            {\n                goto label_403911;\n            }\n            if (rax_2[4] != 0x38)\n            {\n                goto label_403911;\n            }\n            if (rax_2[5] != 0)\n            {\n                goto label_403911;\n            }\n            bool cond:1_1 = *rbx != 0x60;\n            rbx = &data_408301;\n            if (cond:1_1)\n            {\n                rbx = &data_4082f6;\n            }\n        }\n    }\n    return rbx;\n}\n\n"
        },
        {
            "funcName": "sub_403930",
            "funcStartAddr": "0x401a20",
            "funcEndAddr": "0x404b51",
            "decompiledFuncCode": "int64_t sub_403930(char* arg1, uint64_t arg2, uint64_t arg3, uint64_t arg4, \n    uint32_t arg5, int32_t arg6, int64_t arg7, char* arg8, char* arg9)\n{\n    char* r15 = arg1;\n    uint64_t r14 = arg2;\n    uint32_t r13 = arg5;\n    uint64_t rax;\n    uint64_t rdx;\n    rax = __ctype_get_mb_cur_max();\n    int32_t rbp_1 = (arg6 & 2);\n    bool var_5c = rbp_1 != 0;\n    bool cond:1 = r13 == 0xa;\n    if (r13 > 0xa)\n    {\n        abort();\n        /* no return */\n    }\n    uint64_t r11 = arg4;\n    uint64_t var_c0;\n    char var_a9;\n    uint64_t var_a0_1;\n    char const* const var_78_1;\n    uint64_t var_70;\n    char var_5b_1;\n    uint64_t rax_1;\n    int64_t rbx_1;\n    uint32_t r10;\n    if ((r13 == 1 || (r13 == 4 && rbp_1 != 0)))\n    {\n        var_a9 = 1;\n        r10 = 0;\n        rbx_1 = 0;\n        r13 = 2;\n        var_5b_1 = 0;\n        var_70 = 0;\n        var_5c = true;\n        var_c0 = 0;\n        var_a0_1 = 1;\n        var_78_1 = \"'\";\n    label_4039c8:\n        while (true)\n        {\n            uint64_t r9 = r11;\n            int64_t r12_1 = 0;\n            uint32_t r11_1 = r13;\n            while (true)\n            {\n                r13 = r9 != r12_1;\n                if (r9 == -1)\n                {\n                    r13 = *(arg3 + r12_1) != 0;\n                }\n                uint32_t r13_1;\n                if (r13 == 0)\n                {\n                    r11 = r9;\n                    rdx = r11_1 == 2;\n                    if ((rbx_1 == 0 && (var_5c & rdx) != 0))\n                    {\n                        r13_1 = 2;\n                    label_403d3c:\n                        if (var_c0 != 0)\n                        {\n                            r13_1 = 4;\n                        }\n                        goto label_403d84;\n                    }\n                    rax_1 = (var_5c ^ 1);\n                    rdx = (rdx & rax_1);\n                    if (rdx == 0)\n                    {\n                        rdx = rax_1;\n                    }\n                    else if (var_5b_1 != 0)\n                    {\n                        if (var_a9 != 0)\n                        {\n                            rbx_1 = sub_403930(r15, var_70, arg3, r11, 5, arg6, arg7, arg8, arg9);\n                        }\n                        else\n                        {\n                            rax_1 = r14 == 0;\n                            rdx = var_70 != 0;\n                            rax_1 = (rax_1 & rdx);\n                            if (rax_1 != 0)\n                            {\n                                r14 = var_70;\n                                break;\n                            }\n                            rdx = var_5b_1;\n                        }\n                    }\n                    if (((rdx == 0 || (rdx != 0 && var_5b_1 == 0)) || ((rdx != 0 && var_5b_1 != 0) && var_a9 == 0)))\n                    {\n                        if ((var_78_1 != 0 && rdx != 0))\n                        {\n                            char const rdx_17 = *var_78_1;\n                            if (rdx_17 != 0)\n                            {\n                                void* rax_51 = (var_78_1 - rbx_1);\n                                do\n                                {\n                                    if (r14 > rbx_1)\n                                    {\n                                        r15[rbx_1] = rdx_17;\n                                    }\n                                    rbx_1 = (rbx_1 + 1);\n                                    rdx_17 = *(rax_51 + rbx_1);\n                                } while (rdx_17 != 0);\n                            }\n                        }\n                        if (r14 > rbx_1)\n                        {\n                            r15[rbx_1] = 0;\n                        }\n                    }\n                    goto label_403d9b;\n                }\n                rax_1 = r11_1 != 2;\n                rax_1 = (rax_1 & var_c0);\n                char* r8 = (arg3 + r12_1);\n                uint64_t var_b8;\n                var_b8 = rax_1;\n                uint32_t rax_8;\n                uint64_t rax_12;\n                char rax_14;\n                int32_t rcx_2;\n                uint64_t rbp_3;\n                if (rax_1 == 0)\n                {\n                    rbp_3 = *r8;\n                    if (rbp_3 > 0x7e)\n                    {\n                        goto label_403ed5;\n                    }\n                    switch (rbp_3)\n                    {\n                        case 0:\n                        {\n                            if (var_c0 == 0)\n                            {\n                                if ((arg6 & 1) != 0)\n                                {\n                                    r12_1 = (r12_1 + 1);\n                                    continue;\n                                }\n                                else\n                                {\n                                    var_b8 = 0;\n                                    rdx = r11_1 == 2;\n                                    r13 = 0;\n                                    rbp_3 = 0;\n                                }\n                                goto label_403b25;\n                            }\n                            goto label_403e10;\n                        }\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 0xe:\n                        case 0xf:\n                        case 0x10:\n                        case 0x11:\n                        case 0x12:\n                        case 0x13:\n                        case 0x14:\n                        case 0x15:\n                        case 0x16:\n                        case 0x17:\n                        case 0x18:\n                        case 0x19:\n                        case 0x1a:\n                        case 0x1b:\n                        case 0x1c:\n                        case 0x1d:\n                        case 0x1e:\n                        case 0x1f:\n                        case 0x40:\n                        {\n                            goto label_403ed5;\n                        }\n                        case 7:\n                        {\n                            rbp_3 = 7;\n                            rcx_2 = 0x61;\n                            rdx = r11_1 == 2;\n                            goto label_403d00;\n                        }\n                        case 8:\n                        {\n                            rbp_3 = 8;\n                            rcx_2 = 0x62;\n                            rdx = r11_1 == 2;\n                        label_403d00:\n                            if (var_c0 == 0)\n                            {\n                                goto label_403d0b;\n                            }\n                            rbp_3 = rcx_2;\n                            r13 = 0;\n                        label_403b67:\n                            if (var_5c == 0)\n                            {\n                                goto label_403b78;\n                            }\n                        label_403d30:\n                            r13_1 = r11_1;\n                            rax_14 = rdx;\n                            r11 = r9;\n                            goto label_403d38;\n                        }\n                        case 9:\n                        {\n                            rbp_3 = 9;\n                            rcx_2 = 0x74;\n                            goto label_403f6b;\n                        }\n                        case 0xa:\n                        {\n                            rbp_3 = 0xa;\n                            rcx_2 = 0x6e;\n                        label_403f6b:\n                            rdx = r11_1 == 2;\n                            bool rax_26 = (var_5c & rdx);\n                            var_b8 = rax_26;\n                            if (rax_26 != 0)\n                            {\n                            label_403f7a:\n                                r11 = r9;\n                                r13_1 = 2;\n                                goto label_403d3c;\n                            }\n                            goto label_403d00;\n                        }\n                        case 0xb:\n                        {\n                            rbp_3 = 0xb;\n                            rcx_2 = 0x76;\n                            rdx = r11_1 == 2;\n                            goto label_403d00;\n                        }\n                        case 0xc:\n                        {\n                            rbp_3 = 0xc;\n                            rcx_2 = 0x66;\n                            rdx = r11_1 == 2;\n                            goto label_403d00;\n                        }\n                        case 0xd:\n                        {\n                            rbp_3 = 0xd;\n                            rcx_2 = 0x72;\n                            goto label_403f6b;\n                        }\n                        case 0x20:\n                        {\n                            rbp_3 = 0x20;\n                            rdx = r11_1 == 2;\n                            goto label_403b06;\n                        }\n                        case 0x21:\n                        case 0x22:\n                        case 0x24:\n                        case 0x26:\n                        case 0x28:\n                        case 0x29:\n                        case 0x2a:\n                        case 0x3b:\n                        case 0x3c:\n                        case 0x3d:\n                        case 0x3e:\n                        case 0x5b:\n                        case 0x5e:\n                        case 0x60:\n                        case 0x7c:\n                        {\n                            rdx = r11_1 == 2;\n                            r13 = 0;\n                        label_403b06:\n                            if (var_5c == 0)\n                            {\n                                goto label_403b25;\n                            }\n                            if (rdx == 0)\n                            {\n                                goto label_403b25;\n                            }\n                            goto label_403f7a;\n                        }\n                        case 0x23:\n                        case 0x7e:\n                        {\n                            rdx = r11_1 == 2;\n                        label_403afd:\n                            if (r12_1 != 0)\n                            {\n                                goto label_403d0b;\n                            }\n                            goto label_403b06;\n                        }\n                        case 0x25:\n                        case 0x2b:\n                        case 0x2c:\n                        case 0x2d:\n                        case 0x2e:\n                        case 0x2f:\n                        case 0x30:\n                        case 0x31:\n                        case 0x32:\n                        case 0x33:\n                        case 0x34:\n                        case 0x35:\n                        case 0x36:\n                        case 0x37:\n                        case 0x38:\n                        case 0x39:\n                        case 0x3a:\n                        case 0x41:\n                        case 0x42:\n                        case 0x43:\n                        case 0x44:\n                        case 0x45:\n                        case 0x46:\n                        case 0x47:\n                        case 0x48:\n                        case 0x49:\n                        case 0x4a:\n                        case 0x4b:\n                        case 0x4c:\n                        case 0x4d:\n                        case 0x4e:\n                        case 0x4f:\n                        case 0x50:\n                        case 0x51:\n                        case 0x52:\n                        case 0x53:\n                        case 0x54:\n                        case 0x55:\n                        case 0x56:\n                        case 0x57:\n                        case 0x58:\n                        case 0x59:\n                        case 0x5a:\n                        case 0x5d:\n                        case 0x5f:\n                        case 0x61:\n                        case 0x62:\n                        case 0x63:\n                        case 0x64:\n                        case 0x65:\n                        case 0x66:\n                        case 0x67:\n                        case 0x68:\n                        case 0x69:\n                        case 0x6a:\n                        case 0x6b:\n                        case 0x6c:\n                        case 0x6d:\n                        case 0x6e:\n                        case 0x6f:\n                        case 0x70:\n                        case 0x71:\n                        case 0x72:\n                        case 0x73:\n                        case 0x74:\n                        case 0x75:\n                        case 0x76:\n                        case 0x77:\n                        case 0x78:\n                        case 0x79:\n                        case 0x7a:\n                        {\n                        label_403f30:\n                            rdx = r11_1 == 2;\n                        label_403b25:\n                            rax_8 = ((((var_c0 ^ 1) | rdx) ^ 1) | var_5c);\n                            if (rax_8 == 0)\n                            {\n                                goto label_403c2c;\n                            }\n                            goto label_403b2f;\n                        }\n                        case 0x27:\n                        {\n                            goto label_403cad;\n                        }\n                        case 0x3f:\n                        {\n                            goto label_403c7d;\n                        }\n                        case 0x5c:\n                        {\n                            if (r11_1 != 2)\n                            {\n                                goto label_403cda;\n                            }\n                            if (var_5c != 0)\n                            {\n                                goto label_404a6d;\n                            }\n                            r12_1 = (r12_1 + 1);\n                            rax_12 = r10;\n                            r13 = 0;\n                            rbp_3 = 0x5c;\n                            goto label_403c44;\n                        }\n                        case 0x7b:\n                        case 0x7d:\n                        {\n                            goto label_403ad9;\n                        }\n                    }\n                }\n                else\n                {\n                    char var_98;\n                    uint64_t var_90;\n                    uint32_t var_88;\n                    char rax_27;\n                    char rax_28;\n                    if (var_a0_1 != 0)\n                    {\n                        int64_t rbp_2 = (r12_1 + var_a0_1);\n                        if ((r9 == -1 && var_a0_1 > 1))\n                        {\n                            var_90 = r10;\n                            var_98 = r8;\n                            uint64_t rax_3;\n                            rax_3 = strlen(arg3);\n                            r10 = var_90;\n                            r8 = var_98;\n                            r9 = rax_3;\n                        }\n                        if (rbp_2 > r9)\n                        {\n                            goto label_4040d0;\n                        }\n                        uint64_t var_80;\n                        var_80 = r11_1;\n                        var_88 = r9;\n                        var_90 = r10;\n                        var_98 = r8;\n                        int32_t rax_4;\n                        rax_4 = memcmp(r8, var_78_1, var_a0_1);\n                        r8 = var_98;\n                        r10 = var_90;\n                        r9 = var_88;\n                        r11_1 = var_80;\n                        if (rax_4 != 0)\n                        {\n                            goto label_4040d0;\n                        }\n                        if (var_5c != 0)\n                        {\n                        label_404a20:\n                            r13_1 = r11_1;\n                            r11 = r9;\n                        label_403d84:\n                            rbx_1 = sub_403930(r15, r14, arg3, r11, r13_1, (arg6 & 0xfffffffd), 0, arg8, arg9);\n                        label_403d9b:\n                            return rbx_1;\n                        }\n                        rbp_3 = *r8;\n                        if (rbp_3 > 0x7e)\n                        {\n                            goto label_403ed5;\n                        }\n                        switch (rbp_3)\n                        {\n                            case 0:\n                            {\n                                goto label_403e27;\n                            }\n                            case 1:\n                            case 2:\n                            case 3:\n                            case 4:\n                            case 5:\n                            case 6:\n                            case 0xe:\n                            case 0xf:\n                            case 0x10:\n                            case 0x11:\n                            case 0x12:\n                            case 0x13:\n                            case 0x14:\n                            case 0x15:\n                            case 0x16:\n                            case 0x17:\n                            case 0x18:\n                            case 0x19:\n                            case 0x1a:\n                            case 0x1b:\n                            case 0x1c:\n                            case 0x1d:\n                            case 0x1e:\n                            case 0x1f:\n                            case 0x40:\n                            {\n                                goto label_403ed5;\n                            }\n                            case 7:\n                            {\n                                rbp_3 = 0x61;\n                            label_403df0:\n                                r13 = 0;\n                                goto label_403bab;\n                            }\n                            case 8:\n                            {\n                                rdx = 0;\n                                r13 = 0;\n                                rbp_3 = 0x62;\n                            label_403b78:\n                                uint32_t rax_10;\n                                rax_10 = ((r10 ^ 1) & rdx);\n                                if (rax_10 != 0)\n                                {\n                                    if (r14 > rbx_1)\n                                    {\n                                        r15[rbx_1] = 0x27;\n                                    }\n                                    if ((rbx_1 + 1) < r14)\n                                    {\n                                        r15[(rbx_1 + 1)] = 0x24;\n                                    }\n                                    if ((rbx_1 + 2) < r14)\n                                    {\n                                        r15[(rbx_1 + 2)] = 0x27;\n                                    }\n                                    rbx_1 = (rbx_1 + 3);\n                                    r10 = rax_10;\n                                }\n                            label_403bab:\n                                if (r14 <= rbx_1)\n                                {\n                                    goto label_403bb5;\n                                }\n                                r15[rbx_1] = 0x5c;\n                            label_403bb5:\n                                rbx_1 = (rbx_1 + 1);\n                                r12_1 = (r12_1 + 1);\n                                goto label_403bbd;\n                            }\n                            case 9:\n                            {\n                                goto label_403da0;\n                            }\n                            case 0xa:\n                            {\n                                goto label_403d18;\n                            }\n                            case 0xb:\n                            {\n                                goto label_403e00;\n                            }\n                            case 0xc:\n                            {\n                                goto label_403de0;\n                            }\n                            case 0xd:\n                            {\n                                goto label_403dc9;\n                            }\n                            case 0x20:\n                            {\n                                rax_27 = var_b8;\n                                goto label_40412a;\n                            }\n                            case 0x21:\n                            case 0x22:\n                            case 0x24:\n                            case 0x26:\n                            case 0x28:\n                            case 0x29:\n                            case 0x2a:\n                            case 0x3b:\n                            case 0x3c:\n                            case 0x3d:\n                            case 0x3e:\n                            case 0x5b:\n                            case 0x5e:\n                            case 0x60:\n                            case 0x7c:\n                            {\n                                goto label_403db5;\n                            }\n                            case 0x23:\n                            case 0x7e:\n                            {\n                                rax_28 = var_b8;\n                                goto label_40410a;\n                            }\n                            case 0x25:\n                            case 0x2b:\n                            case 0x2c:\n                            case 0x2d:\n                            case 0x2e:\n                            case 0x2f:\n                            case 0x30:\n                            case 0x31:\n                            case 0x32:\n                            case 0x33:\n                            case 0x34:\n                            case 0x35:\n                            case 0x36:\n                            case 0x37:\n                            case 0x38:\n                            case 0x39:\n                            case 0x3a:\n                            case 0x41:\n                            case 0x42:\n                            case 0x43:\n                            case 0x44:\n                            case 0x45:\n                            case 0x46:\n                            case 0x47:\n                            case 0x48:\n                            case 0x49:\n                            case 0x4a:\n                            case 0x4b:\n                            case 0x4c:\n                            case 0x4d:\n                            case 0x4e:\n                            case 0x4f:\n                            case 0x50:\n                            case 0x51:\n                            case 0x52:\n                            case 0x53:\n                            case 0x54:\n                            case 0x55:\n                            case 0x56:\n                            case 0x57:\n                            case 0x58:\n                            case 0x59:\n                            case 0x5a:\n                            case 0x5d:\n                            case 0x5f:\n                            case 0x61:\n                            case 0x62:\n                            case 0x63:\n                            case 0x64:\n                            case 0x65:\n                            case 0x66:\n                            case 0x67:\n                            case 0x68:\n                            case 0x69:\n                            case 0x6a:\n                            case 0x6b:\n                            case 0x6c:\n                            case 0x6d:\n                            case 0x6e:\n                            case 0x6f:\n                            case 0x70:\n                            case 0x71:\n                            case 0x72:\n                            case 0x73:\n                            case 0x74:\n                            case 0x75:\n                            case 0x76:\n                            case 0x77:\n                            case 0x78:\n                            case 0x79:\n                            case 0x7a:\n                            {\n                                rax_27 = var_b8;\n                                goto label_4040f2;\n                            }\n                            case 0x27:\n                            {\n                                goto label_403cad;\n                            }\n                            case 0x3f:\n                            {\n                                goto label_403c7d;\n                            }\n                            case 0x5c:\n                            {\n                                goto label_403cda;\n                            }\n                            case 0x7b:\n                            case 0x7d:\n                            {\n                                goto label_403ad9;\n                            }\n                        }\n                    }\n                    else\n                    {\n                    label_4040d0:\n                        rbp_3 = *r8;\n                        if (rbp_3 > 0x7e)\n                        {\n                        label_403ed0:\n                            var_b8 = 0;\n                        label_403ed5:\n                            uint64_t rdi_4;\n                            if (rax == 1)\n                            {\n                                r10 = r10;\n                                rdi_4 = 1;\n                                rax_12 = (*__ctype_b_loc()[rbp_3] & 0x4000);\n                                r13 = rax_12 != 0;\n                                rdx = rax_12 == 0;\n                                rdx = (rdx & var_c0);\n                            label_403f24:\n                                if (rdx == 0)\n                                {\n                                    goto label_403f30;\n                                }\n                                rdx = var_c0;\n                                r13 = 0;\n                            label_404421:\n                                var_98 = r13;\n                                int32_t rsi_7 = 0;\n                                int64_t rcx_11 = (rdi_4 + r12_1);\n                                char rdi_9 = var_b8;\n                                while (true)\n                                {\n                                    if (rdx != 0)\n                                    {\n                                        rax_12 = r11_1 == 2;\n                                        if (var_5c != 0)\n                                        {\n                                            break;\n                                        }\n                                        rax_12 = (rax_12 & (r10 ^ 1));\n                                        if (rax_12 != 0)\n                                        {\n                                            if (r14 > rbx_1)\n                                            {\n                                                r15[rbx_1] = 0x27;\n                                            }\n                                            if (r14 > (rbx_1 + 1))\n                                            {\n                                                r15[(rbx_1 + 1)] = 0x24;\n                                            }\n                                            if (r14 > (rbx_1 + 2))\n                                            {\n                                                r15[(rbx_1 + 2)] = 0x27;\n                                            }\n                                            rbx_1 = (rbx_1 + 3);\n                                            r10 = rax_12;\n                                        }\n                                        if (r14 > rbx_1)\n                                        {\n                                            r15[rbx_1] = 0x5c;\n                                        }\n                                        if (r14 > (rbx_1 + 1))\n                                        {\n                                            r15[(rbx_1 + 1)] = ((rbp_3 >> 6) + 0x30);\n                                        }\n                                        if (r14 > (rbx_1 + 2))\n                                        {\n                                            int32_t rax_40;\n                                            rax_40 = (rbp_3 >> 3);\n                                            r15[(rbx_1 + 2)] = ((rax_40 & 7) + 0x30);\n                                        }\n                                        r12_1 = (r12_1 + 1);\n                                        rbx_1 = (rbx_1 + 3);\n                                        rbp_3 = ((rbp_3 & 7) + 0x30);\n                                        if (r12_1 >= rcx_11)\n                                        {\n                                            break;\n                                        }\n                                        rsi_7 = rdx;\n                                    }\n                                    else\n                                    {\n                                        rax_12 = ((rsi_7 ^ 1) & r10);\n                                        if (rdi_9 != 0)\n                                        {\n                                            if (r14 > rbx_1)\n                                            {\n                                                r15[rbx_1] = 0x5c;\n                                            }\n                                            rbx_1 = (rbx_1 + 1);\n                                        }\n                                        r12_1 = (r12_1 + 1);\n                                        if (r12_1 >= rcx_11)\n                                        {\n                                            break;\n                                        }\n                                        if (rax_12 == 0)\n                                        {\n                                            rdi_9 = 0;\n                                        }\n                                        else\n                                        {\n                                            if (r14 > rbx_1)\n                                            {\n                                                r15[rbx_1] = 0x27;\n                                            }\n                                            if (r14 > (rbx_1 + 1))\n                                            {\n                                                r15[(rbx_1 + 1)] = 0x27;\n                                            }\n                                            rbx_1 = (rbx_1 + 2);\n                                            rdi_9 = 0;\n                                            r10 = 0;\n                                        }\n                                    }\n                                    if (r14 > rbx_1)\n                                    {\n                                        r15[rbx_1] = rbp_3;\n                                    }\n                                    rbp_3 = *(arg3 + r12_1);\n                                    rbx_1 = (rbx_1 + 1);\n                                }\n                                if ((rdx == 0 && r12_1 >= rcx_11))\n                                {\n                                    r13 = var_98;\n                                    goto label_403c44;\n                                }\n                                if ((rdx != 0 && var_5c != 0))\n                                {\n                                    r13_1 = r11_1;\n                                    var_c0 = rax_12;\n                                    r11 = r9;\n                                    goto label_403d3c;\n                                }\n                                r13 = var_98;\n                                goto label_403bbd;\n                            }\n                            mbstate_t var_40;\n                            var_40.__count = 0;\n                            var_40.__value = 0;\n                            if (r9 == -1)\n                            {\n                                var_90 = r10;\n                                var_98 = r8;\n                                r10 = var_90;\n                                r8 = var_98;\n                                r9 = strlen(arg3);\n                            }\n                            uint64_t rbx_2 = 0;\n                            char var_5a_1 = r10;\n                            char var_59_1 = rbp_3;\n                            var_88 = r15;\n                            var_98 = r9;\n                            var_90 = r11_1;\n                            while (true)\n                            {\n                                int64_t r15_1 = (r12_1 + rbx_2);\n                                char* rbp_4 = (arg3 + r15_1);\n                                uint32_t var_44;\n                                rax_12 = sub_406b40(&var_44, rbp_4, (var_98 - r15_1), &var_40);\n                                if (rax_12 != 0)\n                                {\n                                    if (rax_12 == -1)\n                                    {\n                                        rdi_4 = rbx_2;\n                                        rbp_3 = var_59_1;\n                                        r13 = 0;\n                                        r10 = var_5a_1;\n                                        r15 = var_88;\n                                        r9 = var_98;\n                                        r11_1 = var_90;\n                                        rdx = var_c0;\n                                        break;\n                                    }\n                                    if (rax_12 == -2)\n                                    {\n                                        r9 = var_98;\n                                        rax_12 = rbx_2;\n                                        rdi_4 = rbx_2;\n                                        r10 = var_5a_1;\n                                        rbp_3 = var_59_1;\n                                        r15 = var_88;\n                                        r11_1 = var_90;\n                                        if ((r15_1 < r9 && *rbp_4 != 0))\n                                        {\n                                            do\n                                            {\n                                                rax_12 = (rax_12 + 1);\n                                                if ((r12_1 + rax_12) >= r9)\n                                                {\n                                                    break;\n                                                }\n                                            } while (r8[rax_12] != 0);\n                                            rdi_4 = rax_12;\n                                        }\n                                        rdx = var_c0;\n                                        r13 = 0;\n                                        break;\n                                    }\n                                    if ((var_90 == 2 && (var_5c != 0 && rax_12 != 1)))\n                                    {\n                                        char* rax_34 = ((arg3 + r15_1) + 1);\n                                        int64_t rsi_6 = ((arg3 + rax_12) + r15_1);\n                                        char rcx_9;\n                                        do\n                                        {\n                                            rcx_9 = (*rax_34 - 0x5b);\n                                            if ((rcx_9 <= 0x21 && ((1 << rcx_9) & 0x20000002b) != 0))\n                                            {\n                                                break;\n                                            }\n                                            rax_34 = &rax_34[1];\n                                        } while (rsi_6 != rax_34);\n                                        if ((rcx_9 <= 0x21 && ((1 << rcx_9) & 0x20000002b) != 0))\n                                        {\n                                            r15 = var_88;\n                                            r13_1 = 2;\n                                            r11 = var_98;\n                                            goto label_403d3c;\n                                        }\n                                    }\n                                    mbstate_t* rdi_7 = &var_40;\n                                    if (iswprint(var_44) == 0)\n                                    {\n                                        r13 = 0;\n                                    }\n                                    rbx_2 = (rbx_2 + rax_12);\n                                    if (mbsinit(rdi_7) == 0)\n                                    {\n                                        continue;\n                                    }\n                                }\n                                rdi_4 = rbx_2;\n                                rbp_3 = var_59_1;\n                                r10 = var_5a_1;\n                                r15 = var_88;\n                                r9 = var_98;\n                                r11_1 = var_90;\n                                rdx = ((r13 ^ 1) & var_c0);\n                                break;\n                            }\n                            if (rdi_4 > 1)\n                            {\n                                goto label_404421;\n                            }\n                            goto label_403f24;\n                        }\n                        switch (rbp_3)\n                        {\n                            case 0:\n                            {\n                            label_403e10:\n                                if (var_5c != 0)\n                                {\n                                    r13_1 = r11_1;\n                                    r11 = r9;\n                                    var_c0 = r13_1 == 2;\n                                    goto label_403d3c;\n                                }\n                                var_b8 = 0;\n                            label_403e27:\n                                rdx = r11_1 == 2;\n                                rax_8 = ((r10 ^ 1) & rdx);\n                                int64_t rcx_6;\n                                if (rax_8 == 0)\n                                {\n                                    rcx_6 = rbx_1;\n                                    if (r14 <= rbx_1)\n                                    {\n                                        goto label_403e72;\n                                    }\n                                    rax_8 = r10;\n                                label_403e6a:\n                                    r15[rcx_6] = 0x5c;\n                                    r10 = rax_8;\n                                label_403e72:\n                                    rbx_1 = (rcx_6 + 1);\n                                    if (r11_1 == 2)\n                                    {\n                                        rax_8 = r13;\n                                        rbp_3 = 0x30;\n                                        r13 = 0;\n                                        goto label_403c2c;\n                                    }\n                                    rbp_3 = 0x30;\n                                    if ((r12_1 + 1) < r9)\n                                    {\n                                        char rax_20 = *((arg3 + r12_1) + 1);\n                                        var_98 = rax_20;\n                                        if ((rax_20 - 0x30) <= 9)\n                                        {\n                                            if (r14 > rbx_1)\n                                            {\n                                                r15[rbx_1] = 0x30;\n                                            }\n                                            if (r14 > (rcx_6 + 2))\n                                            {\n                                                r15[(rcx_6 + 2)] = 0x30;\n                                            }\n                                            rbx_1 = (rcx_6 + 3);\n                                            rbp_3 = 0x30;\n                                        }\n                                    }\n                                    goto label_403eb3;\n                                }\n                                if (r14 > rbx_1)\n                                {\n                                    r15[rbx_1] = 0x27;\n                                }\n                                if (r14 > (rbx_1 + 1))\n                                {\n                                    r15[(rbx_1 + 1)] = 0x24;\n                                }\n                                if (r14 > (rbx_1 + 2))\n                                {\n                                    r15[(rbx_1 + 2)] = 0x27;\n                                }\n                                rcx_6 = (rbx_1 + 3);\n                                if (r14 > rcx_6)\n                                {\n                                    goto label_403e6a;\n                                }\n                                rbx_1 = (rbx_1 + 4);\n                                r10 = rax_8;\n                                r13 = 0;\n                                rbp_3 = 0x30;\n                                goto label_403c2c;\n                            }\n                            case 1:\n                            case 2:\n                            case 3:\n                            case 4:\n                            case 5:\n                            case 6:\n                            case 0xe:\n                            case 0xf:\n                            case 0x10:\n                            case 0x11:\n                            case 0x12:\n                            case 0x13:\n                            case 0x14:\n                            case 0x15:\n                            case 0x16:\n                            case 0x17:\n                            case 0x18:\n                            case 0x19:\n                            case 0x1a:\n                            case 0x1b:\n                            case 0x1c:\n                            case 0x1d:\n                            case 0x1e:\n                            case 0x1f:\n                            case 0x40:\n                            {\n                                goto label_403ed0;\n                            }\n                            case 7:\n                            {\n                                rbp_3 = 0x61;\n                                goto label_403de5;\n                            }\n                            case 8:\n                            {\n                                rbp_3 = 0x62;\n                                goto label_403d1d;\n                            }\n                            case 9:\n                            {\n                            label_403da0:\n                                rbp_3 = 0x74;\n                                goto label_403d1d;\n                            }\n                            case 0xa:\n                            {\n                            label_403d18:\n                                rbp_3 = 0x6e;\n                            label_403d1d:\n                                rdx = 0;\n                                r13 = 0;\n                                if (var_5c != 0)\n                                {\n                                    goto label_403d30;\n                                }\n                                goto label_403b78;\n                            }\n                            case 0xb:\n                            {\n                            label_403e00:\n                                rbp_3 = 0x76;\n                                goto label_403de5;\n                            }\n                            case 0xc:\n                            {\n                            label_403de0:\n                                rbp_3 = 0x66;\n                            label_403de5:\n                                if (var_5c == 0)\n                                {\n                                    goto label_403df0;\n                                }\n                                r13_1 = r11_1;\n                                rax_14 = 0;\n                                r11 = r9;\n                            label_403d38:\n                                var_c0 = (var_c0 & rax_14);\n                                goto label_403d3c;\n                            }\n                            case 0xd:\n                            {\n                                var_b8 = 0;\n                            label_403dc9:\n                                rbp_3 = 0xd;\n                                rcx_2 = 0x72;\n                                rdx = r11_1 == 2;\n                                goto label_403d00;\n                            }\n                            case 0x20:\n                            {\n                                rax_27 = 0;\n                            label_40412a:\n                                rbp_3 = 0x20;\n                                goto label_4040f2;\n                            }\n                            case 0x21:\n                            case 0x22:\n                            case 0x24:\n                            case 0x26:\n                            case 0x28:\n                            case 0x29:\n                            case 0x2a:\n                            case 0x3b:\n                            case 0x3c:\n                            case 0x3d:\n                            case 0x3e:\n                            case 0x5b:\n                            case 0x5e:\n                            case 0x60:\n                            case 0x7c:\n                            {\n                                var_b8 = 0;\n                            label_403db5:\n                                rdx = 0;\n                            label_403d0b:\n                                r13 = 0;\n                                goto label_403b25;\n                            }\n                            case 0x23:\n                            case 0x7e:\n                            {\n                                rax_28 = 0;\n                            label_40410a:\n                                if (r12_1 == 0)\n                                {\n                                    r13 = var_b8;\n                                    rdx = 0;\n                                    var_b8 = rax_28;\n                                    goto label_403b25;\n                                }\n                                var_b8 = rax_28;\n                                r13 = 0;\n                            label_403b2f:\n                                rax_8 = 0;\n                                goto label_403b31;\n                            }\n                            case 0x25:\n                            case 0x2b:\n                            case 0x2c:\n                            case 0x2d:\n                            case 0x2e:\n                            case 0x2f:\n                            case 0x30:\n                            case 0x31:\n                            case 0x32:\n                            case 0x33:\n                            case 0x34:\n                            case 0x35:\n                            case 0x36:\n                            case 0x37:\n                            case 0x38:\n                            case 0x39:\n                            case 0x3a:\n                            case 0x41:\n                            case 0x42:\n                            case 0x43:\n                            case 0x44:\n                            case 0x45:\n                            case 0x46:\n                            case 0x47:\n                            case 0x48:\n                            case 0x49:\n                            case 0x4a:\n                            case 0x4b:\n                            case 0x4c:\n                            case 0x4d:\n                            case 0x4e:\n                            case 0x4f:\n                            case 0x50:\n                            case 0x51:\n                            case 0x52:\n                            case 0x53:\n                            case 0x54:\n                            case 0x55:\n                            case 0x56:\n                            case 0x57:\n                            case 0x58:\n                            case 0x59:\n                            case 0x5a:\n                            case 0x5d:\n                            case 0x5f:\n                            case 0x61:\n                            case 0x62:\n                            case 0x63:\n                            case 0x64:\n                            case 0x65:\n                            case 0x66:\n                            case 0x67:\n                            case 0x68:\n                            case 0x69:\n                            case 0x6a:\n                            case 0x6b:\n                            case 0x6c:\n                            case 0x6d:\n                            case 0x6e:\n                            case 0x6f:\n                            case 0x70:\n                            case 0x71:\n                            case 0x72:\n                            case 0x73:\n                            case 0x74:\n                            case 0x75:\n                            case 0x76:\n                            case 0x77:\n                            case 0x78:\n                            case 0x79:\n                            case 0x7a:\n                            {\n                                rax_27 = 0;\n                            label_4040f2:\n                                r13 = var_b8;\n                                var_b8 = rax_27;\n                                rax_8 = 0;\n                                goto label_403b31;\n                            }\n                            case 0x27:\n                            {\n                                var_b8 = 0;\n                            label_403cad:\n                                if (r11_1 != 2)\n                                {\n                                    var_5b_1 = r13;\n                                    rdx = 0;\n                                    rbp_3 = 0x27;\n                                    goto label_403b25;\n                                }\n                                if (var_5c != 0)\n                                {\n                                    goto label_404a6d;\n                                }\n                                if (r14 != 0)\n                                {\n                                    rdx = 0;\n                                }\n                                if ((r14 == 0 || (r14 != 0 && var_70 != 0)))\n                                {\n                                    if (r14 > rbx_1)\n                                    {\n                                        r15[rbx_1] = 0x27;\n                                    }\n                                    if (r14 > (rbx_1 + 1))\n                                    {\n                                        r15[(rbx_1 + 1)] = 0x5c;\n                                    }\n                                    if (r14 <= (rbx_1 + 2))\n                                    {\n                                        rdx = r14;\n                                        r14 = var_70;\n                                    }\n                                    else\n                                    {\n                                        rdx = r14;\n                                        r15[(rbx_1 + 2)] = 0x27;\n                                        r14 = var_70;\n                                    }\n                                }\n                                var_5b_1 = r13;\n                                rbx_1 = (rbx_1 + 3);\n                                rax_8 = 0;\n                                r10 = 0;\n                                var_70 = r14;\n                                rbp_3 = 0x27;\n                                r14 = rdx;\n                                goto label_403c2c;\n                            }\n                            case 0x3f:\n                            {\n                                var_b8 = 0;\n                            label_403c7d:\n                                if (r11_1 == 2)\n                                {\n                                    if (var_5c != 0)\n                                    {\n                                    label_404a6d:\n                                        r13_1 = r11_1;\n                                        r11 = r9;\n                                        goto label_403d3c;\n                                    }\n                                    r13 = 0;\n                                    rax_8 = 0;\n                                    rbp_3 = 0x3f;\n                                label_403c2c:\n                                    rdx = r11_1 == 2;\n                                    if (var_b8 != 0)\n                                    {\n                                        goto label_403b67;\n                                    }\n                                    r12_1 = (r12_1 + 1);\n                                    rax_12 = ((rax_8 ^ 1) & r10);\n                                    goto label_403c44;\n                                }\n                                if (r11_1 != 5)\n                                {\n                                    rbp_3 = 0x3f;\n                                    rdx = r11_1 == 2;\n                                    r13 = 0;\n                                    goto label_403b25;\n                                }\n                                if ((arg6 & 4) == 0)\n                                {\n                                label_404210:\n                                    rdx = 0;\n                                    r13 = 0;\n                                    rbp_3 = 0x3f;\n                                    goto label_403b25;\n                                }\n                                int64_t rax_30 = (r12_1 + 2);\n                                if (rax_30 >= r9)\n                                {\n                                    goto label_404210;\n                                }\n                                if (*((arg3 + r12_1) + 1) != 0x3f)\n                                {\n                                    goto label_404210;\n                                }\n                                rbp_3 = *(arg3 + rax_30);\n                                if (rbp_3 > 0x3e)\n                                {\n                                    goto label_404210;\n                                }\n                                if ((!(TEST_BITQ(0x7000a38200000000, rbp_3))))\n                                {\n                                    goto label_404210;\n                                }\n                                if (var_5c != 0)\n                                {\n                                    goto label_404a20;\n                                }\n                                if (r14 > rbx_1)\n                                {\n                                    r15[rbx_1] = 0x3f;\n                                }\n                                if (r14 > (rbx_1 + 1))\n                                {\n                                    r15[(rbx_1 + 1)] = 0x22;\n                                }\n                                if (r14 > (rbx_1 + 2))\n                                {\n                                    r15[(rbx_1 + 2)] = 0x22;\n                                }\n                                if (r14 > (rbx_1 + 3))\n                                {\n                                    r15[(rbx_1 + 3)] = 0x3f;\n                                }\n                                rbx_1 = (rbx_1 + 4);\n                                rdx = 0;\n                                r13 = 0;\n                                r12_1 = rax_30;\n                            label_403eb3:\n                                rax_8 = r13;\n                                r13 = 0;\n                                if (((var_c0 ^ 1) | rdx) != 0)\n                                {\n                                    goto label_403c2c;\n                                }\n                            label_403b31:\n                                if (arg7 == 0)\n                                {\n                                    goto label_403c2c;\n                                }\n                                if (((*(arg7 + ((rbp_3 >> 5) << 2)) >> rbp_3) & 1) == 0)\n                                {\n                                    goto label_403c2c;\n                                }\n                                rdx = r11_1 == 2;\n                                goto label_403b67;\n                            }\n                            case 0x5c:\n                            {\n                                var_b8 = 0;\n                            label_403cda:\n                                rdx = (var_c0 & var_5c);\n                                rbp_3 = 0x5c;\n                                rcx_2 = 0x5c;\n                                rax_1 = var_a0_1 != 0;\n                                rdx = (rdx & rax_1);\n                                if (rdx == 0)\n                                {\n                                    goto label_403d00;\n                                }\n                                r12_1 = (r12_1 + 1);\n                                rax_12 = r10;\n                                r13 = 0;\n                            label_403c44:\n                                if (rax_12 != 0)\n                                {\n                                    if (r14 > rbx_1)\n                                    {\n                                        r15[rbx_1] = 0x27;\n                                    }\n                                    if (r14 > (rbx_1 + 1))\n                                    {\n                                        r15[(rbx_1 + 1)] = 0x27;\n                                    }\n                                    rbx_1 = (rbx_1 + 2);\n                                    r10 = 0;\n                                    goto label_403bbd;\n                                }\n                            label_403bbd:\n                                if (rbx_1 >= r14)\n                                {\n                                    goto label_403bc6;\n                                }\n                                r15[rbx_1] = rbp_3;\n                            label_403bc6:\n                                char rdi_2 = var_a9;\n                                rbx_1 = (rbx_1 + 1);\n                                if (r13 == 0)\n                                {\n                                    rdi_2 = 0;\n                                }\n                                var_a9 = rdi_2;\n                                continue;\n                            }\n                            case 0x7b:\n                            case 0x7d:\n                            {\n                                var_b8 = 0;\n                            label_403ad9:\n                                rax_1 = r9 != 1;\n                                if (r9 == -1)\n                                {\n                                    rax_1 = *(arg3 + 1) != 0;\n                                }\n                                rdx = r11_1 == 2;\n                                if (rax_1 != 0)\n                                {\n                                    goto label_403d0b;\n                                }\n                                goto label_403afd;\n                            }\n                        }\n                    }\n                }\n            }\n        label_4041b6:\n            *r15 = 0x27;\n            r13 = 2;\n            rbx_1 = 1;\n            var_78_1 = \"'\";\n            var_a0_1 = 1;\n            var_5c = false;\n            var_5b_1 = rax_1;\n        }\n    }\n    if ((r13 == 4 && rbp_1 == 0))\n    {\n        var_c0 = 1;\n    }\n    switch (r13)\n    {\n        case 0:\n        {\n            var_a9 = 1;\n            r10 = 0;\n            rbx_1 = 0;\n            var_5b_1 = 0;\n            var_70 = 0;\n            var_5c = false;\n            var_c0 = 0;\n            var_a0_1 = 0;\n            var_78_1 = nullptr;\n            goto label_4039c8;\n        }\n        case 2:\n        {\n            if (rbp_1 != 0)\n            {\n                var_a9 = 1;\n                r10 = 0;\n                rbx_1 = 0;\n                var_5b_1 = 0;\n                var_70 = 0;\n                var_5c = true;\n                var_c0 = 0;\n                var_a0_1 = 1;\n                var_78_1 = \"'\";\n                goto label_4039c8;\n            }\n            var_c0 = 0;\n            break;\n        }\n        case 3:\n        {\n            var_a9 = 1;\n            r10 = 0;\n            rbx_1 = 0;\n            r13 = 2;\n            var_5b_1 = 0;\n            var_70 = 0;\n            var_5c = true;\n            var_c0 = 1;\n            var_a0_1 = 1;\n            var_78_1 = \"'\";\n            goto label_4039c8;\n        }\n        case 5:\n        {\n            if (rbp_1 != 0)\n            {\n                var_a9 = 1;\n                r10 = 0;\n                rbx_1 = 0;\n                var_5b_1 = 0;\n                var_70 = 0;\n                var_5c = true;\n                var_c0 = 1;\n                var_a0_1 = 1;\n                var_78_1 = &data_4082f4;\n            }\n            else\n            {\n                if (r14 == 0)\n                {\n                    var_70 = 0;\n                    r10 = 0;\n                    var_a9 = 1;\n                    var_5b_1 = 0;\n                }\n                else\n                {\n                    *r15 = 0x22;\n                    r10 = 0;\n                    var_a9 = 1;\n                    var_5b_1 = 0;\n                    var_70 = 0;\n                }\n                var_5c = false;\n                rbx_1 = 1;\n                var_c0 = 1;\n                var_a0_1 = 1;\n                var_78_1 = &data_4082f4;\n            }\n            goto label_4039c8;\n        }\n        case 6:\n        {\n            var_a9 = 1;\n            r10 = 0;\n            rbx_1 = 0;\n            r13 = 5;\n            var_5b_1 = 0;\n            var_70 = 0;\n            var_5c = true;\n            var_c0 = 1;\n            var_a0_1 = 1;\n            var_78_1 = &data_4082f4;\n            goto label_4039c8;\n        }\n        case 7:\n        {\n            var_a9 = 1;\n            r10 = 0;\n            rbx_1 = 0;\n            var_5b_1 = 0;\n            var_70 = 0;\n            var_5c = false;\n            var_c0 = 1;\n            var_a0_1 = 0;\n            var_78_1 = nullptr;\n            goto label_4039c8;\n        }\n        case 8:\n        case 9:\n        case 0xa:\n        {\n            if ((!cond:1))\n            {\n                arg8 = sub_403830(&data_408305, r13);\n                arg9 = sub_403830(\"'\", r13);\n            }\n            rbx_1 = 0;\n            if (rbp_1 == 0)\n            {\n                char rax_49 = *arg8;\n                if (rax_49 != 0)\n                {\n                    do\n                    {\n                        if (r14 > rbx_1)\n                        {\n                            r15[rbx_1] = rax_49;\n                        }\n                        rbx_1 = (rbx_1 + 1);\n                        rax_49 = arg8[rbx_1];\n                    } while (rax_49 != 0);\n                }\n            }\n            uint64_t rax_46;\n            rax_46 = strlen(arg9);\n            var_a9 = 1;\n            r10 = 0;\n            var_a0_1 = rax_46;\n            var_5b_1 = 0;\n            var_78_1 = arg9;\n            var_70 = 0;\n            var_c0 = 1;\n            goto label_4039c8;\n        }\n    }\n    if (((r13 == 4 && rbp_1 == 0) || r13 == 2))\n    {\n        if (r14 != 0)\n        {\n            r10 = 0;\n            rax_1 = 0;\n            var_a9 = 1;\n            var_70 = 0;\n            goto label_4041b6;\n        }\n        var_a9 = 1;\n        r10 = 0;\n        rbx_1 = 1;\n        r13 = 2;\n        var_70 = 0;\n        var_5b_1 = 0;\n        var_5c = false;\n        var_a0_1 = 1;\n        var_78_1 = \"'\";\n        goto label_4039c8;\n    }\n}\n\n"
        },
        {
            "funcName": "sub_404b60",
            "funcStartAddr": "0x401a25",
            "funcEndAddr": "0x404cfe",
            "decompiledFuncCode": "char* sub_404b60(int32_t arg1, uint64_t arg2, uint64_t arg3, int32_t* arg4)\n{\n    int64_t r15 = arg1;\n    int32_t* rax = __errno_location();\n    int64_t rbx = data_60b298;\n    int32_t rax_1 = *rax;\n    if (r15 < 0)\n    {\n        abort();\n        /* no return */\n    }\n    if (data_60b2b0 <= r15)\n    {\n        if (r15 == 0x7fffffff)\n        {\n            sub_405bc0();\n            /* no return */\n        }\n        int32_t r12_1 = (r15 + 1);\n        int64_t rsi_1 = (r12_1 << 4);\n        if (rbx == 0x60b2a0)\n        {\n            int64_t rax_9 = sub_4059d0(0, rsi_1);\n            int128_t zmm0 = data_60b2a0;\n            rbx = rax_9;\n            data_60b298 = rax_9;\n            *rax_9 = zmm0;\n        }\n        else\n        {\n            int64_t rax_2 = sub_4059d0(rbx, rsi_1);\n            data_60b298 = rax_2;\n            rbx = rax_2;\n        }\n        int64_t rdi_1 = data_60b2b0;\n        memset(((rdi_1 << 4) + rbx), 0, ((r12_1 - rdi_1) << 4));\n        data_60b2b0 = r12_1;\n    }\n    int64_t rbx_1 = (rbx + (r15 << 4));\n    void* r15_2 = &arg4[2];\n    int32_t rax_4 = (arg4[1] | 1);\n    uint64_t r11 = *rbx_1;\n    char* r12_2 = *(rbx_1 + 8);\n    int64_t rax_5 = sub_403930(r12_2, r11, arg2, arg3, *arg4, rax_4, r15_2, *(arg4 + 0x28), *(arg4 + 0x30));\n    if (r11 <= rax_5)\n    {\n        uint64_t rsi_3 = (rax_5 + 1);\n        *rbx_1 = rsi_3;\n        if (r12_2 != 0x60b360)\n        {\n            free(r12_2);\n        }\n        char* rax_6 = sub_405970(rsi_3);\n        uint32_t r8_1 = *arg4;\n        *(rbx_1 + 8) = rax_6;\n        r12_2 = rax_6;\n        sub_403930(rax_6, rsi_3, arg2, arg3, r8_1, rax_4, r15_2, *(arg4 + 0x28), *(arg4 + 0x30));\n    }\n    *rax = rax_1;\n    return r12_2;\n}\n\n"
        },
        {
            "funcName": "sub_404d00",
            "funcStartAddr": "0x404d00",
            "funcEndAddr": "0x404d34",
            "decompiledFuncCode": "int64_t sub_404d00(int64_t arg1)\n{\n    int64_t rbx = arg1;\n    int32_t* rax = __errno_location();\n    int32_t r12 = *rax;\n    if (rbx == 0)\n    {\n        rbx = 0x60b460;\n    }\n    int64_t rax_1 = sub_405b70(rbx, 0x38);\n    *rax = r12;\n    return rax_1;\n}\n\n"
        },
        {
            "funcName": "sub_404d40",
            "funcStartAddr": "0x404d40",
            "funcEndAddr": "0x404d4f",
            "decompiledFuncCode": "uint64_t sub_404d40(int32_t* arg1)\n{\n    if (arg1 == 0)\n    {\n        arg1 = &data_60b460;\n    }\n    return *arg1;\n}\n\n"
        },
        {
            "funcName": "sub_404d50",
            "funcStartAddr": "0x404d50",
            "funcEndAddr": "0x404d5f",
            "decompiledFuncCode": "void sub_404d50(int32_t* arg1, int32_t arg2)\n{\n    if (arg1 == 0)\n    {\n        arg1 = &data_60b460;\n    }\n    *arg1 = arg2;\n}\n\n"
        },
        {
            "funcName": "sub_404d60",
            "funcStartAddr": "0x404d60",
            "funcEndAddr": "0x404d93",
            "decompiledFuncCode": "uint64_t sub_404d60(int64_t arg1, uint8_t arg2, int32_t arg3)\n{\n    if (arg1 == 0)\n    {\n        arg1 = 0x60b460;\n    }\n    char rcx_1 = (arg2 & 0x1f);\n    int32_t rsi = *((arg1 + ((arg2 >> 5) << 2)) + 8);\n    uint32_t rax_3 = (rsi >> rcx_1);\n    *((arg1 + ((arg2 >> 5) << 2)) + 8) = ((((arg3 ^ rax_3) & 1) << rcx_1) ^ rsi);\n    return (rax_3 & 1);\n}\n\n"
        },
        {
            "funcName": "sub_404da0",
            "funcStartAddr": "0x404da0",
            "funcEndAddr": "0x404db3",
            "decompiledFuncCode": "uint64_t sub_404da0(int128_t* arg1, int32_t arg2)\n{\n    if (arg1 == 0)\n    {\n        arg1 = &data_60b460;\n    }\n    uint64_t rax = *(arg1 + 4);\n    *(arg1 + 4) = arg2;\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_404dc0",
            "funcStartAddr": "0x404dc0",
            "funcEndAddr": "0x404deb",
            "decompiledFuncCode": "void sub_404dc0(int32_t* arg1, int64_t arg2, int64_t arg3)\n{\n    if (arg1 == 0)\n    {\n        arg1 = &data_60b460;\n    }\n    *arg1 = 0xa;\n    if ((arg2 != 0 && arg3 != 0))\n    {\n        *(arg1 + 0x28) = arg2;\n        *(arg1 + 0x30) = arg3;\n        return;\n    }\n    int64_t var_8 = 0x60b460;\n    abort();\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_404df0",
            "funcStartAddr": "0x404df0",
            "funcEndAddr": "0x404e62",
            "decompiledFuncCode": "int64_t sub_404df0(char* arg1, uint64_t arg2, uint64_t arg3, uint64_t arg4, \n    int32_t* arg5)\n{\n    int32_t* rbx = arg5;\n    if (arg5 == 0)\n    {\n        rbx = &data_60b460;\n    }\n    int32_t* rax = __errno_location();\n    int32_t r12 = *rax;\n    int64_t rax_2 = sub_403930(arg1, arg2, arg3, arg4, *rbx, rbx[1], &rbx[2], *(rbx + 0x28), *(rbx + 0x30));\n    *rax = r12;\n    return rax_2;\n}\n\n"
        },
        {
            "funcName": "sub_404e70",
            "funcStartAddr": "0x404e70",
            "funcEndAddr": "0x404f51",
            "decompiledFuncCode": "char* sub_404e70(uint64_t arg1, uint64_t arg2, int64_t* arg3, int32_t* arg4)\n{\n    int32_t* rbx = arg4;\n    if (arg4 == 0)\n    {\n        rbx = &data_60b460;\n    }\n    int32_t* rax = __errno_location();\n    int32_t rax_1 = *rax;\n    int32_t rbp;\n    rbp = arg3 == 0;\n    int32_t rbp_1 = (rbp | rbx[1]);\n    int64_t rax_2 = sub_403930(nullptr, 0, arg1, arg2, *rbx, rbp_1, &rbx[2], *(rbx + 0x28), *(rbx + 0x30));\n    char* rax_3 = sub_405970((rax_2 + 1));\n    sub_403930(rax_3, (rax_2 + 1), arg1, arg2, *rbx, rbp_1, &rbx[2], *(rbx + 0x28), *(rbx + 0x30));\n    *rax = rax_1;\n    if (arg3 != 0)\n    {\n        *arg3 = rax_2;\n    }\n    return rax_3;\n}\n\n"
        },
        {
            "funcName": "sub_404f60",
            "funcStartAddr": "0x404f60",
            "funcEndAddr": "0x404f6a",
            "decompiledFuncCode": "int64_t sub_404f60(uint64_t arg1, uint64_t arg2, int32_t* arg3)\n{\n    /* tailcall */\n    return sub_404e70(arg1, arg2, nullptr, arg3);\n}\n\n"
        },
        {
            "funcName": "sub_404f70",
            "funcStartAddr": "0x404f70",
            "funcEndAddr": "0x405005",
            "decompiledFuncCode": "uint64_t sub_404f70()\n{\n    uint64_t rax_2 = data_60b2b0;\n    int64_t r12 = data_60b298;\n    if (rax_2 > 1)\n    {\n        int64_t* rbx_1 = (r12 + 0x18);\n        int64_t rbp_1 = ((r12 + ((rax_2 - 2) << 4)) + 0x28);\n        do\n        {\n            int64_t rdi_1 = *rbx_1;\n            rbx_1 = &rbx_1[2];\n            rax_2 = free(rdi_1);\n        } while (rbx_1 != rbp_1);\n    }\n    int64_t rdi_2 = *(r12 + 8);\n    if (rdi_2 != 0x60b360)\n    {\n        rax_2 = free(rdi_2);\n        *data_60b2a0 = 0x100;\n        *(data_60b2a0 + 8) = 0x60b360;\n    }\n    if (r12 != 0x60b2a0)\n    {\n        rax_2 = free(r12);\n        data_60b298 = 0x60b2a0;\n    }\n    data_60b2b0 = 1;\n    return rax_2;\n}\n\n"
        },
        {
            "funcName": "sub_405010",
            "funcStartAddr": "0x405010",
            "funcEndAddr": "0x405021",
            "decompiledFuncCode": "int64_t sub_405010(int32_t arg1, uint64_t arg2)\n{\n    /* tailcall */\n    return sub_404b60(arg1, arg2, -1, &data_60b460);\n}\n\n"
        },
        {
            "funcName": "sub_405030",
            "funcStartAddr": "0x405030",
            "funcEndAddr": "0x40503a",
            "decompiledFuncCode": "int64_t sub_405030(int32_t arg1, uint64_t arg2, uint64_t arg3)\n{\n    /* tailcall */\n    return sub_404b60(arg1, arg2, arg3, &data_60b460);\n}\n\n"
        },
        {
            "funcName": "sub_405040",
            "funcStartAddr": "0x405040",
            "funcEndAddr": "0x405056",
            "decompiledFuncCode": "int64_t sub_405040(uint64_t arg1)\n{\n    /* tailcall */\n    return sub_404b60(0, arg1, -1, &data_60b460);\n}\n\n"
        },
        {
            "funcName": "sub_405060",
            "funcStartAddr": "0x405060",
            "funcEndAddr": "0x405072",
            "decompiledFuncCode": "int64_t sub_405060(uint64_t arg1, uint64_t arg2)\n{\n    /* tailcall */\n    return sub_404b60(0, arg1, arg2, &data_60b460);\n}\n\n"
        },
        {
            "funcName": "sub_405080",
            "funcStartAddr": "0x401a2a",
            "funcEndAddr": "0x4050e8",
            "decompiledFuncCode": "char* sub_405080(int32_t arg1, int32_t arg2, uint64_t arg3)\n{\n    if (arg2 == 0xa)\n    {\n        abort();\n        /* no return */\n    }\n    int32_t var_48 = arg2;\n    int32_t var_44 = 0;\n    int64_t var_40 = 0;\n    int64_t var_38 = 0;\n    int64_t var_30 = 0;\n    int64_t var_28 = 0;\n    int64_t var_20 = 0;\n    int64_t var_18 = 0;\n    return sub_404b60(arg1, arg3, -1, &var_48);\n}\n\n"
        },
        {
            "funcName": "sub_4050f0",
            "funcStartAddr": "0x401a2f",
            "funcEndAddr": "0x405154",
            "decompiledFuncCode": "char* sub_4050f0(int32_t arg1, int32_t arg2, uint64_t arg3, uint64_t arg4)\n{\n    if (arg2 == 0xa)\n    {\n        abort();\n        /* no return */\n    }\n    int32_t var_48 = arg2;\n    int32_t var_44 = 0;\n    int64_t var_40 = 0;\n    int64_t var_38 = 0;\n    int64_t var_30 = 0;\n    int64_t var_28 = 0;\n    int64_t var_20 = 0;\n    int64_t var_18 = 0;\n    return sub_404b60(arg1, arg3, arg4, &var_48);\n}\n\n"
        },
        {
            "funcName": "sub_405160",
            "funcStartAddr": "0x405160",
            "funcEndAddr": "0x40516c",
            "decompiledFuncCode": "int64_t sub_405160(int32_t arg1, uint64_t arg2)\n{\n    /* tailcall */\n    return sub_405080(0, arg1, arg2);\n}\n\n"
        },
        {
            "funcName": "sub_405170",
            "funcStartAddr": "0x405170",
            "funcEndAddr": "0x40517f",
            "decompiledFuncCode": "int64_t sub_405170(int32_t arg1, uint64_t arg2, uint64_t arg3)\n{\n    /* tailcall */\n    return sub_4050f0(0, arg1, arg2, arg3);\n}\n\n"
        },
        {
            "funcName": "sub_405180",
            "funcStartAddr": "0x405180",
            "funcEndAddr": "0x4051f0",
            "decompiledFuncCode": "char* sub_405180(uint64_t arg1, uint64_t arg2, uint8_t arg3)\n{\n    char rcx_1 = (arg3 & 0x1f);\n    int64_t var_18 = data_60b490;\n    int128_t var_48 = data_60b460;\n    int128_t var_38 = data_60b470;\n    int128_t var_28 = data_60b480;\n    int32_t rdx = *((&var_48 + ((arg3 >> 5) << 2)) + 8);\n    *((&var_48 + ((arg3 >> 5) << 2)) + 8) = ((((!(rdx >> rcx_1)) & 1) << rcx_1) ^ rdx);\n    return sub_404b60(0, arg1, arg2, &var_48);\n}\n\n"
        },
        {
            "funcName": "sub_4051f0",
            "funcStartAddr": "0x4051f0",
            "funcEndAddr": "0x4051fd",
            "decompiledFuncCode": "int64_t sub_4051f0(uint64_t arg1, uint8_t arg2)\n{\n    /* tailcall */\n    return sub_405180(arg1, -1, arg2);\n}\n\n"
        },
        {
            "funcName": "sub_405200",
            "funcStartAddr": "0x405200",
            "funcEndAddr": "0x405211",
            "decompiledFuncCode": "int64_t sub_405200(uint64_t arg1)\n{\n    /* tailcall */\n    return sub_405180(arg1, -1, 0x3a);\n}\n\n"
        },
        {
            "funcName": "sub_405220",
            "funcStartAddr": "0x405220",
            "funcEndAddr": "0x40522a",
            "decompiledFuncCode": "int64_t sub_405220(uint64_t arg1, uint64_t arg2)\n{\n    /* tailcall */\n    return sub_405180(arg1, arg2, 0x3a);\n}\n\n"
        },
        {
            "funcName": "sub_405230",
            "funcStartAddr": "0x401a34",
            "funcEndAddr": "0x40529e",
            "decompiledFuncCode": "char* sub_405230(int32_t arg1, int32_t arg2, uint64_t arg3)\n{\n    if (arg2 == 0xa)\n    {\n        abort();\n        /* no return */\n    }\n    int32_t var_48 = arg2;\n    int64_t var_40 = 0x400000000000000;\n    int32_t var_44 = 0;\n    int64_t var_38 = 0;\n    int64_t var_30 = 0;\n    int64_t var_28 = 0;\n    int64_t var_20 = 0;\n    int64_t var_18 = 0;\n    return sub_404b60(arg1, arg3, -1, &var_48);\n}\n\n"
        },
        {
            "funcName": "sub_4052a0",
            "funcStartAddr": "0x4052a0",
            "funcEndAddr": "0x40530c",
            "decompiledFuncCode": "char* sub_4052a0(int32_t arg1, int64_t arg2, int64_t arg3, uint64_t arg4, \n    uint64_t arg5)\n{\n    int128_t var_48 = data_60b460;\n    int128_t var_38 = data_60b470;\n    int128_t var_28 = data_60b480;\n    int64_t var_18 = data_60b490;\n    var_48 = 0xa;\n    if ((arg2 != 0 && arg3 != 0))\n    {\n        *var_28[8] = arg2;\n        int64_t var_18_1 = arg3;\n        return sub_404b60(arg1, arg4, arg5, &var_48);\n    }\n    abort();\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_4053b0",
            "funcStartAddr": "0x4053b0",
            "funcEndAddr": "0x4053c6",
            "decompiledFuncCode": "int64_t sub_4053b0(uint64_t arg1)\n{\n    /* tailcall */\n    return sub_404b60(0, arg1, -1, &data_60b260);\n}\n\n"
        },
        {
            "funcName": "sub_4053d0",
            "funcStartAddr": "0x401a39",
            "funcEndAddr": "0x4057ad",
            "decompiledFuncCode": "int64_t sub_4053d0(FILE* arg1, int64_t arg2, int64_t arg3, int64_t arg4, \n    int64_t* arg5, int64_t arg6)\n{\n    if (arg2 == 0)\n    {\n        __fprintf_chk();\n    }\n    else\n    {\n        __fprintf_chk();\n    }\n    __fprintf_chk(arg1, 1, \"Copyright %s %d Free Software Fo\u2026\", dcgettext(nullptr, &data_40904b, 5), 0x7e1);\n    fputs_unlocked(dcgettext(nullptr, \"\\nLicense GPLv3+: GNU GPL versio\u2026\", 5), arg1);\n    int64_t var_58;\n    int64_t var_50_1;\n    int64_t var_48;\n    int64_t var_40;\n    char* rax_6;\n    int64_t rbx_1;\n    char* rsi_1;\n    int64_t r12_1;\n    int64_t r13;\n    int64_t r14;\n    int64_t r15_1;\n    switch (arg6)\n    {\n        case 0:\n        {\n            abort();\n            /* no return */\n        }\n        case 8:\n        {\n            r13 = arg5[6];\n            r12_1 = arg5[5];\n            r15_1 = arg5[4];\n            var_48 = arg5[7];\n            r14 = arg5[3];\n            rbx_1 = *arg5;\n            var_58 = arg5[2];\n            var_50_1 = arg5[1];\n            rax_6 = dcgettext(nullptr, \"Written by %s, %s, %s,\\n%s, %s, \u2026\", 5);\n            break;\n        }\n        case 9:\n        {\n            rsi_1 = \"Written by %s, %s, %s,\\n%s, %s, \u2026\";\n            r13 = arg5[6];\n            r12_1 = arg5[5];\n            var_40 = arg5[8];\n            r15_1 = arg5[4];\n            r14 = arg5[3];\n            var_48 = arg5[7];\n            var_58 = arg5[2];\n            rbx_1 = *arg5;\n            var_50_1 = arg5[1];\n            break;\n        }\n        default:\n            rsi_1 = \"Written by %s, %s, %s,\\n%s, %s, \u2026\";\n            r13 = arg5[6];\n            r12_1 = arg5[5];\n            var_40 = arg5[8];\n            r15_1 = arg5[4];\n            r14 = arg5[3];\n            var_48 = arg5[7];\n            var_58 = arg5[2];\n            rbx_1 = *arg5;\n            var_50_1 = arg5[1];\n    }\n    int64_t var_60;\n    if ((arg6 > 9 || arg6 == 9))\n    {\n        rax_6 = dcgettext(nullptr, rsi_1, 5);\n        var_60 = var_40;\n    }\n    int64_t var_78_1;\n    int64_t var_70_1;\n    int64_t var_68_2;\n    int64_t var_58_1;\n    int64_t var_50;\n    char* rax_19;\n    char* rax_22;\n    int64_t rbx_5;\n    int64_t rbx_6;\n    int64_t r9_9;\n    int64_t r12_4;\n    int64_t r13_2;\n    int64_t r14_1;\n    switch (arg6)\n    {\n        case 1:\n        {\n            /* tailcall */\n            return __fprintf_chk(arg1, 1, dcgettext(nullptr, \"Written by %s.\\n\", 5), *arg5);\n            break;\n        }\n        case 2:\n        {\n            /* tailcall */\n            return __fprintf_chk(arg1, 1, dcgettext(nullptr, \"Written by %s and %s.\\n\", 5), *arg5, arg5[1]);\n            break;\n        }\n        case 3:\n        {\n            /* tailcall */\n            return __fprintf_chk(arg1, 1, dcgettext(nullptr, \"Written by %s, %s, and %s.\\n\", 5), *arg5, arg5[1], arg5[2]);\n            break;\n        }\n        case 4:\n        {\n            r14_1 = arg5[3];\n            r13_2 = arg5[2];\n            r12_4 = arg5[1];\n            rbx_5 = *arg5;\n            rax_19 = dcgettext(nullptr, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n            break;\n        }\n        case 5:\n        {\n            int64_t r15_2 = arg5[4];\n            r14_1 = arg5[3];\n            r13_2 = arg5[2];\n            r12_4 = arg5[1];\n            rbx_5 = *arg5;\n            rax_19 = dcgettext(nullptr, \"Written by %s, %s, %s,\\n%s, and \u2026\", 5);\n            var_60 = r15_2;\n            break;\n        }\n        case 6:\n        {\n            int64_t r12_5 = arg5[5];\n            int64_t r15_3 = arg5[4];\n            int64_t r14_2 = arg5[3];\n            var_58_1 = arg5[1];\n            int64_t r13_3 = arg5[2];\n            rbx_6 = *arg5;\n            rax_22 = dcgettext(nullptr, \"Written by %s, %s, %s,\\n%s, %s, \u2026\", 5);\n            r9_9 = r13_3;\n            var_68_2 = r12_5;\n            var_70_1 = r15_3;\n            var_78_1 = r14_2;\n            break;\n        }\n        case 7:\n        {\n            int64_t r13_4 = arg5[6];\n            int64_t r12_6 = arg5[5];\n            int64_t r15_4 = arg5[4];\n            int64_t r14_3 = arg5[3];\n            var_50 = arg5[2];\n            rbx_6 = *arg5;\n            var_58_1 = arg5[1];\n            rax_22 = dcgettext(nullptr, \"Written by %s, %s, %s,\\n%s, %s, \u2026\", 5);\n            var_60 = r13_4;\n            var_68_2 = r12_6;\n            var_70_1 = r15_4;\n            var_78_1 = r14_3;\n            r9_9 = var_50;\n            break;\n        }\n        default:\n            return __fprintf_chk(arg1, 1, rax_6, rbx_1, var_50_1, var_58, r14, r15_1, r12_1, r13, var_48, var_60, var_58, var_50_1, var_48, var_40);\n    }\n    if ((arg6 == 4 || arg6 == 5))\n    {\n        __fprintf_chk(arg1, 1, rax_19, rbx_5, r12_4, r13_2, r14_1, var_60);\n        return r14_1;\n    }\n    else if ((arg6 == 6 || arg6 == 7))\n    {\n        return __fprintf_chk(arg1, 1, rax_22, rbx_6, var_58_1, r9_9, var_78_1, var_70_1, var_68_2, var_60, var_58_1, var_50);\n    }\n}\n\n"
        },
        {
            "funcName": "sub_4057b0",
            "funcStartAddr": "0x4057b0",
            "funcEndAddr": "0x4057d0",
            "decompiledFuncCode": "int64_t sub_4057b0(FILE* arg1, int64_t arg2, int64_t arg3, int64_t arg4, \n    int64_t* arg5)\n{\n    int64_t r9 = 0;\n    if (*arg5 != 0)\n    {\n        do\n        {\n            r9 = (r9 + 1);\n        } while (arg5[r9] != 0);\n    }\n    /* tailcall */\n    return sub_4053d0(arg1, arg2, arg3, arg4, arg5, r9);\n}\n\n"
        },
        {
            "funcName": "sub_4057d0",
            "funcStartAddr": "0x4057d0",
            "funcEndAddr": "0x405830",
            "decompiledFuncCode": "int64_t sub_4057d0(FILE* arg1, int64_t arg2, int64_t arg3, int64_t arg4, \n    int32_t* arg5)\n{\n    int64_t r9 = 0;\n    void var_58;\n    do\n    {\n        int32_t rax_3 = *arg5;\n        if (rax_3 <= 0x2f)\n        {\n            int64_t* r10_2 = (rax_3 + *(arg5 + 0x10));\n            *arg5 = (rax_3 + 8);\n            int64_t rax_2 = *r10_2;\n            *(&var_58 + (r9 << 3)) = rax_2;\n            if (rax_2 == 0)\n            {\n                break;\n            }\n        }\n        else\n        {\n            int64_t* r10_3 = *(arg5 + 8);\n            *(arg5 + 8) = &r10_3[1];\n            int64_t rax_5 = *r10_3;\n            *(&var_58 + (r9 << 3)) = rax_5;\n            if (rax_5 == 0)\n            {\n                break;\n            }\n        }\n        r9 = (r9 + 1);\n    } while (r9 != 0xa);\n    return sub_4053d0(arg1, arg2, arg3, arg4, &var_58, r9);\n}\n\n"
        },
        {
            "funcName": "sub_405830",
            "funcStartAddr": "0x405830",
            "funcEndAddr": "0x4058ec",
            "decompiledFuncCode": "int64_t sub_405830(FILE* arg1, int64_t arg2, int64_t arg3, int64_t arg4)\n{\n    char r11 = 0;\n    int64_t r8;\n    int64_t var_18 = r8;\n    void* r10 = &arg_8;\n    int32_t r8_1 = 0x20;\n    void* var_98 = &arg_8;\n    int64_t r9;\n    int64_t var_10 = r9;\n    int64_t r9_1 = 0;\n    int32_t var_a0 = 0x20;\n    void var_38;\n    void* var_90 = &var_38;\n    void var_88;\n    do\n    {\n        if (r8_1 <= 0x2f)\n        {\n            uint64_t rax_1 = r8_1;\n            r8_1 = (r8_1 + 8);\n            r11 = 1;\n            int64_t rax_3 = *(rax_1 + &var_38);\n            *(&var_88 + (r9_1 << 3)) = rax_3;\n            if (rax_3 == 0)\n            {\n                break;\n            }\n        }\n        else\n        {\n            void* rax_4 = r10;\n            r10 = (r10 + 8);\n            int64_t rax_5 = *rax_4;\n            *(&var_88 + (r9_1 << 3)) = rax_5;\n            if (rax_5 == 0)\n            {\n                break;\n            }\n        }\n        r9_1 = (r9_1 + 1);\n    } while (r9_1 != 0xa);\n    if (r11 != 0)\n    {\n        int32_t var_a0_1 = r8_1;\n    }\n    return sub_4053d0(arg1, arg2, arg3, arg4, &var_88, r9_1);\n}\n\n"
        },
        {
            "funcName": "sub_4058f0",
            "funcStartAddr": "0x4058f0",
            "funcEndAddr": "0x405964",
            "decompiledFuncCode": "int64_t sub_4058f0()\n{\n    __printf_chk(1, dcgettext(nullptr, \"\\nReport bugs to: %s\\n\", 5), \"bug-coreutils@gnu.org\");\n    __printf_chk(1, dcgettext(nullptr, \"%s home page: <%s>\\n\", 5), \"GNU coreutils\", \"https://www.gnu.org/software/cor\u2026\");\n    /* tailcall */\n    return fputs_unlocked(dcgettext(nullptr, \"General help using GNU software:\u2026\", 5), stdout);\n}\n\n"
        },
        {
            "funcName": "sub_405970",
            "funcStartAddr": "0x405970",
            "funcEndAddr": "0x40598a",
            "decompiledFuncCode": "int64_t sub_405970(uint64_t arg1)\n{\n    int64_t rax = malloc(arg1);\n    if ((rax == 0 && arg1 != 0))\n    {\n        sub_405bc0();\n        /* no return */\n    }\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_4059d0",
            "funcStartAddr": "0x4059d0",
            "funcEndAddr": "0x405a06",
            "decompiledFuncCode": "int64_t sub_4059d0(int64_t arg1, uint64_t arg2)\n{\n    if ((arg2 == 0 && arg1 != 0))\n    {\n        free(arg1);\n        return 0;\n    }\n    int64_t rax = realloc(arg1, arg2);\n    if ((rax == 0 && arg2 != 0))\n    {\n        sub_405bc0();\n        /* no return */\n    }\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_405b1a",
            "funcStartAddr": "0x405b1a",
            "funcEndAddr": "0x405b20",
            "decompiledFuncCode": "int64_t sub_405b1a() __noreturn\n{\n    sub_405bc0();\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_405b20",
            "funcStartAddr": "0x405b20",
            "funcEndAddr": "0x405b37",
            "decompiledFuncCode": "int64_t sub_405b20(uint64_t arg1)\n{\n    /* tailcall */\n    return memset(sub_405970(arg1), 0, arg1);\n}\n\n"
        },
        {
            "funcName": "sub_405b40",
            "funcStartAddr": "0x405b40",
            "funcEndAddr": "0x405b6e",
            "decompiledFuncCode": "int64_t sub_405b40(uint64_t arg1, uint64_t arg2)\n{\n    int64_t rax;\n    bool rdx;\n    rdx = HIGHD((arg1 * arg2));\n    rax = LOWD((arg1 * arg2));\n    if ((rax >= 0 && ((arg1 * arg2) >> 0x40) != 0 == 0))\n    {\n        int64_t rax_1 = calloc(arg1, arg2);\n        if (rax_1 != 0)\n        {\n            return rax_1;\n        }\n    }\n    sub_405bc0();\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_405b70",
            "funcStartAddr": "0x405b70",
            "funcEndAddr": "0x405b98",
            "decompiledFuncCode": "int64_t sub_405b70(int64_t arg1, uint64_t arg2)\n{\n    /* tailcall */\n    return memcpy(sub_405970(arg2), arg1, arg2);\n}\n\n"
        },
        {
            "funcName": "sub_405ba0",
            "funcStartAddr": "0x405ba0",
            "funcEndAddr": "0x405bb3",
            "decompiledFuncCode": "int64_t sub_405ba0(char* arg1)\n{\n    /* tailcall */\n    return sub_405b70(arg1, (strlen(arg1) + 1));\n}\n\n"
        },
        {
            "funcName": "sub_405bc0",
            "funcStartAddr": "0x405bc0",
            "funcEndAddr": "0x405bf1",
            "decompiledFuncCode": "int64_t sub_405bc0() __noreturn\n{\n    error(data_60b240, 0, \"%s\", dcgettext(nullptr, \"memory exhausted\", 5));\n    abort();\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_405c00",
            "funcStartAddr": "0x405c00",
            "funcEndAddr": "0x405c18",
            "decompiledFuncCode": "char* sub_405c00(char* arg1)\n{\n    char* rax = strndup(arg1);\n    if (rax == 0)\n    {\n        sub_405bc0();\n        /* no return */\n    }\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_405c20",
            "funcStartAddr": "0x405c20",
            "funcEndAddr": "0x405c9b",
            "decompiledFuncCode": "int64_t sub_405c20(FILE* arg1)\n{\n    FILE* rdi = arg1;\n    if (fileno(arg1) >= 0)\n    {\n        int32_t rax_1 = __freading(rdi);\n        off64_t rax_6;\n        if (rax_1 != 0)\n        {\n            rax_6 = lseek(fileno(arg1), 0, 1);\n        }\n        if (((rax_1 == 0 || (rax_1 != 0 && rax_6 != -1)) && sub_405ca0(arg1) != 0))\n        {\n            int32_t* rax_3 = __errno_location();\n            int32_t r12 = *rax_3;\n            int64_t rax_4 = fclose(arg1);\n            if (r12 != 0)\n            {\n                *rax_3 = r12;\n                rax_4 = 0xffffffff;\n            }\n            return rax_4;\n        }\n        rdi = arg1;\n    }\n    /* tailcall */\n    return fclose(rdi);\n}\n\n"
        },
        {
            "funcName": "sub_405ca0",
            "funcStartAddr": "0x405ca0",
            "funcEndAddr": "0x405ce0",
            "decompiledFuncCode": "int64_t sub_405ca0(FILE* arg1)\n{\n    int32_t* rbx = arg1;\n    if ((arg1 != 0 && (__freading(arg1) != 0 && (*rbx & 0x100) != 0)))\n    {\n        sub_405d10(rbx, 0, 1);\n        /* tailcall */\n        return fflush(rbx);\n    }\n    /* tailcall */\n    return fflush(rbx);\n}\n\n"
        },
        {
            "funcName": "sub_405ce0",
            "funcStartAddr": "0x405ce0",
            "funcEndAddr": "0x405d03",
            "decompiledFuncCode": "int64_t sub_405ce0(void* arg1, int64_t* arg2)\n{\n    if (*(arg1 + 0x28) <= *(arg1 + 0x20))\n    {\n        int64_t rax = *(arg1 + 8);\n        int64_t rdx_1 = *(arg1 + 0x10);\n        int64_t rdx_2 = (rdx_1 - rax);\n        if (rdx_1 != rax)\n        {\n            *arg2 = rdx_2;\n            return rax;\n        }\n    }\n    return 0;\n}\n\n"
        },
        {
            "funcName": "sub_405d10",
            "funcStartAddr": "0x405d10",
            "funcEndAddr": "0x405d67",
            "decompiledFuncCode": "off64_t sub_405d10(FILE* arg1, off_t arg2, int32_t arg3)\n{\n    if ((arg1->_IO_read_end == arg1->_IO_read_ptr && (arg1->_IO_write_ptr == arg1->_IO_write_base && arg1->_IO_save_base == 0)))\n    {\n        off64_t rax_3 = lseek(fileno(arg1), arg2, arg3);\n        if (rax_3 != -1)\n        {\n            arg1->_flags = (arg1->_flags & 0xffffffef);\n            arg1->_offset = rax_3;\n            rax_3 = 0;\n        }\n        return rax_3;\n    }\n    /* tailcall */\n    return fseeko(arg1, arg2, arg3);\n}\n\n"
        },
        {
            "funcName": "sub_405d70",
            "funcStartAddr": "0x405d70",
            "funcEndAddr": "0x405e4f",
            "decompiledFuncCode": "uint64_t sub_405d70(int64_t arg1, int32_t* arg2)\n{\n    int64_t r11 = (arg1 + 8);\n    int32_t r12 = arg2[0xb];\n    int32_t rbp = *arg2;\n    int64_t rbx = arg2[0xc];\n    int32_t r9 = r12;\n    int32_t r10 = rbp;\n    int32_t r8 = rbx;\n    while (r10 > r8)\n    {\n        int32_t r14_2;\n        while (r9 < r8)\n        {\n            r14_2 = (r10 - r8);\n            int32_t rdx_2 = (r8 - r9);\n            if (r14_2 <= rdx_2)\n            {\n                break;\n            }\n            int64_t rcx_1 = r9;\n            r10 = (r10 - rdx_2);\n            int64_t* rax_1 = (arg1 + (rcx_1 << 3));\n            int64_t r13_1 = (r11 + (((rdx_2 - 1) + rcx_1) << 3));\n            int64_t rdx_6 = (r10 - rcx_1);\n            do\n            {\n                int64_t rcx_2 = *rax_1;\n                *rax_1 = rax_1[rdx_6];\n                rax_1[rdx_6] = rcx_2;\n                rax_1 = &rax_1[1];\n            } while (r13_1 != rax_1);\n            if (r10 <= r8)\n            {\n                break;\n            }\n        }\n        if (r9 >= r8)\n        {\n            break;\n        }\n        int64_t rdx_7 = r9;\n        int64_t* rax_4 = (arg1 + (rdx_7 << 3));\n        int64_t r13_2 = (r11 + (((r14_2 - 1) + rdx_7) << 3));\n        int64_t rcx_6 = (rbx - rdx_7);\n        do\n        {\n            int64_t rcx_7 = *rax_4;\n            *rax_4 = rax_4[rcx_6];\n            rax_4[rcx_6] = rcx_7;\n            rax_4 = &rax_4[1];\n        } while (rax_4 != r13_2);\n        r9 = (r9 + r14_2);\n    }\n    arg2[0xc] = rbp;\n    uint64_t rax_3 = (rbp - r8);\n    arg2[0xb] = (r12 + rax_3);\n    return rax_3;\n}\n\n"
        },
        {
            "funcName": "sub_405e50",
            "funcStartAddr": "0x405e50",
            "funcEndAddr": "0x40646c",
            "decompiledFuncCode": "uint64_t sub_405e50(int32_t arg1, int64_t* arg2, char* arg3, int64_t* arg4, \n    int32_t* arg5, int32_t arg6, int32_t* arg7, int32_t arg8, int64_t arg9)\n{\n    char* r14 = *(arg7 + 0x20);\n    char rax_1 = *r14;\n    char* rbp = r14;\n    uint64_t r13_1;\n    if ((rax_1 == 0x3d || rax_1 == 0))\n    {\n        r13_1 = 0;\n    }\n    if ((rax_1 != 0x3d && rax_1 != 0))\n    {\n        while (true)\n        {\n            rbp = &rbp[1];\n            char rax_2 = *rbp;\n            if (rax_2 == 0)\n            {\n                break;\n            }\n            if (rax_2 == 0x3d)\n            {\n                break;\n            }\n            if ((!(rax_2 != 0 && rax_2 != 0x3d)))\n            {\n                /* nop */\n            }\n        }\n        r13_1 = (rbp - r14);\n    }\n    int64_t* rbx = arg4;\n    int64_t r12 = 0;\n    char* rax_3 = *rbx;\n    char* r15 = rax_3;\n    uint64_t rax_14;\n    if (rax_3 != 0)\n    {\n        int32_t rax_4;\n        uint64_t rax_5;\n        int32_t r8;\n        while (true)\n        {\n            rax_4 = strncmp(r15, r14, r13_1);\n            if (rax_4 == 0)\n            {\n                rax_5 = strlen(r15);\n                if (rax_5 == r13_1)\n                {\n                    break;\n                }\n            }\n            rbx = &rbx[4];\n            r15 = *rbx;\n            r8 = (r12 + 1);\n            if (r15 == 0)\n            {\n                break;\n            }\n            r12 = r8;\n        }\n        if ((rax_4 == 0 && rax_5 == r13_1))\n        {\n            goto label_406080;\n        }\n        rbx = nullptr;\n        int32_t var_44_1 = 0xffffffff;\n        char* rdi_2 = rax_3;\n        int64_t r15_1 = 0;\n        int32_t var_50_1 = 0;\n        int32_t var_40_1 = 0;\n        char* var_70_1 = nullptr;\n        int64_t* rbp_1 = arg4;\n        do\n        {\n            if (strncmp(rdi_2, r14, r13_1) == 0)\n            {\n                if (rbx == 0)\n                {\n                    var_44_1 = r15_1;\n                    rbx = rbp_1;\n                }\n                else if (((((arg6 != 0 || (arg6 == 0 && rbx[1] != rbp_1[1])) || ((arg6 == 0 && rbx[1] == rbp_1[1]) && rbx[2] != rbp_1[2])) || (((arg6 == 0 && rbx[1] == rbp_1[1]) && rbx[2] == rbp_1[2]) && rbx[3] != rbp_1[3])) && var_50_1 == 0))\n                {\n                    if (arg8 == 0)\n                    {\n                        var_50_1 = 1;\n                        if (var_70_1 != 0)\n                        {\n                            goto label_405fa6;\n                        }\n                    }\n                    else\n                    {\n                        if (var_70_1 != 0)\n                        {\n                            goto label_405fa6;\n                        }\n                        char* rax_36 = calloc(r8, 1);\n                        var_70_1 = rax_36;\n                        if (rax_36 == 0)\n                        {\n                            var_50_1 = 1;\n                        }\n                        else\n                        {\n                            var_40_1 = 1;\n                            var_70_1[var_44_1] = 1;\n                        label_405fa6:\n                            var_70_1[r15_1] = 1;\n                        }\n                    }\n                }\n            }\n            rbp_1 = &rbp_1[4];\n            rdi_2 = *rbp_1;\n            r15_1 = (r15_1 + 1);\n        } while (rdi_2 != 0);\n        if (((var_70_1 == 0 && var_50_1 == 0) && rbx != 0))\n        {\n            r12 = var_44_1;\n        label_406080:\n            int32_t rdx_3 = *arg7;\n            *(arg7 + 0x20) = 0;\n            int32_t rax_18 = (rdx_3 + 1);\n            *arg7 = rax_18;\n            int32_t rcx_4 = rbx[1];\n            if (*rbp != 0)\n            {\n                if (rcx_4 != 0)\n                {\n                    *(arg7 + 0x10) = &rbp[1];\n                }\n                else\n                {\n                    if (arg8 != 0)\n                    {\n                        __fprintf_chk(stderr, 1, dcgettext(nullptr, \"%s: option '%s%s' doesn't allow \u2026\", 5), *arg2, arg9, *rbx, arg4);\n                    }\n                    arg7[2] = rbx[3];\n                    rax_14 = 0x3f;\n                }\n            }\n            if ((rcx_4 == 1 && *rbp == 0))\n            {\n                if (rax_18 < arg1)\n                {\n                    *arg7 = (rdx_3 + 2);\n                    *(arg7 + 0x10) = arg2[rax_18];\n                }\n                else\n                {\n                    if (arg8 != 0)\n                    {\n                        __fprintf_chk(stderr, 1, dcgettext(nullptr, \"%s: option '%s%s' requires an ar\u2026\", 5), *arg2, arg9, *rbx, arg4);\n                    }\n                    arg7[2] = rbx[3];\n                    char* rax_43;\n                    rax_43 = *arg3 != 0x3a;\n                    rax_14 = ((rax_43 * 5) + 0x3a);\n                }\n            }\n            if ((((*rbp != 0 && rcx_4 != 0) || ((*rbp == 0 && rcx_4 == 1) && rax_18 < arg1)) || (*rbp == 0 && rcx_4 != 1)))\n            {\n                if (arg5 == 0)\n                {\n                    goto label_4060ae;\n                }\n                *arg5 = r12;\n            label_4060ae:\n                int32_t* rdx_4 = rbx[2];\n                rax_14 = rbx[3];\n                if (rdx_4 != 0)\n                {\n                    *rdx_4 = rax_14;\n                    rax_14 = 0;\n                }\n            }\n            goto label_4060cc;\n        }\n        if ((var_70_1 != 0 || (var_70_1 == 0 && var_50_1 != 0)))\n        {\n            if (arg8 != 0)\n            {\n                if (var_50_1 != 0)\n                {\n                    __fprintf_chk(stderr, 1, dcgettext(nullptr, \"%s: option '%s%s' is ambiguous\\n\", 5), *arg2, arg9, r14, arg4);\n                    r14 = *(arg7 + 0x20);\n                }\n                else\n                {\n                    flockfile(stderr);\n                    __fprintf_chk(stderr, 1, dcgettext(nullptr, \"%s: option '%s%s' is ambiguous; \u2026\", 5), *arg2, arg9, *(arg7 + 0x20), arg4);\n                    uint64_t* const rdi_13 = stderr;\n                    int64_t* rbx_4 = arg4;\n                    char* rbp_5 = var_70_1;\n                    void* r12_2 = &var_70_1[(r12 + 1)];\n                    do\n                    {\n                        if (*rbp_5 != 0)\n                        {\n                            __fprintf_chk(rdi_13, 1, \" '%s%s'\", arg9, *rbx_4);\n                            rdi_13 = stderr;\n                        }\n                        rbp_5 = &rbp_5[1];\n                        rbx_4 = &rbx_4[4];\n                    } while (r12_2 != rbp_5);\n                    fputc(0xa, stderr);\n                    funlockfile(stderr);\n                    r14 = *(arg7 + 0x20);\n                }\n            }\n            if (var_40_1 != 0)\n            {\n                free(var_70_1);\n            }\n            *(arg7 + 0x20) = &r14[strlen(r14)];\n            *arg7 = (*arg7 + 1);\n            arg7[2] = 0;\n            rax_14 = 0x3f;\n        label_4060cc:\n            return rax_14;\n        }\n    }\n    if ((arg6 != 0 && *(arg2[*arg7] + 1) != 0x2d))\n    {\n        rax_14 = 0xffffffff;\n        if (strchr(arg3, rax_1) != 0)\n        {\n            goto label_4060cc;\n        }\n    }\n    if (arg8 == 0)\n    {\n        goto label_40603e;\n    }\n    __fprintf_chk(stderr, 1, dcgettext(nullptr, \"%s: unrecognized option '%s%s'\\n\", 5), *arg2, arg9, r14, arg4);\nlabel_40603e:\n    *(arg7 + 0x20) = 0;\n    *arg7 = (*arg7 + 1);\n    arg7[2] = 0;\n    return 0x3f;\n}\n\n"
        },
        {
            "funcName": "sub_406470",
            "funcStartAddr": "0x406470",
            "funcEndAddr": "0x406a36",
            "decompiledFuncCode": "uint64_t sub_406470(int32_t arg1, int64_t* arg2, char* arg3, int64_t* arg4, \n    int32_t* arg5, int32_t arg6, int32_t* arg7, int32_t arg8)\n{\n    int32_t r13 = arg7[1];\n    if (arg1 <= 0)\n    {\n        goto label_4066ac;\n    }\n    int32_t rax_1 = *arg7;\n    int32_t rbp_1 = arg1;\n    char* r15_1 = arg3;\n    *(arg7 + 0x10) = 0;\n    if (rax_1 == 0)\n    {\n        *arg7 = 1;\n        rax_1 = 1;\n    }\n    uint32_t rax_3;\n    char* rdx;\n    if ((rax_1 == 0 || (rax_1 != 0 && arg7[6] == 0)))\n    {\n        arg7[0xc] = rax_1;\n        arg7[0xb] = rax_1;\n        *(arg7 + 0x20) = 0;\n        char rax_2 = *r15_1;\n        if (rax_2 == 0x2d)\n        {\n            arg7[0xa] = 2;\n            r15_1 = &r15_1[1];\n            rdx = nullptr;\n        }\n        else if (rax_2 == 0x2b)\n        {\n            arg7[0xa] = 0;\n            r15_1 = &r15_1[1];\n            rdx = nullptr;\n        }\n        else\n        {\n            rdx = nullptr;\n            char* rax_16;\n            if (arg8 == 0)\n            {\n                rax_16 = getenv(\"POSIXLY_CORRECT\");\n                if (rax_16 == 0)\n                {\n                    arg7[0xa] = 1;\n                    rdx = *(arg7 + 0x20);\n                }\n                else\n                {\n                    rdx = *(arg7 + 0x20);\n                }\n            }\n            if (((arg8 == 0 && rax_16 != 0) || arg8 != 0))\n            {\n                arg7[0xa] = 0;\n            }\n        }\n        arg7[6] = 1;\n        rax_3 = *r15_1;\n    }\n    if ((rax_1 != 0 && arg7[6] != 0))\n    {\n        rax_3 = *arg3;\n        rdx = *(arg7 + 0x20);\n    }\n    if (((((rax_1 != 0 && arg7[6] != 0) && ((rax_3 - 0x2b) & 0xfd) != 0) || rax_1 == 0) || (rax_1 != 0 && arg7[6] == 0)))\n    {\n        if (rax_3 == 0x3a)\n        {\n            r13 = 0;\n        }\n        if (rdx == 0)\n        {\n            goto label_406538;\n        }\n    }\n    if (((rax_1 != 0 && arg7[6] != 0) && ((rax_3 - 0x2b) & 0xfd) == 0))\n    {\n        char rax_4 = r15_1[1];\n        r15_1 = &r15_1[1];\n        if (rax_4 == 0x3a)\n        {\n            r13 = 0;\n        }\n        if (rdx == 0)\n        {\n        label_406538:\n            int32_t rax_5 = *arg7;\n            if (arg7[0xc] > rax_5)\n            {\n                arg7[0xc] = rax_5;\n            }\n            if (rax_5 < arg7[0xb])\n            {\n                arg7[0xb] = rax_5;\n            }\n            if (arg7[0xa] == 1)\n            {\n                int32_t rdx_5 = arg7[0xc];\n                if (arg7[0xb] == rdx_5)\n                {\n                    if (rax_5 != rdx_5)\n                    {\n                        arg7[0xb] = rax_5;\n                        rdx_5 = rax_5;\n                    }\n                }\n                else if (rax_5 != rdx_5)\n                {\n                    sub_405d70(arg2, arg7);\n                    rdx_5 = *arg7;\n                }\n                char* rcx_8;\n                if (rbp_1 > rdx_5)\n                {\n                    int64_t rax_10 = rdx_5;\n                    do\n                    {\n                        rcx_8 = arg2[rax_10];\n                        int32_t rsi_5 = rax_10;\n                        rdx_5 = rax_10;\n                        if ((*rcx_8 == 0x2d && rcx_8[1] != 0))\n                        {\n                            break;\n                        }\n                        rdx_5 = (rsi_5 + 1);\n                        rax_10 = (rax_10 + 1);\n                        *arg7 = rdx_5;\n                    } while (rbp_1 > rax_10);\n                    if ((*rcx_8 == 0x2d && rcx_8[1] != 0))\n                    {\n                        rax_5 = *arg7;\n                    }\n                }\n                if ((rbp_1 <= rdx_5 || (rbp_1 > rdx_5 && (!(*rcx_8 == 0x2d && rcx_8[1] != 0)))))\n                {\n                    rax_5 = rdx_5;\n                }\n                arg7[0xc] = rdx_5;\n            }\n            bool c_1 = rbp_1 < rax_5;\n            bool z_1 = rbp_1 == rax_5;\n            int64_t rcx_3;\n            int32_t rdx_2;\n            char* r14_1;\n            if (z_1)\n            {\n                rbp_1 = arg7[0xc];\n                rdx_2 = arg7[0xb];\n            }\n            else\n            {\n                rcx_3 = 3;\n                void* const rdi = &data_4094e9;\n                r14_1 = arg2[rax_5];\n                char* rsi_1 = r14_1;\n                while (rcx_3 != 0)\n                {\n                    char temp0_1 = *rsi_1;\n                    char temp1_1 = *rdi;\n                    c_1 = temp0_1 < temp1_1;\n                    z_1 = temp0_1 == temp1_1;\n                    rsi_1 = &rsi_1[1];\n                    rdi = (rdi + 1);\n                    rcx_3 = (rcx_3 - 1);\n                    if ((!z_1))\n                    {\n                        break;\n                    }\n                }\n                rcx_3 = ((!z_1) && (!c_1));\n                rcx_3 = (rcx_3 - 0);\n                if (rcx_3 == 0)\n                {\n                    rdx_2 = arg7[0xb];\n                    int32_t rcx_4 = arg7[0xc];\n                    int32_t rax_6 = (rax_5 + 1);\n                    *arg7 = rax_6;\n                    if (rdx_2 == rcx_4)\n                    {\n                        arg7[0xb] = rax_6;\n                        rdx_2 = rax_6;\n                    }\n                    else if (rax_6 != rcx_4)\n                    {\n                        sub_405d70(arg2, arg7);\n                        rdx_2 = arg7[0xb];\n                    }\n                    arg7[0xc] = rbp_1;\n                    *arg7 = rbp_1;\n                }\n            }\n            int32_t r14_2;\n            if ((z_1 || ((!z_1) && rcx_3 == 0)))\n            {\n                if (rdx_2 == rbp_1)\n                {\n                    goto label_4066ac;\n                }\n                *arg7 = rdx_2;\n            label_4066ac:\n                r14_2 = -1;\n            }\n            if (((!z_1) && rcx_3 != 0))\n            {\n                char rcx_9;\n                if (*r14_1 == 0x2d)\n                {\n                    rcx_9 = r14_1[1];\n                    if (rcx_9 != 0)\n                    {\n                        if (arg4 == 0)\n                        {\n                            goto label_4067b0;\n                        }\n                        int32_t* var_88_2;\n                        int32_t var_80_2;\n                        void* const var_78_1;\n                        if (rcx_9 == 0x2d)\n                        {\n                            *(arg7 + 0x20) = &r14_1[2];\n                            var_78_1 = &data_4094e9;\n                            var_80_2 = r13;\n                            var_88_2 = arg7;\n                            goto label_406820;\n                        }\n                        if (arg6 == 0)\n                        {\n                            goto label_4067b0;\n                        }\n                        if (r14_1[2] == 0)\n                        {\n                            if (strchr(r15_1, rcx_9) != 0)\n                            {\n                                goto label_4067b0;\n                            }\n                            goto label_406771;\n                        }\n                    label_406771:\n                        *(arg7 + 0x20) = &r14_1[1];\n                        int32_t rax_12 = sub_405e50(rbp_1, arg2, r15_1, arg4, arg5, arg6, arg7, r13, &data_4094ea);\n                        r14_2 = rax_12;\n                        if (rax_12 == 0xffffffff)\n                        {\n                            r14_1 = arg2[*arg7];\n                        label_4067b0:\n                            rdx = &r14_1[1];\n                        label_4065f1:\n                            *(arg7 + 0x20) = &rdx[1];\n                            r14_2 = *rdx;\n                            int32_t var_4c;\n                            var_4c = r14_2;\n                            char* rax_7 = strchr(r15_1, r14_2);\n                            char rcx_5 = var_4c;\n                            void* r8_1 = &rdx[1];\n                            if (rdx[1] == 0)\n                            {\n                                *arg7 = (*arg7 + 1);\n                            }\n                            if (((rcx_5 - 0x3a) > 1 && rax_7 != 0))\n                            {\n                                char rcx_7 = rax_7[1];\n                                if (((*rax_7 == 0x57 && arg4 != 0) && rcx_7 == 0x3b))\n                                {\n                                    if (rdx[1] != 0)\n                                    {\n                                        goto label_4067ee;\n                                    }\n                                    int64_t rax_14 = *arg7;\n                                    if (rax_14 == rbp_1)\n                                    {\n                                        if (r13 != 0)\n                                        {\n                                            int64_t rbp_4 = *arg2;\n                                            __fprintf_chk(stderr, 1, dcgettext(nullptr, \"%s: option requires an argument \u2026\", 5), rbp_4, r14_2);\n                                        }\n                                        arg7[2] = r14_2;\n                                        int64_t r14_4;\n                                        r14_4 = *r15_1 != 0x3a;\n                                        r14_2 = ((r14_4 * 5) + 0x3a);\n                                    }\n                                    else\n                                    {\n                                        r8_1 = arg2[rax_14];\n                                    label_4067ee:\n                                        *(arg7 + 0x20) = r8_1;\n                                        arg6 = 0;\n                                        *(arg7 + 0x10) = 0;\n                                        var_78_1 = &data_409508;\n                                        var_80_2 = r13;\n                                        var_88_2 = arg7;\n                                    label_406820:\n                                        r14_2 = sub_405e50(rbp_1, arg2, r15_1, arg4, arg5, arg6, var_88_2, var_80_2, var_78_1);\n                                    }\n                                }\n                                if ((((*rax_7 != 0x57 || (*rax_7 == 0x57 && arg4 == 0)) || ((*rax_7 == 0x57 && arg4 != 0) && rcx_7 != 0x3b)) && rcx_7 == 0x3a))\n                                {\n                                    char rdx_9 = rdx[1];\n                                    if (rax_7[2] != 0x3a)\n                                    {\n                                        int64_t rax_17 = *arg7;\n                                        if (rdx_9 != 0)\n                                        {\n                                            *(arg7 + 0x10) = r8_1;\n                                            *arg7 = (rax_17 + 1);\n                                        }\n                                        else if (rbp_1 != rax_17)\n                                        {\n                                            int64_t rax_18 = arg2[rax_17];\n                                            *arg7 = (rax_17 + 1);\n                                            *(arg7 + 0x10) = rax_18;\n                                        }\n                                        else\n                                        {\n                                            if (r13 != 0)\n                                            {\n                                                int64_t rbp_3 = *arg2;\n                                                __fprintf_chk(stderr, 1, dcgettext(nullptr, \"%s: option requires an argument \u2026\", 5), rbp_3, r14_2);\n                                            }\n                                            arg7[2] = r14_2;\n                                            int64_t r14_3;\n                                            r14_3 = *r15_1 != 0x3a;\n                                            r14_2 = ((r14_3 * 5) + 0x3a);\n                                        }\n                                    }\n                                    else if (rdx_9 == 0)\n                                    {\n                                        *(arg7 + 0x10) = 0;\n                                    }\n                                    else\n                                    {\n                                        *(arg7 + 0x10) = r8_1;\n                                        *arg7 = (*arg7 + 1);\n                                    }\n                                    *(arg7 + 0x20) = 0;\n                                }\n                            }\n                            if (((rcx_5 - 0x3a) <= 1 || ((rcx_5 - 0x3a) > 1 && rax_7 == 0)))\n                            {\n                                if (r13 == 0)\n                                {\n                                    goto label_4068dd;\n                                }\n                                int64_t rbp_2 = *arg2;\n                                __fprintf_chk(stderr, 1, dcgettext(nullptr, \"%s: invalid option -- '%c'\\n\", 5), rbp_2, r14_2);\n                            label_4068dd:\n                                arg7[2] = r14_2;\n                                r14_2 = 0x3f;\n                            }\n                        }\n                    }\n                }\n                if ((*r14_1 != 0x2d || (*r14_1 == 0x2d && rcx_9 == 0)))\n                {\n                    if (arg7[0xa] == 0)\n                    {\n                        goto label_4066ac;\n                    }\n                    *(arg7 + 0x10) = r14_1;\n                    r14_2 = 1;\n                    *arg7 = (rax_5 + 1);\n                }\n            }\n            if ((((z_1 || ((!z_1) && rcx_3 == 0)) && rdx_2 != rbp_1) || ((!z_1) && rcx_3 != 0)))\n            {\n                return r14_2;\n            }\n        }\n    }\n    if (((((((rax_1 != 0 && arg7[6] != 0) && ((rax_3 - 0x2b) & 0xfd) != 0) || rax_1 == 0) || (rax_1 != 0 && arg7[6] == 0)) && rdx != 0) || ((rax_1 != 0 && arg7[6] != 0) && ((rax_3 - 0x2b) & 0xfd) == 0)))\n    {\n        if (*rdx == 0)\n        {\n            goto label_406538;\n        }\n        goto label_4065f1;\n    }\n}\n\n"
        },
        {
            "funcName": "sub_406aa0",
            "funcStartAddr": "0x406aa0",
            "funcEndAddr": "0x406ab8",
            "decompiledFuncCode": "uint64_t sub_406aa0(int32_t arg1, int64_t* arg2, char* arg3)\n{\n    return _getopt_internal(arg1, arg2, arg3, nullptr, nullptr, 0, 1);\n}\n\n"
        },
        {
            "funcName": "sub_406b40",
            "funcStartAddr": "0x406b40",
            "funcEndAddr": "0x406bba",
            "decompiledFuncCode": "uint64_t sub_406b40(uint32_t* arg1, char* arg2, uint64_t arg3, mbstate_t* arg4)\n{\n    uint64_t rbx_1;\n    char* rbp_1;\n    uint32_t* r12_1;\n    if (arg2 == 0)\n    {\n        arg3 = 1;\n        rbp_1 = &data_4094ec[0x1b];\n    }\n    else\n    {\n        rbx_1 = -2;\n        if (arg3 != 0)\n        {\n            r12_1 = arg1;\n            rbp_1 = arg2;\n            if (arg1 != 0)\n            {\n                goto label_406b6a;\n            }\n        }\n    }\n    if ((arg2 == 0 || (arg2 != 0 && arg3 != 0)))\n    {\n        void var_1c;\n        r12_1 = &var_1c;\n    label_406b6a:\n        uint64_t rax_1 = mbrtowc(r12_1, rbp_1, arg3, arg4);\n        rbx_1 = rax_1;\n        if ((rax_1 > -3 && sub_406e80() == 0))\n        {\n            rbx_1 = 1;\n            *r12_1 = *rbp_1;\n        }\n    }\n    return rbx_1;\n}\n\n"
        },
        {
            "funcName": "sub_406bc0",
            "funcStartAddr": "0x406bc0",
            "funcEndAddr": "0x406cc4",
            "decompiledFuncCode": "char* sub_406bc0(char* arg1, int32_t arg2, int64_t arg3)\n{\n    char r8 = arg2;\n    if (arg3 != 0)\n    {\n        if ((arg1 & 7) != 0)\n        {\n            if (arg2 == *arg1)\n            {\n            label_406cc0:\n                return arg1;\n            }\n            do\n            {\n                arg1 = &arg1[1];\n                int64_t temp0_1 = arg3;\n                arg3 = (arg3 - 1);\n                if (temp0_1 == 1)\n                {\n                    return 0;\n                }\n                if ((arg1 & 7) == 0)\n                {\n                    break;\n                }\n            } while (*arg1 != r8);\n            if ((arg1 & 7) != 0)\n            {\n                goto label_406cc0;\n            }\n        }\n        int64_t r9_5 = ((arg2 << 8) | arg2);\n        int64_t r9_6 = (r9_5 | (r9_5 << 0x10));\n        int64_t r9_7 = (r9_6 | (r9_6 << 0x20));\n        int64_t rax_8;\n        if (arg3 > 7)\n        {\n            rax_8 = (*arg1 ^ r9_7);\n            if ((((!rax_8) & (rax_8 - 0x101010101010101)) & 0x8080808080808080) == 0)\n            {\n                int64_t rax_12;\n                do\n                {\n                    arg3 = (arg3 - 8);\n                    arg1 = &arg1[8];\n                    if (arg3 <= 7)\n                    {\n                        break;\n                    }\n                    rax_12 = (*arg1 ^ r9_7);\n                } while ((((!rax_12) & (rax_12 - 0x101010101010101)) & 0x8080808080808080) == 0);\n            }\n        }\n        if ((((arg3 <= 7 || (arg3 > 7 && (((!rax_8) & (rax_8 - 0x101010101010101)) & 0x8080808080808080) != 0)) || (((arg3 > 7 && (((!rax_8) & (rax_8 - 0x101010101010101)) & 0x8080808080808080) == 0) && arg3 <= 7) && arg3 != 0)) || ((arg3 > 7 && (((!rax_8) & (rax_8 - 0x101010101010101)) & 0x8080808080808080) == 0) && arg3 > 7)))\n        {\n            if (arg2 == *arg1)\n            {\n                goto label_406cc0;\n            }\n            char* rcx_3 = &arg1[1];\n            void* rdi = &arg1[arg3];\n            while (true)\n            {\n                char* rax_15 = rcx_3;\n                if (rcx_3 == rdi)\n                {\n                    return 0;\n                }\n                rcx_3 = &rcx_3[1];\n                if (rcx_3[-1] == r8)\n                {\n                    return rax_15;\n                }\n            }\n        }\n    }\n    return 0;\n}\n\n"
        },
        {
            "funcName": "sub_406cd0",
            "funcStartAddr": "0x406cd0",
            "funcEndAddr": "0x406d2d",
            "decompiledFuncCode": "uint64_t sub_406cd0(FILE* arg1)\n{\n    int32_t* rbp = arg1;\n    uint64_t rax = __fpending(arg1);\n    int32_t rbx_1 = (*rbp & 0x20);\n    uint64_t rax_1 = sub_405c20(rbp);\n    if ((rbx_1 != 0 && rax_1 == 0))\n    {\n        *__errno_location() = 0;\n        rax_1 = 0xffffffff;\n    }\n    if (((rbx_1 != 0 && rax_1 != 0) || ((rbx_1 == 0 && rax_1 != 0) && rax != 0)))\n    {\n        rax_1 = 0xffffffff;\n    }\n    if (((rbx_1 == 0 && rax_1 != 0) && rax == 0))\n    {\n        int32_t* rax_2;\n        rax_2 = *__errno_location() != 9;\n        rax_1 = (-rax_2);\n    }\n    return rax_1;\n}\n\n"
        },
        {
            "funcName": "sub_406d30",
            "funcStartAddr": "0x406d30",
            "funcEndAddr": "0x406e80",
            "decompiledFuncCode": "uint64_t sub_406d30(int32_t* arg1, off_t arg2)\n{\n    if (arg2 == 0)\n    {\n        return 0;\n    }\n    off_t rbx = arg2;\n    int64_t rax = sub_407450(arg1);\n    int64_t rbp = rax;\n    off_t var_1028;\n    if (rax != 0)\n    {\n        while (true)\n        {\n            int64_t rax_1 = sub_405ce0(arg1, &var_1028);\n            off_t rax_2;\n            off_t temp3_1;\n            if (rax_1 != 0)\n            {\n                rax_2 = var_1028;\n                if (rax_2 != 0)\n                {\n                    if (rax_2 > rbx)\n                    {\n                        rax_2 = rbx;\n                    }\n                    *(arg1 + 8) = (*(arg1 + 8) + rax_2);\n                    temp3_1 = rbx;\n                    rbx = (rbx - rax_2);\n                    if (temp3_1 != rax_2)\n                    {\n                        int64_t temp4_1 = rbp;\n                        rbp = (rbp - rax_2);\n                        if (temp4_1 == rax_2)\n                        {\n                            break;\n                        }\n                    }\n                }\n            }\n            if (((rax_1 == 0 || (rax_1 != 0 && rax_2 == 0)) || ((rax_1 != 0 && rax_2 != 0) && temp3_1 != rax_2)))\n            {\n                if (fgetc(arg1) == 0xffffffff)\n                {\n                    goto label_406dc6;\n                }\n                off_t temp0_1 = rbx;\n                rbx = (rbx - 1);\n                if (temp0_1 != 1)\n                {\n                    int64_t temp2_1 = rbp;\n                    rbp = (rbp - 1);\n                    if (temp2_1 == 1)\n                    {\n                        break;\n                    }\n                    continue;\n                }\n            }\n            return 0;\n        }\n    }\n    int32_t rax_8 = fileno(arg1);\n    uint64_t rax_6;\n    off64_t rax_10;\n    if (rax_8 >= 0)\n    {\n        rax_10 = lseek(rax_8, 0, 1);\n        if (rax_10 >= 0)\n        {\n            rax_6 = sub_405d10(arg1, rbx, 1);\n        }\n    }\n    if ((rax_8 < 0 || (rax_8 >= 0 && rax_10 < 0)))\n    {\n        while (true)\n        {\n            uint64_t rbp_1 = 0x1000;\n            FILE* r8_1 = arg1;\n            off_t* rdi_4 = &var_1028;\n            if (rbx <= 0x1000)\n            {\n                rbp_1 = rbx;\n            }\n            if (rbp_1 > __fread_chk(rdi_4, 0x1000, 1, rbp_1, r8_1))\n            {\n                break;\n            }\n            off_t temp1_1 = rbx;\n            rbx = (rbx - rbp_1);\n            if (temp1_1 == rbp_1)\n            {\n                return 0;\n            }\n        }\n    label_406dc6:\n        int32_t rax_4;\n        rax_4 = ferror(arg1) != 0;\n        rax_6 = (-rax_4);\n    }\n    if ((((rax_8 >= 0 && rax_10 >= 0) || rax_8 < 0) || (rax_8 >= 0 && rax_10 < 0)))\n    {\n        return rax_6;\n    }\n}\n\n"
        },
        {
            "funcName": "sub_406e80",
            "funcStartAddr": "0x406e80",
            "funcEndAddr": "0x406ede",
            "decompiledFuncCode": "int64_t sub_406e80()\n{\n    void var_8;\n    int64_t rcx;\n    int64_t rdx;\n    int32_t rdi;\n    uint64_t r8;\n    ssize_t r9;\n    char* rax = setlocale(rdi, nullptr, rdx, rcx, r8, r9, var_8, __return_addr);\n    int64_t rax_1 = 1;\n    bool c = false;\n    bool z = (rax & rax) == 0;\n    if ((!z))\n    {\n        int64_t rcx_1 = 2;\n        void* const rdi_1 = &data_40950c;\n        char* rsi_1 = rax;\n        while (rcx_1 != 0)\n        {\n            char temp0_1 = *rsi_1;\n            char temp1_1 = *rdi_1;\n            c = temp0_1 < temp1_1;\n            z = temp0_1 == temp1_1;\n            rsi_1 = &rsi_1[1];\n            rdi_1 = (rdi_1 + 1);\n            rcx_1 = (rcx_1 - 1);\n            if ((!z))\n            {\n                break;\n            }\n        }\n        rcx_1 = ((!z) && (!c));\n        rcx_1 = (rcx_1 - 0);\n        rax_1 = 0;\n        bool c_1 = false;\n        bool z_1 = (rcx_1 & rcx_1) == 0;\n        if ((!z_1))\n        {\n            void* const rdi_2 = \"POSIX\";\n            int64_t rcx_2 = 6;\n            char* rsi_2 = rax;\n            while (rcx_2 != 0)\n            {\n                char temp2_1 = *rsi_2;\n                char temp3_1 = *rdi_2;\n                c_1 = temp2_1 < temp3_1;\n                z_1 = temp2_1 == temp3_1;\n                rsi_2 = &rsi_2[1];\n                rdi_2 = (rdi_2 + 1);\n                rcx_2 = (rcx_2 - 1);\n                if ((!z_1))\n                {\n                    break;\n                }\n            }\n            rax_1 = ((!z_1) && (!c_1));\n            rax_1 = (rax_1 - 0);\n            rax_1 = rax_1 != 0;\n            return rax_1;\n        }\n    }\n    return rax_1;\n}\n\n"
        },
        {
            "funcName": "sub_406ee0",
            "funcStartAddr": "0x406ee0",
            "funcEndAddr": "0x407442",
            "decompiledFuncCode": "char* sub_406ee0()\n{\n    char* rax = nl_langinfo(0xe);\n    char* r15 = data_60b4d8;\n    char* rbx = rax;\n    if (rax == 0)\n    {\n        rbx = &data_4094ec[0x1b];\n    }\n    if (r15 == 0)\n    {\n        char* rax_6 = getenv(\"CHARSETALIASDIR\");\n        char* r13_1 = rax_6;\n        uint64_t rdi_7;\n        uint64_t r12_1;\n        uint64_t r14_1;\n        if ((rax_6 == 0 || (rax_6 != 0 && *rax_6 == 0)))\n        {\n            rdi_7 = 0x73;\n            r12_1 = 0x65;\n            r14_1 = 0x64;\n            r13_1 = \"/home/dongkwan/data/scripts/gnu_\u2026\";\n        }\n        char* rbp_3;\n        if ((rax_6 != 0 && *rax_6 != 0))\n        {\n            uint64_t rax_7 = strlen(rax_6);\n            r12_1 = rax_7;\n            r14_1 = rax_7;\n            uint64_t rdi_6;\n            if (rax_7 == 0)\n            {\n                rdi_6 = 0xe;\n            }\n            else if (r13_1[(rax_7 - 1)] != 0x2f)\n            {\n                rdi_7 = (rax_7 + 0xf);\n                r12_1 = (r12_1 + 1);\n            }\n            else\n            {\n                rdi_6 = (rax_7 + 0xe);\n            }\n            if ((rax_7 == 0 || (rax_7 != 0 && r13_1[(rax_7 - 1)] == 0x2f)))\n            {\n                char* rax_8 = malloc(rdi_6);\n                rbp_3 = rax_8;\n                if (rax_8 == 0)\n                {\n                    goto label_406fdc;\n                }\n                memcpy(rbp_3, r13_1, r14_1);\n                goto label_407026;\n            }\n        }\n        char* rax_9 = malloc(rdi_7);\n        rbp_3 = rax_9;\n        if (rax_9 == 0)\n        {\n        label_406fdc:\n            r15 = &data_4094ec[0x1b];\n        }\n        else\n        {\n            memcpy(rbp_3, r13_1, r14_1);\n            rbp_3[r14_1] = 0x2f;\n        label_407026:\n            int64_t* r12_2 = &rbp_3[r12_1];\n            *r12_2 = 0x2e74657372616863;\n            *(r12_2 + 0xc) = 0x73;\n            r12_2[1] = 0x61696c61;\n            int32_t rax_11 = open(rbp_3, 0);\n            void* var_d0_1;\n            FILE* rax_12;\n            if (rax_11 >= 0)\n            {\n                r15 = nullptr;\n                rax_12 = fdopen(rax_11, &data_40764e);\n                var_d0_1 = nullptr;\n                if (rax_12 == 0)\n                {\n                    close(rax_11);\n                }\n                else\n                {\n                    while (true)\n                    {\n                        char* rax_14 = rax_12->_IO_read_ptr;\n                        uint32_t rdi_13;\n                        if (rax_14 < rax_12->_IO_read_end)\n                        {\n                            do\n                            {\n                                rax_12->_IO_read_ptr = &rax_14[1];\n                                rdi_13 = *rax_14;\n                            label_4070dc:\n                                if ((rdi_13 - 9) <= 1)\n                                {\n                                    break;\n                                }\n                                if (rdi_13 == 0x20)\n                                {\n                                    break;\n                                }\n                                if (rdi_13 == 0x23)\n                                {\n                                    break;\n                                }\n                                ungetc(rdi_13, rax_12);\n                                int64_t var_b8;\n                                int64_t var_78;\n                                if (fscanf(rax_12, \"%50s %50s\", &var_b8, &var_78) <= 1)\n                                {\n                                    goto label_40726b;\n                                }\n                                int64_t* rcx_2 = &var_b8;\n                            label_407118:\n                                int32_t rdx_5 = *rcx_2;\n                                rcx_2 = (rcx_2 + 4);\n                                uint32_t rax_20 = (((rdx_5 - 0x1010101) & (!rdx_5)) & 0x80808080);\n                                if (rax_20 == 0)\n                                {\n                                    goto label_407118;\n                                }\n                                uint32_t rdx_8 = (rax_20 >> 0x10);\n                                int32_t temp0_1 = (rax_20 & 0x8080);\n                                bool cond:2_1 = temp0_1 == 0;\n                                if (temp0_1 == 0)\n                                {\n                                    rax_20 = rdx_8;\n                                }\n                                void* rdx_9 = (rcx_2 + 2);\n                                if (cond:2_1)\n                                {\n                                    rcx_2 = rdx_9;\n                                }\n                                char rdx_10 = rax_20;\n                                int64_t* rdx_11 = &var_78;\n                                void* rcx_4 = ((rcx_2 - 3) - &var_b8);\n                            label_407152:\n                                int32_t rsi_5 = *rdx_11;\n                                rdx_11 = (rdx_11 + 4);\n                                uint32_t rax_23 = (((rsi_5 - 0x1010101) & (!rsi_5)) & 0x80808080);\n                                if (rax_23 == 0)\n                                {\n                                    goto label_407152;\n                                }\n                                uint32_t rsi_8 = (rax_23 >> 0x10);\n                                int32_t temp2_1 = (rax_23 & 0x8080);\n                                bool cond:3_1 = temp2_1 == 0;\n                                if (temp2_1 == 0)\n                                {\n                                    rax_23 = rsi_8;\n                                }\n                                void* rsi_9 = (rdx_11 + 2);\n                                if (cond:3_1)\n                                {\n                                    rdx_11 = rsi_9;\n                                }\n                                char rsi_10 = rax_23;\n                                void* rdx_13 = ((rdx_11 - 3) - &var_78);\n                                void* rax_24 = (rcx_4 + rdx_13);\n                                void* var_c0 = rdx_13;\n                                char* rax_25;\n                                void* rcx_6;\n                                void* rdx_14;\n                                if (var_d0_1 != 0)\n                                {\n                                    void* rax_31 = (rax_24 + var_d0_1);\n                                    var_d0_1 = (rax_31 + 2);\n                                    rax_25 = realloc(r15, (rax_31 + 3));\n                                    rdx_14 = var_c0;\n                                    rcx_6 = rcx_4;\n                                }\n                                else\n                                {\n                                    var_d0_1 = (rax_24 + 2);\n                                    rax_25 = malloc((rax_24 + 3));\n                                    rcx_6 = rcx_4;\n                                    rdx_14 = var_c0;\n                                }\n                                if (rax_25 == 0)\n                                {\n                                    char* rdi_26 = r15;\n                                    r15 = &data_4094ec[0x1b];\n                                    free(rdi_26);\n                                    sub_405c20(rax_12);\n                                    goto label_407067;\n                                }\n                                int32_t rcx_7 = (rcx_6 + 1);\n                                void* rdi_17 = (var_d0_1 - rdx_14);\n                                void* rsi_13 = (((-2 - rcx_6) + rdi_17) + rax_25);\n                                if (rcx_7 >= 8)\n                                {\n                                    *rsi_13 = var_b8;\n                                    uint64_t r9_3 = rcx_7;\n                                    *((rsi_13 + r9_3) - 8) = *(&var_c0 + r9_3);\n                                    void* r9_5 = ((rsi_13 + 8) & 0xfffffffffffffff8);\n                                    void* rsi_16 = (rsi_13 - r9_5);\n                                    int64_t* r10_2 = (&var_b8 - rsi_16);\n                                    int32_t rcx_11 = ((rcx_7 + rsi_16) & 0xfffffff8);\n                                    if (rcx_11 >= 8)\n                                    {\n                                        int32_t rcx_12 = (rcx_11 & 0xfffffff8);\n                                        int32_t rsi_17 = 0;\n                                    label_40732b:\n                                        uint64_t r8_1 = rsi_17;\n                                        rsi_17 = (rsi_17 + 8);\n                                        *(r9_5 + r8_1) = *(r10_2 + r8_1);\n                                        if (rsi_17 < rcx_12)\n                                        {\n                                            goto label_40732b;\n                                        }\n                                    }\n                                }\n                                else if ((rcx_7 & 4) != 0)\n                                {\n                                    uint64_t rcx_15 = rcx_7;\n                                    *rsi_13 = var_b8;\n                                    *((rsi_13 + rcx_15) - 4) = *(&*var_c0[4] + rcx_15);\n                                }\n                                else if (rcx_7 != 0)\n                                {\n                                    *rsi_13 = var_b8;\n                                    if ((rcx_7 & 2) != 0)\n                                    {\n                                        uint64_t rcx_16 = rcx_7;\n                                        *((rsi_13 + rcx_16) - 2) = *(&*var_c0[6] + rcx_16);\n                                    }\n                                }\n                                int32_t rdx_15 = (rdx_14 + 1);\n                                void* rcx_8 = ((rax_25 + rdi_17) - 1);\n                                if (rdx_15 >= 8)\n                                {\n                                    *rcx_8 = var_78;\n                                    uint64_t rsi_19 = rdx_15;\n                                    void var_80;\n                                    *((rcx_8 + rsi_19) - 8) = *(&var_80 + rsi_19);\n                                    void* rdi_24 = ((rcx_8 + 8) & 0xfffffffffffffff8);\n                                    void* rcx_13 = (rcx_8 - rdi_24);\n                                    int64_t* r9_6 = (&var_78 - rcx_13);\n                                    int32_t rdx_19 = ((rdx_15 + rcx_13) & 0xfffffff8);\n                                    if (rdx_19 >= 8)\n                                    {\n                                        int32_t rdx_20 = (rdx_19 & 0xfffffff8);\n                                        int32_t rcx_14 = 0;\n                                    label_407379:\n                                        uint64_t rsi_20 = rcx_14;\n                                        rcx_14 = (rcx_14 + 8);\n                                        *(rdi_24 + rsi_20) = *(r9_6 + rsi_20);\n                                        if (rcx_14 < rdx_20)\n                                        {\n                                            goto label_407379;\n                                        }\n                                    }\n                                }\n                                else if ((rdx_15 & 4) != 0)\n                                {\n                                    uint64_t rdx_21 = rdx_15;\n                                    *rcx_8 = var_78;\n                                    void var_7c;\n                                    *((rcx_8 + rdx_21) - 4) = *(&var_7c + rdx_21);\n                                }\n                                else if (rdx_15 != 0)\n                                {\n                                    *rcx_8 = var_78;\n                                    if ((rdx_15 & 2) != 0)\n                                    {\n                                        uint64_t rsi_23 = rdx_15;\n                                        void var_7a;\n                                        *((rcx_8 + rsi_23) - 2) = *(&var_7a + rsi_23);\n                                    }\n                                }\n                                r15 = rax_25;\n                                rax_14 = rax_12->_IO_read_ptr;\n                            } while (rax_14 < rax_12->_IO_read_end);\n                            if (((!((rdi_13 - 9) > 1 && rdi_13 == 0x23)) && (rdi_13 - 9) <= 1))\n                            {\n                                continue;\n                            }\n                            if (((rdi_13 - 9) > 1 && rdi_13 == 0x23))\n                            {\n                                int32_t rax_29;\n                                bool rdx_17;\n                                do\n                                {\n                                    char* rax_30 = rax_12->_IO_read_ptr;\n                                    if (rax_30 < rax_12->_IO_read_end)\n                                    {\n                                        rax_12->_IO_read_ptr = &rax_30[1];\n                                        rax_29 = *rax_30;\n                                        rdx_17 = true;\n                                    }\n                                    else\n                                    {\n                                        rax_29 = __uflow(rax_12);\n                                        rdx_17 = rax_29 != 0xffffffff;\n                                    }\n                                    if (rax_29 == 0xa)\n                                    {\n                                        break;\n                                    }\n                                } while (rdx_17 != 0);\n                                if (rax_29 == 0xffffffff)\n                                {\n                                    break;\n                                }\n                                continue;\n                            }\n                        }\n                        uint32_t rax_26 = __uflow(rax_12);\n                        rdi_13 = rax_26;\n                        if (rax_26 != 0xffffffff)\n                        {\n                            goto label_4070dc;\n                        }\n                        break;\n                    }\n                label_40726b:\n                    sub_405c20(rax_12);\n                    if (var_d0_1 != 0)\n                    {\n                        *(r15 + var_d0_1) = 0;\n                    }\n                }\n            }\n            if ((((rax_11 >= 0 && rax_12 == 0) || rax_11 < 0) || ((rax_11 >= 0 && rax_12 != 0) && var_d0_1 == 0)))\n            {\n                r15 = &data_4094ec[0x1b];\n            }\n        label_407067:\n            free(rbp_3);\n        }\n        data_60b4d8 = r15;\n    }\n    char rbp_2 = *r15;\n    if (rbp_2 != 0)\n    {\n        while (true)\n        {\n            if ((strcmp(rbx, r15) != 0 && (rbp_2 != 0x2a || (rbp_2 == 0x2a && r15[1] != 0))))\n            {\n                void* rbp_1 = &r15[(strlen(r15) + 1)];\n                r15 = ((rbp_1 + strlen(rbp_1)) + 1);\n                rbp_2 = *r15;\n                if (rbp_2 == 0)\n                {\n                    break;\n                }\n                continue;\n            }\n            rbx = &r15[(strlen(r15) + 1)];\n            break;\n        }\n    }\n    if (*rbx == 0)\n    {\n        rbx = \"ASCII\";\n    }\n    return rbx;\n}\n\n"
        },
        {
            "funcName": "sub_407450",
            "funcStartAddr": "0x407450",
            "funcEndAddr": "0x407478",
            "decompiledFuncCode": "int64_t sub_407450(int32_t* arg1)\n{\n    int64_t rax_1 = 0;\n    if (*(arg1 + 0x28) <= *(arg1 + 0x20))\n    {\n        rax_1 = (*(arg1 + 0x10) - *(arg1 + 8));\n        if ((*arg1 & 0x100) != 0)\n        {\n            rax_1 = (rax_1 + (*(arg1 + 0x58) - *(arg1 + 0x48)));\n        }\n    }\n    return rax_1;\n}\n\n"
        },
        {
            "funcName": "init",
            "funcStartAddr": "0x407480",
            "funcEndAddr": "0x4074dd",
            "decompiledFuncCode": "void init()\n{\n    _init();\n}\n\n"
        },
        {
            "funcName": "fini",
            "funcStartAddr": "0x4074e0",
            "funcEndAddr": "0x4074e1",
            "decompiledFuncCode": "void fini()\n{\n    return;\n}\n\n"
        },
        {
            "funcName": "sub_4074f0",
            "funcStartAddr": "0x4074f0",
            "funcEndAddr": "0x407508",
            "decompiledFuncCode": "int64_t sub_4074f0(void (* arg1)(void*))\n{\n    int64_t rdx = data_60b228;\n    /* tailcall */\n    return __cxa_atexit(arg1, nullptr, rdx);\n}\n\n"
        },
        {
            "funcName": "sub_407508",
            "funcStartAddr": "0x407508",
            "funcEndAddr": "0x407528",
            "decompiledFuncCode": "int64_t sub_407508(int64_t arg1, int64_t arg2, int64_t arg3)\n{\n    int64_t* rbx = &data_60ae30;\n    while (true)\n    {\n        int64_t rax_1 = *rbx;\n        if (rax_1 == -1)\n        {\n            break;\n        }\n        rax_1();\n        rbx = (rbx - 8);\n    }\n    return arg3;\n}\n\n"
        }
    ]
}