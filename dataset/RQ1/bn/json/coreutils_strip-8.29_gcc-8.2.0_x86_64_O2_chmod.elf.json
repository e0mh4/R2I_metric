{
    "decompilerName": "binaryNinja",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_chmod.elf",
    "isStripped": "True",
    "compilerName": "gcc",
    "optLevel": "-O",
    "funcCount": 142,
    "funcInfo": [
        {
            "funcName": "sub_4017c0",
            "funcStartAddr": "0x4017c0",
            "funcEndAddr": "0x4017cc",
            "decompiledFuncCode": "int64_t sub_4017c0()\n{\n    int64_t var_8 = data_60f008;\n    /* jump -> data_60f010 */\n}\n\n"
        },
        {
            "funcName": "sub_4017d6",
            "funcStartAddr": "0x4017d6",
            "funcEndAddr": "0x4017e0",
            "decompiledFuncCode": "int64_t sub_4017d6()\n{\n    int64_t var_8 = 0;\n    /* tailcall */\n    return sub_4017c0();\n}\n\n"
        },
        {
            "funcName": "sub_4017e6",
            "funcStartAddr": "0x4017e6",
            "funcEndAddr": "0x4017f0",
            "decompiledFuncCode": "int64_t sub_4017e6()\n{\n    int64_t var_8 = 1;\n    /* tailcall */\n    return sub_4017c0();\n}\n\n"
        },
        {
            "funcName": "main",
            "funcStartAddr": "0x401c40",
            "funcEndAddr": "0x4028e0",
            "decompiledFuncCode": "int32_t main(int32_t argc, char** argv, char** envp)\n{\n    int64_t r15 = 0;\n    char* r14 = nullptr;\n    int64_t r13 = 0;\n    uint64_t r12 = 0;\n    int64_t rbp = argc;\n    int64_t var_e0 = 0;\n    int64_t rcx;\n    int64_t rdx;\n    uint64_t r8;\n    ssize_t r9;\n    rcx = sub_403510(*argv);\n    void var_118;\n    int32_t var_110;\n    setlocale(6, &data_40c8fc[0x1b], rdx, rcx, r8, r9, var_118, var_110);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_\u2026\");\n    textdomain(\"coreutils\");\n    sub_40a910(sub_402d90);\n    data_60f338 = 0;\n    data_60f339 = 0;\n    data_60f33a = 0;\n    while (true)\n    {\n        int32_t rax_1 = getopt_long(rbp, argv, \"Rcfvr::w::x::X::s::t::u::g::o::a\u2026\", &data_40b3c0, nullptr);\n        char* var_100;\n        if (rax_1 == 0xffffffff)\n        {\n            if (r15 == 0)\n            {\n                int64_t rax_37 = data_60f2dc;\n                int32_t rdx_21;\n                if (r14 == 0)\n                {\n                    rdx_21 = (rax_37 + 1);\n                    r14 = argv[rax_37];\n                    data_60f2dc = rdx_21;\n                    if ((rdx_21 >= rbp && r14 == 0))\n                    {\n                        goto label_402608;\n                    }\n                }\n                if ((r14 != 0 && rbp <= rax_37))\n                {\n                    rdx_21 = rax_37;\n                }\n                if (((r14 != 0 && rbp <= rax_37) || (r14 == 0 && rdx_21 >= rbp)))\n                {\n                    if (argv[(rdx_21 - 1)] != r14)\n                    {\n                        goto label_402608;\n                    }\n                    error(0, 0, dcgettext(nullptr, \"missing operand after %s\", 5), sub_405130(argv[(rbp - 1)]));\n                }\n                if (((r14 == 0 && rdx_21 < rbp) || (r14 != 0 && rbp > rax_37)))\n                {\n                    int16_t* rax_38 = sub_402fc0(r14);\n                    data_60f340 = rax_38;\n                    if (rax_38 == 0)\n                    {\n                        error(0, 0, dcgettext(nullptr, \"invalid mode: %s\", 5), sub_405130(r14));\n                        sub_4029c0(1);\n                        /* no return */\n                    }\n                    data_60f33c = umask(0);\n                label_401f6b:\n                    int32_t* rax_9 = __errno_location();\n                    r12 = (r12 & data_60f33a);\n                    uint64_t rbx_1;\n                    if (r12 == 0)\n                    {\n                        data_60f330 = 0;\n                    }\n                    else\n                    {\n                        int64_t* rax_76 = sub_405150(&data_60f320);\n                        data_60f330 = rax_76;\n                        if (rax_76 == 0)\n                        {\n                            rbx_1 = sub_404ee0(4, \"/\");\n                            error(1, *rax_9, dcgettext(nullptr, \"failed to get attributes of %s\", 5), rbx_1);\n                            goto label_4026e2;\n                        }\n                    }\n                    r14 = nullptr;\n                    rbx_1 = 1;\n                    rbp = sub_4059d0(&argv[data_60f2dc], 0x411, 0);\n                    void var_c7;\n                    var_100 = &var_c7;\n                    int64_t rax_12 = fts_read(rbp);\n                    r13 = rax_12;\n                    if (rax_12 != 0)\n                    {\n                        do\n                        {\n                            r12 = *(rax_12 + 0x38);\n                            uint32_t r15_1;\n                            char* rsi_16;\n                            int64_t r15_7;\n                            int32_t var_10c;\n                            void var_d4;\n                            void var_d3;\n                            void var_c8;\n                            if (*(rax_12 + 0x70) > 0xd)\n                            {\n                            label_40212d:\n                                int64_t rax_21 = data_60f330;\n                                if (rax_21 == 0)\n                                {\n                                label_402149:\n                                    int32_t rdi_15 = *(r13 + 0x90);\n                                    int64_t rax_22 = *(r13 + 0x30);\n                                    int32_t r15_4 = (rdi_15 & 0xf000);\n                                    var_10c = rdi_15;\n                                    int32_t rax_23 = sub_403390(rdi_15, r15_4 == 0x4000, data_60f33c, data_60f340, nullptr);\n                                    var_110 = rax_23;\n                                    if (r15_4 == 0xa000)\n                                    {\n                                        int32_t rax_40 = data_60f250;\n                                        if (rax_40 == 2)\n                                        {\n                                            goto label_402365;\n                                        }\n                                        if (rax_40 != 0)\n                                        {\n                                            goto label_402365;\n                                        }\n                                        r15_1 = 1;\n                                        __printf_chk(1, dcgettext(nullptr, \"neither symbolic link %s nor ref\u2026\", 5), sub_404ee0(4, r12));\n                                        goto label_4020f8;\n                                    }\n                                    if (fchmodat(*(rbp + 0x2c), rax_22, rax_23, 0) != 0)\n                                    {\n                                        if (data_60f339 == 0)\n                                        {\n                                            error(0, *rax_9, dcgettext(nullptr, \"changing permissions of %s\", 5), sub_404ee0(4, r12));\n                                        }\n                                        goto label_402058;\n                                    }\n                                    if (data_60f250 != 2)\n                                    {\n                                        int32_t rax_44 = var_110;\n                                        int32_t rcx_13;\n                                        *rcx_13[1] = (*var_110[1] & 0xe);\n                                        int32_t rax_63;\n                                        if (*rcx_13[1] != 0)\n                                        {\n                                            rax_63 = __fxstatat(1, *(rbp + 0x2c), rax_22, &var_c8, 0);\n                                            int32_t var_b0;\n                                            if (rax_63 == 0)\n                                            {\n                                                rax_44 = var_b0;\n                                            }\n                                            else\n                                            {\n                                            label_4026e2:\n                                                if (data_60f339 == 0)\n                                                {\n                                                    error(0, *rax_9, dcgettext(nullptr, \"getting new attributes of %s\", 5), sub_404ee0(4, r12));\n                                                }\n                                            }\n                                        }\n                                        if ((((*rcx_13[1] != 0 && rax_63 == 0) || *rcx_13[1] == 0) && ((rax_44 ^ var_10c) & 0xfff) != 0))\n                                        {\n                                            sub_402e30(var_110, &var_d4);\n                                            char var_ca_2 = r14;\n                                            sub_402e30(var_10c, &var_c8);\n                                            char var_be_2 = r14;\n                                            char* rax_46 = dcgettext(nullptr, \"mode of %s changed from %04lo (%\u2026\", 5);\n                                            int64_t rax_47;\n                                            int64_t rdi_20;\n                                            rax_47 = sub_404ee0(4, r12);\n                                            __printf_chk(1, rax_46, rax_47, (var_10c & 0xfff), var_100, (var_110 & 0xfff), &var_d3, rdi_20);\n                                        }\n                                        if ((((((*rcx_13[1] != 0 && rax_63 == 0) || *rcx_13[1] == 0) && ((rax_44 ^ var_10c) & 0xfff) == 0) || (*rcx_13[1] != 0 && rax_63 != 0)) && data_60f250 == 0))\n                                        {\n                                            sub_402e30(var_110, &var_d4);\n                                            char var_ca_4 = r14;\n                                            sub_402e30(var_10c, &var_c8);\n                                            char var_be_4 = r14;\n                                            __printf_chk(1, dcgettext(nullptr, \"mode of %s retained as %04lo (%s\u2026\", 5), sub_404ee0(4, r12), (var_110 & 0xfff), &var_d3);\n                                        }\n                                    }\n                                    r15_1 = data_60f338;\n                                    if (r15_1 != 0)\n                                    {\n                                        int32_t rax_51 = sub_403390(var_10c, (var_10c & 0xf000) == 0x4000, 0, data_60f340, nullptr);\n                                        if ((var_110 & (!rax_51)) != 0)\n                                        {\n                                            int64_t var_108;\n                                            var_108 = rax_51;\n                                            r15_1 = 0;\n                                            sub_402e30(var_110, &var_d4);\n                                            sub_402e30(var_108, &var_c8);\n                                            char var_be_3 = r14;\n                                            char var_ca_3 = r14;\n                                            error(0, 0, dcgettext(nullptr, \"%s: new permissions are %s, not \u2026\", 5), sub_404fb0(0, 3, r12), &var_d3, var_100);\n                                        }\n                                        goto label_4020f8;\n                                    }\n                                label_402365:\n                                    r15_1 = 1;\n                                label_4020f8:\n                                    if (data_60f33a == 0)\n                                    {\n                                        fts_set(rbp, r13, 4);\n                                    }\n                                }\n                                else\n                                {\n                                    if (*(r13 + 0x80) != *rax_21)\n                                    {\n                                        goto label_402149;\n                                    }\n                                    if (*(r13 + 0x78) != *(rax_21 + 8))\n                                    {\n                                        goto label_402149;\n                                    }\n                                    if (strcmp(r12, \"/\") != 0)\n                                    {\n                                        char* rax_88 = sub_404e00(1, 4, \"/\");\n                                        error(0, 0, dcgettext(nullptr, \"it is dangerous to operate recur\u2026\", 5), sub_404e00(0, 4, r12), rax_88);\n                                    }\n                                    else\n                                    {\n                                        error(0, 0, dcgettext(nullptr, \"it is dangerous to operate recur\u2026\", 5), sub_404ee0(4, r12));\n                                    }\n                                    r15_1 = 0;\n                                    error(0, 0, dcgettext(nullptr, \"use --no-preserve-root to overri\u2026\", 5));\n                                    fts_set(rbp, r13, 4);\n                                    fts_read(rbp);\n                                }\n                            }\n                            else\n                            {\n                                switch (*(rax_12 + 0x70))\n                                {\n                                    case 0:\n                                    case 1:\n                                    case 3:\n                                    case 5:\n                                    case 8:\n                                    case 9:\n                                    case 0xb:\n                                    case 0xc:\n                                    {\n                                        goto label_40212d;\n                                    }\n                                    case 2:\n                                    {\n                                        if (sub_405a20(rbp, r13) == 0)\n                                        {\n                                            goto label_40212d;\n                                        }\n                                        r15_1 = 0;\n                                        error(0, 0, dcgettext(nullptr, \"WARNING: Circular directory stru\u2026\", 5), sub_404fb0(0, 3, r12));\n                                        break;\n                                    }\n                                    case 4:\n                                    {\n                                        if (data_60f339 != 0)\n                                        {\n                                            goto label_402058;\n                                        }\n                                        rsi_16 = \"cannot read directory %s\";\n                                        r15_7 = sub_404ee0(4, r12);\n                                    label_40228e:\n                                        error(0, *(r13 + 0x40), dcgettext(nullptr, rsi_16, 5), r15_7);\n                                    label_402058:\n                                        if (data_60f250 == 2)\n                                        {\n                                        label_402310:\n                                            r15_1 = 0;\n                                            goto label_4020f8;\n                                        }\n                                        if (data_60f250 != 0)\n                                        {\n                                            goto label_402310;\n                                        }\n                                        sub_402e30(var_110, &var_d4);\n                                        char var_ca_1 = r14;\n                                        sub_402e30(var_10c, &var_c8);\n                                        char var_be_1 = r14;\n                                        char* rax_17 = dcgettext(nullptr, \"failed to change mode of %s from\u2026\", 5);\n                                        int64_t rax_18;\n                                        int64_t rdx_3;\n                                        rax_18 = sub_404ee0(4, r12);\n                                        r15_1 = 0;\n                                        __printf_chk(1, rax_17, rax_18, (var_10c & 0xfff), var_100, (var_110 & 0xfff), &var_d3, rdx_3);\n                                        goto label_4020f8;\n                                    }\n                                    case 6:\n                                    {\n                                        r15_1 = 1;\n                                        break;\n                                    }\n                                    case 7:\n                                    {\n                                        if (data_60f339 == 0)\n                                        {\n                                            error(0, *(r13 + 0x40), \"%s\", sub_404fb0(0, 3, r12));\n                                        }\n                                        goto label_402058;\n                                    }\n                                    case 0xa:\n                                    {\n                                        if (*(r13 + 0x58) != 0)\n                                        {\n                                        label_402252:\n                                            if (data_60f339 != 0)\n                                            {\n                                                goto label_402058;\n                                            }\n                                            rsi_16 = \"cannot access %s\";\n                                            r15_7 = sub_404ee0(4, r12);\n                                            goto label_40228e;\n                                        }\n                                        if (*(r13 + 0x20) != 0)\n                                        {\n                                            goto label_402252;\n                                        }\n                                        *(r13 + 0x20) = 1;\n                                        r15_1 = 1;\n                                        fts_set(rbp, r13, 1);\n                                        break;\n                                    }\n                                    case 0xd:\n                                    {\n                                        if (data_60f339 == 0)\n                                        {\n                                            error(0, 0, dcgettext(nullptr, \"cannot operate on dangling symli\u2026\", 5), sub_404ee0(4, r12));\n                                        }\n                                        goto label_402058;\n                                    }\n                                }\n                            }\n                            rbx_1 = (rbx_1 & r15_1);\n                            rax_12 = fts_read(rbp);\n                            r13 = rax_12;\n                        } while (rax_12 != 0);\n                    }\n                    if (*rax_9 != 0)\n                    {\n                        rbx_1 = data_60f339;\n                        if (rbx_1 == 0)\n                        {\n                            error(0, *rax_9, dcgettext(nullptr, \"fts_read failed\", 5));\n                        }\n                        else\n                        {\n                            rbx_1 = 0;\n                        }\n                    }\n                    if (fts_close(rbp) != 0)\n                    {\n                        rbx_1 = 0;\n                        error(0, *rax_9, dcgettext(nullptr, \"fts_close failed\", 5));\n                    }\n                    return (rbx_1 ^ 1);\n                }\n            }\n            else\n            {\n                char const* const rsi_33;\n                if (r14 == 0)\n                {\n                    if (rbp <= data_60f2dc)\n                    {\n                    label_402608:\n                        rsi_33 = \"missing operand\";\n                        goto label_40261d;\n                    }\n                    int16_t* rax_8 = sub_403330(r15);\n                    data_60f340 = rax_8;\n                    if (rax_8 == 0)\n                    {\n                        int64_t rax_98 = sub_404ee0(4, r15);\n                        void (* rdx_35)();\n                        int64_t rsi_45;\n                        int64_t rdi_32;\n                        rdx_35 = error(1, *__errno_location(), dcgettext(nullptr, \"failed to get attributes of %s\", 5), rax_98);\n                        /* tailcall */\n                        return _start(rdi_32, rsi_45, rdx_35);\n                    }\n                    goto label_401f6b;\n                }\n                rsi_33 = \"cannot combine mode and --refere\u2026\";\n            label_40261d:\n                error(0, 0, dcgettext(nullptr, rsi_33, 5));\n            }\n            break;\n        }\n        bool cond:0_1 = rax_1 <= 0x63;\n        if (rax_1 == 0x63)\n        {\n            data_60f250 = 1;\n        }\n        else\n        {\n            if ((!cond:0_1))\n            {\n                bool cond:1_1 = rax_1 <= 0x76;\n                if (rax_1 == 0x76)\n                {\n                    data_60f250 = 0;\n                    continue;\n                }\n                else if (cond:1_1)\n                {\n                    bool cond:5_1 = rax_1 > 0x6f;\n                    if (rax_1 != 0x6f)\n                    {\n                        if ((cond:5_1 && rax_1 < 0x72))\n                        {\n                            break;\n                        }\n                        if ((!cond:5_1))\n                        {\n                            if (rax_1 == 0x66)\n                            {\n                                data_60f339 = 1;\n                                continue;\n                            }\n                            if ((rax_1 != 0x66 && rax_1 != 0x67))\n                            {\n                                break;\n                            }\n                        }\n                    }\n                }\n                else\n                {\n                    bool cond:6_1 = rax_1 <= 0x80;\n                    if (rax_1 == 0x80)\n                    {\n                        r12 = 0;\n                        continue;\n                    }\n                    else\n                    {\n                        if ((cond:6_1 && rax_1 > 0x78))\n                        {\n                            break;\n                        }\n                        if ((!cond:6_1))\n                        {\n                            if (rax_1 == 0x81)\n                            {\n                                r12 = 1;\n                                continue;\n                            }\n                            else\n                            {\n                                if (rax_1 != 0x82)\n                                {\n                                    break;\n                                }\n                                r15 = data_60f4e8;\n                                continue;\n                            }\n                        }\n                    }\n                }\n            }\n            else if (rax_1 > 0x37)\n            {\n                bool cond:2_1 = rax_1 <= 0x52;\n                if (rax_1 == 0x52)\n                {\n                    data_60f33a = 1;\n                    continue;\n                }\n                else\n                {\n                    if ((cond:2_1 && rax_1 != 0x3d))\n                    {\n                        break;\n                    }\n                    if (((!cond:2_1) && (rax_1 != 0x58 && rax_1 != 0x61)))\n                    {\n                        break;\n                    }\n                }\n            }\n            else if (rax_1 < 0x30)\n            {\n                bool cond:4_1 = rax_1 > 0xffffff7e;\n                if (rax_1 == 0xffffff7e)\n                {\n                    sub_4029c0(0);\n                    /* no return */\n                }\n                if ((cond:4_1 && (rax_1 - 0x2b) > 1))\n                {\n                    break;\n                }\n                if ((!cond:4_1))\n                {\n                    if (rax_1 == 0xffffff7d)\n                    {\n                        int64_t var_128_1 = 0;\n                        sub_405600(stdout, \"chmod\", \"GNU coreutils\", data_60f258);\n                        exit(0);\n                        /* no return */\n                    }\n                    break;\n                }\n            }\n            char* r8_2 = argv[(data_60f2dc - 1)];\n            uint64_t rax_5 = strlen(r8_2);\n            char* r8_3 = r8_2;\n            int64_t rcx_2;\n            rcx_2 = r13 != 0;\n            uint64_t rdx_1 = rax_5;\n            int64_t rcx_3 = (rcx_2 + r13);\n            int64_t r9_2 = (rax_5 + rcx_3);\n            if (var_e0 <= r9_2)\n            {\n                var_100 = r8_3;\n                var_e0 = (r9_2 + 1);\n                rdx_1 = rax_5;\n                r14 = sub_4058a0(r14, &var_e0);\n                r8_3 = var_100;\n            }\n            r14[r13] = 0x2c;\n            memcpy(&r14[rcx_3], r8_3, (rdx_1 + 1));\n            data_60f338 = 1;\n            r13 = r9_2;\n        }\n    }\n    sub_4029c0(1);\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "_start",
            "funcStartAddr": "0x4028e0",
            "funcEndAddr": "0x40290a",
            "decompiledFuncCode": "int64_t _start(int64_t arg1, int64_t arg2, void (* arg3)()) __noreturn\n{\n    int64_t rax;\n    int64_t var_8 = rax;\n    __libc_start_main(main, __return_addr, &arg_8, init, fini, arg3, &var_8);\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_40290b",
            "funcStartAddr": "0x40290b",
            "funcEndAddr": "0x40292a",
            "decompiledFuncCode": "void sub_40290b()\n{\n    return;\n}\n\n"
        },
        {
            "funcName": "sub_40292a",
            "funcStartAddr": "0x40292a",
            "funcEndAddr": "0x402961",
            "decompiledFuncCode": "int64_t sub_40292a()\n{\n    int64_t rax;\n    int64_t rdx;\n    rdx = HIGHD(0);\n    rax = LOWD(0);\n    return (COMBINE(rdx, rax) / 2);\n}\n\n"
        },
        {
            "funcName": "sub_402961",
            "funcStartAddr": "0x402961",
            "funcEndAddr": "0x4029b8",
            "decompiledFuncCode": "void sub_402961()\n{\n    if (data_60f308 != 0)\n    {\n        return;\n    }\n    while (true)\n    {\n        int64_t rax_1 = data_60f310;\n        if (rax_1 >= 0)\n        {\n            break;\n        }\n        data_60f310 = (rax_1 + 1);\n        *(0x60ee40 + ((rax_1 + 1) << 3))();\n    }\n    sub_40290b();\n    data_60f308 = 1;\n}\n\n"
        },
        {
            "funcName": "thunk_4029b8",
            "funcStartAddr": "0x4029b8",
            "funcEndAddr": "0x4029bd",
            "decompiledFuncCode": "int64_t j_sub_40292a()\n{\n    /* tailcall */\n    return sub_40292a();\n}\n\n"
        },
        {
            "funcName": "sub_4029c0",
            "funcStartAddr": "0x4029c0",
            "funcEndAddr": "0x402d65",
            "decompiledFuncCode": "int64_t sub_4029c0(int32_t arg1) __noreturn\n{\n    int64_t rbp = data_60f358;\n    if (arg1 != 0)\n    {\n        __fprintf_chk(stderr, 1, dcgettext(nullptr, \"Try '%s --help' for more informa\u2026\", 5), rbp);\n    }\n    else\n    {\n        __printf_chk(1, dcgettext(nullptr, \"Usage: %s [OPTION]... MODE[,MODE\u2026\", 5), rbp, rbp, rbp);\n        fputs_unlocked(dcgettext(nullptr, \"Change the mode of each FILE to \u2026\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"  -c, --changes          like ve\u2026\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"      --no-preserve-root  do not\u2026\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"      --reference=RFILE  use RFI\u2026\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"  -R, --recursive        change \u2026\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"      --help     display this he\u2026\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"      --version  output version \u2026\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"\\nEach MODE is of the form '[ugo\u2026\", 5), stdout);\n        void* const var_88 = &data_40a96a;\n        void* const* rax_12 = &var_88;\n        void* const var_78_1 = \"coreutils\";\n        void* const var_70_1 = \"Multi-call invocation\";\n        void* const var_68_1 = \"sha224sum\";\n        void* const var_60_1 = \"sha2 utilities\";\n        void* const var_58_1 = \"sha256sum\";\n        void* const var_50_1 = \"sha2 utilities\";\n        void* const var_48_1 = \"sha384sum\";\n        void* const var_40_1 = \"sha2 utilities\";\n        void* const var_38_1 = \"sha512sum\";\n        void* const var_30_1 = \"sha2 utilities\";\n        int64_t var_28_1 = 0;\n        int64_t var_20_1 = 0;\n        bool c_1;\n        bool z_1;\n        do\n        {\n            rax_12 = &rax_12[2];\n            void* const rdi_10 = *rax_12;\n            c_1 = false;\n            z_1 = (rdi_10 & rdi_10) == 0;\n            if (z_1)\n            {\n                break;\n            }\n            void* const rsi_10 = \"chmod\";\n            int64_t rcx_2 = 6;\n            while (rcx_2 != 0)\n            {\n                char temp0_1 = *rsi_10;\n                char temp1_1 = *rdi_10;\n                c_1 = temp0_1 < temp1_1;\n                z_1 = temp0_1 == temp1_1;\n                rsi_10 = (rsi_10 + 1);\n                rdi_10 = (rdi_10 + 1);\n                rcx_2 = (rcx_2 - 1);\n                if ((!z_1))\n                {\n                    break;\n                }\n            }\n        } while ((((!z_1) && (!c_1)) - 0) != 0);\n        void* const rbp_1 = rax_12[1];\n        char* rax_23;\n        int32_t rax_24;\n        void* const r12_1;\n        if (rbp_1 == 0)\n        {\n            int64_t rcx_5;\n            int64_t rdx_5;\n            uint64_t r8_3;\n            ssize_t r9_2;\n            rcx_5 = __printf_chk(1, dcgettext(nullptr, \"\\n%s online help: <%s>\\n\", 5), \"GNU coreutils\", \"https://www.gnu.org/software/cor\u2026\");\n            rax_23 = setlocale(5, nullptr, rdx_5, rcx_5, r8_3, r9_2, var_88, \"test invocation\");\n            if (rax_23 != 0)\n            {\n                rax_24 = strncmp(rax_23, &data_40a9ee, 3);\n                if (rax_24 != 0)\n                {\n                    rbp_1 = \"chmod\";\n                }\n            }\n            if ((rax_23 == 0 || (rax_23 != 0 && rax_24 == 0)))\n            {\n                rbp_1 = \"chmod\";\n                r12_1 = \" invocation\";\n                __printf_chk(1, dcgettext(nullptr, \"Full documentation at: <%s%s>\\n\", 5), \"https://www.gnu.org/software/cor\u2026\", \"chmod\");\n            }\n        }\n        else\n        {\n            int64_t rcx_3;\n            int64_t rdx_3;\n            uint64_t r8_2;\n            ssize_t r9_1;\n            rcx_3 = __printf_chk(1, dcgettext(nullptr, \"\\n%s online help: <%s>\\n\", 5), \"GNU coreutils\", \"https://www.gnu.org/software/cor\u2026\");\n            char* rax_15 = setlocale(5, nullptr, rdx_3, rcx_3, r8_2, r9_1, var_88, \"test invocation\");\n            if (rax_15 == 0)\n            {\n                goto label_402c58;\n            }\n            if (strncmp(rax_15, &data_40a9ee, 3) == 0)\n            {\n                goto label_402c58;\n            }\n        }\n        if ((((rbp_1 == 0 && rax_23 != 0) && rax_24 != 0) || rbp_1 != 0))\n        {\n            __printf_chk(1, dcgettext(nullptr, \"Report %s translation bugs to <h\u2026\", 5), \"chmod\");\n        label_402c58:\n            r12_1 = \" invocation\";\n            __printf_chk(1, dcgettext(nullptr, \"Full documentation at: <%s%s>\\n\", 5), \"https://www.gnu.org/software/cor\u2026\", \"chmod\");\n            if (rbp_1 != \"chmod\")\n            {\n                r12_1 = &data_40c8fc[0x1b];\n            }\n        }\n        __printf_chk(1, dcgettext(nullptr, \"or available locally via: info '\u2026\", 5), rbp_1, r12_1);\n    }\n    exit(arg1);\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_402d70",
            "funcStartAddr": "0x402d70",
            "funcEndAddr": "0x402d78",
            "decompiledFuncCode": "int64_t sub_402d70(int64_t arg1)\n{\n    data_60f350 = arg1;\n}\n\n"
        },
        {
            "funcName": "sub_402d80",
            "funcStartAddr": "0x402d80",
            "funcEndAddr": "0x402d88",
            "decompiledFuncCode": "int64_t sub_402d80(char arg1)\n{\n    data_60f348 = arg1;\n}\n\n"
        },
        {
            "funcName": "sub_402d90",
            "funcStartAddr": "0x402d90",
            "funcEndAddr": "0x402e2e",
            "decompiledFuncCode": "void sub_402d90(void* arg1)\n{\n    int32_t rax = sub_408b70(stdout);\n    int32_t* rax_1;\n    if (rax != 0)\n    {\n        rax_1 = __errno_location();\n        if ((data_60f348 == 0 || (data_60f348 != 0 && *rax_1 != 0x20)))\n        {\n            char* rax_3 = dcgettext(nullptr, \"write error\", 5);\n            int64_t rdi_2 = data_60f350;\n            if (rdi_2 == 0)\n            {\n                error(0, *rax_1, \"%s\", rax_3);\n            }\n            else\n            {\n                error(0, *rax_1, \"%s: %s\", sub_404f80(rdi_2), rax_3);\n            }\n        }\n    }\n    if (((rax == 0 || ((rax != 0 && data_60f348 != 0) && *rax_1 == 0x20)) && sub_408b70(stderr) == 0))\n    {\n        return;\n    }\n    _exit(data_60f260);\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_402e30",
            "funcStartAddr": "0x402e30",
            "funcEndAddr": "0x402fa3",
            "decompiledFuncCode": "uint64_t sub_402e30(int32_t arg1, char* arg2)\n{\n    char rax = 0x2d;\n    int32_t rdx = (arg1 & 0xf000);\n    if (rdx != 0x8000)\n    {\n        rax = 0x64;\n        if (rdx != 0x4000)\n        {\n            rax = 0x62;\n            if (rdx != 0x6000)\n            {\n                rax = 0x63;\n                if (rdx != 0x2000)\n                {\n                    rax = 0x6c;\n                    if (rdx != 0xa000)\n                    {\n                        rax = 0x70;\n                        if (rdx != 0x1000)\n                        {\n                            rax = 0x73;\n                            if (rdx != 0xc000)\n                            {\n                                rax = 0x3f;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    *arg2 = rax;\n    int32_t rax_2 = (arg1 & 0x100);\n    arg2[1] = (((rax_2 - rax_2) & 0xbb) + 0x72);\n    int32_t rax_7 = (arg1 & 0x80);\n    arg2[2] = (((rax_7 - rax_7) & 0xb6) + 0x77);\n    int32_t rax_12 = (arg1 & 0x40);\n    char rax_13 = (rax_12 - rax_12);\n    char rax_15;\n    if ((arg1 & 0x800) == 0)\n    {\n        rax_15 = ((rax_13 & 0xb5) + 0x78);\n    }\n    else\n    {\n        rax_15 = ((rax_13 & 0xe0) + 0x73);\n    }\n    arg2[3] = rax_15;\n    int32_t rax_17 = (arg1 & 0x20);\n    arg2[4] = (((rax_17 - rax_17) & 0xbb) + 0x72);\n    int32_t rax_22 = (arg1 & 0x10);\n    arg2[5] = (((rax_22 - rax_22) & 0xb6) + 0x77);\n    int32_t rax_27 = (arg1 & 8);\n    char rax_28 = (rax_27 - rax_27);\n    char rax_30;\n    if ((arg1 & 0x400) == 0)\n    {\n        rax_30 = ((rax_28 & 0xb5) + 0x78);\n    }\n    else\n    {\n        rax_30 = ((rax_28 & 0xe0) + 0x73);\n    }\n    arg2[6] = rax_30;\n    int32_t rax_32 = (arg1 & 4);\n    arg2[7] = (((rax_32 - rax_32) & 0xbb) + 0x72);\n    int32_t rax_37 = (arg1 & 2);\n    arg2[8] = (((rax_37 - rax_37) & 0xb6) + 0x77);\n    int32_t rax_42 = (arg1 & 1);\n    int32_t rax_43 = (rax_42 - rax_42);\n    if ((arg1 & 0x200) == 0)\n    {\n        uint64_t rax_49 = ((rax_43 & 0xffffffb5) + 0x78);\n        arg2[9] = rax_49;\n        *(arg2 + 0xa) = 0x20;\n        return rax_49;\n    }\n    uint64_t rax_45 = ((rax_43 & 0xffffffe0) + 0x74);\n    arg2[9] = rax_45;\n    *(arg2 + 0xa) = 0x20;\n    return rax_45;\n}\n\n"
        },
        {
            "funcName": "sub_402fb0",
            "funcStartAddr": "0x402fb0",
            "funcEndAddr": "0x402fb8",
            "decompiledFuncCode": "int64_t sub_402fb0(void* arg1, char* arg2)\n{\n    /* tailcall */\n    return sub_402e30(*(arg1 + 0x18), arg2);\n}\n\n"
        },
        {
            "funcName": "sub_402fc0",
            "funcStartAddr": "0x402fc0",
            "funcEndAddr": "0x403321",
            "decompiledFuncCode": "int16_t* sub_402fc0(char* arg1)\n{\n    char* rcx = arg1;\n    char* rbx = arg1;\n    int32_t rdx = *arg1;\n    int64_t rax_8;\n    if ((rdx - 0x30) <= 7)\n    {\n        uint64_t rbp_1 = 0;\n        do\n        {\n            rbp_1 = ((rdx + (rbp_1 << 3)) - 0x30);\n            rcx = &rcx[1];\n            if (rbp_1 > 0xfff)\n            {\n                return 0;\n            }\n            rdx = *rcx;\n        } while ((rdx - 0x30) <= 7);\n        rax_8 = 0;\n        if (rdx == 0)\n        {\n            int32_t rbx_4 = ((rbp_1 & 0xc00) | 0x3ff);\n            if ((rcx - rbx) >= 5)\n            {\n                rbx_4 = 0xfff;\n            }\n            int16_t* rax_11 = sub_405740(0x20);\n            *rax_11 = 0x13d;\n            *(rax_11 + 4) = 0xfff;\n            *(rax_11 + 8) = rbp_1;\n            *(rax_11 + 0xc) = rbx_4;\n            *(rax_11 + 0x11) = 0;\n            return rax_11;\n        }\n    }\n    else\n    {\n        int64_t rdi = 1;\n        int64_t rdi_1;\n        if (rdx == 0)\n        {\n            rdi_1 = 0x10;\n        }\n        else\n        {\n            do\n            {\n                bool rax_2 = (rdx & 0xef) == 0x2d;\n                rdx = rdx == 0x2b;\n                rcx = &rcx[1];\n                char rax_3 = (rax_2 | rdx);\n                rdx = *rcx;\n                rdi = (rdi + rax_3);\n            } while (rdx != 0);\n            uint64_t rax_6;\n            rax_6 = (rdi >> 0x3c) != 0;\n            rdi_1 = (rdi << 4);\n            if ((rdi_1 < 0 || (rdi_1 >= 0 && rax_6 != 0)))\n            {\n                sub_405990();\n                /* no return */\n            }\n        }\n        rax_8 = sub_405740(rdi_1);\n        int64_t r10_1 = 0;\n        char r9_1;\n        do\n        {\n            int32_t rdi_2 = 0;\n            bool cond:1_1;\n            while (true)\n            {\n                r9_1 = *rbx;\n                cond:1_1 = r9_1 <= 0x61;\n                if (r9_1 == 0x61)\n                {\n                    rdi_2 = 0xfff;\n                }\n                else\n                {\n                    if (cond:1_1)\n                    {\n                        break;\n                    }\n                    if (r9_1 == 0x6f)\n                    {\n                        rdi_2 = (rdi_2 | 0x207);\n                    }\n                    else if (r9_1 == 0x75)\n                    {\n                        rdi_2 = (rdi_2 | 0x9c0);\n                    }\n                    else\n                    {\n                        if (r9_1 != 0x67)\n                        {\n                            break;\n                        }\n                        rdi_2 = (rdi_2 | 0x438);\n                    }\n                }\n                rbx = &rbx[1];\n            }\n            if ((!cond:1_1))\n            {\n                break;\n            }\n            if ((r9_1 != 0x2d && (r9_1 != 0x3d && r9_1 != 0x2b)))\n            {\n                break;\n            }\n            int64_t r11_1 = (r10_1 + 1);\n            char* r10_3 = ((r10_1 << 4) + rax_8);\n            while (true)\n            {\n                uint32_t rdx_5 = rbx[1];\n                void* r8_1 = &rbx[1];\n                bool cond:2_1 = rdx_5 <= 0x67;\n                int32_t rcx_1;\n                void* rsi_1;\n                if (rdx_5 == 0x67)\n                {\n                    rsi_1 = &rbx[2];\n                    rcx_1 = 0x38;\n                }\n                else\n                {\n                    if ((!cond:2_1))\n                    {\n                        rsi_1 = &rbx[2];\n                        if (rdx_5 != 0x6f)\n                        {\n                            rcx_1 = 0x1c0;\n                        }\n                        else\n                        {\n                            rcx_1 = 7;\n                        }\n                    }\n                    else if ((rdx_5 - 0x30) <= 7)\n                    {\n                        uint64_t rcx_4 = 0;\n                        do\n                        {\n                            rcx_4 = ((rdx_5 + (rcx_4 << 3)) - 0x30);\n                            r8_1 = (r8_1 + 1);\n                            if (rcx_4 > 0xfff)\n                            {\n                                break;\n                            }\n                            rdx_5 = *r8_1;\n                        } while ((rdx_5 - 0x30) <= 7);\n                        if (rcx_4 > 0xfff)\n                        {\n                            goto label_40306e;\n                        }\n                        if (rdi_2 != 0)\n                        {\n                            goto label_40306e;\n                        }\n                        if ((rdx_5 != 0 && rdx_5 != 0x2c))\n                        {\n                            goto label_40306e;\n                        }\n                        *r10_3 = r9_1;\n                        rbx = r8_1;\n                        r9_1 = rdx_5;\n                        rdi_2 = 0xfff;\n                        *(r10_3 + 8) = rcx_4;\n                        rcx_1 = 0xfff;\n                        r10_3[1] = 1;\n                        *(r10_3 + 4) = 0xfff;\n                    label_403102:\n                        *(r10_3 + 0xc) = rcx_1;\n                        int64_t rcx_2 = (r11_1 + 1);\n                        r10_3 = &r10_3[0x10];\n                        if (((r9_1 & 0xef) != 0x2d && r9_1 != 0x2b))\n                        {\n                            if (r9_1 == 0x2c)\n                            {\n                                rbx = &rbx[1];\n                                r10_1 = r11_1;\n                                break;\n                            }\n                            if (r9_1 != 0)\n                            {\n                                break;\n                            }\n                            *((rax_8 + (r11_1 << 4)) + 1) = 0;\n                            return rax_8;\n                        }\n                        r11_1 = rcx_2;\n                        continue;\n                    }\n                    if (((((!cond:2_1) && rdx_5 != 0x6f) && rdx_5 != 0x75) || cond:2_1))\n                    {\n                        char rsi_4 = (rdx_5 - 0x58);\n                        char rbx_1 = 1;\n                        rcx_1 = 0;\n                        if (rsi_4 <= 0x20)\n                        {\n                            do\n                            {\n                                switch (rsi_4)\n                                {\n                                    case 0:\n                                    {\n                                        rbx_1 = 2;\n                                        break;\n                                    }\n                                    case 1:\n                                    case 2:\n                                    case 3:\n                                    case 4:\n                                    case 5:\n                                    case 6:\n                                    case 7:\n                                    case 8:\n                                    case 9:\n                                    case 0xa:\n                                    case 0xb:\n                                    case 0xc:\n                                    case 0xd:\n                                    case 0xe:\n                                    case 0xf:\n                                    case 0x10:\n                                    case 0x11:\n                                    case 0x12:\n                                    case 0x13:\n                                    case 0x14:\n                                    case 0x15:\n                                    case 0x16:\n                                    case 0x17:\n                                    case 0x18:\n                                    case 0x19:\n                                    case 0x1d:\n                                    case 0x1e:\n                                    {\n                                        break;\n                                        break;\n                                    }\n                                    case 0x1a:\n                                    {\n                                        rcx_1 = (rcx_1 | 0x124);\n                                        break;\n                                    }\n                                    case 0x1b:\n                                    {\n                                        *rcx_1[1] = (*rcx_1[1] | 0xc);\n                                        break;\n                                    }\n                                    case 0x1c:\n                                    {\n                                        *rcx_1[1] = (*rcx_1[1] | 2);\n                                        break;\n                                    }\n                                    case 0x1f:\n                                    {\n                                        rcx_1 = (rcx_1 | 0x92);\n                                        break;\n                                    }\n                                    case 0x20:\n                                    {\n                                        rcx_1 = (rcx_1 | 0x49);\n                                        break;\n                                    }\n                                }\n                                r8_1 = (r8_1 + 1);\n                                rdx_5 = *r8_1;\n                                rsi_4 = (rdx_5 - 0x58);\n                            } while (rsi_4 <= 0x20);\n                        }\n                        *r10_3 = r9_1;\n                        r9_1 = rdx_5;\n                        r10_3[1] = rbx_1;\n                        rbx = r8_1;\n                        *(r10_3 + 4) = rdi_2;\n                        *(r10_3 + 8) = rcx_1;\n                        goto label_4030f8;\n                    }\n                }\n                r10_3[1] = 3;\n                *(r10_3 + 4) = rdi_2;\n                *(r10_3 + 8) = rcx_1;\n                *r10_3 = r9_1;\n                r9_1 = rbx[2];\n                rbx = rsi_1;\n            label_4030f8:\n                int32_t rdx_2 = (rcx_1 & rdi_2);\n                if (rdi_2 != 0)\n                {\n                    rcx_1 = rdx_2;\n                }\n                goto label_403102;\n            }\n        } while (r9_1 == 0x2c);\n    label_40306e:\n        free(rax_8);\n        rax_8 = 0;\n    }\n    return rax_8;\n}\n\n"
        },
        {
            "funcName": "sub_403330",
            "funcStartAddr": "0x403330",
            "funcEndAddr": "0x403384",
            "decompiledFuncCode": "int16_t* sub_403330(char* arg1)\n{\n    int16_t* rax_1 = nullptr;\n    void var_98;\n    if (__xstat(1, arg1, &var_98) == 0)\n    {\n        rax_1 = sub_405740(0x20);\n        *rax_1 = 0x13d;\n        *(rax_1 + 4) = 0xfff;\n        int32_t var_80;\n        *(rax_1 + 8) = var_80;\n        *(rax_1 + 0xc) = 0xfff;\n        *(rax_1 + 0x11) = 0;\n    }\n    return rax_1;\n}\n\n"
        },
        {
            "funcName": "sub_403390",
            "funcStartAddr": "0x403390",
            "funcEndAddr": "0x40350d",
            "decompiledFuncCode": "uint64_t sub_403390(int32_t arg1, char arg2, int32_t arg3, void* arg4, \n    int32_t* arg5)\n{\n    char r11_6 = *(arg4 + 1);\n    uint64_t rax_1 = (arg1 & 0xfff);\n    int32_t rbx = 0;\n    if (r11_6 != 0)\n    {\n        int32_t rdx = (!arg3);\n        while (true)\n        {\n            int32_t r12_1 = *(arg4 + 4);\n            int32_t r9_2 = *(arg4 + 8);\n            int32_t rdi;\n            int32_t r9_3;\n            int32_t r10_1;\n            char r11_5;\n            if (arg2 == 0)\n            {\n                r10_1 = -1;\n                rdi = 0;\n                if ((r11_6 == 2 && (rax_1 & 0x49) == 0))\n                {\n                label_403414:\n                    r11_5 = *arg4;\n                    r9_3 = (r9_2 & r10_1);\n                    if (r12_1 == 0)\n                    {\n                        goto label_403420;\n                    }\n                    goto label_403490;\n                }\n            }\n            else\n            {\n                int32_t r10_2 = *(arg4 + 0xc);\n                r10_1 = (r10_2 | 0xfffff3ff);\n                rdi = ((!r10_2) & 0xc00);\n            }\n            if (((arg2 != 0 && r11_6 == 2) || (arg2 == 0 && r11_6 == 2)))\n            {\n                r11_5 = *arg4;\n                r9_3 = ((r9_2 | 0x49) & r10_1);\n                int32_t r9_4;\n                if (r12_1 == 0)\n                {\n                label_403420:\n                    r9_4 = (r9_3 & rdx);\n                    if (r11_5 == 0x2d)\n                    {\n                    label_4034e0:\n                        rbx = (rbx | r9_4);\n                        rax_1 = (rax_1 & (!r9_4));\n                    label_40343d:\n                        arg4 = (arg4 + 0x10);\n                        r11_6 = *(arg4 + 1);\n                        if (r11_6 == 0)\n                        {\n                            break;\n                        }\n                        continue;\n                    }\n                    else if (r11_5 == 0x3d)\n                    {\n                        goto label_4034ab;\n                    }\n                }\n                else\n                {\n                label_403490:\n                    r9_4 = (r9_3 & r12_1);\n                    if (r11_5 == 0x2d)\n                    {\n                        goto label_4034e0;\n                    }\n                    if (r11_5 == 0x3d)\n                    {\n                        rdi = (rdi | (!r12_1));\n                        r10_1 = (!rdi);\n                    label_4034ab:\n                        arg4 = (arg4 + 0x10);\n                        r11_6 = *(arg4 + 1);\n                        rbx = (rbx | (r10_1 & 0xfff));\n                        rax_1 = ((rax_1 & rdi) | r9_4);\n                        if (r11_6 == 0)\n                        {\n                            break;\n                        }\n                        continue;\n                    }\n                }\n                if (r11_5 != 0x2b)\n                {\n                    goto label_40343d;\n                }\n                rbx = (rbx | r9_4);\n                rax_1 = (rax_1 | r9_4);\n                goto label_40343d;\n            }\n            if (((arg2 == 0 && r11_6 != 2) || (arg2 != 0 && r11_6 != 2)))\n            {\n                if (r11_6 != 3)\n                {\n                    goto label_403414;\n                }\n                int32_t r9_1 = (r9_2 & rax_1);\n                int32_t r11_1 = (r9_1 & 0x124);\n                int32_t r11_4 = ((!(r11_1 - r11_1)) & 0x124);\n                int32_t r13_1;\n                r13_1 = (r11_4 | 0x92);\n                if ((r9_1 & 0x92) != 0)\n                {\n                    r11_4 = r13_1;\n                }\n                int32_t r13_3 = (r11_4 | 0x49);\n                if ((r9_1 & 0x49) != 0)\n                {\n                    r11_4 = r13_3;\n                }\n                r9_2 = (r9_1 | r11_4);\n                goto label_403414;\n            }\n        }\n    }\n    if (arg5 != 0)\n    {\n        *arg5 = rbx;\n    }\n    return rax_1;\n}\n\n"
        },
        {
            "funcName": "sub_403510",
            "funcStartAddr": "0x403510",
            "funcEndAddr": "0x4035a9",
            "decompiledFuncCode": "char* sub_403510(char* arg1)\n{\n    if (arg1 == 0)\n    {\n        fwrite(\"A NULL argv[0] was passed throug\u2026\", 1, 0x37, stderr);\n        abort();\n        /* no return */\n    }\n    void* rbx = arg1;\n    char* rax = strrchr(arg1, 0x2f);\n    if (rax != 0)\n    {\n        void* r8_1 = &rax[1];\n        int64_t rdx_2 = (r8_1 - rbx);\n        bool c_1 = rdx_2 < 6;\n        bool z_1 = rdx_2 == 6;\n        if ((!(z_1 || (rdx_2 - 6) < 0 != (rdx_2 - 6))))\n        {\n            void* rsi_1 = &rax[-6];\n            void* const rdi = \"/.libs/\";\n            int64_t rcx_1 = 7;\n            while (rcx_1 != 0)\n            {\n                char temp0_1 = *rsi_1;\n                char temp1_1 = *rdi;\n                c_1 = temp0_1 < temp1_1;\n                z_1 = temp0_1 == temp1_1;\n                rsi_1 = (rsi_1 + 1);\n                rdi = (rdi + 1);\n                rcx_1 = (rcx_1 - 1);\n                if ((!z_1))\n                {\n                    break;\n                }\n            }\n            rdx_2 = ((!z_1) && (!c_1));\n            rdx_2 = (rdx_2 - 0);\n            bool c_2 = false;\n            bool z_2 = (rdx_2 & rdx_2) == 0;\n            if (z_2)\n            {\n                void* const rdi_1 = &data_40b680;\n                int64_t rcx_2 = 3;\n                void* rsi_2 = r8_1;\n                rbx = r8_1;\n                while (rcx_2 != 0)\n                {\n                    char temp2_1 = *rsi_2;\n                    char temp3_1 = *rdi_1;\n                    c_2 = temp2_1 < temp3_1;\n                    z_2 = temp2_1 == temp3_1;\n                    rsi_2 = (rsi_2 + 1);\n                    rdi_1 = (rdi_1 + 1);\n                    rcx_2 = (rcx_2 - 1);\n                    if ((!z_2))\n                    {\n                        break;\n                    }\n                }\n                rdx_2 = ((!z_2) && (!c_2));\n                rdx_2 = (rdx_2 - 0);\n                if (rdx_2 == 0)\n                {\n                    rbx = &rax[4];\n                    program_invocation_short_name = rbx;\n                }\n            }\n        }\n    }\n    data_60f358 = rbx;\n    __progname_full = rbx;\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_4035b0",
            "funcStartAddr": "0x4035b0",
            "funcEndAddr": "0x4036a2",
            "decompiledFuncCode": "char* sub_4035b0(char* arg1, int32_t arg2)\n{\n    char* rax = dcgettext(nullptr, arg1, 5);\n    char* rbx = rax;\n    if (arg1 == rax)\n    {\n        char* rax_2 = sub_40a020();\n        char rdx_2 = (*rax_2 & 0xdf);\n        if (rdx_2 != 0x55)\n        {\n            if (rdx_2 != 0x47)\n            {\n            label_403691:\n                void* const rbx_1 = &data_40b684;\n                if (arg2 != 9)\n                {\n                    rbx_1 = \"'\";\n                }\n                return rbx_1;\n            }\n            if ((rax_2[1] & 0xdf) != 0x42)\n            {\n                goto label_403691;\n            }\n            if (rax_2[2] != 0x31)\n            {\n                goto label_403691;\n            }\n            if (rax_2[3] != 0x38)\n            {\n                goto label_403691;\n            }\n            if (rax_2[4] != 0x30)\n            {\n                goto label_403691;\n            }\n            if (rax_2[5] != 0x33)\n            {\n                goto label_403691;\n            }\n            if (rax_2[6] != 0x30)\n            {\n                goto label_403691;\n            }\n            if (rax_2[7] != 0)\n            {\n                goto label_403691;\n            }\n            bool cond:2_1 = *rbx != 0x60;\n            rbx = &data_40b68d;\n            if (cond:2_1)\n            {\n                rbx = &data_40b68a;\n            }\n        }\n        else\n        {\n            if ((rax_2[1] & 0xdf) != 0x54)\n            {\n                goto label_403691;\n            }\n            if ((rax_2[2] & 0xdf) != 0x46)\n            {\n                goto label_403691;\n            }\n            if (rax_2[3] != 0x2d)\n            {\n                goto label_403691;\n            }\n            if (rax_2[4] != 0x38)\n            {\n                goto label_403691;\n            }\n            if (rax_2[5] != 0)\n            {\n                goto label_403691;\n            }\n            bool cond:1_1 = *rbx != 0x60;\n            rbx = &data_40b691;\n            if (cond:1_1)\n            {\n                rbx = &data_40b686;\n            }\n        }\n    }\n    return rbx;\n}\n\n"
        },
        {
            "funcName": "sub_4036b0",
            "funcStartAddr": "0x401bf0",
            "funcEndAddr": "0x4048d1",
            "decompiledFuncCode": "int64_t sub_4036b0(char* arg1, uint64_t arg2, uint64_t arg3, uint64_t arg4, \n    uint32_t arg5, int32_t arg6, int64_t arg7, char* arg8, char* arg9)\n{\n    char* r15 = arg1;\n    uint64_t r14 = arg2;\n    uint32_t r13 = arg5;\n    uint64_t rax;\n    uint64_t rdx;\n    rax = __ctype_get_mb_cur_max();\n    int32_t rbp_1 = (arg6 & 2);\n    bool var_5c = rbp_1 != 0;\n    bool cond:1 = r13 == 0xa;\n    if (r13 > 0xa)\n    {\n        abort();\n        /* no return */\n    }\n    uint64_t r11 = arg4;\n    uint64_t var_c0;\n    char var_a9;\n    uint64_t var_a0_1;\n    char const* const var_78_1;\n    uint64_t var_70;\n    char var_5b_1;\n    uint64_t rax_1;\n    int64_t rbx_1;\n    uint32_t r10;\n    if ((r13 == 1 || (r13 == 4 && rbp_1 != 0)))\n    {\n        var_a9 = 1;\n        r10 = 0;\n        rbx_1 = 0;\n        r13 = 2;\n        var_5b_1 = 0;\n        var_70 = 0;\n        var_5c = true;\n        var_c0 = 0;\n        var_a0_1 = 1;\n        var_78_1 = \"'\";\n    label_403748:\n        while (true)\n        {\n            uint64_t r9 = r11;\n            int64_t r12_1 = 0;\n            uint32_t r11_1 = r13;\n            while (true)\n            {\n                r13 = r9 != r12_1;\n                if (r9 == -1)\n                {\n                    r13 = *(arg3 + r12_1) != 0;\n                }\n                uint32_t r13_1;\n                if (r13 == 0)\n                {\n                    r11 = r9;\n                    rdx = r11_1 == 2;\n                    if ((rbx_1 == 0 && (var_5c & rdx) != 0))\n                    {\n                        r13_1 = 2;\n                    label_403abc:\n                        if (var_c0 != 0)\n                        {\n                            r13_1 = 4;\n                        }\n                        goto label_403b04;\n                    }\n                    rax_1 = (var_5c ^ 1);\n                    rdx = (rdx & rax_1);\n                    if (rdx == 0)\n                    {\n                        rdx = rax_1;\n                    }\n                    else if (var_5b_1 != 0)\n                    {\n                        if (var_a9 != 0)\n                        {\n                            rbx_1 = sub_4036b0(r15, var_70, arg3, r11, 5, arg6, arg7, arg8, arg9);\n                        }\n                        else\n                        {\n                            rax_1 = r14 == 0;\n                            rdx = var_70 != 0;\n                            rax_1 = (rax_1 & rdx);\n                            if (rax_1 != 0)\n                            {\n                                r14 = var_70;\n                                break;\n                            }\n                            rdx = var_5b_1;\n                        }\n                    }\n                    if (((rdx == 0 || (rdx != 0 && var_5b_1 == 0)) || ((rdx != 0 && var_5b_1 != 0) && var_a9 == 0)))\n                    {\n                        if ((var_78_1 != 0 && rdx != 0))\n                        {\n                            char const rdx_17 = *var_78_1;\n                            if (rdx_17 != 0)\n                            {\n                                void* rax_51 = (var_78_1 - rbx_1);\n                                do\n                                {\n                                    if (r14 > rbx_1)\n                                    {\n                                        r15[rbx_1] = rdx_17;\n                                    }\n                                    rbx_1 = (rbx_1 + 1);\n                                    rdx_17 = *(rax_51 + rbx_1);\n                                } while (rdx_17 != 0);\n                            }\n                        }\n                        if (r14 > rbx_1)\n                        {\n                            r15[rbx_1] = 0;\n                        }\n                    }\n                    goto label_403b1b;\n                }\n                rax_1 = r11_1 != 2;\n                rax_1 = (rax_1 & var_c0);\n                char* r8 = (arg3 + r12_1);\n                uint64_t var_b8;\n                var_b8 = rax_1;\n                uint32_t rax_8;\n                uint64_t rax_12;\n                char rax_14;\n                int32_t rcx_2;\n                uint64_t rbp_3;\n                if (rax_1 == 0)\n                {\n                    rbp_3 = *r8;\n                    if (rbp_3 > 0x7e)\n                    {\n                        goto label_403c55;\n                    }\n                    switch (rbp_3)\n                    {\n                        case 0:\n                        {\n                            if (var_c0 == 0)\n                            {\n                                if ((arg6 & 1) != 0)\n                                {\n                                    r12_1 = (r12_1 + 1);\n                                    continue;\n                                }\n                                else\n                                {\n                                    var_b8 = 0;\n                                    rdx = r11_1 == 2;\n                                    r13 = 0;\n                                    rbp_3 = 0;\n                                }\n                                goto label_4038a5;\n                            }\n                            goto label_403b90;\n                        }\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 0xe:\n                        case 0xf:\n                        case 0x10:\n                        case 0x11:\n                        case 0x12:\n                        case 0x13:\n                        case 0x14:\n                        case 0x15:\n                        case 0x16:\n                        case 0x17:\n                        case 0x18:\n                        case 0x19:\n                        case 0x1a:\n                        case 0x1b:\n                        case 0x1c:\n                        case 0x1d:\n                        case 0x1e:\n                        case 0x1f:\n                        case 0x40:\n                        {\n                            goto label_403c55;\n                        }\n                        case 7:\n                        {\n                            rbp_3 = 7;\n                            rcx_2 = 0x61;\n                            rdx = r11_1 == 2;\n                            goto label_403a80;\n                        }\n                        case 8:\n                        {\n                            rbp_3 = 8;\n                            rcx_2 = 0x62;\n                            rdx = r11_1 == 2;\n                        label_403a80:\n                            if (var_c0 == 0)\n                            {\n                                goto label_403a8b;\n                            }\n                            rbp_3 = rcx_2;\n                            r13 = 0;\n                        label_4038e7:\n                            if (var_5c == 0)\n                            {\n                                goto label_4038f8;\n                            }\n                        label_403ab0:\n                            r13_1 = r11_1;\n                            rax_14 = rdx;\n                            r11 = r9;\n                            goto label_403ab8;\n                        }\n                        case 9:\n                        {\n                            rbp_3 = 9;\n                            rcx_2 = 0x74;\n                            goto label_403ceb;\n                        }\n                        case 0xa:\n                        {\n                            rbp_3 = 0xa;\n                            rcx_2 = 0x6e;\n                        label_403ceb:\n                            rdx = r11_1 == 2;\n                            bool rax_26 = (var_5c & rdx);\n                            var_b8 = rax_26;\n                            if (rax_26 != 0)\n                            {\n                            label_403cfa:\n                                r11 = r9;\n                                r13_1 = 2;\n                                goto label_403abc;\n                            }\n                            goto label_403a80;\n                        }\n                        case 0xb:\n                        {\n                            rbp_3 = 0xb;\n                            rcx_2 = 0x76;\n                            rdx = r11_1 == 2;\n                            goto label_403a80;\n                        }\n                        case 0xc:\n                        {\n                            rbp_3 = 0xc;\n                            rcx_2 = 0x66;\n                            rdx = r11_1 == 2;\n                            goto label_403a80;\n                        }\n                        case 0xd:\n                        {\n                            rbp_3 = 0xd;\n                            rcx_2 = 0x72;\n                            goto label_403ceb;\n                        }\n                        case 0x20:\n                        {\n                            rbp_3 = 0x20;\n                            rdx = r11_1 == 2;\n                            goto label_403886;\n                        }\n                        case 0x21:\n                        case 0x22:\n                        case 0x24:\n                        case 0x26:\n                        case 0x28:\n                        case 0x29:\n                        case 0x2a:\n                        case 0x3b:\n                        case 0x3c:\n                        case 0x3d:\n                        case 0x3e:\n                        case 0x5b:\n                        case 0x5e:\n                        case 0x60:\n                        case 0x7c:\n                        {\n                            rdx = r11_1 == 2;\n                            r13 = 0;\n                        label_403886:\n                            if (var_5c == 0)\n                            {\n                                goto label_4038a5;\n                            }\n                            if (rdx == 0)\n                            {\n                                goto label_4038a5;\n                            }\n                            goto label_403cfa;\n                        }\n                        case 0x23:\n                        case 0x7e:\n                        {\n                            rdx = r11_1 == 2;\n                        label_40387d:\n                            if (r12_1 != 0)\n                            {\n                                goto label_403a8b;\n                            }\n                            goto label_403886;\n                        }\n                        case 0x25:\n                        case 0x2b:\n                        case 0x2c:\n                        case 0x2d:\n                        case 0x2e:\n                        case 0x2f:\n                        case 0x30:\n                        case 0x31:\n                        case 0x32:\n                        case 0x33:\n                        case 0x34:\n                        case 0x35:\n                        case 0x36:\n                        case 0x37:\n                        case 0x38:\n                        case 0x39:\n                        case 0x3a:\n                        case 0x41:\n                        case 0x42:\n                        case 0x43:\n                        case 0x44:\n                        case 0x45:\n                        case 0x46:\n                        case 0x47:\n                        case 0x48:\n                        case 0x49:\n                        case 0x4a:\n                        case 0x4b:\n                        case 0x4c:\n                        case 0x4d:\n                        case 0x4e:\n                        case 0x4f:\n                        case 0x50:\n                        case 0x51:\n                        case 0x52:\n                        case 0x53:\n                        case 0x54:\n                        case 0x55:\n                        case 0x56:\n                        case 0x57:\n                        case 0x58:\n                        case 0x59:\n                        case 0x5a:\n                        case 0x5d:\n                        case 0x5f:\n                        case 0x61:\n                        case 0x62:\n                        case 0x63:\n                        case 0x64:\n                        case 0x65:\n                        case 0x66:\n                        case 0x67:\n                        case 0x68:\n                        case 0x69:\n                        case 0x6a:\n                        case 0x6b:\n                        case 0x6c:\n                        case 0x6d:\n                        case 0x6e:\n                        case 0x6f:\n                        case 0x70:\n                        case 0x71:\n                        case 0x72:\n                        case 0x73:\n                        case 0x74:\n                        case 0x75:\n                        case 0x76:\n                        case 0x77:\n                        case 0x78:\n                        case 0x79:\n                        case 0x7a:\n                        {\n                        label_403cb0:\n                            rdx = r11_1 == 2;\n                        label_4038a5:\n                            rax_8 = ((((var_c0 ^ 1) | rdx) ^ 1) | var_5c);\n                            if (rax_8 == 0)\n                            {\n                                goto label_4039ac;\n                            }\n                            goto label_4038af;\n                        }\n                        case 0x27:\n                        {\n                            goto label_403a2d;\n                        }\n                        case 0x3f:\n                        {\n                            goto label_4039fd;\n                        }\n                        case 0x5c:\n                        {\n                            if (r11_1 != 2)\n                            {\n                                goto label_403a5a;\n                            }\n                            if (var_5c != 0)\n                            {\n                                goto label_4047ed;\n                            }\n                            r12_1 = (r12_1 + 1);\n                            rax_12 = r10;\n                            r13 = 0;\n                            rbp_3 = 0x5c;\n                            goto label_4039c4;\n                        }\n                        case 0x7b:\n                        case 0x7d:\n                        {\n                            goto label_403859;\n                        }\n                    }\n                }\n                else\n                {\n                    char var_98;\n                    uint64_t var_90;\n                    uint32_t var_88;\n                    char rax_27;\n                    char rax_28;\n                    if (var_a0_1 != 0)\n                    {\n                        int64_t rbp_2 = (r12_1 + var_a0_1);\n                        if ((r9 == -1 && var_a0_1 > 1))\n                        {\n                            var_90 = r10;\n                            var_98 = r8;\n                            uint64_t rax_3;\n                            rax_3 = strlen(arg3);\n                            r10 = var_90;\n                            r8 = var_98;\n                            r9 = rax_3;\n                        }\n                        if (rbp_2 > r9)\n                        {\n                            goto label_403e50;\n                        }\n                        uint64_t var_80;\n                        var_80 = r11_1;\n                        var_88 = r9;\n                        var_90 = r10;\n                        var_98 = r8;\n                        int32_t rax_4;\n                        rax_4 = memcmp(r8, var_78_1, var_a0_1);\n                        r8 = var_98;\n                        r10 = var_90;\n                        r9 = var_88;\n                        r11_1 = var_80;\n                        if (rax_4 != 0)\n                        {\n                            goto label_403e50;\n                        }\n                        if (var_5c != 0)\n                        {\n                        label_4047a0:\n                            r13_1 = r11_1;\n                            r11 = r9;\n                        label_403b04:\n                            rbx_1 = sub_4036b0(r15, r14, arg3, r11, r13_1, (arg6 & 0xfffffffd), 0, arg8, arg9);\n                        label_403b1b:\n                            return rbx_1;\n                        }\n                        rbp_3 = *r8;\n                        if (rbp_3 > 0x7e)\n                        {\n                            goto label_403c55;\n                        }\n                        switch (rbp_3)\n                        {\n                            case 0:\n                            {\n                                goto label_403ba7;\n                            }\n                            case 1:\n                            case 2:\n                            case 3:\n                            case 4:\n                            case 5:\n                            case 6:\n                            case 0xe:\n                            case 0xf:\n                            case 0x10:\n                            case 0x11:\n                            case 0x12:\n                            case 0x13:\n                            case 0x14:\n                            case 0x15:\n                            case 0x16:\n                            case 0x17:\n                            case 0x18:\n                            case 0x19:\n                            case 0x1a:\n                            case 0x1b:\n                            case 0x1c:\n                            case 0x1d:\n                            case 0x1e:\n                            case 0x1f:\n                            case 0x40:\n                            {\n                                goto label_403c55;\n                            }\n                            case 7:\n                            {\n                                rbp_3 = 0x61;\n                            label_403b70:\n                                r13 = 0;\n                                goto label_40392b;\n                            }\n                            case 8:\n                            {\n                                rdx = 0;\n                                r13 = 0;\n                                rbp_3 = 0x62;\n                            label_4038f8:\n                                uint32_t rax_10;\n                                rax_10 = ((r10 ^ 1) & rdx);\n                                if (rax_10 != 0)\n                                {\n                                    if (r14 > rbx_1)\n                                    {\n                                        r15[rbx_1] = 0x27;\n                                    }\n                                    if ((rbx_1 + 1) < r14)\n                                    {\n                                        r15[(rbx_1 + 1)] = 0x24;\n                                    }\n                                    if ((rbx_1 + 2) < r14)\n                                    {\n                                        r15[(rbx_1 + 2)] = 0x27;\n                                    }\n                                    rbx_1 = (rbx_1 + 3);\n                                    r10 = rax_10;\n                                }\n                            label_40392b:\n                                if (r14 <= rbx_1)\n                                {\n                                    goto label_403935;\n                                }\n                                r15[rbx_1] = 0x5c;\n                            label_403935:\n                                rbx_1 = (rbx_1 + 1);\n                                r12_1 = (r12_1 + 1);\n                                goto label_40393d;\n                            }\n                            case 9:\n                            {\n                                goto label_403b20;\n                            }\n                            case 0xa:\n                            {\n                                goto label_403a98;\n                            }\n                            case 0xb:\n                            {\n                                goto label_403b80;\n                            }\n                            case 0xc:\n                            {\n                                goto label_403b60;\n                            }\n                            case 0xd:\n                            {\n                                goto label_403b49;\n                            }\n                            case 0x20:\n                            {\n                                rax_27 = var_b8;\n                                goto label_403eaa;\n                            }\n                            case 0x21:\n                            case 0x22:\n                            case 0x24:\n                            case 0x26:\n                            case 0x28:\n                            case 0x29:\n                            case 0x2a:\n                            case 0x3b:\n                            case 0x3c:\n                            case 0x3d:\n                            case 0x3e:\n                            case 0x5b:\n                            case 0x5e:\n                            case 0x60:\n                            case 0x7c:\n                            {\n                                goto label_403b35;\n                            }\n                            case 0x23:\n                            case 0x7e:\n                            {\n                                rax_28 = var_b8;\n                                goto label_403e8a;\n                            }\n                            case 0x25:\n                            case 0x2b:\n                            case 0x2c:\n                            case 0x2d:\n                            case 0x2e:\n                            case 0x2f:\n                            case 0x30:\n                            case 0x31:\n                            case 0x32:\n                            case 0x33:\n                            case 0x34:\n                            case 0x35:\n                            case 0x36:\n                            case 0x37:\n                            case 0x38:\n                            case 0x39:\n                            case 0x3a:\n                            case 0x41:\n                            case 0x42:\n                            case 0x43:\n                            case 0x44:\n                            case 0x45:\n                            case 0x46:\n                            case 0x47:\n                            case 0x48:\n                            case 0x49:\n                            case 0x4a:\n                            case 0x4b:\n                            case 0x4c:\n                            case 0x4d:\n                            case 0x4e:\n                            case 0x4f:\n                            case 0x50:\n                            case 0x51:\n                            case 0x52:\n                            case 0x53:\n                            case 0x54:\n                            case 0x55:\n                            case 0x56:\n                            case 0x57:\n                            case 0x58:\n                            case 0x59:\n                            case 0x5a:\n                            case 0x5d:\n                            case 0x5f:\n                            case 0x61:\n                            case 0x62:\n                            case 0x63:\n                            case 0x64:\n                            case 0x65:\n                            case 0x66:\n                            case 0x67:\n                            case 0x68:\n                            case 0x69:\n                            case 0x6a:\n                            case 0x6b:\n                            case 0x6c:\n                            case 0x6d:\n                            case 0x6e:\n                            case 0x6f:\n                            case 0x70:\n                            case 0x71:\n                            case 0x72:\n                            case 0x73:\n                            case 0x74:\n                            case 0x75:\n                            case 0x76:\n                            case 0x77:\n                            case 0x78:\n                            case 0x79:\n                            case 0x7a:\n                            {\n                                rax_27 = var_b8;\n                                goto label_403e72;\n                            }\n                            case 0x27:\n                            {\n                                goto label_403a2d;\n                            }\n                            case 0x3f:\n                            {\n                                goto label_4039fd;\n                            }\n                            case 0x5c:\n                            {\n                                goto label_403a5a;\n                            }\n                            case 0x7b:\n                            case 0x7d:\n                            {\n                                goto label_403859;\n                            }\n                        }\n                    }\n                    else\n                    {\n                    label_403e50:\n                        rbp_3 = *r8;\n                        if (rbp_3 > 0x7e)\n                        {\n                        label_403c50:\n                            var_b8 = 0;\n                        label_403c55:\n                            uint64_t rdi_4;\n                            if (rax == 1)\n                            {\n                                r10 = r10;\n                                rdi_4 = 1;\n                                rax_12 = (*__ctype_b_loc()[rbp_3] & 0x4000);\n                                r13 = rax_12 != 0;\n                                rdx = rax_12 == 0;\n                                rdx = (rdx & var_c0);\n                            label_403ca4:\n                                if (rdx == 0)\n                                {\n                                    goto label_403cb0;\n                                }\n                                rdx = var_c0;\n                                r13 = 0;\n                            label_4041a1:\n                                var_98 = r13;\n                                int32_t rsi_7 = 0;\n                                int64_t rcx_11 = (rdi_4 + r12_1);\n                                char rdi_9 = var_b8;\n                                while (true)\n                                {\n                                    if (rdx != 0)\n                                    {\n                                        rax_12 = r11_1 == 2;\n                                        if (var_5c != 0)\n                                        {\n                                            break;\n                                        }\n                                        rax_12 = (rax_12 & (r10 ^ 1));\n                                        if (rax_12 != 0)\n                                        {\n                                            if (r14 > rbx_1)\n                                            {\n                                                r15[rbx_1] = 0x27;\n                                            }\n                                            if (r14 > (rbx_1 + 1))\n                                            {\n                                                r15[(rbx_1 + 1)] = 0x24;\n                                            }\n                                            if (r14 > (rbx_1 + 2))\n                                            {\n                                                r15[(rbx_1 + 2)] = 0x27;\n                                            }\n                                            rbx_1 = (rbx_1 + 3);\n                                            r10 = rax_12;\n                                        }\n                                        if (r14 > rbx_1)\n                                        {\n                                            r15[rbx_1] = 0x5c;\n                                        }\n                                        if (r14 > (rbx_1 + 1))\n                                        {\n                                            r15[(rbx_1 + 1)] = ((rbp_3 >> 6) + 0x30);\n                                        }\n                                        if (r14 > (rbx_1 + 2))\n                                        {\n                                            int32_t rax_40;\n                                            rax_40 = (rbp_3 >> 3);\n                                            r15[(rbx_1 + 2)] = ((rax_40 & 7) + 0x30);\n                                        }\n                                        r12_1 = (r12_1 + 1);\n                                        rbx_1 = (rbx_1 + 3);\n                                        rbp_3 = ((rbp_3 & 7) + 0x30);\n                                        if (r12_1 >= rcx_11)\n                                        {\n                                            break;\n                                        }\n                                        rsi_7 = rdx;\n                                    }\n                                    else\n                                    {\n                                        rax_12 = ((rsi_7 ^ 1) & r10);\n                                        if (rdi_9 != 0)\n                                        {\n                                            if (r14 > rbx_1)\n                                            {\n                                                r15[rbx_1] = 0x5c;\n                                            }\n                                            rbx_1 = (rbx_1 + 1);\n                                        }\n                                        r12_1 = (r12_1 + 1);\n                                        if (r12_1 >= rcx_11)\n                                        {\n                                            break;\n                                        }\n                                        if (rax_12 == 0)\n                                        {\n                                            rdi_9 = 0;\n                                        }\n                                        else\n                                        {\n                                            if (r14 > rbx_1)\n                                            {\n                                                r15[rbx_1] = 0x27;\n                                            }\n                                            if (r14 > (rbx_1 + 1))\n                                            {\n                                                r15[(rbx_1 + 1)] = 0x27;\n                                            }\n                                            rbx_1 = (rbx_1 + 2);\n                                            rdi_9 = 0;\n                                            r10 = 0;\n                                        }\n                                    }\n                                    if (r14 > rbx_1)\n                                    {\n                                        r15[rbx_1] = rbp_3;\n                                    }\n                                    rbp_3 = *(arg3 + r12_1);\n                                    rbx_1 = (rbx_1 + 1);\n                                }\n                                if ((rdx == 0 && r12_1 >= rcx_11))\n                                {\n                                    r13 = var_98;\n                                    goto label_4039c4;\n                                }\n                                if ((rdx != 0 && var_5c != 0))\n                                {\n                                    r13_1 = r11_1;\n                                    var_c0 = rax_12;\n                                    r11 = r9;\n                                    goto label_403abc;\n                                }\n                                r13 = var_98;\n                                goto label_40393d;\n                            }\n                            mbstate_t var_40;\n                            var_40.__count = 0;\n                            var_40.__value = 0;\n                            if (r9 == -1)\n                            {\n                                var_90 = r10;\n                                var_98 = r8;\n                                r10 = var_90;\n                                r8 = var_98;\n                                r9 = strlen(arg3);\n                            }\n                            uint64_t rbx_2 = 0;\n                            char var_5a_1 = r10;\n                            char var_59_1 = rbp_3;\n                            var_88 = r15;\n                            var_98 = r9;\n                            var_90 = r11_1;\n                            while (true)\n                            {\n                                int64_t r15_1 = (r12_1 + rbx_2);\n                                char* rbp_4 = (arg3 + r15_1);\n                                uint32_t var_44;\n                                rax_12 = sub_408af0(&var_44, rbp_4, (var_98 - r15_1), &var_40);\n                                if (rax_12 != 0)\n                                {\n                                    if (rax_12 == -1)\n                                    {\n                                        rdi_4 = rbx_2;\n                                        rbp_3 = var_59_1;\n                                        r13 = 0;\n                                        r10 = var_5a_1;\n                                        r15 = var_88;\n                                        r9 = var_98;\n                                        r11_1 = var_90;\n                                        rdx = var_c0;\n                                        break;\n                                    }\n                                    if (rax_12 == -2)\n                                    {\n                                        r9 = var_98;\n                                        rax_12 = rbx_2;\n                                        rdi_4 = rbx_2;\n                                        r10 = var_5a_1;\n                                        rbp_3 = var_59_1;\n                                        r15 = var_88;\n                                        r11_1 = var_90;\n                                        if ((r15_1 < r9 && *rbp_4 != 0))\n                                        {\n                                            do\n                                            {\n                                                rax_12 = (rax_12 + 1);\n                                                if ((r12_1 + rax_12) >= r9)\n                                                {\n                                                    break;\n                                                }\n                                            } while (r8[rax_12] != 0);\n                                            rdi_4 = rax_12;\n                                        }\n                                        rdx = var_c0;\n                                        r13 = 0;\n                                        break;\n                                    }\n                                    if ((var_90 == 2 && (var_5c != 0 && rax_12 != 1)))\n                                    {\n                                        char* rax_34 = ((arg3 + r15_1) + 1);\n                                        int64_t rsi_6 = ((arg3 + rax_12) + r15_1);\n                                        char rcx_9;\n                                        do\n                                        {\n                                            rcx_9 = (*rax_34 - 0x5b);\n                                            if ((rcx_9 <= 0x21 && ((1 << rcx_9) & 0x20000002b) != 0))\n                                            {\n                                                break;\n                                            }\n                                            rax_34 = &rax_34[1];\n                                        } while (rsi_6 != rax_34);\n                                        if ((rcx_9 <= 0x21 && ((1 << rcx_9) & 0x20000002b) != 0))\n                                        {\n                                            r15 = var_88;\n                                            r13_1 = 2;\n                                            r11 = var_98;\n                                            goto label_403abc;\n                                        }\n                                    }\n                                    mbstate_t* rdi_7 = &var_40;\n                                    if (iswprint(var_44) == 0)\n                                    {\n                                        r13 = 0;\n                                    }\n                                    rbx_2 = (rbx_2 + rax_12);\n                                    if (mbsinit(rdi_7) == 0)\n                                    {\n                                        continue;\n                                    }\n                                }\n                                rdi_4 = rbx_2;\n                                rbp_3 = var_59_1;\n                                r10 = var_5a_1;\n                                r15 = var_88;\n                                r9 = var_98;\n                                r11_1 = var_90;\n                                rdx = ((r13 ^ 1) & var_c0);\n                                break;\n                            }\n                            if (rdi_4 > 1)\n                            {\n                                goto label_4041a1;\n                            }\n                            goto label_403ca4;\n                        }\n                        switch (rbp_3)\n                        {\n                            case 0:\n                            {\n                            label_403b90:\n                                if (var_5c != 0)\n                                {\n                                    r13_1 = r11_1;\n                                    r11 = r9;\n                                    var_c0 = r13_1 == 2;\n                                    goto label_403abc;\n                                }\n                                var_b8 = 0;\n                            label_403ba7:\n                                rdx = r11_1 == 2;\n                                rax_8 = ((r10 ^ 1) & rdx);\n                                int64_t rcx_6;\n                                if (rax_8 == 0)\n                                {\n                                    rcx_6 = rbx_1;\n                                    if (r14 <= rbx_1)\n                                    {\n                                        goto label_403bf2;\n                                    }\n                                    rax_8 = r10;\n                                label_403bea:\n                                    r15[rcx_6] = 0x5c;\n                                    r10 = rax_8;\n                                label_403bf2:\n                                    rbx_1 = (rcx_6 + 1);\n                                    if (r11_1 == 2)\n                                    {\n                                        rax_8 = r13;\n                                        rbp_3 = 0x30;\n                                        r13 = 0;\n                                        goto label_4039ac;\n                                    }\n                                    rbp_3 = 0x30;\n                                    if ((r12_1 + 1) < r9)\n                                    {\n                                        char rax_20 = *((arg3 + r12_1) + 1);\n                                        var_98 = rax_20;\n                                        if ((rax_20 - 0x30) <= 9)\n                                        {\n                                            if (r14 > rbx_1)\n                                            {\n                                                r15[rbx_1] = 0x30;\n                                            }\n                                            if (r14 > (rcx_6 + 2))\n                                            {\n                                                r15[(rcx_6 + 2)] = 0x30;\n                                            }\n                                            rbx_1 = (rcx_6 + 3);\n                                            rbp_3 = 0x30;\n                                        }\n                                    }\n                                    goto label_403c33;\n                                }\n                                if (r14 > rbx_1)\n                                {\n                                    r15[rbx_1] = 0x27;\n                                }\n                                if (r14 > (rbx_1 + 1))\n                                {\n                                    r15[(rbx_1 + 1)] = 0x24;\n                                }\n                                if (r14 > (rbx_1 + 2))\n                                {\n                                    r15[(rbx_1 + 2)] = 0x27;\n                                }\n                                rcx_6 = (rbx_1 + 3);\n                                if (r14 > rcx_6)\n                                {\n                                    goto label_403bea;\n                                }\n                                rbx_1 = (rbx_1 + 4);\n                                r10 = rax_8;\n                                r13 = 0;\n                                rbp_3 = 0x30;\n                                goto label_4039ac;\n                            }\n                            case 1:\n                            case 2:\n                            case 3:\n                            case 4:\n                            case 5:\n                            case 6:\n                            case 0xe:\n                            case 0xf:\n                            case 0x10:\n                            case 0x11:\n                            case 0x12:\n                            case 0x13:\n                            case 0x14:\n                            case 0x15:\n                            case 0x16:\n                            case 0x17:\n                            case 0x18:\n                            case 0x19:\n                            case 0x1a:\n                            case 0x1b:\n                            case 0x1c:\n                            case 0x1d:\n                            case 0x1e:\n                            case 0x1f:\n                            case 0x40:\n                            {\n                                goto label_403c50;\n                            }\n                            case 7:\n                            {\n                                rbp_3 = 0x61;\n                                goto label_403b65;\n                            }\n                            case 8:\n                            {\n                                rbp_3 = 0x62;\n                                goto label_403a9d;\n                            }\n                            case 9:\n                            {\n                            label_403b20:\n                                rbp_3 = 0x74;\n                                goto label_403a9d;\n                            }\n                            case 0xa:\n                            {\n                            label_403a98:\n                                rbp_3 = 0x6e;\n                            label_403a9d:\n                                rdx = 0;\n                                r13 = 0;\n                                if (var_5c != 0)\n                                {\n                                    goto label_403ab0;\n                                }\n                                goto label_4038f8;\n                            }\n                            case 0xb:\n                            {\n                            label_403b80:\n                                rbp_3 = 0x76;\n                                goto label_403b65;\n                            }\n                            case 0xc:\n                            {\n                            label_403b60:\n                                rbp_3 = 0x66;\n                            label_403b65:\n                                if (var_5c == 0)\n                                {\n                                    goto label_403b70;\n                                }\n                                r13_1 = r11_1;\n                                rax_14 = 0;\n                                r11 = r9;\n                            label_403ab8:\n                                var_c0 = (var_c0 & rax_14);\n                                goto label_403abc;\n                            }\n                            case 0xd:\n                            {\n                                var_b8 = 0;\n                            label_403b49:\n                                rbp_3 = 0xd;\n                                rcx_2 = 0x72;\n                                rdx = r11_1 == 2;\n                                goto label_403a80;\n                            }\n                            case 0x20:\n                            {\n                                rax_27 = 0;\n                            label_403eaa:\n                                rbp_3 = 0x20;\n                                goto label_403e72;\n                            }\n                            case 0x21:\n                            case 0x22:\n                            case 0x24:\n                            case 0x26:\n                            case 0x28:\n                            case 0x29:\n                            case 0x2a:\n                            case 0x3b:\n                            case 0x3c:\n                            case 0x3d:\n                            case 0x3e:\n                            case 0x5b:\n                            case 0x5e:\n                            case 0x60:\n                            case 0x7c:\n                            {\n                                var_b8 = 0;\n                            label_403b35:\n                                rdx = 0;\n                            label_403a8b:\n                                r13 = 0;\n                                goto label_4038a5;\n                            }\n                            case 0x23:\n                            case 0x7e:\n                            {\n                                rax_28 = 0;\n                            label_403e8a:\n                                if (r12_1 == 0)\n                                {\n                                    r13 = var_b8;\n                                    rdx = 0;\n                                    var_b8 = rax_28;\n                                    goto label_4038a5;\n                                }\n                                var_b8 = rax_28;\n                                r13 = 0;\n                            label_4038af:\n                                rax_8 = 0;\n                                goto label_4038b1;\n                            }\n                            case 0x25:\n                            case 0x2b:\n                            case 0x2c:\n                            case 0x2d:\n                            case 0x2e:\n                            case 0x2f:\n                            case 0x30:\n                            case 0x31:\n                            case 0x32:\n                            case 0x33:\n                            case 0x34:\n                            case 0x35:\n                            case 0x36:\n                            case 0x37:\n                            case 0x38:\n                            case 0x39:\n                            case 0x3a:\n                            case 0x41:\n                            case 0x42:\n                            case 0x43:\n                            case 0x44:\n                            case 0x45:\n                            case 0x46:\n                            case 0x47:\n                            case 0x48:\n                            case 0x49:\n                            case 0x4a:\n                            case 0x4b:\n                            case 0x4c:\n                            case 0x4d:\n                            case 0x4e:\n                            case 0x4f:\n                            case 0x50:\n                            case 0x51:\n                            case 0x52:\n                            case 0x53:\n                            case 0x54:\n                            case 0x55:\n                            case 0x56:\n                            case 0x57:\n                            case 0x58:\n                            case 0x59:\n                            case 0x5a:\n                            case 0x5d:\n                            case 0x5f:\n                            case 0x61:\n                            case 0x62:\n                            case 0x63:\n                            case 0x64:\n                            case 0x65:\n                            case 0x66:\n                            case 0x67:\n                            case 0x68:\n                            case 0x69:\n                            case 0x6a:\n                            case 0x6b:\n                            case 0x6c:\n                            case 0x6d:\n                            case 0x6e:\n                            case 0x6f:\n                            case 0x70:\n                            case 0x71:\n                            case 0x72:\n                            case 0x73:\n                            case 0x74:\n                            case 0x75:\n                            case 0x76:\n                            case 0x77:\n                            case 0x78:\n                            case 0x79:\n                            case 0x7a:\n                            {\n                                rax_27 = 0;\n                            label_403e72:\n                                r13 = var_b8;\n                                var_b8 = rax_27;\n                                rax_8 = 0;\n                                goto label_4038b1;\n                            }\n                            case 0x27:\n                            {\n                                var_b8 = 0;\n                            label_403a2d:\n                                if (r11_1 != 2)\n                                {\n                                    var_5b_1 = r13;\n                                    rdx = 0;\n                                    rbp_3 = 0x27;\n                                    goto label_4038a5;\n                                }\n                                if (var_5c != 0)\n                                {\n                                    goto label_4047ed;\n                                }\n                                if (r14 != 0)\n                                {\n                                    rdx = 0;\n                                }\n                                if ((r14 == 0 || (r14 != 0 && var_70 != 0)))\n                                {\n                                    if (r14 > rbx_1)\n                                    {\n                                        r15[rbx_1] = 0x27;\n                                    }\n                                    if (r14 > (rbx_1 + 1))\n                                    {\n                                        r15[(rbx_1 + 1)] = 0x5c;\n                                    }\n                                    if (r14 <= (rbx_1 + 2))\n                                    {\n                                        rdx = r14;\n                                        r14 = var_70;\n                                    }\n                                    else\n                                    {\n                                        rdx = r14;\n                                        r15[(rbx_1 + 2)] = 0x27;\n                                        r14 = var_70;\n                                    }\n                                }\n                                var_5b_1 = r13;\n                                rbx_1 = (rbx_1 + 3);\n                                rax_8 = 0;\n                                r10 = 0;\n                                var_70 = r14;\n                                rbp_3 = 0x27;\n                                r14 = rdx;\n                                goto label_4039ac;\n                            }\n                            case 0x3f:\n                            {\n                                var_b8 = 0;\n                            label_4039fd:\n                                if (r11_1 == 2)\n                                {\n                                    if (var_5c != 0)\n                                    {\n                                    label_4047ed:\n                                        r13_1 = r11_1;\n                                        r11 = r9;\n                                        goto label_403abc;\n                                    }\n                                    r13 = 0;\n                                    rax_8 = 0;\n                                    rbp_3 = 0x3f;\n                                label_4039ac:\n                                    rdx = r11_1 == 2;\n                                    if (var_b8 != 0)\n                                    {\n                                        goto label_4038e7;\n                                    }\n                                    r12_1 = (r12_1 + 1);\n                                    rax_12 = ((rax_8 ^ 1) & r10);\n                                    goto label_4039c4;\n                                }\n                                if (r11_1 != 5)\n                                {\n                                    rbp_3 = 0x3f;\n                                    rdx = r11_1 == 2;\n                                    r13 = 0;\n                                    goto label_4038a5;\n                                }\n                                if ((arg6 & 4) == 0)\n                                {\n                                label_403f90:\n                                    rdx = 0;\n                                    r13 = 0;\n                                    rbp_3 = 0x3f;\n                                    goto label_4038a5;\n                                }\n                                int64_t rax_30 = (r12_1 + 2);\n                                if (rax_30 >= r9)\n                                {\n                                    goto label_403f90;\n                                }\n                                if (*((arg3 + r12_1) + 1) != 0x3f)\n                                {\n                                    goto label_403f90;\n                                }\n                                rbp_3 = *(arg3 + rax_30);\n                                if (rbp_3 > 0x3e)\n                                {\n                                    goto label_403f90;\n                                }\n                                if ((!(TEST_BITQ(0x7000a38200000000, rbp_3))))\n                                {\n                                    goto label_403f90;\n                                }\n                                if (var_5c != 0)\n                                {\n                                    goto label_4047a0;\n                                }\n                                if (r14 > rbx_1)\n                                {\n                                    r15[rbx_1] = 0x3f;\n                                }\n                                if (r14 > (rbx_1 + 1))\n                                {\n                                    r15[(rbx_1 + 1)] = 0x22;\n                                }\n                                if (r14 > (rbx_1 + 2))\n                                {\n                                    r15[(rbx_1 + 2)] = 0x22;\n                                }\n                                if (r14 > (rbx_1 + 3))\n                                {\n                                    r15[(rbx_1 + 3)] = 0x3f;\n                                }\n                                rbx_1 = (rbx_1 + 4);\n                                rdx = 0;\n                                r13 = 0;\n                                r12_1 = rax_30;\n                            label_403c33:\n                                rax_8 = r13;\n                                r13 = 0;\n                                if (((var_c0 ^ 1) | rdx) != 0)\n                                {\n                                    goto label_4039ac;\n                                }\n                            label_4038b1:\n                                if (arg7 == 0)\n                                {\n                                    goto label_4039ac;\n                                }\n                                if (((*(arg7 + ((rbp_3 >> 5) << 2)) >> rbp_3) & 1) == 0)\n                                {\n                                    goto label_4039ac;\n                                }\n                                rdx = r11_1 == 2;\n                                goto label_4038e7;\n                            }\n                            case 0x5c:\n                            {\n                                var_b8 = 0;\n                            label_403a5a:\n                                rdx = (var_c0 & var_5c);\n                                rbp_3 = 0x5c;\n                                rcx_2 = 0x5c;\n                                rax_1 = var_a0_1 != 0;\n                                rdx = (rdx & rax_1);\n                                if (rdx == 0)\n                                {\n                                    goto label_403a80;\n                                }\n                                r12_1 = (r12_1 + 1);\n                                rax_12 = r10;\n                                r13 = 0;\n                            label_4039c4:\n                                if (rax_12 != 0)\n                                {\n                                    if (r14 > rbx_1)\n                                    {\n                                        r15[rbx_1] = 0x27;\n                                    }\n                                    if (r14 > (rbx_1 + 1))\n                                    {\n                                        r15[(rbx_1 + 1)] = 0x27;\n                                    }\n                                    rbx_1 = (rbx_1 + 2);\n                                    r10 = 0;\n                                    goto label_40393d;\n                                }\n                            label_40393d:\n                                if (rbx_1 >= r14)\n                                {\n                                    goto label_403946;\n                                }\n                                r15[rbx_1] = rbp_3;\n                            label_403946:\n                                char rdi_2 = var_a9;\n                                rbx_1 = (rbx_1 + 1);\n                                if (r13 == 0)\n                                {\n                                    rdi_2 = 0;\n                                }\n                                var_a9 = rdi_2;\n                                continue;\n                            }\n                            case 0x7b:\n                            case 0x7d:\n                            {\n                                var_b8 = 0;\n                            label_403859:\n                                rax_1 = r9 != 1;\n                                if (r9 == -1)\n                                {\n                                    rax_1 = *(arg3 + 1) != 0;\n                                }\n                                rdx = r11_1 == 2;\n                                if (rax_1 != 0)\n                                {\n                                    goto label_403a8b;\n                                }\n                                goto label_40387d;\n                            }\n                        }\n                    }\n                }\n            }\n        label_403f36:\n            *r15 = 0x27;\n            r13 = 2;\n            rbx_1 = 1;\n            var_78_1 = \"'\";\n            var_a0_1 = 1;\n            var_5c = false;\n            var_5b_1 = rax_1;\n        }\n    }\n    if ((r13 == 4 && rbp_1 == 0))\n    {\n        var_c0 = 1;\n    }\n    switch (r13)\n    {\n        case 0:\n        {\n            var_a9 = 1;\n            r10 = 0;\n            rbx_1 = 0;\n            var_5b_1 = 0;\n            var_70 = 0;\n            var_5c = false;\n            var_c0 = 0;\n            var_a0_1 = 0;\n            var_78_1 = nullptr;\n            goto label_403748;\n        }\n        case 2:\n        {\n            if (rbp_1 != 0)\n            {\n                var_a9 = 1;\n                r10 = 0;\n                rbx_1 = 0;\n                var_5b_1 = 0;\n                var_70 = 0;\n                var_5c = true;\n                var_c0 = 0;\n                var_a0_1 = 1;\n                var_78_1 = \"'\";\n                goto label_403748;\n            }\n            var_c0 = 0;\n            break;\n        }\n        case 3:\n        {\n            var_a9 = 1;\n            r10 = 0;\n            rbx_1 = 0;\n            r13 = 2;\n            var_5b_1 = 0;\n            var_70 = 0;\n            var_5c = true;\n            var_c0 = 1;\n            var_a0_1 = 1;\n            var_78_1 = \"'\";\n            goto label_403748;\n        }\n        case 5:\n        {\n            if (rbp_1 != 0)\n            {\n                var_a9 = 1;\n                r10 = 0;\n                rbx_1 = 0;\n                var_5b_1 = 0;\n                var_70 = 0;\n                var_5c = true;\n                var_c0 = 1;\n                var_a0_1 = 1;\n                var_78_1 = &data_40b684;\n            }\n            else\n            {\n                if (r14 == 0)\n                {\n                    var_70 = 0;\n                    r10 = 0;\n                    var_a9 = 1;\n                    var_5b_1 = 0;\n                }\n                else\n                {\n                    *r15 = 0x22;\n                    r10 = 0;\n                    var_a9 = 1;\n                    var_5b_1 = 0;\n                    var_70 = 0;\n                }\n                var_5c = false;\n                rbx_1 = 1;\n                var_c0 = 1;\n                var_a0_1 = 1;\n                var_78_1 = &data_40b684;\n            }\n            goto label_403748;\n        }\n        case 6:\n        {\n            var_a9 = 1;\n            r10 = 0;\n            rbx_1 = 0;\n            r13 = 5;\n            var_5b_1 = 0;\n            var_70 = 0;\n            var_5c = true;\n            var_c0 = 1;\n            var_a0_1 = 1;\n            var_78_1 = &data_40b684;\n            goto label_403748;\n        }\n        case 7:\n        {\n            var_a9 = 1;\n            r10 = 0;\n            rbx_1 = 0;\n            var_5b_1 = 0;\n            var_70 = 0;\n            var_5c = false;\n            var_c0 = 1;\n            var_a0_1 = 0;\n            var_78_1 = nullptr;\n            goto label_403748;\n        }\n        case 8:\n        case 9:\n        case 0xa:\n        {\n            if ((!cond:1))\n            {\n                arg8 = sub_4035b0(&data_40b695, r13);\n                arg9 = sub_4035b0(\"'\", r13);\n            }\n            rbx_1 = 0;\n            if (rbp_1 == 0)\n            {\n                char rax_49 = *arg8;\n                if (rax_49 != 0)\n                {\n                    do\n                    {\n                        if (r14 > rbx_1)\n                        {\n                            r15[rbx_1] = rax_49;\n                        }\n                        rbx_1 = (rbx_1 + 1);\n                        rax_49 = arg8[rbx_1];\n                    } while (rax_49 != 0);\n                }\n            }\n            uint64_t rax_46;\n            rax_46 = strlen(arg9);\n            var_a9 = 1;\n            r10 = 0;\n            var_a0_1 = rax_46;\n            var_5b_1 = 0;\n            var_78_1 = arg9;\n            var_70 = 0;\n            var_c0 = 1;\n            goto label_403748;\n        }\n    }\n    if (((r13 == 4 && rbp_1 == 0) || r13 == 2))\n    {\n        if (r14 != 0)\n        {\n            r10 = 0;\n            rax_1 = 0;\n            var_a9 = 1;\n            var_70 = 0;\n            goto label_403f36;\n        }\n        var_a9 = 1;\n        r10 = 0;\n        rbx_1 = 1;\n        r13 = 2;\n        var_70 = 0;\n        var_5b_1 = 0;\n        var_5c = false;\n        var_a0_1 = 1;\n        var_78_1 = \"'\";\n        goto label_403748;\n    }\n}\n\n"
        },
        {
            "funcName": "sub_4048e0",
            "funcStartAddr": "0x401bf5",
            "funcEndAddr": "0x404a7e",
            "decompiledFuncCode": "char* sub_4048e0(int32_t arg1, uint64_t arg2, uint64_t arg3, int32_t* arg4)\n{\n    int64_t r15 = arg1;\n    int32_t* rax = __errno_location();\n    int64_t rbx = data_60f2b8;\n    int32_t rax_1 = *rax;\n    if (r15 < 0)\n    {\n        abort();\n        /* no return */\n    }\n    if (data_60f2d0 <= r15)\n    {\n        if (r15 == 0x7fffffff)\n        {\n            sub_405990();\n            /* no return */\n        }\n        int32_t r12_1 = (r15 + 1);\n        int64_t rsi_1 = (r12_1 << 4);\n        if (rbx == 0x60f2c0)\n        {\n            int64_t rax_9 = sub_4057a0(0, rsi_1);\n            int128_t zmm0 = data_60f2c0;\n            rbx = rax_9;\n            data_60f2b8 = rax_9;\n            *rax_9 = zmm0;\n        }\n        else\n        {\n            int64_t rax_2 = sub_4057a0(rbx, rsi_1);\n            data_60f2b8 = rax_2;\n            rbx = rax_2;\n        }\n        int64_t rdi_1 = data_60f2d0;\n        memset(((rdi_1 << 4) + rbx), 0, ((r12_1 - rdi_1) << 4));\n        data_60f2d0 = r12_1;\n    }\n    int64_t rbx_1 = (rbx + (r15 << 4));\n    void* r15_2 = &arg4[2];\n    int32_t rax_4 = (arg4[1] | 1);\n    uint64_t r11 = *rbx_1;\n    char* r12_2 = *(rbx_1 + 8);\n    int64_t rax_5 = sub_4036b0(r12_2, r11, arg2, arg3, *arg4, rax_4, r15_2, *(arg4 + 0x28), *(arg4 + 0x30));\n    if (r11 <= rax_5)\n    {\n        size_t rsi_3 = (rax_5 + 1);\n        *rbx_1 = rsi_3;\n        if (r12_2 != 0x60f360)\n        {\n            free(r12_2);\n        }\n        char* rax_6 = sub_405740(rsi_3);\n        uint32_t r8_1 = *arg4;\n        *(rbx_1 + 8) = rax_6;\n        r12_2 = rax_6;\n        sub_4036b0(rax_6, rsi_3, arg2, arg3, r8_1, rax_4, r15_2, *(arg4 + 0x28), *(arg4 + 0x30));\n    }\n    *rax = rax_1;\n    return r12_2;\n}\n\n"
        },
        {
            "funcName": "sub_404a80",
            "funcStartAddr": "0x404a80",
            "funcEndAddr": "0x404ab4",
            "decompiledFuncCode": "int64_t sub_404a80(int64_t arg1)\n{\n    int64_t rbx = arg1;\n    int32_t* rax = __errno_location();\n    int32_t r12 = *rax;\n    if (rbx == 0)\n    {\n        rbx = 0x60f460;\n    }\n    int64_t rax_1 = sub_405940(rbx, 0x38);\n    *rax = r12;\n    return rax_1;\n}\n\n"
        },
        {
            "funcName": "sub_404ac0",
            "funcStartAddr": "0x404ac0",
            "funcEndAddr": "0x404acf",
            "decompiledFuncCode": "uint64_t sub_404ac0(int32_t* arg1)\n{\n    if (arg1 == 0)\n    {\n        arg1 = &data_60f460;\n    }\n    return *arg1;\n}\n\n"
        },
        {
            "funcName": "sub_404ad0",
            "funcStartAddr": "0x404ad0",
            "funcEndAddr": "0x404adf",
            "decompiledFuncCode": "void sub_404ad0(int32_t* arg1, int32_t arg2)\n{\n    if (arg1 == 0)\n    {\n        arg1 = &data_60f460;\n    }\n    *arg1 = arg2;\n}\n\n"
        },
        {
            "funcName": "sub_404ae0",
            "funcStartAddr": "0x404ae0",
            "funcEndAddr": "0x404b13",
            "decompiledFuncCode": "uint64_t sub_404ae0(int64_t arg1, uint8_t arg2, int32_t arg3)\n{\n    if (arg1 == 0)\n    {\n        arg1 = 0x60f460;\n    }\n    char rcx_1 = (arg2 & 0x1f);\n    int32_t rsi = *((arg1 + ((arg2 >> 5) << 2)) + 8);\n    uint32_t rax_3 = (rsi >> rcx_1);\n    *((arg1 + ((arg2 >> 5) << 2)) + 8) = ((((arg3 ^ rax_3) & 1) << rcx_1) ^ rsi);\n    return (rax_3 & 1);\n}\n\n"
        },
        {
            "funcName": "sub_404b20",
            "funcStartAddr": "0x404b20",
            "funcEndAddr": "0x404b33",
            "decompiledFuncCode": "uint64_t sub_404b20(int128_t* arg1, int32_t arg2)\n{\n    if (arg1 == 0)\n    {\n        arg1 = &data_60f460;\n    }\n    uint64_t rax = *(arg1 + 4);\n    *(arg1 + 4) = arg2;\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_404b40",
            "funcStartAddr": "0x404b40",
            "funcEndAddr": "0x404b6b",
            "decompiledFuncCode": "void sub_404b40(int32_t* arg1, int64_t arg2, int64_t arg3)\n{\n    if (arg1 == 0)\n    {\n        arg1 = &data_60f460;\n    }\n    *arg1 = 0xa;\n    if ((arg2 != 0 && arg3 != 0))\n    {\n        *(arg1 + 0x28) = arg2;\n        *(arg1 + 0x30) = arg3;\n        return;\n    }\n    int64_t var_8 = 0x60f460;\n    abort();\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_404b70",
            "funcStartAddr": "0x404b70",
            "funcEndAddr": "0x404be2",
            "decompiledFuncCode": "int64_t sub_404b70(char* arg1, uint64_t arg2, uint64_t arg3, uint64_t arg4, \n    int32_t* arg5)\n{\n    int32_t* rbx = arg5;\n    if (arg5 == 0)\n    {\n        rbx = &data_60f460;\n    }\n    int32_t* rax = __errno_location();\n    int32_t r12 = *rax;\n    int64_t rax_2 = sub_4036b0(arg1, arg2, arg3, arg4, *rbx, rbx[1], &rbx[2], *(rbx + 0x28), *(rbx + 0x30));\n    *rax = r12;\n    return rax_2;\n}\n\n"
        },
        {
            "funcName": "sub_404bf0",
            "funcStartAddr": "0x404bf0",
            "funcEndAddr": "0x404cd1",
            "decompiledFuncCode": "char* sub_404bf0(uint64_t arg1, uint64_t arg2, int64_t* arg3, int32_t* arg4)\n{\n    int32_t* rbx = arg4;\n    if (arg4 == 0)\n    {\n        rbx = &data_60f460;\n    }\n    int32_t* rax = __errno_location();\n    int32_t rax_1 = *rax;\n    int32_t rbp;\n    rbp = arg3 == 0;\n    int32_t rbp_1 = (rbp | rbx[1]);\n    int64_t rax_2 = sub_4036b0(nullptr, 0, arg1, arg2, *rbx, rbp_1, &rbx[2], *(rbx + 0x28), *(rbx + 0x30));\n    char* rax_3 = sub_405740((rax_2 + 1));\n    sub_4036b0(rax_3, (rax_2 + 1), arg1, arg2, *rbx, rbp_1, &rbx[2], *(rbx + 0x28), *(rbx + 0x30));\n    *rax = rax_1;\n    if (arg3 != 0)\n    {\n        *arg3 = rax_2;\n    }\n    return rax_3;\n}\n\n"
        },
        {
            "funcName": "sub_404ce0",
            "funcStartAddr": "0x404ce0",
            "funcEndAddr": "0x404cea",
            "decompiledFuncCode": "int64_t sub_404ce0(uint64_t arg1, uint64_t arg2, int32_t* arg3)\n{\n    /* tailcall */\n    return sub_404bf0(arg1, arg2, nullptr, arg3);\n}\n\n"
        },
        {
            "funcName": "sub_404cf0",
            "funcStartAddr": "0x404cf0",
            "funcEndAddr": "0x404d85",
            "decompiledFuncCode": "uint64_t sub_404cf0()\n{\n    uint64_t rax_2 = data_60f2d0;\n    int64_t r12 = data_60f2b8;\n    if (rax_2 > 1)\n    {\n        int64_t* rbx_1 = (r12 + 0x18);\n        int64_t rbp_1 = ((r12 + ((rax_2 - 2) << 4)) + 0x28);\n        do\n        {\n            int64_t rdi_1 = *rbx_1;\n            rbx_1 = &rbx_1[2];\n            rax_2 = free(rdi_1);\n        } while (rbx_1 != rbp_1);\n    }\n    int64_t rdi_2 = *(r12 + 8);\n    if (rdi_2 != 0x60f360)\n    {\n        rax_2 = free(rdi_2);\n        *data_60f2c0 = 0x100;\n        *(data_60f2c0 + 8) = 0x60f360;\n    }\n    if (r12 != 0x60f2c0)\n    {\n        rax_2 = free(r12);\n        data_60f2b8 = 0x60f2c0;\n    }\n    data_60f2d0 = 1;\n    return rax_2;\n}\n\n"
        },
        {
            "funcName": "sub_404d90",
            "funcStartAddr": "0x404d90",
            "funcEndAddr": "0x404da1",
            "decompiledFuncCode": "int64_t sub_404d90(int32_t arg1, uint64_t arg2)\n{\n    /* tailcall */\n    return sub_4048e0(arg1, arg2, -1, &data_60f460);\n}\n\n"
        },
        {
            "funcName": "sub_404db0",
            "funcStartAddr": "0x404db0",
            "funcEndAddr": "0x404dba",
            "decompiledFuncCode": "int64_t sub_404db0(int32_t arg1, uint64_t arg2, uint64_t arg3)\n{\n    /* tailcall */\n    return sub_4048e0(arg1, arg2, arg3, &data_60f460);\n}\n\n"
        },
        {
            "funcName": "sub_404dc0",
            "funcStartAddr": "0x404dc0",
            "funcEndAddr": "0x404dd6",
            "decompiledFuncCode": "int64_t sub_404dc0(uint64_t arg1)\n{\n    /* tailcall */\n    return sub_4048e0(0, arg1, -1, &data_60f460);\n}\n\n"
        },
        {
            "funcName": "sub_404de0",
            "funcStartAddr": "0x404de0",
            "funcEndAddr": "0x404df2",
            "decompiledFuncCode": "int64_t sub_404de0(uint64_t arg1, uint64_t arg2)\n{\n    /* tailcall */\n    return sub_4048e0(0, arg1, arg2, &data_60f460);\n}\n\n"
        },
        {
            "funcName": "sub_404e00",
            "funcStartAddr": "0x401bfa",
            "funcEndAddr": "0x404e68",
            "decompiledFuncCode": "char* sub_404e00(int32_t arg1, int32_t arg2, uint64_t arg3)\n{\n    if (arg2 == 0xa)\n    {\n        abort();\n        /* no return */\n    }\n    int32_t var_48 = arg2;\n    int32_t var_44 = 0;\n    int64_t var_40 = 0;\n    int64_t var_38 = 0;\n    int64_t var_30 = 0;\n    int64_t var_28 = 0;\n    int64_t var_20 = 0;\n    int64_t var_18 = 0;\n    return sub_4048e0(arg1, arg3, -1, &var_48);\n}\n\n"
        },
        {
            "funcName": "sub_404e70",
            "funcStartAddr": "0x401bff",
            "funcEndAddr": "0x404ed4",
            "decompiledFuncCode": "char* sub_404e70(int32_t arg1, int32_t arg2, uint64_t arg3, uint64_t arg4)\n{\n    if (arg2 == 0xa)\n    {\n        abort();\n        /* no return */\n    }\n    int32_t var_48 = arg2;\n    int32_t var_44 = 0;\n    int64_t var_40 = 0;\n    int64_t var_38 = 0;\n    int64_t var_30 = 0;\n    int64_t var_28 = 0;\n    int64_t var_20 = 0;\n    int64_t var_18 = 0;\n    return sub_4048e0(arg1, arg3, arg4, &var_48);\n}\n\n"
        },
        {
            "funcName": "sub_404ee0",
            "funcStartAddr": "0x404ee0",
            "funcEndAddr": "0x404eec",
            "decompiledFuncCode": "int64_t sub_404ee0(int32_t arg1, uint64_t arg2)\n{\n    /* tailcall */\n    return sub_404e00(0, arg1, arg2);\n}\n\n"
        },
        {
            "funcName": "sub_404ef0",
            "funcStartAddr": "0x404ef0",
            "funcEndAddr": "0x404eff",
            "decompiledFuncCode": "int64_t sub_404ef0(int32_t arg1, uint64_t arg2, uint64_t arg3)\n{\n    /* tailcall */\n    return sub_404e70(0, arg1, arg2, arg3);\n}\n\n"
        },
        {
            "funcName": "sub_404f00",
            "funcStartAddr": "0x404f00",
            "funcEndAddr": "0x404f70",
            "decompiledFuncCode": "char* sub_404f00(uint64_t arg1, uint64_t arg2, uint8_t arg3)\n{\n    char rcx_1 = (arg3 & 0x1f);\n    int64_t var_18 = data_60f490;\n    int128_t var_48 = data_60f460;\n    int128_t var_38 = data_60f470;\n    int128_t var_28 = data_60f480;\n    int32_t rdx = *((&var_48 + ((arg3 >> 5) << 2)) + 8);\n    *((&var_48 + ((arg3 >> 5) << 2)) + 8) = ((((!(rdx >> rcx_1)) & 1) << rcx_1) ^ rdx);\n    return sub_4048e0(0, arg1, arg2, &var_48);\n}\n\n"
        },
        {
            "funcName": "sub_404f70",
            "funcStartAddr": "0x404f70",
            "funcEndAddr": "0x404f7d",
            "decompiledFuncCode": "int64_t sub_404f70(uint64_t arg1, uint8_t arg2)\n{\n    /* tailcall */\n    return sub_404f00(arg1, -1, arg2);\n}\n\n"
        },
        {
            "funcName": "sub_404f80",
            "funcStartAddr": "0x404f80",
            "funcEndAddr": "0x404f91",
            "decompiledFuncCode": "int64_t sub_404f80(uint64_t arg1)\n{\n    /* tailcall */\n    return sub_404f00(arg1, -1, 0x3a);\n}\n\n"
        },
        {
            "funcName": "sub_404fa0",
            "funcStartAddr": "0x404fa0",
            "funcEndAddr": "0x404faa",
            "decompiledFuncCode": "int64_t sub_404fa0(uint64_t arg1, uint64_t arg2)\n{\n    /* tailcall */\n    return sub_404f00(arg1, arg2, 0x3a);\n}\n\n"
        },
        {
            "funcName": "sub_404fb0",
            "funcStartAddr": "0x401c04",
            "funcEndAddr": "0x40501e",
            "decompiledFuncCode": "char* sub_404fb0(int32_t arg1, int32_t arg2, uint64_t arg3)\n{\n    if (arg2 == 0xa)\n    {\n        abort();\n        /* no return */\n    }\n    int32_t var_48 = arg2;\n    int64_t var_40 = 0x400000000000000;\n    int32_t var_44 = 0;\n    int64_t var_38 = 0;\n    int64_t var_30 = 0;\n    int64_t var_28 = 0;\n    int64_t var_20 = 0;\n    int64_t var_18 = 0;\n    return sub_4048e0(arg1, arg3, -1, &var_48);\n}\n\n"
        },
        {
            "funcName": "sub_405020",
            "funcStartAddr": "0x405020",
            "funcEndAddr": "0x40508c",
            "decompiledFuncCode": "char* sub_405020(int32_t arg1, int64_t arg2, int64_t arg3, uint64_t arg4, \n    uint64_t arg5)\n{\n    int128_t var_48 = data_60f460;\n    int128_t var_38 = data_60f470;\n    int128_t var_28 = data_60f480;\n    int64_t var_18 = data_60f490;\n    var_48 = 0xa;\n    if ((arg2 != 0 && arg3 != 0))\n    {\n        *var_28[8] = arg2;\n        int64_t var_18_1 = arg3;\n        return sub_4048e0(arg1, arg4, arg5, &var_48);\n    }\n    abort();\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_405130",
            "funcStartAddr": "0x405130",
            "funcEndAddr": "0x405146",
            "decompiledFuncCode": "int64_t sub_405130(uint64_t arg1)\n{\n    /* tailcall */\n    return sub_4048e0(0, arg1, -1, &data_60f280);\n}\n\n"
        },
        {
            "funcName": "sub_405150",
            "funcStartAddr": "0x405150",
            "funcEndAddr": "0x40519b",
            "decompiledFuncCode": "int64_t* sub_405150(int64_t* arg1)\n{\n    int64_t var_98;\n    if (__lxstat(1, \"/\", &var_98) != 0)\n    {\n        return 0;\n    }\n    int64_t var_90;\n    *arg1 = var_90;\n    arg1[1] = var_98;\n    return arg1;\n}\n\n"
        },
        {
            "funcName": "sub_4051a0",
            "funcStartAddr": "0x401c09",
            "funcEndAddr": "0x40557d",
            "decompiledFuncCode": "int64_t sub_4051a0(FILE* arg1, int64_t arg2, int64_t arg3, int64_t arg4, \n    int64_t* arg5, int64_t arg6)\n{\n    if (arg2 == 0)\n    {\n        __fprintf_chk();\n    }\n    else\n    {\n        __fprintf_chk();\n    }\n    __fprintf_chk(arg1, 1, \"Copyright %s %d Free Software Fo\u2026\", dcgettext(nullptr, &data_40c3eb, 5), 0x7e1);\n    fputs_unlocked(dcgettext(nullptr, \"\\nLicense GPLv3+: GNU GPL versio\u2026\", 5), arg1);\n    int64_t var_58;\n    int64_t var_50_1;\n    int64_t var_48;\n    int64_t var_40;\n    char* rax_6;\n    int64_t rbx_1;\n    char* rsi_1;\n    int64_t r12_1;\n    int64_t r13;\n    int64_t r14;\n    int64_t r15_1;\n    switch (arg6)\n    {\n        case 0:\n        {\n            abort();\n            /* no return */\n        }\n        case 8:\n        {\n            r13 = arg5[6];\n            r12_1 = arg5[5];\n            r15_1 = arg5[4];\n            var_48 = arg5[7];\n            r14 = arg5[3];\n            rbx_1 = *arg5;\n            var_58 = arg5[2];\n            var_50_1 = arg5[1];\n            rax_6 = dcgettext(nullptr, \"Written by %s, %s, %s,\\n%s, %s, \u2026\", 5);\n            break;\n        }\n        case 9:\n        {\n            rsi_1 = \"Written by %s, %s, %s,\\n%s, %s, \u2026\";\n            r13 = arg5[6];\n            r12_1 = arg5[5];\n            var_40 = arg5[8];\n            r15_1 = arg5[4];\n            r14 = arg5[3];\n            var_48 = arg5[7];\n            var_58 = arg5[2];\n            rbx_1 = *arg5;\n            var_50_1 = arg5[1];\n            break;\n        }\n        default:\n            rsi_1 = \"Written by %s, %s, %s,\\n%s, %s, \u2026\";\n            r13 = arg5[6];\n            r12_1 = arg5[5];\n            var_40 = arg5[8];\n            r15_1 = arg5[4];\n            r14 = arg5[3];\n            var_48 = arg5[7];\n            var_58 = arg5[2];\n            rbx_1 = *arg5;\n            var_50_1 = arg5[1];\n    }\n    int64_t var_60;\n    if ((arg6 > 9 || arg6 == 9))\n    {\n        rax_6 = dcgettext(nullptr, rsi_1, 5);\n        var_60 = var_40;\n    }\n    int64_t var_78_1;\n    int64_t var_70_1;\n    int64_t var_68_2;\n    int64_t var_58_1;\n    int64_t var_50;\n    char* rax_19;\n    char* rax_22;\n    int64_t rbx_5;\n    int64_t rbx_6;\n    int64_t r9_9;\n    int64_t r12_4;\n    int64_t r13_2;\n    int64_t r14_1;\n    switch (arg6)\n    {\n        case 1:\n        {\n            /* tailcall */\n            return __fprintf_chk(arg1, 1, dcgettext(nullptr, \"Written by %s.\\n\", 5), *arg5);\n            break;\n        }\n        case 2:\n        {\n            /* tailcall */\n            return __fprintf_chk(arg1, 1, dcgettext(nullptr, \"Written by %s and %s.\\n\", 5), *arg5, arg5[1]);\n            break;\n        }\n        case 3:\n        {\n            /* tailcall */\n            return __fprintf_chk(arg1, 1, dcgettext(nullptr, \"Written by %s, %s, and %s.\\n\", 5), *arg5, arg5[1], arg5[2]);\n            break;\n        }\n        case 4:\n        {\n            r14_1 = arg5[3];\n            r13_2 = arg5[2];\n            r12_4 = arg5[1];\n            rbx_5 = *arg5;\n            rax_19 = dcgettext(nullptr, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n            break;\n        }\n        case 5:\n        {\n            int64_t r15_2 = arg5[4];\n            r14_1 = arg5[3];\n            r13_2 = arg5[2];\n            r12_4 = arg5[1];\n            rbx_5 = *arg5;\n            rax_19 = dcgettext(nullptr, \"Written by %s, %s, %s,\\n%s, and \u2026\", 5);\n            var_60 = r15_2;\n            break;\n        }\n        case 6:\n        {\n            int64_t r12_5 = arg5[5];\n            int64_t r15_3 = arg5[4];\n            int64_t r14_2 = arg5[3];\n            var_58_1 = arg5[1];\n            int64_t r13_3 = arg5[2];\n            rbx_6 = *arg5;\n            rax_22 = dcgettext(nullptr, \"Written by %s, %s, %s,\\n%s, %s, \u2026\", 5);\n            r9_9 = r13_3;\n            var_68_2 = r12_5;\n            var_70_1 = r15_3;\n            var_78_1 = r14_2;\n            break;\n        }\n        case 7:\n        {\n            int64_t r13_4 = arg5[6];\n            int64_t r12_6 = arg5[5];\n            int64_t r15_4 = arg5[4];\n            int64_t r14_3 = arg5[3];\n            var_50 = arg5[2];\n            rbx_6 = *arg5;\n            var_58_1 = arg5[1];\n            rax_22 = dcgettext(nullptr, \"Written by %s, %s, %s,\\n%s, %s, \u2026\", 5);\n            var_60 = r13_4;\n            var_68_2 = r12_6;\n            var_70_1 = r15_4;\n            var_78_1 = r14_3;\n            r9_9 = var_50;\n            break;\n        }\n        default:\n            return __fprintf_chk(arg1, 1, rax_6, rbx_1, var_50_1, var_58, r14, r15_1, r12_1, r13, var_48, var_60, var_58, var_50_1, var_48, var_40);\n    }\n    if ((arg6 == 4 || arg6 == 5))\n    {\n        __fprintf_chk(arg1, 1, rax_19, rbx_5, r12_4, r13_2, r14_1, var_60);\n        return r14_1;\n    }\n    else if ((arg6 == 6 || arg6 == 7))\n    {\n        return __fprintf_chk(arg1, 1, rax_22, rbx_6, var_58_1, r9_9, var_78_1, var_70_1, var_68_2, var_60, var_58_1, var_50);\n    }\n}\n\n"
        },
        {
            "funcName": "sub_405580",
            "funcStartAddr": "0x405580",
            "funcEndAddr": "0x4055a0",
            "decompiledFuncCode": "int64_t sub_405580(FILE* arg1, int64_t arg2, int64_t arg3, int64_t arg4, \n    int64_t* arg5)\n{\n    int64_t r9 = 0;\n    if (*arg5 != 0)\n    {\n        do\n        {\n            r9 = (r9 + 1);\n        } while (arg5[r9] != 0);\n    }\n    /* tailcall */\n    return sub_4051a0(arg1, arg2, arg3, arg4, arg5, r9);\n}\n\n"
        },
        {
            "funcName": "sub_4055a0",
            "funcStartAddr": "0x4055a0",
            "funcEndAddr": "0x405600",
            "decompiledFuncCode": "int64_t sub_4055a0(FILE* arg1, int64_t arg2, int64_t arg3, int64_t arg4, \n    int32_t* arg5)\n{\n    int64_t r9 = 0;\n    void var_58;\n    do\n    {\n        int32_t rax_3 = *arg5;\n        if (rax_3 <= 0x2f)\n        {\n            int64_t* r10_2 = (rax_3 + *(arg5 + 0x10));\n            *arg5 = (rax_3 + 8);\n            int64_t rax_2 = *r10_2;\n            *(&var_58 + (r9 << 3)) = rax_2;\n            if (rax_2 == 0)\n            {\n                break;\n            }\n        }\n        else\n        {\n            int64_t* r10_3 = *(arg5 + 8);\n            *(arg5 + 8) = &r10_3[1];\n            int64_t rax_5 = *r10_3;\n            *(&var_58 + (r9 << 3)) = rax_5;\n            if (rax_5 == 0)\n            {\n                break;\n            }\n        }\n        r9 = (r9 + 1);\n    } while (r9 != 0xa);\n    return sub_4051a0(arg1, arg2, arg3, arg4, &var_58, r9);\n}\n\n"
        },
        {
            "funcName": "sub_405600",
            "funcStartAddr": "0x405600",
            "funcEndAddr": "0x4056bc",
            "decompiledFuncCode": "int64_t sub_405600(FILE* arg1, int64_t arg2, int64_t arg3, int64_t arg4)\n{\n    char r11 = 0;\n    int64_t r8;\n    int64_t var_18 = r8;\n    void* r10 = &arg_8;\n    int32_t r8_1 = 0x20;\n    void* var_98 = &arg_8;\n    int64_t r9;\n    int64_t var_10 = r9;\n    int64_t r9_1 = 0;\n    int32_t var_a0 = 0x20;\n    void var_38;\n    void* var_90 = &var_38;\n    void var_88;\n    do\n    {\n        if (r8_1 <= 0x2f)\n        {\n            uint64_t rax_1 = r8_1;\n            r8_1 = (r8_1 + 8);\n            r11 = 1;\n            int64_t rax_3 = *(rax_1 + &var_38);\n            *(&var_88 + (r9_1 << 3)) = rax_3;\n            if (rax_3 == 0)\n            {\n                break;\n            }\n        }\n        else\n        {\n            void* rax_4 = r10;\n            r10 = (r10 + 8);\n            int64_t rax_5 = *rax_4;\n            *(&var_88 + (r9_1 << 3)) = rax_5;\n            if (rax_5 == 0)\n            {\n                break;\n            }\n        }\n        r9_1 = (r9_1 + 1);\n    } while (r9_1 != 0xa);\n    if (r11 != 0)\n    {\n        int32_t var_a0_1 = r8_1;\n    }\n    return sub_4051a0(arg1, arg2, arg3, arg4, &var_88, r9_1);\n}\n\n"
        },
        {
            "funcName": "sub_4056c0",
            "funcStartAddr": "0x4056c0",
            "funcEndAddr": "0x405734",
            "decompiledFuncCode": "int64_t sub_4056c0()\n{\n    __printf_chk(1, dcgettext(nullptr, \"\\nReport bugs to: %s\\n\", 5), \"bug-coreutils@gnu.org\");\n    __printf_chk(1, dcgettext(nullptr, \"%s home page: <%s>\\n\", 5), \"GNU coreutils\", \"https://www.gnu.org/software/cor\u2026\");\n    /* tailcall */\n    return fputs_unlocked(dcgettext(nullptr, \"General help using GNU software:\u2026\", 5), stdout);\n}\n\n"
        },
        {
            "funcName": "sub_405740",
            "funcStartAddr": "0x405740",
            "funcEndAddr": "0x40575a",
            "decompiledFuncCode": "int64_t sub_405740(size_t arg1)\n{\n    int64_t rax = malloc(arg1);\n    if ((rax == 0 && arg1 != 0))\n    {\n        sub_405990();\n        /* no return */\n    }\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_4057a0",
            "funcStartAddr": "0x4057a0",
            "funcEndAddr": "0x4057d6",
            "decompiledFuncCode": "int64_t sub_4057a0(int64_t arg1, size_t arg2)\n{\n    if ((arg2 == 0 && arg1 != 0))\n    {\n        free(arg1);\n        return 0;\n    }\n    int64_t rax = realloc(arg1, arg2);\n    if ((rax == 0 && arg2 != 0))\n    {\n        sub_405990();\n        /* no return */\n    }\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_4058a0",
            "funcStartAddr": "0x4058a0",
            "funcEndAddr": "0x4058f0",
            "decompiledFuncCode": "int64_t sub_4058a0(int64_t arg1, int64_t* arg2)\n{\n    size_t rax = *arg2;\n    bool cond:0_1;\n    if (arg1 == 0)\n    {\n        cond:0_1 = rax >= 0;\n        if (rax == 0)\n        {\n            *arg2 = 0x80;\n            /* tailcall */\n            return sub_4057a0(arg1, 0x80);\n        }\n    }\n    if ((arg1 != 0 && rax <= 0x5555555555555553))\n    {\n        rax = (((rax >> 1) + rax) + 1);\n    }\n    if (((arg1 != 0 && rax <= 0x5555555555555553) || ((arg1 == 0 && rax != 0) && cond:0_1)))\n    {\n        *arg2 = rax;\n        /* tailcall */\n        return sub_4057a0(arg1, rax);\n    }\n    if (((arg1 != 0 && rax > 0x5555555555555553) || ((arg1 == 0 && rax != 0) && (!cond:0_1))))\n    {\n        size_t var_8 = rax;\n        sub_405990();\n        /* no return */\n    }\n}\n\n"
        },
        {
            "funcName": "sub_4058f0",
            "funcStartAddr": "0x4058f0",
            "funcEndAddr": "0x405907",
            "decompiledFuncCode": "int64_t sub_4058f0(size_t arg1)\n{\n    /* tailcall */\n    return memset(sub_405740(arg1), 0, arg1);\n}\n\n"
        },
        {
            "funcName": "sub_405910",
            "funcStartAddr": "0x405910",
            "funcEndAddr": "0x40593e",
            "decompiledFuncCode": "int64_t sub_405910(size_t arg1, size_t arg2)\n{\n    int64_t rax;\n    bool rdx;\n    rdx = HIGHD((arg1 * arg2));\n    rax = LOWD((arg1 * arg2));\n    if ((rax >= 0 && ((arg1 * arg2) >> 0x40) != 0 == 0))\n    {\n        int64_t rax_1 = calloc(arg1, arg2);\n        if (rax_1 != 0)\n        {\n            return rax_1;\n        }\n    }\n    sub_405990();\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_405940",
            "funcStartAddr": "0x405940",
            "funcEndAddr": "0x405968",
            "decompiledFuncCode": "int64_t sub_405940(int64_t arg1, size_t arg2)\n{\n    /* tailcall */\n    return memcpy(sub_405740(arg2), arg1, arg2);\n}\n\n"
        },
        {
            "funcName": "sub_405970",
            "funcStartAddr": "0x405970",
            "funcEndAddr": "0x405983",
            "decompiledFuncCode": "int64_t sub_405970(char* arg1)\n{\n    /* tailcall */\n    return sub_405940(arg1, (strlen(arg1) + 1));\n}\n\n"
        },
        {
            "funcName": "sub_405990",
            "funcStartAddr": "0x405990",
            "funcEndAddr": "0x4059c1",
            "decompiledFuncCode": "int64_t sub_405990() __noreturn\n{\n    error(data_60f260, 0, \"%s\", dcgettext(nullptr, \"memory exhausted\", 5));\n    abort();\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_4059d0",
            "funcStartAddr": "0x4059d0",
            "funcEndAddr": "0x405a19",
            "decompiledFuncCode": "void** sub_4059d0(int64_t* arg1, int32_t arg2, int64_t arg3)\n{\n    void** rax = fts_open(arg1, (arg2 | 0x200), arg3);\n    if (rax != 0)\n    {\n        return rax;\n    }\n    if (*__errno_location() == 0x16)\n    {\n        __assert_fail(\"errno != EINVAL\", \"lib/xfts.c\", 0x29, \"xfts_open\");\n        /* no return */\n    }\n    sub_405990();\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_405a20",
            "funcStartAddr": "0x405a20",
            "funcEndAddr": "0x405a49",
            "decompiledFuncCode": "int64_t sub_405a20(void* arg1, void* arg2)\n{\n    int64_t rax = 1;\n    int32_t rdx = (*(arg1 + 0x48) & 0x11);\n    if (rdx != 0x10)\n    {\n        rax = 0;\n        if (rdx == 0x11)\n        {\n            rax = *(arg2 + 0x58) != 0;\n            return rax;\n        }\n    }\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_405a50",
            "funcStartAddr": "0x405a50",
            "funcEndAddr": "0x405a6a",
            "decompiledFuncCode": "int64_t sub_405a50(int64_t* arg1, int64_t* arg2)\n{\n    if (arg1[1] == arg2[1])\n    {\n        int64_t rax;\n        rax = *arg1 == *arg2;\n        return rax;\n    }\n    return 0;\n}\n\n"
        },
        {
            "funcName": "sub_405a70",
            "funcStartAddr": "0x405a70",
            "funcEndAddr": "0x405a7d",
            "decompiledFuncCode": "uint64_t sub_405a70(void* arg1, int64_t arg2)\n{\n    return (COMBINE(0, *(arg1 + 8)) % arg2);\n}\n\n"
        },
        {
            "funcName": "sub_405a80",
            "funcStartAddr": "0x405a80",
            "funcEndAddr": "0x405a8c",
            "decompiledFuncCode": "uint64_t sub_405a80(int64_t* arg1, int64_t arg2)\n{\n    return (COMBINE(0, *arg1) % arg2);\n}\n\n"
        },
        {
            "funcName": "sub_405a90",
            "funcStartAddr": "0x405a90",
            "funcEndAddr": "0x405a9a",
            "decompiledFuncCode": "int64_t sub_405a90(int64_t* arg1, int64_t* arg2)\n{\n    int64_t rax;\n    rax = *arg1 == *arg2;\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_405aa0",
            "funcStartAddr": "0x405aa0",
            "funcEndAddr": "0x405ac2",
            "decompiledFuncCode": "uint64_t sub_405aa0(int64_t* arg1, int64_t* arg2)\n{\n    uint64_t rax = 0xffffffff;\n    int64_t rdx = *(*arg2 + 0x80);\n    int64_t temp0 = *(*arg1 + 0x80);\n    bool cond:0 = temp0 > rdx;\n    if (temp0 >= rdx)\n    {\n        rax = cond:0;\n        rax = rax;\n    }\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_405ad0",
            "funcStartAddr": "0x405ad0",
            "funcEndAddr": "0x405c7a",
            "decompiledFuncCode": "uint64_t sub_405ad0(void* arg1, void* arg2, char arg3)\n{\n    struct stat* rbp = (arg2 + 0x78);\n    char rax = *(arg1 + 0x48);\n    char* rsi = *(arg2 + 0x30);\n    int32_t rax_3;\n    if ((*(arg2 + 0x58) == 0 && (rax & 1) != 0))\n    {\n    label_405af8:\n        if (__xstat(1, rsi, rbp) == 0)\n        {\n        label_405b6d:\n            int32_t rax_8 = (*(arg2 + 0x90) & 0xf000);\n            uint64_t rax_10;\n            if (rax_8 == 0x4000)\n            {\n                rax_10 = *(arg2 + 0x88);\n                if ((rax_10 <= 1 || (rax_10 > 1 && *(arg2 + 0x58) <= 0)))\n                {\n                    rax_10 = -1;\n                }\n                if ((rax_10 > 1 && *(arg2 + 0x58) > 0))\n                {\n                    uint64_t rdx_3 = (rax_10 - 2);\n                    if ((*(arg1 + 0x48) & 0x20) == 0)\n                    {\n                        rax_10 = rdx_3;\n                    }\n                }\n                bool cond:1_1 = *(arg2 + 0x108) != 0x2e;\n                *(arg2 + 0x68) = rax_10;\n                if (((!cond:1_1) && (*(arg2 + 0x109) == 0 || (*(arg2 + 0x109) != 0 && (*(arg2 + 0x108) & 0xffff00) == 0x2e00))))\n                {\n                    rax_10 = (((1 - 1) & 0xfffffffc) + 5);\n                }\n            }\n            else if (rax_8 == 0xa000)\n            {\n                rax_10 = 0xc;\n            }\n            else\n            {\n                rax_8 = rax_8 == 0x8000;\n                uint64_t rax_9 = rax_8;\n                rax_10 = ((rax_9 * 5) + 3);\n            }\n            return rax_10;\n        }\n        int32_t* rax_2 = __errno_location();\n        rax_3 = *rax_2;\n        if (rax_3 == 2)\n        {\n            if (__lxstat(1, *(arg2 + 0x30), rbp) == 0)\n            {\n                *rax_2 = 0;\n                return 0xd;\n            }\n            rax_3 = *rax_2;\n        }\n        goto label_405bab;\n    }\n    if ((rax & 2) != 0)\n    {\n        goto label_405af8;\n    }\n    if (arg3 != 0)\n    {\n        goto label_405af8;\n    }\n    if (__fxstatat(1, *(arg1 + 0x2c), rsi, rbp, 0x100) == 0)\n    {\n        goto label_405b6d;\n    }\n    rax_3 = *__errno_location();\nlabel_405bab:\n    *(arg2 + 0x40) = rax_3;\n    void* rdi_1 = (&rbp->st_ino & 0xfffffffffffffff8);\n    *(arg2 + 0x78) = 0;\n    rbp->__glibc_reserved[2] = 0;\n    for (uint64_t rcx_3 = (((rbp - rdi_1) + 0x90) >> 3); rcx_3 != 0; rcx_3 = (rcx_3 - 1))\n    {\n        *rdi_1 = 0;\n        rdi_1 = (rdi_1 + 8);\n    }\n    return 0xa;\n}\n\n"
        },
        {
            "funcName": "sub_405c80",
            "funcStartAddr": "0x405c80",
            "funcEndAddr": "0x405d7d",
            "decompiledFuncCode": "void* sub_405c80(void* arg1, void* arg2, uint64_t arg3)\n{\n    void* rbx = arg2;\n    __compar_fn_t r13 = *(arg1 + 0x40);\n    void* rdi = *(arg1 + 0x10);\n    if (*(arg1 + 0x38) < arg3)\n    {\n        int64_t rsi = (arg3 + 0x28);\n        *(arg1 + 0x38) = rsi;\n        void* rax_1;\n        if (rsi <= 0x1fffffffffffffff)\n        {\n            rax_1 = realloc(rdi, (rsi << 3));\n            rdi = rax_1;\n            if (rax_1 == 0)\n            {\n                rdi = *(arg1 + 0x10);\n            }\n            else\n            {\n                *(arg1 + 0x10) = rax_1;\n            }\n        }\n        if (((rsi <= 0x1fffffffffffffff && rax_1 == 0) || rsi > 0x1fffffffffffffff))\n        {\n            free(rdi);\n            *(arg1 + 0x10) = 0;\n            *(arg1 + 0x38) = 0;\n            return rbx;\n        }\n    }\n    void* rdx = rdi;\n    if (rbx != 0)\n    {\n        do\n        {\n            rdx = (rdx + 8);\n            *(rdx - 8) = rbx;\n            rbx = *(rbx + 0x10);\n        } while (rbx != 0);\n    }\n    qsort(rdi, arg3, 8, r13);\n    int64_t* r8 = *(arg1 + 0x10);\n    void* rax_2 = *r8;\n    int64_t* rdx_1 = r8;\n    void* rsi_3 = rax_2;\n    int64_t rcx_2 = (arg3 - 1);\n    void* rdx_2;\n    if (arg3 == 1)\n    {\n        rdx_2 = rax_2;\n    }\n    else\n    {\n        while (true)\n        {\n            int64_t rdi_1 = rdx_1[1];\n            rdx_1 = &rdx_1[1];\n            *(rsi_3 + 0x10) = rdi_1;\n            int64_t temp1_1 = rcx_2;\n            rcx_2 = (rcx_2 - 1);\n            if (temp1_1 == 1)\n            {\n                break;\n            }\n            rsi_3 = *rdx_1;\n        }\n        rdx_2 = r8[(arg3 - 1)];\n    }\n    *(rdx_2 + 0x10) = 0;\n    return rax_2;\n}\n\n"
        },
        {
            "funcName": "sub_405d80",
            "funcStartAddr": "0x405d80",
            "funcEndAddr": "0x405e0a",
            "decompiledFuncCode": "void* sub_405d80(void* arg1, int64_t arg2, uint64_t arg3)\n{\n    void* rax = malloc(((arg3 + 0x110) & 0xfffffffffffffff8));\n    if (rax != 0)\n    {\n        memcpy((rax + 0x108), arg2, arg3);\n        int64_t rax_1 = *(arg1 + 0x20);\n        *((rax + arg3) + 0x108) = 0;\n        *(rax + 0x60) = arg3;\n        *(rax + 0x50) = arg1;\n        *(rax + 0x38) = rax_1;\n        *(rax + 0x40) = 0;\n        *(rax + 0x18) = 0;\n        *(rax + 0x72) = 0x30000;\n        *(rax + 0x20) = 0;\n        *(rax + 0x28) = 0;\n    }\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_405e10",
            "funcStartAddr": "0x405e10",
            "funcEndAddr": "0x405e51",
            "decompiledFuncCode": "void sub_405e10(void* arg1)\n{\n    if (arg1 == 0)\n    {\n        return;\n    }\n    void* rbx = arg1;\n    void* rbp_1;\n    do\n    {\n        DIR* rdi = *(rbx + 0x18);\n        rbp_1 = *(rbx + 0x10);\n        if (rdi != 0)\n        {\n            closedir(rdi);\n        }\n        void* rdi_1 = rbx;\n        rbx = rbp_1;\n        free(rdi_1);\n    } while (rbp_1 != 0);\n}\n\n"
        },
        {
            "funcName": "sub_405e60",
            "funcStartAddr": "0x405e60",
            "funcEndAddr": "0x405e99",
            "decompiledFuncCode": "uint64_t sub_405e60(void* arg1)\n{\n    uint64_t rax_2;\n    while (true)\n    {\n        rax_2 = sub_409f80(arg1);\n        if (rax_2 != 0)\n        {\n            break;\n        }\n        int32_t rax_1 = sub_409fd0(arg1);\n        if (rax_1 >= 0)\n        {\n            close(rax_1);\n        }\n    }\n    return rax_2;\n}\n\n"
        },
        {
            "funcName": "sub_405ea0",
            "funcStartAddr": "0x401c0e",
            "funcEndAddr": "0x405fb1",
            "decompiledFuncCode": "int64_t sub_405ea0(void* arg1)\n{\n    void* rbx = *(arg1 + 0x50);\n    if ((*(rbx + 0x49) & 2) != 0)\n    {\n        int64_t* r12_1 = *(rbx + 0x50);\n        int64_t var_98;\n        int64_t* rax_9;\n        if (r12_1 == 0)\n        {\n            rax_9 = sub_4095a0(0xd, nullptr, 0x405a80, 0x405a90, 0x4017f0);\n            r12_1 = rax_9;\n            *(rbx + 0x50) = rax_9;\n            if ((rax_9 == 0 && fstatfs(*(*(arg1 + 0x50) + 0x2c), &var_98) == 0))\n            {\n            label_405f4d:\n                return var_98;\n            }\n        }\n        if ((r12_1 != 0 || (r12_1 == 0 && rax_9 != 0)))\n        {\n            var_98 = *(arg1 + 0x78);\n            void* rax_2 = sub_409330(r12_1, &var_98);\n            int64_t rax_3;\n            int32_t rax_5;\n            if (rax_2 == 0)\n            {\n                rax_5 = fstatfs(*(*(arg1 + 0x50) + 0x2c), &var_98);\n                if (rax_5 == 0)\n                {\n                    int64_t* rax_6 = malloc(0x10);\n                    rax_3 = var_98;\n                    if (rax_6 != 0)\n                    {\n                        int64_t rdx_1 = *(arg1 + 0x78);\n                        rax_6[1] = rax_3;\n                        *rax_6 = rdx_1;\n                        int64_t rax_7 = sub_409d40(r12_1, rax_6);\n                        if (rax_7 != 0)\n                        {\n                            if (rax_6 != rax_7)\n                            {\n                                abort();\n                                /* no return */\n                            }\n                            goto label_405f4d;\n                        }\n                        free(rax_6);\n                        rax_3 = var_98;\n                    }\n                }\n            }\n            else\n            {\n                rax_3 = *(rax_2 + 8);\n            }\n            if ((rax_2 != 0 || (rax_2 == 0 && rax_5 == 0)))\n            {\n                return rax_3;\n            }\n        }\n    }\n    return 0;\n}\n\n"
        },
        {
            "funcName": "sub_405fc0",
            "funcStartAddr": "0x405fc0",
            "funcEndAddr": "0x406024",
            "decompiledFuncCode": "uint64_t sub_405fc0(void* arg1)\n{\n    int64_t rax = sub_405ea0(arg1);\n    bool cond:0 = rax <= 0x9fa0;\n    int32_t rdx;\n    if ((rax == 0x9fa0 || ((!cond:0) && rax == 0x5346414f)))\n    {\n        rdx = 0;\n    }\n    if (rax != 0x9fa0)\n    {\n        if (((!cond:0) && rax != 0x5346414f))\n        {\n            rdx = 2;\n            if (rax != 0x58465342)\n            {\n                int32_t rdx_1;\n                rdx_1 = rax == 0x52654973;\n                rdx = (rdx_1 + 1);\n            }\n        }\n        if (cond:0)\n        {\n            rdx = 0;\n            if (rax != 0)\n            {\n                int32_t rdx_2;\n                rdx_2 = rax != 0x6969;\n                return rdx_2;\n            }\n        }\n    }\n    return rdx;\n}\n\n"
        },
        {
            "funcName": "sub_406030",
            "funcStartAddr": "0x406030",
            "funcEndAddr": "0x406096",
            "decompiledFuncCode": "void sub_406030(void* arg1, int32_t arg2, char arg3)\n{\n    int32_t rsi = *(arg1 + 0x2c);\n    if ((rsi == arg2 && rsi != 0xffffff9c))\n    {\n        abort();\n        /* no return */\n    }\n    if (arg3 != 0)\n    {\n        uint64_t rax = sub_409f90((arg1 + 0x60), rsi);\n        if (rax >= 0)\n        {\n            close(rax);\n            *(arg1 + 0x2c) = arg2;\n            return;\n        }\n    }\n    else if (((*(arg1 + 0x48) & 4) == 0 && rsi >= 0))\n    {\n        close(rsi);\n        *(arg1 + 0x2c) = arg2;\n        return;\n    }\n    *(arg1 + 0x2c) = arg2;\n}\n\n"
        },
        {
            "funcName": "sub_4060a0",
            "funcStartAddr": "0x4060a0",
            "funcEndAddr": "0x4060fa",
            "decompiledFuncCode": "uint64_t sub_4060a0(void* arg1)\n{\n    int32_t rdx = *(arg1 + 0x48);\n    int32_t rbp_1 = (rdx & 4);\n    if (rbp_1 != 0)\n    {\n        rbp_1 = 0;\n    }\n    else\n    {\n        *rdx[1] = (*rdx[1] & 2);\n        if (*rdx[1] == 0)\n        {\n            rbp_1 = fchdir(*(arg1 + 0x28)) != 0;\n        }\n        else\n        {\n            sub_406030(arg1, 0xffffff9c, 1);\n        }\n    }\n    sub_405e60((arg1 + 0x60));\n    return rbp_1;\n}\n\n"
        },
        {
            "funcName": "sub_406100",
            "funcStartAddr": "0x406100",
            "funcEndAddr": "0x40616b",
            "decompiledFuncCode": "int64_t sub_406100(int64_t* arg1, int64_t* arg2, int64_t arg3)\n{\n    int64_t rcx = *arg2;\n    int64_t rdi = *arg1;\n    size_t rax = ((rcx + arg3) + 0x100);\n    if (rcx > rax)\n    {\n        free(rdi);\n        *arg1 = 0;\n        *__errno_location() = 0x24;\n        return 0;\n    }\n    *arg2 = rax;\n    int64_t rax_1 = realloc(rdi, rax);\n    if (rax_1 == 0)\n    {\n        free(*arg1);\n        *arg1 = 0;\n        return 0;\n    }\n    *arg1 = rax_1;\n    return 1;\n}\n\n"
        },
        {
            "funcName": "sub_406170",
            "funcStartAddr": "0x406170",
            "funcEndAddr": "0x4061cb",
            "decompiledFuncCode": "int64_t* sub_406170(int32_t arg1, int64_t** arg2)\n{\n    int64_t* rax;\n    if ((arg1 & 0x102) != 0)\n    {\n        rax = sub_4095a0(0x1f, nullptr, 0x405a70, 0x405a50, 0x4017f0);\n        *arg2 = rax;\n        rax = rax != 0;\n    }\n    else\n    {\n        int64_t* rax_1 = malloc(0x20);\n        *arg2 = rax_1;\n        rax = nullptr;\n        if (rax_1 != 0)\n        {\n            sub_408bd0(rax_1);\n            return 1;\n        }\n    }\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_4061d0",
            "funcStartAddr": "0x4061d0",
            "funcEndAddr": "0x406214",
            "decompiledFuncCode": "int64_t sub_4061d0(int64_t arg1, int32_t arg2, char* arg3)\n{\n    uint64_t rdx_4 = ((((arg2 << 0xd) & 0x20000) | ((arg2 << 7) & 0x40000)) | 0x90900);\n    if ((arg2 & 0x200) == 0)\n    {\n        /* tailcall */\n        return sub_408c60(arg3, rdx_4, rdx_4);\n    }\n    /* tailcall */\n    return sub_40a590(arg1, arg3, rdx_4, arg3);\n}\n\n"
        },
        {
            "funcName": "sub_406220",
            "funcStartAddr": "0x406220",
            "funcEndAddr": "0x4063e6",
            "decompiledFuncCode": "uint64_t sub_406220(void* arg1, void* arg2, int32_t arg3, char* arg4)\n{\n    int32_t rbp = arg3;\n    int32_t r12 = *(arg1 + 0x48);\n    int32_t rdx_1 = (r12 & 4);\n    bool c = false;\n    bool z = (arg4 & arg4) == 0;\n    int32_t r12_1;\n    char r14_1;\n    if ((!z))\n    {\n        void* const rdi = &data_40c7aa;\n        int64_t rcx = 3;\n        char* rsi = arg4;\n        while (rcx != 0)\n        {\n            char temp0_1 = *rsi;\n            char temp1_1 = *rdi;\n            c = temp0_1 < temp1_1;\n            z = temp0_1 == temp1_1;\n            rsi = &rsi[1];\n            rdi = (rdi + 1);\n            rcx = (rcx - 1);\n            if ((!z))\n            {\n                break;\n            }\n        }\n        if (((((!z) && (!c)) - 0) == 0 && rdx_1 == 0))\n        {\n            if (rbp >= 0)\n            {\n                r12_1 = rbp;\n                r14_1 = 1;\n                goto label_4062df;\n            }\n            if ((r12 & 0x200) == 0)\n            {\n                r14_1 = 1;\n                goto label_406368;\n            }\n            void* rdx_2 = (arg1 + 0x60);\n            char rax_1 = sub_409f80(rdx_2);\n            r14_1 = rax_1;\n            if (rax_1 != 0)\n            {\n                goto label_406368;\n            }\n            int32_t rax_2 = sub_409fd0(rdx_2);\n            r12_1 = rax_2;\n            if (rax_2 < 0)\n            {\n                r12 = *(arg1 + 0x48);\n                r14_1 = 1;\n                goto label_406368;\n            }\n            rbp = rax_2;\n            r14_1 = 1;\n            goto label_4062df;\n        }\n    }\n    int32_t rbx_1;\n    if ((((z || ((!z) && (((!z) && (!c)) - 0) != 0)) && rdx_1 != 0) || ((!z) && (((!z) && (!c)) - 0) == 0)))\n    {\n        if (((r12 & 0x200) == 0 || ((r12 & 0x200) != 0 && rbp < 0)))\n        {\n            rbx_1 = 0;\n        }\n        if (((r12 & 0x200) != 0 && rbp >= 0))\n        {\n            rbx_1 = 0;\n            close(rbp);\n        }\n    }\n    if (((z || ((!z) && (((!z) && (!c)) - 0) != 0)) && rdx_1 == 0))\n    {\n        if (rbp < 0)\n        {\n            r14_1 = 0;\n        label_406368:\n            int32_t rax_9 = sub_4061d0(*(arg1 + 0x2c), r12, arg4);\n            r12_1 = rax_9;\n            if (rax_9 >= 0)\n            {\n                goto label_4062df;\n            }\n            rbx_1 = -1;\n        }\n        else\n        {\n            r12_1 = rbp;\n            r14_1 = 0;\n        label_4062df:\n            int64_t var_c8;\n            int32_t rax_3 = __fxstat(1, r12_1, &var_c8);\n            rbx_1 = rax_3;\n            int64_t var_c0;\n            if ((rax_3 == 0 && (*(arg2 + 0x78) != var_c8 || (*(arg2 + 0x78) == var_c8 && *(arg2 + 0x80) != var_c0))))\n            {\n                *__errno_location() = 2;\n            }\n            if (((rax_3 == 0 && (*(arg2 + 0x78) != var_c8 || (*(arg2 + 0x78) == var_c8 && *(arg2 + 0x80) != var_c0))) || rax_3 != 0))\n            {\n                rbx_1 = -1;\n            }\n            if (((*(arg2 + 0x80) == var_c0 && rax_3 == 0) && *(arg2 + 0x78) == var_c8))\n            {\n                if ((*(arg1 + 0x49) & 2) != 0)\n                {\n                    sub_406030(arg1, r12_1, (r14_1 ^ 1));\n                }\n                else\n                {\n                    rbx_1 = fchdir(r12_1);\n                }\n            }\n            if (((((rax_3 == 0 && (*(arg2 + 0x78) != var_c8 || (*(arg2 + 0x78) == var_c8 && *(arg2 + 0x80) != var_c0))) || rax_3 != 0) || (((rax_3 == 0 && *(arg2 + 0x78) == var_c8) && *(arg2 + 0x80) == var_c0) && (*(arg1 + 0x49) & 2) == 0)) && rbp < 0))\n            {\n                int32_t* rax_7 = __errno_location();\n                int32_t r13_1 = *rax_7;\n                close(r12_1);\n                *rax_7 = r13_1;\n            }\n        }\n    }\n    return rbx_1;\n}\n\n"
        },
        {
            "funcName": "sub_4063f0",
            "funcStartAddr": "0x4063f0",
            "funcEndAddr": "0x40649f",
            "decompiledFuncCode": "int64_t sub_4063f0(int32_t arg1, int64_t* arg2, int64_t* arg3)\n{\n    if ((arg1 & 0x102) == 0)\n    {\n        int64_t rax_6 = sub_408be0(*arg2, &arg3[0xf]);\n        if (rax_6 != 0)\n        {\n            *arg3 = arg3;\n            arg3[0xe] = 2;\n            return rax_6;\n        }\n    }\n    else\n    {\n        int64_t* rax = malloc(0x18);\n        int64_t rax_3;\n        if (rax != 0)\n        {\n            int64_t rax_1 = arg3[0xf];\n            int64_t* rdi = *arg2;\n            rax[2] = arg3;\n            *rax = rax_1;\n            rax[1] = arg3[0x10];\n            rax_3 = sub_409d40(rdi, rax);\n            if (rax != rax_3)\n            {\n                free(rax);\n                if (rax_3 != 0)\n                {\n                    int64_t rax_4 = *(rax_3 + 0x10);\n                    arg3[0xe] = 2;\n                    *arg3 = rax_4;\n                }\n            }\n        }\n        if ((rax == 0 || ((rax != 0 && rax != rax_3) && rax_3 == 0)))\n        {\n            return 0;\n        }\n    }\n    return 1;\n}\n\n"
        },
        {
            "funcName": "sub_4064a0",
            "funcStartAddr": "0x401c13",
            "funcEndAddr": "0x406536",
            "decompiledFuncCode": "void* sub_4064a0(int32_t arg1, void*** arg2, void* arg3)\n{\n    if ((arg1 & 0x102) != 0)\n    {\n        int64_t var_28_1 = *(arg3 + 0x78);\n        int64_t var_20_1 = *(arg3 + 0x80);\n        int64_t rax_3 = sub_409d80(*arg2);\n        if (rax_3 != 0)\n        {\n            return free(rax_3);\n        }\n    }\n    else\n    {\n        void* rax = *(arg3 + 8);\n        void** rcx_1;\n        if ((rax != 0 && *(rax + 0x58) >= 0))\n        {\n            rcx_1 = *arg2;\n            if ((rcx_1[2] != 0 && (*rcx_1 == *(arg3 + 0x80) && rcx_1[1] == *(arg3 + 0x78))))\n            {\n                int64_t rdx = *(rax + 0x78);\n                rax = *(rax + 0x80);\n                rcx_1[1] = rdx;\n                *rcx_1 = rax;\n            }\n        }\n        if (((rax == 0 || (rax != 0 && *(rax + 0x58) < 0)) || ((rax != 0 && *(rax + 0x58) >= 0) && rcx_1[2] != 0)))\n        {\n            return rax;\n        }\n    }\n    abort();\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_406540",
            "funcStartAddr": "0x406540",
            "funcEndAddr": "0x406ef3",
            "decompiledFuncCode": "void* const sub_406540(int64_t* arg1, int32_t arg2)\n{\n    int64_t* r13 = *arg1;\n    DIR* rdi = r13[3];\n    void* const var_80;\n    int64_t var_60_1;\n    char var_39_1;\n    int32_t rdi_1;\n    if (rdi == 0)\n    {\n        int32_t rax_31 = arg1[9];\n        int32_t rcx_7 = (rax_31 & 0x10);\n        if (rcx_7 != 0)\n        {\n            rcx_7 = 0x20000;\n            if ((rax_31 & 1) != 0)\n            {\n                int32_t rcx_9;\n                rcx_9 = r13[0xb] != 0;\n                rcx_7 = (rcx_9 << 0x11);\n            }\n        }\n        char* rsi_8 = r13[6];\n        uint64_t rdi_9 = 0xffffff9c;\n        int32_t rdx_18 = (((rax_31 << 7) & 0x40000) | rcx_7);\n        if ((rax_31 & 0x204) == 0x200)\n        {\n            rdi_9 = *(arg1 + 0x2c);\n        }\n        int32_t rax_34 = sub_40a590(rdi_9, rsi_8, (rdx_18 | 0x90900), rcx_7);\n        int32_t rbx_2 = rax_34;\n        DIR* rax_35;\n        if (rax_34 >= 0)\n        {\n            rax_35 = fdopendir(rax_34);\n            if (rax_35 == 0)\n            {\n                int32_t* rax_58 = __errno_location();\n                int32_t r12_2 = *rax_58;\n                close(rbx_2);\n                *rax_58 = r12_2;\n            }\n            else\n            {\n                bool cond:2_1 = r13[0xe] == 0xb;\n                r13[3] = rax_35;\n                int32_t rdi_11;\n                if (cond:2_1)\n                {\n                    rax_35 = sub_405ad0(arg1, r13, 0);\n                    r13[0xe] = rax_35;\n                }\n                else\n                {\n                    rdi_11 = arg1[9];\n                    if ((rdi_11 & 0x100) != 0)\n                    {\n                        sub_4064a0(rdi_11, &arg1[0xb], r13);\n                        sub_405ad0(arg1, r13, 0);\n                        rax_35 = sub_4063f0(arg1[9], &arg1[0xb], r13);\n                    }\n                }\n                if (((cond:2_1 || ((!cond:2_1) && (rdi_11 & 0x100) == 0)) || (((!cond:2_1) && (rdi_11 & 0x100) != 0) && rax_35 != 0)))\n                {\n                    var_60_1 = (((rax_35 - rax_35) & 0x186a1) - 1);\n                    if (arg2 != 2)\n                    {\n                        int32_t rax_46;\n                        int64_t r12;\n                        char r14_2;\n                        if (((arg1[9] & 0x38) == 0x18 && r13[0x11] == 2))\n                        {\n                            rax_46 = sub_405fc0(r13);\n                            if ((rax_46 != 0 && arg2 == 3))\n                            {\n                                r14_2 = 0;\n                                r12 = 1;\n                            }\n                        }\n                        if ((((arg1[9] & 0x38) != 0x18 || ((arg1[9] & 0x38) == 0x18 && r13[0x11] != 2)) || (((arg1[9] & 0x38) == 0x18 && r13[0x11] == 2) && rax_46 == 0)))\n                        {\n                            r14_2 = 1;\n                            r12 = arg2 == 3;\n                        }\n                        if (((((arg1[9] & 0x38) != 0x18 || ((arg1[9] & 0x38) == 0x18 && r13[0x11] != 2)) || (((arg1[9] & 0x38) == 0x18 && r13[0x11] == 2) && rax_46 == 0)) || ((((arg1[9] & 0x38) == 0x18 && r13[0x11] == 2) && rax_46 != 0) && arg2 == 3)))\n                        {\n                            int16_t rbp_3;\n                            DIR* rdi_13;\n                            if ((*(arg1 + 0x49) & 2) != 0)\n                            {\n                                int32_t rax_61 = sub_40a6b0(rbx_2, 0x406, 3);\n                                rbx_2 = rax_61;\n                                if (rax_61 >= 0)\n                                {\n                                    goto label_406a0a;\n                                }\n                                rdi_13 = r13[3];\n                                rbp_3 = (*(r13 + 0x72) | 1);\n                                if (r12 == 0)\n                                {\n                                label_406d9a:\n                                    *(r13 + 0x72) = rbp_3;\n                                    closedir(rdi_13);\n                                    rdi_1 = arg1[9];\n                                label_406a6f:\n                                    r13[3] = 0;\n                                    var_39_1 = 0;\n                                    goto label_406594;\n                                }\n                                if (r14_2 == 0)\n                                {\n                                    goto label_406d9a;\n                                }\n                            label_406a3e:\n                                r13[8] = *__errno_location();\n                            label_406a42:\n                                *(r13 + 0x72) = rbp_3;\n                                closedir(rdi_13);\n                                rdi_1 = arg1[9];\n                                r13[3] = 0;\n                                if (((rdi_1 & 0x200) != 0 && rbx_2 >= 0))\n                                {\n                                    close(rbx_2);\n                                    rdi_1 = arg1[9];\n                                }\n                                goto label_406a6f;\n                            }\n                        label_406a0a:\n                            if (sub_406220(arg1, r13, rbx_2, nullptr) == 0)\n                            {\n                                goto label_40658b;\n                            }\n                            rdi_13 = r13[3];\n                            rbp_3 = (*(r13 + 0x72) | 1);\n                            if (r12 == 0)\n                            {\n                                goto label_406a42;\n                            }\n                            if (r14_2 != 0)\n                            {\n                                goto label_406a3e;\n                            }\n                            goto label_406a42;\n                        }\n                    }\n                    var_39_1 = 0;\n                    rdi_1 = arg1[9];\n                    goto label_406594;\n                }\n                if ((((!cond:2_1) && (rdi_11 & 0x100) != 0) && rax_35 == 0))\n                {\n                    var_80 = nullptr;\n                    *__errno_location() = 0xc;\n                }\n            }\n        }\n        if (((rax_34 >= 0 && rax_35 == 0) || rax_34 < 0))\n        {\n            r13[3] = 0;\n            if (arg2 != 3)\n            {\n                goto label_406cc5;\n            }\n            goto label_406def;\n        }\n    }\n    else if (dirfd(rdi) < 0)\n    {\n        closedir(r13[3]);\n        r13[3] = 0;\n        if (arg2 != 3)\n        {\n            goto label_406cc5;\n        }\n    label_406def:\n        r13[0xe] = 4;\n        r13[8] = *__errno_location();\n    label_406cc5:\n        var_80 = nullptr;\n    }\n    else\n    {\n        if (arg1[8] != 0)\n        {\n            var_60_1 = -1;\n        label_40658b:\n            var_39_1 = 1;\n            rdi_1 = arg1[9];\n            goto label_406594;\n        }\n        var_60_1 = 0x186a0;\n        rdi_1 = arg1[9];\n        var_39_1 = 1;\n    label_406594:\n        int64_t rcx_1 = r13[9];\n        int64_t var_88_1 = rcx_1;\n        int64_t var_50_1 = (rcx_1 - 1);\n        if (*((r13[7] + rcx_1) - 1) != 0x2f)\n        {\n            var_50_1 = rcx_1;\n            var_88_1 = (rcx_1 + 1);\n        }\n        void* var_58_1 = nullptr;\n        if ((rdi_1 & 4) != 0)\n        {\n            char* rax_5 = (var_50_1 + arg1[4]);\n            *rax_5 = 0x2f;\n            var_58_1 = &rax_5[1];\n        }\n        char var_3a_1 = 0;\n        uint64_t rbp_1 = 0;\n        int64_t var_78_1 = (arg1[6] - var_88_1);\n        void* var_90_1 = nullptr;\n        int64_t rax_9 = (r13[0xb] + 1);\n        var_80 = nullptr;\n        while (true)\n        {\n            DIR* r15_2 = r13[3];\n            int32_t* rax_13;\n            struct dirent64* rax_14;\n            int64_t* r13_2;\n            int64_t* r15_4;\n            if (r15_2 == 0)\n            {\n                r13_2 = r13;\n                r15_4 = arg1;\n            }\n            else\n            {\n                rax_13 = __errno_location();\n                *rax_13 = 0;\n                rax_14 = readdir(r15_2);\n                if (rax_14 == 0)\n                {\n                    int32_t rax_52 = *rax_13;\n                    r13_2 = r13;\n                    r15_4 = arg1;\n                    if (rax_52 != 0)\n                    {\n                        r13_2[8] = rax_52;\n                        int64_t rax_54 = (rdi | rbp_1);\n                        r13_2[0xe] = (((rax_54 - rax_54) & 0xfffd) + 7);\n                    }\n                    DIR* rdi_23 = r13_2[3];\n                    if (rdi_23 != 0)\n                    {\n                        closedir(rdi_23);\n                        r13_2[3] = 0;\n                    }\n                }\n            }\n            if (((r15_2 == 0 || (r15_2 != 0 && rax_14 == 0)) && var_3a_1 != 0))\n            {\n            label_40682f:\n                void* rax_28 = r15_4[1];\n                int64_t rcx_5 = r15_4[4];\n                if (rax_28 != 0)\n                {\n                    do\n                    {\n                        int64_t rdx_8 = *(rax_28 + 0x30);\n                        if (rdx_8 != (rax_28 + 0x108))\n                        {\n                            *(rax_28 + 0x30) = ((rdx_8 - *(rax_28 + 0x38)) + rcx_5);\n                        }\n                        *(rax_28 + 0x38) = rcx_5;\n                        rax_28 = *(rax_28 + 0x10);\n                    } while (rax_28 != 0);\n                }\n                void* const rax_29 = var_80;\n                while (*(rax_29 + 0x58) >= 0)\n                {\n                    int64_t rdx_12 = *(rax_29 + 0x30);\n                    if (rdx_12 != (rax_29 + 0x108))\n                    {\n                        *(rax_29 + 0x30) = ((rdx_12 - *(rax_29 + 0x38)) + rcx_5);\n                    }\n                    void* rdx_11 = *(rax_29 + 0x10);\n                    *(rax_29 + 0x38) = rcx_5;\n                    if (rdx_11 == 0)\n                    {\n                        rdx_11 = *(rax_29 + 8);\n                    }\n                    rax_29 = rdx_11;\n                }\n            }\n            if ((r15_2 != 0 && rax_14 != 0))\n            {\n                void* r15_1;\n                if ((arg1[9] & 0x20) != 0)\n                {\n                label_4066b3:\n                    uint64_t rax_15 = strlen(&rax_14->d_name);\n                    void* rax_16 = sub_405d80(arg1, &rax_14->d_name, rax_15);\n                    r15_1 = rax_16;\n                    if (rax_16 == 0)\n                    {\n                    label_406aab:\n                        int32_t rbx_3 = *rax_13;\n                        free(r15_1);\n                        sub_405e10(var_80);\n                        closedir(r13[3]);\n                        r13[3] = 0;\n                        r13[0xe] = 7;\n                        var_80 = nullptr;\n                        arg1[9] = (arg1[9] | 0x4000);\n                        *rax_13 = rbx_3;\n                        break;\n                    }\n                    if (var_78_1 <= rax_15)\n                    {\n                        int64_t rax_23 = arg1[4];\n                        char rax_25 = sub_406100(&arg1[4], &arg1[6], ((var_50_1 + rax_15) + 2));\n                        if (rax_25 == 0)\n                        {\n                            goto label_406aab;\n                        }\n                        void* rdx_5 = arg1[4];\n                        if (rdx_5 == rax_23)\n                        {\n                            rax_25 = var_3a_1;\n                        }\n                        else\n                        {\n                            void* rdx_6 = (rdx_5 + var_88_1);\n                            if ((arg1[9] & 4) == 0)\n                            {\n                                rdx_6 = var_58_1;\n                            }\n                            var_58_1 = rdx_6;\n                        }\n                        var_3a_1 = rax_25;\n                        var_78_1 = (arg1[6] - var_88_1);\n                        goto label_4066e3;\n                    }\n                label_4066e3:\n                    int64_t r8_2 = (rax_15 + var_88_1);\n                    if ((rax_15 + var_88_1) < rax_15)\n                    {\n                        free(r15_1);\n                        sub_405e10(var_80);\n                        closedir(r13[3]);\n                        r13[3] = 0;\n                        r13[0xe] = 7;\n                        var_80 = nullptr;\n                        arg1[9] = (arg1[9] | 0x4000);\n                        *rax_13 = 0x24;\n                        break;\n                    }\n                    void* rsi_1 = (r15_1 + 0x108);\n                    *(r15_1 + 0x58) = rax_9;\n                    int64_t rax_18 = *arg1;\n                    *(r15_1 + 0x48) = r8_2;\n                    *(r15_1 + 8) = rax_18;\n                    *(r15_1 + 0x80) = rax_14->d_ino;\n                    int32_t rax_20 = arg1[9];\n                    if ((rax_20 & 4) != 0)\n                    {\n                        *(r15_1 + 0x30) = *(r15_1 + 0x38);\n                        memmove(var_58_1, rsi_1, (*(r15_1 + 0x60) + 1));\n                        rax_20 = arg1[9];\n                    }\n                    else\n                    {\n                        *(r15_1 + 0x30) = rsi_1;\n                    }\n                    if ((arg1[8] == 0 || (arg1[8] != 0 && (*rax_20[1] & 4) != 0)))\n                    {\n                        uint32_t rdx_2 = rax_14->d_type;\n                        uint64_t rdx_3 = (rdx_2 - 1);\n                        int64_t rax_10;\n                        if (((rax_20 & 0x18) != 0x18 || ((rax_20 & 0x18) == 0x18 && (rdx_2 & 0xfb) == 0)))\n                        {\n                            *(r15_1 + 0x70) = 0xb;\n                            if (rdx_3 > 0xb)\n                            {\n                                *(r15_1 + 0x90) = 0;\n                                rax_10 = 2;\n                            }\n                            else\n                            {\n                                *(r15_1 + 0x90) = *((rdx_3 << 2) + 0x40c7c0);\n                                rax_10 = 2;\n                            }\n                        }\n                        if (((rax_20 & 0x18) == 0x18 && (rdx_2 & 0xfb) != 0))\n                        {\n                            *(r15_1 + 0x70) = 0xb;\n                            if (rdx_3 <= 0xb)\n                            {\n                                *(r15_1 + 0x90) = *((rdx_3 << 2) + 0x40c7c0);\n                                rax_10 = 1;\n                            }\n                            else\n                            {\n                                *(r15_1 + 0x90) = 0;\n                                rax_10 = 1;\n                            }\n                        }\n                        *(r15_1 + 0xa8) = rax_10;\n                    }\n                    if ((arg1[8] != 0 && (*rax_20[1] & 4) == 0))\n                    {\n                        *(r15_1 + 0x70) = sub_405ad0(arg1, r15_1, 0);\n                    }\n                    *(r15_1 + 0x10) = 0;\n                    if (var_80 != 0)\n                    {\n                        rbp_1 = (rbp_1 + 1);\n                        *(var_90_1 + 0x10) = r15_1;\n                        if (rbp_1 < var_60_1)\n                        {\n                            goto label_406663;\n                        }\n                        goto label_406821;\n                    }\n                    var_80 = r15_1;\n                    rbp_1 = (rbp_1 + 1);\n                    if (rbp_1 < var_60_1)\n                    {\n                        goto label_406663;\n                    }\n                label_406821:\n                    r13_2 = r13;\n                    r15_4 = arg1;\n                    if (var_3a_1 != 0)\n                    {\n                        goto label_40682f;\n                    }\n                }\n                else\n                {\n                    if (rax_14->d_name[0] != 0x2e)\n                    {\n                        goto label_4066b3;\n                    }\n                    if ((rax_14->d_name[1] != 0 && rax_14->d_name[1] != 0x2e))\n                    {\n                        goto label_4066b3;\n                    }\n                    r15_1 = var_90_1;\n                label_406663:\n                    var_90_1 = r15_1;\n                    continue;\n                }\n            }\n            if ((r15_4[9] & 4) != 0)\n            {\n                if ((r15_4[6] == var_88_1 || (r15_4[6] != var_88_1 && rbp_1 == 0)))\n                {\n                    var_58_1 = (var_58_1 - 1);\n                }\n                *var_58_1 = 0;\n            }\n            if ((rdi == 0 && var_39_1 != 0))\n            {\n                if ((arg2 != 1 && rbp_1 != 0))\n                {\n                    goto label_406bb1;\n                }\n                int32_t rax_50;\n                if (r13_2[0xb] != 0)\n                {\n                    rax_50 = sub_406220(r15_4, r13_2[1], 0xffffffff, &data_40c7aa) != 0;\n                }\n                else\n                {\n                    rax_50 = sub_4060a0(r15_4) != 0;\n                }\n                if (rax_50 != 0)\n                {\n                    r13_2[0xe] = 7;\n                    r15_4[9] = (r15_4[9] | 0x4000);\n                    sub_405e10(var_80);\n                    var_80 = nullptr;\n                    break;\n                }\n            }\n            if (rbp_1 == 0)\n            {\n                if (arg2 == 3)\n                {\n                    int16_t rax_66 = r13_2[0xe];\n                    if ((rax_66 != 4 && rax_66 != 7))\n                    {\n                        r13_2[0xe] = 6;\n                    }\n                }\n                sub_405e10(var_80);\n                var_80 = nullptr;\n                break;\n            }\n        label_406bb1:\n            int64_t rax_51 = r15_4[8];\n            int64_t rax_64;\n            if (rbp_1 > 0x2710)\n            {\n                if (rax_51 != 0)\n                {\n                label_406be0:\n                    /* tailcall */\n                    return sub_405c80(r15_4, var_80, rbp_1);\n                }\n                rax_64 = sub_405ea0(r13_2);\n                if ((rax_64 == 0x6969 || rax_64 == 0x1021994))\n                {\n                    rax_51 = r15_4[8];\n                }\n                if ((rax_64 != 0x6969 && rax_64 != 0x1021994))\n                {\n                    r15_4[8] = 0x405aa0;\n                    void* rax_65 = sub_405c80(r15_4, var_80, rbp_1);\n                    r15_4[8] = 0;\n                    var_80 = rax_65;\n                }\n            }\n            if ((((((rbp_1 > 0x2710 && rax_51 == 0) && (rax_64 == 0x6969 || rax_64 == 0x1021994)) || rbp_1 <= 0x2710) && rax_51 != 0) && rbp_1 != 1))\n            {\n                goto label_406be0;\n            }\n            break;\n        }\n    }\n    return var_80;\n}\n\n"
        },
        {
            "funcName": "fts_open",
            "funcStartAddr": "0x406f00",
            "funcEndAddr": "0x407299",
            "decompiledFuncCode": "void** fts_open(int64_t* arg1, int32_t arg2, int64_t arg3)\n{\n    void** rbx;\n    if ((((arg2 & 0xffffe000) != 0 || ((arg2 & 0xffffe000) == 0 && (arg2 & 0x204) == 0x204)) || (((arg2 & 0xffffe000) == 0 && (arg2 & 0x204) != 0x204) && (arg2 & 0x12) == 0)))\n    {\n        rbx = nullptr;\n        *__errno_location() = 0x16;\n    }\n    if ((((arg2 & 0xffffe000) == 0 && (arg2 & 0x204) != 0x204) && (arg2 & 0x12) != 0))\n    {\n        void** rax_3 = calloc(0x80, 1);\n        rbx = rax_3;\n        if (rax_3 != 0)\n        {\n            rax_3[8] = arg3;\n            if ((arg2 & 2) != 0)\n            {\n                int32_t rax_21;\n                *rax_21[1] = (*arg2[1] & 0xfd);\n                rbx[9] = (rax_21 | 4);\n            }\n            else\n            {\n                rax_3[9] = arg2;\n            }\n            char* rdi = *arg1;\n            *(rbx + 0x2c) = 0xffffff9c;\n            int64_t rdx;\n            if (rdi == 0)\n            {\n                rdx = 0x1000;\n            }\n            else\n            {\n                int64_t* r15_1 = arg1;\n                uint64_t r12_1 = 0;\n                do\n                {\n                    uint64_t rax_4 = strlen(rdi);\n                    if (r12_1 < rax_4)\n                    {\n                        r12_1 = rax_4;\n                    }\n                    r15_1 = &r15_1[1];\n                    rdi = *r15_1;\n                } while (rdi != 0);\n                rdx = (r12_1 + 1);\n                if (rdx < 0x1000)\n                {\n                    rdx = 0x1000;\n                }\n            }\n            char rax_5 = sub_406100(&rbx[4], &rbx[6], rdx);\n            char var_42_1 = rax_5;\n            if (rax_5 == 0)\n            {\n                goto label_4071cb;\n            }\n            char* r15_2 = *arg1;\n            void* const var_50_1;\n            void* rax_6;\n            void* r12_2;\n            if (r15_2 == 0)\n            {\n                var_50_1 = nullptr;\n                if (arg3 == 0)\n                {\n                label_407202:\n                    r12_2 = nullptr;\n                label_407146:\n                    void* rax_17 = sub_405d80(rbx, 0x40c917, 0);\n                    *rbx = rax_17;\n                    if (rax_17 != 0)\n                    {\n                        *(rax_17 + 0x10) = r12_2;\n                        int32_t rdi_7 = rbx[9];\n                        *(rax_17 + 0x70) = 9;\n                        if (sub_406170(rdi_7, &rbx[0xb]) == 0)\n                        {\n                            goto label_4071b3;\n                        }\n                        int32_t rsi_4 = rbx[9];\n                        if ((rsi_4 & 0x204) == 0)\n                        {\n                            int32_t rax_25 = sub_4061d0(*(rbx + 0x2c), rsi_4, &data_40c7ab);\n                            rbx[5] = rax_25;\n                            if (rax_25 < 0)\n                            {\n                                rbx[9] = (rbx[9] | 4);\n                            }\n                        }\n                        sub_409f60(&rbx[0xc], 0xffffffff);\n                    }\n                    else\n                    {\n                    label_4071b3:\n                        sub_405e10(r12_2);\n                        free(var_50_1);\n                    label_4071c6:\n                        free(rbx[4]);\n                    label_4071cb:\n                        void** rdi_12 = rbx;\n                        rbx = nullptr;\n                        free(rdi_12);\n                    }\n                }\n            }\n            else\n            {\n                rax_6 = sub_405d80(rbx, 0x40c917, 0);\n                var_50_1 = rax_6;\n                if (rax_6 != 0)\n                {\n                    r15_2 = *arg1;\n                    *(rax_6 + 0x58) = -1;\n                    *(rax_6 + 0x68) = -1;\n                }\n            }\n            if (((r15_2 == 0 && arg3 != 0) || ((r15_2 != 0 && rax_6 != 0) && arg3 != 0)))\n            {\n                var_42_1 = ((rbx[9] >> 0xa) & 1);\n            }\n            if ((((r15_2 == 0 && arg3 != 0) || ((r15_2 != 0 && rax_6 != 0) && arg3 != 0)) || ((r15_2 != 0 && rax_6 != 0) && arg3 == 0)))\n            {\n                if (r15_2 == 0)\n                {\n                    goto label_407202;\n                }\n                void* const var_40_1 = nullptr;\n                r12_2 = nullptr;\n                uint64_t rbp_4 = 0;\n                char rax_11 = (((arg2 >> 0xc) ^ 1) & 1);\n                void* rax_13;\n                do\n                {\n                    uint64_t rax_12 = strlen(r15_2);\n                    if ((rax_12 > 2 && (rax_11 != 0 && r15_2[(rax_12 - 1)] == 0x2f)))\n                    {\n                        while (r15_2[(rax_12 - 2)] == 0x2f)\n                        {\n                            rax_12 = (rax_12 - 1);\n                            if (rax_12 == 1)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    rax_13 = sub_405d80(rbx, r15_2, rax_12);\n                    if (rax_13 == 0)\n                    {\n                        break;\n                    }\n                    *(rax_13 + 0x58) = 0;\n                    *(rax_13 + 8) = var_50_1;\n                    *(rax_13 + 0x30) = (rax_13 + 0x108);\n                    if ((r12_2 == 0 || (r12_2 != 0 && var_42_1 == 0)))\n                    {\n                        *(rax_13 + 0x70) = sub_405ad0(rbx, rax_13, 0);\n                        if (arg3 != 0)\n                        {\n                        label_4070b8:\n                            *(rax_13 + 0x10) = r12_2;\n                            r12_2 = rax_13;\n                        }\n                        else\n                        {\n                            *(rax_13 + 0x10) = 0;\n                            if (r12_2 != 0)\n                            {\n                                goto label_407250;\n                            }\n                            var_40_1 = rax_13;\n                            r12_2 = rax_13;\n                        }\n                    }\n                    if ((r12_2 != 0 && var_42_1 != 0))\n                    {\n                        *(rax_13 + 0xa8) = 2;\n                        *(rax_13 + 0x70) = 0xb;\n                        if (arg3 != 0)\n                        {\n                            goto label_4070b8;\n                        }\n                        *(rax_13 + 0x10) = 0;\n                    label_407250:\n                        void* const rax_24 = var_40_1;\n                        var_40_1 = rax_13;\n                        *(rax_24 + 0x10) = rax_13;\n                    }\n                    rbp_4 = (rbp_4 + 1);\n                    r15_2 = arg1[rbp_4];\n                } while (r15_2 != 0);\n                if (rax_13 == 0)\n                {\n                    goto label_4071b3;\n                }\n                if ((arg3 != 0 && rbp_4 > 1))\n                {\n                    r12_2 = sub_405c80(rbx, r12_2, rbp_4);\n                }\n                goto label_407146;\n            }\n            if ((r15_2 != 0 && rax_6 == 0))\n            {\n                goto label_4071c6;\n            }\n        }\n    }\n    return rbx;\n}\n\n"
        },
        {
            "funcName": "fts_close",
            "funcStartAddr": "0x4072a0",
            "funcEndAddr": "0x407419",
            "decompiledFuncCode": "uint64_t fts_close(int64_t* arg1)\n{\n    void* rdi = *arg1;\n    if (rdi != 0)\n    {\n        void* rbx_1;\n        if (*(rdi + 0x58) < 0)\n        {\n            rbx_1 = rdi;\n        }\n        else\n        {\n            while (true)\n            {\n                rbx_1 = *(rdi + 0x10);\n                if (rbx_1 != 0)\n                {\n                    free(rdi);\n                    rdi = rbx_1;\n                    if (*(rbx_1 + 0x58) < 0)\n                    {\n                        break;\n                    }\n                }\n                else\n                {\n                    rbx_1 = *(rdi + 8);\n                    free(rdi);\n                    rdi = rbx_1;\n                    if (*(rbx_1 + 0x58) < 0)\n                    {\n                        break;\n                    }\n                }\n            }\n        }\n        free(rbx_1);\n    }\n    void* rdi_2 = arg1[1];\n    if (rdi_2 != 0)\n    {\n        sub_405e10(rdi_2);\n    }\n    free(arg1[2]);\n    free(arg1[4]);\n    int16_t rax = arg1[9];\n    int32_t rbx_2;\n    if ((*rax[1] & 2) != 0)\n    {\n        int32_t rdi_5 = *(arg1 + 0x2c);\n        if (rdi_5 < 0)\n        {\n            goto label_407322;\n        }\n        if (close(rdi_5) == 0)\n        {\n            goto label_407322;\n        }\n        rbx_2 = *__errno_location();\n    }\n    else if ((rax & 4) != 0)\n    {\n    label_407322:\n        rbx_2 = 0;\n    }\n    else\n    {\n        int32_t rax_2 = fchdir(arg1[5]);\n        int32_t rax_8;\n        int32_t* r12_1;\n        if (rax_2 != 0)\n        {\n            int32_t* rax_7 = __errno_location();\n            r12_1 = rax_7;\n            rbx_2 = *rax_7;\n            rax_8 = close(arg1[5]);\n        }\n        else\n        {\n            if (close(arg1[5]) == 0)\n            {\n                goto label_407322;\n            }\n            r12_1 = __errno_location();\n        }\n        if ((((rax_2 != 0 && rax_8 != 0) && rbx_2 == 0) || rax_2 == 0))\n        {\n            rbx_2 = *r12_1;\n        }\n    }\n    sub_405e60(&arg1[0xc]);\n    int64_t* rdi_7 = arg1[0xa];\n    if (rdi_7 != 0)\n    {\n        sub_4097e0(rdi_7);\n    }\n    int64_t* rdi_8 = arg1[0xb];\n    if ((arg1[9] & 0x102) == 0)\n    {\n        free(rdi_8);\n    }\n    else if (rdi_8 != 0)\n    {\n        sub_4097e0(rdi_8);\n    }\n    free(arg1);\n    if (rbx_2 != 0)\n    {\n        *__errno_location() = rbx_2;\n        rbx_2 = -1;\n    }\n    return rbx_2;\n}\n\n"
        },
        {
            "funcName": "fts_read",
            "funcStartAddr": "0x401c18",
            "funcEndAddr": "0x407b79",
            "decompiledFuncCode": "int64_t* fts_read(int64_t* arg1)\n{\n    int64_t* rbp = *arg1;\n    if (rbp == 0)\n    {\n        goto label_407548;\n    }\n    int32_t rdx_1 = arg1[9];\n    if ((*rdx_1[1] & 0x40) != 0)\n    {\n        goto label_407548;\n    }\n    int16_t rax_1 = *(rbp + 0x74);\n    *(rbp + 0x74) = 3;\n    if (rax_1 == 1)\n    {\n        rbp[0xe] = sub_405ad0(arg1, rbp, 0);\n        goto label_407555;\n    }\n    int16_t rcx_1 = rbp[0xe];\n    int16_t rax_16;\n    int64_t* rbx_1;\n    if ((rax_1 == 2 && (rcx_1 - 0xc) <= 1))\n    {\n        int16_t rax_22 = sub_405ad0(arg1, rbp, 1);\n        rbp[0xe] = rax_22;\n        if (rax_22 == 1)\n        {\n            int32_t rsi_17 = arg1[9];\n            if ((rsi_17 & 4) == 0)\n            {\n                int32_t rax_43 = sub_4061d0(*(arg1 + 0x2c), rsi_17, &data_40c7ab);\n                *(rbp + 0x44) = rax_43;\n                if (rax_43 < 0)\n                {\n                    int32_t rax_45 = *__errno_location();\n                    rbp[0xe] = 7;\n                    rbp[8] = rax_45;\n                    *arg1 = rbp;\n                    goto label_407555;\n                }\n                *(rbp + 0x72) = (*(rbp + 0x72) | 2);\n                rax_16 = rbp[0xe];\n                rbx_1 = rbp;\n            label_407757:\n                *arg1 = rbx_1;\n                if (rax_16 == 0xb)\n                {\n                    goto label_4077e0;\n                }\n                goto label_407761;\n            }\n            *arg1 = rbp;\n            rbx_1 = rbp;\n        }\n        else\n        {\n            *arg1 = rbp;\n            if (rax_22 != 0xb)\n            {\n                goto label_407555;\n            }\n            rbx_1 = rbp;\n        label_4077e0:\n            int64_t rax_23 = rbx_1[0x15];\n            if (rax_23 != 2)\n            {\n                if (rax_23 != 1)\n                {\n                label_401c18:\n                    abort();\n                    /* no return */\n                }\n            label_407809:\n                return rbx_1;\n            }\n            void* rbp_3 = rbx_1[1];\n            if (*(rbp_3 + 0x68) != 0)\n            {\n            label_40796b:\n                rax_16 = sub_405ad0(arg1, rbx_1, 0);\n                int32_t rdx_14 = rbx_1[0x12];\n                rbx_1[0xe] = rax_16;\n                if ((rdx_14 & 0xf000) != 0x4000)\n                {\n                    goto label_407761;\n                }\n                if (rbx_1[0xb] != 0)\n                {\n                    int64_t rdx_16 = (*(rbp_3 + 0x68) - 1);\n                    if (rdx_16 <= -3)\n                    {\n                        *(rbp_3 + 0x68) = rdx_16;\n                    }\n                    if (rax_16 == 1)\n                    {\n                        goto label_40778b;\n                    }\n                    goto label_407809;\n                }\n                if (rax_16 == 1)\n                {\n                    goto label_407779;\n                }\n                goto label_407809;\n            }\n            if ((arg1[9] & 0x18) != 0x18)\n            {\n                goto label_40796b;\n            }\n            if (sub_405fc0(rbp_3) != 2)\n            {\n                goto label_40796b;\n            }\n            rax_16 = rbx_1[0xe];\n        label_407761:\n            rbp = rbx_1;\n            if (rax_16 != 1)\n            {\n                goto label_407555;\n            }\n        }\n        if (rbx_1[0xb] != 0)\n        {\n            goto label_40778b;\n        }\n    label_407779:\n        arg1[3] = rbx_1[0xf];\n    label_40778b:\n        rbp = rbx_1;\n        if (sub_4063f0(arg1[9], &arg1[0xb], rbx_1) == 0)\n        {\n            rbp = nullptr;\n            *__errno_location() = 0xc;\n        }\n        goto label_407555;\n    }\n    if ((((rax_1 == 2 && (rcx_1 - 0xc) > 1) && rcx_1 == 1) || ((rax_1 != 2 && rcx_1 == 1) && rax_1 != 4)))\n    {\n        if ((rdx_1 & 0x40) == 0)\n        {\n        label_40758b:\n            void* rdi_4 = arg1[1];\n            if (rdi_4 == 0)\n            {\n                goto label_407841;\n            }\n            if ((*rdx_1[1] & 0x20) != 0)\n            {\n                *rdx_1[1] = (*rdx_1[1] & 0xdf);\n                arg1[9] = rdx_1;\n                sub_405e10(rdi_4);\n                arg1[1] = 0;\n            label_407841:\n                int64_t* rax_26 = sub_406540(arg1, 3);\n                rbx_1 = rax_26;\n                arg1[1] = rax_26;\n                if (rax_26 == 0)\n                {\n                    int32_t rdi_18 = arg1[9];\n                    if ((rdi_18 & 0x4000) != 0)\n                    {\n                        goto label_407548;\n                    }\n                    if ((rbp[8] != 0 && rbp[0xe] != 4))\n                    {\n                        rbp[0xe] = 7;\n                    }\n                    sub_4064a0(rdi_18, &arg1[0xb], rbp);\n                    goto label_407555;\n                }\n            label_4075f5:\n                arg1[1] = 0;\n                goto label_40771a;\n            }\n            if (sub_406220(arg1, rbp, 0xffffffff, rbp[6]) == 0)\n            {\n                rbx_1 = arg1[1];\n            }\n            else\n            {\n                rbx_1 = arg1[1];\n                int32_t rax_10 = *__errno_location();\n                *(rbp + 0x72) = (*(rbp + 0x72) | 1);\n                rbp[8] = rax_10;\n                if (rbx_1 != 0)\n                {\n                    int64_t* rax_11 = rbx_1;\n                    do\n                    {\n                        rax_11[6] = *(rax_11[1] + 0x30);\n                        rax_11 = rax_11[2];\n                    } while (rax_11 != 0);\n                }\n            }\n            goto label_4075f5;\n        }\n        if (rbp[0xf] == arg1[3])\n        {\n            goto label_40758b;\n        }\n    }\n    if (((rcx_1 == 1 && rax_1 == 4) || ((((rax_1 == 2 && (rcx_1 - 0xc) > 1) && rcx_1 == 1) || ((rax_1 != 2 && rcx_1 == 1) && rax_1 != 4)) && (rdx_1 & 0x40) != 0)))\n    {\n        if ((*(rbp + 0x72) & 2) == 0)\n        {\n            goto label_40761c;\n        }\n        close(*(rbp + 0x44));\n    label_40761c:\n        void* rdi_6 = arg1[1];\n        if (rdi_6 != 0)\n        {\n            sub_405e10(rdi_6);\n            arg1[1] = 0;\n        }\n        int32_t rdi_7 = arg1[9];\n        rbp[0xe] = 6;\n        sub_4064a0(rdi_7, &arg1[0xb], rbp);\n        goto label_407555;\n    }\n    if (((rax_1 != 2 && rcx_1 != 1) || ((rax_1 == 2 && (rcx_1 - 0xc) > 1) && rcx_1 != 1)))\n    {\n        int16_t rax_2;\n        do\n        {\n            rbx_1 = rbp[2];\n            if (rbx_1 == 0)\n            {\n                break;\n            }\n            *arg1 = rbx_1;\n            free(rbp);\n            if (rbx_1[0xb] == 0)\n            {\n                break;\n            }\n            rax_2 = *(rbx_1 + 0x74);\n            rbp = rbx_1;\n        } while (rax_2 == 4);\n        if ((rbx_1 != 0 && rbx_1[0xb] == 0))\n        {\n            if (sub_4060a0(arg1) != 0)\n            {\n                arg1[9] = (arg1[9] | 0x4000);\n            label_407548:\n                rbp = nullptr;\n            label_407555:\n                return rbp;\n            }\n            int64_t* rdi_9 = arg1[0xb];\n            if ((arg1[9] & 0x102) == 0)\n            {\n                free(rdi_9);\n            }\n            else if (rdi_9 != 0)\n            {\n                sub_4097e0(rdi_9);\n            }\n            int64_t rdx_7 = rbx_1[0xc];\n            void* rbp_1 = &rbx_1[0x21];\n            int64_t rdi_10 = arg1[4];\n            rbx_1[9] = rdx_7;\n            memmove(rdi_10, rbp_1, (rdx_7 + 1));\n            char* rax_13 = strrchr(rbp_1, 0x2f);\n            if ((rax_13 != 0 && (rbp_1 != rax_13 || (rbp_1 == rax_13 && *(rbp_1 + 1) != 0))))\n            {\n                uint64_t rax_14 = strlen(&rax_13[1]);\n                memmove(rbp_1, &rax_13[1], (rax_14 + 1));\n                rbx_1[0xc] = rax_14;\n            }\n            int64_t rax_15 = arg1[4];\n            int32_t rdi_14 = arg1[9];\n            rbx_1[7] = rax_15;\n            rbx_1[6] = rax_15;\n            sub_406170(rdi_14, &arg1[0xb]);\n            rax_16 = rbx_1[0xe];\n            goto label_407757;\n        }\n        if (rbx_1 == 0)\n        {\n            rbx_1 = rbp[1];\n            if (rbx_1[3] != 0)\n            {\n                int64_t rax_34 = rbx_1[9];\n                char* rdx_17 = arg1[4];\n                *arg1 = rbx_1;\n                rdx_17[rax_34] = 0;\n                int64_t* rax_35 = sub_406540(arg1, 3);\n                rbx_1 = rax_35;\n                if (rax_35 != 0)\n                {\n                    free(rbp);\n                label_40771a:\n                    void* rcx_4 = rbx_1[1];\n                    int64_t rdx_10 = *(rcx_4 + 0x48);\n                    int64_t rax_17 = (rdx_10 - 1);\n                    if (*((*(rcx_4 + 0x38) + rdx_10) - 1) != 0x2f)\n                    {\n                        rax_17 = rdx_10;\n                    }\n                    char* rax_18 = (rax_17 + arg1[4]);\n                    *rax_18 = 0x2f;\n                    memmove(&rax_18[1], &rbx_1[0x21], (rbx_1[0xc] + 1));\n                    rax_16 = rbx_1[0xe];\n                    goto label_407757;\n                }\n                if ((*(arg1 + 0x49) & 0x40) != 0)\n                {\n                    goto label_407548;\n                }\n                rbx_1 = rbp[1];\n            }\n            *arg1 = rbx_1;\n            free(rbp);\n            if (rbx_1[0xb] == -1)\n            {\n                rbp = nullptr;\n                free(rbx_1);\n                *__errno_location() = 0;\n                *arg1 = 0;\n                goto label_407555;\n            }\n            if (rbx_1[0xe] == 0xb)\n            {\n                goto label_401c18;\n            }\n            arg1[4][rbx_1[9]] = 0;\n            int32_t rax_29;\n            int32_t rdi_2;\n            if (rbx_1[0xb] == 0)\n            {\n                rax_29 = sub_4060a0(arg1);\n                if (rax_29 == 0)\n                {\n                label_40750b:\n                    rdi_2 = arg1[9];\n                }\n            }\n            else\n            {\n                char rax_4 = *(rbx_1 + 0x72);\n                if ((rax_4 & 2) != 0)\n                {\n                    int16_t rax_27 = arg1[9];\n                    int32_t rdi_19 = *(rbx_1 + 0x44);\n                    if ((rax_27 & 4) == 0)\n                    {\n                        if ((*rax_27[1] & 2) != 0)\n                        {\n                            sub_406030(arg1, rdi_19, 1);\n                            rdi_19 = *(rbx_1 + 0x44);\n                        }\n                        else\n                        {\n                            if (fchdir() != 0)\n                            {\n                                rbx_1[8] = *__errno_location();\n                                arg1[9] = (arg1[9] | 0x4000);\n                            }\n                            rdi_19 = *(rbx_1 + 0x44);\n                        }\n                    }\n                    close(rdi_19);\n                    goto label_40750b;\n                }\n                if ((rax_4 & 1) != 0)\n                {\n                    goto label_40750b;\n                }\n                if (sub_406220(arg1, rbx_1[1], 0xffffffff, &data_40c7aa) == 0)\n                {\n                    goto label_40750b;\n                }\n            }\n            if (((rbx_1[0xb] == 0 && rax_29 != 0) || rbx_1[0xb] != 0))\n            {\n                rbx_1[8] = *__errno_location();\n                arg1[9] = (arg1[9] | 0x4000);\n                if (rbx_1[0xe] == 2)\n                {\n                    goto label_407548;\n                }\n                rdi_2 = arg1[9];\n            }\n            if (((((rbx_1[0xb] == 0 && rax_29 == 0) && rbx_1[0xe] != 2) || (rbx_1[0xb] == 0 && rax_29 != 0)) || rbx_1[0xb] != 0))\n            {\n                if (rbx_1[8] != 0)\n                {\n                    rbx_1[0xe] = 7;\n                }\n                else\n                {\n                    rbx_1[0xe] = 6;\n                    sub_4064a0(rdi_2, &arg1[0xb], rbx_1);\n                    rdi_2 = arg1[9];\n                }\n            }\n            if ((rdi_2 & 0x4000) != 0)\n            {\n                goto label_407548;\n            }\n            goto label_407809;\n        }\n        if (rax_2 == 2)\n        {\n            int16_t rax_36 = sub_405ad0(arg1, rbx_1, 1);\n            rbx_1[0xe] = rax_36;\n            if (rax_36 == 1)\n            {\n                int32_t rsi_18 = arg1[9];\n                if ((rsi_18 & 4) == 0)\n                {\n                    int32_t rax_41 = sub_4061d0(*(arg1 + 0x2c), rsi_18, &data_40c7ab);\n                    *(rbx_1 + 0x44) = rax_41;\n                    if (rax_41 < 0)\n                    {\n                        int32_t rax_47 = *__errno_location();\n                        rbx_1[0xe] = 7;\n                        rbx_1[8] = rax_47;\n                    }\n                    else\n                    {\n                        *(rbx_1 + 0x72) = (*(rbx_1 + 0x72) | 2);\n                    }\n                }\n            }\n            *(rbx_1 + 0x74) = 3;\n        }\n        goto label_40771a;\n    }\n}\n\n"
        },
        {
            "funcName": "fts_set",
            "funcStartAddr": "0x407b80",
            "funcEndAddr": "0x407ba9",
            "decompiledFuncCode": "int64_t fts_set(int64_t arg1, void* arg2, int32_t arg3)\n{\n    if (arg3 > 4)\n    {\n        *__errno_location() = 0x16;\n        return 1;\n    }\n    *(arg2 + 0x74) = arg3;\n    return 0;\n}\n\n"
        },
        {
            "funcName": "fts_children",
            "funcStartAddr": "0x407bb0",
            "funcEndAddr": "0x407d1d",
            "decompiledFuncCode": "void* fts_children(int64_t* arg1, int32_t arg2)\n{\n    int32_t* rax = __errno_location();\n    if ((arg2 & 0xffffdfff) != 0)\n    {\n        *rax = 0x16;\n        return 0;\n    }\n    void* r12 = *arg1;\n    *rax = 0;\n    if ((*(arg1 + 0x49) & 0x40) != 0)\n    {\n        return 0;\n    }\n    int16_t rdx = *(r12 + 0x70);\n    if (rdx == 9)\n    {\n        return *(r12 + 0x10);\n    }\n    void* rax_1 = nullptr;\n    if (rdx == 1)\n    {\n        void* rdi = arg1[1];\n        if (rdi != 0)\n        {\n            sub_405e10(rdi);\n        }\n        int32_t r14_1 = 1;\n        if (arg2 == 0x2000)\n        {\n            arg1[9] = (arg1[9] | 0x2000);\n            r14_1 = 2;\n        }\n        int32_t rsi;\n        if ((*(r12 + 0x58) == 0 && **(r12 + 0x30) != 0x2f))\n        {\n            rsi = arg1[9];\n        }\n        if (((*(r12 + 0x58) != 0 || (*(r12 + 0x58) == 0 && **(r12 + 0x30) == 0x2f)) || ((*(r12 + 0x58) == 0 && **(r12 + 0x30) != 0x2f) && (rsi & 4) != 0)))\n        {\n            rax_1 = sub_406540(arg1, r14_1);\n            arg1[1] = rax_1;\n        }\n        if (((*(r12 + 0x58) == 0 && **(r12 + 0x30) != 0x2f) && (rsi & 4) == 0))\n        {\n            int32_t rax_3 = sub_4061d0(*(arg1 + 0x2c), rsi, &data_40c7ab);\n            if (rax_3 < 0)\n            {\n                arg1[1] = 0;\n                rax_1 = nullptr;\n            }\n            else\n            {\n                arg1[1] = sub_406540(arg1, r14_1);\n                int32_t rax_5;\n                if ((*(arg1 + 0x49) & 2) != 0)\n                {\n                    sub_406030(arg1, rax_3, 1);\n                }\n                else\n                {\n                    rax_5 = fchdir(rax_3);\n                    if (rax_5 != 0)\n                    {\n                        int32_t rbx_1 = *rax;\n                        close(rax_3);\n                        rax_1 = nullptr;\n                        *rax = rbx_1;\n                    }\n                    else\n                    {\n                        close(rax_3);\n                    }\n                }\n                if (((*(arg1 + 0x49) & 2) != 0 || ((*(arg1 + 0x49) & 2) == 0 && rax_5 == 0)))\n                {\n                    rax_1 = arg1[1];\n                }\n            }\n        }\n    }\n    return rax_1;\n}\n\n"
        },
        {
            "funcName": "sub_407d20",
            "funcStartAddr": "0x407d20",
            "funcEndAddr": "0x407dff",
            "decompiledFuncCode": "uint64_t sub_407d20(int64_t arg1, int32_t* arg2)\n{\n    int64_t r11 = (arg1 + 8);\n    int32_t r12 = arg2[0xb];\n    int32_t rbp = *arg2;\n    int64_t rbx = arg2[0xc];\n    int32_t r9 = r12;\n    int32_t r10 = rbp;\n    int32_t r8 = rbx;\n    while (r10 > r8)\n    {\n        int32_t r14_2;\n        while (r9 < r8)\n        {\n            r14_2 = (r10 - r8);\n            int32_t rdx_2 = (r8 - r9);\n            if (r14_2 <= rdx_2)\n            {\n                break;\n            }\n            int64_t rcx_1 = r9;\n            r10 = (r10 - rdx_2);\n            int64_t* rax_1 = (arg1 + (rcx_1 << 3));\n            int64_t r13_1 = (r11 + (((rdx_2 - 1) + rcx_1) << 3));\n            int64_t rdx_6 = (r10 - rcx_1);\n            do\n            {\n                int64_t rcx_2 = *rax_1;\n                *rax_1 = rax_1[rdx_6];\n                rax_1[rdx_6] = rcx_2;\n                rax_1 = &rax_1[1];\n            } while (r13_1 != rax_1);\n            if (r10 <= r8)\n            {\n                break;\n            }\n        }\n        if (r9 >= r8)\n        {\n            break;\n        }\n        int64_t rdx_7 = r9;\n        int64_t* rax_4 = (arg1 + (rdx_7 << 3));\n        int64_t r13_2 = (r11 + (((r14_2 - 1) + rdx_7) << 3));\n        int64_t rcx_6 = (rbx - rdx_7);\n        do\n        {\n            int64_t rcx_7 = *rax_4;\n            *rax_4 = rax_4[rcx_6];\n            rax_4[rcx_6] = rcx_7;\n            rax_4 = &rax_4[1];\n        } while (rax_4 != r13_2);\n        r9 = (r9 + r14_2);\n    }\n    arg2[0xc] = rbp;\n    uint64_t rax_3 = (rbp - r8);\n    arg2[0xb] = (r12 + rax_3);\n    return rax_3;\n}\n\n"
        },
        {
            "funcName": "sub_407e00",
            "funcStartAddr": "0x407e00",
            "funcEndAddr": "0x40841c",
            "decompiledFuncCode": "uint64_t sub_407e00(int32_t arg1, int64_t* arg2, char* arg3, int64_t* arg4, \n    int32_t* arg5, int32_t arg6, int32_t* arg7, int32_t arg8, int64_t arg9)\n{\n    char* r14 = *(arg7 + 0x20);\n    char rax_1 = *r14;\n    char* rbp = r14;\n    uint64_t r13_1;\n    if ((rax_1 == 0x3d || rax_1 == 0))\n    {\n        r13_1 = 0;\n    }\n    if ((rax_1 != 0x3d && rax_1 != 0))\n    {\n        while (true)\n        {\n            rbp = &rbp[1];\n            char rax_2 = *rbp;\n            if (rax_2 == 0)\n            {\n                break;\n            }\n            if (rax_2 == 0x3d)\n            {\n                break;\n            }\n            if ((!(rax_2 != 0 && rax_2 != 0x3d)))\n            {\n                /* nop */\n            }\n        }\n        r13_1 = (rbp - r14);\n    }\n    int64_t* rbx = arg4;\n    int64_t r12 = 0;\n    char* rax_3 = *rbx;\n    char* r15 = rax_3;\n    uint64_t rax_14;\n    if (rax_3 != 0)\n    {\n        int32_t rax_4;\n        uint64_t rax_5;\n        int32_t r8;\n        while (true)\n        {\n            rax_4 = strncmp(r15, r14, r13_1);\n            if (rax_4 == 0)\n            {\n                rax_5 = strlen(r15);\n                if (rax_5 == r13_1)\n                {\n                    break;\n                }\n            }\n            rbx = &rbx[4];\n            r15 = *rbx;\n            r8 = (r12 + 1);\n            if (r15 == 0)\n            {\n                break;\n            }\n            r12 = r8;\n        }\n        if ((rax_4 == 0 && rax_5 == r13_1))\n        {\n            goto label_408030;\n        }\n        rbx = nullptr;\n        int32_t var_44_1 = 0xffffffff;\n        char* rdi_2 = rax_3;\n        int64_t r15_1 = 0;\n        int32_t var_50_1 = 0;\n        int32_t var_40_1 = 0;\n        char* var_70_1 = nullptr;\n        int64_t* rbp_1 = arg4;\n        do\n        {\n            if (strncmp(rdi_2, r14, r13_1) == 0)\n            {\n                if (rbx == 0)\n                {\n                    var_44_1 = r15_1;\n                    rbx = rbp_1;\n                }\n                else if (((((arg6 != 0 || (arg6 == 0 && rbx[1] != rbp_1[1])) || ((arg6 == 0 && rbx[1] == rbp_1[1]) && rbx[2] != rbp_1[2])) || (((arg6 == 0 && rbx[1] == rbp_1[1]) && rbx[2] == rbp_1[2]) && rbx[3] != rbp_1[3])) && var_50_1 == 0))\n                {\n                    if (arg8 == 0)\n                    {\n                        var_50_1 = 1;\n                        if (var_70_1 != 0)\n                        {\n                            goto label_407f56;\n                        }\n                    }\n                    else\n                    {\n                        if (var_70_1 != 0)\n                        {\n                            goto label_407f56;\n                        }\n                        char* rax_36 = calloc(r8, 1);\n                        var_70_1 = rax_36;\n                        if (rax_36 == 0)\n                        {\n                            var_50_1 = 1;\n                        }\n                        else\n                        {\n                            var_40_1 = 1;\n                            var_70_1[var_44_1] = 1;\n                        label_407f56:\n                            var_70_1[r15_1] = 1;\n                        }\n                    }\n                }\n            }\n            rbp_1 = &rbp_1[4];\n            rdi_2 = *rbp_1;\n            r15_1 = (r15_1 + 1);\n        } while (rdi_2 != 0);\n        if (((var_70_1 == 0 && var_50_1 == 0) && rbx != 0))\n        {\n            r12 = var_44_1;\n        label_408030:\n            int32_t rdx_3 = *arg7;\n            *(arg7 + 0x20) = 0;\n            int32_t rax_18 = (rdx_3 + 1);\n            *arg7 = rax_18;\n            int32_t rcx_4 = rbx[1];\n            if (*rbp != 0)\n            {\n                if (rcx_4 != 0)\n                {\n                    *(arg7 + 0x10) = &rbp[1];\n                }\n                else\n                {\n                    if (arg8 != 0)\n                    {\n                        __fprintf_chk(stderr, 1, dcgettext(nullptr, \"%s: option '%s%s' doesn't allow \u2026\", 5), *arg2, arg9, *rbx, arg4);\n                    }\n                    arg7[2] = rbx[3];\n                    rax_14 = 0x3f;\n                }\n            }\n            if ((rcx_4 == 1 && *rbp == 0))\n            {\n                if (rax_18 < arg1)\n                {\n                    *arg7 = (rdx_3 + 2);\n                    *(arg7 + 0x10) = arg2[rax_18];\n                }\n                else\n                {\n                    if (arg8 != 0)\n                    {\n                        __fprintf_chk(stderr, 1, dcgettext(nullptr, \"%s: option '%s%s' requires an ar\u2026\", 5), *arg2, arg9, *rbx, arg4);\n                    }\n                    arg7[2] = rbx[3];\n                    char* rax_43;\n                    rax_43 = *arg3 != 0x3a;\n                    rax_14 = ((rax_43 * 5) + 0x3a);\n                }\n            }\n            if ((((*rbp != 0 && rcx_4 != 0) || ((*rbp == 0 && rcx_4 == 1) && rax_18 < arg1)) || (*rbp == 0 && rcx_4 != 1)))\n            {\n                if (arg5 == 0)\n                {\n                    goto label_40805e;\n                }\n                *arg5 = r12;\n            label_40805e:\n                int32_t* rdx_4 = rbx[2];\n                rax_14 = rbx[3];\n                if (rdx_4 != 0)\n                {\n                    *rdx_4 = rax_14;\n                    rax_14 = 0;\n                }\n            }\n            goto label_40807c;\n        }\n        if ((var_70_1 != 0 || (var_70_1 == 0 && var_50_1 != 0)))\n        {\n            if (arg8 != 0)\n            {\n                if (var_50_1 != 0)\n                {\n                    __fprintf_chk(stderr, 1, dcgettext(nullptr, \"%s: option '%s%s' is ambiguous\\n\", 5), *arg2, arg9, r14, arg4);\n                    r14 = *(arg7 + 0x20);\n                }\n                else\n                {\n                    flockfile(stderr);\n                    __fprintf_chk(stderr, 1, dcgettext(nullptr, \"%s: option '%s%s' is ambiguous; \u2026\", 5), *arg2, arg9, *(arg7 + 0x20), arg4);\n                    uint64_t* const rdi_13 = stderr;\n                    int64_t* rbx_4 = arg4;\n                    char* rbp_5 = var_70_1;\n                    void* r12_2 = &var_70_1[(r12 + 1)];\n                    do\n                    {\n                        if (*rbp_5 != 0)\n                        {\n                            __fprintf_chk(rdi_13, 1, \" '%s%s'\", arg9, *rbx_4);\n                            rdi_13 = stderr;\n                        }\n                        rbp_5 = &rbp_5[1];\n                        rbx_4 = &rbx_4[4];\n                    } while (r12_2 != rbp_5);\n                    fputc(0xa, stderr);\n                    funlockfile(stderr);\n                    r14 = *(arg7 + 0x20);\n                }\n            }\n            if (var_40_1 != 0)\n            {\n                free(var_70_1);\n            }\n            *(arg7 + 0x20) = &r14[strlen(r14)];\n            *arg7 = (*arg7 + 1);\n            arg7[2] = 0;\n            rax_14 = 0x3f;\n        label_40807c:\n            return rax_14;\n        }\n    }\n    if ((arg6 != 0 && *(arg2[*arg7] + 1) != 0x2d))\n    {\n        rax_14 = 0xffffffff;\n        if (strchr(arg3, rax_1) != 0)\n        {\n            goto label_40807c;\n        }\n    }\n    if (arg8 == 0)\n    {\n        goto label_407fee;\n    }\n    __fprintf_chk(stderr, 1, dcgettext(nullptr, \"%s: unrecognized option '%s%s'\\n\", 5), *arg2, arg9, r14, arg4);\nlabel_407fee:\n    *(arg7 + 0x20) = 0;\n    *arg7 = (*arg7 + 1);\n    arg7[2] = 0;\n    return 0x3f;\n}\n\n"
        },
        {
            "funcName": "sub_408420",
            "funcStartAddr": "0x408420",
            "funcEndAddr": "0x4089e6",
            "decompiledFuncCode": "uint64_t sub_408420(int32_t arg1, int64_t* arg2, char* arg3, int64_t* arg4, \n    int32_t* arg5, int32_t arg6, int32_t* arg7, int32_t arg8)\n{\n    int32_t r13 = arg7[1];\n    if (arg1 <= 0)\n    {\n        goto label_40865c;\n    }\n    int32_t rax_1 = *arg7;\n    int32_t rbp_1 = arg1;\n    char* r15_1 = arg3;\n    *(arg7 + 0x10) = 0;\n    if (rax_1 == 0)\n    {\n        *arg7 = 1;\n        rax_1 = 1;\n    }\n    uint32_t rax_3;\n    char* rdx;\n    if ((rax_1 == 0 || (rax_1 != 0 && arg7[6] == 0)))\n    {\n        arg7[0xc] = rax_1;\n        arg7[0xb] = rax_1;\n        *(arg7 + 0x20) = 0;\n        char rax_2 = *r15_1;\n        if (rax_2 == 0x2d)\n        {\n            arg7[0xa] = 2;\n            r15_1 = &r15_1[1];\n            rdx = nullptr;\n        }\n        else if (rax_2 == 0x2b)\n        {\n            arg7[0xa] = 0;\n            r15_1 = &r15_1[1];\n            rdx = nullptr;\n        }\n        else\n        {\n            rdx = nullptr;\n            char* rax_16;\n            if (arg8 == 0)\n            {\n                rax_16 = getenv(\"POSIXLY_CORRECT\");\n                if (rax_16 == 0)\n                {\n                    arg7[0xa] = 1;\n                    rdx = *(arg7 + 0x20);\n                }\n                else\n                {\n                    rdx = *(arg7 + 0x20);\n                }\n            }\n            if (((arg8 == 0 && rax_16 != 0) || arg8 != 0))\n            {\n                arg7[0xa] = 0;\n            }\n        }\n        arg7[6] = 1;\n        rax_3 = *r15_1;\n    }\n    if ((rax_1 != 0 && arg7[6] != 0))\n    {\n        rax_3 = *arg3;\n        rdx = *(arg7 + 0x20);\n    }\n    if (((((rax_1 != 0 && arg7[6] != 0) && ((rax_3 - 0x2b) & 0xfd) != 0) || rax_1 == 0) || (rax_1 != 0 && arg7[6] == 0)))\n    {\n        if (rax_3 == 0x3a)\n        {\n            r13 = 0;\n        }\n        if (rdx == 0)\n        {\n            goto label_4084e8;\n        }\n    }\n    if (((rax_1 != 0 && arg7[6] != 0) && ((rax_3 - 0x2b) & 0xfd) == 0))\n    {\n        char rax_4 = r15_1[1];\n        r15_1 = &r15_1[1];\n        if (rax_4 == 0x3a)\n        {\n            r13 = 0;\n        }\n        if (rdx == 0)\n        {\n        label_4084e8:\n            int32_t rax_5 = *arg7;\n            if (arg7[0xc] > rax_5)\n            {\n                arg7[0xc] = rax_5;\n            }\n            if (rax_5 < arg7[0xb])\n            {\n                arg7[0xb] = rax_5;\n            }\n            if (arg7[0xa] == 1)\n            {\n                int32_t rdx_5 = arg7[0xc];\n                if (arg7[0xb] == rdx_5)\n                {\n                    if (rax_5 != rdx_5)\n                    {\n                        arg7[0xb] = rax_5;\n                        rdx_5 = rax_5;\n                    }\n                }\n                else if (rax_5 != rdx_5)\n                {\n                    sub_407d20(arg2, arg7);\n                    rdx_5 = *arg7;\n                }\n                char* rcx_8;\n                if (rbp_1 > rdx_5)\n                {\n                    int64_t rax_10 = rdx_5;\n                    do\n                    {\n                        rcx_8 = arg2[rax_10];\n                        int32_t rsi_5 = rax_10;\n                        rdx_5 = rax_10;\n                        if ((*rcx_8 == 0x2d && rcx_8[1] != 0))\n                        {\n                            break;\n                        }\n                        rdx_5 = (rsi_5 + 1);\n                        rax_10 = (rax_10 + 1);\n                        *arg7 = rdx_5;\n                    } while (rbp_1 > rax_10);\n                    if ((*rcx_8 == 0x2d && rcx_8[1] != 0))\n                    {\n                        rax_5 = *arg7;\n                    }\n                }\n                if ((rbp_1 <= rdx_5 || (rbp_1 > rdx_5 && (!(*rcx_8 == 0x2d && rcx_8[1] != 0)))))\n                {\n                    rax_5 = rdx_5;\n                }\n                arg7[0xc] = rdx_5;\n            }\n            bool c_1 = rbp_1 < rax_5;\n            bool z_1 = rbp_1 == rax_5;\n            int64_t rcx_3;\n            int32_t rdx_2;\n            char* r14_1;\n            if (z_1)\n            {\n                rbp_1 = arg7[0xc];\n                rdx_2 = arg7[0xb];\n            }\n            else\n            {\n                rcx_3 = 3;\n                void* const rdi = &data_40c8f9;\n                r14_1 = arg2[rax_5];\n                char* rsi_1 = r14_1;\n                while (rcx_3 != 0)\n                {\n                    char temp0_1 = *rsi_1;\n                    char temp1_1 = *rdi;\n                    c_1 = temp0_1 < temp1_1;\n                    z_1 = temp0_1 == temp1_1;\n                    rsi_1 = &rsi_1[1];\n                    rdi = (rdi + 1);\n                    rcx_3 = (rcx_3 - 1);\n                    if ((!z_1))\n                    {\n                        break;\n                    }\n                }\n                rcx_3 = ((!z_1) && (!c_1));\n                rcx_3 = (rcx_3 - 0);\n                if (rcx_3 == 0)\n                {\n                    rdx_2 = arg7[0xb];\n                    int32_t rcx_4 = arg7[0xc];\n                    int32_t rax_6 = (rax_5 + 1);\n                    *arg7 = rax_6;\n                    if (rdx_2 == rcx_4)\n                    {\n                        arg7[0xb] = rax_6;\n                        rdx_2 = rax_6;\n                    }\n                    else if (rax_6 != rcx_4)\n                    {\n                        sub_407d20(arg2, arg7);\n                        rdx_2 = arg7[0xb];\n                    }\n                    arg7[0xc] = rbp_1;\n                    *arg7 = rbp_1;\n                }\n            }\n            int32_t r14_2;\n            if ((z_1 || ((!z_1) && rcx_3 == 0)))\n            {\n                if (rdx_2 == rbp_1)\n                {\n                    goto label_40865c;\n                }\n                *arg7 = rdx_2;\n            label_40865c:\n                r14_2 = -1;\n            }\n            if (((!z_1) && rcx_3 != 0))\n            {\n                char rcx_9;\n                if (*r14_1 == 0x2d)\n                {\n                    rcx_9 = r14_1[1];\n                    if (rcx_9 != 0)\n                    {\n                        if (arg4 == 0)\n                        {\n                            goto label_408760;\n                        }\n                        int32_t* var_88_2;\n                        int32_t var_80_2;\n                        void* const var_78_1;\n                        if (rcx_9 == 0x2d)\n                        {\n                            *(arg7 + 0x20) = &r14_1[2];\n                            var_78_1 = &data_40c8f9;\n                            var_80_2 = r13;\n                            var_88_2 = arg7;\n                            goto label_4087d0;\n                        }\n                        if (arg6 == 0)\n                        {\n                            goto label_408760;\n                        }\n                        if (r14_1[2] == 0)\n                        {\n                            if (strchr(r15_1, rcx_9) != 0)\n                            {\n                                goto label_408760;\n                            }\n                            goto label_408721;\n                        }\n                    label_408721:\n                        *(arg7 + 0x20) = &r14_1[1];\n                        int32_t rax_12 = sub_407e00(rbp_1, arg2, r15_1, arg4, arg5, arg6, arg7, r13, &data_40c8fa);\n                        r14_2 = rax_12;\n                        if (rax_12 == 0xffffffff)\n                        {\n                            r14_1 = arg2[*arg7];\n                        label_408760:\n                            rdx = &r14_1[1];\n                        label_4085a1:\n                            *(arg7 + 0x20) = &rdx[1];\n                            r14_2 = *rdx;\n                            int32_t var_4c;\n                            var_4c = r14_2;\n                            char* rax_7 = strchr(r15_1, r14_2);\n                            char rcx_5 = var_4c;\n                            void* r8_1 = &rdx[1];\n                            if (rdx[1] == 0)\n                            {\n                                *arg7 = (*arg7 + 1);\n                            }\n                            if (((rcx_5 - 0x3a) > 1 && rax_7 != 0))\n                            {\n                                char rcx_7 = rax_7[1];\n                                if (((*rax_7 == 0x57 && arg4 != 0) && rcx_7 == 0x3b))\n                                {\n                                    if (rdx[1] != 0)\n                                    {\n                                        goto label_40879e;\n                                    }\n                                    int64_t rax_14 = *arg7;\n                                    if (rax_14 == rbp_1)\n                                    {\n                                        if (r13 != 0)\n                                        {\n                                            int64_t rbp_4 = *arg2;\n                                            __fprintf_chk(stderr, 1, dcgettext(nullptr, \"%s: option requires an argument \u2026\", 5), rbp_4, r14_2);\n                                        }\n                                        arg7[2] = r14_2;\n                                        int64_t r14_4;\n                                        r14_4 = *r15_1 != 0x3a;\n                                        r14_2 = ((r14_4 * 5) + 0x3a);\n                                    }\n                                    else\n                                    {\n                                        r8_1 = arg2[rax_14];\n                                    label_40879e:\n                                        *(arg7 + 0x20) = r8_1;\n                                        arg6 = 0;\n                                        *(arg7 + 0x10) = 0;\n                                        var_78_1 = &data_40c918;\n                                        var_80_2 = r13;\n                                        var_88_2 = arg7;\n                                    label_4087d0:\n                                        r14_2 = sub_407e00(rbp_1, arg2, r15_1, arg4, arg5, arg6, var_88_2, var_80_2, var_78_1);\n                                    }\n                                }\n                                if ((((*rax_7 != 0x57 || (*rax_7 == 0x57 && arg4 == 0)) || ((*rax_7 == 0x57 && arg4 != 0) && rcx_7 != 0x3b)) && rcx_7 == 0x3a))\n                                {\n                                    char rdx_9 = rdx[1];\n                                    if (rax_7[2] != 0x3a)\n                                    {\n                                        int64_t rax_17 = *arg7;\n                                        if (rdx_9 != 0)\n                                        {\n                                            *(arg7 + 0x10) = r8_1;\n                                            *arg7 = (rax_17 + 1);\n                                        }\n                                        else if (rbp_1 != rax_17)\n                                        {\n                                            int64_t rax_18 = arg2[rax_17];\n                                            *arg7 = (rax_17 + 1);\n                                            *(arg7 + 0x10) = rax_18;\n                                        }\n                                        else\n                                        {\n                                            if (r13 != 0)\n                                            {\n                                                int64_t rbp_3 = *arg2;\n                                                __fprintf_chk(stderr, 1, dcgettext(nullptr, \"%s: option requires an argument \u2026\", 5), rbp_3, r14_2);\n                                            }\n                                            arg7[2] = r14_2;\n                                            int64_t r14_3;\n                                            r14_3 = *r15_1 != 0x3a;\n                                            r14_2 = ((r14_3 * 5) + 0x3a);\n                                        }\n                                    }\n                                    else if (rdx_9 == 0)\n                                    {\n                                        *(arg7 + 0x10) = 0;\n                                    }\n                                    else\n                                    {\n                                        *(arg7 + 0x10) = r8_1;\n                                        *arg7 = (*arg7 + 1);\n                                    }\n                                    *(arg7 + 0x20) = 0;\n                                }\n                            }\n                            if (((rcx_5 - 0x3a) <= 1 || ((rcx_5 - 0x3a) > 1 && rax_7 == 0)))\n                            {\n                                if (r13 == 0)\n                                {\n                                    goto label_40888d;\n                                }\n                                int64_t rbp_2 = *arg2;\n                                __fprintf_chk(stderr, 1, dcgettext(nullptr, \"%s: invalid option -- '%c'\\n\", 5), rbp_2, r14_2);\n                            label_40888d:\n                                arg7[2] = r14_2;\n                                r14_2 = 0x3f;\n                            }\n                        }\n                    }\n                }\n                if ((*r14_1 != 0x2d || (*r14_1 == 0x2d && rcx_9 == 0)))\n                {\n                    if (arg7[0xa] == 0)\n                    {\n                        goto label_40865c;\n                    }\n                    *(arg7 + 0x10) = r14_1;\n                    r14_2 = 1;\n                    *arg7 = (rax_5 + 1);\n                }\n            }\n            if ((((z_1 || ((!z_1) && rcx_3 == 0)) && rdx_2 != rbp_1) || ((!z_1) && rcx_3 != 0)))\n            {\n                return r14_2;\n            }\n        }\n    }\n    if (((((((rax_1 != 0 && arg7[6] != 0) && ((rax_3 - 0x2b) & 0xfd) != 0) || rax_1 == 0) || (rax_1 != 0 && arg7[6] == 0)) && rdx != 0) || ((rax_1 != 0 && arg7[6] != 0) && ((rax_3 - 0x2b) & 0xfd) == 0)))\n    {\n        if (*rdx == 0)\n        {\n            goto label_4084e8;\n        }\n        goto label_4085a1;\n    }\n}\n\n"
        },
        {
            "funcName": "sub_408a50",
            "funcStartAddr": "0x408a50",
            "funcEndAddr": "0x408a68",
            "decompiledFuncCode": "uint64_t sub_408a50(int32_t arg1, int64_t* arg2, char* arg3)\n{\n    return _getopt_internal(arg1, arg2, arg3, nullptr, nullptr, 0, 1);\n}\n\n"
        },
        {
            "funcName": "sub_408af0",
            "funcStartAddr": "0x408af0",
            "funcEndAddr": "0x408b6a",
            "decompiledFuncCode": "uint64_t sub_408af0(uint32_t* arg1, char* arg2, uint64_t arg3, mbstate_t* arg4)\n{\n    uint64_t rbx_1;\n    char* rbp_1;\n    uint32_t* r12_1;\n    if (arg2 == 0)\n    {\n        arg3 = 1;\n        rbp_1 = &data_40c8fc[0x1b];\n    }\n    else\n    {\n        rbx_1 = -2;\n        if (arg3 != 0)\n        {\n            r12_1 = arg1;\n            rbp_1 = arg2;\n            if (arg1 != 0)\n            {\n                goto label_408b1a;\n            }\n        }\n    }\n    if ((arg2 == 0 || (arg2 != 0 && arg3 != 0)))\n    {\n        void var_1c;\n        r12_1 = &var_1c;\n    label_408b1a:\n        uint64_t rax_1 = mbrtowc(r12_1, rbp_1, arg3, arg4);\n        rbx_1 = rax_1;\n        if ((rax_1 > -3 && sub_408cb0() == 0))\n        {\n            rbx_1 = 1;\n            *r12_1 = *rbp_1;\n        }\n    }\n    return rbx_1;\n}\n\n"
        },
        {
            "funcName": "sub_408b70",
            "funcStartAddr": "0x408b70",
            "funcEndAddr": "0x408bcd",
            "decompiledFuncCode": "uint64_t sub_408b70(FILE* arg1)\n{\n    int32_t* rbp = arg1;\n    uint64_t rax = __fpending(arg1);\n    int32_t rbx_1 = (*rbp & 0x20);\n    uint64_t rax_1 = sub_40a630(rbp);\n    if ((rbx_1 != 0 && rax_1 == 0))\n    {\n        *__errno_location() = 0;\n        rax_1 = 0xffffffff;\n    }\n    if (((rbx_1 != 0 && rax_1 != 0) || ((rbx_1 == 0 && rax_1 != 0) && rax != 0)))\n    {\n        rax_1 = 0xffffffff;\n    }\n    if (((rbx_1 == 0 && rax_1 != 0) && rax == 0))\n    {\n        int32_t* rax_2;\n        rax_2 = *__errno_location() != 9;\n        rax_1 = (-rax_2);\n    }\n    return rax_1;\n}\n\n"
        },
        {
            "funcName": "sub_408bd0",
            "funcStartAddr": "0x408bd0",
            "funcEndAddr": "0x408be0",
            "decompiledFuncCode": "int64_t sub_408bd0(void* arg1)\n{\n    *(arg1 + 0x10) = 0;\n    *(arg1 + 0x18) = 0x95f616;\n}\n\n"
        },
        {
            "funcName": "sub_408be0",
            "funcStartAddr": "0x408be0",
            "funcEndAddr": "0x408c5c",
            "decompiledFuncCode": "int64_t sub_408be0(int64_t* arg1, int64_t* arg2)\n{\n    if (arg1[3] != 0x95f616)\n    {\n        int64_t rax;\n        int64_t var_8 = rax;\n        __assert_fail(\"state->magic == 9827862\", \"lib/cycle-check.c\", 0x3c, \"cycle_check\");\n        /* no return */\n    }\n    int64_t rax_1 = arg1[2];\n    int64_t rdx = arg2[1];\n    if (rax_1 == 0)\n    {\n        arg1[2] = 1;\n    }\n    else\n    {\n        if ((*arg1 == rdx && *arg2 == arg1[1]))\n        {\n            return 1;\n        }\n        int64_t rcx_1 = (rax_1 + 1);\n        arg1[2] = rcx_1;\n        if ((rax_1 & rcx_1) != 0)\n        {\n            return 0;\n        }\n        if (rcx_1 == 0)\n        {\n            return 1;\n        }\n    }\n    int64_t rax_3 = *arg2;\n    *arg1 = rdx;\n    arg1[1] = rax_3;\n    return 0;\n}\n\n"
        },
        {
            "funcName": "sub_408c60",
            "funcStartAddr": "0x408c60",
            "funcEndAddr": "0x408caa",
            "decompiledFuncCode": "uint64_t sub_408c60(char* arg1, int64_t arg2, int32_t arg3)\n{\n    uint64_t rdx = 0;\n    if ((arg2 & 0x40) != 0)\n    {\n        int32_t var_50_1 = 0x10;\n        rdx = arg3;\n        void* var_48_1 = &arg_8;\n        void var_38;\n        void* var_40_1 = &var_38;\n    }\n    return sub_40a5e0(open(arg1, arg2, rdx));\n}\n\n"
        },
        {
            "funcName": "sub_408cb0",
            "funcStartAddr": "0x408cb0",
            "funcEndAddr": "0x408d0e",
            "decompiledFuncCode": "int64_t sub_408cb0()\n{\n    void var_8;\n    int64_t rcx;\n    int64_t rdx;\n    int32_t rdi;\n    uint64_t r8;\n    ssize_t r9;\n    char* rax = setlocale(rdi, nullptr, rdx, rcx, r8, r9, var_8, __return_addr);\n    int64_t rax_1 = 1;\n    bool c = false;\n    bool z = (rax & rax) == 0;\n    if ((!z))\n    {\n        int64_t rcx_1 = 2;\n        void* const rdi_1 = &data_40c954;\n        char* rsi_1 = rax;\n        while (rcx_1 != 0)\n        {\n            char temp0_1 = *rsi_1;\n            char temp1_1 = *rdi_1;\n            c = temp0_1 < temp1_1;\n            z = temp0_1 == temp1_1;\n            rsi_1 = &rsi_1[1];\n            rdi_1 = (rdi_1 + 1);\n            rcx_1 = (rcx_1 - 1);\n            if ((!z))\n            {\n                break;\n            }\n        }\n        rcx_1 = ((!z) && (!c));\n        rcx_1 = (rcx_1 - 0);\n        rax_1 = 0;\n        bool c_1 = false;\n        bool z_1 = (rcx_1 & rcx_1) == 0;\n        if ((!z_1))\n        {\n            void* const rdi_2 = \"POSIX\";\n            int64_t rcx_2 = 6;\n            char* rsi_2 = rax;\n            while (rcx_2 != 0)\n            {\n                char temp2_1 = *rsi_2;\n                char temp3_1 = *rdi_2;\n                c_1 = temp2_1 < temp3_1;\n                z_1 = temp2_1 == temp3_1;\n                rsi_2 = &rsi_2[1];\n                rdi_2 = (rdi_2 + 1);\n                rcx_2 = (rcx_2 - 1);\n                if ((!z_1))\n                {\n                    break;\n                }\n            }\n            rax_1 = ((!z_1) && (!c_1));\n            rax_1 = (rax_1 - 0);\n            rax_1 = rax_1 != 0;\n            return rax_1;\n        }\n    }\n    return rax_1;\n}\n\n"
        },
        {
            "funcName": "sub_408d10",
            "funcStartAddr": "0x408d10",
            "funcEndAddr": "0x408da3",
            "decompiledFuncCode": "int64_t sub_408d10(int64_t arg1)\n{\n    int64_t rsi = 0xa;\n    if (arg1 >= 0xa)\n    {\n        rsi = arg1;\n    }\n    int64_t rsi_1 = (rsi | 1);\n    if (rsi_1 != -1)\n    {\n        do\n        {\n            int64_t rax_2;\n            int64_t rdx_1;\n            rdx_1 = HIGHD((rsi_1 * -0x5555555555555555));\n            rax_2 = LOWD((rsi_1 * -0x5555555555555555));\n            uint64_t rcx_2 = (rsi_1 - ((rdx_1 >> 1) * 3));\n            uint64_t rax_6 = rcx_2;\n            int64_t rdi;\n            if ((rsi_1 > 9 && rcx_2 != 0))\n            {\n                int64_t r8_1 = 0x10;\n                rdi = 9;\n                int64_t rcx_3 = 3;\n                uint64_t temp1_1;\n                do\n                {\n                    rcx_3 = (rcx_3 + 2);\n                    rdi = (rdi + r8_1);\n                    temp1_1 = (COMBINE(0, rsi_1) % rcx_3);\n                    rax_6 = temp1_1;\n                    if (rdi >= rsi_1)\n                    {\n                        break;\n                    }\n                    r8_1 = (r8_1 + 8);\n                } while (temp1_1 != 0);\n            }\n            if (((rsi_1 <= 9 || ((rsi_1 > 9 && rcx_2 != 0) && rdi >= rsi_1)) && rax_6 != 0))\n            {\n                break;\n            }\n            rsi_1 = (rsi_1 + 2);\n        } while (rsi_1 != -1);\n    }\n    return rsi_1;\n}\n\n"
        },
        {
            "funcName": "sub_408db0",
            "funcStartAddr": "0x408db0",
            "funcEndAddr": "0x408dc0",
            "decompiledFuncCode": "uint64_t sub_408db0(int64_t arg1, int64_t arg2)\n{\n    return (COMBINE(0, (RORQ(arg1, 3))) % arg2);\n}\n\n"
        },
        {
            "funcName": "sub_408dc0",
            "funcStartAddr": "0x408dc0",
            "funcEndAddr": "0x408dc7",
            "decompiledFuncCode": "int64_t sub_408dc0(int64_t arg1, int64_t arg2)\n{\n    int64_t rax;\n    rax = arg1 == arg2;\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_408dd0",
            "funcStartAddr": "0x401c1d",
            "funcEndAddr": "0x408df1",
            "decompiledFuncCode": "int64_t sub_408dd0(void* arg1, int64_t arg2)\n{\n    int64_t rax = *(arg1 + 0x30)(arg2, *(arg1 + 0x10));\n    if (*(arg1 + 0x10) <= rax)\n    {\n        abort();\n        /* no return */\n    }\n    return ((rax << 4) + *arg1);\n}\n\n"
        },
        {
            "funcName": "sub_408e00",
            "funcStartAddr": "0x408e00",
            "funcEndAddr": "0x408f19",
            "decompiledFuncCode": "int64_t sub_408e00(void* arg1, int64_t arg2, int64_t* arg3, char arg4)\n{\n    int64_t* rax = sub_408dd0(arg1, arg2);\n    *arg3 = rax;\n    int64_t rsi = *rax;\n    if (rsi != 0)\n    {\n        int64_t* rbx_1 = rax;\n        char rax_1;\n        if (rsi != arg2)\n        {\n            rax_1 = *(arg1 + 0x38)(arg2, rsi);\n            if (rax_1 != 0)\n            {\n                rsi = *rbx_1;\n            }\n            else\n            {\n                int64_t* rax_2 = rbx_1[1];\n                if (rax_2 != 0)\n                {\n                    rsi = *rax_2;\n                    if (arg2 != rsi)\n                    {\n                        do\n                        {\n                            if (*(arg1 + 0x38)(arg2, rsi) != 0)\n                            {\n                                rax_2 = rbx_1[1];\n                                rsi = *rax_2;\n                                break;\n                            }\n                            rbx_1 = rbx_1[1];\n                            rax_2 = rbx_1[1];\n                            if (rax_2 == 0)\n                            {\n                                return 0;\n                            }\n                            rsi = *rax_2;\n                        } while (rsi != arg2);\n                    }\n                    if (arg4 != 0)\n                    {\n                        rbx_1[1] = rax_2[1];\n                        *rax_2 = 0;\n                        rax_2[1] = *(arg1 + 0x48);\n                        *(arg1 + 0x48) = rax_2;\n                    }\n                    goto label_408eb9;\n                }\n            }\n        }\n        if (((rsi != arg2 && rax_1 != 0) || rsi == arg2))\n        {\n            if (arg4 == 0)\n            {\n            label_408eb9:\n                return rsi;\n            }\n            int128_t* rax_5 = rbx_1[1];\n            if (rax_5 != 0)\n            {\n                *rbx_1 = *rax_5;\n                *rax_5 = 0;\n                *(rax_5 + 8) = *(arg1 + 0x48);\n                *(arg1 + 0x48) = rax_5;\n                return rsi;\n            }\n            *rbx_1 = 0;\n            goto label_408eb9;\n        }\n    }\n    return 0;\n}\n\n"
        },
        {
            "funcName": "sub_408f20",
            "funcStartAddr": "0x408f20",
            "funcEndAddr": "0x408f9e",
            "decompiledFuncCode": "int64_t sub_408f20(int64_t* arg1)\n{\n    int32_t* rax_3 = *arg1;\n    if (rax_3 != 0x40c9d0)\n    {\n        int32_t zmm0 = rax_3[2];\n        if (((zmm0 == 0.100000001f | (FCMP_UO(zmm0, 0.100000001f))) || (zmm0 < 0.100000001f | (FCMP_UO(zmm0, 0.100000001f)))))\n        {\n        label_408f8a:\n            *arg1 = 0x40c9d0;\n            return 0;\n        }\n        if (((0.899999976f == zmm0 | (FCMP_UO(0.899999976f, zmm0))) || (0.899999976f < zmm0 | (FCMP_UO(0.899999976f, zmm0)))))\n        {\n            goto label_408f8a;\n        }\n        float zmm1 = rax_3[3];\n        if (((zmm1 == 1.10000002f | (FCMP_UO(zmm1, 1.10000002f))) || (zmm1 < 1.10000002f | (FCMP_UO(zmm1, 1.10000002f)))))\n        {\n            goto label_408f8a;\n        }\n        zmm1 = *rax_3;\n        if ((zmm1 < 0f | (FCMP_UO(zmm1, 0f))))\n        {\n            goto label_408f8a;\n        }\n        zmm1 = (zmm1 + 0.100000001f);\n        int32_t zmm2 = rax_3[1];\n        if (((zmm2 == zmm1 | (FCMP_UO(zmm2, zmm1))) || (zmm2 < zmm1 | (FCMP_UO(zmm2, zmm1)))))\n        {\n            goto label_408f8a;\n        }\n        int512_t zmm3;\n        zmm3 = 0x3f800000;\n        if ((1f < zmm2 | (FCMP_UO(1f, zmm2))))\n        {\n            goto label_408f8a;\n        }\n        if ((!((!(zmm0 == zmm1 | (FCMP_UO(zmm0, zmm1)))) && (!(zmm0 < zmm1 | (FCMP_UO(zmm0, zmm1)))))))\n        {\n            goto label_408f8a;\n        }\n    }\n    return 1;\n}\n\n"
        },
        {
            "funcName": "sub_408fa0",
            "funcStartAddr": "0x408fa0",
            "funcEndAddr": "0x4090ea",
            "decompiledFuncCode": "int64_t sub_408fa0(void* arg1, int64_t* arg2, char arg3)\n{\n    int64_t* r12 = *arg2;\n    if (r12 < arg2[1])\n    {\n        do\n        {\n            int64_t r15_2 = *r12;\n            if (r15_2 != 0)\n            {\n                int64_t* rbx_1 = r12[1];\n                if (rbx_1 != 0)\n                {\n                    while (true)\n                    {\n                        int64_t r15_1 = *rbx_1;\n                        int64_t* rax_1 = sub_408dd0(arg1, r15_1);\n                        int64_t* rdx = rbx_1[1];\n                        if (*rax_1 != 0)\n                        {\n                            rbx_1[1] = rax_1[1];\n                            rax_1[1] = rbx_1;\n                            rbx_1 = rdx;\n                            if (rdx == 0)\n                            {\n                                break;\n                            }\n                        }\n                        else\n                        {\n                            *rax_1 = r15_1;\n                            *(arg1 + 0x18) = (*(arg1 + 0x18) + 1);\n                            *rbx_1 = 0;\n                            rbx_1[1] = *(arg1 + 0x48);\n                            *(arg1 + 0x48) = rbx_1;\n                            rbx_1 = rdx;\n                            if (rdx == 0)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    r15_2 = *r12;\n                }\n                r12[1] = 0;\n                if (arg3 == 0)\n                {\n                    int64_t* rax_3 = sub_408dd0(arg1, r15_2);\n                    if (*rax_3 == 0)\n                    {\n                        *rax_3 = r15_2;\n                        *(arg1 + 0x18) = (*(arg1 + 0x18) + 1);\n                    }\n                    else\n                    {\n                        int64_t* rax_4 = *(arg1 + 0x48);\n                        if (rax_4 != 0)\n                        {\n                            *(arg1 + 0x48) = rax_4[1];\n                        }\n                        else\n                        {\n                            rax_4 = malloc(0x10);\n                            if (rax_4 == 0)\n                            {\n                                return 0;\n                            }\n                        }\n                        int64_t rdx_2 = rax_3[1];\n                        *rax_4 = r15_2;\n                        rax_4[1] = rdx_2;\n                        rax_3[1] = rax_4;\n                    }\n                    *r12 = 0;\n                    r12 = &r12[2];\n                    arg2[3] = (arg2[3] - 1);\n                    if (arg2[1] <= r12)\n                    {\n                        break;\n                    }\n                    continue;\n                }\n            }\n            r12 = &r12[2];\n        } while (arg2[1] > r12);\n    }\n    return 1;\n}\n\n"
        },
        {
            "funcName": "sub_4090f0",
            "funcStartAddr": "0x4090f0",
            "funcEndAddr": "0x4090f5",
            "decompiledFuncCode": "int64_t sub_4090f0(void* arg1)\n{\n    return *(arg1 + 0x10);\n}\n\n"
        },
        {
            "funcName": "sub_409100",
            "funcStartAddr": "0x409100",
            "funcEndAddr": "0x409105",
            "decompiledFuncCode": "int64_t sub_409100(void* arg1)\n{\n    return *(arg1 + 0x18);\n}\n\n"
        },
        {
            "funcName": "sub_409110",
            "funcStartAddr": "0x409110",
            "funcEndAddr": "0x409115",
            "decompiledFuncCode": "int64_t sub_409110(void* arg1)\n{\n    return *(arg1 + 0x20);\n}\n\n"
        },
        {
            "funcName": "sub_409120",
            "funcStartAddr": "0x409120",
            "funcEndAddr": "0x40916f",
            "decompiledFuncCode": "int64_t sub_409120(int64_t* arg1)\n{\n    int64_t* rsi = *arg1;\n    int64_t rdi = arg1[1];\n    int64_t rax = 0;\n    if (rsi >= rdi)\n    {\n        return 0;\n    }\n    while (true)\n    {\n        if (*rsi == 0)\n        {\n            rsi = &rsi[2];\n            if (rsi >= rdi)\n            {\n                break;\n            }\n        }\n        else\n        {\n            void* rdx_1 = rsi[1];\n            int64_t rcx_1 = 1;\n            if (rdx_1 != 0)\n            {\n                do\n                {\n                    rdx_1 = *(rdx_1 + 8);\n                    rcx_1 = (rcx_1 + 1);\n                } while (rdx_1 != 0);\n            }\n            if (rax < rcx_1)\n            {\n                rax = rcx_1;\n            }\n            rsi = &rsi[2];\n            if (rsi >= rdi)\n            {\n                break;\n            }\n        }\n    }\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_409170",
            "funcStartAddr": "0x409170",
            "funcEndAddr": "0x4091d7",
            "decompiledFuncCode": "int64_t sub_409170(int64_t* arg1)\n{\n    int64_t* rcx = *arg1;\n    int64_t rsi = arg1[1];\n    int64_t rdx = 0;\n    int64_t r8 = 0;\n    if (rcx < rsi)\n    {\n        do\n        {\n            if (*rcx != 0)\n            {\n                void* rax_1 = rcx[1];\n                r8 = (r8 + 1);\n                rdx = (rdx + 1);\n                if (rax_1 != 0)\n                {\n                    do\n                    {\n                        rax_1 = *(rax_1 + 8);\n                        rdx = (rdx + 1);\n                    } while (rax_1 != 0);\n                    rcx = &rcx[2];\n                    if (rcx >= rsi)\n                    {\n                        break;\n                    }\n                    continue;\n                }\n            }\n            rcx = &rcx[2];\n        } while (rcx < rsi);\n    }\n    if (arg1[3] == r8)\n    {\n        int64_t rax_2;\n        rax_2 = arg1[4] == rdx;\n        return rax_2;\n    }\n    return 0;\n}\n\n"
        },
        {
            "funcName": "sub_4091e0",
            "funcStartAddr": "0x4091e0",
            "funcEndAddr": "0x409328",
            "decompiledFuncCode": "int64_t sub_4091e0(int64_t* arg1, FILE* arg2)\n{\n    int64_t rbx = 0;\n    int64_t r12 = arg1[2];\n    int64_t r13 = arg1[3];\n    int64_t* rsi = *arg1;\n    int64_t rdi = arg1[1];\n    if (rsi < rdi)\n    {\n        while (true)\n        {\n            if (*rsi == 0)\n            {\n                rsi = &rsi[2];\n                if (rsi >= rdi)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                void* rax_1 = rsi[1];\n                int64_t rdx_1 = 1;\n                if (rax_1 != 0)\n                {\n                    do\n                    {\n                        rax_1 = *(rax_1 + 8);\n                        rdx_1 = (rdx_1 + 1);\n                    } while (rax_1 != 0);\n                }\n                if (rbx < rdx_1)\n                {\n                    rbx = rdx_1;\n                }\n                rsi = &rsi[2];\n                if (rsi >= rdi)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    __fprintf_chk(arg2, 1, \"# entries:         %lu\\n\");\n    __fprintf_chk(arg2, 1, \"# buckets:         %lu\\n\", r12);\n    __fprintf_chk(arg2, 1, \"# buckets used:    %lu (%.2f%%)\\n\", r13);\n    /* tailcall */\n    return __fprintf_chk(arg2, 1, \"max bucket length: %lu\\n\", rbx);\n}\n\n"
        },
        {
            "funcName": "sub_409330",
            "funcStartAddr": "0x409330",
            "funcEndAddr": "0x409383",
            "decompiledFuncCode": "int64_t sub_409330(void* arg1, int64_t arg2)\n{\n    int64_t rbp = arg2;\n    int64_t* rax = sub_408dd0(arg1, arg2);\n    int64_t rsi = *rax;\n    if (rsi != 0)\n    {\n        int64_t* rbx_1 = rax;\n        while (true)\n        {\n            if (rsi != rbp)\n            {\n                if (*(arg1 + 0x38)(rbp, rsi) != 0)\n                {\n                    rbp = *rbx_1;\n                }\n                else\n                {\n                    rbx_1 = rbx_1[1];\n                    if (rbx_1 == 0)\n                    {\n                        break;\n                    }\n                    rsi = *rbx_1;\n                    continue;\n                }\n            }\n            return rbp;\n        }\n    }\n    return 0;\n}\n\n"
        },
        {
            "funcName": "sub_409390",
            "funcStartAddr": "0x401c22",
            "funcEndAddr": "0x4093d8",
            "decompiledFuncCode": "int64_t sub_409390(int64_t* arg1)\n{\n    if (arg1[4] == 0)\n    {\n        return 0;\n    }\n    int64_t* rdx = *arg1;\n    int64_t rcx = arg1[1];\n    if (rdx < rcx)\n    {\n        do\n        {\n            int64_t rax_1 = *rdx;\n            if (rax_1 != 0)\n            {\n                return rax_1;\n            }\n            rdx = &rdx[2];\n        } while (rdx < rcx);\n    }\n    abort();\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_4093e0",
            "funcStartAddr": "0x4093e0",
            "funcEndAddr": "0x40944a",
            "decompiledFuncCode": "int64_t sub_4093e0(void* arg1, int64_t arg2)\n{\n    int64_t* rax = sub_408dd0(arg1, arg2);\n    int64_t* rcx = rax;\n    int64_t* rdx = rax;\n    do\n    {\n        int64_t rax_1 = *rdx;\n        rdx = rdx[1];\n        if (rax_1 == arg2)\n        {\n            if (rdx != 0)\n            {\n                return *rdx;\n            }\n            break;\n        }\n    } while (rdx != 0);\n    int64_t rdx_1 = *(arg1 + 8);\n    int64_t rax_2;\n    do\n    {\n        rcx = &rcx[2];\n        if (rdx_1 <= rcx)\n        {\n            rax_2 = 0;\n            break;\n        }\n        rax_2 = *rcx;\n    } while (rax_2 == 0);\n    return rax_2;\n}\n\n"
        },
        {
            "funcName": "sub_409450",
            "funcStartAddr": "0x409450",
            "funcEndAddr": "0x4094b4",
            "decompiledFuncCode": "int64_t sub_409450(int64_t* arg1, int64_t arg2, int64_t arg3)\n{\n    int64_t* rdx = *arg1;\n    if (arg1[1] <= rdx)\n    {\n        return 0;\n    }\n    int64_t r9 = 0;\n    do\n    {\n        int64_t r8_1 = *rdx;\n        if (r8_1 != 0)\n        {\n            if (arg3 <= r9)\n            {\n                break;\n            }\n            *(arg2 + (r9 << 3)) = r8_1;\n            int64_t* r8_2 = rdx[1];\n            int64_t rcx_1 = (r9 + 1);\n            if (r8_2 != 0)\n            {\n                do\n                {\n                    if (arg3 == rcx_1)\n                    {\n                        return arg3;\n                    }\n                    rcx_1 = (rcx_1 + 1);\n                    *((arg2 + (rcx_1 << 3)) - 8) = *r8_2;\n                    r8_2 = r8_2[1];\n                } while (r8_2 != 0);\n            }\n            r9 = rcx_1;\n        }\n        rdx = &rdx[2];\n    } while (arg1[1] > rdx);\n    return r9;\n}\n\n"
        },
        {
            "funcName": "sub_4094c0",
            "funcStartAddr": "0x4094c0",
            "funcEndAddr": "0x409538",
            "decompiledFuncCode": "int64_t sub_4094c0(int64_t* arg1, int64_t arg2, int64_t arg3)\n{\n    int64_t* r14 = *arg1;\n    int64_t rbp;\n    if (arg1[1] <= r14)\n    {\n        rbp = 0;\n    }\n    else\n    {\n        rbp = 0;\n        do\n        {\n            int64_t rdi = *r14;\n            if (rdi != 0)\n            {\n                int64_t* rbx_1 = r14;\n                while (true)\n                {\n                    if (arg2(rdi, arg3) == 0)\n                    {\n                        return rbp;\n                    }\n                    rbx_1 = rbx_1[1];\n                    rbp = (rbp + 1);\n                    if (rbx_1 == 0)\n                    {\n                        break;\n                    }\n                    rdi = *rbx_1;\n                }\n            }\n            r14 = &r14[2];\n        } while (arg1[1] > r14);\n    }\n    return rbp;\n}\n\n"
        },
        {
            "funcName": "sub_409540",
            "funcStartAddr": "0x409540",
            "funcEndAddr": "0x409571",
            "decompiledFuncCode": "uint64_t sub_409540(char* arg1, int64_t arg2)\n{\n    uint64_t rcx = *arg1;\n    uint64_t rdx = 0;\n    if (rcx != 0)\n    {\n        do\n        {\n            arg1 = &arg1[1];\n            int64_t rax_4 = (((rdx << 5) - rdx) + rcx);\n            rcx = *arg1;\n            rdx = (COMBINE(0, rax_4) % arg2);\n        } while (rcx != 0);\n    }\n    return rdx;\n}\n\n"
        },
        {
            "funcName": "sub_409580",
            "funcStartAddr": "0x409580",
            "funcEndAddr": "0x4095a0",
            "decompiledFuncCode": "void sub_409580(int64_t* arg1)\n{\n    arg1[2] = 0;\n    *arg1 = 0x3f80000000000000;\n    arg1[1] = 0x3fb4fdf43f4ccccd;\n}\n\n"
        },
        {
            "funcName": "sub_4095a0",
            "funcStartAddr": "0x4095a0",
            "funcEndAddr": "0x40972a",
            "decompiledFuncCode": "int64_t* sub_4095a0(int64_t arg1, void* arg2, int64_t arg3, int64_t arg4, \n    int64_t arg5)\n{\n    int64_t r13 = arg4;\n    int64_t r12 = arg3;\n    int64_t rbp = arg1;\n    if (arg3 == 0)\n    {\n        r12 = 0x408db0;\n    }\n    if (arg4 == 0)\n    {\n        r13 = 0x408dc0;\n    }\n    int64_t* rax = malloc(0x50);\n    int64_t* rbx = rax;\n    if (rax != 0)\n    {\n        int64_t* rdi = &rax[5];\n        float zmm1_1;\n        if (arg2 == 0)\n        {\n            rax[5] = 0x40c9d0;\n            zmm1_1 = 0.800000012f;\n            if (sub_408f20(rdi) != 0)\n            {\n                float zmm0_1;\n                if (rbp < 0)\n                {\n                label_409713:\n                    zmm0_1 = ((rbp >> 1) | (rbp & 1));\n                    zmm0_1 = (zmm0_1 + zmm0_1);\n                label_4096c7:\n                    zmm0_1 = (zmm0_1 / zmm1_1);\n                    if ((!(zmm0_1 < 1.84467441e+19f | (FCMP_UO(zmm0_1, 1.84467441e+19f)))))\n                    {\n                        goto label_409680;\n                    }\n                    if ((zmm0_1 < 9.22337204e+18f | (FCMP_UO(zmm0_1, 9.22337204e+18f))))\n                    {\n                        rbp = (truncf(zmm0_1, arg4));\n                    }\n                    else\n                    {\n                        zmm0_1 = (zmm0_1 - 9.22337204e+18f);\n                        rbp = ((truncf(zmm0_1, arg4)) ^ 0x8000000000000000);\n                    }\n                    goto label_409613;\n                }\n            label_4096c2:\n                zmm0_1 = rbp;\n                goto label_4096c7;\n            }\n        label_409680:\n            int64_t* rdi_3 = rbx;\n            rbx = nullptr;\n            free(rdi_3);\n        }\n        else\n        {\n            rax[5] = arg2;\n            if (sub_408f20(rdi) == 0)\n            {\n                goto label_409680;\n            }\n            if (*(arg2 + 0x10) == 0)\n            {\n                zmm1_1 = *(arg2 + 8);\n                if (rbp < 0)\n                {\n                    goto label_409713;\n                }\n                goto label_4096c2;\n            }\n        label_409613:\n            size_t rax_2 = sub_408d10(rbp);\n            uint64_t rax_3;\n            rax_3 = (rax_2 >> 0x3d) != 0;\n            uint64_t rax_4 = rax_3;\n            if ((TEST_BITQ(rax_2, 0x3c)))\n            {\n                goto label_409680;\n            }\n            if (rax_4 != 0)\n            {\n                goto label_409680;\n            }\n            rbx[2] = rax_2;\n            if (rax_2 == 0)\n            {\n                goto label_409680;\n            }\n            int64_t rax_5 = calloc(rax_2, 0x10);\n            *rbx = rax_5;\n            if (rax_5 == 0)\n            {\n                goto label_409680;\n            }\n            rbx[3] = 0;\n            rbx[4] = 0;\n            rbx[1] = ((rax_2 << 4) + rax_5);\n            rbx[6] = r12;\n            rbx[7] = r13;\n            rbx[8] = arg5;\n            rbx[9] = 0;\n        }\n    }\n    return rbx;\n}\n\n"
        },
        {
            "funcName": "sub_409730",
            "funcStartAddr": "0x409730",
            "funcEndAddr": "0x4097d8",
            "decompiledFuncCode": "void sub_409730(int64_t* arg1)\n{\n    int64_t* r12 = *arg1;\n    if (r12 < arg1[1])\n    {\n        while (true)\n        {\n            if (*r12 == 0)\n            {\n                r12 = &r12[2];\n                if (arg1[1] <= r12)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                int64_t* rbx_1 = r12[1];\n                int64_t rax = arg1[8];\n                if (rbx_1 != 0)\n                {\n                    int64_t* rdx_1;\n                    do\n                    {\n                        if (rax != 0)\n                        {\n                            rax(*rbx_1);\n                            rax = arg1[8];\n                        }\n                        rdx_1 = rbx_1[1];\n                        int64_t rcx_1 = arg1[9];\n                        *rbx_1 = 0;\n                        rbx_1[1] = rcx_1;\n                        arg1[9] = rbx_1;\n                        rbx_1 = rdx_1;\n                    } while (rdx_1 != 0);\n                }\n                if (rax != 0)\n                {\n                    rax(*r12);\n                }\n                *r12 = 0;\n                r12 = &r12[2];\n                r12[-1] = 0;\n                if (arg1[1] <= r12)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    arg1[3] = 0;\n    arg1[4] = 0;\n}\n\n"
        },
        {
            "funcName": "sub_4097e0",
            "funcStartAddr": "0x4097e0",
            "funcEndAddr": "0x4098b6",
            "decompiledFuncCode": "int64_t sub_4097e0(int64_t* arg1)\n{\n    int64_t* rbp = *arg1;\n    int64_t rax = arg1[1];\n    if (((arg1[8] != 0 && arg1[4] != 0) && rbp < rax))\n    {\n        while (true)\n        {\n            int64_t rdi = *rbp;\n            if (rdi == 0)\n            {\n                rbp = &rbp[2];\n                if (rax <= rbp)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                int64_t* rbx_1 = rbp;\n                while (true)\n                {\n                    arg1[8](rdi);\n                    rbx_1 = rbx_1[1];\n                    if (rbx_1 == 0)\n                    {\n                        break;\n                    }\n                    rdi = *rbx_1;\n                }\n                rax = arg1[1];\n                rbp = &rbp[2];\n                if (rax <= rbp)\n                {\n                    break;\n                }\n            }\n        }\n        rbp = *arg1;\n    }\n    if ((((arg1[8] == 0 || (arg1[8] != 0 && arg1[4] == 0)) || ((arg1[8] != 0 && arg1[4] != 0) && rbp < rax)) && rbp < rax))\n    {\n        do\n        {\n            void* rdi_1 = rbp[1];\n            if (rdi_1 != 0)\n            {\n                void* rbx_2;\n                do\n                {\n                    rbx_2 = *(rdi_1 + 8);\n                    free(rdi_1);\n                    rdi_1 = rbx_2;\n                } while (rbx_2 != 0);\n            }\n            rbp = &rbp[2];\n        } while (arg1[1] > rbp);\n    }\n    void* rdi_2 = arg1[9];\n    if (rdi_2 != 0)\n    {\n        void* rbx_3;\n        do\n        {\n            rbx_3 = *(rdi_2 + 8);\n            free(rdi_2);\n            rdi_2 = rbx_3;\n        } while (rbx_3 != 0);\n    }\n    free(*arg1);\n    /* tailcall */\n    return free(arg1);\n}\n\n"
        },
        {
            "funcName": "sub_4098c0",
            "funcStartAddr": "0x401c27",
            "funcEndAddr": "0x409aba",
            "decompiledFuncCode": "uint64_t sub_4098c0(int64_t* arg1, int64_t arg2)\n{\n    void* r12 = arg1[5];\n    int32_t rbx_4;\n    if (*(r12 + 0x10) == 0)\n    {\n        float zmm0;\n        if (arg2 < 0)\n        {\n            zmm0 = ((arg2 >> 1) | (arg2 & 1));\n            zmm0 = (zmm0 + zmm0);\n        }\n        else\n        {\n            zmm0 = arg2;\n        }\n        zmm0 = (zmm0 / *(r12 + 8));\n        if ((!(zmm0 < 1.84467441e+19f | (FCMP_UO(zmm0, 1.84467441e+19f)))))\n        {\n        label_409a30:\n            rbx_4 = 0;\n        label_409a3c:\n            return rbx_4;\n        }\n        if ((zmm0 < 9.22337204e+18f | (FCMP_UO(zmm0, 9.22337204e+18f))))\n        {\n            arg2 = (truncf(zmm0, 0x28));\n        }\n        else\n        {\n            zmm0 = (zmm0 - 9.22337204e+18f);\n            arg2 = ((truncf(zmm0, 0x28)) ^ 0x8000000000000000);\n        }\n    }\n    size_t rax_1 = sub_408d10(arg2);\n    uint64_t rax_2;\n    rax_2 = (rax_1 >> 0x3d) != 0;\n    uint64_t rax_3 = rax_2;\n    if ((rax_1 << 3) < 0)\n    {\n        rax_3 = 1;\n    }\n    if (rax_1 == 0)\n    {\n        goto label_409a30;\n    }\n    if (rax_3 != 0)\n    {\n        goto label_409a30;\n    }\n    if (arg1[2] == rax_1)\n    {\n        return 1;\n    }\n    int64_t rax_4 = calloc(rax_1, 0x10);\n    int64_t var_68 = rax_4;\n    if (rax_4 == 0)\n    {\n        goto label_409a30;\n    }\n    int64_t rbx_3 = ((rax_1 << 4) + rax_4);\n    int64_t var_38_1 = arg1[6];\n    int64_t var_48_1 = 0;\n    int64_t var_30_1 = arg1[7];\n    void* var_40_1 = r12;\n    int64_t var_28_1 = arg1[8];\n    int64_t rax_8 = arg1[9];\n    int32_t rax_9 = sub_408fa0(&var_68, arg1, 0);\n    rbx_4 = rax_9;\n    if (rax_9 == 0)\n    {\n        arg1[9] = rax_8;\n        if ((sub_408fa0(arg1, &var_68, 1) != 0 && sub_408fa0(arg1, &var_68, 0) != 0))\n        {\n            free(var_68);\n            return rbx_4;\n        }\n        abort();\n        /* no return */\n    }\n    free(*arg1);\n    *arg1 = var_68;\n    arg1[1] = rbx_3;\n    arg1[2] = rax_1;\n    arg1[3] = 0;\n    arg1[9] = rax_8;\n    goto label_409a3c;\n}\n\n"
        },
        {
            "funcName": "sub_409ac0",
            "funcStartAddr": "0x401c2c",
            "funcEndAddr": "0x409d34",
            "decompiledFuncCode": "int64_t sub_409ac0(int64_t* arg1, int64_t arg2, int64_t* arg3)\n{\n    if (arg2 != 0)\n    {\n        int64_t* var_20;\n        int64_t rax_1 = sub_408e00(arg1, arg2, &var_20, 0);\n        if (rax_1 != 0)\n        {\n            if (arg3 != 0)\n            {\n                *arg3 = rax_1;\n            }\n            return 0;\n        }\n        int64_t rax_3 = arg1[3];\n        int64_t rax_4;\n        void* rdx_2;\n        float zmm1;\n        if (rax_3 < 0)\n        {\n            rax_4 = arg1[2];\n            zmm1 = ((rax_3 >> 1) | (rax_3 & 1));\n            rdx_2 = arg1[5];\n            zmm1 = (zmm1 + zmm1);\n        }\n        else\n        {\n            rdx_2 = arg1[5];\n            zmm1 = rax_3;\n            rax_4 = arg1[2];\n        }\n        float zmm0_1;\n        if (((rax_3 < 0 && rax_4 >= 0) || (rax_3 >= 0 && rax_4 >= 0)))\n        {\n            zmm0_1 = (rax_4 * *(rdx_2 + 8));\n            if ((!((!(zmm1 == zmm0_1 | (FCMP_UO(zmm1, zmm0_1)))) && (!(zmm1 < zmm0_1 | (FCMP_UO(zmm1, zmm0_1)))))))\n            {\n            label_409b42:\n                int64_t* r12_2 = var_20;\n                if (*r12_2 == 0)\n                {\n                    *r12_2 = arg2;\n                    arg1[4] = (arg1[4] + 1);\n                    arg1[3] = (arg1[3] + 1);\n                    return 1;\n                }\n                int64_t* rax_5 = arg1[9];\n                if (rax_5 == 0)\n                {\n                    rax_5 = malloc(0x10);\n                }\n                else\n                {\n                    arg1[9] = rax_5[1];\n                }\n                int64_t rdx_4 = r12_2[1];\n                *rax_5 = arg2;\n                rax_5[1] = rdx_4;\n                r12_2[1] = rax_5;\n                arg1[4] = (arg1[4] + 1);\n                return 1;\n                goto label_409c54;\n            }\n        label_409be5:\n            sub_408f20(&arg1[5]);\n            void* rdx_8 = arg1[5];\n            int64_t rax_9 = arg1[2];\n            float zmm2_1 = *(rdx_8 + 8);\n            float zmm0_2;\n            if (rax_9 < 0)\n            {\n                zmm0_2 = ((rax_9 >> 1) | (rax_9 & 1));\n                zmm0_2 = (zmm0_2 + zmm0_2);\n            }\n            else\n            {\n                zmm0_2 = rax_9;\n            }\n            int64_t rax_10 = arg1[3];\n            float zmm1_1;\n            if (rax_10 < 0)\n            {\n                zmm1_1 = ((rax_10 >> 1) | (rax_10 & 1));\n                zmm1_1 = (zmm1_1 + zmm1_1);\n            }\n            else\n            {\n                zmm1_1 = rax_10;\n            }\n            float zmm3_1 = (zmm2_1 * zmm0_2);\n            if (((zmm1_1 == zmm3_1 | (FCMP_UO(zmm1_1, zmm3_1))) || (zmm1_1 < zmm3_1 | (FCMP_UO(zmm1_1, zmm3_1)))))\n            {\n                goto label_409b42;\n            }\n            zmm0_2 = (zmm0_2 * *(rdx_8 + 0xc));\n            if (*(rdx_8 + 0x10) == 0)\n            {\n                zmm0_2 = (zmm0_2 * zmm2_1);\n            }\n            if ((!(zmm0_2 < 1.84467441e+19f | (FCMP_UO(zmm0_2, 1.84467441e+19f)))))\n            {\n            label_409c54:\n                return 0xffffffff;\n            }\n            int64_t rsi;\n            if ((!(zmm0_2 < 9.22337204e+18f | (FCMP_UO(zmm0_2, 9.22337204e+18f)))))\n            {\n                zmm0_2 = (zmm0_2 - 9.22337204e+18f);\n                rsi = ((truncf(zmm0_2, arg1)) ^ 0x8000000000000000);\n            }\n            else\n            {\n                rsi = (truncf(zmm0_2, arg1));\n            }\n            if (sub_4098c0(arg1, rsi) == 0)\n            {\n                goto label_409c54;\n            }\n            if (sub_408e00(arg1, arg2, &var_20, 0) == 0)\n            {\n                goto label_409b42;\n            }\n        }\n        if (((rax_3 < 0 && rax_4 < 0) || (rax_3 >= 0 && rax_4 < 0)))\n        {\n            zmm0_1 = ((rax_4 >> 1) | (rax_4 & 1));\n            zmm0_1 = (zmm0_1 + zmm0_1);\n            zmm0_1 = (zmm0_1 * *(rdx_2 + 8));\n            if ((!((zmm1 == zmm0_1 | (FCMP_UO(zmm1, zmm0_1))) || (zmm1 < zmm0_1 | (FCMP_UO(zmm1, zmm0_1))))))\n            {\n                goto label_409be5;\n            }\n            goto label_409b42;\n        }\n    }\n    abort();\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_409d40",
            "funcStartAddr": "0x409d40",
            "funcEndAddr": "0x409d7b",
            "decompiledFuncCode": "int64_t sub_409d40(int64_t* arg1, int64_t arg2)\n{\n    int64_t rbx = arg2;\n    int64_t var_10;\n    int32_t rax = sub_409ac0(arg1, arg2, &var_10);\n    if (rax == 0xffffffff)\n    {\n        return 0;\n    }\n    if (rax == 0)\n    {\n        rbx = var_10;\n    }\n    return rbx;\n}\n\n"
        },
        {
            "funcName": "sub_409d80",
            "funcStartAddr": "0x409d80",
            "funcEndAddr": "0x409f57",
            "decompiledFuncCode": "int64_t sub_409d80(int64_t* arg1)\n{\n    int64_t* var_20;\n    int64_t rsi;\n    int64_t rax = sub_408e00(arg1, rsi, &var_20, 1);\n    if (rax != 0)\n    {\n        int64_t* rax_1 = var_20;\n        arg1[4] = (arg1[4] - 1);\n        if (*rax_1 == 0)\n        {\n            int64_t rax_3 = arg1[3];\n            int64_t rax_4 = (rax_3 - 1);\n            arg1[3] = rax_4;\n            int64_t rax_5;\n            float* rdx_1;\n            float zmm0_1;\n            if ((rax_3 - 1) < 0)\n            {\n                rax_5 = arg1[2];\n                zmm0_1 = ((rax_4 >> 1) | (rax_4 & 1));\n                rdx_1 = arg1[5];\n                zmm0_1 = (zmm0_1 + zmm0_1);\n            }\n            else\n            {\n                rdx_1 = arg1[5];\n                zmm0_1 = rax_4;\n                rax_5 = arg1[2];\n            }\n            float zmm1;\n            if ((((rax_3 - 1) < 0 && rax_5 >= 0) || ((rax_3 - 1) >= 0 && rax_5 >= 0)))\n            {\n                zmm1 = rax_5;\n            }\n            if ((((rax_3 - 1) < 0 && rax_5 < 0) || ((rax_3 - 1) >= 0 && rax_5 < 0)))\n            {\n                zmm1 = ((rax_5 >> 1) | (rax_5 & 1));\n                zmm1 = (zmm1 + zmm1);\n            }\n            zmm1 = (zmm1 * *rdx_1);\n            if ((!((zmm1 == zmm0_1 | (FCMP_UO(zmm1, zmm0_1))) || (zmm1 < zmm0_1 | (FCMP_UO(zmm1, zmm0_1))))))\n            {\n                sub_408f20(&arg1[5]);\n                int64_t rax_6 = arg1[2];\n                int32_t* rdx_2 = arg1[5];\n                float zmm0_2;\n                if (rax_6 < 0)\n                {\n                    zmm0_2 = ((rax_6 >> 1) | (rax_6 & 1));\n                    zmm0_2 = (zmm0_2 + zmm0_2);\n                }\n                else\n                {\n                    zmm0_2 = rax_6;\n                }\n                int64_t rax_7 = arg1[3];\n                float zmm1_1;\n                if (rax_7 < 0)\n                {\n                    zmm1_1 = ((rax_7 >> 1) | (rax_7 & 1));\n                    zmm1_1 = (zmm1_1 + zmm1_1);\n                }\n                else\n                {\n                    zmm1_1 = rax_7;\n                }\n                float zmm2_1 = (*rdx_2 * zmm0_2);\n                if ((!((zmm2_1 == zmm1_1 | (FCMP_UO(zmm2_1, zmm1_1))) || (zmm2_1 < zmm1_1 | (FCMP_UO(zmm2_1, zmm1_1))))))\n                {\n                    zmm0_2 = (zmm0_2 * rdx_2[1]);\n                    if (rdx_2[4] == 0)\n                    {\n                        zmm0_2 = (zmm0_2 * rdx_2[2]);\n                    }\n                    int64_t rsi_1;\n                    if ((!(zmm0_2 < 9.22337204e+18f | (FCMP_UO(zmm0_2, 9.22337204e+18f)))))\n                    {\n                        zmm0_2 = (zmm0_2 - 9.22337204e+18f);\n                        rsi_1 = ((truncf(zmm0_2, arg1)) ^ 0x8000000000000000);\n                    }\n                    else\n                    {\n                        rsi_1 = (truncf(zmm0_2, arg1));\n                    }\n                    if (sub_4098c0(arg1, rsi_1) == 0)\n                    {\n                        void* rdi_2 = arg1[9];\n                        if (rdi_2 != 0)\n                        {\n                            void* r12_1;\n                            do\n                            {\n                                r12_1 = *(rdi_2 + 8);\n                                free(rdi_2);\n                                rdi_2 = r12_1;\n                            } while (r12_1 != 0);\n                        }\n                        arg1[9] = 0;\n                    }\n                }\n            }\n        }\n    }\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_409f60",
            "funcStartAddr": "0x409f60",
            "funcEndAddr": "0x409f7b",
            "decompiledFuncCode": "int64_t sub_409f60(int32_t* arg1, int32_t arg2)\n{\n    *(arg1 + 0x14) = 0;\n    arg1[7] = 1;\n    *arg1 = arg2;\n    arg1[1] = arg2;\n    arg1[2] = arg2;\n    arg1[3] = arg2;\n    arg1[4] = arg2;\n}\n\n"
        },
        {
            "funcName": "sub_409f80",
            "funcStartAddr": "0x409f80",
            "funcEndAddr": "0x409f85",
            "decompiledFuncCode": "uint64_t sub_409f80(void* arg1)\n{\n    return *(arg1 + 0x1c);\n}\n\n"
        },
        {
            "funcName": "sub_409f90",
            "funcStartAddr": "0x409f90",
            "funcEndAddr": "0x409fc5",
            "decompiledFuncCode": "uint64_t sub_409f90(void* arg1, int32_t arg2)\n{\n    uint32_t rdx_1 = (*(arg1 + 0x1c) ^ 1);\n    int32_t rcx_2 = ((*(arg1 + 0x14) + rdx_1) & 3);\n    void* r8 = (arg1 + (rcx_2 << 2));\n    uint64_t rax_1 = *r8;\n    *r8 = arg2;\n    int32_t rsi = *(arg1 + 0x18);\n    *(arg1 + 0x14) = rcx_2;\n    if (rsi == rcx_2)\n    {\n        *(arg1 + 0x18) = ((rdx_1 + rsi) & 3);\n    }\n    *(arg1 + 0x1c) = 0;\n    return rax_1;\n}\n\n"
        },
        {
            "funcName": "sub_409fd0",
            "funcStartAddr": "0x401c31",
            "funcEndAddr": "0x40a011",
            "decompiledFuncCode": "uint64_t sub_409fd0(void* arg1)\n{\n    if (*(arg1 + 0x1c) != 0)\n    {\n        abort();\n        /* no return */\n    }\n    uint64_t rax = *(arg1 + 0x14);\n    void* rcx = (arg1 + (rax << 2));\n    int32_t rdx = rax;\n    uint64_t rax_1 = *rcx;\n    *rcx = *(arg1 + 0x10);\n    if (rdx == *(arg1 + 0x18))\n    {\n        *(arg1 + 0x1c) = 1;\n        return rax_1;\n    }\n    *(arg1 + 0x14) = ((rdx + 3) & 3);\n    return rax_1;\n}\n\n"
        },
        {
            "funcName": "sub_40a020",
            "funcStartAddr": "0x40a020",
            "funcEndAddr": "0x40a582",
            "decompiledFuncCode": "char* sub_40a020()\n{\n    char* rax = nl_langinfo(0xe);\n    char* r15 = data_60f4d8;\n    char* rbx = rax;\n    if (rax == 0)\n    {\n        rbx = &data_40c8fc[0x1b];\n    }\n    if (r15 == 0)\n    {\n        char* rax_6 = getenv(\"CHARSETALIASDIR\");\n        char* r13_1 = rax_6;\n        size_t rdi_7;\n        uint64_t r12_1;\n        uint64_t r14_1;\n        if ((rax_6 == 0 || (rax_6 != 0 && *rax_6 == 0)))\n        {\n            rdi_7 = 0x73;\n            r12_1 = 0x65;\n            r14_1 = 0x64;\n            r13_1 = \"/home/dongkwan/data/scripts/gnu_\u2026\";\n        }\n        char* rbp_3;\n        if ((rax_6 != 0 && *rax_6 != 0))\n        {\n            uint64_t rax_7 = strlen(rax_6);\n            r12_1 = rax_7;\n            r14_1 = rax_7;\n            size_t rdi_6;\n            if (rax_7 == 0)\n            {\n                rdi_6 = 0xe;\n            }\n            else if (r13_1[(rax_7 - 1)] != 0x2f)\n            {\n                rdi_7 = (rax_7 + 0xf);\n                r12_1 = (r12_1 + 1);\n            }\n            else\n            {\n                rdi_6 = (rax_7 + 0xe);\n            }\n            if ((rax_7 == 0 || (rax_7 != 0 && r13_1[(rax_7 - 1)] == 0x2f)))\n            {\n                char* rax_8 = malloc(rdi_6);\n                rbp_3 = rax_8;\n                if (rax_8 == 0)\n                {\n                    goto label_40a11c;\n                }\n                memcpy(rbp_3, r13_1, r14_1);\n                goto label_40a166;\n            }\n        }\n        char* rax_9 = malloc(rdi_7);\n        rbp_3 = rax_9;\n        if (rax_9 == 0)\n        {\n        label_40a11c:\n            r15 = &data_40c8fc[0x1b];\n        }\n        else\n        {\n            memcpy(rbp_3, r13_1, r14_1);\n            rbp_3[r14_1] = 0x2f;\n        label_40a166:\n            int64_t* r12_2 = &rbp_3[r12_1];\n            *r12_2 = 0x2e74657372616863;\n            *(r12_2 + 0xc) = 0x73;\n            r12_2[1] = 0x61696c61;\n            int32_t rax_11 = open(rbp_3, 0);\n            void* var_d0_1;\n            FILE* rax_12;\n            if (rax_11 >= 0)\n            {\n                r15 = nullptr;\n                rax_12 = fdopen(rax_11, \"r\");\n                var_d0_1 = nullptr;\n                if (rax_12 == 0)\n                {\n                    close(rax_11);\n                }\n                else\n                {\n                    while (true)\n                    {\n                        char* rax_14 = rax_12->_IO_read_ptr;\n                        uint32_t rdi_13;\n                        if (rax_14 < rax_12->_IO_read_end)\n                        {\n                            do\n                            {\n                                rax_12->_IO_read_ptr = &rax_14[1];\n                                rdi_13 = *rax_14;\n                            label_40a21c:\n                                if ((rdi_13 - 9) <= 1)\n                                {\n                                    break;\n                                }\n                                if (rdi_13 == 0x20)\n                                {\n                                    break;\n                                }\n                                if (rdi_13 == 0x23)\n                                {\n                                    break;\n                                }\n                                ungetc(rdi_13, rax_12);\n                                int64_t var_b8;\n                                int64_t var_78;\n                                if (fscanf(rax_12, \"%50s %50s\", &var_b8, &var_78) <= 1)\n                                {\n                                    goto label_40a3ab;\n                                }\n                                int64_t* rcx_2 = &var_b8;\n                            label_40a258:\n                                int32_t rdx_5 = *rcx_2;\n                                rcx_2 = (rcx_2 + 4);\n                                uint32_t rax_20 = (((rdx_5 - 0x1010101) & (!rdx_5)) & 0x80808080);\n                                if (rax_20 == 0)\n                                {\n                                    goto label_40a258;\n                                }\n                                uint32_t rdx_8 = (rax_20 >> 0x10);\n                                int32_t temp0_1 = (rax_20 & 0x8080);\n                                bool cond:2_1 = temp0_1 == 0;\n                                if (temp0_1 == 0)\n                                {\n                                    rax_20 = rdx_8;\n                                }\n                                void* rdx_9 = (rcx_2 + 2);\n                                if (cond:2_1)\n                                {\n                                    rcx_2 = rdx_9;\n                                }\n                                char rdx_10 = rax_20;\n                                int64_t* rdx_11 = &var_78;\n                                void* rcx_4 = ((rcx_2 - 3) - &var_b8);\n                            label_40a292:\n                                int32_t rsi_5 = *rdx_11;\n                                rdx_11 = (rdx_11 + 4);\n                                uint32_t rax_23 = (((rsi_5 - 0x1010101) & (!rsi_5)) & 0x80808080);\n                                if (rax_23 == 0)\n                                {\n                                    goto label_40a292;\n                                }\n                                uint32_t rsi_8 = (rax_23 >> 0x10);\n                                int32_t temp2_1 = (rax_23 & 0x8080);\n                                bool cond:3_1 = temp2_1 == 0;\n                                if (temp2_1 == 0)\n                                {\n                                    rax_23 = rsi_8;\n                                }\n                                void* rsi_9 = (rdx_11 + 2);\n                                if (cond:3_1)\n                                {\n                                    rdx_11 = rsi_9;\n                                }\n                                char rsi_10 = rax_23;\n                                void* rdx_13 = ((rdx_11 - 3) - &var_78);\n                                void* rax_24 = (rcx_4 + rdx_13);\n                                void* var_c0 = rdx_13;\n                                char* rax_25;\n                                void* rcx_6;\n                                void* rdx_14;\n                                if (var_d0_1 != 0)\n                                {\n                                    void* rax_31 = (rax_24 + var_d0_1);\n                                    var_d0_1 = (rax_31 + 2);\n                                    rax_25 = realloc(r15, (rax_31 + 3));\n                                    rdx_14 = var_c0;\n                                    rcx_6 = rcx_4;\n                                }\n                                else\n                                {\n                                    var_d0_1 = (rax_24 + 2);\n                                    rax_25 = malloc((rax_24 + 3));\n                                    rcx_6 = rcx_4;\n                                    rdx_14 = var_c0;\n                                }\n                                if (rax_25 == 0)\n                                {\n                                    char* rdi_26 = r15;\n                                    r15 = &data_40c8fc[0x1b];\n                                    free(rdi_26);\n                                    sub_40a630(rax_12);\n                                    goto label_40a1a7;\n                                }\n                                int32_t rcx_7 = (rcx_6 + 1);\n                                void* rdi_17 = (var_d0_1 - rdx_14);\n                                void* rsi_13 = (((-2 - rcx_6) + rdi_17) + rax_25);\n                                if (rcx_7 >= 8)\n                                {\n                                    *rsi_13 = var_b8;\n                                    uint64_t r9_3 = rcx_7;\n                                    *((rsi_13 + r9_3) - 8) = *(&var_c0 + r9_3);\n                                    void* r9_5 = ((rsi_13 + 8) & 0xfffffffffffffff8);\n                                    void* rsi_16 = (rsi_13 - r9_5);\n                                    int64_t* r10_2 = (&var_b8 - rsi_16);\n                                    int32_t rcx_11 = ((rcx_7 + rsi_16) & 0xfffffff8);\n                                    if (rcx_11 >= 8)\n                                    {\n                                        int32_t rcx_12 = (rcx_11 & 0xfffffff8);\n                                        int32_t rsi_17 = 0;\n                                    label_40a46b:\n                                        uint64_t r8_1 = rsi_17;\n                                        rsi_17 = (rsi_17 + 8);\n                                        *(r9_5 + r8_1) = *(r10_2 + r8_1);\n                                        if (rsi_17 < rcx_12)\n                                        {\n                                            goto label_40a46b;\n                                        }\n                                    }\n                                }\n                                else if ((rcx_7 & 4) != 0)\n                                {\n                                    uint64_t rcx_15 = rcx_7;\n                                    *rsi_13 = var_b8;\n                                    *((rsi_13 + rcx_15) - 4) = *(&*var_c0[4] + rcx_15);\n                                }\n                                else if (rcx_7 != 0)\n                                {\n                                    *rsi_13 = var_b8;\n                                    if ((rcx_7 & 2) != 0)\n                                    {\n                                        uint64_t rcx_16 = rcx_7;\n                                        *((rsi_13 + rcx_16) - 2) = *(&*var_c0[6] + rcx_16);\n                                    }\n                                }\n                                int32_t rdx_15 = (rdx_14 + 1);\n                                void* rcx_8 = ((rax_25 + rdi_17) - 1);\n                                if (rdx_15 >= 8)\n                                {\n                                    *rcx_8 = var_78;\n                                    uint64_t rsi_19 = rdx_15;\n                                    void var_80;\n                                    *((rcx_8 + rsi_19) - 8) = *(&var_80 + rsi_19);\n                                    void* rdi_24 = ((rcx_8 + 8) & 0xfffffffffffffff8);\n                                    void* rcx_13 = (rcx_8 - rdi_24);\n                                    int64_t* r9_6 = (&var_78 - rcx_13);\n                                    int32_t rdx_19 = ((rdx_15 + rcx_13) & 0xfffffff8);\n                                    if (rdx_19 >= 8)\n                                    {\n                                        int32_t rdx_20 = (rdx_19 & 0xfffffff8);\n                                        int32_t rcx_14 = 0;\n                                    label_40a4b9:\n                                        uint64_t rsi_20 = rcx_14;\n                                        rcx_14 = (rcx_14 + 8);\n                                        *(rdi_24 + rsi_20) = *(r9_6 + rsi_20);\n                                        if (rcx_14 < rdx_20)\n                                        {\n                                            goto label_40a4b9;\n                                        }\n                                    }\n                                }\n                                else if ((rdx_15 & 4) != 0)\n                                {\n                                    uint64_t rdx_21 = rdx_15;\n                                    *rcx_8 = var_78;\n                                    void var_7c;\n                                    *((rcx_8 + rdx_21) - 4) = *(&var_7c + rdx_21);\n                                }\n                                else if (rdx_15 != 0)\n                                {\n                                    *rcx_8 = var_78;\n                                    if ((rdx_15 & 2) != 0)\n                                    {\n                                        uint64_t rsi_23 = rdx_15;\n                                        void var_7a;\n                                        *((rcx_8 + rsi_23) - 2) = *(&var_7a + rsi_23);\n                                    }\n                                }\n                                r15 = rax_25;\n                                rax_14 = rax_12->_IO_read_ptr;\n                            } while (rax_14 < rax_12->_IO_read_end);\n                            if (((!((rdi_13 - 9) > 1 && rdi_13 == 0x23)) && (rdi_13 - 9) <= 1))\n                            {\n                                continue;\n                            }\n                            if (((rdi_13 - 9) > 1 && rdi_13 == 0x23))\n                            {\n                                int32_t rax_29;\n                                bool rdx_17;\n                                do\n                                {\n                                    char* rax_30 = rax_12->_IO_read_ptr;\n                                    if (rax_30 < rax_12->_IO_read_end)\n                                    {\n                                        rax_12->_IO_read_ptr = &rax_30[1];\n                                        rax_29 = *rax_30;\n                                        rdx_17 = true;\n                                    }\n                                    else\n                                    {\n                                        rax_29 = __uflow(rax_12);\n                                        rdx_17 = rax_29 != 0xffffffff;\n                                    }\n                                    if (rax_29 == 0xa)\n                                    {\n                                        break;\n                                    }\n                                } while (rdx_17 != 0);\n                                if (rax_29 == 0xffffffff)\n                                {\n                                    break;\n                                }\n                                continue;\n                            }\n                        }\n                        uint32_t rax_26 = __uflow(rax_12);\n                        rdi_13 = rax_26;\n                        if (rax_26 != 0xffffffff)\n                        {\n                            goto label_40a21c;\n                        }\n                        break;\n                    }\n                label_40a3ab:\n                    sub_40a630(rax_12);\n                    if (var_d0_1 != 0)\n                    {\n                        *(r15 + var_d0_1) = 0;\n                    }\n                }\n            }\n            if ((((rax_11 >= 0 && rax_12 == 0) || rax_11 < 0) || ((rax_11 >= 0 && rax_12 != 0) && var_d0_1 == 0)))\n            {\n                r15 = &data_40c8fc[0x1b];\n            }\n        label_40a1a7:\n            free(rbp_3);\n        }\n        data_60f4d8 = r15;\n    }\n    char rbp_2 = *r15;\n    if (rbp_2 != 0)\n    {\n        while (true)\n        {\n            if ((strcmp(rbx, r15) != 0 && (rbp_2 != 0x2a || (rbp_2 == 0x2a && r15[1] != 0))))\n            {\n                void* rbp_1 = &r15[(strlen(r15) + 1)];\n                r15 = ((rbp_1 + strlen(rbp_1)) + 1);\n                rbp_2 = *r15;\n                if (rbp_2 == 0)\n                {\n                    break;\n                }\n                continue;\n            }\n            rbx = &r15[(strlen(r15) + 1)];\n            break;\n        }\n    }\n    if (*rbx == 0)\n    {\n        rbx = \"ASCII\";\n    }\n    return rbx;\n}\n\n"
        },
        {
            "funcName": "sub_40a590",
            "funcStartAddr": "0x40a590",
            "funcEndAddr": "0x40a5da",
            "decompiledFuncCode": "uint64_t sub_40a590(int64_t arg1, char* arg2, int64_t arg3, int32_t arg4)\n{\n    uint64_t rcx = 0;\n    if ((arg3 & 0x40) != 0)\n    {\n        int32_t var_50_1 = 0x18;\n        rcx = arg4;\n        void* var_48_1 = &arg_8;\n        void var_38;\n        void* var_40_1 = &var_38;\n    }\n    return sub_40a5e0(openat(arg1, arg2, arg3, rcx));\n}\n\n"
        },
        {
            "funcName": "sub_40a5e0",
            "funcStartAddr": "0x40a5e0",
            "funcEndAddr": "0x40a62e",
            "decompiledFuncCode": "uint64_t sub_40a5e0(int32_t arg1)\n{\n    if (arg1 <= 2)\n    {\n        int32_t rax_1 = sub_40a890(arg1);\n        int32_t* rax_2 = __errno_location();\n        int32_t r13 = *rax_2;\n        close(arg1);\n        *rax_2 = r13;\n        return rax_1;\n    }\n    return arg1;\n}\n\n"
        },
        {
            "funcName": "sub_40a630",
            "funcStartAddr": "0x40a630",
            "funcEndAddr": "0x40a6ab",
            "decompiledFuncCode": "int64_t sub_40a630(FILE* arg1)\n{\n    FILE* rdi = arg1;\n    if (fileno(arg1) >= 0)\n    {\n        int32_t rax_1 = __freading(rdi);\n        off64_t rax_6;\n        if (rax_1 != 0)\n        {\n            rax_6 = lseek(fileno(arg1), 0, 1);\n        }\n        if (((rax_1 == 0 || (rax_1 != 0 && rax_6 != -1)) && sub_40a7f0(arg1) != 0))\n        {\n            int32_t* rax_3 = __errno_location();\n            int32_t r12 = *rax_3;\n            int64_t rax_4 = fclose(arg1);\n            if (r12 != 0)\n            {\n                *rax_3 = r12;\n                rax_4 = 0xffffffff;\n            }\n            return rax_4;\n        }\n        rdi = arg1;\n    }\n    /* tailcall */\n    return fclose(rdi);\n}\n\n"
        },
        {
            "funcName": "sub_40a6b0",
            "funcStartAddr": "0x40a6b0",
            "funcEndAddr": "0x40a7e5",
            "decompiledFuncCode": "uint64_t sub_40a6b0(int32_t arg1, int32_t arg2, int32_t arg3)\n{\n    void* var_58 = &arg_8;\n    int64_t rcx;\n    int64_t var_30 = rcx;\n    int32_t var_60 = 0x10;\n    void var_48;\n    void* var_50 = &var_48;\n    if (arg2 != 0x406)\n    {\n        return fcntl();\n    }\n    int32_t var_60_1 = 0x18;\n    int32_t rax_2;\n    int32_t rax_5;\n    int32_t* rax_15;\n    int32_t rax_17;\n    int32_t rbx;\n    if (data_60f4e0 < 0)\n    {\n        rax_5 = sub_40a6b0();\n        rbx = rax_5;\n    }\n    else\n    {\n        rax_2 = fcntl();\n        rbx = rax_2;\n        if (rax_2 < 0)\n        {\n            rax_15 = __errno_location();\n            if (*rax_15 == 0x16)\n            {\n                rax_17 = sub_40a6b0(arg1, 0, arg3);\n                rbx = rax_17;\n                if (rax_17 >= 0)\n                {\n                    data_60f4e0 = 0xffffffff;\n                }\n            }\n        }\n    }\n    if (((((data_60f4e0 >= 0 && rax_2 < 0) && *rax_15 == 0x16) && rax_17 >= 0) || (rax_5 >= 0 && data_60f4e0 == 0xffffffff)))\n    {\n        int32_t rax_7 = fcntl(rbx, 1);\n        int32_t rax_10;\n        if (rax_7 >= 0)\n        {\n            rax_10 = fcntl(rbx, 2, (rax_7 | 1));\n        }\n        if ((rax_7 < 0 || (rax_7 >= 0 && rax_10 == 0xffffffff)))\n        {\n            int32_t* rax_11 = __errno_location();\n            int32_t rdi_2 = rbx;\n            rbx = -1;\n            int32_t r12_1 = *rax_11;\n            close(rdi_2);\n            *rax_11 = r12_1;\n        }\n    }\n    if ((data_60f4e0 >= 0 && (rax_2 >= 0 || (rax_2 < 0 && *rax_15 != 0x16))))\n    {\n        data_60f4e0 = 1;\n    }\n    return rbx;\n}\n\n"
        },
        {
            "funcName": "sub_40a7f0",
            "funcStartAddr": "0x40a7f0",
            "funcEndAddr": "0x40a830",
            "decompiledFuncCode": "int64_t sub_40a7f0(FILE* arg1)\n{\n    int32_t* rbx = arg1;\n    if ((arg1 != 0 && (__freading(arg1) != 0 && (*rbx & 0x100) != 0)))\n    {\n        sub_40a830(rbx, 0, 1);\n        /* tailcall */\n        return fflush(rbx);\n    }\n    /* tailcall */\n    return fflush(rbx);\n}\n\n"
        },
        {
            "funcName": "sub_40a830",
            "funcStartAddr": "0x40a830",
            "funcEndAddr": "0x40a887",
            "decompiledFuncCode": "off64_t sub_40a830(FILE* arg1, off_t arg2, int32_t arg3)\n{\n    if ((arg1->_IO_read_end == arg1->_IO_read_ptr && (arg1->_IO_write_ptr == arg1->_IO_write_base && arg1->_IO_save_base == 0)))\n    {\n        off64_t rax_3 = lseek(fileno(arg1), arg2, arg3);\n        if (rax_3 != -1)\n        {\n            arg1->_flags = (arg1->_flags & 0xffffffef);\n            arg1->_offset = rax_3;\n            rax_3 = 0;\n        }\n        return rax_3;\n    }\n    /* tailcall */\n    return fseeko(arg1, arg2, arg3);\n}\n\n"
        },
        {
            "funcName": "sub_40a890",
            "funcStartAddr": "0x40a890",
            "funcEndAddr": "0x40a89e",
            "decompiledFuncCode": "int64_t sub_40a890(int32_t arg1)\n{\n    /* tailcall */\n    return sub_40a6b0(arg1, 0, 3);\n}\n\n"
        },
        {
            "funcName": "init",
            "funcStartAddr": "0x40a8a0",
            "funcEndAddr": "0x40a8fd",
            "decompiledFuncCode": "void init()\n{\n    _init();\n}\n\n"
        },
        {
            "funcName": "fini",
            "funcStartAddr": "0x40a900",
            "funcEndAddr": "0x40a901",
            "decompiledFuncCode": "void fini()\n{\n    return;\n}\n\n"
        },
        {
            "funcName": "sub_40a910",
            "funcStartAddr": "0x40a910",
            "funcEndAddr": "0x40a928",
            "decompiledFuncCode": "int64_t sub_40a910(void (* arg1)(void*))\n{\n    int64_t rdx = data_60f248;\n    /* tailcall */\n    return __cxa_atexit(arg1, nullptr, rdx);\n}\n\n"
        },
        {
            "funcName": "sub_40a928",
            "funcStartAddr": "0x40a928",
            "funcEndAddr": "0x40a948",
            "decompiledFuncCode": "int64_t sub_40a928(int64_t arg1, int64_t arg2, int64_t arg3)\n{\n    int64_t* rbx = &data_60ee30;\n    while (true)\n    {\n        int64_t rax_1 = *rbx;\n        if (rax_1 == -1)\n        {\n            break;\n        }\n        rax_1();\n        rbx = (rbx - 8);\n    }\n    return arg3;\n}\n\n"
        }
    ]
}