{
    "decompilerName": "binaryNinja",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_ln.elf",
    "isStripped": "True",
    "compilerName": "gcc",
    "optLevel": "-O",
    "funcCount": 241,
    "funcInfo": [
        {
            "funcName": "sub_401c50",
            "funcStartAddr": "0x401c50",
            "funcEndAddr": "0x401c5c",
            "decompiledFuncCode": "int64_t sub_401c50()\n{\n    int64_t var_8 = data_611008;\n    /* jump -> data_611010 */\n}\n\n"
        },
        {
            "funcName": "sub_401c66",
            "funcStartAddr": "0x401c66",
            "funcEndAddr": "0x401c70",
            "decompiledFuncCode": "int64_t sub_401c66()\n{\n    int64_t var_8 = 0;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401c76",
            "funcStartAddr": "0x401c76",
            "funcEndAddr": "0x401c80",
            "decompiledFuncCode": "int64_t sub_401c76()\n{\n    int64_t var_8 = 1;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401c86",
            "funcStartAddr": "0x401c86",
            "funcEndAddr": "0x401c90",
            "decompiledFuncCode": "int64_t sub_401c86()\n{\n    int64_t var_8 = 2;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401c96",
            "funcStartAddr": "0x401c96",
            "funcEndAddr": "0x401ca0",
            "decompiledFuncCode": "int64_t sub_401c96()\n{\n    int64_t var_8 = 3;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401ca6",
            "funcStartAddr": "0x401ca6",
            "funcEndAddr": "0x401cb0",
            "decompiledFuncCode": "int64_t sub_401ca6()\n{\n    int64_t var_8 = 4;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401cb6",
            "funcStartAddr": "0x401cb6",
            "funcEndAddr": "0x401cc0",
            "decompiledFuncCode": "int64_t sub_401cb6()\n{\n    int64_t var_8 = 5;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401cc6",
            "funcStartAddr": "0x401cc6",
            "funcEndAddr": "0x401cd0",
            "decompiledFuncCode": "int64_t sub_401cc6()\n{\n    int64_t var_8 = 6;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401cd6",
            "funcStartAddr": "0x401cd6",
            "funcEndAddr": "0x401ce0",
            "decompiledFuncCode": "int64_t sub_401cd6()\n{\n    int64_t var_8 = 7;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401ce6",
            "funcStartAddr": "0x401ce6",
            "funcEndAddr": "0x401cf0",
            "decompiledFuncCode": "int64_t sub_401ce6()\n{\n    int64_t var_8 = 8;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401cf6",
            "funcStartAddr": "0x401cf6",
            "funcEndAddr": "0x401d00",
            "decompiledFuncCode": "int64_t sub_401cf6()\n{\n    int64_t var_8 = 9;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401d06",
            "funcStartAddr": "0x401d06",
            "funcEndAddr": "0x401d10",
            "decompiledFuncCode": "int64_t sub_401d06()\n{\n    int64_t var_8 = 0xa;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401d16",
            "funcStartAddr": "0x401d16",
            "funcEndAddr": "0x401d20",
            "decompiledFuncCode": "int64_t sub_401d16()\n{\n    int64_t var_8 = 0xb;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401d26",
            "funcStartAddr": "0x401d26",
            "funcEndAddr": "0x401d30",
            "decompiledFuncCode": "int64_t sub_401d26()\n{\n    int64_t var_8 = 0xc;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401d36",
            "funcStartAddr": "0x401d36",
            "funcEndAddr": "0x401d40",
            "decompiledFuncCode": "int64_t sub_401d36()\n{\n    int64_t var_8 = 0xd;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401d46",
            "funcStartAddr": "0x401d46",
            "funcEndAddr": "0x401d50",
            "decompiledFuncCode": "int64_t sub_401d46()\n{\n    int64_t var_8 = 0xe;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401d56",
            "funcStartAddr": "0x401d56",
            "funcEndAddr": "0x401d60",
            "decompiledFuncCode": "int64_t sub_401d56()\n{\n    int64_t var_8 = 0xf;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401d66",
            "funcStartAddr": "0x401d66",
            "funcEndAddr": "0x401d70",
            "decompiledFuncCode": "int64_t sub_401d66()\n{\n    int64_t var_8 = 0x10;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401d76",
            "funcStartAddr": "0x401d76",
            "funcEndAddr": "0x401d80",
            "decompiledFuncCode": "int64_t sub_401d76()\n{\n    int64_t var_8 = 0x11;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401d86",
            "funcStartAddr": "0x401d86",
            "funcEndAddr": "0x401d90",
            "decompiledFuncCode": "int64_t sub_401d86()\n{\n    int64_t var_8 = 0x12;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401d96",
            "funcStartAddr": "0x401d96",
            "funcEndAddr": "0x401da0",
            "decompiledFuncCode": "int64_t sub_401d96()\n{\n    int64_t var_8 = 0x13;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401da6",
            "funcStartAddr": "0x401da6",
            "funcEndAddr": "0x401db0",
            "decompiledFuncCode": "int64_t sub_401da6()\n{\n    int64_t var_8 = 0x14;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401db6",
            "funcStartAddr": "0x401db6",
            "funcEndAddr": "0x401dc0",
            "decompiledFuncCode": "int64_t sub_401db6()\n{\n    int64_t var_8 = 0x15;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401dc6",
            "funcStartAddr": "0x401dc6",
            "funcEndAddr": "0x401dd0",
            "decompiledFuncCode": "int64_t sub_401dc6()\n{\n    int64_t var_8 = 0x16;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401dd6",
            "funcStartAddr": "0x401dd6",
            "funcEndAddr": "0x401de0",
            "decompiledFuncCode": "int64_t sub_401dd6()\n{\n    int64_t var_8 = 0x17;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401de6",
            "funcStartAddr": "0x401de6",
            "funcEndAddr": "0x401df0",
            "decompiledFuncCode": "int64_t sub_401de6()\n{\n    int64_t var_8 = 0x18;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401df6",
            "funcStartAddr": "0x401df6",
            "funcEndAddr": "0x401e00",
            "decompiledFuncCode": "int64_t sub_401df6()\n{\n    int64_t var_8 = 0x19;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401e06",
            "funcStartAddr": "0x401e06",
            "funcEndAddr": "0x401e10",
            "decompiledFuncCode": "int64_t sub_401e06()\n{\n    int64_t var_8 = 0x1a;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401e16",
            "funcStartAddr": "0x401e16",
            "funcEndAddr": "0x401e20",
            "decompiledFuncCode": "int64_t sub_401e16()\n{\n    int64_t var_8 = 0x1b;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401e26",
            "funcStartAddr": "0x401e26",
            "funcEndAddr": "0x401e30",
            "decompiledFuncCode": "int64_t sub_401e26()\n{\n    int64_t var_8 = 0x1c;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401e36",
            "funcStartAddr": "0x401e36",
            "funcEndAddr": "0x401e40",
            "decompiledFuncCode": "int64_t sub_401e36()\n{\n    int64_t var_8 = 0x1d;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401e46",
            "funcStartAddr": "0x401e46",
            "funcEndAddr": "0x401e50",
            "decompiledFuncCode": "int64_t sub_401e46()\n{\n    int64_t var_8 = 0x1e;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401e56",
            "funcStartAddr": "0x401e56",
            "funcEndAddr": "0x401e60",
            "decompiledFuncCode": "int64_t sub_401e56()\n{\n    int64_t var_8 = 0x1f;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401e66",
            "funcStartAddr": "0x401e66",
            "funcEndAddr": "0x401e70",
            "decompiledFuncCode": "int64_t sub_401e66()\n{\n    int64_t var_8 = 0x20;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401e76",
            "funcStartAddr": "0x401e76",
            "funcEndAddr": "0x401e80",
            "decompiledFuncCode": "int64_t sub_401e76()\n{\n    int64_t var_8 = 0x21;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401e86",
            "funcStartAddr": "0x401e86",
            "funcEndAddr": "0x401e90",
            "decompiledFuncCode": "int64_t sub_401e86()\n{\n    int64_t var_8 = 0x22;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401e96",
            "funcStartAddr": "0x401e96",
            "funcEndAddr": "0x401ea0",
            "decompiledFuncCode": "int64_t sub_401e96()\n{\n    int64_t var_8 = 0x23;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401ea6",
            "funcStartAddr": "0x401ea6",
            "funcEndAddr": "0x401eb0",
            "decompiledFuncCode": "int64_t sub_401ea6()\n{\n    int64_t var_8 = 0x24;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401eb6",
            "funcStartAddr": "0x401eb6",
            "funcEndAddr": "0x401ec0",
            "decompiledFuncCode": "int64_t sub_401eb6()\n{\n    int64_t var_8 = 0x25;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401ec6",
            "funcStartAddr": "0x401ec6",
            "funcEndAddr": "0x401ed0",
            "decompiledFuncCode": "int64_t sub_401ec6()\n{\n    int64_t var_8 = 0x26;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401ed6",
            "funcStartAddr": "0x401ed6",
            "funcEndAddr": "0x401ee0",
            "decompiledFuncCode": "int64_t sub_401ed6()\n{\n    int64_t var_8 = 0x27;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401ee6",
            "funcStartAddr": "0x401ee6",
            "funcEndAddr": "0x401ef0",
            "decompiledFuncCode": "int64_t sub_401ee6()\n{\n    int64_t var_8 = 0x28;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401ef6",
            "funcStartAddr": "0x401ef6",
            "funcEndAddr": "0x401f00",
            "decompiledFuncCode": "int64_t sub_401ef6()\n{\n    int64_t var_8 = 0x29;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401f06",
            "funcStartAddr": "0x401f06",
            "funcEndAddr": "0x401f10",
            "decompiledFuncCode": "int64_t sub_401f06()\n{\n    int64_t var_8 = 0x2a;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401f16",
            "funcStartAddr": "0x401f16",
            "funcEndAddr": "0x401f20",
            "decompiledFuncCode": "int64_t sub_401f16()\n{\n    int64_t var_8 = 0x2b;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401f26",
            "funcStartAddr": "0x401f26",
            "funcEndAddr": "0x401f30",
            "decompiledFuncCode": "int64_t sub_401f26()\n{\n    int64_t var_8 = 0x2c;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401f36",
            "funcStartAddr": "0x401f36",
            "funcEndAddr": "0x401f40",
            "decompiledFuncCode": "int64_t sub_401f36()\n{\n    int64_t var_8 = 0x2d;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401f46",
            "funcStartAddr": "0x401f46",
            "funcEndAddr": "0x401f50",
            "decompiledFuncCode": "int64_t sub_401f46()\n{\n    int64_t var_8 = 0x2e;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401f56",
            "funcStartAddr": "0x401f56",
            "funcEndAddr": "0x401f60",
            "decompiledFuncCode": "int64_t sub_401f56()\n{\n    int64_t var_8 = 0x2f;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401f66",
            "funcStartAddr": "0x401f66",
            "funcEndAddr": "0x401f70",
            "decompiledFuncCode": "int64_t sub_401f66()\n{\n    int64_t var_8 = 0x30;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401f76",
            "funcStartAddr": "0x401f76",
            "funcEndAddr": "0x401f80",
            "decompiledFuncCode": "int64_t sub_401f76()\n{\n    int64_t var_8 = 0x31;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401f86",
            "funcStartAddr": "0x401f86",
            "funcEndAddr": "0x401f90",
            "decompiledFuncCode": "int64_t sub_401f86()\n{\n    int64_t var_8 = 0x32;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401f96",
            "funcStartAddr": "0x401f96",
            "funcEndAddr": "0x401fa0",
            "decompiledFuncCode": "int64_t sub_401f96()\n{\n    int64_t var_8 = 0x33;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401fa6",
            "funcStartAddr": "0x401fa6",
            "funcEndAddr": "0x401fb0",
            "decompiledFuncCode": "int64_t sub_401fa6()\n{\n    int64_t var_8 = 0x34;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401fb6",
            "funcStartAddr": "0x401fb6",
            "funcEndAddr": "0x401fc0",
            "decompiledFuncCode": "int64_t sub_401fb6()\n{\n    int64_t var_8 = 0x35;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401fc6",
            "funcStartAddr": "0x401fc6",
            "funcEndAddr": "0x401fd0",
            "decompiledFuncCode": "int64_t sub_401fc6()\n{\n    int64_t var_8 = 0x36;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401fd6",
            "funcStartAddr": "0x401fd6",
            "funcEndAddr": "0x401fe0",
            "decompiledFuncCode": "int64_t sub_401fd6()\n{\n    int64_t var_8 = 0x37;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_401fe6",
            "funcStartAddr": "0x401fe6",
            "funcEndAddr": "0x401ff0",
            "decompiledFuncCode": "int64_t sub_401fe6()\n{\n    int64_t var_8 = 0x38;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_402016",
            "funcStartAddr": "0x402016",
            "funcEndAddr": "0x402020",
            "decompiledFuncCode": "int64_t sub_402016()\n{\n    int64_t var_8 = 0x3b;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_402026",
            "funcStartAddr": "0x402026",
            "funcEndAddr": "0x402030",
            "decompiledFuncCode": "int64_t sub_402026()\n{\n    int64_t var_8 = 0x3c;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_402056",
            "funcStartAddr": "0x402056",
            "funcEndAddr": "0x402060",
            "decompiledFuncCode": "int64_t sub_402056()\n{\n    int64_t var_8 = 0x3f;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_402066",
            "funcStartAddr": "0x402066",
            "funcEndAddr": "0x402070",
            "decompiledFuncCode": "int64_t sub_402066()\n{\n    int64_t var_8 = 0x40;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_402096",
            "funcStartAddr": "0x402096",
            "funcEndAddr": "0x4020a0",
            "decompiledFuncCode": "int64_t sub_402096()\n{\n    int64_t var_8 = 0x43;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_4020a6",
            "funcStartAddr": "0x4020a6",
            "funcEndAddr": "0x4020b0",
            "decompiledFuncCode": "int64_t sub_4020a6()\n{\n    int64_t var_8 = 0x44;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_4020d6",
            "funcStartAddr": "0x4020d6",
            "funcEndAddr": "0x4020e0",
            "decompiledFuncCode": "int64_t sub_4020d6()\n{\n    int64_t var_8 = 0x47;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_4020e6",
            "funcStartAddr": "0x4020e6",
            "funcEndAddr": "0x4020f0",
            "decompiledFuncCode": "int64_t sub_4020e6()\n{\n    int64_t var_8 = 0x48;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_402116",
            "funcStartAddr": "0x402116",
            "funcEndAddr": "0x402120",
            "decompiledFuncCode": "int64_t sub_402116()\n{\n    int64_t var_8 = 0x4b;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_402126",
            "funcStartAddr": "0x402126",
            "funcEndAddr": "0x402130",
            "decompiledFuncCode": "int64_t sub_402126()\n{\n    int64_t var_8 = 0x4c;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_402156",
            "funcStartAddr": "0x402156",
            "funcEndAddr": "0x402160",
            "decompiledFuncCode": "int64_t sub_402156()\n{\n    int64_t var_8 = 0x4f;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_402166",
            "funcStartAddr": "0x402166",
            "funcEndAddr": "0x402170",
            "decompiledFuncCode": "int64_t sub_402166()\n{\n    int64_t var_8 = 0x50;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_402196",
            "funcStartAddr": "0x402196",
            "funcEndAddr": "0x4021a0",
            "decompiledFuncCode": "int64_t sub_402196()\n{\n    int64_t var_8 = 0x53;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "sub_4021a6",
            "funcStartAddr": "0x4021a6",
            "funcEndAddr": "0x4021b0",
            "decompiledFuncCode": "int64_t sub_4021a6()\n{\n    int64_t var_8 = 0x54;\n    /* tailcall */\n    return sub_401c50();\n}\n\n"
        },
        {
            "funcName": "main",
            "funcStartAddr": "0x402210",
            "funcEndAddr": "0x402950",
            "decompiledFuncCode": "int32_t main(int32_t argc, char** argv, char** envp)\n{\n    int64_t r15 = 0;\n    char r14 = 0;\n    int64_t r13 = 0;\n    char r12 = 0;\n    uint64_t rbx = argc;\n    char* rdi = *argv;\n    int64_t rcx;\n    int64_t rdx;\n    uint64_t r8;\n    ssize_t r9;\n    rcx = sub_406260(rdi);\n    void var_e8;\n    int32_t var_e0;\n    setlocale(6, &data_40e2ec[0x1b], rdx, rcx, r8, r9, var_e8, var_e0);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_\u2026\");\n    textdomain(\"coreutils\");\n    sub_40bb40(sub_404960);\n    data_6113e0 = 0;\n    data_6113e1 = 0;\n    data_6113e3 = 0;\n    data_6113e2 = 0;\n    data_6113e6 = 0;\n    int64_t var_e0_1 = 0;\n    while (true)\n    {\n        int32_t rax_1 = getopt_long(rbx, argv, \"bdfinrst:vFLPS:T\", &data_40cc00, nullptr);\n        void* var_c8;\n        int32_t var_b0;\n        if (rax_1 == 0xffffffff)\n        {\n            int64_t rax_11 = data_61137c;\n            uint64_t rbx_1 = (rbx - rax_11);\n            char** rbp_1 = &argv[rax_11];\n            if (rbx_1 <= 0)\n            {\n                goto label_40283d;\n            }\n            if (r12 != 0)\n            {\n                if (r13 != 0)\n                {\n                    error(1, 0, dcgettext(nullptr, \"cannot combine --target-director\u2026\", 5));\n                }\n                int64_t rbx_6;\n                char const* const rsi_14;\n                if ((r13 != 0 || (r13 == 0 && rbx_1 == 1)))\n                {\n                    rsi_14 = \"missing destination file operand\u2026\";\n                    rbx_6 = sub_407c30(4, *rbp_1);\n                }\n                if (((r13 == 0 && rbx_1 != 2) && rbx_1 != 1))\n                {\n                    rsi_14 = \"extra operand %s\";\n                    rbx_6 = sub_407c30(4, rbp_1[2]);\n                }\n                if (((r13 != 0 || (r13 == 0 && rbx_1 == 1)) || ((r13 == 0 && rbx_1 != 2) && rbx_1 != 1)))\n                {\n                    error(0, 0, dcgettext(nullptr, rsi_14, 5), rbx_6);\n                    break;\n                }\n                goto label_4025bd;\n            }\n            if (r13 != 0)\n            {\n                goto label_402524;\n            }\n            r13 = &data_40ce0b;\n            if (rbx_1 == 1)\n            {\n                goto label_402524;\n            }\n            char** rax_22 = &rbp_1[(rbx_1 - 1)];\n            char* r13_1 = *rax_22;\n            char* rax_23 = sub_404ca0(r13_1);\n            int64_t rcx_3 = -1;\n            char* rdi_12 = rax_23;\n            while (rcx_3 != 0)\n            {\n                bool cond:3_1 = r12 != *rdi_12;\n                rdi_12 = &rdi_12[1];\n                rcx_3 = (rcx_3 - 1);\n                if ((!cond:3_1))\n                {\n                    break;\n                }\n            }\n            uint32_t var_d0_1 = 1;\n            int64_t rax_26 = (!rcx_3);\n            int64_t rax_27 = (rax_26 - 1);\n            if (rax_26 != 1)\n            {\n                rax_27 = rax_23[(rax_27 - 1)] == 0x2f;\n                var_d0_1 = rax_27;\n            }\n            void** rdx_5 = &var_c8;\n            char rax_30 = (var_d0_1 & 1);\n            int32_t rax_31;\n            if (data_6112f0 == 0)\n            {\n                rax_31 = __lxstat(1, r13_1, rdx_5);\n            }\n            else\n            {\n                rax_31 = __xstat(1, r13_1, rdx_5);\n            }\n            if (rax_31 != 0)\n            {\n                uint64_t r12_1 = *__errno_location();\n                if (r12_1 != 0)\n                {\n                    if ((r12_1 <= 0x28 && (TEST_BITQ(0x11000100004, r12_1))))\n                    {\n                        if (var_d0_1 == 0)\n                        {\n                            goto label_402732;\n                        }\n                        goto label_4027f5;\n                    }\n                    error(1, r12_1, dcgettext(nullptr, \"failed to access %s\", 5), sub_407c30(4, r13_1));\n                label_4027ea:\n                    r12_1 = 0;\n                label_4027f5:\n                    error(1, r12_1, dcgettext(nullptr, \"target %s is not a directory\", 5), sub_407c30(4, r13_1));\n                label_40283d:\n                    error(0, 0, dcgettext(nullptr, \"missing file operand\", 5));\n                    break;\n                }\n            }\n            int32_t rax_38;\n            while (true)\n            {\n                rax_38 = (var_b0 & 0xf000);\n                if (rax_38 == 0x4000 < rax_30)\n                {\n                    break;\n                }\n                if (rax_38 == 0x4000)\n                {\n                    break;\n                }\n            label_402732:\n                if (rbx_1 == 2)\n                {\n                    break;\n                }\n                rbx_1 = sub_407c30(4, *rax_22);\n                error(1, 0, dcgettext(nullptr, \"target %s is not a directory\", 5), rbx_1);\n            }\n            if ((rax_38 == 0x4000 >= rax_30 && rax_38 == 0x4000))\n            {\n                rbx_1 = (rbx_1 - 1);\n                r13 = rbp_1[rbx_1];\n                goto label_402524;\n            }\n            if (rax_38 == 0x4000 < rax_30)\n            {\n                goto label_4027ea;\n            }\n        label_4025bd:\n            rbx_1 = 2;\n            r13 = 0;\n        label_402524:\n            int32_t rax_12 = 0;\n            if (r14 != 0)\n            {\n                rax_12 = sub_404280(dcgettext(nullptr, \"backup type\", 5), r15);\n            }\n            data_6113e8 = rax_12;\n            sub_403ce0(var_e0_1);\n            if ((data_6113e5 != 0 && data_6113e6 == 0))\n            {\n                error(1, 0, dcgettext(nullptr, \"cannot do --relative without --s\u2026\", 5));\n            }\n            if ((data_6113e5 == 0 || (data_6113e5 != 0 && data_6113e6 != 0)))\n            {\n                int32_t r14_1;\n                if (r13 == 0)\n                {\n                    r14_1 = sub_402a30(*rbp_1, rbp_1[1]);\n                }\n                else\n                {\n                    if ((rbx_1 != 1 && (data_6113e2 != 0 && (data_6113e6 == 0 && data_6113e8 != 3))))\n                    {\n                        int64_t* rax_13 = sub_4057d0(0x3d, nullptr, 0x406190, 0x4061d0, 0x406240);\n                        data_6113d8 = rax_13;\n                        if (rax_13 == 0)\n                        {\n                            sub_408ca0();\n                            /* no return */\n                        }\n                    }\n                    r14_1 = 1;\n                    void* r15_1 = &rbp_1[((rbx_1 - 1) + 1)];\n                    do\n                    {\n                        char* rdi_4 = *rbp_1;\n                        rbp_1 = &rbp_1[1];\n                        char* rax_16 = sub_404e40(r13, sub_404ca0(rdi_4), &var_c8);\n                        sub_404d30(var_c8);\n                        r14_1 = (r14_1 & sub_402a30(rbp_1[-1], rax_16));\n                        free(rax_16);\n                    } while (rbp_1 != r15_1);\n                }\n                return (r14_1 ^ 1);\n            }\n        }\n        else\n        {\n            bool cond:0_1 = rax_1 <= 0x62;\n            if (rax_1 == 0x62)\n            {\n                int64_t rax_9 = data_6115a0;\n                r14 = 1;\n                if (rax_9 == 0)\n                {\n                    continue;\n                }\n                else\n                {\n                    r15 = rax_9;\n                    continue;\n                }\n            }\n            else if ((!cond:0_1))\n            {\n                bool cond:2_1 = rax_1 <= 0x6e;\n                if (rax_1 == 0x6e)\n                {\n                    data_6112f0 = 0;\n                    continue;\n                }\n                else\n                {\n                    if (cond:2_1)\n                    {\n                        if (rax_1 == 0x66)\n                        {\n                            data_6113e2 = 1;\n                            data_6113e3 = 0;\n                            continue;\n                        }\n                        else\n                        {\n                            if (rax_1 == 0x69)\n                            {\n                                data_6113e2 = 0;\n                                data_6113e3 = 1;\n                                continue;\n                            }\n                            if ((rax_1 != 0x69 && rax_1 != 0x64))\n                            {\n                                break;\n                            }\n                        }\n                        goto label_402461;\n                    }\n                    bool cond:5_1 = rax_1 <= 0x73;\n                    if (rax_1 == 0x73)\n                    {\n                        data_6113e6 = 1;\n                        continue;\n                    }\n                    else if (cond:5_1)\n                    {\n                        if (rax_1 != 0x72)\n                        {\n                            break;\n                        }\n                        data_6113e5 = 1;\n                        continue;\n                    }\n                    else if (rax_1 != 0x74)\n                    {\n                        if (rax_1 != 0x76)\n                        {\n                            break;\n                        }\n                        data_6113e1 = 1;\n                        continue;\n                    }\n                    else\n                    {\n                        if (r13 != 0)\n                        {\n                            goto label_402943;\n                        }\n                        if (__xstat(1, data_6115a0, &var_c8) == 0)\n                        {\n                            r13 = data_6115a0;\n                            if ((var_b0 & 0xf000) == 0x4000)\n                            {\n                                continue;\n                            }\n                            else\n                            {\n                                rbx = sub_407c30(4, r13);\n                                rax_1 = error(1, 0, dcgettext(nullptr, \"target %s is not a directory\", 5), rbx);\n                            }\n                            goto label_402370;\n                        }\n                    }\n                }\n            }\n            else\n            {\n            label_402370:\n                bool cond:1_1 = rax_1 <= 0x4c;\n                if (rax_1 == 0x4c)\n                {\n                    data_6113e4 = 1;\n                    continue;\n                }\n                else if (cond:1_1)\n                {\n                    if (rax_1 == 0xffffff7e)\n                    {\n                        sub_4032b0(0);\n                        /* no return */\n                    }\n                    if (rax_1 != 0x46)\n                    {\n                        if (rax_1 == 0xffffff7d)\n                        {\n                            int64_t var_f8 = 0;\n                            sub_408910(stdout, &data_40bc39, \"GNU coreutils\", data_6112f8);\n                            exit(0);\n                            /* no return */\n                        }\n                        break;\n                    }\n                }\n                else if (rax_1 == 0x53)\n                {\n                    r14 = 1;\n                    var_e0_1 = data_6115a0;\n                    continue;\n                }\n                else if (rax_1 == 0x54)\n                {\n                    r12 = 1;\n                    continue;\n                }\n                else\n                {\n                    if (rax_1 != 0x50)\n                    {\n                        break;\n                    }\n                    data_6113e4 = 0;\n                    continue;\n                }\n            label_402461:\n                data_6113e0 = 1;\n                continue;\n            }\n        }\n        error(1, *__errno_location(), dcgettext(nullptr, \"failed to access %s\", 5), sub_407c30(4, data_6115a0));\n    label_402943:\n        void (* rdx_16)();\n        int64_t rsi_18;\n        int64_t rdi_13;\n        rdx_16 = error(1, 0, dcgettext(nullptr, \"multiple target directories spec\u2026\", 5));\n        /* tailcall */\n        return _start(rdi_13, rsi_18, rdx_16);\n    }\n    sub_4032b0(1);\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "_start",
            "funcStartAddr": "0x402950",
            "funcEndAddr": "0x40297a",
            "decompiledFuncCode": "int64_t _start(int64_t arg1, int64_t arg2, void (* arg3)()) __noreturn\n{\n    int64_t rax;\n    int64_t var_8 = rax;\n    __libc_start_main(main, __return_addr, &arg_8, init, fini, arg3, &var_8);\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_40297b",
            "funcStartAddr": "0x40297b",
            "funcEndAddr": "0x40299a",
            "decompiledFuncCode": "void sub_40297b()\n{\n    return;\n}\n\n"
        },
        {
            "funcName": "sub_40299a",
            "funcStartAddr": "0x40299a",
            "funcEndAddr": "0x4029d1",
            "decompiledFuncCode": "int64_t sub_40299a()\n{\n    int64_t rax;\n    int64_t rdx;\n    rdx = HIGHD(0);\n    rax = LOWD(0);\n    return (COMBINE(rdx, rax) / 2);\n}\n\n"
        },
        {
            "funcName": "sub_4029d1",
            "funcStartAddr": "0x4029d1",
            "funcEndAddr": "0x402a28",
            "decompiledFuncCode": "void sub_4029d1()\n{\n    if (data_6113c8 != 0)\n    {\n        return;\n    }\n    while (true)\n    {\n        int64_t rax_1 = data_6113d0;\n        if (rax_1 >= 0)\n        {\n            break;\n        }\n        data_6113d0 = (rax_1 + 1);\n        *(0x610e40 + ((rax_1 + 1) << 3))();\n    }\n    sub_40297b();\n    data_6113c8 = 1;\n}\n\n"
        },
        {
            "funcName": "thunk_402a28",
            "funcStartAddr": "0x402a28",
            "funcEndAddr": "0x402a2d",
            "decompiledFuncCode": "int64_t j_sub_40299a()\n{\n    /* tailcall */\n    return sub_40299a();\n}\n\n"
        },
        {
            "funcName": "sub_402a30",
            "funcStartAddr": "0x402a30",
            "funcEndAddr": "0x4032ac",
            "decompiledFuncCode": "uint64_t sub_402a30(char* arg1, char* arg2)\n{\n    char* r12 = arg1;\n    uint32_t rbx = data_6113e6;\n    int64_t var_158;\n    char* rbx_3;\n    char* rsi_16;\n    char r15_1;\n    if (rbx == 0)\n    {\n        int64_t* rdx_1 = &var_158;\n        int32_t rax_1;\n        int32_t rax_20;\n        if (data_6113e4 == 0)\n        {\n            rax_20 = __lxstat(1, arg1, rdx_1) != 0;\n        }\n        else\n        {\n            rax_1 = __xstat(1, arg1, rdx_1) != 0;\n        }\n        if (((data_6113e4 == 0 && rax_20 != 0) || (data_6113e4 != 0 && rax_1 != 0)))\n        {\n            error(0, *__errno_location(), dcgettext(nullptr, \"failed to access %s\", 5), sub_407c30(4, r12));\n        }\n        if (((data_6113e4 == 0 && rax_20 == 0) || (data_6113e4 != 0 && rax_1 == 0)))\n        {\n            int32_t var_140;\n            if ((var_140 & 0xf000) != 0x4000)\n            {\n                goto label_402a92;\n            }\n            r15_1 = data_6113e0;\n            if (r15_1 != 0)\n            {\n                goto label_402a95;\n            }\n            rsi_16 = \"%s: hard link not allowed for di\u2026\";\n            rbx_3 = sub_407d00(0, 3, r12);\n        label_402f40:\n            rbx = 0;\n            error(0, 0, dcgettext(nullptr, rsi_16, 5), rbx_3);\n        }\n    }\n    else\n    {\n    label_402a92:\n        r15_1 = 0;\n    label_402a95:\n        char r13_1 = data_6113e2;\n        char* r13_2;\n        if (r13_1 != 0)\n        {\n        label_402abf:\n            int64_t var_c8;\n            int32_t rax_4 = __lxstat(1, arg2, &var_c8);\n            if (rax_4 == 0)\n            {\n                int64_t rdi_2 = data_6113d8;\n                if (rdi_2 == 0)\n                {\n                    goto label_402c2c;\n                }\n                char* rax_52;\n                char* rbx_4;\n                char* r8_5;\n                if (sub_404e00(rdi_2, arg2, &var_c8) != 0)\n                {\n                    char* rax_69 = sub_407b50(1, 4, r12);\n                    rbx_4 = sub_407b50(0, 4, arg2);\n                    rax_52 = dcgettext(nullptr, \"will not overwrite just-created \u2026\", 5);\n                    r8_5 = rax_69;\n                label_402ffc:\n                    rbx = 0;\n                    error(0, 0, rax_52, rbx_4, r8_5);\n                }\n                else\n                {\n                    r13_1 = data_6113e2;\n                label_402c2c:\n                    if (r13_1 != 0)\n                    {\n                        if (data_6113e8 != 0)\n                        {\n                            if (data_6113e6 != 0)\n                            {\n                                goto label_402c7c;\n                            }\n                            goto label_402f73;\n                        }\n                        if (data_6113e6 == 0)\n                        {\n                            goto label_402f73;\n                        }\n                        if (__xstat(1, r12, &var_158) != 0)\n                        {\n                            goto label_402c7c;\n                        }\n                        goto label_402f73;\n                    }\n                    if (data_6113e6 == 0)\n                    {\n                        if (data_6113e8 == 0)\n                        {\n                            goto label_402c7c;\n                        }\n                    label_402f73:\n                        int64_t var_150;\n                        int64_t var_c0;\n                        if (var_150 != var_c0)\n                        {\n                            goto label_402c7c;\n                        }\n                        if (var_158 == var_c8)\n                        {\n                            int64_t var_148;\n                            if (var_148 == 1)\n                            {\n                            label_402fb9:\n                                char* rax_50 = sub_407b50(1, 4, arg2);\n                                rbx_4 = sub_407b50(0, 4, r12);\n                                rax_52 = dcgettext(nullptr, \"%s and %s are the same file\", 5);\n                                r8_5 = rax_50;\n                                goto label_402ffc;\n                            }\n                            if (sub_4080f0(r12, arg2) != 0)\n                            {\n                                goto label_402fb9;\n                            }\n                        }\n                        goto label_402c7c;\n                    }\n                label_402c7c:\n                    int32_t var_b0;\n                    if ((var_b0 & 0xf000) == 0x4000)\n                    {\n                        rsi_16 = \"%s: cannot overwrite directory\";\n                        rbx_3 = sub_407d00(0, 3, arg2);\n                        goto label_402f40;\n                    }\n                    rbx = data_6113e3;\n                    if (rbx == 0)\n                    {\n                        goto label_402c96;\n                    }\n                    int64_t r13_3 = data_611410;\n                    __fprintf_chk(stderr, 1, dcgettext(nullptr, \"%s: replace %s? \", 5), r13_3, sub_407c30(4, arg2));\n                    if (sub_408d10() != 0)\n                    {\n                        data_6113e2 = 1;\n                    label_402c96:\n                        int32_t rsi_6 = data_6113e8;\n                        if (rsi_6 == 0)\n                        {\n                            goto label_402ae6;\n                        }\n                        char* rax_18 = sub_404240(arg2, rsi_6);\n                        r13_2 = rax_18;\n                        if (rename(arg2, rax_18) == 0)\n                        {\n                            rbx = r13_2 != 0;\n                            goto label_402aeb;\n                        }\n                        int32_t rbx_6 = *__errno_location();\n                        free(r13_2);\n                        if (rbx_6 == 2)\n                        {\n                            goto label_402ae6;\n                        }\n                        rbx = 0;\n                        error(0, rbx_6, dcgettext(nullptr, \"cannot backup %s\", 5), sub_407c30(4, arg2));\n                    }\n                }\n            }\n            else\n            {\n                int32_t* rax_5 = __errno_location();\n                if (*rax_5 == 2)\n                {\n                    if (r13_1 != 0)\n                    {\n                        goto label_402ae6;\n                    }\n                    if ((rbx == 0 && data_6113e8 != 0))\n                    {\n                        goto label_402ae6;\n                    }\n                    if (rax_4 != 0)\n                    {\n                        goto label_402ae6;\n                    }\n                    goto label_402c7c;\n                }\n                rbx = 0;\n                error(0, *rax_5, dcgettext(nullptr, \"failed to access %s\", 5), sub_407c30(4, arg2), rax_5);\n            }\n        }\n        else\n        {\n            if (data_6113e3 != 0)\n            {\n                goto label_402abf;\n            }\n            if (data_6113e8 != 0)\n            {\n                goto label_402abf;\n            }\n        label_402ae6:\n            rbx = 0;\n            r13_2 = nullptr;\n        label_402aeb:\n            char* r14_2 = nullptr;\n            if (data_6113e5 != 0)\n            {\n                char* rax_38 = sub_404bc0(arg2);\n                void* rax_39 = sub_4042d0(rax_38, 2);\n                char* rax_40 = sub_4042d0(r12, 2);\n                char rax_42;\n                if ((rax_39 != 0 && rax_40 != 0))\n                {\n                    char* rax_41 = sub_408a50(0x1000);\n                    r14_2 = rax_41;\n                    rax_42 = sub_403a10(rax_40, rax_39, rax_41, 0x1000);\n                    if (rax_42 == 0)\n                    {\n                        free(r14_2);\n                    }\n                }\n                if (((((rax_39 != 0 && rax_40 != 0) && rax_42 == 0) || rax_39 == 0) || (rax_39 != 0 && rax_40 == 0)))\n                {\n                    free(rax_38);\n                    free(rax_39);\n                    free(rax_40);\n                label_403081:\n                    char* rax_58 = sub_408c80(r12);\n                    r12 = rax_58;\n                    r14_2 = rax_58;\n                }\n                if (((rax_39 != 0 && rax_40 != 0) && rax_42 != 0))\n                {\n                    free(rax_38);\n                    free(rax_39);\n                    free(rax_40);\n                    if (r14_2 == 0)\n                    {\n                        goto label_403081;\n                    }\n                    r12 = r14_2;\n                }\n            }\n            rbx = (rbx | data_6113e2);\n            uint32_t r9_1 = rbx;\n            if (data_6113e6 != 0)\n            {\n                rbx = ((!sub_403890(r12, 0xffffff9c, arg2, r9_1)) >> 0x1f);\n            }\n            else\n            {\n                int32_t r8_1;\n                r8_1 = data_6113e4 != 0;\n                rbx = ((!sub_403750(0xffffff9c, r12, 0xffffff9c, arg2, (r8_1 << 0xa), r9_1)) >> 0x1f);\n            }\n            if (rbx == 0)\n            {\n                char* rax_25 = sub_407b50(1, 4, r12);\n                char* rax_26 = sub_407b50(0, 4, arg2);\n                int32_t* rax_27 = __errno_location();\n                char* rdx_13;\n                if (data_6113e6 == 0)\n                {\n                    int32_t rax_55 = *rax_27;\n                    if ((rax_55 == 0x1f && r15_1 == 0))\n                    {\n                        rdx_13 = dcgettext(nullptr, \"failed to create hard link to %.\u2026\", 5);\n                    }\n                    if (((rax_55 == 0x1f && r15_1 != 0) || (((rax_55 != 0x1f && rax_55 != 0x7a) && rax_55 != 0x11) && (rax_55 & 0xfffffffd) != 0x1c)))\n                    {\n                        rdx_13 = dcgettext(nullptr, \"failed to create hard link %s =>\u2026\", 5);\n                    }\n                    if (((rax_55 == 0x7a || rax_55 == 0x11) || (((rax_55 != 0x1f && rax_55 != 0x7a) && rax_55 != 0x11) && (rax_55 & 0xfffffffd) == 0x1c)))\n                    {\n                        rdx_13 = dcgettext(nullptr, \"failed to create hard link %s\", 5);\n                    }\n                }\n                else\n                {\n                    if ((*rax_27 == 0x24 || (*rax_27 != 0x24 && *r12 == 0)))\n                    {\n                        rdx_13 = dcgettext(nullptr, \"failed to create symbolic link %\u2026\", 5);\n                    }\n                    if ((*rax_27 != 0x24 && *r12 != 0))\n                    {\n                        rdx_13 = dcgettext(nullptr, \"failed to create symbolic link %\u2026\", 5);\n                    }\n                }\n                error(0, *rax_27, rdx_13, rax_26, rax_25);\n                if ((r13_2 != 0 && rename(r13_2, arg2) != 0))\n                {\n                    error(0, *rax_27, dcgettext(nullptr, \"cannot un-backup %s\", 5), sub_407c30(4, arg2));\n                }\n            }\n            else\n            {\n                if (data_6113e6 == 0)\n                {\n                    sub_404d70(data_6113d8, arg2, &var_158);\n                }\n                if (data_6113e1 != 0)\n                {\n                    if (r13_2 != 0)\n                    {\n                        __printf_chk(1, \"%s ~ \", sub_407c30(4, r13_2));\n                    }\n                    int32_t r12_1 = 0x3d;\n                    char* rax_10 = sub_407b50(1, 4, r12);\n                    if (data_6113e6 != 0)\n                    {\n                        r12_1 = 0x2d;\n                    }\n                    __printf_chk(1, \"%s %c> %s\\n\", sub_407b50(0, 4, arg2), r12_1, rax_10);\n                }\n            }\n            free(r13_2);\n            free(r14_2);\n        }\n    }\n    return rbx;\n}\n\n"
        },
        {
            "funcName": "sub_4032b0",
            "funcStartAddr": "0x4032b0",
            "funcEndAddr": "0x40369d",
            "decompiledFuncCode": "int64_t sub_4032b0(int32_t arg1) __noreturn\n{\n    int64_t rbp = data_611410;\n    if (arg1 != 0)\n    {\n        __fprintf_chk(stderr, 1, dcgettext(nullptr, \"Try '%s --help' for more informa\u2026\", 5), rbp);\n    }\n    else\n    {\n        __printf_chk(1, dcgettext(nullptr, \"Usage: %s [OPTION]... [-T] TARGE\u2026\", 5), rbp, rbp, rbp, rbp);\n        fputs_unlocked(dcgettext(nullptr, \"In the 1st form, create a link t\u2026\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"\\nMandatory arguments to long op\u2026\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"      --backup[=CONTROL]      ma\u2026\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"  -i, --interactive           pr\u2026\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"  -S, --suffix=SUFFIX         ov\u2026\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"      --help     display this he\u2026\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"      --version  output version \u2026\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"\\nThe backup suffix is '~', unle\u2026\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"  none, off       never make bac\u2026\", 5), stdout);\n        __printf_chk(1, dcgettext(nullptr, \"\\nUsing -s ignores -L and -P.  O\u2026\", 5), &data_40bc3c);\n        void* const var_88 = &data_40bc3f;\n        void* const* rax_15 = &var_88;\n        void* const var_78_1 = \"coreutils\";\n        void* const var_70_1 = \"Multi-call invocation\";\n        void* const var_68_1 = \"sha224sum\";\n        void* const var_60_1 = \"sha2 utilities\";\n        void* const var_58_1 = \"sha256sum\";\n        void* const var_50_1 = \"sha2 utilities\";\n        void* const var_48_1 = \"sha384sum\";\n        void* const var_40_1 = \"sha2 utilities\";\n        void* const var_38_1 = \"sha512sum\";\n        void* const var_30_1 = \"sha2 utilities\";\n        int64_t var_28_1 = 0;\n        int64_t var_20_1 = 0;\n        bool c_1;\n        bool z_1;\n        do\n        {\n            rax_15 = &rax_15[2];\n            void* const rdi_11 = *rax_15;\n            c_1 = false;\n            z_1 = (rdi_11 & rdi_11) == 0;\n            if (z_1)\n            {\n                break;\n            }\n            void* const rsi_12 = &data_40bc39;\n            int64_t rcx_2 = 3;\n            while (rcx_2 != 0)\n            {\n                char temp0_1 = *rsi_12;\n                char temp1_1 = *rdi_11;\n                c_1 = temp0_1 < temp1_1;\n                z_1 = temp0_1 == temp1_1;\n                rsi_12 = (rsi_12 + 1);\n                rdi_11 = (rdi_11 + 1);\n                rcx_2 = (rcx_2 - 1);\n                if ((!z_1))\n                {\n                    break;\n                }\n            }\n        } while ((((!z_1) && (!c_1)) - 0) != 0);\n        void* const rbp_1 = rax_15[1];\n        char* rax_26;\n        int32_t rax_27;\n        void* const r12_1;\n        if (rbp_1 == 0)\n        {\n            int64_t rcx_5;\n            int64_t rdx_5;\n            uint64_t r8_3;\n            ssize_t r9_3;\n            rcx_5 = __printf_chk(1, dcgettext(nullptr, \"\\n%s online help: <%s>\\n\", 5), \"GNU coreutils\", \"https://www.gnu.org/software/cor\u2026\");\n            rax_26 = setlocale(5, nullptr, rdx_5, rcx_5, r8_3, r9_3, var_88, \"test invocation\");\n            if (rax_26 != 0)\n            {\n                rax_27 = strncmp(rax_26, &data_40bcc3, 3);\n                if (rax_27 != 0)\n                {\n                    rbp_1 = &data_40bc39;\n                }\n            }\n            if ((rax_26 == 0 || (rax_26 != 0 && rax_27 == 0)))\n            {\n                rbp_1 = &data_40bc39;\n                r12_1 = \" invocation\";\n                __printf_chk(1, dcgettext(nullptr, \"Full documentation at: <%s%s>\\n\", 5), \"https://www.gnu.org/software/cor\u2026\", &data_40bc39);\n            }\n        }\n        else\n        {\n            int64_t rcx_3;\n            int64_t rdx_3;\n            uint64_t r8_2;\n            ssize_t r9_2;\n            rcx_3 = __printf_chk(1, dcgettext(nullptr, \"\\n%s online help: <%s>\\n\", 5), \"GNU coreutils\", \"https://www.gnu.org/software/cor\u2026\");\n            char* rax_18 = setlocale(5, nullptr, rdx_3, rcx_3, r8_2, r9_2, var_88, \"test invocation\");\n            if (rax_18 == 0)\n            {\n                goto label_403590;\n            }\n            if (strncmp(rax_18, &data_40bcc3, 3) == 0)\n            {\n                goto label_403590;\n            }\n        }\n        if ((((rbp_1 == 0 && rax_26 != 0) && rax_27 != 0) || rbp_1 != 0))\n        {\n            __printf_chk(1, dcgettext(nullptr, \"Report %s translation bugs to <h\u2026\", 5), &data_40bc39);\n        label_403590:\n            r12_1 = \" invocation\";\n            __printf_chk(1, dcgettext(nullptr, \"Full documentation at: <%s%s>\\n\", 5), \"https://www.gnu.org/software/cor\u2026\", &data_40bc39);\n            if (rbp_1 != &data_40bc39)\n            {\n                r12_1 = &data_40e2ec[0x1b];\n            }\n        }\n        __printf_chk(1, dcgettext(nullptr, \"or available locally via: info '\u2026\", 5), rbp_1, r12_1);\n    }\n    exit(arg1);\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_4036a0",
            "funcStartAddr": "0x4036a0",
            "funcEndAddr": "0x4036b8",
            "decompiledFuncCode": "int64_t sub_4036a0(int64_t arg1, int32_t* arg2)\n{\n    /* tailcall */\n    return linkat(*arg2, *(arg2 + 8), arg2[4], arg1, arg2[5]);\n}\n\n"
        },
        {
            "funcName": "sub_4036c0",
            "funcStartAddr": "0x4036c0",
            "funcEndAddr": "0x403724",
            "decompiledFuncCode": "int64_t sub_4036c0(char* arg1, int64_t arg2)\n{\n    int64_t rbx = arg2;\n    void* rax_1 = (sub_404ca0(arg1) - arg1);\n    void* rdi = (rax_1 + 9);\n    int64_t rax_2;\n    int64_t rax_4;\n    if (rdi > 0x100)\n    {\n        rax_2 = malloc(rdi);\n        rbx = rax_2;\n        if (rax_2 == 0)\n        {\n            rax_4 = 0;\n        }\n    }\n    if ((rdi <= 0x100 || (rdi > 0x100 && rax_2 != 0)))\n    {\n        int64_t* rax_3 = mempcpy(rbx, arg1, rax_1);\n        *rax_3 = 0x5858585858587543;\n        rax_3[1] = 0;\n        rax_4 = rbx;\n    }\n    return rax_4;\n}\n\n"
        },
        {
            "funcName": "sub_403730",
            "funcStartAddr": "0x403730",
            "funcEndAddr": "0x403741",
            "decompiledFuncCode": "int64_t sub_403730(int64_t arg1, int64_t* arg2)\n{\n    /* tailcall */\n    return symlinkat(*arg2, arg2[1], arg1);\n}\n\n"
        },
        {
            "funcName": "sub_403750",
            "funcStartAddr": "0x403750",
            "funcEndAddr": "0x403885",
            "decompiledFuncCode": "uint64_t sub_403750(int32_t arg1, int64_t arg2, int32_t arg3, char* arg4, \n    int32_t arg5, int32_t arg6)\n{\n    int32_t rax = linkat();\n    int32_t rbx = rax;\n    if ((arg6 == 1 && rax != 0))\n    {\n        int32_t* rax_1 = __errno_location();\n        if (*rax_1 == 0x11)\n        {\n            int32_t var_160;\n            var_160 = rax_1;\n            void var_138;\n            char* rax_3 = sub_4036c0(arg4, &var_138);\n            if (rax_3 == 0)\n            {\n                rbx = -1;\n            }\n            else\n            {\n                int32_t var_158 = arg1;\n                int64_t var_150_1 = arg2;\n                int32_t var_148_1 = arg3;\n                int32_t var_144_1 = arg5;\n                int32_t* r9_1 = var_160;\n                int32_t r12_1;\n                if (sub_4082d0(rax_3, 0, &var_158, 0x4036a0, 6) != 0)\n                {\n                    r12_1 = *r9_1;\n                }\n                else\n                {\n                    var_160 = r9_1;\n                    int32_t rax_5 = renameat(arg3, rax_3, arg3, arg4);\n                    int32_t* r9_2 = var_160;\n                    r12_1 = rax_5;\n                    if (rax_5 != 0)\n                    {\n                        r12_1 = *r9_2;\n                    }\n                    var_160 = r9_2;\n                    unlinkat(arg3, rax_3, 0);\n                    r9_1 = var_160;\n                }\n                if (rax_3 != &var_138)\n                {\n                    var_160 = r9_1;\n                    free(rax_3);\n                    r9_1 = var_160;\n                }\n                rbx = 1;\n                if (r12_1 != 0)\n                {\n                    *r9_1 = r12_1;\n                    rbx = -1;\n                }\n            }\n        }\n    }\n    return rbx;\n}\n\n"
        },
        {
            "funcName": "sub_403890",
            "funcStartAddr": "0x403890",
            "funcEndAddr": "0x403990",
            "decompiledFuncCode": "uint64_t sub_403890(int64_t arg1, int32_t arg2, char* arg3, char arg4)\n{\n    int32_t rax = symlinkat();\n    int32_t rbx = rax;\n    if ((arg4 == 1 && rax != 0))\n    {\n        int32_t* rax_1 = __errno_location();\n        if (*rax_1 == 0x11)\n        {\n            void var_138;\n            char* rax_3 = sub_4036c0(arg3, &var_138);\n            if (rax_3 == 0)\n            {\n                rbx = -1;\n            }\n            else\n            {\n                int64_t var_148 = arg1;\n                int32_t var_140_1 = arg2;\n                int32_t rax_4 = sub_4082d0(rax_3, 0, &var_148, 0x403730, 6);\n                int32_t rax_5;\n                int32_t r12_1;\n                if (rax_4 == 0)\n                {\n                    rax_5 = renameat(arg2, rax_3, arg2, arg3);\n                    if (rax_5 != 0)\n                    {\n                        r12_1 = *rax_1;\n                        unlinkat(arg2, rax_3, 0);\n                    }\n                    else if (rax_3 != &var_138)\n                    {\n                        free(rax_3);\n                    }\n                }\n                else\n                {\n                    r12_1 = *rax_1;\n                }\n                if (((rax_4 != 0 || (rax_4 == 0 && rax_5 != 0)) && rax_3 != &var_138))\n                {\n                    free(rax_3);\n                }\n                if ((((rax_4 != 0 || (rax_4 == 0 && rax_5 != 0)) && r12_1 == 0) || (rax_4 == 0 && rax_5 == 0)))\n                {\n                    rbx = 1;\n                }\n                if (((rax_4 != 0 || (rax_4 == 0 && rax_5 != 0)) && r12_1 != 0))\n                {\n                    *rax_1 = r12_1;\n                    rbx = -1;\n                }\n            }\n        }\n    }\n    return rbx;\n}\n\n"
        },
        {
            "funcName": "sub_403990",
            "funcStartAddr": "0x403990",
            "funcEndAddr": "0x403a07",
            "decompiledFuncCode": "int64_t sub_403990(char* arg1, int64_t* arg2, int64_t* arg3)\n{\n    int64_t r13 = *arg2;\n    if (r13 == 0)\n    {\n        fputs_unlocked(arg1, stdout);\n        return 0;\n    }\n    uint64_t rax = strlen(arg1);\n    if (*arg3 > rax)\n    {\n        memcpy(r13, arg1, (rax + 1));\n        *arg2 = (*arg2 + rax);\n        *arg3 = (*arg3 - rax);\n        return 0;\n    }\n    return 1;\n}\n\n"
        },
        {
            "funcName": "sub_403a10",
            "funcStartAddr": "0x403a10",
            "funcEndAddr": "0x403c07",
            "decompiledFuncCode": "uint64_t sub_403a10(char* arg1, char* arg2, int64_t arg3, int64_t arg4)\n{\n    bool r8 = arg2[1];\n    char r9 = arg1[1];\n    int64_t var_28 = arg4;\n    int64_t var_20 = arg3;\n    arg4 = r8 == 0x2f;\n    arg3 = r9 == 0x2f;\n    uint64_t rax = 0;\n    if (arg4 == arg3)\n    {\n        char rdx = *arg1;\n        bool r10_1 = *arg2;\n        arg4 = rdx == 0;\n        if (r10_1 != 0)\n        {\n            rax = r10_1 != rdx;\n            rax = (rax | arg4);\n            if (rax != 0)\n            {\n                rax = 0;\n            }\n            else\n            {\n                int64_t rcx = 2;\n                int32_t rdx_1 = 0;\n                while (true)\n                {\n                    int32_t r11_2 = (rcx - 1);\n                    if (r10_1 == 0x2f)\n                    {\n                        rdx_1 = r11_2;\n                    }\n                    r10_1 = r9 == 0;\n                    if (r8 == 0)\n                    {\n                        if (r9 == 0x2f)\n                        {\n                        label_403bf0:\n                            rdx_1 = r11_2;\n                        }\n                        else if (r10_1 != 0)\n                        {\n                            goto label_403bf0;\n                        }\n                    }\n                    else\n                    {\n                        if ((r8 == r9 && r10_1 == 0))\n                        {\n                            bool r11_1 = arg2[rcx];\n                            r9 = arg1[rcx];\n                            r10_1 = r8;\n                            rcx = (rcx + 1);\n                            r8 = r11_1;\n                            continue;\n                        }\n                        if ((r8 == 0x2f && r10_1 != 0))\n                        {\n                            goto label_403bf0;\n                        }\n                    }\n                    if ((((r8 == 0 && r9 != 0x2f) || r8 != 0) && rdx_1 == 0))\n                    {\n                        break;\n                    }\n                    int64_t rdx_2 = rdx_1;\n                    void* rbp_1 = &arg2[rdx_2];\n                    void* rbx_1 = &arg1[rdx_2];\n                    char rax_1 = *rbp_1;\n                    if (rax_1 == 0x2f)\n                    {\n                        rax_1 = *(rbp_1 + 1);\n                        rbp_1 = (rbp_1 + 1);\n                    }\n                    int64_t rdx_3;\n                    rdx_3 = *rbx_1 == 0x2f;\n                    void* rbx_2 = (rbx_1 + rdx_3);\n                    int32_t r12_1;\n                    if (rax_1 != 0)\n                    {\n                        r12_1 = sub_403990(&data_40ce0a, &var_20, &var_28);\n                        char rax_5 = *rbp_1;\n                        if (rax_5 != 0)\n                        {\n                            do\n                            {\n                                if (rax_5 == 0x2f)\n                                {\n                                    r12_1 = (r12_1 | sub_403990(&data_40ce09, &var_20, &var_28));\n                                }\n                                rbp_1 = (rbp_1 + 1);\n                                rax_5 = *rbp_1;\n                            } while (rax_5 != 0);\n                        }\n                        if (*rbx_2 != 0)\n                        {\n                            r12_1 = (r12_1 | (sub_403990(\"/\", &var_20, &var_28) | sub_403990(rbx_2, &var_20, &var_28)));\n                        }\n                    }\n                    else\n                    {\n                        int64_t* rsi = &var_20;\n                        int64_t* rdx_4 = &var_28;\n                        if (*rbx_2 == 0)\n                        {\n                            rbx_2 = &data_40ce0b;\n                        }\n                        r12_1 = sub_403990(rbx_2, rsi, rdx_4);\n                    }\n                    if (r12_1 != 0)\n                    {\n                        error(0, 0x24, \"%s\", dcgettext(nullptr, \"generating relative path\", 5));\n                    }\n                    rax = (r12_1 ^ 1);\n                    break;\n                }\n            }\n        }\n    }\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_403c10",
            "funcStartAddr": "0x403c10",
            "funcEndAddr": "0x403cde",
            "decompiledFuncCode": "uint64_t sub_403c10(char* arg1, int64_t arg2)\n{\n    char* rbx = arg1;\n    char* rax = sub_404ca0(arg1);\n    uint64_t rax_1 = sub_404d00(rax);\n    if (rax_1 > 0xe)\n    {\n        int16_t r14_1 = *rax;\n        uint64_t r12_1 = rax_1;\n        *rax = 0x2e;\n        int32_t* rax_2 = __errno_location();\n        *rax_2 = 0;\n        rax_1 = pathconf(rbx, 3);\n        uint64_t rdx_1;\n        if (rax_1 < 0)\n        {\n            rdx_1 = 0xff;\n        }\n        if ((rax_1 >= 0 || (rax_1 < 0 && *rax_2 == 0)))\n        {\n            rdx_1 = rax_1;\n        }\n        *rax = r14_1;\n        if (r12_1 > rdx_1)\n        {\n            void* rsi = &rbx[arg2];\n            int64_t rax_4 = (rsi - rax);\n            if (rax_4 >= rdx_1)\n            {\n                rsi = &rax[(rdx_1 - 1)];\n            }\n            else\n            {\n                rdx_1 = (rax_4 + 1);\n            }\n            *rsi = 0x7e;\n            rax[rdx_1] = 0;\n            return rax_4;\n        }\n    }\n    return rax_1;\n}\n\n"
        },
        {
            "funcName": "sub_403ce0",
            "funcStartAddr": "0x403ce0",
            "funcEndAddr": "0x403d34",
            "decompiledFuncCode": "void sub_403ce0(char* arg1)\n{\n    char* rbx = arg1;\n    char* rax;\n    if (arg1 == 0)\n    {\n        rax = getenv(\"SIMPLE_BACKUP_SUFFIX\");\n        rbx = rax;\n    }\n    if ((((arg1 != 0 || (arg1 == 0 && rax != 0)) && *rbx != 0) && sub_404ca0(rbx) == rbx))\n    {\n        data_6113f0 = rbx;\n        return;\n    }\n    data_6113f0 = &data_40ce2b;\n}\n\n"
        },
        {
            "funcName": "sub_403d40",
            "funcStartAddr": "0x403d40",
            "funcEndAddr": "0x404201",
            "decompiledFuncCode": "char* sub_403d40(char* arg1, int32_t arg2, char arg3)\n{\n    char* var_88 = arg1;\n    int32_t var_58 = arg2;\n    char* rax = sub_404ca0(arg1);\n    void* r14_1 = (rax - arg1);\n    int64_t rdi_1 = data_6113f0;\n    void* rax_2 = (strlen(rax) + r14_1);\n    if (rdi_1 == 0)\n    {\n        sub_403ce0(rdi_1);\n        rdi_1 = data_6113f0;\n    }\n    uint64_t rax_4 = (strlen(rdi_1) + 1);\n    void* rbx_1 = (rax_2 + 1);\n    uint64_t rax_5 = 9;\n    if (rax_4 >= 9)\n    {\n        rax_5 = rax_4;\n    }\n    void* rax_6 = (rax_5 + rbx_1);\n    char* rax_7 = malloc(rax_6);\n    char* r15 = rax_7;\n    if (rax_7 != 0)\n    {\n        DIR* r12_1 = nullptr;\n        while (true)\n        {\n            memcpy(r15, var_88, rbx_1);\n            if (var_58 == 1)\n            {\n                memcpy((r15 + rax_2), data_6113f0, rax_4);\n            }\n            else\n            {\n                char* rbx_2 = (r15 + r14_1);\n                uint64_t rax_8 = sub_404d00(rbx_2);\n                DIR* rax_32;\n                uint32_t rbp_1;\n                if (r12_1 == 0)\n                {\n                    int16_t rax_31 = *rbx_2;\n                    *rbx_2 = 0x2e;\n                    rax_32 = sub_404b20();\n                    int32_t* rcx_7 = &rbx_2[rax_8];\n                    r12_1 = rax_32;\n                    if (rax_32 == 0)\n                    {\n                        int32_t rbp_3;\n                        rbp_3 = *__errno_location() == 0xc;\n                        *rbx_2 = rax_31;\n                        rbp_1 = (rbp_3 + 2);\n                        *rcx_7 = 0x7e317e2e;\n                        rcx_7[1] = 0;\n                    }\n                    else\n                    {\n                        *rbx_2 = rax_31;\n                        *rcx_7 = 0x7e317e2e;\n                        rcx_7[1] = 0;\n                    }\n                }\n                else\n                {\n                    rewinddir(r12_1);\n                }\n                if ((r12_1 != 0 || (r12_1 == 0 && rax_32 != 0)))\n                {\n                    rbp_1 = 2;\n                    uint64_t var_78_1 = 1;\n                    void* var_70_1 = rax_6;\n                    int64_t rax_10 = (rax_8 + 4);\n                    uint64_t rax_12;\n                    do\n                    {\n                        struct dirent64* rax_11 = readdir(r12_1);\n                        if (rax_11 == 0)\n                        {\n                            break;\n                        }\n                        do\n                        {\n                            char (* rbx_3)[0x100] = &rax_11->d_name;\n                            rax_12 = strlen(rbx_3);\n                            if (rax_12 < rax_10)\n                            {\n                                break;\n                            }\n                            int16_t var_80;\n                            var_80 = (rax_8 + 2);\n                            int32_t rax_13;\n                            uint32_t r8_1;\n                            rax_13 = memcmp((r15 + r14_1), rbx_3, (rax_8 + 2));\n                            if (rax_13 != 0)\n                            {\n                                break;\n                            }\n                            void* rbx_4 = &*rbx_3[var_80];\n                            char rax_14 = *rbx_4;\n                            if ((rax_14 - 0x31) > 8)\n                            {\n                                break;\n                            }\n                            int32_t rdx_3 = *(rbx_4 + 1);\n                            int64_t rcx_3 = 1;\n                            r8_1 = rax_14 == 0x39;\n                            int32_t rax_15 = rdx_3;\n                            if ((rdx_3 - 0x30) <= 9)\n                            {\n                                int32_t rdx_5;\n                                do\n                                {\n                                    rax_15 = rax_15 == 0x39;\n                                    rcx_3 = (rcx_3 + 1);\n                                    rdx_5 = *(rbx_4 + rcx_3);\n                                    r8_1 = (r8_1 & rax_15);\n                                    rax_15 = rdx_5;\n                                } while ((rdx_5 - 0x30) <= 9);\n                            }\n                            if (rax_15 != 0x7e)\n                            {\n                                break;\n                            }\n                            if (*((rbx_4 + rcx_3) + 1) != 0)\n                            {\n                                break;\n                            }\n                            bool cond:4_1 = var_78_1 != rcx_3;\n                            if (var_78_1 >= rcx_3)\n                            {\n                                var_80 = r8_1;\n                                if (cond:4_1)\n                                {\n                                    break;\n                                }\n                                r8_1 = var_80;\n                                if (memcmp(((r15 + rax_2) + 2), rbx_4, var_78_1) > 0)\n                                {\n                                    break;\n                                }\n                            }\n                            uint64_t rdx_8 = r8_1;\n                            rbp_1 = r8_1;\n                            uint64_t rax_18 = (rdx_8 + rcx_3);\n                            var_78_1 = rax_18;\n                            void* rax_19 = ((rax_2 + rax_18) + 4);\n                            char* r8_2;\n                            if (rax_19 <= var_70_1)\n                            {\n                                r8_2 = r15;\n                            }\n                            else\n                            {\n                                int64_t rsi_6;\n                                rsi_6 = rax_19 < 0;\n                                void* rdi_11 = (rax_19 + rax_19);\n                                if (((rax_19 + rax_19) < 0 || ((rax_19 + rax_19) >= 0 && rsi_6 != 0)))\n                                {\n                                    var_70_1 = rax_19;\n                                }\n                                if (((rax_19 + rax_19) >= 0 && rsi_6 == 0))\n                                {\n                                    var_70_1 = rdi_11;\n                                }\n                                var_80 = rcx_3;\n                                char* rax_20 = realloc(r15, var_70_1);\n                                rcx_3 = var_80;\n                                r8_2 = rax_20;\n                                if (rax_20 == 0)\n                                {\n                                    goto label_404168;\n                                }\n                            }\n                            var_80 = rcx_3;\n                            void* rax_22 = (rax_2 + r8_2);\n                            *rax_22 = 0x7e2e;\n                            *(rax_22 + 2) = 0x30;\n                            void* rcx_5 = (var_80 + memcpy(((rax_22 + rdx_8) + 2), rbx_4, (rcx_3 + 2)));\n                            char rdx_10 = *(rcx_5 - 1);\n                            void* rax_24 = (rcx_5 - 1);\n                            if (rdx_10 == 0x39)\n                            {\n                                do\n                                {\n                                    *rax_24 = 0x30;\n                                    rax_24 = (rax_24 - 1);\n                                    rdx_10 = *rax_24;\n                                } while (rdx_10 == 0x39);\n                            }\n                            r15 = r8_2;\n                            *rax_24 = (rdx_10 + 1);\n                            rax_11 = readdir(r12_1);\n                        } while (rax_11 != 0);\n                    } while (rax_12 < rax_10);\n                }\n                if (rbp_1 == 3)\n                {\n                label_404168:\n                    char* rdi_22 = r15;\n                    r15 = nullptr;\n                    free(rdi_22);\n                    *__errno_location() = 0xc;\n                    break;\n                }\n                if ((rbp_1 == 2 && var_58 == 2))\n                {\n                    memcpy((r15 + rax_2), data_6113f0, rax_4);\n                    var_58 = 1;\n                }\n                if ((rbp_1 == 1 || rbp_1 == 2))\n                {\n                    sub_403c10(r15, rax_2);\n                }\n            }\n            if (arg3 != 0)\n            {\n                int32_t rax_25;\n                char* rcx_6;\n                int32_t rdx_12;\n                if (r12_1 != 0)\n                {\n                    rax_25 = dirfd(r12_1);\n                    rcx_6 = (r15 + r14_1);\n                    rdx_12 = rax_25;\n                }\n                if ((r12_1 == 0 || (r12_1 != 0 && rax_25 < 0)))\n                {\n                    rcx_6 = r15;\n                    rdx_12 = -0x64;\n                    r14_1 = nullptr;\n                }\n                int32_t r8_4;\n                r8_4 = var_58 != 1;\n                if (sub_407ea0(0xffffff9c, var_88, rdx_12, rcx_6, r8_4) != 0)\n                {\n                    int32_t* rax_27 = __errno_location();\n                    int32_t rbp_2 = *rax_27;\n                    if (rbp_2 != 0x11)\n                    {\n                        if (r12_1 != 0)\n                        {\n                            closedir(r12_1);\n                        }\n                        char* rdi_17 = r15;\n                        r15 = nullptr;\n                        free(rdi_17);\n                        *rax_27 = rbp_2;\n                        break;\n                    }\n                    continue;\n                }\n            }\n            if (r12_1 == 0)\n            {\n                break;\n            }\n            closedir(r12_1);\n            break;\n        }\n    }\n    return r15;\n}\n\n"
        },
        {
            "funcName": "sub_404210",
            "funcStartAddr": "0x404210",
            "funcEndAddr": "0x40423c",
            "decompiledFuncCode": "uint64_t sub_404210(int64_t arg1, char* arg2)\n{\n    return *((sub_40a670(arg1, arg2, &data_40cec0, 0x40cea0, 4, data_611380) << 2) + 0x40cea0);\n}\n\n"
        },
        {
            "funcName": "sub_404240",
            "funcStartAddr": "0x404240",
            "funcEndAddr": "0x40425a",
            "decompiledFuncCode": "char* sub_404240(char* arg1, int32_t arg2)\n{\n    char* rax = sub_403d40(arg1, arg2, 0);\n    if (rax == 0)\n    {\n        sub_408ca0();\n        /* no return */\n    }\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_404260",
            "funcStartAddr": "0x404260",
            "funcEndAddr": "0x404272",
            "decompiledFuncCode": "int64_t sub_404260(int64_t arg1, char* arg2)\n{\n    if ((arg2 != 0 && *arg2 != 0))\n    {\n        /* tailcall */\n        return sub_404210(arg1, arg2);\n    }\n    return 2;\n}\n\n"
        },
        {
            "funcName": "sub_404280",
            "funcStartAddr": "0x404280",
            "funcEndAddr": "0x4042c1",
            "decompiledFuncCode": "int64_t sub_404280(char const* const arg1, char* arg2)\n{\n    if ((arg2 == 0 || (arg2 != 0 && *arg2 == 0)))\n    {\n        char* rax_1 = getenv(\"VERSION_CONTROL\");\n        if ((rax_1 == 0 || (rax_1 != 0 && *rax_1 == 0)))\n        {\n            return 2;\n        }\n        if ((rax_1 != 0 && *rax_1 != 0))\n        {\n            arg2 = rax_1;\n            arg1 = \"$VERSION_CONTROL\";\n        }\n    }\n    /* tailcall */\n    return sub_404210(arg1, arg2);\n}\n\n"
        },
        {
            "funcName": "sub_4042d0",
            "funcStartAddr": "0x4042d0",
            "funcEndAddr": "0x404943",
            "decompiledFuncCode": "void* sub_4042d0(char* arg1, int32_t arg2)\n{\n    int32_t rcx_1 = (arg2 & 3);\n    void* r12;\n    if ((rcx_1 & (rcx_1 - 1)) == 0)\n    {\n        char* r15_1 = arg1;\n        if (arg1 != 0)\n        {\n            char rax_1 = *arg1;\n            if (rax_1 == 0)\n            {\n                r12 = nullptr;\n                *__errno_location() = 2;\n            }\n            else\n            {\n                void* rax_2;\n                void* rbx_2;\n                void* rbp_1;\n                if (rax_1 == 0x2f)\n                {\n                    char* rax_8 = sub_408a50(0x1000);\n                    r12 = rax_8;\n                    rbp_1 = &rax_8[0x1000];\n                    rbx_2 = &rax_8[1];\n                    *rax_8 = 0x2f;\n                }\n                else\n                {\n                    rax_2 = sub_408ce0();\n                    r12 = rax_2;\n                    if (rax_2 != 0)\n                    {\n                        uint64_t rax_3 = strlen(rax_2);\n                        if (rax_3 <= 0xfff)\n                        {\n                            void* rax_34 = sub_408ab0(r12, 0x1000);\n                            r12 = rax_34;\n                            rbx_2 = (rax_3 + rax_34);\n                            rbp_1 = (rax_34 + 0x1000);\n                        }\n                        else\n                        {\n                            rbx_2 = (rax_3 + r12);\n                            rbp_1 = rbx_2;\n                        }\n                    }\n                }\n                if ((rax_1 == 0x2f || (rax_1 != 0x2f && rax_2 != 0)))\n                {\n                    int32_t r14_2 = (arg2 & 4);\n                    char* var_e8_1 = r15_1;\n                    char rax_4 = *r15_1;\n                    int64_t* var_f0_1 = nullptr;\n                    size_t var_d8_1 = 0;\n                    int64_t var_e0_1 = 0;\n                    while (true)\n                    {\n                        if (rax_4 != 0)\n                        {\n                            char rdx_1 = rax_4;\n                            if (rax_4 == 0x2f)\n                            {\n                                do\n                                {\n                                    r15_1 = &r15_1[1];\n                                    rdx_1 = *r15_1;\n                                } while (rdx_1 == 0x2f);\n                            }\n                            if ((rax_4 != 0x2f || (rax_4 == 0x2f && rdx_1 != 0)))\n                            {\n                                char* r13_1 = r15_1;\n                                char* r14_3;\n                                while (true)\n                                {\n                                    rax_4 = r13_1[1];\n                                    r14_3 = &r13_1[1];\n                                    if (rax_4 == 0)\n                                    {\n                                        break;\n                                    }\n                                    if (rax_4 == 0x2f)\n                                    {\n                                        break;\n                                    }\n                                    r13_1 = r14_3;\n                                }\n                                if (r14_3 != r15_1)\n                                {\n                                    uint64_t r8_2 = (r14_3 - r15_1);\n                                    if (((rdx_1 == 0x2e && r8_2 == 2) && r15_1[1] == 0x2e))\n                                    {\n                                        r15_1 = r14_3;\n                                        if (rbx_2 <= (r12 + 1))\n                                        {\n                                            continue;\n                                        }\n                                        else\n                                        {\n                                            void* rdx_15 = (rbx_2 - 1);\n                                            if ((r12 >= rdx_15 || (r12 < rdx_15 && *(rbx_2 - 2) == 0x2f)))\n                                            {\n                                                rbx_2 = rdx_15;\n                                                continue;\n                                            }\n                                            if ((r12 < rdx_15 && *(rbx_2 - 2) != 0x2f))\n                                            {\n                                                rbx_2 = (rdx_15 - 1);\n                                                if (r12 != rbx_2)\n                                                {\n                                                    while (*(rbx_2 - 1) != 0x2f)\n                                                    {\n                                                        rbx_2 = (rbx_2 - 1);\n                                                        if (r12 == rbx_2)\n                                                        {\n                                                            break;\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    if (((r8_2 == 1 && rdx_1 == 0x2e) || ((rdx_1 == 0x2e && r8_2 == 2) && r15_1[1] == 0x2e)))\n                                    {\n                                        r15_1 = r14_3;\n                                        continue;\n                                    }\n                                    if (((((r8_2 == 1 && rdx_1 != 0x2e) || (r8_2 != 1 && rdx_1 != 0x2e)) || ((r8_2 != 1 && rdx_1 == 0x2e) && r8_2 != 2)) || ((rdx_1 == 0x2e && r8_2 == 2) && r15_1[1] != 0x2e)))\n                                    {\n                                        if (*(rbx_2 - 1) != 0x2f)\n                                        {\n                                            *rbx_2 = 0x2f;\n                                            rbx_2 = (rbx_2 + 1);\n                                        }\n                                        if (rbp_1 <= (rbx_2 + r8_2))\n                                        {\n                                            int64_t rbp_2 = (rbp_1 - r12);\n                                            void* rbx_3 = (rbx_2 - r12);\n                                            size_t rax_6 = ((r8_2 + rbp_2) + 1);\n                                            size_t rbp_3 = (rbp_2 + 0x1000);\n                                            if (r8_2 >= 0x1000)\n                                            {\n                                                rbp_3 = rax_6;\n                                            }\n                                            void* rax_7 = sub_408ab0(r12, rbp_3);\n                                            r12 = rax_7;\n                                            rbp_1 = (rbp_3 + rax_7);\n                                            rbx_2 = (rbx_3 + rax_7);\n                                            goto label_40444b;\n                                        }\n                                    label_40444b:\n                                        memcpy(rbx_2, r15_1, r8_2);\n                                        rbx_2 = (rbx_2 + r8_2);\n                                        *rbx_2 = 0;\n                                        int32_t var_b0;\n                                        int32_t rcx_2;\n                                        int32_t rcx_4;\n                                        int32_t* rdx_5;\n                                        int32_t* rdx_13;\n                                        if ((rcx_1 != 2 || (rcx_1 == 2 && r14_2 == 0)))\n                                        {\n                                            void var_c8;\n                                            void* rdx_4 = &var_c8;\n                                            char* rsi_2 = r12;\n                                            int32_t rax_10;\n                                            if (r14_2 == 0)\n                                            {\n                                                rax_10 = __lxstat(1, rsi_2, rdx_4) != 0;\n                                            }\n                                            else\n                                            {\n                                                rax_10 = __xstat(1, rsi_2, rdx_4) != 0;\n                                            }\n                                            if (rax_10 == 0)\n                                            {\n                                                int32_t rax_15 = (var_b0 & 0xf000);\n                                                if (rax_15 == 0xa000)\n                                                {\n                                                    if (var_f0_1 == 0)\n                                                    {\n                                                        int64_t* rax_29 = sub_4057d0(7, nullptr, 0x406190, 0x406200, 0x406240);\n                                                        var_f0_1 = rax_29;\n                                                        if (rax_29 == 0)\n                                                        {\n                                                            sub_408ca0();\n                                                            /* no return */\n                                                        }\n                                                    }\n                                                    int32_t rcx_3;\n                                                    int32_t* rdx_12;\n                                                    if (sub_404e00(var_f0_1, var_e8_1, &var_c8) == 0)\n                                                    {\n                                                        sub_404d70(var_f0_1, var_e8_1, &var_c8);\n                                                        int64_t var_98;\n                                                        char* rax_22 = sub_40a2b0(r12, var_98);\n                                                        if (rax_22 == 0)\n                                                        {\n                                                            int32_t* rax_35 = __errno_location();\n                                                            rdx_12 = rax_35;\n                                                            rcx_3 = *rax_35;\n                                                            if (rcx_1 != 2)\n                                                            {\n                                                                goto label_4046ff;\n                                                            }\n                                                            if (rcx_3 != 0xc)\n                                                            {\n                                                                goto label_404529;\n                                                            }\n                                                            goto label_4046ff;\n                                                        }\n                                                        uint64_t rax_23 = strlen(rax_22);\n                                                        uint64_t rax_24 = strlen(r14_3);\n                                                        uint64_t rdx_8 = rax_24;\n                                                        size_t r8_4 = ((rax_23 + rax_24) + 1);\n                                                        if (var_d8_1 == 0)\n                                                        {\n                                                            size_t rax_31 = 0x1000;\n                                                            if (r8_4 >= 0x1000)\n                                                            {\n                                                                rax_31 = r8_4;\n                                                            }\n                                                            var_d8_1 = rax_31;\n                                                            rdx_8 = rax_24;\n                                                            var_e0_1 = sub_408a50(rax_31);\n                                                        }\n                                                        else if (r8_4 > var_d8_1)\n                                                        {\n                                                            rdx_8 = rax_24;\n                                                            var_e0_1 = sub_408ab0(var_e0_1, r8_4);\n                                                            var_d8_1 = r8_4;\n                                                        }\n                                                        memmove((var_e0_1 + rax_23), r14_3, (rdx_8 + 1));\n                                                        char* rax_26 = memcpy(var_e0_1, rax_22, rax_23);\n                                                        void* rdx_11 = (r12 + 1);\n                                                        r14_3 = rax_26;\n                                                        var_e8_1 = rax_26;\n                                                        if (*rax_22 == 0x2f)\n                                                        {\n                                                            *r12 = 0x2f;\n                                                            rbx_2 = rdx_11;\n                                                        }\n                                                        else if (rbx_2 > rdx_11)\n                                                        {\n                                                            void* rdx_17 = (rbx_2 - 1);\n                                                            if (r12 >= rdx_17)\n                                                            {\n                                                                rbx_2 = rdx_17;\n                                                            }\n                                                            else\n                                                            {\n                                                                bool cond:6_1 = *(rbx_2 - 2) == 0x2f;\n                                                                rbx_2 = rdx_17;\n                                                                if ((!cond:6_1))\n                                                                {\n                                                                    do\n                                                                    {\n                                                                        rbx_2 = (rbx_2 - 1);\n                                                                        if (r12 == rbx_2)\n                                                                        {\n                                                                            break;\n                                                                        }\n                                                                    } while (*(rbx_2 - 1) != 0x2f);\n                                                                }\n                                                            }\n                                                        }\n                                                        free(rax_22);\n                                                        goto label_404484;\n                                                    }\n                                                    if (rcx_1 == 2)\n                                                    {\n                                                        goto label_404529;\n                                                    }\n                                                    rcx_3 = 0x28;\n                                                    rdx_12 = __errno_location();\n                                                label_4046ff:\n                                                    free(var_e0_1);\n                                                    free(r12);\n                                                    rdx_13 = rdx_12;\n                                                    rcx_4 = rcx_3;\n                                                label_404723:\n                                                    sub_405a10(var_f0_1);\n                                                label_404731:\n                                                    *rdx_13 = rcx_4;\n                                                    r12 = nullptr;\n                                                    break;\n                                                }\n                                                if (rax_15 == 0x4000)\n                                                {\n                                                    goto label_404484;\n                                                }\n                                            }\n                                            else\n                                            {\n                                                int32_t* rax_11 = __errno_location();\n                                                rdx_5 = rax_11;\n                                                rcx_2 = *rax_11;\n                                                if (rcx_1 == 0)\n                                                {\n                                                    goto label_4047e3;\n                                                }\n                                                if (rcx_1 != 1)\n                                                {\n                                                    goto label_40446b;\n                                                }\n                                                if (r14_3[strspn(r14_3, \"/\")] != 0)\n                                                {\n                                                    goto label_4047e3;\n                                                }\n                                                if (rcx_2 != 2)\n                                                {\n                                                    goto label_4047e3;\n                                                }\n                                            label_404529:\n                                                rax_4 = r13_1[1];\n                                                r15_1 = r14_3;\n                                                continue;\n                                            }\n                                        }\n                                        if ((rcx_1 == 2 && r14_2 != 0))\n                                        {\n                                        label_40446b:\n                                            var_b0 = 0;\n                                        }\n                                        if (*r14_3 != 0)\n                                        {\n                                            if (rcx_1 == 2)\n                                            {\n                                                goto label_404484;\n                                            }\n                                            rcx_2 = 0x14;\n                                            rdx_5 = __errno_location();\n                                        label_4047e3:\n                                            free(var_e0_1);\n                                            free(r12);\n                                            rdx_13 = rdx_5;\n                                            rcx_4 = rcx_2;\n                                            if (var_f0_1 == 0)\n                                            {\n                                                goto label_404731;\n                                            }\n                                            goto label_404723;\n                                        }\n                                    label_404484:\n                                        rax_4 = *r14_3;\n                                        r15_1 = r14_3;\n                                        continue;\n                                    }\n                                }\n                            }\n                        }\n                        void* rax_17;\n                        if ((rbx_2 <= (r12 + 1) || (rbx_2 > (r12 + 1) && *(rbx_2 - 1) != 0x2f)))\n                        {\n                            rax_17 = (rbx_2 + 1);\n                        }\n                        if ((rbx_2 > (r12 + 1) && *(rbx_2 - 1) == 0x2f))\n                        {\n                            rax_17 = rbx_2;\n                            rbx_2 = (rbx_2 - 1);\n                        }\n                        *rbx_2 = 0;\n                        if (rbp_1 != rax_17)\n                        {\n                            r12 = sub_408ab0(r12, ((rbx_2 - r12) + 1));\n                        }\n                        free(var_e0_1);\n                        if (var_f0_1 != 0)\n                        {\n                            sub_405a10(var_f0_1);\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    if (((rcx_1 & (rcx_1 - 1)) != 0 || ((rcx_1 & (rcx_1 - 1)) == 0 && arg1 == 0)))\n    {\n        r12 = nullptr;\n        *__errno_location() = 0x16;\n    }\n    return r12;\n}\n\n"
        },
        {
            "funcName": "sub_404950",
            "funcStartAddr": "0x404950",
            "funcEndAddr": "0x404958",
            "decompiledFuncCode": "int64_t sub_404950(int64_t arg1)\n{\n    data_6113f8 = arg1;\n}\n\n"
        },
        {
            "funcName": "sub_404960",
            "funcStartAddr": "0x404960",
            "funcEndAddr": "0x404a5d",
            "decompiledFuncCode": "void sub_404960(void* arg1)\n{\n    if (sub_408f00(stdin) != 0)\n    {\n        int32_t rax_8 = sub_408f30(stdin, 0, 1);\n        uint64_t* const rdi_3 = stdin;\n        int32_t rax_3;\n        if (rax_8 == 0)\n        {\n            rax_3 = sub_408ec0(rdi_3);\n            rdi_3 = stdin;\n            if (rax_3 != 0)\n            {\n                sub_40a730(rdi_3);\n            }\n        }\n        if (((rax_8 != 0 || (rax_8 == 0 && rax_3 == 0)) && sub_40a730(rdi_3) == 0))\n        {\n            /* tailcall */\n            return sub_404a80();\n        }\n    }\n    else if (sub_40a730(stdin) == 0)\n    {\n        /* tailcall */\n        return sub_404a80();\n    }\n    char* rax_4 = dcgettext(nullptr, \"error closing file\", 5);\n    int64_t rbx = data_6113f8;\n    int32_t* rax_5 = __errno_location();\n    if (rbx == 0)\n    {\n        error(0, *rax_5, \"%s\", rax_4);\n    }\n    else\n    {\n        error(0, *rax_5, \"%s: %s\", sub_407cd0(rbx), rax_4);\n    }\n    sub_404a80();\n    _exit(data_611300);\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_404a60",
            "funcStartAddr": "0x404a60",
            "funcEndAddr": "0x404a68",
            "decompiledFuncCode": "int64_t sub_404a60(int64_t arg1)\n{\n    data_611408 = arg1;\n}\n\n"
        },
        {
            "funcName": "sub_404a70",
            "funcStartAddr": "0x404a70",
            "funcEndAddr": "0x404a78",
            "decompiledFuncCode": "int64_t sub_404a70(char arg1)\n{\n    data_611400 = arg1;\n}\n\n"
        },
        {
            "funcName": "sub_404a80",
            "funcStartAddr": "0x404a80",
            "funcEndAddr": "0x404b1e",
            "decompiledFuncCode": "uint64_t sub_404a80()\n{\n    int32_t rax = sub_40a730(stdout);\n    int32_t* rax_1;\n    if (rax != 0)\n    {\n        rax_1 = __errno_location();\n        if ((data_611400 == 0 || (data_611400 != 0 && *rax_1 != 0x20)))\n        {\n            char* rax_3 = dcgettext(nullptr, \"write error\", 5);\n            int64_t rdi_2 = data_611408;\n            if (rdi_2 == 0)\n            {\n                error(0, *rax_1, \"%s\", rax_3);\n            }\n            else\n            {\n                error(0, *rax_1, \"%s: %s\", sub_407cd0(rdi_2), rax_3);\n            }\n        }\n    }\n    if ((rax == 0 || ((rax != 0 && data_611400 != 0) && *rax_1 == 0x20)))\n    {\n        uint64_t rax_2 = sub_40a730(stderr);\n        if (rax_2 == 0)\n        {\n            return rax_2;\n        }\n    }\n    _exit(data_611300);\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_404b20",
            "funcStartAddr": "0x404b20",
            "funcEndAddr": "0x404bb6",
            "decompiledFuncCode": "DIR* sub_404b20()\n{\n    char* rdi;\n    DIR* rax = opendir(rdi);\n    if (rax != 0)\n    {\n        int32_t rax_1 = dirfd(rax);\n        if (rax_1 <= 2)\n        {\n            int32_t rax_4 = sub_408d80(rax_1, 0x406, 3);\n            int32_t* rax_5 = __errno_location();\n            DIR* r13;\n            int32_t r14;\n            if (rax_4 < 0)\n            {\n                r14 = *rax_5;\n                r13 = nullptr;\n            }\n            else\n            {\n                DIR* rax_7 = fdopendir(rax_4);\n                r14 = *rax_5;\n                r13 = rax_7;\n                if (rax_7 == 0)\n                {\n                    close(rax_4);\n                }\n            }\n            closedir(rax);\n            *rax_5 = r14;\n            return r13;\n        }\n    }\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_404bc0",
            "funcStartAddr": "0x404bc0",
            "funcEndAddr": "0x404bd8",
            "decompiledFuncCode": "char* sub_404bc0(char* arg1)\n{\n    char* rax = sub_404c40(arg1);\n    if (rax == 0)\n    {\n        sub_408ca0();\n        /* no return */\n    }\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_404be0",
            "funcStartAddr": "0x404be0",
            "funcEndAddr": "0x404c3d",
            "decompiledFuncCode": "void* sub_404be0(char* arg1)\n{\n    int64_t rbp;\n    rbp = *arg1 == 0x2f;\n    char* rax = sub_404ca0(arg1);\n    void* rcx_1 = (rax - arg1);\n    if (rcx_1 > rbp)\n    {\n        void* rdx_1 = (rcx_1 - 1);\n        if (rax[-1] == 0x2f)\n        {\n            void* rax_1;\n            for (; rbp != rdx_1; rdx_1 = rax_1)\n            {\n                rax_1 = (rdx_1 - 1);\n                if (*((arg1 + rdx_1) - 1) != 0x2f)\n                {\n                    break;\n                }\n            }\n            return rdx_1;\n        }\n    }\n    return rcx_1;\n}\n\n"
        },
        {
            "funcName": "sub_404c40",
            "funcStartAddr": "0x404c40",
            "funcEndAddr": "0x404c9a",
            "decompiledFuncCode": "char* sub_404c40(char* arg1)\n{\n    void* rax = sub_404be0(arg1);\n    void* rbx = rax;\n    rax = rax == 0;\n    char* rax_2 = malloc(((rbx + rax) + 1));\n    char* rcx = rax_2;\n    if (rax_2 != 0)\n    {\n        char* rax_3 = memcpy(rax_2, arg1, rbx);\n        rcx = rax_3;\n        if (rbx == 0)\n        {\n            *rax_3 = 0x2e;\n            rbx = 1;\n        }\n        *(rcx + rbx) = 0;\n    }\n    return rcx;\n}\n\n"
        },
        {
            "funcName": "sub_404ca0",
            "funcStartAddr": "0x404ca0",
            "funcEndAddr": "0x404cfb",
            "decompiledFuncCode": "char* sub_404ca0(char* arg1)\n{\n    char rdx = *arg1;\n    char* rax = arg1;\n    if (rdx == 0x2f)\n    {\n        do\n        {\n            rax = &rax[1];\n            rdx = *rax;\n        } while (rdx == 0x2f);\n    }\n    if (rdx != 0)\n    {\n        char* rcx_1 = rax;\n        char rsi_1 = 0;\n        while (true)\n        {\n            if (rdx == 0x2f)\n            {\n                rcx_1 = &rcx_1[1];\n                rdx = *rcx_1;\n                rsi_1 = 1;\n                if (rdx == 0)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                if (rsi_1 != 0)\n                {\n                    rax = rcx_1;\n                    rsi_1 = 0;\n                }\n                rcx_1 = &rcx_1[1];\n                rdx = *rcx_1;\n                if (rdx == 0)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_404d00",
            "funcStartAddr": "0x404d00",
            "funcEndAddr": "0x404d2b",
            "decompiledFuncCode": "uint64_t sub_404d00(char* arg1)\n{\n    uint64_t rax = strlen(arg1);\n    if (rax > 1)\n    {\n        while (true)\n        {\n            uint64_t rdx_1 = (rax - 1);\n            if (arg1[(rax - 1)] != 0x2f)\n            {\n                break;\n            }\n            rax = rdx_1;\n            if (rdx_1 == 1)\n            {\n                return rax;\n            }\n        }\n    }\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_404d30",
            "funcStartAddr": "0x404d30",
            "funcEndAddr": "0x404d63",
            "decompiledFuncCode": "uint64_t sub_404d30(char* arg1)\n{\n    char* rax = sub_404ca0(arg1);\n    char* rbx = rax;\n    if (*rax == 0)\n    {\n        rbx = arg1;\n    }\n    void* rbx_1 = &rbx[sub_404d00(rbx)];\n    bool cond:1 = *rbx_1 != 0;\n    *rbx_1 = 0;\n    uint64_t rax_1;\n    rax_1 = cond:1;\n    return rax_1;\n}\n\n"
        },
        {
            "funcName": "sub_404d70",
            "funcStartAddr": "0x404d70",
            "funcEndAddr": "0x404df6",
            "decompiledFuncCode": "void sub_404d70(int64_t* arg1, char* arg2, int64_t* arg3)\n{\n    if (arg1 == 0)\n    {\n        return;\n    }\n    int64_t* rax = sub_408a50(0x18);\n    *rax = sub_408c80(arg2);\n    rax[1] = arg3[1];\n    rax[2] = *arg3;\n    int64_t rax_4 = sub_405f70(arg1, rax);\n    if (rax_4 == 0)\n    {\n        sub_408ca0();\n        /* no return */\n    }\n    if (rax == rax_4)\n    {\n        return;\n    }\n    /* tailcall */\n    return sub_406240(rax);\n}\n\n"
        },
        {
            "funcName": "sub_404e00",
            "funcStartAddr": "0x404e00",
            "funcEndAddr": "0x404e3b",
            "decompiledFuncCode": "int64_t sub_404e00(void* arg1, int64_t arg2, int64_t* arg3)\n{\n    if (arg1 == 0)\n    {\n        return 0;\n    }\n    int64_t var_28 = arg2;\n    int64_t var_20 = arg3[1];\n    int64_t var_18 = *arg3;\n    int64_t rax_2;\n    rax_2 = sub_405560(arg1, &var_28) != 0;\n    return rax_2;\n}\n\n"
        },
        {
            "funcName": "sub_404e40",
            "funcStartAddr": "0x404e40",
            "funcEndAddr": "0x404e58",
            "decompiledFuncCode": "int64_t sub_404e40(char* arg1, char* arg2, void** arg3)\n{\n    int64_t rax = sub_404e60(arg1, arg2, arg3);\n    if (rax == 0)\n    {\n        sub_408ca0();\n        /* no return */\n    }\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_404e60",
            "funcStartAddr": "0x404e60",
            "funcEndAddr": "0x404f39",
            "decompiledFuncCode": "int64_t sub_404e60(char* arg1, char* arg2, void** arg3)\n{\n    char* r12 = arg2;\n    char* rax = sub_404ca0(arg1);\n    uint64_t rax_1 = sub_404d00(rax);\n    uint64_t rbx = rax_1;\n    void* rbp_2 = ((rax - arg1) + rax_1);\n    if (rax_1 != 0)\n    {\n        rbx = rax[(rax_1 - 1)] != 0x2f;\n        rbx = rbx;\n    }\n    char rax_2 = *r12;\n    if (rax_2 == 0x2f)\n    {\n        do\n        {\n            r12 = &r12[1];\n        } while (*r12 == 0x2f);\n    }\n    uint64_t rax_3 = strlen(r12);\n    int64_t rax_4 = malloc((((rbx + rbp_2) + 1) + rax_3));\n    if (rax_4 != 0)\n    {\n        char* rax_5 = mempcpy(rax_4, arg1, rbp_2);\n        *rax_5 = 0x2f;\n        void* rdi_5 = &rax_5[rbx];\n        if (arg3 != 0)\n        {\n            int64_t rax_6;\n            rax_6 = rax_2 == 0x2f;\n            *arg3 = (rdi_5 - rax_6);\n        }\n        *mempcpy(rdi_5, r12, rax_3) = 0;\n    }\n    return rax_4;\n}\n\n"
        },
        {
            "funcName": "sub_404f40",
            "funcStartAddr": "0x404f40",
            "funcEndAddr": "0x404fd3",
            "decompiledFuncCode": "int64_t sub_404f40(int64_t arg1)\n{\n    int64_t rsi = 0xa;\n    if (arg1 >= 0xa)\n    {\n        rsi = arg1;\n    }\n    int64_t rsi_1 = (rsi | 1);\n    if (rsi_1 != -1)\n    {\n        do\n        {\n            int64_t rax_2;\n            int64_t rdx_1;\n            rdx_1 = HIGHD((rsi_1 * -0x5555555555555555));\n            rax_2 = LOWD((rsi_1 * -0x5555555555555555));\n            uint64_t rcx_2 = (rsi_1 - ((rdx_1 >> 1) * 3));\n            uint64_t rax_6 = rcx_2;\n            int64_t rdi;\n            if ((rsi_1 > 9 && rcx_2 != 0))\n            {\n                int64_t r8_1 = 0x10;\n                rdi = 9;\n                int64_t rcx_3 = 3;\n                uint64_t temp1_1;\n                do\n                {\n                    rcx_3 = (rcx_3 + 2);\n                    rdi = (rdi + r8_1);\n                    temp1_1 = (COMBINE(0, rsi_1) % rcx_3);\n                    rax_6 = temp1_1;\n                    if (rdi >= rsi_1)\n                    {\n                        break;\n                    }\n                    r8_1 = (r8_1 + 8);\n                } while (temp1_1 != 0);\n            }\n            if (((rsi_1 <= 9 || ((rsi_1 > 9 && rcx_2 != 0) && rdi >= rsi_1)) && rax_6 != 0))\n            {\n                break;\n            }\n            rsi_1 = (rsi_1 + 2);\n        } while (rsi_1 != -1);\n    }\n    return rsi_1;\n}\n\n"
        },
        {
            "funcName": "sub_404fe0",
            "funcStartAddr": "0x404fe0",
            "funcEndAddr": "0x404ff0",
            "decompiledFuncCode": "uint64_t sub_404fe0(int64_t arg1, int64_t arg2)\n{\n    return (COMBINE(0, (RORQ(arg1, 3))) % arg2);\n}\n\n"
        },
        {
            "funcName": "sub_404ff0",
            "funcStartAddr": "0x404ff0",
            "funcEndAddr": "0x404ff7",
            "decompiledFuncCode": "int64_t sub_404ff0(int64_t arg1, int64_t arg2)\n{\n    int64_t rax;\n    rax = arg1 == arg2;\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_405000",
            "funcStartAddr": "0x4021d0",
            "funcEndAddr": "0x405021",
            "decompiledFuncCode": "int64_t sub_405000(void* arg1, int64_t arg2)\n{\n    int64_t rax = *(arg1 + 0x30)(arg2, *(arg1 + 0x10));\n    if (*(arg1 + 0x10) <= rax)\n    {\n        abort();\n        /* no return */\n    }\n    return ((rax << 4) + *arg1);\n}\n\n"
        },
        {
            "funcName": "sub_405030",
            "funcStartAddr": "0x405030",
            "funcEndAddr": "0x405149",
            "decompiledFuncCode": "int64_t sub_405030(void* arg1, int64_t arg2, int64_t* arg3, char arg4)\n{\n    int64_t* rax = sub_405000(arg1, arg2);\n    *arg3 = rax;\n    int64_t rsi = *rax;\n    if (rsi != 0)\n    {\n        int64_t* rbx_1 = rax;\n        char rax_1;\n        if (rsi != arg2)\n        {\n            rax_1 = *(arg1 + 0x38)(arg2, rsi);\n            if (rax_1 != 0)\n            {\n                rsi = *rbx_1;\n            }\n            else\n            {\n                int64_t* rax_2 = rbx_1[1];\n                if (rax_2 != 0)\n                {\n                    rsi = *rax_2;\n                    if (arg2 != rsi)\n                    {\n                        do\n                        {\n                            if (*(arg1 + 0x38)(arg2, rsi) != 0)\n                            {\n                                rax_2 = rbx_1[1];\n                                rsi = *rax_2;\n                                break;\n                            }\n                            rbx_1 = rbx_1[1];\n                            rax_2 = rbx_1[1];\n                            if (rax_2 == 0)\n                            {\n                                return 0;\n                            }\n                            rsi = *rax_2;\n                        } while (rsi != arg2);\n                    }\n                    if (arg4 != 0)\n                    {\n                        rbx_1[1] = rax_2[1];\n                        *rax_2 = 0;\n                        rax_2[1] = *(arg1 + 0x48);\n                        *(arg1 + 0x48) = rax_2;\n                    }\n                    goto label_4050e9;\n                }\n            }\n        }\n        if (((rsi != arg2 && rax_1 != 0) || rsi == arg2))\n        {\n            if (arg4 == 0)\n            {\n            label_4050e9:\n                return rsi;\n            }\n            int128_t* rax_5 = rbx_1[1];\n            if (rax_5 != 0)\n            {\n                *rbx_1 = *rax_5;\n                *rax_5 = 0;\n                *(rax_5 + 8) = *(arg1 + 0x48);\n                *(arg1 + 0x48) = rax_5;\n                return rsi;\n            }\n            *rbx_1 = 0;\n            goto label_4050e9;\n        }\n    }\n    return 0;\n}\n\n"
        },
        {
            "funcName": "sub_405150",
            "funcStartAddr": "0x405150",
            "funcEndAddr": "0x4051ce",
            "decompiledFuncCode": "int64_t sub_405150(int64_t* arg1)\n{\n    int32_t* rax_3 = *arg1;\n    if (rax_3 != 0x40cfa0)\n    {\n        int32_t zmm0 = rax_3[2];\n        if (((zmm0 == 0.100000001f | (FCMP_UO(zmm0, 0.100000001f))) || (zmm0 < 0.100000001f | (FCMP_UO(zmm0, 0.100000001f)))))\n        {\n        label_4051ba:\n            *arg1 = 0x40cfa0;\n            return 0;\n        }\n        if (((0.899999976f == zmm0 | (FCMP_UO(0.899999976f, zmm0))) || (0.899999976f < zmm0 | (FCMP_UO(0.899999976f, zmm0)))))\n        {\n            goto label_4051ba;\n        }\n        float zmm1 = rax_3[3];\n        if (((zmm1 == 1.10000002f | (FCMP_UO(zmm1, 1.10000002f))) || (zmm1 < 1.10000002f | (FCMP_UO(zmm1, 1.10000002f)))))\n        {\n            goto label_4051ba;\n        }\n        zmm1 = *rax_3;\n        if ((zmm1 < 0f | (FCMP_UO(zmm1, 0f))))\n        {\n            goto label_4051ba;\n        }\n        zmm1 = (zmm1 + 0.100000001f);\n        int32_t zmm2 = rax_3[1];\n        if (((zmm2 == zmm1 | (FCMP_UO(zmm2, zmm1))) || (zmm2 < zmm1 | (FCMP_UO(zmm2, zmm1)))))\n        {\n            goto label_4051ba;\n        }\n        int512_t zmm3;\n        zmm3 = 0x3f800000;\n        if ((1f < zmm2 | (FCMP_UO(1f, zmm2))))\n        {\n            goto label_4051ba;\n        }\n        if ((!((!(zmm0 == zmm1 | (FCMP_UO(zmm0, zmm1)))) && (!(zmm0 < zmm1 | (FCMP_UO(zmm0, zmm1)))))))\n        {\n            goto label_4051ba;\n        }\n    }\n    return 1;\n}\n\n"
        },
        {
            "funcName": "sub_4051d0",
            "funcStartAddr": "0x4051d0",
            "funcEndAddr": "0x40531a",
            "decompiledFuncCode": "int64_t sub_4051d0(void* arg1, int64_t* arg2, char arg3)\n{\n    int64_t* r12 = *arg2;\n    if (r12 < arg2[1])\n    {\n        do\n        {\n            int64_t r15_2 = *r12;\n            if (r15_2 != 0)\n            {\n                int64_t* rbx_1 = r12[1];\n                if (rbx_1 != 0)\n                {\n                    while (true)\n                    {\n                        int64_t r15_1 = *rbx_1;\n                        int64_t* rax_1 = sub_405000(arg1, r15_1);\n                        int64_t* rdx = rbx_1[1];\n                        if (*rax_1 != 0)\n                        {\n                            rbx_1[1] = rax_1[1];\n                            rax_1[1] = rbx_1;\n                            rbx_1 = rdx;\n                            if (rdx == 0)\n                            {\n                                break;\n                            }\n                        }\n                        else\n                        {\n                            *rax_1 = r15_1;\n                            *(arg1 + 0x18) = (*(arg1 + 0x18) + 1);\n                            *rbx_1 = 0;\n                            rbx_1[1] = *(arg1 + 0x48);\n                            *(arg1 + 0x48) = rbx_1;\n                            rbx_1 = rdx;\n                            if (rdx == 0)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    r15_2 = *r12;\n                }\n                r12[1] = 0;\n                if (arg3 == 0)\n                {\n                    int64_t* rax_3 = sub_405000(arg1, r15_2);\n                    if (*rax_3 == 0)\n                    {\n                        *rax_3 = r15_2;\n                        *(arg1 + 0x18) = (*(arg1 + 0x18) + 1);\n                    }\n                    else\n                    {\n                        int64_t* rax_4 = *(arg1 + 0x48);\n                        if (rax_4 != 0)\n                        {\n                            *(arg1 + 0x48) = rax_4[1];\n                        }\n                        else\n                        {\n                            rax_4 = malloc(0x10);\n                            if (rax_4 == 0)\n                            {\n                                return 0;\n                            }\n                        }\n                        int64_t rdx_2 = rax_3[1];\n                        *rax_4 = r15_2;\n                        rax_4[1] = rdx_2;\n                        rax_3[1] = rax_4;\n                    }\n                    *r12 = 0;\n                    r12 = &r12[2];\n                    arg2[3] = (arg2[3] - 1);\n                    if (arg2[1] <= r12)\n                    {\n                        break;\n                    }\n                    continue;\n                }\n            }\n            r12 = &r12[2];\n        } while (arg2[1] > r12);\n    }\n    return 1;\n}\n\n"
        },
        {
            "funcName": "sub_405320",
            "funcStartAddr": "0x405320",
            "funcEndAddr": "0x405325",
            "decompiledFuncCode": "int64_t sub_405320(void* arg1)\n{\n    return *(arg1 + 0x10);\n}\n\n"
        },
        {
            "funcName": "sub_405330",
            "funcStartAddr": "0x405330",
            "funcEndAddr": "0x405335",
            "decompiledFuncCode": "int64_t sub_405330(void* arg1)\n{\n    return *(arg1 + 0x18);\n}\n\n"
        },
        {
            "funcName": "sub_405340",
            "funcStartAddr": "0x405340",
            "funcEndAddr": "0x405345",
            "decompiledFuncCode": "int64_t sub_405340(void* arg1)\n{\n    return *(arg1 + 0x20);\n}\n\n"
        },
        {
            "funcName": "sub_405350",
            "funcStartAddr": "0x405350",
            "funcEndAddr": "0x40539f",
            "decompiledFuncCode": "int64_t sub_405350(int64_t* arg1)\n{\n    int64_t* rsi = *arg1;\n    int64_t rdi = arg1[1];\n    int64_t rax = 0;\n    if (rsi >= rdi)\n    {\n        return 0;\n    }\n    while (true)\n    {\n        if (*rsi == 0)\n        {\n            rsi = &rsi[2];\n            if (rsi >= rdi)\n            {\n                break;\n            }\n        }\n        else\n        {\n            void* rdx_1 = rsi[1];\n            int64_t rcx_1 = 1;\n            if (rdx_1 != 0)\n            {\n                do\n                {\n                    rdx_1 = *(rdx_1 + 8);\n                    rcx_1 = (rcx_1 + 1);\n                } while (rdx_1 != 0);\n            }\n            if (rax < rcx_1)\n            {\n                rax = rcx_1;\n            }\n            rsi = &rsi[2];\n            if (rsi >= rdi)\n            {\n                break;\n            }\n        }\n    }\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_4053a0",
            "funcStartAddr": "0x4053a0",
            "funcEndAddr": "0x405407",
            "decompiledFuncCode": "int64_t sub_4053a0(int64_t* arg1)\n{\n    int64_t* rcx = *arg1;\n    int64_t rsi = arg1[1];\n    int64_t rdx = 0;\n    int64_t r8 = 0;\n    if (rcx < rsi)\n    {\n        do\n        {\n            if (*rcx != 0)\n            {\n                void* rax_1 = rcx[1];\n                r8 = (r8 + 1);\n                rdx = (rdx + 1);\n                if (rax_1 != 0)\n                {\n                    do\n                    {\n                        rax_1 = *(rax_1 + 8);\n                        rdx = (rdx + 1);\n                    } while (rax_1 != 0);\n                    rcx = &rcx[2];\n                    if (rcx >= rsi)\n                    {\n                        break;\n                    }\n                    continue;\n                }\n            }\n            rcx = &rcx[2];\n        } while (rcx < rsi);\n    }\n    if (arg1[3] == r8)\n    {\n        int64_t rax_2;\n        rax_2 = arg1[4] == rdx;\n        return rax_2;\n    }\n    return 0;\n}\n\n"
        },
        {
            "funcName": "sub_405410",
            "funcStartAddr": "0x405410",
            "funcEndAddr": "0x405558",
            "decompiledFuncCode": "int64_t sub_405410(int64_t* arg1, FILE* arg2)\n{\n    int64_t rbx = 0;\n    int64_t r12 = arg1[2];\n    int64_t r13 = arg1[3];\n    int64_t* rsi = *arg1;\n    int64_t rdi = arg1[1];\n    if (rsi < rdi)\n    {\n        while (true)\n        {\n            if (*rsi == 0)\n            {\n                rsi = &rsi[2];\n                if (rsi >= rdi)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                void* rax_1 = rsi[1];\n                int64_t rdx_1 = 1;\n                if (rax_1 != 0)\n                {\n                    do\n                    {\n                        rax_1 = *(rax_1 + 8);\n                        rdx_1 = (rdx_1 + 1);\n                    } while (rax_1 != 0);\n                }\n                if (rbx < rdx_1)\n                {\n                    rbx = rdx_1;\n                }\n                rsi = &rsi[2];\n                if (rsi >= rdi)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    __fprintf_chk(arg2, 1, \"# entries:         %lu\\n\");\n    __fprintf_chk(arg2, 1, \"# buckets:         %lu\\n\", r12);\n    __fprintf_chk(arg2, 1, \"# buckets used:    %lu (%.2f%%)\\n\", r13);\n    /* tailcall */\n    return __fprintf_chk(arg2, 1, \"max bucket length: %lu\\n\", rbx);\n}\n\n"
        },
        {
            "funcName": "sub_405560",
            "funcStartAddr": "0x405560",
            "funcEndAddr": "0x4055b3",
            "decompiledFuncCode": "int64_t sub_405560(void* arg1, int64_t arg2)\n{\n    int64_t rbp = arg2;\n    int64_t* rax = sub_405000(arg1, arg2);\n    int64_t rsi = *rax;\n    if (rsi != 0)\n    {\n        int64_t* rbx_1 = rax;\n        while (true)\n        {\n            if (rsi != rbp)\n            {\n                if (*(arg1 + 0x38)(rbp, rsi) != 0)\n                {\n                    rbp = *rbx_1;\n                }\n                else\n                {\n                    rbx_1 = rbx_1[1];\n                    if (rbx_1 == 0)\n                    {\n                        break;\n                    }\n                    rsi = *rbx_1;\n                    continue;\n                }\n            }\n            return rbp;\n        }\n    }\n    return 0;\n}\n\n"
        },
        {
            "funcName": "sub_4055c0",
            "funcStartAddr": "0x4021d5",
            "funcEndAddr": "0x405608",
            "decompiledFuncCode": "int64_t sub_4055c0(int64_t* arg1)\n{\n    if (arg1[4] == 0)\n    {\n        return 0;\n    }\n    int64_t* rdx = *arg1;\n    int64_t rcx = arg1[1];\n    if (rdx < rcx)\n    {\n        do\n        {\n            int64_t rax_1 = *rdx;\n            if (rax_1 != 0)\n            {\n                return rax_1;\n            }\n            rdx = &rdx[2];\n        } while (rdx < rcx);\n    }\n    abort();\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_405610",
            "funcStartAddr": "0x405610",
            "funcEndAddr": "0x40567a",
            "decompiledFuncCode": "int64_t sub_405610(void* arg1, int64_t arg2)\n{\n    int64_t* rax = sub_405000(arg1, arg2);\n    int64_t* rcx = rax;\n    int64_t* rdx = rax;\n    do\n    {\n        int64_t rax_1 = *rdx;\n        rdx = rdx[1];\n        if (rax_1 == arg2)\n        {\n            if (rdx != 0)\n            {\n                return *rdx;\n            }\n            break;\n        }\n    } while (rdx != 0);\n    int64_t rdx_1 = *(arg1 + 8);\n    int64_t rax_2;\n    do\n    {\n        rcx = &rcx[2];\n        if (rdx_1 <= rcx)\n        {\n            rax_2 = 0;\n            break;\n        }\n        rax_2 = *rcx;\n    } while (rax_2 == 0);\n    return rax_2;\n}\n\n"
        },
        {
            "funcName": "sub_405680",
            "funcStartAddr": "0x405680",
            "funcEndAddr": "0x4056e4",
            "decompiledFuncCode": "int64_t sub_405680(int64_t* arg1, int64_t arg2, int64_t arg3)\n{\n    int64_t* rdx = *arg1;\n    if (arg1[1] <= rdx)\n    {\n        return 0;\n    }\n    int64_t r9 = 0;\n    do\n    {\n        int64_t r8_1 = *rdx;\n        if (r8_1 != 0)\n        {\n            if (arg3 <= r9)\n            {\n                break;\n            }\n            *(arg2 + (r9 << 3)) = r8_1;\n            int64_t* r8_2 = rdx[1];\n            int64_t rcx_1 = (r9 + 1);\n            if (r8_2 != 0)\n            {\n                do\n                {\n                    if (arg3 == rcx_1)\n                    {\n                        return arg3;\n                    }\n                    rcx_1 = (rcx_1 + 1);\n                    *((arg2 + (rcx_1 << 3)) - 8) = *r8_2;\n                    r8_2 = r8_2[1];\n                } while (r8_2 != 0);\n            }\n            r9 = rcx_1;\n        }\n        rdx = &rdx[2];\n    } while (arg1[1] > rdx);\n    return r9;\n}\n\n"
        },
        {
            "funcName": "sub_4056f0",
            "funcStartAddr": "0x4056f0",
            "funcEndAddr": "0x405768",
            "decompiledFuncCode": "int64_t sub_4056f0(int64_t* arg1, int64_t arg2, int64_t arg3)\n{\n    int64_t* r14 = *arg1;\n    int64_t rbp;\n    if (arg1[1] <= r14)\n    {\n        rbp = 0;\n    }\n    else\n    {\n        rbp = 0;\n        do\n        {\n            int64_t rdi = *r14;\n            if (rdi != 0)\n            {\n                int64_t* rbx_1 = r14;\n                while (true)\n                {\n                    if (arg2(rdi, arg3) == 0)\n                    {\n                        return rbp;\n                    }\n                    rbx_1 = rbx_1[1];\n                    rbp = (rbp + 1);\n                    if (rbx_1 == 0)\n                    {\n                        break;\n                    }\n                    rdi = *rbx_1;\n                }\n            }\n            r14 = &r14[2];\n        } while (arg1[1] > r14);\n    }\n    return rbp;\n}\n\n"
        },
        {
            "funcName": "sub_405770",
            "funcStartAddr": "0x405770",
            "funcEndAddr": "0x4057a1",
            "decompiledFuncCode": "uint64_t sub_405770(char* arg1, int64_t arg2)\n{\n    uint64_t rcx = *arg1;\n    uint64_t rdx = 0;\n    if (rcx != 0)\n    {\n        do\n        {\n            arg1 = &arg1[1];\n            int64_t rax_4 = (((rdx << 5) - rdx) + rcx);\n            rcx = *arg1;\n            rdx = (COMBINE(0, rax_4) % arg2);\n        } while (rcx != 0);\n    }\n    return rdx;\n}\n\n"
        },
        {
            "funcName": "sub_4057b0",
            "funcStartAddr": "0x4057b0",
            "funcEndAddr": "0x4057d0",
            "decompiledFuncCode": "void sub_4057b0(int64_t* arg1)\n{\n    arg1[2] = 0;\n    *arg1 = 0x3f80000000000000;\n    arg1[1] = 0x3fb4fdf43f4ccccd;\n}\n\n"
        },
        {
            "funcName": "sub_4057d0",
            "funcStartAddr": "0x4057d0",
            "funcEndAddr": "0x40595a",
            "decompiledFuncCode": "int64_t* sub_4057d0(int64_t arg1, void* arg2, int64_t arg3, int64_t arg4, \n    int64_t arg5)\n{\n    int64_t r13 = arg4;\n    int64_t r12 = arg3;\n    int64_t rbp = arg1;\n    if (arg3 == 0)\n    {\n        r12 = 0x404fe0;\n    }\n    if (arg4 == 0)\n    {\n        r13 = 0x404ff0;\n    }\n    int64_t* rax = malloc(0x50);\n    int64_t* rbx = rax;\n    if (rax != 0)\n    {\n        int64_t* rdi = &rax[5];\n        float zmm1_1;\n        if (arg2 == 0)\n        {\n            rax[5] = 0x40cfa0;\n            zmm1_1 = 0.800000012f;\n            if (sub_405150(rdi) != 0)\n            {\n                float zmm0_1;\n                if (rbp < 0)\n                {\n                label_405943:\n                    zmm0_1 = ((rbp >> 1) | (rbp & 1));\n                    zmm0_1 = (zmm0_1 + zmm0_1);\n                label_4058f7:\n                    zmm0_1 = (zmm0_1 / zmm1_1);\n                    if ((!(zmm0_1 < 1.84467441e+19f | (FCMP_UO(zmm0_1, 1.84467441e+19f)))))\n                    {\n                        goto label_4058b0;\n                    }\n                    if ((zmm0_1 < 9.22337204e+18f | (FCMP_UO(zmm0_1, 9.22337204e+18f))))\n                    {\n                        rbp = (truncf(zmm0_1, arg4));\n                    }\n                    else\n                    {\n                        zmm0_1 = (zmm0_1 - 9.22337204e+18f);\n                        rbp = ((truncf(zmm0_1, arg4)) ^ 0x8000000000000000);\n                    }\n                    goto label_405843;\n                }\n            label_4058f2:\n                zmm0_1 = rbp;\n                goto label_4058f7;\n            }\n        label_4058b0:\n            int64_t* rdi_3 = rbx;\n            rbx = nullptr;\n            free(rdi_3);\n        }\n        else\n        {\n            rax[5] = arg2;\n            if (sub_405150(rdi) == 0)\n            {\n                goto label_4058b0;\n            }\n            if (*(arg2 + 0x10) == 0)\n            {\n                zmm1_1 = *(arg2 + 8);\n                if (rbp < 0)\n                {\n                    goto label_405943;\n                }\n                goto label_4058f2;\n            }\n        label_405843:\n            size_t rax_2 = sub_404f40(rbp);\n            uint64_t rax_3;\n            rax_3 = (rax_2 >> 0x3d) != 0;\n            uint64_t rax_4 = rax_3;\n            if ((TEST_BITQ(rax_2, 0x3c)))\n            {\n                goto label_4058b0;\n            }\n            if (rax_4 != 0)\n            {\n                goto label_4058b0;\n            }\n            rbx[2] = rax_2;\n            if (rax_2 == 0)\n            {\n                goto label_4058b0;\n            }\n            int64_t rax_5 = calloc(rax_2, 0x10);\n            *rbx = rax_5;\n            if (rax_5 == 0)\n            {\n                goto label_4058b0;\n            }\n            rbx[3] = 0;\n            rbx[4] = 0;\n            rbx[1] = ((rax_2 << 4) + rax_5);\n            rbx[6] = r12;\n            rbx[7] = r13;\n            rbx[8] = arg5;\n            rbx[9] = 0;\n        }\n    }\n    return rbx;\n}\n\n"
        },
        {
            "funcName": "sub_405960",
            "funcStartAddr": "0x405960",
            "funcEndAddr": "0x405a08",
            "decompiledFuncCode": "void sub_405960(int64_t* arg1)\n{\n    int64_t* r12 = *arg1;\n    if (r12 < arg1[1])\n    {\n        while (true)\n        {\n            if (*r12 == 0)\n            {\n                r12 = &r12[2];\n                if (arg1[1] <= r12)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                int64_t* rbx_1 = r12[1];\n                int64_t rax = arg1[8];\n                if (rbx_1 != 0)\n                {\n                    int64_t* rdx_1;\n                    do\n                    {\n                        if (rax != 0)\n                        {\n                            rax(*rbx_1);\n                            rax = arg1[8];\n                        }\n                        rdx_1 = rbx_1[1];\n                        int64_t rcx_1 = arg1[9];\n                        *rbx_1 = 0;\n                        rbx_1[1] = rcx_1;\n                        arg1[9] = rbx_1;\n                        rbx_1 = rdx_1;\n                    } while (rdx_1 != 0);\n                }\n                if (rax != 0)\n                {\n                    rax(*r12);\n                }\n                *r12 = 0;\n                r12 = &r12[2];\n                r12[-1] = 0;\n                if (arg1[1] <= r12)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    arg1[3] = 0;\n    arg1[4] = 0;\n}\n\n"
        },
        {
            "funcName": "sub_405a10",
            "funcStartAddr": "0x405a10",
            "funcEndAddr": "0x405ae6",
            "decompiledFuncCode": "int64_t sub_405a10(int64_t* arg1)\n{\n    int64_t* rbp = *arg1;\n    int64_t rax = arg1[1];\n    if (((arg1[8] != 0 && arg1[4] != 0) && rbp < rax))\n    {\n        while (true)\n        {\n            int64_t rdi = *rbp;\n            if (rdi == 0)\n            {\n                rbp = &rbp[2];\n                if (rax <= rbp)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                int64_t* rbx_1 = rbp;\n                while (true)\n                {\n                    arg1[8](rdi);\n                    rbx_1 = rbx_1[1];\n                    if (rbx_1 == 0)\n                    {\n                        break;\n                    }\n                    rdi = *rbx_1;\n                }\n                rax = arg1[1];\n                rbp = &rbp[2];\n                if (rax <= rbp)\n                {\n                    break;\n                }\n            }\n        }\n        rbp = *arg1;\n    }\n    if ((((arg1[8] == 0 || (arg1[8] != 0 && arg1[4] == 0)) || ((arg1[8] != 0 && arg1[4] != 0) && rbp < rax)) && rbp < rax))\n    {\n        do\n        {\n            void* rdi_1 = rbp[1];\n            if (rdi_1 != 0)\n            {\n                void* rbx_2;\n                do\n                {\n                    rbx_2 = *(rdi_1 + 8);\n                    free(rdi_1);\n                    rdi_1 = rbx_2;\n                } while (rbx_2 != 0);\n            }\n            rbp = &rbp[2];\n        } while (arg1[1] > rbp);\n    }\n    void* rdi_2 = arg1[9];\n    if (rdi_2 != 0)\n    {\n        void* rbx_3;\n        do\n        {\n            rbx_3 = *(rdi_2 + 8);\n            free(rdi_2);\n            rdi_2 = rbx_3;\n        } while (rbx_3 != 0);\n    }\n    free(*arg1);\n    /* tailcall */\n    return free(arg1);\n}\n\n"
        },
        {
            "funcName": "sub_405af0",
            "funcStartAddr": "0x4021da",
            "funcEndAddr": "0x405cea",
            "decompiledFuncCode": "uint64_t sub_405af0(int64_t* arg1, int64_t arg2)\n{\n    void* r12 = arg1[5];\n    int32_t rbx_4;\n    if (*(r12 + 0x10) == 0)\n    {\n        float zmm0;\n        if (arg2 < 0)\n        {\n            zmm0 = ((arg2 >> 1) | (arg2 & 1));\n            zmm0 = (zmm0 + zmm0);\n        }\n        else\n        {\n            zmm0 = arg2;\n        }\n        zmm0 = (zmm0 / *(r12 + 8));\n        if ((!(zmm0 < 1.84467441e+19f | (FCMP_UO(zmm0, 1.84467441e+19f)))))\n        {\n        label_405c60:\n            rbx_4 = 0;\n        label_405c6c:\n            return rbx_4;\n        }\n        if ((zmm0 < 9.22337204e+18f | (FCMP_UO(zmm0, 9.22337204e+18f))))\n        {\n            arg2 = (truncf(zmm0, 0x28));\n        }\n        else\n        {\n            zmm0 = (zmm0 - 9.22337204e+18f);\n            arg2 = ((truncf(zmm0, 0x28)) ^ 0x8000000000000000);\n        }\n    }\n    size_t rax_1 = sub_404f40(arg2);\n    uint64_t rax_2;\n    rax_2 = (rax_1 >> 0x3d) != 0;\n    uint64_t rax_3 = rax_2;\n    if ((rax_1 << 3) < 0)\n    {\n        rax_3 = 1;\n    }\n    if (rax_1 == 0)\n    {\n        goto label_405c60;\n    }\n    if (rax_3 != 0)\n    {\n        goto label_405c60;\n    }\n    if (arg1[2] == rax_1)\n    {\n        return 1;\n    }\n    int64_t rax_4 = calloc(rax_1, 0x10);\n    int64_t var_68 = rax_4;\n    if (rax_4 == 0)\n    {\n        goto label_405c60;\n    }\n    int64_t rbx_3 = ((rax_1 << 4) + rax_4);\n    int64_t var_38_1 = arg1[6];\n    int64_t var_48_1 = 0;\n    int64_t var_30_1 = arg1[7];\n    void* var_40_1 = r12;\n    int64_t var_28_1 = arg1[8];\n    int64_t rax_8 = arg1[9];\n    int32_t rax_9 = sub_4051d0(&var_68, arg1, 0);\n    rbx_4 = rax_9;\n    if (rax_9 == 0)\n    {\n        arg1[9] = rax_8;\n        if ((sub_4051d0(arg1, &var_68, 1) != 0 && sub_4051d0(arg1, &var_68, 0) != 0))\n        {\n            free(var_68);\n            return rbx_4;\n        }\n        abort();\n        /* no return */\n    }\n    free(*arg1);\n    *arg1 = var_68;\n    arg1[1] = rbx_3;\n    arg1[2] = rax_1;\n    arg1[3] = 0;\n    arg1[9] = rax_8;\n    goto label_405c6c;\n}\n\n"
        },
        {
            "funcName": "sub_405cf0",
            "funcStartAddr": "0x4021df",
            "funcEndAddr": "0x405f64",
            "decompiledFuncCode": "int64_t sub_405cf0(int64_t* arg1, int64_t arg2, int64_t* arg3)\n{\n    if (arg2 != 0)\n    {\n        int64_t* var_20;\n        int64_t rax_1 = sub_405030(arg1, arg2, &var_20, 0);\n        if (rax_1 != 0)\n        {\n            if (arg3 != 0)\n            {\n                *arg3 = rax_1;\n            }\n            return 0;\n        }\n        int64_t rax_3 = arg1[3];\n        int64_t rax_4;\n        void* rdx_2;\n        float zmm1;\n        if (rax_3 < 0)\n        {\n            rax_4 = arg1[2];\n            zmm1 = ((rax_3 >> 1) | (rax_3 & 1));\n            rdx_2 = arg1[5];\n            zmm1 = (zmm1 + zmm1);\n        }\n        else\n        {\n            rdx_2 = arg1[5];\n            zmm1 = rax_3;\n            rax_4 = arg1[2];\n        }\n        float zmm0_1;\n        if (((rax_3 < 0 && rax_4 >= 0) || (rax_3 >= 0 && rax_4 >= 0)))\n        {\n            zmm0_1 = (rax_4 * *(rdx_2 + 8));\n            if ((!((!(zmm1 == zmm0_1 | (FCMP_UO(zmm1, zmm0_1)))) && (!(zmm1 < zmm0_1 | (FCMP_UO(zmm1, zmm0_1)))))))\n            {\n            label_405d72:\n                int64_t* r12_2 = var_20;\n                if (*r12_2 == 0)\n                {\n                    *r12_2 = arg2;\n                    arg1[4] = (arg1[4] + 1);\n                    arg1[3] = (arg1[3] + 1);\n                    return 1;\n                }\n                int64_t* rax_5 = arg1[9];\n                if (rax_5 == 0)\n                {\n                    rax_5 = malloc(0x10);\n                }\n                else\n                {\n                    arg1[9] = rax_5[1];\n                }\n                int64_t rdx_4 = r12_2[1];\n                *rax_5 = arg2;\n                rax_5[1] = rdx_4;\n                r12_2[1] = rax_5;\n                arg1[4] = (arg1[4] + 1);\n                return 1;\n                goto label_405e84;\n            }\n        label_405e15:\n            sub_405150(&arg1[5]);\n            void* rdx_8 = arg1[5];\n            int64_t rax_9 = arg1[2];\n            float zmm2_1 = *(rdx_8 + 8);\n            float zmm0_2;\n            if (rax_9 < 0)\n            {\n                zmm0_2 = ((rax_9 >> 1) | (rax_9 & 1));\n                zmm0_2 = (zmm0_2 + zmm0_2);\n            }\n            else\n            {\n                zmm0_2 = rax_9;\n            }\n            int64_t rax_10 = arg1[3];\n            float zmm1_1;\n            if (rax_10 < 0)\n            {\n                zmm1_1 = ((rax_10 >> 1) | (rax_10 & 1));\n                zmm1_1 = (zmm1_1 + zmm1_1);\n            }\n            else\n            {\n                zmm1_1 = rax_10;\n            }\n            float zmm3_1 = (zmm2_1 * zmm0_2);\n            if (((zmm1_1 == zmm3_1 | (FCMP_UO(zmm1_1, zmm3_1))) || (zmm1_1 < zmm3_1 | (FCMP_UO(zmm1_1, zmm3_1)))))\n            {\n                goto label_405d72;\n            }\n            zmm0_2 = (zmm0_2 * *(rdx_8 + 0xc));\n            if (*(rdx_8 + 0x10) == 0)\n            {\n                zmm0_2 = (zmm0_2 * zmm2_1);\n            }\n            if ((!(zmm0_2 < 1.84467441e+19f | (FCMP_UO(zmm0_2, 1.84467441e+19f)))))\n            {\n            label_405e84:\n                return 0xffffffff;\n            }\n            int64_t rsi;\n            if ((!(zmm0_2 < 9.22337204e+18f | (FCMP_UO(zmm0_2, 9.22337204e+18f)))))\n            {\n                zmm0_2 = (zmm0_2 - 9.22337204e+18f);\n                rsi = ((truncf(zmm0_2, arg1)) ^ 0x8000000000000000);\n            }\n            else\n            {\n                rsi = (truncf(zmm0_2, arg1));\n            }\n            if (sub_405af0(arg1, rsi) == 0)\n            {\n                goto label_405e84;\n            }\n            if (sub_405030(arg1, arg2, &var_20, 0) == 0)\n            {\n                goto label_405d72;\n            }\n        }\n        if (((rax_3 < 0 && rax_4 < 0) || (rax_3 >= 0 && rax_4 < 0)))\n        {\n            zmm0_1 = ((rax_4 >> 1) | (rax_4 & 1));\n            zmm0_1 = (zmm0_1 + zmm0_1);\n            zmm0_1 = (zmm0_1 * *(rdx_2 + 8));\n            if ((!((zmm1 == zmm0_1 | (FCMP_UO(zmm1, zmm0_1))) || (zmm1 < zmm0_1 | (FCMP_UO(zmm1, zmm0_1))))))\n            {\n                goto label_405e15;\n            }\n            goto label_405d72;\n        }\n    }\n    abort();\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_405f70",
            "funcStartAddr": "0x405f70",
            "funcEndAddr": "0x405fab",
            "decompiledFuncCode": "int64_t sub_405f70(int64_t* arg1, int64_t arg2)\n{\n    int64_t rbx = arg2;\n    int64_t var_10;\n    int32_t rax = sub_405cf0(arg1, arg2, &var_10);\n    if (rax == 0xffffffff)\n    {\n        return 0;\n    }\n    if (rax == 0)\n    {\n        rbx = var_10;\n    }\n    return rbx;\n}\n\n"
        },
        {
            "funcName": "sub_405fb0",
            "funcStartAddr": "0x405fb0",
            "funcEndAddr": "0x406187",
            "decompiledFuncCode": "int64_t sub_405fb0(int64_t* arg1)\n{\n    int64_t* var_20;\n    int64_t rsi;\n    int64_t rax = sub_405030(arg1, rsi, &var_20, 1);\n    if (rax != 0)\n    {\n        int64_t* rax_1 = var_20;\n        arg1[4] = (arg1[4] - 1);\n        if (*rax_1 == 0)\n        {\n            int64_t rax_3 = arg1[3];\n            int64_t rax_4 = (rax_3 - 1);\n            arg1[3] = rax_4;\n            int64_t rax_5;\n            float* rdx_1;\n            float zmm0_1;\n            if ((rax_3 - 1) < 0)\n            {\n                rax_5 = arg1[2];\n                zmm0_1 = ((rax_4 >> 1) | (rax_4 & 1));\n                rdx_1 = arg1[5];\n                zmm0_1 = (zmm0_1 + zmm0_1);\n            }\n            else\n            {\n                rdx_1 = arg1[5];\n                zmm0_1 = rax_4;\n                rax_5 = arg1[2];\n            }\n            float zmm1;\n            if ((((rax_3 - 1) < 0 && rax_5 >= 0) || ((rax_3 - 1) >= 0 && rax_5 >= 0)))\n            {\n                zmm1 = rax_5;\n            }\n            if ((((rax_3 - 1) < 0 && rax_5 < 0) || ((rax_3 - 1) >= 0 && rax_5 < 0)))\n            {\n                zmm1 = ((rax_5 >> 1) | (rax_5 & 1));\n                zmm1 = (zmm1 + zmm1);\n            }\n            zmm1 = (zmm1 * *rdx_1);\n            if ((!((zmm1 == zmm0_1 | (FCMP_UO(zmm1, zmm0_1))) || (zmm1 < zmm0_1 | (FCMP_UO(zmm1, zmm0_1))))))\n            {\n                sub_405150(&arg1[5]);\n                int64_t rax_6 = arg1[2];\n                int32_t* rdx_2 = arg1[5];\n                float zmm0_2;\n                if (rax_6 < 0)\n                {\n                    zmm0_2 = ((rax_6 >> 1) | (rax_6 & 1));\n                    zmm0_2 = (zmm0_2 + zmm0_2);\n                }\n                else\n                {\n                    zmm0_2 = rax_6;\n                }\n                int64_t rax_7 = arg1[3];\n                float zmm1_1;\n                if (rax_7 < 0)\n                {\n                    zmm1_1 = ((rax_7 >> 1) | (rax_7 & 1));\n                    zmm1_1 = (zmm1_1 + zmm1_1);\n                }\n                else\n                {\n                    zmm1_1 = rax_7;\n                }\n                float zmm2_1 = (*rdx_2 * zmm0_2);\n                if ((!((zmm2_1 == zmm1_1 | (FCMP_UO(zmm2_1, zmm1_1))) || (zmm2_1 < zmm1_1 | (FCMP_UO(zmm2_1, zmm1_1))))))\n                {\n                    zmm0_2 = (zmm0_2 * rdx_2[1]);\n                    if (rdx_2[4] == 0)\n                    {\n                        zmm0_2 = (zmm0_2 * rdx_2[2]);\n                    }\n                    int64_t rsi_1;\n                    if ((!(zmm0_2 < 9.22337204e+18f | (FCMP_UO(zmm0_2, 9.22337204e+18f)))))\n                    {\n                        zmm0_2 = (zmm0_2 - 9.22337204e+18f);\n                        rsi_1 = ((truncf(zmm0_2, arg1)) ^ 0x8000000000000000);\n                    }\n                    else\n                    {\n                        rsi_1 = (truncf(zmm0_2, arg1));\n                    }\n                    if (sub_405af0(arg1, rsi_1) == 0)\n                    {\n                        void* rdi_2 = arg1[9];\n                        if (rdi_2 != 0)\n                        {\n                            void* r12_1;\n                            do\n                            {\n                                r12_1 = *(rdi_2 + 8);\n                                free(rdi_2);\n                                rdi_2 = r12_1;\n                            } while (r12_1 != 0);\n                        }\n                        arg1[9] = 0;\n                    }\n                }\n            }\n        }\n    }\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_406190",
            "funcStartAddr": "0x406190",
            "funcEndAddr": "0x4061b7",
            "decompiledFuncCode": "uint64_t sub_406190(int64_t* arg1, int64_t arg2)\n{\n    return (COMBINE(0, (sub_40a7f0(*arg1, arg2) ^ arg1[1])) % arg2);\n}\n\n"
        },
        {
            "funcName": "sub_4061c0",
            "funcStartAddr": "0x4061c0",
            "funcEndAddr": "0x4061cd",
            "decompiledFuncCode": "uint64_t sub_4061c0(void* arg1, int64_t arg2)\n{\n    return (COMBINE(0, *(arg1 + 8)) % arg2);\n}\n\n"
        },
        {
            "funcName": "sub_4061d0",
            "funcStartAddr": "0x4061d0",
            "funcEndAddr": "0x4061f5",
            "decompiledFuncCode": "int64_t sub_4061d0(int64_t* arg1, int64_t* arg2)\n{\n    if ((arg1[1] == arg2[1] && arg1[2] == arg2[2]))\n    {\n        /* tailcall */\n        return sub_4080f0(*arg1, *arg2);\n    }\n    return 0;\n}\n\n"
        },
        {
            "funcName": "sub_406200",
            "funcStartAddr": "0x406200",
            "funcEndAddr": "0x406233",
            "decompiledFuncCode": "int64_t sub_406200(int64_t* arg1, int64_t* arg2)\n{\n    if ((arg1[1] == arg2[1] && arg1[2] == arg2[2]))\n    {\n        int64_t rax;\n        rax = strcmp(*arg1, *arg2) == 0;\n        return rax;\n    }\n    return 0;\n}\n\n"
        },
        {
            "funcName": "sub_406240",
            "funcStartAddr": "0x406240",
            "funcEndAddr": "0x406255",
            "decompiledFuncCode": "int64_t sub_406240(int64_t* arg1)\n{\n    free(*arg1);\n    /* tailcall */\n    return free(arg1);\n}\n\n"
        },
        {
            "funcName": "sub_406260",
            "funcStartAddr": "0x406260",
            "funcEndAddr": "0x4062f9",
            "decompiledFuncCode": "char* sub_406260(char* arg1)\n{\n    if (arg1 == 0)\n    {\n        fwrite(\"A NULL argv[0] was passed throug\u2026\", 1, 0x37, stderr);\n        abort();\n        /* no return */\n    }\n    void* rbx = arg1;\n    char* rax = strrchr(arg1, 0x2f);\n    if (rax != 0)\n    {\n        void* r8_1 = &rax[1];\n        int64_t rdx_2 = (r8_1 - rbx);\n        bool c_1 = rdx_2 < 6;\n        bool z_1 = rdx_2 == 6;\n        if ((!(z_1 || (rdx_2 - 6) < 0 != (rdx_2 - 6))))\n        {\n            void* rsi_1 = &rax[-6];\n            void* const rdi = \"/.libs/\";\n            int64_t rcx_1 = 7;\n            while (rcx_1 != 0)\n            {\n                char temp0_1 = *rsi_1;\n                char temp1_1 = *rdi;\n                c_1 = temp0_1 < temp1_1;\n                z_1 = temp0_1 == temp1_1;\n                rsi_1 = (rsi_1 + 1);\n                rdi = (rdi + 1);\n                rcx_1 = (rcx_1 - 1);\n                if ((!z_1))\n                {\n                    break;\n                }\n            }\n            rdx_2 = ((!z_1) && (!c_1));\n            rdx_2 = (rdx_2 - 0);\n            bool c_2 = false;\n            bool z_2 = (rdx_2 & rdx_2) == 0;\n            if (z_2)\n            {\n                void* const rdi_1 = &data_40d020;\n                int64_t rcx_2 = 3;\n                void* rsi_2 = r8_1;\n                rbx = r8_1;\n                while (rcx_2 != 0)\n                {\n                    char temp2_1 = *rsi_2;\n                    char temp3_1 = *rdi_1;\n                    c_2 = temp2_1 < temp3_1;\n                    z_2 = temp2_1 == temp3_1;\n                    rsi_2 = (rsi_2 + 1);\n                    rdi_1 = (rdi_1 + 1);\n                    rcx_2 = (rcx_2 - 1);\n                    if ((!z_2))\n                    {\n                        break;\n                    }\n                }\n                rdx_2 = ((!z_2) && (!c_2));\n                rdx_2 = (rdx_2 - 0);\n                if (rdx_2 == 0)\n                {\n                    rbx = &rax[4];\n                    program_invocation_short_name = rbx;\n                }\n            }\n        }\n    }\n    data_611410 = rbx;\n    __progname_full = rbx;\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_406300",
            "funcStartAddr": "0x406300",
            "funcEndAddr": "0x4063f2",
            "decompiledFuncCode": "char* sub_406300(char* arg1, int32_t arg2)\n{\n    char* rax = dcgettext(nullptr, arg1, 5);\n    char* rbx = rax;\n    if (arg1 == rax)\n    {\n        char* rax_2 = sub_40a830();\n        char rdx_2 = (*rax_2 & 0xdf);\n        if (rdx_2 != 0x55)\n        {\n            if (rdx_2 != 0x47)\n            {\n            label_4063e1:\n                void* const rbx_1 = &data_40d024;\n                if (arg2 != 9)\n                {\n                    rbx_1 = \"'\";\n                }\n                return rbx_1;\n            }\n            if ((rax_2[1] & 0xdf) != 0x42)\n            {\n                goto label_4063e1;\n            }\n            if (rax_2[2] != 0x31)\n            {\n                goto label_4063e1;\n            }\n            if (rax_2[3] != 0x38)\n            {\n                goto label_4063e1;\n            }\n            if (rax_2[4] != 0x30)\n            {\n                goto label_4063e1;\n            }\n            if (rax_2[5] != 0x33)\n            {\n                goto label_4063e1;\n            }\n            if (rax_2[6] != 0x30)\n            {\n                goto label_4063e1;\n            }\n            if (rax_2[7] != 0)\n            {\n                goto label_4063e1;\n            }\n            bool cond:2_1 = *rbx != 0x60;\n            rbx = &data_40d02d;\n            if (cond:2_1)\n            {\n                rbx = &data_40d02a;\n            }\n        }\n        else\n        {\n            if ((rax_2[1] & 0xdf) != 0x54)\n            {\n                goto label_4063e1;\n            }\n            if ((rax_2[2] & 0xdf) != 0x46)\n            {\n                goto label_4063e1;\n            }\n            if (rax_2[3] != 0x2d)\n            {\n                goto label_4063e1;\n            }\n            if (rax_2[4] != 0x38)\n            {\n                goto label_4063e1;\n            }\n            if (rax_2[5] != 0)\n            {\n                goto label_4063e1;\n            }\n            bool cond:1_1 = *rbx != 0x60;\n            rbx = &data_40d031;\n            if (cond:1_1)\n            {\n                rbx = &data_40d026;\n            }\n        }\n    }\n    return rbx;\n}\n\n"
        },
        {
            "funcName": "sub_406400",
            "funcStartAddr": "0x4021e4",
            "funcEndAddr": "0x407621",
            "decompiledFuncCode": "int64_t sub_406400(char* arg1, uint64_t arg2, uint64_t arg3, uint64_t arg4, \n    uint32_t arg5, int32_t arg6, int64_t arg7, char* arg8, char* arg9)\n{\n    char* r15 = arg1;\n    uint64_t r14 = arg2;\n    uint32_t r13 = arg5;\n    uint64_t rax;\n    uint64_t rdx;\n    rax = __ctype_get_mb_cur_max();\n    int32_t rbp_1 = (arg6 & 2);\n    bool var_5c = rbp_1 != 0;\n    bool cond:1 = r13 == 0xa;\n    if (r13 > 0xa)\n    {\n        abort();\n        /* no return */\n    }\n    uint64_t r11 = arg4;\n    uint64_t var_c0;\n    char var_a9;\n    uint64_t var_a0_1;\n    char const* const var_78_1;\n    uint64_t var_70;\n    char var_5b_1;\n    uint64_t rax_1;\n    int64_t rbx_1;\n    uint32_t r10;\n    if ((r13 == 1 || (r13 == 4 && rbp_1 != 0)))\n    {\n        var_a9 = 1;\n        r10 = 0;\n        rbx_1 = 0;\n        r13 = 2;\n        var_5b_1 = 0;\n        var_70 = 0;\n        var_5c = true;\n        var_c0 = 0;\n        var_a0_1 = 1;\n        var_78_1 = \"'\";\n    label_406498:\n        while (true)\n        {\n            uint64_t r9 = r11;\n            int64_t r12_1 = 0;\n            uint32_t r11_1 = r13;\n            while (true)\n            {\n                r13 = r9 != r12_1;\n                if (r9 == -1)\n                {\n                    r13 = *(arg3 + r12_1) != 0;\n                }\n                uint32_t r13_1;\n                if (r13 == 0)\n                {\n                    r11 = r9;\n                    rdx = r11_1 == 2;\n                    if ((rbx_1 == 0 && (var_5c & rdx) != 0))\n                    {\n                        r13_1 = 2;\n                    label_40680c:\n                        if (var_c0 != 0)\n                        {\n                            r13_1 = 4;\n                        }\n                        goto label_406854;\n                    }\n                    rax_1 = (var_5c ^ 1);\n                    rdx = (rdx & rax_1);\n                    if (rdx == 0)\n                    {\n                        rdx = rax_1;\n                    }\n                    else if (var_5b_1 != 0)\n                    {\n                        if (var_a9 != 0)\n                        {\n                            rbx_1 = sub_406400(r15, var_70, arg3, r11, 5, arg6, arg7, arg8, arg9);\n                        }\n                        else\n                        {\n                            rax_1 = r14 == 0;\n                            rdx = var_70 != 0;\n                            rax_1 = (rax_1 & rdx);\n                            if (rax_1 != 0)\n                            {\n                                r14 = var_70;\n                                break;\n                            }\n                            rdx = var_5b_1;\n                        }\n                    }\n                    if (((rdx == 0 || (rdx != 0 && var_5b_1 == 0)) || ((rdx != 0 && var_5b_1 != 0) && var_a9 == 0)))\n                    {\n                        if ((var_78_1 != 0 && rdx != 0))\n                        {\n                            char const rdx_17 = *var_78_1;\n                            if (rdx_17 != 0)\n                            {\n                                void* rax_51 = (var_78_1 - rbx_1);\n                                do\n                                {\n                                    if (r14 > rbx_1)\n                                    {\n                                        r15[rbx_1] = rdx_17;\n                                    }\n                                    rbx_1 = (rbx_1 + 1);\n                                    rdx_17 = *(rax_51 + rbx_1);\n                                } while (rdx_17 != 0);\n                            }\n                        }\n                        if (r14 > rbx_1)\n                        {\n                            r15[rbx_1] = 0;\n                        }\n                    }\n                    goto label_40686b;\n                }\n                rax_1 = r11_1 != 2;\n                rax_1 = (rax_1 & var_c0);\n                char* r8 = (arg3 + r12_1);\n                uint64_t var_b8;\n                var_b8 = rax_1;\n                uint32_t rax_8;\n                uint64_t rax_12;\n                char rax_14;\n                int32_t rcx_2;\n                uint64_t rbp_3;\n                if (rax_1 == 0)\n                {\n                    rbp_3 = *r8;\n                    if (rbp_3 > 0x7e)\n                    {\n                        goto label_4069a5;\n                    }\n                    switch (rbp_3)\n                    {\n                        case 0:\n                        {\n                            if (var_c0 == 0)\n                            {\n                                if ((arg6 & 1) != 0)\n                                {\n                                    r12_1 = (r12_1 + 1);\n                                    continue;\n                                }\n                                else\n                                {\n                                    var_b8 = 0;\n                                    rdx = r11_1 == 2;\n                                    r13 = 0;\n                                    rbp_3 = 0;\n                                }\n                                goto label_4065f5;\n                            }\n                            goto label_4068e0;\n                        }\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 0xe:\n                        case 0xf:\n                        case 0x10:\n                        case 0x11:\n                        case 0x12:\n                        case 0x13:\n                        case 0x14:\n                        case 0x15:\n                        case 0x16:\n                        case 0x17:\n                        case 0x18:\n                        case 0x19:\n                        case 0x1a:\n                        case 0x1b:\n                        case 0x1c:\n                        case 0x1d:\n                        case 0x1e:\n                        case 0x1f:\n                        case 0x40:\n                        {\n                            goto label_4069a5;\n                        }\n                        case 7:\n                        {\n                            rbp_3 = 7;\n                            rcx_2 = 0x61;\n                            rdx = r11_1 == 2;\n                            goto label_4067d0;\n                        }\n                        case 8:\n                        {\n                            rbp_3 = 8;\n                            rcx_2 = 0x62;\n                            rdx = r11_1 == 2;\n                        label_4067d0:\n                            if (var_c0 == 0)\n                            {\n                                goto label_4067db;\n                            }\n                            rbp_3 = rcx_2;\n                            r13 = 0;\n                        label_406637:\n                            if (var_5c == 0)\n                            {\n                                goto label_406648;\n                            }\n                        label_406800:\n                            r13_1 = r11_1;\n                            rax_14 = rdx;\n                            r11 = r9;\n                            goto label_406808;\n                        }\n                        case 9:\n                        {\n                            rbp_3 = 9;\n                            rcx_2 = 0x74;\n                            goto label_406a3b;\n                        }\n                        case 0xa:\n                        {\n                            rbp_3 = 0xa;\n                            rcx_2 = 0x6e;\n                        label_406a3b:\n                            rdx = r11_1 == 2;\n                            bool rax_26 = (var_5c & rdx);\n                            var_b8 = rax_26;\n                            if (rax_26 != 0)\n                            {\n                            label_406a4a:\n                                r11 = r9;\n                                r13_1 = 2;\n                                goto label_40680c;\n                            }\n                            goto label_4067d0;\n                        }\n                        case 0xb:\n                        {\n                            rbp_3 = 0xb;\n                            rcx_2 = 0x76;\n                            rdx = r11_1 == 2;\n                            goto label_4067d0;\n                        }\n                        case 0xc:\n                        {\n                            rbp_3 = 0xc;\n                            rcx_2 = 0x66;\n                            rdx = r11_1 == 2;\n                            goto label_4067d0;\n                        }\n                        case 0xd:\n                        {\n                            rbp_3 = 0xd;\n                            rcx_2 = 0x72;\n                            goto label_406a3b;\n                        }\n                        case 0x20:\n                        {\n                            rbp_3 = 0x20;\n                            rdx = r11_1 == 2;\n                            goto label_4065d6;\n                        }\n                        case 0x21:\n                        case 0x22:\n                        case 0x24:\n                        case 0x26:\n                        case 0x28:\n                        case 0x29:\n                        case 0x2a:\n                        case 0x3b:\n                        case 0x3c:\n                        case 0x3d:\n                        case 0x3e:\n                        case 0x5b:\n                        case 0x5e:\n                        case 0x60:\n                        case 0x7c:\n                        {\n                            rdx = r11_1 == 2;\n                            r13 = 0;\n                        label_4065d6:\n                            if (var_5c == 0)\n                            {\n                                goto label_4065f5;\n                            }\n                            if (rdx == 0)\n                            {\n                                goto label_4065f5;\n                            }\n                            goto label_406a4a;\n                        }\n                        case 0x23:\n                        case 0x7e:\n                        {\n                            rdx = r11_1 == 2;\n                        label_4065cd:\n                            if (r12_1 != 0)\n                            {\n                                goto label_4067db;\n                            }\n                            goto label_4065d6;\n                        }\n                        case 0x25:\n                        case 0x2b:\n                        case 0x2c:\n                        case 0x2d:\n                        case 0x2e:\n                        case 0x2f:\n                        case 0x30:\n                        case 0x31:\n                        case 0x32:\n                        case 0x33:\n                        case 0x34:\n                        case 0x35:\n                        case 0x36:\n                        case 0x37:\n                        case 0x38:\n                        case 0x39:\n                        case 0x3a:\n                        case 0x41:\n                        case 0x42:\n                        case 0x43:\n                        case 0x44:\n                        case 0x45:\n                        case 0x46:\n                        case 0x47:\n                        case 0x48:\n                        case 0x49:\n                        case 0x4a:\n                        case 0x4b:\n                        case 0x4c:\n                        case 0x4d:\n                        case 0x4e:\n                        case 0x4f:\n                        case 0x50:\n                        case 0x51:\n                        case 0x52:\n                        case 0x53:\n                        case 0x54:\n                        case 0x55:\n                        case 0x56:\n                        case 0x57:\n                        case 0x58:\n                        case 0x59:\n                        case 0x5a:\n                        case 0x5d:\n                        case 0x5f:\n                        case 0x61:\n                        case 0x62:\n                        case 0x63:\n                        case 0x64:\n                        case 0x65:\n                        case 0x66:\n                        case 0x67:\n                        case 0x68:\n                        case 0x69:\n                        case 0x6a:\n                        case 0x6b:\n                        case 0x6c:\n                        case 0x6d:\n                        case 0x6e:\n                        case 0x6f:\n                        case 0x70:\n                        case 0x71:\n                        case 0x72:\n                        case 0x73:\n                        case 0x74:\n                        case 0x75:\n                        case 0x76:\n                        case 0x77:\n                        case 0x78:\n                        case 0x79:\n                        case 0x7a:\n                        {\n                        label_406a00:\n                            rdx = r11_1 == 2;\n                        label_4065f5:\n                            rax_8 = ((((var_c0 ^ 1) | rdx) ^ 1) | var_5c);\n                            if (rax_8 == 0)\n                            {\n                                goto label_4066fc;\n                            }\n                            goto label_4065ff;\n                        }\n                        case 0x27:\n                        {\n                            goto label_40677d;\n                        }\n                        case 0x3f:\n                        {\n                            goto label_40674d;\n                        }\n                        case 0x5c:\n                        {\n                            if (r11_1 != 2)\n                            {\n                                goto label_4067aa;\n                            }\n                            if (var_5c != 0)\n                            {\n                                goto label_40753d;\n                            }\n                            r12_1 = (r12_1 + 1);\n                            rax_12 = r10;\n                            r13 = 0;\n                            rbp_3 = 0x5c;\n                            goto label_406714;\n                        }\n                        case 0x7b:\n                        case 0x7d:\n                        {\n                            goto label_4065a9;\n                        }\n                    }\n                }\n                else\n                {\n                    char var_98;\n                    uint64_t var_90;\n                    uint32_t var_88;\n                    char rax_27;\n                    char rax_28;\n                    if (var_a0_1 != 0)\n                    {\n                        int64_t rbp_2 = (r12_1 + var_a0_1);\n                        if ((r9 == -1 && var_a0_1 > 1))\n                        {\n                            var_90 = r10;\n                            var_98 = r8;\n                            uint64_t rax_3;\n                            rax_3 = strlen(arg3);\n                            r10 = var_90;\n                            r8 = var_98;\n                            r9 = rax_3;\n                        }\n                        if (rbp_2 > r9)\n                        {\n                            goto label_406ba0;\n                        }\n                        uint64_t var_80;\n                        var_80 = r11_1;\n                        var_88 = r9;\n                        var_90 = r10;\n                        var_98 = r8;\n                        int32_t rax_4;\n                        rax_4 = memcmp(r8, var_78_1, var_a0_1);\n                        r8 = var_98;\n                        r10 = var_90;\n                        r9 = var_88;\n                        r11_1 = var_80;\n                        if (rax_4 != 0)\n                        {\n                            goto label_406ba0;\n                        }\n                        if (var_5c != 0)\n                        {\n                        label_4074f0:\n                            r13_1 = r11_1;\n                            r11 = r9;\n                        label_406854:\n                            rbx_1 = sub_406400(r15, r14, arg3, r11, r13_1, (arg6 & 0xfffffffd), 0, arg8, arg9);\n                        label_40686b:\n                            return rbx_1;\n                        }\n                        rbp_3 = *r8;\n                        if (rbp_3 > 0x7e)\n                        {\n                            goto label_4069a5;\n                        }\n                        switch (rbp_3)\n                        {\n                            case 0:\n                            {\n                                goto label_4068f7;\n                            }\n                            case 1:\n                            case 2:\n                            case 3:\n                            case 4:\n                            case 5:\n                            case 6:\n                            case 0xe:\n                            case 0xf:\n                            case 0x10:\n                            case 0x11:\n                            case 0x12:\n                            case 0x13:\n                            case 0x14:\n                            case 0x15:\n                            case 0x16:\n                            case 0x17:\n                            case 0x18:\n                            case 0x19:\n                            case 0x1a:\n                            case 0x1b:\n                            case 0x1c:\n                            case 0x1d:\n                            case 0x1e:\n                            case 0x1f:\n                            case 0x40:\n                            {\n                                goto label_4069a5;\n                            }\n                            case 7:\n                            {\n                                rbp_3 = 0x61;\n                            label_4068c0:\n                                r13 = 0;\n                                goto label_40667b;\n                            }\n                            case 8:\n                            {\n                                rdx = 0;\n                                r13 = 0;\n                                rbp_3 = 0x62;\n                            label_406648:\n                                uint32_t rax_10;\n                                rax_10 = ((r10 ^ 1) & rdx);\n                                if (rax_10 != 0)\n                                {\n                                    if (r14 > rbx_1)\n                                    {\n                                        r15[rbx_1] = 0x27;\n                                    }\n                                    if ((rbx_1 + 1) < r14)\n                                    {\n                                        r15[(rbx_1 + 1)] = 0x24;\n                                    }\n                                    if ((rbx_1 + 2) < r14)\n                                    {\n                                        r15[(rbx_1 + 2)] = 0x27;\n                                    }\n                                    rbx_1 = (rbx_1 + 3);\n                                    r10 = rax_10;\n                                }\n                            label_40667b:\n                                if (r14 <= rbx_1)\n                                {\n                                    goto label_406685;\n                                }\n                                r15[rbx_1] = 0x5c;\n                            label_406685:\n                                rbx_1 = (rbx_1 + 1);\n                                r12_1 = (r12_1 + 1);\n                                goto label_40668d;\n                            }\n                            case 9:\n                            {\n                                goto label_406870;\n                            }\n                            case 0xa:\n                            {\n                                goto label_4067e8;\n                            }\n                            case 0xb:\n                            {\n                                goto label_4068d0;\n                            }\n                            case 0xc:\n                            {\n                                goto label_4068b0;\n                            }\n                            case 0xd:\n                            {\n                                goto label_406899;\n                            }\n                            case 0x20:\n                            {\n                                rax_27 = var_b8;\n                                goto label_406bfa;\n                            }\n                            case 0x21:\n                            case 0x22:\n                            case 0x24:\n                            case 0x26:\n                            case 0x28:\n                            case 0x29:\n                            case 0x2a:\n                            case 0x3b:\n                            case 0x3c:\n                            case 0x3d:\n                            case 0x3e:\n                            case 0x5b:\n                            case 0x5e:\n                            case 0x60:\n                            case 0x7c:\n                            {\n                                goto label_406885;\n                            }\n                            case 0x23:\n                            case 0x7e:\n                            {\n                                rax_28 = var_b8;\n                                goto label_406bda;\n                            }\n                            case 0x25:\n                            case 0x2b:\n                            case 0x2c:\n                            case 0x2d:\n                            case 0x2e:\n                            case 0x2f:\n                            case 0x30:\n                            case 0x31:\n                            case 0x32:\n                            case 0x33:\n                            case 0x34:\n                            case 0x35:\n                            case 0x36:\n                            case 0x37:\n                            case 0x38:\n                            case 0x39:\n                            case 0x3a:\n                            case 0x41:\n                            case 0x42:\n                            case 0x43:\n                            case 0x44:\n                            case 0x45:\n                            case 0x46:\n                            case 0x47:\n                            case 0x48:\n                            case 0x49:\n                            case 0x4a:\n                            case 0x4b:\n                            case 0x4c:\n                            case 0x4d:\n                            case 0x4e:\n                            case 0x4f:\n                            case 0x50:\n                            case 0x51:\n                            case 0x52:\n                            case 0x53:\n                            case 0x54:\n                            case 0x55:\n                            case 0x56:\n                            case 0x57:\n                            case 0x58:\n                            case 0x59:\n                            case 0x5a:\n                            case 0x5d:\n                            case 0x5f:\n                            case 0x61:\n                            case 0x62:\n                            case 0x63:\n                            case 0x64:\n                            case 0x65:\n                            case 0x66:\n                            case 0x67:\n                            case 0x68:\n                            case 0x69:\n                            case 0x6a:\n                            case 0x6b:\n                            case 0x6c:\n                            case 0x6d:\n                            case 0x6e:\n                            case 0x6f:\n                            case 0x70:\n                            case 0x71:\n                            case 0x72:\n                            case 0x73:\n                            case 0x74:\n                            case 0x75:\n                            case 0x76:\n                            case 0x77:\n                            case 0x78:\n                            case 0x79:\n                            case 0x7a:\n                            {\n                                rax_27 = var_b8;\n                                goto label_406bc2;\n                            }\n                            case 0x27:\n                            {\n                                goto label_40677d;\n                            }\n                            case 0x3f:\n                            {\n                                goto label_40674d;\n                            }\n                            case 0x5c:\n                            {\n                                goto label_4067aa;\n                            }\n                            case 0x7b:\n                            case 0x7d:\n                            {\n                                goto label_4065a9;\n                            }\n                        }\n                    }\n                    else\n                    {\n                    label_406ba0:\n                        rbp_3 = *r8;\n                        if (rbp_3 > 0x7e)\n                        {\n                        label_4069a0:\n                            var_b8 = 0;\n                        label_4069a5:\n                            uint64_t rdi_4;\n                            if (rax == 1)\n                            {\n                                r10 = r10;\n                                rdi_4 = 1;\n                                rax_12 = (*__ctype_b_loc()[rbp_3] & 0x4000);\n                                r13 = rax_12 != 0;\n                                rdx = rax_12 == 0;\n                                rdx = (rdx & var_c0);\n                            label_4069f4:\n                                if (rdx == 0)\n                                {\n                                    goto label_406a00;\n                                }\n                                rdx = var_c0;\n                                r13 = 0;\n                            label_406ef1:\n                                var_98 = r13;\n                                int32_t rsi_7 = 0;\n                                int64_t rcx_11 = (rdi_4 + r12_1);\n                                char rdi_9 = var_b8;\n                                while (true)\n                                {\n                                    if (rdx != 0)\n                                    {\n                                        rax_12 = r11_1 == 2;\n                                        if (var_5c != 0)\n                                        {\n                                            break;\n                                        }\n                                        rax_12 = (rax_12 & (r10 ^ 1));\n                                        if (rax_12 != 0)\n                                        {\n                                            if (r14 > rbx_1)\n                                            {\n                                                r15[rbx_1] = 0x27;\n                                            }\n                                            if (r14 > (rbx_1 + 1))\n                                            {\n                                                r15[(rbx_1 + 1)] = 0x24;\n                                            }\n                                            if (r14 > (rbx_1 + 2))\n                                            {\n                                                r15[(rbx_1 + 2)] = 0x27;\n                                            }\n                                            rbx_1 = (rbx_1 + 3);\n                                            r10 = rax_12;\n                                        }\n                                        if (r14 > rbx_1)\n                                        {\n                                            r15[rbx_1] = 0x5c;\n                                        }\n                                        if (r14 > (rbx_1 + 1))\n                                        {\n                                            r15[(rbx_1 + 1)] = ((rbp_3 >> 6) + 0x30);\n                                        }\n                                        if (r14 > (rbx_1 + 2))\n                                        {\n                                            int32_t rax_40;\n                                            rax_40 = (rbp_3 >> 3);\n                                            r15[(rbx_1 + 2)] = ((rax_40 & 7) + 0x30);\n                                        }\n                                        r12_1 = (r12_1 + 1);\n                                        rbx_1 = (rbx_1 + 3);\n                                        rbp_3 = ((rbp_3 & 7) + 0x30);\n                                        if (r12_1 >= rcx_11)\n                                        {\n                                            break;\n                                        }\n                                        rsi_7 = rdx;\n                                    }\n                                    else\n                                    {\n                                        rax_12 = ((rsi_7 ^ 1) & r10);\n                                        if (rdi_9 != 0)\n                                        {\n                                            if (r14 > rbx_1)\n                                            {\n                                                r15[rbx_1] = 0x5c;\n                                            }\n                                            rbx_1 = (rbx_1 + 1);\n                                        }\n                                        r12_1 = (r12_1 + 1);\n                                        if (r12_1 >= rcx_11)\n                                        {\n                                            break;\n                                        }\n                                        if (rax_12 == 0)\n                                        {\n                                            rdi_9 = 0;\n                                        }\n                                        else\n                                        {\n                                            if (r14 > rbx_1)\n                                            {\n                                                r15[rbx_1] = 0x27;\n                                            }\n                                            if (r14 > (rbx_1 + 1))\n                                            {\n                                                r15[(rbx_1 + 1)] = 0x27;\n                                            }\n                                            rbx_1 = (rbx_1 + 2);\n                                            rdi_9 = 0;\n                                            r10 = 0;\n                                        }\n                                    }\n                                    if (r14 > rbx_1)\n                                    {\n                                        r15[rbx_1] = rbp_3;\n                                    }\n                                    rbp_3 = *(arg3 + r12_1);\n                                    rbx_1 = (rbx_1 + 1);\n                                }\n                                if ((rdx == 0 && r12_1 >= rcx_11))\n                                {\n                                    r13 = var_98;\n                                    goto label_406714;\n                                }\n                                if ((rdx != 0 && var_5c != 0))\n                                {\n                                    r13_1 = r11_1;\n                                    var_c0 = rax_12;\n                                    r11 = r9;\n                                    goto label_40680c;\n                                }\n                                r13 = var_98;\n                                goto label_40668d;\n                            }\n                            mbstate_t var_40;\n                            var_40.__count = 0;\n                            var_40.__value = 0;\n                            if (r9 == -1)\n                            {\n                                var_90 = r10;\n                                var_98 = r8;\n                                r10 = var_90;\n                                r8 = var_98;\n                                r9 = strlen(arg3);\n                            }\n                            uint64_t rbx_2 = 0;\n                            char var_5a_1 = r10;\n                            char var_59_1 = rbp_3;\n                            var_88 = r15;\n                            var_98 = r9;\n                            var_90 = r11_1;\n                            while (true)\n                            {\n                                int64_t r15_1 = (r12_1 + rbx_2);\n                                char* rbp_4 = (arg3 + r15_1);\n                                uint32_t var_44;\n                                rax_12 = sub_40a230(&var_44, rbp_4, (var_98 - r15_1), &var_40);\n                                if (rax_12 != 0)\n                                {\n                                    if (rax_12 == -1)\n                                    {\n                                        rdi_4 = rbx_2;\n                                        rbp_3 = var_59_1;\n                                        r13 = 0;\n                                        r10 = var_5a_1;\n                                        r15 = var_88;\n                                        r9 = var_98;\n                                        r11_1 = var_90;\n                                        rdx = var_c0;\n                                        break;\n                                    }\n                                    if (rax_12 == -2)\n                                    {\n                                        r9 = var_98;\n                                        rax_12 = rbx_2;\n                                        rdi_4 = rbx_2;\n                                        r10 = var_5a_1;\n                                        rbp_3 = var_59_1;\n                                        r15 = var_88;\n                                        r11_1 = var_90;\n                                        if ((r15_1 < r9 && *rbp_4 != 0))\n                                        {\n                                            do\n                                            {\n                                                rax_12 = (rax_12 + 1);\n                                                if ((r12_1 + rax_12) >= r9)\n                                                {\n                                                    break;\n                                                }\n                                            } while (r8[rax_12] != 0);\n                                            rdi_4 = rax_12;\n                                        }\n                                        rdx = var_c0;\n                                        r13 = 0;\n                                        break;\n                                    }\n                                    if ((var_90 == 2 && (var_5c != 0 && rax_12 != 1)))\n                                    {\n                                        char* rax_34 = ((arg3 + r15_1) + 1);\n                                        int64_t rsi_6 = ((arg3 + rax_12) + r15_1);\n                                        char rcx_9;\n                                        do\n                                        {\n                                            rcx_9 = (*rax_34 - 0x5b);\n                                            if ((rcx_9 <= 0x21 && ((1 << rcx_9) & 0x20000002b) != 0))\n                                            {\n                                                break;\n                                            }\n                                            rax_34 = &rax_34[1];\n                                        } while (rsi_6 != rax_34);\n                                        if ((rcx_9 <= 0x21 && ((1 << rcx_9) & 0x20000002b) != 0))\n                                        {\n                                            r15 = var_88;\n                                            r13_1 = 2;\n                                            r11 = var_98;\n                                            goto label_40680c;\n                                        }\n                                    }\n                                    mbstate_t* rdi_7 = &var_40;\n                                    if (iswprint(var_44) == 0)\n                                    {\n                                        r13 = 0;\n                                    }\n                                    rbx_2 = (rbx_2 + rax_12);\n                                    if (mbsinit(rdi_7) == 0)\n                                    {\n                                        continue;\n                                    }\n                                }\n                                rdi_4 = rbx_2;\n                                rbp_3 = var_59_1;\n                                r10 = var_5a_1;\n                                r15 = var_88;\n                                r9 = var_98;\n                                r11_1 = var_90;\n                                rdx = ((r13 ^ 1) & var_c0);\n                                break;\n                            }\n                            if (rdi_4 > 1)\n                            {\n                                goto label_406ef1;\n                            }\n                            goto label_4069f4;\n                        }\n                        switch (rbp_3)\n                        {\n                            case 0:\n                            {\n                            label_4068e0:\n                                if (var_5c != 0)\n                                {\n                                    r13_1 = r11_1;\n                                    r11 = r9;\n                                    var_c0 = r13_1 == 2;\n                                    goto label_40680c;\n                                }\n                                var_b8 = 0;\n                            label_4068f7:\n                                rdx = r11_1 == 2;\n                                rax_8 = ((r10 ^ 1) & rdx);\n                                int64_t rcx_6;\n                                if (rax_8 == 0)\n                                {\n                                    rcx_6 = rbx_1;\n                                    if (r14 <= rbx_1)\n                                    {\n                                        goto label_406942;\n                                    }\n                                    rax_8 = r10;\n                                label_40693a:\n                                    r15[rcx_6] = 0x5c;\n                                    r10 = rax_8;\n                                label_406942:\n                                    rbx_1 = (rcx_6 + 1);\n                                    if (r11_1 == 2)\n                                    {\n                                        rax_8 = r13;\n                                        rbp_3 = 0x30;\n                                        r13 = 0;\n                                        goto label_4066fc;\n                                    }\n                                    rbp_3 = 0x30;\n                                    if ((r12_1 + 1) < r9)\n                                    {\n                                        char rax_20 = *((arg3 + r12_1) + 1);\n                                        var_98 = rax_20;\n                                        if ((rax_20 - 0x30) <= 9)\n                                        {\n                                            if (r14 > rbx_1)\n                                            {\n                                                r15[rbx_1] = 0x30;\n                                            }\n                                            if (r14 > (rcx_6 + 2))\n                                            {\n                                                r15[(rcx_6 + 2)] = 0x30;\n                                            }\n                                            rbx_1 = (rcx_6 + 3);\n                                            rbp_3 = 0x30;\n                                        }\n                                    }\n                                    goto label_406983;\n                                }\n                                if (r14 > rbx_1)\n                                {\n                                    r15[rbx_1] = 0x27;\n                                }\n                                if (r14 > (rbx_1 + 1))\n                                {\n                                    r15[(rbx_1 + 1)] = 0x24;\n                                }\n                                if (r14 > (rbx_1 + 2))\n                                {\n                                    r15[(rbx_1 + 2)] = 0x27;\n                                }\n                                rcx_6 = (rbx_1 + 3);\n                                if (r14 > rcx_6)\n                                {\n                                    goto label_40693a;\n                                }\n                                rbx_1 = (rbx_1 + 4);\n                                r10 = rax_8;\n                                r13 = 0;\n                                rbp_3 = 0x30;\n                                goto label_4066fc;\n                            }\n                            case 1:\n                            case 2:\n                            case 3:\n                            case 4:\n                            case 5:\n                            case 6:\n                            case 0xe:\n                            case 0xf:\n                            case 0x10:\n                            case 0x11:\n                            case 0x12:\n                            case 0x13:\n                            case 0x14:\n                            case 0x15:\n                            case 0x16:\n                            case 0x17:\n                            case 0x18:\n                            case 0x19:\n                            case 0x1a:\n                            case 0x1b:\n                            case 0x1c:\n                            case 0x1d:\n                            case 0x1e:\n                            case 0x1f:\n                            case 0x40:\n                            {\n                                goto label_4069a0;\n                            }\n                            case 7:\n                            {\n                                rbp_3 = 0x61;\n                                goto label_4068b5;\n                            }\n                            case 8:\n                            {\n                                rbp_3 = 0x62;\n                                goto label_4067ed;\n                            }\n                            case 9:\n                            {\n                            label_406870:\n                                rbp_3 = 0x74;\n                                goto label_4067ed;\n                            }\n                            case 0xa:\n                            {\n                            label_4067e8:\n                                rbp_3 = 0x6e;\n                            label_4067ed:\n                                rdx = 0;\n                                r13 = 0;\n                                if (var_5c != 0)\n                                {\n                                    goto label_406800;\n                                }\n                                goto label_406648;\n                            }\n                            case 0xb:\n                            {\n                            label_4068d0:\n                                rbp_3 = 0x76;\n                                goto label_4068b5;\n                            }\n                            case 0xc:\n                            {\n                            label_4068b0:\n                                rbp_3 = 0x66;\n                            label_4068b5:\n                                if (var_5c == 0)\n                                {\n                                    goto label_4068c0;\n                                }\n                                r13_1 = r11_1;\n                                rax_14 = 0;\n                                r11 = r9;\n                            label_406808:\n                                var_c0 = (var_c0 & rax_14);\n                                goto label_40680c;\n                            }\n                            case 0xd:\n                            {\n                                var_b8 = 0;\n                            label_406899:\n                                rbp_3 = 0xd;\n                                rcx_2 = 0x72;\n                                rdx = r11_1 == 2;\n                                goto label_4067d0;\n                            }\n                            case 0x20:\n                            {\n                                rax_27 = 0;\n                            label_406bfa:\n                                rbp_3 = 0x20;\n                                goto label_406bc2;\n                            }\n                            case 0x21:\n                            case 0x22:\n                            case 0x24:\n                            case 0x26:\n                            case 0x28:\n                            case 0x29:\n                            case 0x2a:\n                            case 0x3b:\n                            case 0x3c:\n                            case 0x3d:\n                            case 0x3e:\n                            case 0x5b:\n                            case 0x5e:\n                            case 0x60:\n                            case 0x7c:\n                            {\n                                var_b8 = 0;\n                            label_406885:\n                                rdx = 0;\n                            label_4067db:\n                                r13 = 0;\n                                goto label_4065f5;\n                            }\n                            case 0x23:\n                            case 0x7e:\n                            {\n                                rax_28 = 0;\n                            label_406bda:\n                                if (r12_1 == 0)\n                                {\n                                    r13 = var_b8;\n                                    rdx = 0;\n                                    var_b8 = rax_28;\n                                    goto label_4065f5;\n                                }\n                                var_b8 = rax_28;\n                                r13 = 0;\n                            label_4065ff:\n                                rax_8 = 0;\n                                goto label_406601;\n                            }\n                            case 0x25:\n                            case 0x2b:\n                            case 0x2c:\n                            case 0x2d:\n                            case 0x2e:\n                            case 0x2f:\n                            case 0x30:\n                            case 0x31:\n                            case 0x32:\n                            case 0x33:\n                            case 0x34:\n                            case 0x35:\n                            case 0x36:\n                            case 0x37:\n                            case 0x38:\n                            case 0x39:\n                            case 0x3a:\n                            case 0x41:\n                            case 0x42:\n                            case 0x43:\n                            case 0x44:\n                            case 0x45:\n                            case 0x46:\n                            case 0x47:\n                            case 0x48:\n                            case 0x49:\n                            case 0x4a:\n                            case 0x4b:\n                            case 0x4c:\n                            case 0x4d:\n                            case 0x4e:\n                            case 0x4f:\n                            case 0x50:\n                            case 0x51:\n                            case 0x52:\n                            case 0x53:\n                            case 0x54:\n                            case 0x55:\n                            case 0x56:\n                            case 0x57:\n                            case 0x58:\n                            case 0x59:\n                            case 0x5a:\n                            case 0x5d:\n                            case 0x5f:\n                            case 0x61:\n                            case 0x62:\n                            case 0x63:\n                            case 0x64:\n                            case 0x65:\n                            case 0x66:\n                            case 0x67:\n                            case 0x68:\n                            case 0x69:\n                            case 0x6a:\n                            case 0x6b:\n                            case 0x6c:\n                            case 0x6d:\n                            case 0x6e:\n                            case 0x6f:\n                            case 0x70:\n                            case 0x71:\n                            case 0x72:\n                            case 0x73:\n                            case 0x74:\n                            case 0x75:\n                            case 0x76:\n                            case 0x77:\n                            case 0x78:\n                            case 0x79:\n                            case 0x7a:\n                            {\n                                rax_27 = 0;\n                            label_406bc2:\n                                r13 = var_b8;\n                                var_b8 = rax_27;\n                                rax_8 = 0;\n                                goto label_406601;\n                            }\n                            case 0x27:\n                            {\n                                var_b8 = 0;\n                            label_40677d:\n                                if (r11_1 != 2)\n                                {\n                                    var_5b_1 = r13;\n                                    rdx = 0;\n                                    rbp_3 = 0x27;\n                                    goto label_4065f5;\n                                }\n                                if (var_5c != 0)\n                                {\n                                    goto label_40753d;\n                                }\n                                if (r14 != 0)\n                                {\n                                    rdx = 0;\n                                }\n                                if ((r14 == 0 || (r14 != 0 && var_70 != 0)))\n                                {\n                                    if (r14 > rbx_1)\n                                    {\n                                        r15[rbx_1] = 0x27;\n                                    }\n                                    if (r14 > (rbx_1 + 1))\n                                    {\n                                        r15[(rbx_1 + 1)] = 0x5c;\n                                    }\n                                    if (r14 <= (rbx_1 + 2))\n                                    {\n                                        rdx = r14;\n                                        r14 = var_70;\n                                    }\n                                    else\n                                    {\n                                        rdx = r14;\n                                        r15[(rbx_1 + 2)] = 0x27;\n                                        r14 = var_70;\n                                    }\n                                }\n                                var_5b_1 = r13;\n                                rbx_1 = (rbx_1 + 3);\n                                rax_8 = 0;\n                                r10 = 0;\n                                var_70 = r14;\n                                rbp_3 = 0x27;\n                                r14 = rdx;\n                                goto label_4066fc;\n                            }\n                            case 0x3f:\n                            {\n                                var_b8 = 0;\n                            label_40674d:\n                                if (r11_1 == 2)\n                                {\n                                    if (var_5c != 0)\n                                    {\n                                    label_40753d:\n                                        r13_1 = r11_1;\n                                        r11 = r9;\n                                        goto label_40680c;\n                                    }\n                                    r13 = 0;\n                                    rax_8 = 0;\n                                    rbp_3 = 0x3f;\n                                label_4066fc:\n                                    rdx = r11_1 == 2;\n                                    if (var_b8 != 0)\n                                    {\n                                        goto label_406637;\n                                    }\n                                    r12_1 = (r12_1 + 1);\n                                    rax_12 = ((rax_8 ^ 1) & r10);\n                                    goto label_406714;\n                                }\n                                if (r11_1 != 5)\n                                {\n                                    rbp_3 = 0x3f;\n                                    rdx = r11_1 == 2;\n                                    r13 = 0;\n                                    goto label_4065f5;\n                                }\n                                if ((arg6 & 4) == 0)\n                                {\n                                label_406ce0:\n                                    rdx = 0;\n                                    r13 = 0;\n                                    rbp_3 = 0x3f;\n                                    goto label_4065f5;\n                                }\n                                int64_t rax_30 = (r12_1 + 2);\n                                if (rax_30 >= r9)\n                                {\n                                    goto label_406ce0;\n                                }\n                                if (*((arg3 + r12_1) + 1) != 0x3f)\n                                {\n                                    goto label_406ce0;\n                                }\n                                rbp_3 = *(arg3 + rax_30);\n                                if (rbp_3 > 0x3e)\n                                {\n                                    goto label_406ce0;\n                                }\n                                if ((!(TEST_BITQ(0x7000a38200000000, rbp_3))))\n                                {\n                                    goto label_406ce0;\n                                }\n                                if (var_5c != 0)\n                                {\n                                    goto label_4074f0;\n                                }\n                                if (r14 > rbx_1)\n                                {\n                                    r15[rbx_1] = 0x3f;\n                                }\n                                if (r14 > (rbx_1 + 1))\n                                {\n                                    r15[(rbx_1 + 1)] = 0x22;\n                                }\n                                if (r14 > (rbx_1 + 2))\n                                {\n                                    r15[(rbx_1 + 2)] = 0x22;\n                                }\n                                if (r14 > (rbx_1 + 3))\n                                {\n                                    r15[(rbx_1 + 3)] = 0x3f;\n                                }\n                                rbx_1 = (rbx_1 + 4);\n                                rdx = 0;\n                                r13 = 0;\n                                r12_1 = rax_30;\n                            label_406983:\n                                rax_8 = r13;\n                                r13 = 0;\n                                if (((var_c0 ^ 1) | rdx) != 0)\n                                {\n                                    goto label_4066fc;\n                                }\n                            label_406601:\n                                if (arg7 == 0)\n                                {\n                                    goto label_4066fc;\n                                }\n                                if (((*(arg7 + ((rbp_3 >> 5) << 2)) >> rbp_3) & 1) == 0)\n                                {\n                                    goto label_4066fc;\n                                }\n                                rdx = r11_1 == 2;\n                                goto label_406637;\n                            }\n                            case 0x5c:\n                            {\n                                var_b8 = 0;\n                            label_4067aa:\n                                rdx = (var_c0 & var_5c);\n                                rbp_3 = 0x5c;\n                                rcx_2 = 0x5c;\n                                rax_1 = var_a0_1 != 0;\n                                rdx = (rdx & rax_1);\n                                if (rdx == 0)\n                                {\n                                    goto label_4067d0;\n                                }\n                                r12_1 = (r12_1 + 1);\n                                rax_12 = r10;\n                                r13 = 0;\n                            label_406714:\n                                if (rax_12 != 0)\n                                {\n                                    if (r14 > rbx_1)\n                                    {\n                                        r15[rbx_1] = 0x27;\n                                    }\n                                    if (r14 > (rbx_1 + 1))\n                                    {\n                                        r15[(rbx_1 + 1)] = 0x27;\n                                    }\n                                    rbx_1 = (rbx_1 + 2);\n                                    r10 = 0;\n                                    goto label_40668d;\n                                }\n                            label_40668d:\n                                if (rbx_1 >= r14)\n                                {\n                                    goto label_406696;\n                                }\n                                r15[rbx_1] = rbp_3;\n                            label_406696:\n                                char rdi_2 = var_a9;\n                                rbx_1 = (rbx_1 + 1);\n                                if (r13 == 0)\n                                {\n                                    rdi_2 = 0;\n                                }\n                                var_a9 = rdi_2;\n                                continue;\n                            }\n                            case 0x7b:\n                            case 0x7d:\n                            {\n                                var_b8 = 0;\n                            label_4065a9:\n                                rax_1 = r9 != 1;\n                                if (r9 == -1)\n                                {\n                                    rax_1 = *(arg3 + 1) != 0;\n                                }\n                                rdx = r11_1 == 2;\n                                if (rax_1 != 0)\n                                {\n                                    goto label_4067db;\n                                }\n                                goto label_4065cd;\n                            }\n                        }\n                    }\n                }\n            }\n        label_406c86:\n            *r15 = 0x27;\n            r13 = 2;\n            rbx_1 = 1;\n            var_78_1 = \"'\";\n            var_a0_1 = 1;\n            var_5c = false;\n            var_5b_1 = rax_1;\n        }\n    }\n    if ((r13 == 4 && rbp_1 == 0))\n    {\n        var_c0 = 1;\n    }\n    switch (r13)\n    {\n        case 0:\n        {\n            var_a9 = 1;\n            r10 = 0;\n            rbx_1 = 0;\n            var_5b_1 = 0;\n            var_70 = 0;\n            var_5c = false;\n            var_c0 = 0;\n            var_a0_1 = 0;\n            var_78_1 = nullptr;\n            goto label_406498;\n        }\n        case 2:\n        {\n            if (rbp_1 != 0)\n            {\n                var_a9 = 1;\n                r10 = 0;\n                rbx_1 = 0;\n                var_5b_1 = 0;\n                var_70 = 0;\n                var_5c = true;\n                var_c0 = 0;\n                var_a0_1 = 1;\n                var_78_1 = \"'\";\n                goto label_406498;\n            }\n            var_c0 = 0;\n            break;\n        }\n        case 3:\n        {\n            var_a9 = 1;\n            r10 = 0;\n            rbx_1 = 0;\n            r13 = 2;\n            var_5b_1 = 0;\n            var_70 = 0;\n            var_5c = true;\n            var_c0 = 1;\n            var_a0_1 = 1;\n            var_78_1 = \"'\";\n            goto label_406498;\n        }\n        case 5:\n        {\n            if (rbp_1 != 0)\n            {\n                var_a9 = 1;\n                r10 = 0;\n                rbx_1 = 0;\n                var_5b_1 = 0;\n                var_70 = 0;\n                var_5c = true;\n                var_c0 = 1;\n                var_a0_1 = 1;\n                var_78_1 = &data_40d024;\n            }\n            else\n            {\n                if (r14 == 0)\n                {\n                    var_70 = 0;\n                    r10 = 0;\n                    var_a9 = 1;\n                    var_5b_1 = 0;\n                }\n                else\n                {\n                    *r15 = 0x22;\n                    r10 = 0;\n                    var_a9 = 1;\n                    var_5b_1 = 0;\n                    var_70 = 0;\n                }\n                var_5c = false;\n                rbx_1 = 1;\n                var_c0 = 1;\n                var_a0_1 = 1;\n                var_78_1 = &data_40d024;\n            }\n            goto label_406498;\n        }\n        case 6:\n        {\n            var_a9 = 1;\n            r10 = 0;\n            rbx_1 = 0;\n            r13 = 5;\n            var_5b_1 = 0;\n            var_70 = 0;\n            var_5c = true;\n            var_c0 = 1;\n            var_a0_1 = 1;\n            var_78_1 = &data_40d024;\n            goto label_406498;\n        }\n        case 7:\n        {\n            var_a9 = 1;\n            r10 = 0;\n            rbx_1 = 0;\n            var_5b_1 = 0;\n            var_70 = 0;\n            var_5c = false;\n            var_c0 = 1;\n            var_a0_1 = 0;\n            var_78_1 = nullptr;\n            goto label_406498;\n        }\n        case 8:\n        case 9:\n        case 0xa:\n        {\n            if ((!cond:1))\n            {\n                arg8 = sub_406300(&data_40d035, r13);\n                arg9 = sub_406300(\"'\", r13);\n            }\n            rbx_1 = 0;\n            if (rbp_1 == 0)\n            {\n                char rax_49 = *arg8;\n                if (rax_49 != 0)\n                {\n                    do\n                    {\n                        if (r14 > rbx_1)\n                        {\n                            r15[rbx_1] = rax_49;\n                        }\n                        rbx_1 = (rbx_1 + 1);\n                        rax_49 = arg8[rbx_1];\n                    } while (rax_49 != 0);\n                }\n            }\n            uint64_t rax_46;\n            rax_46 = strlen(arg9);\n            var_a9 = 1;\n            r10 = 0;\n            var_a0_1 = rax_46;\n            var_5b_1 = 0;\n            var_78_1 = arg9;\n            var_70 = 0;\n            var_c0 = 1;\n            goto label_406498;\n        }\n    }\n    if (((r13 == 4 && rbp_1 == 0) || r13 == 2))\n    {\n        if (r14 != 0)\n        {\n            r10 = 0;\n            rax_1 = 0;\n            var_a9 = 1;\n            var_70 = 0;\n            goto label_406c86;\n        }\n        var_a9 = 1;\n        r10 = 0;\n        rbx_1 = 1;\n        r13 = 2;\n        var_70 = 0;\n        var_5b_1 = 0;\n        var_5c = false;\n        var_a0_1 = 1;\n        var_78_1 = \"'\";\n        goto label_406498;\n    }\n}\n\n"
        },
        {
            "funcName": "sub_407630",
            "funcStartAddr": "0x4021e9",
            "funcEndAddr": "0x4077ce",
            "decompiledFuncCode": "char* sub_407630(int32_t arg1, uint64_t arg2, uint64_t arg3, int32_t* arg4)\n{\n    int64_t r15 = arg1;\n    int32_t* rax = __errno_location();\n    int64_t rbx = data_611358;\n    int32_t rax_1 = *rax;\n    if (r15 < 0)\n    {\n        abort();\n        /* no return */\n    }\n    if (data_611370 <= r15)\n    {\n        if (r15 == 0x7fffffff)\n        {\n            sub_408ca0();\n            /* no return */\n        }\n        int32_t r12_1 = (r15 + 1);\n        int64_t rsi_1 = (r12_1 << 4);\n        if (rbx == 0x611360)\n        {\n            int64_t rax_9 = sub_408ab0(0, rsi_1);\n            int128_t zmm0 = data_611360;\n            rbx = rax_9;\n            data_611358 = rax_9;\n            *rax_9 = zmm0;\n        }\n        else\n        {\n            int64_t rax_2 = sub_408ab0(rbx, rsi_1);\n            data_611358 = rax_2;\n            rbx = rax_2;\n        }\n        int64_t rdi_1 = data_611370;\n        memset(((rdi_1 << 4) + rbx), 0, ((r12_1 - rdi_1) << 4));\n        data_611370 = r12_1;\n    }\n    int64_t rbx_1 = (rbx + (r15 << 4));\n    void* r15_2 = &arg4[2];\n    int32_t rax_4 = (arg4[1] | 1);\n    uint64_t r11 = *rbx_1;\n    char* r12_2 = *(rbx_1 + 8);\n    int64_t rax_5 = sub_406400(r12_2, r11, arg2, arg3, *arg4, rax_4, r15_2, *(arg4 + 0x28), *(arg4 + 0x30));\n    if (r11 <= rax_5)\n    {\n        size_t rsi_3 = (rax_5 + 1);\n        *rbx_1 = rsi_3;\n        if (r12_2 != 0x611420)\n        {\n            free(r12_2);\n        }\n        char* rax_6 = sub_408a50(rsi_3);\n        uint32_t r8_1 = *arg4;\n        *(rbx_1 + 8) = rax_6;\n        r12_2 = rax_6;\n        sub_406400(rax_6, rsi_3, arg2, arg3, r8_1, rax_4, r15_2, *(arg4 + 0x28), *(arg4 + 0x30));\n    }\n    *rax = rax_1;\n    return r12_2;\n}\n\n"
        },
        {
            "funcName": "sub_4077d0",
            "funcStartAddr": "0x4077d0",
            "funcEndAddr": "0x407804",
            "decompiledFuncCode": "int64_t sub_4077d0(int64_t arg1)\n{\n    int64_t rbx = arg1;\n    int32_t* rax = __errno_location();\n    int32_t r12 = *rax;\n    if (rbx == 0)\n    {\n        rbx = 0x611520;\n    }\n    int64_t rax_1 = sub_408c50(rbx, 0x38);\n    *rax = r12;\n    return rax_1;\n}\n\n"
        },
        {
            "funcName": "sub_407810",
            "funcStartAddr": "0x407810",
            "funcEndAddr": "0x40781f",
            "decompiledFuncCode": "uint64_t sub_407810(int32_t* arg1)\n{\n    if (arg1 == 0)\n    {\n        arg1 = &data_611520;\n    }\n    return *arg1;\n}\n\n"
        },
        {
            "funcName": "sub_407820",
            "funcStartAddr": "0x407820",
            "funcEndAddr": "0x40782f",
            "decompiledFuncCode": "void sub_407820(int32_t* arg1, int32_t arg2)\n{\n    if (arg1 == 0)\n    {\n        arg1 = &data_611520;\n    }\n    *arg1 = arg2;\n}\n\n"
        },
        {
            "funcName": "sub_407830",
            "funcStartAddr": "0x407830",
            "funcEndAddr": "0x407863",
            "decompiledFuncCode": "uint64_t sub_407830(int64_t arg1, uint8_t arg2, int32_t arg3)\n{\n    if (arg1 == 0)\n    {\n        arg1 = 0x611520;\n    }\n    char rcx_1 = (arg2 & 0x1f);\n    int32_t rsi = *((arg1 + ((arg2 >> 5) << 2)) + 8);\n    uint32_t rax_3 = (rsi >> rcx_1);\n    *((arg1 + ((arg2 >> 5) << 2)) + 8) = ((((arg3 ^ rax_3) & 1) << rcx_1) ^ rsi);\n    return (rax_3 & 1);\n}\n\n"
        },
        {
            "funcName": "sub_407870",
            "funcStartAddr": "0x407870",
            "funcEndAddr": "0x407883",
            "decompiledFuncCode": "uint64_t sub_407870(int128_t* arg1, int32_t arg2)\n{\n    if (arg1 == 0)\n    {\n        arg1 = &data_611520;\n    }\n    uint64_t rax = *(arg1 + 4);\n    *(arg1 + 4) = arg2;\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_407890",
            "funcStartAddr": "0x407890",
            "funcEndAddr": "0x4078bb",
            "decompiledFuncCode": "void sub_407890(int32_t* arg1, int64_t arg2, int64_t arg3)\n{\n    if (arg1 == 0)\n    {\n        arg1 = &data_611520;\n    }\n    *arg1 = 0xa;\n    if ((arg2 != 0 && arg3 != 0))\n    {\n        *(arg1 + 0x28) = arg2;\n        *(arg1 + 0x30) = arg3;\n        return;\n    }\n    int64_t var_8 = 0x611520;\n    abort();\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_4078c0",
            "funcStartAddr": "0x4078c0",
            "funcEndAddr": "0x407932",
            "decompiledFuncCode": "int64_t sub_4078c0(char* arg1, uint64_t arg2, uint64_t arg3, uint64_t arg4, \n    int32_t* arg5)\n{\n    int32_t* rbx = arg5;\n    if (arg5 == 0)\n    {\n        rbx = &data_611520;\n    }\n    int32_t* rax = __errno_location();\n    int32_t r12 = *rax;\n    int64_t rax_2 = sub_406400(arg1, arg2, arg3, arg4, *rbx, rbx[1], &rbx[2], *(rbx + 0x28), *(rbx + 0x30));\n    *rax = r12;\n    return rax_2;\n}\n\n"
        },
        {
            "funcName": "sub_407940",
            "funcStartAddr": "0x407940",
            "funcEndAddr": "0x407a21",
            "decompiledFuncCode": "char* sub_407940(uint64_t arg1, uint64_t arg2, int64_t* arg3, int32_t* arg4)\n{\n    int32_t* rbx = arg4;\n    if (arg4 == 0)\n    {\n        rbx = &data_611520;\n    }\n    int32_t* rax = __errno_location();\n    int32_t rax_1 = *rax;\n    int32_t rbp;\n    rbp = arg3 == 0;\n    int32_t rbp_1 = (rbp | rbx[1]);\n    int64_t rax_2 = sub_406400(nullptr, 0, arg1, arg2, *rbx, rbp_1, &rbx[2], *(rbx + 0x28), *(rbx + 0x30));\n    char* rax_3 = sub_408a50((rax_2 + 1));\n    sub_406400(rax_3, (rax_2 + 1), arg1, arg2, *rbx, rbp_1, &rbx[2], *(rbx + 0x28), *(rbx + 0x30));\n    *rax = rax_1;\n    if (arg3 != 0)\n    {\n        *arg3 = rax_2;\n    }\n    return rax_3;\n}\n\n"
        },
        {
            "funcName": "sub_407a30",
            "funcStartAddr": "0x407a30",
            "funcEndAddr": "0x407a3a",
            "decompiledFuncCode": "int64_t sub_407a30(uint64_t arg1, uint64_t arg2, int32_t* arg3)\n{\n    /* tailcall */\n    return sub_407940(arg1, arg2, nullptr, arg3);\n}\n\n"
        },
        {
            "funcName": "sub_407a40",
            "funcStartAddr": "0x407a40",
            "funcEndAddr": "0x407ad5",
            "decompiledFuncCode": "uint64_t sub_407a40()\n{\n    uint64_t rax_2 = data_611370;\n    int64_t r12 = data_611358;\n    if (rax_2 > 1)\n    {\n        int64_t* rbx_1 = (r12 + 0x18);\n        int64_t rbp_1 = ((r12 + ((rax_2 - 2) << 4)) + 0x28);\n        do\n        {\n            int64_t rdi_1 = *rbx_1;\n            rbx_1 = &rbx_1[2];\n            rax_2 = free(rdi_1);\n        } while (rbx_1 != rbp_1);\n    }\n    int64_t rdi_2 = *(r12 + 8);\n    if (rdi_2 != 0x611420)\n    {\n        rax_2 = free(rdi_2);\n        *data_611360 = 0x100;\n        *(data_611360 + 8) = 0x611420;\n    }\n    if (r12 != 0x611360)\n    {\n        rax_2 = free(r12);\n        data_611358 = 0x611360;\n    }\n    data_611370 = 1;\n    return rax_2;\n}\n\n"
        },
        {
            "funcName": "sub_407ae0",
            "funcStartAddr": "0x407ae0",
            "funcEndAddr": "0x407af1",
            "decompiledFuncCode": "int64_t sub_407ae0(int32_t arg1, uint64_t arg2)\n{\n    /* tailcall */\n    return sub_407630(arg1, arg2, -1, &data_611520);\n}\n\n"
        },
        {
            "funcName": "sub_407b00",
            "funcStartAddr": "0x407b00",
            "funcEndAddr": "0x407b0a",
            "decompiledFuncCode": "int64_t sub_407b00(int32_t arg1, uint64_t arg2, uint64_t arg3)\n{\n    /* tailcall */\n    return sub_407630(arg1, arg2, arg3, &data_611520);\n}\n\n"
        },
        {
            "funcName": "sub_407b10",
            "funcStartAddr": "0x407b10",
            "funcEndAddr": "0x407b26",
            "decompiledFuncCode": "int64_t sub_407b10(uint64_t arg1)\n{\n    /* tailcall */\n    return sub_407630(0, arg1, -1, &data_611520);\n}\n\n"
        },
        {
            "funcName": "sub_407b30",
            "funcStartAddr": "0x407b30",
            "funcEndAddr": "0x407b42",
            "decompiledFuncCode": "int64_t sub_407b30(uint64_t arg1, uint64_t arg2)\n{\n    /* tailcall */\n    return sub_407630(0, arg1, arg2, &data_611520);\n}\n\n"
        },
        {
            "funcName": "sub_407b50",
            "funcStartAddr": "0x4021ee",
            "funcEndAddr": "0x407bb8",
            "decompiledFuncCode": "char* sub_407b50(int32_t arg1, int32_t arg2, uint64_t arg3)\n{\n    if (arg2 == 0xa)\n    {\n        abort();\n        /* no return */\n    }\n    int32_t var_48 = arg2;\n    int32_t var_44 = 0;\n    int64_t var_40 = 0;\n    int64_t var_38 = 0;\n    int64_t var_30 = 0;\n    int64_t var_28 = 0;\n    int64_t var_20 = 0;\n    int64_t var_18 = 0;\n    return sub_407630(arg1, arg3, -1, &var_48);\n}\n\n"
        },
        {
            "funcName": "sub_407bc0",
            "funcStartAddr": "0x4021f3",
            "funcEndAddr": "0x407c24",
            "decompiledFuncCode": "char* sub_407bc0(int32_t arg1, int32_t arg2, uint64_t arg3, uint64_t arg4)\n{\n    if (arg2 == 0xa)\n    {\n        abort();\n        /* no return */\n    }\n    int32_t var_48 = arg2;\n    int32_t var_44 = 0;\n    int64_t var_40 = 0;\n    int64_t var_38 = 0;\n    int64_t var_30 = 0;\n    int64_t var_28 = 0;\n    int64_t var_20 = 0;\n    int64_t var_18 = 0;\n    return sub_407630(arg1, arg3, arg4, &var_48);\n}\n\n"
        },
        {
            "funcName": "sub_407c30",
            "funcStartAddr": "0x407c30",
            "funcEndAddr": "0x407c3c",
            "decompiledFuncCode": "int64_t sub_407c30(int32_t arg1, uint64_t arg2)\n{\n    /* tailcall */\n    return sub_407b50(0, arg1, arg2);\n}\n\n"
        },
        {
            "funcName": "sub_407c40",
            "funcStartAddr": "0x407c40",
            "funcEndAddr": "0x407c4f",
            "decompiledFuncCode": "int64_t sub_407c40(int32_t arg1, uint64_t arg2, uint64_t arg3)\n{\n    /* tailcall */\n    return sub_407bc0(0, arg1, arg2, arg3);\n}\n\n"
        },
        {
            "funcName": "sub_407c50",
            "funcStartAddr": "0x407c50",
            "funcEndAddr": "0x407cc0",
            "decompiledFuncCode": "char* sub_407c50(uint64_t arg1, uint64_t arg2, uint8_t arg3)\n{\n    char rcx_1 = (arg3 & 0x1f);\n    int64_t var_18 = data_611550;\n    int128_t var_48 = data_611520;\n    int128_t var_38 = data_611530;\n    int128_t var_28 = data_611540;\n    int32_t rdx = *((&var_48 + ((arg3 >> 5) << 2)) + 8);\n    *((&var_48 + ((arg3 >> 5) << 2)) + 8) = ((((!(rdx >> rcx_1)) & 1) << rcx_1) ^ rdx);\n    return sub_407630(0, arg1, arg2, &var_48);\n}\n\n"
        },
        {
            "funcName": "sub_407cc0",
            "funcStartAddr": "0x407cc0",
            "funcEndAddr": "0x407ccd",
            "decompiledFuncCode": "int64_t sub_407cc0(uint64_t arg1, uint8_t arg2)\n{\n    /* tailcall */\n    return sub_407c50(arg1, -1, arg2);\n}\n\n"
        },
        {
            "funcName": "sub_407cd0",
            "funcStartAddr": "0x407cd0",
            "funcEndAddr": "0x407ce1",
            "decompiledFuncCode": "int64_t sub_407cd0(uint64_t arg1)\n{\n    /* tailcall */\n    return sub_407c50(arg1, -1, 0x3a);\n}\n\n"
        },
        {
            "funcName": "sub_407cf0",
            "funcStartAddr": "0x407cf0",
            "funcEndAddr": "0x407cfa",
            "decompiledFuncCode": "int64_t sub_407cf0(uint64_t arg1, uint64_t arg2)\n{\n    /* tailcall */\n    return sub_407c50(arg1, arg2, 0x3a);\n}\n\n"
        },
        {
            "funcName": "sub_407d00",
            "funcStartAddr": "0x4021f8",
            "funcEndAddr": "0x407d6e",
            "decompiledFuncCode": "char* sub_407d00(int32_t arg1, int32_t arg2, uint64_t arg3)\n{\n    if (arg2 == 0xa)\n    {\n        abort();\n        /* no return */\n    }\n    int32_t var_48 = arg2;\n    int64_t var_40 = 0x400000000000000;\n    int32_t var_44 = 0;\n    int64_t var_38 = 0;\n    int64_t var_30 = 0;\n    int64_t var_28 = 0;\n    int64_t var_20 = 0;\n    int64_t var_18 = 0;\n    return sub_407630(arg1, arg3, -1, &var_48);\n}\n\n"
        },
        {
            "funcName": "sub_407d70",
            "funcStartAddr": "0x407d70",
            "funcEndAddr": "0x407ddc",
            "decompiledFuncCode": "char* sub_407d70(int32_t arg1, int64_t arg2, int64_t arg3, uint64_t arg4, \n    uint64_t arg5)\n{\n    int128_t var_48 = data_611520;\n    int128_t var_38 = data_611530;\n    int128_t var_28 = data_611540;\n    int64_t var_18 = data_611550;\n    var_48 = 0xa;\n    if ((arg2 != 0 && arg3 != 0))\n    {\n        *var_28[8] = arg2;\n        int64_t var_18_1 = arg3;\n        return sub_407630(arg1, arg4, arg5, &var_48);\n    }\n    abort();\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_407e30",
            "funcStartAddr": "0x407e30",
            "funcEndAddr": "0x407e3a",
            "decompiledFuncCode": "int64_t sub_407e30(int32_t arg1, uint64_t arg2, uint64_t arg3)\n{\n    /* tailcall */\n    return sub_407630(arg1, arg2, arg3, &data_611320);\n}\n\n"
        },
        {
            "funcName": "sub_407e40",
            "funcStartAddr": "0x407e40",
            "funcEndAddr": "0x407e52",
            "decompiledFuncCode": "int64_t sub_407e40(uint64_t arg1, uint64_t arg2)\n{\n    /* tailcall */\n    return sub_407630(0, arg1, arg2, &data_611320);\n}\n\n"
        },
        {
            "funcName": "sub_407e60",
            "funcStartAddr": "0x407e60",
            "funcEndAddr": "0x407e71",
            "decompiledFuncCode": "int64_t sub_407e60(int32_t arg1, uint64_t arg2)\n{\n    /* tailcall */\n    return sub_407630(arg1, arg2, -1, &data_611320);\n}\n\n"
        },
        {
            "funcName": "sub_407e80",
            "funcStartAddr": "0x407e80",
            "funcEndAddr": "0x407e96",
            "decompiledFuncCode": "int64_t sub_407e80(uint64_t arg1)\n{\n    /* tailcall */\n    return sub_407630(0, arg1, -1, &data_611320);\n}\n\n"
        },
        {
            "funcName": "sub_407ea0",
            "funcStartAddr": "0x407ea0",
            "funcEndAddr": "0x4080e2",
            "decompiledFuncCode": "uint64_t sub_407ea0(int32_t arg1, char* arg2, int32_t arg3, char* arg4, \n    int32_t arg5)\n{\n    int32_t rax_1 = syscall(0x13c, arg1, arg2, arg3, arg4, arg5);\n    int32_t rdx_1 = rax_1;\n    if (rax_1 < 0)\n    {\n        int32_t* rax_2 = __errno_location();\n        rdx_1 = rax_1;\n        int32_t* r9_1 = rax_2;\n        int32_t rax_3 = *rax_2;\n        int64_t r15;\n        r15 = ((rax_3 - 0x16) & 0xffffffef) != 0;\n        rax_3 = rax_3 != 0x5f;\n        r15 = (r15 & rax_3);\n        if (r15 == 0)\n        {\n            int32_t var_160_1;\n            void var_c8;\n            int32_t rax_5;\n            int32_t rax_6;\n            if (((arg5 & 0xfffffffe) == 0 && arg5 != 0))\n            {\n                var_160_1 = r9_1;\n                rax_5 = __fxstatat(1, arg3, arg4, &var_c8, 0x100);\n                r9_1 = var_160_1;\n                if (rax_5 != 0)\n                {\n                    rax_6 = *r9_1;\n                    if (rax_6 != 0x4b)\n                    {\n                        if (rax_6 != 2)\n                        {\n                            goto label_408040;\n                        }\n                        r15 = 1;\n                    }\n                }\n            }\n            if ((arg5 == 0 || (((arg5 != 0 && (arg5 & 0xfffffffe) == 0) && rax_5 != 0) && rax_6 != 0x4b)))\n            {\n                var_160_1 = r9_1;\n                uint64_t rax_7 = strlen(arg2);\n                uint64_t rax_8 = strlen(arg4);\n                if (rax_7 == 0)\n                {\n                label_4080a9:\n                    rdx_1 = renameat(arg1, arg2, arg3, arg4);\n                }\n                else\n                {\n                    int64_t r9_2 = var_160_1;\n                    if (rax_8 == 0)\n                    {\n                        goto label_4080a9;\n                    }\n                    if ((arg2[(rax_7 - 1)] != 0x2f && arg4[(rax_8 - 1)] != 0x2f))\n                    {\n                        goto label_4080a9;\n                    }\n                    var_160_1 = r9_2;\n                    void var_158;\n                    if (__fxstatat(1, arg1, arg2, &var_158, 0x100) != 0)\n                    {\n                        goto label_408040;\n                    }\n                    int32_t* r9_3 = var_160_1;\n                    int32_t var_140;\n                    if (r15 == 0)\n                    {\n                        var_160_1 = r9_3;\n                        int32_t* r9_4 = var_160_1;\n                        if (__fxstatat(1, arg3, arg4, &var_c8, 0x100) != 0)\n                        {\n                            if (*r9_4 != 2)\n                            {\n                                goto label_408040;\n                            }\n                            if ((var_140 & 0xf000) == 0x4000)\n                            {\n                                goto label_4080a9;\n                            }\n                            goto label_408040;\n                        }\n                        int32_t var_b0;\n                        if ((var_b0 & 0xf000) != 0x4000)\n                        {\n                            *r9_4 = 0x14;\n                        label_408040:\n                            rdx_1 = -1;\n                        }\n                        else\n                        {\n                            if ((var_140 & 0xf000) == 0x4000)\n                            {\n                                goto label_4080a9;\n                            }\n                            *r9_4 = 0x15;\n                            rdx_1 = -1;\n                        }\n                    }\n                    else\n                    {\n                        if ((var_140 & 0xf000) == 0x4000)\n                        {\n                            goto label_4080a9;\n                        }\n                        *r9_3 = 2;\n                        rdx_1 = -1;\n                    }\n                }\n            }\n            if (arg5 != 0)\n            {\n                if (((arg5 & 0xfffffffe) == 0 && (rax_5 == 0 || (rax_5 != 0 && rax_6 == 0x4b))))\n                {\n                    *r9_1 = 0x11;\n                    rdx_1 = -1;\n                }\n                if ((arg5 & 0xfffffffe) != 0)\n                {\n                    *r9_1 = 0x5f;\n                    rdx_1 = -1;\n                }\n            }\n        }\n    }\n    return rdx_1;\n}\n\n"
        },
        {
            "funcName": "sub_4080f0",
            "funcStartAddr": "0x4080f0",
            "funcEndAddr": "0x408220",
            "decompiledFuncCode": "uint64_t sub_4080f0(char* arg1, char* arg2)\n{\n    char* r15 = arg1;\n    int32_t rbx = 0;\n    char* rax = sub_404ca0(arg1);\n    char* rax_1 = sub_404ca0(arg2);\n    uint64_t rax_2 = sub_404d00(rax);\n    if ((rax_2 == sub_404d00(rax_1) && memcmp(rax, rax_1, rax_2) == 0))\n    {\n        char* rax_6 = sub_404bc0(r15);\n        char* rax_7 = sub_404bc0(arg2);\n        int64_t var_158;\n        if (__xstat(1, rax_6, &var_158) != 0)\n        {\n            error(1, *__errno_location(), \"%s\", rax_6);\n        }\n        int64_t var_c8;\n        if (__xstat(1, rax_7, &var_c8) != 0)\n        {\n            error(1, *__errno_location(), \"%s\", rax_7);\n        }\n        rbx = 0;\n        int64_t var_150;\n        int64_t var_c0;\n        if (var_150 == var_c0)\n        {\n            rbx = var_158 == var_c8;\n        }\n        free(rax_6);\n        free(rax_7);\n    }\n    return rbx;\n}\n\n"
        },
        {
            "funcName": "sub_408220",
            "funcStartAddr": "0x408220",
            "funcEndAddr": "0x408274",
            "decompiledFuncCode": "uint64_t sub_408220(char* arg1)\n{\n    void var_98;\n    int32_t rax = __lxstat(1, arg1, &var_98);\n    int32_t* rax_1 = __errno_location();\n    if (rax != 0)\n    {\n        int32_t rdx_1 = *rax_1;\n        if (rdx_1 != 0x4b)\n        {\n            int32_t rax_2;\n            rax_2 = rdx_1 != 2;\n            return (-rax_2);\n        }\n    }\n    *rax_1 = 0x11;\n    return 0xffffffff;\n}\n\n"
        },
        {
            "funcName": "sub_408280",
            "funcStartAddr": "0x408280",
            "funcEndAddr": "0x40828a",
            "decompiledFuncCode": "int64_t sub_408280(int64_t arg1)\n{\n    /* tailcall */\n    return mkdir(arg1, 0x1c0);\n}\n\n"
        },
        {
            "funcName": "sub_408290",
            "funcStartAddr": "0x408290",
            "funcEndAddr": "0x4082a6",
            "decompiledFuncCode": "int64_t sub_408290(char* arg1, int32_t* arg2)\n{\n    uint64_t rsi;\n    rsi = (*arg2 & 0x3c);\n    rsi = (rsi | 0xc2);\n    /* tailcall */\n    return open(arg1, rsi, 0x180);\n}\n\n"
        },
        {
            "funcName": "sub_4082b0",
            "funcStartAddr": "0x4082b0",
            "funcEndAddr": "0x4082cd",
            "decompiledFuncCode": "int64_t sub_4082b0() __noreturn\n{\n    __assert_fail(\"! \"invalid KIND in __gen_tempnam\u2026\", \"lib/tempname.c\", 0x147, \"gen_tempname_len\");\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_4082d0",
            "funcStartAddr": "0x4082d0",
            "funcEndAddr": "0x40842d",
            "decompiledFuncCode": "uint64_t sub_4082d0(char* arg1, int32_t arg2, int64_t arg3, int64_t arg4, \n    uint64_t arg5)\n{\n    int32_t* rax = __errno_location();\n    int32_t rax_1 = *rax;\n    uint64_t rax_2 = strlen(arg1);\n    int64_t rdx_1 = (arg2 + arg5);\n    uint64_t rax_5;\n    int32_t rdx_3;\n    if (rdx_1 <= rax_2)\n    {\n        int64_t rax_3 = (rax_2 - rdx_1);\n        void* rax_4 = &arg1[rax_3];\n        rax_5 = strspn(rax_4, \"X\");\n        if (arg5 <= rax_5)\n        {\n            FILE*** rax_6 = sub_40add0(nullptr, arg5);\n            if (rax_6 == 0)\n            {\n                rdx_3 = -1;\n            }\n            else\n            {\n                int32_t r12_1 = 0x3a2f8;\n                void* rbx_2 = &arg1[(arg5 + rax_3)];\n                while (true)\n                {\n                    void* r14_1 = rax_4;\n                    if (arg5 != 0)\n                    {\n                        do\n                        {\n                            r14_1 = (r14_1 + 1);\n                            *(r14_1 - 1) = *\"abcdefghijklmnopqrstuvwxyzABCDEF\u2026\"[sub_40ae10(rax_6, 0x3d)];\n                        } while (r14_1 != rbx_2);\n                    }\n                    int32_t rax_12 = arg4(arg1, arg3);\n                    int32_t rdx_2 = rax_12;\n                    int32_t rcx;\n                    if (rax_12 >= 0)\n                    {\n                        *rax = rax_1;\n                        rcx = rax_1;\n                    }\n                    else\n                    {\n                        rcx = *rax;\n                        if (rcx != 0x11)\n                        {\n                            rdx_2 = -1;\n                        }\n                        else\n                        {\n                            int32_t temp0_1 = r12_1;\n                            r12_1 = (r12_1 - 1);\n                            if (temp0_1 == 1)\n                            {\n                                sub_40af30(rax_6);\n                                *rax = 0x11;\n                                rdx_3 = -1;\n                                break;\n                            }\n                            continue;\n                        }\n                    }\n                    void* var_58_1;\n                    var_58_1 = rdx_2;\n                    char* var_60;\n                    var_60 = rcx;\n                    sub_40af30(rax_6);\n                    rdx_3 = var_58_1;\n                    *rax = var_60;\n                    break;\n                }\n            }\n        }\n    }\n    if ((rdx_1 > rax_2 || (rdx_1 <= rax_2 && arg5 > rax_5)))\n    {\n        *rax = 0x16;\n        rdx_3 = -1;\n    }\n    return rdx_3;\n}\n\n"
        },
        {
            "funcName": "sub_408430",
            "funcStartAddr": "0x408430",
            "funcEndAddr": "0x40845b",
            "decompiledFuncCode": "uint64_t sub_408430(char* arg1, int32_t arg2, int32_t arg3, int32_t arg4, \n    uint64_t arg5)\n{\n    int32_t var_c = arg3;\n    if (arg4 > 2)\n    {\n        sub_4082b0();\n        /* no return */\n    }\n    return sub_4082d0(arg1, arg2, &var_c, *((arg4 << 3) + 0x40ddc0), arg5);\n}\n\n"
        },
        {
            "funcName": "sub_408460",
            "funcStartAddr": "0x408460",
            "funcEndAddr": "0x408491",
            "decompiledFuncCode": "uint64_t sub_408460(char* arg1, int32_t arg2, int32_t arg3, int32_t arg4)\n{\n    int32_t var_c = arg3;\n    if (arg4 > 2)\n    {\n        sub_4082b0();\n        /* no return */\n    }\n    return sub_4082d0(arg1, arg2, &var_c, *((arg4 << 3) + 0x40ddc0), 6);\n}\n\n"
        },
        {
            "funcName": "sub_4084b0",
            "funcStartAddr": "0x4021fd",
            "funcEndAddr": "0x40888d",
            "decompiledFuncCode": "int64_t sub_4084b0(FILE* arg1, int64_t arg2, int64_t arg3, int64_t arg4, \n    int64_t* arg5, int64_t arg6)\n{\n    if (arg2 == 0)\n    {\n        __fprintf_chk();\n    }\n    else\n    {\n        __fprintf_chk();\n    }\n    __fprintf_chk(arg1, 1, \"Copyright %s %d Free Software Fo\u2026\", dcgettext(nullptr, &data_40de52, 5), 0x7e1);\n    fputs_unlocked(dcgettext(nullptr, \"\\nLicense GPLv3+: GNU GPL versio\u2026\", 5), arg1);\n    int64_t var_58;\n    int64_t var_50_1;\n    int64_t var_48;\n    int64_t var_40;\n    char* rax_6;\n    int64_t rbx_1;\n    char* rsi_1;\n    int64_t r12_1;\n    int64_t r13;\n    int64_t r14;\n    int64_t r15_1;\n    switch (arg6)\n    {\n        case 0:\n        {\n            abort();\n            /* no return */\n        }\n        case 8:\n        {\n            r13 = arg5[6];\n            r12_1 = arg5[5];\n            r15_1 = arg5[4];\n            var_48 = arg5[7];\n            r14 = arg5[3];\n            rbx_1 = *arg5;\n            var_58 = arg5[2];\n            var_50_1 = arg5[1];\n            rax_6 = dcgettext(nullptr, \"Written by %s, %s, %s,\\n%s, %s, \u2026\", 5);\n            break;\n        }\n        case 9:\n        {\n            rsi_1 = \"Written by %s, %s, %s,\\n%s, %s, \u2026\";\n            r13 = arg5[6];\n            r12_1 = arg5[5];\n            var_40 = arg5[8];\n            r15_1 = arg5[4];\n            r14 = arg5[3];\n            var_48 = arg5[7];\n            var_58 = arg5[2];\n            rbx_1 = *arg5;\n            var_50_1 = arg5[1];\n            break;\n        }\n        default:\n            rsi_1 = \"Written by %s, %s, %s,\\n%s, %s, \u2026\";\n            r13 = arg5[6];\n            r12_1 = arg5[5];\n            var_40 = arg5[8];\n            r15_1 = arg5[4];\n            r14 = arg5[3];\n            var_48 = arg5[7];\n            var_58 = arg5[2];\n            rbx_1 = *arg5;\n            var_50_1 = arg5[1];\n    }\n    int64_t var_60;\n    if ((arg6 > 9 || arg6 == 9))\n    {\n        rax_6 = dcgettext(nullptr, rsi_1, 5);\n        var_60 = var_40;\n    }\n    int64_t var_78_1;\n    int64_t var_70_1;\n    int64_t var_68_2;\n    int64_t var_58_1;\n    int64_t var_50;\n    char* rax_19;\n    char* rax_22;\n    int64_t rbx_5;\n    int64_t rbx_6;\n    int64_t r9_9;\n    int64_t r12_4;\n    int64_t r13_2;\n    int64_t r14_1;\n    switch (arg6)\n    {\n        case 1:\n        {\n            /* tailcall */\n            return __fprintf_chk(arg1, 1, dcgettext(nullptr, \"Written by %s.\\n\", 5), *arg5);\n            break;\n        }\n        case 2:\n        {\n            /* tailcall */\n            return __fprintf_chk(arg1, 1, dcgettext(nullptr, \"Written by %s and %s.\\n\", 5), *arg5, arg5[1]);\n            break;\n        }\n        case 3:\n        {\n            /* tailcall */\n            return __fprintf_chk(arg1, 1, dcgettext(nullptr, \"Written by %s, %s, and %s.\\n\", 5), *arg5, arg5[1], arg5[2]);\n            break;\n        }\n        case 4:\n        {\n            r14_1 = arg5[3];\n            r13_2 = arg5[2];\n            r12_4 = arg5[1];\n            rbx_5 = *arg5;\n            rax_19 = dcgettext(nullptr, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n            break;\n        }\n        case 5:\n        {\n            int64_t r15_2 = arg5[4];\n            r14_1 = arg5[3];\n            r13_2 = arg5[2];\n            r12_4 = arg5[1];\n            rbx_5 = *arg5;\n            rax_19 = dcgettext(nullptr, \"Written by %s, %s, %s,\\n%s, and \u2026\", 5);\n            var_60 = r15_2;\n            break;\n        }\n        case 6:\n        {\n            int64_t r12_5 = arg5[5];\n            int64_t r15_3 = arg5[4];\n            int64_t r14_2 = arg5[3];\n            var_58_1 = arg5[1];\n            int64_t r13_3 = arg5[2];\n            rbx_6 = *arg5;\n            rax_22 = dcgettext(nullptr, \"Written by %s, %s, %s,\\n%s, %s, \u2026\", 5);\n            r9_9 = r13_3;\n            var_68_2 = r12_5;\n            var_70_1 = r15_3;\n            var_78_1 = r14_2;\n            break;\n        }\n        case 7:\n        {\n            int64_t r13_4 = arg5[6];\n            int64_t r12_6 = arg5[5];\n            int64_t r15_4 = arg5[4];\n            int64_t r14_3 = arg5[3];\n            var_50 = arg5[2];\n            rbx_6 = *arg5;\n            var_58_1 = arg5[1];\n            rax_22 = dcgettext(nullptr, \"Written by %s, %s, %s,\\n%s, %s, \u2026\", 5);\n            var_60 = r13_4;\n            var_68_2 = r12_6;\n            var_70_1 = r15_4;\n            var_78_1 = r14_3;\n            r9_9 = var_50;\n            break;\n        }\n        default:\n            return __fprintf_chk(arg1, 1, rax_6, rbx_1, var_50_1, var_58, r14, r15_1, r12_1, r13, var_48, var_60, var_58, var_50_1, var_48, var_40);\n    }\n    if ((arg6 == 4 || arg6 == 5))\n    {\n        __fprintf_chk(arg1, 1, rax_19, rbx_5, r12_4, r13_2, r14_1, var_60);\n        return r14_1;\n    }\n    else if ((arg6 == 6 || arg6 == 7))\n    {\n        return __fprintf_chk(arg1, 1, rax_22, rbx_6, var_58_1, r9_9, var_78_1, var_70_1, var_68_2, var_60, var_58_1, var_50);\n    }\n}\n\n"
        },
        {
            "funcName": "sub_408890",
            "funcStartAddr": "0x408890",
            "funcEndAddr": "0x4088b0",
            "decompiledFuncCode": "int64_t sub_408890(FILE* arg1, int64_t arg2, int64_t arg3, int64_t arg4, \n    int64_t* arg5)\n{\n    int64_t r9 = 0;\n    if (*arg5 != 0)\n    {\n        do\n        {\n            r9 = (r9 + 1);\n        } while (arg5[r9] != 0);\n    }\n    /* tailcall */\n    return sub_4084b0(arg1, arg2, arg3, arg4, arg5, r9);\n}\n\n"
        },
        {
            "funcName": "sub_4088b0",
            "funcStartAddr": "0x4088b0",
            "funcEndAddr": "0x408910",
            "decompiledFuncCode": "int64_t sub_4088b0(FILE* arg1, int64_t arg2, int64_t arg3, int64_t arg4, \n    int32_t* arg5)\n{\n    int64_t r9 = 0;\n    void var_58;\n    do\n    {\n        int32_t rax_3 = *arg5;\n        if (rax_3 <= 0x2f)\n        {\n            int64_t* r10_2 = (rax_3 + *(arg5 + 0x10));\n            *arg5 = (rax_3 + 8);\n            int64_t rax_2 = *r10_2;\n            *(&var_58 + (r9 << 3)) = rax_2;\n            if (rax_2 == 0)\n            {\n                break;\n            }\n        }\n        else\n        {\n            int64_t* r10_3 = *(arg5 + 8);\n            *(arg5 + 8) = &r10_3[1];\n            int64_t rax_5 = *r10_3;\n            *(&var_58 + (r9 << 3)) = rax_5;\n            if (rax_5 == 0)\n            {\n                break;\n            }\n        }\n        r9 = (r9 + 1);\n    } while (r9 != 0xa);\n    return sub_4084b0(arg1, arg2, arg3, arg4, &var_58, r9);\n}\n\n"
        },
        {
            "funcName": "sub_408910",
            "funcStartAddr": "0x408910",
            "funcEndAddr": "0x4089cc",
            "decompiledFuncCode": "int64_t sub_408910(FILE* arg1, int64_t arg2, int64_t arg3, int64_t arg4)\n{\n    char r11 = 0;\n    int64_t r8;\n    int64_t var_18 = r8;\n    void* r10 = &arg_8;\n    int32_t r8_1 = 0x20;\n    void* var_98 = &arg_8;\n    int64_t r9;\n    int64_t var_10 = r9;\n    int64_t r9_1 = 0;\n    int32_t var_a0 = 0x20;\n    void var_38;\n    void* var_90 = &var_38;\n    void var_88;\n    do\n    {\n        if (r8_1 <= 0x2f)\n        {\n            uint64_t rax_1 = r8_1;\n            r8_1 = (r8_1 + 8);\n            r11 = 1;\n            int64_t rax_3 = *(rax_1 + &var_38);\n            *(&var_88 + (r9_1 << 3)) = rax_3;\n            if (rax_3 == 0)\n            {\n                break;\n            }\n        }\n        else\n        {\n            void* rax_4 = r10;\n            r10 = (r10 + 8);\n            int64_t rax_5 = *rax_4;\n            *(&var_88 + (r9_1 << 3)) = rax_5;\n            if (rax_5 == 0)\n            {\n                break;\n            }\n        }\n        r9_1 = (r9_1 + 1);\n    } while (r9_1 != 0xa);\n    if (r11 != 0)\n    {\n        int32_t var_a0_1 = r8_1;\n    }\n    return sub_4084b0(arg1, arg2, arg3, arg4, &var_88, r9_1);\n}\n\n"
        },
        {
            "funcName": "sub_4089d0",
            "funcStartAddr": "0x4089d0",
            "funcEndAddr": "0x408a44",
            "decompiledFuncCode": "int64_t sub_4089d0()\n{\n    __printf_chk(1, dcgettext(nullptr, \"\\nReport bugs to: %s\\n\", 5), \"bug-coreutils@gnu.org\");\n    __printf_chk(1, dcgettext(nullptr, \"%s home page: <%s>\\n\", 5), \"GNU coreutils\", \"https://www.gnu.org/software/cor\u2026\");\n    /* tailcall */\n    return fputs_unlocked(dcgettext(nullptr, \"General help using GNU software:\u2026\", 5), stdout);\n}\n\n"
        },
        {
            "funcName": "sub_408a50",
            "funcStartAddr": "0x408a50",
            "funcEndAddr": "0x408a6a",
            "decompiledFuncCode": "int64_t sub_408a50(size_t arg1)\n{\n    int64_t rax = malloc(arg1);\n    if ((rax == 0 && arg1 != 0))\n    {\n        sub_408ca0();\n        /* no return */\n    }\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_408ab0",
            "funcStartAddr": "0x408ab0",
            "funcEndAddr": "0x408ae6",
            "decompiledFuncCode": "int64_t sub_408ab0(int64_t arg1, size_t arg2)\n{\n    if ((arg2 == 0 && arg1 != 0))\n    {\n        free(arg1);\n        return 0;\n    }\n    int64_t rax = realloc(arg1, arg2);\n    if ((rax == 0 && arg2 != 0))\n    {\n        sub_408ca0();\n        /* no return */\n    }\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_408bfa",
            "funcStartAddr": "0x408bfa",
            "funcEndAddr": "0x408c00",
            "decompiledFuncCode": "int64_t sub_408bfa() __noreturn\n{\n    sub_408ca0();\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_408c00",
            "funcStartAddr": "0x408c00",
            "funcEndAddr": "0x408c17",
            "decompiledFuncCode": "int64_t sub_408c00(size_t arg1)\n{\n    /* tailcall */\n    return memset(sub_408a50(arg1), 0, arg1);\n}\n\n"
        },
        {
            "funcName": "sub_408c20",
            "funcStartAddr": "0x408c20",
            "funcEndAddr": "0x408c4e",
            "decompiledFuncCode": "int64_t sub_408c20(size_t arg1, size_t arg2)\n{\n    int64_t rax;\n    bool rdx;\n    rdx = HIGHD((arg1 * arg2));\n    rax = LOWD((arg1 * arg2));\n    if ((rax >= 0 && ((arg1 * arg2) >> 0x40) != 0 == 0))\n    {\n        int64_t rax_1 = calloc(arg1, arg2);\n        if (rax_1 != 0)\n        {\n            return rax_1;\n        }\n    }\n    sub_408ca0();\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_408c50",
            "funcStartAddr": "0x408c50",
            "funcEndAddr": "0x408c78",
            "decompiledFuncCode": "int64_t sub_408c50(int64_t arg1, size_t arg2)\n{\n    /* tailcall */\n    return memcpy(sub_408a50(arg2), arg1, arg2);\n}\n\n"
        },
        {
            "funcName": "sub_408c80",
            "funcStartAddr": "0x408c80",
            "funcEndAddr": "0x408c93",
            "decompiledFuncCode": "int64_t sub_408c80(char* arg1)\n{\n    /* tailcall */\n    return sub_408c50(arg1, (strlen(arg1) + 1));\n}\n\n"
        },
        {
            "funcName": "sub_408ca0",
            "funcStartAddr": "0x408ca0",
            "funcEndAddr": "0x408cd1",
            "decompiledFuncCode": "int64_t sub_408ca0() __noreturn\n{\n    error(data_611300, 0, \"%s\", dcgettext(nullptr, \"memory exhausted\", 5));\n    abort();\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_408ce0",
            "funcStartAddr": "0x408ce0",
            "funcEndAddr": "0x408d0f",
            "decompiledFuncCode": "void* sub_408ce0()\n{\n    void* rax = sub_408f90(nullptr, 0);\n    if ((rax == 0 && *__errno_location() == 0xc))\n    {\n        sub_408ca0();\n        /* no return */\n    }\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_408d10",
            "funcStartAddr": "0x408d10",
            "funcEndAddr": "0x408d79",
            "decompiledFuncCode": "uint64_t sub_408d10()\n{\n    int32_t rbx = 0;\n    char* var_18 = nullptr;\n    uint64_t var_10 = 0;\n    ssize_t rax = __getdelim(&var_18, &var_10, 0xa, stdin);\n    if (rax > 0)\n    {\n        char* rdi_1 = var_18;\n        void* rax_1 = &rdi_1[(rax - 1)];\n        if (*rax_1 == 0xa)\n        {\n            *rax_1 = 0;\n            rdi_1 = var_18;\n        }\n        rbx = rpmatch(rdi_1) > 0;\n    }\n    free(var_18);\n    return rbx;\n}\n\n"
        },
        {
            "funcName": "sub_408d80",
            "funcStartAddr": "0x408d80",
            "funcEndAddr": "0x408eb5",
            "decompiledFuncCode": "uint64_t sub_408d80(int32_t arg1, int32_t arg2, int32_t arg3)\n{\n    void* var_58 = &arg_8;\n    int64_t rcx;\n    int64_t var_30 = rcx;\n    int32_t var_60 = 0x10;\n    void var_48;\n    void* var_50 = &var_48;\n    if (arg2 != 0x406)\n    {\n        return fcntl();\n    }\n    int32_t var_60_1 = 0x18;\n    int32_t rax_2;\n    int32_t rax_5;\n    int32_t* rax_15;\n    int32_t rax_17;\n    int32_t rbx;\n    if (data_611558 < 0)\n    {\n        rax_5 = sub_408d80();\n        rbx = rax_5;\n    }\n    else\n    {\n        rax_2 = fcntl();\n        rbx = rax_2;\n        if (rax_2 < 0)\n        {\n            rax_15 = __errno_location();\n            if (*rax_15 == 0x16)\n            {\n                rax_17 = sub_408d80(arg1, 0, arg3);\n                rbx = rax_17;\n                if (rax_17 >= 0)\n                {\n                    data_611558 = 0xffffffff;\n                }\n            }\n        }\n    }\n    if (((((data_611558 >= 0 && rax_2 < 0) && *rax_15 == 0x16) && rax_17 >= 0) || (rax_5 >= 0 && data_611558 == 0xffffffff)))\n    {\n        int32_t rax_7 = fcntl(rbx, 1);\n        int32_t rax_10;\n        if (rax_7 >= 0)\n        {\n            rax_10 = fcntl(rbx, 2, (rax_7 | 1));\n        }\n        if ((rax_7 < 0 || (rax_7 >= 0 && rax_10 == 0xffffffff)))\n        {\n            int32_t* rax_11 = __errno_location();\n            int32_t rdi_2 = rbx;\n            rbx = -1;\n            int32_t r12_1 = *rax_11;\n            close(rdi_2);\n            *rax_11 = r12_1;\n        }\n    }\n    if ((data_611558 >= 0 && (rax_2 >= 0 || (rax_2 < 0 && *rax_15 != 0x16))))\n    {\n        data_611558 = 1;\n    }\n    return rbx;\n}\n\n"
        },
        {
            "funcName": "sub_408ec0",
            "funcStartAddr": "0x408ec0",
            "funcEndAddr": "0x408f00",
            "decompiledFuncCode": "int64_t sub_408ec0(FILE* arg1)\n{\n    int32_t* rbx = arg1;\n    if ((arg1 != 0 && (__freading(arg1) != 0 && (*rbx & 0x100) != 0)))\n    {\n        sub_408f30(rbx, 0, 1);\n        /* tailcall */\n        return fflush(rbx);\n    }\n    /* tailcall */\n    return fflush(rbx);\n}\n\n"
        },
        {
            "funcName": "sub_408f00",
            "funcStartAddr": "0x408f00",
            "funcEndAddr": "0x408f28",
            "decompiledFuncCode": "int64_t sub_408f00(int32_t* arg1)\n{\n    int64_t rax_1 = 0;\n    if (*(arg1 + 0x28) <= *(arg1 + 0x20))\n    {\n        rax_1 = (*(arg1 + 0x10) - *(arg1 + 8));\n        if ((*arg1 & 0x100) != 0)\n        {\n            rax_1 = (rax_1 + (*(arg1 + 0x58) - *(arg1 + 0x48)));\n        }\n    }\n    return rax_1;\n}\n\n"
        },
        {
            "funcName": "sub_408f30",
            "funcStartAddr": "0x408f30",
            "funcEndAddr": "0x408f87",
            "decompiledFuncCode": "off64_t sub_408f30(FILE* arg1, off_t arg2, int32_t arg3)\n{\n    if ((arg1->_IO_read_end == arg1->_IO_read_ptr && (arg1->_IO_write_ptr == arg1->_IO_write_base && arg1->_IO_save_base == 0)))\n    {\n        off64_t rax_3 = lseek(fileno(arg1), arg2, arg3);\n        if (rax_3 != -1)\n        {\n            arg1->_flags = (arg1->_flags & 0xffffffef);\n            arg1->_offset = rax_3;\n            rax_3 = 0;\n        }\n        return rax_3;\n    }\n    /* tailcall */\n    return fseeko(arg1, arg2, arg3);\n}\n\n"
        },
        {
            "funcName": "sub_408f90",
            "funcStartAddr": "0x408f90",
            "funcEndAddr": "0x409452",
            "decompiledFuncCode": "void* const sub_408f90(void* arg1, size_t arg2)\n{\n    void* var_108 = arg1;\n    void* const var_110;\n    size_t var_100;\n    if (arg2 != 0)\n    {\n        var_100 = arg2;\n        if (var_108 != 0)\n        {\n            var_110 = var_108;\n        }\n    }\n    else\n    {\n        var_100 = 0x1000;\n        if (arg1 != 0)\n        {\n            var_110 = nullptr;\n            *__errno_location() = 0x16;\n        }\n    }\n    void* rax_1;\n    if (((arg2 != 0 && var_108 == 0) || (arg2 == 0 && arg1 == 0)))\n    {\n        rax_1 = malloc(var_100);\n        var_110 = rax_1;\n    }\n    if (((arg2 != 0 && var_108 != 0) || (((arg2 != 0 && var_108 == 0) || (arg2 == 0 && arg1 == 0)) && rax_1 != 0)))\n    {\n        void* rbx_2 = (var_110 + var_100);\n        *(rbx_2 - 1) = 0;\n        int64_t var_c8;\n        int32_t rax_5 = __lxstat(1, &data_40ce0b, &var_c8);\n        int32_t rax_6;\n        int32_t rbx_6;\n        int32_t* r12_1;\n        if (rax_5 >= 0)\n        {\n            int64_t r15_1 = var_c8;\n            int64_t var_c0;\n            int64_t r14_1 = var_c0;\n            int64_t var_120_1 = r15_1;\n            rax_6 = __lxstat(1, \"/\", &var_c8);\n            if (rax_6 >= 0)\n            {\n                void* var_e8_1 = (rbx_2 - 1);\n                int64_t rax_8 = var_c8;\n                bool cond:1_1 = r15_1 != rax_8;\n                int64_t var_e0_1 = rax_8;\n                rax_8 = r14_1 != var_c0;\n                bool rdx_3 = (cond:1_1 | rax_8);\n                if (rdx_3 != 0)\n                {\n                    DIR* rbp_1 = nullptr;\n                    int32_t r15_2 = -0x64;\n                    r12_1 = __errno_location();\n                    do\n                    {\n                        int32_t rax_11 = openat(r15_2, &data_40ce0a, 0);\n                        r15_2 = rax_11;\n                        if (rax_11 < 0)\n                        {\n                            rbx_6 = *r12_1;\n                            if (rbp_1 != 0)\n                            {\n                            label_409364:\n                                closedir(rbp_1);\n                            }\n                        }\n                        else\n                        {\n                            if (__fxstat(1, rax_11, &var_c8) != 0)\n                            {\n                                rbx_6 = *r12_1;\n                                if (rbp_1 != 0)\n                                {\n                                    closedir(rbp_1);\n                                }\n                                goto label_4093d0;\n                            }\n                            int32_t rax_13;\n                            if (rbp_1 != 0)\n                            {\n                                rax_13 = closedir(rbp_1);\n                            }\n                            if ((rbp_1 == 0 || (rbp_1 != 0 && rax_13 == 0)))\n                            {\n                                int64_t rax_14 = var_c8;\n                                DIR* rax_16 = fdopendir(r15_2);\n                                rbp_1 = rax_16;\n                                if (rax_16 != 0)\n                                {\n                                    bool r13_1 = rdx_3;\n                                    struct dirent64* rax_17;\n                                    char* rbx_3;\n                                    while (true)\n                                    {\n                                        *r12_1 = 0;\n                                        rax_17 = readdir(rbp_1);\n                                        if (rax_17 == 0)\n                                        {\n                                            rbx_6 = *r12_1;\n                                            if (rbx_6 != 0)\n                                            {\n                                                break;\n                                            }\n                                            if (r13_1 == 0)\n                                            {\n                                                break;\n                                            }\n                                            rewinddir(rbp_1);\n                                            rax_17 = readdir(rbp_1);\n                                            if (rax_17 == 0)\n                                            {\n                                                rbx_6 = *r12_1;\n                                                break;\n                                            }\n                                            r13_1 = false;\n                                            if (rax_17->d_name[0] != 0x2e)\n                                            {\n                                                goto label_409162;\n                                            }\n                                        }\n                                        if (((rax_17 != 0 && rax_17->d_name[0] == 0x2e) || rax_17 == 0))\n                                        {\n                                            if (rax_17->d_name[1] == 0)\n                                            {\n                                                continue;\n                                            }\n                                            if ((rax_17->d_name[1] != 0 && rax_17->d_name[1] == 0x2e))\n                                            {\n                                                continue;\n                                            }\n                                        }\n                                        if (r13_1 != 0)\n                                        {\n                                            int64_t rcx_1;\n                                            rcx_1 = rax_14 != var_120_1;\n                                            bool rdx_5 = (rax_17->d_ino == r14_1 | rcx_1);\n                                            if (rdx_5 == 0)\n                                            {\n                                                continue;\n                                            }\n                                            else\n                                            {\n                                                r13_1 = rdx_5;\n                                            }\n                                            goto label_409162;\n                                        }\n                                    label_409162:\n                                        rbx_3 = &rax_17->d_name;\n                                        int32_t var_b0;\n                                        if (((__fxstatat(1, r15_2, rbx_3, &var_c8, 0x100) == 0 && (var_b0 & 0xf000) == 0x4000) && var_c8 == var_120_1))\n                                        {\n                                            if (var_c0 == r14_1)\n                                            {\n                                                break;\n                                            }\n                                        }\n                                    }\n                                    if ((!((rax_17 == 0 && rbx_6 == 0) && r13_1 != 0)))\n                                    {\n                                        void* r13_3 = (var_e8_1 - var_110);\n                                        size_t rax_22 = strlen(rbx_3);\n                                        void* rax_25;\n                                        size_t rdx_7;\n                                        if (r13_3 <= rax_22)\n                                        {\n                                            if (arg2 != 0)\n                                            {\n                                                *r12_1 = 0x22;\n                                                rbx_6 = 0x22;\n                                            }\n                                            else\n                                            {\n                                                rdx_7 = var_100;\n                                                if (rax_22 >= var_100)\n                                                {\n                                                    rdx_7 = rax_22;\n                                                }\n                                                size_t rax_24 = (var_100 + rdx_7);\n                                                if ((var_100 + rdx_7) >= var_100)\n                                                {\n                                                    rax_25 = realloc(var_110, rax_24);\n                                                    if (rax_25 != 0)\n                                                    {\n                                                        var_110 = rax_25;\n                                                        var_e8_1 = memcpy((rax_25 + (rdx_7 + r13_3)), (rax_25 + r13_3), (var_100 - r13_3));\n                                                        var_100 = rax_24;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        if (((((r13_3 <= rax_22 && arg2 == 0) && (var_100 + rdx_7) >= var_100) && rax_25 != 0) || r13_3 > rax_22))\n                                        {\n                                            void* rax_28 = memcpy((var_e8_1 - rax_22), rbx_3, rax_22);\n                                            var_e8_1 = (rax_28 - 1);\n                                            r14_1 = var_c0;\n                                            *(rax_28 - 1) = 0x2f;\n                                            var_120_1 = rax_14;\n                                            if (var_e0_1 != rax_14)\n                                            {\n                                                continue;\n                                            }\n                                            else\n                                            {\n                                                if (var_c0 == var_c0)\n                                                {\n                                                    if (closedir(rbp_1) != 0)\n                                                    {\n                                                        goto label_409396;\n                                                    }\n                                                    rbx_2 = (var_110 + var_100);\n                                                    goto label_4092b7;\n                                                }\n                                                continue;\n                                            }\n                                        }\n                                        if (((r13_3 <= rax_22 && arg2 == 0) && ((var_100 + rdx_7) < var_100 || ((var_100 + rdx_7) >= var_100 && rax_25 == 0))))\n                                        {\n                                            *r12_1 = 0xc;\n                                            rbx_6 = 0xc;\n                                        }\n                                    }\n                                    else if (rbx_6 == 0)\n                                    {\n                                        *r12_1 = 2;\n                                        rbx_6 = 2;\n                                    }\n                                    goto label_409364;\n                                }\n                            }\n                            rbx_6 = *r12_1;\n                        label_4093d0:\n                            close(r15_2);\n                        }\n                    } while (var_108 == 0);\n                    if (var_108 != 0)\n                    {\n                        goto label_409371;\n                    }\n                    goto label_4093a1;\n                }\n            label_4092b7:\n                if (var_e8_1 == ((var_110 + var_100) - 1))\n                {\n                    *(var_e8_1 - 1) = 0x2f;\n                    var_e8_1 = (var_e8_1 - 1);\n                }\n                void* rbx_5 = (rbx_2 - var_e8_1);\n                memmove(var_110, var_e8_1, rbx_5);\n                if (arg2 == 0)\n                {\n                    var_108 = realloc(var_110, rbx_5);\n                }\n                void* const rax_34 = var_108;\n                if (rax_34 == 0)\n                {\n                    rax_34 = var_110;\n                }\n                var_110 = rax_34;\n            }\n        }\n        if ((rax_5 < 0 || (rax_5 >= 0 && rax_6 < 0)))\n        {\n            r12_1 = __errno_location();\n        label_409396:\n            rbx_6 = *r12_1;\n            if (var_108 != 0)\n            {\n                goto label_409371;\n            }\n        label_4093a1:\n            free(var_110);\n        label_409371:\n            *r12_1 = rbx_6;\n            var_110 = nullptr;\n        }\n    }\n    return var_110;\n}\n\n"
        },
        {
            "funcName": "sub_409460",
            "funcStartAddr": "0x409460",
            "funcEndAddr": "0x40953f",
            "decompiledFuncCode": "uint64_t sub_409460(int64_t arg1, int32_t* arg2)\n{\n    int64_t r11 = (arg1 + 8);\n    int32_t r12 = arg2[0xb];\n    int32_t rbp = *arg2;\n    int64_t rbx = arg2[0xc];\n    int32_t r9 = r12;\n    int32_t r10 = rbp;\n    int32_t r8 = rbx;\n    while (r10 > r8)\n    {\n        int32_t r14_2;\n        while (r9 < r8)\n        {\n            r14_2 = (r10 - r8);\n            int32_t rdx_2 = (r8 - r9);\n            if (r14_2 <= rdx_2)\n            {\n                break;\n            }\n            int64_t rcx_1 = r9;\n            r10 = (r10 - rdx_2);\n            int64_t* rax_1 = (arg1 + (rcx_1 << 3));\n            int64_t r13_1 = (r11 + (((rdx_2 - 1) + rcx_1) << 3));\n            int64_t rdx_6 = (r10 - rcx_1);\n            do\n            {\n                int64_t rcx_2 = *rax_1;\n                *rax_1 = rax_1[rdx_6];\n                rax_1[rdx_6] = rcx_2;\n                rax_1 = &rax_1[1];\n            } while (r13_1 != rax_1);\n            if (r10 <= r8)\n            {\n                break;\n            }\n        }\n        if (r9 >= r8)\n        {\n            break;\n        }\n        int64_t rdx_7 = r9;\n        int64_t* rax_4 = (arg1 + (rdx_7 << 3));\n        int64_t r13_2 = (r11 + (((r14_2 - 1) + rdx_7) << 3));\n        int64_t rcx_6 = (rbx - rdx_7);\n        do\n        {\n            int64_t rcx_7 = *rax_4;\n            *rax_4 = rax_4[rcx_6];\n            rax_4[rcx_6] = rcx_7;\n            rax_4 = &rax_4[1];\n        } while (rax_4 != r13_2);\n        r9 = (r9 + r14_2);\n    }\n    arg2[0xc] = rbp;\n    uint64_t rax_3 = (rbp - r8);\n    arg2[0xb] = (r12 + rax_3);\n    return rax_3;\n}\n\n"
        },
        {
            "funcName": "sub_409540",
            "funcStartAddr": "0x409540",
            "funcEndAddr": "0x409b5c",
            "decompiledFuncCode": "uint64_t sub_409540(int32_t arg1, int64_t* arg2, char* arg3, int64_t* arg4, \n    int32_t* arg5, int32_t arg6, int32_t* arg7, int32_t arg8, int64_t arg9)\n{\n    char* r14 = *(arg7 + 0x20);\n    char rax_1 = *r14;\n    char* rbp = r14;\n    uint64_t r13_1;\n    if ((rax_1 == 0x3d || rax_1 == 0))\n    {\n        r13_1 = 0;\n    }\n    if ((rax_1 != 0x3d && rax_1 != 0))\n    {\n        while (true)\n        {\n            rbp = &rbp[1];\n            char rax_2 = *rbp;\n            if (rax_2 == 0)\n            {\n                break;\n            }\n            if (rax_2 == 0x3d)\n            {\n                break;\n            }\n            if ((!(rax_2 != 0 && rax_2 != 0x3d)))\n            {\n                /* nop */\n            }\n        }\n        r13_1 = (rbp - r14);\n    }\n    int64_t* rbx = arg4;\n    int64_t r12 = 0;\n    char* rax_3 = *rbx;\n    char* r15 = rax_3;\n    uint64_t rax_14;\n    if (rax_3 != 0)\n    {\n        int32_t rax_4;\n        uint64_t rax_5;\n        int32_t r8;\n        while (true)\n        {\n            rax_4 = strncmp(r15, r14, r13_1);\n            if (rax_4 == 0)\n            {\n                rax_5 = strlen(r15);\n                if (rax_5 == r13_1)\n                {\n                    break;\n                }\n            }\n            rbx = &rbx[4];\n            r15 = *rbx;\n            r8 = (r12 + 1);\n            if (r15 == 0)\n            {\n                break;\n            }\n            r12 = r8;\n        }\n        if ((rax_4 == 0 && rax_5 == r13_1))\n        {\n            goto label_409770;\n        }\n        rbx = nullptr;\n        int32_t var_44_1 = 0xffffffff;\n        char* rdi_2 = rax_3;\n        int64_t r15_1 = 0;\n        int32_t var_50_1 = 0;\n        int32_t var_40_1 = 0;\n        char* var_70_1 = nullptr;\n        int64_t* rbp_1 = arg4;\n        do\n        {\n            if (strncmp(rdi_2, r14, r13_1) == 0)\n            {\n                if (rbx == 0)\n                {\n                    var_44_1 = r15_1;\n                    rbx = rbp_1;\n                }\n                else if (((((arg6 != 0 || (arg6 == 0 && rbx[1] != rbp_1[1])) || ((arg6 == 0 && rbx[1] == rbp_1[1]) && rbx[2] != rbp_1[2])) || (((arg6 == 0 && rbx[1] == rbp_1[1]) && rbx[2] == rbp_1[2]) && rbx[3] != rbp_1[3])) && var_50_1 == 0))\n                {\n                    if (arg8 == 0)\n                    {\n                        var_50_1 = 1;\n                        if (var_70_1 != 0)\n                        {\n                            goto label_409696;\n                        }\n                    }\n                    else\n                    {\n                        if (var_70_1 != 0)\n                        {\n                            goto label_409696;\n                        }\n                        char* rax_36 = calloc(r8, 1);\n                        var_70_1 = rax_36;\n                        if (rax_36 == 0)\n                        {\n                            var_50_1 = 1;\n                        }\n                        else\n                        {\n                            var_40_1 = 1;\n                            var_70_1[var_44_1] = 1;\n                        label_409696:\n                            var_70_1[r15_1] = 1;\n                        }\n                    }\n                }\n            }\n            rbp_1 = &rbp_1[4];\n            rdi_2 = *rbp_1;\n            r15_1 = (r15_1 + 1);\n        } while (rdi_2 != 0);\n        if (((var_70_1 == 0 && var_50_1 == 0) && rbx != 0))\n        {\n            r12 = var_44_1;\n        label_409770:\n            int32_t rdx_3 = *arg7;\n            *(arg7 + 0x20) = 0;\n            int32_t rax_18 = (rdx_3 + 1);\n            *arg7 = rax_18;\n            int32_t rcx_4 = rbx[1];\n            if (*rbp != 0)\n            {\n                if (rcx_4 != 0)\n                {\n                    *(arg7 + 0x10) = &rbp[1];\n                }\n                else\n                {\n                    if (arg8 != 0)\n                    {\n                        __fprintf_chk(stderr, 1, dcgettext(nullptr, \"%s: option '%s%s' doesn't allow \u2026\", 5), *arg2, arg9, *rbx, arg4);\n                    }\n                    arg7[2] = rbx[3];\n                    rax_14 = 0x3f;\n                }\n            }\n            if ((rcx_4 == 1 && *rbp == 0))\n            {\n                if (rax_18 < arg1)\n                {\n                    *arg7 = (rdx_3 + 2);\n                    *(arg7 + 0x10) = arg2[rax_18];\n                }\n                else\n                {\n                    if (arg8 != 0)\n                    {\n                        __fprintf_chk(stderr, 1, dcgettext(nullptr, \"%s: option '%s%s' requires an ar\u2026\", 5), *arg2, arg9, *rbx, arg4);\n                    }\n                    arg7[2] = rbx[3];\n                    char* rax_43;\n                    rax_43 = *arg3 != 0x3a;\n                    rax_14 = ((rax_43 * 5) + 0x3a);\n                }\n            }\n            if ((((*rbp != 0 && rcx_4 != 0) || ((*rbp == 0 && rcx_4 == 1) && rax_18 < arg1)) || (*rbp == 0 && rcx_4 != 1)))\n            {\n                if (arg5 == 0)\n                {\n                    goto label_40979e;\n                }\n                *arg5 = r12;\n            label_40979e:\n                int32_t* rdx_4 = rbx[2];\n                rax_14 = rbx[3];\n                if (rdx_4 != 0)\n                {\n                    *rdx_4 = rax_14;\n                    rax_14 = 0;\n                }\n            }\n            goto label_4097bc;\n        }\n        if ((var_70_1 != 0 || (var_70_1 == 0 && var_50_1 != 0)))\n        {\n            if (arg8 != 0)\n            {\n                if (var_50_1 != 0)\n                {\n                    __fprintf_chk(stderr, 1, dcgettext(nullptr, \"%s: option '%s%s' is ambiguous\\n\", 5), *arg2, arg9, r14, arg4);\n                    r14 = *(arg7 + 0x20);\n                }\n                else\n                {\n                    flockfile(stderr);\n                    __fprintf_chk(stderr, 1, dcgettext(nullptr, \"%s: option '%s%s' is ambiguous; \u2026\", 5), *arg2, arg9, *(arg7 + 0x20), arg4);\n                    uint64_t* const rdi_13 = stderr;\n                    int64_t* rbx_4 = arg4;\n                    char* rbp_5 = var_70_1;\n                    void* r12_2 = &var_70_1[(r12 + 1)];\n                    do\n                    {\n                        if (*rbp_5 != 0)\n                        {\n                            __fprintf_chk(rdi_13, 1, \" '%s%s'\", arg9, *rbx_4);\n                            rdi_13 = stderr;\n                        }\n                        rbp_5 = &rbp_5[1];\n                        rbx_4 = &rbx_4[4];\n                    } while (r12_2 != rbp_5);\n                    fputc(0xa, stderr);\n                    funlockfile(stderr);\n                    r14 = *(arg7 + 0x20);\n                }\n            }\n            if (var_40_1 != 0)\n            {\n                free(var_70_1);\n            }\n            *(arg7 + 0x20) = &r14[strlen(r14)];\n            *arg7 = (*arg7 + 1);\n            arg7[2] = 0;\n            rax_14 = 0x3f;\n        label_4097bc:\n            return rax_14;\n        }\n    }\n    if ((arg6 != 0 && *(arg2[*arg7] + 1) != 0x2d))\n    {\n        rax_14 = 0xffffffff;\n        if (strchr(arg3, rax_1) != 0)\n        {\n            goto label_4097bc;\n        }\n    }\n    if (arg8 == 0)\n    {\n        goto label_40972e;\n    }\n    __fprintf_chk(stderr, 1, dcgettext(nullptr, \"%s: unrecognized option '%s%s'\\n\", 5), *arg2, arg9, r14, arg4);\nlabel_40972e:\n    *(arg7 + 0x20) = 0;\n    *arg7 = (*arg7 + 1);\n    arg7[2] = 0;\n    return 0x3f;\n}\n\n"
        },
        {
            "funcName": "sub_409b60",
            "funcStartAddr": "0x409b60",
            "funcEndAddr": "0x40a126",
            "decompiledFuncCode": "uint64_t sub_409b60(int32_t arg1, int64_t* arg2, char* arg3, int64_t* arg4, \n    int32_t* arg5, int32_t arg6, int32_t* arg7, int32_t arg8)\n{\n    int32_t r13 = arg7[1];\n    if (arg1 <= 0)\n    {\n        goto label_409d9c;\n    }\n    int32_t rax_1 = *arg7;\n    int32_t rbp_1 = arg1;\n    char* r15_1 = arg3;\n    *(arg7 + 0x10) = 0;\n    if (rax_1 == 0)\n    {\n        *arg7 = 1;\n        rax_1 = 1;\n    }\n    uint32_t rax_3;\n    char* rdx;\n    if ((rax_1 == 0 || (rax_1 != 0 && arg7[6] == 0)))\n    {\n        arg7[0xc] = rax_1;\n        arg7[0xb] = rax_1;\n        *(arg7 + 0x20) = 0;\n        char rax_2 = *r15_1;\n        if (rax_2 == 0x2d)\n        {\n            arg7[0xa] = 2;\n            r15_1 = &r15_1[1];\n            rdx = nullptr;\n        }\n        else if (rax_2 == 0x2b)\n        {\n            arg7[0xa] = 0;\n            r15_1 = &r15_1[1];\n            rdx = nullptr;\n        }\n        else\n        {\n            rdx = nullptr;\n            char* rax_16;\n            if (arg8 == 0)\n            {\n                rax_16 = getenv(\"POSIXLY_CORRECT\");\n                if (rax_16 == 0)\n                {\n                    arg7[0xa] = 1;\n                    rdx = *(arg7 + 0x20);\n                }\n                else\n                {\n                    rdx = *(arg7 + 0x20);\n                }\n            }\n            if (((arg8 == 0 && rax_16 != 0) || arg8 != 0))\n            {\n                arg7[0xa] = 0;\n            }\n        }\n        arg7[6] = 1;\n        rax_3 = *r15_1;\n    }\n    if ((rax_1 != 0 && arg7[6] != 0))\n    {\n        rax_3 = *arg3;\n        rdx = *(arg7 + 0x20);\n    }\n    if (((((rax_1 != 0 && arg7[6] != 0) && ((rax_3 - 0x2b) & 0xfd) != 0) || rax_1 == 0) || (rax_1 != 0 && arg7[6] == 0)))\n    {\n        if (rax_3 == 0x3a)\n        {\n            r13 = 0;\n        }\n        if (rdx == 0)\n        {\n            goto label_409c28;\n        }\n    }\n    if (((rax_1 != 0 && arg7[6] != 0) && ((rax_3 - 0x2b) & 0xfd) == 0))\n    {\n        char rax_4 = r15_1[1];\n        r15_1 = &r15_1[1];\n        if (rax_4 == 0x3a)\n        {\n            r13 = 0;\n        }\n        if (rdx == 0)\n        {\n        label_409c28:\n            int32_t rax_5 = *arg7;\n            if (arg7[0xc] > rax_5)\n            {\n                arg7[0xc] = rax_5;\n            }\n            if (rax_5 < arg7[0xb])\n            {\n                arg7[0xb] = rax_5;\n            }\n            if (arg7[0xa] == 1)\n            {\n                int32_t rdx_5 = arg7[0xc];\n                if (arg7[0xb] == rdx_5)\n                {\n                    if (rax_5 != rdx_5)\n                    {\n                        arg7[0xb] = rax_5;\n                        rdx_5 = rax_5;\n                    }\n                }\n                else if (rax_5 != rdx_5)\n                {\n                    sub_409460(arg2, arg7);\n                    rdx_5 = *arg7;\n                }\n                char* rcx_8;\n                if (rbp_1 > rdx_5)\n                {\n                    int64_t rax_10 = rdx_5;\n                    do\n                    {\n                        rcx_8 = arg2[rax_10];\n                        int32_t rsi_5 = rax_10;\n                        rdx_5 = rax_10;\n                        if ((*rcx_8 == 0x2d && rcx_8[1] != 0))\n                        {\n                            break;\n                        }\n                        rdx_5 = (rsi_5 + 1);\n                        rax_10 = (rax_10 + 1);\n                        *arg7 = rdx_5;\n                    } while (rbp_1 > rax_10);\n                    if ((*rcx_8 == 0x2d && rcx_8[1] != 0))\n                    {\n                        rax_5 = *arg7;\n                    }\n                }\n                if ((rbp_1 <= rdx_5 || (rbp_1 > rdx_5 && (!(*rcx_8 == 0x2d && rcx_8[1] != 0)))))\n                {\n                    rax_5 = rdx_5;\n                }\n                arg7[0xc] = rdx_5;\n            }\n            bool c_1 = rbp_1 < rax_5;\n            bool z_1 = rbp_1 == rax_5;\n            int64_t rcx_3;\n            int32_t rdx_2;\n            char* r14_1;\n            if (z_1)\n            {\n                rbp_1 = arg7[0xc];\n                rdx_2 = arg7[0xb];\n            }\n            else\n            {\n                rcx_3 = 3;\n                void* const rdi = &data_40e2e9;\n                r14_1 = arg2[rax_5];\n                char* rsi_1 = r14_1;\n                while (rcx_3 != 0)\n                {\n                    char temp0_1 = *rsi_1;\n                    char temp1_1 = *rdi;\n                    c_1 = temp0_1 < temp1_1;\n                    z_1 = temp0_1 == temp1_1;\n                    rsi_1 = &rsi_1[1];\n                    rdi = (rdi + 1);\n                    rcx_3 = (rcx_3 - 1);\n                    if ((!z_1))\n                    {\n                        break;\n                    }\n                }\n                rcx_3 = ((!z_1) && (!c_1));\n                rcx_3 = (rcx_3 - 0);\n                if (rcx_3 == 0)\n                {\n                    rdx_2 = arg7[0xb];\n                    int32_t rcx_4 = arg7[0xc];\n                    int32_t rax_6 = (rax_5 + 1);\n                    *arg7 = rax_6;\n                    if (rdx_2 == rcx_4)\n                    {\n                        arg7[0xb] = rax_6;\n                        rdx_2 = rax_6;\n                    }\n                    else if (rax_6 != rcx_4)\n                    {\n                        sub_409460(arg2, arg7);\n                        rdx_2 = arg7[0xb];\n                    }\n                    arg7[0xc] = rbp_1;\n                    *arg7 = rbp_1;\n                }\n            }\n            int32_t r14_2;\n            if ((z_1 || ((!z_1) && rcx_3 == 0)))\n            {\n                if (rdx_2 == rbp_1)\n                {\n                    goto label_409d9c;\n                }\n                *arg7 = rdx_2;\n            label_409d9c:\n                r14_2 = -1;\n            }\n            if (((!z_1) && rcx_3 != 0))\n            {\n                char rcx_9;\n                if (*r14_1 == 0x2d)\n                {\n                    rcx_9 = r14_1[1];\n                    if (rcx_9 != 0)\n                    {\n                        if (arg4 == 0)\n                        {\n                            goto label_409ea0;\n                        }\n                        int32_t* var_88_2;\n                        int32_t var_80_2;\n                        void* const var_78_1;\n                        if (rcx_9 == 0x2d)\n                        {\n                            *(arg7 + 0x20) = &r14_1[2];\n                            var_78_1 = &data_40e2e9;\n                            var_80_2 = r13;\n                            var_88_2 = arg7;\n                            goto label_409f10;\n                        }\n                        if (arg6 == 0)\n                        {\n                            goto label_409ea0;\n                        }\n                        if (r14_1[2] == 0)\n                        {\n                            if (strchr(r15_1, rcx_9) != 0)\n                            {\n                                goto label_409ea0;\n                            }\n                            goto label_409e61;\n                        }\n                    label_409e61:\n                        *(arg7 + 0x20) = &r14_1[1];\n                        int32_t rax_12 = sub_409540(rbp_1, arg2, r15_1, arg4, arg5, arg6, arg7, r13, &data_40e2ea);\n                        r14_2 = rax_12;\n                        if (rax_12 == 0xffffffff)\n                        {\n                            r14_1 = arg2[*arg7];\n                        label_409ea0:\n                            rdx = &r14_1[1];\n                        label_409ce1:\n                            *(arg7 + 0x20) = &rdx[1];\n                            r14_2 = *rdx;\n                            int32_t var_4c;\n                            var_4c = r14_2;\n                            char* rax_7 = strchr(r15_1, r14_2);\n                            char rcx_5 = var_4c;\n                            void* r8_1 = &rdx[1];\n                            if (rdx[1] == 0)\n                            {\n                                *arg7 = (*arg7 + 1);\n                            }\n                            if (((rcx_5 - 0x3a) > 1 && rax_7 != 0))\n                            {\n                                char rcx_7 = rax_7[1];\n                                if (((*rax_7 == 0x57 && arg4 != 0) && rcx_7 == 0x3b))\n                                {\n                                    if (rdx[1] != 0)\n                                    {\n                                        goto label_409ede;\n                                    }\n                                    int64_t rax_14 = *arg7;\n                                    if (rax_14 == rbp_1)\n                                    {\n                                        if (r13 != 0)\n                                        {\n                                            int64_t rbp_4 = *arg2;\n                                            __fprintf_chk(stderr, 1, dcgettext(nullptr, \"%s: option requires an argument \u2026\", 5), rbp_4, r14_2);\n                                        }\n                                        arg7[2] = r14_2;\n                                        int64_t r14_4;\n                                        r14_4 = *r15_1 != 0x3a;\n                                        r14_2 = ((r14_4 * 5) + 0x3a);\n                                    }\n                                    else\n                                    {\n                                        r8_1 = arg2[rax_14];\n                                    label_409ede:\n                                        *(arg7 + 0x20) = r8_1;\n                                        arg6 = 0;\n                                        *(arg7 + 0x10) = 0;\n                                        var_78_1 = &data_40e308;\n                                        var_80_2 = r13;\n                                        var_88_2 = arg7;\n                                    label_409f10:\n                                        r14_2 = sub_409540(rbp_1, arg2, r15_1, arg4, arg5, arg6, var_88_2, var_80_2, var_78_1);\n                                    }\n                                }\n                                if ((((*rax_7 != 0x57 || (*rax_7 == 0x57 && arg4 == 0)) || ((*rax_7 == 0x57 && arg4 != 0) && rcx_7 != 0x3b)) && rcx_7 == 0x3a))\n                                {\n                                    char rdx_9 = rdx[1];\n                                    if (rax_7[2] != 0x3a)\n                                    {\n                                        int64_t rax_17 = *arg7;\n                                        if (rdx_9 != 0)\n                                        {\n                                            *(arg7 + 0x10) = r8_1;\n                                            *arg7 = (rax_17 + 1);\n                                        }\n                                        else if (rbp_1 != rax_17)\n                                        {\n                                            int64_t rax_18 = arg2[rax_17];\n                                            *arg7 = (rax_17 + 1);\n                                            *(arg7 + 0x10) = rax_18;\n                                        }\n                                        else\n                                        {\n                                            if (r13 != 0)\n                                            {\n                                                int64_t rbp_3 = *arg2;\n                                                __fprintf_chk(stderr, 1, dcgettext(nullptr, \"%s: option requires an argument \u2026\", 5), rbp_3, r14_2);\n                                            }\n                                            arg7[2] = r14_2;\n                                            int64_t r14_3;\n                                            r14_3 = *r15_1 != 0x3a;\n                                            r14_2 = ((r14_3 * 5) + 0x3a);\n                                        }\n                                    }\n                                    else if (rdx_9 == 0)\n                                    {\n                                        *(arg7 + 0x10) = 0;\n                                    }\n                                    else\n                                    {\n                                        *(arg7 + 0x10) = r8_1;\n                                        *arg7 = (*arg7 + 1);\n                                    }\n                                    *(arg7 + 0x20) = 0;\n                                }\n                            }\n                            if (((rcx_5 - 0x3a) <= 1 || ((rcx_5 - 0x3a) > 1 && rax_7 == 0)))\n                            {\n                                if (r13 == 0)\n                                {\n                                    goto label_409fcd;\n                                }\n                                int64_t rbp_2 = *arg2;\n                                __fprintf_chk(stderr, 1, dcgettext(nullptr, \"%s: invalid option -- '%c'\\n\", 5), rbp_2, r14_2);\n                            label_409fcd:\n                                arg7[2] = r14_2;\n                                r14_2 = 0x3f;\n                            }\n                        }\n                    }\n                }\n                if ((*r14_1 != 0x2d || (*r14_1 == 0x2d && rcx_9 == 0)))\n                {\n                    if (arg7[0xa] == 0)\n                    {\n                        goto label_409d9c;\n                    }\n                    *(arg7 + 0x10) = r14_1;\n                    r14_2 = 1;\n                    *arg7 = (rax_5 + 1);\n                }\n            }\n            if ((((z_1 || ((!z_1) && rcx_3 == 0)) && rdx_2 != rbp_1) || ((!z_1) && rcx_3 != 0)))\n            {\n                return r14_2;\n            }\n        }\n    }\n    if (((((((rax_1 != 0 && arg7[6] != 0) && ((rax_3 - 0x2b) & 0xfd) != 0) || rax_1 == 0) || (rax_1 != 0 && arg7[6] == 0)) && rdx != 0) || ((rax_1 != 0 && arg7[6] != 0) && ((rax_3 - 0x2b) & 0xfd) == 0)))\n    {\n        if (*rdx == 0)\n        {\n            goto label_409c28;\n        }\n        goto label_409ce1;\n    }\n}\n\n"
        },
        {
            "funcName": "sub_40a190",
            "funcStartAddr": "0x40a190",
            "funcEndAddr": "0x40a1a8",
            "decompiledFuncCode": "uint64_t sub_40a190(int32_t arg1, int64_t* arg2, char* arg3)\n{\n    return _getopt_internal(arg1, arg2, arg3, nullptr, nullptr, 0, 1);\n}\n\n"
        },
        {
            "funcName": "sub_40a230",
            "funcStartAddr": "0x40a230",
            "funcEndAddr": "0x40a2aa",
            "decompiledFuncCode": "uint64_t sub_40a230(uint32_t* arg1, char* arg2, uint64_t arg3, mbstate_t* arg4)\n{\n    uint64_t rbx_1;\n    char* rbp_1;\n    uint32_t* r12_1;\n    if (arg2 == 0)\n    {\n        arg3 = 1;\n        rbp_1 = &data_40e2ec[0x1b];\n    }\n    else\n    {\n        rbx_1 = -2;\n        if (arg3 != 0)\n        {\n            r12_1 = arg1;\n            rbp_1 = arg2;\n            if (arg1 != 0)\n            {\n                goto label_40a25a;\n            }\n        }\n    }\n    if ((arg2 == 0 || (arg2 != 0 && arg3 != 0)))\n    {\n        void var_1c;\n        r12_1 = &var_1c;\n    label_40a25a:\n        uint64_t rax_1 = mbrtowc(r12_1, rbp_1, arg3, arg4);\n        rbx_1 = rax_1;\n        if ((rax_1 > -3 && sub_40a790() == 0))\n        {\n            rbx_1 = 1;\n            *r12_1 = *rbp_1;\n        }\n    }\n    return rbx_1;\n}\n\n"
        },
        {
            "funcName": "sub_40a2b0",
            "funcStartAddr": "0x40a2b0",
            "funcEndAddr": "0x40a39f",
            "decompiledFuncCode": "char* sub_40a2b0(int64_t arg1, int64_t arg2)\n{\n    size_t rbx = (arg2 + 1);\n    if (arg2 >= 0x401)\n    {\n        rbx = 0x401;\n    }\n    char* rbp_1;\n    while (true)\n    {\n        char* rax_1 = malloc(rbx);\n        rbp_1 = rax_1;\n        if (rax_1 == 0)\n        {\n            break;\n        }\n        while (true)\n        {\n            int64_t rax_2 = readlink(arg1, rax_1, rbx);\n            if ((rax_2 < 0 && *__errno_location() != 0x22))\n            {\n                free(rbp_1);\n                return nullptr;\n            }\n            if (rbx > rax_2)\n            {\n                rbp_1[rax_2] = 0;\n                return rbp_1;\n            }\n            free(rbp_1);\n            if (rbx > 0x3fffffffffffffff)\n            {\n                break;\n            }\n            rbx = (rbx + rbx);\n            rax_1 = malloc(rbx);\n            rbp_1 = rax_1;\n            if (rax_1 == 0)\n            {\n                return rbp_1;\n            }\n        }\n        if (rbx > 0x7ffffffffffffffe)\n        {\n            rbp_1 = nullptr;\n            *__errno_location() = 0xc;\n            break;\n        }\n        rbx = 0x7fffffffffffffff;\n    }\n    return rbp_1;\n}\n\n"
        },
        {
            "funcName": "sub_40a3a0",
            "funcStartAddr": "0x40a3a0",
            "funcEndAddr": "0x40a3aa",
            "decompiledFuncCode": "int64_t sub_40a3a0() __noreturn\n{\n    /* tailcall */\n    return sub_4032b0(1);\n}\n\n"
        },
        {
            "funcName": "sub_40a3b0",
            "funcStartAddr": "0x40a3b0",
            "funcEndAddr": "0x40a4c6",
            "decompiledFuncCode": "int64_t sub_40a3b0(char* arg1, int64_t* arg2, int64_t arg3, uint64_t arg4)\n{\n    int64_t rbp = arg3;\n    uint64_t rax = strlen(arg1);\n    char* r14 = *arg2;\n    int64_t var_58 = -1;\n    if (r14 != 0)\n    {\n        char var_41_1 = 0;\n        int64_t rbx_1 = 0;\n        while (true)\n        {\n            if (strncmp(r14, arg1, rax) == 0)\n            {\n                if (strlen(r14) == rax)\n                {\n                    var_58 = rbx_1;\n                    break;\n                }\n                if (var_58 == -1)\n                {\n                    var_58 = rbx_1;\n                    rbx_1 = (rbx_1 + 1);\n                    rbp = (rbp + arg4);\n                    r14 = arg2[rbx_1];\n                    if (r14 != 0)\n                    {\n                        continue;\n                    }\n                    goto label_40a48d;\n                }\n                if (arg3 == 0)\n                {\n                    var_41_1 = 1;\n                }\n                else\n                {\n                    char rax_3 = var_41_1;\n                    if (memcmp(((var_58 * arg4) + arg3), rbp, arg4) != 0)\n                    {\n                        rax_3 = 1;\n                    }\n                    var_41_1 = rax_3;\n                }\n            }\n            rbx_1 = (rbx_1 + 1);\n            rbp = (rbp + arg4);\n            r14 = arg2[rbx_1];\n            if (r14 == 0)\n            {\n            label_40a48d:\n                int64_t rax_6 = -2;\n                if (var_41_1 == 0)\n                {\n                    rax_6 = var_58;\n                }\n                var_58 = rax_6;\n                break;\n            }\n        }\n    }\n    return var_58;\n}\n\n"
        },
        {
            "funcName": "sub_40a4d0",
            "funcStartAddr": "0x40a4d0",
            "funcEndAddr": "0x40a541",
            "decompiledFuncCode": "int64_t sub_40a4d0(uint64_t arg1, uint64_t arg2, int64_t arg3)\n{\n    char* rbx;\n    if (arg3 == -1)\n    {\n        rbx = dcgettext(nullptr, \"invalid argument %s for %s\", 5);\n    }\n    else\n    {\n        rbx = dcgettext(nullptr, \"ambiguous argument %s for %s\", 5);\n    }\n    /* tailcall */\n    return error(0, 0, rbx, sub_407b50(0, 8, arg2), sub_407e60(1, arg1));\n}\n\n"
        },
        {
            "funcName": "sub_40a550",
            "funcStartAddr": "0x40a550",
            "funcEndAddr": "0x40a668",
            "decompiledFuncCode": "char* sub_40a550(int64_t* arg1, int64_t arg2, uint64_t arg3)\n{\n    int64_t r14 = 0;\n    int64_t rbp = arg2;\n    int64_t rbx = 0;\n    fputs_unlocked(dcgettext(nullptr, \"Valid arguments are:\", 5), stderr);\n    int64_t r12 = *arg1;\n    if (r12 != 0)\n    {\n        do\n        {\n            if ((rbx != 0 && memcmp(r14, rbp, arg3) == 0))\n            {\n                rbx = (rbx + 1);\n                rbp = (rbp + arg3);\n                __fprintf_chk(stderr, 1, \", %s\", sub_407e80(r12));\n                r12 = arg1[rbx];\n                if (r12 == 0)\n                {\n                    break;\n                }\n                continue;\n            }\n            rbx = (rbx + 1);\n            r14 = rbp;\n            rbp = (rbp + arg3);\n            __fprintf_chk(stderr, 1, \"\\n  - %s\", sub_407e80(r12));\n            r12 = arg1[rbx];\n        } while (r12 != 0);\n    }\n    uint64_t* const rdi_6 = stderr;\n    char* rax_6 = stderr[5];\n    if (rax_6 >= stderr[6])\n    {\n        /* tailcall */\n        return __overflow(rdi_6, 0xa);\n    }\n    stderr[5] = &rax_6[1];\n    *rax_6 = 0xa;\n    return rax_6;\n}\n\n"
        },
        {
            "funcName": "sub_40a670",
            "funcStartAddr": "0x40a670",
            "funcEndAddr": "0x40a6e0",
            "decompiledFuncCode": "int64_t sub_40a670(int64_t arg1, char* arg2, int64_t* arg3, int64_t arg4, \n    uint64_t arg5, int64_t arg6)\n{\n    int64_t rax = sub_40a3b0(arg2, arg3, arg4, arg5);\n    if (rax < 0)\n    {\n        sub_40a4d0(arg1, arg2, rax);\n        sub_40a550(arg3, arg4, arg5);\n        arg6();\n        rax = -1;\n    }\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_40a6e0",
            "funcStartAddr": "0x40a6e0",
            "funcEndAddr": "0x40a72d",
            "decompiledFuncCode": "int64_t sub_40a6e0(int64_t arg1, int64_t* arg2, int64_t arg3, uint64_t arg4)\n{\n    int64_t r14 = *arg2;\n    if (r14 != 0)\n    {\n        void* rbx_1 = &arg2[1];\n        int64_t rbp_1 = arg3;\n        do\n        {\n            if (memcmp(arg1, rbp_1, arg4) == 0)\n            {\n                break;\n            }\n            r14 = *rbx_1;\n            rbp_1 = (rbp_1 + arg4);\n            rbx_1 = (rbx_1 + 8);\n        } while (r14 != 0);\n    }\n    return r14;\n}\n\n"
        },
        {
            "funcName": "sub_40a730",
            "funcStartAddr": "0x40a730",
            "funcEndAddr": "0x40a78d",
            "decompiledFuncCode": "uint64_t sub_40a730(FILE* arg1)\n{\n    int32_t* rbp = arg1;\n    uint64_t rax = __fpending(arg1);\n    int32_t rbx_1 = (*rbp & 0x20);\n    uint64_t rax_1 = sub_40b9a0(rbp);\n    if ((rbx_1 != 0 && rax_1 == 0))\n    {\n        *__errno_location() = 0;\n        rax_1 = 0xffffffff;\n    }\n    if (((rbx_1 != 0 && rax_1 != 0) || ((rbx_1 == 0 && rax_1 != 0) && rax != 0)))\n    {\n        rax_1 = 0xffffffff;\n    }\n    if (((rbx_1 == 0 && rax_1 != 0) && rax == 0))\n    {\n        int32_t* rax_2;\n        rax_2 = *__errno_location() != 9;\n        rax_1 = (-rax_2);\n    }\n    return rax_1;\n}\n\n"
        },
        {
            "funcName": "sub_40a790",
            "funcStartAddr": "0x40a790",
            "funcEndAddr": "0x40a7ee",
            "decompiledFuncCode": "int64_t sub_40a790()\n{\n    void var_8;\n    int64_t rcx;\n    int64_t rdx;\n    int32_t rdi;\n    uint64_t r8;\n    ssize_t r9;\n    char* rax = setlocale(rdi, nullptr, rdx, rcx, r8, r9, var_8, __return_addr);\n    int64_t rax_1 = 1;\n    bool c = false;\n    bool z = (rax & rax) == 0;\n    if ((!z))\n    {\n        int64_t rcx_1 = 2;\n        void* const rdi_1 = &data_40e366;\n        char* rsi_1 = rax;\n        while (rcx_1 != 0)\n        {\n            char temp0_1 = *rsi_1;\n            char temp1_1 = *rdi_1;\n            c = temp0_1 < temp1_1;\n            z = temp0_1 == temp1_1;\n            rsi_1 = &rsi_1[1];\n            rdi_1 = (rdi_1 + 1);\n            rcx_1 = (rcx_1 - 1);\n            if ((!z))\n            {\n                break;\n            }\n        }\n        rcx_1 = ((!z) && (!c));\n        rcx_1 = (rcx_1 - 0);\n        rax_1 = 0;\n        bool c_1 = false;\n        bool z_1 = (rcx_1 & rcx_1) == 0;\n        if ((!z_1))\n        {\n            void* const rdi_2 = \"POSIX\";\n            int64_t rcx_2 = 6;\n            char* rsi_2 = rax;\n            while (rcx_2 != 0)\n            {\n                char temp2_1 = *rsi_2;\n                char temp3_1 = *rdi_2;\n                c_1 = temp2_1 < temp3_1;\n                z_1 = temp2_1 == temp3_1;\n                rsi_2 = &rsi_2[1];\n                rdi_2 = (rdi_2 + 1);\n                rcx_2 = (rcx_2 - 1);\n                if ((!z_1))\n                {\n                    break;\n                }\n            }\n            rax_1 = ((!z_1) && (!c_1));\n            rax_1 = (rax_1 - 0);\n            rax_1 = rax_1 != 0;\n            return rax_1;\n        }\n    }\n    return rax_1;\n}\n\n"
        },
        {
            "funcName": "sub_40a7f0",
            "funcStartAddr": "0x40a7f0",
            "funcEndAddr": "0x40a826",
            "decompiledFuncCode": "uint64_t sub_40a7f0(char* arg1, int64_t arg2)\n{\n    int64_t rcx = *arg1;\n    if (rcx == 0)\n    {\n        return 0;\n    }\n    int64_t rax = 0;\n    do\n    {\n        arg1 = &arg1[1];\n        rax = ((ROLQ(rax, 9)) + rcx);\n        rcx = *arg1;\n    } while (rcx != 0);\n    return (COMBINE(0, rax) % arg2);\n}\n\n"
        },
        {
            "funcName": "sub_40a830",
            "funcStartAddr": "0x40a830",
            "funcEndAddr": "0x40ad92",
            "decompiledFuncCode": "char* sub_40a830()\n{\n    char* rax = nl_langinfo(0xe);\n    char* r15 = data_611598;\n    char* rbx = rax;\n    if (rax == 0)\n    {\n        rbx = &data_40e2ec[0x1b];\n    }\n    if (r15 == 0)\n    {\n        char* rax_6 = getenv(\"CHARSETALIASDIR\");\n        char* r13_1 = rax_6;\n        size_t rdi_7;\n        uint64_t r12_1;\n        uint64_t r14_1;\n        if ((rax_6 == 0 || (rax_6 != 0 && *rax_6 == 0)))\n        {\n            rdi_7 = 0x73;\n            r12_1 = 0x65;\n            r14_1 = 0x64;\n            r13_1 = \"/home/dongkwan/data/scripts/gnu_\u2026\";\n        }\n        char* rbp_3;\n        if ((rax_6 != 0 && *rax_6 != 0))\n        {\n            uint64_t rax_7 = strlen(rax_6);\n            r12_1 = rax_7;\n            r14_1 = rax_7;\n            size_t rdi_6;\n            if (rax_7 == 0)\n            {\n                rdi_6 = 0xe;\n            }\n            else if (r13_1[(rax_7 - 1)] != 0x2f)\n            {\n                rdi_7 = (rax_7 + 0xf);\n                r12_1 = (r12_1 + 1);\n            }\n            else\n            {\n                rdi_6 = (rax_7 + 0xe);\n            }\n            if ((rax_7 == 0 || (rax_7 != 0 && r13_1[(rax_7 - 1)] == 0x2f)))\n            {\n                char* rax_8 = malloc(rdi_6);\n                rbp_3 = rax_8;\n                if (rax_8 == 0)\n                {\n                    goto label_40a92c;\n                }\n                memcpy(rbp_3, r13_1, r14_1);\n                goto label_40a976;\n            }\n        }\n        char* rax_9 = malloc(rdi_7);\n        rbp_3 = rax_9;\n        if (rax_9 == 0)\n        {\n        label_40a92c:\n            r15 = &data_40e2ec[0x1b];\n        }\n        else\n        {\n            memcpy(rbp_3, r13_1, r14_1);\n            rbp_3[r14_1] = 0x2f;\n        label_40a976:\n            int64_t* r12_2 = &rbp_3[r12_1];\n            *r12_2 = 0x2e74657372616863;\n            *(r12_2 + 0xc) = 0x73;\n            r12_2[1] = 0x61696c61;\n            int32_t rax_11 = open(rbp_3, 0);\n            void* var_d0_1;\n            FILE* rax_12;\n            if (rax_11 >= 0)\n            {\n                r15 = nullptr;\n                rax_12 = fdopen(rax_11, \"r\");\n                var_d0_1 = nullptr;\n                if (rax_12 == 0)\n                {\n                    close(rax_11);\n                }\n                else\n                {\n                    while (true)\n                    {\n                        char* rax_14 = rax_12->_IO_read_ptr;\n                        uint32_t rdi_13;\n                        if (rax_14 < rax_12->_IO_read_end)\n                        {\n                            do\n                            {\n                                rax_12->_IO_read_ptr = &rax_14[1];\n                                rdi_13 = *rax_14;\n                            label_40aa2c:\n                                if ((rdi_13 - 9) <= 1)\n                                {\n                                    break;\n                                }\n                                if (rdi_13 == 0x20)\n                                {\n                                    break;\n                                }\n                                if (rdi_13 == 0x23)\n                                {\n                                    break;\n                                }\n                                ungetc(rdi_13, rax_12);\n                                int64_t var_b8;\n                                int64_t var_78;\n                                if (fscanf(rax_12, \"%50s %50s\", &var_b8, &var_78) <= 1)\n                                {\n                                    goto label_40abbb;\n                                }\n                                int64_t* rcx_2 = &var_b8;\n                            label_40aa68:\n                                int32_t rdx_5 = *rcx_2;\n                                rcx_2 = (rcx_2 + 4);\n                                uint32_t rax_20 = (((rdx_5 - 0x1010101) & (!rdx_5)) & 0x80808080);\n                                if (rax_20 == 0)\n                                {\n                                    goto label_40aa68;\n                                }\n                                uint32_t rdx_8 = (rax_20 >> 0x10);\n                                int32_t temp0_1 = (rax_20 & 0x8080);\n                                bool cond:2_1 = temp0_1 == 0;\n                                if (temp0_1 == 0)\n                                {\n                                    rax_20 = rdx_8;\n                                }\n                                void* rdx_9 = (rcx_2 + 2);\n                                if (cond:2_1)\n                                {\n                                    rcx_2 = rdx_9;\n                                }\n                                char rdx_10 = rax_20;\n                                int64_t* rdx_11 = &var_78;\n                                void* rcx_4 = ((rcx_2 - 3) - &var_b8);\n                            label_40aaa2:\n                                int32_t rsi_5 = *rdx_11;\n                                rdx_11 = (rdx_11 + 4);\n                                uint32_t rax_23 = (((rsi_5 - 0x1010101) & (!rsi_5)) & 0x80808080);\n                                if (rax_23 == 0)\n                                {\n                                    goto label_40aaa2;\n                                }\n                                uint32_t rsi_8 = (rax_23 >> 0x10);\n                                int32_t temp2_1 = (rax_23 & 0x8080);\n                                bool cond:3_1 = temp2_1 == 0;\n                                if (temp2_1 == 0)\n                                {\n                                    rax_23 = rsi_8;\n                                }\n                                void* rsi_9 = (rdx_11 + 2);\n                                if (cond:3_1)\n                                {\n                                    rdx_11 = rsi_9;\n                                }\n                                char rsi_10 = rax_23;\n                                void* rdx_13 = ((rdx_11 - 3) - &var_78);\n                                void* rax_24 = (rcx_4 + rdx_13);\n                                void* var_c0 = rdx_13;\n                                char* rax_25;\n                                void* rcx_6;\n                                void* rdx_14;\n                                if (var_d0_1 != 0)\n                                {\n                                    void* rax_31 = (rax_24 + var_d0_1);\n                                    var_d0_1 = (rax_31 + 2);\n                                    rax_25 = realloc(r15, (rax_31 + 3));\n                                    rdx_14 = var_c0;\n                                    rcx_6 = rcx_4;\n                                }\n                                else\n                                {\n                                    var_d0_1 = (rax_24 + 2);\n                                    rax_25 = malloc((rax_24 + 3));\n                                    rcx_6 = rcx_4;\n                                    rdx_14 = var_c0;\n                                }\n                                if (rax_25 == 0)\n                                {\n                                    char* rdi_26 = r15;\n                                    r15 = &data_40e2ec[0x1b];\n                                    free(rdi_26);\n                                    sub_40b9a0(rax_12);\n                                    goto label_40a9b7;\n                                }\n                                int32_t rcx_7 = (rcx_6 + 1);\n                                void* rdi_17 = (var_d0_1 - rdx_14);\n                                void* rsi_13 = (((-2 - rcx_6) + rdi_17) + rax_25);\n                                if (rcx_7 >= 8)\n                                {\n                                    *rsi_13 = var_b8;\n                                    uint64_t r9_3 = rcx_7;\n                                    *((rsi_13 + r9_3) - 8) = *(&var_c0 + r9_3);\n                                    void* r9_5 = ((rsi_13 + 8) & 0xfffffffffffffff8);\n                                    void* rsi_16 = (rsi_13 - r9_5);\n                                    int64_t* r10_2 = (&var_b8 - rsi_16);\n                                    int32_t rcx_11 = ((rcx_7 + rsi_16) & 0xfffffff8);\n                                    if (rcx_11 >= 8)\n                                    {\n                                        int32_t rcx_12 = (rcx_11 & 0xfffffff8);\n                                        int32_t rsi_17 = 0;\n                                    label_40ac7b:\n                                        uint64_t r8_1 = rsi_17;\n                                        rsi_17 = (rsi_17 + 8);\n                                        *(r9_5 + r8_1) = *(r10_2 + r8_1);\n                                        if (rsi_17 < rcx_12)\n                                        {\n                                            goto label_40ac7b;\n                                        }\n                                    }\n                                }\n                                else if ((rcx_7 & 4) != 0)\n                                {\n                                    uint64_t rcx_15 = rcx_7;\n                                    *rsi_13 = var_b8;\n                                    *((rsi_13 + rcx_15) - 4) = *(&*var_c0[4] + rcx_15);\n                                }\n                                else if (rcx_7 != 0)\n                                {\n                                    *rsi_13 = var_b8;\n                                    if ((rcx_7 & 2) != 0)\n                                    {\n                                        uint64_t rcx_16 = rcx_7;\n                                        *((rsi_13 + rcx_16) - 2) = *(&*var_c0[6] + rcx_16);\n                                    }\n                                }\n                                int32_t rdx_15 = (rdx_14 + 1);\n                                void* rcx_8 = ((rax_25 + rdi_17) - 1);\n                                if (rdx_15 >= 8)\n                                {\n                                    *rcx_8 = var_78;\n                                    uint64_t rsi_19 = rdx_15;\n                                    void var_80;\n                                    *((rcx_8 + rsi_19) - 8) = *(&var_80 + rsi_19);\n                                    void* rdi_24 = ((rcx_8 + 8) & 0xfffffffffffffff8);\n                                    void* rcx_13 = (rcx_8 - rdi_24);\n                                    int64_t* r9_6 = (&var_78 - rcx_13);\n                                    int32_t rdx_19 = ((rdx_15 + rcx_13) & 0xfffffff8);\n                                    if (rdx_19 >= 8)\n                                    {\n                                        int32_t rdx_20 = (rdx_19 & 0xfffffff8);\n                                        int32_t rcx_14 = 0;\n                                    label_40acc9:\n                                        uint64_t rsi_20 = rcx_14;\n                                        rcx_14 = (rcx_14 + 8);\n                                        *(rdi_24 + rsi_20) = *(r9_6 + rsi_20);\n                                        if (rcx_14 < rdx_20)\n                                        {\n                                            goto label_40acc9;\n                                        }\n                                    }\n                                }\n                                else if ((rdx_15 & 4) != 0)\n                                {\n                                    uint64_t rdx_21 = rdx_15;\n                                    *rcx_8 = var_78;\n                                    void var_7c;\n                                    *((rcx_8 + rdx_21) - 4) = *(&var_7c + rdx_21);\n                                }\n                                else if (rdx_15 != 0)\n                                {\n                                    *rcx_8 = var_78;\n                                    if ((rdx_15 & 2) != 0)\n                                    {\n                                        uint64_t rsi_23 = rdx_15;\n                                        void var_7a;\n                                        *((rcx_8 + rsi_23) - 2) = *(&var_7a + rsi_23);\n                                    }\n                                }\n                                r15 = rax_25;\n                                rax_14 = rax_12->_IO_read_ptr;\n                            } while (rax_14 < rax_12->_IO_read_end);\n                            if (((!((rdi_13 - 9) > 1 && rdi_13 == 0x23)) && (rdi_13 - 9) <= 1))\n                            {\n                                continue;\n                            }\n                            if (((rdi_13 - 9) > 1 && rdi_13 == 0x23))\n                            {\n                                int32_t rax_29;\n                                bool rdx_17;\n                                do\n                                {\n                                    char* rax_30 = rax_12->_IO_read_ptr;\n                                    if (rax_30 < rax_12->_IO_read_end)\n                                    {\n                                        rax_12->_IO_read_ptr = &rax_30[1];\n                                        rax_29 = *rax_30;\n                                        rdx_17 = true;\n                                    }\n                                    else\n                                    {\n                                        rax_29 = __uflow(rax_12);\n                                        rdx_17 = rax_29 != 0xffffffff;\n                                    }\n                                    if (rax_29 == 0xa)\n                                    {\n                                        break;\n                                    }\n                                } while (rdx_17 != 0);\n                                if (rax_29 == 0xffffffff)\n                                {\n                                    break;\n                                }\n                                continue;\n                            }\n                        }\n                        uint32_t rax_26 = __uflow(rax_12);\n                        rdi_13 = rax_26;\n                        if (rax_26 != 0xffffffff)\n                        {\n                            goto label_40aa2c;\n                        }\n                        break;\n                    }\n                label_40abbb:\n                    sub_40b9a0(rax_12);\n                    if (var_d0_1 != 0)\n                    {\n                        *(r15 + var_d0_1) = 0;\n                    }\n                }\n            }\n            if ((((rax_11 >= 0 && rax_12 == 0) || rax_11 < 0) || ((rax_11 >= 0 && rax_12 != 0) && var_d0_1 == 0)))\n            {\n                r15 = &data_40e2ec[0x1b];\n            }\n        label_40a9b7:\n            free(rbp_3);\n        }\n        data_611598 = r15;\n    }\n    char rbp_2 = *r15;\n    if (rbp_2 != 0)\n    {\n        while (true)\n        {\n            if ((strcmp(rbx, r15) != 0 && (rbp_2 != 0x2a || (rbp_2 == 0x2a && r15[1] != 0))))\n            {\n                void* rbp_1 = &r15[(strlen(r15) + 1)];\n                r15 = ((rbp_1 + strlen(rbp_1)) + 1);\n                rbp_2 = *r15;\n                if (rbp_2 == 0)\n                {\n                    break;\n                }\n                continue;\n            }\n            rbx = &r15[(strlen(r15) + 1)];\n            break;\n        }\n    }\n    if (*rbx == 0)\n    {\n        rbx = \"ASCII\";\n    }\n    return rbx;\n}\n\n"
        },
        {
            "funcName": "sub_40ada0",
            "funcStartAddr": "0x40ada0",
            "funcEndAddr": "0x40adc3",
            "decompiledFuncCode": "int64_t* sub_40ada0(int64_t arg1)\n{\n    int64_t* rax = sub_408a50(0x18);\n    *rax = arg1;\n    rax[2] = 0;\n    rax[1] = 0;\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_40add0",
            "funcStartAddr": "0x40add0",
            "funcEndAddr": "0x40adff",
            "decompiledFuncCode": "FILE*** sub_40add0(char* arg1, uint64_t arg2)\n{\n    FILE** rax = sub_40aff0(arg1, arg2);\n    FILE*** rax_1 = nullptr;\n    if (rax != 0)\n    {\n        rax_1 = sub_408a50(0x18);\n        *rax_1 = rax;\n        rax_1[2] = 0;\n        rax_1[1] = 0;\n    }\n    return rax_1;\n}\n\n"
        },
        {
            "funcName": "sub_40ae00",
            "funcStartAddr": "0x40ae00",
            "funcEndAddr": "0x40ae04",
            "decompiledFuncCode": "int64_t sub_40ae00(int64_t* arg1)\n{\n    return *arg1;\n}\n\n"
        },
        {
            "funcName": "sub_40ae10",
            "funcStartAddr": "0x40ae10",
            "funcEndAddr": "0x40af05",
            "decompiledFuncCode": "int64_t sub_40ae10(int64_t* arg1, int64_t arg2)\n{\n    int64_t r14 = (arg2 + 1);\n    int64_t* r12 = *arg1;\n    int64_t rbp = arg1[1];\n    int64_t rbx = arg1[2];\n    while (true)\n    {\n        if (rbx < arg2)\n        {\n            int64_t rax_6 = rbx;\n            uint64_t rdx_5 = 0;\n            do\n            {\n                rdx_5 = (rdx_5 + 1);\n                rax_6 = ((rax_6 << 8) + 0xff);\n            } while (arg2 > rax_6);\n            void var_40;\n            sub_40b300(r12, &var_40, rdx_5);\n            void* rax_8 = &var_40;\n            do\n            {\n                uint64_t rdx_6 = *rax_8;\n                rax_8 = (rax_8 + 1);\n                rbx = ((rbx << 8) + 0xff);\n                rbp = ((rbp << 8) + rdx_6);\n            } while (arg2 > rbx);\n        }\n        if (((rbx >= arg2 && rbx == arg2) || (rbx < arg2 && rbx == arg2)))\n        {\n            arg1[2] = 0;\n            arg1[1] = 0;\n            break;\n        }\n        if (((rbx >= arg2 && rbx != arg2) || (rbx < arg2 && rbx != arg2)))\n        {\n            int64_t rdx_1 = 0;\n            int64_t rax_2 = (rbx - arg2);\n            uint64_t temp0_1 = (COMBINE(rdx_1, rax_2) / r14);\n            uint64_t temp1_1 = (COMBINE(rdx_1, rax_2) % r14);\n            int64_t rdx_3 = 0;\n            uint64_t temp0_2 = (COMBINE(rdx_3, rbp) / r14);\n            uint64_t temp1_2 = (COMBINE(rdx_3, rbp) % r14);\n            if (rbp <= (rbx - temp1_1))\n            {\n                arg1[1] = temp0_2;\n                rbp = temp1_2;\n                arg1[2] = temp0_1;\n                break;\n            }\n            rbx = (temp1_1 - 1);\n            rbp = temp1_2;\n        }\n    }\n    return rbp;\n}\n\n"
        },
        {
            "funcName": "sub_40af10",
            "funcStartAddr": "0x40af10",
            "funcEndAddr": "0x40af2e",
            "decompiledFuncCode": "int64_t sub_40af10(int64_t arg1)\n{\n    __explicit_bzero_chk(arg1, 0x18, -1);\n    /* tailcall */\n    return free(arg1);\n}\n\n"
        },
        {
            "funcName": "sub_40af30",
            "funcStartAddr": "0x40af30",
            "funcEndAddr": "0x40af81",
            "decompiledFuncCode": "uint64_t sub_40af30(int64_t* arg1)\n{\n    int32_t rax = sub_40b460(*arg1);\n    int32_t* rax_1 = __errno_location();\n    int32_t r13 = *rax_1;\n    __explicit_bzero_chk(arg1, 0x18, -1);\n    free(arg1);\n    *rax_1 = r13;\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_40af90",
            "funcStartAddr": "0x402202",
            "funcEndAddr": "0x40afed",
            "decompiledFuncCode": "int64_t sub_40af90(uint64_t arg1) __noreturn\n{\n    if (arg1 != 0)\n    {\n        int64_t rax_1 = sub_407e80(arg1);\n        int32_t* rax_2 = __errno_location();\n        char* rax_3;\n        if (*rax_2 == 0)\n        {\n            rax_3 = dcgettext(nullptr, \"%s: end of file\", 5);\n        }\n        else\n        {\n            rax_3 = dcgettext(nullptr, \"%s: read error\", 5);\n        }\n        error(data_611300, *rax_2, rax_3, rax_1);\n    }\n    abort();\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_40aff0",
            "funcStartAddr": "0x40aff0",
            "funcEndAddr": "0x40b2df",
            "decompiledFuncCode": "FILE** sub_40aff0(char* arg1, uint64_t arg2)\n{\n    FILE** rbx;\n    if (arg2 == 0)\n    {\n        FILE** rax_7 = sub_408a50(0x1038);\n        rbx = rax_7;\n        *rax_7 = nullptr;\n        rax_7[1] = 0x40af90;\n        rax_7[2] = 0;\n    }\n    else\n    {\n        ssize_t r12_1 = arg1;\n        if (arg1 == 0)\n        {\n            FILE** rax_3 = sub_408a50(0x1038);\n            *rax_3 = nullptr;\n            rbx = rax_3;\n            void* r13_2 = &rax_3[4];\n            rax_3[1] = 0x40af90;\n            rax_3[2] = 0;\n            rax_3[3] = 0;\n            int32_t rax_5 = open(\"/dev/urandom\", 0);\n            int128_t var_48;\n            ssize_t rbp_2;\n            int64_t rbp_6;\n            int64_t r14_1;\n            if (rax_5 < 0)\n            {\n                r14_1 = 0x14;\n                gettimeofday(&var_48, nullptr);\n                *(rbx + 0x20) = var_48;\n                int32_t rax_8 = getpid();\n                var_48 = rax_8;\n                rbx[6] = rax_8;\n            }\n            else\n            {\n                uint64_t rdx_1 = arg2;\n                if (arg2 > 0x800)\n                {\n                    rdx_1 = 0x800;\n                }\n                rbp_2 = __read_chk(rax_5, r13_2, rdx_1, 0x1018);\n                close(rax_5);\n                if (rbp_2 <= 0x7ff)\n                {\n                    if (rbp_2 < 0)\n                    {\n                        rbp_2 = r12_1;\n                    }\n                    int128_t* rdi_8 = &var_48;\n                    int64_t rcx_5 = (0x800 - rbp_2);\n                    void* r15_2 = (r13_2 + rbp_2);\n                    if (rcx_5 > 0x10)\n                    {\n                        rcx_5 = 0x10;\n                    }\n                    rbp_6 = (rbp_2 + rcx_5);\n                    gettimeofday(rdi_8, nullptr);\n                    void* rdi_9 = r15_2;\n                    void* rsi_5 = &var_48;\n                    for (uint64_t rcx_7 = rcx_5; rcx_7 != 0; rcx_7 = (rcx_7 - 1))\n                    {\n                        *rdi_9 = *rsi_5;\n                        rdi_9 = (rdi_9 + 1);\n                        rsi_5 = (rsi_5 + 1);\n                    }\n                    if (rbp_6 <= 0x7ff)\n                    {\n                        int64_t r14_3 = (0x800 - rbp_6);\n                        if (r14_3 > 4)\n                        {\n                            r14_3 = 4;\n                        }\n                        void* rsi_6 = &var_48;\n                        var_48 = getpid(rdi_9, rsi_5);\n                        uint64_t rcx_8 = r14_3;\n                        r14_1 = (r14_3 + rbp_6);\n                        void* rdi_10 = (r13_2 + rbp_6);\n                        for (; rcx_8 != 0; rcx_8 = (rcx_8 - 1))\n                        {\n                            *rdi_10 = *rsi_6;\n                            rdi_10 = (rdi_10 + 1);\n                            rsi_6 = (rsi_6 + 1);\n                        }\n                    }\n                }\n            }\n            if ((rax_5 < 0 || (((rax_5 >= 0 && rbp_2 <= 0x7ff) && rbp_6 <= 0x7ff) && r14_1 <= 0x7ff)))\n            {\n                int64_t rbp_3 = (0x800 - r14_1);\n                if (rbp_3 > 4)\n                {\n                    rbp_3 = 4;\n                }\n                void* rsi_2 = (r13_2 + r14_1);\n                var_48 = getppid();\n                int32_t rdi_5 = rbp_3;\n                if (rbp_3 != 0)\n                {\n                    int32_t rax_10 = 0;\n                    do\n                    {\n                        uint64_t rdx_2 = rax_10;\n                        rax_10 = (rax_10 + 1);\n                        *(rsi_2 + rdx_2) = *(&var_48 + rdx_2);\n                    } while (rax_10 < rdi_5);\n                }\n                int64_t rbp_4 = (rbp_3 + r14_1);\n                if (rbp_4 <= 0x7ff)\n                {\n                    int64_t r14_2 = (0x800 - rbp_4);\n                    if (r14_2 > 4)\n                    {\n                        r14_2 = 4;\n                    }\n                    void* rsi_3 = (r13_2 + rbp_4);\n                    var_48 = getuid();\n                    int32_t rdi_6 = r14_2;\n                    if (r14_2 != 0)\n                    {\n                        int32_t rax_12 = 0;\n                        do\n                        {\n                            uint64_t rdx_3 = rax_12;\n                            rax_12 = (rax_12 + 1);\n                            *(rsi_3 + rdx_3) = *(&var_48 + rdx_3);\n                        } while (rax_12 < rdi_6);\n                    }\n                    int64_t rbp_5 = (rbp_4 + r14_2);\n                    if (rbp_5 <= 0x7ff)\n                    {\n                        void* rsi_4 = (r13_2 + rbp_5);\n                        var_48 = getgid();\n                        int64_t rax_14 = (0x800 - rbp_5);\n                        if (rax_14 > 4)\n                        {\n                            rax_14 = 4;\n                        }\n                        int32_t rdi_7 = rax_14;\n                        if (rax_14 != 0)\n                        {\n                            int32_t rax_15 = 0;\n                            do\n                            {\n                                uint64_t rdx_4 = rax_15;\n                                rax_15 = (rax_15 + 1);\n                                *(rsi_4 + rdx_4) = *(&var_48 + rdx_4);\n                            } while (rax_15 < rdi_7);\n                        }\n                    }\n                }\n            }\n            sub_40b760(r13_2);\n        }\n        else\n        {\n            FILE* rax = sub_40ba20(arg1, &data_40e424);\n            if (rax == 0)\n            {\n                rbx = nullptr;\n            }\n            else\n            {\n                FILE** rax_1 = sub_408a50(0x1038);\n                uint64_t rcx_1 = 0x1000;\n                *rax_1 = rax;\n                if (arg2 <= 0x1000)\n                {\n                    rcx_1 = arg2;\n                }\n                rax_1[1] = 0x40af90;\n                rbx = rax_1;\n                rax_1[2] = r12_1;\n                setvbuf(rax, &rax_1[3], 0, rcx_1);\n            }\n        }\n    }\n    return rbx;\n}\n\n"
        },
        {
            "funcName": "sub_40b2e0",
            "funcStartAddr": "0x40b2e0",
            "funcEndAddr": "0x40b2e5",
            "decompiledFuncCode": "int64_t sub_40b2e0(void* arg1, int64_t arg2)\n{\n    *(arg1 + 8) = arg2;\n}\n\n"
        },
        {
            "funcName": "sub_40b2f0",
            "funcStartAddr": "0x40b2f0",
            "funcEndAddr": "0x40b2f5",
            "decompiledFuncCode": "int64_t sub_40b2f0(void* arg1, int64_t arg2)\n{\n    *(arg1 + 0x10) = arg2;\n}\n\n"
        },
        {
            "funcName": "sub_40b300",
            "funcStartAddr": "0x40b300",
            "funcEndAddr": "0x40b45c",
            "decompiledFuncCode": "uint64_t sub_40b300(int64_t* arg1, int64_t* arg2, uint64_t arg3)\n{\n    int64_t* rbp = arg2;\n    uint64_t rbx = arg3;\n    FILE* r13 = *arg1;\n    uint64_t rax_3;\n    if (r13 == 0)\n    {\n        uint64_t r15_1 = arg1[3];\n        int64_t* r13_1 = &arg1[0x107];\n        void* r14_1 = &arg1[4];\n        if (arg3 <= r15_1)\n        {\n            r13_1 = ((r13_1 - r15_1) + 0x800);\n        }\n        else\n        {\n            do\n            {\n                int64_t* rdi_2 = rbp;\n                rbp = (rbp + r15_1);\n                rbx = (rbx - r15_1);\n                memcpy(rdi_2, ((0x800 - r15_1) + r13_1), r15_1);\n                if ((rbp & 7) == 0)\n                {\n                    while (rbx > 0x7ff)\n                    {\n                        int64_t* rsi_3 = rbp;\n                        rbp = &rbp[0x100];\n                        int64_t* rax_4 = sub_40b4b0(r14_1, rsi_3);\n                        uint64_t temp1_1 = rbx;\n                        rbx = (rbx - 0x800);\n                        if (temp1_1 == 0x800)\n                        {\n                            arg1[3] = 0;\n                            return rax_4;\n                        }\n                    }\n                    sub_40b4b0(r14_1, r13_1);\n                    break;\n                }\n                r15_1 = 0x800;\n                sub_40b4b0(r14_1, r13_1);\n            } while (rbx > 0x800);\n            r15_1 = 0x800;\n        }\n        rax_3 = memcpy(rbp, r13_1, rbx);\n        arg1[3] = (r15_1 - rbx);\n    }\n    else\n    {\n        int32_t* rax_1 = __errno_location();\n        while (true)\n        {\n            rax_3 = fread_unlocked(rbp, 1, rbx, r13);\n            int32_t rdx = *rax_1;\n            rbp = (rbp + rax_3);\n            uint64_t temp0_1 = rbx;\n            rbx = (rbx - rax_3);\n            if (temp0_1 == rax_3)\n            {\n                break;\n            }\n            int64_t rdi = arg1[2];\n            if ((**arg1 & 0x20) == 0)\n            {\n                rdx = 0;\n            }\n            *rax_1 = rdx;\n            arg1[1](rdi);\n            r13 = *arg1;\n        }\n    }\n    return rax_3;\n}\n\n"
        },
        {
            "funcName": "sub_40b460",
            "funcStartAddr": "0x40b460",
            "funcEndAddr": "0x40b4a9",
            "decompiledFuncCode": "int64_t sub_40b460(int64_t* arg1)\n{\n    FILE* rbp = *arg1;\n    __explicit_bzero_chk(arg1, 0x1038, -1);\n    free(arg1);\n    if (rbp == 0)\n    {\n        return 0;\n    }\n    /* tailcall */\n    return sub_40b9a0(rbp);\n}\n\n"
        },
        {
            "funcName": "sub_40b4b0",
            "funcStartAddr": "0x40b4b0",
            "funcEndAddr": "0x40b755",
            "decompiledFuncCode": "int64_t* sub_40b4b0(int64_t* arg1, int64_t* arg2)\n{\n    int64_t r11 = arg1[0x101];\n    void* r10 = &arg1[0x80];\n    int64_t rdx = arg1[0x100];\n    int64_t* r9 = arg2;\n    int64_t r8 = (arg1[0x102] + 1);\n    int64_t* rax = arg1;\n    arg1[0x102] = r8;\n    int64_t r11_1 = (r11 + r8);\n    do\n    {\n        int64_t rcx_3 = *rax;\n        int64_t rdx_3 = ((!(rdx ^ (rdx << 0x15))) + rax[0x80]);\n        int64_t r8_4 = ((*(arg1 + (rcx_3 & 0x7f8)) + rdx_3) + r11_1);\n        *rax = r8_4;\n        int64_t rbx_4 = (*(arg1 + ((r8_4 >> 8) & 0x7f8)) + rcx_3);\n        *r9 = rbx_4;\n        int64_t r8_7 = rax[1];\n        int64_t rdx_5 = ((rdx_3 ^ (rdx_3 >> 5)) + rax[0x81]);\n        int64_t rcx_6 = ((*(arg1 + (r8_7 & 0x7f8)) + rdx_5) + rbx_4);\n        rax[1] = rcx_6;\n        int64_t rbx_6 = (*(arg1 + ((rcx_6 >> 8) & 0x7f8)) + r8_7);\n        r9[1] = rbx_6;\n        int64_t rcx_9 = rax[2];\n        int64_t rdx_11 = (((rdx_5 << 0xc) ^ rdx_5) + rax[0x82]);\n        int64_t r8_11 = ((*(arg1 + (rcx_9 & 0x7f8)) + rdx_11) + rbx_6);\n        rax[2] = r8_11;\n        int64_t rcx_10 = (rcx_9 + *(arg1 + ((r8_11 >> 8) & 0x7f8)));\n        r9[2] = rcx_10;\n        int64_t r8_14 = rax[3];\n        rdx = ((rdx_11 ^ (rdx_11 >> 0x21)) + rax[0x83]);\n        int64_t rcx_16 = ((*(arg1 + (r8_14 & 0x7f8)) + rdx) + rcx_10);\n        rax = &rax[4];\n        r9 = &r9[4];\n        rax[-1] = rcx_16;\n        r11_1 = (*(arg1 + ((rcx_16 >> 8) & 0x7f8)) + r8_14);\n        r9[-1] = r11_1;\n    } while (rax != r10);\n    void* rsi = &arg2[0x80];\n    void* r9_1 = &arg1[0x100];\n    do\n    {\n        int64_t rcx_21 = *rax;\n        int64_t rdx_15 = ((!(rdx ^ (rdx << 0x15))) + rax[-0x80]);\n        int64_t r8_18 = ((*(arg1 + (rcx_21 & 0x7f8)) + rdx_15) + r11_1);\n        *rax = r8_18;\n        int64_t rcx_22 = (rcx_21 + *(arg1 + ((r8_18 >> 8) & 0x7f8)));\n        *rsi = rcx_22;\n        int64_t r8_21 = rax[1];\n        int64_t rdx_17 = ((rdx_15 ^ (rdx_15 >> 5)) + rax[-0x7f]);\n        int64_t rcx_25 = ((*(arg1 + (r8_21 & 0x7f8)) + rdx_17) + rcx_22);\n        rax[1] = rcx_25;\n        int64_t r11_11 = (*(arg1 + ((rcx_25 >> 8) & 0x7f8)) + r8_21);\n        *(rsi + 8) = r11_11;\n        int64_t rcx_28 = rax[2];\n        int64_t rdx_23 = (((rdx_17 << 0xc) ^ rdx_17) + rax[-0x7e]);\n        int64_t r8_25 = ((*(arg1 + (rcx_28 & 0x7f8)) + rdx_23) + r11_11);\n        rax[2] = r8_25;\n        int64_t rcx_29 = (rcx_28 + *(arg1 + ((r8_25 >> 8) & 0x7f8)));\n        *(rsi + 0x10) = rcx_29;\n        int64_t r8_28 = rax[3];\n        rdx = ((rdx_23 ^ (rdx_23 >> 0x21)) + rax[-0x7d]);\n        int64_t rcx_35 = ((*(arg1 + (r8_28 & 0x7f8)) + rdx) + rcx_29);\n        rax = &rax[4];\n        rsi = (rsi + 0x20);\n        rax[-1] = rcx_35;\n        r11_1 = (*(arg1 + ((rcx_35 >> 8) & 0x7f8)) + r8_28);\n        *(rsi - 8) = r11_1;\n    } while (rax != r9_1);\n    arg1[0x100] = rdx;\n    arg1[0x101] = r11_1;\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_40b760",
            "funcStartAddr": "0x40b760",
            "funcEndAddr": "0x40b994",
            "decompiledFuncCode": "int64_t sub_40b760(int64_t* arg1)\n{\n    int64_t* rdx = arg1;\n    int64_t* rax = arg1;\n    int64_t rcx = -0x670a8fb093bb3f55;\n    int64_t rsi = -0x7d0fac247caa1f32;\n    int64_t r11 = -0x4d64d17db5a6aadc;\n    int64_t r12 = -0x5167a40d34037613;\n    int64_t r10 = -0x73f15afac2b8ed60;\n    int64_t r9 = -0x46074cdd38c5379e;\n    void* rbp = &arg1[0x100];\n    int64_t r8 = 0x647c4677a2884b7c;\n    int64_t rbx = 0x48fe4a0fa5a09315;\n    do\n    {\n        int64_t rsi_1 = (rsi + rax[4]);\n        int64_t rcx_1 = (rcx + rax[7]);\n        int64_t r8_1 = (r8 + (*rax - rsi_1));\n        int64_t rbx_2 = ((rbx + rax[5]) ^ (rcx_1 >> 9));\n        int64_t r9_1 = (r9 + (rax[1] - rbx_2));\n        int64_t r12_2 = ((r12 + rax[6]) ^ (r8_1 << 9));\n        int64_t r10_1 = (r10 + (rax[2] - r12_2));\n        int64_t rcx_3 = ((rcx_1 + r8_1) ^ (r9_1 >> 0x17));\n        int64_t r11_1 = (r11 + (rax[3] - rcx_3));\n        r8 = ((r8_1 + r9_1) ^ (r10_1 << 0xf));\n        int64_t rsi_2 = (rsi_1 - r8);\n        *rax = r8;\n        r9 = ((r9_1 + r10_1) ^ (r11_1 >> 0xe));\n        int64_t rbx_3 = (rbx_2 - r9);\n        rax[1] = r9;\n        r10 = ((r10_1 + r11_1) ^ (rsi_2 << 0x14));\n        int64_t r12_3 = (r12_2 - r10);\n        rax[2] = r10;\n        rax = &rax[8];\n        r11 = ((r11_1 + rsi_2) ^ (rbx_3 >> 0x11));\n        rbx = (rbx_3 + r12_3);\n        rcx = (rcx_3 - r11);\n        rax[-5] = r11;\n        rsi = ((r12_3 << 0xe) ^ (rsi_2 + rbx_3));\n        r12 = (r12_3 + rcx);\n        rax[-3] = rbx;\n        rax[-4] = rsi;\n        rax[-2] = r12;\n        rax[-1] = rcx;\n    } while (rbp != rax);\n    int64_t rax_13;\n    do\n    {\n        int64_t rcx_4 = (rcx + rdx[7]);\n        int64_t rsi_7 = (rsi + rdx[4]);\n        int64_t r8_4 = ((r8 + *rdx) - rsi_7);\n        int64_t rbx_5 = ((rbx + rdx[5]) ^ (rcx_4 >> 9));\n        int64_t r9_4 = ((r9 + rdx[1]) - rbx_5);\n        int64_t r12_5 = ((r12 + rdx[6]) ^ (r8_4 << 9));\n        int64_t r10_4 = ((r10 + rdx[2]) - r12_5);\n        int64_t rcx_6 = ((rcx_4 + r8_4) ^ (r9_4 >> 0x17));\n        int64_t r11_4 = ((r11 + rdx[3]) - rcx_6);\n        r8 = ((r8_4 + r9_4) ^ (r10_4 << 0xf));\n        int64_t rsi_8 = (rsi_7 - r8);\n        *rdx = r8;\n        r9 = ((r9_4 + r10_4) ^ (r11_4 >> 0xe));\n        int64_t rbx_6 = (rbx_5 - r9);\n        rdx[1] = r9;\n        r10 = ((r10_4 + r11_4) ^ (rsi_8 << 0x14));\n        rax_13 = (rsi_8 + rbx_6);\n        int64_t r12_6 = (r12_5 - r10);\n        rdx[2] = r10;\n        rdx = &rdx[8];\n        r11 = ((r11_4 + rsi_8) ^ (rbx_6 >> 0x11));\n        rbx = (rbx_6 + r12_6);\n        rcx = (rcx_6 - r11);\n        rdx[-5] = r11;\n        rsi = ((r12_6 << 0xe) ^ rax_13);\n        r12 = (r12_6 + rcx);\n        rdx[-3] = rbx;\n        rdx[-4] = rsi;\n        rdx[-2] = r12;\n        rdx[-1] = rcx;\n    } while (rbp != rdx);\n    arg1[0x102] = 0;\n    arg1[0x101] = 0;\n    arg1[0x100] = 0;\n    return rax_13;\n}\n\n"
        },
        {
            "funcName": "sub_40b9a0",
            "funcStartAddr": "0x40b9a0",
            "funcEndAddr": "0x40ba1b",
            "decompiledFuncCode": "int64_t sub_40b9a0(FILE* arg1)\n{\n    FILE* rdi = arg1;\n    if (fileno(arg1) >= 0)\n    {\n        int32_t rax_1 = __freading(rdi);\n        off64_t rax_6;\n        if (rax_1 != 0)\n        {\n            rax_6 = lseek(fileno(arg1), 0, 1);\n        }\n        if (((rax_1 == 0 || (rax_1 != 0 && rax_6 != -1)) && sub_408ec0(arg1) != 0))\n        {\n            int32_t* rax_3 = __errno_location();\n            int32_t r12 = *rax_3;\n            int64_t rax_4 = fclose(arg1);\n            if (r12 != 0)\n            {\n                *rax_3 = r12;\n                rax_4 = 0xffffffff;\n            }\n            return rax_4;\n        }\n        rdi = arg1;\n    }\n    /* tailcall */\n    return fclose(rdi);\n}\n\n"
        },
        {
            "funcName": "sub_40ba20",
            "funcStartAddr": "0x40ba20",
            "funcEndAddr": "0x40bab3",
            "decompiledFuncCode": "FILE* sub_40ba20(char* arg1, char* arg2)\n{\n    FILE* rax = fopen(arg1, arg2);\n    FILE* rbx = rax;\n    if (rax != 0)\n    {\n        int32_t rax_1 = fileno(rax);\n        if (rax_1 <= 2)\n        {\n            int32_t rax_3 = sub_40bac0(rax_1);\n            if (rax_3 < 0)\n            {\n                int32_t* rax_7 = __errno_location();\n                FILE* rdi_5 = rbx;\n                rbx = nullptr;\n                int32_t r12_2 = *rax_7;\n                sub_40b9a0(rdi_5);\n                *rax_7 = r12_2;\n            }\n            else\n            {\n                int32_t rax_4 = sub_40b9a0(rbx);\n                FILE* rax_5;\n                if (rax_4 == 0)\n                {\n                    rax_5 = fdopen(rax_3, arg2);\n                    rbx = rax_5;\n                }\n                if ((rax_4 != 0 || (rax_4 == 0 && rax_5 == 0)))\n                {\n                    int32_t* rax_6 = __errno_location();\n                    int32_t rbp_1 = *rax_6;\n                    close(rax_3);\n                    *rax_6 = rbp_1;\n                    rbx = nullptr;\n                }\n            }\n        }\n    }\n    return rbx;\n}\n\n"
        },
        {
            "funcName": "sub_40bac0",
            "funcStartAddr": "0x40bac0",
            "funcEndAddr": "0x40bace",
            "decompiledFuncCode": "int64_t sub_40bac0(int32_t arg1)\n{\n    /* tailcall */\n    return sub_408d80(arg1, 0, 3);\n}\n\n"
        },
        {
            "funcName": "init",
            "funcStartAddr": "0x40bad0",
            "funcEndAddr": "0x40bb2d",
            "decompiledFuncCode": "void init()\n{\n    _init();\n}\n\n"
        },
        {
            "funcName": "fini",
            "funcStartAddr": "0x40bb30",
            "funcEndAddr": "0x40bb31",
            "decompiledFuncCode": "void fini()\n{\n    return;\n}\n\n"
        },
        {
            "funcName": "sub_40bb40",
            "funcStartAddr": "0x40bb40",
            "funcEndAddr": "0x40bb58",
            "decompiledFuncCode": "int64_t sub_40bb40(void (* arg1)(void*))\n{\n    int64_t rdx = data_6112e8;\n    /* tailcall */\n    return __cxa_atexit(arg1, nullptr, rdx);\n}\n\n"
        },
        {
            "funcName": "sub_40bb58",
            "funcStartAddr": "0x40bb58",
            "funcEndAddr": "0x40bb78",
            "decompiledFuncCode": "int64_t sub_40bb58(int64_t arg1, int64_t arg2, int64_t arg3)\n{\n    int64_t* rbx = &data_610e30;\n    while (true)\n    {\n        int64_t rax_1 = *rbx;\n        if (rax_1 == -1)\n        {\n            break;\n        }\n        rax_1();\n        rbx = (rbx - 8);\n    }\n    return arg3;\n}\n\n"
        }
    ]
}