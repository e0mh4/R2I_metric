{
    "decompilerName": "binaryNinja",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_sort.elf",
    "isStripped": "True",
    "compilerName": "gcc",
    "optLevel": "-O",
    "funcCount": 333,
    "funcInfo": [
        {
            "funcName": "sub_402790",
            "funcStartAddr": "0x402790",
            "funcEndAddr": "0x40279c",
            "decompiledFuncCode": "int64_t sub_402790()\n{\n    int64_t var_8 = data_61c008;\n    /* jump -> data_61c010 */\n}\n\n"
        },
        {
            "funcName": "sub_4027a6",
            "funcStartAddr": "0x4027a6",
            "funcEndAddr": "0x4027b0",
            "decompiledFuncCode": "int64_t sub_4027a6()\n{\n    int64_t var_8 = 0;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_4027b6",
            "funcStartAddr": "0x4027b6",
            "funcEndAddr": "0x4027c0",
            "decompiledFuncCode": "int64_t sub_4027b6()\n{\n    int64_t var_8 = 1;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_4027c6",
            "funcStartAddr": "0x4027c6",
            "funcEndAddr": "0x4027d0",
            "decompiledFuncCode": "int64_t sub_4027c6()\n{\n    int64_t var_8 = 2;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_4027d6",
            "funcStartAddr": "0x4027d6",
            "funcEndAddr": "0x4027e0",
            "decompiledFuncCode": "int64_t sub_4027d6()\n{\n    int64_t var_8 = 3;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_4027e6",
            "funcStartAddr": "0x4027e6",
            "funcEndAddr": "0x4027f0",
            "decompiledFuncCode": "int64_t sub_4027e6()\n{\n    int64_t var_8 = 4;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402806",
            "funcStartAddr": "0x402806",
            "funcEndAddr": "0x402810",
            "decompiledFuncCode": "int64_t sub_402806()\n{\n    int64_t var_8 = 6;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402816",
            "funcStartAddr": "0x402816",
            "funcEndAddr": "0x402820",
            "decompiledFuncCode": "int64_t sub_402816()\n{\n    int64_t var_8 = 7;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402826",
            "funcStartAddr": "0x402826",
            "funcEndAddr": "0x402830",
            "decompiledFuncCode": "int64_t sub_402826()\n{\n    int64_t var_8 = 8;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402836",
            "funcStartAddr": "0x402836",
            "funcEndAddr": "0x402840",
            "decompiledFuncCode": "int64_t sub_402836()\n{\n    int64_t var_8 = 9;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402846",
            "funcStartAddr": "0x402846",
            "funcEndAddr": "0x402850",
            "decompiledFuncCode": "int64_t sub_402846()\n{\n    int64_t var_8 = 0xa;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402856",
            "funcStartAddr": "0x402856",
            "funcEndAddr": "0x402860",
            "decompiledFuncCode": "int64_t sub_402856()\n{\n    int64_t var_8 = 0xb;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402866",
            "funcStartAddr": "0x402866",
            "funcEndAddr": "0x402870",
            "decompiledFuncCode": "int64_t sub_402866()\n{\n    int64_t var_8 = 0xc;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402876",
            "funcStartAddr": "0x402876",
            "funcEndAddr": "0x402880",
            "decompiledFuncCode": "int64_t sub_402876()\n{\n    int64_t var_8 = 0xd;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402886",
            "funcStartAddr": "0x402886",
            "funcEndAddr": "0x402890",
            "decompiledFuncCode": "int64_t sub_402886()\n{\n    int64_t var_8 = 0xe;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402896",
            "funcStartAddr": "0x402896",
            "funcEndAddr": "0x4028a0",
            "decompiledFuncCode": "int64_t sub_402896()\n{\n    int64_t var_8 = 0xf;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_4028a6",
            "funcStartAddr": "0x4028a6",
            "funcEndAddr": "0x4028b0",
            "decompiledFuncCode": "int64_t sub_4028a6()\n{\n    int64_t var_8 = 0x10;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_4028b6",
            "funcStartAddr": "0x4028b6",
            "funcEndAddr": "0x4028c0",
            "decompiledFuncCode": "int64_t sub_4028b6()\n{\n    int64_t var_8 = 0x11;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_4028c6",
            "funcStartAddr": "0x4028c6",
            "funcEndAddr": "0x4028d0",
            "decompiledFuncCode": "int64_t sub_4028c6()\n{\n    int64_t var_8 = 0x12;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_4028d6",
            "funcStartAddr": "0x4028d6",
            "funcEndAddr": "0x4028e0",
            "decompiledFuncCode": "int64_t sub_4028d6()\n{\n    int64_t var_8 = 0x13;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_4028e6",
            "funcStartAddr": "0x4028e6",
            "funcEndAddr": "0x4028f0",
            "decompiledFuncCode": "int64_t sub_4028e6()\n{\n    int64_t var_8 = 0x14;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402906",
            "funcStartAddr": "0x402906",
            "funcEndAddr": "0x402910",
            "decompiledFuncCode": "int64_t sub_402906()\n{\n    int64_t var_8 = 0x16;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402916",
            "funcStartAddr": "0x402916",
            "funcEndAddr": "0x402920",
            "decompiledFuncCode": "int64_t sub_402916()\n{\n    int64_t var_8 = 0x17;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402926",
            "funcStartAddr": "0x402926",
            "funcEndAddr": "0x402930",
            "decompiledFuncCode": "int64_t sub_402926()\n{\n    int64_t var_8 = 0x18;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402936",
            "funcStartAddr": "0x402936",
            "funcEndAddr": "0x402940",
            "decompiledFuncCode": "int64_t sub_402936()\n{\n    int64_t var_8 = 0x19;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402946",
            "funcStartAddr": "0x402946",
            "funcEndAddr": "0x402950",
            "decompiledFuncCode": "int64_t sub_402946()\n{\n    int64_t var_8 = 0x1a;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402956",
            "funcStartAddr": "0x402956",
            "funcEndAddr": "0x402960",
            "decompiledFuncCode": "int64_t sub_402956()\n{\n    int64_t var_8 = 0x1b;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402966",
            "funcStartAddr": "0x402966",
            "funcEndAddr": "0x402970",
            "decompiledFuncCode": "int64_t sub_402966()\n{\n    int64_t var_8 = 0x1c;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402976",
            "funcStartAddr": "0x402976",
            "funcEndAddr": "0x402980",
            "decompiledFuncCode": "int64_t sub_402976()\n{\n    int64_t var_8 = 0x1d;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402986",
            "funcStartAddr": "0x402986",
            "funcEndAddr": "0x402990",
            "decompiledFuncCode": "int64_t sub_402986()\n{\n    int64_t var_8 = 0x1e;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402996",
            "funcStartAddr": "0x402996",
            "funcEndAddr": "0x4029a0",
            "decompiledFuncCode": "int64_t sub_402996()\n{\n    int64_t var_8 = 0x1f;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_4029a6",
            "funcStartAddr": "0x4029a6",
            "funcEndAddr": "0x4029b0",
            "decompiledFuncCode": "int64_t sub_4029a6()\n{\n    int64_t var_8 = 0x20;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_4029b6",
            "funcStartAddr": "0x4029b6",
            "funcEndAddr": "0x4029c0",
            "decompiledFuncCode": "int64_t sub_4029b6()\n{\n    int64_t var_8 = 0x21;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_4029c6",
            "funcStartAddr": "0x4029c6",
            "funcEndAddr": "0x4029d0",
            "decompiledFuncCode": "int64_t sub_4029c6()\n{\n    int64_t var_8 = 0x22;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_4029d6",
            "funcStartAddr": "0x4029d6",
            "funcEndAddr": "0x4029e0",
            "decompiledFuncCode": "int64_t sub_4029d6()\n{\n    int64_t var_8 = 0x23;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_4029e6",
            "funcStartAddr": "0x4029e6",
            "funcEndAddr": "0x4029f0",
            "decompiledFuncCode": "int64_t sub_4029e6()\n{\n    int64_t var_8 = 0x24;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402a06",
            "funcStartAddr": "0x402a06",
            "funcEndAddr": "0x402a10",
            "decompiledFuncCode": "int64_t sub_402a06()\n{\n    int64_t var_8 = 0x26;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402a16",
            "funcStartAddr": "0x402a16",
            "funcEndAddr": "0x402a20",
            "decompiledFuncCode": "int64_t sub_402a16()\n{\n    int64_t var_8 = 0x27;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402a26",
            "funcStartAddr": "0x402a26",
            "funcEndAddr": "0x402a30",
            "decompiledFuncCode": "int64_t sub_402a26()\n{\n    int64_t var_8 = 0x28;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402a36",
            "funcStartAddr": "0x402a36",
            "funcEndAddr": "0x402a40",
            "decompiledFuncCode": "int64_t sub_402a36()\n{\n    int64_t var_8 = 0x29;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402a46",
            "funcStartAddr": "0x402a46",
            "funcEndAddr": "0x402a50",
            "decompiledFuncCode": "int64_t sub_402a46()\n{\n    int64_t var_8 = 0x2a;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402a56",
            "funcStartAddr": "0x402a56",
            "funcEndAddr": "0x402a60",
            "decompiledFuncCode": "int64_t sub_402a56()\n{\n    int64_t var_8 = 0x2b;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402a66",
            "funcStartAddr": "0x402a66",
            "funcEndAddr": "0x402a70",
            "decompiledFuncCode": "int64_t sub_402a66()\n{\n    int64_t var_8 = 0x2c;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402a76",
            "funcStartAddr": "0x402a76",
            "funcEndAddr": "0x402a80",
            "decompiledFuncCode": "int64_t sub_402a76()\n{\n    int64_t var_8 = 0x2d;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402a86",
            "funcStartAddr": "0x402a86",
            "funcEndAddr": "0x402a90",
            "decompiledFuncCode": "int64_t sub_402a86()\n{\n    int64_t var_8 = 0x2e;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402a96",
            "funcStartAddr": "0x402a96",
            "funcEndAddr": "0x402aa0",
            "decompiledFuncCode": "int64_t sub_402a96()\n{\n    int64_t var_8 = 0x2f;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402aa6",
            "funcStartAddr": "0x402aa6",
            "funcEndAddr": "0x402ab0",
            "decompiledFuncCode": "int64_t sub_402aa6()\n{\n    int64_t var_8 = 0x30;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402ab6",
            "funcStartAddr": "0x402ab6",
            "funcEndAddr": "0x402ac0",
            "decompiledFuncCode": "int64_t sub_402ab6()\n{\n    int64_t var_8 = 0x31;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402ac6",
            "funcStartAddr": "0x402ac6",
            "funcEndAddr": "0x402ad0",
            "decompiledFuncCode": "int64_t sub_402ac6()\n{\n    int64_t var_8 = 0x32;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402ad6",
            "funcStartAddr": "0x402ad6",
            "funcEndAddr": "0x402ae0",
            "decompiledFuncCode": "int64_t sub_402ad6()\n{\n    int64_t var_8 = 0x33;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402ae6",
            "funcStartAddr": "0x402ae6",
            "funcEndAddr": "0x402af0",
            "decompiledFuncCode": "int64_t sub_402ae6()\n{\n    int64_t var_8 = 0x34;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402b06",
            "funcStartAddr": "0x402b06",
            "funcEndAddr": "0x402b10",
            "decompiledFuncCode": "int64_t sub_402b06()\n{\n    int64_t var_8 = 0x36;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402b16",
            "funcStartAddr": "0x402b16",
            "funcEndAddr": "0x402b20",
            "decompiledFuncCode": "int64_t sub_402b16()\n{\n    int64_t var_8 = 0x37;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402b26",
            "funcStartAddr": "0x402b26",
            "funcEndAddr": "0x402b30",
            "decompiledFuncCode": "int64_t sub_402b26()\n{\n    int64_t var_8 = 0x38;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402b36",
            "funcStartAddr": "0x402b36",
            "funcEndAddr": "0x402b40",
            "decompiledFuncCode": "int64_t sub_402b36()\n{\n    int64_t var_8 = 0x39;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402b46",
            "funcStartAddr": "0x402b46",
            "funcEndAddr": "0x402b50",
            "decompiledFuncCode": "int64_t sub_402b46()\n{\n    int64_t var_8 = 0x3a;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402b56",
            "funcStartAddr": "0x402b56",
            "funcEndAddr": "0x402b60",
            "decompiledFuncCode": "int64_t sub_402b56()\n{\n    int64_t var_8 = 0x3b;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402b66",
            "funcStartAddr": "0x402b66",
            "funcEndAddr": "0x402b70",
            "decompiledFuncCode": "int64_t sub_402b66()\n{\n    int64_t var_8 = 0x3c;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402b76",
            "funcStartAddr": "0x402b76",
            "funcEndAddr": "0x402b80",
            "decompiledFuncCode": "int64_t sub_402b76()\n{\n    int64_t var_8 = 0x3d;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402b86",
            "funcStartAddr": "0x402b86",
            "funcEndAddr": "0x402b90",
            "decompiledFuncCode": "int64_t sub_402b86()\n{\n    int64_t var_8 = 0x3e;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402b96",
            "funcStartAddr": "0x402b96",
            "funcEndAddr": "0x402ba0",
            "decompiledFuncCode": "int64_t sub_402b96()\n{\n    int64_t var_8 = 0x3f;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402ba6",
            "funcStartAddr": "0x402ba6",
            "funcEndAddr": "0x402bb0",
            "decompiledFuncCode": "int64_t sub_402ba6()\n{\n    int64_t var_8 = 0x40;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402bb6",
            "funcStartAddr": "0x402bb6",
            "funcEndAddr": "0x402bc0",
            "decompiledFuncCode": "int64_t sub_402bb6()\n{\n    int64_t var_8 = 0x41;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402bc6",
            "funcStartAddr": "0x402bc6",
            "funcEndAddr": "0x402bd0",
            "decompiledFuncCode": "int64_t sub_402bc6()\n{\n    int64_t var_8 = 0x42;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402bd6",
            "funcStartAddr": "0x402bd6",
            "funcEndAddr": "0x402be0",
            "decompiledFuncCode": "int64_t sub_402bd6()\n{\n    int64_t var_8 = 0x43;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402be6",
            "funcStartAddr": "0x402be6",
            "funcEndAddr": "0x402bf0",
            "decompiledFuncCode": "int64_t sub_402be6()\n{\n    int64_t var_8 = 0x44;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402c06",
            "funcStartAddr": "0x402c06",
            "funcEndAddr": "0x402c10",
            "decompiledFuncCode": "int64_t sub_402c06()\n{\n    int64_t var_8 = 0x46;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402c16",
            "funcStartAddr": "0x402c16",
            "funcEndAddr": "0x402c20",
            "decompiledFuncCode": "int64_t sub_402c16()\n{\n    int64_t var_8 = 0x47;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402c26",
            "funcStartAddr": "0x402c26",
            "funcEndAddr": "0x402c30",
            "decompiledFuncCode": "int64_t sub_402c26()\n{\n    int64_t var_8 = 0x48;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402c36",
            "funcStartAddr": "0x402c36",
            "funcEndAddr": "0x402c40",
            "decompiledFuncCode": "int64_t sub_402c36()\n{\n    int64_t var_8 = 0x49;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402c46",
            "funcStartAddr": "0x402c46",
            "funcEndAddr": "0x402c50",
            "decompiledFuncCode": "int64_t sub_402c46()\n{\n    int64_t var_8 = 0x4a;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402c56",
            "funcStartAddr": "0x402c56",
            "funcEndAddr": "0x402c60",
            "decompiledFuncCode": "int64_t sub_402c56()\n{\n    int64_t var_8 = 0x4b;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402c66",
            "funcStartAddr": "0x402c66",
            "funcEndAddr": "0x402c70",
            "decompiledFuncCode": "int64_t sub_402c66()\n{\n    int64_t var_8 = 0x4c;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402c76",
            "funcStartAddr": "0x402c76",
            "funcEndAddr": "0x402c80",
            "decompiledFuncCode": "int64_t sub_402c76()\n{\n    int64_t var_8 = 0x4d;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402c86",
            "funcStartAddr": "0x402c86",
            "funcEndAddr": "0x402c90",
            "decompiledFuncCode": "int64_t sub_402c86()\n{\n    int64_t var_8 = 0x4e;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402c96",
            "funcStartAddr": "0x402c96",
            "funcEndAddr": "0x402ca0",
            "decompiledFuncCode": "int64_t sub_402c96()\n{\n    int64_t var_8 = 0x4f;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402ca6",
            "funcStartAddr": "0x402ca6",
            "funcEndAddr": "0x402cb0",
            "decompiledFuncCode": "int64_t sub_402ca6()\n{\n    int64_t var_8 = 0x50;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402cb6",
            "funcStartAddr": "0x402cb6",
            "funcEndAddr": "0x402cc0",
            "decompiledFuncCode": "int64_t sub_402cb6()\n{\n    int64_t var_8 = 0x51;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402cc6",
            "funcStartAddr": "0x402cc6",
            "funcEndAddr": "0x402cd0",
            "decompiledFuncCode": "int64_t sub_402cc6()\n{\n    int64_t var_8 = 0x52;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402cd6",
            "funcStartAddr": "0x402cd6",
            "funcEndAddr": "0x402ce0",
            "decompiledFuncCode": "int64_t sub_402cd6()\n{\n    int64_t var_8 = 0x53;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402ce6",
            "funcStartAddr": "0x402ce6",
            "funcEndAddr": "0x402cf0",
            "decompiledFuncCode": "int64_t sub_402ce6()\n{\n    int64_t var_8 = 0x54;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402d06",
            "funcStartAddr": "0x402d06",
            "funcEndAddr": "0x402d10",
            "decompiledFuncCode": "int64_t sub_402d06()\n{\n    int64_t var_8 = 0x56;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402d16",
            "funcStartAddr": "0x402d16",
            "funcEndAddr": "0x402d20",
            "decompiledFuncCode": "int64_t sub_402d16()\n{\n    int64_t var_8 = 0x57;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402d26",
            "funcStartAddr": "0x402d26",
            "funcEndAddr": "0x402d30",
            "decompiledFuncCode": "int64_t sub_402d26()\n{\n    int64_t var_8 = 0x58;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402d36",
            "funcStartAddr": "0x402d36",
            "funcEndAddr": "0x402d40",
            "decompiledFuncCode": "int64_t sub_402d36()\n{\n    int64_t var_8 = 0x59;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402d46",
            "funcStartAddr": "0x402d46",
            "funcEndAddr": "0x402d50",
            "decompiledFuncCode": "int64_t sub_402d46()\n{\n    int64_t var_8 = 0x5a;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402d56",
            "funcStartAddr": "0x402d56",
            "funcEndAddr": "0x402d60",
            "decompiledFuncCode": "int64_t sub_402d56()\n{\n    int64_t var_8 = 0x5b;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402d66",
            "funcStartAddr": "0x402d66",
            "funcEndAddr": "0x402d70",
            "decompiledFuncCode": "int64_t sub_402d66()\n{\n    int64_t var_8 = 0x5c;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402d76",
            "funcStartAddr": "0x402d76",
            "funcEndAddr": "0x402d80",
            "decompiledFuncCode": "int64_t sub_402d76()\n{\n    int64_t var_8 = 0x5d;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402d86",
            "funcStartAddr": "0x402d86",
            "funcEndAddr": "0x402d90",
            "decompiledFuncCode": "int64_t sub_402d86()\n{\n    int64_t var_8 = 0x5e;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402d96",
            "funcStartAddr": "0x402d96",
            "funcEndAddr": "0x402da0",
            "decompiledFuncCode": "int64_t sub_402d96()\n{\n    int64_t var_8 = 0x5f;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402da6",
            "funcStartAddr": "0x402da6",
            "funcEndAddr": "0x402db0",
            "decompiledFuncCode": "int64_t sub_402da6()\n{\n    int64_t var_8 = 0x60;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402db6",
            "funcStartAddr": "0x402db6",
            "funcEndAddr": "0x402dc0",
            "decompiledFuncCode": "int64_t sub_402db6()\n{\n    int64_t var_8 = 0x61;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402dc6",
            "funcStartAddr": "0x402dc6",
            "funcEndAddr": "0x402dd0",
            "decompiledFuncCode": "int64_t sub_402dc6()\n{\n    int64_t var_8 = 0x62;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402dd6",
            "funcStartAddr": "0x402dd6",
            "funcEndAddr": "0x402de0",
            "decompiledFuncCode": "int64_t sub_402dd6()\n{\n    int64_t var_8 = 0x63;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402de6",
            "funcStartAddr": "0x402de6",
            "funcEndAddr": "0x402df0",
            "decompiledFuncCode": "int64_t sub_402de6()\n{\n    int64_t var_8 = 0x64;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402e06",
            "funcStartAddr": "0x402e06",
            "funcEndAddr": "0x402e10",
            "decompiledFuncCode": "int64_t sub_402e06()\n{\n    int64_t var_8 = 0x66;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402e16",
            "funcStartAddr": "0x402e16",
            "funcEndAddr": "0x402e20",
            "decompiledFuncCode": "int64_t sub_402e16()\n{\n    int64_t var_8 = 0x67;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402e26",
            "funcStartAddr": "0x402e26",
            "funcEndAddr": "0x402e30",
            "decompiledFuncCode": "int64_t sub_402e26()\n{\n    int64_t var_8 = 0x68;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402e36",
            "funcStartAddr": "0x402e36",
            "funcEndAddr": "0x402e40",
            "decompiledFuncCode": "int64_t sub_402e36()\n{\n    int64_t var_8 = 0x69;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402e46",
            "funcStartAddr": "0x402e46",
            "funcEndAddr": "0x402e50",
            "decompiledFuncCode": "int64_t sub_402e46()\n{\n    int64_t var_8 = 0x6a;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402e56",
            "funcStartAddr": "0x402e56",
            "funcEndAddr": "0x402e60",
            "decompiledFuncCode": "int64_t sub_402e56()\n{\n    int64_t var_8 = 0x6b;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402e66",
            "funcStartAddr": "0x402e66",
            "funcEndAddr": "0x402e70",
            "decompiledFuncCode": "int64_t sub_402e66()\n{\n    int64_t var_8 = 0x6c;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402e76",
            "funcStartAddr": "0x402e76",
            "funcEndAddr": "0x402e80",
            "decompiledFuncCode": "int64_t sub_402e76()\n{\n    int64_t var_8 = 0x6d;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402e86",
            "funcStartAddr": "0x402e86",
            "funcEndAddr": "0x402e90",
            "decompiledFuncCode": "int64_t sub_402e86()\n{\n    int64_t var_8 = 0x6e;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402e96",
            "funcStartAddr": "0x402e96",
            "funcEndAddr": "0x402ea0",
            "decompiledFuncCode": "int64_t sub_402e96()\n{\n    int64_t var_8 = 0x6f;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402ea6",
            "funcStartAddr": "0x402ea6",
            "funcEndAddr": "0x402eb0",
            "decompiledFuncCode": "int64_t sub_402ea6()\n{\n    int64_t var_8 = 0x70;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402eb6",
            "funcStartAddr": "0x402eb6",
            "funcEndAddr": "0x402ec0",
            "decompiledFuncCode": "int64_t sub_402eb6()\n{\n    int64_t var_8 = 0x71;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402ec6",
            "funcStartAddr": "0x402ec6",
            "funcEndAddr": "0x402ed0",
            "decompiledFuncCode": "int64_t sub_402ec6()\n{\n    int64_t var_8 = 0x72;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402ed6",
            "funcStartAddr": "0x402ed6",
            "funcEndAddr": "0x402ee0",
            "decompiledFuncCode": "int64_t sub_402ed6()\n{\n    int64_t var_8 = 0x73;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "sub_402ee6",
            "funcStartAddr": "0x402ee6",
            "funcEndAddr": "0x402ef0",
            "decompiledFuncCode": "int64_t sub_402ee6()\n{\n    int64_t var_8 = 0x74;\n    /* tailcall */\n    return sub_402790();\n}\n\n"
        },
        {
            "funcName": "main",
            "funcStartAddr": "0x402f50",
            "funcEndAddr": "0x405830",
            "decompiledFuncCode": "int32_t main(int32_t argc, char** argv, char** envp)\n{\n    char** rbp = argv;\n    uint64_t rbx = argc;\n    char* rax = getenv(\"POSIXLY_CORRECT\");\n    char* var_350 = rax;\n    int64_t r12;\n    r12 = rax != 0;\n    bool var_380 = (sub_40dbe0() - 0x30db0) > 0x2b8;\n    int64_t rcx;\n    int64_t rdx;\n    uint64_t r8;\n    ssize_t r9;\n    rcx = sub_40dc60(*rbp);\n    int32_t var_388;\n    char* var_360 = setlocale(6, &data_41655e[0x13], rdx, rcx, r8, r9, var_388, var_380);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_\u2026\");\n    textdomain(\"coreutils\");\n    data_61c518 = 2;\n    data_61cba1 = sub_40bd10();\n    char rax_5 = sub_40bd10();\n    data_61cba0 = rax_5;\n    struct lconv* rax_6 = localeconv();\n    char* rcx_1 = rax_6->decimal_point;\n    uint32_t rsi = *rcx_1;\n    data_61cba8 = rsi;\n    if ((rsi == 0 || (rsi != 0 && rcx_1[1] != 0)))\n    {\n        data_61cba8 = 0x2e;\n    }\n    char* rdx_1 = rax_6->thousands_sep;\n    uint32_t rcx_2 = *rdx_1;\n    data_61cba4 = rcx_2;\n    if ((rcx_2 == 0 || (rcx_2 != 0 && rdx_1[1] != 0)))\n    {\n        data_61cba4 = 0xffffffff;\n    }\n    data_61c758 = 0;\n    uint16_t** rax_7 = __ctype_b_loc();\n    int32_t** rax_8 = __ctype_toupper_loc();\n    void* rdx_2 = nullptr;\n    do\n    {\n        uint16_t* rdi_4 = *rax_7;\n        char rsi_1 = 1;\n        uint32_t rcx_8 = rdi_4[rdx_2];\n        if ((rcx_8 & 1) == 0)\n        {\n            if (rdx_2 != 0xa)\n            {\n                rsi_1 = 0;\n            }\n            else\n            {\n                uint16_t rdx_3 = rdi_4[0xa];\n                data_61ca8a = 1;\n                data_61c88a = 0;\n                rdx_3 = (rdx_3 >> 0xe);\n                data_61c98a = ((rdx_3 ^ 1) & 1);\n                data_61c78a = *rax_8[0xa];\n                rdx_2 = 0xb;\n                continue;\n            }\n        }\n        *(rdx_2 + 0x61ca80) = rsi_1;\n        int64_t rdi_3 = (rdx_2 << 2);\n        *(rdx_2 + 0x61c980) = (((rcx_8 >> 0xe) ^ 1) & 1);\n        int32_t rsi_5 = 0;\n        if ((rcx_8 & 8) == 0)\n        {\n            rsi_5 = rdx_2 == 0xa;\n            rsi_5 = (((rcx_8 & 1) | rsi_5) ^ 1);\n        }\n        int32_t* rcx_6 = *rax_8;\n        *(rdx_2 + 0x61c880) = rsi_5;\n        rdx_2 = (rdx_2 + 1);\n        *(rdx_2 + 0x61c77f) = *(rcx_6 + rdi_3);\n    } while (rdx_2 != 0x100);\n    if (rax_5 != 0)\n    {\n        var_388 = rbx;\n        int64_t r14_1 = 1;\n        do\n        {\n            char* rax_9 = nl_langinfo((r14_1 + 0x2000d));\n            uint64_t rax_10 = strlen(rax_9);\n            char* rax_11 = sub_411210((rax_10 + 1));\n            int64_t rdx_9 = (r14_1 << 4);\n            *(rdx_9 + 0x61c430) = rax_11;\n            *(rdx_9 + 0x61c438) = r14_1;\n            char* r9_1;\n            if (rax_10 == 0)\n            {\n                r9_1 = rax_11;\n            }\n            else\n            {\n                uint16_t* r11_1 = *rax_7;\n                char* rdi_8 = rax_9;\n                void* r10_1 = &rax_9[rax_10];\n                int64_t r8_1 = 0;\n                char* rcx_9 = rax_11;\n                do\n                {\n                    uint64_t rsi_6 = *rdi_8;\n                    r9_1 = rcx_9;\n                    if ((r11_1[rsi_6] & 1) == 0)\n                    {\n                        r8_1 = (r8_1 + 1);\n                        *rcx_9 = *(rsi_6 + 0x61c780);\n                        rcx_9 = &rax_11[r8_1];\n                        r9_1 = rcx_9;\n                    }\n                    rdi_8 = &rdi_8[1];\n                } while (r10_1 != rdi_8);\n            }\n            r14_1 = (r14_1 + 1);\n            *r9_1 = 0;\n        } while (r14_1 != 0xd);\n        rbx = var_388;\n        qsort(&data_61c440, 0xc, 0x10, sub_405cf0);\n    }\n    int32_t r14_2 = 0xe;\n    int64_t r13_1 = 0;\n    sigemptyset(&data_61c6c0);\n    uint64_t var_158;\n    while (true)\n    {\n        sigaction(r14_2, nullptr, &var_158);\n        if (var_158 != 1)\n        {\n            sigaddset(&data_61c6c0, r14_2);\n        }\n        r13_1 = (r13_1 + 1);\n        if (r13_1 == 0xb)\n        {\n            break;\n        }\n        r14_2 = *((r13_1 << 2) + 0x414980);\n    }\n    var_158 = 0x405d80;\n    int32_t r14_3 = 0xe;\n    int32_t var_d0 = 0;\n    int64_t r13_2 = 0;\n    int64_t* var_150 = data_61c6c0;\n    int128_t zmm1 = data_61c720;\n    int128_t var_140 = data_61c6d0;\n    int128_t var_130 = data_61c6e0;\n    int128_t var_120 = data_61c6f0;\n    int128_t var_110 = data_61c700;\n    int128_t var_100 = data_61c710;\n    int128_t var_f0 = zmm1;\n    int128_t var_e0 = data_61c730;\n    while (true)\n    {\n        if (sigismember(&data_61c6c0, r14_3) == 0)\n        {\n            r13_2 = (r13_2 + 1);\n            if (r13_2 == 0xb)\n            {\n                break;\n            }\n        }\n        else\n        {\n            r13_2 = (r13_2 + 1);\n            sigaction(r14_3, &var_158, nullptr);\n            if (r13_2 == 0xb)\n            {\n                break;\n            }\n        }\n        r14_3 = *((r13_2 << 2) + 0x414980);\n    }\n    signal(0x11, nullptr);\n    sub_413f20(sub_407890);\n    int128_t zmm0 = 0;\n    int64_t rdi_11 = rbx;\n    int128_t var_230 = zmm0;\n    int64_t var_238 = -1;\n    *var_230[8] = -1;\n    uint64_t rax_14;\n    rax_14 = (rdi_11 >> 0x3d) != 0;\n    int64_t rdi_12 = (rdi_11 << 3);\n    char var_200 = zmm0;\n    if ((rdi_12 >= 0 && rax_14 == 0))\n    {\n        int64_t* rax_16;\n        void* const r8_2;\n        ssize_t r9_2;\n        rax_16 = sub_411210(rdi_12);\n        char* r15_2 = nullptr;\n        char var_358_1 = 0;\n        int64_t r14_4 = 0;\n        int64_t* r13_3 = rax_16;\n        var_388 = 0;\n        char* var_368_1 = nullptr;\n        char* var_378_1 = nullptr;\n        uint64_t var_338_1 = 0;\n        void* var_370_1 = nullptr;\n        int64_t var_278;\n        int64_t* var_348_1 = &var_278;\n        while (true)\n        {\n            int32_t var_2f8 = 0xffffffff;\n            int64_t rax_17;\n            if (r14_4 == 0xffffffff)\n            {\n            label_403460:\n                rax_17 = data_61c57c;\n            }\n            else\n            {\n                char* var_340;\n                char* var_330;\n                int32_t var_328;\n                char* var_2c8;\n                int64_t var_1e8;\n                double zmm0_3;\n                if (r15_2 == 0)\n                {\n                label_40349f:\n                    int32_t rax_19;\n                    int64_t rsi_11;\n                    rax_19 = getopt_long(rbx, rbp, \"-bcCdfghik:mMno:rRsS:t:T:uVy:z\", &data_414b40, &var_2f8);\n                    r14_4 = rax_19;\n                    if (rax_19 == 0xffffffff)\n                    {\n                        goto label_403460;\n                    }\n                    uint64_t rax_20 = (rax_19 + 0x83);\n                    int64_t var_288;\n                    int64_t var_280;\n                    int64_t var_270;\n                    void* rax_117;\n                    int64_t* rcx_26;\n                    if (rax_20 <= 0x10a)\n                    {\n                        switch (rax_20)\n                        {\n                            case 0:\n                            {\n                                int64_t var_390_1 = rsi_11;\n                                int64_t var_398_1 = 0;\n                                sub_4110d0(stdout, \"sort\", \"GNU coreutils\", data_61c508);\n                                exit(0);\n                                /* no return */\n                            }\n                            case 1:\n                            {\n                                sub_40a0d0(0);\n                                /* no return */\n                            }\n                            case 0x84:\n                            {\n                                char* rdx_50 = data_61cd60;\n                                if (*rdx_50 != 0x2b)\n                                {\n                                    goto label_403ef7;\n                                }\n                                int64_t rax_156 = data_61c57c;\n                                if (rax_156 == rbx)\n                                {\n                                    var_340 = 0;\n                                }\n                                else\n                                {\n                                    rax_156 = rbp[rax_156];\n                                    var_340 = 0;\n                                    if (*rax_156 == 0x2d)\n                                    {\n                                        int32_t rax_234;\n                                        rax_234 = (*(rax_156 + 1) - 0x30) <= 9;\n                                        var_340 = rax_234;\n                                    }\n                                }\n                                rax_156 = var_350 == 0;\n                                bool temp3_1 = (var_380 | 0);\n                                var_380 = temp3_1;\n                                if (temp3_1 == 0)\n                                {\n                                    goto label_403ef7;\n                                }\n                                int64_t rcx_38 = 0x12;\n                                int64_t* rdi_61 = &var_288;\n                                for (; rcx_38 != 0; rcx_38 = (rcx_38 - 1))\n                                {\n                                    *rdi_61 = 0;\n                                    rdi_61 = (rdi_61 + 4);\n                                }\n                                var_278 = -1;\n                                char* rax_157;\n                                rax_157 = sub_407c00(&rdx_50[1], &var_288, nullptr);\n                                if (rax_157 == 0)\n                                {\n                                    rdx_50 = data_61cd60;\n                                    if ((var_288 | var_280) == 0)\n                                    {\n                                        var_288 = -1;\n                                    }\n                                    goto label_403ef7;\n                                }\n                                if (*rax_157 == 0x2e)\n                                {\n                                    rax_157 = sub_407c00(&rax_157[1], &var_280, nullptr);\n                                }\n                                if (((*rax_157 == 0x2e && (var_288 | var_280) == 0) || (*rax_157 != 0x2e && (var_288 | var_280) == 0)))\n                                {\n                                    var_288 = -1;\n                                }\n                                if ((((*rax_157 == 0x2e && (var_288 | var_280) == 0) || (*rax_157 != 0x2e && (var_288 | var_280) == 0)) || (*rax_157 == 0x2e && (var_288 | var_280) != 0)))\n                                {\n                                    if (rax_157 != 0)\n                                    {\n                                        goto label_404495;\n                                    }\n                                label_405244:\n                                    rdx_50 = data_61cd60;\n                                label_403ef7:\n                                    r13_3[r15_2] = rdx_50;\n                                    r15_2 = &r15_2[1];\n                                    continue;\n                                }\n                                if ((*rax_157 != 0x2e && (var_288 | var_280) != 0))\n                                {\n                                label_404495:\n                                    if (*sub_405c00(rax_157, &var_288, 0) != 0)\n                                    {\n                                        goto label_405244;\n                                    }\n                                }\n                                goto label_40453c;\n                            }\n                            case 0xc6:\n                            case 0xe6:\n                            {\n                            label_40355e:\n                                int32_t rax_23 = var_388;\n                                if ((rax_23 == 0 || (rax_23 != 0 && rax_23 == r14_4)))\n                                {\n                                    var_388 = r14_4;\n                                    continue;\n                                }\n                                goto label_40553a;\n                            }\n                            case 0xd0:\n                            case 0xd5:\n                            case 0xd9:\n                            case 0xe5:\n                            case 0xe7:\n                            case 0xe9:\n                            case 0xea:\n                            case 0xeb:\n                            case 0xec:\n                            case 0xf1:\n                            case 0xf5:\n                            {\n                                goto label_403509;\n                            }\n                            case 0xd6:\n                            {\n                                char* rdi_40 = data_61cd60;\n                                var_340 = rdi_40;\n                                var_330 = var_2f8;\n                                int32_t rax_121;\n                                rax_121 = sub_411b40(rdi_40, &var_158, 0xa, &var_1e8, \"EgGkKmMPtTYZ\");\n                                if (rax_121 != 0)\n                                {\n                                    if (rax_121 != 2)\n                                    {\n                                        goto label_4043a3;\n                                    }\n                                    uint64_t rdx_62 = var_158;\n                                    if ((*(rdx_62 - 1) - 0x30) > 9)\n                                    {\n                                        goto label_4043a3;\n                                    }\n                                    if (*(rdx_62 + 1) != 0)\n                                    {\n                                        goto label_4043a3;\n                                    }\n                                    char rdx_97 = *rdx_62;\n                                    if (rdx_97 == 0x25)\n                                    {\n                                        r8_2 = sub_40d840();\n                                        int64_t rax_238 = var_1e8;\n                                        if (rax_238 < 0)\n                                        {\n                                            zmm1 = ((rax_238 >> 1) | (rax_238 & 1));\n                                            zmm1 = (zmm1 + zmm1);\n                                        }\n                                        else\n                                        {\n                                            zmm1 = rax_238;\n                                        }\n                                        zmm0_3 = (zmm0_3 * zmm1);\n                                        zmm1 = 0x43f0000000000000;\n                                        zmm0_3 = (zmm0_3 / 100.0);\n                                        if (((zmm1 == zmm0_3 | (FCMP_UO(zmm1, zmm0_3))) || (zmm1 < zmm0_3 | (FCMP_UO(zmm1, zmm0_3)))))\n                                        {\n                                            goto label_40514b;\n                                        }\n                                        zmm1 = 0x43e0000000000000;\n                                        if ((zmm0_3 < zmm1 | (FCMP_UO(zmm0_3, zmm1))))\n                                        {\n                                            var_1e8 = (truncf(zmm0_3, argv));\n                                        }\n                                        else\n                                        {\n                                        label_40536f:\n                                            zmm0_3 = (zmm0_3 - zmm1);\n                                            var_1e8 = (truncf(zmm0_3, argv));\n                                            var_1e8 = (var_1e8 ^ 0x8000000000000000);\n                                        }\n                                        goto label_403f7f;\n                                    }\n                                    if (rdx_97 != 0x62)\n                                    {\n                                        goto label_4043a3;\n                                    }\n                                    goto label_403f7f;\n                                }\n                                if ((*(var_158 - 1) - 0x30) > 9)\n                                {\n                                    goto label_403f7f;\n                                }\n                                int64_t rax_125 = var_1e8;\n                                if (rax_125 > 0x3fffffffffffff)\n                                {\n                                label_40514b:\n                                    rax_121 = 1;\n                                label_4043a3:\n                                    sub_411ab0(rax_121, var_330, 0x53, &data_414b40, var_340);\n                                    /* no return */\n                                }\n                                var_1e8 = (rax_125 << 0xa);\n                            label_403f7f:\n                                int64_t rdx_51 = var_1e8;\n                                if (rdx_51 < data_61c778)\n                                {\n                                    continue;\n                                }\n                                else\n                                {\n                                    int64_t rax_128 = (data_61c420 * 0x22);\n                                    if (rax_128 < rdx_51)\n                                    {\n                                        rax_128 = rdx_51;\n                                    }\n                                    data_61c778 = rax_128;\n                                    continue;\n                                }\n                                break;\n                            }\n                            case 0xd7:\n                            {\n                                r8_2 = sub_40a010(data_61cd60);\n                                continue;\n                            }\n                            case 0xee:\n                            {\n                                int64_t rcx_24 = 0x12;\n                                int64_t* rdi_33 = &var_288;\n                                for (; rcx_24 != 0; rcx_24 = (rcx_24 - 1))\n                                {\n                                    *rdi_33 = 0;\n                                    rdi_33 = (rdi_33 + 4);\n                                }\n                                var_278 = -1;\n                                char* rax_115 = sub_407c00(data_61cd60, &var_288, \"invalid number at field start\");\n                                int64_t rdx_45 = var_288;\n                                var_288 = (rdx_45 - 1);\n                                if (rdx_45 == 0)\n                                {\n                                label_405530:\n                                    sub_405d30(data_61cd60, \"field number is zero\");\n                                label_40553a:\n                                    sub_405d00(&data_41667f);\n                                    sub_407dd0(var_368_1);\n                                    /* no return */\n                                }\n                                if (*rax_115 == 0x2e)\n                                {\n                                    rax_115 = sub_407c00(&rax_115[1], &var_280, \"invalid number after '.'\");\n                                    int64_t rdx_94 = var_280;\n                                    var_280 = (rdx_94 - 1);\n                                    if (rdx_94 == 0)\n                                    {\n                                        sub_405d30(data_61cd60, \"character offset is zero\");\n                                        goto label_4050ca;\n                                    }\n                                }\n                                if ((var_288 | var_280) == 0)\n                                {\n                                    var_288 = -1;\n                                }\n                                char* rax_116 = sub_405c00(rax_115, &var_288, 0);\n                                if (*rax_116 != 0x2c)\n                                {\n                                    var_278 = -1;\n                                    var_270 = 0;\n                                }\n                                else\n                                {\n                                    char* rax_228 = sub_407c00(&rax_116[1], var_348_1, \"invalid number after ','\");\n                                    int64_t rdx_93 = var_278;\n                                    var_278 = (rdx_93 - 1);\n                                    if (rdx_93 == 0)\n                                    {\n                                        goto label_405530;\n                                    }\n                                    if (*rax_228 == 0x2e)\n                                    {\n                                        rax_228 = sub_407c00(&rax_228[1], &var_270, \"invalid number after '.'\");\n                                    }\n                                    rax_116 = sub_405c00(rax_228, &var_288, 1);\n                                }\n                                if (*rax_116 != 0)\n                                {\n                                    void (* rdx_119)();\n                                    int64_t rsi_95;\n                                    int64_t rdi_149;\n                                    rdx_119 = sub_405d30(data_61cd60, \"stray character in field spec\");\n                                    /* tailcall */\n                                    return _start(rdi_149, rsi_95, rdx_119);\n                                }\n                                rax_117 = sub_411410(&var_288, 0x48);\n                                int64_t rdx_48 = data_61c750;\n                                rcx_26 = &data_61c750;\n                                for (; rdx_48 != 0; rdx_48 = *(rdx_48 + 0x40))\n                                {\n                                    rcx_26 = (rdx_48 + 0x40);\n                                }\n                                goto label_4042f4;\n                            }\n                            case 0xf0:\n                            {\n                                var_358_1 = 1;\n                                continue;\n                            }\n                            case 0xf2:\n                            {\n                                char* rdi_37 = var_368_1;\n                                char* rdx_49 = data_61cd60;\n                                int32_t rax_118;\n                                if (rdi_37 != 0)\n                                {\n                                    var_368_1 = rdx_49;\n                                    rax_118 = strcmp(rdi_37, rdx_49);\n                                    rdx_49 = var_368_1;\n                                }\n                                if ((rdi_37 == 0 || (rdi_37 != 0 && rax_118 == 0)))\n                                {\n                                    var_368_1 = rdx_49;\n                                    continue;\n                                }\n                                goto label_405501;\n                            }\n                            case 0xf6:\n                            {\n                                data_61c75a = 1;\n                                continue;\n                            }\n                            case 0xf7:\n                            {\n                                char* rdx_42 = data_61cd60;\n                                int32_t rax_113 = *rdx_42;\n                                if (rax_113 != 0)\n                                {\n                                    int32_t rax_114;\n                                    if (rdx_42[1] != 0)\n                                    {\n                                        var_340 = rdx_42;\n                                        rax_114 = strcmp(rdx_42, &data_416750);\n                                        if (rax_114 != 0)\n                                        {\n                                            error(2, 0, dcgettext(nullptr, \"multi-character tab %s\", 5), sub_40f880(var_340));\n                                        }\n                                        else\n                                        {\n                                            rax_113 = 0;\n                                        }\n                                    }\n                                    if (((rdx_42[1] != 0 && rax_114 == 0) || rdx_42[1] == 0))\n                                    {\n                                        int32_t rdx_44 = data_61c424;\n                                        if ((rdx_44 == 0x80 || (rdx_44 != 0x80 && rdx_44 == rax_113)))\n                                        {\n                                            data_61c424 = rax_113;\n                                            continue;\n                                        }\n                                    }\n                                    error(2, 0, dcgettext(nullptr, \"incompatible tabs\", 5));\n                                    goto label_4054bd;\n                                }\n                                char* rax_161 = sub_407c00(&error(2, 0, dcgettext(nullptr, \"empty tab\", 5))[1], &var_270, \"invalid number after '.'\");\n                                if (var_270 == 0)\n                                {\n                                    int64_t rdx_66 = var_278;\n                                    if (rdx_66 != 0)\n                                    {\n                                        var_278 = (rdx_66 - 1);\n                                    }\n                                }\n                                if (*sub_405c00(rax_161, &var_288, 1) != 0)\n                                {\n                                    sub_405d30(var_340, \"stray character in field spec\");\n                                    break;\n                                }\n                            label_40453c:\n                                char var_24f_1 = 1;\n                                rax_117 = sub_411410(&var_288, 0x48);\n                                int64_t rdx_68 = data_61c750;\n                                rcx_26 = &data_61c750;\n                                for (; rdx_68 != 0; rdx_68 = *(rdx_68 + 0x40))\n                                {\n                                    rcx_26 = (rdx_68 + 0x40);\n                                }\n                            label_4042f4:\n                                *rcx_26 = rax_117;\n                                *(rax_117 + 0x40) = 0;\n                                continue;\n                            }\n                            case 0xf8:\n                            {\n                                data_61c759 = 1;\n                                continue;\n                            }\n                            case 0xfc:\n                            {\n                                int64_t rcx_21 = data_61c57c;\n                                int64_t rdx_40 = data_61cd60;\n                                int32_t rax_111 = rcx_21;\n                                if (rbp[(rcx_21 - 1)] != rdx_40)\n                                {\n                                    continue;\n                                }\n                                else\n                                {\n                                    char rsi_32;\n                                    while (true)\n                                    {\n                                        int32_t rcx_22 = *rdx_40;\n                                        rsi_32 = rcx_22;\n                                        if ((rcx_22 - 0x30) > 9)\n                                        {\n                                            break;\n                                        }\n                                        rdx_40 = (rdx_40 + 1);\n                                    }\n                                    int32_t rdx_41;\n                                    rdx_41 = rsi_32 != 0;\n                                    data_61c57c = (rax_111 - rdx_41);\n                                    continue;\n                                }\n                                break;\n                            }\n                            case 0xfd:\n                            {\n                                data_61c500 = 0;\n                                continue;\n                            }\n                            case 0x103:\n                            {\n                                char* rsi_14 = data_61cd60;\n                                r14_4 = 0x63;\n                                if (rsi_14 != 0)\n                                {\n                                    int64_t rax_22;\n                                    rax_22 = sub_40a910(\"--check\", rsi_14, &data_414b20, &data_414b18, 1, data_61c510);\n                                    r14_4 = *(rax_22 + &data_414b18);\n                                }\n                                goto label_40355e;\n                            }\n                            case 0x104:\n                            {\n                                char* rdi_31 = data_61c748;\n                                char* rdx_39 = data_61cd60;\n                                int32_t rax_110;\n                                if (rdi_31 != 0)\n                                {\n                                    var_340 = rdx_39;\n                                    rax_110 = strcmp(rdi_31, rdx_39);\n                                    rdx_39 = var_340;\n                                }\n                                if ((rdi_31 == 0 || (rdi_31 != 0 && rax_110 == 0)))\n                                {\n                                    data_61c748 = rdx_39;\n                                    continue;\n                                }\n                                goto label_4054df;\n                            }\n                            case 0x105:\n                            {\n                                data_61c740 = 1;\n                                continue;\n                            }\n                            case 0x106:\n                            {\n                            label_403c74:\n                                var_378_1 = data_61cd60;\n                                continue;\n                            }\n                            case 0x107:\n                            {\n                                char* r10_2 = data_61cd60;\n                                var_330 = r10_2;\n                                var_328 = var_2f8;\n                                var_340 = sub_411b40(r10_2, nullptr, 0xa, &var_2c8, nullptr);\n                                int32_t rax_98;\n                                rax_98 = getrlimit(RLIMIT_NOFILE, &var_158);\n                                int32_t r11_2 = 0x11;\n                                r9_2 = var_340;\n                                if (rax_98 == 0)\n                                {\n                                    r11_2 = (var_158 - 3);\n                                }\n                                if (r9_2 == 0)\n                                {\n                                    char* rax_100 = var_2c8;\n                                    data_61c420 = rax_100;\n                                    if (rax_100 == rax_100)\n                                    {\n                                        if ((rax_100 > 1 && rax_100 <= r11_2))\n                                        {\n                                            continue;\n                                        }\n                                        if (rax_100 <= 1)\n                                        {\n                                            int64_t rbx_18 = *((var_328 << 5) + 0x414b40);\n                                            error(0, 0, dcgettext(nullptr, \"invalid --%s argument %s\", 5), rbx_18, sub_40f880(var_330));\n                                            error(2, 0, dcgettext(nullptr, \"minimum --%s argument is %s\", 5), rbx_18, sub_40f880(&data_41671b));\n                                        label_4055f0:\n                                            sub_405dd0(dcgettext(nullptr, \"open failed\", 5), var_368_1);\n                                            /* no return */\n                                        }\n                                    }\n                                }\n                                else if (r9_2 != 1)\n                                {\n                                    sub_411ab0(r9_2, var_328, 0x84, &data_414b40, var_330);\n                                    /* no return */\n                                }\n                                var_388 = r11_2;\n                                rbx = *((var_328 << 5) + 0x414b40);\n                                error(0, 0, dcgettext(nullptr, \"--%s argument %s too large\", 5), rbx, sub_40f880(var_330));\n                                rbp = sub_40d330(var_388, &var_1e8);\n                                r8_2 = error(2, 0, dcgettext(nullptr, \"maximum --%s argument with curre\u2026\", 5), rbx, rbp);\n                                goto label_403c74;\n                            }\n                            case 0x108:\n                            {\n                            label_403b24:\n                                char* rdx_35 = data_61cd60;\n                                int32_t rax_95;\n                                if (var_370_1 != 0)\n                                {\n                                    rax_95 = strcmp(var_370_1, rdx_35);\n                                }\n                                if ((var_370_1 == 0 || (var_370_1 != 0 && rax_95 == 0)))\n                                {\n                                    var_370_1 = rdx_35;\n                                    continue;\n                                }\n                            label_4054bd:\n                                error(2, 0, dcgettext(nullptr, \"multiple random sources specifie\u2026\", 5));\n                            label_4054df:\n                                error(2, 0, dcgettext(nullptr, \"multiple compress programs speci\u2026\", 5));\n                            label_405501:\n                                error(2, 0, dcgettext(nullptr, \"multiple output files specified\", 5));\n                            label_405506:\n                                if (var_388 == 0)\n                                {\n                                    var_388 = 0x6f;\n                                }\n                                data_61c408 = var_388;\n                                sub_405d00(&data_61c408);\n                                goto label_405530;\n                            }\n                            case 0x109:\n                            {\n                                int64_t rax_21;\n                                rax_21 = sub_40a910(\"--sort\", data_61cd60, &data_414ae0, \"ghMnRV\", 1, data_61c510);\n                                r14_4 = *\"ghMnRV\"[rax_21];\n                            label_403509:\n                                var_158 = r14_4;\n                                *var_158[1] = 0;\n                                sub_405c00(&var_158, &var_238, 2);\n                                continue;\n                            }\n                            case 0x10a:\n                            {\n                                char* rdi_26 = data_61cd60;\n                                var_340 = rdi_26;\n                                var_338_1 = var_2f8;\n                                int32_t rax_91;\n                                rax_91 = sub_411680(rdi_26, nullptr, 0xa, &var_158, &data_41655e[0x13]);\n                                if (rax_91 == 1)\n                                {\n                                    var_338_1 = -1;\n                                    continue;\n                                }\n                                else\n                                {\n                                    if (rax_91 != 0)\n                                    {\n                                        sub_411ab0(rax_91, var_338_1, 0x87, &data_414b40, var_340);\n                                        /* no return */\n                                    }\n                                    uint64_t rax_92 = var_158;\n                                    var_338_1 = rax_92;\n                                    if (rax_92 != 0)\n                                    {\n                                        continue;\n                                    }\n                                    else\n                                    {\n                                        r8_2 = error(2, 0, dcgettext(nullptr, \"number in parallel must be nonze\u2026\", 5));\n                                    }\n                                }\n                                goto label_403b24;\n                            }\n                        }\n                    }\n                label_405343:\n                    sub_40a0d0(2);\n                    /* no return */\n                }\n                if (r12 == 0)\n                {\n                    goto label_40349f;\n                }\n                rax_17 = data_61c57c;\n                if ((var_380 == 1 && var_388 == 0))\n                {\n                    if (rax_17 == rbx)\n                    {\n                        if (var_378_1 == 0)\n                        {\n                            var_388 = 0;\n                            while (true)\n                            {\n                                int64_t rcx_10 = data_61c750;\n                                char rax_186;\n                                uint64_t rdx_23;\n                                int64_t rsi_15;\n                                if (rcx_10 == 0)\n                                {\n                                    rax_186 = sub_405af0(&var_238);\n                                    if (rax_186 == 0)\n                                    {\n                                        void* rax_227;\n                                        rax_227 = sub_411410(&var_238, 0x48);\n                                        rdx_23 = data_61c750;\n                                        int64_t* rcx_61 = &data_61c750;\n                                        for (; rdx_23 != 0; rdx_23 = *(rdx_23 + 0x40))\n                                        {\n                                            rcx_61 = (rdx_23 + 0x40);\n                                        }\n                                        *rcx_61 = rax_227;\n                                        rcx_10 = data_61c750;\n                                        r12 = 1;\n                                        *(rax_227 + 0x40) = 0;\n                                        rbx = *zmm0[0xb];\n                                    }\n                                    else if (data_61c740 == 0)\n                                    {\n                                        data_61c75b = *zmm0[0xf];\n                                    }\n                                    else\n                                    {\n                                        r12 = 0;\n                                        rbx = 0;\n                                    }\n                                }\n                                else\n                                {\n                                    rsi_15 = rcx_10;\n                                    rbx = 0;\n                                    do\n                                    {\n                                        if ((sub_405af0(rsi_15) != 0 && *(rsi_15 + 0x37) == 0))\n                                        {\n                                            *(rsi_15 + 0x20) = *zmm0[8];\n                                            *(rsi_15 + 0x28) = zmm0;\n                                            *(rsi_15 + 0x30) = *zmm0[8];\n                                            *(rsi_15 + 0x31) = *zmm0[9];\n                                            *(rsi_15 + 0x36) = *zmm0[0xe];\n                                            *(rsi_15 + 0x32) = *zmm0[0xa];\n                                            *(rsi_15 + 0x34) = *zmm0[0xc];\n                                            *(rsi_15 + 0x35) = *zmm0[0xd];\n                                            *(rsi_15 + 0x37) = *zmm0[0xf];\n                                            *(rsi_15 + 0x38) = var_200;\n                                            uint32_t rax_33 = *zmm0[0xb];\n                                            *(rsi_15 + 0x33) = rax_33;\n                                            rsi_15 = *(rsi_15 + 0x40);\n                                            rbx = (rbx | rax_33);\n                                            if (rsi_15 == 0)\n                                            {\n                                                break;\n                                            }\n                                            continue;\n                                        }\n                                        uint32_t rax_35 = *(rsi_15 + 0x33);\n                                        rsi_15 = *(rsi_15 + 0x40);\n                                        rbx = (rbx | rax_35);\n                                    } while (rsi_15 != 0);\n                                    r12 = 0;\n                                }\n                                if (((rcx_10 == 0 && rax_186 == 0) || rcx_10 != 0))\n                                {\n                                    rsi_15 = *(rcx_10 + 0x20) != 0;\n                                    rdx_23 = ((*(rcx_10 + 0x33) | *(rcx_10 + 0x38)) | rsi_15);\n                                    if (((((*(rcx_10 + 0x32) + *(rcx_10 + 0x34)) + *(rcx_10 + 0x35)) + *(rcx_10 + 0x36)) + rdx_23) <= 1)\n                                    {\n                                        do\n                                        {\n                                            rcx_10 = *(rcx_10 + 0x40);\n                                            if (rcx_10 == 0)\n                                            {\n                                                break;\n                                            }\n                                            rdx_23 = (*(rcx_10 + 0x36) + ((*(rcx_10 + 0x32) + *(rcx_10 + 0x34)) + *(rcx_10 + 0x35)));\n                                            rsi_15 = *(rcx_10 + 0x20) != 0;\n                                        } while ((((*(rcx_10 + 0x38) | *(rcx_10 + 0x33)) | rsi_15) + rdx_23) <= 1);\n                                    }\n                                    if ((((((*(rcx_10 + 0x32) + *(rcx_10 + 0x34)) + *(rcx_10 + 0x35)) + *(rcx_10 + 0x36)) + rdx_23) > 1 || (((((*(rcx_10 + 0x32) + *(rcx_10 + 0x34)) + *(rcx_10 + 0x35)) + *(rcx_10 + 0x36)) + rdx_23) <= 1 && rcx_10 != 0)))\n                                    {\n                                        *(rcx_10 + 0x37) = 0;\n                                        *(rcx_10 + 0x30) = 0;\n                                        sub_405b50(rcx_10, &var_1e8);\n                                        rbx = sub_405d00(&var_1e8);\n                                        goto label_40536f;\n                                    }\n                                }\n                                int64_t var_1b8;\n                                if ((((rcx_10 == 0 && rax_186 != 0) && data_61c740 != 0) || ((((rcx_10 == 0 && rax_186 == 0) || (rcx_10 == 0 && rax_186 == 0)) || rcx_10 != 0) && data_61c740 != 0)))\n                                {\n                                    if (var_388 != 0)\n                                    {\n                                        goto label_405506;\n                                    }\n                                    if (var_368_1 != 0)\n                                    {\n                                        goto label_405506;\n                                    }\n                                    char* rax_49;\n                                    int64_t rcx_11;\n                                    int64_t rdx_27;\n                                    uint64_t r8_4;\n                                    ssize_t r9_5;\n                                    if (var_360 != 0)\n                                    {\n                                        rax_49 = setlocale(3, &data_41655e[0x13], rdx_23, rcx_10, r8_2, r9_2, var_388, var_380);\n                                    }\n                                    if ((var_360 == 0 || (var_360 != 0 && rax_49 == 0)))\n                                    {\n                                        rcx_11 = error(0, 0, \"%s\", dcgettext(nullptr, \"failed to set locale\", 5));\n                                    }\n                                    if (data_61cba1 != 0)\n                                    {\n                                        error(0, 0, dcgettext(nullptr, \"using %s sorting rules\", 5), sub_40f880(setlocale(3, nullptr, rdx_27, rcx_11, r8_4, r9_5, var_388, var_380)));\n                                    }\n                                    else\n                                    {\n                                        error(0, 0, \"%s\", dcgettext(nullptr, \"using simple byte comparison\", 5));\n                                    }\n                                    r14_4 = data_61c750;\n                                    int64_t* rdi_16 = &var_1e8;\n                                    int64_t rcx_13 = 0x12;\n                                    int64_t* rsi_16 = &var_238;\n                                    var_380 = &var_1e8;\n                                    rbp = 1;\n                                    for (; rcx_13 != 0; rcx_13 = (rcx_13 - 1))\n                                    {\n                                        *rdi_16 = *rsi_16;\n                                        rdi_16 = (rdi_16 + 4);\n                                        rsi_16 = (rsi_16 + 4);\n                                    }\n                                    char var_1b1;\n                                    if (r14_4 != 0)\n                                    {\n                                        var_340 = rbx;\n                                        int64_t rbx_2 = r14_4;\n                                        var_360 = &*var_2f8[1];\n                                        var_350 = r15_2;\n                                        var_348_1 = r13_3;\n                                        do\n                                        {\n                                            uint64_t r15_3 = *rbx_2;\n                                            int64_t r13_4 = *(rbx_2 + 0x10);\n                                            if (*(rbx_2 + 0x39) != 0)\n                                            {\n                                                void var_318;\n                                                void* rsi_17 = &var_318;\n                                                if (r15_3 == -1)\n                                                {\n                                                    r15_3 = 0;\n                                                }\n                                                var_2f8 = 0x2b;\n                                                char* rax_76 = __stpcpy_chk(var_360, sub_40d370(r15_3, rsi_17), 0x2d);\n                                                var_2c8 = 0x206b2d;\n                                                var_378_1 = __stpcpy_chk(&*var_2c8[3], sub_40d370((r15_3 + 1), &var_318), 0x2c);\n                                                if (*(rbx_2 + 0x10) != -1)\n                                                {\n                                                    void* rax_79 = sub_40d370((r13_4 + 1), &var_318);\n                                                    *rax_76 = 0x2d20;\n                                                    strcpy(&rax_76[2], rax_79);\n                                                    int64_t rdi_23;\n                                                    rdi_23 = *(rbx_2 + 0x18) == -1;\n                                                    char* rsi_24 = sub_40d370((rdi_23 + (r13_4 + 1)), &var_318);\n                                                    *var_378_1 = 0x2c;\n                                                    strcpy(&var_378_1[1], rsi_24);\n                                                }\n                                                r14_4 = sub_40f860(1, &var_2c8);\n                                                error(0, 0, dcgettext(nullptr, \"obsolescent key %s used; conside\u2026\", 5), sub_40f860(0, &var_2f8), r14_4);\n                                                r15_3 = *rbx_2;\n                                                r13_4 = *(rbx_2 + 0x10);\n                                            }\n                                            char rax_87 = r12;\n                                            if ((r15_3 != -1 && r13_4 < r15_3))\n                                            {\n                                                error(0, 0, dcgettext(nullptr, \"key %lu has zero width and will \u2026\", 5), rbp);\n                                                r13_4 = *(rbx_2 + 0x10);\n                                                rax_87 = 1;\n                                            }\n                                            uint32_t rsi_27 = 1;\n                                            int64_t rdx_28 = (0xffff00ff0000 & *(rbx_2 + 0x30));\n                                            if (rdx_28 == 0)\n                                            {\n                                                rsi_27 = *(rbx_2 + 0x36);\n                                            }\n                                            if ((((r13_4 != 0 || (r13_4 == 0 && *(rbx_2 + 0x18) == 0)) && rax_87 == 0) && data_61c424 == 0x80))\n                                            {\n                                                if (*(rbx_2 + 0x30) == 0)\n                                                {\n                                                    if (rsi_27 == 0)\n                                                    {\n                                                    label_403a86:\n                                                        error(0, 0, dcgettext(nullptr, \"leading blanks are significant i\u2026\", 5), rbp);\n                                                        rdx_28 = (0xffff00ff0000 & *(rbx_2 + 0x30));\n                                                    }\n                                                    else if (*(rbx_2 + 8) != 0)\n                                                    {\n                                                        goto label_403a86;\n                                                    }\n                                                }\n                                                if ((((*(rbx_2 + 0x30) != 0 || (*(rbx_2 + 0x30) == 0 && rsi_27 != 0)) && *(rbx_2 + 0x31) == 0) && *(rbx_2 + 0x18) != 0))\n                                                {\n                                                    goto label_403a86;\n                                                }\n                                            }\n                                            if ((((((r13_4 == 0 && *(rbx_2 + 0x18) != 0) && rax_87 == 0) || ((((r13_4 == 0 && *(rbx_2 + 0x18) != 0) && rax_87 != 0) || ((r13_4 != 0 || (r13_4 == 0 && *(rbx_2 + 0x18) == 0)) && rax_87 != 0)) && r12 == 0)) || ((r13_4 != 0 || (r13_4 == 0 && *(rbx_2 + 0x18) == 0)) && rax_87 == 0)) && rdx_28 != 0))\n                                            {\n                                                int64_t rdx_29 = (*(rbx_2 + 0x10) + 1);\n                                                int64_t rax_53 = *rbx_2;\n                                                int64_t rax_54 = (rax_53 + 1);\n                                                if (rax_53 == -1)\n                                                {\n                                                    rax_54 = 1;\n                                                }\n                                                if ((rdx_29 == 0 || (rdx_29 != 0 && rdx_29 > rax_54)))\n                                                {\n                                                    error(0, 0, dcgettext(nullptr, \"key %lu is numeric and spans mul\u2026\", 5), rbp);\n                                                }\n                                            }\n                                            int64_t var_1c8;\n                                            if ((var_1c8 != 0 && var_1c8 == *(rbx_2 + 0x20)))\n                                            {\n                                                var_1c8 = 0;\n                                            }\n                                            int64_t var_1c0;\n                                            if ((var_1c0 != 0 && var_1c0 == *(rbx_2 + 0x28)))\n                                            {\n                                                var_1c0 = 0;\n                                            }\n                                            rbp = (rbp + 1);\n                                            var_1b8 = (var_1b8 & (*(rbx_2 + 0x30) ^ 1));\n                                            *var_1b8[1] = (*var_1b8[1] & (*(rbx_2 + 0x31) ^ 1));\n                                            *var_1b8[6] = (*var_1b8[6] & (*(rbx_2 + 0x36) ^ 1));\n                                            *var_1b8[2] = (*var_1b8[2] & (*(rbx_2 + 0x32) ^ 1));\n                                            *var_1b8[4] = (*var_1b8[4] & (*(rbx_2 + 0x34) ^ 1));\n                                            *var_1b8[5] = (*var_1b8[5] & (*(rbx_2 + 0x35) ^ 1));\n                                            *var_1b8[3] = (*var_1b8[3] & (*(rbx_2 + 0x33) ^ 1));\n                                            char var_1b0 = (var_1b0 & (*(rbx_2 + 0x38) ^ 1));\n                                            char rax_73 = *(rbx_2 + 0x37);\n                                            rbx_2 = *(rbx_2 + 0x40);\n                                            var_1b1 = (var_1b1 & (rax_73 ^ 1));\n                                        } while (rbx_2 != 0);\n                                        r15_2 = var_350;\n                                        r13_3 = var_348_1;\n                                        rbx = var_340;\n                                    }\n                                    char rax_129 = sub_405af0(var_380);\n                                    char r12_1 = var_1b1;\n                                    if (rax_129 != 0)\n                                    {\n                                        if (r12_1 != 0)\n                                        {\n                                            if ((data_61c75a != 0 && data_61c750 != 0))\n                                            {\n                                                rbp = &var_2c8;\n                                                sub_405b50(var_380, &var_2c8);\n                                                char** rdi_122 = &var_2c8;\n                                                int64_t rcx_64 = -1;\n                                                while (rcx_64 != 0)\n                                                {\n                                                    bool cond:20_1 = 0 != *rdi_122;\n                                                    rdi_122 = (rdi_122 + 1);\n                                                    rcx_64 = (rcx_64 - 1);\n                                                    if ((!cond:20_1))\n                                                    {\n                                                        break;\n                                                    }\n                                                }\n                                                error(0, 0, dcngettext(nullptr, \"option '-%s' is ignored\", \"options '-%s' are ignored\", ((!rcx_64) - 1), 5), &var_2c8);\n                                                var_1b1 = 1;\n                                            }\n                                            if (((data_61c75a == 0 && data_61c759 != 0) && data_61c750 != 0))\n                                            {\n                                                rbp = &var_2c8;\n                                                sub_405b50(var_380, &var_2c8);\n                                                char** rdi_94 = &var_2c8;\n                                                int64_t rcx_45 = -1;\n                                                while (rcx_45 != 0)\n                                                {\n                                                    bool cond:22_1 = 0 != *rdi_94;\n                                                    rdi_94 = (rdi_94 + 1);\n                                                    rcx_45 = (rcx_45 - 1);\n                                                    if ((!cond:22_1))\n                                                    {\n                                                        break;\n                                                    }\n                                                }\n                                                error(0, 0, dcngettext(nullptr, \"option '-%s' is ignored\", \"options '-%s' are ignored\", ((!rcx_45) - 1), 5), &var_2c8);\n                                                var_1b1 = r12_1;\n                                            }\n                                        }\n                                    }\n                                    else\n                                    {\n                                        if ((data_61c75a == 0 && data_61c759 == 0))\n                                        {\n                                            char var_1b1_1 = 0;\n                                        }\n                                        rbp = &var_2c8;\n                                        sub_405b50(var_380, &var_2c8);\n                                        char** rdi_43 = &var_2c8;\n                                        int64_t rcx_29 = -1;\n                                        while (rcx_29 != 0)\n                                        {\n                                            bool cond:13_1 = 0 != *rdi_43;\n                                            rdi_43 = (rdi_43 + 1);\n                                            rcx_29 = (rcx_29 - 1);\n                                            if ((!cond:13_1))\n                                            {\n                                                break;\n                                            }\n                                        }\n                                        error(0, 0, dcngettext(nullptr, \"option '-%s' is ignored\", \"options '-%s' are ignored\", ((!rcx_29) - 1), 5), &var_2c8);\n                                        var_1b1 = r12_1;\n                                    }\n                                    if ((((((((rax_129 != 0 && r12_1 != 0) && data_61c75a == 0) && data_61c759 == 0) || ((((rax_129 != 0 && r12_1 != 0) && data_61c75a == 0) && data_61c759 != 0) && data_61c750 == 0)) || ((((rax_129 == 0 && r12_1 != 0) || (((rax_129 != 0 && r12_1 != 0) && data_61c75a != 0) && data_61c750 != 0)) || ((((rax_129 != 0 && r12_1 != 0) && data_61c75a == 0) && data_61c759 != 0) && data_61c750 != 0)) && data_61c75a == 0)) && data_61c759 == 0) && data_61c750 != 0))\n                                    {\n                                        error(0, 0, dcgettext(nullptr, \"option '-r' only applies to last\u2026\", 5));\n                                    }\n                                    goto label_404094;\n                                }\n                                int64_t* rax_134;\n                                if (((((rcx_10 == 0 && rax_186 == 0) || (rcx_10 == 0 && rax_186 == 0)) || rcx_10 != 0) && data_61c740 == 0))\n                                {\n                                label_404094:\n                                    data_61c75b = *zmm0[0xf];\n                                    if (rbx != 0)\n                                    {\n                                        FILE** rax_163 = sub_40f900(var_370_1, 0x10);\n                                        char const* const rsi_49 = \"open failed\";\n                                        rbx = rax_163;\n                                        int32_t rax_164;\n                                        if (rax_163 != 0)\n                                        {\n                                            var_380 = &var_1e8;\n                                            sub_40fc10(rbx, &var_1e8, 0x10);\n                                            rax_164 = sub_40fd70(rbx);\n                                            if (rax_164 != 0)\n                                            {\n                                                rsi_49 = \"close failed\";\n                                            }\n                                            else\n                                            {\n                                                sub_40aa90(&data_61c600);\n                                                rax_134 = sub_40b360(var_380, 0x10, &data_61c600);\n                                            }\n                                        }\n                                        if (((rax_163 != 0 && rax_164 != 0) || rax_163 == 0))\n                                        {\n                                            sub_405dd0(dcgettext(nullptr, rsi_49, 5), var_370_1);\n                                            /* no return */\n                                        }\n                                    }\n                                }\n                                if ((((rcx_10 == 0 && rax_186 != 0) && data_61c740 == 0) || ((((rcx_10 == 0 && rax_186 == 0) || (rcx_10 == 0 && rax_186 == 0)) || rcx_10 != 0) && data_61c740 == 0)))\n                                {\n                                    if (data_61c768 == 0)\n                                    {\n                                        char* rax_185 = getenv(\"TMPDIR\");\n                                        if (rax_185 == 0)\n                                        {\n                                            rax_185 = \"/tmp\";\n                                        }\n                                        sub_40a010(rax_185);\n                                    }\n                                    if (r15_2 != 0)\n                                    {\n                                        goto label_4040b9;\n                                    }\n                                    r15_2 = 1;\n                                    free(r13_3);\n                                    rax_134 = sub_411210(8);\n                                    r13_3 = rax_134;\n                                    *rax_134 = &data_41814a;\n                                label_4040b9:\n                                    int64_t rdx_54 = data_61c778;\n                                    if (rdx_54 != 0)\n                                    {\n                                        rax_134 = (data_61c420 * 0x22);\n                                        if (rax_134 < rdx_54)\n                                        {\n                                            rax_134 = rdx_54;\n                                        }\n                                        data_61c778 = rax_134;\n                                    }\n                                    uint32_t rax_149;\n                                    int64_t var_1d0;\n                                    if (var_388 == 0)\n                                    {\n                                        int64_t* rbp_5 = r13_3;\n                                        size_t rbx_8 = 0;\n                                        bool c_1 = false;\n                                        bool z_1 = (rbx ^ rbx) == 0;\n                                        void* const var_320 = &data_41814a;\n                                        size_t r14_7;\n                                        while (true)\n                                        {\n                                            char* rdx_70 = *rbp_5;\n                                            int64_t rcx_40 = 2;\n                                            void* const rdi_71 = &data_41814a;\n                                            char* rsi_51 = rdx_70;\n                                            while (rcx_40 != 0)\n                                            {\n                                                char temp9_1 = *rsi_51;\n                                                char temp10_1 = *rdi_71;\n                                                c_1 = temp9_1 < temp10_1;\n                                                z_1 = temp9_1 == temp10_1;\n                                                rsi_51 = &rsi_51[1];\n                                                rdi_71 = (rdi_71 + 1);\n                                                rcx_40 = (rcx_40 - 1);\n                                                if ((!z_1))\n                                                {\n                                                    break;\n                                                }\n                                            }\n                                            rax_134 = ((!z_1) && (!c_1));\n                                            rax_134 = (rax_134 - 0);\n                                            if (rax_134 != 0)\n                                            {\n                                                rax_134 = euidaccess(rdx_70, 4);\n                                                if (rax_134 != 0)\n                                                {\n                                                    break;\n                                                }\n                                            }\n                                            r14_7 = (rbx_8 + 1);\n                                            rbp_5 = &rbp_5[1];\n                                            c_1 = r15_2 < r14_7;\n                                            z_1 = r15_2 == r14_7;\n                                            if (z_1)\n                                            {\n                                                break;\n                                            }\n                                            rbx_8 = r14_7;\n                                        }\n                                        uint64_t rbx_16;\n                                        char const* const rsi_84;\n                                        if ((rax_134 != 0 && rax_134 != 0))\n                                        {\n                                            rbx_16 = *rbp_5;\n                                            rsi_84 = \"cannot read\";\n                                        label_40542b:\n                                            sub_405dd0(dcgettext(nullptr, rsi_84, 5), rbx_16);\n                                            /* no return */\n                                        }\n                                        if (var_368_1 != 0)\n                                        {\n                                            int32_t rax_169 = open(var_368_1, 0x80041, 0x1b6);\n                                            if (rax_169 < 0)\n                                            {\n                                                goto label_4055f0;\n                                            }\n                                            if (rax_169 != 1)\n                                            {\n                                                sub_408e10(rax_169);\n                                            }\n                                        }\n                                        if (var_358_1 != 0)\n                                        {\n                                            void** rax_223 = sub_4113e0(r14_7, 0x10);\n                                            int64_t rdx_86 = 0;\n                                            while (true)\n                                            {\n                                                rax_223[(rdx_86 * 2)] = r13_3[rdx_86];\n                                                int64_t rcx_58 = (rdx_86 + 1);\n                                                if (rdx_86 == rbx_8)\n                                                {\n                                                    break;\n                                                }\n                                                rdx_86 = rcx_58;\n                                            }\n                                            sub_409330(rax_223, 0, r14_7, var_368_1, r15_2);\n                                        }\n                                        else\n                                        {\n                                            if (var_338_1 == 0)\n                                            {\n                                                uint64_t rax_235 = sub_40d6f0(2);\n                                                uint64_t rdx_96 = 8;\n                                                if (rax_235 <= 8)\n                                                {\n                                                    rdx_96 = rax_235;\n                                                }\n                                                var_338_1 = rdx_96;\n                                            }\n                                            var_328 = r13_3;\n                                            uint64_t rax_170 = 0xffffffffffffff;\n                                            char* var_2b0 = nullptr;\n                                            var_358_1 = r14_7;\n                                            if (var_338_1 <= 0xffffffffffffff)\n                                            {\n                                                rax_170 = var_338_1;\n                                            }\n                                            void* r15_6 = nullptr;\n                                            var_360 = rax_170;\n                                            var_350 = (rax_170 << 8);\n                                            var_348_1 = (rax_170 + rax_170);\n                                            void var_1e0;\n                                            var_340 = &var_1e0;\n                                            FILE* rax_174;\n                                            int32_t rax_202;\n                                            while (true)\n                                            {\n                                                char* rax_173 = *var_328;\n                                                var_380 = rax_173;\n                                                rax_174 = sub_407cd0(rax_173, &data_4168fa);\n                                                var_388 = rax_174;\n                                                if (rax_174 == 0)\n                                                {\n                                                    break;\n                                                }\n                                                var_330 = 0x30;\n                                                if (var_338_1 > 1)\n                                                {\n                                                    int64_t rdx_78 = 1;\n                                                    int64_t rax_195 = 1;\n                                                    do\n                                                    {\n                                                        rax_195 = (rax_195 + rax_195);\n                                                        rdx_78 = (rdx_78 + 1);\n                                                    } while (var_360 > rax_195);\n                                                    var_330 = (rdx_78 << 5);\n                                                }\n                                                char** var_370_4 = &var_2c8;\n                                                if (var_2b0 == 0)\n                                                {\n                                                    r13_3 = var_358_1;\n                                                    var_370_1 = r15_6;\n                                                    r15_2 = var_2b0;\n                                                    rbp = &var_330[1];\n                                                    rbx = &var_330[2];\n                                                    while (true)\n                                                    {\n                                                        bool c_2 = false;\n                                                        bool z_2 = (r15_2 & r15_2) == 0;\n                                                        if (z_2)\n                                                        {\n                                                            rax_202 = __fxstat(1, fileno(var_388), &var_1e8) != 0;\n                                                        }\n                                                        else\n                                                        {\n                                                            void* const rdi_99 = var_320;\n                                                            int64_t rcx_52 = 2;\n                                                            int64_t* rdx_82 = &var_1e8;\n                                                            char* r9_8 = *(var_328 + (r15_2 << 3));\n                                                            char* rsi_63 = r9_8;\n                                                            while (rcx_52 != 0)\n                                                            {\n                                                                char temp12_1 = *rsi_63;\n                                                                char temp13_1 = *rdi_99;\n                                                                c_2 = temp12_1 < temp13_1;\n                                                                z_2 = temp12_1 == temp13_1;\n                                                                rsi_63 = &rsi_63[1];\n                                                                rdi_99 = (rdi_99 + 1);\n                                                                rcx_52 = (rcx_52 - 1);\n                                                                if ((!z_2))\n                                                                {\n                                                                    break;\n                                                                }\n                                                            }\n                                                            int64_t rax_201;\n                                                            rax_201 = ((!z_2) && (!c_2));\n                                                            rax_201 = (rax_201 - 0);\n                                                            if (rax_201 != 0)\n                                                            {\n                                                                rax_202 = __xstat(1, r9_8, rdx_82) != 0;\n                                                            }\n                                                            else\n                                                            {\n                                                                rax_202 = __fxstat(1, 0, rdx_82) != 0;\n                                                            }\n                                                        }\n                                                        if (rax_202 != 0)\n                                                        {\n                                                            rsi_84 = \"stat failed\";\n                                                            rbx_16 = *(var_328 + (r15_2 << 3));\n                                                            break;\n                                                        }\n                                                        int64_t rsi_62;\n                                                        if ((var_1d0 & 0xf000) != 0x8000)\n                                                        {\n                                                            rsi_62 = data_61c778;\n                                                            if (rsi_62 == 0)\n                                                            {\n                                                                r12 = 0x20000;\n                                                                if (data_61c5e0 != 0)\n                                                                {\n                                                                    goto label_404bd9;\n                                                                }\n                                                            }\n                                                        }\n                                                        else\n                                                        {\n                                                            r12 = var_1b8;\n                                                            if (data_61c5e0 != 0)\n                                                            {\n                                                            label_404bd9:\n                                                                rsi_62 = data_61c5e0;\n                                                                int64_t rcx_51 = ((rbp * r12) + 1);\n                                                                if ((r12 == (COMBINE(0, rcx_51) / rbp) && rcx_51 < (rsi_62 - rbx)))\n                                                                {\n                                                                    r15_2 = &r15_2[1];\n                                                                    rbx = (rbx + rcx_51);\n                                                                    if (r15_2 >= r13_3)\n                                                                    {\n                                                                        r15_6 = var_370_1;\n                                                                    label_404fac:\n                                                                        var_370_4 = &var_2c8;\n                                                                        sub_405e30(&var_2c8, var_330, rbx);\n                                                                        break;\n                                                                    }\n                                                                    continue;\n                                                                }\n                                                            }\n                                                        }\n                                                        if ((((var_1d0 & 0xf000) != 0x8000 && rsi_62 != 0) || ((var_1d0 & 0xf000) == 0x8000 && data_61c5e0 != 0)))\n                                                        {\n                                                            r15_6 = var_370_1;\n                                                            rbx = rsi_62;\n                                                            goto label_404fac;\n                                                        }\n                                                        if (((var_1d0 & 0xf000) == 0x8000 && data_61c5e0 == 0))\n                                                        {\n                                                            int64_t rax_205 = data_61c778;\n                                                            data_61c5e0 = rax_205;\n                                                            if (rax_205 != 0)\n                                                            {\n                                                                goto label_404bd9;\n                                                            }\n                                                        }\n                                                        if ((((var_1d0 & 0xf000) != 0x8000 && rsi_62 == 0) || ((var_1d0 & 0xf000) == 0x8000 && data_61c5e0 == 0)))\n                                                        {\n                                                            int64_t r14_10 = -1;\n                                                            if (getrlimit(RLIMIT_DATA, &var_2f8) == 0)\n                                                            {\n                                                                r14_10 = var_2f8;\n                                                            }\n                                                            if (getrlimit(RLIMIT_AS, &var_2f8) == 0)\n                                                            {\n                                                                int64_t rax_208 = var_2f8;\n                                                                if (r14_10 > rax_208)\n                                                                {\n                                                                    r14_10 = rax_208;\n                                                                }\n                                                            }\n                                                            int64_t r14_11 = (r14_10 >> 1);\n                                                            if (getrlimit(__RLIMIT_RSS, &var_2f8) == 0)\n                                                            {\n                                                                int64_t rax_212 = ((var_2f8 >> 4) * 0xf);\n                                                                if (r14_11 > rax_212)\n                                                                {\n                                                                    r14_11 = rax_212;\n                                                                }\n                                                            }\n                                                            int64_t zmm0_1 = sub_40d900();\n                                                            double zmm0_2 = sub_40d840();\n                                                            double zmm2_1 = (0.125 * zmm0_2);\n                                                            zmm0_2 = (zmm0_2 * 0.75);\n                                                            zmm1 = _mm_max_sd(zmm0_1, zmm2_1);\n                                                            zmm2_1 = r14_11;\n                                                            if ((!((zmm2_1 == zmm0_2 | (FCMP_UO(zmm2_1, zmm0_2))) || (zmm2_1 < zmm0_2 | (FCMP_UO(zmm2_1, zmm0_2))))))\n                                                            {\n                                                                zmm2_1 = 9.2233720368547758e+18;\n                                                                if ((zmm0_2 < zmm2_1 | (FCMP_UO(zmm0_2, zmm2_1))))\n                                                                {\n                                                                    r14_11 = (truncf(zmm0_2, argv));\n                                                                }\n                                                                else\n                                                                {\n                                                                    zmm0_2 = (zmm0_2 - zmm2_1);\n                                                                    r14_11 = ((truncf(zmm0_2, argv)) ^ 0x8000000000000000);\n                                                                }\n                                                            }\n                                                            if (r14_11 < 0)\n                                                            {\n                                                                zmm0_2 = ((r14_11 >> 1) | (r14_11 & 1));\n                                                                zmm0_2 = (zmm0_2 + zmm0_2);\n                                                            }\n                                                            else\n                                                            {\n                                                                zmm0_2 = r14_11;\n                                                            }\n                                                            if ((!((zmm0_2 == zmm1 | (FCMP_UO(zmm0_2, zmm1))) || (zmm0_2 < zmm1 | (FCMP_UO(zmm0_2, zmm1))))))\n                                                            {\n                                                                zmm0_2 = 9.2233720368547758e+18;\n                                                                if ((zmm1 < zmm0_2 | (FCMP_UO(zmm1, zmm0_2))))\n                                                                {\n                                                                label_4050ca:\n                                                                    r14_11 = (truncf(zmm1, argv));\n                                                                }\n                                                                else\n                                                                {\n                                                                    zmm1 = (zmm1 - zmm0_2);\n                                                                    r14_11 = ((truncf(zmm1, argv)) ^ 0x8000000000000000);\n                                                                }\n                                                            }\n                                                            int64_t rax_214 = (data_61c420 * 0x22);\n                                                            if (rax_214 < r14_11)\n                                                            {\n                                                                rax_214 = r14_11;\n                                                            }\n                                                            data_61c5e0 = rax_214;\n                                                            goto label_404bd9;\n                                                        }\n                                                    }\n                                                    if (rax_202 != 0)\n                                                    {\n                                                        break;\n                                                    }\n                                                }\n                                                char var_298_1 = 0;\n                                                var_358_1 = (var_358_1 - 1);\n                                                while (true)\n                                                {\n                                                    if (sub_4074d0(var_370_4, var_388, var_380) == 0)\n                                                    {\n                                                        break;\n                                                    }\n                                                    data_61cb80 = 0;\n                                                    int128_t* rbx_13 = (var_2b0 + var_2c8);\n                                                    r15_6 = (r15_6 + 1);\n                                                    char* rbp_6 = (sub_4090c0(&var_2f8, 0) + 0xd);\n                                                    int64_t var_2b8;\n                                                    if (var_2b8 > 1)\n                                                    {\n                                                        var_1e8 = sub_40cfd0(0x407850, var_348_1);\n                                                        pthread_mutex_init(var_340, nullptr);\n                                                        pthread_cond_init(&var_1b8, nullptr);\n                                                        int64_t* rax_176 = sub_411210(var_350);\n                                                        rax_176[6] = var_2b8;\n                                                        rax_176[5] = var_2b8;\n                                                        rax_176[3] = 0;\n                                                        rax_176[2] = 0;\n                                                        rax_176[1] = 0;\n                                                        *rax_176 = 0;\n                                                        rax_176[4] = 0;\n                                                        rax_176[7] = 0;\n                                                        rax_176[0xa] = 0;\n                                                        *(rax_176 + 0x54) = 0;\n                                                        pthread_mutex_init(&rax_176[0xb], nullptr);\n                                                        sub_4061f0(rax_176, &rax_176[0x10], rbx_13, var_360, var_2b8, 0);\n                                                        sub_409880(rbx_13, var_360, var_2b8, &rax_176[0x10], &var_1e8, var_2f8, rbp_6);\n                                                    }\n                                                    else\n                                                    {\n                                                        sub_4085d0(&rbx_13[-2], var_2f8, rbp_6);\n                                                    }\n                                                    sub_407df0(var_2f8, rbp_6);\n                                                }\n                                                sub_407df0(var_388, var_380);\n                                                if (var_358_1 == 0)\n                                                {\n                                                    break;\n                                                }\n                                                var_328 = (var_328 + 8);\n                                            }\n                                            if (((rax_174 != 0 && var_2b0 == 0) && rax_202 != 0))\n                                            {\n                                                goto label_40542b;\n                                            }\n                                            if (rax_174 == 0)\n                                            {\n                                                break;\n                                            }\n                                            free(var_2c8);\n                                            int64_t rbx_14 = data_61c6a8;\n                                            int64_t rax_224;\n                                            bool rdx_88;\n                                            rdx_88 = HIGHD((0x10 * r15_6));\n                                            rax_224 = LOWD((0x10 * r15_6));\n                                            uint64_t rdx_89 = ((0x10 * r15_6) >> 0x40) != 0;\n                                            if (rax_224 < 0)\n                                            {\n                                                goto label_4057e1;\n                                            }\n                                            if (rdx_89 != 0)\n                                            {\n                                                goto label_4057e1;\n                                            }\n                                            void** rax_225 = sub_411210((r15_6 << 4));\n                                            void** rdx_90 = rax_225;\n                                            while (rbx_14 != 0)\n                                            {\n                                                int64_t rax_226 = (rbx_14 + 0xd);\n                                                rdx_90[1] = rbx_14;\n                                                rbx_14 = *rbx_14;\n                                                rdx_90 = &rdx_90[2];\n                                                rdx_90[-2] = rax_226;\n                                            }\n                                            sub_409330(rax_225, r15_6, r15_6, var_368_1, r15_6);\n                                            free(rax_225);\n                                            if (data_61c69c > 0)\n                                            {\n                                                do\n                                                {\n                                                    sub_405fb0(0xffffffff);\n                                                } while (data_61c69c > 0);\n                                            }\n                                        }\n                                        if ((data_61c758 != 0 && sub_411f80(stdin) == 0xffffffff))\n                                        {\n                                            sub_405dd0(dcgettext(nullptr, \"close failed\", 5), &data_41814a);\n                                            /* no return */\n                                        }\n                                        rax_149 = 0;\n                                    }\n                                    else if (r15_2 <= 1)\n                                    {\n                                        FILE* rax_136;\n                                        if (var_368_1 != 0)\n                                        {\n                                            data_61c400 = var_388;\n                                            sub_405d00(0x61c400);\n                                        }\n                                        else\n                                        {\n                                            r13_3 = *r13_3;\n                                            rax_136 = sub_407cd0(r13_3, &data_4168fa);\n                                        }\n                                        if ((var_368_1 != 0 || (var_368_1 == 0 && rax_136 == 0)))\n                                        {\n                                            sub_407dd0(r13_3);\n                                            /* no return */\n                                        }\n                                        if ((var_368_1 == 0 && rax_136 != 0))\n                                        {\n                                            int64_t rax_137 = data_61c750;\n                                            char rbx_4 = (data_61c759 ^ 1);\n                                            int64_t rax_138 = data_61c428;\n                                            if (data_61c778 >= rax_138)\n                                            {\n                                                rax_138 = data_61c778;\n                                            }\n                                            uint32_t rbx_5 = rbx_4;\n                                            uint64_t r12_2 = 0;\n                                            var_380 = &var_1e8;\n                                            sub_405e30(&var_1e8, 0x20, rax_138);\n                                            var_2c8 = nullptr;\n                                            int64_t var_378_2 = 0;\n                                            char rbx_6;\n                                            while (true)\n                                            {\n                                                if (sub_4074d0(var_380, rax_136, r13_3) == 0)\n                                                {\n                                                    rbx_6 = 1;\n                                                    break;\n                                                }\n                                                void* rdi_48 = (var_1d0 + var_1e8);\n                                                int64_t* r15_5 = (rdi_48 - 0x20);\n                                                int64_t var_1d8;\n                                                void* rbp_3 = (rdi_48 - (var_1d8 << 5));\n                                                int32_t rax_148;\n                                                if (r12_2 != 0)\n                                                {\n                                                    rax_148 = sub_4082a0(&var_2c8, r15_5);\n                                                }\n                                                if ((r12_2 == 0 || (r12_2 != 0 && rbx_5 > rax_148)))\n                                                {\n                                                    int32_t rax_142;\n                                                    do\n                                                    {\n                                                        int64_t* rdi_49 = r15_5;\n                                                        if (rbp_3 >= r15_5)\n                                                        {\n                                                            break;\n                                                        }\n                                                        r15_5 = (r15_5 - 0x20);\n                                                        rax_142 = sub_4082a0(rdi_49, r15_5);\n                                                    } while (rbx_5 > rax_142);\n                                                    if (rbp_3 >= r15_5)\n                                                    {\n                                                        uint64_t rdx_57 = r15_5[1];\n                                                        var_378_2 = (var_378_2 + var_1d8);\n                                                        if (r12_2 < rdx_57)\n                                                        {\n                                                            do\n                                                            {\n                                                                uint64_t temp14_1 = r12_2;\n                                                                uint64_t temp15_1 = r12_2;\n                                                                r12_2 = (r12_2 + r12_2);\n                                                                if (temp14_1 == (-temp15_1))\n                                                                {\n                                                                    r12_2 = rdx_57;\n                                                                    break;\n                                                                }\n                                                            } while (rdx_57 > r12_2);\n                                                            free(var_2c8);\n                                                            rdx_57 = r15_5[1];\n                                                            var_2c8 = sub_411210(r12_2);\n                                                        }\n                                                        memcpy(var_2c8, *r15_5, rdx_57);\n                                                        int64_t var_2c0_1 = r15_5[1];\n                                                        if (rax_137 == 0)\n                                                        {\n                                                            continue;\n                                                        }\n                                                        else\n                                                        {\n                                                            char* rax_144 = var_2c8;\n                                                            int64_t rcx_33 = *r15_5;\n                                                            void* var_2b8_1 = (&rax_144[r15_5[2]] - rcx_33);\n                                                            void* var_2b0_1 = (&rax_144[r15_5[3]] - rcx_33);\n                                                            continue;\n                                                        }\n                                                    }\n                                                }\n                                                rbx_6 = 0;\n                                                if (var_388 == 0x63)\n                                                {\n                                                    __fprintf_chk(stderr, 1, dcgettext(nullptr, \"%s: %s:%s: disorder: \", 5), data_61cbc8, r13_3, sub_40d370(((((var_1d0 + var_1e8) - r15_5) >> 5) + var_378_2), &var_2f8), var_388, var_380, var_378_2, rax_137, var_368_1, var_360, var_358_1, var_350, var_348_1, var_340, var_338_1, var_330, var_328);\n                                                    sub_407e70(r15_5, stderr, dcgettext(nullptr, \"standard error\", 5));\n                                                }\n                                                break;\n                                            }\n                                            sub_407df0(rax_136, r13_3);\n                                            free(var_1e8);\n                                            free(var_2c8);\n                                            rax_149 = (rbx_6 ^ 1);\n                                        }\n                                    }\n                                    else\n                                    {\n                                        rbx = sub_40f630(4, r13_3[1]);\n                                        r8_2 = error(2, 0, dcgettext(nullptr, \"extra operand %s not allowed wit\u2026\", 5), rbx, var_388);\n                                    label_405643:\n                                        if (var_378_1 != 0)\n                                        {\n                                            if (r15_2 != 0)\n                                            {\n                                                goto label_4052e8;\n                                            }\n                                            FILE* rax_275 = sub_407cd0(var_378_1, &data_4168fa);\n                                            if (rax_275 != 0)\n                                            {\n                                                sub_4103a0(&var_158);\n                                                char rax_276 = sub_410440(rax_275, &var_158);\n                                                char* rsi_90 = var_378_1;\n                                                bool z_6;\n                                                if (rax_276 != 0)\n                                                {\n                                                    sub_407df0(rax_275, rsi_90);\n                                                    rbx = var_158;\n                                                    bool c_9 = false;\n                                                    z_6 = (rbx & rbx) == 0;\n                                                    if (z_6)\n                                                    {\n                                                        rsi_90 = error(2, 0, dcgettext(nullptr, \"no input from %s\", 5), sub_40f630(4, var_378_1));\n                                                    }\n                                                    else\n                                                    {\n                                                        r9_2 = free(r13_3);\n                                                        r13_3 = var_150;\n                                                        r8_2 = &data_41814a;\n                                                    label_4056e2:\n                                                        uint64_t rdx_113 = r13_3[r15_2];\n                                                        int64_t rcx_73 = 2;\n                                                        void* const rdi_144 = &data_41814a;\n                                                        uint64_t rsi_91 = rdx_113;\n                                                    label_4056f2:\n                                                        if (rcx_73 != 0)\n                                                        {\n                                                            char temp5_1 = *rsi_91;\n                                                            char temp6_1 = *rdi_144;\n                                                            c_9 = temp5_1 < temp6_1;\n                                                            z_6 = temp5_1 == temp6_1;\n                                                            rsi_91 = (rsi_91 + 1);\n                                                            rdi_144 = (rdi_144 + 1);\n                                                            rcx_73 = (rcx_73 - 1);\n                                                            if (z_6)\n                                                            {\n                                                                goto label_4056f2;\n                                                            }\n                                                        }\n                                                        if ((((!z_6) && (!c_9)) - 0) == 0)\n                                                        {\n                                                            error(2, 0, dcgettext(nullptr, \"when reading file names from std\u2026\", 5), sub_40f630(4, rdx_113));\n                                                        }\n                                                        else\n                                                        {\n                                                            r15_2 = &r15_2[1];\n                                                            if (*rdx_113 != 0)\n                                                            {\n                                                                c_9 = rbx < r15_2;\n                                                                z_6 = rbx == r15_2;\n                                                                if ((!z_6))\n                                                                {\n                                                                    goto label_4056e2;\n                                                                }\n                                                                continue;\n                                                            }\n                                                        }\n                                                        error(2, 0, dcgettext(nullptr, \"%s:%lu: invalid zero-length file\u2026\", 5), sub_40f700(0, 3, var_378_1), r15_2);\n                                                    }\n                                                }\n                                                if (((rax_276 != 0 && z_6) || rax_276 == 0))\n                                                {\n                                                    error(2, 0, dcgettext(nullptr, \"cannot read file names from %s\", 5), sub_40f630(4, rsi_90));\n                                                    goto label_4057e1;\n                                                }\n                                            }\n                                            sub_407dd0(var_378_1);\n                                            /* no return */\n                                        }\n                                        continue;\n                                    }\n                                    return rax_149;\n                                }\n                            }\n                            break;\n                        }\n                    label_4052e8:\n                        error(0, 0, dcgettext(nullptr, \"extra operand %s\", 5), sub_40f630(4, *r13_3));\n                        __fprintf_chk(stderr, 1, \"%s\\n\", dcgettext(nullptr, \"file operands cannot be combined\u2026\", 5));\n                        goto label_405343;\n                    }\n                    char* rdx_13 = rbp[rax_17];\n                    if ((*rdx_13 == 0x2d && rdx_13[1] == 0x6f))\n                    {\n                        if (rdx_13[2] != 0)\n                        {\n                            goto label_40349f;\n                        }\n                        if ((rax_17 + 1) != rbx)\n                        {\n                            goto label_40349f;\n                        }\n                    }\n                }\n            }\n            if (rbx <= rax_17)\n            {\n                goto label_405643;\n            }\n            int64_t rax_18 = rbp[rax_17];\n            data_61c57c = (rax_17 + 1);\n            r13_3[r15_2] = rax_18;\n            r15_2 = &r15_2[1];\n        }\n        sub_407dd0(var_380);\n        /* no return */\n    }\nlabel_4057e1:\n    sub_411460();\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "_start",
            "funcStartAddr": "0x405830",
            "funcEndAddr": "0x40585a",
            "decompiledFuncCode": "int64_t _start(int64_t arg1, int64_t arg2, void (* arg3)()) __noreturn\n{\n    int64_t rax;\n    int64_t var_8 = rax;\n    __libc_start_main(main, __return_addr, &arg_8, init, fini, arg3, &var_8);\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_40585b",
            "funcStartAddr": "0x40585b",
            "funcEndAddr": "0x40587a",
            "decompiledFuncCode": "void sub_40585b()\n{\n    return;\n}\n\n"
        },
        {
            "funcName": "sub_40587a",
            "funcStartAddr": "0x40587a",
            "funcEndAddr": "0x4058b1",
            "decompiledFuncCode": "int64_t sub_40587a()\n{\n    int64_t rax;\n    int64_t rdx;\n    rdx = HIGHD(0);\n    rax = LOWD(0);\n    return (COMBINE(rdx, rax) / 2);\n}\n\n"
        },
        {
            "funcName": "sub_4058b1",
            "funcStartAddr": "0x4058b1",
            "funcEndAddr": "0x405908",
            "decompiledFuncCode": "void sub_4058b1()\n{\n    if (data_61c5c8 != 0)\n    {\n        return;\n    }\n    while (true)\n    {\n        int64_t rax_1 = data_61c5d0;\n        if (rax_1 >= 0)\n        {\n            break;\n        }\n        data_61c5d0 = (rax_1 + 1);\n        *(0x61be30 + ((rax_1 + 1) << 3))();\n    }\n    sub_40585b();\n    data_61c5c8 = 1;\n}\n\n"
        },
        {
            "funcName": "thunk_405908",
            "funcStartAddr": "0x405908",
            "funcEndAddr": "0x40590d",
            "decompiledFuncCode": "int64_t j_sub_40587a()\n{\n    /* tailcall */\n    return sub_40587a();\n}\n\n"
        },
        {
            "funcName": "sub_405910",
            "funcStartAddr": "0x405910",
            "funcEndAddr": "0x40591d",
            "decompiledFuncCode": "uint64_t sub_405910(void* arg1, int64_t arg2)\n{\n    return (COMBINE(0, *(arg1 + 8)) % arg2);\n}\n\n"
        },
        {
            "funcName": "sub_405920",
            "funcStartAddr": "0x405920",
            "funcEndAddr": "0x40592a",
            "decompiledFuncCode": "uint64_t sub_405920(void* arg1, void* arg2)\n{\n    uint64_t rax;\n    rax = *(arg1 + 8) == *(arg2 + 8);\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_405930",
            "funcStartAddr": "0x405930",
            "funcEndAddr": "0x4059e8",
            "decompiledFuncCode": "uint64_t sub_405930(int64_t* arg1)\n{\n    char* rcx = *arg1;\n    int32_t r11 = data_61cba4;\n    char r10 = 0;\n    uint64_t rax = 0;\n    uint32_t rdx = *rcx;\n    void* rsi_1;\n    uint32_t r8_2;\n    while (true)\n    {\n        r8_2 = rdx;\n        rsi_1 = &rcx[1];\n        if ((r8_2 - 0x30) > 9)\n        {\n            break;\n        }\n        int32_t r8_1 = rcx[1];\n        if (rax < rdx)\n        {\n            rax = rdx;\n        }\n        r10 = 0;\n        rdx = r8_1;\n        if (r8_1 == r11)\n        {\n            rdx = rcx[2];\n            rsi_1 = &rcx[2];\n            r10 = 1;\n        }\n        rcx = rsi_1;\n    }\n    if (r10 != 0)\n    {\n        *arg1 = (rcx - 1);\n        return rax;\n    }\n    if (r8_2 == data_61cba8)\n    {\n        uint32_t r8_3 = rcx[1];\n        void* rcx_1 = &rcx[2];\n        uint32_t rdx_1 = r8_3;\n        if ((r8_3 - 0x30) <= 9)\n        {\n            while (true)\n            {\n                void* r8_5 = (rcx_1 + 1);\n                uint32_t rsi_2 = *(r8_5 - 1);\n                if (rax < rdx_1)\n                {\n                    rax = rdx_1;\n                }\n                rdx_1 = rsi_2;\n                if ((rsi_2 - 0x30) > 9)\n                {\n                    break;\n                }\n                rcx_1 = r8_5;\n            }\n            *arg1 = rcx_1;\n            return rax;\n        }\n        rcx = rsi_1;\n    }\n    *arg1 = rcx;\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_4059f0",
            "funcStartAddr": "0x4059f0",
            "funcEndAddr": "0x405a39",
            "decompiledFuncCode": "uint64_t sub_4059f0(char* arg1)\n{\n    char rbx = *arg1;\n    int64_t rax;\n    rax = rbx == 0x2d;\n    void* var_10 = &arg1[rax];\n    int32_t rdx = 0;\n    if (sub_405930(&var_10) > 0x30)\n    {\n        rdx = *(*var_10 + 0x4149c0);\n        int32_t rax_5 = (-rdx);\n        if (rbx == 0x2d)\n        {\n            rdx = rax_5;\n        }\n    }\n    return rdx;\n}\n\n"
        },
        {
            "funcName": "sub_405a40",
            "funcStartAddr": "0x405a40",
            "funcEndAddr": "0x405ae3",
            "decompiledFuncCode": "uint64_t sub_405a40(char* arg1, char** arg2)\n{\n    while (*(*arg1 + 0x61ca80) != 0)\n    {\n        arg1 = &arg1[1];\n    }\n    uint64_t r11 = 0xc;\n    int64_t r10 = 0;\n    char* rdx_2;\n    uint64_t r9_2;\n    while (true)\n    {\n        r9_2 = ((r10 + r11) >> 1);\n        char* rax_4 = *((r9_2 << 4) + 0x61c440);\n        char rdx_1 = *rax_4;\n        if (rdx_1 == 0)\n        {\n            rdx_2 = arg1;\n            break;\n        }\n        char temp0_1 = *(*arg1 + 0x61c780);\n        bool cond:0_1 = temp0_1 > rdx_1;\n        char rcx_2;\n        char temp1_1;\n        if ((temp0_1 >= rdx_1 && (!cond:0_1)))\n        {\n            rdx_2 = arg1;\n            bool cond:1_1;\n            do\n            {\n                rax_4 = &rax_4[1];\n                rcx_2 = *rax_4;\n                rdx_2 = &rdx_2[1];\n                if (rcx_2 == 0)\n                {\n                    break;\n                }\n                temp1_1 = *(*rdx_2 + 0x61c780);\n                cond:1_1 = temp1_1 > rcx_2;\n                if (temp1_1 < rcx_2)\n                {\n                    break;\n                }\n            } while ((!cond:1_1));\n            if (rcx_2 == 0)\n            {\n                break;\n            }\n        }\n        if ((temp0_1 < rdx_1 || ((((temp0_1 >= rdx_1 && (!cond:0_1)) && rcx_2 != 0) && rcx_2 != 0) && temp1_1 < rcx_2)))\n        {\n            r11 = r9_2;\n        }\n        if ((temp0_1 >= rdx_1 && (cond:0_1 || (((!cond:0_1) && rcx_2 != 0) && (!(rcx_2 != 0 && temp1_1 < rcx_2))))))\n        {\n            r10 = (r9_2 + 1);\n        }\n        if (r10 >= r11)\n        {\n            return 0;\n        }\n    }\n    if (arg2 != 0)\n    {\n        *arg2 = rdx_2;\n    }\n    return *((r9_2 << 4) + 0x61c448);\n}\n\n"
        },
        {
            "funcName": "sub_405af0",
            "funcStartAddr": "0x405af0",
            "funcEndAddr": "0x405b43",
            "decompiledFuncCode": "uint64_t sub_405af0(void* arg1)\n{\n    uint64_t rax = 0;\n    if ((*(arg1 + 0x20) == 0 && *(arg1 + 0x28) == 0))\n    {\n        rax = *(arg1 + 0x30);\n        if (((rax == 0 && *(arg1 + 0x31) == 0) && (*(arg1 + 0x30) & 0xffff00ff0000) == 0))\n        {\n            rax = *(arg1 + 0x36);\n        }\n        if ((rax != 0 || ((rax == 0 && *(arg1 + 0x31) == 0) && (*(arg1 + 0x30) & 0xffff00ff0000) == 0)))\n        {\n            return 0;\n        }\n        if ((((rax == 0 && *(arg1 + 0x31) == 0) && (*(arg1 + 0x30) & 0xffff00ff0000) == 0) && *(arg1 + 0x38) == 0))\n        {\n            return (*(arg1 + 0x33) ^ 1);\n        }\n    }\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_405b50",
            "funcStartAddr": "0x405b50",
            "funcEndAddr": "0x405bf7",
            "decompiledFuncCode": "char* sub_405b50(void* arg1, char* arg2)\n{\n    if (*(arg1 + 0x30) != 0)\n    {\n        *arg2 = 0x62;\n        arg2 = &arg2[1];\n    }\n    if (*(arg1 + 0x20) == 0x61c880)\n    {\n        *arg2 = 0x64;\n        arg2 = &arg2[1];\n    }\n    char* rax = arg2;\n    if (*(arg1 + 0x28) != 0)\n    {\n        *arg2 = 0x66;\n        rax = &rax[1];\n    }\n    if (*(arg1 + 0x34) != 0)\n    {\n        *rax = 0x67;\n        rax = &rax[1];\n    }\n    if (*(arg1 + 0x35) != 0)\n    {\n        *rax = 0x68;\n        rax = &rax[1];\n    }\n    if (*(arg1 + 0x20) == 0x61c980)\n    {\n        *rax = 0x69;\n        rax = &rax[1];\n    }\n    if (*(arg1 + 0x36) != 0)\n    {\n        *rax = 0x4d;\n        rax = &rax[1];\n    }\n    if (*(arg1 + 0x32) != 0)\n    {\n        *rax = 0x6e;\n        rax = &rax[1];\n    }\n    if (*(arg1 + 0x33) != 0)\n    {\n        *rax = 0x52;\n        rax = &rax[1];\n    }\n    if (*(arg1 + 0x37) != 0)\n    {\n        *rax = 0x72;\n        rax = &rax[1];\n    }\n    if (*(arg1 + 0x38) != 0)\n    {\n        *rax = 0x56;\n        rax = &rax[1];\n    }\n    *rax = 0;\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_405c00",
            "funcStartAddr": "0x405c00",
            "funcEndAddr": "0x405ce9",
            "decompiledFuncCode": "char* sub_405c00(char* arg1, void* arg2, int32_t arg3)\n{\n    char rcx_2 = *arg1;\n    if (rcx_2 != 0)\n    {\n        int32_t rdx = (arg3 - 1);\n        int32_t rax_2 = (arg3 & 0xfffffffd);\n        do\n        {\n            char rcx = (rcx_2 - 0x4d);\n            if (rcx > 0x25)\n            {\n                break;\n            }\n            switch (rcx)\n            {\n                case 0:\n                {\n                    *(arg2 + 0x36) = 1;\n                    break;\n                }\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 6:\n                case 7:\n                case 8:\n                case 0xa:\n                case 0xb:\n                case 0xc:\n                case 0xd:\n                case 0xe:\n                case 0xf:\n                case 0x10:\n                case 0x11:\n                case 0x12:\n                case 0x13:\n                case 0x14:\n                case 0x16:\n                case 0x18:\n                case 0x1d:\n                case 0x1e:\n                case 0x1f:\n                case 0x20:\n                case 0x22:\n                case 0x23:\n                case 0x24:\n                {\n                    break;\n                    break;\n                }\n                case 5:\n                {\n                    *(arg2 + 0x33) = 1;\n                    break;\n                }\n                case 9:\n                {\n                    *(arg2 + 0x38) = 1;\n                    break;\n                }\n                case 0x15:\n                {\n                    if (rax_2 == 0)\n                    {\n                        *(arg2 + 0x30) = 1;\n                    }\n                    if (rdx <= 1)\n                    {\n                        *(arg2 + 0x31) = 1;\n                    }\n                    break;\n                }\n                case 0x17:\n                {\n                    *(arg2 + 0x20) = 0x61c880;\n                    break;\n                }\n                case 0x19:\n                {\n                    *(arg2 + 0x28) = 0x61c780;\n                    break;\n                }\n                case 0x1a:\n                {\n                    *(arg2 + 0x34) = 1;\n                    break;\n                }\n                case 0x1b:\n                {\n                    *(arg2 + 0x35) = 1;\n                    break;\n                }\n                case 0x1c:\n                {\n                    if (*(arg2 + 0x20) == 0)\n                    {\n                        *(arg2 + 0x20) = 0x61c980;\n                    }\n                    break;\n                }\n                case 0x21:\n                {\n                    *(arg2 + 0x32) = 1;\n                    break;\n                }\n                case 0x25:\n                {\n                    *(arg2 + 0x37) = 1;\n                    break;\n                }\n            }\n            arg1 = &arg1[1];\n            rcx_2 = *arg1;\n        } while (rcx_2 != 0);\n    }\n    return arg1;\n}\n\n"
        },
        {
            "funcName": "sub_405cf0",
            "funcStartAddr": "0x405cf0",
            "funcEndAddr": "0x405cfb",
            "decompiledFuncCode": "int64_t sub_405cf0(int64_t* arg1, int64_t* arg2)\n{\n    /* tailcall */\n    return strcmp(*arg1, *arg2);\n}\n\n"
        },
        {
            "funcName": "sub_405d00",
            "funcStartAddr": "0x405d00",
            "funcEndAddr": "0x405d30",
            "decompiledFuncCode": "int64_t sub_405d00(int64_t arg1)\n{\n    char* rsi;\n    int64_t rdi;\n    rsi = error(2, 0, dcgettext(nullptr, \"options '-%s' are incompatible\", 5), arg1);\n    /* tailcall */\n    return sub_405d30(rdi, rsi);\n}\n\n"
        },
        {
            "funcName": "sub_405d30",
            "funcStartAddr": "0x405d30",
            "funcEndAddr": "0x405dca",
            "decompiledFuncCode": "int64_t sub_405d30(uint64_t arg1, char* arg2)\n{\n    int64_t rax = sub_40f880(arg1);\n    char* rax_1 = dcgettext(nullptr, arg2, 5);\n    int32_t rdi = error(2, 0, dcgettext(nullptr, \"%s: invalid field specification \u2026\", 5), rax_1, rax);\n    int64_t var_20 = rax;\n    char* var_28 = rax_1;\n    int64_t rbx_2 = data_61c6a8;\n    if (rbx_2 != 0)\n    {\n        do\n        {\n            unlink((rbx_2 + 0xd));\n            rbx_2 = *rbx_2;\n        } while (rbx_2 != 0);\n    }\n    data_61c6a8 = 0;\n    signal(rdi, nullptr);\n    /* tailcall */\n    return raise(rdi);\n}\n\n"
        },
        {
            "funcName": "sub_405dd0",
            "funcStartAddr": "0x405dd0",
            "funcEndAddr": "0x405e24",
            "decompiledFuncCode": "int64_t sub_405dd0(int64_t arg1, uint64_t arg2) __noreturn\n{\n    uint64_t rdx = arg2;\n    if (arg2 == 0)\n    {\n        goto label_405e1f;\n    }\n    while (true)\n    {\n        error(2, *__errno_location(), \"%s: %s\", arg1, sub_40f700(0, 3, rdx));\n    label_405e1f:\n        rdx = dcgettext(nullptr, \"standard output\", 5);\n    }\n}\n\n"
        },
        {
            "funcName": "sub_405e30",
            "funcStartAddr": "0x405e30",
            "funcEndAddr": "0x405ea5",
            "decompiledFuncCode": "int64_t sub_405e30(int64_t* arg1, int64_t arg2, uint64_t arg3)\n{\n    int64_t r12 = (arg2 + 1);\n    uint64_t rbx = arg3;\n    do\n    {\n        size_t rbx_2 = ((rbx & 0xffffffffffffffe0) + 0x20);\n        int64_t rax_1 = malloc(rbx_2);\n        *arg1 = rax_1;\n        if (rax_1 != 0)\n        {\n            arg1[5] = arg2;\n            arg1[3] = rbx_2;\n            arg1[2] = 0;\n            arg1[4] = 0;\n            arg1[1] = 0;\n            arg1[6] = 0;\n            return rax_1;\n        }\n        rbx = (rbx_2 >> 1);\n    } while (r12 < rbx);\n    sub_411460();\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_405eb0",
            "funcStartAddr": "0x405eb0",
            "funcEndAddr": "0x405eec",
            "decompiledFuncCode": "int64_t sub_405eb0(char* arg1, int64_t arg2)\n{\n    void* rbx = arg1;\n    int64_t rax_1 = sub_40d3c0(arg1, (arg2 - arg1), 0);\n    if (arg2 > rbx)\n    {\n        do\n        {\n            rbx = (rbx + 1);\n            int64_t rdx_1;\n            rdx_1 = *(rbx - 1) == 9;\n            rax_1 = (rax_1 + rdx_1);\n        } while (arg2 != rbx);\n    }\n    return rax_1;\n}\n\n"
        },
        {
            "funcName": "sub_405ef0",
            "funcStartAddr": "0x405ef0",
            "funcEndAddr": "0x405fb0",
            "decompiledFuncCode": "uint64_t sub_405ef0(char* arg1, char* arg2, uint64_t arg3)\n{\n    int32_t* rax = __errno_location();\n    *rax = 0;\n    uint64_t rax_1 = strxfrm(arg1, arg2, arg3);\n    if (*rax != 0)\n    {\n        error(0, *rax, dcgettext(nullptr, \"string transformation failed\", 5));\n        error(0, 0, dcgettext(nullptr, \"set LC_ALL='C' to work around th\u2026\", 5));\n        pid_t rdi_1 = error(2, 0, dcgettext(nullptr, \"the untransformed string was %s\", 5), sub_40f550(0, 8, arg2));\n        /* tailcall */\n        return sub_405fb0(rdi_1);\n    }\n    return rax_1;\n}\n\n"
        },
        {
            "funcName": "sub_405fb0",
            "funcStartAddr": "0x405fb0",
            "funcEndAddr": "0x4060a0",
            "decompiledFuncCode": "uint64_t sub_405fb0(pid_t arg1)\n{\n    bool cond:1 = arg1 == 0;\n    pid_t rdi = -1;\n    if (arg1 != 0)\n    {\n        rdi = arg1;\n    }\n    int32_t rdx;\n    rdx = cond:1;\n    int32_t var_2c;\n    pid_t rax = waitpid(rdi, &var_2c, rdx);\n    bool cond:2 = rax == 0;\n    if (rax >= 0)\n    {\n        if (cond:2)\n        {\n            goto label_405ffe;\n        }\n        if (arg1 <= 0)\n        {\n            pid_t var_20_1 = rax;\n            void* rax_4 = sub_40cde0(data_61c6a0);\n            if (rax_4 == 0)\n            {\n                goto label_405ffe;\n            }\n            *(rax_4 + 0xc) = 2;\n        }\n        int32_t rax_1 = var_2c;\n        if ((*rax_1[1] | (rax_1 & 0x7f)) == 0)\n        {\n            data_61c69c = (data_61c69c - 1);\n        label_405ffe:\n            return rax;\n        }\n        error(2, 0, dcgettext(nullptr, \"%s [-d] terminated abnormally\", 5), sub_40f630(4, data_61c748));\n    }\n    pid_t rdi_2 = error(2, *__errno_location(), dcgettext(nullptr, \"waiting for %s [-d]\", 5), sub_40f630(4, data_61c748));\n    /* tailcall */\n    return sub_4060a0(rdi_2);\n}\n\n"
        },
        {
            "funcName": "sub_4060a0",
            "funcStartAddr": "0x4060a0",
            "funcEndAddr": "0x4060d0",
            "decompiledFuncCode": "uint64_t sub_4060a0(pid_t arg1)\n{\n    pid_t var_10 = arg1;\n    uint64_t rax = sub_40cde0(data_61c6a0);\n    if (rax != 0)\n    {\n        *(rax + 0xc) = 2;\n        rax = sub_405fb0(arg1);\n    }\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_4060d0",
            "funcStartAddr": "0x4060d0",
            "funcEndAddr": "0x406185",
            "decompiledFuncCode": "int64_t sub_4060d0(int32_t arg1, int32_t* arg2) __noreturn\n{\n    int32_t* rdx = arg2;\n    uint32_t rax_3;\n    do\n    {\n        int32_t rcx_1 = *rdx;\n        rdx = &rdx[1];\n        rax_3 = (((rcx_1 - 0x1010101) & (!rcx_1)) & 0x80808080);\n    } while (rax_3 == 0);\n    uint32_t rcx_4 = (rax_3 >> 0x10);\n    int32_t temp0 = (rax_3 & 0x8080);\n    bool cond:0 = temp0 == 0;\n    if (temp0 == 0)\n    {\n        rax_3 = rcx_4;\n    }\n    void* rcx_5 = (rdx + 2);\n    if (cond:0)\n    {\n        rdx = rcx_5;\n    }\n    char rdi = rax_3;\n    write(2, arg2, ((rdx - 3) - arg2));\n    if (arg1 != 0)\n    {\n        void var_14;\n        void* rax_4 = sub_40d2b0(arg1, &var_14);\n        write(2, \": errno \", 8);\n        void* rdi_2 = rax_4;\n        int64_t rcx_6 = -1;\n        while (rcx_6 != 0)\n        {\n            bool cond:1_1 = 0 != *rdi_2;\n            rdi_2 = (rdi_2 + 1);\n            rcx_6 = (rcx_6 - 1);\n            if ((!cond:1_1))\n            {\n                break;\n            }\n        }\n        write(2, rax_4, ((!rcx_6) - 1));\n    }\n    write(2, \"\\n\", 1);\n    _exit(2);\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_406190",
            "funcStartAddr": "0x406190",
            "funcEndAddr": "0x4061e5",
            "decompiledFuncCode": "int64_t sub_406190(int64_t arg1)\n{\n    int64_t rdi = data_61c6a0;\n    int64_t rax_2;\n    if (rdi == 0)\n    {\n        rax_2 = sub_40c600(0x2f, nullptr, 0x405910, 0x405920, 0);\n        rdi = rax_2;\n        data_61c6a0 = rax_2;\n    }\n    if ((rdi != 0 || (rdi == 0 && rax_2 != 0)))\n    {\n        *(arg1 + 0xc) = 1;\n        int64_t rax_1 = sub_40cda0(rdi, arg1);\n        if (rax_1 != 0)\n        {\n            return rax_1;\n        }\n    }\n    sub_411460();\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_4061f0",
            "funcStartAddr": "0x4061f0",
            "funcEndAddr": "0x40631d",
            "decompiledFuncCode": "void* sub_4061f0(int64_t* arg1, int64_t* arg2, int64_t arg3, int64_t arg4, \n    int64_t arg5, char arg6)\n{\n    void* r15_1;\n    while (true)\n    {\n        int64_t rdx = (arg3 - (arg5 << 5));\n        int64_t rax_4;\n        void* rcx_2;\n        uint64_t rdx_2;\n        int64_t r14_2;\n        if (arg6 == 0)\n        {\n            int64_t rax_8 = arg1[6];\n            rdx_2 = (rax_8 >> 1);\n            rax_4 = (rax_8 - rdx_2);\n            r14_2 = (rdx - (rdx_2 << 5));\n            rcx_2 = &arg1[3];\n        }\n        else\n        {\n            int64_t rax_3 = arg1[5];\n            rdx_2 = (rax_3 >> 1);\n            rax_4 = (rax_3 - rdx_2);\n            r14_2 = (rdx - (rdx_2 << 5));\n            rcx_2 = &arg1[2];\n        }\n        arg2[6] = rax_4;\n        int32_t rax_5 = arg1[0xa];\n        r15_1 = &arg2[0x10];\n        arg2[7] = arg1;\n        arg2[2] = rdx;\n        *arg2 = rdx;\n        arg2[3] = r14_2;\n        arg2[1] = r14_2;\n        arg2[4] = rcx_2;\n        arg2[5] = rdx_2;\n        arg2[0xa] = (rax_5 + 1);\n        *(arg2 + 0x54) = 0;\n        pthread_mutex_init(&arg2[0xb], nullptr);\n        if (arg4 <= 1)\n        {\n            break;\n        }\n        arg2[8] = r15_1;\n        uint64_t rcx_6 = (arg4 >> 1);\n        int64_t* rax_9 = sub_4061f0(arg2, r15_1, rdx, rcx_6, arg5, 1);\n        arg4 = (arg4 - rcx_6);\n        arg3 = r14_2;\n        arg2[9] = rax_9;\n        arg1 = arg2;\n        arg6 = 0;\n        arg2 = rax_9;\n    }\n    arg2[8] = 0;\n    arg2[9] = 0;\n    return r15_1;\n}\n\n"
        },
        {
            "funcName": "sub_406320",
            "funcStartAddr": "0x406320",
            "funcEndAddr": "0x40635c",
            "decompiledFuncCode": "int64_t sub_406320(int64_t* arg1, void* arg2)\n{\n    pthread_mutex_lock(&arg1[1]);\n    sub_40d070(*arg1, arg2);\n    *(arg2 + 0x54) = 1;\n    pthread_cond_signal(&arg1[6]);\n    /* tailcall */\n    return pthread_mutex_unlock(&arg1[1]);\n}\n\n"
        },
        {
            "funcName": "sub_406360",
            "funcStartAddr": "0x406360",
            "funcEndAddr": "0x40646f",
            "decompiledFuncCode": "void* sub_406360(char* arg1, int64_t arg2, int64_t* arg3)\n{\n    void* rax = &arg1[(arg2 - 1)];\n    int32_t rsi = data_61c424;\n    int64_t rcx = *arg3;\n    int64_t r9 = arg3[1];\n    char rcx_3;\n    if (rsi == 0x80)\n    {\n        if (rax > arg1)\n        {\n            int64_t rsi_1 = (rcx - 1);\n            if (rcx != 0)\n            {\n                while (true)\n                {\n                    rcx_3 = *(*arg1 + 0x61ca80);\n                    do\n                    {\n                        if (rcx_3 != 0)\n                        {\n                            arg1 = &arg1[1];\n                            break;\n                        }\n                        if (rax <= arg1)\n                        {\n                            break;\n                        }\n                        do\n                        {\n                            arg1 = &arg1[1];\n                            if (rax == arg1)\n                            {\n                                break;\n                            }\n                            rcx_3 = *(*arg1 + 0x61ca80);\n                        } while (rcx_3 == 0);\n                        if (rax == arg1)\n                        {\n                            arg1 = rax;\n                            break;\n                        }\n                        rsi_1 = (rsi_1 - 1);\n                    } while (rsi_1 != -1);\n                    if (rcx_3 == 0)\n                    {\n                        break;\n                    }\n                    if (rax <= arg1)\n                    {\n                        void* rdi_2 = &arg1[r9];\n                        if (rax > rdi_2)\n                        {\n                            rax = rdi_2;\n                        }\n                        return rax;\n                    }\n                }\n            }\n        }\n    }\n    else if (rax > arg1)\n    {\n        int64_t r8_1 = (rcx - 1);\n        if (rcx != 0)\n        {\n            while (true)\n            {\n                if (rsi != *arg1)\n                {\n                    arg1 = &arg1[1];\n                    if (rax <= arg1)\n                    {\n                        break;\n                    }\n                }\n                else\n                {\n                    if (rax <= arg1)\n                    {\n                        break;\n                    }\n                    arg1 = &arg1[1];\n                    if (rax <= arg1)\n                    {\n                        break;\n                    }\n                    r8_1 = (r8_1 - 1);\n                    if (r8_1 == -1)\n                    {\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    if (((((((rsi == 0x80 && rax > arg1) && rcx == 0) || ((rsi != 0x80 && rax > arg1) && rcx == 0)) || (((rsi == 0x80 && rax > arg1) && rcx != 0) && (!((rcx_3 == 0 && rax > arg1) && rax == arg1)))) || (((rsi != 0x80 && rax > arg1) && rcx != 0) && (!(rsi == *arg1 && rax <= arg1)))) && arg3[6] != 0))\n    {\n        do\n        {\n            if (*(*arg1 + 0x61ca80) == 0)\n            {\n                void* rdi_1 = &arg1[r9];\n                if (rax > rdi_1)\n                {\n                    rax = rdi_1;\n                }\n                return rax;\n            }\n            arg1 = &arg1[1];\n        } while (rax > arg1);\n    }\n    void* rdi = &arg1[r9];\n    if (rax > rdi)\n    {\n        rax = rdi;\n    }\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_406470",
            "funcStartAddr": "0x406470",
            "funcEndAddr": "0x4065ad",
            "decompiledFuncCode": "char* sub_406470(char* arg1, int64_t arg2, void* arg3)\n{\n    int64_t r9 = *(arg3 + 0x18);\n    void* rcx = &arg1[(arg2 - 1)];\n    char* rax = arg1;\n    int32_t rdi = data_61c424;\n    int64_t rsi_1 = (*(arg3 + 0x10) + 0);\n    if (rdi == 0x80)\n    {\n        if (rcx > rax)\n        {\n            int64_t rdi_1 = (rsi_1 - 1);\n            if (rsi_1 != 0)\n            {\n                do\n                {\n                    char rsi_6 = *(*rax + 0x61ca80);\n                    do\n                    {\n                        if (rsi_6 != 0)\n                        {\n                            rax = &rax[1];\n                            break;\n                        }\n                        if (rcx <= rax)\n                        {\n                            break;\n                        }\n                        do\n                        {\n                            rax = &rax[1];\n                            if (rcx == rax)\n                            {\n                                break;\n                            }\n                            rsi_6 = *(*rax + 0x61ca80);\n                        } while (rsi_6 == 0);\n                        if (rcx == rax)\n                        {\n                            rax = rcx;\n                            break;\n                        }\n                        rdi_1 = (rdi_1 - 1);\n                    } while (rdi_1 != -1);\n                    if (rsi_6 == 0)\n                    {\n                        break;\n                    }\n                } while (rcx > rax);\n            }\n        }\n    }\n    else if (rcx > rax)\n    {\n        int64_t r8_1 = (rsi_1 - 1);\n        if (rsi_1 != 0)\n        {\n            while (true)\n            {\n                if (rdi != *rax)\n                {\n                    rax = &rax[1];\n                    if (rcx <= rax)\n                    {\n                        break;\n                    }\n                }\n                else\n                {\n                    if (rcx <= rax)\n                    {\n                        break;\n                    }\n                    if ((r9 | r8_1) == 0)\n                    {\n                        return rax;\n                    }\n                    rax = &rax[1];\n                    if (rcx <= rax)\n                    {\n                        break;\n                    }\n                    r8_1 = (r8_1 - 1);\n                    if (r8_1 == -1)\n                    {\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    if (r9 == 0)\n    {\n        return rax;\n    }\n    if ((*(arg3 + 0x31) != 0 && rcx > rax))\n    {\n        while (*(*rax + 0x61ca80) != 0)\n        {\n            rax = &rax[1];\n            if (rcx == rax)\n            {\n                void* rax_3 = (rcx + r9);\n                if (rcx <= rax_3)\n                {\n                    rax_3 = rcx;\n                }\n                return rax_3;\n            }\n        }\n    }\n    void* rax_1 = &rax[r9];\n    if (rcx <= rax_1)\n    {\n        rax_1 = rcx;\n    }\n    return rax_1;\n}\n\n"
        },
        {
            "funcName": "sub_4065b0",
            "funcStartAddr": "0x4065b0",
            "funcEndAddr": "0x4074c8",
            "decompiledFuncCode": "uint64_t sub_4065b0(int64_t* arg1, char** arg2)\n{\n    char* r15 = arg2[2];\n    char* rbx = arg1[3];\n    char* r10 = arg2[3];\n    int128_t var_201c;\n    int128_t* var_2118 = &var_201c;\n    int64_t r12 = data_61c750;\n    char* r14_1 = arg1[2];\n    uint64_t var_2188;\n    while (true)\n    {\n        char* rax_1 = r10;\n        int64_t r13_1 = *(r12 + 0x28);\n        int64_t rbp_1 = *(r12 + 0x20);\n        if (r14_1 >= rbx)\n        {\n            rbx = r14_1;\n        }\n        if (r15 >= r10)\n        {\n            rax_1 = r15;\n        }\n        uint64_t r11_2 = (rbx - r14_1);\n        uint64_t r10_2 = (rax_1 - r15);\n        uint64_t rdx;\n        if (data_61cba1 != 0)\n        {\n        label_406640:\n            int64_t rcx_2 = (r13_1 | rbp_1);\n            char var_2162;\n            char var_2161;\n            void* var_2128;\n            if (rcx_2 == 0)\n            {\n                char rcx_3 = *rbx;\n                *rbx = 0;\n                var_2162 = rcx_3;\n                char rcx_4 = *rax_1;\n                *rax_1 = 0;\n                var_2161 = rcx_4;\n            }\n            else\n            {\n                size_t rdi_7 = ((r11_2 + r10_2) + 2);\n                void* rcx_6;\n                void* rsi_6;\n                if (rdi_7 > 0xfa0)\n                {\n                    void* rax_35;\n                    rax_35 = sub_411210(rdi_7);\n                    rcx_6 = rax_35;\n                    var_2128 = rax_35;\n                    rsi_6 = ((rcx_6 + r11_2) + 1);\n                }\n                else\n                {\n                    void var_1f78;\n                    rcx_6 = &var_1f78;\n                    var_2128 = nullptr;\n                    rsi_6 = ((&var_1f78 + r11_2) + 1);\n                }\n                if (((rdi_7 > 0xfa0 && r11_2 != 0) || (rdi_7 <= 0xfa0 && r11_2 != 0)))\n                {\n                    void* rdi_8 = &r14_1[r11_2];\n                    char* r8_1 = r14_1;\n                    r11_2 = 0;\n                    do\n                    {\n                        char rax_21 = *r8_1;\n                        rdx = rax_21;\n                        if (((rbp_1 != 0 && *(rbp_1 + rdx) == 0) && r13_1 == 0))\n                        {\n                            goto label_4068ec;\n                        }\n                        if ((rbp_1 == 0 || (rbp_1 != 0 && *(rbp_1 + rdx) == 0)))\n                        {\n                            rax_21 = *(r13_1 + rdx);\n                        label_4068ec:\n                            *(rcx_6 + r11_2) = rax_21;\n                            r11_2 = (r11_2 + 1);\n                        }\n                        r8_1 = &r8_1[1];\n                    } while (rdi_8 != r8_1);\n                    *(rcx_6 + r11_2) = 0;\n                    if (r10_2 != 0)\n                    {\n                        goto label_406928;\n                    }\n                    goto label_406c88;\n                }\n                if (((rdi_7 > 0xfa0 && r11_2 == 0) || (rdi_7 <= 0xfa0 && r11_2 == 0)))\n                {\n                    *rcx_6 = 0;\n                    void* rax_24;\n                    if (r10_2 == 0)\n                    {\n                    label_406c88:\n                        rax_24 = rsi_6;\n                    }\n                    else\n                    {\n                    label_406928:\n                        void* rdi_9 = &r15[r10_2];\n                        r10_2 = 0;\n                        do\n                        {\n                            char rax_23 = *r15;\n                            rdx = rax_23;\n                            if (((rbp_1 != 0 && *(rbp_1 + rdx) == 0) && r13_1 == 0))\n                            {\n                                goto label_406944;\n                            }\n                            if ((rbp_1 == 0 || (rbp_1 != 0 && *(rbp_1 + rdx) == 0)))\n                            {\n                                rax_23 = *(r13_1 + rdx);\n                            label_406944:\n                                *(rsi_6 + r10_2) = rax_23;\n                                r10_2 = (r10_2 + 1);\n                            }\n                            r15 = &r15[1];\n                        } while (rdi_9 != r15);\n                        rax_24 = (rsi_6 + r10_2);\n                    }\n                    *rax_24 = 0;\n                    r15 = rsi_6;\n                    r14_1 = rcx_6;\n                }\n            }\n            if (*(r12 + 0x32) != 0)\n            {\n                char* rdi_6 = r14_1;\n                if (*(*r14_1 + 0x61ca80) != 0)\n                {\n                    do\n                    {\n                        rdi_6 = &rdi_6[1];\n                    } while (*(*rdi_6 + 0x61ca80) != 0);\n                }\n                char* rsi_5 = r15;\n                if (*(*r15 + 0x61ca80) != 0)\n                {\n                    do\n                    {\n                        rsi_5 = &rsi_5[1];\n                    } while (*(*rsi_5 + 0x61ca80) != 0);\n                }\n                int32_t rax_20;\n                rax_20 = sub_4106a0(rdi_6, rsi_5, data_61cba8, data_61cba4);\n                var_2188 = rax_20;\n            }\n            else\n            {\n                char* var_20d8;\n                int128_t var_20b8;\n                int80_t var_fd8;\n                if (*(r12 + 0x34) != 0)\n                {\n                    int64_t var_20e0;\n                    strtold(r14_1, &var_20e0);\n                    var_2188 = /* var_2188.t = unimplemented  {fstp tword [rsp], st0} */;\n                    /* unimplemented  {fstp tword [rsp], st0} */;\n                    strtold(r15, &var_20d8);\n                    /* unimplemented  {fld st0, tword [rsp]} */;\n                    int16_t top;\n                    if (r14_1 == var_20e0)\n                    {\n                        /* unimplemented  {fstp st0, st0} */;\n                        /* unimplemented  {fstp st0, st0} */;\n                        /* unimplemented  {fstp st0, st0} */;\n                        /* unimplemented  {fstp st0, st0} */;\n                        top = (top + 2);\n                        int32_t rax_61;\n                        rax_61 = var_20d8 != r15;\n                        var_2188 = (-rax_61);\n                    }\n                    else if (r15 == var_20d8)\n                    {\n                        /* unimplemented  {fstp st0, st0} */;\n                        /* unimplemented  {fstp st0, st0} */;\n                        /* unimplemented  {fstp st0, st0} */;\n                        /* unimplemented  {fstp st0, st0} */;\n                        top = (top + 2);\n                    label_406a2c:\n                        var_2188 = 1;\n                    }\n                    else\n                    {\n                        /* unimplemented  {fxch st0, st1} */;\n                        /* unimplemented  {fxch st0, st1} */;\n                        if (/* if (unimplemented  {fcomi st0, st1} f> unimplemented  {fcomi st0, st1})... */ > /* if (unimplemented  {fcomi st0, st1} f> unimplemented  {fcomi st0, st1})... */)\n                        {\n                            /* unimplemented  {fstp st0, st0} */;\n                            /* unimplemented  {fstp st0, st0} */;\n                            /* unimplemented  {fstp st0, st0} */;\n                            /* unimplemented  {fstp st0, st0} */;\n                            top = (top + 2);\n                        label_40749d:\n                            var_2188 = 0xffffffff;\n                        }\n                        else\n                        {\n                            /* unimplemented  {fxch st0, st1} */;\n                            /* unimplemented  {fxch st0, st1} */;\n                            bool cond:2_1 = /* bool cond:2_1 = unimplemented  {fcomi st0, st1} f> unimplemented  {fcomi st0, st1} */ > /* bool cond:2_1 = unimplemented  {fcomi st0, st1} f> unimplemented  {fcomi st0, st1} */;\n                            var_2188 = 1;\n                            if (cond:2_1)\n                            {\n                                /* unimplemented  {fstp st0, st0} */;\n                                /* unimplemented  {fstp st0, st0} */;\n                                /* unimplemented  {fstp st0, st0} */;\n                                /* unimplemented  {fstp st0, st0} */;\n                                top = (top + 2);\n                            }\n                            else\n                            {\n                                (/* unimplemented  {fucomi st0, st1} f- unimplemented  {fucomi st0, st1} */ - /* unimplemented  {fucomi st0, st1} f- unimplemented  {fucomi st0, st1} */);\n                                bool cond:7_1 = /* bool cond:7_1 = unimplemented  {fucomi st0, st1} f== unimplemented  {fucomi st0, st1} */ == /* bool cond:7_1 = unimplemented  {fucomi st0, st1} f== unimplemented  {fucomi st0, st1} */;\n                                if ((FCMP_UO(/* if (is_unordered.t(unimplemented  {fucomi st0, st1}, unimplemented  {fucomi st0, st1}))... */, /* if (is_unordered.t(unimplemented  {fucomi st0, st1}, unimplemented  {fucomi st0, st1}))... */)))\n                                {\n                                    /* unimplemented  {fxch st0, st1} */;\n                                    /* unimplemented  {fxch st0, st1} */;\n                                }\n                                else if (cond:7_1)\n                                {\n                                    /* unimplemented  {fstp st0, st0} */;\n                                    /* unimplemented  {fstp st0, st0} */;\n                                    /* unimplemented  {fstp st0, st0} */;\n                                    /* unimplemented  {fstp st0, st0} */;\n                                    top = (top + 2);\n                                    var_2188 = 0;\n                                }\n                                else\n                                {\n                                    /* unimplemented  {fxch st0, st1} */;\n                                    /* unimplemented  {fxch st0, st1} */;\n                                }\n                                if (((FCMP_UO(/* if (is_unordered.t(unimplemented  {fucomi st0, st1}, unimplemented  {fucomi st0, st1}) || (not(is_unordered.t(unimplemented  {fucomi st0, st1}, unimplemented  {fucomi st0, st1})) && not(cond:7_1)))... */, /* if (is_unordered.t(unimplemented  {fucomi st0, st1}, unimplemented  {fucomi st0, st1}) || (not(is_unordered.t(unimplemented  {fucomi st0, st1}, unimplemented  {fucomi st0, st1})) && not(cond:7_1)))... */)) || ((!(FCMP_UO(/* if (is_unordered.t(unimplemented  {fucomi st0, st1}, unimplemented  {fucomi st0, st1}) || (not(is_unordered.t(unimplemented  {fucomi st0, st1}, unimplemented  {fucomi st0, st1})) && not(cond:7_1)))... */, /* if (is_unordered.t(unimplemented  {fucomi st0, st1}, unimplemented  {fucomi st0, st1}) || (not(is_unordered.t(unimplemented  {fucomi st0, st1}, unimplemented  {fucomi st0, st1})) && not(cond:7_1)))... */))) && (!cond:7_1))))\n                                {\n                                    (/* unimplemented  {fucomip st0, st0} f- unimplemented  {fucomip st0, st0} */ - /* unimplemented  {fucomip st0, st0} f- unimplemented  {fucomip st0, st0} */);\n                                    bool cond:14_1 = /* bool cond:14_1 = unimplemented  {fucomip st0, st0} f== unimplemented  {fucomip st0, st0} */ == /* bool cond:14_1 = unimplemented  {fucomip st0, st0} f== unimplemented  {fucomip st0, st0} */;\n                                    bool cond:16_1 = (FCMP_UO(/* bool cond:16_1 = is_unordered.t(unimplemented  {fucomip st0, st0}, unimplemented  {fucomip st0, st0}) */, /* bool cond:16_1 = is_unordered.t(unimplemented  {fucomip st0, st0}, unimplemented  {fucomip st0, st0}) */));\n                                    /* unimplemented  {fucomip st0, st0} */;\n                                    int16_t top_4 = (top + 1);\n                                    if (((!cond:16_1) && cond:14_1))\n                                    {\n                                        /* unimplemented  {fstp st0, st0} */;\n                                        /* unimplemented  {fstp st0, st0} */;\n                                        top = (top_4 + 1);\n                                        goto label_40749d;\n                                    }\n                                    (/* unimplemented  {fucomip st0, st0} f- unimplemented  {fucomip st0, st0} */ - /* unimplemented  {fucomip st0, st0} f- unimplemented  {fucomip st0, st0} */);\n                                    bool cond:13_1 = (FCMP_UO(/* bool cond:13_1 = is_unordered.t(unimplemented  {fucomip st0, st0}, unimplemented  {fucomip st0, st0}) */, /* bool cond:13_1 = is_unordered.t(unimplemented  {fucomip st0, st0}, unimplemented  {fucomip st0, st0}) */));\n                                    bool cond:15_1 = /* bool cond:15_1 = unimplemented  {fucomip st0, st0} f!= unimplemented  {fucomip st0, st0} */ != /* bool cond:15_1 = unimplemented  {fucomip st0, st0} f!= unimplemented  {fucomip st0, st0} */;\n                                    /* unimplemented  {fucomip st0, st0} */;\n                                    top = (top_4 + 1);\n                                    if (((!cond:13_1) && (!cond:15_1)))\n                                    {\n                                        goto label_406a2c;\n                                    }\n                                    strtold(r14_1, nullptr);\n                                    var_20b8 = /* var_20b8.t = unimplemented  {fstp tword [rsp+0xd0], st0} */;\n                                    /* unimplemented  {fstp tword [rsp+0xd0], st0} */;\n                                    strtold(r15, nullptr);\n                                    var_fd8 = /* var_fd8 = unimplemented  {fstp tword [rsp+0x11b0], st0} */;\n                                    /* unimplemented  {fstp tword [rsp+0x11b0], st0} */;\n                                    top = (top + 2);\n                                    int32_t rax_68;\n                                    rax_68 = memcmp(&var_20b8, &var_fd8, 0x10);\n                                    var_2188 = rax_68;\n                                }\n                            }\n                        }\n                    }\n                }\n                else if (*(r12 + 0x35) != 0)\n                {\n                    char* rbx_1 = r14_1;\n                    if (*(*r14_1 + 0x61ca80) != 0)\n                    {\n                        do\n                        {\n                            rbx_1 = &rbx_1[1];\n                        } while (*(*rbx_1 + 0x61ca80) != 0);\n                    }\n                    char* rbp_3 = r15;\n                    if (*(*r15 + 0x61ca80) != 0)\n                    {\n                        do\n                        {\n                            rbp_3 = &rbp_3[1];\n                        } while (*(*rbp_3 + 0x61ca80) != 0);\n                    }\n                    uint64_t var_2158_4 = r10_2;\n                    uint64_t var_2160_4 = r11_2;\n                    int32_t rax_29 = sub_4059f0(rbx_1);\n                    int32_t rax_30;\n                    rax_30 = sub_4059f0(rbp_3);\n                    r11_2 = var_2160_4;\n                    r10_2 = var_2158_4;\n                    var_2188 = (rax_29 - rax_30);\n                    if (rax_29 == rax_30)\n                    {\n                        int32_t rax_31;\n                        rax_31 = sub_4106a0(rbx_1, rbp_3, data_61cba8, data_61cba4);\n                        r11_2 = var_2160_4;\n                        r10_2 = var_2158_4;\n                        var_2188 = rax_31;\n                    }\n                }\n                else if (*(r12 + 0x36) != 0)\n                {\n                    int32_t rax_33 = sub_405a40(r14_1, nullptr);\n                    int32_t rax_34;\n                    rax_34 = sub_405a40(r15, nullptr);\n                    var_2188 = (rax_33 - rax_34);\n                }\n                else if (*(r12 + 0x33) != 0)\n                {\n                    int128_t zmm8 = data_61c600;\n                    int128_t zmm7 = data_61c610;\n                    int128_t zmm6 = data_61c620;\n                    int128_t zmm5 = data_61c630;\n                    int128_t zmm4 = data_61c640;\n                    int128_t zmm3 = data_61c650;\n                    var_201c = zmm8;\n                    int128_t zmm2 = data_61c660;\n                    int128_t zmm1 = data_61c670;\n                    int128_t var_200c_1 = zmm7;\n                    int128_t zmm0 = data_61c680;\n                    int64_t rdx_11 = data_61c690;\n                    int128_t var_1ffc_1 = zmm6;\n                    int32_t rax_39 = data_61c698;\n                    int128_t var_1fec_1 = zmm5;\n                    int128_t var_1fdc_1 = zmm4;\n                    int128_t var_1fcc_1 = zmm3;\n                    int128_t var_1fbc_1 = zmm2;\n                    int128_t var_1fac_1 = zmm1;\n                    int128_t var_1f9c_1 = zmm0;\n                    int64_t var_1f8c_1 = rdx_11;\n                    int32_t var_1f84_1 = rax_39;\n                    var_20b8 = zmm8;\n                    int128_t var_20a8_1 = zmm7;\n                    int128_t var_2098_1 = zmm6;\n                    int128_t var_2088_1 = zmm5;\n                    int128_t var_2078_1 = zmm4;\n                    int128_t var_2068_1 = zmm3;\n                    int128_t var_2058_1 = zmm2;\n                    int128_t var_2048_1 = zmm1;\n                    int128_t var_2038_1 = zmm0;\n                    int64_t var_2028_1 = rdx_11;\n                    int32_t var_2020_1 = rax_39;\n                    uint64_t var_2160_8;\n                    int128_t* var_2138_1;\n                    int128_t* var_2130_1;\n                    void var_20c8;\n                    int32_t rax_56;\n                    uint64_t rbx_4;\n                    uint64_t r10_4;\n                    uint64_t r11_5;\n                    int128_t* r13_4;\n                    if (data_61cba1 != 0)\n                    {\n                        void* rax_40 = &r14_1[r11_2];\n                        var_2188 = 0;\n                        char* rbp_4 = r14_1;\n                        r13_4 = &var_fd8;\n                        void* rax_41 = &r15[r10_2];\n                        uint64_t rax_43 = (((r11_2 + r10_2) * 3) + 2);\n                        var_2138_1 = nullptr;\n                        char* var_2160_7 = r15;\n                        size_t r15_1 = 0xfa0;\n                    label_406e30:\n                        if (rax_43 > r15_1)\n                        {\n                            goto label_406f21;\n                        }\n                        while (rax_40 <= rbp_4)\n                        {\n                            do\n                            {\n                                uint64_t rdx_16;\n                                char* rdi_24;\n                                if (rax_41 > var_2160_7)\n                                {\n                                    rdi_24 = r13_4;\n                                    rdx_16 = r15_1;\n                                    rbx_4 = 0;\n                                    goto label_406f9f;\n                                }\n                                uint64_t r12_1 = 0;\n                                rbx_4 = 0;\n                                while (true)\n                                {\n                                    var_2130_1 = (r13_4 + rbx_4);\n                                    if (rax_40 > rbp_4)\n                                    {\n                                        rbp_4 = &rbp_4[(strlen(rbp_4) + 1)];\n                                    }\n                                    if (((rax_40 <= rbp_4 && rax_41 > var_2160_7) || (rax_40 > rbp_4 && rax_41 > var_2160_7)))\n                                    {\n                                    label_40710c:\n                                        var_2160_7 = &var_2160_7[(strlen(var_2160_7) + 1)];\n                                    }\n                                    uint64_t r10_3;\n                                    uint64_t r11_4;\n                                    if ((((rax_40 <= rbp_4 && rax_41 > var_2160_7) || (rax_40 > rbp_4 && rax_41 > var_2160_7)) || (rax_40 > rbp_4 && rax_41 <= var_2160_7)))\n                                    {\n                                    label_406e90:\n                                        if ((rax_40 <= rbp_4 && rax_41 <= var_2160_7))\n                                        {\n                                            goto label_40712c;\n                                        }\n                                        sub_40b360(r13_4, rbx_4, &var_20b8);\n                                        sub_40b360(var_2130_1, r12_1, var_2118);\n                                        if (var_2188 != 0)\n                                        {\n                                            goto label_406e30;\n                                        }\n                                        uint64_t rdx_14 = r12_1;\n                                        if (rbx_4 <= r12_1)\n                                        {\n                                            rdx_14 = rbx_4;\n                                        }\n                                        int32_t rax_46 = memcmp(r13_4, var_2130_1, rdx_14);\n                                        var_2188 = rax_46;\n                                        if (rax_46 != 0)\n                                        {\n                                            goto label_406e30;\n                                        }\n                                        bool c_2 = rbx_4 < r12_1;\n                                        int32_t rax_47;\n                                        rax_47 = (rbx_4 != r12_1 && (!c_2));\n                                        var_2188 = (rax_47 - 0);\n                                        if (rax_43 <= r15_1)\n                                        {\n                                            break;\n                                        }\n                                    label_406f21:\n                                        r13_4 = &var_fd8;\n                                        uint64_t rax_50 = ((r15_1 * 3) >> 1);\n                                        if (rax_43 >= rax_50)\n                                        {\n                                            rax_50 = rax_43;\n                                        }\n                                        r15_1 = rax_50;\n                                        free(var_2138_1);\n                                        int128_t* rax_51 = malloc(r15_1);\n                                        bool cond:9_1 = rax_51 != 0;\n                                        var_2138_1 = rax_51;\n                                        if (rax_51 == 0)\n                                        {\n                                            r15_1 = 0xfa0;\n                                        }\n                                        if (cond:9_1)\n                                        {\n                                            r13_4 = rax_51;\n                                        }\n                                        if (rax_40 <= rbp_4)\n                                        {\n                                            break;\n                                        }\n                                    label_406f79:\n                                        rbx_4 = (sub_405ef0(r13_4, rbp_4, r15_1) + 1);\n                                        size_t r14_4;\n                                        if (rax_41 <= var_2160_7)\n                                        {\n                                            r14_4 = rbx_4;\n                                            r12_1 = 0;\n                                        }\n                                        else\n                                        {\n                                            if (r15_1 >= rbx_4)\n                                            {\n                                                rdi_24 = (r13_4 + rbx_4);\n                                                rdx_16 = (r15_1 - rbx_4);\n                                            }\n                                            else\n                                            {\n                                                rdx_16 = 0;\n                                                rdi_24 = nullptr;\n                                            }\n                                        label_406f9f:\n                                            r12_1 = (sub_405ef0(rdi_24, var_2160_7, rdx_16) + 1);\n                                            r14_4 = (r12_1 + rbx_4);\n                                        }\n                                        if ((((rax_41 <= var_2160_7 && r15_1 >= rbx_4) || (rax_41 > var_2160_7 && r15_1 >= rbx_4)) && r15_1 >= r14_4))\n                                        {\n                                            continue;\n                                        }\n                                        if (r14_4 <= 0x5555555555555554)\n                                        {\n                                            r14_4 = ((r14_4 * 3) >> 1);\n                                        }\n                                        free(var_2138_1);\n                                        char* rax_54 = sub_411210(r14_4);\n                                        r13_4 = rax_54;\n                                        if (rax_40 > rbp_4)\n                                        {\n                                            strxfrm(rax_54, rbp_4, rbx_4);\n                                        }\n                                        int128_t* rax_55 = (r13_4 + rbx_4);\n                                        var_2130_1 = rax_55;\n                                        if (rax_41 > var_2160_7)\n                                        {\n                                            strxfrm(rax_55, var_2160_7, r12_1);\n                                            if (rax_40 > rbp_4)\n                                            {\n                                                rbp_4 = &rbp_4[(strlen(rbp_4) + 1)];\n                                            }\n                                            var_2138_1 = r13_4;\n                                            r15_1 = r14_4;\n                                            goto label_40710c;\n                                        }\n                                        if (rax_40 > rbp_4)\n                                        {\n                                            r15_1 = r14_4;\n                                            var_2138_1 = r13_4;\n                                            rbp_4 = &rbp_4[(strlen(rbp_4) + 1)];\n                                            goto label_406e90;\n                                        }\n                                        var_2138_1 = r13_4;\n                                        var_2160_8 = r12_1;\n                                        r11_4 = r11_2;\n                                        r10_3 = r10_2;\n                                    }\n                                    if ((rax_40 <= rbp_4 && rax_41 <= var_2160_7))\n                                    {\n                                    label_40712c:\n                                        var_2160_8 = r12_1;\n                                        r11_4 = r11_2;\n                                        r10_3 = r10_2;\n                                    }\n                                    int64_t rcx_18;\n                                    int64_t rdx_18;\n                                    int64_t r8_3;\n                                    rcx_18 = sub_40b360(r13_4, rbx_4, &var_20b8);\n                                    sub_40b250(&var_20b8, &var_20d8, rdx_18, rcx_18, r8_3);\n                                    int64_t rcx_19;\n                                    int64_t rdx_20;\n                                    int64_t r8_4;\n                                    rcx_19 = sub_40b360(var_2130_1, var_2160_8, var_2118);\n                                    sub_40b250(var_2118, &var_20c8, rdx_20, rcx_19, r8_4);\n                                    rax_56 = memcmp(&var_20d8, &var_20c8, 0x10);\n                                    r11_5 = r11_4;\n                                    r10_4 = r10_3;\n                                    if (rax_56 != 0)\n                                    {\n                                        goto label_407315;\n                                    }\n                                    if (var_2188 != 0)\n                                    {\n                                        goto label_407327;\n                                    }\n                                    goto label_4072ed;\n                                }\n                            } while (rax_43 > r15_1);\n                        }\n                        goto label_406f79;\n                    }\n                    int64_t rcx_21;\n                    int64_t rdx_26;\n                    int64_t r8_5;\n                    rcx_21 = sub_40b360(r14_1, r11_2, &var_20b8);\n                    sub_40b250(&var_20b8, &var_20d8, rdx_26, rcx_21, r8_5);\n                    int32_t* rbp_5 = var_2118;\n                    int64_t rcx_22;\n                    int64_t rdx_28;\n                    int64_t r8_6;\n                    rcx_22 = sub_40b360(r15, r10_2, rbp_5);\n                    sub_40b250(rbp_5, &var_20c8, rdx_28, rcx_22, r8_6);\n                    int32_t rax_64 = memcmp(&var_20d8, &var_20c8, 0x10);\n                    r10_4 = r10_2;\n                    r11_5 = r11_2;\n                    var_2188 = rax_64;\n                    int32_t rax_65;\n                    if (rax_64 != 0)\n                    {\n                        var_2138_1 = nullptr;\n                    }\n                    else\n                    {\n                        var_2160_8 = r10_4;\n                        rbx_4 = r11_5;\n                        r13_4 = r14_1;\n                        var_2130_1 = r15;\n                        var_2138_1 = nullptr;\n                    label_4072ed:\n                        uint64_t rdx_29 = var_2160_8;\n                        if (rbx_4 <= var_2160_8)\n                        {\n                            rdx_29 = rbx_4;\n                        }\n                        rax_65 = memcmp(r13_4, var_2130_1, rdx_29);\n                        var_2188 = rax_65;\n                        if (rax_65 == 0)\n                        {\n                            bool c_3 = rbx_4 < var_2160_8;\n                            int32_t rax_66;\n                            rax_66 = (rbx_4 != var_2160_8 && (!c_3));\n                            rax_56 = (rax_66 - 0);\n                        label_407315:\n                            var_2188 = rax_56;\n                        }\n                    }\n                    if (((rax_64 != 0 || (rax_64 == 0 && rax_65 == 0)) || (rax_64 == 0 && rax_65 != 0)))\n                    {\n                    label_407327:\n                        free(var_2138_1);\n                        r11_2 = r11_5;\n                        r10_2 = r10_4;\n                    }\n                }\n                else if (*(r12 + 0x38) != 0)\n                {\n                    int32_t rax_2;\n                    rax_2 = sub_40b900(r14_1, r15);\n                    var_2188 = rax_2;\n                }\n                else if (r11_2 == 0)\n                {\n                    int32_t rax_37;\n                    rax_37 = r10_2 != 0;\n                    var_2188 = (-rax_37);\n                }\n                else\n                {\n                    var_2188 = 1;\n                    if (r10_2 != 0)\n                    {\n                        int32_t rax_63;\n                        rax_63 = sub_4115c0(r14_1, (r11_2 + 1), r15, (r10_2 + 1));\n                        var_2188 = rax_63;\n                    }\n                }\n            }\n            if (rcx_2 == 0)\n            {\n                r14_1[r11_2] = var_2162;\n                r15[r10_2] = var_2161;\n                goto label_4066f9;\n            }\n            free(var_2128);\n            if (var_2188 == 0)\n            {\n                goto label_406701;\n            }\n            goto label_406810;\n        }\n        if ((*(r12 + 0x30) & 0xffffffffff0000) != 0)\n        {\n            goto label_406640;\n        }\n        if (*(r12 + 0x38) != 0)\n        {\n            goto label_406640;\n        }\n        int64_t r14_7;\n        if (rbp_1 != 0)\n        {\n            char* rcx_8 = r14_1;\n            char* r8_2 = r14_1;\n            bool c_1;\n            if (r13_1 == 0)\n            {\n                while (true)\n                {\n                    if ((r8_2 >= rbx || (r8_2 < rbx && *(rbp_1 + *r8_2) == 0)))\n                    {\n                        if (r15 >= rax_1)\n                        {\n                            break;\n                        }\n                        while (*(rbp_1 + *r15) != 0)\n                        {\n                            r15 = &r15[1];\n                            if (rax_1 == r15)\n                            {\n                                break;\n                            }\n                        }\n                        if (*(rbp_1 + *r15) != 0)\n                        {\n                            r15 = rax_1;\n                            break;\n                        }\n                        if (rbx <= r8_2)\n                        {\n                            break;\n                        }\n                        if (rax_1 <= r15)\n                        {\n                            break;\n                        }\n                        uint32_t rdx_9 = *r8_2;\n                        uint32_t rcx_9 = *r15;\n                        rdx = (rdx_9 - rcx_9);\n                        if (rdx_9 != rcx_9)\n                        {\n                            break;\n                        }\n                        r15 = &r15[1];\n                    }\n                    r8_2 = &r8_2[1];\n                }\n                if ((r15 < rax_1 && *(rbp_1 + *r15) != 0))\n                {\n                    c_1 = r8_2 < rbx;\n                label_406bee:\n                    rdx = c_1;\n                    rax_1 = rax_1 > r15;\n                    rdx = (rdx - rax_1);\n                    var_2188 = rdx;\n                    goto label_4066f9;\n                }\n            label_407384:\n                var_2188 = rdx;\n                r14_7 = r12;\n                goto label_40738a;\n            }\n            while (true)\n            {\n                if ((rcx_8 >= rbx || (rcx_8 < rbx && *(rbp_1 + *rcx_8) == 0)))\n                {\n                    if (r15 >= rax_1)\n                    {\n                        break;\n                    }\n                    while (*(rbp_1 + *r15) != 0)\n                    {\n                        r15 = &r15[1];\n                        if (rax_1 == r15)\n                        {\n                            break;\n                        }\n                    }\n                    if (*(rbp_1 + *r15) != 0)\n                    {\n                        r15 = rax_1;\n                        break;\n                    }\n                    if (rbx <= rcx_8)\n                    {\n                        break;\n                    }\n                    if (rax_1 <= r15)\n                    {\n                        break;\n                    }\n                    uint32_t rdx_8 = *(r13_1 + *rcx_8);\n                    uint32_t rsi_11 = *(r13_1 + *r15);\n                    rdx = (rdx_8 - rsi_11);\n                    if (rdx_8 != rsi_11)\n                    {\n                        break;\n                    }\n                    r15 = &r15[1];\n                }\n                rcx_8 = &rcx_8[1];\n            }\n            if ((!(r15 < rax_1 && *(rbp_1 + *r15) != 0)))\n            {\n                goto label_407384;\n            }\n            c_1 = rcx_8 < rbx;\n            goto label_406bee;\n        }\n        if (r11_2 != 0)\n        {\n            if (r10_2 == 0)\n            {\n                r14_7 = r12;\n                var_2188 = 1;\n            label_40738a:\n                if (*(r14_7 + 0x37) == 0)\n                {\n                    break;\n                }\n            label_407395:\n                var_2188 = (-var_2188);\n                break;\n            }\n            if (r13_1 == 0)\n            {\n                uint64_t rdx_32 = r10_2;\n                if (r11_2 <= r10_2)\n                {\n                    rdx_32 = r11_2;\n                }\n                rax_1 = memcmp(r14_1, r15, rdx_32);\n                var_2188 = rax_1;\n                if (rax_1 != 0)\n                {\n                    goto label_406810;\n                }\n            label_407409:\n                bool cond:12_1 = r11_2 != r10_2;\n                if (r11_2 < r10_2)\n                {\n                    r14_7 = r12;\n                    var_2188 = 0xffffffff;\n                    goto label_40738a;\n                }\n                rax_1 = cond:12_1;\n                var_2188 = rax_1;\n                goto label_4066f9;\n            }\n            while (r14_1 < rbx)\n            {\n                if (r15 >= rax_1)\n                {\n                    break;\n                }\n                r14_1 = &r14_1[1];\n                r15 = &r15[1];\n                uint32_t rdx_31 = *(r13_1 + r14_1[-1]);\n                uint32_t rcx_24 = *(r13_1 + r15[-1]);\n                rdx = (rdx_31 - rcx_24);\n                if (rdx_31 != rcx_24)\n                {\n                    break;\n                }\n            }\n            if (r14_1 < rbx)\n            {\n                goto label_407384;\n            }\n            goto label_407409;\n        }\n        int32_t rax_69;\n        rax_69 = r10_2 != 0;\n        var_2188 = (-rax_69);\n    label_4066f9:\n        if (var_2188 != 0)\n        {\n        label_406810:\n            if (*(r12 + 0x37) == 0)\n            {\n                break;\n            }\n            goto label_407395;\n        }\n    label_406701:\n        r12 = *(r12 + 0x40);\n        if (r12 == 0)\n        {\n            break;\n        }\n        r14_1 = *arg1;\n        int64_t rbp_2 = arg1[1];\n        r15 = *arg2;\n        int64_t r11_3 = arg2[1];\n        if (*(r12 + 0x10) == -1)\n        {\n            rbx = &r14_1[(rbp_2 - 1)];\n            r10 = &r15[(r11_3 - 1)];\n        }\n        else\n        {\n            rbx = sub_406470(r14_1, rbp_2, r12);\n            char* rax_9;\n            rax_9 = sub_406470(r15, r11_3, r12);\n            r10 = rax_9;\n        }\n        if (((*(r12 + 0x10) == -1 && *r12 != -1) || (*(r12 + 0x10) != -1 && *r12 != -1)))\n        {\n            r14_1 = sub_406360(r14_1, rbp_2, r12);\n            void* rax_11;\n            rax_11 = sub_406360(r15, r11_3, r12);\n            r15 = rax_11;\n            continue;\n        }\n        if ((((*(r12 + 0x10) == -1 && *r12 == -1) || (*(r12 + 0x10) != -1 && *r12 == -1)) && *(r12 + 0x30) != 0))\n        {\n            if (rbx > r14_1)\n            {\n                while (*(*r14_1 + 0x61ca80) != 0)\n                {\n                    r14_1 = &r14_1[1];\n                    if (rbx == r14_1)\n                    {\n                        r14_1 = rbx;\n                        break;\n                    }\n                }\n            }\n            if (r10 > r15)\n            {\n                while (*(*r15 + 0x61ca80) != 0)\n                {\n                    r15 = &r15[1];\n                    if (r10 == r15)\n                    {\n                        r15 = r10;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    return var_2188;\n}\n\n"
        },
        {
            "funcName": "sub_4074d0",
            "funcStartAddr": "0x4074d0",
            "funcEndAddr": "0x407847",
            "decompiledFuncCode": "int64_t sub_4074d0(int64_t* arg1, FILE* arg2, uint64_t arg3)\n{\n    if (arg1[6] != 0)\n    {\n        return 0;\n    }\n    int64_t r9 = arg1[1];\n    int64_t rbx = data_61c750;\n    int64_t rbp = data_61c428;\n    void* r15 = *arg1;\n    char rsi = data_61c500;\n    uint64_t rdx = arg1[4];\n    int64_t rsi_1 = arg1[5];\n    int64_t rax;\n    if (r9 != rdx)\n    {\n        memmove(r15, (r15 + (r9 - rdx)), rdx);\n        r9 = arg1[4];\n        r15 = *arg1;\n        arg1[2] = 0;\n        arg1[1] = r9;\n        rax = 0;\n    }\n    else\n    {\n        rax = arg1[2];\n    }\n    void* rbp_1 = (rbp - 0x22);\n    int64_t rsi_3 = (rsi_1 + 1);\n    size_t r12 = arg1[3];\n    int32_t rsi_5 = rsi;\n    while (true)\n    {\n        void* r12_1 = (r12 + r15);\n        char* r14_1 = (r15 + r9);\n        int64_t* r13_2 = (r12_1 - (rax << 5));\n        void* r12_3 = ((r12_1 - (rsi_1 * rax)) - r14_1);\n        void* r13_3;\n        int64_t* r14_2;\n        char* r15_1;\n        if (rax == 0)\n        {\n            r15_1 = r14_1;\n            r14_2 = r13_2;\n            r13_3 = r15;\n        }\n        else\n        {\n            r15_1 = r14_1;\n            r14_2 = r13_2;\n            r13_3 = (r13_2[1] + *r13_2);\n        }\n        int64_t rax_19;\n        int64_t rdx_11;\n        int64_t rdi_7;\n        while (true)\n        {\n            if (r12_3 > rsi_3)\n            {\n                uint64_t temp0_1 = (COMBINE(0, (r12_3 - 1)) / rsi_3);\n                uint64_t rax_3 = fread_unlocked(r15_1, 1, temp0_1, arg2);\n                r12_3 = (r12_3 - rax_3);\n                char* var_70_1 = &r15_1[rax_3];\n                void* r10_1;\n                void* r15_2;\n                if (temp0_1 != rax_3)\n                {\n                    char rax_5 = arg2->_flags;\n                    if ((rax_5 & 0x20) != 0)\n                    {\n                        sub_405dd0(dcgettext(nullptr, \"read failed\", 5), arg3);\n                        /* no return */\n                    }\n                    if ((rax_5 & 0x10) == 0)\n                    {\n                        goto label_4077b0;\n                    }\n                    arg1[6] = 1;\n                    if (*arg1 == var_70_1)\n                    {\n                        return 0;\n                    }\n                    if (r13_3 == var_70_1)\n                    {\n                        goto label_4077b0;\n                    }\n                    if (var_70_1[-1] == rsi)\n                    {\n                        goto label_4077b0;\n                    }\n                    *var_70_1 = rsi;\n                    void* rax_8 = &var_70_1[1];\n                    r10_1 = r15_1;\n                    var_70_1 = rax_8;\n                    r15_2 = rax_8;\n                    goto label_407662;\n                }\n            label_4077b0:\n                r10_1 = r15_1;\n                r15_2 = var_70_1;\n            label_407662:\n                while (true)\n                {\n                    char* rax_10 = sub_413030(r10_1, rsi_5, (r15_2 - r10_1));\n                    if (rax_10 == 0)\n                    {\n                        break;\n                    }\n                    r10_1 = &rax_10[1];\n                    r14_2 = (r14_2 - 0x20);\n                    *rax_10 = 0;\n                    *r14_2 = r13_3;\n                    void* r11_3 = (r10_1 - r13_3);\n                    r14_2[1] = r11_3;\n                    if (rbp_1 < r11_3)\n                    {\n                        rbp_1 = r11_3;\n                    }\n                    r12_3 = (r12_3 - rsi_1);\n                    if (rbx != 0)\n                    {\n                        if (*(rbx + 0x10) != -1)\n                        {\n                            rax_10 = sub_406470(r13_3, r11_3, rbx);\n                        }\n                        bool cond:2_1 = *rbx != -1;\n                        r14_2[3] = rax_10;\n                        if (cond:2_1)\n                        {\n                            r14_2[2] = sub_406360(r13_3, r11_3, rbx);\n                        }\n                        else\n                        {\n                            if (*(rbx + 0x30) != 0)\n                            {\n                                while (*(*r13_3 + 0x61ca80) != 0)\n                                {\n                                    r13_3 = (r13_3 + 1);\n                                }\n                            }\n                            r14_2[2] = r13_3;\n                        }\n                    }\n                    r13_3 = r10_1;\n                }\n                r15_1 = var_70_1;\n                if (arg1[6] == 0)\n                {\n                    continue;\n                }\n            }\n            rdi_7 = *arg1;\n            rdx_11 = arg1[3];\n            arg1[1] = (r15_1 - rdi_7);\n            rax_19 = (((rdi_7 + rdx_11) - r14_2) >> 5);\n            arg1[2] = rax_19;\n            break;\n        }\n        if (rax_19 != 0)\n        {\n            data_61c428 = (rbp_1 + 0x22);\n            arg1[4] = (r15_1 - r13_3);\n            return 1;\n        }\n        uint64_t rax_21 = (rdx_11 >> 5);\n        if (rdi_7 != 0)\n        {\n            if (rdx_11 > 0x555555555555553f)\n            {\n                break;\n            }\n            r12 = (((rax_21 + (rdx_11 >> 6)) + 1) << 5);\n        }\n        else if (rdx_11 <= 0x1f)\n        {\n            r12 = 0x80;\n        }\n        else\n        {\n            size_t rax_25 = (rax_21 << 5);\n            if (rax_25 < 0)\n            {\n                break;\n            }\n            r12 = rax_25;\n        }\n        r15 = sub_411270(rdi_7, r12);\n        *arg1 = r15;\n        r9 = arg1[1];\n        arg1[3] = r12;\n        rax = arg1[2];\n    }\n    sub_411460();\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_407880",
            "funcStartAddr": "0x407880",
            "funcEndAddr": "0x407890",
            "decompiledFuncCode": "int64_t sub_407880(void* arg1)\n{\n    /* tailcall */\n    return pthread_sigmask(2, (arg1 + 8), nullptr);\n}\n\n"
        },
        {
            "funcName": "sub_407890",
            "funcStartAddr": "0x407890",
            "funcEndAddr": "0x40791e",
            "decompiledFuncCode": "void sub_407890(void* arg1)\n{\n    if (data_61c6a8 != 0)\n    {\n        int64_t rbx_1 = data_61c6a8;\n        void var_90;\n        int32_t rax_1;\n        rax_1 = pthread_sigmask(0, &data_61c6c0, &var_90) == 0;\n        char var_98 = rax_1;\n        if (rbx_1 != 0)\n        {\n            do\n            {\n                unlink((rbx_1 + 0xd));\n                rbx_1 = *rbx_1;\n            } while (rbx_1 != 0);\n            rax_1 = var_98;\n        }\n        data_61c6a8 = 0;\n        if (rax_1 != 0)\n        {\n            sub_407880(&var_98);\n            sub_40a9f0();\n            return;\n        }\n    }\n    sub_40a9f0();\n}\n\n"
        },
        {
            "funcName": "sub_407920",
            "funcStartAddr": "0x407920",
            "funcEndAddr": "0x407a2d",
            "decompiledFuncCode": "int64_t sub_407920(uint64_t arg1)\n{\n    int64_t r13 = 0x61c6a8;\n    int64_t rbx = data_61c6a8;\n    if (arg1 != (rbx + 0xd))\n    {\n        int64_t rax_1 = *rbx;\n        if ((rax_1 + 0xd) != arg1)\n        {\n            do\n            {\n                rbx = rax_1;\n                rax_1 = *rbx;\n            } while ((rax_1 + 0xd) != arg1);\n        }\n        r13 = rbx;\n        rbx = rax_1;\n    }\n    if (*(rbx + 0xc) == 1)\n    {\n        sub_4060a0(*(rbx + 8));\n    }\n    int64_t r12 = *rbx;\n    void var_c0;\n    bool var_c8 = pthread_sigmask(0, &data_61c6c0, &var_c0) == 0;\n    int32_t rax_3 = unlink(arg1);\n    bool cond:0 = var_c8 != 0;\n    int32_t r15 = *__errno_location();\n    *r13 = r12;\n    if (cond:0)\n    {\n        sub_407880(&var_c8);\n    }\n    if (((cond:0 && rax_3 != 0) || ((!cond:0) && rax_3 != 0)))\n    {\n        error(0, r15, dcgettext(nullptr, \"warning: cannot remove: %s\", 5), sub_40f700(0, 3, arg1));\n        if (r12 == 0)\n        {\n            goto label_407a17;\n        }\n    }\n    if ((((cond:0 && rax_3 == 0) || ((!cond:0) && rax_3 == 0)) && r12 == 0))\n    {\n    label_407a17:\n        data_61c418 = r13;\n    }\n    return free(rbx);\n}\n\n"
        },
        {
            "funcName": "sub_407a30",
            "funcStartAddr": "0x407a30",
            "funcEndAddr": "0x407bf4",
            "decompiledFuncCode": "uint64_t sub_407a30(int64_t* arg1, int64_t arg2)\n{\n    pid_t r13_1;\n    if (sub_40da00(arg1, 0x80000) < 0)\n    {\n        r13_1 = -1;\n    }\n    else\n    {\n        int512_t zmm0;\n        if ((data_61c420 + 1) < data_61c69c)\n        {\n            sub_405fb0(0xffffffff);\n            while (data_61c69c > 0)\n            {\n                int32_t rax_9;\n                rax_9 = sub_405fb0(0);\n                if (rax_9 == 0)\n                {\n                    break;\n                }\n            }\n        }\n        int32_t* rax_3 = __errno_location();\n        int64_t rbx_1 = (arg2 - 1);\n        double var_e0_1 = 0.25;\n        while (true)\n        {\n            void var_c0;\n            int32_t rax_7 = pthread_sigmask(0, &data_61c6c0, &var_c0);\n            int64_t r12_1 = data_61c6a8;\n            data_61c6a8 = 0;\n            bool var_c8 = rax_7 == 0;\n            pid_t rax_4 = fork();\n            int32_t r15_1 = *rax_3;\n            r13_1 = rax_4;\n            bool cond:0_1;\n            if (rax_4 != 0)\n            {\n                cond:0_1 = var_c8 != 0;\n                data_61c6a8 = r12_1;\n            }\n            if (((rax_4 != 0 && cond:0_1) || (rax_4 == 0 && var_c8 != 0)))\n            {\n                sub_407880(&var_c8);\n            }\n            if ((((rax_4 != 0 && cond:0_1) || (rax_4 == 0 && var_c8 != 0)) || (rax_4 != 0 && (!cond:0_1))))\n            {\n                *rax_3 = r15_1;\n                bool cond:1_1 = rax_4 == 0;\n                if (rax_4 < 0)\n                {\n                    if (r15_1 == 0xb)\n                    {\n                        zmm0 = var_e0_1;\n                        sub_411620();\n                        var_e0_1 = (var_e0_1 + var_e0_1);\n                        while (data_61c69c > 0)\n                        {\n                            int32_t rax_6;\n                            rax_6 = sub_405fb0(0);\n                            if (rax_6 == 0)\n                            {\n                                break;\n                            }\n                        }\n                        rbx_1 = (rbx_1 - 1);\n                        if (rbx_1 != -1)\n                        {\n                            continue;\n                        }\n                        else\n                        {\n                            r15_1 = *rax_3;\n                        }\n                    }\n                    close(*arg1);\n                    close(*(arg1 + 4));\n                    *rax_3 = r15_1;\n                    break;\n                }\n                if ((!cond:1_1))\n                {\n                    data_61c69c = (data_61c69c + 1);\n                    break;\n                }\n            }\n            r13_1 = 0;\n            close(0);\n            close(1);\n            break;\n        }\n    }\n    return r13_1;\n}\n\n"
        },
        {
            "funcName": "sub_407c00",
            "funcStartAddr": "0x407c00",
            "funcEndAddr": "0x407cd0",
            "decompiledFuncCode": "int64_t sub_407c00(char* arg1, int64_t* arg2, char* arg3)\n{\n    int64_t var_28;\n    int64_t var_20;\n    int32_t rax = sub_411b40(arg1, &var_28, 0xa, &var_20, &data_41655e[0x13]);\n    if (rax <= 4)\n    {\n        if ((rax == 0 || rax == 2))\n        {\n            *arg2 = var_20;\n        }\n        if ((rax == 1 || rax == 3))\n        {\n            *arg2 = -1;\n        }\n        if (rax == 4)\n        {\n            if (arg3 != 0)\n            {\n                char* rsi_2;\n                char* rdi_1;\n                rsi_2 = error(2, 0, dcgettext(nullptr, \"%s: invalid count at start of %s\", 5), dcgettext(nullptr, arg3, 5), sub_40f880(arg1));\n                /* tailcall */\n                return sub_407cd0(rdi_1, rsi_2);\n            }\n            return 0;\n        }\n    }\n    return var_28;\n}\n\n"
        },
        {
            "funcName": "sub_407cd0",
            "funcStartAddr": "0x407cd0",
            "funcEndAddr": "0x407dcc",
            "decompiledFuncCode": "FILE* sub_407cd0(char* arg1, char* arg2)\n{\n    char rax = *arg2;\n    bool c = rax < 0x72;\n    bool z = rax == 0x72;\n    if (z)\n    {\n        void* const rdi = &data_41814a;\n        int64_t rcx_1 = 2;\n        char* rsi_1 = arg1;\n        while (rcx_1 != 0)\n        {\n            char temp0_1 = *rsi_1;\n            char temp1_1 = *rdi;\n            c = temp0_1 < temp1_1;\n            z = temp0_1 == temp1_1;\n            rsi_1 = &rsi_1[1];\n            rdi = (rdi + 1);\n            rcx_1 = (rcx_1 - 1);\n            if ((!z))\n            {\n                break;\n            }\n        }\n        FILE* rbx_1;\n        if ((((!z) && (!c)) - 0) == 0)\n        {\n            data_61c758 = 1;\n            rbx_1 = stdin;\n        }\n        else\n        {\n            rbx_1 = nullptr;\n            int32_t rax_5 = open(arg1, 0x80000);\n            if (rax_5 >= 0)\n            {\n                rbx_1 = fdopen(rax_5, arg2);\n            }\n        }\n        sub_40b800(rbx_1, 2);\n        return rbx_1;\n    }\n    if (rax == 0x77)\n    {\n        int32_t rax_1;\n        if (arg1 != 0)\n        {\n            rax_1 = ftruncate(1);\n            if (rax_1 != 0)\n            {\n                error(2, *__errno_location(), dcgettext(nullptr, \"%s: error truncating\", 5), sub_40f700(0, 3, arg1));\n            }\n        }\n        if ((arg1 == 0 || (arg1 != 0 && rax_1 == 0)))\n        {\n            return stdout;\n        }\n    }\n    __assert_fail(\"!\"unexpected mode passed to stre\u2026\", \"src/sort.c\", 0x3cc, \"stream_open\");\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_407dd0",
            "funcStartAddr": "0x407dd0",
            "funcEndAddr": "0x407df0",
            "decompiledFuncCode": "int64_t sub_407dd0(uint64_t arg1) __noreturn\n{\n    sub_405dd0(dcgettext(nullptr, \"open failed\", 5), arg1);\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_407df0",
            "funcStartAddr": "0x407df0",
            "funcEndAddr": "0x407e6c",
            "decompiledFuncCode": "int64_t sub_407df0(FILE* arg1, uint64_t arg2)\n{\n    int64_t rax = fileno(arg1);\n    if (rax != 0)\n    {\n        char const* const rsi_1;\n        if (rax == 1)\n        {\n            rax = fflush_unlocked(arg1);\n            rsi_1 = \"fflush failed\";\n        }\n        else\n        {\n            rax = sub_411f80(arg1);\n            if (rax != 0)\n            {\n                rsi_1 = \"close failed\";\n            }\n        }\n        if ((rax == 1 || (rax != 1 && rax != 0)))\n        {\n            sub_405dd0(dcgettext(nullptr, rsi_1, 5), arg2);\n            /* no return */\n        }\n    }\n    else if ((arg1->_flags & 0x10) != 0)\n    {\n        /* tailcall */\n        return clearerr_unlocked(arg1);\n    }\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_407e70",
            "funcStartAddr": "0x407e70",
            "funcEndAddr": "0x408297",
            "decompiledFuncCode": "uint64_t sub_407e70(int64_t* arg1, FILE* arg2, uint64_t arg3)\n{\n    char* rbx = *arg1;\n    uint64_t r15 = arg1[1];\n    void* r12 = &rbx[r15];\n    uint64_t rax_2;\n    if ((arg3 == 0 && data_61c740 != 0))\n    {\n        if (rbx < r12)\n        {\n            do\n            {\n                rbx = &rbx[1];\n                char rax_3 = rbx[-1];\n                char* rdx_1;\n                char rsi;\n                if (rax_3 != 9)\n                {\n                    rsi = rax_3;\n                    if (r12 == rbx)\n                    {\n                        rsi = 0xa;\n                        rax_3 = 0xa;\n                    }\n                    rdx_1 = arg2->_IO_write_ptr;\n                }\n                else\n                {\n                    rsi = 0x3e;\n                    rax_3 = 0x3e;\n                    rdx_1 = arg2->_IO_write_ptr;\n                }\n                if (((rax_3 == 9 && arg2->_IO_write_end > rdx_1) || (rax_3 != 9 && arg2->_IO_write_end > rdx_1)))\n                {\n                    arg2->_IO_write_ptr = &rdx_1[1];\n                    *rdx_1 = rax_3;\n                }\n                if ((((rax_3 == 9 && arg2->_IO_write_end <= rdx_1) || (rax_3 != 9 && arg2->_IO_write_end <= rdx_1)) && __overflow(arg2, rsi) == 0xffffffff))\n                {\n                    sub_405dd0(dcgettext(nullptr, \"write failed\", 5), 0);\n                    /* no return */\n                }\n            } while (r12 != rbx);\n            rbx = *arg1;\n            r15 = arg1[1];\n        }\n        int64_t r12_1 = data_61c750;\n        char* r14_1 = &rbx[(r15 - 1)];\n        char* rbp_1;\n        if (r12_1 != 0)\n        {\n            do\n            {\n                int64_t r10_1 = *r12_1;\n                int64_t r11_1 = *(r12_1 + 0x10);\n                if (r10_1 == -1)\n                {\n                    rbp_1 = rbx;\n                }\n                else\n                {\n                    rbp_1 = sub_406360(rbx, r15, r12_1);\n                }\n                if (((r10_1 == -1 && r11_1 != -1) || (r10_1 != -1 && r11_1 != -1)))\n                {\n                    r14_1 = sub_406470(rbx, r15, r12_1);\n                }\n                if ((((((r10_1 == -1 && r11_1 != -1) || (r10_1 != -1 && r11_1 != -1)) || (r10_1 == -1 && r11_1 == -1)) && *(r12_1 + 0x30) != 0) && r10_1 == -1))\n                {\n                    goto label_407ff6;\n                }\n                if (*(r12_1 + 0x36) != 0)\n                {\n                label_407ff6:\n                    char r15_1 = *r14_1;\n                    *r14_1 = 0;\n                    if (*(*rbp_1 + 0x61ca80) != 0)\n                    {\n                        do\n                        {\n                            rbp_1 = &rbp_1[1];\n                        } while (*(*rbp_1 + 0x61ca80) != 0);\n                    }\n                    char* var_48 = rbp_1;\n                    if (rbp_1 <= r14_1)\n                    {\n                        if (*(r12_1 + 0x36) != 0)\n                        {\n                            sub_405a40(rbp_1, &var_48);\n                        }\n                        if ((*(r12_1 + 0x36) == 0 && *(r12_1 + 0x34) != 0))\n                        {\n                            strtold(rbp_1, &var_48);\n                            /* unimplemented  {fstp st0, st0} */;\n                            /* unimplemented  {fstp st0, st0} */;\n                            int16_t top = (top + 1);\n                        }\n                    }\n                    if ((rbp_1 > r14_1 || (((rbp_1 <= r14_1 && *(r12_1 + 0x36) == 0) && *(r12_1 + 0x34) == 0) && (*(r12_1 + 0x30) & 0xff0000ff0000) == 0)))\n                    {\n                        var_48 = r14_1;\n                    }\n                    if ((((rbp_1 <= r14_1 && *(r12_1 + 0x36) == 0) && *(r12_1 + 0x34) == 0) && (*(r12_1 + 0x30) & 0xff0000ff0000) != 0))\n                    {\n                        void* rax_10 = rbp_1;\n                        if (rbp_1 < r14_1)\n                        {\n                            void* const rax_11;\n                            rax_11 = *rbp_1 == 0x2d;\n                            rax_10 = (rax_11 + rbp_1);\n                        }\n                        void* var_40 = rax_10;\n                        if (sub_405930(&var_40) > 0x2f)\n                        {\n                            void* rax_13 = var_40;\n                            if (*(r12_1 + 0x35) != 0)\n                            {\n                                rax_13 = (rax_13 - -1);\n                            }\n                            var_48 = rax_13;\n                        }\n                    }\n                    *r14_1 = r15_1;\n                    r14_1 = var_48;\n                }\n                else if ((*(r12_1 + 0x30) & 0xffff00ff0000) != 0)\n                {\n                    goto label_407ff6;\n                }\n            label_4080b8:\n                int64_t r15_2 = sub_405eb0(rbx, rbp_1);\n                int64_t rbx_1 = sub_405eb0(rbp_1, r14_1);\n            label_4080e8:\n                r15_2 = (r15_2 - 1);\n                if (r15_2 != -1)\n                {\n                    uint64_t* const rdi_8 = stdout;\n                    char* rax_16 = stdout[5];\n                    if (rax_16 >= stdout[6])\n                    {\n                        __overflow(rdi_8, 0x20);\n                        goto label_4080e8;\n                    }\n                    stdout[5] = &rax_16[1];\n                    *rax_16 = 0x20;\n                    goto label_4080e8;\n                }\n                if (rbx_1 == 0)\n                {\n                    rax_2 = __printf_chk(1, dcgettext(nullptr, \"^ no match for key\\n\", 5));\n                }\n                else\n                {\n                label_408100:\n                    uint64_t* const rdi_9 = stdout;\n                    char* rax_17 = stdout[5];\n                    if (rax_17 >= stdout[6])\n                    {\n                        __overflow(rdi_9, 0x5f);\n                    }\n                    else\n                    {\n                        stdout[5] = &rax_17[1];\n                        *rax_17 = 0x5f;\n                    }\n                    int64_t temp0_1 = rbx_1;\n                    rbx_1 = (rbx_1 - 1);\n                    if (temp0_1 != 1)\n                    {\n                        goto label_408100;\n                    }\n                    FILE* rdi_10 = stdout;\n                    rax_2 = stdout[5];\n                    if (rax_2 >= stdout[6])\n                    {\n                        rax_2 = __overflow(rdi_10, 0xa);\n                    }\n                    else\n                    {\n                        stdout[5] = (rax_2 + 1);\n                        *rax_2 = 0xa;\n                    }\n                }\n                if (r12_1 == 0)\n                {\n                    return rax_2;\n                }\n                r12_1 = *(r12_1 + 0x40);\n                if (r12_1 == 0)\n                {\n                    if (data_61c759 != 0)\n                    {\n                        goto label_407ed0;\n                    }\n                    if (data_61c75a != 0)\n                    {\n                        goto label_407ed0;\n                    }\n                    rbp_1 = *arg1;\n                    rbx = rbp_1;\n                    r14_1 = &rbp_1[(arg1[1] - 1)];\n                    goto label_4080b8;\n                }\n                rbx = *arg1;\n                r15 = arg1[1];\n                r14_1 = &rbx[(r15 - 1)];\n            } while (r12_1 != 0);\n        }\n        rbp_1 = rbx;\n        goto label_4080b8;\n    }\n    *(r12 - 1) = data_61c500;\n    rax_2 = fwrite_unlocked(rbx, 1, r15, arg2);\n    if (r15 != rax_2)\n    {\n        sub_405dd0(dcgettext(nullptr, \"write failed\", 5), arg3);\n        /* no return */\n    }\n    *(r12 - 1) = 0;\nlabel_407ed0:\n    return rax_2;\n}\n\n"
        },
        {
            "funcName": "sub_4082a0",
            "funcStartAddr": "0x4082a0",
            "funcEndAddr": "0x408370",
            "decompiledFuncCode": "uint64_t sub_4082a0(int64_t* arg1, char** arg2)\n{\n    char** rbp = arg2;\n    char** rbx = arg1;\n    uint64_t rax_1;\n    if (data_61c750 != 0)\n    {\n        rax_1 = sub_4065b0(arg1, arg2);\n    }\n    if ((data_61c750 == 0 || (((data_61c750 != 0 && rax_1 == 0) && data_61c759 == 0) && data_61c75a == 0)))\n    {\n        uint64_t r12_1 = rbx[1];\n        int64_t r14_1 = rbp[1];\n        uint64_t r13_1 = (r14_1 - 1);\n        uint64_t r15_2 = (r12_1 - 1);\n        if (r12_1 == 1)\n        {\n            int32_t rax_2;\n            rax_2 = r13_1 != 0;\n            rax_1 = (-rax_2);\n        }\n        else\n        {\n            rax_1 = 1;\n            if (r13_1 != 0)\n            {\n                char* rsi = *rbp;\n                char* rdi = *rbx;\n                if (data_61cba1 != 0)\n                {\n                    rax_1 = sub_4115c0(rdi, r12_1, rsi, r14_1);\n                }\n                else\n                {\n                    uint64_t rdx_3 = r13_1;\n                    if (r15_2 <= r13_1)\n                    {\n                        rdx_3 = r15_2;\n                    }\n                    rax_1 = memcmp(rdi, rsi, rdx_3);\n                    if (rax_1 == 0)\n                    {\n                        rax_1 = 0xffffffff;\n                        if (r15_2 >= r13_1)\n                        {\n                            rax_1 = r12_1 != r14_1;\n                        }\n                    }\n                }\n            }\n        }\n        int32_t rdx_2 = (-rax_1);\n        if (data_61c75b != 0)\n        {\n            rax_1 = rdx_2;\n        }\n    }\n    return rax_1;\n}\n\n"
        },
        {
            "funcName": "sub_408370",
            "funcStartAddr": "0x408370",
            "funcEndAddr": "0x4085c6",
            "decompiledFuncCode": "int64_t sub_408370(int128_t* arg1, int64_t arg2, int128_t* arg3, char arg4)\n{\n    int128_t* rbp = arg1;\n    int128_t* rbx = arg3;\n    uint64_t rax_3;\n    if (arg2 == 2)\n    {\n        rax_3 = sub_4082a0(&arg1[-2], &arg1[-4]);\n        int128_t zmm0_1;\n        int128_t zmm1_1;\n        if (arg4 != 0)\n        {\n            rax_3 = rax_3 > 0;\n            uint32_t rax_5 = rax_3;\n            int64_t rax_8 = ((rax_5 - 2) << 5);\n            void* rdx_7 = &rbp[((!rax_5) * 2)];\n            void* rbp_1 = (rbp + rax_8);\n            zmm1_1 = *(rdx_7 + 0x10);\n            rbx[-2] = *rdx_7;\n            zmm0_1 = *rbp_1;\n            rbx[-1] = zmm1_1;\n            zmm1_1 = *(rbp_1 + 0x10);\n            rbx[-4] = zmm0_1;\n            rbx[-3] = zmm1_1;\n            return rax_8;\n        }\n        if (rax_3 > 0)\n        {\n            zmm1_1 = rbp[-2];\n            zmm0_1 = rbp[-1];\n            int128_t zmm2_2 = rbp[-4];\n            int128_t zmm3_2 = rbp[-3];\n            rbx[-2] = zmm1_1;\n            rbx[-1] = zmm0_1;\n            rbp[-2] = zmm2_2;\n            rbp[-1] = zmm3_2;\n            rbp[-4] = zmm1_1;\n            rbp[-3] = zmm0_1;\n        }\n    }\n    else\n    {\n        uint64_t r12_2 = (arg2 >> 1);\n        int64_t r15_2 = (arg2 - r12_2);\n        int64_t r13_3 = (-(r12_2 << 5));\n        void* rax = (arg1 + r13_3);\n        int32_t var_40;\n        char** r13_4;\n        if (arg4 != 0)\n        {\n            r13_4 = (r13_3 + arg3);\n            sub_408370(rax, r15_2, r13_4, 1);\n            if (arg2 > 3)\n            {\n                sub_408370(rbp, r12_2, rbx, 0);\n            }\n        }\n        else\n        {\n            var_40 = rax;\n            sub_408370(rax, r15_2);\n            char** rax_1 = var_40;\n            if (arg2 > 3)\n            {\n                var_40 = rax_1;\n                sub_408370(rbp, r12_2, rbx, 1);\n                r13_4 = var_40;\n                int128_t* rax_10 = rbx;\n                rbx = rbp;\n                rbp = rax_10;\n            }\n            else\n            {\n                int128_t zmm1 = rbp[-1];\n                r13_4 = rax_1;\n                int128_t* rax_2 = rbx;\n                rbx[-2] = rbp[-2];\n                rbx[-1] = zmm1;\n                rbx = rbp;\n                rbp = rax_2;\n            }\n        }\n        void* rdx = &rbp[-2];\n        char** r14_2 = &r13_4[-4];\n        while (true)\n        {\n            var_40 = rdx;\n            rbx = (rbx - 0x20);\n            rax_3 = sub_4082a0(rdx, r14_2);\n            rdx = var_40;\n            if (rax_3 <= 0)\n            {\n                *rbx = rbp[-2];\n                rbx[1] = rbp[-1];\n                uint64_t temp0_1 = r12_2;\n                r12_2 = (r12_2 - 1);\n                if (temp0_1 == 1)\n                {\n                    break;\n                }\n                rbp = rdx;\n                rdx = (rdx - 0x20);\n            }\n            else\n            {\n                *rbx = *(r13_4 - 0x20);\n                rbx[1] = *(r13_4 - 0x10);\n                int64_t temp1_1 = r15_2;\n                r15_2 = (r15_2 - 1);\n                if (temp1_1 == 1)\n                {\n                    int64_t rax_4 = -0x20;\n                    uint64_t temp2_1;\n                    do\n                    {\n                        *(rbx + rax_4) = *(rbp + rax_4);\n                        *((rbx + rax_4) + 0x10) = *((rbp + rax_4) + 0x10);\n                        rax_4 = (rax_4 - 0x20);\n                        temp2_1 = r12_2;\n                        r12_2 = (r12_2 - 1);\n                    } while (temp2_1 != 1);\n                    return rax_4;\n                }\n                r13_4 = r14_2;\n                r14_2 = (r14_2 - 0x20);\n            }\n        }\n    }\n    return rax_3;\n}\n\n"
        },
        {
            "funcName": "sub_4085d0",
            "funcStartAddr": "0x4085d0",
            "funcEndAddr": "0x408637",
            "decompiledFuncCode": "uint64_t sub_4085d0(int64_t* arg1, FILE* arg2, uint64_t arg3)\n{\n    if (data_61c759 != 0)\n    {\n        if (data_61cb80 != 0)\n        {\n            uint64_t rax_1 = sub_4082a0(arg1, &data_61cb80);\n            if (rax_1 == 0)\n            {\n                return rax_1;\n            }\n        }\n        *data_61cb80 = *arg1;\n        data_61cb90 = *(arg1 + 0x10);\n    }\n    /* tailcall */\n    return sub_407e70(arg1, arg2, arg3);\n}\n\n"
        },
        {
            "funcName": "sub_408640",
            "funcStartAddr": "0x408640",
            "funcEndAddr": "0x408e08",
            "decompiledFuncCode": "int64_t sub_408640(int64_t arg1, int64_t arg2, uint64_t arg3, FILE* arg4, \n    uint64_t arg5, int64_t* arg6)\n{\n    uint64_t var_c0 = arg3;\n    int64_t var_70 = arg2;\n    int64_t rax;\n    bool rdx;\n    rdx = HIGHD((0x38 * arg3));\n    rax = LOWD((0x38 * arg3));\n    bool o = ((0x38 * arg3) >> 0x40) != 0;\n    if ((rax >= 0 && o == 0))\n    {\n        int64_t rbx_1 = (var_c0 << 3);\n        int64_t rax_1 = sub_411210(((rbx_1 - var_c0) << 3));\n        uint64_t rax_3;\n        rax_3 = (var_c0 >> 0x3d) != 0;\n        if ((rbx_1 >= 0 && rax_3 == 0))\n        {\n            int64_t r15 = 0;\n            int64_t* r13 = sub_411210(rbx_1);\n            int64_t* rax_6 = sub_411210(rbx_1);\n            int64_t var_58 = 0;\n            void* rbx_2 = sub_411210(rbx_1);\n            int64_t rax_8 = data_61c750;\n            if (var_c0 != 0)\n            {\n                while (true)\n                {\n                    int64_t rbx_3 = (r15 << 3);\n                    int64_t* r13_1 = (rax_1 + ((rbx_3 - r15) << 3));\n                    uint64_t temp0_1 = (COMBINE(0, data_61c778) / var_c0);\n                    uint64_t rdx_3 = data_61c428;\n                    if (temp0_1 >= rdx_3)\n                    {\n                        rdx_3 = temp0_1;\n                    }\n                    sub_405e30(r13_1, 0x20, rdx_3);\n                    void* r10_1 = (arg6 + rbx_3);\n                    uint64_t* rbp_3 = ((r15 << 4) + arg1);\n                    if (sub_4074d0(r13_1, *r10_1, *rbp_3) == 0)\n                    {\n                        sub_407df0(*r10_1, *rbp_3);\n                        if (var_70 > r15)\n                        {\n                            var_70 = (var_70 - 1);\n                            sub_407920(*rbp_3);\n                        }\n                        free(*r13_1);\n                        uint64_t rsi_14 = (var_c0 - 1);\n                        if (rsi_14 <= r15)\n                        {\n                            var_c0 = rsi_14;\n                            break;\n                        }\n                        int64_t rdx_27 = ((var_c0 << 3) - 8);\n                        do\n                        {\n                            int64_t rax_49 = *((arg6 + rbx_3) + 8);\n                            *(arg1 + (rbx_3 << 1)) = *((arg1 + (rbx_3 << 1)) + 0x10);\n                            *(arg6 + rbx_3) = rax_49;\n                            rbx_3 = (rbx_3 + 8);\n                        } while (rdx_27 != rbx_3);\n                        var_c0 = rsi_14;\n                    }\n                    else\n                    {\n                        int64_t rax_15 = (r13_1[3] + *r13_1);\n                        r13[r15] = (rax_15 - 0x20);\n                        rax_6[r15] = (rax_15 - (r13_1[2] << 5));\n                        r15 = (r15 + 1);\n                        if (r15 >= var_c0)\n                        {\n                            break;\n                        }\n                    }\n                }\n                if (var_c0 != 0)\n                {\n                    int64_t rax_17 = 0;\n                    do\n                    {\n                        *(rbx_2 + (rax_17 << 3)) = rax_17;\n                        rax_17 = (rax_17 + 1);\n                    } while (rax_17 != var_c0);\n                    if (var_c0 != 1)\n                    {\n                        int64_t* rdx_9 = r13;\n                        int64_t rbp_4 = 1;\n                        while (true)\n                        {\n                            int64_t rax_18 = (rbp_4 << 3);\n                            int64_t* r12_2 = (rbx_2 + rax_18);\n                            int64_t* r15_1 = ((rbx_2 + rax_18) - 8);\n                            int64_t rbx_4 = *r12_2;\n                            int64_t r14_3 = *r15_1;\n                            if (sub_4082a0(rdx_9[r14_3], rdx_9[rbx_4]) > 0)\n                            {\n                                *r15_1 = rbx_4;\n                                rbp_4 = 1;\n                                *r12_2 = r14_3;\n                            }\n                            else\n                            {\n                                rbp_4 = (rbp_4 + 1);\n                                if (rbp_4 >= var_c0)\n                                {\n                                    break;\n                                }\n                            }\n                        }\n                        r13 = rdx_9;\n                    }\n                    uint64_t var_68_1 = 0;\n                    void* rax_20 = (rbx_2 - 8);\n                    int64_t* r14_4 = r13;\n                    int64_t* var_a0_2 = nullptr;\n                    while (true)\n                    {\n                        int64_t rax_21 = *rbx_2;\n                        int64_t r15_2 = (rax_21 << 3);\n                        int64_t var_c8_2 = rax_21;\n                        int64_t* r12_3 = (r14_4 + r15_2);\n                        char** r13_3 = *r12_3;\n                        if (data_61c759 == 0)\n                        {\n                            sub_407e70(r13_3, arg4, arg5);\n                        }\n                        else\n                        {\n                            int32_t rax_23;\n                            if (var_a0_2 != 0)\n                            {\n                                rax_23 = sub_4082a0(var_a0_2, r13_3);\n                                if (rax_23 != 0)\n                                {\n                                    sub_407e70(&var_58, arg4, arg5);\n                                }\n                            }\n                            if (((var_a0_2 != 0 && rax_23 != 0) || var_a0_2 == 0))\n                            {\n                                uint64_t rdx_17 = r13_3[1];\n                                int64_t rdi_21 = var_58;\n                                if (rdx_17 > var_68_1)\n                                {\n                                    if (var_68_1 != 0)\n                                    {\n                                        uint64_t rsi_19 = (var_68_1 + var_68_1);\n                                        if (rdx_17 > rsi_19)\n                                        {\n                                            while (rsi_19 != 0)\n                                            {\n                                                rsi_19 = (rsi_19 + rsi_19);\n                                                if (rdx_17 <= rsi_19)\n                                                {\n                                                    break;\n                                                }\n                                            }\n                                        }\n                                        if ((rdx_17 <= rsi_19 || (rdx_17 > rsi_19 && rsi_19 != 0)))\n                                        {\n                                            rdx_17 = rsi_19;\n                                        }\n                                    }\n                                    free(rdi_21);\n                                    int64_t rax_52 = sub_411210(rdx_17);\n                                    rdi_21 = rax_52;\n                                    var_58 = rax_52;\n                                    var_68_1 = rdx_17;\n                                    rdx_17 = r13_3[1];\n                                }\n                                uint64_t var_50_1 = rdx_17;\n                                memcpy(rdi_21, *r13_3, rdx_17);\n                                var_a0_2 = &var_58;\n                                if (rax_8 != 0)\n                                {\n                                    int64_t rax_39 = var_58;\n                                    char* rsi_9 = *r13_3;\n                                    void* var_48_1 = (&r13_3[2][rax_39] - rsi_9);\n                                    void* var_40_1 = (&r13_3[3][rax_39] - rsi_9);\n                                }\n                            }\n                        }\n                        int64_t* r11_1 = (rax_6 + r15_2);\n                        char rax_28;\n                        void* rcx_2;\n                        int64_t* r13_6;\n                        uint64_t r13_7;\n                        int64_t* r15_3;\n                        if (*r11_1 < r13_3)\n                        {\n                            *r12_3 = (r13_3 - 0x20);\n                            r13_7 = var_c0;\n                        }\n                        else\n                        {\n                            void* rcx_1 = (arg6 + r15_2);\n                            r13_6 = ((var_c8_2 << 4) + arg1);\n                            r15_3 = (rax_1 + (((var_c8_2 << 3) - var_c8_2) << 3));\n                            rax_28 = sub_4074d0(r15_3, *rcx_1, *r13_6);\n                            rcx_2 = rcx_1;\n                            if (rax_28 != 0)\n                            {\n                                int64_t rax_30 = (r15_3[3] + *r15_3);\n                                r13_7 = var_c0;\n                                *r12_3 = (rax_30 - 0x20);\n                                *r11_1 = (rax_30 - (r15_3[2] << 5));\n                            }\n                        }\n                        if (((*r11_1 < r13_3 && r13_7 != 1) || ((*r11_1 >= r13_3 && rax_28 != 0) && r13_7 != 1)))\n                        {\n                            int64_t* rax_32 = *r12_3;\n                            uint64_t r12_4 = 1;\n                            int64_t r14_5 = 1;\n                            uint64_t r15_4 = r13_7;\n                            do\n                            {\n                                int64_t rbp_5 = *(rbx_2 + (r12_4 << 3));\n                                int32_t rax_34 = sub_4082a0(rax_32, r14_4[rbp_5]);\n                                if ((rax_34 >= 0 && (var_c8_2 >= rbp_5 || (var_c8_2 < rbp_5 && rax_34 != 0))))\n                                {\n                                    r14_5 = (r12_4 + 1);\n                                    r12_4 = ((r14_5 + r15_4) >> 1);\n                                    if (r14_5 >= r15_4)\n                                    {\n                                        break;\n                                    }\n                                    continue;\n                                }\n                                r15_4 = r12_4;\n                                r12_4 = ((r14_5 + r15_4) >> 1);\n                            } while (r14_5 < r15_4);\n                            void* rsi_5 = (rbx_2 + ((r14_5 - 1) << 3));\n                            if (r14_5 != 1)\n                            {\n                                void* rax_36 = rbx_2;\n                                void* rcx_3 = (rax_20 + (r14_5 << 3));\n                                do\n                                {\n                                    int64_t rdx_14 = *(rax_36 + 8);\n                                    rax_36 = (rax_36 + 8);\n                                    *(rax_36 - 8) = rdx_14;\n                                } while (rax_36 != rcx_3);\n                            }\n                            *rsi_5 = var_c8_2;\n                            continue;\n                        }\n                        if (((*r11_1 < r13_3 && r13_7 == 1) || ((*r11_1 >= r13_3 && rax_28 != 0) && r13_7 == 1)))\n                        {\n                            *rbx_2 = var_c8_2;\n                            continue;\n                        }\n                        if ((*r11_1 >= r13_3 && rax_28 == 0))\n                        {\n                            void* rax_42 = (rbx_2 + 8);\n                            void* rsi_10 = (rbx_2 + (var_c0 << 3));\n                            if (var_c0 != 1)\n                            {\n                                int64_t rcx_4 = var_c8_2;\n                                do\n                                {\n                                    int64_t rdx_21 = *rax_42;\n                                    if (rdx_21 > rcx_4)\n                                    {\n                                        *rax_42 = (rdx_21 - 1);\n                                        rcx_4 = *rbx_2;\n                                    }\n                                    rax_42 = (rax_42 + 8);\n                                } while (rsi_10 != rax_42);\n                                int64_t rax_43 = (rcx_4 << 3);\n                                var_c8_2 = rcx_4;\n                                r13_6 = ((rcx_4 << 4) + arg1);\n                                rcx_2 = (arg6 + rax_43);\n                                r15_3 = (rax_1 + ((rax_43 - rcx_4) << 3));\n                            }\n                            uint64_t r12_7 = (var_c0 - 1);\n                            sub_407df0(*rcx_2, *r13_6);\n                            if (var_70 > var_c8_2)\n                            {\n                                var_70 = (var_70 - 1);\n                                sub_407920(*r13_6);\n                            }\n                            free(*r15_3);\n                            if (r12_7 > var_c8_2)\n                            {\n                                int64_t rax_46 = (var_c8_2 << 3);\n                                int128_t* rdx_25 = (rax_1 + ((rax_46 - var_c8_2) << 3));\n                                int64_t rsi_12 = ((var_c0 << 3) - 8);\n                                do\n                                {\n                                    int128_t zmm0 = *((arg1 + (rax_46 << 1)) + 0x10);\n                                    rdx_25 = (rdx_25 + 0x38);\n                                    int128_t zmm1 = *rdx_25;\n                                    int128_t zmm2 = rdx_25[1];\n                                    *(arg6 + rax_46) = *((arg6 + rax_46) + 8);\n                                    int64_t r9_1 = rdx_25[3];\n                                    int128_t zmm3 = rdx_25[2];\n                                    *(arg1 + (rax_46 << 1)) = zmm0;\n                                    *(rdx_25 - 8) = r9_1;\n                                    int64_t r9_2 = *((r14_4 + rax_46) + 8);\n                                    *(rdx_25 - 0x38) = zmm1;\n                                    *(r14_4 + rax_46) = r9_2;\n                                    int64_t r9_3 = *((rax_6 + rax_46) + 8);\n                                    *(rdx_25 - 0x28) = zmm2;\n                                    *(rax_6 + rax_46) = r9_3;\n                                    rax_46 = (rax_46 + 8);\n                                    *(rdx_25 - 0x18) = zmm3;\n                                } while (rsi_12 != rax_46);\n                            }\n                            if (r12_7 == 0)\n                            {\n                                break;\n                            }\n                            void* rax_47 = rbx_2;\n                            void* rcx_12 = (rax_20 + (var_c0 << 3));\n                            do\n                            {\n                                int64_t rdx_26 = *(rax_47 + 8);\n                                rax_47 = (rax_47 + 8);\n                                *(rax_47 - 8) = rdx_26;\n                            } while (rcx_12 != rax_47);\n                            var_c0 = r12_7;\n                        }\n                    }\n                    r13 = r14_4;\n                    if ((var_a0_2 != 0 && data_61c759 != 0))\n                    {\n                        sub_407e70(&var_58, arg4, arg5);\n                        free(var_58);\n                    }\n                }\n            }\n            sub_407df0(arg4, arg5);\n            free(arg6);\n            free(rax_1);\n            free(rbx_2);\n            free(rax_6);\n            /* tailcall */\n            return free(r13);\n        }\n    }\n    sub_411460();\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_408e10",
            "funcStartAddr": "0x408e10",
            "funcEndAddr": "0x408e20",
            "decompiledFuncCode": "int64_t sub_408e10(int32_t arg1)\n{\n    dup2();\n    /* tailcall */\n    return close(arg1);\n}\n\n"
        },
        {
            "funcName": "sub_408e20",
            "funcStartAddr": "0x408e20",
            "funcEndAddr": "0x409030",
            "decompiledFuncCode": "int64_t sub_408e20(void* arg1, int64_t arg2, int64_t* arg3)\n{\n    void* rbp = arg1;\n    uint64_t rax_1;\n    rax_1 = (arg2 >> 0x3d) != 0;\n    int64_t rdi_1 = (arg2 << 3);\n    if ((rdi_1 >= 0 && rax_1 == 0))\n    {\n        int64_t rax_3 = sub_411210(rdi_1);\n        *arg3 = rax_3;\n        int64_t rbx_1 = 0;\n        if (arg2 != 0)\n        {\n            do\n            {\n                void* r12_1 = *(rbp + 8);\n                char rax_5;\n                if (r12_1 != 0)\n                {\n                    rax_5 = *(r12_1 + 0xc);\n                    if (rax_5 != 0)\n                    {\n                        if (rax_5 == 1)\n                        {\n                            sub_4060a0(*(r12_1 + 8));\n                        }\n                        int32_t rax_7 = open((r12_1 + 0xd), 0);\n                        int32_t rax_8;\n                        if (rax_7 >= 0)\n                        {\n                            int32_t var_40;\n                            rax_8 = sub_407a30(&var_40, 9);\n                            if (rax_8 == 0xffffffff)\n                            {\n                                int32_t* rax_9 = __errno_location();\n                                if (*rax_9 != 0x18)\n                                {\n                                    FILE* rcx_1;\n                                    int64_t rdx_1;\n                                    int64_t rsi_5;\n                                    void* rdi_17;\n                                    char* r8;\n                                    rcx_1 = error(2, *rax_9, dcgettext(nullptr, \"couldn't create process for %s -\u2026\", 5), sub_40f630(4, data_61c748));\n                                    /* tailcall */\n                                    return sub_409030(rdi_17, rsi_5, rdx_1, rcx_1, r8);\n                                }\n                                close(rax_7);\n                                *rax_9 = 0x18;\n                            }\n                            else\n                            {\n                                int32_t var_3c;\n                                if (rax_8 == 0)\n                                {\n                                    close(var_40);\n                                    if (rax_7 != 0)\n                                    {\n                                        sub_408e10(rax_7);\n                                    }\n                                    if (var_3c != 1)\n                                    {\n                                        sub_408e10(var_3c);\n                                    }\n                                    int64_t rdi_15 = data_61c748;\n                                    execlp(rdi_15, rdi_15, &data_416559, 0);\n                                    sub_4060d0(*__errno_location(), \"couldn't execute compress progra\u2026\");\n                                    /* no return */\n                                }\n                                *(r12_1 + 8) = rax_8;\n                                int64_t* r12_2 = (rax_3 + (rbx_1 << 3));\n                                sub_406190(r12_1);\n                                close(rax_7);\n                                close(var_3c);\n                                FILE* rax_11 = fdopen(var_40, &data_4168fa);\n                                if (rax_11 == 0)\n                                {\n                                    int32_t* rax_12 = __errno_location();\n                                    int32_t r13_1 = *rax_12;\n                                    close(var_40);\n                                    *r12_2 = 0;\n                                    *rax_12 = r13_1;\n                                    break;\n                                }\n                                *(rax_3 + (rbx_1 << 3)) = rax_11;\n                            }\n                        }\n                        if ((rax_7 < 0 || (rax_7 >= 0 && rax_8 == 0xffffffff)))\n                        {\n                            *(rax_3 + (rbx_1 << 3)) = 0;\n                            break;\n                        }\n                    }\n                }\n                if ((r12_1 == 0 || (r12_1 != 0 && rax_5 == 0)))\n                {\n                    FILE* rax_4 = sub_407cd0(*rbp, &data_4168fa);\n                    *(rax_3 + (rbx_1 << 3)) = rax_4;\n                    if (rax_4 == 0)\n                    {\n                        break;\n                    }\n                }\n                rbx_1 = (rbx_1 + 1);\n                rbp = (rbp + 0x10);\n            } while (arg2 != rbx_1);\n        }\n        return rbx_1;\n    }\n    sub_411460();\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_409030",
            "funcStartAddr": "0x409030",
            "funcEndAddr": "0x4090b8",
            "decompiledFuncCode": "uint64_t sub_409030(void* arg1, int64_t arg2, int64_t arg3, FILE* arg4, \n    uint64_t arg5)\n{\n    int64_t* var_40;\n    uint64_t rax;\n    int64_t r13_1;\n    rax = sub_408e20(arg1, arg3, &var_40);\n    if ((arg3 > rax && rax <= 1))\n    {\n        sub_405dd0(dcgettext(nullptr, \"open failed\", 5), *(arg1 + (rax << 4)));\n        /* no return */\n    }\n    sub_408640(arg1, r13_1, rax, arg4, arg5, var_40);\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_4090c0",
            "funcStartAddr": "0x4090c0",
            "funcEndAddr": "0x409330",
            "decompiledFuncCode": "int64_t* sub_4090c0(FILE** arg1, char arg2)\n{\n    int64_t rdx = data_61c5e8;\n    int64_t rax = data_61c770;\n    char* r13 = *(rax + (rdx << 3));\n    uint64_t rax_1 = strlen(r13);\n    int64_t* rax_2 = sub_411210(((rax_1 + 0x20) & 0xfffffffffffffff8));\n    char* rbp = (rax_2 + 0xd);\n    int64_t* rbx = rax_2;\n    memcpy(rbp, r13, rax_1);\n    *((rbx + rax_1) + 0xd) = 0x58585874726f732f;\n    *((rbp + rax_1) + 8) = 0x585858;\n    int64_t rax_3 = data_61c5e8;\n    *rbx = 0;\n    bool cond:0 = (rax_3 + 1) != data_61c768;\n    data_61c5e8 = (rax_3 + 1);\n    if ((!cond:0))\n    {\n        data_61c5e8 = 0;\n    }\n    void var_c0;\n    bool var_c8 = pthread_sigmask(0, &data_61c6c0, &var_c0) == 0;\n    int32_t r12_1 = sub_410680(rbp, 0x80000);\n    int32_t* rax_7 = __errno_location();\n    if (r12_1 < 0)\n    {\n        int32_t rbp_1 = *rax_7;\n        if (var_c8 != 0)\n        {\n            sub_407880(&var_c8);\n            *rax_7 = rbp_1;\n        }\n        if ((rbp_1 != 0x18 || (rbp_1 == 0x18 && arg2 != 1)))\n        {\n            char* rcx_1;\n            int64_t rdx_4;\n            uint64_t rsi_7;\n            void** rdi_19;\n            rcx_1 = error(2, *rax_7, dcgettext(nullptr, \"cannot create temporary file in \u2026\", 5), sub_40f630(4, r13));\n            /* tailcall */\n            return sub_409330(rdi_19, rsi_7, rdx_4, rcx_1, arg1);\n        }\n        if ((rbp_1 == 0x18 && arg2 == 1))\n        {\n            int64_t* rdi_10 = rbx;\n            rbx = nullptr;\n            free(rdi_10);\n        }\n    }\n    else\n    {\n        int64_t rax_8 = data_61c418;\n        bool cond:2_1 = var_c8 != 0;\n        data_61c418 = rbx;\n        *rax_8 = rbx;\n        if (cond:2_1)\n        {\n            int32_t r13_1 = *rax_7;\n            sub_407880(&var_c8);\n            *rax_7 = r13_1;\n        }\n        bool cond:3_1 = data_61c748 == 0;\n        *(rbx + 0xc) = 0;\n        if ((!cond:3_1))\n        {\n            int32_t rax_9 = sub_407a30(&var_c8, 4);\n            rbx[1] = rax_9;\n            bool cond:4_1 = rax_9 == 0;\n            int32_t var_c4;\n            if (rax_9 > 0)\n            {\n                close(r12_1);\n                close(var_c8);\n                r12_1 = var_c4;\n                sub_406190(rbx);\n            }\n            else if (cond:4_1)\n            {\n                close(var_c4);\n                if (r12_1 != 1)\n                {\n                    sub_408e10(r12_1);\n                }\n                int32_t rdi_15 = var_c8;\n                if (rdi_15 != 0)\n                {\n                    sub_408e10(rdi_15);\n                }\n                int64_t rdi_16 = data_61c748;\n                execlp(rdi_16, rdi_16, 0);\n                sub_4060d0(*rax_7, \"couldn't execute compress progra\u2026\");\n                /* no return */\n            }\n        }\n        FILE* rax_10 = fdopen(r12_1, &data_41655c);\n        *arg1 = rax_10;\n        if (rax_10 == 0)\n        {\n            sub_405dd0(dcgettext(nullptr, \"couldn't create temporary file\", 5), rbp);\n            /* no return */\n        }\n    }\n    return rbx;\n}\n\n"
        },
        {
            "funcName": "sub_409330",
            "funcStartAddr": "0x409330",
            "funcEndAddr": "0x409821",
            "decompiledFuncCode": "int64_t sub_409330(void** arg1, uint64_t arg2, int64_t arg3, char* arg4, \n    void* arg5 @ r15)\n{\n    void* var_8 = arg5;\n    void** r14 = arg1;\n    int64_t r13 = arg3;\n    uint64_t r12 = arg2;\n    uint64_t rcx = data_61c420;\n    FILE* var_c8;\n    if (rcx < arg3)\n    {\n        int64_t var_198_1 = arg3;\n        int64_t r13_3;\n        do\n        {\n            int64_t rbp_1 = 0;\n            int64_t rbx_1 = 0;\n            uint64_t rax_5;\n            uint64_t rdx_5;\n            int64_t rsi_2;\n            void* r9_3;\n            if (rcx > var_198_1)\n            {\n                rax_5 = rcx;\n                arg5 = r14;\n                r9_3 = r14;\n                rsi_2 = var_198_1;\n                rdx_5 = 0;\n            }\n            else\n            {\n                do\n                {\n                    int64_t* rax_1 = sub_4090c0(&var_c8, 0);\n                    uint64_t rdx = data_61c420;\n                    uint64_t rsi = r12;\n                    void* r13_1 = (rax_1 + 0xd);\n                    FILE* rcx_1 = var_c8;\n                    char* r8_1 = r13_1;\n                    if (rdx <= r12)\n                    {\n                        rsi = rdx;\n                    }\n                    uint64_t rax_2 = sub_409030(&r14[(rbx_1 * 2)], rsi, rdx, rcx_1, r8_1);\n                    uint64_t rdx_1 = r12;\n                    rcx = data_61c420;\n                    if (rax_2 <= r12)\n                    {\n                        rdx_1 = rax_2;\n                    }\n                    rbx_1 = (rbx_1 + rax_2);\n                    rsi_2 = (var_198_1 - rbx_1);\n                    r12 = (r12 - rdx_1);\n                    int64_t rdx_2 = rbp_1;\n                    rbp_1 = (rbp_1 + 1);\n                    int64_t rdx_3 = (rdx_2 << 4);\n                    *(r14 + rdx_3) = r13_1;\n                    *((r14 + rdx_3) + 8) = rax_1;\n                } while (rcx <= rsi_2);\n                rdx_5 = (COMBINE(0, rbp_1) % rcx);\n                arg5 = &r14[(rbp_1 * 2)];\n                r9_3 = &r14[(rbx_1 * 2)];\n                rax_5 = (rcx - rdx_5);\n            }\n            if (rsi_2 > rax_5)\n            {\n                uint64_t rdx_17 = (((rsi_2 + rdx_5) + 1) - rcx);\n                int64_t* rax_22 = sub_4090c0(&var_c8, 0);\n                uint64_t rsi_13 = r12;\n                char* r11_4 = (rax_22 + 0xd);\n                FILE* rcx_4 = var_c8;\n                if (rdx_17 <= r12)\n                {\n                    rsi_13 = rdx_17;\n                }\n                uint64_t rax_23 = sub_409030(r9_3, rsi_13, rdx_17, rcx_4, r11_4);\n                uint64_t rdx_19 = r12;\n                if (rax_23 <= r12)\n                {\n                    rdx_19 = rax_23;\n                }\n                rbp_1 = (rbp_1 + 1);\n                rbx_1 = (rbx_1 + rax_23);\n                *arg5 = r11_4;\n                *(arg5 + 8) = rax_22;\n                r12 = (r12 - rdx_19);\n                r9_3 = &r14[(rbx_1 * 2)];\n                arg5 = &r14[(rbp_1 * 2)];\n            }\n            r12 = (r12 + rbp_1);\n            r13_3 = (var_198_1 + (rbp_1 - rbx_1));\n            memmove(arg5, r9_3, ((var_198_1 - rbx_1) << 4));\n            rcx = data_61c420;\n            var_198_1 = r13_3;\n        } while (rcx < r13_3);\n        r13 = var_198_1;\n    }\n    int64_t** var_188_1;\n    int64_t* var_158;\n    if (r13 <= r12)\n    {\n        var_188_1 = &var_158;\n    }\n    else\n    {\n        uint64_t rbx_2 = r12;\n        int64_t* r15_3 = nullptr;\n        bool c_1 = false;\n        bool z_1 = (arg5 ^ arg5) == 0;\n        char r12_1 = 0;\n        void* r14_1 = &r14[(r12 * 2)];\n        var_188_1 = &var_158;\n        while (true)\n        {\n            char* rax_8 = *r14_1;\n            int64_t rcx_2 = 2;\n            void* const rdi_5 = &data_41814a;\n            char* rsi_4 = rax_8;\n            while (rcx_2 != 0)\n            {\n                char temp5_1 = *rsi_4;\n                char temp6_1 = *rdi_5;\n                c_1 = temp5_1 < temp6_1;\n                z_1 = temp5_1 == temp6_1;\n                rsi_4 = &rsi_4[1];\n                rdi_5 = (rdi_5 + 1);\n                rcx_2 = (rcx_2 - 1);\n                if ((!z_1))\n                {\n                    break;\n                }\n            }\n            rcx_2 = ((!z_1) && (!c_1));\n            rcx_2 = (rcx_2 - 0);\n            int32_t r13_4 = rcx_2;\n            int32_t rax_9;\n            if (arg4 != 0)\n            {\n                rax_9 = strcmp(arg4, rax_8);\n            }\n            if (((arg4 == 0 || (arg4 != 0 && r13_4 == 0)) || ((arg4 != 0 && r13_4 != 0) && rax_9 != 0)))\n            {\n                if ((r12_1 == 0 && __fxstat(1, 1, var_188_1) != 0))\n                {\n                    break;\n                }\n                if (r13_4 != 0)\n                {\n                    r12_1 = 1;\n                    if (__xstat(1, *r14_1, &var_c8) != 0)\n                    {\n                        rbx_2 = (rbx_2 + 1);\n                        r14_1 = (r14_1 + 0x10);\n                        c_1 = rbx_2 < r13;\n                        z_1 = rbx_2 == r13;\n                        if (z_1)\n                        {\n                            break;\n                        }\n                        continue;\n                    }\n                }\n                else\n                {\n                    r12_1 = 1;\n                    if (__fxstat(1, 0, &var_c8) != 0)\n                    {\n                    label_4094c3:\n                        rbx_2 = (rbx_2 + 1);\n                        r14_1 = (r14_1 + 0x10);\n                        c_1 = rbx_2 < r13;\n                        z_1 = rbx_2 == r13;\n                        if (z_1)\n                        {\n                            break;\n                        }\n                        continue;\n                    }\n                }\n                r12_1 = 1;\n                int64_t var_150;\n                int64_t var_c0;\n                if (var_c0 != var_150)\n                {\n                    goto label_4094c3;\n                }\n                if (var_c8 != var_158)\n                {\n                    goto label_4094c3;\n                }\n            }\n            char* r11_3;\n            if (r15_3 != 0)\n            {\n                r11_3 = (r15_3 + 0xd);\n                goto label_40965b;\n            }\n            FILE* var_160;\n            int64_t* rax_24 = sub_4090c0(&var_160, 0);\n            r15_3 = rax_24;\n            sub_409030(r14_1, 0, 1, var_160, (rax_24 + 0xd));\n            r11_3 = (rax_24 + 0xd);\n        label_40965b:\n            *r14_1 = r11_3;\n            *(r14_1 + 8) = r15_3;\n            goto label_4094c3;\n        }\n    }\n    while (true)\n    {\n        uint64_t rax_11;\n        uint64_t r13_5;\n        rax_11 = sub_408e20(r14, r13, var_188_1);\n        uint64_t rbx_3 = rax_11;\n        if (r13_5 == rax_11)\n        {\n            FILE* rax_19 = sub_407cd0(arg4, &data_41655c);\n            if (rax_19 != 0)\n            {\n                return sub_408640(r14, r12, r13_5, rax_19, arg4, var_158);\n            }\n            int32_t* rax_20 = __errno_location();\n            if ((*rax_20 != 0x18 || (*rax_20 == 0x18 && r13_5 <= 2)))\n            {\n                sub_405dd0(dcgettext(nullptr, \"open failed\", 5), arg4);\n                /* no return */\n            }\n        }\n        else if (rax_11 <= 2)\n        {\n            char* rbx_5 = r14[(rbx_3 * 2)];\n            sub_405dd0(dcgettext(nullptr, \"open failed\", 5), rbx_5);\n            /* no return */\n        }\n        void* r15_4 = &r14[((rbx_3 * 2) - 2)];\n        int64_t* rax_15;\n        void* rbp_5;\n        do\n        {\n            rbx_3 = (rbx_3 - 1);\n            rbp_5 = r15_4;\n            sub_407df0(var_158[rbx_3], *r15_4);\n            r15_4 = (r15_4 - 0x10);\n            rax_15 = sub_4090c0(&var_c8, rbx_3 > 2);\n        } while (rax_15 == 0);\n        uint64_t r15_5 = rbx_3;\n        char* r11_1 = (rax_15 + 0xd);\n        int64_t* r9_6 = var_158;\n        if (r12 <= rbx_3)\n        {\n            r15_5 = r12;\n        }\n        uint64_t r13_6 = (r13_5 - rbx_3);\n        sub_408640(r14, r15_5, rbx_3, var_c8, r11_1, r9_6);\n        r12 = ((r12 - r15_5) + 1);\n        *r14 = r11_1;\n        r13 = (r13_6 + 1);\n        r14[1] = rax_15;\n        memmove(&r14[2], rbp_5, (r13_6 << 4));\n    }\n}\n\n"
        },
        {
            "funcName": "sub_409830",
            "funcStartAddr": "0x409830",
            "funcEndAddr": "0x409871",
            "decompiledFuncCode": "int64_t sub_409830(int64_t* arg1, int64_t* arg2)\n{\n    int64_t rdx_2 = arg2[1];\n    int64_t rax = arg2[3];\n    if (*arg2 == arg2[2])\n    {\n        if ((rdx_2 != rax && arg2[5] == 0))\n        {\n            /* tailcall */\n            return sub_406320(arg1, arg2);\n        }\n    }\n    else if ((rdx_2 != rax || (rdx_2 == rax && arg2[6] == 0)))\n    {\n        /* tailcall */\n        return sub_406320(arg1, arg2);\n    }\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_409880",
            "funcStartAddr": "0x409880",
            "funcEndAddr": "0x409fdc",
            "decompiledFuncCode": "char* sub_409880(int128_t* arg1, int64_t arg2, int64_t arg3, int128_t** arg4, \n    int64_t* arg5, FILE* arg6, char* arg7)\n{\n    uint64_t r9_1 = (arg2 >> 1);\n    int64_t r8 = arg4[5];\n    int64_t rax = arg4[6];\n    int64_t var_68 = arg3;\n    int128_t* var_78 = arg1;\n    int64_t var_60 = arg4[8];\n    uint64_t var_70 = r9_1;\n    int64_t* var_58 = arg5;\n    FILE* var_50 = arg6;\n    char* var_48 = arg7;\n    char* rax_33;\n    int32_t rax_35;\n    if ((arg2 > 1 && (r8 + rax) > 0x1ffff))\n    {\n        pthread_t var_80;\n        rax_35 = pthread_create(&var_80, nullptr, start_routine, &var_78);\n        if (rax_35 == 0)\n        {\n            sub_409880((arg1 - (arg4[5] << 5)), (arg2 - r9_1), arg3, arg4[9], arg5, arg6, arg7);\n            pthread_join(var_80, nullptr);\n            rax_33 = arg7;\n        }\n        else\n        {\n            r8 = arg4[5];\n            rax = arg4[6];\n        }\n    }\n    if ((((((r8 + rax) > 0x1ffff && arg2 > 1) && rax_35 != 0) || (r8 + rax) <= 0x1ffff) || ((r8 + rax) > 0x1ffff && arg2 <= 1)))\n    {\n        int64_t r12_4 = (-(r8 << 5));\n        int128_t* r10_2 = (arg1 - (arg3 << 5));\n        int128_t* r9_2 = (arg1 + r12_4);\n        if (rax > 1)\n        {\n            sub_408370(r9_2, rax, (r10_2 - ((r8 >> 1) << 5)), 0);\n        }\n        if (r8 > 1)\n        {\n            sub_408370(arg1, r8, r10_2, 0);\n        }\n        *arg4 = arg1;\n        arg4[1] = r9_2;\n        arg4[2] = r9_2;\n        arg4[3] = (arg1 + (r12_4 - (rax << 5)));\n        sub_406320(arg5, arg4);\n        void* rax_2 = &arg5[1];\n        void* rax_3 = &arg5[6];\n        int64_t* rax_4;\n        void* rax_5;\n        while (true)\n        {\n            pthread_mutex_lock(rax_2);\n            while (true)\n            {\n                rax_4 = sub_40d190(*arg5);\n                if (rax_4 != 0)\n                {\n                    break;\n                }\n                pthread_cond_wait(rax_3, rax_2);\n            }\n            pthread_mutex_unlock(rax_2);\n            rax_5 = &rax_4[0xb];\n            pthread_mutex_lock(rax_5);\n            int32_t rax_6 = rax_4[0xa];\n            *(rax_4 + 0x54) = 0;\n            if (rax_6 == 0)\n            {\n                break;\n            }\n            void* r12_6 = *rax_4;\n            void* rbp_2 = rax_4[1];\n            int64_t r15_1 = ((arg3 >> ((rax_6 + rax_6) + 2)) + 1);\n            int64_t rax_13;\n            int64_t rdx_13;\n            int64_t r9_3;\n            int64_t r10_3;\n            if (rax_6 <= 1)\n            {\n                void* rsi_10 = rbp_2;\n                void* rdi_17 = r12_6;\n                while (true)\n                {\n                    if (rax_4[2] == rdi_17)\n                    {\n                        rdx_13 = rax_4[6];\n                        r10_3 = rax_4[5];\n                        rax_13 = ((r12_6 - rdi_17) >> 5);\n                        if (((rbp_2 - rsi_10) >> 5) == rdx_13)\n                        {\n                            r9_3 = rdx_13;\n                            break;\n                        }\n                        if (rax_13 != r10_3)\n                        {\n                        label_409d2d:\n                            r9_3 = rax_4[6];\n                            rdx_13 = ((rbp_2 - rsi_10) >> 5);\n                            break;\n                        }\n                    }\n                    else\n                    {\n                        int64_t r15_3;\n                        if (rax_4[3] == rsi_10)\n                        {\n                            rdx_13 = rax_4[6];\n                            rax_13 = ((r12_6 - rdi_17) >> 5);\n                            if (((rbp_2 - rsi_10) >> 5) == rdx_13)\n                            {\n                                int64_t r8_7 = (r15_1 - 1);\n                                if (r15_1 == 0)\n                                {\n                                    r10_3 = rax_4[5];\n                                    r9_3 = rdx_13;\n                                    break;\n                                }\n                                r15_3 = r8_7;\n                            }\n                        }\n                        if ((rax_4[3] != rsi_10 && r15_1 == 0))\n                        {\n                            r15_1 = -1;\n                            rax_13 = ((r12_6 - rdi_17) >> 5);\n                        }\n                        if (((rax_4[3] == rsi_10 && ((rbp_2 - rsi_10) >> 5) != rdx_13) || ((rax_4[3] != rsi_10 && r15_1 == 0) && rax_4[6] != ((rbp_2 - rsi_10) >> 5))))\n                        {\n                            r10_3 = rax_4[5];\n                            if (rax_13 != r10_3)\n                            {\n                                goto label_409d2d;\n                            }\n                        }\n                        if (((rax_4[3] != rsi_10 && r15_1 == 0) && rax_4[6] == ((rbp_2 - rsi_10) >> 5)))\n                        {\n                            r15_3 = -2;\n                        }\n                        if ((((rax_4[3] != rsi_10 && r15_1 == 0) && rax_4[6] == ((rbp_2 - rsi_10) >> 5)) || (rax_4[3] == rsi_10 && ((rbp_2 - rsi_10) >> 5) == rdx_13)))\n                        {\n                            do\n                            {\n                                *rax_4 = (rdi_17 - 0x20);\n                                sub_4085d0((rdi_17 - 0x20), arg6, arg7);\n                                rdi_17 = *rax_4;\n                                if (rdi_17 == rax_4[2])\n                                {\n                                    break;\n                                }\n                                r15_3 = (r15_3 - 1);\n                            } while (r15_3 != -1);\n                            r10_3 = rax_4[5];\n                            r9_3 = rax_4[6];\n                            rax_13 = ((r12_6 - rdi_17) >> 5);\n                            rdx_13 = ((rbp_2 - rax_4[1]) >> 5);\n                            break;\n                        }\n                        if ((rax_4[3] != rsi_10 && r15_1 != 0))\n                        {\n                            if (sub_4082a0((rdi_17 - 0x20), (rsi_10 - 0x20)) > 0)\n                            {\n                                int64_t* rdi_18 = (rax_4[1] - 0x20);\n                                rax_4[1] = rdi_18;\n                                sub_4085d0(rdi_18, arg6, arg7);\n                            }\n                            else\n                            {\n                                int64_t* rdi_20 = (*rax_4 - 0x20);\n                                *rax_4 = rdi_20;\n                                sub_4085d0(rdi_20, arg6, arg7);\n                            }\n                            rdi_17 = *rax_4;\n                            rsi_10 = rax_4[1];\n                            r15_1 = (r15_1 - 1);\n                            continue;\n                        }\n                    }\n                    if (rax_4[3] == rsi_10)\n                    {\n                        goto label_409d2d;\n                    }\n                    int64_t r8_6 = (r15_1 - 1);\n                    if (r15_1 != 0)\n                    {\n                        int64_t r15_2 = r8_6;\n                        do\n                        {\n                            rax_4[1] = (rsi_10 - 0x20);\n                            sub_4085d0((rsi_10 - 0x20), arg6, arg7);\n                            rsi_10 = rax_4[1];\n                            if (rsi_10 == rax_4[3])\n                            {\n                                break;\n                            }\n                            r15_2 = (r15_2 - 1);\n                        } while (r15_2 != -1);\n                        r10_3 = rax_4[5];\n                        r9_3 = rax_4[6];\n                        rax_13 = ((r12_6 - *rax_4) >> 5);\n                        rdx_13 = ((rbp_2 - rsi_10) >> 5);\n                        break;\n                    }\n                    goto label_409d2d;\n                }\n            }\n            else\n            {\n                void* rsi_4 = rbp_2;\n                void* rdi_8 = r12_6;\n                int128_t* r8_1 = *rax_4[4];\n                while (true)\n                {\n                    int64_t r11_1 = rax_4[2];\n                    if (r11_1 == rdi_8)\n                    {\n                        r9_3 = rax_4[6];\n                        r10_3 = rax_4[5];\n                        rax_13 = ((r12_6 - rdi_8) >> 5);\n                        if (((rbp_2 - rsi_4) >> 5) == r9_3)\n                        {\n                            rdx_13 = r9_3;\n                            break;\n                        }\n                    }\n                    else\n                    {\n                        int64_t rsi_6;\n                        if (rax_4[3] == rsi_4)\n                        {\n                            r9_3 = rax_4[6];\n                            r10_3 = rax_4[5];\n                            rdx_13 = ((rbp_2 - rsi_4) >> 5);\n                            rax_13 = ((r12_6 - rdi_8) >> 5);\n                            if (r9_3 == rdx_13)\n                            {\n                                rsi_6 = (r15_1 - 1);\n                                if (r15_1 == 0)\n                                {\n                                    break;\n                                }\n                            }\n                        }\n                        if ((r15_1 == 0 && rax_4[3] != rsi_4))\n                        {\n                            r9_3 = rax_4[6];\n                            r10_3 = rax_4[5];\n                            r15_1 = -1;\n                            rdx_13 = ((rbp_2 - rsi_4) >> 5);\n                            rax_13 = ((r12_6 - rdi_8) >> 5);\n                            if (r9_3 == rdx_13)\n                            {\n                                rsi_6 = -2;\n                            }\n                        }\n                        if ((((rax_4[3] != rsi_4 && r15_1 == 0) && r9_3 == rdx_13) || (rax_4[3] == rsi_4 && r9_3 == rdx_13)))\n                        {\n                            void* rdi_10 = (rdi_8 - 0x20);\n                            while (true)\n                            {\n                                int128_t zmm4 = *rdi_10;\n                                r8_1 = (r8_1 - 0x20);\n                                *rax_4 = rdi_10;\n                                void* rax_14 = rdi_10;\n                                *r8_1 = zmm4;\n                                r8_1[1] = *(rdi_10 + 0x10);\n                                if (r11_1 == rdi_10)\n                                {\n                                    r9_3 = rdx_13;\n                                    rax_13 = ((r12_6 - r11_1) >> 5);\n                                    break;\n                                }\n                                rsi_6 = (rsi_6 - 1);\n                                rdi_10 = (rdi_10 - 0x20);\n                                if (rsi_6 == -1)\n                                {\n                                    r9_3 = rdx_13;\n                                    rax_13 = ((r12_6 - rax_14) >> 5);\n                                    break;\n                                }\n                            }\n                            break;\n                        }\n                        if ((rax_4[3] != rsi_4 && r15_1 != 0))\n                        {\n                            r8_1 = (r8_1 - 0x20);\n                            if (sub_4082a0((rdi_8 - 0x20), (rsi_4 - 0x20)) > 0)\n                            {\n                                void* rax_8 = rax_4[1];\n                                rdi_8 = *rax_4;\n                                int128_t zmm2_1 = *(rax_8 - 0x20);\n                                rsi_4 = (rax_8 - 0x20);\n                                rax_4[1] = rsi_4;\n                                *r8_1 = zmm2_1;\n                                r8_1[1] = *(rax_8 - 0x10);\n                            }\n                            else\n                            {\n                                void* rax_10 = *rax_4;\n                                rsi_4 = rax_4[1];\n                                int128_t zmm0_1 = *(rax_10 - 0x20);\n                                rdi_8 = (rax_10 - 0x20);\n                                *rax_4 = rdi_8;\n                                *r8_1 = zmm0_1;\n                                r8_1[1] = *(rax_10 - 0x10);\n                            }\n                            r15_1 = (r15_1 - 1);\n                            continue;\n                        }\n                    }\n                    if (rax_13 == r10_3)\n                    {\n                        int64_t r11_2 = rax_4[3];\n                        if (r11_2 != rsi_4)\n                        {\n                            int64_t rdi_25 = (r15_1 - 1);\n                            void* rdx_25 = (rsi_4 - 0x20);\n                            if (r15_1 != 0)\n                            {\n                                while (true)\n                                {\n                                    int128_t zmm6 = *rdx_25;\n                                    r8_1 = (r8_1 - 0x20);\n                                    rax_4[1] = rdx_25;\n                                    void* rcx_5 = rdx_25;\n                                    *r8_1 = zmm6;\n                                    r8_1[1] = *(rdx_25 + 0x10);\n                                    if (rdx_25 == r11_2)\n                                    {\n                                        rdx_13 = ((rbp_2 - rdx_25) >> 5);\n                                        break;\n                                    }\n                                    rdi_25 = (rdi_25 - 1);\n                                    rdx_25 = (rdx_25 - 0x20);\n                                    if (rdi_25 == -1)\n                                    {\n                                        rdx_13 = ((rbp_2 - rcx_5) >> 5);\n                                        break;\n                                    }\n                                }\n                                break;\n                            }\n                        }\n                    }\n                    rdx_13 = ((rbp_2 - rsi_4) >> 5);\n                    break;\n                }\n                *rax_4[4] = r8_1;\n            }\n            bool cond:0_1 = *(rax_4 + 0x54) != 0;\n            rax_4[5] = (r10_3 - rax_13);\n            rax_4[6] = (r9_3 - rdx_13);\n            if ((!cond:0_1))\n            {\n                sub_409830(arg5, rax_4);\n            }\n            if (rax_4[0xa] > 1)\n            {\n                pthread_mutex_lock((rax_4[7] + 0x58));\n                int64_t* rsi_9 = rax_4[7];\n                if (*(rsi_9 + 0x54) == 0)\n                {\n                    sub_409830(arg5, rsi_9);\n                    rsi_9 = rax_4[7];\n                }\n                pthread_mutex_unlock(&rsi_9[0xb]);\n            }\n            else\n            {\n                rax_4[5];\n                if (rax_4[6] == (-rax_4[5]))\n                {\n                    sub_406320(arg5, rax_4[7]);\n                }\n            }\n            pthread_mutex_unlock(rax_5);\n        }\n        pthread_mutex_unlock(rax_5);\n        rax_33 = sub_406320(arg5, rax_4);\n    }\n    return rax_33;\n}\n\n"
        },
        {
            "funcName": "pthread_409fe0",
            "funcStartAddr": "0x409fe0",
            "funcEndAddr": "0x40a00a",
            "decompiledFuncCode": "void* start_routine(void* arg1)\n{\n    sub_409880(*arg1, *(arg1 + 8), *(arg1 + 0x10), *(arg1 + 0x18), *(arg1 + 0x20), *(arg1 + 0x28), *(arg1 + 0x30));\n    return 0;\n}\n\n"
        },
        {
            "funcName": "sub_40a010",
            "funcStartAddr": "0x40a010",
            "funcEndAddr": "0x40a0c4",
            "decompiledFuncCode": "int64_t sub_40a010(int64_t arg1)\n{\n    int64_t rdx = data_61c768;\n    int64_t rcx = data_61c760;\n    int64_t rax = data_61c770;\n    if (rdx == rcx)\n    {\n        int64_t rsi_1;\n        if (rax != 0)\n        {\n            if (rcx > 0xaaaaaaaaaaaaaa9)\n            {\n            label_40a0af:\n                sub_411460();\n                /* no return */\n            }\n            rcx = ((rcx + (rcx >> 1)) + 1);\n            rsi_1 = (rcx << 3);\n            goto label_40a06a;\n        }\n        if (rcx != 0)\n        {\n            int64_t rdx_3;\n            rdx_3 = (rcx >> 0x3d) != 0;\n            rsi_1 = (rcx << 3);\n            if (rsi_1 < 0)\n            {\n                goto label_40a0af;\n            }\n            if (rdx_3 == 0)\n            {\n                goto label_40a06a;\n            }\n            goto label_40a0af;\n        }\n        rsi_1 = 0x80;\n        rcx = 0x10;\n    label_40a06a:\n        data_61c760 = rcx;\n        rax = sub_411270(rax, rsi_1);\n        rdx = data_61c768;\n        data_61c770 = rax;\n    }\n    *(rax + (rdx << 3)) = arg1;\n    data_61c768 = (rdx + 1);\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_40a0d0",
            "funcStartAddr": "0x40a0d0",
            "funcEndAddr": "0x40a63d",
            "decompiledFuncCode": "int64_t sub_40a0d0(int32_t arg1) __noreturn\n{\n    int64_t rbp = data_61cbc8;\n    if (arg1 != 0)\n    {\n        __fprintf_chk(stderr, 1, dcgettext(nullptr, \"Try '%s --help' for more informa\u2026\", 5), rbp);\n    }\n    else\n    {\n        __printf_chk(1, dcgettext(nullptr, \"Usage: %s [OPTION]... [FILE]...\\n\u2026\", 5), rbp, rbp);\n        fputs_unlocked(dcgettext(nullptr, \"Write sorted concatenation of al\u2026\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"\\nWith no FILE, or when FILE is \u2026\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"\\nMandatory arguments to long op\u2026\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"Ordering options:\\n\\n\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"  -b, --ignore-leading-blanks  i\u2026\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"  -g, --general-numeric-sort  co\u2026\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"  -h, --human-numeric-sort    co\u2026\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"  -n, --numeric-sort          co\u2026\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"      --sort=WORD             so\u2026\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"Other options:\\n\\n\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"      --batch-size=NMERGE   merg\u2026\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"  -c, --check, --check=diagnose-\u2026\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"      --debug               anno\u2026\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"  -k, --key=KEYDEF          sort\u2026\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"  -o, --output=FILE         writ\u2026\", 5), stdout);\n        __printf_chk(1, dcgettext(nullptr, \"  -t, --field-separator=SEP  use\u2026\", 5), \"/tmp\");\n        fputs_unlocked(dcgettext(nullptr, \"  -z, --zero-terminated     line\u2026\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"      --help     display this he\u2026\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"      --version  output version \u2026\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"\\nKEYDEF is F[.C][OPTS][,F[.C][O\u2026\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"% 1% of memory, b 1, K 1024 (def\u2026\", 5), stdout);\n        void* const var_88 = &data_416588;\n        void* const* rax_26 = &var_88;\n        char const* const var_78_1 = \"coreutils\";\n        char const* const var_70_1 = \"Multi-call invocation\";\n        char const* const var_68_1 = \"sha224sum\";\n        char const* const var_60_1 = \"sha2 utilities\";\n        char const* const var_58_1 = \"sha256sum\";\n        char const* const var_50_1 = \"sha2 utilities\";\n        char const* const var_48_1 = \"sha384sum\";\n        char const* const var_40_1 = \"sha2 utilities\";\n        char const* const var_38_1 = \"sha512sum\";\n        char const* const var_30_1 = \"sha2 utilities\";\n        int64_t var_28_1 = 0;\n        int64_t var_20_1 = 0;\n        bool c_1;\n        bool z_1;\n        do\n        {\n            rax_26 = &rax_26[2];\n            void* const rdi_22 = *rax_26;\n            c_1 = false;\n            z_1 = (rdi_22 & rdi_22) == 0;\n            if (z_1)\n            {\n                break;\n            }\n            char const* const rsi_23 = \"sort\";\n            int64_t rcx_2 = 5;\n            while (rcx_2 != 0)\n            {\n                char const temp0_1 = *rsi_23;\n                char temp1_1 = *rdi_22;\n                c_1 = temp0_1 < temp1_1;\n                z_1 = temp0_1 == temp1_1;\n                rsi_23 = &rsi_23[1];\n                rdi_22 = (rdi_22 + 1);\n                rcx_2 = (rcx_2 - 1);\n                if ((!z_1))\n                {\n                    break;\n                }\n            }\n        } while ((((!z_1) && (!c_1)) - 0) != 0);\n        char const* const rbp_1 = rax_26[1];\n        char* rax_37;\n        int32_t rax_38;\n        char const* const r12_1;\n        if (rbp_1 == 0)\n        {\n            int64_t rcx_5;\n            int64_t rdx_5;\n            uint64_t r8_2;\n            ssize_t r9_2;\n            rcx_5 = __printf_chk(1, dcgettext(nullptr, \"\\n%s online help: <%s>\\n\", 5), \"GNU coreutils\", \"https://www.gnu.org/software/cor\u2026\");\n            rax_37 = setlocale(5, nullptr, rdx_5, rcx_5, r8_2, r9_2, var_88, \"test invocation\");\n            if (rax_37 != 0)\n            {\n                rax_38 = strncmp(rax_37, &data_41660c, 3);\n                if (rax_38 != 0)\n                {\n                    rbp_1 = \"sort\";\n                }\n            }\n            if ((rax_37 == 0 || (rax_37 != 0 && rax_38 == 0)))\n            {\n                rbp_1 = \"sort\";\n                r12_1 = \" invocation\";\n                __printf_chk(1, dcgettext(nullptr, \"Full documentation at: <%s%s>\\n\", 5), \"https://www.gnu.org/software/cor\u2026\", \"sort\");\n            }\n        }\n        else\n        {\n            int64_t rcx_3;\n            int64_t rdx_3;\n            uint64_t r8_1;\n            ssize_t r9_1;\n            rcx_3 = __printf_chk(1, dcgettext(nullptr, \"\\n%s online help: <%s>\\n\", 5), \"GNU coreutils\", \"https://www.gnu.org/software/cor\u2026\");\n            char* rax_29 = setlocale(5, nullptr, rdx_3, rcx_3, r8_1, r9_1, var_88, \"test invocation\");\n            if (rax_29 == 0)\n            {\n                goto label_40a530;\n            }\n            if (strncmp(rax_29, &data_41660c, 3) == 0)\n            {\n                goto label_40a530;\n            }\n        }\n        if ((((rbp_1 == 0 && rax_37 != 0) && rax_38 != 0) || rbp_1 != 0))\n        {\n            __printf_chk(1, dcgettext(nullptr, \"Report %s translation bugs to <h\u2026\", 5), \"sort\");\n        label_40a530:\n            r12_1 = \" invocation\";\n            __printf_chk(1, dcgettext(nullptr, \"Full documentation at: <%s%s>\\n\", 5), \"https://www.gnu.org/software/cor\u2026\", \"sort\");\n            if (rbp_1 != \"sort\")\n            {\n                r12_1 = &data_41655e[0x13];\n            }\n        }\n        __printf_chk(1, dcgettext(nullptr, \"or available locally via: info '\u2026\", 5), rbp_1, r12_1);\n    }\n    exit(arg1);\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_40a640",
            "funcStartAddr": "0x40a640",
            "funcEndAddr": "0x40a64a",
            "decompiledFuncCode": "int64_t sub_40a640() __noreturn\n{\n    /* tailcall */\n    return sub_40a0d0(1);\n}\n\n"
        },
        {
            "funcName": "sub_40a650",
            "funcStartAddr": "0x40a650",
            "funcEndAddr": "0x40a766",
            "decompiledFuncCode": "int64_t sub_40a650(char* arg1, int64_t* arg2, int64_t arg3, uint64_t arg4)\n{\n    int64_t rbp = arg3;\n    uint64_t rax = strlen(arg1);\n    char* r14 = *arg2;\n    int64_t var_58 = -1;\n    if (r14 != 0)\n    {\n        char var_41_1 = 0;\n        int64_t rbx_1 = 0;\n        while (true)\n        {\n            if (strncmp(r14, arg1, rax) == 0)\n            {\n                if (strlen(r14) == rax)\n                {\n                    var_58 = rbx_1;\n                    break;\n                }\n                if (var_58 == -1)\n                {\n                    var_58 = rbx_1;\n                    rbx_1 = (rbx_1 + 1);\n                    rbp = (rbp + arg4);\n                    r14 = arg2[rbx_1];\n                    if (r14 != 0)\n                    {\n                        continue;\n                    }\n                    goto label_40a72d;\n                }\n                if (arg3 == 0)\n                {\n                    var_41_1 = 1;\n                }\n                else\n                {\n                    char rax_3 = var_41_1;\n                    if (memcmp(((var_58 * arg4) + arg3), rbp, arg4) != 0)\n                    {\n                        rax_3 = 1;\n                    }\n                    var_41_1 = rax_3;\n                }\n            }\n            rbx_1 = (rbx_1 + 1);\n            rbp = (rbp + arg4);\n            r14 = arg2[rbx_1];\n            if (r14 == 0)\n            {\n            label_40a72d:\n                int64_t rax_6 = -2;\n                if (var_41_1 == 0)\n                {\n                    rax_6 = var_58;\n                }\n                var_58 = rax_6;\n                break;\n            }\n        }\n    }\n    return var_58;\n}\n\n"
        },
        {
            "funcName": "sub_40a770",
            "funcStartAddr": "0x40a770",
            "funcEndAddr": "0x40a7e1",
            "decompiledFuncCode": "int64_t sub_40a770(uint64_t arg1, uint64_t arg2, int64_t arg3)\n{\n    char* rbx;\n    if (arg3 == -1)\n    {\n        rbx = dcgettext(nullptr, \"invalid argument %s for %s\", 5);\n    }\n    else\n    {\n        rbx = dcgettext(nullptr, \"ambiguous argument %s for %s\", 5);\n    }\n    /* tailcall */\n    return error(0, 0, rbx, sub_40f550(0, 8, arg2), sub_40f860(1, arg1));\n}\n\n"
        },
        {
            "funcName": "sub_40a7f0",
            "funcStartAddr": "0x40a7f0",
            "funcEndAddr": "0x40a908",
            "decompiledFuncCode": "char* sub_40a7f0(int64_t* arg1, int64_t arg2, uint64_t arg3)\n{\n    int64_t r14 = 0;\n    int64_t rbp = arg2;\n    int64_t rbx = 0;\n    fputs_unlocked(dcgettext(nullptr, \"Valid arguments are:\", 5), stderr);\n    uint64_t r12 = *arg1;\n    if (r12 != 0)\n    {\n        do\n        {\n            if ((rbx != 0 && memcmp(r14, rbp, arg3) == 0))\n            {\n                rbx = (rbx + 1);\n                rbp = (rbp + arg3);\n                __fprintf_chk(stderr, 1, \", %s\", sub_40f880(r12));\n                r12 = arg1[rbx];\n                if (r12 == 0)\n                {\n                    break;\n                }\n                continue;\n            }\n            rbx = (rbx + 1);\n            r14 = rbp;\n            rbp = (rbp + arg3);\n            __fprintf_chk(stderr, 1, \"\\n  - %s\", sub_40f880(r12));\n            r12 = arg1[rbx];\n        } while (r12 != 0);\n    }\n    uint64_t* const rdi_6 = stderr;\n    char* rax_6 = stderr[5];\n    if (rax_6 >= stderr[6])\n    {\n        /* tailcall */\n        return __overflow(rdi_6, 0xa);\n    }\n    stderr[5] = &rax_6[1];\n    *rax_6 = 0xa;\n    return rax_6;\n}\n\n"
        },
        {
            "funcName": "sub_40a910",
            "funcStartAddr": "0x40a910",
            "funcEndAddr": "0x40a980",
            "decompiledFuncCode": "int64_t sub_40a910(uint64_t arg1, char* arg2, int64_t* arg3, int64_t arg4, \n    uint64_t arg5, int64_t arg6)\n{\n    int64_t rax = sub_40a650(arg2, arg3, arg4, arg5);\n    if (rax < 0)\n    {\n        sub_40a770(arg1, arg2, rax);\n        sub_40a7f0(arg3, arg4, arg5);\n        arg6();\n        rax = -1;\n    }\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_40a980",
            "funcStartAddr": "0x40a980",
            "funcEndAddr": "0x40a9cd",
            "decompiledFuncCode": "int64_t sub_40a980(int64_t arg1, int64_t* arg2, int64_t arg3, uint64_t arg4)\n{\n    int64_t r14 = *arg2;\n    if (r14 != 0)\n    {\n        void* rbx_1 = &arg2[1];\n        int64_t rbp_1 = arg3;\n        do\n        {\n            if (memcmp(arg1, rbp_1, arg4) == 0)\n            {\n                break;\n            }\n            r14 = *rbx_1;\n            rbp_1 = (rbp_1 + arg4);\n            rbx_1 = (rbx_1 + 8);\n        } while (r14 != 0);\n    }\n    return r14;\n}\n\n"
        },
        {
            "funcName": "sub_40a9d0",
            "funcStartAddr": "0x40a9d0",
            "funcEndAddr": "0x40a9d8",
            "decompiledFuncCode": "int64_t sub_40a9d0(int64_t arg1)\n{\n    data_61cbb8 = arg1;\n}\n\n"
        },
        {
            "funcName": "sub_40a9e0",
            "funcStartAddr": "0x40a9e0",
            "funcEndAddr": "0x40a9e8",
            "decompiledFuncCode": "int64_t sub_40a9e0(char arg1)\n{\n    data_61cbb0 = arg1;\n}\n\n"
        },
        {
            "funcName": "sub_40a9f0",
            "funcStartAddr": "0x40a9f0",
            "funcEndAddr": "0x40aa8e",
            "decompiledFuncCode": "uint64_t sub_40a9f0()\n{\n    int32_t rax = sub_413520(stdout);\n    int32_t* rax_1;\n    if (rax != 0)\n    {\n        rax_1 = __errno_location();\n        if ((data_61cbb0 == 0 || (data_61cbb0 != 0 && *rax_1 != 0x20)))\n        {\n            char* rax_3 = dcgettext(nullptr, \"write error\", 5);\n            int64_t rdi_2 = data_61cbb8;\n            if (rdi_2 == 0)\n            {\n                error(0, *rax_1, \"%s\", rax_3);\n            }\n            else\n            {\n                error(0, *rax_1, \"%s: %s\", sub_40f6d0(rdi_2), rax_3);\n            }\n        }\n    }\n    if ((rax == 0 || ((rax != 0 && data_61cbb0 != 0) && *rax_1 == 0x20)))\n    {\n        uint64_t rax_2 = sub_413520(stderr);\n        if (rax_2 == 0)\n        {\n            return rax_2;\n        }\n    }\n    _exit(data_61c518);\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_40aa90",
            "funcStartAddr": "0x40aa90",
            "funcEndAddr": "0x40aabb",
            "decompiledFuncCode": "void sub_40aa90(int64_t* arg1)\n{\n    arg1[2] = 0;\n    *arg1 = -0x1032547698badcff;\n    arg1[1] = 0x1032547698badcfe;\n    arg1[3] = 0;\n}\n\n"
        },
        {
            "funcName": "sub_40aae0",
            "funcStartAddr": "0x40aae0",
            "funcEndAddr": "0x40b24f",
            "decompiledFuncCode": "int32_t* sub_40aae0(int32_t* arg1, int64_t arg2, int32_t* arg3)\n{\n    int32_t* rbx = arg1;\n    int32_t r11 = arg3[1];\n    void* rcx = (rbx + (arg2 & 0xfffffffffffffffc));\n    int32_t r10 = arg3[2];\n    int32_t var_48 = *arg3;\n    int32_t rdx = arg2;\n    int32_t var_50 = arg3[3];\n    int32_t rax_3;\n    rax_3 = (rdx + arg3[4]) < rdx;\n    int32_t rsi_2 = (((arg2 >> 0x20) + arg3[5]) + rax_3);\n    arg3[4] = (rdx + arg3[4]);\n    arg3[5] = rsi_2;\n    if (rbx < rcx)\n    {\n        int32_t r15_1 = r10;\n        do\n        {\n            int32_t r14_1 = *rbx;\n            int32_t rsi_3 = rbx[1];\n            int32_t r8_1 = rbx[3];\n            int32_t r10_1 = rbx[5];\n            int32_t rbp_1 = rbx[6];\n            int32_t r13_1 = rbx[7];\n            int32_t r12_1 = rbx[9];\n            int32_t r8_2 = rbx[0xb];\n            int32_t rax_11 = ((ROLD(((((var_50 ^ r15_1) & r11) ^ var_50) + ((r14_1 + var_48) - 0x28955b88)), 7)) + r11);\n            int32_t rcx_2 = rbx[2];\n            int32_t rdx_9 = ((ROLD(((((r11 ^ r15_1) & rax_11) ^ r15_1) + ((rsi_3 + var_50) - 0x173848aa)), 0xc)) + rax_11);\n            int32_t r9_5 = rbx[4];\n            int32_t rcx_8 = ((RORD(((((rax_11 ^ r11) & rdx_9) ^ r11) + ((rcx_2 + r15_1) + 0x242070db)), 0xf)) + rdx_9);\n            int32_t r9_6 = rbx[0xf];\n            int32_t rsi_10 = ((RORD(((((rax_11 ^ rdx_9) & rcx_8) ^ rax_11) + ((r8_1 + r11) - 0x3e423112)), 0xa)) + rcx_8);\n            int32_t rax_18 = ((ROLD(((((rdx_9 ^ rcx_8) & rsi_10) ^ rdx_9) + ((r9_5 + rax_11) - 0xa83f051)), 7)) + rsi_10);\n            int32_t rdx_16 = ((ROLD(((((rcx_8 ^ rsi_10) & rax_18) ^ rcx_8) + ((r10_1 + rdx_9) + 0x4787c62a)), 0xc)) + rax_18);\n            int32_t rbp_6 = rbx[8];\n            int32_t rcx_14 = ((RORD(((((rsi_10 ^ rax_18) & rdx_16) ^ rsi_10) + ((rbp_1 + rcx_8) - 0x57cfb9ed)), 0xf)) + rdx_16);\n            int32_t rbp_7 = rbx[0xc];\n            int32_t rsi_16 = ((RORD(((((rax_18 ^ rdx_16) & rcx_14) ^ rax_18) + ((r13_1 + rsi_10) - 0x2b96aff)), 0xa)) + rcx_14);\n            int32_t r12_2 = rbx[0xe];\n            int32_t rax_25 = ((ROLD(((((rdx_16 ^ rcx_14) & rsi_16) ^ rdx_16) + ((rbp_6 + rax_18) + 0x698098d8)), 7)) + rsi_16);\n            int32_t rdi_9 = rbx[0xa];\n            int32_t rdx_23 = ((ROLD(((((rcx_14 ^ rsi_16) & rax_25) ^ rcx_14) + ((r12_1 + rdx_16) - 0x74bb0851)), 0xc)) + rax_25);\n            int32_t r8_3 = rbx[0xd];\n            rbx = &rbx[0x10];\n            int32_t rcx_21 = ((RORD(((((rsi_16 ^ rax_25) & rdx_23) ^ rsi_16) + ((rdi_9 + rcx_14) - 0xa44f)), 0xf)) + rdx_23);\n            int32_t rsi_23 = ((RORD(((((rax_25 ^ rdx_23) & rcx_21) ^ rax_25) + ((r8_2 + rsi_16) - 0x76a32842)), 0xa)) + rcx_21);\n            int32_t rax_32 = ((ROLD(((((rdx_23 ^ rcx_21) & rsi_23) ^ rdx_23) + ((rbp_7 + rax_25) + 0x6b901122)), 7)) + rsi_23);\n            int32_t rdx_30 = ((ROLD(((((rcx_21 ^ rsi_23) & rax_32) ^ rcx_21) + ((r8_3 + rdx_23) - 0x2678e6d)), 0xc)) + rax_32);\n            int32_t rcx_28 = ((RORD(((((rsi_23 ^ rax_32) & rdx_30) ^ rsi_23) + ((r12_2 + rcx_21) - 0x5986bc72)), 0xf)) + rdx_30);\n            int32_t rsi_30 = ((RORD(((((rax_32 ^ rdx_30) & rcx_28) ^ rax_32) + ((r9_6 + rsi_23) + 0x49b40821)), 0xa)) + rcx_28);\n            int32_t rax_39 = ((ROLD(((((rcx_28 ^ rsi_30) & rdx_30) ^ rcx_28) + ((rsi_3 + rax_32) - 0x9e1da9e)), 5)) + rsi_30);\n            int32_t rdx_37 = ((ROLD(((((rsi_30 ^ rax_39) & rcx_28) ^ rsi_30) + ((rbp_1 + rdx_30) - 0x3fbf4cc0)), 9)) + rax_39);\n            int32_t rcx_35 = ((ROLD(((((rax_39 ^ rdx_37) & rsi_30) ^ rax_39) + ((r8_2 + rcx_28) + 0x265e5a51)), 0xe)) + rdx_37);\n            int32_t rsi_37 = ((RORD(((((rdx_37 ^ rcx_35) & rax_39) ^ rdx_37) + ((r14_1 + rsi_30) - 0x16493856)), 0xc)) + rcx_35);\n            int32_t rax_46 = ((ROLD(((((rcx_35 ^ rsi_37) & rdx_37) ^ rcx_35) + ((r10_1 + rax_39) - 0x29d0efa3)), 5)) + rsi_37);\n            int32_t rdx_44 = ((ROLD(((((rsi_37 ^ rax_46) & rcx_35) ^ rsi_37) + ((rdi_9 + rdx_37) + 0x2441453)), 9)) + rax_46);\n            int32_t rcx_42 = ((ROLD(((((rax_46 ^ rdx_44) & rsi_37) ^ rax_46) + ((r9_6 + rcx_35) - 0x275e197f)), 0xe)) + rdx_44);\n            int32_t rsi_44 = ((RORD(((((rdx_44 ^ rcx_42) & rax_46) ^ rdx_44) + ((r9_5 + rsi_37) - 0x182c0438)), 0xc)) + rcx_42);\n            int32_t rax_53 = ((ROLD(((((rcx_42 ^ rsi_44) & rdx_44) ^ rcx_42) + ((r12_1 + rax_46) + 0x21e1cde6)), 5)) + rsi_44);\n            int32_t rdx_51 = ((ROLD(((((rsi_44 ^ rax_53) & rcx_42) ^ rsi_44) + ((r12_2 + rdx_44) - 0x3cc8f82a)), 9)) + rax_53);\n            int32_t rcx_49 = ((ROLD(((((rax_53 ^ rdx_51) & rsi_44) ^ rax_53) + ((r8_1 + rcx_42) - 0xb2af279)), 0xe)) + rdx_51);\n            int32_t rdi_38 = ((RORD(((((rdx_51 ^ rcx_49) & rax_53) ^ rdx_51) + ((rbp_6 + rsi_44) + 0x455a14ed)), 0xc)) + rcx_49);\n            int32_t rax_60 = ((ROLD(((((rcx_49 ^ rdi_38) & rdx_51) ^ rcx_49) + ((r8_3 + rax_53) - 0x561c16fb)), 5)) + rdi_38);\n            int32_t rdx_58 = ((ROLD(((((rdi_38 ^ rax_60) & rcx_49) ^ rdi_38) + ((rcx_2 + rdx_51) - 0x3105c08)), 9)) + rax_60);\n            int32_t rsi_55 = ((ROLD(((((rax_60 ^ rdx_58) & rdi_38) ^ rax_60) + ((r13_1 + rcx_49) + 0x676f02d9)), 0xe)) + rdx_58);\n            int32_t rcx_52 = (rdx_58 ^ rsi_55);\n            int32_t rdi_43 = ((RORD((((rcx_52 & rax_60) ^ rdx_58) + ((rbp_7 + rdi_38) - 0x72d5b376)), 0xc)) + rsi_55);\n            int32_t rcx_56 = ((ROLD(((rcx_52 ^ rdi_43) + ((r10_1 + rax_60) - 0x5c6be)), 4)) + rdi_43);\n            int32_t rdx_64 = ((ROLD((((rsi_55 ^ rdi_43) ^ rcx_56) + ((rbp_6 + rdx_58) - 0x788e097f)), 0xb)) + rcx_56);\n            int32_t rsi_61 = ((ROLD((((rdi_43 ^ rcx_56) ^ rdx_64) + ((r8_2 + rsi_55) + 0x6d9d6122)), 0x10)) + rdx_64);\n            int32_t rax_71 = ((RORD((((rcx_56 ^ rdx_64) ^ rsi_61) + ((r12_2 + rdi_43) - 0x21ac7f4)), 9)) + rsi_61);\n            int32_t rcx_62 = ((ROLD((((rdx_64 ^ rsi_61) ^ rax_71) + ((rsi_3 + rcx_56) - 0x5b4115bc)), 4)) + rax_71);\n            int32_t rdi_52 = ((ROLD((((rsi_61 ^ rax_71) ^ rcx_62) + ((r9_5 + rdx_64) + 0x4bdecfa9)), 0xb)) + rcx_62);\n            int32_t rdx_71 = ((ROLD((((rax_71 ^ rcx_62) ^ rdi_52) + ((r13_1 + rsi_61) - 0x944b4a0)), 0x10)) + rdi_52);\n            int32_t rsi_69 = ((RORD((((rcx_62 ^ rdi_52) ^ rdx_71) + ((rdi_9 + rax_71) - 0x41404390)), 9)) + rdx_71);\n            int32_t rcx_68 = ((ROLD((((rdi_52 ^ rdx_71) ^ rsi_69) + ((r8_3 + rcx_62) + 0x289b7ec6)), 4)) + rsi_69);\n            int32_t rax_79 = ((ROLD((((rdx_71 ^ rsi_69) ^ rcx_68) + ((r14_1 + rdi_52) - 0x155ed806)), 0xb)) + rcx_68);\n            int32_t rdi_59 = ((ROLD((((rsi_69 ^ rcx_68) ^ rax_79) + ((r8_1 + rdx_71) - 0x2b10cf7b)), 0x10)) + rax_79);\n            int32_t rsi_75 = ((RORD((((rcx_68 ^ rax_79) ^ rdi_59) + ((rbp_1 + rsi_69) + 0x4881d05)), 9)) + rdi_59);\n            int32_t rdx_81 = ((ROLD((((rax_79 ^ rdi_59) ^ rsi_75) + ((r12_1 + rcx_68) - 0x262b2fc7)), 4)) + rsi_75);\n            int32_t rcx_75 = ((ROLD((((rdi_59 ^ rsi_75) ^ rdx_81) + ((rbp_7 + rax_79) - 0x1924661b)), 0xb)) + rdx_81);\n            int32_t rdi_64 = ((ROLD((((rsi_75 ^ rdx_81) ^ rcx_75) + ((r9_6 + rdi_59) + 0x1fa27cf8)), 0x10)) + rcx_75);\n            int32_t rax_88 = ((RORD((((rdx_81 ^ rcx_75) ^ rdi_64) + ((rcx_2 + rsi_75) - 0x3b53a99b)), 9)) + rdi_64);\n            int32_t rdx_88 = ((ROLD(((((!rcx_75) | rax_88) ^ rdi_64) + ((r14_1 + rdx_81) - 0xbd6ddbc)), 6)) + rax_88);\n            int32_t rcx_81 = ((ROLD(((((!rdi_64) | rdx_88) ^ rax_88) + ((r13_1 + rcx_75) + 0x432aff97)), 0xa)) + rdx_88);\n            int32_t rsi_85 = ((ROLD(((((!rax_88) | rcx_81) ^ rdx_88) + ((r12_2 + rdi_64) - 0x546bdc59)), 0xf)) + rcx_81);\n            int32_t rax_94 = ((RORD(((((!rdx_88) | rsi_85) ^ rcx_81) + ((r10_1 + rax_88) - 0x36c5fc7)), 0xb)) + rsi_85);\n            int32_t rdx_94 = ((ROLD(((((!rcx_81) | rax_94) ^ rsi_85) + ((rbp_7 + rdx_88) + 0x655b59c3)), 6)) + rax_94);\n            int32_t rcx_87 = ((ROLD(((((!rsi_85) | rdx_94) ^ rax_94) + ((r8_1 + rcx_81) - 0x70f3336e)), 0xa)) + rdx_94);\n            int32_t rsi_92 = ((ROLD(((((!rax_94) | rcx_87) ^ rdx_94) + ((rdi_9 + rsi_85) - 0x100b83)), 0xf)) + rcx_87);\n            int32_t rax_100 = ((RORD(((((!rdx_94) | rsi_92) ^ rcx_87) + ((rsi_3 + rax_94) - 0x7a7ba22f)), 0xb)) + rsi_92);\n            int32_t rdx_100 = ((ROLD(((((!rcx_87) | rax_100) ^ rsi_92) + ((rbp_6 + rdx_94) + 0x6fa87e4f)), 6)) + rax_100);\n            int32_t rcx_93 = ((ROLD(((((!rsi_92) | rdx_100) ^ rax_100) + ((r9_6 + rcx_87) - 0x1d31920)), 0xa)) + rdx_100);\n            int32_t rsi_99 = ((ROLD(((((!rax_100) | rcx_93) ^ rdx_100) + ((rbp_1 + rsi_92) - 0x5cfebcec)), 0xf)) + rcx_93);\n            int32_t rdi_80 = ((RORD(((((!rdx_100) | rsi_99) ^ rcx_93) + ((r8_3 + rax_100) + 0x4e0811a1)), 0xb)) + rsi_99);\n            int32_t rax_107 = ((ROLD(((((!rcx_93) | rdi_80) ^ rsi_99) + ((r9_5 + rdx_100) - 0x8ac817e)), 6)) + rdi_80);\n            int32_t rdx_108 = ((ROLD(((((!rsi_99) | rax_107) ^ rdi_80) + ((r8_2 + rcx_93) - 0x42c50dcb)), 0xa)) + rax_107);\n            int32_t rcx_102 = ((ROLD(((((!rdi_80) | rdx_108) ^ rax_107) + ((rcx_2 + rsi_99) + 0x2ad7d2bb)), 0xf)) + rdx_108);\n            var_48 = (var_48 + rax_107);\n            r15_1 = (r15_1 + rcx_102);\n            r11 = (r11 + ((RORD(((((!rax_107) | rcx_102) ^ rdx_108) + ((r12_1 + rdi_80) - 0x14792c6f)), 0xb)) + rcx_102));\n            var_50 = (var_50 + rdx_108);\n        } while (rcx > rbx);\n        r10 = r15_1;\n    }\n    *arg3 = var_48;\n    arg3[1] = r11;\n    arg3[2] = r10;\n    arg3[3] = var_50;\n    return arg3;\n}\n\n"
        },
        {
            "funcName": "sub_40b250",
            "funcStartAddr": "0x40b250",
            "funcEndAddr": "0x40b354",
            "decompiledFuncCode": "int64_t sub_40b250(int32_t* arg1, int32_t* arg2, int64_t arg3, int64_t arg4, \n    int64_t arg5)\n{\n    uint64_t rax = arg1[6];\n    int32_t rdx = arg1[5];\n    int32_t rsi = rax;\n    int64_t r8_2 = (((arg5 - arg5) & 0xffffffffffffffc0) - -0x80);\n    int64_t rcx_2 = (((arg4 - arg4) & 0xfffffffffffffff0) + 0x1f);\n    int64_t rdi_2 = (((arg1 - arg1) & 0xfffffffffffffff0) + 0x1e);\n    int32_t temp1 = arg1[4];\n    uint64_t rsi_1 = (rsi + arg1[4]);\n    arg1[4] = rsi_1;\n    if ((rsi + temp1) < rsi)\n    {\n        rdx = (rdx + 1);\n        arg1[5] = rdx;\n    }\n    arg1[(rdi_2 + 7)] = (rsi_1 << 3);\n    int32_t* r9_1 = &arg1[7];\n    arg1[(rcx_2 + 7)] = ((rdx << 3) | (rsi_1 >> 0x1d));\n    void* rdx_3 = (r9_1 + rax);\n    void* rcx_3 = ((r8_2 - rax) - 8);\n    if (rcx_3 >= 8)\n    {\n        int64_t* rdi_6 = ((rdx_3 + 8) & 0xfffffffffffffff8);\n        *rdx_3 = 0x80;\n        *((rdx_3 + rcx_3) - 8) = *(rcx_3 + 0x416ad8);\n        void* rdx_4 = (rdx_3 - rdi_6);\n        void* rsi_3 = (0x416ae0 - rdx_4);\n        for (uint64_t rcx_5 = ((rcx_3 + rdx_4) >> 3); rcx_5 != 0; rcx_5 = (rcx_5 - 1))\n        {\n            *rdi_6 = *rsi_3;\n            rdi_6 = &rdi_6[1];\n            rsi_3 = (rsi_3 + 8);\n        }\n    }\n    else if ((rcx_3 & 4) != 0)\n    {\n        *rdx_3 = 0x80;\n        *((rdx_3 + rcx_3) - 4) = *(rcx_3 + 0x416adc);\n    }\n    else if (rcx_3 != 0)\n    {\n        *rdx_3 = 0x80;\n        if ((rcx_3 & 2) != 0)\n        {\n            *((rdx_3 + rcx_3) - 2) = *(rcx_3 + 0x416ade);\n        }\n    }\n    sub_40aae0(r9_1, r8_2, arg1);\n    /* tailcall */\n    return __md5_read_ctx(arg1, arg2);\n}\n\n"
        },
        {
            "funcName": "sub_40b360",
            "funcStartAddr": "0x40b360",
            "funcEndAddr": "0x40b65e",
            "decompiledFuncCode": "uint64_t sub_40b360(int128_t* arg1, uint64_t arg2, int32_t* arg3)\n{\n    uint64_t r13 = arg2;\n    int128_t* rbx = arg1;\n    uint64_t rax = arg3[6];\n    if (rax != 0)\n    {\n        uint64_t rbp_4 = rax;\n        void* r15_2 = &arg3[7];\n        uint64_t rdx_5 = (0x80 - rbp_4);\n        void* rdi_4 = (r15_2 + rbp_4);\n        if (rdx_5 > arg2)\n        {\n            rdx_5 = arg2;\n        }\n        rax = memcpy(rdi_4, rbx, rdx_5);\n        int32_t rsi_5 = (arg3[6] + rdx_5);\n        arg3[6] = rsi_5;\n        if (rsi_5 > 0x40)\n        {\n            sub_40aae0(r15_2, (rsi_5 & 0xffffffc0), arg3);\n            int32_t rcx_2 = arg3[6];\n            rax = (((rbp_4 + rdx_5) & 0xffffffffffffffc0) + r15_2);\n            uint64_t rdx_10 = (rcx_2 & 0x3f);\n            arg3[6] = rdx_10;\n            if (rdx_10 >= 8)\n            {\n                *(arg3 + 0x1c) = *rax;\n                uint64_t rcx_5 = rdx_10;\n                *((r15_2 + rcx_5) - 8) = *((rax + rcx_5) - 8);\n                void* rsi_11 = (&arg3[9] & 0xfffffffffffffff8);\n                void* r15_3 = (r15_2 - rsi_11);\n                rax = (rax - r15_3);\n                int32_t r15_5 = ((r15_3 + rdx_10) & 0xfffffff8);\n                if (r15_5 >= 8)\n                {\n                    int32_t r15_6 = (r15_5 & 0xfffffff8);\n                    int32_t rdx_11 = 0;\n                    do\n                    {\n                        uint64_t rcx_6 = rdx_11;\n                        rdx_11 = (rdx_11 + 8);\n                        *(rsi_11 + rcx_6) = *(rax + rcx_6);\n                    } while (rdx_11 < r15_6);\n                }\n            }\n            else if ((rcx_2 & 4) != 0)\n            {\n                arg3[7] = *rax;\n                rax = *((rax + rdx_10) - 4);\n                *((r15_2 + rdx_10) - 4) = rax;\n            }\n            else if (rdx_10 != 0)\n            {\n                arg3[7] = *rax;\n                if ((rcx_2 & 2) != 0)\n                {\n                    rax = *((rax + rdx_10) - 2);\n                    *((r15_2 + rdx_10) - 2) = rax;\n                }\n            }\n        }\n        rbx = (rbx + rdx_5);\n        r13 = (r13 - rdx_5);\n    }\n    int32_t* rbp_1;\n    void* r14_3;\n    if (r13 > 0x3f)\n    {\n        if ((rbx & 3) == 0)\n        {\n            uint64_t rbp_2 = r13;\n            int128_t* rdi_3 = rbx;\n            r13 = (r13 & 0x3f);\n            int64_t rbp_3 = (rbp_2 & 0xffffffffffffffc0);\n            rbx = (rbx + rbp_3);\n            rax = sub_40aae0(rdi_3, rbp_3, arg3);\n        }\n        else\n        {\n            rbp_1 = &arg3[7];\n            if (r13 == 0x40)\n            {\n                r14_3 = rbx;\n            }\n            else\n            {\n                uint64_t rax_2 = ((r13 - 0x41) >> 6);\n                r14_3 = &rbx[((rax_2 + 1) * 4)];\n                do\n                {\n                    int128_t zmm0 = *rbx;\n                    rbx = &rbx[4];\n                    *rbp_1 = zmm0;\n                    *(rbp_1 + 0x10) = rbx[-3];\n                    *(rbp_1 + 0x20) = rbx[-2];\n                    *(rbp_1 + 0x30) = rbx[-1];\n                    sub_40aae0(rbp_1, 0x40, arg3);\n                } while (rbx != r14_3);\n                r13 = ((r13 + ((-rax_2) << 6)) - 0x40);\n            }\n        }\n    }\n    if ((((r13 > 0x3f && (rbx & 3) == 0) || r13 <= 0x3f) && r13 != 0))\n    {\n        rbp_1 = &arg3[7];\n        r14_3 = rbx;\n    }\n    if (((((r13 > 0x3f && (rbx & 3) == 0) || r13 <= 0x3f) && r13 != 0) || (r13 > 0x3f && (rbx & 3) != 0)))\n    {\n        uint64_t rcx_1 = arg3[6];\n        uint64_t rax_6 = r13;\n        void* rsi = (rbp_1 + rcx_1);\n        if (r13 >= 8)\n        {\n            uint64_t rdx_6 = r13;\n            void* rdi_6 = ((rsi + 8) & 0xfffffffffffffff8);\n            *rsi = *r14_3;\n            *((rsi + rdx_6) - 8) = *((r14_3 + rdx_6) - 8);\n            void* rax_10 = (rsi - rdi_6);\n            void* r14_5 = (r14_3 - rax_10);\n            rax_6 = ((rax_10 + r13) & 0xfffffff8);\n            if (rax_6 >= 8)\n            {\n                rax_6 = (rax_6 & 0xfffffff8);\n                int32_t rdx_7 = 0;\n                do\n                {\n                    uint64_t rsi_6 = rdx_7;\n                    rdx_7 = (rdx_7 + 8);\n                    *(rdi_6 + rsi_6) = *(r14_5 + rsi_6);\n                } while (rdx_7 < rax_6);\n            }\n        }\n        else if ((r13 & 4) != 0)\n        {\n            *rsi = *r14_3;\n            uint64_t rdx_13 = r13;\n            rax_6 = *((r14_3 + rdx_13) - 4);\n            *((rsi + rdx_13) - 4) = rax_6;\n        }\n        else if (r13 != 0)\n        {\n            *rsi = *r14_3;\n            if ((rax_6 & 2) != 0)\n            {\n                uint64_t rdx_14 = r13;\n                rax_6 = *((r14_3 + rdx_14) - 2);\n                *((rsi + rdx_14) - 2) = rax_6;\n            }\n        }\n        uint64_t r13_1 = (r13 + rcx_1);\n        if (r13_1 > 0x3f)\n        {\n            r13_1 = (r13_1 - 0x40);\n            sub_40aae0(rbp_1, 0x40, arg3);\n            rax_6 = memcpy(rbp_1, &arg3[0x17], r13_1);\n        }\n        arg3[6] = r13_1;\n        return rax_6;\n    }\n    if ((((r13 > 0x3f && (rbx & 3) == 0) || r13 <= 0x3f) && r13 == 0))\n    {\n        return rax;\n    }\n}\n\n"
        },
        {
            "funcName": "sub_40b660",
            "funcStartAddr": "0x40b660",
            "funcEndAddr": "0x40b6b5",
            "decompiledFuncCode": "int64_t sub_40b660(int128_t* arg1, uint64_t arg2, int32_t* arg3)\n{\n    int64_t var_a8 = -0x1032547698badcff;\n    int64_t var_a0 = 0x1032547698badcfe;\n    int64_t var_98 = 0;\n    int32_t var_90 = 0;\n    int64_t rcx;\n    int64_t rdx_1;\n    int64_t r8;\n    rcx = sub_40b360(arg1, arg2, &var_a8);\n    return sub_40b250(&var_a8, arg3, rdx_1, rcx, r8);\n}\n\n"
        },
        {
            "funcName": "sub_40b6c0",
            "funcStartAddr": "0x40b6c0",
            "funcEndAddr": "0x40b7e5",
            "decompiledFuncCode": "int64_t sub_40b6c0(int32_t* arg1, int32_t* arg2)\n{\n    int32_t* rax = malloc(0x8048);\n    if (rax == 0)\n    {\n        return 1;\n    }\n    int32_t var_b0 = 0;\n    int64_t var_c8 = -0x1032547698badcff;\n    int64_t var_c0 = 0x1032547698badcfe;\n    int64_t var_b8 = 0;\n    while (true)\n    {\n        uint64_t rbx_1 = 0;\n        while (true)\n        {\n            uint64_t rax_1;\n            int64_t rcx_2;\n            int64_t r8_1;\n            rax_1 = fread_unlocked((rax + rbx_1), 1, (0x8000 - rbx_1), arg1);\n            rbx_1 = (rbx_1 + rax_1);\n            if (rbx_1 == 0x8000)\n            {\n                sub_40aae0(rax, 0x8000, &var_c8);\n                break;\n            }\n            int32_t rdx_1 = *arg1;\n            uint64_t rdx_2;\n            if (rax_1 == 0)\n            {\n                rdx_2 = (rdx_1 & 0x20);\n                if (rdx_2 != 0)\n                {\n                    free(rax);\n                    return 1;\n                }\n            }\n            else\n            {\n                rdx_2 = (rdx_1 & 0x10);\n                if (rdx_2 == 0)\n                {\n                    continue;\n                }\n            }\n            if (rbx_1 != 0)\n            {\n                rcx_2 = sub_40b360(rax, rbx_1, &var_c8);\n            }\n            sub_40b250(&var_c8, arg2, rdx_2, rcx_2, r8_1);\n            free(rax);\n            return 0;\n        }\n    }\n}\n\n"
        },
        {
            "funcName": "sub_40b7f0",
            "funcStartAddr": "0x40b7f0",
            "funcEndAddr": "0x40b7f5",
            "decompiledFuncCode": "int64_t sub_40b7f0(int32_t arg1, int64_t arg2, off64_t arg3, int32_t arg4)\n{\n    /* tailcall */\n    return posix_fadvise(arg1, arg2, arg3, arg4);\n}\n\n"
        },
        {
            "funcName": "sub_40b800",
            "funcStartAddr": "0x40b800",
            "funcEndAddr": "0x40b821",
            "decompiledFuncCode": "void sub_40b800(FILE* arg1, int32_t arg2)\n{\n    if (arg1 == 0)\n    {\n        return;\n    }\n    /* tailcall */\n    return posix_fadvise(fileno(arg1), 0, 0, arg2);\n}\n\n"
        },
        {
            "funcName": "sub_40b830",
            "funcStartAddr": "0x40b830",
            "funcEndAddr": "0x40b8f3",
            "decompiledFuncCode": "char* sub_40b830(int64_t* arg1)\n{\n    char* rsi = *arg1;\n    char rdx = *rsi;\n    if (rdx == 0)\n    {\n        return 0;\n    }\n    char rcx = 0;\n    char* rax = nullptr;\n    do\n    {\n        if (rcx != 0)\n        {\n            int32_t rcx_2 = (rdx - 0x41);\n            if (rcx_2 <= 0x39)\n            {\n                rcx = 0;\n            }\n            if ((rcx_2 > 0x39 || (rcx_2 <= 0x39 && ((1 << rcx_2) & 0x3ffffff03ffffff) == 0)))\n            {\n                rcx = 0;\n                if (rdx != 0x7e)\n                {\n                    rax = nullptr;\n                }\n            }\n        }\n        else if (rdx == 0x2e)\n        {\n            rcx = 1;\n            if (rax == 0)\n            {\n                rax = rsi;\n            }\n        }\n        else if (((rdx > 0x5a && (rdx - 0x61) > 0x19) || ((rdx <= 0x5a && rdx < 0x41) && (rdx - 0x30) > 9)))\n        {\n            if (rdx != 0x7e)\n            {\n                rax = nullptr;\n            }\n            rsi = &rsi[1];\n            *arg1 = rsi;\n            rdx = *rsi;\n            if (rdx == 0)\n            {\n                break;\n            }\n            continue;\n        }\n        rsi = &rsi[1];\n        *arg1 = rsi;\n        rdx = *rsi;\n    } while (rdx != 0);\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_40b900",
            "funcStartAddr": "0x40b900",
            "funcEndAddr": "0x40bd0d",
            "decompiledFuncCode": "uint64_t sub_40b900(char* arg1, char* arg2)\n{\n    char* rbp = arg2;\n    char* rbx = arg1;\n    int32_t rax = strcmp(arg1, arg2);\n    int32_t r12 = rax;\n    if (rax != 0)\n    {\n        char r8_1 = *rbx;\n        if (r8_1 == 0)\n        {\n        label_40bbaa:\n            r12 = -1;\n        }\n        else\n        {\n            char r9_1 = *rbp;\n            bool c_1 = false;\n            bool z_1 = (r9_1 & r9_1) == 0;\n            if ((!z_1))\n            {\n                int64_t rcx_1 = 2;\n                char* rdi = rbx;\n                void* const rsi = &data_416b21;\n                while (rcx_1 != 0)\n                {\n                    char temp0_1 = *rsi;\n                    char temp1_1 = *rdi;\n                    c_1 = temp0_1 < temp1_1;\n                    z_1 = temp0_1 == temp1_1;\n                    rsi = (rsi + 1);\n                    rdi = &rdi[1];\n                    rcx_1 = (rcx_1 - 1);\n                    if ((!z_1))\n                    {\n                        break;\n                    }\n                }\n                rax = ((!z_1) && (!c_1));\n                rax = (rax - 0);\n                bool c_2 = false;\n                bool z_2 = (rax & rax) == 0;\n                if (z_2)\n                {\n                    goto label_40bbaa;\n                }\n                int64_t rcx_2 = 2;\n                void* const rsi_1 = &data_416b21;\n                char* rdi_1 = rbp;\n                while (rcx_2 != 0)\n                {\n                    char temp2_1 = *rsi_1;\n                    char temp3_1 = *rdi_1;\n                    c_2 = temp2_1 < temp3_1;\n                    z_2 = temp2_1 == temp3_1;\n                    rsi_1 = (rsi_1 + 1);\n                    rdi_1 = &rdi_1[1];\n                    rcx_2 = (rcx_2 - 1);\n                    if ((!z_2))\n                    {\n                        break;\n                    }\n                }\n                rax = ((!z_2) && (!c_2));\n                rax = (rax - 0);\n                bool c_3 = false;\n                bool z_3 = (rax & rax) == 0;\n                if (z_3)\n                {\n                    goto label_40bb80;\n                }\n                int64_t rcx_3 = 3;\n                char* rdi_2 = rbx;\n                void* const rsi_2 = &data_416b20;\n                while (rcx_3 != 0)\n                {\n                    char temp4_1 = *rsi_2;\n                    char temp5_1 = *rdi_2;\n                    c_3 = temp4_1 < temp5_1;\n                    z_3 = temp4_1 == temp5_1;\n                    rsi_2 = (rsi_2 + 1);\n                    rdi_2 = &rdi_2[1];\n                    rcx_3 = (rcx_3 - 1);\n                    if ((!z_3))\n                    {\n                        break;\n                    }\n                }\n                rax = ((!z_3) && (!c_3));\n                rax = (rax - 0);\n                bool c_4 = false;\n                bool z_4 = (rax & rax) == 0;\n                if (z_4)\n                {\n                    goto label_40bbaa;\n                }\n                int64_t rcx_4 = 3;\n                void* const rsi_3 = &data_416b20;\n                char* rdi_3 = rbp;\n                while (rcx_4 != 0)\n                {\n                    char temp6_1 = *rsi_3;\n                    char temp7_1 = *rdi_3;\n                    c_4 = temp6_1 < temp7_1;\n                    z_4 = temp6_1 == temp7_1;\n                    rsi_3 = (rsi_3 + 1);\n                    rdi_3 = &rdi_3[1];\n                    rcx_4 = (rcx_4 - 1);\n                    if ((!z_4))\n                    {\n                        break;\n                    }\n                }\n                rax = ((!z_4) && (!c_4));\n                rax = (rax - 0);\n                if (rax == 0)\n                {\n                    goto label_40bb80;\n                }\n                bool rdx_1 = r8_1 == 0x2e;\n                if ((r9_1 != 0x2e && rdx_1 != 0))\n                {\n                    goto label_40bbaa;\n                }\n                rax = r9_1 == 0x2e;\n                if (r8_1 != 0x2e)\n                {\n                    if (rax != 0)\n                    {\n                        goto label_40bb80;\n                    }\n                label_40b9e4:\n                    char* var_48 = rbx;\n                    char* var_40 = rbp;\n                    char* rax_1 = sub_40b830(&var_48);\n                    char* rax_2 = sub_40b830(&var_40);\n                    uint64_t r13_2;\n                    void* r14_1;\n                    if (rax_1 != 0)\n                    {\n                        r13_2 = (rax_1 - rbx);\n                        if (rax_2 == 0)\n                        {\n                            r14_1 = (var_40 - rbp);\n                        }\n                    }\n                    else\n                    {\n                        r13_2 = (var_48 - rbx);\n                        if (rax_2 == 0)\n                        {\n                            goto label_40bc8e;\n                        }\n                    }\n                    if (((rax_1 != 0 && rax_2 != 0) || rax_1 == 0))\n                    {\n                        r14_1 = (rax_2 - rbp);\n                    }\n                    if ((r13_2 == r14_1 && strncmp(rbx, rbp, r13_2) == 0))\n                    {\n                        r13_2 = (var_48 - rbx);\n                    label_40bc8e:\n                        r14_1 = (var_40 - rbp);\n                    }\n                    int64_t rsi_4 = 0;\n                    int64_t rdx_2 = 0;\n                    int32_t rax_14;\n                    int32_t r9_4;\n                    while (true)\n                    {\n                        if ((r13_2 <= rdx_2 && r14_1 <= rsi_4))\n                        {\n                            return r12;\n                        }\n                        int64_t r9_3 = (rsi_4 - rdx_2);\n                        char rax_4;\n                        uint32_t rcx_8;\n                        char rdi_7;\n                        uint32_t r10_1;\n                        if (r13_2 > rdx_2)\n                        {\n                            do\n                            {\n                                rax_4 = rbx[rdx_2];\n                                if ((rax_4 - 0x30) <= 9)\n                                {\n                                    break;\n                                }\n                                r10_1 = rax_4;\n                                if ((r10_1 - 0x30) > 9)\n                                {\n                                    break;\n                                }\n                                if (r14_1 != rsi_4)\n                                {\n                                    break;\n                                }\n                            label_40bac3:\n                                rdx_2 = (rdx_2 + 1);\n                                rsi_4 = (rsi_4 + 1);\n                            } while (r13_2 > rdx_2);\n                            uint32_t rax_6;\n                            if (((rax_4 - 0x30) > 9 && (r10_1 - 0x30) > 9))\n                            {\n                                rcx_8 = r10_1;\n                            label_40ba74:\n                                int32_t rcx_9 = (rcx_8 - 0x41);\n                                if ((rcx_9 <= 0x39 && ((1 << rcx_9) & 0x3ffffff03ffffff) != 0))\n                                {\n                                    rax_6 = 0;\n                                    if (r14_1 != (rdx_2 + r9_3))\n                                    {\n                                    label_40baa7:\n                                        rdi_7 = rbp[rsi_4];\n                                        rax_6 = rdi_7;\n                                        if ((rax_6 - 0x30) <= 9)\n                                        {\n                                            rax_6 = 0;\n                                        }\n                                        else\n                                        {\n                                        label_40bb19:\n                                            int32_t rcx_14 = (rdi_7 - 0x41);\n                                            if ((rcx_14 > 0x39 || (rcx_14 <= 0x39 && ((1 << rcx_14) & 0x3ffffff03ffffff) == 0)))\n                                            {\n                                                if (rdi_7 == 0x7e)\n                                                {\n                                                    rax_6 = -1;\n                                                }\n                                                else\n                                                {\n                                                    rax_6 = (rax_6 + 0x100);\n                                                }\n                                            }\n                                        }\n                                    }\n                                    if (rax_6 == r10_1)\n                                    {\n                                        goto label_40bac3;\n                                    }\n                                    return (r10_1 - rax_6);\n                                }\n                                if (rax_4 == 0x7e)\n                                {\n                                    r10_1 = -1;\n                                }\n                                else\n                                {\n                                    r10_1 = (r10_1 + 0x100);\n                                }\n                                if (r14_1 == (rdx_2 + r9_3))\n                                {\n                                    return r10_1;\n                                }\n                                goto label_40baa7;\n                            }\n                            if ((rax_4 - 0x30) > 9)\n                            {\n                                rdi_7 = rbp[rsi_4];\n                            label_40bb06:\n                                rax_6 = rdi_7;\n                                r10_1 = 0;\n                                if ((rax_6 - 0x30) <= 9)\n                                {\n                                    goto label_40bac3;\n                                }\n                                goto label_40bb19;\n                            }\n                        }\n                        rdi_7 = rbp[rsi_4];\n                        int32_t rcx_11 = rdi_7;\n                        if (r14_1 > rsi_4)\n                        {\n                            if ((rdi_7 - 0x30) <= 9)\n                            {\n                                goto label_40bb44;\n                            }\n                            if (r13_2 == rdx_2)\n                            {\n                                goto label_40bb06;\n                            }\n                            rcx_8 = rbx[rdx_2];\n                            rax_4 = rcx_8;\n                            r10_1 = rcx_8;\n                            if ((rcx_8 - 0x30) > 9)\n                            {\n                                goto label_40ba74;\n                            }\n                            goto label_40bb06;\n                        }\n                    label_40bb44:\n                        while (true)\n                        {\n                            rax_14 = rbx[rdx_2];\n                            if (rax_14 != 0x30)\n                            {\n                                break;\n                            }\n                            rdx_2 = (rdx_2 + 1);\n                        }\n                        if (rdi_7 == 0x30)\n                        {\n                            do\n                            {\n                                rsi_4 = (rsi_4 + 1);\n                                rcx_11 = rbp[rsi_4];\n                            } while (rcx_11 == 0x30);\n                        }\n                        r9_4 = (rcx_11 - 0x30);\n                        if ((rax_14 - 0x30) > 9)\n                        {\n                            if (r9_4 <= 9)\n                            {\n                                break;\n                            }\n                        }\n                        else\n                        {\n                            if (r9_4 > 9)\n                            {\n                                break;\n                            }\n                            int64_t rdi_9 = rdx_2;\n                            int32_t r9_5 = 0;\n                            void* r10_4 = ((rsi_4 - rdx_2) + rbp);\n                            int64_t rax_13;\n                            int32_t r11_3;\n                            do\n                            {\n                                int32_t rax_10 = (rax_14 - rcx_11);\n                                if (r9_5 == 0)\n                                {\n                                    r9_5 = rax_10;\n                                }\n                                rdi_9 = (rdi_9 + 1);\n                                rcx_11 = *(r10_4 + rdi_9);\n                                rax_13 = ((rdi_9 - rdx_2) + rsi_4);\n                                r11_3 = (rcx_11 - 0x30);\n                                rax_14 = rbx[rdi_9];\n                                if ((rax_14 - 0x30) > 9)\n                                {\n                                    break;\n                                }\n                            } while (r11_3 <= 9);\n                            if ((rax_14 - 0x30) <= 9)\n                            {\n                                break;\n                            }\n                            if (r11_3 <= 9)\n                            {\n                                break;\n                            }\n                            if (r9_5 != 0)\n                            {\n                                return r9_5;\n                            }\n                            rsi_4 = rax_13;\n                            rdx_2 = rdi_9;\n                        }\n                    }\n                    if (((rax_14 - 0x30) > 9 && r9_4 <= 9))\n                    {\n                        goto label_40bbaa;\n                    }\n                    goto label_40bb80;\n                }\n                if ((rax != 0 && rdx_1 != 0))\n                {\n                    rbx = &rbx[1];\n                    rbp = &rbp[1];\n                }\n                goto label_40b9e4;\n            }\n        label_40bb80:\n            r12 = 1;\n        }\n    }\n    return r12;\n}\n\n"
        },
        {
            "funcName": "sub_40bd10",
            "funcStartAddr": "0x40bd10",
            "funcEndAddr": "0x40bd6e",
            "decompiledFuncCode": "int64_t sub_40bd10()\n{\n    void var_8;\n    int64_t rcx;\n    int64_t rdx;\n    int32_t rdi;\n    uint64_t r8;\n    ssize_t r9;\n    char* rax = setlocale(rdi, nullptr, rdx, rcx, r8, r9, var_8, __return_addr);\n    int64_t rax_1 = 1;\n    bool c = false;\n    bool z = (rax & rax) == 0;\n    if ((!z))\n    {\n        int64_t rcx_1 = 2;\n        void* const rdi_1 = &data_416a04;\n        char* rsi_1 = rax;\n        while (rcx_1 != 0)\n        {\n            char temp0_1 = *rsi_1;\n            char temp1_1 = *rdi_1;\n            c = temp0_1 < temp1_1;\n            z = temp0_1 == temp1_1;\n            rsi_1 = &rsi_1[1];\n            rdi_1 = (rdi_1 + 1);\n            rcx_1 = (rcx_1 - 1);\n            if ((!z))\n            {\n                break;\n            }\n        }\n        rcx_1 = ((!z) && (!c));\n        rcx_1 = (rcx_1 - 0);\n        rax_1 = 0;\n        bool c_1 = false;\n        bool z_1 = (rcx_1 & rcx_1) == 0;\n        if ((!z_1))\n        {\n            char const* const rdi_2 = \"POSIX\";\n            int64_t rcx_2 = 6;\n            char* rsi_2 = rax;\n            while (rcx_2 != 0)\n            {\n                char temp2_1 = *rsi_2;\n                char const temp3_1 = *rdi_2;\n                c_1 = temp2_1 < temp3_1;\n                z_1 = temp2_1 == temp3_1;\n                rsi_2 = &rsi_2[1];\n                rdi_2 = &rdi_2[1];\n                rcx_2 = (rcx_2 - 1);\n                if ((!z_1))\n                {\n                    break;\n                }\n            }\n            rax_1 = ((!z_1) && (!c_1));\n            rax_1 = (rax_1 - 0);\n            rax_1 = rax_1 != 0;\n            return rax_1;\n        }\n    }\n    return rax_1;\n}\n\n"
        },
        {
            "funcName": "sub_40bd70",
            "funcStartAddr": "0x40bd70",
            "funcEndAddr": "0x40be03",
            "decompiledFuncCode": "int64_t sub_40bd70(int64_t arg1)\n{\n    int64_t rsi = 0xa;\n    if (arg1 >= 0xa)\n    {\n        rsi = arg1;\n    }\n    int64_t rsi_1 = (rsi | 1);\n    if (rsi_1 != -1)\n    {\n        do\n        {\n            int64_t rax_2;\n            int64_t rdx_1;\n            rdx_1 = HIGHD((rsi_1 * -0x5555555555555555));\n            rax_2 = LOWD((rsi_1 * -0x5555555555555555));\n            uint64_t rcx_2 = (rsi_1 - ((rdx_1 >> 1) * 3));\n            uint64_t rax_6 = rcx_2;\n            int64_t rdi;\n            if ((rsi_1 > 9 && rcx_2 != 0))\n            {\n                int64_t r8_1 = 0x10;\n                rdi = 9;\n                int64_t rcx_3 = 3;\n                uint64_t temp1_1;\n                do\n                {\n                    rcx_3 = (rcx_3 + 2);\n                    rdi = (rdi + r8_1);\n                    temp1_1 = (COMBINE(0, rsi_1) % rcx_3);\n                    rax_6 = temp1_1;\n                    if (rdi >= rsi_1)\n                    {\n                        break;\n                    }\n                    r8_1 = (r8_1 + 8);\n                } while (temp1_1 != 0);\n            }\n            if (((rsi_1 <= 9 || ((rsi_1 > 9 && rcx_2 != 0) && rdi >= rsi_1)) && rax_6 != 0))\n            {\n                break;\n            }\n            rsi_1 = (rsi_1 + 2);\n        } while (rsi_1 != -1);\n    }\n    return rsi_1;\n}\n\n"
        },
        {
            "funcName": "sub_40be10",
            "funcStartAddr": "0x40be10",
            "funcEndAddr": "0x40be20",
            "decompiledFuncCode": "uint64_t sub_40be10(int64_t arg1, int64_t arg2)\n{\n    return (COMBINE(0, (RORQ(arg1, 3))) % arg2);\n}\n\n"
        },
        {
            "funcName": "sub_40be20",
            "funcStartAddr": "0x40be20",
            "funcEndAddr": "0x40be27",
            "decompiledFuncCode": "int64_t sub_40be20(int64_t arg1, int64_t arg2)\n{\n    int64_t rax;\n    rax = arg1 == arg2;\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_40be30",
            "funcStartAddr": "0x402f00",
            "funcEndAddr": "0x40be51",
            "decompiledFuncCode": "int64_t sub_40be30(void* arg1, int64_t arg2)\n{\n    int64_t rax = *(arg1 + 0x30)(arg2, *(arg1 + 0x10));\n    if (*(arg1 + 0x10) <= rax)\n    {\n        abort();\n        /* no return */\n    }\n    return ((rax << 4) + *arg1);\n}\n\n"
        },
        {
            "funcName": "sub_40be60",
            "funcStartAddr": "0x40be60",
            "funcEndAddr": "0x40bf79",
            "decompiledFuncCode": "int64_t sub_40be60(void* arg1, int64_t arg2, int64_t* arg3, char arg4)\n{\n    int64_t* rax = sub_40be30(arg1, arg2);\n    *arg3 = rax;\n    int64_t rsi = *rax;\n    if (rsi != 0)\n    {\n        int64_t* rbx_1 = rax;\n        char rax_1;\n        if (rsi != arg2)\n        {\n            rax_1 = *(arg1 + 0x38)(arg2, rsi);\n            if (rax_1 != 0)\n            {\n                rsi = *rbx_1;\n            }\n            else\n            {\n                int64_t* rax_2 = rbx_1[1];\n                if (rax_2 != 0)\n                {\n                    rsi = *rax_2;\n                    if (arg2 != rsi)\n                    {\n                        do\n                        {\n                            if (*(arg1 + 0x38)(arg2, rsi) != 0)\n                            {\n                                rax_2 = rbx_1[1];\n                                rsi = *rax_2;\n                                break;\n                            }\n                            rbx_1 = rbx_1[1];\n                            rax_2 = rbx_1[1];\n                            if (rax_2 == 0)\n                            {\n                                return 0;\n                            }\n                            rsi = *rax_2;\n                        } while (rsi != arg2);\n                    }\n                    if (arg4 != 0)\n                    {\n                        rbx_1[1] = rax_2[1];\n                        *rax_2 = 0;\n                        rax_2[1] = *(arg1 + 0x48);\n                        *(arg1 + 0x48) = rax_2;\n                    }\n                    goto label_40bf19;\n                }\n            }\n        }\n        if (((rsi != arg2 && rax_1 != 0) || rsi == arg2))\n        {\n            if (arg4 == 0)\n            {\n            label_40bf19:\n                return rsi;\n            }\n            int128_t* rax_5 = rbx_1[1];\n            if (rax_5 != 0)\n            {\n                *rbx_1 = *rax_5;\n                *rax_5 = 0;\n                *(rax_5 + 8) = *(arg1 + 0x48);\n                *(arg1 + 0x48) = rax_5;\n                return rsi;\n            }\n            *rbx_1 = 0;\n            goto label_40bf19;\n        }\n    }\n    return 0;\n}\n\n"
        },
        {
            "funcName": "sub_40bf80",
            "funcStartAddr": "0x40bf80",
            "funcEndAddr": "0x40bffe",
            "decompiledFuncCode": "int64_t sub_40bf80(int64_t* arg1)\n{\n    int32_t* rax_3 = *arg1;\n    if (rax_3 != 0x416ba0)\n    {\n        int32_t zmm0 = rax_3[2];\n        if (((zmm0 == 0.100000001f | (FCMP_UO(zmm0, 0.100000001f))) || (zmm0 < 0.100000001f | (FCMP_UO(zmm0, 0.100000001f)))))\n        {\n        label_40bfea:\n            *arg1 = 0x416ba0;\n            return 0;\n        }\n        if (((0.899999976f == zmm0 | (FCMP_UO(0.899999976f, zmm0))) || (0.899999976f < zmm0 | (FCMP_UO(0.899999976f, zmm0)))))\n        {\n            goto label_40bfea;\n        }\n        float zmm1 = rax_3[3];\n        if (((zmm1 == 1.10000002f | (FCMP_UO(zmm1, 1.10000002f))) || (zmm1 < 1.10000002f | (FCMP_UO(zmm1, 1.10000002f)))))\n        {\n            goto label_40bfea;\n        }\n        zmm1 = *rax_3;\n        if ((zmm1 < 0f | (FCMP_UO(zmm1, 0f))))\n        {\n            goto label_40bfea;\n        }\n        zmm1 = (zmm1 + 0.100000001f);\n        int32_t zmm2 = rax_3[1];\n        if (((zmm2 == zmm1 | (FCMP_UO(zmm2, zmm1))) || (zmm2 < zmm1 | (FCMP_UO(zmm2, zmm1)))))\n        {\n            goto label_40bfea;\n        }\n        int512_t zmm3;\n        zmm3 = 0x3f800000;\n        if ((1f < zmm2 | (FCMP_UO(1f, zmm2))))\n        {\n            goto label_40bfea;\n        }\n        if ((!((!(zmm0 == zmm1 | (FCMP_UO(zmm0, zmm1)))) && (!(zmm0 < zmm1 | (FCMP_UO(zmm0, zmm1)))))))\n        {\n            goto label_40bfea;\n        }\n    }\n    return 1;\n}\n\n"
        },
        {
            "funcName": "sub_40c000",
            "funcStartAddr": "0x40c000",
            "funcEndAddr": "0x40c14a",
            "decompiledFuncCode": "int64_t sub_40c000(void* arg1, int64_t* arg2, char arg3)\n{\n    int64_t* r12 = *arg2;\n    if (r12 < arg2[1])\n    {\n        do\n        {\n            int64_t r15_2 = *r12;\n            if (r15_2 != 0)\n            {\n                int64_t* rbx_1 = r12[1];\n                if (rbx_1 != 0)\n                {\n                    while (true)\n                    {\n                        int64_t r15_1 = *rbx_1;\n                        int64_t* rax_1 = sub_40be30(arg1, r15_1);\n                        int64_t* rdx = rbx_1[1];\n                        if (*rax_1 != 0)\n                        {\n                            rbx_1[1] = rax_1[1];\n                            rax_1[1] = rbx_1;\n                            rbx_1 = rdx;\n                            if (rdx == 0)\n                            {\n                                break;\n                            }\n                        }\n                        else\n                        {\n                            *rax_1 = r15_1;\n                            *(arg1 + 0x18) = (*(arg1 + 0x18) + 1);\n                            *rbx_1 = 0;\n                            rbx_1[1] = *(arg1 + 0x48);\n                            *(arg1 + 0x48) = rbx_1;\n                            rbx_1 = rdx;\n                            if (rdx == 0)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    r15_2 = *r12;\n                }\n                r12[1] = 0;\n                if (arg3 == 0)\n                {\n                    int64_t* rax_3 = sub_40be30(arg1, r15_2);\n                    if (*rax_3 == 0)\n                    {\n                        *rax_3 = r15_2;\n                        *(arg1 + 0x18) = (*(arg1 + 0x18) + 1);\n                    }\n                    else\n                    {\n                        int64_t* rax_4 = *(arg1 + 0x48);\n                        if (rax_4 != 0)\n                        {\n                            *(arg1 + 0x48) = rax_4[1];\n                        }\n                        else\n                        {\n                            rax_4 = malloc(0x10);\n                            if (rax_4 == 0)\n                            {\n                                return 0;\n                            }\n                        }\n                        int64_t rdx_2 = rax_3[1];\n                        *rax_4 = r15_2;\n                        rax_4[1] = rdx_2;\n                        rax_3[1] = rax_4;\n                    }\n                    *r12 = 0;\n                    r12 = &r12[2];\n                    arg2[3] = (arg2[3] - 1);\n                    if (arg2[1] <= r12)\n                    {\n                        break;\n                    }\n                    continue;\n                }\n            }\n            r12 = &r12[2];\n        } while (arg2[1] > r12);\n    }\n    return 1;\n}\n\n"
        },
        {
            "funcName": "sub_40c150",
            "funcStartAddr": "0x40c150",
            "funcEndAddr": "0x40c155",
            "decompiledFuncCode": "int64_t sub_40c150(void* arg1)\n{\n    return *(arg1 + 0x10);\n}\n\n"
        },
        {
            "funcName": "sub_40c160",
            "funcStartAddr": "0x40c160",
            "funcEndAddr": "0x40c165",
            "decompiledFuncCode": "int64_t sub_40c160(void* arg1)\n{\n    return *(arg1 + 0x18);\n}\n\n"
        },
        {
            "funcName": "sub_40c170",
            "funcStartAddr": "0x40c170",
            "funcEndAddr": "0x40c175",
            "decompiledFuncCode": "int64_t sub_40c170(void* arg1)\n{\n    return *(arg1 + 0x20);\n}\n\n"
        },
        {
            "funcName": "sub_40c180",
            "funcStartAddr": "0x40c180",
            "funcEndAddr": "0x40c1cf",
            "decompiledFuncCode": "int64_t sub_40c180(int64_t* arg1)\n{\n    int64_t* rsi = *arg1;\n    int64_t rdi = arg1[1];\n    int64_t rax = 0;\n    if (rsi >= rdi)\n    {\n        return 0;\n    }\n    while (true)\n    {\n        if (*rsi == 0)\n        {\n            rsi = &rsi[2];\n            if (rsi >= rdi)\n            {\n                break;\n            }\n        }\n        else\n        {\n            void* rdx_1 = rsi[1];\n            int64_t rcx_1 = 1;\n            if (rdx_1 != 0)\n            {\n                do\n                {\n                    rdx_1 = *(rdx_1 + 8);\n                    rcx_1 = (rcx_1 + 1);\n                } while (rdx_1 != 0);\n            }\n            if (rax < rcx_1)\n            {\n                rax = rcx_1;\n            }\n            rsi = &rsi[2];\n            if (rsi >= rdi)\n            {\n                break;\n            }\n        }\n    }\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_40c1d0",
            "funcStartAddr": "0x40c1d0",
            "funcEndAddr": "0x40c237",
            "decompiledFuncCode": "int64_t sub_40c1d0(int64_t* arg1)\n{\n    int64_t* rcx = *arg1;\n    int64_t rsi = arg1[1];\n    int64_t rdx = 0;\n    int64_t r8 = 0;\n    if (rcx < rsi)\n    {\n        do\n        {\n            if (*rcx != 0)\n            {\n                void* rax_1 = rcx[1];\n                r8 = (r8 + 1);\n                rdx = (rdx + 1);\n                if (rax_1 != 0)\n                {\n                    do\n                    {\n                        rax_1 = *(rax_1 + 8);\n                        rdx = (rdx + 1);\n                    } while (rax_1 != 0);\n                    rcx = &rcx[2];\n                    if (rcx >= rsi)\n                    {\n                        break;\n                    }\n                    continue;\n                }\n            }\n            rcx = &rcx[2];\n        } while (rcx < rsi);\n    }\n    if (arg1[3] == r8)\n    {\n        int64_t rax_2;\n        rax_2 = arg1[4] == rdx;\n        return rax_2;\n    }\n    return 0;\n}\n\n"
        },
        {
            "funcName": "sub_40c240",
            "funcStartAddr": "0x40c240",
            "funcEndAddr": "0x40c388",
            "decompiledFuncCode": "int64_t sub_40c240(int64_t* arg1, FILE* arg2)\n{\n    int64_t rbx = 0;\n    int64_t r12 = arg1[2];\n    int64_t r13 = arg1[3];\n    int64_t* rsi = *arg1;\n    int64_t rdi = arg1[1];\n    if (rsi < rdi)\n    {\n        while (true)\n        {\n            if (*rsi == 0)\n            {\n                rsi = &rsi[2];\n                if (rsi >= rdi)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                void* rax_1 = rsi[1];\n                int64_t rdx_1 = 1;\n                if (rax_1 != 0)\n                {\n                    do\n                    {\n                        rax_1 = *(rax_1 + 8);\n                        rdx_1 = (rdx_1 + 1);\n                    } while (rax_1 != 0);\n                }\n                if (rbx < rdx_1)\n                {\n                    rbx = rdx_1;\n                }\n                rsi = &rsi[2];\n                if (rsi >= rdi)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    __fprintf_chk(arg2, 1, \"# entries:         %lu\\n\");\n    __fprintf_chk(arg2, 1, \"# buckets:         %lu\\n\", r12);\n    __fprintf_chk(arg2, 1, \"# buckets used:    %lu (%.2f%%)\\n\", r13);\n    /* tailcall */\n    return __fprintf_chk(arg2, 1, \"max bucket length: %lu\\n\", rbx);\n}\n\n"
        },
        {
            "funcName": "sub_40c390",
            "funcStartAddr": "0x40c390",
            "funcEndAddr": "0x40c3e3",
            "decompiledFuncCode": "int64_t sub_40c390(void* arg1, int64_t arg2)\n{\n    int64_t rbp = arg2;\n    int64_t* rax = sub_40be30(arg1, arg2);\n    int64_t rsi = *rax;\n    if (rsi != 0)\n    {\n        int64_t* rbx_1 = rax;\n        while (true)\n        {\n            if (rsi != rbp)\n            {\n                if (*(arg1 + 0x38)(rbp, rsi) != 0)\n                {\n                    rbp = *rbx_1;\n                }\n                else\n                {\n                    rbx_1 = rbx_1[1];\n                    if (rbx_1 == 0)\n                    {\n                        break;\n                    }\n                    rsi = *rbx_1;\n                    continue;\n                }\n            }\n            return rbp;\n        }\n    }\n    return 0;\n}\n\n"
        },
        {
            "funcName": "sub_40c3f0",
            "funcStartAddr": "0x402f05",
            "funcEndAddr": "0x40c438",
            "decompiledFuncCode": "int64_t sub_40c3f0(int64_t* arg1)\n{\n    if (arg1[4] == 0)\n    {\n        return 0;\n    }\n    int64_t* rdx = *arg1;\n    int64_t rcx = arg1[1];\n    if (rdx < rcx)\n    {\n        do\n        {\n            int64_t rax_1 = *rdx;\n            if (rax_1 != 0)\n            {\n                return rax_1;\n            }\n            rdx = &rdx[2];\n        } while (rdx < rcx);\n    }\n    abort();\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_40c440",
            "funcStartAddr": "0x40c440",
            "funcEndAddr": "0x40c4aa",
            "decompiledFuncCode": "int64_t sub_40c440(void* arg1, int64_t arg2)\n{\n    int64_t* rax = sub_40be30(arg1, arg2);\n    int64_t* rcx = rax;\n    int64_t* rdx = rax;\n    do\n    {\n        int64_t rax_1 = *rdx;\n        rdx = rdx[1];\n        if (rax_1 == arg2)\n        {\n            if (rdx != 0)\n            {\n                return *rdx;\n            }\n            break;\n        }\n    } while (rdx != 0);\n    int64_t rdx_1 = *(arg1 + 8);\n    int64_t rax_2;\n    do\n    {\n        rcx = &rcx[2];\n        if (rdx_1 <= rcx)\n        {\n            rax_2 = 0;\n            break;\n        }\n        rax_2 = *rcx;\n    } while (rax_2 == 0);\n    return rax_2;\n}\n\n"
        },
        {
            "funcName": "sub_40c4b0",
            "funcStartAddr": "0x40c4b0",
            "funcEndAddr": "0x40c514",
            "decompiledFuncCode": "int64_t sub_40c4b0(int64_t* arg1, int64_t arg2, int64_t arg3)\n{\n    int64_t* rdx = *arg1;\n    if (arg1[1] <= rdx)\n    {\n        return 0;\n    }\n    int64_t r9 = 0;\n    do\n    {\n        int64_t r8_1 = *rdx;\n        if (r8_1 != 0)\n        {\n            if (arg3 <= r9)\n            {\n                break;\n            }\n            *(arg2 + (r9 << 3)) = r8_1;\n            int64_t* r8_2 = rdx[1];\n            int64_t rcx_1 = (r9 + 1);\n            if (r8_2 != 0)\n            {\n                do\n                {\n                    if (arg3 == rcx_1)\n                    {\n                        return arg3;\n                    }\n                    rcx_1 = (rcx_1 + 1);\n                    *((arg2 + (rcx_1 << 3)) - 8) = *r8_2;\n                    r8_2 = r8_2[1];\n                } while (r8_2 != 0);\n            }\n            r9 = rcx_1;\n        }\n        rdx = &rdx[2];\n    } while (arg1[1] > rdx);\n    return r9;\n}\n\n"
        },
        {
            "funcName": "sub_40c520",
            "funcStartAddr": "0x40c520",
            "funcEndAddr": "0x40c598",
            "decompiledFuncCode": "int64_t sub_40c520(int64_t* arg1, int64_t arg2, int64_t arg3)\n{\n    int64_t* r14 = *arg1;\n    int64_t rbp;\n    if (arg1[1] <= r14)\n    {\n        rbp = 0;\n    }\n    else\n    {\n        rbp = 0;\n        do\n        {\n            int64_t rdi = *r14;\n            if (rdi != 0)\n            {\n                int64_t* rbx_1 = r14;\n                while (true)\n                {\n                    if (arg2(rdi, arg3) == 0)\n                    {\n                        return rbp;\n                    }\n                    rbx_1 = rbx_1[1];\n                    rbp = (rbp + 1);\n                    if (rbx_1 == 0)\n                    {\n                        break;\n                    }\n                    rdi = *rbx_1;\n                }\n            }\n            r14 = &r14[2];\n        } while (arg1[1] > r14);\n    }\n    return rbp;\n}\n\n"
        },
        {
            "funcName": "sub_40c5a0",
            "funcStartAddr": "0x40c5a0",
            "funcEndAddr": "0x40c5d1",
            "decompiledFuncCode": "uint64_t sub_40c5a0(char* arg1, int64_t arg2)\n{\n    uint64_t rcx = *arg1;\n    uint64_t rdx = 0;\n    if (rcx != 0)\n    {\n        do\n        {\n            arg1 = &arg1[1];\n            int64_t rax_4 = (((rdx << 5) - rdx) + rcx);\n            rcx = *arg1;\n            rdx = (COMBINE(0, rax_4) % arg2);\n        } while (rcx != 0);\n    }\n    return rdx;\n}\n\n"
        },
        {
            "funcName": "sub_40c5e0",
            "funcStartAddr": "0x40c5e0",
            "funcEndAddr": "0x40c600",
            "decompiledFuncCode": "void sub_40c5e0(int64_t* arg1)\n{\n    arg1[2] = 0;\n    *arg1 = 0x3f80000000000000;\n    arg1[1] = 0x3fb4fdf43f4ccccd;\n}\n\n"
        },
        {
            "funcName": "sub_40c600",
            "funcStartAddr": "0x40c600",
            "funcEndAddr": "0x40c78a",
            "decompiledFuncCode": "int64_t* sub_40c600(int64_t arg1, void* arg2, int64_t arg3, int64_t arg4, \n    int64_t arg5)\n{\n    int64_t r13 = arg4;\n    int64_t r12 = arg3;\n    int64_t rbp = arg1;\n    if (arg3 == 0)\n    {\n        r12 = 0x40be10;\n    }\n    if (arg4 == 0)\n    {\n        r13 = 0x40be20;\n    }\n    int64_t* rax = malloc(0x50);\n    int64_t* rbx = rax;\n    if (rax != 0)\n    {\n        int64_t* rdi = &rax[5];\n        float zmm1_1;\n        if (arg2 == 0)\n        {\n            rax[5] = 0x416ba0;\n            zmm1_1 = 0.800000012f;\n            if (sub_40bf80(rdi) != 0)\n            {\n                float zmm0_1;\n                if (rbp < 0)\n                {\n                label_40c773:\n                    zmm0_1 = ((rbp >> 1) | (rbp & 1));\n                    zmm0_1 = (zmm0_1 + zmm0_1);\n                label_40c727:\n                    zmm0_1 = (zmm0_1 / zmm1_1);\n                    if ((!(zmm0_1 < 1.84467441e+19f | (FCMP_UO(zmm0_1, 1.84467441e+19f)))))\n                    {\n                        goto label_40c6e0;\n                    }\n                    if ((zmm0_1 < 9.22337204e+18f | (FCMP_UO(zmm0_1, 9.22337204e+18f))))\n                    {\n                        rbp = (truncf(zmm0_1, arg4));\n                    }\n                    else\n                    {\n                        zmm0_1 = (zmm0_1 - 9.22337204e+18f);\n                        rbp = ((truncf(zmm0_1, arg4)) ^ 0x8000000000000000);\n                    }\n                    goto label_40c673;\n                }\n            label_40c722:\n                zmm0_1 = rbp;\n                goto label_40c727;\n            }\n        label_40c6e0:\n            int64_t* rdi_3 = rbx;\n            rbx = nullptr;\n            free(rdi_3);\n        }\n        else\n        {\n            rax[5] = arg2;\n            if (sub_40bf80(rdi) == 0)\n            {\n                goto label_40c6e0;\n            }\n            if (*(arg2 + 0x10) == 0)\n            {\n                zmm1_1 = *(arg2 + 8);\n                if (rbp < 0)\n                {\n                    goto label_40c773;\n                }\n                goto label_40c722;\n            }\n        label_40c673:\n            size_t rax_2 = sub_40bd70(rbp);\n            uint64_t rax_3;\n            rax_3 = (rax_2 >> 0x3d) != 0;\n            uint64_t rax_4 = rax_3;\n            if ((TEST_BITQ(rax_2, 0x3c)))\n            {\n                goto label_40c6e0;\n            }\n            if (rax_4 != 0)\n            {\n                goto label_40c6e0;\n            }\n            rbx[2] = rax_2;\n            if (rax_2 == 0)\n            {\n                goto label_40c6e0;\n            }\n            int64_t rax_5 = calloc(rax_2, 0x10);\n            *rbx = rax_5;\n            if (rax_5 == 0)\n            {\n                goto label_40c6e0;\n            }\n            rbx[3] = 0;\n            rbx[4] = 0;\n            rbx[1] = ((rax_2 << 4) + rax_5);\n            rbx[6] = r12;\n            rbx[7] = r13;\n            rbx[8] = arg5;\n            rbx[9] = 0;\n        }\n    }\n    return rbx;\n}\n\n"
        },
        {
            "funcName": "sub_40c790",
            "funcStartAddr": "0x40c790",
            "funcEndAddr": "0x40c838",
            "decompiledFuncCode": "void sub_40c790(int64_t* arg1)\n{\n    int64_t* r12 = *arg1;\n    if (r12 < arg1[1])\n    {\n        while (true)\n        {\n            if (*r12 == 0)\n            {\n                r12 = &r12[2];\n                if (arg1[1] <= r12)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                int64_t* rbx_1 = r12[1];\n                int64_t rax = arg1[8];\n                if (rbx_1 != 0)\n                {\n                    int64_t* rdx_1;\n                    do\n                    {\n                        if (rax != 0)\n                        {\n                            rax(*rbx_1);\n                            rax = arg1[8];\n                        }\n                        rdx_1 = rbx_1[1];\n                        int64_t rcx_1 = arg1[9];\n                        *rbx_1 = 0;\n                        rbx_1[1] = rcx_1;\n                        arg1[9] = rbx_1;\n                        rbx_1 = rdx_1;\n                    } while (rdx_1 != 0);\n                }\n                if (rax != 0)\n                {\n                    rax(*r12);\n                }\n                *r12 = 0;\n                r12 = &r12[2];\n                r12[-1] = 0;\n                if (arg1[1] <= r12)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    arg1[3] = 0;\n    arg1[4] = 0;\n}\n\n"
        },
        {
            "funcName": "sub_40c840",
            "funcStartAddr": "0x40c840",
            "funcEndAddr": "0x40c916",
            "decompiledFuncCode": "int64_t sub_40c840(int64_t* arg1)\n{\n    int64_t* rbp = *arg1;\n    int64_t rax = arg1[1];\n    if (((arg1[8] != 0 && arg1[4] != 0) && rbp < rax))\n    {\n        while (true)\n        {\n            int64_t rdi = *rbp;\n            if (rdi == 0)\n            {\n                rbp = &rbp[2];\n                if (rax <= rbp)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                int64_t* rbx_1 = rbp;\n                while (true)\n                {\n                    arg1[8](rdi);\n                    rbx_1 = rbx_1[1];\n                    if (rbx_1 == 0)\n                    {\n                        break;\n                    }\n                    rdi = *rbx_1;\n                }\n                rax = arg1[1];\n                rbp = &rbp[2];\n                if (rax <= rbp)\n                {\n                    break;\n                }\n            }\n        }\n        rbp = *arg1;\n    }\n    if ((((arg1[8] == 0 || (arg1[8] != 0 && arg1[4] == 0)) || ((arg1[8] != 0 && arg1[4] != 0) && rbp < rax)) && rbp < rax))\n    {\n        do\n        {\n            void* rdi_1 = rbp[1];\n            if (rdi_1 != 0)\n            {\n                void* rbx_2;\n                do\n                {\n                    rbx_2 = *(rdi_1 + 8);\n                    free(rdi_1);\n                    rdi_1 = rbx_2;\n                } while (rbx_2 != 0);\n            }\n            rbp = &rbp[2];\n        } while (arg1[1] > rbp);\n    }\n    void* rdi_2 = arg1[9];\n    if (rdi_2 != 0)\n    {\n        void* rbx_3;\n        do\n        {\n            rbx_3 = *(rdi_2 + 8);\n            free(rdi_2);\n            rdi_2 = rbx_3;\n        } while (rbx_3 != 0);\n    }\n    free(*arg1);\n    /* tailcall */\n    return free(arg1);\n}\n\n"
        },
        {
            "funcName": "sub_40c920",
            "funcStartAddr": "0x402f0a",
            "funcEndAddr": "0x40cb1a",
            "decompiledFuncCode": "uint64_t sub_40c920(int64_t* arg1, int64_t arg2)\n{\n    void* r12 = arg1[5];\n    int32_t rbx_4;\n    if (*(r12 + 0x10) == 0)\n    {\n        float zmm0;\n        if (arg2 < 0)\n        {\n            zmm0 = ((arg2 >> 1) | (arg2 & 1));\n            zmm0 = (zmm0 + zmm0);\n        }\n        else\n        {\n            zmm0 = arg2;\n        }\n        zmm0 = (zmm0 / *(r12 + 8));\n        if ((!(zmm0 < 1.84467441e+19f | (FCMP_UO(zmm0, 1.84467441e+19f)))))\n        {\n        label_40ca90:\n            rbx_4 = 0;\n        label_40ca9c:\n            return rbx_4;\n        }\n        if ((zmm0 < 9.22337204e+18f | (FCMP_UO(zmm0, 9.22337204e+18f))))\n        {\n            arg2 = (truncf(zmm0, 0x28));\n        }\n        else\n        {\n            zmm0 = (zmm0 - 9.22337204e+18f);\n            arg2 = ((truncf(zmm0, 0x28)) ^ 0x8000000000000000);\n        }\n    }\n    size_t rax_1 = sub_40bd70(arg2);\n    uint64_t rax_2;\n    rax_2 = (rax_1 >> 0x3d) != 0;\n    uint64_t rax_3 = rax_2;\n    if ((rax_1 << 3) < 0)\n    {\n        rax_3 = 1;\n    }\n    if (rax_1 == 0)\n    {\n        goto label_40ca90;\n    }\n    if (rax_3 != 0)\n    {\n        goto label_40ca90;\n    }\n    if (arg1[2] == rax_1)\n    {\n        return 1;\n    }\n    int64_t rax_4 = calloc(rax_1, 0x10);\n    int64_t var_68 = rax_4;\n    if (rax_4 == 0)\n    {\n        goto label_40ca90;\n    }\n    int64_t rbx_3 = ((rax_1 << 4) + rax_4);\n    int64_t var_38_1 = arg1[6];\n    int64_t var_48_1 = 0;\n    int64_t var_30_1 = arg1[7];\n    void* var_40_1 = r12;\n    int64_t var_28_1 = arg1[8];\n    int64_t rax_8 = arg1[9];\n    int32_t rax_9 = sub_40c000(&var_68, arg1, 0);\n    rbx_4 = rax_9;\n    if (rax_9 == 0)\n    {\n        arg1[9] = rax_8;\n        if ((sub_40c000(arg1, &var_68, 1) != 0 && sub_40c000(arg1, &var_68, 0) != 0))\n        {\n            free(var_68);\n            return rbx_4;\n        }\n        abort();\n        /* no return */\n    }\n    free(*arg1);\n    *arg1 = var_68;\n    arg1[1] = rbx_3;\n    arg1[2] = rax_1;\n    arg1[3] = 0;\n    arg1[9] = rax_8;\n    goto label_40ca9c;\n}\n\n"
        },
        {
            "funcName": "sub_40cb20",
            "funcStartAddr": "0x402f0f",
            "funcEndAddr": "0x40cd94",
            "decompiledFuncCode": "int64_t sub_40cb20(int64_t* arg1, int64_t arg2, int64_t* arg3)\n{\n    if (arg2 != 0)\n    {\n        int64_t* var_20;\n        int64_t rax_1 = sub_40be60(arg1, arg2, &var_20, 0);\n        if (rax_1 != 0)\n        {\n            if (arg3 != 0)\n            {\n                *arg3 = rax_1;\n            }\n            return 0;\n        }\n        int64_t rax_3 = arg1[3];\n        int64_t rax_4;\n        void* rdx_2;\n        float zmm1;\n        if (rax_3 < 0)\n        {\n            rax_4 = arg1[2];\n            zmm1 = ((rax_3 >> 1) | (rax_3 & 1));\n            rdx_2 = arg1[5];\n            zmm1 = (zmm1 + zmm1);\n        }\n        else\n        {\n            rdx_2 = arg1[5];\n            zmm1 = rax_3;\n            rax_4 = arg1[2];\n        }\n        float zmm0_1;\n        if (((rax_3 < 0 && rax_4 >= 0) || (rax_3 >= 0 && rax_4 >= 0)))\n        {\n            zmm0_1 = (rax_4 * *(rdx_2 + 8));\n            if ((!((!(zmm1 == zmm0_1 | (FCMP_UO(zmm1, zmm0_1)))) && (!(zmm1 < zmm0_1 | (FCMP_UO(zmm1, zmm0_1)))))))\n            {\n            label_40cba2:\n                int64_t* r12_2 = var_20;\n                if (*r12_2 == 0)\n                {\n                    *r12_2 = arg2;\n                    arg1[4] = (arg1[4] + 1);\n                    arg1[3] = (arg1[3] + 1);\n                    return 1;\n                }\n                int64_t* rax_5 = arg1[9];\n                if (rax_5 == 0)\n                {\n                    rax_5 = malloc(0x10);\n                }\n                else\n                {\n                    arg1[9] = rax_5[1];\n                }\n                int64_t rdx_4 = r12_2[1];\n                *rax_5 = arg2;\n                rax_5[1] = rdx_4;\n                r12_2[1] = rax_5;\n                arg1[4] = (arg1[4] + 1);\n                return 1;\n                goto label_40ccb4;\n            }\n        label_40cc45:\n            sub_40bf80(&arg1[5]);\n            void* rdx_8 = arg1[5];\n            int64_t rax_9 = arg1[2];\n            float zmm2_1 = *(rdx_8 + 8);\n            float zmm0_2;\n            if (rax_9 < 0)\n            {\n                zmm0_2 = ((rax_9 >> 1) | (rax_9 & 1));\n                zmm0_2 = (zmm0_2 + zmm0_2);\n            }\n            else\n            {\n                zmm0_2 = rax_9;\n            }\n            int64_t rax_10 = arg1[3];\n            float zmm1_1;\n            if (rax_10 < 0)\n            {\n                zmm1_1 = ((rax_10 >> 1) | (rax_10 & 1));\n                zmm1_1 = (zmm1_1 + zmm1_1);\n            }\n            else\n            {\n                zmm1_1 = rax_10;\n            }\n            float zmm3_1 = (zmm2_1 * zmm0_2);\n            if (((zmm1_1 == zmm3_1 | (FCMP_UO(zmm1_1, zmm3_1))) || (zmm1_1 < zmm3_1 | (FCMP_UO(zmm1_1, zmm3_1)))))\n            {\n                goto label_40cba2;\n            }\n            zmm0_2 = (zmm0_2 * *(rdx_8 + 0xc));\n            if (*(rdx_8 + 0x10) == 0)\n            {\n                zmm0_2 = (zmm0_2 * zmm2_1);\n            }\n            if ((!(zmm0_2 < 1.84467441e+19f | (FCMP_UO(zmm0_2, 1.84467441e+19f)))))\n            {\n            label_40ccb4:\n                return 0xffffffff;\n            }\n            int64_t rsi;\n            if ((!(zmm0_2 < 9.22337204e+18f | (FCMP_UO(zmm0_2, 9.22337204e+18f)))))\n            {\n                zmm0_2 = (zmm0_2 - 9.22337204e+18f);\n                rsi = ((truncf(zmm0_2, arg1)) ^ 0x8000000000000000);\n            }\n            else\n            {\n                rsi = (truncf(zmm0_2, arg1));\n            }\n            if (sub_40c920(arg1, rsi) == 0)\n            {\n                goto label_40ccb4;\n            }\n            if (sub_40be60(arg1, arg2, &var_20, 0) == 0)\n            {\n                goto label_40cba2;\n            }\n        }\n        if (((rax_3 < 0 && rax_4 < 0) || (rax_3 >= 0 && rax_4 < 0)))\n        {\n            zmm0_1 = ((rax_4 >> 1) | (rax_4 & 1));\n            zmm0_1 = (zmm0_1 + zmm0_1);\n            zmm0_1 = (zmm0_1 * *(rdx_2 + 8));\n            if ((!((zmm1 == zmm0_1 | (FCMP_UO(zmm1, zmm0_1))) || (zmm1 < zmm0_1 | (FCMP_UO(zmm1, zmm0_1))))))\n            {\n                goto label_40cc45;\n            }\n            goto label_40cba2;\n        }\n    }\n    abort();\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_40cda0",
            "funcStartAddr": "0x40cda0",
            "funcEndAddr": "0x40cddb",
            "decompiledFuncCode": "int64_t sub_40cda0(int64_t* arg1, int64_t arg2)\n{\n    int64_t rbx = arg2;\n    int64_t var_10;\n    int32_t rax = sub_40cb20(arg1, arg2, &var_10);\n    if (rax == 0xffffffff)\n    {\n        return 0;\n    }\n    if (rax == 0)\n    {\n        rbx = var_10;\n    }\n    return rbx;\n}\n\n"
        },
        {
            "funcName": "sub_40cde0",
            "funcStartAddr": "0x40cde0",
            "funcEndAddr": "0x40cfb7",
            "decompiledFuncCode": "int64_t sub_40cde0(int64_t* arg1)\n{\n    int64_t* var_20;\n    int64_t rsi;\n    int64_t rax = sub_40be60(arg1, rsi, &var_20, 1);\n    if (rax != 0)\n    {\n        int64_t* rax_1 = var_20;\n        arg1[4] = (arg1[4] - 1);\n        if (*rax_1 == 0)\n        {\n            int64_t rax_3 = arg1[3];\n            int64_t rax_4 = (rax_3 - 1);\n            arg1[3] = rax_4;\n            int64_t rax_5;\n            float* rdx_1;\n            float zmm0_1;\n            if ((rax_3 - 1) < 0)\n            {\n                rax_5 = arg1[2];\n                zmm0_1 = ((rax_4 >> 1) | (rax_4 & 1));\n                rdx_1 = arg1[5];\n                zmm0_1 = (zmm0_1 + zmm0_1);\n            }\n            else\n            {\n                rdx_1 = arg1[5];\n                zmm0_1 = rax_4;\n                rax_5 = arg1[2];\n            }\n            float zmm1;\n            if ((((rax_3 - 1) < 0 && rax_5 >= 0) || ((rax_3 - 1) >= 0 && rax_5 >= 0)))\n            {\n                zmm1 = rax_5;\n            }\n            if ((((rax_3 - 1) < 0 && rax_5 < 0) || ((rax_3 - 1) >= 0 && rax_5 < 0)))\n            {\n                zmm1 = ((rax_5 >> 1) | (rax_5 & 1));\n                zmm1 = (zmm1 + zmm1);\n            }\n            zmm1 = (zmm1 * *rdx_1);\n            if ((!((zmm1 == zmm0_1 | (FCMP_UO(zmm1, zmm0_1))) || (zmm1 < zmm0_1 | (FCMP_UO(zmm1, zmm0_1))))))\n            {\n                sub_40bf80(&arg1[5]);\n                int64_t rax_6 = arg1[2];\n                int32_t* rdx_2 = arg1[5];\n                float zmm0_2;\n                if (rax_6 < 0)\n                {\n                    zmm0_2 = ((rax_6 >> 1) | (rax_6 & 1));\n                    zmm0_2 = (zmm0_2 + zmm0_2);\n                }\n                else\n                {\n                    zmm0_2 = rax_6;\n                }\n                int64_t rax_7 = arg1[3];\n                float zmm1_1;\n                if (rax_7 < 0)\n                {\n                    zmm1_1 = ((rax_7 >> 1) | (rax_7 & 1));\n                    zmm1_1 = (zmm1_1 + zmm1_1);\n                }\n                else\n                {\n                    zmm1_1 = rax_7;\n                }\n                float zmm2_1 = (*rdx_2 * zmm0_2);\n                if ((!((zmm2_1 == zmm1_1 | (FCMP_UO(zmm2_1, zmm1_1))) || (zmm2_1 < zmm1_1 | (FCMP_UO(zmm2_1, zmm1_1))))))\n                {\n                    zmm0_2 = (zmm0_2 * rdx_2[1]);\n                    if (rdx_2[4] == 0)\n                    {\n                        zmm0_2 = (zmm0_2 * rdx_2[2]);\n                    }\n                    int64_t rsi_1;\n                    if ((!(zmm0_2 < 9.22337204e+18f | (FCMP_UO(zmm0_2, 9.22337204e+18f)))))\n                    {\n                        zmm0_2 = (zmm0_2 - 9.22337204e+18f);\n                        rsi_1 = ((truncf(zmm0_2, arg1)) ^ 0x8000000000000000);\n                    }\n                    else\n                    {\n                        rsi_1 = (truncf(zmm0_2, arg1));\n                    }\n                    if (sub_40c920(arg1, rsi_1) == 0)\n                    {\n                        void* rdi_2 = arg1[9];\n                        if (rdi_2 != 0)\n                        {\n                            void* r12_1;\n                            do\n                            {\n                                r12_1 = *(rdi_2 + 8);\n                                free(rdi_2);\n                                rdi_2 = r12_1;\n                            } while (r12_1 != 0);\n                        }\n                        arg1[9] = 0;\n                    }\n                }\n            }\n        }\n    }\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_40cfc0",
            "funcStartAddr": "0x40cfc0",
            "funcEndAddr": "0x40cfc3",
            "decompiledFuncCode": "int64_t sub_40cfc0()\n{\n    return 0;\n}\n\n"
        },
        {
            "funcName": "sub_40cfd0",
            "funcStartAddr": "0x40cfd0",
            "funcEndAddr": "0x40d04d",
            "decompiledFuncCode": "int64_t** sub_40cfd0(int64_t arg1, int64_t arg2)\n{\n    int64_t r12 = arg1;\n    int64_t rbp = arg2;\n    int64_t** rax = sub_411210(0x20);\n    int64_t rdi_1;\n    if (rbp == 0)\n    {\n        rdi_1 = 8;\n        rbp = 1;\n    }\n    else\n    {\n        uint64_t rax_2;\n        rax_2 = (rbp >> 0x3d) != 0;\n        rdi_1 = (rbp << 3);\n        if ((rdi_1 < 0 || (rdi_1 >= 0 && rax_2 != 0)))\n        {\n            sub_411460();\n            /* no return */\n        }\n    }\n    int64_t* rax_4 = sub_411210(rdi_1);\n    rax[1] = rbp;\n    *rax_4 = 0;\n    *rax = rax_4;\n    if (r12 == 0)\n    {\n        r12 = 0x40cfc0;\n    }\n    rax[2] = 0;\n    rax[3] = r12;\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_40d050",
            "funcStartAddr": "0x40d050",
            "funcEndAddr": "0x40d065",
            "decompiledFuncCode": "int64_t sub_40d050(int64_t* arg1)\n{\n    free(*arg1);\n    /* tailcall */\n    return free(arg1);\n}\n\n"
        },
        {
            "funcName": "sub_40d070",
            "funcStartAddr": "0x40d070",
            "funcEndAddr": "0x40d184",
            "decompiledFuncCode": "int64_t sub_40d070(int64_t* arg1, int64_t arg2)\n{\n    int64_t rdx = arg1[1];\n    int64_t rbx = arg1[2];\n    int64_t rax = *arg1;\n    if ((rdx - 1) <= rbx)\n    {\n        int64_t rsi_1;\n        if (rax != 0)\n        {\n            if (rdx > 0xaaaaaaaaaaaaaa9)\n            {\n            label_40d16f:\n                sub_411460();\n                /* no return */\n            }\n            rdx = ((rdx + (rdx >> 1)) + 1);\n            rsi_1 = (rdx << 3);\n            goto label_40d137;\n        }\n        if (rdx != 0)\n        {\n            int64_t rcx_3;\n            rcx_3 = (rdx >> 0x3d) != 0;\n            rsi_1 = (rdx << 3);\n            if (rsi_1 < 0)\n            {\n                goto label_40d16f;\n            }\n            if (rcx_3 == 0)\n            {\n                goto label_40d137;\n            }\n            goto label_40d16f;\n        }\n        rsi_1 = 0x80;\n        rdx = 0x10;\n    label_40d137:\n        arg1[1] = rdx;\n        rax = sub_411270(rax, rsi_1);\n        rbx = arg1[2];\n        *arg1 = rax;\n    }\n    uint64_t rbx_1 = (rbx + 1);\n    arg1[2] = rbx_1;\n    *(rax + (rbx_1 << 3)) = arg2;\n    int64_t r13 = arg1[3];\n    void* rbp_1 = *arg1;\n    int64_t r15 = *(rbp_1 + (rbx_1 << 3));\n    int32_t rax_2;\n    int64_t* rdx_1;\n    if (rbx_1 != 1)\n    {\n        uint64_t r14_2;\n        do\n        {\n            r14_2 = (rbx_1 >> 1);\n            void* r12_1 = (rbp_1 + (r14_2 << 3));\n            rax_2 = r13(*r12_1, r15);\n            rdx_1 = (rbp_1 + (rbx_1 << 3));\n            if (rax_2 > 0)\n            {\n                break;\n            }\n            rbx_1 = r14_2;\n            *rdx_1 = *r12_1;\n        } while (r14_2 != 1);\n    }\n    if ((rbx_1 == 1 || (rbx_1 != 1 && rax_2 <= 0)))\n    {\n        rdx_1 = (rbp_1 + 8);\n    }\n    *rdx_1 = r15;\n    return 0;\n}\n\n"
        },
        {
            "funcName": "sub_40d190",
            "funcStartAddr": "0x40d190",
            "funcEndAddr": "0x40d2ad",
            "decompiledFuncCode": "int64_t sub_40d190(int64_t* arg1)\n{\n    int64_t rax = arg1[2];\n    int64_t var_60 = 0;\n    if (rax != 0)\n    {\n        int64_t* rdx_1 = *arg1;\n        int64_t rbp_1 = (rax - 1);\n        int64_t rax_1 = rdx_1[rax];\n        int64_t rcx_1 = rdx_1[1];\n        arg1[2] = rbp_1;\n        rdx_1[1] = rax_1;\n        void* r15_1 = *arg1;\n        var_60 = rcx_1;\n        int64_t r13_1 = arg1[3];\n        int64_t rax_2 = *(r15_1 + 8);\n        uint64_t rax_4 = (rbp_1 >> 1);\n        int32_t rax_5;\n        void* rbx_3;\n        if (rax_4 == 0)\n        {\n            rdx_1 = (r15_1 + 8);\n        }\n        else\n        {\n            int64_t r14_1 = 1;\n            int64_t r12_1;\n            do\n            {\n                r12_1 = (r14_1 + r14_1);\n                if (rbp_1 <= r12_1)\n                {\n                    rbx_3 = ((r14_1 << 4) + r15_1);\n                }\n                else\n                {\n                    int64_t r9_1 = (r12_1 + 1);\n                    void* r10_1 = (r15_1 + (r9_1 << 3));\n                    rbx_3 = ((r14_1 << 4) + r15_1);\n                    int32_t rax_7 = r13_1(*rbx_3, *r10_1, rdx_1);\n                    bool cond:1_1 = rax_7 < 0;\n                    if (rax_7 < 0)\n                    {\n                        rbx_3 = r10_1;\n                    }\n                    if (cond:1_1)\n                    {\n                        r12_1 = r9_1;\n                    }\n                }\n                rax_5 = r13_1(*rbx_3, rax_2);\n                rdx_1 = (r15_1 + (r14_1 << 3));\n                if (rax_5 <= 0)\n                {\n                    break;\n                }\n                r14_1 = r12_1;\n                *rdx_1 = *rbx_3;\n            } while (r12_1 <= rax_4);\n        }\n        if ((rax_4 == 0 || (rax_4 != 0 && rax_5 <= 0)))\n        {\n            *rdx_1 = rax_2;\n        }\n        if ((rax_4 != 0 && rax_5 > 0))\n        {\n            *rbx_3 = rax_2;\n        }\n    }\n    return var_60;\n}\n\n"
        },
        {
            "funcName": "sub_40d2b0",
            "funcStartAddr": "0x40d2b0",
            "funcEndAddr": "0x40d32c",
            "decompiledFuncCode": "void* sub_40d2b0(int32_t arg1, void* arg2)\n{\n    void* rcx = (arg2 + 0xb);\n    *(arg2 + 0xb) = 0;\n    if (arg1 < 0)\n    {\n        void* rsi;\n        while (true)\n        {\n            rsi = (rcx - 1);\n            int32_t temp0_1;\n            int32_t temp1_1;\n            temp0_1 = HIGHW((arg1 * 0x66666667));\n            temp1_1 = LOWW((arg1 * 0x66666667));\n            uint64_t rdx_5 = ((temp0_1 >> 2) - (arg1 >> 0x1f));\n            char rax_10 = ((0x30 + ((rdx_5 * 5) << 1)) - arg1);\n            arg1 = rdx_5;\n            *(rcx - 1) = rax_10;\n            if (rdx_5 == 0)\n            {\n                break;\n            }\n            rcx = rsi;\n        }\n        *(rsi - 1) = 0x2d;\n        return (rcx - 2);\n    }\n    uint64_t rdx_2;\n    do\n    {\n        rcx = (rcx - 1);\n        int32_t temp2_1;\n        int32_t temp3_1;\n        temp2_1 = HIGHW((arg1 * 0xcccccccd));\n        temp3_1 = LOWW((arg1 * 0xcccccccd));\n        rdx_2 = (temp2_1 >> 3);\n        uint8_t rax_2 = (rdx_2 * 5);\n        *rcx = ((arg1 - (rax_2 + rax_2)) + 0x30);\n        arg1 = rdx_2;\n    } while (rdx_2 != 0);\n    return rcx;\n}\n\n"
        },
        {
            "funcName": "sub_40d330",
            "funcStartAddr": "0x40d330",
            "funcEndAddr": "0x40d369",
            "decompiledFuncCode": "void* sub_40d330(int32_t arg1, void* arg2)\n{\n    void* rcx = (arg2 + 0xa);\n    *(arg2 + 0xa) = 0;\n    while (true)\n    {\n        rcx = (rcx - 1);\n        int32_t temp0_1;\n        int32_t temp1_1;\n        temp0_1 = HIGHW((arg1 * 0xcccccccd));\n        temp1_1 = LOWW((arg1 * 0xcccccccd));\n        uint64_t rdx_2 = (temp0_1 >> 3);\n        uint8_t rax_2 = (rdx_2 * 5);\n        *rcx = ((arg1 - (rax_2 + rax_2)) + 0x30);\n        if (arg1 <= 9)\n        {\n            break;\n        }\n        arg1 = rdx_2;\n    }\n    return rcx;\n}\n\n"
        },
        {
            "funcName": "sub_40d370",
            "funcStartAddr": "0x40d370",
            "funcEndAddr": "0x40d3b8",
            "decompiledFuncCode": "void* sub_40d370(uint64_t arg1, void* arg2)\n{\n    void* rcx = (arg2 + 0x14);\n    *(arg2 + 0x14) = 0;\n    while (true)\n    {\n        rcx = (rcx - 1);\n        int64_t rax_2;\n        int64_t rdx_1;\n        rdx_1 = HIGHD((arg1 * -0x3333333333333333));\n        rax_2 = LOWD((arg1 * -0x3333333333333333));\n        uint64_t rdx_2 = (rdx_1 >> 3);\n        char rax_3 = (rdx_2 + (rdx_2 << 2));\n        *rcx = ((arg1 - (rax_3 + rax_3)) + 0x30);\n        if (arg1 <= 9)\n        {\n            break;\n        }\n        arg1 = rdx_2;\n    }\n    return rcx;\n}\n\n"
        },
        {
            "funcName": "sub_40d3c0",
            "funcStartAddr": "0x40d3c0",
            "funcEndAddr": "0x40d573",
            "decompiledFuncCode": "uint64_t sub_40d3c0(char* arg1, int64_t arg2, int32_t arg3)\n{\n    char* r13 = &arg1[arg2];\n    char* rbx = arg1;\n    uint64_t rax = __ctype_get_mb_cur_max();\n    int32_t r12;\n    if (rax <= 1)\n    {\n        r12 = 0;\n        if (rbx < r13)\n        {\n            r12 = 0;\n            int32_t r15_1 = (arg3 & 2);\n            uint16_t* rdx_3 = *__ctype_b_loc();\n            while (true)\n            {\n                rbx = &rbx[1];\n                int16_t rax_11 = rdx_3[rbx[-1]];\n                if (((*rax_11[1] & 0x40) == 0 && r15_1 != 0))\n                {\n                    break;\n                }\n                if ((((*rax_11[1] & 0x40) != 0 || (((*rax_11[1] & 0x40) == 0 && r15_1 == 0) && (rax_11 & 2) == 0)) && r12 != 0x7fffffff))\n                {\n                    r12 = (r12 + 1);\n                }\n                if (((((*rax_11[1] & 0x40) != 0 || (((*rax_11[1] & 0x40) == 0 && r15_1 == 0) && (rax_11 & 2) == 0)) && r12 != 0x7fffffff) || (((*rax_11[1] & 0x40) == 0 && r15_1 == 0) && (rax_11 & 2) != 0)))\n                {\n                    if (r13 == rbx)\n                    {\n                        return r12;\n                    }\n                    continue;\n                }\n                if ((((*rax_11[1] & 0x40) != 0 || (((*rax_11[1] & 0x40) == 0 && r15_1 == 0) && (rax_11 & 2) == 0)) && r12 == 0x7fffffff))\n                {\n                    return r12;\n                }\n            }\n        }\n    }\n    else\n    {\n        r12 = 0;\n        if (rbx < r13)\n        {\n            while (true)\n            {\n                char rax_2 = *rbx;\n                if (rax_2 <= 0x3f)\n                {\n                    if (rax_2 < 0x25)\n                    {\n                        if ((rax_2 - 0x20) <= 3)\n                        {\n                            goto label_40d40b;\n                        }\n                        goto label_40d432;\n                    }\n                label_40d40b:\n                    rbx = &rbx[1];\n                    r12 = (r12 + 1);\n                }\n                else\n                {\n                    if (rax_2 >= 0x41)\n                    {\n                        if (rax_2 <= 0x5f)\n                        {\n                            goto label_40d40b;\n                        }\n                        if ((rax_2 - 0x61) <= 0x1d)\n                        {\n                            goto label_40d40b;\n                        }\n                        goto label_40d432;\n                    }\n                label_40d432:\n                    mbstate_t var_40;\n                    var_40.__count = 0;\n                    var_40.__value = 0;\n                    uint64_t rax_5;\n                    while (true)\n                    {\n                        uint32_t var_44;\n                        rax_5 = sub_412fb0(&var_44, rbx, (r13 - rbx), &var_40);\n                        uint64_t rbp_1 = rax_5;\n                        if ((rax_5 == -1 && (arg3 & 1) != 0))\n                        {\n                            break;\n                        }\n                        if (rax_5 != -1)\n                        {\n                            if (rax_5 != -2)\n                            {\n                                uint32_t rdi_2 = var_44;\n                                if (rax_5 == 0)\n                                {\n                                    rbp_1 = 1;\n                                }\n                                int32_t rax_6 = wcwidth(rdi_2);\n                                if (rax_6 < 0)\n                                {\n                                    if ((arg3 & 2) != 0)\n                                    {\n                                        break;\n                                    }\n                                    if (iswcntrl(var_44) != 0)\n                                    {\n                                        goto label_40d458;\n                                    }\n                                    if (r12 != 0x7fffffff)\n                                    {\n                                        r12 = (r12 + 1);\n                                        goto label_40d458;\n                                    }\n                                }\n                                else if ((0x7fffffff - r12) >= rax_6)\n                                {\n                                    r12 = (r12 + rax_6);\n                                label_40d458:\n                                    rbx = &rbx[rbp_1];\n                                    if (mbsinit(&var_40) != 0)\n                                    {\n                                        break;\n                                    }\n                                    continue;\n                                }\n                                return 0x7fffffff;\n                            }\n                            if ((arg3 & 1) != 0)\n                            {\n                                break;\n                            }\n                            r12 = (r12 + 1);\n                            rbx = r13;\n                            break;\n                        }\n                    }\n                    if (rax_5 == -1)\n                    {\n                        if (((!(rax_5 == -1 && (arg3 & 1) == 0)) && (arg3 & 1) != 0))\n                        {\n                            break;\n                        }\n                        if ((arg3 & 1) == 0)\n                        {\n                            goto label_40d40b;\n                        }\n                    }\n                }\n                if (rbx >= r13)\n                {\n                    return r12;\n                }\n            }\n        }\n    }\n    if (((rax <= 1 && rbx < r13) || (rax > 1 && rbx < r13)))\n    {\n        r12 = -1;\n    }\n    return r12;\n}\n\n"
        },
        {
            "funcName": "sub_40d580",
            "funcStartAddr": "0x40d580",
            "funcEndAddr": "0x40d5a3",
            "decompiledFuncCode": "int64_t sub_40d580(char* arg1, int32_t arg2)\n{\n    /* tailcall */\n    return sub_40d3c0(arg1, strlen(arg1), arg2);\n}\n\n"
        },
        {
            "funcName": "sub_40d5b0",
            "funcStartAddr": "0x40d5b0",
            "funcEndAddr": "0x40d5f4",
            "decompiledFuncCode": "int64_t sub_40d5b0()\n{\n    if (sched_getaffinity(0, 0x80) == 0)\n    {\n        void var_88;\n        int64_t rax_3 = __sched_cpucount(0x80, &var_88);\n        if (rax_3 != 0)\n        {\n            return rax_3;\n        }\n    }\n    return 0;\n}\n\n"
        },
        {
            "funcName": "sub_40d600",
            "funcStartAddr": "0x40d600",
            "funcEndAddr": "0x40d6eb",
            "decompiledFuncCode": "uint64_t sub_40d600(char* arg1)\n{\n    uint64_t rcx_2 = *arg1;\n    if (rcx_2 == 0)\n    {\n        return 0;\n    }\n    int32_t rax_1 = rcx_2;\n    if ((rax_1 <= 0x20 && (TEST_BITQ(0x100003e00, rcx_2))))\n    {\n        char rcx;\n        do\n        {\n            arg1 = &arg1[1];\n            rcx = *arg1;\n            if (rcx == 0)\n            {\n                return 0;\n            }\n            rax_1 = rcx;\n            if (rax_1 > 0x20)\n            {\n                break;\n            }\n        } while (((1 << rcx) & 0x100003e00) != 0);\n    }\n    if ((rax_1 - 0x30) > 9)\n    {\n        return 0;\n    }\n    char* var_10 = nullptr;\n    uint64_t rax_3 = strtoul(arg1, &var_10, 0xa);\n    char* rdx_1 = var_10;\n    uint64_t rcx_1;\n    if (rdx_1 != 0)\n    {\n        rcx_1 = *rdx_1;\n        if ((rcx_1 != 0 && (rcx_1 <= 0x20 && (TEST_BITQ(0x100003e00, rcx_1)))))\n        {\n            void* rdx_2 = &rdx_1[1];\n            do\n            {\n                var_10 = rdx_2;\n                rcx_1 = *rdx_2;\n                if (rcx_1 == 0)\n                {\n                    return rax_3;\n                }\n                if (rcx_1 > 0x20)\n                {\n                    break;\n                }\n                rdx_2 = (rdx_2 + 1);\n            } while (((1 << rcx_1) & 0x100003e00) != 0);\n        }\n    }\n    if ((rdx_1 == 0 || ((rdx_1 != 0 && rcx_1 != 0) && rcx_1 != 0x2c)))\n    {\n        rax_3 = 0;\n    }\n    return rax_3;\n}\n\n"
        },
        {
            "funcName": "sub_40d6f0",
            "funcStartAddr": "0x40d6f0",
            "funcEndAddr": "0x40d837",
            "decompiledFuncCode": "int64_t sub_40d6f0(int32_t arg1)\n{\n    int64_t rbp_1;\n    if (arg1 == 2)\n    {\n        char* rax_2 = getenv(\"OMP_NUM_THREADS\");\n        if (rax_2 == 0)\n        {\n            char* rax_10 = getenv(\"OMP_THREAD_LIMIT\");\n            if (rax_10 == 0)\n            {\n                goto label_40d82b;\n            }\n            int64_t rax_11 = sub_40d600(rax_10);\n            rbp_1 = rax_11;\n            if (rax_11 == 0)\n            {\n                goto label_40d82b;\n            }\n            goto label_40d782;\n        }\n        rbp_1 = -1;\n        int64_t rax_3 = sub_40d600(rax_2);\n        char* rax_4 = getenv(\"OMP_THREAD_LIMIT\");\n        if (rax_4 != 0)\n        {\n            int64_t rax_5 = sub_40d600(rax_4);\n            rbp_1 = rax_5;\n            if (rax_5 == 0)\n            {\n                rbp_1 = -1;\n            }\n        }\n        if (rax_3 != 0)\n        {\n            int64_t rax_9 = rax_3;\n            if (rbp_1 <= rax_3)\n            {\n                rax_9 = rbp_1;\n            }\n            return rax_9;\n        }\n        goto label_40d782;\n    }\n    int64_t rax_1;\n    if (arg1 != 1)\n    {\n        rax_1 = sysconf(0x53);\n        int64_t rax_8;\n        if (rax_1 == 1)\n        {\n            rax_8 = sub_40d5b0();\n            rax_1 = 1;\n            if (rax_8 != 0)\n            {\n                rax_1 = rax_8;\n            }\n        }\n        if ((((rax_1 == 1 && rax_8 != 0) || rax_1 != 1) && rax_1 <= 0))\n        {\n            rax_1 = 1;\n        }\n    }\n    else\n    {\n    label_40d82b:\n        rbp_1 = -1;\n    label_40d782:\n        int64_t rax_6 = sub_40d5b0();\n        if (rax_6 != 0)\n        {\n            if (rax_6 > rbp_1)\n            {\n                rax_6 = rbp_1;\n            }\n            return rax_6;\n        }\n        int64_t rax_7 = sysconf(0x54);\n        rax_1 = 1;\n        if (rax_7 > 0)\n        {\n            rax_1 = rbp_1;\n            if (rax_7 <= rbp_1)\n            {\n                rax_1 = rax_7;\n            }\n        }\n    }\n    return rax_1;\n}\n\n"
        },
        {
            "funcName": "sub_40d840",
            "funcStartAddr": "0x40d840",
            "funcEndAddr": "0x40d8fb",
            "decompiledFuncCode": "int64_t sub_40d840()\n{\n    double zmm0 = sysconf(0x55);\n    int64_t rax_1 = sysconf(0x1e);\n    int64_t zmm2 = 0;\n    double zmm1;\n    if ((!(zmm0 < zmm2 | (FCMP_UO(zmm0, zmm2)))))\n    {\n        zmm1 = rax_1;\n    }\n    if (((zmm0 < zmm2 | (FCMP_UO(zmm0, zmm2))) || ((!(zmm0 < zmm2 | (FCMP_UO(zmm0, zmm2)))) && (zmm1 < zmm2 | (FCMP_UO(zmm1, zmm2))))))\n    {\n        void var_78;\n        int64_t rax_2 = sysinfo(&var_78);\n        if (rax_2 != 0)\n        {\n            return rax_2;\n        }\n        int32_t var_10;\n        rax_1 = var_10;\n    }\n    return rax_1;\n}\n\n"
        },
        {
            "funcName": "sub_40d900",
            "funcStartAddr": "0x40d900",
            "funcEndAddr": "0x40d9f6",
            "decompiledFuncCode": "int64_t sub_40d900()\n{\n    double zmm0 = sysconf(0x56);\n    int64_t rax_1 = sysconf(0x1e);\n    int64_t zmm2 = 0;\n    double zmm1;\n    if ((!(zmm0 < zmm2 | (FCMP_UO(zmm0, zmm2)))))\n    {\n        zmm1 = rax_1;\n    }\n    if (((zmm0 < zmm2 | (FCMP_UO(zmm0, zmm2))) || ((!(zmm0 < zmm2 | (FCMP_UO(zmm0, zmm2)))) && (zmm1 < zmm2 | (FCMP_UO(zmm1, zmm2))))))\n    {\n        void var_78;\n        if (sysinfo(&var_78) != 0)\n        {\n            return sub_40d840();\n        }\n        int32_t var_10;\n        rax_1 = var_10;\n    }\n    return rax_1;\n}\n\n"
        },
        {
            "funcName": "sub_40da00",
            "funcStartAddr": "0x40da00",
            "funcEndAddr": "0x40dbd1",
            "decompiledFuncCode": "uint64_t sub_40da00(int64_t* arg1, int32_t arg2)\n{\n    int64_t r13 = *arg1;\n    if (data_61cbc0 >= 0)\n    {\n        int32_t rax_23 = pipe2();\n        int32_t* rax_24;\n        if (rax_23 < 0)\n        {\n            rax_24 = __errno_location();\n            if (*rax_24 == 0x26)\n            {\n                data_61cbc0 = 0xffffffff;\n            }\n        }\n        if ((rax_23 >= 0 || (rax_23 < 0 && *rax_24 != 0x26)))\n        {\n            data_61cbc0 = 1;\n            return rax_23;\n        }\n    }\n    int32_t r12_2 = (arg2 & 0xfff7f7ff);\n    if (r12_2 != 0)\n    {\n        r12_2 = -1;\n        *__errno_location() = 0x16;\n    }\n    else if (pipe(arg1) < 0)\n    {\n        r12_2 = -1;\n    }\n    else\n    {\n        int32_t rax_4;\n        if ((arg2 & 0x800) != 0)\n        {\n            rax_4 = sub_412000(*(arg1 + 4), 3, 0);\n            if (rax_4 < 0)\n            {\n            label_40dac8:\n                int32_t* rax_11 = __errno_location();\n                int32_t r12_3 = *rax_11;\n                close(*arg1);\n                close(*(arg1 + 4));\n                *arg1 = r13;\n                *rax_11 = r12_3;\n                r12_2 = -1;\n            }\n            else\n            {\n                *rax_4[1] = (*rax_4[1] | 8);\n                if (sub_412000(*(arg1 + 4), 4, rax_4) == 0xffffffff)\n                {\n                    goto label_40dac8;\n                }\n                int32_t rax_8 = sub_412000(*arg1, 3, 0);\n                if (rax_8 < 0)\n                {\n                    goto label_40dac8;\n                }\n                *rax_8[1] = (*rax_8[1] | 8);\n                if (sub_412000(*arg1, 4, rax_8) == 0xffffffff)\n                {\n                    goto label_40dac8;\n                }\n            }\n        }\n        if ((((arg2 & 0x800) == 0 || ((arg2 & 0x800) != 0 && rax_4 >= 0)) && (arg2 & 0x80000) != 0))\n        {\n            int32_t rax_13 = sub_412000(*(arg1 + 4), 1, 0);\n            if ((rax_13 >= 0 && sub_412000(*(arg1 + 4), 2, (rax_13 | 1)) != 0xffffffff))\n            {\n                int32_t rax_18 = sub_412000(*arg1, 1, 0);\n                if ((rax_18 >= 0 && sub_412000(*arg1, 2, (rax_18 | 1)) != 0xffffffff))\n                {\n                    return r12_2;\n                }\n            }\n            goto label_40dac8;\n        }\n    }\n    return r12_2;\n}\n\n"
        },
        {
            "funcName": "sub_40dbe0",
            "funcStartAddr": "0x40dbe0",
            "funcEndAddr": "0x40dc52",
            "decompiledFuncCode": "uint64_t sub_40dbe0()\n{\n    int32_t rbx = 0x31069;\n    char* rax = getenv(\"_POSIX2_VERSION\");\n    if ((rax != 0 && *rax != 0))\n    {\n        char* var_10;\n        int64_t rax_2 = strtol(rax, &var_10, 0xa);\n        if (*var_10 == 0)\n        {\n            if (rax_2 >= -0x80000000)\n            {\n                int32_t rbx_1 = 0x7fffffff;\n                if (rax_2 <= 0x7fffffff)\n                {\n                    rbx_1 = rax_2;\n                }\n                return rbx_1;\n            }\n            rbx = -0x80000000;\n        }\n    }\n    return rbx;\n}\n\n"
        },
        {
            "funcName": "sub_40dc60",
            "funcStartAddr": "0x40dc60",
            "funcEndAddr": "0x40dcf9",
            "decompiledFuncCode": "char* sub_40dc60(char* arg1)\n{\n    if (arg1 == 0)\n    {\n        fwrite(\"A NULL argv[0] was passed throug\u2026\", 1, 0x37, stderr);\n        abort();\n        /* no return */\n    }\n    void* rbx = arg1;\n    char* rax = strrchr(arg1, 0x2f);\n    if (rax != 0)\n    {\n        void* r8_1 = &rax[1];\n        int64_t rdx_2 = (r8_1 - rbx);\n        bool c_1 = rdx_2 < 6;\n        bool z_1 = rdx_2 == 6;\n        if ((!(z_1 || (rdx_2 - 6) < 0 != (rdx_2 - 6))))\n        {\n            void* rsi_1 = &rax[-6];\n            char const* const rdi = \"/.libs/\";\n            int64_t rcx_1 = 7;\n            while (rcx_1 != 0)\n            {\n                char temp0_1 = *rsi_1;\n                char const temp1_1 = *rdi;\n                c_1 = temp0_1 < temp1_1;\n                z_1 = temp0_1 == temp1_1;\n                rsi_1 = (rsi_1 + 1);\n                rdi = &rdi[1];\n                rcx_1 = (rcx_1 - 1);\n                if ((!z_1))\n                {\n                    break;\n                }\n            }\n            rdx_2 = ((!z_1) && (!c_1));\n            rdx_2 = (rdx_2 - 0);\n            bool c_2 = false;\n            bool z_2 = (rdx_2 & rdx_2) == 0;\n            if (z_2)\n            {\n                void* const rdi_1 = &data_416c50;\n                int64_t rcx_2 = 3;\n                void* rsi_2 = r8_1;\n                rbx = r8_1;\n                while (rcx_2 != 0)\n                {\n                    char temp2_1 = *rsi_2;\n                    char temp3_1 = *rdi_1;\n                    c_2 = temp2_1 < temp3_1;\n                    z_2 = temp2_1 == temp3_1;\n                    rsi_2 = (rsi_2 + 1);\n                    rdi_1 = (rdi_1 + 1);\n                    rcx_2 = (rcx_2 - 1);\n                    if ((!z_2))\n                    {\n                        break;\n                    }\n                }\n                rdx_2 = ((!z_2) && (!c_2));\n                rdx_2 = (rdx_2 - 0);\n                if (rdx_2 == 0)\n                {\n                    rbx = &rax[4];\n                    program_invocation_short_name = rbx;\n                }\n            }\n        }\n    }\n    data_61cbc8 = rbx;\n    __progname_full = rbx;\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_40dd00",
            "funcStartAddr": "0x40dd00",
            "funcEndAddr": "0x40ddf2",
            "decompiledFuncCode": "char* sub_40dd00(char* arg1, int32_t arg2)\n{\n    char* rax = dcgettext(nullptr, arg1, 5);\n    char* rbx = rax;\n    if (arg1 == rax)\n    {\n        char* rax_2 = sub_413750();\n        char rdx_2 = (*rax_2 & 0xdf);\n        if (rdx_2 != 0x55)\n        {\n            if (rdx_2 != 0x47)\n            {\n            label_40dde1:\n                void* const rbx_1 = &data_416c54;\n                if (arg2 != 9)\n                {\n                    rbx_1 = \"'\";\n                }\n                return rbx_1;\n            }\n            if ((rax_2[1] & 0xdf) != 0x42)\n            {\n                goto label_40dde1;\n            }\n            if (rax_2[2] != 0x31)\n            {\n                goto label_40dde1;\n            }\n            if (rax_2[3] != 0x38)\n            {\n                goto label_40dde1;\n            }\n            if (rax_2[4] != 0x30)\n            {\n                goto label_40dde1;\n            }\n            if (rax_2[5] != 0x33)\n            {\n                goto label_40dde1;\n            }\n            if (rax_2[6] != 0x30)\n            {\n                goto label_40dde1;\n            }\n            if (rax_2[7] != 0)\n            {\n                goto label_40dde1;\n            }\n            bool cond:2_1 = *rbx != 0x60;\n            rbx = &data_416c5d;\n            if (cond:2_1)\n            {\n                rbx = &data_416c5a;\n            }\n        }\n        else\n        {\n            if ((rax_2[1] & 0xdf) != 0x54)\n            {\n                goto label_40dde1;\n            }\n            if ((rax_2[2] & 0xdf) != 0x46)\n            {\n                goto label_40dde1;\n            }\n            if (rax_2[3] != 0x2d)\n            {\n                goto label_40dde1;\n            }\n            if (rax_2[4] != 0x38)\n            {\n                goto label_40dde1;\n            }\n            if (rax_2[5] != 0)\n            {\n                goto label_40dde1;\n            }\n            bool cond:1_1 = *rbx != 0x60;\n            rbx = &data_416c61;\n            if (cond:1_1)\n            {\n                rbx = &data_416c56;\n            }\n        }\n    }\n    return rbx;\n}\n\n"
        },
        {
            "funcName": "sub_40de00",
            "funcStartAddr": "0x402f14",
            "funcEndAddr": "0x40f021",
            "decompiledFuncCode": "int64_t sub_40de00(char* arg1, uint64_t arg2, uint64_t arg3, uint64_t arg4, \n    uint32_t arg5, int32_t arg6, int64_t arg7, char* arg8, char* arg9)\n{\n    char* r15 = arg1;\n    uint64_t r14 = arg2;\n    uint32_t r13 = arg5;\n    uint64_t rax;\n    uint64_t rdx;\n    rax = __ctype_get_mb_cur_max();\n    int32_t rbp_1 = (arg6 & 2);\n    bool var_5c = rbp_1 != 0;\n    bool cond:1 = r13 == 0xa;\n    if (r13 > 0xa)\n    {\n        abort();\n        /* no return */\n    }\n    uint64_t r11 = arg4;\n    uint64_t var_c0;\n    char var_a9;\n    uint64_t var_a0_1;\n    char const* const var_78_1;\n    uint64_t var_70;\n    char var_5b_1;\n    uint64_t rax_1;\n    int64_t rbx_1;\n    uint32_t r10;\n    if ((r13 == 1 || (r13 == 4 && rbp_1 != 0)))\n    {\n        var_a9 = 1;\n        r10 = 0;\n        rbx_1 = 0;\n        r13 = 2;\n        var_5b_1 = 0;\n        var_70 = 0;\n        var_5c = true;\n        var_c0 = 0;\n        var_a0_1 = 1;\n        var_78_1 = \"'\";\n    label_40de98:\n        while (true)\n        {\n            uint64_t r9 = r11;\n            int64_t r12_1 = 0;\n            uint32_t r11_1 = r13;\n            while (true)\n            {\n                r13 = r9 != r12_1;\n                if (r9 == -1)\n                {\n                    r13 = *(arg3 + r12_1) != 0;\n                }\n                uint32_t r13_1;\n                if (r13 == 0)\n                {\n                    r11 = r9;\n                    rdx = r11_1 == 2;\n                    if ((rbx_1 == 0 && (var_5c & rdx) != 0))\n                    {\n                        r13_1 = 2;\n                    label_40e20c:\n                        if (var_c0 != 0)\n                        {\n                            r13_1 = 4;\n                        }\n                        goto label_40e254;\n                    }\n                    rax_1 = (var_5c ^ 1);\n                    rdx = (rdx & rax_1);\n                    if (rdx == 0)\n                    {\n                        rdx = rax_1;\n                    }\n                    else if (var_5b_1 != 0)\n                    {\n                        if (var_a9 != 0)\n                        {\n                            rbx_1 = sub_40de00(r15, var_70, arg3, r11, 5, arg6, arg7, arg8, arg9);\n                        }\n                        else\n                        {\n                            rax_1 = r14 == 0;\n                            rdx = var_70 != 0;\n                            rax_1 = (rax_1 & rdx);\n                            if (rax_1 != 0)\n                            {\n                                r14 = var_70;\n                                break;\n                            }\n                            rdx = var_5b_1;\n                        }\n                    }\n                    if (((rdx == 0 || (rdx != 0 && var_5b_1 == 0)) || ((rdx != 0 && var_5b_1 != 0) && var_a9 == 0)))\n                    {\n                        if ((var_78_1 != 0 && rdx != 0))\n                        {\n                            char const rdx_17 = *var_78_1;\n                            if (rdx_17 != 0)\n                            {\n                                void* rax_51 = (var_78_1 - rbx_1);\n                                do\n                                {\n                                    if (r14 > rbx_1)\n                                    {\n                                        r15[rbx_1] = rdx_17;\n                                    }\n                                    rbx_1 = (rbx_1 + 1);\n                                    rdx_17 = *(rax_51 + rbx_1);\n                                } while (rdx_17 != 0);\n                            }\n                        }\n                        if (r14 > rbx_1)\n                        {\n                            r15[rbx_1] = 0;\n                        }\n                    }\n                    goto label_40e26b;\n                }\n                rax_1 = r11_1 != 2;\n                rax_1 = (rax_1 & var_c0);\n                char* r8 = (arg3 + r12_1);\n                uint64_t var_b8;\n                var_b8 = rax_1;\n                uint32_t rax_8;\n                uint64_t rax_12;\n                char rax_14;\n                int32_t rcx_2;\n                uint64_t rbp_3;\n                if (rax_1 == 0)\n                {\n                    rbp_3 = *r8;\n                    if (rbp_3 > 0x7e)\n                    {\n                        goto label_40e3a5;\n                    }\n                    switch (rbp_3)\n                    {\n                        case 0:\n                        {\n                            if (var_c0 == 0)\n                            {\n                                if ((arg6 & 1) != 0)\n                                {\n                                    r12_1 = (r12_1 + 1);\n                                    continue;\n                                }\n                                else\n                                {\n                                    var_b8 = 0;\n                                    rdx = r11_1 == 2;\n                                    r13 = 0;\n                                    rbp_3 = 0;\n                                }\n                                goto label_40dff5;\n                            }\n                            goto label_40e2e0;\n                        }\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 0xe:\n                        case 0xf:\n                        case 0x10:\n                        case 0x11:\n                        case 0x12:\n                        case 0x13:\n                        case 0x14:\n                        case 0x15:\n                        case 0x16:\n                        case 0x17:\n                        case 0x18:\n                        case 0x19:\n                        case 0x1a:\n                        case 0x1b:\n                        case 0x1c:\n                        case 0x1d:\n                        case 0x1e:\n                        case 0x1f:\n                        case 0x40:\n                        {\n                            goto label_40e3a5;\n                        }\n                        case 7:\n                        {\n                            rbp_3 = 7;\n                            rcx_2 = 0x61;\n                            rdx = r11_1 == 2;\n                            goto label_40e1d0;\n                        }\n                        case 8:\n                        {\n                            rbp_3 = 8;\n                            rcx_2 = 0x62;\n                            rdx = r11_1 == 2;\n                        label_40e1d0:\n                            if (var_c0 == 0)\n                            {\n                                goto label_40e1db;\n                            }\n                            rbp_3 = rcx_2;\n                            r13 = 0;\n                        label_40e037:\n                            if (var_5c == 0)\n                            {\n                                goto label_40e048;\n                            }\n                        label_40e200:\n                            r13_1 = r11_1;\n                            rax_14 = rdx;\n                            r11 = r9;\n                            goto label_40e208;\n                        }\n                        case 9:\n                        {\n                            rbp_3 = 9;\n                            rcx_2 = 0x74;\n                            goto label_40e43b;\n                        }\n                        case 0xa:\n                        {\n                            rbp_3 = 0xa;\n                            rcx_2 = 0x6e;\n                        label_40e43b:\n                            rdx = r11_1 == 2;\n                            bool rax_26 = (var_5c & rdx);\n                            var_b8 = rax_26;\n                            if (rax_26 != 0)\n                            {\n                            label_40e44a:\n                                r11 = r9;\n                                r13_1 = 2;\n                                goto label_40e20c;\n                            }\n                            goto label_40e1d0;\n                        }\n                        case 0xb:\n                        {\n                            rbp_3 = 0xb;\n                            rcx_2 = 0x76;\n                            rdx = r11_1 == 2;\n                            goto label_40e1d0;\n                        }\n                        case 0xc:\n                        {\n                            rbp_3 = 0xc;\n                            rcx_2 = 0x66;\n                            rdx = r11_1 == 2;\n                            goto label_40e1d0;\n                        }\n                        case 0xd:\n                        {\n                            rbp_3 = 0xd;\n                            rcx_2 = 0x72;\n                            goto label_40e43b;\n                        }\n                        case 0x20:\n                        {\n                            rbp_3 = 0x20;\n                            rdx = r11_1 == 2;\n                            goto label_40dfd6;\n                        }\n                        case 0x21:\n                        case 0x22:\n                        case 0x24:\n                        case 0x26:\n                        case 0x28:\n                        case 0x29:\n                        case 0x2a:\n                        case 0x3b:\n                        case 0x3c:\n                        case 0x3d:\n                        case 0x3e:\n                        case 0x5b:\n                        case 0x5e:\n                        case 0x60:\n                        case 0x7c:\n                        {\n                            rdx = r11_1 == 2;\n                            r13 = 0;\n                        label_40dfd6:\n                            if (var_5c == 0)\n                            {\n                                goto label_40dff5;\n                            }\n                            if (rdx == 0)\n                            {\n                                goto label_40dff5;\n                            }\n                            goto label_40e44a;\n                        }\n                        case 0x23:\n                        case 0x7e:\n                        {\n                            rdx = r11_1 == 2;\n                        label_40dfcd:\n                            if (r12_1 != 0)\n                            {\n                                goto label_40e1db;\n                            }\n                            goto label_40dfd6;\n                        }\n                        case 0x25:\n                        case 0x2b:\n                        case 0x2c:\n                        case 0x2d:\n                        case 0x2e:\n                        case 0x2f:\n                        case 0x30:\n                        case 0x31:\n                        case 0x32:\n                        case 0x33:\n                        case 0x34:\n                        case 0x35:\n                        case 0x36:\n                        case 0x37:\n                        case 0x38:\n                        case 0x39:\n                        case 0x3a:\n                        case 0x41:\n                        case 0x42:\n                        case 0x43:\n                        case 0x44:\n                        case 0x45:\n                        case 0x46:\n                        case 0x47:\n                        case 0x48:\n                        case 0x49:\n                        case 0x4a:\n                        case 0x4b:\n                        case 0x4c:\n                        case 0x4d:\n                        case 0x4e:\n                        case 0x4f:\n                        case 0x50:\n                        case 0x51:\n                        case 0x52:\n                        case 0x53:\n                        case 0x54:\n                        case 0x55:\n                        case 0x56:\n                        case 0x57:\n                        case 0x58:\n                        case 0x59:\n                        case 0x5a:\n                        case 0x5d:\n                        case 0x5f:\n                        case 0x61:\n                        case 0x62:\n                        case 0x63:\n                        case 0x64:\n                        case 0x65:\n                        case 0x66:\n                        case 0x67:\n                        case 0x68:\n                        case 0x69:\n                        case 0x6a:\n                        case 0x6b:\n                        case 0x6c:\n                        case 0x6d:\n                        case 0x6e:\n                        case 0x6f:\n                        case 0x70:\n                        case 0x71:\n                        case 0x72:\n                        case 0x73:\n                        case 0x74:\n                        case 0x75:\n                        case 0x76:\n                        case 0x77:\n                        case 0x78:\n                        case 0x79:\n                        case 0x7a:\n                        {\n                        label_40e400:\n                            rdx = r11_1 == 2;\n                        label_40dff5:\n                            rax_8 = ((((var_c0 ^ 1) | rdx) ^ 1) | var_5c);\n                            if (rax_8 == 0)\n                            {\n                                goto label_40e0fc;\n                            }\n                            goto label_40dfff;\n                        }\n                        case 0x27:\n                        {\n                            goto label_40e17d;\n                        }\n                        case 0x3f:\n                        {\n                            goto label_40e14d;\n                        }\n                        case 0x5c:\n                        {\n                            if (r11_1 != 2)\n                            {\n                                goto label_40e1aa;\n                            }\n                            if (var_5c != 0)\n                            {\n                                goto label_40ef3d;\n                            }\n                            r12_1 = (r12_1 + 1);\n                            rax_12 = r10;\n                            r13 = 0;\n                            rbp_3 = 0x5c;\n                            goto label_40e114;\n                        }\n                        case 0x7b:\n                        case 0x7d:\n                        {\n                            goto label_40dfa9;\n                        }\n                    }\n                }\n                else\n                {\n                    char var_98;\n                    uint64_t var_90;\n                    uint32_t var_88;\n                    char rax_27;\n                    char rax_28;\n                    if (var_a0_1 != 0)\n                    {\n                        int64_t rbp_2 = (r12_1 + var_a0_1);\n                        if ((r9 == -1 && var_a0_1 > 1))\n                        {\n                            var_90 = r10;\n                            var_98 = r8;\n                            uint64_t rax_3;\n                            rax_3 = strlen(arg3);\n                            r10 = var_90;\n                            r8 = var_98;\n                            r9 = rax_3;\n                        }\n                        if (rbp_2 > r9)\n                        {\n                            goto label_40e5a0;\n                        }\n                        uint64_t var_80;\n                        var_80 = r11_1;\n                        var_88 = r9;\n                        var_90 = r10;\n                        var_98 = r8;\n                        int32_t rax_4;\n                        rax_4 = memcmp(r8, var_78_1, var_a0_1);\n                        r8 = var_98;\n                        r10 = var_90;\n                        r9 = var_88;\n                        r11_1 = var_80;\n                        if (rax_4 != 0)\n                        {\n                            goto label_40e5a0;\n                        }\n                        if (var_5c != 0)\n                        {\n                        label_40eef0:\n                            r13_1 = r11_1;\n                            r11 = r9;\n                        label_40e254:\n                            rbx_1 = sub_40de00(r15, r14, arg3, r11, r13_1, (arg6 & 0xfffffffd), 0, arg8, arg9);\n                        label_40e26b:\n                            return rbx_1;\n                        }\n                        rbp_3 = *r8;\n                        if (rbp_3 > 0x7e)\n                        {\n                            goto label_40e3a5;\n                        }\n                        switch (rbp_3)\n                        {\n                            case 0:\n                            {\n                                goto label_40e2f7;\n                            }\n                            case 1:\n                            case 2:\n                            case 3:\n                            case 4:\n                            case 5:\n                            case 6:\n                            case 0xe:\n                            case 0xf:\n                            case 0x10:\n                            case 0x11:\n                            case 0x12:\n                            case 0x13:\n                            case 0x14:\n                            case 0x15:\n                            case 0x16:\n                            case 0x17:\n                            case 0x18:\n                            case 0x19:\n                            case 0x1a:\n                            case 0x1b:\n                            case 0x1c:\n                            case 0x1d:\n                            case 0x1e:\n                            case 0x1f:\n                            case 0x40:\n                            {\n                                goto label_40e3a5;\n                            }\n                            case 7:\n                            {\n                                rbp_3 = 0x61;\n                            label_40e2c0:\n                                r13 = 0;\n                                goto label_40e07b;\n                            }\n                            case 8:\n                            {\n                                rdx = 0;\n                                r13 = 0;\n                                rbp_3 = 0x62;\n                            label_40e048:\n                                uint32_t rax_10;\n                                rax_10 = ((r10 ^ 1) & rdx);\n                                if (rax_10 != 0)\n                                {\n                                    if (r14 > rbx_1)\n                                    {\n                                        r15[rbx_1] = 0x27;\n                                    }\n                                    if ((rbx_1 + 1) < r14)\n                                    {\n                                        r15[(rbx_1 + 1)] = 0x24;\n                                    }\n                                    if ((rbx_1 + 2) < r14)\n                                    {\n                                        r15[(rbx_1 + 2)] = 0x27;\n                                    }\n                                    rbx_1 = (rbx_1 + 3);\n                                    r10 = rax_10;\n                                }\n                            label_40e07b:\n                                if (r14 <= rbx_1)\n                                {\n                                    goto label_40e085;\n                                }\n                                r15[rbx_1] = 0x5c;\n                            label_40e085:\n                                rbx_1 = (rbx_1 + 1);\n                                r12_1 = (r12_1 + 1);\n                                goto label_40e08d;\n                            }\n                            case 9:\n                            {\n                                goto label_40e270;\n                            }\n                            case 0xa:\n                            {\n                                goto label_40e1e8;\n                            }\n                            case 0xb:\n                            {\n                                goto label_40e2d0;\n                            }\n                            case 0xc:\n                            {\n                                goto label_40e2b0;\n                            }\n                            case 0xd:\n                            {\n                                goto label_40e299;\n                            }\n                            case 0x20:\n                            {\n                                rax_27 = var_b8;\n                                goto label_40e5fa;\n                            }\n                            case 0x21:\n                            case 0x22:\n                            case 0x24:\n                            case 0x26:\n                            case 0x28:\n                            case 0x29:\n                            case 0x2a:\n                            case 0x3b:\n                            case 0x3c:\n                            case 0x3d:\n                            case 0x3e:\n                            case 0x5b:\n                            case 0x5e:\n                            case 0x60:\n                            case 0x7c:\n                            {\n                                goto label_40e285;\n                            }\n                            case 0x23:\n                            case 0x7e:\n                            {\n                                rax_28 = var_b8;\n                                goto label_40e5da;\n                            }\n                            case 0x25:\n                            case 0x2b:\n                            case 0x2c:\n                            case 0x2d:\n                            case 0x2e:\n                            case 0x2f:\n                            case 0x30:\n                            case 0x31:\n                            case 0x32:\n                            case 0x33:\n                            case 0x34:\n                            case 0x35:\n                            case 0x36:\n                            case 0x37:\n                            case 0x38:\n                            case 0x39:\n                            case 0x3a:\n                            case 0x41:\n                            case 0x42:\n                            case 0x43:\n                            case 0x44:\n                            case 0x45:\n                            case 0x46:\n                            case 0x47:\n                            case 0x48:\n                            case 0x49:\n                            case 0x4a:\n                            case 0x4b:\n                            case 0x4c:\n                            case 0x4d:\n                            case 0x4e:\n                            case 0x4f:\n                            case 0x50:\n                            case 0x51:\n                            case 0x52:\n                            case 0x53:\n                            case 0x54:\n                            case 0x55:\n                            case 0x56:\n                            case 0x57:\n                            case 0x58:\n                            case 0x59:\n                            case 0x5a:\n                            case 0x5d:\n                            case 0x5f:\n                            case 0x61:\n                            case 0x62:\n                            case 0x63:\n                            case 0x64:\n                            case 0x65:\n                            case 0x66:\n                            case 0x67:\n                            case 0x68:\n                            case 0x69:\n                            case 0x6a:\n                            case 0x6b:\n                            case 0x6c:\n                            case 0x6d:\n                            case 0x6e:\n                            case 0x6f:\n                            case 0x70:\n                            case 0x71:\n                            case 0x72:\n                            case 0x73:\n                            case 0x74:\n                            case 0x75:\n                            case 0x76:\n                            case 0x77:\n                            case 0x78:\n                            case 0x79:\n                            case 0x7a:\n                            {\n                                rax_27 = var_b8;\n                                goto label_40e5c2;\n                            }\n                            case 0x27:\n                            {\n                                goto label_40e17d;\n                            }\n                            case 0x3f:\n                            {\n                                goto label_40e14d;\n                            }\n                            case 0x5c:\n                            {\n                                goto label_40e1aa;\n                            }\n                            case 0x7b:\n                            case 0x7d:\n                            {\n                                goto label_40dfa9;\n                            }\n                        }\n                    }\n                    else\n                    {\n                    label_40e5a0:\n                        rbp_3 = *r8;\n                        if (rbp_3 > 0x7e)\n                        {\n                        label_40e3a0:\n                            var_b8 = 0;\n                        label_40e3a5:\n                            uint64_t rdi_4;\n                            if (rax == 1)\n                            {\n                                r10 = r10;\n                                rdi_4 = 1;\n                                rax_12 = (*__ctype_b_loc()[rbp_3] & 0x4000);\n                                r13 = rax_12 != 0;\n                                rdx = rax_12 == 0;\n                                rdx = (rdx & var_c0);\n                            label_40e3f4:\n                                if (rdx == 0)\n                                {\n                                    goto label_40e400;\n                                }\n                                rdx = var_c0;\n                                r13 = 0;\n                            label_40e8f1:\n                                var_98 = r13;\n                                int32_t rsi_7 = 0;\n                                int64_t rcx_11 = (rdi_4 + r12_1);\n                                char rdi_9 = var_b8;\n                                while (true)\n                                {\n                                    if (rdx != 0)\n                                    {\n                                        rax_12 = r11_1 == 2;\n                                        if (var_5c != 0)\n                                        {\n                                            break;\n                                        }\n                                        rax_12 = (rax_12 & (r10 ^ 1));\n                                        if (rax_12 != 0)\n                                        {\n                                            if (r14 > rbx_1)\n                                            {\n                                                r15[rbx_1] = 0x27;\n                                            }\n                                            if (r14 > (rbx_1 + 1))\n                                            {\n                                                r15[(rbx_1 + 1)] = 0x24;\n                                            }\n                                            if (r14 > (rbx_1 + 2))\n                                            {\n                                                r15[(rbx_1 + 2)] = 0x27;\n                                            }\n                                            rbx_1 = (rbx_1 + 3);\n                                            r10 = rax_12;\n                                        }\n                                        if (r14 > rbx_1)\n                                        {\n                                            r15[rbx_1] = 0x5c;\n                                        }\n                                        if (r14 > (rbx_1 + 1))\n                                        {\n                                            r15[(rbx_1 + 1)] = ((rbp_3 >> 6) + 0x30);\n                                        }\n                                        if (r14 > (rbx_1 + 2))\n                                        {\n                                            int32_t rax_40;\n                                            rax_40 = (rbp_3 >> 3);\n                                            r15[(rbx_1 + 2)] = ((rax_40 & 7) + 0x30);\n                                        }\n                                        r12_1 = (r12_1 + 1);\n                                        rbx_1 = (rbx_1 + 3);\n                                        rbp_3 = ((rbp_3 & 7) + 0x30);\n                                        if (r12_1 >= rcx_11)\n                                        {\n                                            break;\n                                        }\n                                        rsi_7 = rdx;\n                                    }\n                                    else\n                                    {\n                                        rax_12 = ((rsi_7 ^ 1) & r10);\n                                        if (rdi_9 != 0)\n                                        {\n                                            if (r14 > rbx_1)\n                                            {\n                                                r15[rbx_1] = 0x5c;\n                                            }\n                                            rbx_1 = (rbx_1 + 1);\n                                        }\n                                        r12_1 = (r12_1 + 1);\n                                        if (r12_1 >= rcx_11)\n                                        {\n                                            break;\n                                        }\n                                        if (rax_12 == 0)\n                                        {\n                                            rdi_9 = 0;\n                                        }\n                                        else\n                                        {\n                                            if (r14 > rbx_1)\n                                            {\n                                                r15[rbx_1] = 0x27;\n                                            }\n                                            if (r14 > (rbx_1 + 1))\n                                            {\n                                                r15[(rbx_1 + 1)] = 0x27;\n                                            }\n                                            rbx_1 = (rbx_1 + 2);\n                                            rdi_9 = 0;\n                                            r10 = 0;\n                                        }\n                                    }\n                                    if (r14 > rbx_1)\n                                    {\n                                        r15[rbx_1] = rbp_3;\n                                    }\n                                    rbp_3 = *(arg3 + r12_1);\n                                    rbx_1 = (rbx_1 + 1);\n                                }\n                                if ((rdx == 0 && r12_1 >= rcx_11))\n                                {\n                                    r13 = var_98;\n                                    goto label_40e114;\n                                }\n                                if ((rdx != 0 && var_5c != 0))\n                                {\n                                    r13_1 = r11_1;\n                                    var_c0 = rax_12;\n                                    r11 = r9;\n                                    goto label_40e20c;\n                                }\n                                r13 = var_98;\n                                goto label_40e08d;\n                            }\n                            mbstate_t var_40;\n                            var_40.__count = 0;\n                            var_40.__value = 0;\n                            if (r9 == -1)\n                            {\n                                var_90 = r10;\n                                var_98 = r8;\n                                r10 = var_90;\n                                r8 = var_98;\n                                r9 = strlen(arg3);\n                            }\n                            uint64_t rbx_2 = 0;\n                            char var_5a_1 = r10;\n                            char var_59_1 = rbp_3;\n                            var_88 = r15;\n                            var_98 = r9;\n                            var_90 = r11_1;\n                            while (true)\n                            {\n                                int64_t r15_1 = (r12_1 + rbx_2);\n                                char* rbp_4 = (arg3 + r15_1);\n                                uint32_t var_44;\n                                rax_12 = sub_412fb0(&var_44, rbp_4, (var_98 - r15_1), &var_40);\n                                if (rax_12 != 0)\n                                {\n                                    if (rax_12 == -1)\n                                    {\n                                        rdi_4 = rbx_2;\n                                        rbp_3 = var_59_1;\n                                        r13 = 0;\n                                        r10 = var_5a_1;\n                                        r15 = var_88;\n                                        r9 = var_98;\n                                        r11_1 = var_90;\n                                        rdx = var_c0;\n                                        break;\n                                    }\n                                    if (rax_12 == -2)\n                                    {\n                                        r9 = var_98;\n                                        rax_12 = rbx_2;\n                                        rdi_4 = rbx_2;\n                                        r10 = var_5a_1;\n                                        rbp_3 = var_59_1;\n                                        r15 = var_88;\n                                        r11_1 = var_90;\n                                        if ((r15_1 < r9 && *rbp_4 != 0))\n                                        {\n                                            do\n                                            {\n                                                rax_12 = (rax_12 + 1);\n                                                if ((r12_1 + rax_12) >= r9)\n                                                {\n                                                    break;\n                                                }\n                                            } while (r8[rax_12] != 0);\n                                            rdi_4 = rax_12;\n                                        }\n                                        rdx = var_c0;\n                                        r13 = 0;\n                                        break;\n                                    }\n                                    if ((var_90 == 2 && (var_5c != 0 && rax_12 != 1)))\n                                    {\n                                        char* rax_34 = ((arg3 + r15_1) + 1);\n                                        int64_t rsi_6 = ((arg3 + rax_12) + r15_1);\n                                        char rcx_9;\n                                        do\n                                        {\n                                            rcx_9 = (*rax_34 - 0x5b);\n                                            if ((rcx_9 <= 0x21 && ((1 << rcx_9) & 0x20000002b) != 0))\n                                            {\n                                                break;\n                                            }\n                                            rax_34 = &rax_34[1];\n                                        } while (rsi_6 != rax_34);\n                                        if ((rcx_9 <= 0x21 && ((1 << rcx_9) & 0x20000002b) != 0))\n                                        {\n                                            r15 = var_88;\n                                            r13_1 = 2;\n                                            r11 = var_98;\n                                            goto label_40e20c;\n                                        }\n                                    }\n                                    mbstate_t* rdi_7 = &var_40;\n                                    if (iswprint(var_44) == 0)\n                                    {\n                                        r13 = 0;\n                                    }\n                                    rbx_2 = (rbx_2 + rax_12);\n                                    if (mbsinit(rdi_7) == 0)\n                                    {\n                                        continue;\n                                    }\n                                }\n                                rdi_4 = rbx_2;\n                                rbp_3 = var_59_1;\n                                r10 = var_5a_1;\n                                r15 = var_88;\n                                r9 = var_98;\n                                r11_1 = var_90;\n                                rdx = ((r13 ^ 1) & var_c0);\n                                break;\n                            }\n                            if (rdi_4 > 1)\n                            {\n                                goto label_40e8f1;\n                            }\n                            goto label_40e3f4;\n                        }\n                        switch (rbp_3)\n                        {\n                            case 0:\n                            {\n                            label_40e2e0:\n                                if (var_5c != 0)\n                                {\n                                    r13_1 = r11_1;\n                                    r11 = r9;\n                                    var_c0 = r13_1 == 2;\n                                    goto label_40e20c;\n                                }\n                                var_b8 = 0;\n                            label_40e2f7:\n                                rdx = r11_1 == 2;\n                                rax_8 = ((r10 ^ 1) & rdx);\n                                int64_t rcx_6;\n                                if (rax_8 == 0)\n                                {\n                                    rcx_6 = rbx_1;\n                                    if (r14 <= rbx_1)\n                                    {\n                                        goto label_40e342;\n                                    }\n                                    rax_8 = r10;\n                                label_40e33a:\n                                    r15[rcx_6] = 0x5c;\n                                    r10 = rax_8;\n                                label_40e342:\n                                    rbx_1 = (rcx_6 + 1);\n                                    if (r11_1 == 2)\n                                    {\n                                        rax_8 = r13;\n                                        rbp_3 = 0x30;\n                                        r13 = 0;\n                                        goto label_40e0fc;\n                                    }\n                                    rbp_3 = 0x30;\n                                    if ((r12_1 + 1) < r9)\n                                    {\n                                        char rax_20 = *((arg3 + r12_1) + 1);\n                                        var_98 = rax_20;\n                                        if ((rax_20 - 0x30) <= 9)\n                                        {\n                                            if (r14 > rbx_1)\n                                            {\n                                                r15[rbx_1] = 0x30;\n                                            }\n                                            if (r14 > (rcx_6 + 2))\n                                            {\n                                                r15[(rcx_6 + 2)] = 0x30;\n                                            }\n                                            rbx_1 = (rcx_6 + 3);\n                                            rbp_3 = 0x30;\n                                        }\n                                    }\n                                    goto label_40e383;\n                                }\n                                if (r14 > rbx_1)\n                                {\n                                    r15[rbx_1] = 0x27;\n                                }\n                                if (r14 > (rbx_1 + 1))\n                                {\n                                    r15[(rbx_1 + 1)] = 0x24;\n                                }\n                                if (r14 > (rbx_1 + 2))\n                                {\n                                    r15[(rbx_1 + 2)] = 0x27;\n                                }\n                                rcx_6 = (rbx_1 + 3);\n                                if (r14 > rcx_6)\n                                {\n                                    goto label_40e33a;\n                                }\n                                rbx_1 = (rbx_1 + 4);\n                                r10 = rax_8;\n                                r13 = 0;\n                                rbp_3 = 0x30;\n                                goto label_40e0fc;\n                            }\n                            case 1:\n                            case 2:\n                            case 3:\n                            case 4:\n                            case 5:\n                            case 6:\n                            case 0xe:\n                            case 0xf:\n                            case 0x10:\n                            case 0x11:\n                            case 0x12:\n                            case 0x13:\n                            case 0x14:\n                            case 0x15:\n                            case 0x16:\n                            case 0x17:\n                            case 0x18:\n                            case 0x19:\n                            case 0x1a:\n                            case 0x1b:\n                            case 0x1c:\n                            case 0x1d:\n                            case 0x1e:\n                            case 0x1f:\n                            case 0x40:\n                            {\n                                goto label_40e3a0;\n                            }\n                            case 7:\n                            {\n                                rbp_3 = 0x61;\n                                goto label_40e2b5;\n                            }\n                            case 8:\n                            {\n                                rbp_3 = 0x62;\n                                goto label_40e1ed;\n                            }\n                            case 9:\n                            {\n                            label_40e270:\n                                rbp_3 = 0x74;\n                                goto label_40e1ed;\n                            }\n                            case 0xa:\n                            {\n                            label_40e1e8:\n                                rbp_3 = 0x6e;\n                            label_40e1ed:\n                                rdx = 0;\n                                r13 = 0;\n                                if (var_5c != 0)\n                                {\n                                    goto label_40e200;\n                                }\n                                goto label_40e048;\n                            }\n                            case 0xb:\n                            {\n                            label_40e2d0:\n                                rbp_3 = 0x76;\n                                goto label_40e2b5;\n                            }\n                            case 0xc:\n                            {\n                            label_40e2b0:\n                                rbp_3 = 0x66;\n                            label_40e2b5:\n                                if (var_5c == 0)\n                                {\n                                    goto label_40e2c0;\n                                }\n                                r13_1 = r11_1;\n                                rax_14 = 0;\n                                r11 = r9;\n                            label_40e208:\n                                var_c0 = (var_c0 & rax_14);\n                                goto label_40e20c;\n                            }\n                            case 0xd:\n                            {\n                                var_b8 = 0;\n                            label_40e299:\n                                rbp_3 = 0xd;\n                                rcx_2 = 0x72;\n                                rdx = r11_1 == 2;\n                                goto label_40e1d0;\n                            }\n                            case 0x20:\n                            {\n                                rax_27 = 0;\n                            label_40e5fa:\n                                rbp_3 = 0x20;\n                                goto label_40e5c2;\n                            }\n                            case 0x21:\n                            case 0x22:\n                            case 0x24:\n                            case 0x26:\n                            case 0x28:\n                            case 0x29:\n                            case 0x2a:\n                            case 0x3b:\n                            case 0x3c:\n                            case 0x3d:\n                            case 0x3e:\n                            case 0x5b:\n                            case 0x5e:\n                            case 0x60:\n                            case 0x7c:\n                            {\n                                var_b8 = 0;\n                            label_40e285:\n                                rdx = 0;\n                            label_40e1db:\n                                r13 = 0;\n                                goto label_40dff5;\n                            }\n                            case 0x23:\n                            case 0x7e:\n                            {\n                                rax_28 = 0;\n                            label_40e5da:\n                                if (r12_1 == 0)\n                                {\n                                    r13 = var_b8;\n                                    rdx = 0;\n                                    var_b8 = rax_28;\n                                    goto label_40dff5;\n                                }\n                                var_b8 = rax_28;\n                                r13 = 0;\n                            label_40dfff:\n                                rax_8 = 0;\n                                goto label_40e001;\n                            }\n                            case 0x25:\n                            case 0x2b:\n                            case 0x2c:\n                            case 0x2d:\n                            case 0x2e:\n                            case 0x2f:\n                            case 0x30:\n                            case 0x31:\n                            case 0x32:\n                            case 0x33:\n                            case 0x34:\n                            case 0x35:\n                            case 0x36:\n                            case 0x37:\n                            case 0x38:\n                            case 0x39:\n                            case 0x3a:\n                            case 0x41:\n                            case 0x42:\n                            case 0x43:\n                            case 0x44:\n                            case 0x45:\n                            case 0x46:\n                            case 0x47:\n                            case 0x48:\n                            case 0x49:\n                            case 0x4a:\n                            case 0x4b:\n                            case 0x4c:\n                            case 0x4d:\n                            case 0x4e:\n                            case 0x4f:\n                            case 0x50:\n                            case 0x51:\n                            case 0x52:\n                            case 0x53:\n                            case 0x54:\n                            case 0x55:\n                            case 0x56:\n                            case 0x57:\n                            case 0x58:\n                            case 0x59:\n                            case 0x5a:\n                            case 0x5d:\n                            case 0x5f:\n                            case 0x61:\n                            case 0x62:\n                            case 0x63:\n                            case 0x64:\n                            case 0x65:\n                            case 0x66:\n                            case 0x67:\n                            case 0x68:\n                            case 0x69:\n                            case 0x6a:\n                            case 0x6b:\n                            case 0x6c:\n                            case 0x6d:\n                            case 0x6e:\n                            case 0x6f:\n                            case 0x70:\n                            case 0x71:\n                            case 0x72:\n                            case 0x73:\n                            case 0x74:\n                            case 0x75:\n                            case 0x76:\n                            case 0x77:\n                            case 0x78:\n                            case 0x79:\n                            case 0x7a:\n                            {\n                                rax_27 = 0;\n                            label_40e5c2:\n                                r13 = var_b8;\n                                var_b8 = rax_27;\n                                rax_8 = 0;\n                                goto label_40e001;\n                            }\n                            case 0x27:\n                            {\n                                var_b8 = 0;\n                            label_40e17d:\n                                if (r11_1 != 2)\n                                {\n                                    var_5b_1 = r13;\n                                    rdx = 0;\n                                    rbp_3 = 0x27;\n                                    goto label_40dff5;\n                                }\n                                if (var_5c != 0)\n                                {\n                                    goto label_40ef3d;\n                                }\n                                if (r14 != 0)\n                                {\n                                    rdx = 0;\n                                }\n                                if ((r14 == 0 || (r14 != 0 && var_70 != 0)))\n                                {\n                                    if (r14 > rbx_1)\n                                    {\n                                        r15[rbx_1] = 0x27;\n                                    }\n                                    if (r14 > (rbx_1 + 1))\n                                    {\n                                        r15[(rbx_1 + 1)] = 0x5c;\n                                    }\n                                    if (r14 <= (rbx_1 + 2))\n                                    {\n                                        rdx = r14;\n                                        r14 = var_70;\n                                    }\n                                    else\n                                    {\n                                        rdx = r14;\n                                        r15[(rbx_1 + 2)] = 0x27;\n                                        r14 = var_70;\n                                    }\n                                }\n                                var_5b_1 = r13;\n                                rbx_1 = (rbx_1 + 3);\n                                rax_8 = 0;\n                                r10 = 0;\n                                var_70 = r14;\n                                rbp_3 = 0x27;\n                                r14 = rdx;\n                                goto label_40e0fc;\n                            }\n                            case 0x3f:\n                            {\n                                var_b8 = 0;\n                            label_40e14d:\n                                if (r11_1 == 2)\n                                {\n                                    if (var_5c != 0)\n                                    {\n                                    label_40ef3d:\n                                        r13_1 = r11_1;\n                                        r11 = r9;\n                                        goto label_40e20c;\n                                    }\n                                    r13 = 0;\n                                    rax_8 = 0;\n                                    rbp_3 = 0x3f;\n                                label_40e0fc:\n                                    rdx = r11_1 == 2;\n                                    if (var_b8 != 0)\n                                    {\n                                        goto label_40e037;\n                                    }\n                                    r12_1 = (r12_1 + 1);\n                                    rax_12 = ((rax_8 ^ 1) & r10);\n                                    goto label_40e114;\n                                }\n                                if (r11_1 != 5)\n                                {\n                                    rbp_3 = 0x3f;\n                                    rdx = r11_1 == 2;\n                                    r13 = 0;\n                                    goto label_40dff5;\n                                }\n                                if ((arg6 & 4) == 0)\n                                {\n                                label_40e6e0:\n                                    rdx = 0;\n                                    r13 = 0;\n                                    rbp_3 = 0x3f;\n                                    goto label_40dff5;\n                                }\n                                int64_t rax_30 = (r12_1 + 2);\n                                if (rax_30 >= r9)\n                                {\n                                    goto label_40e6e0;\n                                }\n                                if (*((arg3 + r12_1) + 1) != 0x3f)\n                                {\n                                    goto label_40e6e0;\n                                }\n                                rbp_3 = *(arg3 + rax_30);\n                                if (rbp_3 > 0x3e)\n                                {\n                                    goto label_40e6e0;\n                                }\n                                if ((!(TEST_BITQ(0x7000a38200000000, rbp_3))))\n                                {\n                                    goto label_40e6e0;\n                                }\n                                if (var_5c != 0)\n                                {\n                                    goto label_40eef0;\n                                }\n                                if (r14 > rbx_1)\n                                {\n                                    r15[rbx_1] = 0x3f;\n                                }\n                                if (r14 > (rbx_1 + 1))\n                                {\n                                    r15[(rbx_1 + 1)] = 0x22;\n                                }\n                                if (r14 > (rbx_1 + 2))\n                                {\n                                    r15[(rbx_1 + 2)] = 0x22;\n                                }\n                                if (r14 > (rbx_1 + 3))\n                                {\n                                    r15[(rbx_1 + 3)] = 0x3f;\n                                }\n                                rbx_1 = (rbx_1 + 4);\n                                rdx = 0;\n                                r13 = 0;\n                                r12_1 = rax_30;\n                            label_40e383:\n                                rax_8 = r13;\n                                r13 = 0;\n                                if (((var_c0 ^ 1) | rdx) != 0)\n                                {\n                                    goto label_40e0fc;\n                                }\n                            label_40e001:\n                                if (arg7 == 0)\n                                {\n                                    goto label_40e0fc;\n                                }\n                                if (((*(arg7 + ((rbp_3 >> 5) << 2)) >> rbp_3) & 1) == 0)\n                                {\n                                    goto label_40e0fc;\n                                }\n                                rdx = r11_1 == 2;\n                                goto label_40e037;\n                            }\n                            case 0x5c:\n                            {\n                                var_b8 = 0;\n                            label_40e1aa:\n                                rdx = (var_c0 & var_5c);\n                                rbp_3 = 0x5c;\n                                rcx_2 = 0x5c;\n                                rax_1 = var_a0_1 != 0;\n                                rdx = (rdx & rax_1);\n                                if (rdx == 0)\n                                {\n                                    goto label_40e1d0;\n                                }\n                                r12_1 = (r12_1 + 1);\n                                rax_12 = r10;\n                                r13 = 0;\n                            label_40e114:\n                                if (rax_12 != 0)\n                                {\n                                    if (r14 > rbx_1)\n                                    {\n                                        r15[rbx_1] = 0x27;\n                                    }\n                                    if (r14 > (rbx_1 + 1))\n                                    {\n                                        r15[(rbx_1 + 1)] = 0x27;\n                                    }\n                                    rbx_1 = (rbx_1 + 2);\n                                    r10 = 0;\n                                    goto label_40e08d;\n                                }\n                            label_40e08d:\n                                if (rbx_1 >= r14)\n                                {\n                                    goto label_40e096;\n                                }\n                                r15[rbx_1] = rbp_3;\n                            label_40e096:\n                                char rdi_2 = var_a9;\n                                rbx_1 = (rbx_1 + 1);\n                                if (r13 == 0)\n                                {\n                                    rdi_2 = 0;\n                                }\n                                var_a9 = rdi_2;\n                                continue;\n                            }\n                            case 0x7b:\n                            case 0x7d:\n                            {\n                                var_b8 = 0;\n                            label_40dfa9:\n                                rax_1 = r9 != 1;\n                                if (r9 == -1)\n                                {\n                                    rax_1 = *(arg3 + 1) != 0;\n                                }\n                                rdx = r11_1 == 2;\n                                if (rax_1 != 0)\n                                {\n                                    goto label_40e1db;\n                                }\n                                goto label_40dfcd;\n                            }\n                        }\n                    }\n                }\n            }\n        label_40e686:\n            *r15 = 0x27;\n            r13 = 2;\n            rbx_1 = 1;\n            var_78_1 = \"'\";\n            var_a0_1 = 1;\n            var_5c = false;\n            var_5b_1 = rax_1;\n        }\n    }\n    if ((r13 == 4 && rbp_1 == 0))\n    {\n        var_c0 = 1;\n    }\n    switch (r13)\n    {\n        case 0:\n        {\n            var_a9 = 1;\n            r10 = 0;\n            rbx_1 = 0;\n            var_5b_1 = 0;\n            var_70 = 0;\n            var_5c = false;\n            var_c0 = 0;\n            var_a0_1 = 0;\n            var_78_1 = nullptr;\n            goto label_40de98;\n        }\n        case 2:\n        {\n            if (rbp_1 != 0)\n            {\n                var_a9 = 1;\n                r10 = 0;\n                rbx_1 = 0;\n                var_5b_1 = 0;\n                var_70 = 0;\n                var_5c = true;\n                var_c0 = 0;\n                var_a0_1 = 1;\n                var_78_1 = \"'\";\n                goto label_40de98;\n            }\n            var_c0 = 0;\n            break;\n        }\n        case 3:\n        {\n            var_a9 = 1;\n            r10 = 0;\n            rbx_1 = 0;\n            r13 = 2;\n            var_5b_1 = 0;\n            var_70 = 0;\n            var_5c = true;\n            var_c0 = 1;\n            var_a0_1 = 1;\n            var_78_1 = \"'\";\n            goto label_40de98;\n        }\n        case 5:\n        {\n            if (rbp_1 != 0)\n            {\n                var_a9 = 1;\n                r10 = 0;\n                rbx_1 = 0;\n                var_5b_1 = 0;\n                var_70 = 0;\n                var_5c = true;\n                var_c0 = 1;\n                var_a0_1 = 1;\n                var_78_1 = &data_416c54;\n            }\n            else\n            {\n                if (r14 == 0)\n                {\n                    var_70 = 0;\n                    r10 = 0;\n                    var_a9 = 1;\n                    var_5b_1 = 0;\n                }\n                else\n                {\n                    *r15 = 0x22;\n                    r10 = 0;\n                    var_a9 = 1;\n                    var_5b_1 = 0;\n                    var_70 = 0;\n                }\n                var_5c = false;\n                rbx_1 = 1;\n                var_c0 = 1;\n                var_a0_1 = 1;\n                var_78_1 = &data_416c54;\n            }\n            goto label_40de98;\n        }\n        case 6:\n        {\n            var_a9 = 1;\n            r10 = 0;\n            rbx_1 = 0;\n            r13 = 5;\n            var_5b_1 = 0;\n            var_70 = 0;\n            var_5c = true;\n            var_c0 = 1;\n            var_a0_1 = 1;\n            var_78_1 = &data_416c54;\n            goto label_40de98;\n        }\n        case 7:\n        {\n            var_a9 = 1;\n            r10 = 0;\n            rbx_1 = 0;\n            var_5b_1 = 0;\n            var_70 = 0;\n            var_5c = false;\n            var_c0 = 1;\n            var_a0_1 = 0;\n            var_78_1 = nullptr;\n            goto label_40de98;\n        }\n        case 8:\n        case 9:\n        case 0xa:\n        {\n            if ((!cond:1))\n            {\n                arg8 = sub_40dd00(&data_416c65, r13);\n                arg9 = sub_40dd00(\"'\", r13);\n            }\n            rbx_1 = 0;\n            if (rbp_1 == 0)\n            {\n                char rax_49 = *arg8;\n                if (rax_49 != 0)\n                {\n                    do\n                    {\n                        if (r14 > rbx_1)\n                        {\n                            r15[rbx_1] = rax_49;\n                        }\n                        rbx_1 = (rbx_1 + 1);\n                        rax_49 = arg8[rbx_1];\n                    } while (rax_49 != 0);\n                }\n            }\n            uint64_t rax_46;\n            rax_46 = strlen(arg9);\n            var_a9 = 1;\n            r10 = 0;\n            var_a0_1 = rax_46;\n            var_5b_1 = 0;\n            var_78_1 = arg9;\n            var_70 = 0;\n            var_c0 = 1;\n            goto label_40de98;\n        }\n    }\n    if (((r13 == 4 && rbp_1 == 0) || r13 == 2))\n    {\n        if (r14 != 0)\n        {\n            r10 = 0;\n            rax_1 = 0;\n            var_a9 = 1;\n            var_70 = 0;\n            goto label_40e686;\n        }\n        var_a9 = 1;\n        r10 = 0;\n        rbx_1 = 1;\n        r13 = 2;\n        var_70 = 0;\n        var_5b_1 = 0;\n        var_5c = false;\n        var_a0_1 = 1;\n        var_78_1 = \"'\";\n        goto label_40de98;\n    }\n}\n\n"
        },
        {
            "funcName": "sub_40f030",
            "funcStartAddr": "0x402f19",
            "funcEndAddr": "0x40f1ce",
            "decompiledFuncCode": "char* sub_40f030(int32_t arg1, uint64_t arg2, uint64_t arg3, int32_t* arg4)\n{\n    int64_t r15 = arg1;\n    int32_t* rax = __errno_location();\n    int64_t rbx = data_61c558;\n    int32_t rax_1 = *rax;\n    if (r15 < 0)\n    {\n        abort();\n        /* no return */\n    }\n    if (data_61c570 <= r15)\n    {\n        if (r15 == 0x7fffffff)\n        {\n            sub_411460();\n            /* no return */\n        }\n        int32_t r12_1 = (r15 + 1);\n        int64_t rsi_1 = (r12_1 << 4);\n        if (rbx == 0x61c560)\n        {\n            int64_t rax_9 = sub_411270(0, rsi_1);\n            int128_t zmm0 = data_61c560;\n            rbx = rax_9;\n            data_61c558 = rax_9;\n            *rax_9 = zmm0;\n        }\n        else\n        {\n            int64_t rax_2 = sub_411270(rbx, rsi_1);\n            data_61c558 = rax_2;\n            rbx = rax_2;\n        }\n        int64_t rdi_1 = data_61c570;\n        memset(((rdi_1 << 4) + rbx), 0, ((r12_1 - rdi_1) << 4));\n        data_61c570 = r12_1;\n    }\n    int64_t rbx_1 = (rbx + (r15 << 4));\n    void* r15_2 = &arg4[2];\n    int32_t rax_4 = (arg4[1] | 1);\n    uint64_t r11 = *rbx_1;\n    char* r12_2 = *(rbx_1 + 8);\n    int64_t rax_5 = sub_40de00(r12_2, r11, arg2, arg3, *arg4, rax_4, r15_2, *(arg4 + 0x28), *(arg4 + 0x30));\n    if (r11 <= rax_5)\n    {\n        size_t rsi_3 = (rax_5 + 1);\n        *rbx_1 = rsi_3;\n        if (r12_2 != 0x61cbe0)\n        {\n            free(r12_2);\n        }\n        char* rax_6 = sub_411210(rsi_3);\n        uint32_t r8_1 = *arg4;\n        *(rbx_1 + 8) = rax_6;\n        r12_2 = rax_6;\n        sub_40de00(rax_6, rsi_3, arg2, arg3, r8_1, rax_4, r15_2, *(arg4 + 0x28), *(arg4 + 0x30));\n    }\n    *rax = rax_1;\n    return r12_2;\n}\n\n"
        },
        {
            "funcName": "sub_40f1d0",
            "funcStartAddr": "0x40f1d0",
            "funcEndAddr": "0x40f204",
            "decompiledFuncCode": "int64_t sub_40f1d0(int64_t arg1)\n{\n    int64_t rbx = arg1;\n    int32_t* rax = __errno_location();\n    int32_t r12 = *rax;\n    if (rbx == 0)\n    {\n        rbx = 0x61cce0;\n    }\n    int64_t rax_1 = sub_411410(rbx, 0x38);\n    *rax = r12;\n    return rax_1;\n}\n\n"
        },
        {
            "funcName": "sub_40f210",
            "funcStartAddr": "0x40f210",
            "funcEndAddr": "0x40f21f",
            "decompiledFuncCode": "uint64_t sub_40f210(int32_t* arg1)\n{\n    if (arg1 == 0)\n    {\n        arg1 = &data_61cce0;\n    }\n    return *arg1;\n}\n\n"
        },
        {
            "funcName": "sub_40f220",
            "funcStartAddr": "0x40f220",
            "funcEndAddr": "0x40f22f",
            "decompiledFuncCode": "void sub_40f220(int32_t* arg1, int32_t arg2)\n{\n    if (arg1 == 0)\n    {\n        arg1 = &data_61cce0;\n    }\n    *arg1 = arg2;\n}\n\n"
        },
        {
            "funcName": "sub_40f230",
            "funcStartAddr": "0x40f230",
            "funcEndAddr": "0x40f263",
            "decompiledFuncCode": "uint64_t sub_40f230(int64_t arg1, uint8_t arg2, int32_t arg3)\n{\n    if (arg1 == 0)\n    {\n        arg1 = 0x61cce0;\n    }\n    char rcx_1 = (arg2 & 0x1f);\n    int32_t rsi = *((arg1 + ((arg2 >> 5) << 2)) + 8);\n    uint32_t rax_3 = (rsi >> rcx_1);\n    *((arg1 + ((arg2 >> 5) << 2)) + 8) = ((((arg3 ^ rax_3) & 1) << rcx_1) ^ rsi);\n    return (rax_3 & 1);\n}\n\n"
        },
        {
            "funcName": "sub_40f270",
            "funcStartAddr": "0x40f270",
            "funcEndAddr": "0x40f283",
            "decompiledFuncCode": "uint64_t sub_40f270(int128_t* arg1, int32_t arg2)\n{\n    if (arg1 == 0)\n    {\n        arg1 = &data_61cce0;\n    }\n    uint64_t rax = *(arg1 + 4);\n    *(arg1 + 4) = arg2;\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_40f290",
            "funcStartAddr": "0x40f290",
            "funcEndAddr": "0x40f2bb",
            "decompiledFuncCode": "void sub_40f290(int32_t* arg1, int64_t arg2, int64_t arg3)\n{\n    if (arg1 == 0)\n    {\n        arg1 = &data_61cce0;\n    }\n    *arg1 = 0xa;\n    if ((arg2 != 0 && arg3 != 0))\n    {\n        *(arg1 + 0x28) = arg2;\n        *(arg1 + 0x30) = arg3;\n        return;\n    }\n    int64_t var_8 = 0x61cce0;\n    abort();\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_40f2c0",
            "funcStartAddr": "0x40f2c0",
            "funcEndAddr": "0x40f332",
            "decompiledFuncCode": "int64_t sub_40f2c0(char* arg1, uint64_t arg2, uint64_t arg3, uint64_t arg4, \n    int32_t* arg5)\n{\n    int32_t* rbx = arg5;\n    if (arg5 == 0)\n    {\n        rbx = &data_61cce0;\n    }\n    int32_t* rax = __errno_location();\n    int32_t r12 = *rax;\n    int64_t rax_2 = sub_40de00(arg1, arg2, arg3, arg4, *rbx, rbx[1], &rbx[2], *(rbx + 0x28), *(rbx + 0x30));\n    *rax = r12;\n    return rax_2;\n}\n\n"
        },
        {
            "funcName": "sub_40f340",
            "funcStartAddr": "0x40f340",
            "funcEndAddr": "0x40f421",
            "decompiledFuncCode": "char* sub_40f340(uint64_t arg1, uint64_t arg2, int64_t* arg3, int32_t* arg4)\n{\n    int32_t* rbx = arg4;\n    if (arg4 == 0)\n    {\n        rbx = &data_61cce0;\n    }\n    int32_t* rax = __errno_location();\n    int32_t rax_1 = *rax;\n    int32_t rbp;\n    rbp = arg3 == 0;\n    int32_t rbp_1 = (rbp | rbx[1]);\n    int64_t rax_2 = sub_40de00(nullptr, 0, arg1, arg2, *rbx, rbp_1, &rbx[2], *(rbx + 0x28), *(rbx + 0x30));\n    char* rax_3 = sub_411210((rax_2 + 1));\n    sub_40de00(rax_3, (rax_2 + 1), arg1, arg2, *rbx, rbp_1, &rbx[2], *(rbx + 0x28), *(rbx + 0x30));\n    *rax = rax_1;\n    if (arg3 != 0)\n    {\n        *arg3 = rax_2;\n    }\n    return rax_3;\n}\n\n"
        },
        {
            "funcName": "sub_40f430",
            "funcStartAddr": "0x40f430",
            "funcEndAddr": "0x40f43a",
            "decompiledFuncCode": "int64_t sub_40f430(uint64_t arg1, uint64_t arg2, int32_t* arg3)\n{\n    /* tailcall */\n    return sub_40f340(arg1, arg2, nullptr, arg3);\n}\n\n"
        },
        {
            "funcName": "sub_40f440",
            "funcStartAddr": "0x40f440",
            "funcEndAddr": "0x40f4d5",
            "decompiledFuncCode": "uint64_t sub_40f440()\n{\n    uint64_t rax_2 = data_61c570;\n    int64_t r12 = data_61c558;\n    if (rax_2 > 1)\n    {\n        int64_t* rbx_1 = (r12 + 0x18);\n        int64_t rbp_1 = ((r12 + ((rax_2 - 2) << 4)) + 0x28);\n        do\n        {\n            int64_t rdi_1 = *rbx_1;\n            rbx_1 = &rbx_1[2];\n            rax_2 = free(rdi_1);\n        } while (rbx_1 != rbp_1);\n    }\n    int64_t rdi_2 = *(r12 + 8);\n    if (rdi_2 != 0x61cbe0)\n    {\n        rax_2 = free(rdi_2);\n        *data_61c560 = 0x100;\n        *(data_61c560 + 8) = 0x61cbe0;\n    }\n    if (r12 != 0x61c560)\n    {\n        rax_2 = free(r12);\n        data_61c558 = 0x61c560;\n    }\n    data_61c570 = 1;\n    return rax_2;\n}\n\n"
        },
        {
            "funcName": "sub_40f4e0",
            "funcStartAddr": "0x40f4e0",
            "funcEndAddr": "0x40f4f1",
            "decompiledFuncCode": "int64_t sub_40f4e0(int32_t arg1, uint64_t arg2)\n{\n    /* tailcall */\n    return sub_40f030(arg1, arg2, -1, &data_61cce0);\n}\n\n"
        },
        {
            "funcName": "sub_40f500",
            "funcStartAddr": "0x40f500",
            "funcEndAddr": "0x40f50a",
            "decompiledFuncCode": "int64_t sub_40f500(int32_t arg1, uint64_t arg2, uint64_t arg3)\n{\n    /* tailcall */\n    return sub_40f030(arg1, arg2, arg3, &data_61cce0);\n}\n\n"
        },
        {
            "funcName": "sub_40f510",
            "funcStartAddr": "0x40f510",
            "funcEndAddr": "0x40f526",
            "decompiledFuncCode": "int64_t sub_40f510(uint64_t arg1)\n{\n    /* tailcall */\n    return sub_40f030(0, arg1, -1, &data_61cce0);\n}\n\n"
        },
        {
            "funcName": "sub_40f530",
            "funcStartAddr": "0x40f530",
            "funcEndAddr": "0x40f542",
            "decompiledFuncCode": "int64_t sub_40f530(uint64_t arg1, uint64_t arg2)\n{\n    /* tailcall */\n    return sub_40f030(0, arg1, arg2, &data_61cce0);\n}\n\n"
        },
        {
            "funcName": "sub_40f550",
            "funcStartAddr": "0x402f1e",
            "funcEndAddr": "0x40f5b8",
            "decompiledFuncCode": "char* sub_40f550(int32_t arg1, int32_t arg2, uint64_t arg3)\n{\n    if (arg2 == 0xa)\n    {\n        abort();\n        /* no return */\n    }\n    int32_t var_48 = arg2;\n    int32_t var_44 = 0;\n    int64_t var_40 = 0;\n    int64_t var_38 = 0;\n    int64_t var_30 = 0;\n    int64_t var_28 = 0;\n    int64_t var_20 = 0;\n    int64_t var_18 = 0;\n    return sub_40f030(arg1, arg3, -1, &var_48);\n}\n\n"
        },
        {
            "funcName": "sub_40f5c0",
            "funcStartAddr": "0x402f23",
            "funcEndAddr": "0x40f624",
            "decompiledFuncCode": "char* sub_40f5c0(int32_t arg1, int32_t arg2, uint64_t arg3, uint64_t arg4)\n{\n    if (arg2 == 0xa)\n    {\n        abort();\n        /* no return */\n    }\n    int32_t var_48 = arg2;\n    int32_t var_44 = 0;\n    int64_t var_40 = 0;\n    int64_t var_38 = 0;\n    int64_t var_30 = 0;\n    int64_t var_28 = 0;\n    int64_t var_20 = 0;\n    int64_t var_18 = 0;\n    return sub_40f030(arg1, arg3, arg4, &var_48);\n}\n\n"
        },
        {
            "funcName": "sub_40f630",
            "funcStartAddr": "0x40f630",
            "funcEndAddr": "0x40f63c",
            "decompiledFuncCode": "int64_t sub_40f630(int32_t arg1, uint64_t arg2)\n{\n    /* tailcall */\n    return sub_40f550(0, arg1, arg2);\n}\n\n"
        },
        {
            "funcName": "sub_40f640",
            "funcStartAddr": "0x40f640",
            "funcEndAddr": "0x40f64f",
            "decompiledFuncCode": "int64_t sub_40f640(int32_t arg1, uint64_t arg2, uint64_t arg3)\n{\n    /* tailcall */\n    return sub_40f5c0(0, arg1, arg2, arg3);\n}\n\n"
        },
        {
            "funcName": "sub_40f650",
            "funcStartAddr": "0x40f650",
            "funcEndAddr": "0x40f6c0",
            "decompiledFuncCode": "char* sub_40f650(uint64_t arg1, uint64_t arg2, uint8_t arg3)\n{\n    char rcx_1 = (arg3 & 0x1f);\n    int64_t var_18 = data_61cd10;\n    int128_t var_48 = data_61cce0;\n    int128_t var_38 = data_61ccf0;\n    int128_t var_28 = data_61cd00;\n    int32_t rdx = *((&var_48 + ((arg3 >> 5) << 2)) + 8);\n    *((&var_48 + ((arg3 >> 5) << 2)) + 8) = ((((!(rdx >> rcx_1)) & 1) << rcx_1) ^ rdx);\n    return sub_40f030(0, arg1, arg2, &var_48);\n}\n\n"
        },
        {
            "funcName": "sub_40f6c0",
            "funcStartAddr": "0x40f6c0",
            "funcEndAddr": "0x40f6cd",
            "decompiledFuncCode": "int64_t sub_40f6c0(uint64_t arg1, uint8_t arg2)\n{\n    /* tailcall */\n    return sub_40f650(arg1, -1, arg2);\n}\n\n"
        },
        {
            "funcName": "sub_40f6d0",
            "funcStartAddr": "0x40f6d0",
            "funcEndAddr": "0x40f6e1",
            "decompiledFuncCode": "int64_t sub_40f6d0(uint64_t arg1)\n{\n    /* tailcall */\n    return sub_40f650(arg1, -1, 0x3a);\n}\n\n"
        },
        {
            "funcName": "sub_40f6f0",
            "funcStartAddr": "0x40f6f0",
            "funcEndAddr": "0x40f6fa",
            "decompiledFuncCode": "int64_t sub_40f6f0(uint64_t arg1, uint64_t arg2)\n{\n    /* tailcall */\n    return sub_40f650(arg1, arg2, 0x3a);\n}\n\n"
        },
        {
            "funcName": "sub_40f700",
            "funcStartAddr": "0x402f28",
            "funcEndAddr": "0x40f76e",
            "decompiledFuncCode": "char* sub_40f700(int32_t arg1, int32_t arg2, uint64_t arg3)\n{\n    if (arg2 == 0xa)\n    {\n        abort();\n        /* no return */\n    }\n    int32_t var_48 = arg2;\n    int64_t var_40 = 0x400000000000000;\n    int32_t var_44 = 0;\n    int64_t var_38 = 0;\n    int64_t var_30 = 0;\n    int64_t var_28 = 0;\n    int64_t var_20 = 0;\n    int64_t var_18 = 0;\n    return sub_40f030(arg1, arg3, -1, &var_48);\n}\n\n"
        },
        {
            "funcName": "sub_40f770",
            "funcStartAddr": "0x40f770",
            "funcEndAddr": "0x40f7dc",
            "decompiledFuncCode": "char* sub_40f770(int32_t arg1, int64_t arg2, int64_t arg3, uint64_t arg4, \n    uint64_t arg5)\n{\n    int128_t var_48 = data_61cce0;\n    int128_t var_38 = data_61ccf0;\n    int128_t var_28 = data_61cd00;\n    int64_t var_18 = data_61cd10;\n    var_48 = 0xa;\n    if ((arg2 != 0 && arg3 != 0))\n    {\n        *var_28[8] = arg2;\n        int64_t var_18_1 = arg3;\n        return sub_40f030(arg1, arg4, arg5, &var_48);\n    }\n    abort();\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_40f830",
            "funcStartAddr": "0x40f830",
            "funcEndAddr": "0x40f83a",
            "decompiledFuncCode": "int64_t sub_40f830(int32_t arg1, uint64_t arg2, uint64_t arg3)\n{\n    /* tailcall */\n    return sub_40f030(arg1, arg2, arg3, &data_61c520);\n}\n\n"
        },
        {
            "funcName": "sub_40f840",
            "funcStartAddr": "0x40f840",
            "funcEndAddr": "0x40f852",
            "decompiledFuncCode": "int64_t sub_40f840(uint64_t arg1, uint64_t arg2)\n{\n    /* tailcall */\n    return sub_40f030(0, arg1, arg2, &data_61c520);\n}\n\n"
        },
        {
            "funcName": "sub_40f860",
            "funcStartAddr": "0x40f860",
            "funcEndAddr": "0x40f871",
            "decompiledFuncCode": "int64_t sub_40f860(int32_t arg1, uint64_t arg2)\n{\n    /* tailcall */\n    return sub_40f030(arg1, arg2, -1, &data_61c520);\n}\n\n"
        },
        {
            "funcName": "sub_40f880",
            "funcStartAddr": "0x40f880",
            "funcEndAddr": "0x40f896",
            "decompiledFuncCode": "int64_t sub_40f880(uint64_t arg1)\n{\n    /* tailcall */\n    return sub_40f030(0, arg1, -1, &data_61c520);\n}\n\n"
        },
        {
            "funcName": "sub_40f8a0",
            "funcStartAddr": "0x402f2d",
            "funcEndAddr": "0x40f8fd",
            "decompiledFuncCode": "int64_t sub_40f8a0(uint64_t arg1) __noreturn\n{\n    if (arg1 != 0)\n    {\n        int64_t rax_1 = sub_40f880(arg1);\n        int32_t* rax_2 = __errno_location();\n        char* rax_3;\n        if (*rax_2 == 0)\n        {\n            rax_3 = dcgettext(nullptr, \"%s: end of file\", 5);\n        }\n        else\n        {\n            rax_3 = dcgettext(nullptr, \"%s: read error\", 5);\n        }\n        error(data_61c518, *rax_2, rax_3, rax_1);\n    }\n    abort();\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_40f900",
            "funcStartAddr": "0x40f900",
            "funcEndAddr": "0x40fbef",
            "decompiledFuncCode": "FILE** sub_40f900(char* arg1, uint64_t arg2)\n{\n    FILE** rbx;\n    if (arg2 == 0)\n    {\n        FILE** rax_7 = sub_411210(0x1038);\n        rbx = rax_7;\n        *rax_7 = nullptr;\n        rax_7[1] = 0x40f8a0;\n        rax_7[2] = 0;\n    }\n    else\n    {\n        ssize_t r12_1 = arg1;\n        if (arg1 == 0)\n        {\n            FILE** rax_3 = sub_411210(0x1038);\n            *rax_3 = nullptr;\n            rbx = rax_3;\n            void* r13_2 = &rax_3[4];\n            rax_3[1] = 0x40f8a0;\n            rax_3[2] = 0;\n            rax_3[3] = 0;\n            int32_t rax_5 = open(\"/dev/urandom\", 0);\n            int128_t var_48;\n            ssize_t rbp_2;\n            int64_t rbp_6;\n            int64_t r14_1;\n            if (rax_5 < 0)\n            {\n                r14_1 = 0x14;\n                gettimeofday(&var_48, nullptr);\n                *(rbx + 0x20) = var_48;\n                int32_t rax_8 = getpid();\n                var_48 = rax_8;\n                rbx[6] = rax_8;\n            }\n            else\n            {\n                uint64_t rdx_1 = arg2;\n                if (arg2 > 0x800)\n                {\n                    rdx_1 = 0x800;\n                }\n                rbp_2 = __read_chk(rax_5, r13_2, rdx_1, 0x1018);\n                close(rax_5);\n                if (rbp_2 <= 0x7ff)\n                {\n                    if (rbp_2 < 0)\n                    {\n                        rbp_2 = r12_1;\n                    }\n                    int128_t* rdi_8 = &var_48;\n                    int64_t rcx_5 = (0x800 - rbp_2);\n                    void* r15_2 = (r13_2 + rbp_2);\n                    if (rcx_5 > 0x10)\n                    {\n                        rcx_5 = 0x10;\n                    }\n                    rbp_6 = (rbp_2 + rcx_5);\n                    gettimeofday(rdi_8, nullptr);\n                    void* rdi_9 = r15_2;\n                    void* rsi_5 = &var_48;\n                    for (uint64_t rcx_7 = rcx_5; rcx_7 != 0; rcx_7 = (rcx_7 - 1))\n                    {\n                        *rdi_9 = *rsi_5;\n                        rdi_9 = (rdi_9 + 1);\n                        rsi_5 = (rsi_5 + 1);\n                    }\n                    if (rbp_6 <= 0x7ff)\n                    {\n                        int64_t r14_3 = (0x800 - rbp_6);\n                        if (r14_3 > 4)\n                        {\n                            r14_3 = 4;\n                        }\n                        void* rsi_6 = &var_48;\n                        var_48 = getpid(rdi_9, rsi_5);\n                        uint64_t rcx_8 = r14_3;\n                        r14_1 = (r14_3 + rbp_6);\n                        void* rdi_10 = (r13_2 + rbp_6);\n                        for (; rcx_8 != 0; rcx_8 = (rcx_8 - 1))\n                        {\n                            *rdi_10 = *rsi_6;\n                            rdi_10 = (rdi_10 + 1);\n                            rsi_6 = (rsi_6 + 1);\n                        }\n                    }\n                }\n            }\n            if ((rax_5 < 0 || (((rax_5 >= 0 && rbp_2 <= 0x7ff) && rbp_6 <= 0x7ff) && r14_1 <= 0x7ff)))\n            {\n                int64_t rbp_3 = (0x800 - r14_1);\n                if (rbp_3 > 4)\n                {\n                    rbp_3 = 4;\n                }\n                void* rsi_2 = (r13_2 + r14_1);\n                var_48 = getppid();\n                int32_t rdi_5 = rbp_3;\n                if (rbp_3 != 0)\n                {\n                    int32_t rax_10 = 0;\n                    do\n                    {\n                        uint64_t rdx_2 = rax_10;\n                        rax_10 = (rax_10 + 1);\n                        *(rsi_2 + rdx_2) = *(&var_48 + rdx_2);\n                    } while (rax_10 < rdi_5);\n                }\n                int64_t rbp_4 = (rbp_3 + r14_1);\n                if (rbp_4 <= 0x7ff)\n                {\n                    int64_t r14_2 = (0x800 - rbp_4);\n                    if (r14_2 > 4)\n                    {\n                        r14_2 = 4;\n                    }\n                    void* rsi_3 = (r13_2 + rbp_4);\n                    var_48 = getuid();\n                    int32_t rdi_6 = r14_2;\n                    if (r14_2 != 0)\n                    {\n                        int32_t rax_12 = 0;\n                        do\n                        {\n                            uint64_t rdx_3 = rax_12;\n                            rax_12 = (rax_12 + 1);\n                            *(rsi_3 + rdx_3) = *(&var_48 + rdx_3);\n                        } while (rax_12 < rdi_6);\n                    }\n                    int64_t rbp_5 = (rbp_4 + r14_2);\n                    if (rbp_5 <= 0x7ff)\n                    {\n                        void* rsi_4 = (r13_2 + rbp_5);\n                        var_48 = getgid();\n                        int64_t rax_14 = (0x800 - rbp_5);\n                        if (rax_14 > 4)\n                        {\n                            rax_14 = 4;\n                        }\n                        int32_t rdi_7 = rax_14;\n                        if (rax_14 != 0)\n                        {\n                            int32_t rax_15 = 0;\n                            do\n                            {\n                                uint64_t rdx_4 = rax_15;\n                                rax_15 = (rax_15 + 1);\n                                *(rsi_4 + rdx_4) = *(&var_48 + rdx_4);\n                            } while (rax_15 < rdi_7);\n                        }\n                    }\n                }\n            }\n            sub_410070(r13_2);\n        }\n        else\n        {\n            FILE* rax = sub_4136b0(arg1, &data_4179c4);\n            if (rax == 0)\n            {\n                rbx = nullptr;\n            }\n            else\n            {\n                FILE** rax_1 = sub_411210(0x1038);\n                uint64_t rcx_1 = 0x1000;\n                *rax_1 = rax;\n                if (arg2 <= 0x1000)\n                {\n                    rcx_1 = arg2;\n                }\n                rax_1[1] = 0x40f8a0;\n                rbx = rax_1;\n                rax_1[2] = r12_1;\n                setvbuf(rax, &rax_1[3], 0, rcx_1);\n            }\n        }\n    }\n    return rbx;\n}\n\n"
        },
        {
            "funcName": "sub_40fbf0",
            "funcStartAddr": "0x40fbf0",
            "funcEndAddr": "0x40fbf5",
            "decompiledFuncCode": "int64_t sub_40fbf0(void* arg1, int64_t arg2)\n{\n    *(arg1 + 8) = arg2;\n}\n\n"
        },
        {
            "funcName": "sub_40fc00",
            "funcStartAddr": "0x40fc00",
            "funcEndAddr": "0x40fc05",
            "decompiledFuncCode": "int64_t sub_40fc00(void* arg1, int64_t arg2)\n{\n    *(arg1 + 0x10) = arg2;\n}\n\n"
        },
        {
            "funcName": "sub_40fc10",
            "funcStartAddr": "0x40fc10",
            "funcEndAddr": "0x40fd6c",
            "decompiledFuncCode": "uint64_t sub_40fc10(int64_t* arg1, int64_t* arg2, uint64_t arg3)\n{\n    int64_t* rbp = arg2;\n    uint64_t rbx = arg3;\n    FILE* r13 = *arg1;\n    uint64_t rax_3;\n    if (r13 == 0)\n    {\n        uint64_t r15_1 = arg1[3];\n        int64_t* r13_1 = &arg1[0x107];\n        void* r14_1 = &arg1[4];\n        if (arg3 <= r15_1)\n        {\n            r13_1 = ((r13_1 - r15_1) + 0x800);\n        }\n        else\n        {\n            do\n            {\n                int64_t* rdi_2 = rbp;\n                rbp = (rbp + r15_1);\n                rbx = (rbx - r15_1);\n                memcpy(rdi_2, ((0x800 - r15_1) + r13_1), r15_1);\n                if ((rbp & 7) == 0)\n                {\n                    while (rbx > 0x7ff)\n                    {\n                        int64_t* rsi_3 = rbp;\n                        rbp = &rbp[0x100];\n                        int64_t* rax_4 = sub_40fdc0(r14_1, rsi_3);\n                        uint64_t temp1_1 = rbx;\n                        rbx = (rbx - 0x800);\n                        if (temp1_1 == 0x800)\n                        {\n                            arg1[3] = 0;\n                            return rax_4;\n                        }\n                    }\n                    sub_40fdc0(r14_1, r13_1);\n                    break;\n                }\n                r15_1 = 0x800;\n                sub_40fdc0(r14_1, r13_1);\n            } while (rbx > 0x800);\n            r15_1 = 0x800;\n        }\n        rax_3 = memcpy(rbp, r13_1, rbx);\n        arg1[3] = (r15_1 - rbx);\n    }\n    else\n    {\n        int32_t* rax_1 = __errno_location();\n        while (true)\n        {\n            rax_3 = fread_unlocked(rbp, 1, rbx, r13);\n            int32_t rdx = *rax_1;\n            rbp = (rbp + rax_3);\n            uint64_t temp0_1 = rbx;\n            rbx = (rbx - rax_3);\n            if (temp0_1 == rax_3)\n            {\n                break;\n            }\n            int64_t rdi = arg1[2];\n            if ((**arg1 & 0x20) == 0)\n            {\n                rdx = 0;\n            }\n            *rax_1 = rdx;\n            arg1[1](rdi);\n            r13 = *arg1;\n        }\n    }\n    return rax_3;\n}\n\n"
        },
        {
            "funcName": "sub_40fd70",
            "funcStartAddr": "0x40fd70",
            "funcEndAddr": "0x40fdb9",
            "decompiledFuncCode": "int64_t sub_40fd70(int64_t* arg1)\n{\n    FILE* rbp = *arg1;\n    __explicit_bzero_chk(arg1, 0x1038, -1);\n    free(arg1);\n    if (rbp == 0)\n    {\n        return 0;\n    }\n    /* tailcall */\n    return sub_411f80(rbp);\n}\n\n"
        },
        {
            "funcName": "sub_40fdc0",
            "funcStartAddr": "0x40fdc0",
            "funcEndAddr": "0x410065",
            "decompiledFuncCode": "int64_t* sub_40fdc0(int64_t* arg1, int64_t* arg2)\n{\n    int64_t r11 = arg1[0x101];\n    void* r10 = &arg1[0x80];\n    int64_t rdx = arg1[0x100];\n    int64_t* r9 = arg2;\n    int64_t r8 = (arg1[0x102] + 1);\n    int64_t* rax = arg1;\n    arg1[0x102] = r8;\n    int64_t r11_1 = (r11 + r8);\n    do\n    {\n        int64_t rcx_3 = *rax;\n        int64_t rdx_3 = ((!(rdx ^ (rdx << 0x15))) + rax[0x80]);\n        int64_t r8_4 = ((*(arg1 + (rcx_3 & 0x7f8)) + rdx_3) + r11_1);\n        *rax = r8_4;\n        int64_t rbx_4 = (*(arg1 + ((r8_4 >> 8) & 0x7f8)) + rcx_3);\n        *r9 = rbx_4;\n        int64_t r8_7 = rax[1];\n        int64_t rdx_5 = ((rdx_3 ^ (rdx_3 >> 5)) + rax[0x81]);\n        int64_t rcx_6 = ((*(arg1 + (r8_7 & 0x7f8)) + rdx_5) + rbx_4);\n        rax[1] = rcx_6;\n        int64_t rbx_6 = (*(arg1 + ((rcx_6 >> 8) & 0x7f8)) + r8_7);\n        r9[1] = rbx_6;\n        int64_t rcx_9 = rax[2];\n        int64_t rdx_11 = (((rdx_5 << 0xc) ^ rdx_5) + rax[0x82]);\n        int64_t r8_11 = ((*(arg1 + (rcx_9 & 0x7f8)) + rdx_11) + rbx_6);\n        rax[2] = r8_11;\n        int64_t rcx_10 = (rcx_9 + *(arg1 + ((r8_11 >> 8) & 0x7f8)));\n        r9[2] = rcx_10;\n        int64_t r8_14 = rax[3];\n        rdx = ((rdx_11 ^ (rdx_11 >> 0x21)) + rax[0x83]);\n        int64_t rcx_16 = ((*(arg1 + (r8_14 & 0x7f8)) + rdx) + rcx_10);\n        rax = &rax[4];\n        r9 = &r9[4];\n        rax[-1] = rcx_16;\n        r11_1 = (*(arg1 + ((rcx_16 >> 8) & 0x7f8)) + r8_14);\n        r9[-1] = r11_1;\n    } while (rax != r10);\n    void* rsi = &arg2[0x80];\n    void* r9_1 = &arg1[0x100];\n    do\n    {\n        int64_t rcx_21 = *rax;\n        int64_t rdx_15 = ((!(rdx ^ (rdx << 0x15))) + rax[-0x80]);\n        int64_t r8_18 = ((*(arg1 + (rcx_21 & 0x7f8)) + rdx_15) + r11_1);\n        *rax = r8_18;\n        int64_t rcx_22 = (rcx_21 + *(arg1 + ((r8_18 >> 8) & 0x7f8)));\n        *rsi = rcx_22;\n        int64_t r8_21 = rax[1];\n        int64_t rdx_17 = ((rdx_15 ^ (rdx_15 >> 5)) + rax[-0x7f]);\n        int64_t rcx_25 = ((*(arg1 + (r8_21 & 0x7f8)) + rdx_17) + rcx_22);\n        rax[1] = rcx_25;\n        int64_t r11_11 = (*(arg1 + ((rcx_25 >> 8) & 0x7f8)) + r8_21);\n        *(rsi + 8) = r11_11;\n        int64_t rcx_28 = rax[2];\n        int64_t rdx_23 = (((rdx_17 << 0xc) ^ rdx_17) + rax[-0x7e]);\n        int64_t r8_25 = ((*(arg1 + (rcx_28 & 0x7f8)) + rdx_23) + r11_11);\n        rax[2] = r8_25;\n        int64_t rcx_29 = (rcx_28 + *(arg1 + ((r8_25 >> 8) & 0x7f8)));\n        *(rsi + 0x10) = rcx_29;\n        int64_t r8_28 = rax[3];\n        rdx = ((rdx_23 ^ (rdx_23 >> 0x21)) + rax[-0x7d]);\n        int64_t rcx_35 = ((*(arg1 + (r8_28 & 0x7f8)) + rdx) + rcx_29);\n        rax = &rax[4];\n        rsi = (rsi + 0x20);\n        rax[-1] = rcx_35;\n        r11_1 = (*(arg1 + ((rcx_35 >> 8) & 0x7f8)) + r8_28);\n        *(rsi - 8) = r11_1;\n    } while (rax != r9_1);\n    arg1[0x100] = rdx;\n    arg1[0x101] = r11_1;\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_410070",
            "funcStartAddr": "0x410070",
            "funcEndAddr": "0x4102a4",
            "decompiledFuncCode": "int64_t sub_410070(int64_t* arg1)\n{\n    int64_t* rdx = arg1;\n    int64_t* rax = arg1;\n    int64_t rcx = -0x670a8fb093bb3f55;\n    int64_t rsi = -0x7d0fac247caa1f32;\n    int64_t r11 = -0x4d64d17db5a6aadc;\n    int64_t r12 = -0x5167a40d34037613;\n    int64_t r10 = -0x73f15afac2b8ed60;\n    int64_t r9 = -0x46074cdd38c5379e;\n    void* rbp = &arg1[0x100];\n    int64_t r8 = 0x647c4677a2884b7c;\n    int64_t rbx = 0x48fe4a0fa5a09315;\n    do\n    {\n        int64_t rsi_1 = (rsi + rax[4]);\n        int64_t rcx_1 = (rcx + rax[7]);\n        int64_t r8_1 = (r8 + (*rax - rsi_1));\n        int64_t rbx_2 = ((rbx + rax[5]) ^ (rcx_1 >> 9));\n        int64_t r9_1 = (r9 + (rax[1] - rbx_2));\n        int64_t r12_2 = ((r12 + rax[6]) ^ (r8_1 << 9));\n        int64_t r10_1 = (r10 + (rax[2] - r12_2));\n        int64_t rcx_3 = ((rcx_1 + r8_1) ^ (r9_1 >> 0x17));\n        int64_t r11_1 = (r11 + (rax[3] - rcx_3));\n        r8 = ((r8_1 + r9_1) ^ (r10_1 << 0xf));\n        int64_t rsi_2 = (rsi_1 - r8);\n        *rax = r8;\n        r9 = ((r9_1 + r10_1) ^ (r11_1 >> 0xe));\n        int64_t rbx_3 = (rbx_2 - r9);\n        rax[1] = r9;\n        r10 = ((r10_1 + r11_1) ^ (rsi_2 << 0x14));\n        int64_t r12_3 = (r12_2 - r10);\n        rax[2] = r10;\n        rax = &rax[8];\n        r11 = ((r11_1 + rsi_2) ^ (rbx_3 >> 0x11));\n        rbx = (rbx_3 + r12_3);\n        rcx = (rcx_3 - r11);\n        rax[-5] = r11;\n        rsi = ((r12_3 << 0xe) ^ (rsi_2 + rbx_3));\n        r12 = (r12_3 + rcx);\n        rax[-3] = rbx;\n        rax[-4] = rsi;\n        rax[-2] = r12;\n        rax[-1] = rcx;\n    } while (rbp != rax);\n    int64_t rax_13;\n    do\n    {\n        int64_t rcx_4 = (rcx + rdx[7]);\n        int64_t rsi_7 = (rsi + rdx[4]);\n        int64_t r8_4 = ((r8 + *rdx) - rsi_7);\n        int64_t rbx_5 = ((rbx + rdx[5]) ^ (rcx_4 >> 9));\n        int64_t r9_4 = ((r9 + rdx[1]) - rbx_5);\n        int64_t r12_5 = ((r12 + rdx[6]) ^ (r8_4 << 9));\n        int64_t r10_4 = ((r10 + rdx[2]) - r12_5);\n        int64_t rcx_6 = ((rcx_4 + r8_4) ^ (r9_4 >> 0x17));\n        int64_t r11_4 = ((r11 + rdx[3]) - rcx_6);\n        r8 = ((r8_4 + r9_4) ^ (r10_4 << 0xf));\n        int64_t rsi_8 = (rsi_7 - r8);\n        *rdx = r8;\n        r9 = ((r9_4 + r10_4) ^ (r11_4 >> 0xe));\n        int64_t rbx_6 = (rbx_5 - r9);\n        rdx[1] = r9;\n        r10 = ((r10_4 + r11_4) ^ (rsi_8 << 0x14));\n        rax_13 = (rsi_8 + rbx_6);\n        int64_t r12_6 = (r12_5 - r10);\n        rdx[2] = r10;\n        rdx = &rdx[8];\n        r11 = ((r11_4 + rsi_8) ^ (rbx_6 >> 0x11));\n        rbx = (rbx_6 + r12_6);\n        rcx = (rcx_6 - r11);\n        rdx[-5] = r11;\n        rsi = ((r12_6 << 0xe) ^ rax_13);\n        r12 = (r12_6 + rcx);\n        rdx[-3] = rbx;\n        rdx[-4] = rsi;\n        rdx[-2] = r12;\n        rdx[-1] = rcx;\n    } while (rbp != rdx);\n    arg1[0x102] = 0;\n    arg1[0x101] = 0;\n    arg1[0x100] = 0;\n    return rax_13;\n}\n\n"
        },
        {
            "funcName": "sub_4102b0",
            "funcStartAddr": "0x4102b0",
            "funcEndAddr": "0x410399",
            "decompiledFuncCode": "void* sub_4102b0(int64_t* arg1)\n{\n    int64_t rdx = arg1[6];\n    int64_t r12 = arg1[5];\n    int64_t rbp_2 = ((rdx - r12) - 1);\n    if (rdx == r12)\n    {\n        arg1[0xd] = (arg1[0xd] | 2);\n    }\n    int64_t rcx = arg1[9];\n    int64_t rdx_1 = arg1[7];\n    int64_t rax_1 = ((rdx + rcx) & (!rcx));\n    int64_t rcx_2 = arg1[4];\n    arg1[6] = rax_1;\n    if ((rax_1 - rcx_2) > (rdx_1 - rcx_2))\n    {\n        arg1[6] = rdx_1;\n        rax_1 = rdx_1;\n    }\n    arg1[5] = rax_1;\n    int64_t* rdx_2 = arg1[0x11];\n    if ((arg1[0x12] - rdx_2) <= 7)\n    {\n        _obstack_newchunk(&arg1[0xe], 8);\n        rdx_2 = arg1[0x11];\n    }\n    *rdx_2 = r12;\n    int64_t* rdx_3 = arg1[0x1c];\n    int64_t rax_4 = arg1[0x1d];\n    arg1[0x11] = (arg1[0x11] + 8);\n    void* rax_5 = (rax_4 - rdx_3);\n    if (rax_5 <= 7)\n    {\n        rax_5 = _obstack_newchunk(&arg1[0x19], 8);\n        rdx_3 = arg1[0x1c];\n    }\n    *rdx_3 = rbp_2;\n    arg1[0x1c] = (arg1[0x1c] + 8);\n    *arg1 = (*arg1 + 1);\n    return rax_5;\n}\n\n"
        },
        {
            "funcName": "sub_4103a0",
            "funcStartAddr": "0x4103a0",
            "funcEndAddr": "0x410407",
            "decompiledFuncCode": "int64_t sub_4103a0(int64_t* arg1)\n{\n    *arg1 = 0;\n    arg1[1] = 0;\n    arg1[2] = 0;\n    _obstack_begin(&arg1[3], 0, 0, 0x402c20, 0x4027e0);\n    _obstack_begin(&arg1[0xe], 0, 0, 0x402c20, 0x4027e0);\n    /* tailcall */\n    return _obstack_begin(&arg1[0x19], 0, 0, 0x402c20, 0x4027e0);\n}\n\n"
        },
        {
            "funcName": "sub_410410",
            "funcStartAddr": "0x410410",
            "funcEndAddr": "0x410439",
            "decompiledFuncCode": "int64_t sub_410410(void* arg1)\n{\n    _obstack_free((arg1 + 0x18), 0);\n    _obstack_free((arg1 + 0x70), 0);\n    /* tailcall */\n    return _obstack_free((arg1 + 0xc8), 0);\n}\n\n"
        },
        {
            "funcName": "sub_410440",
            "funcStartAddr": "0x410440",
            "funcEndAddr": "0x410653",
            "decompiledFuncCode": "int64_t sub_410440(FILE* arg1, int64_t* arg2)\n{\n    int64_t* r12 = &arg2[3];\n    int32_t rax_1;\n    char* rdx_1;\n    do\n    {\n        rax_1 = fgetc(arg1);\n        if (rax_1 == 0xffffffff)\n        {\n            break;\n        }\n        do\n        {\n            rdx_1 = arg2[6];\n            if (arg2[7] != rdx_1)\n            {\n                arg2[6] = &rdx_1[1];\n                *rdx_1 = rax_1;\n                if (rax_1 != 0)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                _obstack_newchunk(r12, 1);\n                char* rdx_2 = arg2[6];\n                arg2[6] = &rdx_2[1];\n                *rdx_2 = rax_1;\n                if (rax_1 != 0)\n                {\n                    break;\n                }\n            }\n            sub_4102b0(arg2);\n            rax_1 = fgetc(arg1);\n        } while (rax_1 != 0xffffffff);\n    } while ((arg2[7] != rdx_1 && rax_1 != 0));\n    char* rax_3 = arg2[6];\n    if (rax_3 != arg2[5])\n    {\n        if (rax_3 == arg2[7])\n        {\n            _obstack_newchunk(&arg2[3], 1);\n            rax_3 = arg2[6];\n        }\n        arg2[6] = &rax_3[1];\n        *rax_3 = 0;\n        sub_4102b0(arg2);\n    }\n    int64_t* rdx_4 = arg2[0x11];\n    if ((arg2[0x12] - rdx_4) <= 7)\n    {\n        _obstack_newchunk(&arg2[0xe], 8);\n        rdx_4 = arg2[0x11];\n    }\n    *rdx_4 = 0;\n    int64_t rsi = arg2[0x10];\n    int64_t rdx_5 = (arg2[0x11] + 8);\n    arg2[0x11] = rdx_5;\n    if (rdx_5 == rsi)\n    {\n        arg2[0x18] = (arg2[0x18] | 2);\n    }\n    int64_t rcx_3 = arg2[0x14];\n    int64_t rdx_6 = arg2[0xf];\n    int64_t rax_8 = ((rdx_5 + rcx_3) & (!rcx_3));\n    int64_t rcx_5 = arg2[0x12];\n    arg2[0x11] = rax_8;\n    if ((rax_8 - rdx_6) > (rcx_5 - rdx_6))\n    {\n        arg2[0x11] = rcx_5;\n        rax_8 = rcx_5;\n    }\n    arg2[1] = rsi;\n    int64_t rdx_7 = arg2[0x1c];\n    int64_t rsi_1 = arg2[0x1b];\n    arg2[0x10] = rax_8;\n    if (rdx_7 == rsi_1)\n    {\n        arg2[0x23] = (arg2[0x23] | 2);\n    }\n    int64_t rcx_6 = arg2[0x1f];\n    int64_t rdx_8 = arg2[0x1a];\n    int64_t rax_10 = ((rdx_7 + rcx_6) & (!rcx_6));\n    int64_t rcx_8 = arg2[0x1d];\n    arg2[0x1c] = rax_10;\n    if ((rax_10 - rdx_8) > (rcx_8 - rdx_8))\n    {\n        arg2[0x1c] = rcx_8;\n        rax_10 = rcx_8;\n    }\n    arg2[0x1b] = rax_10;\n    arg2[2] = rsi_1;\n    int64_t rax_11;\n    rax_11 = ferror(arg1) == 0;\n    return rax_11;\n}\n\n"
        },
        {
            "funcName": "sub_410660",
            "funcStartAddr": "0x410660",
            "funcEndAddr": "0x410674",
            "decompiledFuncCode": "int64_t sub_410660(char* arg1)\n{\n    /* tailcall */\n    return sub_410c20(mkstemp(arg1));\n}\n\n"
        },
        {
            "funcName": "sub_410680",
            "funcStartAddr": "0x410680",
            "funcEndAddr": "0x410692",
            "decompiledFuncCode": "int64_t sub_410680(char* arg1, int32_t arg2)\n{\n    /* tailcall */\n    return sub_413640(mkostemp(arg1, arg2), arg2);\n}\n\n"
        },
        {
            "funcName": "sub_4106a0",
            "funcStartAddr": "0x4106a0",
            "funcEndAddr": "0x410c1e",
            "decompiledFuncCode": "uint64_t sub_4106a0(char* arg1, char* arg2, int32_t arg3, int32_t arg4)\n{\n    char r9_2 = *arg1;\n    char r8 = *arg2;\n    uint64_t rax_12;\n    int64_t rdi;\n    int64_t rax_2;\n    uint32_t rax_9;\n    int32_t rax_17;\n    if (r9_2 != 0x2d)\n    {\n        if (r8 == 0x2d)\n        {\n            uint32_t rax_1;\n            while (true)\n            {\n                arg2 = &arg2[1];\n                rax_1 = *arg2;\n                if (rax_1 != 0x30)\n                {\n                    if (arg4 != rax_1)\n                    {\n                        break;\n                    }\n                }\n            }\n            if (arg3 == rax_1)\n            {\n                do\n                {\n                    char* rsi_1 = &arg2[1];\n                    rax_1 = *rsi_1;\n                    if (rax_1 != 0x30)\n                    {\n                        break;\n                    }\n                    arg2 = &rsi_1[1];\n                    rax_1 = *arg2;\n                } while (rax_1 == 0x30);\n            }\n            rax_2 = 1;\n            if ((rax_1 - 0x30) <= 9)\n            {\n            label_4106e8:\n                return rax_2;\n            }\n            while (true)\n            {\n                if (r9_2 != 0x30)\n                {\n                    rax_9 = r9_2;\n                    if (arg4 != rax_9)\n                    {\n                        break;\n                    }\n                }\n                arg1 = &arg1[1];\n                r9_2 = *arg1;\n            }\n            if (arg3 == rax_9)\n            {\n                char r9_3;\n                do\n                {\n                    arg1 = &arg1[1];\n                    r9_3 = *arg1;\n                } while (r9_3 == 0x30);\n                rax_9 = r9_3;\n            }\n            goto label_4108c4;\n        }\n        uint32_t rax_6;\n        while (true)\n        {\n            if (r9_2 != 0x30)\n            {\n                rax_6 = r9_2;\n                if (arg4 != rax_6)\n                {\n                    break;\n                }\n            }\n            arg1 = &arg1[1];\n            r9_2 = *arg1;\n        }\n        if (r8 != 0x30)\n        {\n            goto label_41078e;\n        }\n        uint32_t r10_3;\n        while (true)\n        {\n            arg2 = &arg2[1];\n            r8 = *arg2;\n            if (r8 != 0x30)\n            {\n            label_41078e:\n                r10_3 = r8;\n                if (arg4 != r10_3)\n                {\n                    break;\n                }\n            }\n        }\n    label_4107a0:\n        if ((r9_2 == r8 && (r10_3 - 0x30) <= 9))\n        {\n        label_4107c0:\n            arg1 = &arg1[1];\n            rax_6 = *arg1;\n            if (arg4 != rax_6)\n            {\n            label_4107d0:\n                arg2 = &arg2[1];\n                r10_3 = *arg2;\n                if (arg4 == r10_3)\n                {\n                    arg2 = &arg2[1];\n                    r10_3 = *arg2;\n                }\n            }\n        }\n        int32_t r8_4;\n        if ((arg3 != rax_6 || (arg3 == rax_6 && (r10_3 - 0x30) <= 9)))\n        {\n            r8_4 = (rax_6 - 0x30);\n            int64_t r8_5;\n            int32_t r10_5;\n            if (arg3 != r10_3)\n            {\n                rax_12 = (rax_6 - r10_3);\n                r10_5 = (r10_3 - 0x30);\n                if (r8_4 > 9)\n                {\n                    r8_5 = 0;\n                    if (r10_5 > 9)\n                    {\n                        goto label_410aff;\n                    }\n                label_410941:\n                    rdi = 0;\n                label_410948:\n                    arg2 = &arg2[1];\n                    uint32_t rdx_2 = *arg2;\n                    if (arg4 == rdx_2)\n                    {\n                        goto label_410948;\n                    }\n                    rdi = (rdi + 1);\n                    if ((rdx_2 - 0x30) <= 9)\n                    {\n                        goto label_410948;\n                    }\n                    if (rdi != r8_5)\n                    {\n                        return ((rax_12 - rax_12) | 1);\n                    }\n                }\n            }\n            if ((arg3 == r10_3 && r8_4 <= 9))\n            {\n                rax_12 = (rax_6 - arg3);\n                r10_5 = (arg3 - 0x30);\n            }\n            if (((arg3 == r10_3 && r8_4 <= 9) || (arg3 != r10_3 && r8_4 <= 9)))\n            {\n                r8_5 = 0;\n            label_410920:\n                arg1 = &arg1[1];\n                uint32_t rdx = *arg1;\n                if (arg4 == rdx)\n                {\n                    goto label_410920;\n                }\n                r8_5 = (r8_5 + 1);\n                if ((rdx - 0x30) <= 9)\n                {\n                    goto label_410920;\n                }\n                if (r10_5 > 9)\n                {\n                    int64_t rax_24;\n                    rax_24 = r8_5 != 0;\n                    return rax_24;\n                }\n                goto label_410941;\n            }\n        }\n        if (((arg3 == rax_6 && (r10_3 - 0x30) > 9) || (((arg3 != rax_6 || (arg3 == rax_6 && (r10_3 - 0x30) <= 9)) && arg3 == r10_3) && r8_4 > 9)))\n        {\n            char r8_9 = *arg2;\n            char* rax_16;\n            char rdx_8;\n            if (arg3 == *arg1)\n            {\n                int32_t rcx_1 = arg1[1];\n                int32_t r8_10;\n                if (arg3 != r8_9)\n                {\n                    arg1 = &arg1[1];\n                }\n                else\n                {\n                label_410b5a:\n                    arg2 = &arg2[1];\n                    rdx_8 = *arg2;\n                    int32_t rax_31 = rcx_1;\n                    arg1 = &arg1[1];\n                    r8_10 = (rax_31 - 0x30);\n                    if (rdx_8 != rcx_1)\n                    {\n                        int32_t r9_4 = rdx_8;\n                        int32_t r10_7 = (r9_4 - 0x30);\n                        if (r8_10 > 9)\n                        {\n                            rax_2 = 0;\n                            if (r10_7 > 9)\n                            {\n                                goto label_4106e8;\n                            }\n                            rax_16 = arg2;\n                        }\n                        else if (r10_7 <= 9)\n                        {\n                            return (rax_31 - r9_4);\n                        }\n                    }\n                }\n                if ((arg3 != r8_9 || ((arg3 == r8_9 && rdx_8 != rcx_1) && r8_10 <= 9)))\n                {\n                label_410b37:\n                    if (rcx_1 != 0x30)\n                    {\n                        int64_t rax_30;\n                        rax_30 = (rcx_1 - 0x30) <= 9;\n                        return rax_30;\n                    }\n                    arg1 = &arg1[1];\n                    rcx_1 = *arg1;\n                    goto label_410b37;\n                }\n                if ((arg3 == r8_9 && rdx_8 == rcx_1))\n                {\n                    if (r8_10 > 9)\n                    {\n                        goto label_410aff;\n                    }\n                    rcx_1 = arg1[1];\n                    goto label_410b5a;\n                }\n            }\n            else\n            {\n                rax_2 = 0;\n                if (arg3 != r8_9)\n                {\n                    goto label_4106e8;\n                }\n                rax_16 = &arg2[1];\n                rdx_8 = arg2[1];\n            }\n        label_410a57:\n            if (rdx_8 == 0x30)\n            {\n                rax_16 = &rax_16[1];\n                rdx_8 = *rax_16;\n                goto label_410a57;\n            }\n            rax_17 = rdx_8;\n        label_410a65:\n            int32_t rax_18;\n            rax_18 = (rax_17 - 0x30) <= 9;\n            return (-rax_18);\n        }\n    }\n    else\n    {\n        char rax_3;\n        uint32_t r9;\n        while (true)\n        {\n            arg1 = &arg1[1];\n            rax_3 = *arg1;\n            if (rax_3 != 0x30)\n            {\n                r9 = rax_3;\n                if (arg4 != r9)\n                {\n                    break;\n                }\n            }\n        }\n        if (r8 != 0x2d)\n        {\n            if (arg3 == r9)\n            {\n                char rax_8;\n                do\n                {\n                    arg1 = &arg1[1];\n                    rax_8 = *arg1;\n                } while (rax_8 == 0x30);\n                r9 = rax_8;\n            }\n            if ((r9 - 0x30) <= 9)\n            {\n                return 0xffffffff;\n            }\n            while (true)\n            {\n                if (r8 != 0x30)\n                {\n                    uint32_t r10_1 = r8;\n                    if (arg4 != r10_1)\n                    {\n                        if (arg3 == r10_1)\n                        {\n                            char r8_3;\n                            do\n                            {\n                                arg2 = &arg2[1];\n                                r8_3 = *arg2;\n                            } while (r8_3 == 0x30);\n                            r10_1 = r8_3;\n                        }\n                        int32_t rax_4;\n                        rax_4 = (r10_1 - 0x30) <= 9;\n                        return (-rax_4);\n                    }\n                }\n                arg2 = &arg2[1];\n                r8 = *arg2;\n            }\n        }\n        else\n        {\n            char r8_2;\n            uint32_t r10_4;\n            while (true)\n            {\n                arg2 = &arg2[1];\n                r8_2 = *arg2;\n                if (r8_2 != 0x30)\n                {\n                    r10_4 = r8_2;\n                    if (arg4 != r10_4)\n                    {\n                        break;\n                    }\n                }\n            }\n            while (rax_3 == r8_2)\n            {\n                if ((r10_4 - 0x30) > 9)\n                {\n                    break;\n                }\n                do\n                {\n                    arg1 = &arg1[1];\n                    r9 = *arg1;\n                    rax_3 = r9;\n                } while (arg4 == r9);\n                do\n                {\n                    arg2 = &arg2[1];\n                    r10_4 = *arg2;\n                    r8_2 = r10_4;\n                    if (arg4 != r10_4)\n                    {\n                        break;\n                    }\n                    arg2 = &arg2[1];\n                    r10_4 = *arg2;\n                    r8_2 = r10_4;\n                } while (arg4 == r10_4);\n            }\n            if ((arg3 == r9 && (r10_4 - 0x30) > 9))\n            {\n            label_410abd:\n                char rcx = *arg1;\n                if (arg3 == *arg2)\n                {\n                    if (arg3 != rcx)\n                    {\n                        do\n                        {\n                            arg2 = &arg2[1];\n                        label_410bb4:\n                            rax_9 = *arg2;\n                        } while (rax_9 == 0x30);\n                    label_4108c4:\n                        int32_t rax_10;\n                        rax_10 = (rax_9 - 0x30) <= 9;\n                        return rax_10;\n                    }\n                    int32_t rax_33;\n                    int32_t rcx_3;\n                    int32_t r8_11;\n                    while (true)\n                    {\n                        arg2 = &arg2[1];\n                        arg1 = &arg1[1];\n                        rax_33 = *arg2;\n                        rcx_3 = *arg1;\n                        r8_11 = (rax_33 - 0x30);\n                        if (rax_33 != rcx_3)\n                        {\n                            break;\n                        }\n                        if (r8_11 > 9)\n                        {\n                            return 0;\n                        }\n                    }\n                    int32_t rdx_9 = (rcx_3 - 0x30);\n                    if (r8_11 <= 9)\n                    {\n                        if (rdx_9 <= 9)\n                        {\n                            return (rax_33 - rcx_3);\n                        }\n                        goto label_410bb4;\n                    }\n                    if (rdx_9 > 9)\n                    {\n                        return 0;\n                    }\n                    while (true)\n                    {\n                        rax_17 = *arg1;\n                        if (rax_17 != 0x30)\n                        {\n                            break;\n                        }\n                    label_410ad8:\n                        arg1 = &arg1[1];\n                    }\n                    goto label_410a65;\n                }\n                rax_2 = 0;\n                if (arg3 == rcx)\n                {\n                    goto label_410ad8;\n                }\n                goto label_4106e8;\n            }\n            int32_t r8_6 = (r9 - 0x30);\n            int64_t r8_7;\n            int32_t r10_6;\n            if (arg3 != r10_4)\n            {\n                r10_6 = (r10_4 - 0x30);\n                rax_12 = (r10_4 - r9);\n                if (r8_6 > 9)\n                {\n                    r8_7 = 0;\n                    if (r10_6 > 9)\n                    {\n                    label_410aff:\n                        return 0;\n                    }\n                }\n            }\n            else\n            {\n                if (r8_6 > 9)\n                {\n                    goto label_410abd;\n                }\n                r10_6 = (arg3 - 0x30);\n                rax_12 = (arg3 - r9);\n            }\n            if (((arg3 != r10_4 && r8_6 <= 9) || arg3 == r10_4))\n            {\n                r8_7 = 0;\n                while (true)\n                {\n                    arg1 = &arg1[1];\n                    uint32_t rdx_4 = *arg1;\n                    if (arg4 != rdx_4)\n                    {\n                        r8_7 = (r8_7 + 1);\n                        if ((rdx_4 - 0x30) > 9)\n                        {\n                            break;\n                        }\n                    }\n                }\n                if (r10_6 > 9)\n                {\n                    int32_t rax_25;\n                    rax_25 = r8_7 != 0;\n                    return (-rax_25);\n                }\n            }\n            rdi = 0;\n            while (true)\n            {\n                arg2 = &arg2[1];\n                uint32_t rdx_6 = *arg2;\n                if (arg4 != rdx_6)\n                {\n                    rdi = (rdi + 1);\n                    if ((rdx_6 - 0x30) > 9)\n                    {\n                        break;\n                    }\n                }\n            }\n            if (rdi != r8_7)\n            {\n                return (((rax_12 - rax_12) & 2) - 1);\n            }\n        }\n    }\n    if (rdi != 0)\n    {\n        goto label_4109fb;\n    }\n    rax_12 = 0;\nlabel_4109fb:\n    return rax_12;\n}\n\n"
        },
        {
            "funcName": "sub_410c20",
            "funcStartAddr": "0x410c20",
            "funcEndAddr": "0x410c6e",
            "decompiledFuncCode": "uint64_t sub_410c20(int32_t arg1)\n{\n    if (arg1 <= 2)\n    {\n        int32_t rax_1 = sub_413ea0(arg1);\n        int32_t* rax_2 = __errno_location();\n        int32_t r13 = *rax_2;\n        close(arg1);\n        *rax_2 = r13;\n        return rax_1;\n    }\n    return arg1;\n}\n\n"
        },
        {
            "funcName": "sub_410c70",
            "funcStartAddr": "0x402f32",
            "funcEndAddr": "0x41104d",
            "decompiledFuncCode": "int64_t sub_410c70(FILE* arg1, int64_t arg2, int64_t arg3, int64_t arg4, \n    int64_t* arg5, int64_t arg6)\n{\n    if (arg2 == 0)\n    {\n        __fprintf_chk();\n    }\n    else\n    {\n        __fprintf_chk();\n    }\n    __fprintf_chk(arg1, 1, \"Copyright %s %d Free Software Fo\u2026\", dcgettext(nullptr, &data_4179da, 5), 0x7e1);\n    fputs_unlocked(dcgettext(nullptr, \"\\nLicense GPLv3+: GNU GPL versio\u2026\", 5), arg1);\n    int64_t var_58;\n    int64_t var_50_1;\n    int64_t var_48;\n    int64_t var_40;\n    char* rax_6;\n    int64_t rbx_1;\n    char* rsi_1;\n    int64_t r12_1;\n    int64_t r13;\n    int64_t r14;\n    int64_t r15_1;\n    switch (arg6)\n    {\n        case 0:\n        {\n            abort();\n            /* no return */\n        }\n        case 8:\n        {\n            r13 = arg5[6];\n            r12_1 = arg5[5];\n            r15_1 = arg5[4];\n            var_48 = arg5[7];\n            r14 = arg5[3];\n            rbx_1 = *arg5;\n            var_58 = arg5[2];\n            var_50_1 = arg5[1];\n            rax_6 = dcgettext(nullptr, \"Written by %s, %s, %s,\\n%s, %s, \u2026\", 5);\n            break;\n        }\n        case 9:\n        {\n            rsi_1 = \"Written by %s, %s, %s,\\n%s, %s, \u2026\";\n            r13 = arg5[6];\n            r12_1 = arg5[5];\n            var_40 = arg5[8];\n            r15_1 = arg5[4];\n            r14 = arg5[3];\n            var_48 = arg5[7];\n            var_58 = arg5[2];\n            rbx_1 = *arg5;\n            var_50_1 = arg5[1];\n            break;\n        }\n        default:\n            rsi_1 = \"Written by %s, %s, %s,\\n%s, %s, \u2026\";\n            r13 = arg5[6];\n            r12_1 = arg5[5];\n            var_40 = arg5[8];\n            r15_1 = arg5[4];\n            r14 = arg5[3];\n            var_48 = arg5[7];\n            var_58 = arg5[2];\n            rbx_1 = *arg5;\n            var_50_1 = arg5[1];\n    }\n    int64_t var_60;\n    if ((arg6 > 9 || arg6 == 9))\n    {\n        rax_6 = dcgettext(nullptr, rsi_1, 5);\n        var_60 = var_40;\n    }\n    int64_t var_78_1;\n    int64_t var_70_1;\n    int64_t var_68_2;\n    int64_t var_58_1;\n    int64_t var_50;\n    char* rax_19;\n    char* rax_22;\n    int64_t rbx_5;\n    int64_t rbx_6;\n    int64_t r9_9;\n    int64_t r12_4;\n    int64_t r13_2;\n    int64_t r14_1;\n    switch (arg6)\n    {\n        case 1:\n        {\n            /* tailcall */\n            return __fprintf_chk(arg1, 1, dcgettext(nullptr, \"Written by %s.\\n\", 5), *arg5);\n            break;\n        }\n        case 2:\n        {\n            /* tailcall */\n            return __fprintf_chk(arg1, 1, dcgettext(nullptr, \"Written by %s and %s.\\n\", 5), *arg5, arg5[1]);\n            break;\n        }\n        case 3:\n        {\n            /* tailcall */\n            return __fprintf_chk(arg1, 1, dcgettext(nullptr, \"Written by %s, %s, and %s.\\n\", 5), *arg5, arg5[1], arg5[2]);\n            break;\n        }\n        case 4:\n        {\n            r14_1 = arg5[3];\n            r13_2 = arg5[2];\n            r12_4 = arg5[1];\n            rbx_5 = *arg5;\n            rax_19 = dcgettext(nullptr, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n            break;\n        }\n        case 5:\n        {\n            int64_t r15_2 = arg5[4];\n            r14_1 = arg5[3];\n            r13_2 = arg5[2];\n            r12_4 = arg5[1];\n            rbx_5 = *arg5;\n            rax_19 = dcgettext(nullptr, \"Written by %s, %s, %s,\\n%s, and \u2026\", 5);\n            var_60 = r15_2;\n            break;\n        }\n        case 6:\n        {\n            int64_t r12_5 = arg5[5];\n            int64_t r15_3 = arg5[4];\n            int64_t r14_2 = arg5[3];\n            var_58_1 = arg5[1];\n            int64_t r13_3 = arg5[2];\n            rbx_6 = *arg5;\n            rax_22 = dcgettext(nullptr, \"Written by %s, %s, %s,\\n%s, %s, \u2026\", 5);\n            r9_9 = r13_3;\n            var_68_2 = r12_5;\n            var_70_1 = r15_3;\n            var_78_1 = r14_2;\n            break;\n        }\n        case 7:\n        {\n            int64_t r13_4 = arg5[6];\n            int64_t r12_6 = arg5[5];\n            int64_t r15_4 = arg5[4];\n            int64_t r14_3 = arg5[3];\n            var_50 = arg5[2];\n            rbx_6 = *arg5;\n            var_58_1 = arg5[1];\n            rax_22 = dcgettext(nullptr, \"Written by %s, %s, %s,\\n%s, %s, \u2026\", 5);\n            var_60 = r13_4;\n            var_68_2 = r12_6;\n            var_70_1 = r15_4;\n            var_78_1 = r14_3;\n            r9_9 = var_50;\n            break;\n        }\n        default:\n            return __fprintf_chk(arg1, 1, rax_6, rbx_1, var_50_1, var_58, r14, r15_1, r12_1, r13, var_48, var_60, var_58, var_50_1, var_48, var_40);\n    }\n    if ((arg6 == 4 || arg6 == 5))\n    {\n        __fprintf_chk(arg1, 1, rax_19, rbx_5, r12_4, r13_2, r14_1, var_60);\n        return r14_1;\n    }\n    else if ((arg6 == 6 || arg6 == 7))\n    {\n        return __fprintf_chk(arg1, 1, rax_22, rbx_6, var_58_1, r9_9, var_78_1, var_70_1, var_68_2, var_60, var_58_1, var_50);\n    }\n}\n\n"
        },
        {
            "funcName": "sub_411050",
            "funcStartAddr": "0x411050",
            "funcEndAddr": "0x411070",
            "decompiledFuncCode": "int64_t sub_411050(FILE* arg1, int64_t arg2, int64_t arg3, int64_t arg4, \n    int64_t* arg5)\n{\n    int64_t r9 = 0;\n    if (*arg5 != 0)\n    {\n        do\n        {\n            r9 = (r9 + 1);\n        } while (arg5[r9] != 0);\n    }\n    /* tailcall */\n    return sub_410c70(arg1, arg2, arg3, arg4, arg5, r9);\n}\n\n"
        },
        {
            "funcName": "sub_411070",
            "funcStartAddr": "0x411070",
            "funcEndAddr": "0x4110d0",
            "decompiledFuncCode": "int64_t sub_411070(FILE* arg1, int64_t arg2, int64_t arg3, int64_t arg4, \n    int32_t* arg5)\n{\n    int64_t r9 = 0;\n    void var_58;\n    do\n    {\n        int32_t rax_3 = *arg5;\n        if (rax_3 <= 0x2f)\n        {\n            int64_t* r10_2 = (rax_3 + *(arg5 + 0x10));\n            *arg5 = (rax_3 + 8);\n            int64_t rax_2 = *r10_2;\n            *(&var_58 + (r9 << 3)) = rax_2;\n            if (rax_2 == 0)\n            {\n                break;\n            }\n        }\n        else\n        {\n            int64_t* r10_3 = *(arg5 + 8);\n            *(arg5 + 8) = &r10_3[1];\n            int64_t rax_5 = *r10_3;\n            *(&var_58 + (r9 << 3)) = rax_5;\n            if (rax_5 == 0)\n            {\n                break;\n            }\n        }\n        r9 = (r9 + 1);\n    } while (r9 != 0xa);\n    return sub_410c70(arg1, arg2, arg3, arg4, &var_58, r9);\n}\n\n"
        },
        {
            "funcName": "sub_4110d0",
            "funcStartAddr": "0x4110d0",
            "funcEndAddr": "0x41118c",
            "decompiledFuncCode": "int64_t sub_4110d0(FILE* arg1, int64_t arg2, int64_t arg3, int64_t arg4)\n{\n    char r11 = 0;\n    int64_t r8;\n    int64_t var_18 = r8;\n    void* r10 = &arg_8;\n    int32_t r8_1 = 0x20;\n    void* var_98 = &arg_8;\n    int64_t r9;\n    int64_t var_10 = r9;\n    int64_t r9_1 = 0;\n    int32_t var_a0 = 0x20;\n    void var_38;\n    void* var_90 = &var_38;\n    void var_88;\n    do\n    {\n        if (r8_1 <= 0x2f)\n        {\n            uint64_t rax_1 = r8_1;\n            r8_1 = (r8_1 + 8);\n            r11 = 1;\n            int64_t rax_3 = *(rax_1 + &var_38);\n            *(&var_88 + (r9_1 << 3)) = rax_3;\n            if (rax_3 == 0)\n            {\n                break;\n            }\n        }\n        else\n        {\n            void* rax_4 = r10;\n            r10 = (r10 + 8);\n            int64_t rax_5 = *rax_4;\n            *(&var_88 + (r9_1 << 3)) = rax_5;\n            if (rax_5 == 0)\n            {\n                break;\n            }\n        }\n        r9_1 = (r9_1 + 1);\n    } while (r9_1 != 0xa);\n    if (r11 != 0)\n    {\n        int32_t var_a0_1 = r8_1;\n    }\n    return sub_410c70(arg1, arg2, arg3, arg4, &var_88, r9_1);\n}\n\n"
        },
        {
            "funcName": "sub_411190",
            "funcStartAddr": "0x411190",
            "funcEndAddr": "0x411204",
            "decompiledFuncCode": "int64_t sub_411190()\n{\n    __printf_chk(1, dcgettext(nullptr, \"\\nReport bugs to: %s\\n\", 5), \"bug-coreutils@gnu.org\");\n    __printf_chk(1, dcgettext(nullptr, \"%s home page: <%s>\\n\", 5), \"GNU coreutils\", \"https://www.gnu.org/software/cor\u2026\");\n    /* tailcall */\n    return fputs_unlocked(dcgettext(nullptr, \"General help using GNU software:\u2026\", 5), stdout);\n}\n\n"
        },
        {
            "funcName": "sub_411210",
            "funcStartAddr": "0x411210",
            "funcEndAddr": "0x41122a",
            "decompiledFuncCode": "int64_t sub_411210(size_t arg1)\n{\n    int64_t rax = malloc(arg1);\n    if ((rax == 0 && arg1 != 0))\n    {\n        sub_411460();\n        /* no return */\n    }\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_411230",
            "funcStartAddr": "0x411230",
            "funcEndAddr": "0x411251",
            "decompiledFuncCode": "int64_t sub_411230(int64_t arg1, int64_t arg2)\n{\n    uint64_t rax;\n    int64_t rdx;\n    rdx = HIGHD((arg1 * arg2));\n    rax = LOWD((arg1 * arg2));\n    size_t rdi = rax;\n    rax = ((arg1 * arg2) >> 0x40) != 0;\n    if (rdi >= 0)\n    {\n        rax = rax;\n        if (rax == 0)\n        {\n            /* tailcall */\n            return sub_411210(rdi);\n        }\n    }\n    uint64_t var_8 = rax;\n    sub_411460();\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_411270",
            "funcStartAddr": "0x411270",
            "funcEndAddr": "0x4112a6",
            "decompiledFuncCode": "int64_t sub_411270(int64_t arg1, size_t arg2)\n{\n    if ((arg2 == 0 && arg1 != 0))\n    {\n        free(arg1);\n        return 0;\n    }\n    int64_t rax = realloc(arg1, arg2);\n    if ((rax == 0 && arg2 != 0))\n    {\n        sub_411460();\n        /* no return */\n    }\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_4113ba",
            "funcStartAddr": "0x4113ba",
            "funcEndAddr": "0x4113c0",
            "decompiledFuncCode": "int64_t sub_4113ba() __noreturn\n{\n    sub_411460();\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_4113c0",
            "funcStartAddr": "0x4113c0",
            "funcEndAddr": "0x4113d7",
            "decompiledFuncCode": "int64_t sub_4113c0(size_t arg1)\n{\n    /* tailcall */\n    return memset(sub_411210(arg1), 0, arg1);\n}\n\n"
        },
        {
            "funcName": "sub_4113e0",
            "funcStartAddr": "0x4113e0",
            "funcEndAddr": "0x41140e",
            "decompiledFuncCode": "int64_t sub_4113e0(size_t arg1, size_t arg2)\n{\n    int64_t rax;\n    bool rdx;\n    rdx = HIGHD((arg1 * arg2));\n    rax = LOWD((arg1 * arg2));\n    if ((rax >= 0 && ((arg1 * arg2) >> 0x40) != 0 == 0))\n    {\n        int64_t rax_1 = calloc(arg1, arg2);\n        if (rax_1 != 0)\n        {\n            return rax_1;\n        }\n    }\n    sub_411460();\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_411410",
            "funcStartAddr": "0x411410",
            "funcEndAddr": "0x411438",
            "decompiledFuncCode": "int64_t sub_411410(int64_t arg1, size_t arg2)\n{\n    /* tailcall */\n    return memcpy(sub_411210(arg2), arg1, arg2);\n}\n\n"
        },
        {
            "funcName": "sub_411440",
            "funcStartAddr": "0x411440",
            "funcEndAddr": "0x411453",
            "decompiledFuncCode": "int64_t sub_411440(char* arg1)\n{\n    /* tailcall */\n    return sub_411410(arg1, (strlen(arg1) + 1));\n}\n\n"
        },
        {
            "funcName": "sub_411460",
            "funcStartAddr": "0x411460",
            "funcEndAddr": "0x411491",
            "decompiledFuncCode": "int64_t sub_411460() __noreturn\n{\n    error(data_61c518, 0, \"%s\", dcgettext(nullptr, \"memory exhausted\", 5));\n    abort();\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_4114a0",
            "funcStartAddr": "0x4114a0",
            "funcEndAddr": "0x411554",
            "decompiledFuncCode": "int64_t sub_4114a0(int32_t arg1, uint64_t arg2, uint64_t arg3, uint64_t arg4, \n    uint64_t arg5)\n{\n    error(0, arg1, dcgettext(nullptr, \"string comparison failed\", 5));\n    error(0, 0, dcgettext(nullptr, \"Set LC_ALL='C' to work around th\u2026\", 5));\n    /* tailcall */\n    return error(data_61c518, 0, dcgettext(nullptr, \"The strings compared were %s and\u2026\", 5), sub_40f5c0(0, 8, arg2, arg3), sub_40f5c0(1, 8, arg4, arg5));\n}\n\n"
        },
        {
            "funcName": "sub_411560",
            "funcStartAddr": "0x411560",
            "funcEndAddr": "0x4115b5",
            "decompiledFuncCode": "uint64_t sub_411560(char* arg1, uint64_t arg2, char* arg3, uint64_t arg4)\n{\n    uint64_t rbx = arg1;\n    int32_t rax = sub_413d80(arg1, arg2, arg3, arg4);\n    int32_t rdi = *__errno_location();\n    if (rdi != 0)\n    {\n        sub_4114a0(rdi, rbx, arg2, arg3, arg4);\n        return rax;\n    }\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_4115c0",
            "funcStartAddr": "0x4115c0",
            "funcEndAddr": "0x411617",
            "decompiledFuncCode": "uint64_t sub_4115c0(char* arg1, uint64_t arg2, char* arg3, int64_t arg4)\n{\n    uint64_t rbp = arg1;\n    int32_t rax = sub_413e30(arg1, arg2, arg3, arg4);\n    int32_t rdi = *__errno_location();\n    if (rdi != 0)\n    {\n        sub_4114a0(rdi, rbp, (arg2 - 1), arg3, (arg4 - 1));\n        return rax;\n    }\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_411620",
            "funcStartAddr": "0x411620",
            "funcEndAddr": "0x411673",
            "decompiledFuncCode": "int64_t sub_411620()\n{\n    int64_t rax;\n    int64_t rdx;\n    double zmm0;\n    rax = sub_413580(zmm0);\n    int64_t var_18 = rax;\n    int64_t var_10 = rdx;\n    int32_t* rax_1 = __errno_location();\n    do\n    {\n        *rax_1 = 0;\n        int64_t rax_2 = sub_413140(&var_18, nullptr);\n        if (rax_2 == 0)\n        {\n            return rax_2;\n        }\n    } while ((*rax_1 & 0xfffffffb) == 0);\n    return 0xffffffff;\n}\n\n"
        },
        {
            "funcName": "sub_411680",
            "funcStartAddr": "0x411680",
            "funcEndAddr": "0x411aa4",
            "decompiledFuncCode": "uint64_t sub_411680(char* arg1, int64_t* arg2, int32_t arg3, uint64_t* arg4, \n    char* arg5)\n{\n    if (arg3 > 0x24)\n    {\n        __assert_fail(\"0 <= strtol_base && strtol_base \u2026\", \"lib/xstrtol.c\", 0x60, \"xstrtoul\");\n        /* no return */\n    }\n    int64_t* r15 = arg2;\n    void var_40;\n    if (arg2 == 0)\n    {\n        r15 = &var_40;\n    }\n    int32_t* rax = __errno_location();\n    *rax = 0;\n    char rbx = *arg1;\n    uint16_t* rsi = *__ctype_b_loc();\n    char* rax_2 = arg1;\n    while ((*(&rsi[rbx] + 1) & 0x20) != 0)\n    {\n        rax_2 = &rax_2[1];\n        rbx = *rax_2;\n    }\n    int32_t rbp_1;\n    if (rbx == 0x2d)\n    {\n    label_411742:\n        rbp_1 = 4;\n    }\n    else\n    {\n        char* r8 = *r15;\n        uint64_t rbx_1 = strtoul(arg1, r15, arg3);\n        int32_t var_58;\n        void* r8_1;\n        uint32_t r12_1;\n        if (r8 == arg1)\n        {\n            var_58 = r8;\n            if (arg5 == 0)\n            {\n                goto label_411742;\n            }\n            r12_1 = *arg1;\n            if (r12_1 == 0)\n            {\n                goto label_411742;\n            }\n            rbp_1 = 0;\n            rbx_1 = 1;\n            r8_1 = var_58;\n            if (strchr(arg5, r12_1) == 0)\n            {\n                goto label_411742;\n            }\n        label_41177f:\n            uint64_t rdx_1 = (r12_1 - 0x45);\n            int64_t rdx_3;\n            int32_t rsi_3;\n            if (rdx_1 <= 0x2f)\n            {\n                var_58 = rdx_1;\n                if ((!(TEST_BITQ(0x814400308945, rdx_1))))\n                {\n                    goto label_4117e0;\n                }\n                if (strchr(arg5, 0x30) == 0)\n                {\n                    goto label_4117e0;\n                }\n                char rax_8 = *(r8_1 + 1);\n                if (rax_8 == 0x44)\n                {\n                label_411a08:\n                    rsi_3 = 2;\n                    rdx_3 = 0x3e8;\n                    goto label_4117ea;\n                }\n                if (rax_8 == 0x69)\n                {\n                    rdx_3 = 0x400;\n                    int32_t rsi_6;\n                    rsi_6 = *(r8_1 + 2) == 0x42;\n                    rsi_3 = ((rsi_6 + rsi_6) + 1);\n                    goto label_4117ea;\n                }\n                uint64_t rdx_2 = var_58;\n                if (rax_8 == 0x42)\n                {\n                    goto label_411a08;\n                }\n                int32_t r9_1;\n                switch (rdx_2)\n                {\n                    case 0:\n                    {\n                        rsi_3 = 1;\n                        rdx_3 = 0x400;\n                    label_41198b:\n                        int64_t rcx_6 = rdx_3;\n                        int32_t rdi_8 = 6;\n                        r9_1 = 0;\n                        int32_t temp15_1;\n                        do\n                        {\n                            uint64_t rax_28;\n                            int64_t rdx_11;\n                            rdx_11 = HIGHD((rbx_1 * rcx_6));\n                            rax_28 = LOWD((rbx_1 * rcx_6));\n                            bool o_8 = ((rbx_1 * rcx_6) >> 0x40) != 0;\n                            rbx_1 = rax_28;\n                            if (o_8)\n                            {\n                                r9_1 = 1;\n                                rbx_1 = -1;\n                            }\n                            temp15_1 = rdi_8;\n                            rdi_8 = (rdi_8 - 1);\n                        } while (temp15_1 != 1);\n                        goto label_4118e4;\n                    }\n                    case 1:\n                    case 3:\n                    case 4:\n                    case 5:\n                    case 7:\n                    case 9:\n                    case 0xa:\n                    case 0xc:\n                    case 0xd:\n                    case 0xe:\n                    case 0x10:\n                    case 0x11:\n                    case 0x12:\n                    case 0x13:\n                    case 0x16:\n                    case 0x17:\n                    case 0x18:\n                    case 0x19:\n                    case 0x1a:\n                    case 0x1b:\n                    case 0x1c:\n                    case 0x1f:\n                    case 0x20:\n                    case 0x21:\n                    case 0x23:\n                    case 0x24:\n                    case 0x25:\n                    case 0x27:\n                    case 0x29:\n                    case 0x2a:\n                    case 0x2b:\n                    case 0x2c:\n                    case 0x2d:\n                    case 0x2e:\n                    {\n                        goto label_411885;\n                    }\n                    case 2:\n                    case 0x22:\n                    {\n                        rsi_3 = 1;\n                        rdx_3 = 0x400;\n                    label_4119c3:\n                        int64_t rcx_7 = rdx_3;\n                        int64_t rax_30;\n                        int64_t rdx_12;\n                        rdx_12 = HIGHD((rbx_1 * rcx_7));\n                        rax_30 = LOWD((rbx_1 * rcx_7));\n                        int64_t rax_31;\n                        if (((rbx_1 * rcx_7) >> 0x40) == 0)\n                        {\n                            int64_t rdx_13;\n                            rdx_13 = HIGHD((rax_30 * rcx_7));\n                            rax_31 = LOWD((rax_30 * rcx_7));\n                            if (((rax_30 * rcx_7) >> 0x40) == 0)\n                            {\n                                uint64_t rax_32;\n                                int64_t rdx_14;\n                                rdx_14 = HIGHD((rax_31 * rcx_7));\n                                rax_32 = LOWD((rax_31 * rcx_7));\n                                if (((rax_31 * rcx_7) >> 0x40) == 0)\n                                {\n                                    rbx_1 = rax_32;\n                                    rbp_1 = (rbp_1 | 0);\n                                }\n                            }\n                        }\n                        if (((((rbx_1 * rcx_7) >> 0x40) != 0 || (((rbx_1 * rcx_7) >> 0x40) == 0 && ((rax_30 * rcx_7) >> 0x40) != 0)) || ((((rbx_1 * rcx_7) >> 0x40) == 0 && ((rax_30 * rcx_7) >> 0x40) == 0) && ((rax_31 * rcx_7) >> 0x40) != 0)))\n                        {\n                            rbx_1 = -1;\n                            rbp_1 = (rbp_1 | 1);\n                        }\n                        goto label_41182d;\n                    }\n                    case 6:\n                    case 0x26:\n                    {\n                        rsi_3 = 1;\n                        rdx_3 = 0x400;\n                    label_41184f:\n                        uint64_t rax_15;\n                        int64_t rdx_6;\n                        rdx_6 = HIGHD((rbx_1 * rdx_3));\n                        rax_15 = LOWD((rbx_1 * rdx_3));\n                        bool o_3 = ((rbx_1 * rdx_3) >> 0x40) != 0;\n                        rbx_1 = rax_15;\n                        if ((!o_3))\n                        {\n                            goto label_41182d;\n                        }\n                        goto label_411857;\n                    }\n                    case 8:\n                    case 0x28:\n                    {\n                        rsi_3 = 1;\n                        rdx_3 = 0x400;\n                    label_41180e:\n                        int64_t rcx_1 = rdx_3;\n                        int64_t rax_10;\n                        int64_t rdx_4;\n                        rdx_4 = HIGHD((rbx_1 * rcx_1));\n                        rax_10 = LOWD((rbx_1 * rcx_1));\n                        if (((rbx_1 * rcx_1) >> 0x40) == 0)\n                        {\n                            uint64_t rax_11;\n                            int64_t rdx_5;\n                            rdx_5 = HIGHD((rax_10 * rcx_1));\n                            rax_11 = LOWD((rax_10 * rcx_1));\n                            if (((rax_10 * rcx_1) >> 0x40) != 0)\n                            {\n                                goto label_411857;\n                            }\n                            rbx_1 = rax_11;\n                            goto label_41182d;\n                        }\n                    label_411857:\n                        rbp_1 = 1;\n                        rbx_1 = -1;\n                        goto label_41182d;\n                    }\n                    case 0xb:\n                    {\n                        rsi_3 = 1;\n                        rdx_3 = 0x400;\n                    label_411958:\n                        int64_t rcx_5 = rdx_3;\n                        int32_t rdi_7 = 5;\n                        r9_1 = 0;\n                        int32_t temp14_1;\n                        do\n                        {\n                            uint64_t rax_26;\n                            int64_t rdx_10;\n                            rdx_10 = HIGHD((rbx_1 * rcx_5));\n                            rax_26 = LOWD((rbx_1 * rcx_5));\n                            bool o_7 = ((rbx_1 * rcx_5) >> 0x40) != 0;\n                            rbx_1 = rax_26;\n                            if (o_7)\n                            {\n                                r9_1 = 1;\n                                rbx_1 = -1;\n                            }\n                            temp14_1 = rdi_7;\n                            rdi_7 = (rdi_7 - 1);\n                        } while (temp14_1 != 1);\n                        goto label_4118e4;\n                    }\n                    case 0xf:\n                    case 0x2f:\n                    {\n                        rsi_3 = 1;\n                        rdx_3 = 0x400;\n                    label_411928:\n                        int64_t rcx_4 = rdx_3;\n                        int32_t rdi_6 = 4;\n                        r9_1 = 0;\n                        int32_t temp13_1;\n                        do\n                        {\n                            uint64_t rax_24;\n                            int64_t rdx_9;\n                            rdx_9 = HIGHD((rbx_1 * rcx_4));\n                            rax_24 = LOWD((rbx_1 * rcx_4));\n                            bool o_6 = ((rbx_1 * rcx_4) >> 0x40) != 0;\n                            rbx_1 = rax_24;\n                            if (o_6)\n                            {\n                                r9_1 = 1;\n                                rbx_1 = -1;\n                            }\n                            temp13_1 = rdi_6;\n                            rdi_6 = (rdi_6 - 1);\n                        } while (temp13_1 != 1);\n                        goto label_4118e4;\n                    }\n                    case 0x14:\n                    {\n                        rsi_3 = 1;\n                        rdx_3 = 0x400;\n                    label_4118f6:\n                        int64_t rcx_3 = rdx_3;\n                        int32_t rdi_5 = 8;\n                        r9_1 = 0;\n                        int32_t temp12_1;\n                        do\n                        {\n                            uint64_t rax_22;\n                            int64_t rdx_8;\n                            rdx_8 = HIGHD((rbx_1 * rcx_3));\n                            rax_22 = LOWD((rbx_1 * rcx_3));\n                            bool o_5 = ((rbx_1 * rcx_3) >> 0x40) != 0;\n                            rbx_1 = rax_22;\n                            if (o_5)\n                            {\n                                r9_1 = 1;\n                                rbx_1 = -1;\n                            }\n                            temp12_1 = rdi_5;\n                            rdi_5 = (rdi_5 - 1);\n                        } while (temp12_1 != 1);\n                        goto label_4118e4;\n                    }\n                    case 0x15:\n                    {\n                        rsi_3 = 1;\n                        rdx_3 = 0x400;\n                    label_4118bb:\n                        int64_t rcx_2 = rdx_3;\n                        int32_t rdi_4 = 7;\n                        r9_1 = 0;\n                        int32_t temp11_1;\n                        do\n                        {\n                            uint64_t rax_20;\n                            int64_t rdx_7;\n                            rdx_7 = HIGHD((rbx_1 * rcx_2));\n                            rax_20 = LOWD((rbx_1 * rcx_2));\n                            bool o_4 = ((rbx_1 * rcx_2) >> 0x40) != 0;\n                            rbx_1 = rax_20;\n                            if (o_4)\n                            {\n                                r9_1 = 1;\n                                rbx_1 = -1;\n                            }\n                            temp11_1 = rdi_4;\n                            rdi_4 = (rdi_4 - 1);\n                        } while (temp11_1 != 1);\n                    label_4118e4:\n                        rbp_1 = (rbp_1 | r9_1);\n                        goto label_41182d;\n                    }\n                    case 0x1d:\n                    {\n                        rsi_3 = 1;\n                        break;\n                    }\n                    case 0x1e:\n                    {\n                        rsi_3 = 1;\n                        goto label_41182d;\n                    }\n                }\n            }\n            else\n            {\n            label_4117e0:\n                rsi_3 = 1;\n                rdx_3 = 0x400;\n            label_4117ea:\n                char r12_2 = (r12_1 - 0x42);\n                if (r12_2 > 0x35)\n                {\n                    goto label_411885;\n                }\n                switch (r12_2)\n                {\n                    case 0:\n                    {\n                        if ((rbx_1 >> 0x36) != 0)\n                        {\n                            goto label_411857;\n                        }\n                        rbx_1 = (rbx_1 << 0xa);\n                        goto label_41182d;\n                    }\n                    case 1:\n                    case 2:\n                    case 4:\n                    case 6:\n                    case 7:\n                    case 8:\n                    case 0xa:\n                    case 0xc:\n                    case 0xd:\n                    case 0xf:\n                    case 0x10:\n                    case 0x11:\n                    case 0x13:\n                    case 0x14:\n                    case 0x15:\n                    case 0x16:\n                    case 0x19:\n                    case 0x1a:\n                    case 0x1b:\n                    case 0x1c:\n                    case 0x1d:\n                    case 0x1e:\n                    case 0x1f:\n                    case 0x22:\n                    case 0x23:\n                    case 0x24:\n                    case 0x26:\n                    case 0x27:\n                    case 0x28:\n                    case 0x2a:\n                    case 0x2c:\n                    case 0x2d:\n                    case 0x2e:\n                    case 0x2f:\n                    case 0x30:\n                    case 0x31:\n                    case 0x33:\n                    case 0x34:\n                    {\n                        goto label_411885;\n                    }\n                    case 3:\n                    {\n                        goto label_41198b;\n                    }\n                    case 5:\n                    case 0x25:\n                    {\n                        goto label_4119c3;\n                    }\n                    case 9:\n                    case 0x29:\n                    {\n                        goto label_41184f;\n                    }\n                    case 0xb:\n                    case 0x2b:\n                    {\n                        goto label_41180e;\n                    }\n                    case 0xe:\n                    {\n                        goto label_411958;\n                    }\n                    case 0x12:\n                    case 0x32:\n                    {\n                        goto label_411928;\n                    }\n                    case 0x17:\n                    {\n                        goto label_4118f6;\n                    }\n                    case 0x18:\n                    {\n                        goto label_4118bb;\n                    }\n                    case 0x21:\n                    {\n                        goto label_41182d;\n                    }\n                    case 0x35:\n                    {\n                        if (rbx_1 < 0)\n                        {\n                            goto label_411857;\n                        }\n                        rbx_1 = (rbx_1 + rbx_1);\n                    label_41182d:\n                        void* r8_2 = (r8_1 + rsi_3);\n                        int32_t rax_13 = (rbp_1 | 2);\n                        *r15 = r8_2;\n                        if (*r8_2 != 0)\n                        {\n                            rbp_1 = rax_13;\n                        }\n                        goto label_411720;\n                    }\n                }\n            }\n            if ((rbx_1 >> 0x37) != 0)\n            {\n                goto label_411857;\n            }\n            rbx_1 = (rbx_1 << 9);\n            goto label_41182d;\n        }\n        int32_t rax_4 = *rax;\n        if (rax_4 == 0)\n        {\n            rbp_1 = 0;\n        }\n        else\n        {\n            rbp_1 = 1;\n            if (rax_4 != 0x22)\n            {\n                goto label_411742;\n            }\n        }\n        if (arg5 == 0)\n        {\n        label_411720:\n            *arg4 = rbx_1;\n        }\n        else\n        {\n            r12_1 = *r8;\n            if (r12_1 == 0)\n            {\n                goto label_411720;\n            }\n            var_58 = r8;\n            r8_1 = var_58;\n            if (strchr(arg5, r12_1) != 0)\n            {\n                goto label_41177f;\n            }\n        label_411885:\n            *arg4 = rbx_1;\n            rbp_1 = (rbp_1 | 2);\n        }\n    }\n    return rbp_1;\n}\n\n"
        },
        {
            "funcName": "sub_411ab0",
            "funcStartAddr": "0x402f37",
            "funcEndAddr": "0x411b31",
            "decompiledFuncCode": "int64_t sub_411ab0(int32_t arg1, int32_t arg2, char arg3, int64_t* arg4, \n    int64_t arg5) __noreturn\n{\n    uint64_t rdi = (arg1 - 1);\n    int32_t rbx = data_61c518;\n    if (rdi > 3)\n    {\n        abort();\n        /* no return */\n    }\n    char* rsi = *((rdi << 3) + 0x4181c0);\n    int64_t rax = arg2;\n    void* const r12;\n    char* r13;\n    if (arg2 < 0)\n    {\n        char var_2a = arg3;\n        r13 = &var_2a;\n        r12 = (&data_418149 - rax);\n        char var_29_1 = 0;\n    }\n    else\n    {\n        r12 = &data_418149;\n        r13 = arg4[(rax * 4)];\n    }\n    error(rbx, 0, dcgettext(nullptr, rsi, 5), r12, r13, arg5);\n    abort();\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_411b40",
            "funcStartAddr": "0x411b40",
            "funcEndAddr": "0x411f74",
            "decompiledFuncCode": "uint64_t sub_411b40(char* arg1, int64_t* arg2, int32_t arg3, uint64_t* arg4, \n    char* arg5)\n{\n    if (arg3 > 0x24)\n    {\n        __assert_fail(\"0 <= strtol_base && strtol_base \u2026\", \"lib/xstrtol.c\", 0x60, \"xstrtoumax\");\n        /* no return */\n    }\n    int64_t* r15 = arg2;\n    void var_40;\n    if (arg2 == 0)\n    {\n        r15 = &var_40;\n    }\n    int32_t* rax = __errno_location();\n    *rax = 0;\n    char rbx = *arg1;\n    uint16_t* rsi = *__ctype_b_loc();\n    char* rax_2 = arg1;\n    while ((*(&rsi[rbx] + 1) & 0x20) != 0)\n    {\n        rax_2 = &rax_2[1];\n        rbx = *rax_2;\n    }\n    int32_t rbp_1;\n    if (rbx == 0x2d)\n    {\n    label_411c0a:\n        rbp_1 = 4;\n    }\n    else\n    {\n        char* r8 = *r15;\n        uint64_t rbx_1 = __strtoul_internal(arg1, r15, arg3, 0);\n        int32_t var_58;\n        void* r8_1;\n        uint32_t r12_1;\n        if (r8 == arg1)\n        {\n            var_58 = r8;\n            if (arg5 == 0)\n            {\n                goto label_411c0a;\n            }\n            r12_1 = *arg1;\n            if (r12_1 == 0)\n            {\n                goto label_411c0a;\n            }\n            rbp_1 = 0;\n            rbx_1 = 1;\n            r8_1 = var_58;\n            if (strchr(arg5, r12_1) == 0)\n            {\n                goto label_411c0a;\n            }\n        label_411c47:\n            uint64_t rdx_1 = (r12_1 - 0x45);\n            int64_t rdx_3;\n            int32_t rsi_3;\n            if (rdx_1 <= 0x2f)\n            {\n                var_58 = rdx_1;\n                if ((!(TEST_BITQ(0x814400308945, rdx_1))))\n                {\n                    goto label_411cb0;\n                }\n                if (strchr(arg5, 0x30) == 0)\n                {\n                    goto label_411cb0;\n                }\n                char rax_8 = *(r8_1 + 1);\n                if (rax_8 == 0x44)\n                {\n                label_411ed8:\n                    rsi_3 = 2;\n                    rdx_3 = 0x3e8;\n                    goto label_411cba;\n                }\n                if (rax_8 == 0x69)\n                {\n                    rdx_3 = 0x400;\n                    int32_t rsi_6;\n                    rsi_6 = *(r8_1 + 2) == 0x42;\n                    rsi_3 = ((rsi_6 + rsi_6) + 1);\n                    goto label_411cba;\n                }\n                uint64_t rdx_2 = var_58;\n                if (rax_8 == 0x42)\n                {\n                    goto label_411ed8;\n                }\n                int32_t r9_1;\n                switch (rdx_2)\n                {\n                    case 0:\n                    {\n                        rsi_3 = 1;\n                        rdx_3 = 0x400;\n                    label_411e5b:\n                        int64_t rcx_6 = rdx_3;\n                        int32_t rdi_8 = 6;\n                        r9_1 = 0;\n                        int32_t temp15_1;\n                        do\n                        {\n                            uint64_t rax_28;\n                            int64_t rdx_11;\n                            rdx_11 = HIGHD((rbx_1 * rcx_6));\n                            rax_28 = LOWD((rbx_1 * rcx_6));\n                            bool o_8 = ((rbx_1 * rcx_6) >> 0x40) != 0;\n                            rbx_1 = rax_28;\n                            if (o_8)\n                            {\n                                r9_1 = 1;\n                                rbx_1 = -1;\n                            }\n                            temp15_1 = rdi_8;\n                            rdi_8 = (rdi_8 - 1);\n                        } while (temp15_1 != 1);\n                        goto label_411db4;\n                    }\n                    case 1:\n                    case 3:\n                    case 4:\n                    case 5:\n                    case 7:\n                    case 9:\n                    case 0xa:\n                    case 0xc:\n                    case 0xd:\n                    case 0xe:\n                    case 0x10:\n                    case 0x11:\n                    case 0x12:\n                    case 0x13:\n                    case 0x16:\n                    case 0x17:\n                    case 0x18:\n                    case 0x19:\n                    case 0x1a:\n                    case 0x1b:\n                    case 0x1c:\n                    case 0x1f:\n                    case 0x20:\n                    case 0x21:\n                    case 0x23:\n                    case 0x24:\n                    case 0x25:\n                    case 0x27:\n                    case 0x29:\n                    case 0x2a:\n                    case 0x2b:\n                    case 0x2c:\n                    case 0x2d:\n                    case 0x2e:\n                    {\n                        goto label_411d55;\n                    }\n                    case 2:\n                    case 0x22:\n                    {\n                        rsi_3 = 1;\n                        rdx_3 = 0x400;\n                    label_411e93:\n                        int64_t rcx_7 = rdx_3;\n                        int64_t rax_30;\n                        int64_t rdx_12;\n                        rdx_12 = HIGHD((rbx_1 * rcx_7));\n                        rax_30 = LOWD((rbx_1 * rcx_7));\n                        int64_t rax_31;\n                        if (((rbx_1 * rcx_7) >> 0x40) == 0)\n                        {\n                            int64_t rdx_13;\n                            rdx_13 = HIGHD((rax_30 * rcx_7));\n                            rax_31 = LOWD((rax_30 * rcx_7));\n                            if (((rax_30 * rcx_7) >> 0x40) == 0)\n                            {\n                                uint64_t rax_32;\n                                int64_t rdx_14;\n                                rdx_14 = HIGHD((rax_31 * rcx_7));\n                                rax_32 = LOWD((rax_31 * rcx_7));\n                                if (((rax_31 * rcx_7) >> 0x40) == 0)\n                                {\n                                    rbx_1 = rax_32;\n                                    rbp_1 = (rbp_1 | 0);\n                                }\n                            }\n                        }\n                        if (((((rbx_1 * rcx_7) >> 0x40) != 0 || (((rbx_1 * rcx_7) >> 0x40) == 0 && ((rax_30 * rcx_7) >> 0x40) != 0)) || ((((rbx_1 * rcx_7) >> 0x40) == 0 && ((rax_30 * rcx_7) >> 0x40) == 0) && ((rax_31 * rcx_7) >> 0x40) != 0)))\n                        {\n                            rbx_1 = -1;\n                            rbp_1 = (rbp_1 | 1);\n                        }\n                        goto label_411cfd;\n                    }\n                    case 6:\n                    case 0x26:\n                    {\n                        rsi_3 = 1;\n                        rdx_3 = 0x400;\n                    label_411d1f:\n                        uint64_t rax_15;\n                        int64_t rdx_6;\n                        rdx_6 = HIGHD((rbx_1 * rdx_3));\n                        rax_15 = LOWD((rbx_1 * rdx_3));\n                        bool o_3 = ((rbx_1 * rdx_3) >> 0x40) != 0;\n                        rbx_1 = rax_15;\n                        if ((!o_3))\n                        {\n                            goto label_411cfd;\n                        }\n                        goto label_411d27;\n                    }\n                    case 8:\n                    case 0x28:\n                    {\n                        rsi_3 = 1;\n                        rdx_3 = 0x400;\n                    label_411cde:\n                        int64_t rcx_1 = rdx_3;\n                        int64_t rax_10;\n                        int64_t rdx_4;\n                        rdx_4 = HIGHD((rbx_1 * rcx_1));\n                        rax_10 = LOWD((rbx_1 * rcx_1));\n                        if (((rbx_1 * rcx_1) >> 0x40) == 0)\n                        {\n                            uint64_t rax_11;\n                            int64_t rdx_5;\n                            rdx_5 = HIGHD((rax_10 * rcx_1));\n                            rax_11 = LOWD((rax_10 * rcx_1));\n                            if (((rax_10 * rcx_1) >> 0x40) != 0)\n                            {\n                                goto label_411d27;\n                            }\n                            rbx_1 = rax_11;\n                            goto label_411cfd;\n                        }\n                    label_411d27:\n                        rbp_1 = 1;\n                        rbx_1 = -1;\n                        goto label_411cfd;\n                    }\n                    case 0xb:\n                    {\n                        rsi_3 = 1;\n                        rdx_3 = 0x400;\n                    label_411e28:\n                        int64_t rcx_5 = rdx_3;\n                        int32_t rdi_7 = 5;\n                        r9_1 = 0;\n                        int32_t temp14_1;\n                        do\n                        {\n                            uint64_t rax_26;\n                            int64_t rdx_10;\n                            rdx_10 = HIGHD((rbx_1 * rcx_5));\n                            rax_26 = LOWD((rbx_1 * rcx_5));\n                            bool o_7 = ((rbx_1 * rcx_5) >> 0x40) != 0;\n                            rbx_1 = rax_26;\n                            if (o_7)\n                            {\n                                r9_1 = 1;\n                                rbx_1 = -1;\n                            }\n                            temp14_1 = rdi_7;\n                            rdi_7 = (rdi_7 - 1);\n                        } while (temp14_1 != 1);\n                        goto label_411db4;\n                    }\n                    case 0xf:\n                    case 0x2f:\n                    {\n                        rsi_3 = 1;\n                        rdx_3 = 0x400;\n                    label_411df8:\n                        int64_t rcx_4 = rdx_3;\n                        int32_t rdi_6 = 4;\n                        r9_1 = 0;\n                        int32_t temp13_1;\n                        do\n                        {\n                            uint64_t rax_24;\n                            int64_t rdx_9;\n                            rdx_9 = HIGHD((rbx_1 * rcx_4));\n                            rax_24 = LOWD((rbx_1 * rcx_4));\n                            bool o_6 = ((rbx_1 * rcx_4) >> 0x40) != 0;\n                            rbx_1 = rax_24;\n                            if (o_6)\n                            {\n                                r9_1 = 1;\n                                rbx_1 = -1;\n                            }\n                            temp13_1 = rdi_6;\n                            rdi_6 = (rdi_6 - 1);\n                        } while (temp13_1 != 1);\n                        goto label_411db4;\n                    }\n                    case 0x14:\n                    {\n                        rsi_3 = 1;\n                        rdx_3 = 0x400;\n                    label_411dc6:\n                        int64_t rcx_3 = rdx_3;\n                        int32_t rdi_5 = 8;\n                        r9_1 = 0;\n                        int32_t temp12_1;\n                        do\n                        {\n                            uint64_t rax_22;\n                            int64_t rdx_8;\n                            rdx_8 = HIGHD((rbx_1 * rcx_3));\n                            rax_22 = LOWD((rbx_1 * rcx_3));\n                            bool o_5 = ((rbx_1 * rcx_3) >> 0x40) != 0;\n                            rbx_1 = rax_22;\n                            if (o_5)\n                            {\n                                r9_1 = 1;\n                                rbx_1 = -1;\n                            }\n                            temp12_1 = rdi_5;\n                            rdi_5 = (rdi_5 - 1);\n                        } while (temp12_1 != 1);\n                        goto label_411db4;\n                    }\n                    case 0x15:\n                    {\n                        rsi_3 = 1;\n                        rdx_3 = 0x400;\n                    label_411d8b:\n                        int64_t rcx_2 = rdx_3;\n                        int32_t rdi_4 = 7;\n                        r9_1 = 0;\n                        int32_t temp11_1;\n                        do\n                        {\n                            uint64_t rax_20;\n                            int64_t rdx_7;\n                            rdx_7 = HIGHD((rbx_1 * rcx_2));\n                            rax_20 = LOWD((rbx_1 * rcx_2));\n                            bool o_4 = ((rbx_1 * rcx_2) >> 0x40) != 0;\n                            rbx_1 = rax_20;\n                            if (o_4)\n                            {\n                                r9_1 = 1;\n                                rbx_1 = -1;\n                            }\n                            temp11_1 = rdi_4;\n                            rdi_4 = (rdi_4 - 1);\n                        } while (temp11_1 != 1);\n                    label_411db4:\n                        rbp_1 = (rbp_1 | r9_1);\n                        goto label_411cfd;\n                    }\n                    case 0x1d:\n                    {\n                        rsi_3 = 1;\n                        break;\n                    }\n                    case 0x1e:\n                    {\n                        rsi_3 = 1;\n                        goto label_411cfd;\n                    }\n                }\n            }\n            else\n            {\n            label_411cb0:\n                rsi_3 = 1;\n                rdx_3 = 0x400;\n            label_411cba:\n                char r12_2 = (r12_1 - 0x42);\n                if (r12_2 > 0x35)\n                {\n                    goto label_411d55;\n                }\n                switch (r12_2)\n                {\n                    case 0:\n                    {\n                        if ((rbx_1 >> 0x36) != 0)\n                        {\n                            goto label_411d27;\n                        }\n                        rbx_1 = (rbx_1 << 0xa);\n                        goto label_411cfd;\n                    }\n                    case 1:\n                    case 2:\n                    case 4:\n                    case 6:\n                    case 7:\n                    case 8:\n                    case 0xa:\n                    case 0xc:\n                    case 0xd:\n                    case 0xf:\n                    case 0x10:\n                    case 0x11:\n                    case 0x13:\n                    case 0x14:\n                    case 0x15:\n                    case 0x16:\n                    case 0x19:\n                    case 0x1a:\n                    case 0x1b:\n                    case 0x1c:\n                    case 0x1d:\n                    case 0x1e:\n                    case 0x1f:\n                    case 0x22:\n                    case 0x23:\n                    case 0x24:\n                    case 0x26:\n                    case 0x27:\n                    case 0x28:\n                    case 0x2a:\n                    case 0x2c:\n                    case 0x2d:\n                    case 0x2e:\n                    case 0x2f:\n                    case 0x30:\n                    case 0x31:\n                    case 0x33:\n                    case 0x34:\n                    {\n                        goto label_411d55;\n                    }\n                    case 3:\n                    {\n                        goto label_411e5b;\n                    }\n                    case 5:\n                    case 0x25:\n                    {\n                        goto label_411e93;\n                    }\n                    case 9:\n                    case 0x29:\n                    {\n                        goto label_411d1f;\n                    }\n                    case 0xb:\n                    case 0x2b:\n                    {\n                        goto label_411cde;\n                    }\n                    case 0xe:\n                    {\n                        goto label_411e28;\n                    }\n                    case 0x12:\n                    case 0x32:\n                    {\n                        goto label_411df8;\n                    }\n                    case 0x17:\n                    {\n                        goto label_411dc6;\n                    }\n                    case 0x18:\n                    {\n                        goto label_411d8b;\n                    }\n                    case 0x21:\n                    {\n                        goto label_411cfd;\n                    }\n                    case 0x35:\n                    {\n                        if (rbx_1 < 0)\n                        {\n                            goto label_411d27;\n                        }\n                        rbx_1 = (rbx_1 + rbx_1);\n                    label_411cfd:\n                        void* r8_2 = (r8_1 + rsi_3);\n                        int32_t rax_13 = (rbp_1 | 2);\n                        *r15 = r8_2;\n                        if (*r8_2 != 0)\n                        {\n                            rbp_1 = rax_13;\n                        }\n                        goto label_411be2;\n                    }\n                }\n            }\n            if ((rbx_1 >> 0x37) != 0)\n            {\n                goto label_411d27;\n            }\n            rbx_1 = (rbx_1 << 9);\n            goto label_411cfd;\n        }\n        int32_t rax_4 = *rax;\n        if (rax_4 == 0)\n        {\n            rbp_1 = 0;\n        }\n        else\n        {\n            rbp_1 = 1;\n            if (rax_4 != 0x22)\n            {\n                goto label_411c0a;\n            }\n        }\n        if (arg5 == 0)\n        {\n        label_411be2:\n            *arg4 = rbx_1;\n        }\n        else\n        {\n            r12_1 = *r8;\n            if (r12_1 == 0)\n            {\n                goto label_411be2;\n            }\n            var_58 = r8;\n            r8_1 = var_58;\n            if (strchr(arg5, r12_1) != 0)\n            {\n                goto label_411c47;\n            }\n        label_411d55:\n            *arg4 = rbx_1;\n            rbp_1 = (rbp_1 | 2);\n        }\n    }\n    return rbp_1;\n}\n\n"
        },
        {
            "funcName": "sub_411f80",
            "funcStartAddr": "0x411f80",
            "funcEndAddr": "0x411ffb",
            "decompiledFuncCode": "int64_t sub_411f80(FILE* arg1)\n{\n    FILE* rdi = arg1;\n    if (fileno(arg1) >= 0)\n    {\n        int32_t rax_1 = __freading(rdi);\n        off64_t rax_6;\n        if (rax_1 != 0)\n        {\n            rax_6 = lseek(fileno(arg1), 0, 1);\n        }\n        if (((rax_1 == 0 || (rax_1 != 0 && rax_6 != -1)) && sub_412140(arg1) != 0))\n        {\n            int32_t* rax_3 = __errno_location();\n            int32_t r12 = *rax_3;\n            int64_t rax_4 = fclose(arg1);\n            if (r12 != 0)\n            {\n                *rax_3 = r12;\n                rax_4 = 0xffffffff;\n            }\n            return rax_4;\n        }\n        rdi = arg1;\n    }\n    /* tailcall */\n    return fclose(rdi);\n}\n\n"
        },
        {
            "funcName": "sub_412000",
            "funcStartAddr": "0x412000",
            "funcEndAddr": "0x412135",
            "decompiledFuncCode": "uint64_t sub_412000(int32_t arg1, int32_t arg2, int32_t arg3)\n{\n    void* var_58 = &arg_8;\n    int64_t rcx;\n    int64_t var_30 = rcx;\n    int32_t var_60 = 0x10;\n    void var_48;\n    void* var_50 = &var_48;\n    if (arg2 != 0x406)\n    {\n        return fcntl();\n    }\n    int32_t var_60_1 = 0x18;\n    int32_t rax_2;\n    int32_t rax_5;\n    int32_t* rax_15;\n    int32_t rax_17;\n    int32_t rbx;\n    if (data_61cd18 < 0)\n    {\n        rax_5 = sub_412000();\n        rbx = rax_5;\n    }\n    else\n    {\n        rax_2 = fcntl();\n        rbx = rax_2;\n        if (rax_2 < 0)\n        {\n            rax_15 = __errno_location();\n            if (*rax_15 == 0x16)\n            {\n                rax_17 = sub_412000(arg1, 0, arg3);\n                rbx = rax_17;\n                if (rax_17 >= 0)\n                {\n                    data_61cd18 = 0xffffffff;\n                }\n            }\n        }\n    }\n    if (((((data_61cd18 >= 0 && rax_2 < 0) && *rax_15 == 0x16) && rax_17 >= 0) || (rax_5 >= 0 && data_61cd18 == 0xffffffff)))\n    {\n        int32_t rax_7 = fcntl(rbx, 1);\n        int32_t rax_10;\n        if (rax_7 >= 0)\n        {\n            rax_10 = fcntl(rbx, 2, (rax_7 | 1));\n        }\n        if ((rax_7 < 0 || (rax_7 >= 0 && rax_10 == 0xffffffff)))\n        {\n            int32_t* rax_11 = __errno_location();\n            int32_t rdi_2 = rbx;\n            rbx = -1;\n            int32_t r12_1 = *rax_11;\n            close(rdi_2);\n            *rax_11 = r12_1;\n        }\n    }\n    if ((data_61cd18 >= 0 && (rax_2 >= 0 || (rax_2 < 0 && *rax_15 != 0x16))))\n    {\n        data_61cd18 = 1;\n    }\n    return rbx;\n}\n\n"
        },
        {
            "funcName": "sub_412140",
            "funcStartAddr": "0x412140",
            "funcEndAddr": "0x412180",
            "decompiledFuncCode": "int64_t sub_412140(FILE* arg1)\n{\n    int32_t* rbx = arg1;\n    if ((arg1 != 0 && (__freading(arg1) != 0 && (*rbx & 0x100) != 0)))\n    {\n        sub_412180(rbx, 0, 1);\n        /* tailcall */\n        return fflush(rbx);\n    }\n    /* tailcall */\n    return fflush(rbx);\n}\n\n"
        },
        {
            "funcName": "sub_412180",
            "funcStartAddr": "0x412180",
            "funcEndAddr": "0x4121d7",
            "decompiledFuncCode": "off64_t sub_412180(FILE* arg1, off_t arg2, int32_t arg3)\n{\n    if ((arg1->_IO_read_end == arg1->_IO_read_ptr && (arg1->_IO_write_ptr == arg1->_IO_write_base && arg1->_IO_save_base == 0)))\n    {\n        off64_t rax_3 = lseek(fileno(arg1), arg2, arg3);\n        if (rax_3 != -1)\n        {\n            arg1->_flags = (arg1->_flags & 0xffffffef);\n            arg1->_offset = rax_3;\n            rax_3 = 0;\n        }\n        return rax_3;\n    }\n    /* tailcall */\n    return fseeko(arg1, arg2, arg3);\n}\n\n"
        },
        {
            "funcName": "sub_4121e0",
            "funcStartAddr": "0x4121e0",
            "funcEndAddr": "0x4122bf",
            "decompiledFuncCode": "uint64_t sub_4121e0(int64_t arg1, int32_t* arg2)\n{\n    int64_t r11 = (arg1 + 8);\n    int32_t r12 = arg2[0xb];\n    int32_t rbp = *arg2;\n    int64_t rbx = arg2[0xc];\n    int32_t r9 = r12;\n    int32_t r10 = rbp;\n    int32_t r8 = rbx;\n    while (r10 > r8)\n    {\n        int32_t r14_2;\n        while (r9 < r8)\n        {\n            r14_2 = (r10 - r8);\n            int32_t rdx_2 = (r8 - r9);\n            if (r14_2 <= rdx_2)\n            {\n                break;\n            }\n            int64_t rcx_1 = r9;\n            r10 = (r10 - rdx_2);\n            int64_t* rax_1 = (arg1 + (rcx_1 << 3));\n            int64_t r13_1 = (r11 + (((rdx_2 - 1) + rcx_1) << 3));\n            int64_t rdx_6 = (r10 - rcx_1);\n            do\n            {\n                int64_t rcx_2 = *rax_1;\n                *rax_1 = rax_1[rdx_6];\n                rax_1[rdx_6] = rcx_2;\n                rax_1 = &rax_1[1];\n            } while (r13_1 != rax_1);\n            if (r10 <= r8)\n            {\n                break;\n            }\n        }\n        if (r9 >= r8)\n        {\n            break;\n        }\n        int64_t rdx_7 = r9;\n        int64_t* rax_4 = (arg1 + (rdx_7 << 3));\n        int64_t r13_2 = (r11 + (((r14_2 - 1) + rdx_7) << 3));\n        int64_t rcx_6 = (rbx - rdx_7);\n        do\n        {\n            int64_t rcx_7 = *rax_4;\n            *rax_4 = rax_4[rcx_6];\n            rax_4[rcx_6] = rcx_7;\n            rax_4 = &rax_4[1];\n        } while (rax_4 != r13_2);\n        r9 = (r9 + r14_2);\n    }\n    arg2[0xc] = rbp;\n    uint64_t rax_3 = (rbp - r8);\n    arg2[0xb] = (r12 + rax_3);\n    return rax_3;\n}\n\n"
        },
        {
            "funcName": "sub_4122c0",
            "funcStartAddr": "0x4122c0",
            "funcEndAddr": "0x4128dc",
            "decompiledFuncCode": "uint64_t sub_4122c0(int32_t arg1, int64_t* arg2, char* arg3, int64_t* arg4, \n    int32_t* arg5, int32_t arg6, int32_t* arg7, int32_t arg8, int64_t arg9)\n{\n    char* r14 = *(arg7 + 0x20);\n    char rax_1 = *r14;\n    char* rbp = r14;\n    uint64_t r13_1;\n    if ((rax_1 == 0x3d || rax_1 == 0))\n    {\n        r13_1 = 0;\n    }\n    if ((rax_1 != 0x3d && rax_1 != 0))\n    {\n        while (true)\n        {\n            rbp = &rbp[1];\n            char rax_2 = *rbp;\n            if (rax_2 == 0)\n            {\n                break;\n            }\n            if (rax_2 == 0x3d)\n            {\n                break;\n            }\n            if ((!(rax_2 != 0 && rax_2 != 0x3d)))\n            {\n                /* nop */\n            }\n        }\n        r13_1 = (rbp - r14);\n    }\n    int64_t* rbx = arg4;\n    int64_t r12 = 0;\n    char* rax_3 = *rbx;\n    char* r15 = rax_3;\n    uint64_t rax_14;\n    if (rax_3 != 0)\n    {\n        int32_t rax_4;\n        uint64_t rax_5;\n        int32_t r8;\n        while (true)\n        {\n            rax_4 = strncmp(r15, r14, r13_1);\n            if (rax_4 == 0)\n            {\n                rax_5 = strlen(r15);\n                if (rax_5 == r13_1)\n                {\n                    break;\n                }\n            }\n            rbx = &rbx[4];\n            r15 = *rbx;\n            r8 = (r12 + 1);\n            if (r15 == 0)\n            {\n                break;\n            }\n            r12 = r8;\n        }\n        if ((rax_4 == 0 && rax_5 == r13_1))\n        {\n            goto label_4124f0;\n        }\n        rbx = nullptr;\n        int32_t var_44_1 = 0xffffffff;\n        char* rdi_2 = rax_3;\n        int64_t r15_1 = 0;\n        int32_t var_50_1 = 0;\n        int32_t var_40_1 = 0;\n        char* var_70_1 = nullptr;\n        int64_t* rbp_1 = arg4;\n        do\n        {\n            if (strncmp(rdi_2, r14, r13_1) == 0)\n            {\n                if (rbx == 0)\n                {\n                    var_44_1 = r15_1;\n                    rbx = rbp_1;\n                }\n                else if (((((arg6 != 0 || (arg6 == 0 && rbx[1] != rbp_1[1])) || ((arg6 == 0 && rbx[1] == rbp_1[1]) && rbx[2] != rbp_1[2])) || (((arg6 == 0 && rbx[1] == rbp_1[1]) && rbx[2] == rbp_1[2]) && rbx[3] != rbp_1[3])) && var_50_1 == 0))\n                {\n                    if (arg8 == 0)\n                    {\n                        var_50_1 = 1;\n                        if (var_70_1 != 0)\n                        {\n                            goto label_412416;\n                        }\n                    }\n                    else\n                    {\n                        if (var_70_1 != 0)\n                        {\n                            goto label_412416;\n                        }\n                        char* rax_36 = calloc(r8, 1);\n                        var_70_1 = rax_36;\n                        if (rax_36 == 0)\n                        {\n                            var_50_1 = 1;\n                        }\n                        else\n                        {\n                            var_40_1 = 1;\n                            var_70_1[var_44_1] = 1;\n                        label_412416:\n                            var_70_1[r15_1] = 1;\n                        }\n                    }\n                }\n            }\n            rbp_1 = &rbp_1[4];\n            rdi_2 = *rbp_1;\n            r15_1 = (r15_1 + 1);\n        } while (rdi_2 != 0);\n        if (((var_70_1 == 0 && var_50_1 == 0) && rbx != 0))\n        {\n            r12 = var_44_1;\n        label_4124f0:\n            int32_t rdx_3 = *arg7;\n            *(arg7 + 0x20) = 0;\n            int32_t rax_18 = (rdx_3 + 1);\n            *arg7 = rax_18;\n            int32_t rcx_4 = rbx[1];\n            if (*rbp != 0)\n            {\n                if (rcx_4 != 0)\n                {\n                    *(arg7 + 0x10) = &rbp[1];\n                }\n                else\n                {\n                    if (arg8 != 0)\n                    {\n                        __fprintf_chk(stderr, 1, dcgettext(nullptr, \"%s: option '%s%s' doesn't allow \u2026\", 5), *arg2, arg9, *rbx, arg4);\n                    }\n                    arg7[2] = rbx[3];\n                    rax_14 = 0x3f;\n                }\n            }\n            if ((rcx_4 == 1 && *rbp == 0))\n            {\n                if (rax_18 < arg1)\n                {\n                    *arg7 = (rdx_3 + 2);\n                    *(arg7 + 0x10) = arg2[rax_18];\n                }\n                else\n                {\n                    if (arg8 != 0)\n                    {\n                        __fprintf_chk(stderr, 1, dcgettext(nullptr, \"%s: option '%s%s' requires an ar\u2026\", 5), *arg2, arg9, *rbx, arg4);\n                    }\n                    arg7[2] = rbx[3];\n                    char* rax_43;\n                    rax_43 = *arg3 != 0x3a;\n                    rax_14 = ((rax_43 * 5) + 0x3a);\n                }\n            }\n            if ((((*rbp != 0 && rcx_4 != 0) || ((*rbp == 0 && rcx_4 == 1) && rax_18 < arg1)) || (*rbp == 0 && rcx_4 != 1)))\n            {\n                if (arg5 == 0)\n                {\n                    goto label_41251e;\n                }\n                *arg5 = r12;\n            label_41251e:\n                int32_t* rdx_4 = rbx[2];\n                rax_14 = rbx[3];\n                if (rdx_4 != 0)\n                {\n                    *rdx_4 = rax_14;\n                    rax_14 = 0;\n                }\n            }\n            goto label_41253c;\n        }\n        if ((var_70_1 != 0 || (var_70_1 == 0 && var_50_1 != 0)))\n        {\n            if (arg8 != 0)\n            {\n                if (var_50_1 != 0)\n                {\n                    __fprintf_chk(stderr, 1, dcgettext(nullptr, \"%s: option '%s%s' is ambiguous\\n\", 5), *arg2, arg9, r14, arg4);\n                    r14 = *(arg7 + 0x20);\n                }\n                else\n                {\n                    flockfile(stderr);\n                    __fprintf_chk(stderr, 1, dcgettext(nullptr, \"%s: option '%s%s' is ambiguous; \u2026\", 5), *arg2, arg9, *(arg7 + 0x20), arg4);\n                    uint64_t* const rdi_13 = stderr;\n                    int64_t* rbx_4 = arg4;\n                    char* rbp_5 = var_70_1;\n                    void* r12_2 = &var_70_1[(r12 + 1)];\n                    do\n                    {\n                        if (*rbp_5 != 0)\n                        {\n                            __fprintf_chk(rdi_13, 1, \" '%s%s'\", arg9, *rbx_4);\n                            rdi_13 = stderr;\n                        }\n                        rbp_5 = &rbp_5[1];\n                        rbx_4 = &rbx_4[4];\n                    } while (r12_2 != rbp_5);\n                    fputc(0xa, stderr);\n                    funlockfile(stderr);\n                    r14 = *(arg7 + 0x20);\n                }\n            }\n            if (var_40_1 != 0)\n            {\n                free(var_70_1);\n            }\n            *(arg7 + 0x20) = &r14[strlen(r14)];\n            *arg7 = (*arg7 + 1);\n            arg7[2] = 0;\n            rax_14 = 0x3f;\n        label_41253c:\n            return rax_14;\n        }\n    }\n    if ((arg6 != 0 && *(arg2[*arg7] + 1) != 0x2d))\n    {\n        rax_14 = 0xffffffff;\n        if (strchr(arg3, rax_1) != 0)\n        {\n            goto label_41253c;\n        }\n    }\n    if (arg8 == 0)\n    {\n        goto label_4124ae;\n    }\n    __fprintf_chk(stderr, 1, dcgettext(nullptr, \"%s: unrecognized option '%s%s'\\n\", 5), *arg2, arg9, r14, arg4);\nlabel_4124ae:\n    *(arg7 + 0x20) = 0;\n    *arg7 = (*arg7 + 1);\n    arg7[2] = 0;\n    return 0x3f;\n}\n\n"
        },
        {
            "funcName": "sub_4128e0",
            "funcStartAddr": "0x4128e0",
            "funcEndAddr": "0x412ea6",
            "decompiledFuncCode": "uint64_t sub_4128e0(int32_t arg1, int64_t* arg2, char* arg3, int64_t* arg4, \n    int32_t* arg5, int32_t arg6, int32_t* arg7, int32_t arg8)\n{\n    int32_t r13 = arg7[1];\n    if (arg1 <= 0)\n    {\n        goto label_412b1c;\n    }\n    int32_t rax_1 = *arg7;\n    int32_t rbp_1 = arg1;\n    char* r15_1 = arg3;\n    *(arg7 + 0x10) = 0;\n    if (rax_1 == 0)\n    {\n        *arg7 = 1;\n        rax_1 = 1;\n    }\n    uint32_t rax_3;\n    char* rdx;\n    if ((rax_1 == 0 || (rax_1 != 0 && arg7[6] == 0)))\n    {\n        arg7[0xc] = rax_1;\n        arg7[0xb] = rax_1;\n        *(arg7 + 0x20) = 0;\n        char rax_2 = *r15_1;\n        if (rax_2 == 0x2d)\n        {\n            arg7[0xa] = 2;\n            r15_1 = &r15_1[1];\n            rdx = nullptr;\n        }\n        else if (rax_2 == 0x2b)\n        {\n            arg7[0xa] = 0;\n            r15_1 = &r15_1[1];\n            rdx = nullptr;\n        }\n        else\n        {\n            rdx = nullptr;\n            char* rax_16;\n            if (arg8 == 0)\n            {\n                rax_16 = getenv(\"POSIXLY_CORRECT\");\n                if (rax_16 == 0)\n                {\n                    arg7[0xa] = 1;\n                    rdx = *(arg7 + 0x20);\n                }\n                else\n                {\n                    rdx = *(arg7 + 0x20);\n                }\n            }\n            if (((arg8 == 0 && rax_16 != 0) || arg8 != 0))\n            {\n                arg7[0xa] = 0;\n            }\n        }\n        arg7[6] = 1;\n        rax_3 = *r15_1;\n    }\n    if ((rax_1 != 0 && arg7[6] != 0))\n    {\n        rax_3 = *arg3;\n        rdx = *(arg7 + 0x20);\n    }\n    if (((((rax_1 != 0 && arg7[6] != 0) && ((rax_3 - 0x2b) & 0xfd) != 0) || rax_1 == 0) || (rax_1 != 0 && arg7[6] == 0)))\n    {\n        if (rax_3 == 0x3a)\n        {\n            r13 = 0;\n        }\n        if (rdx == 0)\n        {\n            goto label_4129a8;\n        }\n    }\n    if (((rax_1 != 0 && arg7[6] != 0) && ((rax_3 - 0x2b) & 0xfd) == 0))\n    {\n        char rax_4 = r15_1[1];\n        r15_1 = &r15_1[1];\n        if (rax_4 == 0x3a)\n        {\n            r13 = 0;\n        }\n        if (rdx == 0)\n        {\n        label_4129a8:\n            int32_t rax_5 = *arg7;\n            if (arg7[0xc] > rax_5)\n            {\n                arg7[0xc] = rax_5;\n            }\n            if (rax_5 < arg7[0xb])\n            {\n                arg7[0xb] = rax_5;\n            }\n            if (arg7[0xa] == 1)\n            {\n                int32_t rdx_5 = arg7[0xc];\n                if (arg7[0xb] == rdx_5)\n                {\n                    if (rax_5 != rdx_5)\n                    {\n                        arg7[0xb] = rax_5;\n                        rdx_5 = rax_5;\n                    }\n                }\n                else if (rax_5 != rdx_5)\n                {\n                    sub_4121e0(arg2, arg7);\n                    rdx_5 = *arg7;\n                }\n                char* rcx_8;\n                if (rbp_1 > rdx_5)\n                {\n                    int64_t rax_10 = rdx_5;\n                    do\n                    {\n                        rcx_8 = arg2[rax_10];\n                        int32_t rsi_5 = rax_10;\n                        rdx_5 = rax_10;\n                        if ((*rcx_8 == 0x2d && rcx_8[1] != 0))\n                        {\n                            break;\n                        }\n                        rdx_5 = (rsi_5 + 1);\n                        rax_10 = (rax_10 + 1);\n                        *arg7 = rdx_5;\n                    } while (rbp_1 > rax_10);\n                    if ((*rcx_8 == 0x2d && rcx_8[1] != 0))\n                    {\n                        rax_5 = *arg7;\n                    }\n                }\n                if ((rbp_1 <= rdx_5 || (rbp_1 > rdx_5 && (!(*rcx_8 == 0x2d && rcx_8[1] != 0)))))\n                {\n                    rax_5 = rdx_5;\n                }\n                arg7[0xc] = rdx_5;\n            }\n            bool c_1 = rbp_1 < rax_5;\n            bool z_1 = rbp_1 == rax_5;\n            int64_t rcx_3;\n            int32_t rdx_2;\n            char* r14_1;\n            if (z_1)\n            {\n                rbp_1 = arg7[0xc];\n                rdx_2 = arg7[0xb];\n            }\n            else\n            {\n                rcx_3 = 3;\n                void* const rdi = &data_418149;\n                r14_1 = arg2[rax_5];\n                char* rsi_1 = r14_1;\n                while (rcx_3 != 0)\n                {\n                    char temp0_1 = *rsi_1;\n                    char temp1_1 = *rdi;\n                    c_1 = temp0_1 < temp1_1;\n                    z_1 = temp0_1 == temp1_1;\n                    rsi_1 = &rsi_1[1];\n                    rdi = (rdi + 1);\n                    rcx_3 = (rcx_3 - 1);\n                    if ((!z_1))\n                    {\n                        break;\n                    }\n                }\n                rcx_3 = ((!z_1) && (!c_1));\n                rcx_3 = (rcx_3 - 0);\n                if (rcx_3 == 0)\n                {\n                    rdx_2 = arg7[0xb];\n                    int32_t rcx_4 = arg7[0xc];\n                    int32_t rax_6 = (rax_5 + 1);\n                    *arg7 = rax_6;\n                    if (rdx_2 == rcx_4)\n                    {\n                        arg7[0xb] = rax_6;\n                        rdx_2 = rax_6;\n                    }\n                    else if (rax_6 != rcx_4)\n                    {\n                        sub_4121e0(arg2, arg7);\n                        rdx_2 = arg7[0xb];\n                    }\n                    arg7[0xc] = rbp_1;\n                    *arg7 = rbp_1;\n                }\n            }\n            int32_t r14_2;\n            if ((z_1 || ((!z_1) && rcx_3 == 0)))\n            {\n                if (rdx_2 == rbp_1)\n                {\n                    goto label_412b1c;\n                }\n                *arg7 = rdx_2;\n            label_412b1c:\n                r14_2 = -1;\n            }\n            if (((!z_1) && rcx_3 != 0))\n            {\n                char rcx_9;\n                if (*r14_1 == 0x2d)\n                {\n                    rcx_9 = r14_1[1];\n                    if (rcx_9 != 0)\n                    {\n                        if (arg4 == 0)\n                        {\n                            goto label_412c20;\n                        }\n                        int32_t* var_88_2;\n                        int32_t var_80_2;\n                        void* const var_78_1;\n                        if (rcx_9 == 0x2d)\n                        {\n                            *(arg7 + 0x20) = &r14_1[2];\n                            var_78_1 = &data_418149;\n                            var_80_2 = r13;\n                            var_88_2 = arg7;\n                            goto label_412c90;\n                        }\n                        if (arg6 == 0)\n                        {\n                            goto label_412c20;\n                        }\n                        if (r14_1[2] == 0)\n                        {\n                            if (strchr(r15_1, rcx_9) != 0)\n                            {\n                                goto label_412c20;\n                            }\n                            goto label_412be1;\n                        }\n                    label_412be1:\n                        *(arg7 + 0x20) = &r14_1[1];\n                        int32_t rax_12 = sub_4122c0(rbp_1, arg2, r15_1, arg4, arg5, arg6, arg7, r13, &data_41814a);\n                        r14_2 = rax_12;\n                        if (rax_12 == 0xffffffff)\n                        {\n                            r14_1 = arg2[*arg7];\n                        label_412c20:\n                            rdx = &r14_1[1];\n                        label_412a61:\n                            *(arg7 + 0x20) = &rdx[1];\n                            r14_2 = *rdx;\n                            int32_t var_4c;\n                            var_4c = r14_2;\n                            char* rax_7 = strchr(r15_1, r14_2);\n                            char rcx_5 = var_4c;\n                            void* r8_1 = &rdx[1];\n                            if (rdx[1] == 0)\n                            {\n                                *arg7 = (*arg7 + 1);\n                            }\n                            if (((rcx_5 - 0x3a) > 1 && rax_7 != 0))\n                            {\n                                char rcx_7 = rax_7[1];\n                                if (((*rax_7 == 0x57 && arg4 != 0) && rcx_7 == 0x3b))\n                                {\n                                    if (rdx[1] != 0)\n                                    {\n                                        goto label_412c5e;\n                                    }\n                                    int64_t rax_14 = *arg7;\n                                    if (rax_14 == rbp_1)\n                                    {\n                                        if (r13 != 0)\n                                        {\n                                            int64_t rbp_4 = *arg2;\n                                            __fprintf_chk(stderr, 1, dcgettext(nullptr, \"%s: option requires an argument \u2026\", 5), rbp_4, r14_2);\n                                        }\n                                        arg7[2] = r14_2;\n                                        int64_t r14_4;\n                                        r14_4 = *r15_1 != 0x3a;\n                                        r14_2 = ((r14_4 * 5) + 0x3a);\n                                    }\n                                    else\n                                    {\n                                        r8_1 = arg2[rax_14];\n                                    label_412c5e:\n                                        *(arg7 + 0x20) = r8_1;\n                                        arg6 = 0;\n                                        *(arg7 + 0x10) = 0;\n                                        var_78_1 = &data_418635;\n                                        var_80_2 = r13;\n                                        var_88_2 = arg7;\n                                    label_412c90:\n                                        r14_2 = sub_4122c0(rbp_1, arg2, r15_1, arg4, arg5, arg6, var_88_2, var_80_2, var_78_1);\n                                    }\n                                }\n                                if ((((*rax_7 != 0x57 || (*rax_7 == 0x57 && arg4 == 0)) || ((*rax_7 == 0x57 && arg4 != 0) && rcx_7 != 0x3b)) && rcx_7 == 0x3a))\n                                {\n                                    char rdx_9 = rdx[1];\n                                    if (rax_7[2] != 0x3a)\n                                    {\n                                        int64_t rax_17 = *arg7;\n                                        if (rdx_9 != 0)\n                                        {\n                                            *(arg7 + 0x10) = r8_1;\n                                            *arg7 = (rax_17 + 1);\n                                        }\n                                        else if (rbp_1 != rax_17)\n                                        {\n                                            int64_t rax_18 = arg2[rax_17];\n                                            *arg7 = (rax_17 + 1);\n                                            *(arg7 + 0x10) = rax_18;\n                                        }\n                                        else\n                                        {\n                                            if (r13 != 0)\n                                            {\n                                                int64_t rbp_3 = *arg2;\n                                                __fprintf_chk(stderr, 1, dcgettext(nullptr, \"%s: option requires an argument \u2026\", 5), rbp_3, r14_2);\n                                            }\n                                            arg7[2] = r14_2;\n                                            int64_t r14_3;\n                                            r14_3 = *r15_1 != 0x3a;\n                                            r14_2 = ((r14_3 * 5) + 0x3a);\n                                        }\n                                    }\n                                    else if (rdx_9 == 0)\n                                    {\n                                        *(arg7 + 0x10) = 0;\n                                    }\n                                    else\n                                    {\n                                        *(arg7 + 0x10) = r8_1;\n                                        *arg7 = (*arg7 + 1);\n                                    }\n                                    *(arg7 + 0x20) = 0;\n                                }\n                            }\n                            if (((rcx_5 - 0x3a) <= 1 || ((rcx_5 - 0x3a) > 1 && rax_7 == 0)))\n                            {\n                                if (r13 == 0)\n                                {\n                                    goto label_412d4d;\n                                }\n                                int64_t rbp_2 = *arg2;\n                                __fprintf_chk(stderr, 1, dcgettext(nullptr, \"%s: invalid option -- '%c'\\n\", 5), rbp_2, r14_2);\n                            label_412d4d:\n                                arg7[2] = r14_2;\n                                r14_2 = 0x3f;\n                            }\n                        }\n                    }\n                }\n                if ((*r14_1 != 0x2d || (*r14_1 == 0x2d && rcx_9 == 0)))\n                {\n                    if (arg7[0xa] == 0)\n                    {\n                        goto label_412b1c;\n                    }\n                    *(arg7 + 0x10) = r14_1;\n                    r14_2 = 1;\n                    *arg7 = (rax_5 + 1);\n                }\n            }\n            if ((((z_1 || ((!z_1) && rcx_3 == 0)) && rdx_2 != rbp_1) || ((!z_1) && rcx_3 != 0)))\n            {\n                return r14_2;\n            }\n        }\n    }\n    if (((((((rax_1 != 0 && arg7[6] != 0) && ((rax_3 - 0x2b) & 0xfd) != 0) || rax_1 == 0) || (rax_1 != 0 && arg7[6] == 0)) && rdx != 0) || ((rax_1 != 0 && arg7[6] != 0) && ((rax_3 - 0x2b) & 0xfd) == 0)))\n    {\n        if (*rdx == 0)\n        {\n            goto label_4129a8;\n        }\n        goto label_412a61;\n    }\n}\n\n"
        },
        {
            "funcName": "sub_412f10",
            "funcStartAddr": "0x412f10",
            "funcEndAddr": "0x412f28",
            "decompiledFuncCode": "uint64_t sub_412f10(int32_t arg1, int64_t* arg2, char* arg3)\n{\n    return _getopt_internal(arg1, arg2, arg3, nullptr, nullptr, 0, 1);\n}\n\n"
        },
        {
            "funcName": "sub_412fb0",
            "funcStartAddr": "0x412fb0",
            "funcEndAddr": "0x41302a",
            "decompiledFuncCode": "uint64_t sub_412fb0(uint32_t* arg1, char* arg2, uint64_t arg3, mbstate_t* arg4)\n{\n    uint64_t rbx_1;\n    char* rbp_1;\n    uint32_t* r12_1;\n    if (arg2 == 0)\n    {\n        arg3 = 1;\n        rbp_1 = &data_41655e[0x13];\n    }\n    else\n    {\n        rbx_1 = -2;\n        if (arg3 != 0)\n        {\n            r12_1 = arg1;\n            rbp_1 = arg2;\n            if (arg1 != 0)\n            {\n                goto label_412fda;\n            }\n        }\n    }\n    if ((arg2 == 0 || (arg2 != 0 && arg3 != 0)))\n    {\n        void var_1c;\n        r12_1 = &var_1c;\n    label_412fda:\n        uint64_t rax_1 = mbrtowc(r12_1, rbp_1, arg3, arg4);\n        rbx_1 = rax_1;\n        if ((rax_1 > -3 && sub_40bd10() == 0))\n        {\n            rbx_1 = 1;\n            *r12_1 = *rbp_1;\n        }\n    }\n    return rbx_1;\n}\n\n"
        },
        {
            "funcName": "sub_413030",
            "funcStartAddr": "0x413030",
            "funcEndAddr": "0x413134",
            "decompiledFuncCode": "char* sub_413030(char* arg1, int32_t arg2, int64_t arg3)\n{\n    char r8 = arg2;\n    if (arg3 != 0)\n    {\n        if ((arg1 & 7) != 0)\n        {\n            if (arg2 == *arg1)\n            {\n            label_413130:\n                return arg1;\n            }\n            do\n            {\n                arg1 = &arg1[1];\n                int64_t temp0_1 = arg3;\n                arg3 = (arg3 - 1);\n                if (temp0_1 == 1)\n                {\n                    return 0;\n                }\n                if ((arg1 & 7) == 0)\n                {\n                    break;\n                }\n            } while (*arg1 != r8);\n            if ((arg1 & 7) != 0)\n            {\n                goto label_413130;\n            }\n        }\n        int64_t r9_5 = ((arg2 << 8) | arg2);\n        int64_t r9_6 = (r9_5 | (r9_5 << 0x10));\n        int64_t r9_7 = (r9_6 | (r9_6 << 0x20));\n        int64_t rax_8;\n        if (arg3 > 7)\n        {\n            rax_8 = (*arg1 ^ r9_7);\n            if ((((!rax_8) & (rax_8 - 0x101010101010101)) & 0x8080808080808080) == 0)\n            {\n                int64_t rax_12;\n                do\n                {\n                    arg3 = (arg3 - 8);\n                    arg1 = &arg1[8];\n                    if (arg3 <= 7)\n                    {\n                        break;\n                    }\n                    rax_12 = (*arg1 ^ r9_7);\n                } while ((((!rax_12) & (rax_12 - 0x101010101010101)) & 0x8080808080808080) == 0);\n            }\n        }\n        if ((((arg3 <= 7 || (arg3 > 7 && (((!rax_8) & (rax_8 - 0x101010101010101)) & 0x8080808080808080) != 0)) || (((arg3 > 7 && (((!rax_8) & (rax_8 - 0x101010101010101)) & 0x8080808080808080) == 0) && arg3 <= 7) && arg3 != 0)) || ((arg3 > 7 && (((!rax_8) & (rax_8 - 0x101010101010101)) & 0x8080808080808080) == 0) && arg3 > 7)))\n        {\n            if (arg2 == *arg1)\n            {\n                goto label_413130;\n            }\n            char* rcx_3 = &arg1[1];\n            void* rdi = &arg1[arg3];\n            while (true)\n            {\n                char* rax_15 = rcx_3;\n                if (rcx_3 == rdi)\n                {\n                    return 0;\n                }\n                rcx_3 = &rcx_3[1];\n                if (rcx_3[-1] == r8)\n                {\n                    return rax_15;\n                }\n            }\n        }\n    }\n    return 0;\n}\n\n"
        },
        {
            "funcName": "sub_413140",
            "funcStartAddr": "0x413140",
            "funcEndAddr": "0x4131e2",
            "decompiledFuncCode": "int64_t sub_413140(int64_t* arg1, struct timespec* arg2)\n{\n    int64_t rax = arg1[1];\n    int64_t rax_1;\n    if (rax > 0x3b9ac9ff)\n    {\n        *__errno_location() = 0x16;\n        rax_1 = 0xffffffff;\n    }\n    else\n    {\n        int64_t rbx_1 = *arg1;\n        int64_t var_20_1 = rax;\n        int64_t var_28;\n        if (rbx_1 > 0x1fa400)\n        {\n            do\n            {\n                var_28 = 0x1fa400;\n                rbx_1 = (rbx_1 - 0x1fa400);\n                rax_1 = nanosleep(&var_28, arg2);\n                if (rax_1 != 0)\n                {\n                    break;\n                }\n                int64_t var_20_2 = 0;\n            } while (rbx_1 > 0x1fa400);\n        }\n        if ((rbx_1 <= 0x1fa400 || (rbx_1 > 0x1fa400 && rax_1 == 0)))\n        {\n            var_28 = rbx_1;\n            rax_1 = nanosleep(&var_28, arg2);\n        }\n        if (((rbx_1 > 0x1fa400 && rax_1 != 0) && arg2 != 0))\n        {\n            arg2->tv_sec = (arg2->tv_sec + rbx_1);\n            return rax_1;\n        }\n    }\n    return rax_1;\n}\n\n"
        },
        {
            "funcName": "sub_4131f0",
            "funcStartAddr": "0x4131f0",
            "funcEndAddr": "0x41322b",
            "decompiledFuncCode": "int64_t sub_4131f0() __noreturn\n{\n    __fprintf_chk(stderr, 1, \"%s\\n\", dcgettext(nullptr, \"memory exhausted\", 5));\n    exit(data_61c518);\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_413230",
            "funcStartAddr": "0x413230",
            "funcEndAddr": "0x413245",
            "decompiledFuncCode": "int64_t sub_413230(void* arg1)\n{\n    int64_t rax = *(arg1 + 0x38);\n    if ((*(arg1 + 0x50) & 1) == 0)\n    {\n        /* jump -> rax */\n    }\n    *(arg1 + 0x48);\n    /* jump -> rax */\n}\n\n"
        },
        {
            "funcName": "sub_413250",
            "funcStartAddr": "0x413250",
            "funcEndAddr": "0x413265",
            "decompiledFuncCode": "int64_t sub_413250(void* arg1)\n{\n    int64_t rax = *(arg1 + 0x40);\n    if ((*(arg1 + 0x50) & 1) == 0)\n    {\n        /* jump -> rax */\n    }\n    *(arg1 + 0x48);\n    /* jump -> rax */\n}\n\n"
        },
        {
            "funcName": "sub_413270",
            "funcStartAddr": "0x413270",
            "funcEndAddr": "0x413300",
            "decompiledFuncCode": "int64_t sub_413270(int64_t* arg1, int64_t arg2, int64_t arg3)\n{\n    int64_t rbp;\n    int64_t r12;\n    if (arg3 == 0)\n    {\n        r12 = 0xf;\n        rbp = 0x10;\n    }\n    else\n    {\n        rbp = arg3;\n        r12 = (arg3 - 1);\n    }\n    arg1[6] = r12;\n    if (arg2 == 0)\n    {\n        arg2 = 0xfe0;\n    }\n    *arg1 = arg2;\n    int64_t* rax = sub_413230(arg1, arg2);\n    arg1[1] = rax;\n    if (rax == 0)\n    {\n        int64_t rcx;\n        int64_t rdx_3;\n        int64_t rsi;\n        int64_t* rdi_1;\n        int64_t r8;\n        rcx = obstack_alloc_failed_handler();\n        /* tailcall */\n        return _obstack_begin(rdi_1, rsi, rdx_3, rcx, r8);\n    }\n    void* rbp_2 = ((-rbp) & ((rax + r12) + 0x10));\n    void* rdx_1 = *arg1;\n    arg1[2] = rbp_2;\n    void* rdx_2 = (rdx_1 + rax);\n    arg1[3] = rbp_2;\n    *rax = rdx_2;\n    arg1[4] = rdx_2;\n    rax[1] = 0;\n    arg1[0xa] = (arg1[0xa] & 0xf9);\n    return 1;\n}\n\n"
        },
        {
            "funcName": "obstack_begin",
            "funcStartAddr": "0x413300",
            "funcEndAddr": "0x413311",
            "decompiledFuncCode": "int64_t _obstack_begin(int64_t* arg1, int64_t arg2, int64_t arg3, int64_t arg4, \n    int64_t arg5)\n{\n    arg1[0xa] = (arg1[0xa] & 0xfe);\n    arg1[7] = arg4;\n    arg1[8] = arg5;\n    /* tailcall */\n    return sub_413270(arg1, arg2, arg3);\n}\n\n"
        },
        {
            "funcName": "obstack_begin_1",
            "funcStartAddr": "0x413320",
            "funcEndAddr": "0x413335",
            "decompiledFuncCode": "int64_t _obstack_begin_1(int64_t* arg1, int64_t arg2, int64_t arg3, \n    int64_t arg4, int64_t arg5, int64_t arg6)\n{\n    arg1[0xa] = (arg1[0xa] | 1);\n    arg1[7] = arg4;\n    arg1[8] = arg5;\n    arg1[9] = arg6;\n    /* tailcall */\n    return sub_413270(arg1, arg2, arg3);\n}\n\n"
        },
        {
            "funcName": "obstack_newchunk",
            "funcStartAddr": "0x413340",
            "funcEndAddr": "0x413440",
            "decompiledFuncCode": "void* _obstack_newchunk(int64_t* arg1, int64_t arg2)\n{\n    uint64_t r13_1 = (arg1[3] - arg1[2]);\n    void* rbp = arg1[1];\n    int64_t rsi = (arg2 + r13_1);\n    int64_t rax;\n    rax = (arg2 + r13_1) < arg2;\n    int64_t rsi_1 = (rsi + arg1[6]);\n    bool c_1 = (rsi + arg1[6]) < rsi;\n    int64_t rbx = ((rsi_1 + (r13_1 >> 3)) + 0x64);\n    if (*arg1 >= rsi_1)\n    {\n        rsi_1 = *arg1;\n    }\n    if (rsi_1 >= rbx)\n    {\n        rbx = rsi_1;\n    }\n    if ((rax == 0 && c_1 == 0))\n    {\n        int64_t* rax_1 = sub_413230();\n        if (rax_1 != 0)\n        {\n            void* rsi_2 = (rax_1 + rbx);\n            arg1[1] = rax_1;\n            rax_1[1] = rbp;\n            arg1[4] = rsi_2;\n            *rax_1 = rsi_2;\n            int64_t rax_2 = arg1[6];\n            void* rbx_2 = (((rax_1 + rax_2) + 0x10) & (!rax_2));\n            void* rax_4 = memcpy(rbx_2, arg1[2], r13_1);\n            if ((arg1[0xa] & 2) == 0)\n            {\n                int64_t rax_5 = arg1[6];\n                rax_4 = ((!rax_5) & ((rbp + rax_5) + 0x10));\n                if (arg1[2] == rax_4)\n                {\n                    rax_1[1] = *(rbp + 8);\n                    rax_4 = sub_413250(arg1, rbp);\n                }\n            }\n            arg1[2] = rbx_2;\n            arg1[3] = (r13_1 + rbx_2);\n            arg1[0xa] = (arg1[0xa] & 0xfd);\n            return rax_4;\n        }\n    }\n    int64_t rsi_5;\n    void* rdi_2;\n    rsi_5 = obstack_alloc_failed_handler();\n    /* tailcall */\n    return _obstack_allocated_p(rdi_2, rsi_5);\n}\n\n"
        },
        {
            "funcName": "obstack_allocated_p",
            "funcStartAddr": "0x413440",
            "funcEndAddr": "0x413477",
            "decompiledFuncCode": "int64_t* _obstack_allocated_p(void* arg1, int64_t arg2)\n{\n    int64_t* rax = *(arg1 + 8);\n    if (rax == 0)\n    {\n        return rax;\n    }\n    do\n    {\n        if ((arg2 > rax && *rax >= arg2))\n        {\n            return 1;\n        }\n        rax = rax[1];\n    } while (rax != 0);\n    return 0;\n}\n\n"
        },
        {
            "funcName": "obstack_free",
            "funcStartAddr": "0x402f3c",
            "funcEndAddr": "0x4134e5",
            "decompiledFuncCode": "void _obstack_free(void* arg1, int64_t arg2)\n{\n    int64_t* rsi = *(arg1 + 8);\n    if (rsi != 0)\n    {\n        int64_t* r12_1;\n        do\n        {\n            if (rsi < arg2)\n            {\n                int64_t rax_1 = *rsi;\n                if (rax_1 >= arg2)\n                {\n                    *(arg1 + 0x18) = arg2;\n                    *(arg1 + 0x10) = arg2;\n                    *(arg1 + 0x20) = rax_1;\n                    *(arg1 + 8) = rsi;\n                    return;\n                }\n            }\n            r12_1 = rsi[1];\n            sub_413250(arg1);\n            *(arg1 + 0x50) = (*(arg1 + 0x50) | 2);\n            rsi = r12_1;\n        } while (r12_1 != 0);\n    }\n    if (arg2 != 0)\n    {\n        abort();\n        /* no return */\n    }\n}\n\n"
        },
        {
            "funcName": "obstack_memory_used",
            "funcStartAddr": "0x4134f0",
            "funcEndAddr": "0x413519",
            "decompiledFuncCode": "void* _obstack_memory_used(void* arg1)\n{\n    int64_t* rdx = *(arg1 + 8);\n    void* rax = nullptr;\n    if (rdx == 0)\n    {\n        return 0;\n    }\n    do\n    {\n        void* rcx_2 = (*rdx - rdx);\n        rdx = rdx[1];\n        rax = (rax + rcx_2);\n    } while (rdx != 0);\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_413520",
            "funcStartAddr": "0x413520",
            "funcEndAddr": "0x41357d",
            "decompiledFuncCode": "uint64_t sub_413520(FILE* arg1)\n{\n    int32_t* rbp = arg1;\n    uint64_t rax = __fpending(arg1);\n    int32_t rbx_1 = (*rbp & 0x20);\n    uint64_t rax_1 = sub_411f80(rbp);\n    if ((rbx_1 != 0 && rax_1 == 0))\n    {\n        *__errno_location() = 0;\n        rax_1 = 0xffffffff;\n    }\n    if (((rbx_1 != 0 && rax_1 != 0) || ((rbx_1 == 0 && rax_1 != 0) && rax != 0)))\n    {\n        rax_1 = 0xffffffff;\n    }\n    if (((rbx_1 == 0 && rax_1 != 0) && rax == 0))\n    {\n        int32_t* rax_2;\n        rax_2 = *__errno_location() != 9;\n        rax_1 = (-rax_2);\n    }\n    return rax_1;\n}\n\n"
        },
        {
            "funcName": "sub_413580",
            "funcStartAddr": "0x413580",
            "funcEndAddr": "0x41363c",
            "decompiledFuncCode": "int64_t sub_413580(double arg1 @ zmm0)\n{\n    if (((arg1 == -9.2233720368547758e+18 | (FCMP_UO(arg1, -9.2233720368547758e+18))) || (arg1 < -9.2233720368547758e+18 | (FCMP_UO(arg1, -9.2233720368547758e+18)))))\n    {\n        return -0x8000000000000000;\n    }\n    double zmm1 = 9.2233720368547758e+18;\n    if ((!((!(zmm1 == arg1 | (FCMP_UO(zmm1, arg1)))) && (!(zmm1 < arg1 | (FCMP_UO(zmm1, arg1)))))))\n    {\n        return 0x7fffffffffffffff;\n    }\n    int64_t rsi = (truncf(arg1, -0x8000000000000000));\n    arg1 = (arg1 - rsi);\n    arg1 = (arg1 * 1000000000.0);\n    int64_t rdx_1 = (truncf(arg1, -0x8000000000000000));\n    zmm1 = rdx_1;\n    int64_t rcx;\n    rcx = ((!(arg1 == zmm1 | (FCMP_UO(arg1, zmm1)))) && (!(arg1 < zmm1 | (FCMP_UO(arg1, zmm1)))));\n    int64_t rcx_1 = (rcx + rdx_1);\n    int64_t rax_2;\n    int64_t rdx_2;\n    rdx_2 = HIGHD((rcx_1 * 0x112e0be826d694b3));\n    rax_2 = LOWD((rcx_1 * 0x112e0be826d694b3));\n    int64_t rdx_4 = ((rdx_2 >> 0x1a) - (rcx_1 >> 0x3f));\n    int64_t rax_5 = (rdx_4 + rsi);\n    if ((rcx_1 - (rdx_4 * 0x3b9aca00)) < 0)\n    {\n        return (rax_5 - 1);\n    }\n    return rax_5;\n}\n\n"
        },
        {
            "funcName": "sub_413640",
            "funcStartAddr": "0x413640",
            "funcEndAddr": "0x41368e",
            "decompiledFuncCode": "uint64_t sub_413640(int32_t arg1, int32_t arg2)\n{\n    if (arg1 <= 2)\n    {\n        int32_t rax_1 = sub_413690(arg1, arg2);\n        int32_t* rax_2 = __errno_location();\n        int32_t r13 = *rax_2;\n        close(arg1);\n        *rax_2 = r13;\n        return rax_1;\n    }\n    return arg1;\n}\n\n"
        },
        {
            "funcName": "sub_413690",
            "funcStartAddr": "0x413690",
            "funcEndAddr": "0x4136aa",
            "decompiledFuncCode": "int64_t sub_413690(int32_t arg1, int32_t arg2)\n{\n    int32_t rsi = (arg2 & 0x80000);\n    if (rsi != 0)\n    {\n        rsi = 0x406;\n    }\n    /* tailcall */\n    return sub_412000(arg1, rsi, 3);\n}\n\n"
        },
        {
            "funcName": "sub_4136b0",
            "funcStartAddr": "0x4136b0",
            "funcEndAddr": "0x413743",
            "decompiledFuncCode": "FILE* sub_4136b0(char* arg1, char* arg2)\n{\n    FILE* rax = fopen(arg1, arg2);\n    FILE* rbx = rax;\n    if (rax != 0)\n    {\n        int32_t rax_1 = fileno(rax);\n        if (rax_1 <= 2)\n        {\n            int32_t rax_3 = sub_413ea0(rax_1);\n            if (rax_3 < 0)\n            {\n                int32_t* rax_7 = __errno_location();\n                FILE* rdi_5 = rbx;\n                rbx = nullptr;\n                int32_t r12_2 = *rax_7;\n                sub_411f80(rdi_5);\n                *rax_7 = r12_2;\n            }\n            else\n            {\n                int32_t rax_4 = sub_411f80(rbx);\n                FILE* rax_5;\n                if (rax_4 == 0)\n                {\n                    rax_5 = fdopen(rax_3, arg2);\n                    rbx = rax_5;\n                }\n                if ((rax_4 != 0 || (rax_4 == 0 && rax_5 == 0)))\n                {\n                    int32_t* rax_6 = __errno_location();\n                    int32_t rbp_1 = *rax_6;\n                    close(rax_3);\n                    *rax_6 = rbp_1;\n                    rbx = nullptr;\n                }\n            }\n        }\n    }\n    return rbx;\n}\n\n"
        },
        {
            "funcName": "sub_413750",
            "funcStartAddr": "0x413750",
            "funcEndAddr": "0x413cb2",
            "decompiledFuncCode": "char* sub_413750()\n{\n    char* rax = nl_langinfo(0xe);\n    int64_t r15 = data_61cd58;\n    char* rbx = rax;\n    if (rax == 0)\n    {\n        rbx = &data_41655e[0x13];\n    }\n    if (r15 == 0)\n    {\n        char* rax_6 = getenv(\"CHARSETALIASDIR\");\n        char* r13_1 = rax_6;\n        size_t rdi_7;\n        uint64_t r12_1;\n        uint64_t r14_1;\n        if ((rax_6 == 0 || (rax_6 != 0 && *rax_6 == 0)))\n        {\n            rdi_7 = 0x73;\n            r12_1 = 0x65;\n            r14_1 = 0x64;\n            r13_1 = \"/home/dongkwan/data/scripts/gnu_\u2026\";\n        }\n        char* rbp_3;\n        if ((rax_6 != 0 && *rax_6 != 0))\n        {\n            uint64_t rax_7 = strlen(rax_6);\n            r12_1 = rax_7;\n            r14_1 = rax_7;\n            size_t rdi_6;\n            if (rax_7 == 0)\n            {\n                rdi_6 = 0xe;\n            }\n            else if (r13_1[(rax_7 - 1)] != 0x2f)\n            {\n                rdi_7 = (rax_7 + 0xf);\n                r12_1 = (r12_1 + 1);\n            }\n            else\n            {\n                rdi_6 = (rax_7 + 0xe);\n            }\n            if ((rax_7 == 0 || (rax_7 != 0 && r13_1[(rax_7 - 1)] == 0x2f)))\n            {\n                char* rax_8 = malloc(rdi_6);\n                rbp_3 = rax_8;\n                if (rax_8 == 0)\n                {\n                    goto label_41384c;\n                }\n                memcpy(rbp_3, r13_1, r14_1);\n                goto label_413896;\n            }\n        }\n        char* rax_9 = malloc(rdi_7);\n        rbp_3 = rax_9;\n        if (rax_9 == 0)\n        {\n        label_41384c:\n            r15 = 0x416571;\n        }\n        else\n        {\n            memcpy(rbp_3, r13_1, r14_1);\n            rbp_3[r14_1] = 0x2f;\n        label_413896:\n            int64_t* r12_2 = &rbp_3[r12_1];\n            *r12_2 = 0x2e74657372616863;\n            *(r12_2 + 0xc) = 0x73;\n            r12_2[1] = 0x61696c61;\n            int32_t rax_11 = open(rbp_3, 0);\n            void* var_d0_1;\n            FILE* rax_12;\n            if (rax_11 >= 0)\n            {\n                r15 = 0;\n                rax_12 = fdopen(rax_11, &data_4168fa);\n                var_d0_1 = nullptr;\n                if (rax_12 == 0)\n                {\n                    close(rax_11);\n                }\n                else\n                {\n                    while (true)\n                    {\n                        char* rax_14 = rax_12->_IO_read_ptr;\n                        uint32_t rdi_13;\n                        if (rax_14 < rax_12->_IO_read_end)\n                        {\n                            do\n                            {\n                                rax_12->_IO_read_ptr = &rax_14[1];\n                                rdi_13 = *rax_14;\n                            label_41394c:\n                                if ((rdi_13 - 9) <= 1)\n                                {\n                                    break;\n                                }\n                                if (rdi_13 == 0x20)\n                                {\n                                    break;\n                                }\n                                if (rdi_13 == 0x23)\n                                {\n                                    break;\n                                }\n                                ungetc(rdi_13, rax_12);\n                                int64_t var_b8;\n                                int64_t var_78;\n                                if (fscanf(rax_12, \"%50s %50s\", &var_b8, &var_78) <= 1)\n                                {\n                                    goto label_413adb;\n                                }\n                                int64_t* rcx_2 = &var_b8;\n                            label_413988:\n                                int32_t rdx_5 = *rcx_2;\n                                rcx_2 = (rcx_2 + 4);\n                                uint32_t rax_20 = (((rdx_5 - 0x1010101) & (!rdx_5)) & 0x80808080);\n                                if (rax_20 == 0)\n                                {\n                                    goto label_413988;\n                                }\n                                uint32_t rdx_8 = (rax_20 >> 0x10);\n                                int32_t temp0_1 = (rax_20 & 0x8080);\n                                bool cond:2_1 = temp0_1 == 0;\n                                if (temp0_1 == 0)\n                                {\n                                    rax_20 = rdx_8;\n                                }\n                                void* rdx_9 = (rcx_2 + 2);\n                                if (cond:2_1)\n                                {\n                                    rcx_2 = rdx_9;\n                                }\n                                char rdx_10 = rax_20;\n                                int64_t* rdx_11 = &var_78;\n                                void* rcx_4 = ((rcx_2 - 3) - &var_b8);\n                            label_4139c2:\n                                int32_t rsi_5 = *rdx_11;\n                                rdx_11 = (rdx_11 + 4);\n                                uint32_t rax_23 = (((rsi_5 - 0x1010101) & (!rsi_5)) & 0x80808080);\n                                if (rax_23 == 0)\n                                {\n                                    goto label_4139c2;\n                                }\n                                uint32_t rsi_8 = (rax_23 >> 0x10);\n                                int32_t temp2_1 = (rax_23 & 0x8080);\n                                bool cond:3_1 = temp2_1 == 0;\n                                if (temp2_1 == 0)\n                                {\n                                    rax_23 = rsi_8;\n                                }\n                                void* rsi_9 = (rdx_11 + 2);\n                                if (cond:3_1)\n                                {\n                                    rdx_11 = rsi_9;\n                                }\n                                char rsi_10 = rax_23;\n                                void* rdx_13 = ((rdx_11 - 3) - &var_78);\n                                void* rax_24 = (rcx_4 + rdx_13);\n                                void* var_c0 = rdx_13;\n                                int64_t rax_25;\n                                void* rcx_6;\n                                void* rdx_14;\n                                if (var_d0_1 != 0)\n                                {\n                                    void* rax_31 = (rax_24 + var_d0_1);\n                                    var_d0_1 = (rax_31 + 2);\n                                    rax_25 = realloc(r15, (rax_31 + 3));\n                                    rdx_14 = var_c0;\n                                    rcx_6 = rcx_4;\n                                }\n                                else\n                                {\n                                    var_d0_1 = (rax_24 + 2);\n                                    rax_25 = malloc((rax_24 + 3));\n                                    rcx_6 = rcx_4;\n                                    rdx_14 = var_c0;\n                                }\n                                if (rax_25 == 0)\n                                {\n                                    int64_t rdi_26 = r15;\n                                    r15 = 0x416571;\n                                    free(rdi_26);\n                                    sub_411f80(rax_12);\n                                    goto label_4138d7;\n                                }\n                                int32_t rcx_7 = (rcx_6 + 1);\n                                void* rdi_17 = (var_d0_1 - rdx_14);\n                                char* rsi_13 = (((-2 - rcx_6) + rdi_17) + rax_25);\n                                if (rcx_7 >= 8)\n                                {\n                                    *rsi_13 = var_b8;\n                                    uint64_t r9_3 = rcx_7;\n                                    *((rsi_13 + r9_3) - 8) = *(&var_c0 + r9_3);\n                                    void* r9_5 = (&rsi_13[8] & 0xfffffffffffffff8);\n                                    void* rsi_16 = (rsi_13 - r9_5);\n                                    int64_t* r10_2 = (&var_b8 - rsi_16);\n                                    int32_t rcx_11 = ((rcx_7 + rsi_16) & 0xfffffff8);\n                                    if (rcx_11 >= 8)\n                                    {\n                                        int32_t rcx_12 = (rcx_11 & 0xfffffff8);\n                                        int32_t rsi_17 = 0;\n                                    label_413b9b:\n                                        uint64_t r8_1 = rsi_17;\n                                        rsi_17 = (rsi_17 + 8);\n                                        *(r9_5 + r8_1) = *(r10_2 + r8_1);\n                                        if (rsi_17 < rcx_12)\n                                        {\n                                            goto label_413b9b;\n                                        }\n                                    }\n                                }\n                                else if ((rcx_7 & 4) != 0)\n                                {\n                                    uint64_t rcx_15 = rcx_7;\n                                    *rsi_13 = var_b8;\n                                    *((rsi_13 + rcx_15) - 4) = *(&*var_c0[4] + rcx_15);\n                                }\n                                else if (rcx_7 != 0)\n                                {\n                                    *rsi_13 = var_b8;\n                                    if ((rcx_7 & 2) != 0)\n                                    {\n                                        uint64_t rcx_16 = rcx_7;\n                                        *((rsi_13 + rcx_16) - 2) = *(&*var_c0[6] + rcx_16);\n                                    }\n                                }\n                                int32_t rdx_15 = (rdx_14 + 1);\n                                void* rcx_8 = ((rax_25 + rdi_17) - 1);\n                                if (rdx_15 >= 8)\n                                {\n                                    *rcx_8 = var_78;\n                                    uint64_t rsi_19 = rdx_15;\n                                    void var_80;\n                                    *((rcx_8 + rsi_19) - 8) = *(&var_80 + rsi_19);\n                                    void* rdi_24 = ((rcx_8 + 8) & 0xfffffffffffffff8);\n                                    void* rcx_13 = (rcx_8 - rdi_24);\n                                    int64_t* r9_6 = (&var_78 - rcx_13);\n                                    int32_t rdx_19 = ((rdx_15 + rcx_13) & 0xfffffff8);\n                                    if (rdx_19 >= 8)\n                                    {\n                                        int32_t rdx_20 = (rdx_19 & 0xfffffff8);\n                                        int32_t rcx_14 = 0;\n                                    label_413be9:\n                                        uint64_t rsi_20 = rcx_14;\n                                        rcx_14 = (rcx_14 + 8);\n                                        *(rdi_24 + rsi_20) = *(r9_6 + rsi_20);\n                                        if (rcx_14 < rdx_20)\n                                        {\n                                            goto label_413be9;\n                                        }\n                                    }\n                                }\n                                else if ((rdx_15 & 4) != 0)\n                                {\n                                    uint64_t rdx_21 = rdx_15;\n                                    *rcx_8 = var_78;\n                                    void var_7c;\n                                    *((rcx_8 + rdx_21) - 4) = *(&var_7c + rdx_21);\n                                }\n                                else if (rdx_15 != 0)\n                                {\n                                    *rcx_8 = var_78;\n                                    if ((rdx_15 & 2) != 0)\n                                    {\n                                        uint64_t rsi_23 = rdx_15;\n                                        void var_7a;\n                                        *((rcx_8 + rsi_23) - 2) = *(&var_7a + rsi_23);\n                                    }\n                                }\n                                r15 = rax_25;\n                                rax_14 = rax_12->_IO_read_ptr;\n                            } while (rax_14 < rax_12->_IO_read_end);\n                            if (((!((rdi_13 - 9) > 1 && rdi_13 == 0x23)) && (rdi_13 - 9) <= 1))\n                            {\n                                continue;\n                            }\n                            if (((rdi_13 - 9) > 1 && rdi_13 == 0x23))\n                            {\n                                int32_t rax_29;\n                                bool rdx_17;\n                                do\n                                {\n                                    char* rax_30 = rax_12->_IO_read_ptr;\n                                    if (rax_30 < rax_12->_IO_read_end)\n                                    {\n                                        rax_12->_IO_read_ptr = &rax_30[1];\n                                        rax_29 = *rax_30;\n                                        rdx_17 = true;\n                                    }\n                                    else\n                                    {\n                                        rax_29 = __uflow(rax_12);\n                                        rdx_17 = rax_29 != 0xffffffff;\n                                    }\n                                    if (rax_29 == 0xa)\n                                    {\n                                        break;\n                                    }\n                                } while (rdx_17 != 0);\n                                if (rax_29 == 0xffffffff)\n                                {\n                                    break;\n                                }\n                                continue;\n                            }\n                        }\n                        uint32_t rax_26 = __uflow(rax_12);\n                        rdi_13 = rax_26;\n                        if (rax_26 != 0xffffffff)\n                        {\n                            goto label_41394c;\n                        }\n                        break;\n                    }\n                label_413adb:\n                    sub_411f80(rax_12);\n                    if (var_d0_1 != 0)\n                    {\n                        *(r15 + var_d0_1) = 0;\n                    }\n                }\n            }\n            if ((((rax_11 >= 0 && rax_12 == 0) || rax_11 < 0) || ((rax_11 >= 0 && rax_12 != 0) && var_d0_1 == 0)))\n            {\n                r15 = 0x416571;\n            }\n        label_4138d7:\n            free(rbp_3);\n        }\n        data_61cd58 = r15;\n    }\n    char rbp_2 = *r15;\n    if (rbp_2 != 0)\n    {\n        while (true)\n        {\n            if ((strcmp(rbx, r15) != 0 && (rbp_2 != 0x2a || (rbp_2 == 0x2a && *(r15 + 1) != 0))))\n            {\n                char* rbp_1 = ((r15 + strlen(r15)) + 1);\n                r15 = &rbp_1[(strlen(rbp_1) + 1)];\n                rbp_2 = *r15;\n                if (rbp_2 == 0)\n                {\n                    break;\n                }\n                continue;\n            }\n            rbx = ((r15 + strlen(r15)) + 1);\n            break;\n        }\n    }\n    if (*rbx == 0)\n    {\n        rbx = \"ASCII\";\n    }\n    return rbx;\n}\n\n"
        },
        {
            "funcName": "sub_413cc0",
            "funcStartAddr": "0x413cc0",
            "funcEndAddr": "0x413d74",
            "decompiledFuncCode": "uint64_t sub_413cc0(char* arg1, int64_t arg2, char* arg3, int64_t arg4)\n{\n    int64_t r14 = arg2;\n    int64_t r13 = arg4;\n    char* r12 = arg1;\n    char* rbp = arg3;\n    int32_t* rax = __errno_location();\n    do\n    {\n        *rax = 0;\n        int64_t rax_4 = strcoll(r12, rbp);\n        if (rax_4 != 0)\n        {\n            return rax_4;\n        }\n        int64_t rbx_1 = (strlen(r12) + 1);\n        r12 = &r12[rbx_1];\n        rbp = &rbp[(strlen(rbp) + 1)];\n        r13 = (r13 - (strlen(rbp) + 1));\n        int64_t temp0_1 = r14;\n        r14 = (r14 - rbx_1);\n        if (temp0_1 == rbx_1)\n        {\n            int32_t rax_5;\n            rax_5 = r13 != 0;\n            return (-rax_5);\n        }\n    } while (r13 != 0);\n    return 1;\n}\n\n"
        },
        {
            "funcName": "sub_413d80",
            "funcStartAddr": "0x413d80",
            "funcEndAddr": "0x413e21",
            "decompiledFuncCode": "uint64_t sub_413d80(char* arg1, uint64_t arg2, char* arg3, int64_t arg4)\n{\n    int32_t rax_1;\n    int32_t rdx_2;\n    if (arg2 == arg4)\n    {\n        rax_1 = memcmp(arg1, arg3, arg2);\n        char var_40;\n        var_40 = rax_1;\n        if (rax_1 == 0)\n        {\n            rdx_2 = var_40;\n            *__errno_location() = 0;\n        }\n    }\n    if ((arg2 != arg4 || (arg2 == arg4 && rax_1 != 0)))\n    {\n        char* r15_1 = &arg1[arg2];\n        char* r14_1 = &arg3[arg4];\n        char r9_1 = *r15_1;\n        char r8_1 = *r14_1;\n        *r15_1 = 0;\n        *r14_1 = 0;\n        rdx_2 = sub_413cc0(arg1, (arg2 + 1), arg3, (arg4 + 1));\n        *r15_1 = r9_1;\n        *r14_1 = r8_1;\n    }\n    return rdx_2;\n}\n\n"
        },
        {
            "funcName": "sub_413e30",
            "funcStartAddr": "0x413e30",
            "funcEndAddr": "0x413e93",
            "decompiledFuncCode": "int64_t sub_413e30(char* arg1, uint64_t arg2, char* arg3, int64_t arg4)\n{\n    if ((arg2 == arg4 && memcmp(arg1, arg3, arg2) == 0))\n    {\n        *__errno_location() = 0;\n        return 0;\n    }\n    /* tailcall */\n    return sub_413cc0(arg1, arg2, arg3, arg4);\n}\n\n"
        },
        {
            "funcName": "sub_413ea0",
            "funcStartAddr": "0x413ea0",
            "funcEndAddr": "0x413eae",
            "decompiledFuncCode": "int64_t sub_413ea0(int32_t arg1)\n{\n    /* tailcall */\n    return sub_412000(arg1, 0, 3);\n}\n\n"
        },
        {
            "funcName": "init",
            "funcStartAddr": "0x413eb0",
            "funcEndAddr": "0x413f0d",
            "decompiledFuncCode": "void init()\n{\n    _init();\n}\n\n"
        },
        {
            "funcName": "fini",
            "funcStartAddr": "0x413f10",
            "funcEndAddr": "0x413f11",
            "decompiledFuncCode": "void fini()\n{\n    return;\n}\n\n"
        },
        {
            "funcName": "sub_413f20",
            "funcStartAddr": "0x413f20",
            "funcEndAddr": "0x413f38",
            "decompiledFuncCode": "int64_t sub_413f20(void (* arg1)(void*))\n{\n    int64_t rdx = data_61c3e8;\n    /* tailcall */\n    return __cxa_atexit(arg1, nullptr, rdx);\n}\n\n"
        },
        {
            "funcName": "sub_413f38",
            "funcStartAddr": "0x413f38",
            "funcEndAddr": "0x413f58",
            "decompiledFuncCode": "int64_t sub_413f38(int64_t arg1, int64_t arg2, int64_t arg3)\n{\n    int64_t* rbx = &data_61be20;\n    while (true)\n    {\n        int64_t rax_1 = *rbx;\n        if (rax_1 == -1)\n        {\n            break;\n        }\n        rax_1();\n        rbx = (rbx - 8);\n    }\n    return arg3;\n}\n\n"
        }
    ]
}