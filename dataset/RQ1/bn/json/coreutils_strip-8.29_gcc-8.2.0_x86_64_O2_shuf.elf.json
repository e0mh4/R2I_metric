{
    "decompilerName": "binaryNinja",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shuf.elf",
    "isStripped": "True",
    "compilerName": "gcc",
    "optLevel": "-O",
    "funcCount": 196,
    "funcInfo": [
        {
            "funcName": "sub_4018d0",
            "funcStartAddr": "0x4018d0",
            "funcEndAddr": "0x4018dc",
            "decompiledFuncCode": "int64_t sub_4018d0()\n{\n    int64_t var_8 = data_60f008;\n    /* jump -> data_60f010 */\n}\n\n"
        },
        {
            "funcName": "sub_4018e6",
            "funcStartAddr": "0x4018e6",
            "funcEndAddr": "0x4018f0",
            "decompiledFuncCode": "int64_t sub_4018e6()\n{\n    int64_t var_8 = 0;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401906",
            "funcStartAddr": "0x401906",
            "funcEndAddr": "0x401910",
            "decompiledFuncCode": "int64_t sub_401906()\n{\n    int64_t var_8 = 2;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401926",
            "funcStartAddr": "0x401926",
            "funcEndAddr": "0x401930",
            "decompiledFuncCode": "int64_t sub_401926()\n{\n    int64_t var_8 = 4;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401946",
            "funcStartAddr": "0x401946",
            "funcEndAddr": "0x401950",
            "decompiledFuncCode": "int64_t sub_401946()\n{\n    int64_t var_8 = 6;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401966",
            "funcStartAddr": "0x401966",
            "funcEndAddr": "0x401970",
            "decompiledFuncCode": "int64_t sub_401966()\n{\n    int64_t var_8 = 8;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401976",
            "funcStartAddr": "0x401976",
            "funcEndAddr": "0x401980",
            "decompiledFuncCode": "int64_t sub_401976()\n{\n    int64_t var_8 = 9;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401986",
            "funcStartAddr": "0x401986",
            "funcEndAddr": "0x401990",
            "decompiledFuncCode": "int64_t sub_401986()\n{\n    int64_t var_8 = 0xa;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401996",
            "funcStartAddr": "0x401996",
            "funcEndAddr": "0x4019a0",
            "decompiledFuncCode": "int64_t sub_401996()\n{\n    int64_t var_8 = 0xb;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_4019a6",
            "funcStartAddr": "0x4019a6",
            "funcEndAddr": "0x4019b0",
            "decompiledFuncCode": "int64_t sub_4019a6()\n{\n    int64_t var_8 = 0xc;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_4019b6",
            "funcStartAddr": "0x4019b6",
            "funcEndAddr": "0x4019c0",
            "decompiledFuncCode": "int64_t sub_4019b6()\n{\n    int64_t var_8 = 0xd;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_4019c6",
            "funcStartAddr": "0x4019c6",
            "funcEndAddr": "0x4019d0",
            "decompiledFuncCode": "int64_t sub_4019c6()\n{\n    int64_t var_8 = 0xe;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_4019d6",
            "funcStartAddr": "0x4019d6",
            "funcEndAddr": "0x4019e0",
            "decompiledFuncCode": "int64_t sub_4019d6()\n{\n    int64_t var_8 = 0xf;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_4019e6",
            "funcStartAddr": "0x4019e6",
            "funcEndAddr": "0x4019f0",
            "decompiledFuncCode": "int64_t sub_4019e6()\n{\n    int64_t var_8 = 0x10;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_4019f6",
            "funcStartAddr": "0x4019f6",
            "funcEndAddr": "0x401a00",
            "decompiledFuncCode": "int64_t sub_4019f6()\n{\n    int64_t var_8 = 0x11;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401a06",
            "funcStartAddr": "0x401a06",
            "funcEndAddr": "0x401a10",
            "decompiledFuncCode": "int64_t sub_401a06()\n{\n    int64_t var_8 = 0x12;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401a16",
            "funcStartAddr": "0x401a16",
            "funcEndAddr": "0x401a20",
            "decompiledFuncCode": "int64_t sub_401a16()\n{\n    int64_t var_8 = 0x13;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401a26",
            "funcStartAddr": "0x401a26",
            "funcEndAddr": "0x401a30",
            "decompiledFuncCode": "int64_t sub_401a26()\n{\n    int64_t var_8 = 0x14;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401a36",
            "funcStartAddr": "0x401a36",
            "funcEndAddr": "0x401a40",
            "decompiledFuncCode": "int64_t sub_401a36()\n{\n    int64_t var_8 = 0x15;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401a46",
            "funcStartAddr": "0x401a46",
            "funcEndAddr": "0x401a50",
            "decompiledFuncCode": "int64_t sub_401a46()\n{\n    int64_t var_8 = 0x16;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401a56",
            "funcStartAddr": "0x401a56",
            "funcEndAddr": "0x401a60",
            "decompiledFuncCode": "int64_t sub_401a56()\n{\n    int64_t var_8 = 0x17;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401a66",
            "funcStartAddr": "0x401a66",
            "funcEndAddr": "0x401a70",
            "decompiledFuncCode": "int64_t sub_401a66()\n{\n    int64_t var_8 = 0x18;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401a76",
            "funcStartAddr": "0x401a76",
            "funcEndAddr": "0x401a80",
            "decompiledFuncCode": "int64_t sub_401a76()\n{\n    int64_t var_8 = 0x19;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401a86",
            "funcStartAddr": "0x401a86",
            "funcEndAddr": "0x401a90",
            "decompiledFuncCode": "int64_t sub_401a86()\n{\n    int64_t var_8 = 0x1a;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401a96",
            "funcStartAddr": "0x401a96",
            "funcEndAddr": "0x401aa0",
            "decompiledFuncCode": "int64_t sub_401a96()\n{\n    int64_t var_8 = 0x1b;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401aa6",
            "funcStartAddr": "0x401aa6",
            "funcEndAddr": "0x401ab0",
            "decompiledFuncCode": "int64_t sub_401aa6()\n{\n    int64_t var_8 = 0x1c;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401ab6",
            "funcStartAddr": "0x401ab6",
            "funcEndAddr": "0x401ac0",
            "decompiledFuncCode": "int64_t sub_401ab6()\n{\n    int64_t var_8 = 0x1d;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401ac6",
            "funcStartAddr": "0x401ac6",
            "funcEndAddr": "0x401ad0",
            "decompiledFuncCode": "int64_t sub_401ac6()\n{\n    int64_t var_8 = 0x1e;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401ad6",
            "funcStartAddr": "0x401ad6",
            "funcEndAddr": "0x401ae0",
            "decompiledFuncCode": "int64_t sub_401ad6()\n{\n    int64_t var_8 = 0x1f;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401ae6",
            "funcStartAddr": "0x401ae6",
            "funcEndAddr": "0x401af0",
            "decompiledFuncCode": "int64_t sub_401ae6()\n{\n    int64_t var_8 = 0x20;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401af6",
            "funcStartAddr": "0x401af6",
            "funcEndAddr": "0x401b00",
            "decompiledFuncCode": "int64_t sub_401af6()\n{\n    int64_t var_8 = 0x21;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401b06",
            "funcStartAddr": "0x401b06",
            "funcEndAddr": "0x401b10",
            "decompiledFuncCode": "int64_t sub_401b06()\n{\n    int64_t var_8 = 0x22;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401b16",
            "funcStartAddr": "0x401b16",
            "funcEndAddr": "0x401b20",
            "decompiledFuncCode": "int64_t sub_401b16()\n{\n    int64_t var_8 = 0x23;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401b26",
            "funcStartAddr": "0x401b26",
            "funcEndAddr": "0x401b30",
            "decompiledFuncCode": "int64_t sub_401b26()\n{\n    int64_t var_8 = 0x24;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401b36",
            "funcStartAddr": "0x401b36",
            "funcEndAddr": "0x401b40",
            "decompiledFuncCode": "int64_t sub_401b36()\n{\n    int64_t var_8 = 0x25;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401b46",
            "funcStartAddr": "0x401b46",
            "funcEndAddr": "0x401b50",
            "decompiledFuncCode": "int64_t sub_401b46()\n{\n    int64_t var_8 = 0x26;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401b56",
            "funcStartAddr": "0x401b56",
            "funcEndAddr": "0x401b60",
            "decompiledFuncCode": "int64_t sub_401b56()\n{\n    int64_t var_8 = 0x27;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401b66",
            "funcStartAddr": "0x401b66",
            "funcEndAddr": "0x401b70",
            "decompiledFuncCode": "int64_t sub_401b66()\n{\n    int64_t var_8 = 0x28;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401b76",
            "funcStartAddr": "0x401b76",
            "funcEndAddr": "0x401b80",
            "decompiledFuncCode": "int64_t sub_401b76()\n{\n    int64_t var_8 = 0x29;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401b86",
            "funcStartAddr": "0x401b86",
            "funcEndAddr": "0x401b90",
            "decompiledFuncCode": "int64_t sub_401b86()\n{\n    int64_t var_8 = 0x2a;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401b96",
            "funcStartAddr": "0x401b96",
            "funcEndAddr": "0x401ba0",
            "decompiledFuncCode": "int64_t sub_401b96()\n{\n    int64_t var_8 = 0x2b;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401ba6",
            "funcStartAddr": "0x401ba6",
            "funcEndAddr": "0x401bb0",
            "decompiledFuncCode": "int64_t sub_401ba6()\n{\n    int64_t var_8 = 0x2c;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401bb6",
            "funcStartAddr": "0x401bb6",
            "funcEndAddr": "0x401bc0",
            "decompiledFuncCode": "int64_t sub_401bb6()\n{\n    int64_t var_8 = 0x2d;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401bc6",
            "funcStartAddr": "0x401bc6",
            "funcEndAddr": "0x401bd0",
            "decompiledFuncCode": "int64_t sub_401bc6()\n{\n    int64_t var_8 = 0x2e;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401bd6",
            "funcStartAddr": "0x401bd6",
            "funcEndAddr": "0x401be0",
            "decompiledFuncCode": "int64_t sub_401bd6()\n{\n    int64_t var_8 = 0x2f;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401be6",
            "funcStartAddr": "0x401be6",
            "funcEndAddr": "0x401bf0",
            "decompiledFuncCode": "int64_t sub_401be6()\n{\n    int64_t var_8 = 0x30;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401c06",
            "funcStartAddr": "0x401c06",
            "funcEndAddr": "0x401c10",
            "decompiledFuncCode": "int64_t sub_401c06()\n{\n    int64_t var_8 = 0x32;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401c26",
            "funcStartAddr": "0x401c26",
            "funcEndAddr": "0x401c30",
            "decompiledFuncCode": "int64_t sub_401c26()\n{\n    int64_t var_8 = 0x34;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401c46",
            "funcStartAddr": "0x401c46",
            "funcEndAddr": "0x401c50",
            "decompiledFuncCode": "int64_t sub_401c46()\n{\n    int64_t var_8 = 0x36;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401c66",
            "funcStartAddr": "0x401c66",
            "funcEndAddr": "0x401c70",
            "decompiledFuncCode": "int64_t sub_401c66()\n{\n    int64_t var_8 = 0x38;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401c76",
            "funcStartAddr": "0x401c76",
            "funcEndAddr": "0x401c80",
            "decompiledFuncCode": "int64_t sub_401c76()\n{\n    int64_t var_8 = 0x39;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401c86",
            "funcStartAddr": "0x401c86",
            "funcEndAddr": "0x401c90",
            "decompiledFuncCode": "int64_t sub_401c86()\n{\n    int64_t var_8 = 0x3a;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401c96",
            "funcStartAddr": "0x401c96",
            "funcEndAddr": "0x401ca0",
            "decompiledFuncCode": "int64_t sub_401c96()\n{\n    int64_t var_8 = 0x3b;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401ca6",
            "funcStartAddr": "0x401ca6",
            "funcEndAddr": "0x401cb0",
            "decompiledFuncCode": "int64_t sub_401ca6()\n{\n    int64_t var_8 = 0x3c;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401cb6",
            "funcStartAddr": "0x401cb6",
            "funcEndAddr": "0x401cc0",
            "decompiledFuncCode": "int64_t sub_401cb6()\n{\n    int64_t var_8 = 0x3d;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401cc6",
            "funcStartAddr": "0x401cc6",
            "funcEndAddr": "0x401cd0",
            "decompiledFuncCode": "int64_t sub_401cc6()\n{\n    int64_t var_8 = 0x3e;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401cd6",
            "funcStartAddr": "0x401cd6",
            "funcEndAddr": "0x401ce0",
            "decompiledFuncCode": "int64_t sub_401cd6()\n{\n    int64_t var_8 = 0x3f;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401ce6",
            "funcStartAddr": "0x401ce6",
            "funcEndAddr": "0x401cf0",
            "decompiledFuncCode": "int64_t sub_401ce6()\n{\n    int64_t var_8 = 0x40;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401d06",
            "funcStartAddr": "0x401d06",
            "funcEndAddr": "0x401d10",
            "decompiledFuncCode": "int64_t sub_401d06()\n{\n    int64_t var_8 = 0x42;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401d26",
            "funcStartAddr": "0x401d26",
            "funcEndAddr": "0x401d30",
            "decompiledFuncCode": "int64_t sub_401d26()\n{\n    int64_t var_8 = 0x44;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "sub_401d46",
            "funcStartAddr": "0x401d46",
            "funcEndAddr": "0x401d50",
            "decompiledFuncCode": "int64_t sub_401d46()\n{\n    int64_t var_8 = 0x46;\n    /* tailcall */\n    return sub_4018d0();\n}\n\n"
        },
        {
            "funcName": "main",
            "funcStartAddr": "0x401da0",
            "funcEndAddr": "0x402b75",
            "decompiledFuncCode": "int32_t main(int32_t argc, char** argv, char** envp)\n{\n    int64_t r15;\n    int64_t var_8 = r15;\n    FILE*** r14 = ffffffffffffffff;\n    char* r13 = nullptr;\n    bool r12 = false;\n    char** rbp = argv;\n    uint64_t rbx = argc;\n    int64_t rcx;\n    int64_t rdx;\n    uint64_t r8;\n    ssize_t r9;\n    rcx = sub_403430(*argv);\n    void var_108;\n    int32_t var_100;\n    setlocale(6, &data_40c104[0x1b], rdx, rcx, r8, r9, var_108, var_100);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_\u2026\");\n    textdomain(\"coreutils\");\n    sub_409f90(sub_403000);\n    bool var_cd = false;\n    char var_cf = 0xa;\n    char* var_f8 = nullptr;\n    FILE*** var_100_1 = ffffffffffffffff;\n    int64_t var_f0 = 0;\n    char var_ce = 0;\n    while (true)\n    {\n        int32_t rax_1 = getopt_long(rbx, rbp, \"ei:n:o:rz\", &data_40a6a0, nullptr);\n        bool var_e8;\n        FILE*** var_c8;\n        int32_t r8_4;\n        if (rax_1 != 0xffffffff)\n        {\n            bool cond:0_1 = rax_1 <= 0x6e;\n            if (rax_1 == 0x6e)\n            {\n                int32_t rax_12 = sub_406b20(data_60f4c8, nullptr, 0xa, &var_c8, nullptr);\n                if (rax_12 == 0)\n                {\n                    FILE*** rax_13 = var_c8;\n                    if (var_100_1 <= rax_13)\n                    {\n                        rax_13 = var_100_1;\n                    }\n                    var_100_1 = rax_13;\n                    continue;\n                }\n                else if (rax_12 == 1)\n                {\n                    continue;\n                }\n                else\n                {\n                    rbx = sub_405050(data_60f4c8);\n                    error(1, 0, dcgettext(nullptr, \"invalid line count: %s\", 5), rbx);\n                }\n            }\n            else if (cond:0_1)\n            {\n                bool cond:1_1 = rax_1 <= 0xffffff7e;\n                if (rax_1 == 0xffffff7e)\n                {\n                    sub_402c60(0);\n                    /* no return */\n                }\n                if (cond:1_1)\n                {\n                    if (rax_1 == 0xffffff7d)\n                    {\n                        sub_406650(stdout, \"shuf\", \"GNU coreutils\", data_60f270);\n                        exit(0);\n                        /* no return */\n                    }\n                    break;\n                }\n                if (rax_1 != 0x65)\n                {\n                    if (rax_1 != 0x69)\n                    {\n                        break;\n                    }\n                    r14 = data_60f4c8;\n                    char* rax_5 = strchr(r14, 0x2d);\n                    r15 = rax_5;\n                    var_e8 = rax_5 == 0;\n                    if (var_ce != 0)\n                    {\n                        goto label_402a38;\n                    }\n                    if (rax_5 == 0)\n                    {\n                        sub_406af0(r14, 0, -1, &data_40c104[0x1b], dcgettext(nullptr, \"invalid input range\", 5), 0);\n                    }\n                    else\n                    {\n                        *rax_5 = 0;\n                        FILE*** rax_7 = sub_406af0(data_60f4c8, 0, -1, &data_40c104[0x1b], dcgettext(nullptr, \"invalid input range\", 5), 0);\n                        *r15 = 0x2d;\n                        r14 = rax_7;\n                        int64_t rax_9 = sub_406af0((r15 + 1), 0, -1, &data_40c104[0x1b], dcgettext(nullptr, \"invalid input range\", 5), 0);\n                        var_f0 = rax_9;\n                        void* rax_10;\n                        rax_10 = r14 > rax_9;\n                        if (((rax_9 - r14) == -1 == rax_10 && var_e8 == 0))\n                        {\n                            var_ce = 1;\n                            continue;\n                        }\n                    }\n                    rbp = sub_405050(data_60f4c8);\n                    r8_4 = error(1, *__errno_location(), \"%s: %s\", dcgettext(nullptr, \"invalid input range\", 5), rbp);\n                    goto label_4023ca;\n                }\n                r12 = true;\n                continue;\n            }\n            else\n            {\n                bool cond:2_1 = rax_1 <= 0x72;\n                if (rax_1 != 0x72)\n                {\n                    if (cond:2_1)\n                    {\n                        if (rax_1 != 0x6f)\n                        {\n                            break;\n                        }\n                        r15 = data_60f4c8;\n                        int32_t rax_4;\n                        if (var_f8 != 0)\n                        {\n                            rax_4 = strcmp(var_f8, r15);\n                        }\n                        if ((var_f8 == 0 || (var_f8 != 0 && rax_4 == 0)))\n                        {\n                            var_f8 = r15;\n                            continue;\n                        }\n                        goto label_402a5a;\n                    }\n                    if (rax_1 == 0x7a)\n                    {\n                        var_cf = 0;\n                        continue;\n                    }\n                    else\n                    {\n                        if (rax_1 != 0x80)\n                        {\n                            break;\n                        }\n                        r15 = data_60f4c8;\n                        int32_t rax_2;\n                        if (r13 != 0)\n                        {\n                            rax_2 = strcmp(r13, r15);\n                            if (rax_2 != 0)\n                            {\n                                error(1, 0, dcgettext(nullptr, \"multiple random sources specifie\u2026\", 5));\n                            }\n                        }\n                        if ((r13 == 0 || (r13 != 0 && rax_2 == 0)))\n                        {\n                            r13 = r15;\n                            continue;\n                        }\n                    }\n                    goto label_402b70;\n                }\n                var_cd = true;\n                continue;\n            }\n        }\n        int64_t rax_18 = data_60f2dc;\n        int32_t rbx_1 = (rbx - rax_18);\n        rbp = &rbp[rax_18];\n        r8_4 = rbx_1;\n        if ((r12 == 0 && var_ce != 0))\n        {\n            if (rbx_1 > 0)\n            {\n                goto label_402afa;\n            }\n            rbp = nullptr;\n            r15 = ((var_f0 + 1) - r14);\n        }\n        if ((r12 != 0 && var_ce != 0))\n        {\n            error(0, 0, dcgettext(nullptr, \"cannot combine -e and -i options\", 5));\n            break;\n        }\n        FILE*** var_d8_1;\n        int64_t rax_19;\n        int64_t* r8_6;\n        char* r12_1;\n        void* r13_1;\n        if (((r12 == 0 && var_ce == 0) || r12 != 0))\n        {\n            if (r12 == 0)\n            {\n                rax_19 = 8;\n                if (r8_4 > 1)\n                {\n                    goto label_402b01;\n                }\n                if (r12 != 0)\n                {\n                    goto label_4023ca;\n                }\n                if (r8_4 == 1)\n                {\n                    r15 = *rbp;\n                    if (strcmp(r15, &data_40c102) != 0)\n                    {\n                        if (var_100_1 != 0)\n                        {\n                            if (sub_403130(r15, \"r\", stdin) == 0)\n                            {\n                                error(1, *__errno_location(), \"%s\", sub_404ed0(0, 3, *rbp));\n                            label_402a38:\n                                error(1, 0, dcgettext(nullptr, \"multiple -i options specified\", 5));\n                            label_402a5a:\n                                error(1, 0, dcgettext(nullptr, \"multiple output files specified\", 5));\n                            label_402a7f:\n                                error(1, 0x4b, dcgettext(nullptr, \"too many input lines\", 5));\n                            label_402a90:\n                                error(1, *__errno_location(), dcgettext(nullptr, \"read error\", 5));\n                                goto label_402acb;\n                            }\n                            sub_4030b0(stdin, 2);\n                            if (var_cd != 0)\n                            {\n                                goto label_40299e;\n                            }\n                            if (var_100_1 == -1)\n                            {\n                                goto label_40299e;\n                            }\n                            goto label_40276e;\n                        }\n                        sub_4030b0(stdin, 2);\n                        if (var_cd != 0)\n                        {\n                            goto label_40299e;\n                        }\n                    label_402142:\n                        FILE*** rax_21 = sub_4050a0(r13, -1);\n                        var_d8_1 = rax_21;\n                        if (rax_21 == 0)\n                        {\n                            goto label_402268;\n                        }\n                        FILE*** rbx_2 = 0x400;\n                        r12_1 = stdin;\n                        var_e8 = var_cf;\n                        if (var_100_1 <= 0x400)\n                        {\n                            rbx_2 = var_100_1;\n                        }\n                        r15 = 0;\n                        r8_6 = nullptr;\n                        r13_1 = sub_406960(rbx_2, 0x18);\n                        while (true)\n                        {\n                            if (var_100_1 == r15)\n                            {\n                                goto label_4025db;\n                            }\n                            rbp = (r15 * 0x18);\n                            int64_t* rax_25 = sub_4032f0((r13_1 + rbp), stdin, var_e8);\n                            r8_6 = rax_25;\n                            if (rax_25 == 0)\n                            {\n                                goto label_402664;\n                            }\n                            r15 = (r15 + 1);\n                            if (r15 >= rbx_2)\n                            {\n                                rbx_2 = &rbx_2[0x80];\n                                size_t rax_26;\n                                bool rdx_4;\n                                rdx_4 = HIGHD((0x18 * rbx_2));\n                                rax_26 = LOWD((0x18 * rbx_2));\n                                uint64_t rdx_5 = ((0x18 * rbx_2) >> 0x40) != 0;\n                                if (rax_26 < 0)\n                                {\n                                    break;\n                                }\n                                if (rdx_5 != 0)\n                                {\n                                    break;\n                                }\n                                void* rax_27 = sub_4067f0(r13_1, rax_26);\n                                r13_1 = rax_27;\n                                memset(((rax_27 + rbp) + 0x18), 0, 0x6000);\n                            }\n                        }\n                        goto label_402b70;\n                    }\n                }\n                sub_4030b0(stdin, 2);\n                if (var_cd == 0)\n                {\n                    if (var_100_1 == -1)\n                    {\n                        goto label_40299e;\n                    }\n                    if (var_100_1 == 0)\n                    {\n                        goto label_402142;\n                    }\n                label_40276e:\n                    rbp = &var_c8;\n                    if (__fxstat(1, 0, &var_c8) != 0)\n                    {\n                        goto label_402142;\n                    }\n                    int32_t var_b0;\n                    if ((var_b0 & 0xd000) != 0x8000)\n                    {\n                        goto label_402142;\n                    }\n                    off64_t rax_73 = lseek(0, 0, 1);\n                    if (rax_73 < 0)\n                    {\n                        goto label_402142;\n                    }\n                    int64_t var_98;\n                    if ((var_98 - rax_73) <= 0x800000)\n                    {\n                        goto label_4027d9;\n                    }\n                    goto label_402142;\n                }\n            label_40299e:\n                rbp = &var_c8;\n            label_4027d9:\n                var_e8 = var_cf;\n                char* rax_75 = sub_405fa0(stdin, &var_c8);\n                if (rax_75 == 0)\n                {\n                    goto label_402adc;\n                }\n                FILE*** rbx_15 = var_c8;\n                if ((rbx_15 != 0 && var_cf != *((rax_75 + rbx_15) - 1)))\n                {\n                    var_c8 = (rbx_15 + 1);\n                    *(rax_75 + rbx_15) = var_cf;\n                    rbx_15 = var_c8;\n                }\n                int64_t rbx_16 = (rbx_15 + rax_75);\n                char* rdi_42 = rax_75;\n                int32_t rbp_4 = var_e8;\n                int64_t rax_77 = 0;\n                int64_t r12_3;\n                while (true)\n                {\n                    r12_3 = (rax_77 + 1);\n                    if (rbx_16 <= rdi_42)\n                    {\n                        break;\n                    }\n                    rdi_42 = &sub_4083a0(rdi_42, rbp_4, (rbx_16 - rdi_42))[1];\n                    rax_77 = r12_3;\n                }\n                r15 = rax_77;\n                int64_t rax_79;\n                bool rdx_26;\n                rdx_26 = HIGHD((8 * r12_3));\n                rax_79 = LOWD((8 * r12_3));\n                uint64_t rdx_27 = ((8 * r12_3) >> 0x40) != 0;\n                if (rax_79 < 0)\n                {\n                label_402b70:\n                    sub_4069e0();\n                    /* no return */\n                }\n                if (rdx_27 != 0)\n                {\n                    goto label_402b70;\n                }\n                char** rax_80 = sub_406790((r12_3 << 3));\n                char** rbp_6 = rax_80;\n                char* var_e0_4;\n                var_e0_4 = r12;\n                int32_t r14_3 = var_e8;\n                *rax_80 = rax_75;\n                void* rax_81 = &rax_80[r15];\n                char* rdi_44 = rax_75;\n                var_e8 = rbp_6;\n                while (rbp_6 != rax_81)\n                {\n                    rbp_6 = &rbp_6[1];\n                    rdi_44 = &sub_4083a0(rdi_44, r14_3, (rbx_16 - rdi_44))[1];\n                    *rbp_6 = rdi_44;\n                }\n                r12 = var_e0_4;\n                rbp = var_e8;\n            }\n            else\n            {\n            label_4023ca:\n                r15 = r8_4;\n                int64_t rdx_11 = 0;\n                int64_t rsi_10 = r15;\n                while (r8_4 > rdx_11)\n                {\n                    int64_t rdi_24 = rbp[rdx_11];\n                    int64_t rcx_10 = -1;\n                    rdx_11 = (rdx_11 + 1);\n                    while (rcx_10 != 0)\n                    {\n                        bool cond:3_1 = 0 != *rdi_24;\n                        rdi_24 = (rdi_24 + 1);\n                        rcx_10 = (rcx_10 - 1);\n                        if ((!cond:3_1))\n                        {\n                            break;\n                        }\n                    }\n                    rsi_10 = ((rsi_10 + (!rcx_10)) - 1);\n                }\n                var_e8 = r12;\n                int64_t r14_1 = 0;\n                void* r13_2 = sub_406790(rsi_10);\n                while (r8_4 > r14_1)\n                {\n                    char* rax_47 = stpcpy(r13_2, rbp[r14_1]);\n                    rbp[r14_1] = r13_2;\n                    r14_1 = (r14_1 + 1);\n                    *rax_47 = var_cf;\n                    r13_2 = &rax_47[1];\n                }\n                r12 = var_e8;\n                rbp[r15] = r13_2;\n            }\n        }\n        char* rbx_4;\n        if (var_cd != 0)\n        {\n            FILE*** rax_29 = sub_4050a0(r13, -1);\n            var_d8_1 = rax_29;\n            if (rax_29 == 0)\n            {\n                goto label_402268;\n            }\n            if (r12 == 0)\n            {\n                if (var_ce != 0)\n                {\n                    goto label_40247b;\n                }\n                if (sub_407390(stdin) == 0)\n                {\n                    goto label_40247b;\n                }\n            label_402540:\n                error(1, *__errno_location(), dcgettext(nullptr, \"read error\", 5));\n            label_40255e:\n                r12_1 = (r15 - 1);\n                r13_1 = nullptr;\n                r15 = var_100_1;\n                r14 = var_d8_1;\n                do\n                {\n                    void* rax_57 = &rbp[sub_4050e0(r14, r12_1)];\n                    int64_t rdi_31 = *rax_57;\n                    uint64_t rbx_10 = (*(rax_57 + 8) - rdi_31);\n                    if (rbx_10 != fwrite_unlocked(rdi_31, 1, rbx_10, stdout))\n                    {\n                        goto label_4025bd;\n                    }\n                    r13_1 = (r13_1 + 1);\n                } while (r15 != r13_1);\n                goto label_40235e;\n            }\n        label_40247b:\n            if ((var_f8 != 0 && sub_403130(var_f8, &data_40a122, stdout) == 0))\n            {\n            label_4028ff:\n                rbx_4 = sub_404ed0(0, 3, var_f8);\n                error(1, *__errno_location(), \"%s\", rbx_4);\n            label_40291d:\n                r13_1 = nullptr;\n                r14 = var_100_1;\n                while (true)\n                {\n                    if (r13_1 == r14)\n                    {\n                        return 0;\n                    }\n                    void* rax_87 = &rbp[*(rbx_4 + (r13_1 << 3))];\n                    int64_t rdi_45 = *rax_87;\n                    r12_1 = (*(rax_87 + 8) - rdi_45);\n                    if (r12_1 != fwrite_unlocked(rdi_45, 1, r12_1, stdout))\n                    {\n                        break;\n                    }\n                    r13_1 = (r13_1 + 1);\n                }\n                goto label_4025bd;\n            }\n            if (var_100_1 == 0)\n            {\n            label_40235e:\n                return 0;\n            }\n            if (r15 == 0)\n            {\n            label_402acb:\n                error(1, 0, dcgettext(nullptr, \"no lines to repeat\", 5));\n            label_402adc:\n                error(1, *__errno_location(), dcgettext(nullptr, \"read error\", 5));\n            label_402afa:\n                rax_19 = 0;\n            label_402b01:\n                error(0, 0, dcgettext(nullptr, \"extra operand %s\", 5), sub_405050(*(rbp + rax_19)));\n                sub_402c60(1);\n                /* no return */\n            }\n            if (var_ce == 0)\n            {\n                goto label_40255e;\n            }\n            int32_t rbx_7 = var_cf;\n            r12_1 = nullptr;\n            r15 = var_100_1;\n            r13_1 = var_d8_1;\n            rbp = (var_f0 - r14);\n            do\n            {\n                if (__printf_chk(1, \"%lu%c\", (r14 + sub_4050e0(r13_1, rbp)), rbx_7) < 0)\n                {\n                    goto label_4025bd;\n                }\n                r12_1 = &r12_1[1];\n            } while (r12_1 != r15);\n            goto label_40235e;\n        }\n        while (true)\n        {\n            FILE*** rax_33 = var_100_1;\n            if (rax_33 > r15)\n            {\n                rax_33 = r15;\n            }\n            var_100_1 = rax_33;\n            FILE*** rax_35 = sub_4050a0(r13, sub_405280(rax_33, r15));\n            var_d8_1 = rax_35;\n            if (rax_35 != 0)\n            {\n                break;\n            }\n        label_402268:\n            error(1, *__errno_location(), \"%s\", sub_404ed0(0, 3, r13));\n        }\n        bool rcx_7 = (r12 | var_ce);\n        bool rcx_13;\n        if (rcx_7 != 0)\n        {\n            rbx_4 = sub_4052b0(var_d8_1, var_100_1, r15);\n            if (var_f8 != 0)\n            {\n                if (sub_403130(var_f8, &data_40a122, stdout) == 0)\n                {\n                    goto label_4028ff;\n                }\n                goto label_40230a;\n            }\n        label_40230a:\n            while (var_ce != 0)\n            {\n                r12_1 = var_cf;\n                rbp = nullptr;\n                r13_1 = var_100_1;\n                while (true)\n                {\n                    if (rbp == r13_1)\n                    {\n                        return 0;\n                    }\n                    if (__printf_chk(1, \"%lu%c\", (*(rbx_4 + (rbp << 3)) + r14), r12_1) < 0)\n                    {\n                        break;\n                    }\n                    rbp = (rbp + 1);\n                }\n            label_4025bd:\n                r8_6 = error(1, *__errno_location(), dcgettext(nullptr, \"write error\", 5));\n            label_4025db:\n                if (r8_6 != 0)\n                {\n                    rbp = &var_c8;\n                    sub_4032e0(&var_c8);\n                    char r14_2 = var_e8;\n                    var_e8 = r13_1;\n                label_40261b:\n                    int64_t rbx_12 = (r15 + 1);\n                    int64_t rax_62 = sub_4050e0(var_d8_1, r15);\n                    FILE**** rdi_34 = &var_c8;\n                    if (var_100_1 > rax_62)\n                    {\n                        rdi_34 = (var_e8 + (rax_62 * 0x18));\n                    }\n                    if (sub_4032f0(rdi_34, r12_1, r14_2) == 0)\n                    {\n                        r13_1 = var_e8;\n                        if (r15 == 0)\n                        {\n                            goto label_402a7f;\n                        }\n                    }\n                    else\n                    {\n                        if (r15 != 0)\n                        {\n                            r15 = rbx_12;\n                            goto label_40261b;\n                        }\n                        r13_1 = var_e8;\n                        r15 = 1;\n                    }\n                    sub_403420(&var_c8);\n                }\n            label_402664:\n                if ((*r12_1 & 0x20) != 0)\n                {\n                    goto label_402a90;\n                }\n                uint64_t* const rdi_36 = stdin;\n                if (var_100_1 <= r15)\n                {\n                    r15 = var_100_1;\n                }\n                var_100_1 = r15;\n                if (sub_407390(rdi_36) != 0)\n                {\n                    goto label_402540;\n                }\n                rbp = nullptr;\n                r15 = var_100_1;\n                if (var_cd != 0)\n                {\n                    goto label_40247b;\n                }\n                rcx_13 = true;\n            label_4026b8:\n                var_cd = rcx_13;\n                bool rcx_16 = var_cd;\n                rbx_4 = sub_4052b0(var_d8_1, var_100_1, r15);\n                if (var_f8 != 0)\n                {\n                    var_cd = rcx_16;\n                    rcx_16 = var_cd;\n                    if (sub_403130(var_f8, &data_40a122, stdout) == 0)\n                    {\n                        goto label_4028ff;\n                    }\n                }\n                r12_1 = nullptr;\n                if (rcx_16 != 0)\n                {\n                    break;\n                }\n            }\n            if (var_ce == 0)\n            {\n                goto label_40291d;\n            }\n            for (; r15 != r12_1; r12_1 = &r12_1[1])\n            {\n                rbp = ((*(rbx_4 + (r12_1 << 3)) * 0x18) + r13_1);\n                if (fwrite_unlocked(rbp[2], 1, rbp[1], stdout) != rbp[1])\n                {\n                    goto label_4025bd;\n                }\n            }\n            goto label_40235e;\n        }\n        var_cd = rcx_7;\n        r13_1 = nullptr;\n        rcx_13 = var_cd;\n        if (sub_407390(stdin) == 0)\n        {\n            goto label_4026b8;\n        }\n        goto label_402540;\n    }\n    sub_402c60(1);\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "_start",
            "funcStartAddr": "0x402b80",
            "funcEndAddr": "0x402baa",
            "decompiledFuncCode": "int64_t _start(int64_t arg1, int64_t arg2, void (* arg3)()) __noreturn\n{\n    int64_t rax;\n    int64_t var_8 = rax;\n    __libc_start_main(main, __return_addr, &arg_8, init, fini, arg3, &var_8);\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_402bab",
            "funcStartAddr": "0x402bab",
            "funcEndAddr": "0x402bca",
            "decompiledFuncCode": "void sub_402bab()\n{\n    return;\n}\n\n"
        },
        {
            "funcName": "sub_402bca",
            "funcStartAddr": "0x402bca",
            "funcEndAddr": "0x402c01",
            "decompiledFuncCode": "int64_t sub_402bca()\n{\n    int64_t rax;\n    int64_t rdx;\n    rdx = HIGHD(0);\n    rax = LOWD(0);\n    return (COMBINE(rdx, rax) / 2);\n}\n\n"
        },
        {
            "funcName": "sub_402c01",
            "funcStartAddr": "0x402c01",
            "funcEndAddr": "0x402c58",
            "decompiledFuncCode": "void sub_402c01()\n{\n    if (data_60f308 != 0)\n    {\n        return;\n    }\n    while (true)\n    {\n        int64_t rax_1 = data_60f310;\n        if (rax_1 >= 0)\n        {\n            break;\n        }\n        data_60f310 = (rax_1 + 1);\n        *(0x60ee40 + ((rax_1 + 1) << 3))();\n    }\n    sub_402bab();\n    data_60f308 = 1;\n}\n\n"
        },
        {
            "funcName": "thunk_402c58",
            "funcStartAddr": "0x402c58",
            "funcEndAddr": "0x402c5d",
            "decompiledFuncCode": "int64_t j_sub_402bca()\n{\n    /* tailcall */\n    return sub_402bca();\n}\n\n"
        },
        {
            "funcName": "sub_402c60",
            "funcStartAddr": "0x402c60",
            "funcEndAddr": "0x402fdd",
            "decompiledFuncCode": "int64_t sub_402c60(int32_t arg1) __noreturn\n{\n    int64_t rbp = data_60f328;\n    if (arg1 != 0)\n    {\n        __fprintf_chk(stderr, 1, dcgettext(nullptr, \"Try '%s --help' for more informa\u2026\", 5), rbp);\n    }\n    else\n    {\n        __printf_chk(1, dcgettext(nullptr, \"Usage: %s [OPTION]... [FILE]\\n  \u2026\", 5), rbp, rbp, rbp);\n        fputs_unlocked(dcgettext(nullptr, \"Write a random permutation of th\u2026\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"\\nWith no FILE, or when FILE is \u2026\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"\\nMandatory arguments to long op\u2026\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"  -e, --echo                trea\u2026\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"  -z, --zero-terminated     line\u2026\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"      --help     display this he\u2026\", 5), stdout);\n        fputs_unlocked(dcgettext(nullptr, \"      --version  output version \u2026\", 5), stdout);\n        void* const var_88 = &data_409fe9;\n        void* const* rax_11 = &var_88;\n        void* const var_78_1 = \"coreutils\";\n        void* const var_70_1 = \"Multi-call invocation\";\n        void* const var_68_1 = \"sha224sum\";\n        void* const var_60_1 = \"sha2 utilities\";\n        void* const var_58_1 = \"sha256sum\";\n        void* const var_50_1 = \"sha2 utilities\";\n        void* const var_48_1 = \"sha384sum\";\n        void* const var_40_1 = \"sha2 utilities\";\n        void* const var_38_1 = \"sha512sum\";\n        void* const var_30_1 = \"sha2 utilities\";\n        int64_t var_28_1 = 0;\n        int64_t var_20_1 = 0;\n        bool c_1;\n        bool z_1;\n        do\n        {\n            rax_11 = &rax_11[2];\n            void* const rdi_9 = *rax_11;\n            c_1 = false;\n            z_1 = (rdi_9 & rdi_9) == 0;\n            if (z_1)\n            {\n                break;\n            }\n            void* const rsi_9 = \"shuf\";\n            int64_t rcx_2 = 5;\n            while (rcx_2 != 0)\n            {\n                char temp0_1 = *rsi_9;\n                char temp1_1 = *rdi_9;\n                c_1 = temp0_1 < temp1_1;\n                z_1 = temp0_1 == temp1_1;\n                rsi_9 = (rsi_9 + 1);\n                rdi_9 = (rdi_9 + 1);\n                rcx_2 = (rcx_2 - 1);\n                if ((!z_1))\n                {\n                    break;\n                }\n            }\n        } while ((((!z_1) && (!c_1)) - 0) != 0);\n        void* const rbp_1 = rax_11[1];\n        char* rax_22;\n        int32_t rax_23;\n        void* const r12_1;\n        if (rbp_1 == 0)\n        {\n            int64_t rcx_5;\n            int64_t rdx_5;\n            uint64_t r8_3;\n            ssize_t r9_2;\n            rcx_5 = __printf_chk(1, dcgettext(nullptr, \"\\n%s online help: <%s>\\n\", 5), \"GNU coreutils\", \"https://www.gnu.org/software/cor\u2026\");\n            rax_22 = setlocale(5, nullptr, rdx_5, rcx_5, r8_3, r9_2, var_88, \"test invocation\");\n            if (rax_22 != 0)\n            {\n                rax_23 = strncmp(rax_22, &data_40a06d, 3);\n                if (rax_23 != 0)\n                {\n                    rbp_1 = \"shuf\";\n                }\n            }\n            if ((rax_22 == 0 || (rax_22 != 0 && rax_23 == 0)))\n            {\n                rbp_1 = \"shuf\";\n                r12_1 = \" invocation\";\n                __printf_chk(1, dcgettext(nullptr, \"Full documentation at: <%s%s>\\n\", 5), \"https://www.gnu.org/software/cor\u2026\", \"shuf\");\n            }\n        }\n        else\n        {\n            int64_t rcx_3;\n            int64_t rdx_3;\n            uint64_t r8_2;\n            ssize_t r9_1;\n            rcx_3 = __printf_chk(1, dcgettext(nullptr, \"\\n%s online help: <%s>\\n\", 5), \"GNU coreutils\", \"https://www.gnu.org/software/cor\u2026\");\n            char* rax_14 = setlocale(5, nullptr, rdx_3, rcx_3, r8_2, r9_1, var_88, \"test invocation\");\n            if (rax_14 == 0)\n            {\n                goto label_402ed0;\n            }\n            if (strncmp(rax_14, &data_40a06d, 3) == 0)\n            {\n                goto label_402ed0;\n            }\n        }\n        if ((((rbp_1 == 0 && rax_22 != 0) && rax_23 != 0) || rbp_1 != 0))\n        {\n            __printf_chk(1, dcgettext(nullptr, \"Report %s translation bugs to <h\u2026\", 5), \"shuf\");\n        label_402ed0:\n            r12_1 = \" invocation\";\n            __printf_chk(1, dcgettext(nullptr, \"Full documentation at: <%s%s>\\n\", 5), \"https://www.gnu.org/software/cor\u2026\", \"shuf\");\n            if (rbp_1 != \"shuf\")\n            {\n                r12_1 = &data_40c104[0x1b];\n            }\n        }\n        __printf_chk(1, dcgettext(nullptr, \"or available locally via: info '\u2026\", 5), rbp_1, r12_1);\n    }\n    exit(arg1);\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_402fe0",
            "funcStartAddr": "0x402fe0",
            "funcEndAddr": "0x402fe8",
            "decompiledFuncCode": "int64_t sub_402fe0(int64_t arg1)\n{\n    data_60f320 = arg1;\n}\n\n"
        },
        {
            "funcName": "sub_402ff0",
            "funcStartAddr": "0x402ff0",
            "funcEndAddr": "0x402ff8",
            "decompiledFuncCode": "int64_t sub_402ff0(char arg1)\n{\n    data_60f318 = arg1;\n}\n\n"
        },
        {
            "funcName": "sub_403000",
            "funcStartAddr": "0x403000",
            "funcEndAddr": "0x40309e",
            "decompiledFuncCode": "void sub_403000(void* arg1)\n{\n    int32_t rax = sub_4084b0(stdout);\n    int32_t* rax_1;\n    if (rax != 0)\n    {\n        rax_1 = __errno_location();\n        if ((data_60f318 == 0 || (data_60f318 != 0 && *rax_1 != 0x20)))\n        {\n            char* rax_3 = dcgettext(nullptr, \"write error\", 5);\n            int64_t rdi_2 = data_60f320;\n            if (rdi_2 == 0)\n            {\n                error(0, *rax_1, \"%s\", rax_3);\n            }\n            else\n            {\n                error(0, *rax_1, \"%s: %s\", sub_404ea0(rdi_2), rax_3);\n            }\n        }\n    }\n    if (((rax == 0 || ((rax != 0 && data_60f318 != 0) && *rax_1 == 0x20)) && sub_4084b0(stderr) == 0))\n    {\n        return;\n    }\n    _exit(data_60f278);\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_4030a0",
            "funcStartAddr": "0x4030a0",
            "funcEndAddr": "0x4030a5",
            "decompiledFuncCode": "int64_t sub_4030a0(int32_t arg1, int64_t arg2, off64_t arg3, int32_t arg4)\n{\n    /* tailcall */\n    return posix_fadvise(arg1, arg2, arg3, arg4);\n}\n\n"
        },
        {
            "funcName": "sub_4030b0",
            "funcStartAddr": "0x4030b0",
            "funcEndAddr": "0x4030d1",
            "decompiledFuncCode": "void sub_4030b0(FILE* arg1, int32_t arg2)\n{\n    if (arg1 == 0)\n    {\n        return;\n    }\n    /* tailcall */\n    return posix_fadvise(fileno(arg1), 0, 0, arg2);\n}\n\n"
        },
        {
            "funcName": "sub_4030e0",
            "funcStartAddr": "0x4030e0",
            "funcEndAddr": "0x40312b",
            "decompiledFuncCode": "uint64_t sub_4030e0(int32_t arg1)\n{\n    int32_t rbx = 1;\n    int32_t rax_1 = open(\"/dev/null\", 0);\n    if (arg1 != rax_1)\n    {\n        rbx = 0;\n        if (rax_1 >= 0)\n        {\n            close(rax_1);\n            *__errno_location() = 9;\n            return 0;\n        }\n    }\n    return rbx;\n}\n\n"
        },
        {
            "funcName": "sub_403130",
            "funcStartAddr": "0x403130",
            "funcEndAddr": "0x4032df",
            "decompiledFuncCode": "FILE* sub_403130(char* arg1, char* arg2, FILE* arg3)\n{\n    int32_t rax = fileno(arg3);\n    int32_t* rax_1 = __errno_location();\n    int32_t rbx;\n    uint64_t rbp;\n    FILE* r12_1;\n    char r13;\n    if (rax == 1)\n    {\n        rbx = 0;\n        rbp = 0;\n    }\n    else\n    {\n        if (rax == 2)\n        {\n            rbx = 0;\n        }\n        else\n        {\n            if (rax == 0)\n            {\n                rbx = 0;\n                rbp = 0;\n                r13 = 0;\n            label_4031ec:\n                r12_1 = sub_407450(arg1, arg2, arg3);\n                goto label_4031ef;\n            }\n            rbx = dup2(2, 2) != 2;\n        }\n        rbp = dup2(1, 1) != 1;\n    }\n    int32_t rax_4 = dup2(0, 0);\n    char rax_5;\n    if (rax_4 == 0)\n    {\n        r13 = 0;\n    }\n    else\n    {\n        rax_5 = sub_4030e0(0);\n        r13 = rax_5;\n    }\n    int32_t r15_1;\n    if (((rax_4 == 0 && rbp != 0) || ((rax_4 != 0 && rax_5 != 0) && rbp != 0)))\n    {\n        int32_t rax_9 = sub_4030e0(1);\n        rbp = rax_9;\n        if (rax_9 == 0)\n        {\n            r15_1 = *rax_1;\n            r12_1 = nullptr;\n            if (rbx != 0)\n            {\n                close(2);\n            }\n            goto label_403255;\n        }\n    }\n    if (((((rax_4 == 0 && rbp == 0) || ((rax_4 != 0 && rax_5 != 0) && rbp == 0)) || (rax_4 == 0 && rbp != 0)) || ((rax_4 != 0 && rax_5 != 0) && rbp != 0)))\n    {\n        if (rbx == 0)\n        {\n            goto label_4031ec;\n        }\n        int32_t rax_6 = sub_4030e0(2);\n        rbx = rax_6;\n        if (rax_6 != 0)\n        {\n            goto label_4031ec;\n        }\n        r15_1 = *rax_1;\n        r12_1 = nullptr;\n    label_40329b:\n        close(2);\n    }\n    if ((rax_4 != 0 && rax_5 == 0))\n    {\n        r13 = 1;\n        r12_1 = nullptr;\n    label_4031ef:\n        r15_1 = *rax_1;\n        if (rbx != 0)\n        {\n            goto label_40329b;\n        }\n    }\n    if (((((((rax_4 == 0 && rbp == 0) || ((rax_4 != 0 && rax_5 != 0) && rbp == 0)) || (rax_4 == 0 && rbp != 0)) || ((rax_4 != 0 && rax_5 != 0) && rbp != 0)) && rbx != 0) || (rax_4 != 0 && rax_5 == 0)))\n    {\n        if (rbp != 0)\n        {\n        label_403255:\n            close(1);\n            if (r13 != 0)\n            {\n            label_403261:\n                close(0);\n                if (r12_1 == 0)\n                {\n                    goto label_40326b;\n                }\n                goto label_40321a;\n            }\n        }\n        else if (r13 != 0)\n        {\n            goto label_403261;\n        }\n        if (r12_1 != 0)\n        {\n            goto label_40321a;\n        }\n    label_40326b:\n        *rax_1 = r15_1;\n    label_40321a:\n        return r12_1;\n    }\n}\n\n"
        },
        {
            "funcName": "sub_4032e0",
            "funcStartAddr": "0x4032e0",
            "funcEndAddr": "0x4032f0",
            "decompiledFuncCode": "int64_t sub_4032e0(int128_t* arg1)\n{\n    arg1[1] = 0;\n    *arg1 = 0;\n}\n\n"
        },
        {
            "funcName": "sub_4032f0",
            "funcStartAddr": "0x4032f0",
            "funcEndAddr": "0x40340b",
            "decompiledFuncCode": "int64_t* sub_4032f0(int64_t* arg1, char* arg2, char arg3)\n{\n    int32_t r13 = arg3;\n    char* r14 = arg1[2];\n    char var_3d = r13;\n    void* rsi_1 = (*arg1 + r14);\n    char* r15 = r14;\n    if ((*arg2 & 0x10) == 0)\n    {\n        while (true)\n        {\n            char* rdx_1 = *(arg2 + 8);\n            int32_t rax_3;\n            int32_t rbp_1;\n            if (rdx_1 < *(arg2 + 0x10))\n            {\n                *(arg2 + 8) = &rdx_1[1];\n                rbp_1 = *rdx_1;\n            }\n            else\n            {\n                rax_3 = __uflow(arg2);\n                rbp_1 = rax_3;\n            }\n            char* rax_2;\n            void* rax_7;\n            char rdx;\n            if ((rdx_1 < *(arg2 + 0x10) || (rdx_1 >= *(arg2 + 0x10) && rax_3 != 0xffffffff)))\n            {\n                rdx = rbp_1;\n                if (r15 == rsi_1)\n                {\n                    goto label_40339d;\n                }\n                rax_2 = r15;\n            label_403345:\n                r15 = &rax_2[1];\n                *rax_2 = rdx;\n                if (rbp_1 != r13)\n                {\n                    continue;\n                }\n                else\n                {\n                label_403406:\n                    rax_7 = r15;\n                }\n            }\n            if ((rdx_1 >= *(arg2 + 0x10) && rax_3 == 0xffffffff))\n            {\n                if (r14 == r15)\n                {\n                    break;\n                }\n                if ((*arg2 & 0x20) != 0)\n                {\n                    break;\n                }\n                if (r15[-1] == var_3d)\n                {\n                    goto label_403406;\n                }\n                rbp_1 = r13;\n                if (r15 == rsi_1)\n                {\n                    rdx = var_3d;\n                label_40339d:\n                    void* var_48;\n                    var_48 = rdx;\n                    int64_t r15_1 = *arg1;\n                    char* rax_5 = sub_4068f0(r14, arg1);\n                    void* rsi_3 = *arg1;\n                    rdx = var_48;\n                    r14 = rax_5;\n                    rax_2 = &rax_5[r15_1];\n                    arg1[2] = r14;\n                    rsi_1 = (rsi_3 + r14);\n                    goto label_403345;\n                }\n                rax_7 = &r15[1];\n                *r15 = arg3;\n            }\n            arg1[1] = (rax_7 - r14);\n            return arg1;\n        }\n    }\n    return 0;\n}\n\n"
        },
        {
            "funcName": "sub_403410",
            "funcStartAddr": "0x403410",
            "funcEndAddr": "0x40341a",
            "decompiledFuncCode": "int64_t sub_403410(int64_t* arg1, char* arg2)\n{\n    /* tailcall */\n    return sub_4032f0(arg1, arg2, 0xa);\n}\n\n"
        },
        {
            "funcName": "sub_403420",
            "funcStartAddr": "0x403420",
            "funcEndAddr": "0x403429",
            "decompiledFuncCode": "int64_t sub_403420(void* arg1)\n{\n    /* tailcall */\n    return free(*(arg1 + 0x10));\n}\n\n"
        },
        {
            "funcName": "sub_403430",
            "funcStartAddr": "0x403430",
            "funcEndAddr": "0x4034c9",
            "decompiledFuncCode": "char* sub_403430(char* arg1)\n{\n    if (arg1 == 0)\n    {\n        fwrite(\"A NULL argv[0] was passed throug\u2026\", 1, 0x37, stderr);\n        abort();\n        /* no return */\n    }\n    void* rbx = arg1;\n    char* rax = strrchr(arg1, 0x2f);\n    if (rax != 0)\n    {\n        void* r8_1 = &rax[1];\n        int64_t rdx_2 = (r8_1 - rbx);\n        bool c_1 = rdx_2 < 6;\n        bool z_1 = rdx_2 == 6;\n        if ((!(z_1 || (rdx_2 - 6) < 0 != (rdx_2 - 6))))\n        {\n            void* rsi_1 = &rax[-6];\n            void* const rdi = \"/.libs/\";\n            int64_t rcx_1 = 7;\n            while (rcx_1 != 0)\n            {\n                char temp0_1 = *rsi_1;\n                char temp1_1 = *rdi;\n                c_1 = temp0_1 < temp1_1;\n                z_1 = temp0_1 == temp1_1;\n                rsi_1 = (rsi_1 + 1);\n                rdi = (rdi + 1);\n                rcx_1 = (rcx_1 - 1);\n                if ((!z_1))\n                {\n                    break;\n                }\n            }\n            rdx_2 = ((!z_1) && (!c_1));\n            rdx_2 = (rdx_2 - 0);\n            bool c_2 = false;\n            bool z_2 = (rdx_2 & rdx_2) == 0;\n            if (z_2)\n            {\n                void* const rdi_1 = &data_40a830;\n                int64_t rcx_2 = 3;\n                void* rsi_2 = r8_1;\n                rbx = r8_1;\n                while (rcx_2 != 0)\n                {\n                    char temp2_1 = *rsi_2;\n                    char temp3_1 = *rdi_1;\n                    c_2 = temp2_1 < temp3_1;\n                    z_2 = temp2_1 == temp3_1;\n                    rsi_2 = (rsi_2 + 1);\n                    rdi_1 = (rdi_1 + 1);\n                    rcx_2 = (rcx_2 - 1);\n                    if ((!z_2))\n                    {\n                        break;\n                    }\n                }\n                rdx_2 = ((!z_2) && (!c_2));\n                rdx_2 = (rdx_2 - 0);\n                if (rdx_2 == 0)\n                {\n                    rbx = &rax[4];\n                    program_invocation_short_name = rbx;\n                }\n            }\n        }\n    }\n    data_60f328 = rbx;\n    __progname_full = rbx;\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_4034d0",
            "funcStartAddr": "0x4034d0",
            "funcEndAddr": "0x4035c2",
            "decompiledFuncCode": "char* sub_4034d0(char* arg1, int32_t arg2)\n{\n    char* rax = dcgettext(nullptr, arg1, 5);\n    char* rbx = rax;\n    if (arg1 == rax)\n    {\n        char* rax_2 = sub_409860();\n        char rdx_2 = (*rax_2 & 0xdf);\n        if (rdx_2 != 0x55)\n        {\n            if (rdx_2 != 0x47)\n            {\n            label_4035b1:\n                void* const rbx_1 = &data_40a834;\n                if (arg2 != 9)\n                {\n                    rbx_1 = \"'\";\n                }\n                return rbx_1;\n            }\n            if ((rax_2[1] & 0xdf) != 0x42)\n            {\n                goto label_4035b1;\n            }\n            if (rax_2[2] != 0x31)\n            {\n                goto label_4035b1;\n            }\n            if (rax_2[3] != 0x38)\n            {\n                goto label_4035b1;\n            }\n            if (rax_2[4] != 0x30)\n            {\n                goto label_4035b1;\n            }\n            if (rax_2[5] != 0x33)\n            {\n                goto label_4035b1;\n            }\n            if (rax_2[6] != 0x30)\n            {\n                goto label_4035b1;\n            }\n            if (rax_2[7] != 0)\n            {\n                goto label_4035b1;\n            }\n            bool cond:2_1 = *rbx != 0x60;\n            rbx = &data_40a83d;\n            if (cond:2_1)\n            {\n                rbx = &data_40a83a;\n            }\n        }\n        else\n        {\n            if ((rax_2[1] & 0xdf) != 0x54)\n            {\n                goto label_4035b1;\n            }\n            if ((rax_2[2] & 0xdf) != 0x46)\n            {\n                goto label_4035b1;\n            }\n            if (rax_2[3] != 0x2d)\n            {\n                goto label_4035b1;\n            }\n            if (rax_2[4] != 0x38)\n            {\n                goto label_4035b1;\n            }\n            if (rax_2[5] != 0)\n            {\n                goto label_4035b1;\n            }\n            bool cond:1_1 = *rbx != 0x60;\n            rbx = &data_40a841;\n            if (cond:1_1)\n            {\n                rbx = &data_40a836;\n            }\n        }\n    }\n    return rbx;\n}\n\n"
        },
        {
            "funcName": "sub_4035d0",
            "funcStartAddr": "0x401d60",
            "funcEndAddr": "0x4047f1",
            "decompiledFuncCode": "int64_t sub_4035d0(char* arg1, uint64_t arg2, uint64_t arg3, uint64_t arg4, \n    uint32_t arg5, int32_t arg6, int64_t arg7, char* arg8, char* arg9)\n{\n    char* r15 = arg1;\n    uint64_t r14 = arg2;\n    uint32_t r13 = arg5;\n    uint64_t rax;\n    uint64_t rdx;\n    rax = __ctype_get_mb_cur_max();\n    int32_t rbp_1 = (arg6 & 2);\n    bool var_5c = rbp_1 != 0;\n    bool cond:1 = r13 == 0xa;\n    if (r13 > 0xa)\n    {\n        abort();\n        /* no return */\n    }\n    uint64_t r11 = arg4;\n    uint64_t var_c0;\n    char var_a9;\n    uint64_t var_a0_1;\n    char const* const var_78_1;\n    uint64_t var_70;\n    char var_5b_1;\n    uint64_t rax_1;\n    int64_t rbx_1;\n    uint32_t r10;\n    if ((r13 == 1 || (r13 == 4 && rbp_1 != 0)))\n    {\n        var_a9 = 1;\n        r10 = 0;\n        rbx_1 = 0;\n        r13 = 2;\n        var_5b_1 = 0;\n        var_70 = 0;\n        var_5c = true;\n        var_c0 = 0;\n        var_a0_1 = 1;\n        var_78_1 = \"'\";\n    label_403668:\n        while (true)\n        {\n            uint64_t r9 = r11;\n            int64_t r12_1 = 0;\n            uint32_t r11_1 = r13;\n            while (true)\n            {\n                r13 = r9 != r12_1;\n                if (r9 == -1)\n                {\n                    r13 = *(arg3 + r12_1) != 0;\n                }\n                uint32_t r13_1;\n                if (r13 == 0)\n                {\n                    r11 = r9;\n                    rdx = r11_1 == 2;\n                    if ((rbx_1 == 0 && (var_5c & rdx) != 0))\n                    {\n                        r13_1 = 2;\n                    label_4039dc:\n                        if (var_c0 != 0)\n                        {\n                            r13_1 = 4;\n                        }\n                        goto label_403a24;\n                    }\n                    rax_1 = (var_5c ^ 1);\n                    rdx = (rdx & rax_1);\n                    if (rdx == 0)\n                    {\n                        rdx = rax_1;\n                    }\n                    else if (var_5b_1 != 0)\n                    {\n                        if (var_a9 != 0)\n                        {\n                            rbx_1 = sub_4035d0(r15, var_70, arg3, r11, 5, arg6, arg7, arg8, arg9);\n                        }\n                        else\n                        {\n                            rax_1 = r14 == 0;\n                            rdx = var_70 != 0;\n                            rax_1 = (rax_1 & rdx);\n                            if (rax_1 != 0)\n                            {\n                                r14 = var_70;\n                                break;\n                            }\n                            rdx = var_5b_1;\n                        }\n                    }\n                    if (((rdx == 0 || (rdx != 0 && var_5b_1 == 0)) || ((rdx != 0 && var_5b_1 != 0) && var_a9 == 0)))\n                    {\n                        if ((var_78_1 != 0 && rdx != 0))\n                        {\n                            char const rdx_17 = *var_78_1;\n                            if (rdx_17 != 0)\n                            {\n                                void* rax_51 = (var_78_1 - rbx_1);\n                                do\n                                {\n                                    if (r14 > rbx_1)\n                                    {\n                                        r15[rbx_1] = rdx_17;\n                                    }\n                                    rbx_1 = (rbx_1 + 1);\n                                    rdx_17 = *(rax_51 + rbx_1);\n                                } while (rdx_17 != 0);\n                            }\n                        }\n                        if (r14 > rbx_1)\n                        {\n                            r15[rbx_1] = 0;\n                        }\n                    }\n                    goto label_403a3b;\n                }\n                rax_1 = r11_1 != 2;\n                rax_1 = (rax_1 & var_c0);\n                char* r8 = (arg3 + r12_1);\n                uint64_t var_b8;\n                var_b8 = rax_1;\n                uint32_t rax_8;\n                uint64_t rax_12;\n                char rax_14;\n                int32_t rcx_2;\n                uint64_t rbp_3;\n                if (rax_1 == 0)\n                {\n                    rbp_3 = *r8;\n                    if (rbp_3 > 0x7e)\n                    {\n                        goto label_403b75;\n                    }\n                    switch (rbp_3)\n                    {\n                        case 0:\n                        {\n                            if (var_c0 == 0)\n                            {\n                                if ((arg6 & 1) != 0)\n                                {\n                                    r12_1 = (r12_1 + 1);\n                                    continue;\n                                }\n                                else\n                                {\n                                    var_b8 = 0;\n                                    rdx = r11_1 == 2;\n                                    r13 = 0;\n                                    rbp_3 = 0;\n                                }\n                                goto label_4037c5;\n                            }\n                            goto label_403ab0;\n                        }\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 4:\n                        case 5:\n                        case 6:\n                        case 0xe:\n                        case 0xf:\n                        case 0x10:\n                        case 0x11:\n                        case 0x12:\n                        case 0x13:\n                        case 0x14:\n                        case 0x15:\n                        case 0x16:\n                        case 0x17:\n                        case 0x18:\n                        case 0x19:\n                        case 0x1a:\n                        case 0x1b:\n                        case 0x1c:\n                        case 0x1d:\n                        case 0x1e:\n                        case 0x1f:\n                        case 0x40:\n                        {\n                            goto label_403b75;\n                        }\n                        case 7:\n                        {\n                            rbp_3 = 7;\n                            rcx_2 = 0x61;\n                            rdx = r11_1 == 2;\n                            goto label_4039a0;\n                        }\n                        case 8:\n                        {\n                            rbp_3 = 8;\n                            rcx_2 = 0x62;\n                            rdx = r11_1 == 2;\n                        label_4039a0:\n                            if (var_c0 == 0)\n                            {\n                                goto label_4039ab;\n                            }\n                            rbp_3 = rcx_2;\n                            r13 = 0;\n                        label_403807:\n                            if (var_5c == 0)\n                            {\n                                goto label_403818;\n                            }\n                        label_4039d0:\n                            r13_1 = r11_1;\n                            rax_14 = rdx;\n                            r11 = r9;\n                            goto label_4039d8;\n                        }\n                        case 9:\n                        {\n                            rbp_3 = 9;\n                            rcx_2 = 0x74;\n                            goto label_403c0b;\n                        }\n                        case 0xa:\n                        {\n                            rbp_3 = 0xa;\n                            rcx_2 = 0x6e;\n                        label_403c0b:\n                            rdx = r11_1 == 2;\n                            bool rax_26 = (var_5c & rdx);\n                            var_b8 = rax_26;\n                            if (rax_26 != 0)\n                            {\n                            label_403c1a:\n                                r11 = r9;\n                                r13_1 = 2;\n                                goto label_4039dc;\n                            }\n                            goto label_4039a0;\n                        }\n                        case 0xb:\n                        {\n                            rbp_3 = 0xb;\n                            rcx_2 = 0x76;\n                            rdx = r11_1 == 2;\n                            goto label_4039a0;\n                        }\n                        case 0xc:\n                        {\n                            rbp_3 = 0xc;\n                            rcx_2 = 0x66;\n                            rdx = r11_1 == 2;\n                            goto label_4039a0;\n                        }\n                        case 0xd:\n                        {\n                            rbp_3 = 0xd;\n                            rcx_2 = 0x72;\n                            goto label_403c0b;\n                        }\n                        case 0x20:\n                        {\n                            rbp_3 = 0x20;\n                            rdx = r11_1 == 2;\n                            goto label_4037a6;\n                        }\n                        case 0x21:\n                        case 0x22:\n                        case 0x24:\n                        case 0x26:\n                        case 0x28:\n                        case 0x29:\n                        case 0x2a:\n                        case 0x3b:\n                        case 0x3c:\n                        case 0x3d:\n                        case 0x3e:\n                        case 0x5b:\n                        case 0x5e:\n                        case 0x60:\n                        case 0x7c:\n                        {\n                            rdx = r11_1 == 2;\n                            r13 = 0;\n                        label_4037a6:\n                            if (var_5c == 0)\n                            {\n                                goto label_4037c5;\n                            }\n                            if (rdx == 0)\n                            {\n                                goto label_4037c5;\n                            }\n                            goto label_403c1a;\n                        }\n                        case 0x23:\n                        case 0x7e:\n                        {\n                            rdx = r11_1 == 2;\n                        label_40379d:\n                            if (r12_1 != 0)\n                            {\n                                goto label_4039ab;\n                            }\n                            goto label_4037a6;\n                        }\n                        case 0x25:\n                        case 0x2b:\n                        case 0x2c:\n                        case 0x2d:\n                        case 0x2e:\n                        case 0x2f:\n                        case 0x30:\n                        case 0x31:\n                        case 0x32:\n                        case 0x33:\n                        case 0x34:\n                        case 0x35:\n                        case 0x36:\n                        case 0x37:\n                        case 0x38:\n                        case 0x39:\n                        case 0x3a:\n                        case 0x41:\n                        case 0x42:\n                        case 0x43:\n                        case 0x44:\n                        case 0x45:\n                        case 0x46:\n                        case 0x47:\n                        case 0x48:\n                        case 0x49:\n                        case 0x4a:\n                        case 0x4b:\n                        case 0x4c:\n                        case 0x4d:\n                        case 0x4e:\n                        case 0x4f:\n                        case 0x50:\n                        case 0x51:\n                        case 0x52:\n                        case 0x53:\n                        case 0x54:\n                        case 0x55:\n                        case 0x56:\n                        case 0x57:\n                        case 0x58:\n                        case 0x59:\n                        case 0x5a:\n                        case 0x5d:\n                        case 0x5f:\n                        case 0x61:\n                        case 0x62:\n                        case 0x63:\n                        case 0x64:\n                        case 0x65:\n                        case 0x66:\n                        case 0x67:\n                        case 0x68:\n                        case 0x69:\n                        case 0x6a:\n                        case 0x6b:\n                        case 0x6c:\n                        case 0x6d:\n                        case 0x6e:\n                        case 0x6f:\n                        case 0x70:\n                        case 0x71:\n                        case 0x72:\n                        case 0x73:\n                        case 0x74:\n                        case 0x75:\n                        case 0x76:\n                        case 0x77:\n                        case 0x78:\n                        case 0x79:\n                        case 0x7a:\n                        {\n                        label_403bd0:\n                            rdx = r11_1 == 2;\n                        label_4037c5:\n                            rax_8 = ((((var_c0 ^ 1) | rdx) ^ 1) | var_5c);\n                            if (rax_8 == 0)\n                            {\n                                goto label_4038cc;\n                            }\n                            goto label_4037cf;\n                        }\n                        case 0x27:\n                        {\n                            goto label_40394d;\n                        }\n                        case 0x3f:\n                        {\n                            goto label_40391d;\n                        }\n                        case 0x5c:\n                        {\n                            if (r11_1 != 2)\n                            {\n                                goto label_40397a;\n                            }\n                            if (var_5c != 0)\n                            {\n                                goto label_40470d;\n                            }\n                            r12_1 = (r12_1 + 1);\n                            rax_12 = r10;\n                            r13 = 0;\n                            rbp_3 = 0x5c;\n                            goto label_4038e4;\n                        }\n                        case 0x7b:\n                        case 0x7d:\n                        {\n                            goto label_403779;\n                        }\n                    }\n                }\n                else\n                {\n                    char var_98;\n                    uint64_t var_90;\n                    uint32_t var_88;\n                    char rax_27;\n                    char rax_28;\n                    if (var_a0_1 != 0)\n                    {\n                        int64_t rbp_2 = (r12_1 + var_a0_1);\n                        if ((r9 == -1 && var_a0_1 > 1))\n                        {\n                            var_90 = r10;\n                            var_98 = r8;\n                            uint64_t rax_3;\n                            rax_3 = strlen(arg3);\n                            r10 = var_90;\n                            r8 = var_98;\n                            r9 = rax_3;\n                        }\n                        if (rbp_2 > r9)\n                        {\n                            goto label_403d70;\n                        }\n                        uint64_t var_80;\n                        var_80 = r11_1;\n                        var_88 = r9;\n                        var_90 = r10;\n                        var_98 = r8;\n                        int32_t rax_4;\n                        rax_4 = memcmp(r8, var_78_1, var_a0_1);\n                        r8 = var_98;\n                        r10 = var_90;\n                        r9 = var_88;\n                        r11_1 = var_80;\n                        if (rax_4 != 0)\n                        {\n                            goto label_403d70;\n                        }\n                        if (var_5c != 0)\n                        {\n                        label_4046c0:\n                            r13_1 = r11_1;\n                            r11 = r9;\n                        label_403a24:\n                            rbx_1 = sub_4035d0(r15, r14, arg3, r11, r13_1, (arg6 & 0xfffffffd), 0, arg8, arg9);\n                        label_403a3b:\n                            return rbx_1;\n                        }\n                        rbp_3 = *r8;\n                        if (rbp_3 > 0x7e)\n                        {\n                            goto label_403b75;\n                        }\n                        switch (rbp_3)\n                        {\n                            case 0:\n                            {\n                                goto label_403ac7;\n                            }\n                            case 1:\n                            case 2:\n                            case 3:\n                            case 4:\n                            case 5:\n                            case 6:\n                            case 0xe:\n                            case 0xf:\n                            case 0x10:\n                            case 0x11:\n                            case 0x12:\n                            case 0x13:\n                            case 0x14:\n                            case 0x15:\n                            case 0x16:\n                            case 0x17:\n                            case 0x18:\n                            case 0x19:\n                            case 0x1a:\n                            case 0x1b:\n                            case 0x1c:\n                            case 0x1d:\n                            case 0x1e:\n                            case 0x1f:\n                            case 0x40:\n                            {\n                                goto label_403b75;\n                            }\n                            case 7:\n                            {\n                                rbp_3 = 0x61;\n                            label_403a90:\n                                r13 = 0;\n                                goto label_40384b;\n                            }\n                            case 8:\n                            {\n                                rdx = 0;\n                                r13 = 0;\n                                rbp_3 = 0x62;\n                            label_403818:\n                                uint32_t rax_10;\n                                rax_10 = ((r10 ^ 1) & rdx);\n                                if (rax_10 != 0)\n                                {\n                                    if (r14 > rbx_1)\n                                    {\n                                        r15[rbx_1] = 0x27;\n                                    }\n                                    if ((rbx_1 + 1) < r14)\n                                    {\n                                        r15[(rbx_1 + 1)] = 0x24;\n                                    }\n                                    if ((rbx_1 + 2) < r14)\n                                    {\n                                        r15[(rbx_1 + 2)] = 0x27;\n                                    }\n                                    rbx_1 = (rbx_1 + 3);\n                                    r10 = rax_10;\n                                }\n                            label_40384b:\n                                if (r14 <= rbx_1)\n                                {\n                                    goto label_403855;\n                                }\n                                r15[rbx_1] = 0x5c;\n                            label_403855:\n                                rbx_1 = (rbx_1 + 1);\n                                r12_1 = (r12_1 + 1);\n                                goto label_40385d;\n                            }\n                            case 9:\n                            {\n                                goto label_403a40;\n                            }\n                            case 0xa:\n                            {\n                                goto label_4039b8;\n                            }\n                            case 0xb:\n                            {\n                                goto label_403aa0;\n                            }\n                            case 0xc:\n                            {\n                                goto label_403a80;\n                            }\n                            case 0xd:\n                            {\n                                goto label_403a69;\n                            }\n                            case 0x20:\n                            {\n                                rax_27 = var_b8;\n                                goto label_403dca;\n                            }\n                            case 0x21:\n                            case 0x22:\n                            case 0x24:\n                            case 0x26:\n                            case 0x28:\n                            case 0x29:\n                            case 0x2a:\n                            case 0x3b:\n                            case 0x3c:\n                            case 0x3d:\n                            case 0x3e:\n                            case 0x5b:\n                            case 0x5e:\n                            case 0x60:\n                            case 0x7c:\n                            {\n                                goto label_403a55;\n                            }\n                            case 0x23:\n                            case 0x7e:\n                            {\n                                rax_28 = var_b8;\n                                goto label_403daa;\n                            }\n                            case 0x25:\n                            case 0x2b:\n                            case 0x2c:\n                            case 0x2d:\n                            case 0x2e:\n                            case 0x2f:\n                            case 0x30:\n                            case 0x31:\n                            case 0x32:\n                            case 0x33:\n                            case 0x34:\n                            case 0x35:\n                            case 0x36:\n                            case 0x37:\n                            case 0x38:\n                            case 0x39:\n                            case 0x3a:\n                            case 0x41:\n                            case 0x42:\n                            case 0x43:\n                            case 0x44:\n                            case 0x45:\n                            case 0x46:\n                            case 0x47:\n                            case 0x48:\n                            case 0x49:\n                            case 0x4a:\n                            case 0x4b:\n                            case 0x4c:\n                            case 0x4d:\n                            case 0x4e:\n                            case 0x4f:\n                            case 0x50:\n                            case 0x51:\n                            case 0x52:\n                            case 0x53:\n                            case 0x54:\n                            case 0x55:\n                            case 0x56:\n                            case 0x57:\n                            case 0x58:\n                            case 0x59:\n                            case 0x5a:\n                            case 0x5d:\n                            case 0x5f:\n                            case 0x61:\n                            case 0x62:\n                            case 0x63:\n                            case 0x64:\n                            case 0x65:\n                            case 0x66:\n                            case 0x67:\n                            case 0x68:\n                            case 0x69:\n                            case 0x6a:\n                            case 0x6b:\n                            case 0x6c:\n                            case 0x6d:\n                            case 0x6e:\n                            case 0x6f:\n                            case 0x70:\n                            case 0x71:\n                            case 0x72:\n                            case 0x73:\n                            case 0x74:\n                            case 0x75:\n                            case 0x76:\n                            case 0x77:\n                            case 0x78:\n                            case 0x79:\n                            case 0x7a:\n                            {\n                                rax_27 = var_b8;\n                                goto label_403d92;\n                            }\n                            case 0x27:\n                            {\n                                goto label_40394d;\n                            }\n                            case 0x3f:\n                            {\n                                goto label_40391d;\n                            }\n                            case 0x5c:\n                            {\n                                goto label_40397a;\n                            }\n                            case 0x7b:\n                            case 0x7d:\n                            {\n                                goto label_403779;\n                            }\n                        }\n                    }\n                    else\n                    {\n                    label_403d70:\n                        rbp_3 = *r8;\n                        if (rbp_3 > 0x7e)\n                        {\n                        label_403b70:\n                            var_b8 = 0;\n                        label_403b75:\n                            uint64_t rdi_4;\n                            if (rax == 1)\n                            {\n                                r10 = r10;\n                                rdi_4 = 1;\n                                rax_12 = (*__ctype_b_loc()[rbp_3] & 0x4000);\n                                r13 = rax_12 != 0;\n                                rdx = rax_12 == 0;\n                                rdx = (rdx & var_c0);\n                            label_403bc4:\n                                if (rdx == 0)\n                                {\n                                    goto label_403bd0;\n                                }\n                                rdx = var_c0;\n                                r13 = 0;\n                            label_4040c1:\n                                var_98 = r13;\n                                int32_t rsi_7 = 0;\n                                int64_t rcx_11 = (rdi_4 + r12_1);\n                                char rdi_9 = var_b8;\n                                while (true)\n                                {\n                                    if (rdx != 0)\n                                    {\n                                        rax_12 = r11_1 == 2;\n                                        if (var_5c != 0)\n                                        {\n                                            break;\n                                        }\n                                        rax_12 = (rax_12 & (r10 ^ 1));\n                                        if (rax_12 != 0)\n                                        {\n                                            if (r14 > rbx_1)\n                                            {\n                                                r15[rbx_1] = 0x27;\n                                            }\n                                            if (r14 > (rbx_1 + 1))\n                                            {\n                                                r15[(rbx_1 + 1)] = 0x24;\n                                            }\n                                            if (r14 > (rbx_1 + 2))\n                                            {\n                                                r15[(rbx_1 + 2)] = 0x27;\n                                            }\n                                            rbx_1 = (rbx_1 + 3);\n                                            r10 = rax_12;\n                                        }\n                                        if (r14 > rbx_1)\n                                        {\n                                            r15[rbx_1] = 0x5c;\n                                        }\n                                        if (r14 > (rbx_1 + 1))\n                                        {\n                                            r15[(rbx_1 + 1)] = ((rbp_3 >> 6) + 0x30);\n                                        }\n                                        if (r14 > (rbx_1 + 2))\n                                        {\n                                            int32_t rax_40;\n                                            rax_40 = (rbp_3 >> 3);\n                                            r15[(rbx_1 + 2)] = ((rax_40 & 7) + 0x30);\n                                        }\n                                        r12_1 = (r12_1 + 1);\n                                        rbx_1 = (rbx_1 + 3);\n                                        rbp_3 = ((rbp_3 & 7) + 0x30);\n                                        if (r12_1 >= rcx_11)\n                                        {\n                                            break;\n                                        }\n                                        rsi_7 = rdx;\n                                    }\n                                    else\n                                    {\n                                        rax_12 = ((rsi_7 ^ 1) & r10);\n                                        if (rdi_9 != 0)\n                                        {\n                                            if (r14 > rbx_1)\n                                            {\n                                                r15[rbx_1] = 0x5c;\n                                            }\n                                            rbx_1 = (rbx_1 + 1);\n                                        }\n                                        r12_1 = (r12_1 + 1);\n                                        if (r12_1 >= rcx_11)\n                                        {\n                                            break;\n                                        }\n                                        if (rax_12 == 0)\n                                        {\n                                            rdi_9 = 0;\n                                        }\n                                        else\n                                        {\n                                            if (r14 > rbx_1)\n                                            {\n                                                r15[rbx_1] = 0x27;\n                                            }\n                                            if (r14 > (rbx_1 + 1))\n                                            {\n                                                r15[(rbx_1 + 1)] = 0x27;\n                                            }\n                                            rbx_1 = (rbx_1 + 2);\n                                            rdi_9 = 0;\n                                            r10 = 0;\n                                        }\n                                    }\n                                    if (r14 > rbx_1)\n                                    {\n                                        r15[rbx_1] = rbp_3;\n                                    }\n                                    rbp_3 = *(arg3 + r12_1);\n                                    rbx_1 = (rbx_1 + 1);\n                                }\n                                if ((rdx == 0 && r12_1 >= rcx_11))\n                                {\n                                    r13 = var_98;\n                                    goto label_4038e4;\n                                }\n                                if ((rdx != 0 && var_5c != 0))\n                                {\n                                    r13_1 = r11_1;\n                                    var_c0 = rax_12;\n                                    r11 = r9;\n                                    goto label_4039dc;\n                                }\n                                r13 = var_98;\n                                goto label_40385d;\n                            }\n                            mbstate_t var_40;\n                            var_40.__count = 0;\n                            var_40.__value = 0;\n                            if (r9 == -1)\n                            {\n                                var_90 = r10;\n                                var_98 = r8;\n                                r10 = var_90;\n                                r8 = var_98;\n                                r9 = strlen(arg3);\n                            }\n                            uint64_t rbx_2 = 0;\n                            char var_5a_1 = r10;\n                            char var_59_1 = rbp_3;\n                            var_88 = r15;\n                            var_98 = r9;\n                            var_90 = r11_1;\n                            while (true)\n                            {\n                                int64_t r15_1 = (r12_1 + rbx_2);\n                                char* rbp_4 = (arg3 + r15_1);\n                                uint32_t var_44;\n                                rax_12 = sub_408320(&var_44, rbp_4, (var_98 - r15_1), &var_40);\n                                if (rax_12 != 0)\n                                {\n                                    if (rax_12 == -1)\n                                    {\n                                        rdi_4 = rbx_2;\n                                        rbp_3 = var_59_1;\n                                        r13 = 0;\n                                        r10 = var_5a_1;\n                                        r15 = var_88;\n                                        r9 = var_98;\n                                        r11_1 = var_90;\n                                        rdx = var_c0;\n                                        break;\n                                    }\n                                    if (rax_12 == -2)\n                                    {\n                                        r9 = var_98;\n                                        rax_12 = rbx_2;\n                                        rdi_4 = rbx_2;\n                                        r10 = var_5a_1;\n                                        rbp_3 = var_59_1;\n                                        r15 = var_88;\n                                        r11_1 = var_90;\n                                        if ((r15_1 < r9 && *rbp_4 != 0))\n                                        {\n                                            do\n                                            {\n                                                rax_12 = (rax_12 + 1);\n                                                if ((r12_1 + rax_12) >= r9)\n                                                {\n                                                    break;\n                                                }\n                                            } while (r8[rax_12] != 0);\n                                            rdi_4 = rax_12;\n                                        }\n                                        rdx = var_c0;\n                                        r13 = 0;\n                                        break;\n                                    }\n                                    if ((var_90 == 2 && (var_5c != 0 && rax_12 != 1)))\n                                    {\n                                        char* rax_34 = ((arg3 + r15_1) + 1);\n                                        int64_t rsi_6 = ((arg3 + rax_12) + r15_1);\n                                        char rcx_9;\n                                        do\n                                        {\n                                            rcx_9 = (*rax_34 - 0x5b);\n                                            if ((rcx_9 <= 0x21 && ((1 << rcx_9) & 0x20000002b) != 0))\n                                            {\n                                                break;\n                                            }\n                                            rax_34 = &rax_34[1];\n                                        } while (rsi_6 != rax_34);\n                                        if ((rcx_9 <= 0x21 && ((1 << rcx_9) & 0x20000002b) != 0))\n                                        {\n                                            r15 = var_88;\n                                            r13_1 = 2;\n                                            r11 = var_98;\n                                            goto label_4039dc;\n                                        }\n                                    }\n                                    mbstate_t* rdi_7 = &var_40;\n                                    if (iswprint(var_44) == 0)\n                                    {\n                                        r13 = 0;\n                                    }\n                                    rbx_2 = (rbx_2 + rax_12);\n                                    if (mbsinit(rdi_7) == 0)\n                                    {\n                                        continue;\n                                    }\n                                }\n                                rdi_4 = rbx_2;\n                                rbp_3 = var_59_1;\n                                r10 = var_5a_1;\n                                r15 = var_88;\n                                r9 = var_98;\n                                r11_1 = var_90;\n                                rdx = ((r13 ^ 1) & var_c0);\n                                break;\n                            }\n                            if (rdi_4 > 1)\n                            {\n                                goto label_4040c1;\n                            }\n                            goto label_403bc4;\n                        }\n                        switch (rbp_3)\n                        {\n                            case 0:\n                            {\n                            label_403ab0:\n                                if (var_5c != 0)\n                                {\n                                    r13_1 = r11_1;\n                                    r11 = r9;\n                                    var_c0 = r13_1 == 2;\n                                    goto label_4039dc;\n                                }\n                                var_b8 = 0;\n                            label_403ac7:\n                                rdx = r11_1 == 2;\n                                rax_8 = ((r10 ^ 1) & rdx);\n                                int64_t rcx_6;\n                                if (rax_8 == 0)\n                                {\n                                    rcx_6 = rbx_1;\n                                    if (r14 <= rbx_1)\n                                    {\n                                        goto label_403b12;\n                                    }\n                                    rax_8 = r10;\n                                label_403b0a:\n                                    r15[rcx_6] = 0x5c;\n                                    r10 = rax_8;\n                                label_403b12:\n                                    rbx_1 = (rcx_6 + 1);\n                                    if (r11_1 == 2)\n                                    {\n                                        rax_8 = r13;\n                                        rbp_3 = 0x30;\n                                        r13 = 0;\n                                        goto label_4038cc;\n                                    }\n                                    rbp_3 = 0x30;\n                                    if ((r12_1 + 1) < r9)\n                                    {\n                                        char rax_20 = *((arg3 + r12_1) + 1);\n                                        var_98 = rax_20;\n                                        if ((rax_20 - 0x30) <= 9)\n                                        {\n                                            if (r14 > rbx_1)\n                                            {\n                                                r15[rbx_1] = 0x30;\n                                            }\n                                            if (r14 > (rcx_6 + 2))\n                                            {\n                                                r15[(rcx_6 + 2)] = 0x30;\n                                            }\n                                            rbx_1 = (rcx_6 + 3);\n                                            rbp_3 = 0x30;\n                                        }\n                                    }\n                                    goto label_403b53;\n                                }\n                                if (r14 > rbx_1)\n                                {\n                                    r15[rbx_1] = 0x27;\n                                }\n                                if (r14 > (rbx_1 + 1))\n                                {\n                                    r15[(rbx_1 + 1)] = 0x24;\n                                }\n                                if (r14 > (rbx_1 + 2))\n                                {\n                                    r15[(rbx_1 + 2)] = 0x27;\n                                }\n                                rcx_6 = (rbx_1 + 3);\n                                if (r14 > rcx_6)\n                                {\n                                    goto label_403b0a;\n                                }\n                                rbx_1 = (rbx_1 + 4);\n                                r10 = rax_8;\n                                r13 = 0;\n                                rbp_3 = 0x30;\n                                goto label_4038cc;\n                            }\n                            case 1:\n                            case 2:\n                            case 3:\n                            case 4:\n                            case 5:\n                            case 6:\n                            case 0xe:\n                            case 0xf:\n                            case 0x10:\n                            case 0x11:\n                            case 0x12:\n                            case 0x13:\n                            case 0x14:\n                            case 0x15:\n                            case 0x16:\n                            case 0x17:\n                            case 0x18:\n                            case 0x19:\n                            case 0x1a:\n                            case 0x1b:\n                            case 0x1c:\n                            case 0x1d:\n                            case 0x1e:\n                            case 0x1f:\n                            case 0x40:\n                            {\n                                goto label_403b70;\n                            }\n                            case 7:\n                            {\n                                rbp_3 = 0x61;\n                                goto label_403a85;\n                            }\n                            case 8:\n                            {\n                                rbp_3 = 0x62;\n                                goto label_4039bd;\n                            }\n                            case 9:\n                            {\n                            label_403a40:\n                                rbp_3 = 0x74;\n                                goto label_4039bd;\n                            }\n                            case 0xa:\n                            {\n                            label_4039b8:\n                                rbp_3 = 0x6e;\n                            label_4039bd:\n                                rdx = 0;\n                                r13 = 0;\n                                if (var_5c != 0)\n                                {\n                                    goto label_4039d0;\n                                }\n                                goto label_403818;\n                            }\n                            case 0xb:\n                            {\n                            label_403aa0:\n                                rbp_3 = 0x76;\n                                goto label_403a85;\n                            }\n                            case 0xc:\n                            {\n                            label_403a80:\n                                rbp_3 = 0x66;\n                            label_403a85:\n                                if (var_5c == 0)\n                                {\n                                    goto label_403a90;\n                                }\n                                r13_1 = r11_1;\n                                rax_14 = 0;\n                                r11 = r9;\n                            label_4039d8:\n                                var_c0 = (var_c0 & rax_14);\n                                goto label_4039dc;\n                            }\n                            case 0xd:\n                            {\n                                var_b8 = 0;\n                            label_403a69:\n                                rbp_3 = 0xd;\n                                rcx_2 = 0x72;\n                                rdx = r11_1 == 2;\n                                goto label_4039a0;\n                            }\n                            case 0x20:\n                            {\n                                rax_27 = 0;\n                            label_403dca:\n                                rbp_3 = 0x20;\n                                goto label_403d92;\n                            }\n                            case 0x21:\n                            case 0x22:\n                            case 0x24:\n                            case 0x26:\n                            case 0x28:\n                            case 0x29:\n                            case 0x2a:\n                            case 0x3b:\n                            case 0x3c:\n                            case 0x3d:\n                            case 0x3e:\n                            case 0x5b:\n                            case 0x5e:\n                            case 0x60:\n                            case 0x7c:\n                            {\n                                var_b8 = 0;\n                            label_403a55:\n                                rdx = 0;\n                            label_4039ab:\n                                r13 = 0;\n                                goto label_4037c5;\n                            }\n                            case 0x23:\n                            case 0x7e:\n                            {\n                                rax_28 = 0;\n                            label_403daa:\n                                if (r12_1 == 0)\n                                {\n                                    r13 = var_b8;\n                                    rdx = 0;\n                                    var_b8 = rax_28;\n                                    goto label_4037c5;\n                                }\n                                var_b8 = rax_28;\n                                r13 = 0;\n                            label_4037cf:\n                                rax_8 = 0;\n                                goto label_4037d1;\n                            }\n                            case 0x25:\n                            case 0x2b:\n                            case 0x2c:\n                            case 0x2d:\n                            case 0x2e:\n                            case 0x2f:\n                            case 0x30:\n                            case 0x31:\n                            case 0x32:\n                            case 0x33:\n                            case 0x34:\n                            case 0x35:\n                            case 0x36:\n                            case 0x37:\n                            case 0x38:\n                            case 0x39:\n                            case 0x3a:\n                            case 0x41:\n                            case 0x42:\n                            case 0x43:\n                            case 0x44:\n                            case 0x45:\n                            case 0x46:\n                            case 0x47:\n                            case 0x48:\n                            case 0x49:\n                            case 0x4a:\n                            case 0x4b:\n                            case 0x4c:\n                            case 0x4d:\n                            case 0x4e:\n                            case 0x4f:\n                            case 0x50:\n                            case 0x51:\n                            case 0x52:\n                            case 0x53:\n                            case 0x54:\n                            case 0x55:\n                            case 0x56:\n                            case 0x57:\n                            case 0x58:\n                            case 0x59:\n                            case 0x5a:\n                            case 0x5d:\n                            case 0x5f:\n                            case 0x61:\n                            case 0x62:\n                            case 0x63:\n                            case 0x64:\n                            case 0x65:\n                            case 0x66:\n                            case 0x67:\n                            case 0x68:\n                            case 0x69:\n                            case 0x6a:\n                            case 0x6b:\n                            case 0x6c:\n                            case 0x6d:\n                            case 0x6e:\n                            case 0x6f:\n                            case 0x70:\n                            case 0x71:\n                            case 0x72:\n                            case 0x73:\n                            case 0x74:\n                            case 0x75:\n                            case 0x76:\n                            case 0x77:\n                            case 0x78:\n                            case 0x79:\n                            case 0x7a:\n                            {\n                                rax_27 = 0;\n                            label_403d92:\n                                r13 = var_b8;\n                                var_b8 = rax_27;\n                                rax_8 = 0;\n                                goto label_4037d1;\n                            }\n                            case 0x27:\n                            {\n                                var_b8 = 0;\n                            label_40394d:\n                                if (r11_1 != 2)\n                                {\n                                    var_5b_1 = r13;\n                                    rdx = 0;\n                                    rbp_3 = 0x27;\n                                    goto label_4037c5;\n                                }\n                                if (var_5c != 0)\n                                {\n                                    goto label_40470d;\n                                }\n                                if (r14 != 0)\n                                {\n                                    rdx = 0;\n                                }\n                                if ((r14 == 0 || (r14 != 0 && var_70 != 0)))\n                                {\n                                    if (r14 > rbx_1)\n                                    {\n                                        r15[rbx_1] = 0x27;\n                                    }\n                                    if (r14 > (rbx_1 + 1))\n                                    {\n                                        r15[(rbx_1 + 1)] = 0x5c;\n                                    }\n                                    if (r14 <= (rbx_1 + 2))\n                                    {\n                                        rdx = r14;\n                                        r14 = var_70;\n                                    }\n                                    else\n                                    {\n                                        rdx = r14;\n                                        r15[(rbx_1 + 2)] = 0x27;\n                                        r14 = var_70;\n                                    }\n                                }\n                                var_5b_1 = r13;\n                                rbx_1 = (rbx_1 + 3);\n                                rax_8 = 0;\n                                r10 = 0;\n                                var_70 = r14;\n                                rbp_3 = 0x27;\n                                r14 = rdx;\n                                goto label_4038cc;\n                            }\n                            case 0x3f:\n                            {\n                                var_b8 = 0;\n                            label_40391d:\n                                if (r11_1 == 2)\n                                {\n                                    if (var_5c != 0)\n                                    {\n                                    label_40470d:\n                                        r13_1 = r11_1;\n                                        r11 = r9;\n                                        goto label_4039dc;\n                                    }\n                                    r13 = 0;\n                                    rax_8 = 0;\n                                    rbp_3 = 0x3f;\n                                label_4038cc:\n                                    rdx = r11_1 == 2;\n                                    if (var_b8 != 0)\n                                    {\n                                        goto label_403807;\n                                    }\n                                    r12_1 = (r12_1 + 1);\n                                    rax_12 = ((rax_8 ^ 1) & r10);\n                                    goto label_4038e4;\n                                }\n                                if (r11_1 != 5)\n                                {\n                                    rbp_3 = 0x3f;\n                                    rdx = r11_1 == 2;\n                                    r13 = 0;\n                                    goto label_4037c5;\n                                }\n                                if ((arg6 & 4) == 0)\n                                {\n                                label_403eb0:\n                                    rdx = 0;\n                                    r13 = 0;\n                                    rbp_3 = 0x3f;\n                                    goto label_4037c5;\n                                }\n                                int64_t rax_30 = (r12_1 + 2);\n                                if (rax_30 >= r9)\n                                {\n                                    goto label_403eb0;\n                                }\n                                if (*((arg3 + r12_1) + 1) != 0x3f)\n                                {\n                                    goto label_403eb0;\n                                }\n                                rbp_3 = *(arg3 + rax_30);\n                                if (rbp_3 > 0x3e)\n                                {\n                                    goto label_403eb0;\n                                }\n                                if ((!(TEST_BITQ(0x7000a38200000000, rbp_3))))\n                                {\n                                    goto label_403eb0;\n                                }\n                                if (var_5c != 0)\n                                {\n                                    goto label_4046c0;\n                                }\n                                if (r14 > rbx_1)\n                                {\n                                    r15[rbx_1] = 0x3f;\n                                }\n                                if (r14 > (rbx_1 + 1))\n                                {\n                                    r15[(rbx_1 + 1)] = 0x22;\n                                }\n                                if (r14 > (rbx_1 + 2))\n                                {\n                                    r15[(rbx_1 + 2)] = 0x22;\n                                }\n                                if (r14 > (rbx_1 + 3))\n                                {\n                                    r15[(rbx_1 + 3)] = 0x3f;\n                                }\n                                rbx_1 = (rbx_1 + 4);\n                                rdx = 0;\n                                r13 = 0;\n                                r12_1 = rax_30;\n                            label_403b53:\n                                rax_8 = r13;\n                                r13 = 0;\n                                if (((var_c0 ^ 1) | rdx) != 0)\n                                {\n                                    goto label_4038cc;\n                                }\n                            label_4037d1:\n                                if (arg7 == 0)\n                                {\n                                    goto label_4038cc;\n                                }\n                                if (((*(arg7 + ((rbp_3 >> 5) << 2)) >> rbp_3) & 1) == 0)\n                                {\n                                    goto label_4038cc;\n                                }\n                                rdx = r11_1 == 2;\n                                goto label_403807;\n                            }\n                            case 0x5c:\n                            {\n                                var_b8 = 0;\n                            label_40397a:\n                                rdx = (var_c0 & var_5c);\n                                rbp_3 = 0x5c;\n                                rcx_2 = 0x5c;\n                                rax_1 = var_a0_1 != 0;\n                                rdx = (rdx & rax_1);\n                                if (rdx == 0)\n                                {\n                                    goto label_4039a0;\n                                }\n                                r12_1 = (r12_1 + 1);\n                                rax_12 = r10;\n                                r13 = 0;\n                            label_4038e4:\n                                if (rax_12 != 0)\n                                {\n                                    if (r14 > rbx_1)\n                                    {\n                                        r15[rbx_1] = 0x27;\n                                    }\n                                    if (r14 > (rbx_1 + 1))\n                                    {\n                                        r15[(rbx_1 + 1)] = 0x27;\n                                    }\n                                    rbx_1 = (rbx_1 + 2);\n                                    r10 = 0;\n                                    goto label_40385d;\n                                }\n                            label_40385d:\n                                if (rbx_1 >= r14)\n                                {\n                                    goto label_403866;\n                                }\n                                r15[rbx_1] = rbp_3;\n                            label_403866:\n                                char rdi_2 = var_a9;\n                                rbx_1 = (rbx_1 + 1);\n                                if (r13 == 0)\n                                {\n                                    rdi_2 = 0;\n                                }\n                                var_a9 = rdi_2;\n                                continue;\n                            }\n                            case 0x7b:\n                            case 0x7d:\n                            {\n                                var_b8 = 0;\n                            label_403779:\n                                rax_1 = r9 != 1;\n                                if (r9 == -1)\n                                {\n                                    rax_1 = *(arg3 + 1) != 0;\n                                }\n                                rdx = r11_1 == 2;\n                                if (rax_1 != 0)\n                                {\n                                    goto label_4039ab;\n                                }\n                                goto label_40379d;\n                            }\n                        }\n                    }\n                }\n            }\n        label_403e56:\n            *r15 = 0x27;\n            r13 = 2;\n            rbx_1 = 1;\n            var_78_1 = \"'\";\n            var_a0_1 = 1;\n            var_5c = false;\n            var_5b_1 = rax_1;\n        }\n    }\n    if ((r13 == 4 && rbp_1 == 0))\n    {\n        var_c0 = 1;\n    }\n    switch (r13)\n    {\n        case 0:\n        {\n            var_a9 = 1;\n            r10 = 0;\n            rbx_1 = 0;\n            var_5b_1 = 0;\n            var_70 = 0;\n            var_5c = false;\n            var_c0 = 0;\n            var_a0_1 = 0;\n            var_78_1 = nullptr;\n            goto label_403668;\n        }\n        case 2:\n        {\n            if (rbp_1 != 0)\n            {\n                var_a9 = 1;\n                r10 = 0;\n                rbx_1 = 0;\n                var_5b_1 = 0;\n                var_70 = 0;\n                var_5c = true;\n                var_c0 = 0;\n                var_a0_1 = 1;\n                var_78_1 = \"'\";\n                goto label_403668;\n            }\n            var_c0 = 0;\n            break;\n        }\n        case 3:\n        {\n            var_a9 = 1;\n            r10 = 0;\n            rbx_1 = 0;\n            r13 = 2;\n            var_5b_1 = 0;\n            var_70 = 0;\n            var_5c = true;\n            var_c0 = 1;\n            var_a0_1 = 1;\n            var_78_1 = \"'\";\n            goto label_403668;\n        }\n        case 5:\n        {\n            if (rbp_1 != 0)\n            {\n                var_a9 = 1;\n                r10 = 0;\n                rbx_1 = 0;\n                var_5b_1 = 0;\n                var_70 = 0;\n                var_5c = true;\n                var_c0 = 1;\n                var_a0_1 = 1;\n                var_78_1 = &data_40a834;\n            }\n            else\n            {\n                if (r14 == 0)\n                {\n                    var_70 = 0;\n                    r10 = 0;\n                    var_a9 = 1;\n                    var_5b_1 = 0;\n                }\n                else\n                {\n                    *r15 = 0x22;\n                    r10 = 0;\n                    var_a9 = 1;\n                    var_5b_1 = 0;\n                    var_70 = 0;\n                }\n                var_5c = false;\n                rbx_1 = 1;\n                var_c0 = 1;\n                var_a0_1 = 1;\n                var_78_1 = &data_40a834;\n            }\n            goto label_403668;\n        }\n        case 6:\n        {\n            var_a9 = 1;\n            r10 = 0;\n            rbx_1 = 0;\n            r13 = 5;\n            var_5b_1 = 0;\n            var_70 = 0;\n            var_5c = true;\n            var_c0 = 1;\n            var_a0_1 = 1;\n            var_78_1 = &data_40a834;\n            goto label_403668;\n        }\n        case 7:\n        {\n            var_a9 = 1;\n            r10 = 0;\n            rbx_1 = 0;\n            var_5b_1 = 0;\n            var_70 = 0;\n            var_5c = false;\n            var_c0 = 1;\n            var_a0_1 = 0;\n            var_78_1 = nullptr;\n            goto label_403668;\n        }\n        case 8:\n        case 9:\n        case 0xa:\n        {\n            if ((!cond:1))\n            {\n                arg8 = sub_4034d0(&data_40a845, r13);\n                arg9 = sub_4034d0(\"'\", r13);\n            }\n            rbx_1 = 0;\n            if (rbp_1 == 0)\n            {\n                char rax_49 = *arg8;\n                if (rax_49 != 0)\n                {\n                    do\n                    {\n                        if (r14 > rbx_1)\n                        {\n                            r15[rbx_1] = rax_49;\n                        }\n                        rbx_1 = (rbx_1 + 1);\n                        rax_49 = arg8[rbx_1];\n                    } while (rax_49 != 0);\n                }\n            }\n            uint64_t rax_46;\n            rax_46 = strlen(arg9);\n            var_a9 = 1;\n            r10 = 0;\n            var_a0_1 = rax_46;\n            var_5b_1 = 0;\n            var_78_1 = arg9;\n            var_70 = 0;\n            var_c0 = 1;\n            goto label_403668;\n        }\n    }\n    if (((r13 == 4 && rbp_1 == 0) || r13 == 2))\n    {\n        if (r14 != 0)\n        {\n            r10 = 0;\n            rax_1 = 0;\n            var_a9 = 1;\n            var_70 = 0;\n            goto label_403e56;\n        }\n        var_a9 = 1;\n        r10 = 0;\n        rbx_1 = 1;\n        r13 = 2;\n        var_70 = 0;\n        var_5b_1 = 0;\n        var_5c = false;\n        var_a0_1 = 1;\n        var_78_1 = \"'\";\n        goto label_403668;\n    }\n}\n\n"
        },
        {
            "funcName": "sub_404800",
            "funcStartAddr": "0x401d65",
            "funcEndAddr": "0x40499e",
            "decompiledFuncCode": "char* sub_404800(int32_t arg1, uint64_t arg2, uint64_t arg3, int32_t* arg4)\n{\n    int64_t r15 = arg1;\n    int32_t* rax = __errno_location();\n    int64_t rbx = data_60f2b8;\n    int32_t rax_1 = *rax;\n    if (r15 < 0)\n    {\n        abort();\n        /* no return */\n    }\n    if (data_60f2d0 <= r15)\n    {\n        if (r15 == 0x7fffffff)\n        {\n            sub_4069e0();\n            /* no return */\n        }\n        int32_t r12_1 = (r15 + 1);\n        int64_t rsi_1 = (r12_1 << 4);\n        if (rbx == 0x60f2c0)\n        {\n            int64_t rax_9 = sub_4067f0(0, rsi_1);\n            int128_t zmm0 = data_60f2c0;\n            rbx = rax_9;\n            data_60f2b8 = rax_9;\n            *rax_9 = zmm0;\n        }\n        else\n        {\n            int64_t rax_2 = sub_4067f0(rbx, rsi_1);\n            data_60f2b8 = rax_2;\n            rbx = rax_2;\n        }\n        int64_t rdi_1 = data_60f2d0;\n        memset(((rdi_1 << 4) + rbx), 0, ((r12_1 - rdi_1) << 4));\n        data_60f2d0 = r12_1;\n    }\n    int64_t rbx_1 = (rbx + (r15 << 4));\n    void* r15_2 = &arg4[2];\n    int32_t rax_4 = (arg4[1] | 1);\n    uint64_t r11 = *rbx_1;\n    char* r12_2 = *(rbx_1 + 8);\n    int64_t rax_5 = sub_4035d0(r12_2, r11, arg2, arg3, *arg4, rax_4, r15_2, *(arg4 + 0x28), *(arg4 + 0x30));\n    if (r11 <= rax_5)\n    {\n        size_t rsi_3 = (rax_5 + 1);\n        *rbx_1 = rsi_3;\n        if (r12_2 != 0x60f340)\n        {\n            free(r12_2);\n        }\n        char* rax_6 = sub_406790(rsi_3);\n        uint32_t r8_1 = *arg4;\n        *(rbx_1 + 8) = rax_6;\n        r12_2 = rax_6;\n        sub_4035d0(rax_6, rsi_3, arg2, arg3, r8_1, rax_4, r15_2, *(arg4 + 0x28), *(arg4 + 0x30));\n    }\n    *rax = rax_1;\n    return r12_2;\n}\n\n"
        },
        {
            "funcName": "sub_4049a0",
            "funcStartAddr": "0x4049a0",
            "funcEndAddr": "0x4049d4",
            "decompiledFuncCode": "int64_t sub_4049a0(int64_t arg1)\n{\n    int64_t rbx = arg1;\n    int32_t* rax = __errno_location();\n    int32_t r12 = *rax;\n    if (rbx == 0)\n    {\n        rbx = 0x60f440;\n    }\n    int64_t rax_1 = sub_406990(rbx, 0x38);\n    *rax = r12;\n    return rax_1;\n}\n\n"
        },
        {
            "funcName": "sub_4049e0",
            "funcStartAddr": "0x4049e0",
            "funcEndAddr": "0x4049ef",
            "decompiledFuncCode": "uint64_t sub_4049e0(int32_t* arg1)\n{\n    if (arg1 == 0)\n    {\n        arg1 = &data_60f440;\n    }\n    return *arg1;\n}\n\n"
        },
        {
            "funcName": "sub_4049f0",
            "funcStartAddr": "0x4049f0",
            "funcEndAddr": "0x4049ff",
            "decompiledFuncCode": "void sub_4049f0(int32_t* arg1, int32_t arg2)\n{\n    if (arg1 == 0)\n    {\n        arg1 = &data_60f440;\n    }\n    *arg1 = arg2;\n}\n\n"
        },
        {
            "funcName": "sub_404a00",
            "funcStartAddr": "0x404a00",
            "funcEndAddr": "0x404a33",
            "decompiledFuncCode": "uint64_t sub_404a00(int64_t arg1, uint8_t arg2, int32_t arg3)\n{\n    if (arg1 == 0)\n    {\n        arg1 = 0x60f440;\n    }\n    char rcx_1 = (arg2 & 0x1f);\n    int32_t rsi = *((arg1 + ((arg2 >> 5) << 2)) + 8);\n    uint32_t rax_3 = (rsi >> rcx_1);\n    *((arg1 + ((arg2 >> 5) << 2)) + 8) = ((((arg3 ^ rax_3) & 1) << rcx_1) ^ rsi);\n    return (rax_3 & 1);\n}\n\n"
        },
        {
            "funcName": "sub_404a40",
            "funcStartAddr": "0x404a40",
            "funcEndAddr": "0x404a53",
            "decompiledFuncCode": "uint64_t sub_404a40(int128_t* arg1, int32_t arg2)\n{\n    if (arg1 == 0)\n    {\n        arg1 = &data_60f440;\n    }\n    uint64_t rax = *(arg1 + 4);\n    *(arg1 + 4) = arg2;\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_404a60",
            "funcStartAddr": "0x404a60",
            "funcEndAddr": "0x404a8b",
            "decompiledFuncCode": "void sub_404a60(int32_t* arg1, int64_t arg2, int64_t arg3)\n{\n    if (arg1 == 0)\n    {\n        arg1 = &data_60f440;\n    }\n    *arg1 = 0xa;\n    if ((arg2 != 0 && arg3 != 0))\n    {\n        *(arg1 + 0x28) = arg2;\n        *(arg1 + 0x30) = arg3;\n        return;\n    }\n    int64_t var_8 = 0x60f440;\n    abort();\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_404a90",
            "funcStartAddr": "0x404a90",
            "funcEndAddr": "0x404b02",
            "decompiledFuncCode": "int64_t sub_404a90(char* arg1, uint64_t arg2, uint64_t arg3, uint64_t arg4, \n    int32_t* arg5)\n{\n    int32_t* rbx = arg5;\n    if (arg5 == 0)\n    {\n        rbx = &data_60f440;\n    }\n    int32_t* rax = __errno_location();\n    int32_t r12 = *rax;\n    int64_t rax_2 = sub_4035d0(arg1, arg2, arg3, arg4, *rbx, rbx[1], &rbx[2], *(rbx + 0x28), *(rbx + 0x30));\n    *rax = r12;\n    return rax_2;\n}\n\n"
        },
        {
            "funcName": "sub_404b10",
            "funcStartAddr": "0x404b10",
            "funcEndAddr": "0x404bf1",
            "decompiledFuncCode": "char* sub_404b10(uint64_t arg1, uint64_t arg2, int64_t* arg3, int32_t* arg4)\n{\n    int32_t* rbx = arg4;\n    if (arg4 == 0)\n    {\n        rbx = &data_60f440;\n    }\n    int32_t* rax = __errno_location();\n    int32_t rax_1 = *rax;\n    int32_t rbp;\n    rbp = arg3 == 0;\n    int32_t rbp_1 = (rbp | rbx[1]);\n    int64_t rax_2 = sub_4035d0(nullptr, 0, arg1, arg2, *rbx, rbp_1, &rbx[2], *(rbx + 0x28), *(rbx + 0x30));\n    char* rax_3 = sub_406790((rax_2 + 1));\n    sub_4035d0(rax_3, (rax_2 + 1), arg1, arg2, *rbx, rbp_1, &rbx[2], *(rbx + 0x28), *(rbx + 0x30));\n    *rax = rax_1;\n    if (arg3 != 0)\n    {\n        *arg3 = rax_2;\n    }\n    return rax_3;\n}\n\n"
        },
        {
            "funcName": "sub_404c00",
            "funcStartAddr": "0x404c00",
            "funcEndAddr": "0x404c0a",
            "decompiledFuncCode": "int64_t sub_404c00(uint64_t arg1, uint64_t arg2, int32_t* arg3)\n{\n    /* tailcall */\n    return sub_404b10(arg1, arg2, nullptr, arg3);\n}\n\n"
        },
        {
            "funcName": "sub_404c10",
            "funcStartAddr": "0x404c10",
            "funcEndAddr": "0x404ca5",
            "decompiledFuncCode": "uint64_t sub_404c10()\n{\n    uint64_t rax_2 = data_60f2d0;\n    int64_t r12 = data_60f2b8;\n    if (rax_2 > 1)\n    {\n        int64_t* rbx_1 = (r12 + 0x18);\n        int64_t rbp_1 = ((r12 + ((rax_2 - 2) << 4)) + 0x28);\n        do\n        {\n            int64_t rdi_1 = *rbx_1;\n            rbx_1 = &rbx_1[2];\n            rax_2 = free(rdi_1);\n        } while (rbx_1 != rbp_1);\n    }\n    int64_t rdi_2 = *(r12 + 8);\n    if (rdi_2 != 0x60f340)\n    {\n        rax_2 = free(rdi_2);\n        *data_60f2c0 = 0x100;\n        *(data_60f2c0 + 8) = 0x60f340;\n    }\n    if (r12 != 0x60f2c0)\n    {\n        rax_2 = free(r12);\n        data_60f2b8 = 0x60f2c0;\n    }\n    data_60f2d0 = 1;\n    return rax_2;\n}\n\n"
        },
        {
            "funcName": "sub_404cb0",
            "funcStartAddr": "0x404cb0",
            "funcEndAddr": "0x404cc1",
            "decompiledFuncCode": "int64_t sub_404cb0(int32_t arg1, uint64_t arg2)\n{\n    /* tailcall */\n    return sub_404800(arg1, arg2, -1, &data_60f440);\n}\n\n"
        },
        {
            "funcName": "sub_404cd0",
            "funcStartAddr": "0x404cd0",
            "funcEndAddr": "0x404cda",
            "decompiledFuncCode": "int64_t sub_404cd0(int32_t arg1, uint64_t arg2, uint64_t arg3)\n{\n    /* tailcall */\n    return sub_404800(arg1, arg2, arg3, &data_60f440);\n}\n\n"
        },
        {
            "funcName": "sub_404ce0",
            "funcStartAddr": "0x404ce0",
            "funcEndAddr": "0x404cf6",
            "decompiledFuncCode": "int64_t sub_404ce0(uint64_t arg1)\n{\n    /* tailcall */\n    return sub_404800(0, arg1, -1, &data_60f440);\n}\n\n"
        },
        {
            "funcName": "sub_404d00",
            "funcStartAddr": "0x404d00",
            "funcEndAddr": "0x404d12",
            "decompiledFuncCode": "int64_t sub_404d00(uint64_t arg1, uint64_t arg2)\n{\n    /* tailcall */\n    return sub_404800(0, arg1, arg2, &data_60f440);\n}\n\n"
        },
        {
            "funcName": "sub_404d20",
            "funcStartAddr": "0x401d6a",
            "funcEndAddr": "0x404d88",
            "decompiledFuncCode": "char* sub_404d20(int32_t arg1, int32_t arg2, uint64_t arg3)\n{\n    if (arg2 == 0xa)\n    {\n        abort();\n        /* no return */\n    }\n    int32_t var_48 = arg2;\n    int32_t var_44 = 0;\n    int64_t var_40 = 0;\n    int64_t var_38 = 0;\n    int64_t var_30 = 0;\n    int64_t var_28 = 0;\n    int64_t var_20 = 0;\n    int64_t var_18 = 0;\n    return sub_404800(arg1, arg3, -1, &var_48);\n}\n\n"
        },
        {
            "funcName": "sub_404d90",
            "funcStartAddr": "0x401d6f",
            "funcEndAddr": "0x404df4",
            "decompiledFuncCode": "char* sub_404d90(int32_t arg1, int32_t arg2, uint64_t arg3, uint64_t arg4)\n{\n    if (arg2 == 0xa)\n    {\n        abort();\n        /* no return */\n    }\n    int32_t var_48 = arg2;\n    int32_t var_44 = 0;\n    int64_t var_40 = 0;\n    int64_t var_38 = 0;\n    int64_t var_30 = 0;\n    int64_t var_28 = 0;\n    int64_t var_20 = 0;\n    int64_t var_18 = 0;\n    return sub_404800(arg1, arg3, arg4, &var_48);\n}\n\n"
        },
        {
            "funcName": "sub_404e00",
            "funcStartAddr": "0x404e00",
            "funcEndAddr": "0x404e0c",
            "decompiledFuncCode": "int64_t sub_404e00(int32_t arg1, uint64_t arg2)\n{\n    /* tailcall */\n    return sub_404d20(0, arg1, arg2);\n}\n\n"
        },
        {
            "funcName": "sub_404e10",
            "funcStartAddr": "0x404e10",
            "funcEndAddr": "0x404e1f",
            "decompiledFuncCode": "int64_t sub_404e10(int32_t arg1, uint64_t arg2, uint64_t arg3)\n{\n    /* tailcall */\n    return sub_404d90(0, arg1, arg2, arg3);\n}\n\n"
        },
        {
            "funcName": "sub_404e20",
            "funcStartAddr": "0x404e20",
            "funcEndAddr": "0x404e90",
            "decompiledFuncCode": "char* sub_404e20(uint64_t arg1, uint64_t arg2, uint8_t arg3)\n{\n    char rcx_1 = (arg3 & 0x1f);\n    int64_t var_18 = data_60f470;\n    int128_t var_48 = data_60f440;\n    int128_t var_38 = data_60f450;\n    int128_t var_28 = data_60f460;\n    int32_t rdx = *((&var_48 + ((arg3 >> 5) << 2)) + 8);\n    *((&var_48 + ((arg3 >> 5) << 2)) + 8) = ((((!(rdx >> rcx_1)) & 1) << rcx_1) ^ rdx);\n    return sub_404800(0, arg1, arg2, &var_48);\n}\n\n"
        },
        {
            "funcName": "sub_404e90",
            "funcStartAddr": "0x404e90",
            "funcEndAddr": "0x404e9d",
            "decompiledFuncCode": "int64_t sub_404e90(uint64_t arg1, uint8_t arg2)\n{\n    /* tailcall */\n    return sub_404e20(arg1, -1, arg2);\n}\n\n"
        },
        {
            "funcName": "sub_404ea0",
            "funcStartAddr": "0x404ea0",
            "funcEndAddr": "0x404eb1",
            "decompiledFuncCode": "int64_t sub_404ea0(uint64_t arg1)\n{\n    /* tailcall */\n    return sub_404e20(arg1, -1, 0x3a);\n}\n\n"
        },
        {
            "funcName": "sub_404ec0",
            "funcStartAddr": "0x404ec0",
            "funcEndAddr": "0x404eca",
            "decompiledFuncCode": "int64_t sub_404ec0(uint64_t arg1, uint64_t arg2)\n{\n    /* tailcall */\n    return sub_404e20(arg1, arg2, 0x3a);\n}\n\n"
        },
        {
            "funcName": "sub_404ed0",
            "funcStartAddr": "0x401d74",
            "funcEndAddr": "0x404f3e",
            "decompiledFuncCode": "char* sub_404ed0(int32_t arg1, int32_t arg2, uint64_t arg3)\n{\n    if (arg2 == 0xa)\n    {\n        abort();\n        /* no return */\n    }\n    int32_t var_48 = arg2;\n    int64_t var_40 = 0x400000000000000;\n    int32_t var_44 = 0;\n    int64_t var_38 = 0;\n    int64_t var_30 = 0;\n    int64_t var_28 = 0;\n    int64_t var_20 = 0;\n    int64_t var_18 = 0;\n    return sub_404800(arg1, arg3, -1, &var_48);\n}\n\n"
        },
        {
            "funcName": "sub_404f40",
            "funcStartAddr": "0x404f40",
            "funcEndAddr": "0x404fac",
            "decompiledFuncCode": "char* sub_404f40(int32_t arg1, int64_t arg2, int64_t arg3, uint64_t arg4, \n    uint64_t arg5)\n{\n    int128_t var_48 = data_60f440;\n    int128_t var_38 = data_60f450;\n    int128_t var_28 = data_60f460;\n    int64_t var_18 = data_60f470;\n    var_48 = 0xa;\n    if ((arg2 != 0 && arg3 != 0))\n    {\n        *var_28[8] = arg2;\n        int64_t var_18_1 = arg3;\n        return sub_404800(arg1, arg4, arg5, &var_48);\n    }\n    abort();\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_405050",
            "funcStartAddr": "0x405050",
            "funcEndAddr": "0x405066",
            "decompiledFuncCode": "int64_t sub_405050(uint64_t arg1)\n{\n    /* tailcall */\n    return sub_404800(0, arg1, -1, &data_60f280);\n}\n\n"
        },
        {
            "funcName": "sub_405070",
            "funcStartAddr": "0x405070",
            "funcEndAddr": "0x405093",
            "decompiledFuncCode": "int64_t* sub_405070(int64_t arg1)\n{\n    int64_t* rax = sub_406790(0x18);\n    *rax = arg1;\n    rax[2] = 0;\n    rax[1] = 0;\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_4050a0",
            "funcStartAddr": "0x4050a0",
            "funcEndAddr": "0x4050cf",
            "decompiledFuncCode": "FILE*** sub_4050a0(char* arg1, uint64_t arg2)\n{\n    FILE** rax = sub_4055f0(arg1, arg2);\n    FILE*** rax_1 = nullptr;\n    if (rax != 0)\n    {\n        rax_1 = sub_406790(0x18);\n        *rax_1 = rax;\n        rax_1[2] = 0;\n        rax_1[1] = 0;\n    }\n    return rax_1;\n}\n\n"
        },
        {
            "funcName": "sub_4050d0",
            "funcStartAddr": "0x4050d0",
            "funcEndAddr": "0x4050d4",
            "decompiledFuncCode": "int64_t sub_4050d0(int64_t* arg1)\n{\n    return *arg1;\n}\n\n"
        },
        {
            "funcName": "sub_4050e0",
            "funcStartAddr": "0x4050e0",
            "funcEndAddr": "0x4051d5",
            "decompiledFuncCode": "int64_t sub_4050e0(int64_t* arg1, int64_t arg2)\n{\n    int64_t r14 = (arg2 + 1);\n    int64_t* r12 = *arg1;\n    int64_t rbp = arg1[1];\n    int64_t rbx = arg1[2];\n    while (true)\n    {\n        if (rbx < arg2)\n        {\n            int64_t rax_6 = rbx;\n            uint64_t rdx_5 = 0;\n            do\n            {\n                rdx_5 = (rdx_5 + 1);\n                rax_6 = ((rax_6 << 8) + 0xff);\n            } while (arg2 > rax_6);\n            void var_40;\n            sub_405900(r12, &var_40, rdx_5);\n            void* rax_8 = &var_40;\n            do\n            {\n                uint64_t rdx_6 = *rax_8;\n                rax_8 = (rax_8 + 1);\n                rbx = ((rbx << 8) + 0xff);\n                rbp = ((rbp << 8) + rdx_6);\n            } while (arg2 > rbx);\n        }\n        if (((rbx >= arg2 && rbx == arg2) || (rbx < arg2 && rbx == arg2)))\n        {\n            arg1[2] = 0;\n            arg1[1] = 0;\n            break;\n        }\n        if (((rbx >= arg2 && rbx != arg2) || (rbx < arg2 && rbx != arg2)))\n        {\n            int64_t rdx_1 = 0;\n            int64_t rax_2 = (rbx - arg2);\n            uint64_t temp0_1 = (COMBINE(rdx_1, rax_2) / r14);\n            uint64_t temp1_1 = (COMBINE(rdx_1, rax_2) % r14);\n            int64_t rdx_3 = 0;\n            uint64_t temp0_2 = (COMBINE(rdx_3, rbp) / r14);\n            uint64_t temp1_2 = (COMBINE(rdx_3, rbp) % r14);\n            if (rbp <= (rbx - temp1_1))\n            {\n                arg1[1] = temp0_2;\n                rbp = temp1_2;\n                arg1[2] = temp0_1;\n                break;\n            }\n            rbx = (temp1_1 - 1);\n            rbp = temp1_2;\n        }\n    }\n    return rbp;\n}\n\n"
        },
        {
            "funcName": "sub_4051e0",
            "funcStartAddr": "0x4051e0",
            "funcEndAddr": "0x4051fe",
            "decompiledFuncCode": "int64_t sub_4051e0(int64_t arg1)\n{\n    __explicit_bzero_chk(arg1, 0x18, -1);\n    /* tailcall */\n    return free(arg1);\n}\n\n"
        },
        {
            "funcName": "sub_405200",
            "funcStartAddr": "0x405200",
            "funcEndAddr": "0x405251",
            "decompiledFuncCode": "uint64_t sub_405200(int64_t* arg1)\n{\n    int32_t rax = sub_405a60(*arg1);\n    int32_t* rax_1 = __errno_location();\n    int32_t r13 = *rax_1;\n    __explicit_bzero_chk(arg1, 0x18, -1);\n    free(arg1);\n    *rax_1 = r13;\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_405260",
            "funcStartAddr": "0x405260",
            "funcEndAddr": "0x40526c",
            "decompiledFuncCode": "uint64_t sub_405260(int64_t* arg1, int64_t arg2)\n{\n    return (COMBINE(0, *arg1) % arg2);\n}\n\n"
        },
        {
            "funcName": "sub_405270",
            "funcStartAddr": "0x405270",
            "funcEndAddr": "0x40527a",
            "decompiledFuncCode": "int64_t sub_405270(int64_t* arg1, int64_t* arg2)\n{\n    int64_t rax;\n    rax = *arg1 == *arg2;\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_405280",
            "funcStartAddr": "0x405280",
            "funcEndAddr": "0x4052a6",
            "decompiledFuncCode": "uint64_t sub_405280(int64_t arg1, int64_t arg2)\n{\n    uint64_t rax = (arg2 - 1);\n    if (arg2 != 1)\n    {\n        int64_t rsi = 0;\n        do\n        {\n            rsi = (rsi + 1);\n            rax = (rax >> 1);\n        } while (rax != 0);\n        rax = (((arg1 * rsi) + 7) >> 3);\n    }\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_4052b0",
            "funcStartAddr": "0x4052b0",
            "funcEndAddr": "0x405584",
            "decompiledFuncCode": "int64_t* sub_4052b0(int64_t* arg1, int64_t arg2, int64_t arg3)\n{\n    int64_t* rbx_1;\n    if (arg2 == 0)\n    {\n        rbx_1 = nullptr;\n    }\n    else if (arg2 == 1)\n    {\n        rbx_1 = sub_406790(8);\n        *rbx_1 = sub_4050e0(arg1, (arg3 - 1));\n    }\n    else\n    {\n        if (arg3 <= 0x1ffff)\n        {\n            rbx_1 = sub_406790((arg3 << 3));\n        }\n        int32_t var_74_1;\n        int64_t* var_70_1;\n        if (arg3 == 0)\n        {\n        label_405365:\n            var_74_1 = 0;\n            var_70_1 = nullptr;\n        label_405376:\n            int64_t rax_11 = (arg3 - 1);\n            int64_t rbp_2 = 0;\n            while (true)\n            {\n                int64_t r15_1 = (sub_4050e0(arg1, (rax_11 - rbp_2)) + rbp_2);\n                if (var_74_1 == 0)\n                {\n                    void* rax_12 = &rbx_1[r15_1];\n                    int64_t rsi_1 = rbx_1[rbp_2];\n                    rbx_1[rbp_2] = *rax_12;\n                    rbp_2 = (rbp_2 + 1);\n                    *rax_12 = rsi_1;\n                    if (arg2 <= rbp_2)\n                    {\n                        break;\n                    }\n                }\n                else\n                {\n                    int64_t var_48_1 = rbp_2;\n                    int64_t var_40_1 = 0;\n                    int64_t var_58_1 = r15_1;\n                    int64_t var_50_1 = 0;\n                    int64_t* r14_1 = sub_409680(var_70_1);\n                    int64_t* rax_15 = sub_409680(var_70_1);\n                    int64_t* r8_1 = rax_15;\n                    if (r14_1 == 0)\n                    {\n                        int64_t* rax_27 = sub_406790(0x10);\n                        r8_1 = rax_15;\n                        r14_1 = rax_27;\n                        rax_27[1] = rbp_2;\n                        *rax_27 = rbp_2;\n                    }\n                    if (r8_1 == 0)\n                    {\n                        int64_t* rax_26 = sub_406790(0x10);\n                        r8_1 = rax_26;\n                        rax_26[1] = r15_1;\n                        *rax_26 = r15_1;\n                    }\n                    else\n                    {\n                        r15_1 = r8_1[1];\n                    }\n                    int64_t rax_16 = r14_1[1];\n                    r14_1[1] = r15_1;\n                    r8_1[1] = rax_16;\n                    if (sub_409640(var_70_1, r14_1) == 0)\n                    {\n                        break;\n                    }\n                    if (sub_409640(var_70_1, r8_1) == 0)\n                    {\n                        break;\n                    }\n                    rbx_1[rbp_2] = r14_1[1];\n                    rbp_2 = (rbp_2 + 1);\n                    if (arg2 <= rbp_2)\n                    {\n                        break;\n                    }\n                }\n            }\n            if ((!(var_74_1 == 0 && arg2 <= rbp_2)))\n            {\n                goto label_40557f;\n            }\n            if (var_74_1 != 0)\n            {\n                sub_4090e0(var_70_1);\n            }\n            else\n            {\n                uint64_t rax_22;\n                rax_22 = (arg2 >> 0x3d) != 0;\n                size_t rsi_7 = (arg2 << 3);\n                uint64_t rax_23 = rax_22;\n                if (rsi_7 < 0)\n                {\n                    goto label_40557f;\n                }\n                if (rax_23 != 0)\n                {\n                    goto label_40557f;\n                }\n                rbx_1 = sub_4067f0(rbx_1, rsi_7);\n            }\n        }\n        if (arg3 > 0x1ffff)\n        {\n            if ((COMBINE(0, arg3) / arg2) > 0x1f)\n            {\n                int64_t* rax_28 = sub_408ea0((arg2 + arg2), nullptr, 0x405260, 0x405270, 0x401900);\n                var_70_1 = rax_28;\n                if (rax_28 == 0)\n                {\n                label_40557f:\n                    sub_4069e0();\n                    /* no return */\n                }\n                uint64_t rax_30;\n                rax_30 = (arg2 >> 0x3d) != 0;\n                size_t rdi_12 = (arg2 << 3);\n                uint64_t rax_31 = rax_30;\n                if (rdi_12 < 0)\n                {\n                    goto label_40557f;\n                }\n                if (rax_31 != 0)\n                {\n                    goto label_40557f;\n                }\n                var_74_1 = 1;\n                rbx_1 = sub_406790(rdi_12);\n                goto label_405376;\n            }\n            uint64_t rax_7;\n            rax_7 = (arg3 >> 0x3d) != 0;\n            size_t rdi_2 = (arg3 << 3);\n            uint64_t rax_8 = rax_7;\n            if (rdi_2 < 0)\n            {\n                goto label_40557f;\n            }\n            if (rax_8 != 0)\n            {\n                goto label_40557f;\n            }\n            rbx_1 = sub_406790(rdi_2);\n        }\n        if (((arg3 <= 0x1ffff && arg3 != 0) || arg3 > 0x1ffff))\n        {\n            int64_t rax_10 = 0;\n            do\n            {\n                rbx_1[rax_10] = rax_10;\n                rax_10 = (rax_10 + 1);\n            } while (arg3 > rax_10);\n            goto label_405365;\n        }\n    }\n    return rbx_1;\n}\n\n"
        },
        {
            "funcName": "sub_405590",
            "funcStartAddr": "0x401d79",
            "funcEndAddr": "0x4055ed",
            "decompiledFuncCode": "int64_t sub_405590(uint64_t arg1) __noreturn\n{\n    if (arg1 != 0)\n    {\n        int64_t rax_1 = sub_405050(arg1);\n        int32_t* rax_2 = __errno_location();\n        char* rax_3;\n        if (*rax_2 == 0)\n        {\n            rax_3 = dcgettext(nullptr, \"%s: end of file\", 5);\n        }\n        else\n        {\n            rax_3 = dcgettext(nullptr, \"%s: read error\", 5);\n        }\n        error(data_60f278, *rax_2, rax_3, rax_1);\n    }\n    abort();\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_4055f0",
            "funcStartAddr": "0x4055f0",
            "funcEndAddr": "0x4058df",
            "decompiledFuncCode": "FILE** sub_4055f0(char* arg1, uint64_t arg2)\n{\n    FILE** rbx;\n    if (arg2 == 0)\n    {\n        FILE** rax_7 = sub_406790(0x1038);\n        rbx = rax_7;\n        *rax_7 = nullptr;\n        rax_7[1] = 0x405590;\n        rax_7[2] = 0;\n    }\n    else\n    {\n        ssize_t r12_1 = arg1;\n        if (arg1 == 0)\n        {\n            FILE** rax_3 = sub_406790(0x1038);\n            *rax_3 = nullptr;\n            rbx = rax_3;\n            void* r13_2 = &rax_3[4];\n            rax_3[1] = 0x405590;\n            rax_3[2] = 0;\n            rax_3[3] = 0;\n            int32_t rax_5 = open(\"/dev/urandom\", 0);\n            int128_t var_48;\n            ssize_t rbp_2;\n            int64_t rbp_6;\n            int64_t r14_1;\n            if (rax_5 < 0)\n            {\n                r14_1 = 0x14;\n                gettimeofday(&var_48, nullptr);\n                *(rbx + 0x20) = var_48;\n                int32_t rax_8 = getpid();\n                var_48 = rax_8;\n                rbx[6] = rax_8;\n            }\n            else\n            {\n                uint64_t rdx_1 = arg2;\n                if (arg2 > 0x800)\n                {\n                    rdx_1 = 0x800;\n                }\n                rbp_2 = __read_chk(rax_5, r13_2, rdx_1, 0x1018);\n                close(rax_5);\n                if (rbp_2 <= 0x7ff)\n                {\n                    if (rbp_2 < 0)\n                    {\n                        rbp_2 = r12_1;\n                    }\n                    int128_t* rdi_8 = &var_48;\n                    int64_t rcx_5 = (0x800 - rbp_2);\n                    void* r15_2 = (r13_2 + rbp_2);\n                    if (rcx_5 > 0x10)\n                    {\n                        rcx_5 = 0x10;\n                    }\n                    rbp_6 = (rbp_2 + rcx_5);\n                    gettimeofday(rdi_8, nullptr);\n                    void* rdi_9 = r15_2;\n                    void* rsi_5 = &var_48;\n                    for (uint64_t rcx_7 = rcx_5; rcx_7 != 0; rcx_7 = (rcx_7 - 1))\n                    {\n                        *rdi_9 = *rsi_5;\n                        rdi_9 = (rdi_9 + 1);\n                        rsi_5 = (rsi_5 + 1);\n                    }\n                    if (rbp_6 <= 0x7ff)\n                    {\n                        int64_t r14_3 = (0x800 - rbp_6);\n                        if (r14_3 > 4)\n                        {\n                            r14_3 = 4;\n                        }\n                        void* rsi_6 = &var_48;\n                        var_48 = getpid(rdi_9, rsi_5);\n                        uint64_t rcx_8 = r14_3;\n                        r14_1 = (r14_3 + rbp_6);\n                        void* rdi_10 = (r13_2 + rbp_6);\n                        for (; rcx_8 != 0; rcx_8 = (rcx_8 - 1))\n                        {\n                            *rdi_10 = *rsi_6;\n                            rdi_10 = (rdi_10 + 1);\n                            rsi_6 = (rsi_6 + 1);\n                        }\n                    }\n                }\n            }\n            if ((rax_5 < 0 || (((rax_5 >= 0 && rbp_2 <= 0x7ff) && rbp_6 <= 0x7ff) && r14_1 <= 0x7ff)))\n            {\n                int64_t rbp_3 = (0x800 - r14_1);\n                if (rbp_3 > 4)\n                {\n                    rbp_3 = 4;\n                }\n                void* rsi_2 = (r13_2 + r14_1);\n                var_48 = getppid();\n                int32_t rdi_5 = rbp_3;\n                if (rbp_3 != 0)\n                {\n                    int32_t rax_10 = 0;\n                    do\n                    {\n                        uint64_t rdx_2 = rax_10;\n                        rax_10 = (rax_10 + 1);\n                        *(rsi_2 + rdx_2) = *(&var_48 + rdx_2);\n                    } while (rax_10 < rdi_5);\n                }\n                int64_t rbp_4 = (rbp_3 + r14_1);\n                if (rbp_4 <= 0x7ff)\n                {\n                    int64_t r14_2 = (0x800 - rbp_4);\n                    if (r14_2 > 4)\n                    {\n                        r14_2 = 4;\n                    }\n                    void* rsi_3 = (r13_2 + rbp_4);\n                    var_48 = getuid();\n                    int32_t rdi_6 = r14_2;\n                    if (r14_2 != 0)\n                    {\n                        int32_t rax_12 = 0;\n                        do\n                        {\n                            uint64_t rdx_3 = rax_12;\n                            rax_12 = (rax_12 + 1);\n                            *(rsi_3 + rdx_3) = *(&var_48 + rdx_3);\n                        } while (rax_12 < rdi_6);\n                    }\n                    int64_t rbp_5 = (rbp_4 + r14_2);\n                    if (rbp_5 <= 0x7ff)\n                    {\n                        void* rsi_4 = (r13_2 + rbp_5);\n                        var_48 = getgid();\n                        int64_t rax_14 = (0x800 - rbp_5);\n                        if (rax_14 > 4)\n                        {\n                            rax_14 = 4;\n                        }\n                        int32_t rdi_7 = rax_14;\n                        if (rax_14 != 0)\n                        {\n                            int32_t rax_15 = 0;\n                            do\n                            {\n                                uint64_t rdx_4 = rax_15;\n                                rax_15 = (rax_15 + 1);\n                                *(rsi_4 + rdx_4) = *(&var_48 + rdx_4);\n                            } while (rax_15 < rdi_7);\n                        }\n                    }\n                }\n            }\n            sub_405d60(r13_2);\n        }\n        else\n        {\n            FILE* rax = sub_408510(arg1, &data_40b5a4);\n            if (rax == 0)\n            {\n                rbx = nullptr;\n            }\n            else\n            {\n                FILE** rax_1 = sub_406790(0x1038);\n                uint64_t rcx_1 = 0x1000;\n                *rax_1 = rax;\n                if (arg2 <= 0x1000)\n                {\n                    rcx_1 = arg2;\n                }\n                rax_1[1] = 0x405590;\n                rbx = rax_1;\n                rax_1[2] = r12_1;\n                setvbuf(rax, &rax_1[3], 0, rcx_1);\n            }\n        }\n    }\n    return rbx;\n}\n\n"
        },
        {
            "funcName": "sub_4058e0",
            "funcStartAddr": "0x4058e0",
            "funcEndAddr": "0x4058e5",
            "decompiledFuncCode": "int64_t sub_4058e0(void* arg1, int64_t arg2)\n{\n    *(arg1 + 8) = arg2;\n}\n\n"
        },
        {
            "funcName": "sub_4058f0",
            "funcStartAddr": "0x4058f0",
            "funcEndAddr": "0x4058f5",
            "decompiledFuncCode": "int64_t sub_4058f0(void* arg1, int64_t arg2)\n{\n    *(arg1 + 0x10) = arg2;\n}\n\n"
        },
        {
            "funcName": "sub_405900",
            "funcStartAddr": "0x405900",
            "funcEndAddr": "0x405a5c",
            "decompiledFuncCode": "uint64_t sub_405900(int64_t* arg1, int64_t* arg2, uint64_t arg3)\n{\n    int64_t* rbp = arg2;\n    uint64_t rbx = arg3;\n    FILE* r13 = *arg1;\n    uint64_t rax_3;\n    if (r13 == 0)\n    {\n        uint64_t r15_1 = arg1[3];\n        int64_t* r13_1 = &arg1[0x107];\n        void* r14_1 = &arg1[4];\n        if (arg3 <= r15_1)\n        {\n            r13_1 = ((r13_1 - r15_1) + 0x800);\n        }\n        else\n        {\n            do\n            {\n                int64_t* rdi_2 = rbp;\n                rbp = (rbp + r15_1);\n                rbx = (rbx - r15_1);\n                memcpy(rdi_2, ((0x800 - r15_1) + r13_1), r15_1);\n                if ((rbp & 7) == 0)\n                {\n                    while (rbx > 0x7ff)\n                    {\n                        int64_t* rsi_3 = rbp;\n                        rbp = &rbp[0x100];\n                        int64_t* rax_4 = sub_405ab0(r14_1, rsi_3);\n                        uint64_t temp1_1 = rbx;\n                        rbx = (rbx - 0x800);\n                        if (temp1_1 == 0x800)\n                        {\n                            arg1[3] = 0;\n                            return rax_4;\n                        }\n                    }\n                    sub_405ab0(r14_1, r13_1);\n                    break;\n                }\n                r15_1 = 0x800;\n                sub_405ab0(r14_1, r13_1);\n            } while (rbx > 0x800);\n            r15_1 = 0x800;\n        }\n        rax_3 = memcpy(rbp, r13_1, rbx);\n        arg1[3] = (r15_1 - rbx);\n    }\n    else\n    {\n        int32_t* rax_1 = __errno_location();\n        while (true)\n        {\n            rax_3 = fread_unlocked(rbp, 1, rbx, r13);\n            int32_t rdx = *rax_1;\n            rbp = (rbp + rax_3);\n            uint64_t temp0_1 = rbx;\n            rbx = (rbx - rax_3);\n            if (temp0_1 == rax_3)\n            {\n                break;\n            }\n            int64_t rdi = arg1[2];\n            if ((**arg1 & 0x20) == 0)\n            {\n                rdx = 0;\n            }\n            *rax_1 = rdx;\n            arg1[1](rdi);\n            r13 = *arg1;\n        }\n    }\n    return rax_3;\n}\n\n"
        },
        {
            "funcName": "sub_405a60",
            "funcStartAddr": "0x405a60",
            "funcEndAddr": "0x405aa9",
            "decompiledFuncCode": "int64_t sub_405a60(int64_t* arg1)\n{\n    FILE* rbp = *arg1;\n    __explicit_bzero_chk(arg1, 0x1038, -1);\n    free(arg1);\n    if (rbp == 0)\n    {\n        return 0;\n    }\n    /* tailcall */\n    return sub_407390(rbp);\n}\n\n"
        },
        {
            "funcName": "sub_405ab0",
            "funcStartAddr": "0x405ab0",
            "funcEndAddr": "0x405d55",
            "decompiledFuncCode": "int64_t* sub_405ab0(int64_t* arg1, int64_t* arg2)\n{\n    int64_t r11 = arg1[0x101];\n    void* r10 = &arg1[0x80];\n    int64_t rdx = arg1[0x100];\n    int64_t* r9 = arg2;\n    int64_t r8 = (arg1[0x102] + 1);\n    int64_t* rax = arg1;\n    arg1[0x102] = r8;\n    int64_t r11_1 = (r11 + r8);\n    do\n    {\n        int64_t rcx_3 = *rax;\n        int64_t rdx_3 = ((!(rdx ^ (rdx << 0x15))) + rax[0x80]);\n        int64_t r8_4 = ((*(arg1 + (rcx_3 & 0x7f8)) + rdx_3) + r11_1);\n        *rax = r8_4;\n        int64_t rbx_4 = (*(arg1 + ((r8_4 >> 8) & 0x7f8)) + rcx_3);\n        *r9 = rbx_4;\n        int64_t r8_7 = rax[1];\n        int64_t rdx_5 = ((rdx_3 ^ (rdx_3 >> 5)) + rax[0x81]);\n        int64_t rcx_6 = ((*(arg1 + (r8_7 & 0x7f8)) + rdx_5) + rbx_4);\n        rax[1] = rcx_6;\n        int64_t rbx_6 = (*(arg1 + ((rcx_6 >> 8) & 0x7f8)) + r8_7);\n        r9[1] = rbx_6;\n        int64_t rcx_9 = rax[2];\n        int64_t rdx_11 = (((rdx_5 << 0xc) ^ rdx_5) + rax[0x82]);\n        int64_t r8_11 = ((*(arg1 + (rcx_9 & 0x7f8)) + rdx_11) + rbx_6);\n        rax[2] = r8_11;\n        int64_t rcx_10 = (rcx_9 + *(arg1 + ((r8_11 >> 8) & 0x7f8)));\n        r9[2] = rcx_10;\n        int64_t r8_14 = rax[3];\n        rdx = ((rdx_11 ^ (rdx_11 >> 0x21)) + rax[0x83]);\n        int64_t rcx_16 = ((*(arg1 + (r8_14 & 0x7f8)) + rdx) + rcx_10);\n        rax = &rax[4];\n        r9 = &r9[4];\n        rax[-1] = rcx_16;\n        r11_1 = (*(arg1 + ((rcx_16 >> 8) & 0x7f8)) + r8_14);\n        r9[-1] = r11_1;\n    } while (rax != r10);\n    void* rsi = &arg2[0x80];\n    void* r9_1 = &arg1[0x100];\n    do\n    {\n        int64_t rcx_21 = *rax;\n        int64_t rdx_15 = ((!(rdx ^ (rdx << 0x15))) + rax[-0x80]);\n        int64_t r8_18 = ((*(arg1 + (rcx_21 & 0x7f8)) + rdx_15) + r11_1);\n        *rax = r8_18;\n        int64_t rcx_22 = (rcx_21 + *(arg1 + ((r8_18 >> 8) & 0x7f8)));\n        *rsi = rcx_22;\n        int64_t r8_21 = rax[1];\n        int64_t rdx_17 = ((rdx_15 ^ (rdx_15 >> 5)) + rax[-0x7f]);\n        int64_t rcx_25 = ((*(arg1 + (r8_21 & 0x7f8)) + rdx_17) + rcx_22);\n        rax[1] = rcx_25;\n        int64_t r11_11 = (*(arg1 + ((rcx_25 >> 8) & 0x7f8)) + r8_21);\n        *(rsi + 8) = r11_11;\n        int64_t rcx_28 = rax[2];\n        int64_t rdx_23 = (((rdx_17 << 0xc) ^ rdx_17) + rax[-0x7e]);\n        int64_t r8_25 = ((*(arg1 + (rcx_28 & 0x7f8)) + rdx_23) + r11_11);\n        rax[2] = r8_25;\n        int64_t rcx_29 = (rcx_28 + *(arg1 + ((r8_25 >> 8) & 0x7f8)));\n        *(rsi + 0x10) = rcx_29;\n        int64_t r8_28 = rax[3];\n        rdx = ((rdx_23 ^ (rdx_23 >> 0x21)) + rax[-0x7d]);\n        int64_t rcx_35 = ((*(arg1 + (r8_28 & 0x7f8)) + rdx) + rcx_29);\n        rax = &rax[4];\n        rsi = (rsi + 0x20);\n        rax[-1] = rcx_35;\n        r11_1 = (*(arg1 + ((rcx_35 >> 8) & 0x7f8)) + r8_28);\n        *(rsi - 8) = r11_1;\n    } while (rax != r9_1);\n    arg1[0x100] = rdx;\n    arg1[0x101] = r11_1;\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_405d60",
            "funcStartAddr": "0x405d60",
            "funcEndAddr": "0x405f94",
            "decompiledFuncCode": "int64_t sub_405d60(int64_t* arg1)\n{\n    int64_t* rdx = arg1;\n    int64_t* rax = arg1;\n    int64_t rcx = -0x670a8fb093bb3f55;\n    int64_t rsi = -0x7d0fac247caa1f32;\n    int64_t r11 = -0x4d64d17db5a6aadc;\n    int64_t r12 = -0x5167a40d34037613;\n    int64_t r10 = -0x73f15afac2b8ed60;\n    int64_t r9 = -0x46074cdd38c5379e;\n    void* rbp = &arg1[0x100];\n    int64_t r8 = 0x647c4677a2884b7c;\n    int64_t rbx = 0x48fe4a0fa5a09315;\n    do\n    {\n        int64_t rsi_1 = (rsi + rax[4]);\n        int64_t rcx_1 = (rcx + rax[7]);\n        int64_t r8_1 = (r8 + (*rax - rsi_1));\n        int64_t rbx_2 = ((rbx + rax[5]) ^ (rcx_1 >> 9));\n        int64_t r9_1 = (r9 + (rax[1] - rbx_2));\n        int64_t r12_2 = ((r12 + rax[6]) ^ (r8_1 << 9));\n        int64_t r10_1 = (r10 + (rax[2] - r12_2));\n        int64_t rcx_3 = ((rcx_1 + r8_1) ^ (r9_1 >> 0x17));\n        int64_t r11_1 = (r11 + (rax[3] - rcx_3));\n        r8 = ((r8_1 + r9_1) ^ (r10_1 << 0xf));\n        int64_t rsi_2 = (rsi_1 - r8);\n        *rax = r8;\n        r9 = ((r9_1 + r10_1) ^ (r11_1 >> 0xe));\n        int64_t rbx_3 = (rbx_2 - r9);\n        rax[1] = r9;\n        r10 = ((r10_1 + r11_1) ^ (rsi_2 << 0x14));\n        int64_t r12_3 = (r12_2 - r10);\n        rax[2] = r10;\n        rax = &rax[8];\n        r11 = ((r11_1 + rsi_2) ^ (rbx_3 >> 0x11));\n        rbx = (rbx_3 + r12_3);\n        rcx = (rcx_3 - r11);\n        rax[-5] = r11;\n        rsi = ((r12_3 << 0xe) ^ (rsi_2 + rbx_3));\n        r12 = (r12_3 + rcx);\n        rax[-3] = rbx;\n        rax[-4] = rsi;\n        rax[-2] = r12;\n        rax[-1] = rcx;\n    } while (rbp != rax);\n    int64_t rax_13;\n    do\n    {\n        int64_t rcx_4 = (rcx + rdx[7]);\n        int64_t rsi_7 = (rsi + rdx[4]);\n        int64_t r8_4 = ((r8 + *rdx) - rsi_7);\n        int64_t rbx_5 = ((rbx + rdx[5]) ^ (rcx_4 >> 9));\n        int64_t r9_4 = ((r9 + rdx[1]) - rbx_5);\n        int64_t r12_5 = ((r12 + rdx[6]) ^ (r8_4 << 9));\n        int64_t r10_4 = ((r10 + rdx[2]) - r12_5);\n        int64_t rcx_6 = ((rcx_4 + r8_4) ^ (r9_4 >> 0x17));\n        int64_t r11_4 = ((r11 + rdx[3]) - rcx_6);\n        r8 = ((r8_4 + r9_4) ^ (r10_4 << 0xf));\n        int64_t rsi_8 = (rsi_7 - r8);\n        *rdx = r8;\n        r9 = ((r9_4 + r10_4) ^ (r11_4 >> 0xe));\n        int64_t rbx_6 = (rbx_5 - r9);\n        rdx[1] = r9;\n        r10 = ((r10_4 + r11_4) ^ (rsi_8 << 0x14));\n        rax_13 = (rsi_8 + rbx_6);\n        int64_t r12_6 = (r12_5 - r10);\n        rdx[2] = r10;\n        rdx = &rdx[8];\n        r11 = ((r11_4 + rsi_8) ^ (rbx_6 >> 0x11));\n        rbx = (rbx_6 + r12_6);\n        rcx = (rcx_6 - r11);\n        rdx[-5] = r11;\n        rsi = ((r12_6 << 0xe) ^ rax_13);\n        r12 = (r12_6 + rcx);\n        rdx[-3] = rbx;\n        rdx[-4] = rsi;\n        rdx[-2] = r12;\n        rdx[-1] = rcx;\n    } while (rbp != rdx);\n    arg1[0x102] = 0;\n    arg1[0x101] = 0;\n    arg1[0x100] = 0;\n    return rax_13;\n}\n\n"
        },
        {
            "funcName": "sub_405fa0",
            "funcStartAddr": "0x405fa0",
            "funcEndAddr": "0x406133",
            "decompiledFuncCode": "char* sub_405fa0(FILE* arg1, int64_t* arg2)\n{\n    void var_c8;\n    size_t rbx_1;\n    if (__fxstat(1, fileno(arg1), &var_c8) < 0)\n    {\n    label_405fe7:\n        rbx_1 = 0x2000;\n    }\n    else\n    {\n        int32_t var_b0;\n        if ((var_b0 & 0xf000) != 0x8000)\n        {\n            goto label_405fe7;\n        }\n        off_t rax_16 = ftello(arg1);\n        if (rax_16 < 0)\n        {\n            goto label_405fe7;\n        }\n        int64_t var_98;\n        if (var_98 <= rax_16)\n        {\n            goto label_405fe7;\n        }\n        rbx_1 = ((var_98 - rax_16) + 1);\n    }\n    char* rax_4 = malloc(rbx_1);\n    char* r12 = rax_4;\n    if (rax_4 != 0)\n    {\n        int64_t rbp_1 = 0;\n        while (true)\n        {\n            uint64_t r14_2 = (rbx_1 - rbp_1);\n            uint64_t rax_9 = fread(&r12[rbp_1], 1, r14_2, arg1);\n            rbp_1 = (rbp_1 + rax_9);\n            int32_t* r14_3;\n            int32_t r15_1;\n            if (r14_2 != rax_9)\n            {\n                int32_t* rax_10 = __errno_location();\n                r14_3 = rax_10;\n                r15_1 = *rax_10;\n                if (ferror(arg1) == 0)\n                {\n                    if ((rbx_1 - 1) > rbp_1)\n                    {\n                        char* rax_17 = realloc(r12, (rbp_1 + 1));\n                        if (rax_17 != 0)\n                        {\n                            r12 = rax_17;\n                        }\n                    }\n                    r12[rbp_1] = 0;\n                    *arg2 = rbp_1;\n                    break;\n                }\n            }\n            else\n            {\n                if (rbx_1 == -1)\n                {\n                    int32_t* rax_15 = __errno_location();\n                    char* rdi_5 = r12;\n                    r12 = nullptr;\n                    free(rdi_5);\n                    *rax_15 = 0xc;\n                    break;\n                }\n                uint64_t rax_6 = (rbx_1 >> 1);\n                size_t rax_7 = (rax_6 + rbx_1);\n                if ((!rax_6) <= rbx_1)\n                {\n                    rax_7 = -1;\n                }\n                rbx_1 = rax_7;\n                char* rax_8 = realloc(r12, rax_7);\n                if (rax_8 == 0)\n                {\n                    int32_t* rax_14 = __errno_location();\n                    r15_1 = *rax_14;\n                    r14_3 = rax_14;\n                }\n                else\n                {\n                    r12 = rax_8;\n                    continue;\n                }\n            }\n            char* rdi_4 = r12;\n            r12 = nullptr;\n            free(rdi_4);\n            *r14_3 = r15_1;\n            break;\n        }\n    }\n    return r12;\n}\n\n"
        },
        {
            "funcName": "sub_406140",
            "funcStartAddr": "0x406140",
            "funcEndAddr": "0x4061c5",
            "decompiledFuncCode": "char* sub_406140(char* arg1, int64_t* arg2, char* arg3)\n{\n    FILE* rax = fopen(arg1, arg3);\n    if (rax == 0)\n    {\n        return 0;\n    }\n    char* rax_1 = sub_405fa0(rax, arg2);\n    int32_t* rax_2 = __errno_location();\n    int32_t r13 = *rax_2;\n    if (sub_407390(rax) == 0)\n    {\n        return rax_1;\n    }\n    if (rax_1 != 0)\n    {\n        r13 = *rax_2;\n        free(rax_1);\n    }\n    *rax_2 = r13;\n    return 0;\n}\n\n"
        },
        {
            "funcName": "sub_4061d0",
            "funcStartAddr": "0x4061d0",
            "funcEndAddr": "0x4061da",
            "decompiledFuncCode": "int64_t sub_4061d0(char* arg1, int64_t* arg2)\n{\n    /* tailcall */\n    return sub_406140(arg1, arg2, \"r\");\n}\n\n"
        },
        {
            "funcName": "sub_4061e0",
            "funcStartAddr": "0x4061e0",
            "funcEndAddr": "0x4061ea",
            "decompiledFuncCode": "int64_t sub_4061e0(char* arg1, int64_t* arg2)\n{\n    /* tailcall */\n    return sub_406140(arg1, arg2, &data_40b5a4);\n}\n\n"
        },
        {
            "funcName": "sub_4061f0",
            "funcStartAddr": "0x401d7e",
            "funcEndAddr": "0x4065cd",
            "decompiledFuncCode": "int64_t sub_4061f0(FILE* arg1, int64_t arg2, int64_t arg3, int64_t arg4, \n    int64_t* arg5, int64_t arg6)\n{\n    if (arg2 == 0)\n    {\n        __fprintf_chk();\n    }\n    else\n    {\n        __fprintf_chk();\n    }\n    __fprintf_chk(arg1, 1, \"Copyright %s %d Free Software Fo\u2026\", dcgettext(nullptr, &data_40b5ba, 5), 0x7e1);\n    fputs_unlocked(dcgettext(nullptr, \"\\nLicense GPLv3+: GNU GPL versio\u2026\", 5), arg1);\n    int64_t var_58;\n    int64_t var_50_1;\n    int64_t var_48;\n    int64_t var_40;\n    char* rax_6;\n    int64_t rbx_1;\n    char* rsi_1;\n    int64_t r12_1;\n    int64_t r13;\n    int64_t r14;\n    int64_t r15_1;\n    switch (arg6)\n    {\n        case 0:\n        {\n            abort();\n            /* no return */\n        }\n        case 8:\n        {\n            r13 = arg5[6];\n            r12_1 = arg5[5];\n            r15_1 = arg5[4];\n            var_48 = arg5[7];\n            r14 = arg5[3];\n            rbx_1 = *arg5;\n            var_58 = arg5[2];\n            var_50_1 = arg5[1];\n            rax_6 = dcgettext(nullptr, \"Written by %s, %s, %s,\\n%s, %s, \u2026\", 5);\n            break;\n        }\n        case 9:\n        {\n            rsi_1 = \"Written by %s, %s, %s,\\n%s, %s, \u2026\";\n            r13 = arg5[6];\n            r12_1 = arg5[5];\n            var_40 = arg5[8];\n            r15_1 = arg5[4];\n            r14 = arg5[3];\n            var_48 = arg5[7];\n            var_58 = arg5[2];\n            rbx_1 = *arg5;\n            var_50_1 = arg5[1];\n            break;\n        }\n        default:\n            rsi_1 = \"Written by %s, %s, %s,\\n%s, %s, \u2026\";\n            r13 = arg5[6];\n            r12_1 = arg5[5];\n            var_40 = arg5[8];\n            r15_1 = arg5[4];\n            r14 = arg5[3];\n            var_48 = arg5[7];\n            var_58 = arg5[2];\n            rbx_1 = *arg5;\n            var_50_1 = arg5[1];\n    }\n    int64_t var_60;\n    if ((arg6 > 9 || arg6 == 9))\n    {\n        rax_6 = dcgettext(nullptr, rsi_1, 5);\n        var_60 = var_40;\n    }\n    int64_t var_78_1;\n    int64_t var_70_1;\n    int64_t var_68_2;\n    int64_t var_58_1;\n    int64_t var_50;\n    char* rax_19;\n    char* rax_22;\n    int64_t rbx_5;\n    int64_t rbx_6;\n    int64_t r9_9;\n    int64_t r12_4;\n    int64_t r13_2;\n    int64_t r14_1;\n    switch (arg6)\n    {\n        case 1:\n        {\n            /* tailcall */\n            return __fprintf_chk(arg1, 1, dcgettext(nullptr, \"Written by %s.\\n\", 5), *arg5);\n            break;\n        }\n        case 2:\n        {\n            /* tailcall */\n            return __fprintf_chk(arg1, 1, dcgettext(nullptr, \"Written by %s and %s.\\n\", 5), *arg5, arg5[1]);\n            break;\n        }\n        case 3:\n        {\n            /* tailcall */\n            return __fprintf_chk(arg1, 1, dcgettext(nullptr, \"Written by %s, %s, and %s.\\n\", 5), *arg5, arg5[1], arg5[2]);\n            break;\n        }\n        case 4:\n        {\n            r14_1 = arg5[3];\n            r13_2 = arg5[2];\n            r12_4 = arg5[1];\n            rbx_5 = *arg5;\n            rax_19 = dcgettext(nullptr, \"Written by %s, %s, %s,\\nand %s.\\n\", 5);\n            break;\n        }\n        case 5:\n        {\n            int64_t r15_2 = arg5[4];\n            r14_1 = arg5[3];\n            r13_2 = arg5[2];\n            r12_4 = arg5[1];\n            rbx_5 = *arg5;\n            rax_19 = dcgettext(nullptr, \"Written by %s, %s, %s,\\n%s, and \u2026\", 5);\n            var_60 = r15_2;\n            break;\n        }\n        case 6:\n        {\n            int64_t r12_5 = arg5[5];\n            int64_t r15_3 = arg5[4];\n            int64_t r14_2 = arg5[3];\n            var_58_1 = arg5[1];\n            int64_t r13_3 = arg5[2];\n            rbx_6 = *arg5;\n            rax_22 = dcgettext(nullptr, \"Written by %s, %s, %s,\\n%s, %s, \u2026\", 5);\n            r9_9 = r13_3;\n            var_68_2 = r12_5;\n            var_70_1 = r15_3;\n            var_78_1 = r14_2;\n            break;\n        }\n        case 7:\n        {\n            int64_t r13_4 = arg5[6];\n            int64_t r12_6 = arg5[5];\n            int64_t r15_4 = arg5[4];\n            int64_t r14_3 = arg5[3];\n            var_50 = arg5[2];\n            rbx_6 = *arg5;\n            var_58_1 = arg5[1];\n            rax_22 = dcgettext(nullptr, \"Written by %s, %s, %s,\\n%s, %s, \u2026\", 5);\n            var_60 = r13_4;\n            var_68_2 = r12_6;\n            var_70_1 = r15_4;\n            var_78_1 = r14_3;\n            r9_9 = var_50;\n            break;\n        }\n        default:\n            return __fprintf_chk(arg1, 1, rax_6, rbx_1, var_50_1, var_58, r14, r15_1, r12_1, r13, var_48, var_60, var_58, var_50_1, var_48, var_40);\n    }\n    if ((arg6 == 4 || arg6 == 5))\n    {\n        __fprintf_chk(arg1, 1, rax_19, rbx_5, r12_4, r13_2, r14_1, var_60);\n        return r14_1;\n    }\n    else if ((arg6 == 6 || arg6 == 7))\n    {\n        return __fprintf_chk(arg1, 1, rax_22, rbx_6, var_58_1, r9_9, var_78_1, var_70_1, var_68_2, var_60, var_58_1, var_50);\n    }\n}\n\n"
        },
        {
            "funcName": "sub_4065d0",
            "funcStartAddr": "0x4065d0",
            "funcEndAddr": "0x4065f0",
            "decompiledFuncCode": "int64_t sub_4065d0(FILE* arg1, int64_t arg2, int64_t arg3, int64_t arg4, \n    int64_t* arg5)\n{\n    int64_t r9 = 0;\n    if (*arg5 != 0)\n    {\n        do\n        {\n            r9 = (r9 + 1);\n        } while (arg5[r9] != 0);\n    }\n    /* tailcall */\n    return sub_4061f0(arg1, arg2, arg3, arg4, arg5, r9);\n}\n\n"
        },
        {
            "funcName": "sub_4065f0",
            "funcStartAddr": "0x4065f0",
            "funcEndAddr": "0x406650",
            "decompiledFuncCode": "int64_t sub_4065f0(FILE* arg1, int64_t arg2, int64_t arg3, int64_t arg4, \n    int32_t* arg5)\n{\n    int64_t r9 = 0;\n    void var_58;\n    do\n    {\n        int32_t rax_3 = *arg5;\n        if (rax_3 <= 0x2f)\n        {\n            int64_t* r10_2 = (rax_3 + *(arg5 + 0x10));\n            *arg5 = (rax_3 + 8);\n            int64_t rax_2 = *r10_2;\n            *(&var_58 + (r9 << 3)) = rax_2;\n            if (rax_2 == 0)\n            {\n                break;\n            }\n        }\n        else\n        {\n            int64_t* r10_3 = *(arg5 + 8);\n            *(arg5 + 8) = &r10_3[1];\n            int64_t rax_5 = *r10_3;\n            *(&var_58 + (r9 << 3)) = rax_5;\n            if (rax_5 == 0)\n            {\n                break;\n            }\n        }\n        r9 = (r9 + 1);\n    } while (r9 != 0xa);\n    return sub_4061f0(arg1, arg2, arg3, arg4, &var_58, r9);\n}\n\n"
        },
        {
            "funcName": "sub_406650",
            "funcStartAddr": "0x406650",
            "funcEndAddr": "0x40670c",
            "decompiledFuncCode": "int64_t sub_406650(FILE* arg1, int64_t arg2, int64_t arg3, int64_t arg4)\n{\n    char r11 = 0;\n    int64_t r8;\n    int64_t var_18 = r8;\n    void* r10 = &arg_8;\n    int32_t r8_1 = 0x20;\n    void* var_98 = &arg_8;\n    int64_t r9;\n    int64_t var_10 = r9;\n    int64_t r9_1 = 0;\n    int32_t var_a0 = 0x20;\n    void var_38;\n    void* var_90 = &var_38;\n    void var_88;\n    do\n    {\n        if (r8_1 <= 0x2f)\n        {\n            uint64_t rax_1 = r8_1;\n            r8_1 = (r8_1 + 8);\n            r11 = 1;\n            int64_t rax_3 = *(rax_1 + &var_38);\n            *(&var_88 + (r9_1 << 3)) = rax_3;\n            if (rax_3 == 0)\n            {\n                break;\n            }\n        }\n        else\n        {\n            void* rax_4 = r10;\n            r10 = (r10 + 8);\n            int64_t rax_5 = *rax_4;\n            *(&var_88 + (r9_1 << 3)) = rax_5;\n            if (rax_5 == 0)\n            {\n                break;\n            }\n        }\n        r9_1 = (r9_1 + 1);\n    } while (r9_1 != 0xa);\n    if (r11 != 0)\n    {\n        int32_t var_a0_1 = r8_1;\n    }\n    return sub_4061f0(arg1, arg2, arg3, arg4, &var_88, r9_1);\n}\n\n"
        },
        {
            "funcName": "sub_406710",
            "funcStartAddr": "0x406710",
            "funcEndAddr": "0x406784",
            "decompiledFuncCode": "int64_t sub_406710()\n{\n    __printf_chk(1, dcgettext(nullptr, \"\\nReport bugs to: %s\\n\", 5), \"bug-coreutils@gnu.org\");\n    __printf_chk(1, dcgettext(nullptr, \"%s home page: <%s>\\n\", 5), \"GNU coreutils\", \"https://www.gnu.org/software/cor\u2026\");\n    /* tailcall */\n    return fputs_unlocked(dcgettext(nullptr, \"General help using GNU software:\u2026\", 5), stdout);\n}\n\n"
        },
        {
            "funcName": "sub_406790",
            "funcStartAddr": "0x406790",
            "funcEndAddr": "0x4067aa",
            "decompiledFuncCode": "int64_t sub_406790(size_t arg1)\n{\n    int64_t rax = malloc(arg1);\n    if ((rax == 0 && arg1 != 0))\n    {\n        sub_4069e0();\n        /* no return */\n    }\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_4067b0",
            "funcStartAddr": "0x4067b0",
            "funcEndAddr": "0x4067d1",
            "decompiledFuncCode": "int64_t sub_4067b0(int64_t arg1, int64_t arg2)\n{\n    uint64_t rax;\n    int64_t rdx;\n    rdx = HIGHD((arg1 * arg2));\n    rax = LOWD((arg1 * arg2));\n    size_t rdi = rax;\n    rax = ((arg1 * arg2) >> 0x40) != 0;\n    if (rdi >= 0)\n    {\n        rax = rax;\n        if (rax == 0)\n        {\n            /* tailcall */\n            return sub_406790(rdi);\n        }\n    }\n    uint64_t var_8 = rax;\n    sub_4069e0();\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_4067f0",
            "funcStartAddr": "0x4067f0",
            "funcEndAddr": "0x406826",
            "decompiledFuncCode": "int64_t sub_4067f0(int64_t arg1, size_t arg2)\n{\n    if ((arg2 == 0 && arg1 != 0))\n    {\n        free(arg1);\n        return 0;\n    }\n    int64_t rax = realloc(arg1, arg2);\n    if ((rax == 0 && arg2 != 0))\n    {\n        sub_4069e0();\n        /* no return */\n    }\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_406830",
            "funcStartAddr": "0x406830",
            "funcEndAddr": "0x406851",
            "decompiledFuncCode": "int64_t sub_406830(int64_t arg1, int64_t arg2, int64_t arg3)\n{\n    uint64_t rax;\n    int64_t rdx;\n    rdx = HIGHD((arg2 * arg3));\n    rax = LOWD((arg2 * arg3));\n    size_t rsi = rax;\n    rax = ((arg2 * arg3) >> 0x40) != 0;\n    if (rsi >= 0)\n    {\n        rax = rax;\n        if (rax == 0)\n        {\n            /* tailcall */\n            return sub_4067f0(arg1, rsi);\n        }\n    }\n    uint64_t var_8 = rax;\n    sub_4069e0();\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_4068f0",
            "funcStartAddr": "0x4068f0",
            "funcEndAddr": "0x406940",
            "decompiledFuncCode": "int64_t sub_4068f0(int64_t arg1, int64_t* arg2)\n{\n    size_t rax = *arg2;\n    bool cond:0_1;\n    if (arg1 == 0)\n    {\n        cond:0_1 = rax >= 0;\n        if (rax == 0)\n        {\n            *arg2 = 0x80;\n            /* tailcall */\n            return sub_4067f0(arg1, 0x80);\n        }\n    }\n    if ((arg1 != 0 && rax <= 0x5555555555555553))\n    {\n        rax = (((rax >> 1) + rax) + 1);\n    }\n    if (((arg1 != 0 && rax <= 0x5555555555555553) || ((arg1 == 0 && rax != 0) && cond:0_1)))\n    {\n        *arg2 = rax;\n        /* tailcall */\n        return sub_4067f0(arg1, rax);\n    }\n    if (((arg1 != 0 && rax > 0x5555555555555553) || ((arg1 == 0 && rax != 0) && (!cond:0_1))))\n    {\n        size_t var_8 = rax;\n        sub_4069e0();\n        /* no return */\n    }\n}\n\n"
        },
        {
            "funcName": "sub_406940",
            "funcStartAddr": "0x406940",
            "funcEndAddr": "0x406957",
            "decompiledFuncCode": "int64_t sub_406940(size_t arg1)\n{\n    /* tailcall */\n    return memset(sub_406790(arg1), 0, arg1);\n}\n\n"
        },
        {
            "funcName": "sub_406960",
            "funcStartAddr": "0x406960",
            "funcEndAddr": "0x40698e",
            "decompiledFuncCode": "int64_t sub_406960(size_t arg1, size_t arg2)\n{\n    int64_t rax;\n    bool rdx;\n    rdx = HIGHD((arg1 * arg2));\n    rax = LOWD((arg1 * arg2));\n    if ((rax >= 0 && ((arg1 * arg2) >> 0x40) != 0 == 0))\n    {\n        int64_t rax_1 = calloc(arg1, arg2);\n        if (rax_1 != 0)\n        {\n            return rax_1;\n        }\n    }\n    sub_4069e0();\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_406990",
            "funcStartAddr": "0x406990",
            "funcEndAddr": "0x4069b8",
            "decompiledFuncCode": "int64_t sub_406990(int64_t arg1, size_t arg2)\n{\n    /* tailcall */\n    return memcpy(sub_406790(arg2), arg1, arg2);\n}\n\n"
        },
        {
            "funcName": "sub_4069c0",
            "funcStartAddr": "0x4069c0",
            "funcEndAddr": "0x4069d3",
            "decompiledFuncCode": "int64_t sub_4069c0(char* arg1)\n{\n    /* tailcall */\n    return sub_406990(arg1, (strlen(arg1) + 1));\n}\n\n"
        },
        {
            "funcName": "sub_4069e0",
            "funcStartAddr": "0x4069e0",
            "funcEndAddr": "0x406a11",
            "decompiledFuncCode": "int64_t sub_4069e0() __noreturn\n{\n    error(data_60f278, 0, \"%s\", dcgettext(nullptr, \"memory exhausted\", 5));\n    abort();\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_406a20",
            "funcStartAddr": "0x406a20",
            "funcEndAddr": "0x406af0",
            "decompiledFuncCode": "int64_t sub_406a20(char* arg1, int32_t arg2, int64_t arg3, int64_t arg4, \n    char* arg5, int64_t arg6, int32_t arg7)\n{\n    int32_t rbx = arg7;\n    int64_t var_40;\n    int32_t rax = sub_406f50(arg1, nullptr, arg2, &var_40, arg5);\n    int64_t rbp;\n    int32_t* r14_1;\n    if (rax == 0)\n    {\n        rbp = var_40;\n        if ((rbp < arg3 || (rbp >= arg3 && rbp > arg4)))\n        {\n            int32_t* rax_1 = __errno_location();\n            r14_1 = rax_1;\n            *r14_1 = (((rax_1 - rax_1) & 0xffffffd7) + 0x4b);\n        }\n    }\n    else\n    {\n        int32_t* rax_8 = __errno_location();\n        r14_1 = rax_8;\n        if (rax == 1)\n        {\n            *rax_8 = 0x4b;\n        }\n        else if (rax == 3)\n        {\n            *rax_8 = 0;\n        }\n    }\n    if (((rax == 0 && (rbp < arg3 || (rbp >= arg3 && rbp > arg4))) || rax != 0))\n    {\n        int64_t rax_5 = sub_405050(arg1);\n        uint64_t rsi = *r14_1;\n        if (rsi == 0x16)\n        {\n            rsi = 0;\n        }\n        if (rbx == 0)\n        {\n            rbx = 1;\n        }\n        error(rbx, rsi, \"%s: %s\", arg6, rax_5);\n        rbp = var_40;\n    }\n    return rbp;\n}\n\n"
        },
        {
            "funcName": "sub_406af0",
            "funcStartAddr": "0x406af0",
            "funcEndAddr": "0x406b11",
            "decompiledFuncCode": "int64_t sub_406af0(char* arg1, int64_t arg2, int64_t arg3, char* arg4, \n    int64_t arg5, int32_t arg6)\n{\n    return sub_406a20(arg1, 0xa, arg2, arg3, arg4, arg5, arg6);\n}\n\n"
        },
        {
            "funcName": "sub_406b20",
            "funcStartAddr": "0x406b20",
            "funcEndAddr": "0x406f44",
            "decompiledFuncCode": "uint64_t sub_406b20(char* arg1, int64_t* arg2, int32_t arg3, uint64_t* arg4, \n    char* arg5)\n{\n    if (arg3 > 0x24)\n    {\n        __assert_fail(\"0 <= strtol_base && strtol_base \u2026\", \"lib/xstrtol.c\", 0x60, \"xstrtoul\");\n        /* no return */\n    }\n    int64_t* r15 = arg2;\n    void var_40;\n    if (arg2 == 0)\n    {\n        r15 = &var_40;\n    }\n    int32_t* rax = __errno_location();\n    *rax = 0;\n    char rbx = *arg1;\n    uint16_t* rsi = *__ctype_b_loc();\n    char* rax_2 = arg1;\n    while ((*(&rsi[rbx] + 1) & 0x20) != 0)\n    {\n        rax_2 = &rax_2[1];\n        rbx = *rax_2;\n    }\n    int32_t rbp_1;\n    if (rbx == 0x2d)\n    {\n    label_406be2:\n        rbp_1 = 4;\n    }\n    else\n    {\n        char* r8 = *r15;\n        uint64_t rbx_1 = strtoul(arg1, r15, arg3);\n        int32_t var_58;\n        void* r8_1;\n        uint32_t r12_1;\n        if (r8 == arg1)\n        {\n            var_58 = r8;\n            if (arg5 == 0)\n            {\n                goto label_406be2;\n            }\n            r12_1 = *arg1;\n            if (r12_1 == 0)\n            {\n                goto label_406be2;\n            }\n            rbp_1 = 0;\n            rbx_1 = 1;\n            r8_1 = var_58;\n            if (strchr(arg5, r12_1) == 0)\n            {\n                goto label_406be2;\n            }\n        label_406c1f:\n            uint64_t rdx_1 = (r12_1 - 0x45);\n            int64_t rdx_3;\n            int32_t rsi_3;\n            if (rdx_1 <= 0x2f)\n            {\n                var_58 = rdx_1;\n                if ((!(TEST_BITQ(0x814400308945, rdx_1))))\n                {\n                    goto label_406c80;\n                }\n                if (strchr(arg5, 0x30) == 0)\n                {\n                    goto label_406c80;\n                }\n                char rax_8 = *(r8_1 + 1);\n                if (rax_8 == 0x44)\n                {\n                label_406ea8:\n                    rsi_3 = 2;\n                    rdx_3 = 0x3e8;\n                    goto label_406c8a;\n                }\n                if (rax_8 == 0x69)\n                {\n                    rdx_3 = 0x400;\n                    int32_t rsi_6;\n                    rsi_6 = *(r8_1 + 2) == 0x42;\n                    rsi_3 = ((rsi_6 + rsi_6) + 1);\n                    goto label_406c8a;\n                }\n                uint64_t rdx_2 = var_58;\n                if (rax_8 == 0x42)\n                {\n                    goto label_406ea8;\n                }\n                int32_t r9_1;\n                switch (rdx_2)\n                {\n                    case 0:\n                    {\n                        rsi_3 = 1;\n                        rdx_3 = 0x400;\n                    label_406e2b:\n                        int64_t rcx_6 = rdx_3;\n                        int32_t rdi_8 = 6;\n                        r9_1 = 0;\n                        int32_t temp15_1;\n                        do\n                        {\n                            uint64_t rax_28;\n                            int64_t rdx_11;\n                            rdx_11 = HIGHD((rbx_1 * rcx_6));\n                            rax_28 = LOWD((rbx_1 * rcx_6));\n                            bool o_8 = ((rbx_1 * rcx_6) >> 0x40) != 0;\n                            rbx_1 = rax_28;\n                            if (o_8)\n                            {\n                                r9_1 = 1;\n                                rbx_1 = -1;\n                            }\n                            temp15_1 = rdi_8;\n                            rdi_8 = (rdi_8 - 1);\n                        } while (temp15_1 != 1);\n                        goto label_406d84;\n                    }\n                    case 1:\n                    case 3:\n                    case 4:\n                    case 5:\n                    case 7:\n                    case 9:\n                    case 0xa:\n                    case 0xc:\n                    case 0xd:\n                    case 0xe:\n                    case 0x10:\n                    case 0x11:\n                    case 0x12:\n                    case 0x13:\n                    case 0x16:\n                    case 0x17:\n                    case 0x18:\n                    case 0x19:\n                    case 0x1a:\n                    case 0x1b:\n                    case 0x1c:\n                    case 0x1f:\n                    case 0x20:\n                    case 0x21:\n                    case 0x23:\n                    case 0x24:\n                    case 0x25:\n                    case 0x27:\n                    case 0x29:\n                    case 0x2a:\n                    case 0x2b:\n                    case 0x2c:\n                    case 0x2d:\n                    case 0x2e:\n                    {\n                        goto label_406d25;\n                    }\n                    case 2:\n                    case 0x22:\n                    {\n                        rsi_3 = 1;\n                        rdx_3 = 0x400;\n                    label_406e63:\n                        int64_t rcx_7 = rdx_3;\n                        int64_t rax_30;\n                        int64_t rdx_12;\n                        rdx_12 = HIGHD((rbx_1 * rcx_7));\n                        rax_30 = LOWD((rbx_1 * rcx_7));\n                        int64_t rax_31;\n                        if (((rbx_1 * rcx_7) >> 0x40) == 0)\n                        {\n                            int64_t rdx_13;\n                            rdx_13 = HIGHD((rax_30 * rcx_7));\n                            rax_31 = LOWD((rax_30 * rcx_7));\n                            if (((rax_30 * rcx_7) >> 0x40) == 0)\n                            {\n                                uint64_t rax_32;\n                                int64_t rdx_14;\n                                rdx_14 = HIGHD((rax_31 * rcx_7));\n                                rax_32 = LOWD((rax_31 * rcx_7));\n                                if (((rax_31 * rcx_7) >> 0x40) == 0)\n                                {\n                                    rbx_1 = rax_32;\n                                    rbp_1 = (rbp_1 | 0);\n                                }\n                            }\n                        }\n                        if (((((rbx_1 * rcx_7) >> 0x40) != 0 || (((rbx_1 * rcx_7) >> 0x40) == 0 && ((rax_30 * rcx_7) >> 0x40) != 0)) || ((((rbx_1 * rcx_7) >> 0x40) == 0 && ((rax_30 * rcx_7) >> 0x40) == 0) && ((rax_31 * rcx_7) >> 0x40) != 0)))\n                        {\n                            rbx_1 = -1;\n                            rbp_1 = (rbp_1 | 1);\n                        }\n                        goto label_406ccd;\n                    }\n                    case 6:\n                    case 0x26:\n                    {\n                        rsi_3 = 1;\n                        rdx_3 = 0x400;\n                    label_406cef:\n                        uint64_t rax_15;\n                        int64_t rdx_6;\n                        rdx_6 = HIGHD((rbx_1 * rdx_3));\n                        rax_15 = LOWD((rbx_1 * rdx_3));\n                        bool o_3 = ((rbx_1 * rdx_3) >> 0x40) != 0;\n                        rbx_1 = rax_15;\n                        if ((!o_3))\n                        {\n                            goto label_406ccd;\n                        }\n                        goto label_406cf7;\n                    }\n                    case 8:\n                    case 0x28:\n                    {\n                        rsi_3 = 1;\n                        rdx_3 = 0x400;\n                    label_406cae:\n                        int64_t rcx_1 = rdx_3;\n                        int64_t rax_10;\n                        int64_t rdx_4;\n                        rdx_4 = HIGHD((rbx_1 * rcx_1));\n                        rax_10 = LOWD((rbx_1 * rcx_1));\n                        if (((rbx_1 * rcx_1) >> 0x40) == 0)\n                        {\n                            uint64_t rax_11;\n                            int64_t rdx_5;\n                            rdx_5 = HIGHD((rax_10 * rcx_1));\n                            rax_11 = LOWD((rax_10 * rcx_1));\n                            if (((rax_10 * rcx_1) >> 0x40) != 0)\n                            {\n                                goto label_406cf7;\n                            }\n                            rbx_1 = rax_11;\n                            goto label_406ccd;\n                        }\n                    label_406cf7:\n                        rbp_1 = 1;\n                        rbx_1 = -1;\n                        goto label_406ccd;\n                    }\n                    case 0xb:\n                    {\n                        rsi_3 = 1;\n                        rdx_3 = 0x400;\n                    label_406df8:\n                        int64_t rcx_5 = rdx_3;\n                        int32_t rdi_7 = 5;\n                        r9_1 = 0;\n                        int32_t temp14_1;\n                        do\n                        {\n                            uint64_t rax_26;\n                            int64_t rdx_10;\n                            rdx_10 = HIGHD((rbx_1 * rcx_5));\n                            rax_26 = LOWD((rbx_1 * rcx_5));\n                            bool o_7 = ((rbx_1 * rcx_5) >> 0x40) != 0;\n                            rbx_1 = rax_26;\n                            if (o_7)\n                            {\n                                r9_1 = 1;\n                                rbx_1 = -1;\n                            }\n                            temp14_1 = rdi_7;\n                            rdi_7 = (rdi_7 - 1);\n                        } while (temp14_1 != 1);\n                        goto label_406d84;\n                    }\n                    case 0xf:\n                    case 0x2f:\n                    {\n                        rsi_3 = 1;\n                        rdx_3 = 0x400;\n                    label_406dc8:\n                        int64_t rcx_4 = rdx_3;\n                        int32_t rdi_6 = 4;\n                        r9_1 = 0;\n                        int32_t temp13_1;\n                        do\n                        {\n                            uint64_t rax_24;\n                            int64_t rdx_9;\n                            rdx_9 = HIGHD((rbx_1 * rcx_4));\n                            rax_24 = LOWD((rbx_1 * rcx_4));\n                            bool o_6 = ((rbx_1 * rcx_4) >> 0x40) != 0;\n                            rbx_1 = rax_24;\n                            if (o_6)\n                            {\n                                r9_1 = 1;\n                                rbx_1 = -1;\n                            }\n                            temp13_1 = rdi_6;\n                            rdi_6 = (rdi_6 - 1);\n                        } while (temp13_1 != 1);\n                        goto label_406d84;\n                    }\n                    case 0x14:\n                    {\n                        rsi_3 = 1;\n                        rdx_3 = 0x400;\n                    label_406d96:\n                        int64_t rcx_3 = rdx_3;\n                        int32_t rdi_5 = 8;\n                        r9_1 = 0;\n                        int32_t temp12_1;\n                        do\n                        {\n                            uint64_t rax_22;\n                            int64_t rdx_8;\n                            rdx_8 = HIGHD((rbx_1 * rcx_3));\n                            rax_22 = LOWD((rbx_1 * rcx_3));\n                            bool o_5 = ((rbx_1 * rcx_3) >> 0x40) != 0;\n                            rbx_1 = rax_22;\n                            if (o_5)\n                            {\n                                r9_1 = 1;\n                                rbx_1 = -1;\n                            }\n                            temp12_1 = rdi_5;\n                            rdi_5 = (rdi_5 - 1);\n                        } while (temp12_1 != 1);\n                        goto label_406d84;\n                    }\n                    case 0x15:\n                    {\n                        rsi_3 = 1;\n                        rdx_3 = 0x400;\n                    label_406d5b:\n                        int64_t rcx_2 = rdx_3;\n                        int32_t rdi_4 = 7;\n                        r9_1 = 0;\n                        int32_t temp11_1;\n                        do\n                        {\n                            uint64_t rax_20;\n                            int64_t rdx_7;\n                            rdx_7 = HIGHD((rbx_1 * rcx_2));\n                            rax_20 = LOWD((rbx_1 * rcx_2));\n                            bool o_4 = ((rbx_1 * rcx_2) >> 0x40) != 0;\n                            rbx_1 = rax_20;\n                            if (o_4)\n                            {\n                                r9_1 = 1;\n                                rbx_1 = -1;\n                            }\n                            temp11_1 = rdi_4;\n                            rdi_4 = (rdi_4 - 1);\n                        } while (temp11_1 != 1);\n                    label_406d84:\n                        rbp_1 = (rbp_1 | r9_1);\n                        goto label_406ccd;\n                    }\n                    case 0x1d:\n                    {\n                        rsi_3 = 1;\n                        break;\n                    }\n                    case 0x1e:\n                    {\n                        rsi_3 = 1;\n                        goto label_406ccd;\n                    }\n                }\n            }\n            else\n            {\n            label_406c80:\n                rsi_3 = 1;\n                rdx_3 = 0x400;\n            label_406c8a:\n                char r12_2 = (r12_1 - 0x42);\n                if (r12_2 > 0x35)\n                {\n                    goto label_406d25;\n                }\n                switch (r12_2)\n                {\n                    case 0:\n                    {\n                        if ((rbx_1 >> 0x36) != 0)\n                        {\n                            goto label_406cf7;\n                        }\n                        rbx_1 = (rbx_1 << 0xa);\n                        goto label_406ccd;\n                    }\n                    case 1:\n                    case 2:\n                    case 4:\n                    case 6:\n                    case 7:\n                    case 8:\n                    case 0xa:\n                    case 0xc:\n                    case 0xd:\n                    case 0xf:\n                    case 0x10:\n                    case 0x11:\n                    case 0x13:\n                    case 0x14:\n                    case 0x15:\n                    case 0x16:\n                    case 0x19:\n                    case 0x1a:\n                    case 0x1b:\n                    case 0x1c:\n                    case 0x1d:\n                    case 0x1e:\n                    case 0x1f:\n                    case 0x22:\n                    case 0x23:\n                    case 0x24:\n                    case 0x26:\n                    case 0x27:\n                    case 0x28:\n                    case 0x2a:\n                    case 0x2c:\n                    case 0x2d:\n                    case 0x2e:\n                    case 0x2f:\n                    case 0x30:\n                    case 0x31:\n                    case 0x33:\n                    case 0x34:\n                    {\n                        goto label_406d25;\n                    }\n                    case 3:\n                    {\n                        goto label_406e2b;\n                    }\n                    case 5:\n                    case 0x25:\n                    {\n                        goto label_406e63;\n                    }\n                    case 9:\n                    case 0x29:\n                    {\n                        goto label_406cef;\n                    }\n                    case 0xb:\n                    case 0x2b:\n                    {\n                        goto label_406cae;\n                    }\n                    case 0xe:\n                    {\n                        goto label_406df8;\n                    }\n                    case 0x12:\n                    case 0x32:\n                    {\n                        goto label_406dc8;\n                    }\n                    case 0x17:\n                    {\n                        goto label_406d96;\n                    }\n                    case 0x18:\n                    {\n                        goto label_406d5b;\n                    }\n                    case 0x21:\n                    {\n                        goto label_406ccd;\n                    }\n                    case 0x35:\n                    {\n                        if (rbx_1 < 0)\n                        {\n                            goto label_406cf7;\n                        }\n                        rbx_1 = (rbx_1 + rbx_1);\n                    label_406ccd:\n                        void* r8_2 = (r8_1 + rsi_3);\n                        int32_t rax_13 = (rbp_1 | 2);\n                        *r15 = r8_2;\n                        if (*r8_2 != 0)\n                        {\n                            rbp_1 = rax_13;\n                        }\n                        goto label_406bc0;\n                    }\n                }\n            }\n            if ((rbx_1 >> 0x37) != 0)\n            {\n                goto label_406cf7;\n            }\n            rbx_1 = (rbx_1 << 9);\n            goto label_406ccd;\n        }\n        int32_t rax_4 = *rax;\n        if (rax_4 == 0)\n        {\n            rbp_1 = 0;\n        }\n        else\n        {\n            rbp_1 = 1;\n            if (rax_4 != 0x22)\n            {\n                goto label_406be2;\n            }\n        }\n        if (arg5 == 0)\n        {\n        label_406bc0:\n            *arg4 = rbx_1;\n        }\n        else\n        {\n            r12_1 = *r8;\n            if (r12_1 == 0)\n            {\n                goto label_406bc0;\n            }\n            var_58 = r8;\n            r8_1 = var_58;\n            if (strchr(arg5, r12_1) != 0)\n            {\n                goto label_406c1f;\n            }\n        label_406d25:\n            *arg4 = rbx_1;\n            rbp_1 = (rbp_1 | 2);\n        }\n    }\n    return rbp_1;\n}\n\n"
        },
        {
            "funcName": "sub_406f50",
            "funcStartAddr": "0x406f50",
            "funcEndAddr": "0x407384",
            "decompiledFuncCode": "uint64_t sub_406f50(char* arg1, int64_t* arg2, int32_t arg3, uint64_t* arg4, \n    char* arg5)\n{\n    if (arg3 > 0x24)\n    {\n        __assert_fail(\"0 <= strtol_base && strtol_base \u2026\", \"lib/xstrtol.c\", 0x60, \"xstrtoumax\");\n        /* no return */\n    }\n    int64_t* r15 = arg2;\n    void var_40;\n    if (arg2 == 0)\n    {\n        r15 = &var_40;\n    }\n    int32_t* rax = __errno_location();\n    *rax = 0;\n    char rbx = *arg1;\n    uint16_t* rsi = *__ctype_b_loc();\n    char* rax_2 = arg1;\n    while ((*(&rsi[rbx] + 1) & 0x20) != 0)\n    {\n        rax_2 = &rax_2[1];\n        rbx = *rax_2;\n    }\n    int32_t rbp_1;\n    if (rbx == 0x2d)\n    {\n    label_40701a:\n        rbp_1 = 4;\n    }\n    else\n    {\n        char* r8 = *r15;\n        uint64_t rbx_1 = __strtoul_internal(arg1, r15, arg3, 0);\n        int32_t var_58;\n        void* r8_1;\n        uint32_t r12_1;\n        if (r8 == arg1)\n        {\n            var_58 = r8;\n            if (arg5 == 0)\n            {\n                goto label_40701a;\n            }\n            r12_1 = *arg1;\n            if (r12_1 == 0)\n            {\n                goto label_40701a;\n            }\n            rbp_1 = 0;\n            rbx_1 = 1;\n            r8_1 = var_58;\n            if (strchr(arg5, r12_1) == 0)\n            {\n                goto label_40701a;\n            }\n        label_407057:\n            uint64_t rdx_1 = (r12_1 - 0x45);\n            int64_t rdx_3;\n            int32_t rsi_3;\n            if (rdx_1 <= 0x2f)\n            {\n                var_58 = rdx_1;\n                if ((!(TEST_BITQ(0x814400308945, rdx_1))))\n                {\n                    goto label_4070c0;\n                }\n                if (strchr(arg5, 0x30) == 0)\n                {\n                    goto label_4070c0;\n                }\n                char rax_8 = *(r8_1 + 1);\n                if (rax_8 == 0x44)\n                {\n                label_4072e8:\n                    rsi_3 = 2;\n                    rdx_3 = 0x3e8;\n                    goto label_4070ca;\n                }\n                if (rax_8 == 0x69)\n                {\n                    rdx_3 = 0x400;\n                    int32_t rsi_6;\n                    rsi_6 = *(r8_1 + 2) == 0x42;\n                    rsi_3 = ((rsi_6 + rsi_6) + 1);\n                    goto label_4070ca;\n                }\n                uint64_t rdx_2 = var_58;\n                if (rax_8 == 0x42)\n                {\n                    goto label_4072e8;\n                }\n                int32_t r9_1;\n                switch (rdx_2)\n                {\n                    case 0:\n                    {\n                        rsi_3 = 1;\n                        rdx_3 = 0x400;\n                    label_40726b:\n                        int64_t rcx_6 = rdx_3;\n                        int32_t rdi_8 = 6;\n                        r9_1 = 0;\n                        int32_t temp15_1;\n                        do\n                        {\n                            uint64_t rax_28;\n                            int64_t rdx_11;\n                            rdx_11 = HIGHD((rbx_1 * rcx_6));\n                            rax_28 = LOWD((rbx_1 * rcx_6));\n                            bool o_8 = ((rbx_1 * rcx_6) >> 0x40) != 0;\n                            rbx_1 = rax_28;\n                            if (o_8)\n                            {\n                                r9_1 = 1;\n                                rbx_1 = -1;\n                            }\n                            temp15_1 = rdi_8;\n                            rdi_8 = (rdi_8 - 1);\n                        } while (temp15_1 != 1);\n                        goto label_4071c4;\n                    }\n                    case 1:\n                    case 3:\n                    case 4:\n                    case 5:\n                    case 7:\n                    case 9:\n                    case 0xa:\n                    case 0xc:\n                    case 0xd:\n                    case 0xe:\n                    case 0x10:\n                    case 0x11:\n                    case 0x12:\n                    case 0x13:\n                    case 0x16:\n                    case 0x17:\n                    case 0x18:\n                    case 0x19:\n                    case 0x1a:\n                    case 0x1b:\n                    case 0x1c:\n                    case 0x1f:\n                    case 0x20:\n                    case 0x21:\n                    case 0x23:\n                    case 0x24:\n                    case 0x25:\n                    case 0x27:\n                    case 0x29:\n                    case 0x2a:\n                    case 0x2b:\n                    case 0x2c:\n                    case 0x2d:\n                    case 0x2e:\n                    {\n                        goto label_407165;\n                    }\n                    case 2:\n                    case 0x22:\n                    {\n                        rsi_3 = 1;\n                        rdx_3 = 0x400;\n                    label_4072a3:\n                        int64_t rcx_7 = rdx_3;\n                        int64_t rax_30;\n                        int64_t rdx_12;\n                        rdx_12 = HIGHD((rbx_1 * rcx_7));\n                        rax_30 = LOWD((rbx_1 * rcx_7));\n                        int64_t rax_31;\n                        if (((rbx_1 * rcx_7) >> 0x40) == 0)\n                        {\n                            int64_t rdx_13;\n                            rdx_13 = HIGHD((rax_30 * rcx_7));\n                            rax_31 = LOWD((rax_30 * rcx_7));\n                            if (((rax_30 * rcx_7) >> 0x40) == 0)\n                            {\n                                uint64_t rax_32;\n                                int64_t rdx_14;\n                                rdx_14 = HIGHD((rax_31 * rcx_7));\n                                rax_32 = LOWD((rax_31 * rcx_7));\n                                if (((rax_31 * rcx_7) >> 0x40) == 0)\n                                {\n                                    rbx_1 = rax_32;\n                                    rbp_1 = (rbp_1 | 0);\n                                }\n                            }\n                        }\n                        if (((((rbx_1 * rcx_7) >> 0x40) != 0 || (((rbx_1 * rcx_7) >> 0x40) == 0 && ((rax_30 * rcx_7) >> 0x40) != 0)) || ((((rbx_1 * rcx_7) >> 0x40) == 0 && ((rax_30 * rcx_7) >> 0x40) == 0) && ((rax_31 * rcx_7) >> 0x40) != 0)))\n                        {\n                            rbx_1 = -1;\n                            rbp_1 = (rbp_1 | 1);\n                        }\n                        goto label_40710d;\n                    }\n                    case 6:\n                    case 0x26:\n                    {\n                        rsi_3 = 1;\n                        rdx_3 = 0x400;\n                    label_40712f:\n                        uint64_t rax_15;\n                        int64_t rdx_6;\n                        rdx_6 = HIGHD((rbx_1 * rdx_3));\n                        rax_15 = LOWD((rbx_1 * rdx_3));\n                        bool o_3 = ((rbx_1 * rdx_3) >> 0x40) != 0;\n                        rbx_1 = rax_15;\n                        if ((!o_3))\n                        {\n                            goto label_40710d;\n                        }\n                        goto label_407137;\n                    }\n                    case 8:\n                    case 0x28:\n                    {\n                        rsi_3 = 1;\n                        rdx_3 = 0x400;\n                    label_4070ee:\n                        int64_t rcx_1 = rdx_3;\n                        int64_t rax_10;\n                        int64_t rdx_4;\n                        rdx_4 = HIGHD((rbx_1 * rcx_1));\n                        rax_10 = LOWD((rbx_1 * rcx_1));\n                        if (((rbx_1 * rcx_1) >> 0x40) == 0)\n                        {\n                            uint64_t rax_11;\n                            int64_t rdx_5;\n                            rdx_5 = HIGHD((rax_10 * rcx_1));\n                            rax_11 = LOWD((rax_10 * rcx_1));\n                            if (((rax_10 * rcx_1) >> 0x40) != 0)\n                            {\n                                goto label_407137;\n                            }\n                            rbx_1 = rax_11;\n                            goto label_40710d;\n                        }\n                    label_407137:\n                        rbp_1 = 1;\n                        rbx_1 = -1;\n                        goto label_40710d;\n                    }\n                    case 0xb:\n                    {\n                        rsi_3 = 1;\n                        rdx_3 = 0x400;\n                    label_407238:\n                        int64_t rcx_5 = rdx_3;\n                        int32_t rdi_7 = 5;\n                        r9_1 = 0;\n                        int32_t temp14_1;\n                        do\n                        {\n                            uint64_t rax_26;\n                            int64_t rdx_10;\n                            rdx_10 = HIGHD((rbx_1 * rcx_5));\n                            rax_26 = LOWD((rbx_1 * rcx_5));\n                            bool o_7 = ((rbx_1 * rcx_5) >> 0x40) != 0;\n                            rbx_1 = rax_26;\n                            if (o_7)\n                            {\n                                r9_1 = 1;\n                                rbx_1 = -1;\n                            }\n                            temp14_1 = rdi_7;\n                            rdi_7 = (rdi_7 - 1);\n                        } while (temp14_1 != 1);\n                        goto label_4071c4;\n                    }\n                    case 0xf:\n                    case 0x2f:\n                    {\n                        rsi_3 = 1;\n                        rdx_3 = 0x400;\n                    label_407208:\n                        int64_t rcx_4 = rdx_3;\n                        int32_t rdi_6 = 4;\n                        r9_1 = 0;\n                        int32_t temp13_1;\n                        do\n                        {\n                            uint64_t rax_24;\n                            int64_t rdx_9;\n                            rdx_9 = HIGHD((rbx_1 * rcx_4));\n                            rax_24 = LOWD((rbx_1 * rcx_4));\n                            bool o_6 = ((rbx_1 * rcx_4) >> 0x40) != 0;\n                            rbx_1 = rax_24;\n                            if (o_6)\n                            {\n                                r9_1 = 1;\n                                rbx_1 = -1;\n                            }\n                            temp13_1 = rdi_6;\n                            rdi_6 = (rdi_6 - 1);\n                        } while (temp13_1 != 1);\n                        goto label_4071c4;\n                    }\n                    case 0x14:\n                    {\n                        rsi_3 = 1;\n                        rdx_3 = 0x400;\n                    label_4071d6:\n                        int64_t rcx_3 = rdx_3;\n                        int32_t rdi_5 = 8;\n                        r9_1 = 0;\n                        int32_t temp12_1;\n                        do\n                        {\n                            uint64_t rax_22;\n                            int64_t rdx_8;\n                            rdx_8 = HIGHD((rbx_1 * rcx_3));\n                            rax_22 = LOWD((rbx_1 * rcx_3));\n                            bool o_5 = ((rbx_1 * rcx_3) >> 0x40) != 0;\n                            rbx_1 = rax_22;\n                            if (o_5)\n                            {\n                                r9_1 = 1;\n                                rbx_1 = -1;\n                            }\n                            temp12_1 = rdi_5;\n                            rdi_5 = (rdi_5 - 1);\n                        } while (temp12_1 != 1);\n                        goto label_4071c4;\n                    }\n                    case 0x15:\n                    {\n                        rsi_3 = 1;\n                        rdx_3 = 0x400;\n                    label_40719b:\n                        int64_t rcx_2 = rdx_3;\n                        int32_t rdi_4 = 7;\n                        r9_1 = 0;\n                        int32_t temp11_1;\n                        do\n                        {\n                            uint64_t rax_20;\n                            int64_t rdx_7;\n                            rdx_7 = HIGHD((rbx_1 * rcx_2));\n                            rax_20 = LOWD((rbx_1 * rcx_2));\n                            bool o_4 = ((rbx_1 * rcx_2) >> 0x40) != 0;\n                            rbx_1 = rax_20;\n                            if (o_4)\n                            {\n                                r9_1 = 1;\n                                rbx_1 = -1;\n                            }\n                            temp11_1 = rdi_4;\n                            rdi_4 = (rdi_4 - 1);\n                        } while (temp11_1 != 1);\n                    label_4071c4:\n                        rbp_1 = (rbp_1 | r9_1);\n                        goto label_40710d;\n                    }\n                    case 0x1d:\n                    {\n                        rsi_3 = 1;\n                        break;\n                    }\n                    case 0x1e:\n                    {\n                        rsi_3 = 1;\n                        goto label_40710d;\n                    }\n                }\n            }\n            else\n            {\n            label_4070c0:\n                rsi_3 = 1;\n                rdx_3 = 0x400;\n            label_4070ca:\n                char r12_2 = (r12_1 - 0x42);\n                if (r12_2 > 0x35)\n                {\n                    goto label_407165;\n                }\n                switch (r12_2)\n                {\n                    case 0:\n                    {\n                        if ((rbx_1 >> 0x36) != 0)\n                        {\n                            goto label_407137;\n                        }\n                        rbx_1 = (rbx_1 << 0xa);\n                        goto label_40710d;\n                    }\n                    case 1:\n                    case 2:\n                    case 4:\n                    case 6:\n                    case 7:\n                    case 8:\n                    case 0xa:\n                    case 0xc:\n                    case 0xd:\n                    case 0xf:\n                    case 0x10:\n                    case 0x11:\n                    case 0x13:\n                    case 0x14:\n                    case 0x15:\n                    case 0x16:\n                    case 0x19:\n                    case 0x1a:\n                    case 0x1b:\n                    case 0x1c:\n                    case 0x1d:\n                    case 0x1e:\n                    case 0x1f:\n                    case 0x22:\n                    case 0x23:\n                    case 0x24:\n                    case 0x26:\n                    case 0x27:\n                    case 0x28:\n                    case 0x2a:\n                    case 0x2c:\n                    case 0x2d:\n                    case 0x2e:\n                    case 0x2f:\n                    case 0x30:\n                    case 0x31:\n                    case 0x33:\n                    case 0x34:\n                    {\n                        goto label_407165;\n                    }\n                    case 3:\n                    {\n                        goto label_40726b;\n                    }\n                    case 5:\n                    case 0x25:\n                    {\n                        goto label_4072a3;\n                    }\n                    case 9:\n                    case 0x29:\n                    {\n                        goto label_40712f;\n                    }\n                    case 0xb:\n                    case 0x2b:\n                    {\n                        goto label_4070ee;\n                    }\n                    case 0xe:\n                    {\n                        goto label_407238;\n                    }\n                    case 0x12:\n                    case 0x32:\n                    {\n                        goto label_407208;\n                    }\n                    case 0x17:\n                    {\n                        goto label_4071d6;\n                    }\n                    case 0x18:\n                    {\n                        goto label_40719b;\n                    }\n                    case 0x21:\n                    {\n                        goto label_40710d;\n                    }\n                    case 0x35:\n                    {\n                        if (rbx_1 < 0)\n                        {\n                            goto label_407137;\n                        }\n                        rbx_1 = (rbx_1 + rbx_1);\n                    label_40710d:\n                        void* r8_2 = (r8_1 + rsi_3);\n                        int32_t rax_13 = (rbp_1 | 2);\n                        *r15 = r8_2;\n                        if (*r8_2 != 0)\n                        {\n                            rbp_1 = rax_13;\n                        }\n                        goto label_406ff2;\n                    }\n                }\n            }\n            if ((rbx_1 >> 0x37) != 0)\n            {\n                goto label_407137;\n            }\n            rbx_1 = (rbx_1 << 9);\n            goto label_40710d;\n        }\n        int32_t rax_4 = *rax;\n        if (rax_4 == 0)\n        {\n            rbp_1 = 0;\n        }\n        else\n        {\n            rbp_1 = 1;\n            if (rax_4 != 0x22)\n            {\n                goto label_40701a;\n            }\n        }\n        if (arg5 == 0)\n        {\n        label_406ff2:\n            *arg4 = rbx_1;\n        }\n        else\n        {\n            r12_1 = *r8;\n            if (r12_1 == 0)\n            {\n                goto label_406ff2;\n            }\n            var_58 = r8;\n            r8_1 = var_58;\n            if (strchr(arg5, r12_1) != 0)\n            {\n                goto label_407057;\n            }\n        label_407165:\n            *arg4 = rbx_1;\n            rbp_1 = (rbp_1 | 2);\n        }\n    }\n    return rbp_1;\n}\n\n"
        },
        {
            "funcName": "sub_407390",
            "funcStartAddr": "0x407390",
            "funcEndAddr": "0x40740b",
            "decompiledFuncCode": "int64_t sub_407390(FILE* arg1)\n{\n    FILE* rdi = arg1;\n    if (fileno(arg1) >= 0)\n    {\n        int32_t rax_1 = __freading(rdi);\n        off64_t rax_6;\n        if (rax_1 != 0)\n        {\n            rax_6 = lseek(fileno(arg1), 0, 1);\n        }\n        if (((rax_1 == 0 || (rax_1 != 0 && rax_6 != -1)) && sub_407410(arg1) != 0))\n        {\n            int32_t* rax_3 = __errno_location();\n            int32_t r12 = *rax_3;\n            int64_t rax_4 = fclose(arg1);\n            if (r12 != 0)\n            {\n                *rax_3 = r12;\n                rax_4 = 0xffffffff;\n            }\n            return rax_4;\n        }\n        rdi = arg1;\n    }\n    /* tailcall */\n    return fclose(rdi);\n}\n\n"
        },
        {
            "funcName": "sub_407410",
            "funcStartAddr": "0x407410",
            "funcEndAddr": "0x407450",
            "decompiledFuncCode": "int64_t sub_407410(FILE* arg1)\n{\n    int32_t* rbx = arg1;\n    if ((arg1 != 0 && (__freading(arg1) != 0 && (*rbx & 0x100) != 0)))\n    {\n        sub_4074f0(rbx, 0, 1);\n        /* tailcall */\n        return fflush(rbx);\n    }\n    /* tailcall */\n    return fflush(rbx);\n}\n\n"
        },
        {
            "funcName": "sub_407450",
            "funcStartAddr": "0x407450",
            "funcEndAddr": "0x4074ee",
            "decompiledFuncCode": "FILE* sub_407450(char* arg1, char* arg2, FILE* arg3)\n{\n    FILE* rax = freopen(arg1, arg2, arg3);\n    if ((rax != 0 && arg1 != 0))\n    {\n        int32_t rax_1 = fileno(rax);\n        if ((dup2(rax_1, rax_1) < 0 && *__errno_location() == 9))\n        {\n            int32_t rax_6 = open(\"/dev/null\", 0x80000);\n            int32_t rax_7;\n            if (rax_1 != rax_6)\n            {\n                rax_7 = dup2(rax_6, rax_1);\n                if (rax_7 < 0)\n                {\n                    close(rax_6);\n                }\n                else\n                {\n                    close(rax_6);\n                }\n            }\n            if (((rax_1 != rax_6 && rax_7 >= 0) || rax_1 == rax_6))\n            {\n                /* tailcall */\n                return freopen(arg1, arg2, rax);\n            }\n        }\n    }\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_4074f0",
            "funcStartAddr": "0x4074f0",
            "funcEndAddr": "0x407547",
            "decompiledFuncCode": "off64_t sub_4074f0(FILE* arg1, off_t arg2, int32_t arg3)\n{\n    if ((arg1->_IO_read_end == arg1->_IO_read_ptr && (arg1->_IO_write_ptr == arg1->_IO_write_base && arg1->_IO_save_base == 0)))\n    {\n        off64_t rax_3 = lseek(fileno(arg1), arg2, arg3);\n        if (rax_3 != -1)\n        {\n            arg1->_flags = (arg1->_flags & 0xffffffef);\n            arg1->_offset = rax_3;\n            rax_3 = 0;\n        }\n        return rax_3;\n    }\n    /* tailcall */\n    return fseeko(arg1, arg2, arg3);\n}\n\n"
        },
        {
            "funcName": "sub_407550",
            "funcStartAddr": "0x407550",
            "funcEndAddr": "0x40762f",
            "decompiledFuncCode": "uint64_t sub_407550(int64_t arg1, int32_t* arg2)\n{\n    int64_t r11 = (arg1 + 8);\n    int32_t r12 = arg2[0xb];\n    int32_t rbp = *arg2;\n    int64_t rbx = arg2[0xc];\n    int32_t r9 = r12;\n    int32_t r10 = rbp;\n    int32_t r8 = rbx;\n    while (r10 > r8)\n    {\n        int32_t r14_2;\n        while (r9 < r8)\n        {\n            r14_2 = (r10 - r8);\n            int32_t rdx_2 = (r8 - r9);\n            if (r14_2 <= rdx_2)\n            {\n                break;\n            }\n            int64_t rcx_1 = r9;\n            r10 = (r10 - rdx_2);\n            int64_t* rax_1 = (arg1 + (rcx_1 << 3));\n            int64_t r13_1 = (r11 + (((rdx_2 - 1) + rcx_1) << 3));\n            int64_t rdx_6 = (r10 - rcx_1);\n            do\n            {\n                int64_t rcx_2 = *rax_1;\n                *rax_1 = rax_1[rdx_6];\n                rax_1[rdx_6] = rcx_2;\n                rax_1 = &rax_1[1];\n            } while (r13_1 != rax_1);\n            if (r10 <= r8)\n            {\n                break;\n            }\n        }\n        if (r9 >= r8)\n        {\n            break;\n        }\n        int64_t rdx_7 = r9;\n        int64_t* rax_4 = (arg1 + (rdx_7 << 3));\n        int64_t r13_2 = (r11 + (((r14_2 - 1) + rdx_7) << 3));\n        int64_t rcx_6 = (rbx - rdx_7);\n        do\n        {\n            int64_t rcx_7 = *rax_4;\n            *rax_4 = rax_4[rcx_6];\n            rax_4[rcx_6] = rcx_7;\n            rax_4 = &rax_4[1];\n        } while (rax_4 != r13_2);\n        r9 = (r9 + r14_2);\n    }\n    arg2[0xc] = rbp;\n    uint64_t rax_3 = (rbp - r8);\n    arg2[0xb] = (r12 + rax_3);\n    return rax_3;\n}\n\n"
        },
        {
            "funcName": "sub_407630",
            "funcStartAddr": "0x407630",
            "funcEndAddr": "0x407c4c",
            "decompiledFuncCode": "uint64_t sub_407630(int32_t arg1, int64_t* arg2, char* arg3, int64_t* arg4, \n    int32_t* arg5, int32_t arg6, int32_t* arg7, int32_t arg8, int64_t arg9)\n{\n    char* r14 = *(arg7 + 0x20);\n    char rax_1 = *r14;\n    char* rbp = r14;\n    uint64_t r13_1;\n    if ((rax_1 == 0x3d || rax_1 == 0))\n    {\n        r13_1 = 0;\n    }\n    if ((rax_1 != 0x3d && rax_1 != 0))\n    {\n        while (true)\n        {\n            rbp = &rbp[1];\n            char rax_2 = *rbp;\n            if (rax_2 == 0)\n            {\n                break;\n            }\n            if (rax_2 == 0x3d)\n            {\n                break;\n            }\n            if ((!(rax_2 != 0 && rax_2 != 0x3d)))\n            {\n                /* nop */\n            }\n        }\n        r13_1 = (rbp - r14);\n    }\n    int64_t* rbx = arg4;\n    int64_t r12 = 0;\n    char* rax_3 = *rbx;\n    char* r15 = rax_3;\n    uint64_t rax_14;\n    if (rax_3 != 0)\n    {\n        int32_t rax_4;\n        uint64_t rax_5;\n        int32_t r8;\n        while (true)\n        {\n            rax_4 = strncmp(r15, r14, r13_1);\n            if (rax_4 == 0)\n            {\n                rax_5 = strlen(r15);\n                if (rax_5 == r13_1)\n                {\n                    break;\n                }\n            }\n            rbx = &rbx[4];\n            r15 = *rbx;\n            r8 = (r12 + 1);\n            if (r15 == 0)\n            {\n                break;\n            }\n            r12 = r8;\n        }\n        if ((rax_4 == 0 && rax_5 == r13_1))\n        {\n            goto label_407860;\n        }\n        rbx = nullptr;\n        int32_t var_44_1 = 0xffffffff;\n        char* rdi_2 = rax_3;\n        int64_t r15_1 = 0;\n        int32_t var_50_1 = 0;\n        int32_t var_40_1 = 0;\n        char* var_70_1 = nullptr;\n        int64_t* rbp_1 = arg4;\n        do\n        {\n            if (strncmp(rdi_2, r14, r13_1) == 0)\n            {\n                if (rbx == 0)\n                {\n                    var_44_1 = r15_1;\n                    rbx = rbp_1;\n                }\n                else if (((((arg6 != 0 || (arg6 == 0 && rbx[1] != rbp_1[1])) || ((arg6 == 0 && rbx[1] == rbp_1[1]) && rbx[2] != rbp_1[2])) || (((arg6 == 0 && rbx[1] == rbp_1[1]) && rbx[2] == rbp_1[2]) && rbx[3] != rbp_1[3])) && var_50_1 == 0))\n                {\n                    if (arg8 == 0)\n                    {\n                        var_50_1 = 1;\n                        if (var_70_1 != 0)\n                        {\n                            goto label_407786;\n                        }\n                    }\n                    else\n                    {\n                        if (var_70_1 != 0)\n                        {\n                            goto label_407786;\n                        }\n                        char* rax_36 = calloc(r8, 1);\n                        var_70_1 = rax_36;\n                        if (rax_36 == 0)\n                        {\n                            var_50_1 = 1;\n                        }\n                        else\n                        {\n                            var_40_1 = 1;\n                            var_70_1[var_44_1] = 1;\n                        label_407786:\n                            var_70_1[r15_1] = 1;\n                        }\n                    }\n                }\n            }\n            rbp_1 = &rbp_1[4];\n            rdi_2 = *rbp_1;\n            r15_1 = (r15_1 + 1);\n        } while (rdi_2 != 0);\n        if (((var_70_1 == 0 && var_50_1 == 0) && rbx != 0))\n        {\n            r12 = var_44_1;\n        label_407860:\n            int32_t rdx_3 = *arg7;\n            *(arg7 + 0x20) = 0;\n            int32_t rax_18 = (rdx_3 + 1);\n            *arg7 = rax_18;\n            int32_t rcx_4 = rbx[1];\n            if (*rbp != 0)\n            {\n                if (rcx_4 != 0)\n                {\n                    *(arg7 + 0x10) = &rbp[1];\n                }\n                else\n                {\n                    if (arg8 != 0)\n                    {\n                        __fprintf_chk(stderr, 1, dcgettext(nullptr, \"%s: option '%s%s' doesn't allow \u2026\", 5), *arg2, arg9, *rbx, arg4);\n                    }\n                    arg7[2] = rbx[3];\n                    rax_14 = 0x3f;\n                }\n            }\n            if ((rcx_4 == 1 && *rbp == 0))\n            {\n                if (rax_18 < arg1)\n                {\n                    *arg7 = (rdx_3 + 2);\n                    *(arg7 + 0x10) = arg2[rax_18];\n                }\n                else\n                {\n                    if (arg8 != 0)\n                    {\n                        __fprintf_chk(stderr, 1, dcgettext(nullptr, \"%s: option '%s%s' requires an ar\u2026\", 5), *arg2, arg9, *rbx, arg4);\n                    }\n                    arg7[2] = rbx[3];\n                    char* rax_43;\n                    rax_43 = *arg3 != 0x3a;\n                    rax_14 = ((rax_43 * 5) + 0x3a);\n                }\n            }\n            if ((((*rbp != 0 && rcx_4 != 0) || ((*rbp == 0 && rcx_4 == 1) && rax_18 < arg1)) || (*rbp == 0 && rcx_4 != 1)))\n            {\n                if (arg5 == 0)\n                {\n                    goto label_40788e;\n                }\n                *arg5 = r12;\n            label_40788e:\n                int32_t* rdx_4 = rbx[2];\n                rax_14 = rbx[3];\n                if (rdx_4 != 0)\n                {\n                    *rdx_4 = rax_14;\n                    rax_14 = 0;\n                }\n            }\n            goto label_4078ac;\n        }\n        if ((var_70_1 != 0 || (var_70_1 == 0 && var_50_1 != 0)))\n        {\n            if (arg8 != 0)\n            {\n                if (var_50_1 != 0)\n                {\n                    __fprintf_chk(stderr, 1, dcgettext(nullptr, \"%s: option '%s%s' is ambiguous\\n\", 5), *arg2, arg9, r14, arg4);\n                    r14 = *(arg7 + 0x20);\n                }\n                else\n                {\n                    flockfile(stderr);\n                    __fprintf_chk(stderr, 1, dcgettext(nullptr, \"%s: option '%s%s' is ambiguous; \u2026\", 5), *arg2, arg9, *(arg7 + 0x20), arg4);\n                    uint64_t* const rdi_13 = stderr;\n                    int64_t* rbx_4 = arg4;\n                    char* rbp_5 = var_70_1;\n                    void* r12_2 = &var_70_1[(r12 + 1)];\n                    do\n                    {\n                        if (*rbp_5 != 0)\n                        {\n                            __fprintf_chk(rdi_13, 1, \" '%s%s'\", arg9, *rbx_4);\n                            rdi_13 = stderr;\n                        }\n                        rbp_5 = &rbp_5[1];\n                        rbx_4 = &rbx_4[4];\n                    } while (r12_2 != rbp_5);\n                    fputc(0xa, stderr);\n                    funlockfile(stderr);\n                    r14 = *(arg7 + 0x20);\n                }\n            }\n            if (var_40_1 != 0)\n            {\n                free(var_70_1);\n            }\n            *(arg7 + 0x20) = &r14[strlen(r14)];\n            *arg7 = (*arg7 + 1);\n            arg7[2] = 0;\n            rax_14 = 0x3f;\n        label_4078ac:\n            return rax_14;\n        }\n    }\n    if ((arg6 != 0 && *(arg2[*arg7] + 1) != 0x2d))\n    {\n        rax_14 = 0xffffffff;\n        if (strchr(arg3, rax_1) != 0)\n        {\n            goto label_4078ac;\n        }\n    }\n    if (arg8 == 0)\n    {\n        goto label_40781e;\n    }\n    __fprintf_chk(stderr, 1, dcgettext(nullptr, \"%s: unrecognized option '%s%s'\\n\", 5), *arg2, arg9, r14, arg4);\nlabel_40781e:\n    *(arg7 + 0x20) = 0;\n    *arg7 = (*arg7 + 1);\n    arg7[2] = 0;\n    return 0x3f;\n}\n\n"
        },
        {
            "funcName": "sub_407c50",
            "funcStartAddr": "0x407c50",
            "funcEndAddr": "0x408216",
            "decompiledFuncCode": "uint64_t sub_407c50(int32_t arg1, int64_t* arg2, char* arg3, int64_t* arg4, \n    int32_t* arg5, int32_t arg6, int32_t* arg7, int32_t arg8)\n{\n    int32_t r13 = arg7[1];\n    if (arg1 <= 0)\n    {\n        goto label_407e8c;\n    }\n    int32_t rax_1 = *arg7;\n    int32_t rbp_1 = arg1;\n    char* r15_1 = arg3;\n    *(arg7 + 0x10) = 0;\n    if (rax_1 == 0)\n    {\n        *arg7 = 1;\n        rax_1 = 1;\n    }\n    uint32_t rax_3;\n    char* rdx;\n    if ((rax_1 == 0 || (rax_1 != 0 && arg7[6] == 0)))\n    {\n        arg7[0xc] = rax_1;\n        arg7[0xb] = rax_1;\n        *(arg7 + 0x20) = 0;\n        char rax_2 = *r15_1;\n        if (rax_2 == 0x2d)\n        {\n            arg7[0xa] = 2;\n            r15_1 = &r15_1[1];\n            rdx = nullptr;\n        }\n        else if (rax_2 == 0x2b)\n        {\n            arg7[0xa] = 0;\n            r15_1 = &r15_1[1];\n            rdx = nullptr;\n        }\n        else\n        {\n            rdx = nullptr;\n            char* rax_16;\n            if (arg8 == 0)\n            {\n                rax_16 = getenv(\"POSIXLY_CORRECT\");\n                if (rax_16 == 0)\n                {\n                    arg7[0xa] = 1;\n                    rdx = *(arg7 + 0x20);\n                }\n                else\n                {\n                    rdx = *(arg7 + 0x20);\n                }\n            }\n            if (((arg8 == 0 && rax_16 != 0) || arg8 != 0))\n            {\n                arg7[0xa] = 0;\n            }\n        }\n        arg7[6] = 1;\n        rax_3 = *r15_1;\n    }\n    if ((rax_1 != 0 && arg7[6] != 0))\n    {\n        rax_3 = *arg3;\n        rdx = *(arg7 + 0x20);\n    }\n    if (((((rax_1 != 0 && arg7[6] != 0) && ((rax_3 - 0x2b) & 0xfd) != 0) || rax_1 == 0) || (rax_1 != 0 && arg7[6] == 0)))\n    {\n        if (rax_3 == 0x3a)\n        {\n            r13 = 0;\n        }\n        if (rdx == 0)\n        {\n            goto label_407d18;\n        }\n    }\n    if (((rax_1 != 0 && arg7[6] != 0) && ((rax_3 - 0x2b) & 0xfd) == 0))\n    {\n        char rax_4 = r15_1[1];\n        r15_1 = &r15_1[1];\n        if (rax_4 == 0x3a)\n        {\n            r13 = 0;\n        }\n        if (rdx == 0)\n        {\n        label_407d18:\n            int32_t rax_5 = *arg7;\n            if (arg7[0xc] > rax_5)\n            {\n                arg7[0xc] = rax_5;\n            }\n            if (rax_5 < arg7[0xb])\n            {\n                arg7[0xb] = rax_5;\n            }\n            if (arg7[0xa] == 1)\n            {\n                int32_t rdx_5 = arg7[0xc];\n                if (arg7[0xb] == rdx_5)\n                {\n                    if (rax_5 != rdx_5)\n                    {\n                        arg7[0xb] = rax_5;\n                        rdx_5 = rax_5;\n                    }\n                }\n                else if (rax_5 != rdx_5)\n                {\n                    sub_407550(arg2, arg7);\n                    rdx_5 = *arg7;\n                }\n                char* rcx_8;\n                if (rbp_1 > rdx_5)\n                {\n                    int64_t rax_10 = rdx_5;\n                    do\n                    {\n                        rcx_8 = arg2[rax_10];\n                        int32_t rsi_5 = rax_10;\n                        rdx_5 = rax_10;\n                        if ((*rcx_8 == 0x2d && rcx_8[1] != 0))\n                        {\n                            break;\n                        }\n                        rdx_5 = (rsi_5 + 1);\n                        rax_10 = (rax_10 + 1);\n                        *arg7 = rdx_5;\n                    } while (rbp_1 > rax_10);\n                    if ((*rcx_8 == 0x2d && rcx_8[1] != 0))\n                    {\n                        rax_5 = *arg7;\n                    }\n                }\n                if ((rbp_1 <= rdx_5 || (rbp_1 > rdx_5 && (!(*rcx_8 == 0x2d && rcx_8[1] != 0)))))\n                {\n                    rax_5 = rdx_5;\n                }\n                arg7[0xc] = rdx_5;\n            }\n            bool c_1 = rbp_1 < rax_5;\n            bool z_1 = rbp_1 == rax_5;\n            int64_t rcx_3;\n            int32_t rdx_2;\n            char* r14_1;\n            if (z_1)\n            {\n                rbp_1 = arg7[0xc];\n                rdx_2 = arg7[0xb];\n            }\n            else\n            {\n                rcx_3 = 3;\n                void* const rdi = &data_40c101;\n                r14_1 = arg2[rax_5];\n                char* rsi_1 = r14_1;\n                while (rcx_3 != 0)\n                {\n                    char temp0_1 = *rsi_1;\n                    char temp1_1 = *rdi;\n                    c_1 = temp0_1 < temp1_1;\n                    z_1 = temp0_1 == temp1_1;\n                    rsi_1 = &rsi_1[1];\n                    rdi = (rdi + 1);\n                    rcx_3 = (rcx_3 - 1);\n                    if ((!z_1))\n                    {\n                        break;\n                    }\n                }\n                rcx_3 = ((!z_1) && (!c_1));\n                rcx_3 = (rcx_3 - 0);\n                if (rcx_3 == 0)\n                {\n                    rdx_2 = arg7[0xb];\n                    int32_t rcx_4 = arg7[0xc];\n                    int32_t rax_6 = (rax_5 + 1);\n                    *arg7 = rax_6;\n                    if (rdx_2 == rcx_4)\n                    {\n                        arg7[0xb] = rax_6;\n                        rdx_2 = rax_6;\n                    }\n                    else if (rax_6 != rcx_4)\n                    {\n                        sub_407550(arg2, arg7);\n                        rdx_2 = arg7[0xb];\n                    }\n                    arg7[0xc] = rbp_1;\n                    *arg7 = rbp_1;\n                }\n            }\n            int32_t r14_2;\n            if ((z_1 || ((!z_1) && rcx_3 == 0)))\n            {\n                if (rdx_2 == rbp_1)\n                {\n                    goto label_407e8c;\n                }\n                *arg7 = rdx_2;\n            label_407e8c:\n                r14_2 = -1;\n            }\n            if (((!z_1) && rcx_3 != 0))\n            {\n                char rcx_9;\n                if (*r14_1 == 0x2d)\n                {\n                    rcx_9 = r14_1[1];\n                    if (rcx_9 != 0)\n                    {\n                        if (arg4 == 0)\n                        {\n                            goto label_407f90;\n                        }\n                        int32_t* var_88_2;\n                        int32_t var_80_2;\n                        void* const var_78_1;\n                        if (rcx_9 == 0x2d)\n                        {\n                            *(arg7 + 0x20) = &r14_1[2];\n                            var_78_1 = &data_40c101;\n                            var_80_2 = r13;\n                            var_88_2 = arg7;\n                            goto label_408000;\n                        }\n                        if (arg6 == 0)\n                        {\n                            goto label_407f90;\n                        }\n                        if (r14_1[2] == 0)\n                        {\n                            if (strchr(r15_1, rcx_9) != 0)\n                            {\n                                goto label_407f90;\n                            }\n                            goto label_407f51;\n                        }\n                    label_407f51:\n                        *(arg7 + 0x20) = &r14_1[1];\n                        int32_t rax_12 = sub_407630(rbp_1, arg2, r15_1, arg4, arg5, arg6, arg7, r13, &data_40c102);\n                        r14_2 = rax_12;\n                        if (rax_12 == 0xffffffff)\n                        {\n                            r14_1 = arg2[*arg7];\n                        label_407f90:\n                            rdx = &r14_1[1];\n                        label_407dd1:\n                            *(arg7 + 0x20) = &rdx[1];\n                            r14_2 = *rdx;\n                            int32_t var_4c;\n                            var_4c = r14_2;\n                            char* rax_7 = strchr(r15_1, r14_2);\n                            char rcx_5 = var_4c;\n                            void* r8_1 = &rdx[1];\n                            if (rdx[1] == 0)\n                            {\n                                *arg7 = (*arg7 + 1);\n                            }\n                            if (((rcx_5 - 0x3a) > 1 && rax_7 != 0))\n                            {\n                                char rcx_7 = rax_7[1];\n                                if (((*rax_7 == 0x57 && arg4 != 0) && rcx_7 == 0x3b))\n                                {\n                                    if (rdx[1] != 0)\n                                    {\n                                        goto label_407fce;\n                                    }\n                                    int64_t rax_14 = *arg7;\n                                    if (rax_14 == rbp_1)\n                                    {\n                                        if (r13 != 0)\n                                        {\n                                            int64_t rbp_4 = *arg2;\n                                            __fprintf_chk(stderr, 1, dcgettext(nullptr, \"%s: option requires an argument \u2026\", 5), rbp_4, r14_2);\n                                        }\n                                        arg7[2] = r14_2;\n                                        int64_t r14_4;\n                                        r14_4 = *r15_1 != 0x3a;\n                                        r14_2 = ((r14_4 * 5) + 0x3a);\n                                    }\n                                    else\n                                    {\n                                        r8_1 = arg2[rax_14];\n                                    label_407fce:\n                                        *(arg7 + 0x20) = r8_1;\n                                        arg6 = 0;\n                                        *(arg7 + 0x10) = 0;\n                                        var_78_1 = &data_40c120;\n                                        var_80_2 = r13;\n                                        var_88_2 = arg7;\n                                    label_408000:\n                                        r14_2 = sub_407630(rbp_1, arg2, r15_1, arg4, arg5, arg6, var_88_2, var_80_2, var_78_1);\n                                    }\n                                }\n                                if ((((*rax_7 != 0x57 || (*rax_7 == 0x57 && arg4 == 0)) || ((*rax_7 == 0x57 && arg4 != 0) && rcx_7 != 0x3b)) && rcx_7 == 0x3a))\n                                {\n                                    char rdx_9 = rdx[1];\n                                    if (rax_7[2] != 0x3a)\n                                    {\n                                        int64_t rax_17 = *arg7;\n                                        if (rdx_9 != 0)\n                                        {\n                                            *(arg7 + 0x10) = r8_1;\n                                            *arg7 = (rax_17 + 1);\n                                        }\n                                        else if (rbp_1 != rax_17)\n                                        {\n                                            int64_t rax_18 = arg2[rax_17];\n                                            *arg7 = (rax_17 + 1);\n                                            *(arg7 + 0x10) = rax_18;\n                                        }\n                                        else\n                                        {\n                                            if (r13 != 0)\n                                            {\n                                                int64_t rbp_3 = *arg2;\n                                                __fprintf_chk(stderr, 1, dcgettext(nullptr, \"%s: option requires an argument \u2026\", 5), rbp_3, r14_2);\n                                            }\n                                            arg7[2] = r14_2;\n                                            int64_t r14_3;\n                                            r14_3 = *r15_1 != 0x3a;\n                                            r14_2 = ((r14_3 * 5) + 0x3a);\n                                        }\n                                    }\n                                    else if (rdx_9 == 0)\n                                    {\n                                        *(arg7 + 0x10) = 0;\n                                    }\n                                    else\n                                    {\n                                        *(arg7 + 0x10) = r8_1;\n                                        *arg7 = (*arg7 + 1);\n                                    }\n                                    *(arg7 + 0x20) = 0;\n                                }\n                            }\n                            if (((rcx_5 - 0x3a) <= 1 || ((rcx_5 - 0x3a) > 1 && rax_7 == 0)))\n                            {\n                                if (r13 == 0)\n                                {\n                                    goto label_4080bd;\n                                }\n                                int64_t rbp_2 = *arg2;\n                                __fprintf_chk(stderr, 1, dcgettext(nullptr, \"%s: invalid option -- '%c'\\n\", 5), rbp_2, r14_2);\n                            label_4080bd:\n                                arg7[2] = r14_2;\n                                r14_2 = 0x3f;\n                            }\n                        }\n                    }\n                }\n                if ((*r14_1 != 0x2d || (*r14_1 == 0x2d && rcx_9 == 0)))\n                {\n                    if (arg7[0xa] == 0)\n                    {\n                        goto label_407e8c;\n                    }\n                    *(arg7 + 0x10) = r14_1;\n                    r14_2 = 1;\n                    *arg7 = (rax_5 + 1);\n                }\n            }\n            if ((((z_1 || ((!z_1) && rcx_3 == 0)) && rdx_2 != rbp_1) || ((!z_1) && rcx_3 != 0)))\n            {\n                return r14_2;\n            }\n        }\n    }\n    if (((((((rax_1 != 0 && arg7[6] != 0) && ((rax_3 - 0x2b) & 0xfd) != 0) || rax_1 == 0) || (rax_1 != 0 && arg7[6] == 0)) && rdx != 0) || ((rax_1 != 0 && arg7[6] != 0) && ((rax_3 - 0x2b) & 0xfd) == 0)))\n    {\n        if (*rdx == 0)\n        {\n            goto label_407d18;\n        }\n        goto label_407dd1;\n    }\n}\n\n"
        },
        {
            "funcName": "sub_408280",
            "funcStartAddr": "0x408280",
            "funcEndAddr": "0x408298",
            "decompiledFuncCode": "uint64_t sub_408280(int32_t arg1, int64_t* arg2, char* arg3)\n{\n    return _getopt_internal(arg1, arg2, arg3, nullptr, nullptr, 0, 1);\n}\n\n"
        },
        {
            "funcName": "sub_408320",
            "funcStartAddr": "0x408320",
            "funcEndAddr": "0x40839a",
            "decompiledFuncCode": "uint64_t sub_408320(uint32_t* arg1, char* arg2, uint64_t arg3, mbstate_t* arg4)\n{\n    uint64_t rbx_1;\n    char* rbp_1;\n    uint32_t* r12_1;\n    if (arg2 == 0)\n    {\n        arg3 = 1;\n        rbp_1 = &data_40c104[0x1b];\n    }\n    else\n    {\n        rbx_1 = -2;\n        if (arg3 != 0)\n        {\n            r12_1 = arg1;\n            rbp_1 = arg2;\n            if (arg1 != 0)\n            {\n                goto label_40834a;\n            }\n        }\n    }\n    if ((arg2 == 0 || (arg2 != 0 && arg3 != 0)))\n    {\n        void var_1c;\n        r12_1 = &var_1c;\n    label_40834a:\n        uint64_t rax_1 = mbrtowc(r12_1, rbp_1, arg3, arg4);\n        rbx_1 = rax_1;\n        if ((rax_1 > -3 && sub_4085b0() == 0))\n        {\n            rbx_1 = 1;\n            *r12_1 = *rbp_1;\n        }\n    }\n    return rbx_1;\n}\n\n"
        },
        {
            "funcName": "sub_4083a0",
            "funcStartAddr": "0x4083a0",
            "funcEndAddr": "0x4084a4",
            "decompiledFuncCode": "char* sub_4083a0(char* arg1, int32_t arg2, int64_t arg3)\n{\n    char r8 = arg2;\n    if (arg3 != 0)\n    {\n        if ((arg1 & 7) != 0)\n        {\n            if (arg2 == *arg1)\n            {\n            label_4084a0:\n                return arg1;\n            }\n            do\n            {\n                arg1 = &arg1[1];\n                int64_t temp0_1 = arg3;\n                arg3 = (arg3 - 1);\n                if (temp0_1 == 1)\n                {\n                    return 0;\n                }\n                if ((arg1 & 7) == 0)\n                {\n                    break;\n                }\n            } while (*arg1 != r8);\n            if ((arg1 & 7) != 0)\n            {\n                goto label_4084a0;\n            }\n        }\n        int64_t r9_5 = ((arg2 << 8) | arg2);\n        int64_t r9_6 = (r9_5 | (r9_5 << 0x10));\n        int64_t r9_7 = (r9_6 | (r9_6 << 0x20));\n        int64_t rax_8;\n        if (arg3 > 7)\n        {\n            rax_8 = (*arg1 ^ r9_7);\n            if ((((!rax_8) & (rax_8 - 0x101010101010101)) & 0x8080808080808080) == 0)\n            {\n                int64_t rax_12;\n                do\n                {\n                    arg3 = (arg3 - 8);\n                    arg1 = &arg1[8];\n                    if (arg3 <= 7)\n                    {\n                        break;\n                    }\n                    rax_12 = (*arg1 ^ r9_7);\n                } while ((((!rax_12) & (rax_12 - 0x101010101010101)) & 0x8080808080808080) == 0);\n            }\n        }\n        if ((((arg3 <= 7 || (arg3 > 7 && (((!rax_8) & (rax_8 - 0x101010101010101)) & 0x8080808080808080) != 0)) || (((arg3 > 7 && (((!rax_8) & (rax_8 - 0x101010101010101)) & 0x8080808080808080) == 0) && arg3 <= 7) && arg3 != 0)) || ((arg3 > 7 && (((!rax_8) & (rax_8 - 0x101010101010101)) & 0x8080808080808080) == 0) && arg3 > 7)))\n        {\n            if (arg2 == *arg1)\n            {\n                goto label_4084a0;\n            }\n            char* rcx_3 = &arg1[1];\n            void* rdi = &arg1[arg3];\n            while (true)\n            {\n                char* rax_15 = rcx_3;\n                if (rcx_3 == rdi)\n                {\n                    return 0;\n                }\n                rcx_3 = &rcx_3[1];\n                if (rcx_3[-1] == r8)\n                {\n                    return rax_15;\n                }\n            }\n        }\n    }\n    return 0;\n}\n\n"
        },
        {
            "funcName": "sub_4084b0",
            "funcStartAddr": "0x4084b0",
            "funcEndAddr": "0x40850d",
            "decompiledFuncCode": "uint64_t sub_4084b0(FILE* arg1)\n{\n    int32_t* rbp = arg1;\n    uint64_t rax = __fpending(arg1);\n    int32_t rbx_1 = (*rbp & 0x20);\n    uint64_t rax_1 = sub_407390(rbp);\n    if ((rbx_1 != 0 && rax_1 == 0))\n    {\n        *__errno_location() = 0;\n        rax_1 = 0xffffffff;\n    }\n    if (((rbx_1 != 0 && rax_1 != 0) || ((rbx_1 == 0 && rax_1 != 0) && rax != 0)))\n    {\n        rax_1 = 0xffffffff;\n    }\n    if (((rbx_1 == 0 && rax_1 != 0) && rax == 0))\n    {\n        int32_t* rax_2;\n        rax_2 = *__errno_location() != 9;\n        rax_1 = (-rax_2);\n    }\n    return rax_1;\n}\n\n"
        },
        {
            "funcName": "sub_408510",
            "funcStartAddr": "0x408510",
            "funcEndAddr": "0x4085a3",
            "decompiledFuncCode": "FILE* sub_408510(char* arg1, char* arg2)\n{\n    FILE* rax = fopen(arg1, arg2);\n    FILE* rbx = rax;\n    if (rax != 0)\n    {\n        int32_t rax_1 = fileno(rax);\n        if (rax_1 <= 2)\n        {\n            int32_t rax_3 = sub_409dd0(rax_1);\n            if (rax_3 < 0)\n            {\n                int32_t* rax_7 = __errno_location();\n                FILE* rdi_5 = rbx;\n                rbx = nullptr;\n                int32_t r12_2 = *rax_7;\n                sub_407390(rdi_5);\n                *rax_7 = r12_2;\n            }\n            else\n            {\n                int32_t rax_4 = sub_407390(rbx);\n                FILE* rax_5;\n                if (rax_4 == 0)\n                {\n                    rax_5 = fdopen(rax_3, arg2);\n                    rbx = rax_5;\n                }\n                if ((rax_4 != 0 || (rax_4 == 0 && rax_5 == 0)))\n                {\n                    int32_t* rax_6 = __errno_location();\n                    int32_t rbp_1 = *rax_6;\n                    close(rax_3);\n                    *rax_6 = rbp_1;\n                    rbx = nullptr;\n                }\n            }\n        }\n    }\n    return rbx;\n}\n\n"
        },
        {
            "funcName": "sub_4085b0",
            "funcStartAddr": "0x4085b0",
            "funcEndAddr": "0x40860e",
            "decompiledFuncCode": "int64_t sub_4085b0()\n{\n    void var_8;\n    int64_t rcx;\n    int64_t rdx;\n    int32_t rdi;\n    uint64_t r8;\n    ssize_t r9;\n    char* rax = setlocale(rdi, nullptr, rdx, rcx, r8, r9, var_8, __return_addr);\n    int64_t rax_1 = 1;\n    bool c = false;\n    bool z = (rax & rax) == 0;\n    if ((!z))\n    {\n        int64_t rcx_1 = 2;\n        void* const rdi_1 = &data_40c124;\n        char* rsi_1 = rax;\n        while (rcx_1 != 0)\n        {\n            char temp0_1 = *rsi_1;\n            char temp1_1 = *rdi_1;\n            c = temp0_1 < temp1_1;\n            z = temp0_1 == temp1_1;\n            rsi_1 = &rsi_1[1];\n            rdi_1 = (rdi_1 + 1);\n            rcx_1 = (rcx_1 - 1);\n            if ((!z))\n            {\n                break;\n            }\n        }\n        rcx_1 = ((!z) && (!c));\n        rcx_1 = (rcx_1 - 0);\n        rax_1 = 0;\n        bool c_1 = false;\n        bool z_1 = (rcx_1 & rcx_1) == 0;\n        if ((!z_1))\n        {\n            void* const rdi_2 = \"POSIX\";\n            int64_t rcx_2 = 6;\n            char* rsi_2 = rax;\n            while (rcx_2 != 0)\n            {\n                char temp2_1 = *rsi_2;\n                char temp3_1 = *rdi_2;\n                c_1 = temp2_1 < temp3_1;\n                z_1 = temp2_1 == temp3_1;\n                rsi_2 = &rsi_2[1];\n                rdi_2 = (rdi_2 + 1);\n                rcx_2 = (rcx_2 - 1);\n                if ((!z_1))\n                {\n                    break;\n                }\n            }\n            rax_1 = ((!z_1) && (!c_1));\n            rax_1 = (rax_1 - 0);\n            rax_1 = rax_1 != 0;\n            return rax_1;\n        }\n    }\n    return rax_1;\n}\n\n"
        },
        {
            "funcName": "sub_408610",
            "funcStartAddr": "0x408610",
            "funcEndAddr": "0x4086a3",
            "decompiledFuncCode": "int64_t sub_408610(int64_t arg1)\n{\n    int64_t rsi = 0xa;\n    if (arg1 >= 0xa)\n    {\n        rsi = arg1;\n    }\n    int64_t rsi_1 = (rsi | 1);\n    if (rsi_1 != -1)\n    {\n        do\n        {\n            int64_t rax_2;\n            int64_t rdx_1;\n            rdx_1 = HIGHD((rsi_1 * -0x5555555555555555));\n            rax_2 = LOWD((rsi_1 * -0x5555555555555555));\n            uint64_t rcx_2 = (rsi_1 - ((rdx_1 >> 1) * 3));\n            uint64_t rax_6 = rcx_2;\n            int64_t rdi;\n            if ((rsi_1 > 9 && rcx_2 != 0))\n            {\n                int64_t r8_1 = 0x10;\n                rdi = 9;\n                int64_t rcx_3 = 3;\n                uint64_t temp1_1;\n                do\n                {\n                    rcx_3 = (rcx_3 + 2);\n                    rdi = (rdi + r8_1);\n                    temp1_1 = (COMBINE(0, rsi_1) % rcx_3);\n                    rax_6 = temp1_1;\n                    if (rdi >= rsi_1)\n                    {\n                        break;\n                    }\n                    r8_1 = (r8_1 + 8);\n                } while (temp1_1 != 0);\n            }\n            if (((rsi_1 <= 9 || ((rsi_1 > 9 && rcx_2 != 0) && rdi >= rsi_1)) && rax_6 != 0))\n            {\n                break;\n            }\n            rsi_1 = (rsi_1 + 2);\n        } while (rsi_1 != -1);\n    }\n    return rsi_1;\n}\n\n"
        },
        {
            "funcName": "sub_4086b0",
            "funcStartAddr": "0x4086b0",
            "funcEndAddr": "0x4086c0",
            "decompiledFuncCode": "uint64_t sub_4086b0(int64_t arg1, int64_t arg2)\n{\n    return (COMBINE(0, (RORQ(arg1, 3))) % arg2);\n}\n\n"
        },
        {
            "funcName": "sub_4086c0",
            "funcStartAddr": "0x4086c0",
            "funcEndAddr": "0x4086c7",
            "decompiledFuncCode": "int64_t sub_4086c0(int64_t arg1, int64_t arg2)\n{\n    int64_t rax;\n    rax = arg1 == arg2;\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_4086d0",
            "funcStartAddr": "0x401d83",
            "funcEndAddr": "0x4086f1",
            "decompiledFuncCode": "int64_t sub_4086d0(void* arg1, int64_t arg2)\n{\n    int64_t rax = *(arg1 + 0x30)(arg2, *(arg1 + 0x10));\n    if (*(arg1 + 0x10) <= rax)\n    {\n        abort();\n        /* no return */\n    }\n    return ((rax << 4) + *arg1);\n}\n\n"
        },
        {
            "funcName": "sub_408700",
            "funcStartAddr": "0x408700",
            "funcEndAddr": "0x408819",
            "decompiledFuncCode": "int64_t sub_408700(void* arg1, int64_t arg2, int64_t* arg3, char arg4)\n{\n    int64_t* rax = sub_4086d0(arg1, arg2);\n    *arg3 = rax;\n    int64_t rsi = *rax;\n    if (rsi != 0)\n    {\n        int64_t* rbx_1 = rax;\n        char rax_1;\n        if (rsi != arg2)\n        {\n            rax_1 = *(arg1 + 0x38)(arg2, rsi);\n            if (rax_1 != 0)\n            {\n                rsi = *rbx_1;\n            }\n            else\n            {\n                int64_t* rax_2 = rbx_1[1];\n                if (rax_2 != 0)\n                {\n                    rsi = *rax_2;\n                    if (arg2 != rsi)\n                    {\n                        do\n                        {\n                            if (*(arg1 + 0x38)(arg2, rsi) != 0)\n                            {\n                                rax_2 = rbx_1[1];\n                                rsi = *rax_2;\n                                break;\n                            }\n                            rbx_1 = rbx_1[1];\n                            rax_2 = rbx_1[1];\n                            if (rax_2 == 0)\n                            {\n                                return 0;\n                            }\n                            rsi = *rax_2;\n                        } while (rsi != arg2);\n                    }\n                    if (arg4 != 0)\n                    {\n                        rbx_1[1] = rax_2[1];\n                        *rax_2 = 0;\n                        rax_2[1] = *(arg1 + 0x48);\n                        *(arg1 + 0x48) = rax_2;\n                    }\n                    goto label_4087b9;\n                }\n            }\n        }\n        if (((rsi != arg2 && rax_1 != 0) || rsi == arg2))\n        {\n            if (arg4 == 0)\n            {\n            label_4087b9:\n                return rsi;\n            }\n            int128_t* rax_5 = rbx_1[1];\n            if (rax_5 != 0)\n            {\n                *rbx_1 = *rax_5;\n                *rax_5 = 0;\n                *(rax_5 + 8) = *(arg1 + 0x48);\n                *(arg1 + 0x48) = rax_5;\n                return rsi;\n            }\n            *rbx_1 = 0;\n            goto label_4087b9;\n        }\n    }\n    return 0;\n}\n\n"
        },
        {
            "funcName": "sub_408820",
            "funcStartAddr": "0x408820",
            "funcEndAddr": "0x40889e",
            "decompiledFuncCode": "int64_t sub_408820(int64_t* arg1)\n{\n    int32_t* rax_3 = *arg1;\n    if (rax_3 != 0x40c1a0)\n    {\n        int32_t zmm0 = rax_3[2];\n        if (((zmm0 == 0.100000001f | (FCMP_UO(zmm0, 0.100000001f))) || (zmm0 < 0.100000001f | (FCMP_UO(zmm0, 0.100000001f)))))\n        {\n        label_40888a:\n            *arg1 = 0x40c1a0;\n            return 0;\n        }\n        if (((0.899999976f == zmm0 | (FCMP_UO(0.899999976f, zmm0))) || (0.899999976f < zmm0 | (FCMP_UO(0.899999976f, zmm0)))))\n        {\n            goto label_40888a;\n        }\n        float zmm1 = rax_3[3];\n        if (((zmm1 == 1.10000002f | (FCMP_UO(zmm1, 1.10000002f))) || (zmm1 < 1.10000002f | (FCMP_UO(zmm1, 1.10000002f)))))\n        {\n            goto label_40888a;\n        }\n        zmm1 = *rax_3;\n        if ((zmm1 < 0f | (FCMP_UO(zmm1, 0f))))\n        {\n            goto label_40888a;\n        }\n        zmm1 = (zmm1 + 0.100000001f);\n        int32_t zmm2 = rax_3[1];\n        if (((zmm2 == zmm1 | (FCMP_UO(zmm2, zmm1))) || (zmm2 < zmm1 | (FCMP_UO(zmm2, zmm1)))))\n        {\n            goto label_40888a;\n        }\n        int512_t zmm3;\n        zmm3 = 0x3f800000;\n        if ((1f < zmm2 | (FCMP_UO(1f, zmm2))))\n        {\n            goto label_40888a;\n        }\n        if ((!((!(zmm0 == zmm1 | (FCMP_UO(zmm0, zmm1)))) && (!(zmm0 < zmm1 | (FCMP_UO(zmm0, zmm1)))))))\n        {\n            goto label_40888a;\n        }\n    }\n    return 1;\n}\n\n"
        },
        {
            "funcName": "sub_4088a0",
            "funcStartAddr": "0x4088a0",
            "funcEndAddr": "0x4089ea",
            "decompiledFuncCode": "int64_t sub_4088a0(void* arg1, int64_t* arg2, char arg3)\n{\n    int64_t* r12 = *arg2;\n    if (r12 < arg2[1])\n    {\n        do\n        {\n            int64_t r15_2 = *r12;\n            if (r15_2 != 0)\n            {\n                int64_t* rbx_1 = r12[1];\n                if (rbx_1 != 0)\n                {\n                    while (true)\n                    {\n                        int64_t r15_1 = *rbx_1;\n                        int64_t* rax_1 = sub_4086d0(arg1, r15_1);\n                        int64_t* rdx = rbx_1[1];\n                        if (*rax_1 != 0)\n                        {\n                            rbx_1[1] = rax_1[1];\n                            rax_1[1] = rbx_1;\n                            rbx_1 = rdx;\n                            if (rdx == 0)\n                            {\n                                break;\n                            }\n                        }\n                        else\n                        {\n                            *rax_1 = r15_1;\n                            *(arg1 + 0x18) = (*(arg1 + 0x18) + 1);\n                            *rbx_1 = 0;\n                            rbx_1[1] = *(arg1 + 0x48);\n                            *(arg1 + 0x48) = rbx_1;\n                            rbx_1 = rdx;\n                            if (rdx == 0)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    r15_2 = *r12;\n                }\n                r12[1] = 0;\n                if (arg3 == 0)\n                {\n                    int64_t* rax_3 = sub_4086d0(arg1, r15_2);\n                    if (*rax_3 == 0)\n                    {\n                        *rax_3 = r15_2;\n                        *(arg1 + 0x18) = (*(arg1 + 0x18) + 1);\n                    }\n                    else\n                    {\n                        int64_t* rax_4 = *(arg1 + 0x48);\n                        if (rax_4 != 0)\n                        {\n                            *(arg1 + 0x48) = rax_4[1];\n                        }\n                        else\n                        {\n                            rax_4 = malloc(0x10);\n                            if (rax_4 == 0)\n                            {\n                                return 0;\n                            }\n                        }\n                        int64_t rdx_2 = rax_3[1];\n                        *rax_4 = r15_2;\n                        rax_4[1] = rdx_2;\n                        rax_3[1] = rax_4;\n                    }\n                    *r12 = 0;\n                    r12 = &r12[2];\n                    arg2[3] = (arg2[3] - 1);\n                    if (arg2[1] <= r12)\n                    {\n                        break;\n                    }\n                    continue;\n                }\n            }\n            r12 = &r12[2];\n        } while (arg2[1] > r12);\n    }\n    return 1;\n}\n\n"
        },
        {
            "funcName": "sub_4089f0",
            "funcStartAddr": "0x4089f0",
            "funcEndAddr": "0x4089f5",
            "decompiledFuncCode": "int64_t sub_4089f0(void* arg1)\n{\n    return *(arg1 + 0x10);\n}\n\n"
        },
        {
            "funcName": "sub_408a00",
            "funcStartAddr": "0x408a00",
            "funcEndAddr": "0x408a05",
            "decompiledFuncCode": "int64_t sub_408a00(void* arg1)\n{\n    return *(arg1 + 0x18);\n}\n\n"
        },
        {
            "funcName": "sub_408a10",
            "funcStartAddr": "0x408a10",
            "funcEndAddr": "0x408a15",
            "decompiledFuncCode": "int64_t sub_408a10(void* arg1)\n{\n    return *(arg1 + 0x20);\n}\n\n"
        },
        {
            "funcName": "sub_408a20",
            "funcStartAddr": "0x408a20",
            "funcEndAddr": "0x408a6f",
            "decompiledFuncCode": "int64_t sub_408a20(int64_t* arg1)\n{\n    int64_t* rsi = *arg1;\n    int64_t rdi = arg1[1];\n    int64_t rax = 0;\n    if (rsi >= rdi)\n    {\n        return 0;\n    }\n    while (true)\n    {\n        if (*rsi == 0)\n        {\n            rsi = &rsi[2];\n            if (rsi >= rdi)\n            {\n                break;\n            }\n        }\n        else\n        {\n            void* rdx_1 = rsi[1];\n            int64_t rcx_1 = 1;\n            if (rdx_1 != 0)\n            {\n                do\n                {\n                    rdx_1 = *(rdx_1 + 8);\n                    rcx_1 = (rcx_1 + 1);\n                } while (rdx_1 != 0);\n            }\n            if (rax < rcx_1)\n            {\n                rax = rcx_1;\n            }\n            rsi = &rsi[2];\n            if (rsi >= rdi)\n            {\n                break;\n            }\n        }\n    }\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_408a70",
            "funcStartAddr": "0x408a70",
            "funcEndAddr": "0x408ad7",
            "decompiledFuncCode": "int64_t sub_408a70(int64_t* arg1)\n{\n    int64_t* rcx = *arg1;\n    int64_t rsi = arg1[1];\n    int64_t rdx = 0;\n    int64_t r8 = 0;\n    if (rcx < rsi)\n    {\n        do\n        {\n            if (*rcx != 0)\n            {\n                void* rax_1 = rcx[1];\n                r8 = (r8 + 1);\n                rdx = (rdx + 1);\n                if (rax_1 != 0)\n                {\n                    do\n                    {\n                        rax_1 = *(rax_1 + 8);\n                        rdx = (rdx + 1);\n                    } while (rax_1 != 0);\n                    rcx = &rcx[2];\n                    if (rcx >= rsi)\n                    {\n                        break;\n                    }\n                    continue;\n                }\n            }\n            rcx = &rcx[2];\n        } while (rcx < rsi);\n    }\n    if (arg1[3] == r8)\n    {\n        int64_t rax_2;\n        rax_2 = arg1[4] == rdx;\n        return rax_2;\n    }\n    return 0;\n}\n\n"
        },
        {
            "funcName": "sub_408ae0",
            "funcStartAddr": "0x408ae0",
            "funcEndAddr": "0x408c28",
            "decompiledFuncCode": "int64_t sub_408ae0(int64_t* arg1, FILE* arg2)\n{\n    int64_t rbx = 0;\n    int64_t r12 = arg1[2];\n    int64_t r13 = arg1[3];\n    int64_t* rsi = *arg1;\n    int64_t rdi = arg1[1];\n    if (rsi < rdi)\n    {\n        while (true)\n        {\n            if (*rsi == 0)\n            {\n                rsi = &rsi[2];\n                if (rsi >= rdi)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                void* rax_1 = rsi[1];\n                int64_t rdx_1 = 1;\n                if (rax_1 != 0)\n                {\n                    do\n                    {\n                        rax_1 = *(rax_1 + 8);\n                        rdx_1 = (rdx_1 + 1);\n                    } while (rax_1 != 0);\n                }\n                if (rbx < rdx_1)\n                {\n                    rbx = rdx_1;\n                }\n                rsi = &rsi[2];\n                if (rsi >= rdi)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    __fprintf_chk(arg2, 1, \"# entries:         %lu\\n\");\n    __fprintf_chk(arg2, 1, \"# buckets:         %lu\\n\", r12);\n    __fprintf_chk(arg2, 1, \"# buckets used:    %lu (%.2f%%)\\n\", r13);\n    /* tailcall */\n    return __fprintf_chk(arg2, 1, \"max bucket length: %lu\\n\", rbx);\n}\n\n"
        },
        {
            "funcName": "sub_408c30",
            "funcStartAddr": "0x408c30",
            "funcEndAddr": "0x408c83",
            "decompiledFuncCode": "int64_t sub_408c30(void* arg1, int64_t arg2)\n{\n    int64_t rbp = arg2;\n    int64_t* rax = sub_4086d0(arg1, arg2);\n    int64_t rsi = *rax;\n    if (rsi != 0)\n    {\n        int64_t* rbx_1 = rax;\n        while (true)\n        {\n            if (rsi != rbp)\n            {\n                if (*(arg1 + 0x38)(rbp, rsi) != 0)\n                {\n                    rbp = *rbx_1;\n                }\n                else\n                {\n                    rbx_1 = rbx_1[1];\n                    if (rbx_1 == 0)\n                    {\n                        break;\n                    }\n                    rsi = *rbx_1;\n                    continue;\n                }\n            }\n            return rbp;\n        }\n    }\n    return 0;\n}\n\n"
        },
        {
            "funcName": "sub_408c90",
            "funcStartAddr": "0x401d88",
            "funcEndAddr": "0x408cd8",
            "decompiledFuncCode": "int64_t sub_408c90(int64_t* arg1)\n{\n    if (arg1[4] == 0)\n    {\n        return 0;\n    }\n    int64_t* rdx = *arg1;\n    int64_t rcx = arg1[1];\n    if (rdx < rcx)\n    {\n        do\n        {\n            int64_t rax_1 = *rdx;\n            if (rax_1 != 0)\n            {\n                return rax_1;\n            }\n            rdx = &rdx[2];\n        } while (rdx < rcx);\n    }\n    abort();\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_408ce0",
            "funcStartAddr": "0x408ce0",
            "funcEndAddr": "0x408d4a",
            "decompiledFuncCode": "int64_t sub_408ce0(void* arg1, int64_t arg2)\n{\n    int64_t* rax = sub_4086d0(arg1, arg2);\n    int64_t* rcx = rax;\n    int64_t* rdx = rax;\n    do\n    {\n        int64_t rax_1 = *rdx;\n        rdx = rdx[1];\n        if (rax_1 == arg2)\n        {\n            if (rdx != 0)\n            {\n                return *rdx;\n            }\n            break;\n        }\n    } while (rdx != 0);\n    int64_t rdx_1 = *(arg1 + 8);\n    int64_t rax_2;\n    do\n    {\n        rcx = &rcx[2];\n        if (rdx_1 <= rcx)\n        {\n            rax_2 = 0;\n            break;\n        }\n        rax_2 = *rcx;\n    } while (rax_2 == 0);\n    return rax_2;\n}\n\n"
        },
        {
            "funcName": "sub_408d50",
            "funcStartAddr": "0x408d50",
            "funcEndAddr": "0x408db4",
            "decompiledFuncCode": "int64_t sub_408d50(int64_t* arg1, int64_t arg2, int64_t arg3)\n{\n    int64_t* rdx = *arg1;\n    if (arg1[1] <= rdx)\n    {\n        return 0;\n    }\n    int64_t r9 = 0;\n    do\n    {\n        int64_t r8_1 = *rdx;\n        if (r8_1 != 0)\n        {\n            if (arg3 <= r9)\n            {\n                break;\n            }\n            *(arg2 + (r9 << 3)) = r8_1;\n            int64_t* r8_2 = rdx[1];\n            int64_t rcx_1 = (r9 + 1);\n            if (r8_2 != 0)\n            {\n                do\n                {\n                    if (arg3 == rcx_1)\n                    {\n                        return arg3;\n                    }\n                    rcx_1 = (rcx_1 + 1);\n                    *((arg2 + (rcx_1 << 3)) - 8) = *r8_2;\n                    r8_2 = r8_2[1];\n                } while (r8_2 != 0);\n            }\n            r9 = rcx_1;\n        }\n        rdx = &rdx[2];\n    } while (arg1[1] > rdx);\n    return r9;\n}\n\n"
        },
        {
            "funcName": "sub_408dc0",
            "funcStartAddr": "0x408dc0",
            "funcEndAddr": "0x408e38",
            "decompiledFuncCode": "int64_t sub_408dc0(int64_t* arg1, int64_t arg2, int64_t arg3)\n{\n    int64_t* r14 = *arg1;\n    int64_t rbp;\n    if (arg1[1] <= r14)\n    {\n        rbp = 0;\n    }\n    else\n    {\n        rbp = 0;\n        do\n        {\n            int64_t rdi = *r14;\n            if (rdi != 0)\n            {\n                int64_t* rbx_1 = r14;\n                while (true)\n                {\n                    if (arg2(rdi, arg3) == 0)\n                    {\n                        return rbp;\n                    }\n                    rbx_1 = rbx_1[1];\n                    rbp = (rbp + 1);\n                    if (rbx_1 == 0)\n                    {\n                        break;\n                    }\n                    rdi = *rbx_1;\n                }\n            }\n            r14 = &r14[2];\n        } while (arg1[1] > r14);\n    }\n    return rbp;\n}\n\n"
        },
        {
            "funcName": "sub_408e40",
            "funcStartAddr": "0x408e40",
            "funcEndAddr": "0x408e71",
            "decompiledFuncCode": "uint64_t sub_408e40(char* arg1, int64_t arg2)\n{\n    uint64_t rcx = *arg1;\n    uint64_t rdx = 0;\n    if (rcx != 0)\n    {\n        do\n        {\n            arg1 = &arg1[1];\n            int64_t rax_4 = (((rdx << 5) - rdx) + rcx);\n            rcx = *arg1;\n            rdx = (COMBINE(0, rax_4) % arg2);\n        } while (rcx != 0);\n    }\n    return rdx;\n}\n\n"
        },
        {
            "funcName": "sub_408e80",
            "funcStartAddr": "0x408e80",
            "funcEndAddr": "0x408ea0",
            "decompiledFuncCode": "void sub_408e80(int64_t* arg1)\n{\n    arg1[2] = 0;\n    *arg1 = 0x3f80000000000000;\n    arg1[1] = 0x3fb4fdf43f4ccccd;\n}\n\n"
        },
        {
            "funcName": "sub_408ea0",
            "funcStartAddr": "0x408ea0",
            "funcEndAddr": "0x40902a",
            "decompiledFuncCode": "int64_t* sub_408ea0(int64_t arg1, void* arg2, int64_t arg3, int64_t arg4, \n    int64_t arg5)\n{\n    int64_t r13 = arg4;\n    int64_t r12 = arg3;\n    int64_t rbp = arg1;\n    if (arg3 == 0)\n    {\n        r12 = 0x4086b0;\n    }\n    if (arg4 == 0)\n    {\n        r13 = 0x4086c0;\n    }\n    int64_t* rax = malloc(0x50);\n    int64_t* rbx = rax;\n    if (rax != 0)\n    {\n        int64_t* rdi = &rax[5];\n        float zmm1_1;\n        if (arg2 == 0)\n        {\n            rax[5] = 0x40c1a0;\n            zmm1_1 = 0.800000012f;\n            if (sub_408820(rdi) != 0)\n            {\n                float zmm0_1;\n                if (rbp < 0)\n                {\n                label_409013:\n                    zmm0_1 = ((rbp >> 1) | (rbp & 1));\n                    zmm0_1 = (zmm0_1 + zmm0_1);\n                label_408fc7:\n                    zmm0_1 = (zmm0_1 / zmm1_1);\n                    if ((!(zmm0_1 < 1.84467441e+19f | (FCMP_UO(zmm0_1, 1.84467441e+19f)))))\n                    {\n                        goto label_408f80;\n                    }\n                    if ((zmm0_1 < 9.22337204e+18f | (FCMP_UO(zmm0_1, 9.22337204e+18f))))\n                    {\n                        rbp = (truncf(zmm0_1, arg4));\n                    }\n                    else\n                    {\n                        zmm0_1 = (zmm0_1 - 9.22337204e+18f);\n                        rbp = ((truncf(zmm0_1, arg4)) ^ 0x8000000000000000);\n                    }\n                    goto label_408f13;\n                }\n            label_408fc2:\n                zmm0_1 = rbp;\n                goto label_408fc7;\n            }\n        label_408f80:\n            int64_t* rdi_3 = rbx;\n            rbx = nullptr;\n            free(rdi_3);\n        }\n        else\n        {\n            rax[5] = arg2;\n            if (sub_408820(rdi) == 0)\n            {\n                goto label_408f80;\n            }\n            if (*(arg2 + 0x10) == 0)\n            {\n                zmm1_1 = *(arg2 + 8);\n                if (rbp < 0)\n                {\n                    goto label_409013;\n                }\n                goto label_408fc2;\n            }\n        label_408f13:\n            size_t rax_2 = sub_408610(rbp);\n            uint64_t rax_3;\n            rax_3 = (rax_2 >> 0x3d) != 0;\n            uint64_t rax_4 = rax_3;\n            if ((TEST_BITQ(rax_2, 0x3c)))\n            {\n                goto label_408f80;\n            }\n            if (rax_4 != 0)\n            {\n                goto label_408f80;\n            }\n            rbx[2] = rax_2;\n            if (rax_2 == 0)\n            {\n                goto label_408f80;\n            }\n            int64_t rax_5 = calloc(rax_2, 0x10);\n            *rbx = rax_5;\n            if (rax_5 == 0)\n            {\n                goto label_408f80;\n            }\n            rbx[3] = 0;\n            rbx[4] = 0;\n            rbx[1] = ((rax_2 << 4) + rax_5);\n            rbx[6] = r12;\n            rbx[7] = r13;\n            rbx[8] = arg5;\n            rbx[9] = 0;\n        }\n    }\n    return rbx;\n}\n\n"
        },
        {
            "funcName": "sub_409030",
            "funcStartAddr": "0x409030",
            "funcEndAddr": "0x4090d8",
            "decompiledFuncCode": "void sub_409030(int64_t* arg1)\n{\n    int64_t* r12 = *arg1;\n    if (r12 < arg1[1])\n    {\n        while (true)\n        {\n            if (*r12 == 0)\n            {\n                r12 = &r12[2];\n                if (arg1[1] <= r12)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                int64_t* rbx_1 = r12[1];\n                int64_t rax = arg1[8];\n                if (rbx_1 != 0)\n                {\n                    int64_t* rdx_1;\n                    do\n                    {\n                        if (rax != 0)\n                        {\n                            rax(*rbx_1);\n                            rax = arg1[8];\n                        }\n                        rdx_1 = rbx_1[1];\n                        int64_t rcx_1 = arg1[9];\n                        *rbx_1 = 0;\n                        rbx_1[1] = rcx_1;\n                        arg1[9] = rbx_1;\n                        rbx_1 = rdx_1;\n                    } while (rdx_1 != 0);\n                }\n                if (rax != 0)\n                {\n                    rax(*r12);\n                }\n                *r12 = 0;\n                r12 = &r12[2];\n                r12[-1] = 0;\n                if (arg1[1] <= r12)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    arg1[3] = 0;\n    arg1[4] = 0;\n}\n\n"
        },
        {
            "funcName": "sub_4090e0",
            "funcStartAddr": "0x4090e0",
            "funcEndAddr": "0x4091b6",
            "decompiledFuncCode": "int64_t sub_4090e0(int64_t* arg1)\n{\n    int64_t* rbp = *arg1;\n    int64_t rax = arg1[1];\n    if (((arg1[8] != 0 && arg1[4] != 0) && rbp < rax))\n    {\n        while (true)\n        {\n            int64_t rdi = *rbp;\n            if (rdi == 0)\n            {\n                rbp = &rbp[2];\n                if (rax <= rbp)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                int64_t* rbx_1 = rbp;\n                while (true)\n                {\n                    arg1[8](rdi);\n                    rbx_1 = rbx_1[1];\n                    if (rbx_1 == 0)\n                    {\n                        break;\n                    }\n                    rdi = *rbx_1;\n                }\n                rax = arg1[1];\n                rbp = &rbp[2];\n                if (rax <= rbp)\n                {\n                    break;\n                }\n            }\n        }\n        rbp = *arg1;\n    }\n    if ((((arg1[8] == 0 || (arg1[8] != 0 && arg1[4] == 0)) || ((arg1[8] != 0 && arg1[4] != 0) && rbp < rax)) && rbp < rax))\n    {\n        do\n        {\n            void* rdi_1 = rbp[1];\n            if (rdi_1 != 0)\n            {\n                void* rbx_2;\n                do\n                {\n                    rbx_2 = *(rdi_1 + 8);\n                    free(rdi_1);\n                    rdi_1 = rbx_2;\n                } while (rbx_2 != 0);\n            }\n            rbp = &rbp[2];\n        } while (arg1[1] > rbp);\n    }\n    void* rdi_2 = arg1[9];\n    if (rdi_2 != 0)\n    {\n        void* rbx_3;\n        do\n        {\n            rbx_3 = *(rdi_2 + 8);\n            free(rdi_2);\n            rdi_2 = rbx_3;\n        } while (rbx_3 != 0);\n    }\n    free(*arg1);\n    /* tailcall */\n    return free(arg1);\n}\n\n"
        },
        {
            "funcName": "sub_4091c0",
            "funcStartAddr": "0x401d8d",
            "funcEndAddr": "0x4093ba",
            "decompiledFuncCode": "uint64_t sub_4091c0(int64_t* arg1, int64_t arg2)\n{\n    void* r12 = arg1[5];\n    int32_t rbx_4;\n    if (*(r12 + 0x10) == 0)\n    {\n        float zmm0;\n        if (arg2 < 0)\n        {\n            zmm0 = ((arg2 >> 1) | (arg2 & 1));\n            zmm0 = (zmm0 + zmm0);\n        }\n        else\n        {\n            zmm0 = arg2;\n        }\n        zmm0 = (zmm0 / *(r12 + 8));\n        if ((!(zmm0 < 1.84467441e+19f | (FCMP_UO(zmm0, 1.84467441e+19f)))))\n        {\n        label_409330:\n            rbx_4 = 0;\n        label_40933c:\n            return rbx_4;\n        }\n        if ((zmm0 < 9.22337204e+18f | (FCMP_UO(zmm0, 9.22337204e+18f))))\n        {\n            arg2 = (truncf(zmm0, 0x28));\n        }\n        else\n        {\n            zmm0 = (zmm0 - 9.22337204e+18f);\n            arg2 = ((truncf(zmm0, 0x28)) ^ 0x8000000000000000);\n        }\n    }\n    size_t rax_1 = sub_408610(arg2);\n    uint64_t rax_2;\n    rax_2 = (rax_1 >> 0x3d) != 0;\n    uint64_t rax_3 = rax_2;\n    if ((rax_1 << 3) < 0)\n    {\n        rax_3 = 1;\n    }\n    if (rax_1 == 0)\n    {\n        goto label_409330;\n    }\n    if (rax_3 != 0)\n    {\n        goto label_409330;\n    }\n    if (arg1[2] == rax_1)\n    {\n        return 1;\n    }\n    int64_t rax_4 = calloc(rax_1, 0x10);\n    int64_t var_68 = rax_4;\n    if (rax_4 == 0)\n    {\n        goto label_409330;\n    }\n    int64_t rbx_3 = ((rax_1 << 4) + rax_4);\n    int64_t var_38_1 = arg1[6];\n    int64_t var_48_1 = 0;\n    int64_t var_30_1 = arg1[7];\n    void* var_40_1 = r12;\n    int64_t var_28_1 = arg1[8];\n    int64_t rax_8 = arg1[9];\n    int32_t rax_9 = sub_4088a0(&var_68, arg1, 0);\n    rbx_4 = rax_9;\n    if (rax_9 == 0)\n    {\n        arg1[9] = rax_8;\n        if ((sub_4088a0(arg1, &var_68, 1) != 0 && sub_4088a0(arg1, &var_68, 0) != 0))\n        {\n            free(var_68);\n            return rbx_4;\n        }\n        abort();\n        /* no return */\n    }\n    free(*arg1);\n    *arg1 = var_68;\n    arg1[1] = rbx_3;\n    arg1[2] = rax_1;\n    arg1[3] = 0;\n    arg1[9] = rax_8;\n    goto label_40933c;\n}\n\n"
        },
        {
            "funcName": "sub_4093c0",
            "funcStartAddr": "0x401d92",
            "funcEndAddr": "0x409634",
            "decompiledFuncCode": "int64_t sub_4093c0(int64_t* arg1, int64_t arg2, int64_t* arg3)\n{\n    if (arg2 != 0)\n    {\n        int64_t* var_20;\n        int64_t rax_1 = sub_408700(arg1, arg2, &var_20, 0);\n        if (rax_1 != 0)\n        {\n            if (arg3 != 0)\n            {\n                *arg3 = rax_1;\n            }\n            return 0;\n        }\n        int64_t rax_3 = arg1[3];\n        int64_t rax_4;\n        void* rdx_2;\n        float zmm1;\n        if (rax_3 < 0)\n        {\n            rax_4 = arg1[2];\n            zmm1 = ((rax_3 >> 1) | (rax_3 & 1));\n            rdx_2 = arg1[5];\n            zmm1 = (zmm1 + zmm1);\n        }\n        else\n        {\n            rdx_2 = arg1[5];\n            zmm1 = rax_3;\n            rax_4 = arg1[2];\n        }\n        float zmm0_1;\n        if (((rax_3 < 0 && rax_4 >= 0) || (rax_3 >= 0 && rax_4 >= 0)))\n        {\n            zmm0_1 = (rax_4 * *(rdx_2 + 8));\n            if ((!((!(zmm1 == zmm0_1 | (FCMP_UO(zmm1, zmm0_1)))) && (!(zmm1 < zmm0_1 | (FCMP_UO(zmm1, zmm0_1)))))))\n            {\n            label_409442:\n                int64_t* r12_2 = var_20;\n                if (*r12_2 == 0)\n                {\n                    *r12_2 = arg2;\n                    arg1[4] = (arg1[4] + 1);\n                    arg1[3] = (arg1[3] + 1);\n                    return 1;\n                }\n                int64_t* rax_5 = arg1[9];\n                if (rax_5 == 0)\n                {\n                    rax_5 = malloc(0x10);\n                }\n                else\n                {\n                    arg1[9] = rax_5[1];\n                }\n                int64_t rdx_4 = r12_2[1];\n                *rax_5 = arg2;\n                rax_5[1] = rdx_4;\n                r12_2[1] = rax_5;\n                arg1[4] = (arg1[4] + 1);\n                return 1;\n                goto label_409554;\n            }\n        label_4094e5:\n            sub_408820(&arg1[5]);\n            void* rdx_8 = arg1[5];\n            int64_t rax_9 = arg1[2];\n            float zmm2_1 = *(rdx_8 + 8);\n            float zmm0_2;\n            if (rax_9 < 0)\n            {\n                zmm0_2 = ((rax_9 >> 1) | (rax_9 & 1));\n                zmm0_2 = (zmm0_2 + zmm0_2);\n            }\n            else\n            {\n                zmm0_2 = rax_9;\n            }\n            int64_t rax_10 = arg1[3];\n            float zmm1_1;\n            if (rax_10 < 0)\n            {\n                zmm1_1 = ((rax_10 >> 1) | (rax_10 & 1));\n                zmm1_1 = (zmm1_1 + zmm1_1);\n            }\n            else\n            {\n                zmm1_1 = rax_10;\n            }\n            float zmm3_1 = (zmm2_1 * zmm0_2);\n            if (((zmm1_1 == zmm3_1 | (FCMP_UO(zmm1_1, zmm3_1))) || (zmm1_1 < zmm3_1 | (FCMP_UO(zmm1_1, zmm3_1)))))\n            {\n                goto label_409442;\n            }\n            zmm0_2 = (zmm0_2 * *(rdx_8 + 0xc));\n            if (*(rdx_8 + 0x10) == 0)\n            {\n                zmm0_2 = (zmm0_2 * zmm2_1);\n            }\n            if ((!(zmm0_2 < 1.84467441e+19f | (FCMP_UO(zmm0_2, 1.84467441e+19f)))))\n            {\n            label_409554:\n                return 0xffffffff;\n            }\n            int64_t rsi;\n            if ((!(zmm0_2 < 9.22337204e+18f | (FCMP_UO(zmm0_2, 9.22337204e+18f)))))\n            {\n                zmm0_2 = (zmm0_2 - 9.22337204e+18f);\n                rsi = ((truncf(zmm0_2, arg1)) ^ 0x8000000000000000);\n            }\n            else\n            {\n                rsi = (truncf(zmm0_2, arg1));\n            }\n            if (sub_4091c0(arg1, rsi) == 0)\n            {\n                goto label_409554;\n            }\n            if (sub_408700(arg1, arg2, &var_20, 0) == 0)\n            {\n                goto label_409442;\n            }\n        }\n        if (((rax_3 < 0 && rax_4 < 0) || (rax_3 >= 0 && rax_4 < 0)))\n        {\n            zmm0_1 = ((rax_4 >> 1) | (rax_4 & 1));\n            zmm0_1 = (zmm0_1 + zmm0_1);\n            zmm0_1 = (zmm0_1 * *(rdx_2 + 8));\n            if ((!((zmm1 == zmm0_1 | (FCMP_UO(zmm1, zmm0_1))) || (zmm1 < zmm0_1 | (FCMP_UO(zmm1, zmm0_1))))))\n            {\n                goto label_4094e5;\n            }\n            goto label_409442;\n        }\n    }\n    abort();\n    /* no return */\n}\n\n"
        },
        {
            "funcName": "sub_409640",
            "funcStartAddr": "0x409640",
            "funcEndAddr": "0x40967b",
            "decompiledFuncCode": "int64_t sub_409640(int64_t* arg1, int64_t arg2)\n{\n    int64_t rbx = arg2;\n    int64_t var_10;\n    int32_t rax = sub_4093c0(arg1, arg2, &var_10);\n    if (rax == 0xffffffff)\n    {\n        return 0;\n    }\n    if (rax == 0)\n    {\n        rbx = var_10;\n    }\n    return rbx;\n}\n\n"
        },
        {
            "funcName": "sub_409680",
            "funcStartAddr": "0x409680",
            "funcEndAddr": "0x409857",
            "decompiledFuncCode": "int64_t sub_409680(int64_t* arg1)\n{\n    int64_t* var_20;\n    int64_t rsi;\n    int64_t rax = sub_408700(arg1, rsi, &var_20, 1);\n    if (rax != 0)\n    {\n        int64_t* rax_1 = var_20;\n        arg1[4] = (arg1[4] - 1);\n        if (*rax_1 == 0)\n        {\n            int64_t rax_3 = arg1[3];\n            int64_t rax_4 = (rax_3 - 1);\n            arg1[3] = rax_4;\n            int64_t rax_5;\n            float* rdx_1;\n            float zmm0_1;\n            if ((rax_3 - 1) < 0)\n            {\n                rax_5 = arg1[2];\n                zmm0_1 = ((rax_4 >> 1) | (rax_4 & 1));\n                rdx_1 = arg1[5];\n                zmm0_1 = (zmm0_1 + zmm0_1);\n            }\n            else\n            {\n                rdx_1 = arg1[5];\n                zmm0_1 = rax_4;\n                rax_5 = arg1[2];\n            }\n            float zmm1;\n            if ((((rax_3 - 1) < 0 && rax_5 >= 0) || ((rax_3 - 1) >= 0 && rax_5 >= 0)))\n            {\n                zmm1 = rax_5;\n            }\n            if ((((rax_3 - 1) < 0 && rax_5 < 0) || ((rax_3 - 1) >= 0 && rax_5 < 0)))\n            {\n                zmm1 = ((rax_5 >> 1) | (rax_5 & 1));\n                zmm1 = (zmm1 + zmm1);\n            }\n            zmm1 = (zmm1 * *rdx_1);\n            if ((!((zmm1 == zmm0_1 | (FCMP_UO(zmm1, zmm0_1))) || (zmm1 < zmm0_1 | (FCMP_UO(zmm1, zmm0_1))))))\n            {\n                sub_408820(&arg1[5]);\n                int64_t rax_6 = arg1[2];\n                int32_t* rdx_2 = arg1[5];\n                float zmm0_2;\n                if (rax_6 < 0)\n                {\n                    zmm0_2 = ((rax_6 >> 1) | (rax_6 & 1));\n                    zmm0_2 = (zmm0_2 + zmm0_2);\n                }\n                else\n                {\n                    zmm0_2 = rax_6;\n                }\n                int64_t rax_7 = arg1[3];\n                float zmm1_1;\n                if (rax_7 < 0)\n                {\n                    zmm1_1 = ((rax_7 >> 1) | (rax_7 & 1));\n                    zmm1_1 = (zmm1_1 + zmm1_1);\n                }\n                else\n                {\n                    zmm1_1 = rax_7;\n                }\n                float zmm2_1 = (*rdx_2 * zmm0_2);\n                if ((!((zmm2_1 == zmm1_1 | (FCMP_UO(zmm2_1, zmm1_1))) || (zmm2_1 < zmm1_1 | (FCMP_UO(zmm2_1, zmm1_1))))))\n                {\n                    zmm0_2 = (zmm0_2 * rdx_2[1]);\n                    if (rdx_2[4] == 0)\n                    {\n                        zmm0_2 = (zmm0_2 * rdx_2[2]);\n                    }\n                    int64_t rsi_1;\n                    if ((!(zmm0_2 < 9.22337204e+18f | (FCMP_UO(zmm0_2, 9.22337204e+18f)))))\n                    {\n                        zmm0_2 = (zmm0_2 - 9.22337204e+18f);\n                        rsi_1 = ((truncf(zmm0_2, arg1)) ^ 0x8000000000000000);\n                    }\n                    else\n                    {\n                        rsi_1 = (truncf(zmm0_2, arg1));\n                    }\n                    if (sub_4091c0(arg1, rsi_1) == 0)\n                    {\n                        void* rdi_2 = arg1[9];\n                        if (rdi_2 != 0)\n                        {\n                            void* r12_1;\n                            do\n                            {\n                                r12_1 = *(rdi_2 + 8);\n                                free(rdi_2);\n                                rdi_2 = r12_1;\n                            } while (r12_1 != 0);\n                        }\n                        arg1[9] = 0;\n                    }\n                }\n            }\n        }\n    }\n    return rax;\n}\n\n"
        },
        {
            "funcName": "sub_409860",
            "funcStartAddr": "0x409860",
            "funcEndAddr": "0x409dc2",
            "decompiledFuncCode": "char* sub_409860()\n{\n    char* rax = nl_langinfo(0xe);\n    char* r15 = data_60f4b8;\n    char* rbx = rax;\n    if (rax == 0)\n    {\n        rbx = &data_40c104[0x1b];\n    }\n    if (r15 == 0)\n    {\n        char* rax_6 = getenv(\"CHARSETALIASDIR\");\n        char* r13_1 = rax_6;\n        size_t rdi_7;\n        uint64_t r12_1;\n        uint64_t r14_1;\n        if ((rax_6 == 0 || (rax_6 != 0 && *rax_6 == 0)))\n        {\n            rdi_7 = 0x73;\n            r12_1 = 0x65;\n            r14_1 = 0x64;\n            r13_1 = \"/home/dongkwan/data/scripts/gnu_\u2026\";\n        }\n        char* rbp_3;\n        if ((rax_6 != 0 && *rax_6 != 0))\n        {\n            uint64_t rax_7 = strlen(rax_6);\n            r12_1 = rax_7;\n            r14_1 = rax_7;\n            size_t rdi_6;\n            if (rax_7 == 0)\n            {\n                rdi_6 = 0xe;\n            }\n            else if (r13_1[(rax_7 - 1)] != 0x2f)\n            {\n                rdi_7 = (rax_7 + 0xf);\n                r12_1 = (r12_1 + 1);\n            }\n            else\n            {\n                rdi_6 = (rax_7 + 0xe);\n            }\n            if ((rax_7 == 0 || (rax_7 != 0 && r13_1[(rax_7 - 1)] == 0x2f)))\n            {\n                char* rax_8 = malloc(rdi_6);\n                rbp_3 = rax_8;\n                if (rax_8 == 0)\n                {\n                    goto label_40995c;\n                }\n                memcpy(rbp_3, r13_1, r14_1);\n                goto label_4099a6;\n            }\n        }\n        char* rax_9 = malloc(rdi_7);\n        rbp_3 = rax_9;\n        if (rax_9 == 0)\n        {\n        label_40995c:\n            r15 = &data_40c104[0x1b];\n        }\n        else\n        {\n            memcpy(rbp_3, r13_1, r14_1);\n            rbp_3[r14_1] = 0x2f;\n        label_4099a6:\n            int64_t* r12_2 = &rbp_3[r12_1];\n            *r12_2 = 0x2e74657372616863;\n            *(r12_2 + 0xc) = 0x73;\n            r12_2[1] = 0x61696c61;\n            int32_t rax_11 = open(rbp_3, 0);\n            void* var_d0_1;\n            FILE* rax_12;\n            if (rax_11 >= 0)\n            {\n                r15 = nullptr;\n                rax_12 = fdopen(rax_11, \"r\");\n                var_d0_1 = nullptr;\n                if (rax_12 == 0)\n                {\n                    close(rax_11);\n                }\n                else\n                {\n                    while (true)\n                    {\n                        char* rax_14 = rax_12->_IO_read_ptr;\n                        uint32_t rdi_13;\n                        if (rax_14 < rax_12->_IO_read_end)\n                        {\n                            do\n                            {\n                                rax_12->_IO_read_ptr = &rax_14[1];\n                                rdi_13 = *rax_14;\n                            label_409a5c:\n                                if ((rdi_13 - 9) <= 1)\n                                {\n                                    break;\n                                }\n                                if (rdi_13 == 0x20)\n                                {\n                                    break;\n                                }\n                                if (rdi_13 == 0x23)\n                                {\n                                    break;\n                                }\n                                ungetc(rdi_13, rax_12);\n                                int64_t var_b8;\n                                int64_t var_78;\n                                if (fscanf(rax_12, \"%50s %50s\", &var_b8, &var_78) <= 1)\n                                {\n                                    goto label_409beb;\n                                }\n                                int64_t* rcx_2 = &var_b8;\n                            label_409a98:\n                                int32_t rdx_5 = *rcx_2;\n                                rcx_2 = (rcx_2 + 4);\n                                uint32_t rax_20 = (((rdx_5 - 0x1010101) & (!rdx_5)) & 0x80808080);\n                                if (rax_20 == 0)\n                                {\n                                    goto label_409a98;\n                                }\n                                uint32_t rdx_8 = (rax_20 >> 0x10);\n                                int32_t temp0_1 = (rax_20 & 0x8080);\n                                bool cond:2_1 = temp0_1 == 0;\n                                if (temp0_1 == 0)\n                                {\n                                    rax_20 = rdx_8;\n                                }\n                                void* rdx_9 = (rcx_2 + 2);\n                                if (cond:2_1)\n                                {\n                                    rcx_2 = rdx_9;\n                                }\n                                char rdx_10 = rax_20;\n                                int64_t* rdx_11 = &var_78;\n                                void* rcx_4 = ((rcx_2 - 3) - &var_b8);\n                            label_409ad2:\n                                int32_t rsi_5 = *rdx_11;\n                                rdx_11 = (rdx_11 + 4);\n                                uint32_t rax_23 = (((rsi_5 - 0x1010101) & (!rsi_5)) & 0x80808080);\n                                if (rax_23 == 0)\n                                {\n                                    goto label_409ad2;\n                                }\n                                uint32_t rsi_8 = (rax_23 >> 0x10);\n                                int32_t temp2_1 = (rax_23 & 0x8080);\n                                bool cond:3_1 = temp2_1 == 0;\n                                if (temp2_1 == 0)\n                                {\n                                    rax_23 = rsi_8;\n                                }\n                                void* rsi_9 = (rdx_11 + 2);\n                                if (cond:3_1)\n                                {\n                                    rdx_11 = rsi_9;\n                                }\n                                char rsi_10 = rax_23;\n                                void* rdx_13 = ((rdx_11 - 3) - &var_78);\n                                void* rax_24 = (rcx_4 + rdx_13);\n                                void* var_c0 = rdx_13;\n                                char* rax_25;\n                                void* rcx_6;\n                                void* rdx_14;\n                                if (var_d0_1 != 0)\n                                {\n                                    void* rax_31 = (rax_24 + var_d0_1);\n                                    var_d0_1 = (rax_31 + 2);\n                                    rax_25 = realloc(r15, (rax_31 + 3));\n                                    rdx_14 = var_c0;\n                                    rcx_6 = rcx_4;\n                                }\n                                else\n                                {\n                                    var_d0_1 = (rax_24 + 2);\n                                    rax_25 = malloc((rax_24 + 3));\n                                    rcx_6 = rcx_4;\n                                    rdx_14 = var_c0;\n                                }\n                                if (rax_25 == 0)\n                                {\n                                    char* rdi_26 = r15;\n                                    r15 = &data_40c104[0x1b];\n                                    free(rdi_26);\n                                    sub_407390(rax_12);\n                                    goto label_4099e7;\n                                }\n                                int32_t rcx_7 = (rcx_6 + 1);\n                                void* rdi_17 = (var_d0_1 - rdx_14);\n                                void* rsi_13 = (((-2 - rcx_6) + rdi_17) + rax_25);\n                                if (rcx_7 >= 8)\n                                {\n                                    *rsi_13 = var_b8;\n                                    uint64_t r9_3 = rcx_7;\n                                    *((rsi_13 + r9_3) - 8) = *(&var_c0 + r9_3);\n                                    void* r9_5 = ((rsi_13 + 8) & 0xfffffffffffffff8);\n                                    void* rsi_16 = (rsi_13 - r9_5);\n                                    int64_t* r10_2 = (&var_b8 - rsi_16);\n                                    int32_t rcx_11 = ((rcx_7 + rsi_16) & 0xfffffff8);\n                                    if (rcx_11 >= 8)\n                                    {\n                                        int32_t rcx_12 = (rcx_11 & 0xfffffff8);\n                                        int32_t rsi_17 = 0;\n                                    label_409cab:\n                                        uint64_t r8_1 = rsi_17;\n                                        rsi_17 = (rsi_17 + 8);\n                                        *(r9_5 + r8_1) = *(r10_2 + r8_1);\n                                        if (rsi_17 < rcx_12)\n                                        {\n                                            goto label_409cab;\n                                        }\n                                    }\n                                }\n                                else if ((rcx_7 & 4) != 0)\n                                {\n                                    uint64_t rcx_15 = rcx_7;\n                                    *rsi_13 = var_b8;\n                                    *((rsi_13 + rcx_15) - 4) = *(&*var_c0[4] + rcx_15);\n                                }\n                                else if (rcx_7 != 0)\n                                {\n                                    *rsi_13 = var_b8;\n                                    if ((rcx_7 & 2) != 0)\n                                    {\n                                        uint64_t rcx_16 = rcx_7;\n                                        *((rsi_13 + rcx_16) - 2) = *(&*var_c0[6] + rcx_16);\n                                    }\n                                }\n                                int32_t rdx_15 = (rdx_14 + 1);\n                                void* rcx_8 = ((rax_25 + rdi_17) - 1);\n                                if (rdx_15 >= 8)\n                                {\n                                    *rcx_8 = var_78;\n                                    uint64_t rsi_19 = rdx_15;\n                                    void var_80;\n                                    *((rcx_8 + rsi_19) - 8) = *(&var_80 + rsi_19);\n                                    void* rdi_24 = ((rcx_8 + 8) & 0xfffffffffffffff8);\n                                    void* rcx_13 = (rcx_8 - rdi_24);\n                                    int64_t* r9_6 = (&var_78 - rcx_13);\n                                    int32_t rdx_19 = ((rdx_15 + rcx_13) & 0xfffffff8);\n                                    if (rdx_19 >= 8)\n                                    {\n                                        int32_t rdx_20 = (rdx_19 & 0xfffffff8);\n                                        int32_t rcx_14 = 0;\n                                    label_409cf9:\n                                        uint64_t rsi_20 = rcx_14;\n                                        rcx_14 = (rcx_14 + 8);\n                                        *(rdi_24 + rsi_20) = *(r9_6 + rsi_20);\n                                        if (rcx_14 < rdx_20)\n                                        {\n                                            goto label_409cf9;\n                                        }\n                                    }\n                                }\n                                else if ((rdx_15 & 4) != 0)\n                                {\n                                    uint64_t rdx_21 = rdx_15;\n                                    *rcx_8 = var_78;\n                                    void var_7c;\n                                    *((rcx_8 + rdx_21) - 4) = *(&var_7c + rdx_21);\n                                }\n                                else if (rdx_15 != 0)\n                                {\n                                    *rcx_8 = var_78;\n                                    if ((rdx_15 & 2) != 0)\n                                    {\n                                        uint64_t rsi_23 = rdx_15;\n                                        void var_7a;\n                                        *((rcx_8 + rsi_23) - 2) = *(&var_7a + rsi_23);\n                                    }\n                                }\n                                r15 = rax_25;\n                                rax_14 = rax_12->_IO_read_ptr;\n                            } while (rax_14 < rax_12->_IO_read_end);\n                            if (((!((rdi_13 - 9) > 1 && rdi_13 == 0x23)) && (rdi_13 - 9) <= 1))\n                            {\n                                continue;\n                            }\n                            if (((rdi_13 - 9) > 1 && rdi_13 == 0x23))\n                            {\n                                int32_t rax_29;\n                                bool rdx_17;\n                                do\n                                {\n                                    char* rax_30 = rax_12->_IO_read_ptr;\n                                    if (rax_30 < rax_12->_IO_read_end)\n                                    {\n                                        rax_12->_IO_read_ptr = &rax_30[1];\n                                        rax_29 = *rax_30;\n                                        rdx_17 = true;\n                                    }\n                                    else\n                                    {\n                                        rax_29 = __uflow(rax_12);\n                                        rdx_17 = rax_29 != 0xffffffff;\n                                    }\n                                    if (rax_29 == 0xa)\n                                    {\n                                        break;\n                                    }\n                                } while (rdx_17 != 0);\n                                if (rax_29 == 0xffffffff)\n                                {\n                                    break;\n                                }\n                                continue;\n                            }\n                        }\n                        uint32_t rax_26 = __uflow(rax_12);\n                        rdi_13 = rax_26;\n                        if (rax_26 != 0xffffffff)\n                        {\n                            goto label_409a5c;\n                        }\n                        break;\n                    }\n                label_409beb:\n                    sub_407390(rax_12);\n                    if (var_d0_1 != 0)\n                    {\n                        *(r15 + var_d0_1) = 0;\n                    }\n                }\n            }\n            if ((((rax_11 >= 0 && rax_12 == 0) || rax_11 < 0) || ((rax_11 >= 0 && rax_12 != 0) && var_d0_1 == 0)))\n            {\n                r15 = &data_40c104[0x1b];\n            }\n        label_4099e7:\n            free(rbp_3);\n        }\n        data_60f4b8 = r15;\n    }\n    char rbp_2 = *r15;\n    if (rbp_2 != 0)\n    {\n        while (true)\n        {\n            if ((strcmp(rbx, r15) != 0 && (rbp_2 != 0x2a || (rbp_2 == 0x2a && r15[1] != 0))))\n            {\n                void* rbp_1 = &r15[(strlen(r15) + 1)];\n                r15 = ((rbp_1 + strlen(rbp_1)) + 1);\n                rbp_2 = *r15;\n                if (rbp_2 == 0)\n                {\n                    break;\n                }\n                continue;\n            }\n            rbx = &r15[(strlen(r15) + 1)];\n            break;\n        }\n    }\n    if (*rbx == 0)\n    {\n        rbx = \"ASCII\";\n    }\n    return rbx;\n}\n\n"
        },
        {
            "funcName": "sub_409dd0",
            "funcStartAddr": "0x409dd0",
            "funcEndAddr": "0x409dde",
            "decompiledFuncCode": "int64_t sub_409dd0(int32_t arg1)\n{\n    /* tailcall */\n    return sub_409de0(arg1, 0, 3);\n}\n\n"
        },
        {
            "funcName": "sub_409de0",
            "funcStartAddr": "0x409de0",
            "funcEndAddr": "0x409f15",
            "decompiledFuncCode": "uint64_t sub_409de0(int32_t arg1, int32_t arg2, int32_t arg3)\n{\n    void* var_58 = &arg_8;\n    int64_t rcx;\n    int64_t var_30 = rcx;\n    int32_t var_60 = 0x10;\n    void var_48;\n    void* var_50 = &var_48;\n    if (arg2 != 0x406)\n    {\n        return fcntl();\n    }\n    int32_t var_60_1 = 0x18;\n    int32_t rax_2;\n    int32_t rax_5;\n    int32_t* rax_15;\n    int32_t rax_17;\n    int32_t rbx;\n    if (data_60f4c0 < 0)\n    {\n        rax_5 = sub_409de0();\n        rbx = rax_5;\n    }\n    else\n    {\n        rax_2 = fcntl();\n        rbx = rax_2;\n        if (rax_2 < 0)\n        {\n            rax_15 = __errno_location();\n            if (*rax_15 == 0x16)\n            {\n                rax_17 = sub_409de0(arg1, 0, arg3);\n                rbx = rax_17;\n                if (rax_17 >= 0)\n                {\n                    data_60f4c0 = 0xffffffff;\n                }\n            }\n        }\n    }\n    if (((((data_60f4c0 >= 0 && rax_2 < 0) && *rax_15 == 0x16) && rax_17 >= 0) || (rax_5 >= 0 && data_60f4c0 == 0xffffffff)))\n    {\n        int32_t rax_7 = fcntl(rbx, 1);\n        int32_t rax_10;\n        if (rax_7 >= 0)\n        {\n            rax_10 = fcntl(rbx, 2, (rax_7 | 1));\n        }\n        if ((rax_7 < 0 || (rax_7 >= 0 && rax_10 == 0xffffffff)))\n        {\n            int32_t* rax_11 = __errno_location();\n            int32_t rdi_2 = rbx;\n            rbx = -1;\n            int32_t r12_1 = *rax_11;\n            close(rdi_2);\n            *rax_11 = r12_1;\n        }\n    }\n    if ((data_60f4c0 >= 0 && (rax_2 >= 0 || (rax_2 < 0 && *rax_15 != 0x16))))\n    {\n        data_60f4c0 = 1;\n    }\n    return rbx;\n}\n\n"
        },
        {
            "funcName": "init",
            "funcStartAddr": "0x409f20",
            "funcEndAddr": "0x409f7d",
            "decompiledFuncCode": "void init()\n{\n    _init();\n}\n\n"
        },
        {
            "funcName": "fini",
            "funcStartAddr": "0x409f80",
            "funcEndAddr": "0x409f81",
            "decompiledFuncCode": "void fini()\n{\n    return;\n}\n\n"
        },
        {
            "funcName": "sub_409f90",
            "funcStartAddr": "0x409f90",
            "funcEndAddr": "0x409fa8",
            "decompiledFuncCode": "int64_t sub_409f90(void (* arg1)(void*))\n{\n    int64_t rdx = data_60f268;\n    /* tailcall */\n    return __cxa_atexit(arg1, nullptr, rdx);\n}\n\n"
        },
        {
            "funcName": "sub_409fa8",
            "funcStartAddr": "0x409fa8",
            "funcEndAddr": "0x409fc8",
            "decompiledFuncCode": "int64_t sub_409fa8(int64_t arg1, int64_t arg2, int64_t arg3)\n{\n    int64_t* rbx = &data_60ee30;\n    while (true)\n    {\n        int64_t rax_1 = *rbx;\n        if (rax_1 == -1)\n        {\n            break;\n        }\n        rax_1();\n        rbx = (rbx - 8);\n    }\n    return arg3;\n}\n\n"
        }
    ]
}