{
    "funcInfo": [
        {
            "funcName": "sub_410310",
            "funcStartAddr": "0x410310",
            "funcEndAddr": "0x410323",
            "decompiledFuncCode": "int sub_410310()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    char *v3;  // rdi\n\n    v0 = v2;\n    strlen(v3);\n}\n"
        },
        {
            "funcName": "sub_403508",
            "funcStartAddr": "0x403508",
            "funcEndAddr": "0x403544",
            "decompiledFuncCode": "int sub_403508() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40a570",
            "funcStartAddr": "0x40a570",
            "funcEndAddr": "0x40a57a",
            "decompiledFuncCode": "int sub_40a570()\n{\n}\n"
        },
        {
            "funcName": "sub_40a5b0",
            "funcStartAddr": "0x40a5b0",
            "funcEndAddr": "0x40a5ca",
            "decompiledFuncCode": "int sub_40a5b0()\n{\n    unsigned long long v1;  // rax\n\n    v1 = sub_40a0a0();\n    if (v1 != 0)\n    {\n        return v1;\n    }\n    sub_410330(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_4110c0",
            "funcStartAddr": "0x4110c0",
            "funcEndAddr": "0x411156",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    struct struct_1 *field_8;\n    char padding_10[104];\n    unsigned long long field_78;\n    unsigned long long field_80;\n} struct_0;\n\nint sub_4110c0()\n{\n    unsigned long v0;  // [bp-0x28]\n    unsigned long v1;  // [bp-0x20]\n    unsigned int v3;  // edi\n    struct_0 *v4;  // rdx\n    unsigned long long v5[17];  // rdx\n    void *v6;  // rax\n    unsigned long long *v7[3];  // rsi\n    unsigned long long v8[3];  // rcx\n    unsigned long long v10[17];  // rax\n\n    if (((unsigned short)v3 & 258) == 0)\n    {\n        v10 = v4->field_8;\n        if (v4->field_8 != 0 && !((char)(v4->field_8->field_58 - 0 >> 63)))\n        {\n            v8 = *(v7);\n            if ((*(v7))[2] != 0 && *(*(v7)) == v4->field_80 && (*(v7))[1] == v4->field_78)\n            {\n                v10 = v10[16];\n                (*(v7))[1] = v4->field_8->field_78;\n                v8[0] = v10;\n            }\n        }\n        if ((char)(v4->field_8->field_58 - 0 >> 63) || v4->field_8 == 0 || (*(v7))[2] != 0)\n        {\n            return v10;\n        }\n    }\n    else\n    {\n        *((unsigned long long [17])&v0) = v5[15];\n        *((unsigned long long [17])&v1) = v5[16];\n        v6 = sub_40c0a0();\n        if (v6 != 0)\n        {\n            return (unsigned long long)free(v6);\n        }\n    }\n    if ((((unsigned short)v3 & 258) == 0 || v6 == 0) && ((*(v7))[2] == 0 || ((unsigned short)v3 & 258) != 0) && (!((char)(v4->field_8->field_58 - 0 >> 63)) || ((unsigned short)v3 & 258) != 0) && (((unsigned short)v3 & 258) != 0 || v4->field_8 != 0))\n    {\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_40aa90",
            "funcStartAddr": "0x40aa90",
            "funcEndAddr": "0x40aac3",
            "decompiledFuncCode": "int sub_40aa90()\n{\n    void tmp_19;  // tmp #19\n    unsigned long v1;  // rdi\n    char *v2;  // rbx\n    char *v3;  // rax\n    char v4;  // al\n\n    v2 = (*((char *)(unsigned long long)(unsigned int)sub_40aa00()) == 0? v1 : (unsigned long long)(unsigned int)sub_40aa00());\n    v3 = sub_40aa60();\n    tmp_19 = (char)*((char *)(v2 + v3));\n    *((char *)(v2 + v3)) = 0;\n    v4 = (char)tmp_19 != 0;\n    return rax<8>;\n}\n"
        },
        {
            "funcName": "sub_414540",
            "funcStartAddr": "0x414540",
            "funcEndAddr": "0x41455e",
            "decompiledFuncCode": "int sub_414540()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    __explicit_bzero_chk();\n}\n"
        },
        {
            "funcName": "sub_414430",
            "funcStartAddr": "0x414430",
            "funcEndAddr": "0x414434",
            "decompiledFuncCode": "int sub_414430()\n{\n    unsigned long long *v1;  // rdi\n\n    return *(v1);\n}\n"
        },
        {
            "funcName": "sub_40de10",
            "funcStartAddr": "0x40de10",
            "funcEndAddr": "0x40de1d",
            "decompiledFuncCode": "int sub_40de10()\n{\n}\n"
        },
        {
            "funcName": "sub_40daab",
            "funcStartAddr": "0x40daab",
            "funcEndAddr": "0x40db71",
            "decompiledFuncCode": "int sub_40daab()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long v1;  // [bp-0x50]\n    unsigned long v2;  // [bp-0x48]\n    unsigned int v3;  // [bp-0x2c]\n    unsigned long v4;  // [bp-0x28]\n    unsigned long v5;  // [bp-0x20]\n    unsigned long v6;  // [bp-0x18]\n    unsigned long v7;  // [bp-0x10]\n    unsigned long long v8;  // [bp+0x0]\n    unsigned long long v10;  // [bp+0x10]\n    unsigned long long v11;  // [bp+0x18]\n    unsigned long long v12;  // [bp+0x20]\n    unsigned long long v13;  // [bp+0x28]\n    unsigned long v14;  // rcx\n    unsigned long v15;  // rax\n    unsigned long long v17[7];  // rbx\n    unsigned int *v18;  // r13\n    unsigned long long *v20;  // r12\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // r12\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r14\n    unsigned long long v25;  // r15\n\n    v17 = (v14 == 0? v15 : rbx<8>);\n    v18 = __errno_location();\n    v3 = *(v18);\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = &v17[1];\n    v6 = &v17[1];\n    v7 = (unsigned int)sub_40c550();\n    v5 = v7 + 1;\n    v4 = (unsigned int)sub_4100e0();\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = v6;\n    sub_40c550();\n    *(v18) = v3;\n    if (v20 != 0)\n    {\n        *(v20) = v7;\n    }\n    v21 = v8;\n    v22 = v10;\n    v23 = v11;\n    v24 = v12;\n    v25 = v13;\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_409f70",
            "funcStartAddr": "0x409f70",
            "funcEndAddr": "0x40a026",
            "decompiledFuncCode": "int sub_409f70()\n{\n    unsigned long long v1;  // rsi\n    unsigned long long v2;  // r13\n    unsigned long long v3;  // rdi\n    unsigned long long v4;  // rbx\n    unsigned long long v5;  // rbp\n    unsigned long long v6;  // r14\n    unsigned long long v7;  // r12\n    unsigned int *v8;  // r15\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rdx\n    char *v12;  // rsi\n    unsigned long long v13;  // rax\n\n    v2 = v1;\n    v4 = v3;\n    v5 = (unsigned int)sub_40aa00();\n    v10 = sub_40aa60();\n    if (v10 > 14)\n    {\n        v6 = (unsigned short)*((short *)v5);\n        v7 = v10;\n        *((short *)v5) = 46;\n        *(v8) = 0;\n        v10 = pathconf(v3, 0x3);\n        if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>))\n        {\n            v11 = 255;\n        }\n        if (*(__errno_location()) == 0 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)))\n        {\n            v11 = v10;\n        }\n        *((unsigned long long *)v5) = v6;\n        if (v7 > v11)\n        {\n            v12 = v4 + v1;\n            v13 = v4 + v2 - v5;\n            if (v4 + v2 - v5 < v11)\n            {\n                v11 = v13 + 1;\n            }\n            else\n            {\n                v12 = v5 + v11 - 1;\n            }\n            *(v12) = 126;\n            *((char *)(v5 + v11)) = 0;\n            return v13;\n        }\n    }\n    if (v10 <= 14 || v7 <= v11)\n    {\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_413ac0",
            "funcStartAddr": "0x413ac0",
            "funcEndAddr": "0x413b2d",
            "decompiledFuncCode": "int sub_413ac0()\n{\n    unsigned long long v1;  // rax\n\n    v1 = sub_413800();\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>))\n    {\n        sub_413920();\n        sub_4139a0();\n        r9<8>();\n        v1 = -1;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_40b650",
            "funcStartAddr": "0x40b650",
            "funcEndAddr": "0x40b69b",
            "decompiledFuncCode": "int sub_40b650()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rsi\n    unsigned long long *v6;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long long v8[2];  // rbx\n    unsigned long long v9;  // rsi\n\n    v2 = v1;\n    v9 = *(v6);\n    if (*(v6) != 0)\n    {\n        v6 = sub_40b0f0();\n        while (true)\n        {\n            if (v9 != v1)\n            {\n                v1 = v3;\n                v7 = *((long long *)(r12<8> + 56))();\n                if (v7 == 0)\n                {\n                    v8 = v8[1];\n                    if (v8 == 0)\n                    {\n                        break;\n                    }\n                    v9 = *(v8);\n                }\n            }\n            if (v9 == v1 || v7 != 0)\n            {\n                return stack_base + 0;\n            }\n        }\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_40db90",
            "funcStartAddr": "0x40db90",
            "funcEndAddr": "0x40dc25",
            "decompiledFuncCode": "extern struct_0 *g_61d458;\nextern unsigned long long g_61d460;\nextern unsigned long long g_61d468;\nextern unsigned int g_61d470;\nextern unsigned long long g_61d960;\n\nint sub_40db90()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rbx\n    void *v3;  // rdi\n\n    v1 = g_61d470;\n    if (g_61d470 > 1)\n    {\n        v2 = &g_61d458[1].field_8;\n        while (true)\n        {\n            v3 = *(v2);\n            v2 = &v2[2];\n            v1 = free(v3);\n            if (v2 == &g_61d458[(unsigned long long)(g_61d470 - 2) + 2].field_8)\n            {\n                break;\n            }\n        }\n    }\n    if (g_61d458->field_8 != 6412640)\n    {\n        v1 = free(g_61d458->field_8);\n        g_61d460 = 0x100;\n        g_61d468 = &g_61d960;\n    }\n    if (g_61d458 != 6411360)\n    {\n        v1 = free(g_61d458);\n        g_61d458 = &g_61d460;\n    }\n    g_61d470 = 1;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_403c90",
            "funcStartAddr": "0x403c90",
            "funcEndAddr": "0x403cf3",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    char field_8;\n    char padding_9[39];\n    unsigned long long field_30;\n} struct_0;\n\nint sub_403c90()\n{\n    struct_0 *v1;  // rdx\n    unsigned long long v2;  // rax\n    unsigned int v3;  // edi\n    unsigned int v4;  // esi\n    unsigned long long v5;  // rax\n    unsigned long long v6;  // rax\n    unsigned int v7;  // ecx\n    unsigned int *v8;  // rax\n\n    v2 = v1->field_30;\n    if (v1->field_30 == -1)\n    {\n        v5 = __fxstatat(0x1, v3, v4, (unsigned int)v1, 0x100);\n        if (v5 != 0)\n        {\n            v1->field_30 = -2;\n            v8 = __errno_location();\n            v7 = *(v8);\n            *((long long *)&v1->field_8) = (int)*(v8);\n            v1 = v7;\n        }\n        else\n        {\n            v6 = v1->field_30;\n        }\n    }\n    if (v5 == 0 || v1->field_30 != -1)\n    {\n        if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)))\n        {\n            return 0;\n        }\n        v8 = __errno_location();\n        v1 = (unsigned long long)(unsigned int)*((int *)&v1->field_8);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>))\n    {\n        *((struct_0 **)&v8) = v1;\n        return -18446744069414584321;\n    }\n}\n"
        },
        {
            "funcName": "sub_404d20",
            "funcStartAddr": "0x404d20",
            "funcEndAddr": "0x404dd3",
            "decompiledFuncCode": "int sub_404d20()\n{\n    unsigned int v1;  // edi\n    unsigned long v2;  // rcx\n    unsigned long long v3;  // rax\n    unsigned long v4;  // rdx\n    unsigned long long v5;  // rax\n    unsigned long long v6;  // rbp\n    unsigned long long v7;  // rbp\n    unsigned int v8;  // esi\n\n    v3 = lseek(v1, v2, 0x1);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        if ((char)v4 != 0)\n        {\n            v5 = sub_404990();\n            if (v5 < 0)\n            {\n                v7 = (unsigned int)sub_40dd80();\n            }\n        }\n        if ((char)v4 == 0 || v5 >= 0)\n        {\n            return 1;\n        }\n    }\n    else\n    {\n        v6 = (unsigned int)sub_40dd80();\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>) || v5 < 0 && (char)v4 != 0)\n    {\n        error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, v8, 0x5));\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_40df80",
            "funcStartAddr": "0x40df80",
            "funcEndAddr": "0x40df8a",
            "decompiledFuncCode": "int sub_40df80()\n{\n}\n"
        },
        {
            "funcName": "sub_40a5d0",
            "funcStartAddr": "0x40a5d0",
            "funcEndAddr": "0x40a5e2",
            "decompiledFuncCode": "int sub_40a5d0()\n{\n    char *v1;  // rsi\n\n    if (*(v1) == 0 || v1 == 0)\n    {\n        return 2;\n    }\n}\n"
        },
        {
            "funcName": "sub_414ae0",
            "funcStartAddr": "0x414ae0",
            "funcEndAddr": "0x414d85",
            "decompiledFuncCode": "int sub_414ae0() { crash_skku_timeout;\n}"
        },
        {
            "funcName": "sub_40da82",
            "funcStartAddr": "0x40da82",
            "funcEndAddr": "0x40daab",
            "decompiledFuncCode": "int sub_40da82()\n{\n    unsigned long v0;  // [bp-0x30]\n    unsigned long v1;  // [bp-0x28]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v4;  // [bp-0x10]\n    unsigned long v5;  // [bp-0x8]\n    unsigned long v7;  // r15\n    unsigned long v8;  // r14\n    unsigned long v9;  // r13\n    unsigned long v10;  // r12\n    unsigned long v11;  // rbx\n\n    v5 = v7;\n    v4 = v8;\n    v3 = v9;\n    v2 = v10;\n    v1 = stack_base + 0;\n    v0 = v11;\n}\n"
        },
        {
            "funcName": "sub_40a6b0",
            "funcStartAddr": "0x40a6b0",
            "funcEndAddr": "0x40a6b8",
            "decompiledFuncCode": "extern unsigned long long g_61d928;\n\nint sub_40a6b0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long v2;  // rax\n\n    g_61d928 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40df30",
            "funcStartAddr": "0x40df30",
            "funcEndAddr": "0x40df39",
            "decompiledFuncCode": "int sub_40df30()\n{\n}\n"
        },
        {
            "funcName": "sub_40c550",
            "funcStartAddr": "0x40c550",
            "funcEndAddr": "0x40d688",
            "decompiledFuncCode": "int sub_40c550()\n{\n    unsigned long long v0;  // [bp-0x1e8]\n    void tmp_38;  // tmp #38\n    unsigned long long|unsigned int * v1;  // [bp-0xe8]\n    unsigned long long v2;  // [bp-0xe0]\n    unsigned long long v3;  // [bp-0xd8]\n    unsigned long long|char|unsigned long v4;  // [bp-0xc0]\n    unsigned long long|char|unsigned long v5;  // [bp-0xb8]\n    char v6;  // [bp-0xa9]\n    unsigned long long v7;  // [bp-0xa8]\n    unsigned long long v8;  // [bp-0xa0]\n    unsigned long long|char v9;  // [bp-0x98]\n    unsigned long long|unsigned long v10;  // [bp-0x90]\n    unsigned long long|unsigned int v11;  // [bp-0x88]\n    unsigned long long|unsigned int v12;  // [bp-0x80]\n    unsigned long long v13;  // [bp-0x78]\n    unsigned long long v14;  // [bp-0x70]\n    unsigned long v15;  // [bp-0x68]\n    unsigned int v16;  // [bp-0x60]\n    char v17;  // [bp-0x5c]\n    unsigned long long|char v18;  // [bp-0x5b]\n    unsigned long long v19;  // [bp-0x5a]\n    char v20;  // [bp-0x59]\n    unsigned long long v21;  // [bp-0x58]\n    unsigned long long v22;  // [bp-0x50]\n    char v23;  // [bp-0x44]\n    unsigned long long v24;  // [bp-0x40]\n    unsigned int *v25;  // [bp+0x8]\n    unsigned long long v26;  // [bp+0x10]\n    void *v27;  // [bp+0x18]\n    unsigned long long v28;  // rdi\n    unsigned long long v29;  // r15\n    unsigned long v30;  // r8\n    unsigned long long v31;  // rcx\n    unsigned long v32;  // r9\n    unsigned long long|char|unsigned long v33;  // r10\n    unsigned long long v34;  // rax\n    unsigned long long v35;  // rax\n    unsigned long long v36;  // rbp\n    unsigned long long v37;  // rax\n    unsigned long long v38;  // r8\n    unsigned long long v39;  // r9\n    unsigned long long v40;  // r11\n    unsigned long long|unsigned long v41;  // rbp\n    unsigned long long v42;  // rax\n    unsigned long long v43;  // rax\n    char v44;  // al\n    unsigned long long v45;  // rdx\n    unsigned long long v46;  // rcx\n    unsigned long long|unsigned short|unsigned long v47;  // rax\n    unsigned long long v48;  // rcx\n    unsigned long long v49;  // rdx\n    unsigned long long v50;  // rbx\n    unsigned long long v51;  // r15\n    unsigned long long v52;  // rbp\n    unsigned long long v53;  // r14\n    char *v54;  // rax\n    unsigned long long v55;  // rcx\n    unsigned long long v57;  // r13\n    unsigned long long v58;  // rcx\n    char v59;  // al\n    char v60;  // al\n    unsigned int v61;  // eax\n    char v62;  // al\n    unsigned int v64;  // eax\n    char v65;  // al\n    unsigned long v66;  // rdx\n    unsigned long long v67;  // rax\n    char v68;  // al\n    unsigned long long v69;  // rdx\n    unsigned long long v70;  // rbx\n    unsigned long long|unsigned int|char v71;  // rsi\n    unsigned long long|char v72;  // r13\n    unsigned long long v73;  // r14\n    unsigned long long v74;  // r12\n    unsigned int v75;  // r13d\n    unsigned long long v76;  // r11\n    char v77;  // dl\n    unsigned long long v78;  // rax\n    unsigned long long v79;  // cc_dep1\n    unsigned long long v80;  // dl\n    unsigned long long v81;  // rax\n    unsigned long long v82;  // rax\n    unsigned long long v83;  // rdx\n    unsigned long long v84;  // rax\n    unsigned long long v85;  // rax\n\n    v29 = v28;\n    v73 = v71;\n    v72 = v30;\n    v7 = v71;\n    v4 = v31;\n    v16 = v32;\n    v15 = __ctype_get_mb_cur_max();\n    v17 = ((unsigned int)v32 & 2) != 0;\n    switch ((unsigned int)v30)\n    {\n    case 0:\n        v6 = 1;\n        v33 = 0;\n        v70 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 0;\n        v8 = 0;\n        v13 = 0;\n    case 1:\n        v6 = 1;\n        v33 = 0;\n        v70 = 0;\n        v72 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 0;\n        v8 = 1;\n        v13 = \"'\";\n    case 2:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 0;\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v70 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 0;\n            v8 = 1;\n            v13 = \"'\";\n        }\n    case 3:\n        v6 = 1;\n        v33 = 0;\n        v70 = 0;\n        v72 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"'\";\n    case 4:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 1;\n            if (v71 == 0)\n            {\n                v6 = 1;\n                v33 = 0;\n                v70 = 1;\n                v72 = 2;\n                v14 = 0;\n                v18 = 0;\n                v17 = 0;\n                v8 = 1;\n                v13 = \"'\";\n            }\n            else\n            {\n                v78 = 0;\n                v6 = 1;\n                v14 = 0;\n            }\n        }\n    case 5:\n        if (((char)v32 & 2) == 0)\n        {\n            if (v71 != 0)\n            {\n                *((char *)v28) = 34;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n                v14 = 0;\n            }\n            else\n            {\n                v14 = 0;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n            }\n            v17 = 0;\n            v70 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v70 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n    case 6:\n        v6 = 1;\n        v33 = 0;\n        v70 = 0;\n        v72 = 5;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"\\\"\";\n    case 7:\n        v6 = 1;\n        v33 = 0;\n        v70 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 1;\n        v8 = 0;\n        v13 = 0;\n    case 8: case 9: case 10:\n        if (v30 != 10)\n        {\n            v4 = v4;\n            v26 = (unsigned int)sub_40c450();\n            v27 = (unsigned long long)(unsigned int)sub_40c450();\n        }\n        v70 = 0;\n        if (((char)v32 & 2) == 0)\n        {\n            v34 = (char)*((char *)v26);\n            if (*((char *)v26) != 0)\n            {\n                do\n                {\n                    if (v71 > v70)\n                    {\n                        *((unsigned long long *)(v28 + v70)) = v34;\n                    }\n                    v70 += 1;\n                    v34 = (char)*((char *)(v26 + v70));\n                }\n                while ((char)v34 != 0);\n            }\n        }\n        v5 = v76;\n        v6 = 1;\n        v8 = strlen(v27);\n        v18 = 0;\n        v13 = v27;\n        v14 = 0;\n        v4 = 1;\n    default:\n        abort(); /* do not return */\n    }\n    v76 = v4;\n    while (true)\n    {\n        v39 = v76;\n        v74 = 0;\n        v40 = v72;\n        while (true)\n        {\n            v72 = (char)(v39 != v74);\n            if (v39 == -1)\n            {\n                v72 = (char)(*((char *)(v7 + v74)) != 0);\n            }\n            if (v72 != 0)\n            {\n                v38 = v7 + v74;\n                v5 = (unsigned int)v40 != 2 & v4;\n                if (((unsigned int)v40 != 2 & v4) != 0)\n                {\n                    v35 = v8;\n                    if (v8 != 0)\n                    {\n                        v36 = v74 + v35;\n                        if (v39 == -1 && v35 > 1)\n                        {\n                            v11 = v40;\n                            v10 = v33;\n                            v9 = v38;\n                            v39 = strlen(v7);\n                        }\n                        if (v36 <= v39)\n                        {\n                            v12 = v40;\n                            v11 = v39;\n                            v10 = v33;\n                            v9 = v38;\n                            v37 = memcmp(v38, v13, v8);\n                            v38 = v9;\n                            v33 = (char)v10;\n                            v39 = v11;\n                            v40 = v12;\n                            if (v37 == 0 && v17 == 0)\n                            {\n                                v41 = (char)*((char *)v38);\n                                switch (*((char *)v38))\n                                {\n                                case 0:\n                                    v71 = (char)((unsigned int)v40 == 2);\n                                    v72 = (unsigned int)(0 ^ 1);\n                                    v72 = (char)(0 ^ 1) & (unsigned int)v40 == 2;\n                                    if (((char)((unsigned int)0 ^ 1) & (unsigned int)v40 == 2) != 0)\n                                    {\n                                        if (v71 > v70)\n                                        {\n                                            *((char *)(v28 + v70)) = 39;\n                                        }\n                                        if (v71 > v70 + 1)\n                                        {\n                                            *((char *)(v28 + v70 + 1)) = 36;\n                                        }\n                                        if (v71 > v70 + 2)\n                                        {\n                                            *((char *)(v28 + v70 + 2)) = 39;\n                                        }\n                                        v48 = v70 + 3;\n                                        v70 += 4;\n                                        v33 = rax<8>;\n                                        v72 = 0;\n                                        v41 = 48;\n                                    }\n                                    else\n                                    {\n                                        v48 = v70;\n                                        v72 = 0;\n                                        v70 = v48 + 1;\n                                        v72 = (unsigned int)v72;\n                                        v41 = 48;\n                                        v72 = 0;\n                                        v41 = 48;\n                                        if (1 < v39)\n                                        {\n                                            v9 = *((char *)(v7 + 0 + 1));\n                                            if (((unsigned int)(char)*((char *)(v7 + 0 + 1)) - 48 & 255) <= 9)\n                                            {\n                                                if (v71 > v70)\n                                                {\n                                                    *((char *)(v28 + v70)) = 48;\n                                                }\n                                                if (v71 > v48 + 2)\n                                                {\n                                                    *((char *)(v28 + v48 + 2)) = 48;\n                                                }\n                                                v70 = v48 + 3;\n                                                v41 = 48;\n                                            }\n                                        }\n                                    }\n                                    if ((v71 > v70 || ((char)((unsigned int)0 ^ 1) & (unsigned int)v40 == 2) != 0) && (((char)((unsigned int)0 ^ 1) & (unsigned int)v40 == 2) == 0 || v71 > v70 + 3))\n                                    {\n                                        *((char *)(v28 + v48)) = 92;\n                                        v33 = v72;\n                                    }\n                                case 7:\n                                    v41 = 97;\n                                case 8:\n                                    v71 = 0;\n                                    v72 = 0;\n                                    v41 = 98;\n                                case 13:\n                                    v41 = 13;\n                                    v46 = 114;\n                                    v71 = (unsigned int)v40 == 2;\n                                case 32:\n                                    v42 = v5;\n                                case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                                    v71 = 0;\n                                case 35: case 126:\n                                    v43 = v5;\n                                case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                                    v42 = v5;\n                                case 92:\n                                    v45 = v4;\n                                    v41 = 92;\n                                    v46 = 92;\n                                    v71 = v4 & v17 & v8 != 0;\n                                    if ((v4 & v17 & v8 != 0) != 0)\n                                    {\n                                        v74 = 1;\n                                        v47 = 0;\n                                        v72 = 0;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (v8 == 0 || v36 > v39 || v37 != 0)\n                    {\n                        v41 = (char)*((char *)v38);\n                        switch (*((char *)v38))\n                        {\n                        case 0:\n                            if (v17 == 0)\n                            {\n                                v5 = 0;\n                            }\n                            else\n                            {\n                                v4 = (unsigned int)v40 == 2;\n                            }\n                        case 7:\n                            v41 = 97;\n                            break;\n                        case 8:\n                            v41 = 98;\n                        case 9:\n                            v41 = 116;\n                        case 10:\n                            v41 = 110;\n                            v71 = 0;\n                            v72 = 0;\n                        case 11:\n                            v41 = 118;\n                            break;\n                            if (v17 == 0)\n                            {\n                                v72 = 0;\n                            }\n                            else\n                            {\n                                v81 = 0;\n                            }\n                        case 12:\n                            v41 = 102;\n                            break;\n                        case 13:\n                            v5 = 0;\n                        case 32:\n                            v42 = 0;\n                            v41 = 32;\n                            v72 = v5;\n                            v5 = v42;\n                            v72 = 0;\n                            if (v25 != 0)\n                            {\n                                v66 = (unsigned int)((unsigned long long)v25[v41 % 32] >> ((char)v41 & 31)) & 1;\n                                v71 = (unsigned int)v40 == 2;\n                            }\n                            if (((char)((unsigned long long)v25[v41 >> 5] >> ((char)v41 & 31)) & 1) == 0 || v25 == 0)\n                            {\n                                v71 = (unsigned int)v40 == 2;\n                                v74 += 1;\n                                v47 = (v72 ^ 1) & (unsigned int)v33;\n                                if (v47 != 0)\n                                {\n                                    if (v73 > v70)\n                                    {\n                                        *((char *)(v29 + v70)) = 39;\n                                    }\n                                    if (v73 > v70 + 1)\n                                    {\n                                        *((char *)(v29 + v70 + 1)) = 39;\n                                    }\n                                    v70 += 2;\n                                    v33 = 0;\n                                }\n                            }\n                            if (((char)((unsigned long long)v25[v41 >> 5] >> ((char)v41 & 31)) & 1) != 0 || v5 != 0)\n                            {\n                                v81 = v71;\n                                v67 = (unsigned int)v33 ^ 1;\n                                v68 = (char)((unsigned int)v33 ^ 1) & v71;\n                                if (((char)((unsigned int)v33 ^ 1) & v71) != 0)\n                                {\n                                    if (v73 > v70)\n                                    {\n                                        *((char *)(v29 + v70)) = 39;\n                                    }\n                                    if (v70 + 1 < v73)\n                                    {\n                                        *((char *)(v29 + v70 + 1)) = 36;\n                                    }\n                                    v69 = v70 + 2;\n                                    if (v70 + 2 < v73)\n                                    {\n                                        *((char *)(v29 + v70 + 2)) = 39;\n                                    }\n                                    v70 += 3;\n                                    v33 = rax<8>;\n                                }\n                                *((unsigned long long *)&v4) = v4 & v81;\n                                if (v73 > v70)\n                                {\n                                    *((char *)(v29 + v70)) = 92;\n                                }\n                                v70 += 1;\n                                v74 += 1;\n                            }\n                        case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                            v5 = 0;\n                        case 35: case 126:\n                            v43 = 0;\n                            v72 = v5;\n                            v71 = 0;\n                            v5 = v43;\n                        case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                            v42 = 0;\n                        case 39:\n                            v5 = 0;\n                        case 63:\n                            v5 = 0;\n                        case 92:\n                            v5 = 0;\n                        case 123: case 125:\n                            v5 = 0;\n                        default:\n                            v5 = 0;\n                        }\n                    }\n                }\n                else\n                {\n                    v41 = (char)*((char *)v38);\n                    switch (*((char *)v38))\n                    {\n                    case 0:\n                        if (v4 == 0)\n                        {\n                            v74 += 1;\n                            v5 = 0;\n                            v71 = (char)((unsigned int)v40 == 2);\n                            v72 = 0;\n                            v41 = 0;\n                            break;\n                        }\n                    case 7:\n                        v41 = 7;\n                        v46 = 97;\n                        v71 = (unsigned int)v40 == 2;\n                    case 8:\n                        v41 = 8;\n                        v46 = 98;\n                        v71 = (unsigned int)v40 == 2;\n                    case 9:\n                        v41 = 9;\n                        v46 = 116;\n                    case 10:\n                        v41 = 10;\n                        v46 = 110;\n                    case 11:\n                        v41 = 11;\n                        v46 = 118;\n                        v71 = (unsigned int)v40 == 2;\n                    case 12:\n                        v41 = 12;\n                        v46 = 102;\n                        v71 = (unsigned int)v40 == 2;\n                    case 13:\n                        v41 = 13;\n                        v46 = 114;\n                        v71 = (unsigned int)v40 == 2;\n                        v5 = v17 & (unsigned int)v40 == 2;\n                        if ((v17 & (unsigned int)v40 == 2) == 0)\n                        {\n                            v41 = v46;\n                            v72 = 0;\n                            v72 = 0;\n                            break;\n                            v72 = ((unsigned int)v4 ^ 1 | (unsigned int)v71) ^ 1;\n                            v72 = (char)(((unsigned int)v4 ^ 1 | (unsigned int)v71) ^ 1) | v17;\n                            v72 = 0;\n                        }\n                    case 32:\n                        v41 = 32;\n                        v71 = (char)((unsigned int)v40 == 2);\n                    case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                        v71 = (char)((unsigned int)v40 == 2);\n                        v72 = 0;\n                    case 35: case 126:\n                        v71 = (unsigned int)v40 == 2;\n                    case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                        v71 = (char)((unsigned int)v40 == 2);\n                        break;\n                    case 39:\n                        if ((unsigned int)v40 == 2)\n                        {\n                            if (v71 != 0)\n                            {\n                                v49 = 0;\n                            }\n                            if (v71 == 0 || v14 != 0)\n                            {\n                                if (v71 > v70)\n                                {\n                                    *((char *)(v28 + v70)) = 39;\n                                }\n                                if (v71 > v70 + 1)\n                                {\n                                    *((char *)(v28 + v70 + 1)) = 92;\n                                }\n                                if (v71 > v70 + 2)\n                                {\n                                    v49 = v71;\n                                    *((char *)(v28 + v70 + 2)) = 39;\n                                    v73 = v14;\n                                }\n                                else\n                                {\n                                    v49 = v71;\n                                    v73 = v14;\n                                }\n                            }\n                            v18 = v72;\n                            v70 += 3;\n                            v72 = 0;\n                            v33 = 0;\n                            v14 = v73;\n                            v41 = 39;\n                            v73 = v49;\n                        }\n                        else\n                        {\n                            v18 = v72;\n                            v71 = 0;\n                            v41 = 39;\n                            break;\n                        }\n                    case 63:\n                        if ((unsigned int)v40 != 2)\n                        {\n                            v41 = 63;\n                            v71 = (char)((unsigned int)v40 == 2);\n                            v72 = 0;\n                            break;\n                            v71 = v7;\n                            v41 = (char)*((char *)(v71 + 2));\n                            v71 = 0x7000a38200000000;\n                            v0 = 0x7000a38200000000;\n                            v71 = 0;\n                            v72 = 0;\n                            v41 = 63;\n                            break;\n                            if (v73 > v70)\n                            {\n                                *((char *)(v28 + v70)) = 63;\n                            }\n                            if (v73 > v70 + 1)\n                            {\n                                *((char *)(v28 + v70 + 1)) = 34;\n                            }\n                            if (v73 > v70 + 2)\n                            {\n                                *((char *)(v28 + v70 + 2)) = 34;\n                            }\n                            if (v73 > v70 + 3)\n                            {\n                                *((char *)(v28 + v70 + 3)) = 63;\n                            }\n                            v70 += 4;\n                            v71 = 0;\n                            v72 = 0;\n                            v74 = 2;\n                            v72 = v72;\n                            v72 = 0;\n                        }\n                        else\n                        {\n                            v72 = 0;\n                            v72 = 0;\n                            v41 = 63;\n                        }\n                    case 92:\n                        if ((unsigned int)v40 == 2)\n                        {\n                            v74 += 1;\n                            v47 = v33;\n                            v72 = 0;\n                            v41 = 92;\n                        }\n                    case 123: case 125:\n                        v44 = v39 != 1;\n                        if (v39 == -1)\n                        {\n                            v44 = *((char *)(v7 + 1)) != 0;\n                        }\n                        v71 = (unsigned int)v40 == 2;\n                        if (v44 == 0)\n                        {\n                            break;\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v75 = v40;\n                v76 = v39;\n                v77 = v75 == 2;\n                if ((v75 == 2 & v17) == 0 || v70 != 0)\n                {\n                    v78 = (unsigned int)v17 ^ 1;\n                    v79 = v77 & (char)((unsigned int)v17 ^ 1);\n                    v80 = v77 & (char)((unsigned int)v17 ^ 1);\n                    if ((char)v79 == 0)\n                    {\n                        v80 = v78;\n                    }\n                    else if (v18 != 0)\n                    {\n                        if (v6 == 0)\n                        {\n                            v78 = v73 == 0 & v14 != 0;\n                            if ((v73 == 0 & v14 != 0) == 0)\n                            {\n                                v80 = v18;\n                            }\n                        }\n                        else\n                        {\n                            v3 = v27;\n                            v2 = v26;\n                            v1 = v25;\n                            v70 = (unsigned int)sub_40c550();\n                        }\n                    }\n                }\n            }\n            if (v6 == 0 && v72 == 0 && v18 != 0 && (char)v79 != 0 && ((v75 == 2 & v17) == 0 || v70 != 0) && (v73 == 0 & v14 != 0) == 0 || v72 == 0 && (char)v79 == 0 && ((v75 == 2 & v17) == 0 || v70 != 0) || v72 == 0 && (char)v79 != 0 && ((v75 == 2 & v17) == 0 || v70 != 0) && v18 == 0)\n            {\n                v82 = v13;\n                if (v13 != 0 && v80 != 0)\n                {\n                    v83 = (char)*((char *)v82);\n                    if (*((char *)v82) != 0)\n                    {\n                        v84 = v82 - v70;\n                        do\n                        {\n                            if (v73 > v70)\n                            {\n                                *((unsigned long long *)(v29 + v70)) = v83;\n                            }\n                            v70 += 1;\n                            v83 = (char)*((char *)(v84 + v70));\n                        }\n                        while ((char)v83 != 0);\n                    }\n                }\n                if (v73 > v70)\n                {\n                    *((char *)(v29 + v70)) = 0;\n                }\n            }\n            if (v15 == 1)\n            {\n                v11 = v40;\n                v10 = v39;\n                v9 = v33;\n                v47 = (unsigned short)*((short *)(*((long long *)(unsigned long long)__ctype_b_loc()) + v41 * 2));\n                tmp_38 = v47 & 0x4000;\n                v47 &= 0x4000;\n                v72 = (tmp_38 & 65535) != 0;\n                v71 = (tmp_38 & 65535) == 0 & v4;\n                if (v71 != 0)\n                {\n                    v71 = v4;\n                    v72 = 0;\n                }\n            }\n            else\n            {\n                v24 = 0;\n                if (v39 == -1)\n                {\n                    v11 = v40;\n                    v10 = v33;\n                    v9 = v38;\n                    v39 = strlen(v7);\n                }\n                v21 = v70;\n                v22 = v38;\n                v50 = 0;\n                v19 = v33;\n                *((unsigned long long *)&v20) = v41;\n                v11 = v29;\n                v12 = v73;\n                v9 = v39;\n                v10 = v40;\n                do\n                {\n                    v51 = v74 + v50;\n                    v52 = v7 + v74 + v50;\n                    v47 = sub_413710();\n                    v53 = v47;\n                    if (v47 != -2 && v47 != 0 && v47 != -1)\n                    {\n                        if ((int)v10 == 2 && v17 != 0 && v47 != 1)\n                        {\n                            v54 = v7 + v71 + 1;\n                            v71 = v7 + v53 + v71;\n                            while (true)\n                            {\n                                v55 = (unsigned int)*(v54) - 91;\n                                if ((8589934635 & 1 << (v55 & 63)) == 0 || ((unsigned int)*(v54) - 91 & 255) > 33)\n                                {\n                                    v54 = &v54[1];\n                                    if (v71 == v54)\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                            if ((8589934635 & 1 << (v55 & 63)) == 0 || ((unsigned int)*(v54) - 91 & 255) > 33)\n                            {\n                                v72 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                                v50 += v53;\n                                v47 = mbsinit((unsigned int)&v24);\n                            }\n                        }\n                        v72 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                        v50 += v53;\n                        v47 = mbsinit((unsigned int)&v24);\n                    }\n                    if (v47 == -1)\n                    {\n                        v28 = v50;\n                        v41 = v20;\n                        v70 = v21;\n                        v72 = 0;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v73 = v12;\n                        v39 = v9;\n                        v40 = (unsigned int)v10;\n                        v71 = v4;\n                    }\n                    if (v47 == -2)\n                    {\n                        v39 = v9;\n                        v71 = v51;\n                        v47 = v50;\n                        v28 = v50;\n                        v33 = (char)v19;\n                        v41 = v20;\n                        v70 = v21;\n                        v29 = v11;\n                        v73 = v12;\n                        v40 = (unsigned int)v10;\n                        if (v71 < v9 && *((char *)v52) != 0)\n                        {\n                            do\n                            {\n                                v47 += 1;\n                            }\n                            while (v47 < v9 && *((char *)(v22 + v47)) != 0);\n                            v28 = v47;\n                        }\n                        v71 = v4;\n                        v72 = 0;\n                    }\n                    if (v47 == 0 || v47 != -2 && v47 != -1 && (unsigned int)v47 != 0)\n                    {\n                        v28 = v50;\n                        v41 = v20;\n                        v70 = v21;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v71 = (unsigned int)v72 ^ 1;\n                        v73 = v12;\n                        v39 = v9;\n                        v40 = (unsigned int)v10;\n                        v71 = (char)((unsigned int)v72 ^ 1) & v4;\n                    }\n                }\n                while (v28 <= 1);\n                if (v47 == -2 || v47 == 0 || v47 == -1 || (unsigned int)v47 != 0)\n                {\n                    v9 = v72;\n                    v71 = 0;\n                    v57 = v17;\n                    v58 = v28 + v74;\n                    v28 = v5;\n                }\n            }\n            if (false)\n            {\n                v5 = v43;\n                v72 = 0;\n            }\n            if (v15 != 1 || v71 != 0)\n            {\n                v9 = v72;\n                v71 = 0;\n                v57 = v17;\n                v58 = v28 + v74;\n                v28 = v5;\n                while (true)\n                {\n                    if (v71 != 0)\n                    {\n                        v59 = (unsigned int)v40 == 2;\n                        if (v57 == 0)\n                        {\n                            v71 = (unsigned int)v33 ^ 1;\n                            v60 = v4 & (char)((unsigned int)v33 ^ 1);\n                            if ((v4 & (char)((unsigned int)v33 ^ 1)) != 0)\n                            {\n                                if (v73 > v70)\n                                {\n                                    *((char *)(v29 + v70)) = 39;\n                                }\n                                if (v73 > v70 + 1)\n                                {\n                                    *((char *)(v29 + v70 + 1)) = 36;\n                                }\n                                v71 = v70 + 2;\n                                if (v73 > v70 + 2)\n                                {\n                                    *((char *)(v29 + v70 + 2)) = 39;\n                                }\n                                v70 += 3;\n                                v33 = v47;\n                            }\n                            if (v73 > v70)\n                            {\n                                *((char *)(v29 + v70)) = 92;\n                            }\n                            if (v73 > v70 + 1)\n                            {\n                                v61 = v41;\n                                v62 = (char)v41 % 64;\n                                *((unsigned long long *)(v29 + v70 + 1)) = (unsigned long long)(unsigned int)rax<4> + 48;\n                            }\n                            v47 = v70 + 2;\n                            if (v73 > v70 + 2)\n                            {\n                                v64 = v41;\n                                v65 = (char)v41 % 8;\n                                v47 = (unsigned int)((rax<4> & 7) + 48);\n                                *((unsigned long long *)(v29 + v70 + 2)) = v47;\n                            }\n                            v74 += 1;\n                            v70 += 3;\n                            v41 = ((unsigned int)v41 & 7) + 48;\n                            if (v74 < v58)\n                            {\n                                v71 = v71;\n                            }\n                            else\n                            {\n                                v72 = (char)v9;\n                            }\n                        }\n                        else\n                        {\n                            v4 = v59;\n                        }\n                    }\n                    else\n                    {\n                        v47 = (v71 ^ 1) & (unsigned int)v33;\n                        if (v28 != 0)\n                        {\n                            if (v73 > v70)\n                            {\n                                *((char *)(v29 + v70)) = 92;\n                            }\n                            v70 += 1;\n                        }\n                        v74 += 1;\n                        if (v74 >= v58)\n                        {\n                            v72 = (char)v9;\n                        }\n                        else if (v47 != 0)\n                        {\n                            if (v73 > v70)\n                            {\n                                *((char *)(v29 + v70)) = 39;\n                            }\n                            v47 = v70 + 1;\n                            if (v73 > v70 + 1)\n                            {\n                                *((char *)(v29 + v70 + 1)) = 39;\n                            }\n                            v70 += 2;\n                            v28 = 0;\n                            v33 = 0;\n                        }\n                        else\n                        {\n                            v28 = 0;\n                        }\n                    }\n                    if ((v74 < v58 || v71 == 0) && (v71 == 0 || v57 == 0) && (v74 < v58 || v71 != 0))\n                    {\n                        if (v73 > v70)\n                        {\n                            *((unsigned long long *)(v29 + v70)) = v41;\n                        }\n                        v41 = (char)*((char *)(v7 + v74));\n                        v70 += 1;\n                    }\n                }\n            }\n            if (...)\n            {\n                v3 = v27;\n                v2 = v26;\n                v1 = 0;\n                v70 = (unsigned int)sub_40c550();\n            }\n            if (v17 == 0 && (((char)((unsigned long long)v25[v41 >> 5] >> ((char)v41 & 31)) & 1) != 0 || v5 != 0) && (v25 != 0 || v5 != 0) || v5 == 0 && (((char)((unsigned long long)v25[v41 >> 5] >> ((char)v41 & 31)) & 1) == 0 || v25 == 0) || (v15 != 1 || v71 != 0) && v70 >= v73)\n            {\n                if (v70 < v73)\n                {\n                    *((unsigned long long *)(v29 + v70)) = v41;\n                }\n                v70 += 1;\n                v6 = (v72 == 0? 0 : (unsigned int)(char)(char)(stack_base)[-169]);\n            }\n            if (...)\n            {\n                v85 = v70;\n                return v85;\n            }\n        }\n        *((char *)v29) = 39;\n        v72 = 2;\n        v13 = \"'\";\n        v8 = 1;\n        v17 = 0;\n        v18 = v78;\n    }\n}\n"
        },
        {
            "funcName": "sub_405390",
            "funcStartAddr": "0x405390",
            "funcEndAddr": "0x4053b6",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[64];\n    unsigned long long field_40;\n} struct_0;\n\nint sub_405390()\n{\n    unsigned long long v1;  // rax\n    struct_0 *v2;  // rdi\n\n    v1 = sub_40b8c0();\n    v2->field_40 = v1;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_415188",
            "funcStartAddr": "0x415188",
            "funcEndAddr": "0x4151a8",
            "decompiledFuncCode": "extern unsigned long long g_61ce30;\n\nint sub_415188()\n{\n    unsigned long long *v1;  // rbx\n    unsigned long long v2;  // rax\n    unsigned long v4;  // rdx\n\n    v1 = &g_61ce30;\n    while (true)\n    {\n        v2 = *(v1);\n        if (*(v1) == -1)\n        {\n            break;\n        }\n        rax<8>();\n        v1 = &v1[-1];\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_40b770",
            "funcStartAddr": "0x40b770",
            "funcEndAddr": "0x40b7d0",
            "decompiledFuncCode": "int sub_40b770()\n{\n    unsigned long long v1;  // rdx\n    unsigned long long v2;  // rax\n    unsigned long long v3[2];  // rdi\n    unsigned long long v4;  // r8\n    unsigned long long v5;  // rsi\n    unsigned long long v6[2];  // r8\n    unsigned long long v7;  // rcx\n    unsigned long long v8;  // r9\n    unsigned long long v9[2];  // rdx\n\n    v2 = v1;\n    v9 = *(v3);\n    if (v3[1] > *(v3))\n    {\n        v8 = 0;\n        do\n        {\n            v4 = *(v9);\n            if (*(v9) != 0)\n            {\n                if (v2 <= v8)\n                {\n                    break;\n                }\n                *((unsigned long long *)(v5 + v8 * 8)) = v4;\n                v6 = v9[1];\n                v7 = v8 + 1;\n                if (v9[1] != 0)\n                {\n                    while (true)\n                    {\n                        if (v2 != v7)\n                        {\n                            v7 += 1;\n                            *((unsigned long long [2])(v5 + v7 * 8 - 8)) = *(v6);\n                            v6 = v6[1];\n                            if (v6 == 0)\n                            {\n                                break;\n                            }\n                        }\n                        else\n                        {\n                            return v2;\n                        }\n                    }\n                }\n                v8 = v7;\n            }\n            v9 = &v9[2];\n        }\n        while (v3[1] > v9);\n        return v8;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_40f450",
            "funcStartAddr": "0x40f450",
            "funcEndAddr": "0x40f45a",
            "decompiledFuncCode": "int sub_40f450()\n{\n}\n"
        },
        {
            "funcName": "sub_40a7c0",
            "funcStartAddr": "0x40a7c0",
            "funcEndAddr": "0x40a7c8",
            "decompiledFuncCode": "extern unsigned long long g_61d938;\n\nint sub_40a7c0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long v2;  // rax\n\n    g_61d938 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40c30a",
            "funcStartAddr": "0x40c30a",
            "funcEndAddr": "0x40c323",
            "decompiledFuncCode": "int sub_40c30a()\n{\n    unsigned long long *v1;  // rsi\n    unsigned long long *v3;  // rdi\n    unsigned long long v5;  // rax\n    char v6;  // al\n\n    v5 = strcmp(*(v3), *(v1));\n    v6 = (unsigned int)v5 == 0;\n    return rax<8>;\n}\n"
        },
        {
            "funcName": "sub_409b50",
            "funcStartAddr": "0x409b50",
            "funcEndAddr": "0x409c7b",
            "decompiledFuncCode": "int sub_409b50()\n{\n    unsigned int *v0;  // [bp-0x160]\n    unsigned int v1;  // [bp-0x158]\n    unsigned long v2;  // [bp-0x150]\n    unsigned int v3;  // [bp-0x148]\n    unsigned int v4;  // [bp-0x144]\n    unsigned int v6;  // edx\n    unsigned int v7;  // ebp\n    unsigned long long v8;  // rbx\n    unsigned int v9;  // r9d\n    void *v11;  // rbx\n    unsigned int v12;  // edi\n    unsigned long v13;  // rsi\n    unsigned int v14;  // r8d\n    unsigned int *v16;  // r9\n    unsigned long long|unsigned int v17;  // r12\n    unsigned long v18;  // rcx\n    unsigned long long v19;  // rax\n\n    v7 = v6;\n    v8 = linkat();\n    if ((char)v9 == 1 && (unsigned int)v8 != 0 && *(v0) == 17)\n    {\n        v0 = __errno_location();\n        v11 = (unsigned long long)(unsigned int)sub_409ac0();\n        if (v11 != 0)\n        {\n            v1 = v12;\n            v2 = v13;\n            v3 = v6;\n            v4 = v14;\n            v16 = v0;\n            if (sub_40e910() != 0)\n            {\n                v17 = *(v0);\n            }\n            else\n            {\n                v0 = v0;\n                v17 = renameat(v7, (unsigned int)v11, v7, v18);\n                if ((unsigned int)v17 != 0)\n                {\n                    v17 = *(v0);\n                }\n                v0 = v0;\n                unlinkat(v7, (unsigned int)v11, 0x0);\n                v16 = v0;\n            }\n            if (v11 != stack_base + -312)\n            {\n                v0 = v16;\n                free(v11);\n                v16 = v0;\n            }\n            v8 = 1;\n            if (v17 != 0)\n            {\n                *((unsigned long long *)&v16) = v17;\n                v8 = -18446744069414584321;\n            }\n        }\n        else\n        {\n            v8 = -18446744069414584321;\n        }\n    }\n    v19 = v8;\n    return v19;\n}\n"
        },
        {
            "funcName": "sub_414a90",
            "funcStartAddr": "0x414a90",
            "funcEndAddr": "0x414ad1",
            "decompiledFuncCode": "int sub_414a90()\n{\n    unsigned long long *v1;  // rdi\n\n    __explicit_bzero_chk();\n    free(v1);\n    if (*(v1) == 0)\n    {\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_40dca0",
            "funcStartAddr": "0x40dca0",
            "funcEndAddr": "0x40dd0d",
            "decompiledFuncCode": "int sub_40dca0()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_40d780();\n}\n"
        },
        {
            "funcName": "sub_414930",
            "funcStartAddr": "0x414930",
            "funcEndAddr": "0x414a72",
            "decompiledFuncCode": "typedef struct struct_0 {\n    struct struct_1 *field_0;\n    char padding_8[8];\n    unsigned long long field_10;\n    unsigned long long field_18;\n} struct_0;\n\nint sub_414930()\n{\n    void tmp_20;  // tmp #20\n    unsigned long long v1[4];  // rdi\n    struct_0 *v2;  // r12\n    void *v3;  // rsi\n    unsigned long v4;  // rdx\n    void *v5;  // rdi\n    void *v6;  // rbp\n    unsigned long v7;  // rbx\n    unsigned long long v9;  // r15\n    unsigned int *v11;  // r14\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rdx\n    unsigned long long v15;  // rdi\n    unsigned long v16;  // rdx\n    char *v18;  // r13\n    void *v20;  // r13\n\n    v2 = v1;\n    v6 = v3;\n    v7 = v4;\n    v18 = *(v1);\n    if (*(v1) != 0)\n    {\n        v11 = __errno_location();\n        while (true)\n        {\n            v13 = fread_unlocked(v6, 0x1, v7, v18);\n            v14 = *(v11);\n            v6 += v13;\n            v7 -= v13;\n            if (v7 == v13)\n            {\n                break;\n            }\n            v15 = v2->field_10;\n            tmp_20 = v14;\n            v16 = (unsigned int)((*(v2->field_0) & 32) == 0? 0 : (unsigned int)v14);\n            *(v11) = ((*(v2->field_0) & 32) == 0? 0 : tmp_20);\n            v2->padding_8();\n            v18 = v2->field_0;\n        }\n    }\n    else\n    {\n        v9 = v1[3];\n        v20 = &v1[263];\n        if (v4 > v1[3])\n        {\n            while (true)\n            {\n                v5 = v6;\n                v6 += v9;\n                v7 -= v9;\n                memcpy(v5, 0x800 - v9 + v20, v9);\n                if ((v6 & 7) != 0)\n                {\n                    v9 = 0x800;\n                    sub_414ae0();\n                }\n                else\n                {\n                    while (true)\n                    {\n                        if (v7 > 2047)\n                        {\n                            v6 += 0x800;\n                            v7 -= 0x800;\n                            v2->field_18 = 0;\n                            return sub_414ae0();\n                        }\n                    }\n                    sub_414ae0();\n                }\n            }\n            v9 = 0x800;\n        }\n        else\n        {\n            v20 = &((unsigned long long [4])((char *)&v1[263] + -1 * v1[3]))[0x100];\n        }\n        v13 = memcpy(v6, v20, v7);\n        v2->field_18 = v9 - v7;\n    }\n    return v13;\n}\n"
        },
        {
            "funcName": "sub_4096d0",
            "funcStartAddr": "0x4096d0",
            "funcEndAddr": "0x409746",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_0;\n\nint sub_4096d0()\n{\n    unsigned long long v1[3];  // rbx\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rdx\n    struct_0 *v5;  // rbp\n    unsigned long long v6;  // rax\n\n    v1 = (unsigned long long)(unsigned int)sub_4100e0();\n    v1[0] = v2;\n    v1[2] = (unsigned int)sub_410310();\n    v1[1] = v3;\n    if (rbp<8> != 0)\n    {\n        rbp<8> = sub_40c060();\n        v6 = 0;\n        if (v1 != rbp<8>)\n        {\n            free(v1[2]);\n            free(v1);\n            v6 = v5->field_10;\n        }\n        return v6;\n    }\n    sub_410330(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_414920",
            "funcStartAddr": "0x414920",
            "funcEndAddr": "0x414925",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_0;\n\nint sub_414920()\n{\n    struct_0 *v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rax\n\n    v1->field_10 = v2;\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_40e440",
            "funcStartAddr": "0x40e440",
            "funcEndAddr": "0x40e44b",
            "decompiledFuncCode": "int sub_40e440()\n{\n}\n"
        },
        {
            "funcName": "sub_40e420",
            "funcStartAddr": "0x40e420",
            "funcEndAddr": "0x40e436",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_40e420()\n{\n    unsigned long long v1;  // rax\n    struct_0 *v2;  // rdi\n    struct_0 *v3;  // rsi\n\n    v1 = -18446744069414584321;\n    if (v2->field_8 >= v3->field_8)\n    {\n        v1 = (char)(v2->field_8 > v3->field_8);\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_40a640",
            "funcStartAddr": "0x40a640",
            "funcEndAddr": "0x40a6a5",
            "decompiledFuncCode": "int sub_40a640()\n{\n    void tmp_5;  // tmp #5\n    unsigned long long v1;  // rdi\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // r8\n    unsigned long long v4;  // rax\n    unsigned long v5;  // rax\n    unsigned long v6;  // rdx\n    unsigned long v7;  // r8\n\n    if (v1 != 0 && v2 != 0)\n    {\n        v3 = v2;\n        for (v4 = v1; (0 CONCAT v4) % v3 >> 64 != 0; v3 = tmp_5 >> 64)\n        {\n            v4 = v3;\n        }\n        v5 = (0 CONCAT v1) % v3;\n        v7 = (0 CONCAT v1) % v3 * v2;\n    }\n    if (v2 == 0 || v1 == 0 || v7 > v6 || (0 CONCAT v7) % v2 != v5)\n    {\n        v7 = ((v2 != 0? v2 : 0x2000) <= v6? (v2 != 0? v2 : 0x2000) : v6);\n    }\n    return v7;\n}\n"
        },
        {
            "funcName": "sub_413be0",
            "funcStartAddr": "0x413be0",
            "funcEndAddr": "0x413bf0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n    unsigned int field_18;\n} struct_0;\n\nint sub_413be0()\n{\n    struct_0 *v1;  // rdi\n    unsigned long v2;  // rax\n\n    v1->field_10 = 0;\n    v1->field_18 = 9827862;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_409c90",
            "funcStartAddr": "0x409c90",
            "funcEndAddr": "0x409d84",
            "decompiledFuncCode": "int sub_409c90()\n{\n    unsigned long v0;  // [bp-0x148]\n    unsigned int v1;  // [bp-0x140]\n    unsigned long v3;  // rsi\n    unsigned int v4;  // ebp\n    char v5;  // cl\n    unsigned int *v6;  // r14\n    void *v7;  // rbx\n    unsigned long v8;  // rdi\n    unsigned long long v9;  // rax\n    unsigned int v10;  // edx\n    unsigned long long v11;  // rax\n    unsigned int|unsigned long v12;  // r12d\n    unsigned long long v13;  // rbx\n    unsigned long long v14;  // rax\n\n    v4 = v3;\n    v13 = symlinkat();\n    if (v5 == 1 && (unsigned int)v13 != 0)\n    {\n        v6 = __errno_location();\n        if (*(v6) == 17)\n        {\n            v7 = (unsigned long long)(unsigned int)sub_409ac0();\n            if (v7 != 0)\n            {\n                v0 = v8;\n                v1 = v3;\n                v9 = sub_40e910();\n                if (v9 != 0)\n                {\n                    v12 = *(v6);\n                }\n                else\n                {\n                    v11 = renameat(v4, (unsigned int)v7, v4, v10);\n                    if (!(v11 == 0))\n                    {\n                        v12 = *(v6);\n                        unlinkat(v4, (unsigned int)v7, 0x0);\n                    }\n                    else if (v7 != stack_base + -312)\n                    {\n                        free(v7);\n                    }\n                }\n                if (v9 != 0 || v11 != 0)\n                {\n                    if (v7 != stack_base + -312)\n                    {\n                        free(v7);\n                    }\n                    if (v12 != 0)\n                    {\n                        *((unsigned long *)&v6) = v12;\n                        v13 = -18446744069414584321;\n                    }\n                }\n                if (v12 == 0 || v9 == 0 && v11 == 0)\n                {\n                    v13 = 1;\n                }\n            }\n            else\n            {\n                v13 = -18446744069414584321;\n            }\n        }\n    }\n    v14 = v13;\n    return v14;\n}\n"
        },
        {
            "funcName": "sub_410c50",
            "funcStartAddr": "0x410c50",
            "funcEndAddr": "0x410cb3",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[44];\n    unsigned int field_2c;\n    char padding_30[24];\n    char field_48;\n} struct_0;\n\nint sub_410c50()\n{\n    struct_0 *v1;  // rdi\n    unsigned long v3;  // rsi\n    char v4;  // dl\n    unsigned long long v5;  // rax\n    unsigned long v6;  // rdi\n\n    if (v1->field_2c == (unsigned int)v3 && v1->field_2c != -100)\n    {\n        abort(); /* do not return */\n    }\n    if (v1->field_2c == -100 || v1->field_2c != (unsigned int)v3)\n    {\n        if (!(v4 == 0))\n        {\n            v5 = sub_413d80();\n            if ((unsigned int)v5 >= 0)\n            {\n                v1->field_2c = v3;\n                return close(v5);\n            }\n        }\n        else if ((v1->field_48 & 4) == 0)\n        {\n            if (v1->field_2c >= 0)\n            {\n                v6 = v1->field_2c;\n                v1->field_2c = v3;\n                return close(v6);\n            }\n        }\n        if (v1->field_2c < 0 && v4 == 0 || v4 == 0 && (v1->field_48 & 4) != 0 || (unsigned int)v5 < 0 && v4 != 0)\n        {\n            v1->field_2c = v3;\n            return v5;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_413c70",
            "funcStartAddr": "0x413c70",
            "funcEndAddr": "0x413caa",
            "decompiledFuncCode": "int sub_413c70()\n{\n    char v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long long v3;  // rdi\n    unsigned long long v4[2];  // rbx\n    unsigned long long v5;  // rax\n\n    v4 = v3;\n    v5 = clock_gettime();\n    if ((unsigned int)v5 != 0)\n    {\n        gettimeofday(&v0, NULL);\n        v4[0] = *((long long *)&v0);\n        v5 = v1 * 1000;\n        v4[1] = v1 * 1000;\n    }\n    return v5;\n}\n"
        },
        {
            "funcName": "sub_40a57a",
            "funcStartAddr": "0x40a57a",
            "funcEndAddr": "0x40a5ac",
            "decompiledFuncCode": "extern int512_t g_416da0;\n\nint sub_40a57a()\n{\n    return *((int *)&((char *)&g_416da0)[4 * (unsigned long long)(unsigned int)sub_413ac0()]);\n}\n"
        },
        {
            "funcName": "sub_4105e0",
            "funcStartAddr": "0x4105e0",
            "funcEndAddr": "0x410608",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n    char padding_50[8];\n    unsigned long long field_58;\n} struct_0;\n\nint sub_4105e0()\n{\n    unsigned long long v1;  // rax\n    struct_0 *v2;  // rdi\n\n    v1 = 0;\n    if (v2->field_28 <= v2->field_20)\n    {\n        v1 = v2->field_10 - v2->field_8;\n        if (((unsigned short)v2->field_0 & 0x100) != 0)\n        {\n            v1 = v2->field_10 - v2->field_8 + v2->field_58 - v2->field_48;\n        }\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_410240",
            "funcStartAddr": "0x410240",
            "funcEndAddr": "0x41028a",
            "decompiledFuncCode": "int sub_410240() { crash_skku;\n}"
        },
        {
            "funcName": "sub_4106b0",
            "funcStartAddr": "0x4106b0",
            "funcEndAddr": "0x4106ba",
            "decompiledFuncCode": "int sub_4106b0()\n{\n    unsigned long long *v1;  // rsi\n    unsigned long long v2;  // rax\n    unsigned long long *v3;  // rdi\n    char v4;  // al\n\n    v2 = *(v1);\n    v4 = *(v3) == *(v1);\n    return rax<8>;\n}\n"
        },
        {
            "funcName": "sub_40ba50",
            "funcStartAddr": "0x40ba50",
            "funcEndAddr": "0x40baf5",
            "decompiledFuncCode": "int sub_40ba50()\n{\n    unsigned long long v1[10];  // rdi\n    unsigned long long v2[10];  // rbp\n    unsigned long long v3[2];  // r12\n    unsigned long long v4;  // rdi\n    unsigned long long v6;  // rdx\n    unsigned long long v7;  // rcx\n    unsigned long long v8[2];  // rbx\n    unsigned long long v9;  // rax\n    unsigned long long v10;  // rdi\n\n    v2 = v1;\n    v3 = *(v1);\n    if (*(v1) < v1[1])\n    {\n        while (true)\n        {\n            if (*(v3) == 0)\n            {\n                v3 = &v3[2];\n                if (v2[1] <= v3)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v8 = v3[1];\n                v9 = v2[8];\n                if (v3[1] != 0)\n                {\n                    do\n                    {\n                        if (v9 != 0)\n                        {\n                            v4 = *(v8);\n                            rax<8>();\n                            v9 = v2[8];\n                        }\n                        v6 = v8[1];\n                        v7 = v2[9];\n                        v8[0] = 0;\n                        v8[1] = v7;\n                        v2[9] = v8;\n                        v8 = v6;\n                    }\n                    while (v6 != 0);\n                }\n                if (v9 != 0)\n                {\n                    v10 = *(v3);\n                    v9 = rax<8>();\n                }\n                v3[0] = 0;\n                v3 = &v3[2];\n                v3[-1] = 0;\n                if (v2[1] <= v3)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    v2[3] = 0;\n    v2[4] = 0;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_4105a0",
            "funcStartAddr": "0x4105a0",
            "funcEndAddr": "0x4105db",
            "decompiledFuncCode": "int sub_4105a0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned int *v3;  // rdi\n\n    v0 = v2;\n    if (v3 != 0 && __freading() != 0 && ((unsigned short)*(v3) & 0x100) != 0)\n    {\n        sub_410610();\n    }\n}\n"
        },
        {
            "funcName": "sub_41035c",
            "funcStartAddr": "0x41035c",
            "funcEndAddr": "0x410361",
            "decompiledFuncCode": "int sub_41035c()\n{\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_410610",
            "funcStartAddr": "0x410610",
            "funcEndAddr": "0x410666",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n    char padding_50[64];\n    unsigned long long field_90;\n} struct_0;\n\nint sub_410610()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    struct_0 *v4;  // rdi\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    struct_0 *v7;  // rbx\n    unsigned int v8;  // esi\n    unsigned int v9;  // edx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // r12\n\n    if (v4->field_10 == v4->field_8 && v4->field_28 == v4->field_20 && v4->field_48 == 0)\n    {\n        v2 = v5;\n        v1 = stack_base + 0;\n        v0 = v6;\n        v7 = v4;\n        v10 = lseek(fileno(v4), v8, v9);\n        if (v10 != -1)\n        {\n            v7->field_0 = v7->field_0 & -17;\n            v7->field_90 = v10;\n            v10 = 0;\n        }\n        v11 = v0;\n        v12 = v2;\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_40e450",
            "funcStartAddr": "0x40e450",
            "funcEndAddr": "0x40e7b7",
            "decompiledFuncCode": "int sub_40e450() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40ea70",
            "funcStartAddr": "0x40ea70",
            "funcEndAddr": "0x40ea9b",
            "decompiledFuncCode": "int sub_40ea70()\n{\n    unsigned int v0;  // [bp-0xc]\n    unsigned int v2;  // edx\n    unsigned int v3;  // ecx\n\n    v0 = v2;\n    if (v3 <= 2)\n    {\n        return sub_40e910();\n    }\n    sub_40e8f0(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_413790",
            "funcStartAddr": "0x413790",
            "funcEndAddr": "0x413795",
            "decompiledFuncCode": "int sub_413790()\n{\n    unsigned int *v1;  // rcx\n    unsigned int v2;  // edx\n\n    *(v1) = v2;\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_414fd0",
            "funcStartAddr": "0x414fd0",
            "funcEndAddr": "0x414fde",
            "decompiledFuncCode": "int sub_414fd0()\n{\n}\n"
        },
        {
            "funcName": "sub_40b2c0",
            "funcStartAddr": "0x40b2c0",
            "funcEndAddr": "0x40b3fa",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[24];\n    unsigned long long field_18;\n    char padding_20[40];\n    struct struct_1 *field_48;\n} struct_0;\n\nint sub_40b2c0()\n{\n    unsigned long long v1;  // rdx\n    unsigned long long v2;  // r14\n    unsigned long long v3[4];  // rsi\n    unsigned long long v4[4];  // r13\n    struct_0 *v5;  // rdi\n    unsigned long long v6[10];  // rbp\n    unsigned long long v7;  // r15\n    unsigned long long v8[2];  // rax\n    unsigned long long v9;  // rdx\n    unsigned long long v10[2];  // rbx\n    unsigned long long v11;  // r15\n    unsigned long long v12[2];  // r12\n    unsigned long long v13[2];  // rbx\n    unsigned long long v14[2];  // rax\n    unsigned long long v15;  // rdx\n\n    v2 = v1;\n    v4 = v3;\n    v6 = v5;\n    v12 = *(v3);\n    if (*(v3) < v3[1])\n    {\n        while (true)\n        {\n            v11 = *(v12);\n            if (*(v12) != 0)\n            {\n                v10 = v12[1];\n                if (v12[1] != 0)\n                {\n                    while (true)\n                    {\n                        v7 = *(v10);\n                        v8 = sub_40b0f0();\n                        v9 = v10[1];\n                        if (*(v8) != 0)\n                        {\n                            v10[1] = v8[1];\n                            v8[1] = v10;\n                            v10 = v9;\n                            if (v9 == 0)\n                            {\n                                break;\n                            }\n                        }\n                        else\n                        {\n                            v8[0] = v7;\n                            v6[3] = v6[3] + 1;\n                            v10[0] = 0;\n                            *((unsigned long long [10])&v10[1]) = v6[9];\n                            v6[9] = v10;\n                            if (v10 == 0)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    v11 = *(v12);\n                }\n                v12[1] = 0;\n                if (v2 == 0)\n                {\n                    v13 = (unsigned long long)(unsigned int)sub_40b0f0();\n                    if (*(v13) != 0)\n                    {\n                        v14 = v6[9];\n                        if (v6[9] != 0)\n                        {\n                            v6[9] = v5->field_48->field_8;\n                        }\n                        else\n                        {\n                            v14 = malloc(0x10);\n                            if (v14 == 0)\n                            {\n                                return 0;\n                            }\n                        }\n                        if (v6[9] != 0 || v14 != 0)\n                        {\n                            v15 = v13[1];\n                            v14[0] = v11;\n                            v14[1] = v15;\n                            v13[1] = v14;\n                        }\n                    }\n                    else\n                    {\n                        v13[0] = v11;\n                        v6[3] = v6[3] + 1;\n                    }\n                    if (v14 != 0)\n                    {\n                        v12[0] = 0;\n                        v12 = &v12[2];\n                        v4[3] = v4[3] - 1;\n                        if (v4[1] <= v12)\n                        {\n                            break;\n                        }\n                    }\n                }\n            }\n            if (*(v12) == 0 || v2 != 0)\n            {\n                v12 = &v12[2];\n                if (v3[1] <= v12)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    return 1;\n}\n"
        },
        {
            "funcName": "sub_40ff00",
            "funcStartAddr": "0x40ff00",
            "funcEndAddr": "0x40ff59",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n} struct_0;\n\nint sub_40ff00()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long long v2;  // r9\n    struct_0 *v3;  // r8\n    unsigned long long v4;  // rax\n    unsigned long long *v5;  // r10\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // r10\n    unsigned long long v8;  // rax\n\n    v2 = 0;\n    do\n    {\n        v4 = v3->field_0;\n        if (v3->field_0 <= 47)\n        {\n            v5 = v4 + v3->field_10;\n            v3->field_0 = (unsigned int)v4 + 8;\n            v6 = *(v5);\n            v0 = *(v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n        }\n        else\n        {\n            v7 = v3->field_8;\n            v3->field_8 = v3->field_8 + 8;\n            v8 = *(v7);\n            v0 = *(v7);\n            if (v8 == 0)\n            {\n                break;\n            }\n        }\n        v2 += 1;\n    }\n    while (v2 != 10);\n    return sub_40fb00();\n}\n"
        },
        {
            "funcName": "sub_40d970",
            "funcStartAddr": "0x40d970",
            "funcEndAddr": "0x40d97f",
            "decompiledFuncCode": "extern int512_t g_61da60;\n\nint sub_40d970()\n{\n    unsigned long v1;  // rdi\n    unsigned int v2;  // esi\n\n    *((unsigned int *)(v1 == 0? &g_61da60 : v1)) = v2;\n    return &g_61da60;\n}\n"
        },
        {
            "funcName": "sub_40dc80",
            "funcStartAddr": "0x40dc80",
            "funcEndAddr": "0x40dc92",
            "decompiledFuncCode": "int sub_40dc80()\n{\n}\n"
        },
        {
            "funcName": "sub_40d920",
            "funcStartAddr": "0x40d920",
            "funcEndAddr": "0x40d954",
            "decompiledFuncCode": "int sub_40d920()\n{\n    unsigned int v1;  // [bp+0x100008]\n\n    *(__errno_location()) = v1;\n    return sub_4102e0();\n}\n"
        },
        {
            "funcName": "sub_40e7f0",
            "funcStartAddr": "0x40e7f0",
            "funcEndAddr": "0x40e84e",
            "decompiledFuncCode": "int sub_40e7f0()\n{\n    unsigned long v2;  // rbx\n    unsigned int *v3;  // rbx\n    unsigned long long v4;  // rbp\n    unsigned int v6;  // r12d\n    unsigned int *v7;  // rbx\n\n    if (v2 != 0)\n    {\n        v2 = sub_40a880();\n        v4 = (unsigned int)sub_40e450();\n        if (closedir() == 0)\n        {\n            return stack_base + 0;\n        }\n        v6 = *(v3);\n        v3 = __errno_location();\n        free(v3);\n        *(v7) = v6;\n        return 0;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_413b30",
            "funcStartAddr": "0x413b30",
            "funcEndAddr": "0x413b7c",
            "decompiledFuncCode": "int sub_413b30()\n{\n    unsigned long long *v1;  // rsi\n    unsigned long long v2;  // r14\n    void *v3;  // rdx\n    void *v4;  // rdi\n    unsigned int v5;  // rcx\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // rbx\n    void *v8;  // rbp\n    unsigned long long v9;  // rax\n\n    v2 = *(v1);\n    if (*(v1) != 0)\n    {\n        v7 = &v1[1];\n        v8 = v3;\n        do\n        {\n            v6 = memcmp(v4, v8, v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n            v2 = *(v7);\n            v8 += v5;\n            v7 = &v7[1];\n        }\n        while (v2 != 0);\n    }\n    v9 = v2;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_410cc0",
            "funcStartAddr": "0x410cc0",
            "funcEndAddr": "0x410d0f",
            "decompiledFuncCode": "int sub_410cc0()\n{\n    unsigned int v1[19];  // rdi\n    char v4;  // bpl\n\n    if (((char)v1[9] & 4) == 0)\n    {\n        if (((char)(v1[9] >> 8) & 2) != 0)\n        {\n            sub_410c50();\n        }\n        else\n        {\n            v4 = fchdir(v1[5]) != 0;\n        }\n    }\n    sub_410a80();\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_4136f0",
            "funcStartAddr": "0x4136f0",
            "funcEndAddr": "0x413708",
            "decompiledFuncCode": "int sub_4136f0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_413040();\n}\n"
        },
        {
            "funcName": "sub_40eaf0",
            "funcStartAddr": "0x40eaf0",
            "funcEndAddr": "0x40eb3c",
            "decompiledFuncCode": "int sub_40eaf0()\n{\n    unsigned int v1;  // [bp+0x100008]\n    unsigned int v2;  // rdi\n    unsigned long long v3;  // rax\n\n    if (v2 > 2)\n    {\n        return v2;\n    }\n    close(v2);\n    *(__errno_location()) = v1;\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_4097a0",
            "funcStartAddr": "0x4097a0",
            "funcEndAddr": "0x4097c8",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned int field_10;\n    char padding_14[4];\n    unsigned long long field_18;\n    unsigned short field_20;\n    char padding_22[6];\n    unsigned long long field_28;\n} struct_0;\n\nint sub_4097a0()\n{\n    struct_0 *v1;  // rsi\n    unsigned int v2;  // edi\n\n    v1->field_0 = v2;\n    v1->field_28 = 0;\n    v1->field_8 = 0;\n    v1->field_18 = 0;\n    v1->field_20 = 0;\n    v1->field_10 = 1;\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_4049f0",
            "funcStartAddr": "0x4049f0",
            "funcEndAddr": "0x404a21",
            "decompiledFuncCode": "extern unsigned int g_416330;\n\nint sub_4049f0()\n{\n    unsigned int *v0;  // [bp-0x8]\n    unsigned int *v2;  // rbx\n\n    v0 = v2;\n    *(v2) = 95;\n    error(0x1, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x416330, 0x5));\n}\n"
        },
        {
            "funcName": "sub_405400",
            "funcStartAddr": "0x405400",
            "funcEndAddr": "0x405424",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[26];\n    char field_1a;\n} struct_0;\n\nint sub_405400()\n{\n    unsigned int *v1;  // rax\n    struct_0 *v2;  // rdi\n\n    v1 = __errno_location();\n    v1 = *(v1) == 1 | *(v1) == 22;\n    if (*(v1) == 22 || *(v1) == 1)\n    {\n        v1 = (unsigned long long)((unsigned int)v2->field_1a ^ 1);\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_40aad0",
            "funcStartAddr": "0x40aad0",
            "funcEndAddr": "0x40aad5",
            "decompiledFuncCode": "int sub_40aad0()\n{\n}\n"
        },
        {
            "funcName": "sub_40dec0",
            "funcStartAddr": "0x40dec0",
            "funcEndAddr": "0x40df2c",
            "decompiledFuncCode": "extern uint128_t g_61da60;\nextern uint128_t g_61da70;\nextern uint128_t g_61da80;\nextern unsigned long long g_61da90;\n\nint sub_40dec0()\n{\n    unsigned int|void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x20]\n    unsigned long v4;  // [bp-0x18]\n    unsigned long v6;  // rsi\n    unsigned long v7;  // rdx\n\n    *((uint128_t *)&v0) = g_61da60;\n    *((uint128_t *)&v1) = g_61da70;\n    *((uint128_t *)&v2) = g_61da80;\n    v4 = g_61da90;\n    v0 = 10;\n    if (v6 != 0 && v7 != 0)\n    {\n        v3 = v6;\n        v4 = v7;\n        return sub_40d780();\n    }\n    if (v7 == 0 || v6 == 0)\n    {\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_410130",
            "funcStartAddr": "0x410130",
            "funcEndAddr": "0x410132",
            "decompiledFuncCode": "int sub_410130()\n{\n}\n"
        },
        {
            "funcName": "sub_40b490",
            "funcStartAddr": "0x40b490",
            "funcEndAddr": "0x40b4f2",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_40b490()\n{\n    unsigned long long v1[4];  // rdi\n    unsigned long long v2[2];  // rcx\n    struct_0 *v3;  // rax\n    unsigned long long v4;  // rdx\n    unsigned long long v5;  // r8\n\n    v2 = *(v1);\n    v4 = 0;\n    v5 = 0;\n    if (*(v1) < v1[1])\n    {\n        while (true)\n        {\n            if (*(v2) != 0)\n            {\n                v3 = v2[1];\n                v5 += 1;\n                v4 += 1;\n                if (v2[1] != 0)\n                {\n                    do\n                    {\n                        v3 = v3->field_8;\n                        v4 += 1;\n                    }\n                    while (v3 != 0);\n                    v2 = &v2[2];\n                    if (*(v1) + 16 >= v1[1])\n                    {\n                        break;\n                    }\n                }\n            }\n            if (v2[1] == 0 || *(v2) == 0)\n            {\n                v2 = &v2[2];\n                if (v2 >= v1[1])\n                {\n                    break;\n                }\n            }\n        }\n    }\n    if (v1[3] != v5)\n    {\n        return 0;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_414910",
            "funcStartAddr": "0x414910",
            "funcEndAddr": "0x414915",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_414910()\n{\n    struct_0 *v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rax\n\n    v1->field_8 = v2;\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_409e20",
            "funcStartAddr": "0x409e20",
            "funcEndAddr": "0x409e75",
            "decompiledFuncCode": "extern unsigned int g_416aae;\n\nint sub_409e20()\n{\n    unsigned long v2;  // rax\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // r12\n\n    if ((unsigned int)v2 == 0)\n    {\n        v2 = (unsigned int)sub_40c430();\n        return v3;\n    }\n    v4 = (unsigned int)sub_40dfd0();\n    error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x416aae, 0x5));\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_404de0",
            "funcStartAddr": "0x404de0",
            "funcEndAddr": "0x4051d6",
            "decompiledFuncCode": "extern unsigned int g_4169c9;\nextern unsigned int g_4169da;\nextern unsigned int g_4169eb;\n\nint sub_404de0()\n{\n    void tmp_2;  // tmp #2\n    void tmp_14;  // tmp #14\n    unsigned int|unsigned long v0;  // [bp-0xa0]\n    void tmp_3;  // tmp #3\n    unsigned long v1;  // [bp-0x98]\n    unsigned int v2;  // [bp-0x90]\n    char v3;  // [bp-0x8b]\n    char v4;  // [bp-0x8a]\n    char v5;  // [bp-0x89]\n    void *v6;  // [bp-0x88]\n    unsigned long v7;  // [bp-0x80]\n    unsigned long long v8;  // [bp-0x78]\n    char v9;  // [bp-0x70]\n    unsigned long v10;  // [bp-0x68]\n    unsigned long long *v11;  // [bp-0x60]\n    unsigned long v12;  // [bp-0x58]\n    char *v13;  // [bp-0x48]\n    unsigned int v14;  // [bp-0x3c]\n    unsigned long v15;  // [bp+0x8]\n    unsigned long v16;  // [bp+0x10]\n    unsigned long v17;  // [bp+0x18]\n    unsigned long long *v18;  // [bp+0x20]\n    char *v19;  // [bp+0x28]\n    char v20;  // r9b\n    unsigned int v21;  // r9d\n    void *v22;  // rdx\n    unsigned int v23;  // esi\n    unsigned long v24;  // r8\n    unsigned long v25;  // rcx\n    unsigned int v26;  // edi\n    unsigned long long v27;  // cc_dep1\n    void *v29;  // r11\n    char *v30;  // rsi\n    unsigned int|unsigned long v31;  // rdx\n    unsigned long long v32;  // r9\n    unsigned long long v33;  // r9\n    unsigned long long v34;  // r12\n    unsigned long long|void * v35;  // r13\n    unsigned long long v36;  // r14\n    unsigned long long v37;  // r15\n    unsigned long long v38;  // rbx\n    unsigned long long|unsigned long v39;  // rax\n    unsigned long long v40;  // r15\n    unsigned int *v41;  // rbx\n    unsigned long long v42;  // rbx\n    unsigned long long v43;  // rbp\n    unsigned long long v44;  // rbp\n    unsigned long long v45;  // rax\n\n    v5 = v20;\n    v10 = v15;\n    *(v19) = 0;\n    v1 = v16;\n    v11 = v18;\n    v7 = v17;\n    v13 = v19;\n    *(v18) = 0;\n    if (v17 != 0)\n    {\n        v14 = v21;\n        v36 = 0;\n        v37 = 0;\n        v6 = v22;\n        v2 = v23;\n        *((int *)&v12) = (v24 == 0? v25 : v24);\n        while (true)\n        {\n            v39 = read(v26, v6, (v25 <= v7? *((long long *)&v9) : v7));\n            v8 = v39;\n            v27 = v39;\n            if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>))\n            {\n                v41 = __errno_location();\n                v40 = 0;\n                v44 = (unsigned int)sub_40dd80();\n                error(0x0, *(v41), (unsigned long long)dcgettext(0x0, 0x4169c9, 0x5));\n            }\n            else if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)))\n            {\n                v35 = v6;\n                v34 = v8;\n                v38 = v12;\n                *(v11) = *(v11) + v8;\n                v29 = v6;\n                v3 = v24 != 0;\n                while (true)\n                {\n                    tmp_2 = v38;\n                    tmp_14 = !(v38 <= v34);\n                    v38 = (!(v38 <= v34)? v34 : v38);\n                    v39 = (tmp_14? v34 : tmp_2) != 0 & v3;\n                    if (((tmp_14? v34 : tmp_2) != 0 & v3) != 0)\n                    {\n                        v30 = v35;\n                        v31 = v38;\n                        while (true)\n                        {\n                            if (*(v30) == 0)\n                            {\n                                v30 = &v30[1];\n                                v31 -= 1;\n                                if (v31 != 1)\n                                {\n                                    v0 = v29;\n                                    v39 = (char)(memcmp(v35, v30, (unsigned int)v39 ^ 0) != 0);\n                                }\n                                else\n                                {\n                                    v32 = (0 ^ 1) & (unsigned int)v11;\n                                }\n                            }\n                            else\n                            {\n                                v39 = v39;\n                                v31 = 0;\n                                v39 = 0;\n                            }\n                            if (v31 != 1 || *(v30) != 0)\n                            {\n                                v32 = v21 & v31;\n                                if (v38 == v34 && v39 != 0)\n                                {\n                                    if (v32 != 0)\n                                    {\n                                        v0 = 1;\n                                        v39 = 0;\n                                    }\n                                    else\n                                    {\n                                        v39 = 0;\n                                    }\n                                }\n                            }\n                            if (v39 == 0 || v38 != v34 || v31 == 1 && *(v30) == 0)\n                            {\n                                if (v32 == 0)\n                                {\n                                    break;\n                                }\n                                v0 = 0;\n                            }\n                            if (v32 != 0)\n                            {\n                                *((unsigned long long *)&v4) = v32;\n                                break;\n                            }\n                        }\n                        if ((v38 == v34 || v32 != 0) && (v32 != 0 || v39 != 0) && ((v31 & 15) == 0 || v31 == 1 || *(v30) != 0) && (v32 != 0 || v31 != 1 || *(v30) != 0) && (v31 == 1 || v39 == 0 || v38 != v34 || v32 != 0) && (*(v30) == 0 || v39 == 0 || v38 != v34 || v32 != 0))\n                        {\n                            v39 = sub_404d20();\n                            v33 = v4;\n                        }\n                        else if (v38 == v34 && v32 == 0 && v39 != 0 && ((v31 & 15) == 0 || *(v30) != 0) && (v31 != 1 || *(v30) != 0))\n                        {\n                            v37 += v38;\n                            v0 = 1;\n                            v4 = 0;\n                        }\n                        else if ((v38 == v34 || v32 != 0) && (v32 != 0 || v39 != 0) && ((v31 & 15) == 0 || v31 == 1 || *(v30) != 0) && (v32 != 0 || v31 != 1 || *(v30) != 0) && (v31 == 1 || v39 == 0 || v38 != v34 || v32 != 0) && (*(v30) == 0 || v39 == 0 || v38 != v34 || v32 != 0))\n                        {\n                            v39 = sub_40afb0();\n                            v33 = v4;\n                        }\n                    }\n                    else\n                    {\n                        v39 = v36;\n                        if ((char)v37 == 0 && v36 != 0 && (v38 == 0 || ((char)((unsigned int)v36 ^ 1) & v38 == v34) != 0))\n                        {\n                            v37 = v39;\n                        }\n                    }\n                    if (((tmp_14? v34 : tmp_2) != 0 & v3) == 0 || (char)v37 != 0)\n                    {\n                        if (((tmp_14? v34 : tmp_2) != 0 & v3) != 0 || ((char)((unsigned int)v36 ^ 1) & v38 == v34) == 0 && v38 != 0)\n                        {\n                            if (9223372036854775807 - v38 >= v37)\n                            {\n                                v37 += v38;\n                                v34 -= v38;\n                                v35 += v38;\n                                v36 = v39;\n                            }\n                            else\n                            {\n                                v40 = 0;\n                                v42 = (unsigned int)sub_40dd80();\n                                error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x4169eb, 0x5));\n                            }\n                        }\n                        if (((tmp_14? v34 : tmp_2) != 0 & v3) != 0 || v36 == 0 && v38 == 0 || v36 == 0 && ((char)((unsigned int)v36 ^ 1) & v38 == v34) != 0)\n                        {\n                            v39 = sub_40afb0();\n                            v33 = v4;\n                            if (v37 != v39)\n                            {\n                                v40 = v36;\n                                v43 = (unsigned int)sub_40dd80();\n                                error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x4169da, 0x5));\n                            }\n                        }\n                        if ((((tmp_14? v34 : tmp_2) != 0 & v3) != 0 || v36 != 0) && (v38 == 0 || ((tmp_14? v34 : tmp_2) != 0 & v3) != 0 || ((char)((unsigned int)v36 ^ 1) & v38 == v34) != 0))\n                        {\n                            v39 = sub_404d20();\n                            v33 = v4;\n                        }\n                    }\n                    if (((tmp_14? v34 : tmp_2) != 0 & v3) == 0 && v38 == 0 || ((tmp_14? v34 : tmp_2) != 0 & v3) == 0 && ((char)((unsigned int)v36 ^ 1) & v38 == v34) != 0 || ((tmp_14? v34 : tmp_2) != 0 & v3) != 0 && (char)v37 != 0)\n                    {\n                        v37 += v38;\n                        v0 = 1;\n                        v4 = 0;\n                    }\n                    if ((((tmp_14? v34 : tmp_2) != 0 & v3) == 0 || (char)v37 != 0) && (((tmp_14? v34 : tmp_2) != 0 & v3) != 0 || v36 != 0) && (v38 == 0 || ((tmp_14? v34 : tmp_2) != 0 & v3) != 0 || ((char)((unsigned int)v36 ^ 1) & v38 == v34) != 0) && (char)v37 != 0 || (((tmp_14? v34 : tmp_2) != 0 & v3) == 0 || (char)v37 != 0) && (v36 == 0 || ((tmp_14? v34 : tmp_2) != 0 & v3) != 0) && (v38 == 0 || ((tmp_14? v34 : tmp_2) != 0 & v3) != 0 || ((char)((unsigned int)v36 ^ 1) & v38 == v34) != 0) && v37 == v39)\n                    {\n                        if (v0 == 0)\n                        {\n                            v34 -= v38;\n                            v36 = v39;\n                            v35 += v38;\n                            v37 = v38;\n                        }\n                        else if (v38 != 0)\n                        {\n                            if (v33 != 0)\n                            {\n                                v37 = v38;\n                                v36 = v39;\n                                v38 = 0;\n                            }\n                            else\n                            {\n                                v34 -= v38;\n                                v36 = v39;\n                                v35 += v38;\n                                v37 = 0;\n                            }\n                        }\n                    }\n                    if (...)\n                    {\n                        tmp_3 = v7;\n                        v7 -= v8;\n                        *((unsigned long long *)&v13) = v39;\n                        if (tmp_3 != v8)\n                        {\n                            v36 = v39;\n                        }\n                    }\n                }\n                if (((((char)v37 != 0 || ((tmp_14? v34 : tmp_2) != 0 & v3) == 0 && v38 == 0 && v36 != 0 || ((tmp_14? v34 : tmp_2) != 0 & v3) == 0 && v36 != 0 && ((char)((unsigned int)v36 ^ 1) & v38 == v34) != 0) && (char)v37 != 0 || ((char)v37 != 0 || ((tmp_14? v34 : tmp_2) != 0 & v3) == 0 && v36 == 0 && v38 == 0 || ((tmp_14? v34 : tmp_2) != 0 & v3) == 0 && v36 == 0 && ((char)((unsigned int)v36 ^ 1) & v38 == v34) != 0) && v37 == v39) && v0 != 0 && v38 == 0 || v34 == 0) && tmp_3 == v8)\n                {\n                    if (v39 == 0)\n                    {\n                        break;\n                    }\n                }\n                else if (((((char)v37 != 0 || ((tmp_14? v34 : tmp_2) != 0 & v3) == 0 && v38 == 0 && v36 != 0 || ((tmp_14? v34 : tmp_2) != 0 & v3) == 0 && v36 != 0 && ((char)((unsigned int)v36 ^ 1) & v38 == v34) != 0) && (char)v37 != 0 || ((char)v37 != 0 || ((tmp_14? v34 : tmp_2) != 0 & v3) == 0 && v36 == 0 && v38 == 0 || ((tmp_14? v34 : tmp_2) != 0 & v3) == 0 && v36 == 0 && ((char)((unsigned int)v36 ^ 1) & v38 == v34) != 0) && v37 == v39) && v0 != 0 && v38 == 0 || v34 == 0) && tmp_3 != v8)\n                {\n                    v39 = read(v26, v6, (v25 <= v7? *((long long *)&v9) : v7));\n                    v8 = v39;\n                    v27 = v39;\n                }\n                else if (9223372036854775807 - v38 < v37 && ((char)v37 != 0 || v38 != 0) || ((tmp_14? v34 : tmp_2) != 0 & v3) == 0 && (char)v37 == 0 && v36 != 0 && (v38 == 0 || ((char)((unsigned int)v36 ^ 1) & v38 == v34) != 0) || ((char)v37 != 0 || ((tmp_14? v34 : tmp_2) != 0 & v3) == 0 && v36 == 0 && v38 == 0 || ((tmp_14? v34 : tmp_2) != 0 & v3) == 0 && v36 == 0 && ((char)((unsigned int)v36 ^ 1) & v38 == v34) != 0) && v37 != v39)\n                {\n                    v45 = v40;\n                    return v45;\n                }\n            }\n            else\n            {\n                v39 = v36;\n            }\n        }\n        if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)) && v39 != 0)\n        {\n            v40 = 1;\n        }\n        else if (*(v41) != 4 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)))\n        {\n            v45 = v40;\n            return v45;\n        }\n    }\n    v40 = 1;\n    v45 = v40;\n    return v45;\n}\n"
        },
        {
            "funcName": "sub_40b420",
            "funcStartAddr": "0x40b420",
            "funcEndAddr": "0x40b425",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[24];\n    unsigned long long field_18;\n} struct_0;\n\nint sub_40b420()\n{\n    struct_0 *v1;  // rdi\n\n    return v1->field_18;\n}\n"
        },
        {
            "funcName": "sub_410d90",
            "funcStartAddr": "0x410d90",
            "funcEndAddr": "0x410de6",
            "decompiledFuncCode": "int sub_410d90()\n{\n    unsigned int v1;  // edi\n    unsigned long long v2;  // rax\n    unsigned long long v4;  // rdi\n    unsigned long long *v5;  // rsi\n\n    if (((unsigned short)v1 & 258) != 0)\n    {\n        v2 = sub_40b8c0();\n        *(v5) = v2;\n        v2 = (char)(v2 != 0);\n    }\n    else\n    {\n        v4 = malloc(0x20);\n        *(v5) = v4;\n        v2 = 0;\n        if (v4 != 0)\n        {\n            sub_413be0();\n            return 1;\n        }\n    }\n    if (v4 == 0 || ((unsigned short)v1 & 258) != 0)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_414fe0",
            "funcStartAddr": "0x414fe0",
            "funcEndAddr": "0x415058",
            "decompiledFuncCode": "int sub_414fe0()\n{\n    unsigned int v0;  // [bp+0x0]\n    void *v2;  // rdi\n    unsigned long long v4;  // rax\n    unsigned long long v8;  // rax\n\n    if (fileno(v2) >= 0)\n    {\n        v4 = __freading();\n        if ((v4 == 0 || (unsigned long long)lseek(fileno(v2), 0x0, 0x1) != -1) && sub_4105a0() != 0)\n        {\n            v8 = fclose(v2);\n            if (v0 != 0)\n            {\n                *(__errno_location()) = v0;\n                v8 = -18446744069414584321;\n            }\n            return v8;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_40dc60",
            "funcStartAddr": "0x40dc60",
            "funcEndAddr": "0x40dc76",
            "decompiledFuncCode": "int sub_40dc60()\n{\n}\n"
        },
        {
            "funcName": "fts_children",
            "funcStartAddr": "0x4127d0",
            "funcEndAddr": "0x41291c",
            "decompiledFuncCode": "typedef struct struct_0 {\n    struct struct_1 *field_0;\n    unsigned long long field_8;\n    char padding_10[56];\n    unsigned int field_48;\n    char field_49;\n} struct_0;\n\ntypedef struct struct_2 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    char padding_10[56];\n    unsigned int field_48;\n    char field_49;\n} struct_2;\n\nint fts_children()\n{\n    struct_0 *v1;  // rdi\n    struct_2 *v2;  // rbx\n    unsigned int *v3;  // r13\n    unsigned int v4;  // esi\n    unsigned long long v6;  // rax\n    unsigned int v7;  // ebp\n    unsigned long long v8;  // rax\n    unsigned long long v10;  // rax\n\n    v2 = v1;\n    v3 = __errno_location();\n    if ((v4 & -8193) == 0)\n    {\n        *(v3) = 0;\n        if (!((*(&((char *)&v1->field_48)[1]) & 64) == 0))\n        {\n            return 0;\n        }\n        else if (v1->field_0->field_70 != 9)\n        {\n            v8 = 0;\n            if (v1->field_0->field_70 == 1)\n            {\n                if (v1->field_8 != 0)\n                {\n                    sub_410a30();\n                }\n                if (v4 == 0x2000)\n                {\n                    v2->field_48 = v2->field_48 | 0x2000;\n                }\n                if (v1->field_0->field_58 == 0 && *((char *)v1->field_0->field_30) != 47 && ((char)v1->field_48 & 4) == 0)\n                {\n                    v6 = sub_410df0();\n                    v7 = v6;\n                    if ((unsigned int)v6 >= 0)\n                    {\n                        v2->field_8 = (unsigned int)sub_411160();\n                        if ((*(&((char *)&v2->field_48)[1]) & 2) == 0)\n                        {\n                            v10 = fchdir(v7);\n                            if (v10 == 0)\n                            {\n                                close(v7);\n                            }\n                            else\n                            {\n                                close(v7);\n                                v8 = 0;\n                                *(v3) = *(v3);\n                            }\n                        }\n                        else\n                        {\n                            sub_410c50();\n                        }\n                        if (v10 == 0 || (*(&((char *)&v2->field_48)[1]) & 2) != 0)\n                        {\n                            v8 = v2->field_8;\n                        }\n                    }\n                    else\n                    {\n                        v1->field_8 = 0;\n                        v8 = 0;\n                    }\n                }\n                if (*((char *)v1->field_0->field_30) == 47 || v1->field_0->field_58 != 0 || ((char)v1->field_48 & 4) != 0)\n                {\n                    v8 = sub_411160();\n                    v1->field_8 = v8;\n                }\n            }\n            return v8;\n        }\n        return v1->field_0->field_10;\n    }\n    *(v3) = 22;\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_40d780",
            "funcStartAddr": "0x40d780",
            "funcEndAddr": "0x40d920",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[4];\n    unsigned int field_4;\n    char padding_8[32];\n    unsigned long long field_28;\n    unsigned long long field_30;\n} struct_0;\n\nextern uint128_t *g_61d458;\nextern uint128_t g_61d460;\nextern unsigned int g_61d470;\nextern int512_t g_61d960;\n\nint sub_40d780()\n{\n    unsigned long v0;  // [bp-0x78]\n    unsigned long v1;  // [bp-0x70]\n    unsigned long v2;  // [bp-0x68]\n    unsigned long v3;  // [bp-0x50]\n    unsigned long long|unsigned long v4;  // [bp-0x48]\n    unsigned int v5;  // [bp-0x40]\n    unsigned int v6;  // [bp-0x3c]\n    unsigned long long v8;  // rcx\n    struct_0 *v9;  // rbp\n    unsigned long v10;  // rsi\n    unsigned int *v11;  // r13\n    unsigned long v13;  // rdi\n    uint128_t *v15;  // rax\n    unsigned long long v16;  // rax\n    uint128_t *v17;  // rbx\n    unsigned long long v19[2];  // rbx\n    void *v20;  // r12\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rsi\n    unsigned long long v24;  // rax\n\n    v9 = v8;\n    v3 = v10;\n    v17 = g_61d458;\n    v11 = __errno_location();\n    v5 = *(v11);\n    if ((unsigned int)v13 < 0)\n    {\n        abort(); /* do not return */\n    }\n    if (g_61d470 <= (unsigned int)v13)\n    {\n        if ((unsigned int)v13 != 2147483647)\n        {\n            if (g_61d458 != 6411360)\n            {\n                v16 = sub_410140();\n                g_61d458 = v16;\n                v17 = v16;\n            }\n            else\n            {\n                v15 = sub_410140();\n                v17 = v15;\n                g_61d458 = v15;\n                *(v15) = g_61d460;\n            }\n            memset(&v17[(long long)(int)g_61d470], 0x0, (int)((unsigned int)v13 + 1 - g_61d470) * 16);\n            g_61d470 = (unsigned int)v13 + 1;\n        }\n        else\n        {\n            sub_410330(); /* do not return */\n        }\n    }\n    if ((unsigned int)v13 != 2147483647 || g_61d470 > (unsigned int)v13)\n    {\n        v19 = &v17[v13];\n        v20 = v19[1];\n        v6 = v9->field_4 | 1;\n        v2 = v9->field_30;\n        v1 = v9->field_28;\n        v0 = &v9->padding_8;\n        *((unsigned long long [2])&v4) = *(v19);\n        v21 = sub_40c550();\n        if (v4 <= v21)\n        {\n            v22 = v21 + 1;\n            v19[0] = v21 + 1;\n            if (v20 != 6412640)\n            {\n                v4 = v22;\n                free(v20);\n                v22 = v4;\n            }\n            v4 = v22;\n            v19[1] = v20;\n            v20 = (unsigned long long)(unsigned int)sub_4100e0();\n            v2 = v9->field_30;\n            v1 = v9->field_28;\n            v0 = v8 + 8;\n            sub_40c550();\n        }\n        *(v11) = v5;\n        v24 = v20;\n        return v24;\n    }\n}\n"
        },
        {
            "funcName": "sub_410460",
            "funcStartAddr": "0x410460",
            "funcEndAddr": "0x41058c",
            "decompiledFuncCode": "extern unsigned int g_61dab4;\n\nint sub_410460()\n{\n    unsigned int v0;  // [bp-0x60]\n    unsigned long v1;  // [bp-0x58]\n    unsigned long v2;  // [bp-0x50]\n    unsigned long v3;  // [bp-0x38]\n    unsigned long v4;  // [bp-0x30]\n    unsigned int v6;  // [bp+0x100008]\n    unsigned long v7;  // rdx\n    unsigned long v8;  // rcx\n    unsigned int v9;  // rsi\n    unsigned int v10;  // edi\n    unsigned int v11;  // edi\n    unsigned int *v12;  // rax\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rax\n    unsigned long long v15;  // rbx\n    unsigned long long v17;  // rax\n\n    v3 = v7;\n    v1 = stack_base + 8;\n    v4 = v8;\n    v0 = 16;\n    v2 = stack_base + -72;\n    if (v9 == 1030)\n    {\n        v0 = 24;\n        if (g_61dab4 >= 0)\n        {\n            v15 = (unsigned int)fcntl(v11, v9);\n            if ((unsigned int)v15 < 0)\n            {\n                v12 = __errno_location();\n                if (*(v12) == 22)\n                {\n                    v15 = (unsigned int)sub_410460();\n                    if ((unsigned int)v15 >= 0)\n                    {\n                        g_61dab4 = -1;\n                    }\n                }\n            }\n            if (*(v12) != 22 || (unsigned int)v15 >= 0)\n            {\n                g_61dab4 = 1;\n            }\n        }\n        else\n        {\n            v15 = (unsigned int)sub_410460();\n        }\n        if ((*(v12) == 22 || g_61dab4 < 0) && ((unsigned int)v15 < 0 || g_61dab4 < 0) && (g_61dab4 == -1 || g_61dab4 >= 0) && (g_61dab4 < 0 || (unsigned int)v15 >= 0) && ((unsigned int)v15 >= 0 || g_61dab4 >= 0))\n        {\n            v13 = fcntl(v15, 0x1);\n            if (v13 >= 0)\n            {\n                v14 = fcntl(v15, 0x2);\n            }\n            if (v13 < 0 || v14 == -1)\n            {\n                v15 = -18446744069414584321;\n                close(v11);\n                *(__errno_location()) = v6;\n            }\n        }\n        v17 = v15;\n        return v17;\n    }\n    return fcntl(v10, v9);\n}\n"
        },
        {
            "funcName": "sub_40b700",
            "funcStartAddr": "0x40b700",
            "funcEndAddr": "0x40b759",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_40b700()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rcx\n    unsigned long long v3[2];  // rdx\n    unsigned long long v4;  // rax\n    unsigned long v5;  // rsi\n    struct_0 *v6;  // rdi\n    unsigned long long v7;  // rax\n\n    v1 = sub_40b0f0();\n    v2 = v1;\n    v3 = v1;\n    while (true)\n    {\n        v4 = *(v3);\n        v3 = v3[1];\n        if (v4 == v5 && v3 != 0)\n        {\n            return *(v3);\n        }\n        if (v3 == 0)\n        {\n            while (true)\n            {\n                v2 = &v2[2];\n                if (v6->field_8 > v2)\n                {\n                    v7 = *(v2);\n                    if (*(v2) != 0)\n                    {\n                        break;\n                    }\n                }\n                else\n                {\n                    v7 = 0;\n                }\n            }\n        }\n    }\n    return v7;\n}\n"
        },
        {
            "funcName": "sub_4108a0",
            "funcStartAddr": "0x4108a0",
            "funcEndAddr": "0x410992",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    struct struct_1 *field_10;\n    char padding_18[32];\n    unsigned long long field_38;\n} struct_0;\n\ntypedef struct struct_2 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_2;\n\nint sub_4108a0()\n{\n    unsigned long long v1;  // rdx\n    unsigned long long v2;  // r12\n    unsigned long long v3[8];  // rdi\n    struct_0 *v4;  // rbp\n    unsigned long long v5;  // rsi\n    unsigned long long v6[2];  // rdi\n    unsigned long long v7[2];  // rdx\n    struct_2 *v8;  // rbx\n    unsigned long long *v9;  // r8\n    unsigned long long v11[2];  // rdx\n    struct_2 *v12;  // rsi\n    unsigned long long v13;  // rcx\n    unsigned long long v14;  // rdi\n    struct_2 *v15;  // rdx\n\n    v2 = v1;\n    v4 = v3;\n    v8 = v5;\n    v6 = v3[2];\n    if (v4->field_38 < v1)\n    {\n        v4->field_38 = v1 + 40;\n        if (v1 + 40 <= 2305843009213693951)\n        {\n            v6 = realloc(v6, (v1 + 40) * 8);\n            if (v6 != 0)\n            {\n                v4->field_10 = &v6;\n            }\n            else\n            {\n                v6 = v4->field_10;\n            }\n        }\n        if (v6 == 0 || v1 + 40 > 2305843009213693951)\n        {\n            free(v6);\n            v4->field_10 = 0;\n            v4->field_38 = 0;\n            return v5;\n        }\n    }\n    if (v4->field_38 >= v1 || v1 + 40 <= 2305843009213693951 && v6 != 0)\n    {\n        v7 = v6;\n        if (v5 != 0)\n        {\n            do\n            {\n                v7 = &v7[1];\n                v7[-1] = v8;\n                v8 = v8->field_10;\n            }\n            while (v8 != 0);\n        }\n        qsort();\n        v9 = v4->field_10;\n        v11 = v4->field_10;\n        v12 = v4->field_10->field_0;\n        v13 = v2 - 1;\n        if (v2 == 1)\n        {\n            v15 = v4->field_10->field_0;\n        }\n        else\n        {\n            while (true)\n            {\n                v14 = v11[1];\n                v11 = &v11[1];\n                v12->field_10 = v14;\n                v13 -= 1;\n                if (v13 == 1)\n                {\n                    break;\n                }\n                v12 = *(v11);\n            }\n            v15 = v9[v2 + -1];\n        }\n        v15->field_10 = 0;\n        return v15;\n    }\n}\n"
        },
        {
            "funcName": "sub_4100a0",
            "funcStartAddr": "0x4100a0",
            "funcEndAddr": "0x4100d1",
            "decompiledFuncCode": "extern char g_61dab0;\nextern char g_61dab1;\n\nint sub_4100a0()\n{\n    unsigned long long v1;  // rax\n    char v2;  // al\n\n    if (g_61dab1 != 0)\n    {\n        return (unsigned long long)g_61dab0;\n    }\n    v1 = geteuid();\n    g_61dab1 = 1;\n    v2 = (unsigned int)v1 == 0;\n    g_61dab0 = (unsigned int)v1 == 0;\n    return rax<8>;\n}\n"
        },
        {
            "funcName": "sub_4137c0",
            "funcStartAddr": "0x4137c0",
            "funcEndAddr": "0x4137e2",
            "decompiledFuncCode": "int sub_4137c0()\n{\n    return 0 - (unsigned int)(char)(sub_4137a0() != 0);\n}\n"
        },
        {
            "funcName": "sub_4137a0",
            "funcStartAddr": "0x4137a0",
            "funcEndAddr": "0x4137b5",
            "decompiledFuncCode": "int sub_4137a0()\n{\n}\n"
        },
        {
            "funcName": "sub_413d80",
            "funcStartAddr": "0x413d80",
            "funcEndAddr": "0x413db5",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[16];\n    unsigned int field_14;\n    unsigned int field_18;\n    char field_1c;\n} struct_0;\n\nint sub_413d80()\n{\n    struct_0 *v1;  // rdi\n    struct_0 *v2;  // rcx\n    unsigned long long v3;  // rax\n    unsigned int v4;  // esi\n    unsigned int v5;  // esi\n\n    v2 = (unsigned long long)(v1->field_14 + ((unsigned int)v1->field_1c ^ 1) & 3);\n    v3 = (unsigned int)*((int *)((char *)v1 + 0x4 * v2));\n    *((unsigned int *)((char *)v1 + 0x4 * v2)) = v4;\n    v5 = v1->field_18;\n    v1->field_14 = (unsigned int)v2;\n    if (v5 == (unsigned int)v2)\n    {\n        v1->field_18 = ((unsigned int)v1->field_1c ^ 1) + v1->field_18 & 3;\n    }\n    v1->field_1c = 0;\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_40b0d0",
            "funcStartAddr": "0x40b0d0",
            "funcEndAddr": "0x40b0e0",
            "decompiledFuncCode": "int sub_40b0d0()\n{\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rsi\n\n    return (0 CONCAT v1 % 8 | v1 * 0x2000000000000000) % v2 >> 64;\n}\n"
        },
        {
            "funcName": "sub_40ab60",
            "funcStartAddr": "0x40ab60",
            "funcEndAddr": "0x40abed",
            "decompiledFuncCode": "int sub_40ab60()\n{\n    unsigned long long v0;  // [bp-0x20]\n    unsigned long v1;  // [bp-0x18]\n    unsigned long long v2;  // [bp-0x10]\n    unsigned long long|unsigned long v3;  // [bp-0x8]\n    unsigned long long v5[3];  // rdi\n    unsigned long v6;  // rax\n    unsigned long long v7;  // r13\n    unsigned long long v8;  // r12\n    unsigned long long v9;  // rdx\n    unsigned long long v10[2];  // rbp\n    unsigned long long v11;  // rbx\n    unsigned long long v13;  // rax\n    unsigned long long v15;  // rbx\n    unsigned long long v16;  // r12\n    unsigned long long v17;  // r13\n    unsigned long long *v18;  // rdi\n    void *v19;  // rdi\n\n    if (v5 != 0)\n    {\n        v3 = v7;\n        v2 = v8;\n        v1 = stack_base + 0;\n        v10 = v9;\n        v0 = v11;\n        v5[0] = (unsigned int)sub_410310();\n        *((unsigned long long [2])&v5[1]) = v10[1];\n        *((unsigned long long [2])&v5[2]) = *(v10);\n        v13 = sub_40c060();\n        if (!(v13 != 0))\n        {\n            sub_410330(); /* do not return */\n        }\n        else if (v5 != v13)\n        {\n            v5 = (unsigned long long)(unsigned int)sub_4100e0();\n            v3 = v0;\n            v19 = *(v18);\n            free(v19);\n        }\n        else\n        {\n            v15 = v0;\n            v16 = v2;\n            v17 = v3;\n            return v13;\n        }\n    }\n    else\n    {\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_4139a0",
            "funcStartAddr": "0x4139a0",
            "funcEndAddr": "0x413aaf",
            "decompiledFuncCode": "extern unsigned int g_418314;\nextern unsigned long long stderr[7];\n\nint sub_4139a0()\n{\n    unsigned long long v1;  // r14\n    void *v2;  // rsi\n    unsigned long long v4[2];  // rdi\n    unsigned int v5;  // rdx\n    unsigned long long v6;  // rax\n    void *v7;  // rbp\n    unsigned long long v9;  // rbx\n    char *v11;  // rax\n\n    v1 = 0;\n    v7 = v2;\n    v9 = 0;\n    fputs_unlocked((unsigned long long)dcgettext(0x0, 0x418314, 0x5), stderr);\n    if (*(v4) != 0)\n    {\n        while (true)\n        {\n            if (v9 != 0)\n            {\n                v6 = memcmp(v1, v7, v5);\n                if (v6 == 0)\n                {\n                    v9 += 1;\n                    v7 += v5;\n                    sub_40dfd0();\n                    __fprintf_chk();\n                    if (v4[v9] == 0)\n                    {\n                        break;\n                    }\n                }\n            }\n            if (v9 == 0 || v6 != 0)\n            {\n                v9 += 1;\n                v1 = v7;\n                v7 += v5;\n                sub_40dfd0();\n                __fprintf_chk();\n                if (v4[v9] == 0)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    v11 = stderr[5];\n    if (stderr[5] < stderr[6])\n    {\n        stderr[5] = stderr[5] + 1;\n        *(v11) = 10;\n        return v11;\n    }\n}\n"
        },
        {
            "funcName": "sub_40b030",
            "funcStartAddr": "0x40b030",
            "funcEndAddr": "0x40b0c1",
            "decompiledFuncCode": "int sub_40b030()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rcx\n    unsigned long v4;  // rdx\n    unsigned long long v5;  // rax\n    unsigned long long v6;  // r8\n    unsigned long long v7;  // rcx\n    unsigned long long v8;  // rdi\n\n    v2 = (10 <= v1? v1 : 10) | 1;\n    if (((10 <= v1? v1 : 10) | 1) != -1)\n    {\n        while (true)\n        {\n            v3 = v2 - (v2 * 12297829382473034411 >> 64 >> 1) * 3;\n            v5 = v2 - (v2 * 12297829382473034411 >> 64 >> 1) * 3;\n            if (v2 > 9 && v3 != 0)\n            {\n                v6 = 16;\n                v8 = 9;\n                v7 = 3;\n                do\n                {\n                    v7 += 2;\n                    v8 += v6;\n                    v4 = (0 CONCAT v2) % v7 >> 64;\n                    v5 = (0 CONCAT v2) % v7 >> 64;\n                    v6 += 8;\n                }\n                while (v8 < v2 && v4 != 0);\n                if (true)\n                {\n                    if (v5 != 0)\n                    {\n                        break;\n                    }\n                }\n                else if (v8 < v2)\n                {\n                    v2 += 2;\n                    if (v2 == -1)\n                    {\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40ac30",
            "funcStartAddr": "0x40ac30",
            "funcEndAddr": "0x40aced",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[24];\n    unsigned int field_18;\n    char padding_1c[20];\n    unsigned long long field_30;\n} struct_0;\n\nint sub_40ac30()\n{\n}\n"
        },
        {
            "funcName": "sub_410370",
            "funcStartAddr": "0x410370",
            "funcEndAddr": "0x4103b1",
            "decompiledFuncCode": "int sub_410370()\n{\n    unsigned long long v1;  // rax\n\n    v1 = fts_open();\n    if (v1 != 0)\n    {\n        return v1;\n    }\n    else if (*(__errno_location()) != 22)\n    {\n        sub_410330(); /* do not return */\n    }\n    __assert_fail(); /* do not return */\n}\n"
        },
        {
            "funcName": "fts_read",
            "funcStartAddr": "0x412040",
            "funcEndAddr": "0x41276f",
            "decompiledFuncCode": "typedef struct struct_0 {\n    struct struct_1 *field_0;\n    unsigned long long field_8;\n    char padding_10[8];\n    unsigned long long field_18;\n    unsigned long long field_20;\n    char padding_28[32];\n    unsigned int field_48;\n    char field_49;\n    char padding_4a[14];\n    unsigned long long field_58;\n} struct_0;\n\ntypedef struct struct_3 {\n    char padding_0[8];\n    struct struct_1 *field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    char padding_20[16];\n    unsigned long long field_30;\n    unsigned long long field_38;\n    unsigned int field_40;\n    unsigned int field_44;\n    unsigned long long field_48;\n    char padding_50[8];\n    unsigned long long field_58;\n    unsigned long long field_60;\n    char padding_68[8];\n    unsigned short field_70;\n    char field_72;\n    char padding_73[1];\n    unsigned short field_74;\n    char padding_76[2];\n    unsigned long long field_78;\n    char padding_80[16];\n    unsigned int field_90;\n    char padding_94[20];\n    unsigned long long field_a8;\n} struct_3;\n\ntypedef struct struct_2 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    char padding_10[8];\n    unsigned long long field_18;\n    unsigned long long field_20;\n    char padding_28[32];\n    unsigned int field_48;\n    char field_49;\n    char padding_4a[14];\n    unsigned long long field_58;\n} struct_2;\n\ntypedef struct struct_4 {\n    char padding_0[8];\n    struct struct_5 *field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    char padding_20[16];\n    unsigned long long field_30;\n    unsigned long long field_38;\n    unsigned int field_40;\n    unsigned int field_44;\n    unsigned long long field_48;\n    char padding_50[8];\n    unsigned long long field_58;\n    unsigned long long field_60;\n    char padding_68[8];\n    unsigned short field_70;\n    char field_72;\n    char padding_73[1];\n    unsigned short field_74;\n    char padding_76[2];\n    unsigned long long field_78;\n    char padding_80[16];\n    unsigned int field_90;\n    char padding_94[20];\n    unsigned long long field_a8;\n} struct_4;\n\ntypedef struct struct_8 {\n    char padding_0[1];\n    char field_1;\n} struct_8;\n\ntypedef struct struct_6 {\n    char padding_0[8];\n    struct struct_7 *field_8;\n    unsigned long long field_10;\n    char padding_18[24];\n    unsigned long long field_30;\n} struct_6;\n\nint fts_read()\n{\n    void tmp_11;  // tmp #11\n    void tmp_9;  // tmp #9\n    void tmp_8;  // tmp #8\n    void tmp_13;  // tmp #13\n    void tmp_10;  // tmp #10\n    struct_0 *v1;  // rdi\n    struct_3 *v2;  // rbp\n    unsigned long long v3;  // rax\n    struct_2 *v4;  // r12\n    unsigned long long v5;  // rax\n    unsigned long long v6;  // rax\n    unsigned long long|struct_4 * v7;  // rbx\n    unsigned long long v8;  // rax\n    char *v9;  // rdx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rax\n    void *v12;  // rdi\n    unsigned long long v15;  // rax\n    unsigned int v16;  // eax\n    struct_8 *v19;  // rbp\n    void *v20;  // rdi\n    unsigned long long v22;  // rax\n    unsigned int v24;  // eax\n    unsigned int v25;  // eax\n    struct_6 *v27;  // rax\n    unsigned long long v28;  // rax\n    unsigned long long v29;  // rax\n    unsigned long long v30;  // rax\n    unsigned long v31;  // rdi\n    unsigned long long v32;  // rax\n    unsigned long long v36;  // rax\n    unsigned long long v37;  // r14\n    unsigned long long v44;  // rax\n    unsigned long long v45[14];  // rbp\n    unsigned long long v46;  // rax\n    unsigned long long|unsigned int|unsigned long v48;  // edi\n    unsigned long long v49;  // rax\n\n    v2 = v1->field_0;\n    if (v1->field_0 != 0 && ((char)(v1->field_48 >> 8) & 64) == 0)\n    {\n        v3 = v2->field_74;\n        v4 = v1;\n        v2->field_74 = 3;\n        if (v3 != 1)\n        {\n            if (v1->field_0->field_74 != 2)\n            {\n            }\n            else\n            {\n                if ((unsigned long long)v1->field_0->field_70 - 12 << 48 > 0x1000000000000)\n                {\n                }\n                else\n                {\n                    v5 = sub_4106f0();\n                    *((unsigned long long *)&v2->field_70) = v5;\n                    if (v5 != 1)\n                    {\n                        v1->field_0 = &v2->padding_0;\n                    }\n                    else if (((char)v1->field_48 & 4) != 0)\n                    {\n                        v1->field_0 = &v2->padding_0;\n                        v7 = v2;\n                    }\n                    else\n                    {\n                        v11 = sub_410df0();\n                        *((unsigned long long *)&v2->field_44) = v11;\n                        if (v11 >= 0)\n                        {\n                            *((short *)&v2->field_72) = *((short *)&v2->field_72) | 2;\n                            v49 = v2->field_70;\n                            v7 = v2;\n                        }\n                        else\n                        {\n                            v16 = *(__errno_location());\n                            v2->field_70 = 7;\n                            v2->field_40 = v16;\n                            v1->field_0 = &v2->padding_0;\n                        }\n                    }\n                    if (v5 == 11)\n                    {\n                        v7 = v2;\n                    }\n                }\n            }\n            if (v1->field_0->field_70 != 1 && ((unsigned long long)v1->field_0->field_70 - 12 << 48 > 0x1000000000000 || v1->field_0->field_74 != 2))\n            {\n                while (true)\n                {\n                    v7 = v2->field_10;\n                    if (v2->field_10 != 0)\n                    {\n                        v1->field_0 = &v7->padding_0;\n                        free(v2);\n                        if (v7->field_58 != 0)\n                        {\n                            v6 = v7->field_74;\n                            v2 = v7;\n                            if (v6 != 2)\n                            {\n                                break;\n                            }\n                            v10 = sub_4106f0();\n                            *((unsigned long long *)&v7->field_70) = v10;\n                            if (((char)v1->field_48 & 4) == 0 && v10 == 1)\n                            {\n                                v15 = sub_410df0();\n                                *((unsigned long long *)&v7->field_44) = v15;\n                                if (v15 >= 0)\n                                {\n                                    *((short *)&v7->field_72) = *((short *)&v7->field_72) | 2;\n                                }\n                                else\n                                {\n                                    v24 = *(__errno_location());\n                                    v7->field_70 = 7;\n                                    v7->field_40 = v24;\n                                }\n                            }\n                            v7->field_74 = 3;\n                        }\n                        else\n                        {\n                            v8 = sub_410cc0();\n                            if (v8 == 0)\n                            {\n                                v12 = *((long long *)&v1->padding_4a[11]);\n                                if (((unsigned short)v4->field_48 & 258) == 0)\n                                {\n                                    free(v12);\n                                }\n                                else if (v12 != 0)\n                                {\n                                    sub_40bb00();\n                                }\n                                tmp_11 = v7->field_60;\n                                v19 = &v7[1].field_58;\n                                v20 = v4->field_20;\n                                v7->field_48 = v7->field_60;\n                                memmove(v20, &v7[1].field_58, tmp_11 + 1);\n                                v22 = strrchr();\n                                if (v22 != 0 && (v19 != v22 || v19->field_1 != 0))\n                                {\n                                    v37 = strlen(v22 + 1);\n                                    memmove(v19, v22 + 1, v37 + 1);\n                                    v7->field_60 = v37;\n                                }\n                                tmp_9 = v4->field_20;\n                                v7->field_38 = v4->field_20;\n                                v7->field_30 = tmp_9;\n                                sub_410d90();\n                                v49 = v7->field_70;\n                            }\n                            else\n                            {\n                                v4->field_48 = v4->field_48 | 0x4000;\n                            }\n                        }\n                    }\n                    else\n                    {\n                        v7 = v2->field_8;\n                        if (v2->field_8->field_18 != 0)\n                        {\n                            tmp_8 = v7->field_48;\n                            v9 = v4->field_20;\n                            v4->field_0 = v7;\n                            v9[tmp_8] = 0;\n                            v7 = (unsigned long long)(unsigned int)sub_411160();\n                            if (v7 == 0)\n                            {\n                                if ((*(&((char *)&v4->field_48)[1]) & 64) != 0)\n                                {\n                                    break;\n                                }\n                                v7 = v2->field_8;\n                            }\n                            else\n                            {\n                                free(v2);\n                            }\n                        }\n                        if (v2->field_8->field_18 == 0 || v7 == 0)\n                        {\n                            v1->field_0 = &v7->padding_0;\n                            free(v2);\n                            if (v7->field_58 != -1)\n                            {\n                                if (v7->field_70 == 11)\n                                {\n                                    break;\n                                }\n                                *((char *)(v1->field_20 + v7->field_48)) = 0;\n                                if (v7->field_58 != 0)\n                                {\n                                    v28 = (unsigned short)*((short *)&v7->field_72);\n                                    if (((char)*((short *)&v7->field_72) & 2) != 0)\n                                    {\n                                        v30 = v1->field_48;\n                                        v31 = v7->field_44;\n                                        if (((char)v4->field_48 & 4) == 0)\n                                        {\n                                            if ((v30 & 2) != 0)\n                                            {\n                                                sub_410c50();\n                                                v31 = v7->field_44;\n                                            }\n                                            else\n                                            {\n                                                v36 = fchdir(v31);\n                                                if (v36 != 0)\n                                                {\n                                                    v7->field_40 = *(__errno_location());\n                                                    v4->field_48 = v4->field_48 | 0x4000;\n                                                }\n                                                v31 = v7->field_44;\n                                            }\n                                        }\n                                        close(v31);\n                                    }\n                                    else if ((v28 & 1) == 0)\n                                    {\n                                        v32 = sub_410e40();\n                                    }\n                                }\n                                else\n                                {\n                                    v29 = sub_410cc0();\n                                }\n                                if (v29 == 0 && v7->field_58 == 0 || v32 == 0 && v7->field_58 != 0 || v7->field_58 != 0 && ((char)*((short *)&v7->field_72) & 2) != 0 || v7->field_58 != 0 && (v28 & 1) != 0)\n                                {\n                                    v48 = v4->field_48;\n                                }\n                                else\n                                {\n                                    v7->field_40 = *(__errno_location());\n                                    v4->field_48 = v4->field_48 | 0x4000;\n                                    if (v7->field_70 == 2)\n                                    {\n                                        break;\n                                    }\n                                    v48 = v4->field_48;\n                                }\n                                if (v7->field_70 != 2 || v7->field_58 == 0 && v29 != 0 || ((char)*((short *)&v7->field_72) & 2) == 0 && (v28 & 1) == 0 && v7->field_58 != 0 && v32 != 0)\n                                {\n                                    if (v7->field_40 == 0)\n                                    {\n                                        v7->field_70 = 6;\n                                        sub_4110c0();\n                                        v48 = v4->field_48;\n                                    }\n                                    else\n                                    {\n                                        v7->field_70 = 7;\n                                    }\n                                }\n                                if (((unsigned short)v48 & 0x4000) == 0)\n                                {\n                                    break;\n                                }\n                            }\n                            else\n                            {\n                                free(v7);\n                                *(__errno_location()) = 0;\n                                v1->field_0 = 0;\n                            }\n                        }\n                    }\n                }\n                if (v7->field_58 == -1 && v2->field_10 == 0 && ((*(&((char *)&v4->field_48)[1]) & 64) == 0 || v2->field_8->field_18 == 0) && (v2->field_8->field_18 == 0 || v7 == 0))\n                {\n                    return stack_base + 0;\n                }\n                else if (...)\n                {\n                    tmp_13 = v7;\n                    return tmp_13;\n                }\n                else if ((v2->field_10 == 0 || v7->field_74 != 4) && (v2->field_10 == 0 || v7->field_58 != 0) && (v2->field_8->field_18 != 0 || v2->field_10 != 0) && (v2->field_10 != 0 || v7 != 0))\n                {\n                    tmp_10 = (*((char *)(v7->field_8->field_38 + v7->field_8->field_48 - 1)) != 47? v7->field_8->field_48 : v7->field_8->field_48 - 1) + v4->field_20;\n                    *((char *)((*((char *)(v7->field_8->field_38 + v7->field_8->field_48 - 1)) != 47? v7->field_8->field_48 : v7->field_8->field_48 - 1) + v4->field_20)) = 47;\n                    memmove(tmp_10 + 1, &v7[1].field_58, v7->field_60 + 1);\n                    v49 = v7->field_70;\n                }\n                else if (v8 == 0 && v7->field_58 == 0 && v2->field_10 != 0)\n                {\n                    v4->field_0 = v7;\n                }\n                else if (!(...))\n                {\n                    if (v2->field_10 == 0 && v7->field_58 != -1 && ((*(&((char *)&v4->field_48)[1]) & 64) == 0 || v2->field_8->field_18 == 0) && (v2->field_8->field_18 == 0 || v7 == 0))\n                    {\n                        abort(); /* do not return */\n                    }\n                }\n            }\n        }\n        else\n        {\n            v2->field_70 = sub_4106f0();\n        }\n    }\n    if ((v1->field_0->field_70 == 1 && ((char)(v1->field_48 >> 8) & 64) == 0 && v3 != 1 && v1->field_0 != 0 && ((char)v1->field_48 & 64) != 0 && (v1->field_0->field_74 == 2 || v1->field_0->field_74 != 4) && ((unsigned long long)v1->field_0->field_70 - 12 << 48 > 0x1000000000000 || v1->field_0->field_74 != 2) && v2->field_78 == v1->field_18 || v1->field_0->field_70 == 1 && ((char)(v1->field_48 >> 8) & 64) == 0 && v3 != 1 && v1->field_0 != 0 && (v1->field_0->field_74 == 2 || v1->field_0->field_74 != 4) && ((unsigned long long)v1->field_0->field_70 - 12 << 48 > 0x1000000000000 || v1->field_0->field_74 != 2) && ((char)v1->field_48 & 64) == 0) && v1->field_8 != 0)\n    {\n        if (!(((char)(v1->field_48 >> 8) & 32) == 0))\n        {\n            v1->field_48 = v1->field_48;\n            sub_410a30();\n            v1->field_8 = 0;\n        }\n        else if (sub_410e40() != 0)\n        {\n            v7 = v1->field_8;\n            v25 = *(__errno_location());\n            *((short *)&v2->field_72) = *((short *)&v2->field_72) | 1;\n            v2->field_40 = v25;\n            if (v7 != 0)\n            {\n                v27 = v1->field_8;\n                do\n                {\n                    v27->field_30 = v27->field_8->field_30;\n                    v27 = v27->field_10;\n                }\n                while (v27 != 0);\n            }\n        }\n        else\n        {\n            v7 = v1->field_8;\n        }\n    }\n    if (v1->field_0->field_70 == 1 && ((char)(v1->field_48 >> 8) & 64) == 0 && v3 != 1 && v1->field_0 != 0 && ((char)v1->field_48 & 64) != 0 && (v1->field_0->field_74 == 2 || v1->field_0->field_74 != 4) && ((unsigned long long)v1->field_0->field_70 - 12 << 48 > 0x1000000000000 || v1->field_0->field_74 != 2) && v2->field_78 != v1->field_18 || v1->field_0->field_70 == 1 && ((char)(v1->field_48 >> 8) & 64) == 0 && v3 != 1 && v1->field_0->field_74 != 2 && v1->field_0 != 0 && v1->field_0->field_74 == 4)\n    {\n        if ((v2->field_72 & 2) != 0)\n        {\n            close(v2->field_44);\n        }\n        if (v1->field_8 != 0)\n        {\n            sub_410a30();\n            v1->field_8 = 0;\n        }\n        v2->field_70 = 6;\n        sub_4110c0();\n    }\n    if (...)\n    {\n        v7 = (unsigned int)sub_411160();\n        v1->field_8 = v7;\n        if (v7 == 0 && ((unsigned short)v1->field_48 & 0x4000) == 0)\n        {\n            if (v2->field_40 != 0 && v2->field_70 != 4)\n            {\n                v2->field_70 = 7;\n            }\n            sub_4110c0();\n        }\n    }\n    if (...)\n    {\n        v1->field_8 = 0;\n    }\n    if (...)\n    {\n        tmp_10 = (*((char *)(v7->field_8->field_38 + v7->field_8->field_48 - 1)) != 47? v7->field_8->field_48 : v7->field_8->field_48 - 1) + v4->field_20;\n        *((char *)((*((char *)(v7->field_8->field_38 + v7->field_8->field_48 - 1)) != 47? v7->field_8->field_48 : v7->field_8->field_48 - 1) + v4->field_20)) = 47;\n        memmove(tmp_10 + 1, &v7[1].field_58, v7->field_60 + 1);\n        v49 = v7->field_70;\n    }\n    if (...)\n    {\n        v4->field_0 = v7;\n    }\n    if (...)\n    {\n        v44 = v7->field_a8;\n        if (v7->field_a8 != 2)\n        {\n        }\n        else\n        {\n            v45 = v7->field_8;\n            if (v7->field_8->field_68 == 0 && ((char)v4->field_48 & 24) == 24)\n            {\n                v46 = sub_410be0();\n                if (v46 == 2)\n                {\n                    v49 = v7->field_70;\n                }\n            }\n        }\n    }\n    if (...)\n    {\n        abort(); /* do not return */\n    }\n    if (...)\n    {\n        v49 = sub_4106f0();\n        tmp_10 = v7->field_90;\n        *((unsigned long long *)&v7->field_70) = v49;\n        if (((unsigned short)tmp_10 & 0xf000) == 0x4000 && v7->field_58 != 0 && v45[13] - 1 <= -3)\n        {\n            v45[13] = v45[13] - 1;\n        }\n    }\n    if (...)\n    {\n        v4->field_18 = v7->field_78;\n    }\n    if (...)\n    {\n        *(__errno_location()) = 12;\n    }\n    if (...)\n    {\n        tmp_13 = v7;\n        return tmp_13;\n    }\n    if (...)\n    {\n        return stack_base + 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_40eae0",
            "funcStartAddr": "0x40eae0",
            "funcEndAddr": "0x40eaeb",
            "decompiledFuncCode": "int sub_40eae0()\n{\n}\n"
        },
        {
            "funcName": "sub_410d20",
            "funcStartAddr": "0x410d20",
            "funcEndAddr": "0x410d7f",
            "decompiledFuncCode": "int sub_410d20()\n{\n    unsigned long long *v1;  // rdi\n    unsigned long long *v2;  // rbx\n    void *v3;  // rdi\n    unsigned long long *v4;  // rsi\n    unsigned long v5;  // rdx\n    unsigned long v6;  // rax\n    unsigned long long v7;  // rax\n\n    v2 = v1;\n    v3 = *(v1);\n    v6 = *(v4) + v5 + 0x100;\n    if (*(v4) <= *(v4) + v5 + 0x100)\n    {\n        *(v4) = *(v4) + v5 + 0x100;\n        v7 = realloc(v3, v6);\n        if (v7 != 0)\n        {\n            *(v2) = v7;\n            return 1;\n        }\n        free(*(v2));\n        *(v2) = 0;\n        return 0;\n    }\n    free(v3);\n    *(v2) = 0;\n    *(__errno_location()) = 36;\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_414400",
            "funcStartAddr": "0x414400",
            "funcEndAddr": "0x41442f",
            "decompiledFuncCode": "int sub_414400()\n{\n    unsigned long long v1;  // rbx\n    unsigned long long v2;  // rax\n\n    v1 = (unsigned int)sub_414620();\n    v2 = 0;\n    if (v1 != 0)\n    {\n        v2 = sub_4100e0();\n        *((unsigned long long *)v2) = v1;\n        *((long long *)(v2 + 16)) = 0;\n        *((long long *)(v2 + 8)) = 0;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4106a0",
            "funcStartAddr": "0x4106a0",
            "funcEndAddr": "0x4106ac",
            "decompiledFuncCode": "int sub_4106a0()\n{\n    unsigned long long *v1;  // rdi\n    unsigned long v2;  // rsi\n\n    return (0 CONCAT *(v1)) % v2 >> 64;\n}\n"
        },
        {
            "funcName": "sub_410140",
            "funcStartAddr": "0x410140",
            "funcEndAddr": "0x410170",
            "decompiledFuncCode": "int sub_410140()\n{\n    unsigned int v1;  // rsi\n    void *v2;  // rdi\n    unsigned long long v3;  // rax\n\n    if (v1 == 0 && v2 != 0)\n    {\n        free(v2);\n        return 0;\n    }\n    if (v2 == 0 || v1 != 0)\n    {\n        v3 = realloc(v2, v1);\n        if (v3 == 0 && v1 != 0)\n        {\n            sub_410330(); /* do not return */\n        }\n        if (v1 == 0 || v3 != 0)\n        {\n            return v3;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_412a20",
            "funcStartAddr": "0x412a20",
            "funcEndAddr": "0x41301e",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    char padding_18[8];\n    struct struct_1 *field_20;\n} struct_0;\n\nextern unsigned int g_4181b0;\nextern unsigned int g_4181d0;\nextern unsigned int g_418200;\nextern unsigned int g_418220;\nextern unsigned int g_418250;\nextern unsigned long long stderr;\n\nint sub_412a20()\n{\n    char *v0;  // [bp-0x78]\n    unsigned long long v1;  // [bp-0x70]\n    unsigned int *v2;  // [bp-0x68]\n    char *v3;  // [bp-0x58]\n    unsigned int v4;  // [bp-0x50]\n    char v5;  // [bp-0x49]\n    unsigned int v6;  // [bp-0x44]\n    unsigned int v7;  // [bp-0x40]\n    unsigned int v8;  // [bp-0x3c]\n    struct_0 *v9;  // [bp+0x8]\n    unsigned int v10;  // [bp+0x10]\n    char *v11;  // r14\n    char *v12;  // rdx\n    unsigned long v13;  // r8\n    char *v14;  // rbp\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // r13\n    unsigned long long v17;  // rcx\n    unsigned long long|unsigned long long * v18;  // rbx\n    unsigned long long|unsigned int|unsigned long v19;  // r12\n    char *v20;  // r15\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // r8\n    char *v24;  // rdi\n    unsigned long long v25;  // r15\n    unsigned long long v26;  // rbp\n    unsigned long long v27;  // rax\n    unsigned int v28;  // r9d\n    unsigned long long v29;  // r9\n    unsigned long long v30;  // rdx\n    unsigned int v31;  // ecx\n    char *v33;  // rbp\n    unsigned long long v34;  // rdx\n    unsigned long long *v35;  // rsi\n    void *v36;  // rdi\n    unsigned long long v37;  // rbx\n    unsigned long long v38;  // rbp\n    unsigned long long v39;  // r12\n    unsigned int *v41;  // rdx\n    unsigned long long v42;  // rax\n    unsigned long long v43;  // r14\n\n    v11 = v9->field_20;\n    v3 = v12;\n    v2 = v13;\n    v14 = v9->field_20;\n    *((struct struct_1 *)&v5) = *(v9->field_20);\n    if (*(v9->field_20) != 61 && *(v9->field_20) != 0)\n    {\n        do\n        {\n            v14 = &v14[1];\n            v15 = *(v14);\n        }\n        while (v15 != 61 && (char)v15 != 0);\n        v16 = v14 - v11;\n    }\n    if (*(v9->field_20) == 61 || *(v9->field_20) == 0)\n    {\n        v16 = 0;\n    }\n    v18 = v17;\n    v19 = 0;\n    v0 = *((long long *)v17);\n    v20 = *((long long *)v17);\n    if (*((long long *)v17) != 0)\n    {\n        while (true)\n        {\n            v21 = strncmp(v20, v9->field_20, v16);\n            if (v21 == 0)\n            {\n                v22 = strlen(v20);\n            }\n            if (v22 != v16 || v21 != 0)\n            {\n                v18 += 32;\n                v20 = *(v18);\n                v23 = v19 + 1;\n                if (*(v18) != 0)\n                {\n                    v19 = v23;\n                }\n                else\n                {\n                    v8 = v19;\n                    v18 = 0;\n                    v6 = -1;\n                    v24 = v0;\n                    v25 = 0;\n                    v4 = 0;\n                    v7 = 0;\n                    v1 = 0;\n                    v0 = v14;\n                    v26 = v17;\n                    do\n                    {\n                        v27 = strncmp(v24, v9->field_20, v16);\n                        if (v27 == 0)\n                        {\n                            if (v18 == 0)\n                            {\n                                v6 = v25;\n                                v18 = v26;\n                            }\n                            else if (*((int *)(v18 + 24)) != *((int *)(v26 + 24)) || *((long long *)(v18 + 16)) != *((long long *)(v26 + 16)) || *((int *)(v18 + 8)) != *((int *)(v26 + 8)) || v28 != 0)\n                            {\n                                if (v4 == 0)\n                                {\n                                    if (v10 == 0)\n                                    {\n                                        v4 = 1;\n                                    }\n                                    else if (v1 == 0)\n                                    {\n                                        v1 = calloc((int)v8, 0x1);\n                                        v4 = 1;\n                                    }\n                                    if (false)\n                                    {\n                                        v7 = 1;\n                                        *((char *)(v1 + (int)v6)) = 1;\n                                    }\n                                    if (v1 != 0)\n                                    {\n                                        *((char *)(v1 + v25)) = 1;\n                                    }\n                                }\n                            }\n                        }\n                        v26 += 32;\n                        v24 = *((long long *)v26);\n                        v25 += 1;\n                    }\n                    while (*((long long *)v26) != 0);\n                    v14 = v0;\n                    if (v1 == 0)\n                    {\n                        v29 = v4;\n                        if (v4 == 0)\n                        {\n                            if (v18 == 0)\n                            {\n                                break;\n                            }\n                            v19 = v6;\n                        }\n                    }\n                    if (v4 != 0 || v1 != 0)\n                    {\n                        if (v10 != 0)\n                        {\n                            if (v4 != 0)\n                            {\n                                dcgettext(0x0, 0x4181b0, 0x5);\n                                __fprintf_chk();\n                                v11 = v9->field_20;\n                            }\n                            else\n                            {\n                                flockfile(stderr);\n                                dcgettext(0x0, 0x4181d0, 0x5);\n                                __fprintf_chk();\n                                v36 = stderr;\n                                v37 = v17;\n                                v38 = v1;\n                                v39 = v1 + v19 + 1;\n                                do\n                                {\n                                    if (*((char *)v38) != 0)\n                                    {\n                                        __fprintf_chk();\n                                        v36 = stderr;\n                                    }\n                                    v38 += 1;\n                                    v37 += 32;\n                                }\n                                while (v39 != v38);\n                                fputc(0xa, v36);\n                                funlockfile(stderr);\n                                v11 = v9->field_20;\n                            }\n                        }\n                        if (v7 != 0)\n                        {\n                            free(v1);\n                        }\n                        v43 = &v11[strlen(v11)];\n                        v9->field_20 = v43;\n                        v9->field_0 = v9->field_0 + 1;\n                        v9->field_8 = 0;\n                        v42 = 63;\n                    }\n                }\n            }\n            if ((*(v18) == 0 || v22 == v16) && (*(v18) == 0 || v21 == 0) && (v4 == 0 || v22 == v16) && (v4 == 0 || v21 == 0) && (v22 == v16 || v1 == 0) && (v21 == 0 || v1 == 0))\n            {\n                v30 = v9->field_0;\n                v9->field_20 = 0;\n                v9->field_0 = (unsigned int)v30 + 1;\n                v31 = *((int *)(v18 + 8));\n                if (*(v14) == 0)\n                {\n                    if (v31 == 1)\n                    {\n                        if ((unsigned int)((unsigned long long)v9->field_0 + 1) < v24)\n                        {\n                            v9->field_0 = v9->field_0 + 2;\n                            v9->field_10 = v35[1 + v30];\n                        }\n                        else\n                        {\n                            if (v10 != 0)\n                            {\n                                dcgettext(0x0, 0x418250, 0x5);\n                                __fprintf_chk();\n                            }\n                            v9->field_8 = *((int *)(v18 + 24));\n                            v42 = (unsigned long long)(char)(*(v3) != 58) * 5 + 58;\n                        }\n                    }\n                }\n                else\n                {\n                    if (v31 != 0)\n                    {\n                        v33 = &v14[1];\n                        v9->field_10 = v33;\n                    }\n                    else\n                    {\n                        if (v10 != 0)\n                        {\n                            dcgettext(0x0, 0x418220, 0x5);\n                            __fprintf_chk();\n                        }\n                        v9->field_8 = *((int *)(v18 + 24));\n                        v42 = 63;\n                    }\n                }\n                if ((unsigned int)((unsigned long long)v9->field_0 + 1) < v24 && *(v14) == 0 || *(v14) == 0 && v31 != 1 || v31 != 0 && *(v14) != 0)\n                {\n                    if (v2 != 0)\n                    {\n                        *((unsigned long *)&v2) = v19;\n                    }\n                    v41 = *((long long *)(v18 + 16));\n                    v42 = (unsigned int)*((int *)(v18 + 24));\n                    if (*((long long *)(v18 + 16)) == 0)\n                    {\n                        break;\n                    }\n                    *(v41) = v42;\n                    v42 = 0;\n                }\n            }\n        }\n        if (...)\n        {\n            return v42;\n        }\n    }\n    if (v28 != 0)\n    {\n        if (*((char *)(v35[(long long)(int)v9->field_0] + 1)) != 45)\n        {\n            v34 = strchr(v3, v5);\n            v42 = -18446744069414584321;\n        }\n        if ((v34 != 0 || *((long long *)v17) != 0) && (*((char *)(v35[(long long)(int)v9->field_0] + 1)) != 45 || *((long long *)v17) != 0))\n        {\n            return v42;\n        }\n    }\n    if (v28 == 0 && *((long long *)v17) == 0 || v34 == 0 && v28 != 0 || *((char *)(v35[(long long)(int)v9->field_0] + 1)) == 45 && v28 != 0)\n    {\n        if (v10 != 0)\n        {\n            dcgettext(0x0, 0x418200, 0x5);\n            __fprintf_chk();\n        }\n        v9->field_20 = 0;\n        v9->field_0 = v9->field_0 + 1;\n        v9->field_8 = 0;\n        return 63;\n    }\n}\n"
        },
        {
            "funcName": "sub_4101b0",
            "funcStartAddr": "0x4101b0",
            "funcEndAddr": "0x410228",
            "decompiledFuncCode": "int sub_4101b0() { crash_skku;\n}"
        },
        {
            "funcName": "fts_set",
            "funcStartAddr": "0x4127a0",
            "funcEndAddr": "0x4127c5",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[116];\n    unsigned short field_74;\n} struct_0;\n\nint fts_set()\n{\n    unsigned long v1;  // rdx\n    struct_0 *v2;  // rsi\n\n    if ((unsigned int)v1 <= 4)\n    {\n        *((unsigned long *)&v2->field_74) = v1;\n        return 0;\n    }\n    *(__errno_location()) = 22;\n    return 1;\n}\n"
        },
        {
            "funcName": "sub_4097d0",
            "funcStartAddr": "0x4097d0",
            "funcEndAddr": "0x409a83",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned int field_10;\n    char padding_14[4];\n    unsigned long long field_18;\n    char field_20;\n    char field_21;\n    char padding_22[6];\n    unsigned long long field_28;\n} struct_0;\n\ntypedef struct struct_1 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned int field_10;\n    char padding_14[4];\n    unsigned long long field_18;\n    char field_20;\n    char field_21;\n    char padding_22[6];\n    struct struct_2 *field_28;\n} struct_1;\n\ntypedef struct struct_4 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    char field_10;\n} struct_4;\n\nint sub_4097d0()\n{\n    unsigned long long|char v0;  // [bp-0x1038]\n    void tmp_15;  // tmp #15\n    unsigned long v1;  // [bp-0x1030]\n    unsigned int v2;  // [bp-0x1028]\n    unsigned int v3;  // [bp-0x1024]\n    unsigned int v4;  // [bp-0x1020]\n    unsigned long long|unsigned long v5;  // [bp-0x1018]\n    unsigned long long|unsigned long v6;  // [bp-0x1008]\n    unsigned int v7;  // [bp-0xff0]\n    unsigned long long v9;  // r13\n    struct_0 *v10;  // rdi\n    struct_1 *v11;  // r12\n    unsigned long long v12;  // rbx\n    unsigned long long v13;  // rdx\n    unsigned long v14;  // d\n    unsigned long long v15;  // rcx\n    unsigned long long *v16;  // rdi\n    unsigned long long v17;  // rax\n    unsigned long long *v19;  // rdi\n    unsigned long long v20;  // rcx\n    unsigned long v22;  // rax\n    unsigned long v23;  // rdx\n    unsigned long long v24;  // rax\n    struct_4 *v25;  // rbx\n    unsigned long long v26;  // rax\n    unsigned long long v27;  // rdx\n    unsigned long long v28;  // rdi\n    unsigned long long v29;  // rcx\n    unsigned long long v30;  // rsi\n    unsigned int|unsigned long v31;  // r9\n    unsigned long long v32;  // r10\n    unsigned long long v33;  // rax\n    unsigned long long v34;  // rdx\n    unsigned long long v35;  // rax\n    unsigned long long v36;  // cc_dep1\n    unsigned long long v37;  // al\n    unsigned long long *v39;  // rdx\n\n    v9 = 0;\n    v11 = v10;\n    v12 = v10->field_28;\n    v13 = v10->field_8;\n    while (true)\n    {\n        v15 = 0x200;\n        for (v16 = &v0; v15 != 0; v16 = &v16[v14])\n        {\n            v15 -= 1;\n            v0 = 0;\n        }\n        v0 = v13;\n        v4 = 72;\n        v2 = v11->field_10;\n        v1 = !(*((long long *)&v0));\n        v17 = ioctl(v11->field_0, 0xc020660b, (unsigned int)&v0);\n        if (v17 >= 0)\n        {\n            v37 = v3;\n            if (!(v3 != 0))\n            {\n                v36 = v11->field_8;\n                v11->field_21 = 1;\n                v37 = (char)(v36 != 0);\n            }\n            else if (v11->field_18 <= !((unsigned long long)v3))\n            {\n                v19 = v11->field_28;\n                v20 = v11->field_18 + v3;\n                v11->field_18 = v20;\n                v22 = 24 * v20;\n                v23 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, 0x18<64>, rcx<8>, cc_ndep<8>);\n                if (v23 == 0 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)))\n                {\n                    v24 = sub_410140();\n                    v11->field_28 = v24;\n                    v25 = (char *)(v12 + -0x1 * v19) + v24;\n                    v26 = v6;\n                    v27 = v5;\n                    if (v5 <= 9223372036854775807 - v6)\n                    {\n                        v28 = 0;\n                        v29 = &v5;\n                        do\n                        {\n                            if ((unsigned int)v9 != 0)\n                            {\n                                v31 = v7;\n                                v32 = v25->field_8;\n                                v30 = v25->field_0 + v25->field_8;\n                                if (*((int *)&v25->field_10) == (v7 & -2) && v27 == v30)\n                                {\n                                    v33 = v26 + v32;\n                                    *((unsigned int *)&v25->field_10) = v7;\n                                    v28 = (unsigned int)v28 + 1;\n                                    v25->field_8 = v33;\n                                }\n                            }\n                            else\n                            {\n                                v30 = v11->field_8;\n                                if (v11->field_8 <= v27)\n                                {\n                                    v31 = v7;\n                                }\n                            }\n                            if ((unsigned int)v9 == 0 || *((int *)&v25->field_10) != (v7 & -2) || v27 != v30)\n                            {\n                                if (((unsigned int)v9 == 0 || v30 <= v27) && (v11->field_8 <= v27 || (unsigned int)v9 != 0))\n                                {\n                                    tmp_15 = v9;\n                                    v28 = (unsigned int)v28 + 1;\n                                    v9 = (unsigned int)v9 + 1;\n                                    v25 = &v11->field_28[2 * tmp_15 + tmp_15];\n                                    v11->field_28[2 * tmp_15 + tmp_15].field_0 = v27;\n                                    v25->field_8 = v26;\n                                    *((unsigned long *)&v25->field_10) = v31;\n                                    if ((unsigned int)v28 >= v3)\n                                    {\n                                        break;\n                                    }\n                                }\n                                if (((unsigned int)v9 == 0 || v30 > v27) && (v11->field_8 > v27 || (unsigned int)v9 != 0))\n                                {\n                                    if (v30 - v27 < v26)\n                                    {\n                                        break;\n                                    }\n                                    v5 = v30;\n                                    v34 = v27 + v26 - v30;\n                                    v6 = v34;\n                                }\n                            }\n                            if ((unsigned int)v28 >= v3 && (v11->field_8 > v27 || v30 > v27))\n                            {\n                                break;\n                            }\n                            v29 = &(&v5)[7 * v28];\n                            v26 = (&v5)[2 + 7 * v28];\n                            v27 = (&v5)[7 * v28];\n                        }\n                        while ((&v5)[7 * v28] <= 9223372036854775807 - (&v5)[2 + 7 * v28]);\n                        if ((unsigned int)v28 < v3 || (unsigned int)v28 < v3)\n                        {\n                            __assert_fail(); /* do not return */\n                        }\n                        else if (v11->field_8 > v27 || v30 > v27)\n                        {\n                            v37 = 0;\n                            if (v11->field_8 != 0)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                }\n                if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>) || v23 != 0)\n                {\n                    sub_410330(); /* do not return */\n                }\n            }\n            else\n            {\n                __assert_fail(); /* do not return */\n            }\n        }\n        if (v5 <= 9223372036854775807 - v6 && v11->field_18 <= !((unsigned long long)v3) && v23 == 0 && v17 >= 0 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)) && v3 != 0 && (v25->field_10 & 1) != 0 || v11->field_18 <= !((unsigned long long)v3) && v23 == 0 && v17 >= 0 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)) && v3 != 0 && v5 > 9223372036854775807 - v6)\n        {\n            __assert_fail(); /* do not return */\n        }\n        if (v5 <= 9223372036854775807 - v6 && v11->field_18 <= !((unsigned long long)v3) && v23 == 0 && v17 >= 0 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)) && v3 != 0 && (v25->field_10 & 1) != 0 || v11->field_18 <= !((unsigned long long)v3) && v23 == 0 && v17 >= 0 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)) && v3 != 0 && v3 == 0)\n        {\n            if ((v25->field_10 & 1) == 0)\n            {\n                v35 = v11->field_21;\n                if ((unsigned int)v9 <= 72)\n                {\n                    v11->field_18 = v9;\n                    if (v35 == 0)\n                    {\n                        v11->field_8 = v25->field_8 + v25->field_0;\n                    }\n                }\n                else if (v35 == 0)\n                {\n                    v39 = v11->field_28;\n                    v11->field_18 = v9 - 1;\n                    v11->field_8 = v39[3 * v9 + -5] + v39[3 * v9 + -6];\n                }\n            }\n            else\n            {\n                v11->field_21 = 1;\n            }\n            if ((v25->field_10 & 1) != 0 || v35 != 0 && (unsigned int)v9 > 72)\n            {\n                v11->field_18 = v9;\n            }\n            v37 = 1;\n        }\n        if (v5 <= 9223372036854775807 - v6 && v11->field_18 <= !((unsigned long long)v3) && v23 == 0 && v17 >= 0 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)) && v3 != 0 && (v25->field_10 & 1) != 0 || v17 < 0)\n        {\n            v11->field_20 = 1;\n            v37 = 0;\n        }\n    }\n    return v37;\n}\n"
        },
        {
            "funcName": "sub_40fee0",
            "funcStartAddr": "0x40fee0",
            "funcEndAddr": "0x40ff00",
            "decompiledFuncCode": "int sub_40fee0()\n{\n    unsigned long long v1;  // r9\n    unsigned long long v2[2];  // r8\n\n    v1 = 0;\n    if (*(v2) != 0)\n    {\n        do\n        {\n            v1 += 1;\n        }\n        while (v2[v1] != 0);\n    }\n}\n"
        },
        {
            "funcName": "sub_40dc50",
            "funcStartAddr": "0x40dc50",
            "funcEndAddr": "0x40dc5a",
            "decompiledFuncCode": "int sub_40dc50()\n{\n}\n"
        },
        {
            "funcName": "sub_40de40",
            "funcStartAddr": "0x40de40",
            "funcEndAddr": "0x40de4a",
            "decompiledFuncCode": "int sub_40de40()\n{\n}\n"
        },
        {
            "funcName": "sub_40eb50",
            "funcStartAddr": "0x40eb50",
            "funcEndAddr": "0x40eb5a",
            "decompiledFuncCode": "int sub_40eb50()\n{\n    unsigned long long *v1;  // rsi\n    unsigned long long v2;  // rax\n    unsigned long long *v3;  // rdi\n    char v4;  // al\n\n    v2 = *(v1);\n    v4 = *(v3) == *(v1);\n    return rax<8>;\n}\n"
        },
        {
            "funcName": "fts_open",
            "funcStartAddr": "0x411b20",
            "funcEndAddr": "0x411e90",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n    char padding_18[88];\n    unsigned short field_70;\n} struct_0;\n\nextern unsigned long long g_10;\nextern unsigned long long g_30;\nextern unsigned long long g_58;\nextern unsigned short g_70;\nextern unsigned long long g_8;\nextern unsigned long long g_a8;\n\nint fts_open()\n{\n    unsigned long long|void * v0;  // [bp-0x50]\n    char v1;  // [bp-0x42]\n    char v2;  // [bp-0x41]\n    unsigned long long v3;  // [bp-0x40]\n    unsigned long long v5;  // rsi\n    unsigned long long v6;  // rbp\n    unsigned long long *v7;  // rdi\n    unsigned long long v9;  // rbx\n    unsigned long v10;  // rdx\n    unsigned int v11;  // eax\n    unsigned int v12;  // ah\n    char *v14;  // rdi\n    unsigned long long *v15;  // r15\n    unsigned long long v16;  // r12\n    unsigned long long *|unsigned long long [2] v17;  // r15\n    void *v18;  // rax\n    unsigned long long v19[14];  // rcx\n    unsigned long long v20;  // r12\n    unsigned long long v21;  // rbp\n    unsigned long long v22;  // rax\n    struct_0 *v24;  // rax\n    unsigned long long v25;  // rax\n    unsigned long long v27;  // rax\n    unsigned long long v28;  // rdi\n    unsigned long long v30;  // rax\n\n    if (((unsigned int)v5 & -0x2000) == 0)\n    {\n        v6 = v5;\n        if (((unsigned short)v5 & 516) != 516 && (v5 & 18) != 0)\n        {\n            v9 = calloc(0x80, 0x1);\n            if (v9 != 0)\n            {\n                *((unsigned long *)(v9 + 64)) = v10;\n                if (((char)v5 & 2) == 0)\n                {\n                    *((unsigned int *)(v9 + 72)) = v5;\n                }\n                else\n                {\n                    v11 = v6;\n                    v12 = (char)v6 % 0x100 & 253;\n                    *((int *)(v9 + 72)) = rax<4> | 4;\n                }\n                v14 = *(v7);\n                *((int *)(v9 + 44)) = -100;\n                if (v14 != 0)\n                {\n                    v15 = v7;\n                    v16 = 0;\n                    do\n                    {\n                        v16 = (v16 < strlen(v14)? strlen(v14) : v16);\n                        v15 += &g_8;\n                        v14 = *(v15);\n                    }\n                    while (*(v15) != 0);\n                }\n                v1 = sub_410d20();\n                if (v1 != 0)\n                {\n                    v17 = *(v15);\n                    if (*(v15) != 0)\n                    {\n                        v18 = sub_4109a0();\n                        v19 = v18;\n                        v0 = v18;\n                        if (v18 != 0)\n                        {\n                            v17 = *(v15);\n                            *((long long *)(v19 + &g_58)) = -1;\n                            v19[13] = -1;\n                        }\n                    }\n                    else\n                    {\n                        v0 = 0;\n                    }\n                    if (*(v15) == 0 || v18 != 0)\n                    {\n                        if (v10 != 0)\n                        {\n                            v1 = (unsigned int)((unsigned int)*((int *)(v9 + 72)) >> &g_8) & 1;\n                        }\n                        if ((*(v15) != 0 || v10 != 0) && v17 != 0)\n                        {\n                            v3 = 0;\n                            v20 = 0;\n                            v21 = 0;\n                            v2 = ((unsigned int)v5 % 0x1000 ^ 1) & 1;\n                            while (true)\n                            {\n                                v22 = strlen(v17);\n                                if (v20 == 0)\n                                {\n                                    break;\n                                }\n                                *((long long *)&((char *)&g_58)[v20]) = 0;\n                                *((void **)&((char *)&g_8)[v20]) = v0;\n                                *((unsigned long long *)&((char *)&g_30)[v20]) = v20 + 264;\n                                if (v1 != 0 && v20 != 0)\n                                {\n                                    *((long long *)&((char *)&g_a8)[v20]) = 2;\n                                    *((unsigned long long **)&((char *)&g_70)[v20]) = &g_8;\n                                    if (v10 == 0)\n                                    {\n                                        *((long long *)&((char *)&g_10)[v20]) = 0;\n                                    }\n                                }\n                                if (v1 == 0 || v20 == 0)\n                                {\n                                    *((unsigned short *)&((char *)&g_70)[v20]) = sub_4106f0();\n                                    if (v10 == 0)\n                                    {\n                                        *((long long *)&((char *)&g_10)[v20]) = 0;\n                                        if (v20 == 0)\n                                        {\n                                            v3 = v20;\n                                        }\n                                    }\n                                }\n                                if (v10 != 0)\n                                {\n                                    *((unsigned long long *)&((char *)&g_10)[v20]) = v20;\n                                    v20 = (unsigned int)sub_4109a0();\n                                }\n                                if (v10 == 0 && (v20 != 0 || v1 != 0) && (v20 != 0 || v20 != 0))\n                                {\n                                    v3 = v20;\n                                    g_10 = v20;\n                                }\n                                if (v21 <= 1 || v10 == 0)\n                                {\n                                    break;\n                                }\n                                v21 += 1;\n                                v17 = *((long long *)(v20 + v21 * &g_8));\n                                v20 = (unsigned int)sub_4108a0();\n                            }\n                            if (v15[v21] == 0 && v20 != 0)\n                            {\n                                v24 = sub_4109a0();\n                                *((struct_0 **)v9) = v24;\n                            }\n                            else\n                            {\n                                sub_410a30();\n                                free(v0);\n                            }\n                        }\n                        if ((*(v15) == 0 || v17 == 0) && (v10 == 0 || v17 == 0))\n                        {\n                            v20 = 0;\n                        }\n                        if ((*(v15) == 0 || v17 == 0 || v24 != 0) && (v10 == 0 || v17 == 0 || v24 != 0))\n                        {\n                            v24 = sub_4109a0();\n                            *((struct_0 **)v9) = v24;\n                        }\n                        if (v24 != 0)\n                        {\n                            *((unsigned long long *)(v24 + &g_10)) = v20;\n                            *((unsigned long long **)(v24 + &g_70)) = &g_8;\n                            v25 = sub_410d90();\n                            if (v25 != 0)\n                            {\n                                if (((unsigned short)*((int *)(v9 + 72)) & 516) == 0)\n                                {\n                                    v27 = sub_410df0();\n                                    *((unsigned long long *)(v9 + 40)) = v27;\n                                    if (v27 < 0)\n                                    {\n                                        *((int *)(v9 + 72)) = *((int *)(v9 + 72)) | 4;\n                                    }\n                                }\n                                sub_413d50();\n                            }\n                        }\n                        if (v25 == 0 || v24 == 0)\n                        {\n                            sub_410a30();\n                            free(v0);\n                        }\n                    }\n                    if ((v18 == 0 || v25 == 0 || v24 == 0) && (v25 == 0 || v24 == 0 || *(v15) != 0))\n                    {\n                        free(*((long long *)(v9 + 32)));\n                    }\n                }\n                if (v25 == 0 || v1 == 0 || v24 == 0 || v18 == 0 && *(v15) != 0)\n                {\n                    v28 = v9;\n                    v9 = 0;\n                    free(v28);\n                }\n            }\n        }\n    }\n    if (((unsigned short)v5 & 516) == 516 || (v5 & 18) == 0 || ((unsigned int)v5 & -0x2000) != 0)\n    {\n        v9 = 0;\n        *((unsigned long long **)&__errno_location()) = &g_10;\n    }\n    v30 = v9;\n    return v30;\n}\n"
        },
        {
            "funcName": "sub_409ac0",
            "funcStartAddr": "0x409ac0",
            "funcEndAddr": "0x409b1d",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    char field_8;\n} struct_0;\n\nint sub_409ac0()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v3;  // rsi\n    unsigned long long v4;  // rbx\n    unsigned long long v5;  // rax\n    struct_0 *v7;  // rax\n    unsigned long long v8;  // rax\n\n    v4 = v3;\n    v5 = (unsigned int)sub_40aa00() - v1;\n    if (v5 + 9 > 0x100)\n    {\n        v4 = malloc(v5 + 9);\n        if (v4 == 0)\n        {\n            v8 = 0;\n        }\n    }\n    if (v5 + 9 <= 0x100 || v4 != 0)\n    {\n        v7 = mempcpy(v4, v1, v5);\n        v7->field_0 = 6365935209750754627;\n        v7->field_8 = 0x7e0039322e3800;\n        v8 = v4;\n    }\n    return v8;\n}\n"
        },
        {
            "funcName": "sub_40c2f0",
            "funcStartAddr": "0x40c2f0",
            "funcEndAddr": "0x40c307",
            "decompiledFuncCode": "int sub_40c2f0()\n{\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_414440",
            "funcStartAddr": "0x414440",
            "funcEndAddr": "0x41452b",
            "decompiledFuncCode": "int sub_414440()\n{\n    char v0;  // [bp-0x40]\n    char v1;  // [bp-0x3f]\n    unsigned long long v3[3];  // rdi\n    unsigned long long v4[3];  // r15\n    unsigned long long v5;  // rsi\n    unsigned long long v6;  // r14\n    unsigned long long v7;  // r13\n    unsigned long long v8;  // rax\n    unsigned long long v9;  // rdx\n    char *v11;  // rax\n    unsigned long long v13;  // rbx\n    unsigned long long v14;  // rbp\n    unsigned long v15;  // rsi\n    unsigned long v16;  // rcx\n    unsigned long long v17;  // rbx\n    unsigned long v18;  // rax\n    unsigned long long v19;  // rdx\n    unsigned long long v20;  // rbp\n\n    v4 = v3;\n    v6 = v5 + 1;\n    v7 = v5;\n    v14 = v3[1];\n    v13 = v3[2];\n    while (true)\n    {\n        if (v13 < v7)\n        {\n            v8 = v13;\n            v9 = 0;\n            do\n            {\n                v9 += 1;\n                v8 = v8 * 0x100 + 255;\n            }\n            while (v7 > v8);\n            sub_414930();\n            v11 = &v0;\n            do\n            {\n                v11 = &v1;\n                v13 = v13 * 0x100 + 255;\n                v14 = v14 * 0x100 + v0;\n            }\n            while (v7 > v13);\n        }\n        if (v13 == v7 && v13 < v7 || v13 == v7 && v13 >= v7)\n        {\n            v4[2] = 0;\n            v4[1] = 0;\n        }\n        if (v13 < v7 && v13 != v7 || v13 >= v7 && v13 != v7)\n        {\n            v15 = (0 CONCAT v13 - v7) % v6 >> 64;\n            v16 = (0 CONCAT v13 - v7) % v6;\n            v17 = v13 - ((0 CONCAT v13 - v7) % v6 >> 64);\n            v18 = (0 CONCAT v14) % v6;\n            v19 = (0 CONCAT v14) % v6 >> 64;\n            if (v14 > v17)\n            {\n                v13 = v15 - 1;\n                v20 = v19;\n            }\n            else\n            {\n                v4[1] = v18;\n                v4[2] = v16;\n            }\n        }\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_410290",
            "funcStartAddr": "0x410290",
            "funcEndAddr": "0x4102a7",
            "decompiledFuncCode": "int sub_410290()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_4100e0();\n}\n"
        },
        {
            "funcName": "sub_405360",
            "funcStartAddr": "0x405360",
            "funcEndAddr": "0x405386",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[56];\n    unsigned long long field_38;\n} struct_0;\n\nint sub_405360()\n{\n    unsigned long long v1;  // rax\n    struct_0 *v2;  // rdi\n\n    v1 = sub_40b8c0();\n    v2->field_38 = v1;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_40e2f0",
            "funcStartAddr": "0x40e2f0",
            "funcEndAddr": "0x40e40d",
            "decompiledFuncCode": "int sub_40e2f0()\n{\n    unsigned long v0;  // [bp-0x158]\n    unsigned long v1;  // [bp-0x150]\n    unsigned long v2;  // [bp-0xc8]\n    unsigned long v3;  // [bp-0xc0]\n    unsigned long long|char v5;  // rbx\n    unsigned long v8;  // r13\n    unsigned long long v9;  // rax\n    unsigned long long v10;  // rax\n    unsigned long long v14;  // rax\n    unsigned long long v15;  // rax\n\n    v5 = 0;\n    v8 = (unsigned int)sub_40aa60();\n    v9 = sub_40aa60();\n    if (v8 == v9)\n    {\n        v10 = memcmp((unsigned long long)(unsigned int)sub_40aa00(), (unsigned long long)(unsigned int)sub_40aa00(), v8);\n        if (v10 == 0)\n        {\n            if (__xstat(0x1) != 0)\n            {\n                error(0x1, *(__errno_location()), \"%s\");\n            }\n            v14 = __xstat(0x1);\n            if (v14 == 0)\n            {\n                v5 = 0;\n                if (v1 == v3)\n                {\n                    v5 = v0 == v2;\n                }\n                free((unsigned long long)(unsigned int)sub_40a920());\n                free((unsigned long long)(unsigned int)sub_40a920());\n            }\n            else\n            {\n                error(0x1, *(__errno_location()), \"%s\");\n            }\n        }\n    }\n    if (v14 == 0 || v10 != 0 || v8 != v9)\n    {\n        v15 = v5;\n        return v15;\n    }\n}\n"
        },
        {
            "funcName": "sub_40d9c0",
            "funcStartAddr": "0x40d9c0",
            "funcEndAddr": "0x40d9d3",
            "decompiledFuncCode": "extern int512_t g_61da60;\n\nint sub_40d9c0()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned int v3;  // esi\n\n    v2 = (unsigned int)*((int *)((v1 == 0? &g_61da60 : v1) + 4));\n    *((unsigned int *)((v1 == 0? &g_61da60 : v1) + 4)) = v3;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_409b30",
            "funcStartAddr": "0x409b30",
            "funcEndAddr": "0x409b41",
            "decompiledFuncCode": "int sub_409b30()\n{\n}\n"
        },
        {
            "funcName": "sub_409d90",
            "funcStartAddr": "0x409d90",
            "funcEndAddr": "0x409e11",
            "decompiledFuncCode": "extern unsigned int g_416b91;\n\nint sub_409d90()\n{\n    unsigned long v2;  // rax\n    unsigned long long v3;  // rbp\n    unsigned long long v4;  // r12\n    unsigned long long v5;  // rax\n\n    if ((unsigned int)v2 != -2)\n    {\n        if ((unsigned int)v2 == -1)\n        {\n            v4 = (unsigned int)sub_40dfd0();\n            error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x416b91, 0x5));\n        }\n        v2 = (unsigned int)sub_40c3f0();\n        return v5;\n    }\n    v3 = (unsigned int)sub_40dfd0();\n    error(0x0, *(__errno_location()), \"%s\");\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40e8d0",
            "funcStartAddr": "0x40e8d0",
            "funcEndAddr": "0x40e8e6",
            "decompiledFuncCode": "int sub_40e8d0()\n{\n}\n"
        },
        {
            "funcName": "sub_40b500",
            "funcStartAddr": "0x40b500",
            "funcEndAddr": "0x40b63c",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_40b500()\n{\n    unsigned long v0;  // [bp-0x20]\n    void tmp_14;  // tmp #14\n    unsigned long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // r13\n    unsigned long v5;  // r12\n    unsigned long v6;  // rbx\n    unsigned long long v7[2];  // rdi\n    unsigned long long v8;  // rdi\n    struct_0 *v9;  // rax\n    unsigned long long v10;  // rdx\n    unsigned long long|unsigned long v11;  // rbx\n    unsigned long long v12[2];  // rsi\n    unsigned long v13;  // xmm1lq\n\n    v2 = v4;\n    v1 = v5;\n    v0 = v6;\n    v11 = 0;\n    v12 = *(v7);\n    v8 = v7[1];\n    if (v12 < v8)\n    {\n        while (true)\n        {\n            if (*(v12) == 0)\n            {\n                v12 = &v12[2];\n                if (v12 >= v8)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v9 = v12[1];\n                v10 = 1;\n                if (v12[1] != 0)\n                {\n                    do\n                    {\n                        v9 = v9->field_8;\n                        v10 += 1;\n                    }\n                    while (v9 != 0);\n                }\n                v11 = (v11 < v10? v10 : v11);\n                v12 = &v12[2];\n                if (v12 >= v8)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    __fprintf_chk();\n    __fprintf_chk();\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, xmm1lq<8>, 0x0<64>, cc_ndep<8>)))\n    {\n    }\n    else\n    {\n        tmp_14 = v13;\n    }\n    __fprintf_chk();\n}\n"
        },
        {
            "funcName": "sub_415170",
            "funcStartAddr": "0x415170",
            "funcEndAddr": "0x415188",
            "decompiledFuncCode": "extern int512_t g_61d3e8;\n\nint sub_415170()\n{\n}\n"
        },
        {
            "funcName": "sub_4136d0",
            "funcStartAddr": "0x4136d0",
            "funcEndAddr": "0x4136e6",
            "decompiledFuncCode": "int sub_4136d0()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_413610();\n}\n"
        },
        {
            "funcName": "sub_40b0f0",
            "funcStartAddr": "0x40b0f0",
            "funcEndAddr": "0x40b116",
            "decompiledFuncCode": "int sub_40b0f0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v2[3];  // rbx\n    unsigned long long v3;  // rsi\n    unsigned long long v4;  // rdi\n    unsigned long long v5;  // rsi\n    unsigned long long v6;  // rax\n\n    v2 = v1;\n    v4 = v3;\n    v5 = v2[2];\n    v6 = v2[6]();\n    if (v2[2] <= v6)\n    {\n        abort(); /* do not return */\n    }\n    return v6 * 16 + *(v2);\n}\n"
        },
        {
            "funcName": "sub_40345b",
            "funcStartAddr": "0x40345b",
            "funcEndAddr": "0x40347a",
            "decompiledFuncCode": "extern unsigned long long g_61d488;\n\nint sub_40345b()\n{\n    unsigned long long v1;  // rax\n\n    v1 = &g_61d488;\n    if (false)\n    {\n        v1 = 0;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_40bb00",
            "funcStartAddr": "0x40bb00",
            "funcEndAddr": "0x40bbd0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_40bb00()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x8]\n    unsigned long v3;  // r12\n    unsigned long long v4[10];  // rdi\n    unsigned long long v5[10];  // r12\n    unsigned long v6;  // rbx\n    unsigned long long v7;  // rdi\n    unsigned long long v9[2];  // rbx\n    unsigned long long v10;  // rdi\n    unsigned long long v11;  // rax\n    unsigned long long v12[2];  // rbp\n    struct_0 *v13;  // rdi\n    void *v14;  // rbx\n    struct_0 *v15;  // rdi\n    void *v16;  // rbx\n\n    v1 = v3;\n    v5 = v4;\n    v0 = v6;\n    v12 = *(v4);\n    v11 = v4[1];\n    if (v4[8] != 0 && v4[4] != 0 && *(v4) < v4[1])\n    {\n        while (true)\n        {\n            v7 = *(v12);\n            if (*(v12) == 0)\n            {\n                v12 = &v12[2];\n                if (v11 <= v12)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v9 = v12;\n                while (true)\n                {\n                    *((long long *)(r12<8> + 64))();\n                    v9 = v9[1];\n                    if (v9 == 0)\n                    {\n                        break;\n                    }\n                    v10 = *(v9);\n                }\n                v11 = v5[1];\n                v12 = &v12[2];\n                if (v5[1] <= v12)\n                {\n                    break;\n                }\n            }\n        }\n        v12 = *(v5);\n    }\n    if ((*(v4) < v4[1] || v4[8] == 0 || v4[4] == 0) && v12 < v11)\n    {\n        do\n        {\n            v13 = v12[1];\n            if (v12[1] != 0)\n            {\n                while (true)\n                {\n                    v14 = v13->field_8;\n                    free(v13);\n                    v13 = v14;\n                    if (v14 == 0)\n                    {\n                        break;\n                    }\n                }\n            }\n            v12 = &v12[2];\n        }\n        while (v5[1] > v12);\n    }\n    v15 = v5[9];\n    if (v5[9] != 0)\n    {\n        while (true)\n        {\n            v16 = v15->field_8;\n            free(v15);\n            v15 = v16;\n            if (v16 == 0)\n            {\n                break;\n            }\n        }\n    }\n    free(*(v5));\n}\n"
        },
        {
            "funcName": "sub_409aa0",
            "funcStartAddr": "0x409aa0",
            "funcEndAddr": "0x409ab8",
            "decompiledFuncCode": "int sub_409aa0()\n{\n}\n"
        },
        {
            "funcName": "sub_413610",
            "funcStartAddr": "0x413610",
            "funcEndAddr": "0x413666",
            "decompiledFuncCode": "extern unsigned int g_61d474;\nextern unsigned int g_61d478;\nextern unsigned int g_61d47c;\nextern unsigned int g_61dac0;\nextern unsigned int g_61dac4;\nextern unsigned int g_61dac8;\nextern unsigned long long g_61dad0;\nextern unsigned long long g_61db00;\n\nint sub_413610()\n{\n    unsigned int *v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp+0x8]\n\n    g_61dac0 = g_61d47c;\n    g_61dac4 = g_61d478;\n    v1 = (unsigned int)v2;\n    v0 = &g_61dac0;\n    g_61d47c = g_61dac0;\n    g_61db00 = g_61dad0;\n    g_61d474 = g_61dac8;\n    return sub_413040();\n}\n"
        },
        {
            "funcName": "sub_413d70",
            "funcStartAddr": "0x413d70",
            "funcEndAddr": "0x413d75",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[28];\n    char field_1c;\n} struct_0;\n\nint sub_413d70()\n{\n    struct_0 *v1;  // rdi\n\n    return (unsigned long long)v1->field_1c;\n}\n"
        },
        {
            "funcName": "sub_41460a",
            "funcStartAddr": "0x41460a",
            "funcEndAddr": "0x41460f",
            "decompiledFuncCode": "int sub_41460a()\n{\n}\n"
        },
        {
            "funcName": "sub_40fb00",
            "funcStartAddr": "0x40fb00",
            "funcEndAddr": "0x40fea9",
            "decompiledFuncCode": "extern unsigned int g_417dd2;\nextern unsigned int g_417dd6;\nextern unsigned int g_417de6;\nextern unsigned int g_417dfd;\nextern unsigned int g_417e48;\nextern unsigned int g_417f18;\nextern unsigned int g_417f38;\nextern unsigned int g_417f60;\nextern unsigned int g_417f88;\nextern unsigned int g_417fb8;\n\nint sub_40fb00()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long long v11[9];  // r8\n    unsigned long long v12[9];  // rbx\n    unsigned long v13;  // rsi\n    void *v14;  // rdi\n    unsigned long v16;  // r9\n    unsigned long long v17;  // r8\n    unsigned long long v18;  // r15\n    unsigned long long v19;  // r14\n    unsigned long v20;  // rsi\n    unsigned long long v21;  // r8\n    unsigned long long v22;  // r13\n    unsigned long long v23;  // r12\n    unsigned long long v24;  // r14\n\n    v12 = v11;\n    if (v13 != 0)\n    {\n        __fprintf_chk();\n    }\n    else\n    {\n        __fprintf_chk();\n    }\n    dcgettext(0x0, 0x417dd2, 0x5);\n    __fprintf_chk();\n    fputs_unlocked((unsigned long long)dcgettext(0x0, 0x417e48, 0x5), v14);\n    switch (v16)\n    {\n    case 0:\n        abort(); /* do not return */\n    case 1:\n        dcgettext(0x0, 0x417dd6, 0x5);\n        break;\n    case 2:\n        dcgettext(0x0, 0x417de6, 0x5);\n        break;\n    case 3:\n        dcgettext(0x0, 0x417dfd, 0x5);\n        break;\n    case 4:\n        v24 = v11[3];\n        dcgettext(0x0, 0x417f18, 0x5);\n    case 5:\n        v24 = v11[3];\n        dcgettext(0x0, 0x417f38, 0x5);\n        *((unsigned long long [9])&v5) = v11[4];\n    case 6:\n        *((unsigned long long [9])&v6) = v11[1];\n        dcgettext(0x0, 0x417f60, 0x5);\n        *((unsigned long long [9])&v4) = v11[5];\n        *((unsigned long long [9])&v3) = v11[4];\n        *((unsigned long long [9])&v2) = v11[3];\n    case 7:\n        *((unsigned long long [9])&v7) = v12[2];\n        *((unsigned long long [9])&v6) = v12[1];\n        dcgettext(0x0, 0x417f88, 0x5);\n        *((unsigned long long [9])&v5) = v11[6];\n        *((unsigned long long [9])&v4) = v11[5];\n        *((unsigned long long [9])&v3) = v11[4];\n        *((unsigned long long [9])&v2) = v11[3];\n    case 8:\n        v22 = v12[6];\n        v23 = v12[5];\n        v18 = v12[4];\n        *((unsigned long long [9])&v8) = v12[7];\n        v19 = v12[3];\n        *((unsigned long long [9])&v6) = v12[2];\n        *((unsigned long long [9])&v7) = v12[1];\n        dcgettext(0x0, 0x417fb8, 0x5);\n    case 9:\n        v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n        v21 = v11[1];\n        v22 = v12[6];\n        v23 = v12[5];\n        *((unsigned long long [9])&v9) = v12[8];\n        v18 = v12[4];\n        v19 = v12[3];\n        *((unsigned long long [9])&v8) = v12[7];\n        *((unsigned long long [9])&v6) = v12[2];\n        v7 = v21;\n    default:\n        v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n        v17 = v11[1];\n        v22 = v12[6];\n        v23 = v12[5];\n        *((unsigned long long [9])&v9) = v12[8];\n        v18 = v12[4];\n        v19 = v12[3];\n        *((unsigned long long [9])&v8) = v12[7];\n        *((unsigned long long [9])&v6) = v12[2];\n        v7 = v17;\n    }\n    dcgettext(0x0, v20, 0x5);\n    v5 = v9;\n    v4 = v24;\n    __fprintf_chk();\n    return v4;\n    return __fprintf_chk();\n    v4 = v8;\n    v3 = v22;\n    v2 = v23;\n    v1 = v18;\n    v0 = v19;\n    return __fprintf_chk();\n}\n"
        },
        {
            "funcName": "sub_414380",
            "funcStartAddr": "0x414380",
            "funcEndAddr": "0x4143c5",
            "decompiledFuncCode": "int sub_414380()\n{\n    unsigned int v0;  // [bp-0x50]\n    unsigned long v1;  // [bp-0x48]\n    unsigned long v2;  // [bp-0x40]\n    unsigned long v3;  // [bp-0x20]\n    unsigned long v5;  // rcx\n    char v6;  // dl\n\n    v3 = v5;\n    if ((v6 & 64) != 0)\n    {\n        v0 = 24;\n        v1 = stack_base + 8;\n        v2 = stack_base + -56;\n    }\n    openat();\n    return sub_40eaf0();\n}\n"
        },
        {
            "funcName": "sub_403620",
            "funcStartAddr": "0x403620",
            "funcEndAddr": "0x4036a8",
            "decompiledFuncCode": "extern char g_61d4f0;\n\nint sub_403620()\n{\n    char v2;  // dl\n\n    if (g_61d4f0 != 0)\n    {\n        sub_40aa90();\n    }\n    if (v2 != 0)\n    {\n        sub_40aa00();\n        sub_40aa90();\n        free((unsigned long long)(unsigned int)sub_40aeb0());\n        return sub_403510();\n    }\n}\n"
        },
        {
            "funcName": "sub_40bbe0",
            "funcStartAddr": "0x40bbe0",
            "funcEndAddr": "0x40bdd0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    char padding_20[8];\n    struct struct_1 *field_28;\n    unsigned long long field_30;\n    unsigned long long field_38;\n    unsigned long long field_40;\n    unsigned long long field_48;\n} struct_0;\n\ntypedef struct struct_1 {\n    char padding_0[8];\n    unsigned int field_8;\n    char padding_c[4];\n    char field_10;\n} struct_1;\n\nint sub_40bbe0()\n{\n    void tmp_15;  // tmp #15\n    void *v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned int|unsigned long v2;  // [bp-0x58]\n    unsigned long long v3;  // [bp-0x50]\n    unsigned long long v4;  // [bp-0x48]\n    struct_1 *v5;  // [bp-0x40]\n    unsigned long v6;  // [bp-0x38]\n    unsigned long v7;  // [bp-0x30]\n    unsigned long v8;  // [bp-0x28]\n    unsigned long v9;  // [bp-0x20]\n    struct_0 *v11;  // rdi\n    unsigned long long v12[10];  // rbp\n    unsigned long v13;  // rsi\n    unsigned long v14;  // rsi\n    uint128_t v16;  // xmm0\n    unsigned int v17;  // ymm0\n    uint128_t v18;  // xmm0\n    void v19;  // xmm0\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // rax\n    unsigned long long v25;  // rax\n\n    v12 = v11;\n    if (v11->field_28->field_10 == 0)\n    {\n        if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)))\n        {\n            v18 = 0;\n            v18 = (unsigned int)v13;\n        }\n        else\n        {\n            tmp_15 = v14;\n            v16 = 0;\n            v17 = tmp_15 >> 1 | (unsigned long long)((unsigned int)v14 & 1);\n            v18 = xmm0<16> * 2;\n        }\n        xmm0<16> = (xmm0<16> / Conv(32->128, Load(addr=(Load(addr=(rdi<8> + 0x28<64>), size=8, endness=Iend_LE) + 0x8<64>), size=4, endness=Iend_LE)))\n    }\n    if (*((long long *)&v2) != 0 && (((char)(BinaryOp CmpF & 69) & 1) == 0 || v11->field_28->field_10 != 0) && (v11->field_28->field_10 != 0 || ((char)(BinaryOp CmpF & 69) & 1) != 0) && ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Shl(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3<8>), 0x0<64>, 0x0<64>)? 1 : [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3d<8>), Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3c<8>), 0x0<64>)) == 0)\n    {\n        if (v11->field_10 != *((long long *)&v2))\n        {\n            v0 = calloc(*((long long *)&v2), 0x10);\n            if (v0 != 0)\n            {\n                v2 = (unsigned int)sub_40b030();\n                v3 = 0;\n                v1 = *((long long *)&v2) * 16 + v0;\n                *((unsigned long long [10])&v6) = v12[6];\n                v4 = 0;\n                *((unsigned long long [10])&v7) = v12[7];\n                v5 = v11->field_28;\n                *((unsigned long long [10])&v8) = v12[8];\n                *((unsigned long long [10])&v9) = v12[9];\n                v21 = (unsigned int)sub_40b2c0();\n                if ((char)v21 == 0)\n                {\n                    v12[9] = v9;\n                    v22 = sub_40b2c0();\n                    if (v22 != 0)\n                    {\n                        v23 = sub_40b2c0();\n                        if (v23 != 0)\n                        {\n                            free(v0);\n                            v25 = v21;\n                            return v25;\n                        }\n                    }\n                    if (v23 == 0 || v22 == 0)\n                    {\n                        abort(); /* do not return */\n                    }\n                }\n                else\n                {\n                    free(*(v12));\n                    v12[0] = v0;\n                    v12[1] = v1;\n                    v12[2] = v2;\n                    v12[3] = v3;\n                    v12[9] = v9;\n                }\n            }\n        }\n        else\n        {\n            return 1;\n        }\n    }\n    if (((char)(BinaryOp CmpF & 69) & 1) == 0 && *((long long *)&v2) == 0 || v11->field_28->field_10 == 0 && ((char)(BinaryOp CmpF & 69) & 1) == 0 || ((char)(BinaryOp CmpF & 69) & 1) == 0 && ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Shl(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3<8>), 0x0<64>, 0x0<64>)? 1 : [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3d<8>), Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3c<8>), 0x0<64>)) != 0 || *((long long *)&v2) == 0 && v11->field_28->field_10 != 0 || ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Shl(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3<8>), 0x0<64>, 0x0<64>)? 1 : [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3d<8>), Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3c<8>), 0x0<64>)) != 0 && v11->field_28->field_10 != 0 || ((char)(BinaryOp CmpF & 69) & 1) == 0 && v0 == 0 && v11->field_10 != *((long long *)&v2) || v0 == 0 && v11->field_28->field_10 != 0 && v11->field_10 != *((long long *)&v2))\n    {\n        v21 = 0;\n    }\n    if (v11->field_10 != *((long long *)&v2) || (char)v21 != 0)\n    {\n        v24 = v21;\n        return v24;\n    }\n}\n"
        },
        {
            "funcName": "sub_413b80",
            "funcStartAddr": "0x413b80",
            "funcEndAddr": "0x413bdc",
            "decompiledFuncCode": "int sub_413b80()\n{\n    unsigned long long v1;  // r12\n    unsigned long long v2;  // rax\n    unsigned int *v3;  // rdi\n\n    v1 = __fpending();\n    v2 = sub_414fe0();\n    if (((char)*(v3) & 32) == 0)\n    {\n        if ((unsigned int)v2 != 0 && v1 == 0)\n        {\n            v2 = 0 - (unsigned int)(char)(*(__errno_location()) != 9);\n        }\n    }\n    else\n    {\n        if ((unsigned int)v2 == 0)\n        {\n            *(__errno_location()) = 0;\n            v2 = -18446744069414584321;\n        }\n    }\n    if ((unsigned int)v2 != 0 && (((char)*(v3) & 32) != 0 || v1 != 0))\n    {\n        v2 = -18446744069414584321;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4052e0",
            "funcStartAddr": "0x4052e0",
            "funcEndAddr": "0x40534e",
            "decompiledFuncCode": "extern unsigned int g_416420;\n\nint sub_4052e0()\n{\n    unsigned int *v1;  // rbp\n    char v2[39];  // rcx\n    unsigned long long v3;  // rbx\n\n    v1 = __errno_location();\n    if (v2[4 + 3] != 0 && v2[4 + 6] == 0)\n    {\n        *(v1) = 95;\n        return 0;\n    }\n    if (v2[4 + 3] == 0 || v2[4 + 6] != 0)\n    {\n        *(v1) = 95;\n        v3 = (unsigned int)sub_40dca0();\n        error(0x0, *(v1), (unsigned long long)dcgettext(0x0, 0x416420, 0x5));\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_4103f0",
            "funcStartAddr": "0x4103f0",
            "funcEndAddr": "0x410458",
            "decompiledFuncCode": "extern unsigned long long stdin;\n\nint sub_4103f0()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long long v3;  // rbx\n    char *v5;  // rax\n    unsigned long long v6;  // rax\n\n    v3 = 0;\n    v0 = 0;\n    v1 = 0;\n    if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v5 = v0 + __getdelim(&v0, &v1, 0xa, stdin) - 1;\n        if (*(v5) == 10)\n        {\n            *(v5) = 0;\n        }\n        v3 = (char)[D] amd64g_calculate_condition(0xf<64>, 0x13<64>, Call (target: 0x402a50<64>, prototype: () -> None, args: []), 0x0<64>, cc_ndep<8>);\n    }\n    free(v0);\n    v6 = v3;\n    return v6;\n}\n"
        },
        {
            "funcName": "sub_405430",
            "funcStartAddr": "0x405430",
            "funcEndAddr": "0x4055f1",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[24];\n    unsigned long long field_18;\n    char field_1b;\n    char padding_1c[8];\n    char field_24;\n    char padding_25[6];\n    char field_2b;\n} struct_0;\n\ntypedef struct struct_1 {\n    char padding_0[24];\n    unsigned int field_18;\n} struct_1;\n\nextern unsigned int g_416450;\nextern unsigned int g_4169ff;\n\nint sub_405430()\n{\n    unsigned int|unsigned long v1;  // rsi\n    unsigned int v2;  // r12d\n    unsigned int v3;  // ebx\n    char v4;  // r8b\n    struct_0 *v5;  // rdi\n    struct_1 *v6;  // r9\n    struct_1 *v7;  // r9\n    unsigned int v8;  // rdx\n    unsigned int v9;  // eax\n    unsigned int v10;  // ah\n    unsigned int v11;  // eax\n    unsigned long long v12;  // rax\n    unsigned int *v13;  // rbx\n    unsigned int v14;  // eax\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // rax\n    unsigned long long v17;  // rdx\n    unsigned int *v18;  // r14\n    unsigned int v19;  // ebx\n    unsigned int *v20;  // r14\n    unsigned int *v21;  // r15\n    unsigned int v22;  // r14d\n    unsigned int *v23;  // r15\n    unsigned long long v24;  // r12\n    unsigned long long v25;  // rax\n    unsigned long long v26;  // r12\n\n    v2 = v1;\n    v3 = v8;\n    if (v4 == 0)\n    {\n        if ((71776119061217535 & v5->field_18) != 0)\n        {\n            v1 = v6->field_18;\n        }\n        else if (v5->padding_25[1] != 0)\n        {\n            v1 = v7->field_18;\n        }\n        if ((71776119061217535 & v5->field_18) != 0 || v5->padding_25[1] != 0)\n        {\n            v9 = !((unsigned int)rdx<8>);\n            v10 = (char)(!((unsigned int)rdx<8>) >> 8) | 14;\n            v11 = rax<4> & v1;\n            if (((unsigned short)v11 & 4095) != 0)\n            {\n                v12 = sub_40c430();\n                if (v12 != 0)\n                {\n                    v13 = __errno_location();\n                    v14 = *(v13);\n                    if (*(&((char *)&v5->field_18)[3]) != 0 || v14 != 22 && v14 != 1)\n                    {\n                        v24 = (unsigned int)sub_40dd80();\n                        error(0x0, *(v13), (unsigned long long)dcgettext(0x0, 0x4169ff, 0x5));\n                    }\n                }\n            }\n        }\n    }\n    if (v8 != -1)\n    {\n        if ((((unsigned short)v11 & 4095) == 0 || (71776119061217535 & v5->field_18) == 0 || v12 == 0 || v4 != 0) && (((unsigned short)v11 & 4095) == 0 || v12 == 0 || v5->padding_25[1] == 0 || v4 != 0))\n        {\n            v16 = fchown(v3);\n            if (v16 != 0)\n            {\n                v22 = *(v21);\n                v21 = __errno_location();\n                if (*(v21) == 1 || v22 == 22)\n                {\n                    fchown(v3);\n                    *(v23) = v22;\n                }\n            }\n        }\n    }\n    else\n    {\n        if ((((unsigned short)v11 & 4095) == 0 || (71776119061217535 & v5->field_18) == 0 || v12 == 0 || v4 != 0) && (((unsigned short)v11 & 4095) == 0 || v12 == 0 || v5->padding_25[1] == 0 || v4 != 0))\n        {\n            v15 = lchown(v2);\n            if (v15 != 0)\n            {\n                v19 = *(v18);\n                v18 = __errno_location();\n                if (*(v18) == 1 || v19 == 22)\n                {\n                    lchown(v2);\n                    *(v20) = v19;\n                }\n            }\n        }\n    }\n    if (((unsigned short)v11 & 4095) == 0 || v12 == 0 || v4 != 0 || (71776119061217535 & v5->field_18) == 0 && v5->padding_25[1] == 0)\n    {\n        if ((v16 == 0 || v8 == -1) && (v15 == 0 || v8 != -1))\n        {\n            v17 = 1;\n        }\n        if (v8 == -1 && v15 != 0 || v16 != 0 && v8 != -1)\n        {\n            v25 = sub_405400();\n            v17 = 0;\n            if (v25 == 0)\n            {\n                v26 = (unsigned int)sub_40dd80();\n                error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x416450, 0x5));\n            }\n        }\n    }\n    if (v4 == 0 && ((unsigned short)v11 & 4095) != 0 && v12 != 0 && ((71776119061217535 & v5->field_18) != 0 || v5->padding_25[1] != 0) || (v8 == -1 || v16 != 0) && (v8 != -1 || v15 != 0) && (((unsigned short)v11 & 4095) == 0 || (71776119061217535 & v5->field_18) == 0 || v12 == 0 || v4 != 0) && (((unsigned short)v11 & 4095) == 0 || v12 == 0 || v5->padding_25[1] == 0 || v4 != 0) && v25 == 0)\n    {\n        v17 = 0 - (unsigned int)v5->padding_1c[3];\n    }\n    return v17;\n}\n"
        },
        {
            "funcName": "sub_40afb0",
            "funcStartAddr": "0x40afb0",
            "funcEndAddr": "0x40b01d",
            "decompiledFuncCode": "int sub_40afb0()\n{\n    unsigned long long v1;  // rdx\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rbx\n    unsigned long long v6;  // rbp\n    unsigned long long v7;  // rax\n    unsigned long long v8;  // rax\n\n    if (v1 != 0)\n    {\n        v6 = v3;\n        v5 = v1;\n        v2 = 0;\n        while (true)\n        {\n            v4 = sub_40e290();\n            if (v4 == -1)\n            {\n                break;\n            }\n            if (v4 != 0)\n            {\n                v2 += v4;\n                v6 += v4;\n                v5 -= v4;\n                if (v5 == v4)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                *(__errno_location()) = 28;\n                v8 = v2;\n                return v8;\n            }\n        }\n    }\n    else\n    {\n        v2 = 0;\n    }\n    v7 = v2;\n    return v7;\n}\n"
        },
        {
            "funcName": "sub_40dd80",
            "funcStartAddr": "0x40dd80",
            "funcEndAddr": "0x40dd8c",
            "decompiledFuncCode": "int sub_40dd80()\n{\n}\n"
        },
        {
            "funcName": "sub_409790",
            "funcStartAddr": "0x409790",
            "funcEndAddr": "0x40979c",
            "decompiledFuncCode": "int sub_409790()\n{\n}\n"
        },
        {
            "funcName": "main",
            "funcStartAddr": "0x402dd0",
            "funcEndAddr": "0x4033f8",
            "decompiledFuncCode": "extern unsigned int g_415260;\nextern unsigned int g_41526e;\nextern unsigned int g_415282;\nextern unsigned int g_4152ea;\nextern unsigned int g_415308;\nextern unsigned int g_415c40;\nextern unsigned int g_415cb0;\nextern unsigned int g_415cd8;\nextern unsigned int g_415d08;\nextern unsigned int g_4182d7;\nextern unsigned int g_61d47c;\nextern char g_61d4f0;\nextern unsigned long long g_61db00;\n\nint main()\n{\n    unsigned long v0;  // [bp-0x138]\n    unsigned long long v1;  // [bp-0x130]\n    unsigned long long|unsigned int|unsigned long v2;  // [bp-0x120]\n    unsigned int v3;  // [bp-0x118]\n    unsigned int v4;  // [bp-0x114]\n    unsigned long long|unsigned int|unsigned long v5;  // [bp-0x110]\n    unsigned long long v6;  // [bp-0x108]\n    unsigned short v7;  // [bp-0x100]\n    unsigned long long v8;  // [bp-0xfc]\n    unsigned long long v9;  // [bp-0xf4]\n    char v10;  // [bp-0xec]\n    unsigned short|char v11;  // [bp-0xeb]\n    char v12;  // [bp-0xea]\n    char v13;  // [bp-0xe9]\n    char v14;  // [bp-0xe8]\n    unsigned int v15;  // [bp-0xe4]\n    unsigned long long v16;  // [bp-0xe0]\n    unsigned long long v17;  // [bp-0xd8]\n    unsigned int v18;  // [bp-0xb0]\n    unsigned long long v23;  // rax\n    unsigned long long v25;  // r14\n    unsigned long long v26;  // r15\n    unsigned long long v27;  // r13\n    unsigned long long v28;  // r12\n    unsigned long v29;  // rdi\n    unsigned long long v30;  // rbp\n    unsigned long v31;  // rsi\n    unsigned long long v32;  // rbx\n    unsigned int v33;  // eax\n    char v34;  // al\n    unsigned long long v35;  // rbx\n    unsigned long long v36;  // rbp\n    unsigned long v38;  // rsi\n    unsigned long long v40;  // rbx\n    unsigned long long v42;  // rax\n    unsigned long long v44;  // rbx\n    unsigned int *v45;  // rax\n    unsigned int v48;  // eax\n    unsigned long long v49;  // rbx\n    unsigned long long v51;  // rbx\n    unsigned long long v56;  // rax\n    unsigned long long v57;  // rbp\n    unsigned long long v58;  // rbp\n    unsigned long long v59;  // rbp\n\n    sub_40c350();\n    setlocale(0x6, 0x4182d7);\n    bindtextdomain(0x415260, 0x415c40);\n    textdomain(0x415260);\n    sub_415170();\n    sub_4053c0();\n    v15 = 1;\n    v8 = 0x101000001010100;\n    v9 = 0x1000001000000;\n    v5 = 8589934596;\n    v10 = 0;\n    v4 = 2;\n    v6 = 0;\n    v7 = 1;\n    v14 = 0;\n    v16 = 0;\n    v13 = isatty(0x0) != 0;\n    v28 = 0;\n    v27 = 0;\n    v11 = 0;\n    v26 = 0;\n    v25 = 0;\n    v17 = 0;\n    v2 = 0;\n    while (true)\n    {\n        v23 = sub_413690();\n        if ((unsigned int)v23 == -1)\n        {\n            v30 = (unsigned int)v29 - g_61d47c;\n            v32 = v31 + (int)g_61d47c * 8;\n            v33 = 0;\n            v34 = v27 == 0;\n            if (rax<4> < (unsigned int)v29 - g_61d47c)\n            {\n                if (v28 != 0)\n                {\n                    if (!(v27 == 0))\n                    {\n                        error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x415d08, 0x5));\n                    }\n                    else if ((unsigned int)v29 - g_61d47c > 2)\n                    {\n                        v44 = (unsigned int)sub_40dd80();\n                        error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x4152ea, 0x5));\n                        sub_4036b0(); /* do not return */\n                    }\n                }\n                else\n                {\n                    if (v27 != 0)\n                    {\n                        if (v25 == 0)\n                        {\n                            v3 = 0;\n                            sub_40a040();\n                            sub_409750();\n                        }\n                    }\n                    else\n                    {\n                        if ((unsigned int)v29 - g_61d47c != 1)\n                        {\n                            v42 = __xstat(0x1);\n                            if (v42 != 0)\n                            {\n                                v45 = __errno_location();\n                                if ((int)v2 != 2 && *(v45) != 0)\n                                {\n                                    v2 = *(v45);\n                                    v49 = (unsigned int)sub_40dd80();\n                                    error(0x1, v2, (unsigned long long)dcgettext(0x0, 0x41526e, 0x5));\n                                }\n                            }\n                            if (((unsigned short)v18 & 0xf000) == 0x4000 && (v42 == 0 || *(v45) == 0))\n                            {\n                                v30 = (unsigned int)v29 - g_61d47c - 1;\n                                v27 = *((long long *)(v31 + (int)g_61d47c * 8 + (unsigned long long)((unsigned int)v29 - g_61d47c - 1) * 8));\n                                v48 = 0;\n                            }\n                        }\n                        else\n                        {\n                            __assert_fail(); /* do not return */\n                        }\n                    }\n                }\n            }\n            else\n            {\n                if ((unsigned int)v29 - g_61d47c == 1)\n                {\n                    v40 = (unsigned int)sub_40dd80();\n                    error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x415cd8, 0x5));\n                }\n                else\n                {\n                    v38 = \"missing file operand\";\n                }\n            }\n        }\n        else if ((unsigned int)v23 != 102)\n        {\n            if (v23 > 102)\n            {\n                if ((unsigned int)v23 != 116)\n                {\n                    if (v23 <= 116)\n                    {\n                        if ((unsigned int)v23 == 105)\n                        {\n                            v5 = 3;\n                        }\n                        if ((unsigned int)v23 == 110)\n                        {\n                            v5 = 2;\n                        }\n                    }\n                    else if ((unsigned int)v23 == 118)\n                    {\n                        v12 = 1;\n                    }\n                    else if (v23 < 118)\n                    {\n                        v11 = 1;\n                    }\n                    else if ((unsigned int)v23 == 128)\n                    {\n                        g_61d4f0 = 1;\n                    }\n                }\n                else\n                {\n                    if (v27 == 0)\n                    {\n                        if (__xstat(0x1) == 0)\n                        {\n                            v27 = g_61db00;\n                            v35 = (unsigned int)sub_40dd80();\n                            error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x415282, 0x5));\n                        }\n                        else\n                        {\n                            v36 = (unsigned int)sub_40dd80();\n                            error(0x1, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x41526e, 0x5));\n                        }\n                    }\n                    else\n                    {\n                        error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x415cb0, 0x5));\n                    }\n                }\n            }\n            else\n            {\n                if ((unsigned int)v23 == 83)\n                {\n                    v25 = 1;\n                    v2 = g_61db00;\n                }\n                else if (v23 > 83)\n                {\n                    if ((unsigned int)v23 == 98)\n                    {\n                        v25 = 1;\n                        v26 = (g_61db00 != 0? g_61db00 : r15<8>);\n                    }\n                    if ((unsigned int)v23 == 84)\n                    {\n                        v28 = 1;\n                    }\n                }\n                else\n                {\n                    if ((unsigned int)v23 == -131)\n                    {\n                        v1 = 0;\n                        v0 = \"Jim Meyering\";\n                        sub_40ff60();\n                        exit(0x0); /* do not return */\n                    }\n                    if ((unsigned int)v23 == -130)\n                    {\n                        sub_4036b0(); /* do not return */\n                    }\n                }\n            }\n        }\n        if ((unsigned int)v23 == 102)\n        {\n            v5 = 1;\n        }\n        if ((v28 == 0 && rax<4> < (unsigned int)v29 - g_61d47c && (unsigned int)v23 == -1 && v27 == 0 && v42 != 0 && (unsigned int)v29 - g_61d47c != 1 && *(v45) != 0 && (int)v2 == 2 || v28 == 0 && rax<4> < (unsigned int)v29 - g_61d47c && (unsigned int)v23 == -1 && v27 == 0 && (unsigned int)v29 - g_61d47c != 1 && (v42 == 0 || *(v45) == 0) && ((unsigned short)v18 & 0xf000) != 0x4000) && (unsigned int)v29 - g_61d47c != 2)\n        {\n            v51 = (unsigned int)sub_40dd80();\n            error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x415282, 0x5));\n        }\n        if ((v28 == 0 && rax<4> < (unsigned int)v29 - g_61d47c && (unsigned int)v23 == -1 && v27 == 0 && v42 != 0 && (unsigned int)v29 - g_61d47c != 1 && *(v45) != 0 && (int)v2 == 2 || v28 == 0 && rax<4> < (unsigned int)v29 - g_61d47c && (unsigned int)v23 == -1 && v27 == 0 && (unsigned int)v29 - g_61d47c != 1 && (v42 == 0 || *(v45) == 0) && ((unsigned short)v18 & 0xf000) != 0x4000) && (unsigned int)v29 - g_61d47c == 2 || rax<4> < (unsigned int)v29 - g_61d47c && (unsigned int)v23 == -1 && v27 == 0 && v28 != 0 && (unsigned int)v29 - g_61d47c <= 2)\n        {\n            v27 = 0;\n            if (v25 == 0)\n            {\n                v3 = 0;\n                sub_40a040();\n                sub_409750();\n            }\n        }\n        if (v28 == 0 && rax<4> < (unsigned int)v29 - g_61d47c && (unsigned int)v23 == -1 && v27 == 0 && (unsigned int)v29 - g_61d47c != 1 && (v42 == 0 || *(v45) == 0) && ((unsigned short)v18 & 0xf000) == 0x4000 && v25 != 0 || ((v28 == 0 && rax<4> < (unsigned int)v29 - g_61d47c && (unsigned int)v23 == -1 && v27 == 0 && v42 != 0 && (unsigned int)v29 - g_61d47c != 1 && *(v45) != 0 && (int)v2 == 2 || v28 == 0 && rax<4> < (unsigned int)v29 - g_61d47c && (unsigned int)v23 == -1 && v27 == 0 && (unsigned int)v29 - g_61d47c != 1 && (v42 == 0 || *(v45) == 0) && ((unsigned short)v18 & 0xf000) != 0x4000) && (unsigned int)v29 - g_61d47c == 2 || rax<4> < (unsigned int)v29 - g_61d47c && (unsigned int)v23 == -1 && v27 == 0 && v28 != 0 && (unsigned int)v29 - g_61d47c <= 2) && v25 != 0 || v28 == 0 && rax<4> < (unsigned int)v29 - g_61d47c && (unsigned int)v23 == -1 && v27 != 0 && v25 != 0)\n        {\n            if ((int)v5 != 2)\n            {\n                dcgettext(0x0, 0x415308, 0x5);\n                v48 = sub_40a5f0();\n            }\n            else\n            {\n                v38 = \"options --backup and --no-clobber are mutually exclusive\";\n            }\n        }\n        if (...)\n        {\n            error(0x0, 0x0, (unsigned long long)dcgettext(0x0, v38, 0x5));\n        }\n        if (...)\n        {\n            v3 = v48;\n            sub_40a040();\n            sub_409750();\n        }\n        if (...)\n        {\n            sub_4036b0(); /* do not return */\n        }\n        if (...)\n        {\n            v57 = (unsigned int)sub_403620();\n        }\n        if (...)\n        {\n            if ((unsigned int)v30 == 1)\n            {\n                v59 = (unsigned int)sub_403620();\n            }\n            else\n            {\n                sub_405360();\n                v58 = 1;\n                while (true)\n                {\n                    v32 += 8;\n                    v58 &= sub_403620();\n                    if (v32 == v31 + ((int)g_61d47c << 3) + (v56 << 3) + 8)\n                    {\n                        break;\n                    }\n                }\n            }\n        }\n        if (...)\n        {\n            return (unsigned long long)(stack_base + 0);\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_40df60",
            "funcStartAddr": "0x40df60",
            "funcEndAddr": "0x40df73",
            "decompiledFuncCode": "int sub_40df60()\n{\n}\n"
        },
        {
            "funcName": "sub_410e40",
            "funcStartAddr": "0x410e40",
            "funcEndAddr": "0x410ff0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[72];\n    unsigned int field_48;\n    char field_49;\n} struct_0;\n\nint sub_410e40()\n{\n    unsigned long v0;  // [bp-0xd0]\n    char v1;  // [bp-0xc8]\n    unsigned long v2;  // [bp-0xc0]\n    struct_0 *v4;  // rdi\n    struct_0 *v5;  // r15\n    unsigned long long v6;  // rsi\n    unsigned long long v7[17];  // r13\n    unsigned long long v8;  // rcx\n    unsigned int v10;  // r12d\n    char *v11;  // rdi\n    unsigned long long v12;  // rcx\n    char *v13;  // rsi\n    unsigned long long v14;  // cc_dep1\n    unsigned long long v15;  // cc_dep2\n    unsigned long v16;  // d\n    unsigned long long v17;  // cc_dep1\n    unsigned int|unsigned long v18;  // r12\n    unsigned long long v19;  // rbx\n    unsigned long long v21;  // r14\n    unsigned int *v22;  // ebp\n    unsigned int v24;  // r13d\n    unsigned long long v26;  // rax\n\n    v5 = v4;\n    v7 = v6;\n    v22 = v18;\n    v10 = v4->field_48;\n    v18 = v4->field_48 & 4;\n    if (v8 != 0)\n    {\n        v11 = \".\";\n        v12 = 3;\n        v13 = v8;\n        while (v12 != 0)\n        {\n            v12 -= 1;\n            v14 = *(v13);\n            v15 = *(v11);\n            v11 = &v11[v16];\n            v13 = &v13[v16];\n            break;\n        }\n        v17 = (v14 > v15) - 0 - (v14 < v15);\n        if ((char)v17 == 0 && v18 == 0)\n        {\n            if (!((unsigned int)v18 < 0))\n            {\n                v18 = v18;\n            }\n            else if (((unsigned short)v10 & 0x200) != 0)\n            {\n                v0 = &v5[1].padding_0[19];\n                v21 = (unsigned int)sub_413d70();\n                if ((char)v21 == 0)\n                {\n                    v18 = (unsigned int)sub_413dc0();\n                    if ((unsigned int)v18 >= 0)\n                    {\n                        v22 = (unsigned int)v18;\n                    }\n                }\n            }\n        }\n    }\n    if ((v8 == 0 || (char)v17 != 0) && v18 == 0 && (unsigned int)v18 >= 0)\n    {\n        v18 = v18;\n    }\n    if (v18 != 0)\n    {\n        if (((unsigned short)v10 & 0x200) != 0 && (unsigned int)v18 >= 0)\n        {\n            v19 = 0;\n            close(v18);\n        }\n        if ((unsigned int)v18 < 0 || ((unsigned short)v10 & 0x200) == 0)\n        {\n            v19 = 0;\n        }\n    }\n    if ((unsigned int)v18 < 0 && v18 == 0 && (v8 == 0 || (unsigned int)v18 < 0 || ((unsigned short)v10 & 0x200) == 0 || (char)v21 != 0 || (char)v17 != 0))\n    {\n        v18 = (unsigned int)sub_410df0();\n        if ((unsigned int)v18 < 0)\n        {\n            v19 = -18446744069414584321;\n        }\n    }\n    if (v18 == 0 && ((char)v21 == 0 || (unsigned int)v18 >= 0 || (unsigned int)v18 >= 0) && ((char)v17 == 0 || (unsigned int)v18 >= 0 || (unsigned int)v18 >= 0) && ((unsigned int)v18 >= 0 || v8 != 0 || (unsigned int)v18 >= 0) && ((unsigned int)v18 >= 0 || (unsigned int)v18 >= 0 || (unsigned int)v18 >= 0) && ((unsigned int)v18 >= 0 || (unsigned int)v18 >= 0 || ((unsigned short)v10 & 0x200) != 0))\n    {\n        v19 = __fxstat(0x1, v18, (unsigned int)&v1);\n        if ((unsigned int)v19 == 0)\n        {\n            if (v7[15] == *((long long *)&v1) && v7[16] == v2)\n            {\n                if ((*(&((char *)&v5->field_48)[1]) & 2) == 0)\n                {\n                    v19 = fchdir(v18);\n                }\n                else\n                {\n                    sub_410c50();\n                }\n            }\n            if (v7[15] != *((long long *)&v1) || v7[16] != v2)\n            {\n                *(__errno_location()) = 2;\n            }\n        }\n        if (v7[16] != v2)\n        {\n            v19 = -18446744069414584321;\n        }\n        if (((*(&((char *)&v5->field_48)[1]) & 2) == 0 || v7[15] != *((long long *)&v1) || v7[16] != v2 || (unsigned int)v19 != 0) && v22 < 0)\n        {\n            v24 = *(v22);\n            close(v18);\n            *(__errno_location()) = v24;\n        }\n    }\n    v26 = v19;\n    return v26;\n}\n"
        },
        {
            "funcName": "sub_40b120",
            "funcStartAddr": "0x40b120",
            "funcEndAddr": "0x40b225",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[72];\n    unsigned long long field_48;\n} struct_0;\n\ntypedef struct struct_1 {\n    char field_0;\n    char padding_1[7];\n    unsigned long long field_8;\n} struct_1;\n\ndouble sub_40b120()\n{\n    unsigned long long v1;  // rdi\n    struct_0 *v2;  // r12\n    unsigned long long v3;  // rsi\n    unsigned long long *v6;  // rdx\n    unsigned long long *v7;  // rbx\n    unsigned long long v8;  // rsi\n    unsigned long long v10;  // rax\n    unsigned long long v11[2];  // rax\n    unsigned long long v12;  // rsi\n    unsigned long long v14;  // rax\n    struct_1 *v15;  // rbx\n    unsigned long long v16;  // rsi\n    struct_1 *v17;  // rax\n    void v18;  // xmm0\n    uint128_t v19;  // xmm0\n    unsigned long v20;  // rcx\n    void v21;  // xmm0\n\n    v2 = v1;\n    *(v6) = v7;\n    v8 = *(v7);\n    if (*(v7) != 0)\n    {\n        v7 = sub_40b0f0();\n        if (v8 != v1)\n        {\n            v1 = v3;\n            v10 = *((long long *)(r12<8> + 56))();\n            if (v10 == 0)\n            {\n                v11 = v15->field_8;\n                if (v15->field_8 != 0)\n                {\n                    v12 = *(v11);\n                    if (v1 != *(v11))\n                    {\n                        while (true)\n                        {\n                            v14 = *((long long *)(r12<8> + 56))();\n                            if (v14 == 0)\n                            {\n                                v15 = v15->field_8;\n                                v11 = v15->field_8;\n                                v16 = *(v11);\n                                if (*(v11) == v1 || v15->field_8 == 0)\n                                {\n                                    break;\n                                }\n                            }\n                            else\n                            {\n                                v11 = v15->field_8;\n                            }\n                        }\n                        if (v14 == 0)\n                        {\n                            return v18;\n                        }\n                    }\n                    if ((char)v20 != 0)\n                    {\n                        *((unsigned long long [2])&v15->field_8) = v11[1];\n                        v11[0] = 0;\n                        v11[1] = v2->field_48;\n                        v2->field_48 = v11;\n                    }\n                }\n            }\n        }\n        if ((v8 == v1 || v10 != 0) && (char)v20 != 0)\n        {\n            v17 = v15->field_8;\n            if (v15->field_8 != 0)\n            {\n                v19 = *(v17);\n                *(v15) = *(v17);\n                *((long long *)&v17->field_0) = 0;\n                v17->field_8 = v2->field_48;\n                v2->field_48 = v17;\n                return v19;\n            }\n            *((long long *)&v15->field_0) = 0;\n        }\n        if ((v15->field_8 == 0 || v10 == 0 || (char)v20 == 0) && (v15->field_8 == 0 || (char)v20 == 0 || v8 != v1) && (v8 == v1 || v15->field_8 != 0 || v10 != 0))\n        {\n            return v21;\n        }\n    }\n    if (*(v7) == 0 || v15->field_8 == 0 && v10 == 0 && v8 != v1 || v10 == 0 && v1 != *(v11) && v8 != v1)\n    {\n        return v18;\n    }\n}\n"
        },
        {
            "funcName": "sub_40a7e0",
            "funcStartAddr": "0x40a7e0",
            "funcEndAddr": "0x40a87e",
            "decompiledFuncCode": "extern unsigned int g_416e22;\nextern unsigned int g_61d408;\nextern char g_61d930;\nextern unsigned long long g_61d938;\n\nint sub_40a7e0()\n{\n    unsigned long long v1;  // rax\n    unsigned int *v2;  // rbx\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rbp\n\n    v1 = sub_413b80();\n    if (v1 != 0)\n    {\n        v2 = __errno_location();\n        if (g_61d930 == 0 || *(v2) != 32)\n        {\n            v4 = dcgettext(0x0, 0x416e22, 0x5);\n            if (g_61d938 != 0)\n            {\n                sub_40de20();\n                error(0x0, *(v2), \"%s: %s\");\n            }\n        }\n    }\n    if (v1 == 0 || *(v2) == 32 && g_61d930 != 0)\n    {\n        v3 = sub_413b80();\n    }\n    if ((unsigned int)v3 == 0 && (v1 == 0 || *(v2) == 32) && (v1 == 0 || g_61d930 != 0))\n    {\n        return v3;\n    }\n    while (true)\n    {\n        _exit(g_61d408);\n        error(0x0, *(v2), \"%s\");\n    }\n}\n"
        },
        {
            "funcName": "sub_403510",
            "funcStartAddr": "0x403510",
            "funcEndAddr": "0x40361c",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[46];\n    char field_2e;\n} struct_0;\n\nextern unsigned int g_415390;\n\nint sub_403510()\n{\n    char v0;  // [bp-0x4a]\n    char v1;  // [bp-0x49]\n    unsigned long v2;  // [bp-0x48]\n    unsigned long long v3;  // [bp-0x40]\n    char v4;  // [bp-0x38]\n    unsigned int v5;  // [bp-0x34]\n    unsigned short v6;  // [bp-0x30]\n    char v7;  // [bp-0x2e]\n    unsigned long v8;  // [bp-0x28]\n    unsigned short v9;  // [bp-0x20]\n    char v10;  // [bp-0x1f]\n    char v11;  // [bp-0x1e]\n    unsigned long long v13;  // rax\n    unsigned long v14;  // rdi\n    struct_0 *v15;  // rdx\n    unsigned long long v16;  // rbp\n\n    v13 = sub_4094d0();\n    if (v13 != 0)\n    {\n        if (v0 != 0)\n        {\n            v13 = 0;\n        }\n        else if (v1 != 1)\n        {\n            if (v14 != 0)\n            {\n                v4 = 0;\n                v5 = 5;\n                v6 = 0x100;\n                v7 = 1;\n                v9 = 0;\n                v11 = 1;\n                v8 = (unsigned int)sub_40e240();\n                if (v8 != 0)\n                {\n                    v2 = v14;\n                    v3 = 0;\n                    v10 = v15->field_2e;\n                    v13 = sub_4041b0();\n                    if ((unsigned int)(v13 - 2) <= 2)\n                    {\n                        v13 = (char)((unsigned int)v13 != 4);\n                    }\n                    else\n                    {\n                        __assert_fail(); /* do not return */\n                    }\n                }\n                else\n                {\n                    v16 = (unsigned int)sub_40dd80();\n                    error(0x1, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x415390, 0x5));\n                }\n            }\n        }\n    }\n    if (v14 == 0 || v1 == 1 || v13 == 0 || v0 != 0 || (unsigned int)(v13 - 2) <= 2 && v8 != 0)\n    {\n        return v13;\n    }\n}\n"
        },
        {
            "funcName": "sub_409640",
            "funcStartAddr": "0x409640",
            "funcEndAddr": "0x409685",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_0;\n\nint sub_409640()\n{\n    unsigned long v0;  // [bp-0x28]\n    unsigned long v1;  // [bp-0x20]\n    unsigned long long v2;  // [bp-0x18]\n    unsigned long v4;  // rdi\n    unsigned long v5;  // rsi\n    struct_0 *v6;  // rax\n    struct_0 *v7;  // rbx\n\n    v0 = v4;\n    v1 = v5;\n    v2 = 0;\n    v6 = sub_40c0a0();\n    if (v6 != 0)\n    {\n        v7 = v6;\n        free(v6->field_10);\n        v6 = free(v7);\n    }\n    return v6;\n}\n"
        },
        {
            "funcName": "sub_413cb0",
            "funcStartAddr": "0x413cb0",
            "funcEndAddr": "0x413d06",
            "decompiledFuncCode": "int sub_413cb0()\n{\n    unsigned int v1;  // edi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // cc_dep1\n    unsigned long long v5;  // cc_dep2\n    unsigned long v6;  // d\n    char *v7;  // rdi\n    char *v8;  // rsi\n    unsigned long long v9;  // rcx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // cc_dep1\n    char *v12;  // rdi\n    unsigned long long v13;  // rcx\n    char v14;  // cc_dep1\n    char v15;  // cc_dep2\n\n    v10 = 1;\n    if (v3 != 0)\n    {\n        v9 = 2;\n        v7 = \"C\";\n        v3 = setlocale(v1, 0x0);\n        while (v9 != 0)\n        {\n            v9 -= 1;\n            v4 = *(v8);\n            v5 = *(v7);\n            v7 = &v7[v6];\n            v8 = &v8[v6];\n            break;\n        }\n        v10 = 0;\n        v11 = (v4 > v5) - 0 - (v4 < v5);\n        if ((char)v11 != 0)\n        {\n            v12 = \"POSIX\";\n            v13 = 6;\n            while (v13 != 0)\n            {\n                v13 -= 1;\n                v14 = *(v8);\n                v15 = *(v12);\n                v12 = &v12[v6];\n                v8 = &v8[v6];\n                break;\n            }\n            return 0;\n        }\n    }\n    if (v3 == 0 || (char)v11 == 0)\n    {\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_4034b1",
            "funcStartAddr": "0x4034b1",
            "funcEndAddr": "0x403508",
            "decompiledFuncCode": "extern char g_61d4c8;\nextern unsigned long long g_61d4d0;\n\nint sub_4034b1()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // rax\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long long v9;  // rbx\n    unsigned long long v10;  // r12\n\n    if (g_61d4c8 == 0)\n    {\n        v2 = stack_base + 0;\n        v1 = v5;\n        v0 = v6;\n        while (true)\n        {\n            if (g_61d4d0 >= 0)\n            {\n                break;\n            }\n            g_61d4d0 = g_61d4d0 + 1;\n            *((long long *)(6409792 + (v7 + 1) * 8))();\n        }\n        v9 = v0;\n        v10 = v1;\n        g_61d4c8 = 1;\n        return sub_40345b();\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_40c350",
            "funcStartAddr": "0x40c350",
            "funcEndAddr": "0x40c3e9",
            "decompiledFuncCode": "extern unsigned long long __progname_full;\nextern unsigned long long g_61d940;\nextern unsigned long long program_invocation_short_name;\nextern unsigned long long stderr;\n\nint sub_40c350()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // r8\n    unsigned long long v6;  // cc_dep1\n    unsigned long long v7;  // cc_dep2\n    unsigned long v8;  // d\n    char *v9;  // rdi\n    char *v10;  // rsi\n    unsigned long long v11;  // rcx\n    char *v13;  // rdi\n    unsigned long long v14;  // rcx\n    char *v15;  // rsi\n    unsigned long long v16;  // cc_dep1\n    unsigned long long v17;  // cc_dep2\n\n    if (v1 != 0)\n    {\n        v3 = v1;\n        v4 = strrchr();\n        if (v4 != 0)\n        {\n            v5 = v4 + 1;\n            if (v4 + 1 - v1 > 6)\n            {\n                v10 = v4 - 6;\n                v9 = \"/.libs\";\n                v11 = 7;\n                while (v11 != 0)\n                {\n                    v11 -= 1;\n                    v6 = *(v10);\n                    v7 = *(v9);\n                    v9 = &v9[v8];\n                    v10 = &v10[v8];\n                    break;\n                }\n                if ((v6 > v7) - 0 - (v6 < v7) == 0)\n                {\n                    v13 = \"lt-\";\n                    v14 = 3;\n                    v15 = v5;\n                    v3 = v5;\n                    while (v14 != 0)\n                    {\n                        v14 -= 1;\n                        v16 = *(v15);\n                        v17 = *(v13);\n                        v13 = &v13[v8];\n                        v15 = &v15[v8];\n                        break;\n                    }\n                    if ((v16 > v17) - 0 - (v16 < v17) == 0)\n                    {\n                        v3 = v4 + 4;\n                        program_invocation_short_name = v4 + 4;\n                    }\n                }\n            }\n        }\n        g_61d940 = v3;\n        __progname_full = v3;\n        return v4;\n    }\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 0x1, 0x37, stderr);\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_40df90",
            "funcStartAddr": "0x40df90",
            "funcEndAddr": "0x40dfa2",
            "decompiledFuncCode": "int sub_40df90()\n{\n}\n"
        },
        {
            "funcName": "sub_40aa60",
            "funcStartAddr": "0x40aa60",
            "funcEndAddr": "0x40aa87",
            "decompiledFuncCode": "int sub_40aa60()\n{\n    char *v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned long long v3;  // rdx\n\n    v2 = strlen(v1);\n    if (v2 > 1)\n    {\n        while (true)\n        {\n            v3 = v2 - 1;\n            if (v1[v2 + -1] != 47)\n            {\n                break;\n            }\n            v2 = v3;\n            return 1;\n        }\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40f2d0",
            "funcStartAddr": "0x40f2d0",
            "funcEndAddr": "0x40f389",
            "decompiledFuncCode": "int sub_40f2d0()\n{\n    void tmp_12;  // tmp #12\n    char v0;  // [bp-0x19]\n    unsigned long long v2[13];  // rdi\n    unsigned long long v3[13];  // rbp\n    unsigned long long *v4[4];  // rsi\n    unsigned long long v5[4];  // rbx\n    unsigned long long v6;  // rax\n    unsigned long long v8;  // rax\n    unsigned long long v9;  // rdx\n\n    v3 = v2;\n    v5 = *(v4);\n    v9 = (*(v4))[3];\n    if ((*(v4))[1] != 1073741822)\n    {\n    }\n    else\n    {\n        v8 = 1;\n        if ((*(v4))[3] != 1073741822)\n        {\n            v6 = v2[10];\n            *((unsigned long long [13])&(*(v4))[0]) = v2[9];\n            v5[1] = v6;\n        }\n    }\n    if ((*(v4))[1] == 1073741823)\n    {\n        if ((*(v4))[3] != 1073741823)\n        {\n            sub_413c70();\n            v9 = v5[3];\n        }\n        else\n        {\n            *(v4) = 0;\n            v8 = 0;\n        }\n    }\n    if (((*(v4))[1] == 1073741823 || (*(v4))[3] == 1073741822) && ((*(v4))[1] == 1073741823 || (*(v4))[1] != 1073741822) && (v5[3] == 1073741822 || (*(v4))[1] != 1073741823) && ((*(v4))[1] != 1073741823 || (*(v4))[3] != 1073741823))\n    {\n        tmp_12 = v3[12];\n        *((unsigned long long [13])&(*(v4))[2]) = v3[11];\n        v5[3] = tmp_12;\n        v8 = 0;\n    }\n    if (((*(v4))[1] == 1073741823 || (*(v4))[3] != 1073741822) && ((*(v4))[3] != 1073741822 || v5[3] != 1073741822) && ((*(v4))[3] != 1073741822 || (*(v4))[3] != 1073741823) && ((*(v4))[1] == 1073741822 || (*(v4))[1] != 1073741823 || v5[3] != 1073741822) && ((*(v4))[1] == 1073741822 || (*(v4))[1] != 1073741823 || (*(v4))[3] != 1073741823))\n    {\n        v8 = 0;\n        if (v9 == 1073741823)\n        {\n            v0 = 0;\n            sub_413c70();\n            return (unsigned long long)v0;\n        }\n    }\n    if (v9 != 1073741823 || (*(v4))[1] == 1073741823 && v5[3] == 1073741822 || (*(v4))[1] == 1073741823 && (*(v4))[3] == 1073741823 || (*(v4))[1] == 1073741822 && (*(v4))[3] == 1073741822 || (*(v4))[3] == 1073741822 && (*(v4))[1] != 1073741823)\n    {\n        return v8;\n    }\n}\n"
        },
        {
            "funcName": "fts_close",
            "funcStartAddr": "0x411ec0",
            "funcEndAddr": "0x41200e",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    unsigned int field_28;\n    unsigned int field_2c;\n    char padding_30[24];\n    unsigned int field_48;\n    char padding_4c[4];\n    unsigned long long field_50;\n    unsigned long long field_58;\n} struct_0;\n\nint fts_close()\n{\n    struct_0 *v1;  // rdi\n    struct_0 *v2;  // rbp\n    unsigned long long v3[12];  // rdi\n    unsigned long long v4[12];  // rbx\n    unsigned long long v6;  // rax\n    unsigned long long v8;  // rax\n    unsigned long long v9;  // rax\n    unsigned long long v10;  // rax\n    unsigned int *v11;  // r12\n    unsigned long long v12;  // rbx\n    unsigned long long v13;  // rax\n    void *v16;  // rdi\n    unsigned long long v18;  // rax\n\n    v2 = v1;\n    v3 = v1->field_0;\n    if (v3 != 0)\n    {\n        if ((char)(v3[11] - 0 >> 63))\n        {\n            v4 = v3;\n        }\n        else\n        {\n            while (true)\n            {\n                v4 = v3[2];\n                if (v3[2] != 0)\n                {\n                    free(v3);\n                    v3 = v4;\n                    if ((char)(v4[11] - 0 >> 63))\n                    {\n                        break;\n                    }\n                }\n                else\n                {\n                    v4 = v3[1];\n                    free(v3);\n                    v3 = v4;\n                    if ((char)(v4[11] - 0 >> 63))\n                    {\n                        break;\n                    }\n                }\n            }\n        }\n        free(v4);\n    }\n    if (v2->field_8 != 0)\n    {\n        sub_410a30();\n    }\n    free(v2->field_10);\n    free(v2->field_20);\n    v6 = v2->field_48;\n    if (((char)(v2->field_48 >> 8) & 2) != 0)\n    {\n        if (v2->field_2c >= 0)\n        {\n            v9 = close(v2->field_2c);\n            if (v9 != 0)\n            {\n                v12 = (unsigned int)*(__errno_location());\n            }\n        }\n    }\n    else\n    {\n        if ((v6 & 4) == 0)\n        {\n            v8 = fchdir(v2->field_28);\n            if (v8 == 0)\n            {\n                v10 = close(v2->field_28);\n                if (v10 != 0)\n                {\n                    v11 = __errno_location();\n                }\n            }\n            else\n            {\n                v11 = __errno_location();\n                v12 = *(v11);\n                v13 = close(v2->field_28);\n            }\n            if (((unsigned int)v12 == 0 || v8 == 0) && (v8 == 0 || v13 != 0) && (v10 != 0 || v8 != 0))\n            {\n                v12 = *(v11);\n            }\n        }\n    }\n    if (((char)(v2->field_48 >> 8) & 2) == 0 && (v6 & 4) != 0 || v2->field_2c < 0 && ((char)(v2->field_48 >> 8) & 2) != 0 || v9 == 0 && ((char)(v2->field_48 >> 8) & 2) != 0 || v10 == 0 && v8 == 0 && ((char)(v2->field_48 >> 8) & 2) == 0)\n    {\n        v12 = 0;\n    }\n    sub_410a80();\n    if (v2->field_50 != 0)\n    {\n        sub_40bb00();\n    }\n    v16 = v2->field_58;\n    if (!(((unsigned short)v2->field_48 & 258) != 0))\n    {\n        free(v16);\n    }\n    else if (v16 != 0)\n    {\n        sub_40bb00();\n    }\n    free(v2);\n    if ((unsigned int)v12 != 0)\n    {\n        *(__errno_location()) = v12;\n        v12 = -18446744069414584321;\n    }\n    v18 = v12;\n    return v18;\n}\n"
        },
        {
            "funcName": "sub_403a80",
            "funcStartAddr": "0x403a80",
            "funcEndAddr": "0x403c6e",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[44];\n    unsigned int field_2c;\n} struct_0;\n\ntypedef struct struct_1 {\n    char padding_0[8];\n    unsigned long long field_8;\n    char padding_10[32];\n    unsigned long long field_30;\n    char padding_38[8];\n    unsigned int field_40;\n    char padding_44[44];\n    unsigned short field_70;\n} struct_1;\n\ntypedef struct struct_2 {\n    char padding_0[8];\n    struct struct_3 *field_8;\n    char padding_10[32];\n    unsigned long long field_30;\n    char padding_38[8];\n    unsigned int field_40;\n    char padding_44[44];\n    unsigned short field_70;\n} struct_2;\n\nextern unsigned int g_415f80;\nextern unsigned int g_415f96;\nextern unsigned int g_415fa2;\n\nint sub_403a80()\n{\n    unsigned long long v0;  // [bp-0x1d8]\n    char v1;  // [bp-0xb8]\n    unsigned long long v3;  // rdx\n    char v4[26];  // r12\n    unsigned long long v5;  // rdx\n    struct_0 *v6;  // rdi\n    struct_1 *v8;  // rsi\n    struct_2 *v9;  // rbx\n    char v12;  // cl\n    char v13;  // dl\n    unsigned long long v14;  // rdx\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // rax\n    unsigned int *v17;  // r13\n    unsigned long long v18;  // rbx\n    unsigned long long v19;  // rax\n    char *v20;  // rsi\n    unsigned int v22;  // eax\n    unsigned long long v23;  // rbp\n    unsigned long long v24[12];  // rax\n\n    v4 = v3;\n    v5 = 0;\n    v9 = v8;\n    v13 = v12 != 0;\n    v14 = rdx<8> * 0x200;\n    v15 = unlinkat(v6->field_2c, v8->field_30, v14);\n    if (v15 != 0)\n    {\n        v17 = __errno_location();\n        if (!(*(v17) != 30))\n        {\n            v19 = __fxstatat(0x1, v6->field_2c, v9->field_30, (unsigned int)&v1, 0x100);\n            if (v19 != 0)\n            {\n                v14 = *(v17);\n                if (*(v17) == 2)\n                {\n                    v16 = 2;\n                }\n            }\n            if (v19 == 0 || *(v17) != 2)\n            {\n                *(v17) = 30;\n            }\n        }\n        else if (v4[0] != 0)\n        {\n            v16 = 2;\n        }\n        if ((v9->field_70 == 4 && v14 <= 20 && (unsigned int)v14 != 20 && *(v17) != 30 && v4[0] != 0 && (unsigned int)v14 != 2 || v9->field_70 == 4 && *(v17) != 30 && (v4[0] == 0 || (unsigned int)v14 != 22) && (v4[0] == 0 || (unsigned int)v14 != 84) && (v4[0] == 0 || (unsigned int)v14 != 20) && (v4[0] == 0 || v14 > 20)) && (unsigned int)v14 <= 39 || v9->field_70 == 4 && v4[0] == 0 && *(v17) == 30 && *(v17) == 2 && v19 != 0)\n        {\n            v0 = 0x8000320000;\n            if (((char)((char)*(&((char *)stack_base)[((v14 & 63) >> 3) + -472]) >> (unsigned long long)(char)(v14 & 63 & 7)) & 1) != 0)\n            {\n                v22 = v9->field_40;\n                if (v22 == 13 || v9->field_40 == 1)\n                {\n                    *(v17) = v22;\n                }\n            }\n        }\n        if ((v9->field_70 == 4 && v14 <= 20 && (unsigned int)v14 != 20 && *(v17) != 30 && v4[0] != 0 && (unsigned int)v14 != 2 || v9->field_70 == 4 && *(v17) != 30 && (v4[0] == 0 || (unsigned int)v14 != 22) && (v4[0] == 0 || (unsigned int)v14 != 84) && (v4[0] == 0 || (unsigned int)v14 != 20) && (v4[0] == 0 || v14 > 20)) && (unsigned int)v14 <= 39 || v9->field_70 == 4 && v4[0] == 0 && *(v17) == 30 && *(v17) == 2 && v19 != 0 || v14 <= 20 && (unsigned int)v14 != 20 && *(v17) != 30 && v4[0] != 0 && (unsigned int)v14 != 2 && v9->field_70 != 4 || (v9->field_70 == 4 && v14 <= 20 && (unsigned int)v14 != 20 && *(v17) != 30 && v4[0] != 0 && (unsigned int)v14 != 2 || v9->field_70 == 4 && *(v17) != 30 && (v4[0] == 0 || (unsigned int)v14 != 22) && (v4[0] == 0 || (unsigned int)v14 != 84) && (v4[0] == 0 || (unsigned int)v14 != 20) && (v4[0] == 0 || v14 > 20)) && (unsigned int)v14 > 39 || *(v17) != 30 && (v4[0] == 0 || (unsigned int)v14 != 22) && (v4[0] == 0 || (unsigned int)v14 != 84) && (v4[0] == 0 || (unsigned int)v14 != 20) && (v4[0] == 0 || v14 > 20) && v9->field_70 != 4 || v4[0] == 0 && *(v17) == 30 && *(v17) == 2 && v19 != 0 && v9->field_70 != 4 || *(v17) == 30 && (v19 == 0 || *(v17) != 2))\n        {\n            v23 = (unsigned int)sub_40dd80();\n            error(0x0, *(v17), (unsigned long long)dcgettext(0x0, 0x415fa2, 0x5));\n            v24 = v9->field_8;\n            if (!((char)(v9->field_8->field_58 - 0 >> 63)))\n            {\n                while (v24[4] == 0)\n                {\n                    v24[4] = 1;\n                    v24 = v24[1];\n                    if ((char)(v24[11] - 0 >> 63))\n                    {\n                        break;\n                    }\n                }\n            }\n            v16 = 4;\n        }\n    }\n    else\n    {\n        v16 = 2;\n        if (v4[3 + 1] != 0)\n        {\n            v18 = (unsigned int)sub_40dd80();\n            if (v12 != 0)\n            {\n                v20 = (unsigned long long)dcgettext(0x0, 0x415f80, 0x5);\n            }\n            else\n            {\n                v20 = (unsigned long long)dcgettext(0x0, 0x415f96, 0x5);\n            }\n            __printf_chk(0x1, v20);\n            return 2;\n        }\n    }\n    if (v4[3 + 1] == 0 || v15 != 0)\n    {\n        return v16;\n    }\n}\n"
        },
        {
            "funcName": "sub_40e910",
            "funcStartAddr": "0x40e910",
            "funcEndAddr": "0x40ea6d",
            "decompiledFuncCode": "extern unsigned int g_416d4b;\n\nint sub_40e910()\n{\n    unsigned int|char * v0;  // [bp-0x60]\n    unsigned long long|unsigned int v1;  // [bp-0x58]\n    unsigned long long v2;  // [bp-0x50]\n    unsigned long v3;  // [bp-0x48]\n    unsigned int v4;  // [bp-0x3c]\n    char *v6;  // rdi\n    unsigned long long v7;  // r14\n    unsigned long long v8;  // r8\n    unsigned long long v9;  // r13\n    unsigned long long v10;  // rsi\n    unsigned long long v11;  // rbp\n    unsigned long long v12;  // rdx\n    unsigned long v13;  // rcx\n    unsigned int *v14;  // r15\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // rdx\n    unsigned long long v18;  // rax\n    unsigned long long v19;  // rdx\n    unsigned long long|unsigned int v21;  // r12d\n    unsigned long long v22;  // rbx\n    unsigned long long v23;  // r14\n    unsigned long long v25;  // rsi\n    unsigned long long v26;  // rdi\n    unsigned int v27;  // rdx\n    unsigned int|unsigned long v28;  // rcx\n    unsigned int v29;  // cc_dep1\n\n    v7 = v6;\n    v9 = v8;\n    v11 = v10;\n    v2 = v12;\n    v0 = v6;\n    v3 = v13;\n    v14 = __errno_location();\n    v4 = *(v14);\n    v15 = strlen(v6);\n    v16 = v11 + v9;\n    if (v11 + v9 <= v15)\n    {\n        v1 = v7 + v15 - v16;\n        v18 = strspn(v7 + v15 - v16, 0x416d4b);\n        if (v9 <= v18)\n        {\n            if ((unsigned long long)(unsigned int)sub_414400() != 0)\n            {\n                v21 = 238328;\n                v22 = &v0[v9 + v15 + -1 * v16];\n                while (true)\n                {\n                    v23 = v1;\n                    if (v9 != 0)\n                    {\n                        while (true)\n                        {\n                            v23 += 1;\n                            *((unsigned long long *)(v23 - 1)) = (char)*((char *)(4291968 + (unsigned long long)(unsigned int)sub_414440()));\n                            if (v23 == v22)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    v25 = v2;\n                    v26 = v0;\n                    v27 = (long long)(stack_base)[-72]();\n                    if (v27 < 0)\n                    {\n                        v28 = *(v14);\n                        if (*(v14) == 17)\n                        {\n                            v29 = v21;\n                            v21 = (unsigned long long)v21 - 1;\n                            sub_414560();\n                            *(v14) = 17;\n                            v19 = -18446744069414584321;\n                        }\n                        else\n                        {\n                            v27 = -1;\n                        }\n                    }\n                    else\n                    {\n                        *(v14) = v4;\n                        v28 = v4;\n                    }\n                    if (*(v14) != 17 || v27 >= 0)\n                    {\n                        v1 = v27;\n                        *((unsigned long *)&v0) = v28;\n                        sub_414560();\n                        v19 = v1;\n                        *(v14) = v0;\n                    }\n                }\n            }\n            else\n            {\n                v19 = -18446744069414584321;\n            }\n        }\n    }\n    if (v9 > v18 || v11 + v9 > v15)\n    {\n        *(v14) = 22;\n        v19 = -18446744069414584321;\n    }\n    return v19;\n}\n"
        },
        {
            "funcName": "sub_409620",
            "funcStartAddr": "0x409620",
            "funcEndAddr": "0x409636",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_0;\n\nint sub_409620()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    struct_0 *v3;  // rdi\n\n    v0 = v2;\n    free(v3->field_10);\n}\n"
        },
        {
            "funcName": "sub_414560",
            "funcStartAddr": "0x414560",
            "funcEndAddr": "0x4145b1",
            "decompiledFuncCode": "int sub_414560()\n{\n    unsigned int v1;  // [bp+0x100008]\n    void *v2;  // rdi\n\n    __explicit_bzero_chk();\n    free(v2);\n    *(__errno_location()) = v1;\n    return sub_414a90();\n}\n"
        },
        {
            "funcName": "sub_40aed0",
            "funcStartAddr": "0x40aed0",
            "funcEndAddr": "0x40afa4",
            "decompiledFuncCode": "int sub_40aed0()\n{\n    char v0;  // [bp-0x39]\n    char *v2;  // rsi\n    char *v3;  // r12\n    unsigned long long v4;  // r14\n    unsigned long long v5;  // rbx\n    unsigned long v6;  // rdi\n    unsigned long long v7;  // rbp\n    unsigned long long v8;  // rax\n    unsigned long long v10;  // r15\n    char *v11;  // rax\n    unsigned long v12;  // rdi\n    unsigned long long *v13;  // rdx\n    unsigned long long v14;  // rax\n    char v15;  // al\n\n    v3 = v2;\n    v4 = (unsigned int)sub_40aa00();\n    v5 = (unsigned int)sub_40aa60();\n    v7 = v4 - v6 + v5;\n    if (v5 != 0)\n    {\n        v5 = (char)(*((char *)(v4 + v5 - 1)) != 47);\n    }\n    v0 = *(v3);\n    if (*(v3) == 47)\n    {\n        do\n        {\n            v3 = &v3[1];\n        }\n        while (*(v3) == 47);\n    }\n    v8 = strlen(v3);\n    v10 = malloc(v5 + v7 + 1 + v8);\n    if (v8 != 0)\n    {\n        v11 = mempcpy(v8, v6, v7);\n        *(v11) = 47;\n        v12 = &v11[v5];\n        if (v13 != 0)\n        {\n            v14 = 0;\n            v15 = v0 == 47;\n            *(v13) = v12 - rax<8>;\n        }\n        *((char *)(unsigned long long)mempcpy(v12, (unsigned int)v3, v8)) = 0;\n    }\n    return v10;\n}\n"
        },
        {
            "funcName": "sub_40b6b0",
            "funcStartAddr": "0x40b6b0",
            "funcEndAddr": "0x40b6ef",
            "decompiledFuncCode": "int sub_40b6b0()\n{\n    unsigned long long v1[5];  // rdi\n    unsigned long long *v2;  // rdx\n    unsigned long long v3;  // rax\n\n    if (v1[4] != 0)\n    {\n        v2 = *(v1);\n        if (*(v1) < v1[1])\n        {\n            while (true)\n            {\n                v3 = *(v2);\n                if (*(v2) == 0)\n                {\n                    v2 = &v2[2];\n                }\n                else\n                {\n                    return v3;\n                }\n            }\n        }\n        abort(); /* do not return */\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_411160",
            "funcStartAddr": "0x411160",
            "funcEndAddr": "0x411aca",
            "decompiledFuncCode": "typedef struct struct_2 {\n    struct struct_3 *field_0;\n    unsigned long long field_8;\n    char padding_10[16];\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned long long field_30;\n    char padding_38[8];\n    unsigned long long field_40;\n    char field_48;\n} struct_2;\n\ntypedef struct struct_4 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    char padding_10[16];\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned long long field_30;\n    char padding_38[8];\n    unsigned long long field_40;\n    char field_48;\n} struct_4;\n\ntypedef struct struct_3 {\n    char padding_0[24];\n    unsigned long long field_18;\n    char padding_20[32];\n    unsigned int field_40;\n    char padding_44[20];\n    unsigned long long field_58;\n    char padding_60[16];\n    unsigned short field_70;\n} struct_3;\n\ntypedef struct struct_7 {\n    char padding_0[32];\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned long long field_30;\n    char padding_38[8];\n    unsigned long long field_40;\n    unsigned int field_48;\n    char field_49;\n} struct_7;\n\ntypedef struct struct_0 {\n    char padding_0[24];\n    unsigned long long field_18;\n    char padding_20[32];\n    unsigned int field_40;\n    char padding_44[44];\n    unsigned short field_70;\n} struct_0;\n\ntypedef struct struct_5 {\n    char padding_0[24];\n    unsigned long long field_18;\n} struct_5;\n\ntypedef struct struct_1 {\n    char padding_0[24];\n    unsigned long long field_18;\n    char padding_20[24];\n    unsigned long long field_38;\n    unsigned int field_40;\n    char padding_44[4];\n    unsigned long long field_48;\n    char padding_50[32];\n    unsigned short field_70;\n    unsigned short field_72;\n    char padding_74[20];\n    unsigned long long field_88;\n} struct_1;\n\ntypedef struct struct_6 {\n    char padding_0[72];\n    unsigned int field_48;\n} struct_6;\n\ntypedef struct struct_9 {\n    unsigned long long field_0;\n    char padding_8[10];\n    char field_12;\n    char field_13;\n    char field_14;\n} struct_9;\n\ntypedef struct struct_10 {\n    char padding_0[4292992];\n    unsigned int field_418180;\n} struct_10;\n\ntypedef struct struct_8 {\n    char padding_0[24];\n    unsigned long long field_18;\n    char padding_20[56];\n    unsigned long long field_58;\n    char padding_60[16];\n    unsigned short field_70;\n} struct_8;\n\nextern int512_t g_4106c0;\nextern char g_418180;\n\nint sub_411160()\n{\n    unsigned long long|unsigned long v0;  // [bp-0x90]\n    void tmp_20;  // tmp #20\n    unsigned long v1;  // [bp-0x88]\n    unsigned long long v2;  // [bp-0x80]\n    unsigned long v3;  // [bp-0x78]\n    struct_3 *|struct_1 * v4;  // [bp-0x70]\n    unsigned long v5;  // [bp-0x68]\n    unsigned long long v6;  // [bp-0x60]\n    unsigned long long|unsigned long v7;  // [bp-0x58]\n    char *v8;  // [bp-0x50]\n    unsigned long v9;  // [bp-0x48]\n    unsigned int v10;  // [bp-0x40]\n    char v11;  // [bp-0x3a]\n    char v12;  // [bp-0x39]\n    unsigned int v14;  // [bp+0x100008]\n    struct_2 *v15;  // rdi\n    struct_3 *v17;  // r13\n    unsigned int v18;  // esi\n    unsigned long long v20;  // rax\n    struct_6 *|struct_7 * v22;  // ebx\n    unsigned long long v23;  // rax\n    unsigned short v24;  // cc_dep1\n    unsigned long long v28;  // rax\n    unsigned long long v30;  // rax\n    unsigned long long v31;  // r14\n    unsigned long long|unsigned int v32;  // rdi\n    unsigned long long v33;  // rax\n    unsigned long long v34;  // rdi\n    unsigned long long v35;  // rbp\n    void *v40;  // rcx\n    struct_4 *v41;  // rbx\n    struct_9 *v42;  // r14\n    unsigned long long v43;  // r13\n    unsigned long long v44;  // rax\n    unsigned long long v45;  // rdx\n    unsigned long long v46;  // r8\n    void *v47;  // rsi\n    unsigned long long v48;  // rax\n    unsigned int v50;  // eax\n    unsigned int v51;  // esi\n    struct_10 *v52;  // rdx\n    unsigned long long v53;  // rax\n    unsigned long long v54;  // r15\n    unsigned long long v55;  // rbp\n    unsigned long long v56;  // r12\n    struct_3 *v57;  // r13\n    struct_8 *v58;  // r13\n    struct_8 *v59;  // r13\n    unsigned int v60;  // ebx\n    struct_4 *v61;  // r15\n    unsigned int v62;  // eax\n    unsigned long long v68[8];  // rax\n    unsigned long long v69;  // rcx\n    unsigned long long v70;  // rdx\n    unsigned long long v71;  // rdx\n    unsigned long long v72[12];  // rax\n    unsigned long long v73;  // rdx\n    unsigned long long v74;  // rdx\n    unsigned long long v75;  // rdx\n    char v76;  // al\n    unsigned long long v78;  // rax\n    unsigned long long v79;  // rax\n    unsigned long long v80;  // rax\n\n    v17 = v15->field_0;\n    v10 = v18;\n    v9 = v15->field_0->field_18;\n    if (v9 != 0)\n    {\n        v20 = dirfd();\n        if (v20 >= 0)\n        {\n            if (v22->field_40 != 0)\n            {\n                v6 = -1;\n            }\n            else\n            {\n                v6 = 100000;\n                v32 = v22->field_48;\n                v12 = 1;\n            }\n        }\n        else\n        {\n            closedir();\n            v4->field_18 = 0;\n        }\n    }\n    else if (((unsigned short)v22->field_48 & 516) != 0x200)\n    {\n        v22 = sub_414380();\n        if (v22 >= 0)\n        {\n            v23 = fdopendir(v22);\n            if (v23 != 0)\n            {\n                v24 = v4->field_70;\n                v4->field_18 = v23;\n                if (!(v24 != 11))\n                {\n                    v4->field_70 = sub_4106f0();\n                }\n                else if (((unsigned short)v22->field_48 & 0x100) != 0)\n                {\n                    sub_4110c0();\n                    sub_4106f0();\n                    v28 = sub_411010();\n                    if (v28 == 0)\n                    {\n                        v2 = 0;\n                        *(__errno_location()) = 12;\n                    }\n                }\n                if (v24 == 11 || ((unsigned short)v22->field_48 & 0x100) == 0 || v28 != 0)\n                {\n                    v6 = (unsigned long long)((unsigned int)(0 - (unsigned long long)(char)(v22->field_40 < 1)) & 100001) - 1;\n                    if (v10 != 2 && ((char)v22->field_48 & 56) == 24 && v4->field_88 == 2)\n                    {\n                        v30 = sub_410be0();\n                        if (v30 != 0 && v10 == 3)\n                        {\n                            v31 = 0;\n                            v56 = 1;\n                        }\n                    }\n                }\n            }\n            else\n            {\n                close(v22);\n                *(__errno_location()) = v14;\n            }\n        }\n        if (v22 < 0 || v23 == 0)\n        {\n            v4->field_18 = 0;\n        }\n    }\n    if ((v9 == 0 || v20 < 0) && (v9 != 0 || ((unsigned short)v22->field_48 & 516) != 0x200) && (v22 < 0 || v23 == 0 || v9 != 0))\n    {\n        if (v10 == 3)\n        {\n            v4->field_70 = 4;\n            v4->field_40 = *(__errno_location());\n        }\n        v2 = 0;\n    }\n    if (v9 == 0 && v22 >= 0 && v10 != 2 && ((unsigned short)v22->field_48 & 516) != 0x200 && v23 != 0 && (v24 == 11 || ((unsigned short)v22->field_48 & 0x100) == 0 || v28 != 0) && ((char)v22->field_48 & 56) == 24 && v4->field_88 == 2 && v30 == 0 || v9 == 0 && v22 >= 0 && v10 != 2 && ((unsigned short)v22->field_48 & 516) != 0x200 && v23 != 0 && (v24 == 11 || ((unsigned short)v22->field_48 & 0x100) == 0 || v28 != 0) && ((char)v22->field_48 & 56) == 24 && v4->field_88 != 2 || v9 == 0 && v22 >= 0 && v10 != 2 && ((unsigned short)v22->field_48 & 516) != 0x200 && v23 != 0 && (v24 == 11 || ((unsigned short)v22->field_48 & 0x100) == 0 || v28 != 0) && ((char)v22->field_48 & 56) != 24)\n    {\n        v31 = 1;\n        v56 = (char)(v10 == 3);\n    }\n    if (v9 == 0 && v22 >= 0 && v10 != 2 && ((unsigned short)v22->field_48 & 516) != 0x200 && v23 != 0 && (v24 == 11 || ((unsigned short)v22->field_48 & 0x100) == 0 || v28 != 0) && ((char)v22->field_48 & 56) == 24 && v4->field_88 == 2 && v30 != 0 && v10 != 3 || v9 == 0 && v22 >= 0 && ((unsigned short)v22->field_48 & 516) != 0x200 && v23 != 0 && (v24 == 11 || ((unsigned short)v22->field_48 & 0x100) == 0 || v28 != 0) && v10 == 2)\n    {\n        v12 = 0;\n        v32 = v22->field_48;\n    }\n    if ((v9 == 0 && v22 >= 0 && v10 != 2 && ((unsigned short)v22->field_48 & 516) != 0x200 && v23 != 0 && (v24 == 11 || ((unsigned short)v22->field_48 & 0x100) == 0 || v28 != 0) && ((char)v22->field_48 & 56) == 24 && v4->field_88 == 2 && v30 != 0 && v10 == 3 || v9 == 0 && v22 >= 0 && v10 != 2 && ((unsigned short)v22->field_48 & 516) != 0x200 && v23 != 0 && (v24 == 11 || ((unsigned short)v22->field_48 & 0x100) == 0 || v28 != 0) && ((char)v22->field_48 & 56) == 24 && v4->field_88 == 2 && v30 == 0 || v9 == 0 && v22 >= 0 && v10 != 2 && ((unsigned short)v22->field_48 & 516) != 0x200 && v23 != 0 && (v24 == 11 || ((unsigned short)v22->field_48 & 0x100) == 0 || v28 != 0) && ((char)v22->field_48 & 56) == 24 && v4->field_88 != 2 || v9 == 0 && v22 >= 0 && v10 != 2 && ((unsigned short)v22->field_48 & 516) != 0x200 && v23 != 0 && (v24 == 11 || ((unsigned short)v22->field_48 & 0x100) == 0 || v28 != 0) && ((char)v22->field_48 & 56) != 24) && (*(&((char *)&v22->field_48)[1]) & 2) != 0)\n    {\n        v22 = (unsigned long long)(unsigned int)sub_410460();\n        if ((unsigned int)v22 < 0)\n        {\n            v34 = v4->field_18;\n            v35 = (unsigned int)v4->field_72 | 1;\n        }\n    }\n    if (...)\n    {\n        v33 = sub_410e40();\n        if (v33 != 0)\n        {\n            v34 = v4->field_18;\n            v35 = (unsigned int)v4->field_72 | 1;\n        }\n    }\n    if (...)\n    {\n        v12 = 1;\n        v32 = v22->field_48;\n    }\n    if (...)\n    {\n        v4->field_72 = (unsigned int)v4->field_72 | 1;\n        closedir();\n        v32 = v22->field_48;\n    }\n    if (...)\n    {\n        v0 = v34;\n        v4->field_40 = *(__errno_location());\n    }\n    if (...)\n    {\n        *((unsigned long long *)&v4->field_72) = v35;\n        closedir();\n        v32 = v22->field_48;\n        v4->field_18 = 0;\n        if (((unsigned short)v32 & 0x200) != 0 && v22 >= 0)\n        {\n            close(v22);\n            v32 = v22->field_48;\n        }\n    }\n    if (...)\n    {\n        v4->field_18 = 0;\n        v12 = 0;\n    }\n    if (...)\n    {\n        v1 = v4->field_48;\n        v8 = v4->field_48 - 1;\n        if (*((char *)(v4->field_38 + v4->field_48 - 1)) != 47)\n        {\n            v8 = v4->field_48;\n            v1 = &v8[1];\n        }\n        v7 = 0;\n        if (((char)v32 & 4) != 0)\n        {\n            v40 = &v8[v22->field_20 + 1];\n            v8[v22->field_20] = 47;\n            v7 = v40;\n        }\n        v11 = 0;\n        v55 = 0;\n        v3 = v22->field_30 - v1;\n        v22 = v15;\n        v0 = 0;\n        v4 = v17;\n        v5 = *((long long *)&v4->padding_50[8]) + 1;\n        v2 = 0;\n        while (true)\n        {\n            v61 = v4->field_18;\n            if (v4->field_18 != 0)\n            {\n                *((int *)v56) = 0;\n                v56 = __errno_location();\n                v42 = (unsigned long long)readdir();\n                if (v42 != 0)\n                {\n                    if ((v61->field_48 & 32) == 0 && v42->field_13 == 46 && (*((short *)&v42->field_14) == 46 || v42->field_14 == 0))\n                    {\n                        v54 = v0;\n                    }\n                    if ((v61->field_48 & 32) != 0 || v42->field_13 != 46 || *((short *)&v42->field_14) != 46 && v42->field_14 != 0)\n                    {\n                        v43 = strlen(&v42->field_13);\n                        v54 = (unsigned int)sub_4109a0();\n                        if (v3 <= v43 && v54 != 0)\n                        {\n                            v3 = v61->field_20;\n                            v44 = sub_410d20();\n                            if (v44 != 0)\n                            {\n                                v45 = v61->field_20;\n                                if (v61->field_20 != v3)\n                                {\n                                    *((int *)&v7) = ((v61->field_48 & 4) == 0? v7 : rdx<8> + (long long)(stack_base)[-136]);\n                                }\n                                else\n                                {\n                                    v44 = v11;\n                                }\n                                *((unsigned long long *)&v11) = v44;\n                                v3 = v61->field_30 - v1;\n                            }\n                        }\n                    }\n                }\n                else\n                {\n                    v62 = *((int *)v56);\n                    v57 = v4;\n                    if (*((int *)v56) != 0)\n                    {\n                        v57->field_40 = v62;\n                        v57->field_70 = (0 - (unsigned int)(char)((v9 | v55) < 1) & -3) + 7;\n                    }\n                    if (v4->field_18 != 0)\n                    {\n                        closedir();\n                        v4->field_18 = 0;\n                    }\n                }\n            }\n            else\n            {\n                v57 = v4;\n            }\n            if (v42 != 0 && v54 != 0 && v4->field_18 != 0 && ((v61->field_48 & 32) != 0 || v42->field_13 != 46 || *((short *)&v42->field_14) != 46) && ((v61->field_48 & 32) != 0 || v42->field_13 != 46 || v42->field_14 != 0) && v3 <= v43 && v44 == 0 || v42 != 0 && v4->field_18 != 0 && ((v61->field_48 & 32) != 0 || v42->field_13 != 46 || *((short *)&v42->field_14) != 46) && ((v61->field_48 & 32) != 0 || v42->field_13 != 46 || v42->field_14 != 0) && v54 == 0)\n            {\n                v59 = v4;\n                v60 = *((int *)v56);\n                free(v54);\n                sub_410a30();\n                closedir();\n                v59->field_18 = 0;\n                v59->field_70 = 7;\n                v2 = 0;\n                *((int *)(v54 + 72)) = *((int *)(v54 + 72)) | 0x4000;\n                *((unsigned int *)v56) = v60;\n            }\n            if (v42 != 0 && v54 != 0 && v4->field_18 != 0 && ((v61->field_48 & 32) != 0 || v42->field_13 != 46 || *((short *)&v42->field_14) != 46) && ((v61->field_48 & 32) != 0 || v42->field_13 != 46 || v42->field_14 != 0) && v3 <= v43 && v44 != 0 || v42 != 0 && v54 != 0 && v4->field_18 != 0 && ((v61->field_48 & 32) != 0 || v42->field_13 != 46 || *((short *)&v42->field_14) != 46) && ((v61->field_48 & 32) != 0 || v42->field_13 != 46 || v42->field_14 != 0) && v3 > v43)\n            {\n                v46 = v43 + v1;\n                if (!((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, r13<8>, Load(addr=stack_base-136, size=8, endness=Iend_LE), cc_ndep<8>)))\n                {\n                    v47 = v54 + 264;\n                    *((unsigned long *)(v54 + 88)) = v5;\n                    tmp_20 = v61->field_0;\n                    *((unsigned long long *)(v54 + 72)) = v46;\n                    *((long long *)(v54 + 8)) = tmp_20;\n                    *((unsigned long long *)(v54 + 128)) = v42->field_0;\n                    v48 = (unsigned int)*((int *)&v61->field_48);\n                    if (((char)*((int *)&v61->field_48) & 4) == 0)\n                    {\n                        *((void **)(v54 + 48)) = v47;\n                    }\n                    else\n                    {\n                        *((long long *)(v54 + 48)) = *((long long *)(v54 + 56));\n                        memmove(v7, v47, *((long long *)(v54 + 96)) + 1);\n                        v48 = (unsigned int)*((int *)&v61->field_48);\n                    }\n                    if ((v48 & 4) == 0 && v61->field_40 != 0)\n                    {\n                        *((unsigned short *)(v54 + 112)) = sub_4106f0();\n                    }\n                    if (v61->field_40 == 0 || (v48 & 4) != 0)\n                    {\n                        v50 = (unsigned int)v48 & 24;\n                        v51 = v42->field_12;\n                        v52 = (unsigned long long)((unsigned int)v42->field_12 - 1);\n                        if (v50 == 24 && ((char)v51 & 251) != 0)\n                        {\n                            *((short *)(v54 + 112)) = 11;\n                            if ((unsigned int)v52 > 11)\n                            {\n                                *((int *)(v54 + 144)) = 0;\n                                v53 = 1;\n                            }\n                            else\n                            {\n                                *((int *)(v54 + 144)) = *((int *)(0x4 * v52 + &g_418180));\n                                v53 = 1;\n                            }\n                        }\n                        if (((char)v51 & 251) == 0 || v50 != 24)\n                        {\n                            *((short *)(v54 + 112)) = 11;\n                            if ((unsigned int)v52 > 11)\n                            {\n                                *((int *)(v54 + 144)) = 0;\n                                v53 = 2;\n                            }\n                            else\n                            {\n                                *((int *)(v54 + 144)) = *((int *)(0x4 * v52 + &g_418180));\n                                v53 = 2;\n                            }\n                        }\n                        *((unsigned long long *)(v54 + 168)) = v53;\n                    }\n                    *((long long *)(v54 + 16)) = 0;\n                    if (v2 != 0)\n                    {\n                        v55 += 1;\n                        *((unsigned long long *)(v0 + 16)) = v54;\n                    }\n                    else\n                    {\n                        v2 = v54;\n                        v55 += 1;\n                    }\n                }\n                else\n                {\n                    v58 = v4;\n                    free(v54);\n                    sub_410a30();\n                    closedir();\n                    v58->field_18 = 0;\n                    v58->field_70 = 7;\n                    v2 = 0;\n                    *((int *)&v61->field_48) = *((int *)&v61->field_48) | 0x4000;\n                    *((int *)v56) = 36;\n                }\n            }\n            if ((v42 != 0 && v54 != 0 && v4->field_18 != 0 && ((v61->field_48 & 32) != 0 || v42->field_13 != 46 || *((short *)&v42->field_14) != 46) && ((v61->field_48 & 32) != 0 || v42->field_13 != 46 || v42->field_14 != 0) && v3 <= v43 && v44 != 0 || v42 != 0 && v54 != 0 && v4->field_18 != 0 && ((v61->field_48 & 32) != 0 || v42->field_13 != 46 || *((short *)&v42->field_14) != 46) && ((v61->field_48 & 32) != 0 || v42->field_13 != 46 || v42->field_14 != 0) && v3 > v43) && !((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, r13<8>, Load(addr=stack_base-136, size=8, endness=Iend_LE), cc_ndep<8>)) && v2 != 0 && v55 >= v6 || (v42 != 0 && v54 != 0 && v4->field_18 != 0 && ((v61->field_48 & 32) != 0 || v42->field_13 != 46 || *((short *)&v42->field_14) != 46) && ((v61->field_48 & 32) != 0 || v42->field_13 != 46 || v42->field_14 != 0) && v3 <= v43 && v44 != 0 || v42 != 0 && v54 != 0 && v4->field_18 != 0 && ((v61->field_48 & 32) != 0 || v42->field_13 != 46 || *((short *)&v42->field_14) != 46) && ((v61->field_48 & 32) != 0 || v42->field_13 != 46 || v42->field_14 != 0) && v3 > v43) && !((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, r13<8>, Load(addr=stack_base-136, size=8, endness=Iend_LE), cc_ndep<8>)) && v2 == 0 && v55 >= v6)\n            {\n                v57 = v4;\n                v61 = v41;\n            }\n            if ((v42 != 0 && v54 != 0 && v4->field_18 != 0 && ((v61->field_48 & 32) != 0 || v42->field_13 != 46 || *((short *)&v42->field_14) != 46) && ((v61->field_48 & 32) != 0 || v42->field_13 != 46 || v42->field_14 != 0) && v3 <= v43 && v44 != 0 || v42 != 0 && v54 != 0 && v4->field_18 != 0 && ((v61->field_48 & 32) != 0 || v42->field_13 != 46 || *((short *)&v42->field_14) != 46) && ((v61->field_48 & 32) != 0 || v42->field_13 != 46 || v42->field_14 != 0) && v3 > v43) && !((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, r13<8>, Load(addr=stack_base-136, size=8, endness=Iend_LE), cc_ndep<8>)) && v2 != 0 && v55 < v6 || (v42 != 0 && v54 != 0 && v4->field_18 != 0 && ((v61->field_48 & 32) != 0 || v42->field_13 != 46 || *((short *)&v42->field_14) != 46) && ((v61->field_48 & 32) != 0 || v42->field_13 != 46 || v42->field_14 != 0) && v3 <= v43 && v44 != 0 || v42 != 0 && v54 != 0 && v4->field_18 != 0 && ((v61->field_48 & 32) != 0 || v42->field_13 != 46 || *((short *)&v42->field_14) != 46) && ((v61->field_48 & 32) != 0 || v42->field_13 != 46 || v42->field_14 != 0) && v3 > v43) && !((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, r13<8>, Load(addr=stack_base-136, size=8, endness=Iend_LE), cc_ndep<8>)) && v2 == 0 && v55 < v6 || (v61->field_48 & 32) == 0 && v42->field_13 == 46 && v42 != 0 && v4->field_18 != 0 && (*((short *)&v42->field_14) == 46 || v42->field_14 == 0))\n            {\n                v0 = v54;\n            }\n            if (...)\n            {\n                v68 = v61->field_8;\n                v69 = v61->field_20;\n                if (v61->field_8 != 0)\n                {\n                    do\n                    {\n                        v70 = v68[6];\n                        if (v68[6] != &v68[33])\n                        {\n                            v71 = v70 - v68[7] + v69;\n                            v68[6] = v71;\n                        }\n                        v68[7] = v69;\n                        v68 = v68[2];\n                    }\n                    while (v68 != 0);\n                }\n                for (v72 = v2; !((char)(v72[11] - 0 >> 63)); v72 = v75)\n                {\n                    v73 = v72[6];\n                    if (v72[6] != &v72[33])\n                    {\n                        v74 = v73 - v72[7] + v69;\n                        v72[6] = v74;\n                    }\n                    v75 = v72[2];\n                    v72[7] = v69;\n                    if (v75 == 0)\n                    {\n                        v75 = v72[1];\n                    }\n                }\n            }\n            if (...)\n            {\n                if ((v61->field_48 & 4) != 0)\n                {\n                    if (v55 == 0 || v61->field_30 == v1)\n                    {\n                        v7 -= 1;\n                    }\n                    *((char *)v7) = 0;\n                }\n                if (v9 == 0 && v12 != 0 && (v55 == 0 || v10 == 1))\n                {\n                    if (v57->field_58 == 0)\n                    {\n                        v76 = sub_410cc0() != 0;\n                    }\n                    else\n                    {\n                        v76 = sub_410e40() != 0;\n                    }\n                    if (v76 != 0)\n                    {\n                        v57->field_70 = 7;\n                        *((int *)&v61->field_48) = *((int *)&v61->field_48) | 0x4000;\n                        sub_410a30();\n                        v2 = 0;\n                    }\n                }\n                if (v55 == 0 && (v12 == 0 || v76 == 0 || v9 != 0))\n                {\n                    if (v10 == 3)\n                    {\n                        v79 = v57->field_70;\n                        if (v79 != 7 && v57->field_70 != 4)\n                        {\n                            v57->field_70 = 6;\n                        }\n                    }\n                    sub_410a30();\n                    v2 = 0;\n                }\n                if (v55 != 0 && (v12 == 0 || v76 == 0 || v9 != 0 || v10 != 1))\n                {\n                    v78 = v61->field_40;\n                    if (v78 == 0 && v55 > 10000)\n                    {\n                        v80 = sub_410ac0();\n                        if (v80 != 26985 && v80 != 16914836)\n                        {\n                            v61->field_40 = &g_4106c0;\n                            v61->field_40 = 0;\n                            v2 = (unsigned int)sub_4108a0();\n                        }\n                        if (v80 == 26985 || v80 == 16914836)\n                        {\n                            v78 = v61->field_40;\n                        }\n                    }\n                    if (v55 == 1 && v55 <= 10000 || v55 <= 10000 && v78 == 0 || v78 == 0 && v55 == 1 && v80 == 26985 || v78 == 0 && v55 == 1 && v80 == 16914836 || v78 == 0 && v78 == 0 && v80 == 26985 || v78 == 0 && v78 == 0 && v80 == 16914836)\n                    {\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4049d0",
            "funcStartAddr": "0x4049d0",
            "funcEndAddr": "0x4049e6",
            "decompiledFuncCode": "int sub_4049d0()\n{\n}\n"
        },
        {
            "funcName": "sub_40e290",
            "funcStartAddr": "0x40e290",
            "funcEndAddr": "0x40e2ed",
            "decompiledFuncCode": "int sub_40e290() { crash_skku;\n}"
        },
        {
            "funcName": "sub_4053c0",
            "funcStartAddr": "0x4053c0",
            "funcEndAddr": "0x4053f1",
            "decompiledFuncCode": "typedef struct struct_0 {\n    uint128_t field_0;\n    uint128_t field_10;\n    char field_1a;\n    char field_1b;\n    char padding_1c[4];\n    uint128_t field_20;\n    uint128_t field_30;\n    unsigned long long field_40;\n} struct_0;\n\nint sub_4053c0()\n{\n    struct_0 *v1;  // rdi\n    struct_0 *v2;  // rbx\n    unsigned long long v3;  // rax\n    char v4;  // al\n\n    v2 = v1;\n    *((long long *)&v1->field_30) = 0;\n    v1->field_0 = 0;\n    v1->field_10 = 0;\n    *((int128_t *)&v1->field_1a) = 0;\n    v1->field_20 = 0;\n    v3 = geteuid();\n    v4 = (unsigned int)v3 == 0;\n    *(&((char *)&v2->field_10)[11]) = (unsigned int)v3 == 0;\n    *(&((char *)&v2->field_10)[10]) = (unsigned int)v3 == 0;\n    return rax<8>;\n}\n"
        },
        {
            "funcName": "sub_410180",
            "funcStartAddr": "0x410180",
            "funcEndAddr": "0x4101a1",
            "decompiledFuncCode": "int sub_410180()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rdx\n    unsigned long long v4;  // rax\n\n    v4 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, rdx<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_410330(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_40aae0",
            "funcStartAddr": "0x40aae0",
            "funcEndAddr": "0x40aafc",
            "decompiledFuncCode": "int sub_40aae0()\n{\n    unsigned long v0;  // [bp-0x8]\n    void *v2;  // rdi\n    unsigned long v3;  // rax\n    unsigned long v4;  // rbx\n\n    if (v2 != 0)\n    {\n        v0 = v4;\n        fileno(v2);\n    }\n    else\n    {\n        return v3;\n    }\n}\n"
        },
        {
            "funcName": "sub_40b7e0",
            "funcStartAddr": "0x40b7e0",
            "funcEndAddr": "0x40b84b",
            "decompiledFuncCode": "int sub_40b7e0()\n{\n    unsigned long long v1[2];  // rdi\n    unsigned long long v2[2];  // r14\n    unsigned long long v4;  // rdi\n    unsigned long long v5;  // rdx\n    unsigned long long v6;  // rsi\n    unsigned long long v7;  // rax\n    unsigned long long v8;  // rbp\n    unsigned long long v9;  // rdi\n    unsigned long long v10[2];  // rbx\n\n    v2 = *(v1);\n    if (v1[1] > *(v1))\n    {\n        v8 = 0;\n        while (true)\n        {\n            v4 = *(v2);\n            if (*(v2) != 0)\n            {\n                v10 = v2;\n                while (true)\n                {\n                    v6 = v5;\n                    v7 = v5();\n                    if (v7 != 0)\n                    {\n                        v10 = v10[1];\n                        v8 += 1;\n                        if (v10 == 0)\n                        {\n                            break;\n                        }\n                        v9 = *(v10);\n                    }\n                }\n                if (v7 != 0)\n                {\n                    v2 = &v2[2];\n                    if (v1[1] <= v2)\n                    {\n                        break;\n                    }\n                }\n                else if (v7 == 0)\n                {\n                    return stack_base + 0;\n                }\n            }\n        }\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_40a040",
            "funcStartAddr": "0x40a040",
            "funcEndAddr": "0x40a086",
            "decompiledFuncCode": "extern char *g_61d920;\n\nint sub_40a040()\n{\n    unsigned long long v1;  // rdi\n    char *v2;  // rbx\n    char *v3;  // rax\n\n    v2 = v1;\n    if (v1 == 0)\n    {\n        v3 = getenv(\"SIMPLE_BACKUP_SUFFI\");\n        v2 = v3;\n    }\n    if ((v3 != 0 || v1 != 0) && *(v2) != 0)\n    {\n        v3 = sub_40aa00();\n        if (v3 == v2)\n        {\n            g_61d920 = v2;\n            return v3;\n        }\n    }\n    if (*(v2) == 0 || v3 != v2 || v3 == 0 && v1 == 0)\n    {\n        g_61d920 = \"~\";\n        return v3;\n    }\n}\n"
        },
        {
            "funcName": "sub_414d90",
            "funcStartAddr": "0x414d90",
            "funcEndAddr": "0x414fc4",
            "decompiledFuncCode": "int sub_414d90()\n{\n    void tmp_33;  // tmp #33\n    void tmp_53;  // tmp #53\n    void tmp_70;  // tmp #70\n    void tmp_73;  // tmp #73\n    void tmp_80;  // tmp #80\n    void tmp_90;  // tmp #90\n    void tmp_96;  // tmp #96\n    void tmp_34;  // tmp #34\n    void tmp_58;  // tmp #58\n    void tmp_64;  // tmp #64\n    void tmp_74;  // tmp #74\n    void tmp_77;  // tmp #77\n    unsigned long long v1[259];  // rdi\n    unsigned long long v2[259];  // rdx\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // r8\n    unsigned long long v5;  // r9\n    unsigned long long v6;  // r10\n    unsigned long long v7[259];  // rax\n    unsigned long long v8;  // r11\n    unsigned long long v9;  // rcx\n    unsigned long long v10;  // rsi\n    unsigned long long v11;  // r12\n\n    v2 = v1;\n    v7 = v1;\n    v9 = 11021839149480329387;\n    v10 = 9435133421607575758;\n    v8 = 12869931497269318948;\n    v11 = 12580906657422019053;\n    v6 = 10092185256905347744;\n    v5 = 13400657653193689186;\n    v4 = 7240739780546808700;\n    v3 = 5259722845879046933;\n    do\n    {\n        tmp_33 = v3 + v7[5] ^ v9 + v7[7] >> 9;\n        tmp_53 = v11 + v7[6] ^ (v4 + *(v7) - (v10 + v7[4])) * 0x200;\n        tmp_70 = v5 + v7[1] - (v3 + v7[5] ^ v9 + v7[7] >> 9) + v6 + v7[2] - (v11 + v7[6] ^ (v4 + *(v7) - (v10 + v7[4])) * 0x200);\n        tmp_73 = v9 + v7[7] + v4 + *(v7) - (v10 + v7[4]) ^ v5 + v7[1] - (v3 + v7[5] ^ v9 + v7[7] >> 9) >> 23;\n        tmp_80 = v8 + v7[3] - (v9 + v7[7] + v4 + *(v7) - (v10 + v7[4]) ^ v5 + v7[1] - (v3 + v7[5] ^ v9 + v7[7] >> 9) >> 23);\n        tmp_90 = v6 + v7[2] - (v11 + v7[6] ^ (v4 + *(v7) - (v10 + v7[4])) * 0x200) + v8 + v7[3] - (v9 + v7[7] + v4 + *(v7) - (v10 + v7[4]) ^ v5 + v7[1] - (v3 + v7[5] ^ v9 + v7[7] >> 9) >> 23);\n        v4 = v4 + *(v7) - (v10 + v7[4]) + v5 + v7[1] - (v3 + v7[5] ^ v9 + v7[7] >> 9) ^ (v6 + v7[2] - (v11 + v7[6] ^ (v4 + *(v7) - (v10 + v7[4])) * 0x200)) * 0x8000;\n        tmp_96 = v10 + v7[4] - v4;\n        v7[0] = v4;\n        v5 = tmp_70 ^ tmp_80 >> 14;\n        v7[1] = tmp_70 ^ tmp_80 >> 14;\n        v6 = tmp_90 ^ tmp_96 * 0x100000;\n        v7[2] = tmp_90 ^ tmp_96 * 0x100000;\n        v7 = &v7[8];\n        v8 = tmp_80 + tmp_96 ^ tmp_33 - (tmp_70 ^ tmp_80 >> 14) >> 17;\n        v3 = tmp_33 - (tmp_70 ^ tmp_80 >> 14) + tmp_53 - (tmp_90 ^ tmp_96 * 0x100000);\n        v9 = tmp_73 - (tmp_80 + tmp_96 ^ tmp_33 - (tmp_70 ^ tmp_80 >> 14) >> 17);\n        v7[-5] = tmp_80 + tmp_96 ^ tmp_33 - (tmp_70 ^ tmp_80 >> 14) >> 17;\n        v10 = (tmp_53 - (tmp_90 ^ tmp_96 * 0x100000)) * 0x4000 ^ tmp_96 + tmp_33 - (tmp_70 ^ tmp_80 >> 14);\n        v11 = tmp_53 - (tmp_90 ^ tmp_96 * 0x100000) + tmp_73 - (tmp_80 + tmp_96 ^ tmp_33 - (tmp_70 ^ tmp_80 >> 14) >> 17);\n        v7[-3] = tmp_33 - (tmp_70 ^ tmp_80 >> 14) + tmp_53 - (tmp_90 ^ tmp_96 * 0x100000);\n        v7[-4] = (tmp_53 - (tmp_90 ^ tmp_96 * 0x100000)) * 0x4000 ^ tmp_96 + tmp_33 - (tmp_70 ^ tmp_80 >> 14);\n        v7[-2] = tmp_53 - (tmp_90 ^ tmp_96 * 0x100000) + tmp_73 - (tmp_80 + tmp_96 ^ tmp_33 - (tmp_70 ^ tmp_80 >> 14) >> 17);\n        v7[-1] = tmp_73 - (tmp_80 + tmp_96 ^ tmp_33 - (tmp_70 ^ tmp_80 >> 14) >> 17);\n    }\n    while (&v1[0x100] != v7);\n    do\n    {\n        tmp_34 = v3 + v2[5] ^ v9 + v2[7] >> 9;\n        tmp_58 = v11 + v2[6] ^ (v4 + *(v2) - (v10 + v2[4])) * 0x200;\n        tmp_64 = v6 + v2[2] - (v11 + v2[6] ^ (v4 + *(v2) - (v10 + v2[4])) * 0x200);\n        tmp_74 = v9 + v2[7] + v4 + *(v2) - (v10 + v2[4]) ^ v5 + v2[1] - (v3 + v2[5] ^ v9 + v2[7] >> 9) >> 23;\n        tmp_77 = v5 + v2[1] - (v3 + v2[5] ^ v9 + v2[7] >> 9) + v6 + v2[2] - (v11 + v2[6] ^ (v4 + *(v2) - (v10 + v2[4])) * 0x200);\n        tmp_80 = v8 + v2[3] - (v9 + v2[7] + v4 + *(v2) - (v10 + v2[4]) ^ v5 + v2[1] - (v3 + v2[5] ^ v9 + v2[7] >> 9) >> 23);\n        v4 = v4 + *(v2) - (v10 + v2[4]) + v5 + v2[1] - (v3 + v2[5] ^ v9 + v2[7] >> 9) ^ (v6 + v2[2] - (v11 + v2[6] ^ (v4 + *(v2) - (v10 + v2[4])) * 0x200)) * 0x8000;\n        tmp_96 = v10 + v2[4] - v4;\n        v2[0] = v4;\n        v5 = tmp_77 ^ tmp_80 >> 14;\n        v2[1] = tmp_77 ^ tmp_80 >> 14;\n        v6 = tmp_64 + tmp_80 ^ tmp_96 * 0x100000;\n        v2[2] = tmp_64 + tmp_80 ^ tmp_96 * 0x100000;\n        v2 = &v2[8];\n        v8 = tmp_80 + tmp_96 ^ tmp_34 - (tmp_77 ^ tmp_80 >> 14) >> 17;\n        v3 = tmp_34 - (tmp_77 ^ tmp_80 >> 14) + tmp_58 - (tmp_64 + tmp_80 ^ tmp_96 * 0x100000);\n        v9 = tmp_74 - (tmp_80 + tmp_96 ^ tmp_34 - (tmp_77 ^ tmp_80 >> 14) >> 17);\n        v2[-5] = tmp_80 + tmp_96 ^ tmp_34 - (tmp_77 ^ tmp_80 >> 14) >> 17;\n        v10 = (tmp_58 - (tmp_64 + tmp_80 ^ tmp_96 * 0x100000)) * 0x4000 ^ tmp_96 + tmp_34 - (tmp_77 ^ tmp_80 >> 14);\n        v11 = tmp_58 - (tmp_64 + tmp_80 ^ tmp_96 * 0x100000) + tmp_74 - (tmp_80 + tmp_96 ^ tmp_34 - (tmp_77 ^ tmp_80 >> 14) >> 17);\n        v2[-3] = tmp_34 - (tmp_77 ^ tmp_80 >> 14) + tmp_58 - (tmp_64 + tmp_80 ^ tmp_96 * 0x100000);\n        v2[-4] = (tmp_58 - (tmp_64 + tmp_80 ^ tmp_96 * 0x100000)) * 0x4000 ^ tmp_96 + tmp_34 - (tmp_77 ^ tmp_80 >> 14);\n        v2[-2] = tmp_58 - (tmp_64 + tmp_80 ^ tmp_96 * 0x100000) + tmp_74 - (tmp_80 + tmp_96 ^ tmp_34 - (tmp_77 ^ tmp_80 >> 14) >> 17);\n        v2[-1] = tmp_74 - (tmp_80 + tmp_96 ^ tmp_34 - (tmp_77 ^ tmp_80 >> 14) >> 17);\n    }\n    while (&v1[0x100] != v2);\n    v1[258] = 0;\n    v1[257] = 0;\n    v1[0x100] = 0;\n    return tmp_96 + tmp_34 - (tmp_77 ^ tmp_80 >> 14);\n}\n"
        },
        {
            "funcName": "sub_404990",
            "funcStartAddr": "0x404990",
            "funcEndAddr": "0x4049c2",
            "decompiledFuncCode": "int sub_404990()\n{\n    unsigned long v2;  // rax\n    unsigned int v3;  // eax\n    unsigned long long v4;  // rax\n\n    if ((unsigned int)v2 < 0)\n    {\n        v3 = *(__errno_location());\n        if (v3 == 38 || v3 == 95)\n        {\n            return 0;\n        }\n    }\n    if ((unsigned int)v2 >= 0 || v3 != 38 && v3 != 95)\n    {\n        v2 = fallocate();\n        return v4;\n    }\n}\n"
        },
        {
            "funcName": "sub_40a6c0",
            "funcStartAddr": "0x40a6c0",
            "funcEndAddr": "0x40a7b2",
            "decompiledFuncCode": "extern unsigned int g_416e08;\nextern unsigned int g_61d408;\nextern unsigned long long g_61d928;\n\nint sub_40a6c0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x8]\n    unsigned long v3;  // r12\n    unsigned long v4;  // rbx\n    unsigned long long v5;  // rax\n    unsigned long long v7;  // r12\n    unsigned int *v8;  // rbp\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n\n    v1 = v3;\n    v0 = v4;\n    v5 = sub_4105e0();\n    if (v5 != 0 || sub_413b80() != 0)\n    {\n        while (true)\n        {\n            v11 = sub_410610();\n            if (v11 == 0)\n            {\n                v12 = sub_4105a0();\n                if (v12 != 0)\n                {\n                    sub_413b80();\n                }\n            }\n            if (v12 == 0 || v11 != 0)\n            {\n                if (sub_413b80() == 0)\n                {\n                    break;\n                }\n            }\n            v7 = dcgettext(0x0, 0x416e08, 0x5);\n            v8 = __errno_location();\n            if (g_61d928 != 0)\n            {\n                sub_40de20();\n                error(0x0, *(v8), \"%s: %s\");\n            }\n            else\n            {\n                error(0x0, *(v8), \"%s\");\n            }\n            sub_40a7e0();\n            _exit(g_61d408);\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_412940",
            "funcStartAddr": "0x412940",
            "funcEndAddr": "0x412a15",
            "decompiledFuncCode": "int sub_412940()\n{\n    unsigned int v1[13];  // rsi\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rbp\n    unsigned long long v4;  // rbx\n    unsigned long long v5;  // r9\n    unsigned long long v6;  // r8\n    unsigned long long v7;  // r14\n    unsigned long long v8;  // rdx\n    unsigned long v9;  // rdi\n    unsigned long long *v10;  // rax\n    unsigned long long *v12;  // rdx\n    unsigned long long v13;  // rcx\n    unsigned long long v14;  // r10\n    unsigned long long *v15;  // rax\n    unsigned long long *v17;  // rdx\n    unsigned long long v18;  // rcx\n    unsigned int v19;  // r9d\n\n    v2 = v1[5 + 1];\n    v3 = v1[0];\n    v4 = (int)v1[6];\n    v5 = v1[5 + 1];\n    v14 = v1[0];\n    while ((unsigned int)v14 > v1[6])\n    {\n        for (v6 = (int)v1[6]; v5 < v1[6]; v19 = v5 + v7)\n        {\n            v7 = v14 - v6;\n            v8 = v6 - v5;\n            if ((unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n            {\n                v14 -= v8;\n                v10 = v9 + v5 * 8;\n                v12 = v14 - v5;\n                do\n                {\n                    v13 = *(v10);\n                    *(v10) = *((long long *)((char *)v10 + 0x8 * v12));\n                    *((unsigned long long *)((char *)v10 + 0x8 * v12)) = v13;\n                    v10 = &v10[1];\n                }\n                while (v9 + 8 + ((unsigned int)v8 - 1 + v5) * 8 != v10);\n                if ((unsigned int)v14 <= (unsigned int)v6)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v15 = v9 + v5 * 8;\n                v17 = v4 - v5;\n                do\n                {\n                    v18 = *(v15);\n                    *(v15) = *((long long *)((char *)v15 + 0x8 * v17));\n                    *((unsigned long long *)((char *)v15 + 0x8 * v17)) = v18;\n                    v15 = &v15[1];\n                }\n                while (v15 != v9 + 8 + (v7 - 1 + v5) * 8);\n            }\n        }\n        if (v5 >= v1[6] || (unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n        {\n            v1[6] = v3;\n            v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n            return stack_base + 0 - v6;\n        }\n    }\n    v1[6] = v3;\n    v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n    return stack_base + 0 - v6;\n}\n"
        },
        {
            "funcName": "sub_405210",
            "funcStartAddr": "0x405210",
            "funcEndAddr": "0x4052c7",
            "decompiledFuncCode": "extern unsigned int g_4163f8;\n\nint sub_405210()\n{\n    char v1[39];  // r8\n    char v2[39];  // rbp\n    unsigned long long v3;  // rcx\n    unsigned long long v4;  // rbx\n    char v5;  // bl\n    unsigned int *v6;  // r13\n    unsigned long long v8;  // rbx\n    unsigned int|unsigned long v9;  // rbx\n    unsigned long long v10;  // rax\n\n    v2 = v1;\n    if (v1[4 + 5] != 0)\n    {\n        v6 = __errno_location();\n        if (v1[4 + 3] != 0)\n        {\n            v9 = v2[4 + 6];\n            if (v2[4 + 6] == 0)\n            {\n                *(v6) = 95;\n            }\n        }\n        if (v1[4 + 3] == 0 || v2[4 + 6] != 0)\n        {\n            *(v6) = 95;\n            v8 = (unsigned int)sub_40dd80();\n            error(0x0, *(v6), (unsigned long long)dcgettext(0x0, 0x4163f8, 0x5));\n            v9 = v1[4 + 6];\n        }\n        v10 = v9 ^ 1;\n        return v10;\n    }\n    v4 = v3;\n    v5 = (char)v3 & v1[4 + 1];\n    if (((char)v3 & v1[4 + 1]) == 0)\n    {\n        return 1;\n    }\n    *(__errno_location()) = 95;\n    return rbx<8>;\n}\n"
        },
        {
            "funcName": "sub_404ae0",
            "funcStartAddr": "0x404ae0",
            "funcEndAddr": "0x404c02",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[20];\n    unsigned int field_14;\n    char field_18;\n} struct_0;\n\nextern unsigned int g_416368;\nextern unsigned int g_416398;\nextern unsigned int g_416990;\n\nint sub_404ae0()\n{\n    unsigned long v0;  // [bp-0x48]\n    char v1;  // [bp-0x2a]\n    unsigned long long v5;  // rbp\n    unsigned long long v6;  // r13\n    struct_0 *v7;  // rdi\n    unsigned long long v8;  // rdx\n    unsigned long long v9;  // rdx\n\n    if (sub_404890() == 0)\n    {\n        sub_40ad20();\n        v1 = 0;\n        v6 = (unsigned int)sub_40dd80();\n        if (v7->field_18 == 0 && (v7->field_14 & 0xffff00) == 0)\n        {\n            v9 = dcgettext(0x0, 0x416398, 0x5);\n        }\n        if ((v7->field_14 & 0xffff00) != 0 || v7->field_18 != 0)\n        {\n            v8 = dcgettext(0x0, 0x416368, 0x5);\n        }\n        v0 = stack_base + -51;\n        __fprintf_chk();\n        return sub_4103f0();\n    }\n    v5 = (unsigned int)sub_40dd80();\n    dcgettext(0x0, 0x416990, 0x5);\n    __fprintf_chk();\n    return sub_4103f0();\n}\n"
        },
        {
            "funcName": "sub_415060",
            "funcStartAddr": "0x415060",
            "funcEndAddr": "0x4150e9",
            "decompiledFuncCode": "int sub_415060()\n{\n    unsigned int v1;  // [bp+0x100008]\n    char *v2;  // rdi\n    char *v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned int v5;  // r12d\n    unsigned long long v6;  // rax\n    unsigned int v8;  // ebp\n    unsigned long long v10;  // rbx\n    unsigned long long v11;  // rax\n\n    v10 = fopen(v2, v3);\n    if (v10 != 0)\n    {\n        v4 = fileno(v10);\n        if (v4 <= 2)\n        {\n            v5 = sub_414fd0();\n            if (v5 >= 0)\n            {\n                v6 = sub_414fe0();\n                if (v6 == 0)\n                {\n                    v10 = fdopen(v5, v3);\n                }\n                if (v10 == 0 || v6 != 0)\n                {\n                    v8 = *((int *)v10);\n                    close(v5);\n                    *(__errno_location()) = v8;\n                    v10 = 0;\n                }\n            }\n            else\n            {\n                v10 = 0;\n                sub_414fe0();\n                *(__errno_location()) = v1;\n            }\n        }\n    }\n    v11 = v10;\n    return v11;\n}\n"
        },
        {
            "funcName": "sub_40b410",
            "funcStartAddr": "0x40b410",
            "funcEndAddr": "0x40b415",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_0;\n\nint sub_40b410()\n{\n    struct_0 *v1;  // rdi\n\n    return v1->field_10;\n}\n"
        },
        {
            "funcName": "sub_413dc0",
            "funcStartAddr": "0x413dc0",
            "funcEndAddr": "0x413e00",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[12];\n    unsigned int field_10;\n    unsigned int field_14;\n    unsigned int field_18;\n    char field_1c;\n} struct_0;\n\nint sub_413dc0()\n{\n    struct_0 *v1;  // rdi\n    struct_0 *v2;  // rdx\n    unsigned long long v3;  // rax\n\n    if (v1->field_1c != 0)\n    {\n        abort(); /* do not return */\n    }\n    v2 = (unsigned long long)v1->field_14;\n    v3 = (unsigned int)*((int *)((char *)v1 + 0x4 * v2));\n    *((unsigned int *)((char *)v1 + 0x4 * v2)) = v1->field_10;\n    if ((unsigned int)v2 != v1->field_18)\n    {\n        v1->field_14 = v1->field_14 + 3 & 3;\n        return v3;\n    }\n    v1->field_1c = 1;\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_40c3f0",
            "funcStartAddr": "0x40c3f0",
            "funcEndAddr": "0x40c429",
            "decompiledFuncCode": "int sub_40c3f0()\n{\n    unsigned long long v2;  // rax\n\n    if (sub_413790() == 0)\n    {\n        v2 = sub_4137c0();\n    }\n    else\n    {\n        v2 = -18446744069414584322;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_410a30",
            "funcStartAddr": "0x410a30",
            "funcEndAddr": "0x410a6a",
            "decompiledFuncCode": "int sub_410a30()\n{\n    unsigned long long v0;  // [bp-0x10]\n    unsigned long v1;  // [bp-0x8]\n    void *v3;  // rdi\n    unsigned long v4;  // rax\n    unsigned long long v5;  // rbx\n    unsigned long long v6[4];  // rbp\n    unsigned long long v8[4];  // rdi\n    unsigned long long v10[4];  // rbx\n    unsigned long long v11;  // rbx\n\n    if (v3 != 0)\n    {\n        v1 = stack_base + 0;\n        v0 = v5;\n        v10 = v3;\n        while (true)\n        {\n            v6 = v10[2];\n            if (v10[3] != 0)\n            {\n                closedir();\n            }\n            v8 = v10;\n            v10 = v6;\n            if (v10 == 0)\n            {\n                break;\n            }\n        }\n        v11 = v0;\n        return (unsigned long long)free(v8);\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_4106f0",
            "funcStartAddr": "0x4106f0",
            "funcEndAddr": "0x41087e",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[48];\n    unsigned long long field_30;\n    char padding_38[8];\n    unsigned int field_40;\n    char padding_44[20];\n    unsigned long long field_58;\n    char padding_60[8];\n    unsigned long long field_68;\n    char padding_70[8];\n    unsigned long long field_78;\n    char padding_80[8];\n    unsigned long long field_88;\n    unsigned int field_90;\n    char padding_94[116];\n    char field_108;\n    char field_109;\n} struct_1;\n\ntypedef struct struct_2 {\n    char padding_0[136];\n    unsigned long long field_88;\n} struct_2;\n\ntypedef struct struct_0 {\n    char padding_0[44];\n    unsigned int field_2c;\n    char padding_30[24];\n    char field_48;\n} struct_0;\n\nint sub_4106f0()\n{\n    struct_1 *v1;  // rsi\n    struct_2 *v2;  // rbp\n    struct_1 *v3;  // rbx\n    unsigned long long v4;  // cc_dep1\n    struct_0 *v6;  // rdi\n    char v7;  // dl\n    unsigned long long v8;  // rax\n    unsigned int v9;  // eax\n    unsigned int *v10;  // r12\n    unsigned int|unsigned long v11;  // rax\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rax\n    unsigned long long v15;  // rax\n    char v16;  // cc_dep1\n    unsigned long long *v17;  // rdi\n    unsigned long long v19;  // rcx\n    unsigned long v20;  // d\n\n    v2 = &v1->field_78;\n    v3 = v1;\n    v4 = v1->field_58;\n    if ((((char)*((int *)&v6->field_48) & 1) == 0 || v4 != 0) && ((char)*((int *)&v6->field_48) & 2) == 0 && v7 == 0)\n    {\n        v11 = __fxstatat(0x1, v6->field_2c, v1->field_30, (unsigned int)v2, 0x100);\n        if (v11 != 0)\n        {\n            v11 = *(__errno_location());\n        }\n    }\n    if (((char)*((int *)&v6->field_48) & 2) != 0 || v7 != 0 || v4 == 0 && ((char)*((int *)&v6->field_48) & 1) != 0)\n    {\n        v8 = __xstat(0x1);\n    }\n    if (v8 != 0 && (v4 == 0 || ((char)*((int *)&v6->field_48) & 2) != 0 || v7 != 0) && (((char)*((int *)&v6->field_48) & 2) != 0 || v7 != 0 || ((char)*((int *)&v6->field_48) & 1) != 0))\n    {\n        v10 = __errno_location();\n        v11 = *(v10);\n        if ((unsigned int)v11 == 2)\n        {\n            v13 = __lxstat(0x1, v3->field_30, (unsigned int)v2);\n            if (v13 == 0)\n            {\n                *(v10) = 0;\n                return 13;\n            }\n            v11 = *(v10);\n        }\n    }\n    if (v8 == 0 && ((char)*((int *)&v6->field_48) & 2) != 0 || v8 == 0 && v7 != 0 || v8 == 0 && v4 == 0 && ((char)*((int *)&v6->field_48) & 1) != 0 || ((char)*((int *)&v6->field_48) & 2) == 0 && v7 == 0 && v11 == 0 && ((char)*((int *)&v6->field_48) & 1) == 0 || ((char)*((int *)&v6->field_48) & 2) == 0 && v7 == 0 && v11 == 0 && v4 != 0)\n    {\n        v9 = v3->field_90 & 0xf000;\n        if (!(((unsigned short)v3->field_90 & 0xf000) != 0x4000))\n        {\n            v12 = v3->field_88;\n            if (v3->field_88 > 1 && v3->field_58 > 0)\n            {\n                v15 = ((v6->field_48 & 32) == 0? v12 - 2 : v12);\n            }\n            if (v3->field_58 <= 0 || v3->field_88 <= 1)\n            {\n                v15 = -1;\n            }\n            v16 = v3->field_108;\n            v3->field_68 = v15;\n            v14 = 1;\n            if (v16 == 46 && (v3->field_109 == 0 || ((unsigned int)*((int *)&v3->field_108) & 0xffff00) == 0x2e00))\n            {\n                v14 = (0 - (unsigned int)(char)(v3->field_58 < 1) & -0x4) + 5;\n            }\n        }\n        else if (v9 != 0xa000)\n        {\n            v14 = (unsigned long long)(char)(v9 == 0x8000) * 5 + 3;\n        }\n        else\n        {\n            v14 = 12;\n        }\n        return v14;\n    }\n    if ((((char)*((int *)&v6->field_48) & 2) == 0 || v8 != 0) && (v7 == 0 || v8 != 0) && (((char)*((int *)&v6->field_48) & 2) == 0 || v13 != 0 || (unsigned int)v11 != 2) && (v7 == 0 || v13 != 0 || (unsigned int)v11 != 2) && (((char)*((int *)&v6->field_48) & 1) == 0 || v8 != 0 || v4 != 0) && (v4 == 0 || ((char)*((int *)&v6->field_48) & 2) != 0 || v7 != 0 || v11 != 0) && (((char)*((int *)&v6->field_48) & 1) == 0 || v13 != 0 || v4 != 0 || (unsigned int)v11 != 2) && (((char)*((int *)&v6->field_48) & 2) != 0 || v7 != 0 || v11 != 0 || ((char)*((int *)&v6->field_48) & 1) != 0))\n    {\n        *((unsigned long *)&v3->field_40) = v11;\n        v17 = &v2->padding_0[8] & -8;\n        v3->field_78 = 0;\n        v2->field_88 = 0;\n        for (v19 = &((struct struct_2 *)&v2->padding_0[-1 * (&v2->padding_0[8] & -8)])[1] >> 3; v19 != 0; v17 = &v17[v20])\n        {\n            v19 -= 1;\n            *(v17) = 0;\n        }\n        return 10;\n    }\n}\n"
        },
        {
            "funcName": "sub_40d960",
            "funcStartAddr": "0x40d960",
            "funcEndAddr": "0x40d96f",
            "decompiledFuncCode": "extern int512_t g_61da60;\n\nint sub_40d960()\n{\n    unsigned long v1;  // rdi\n\n    return *((int *)(v1 == 0? &g_61da60 : v1));\n}\n"
        },
        {
            "funcName": "sub_40b430",
            "funcStartAddr": "0x40b430",
            "funcEndAddr": "0x40b435",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[32];\n    unsigned long long field_20;\n} struct_0;\n\nint sub_40b430()\n{\n    struct_0 *v1;  // rdi\n\n    return v1->field_20;\n}\n"
        },
        {
            "funcName": "sub_40dd90",
            "funcStartAddr": "0x40dd90",
            "funcEndAddr": "0x40dd9f",
            "decompiledFuncCode": "int sub_40dd90()\n{\n}\n"
        },
        {
            "funcName": "sub_4143d0",
            "funcStartAddr": "0x4143d0",
            "funcEndAddr": "0x4143f3",
            "decompiledFuncCode": "int sub_4143d0()\n{\n    unsigned long long v1[3];  // rax\n    unsigned long v2;  // rdi\n\n    v1 = sub_4100e0();\n    v1[0] = v2;\n    v1[2] = 0;\n    v1[1] = 0;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_40eb40",
            "funcStartAddr": "0x40eb40",
            "funcEndAddr": "0x40eb4c",
            "decompiledFuncCode": "int sub_40eb40()\n{\n    unsigned long long *v1;  // rdi\n    unsigned long v2;  // rsi\n\n    return (0 CONCAT *(v1)) % v2 >> 64;\n}\n"
        },
        {
            "funcName": "sub_40f8b0",
            "funcStartAddr": "0x40f8b0",
            "funcEndAddr": "0x40fad0",
            "decompiledFuncCode": "extern unsigned int g_61daa8;\nextern unsigned int g_61daac;\n\nint sub_40f8b0()\n{\n    unsigned long long|unsigned long v0;  // [bp-0xd0]\n    unsigned long|void v1;  // [bp-0xc8]\n    unsigned long v2;  // [bp-0xc0]\n    unsigned long|void v3;  // [bp-0xb8]\n    unsigned long v4;  // [bp-0xb0]\n    char v5;  // [bp-0xa8]\n    unsigned int v6;  // [bp-0x90]\n    unsigned long v7;  // [bp-0x60]\n    unsigned long v8;  // [bp-0x58]\n    unsigned long v9;  // [bp-0x50]\n    unsigned long v10;  // [bp-0x48]\n    uint128_t v12[2];  // rsi\n    unsigned long long v13;  // rdx\n    unsigned long v14;  // rdi\n    unsigned long long v15;  // rax\n    unsigned long long|unsigned int v16;  // rbx\n    unsigned long long v17;  // rax\n    unsigned int *v18;  // rax\n    unsigned long long v19;  // rax\n    unsigned long long v20;  // rax\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rbp\n\n    if (v12 != 0)\n    {\n        v0 = stack_base + -200;\n        *((int128_t *)&v1) = *((int128_t *)&v12);\n        *((int128_t *)&v3) = *((int128_t *)&v12[2]);\n        v16 = (unsigned int)sub_40f3a0();\n        if ((unsigned int)v16 >= 0 && g_61daa8 >= 0)\n        {\n            if ((unsigned int)v16 != 2)\n            {\n                v13 = v0;\n            }\n            else\n            {\n                v15 = __lxstat(0x1, v14, (unsigned int)&v5);\n                if (v15 == 0)\n                {\n                    v13 = v0;\n                    if ((long long)(&v1)[8] != 1073741822)\n                    {\n                        v16 = 3;\n                        if ((long long)(&v3)[8] == 1073741822)\n                        {\n                            v4 = v10;\n                            v3 = v9;\n                        }\n                    }\n                    else\n                    {\n                        v16 = 3;\n                        v1 = v7;\n                        v2 = v8;\n                    }\n                }\n            }\n        }\n    }\n    else\n    {\n        v13 = 0;\n        v16 = 0;\n        v0 = 0;\n        if (g_61daa8 < 0)\n        {\n            g_61daa8 = -1;\n        }\n    }\n    if (g_61daa8 >= 0 && (v12 == 0 || (unsigned int)v16 >= 0) && (v12 == 0 || v15 == 0 || (unsigned int)v16 != 2))\n    {\n        v17 = utimensat(0xffffff9c, v14, v13, 0x100);\n        if ((unsigned int)v17 > 0)\n        {\n            *(__errno_location()) = 38;\n        }\n        else\n        {\n            if (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>)))\n            {\n                v18 = __errno_location();\n            }\n            if ((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>) || *(v18) != 38)\n            {\n                g_61daac = 1;\n                g_61daa8 = 1;\n                return stack_base + 0;\n            }\n        }\n    }\n    if ((v12 == 0 || (unsigned int)v16 >= 0) && (g_61daa8 >= 0 || v12 != 0) && (g_61daa8 < 0 || *(v18) == 38 || (unsigned int)v17 > 0) && (g_61daa8 < 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>)) || (unsigned int)v17 > 0) && (g_61daa8 < 0 || v12 == 0 || v15 == 0 || (unsigned int)v16 != 2))\n    {\n        g_61daa8 = -1;\n        if (v16 != 0 && v16 != 3)\n        {\n            v20 = __lxstat(0x1, v14, (unsigned int)&v5);\n        }\n    }\n    if (g_61daa8 < 0 && v12 == 0 || v16 == 0 && (v12 == 0 || (unsigned int)v16 >= 0) && (g_61daa8 >= 0 || v12 != 0) && (g_61daa8 < 0 || *(v18) == 38 || (unsigned int)v17 > 0) && (g_61daa8 < 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>)) || (unsigned int)v17 > 0) && (g_61daa8 < 0 || v12 == 0 || v15 == 0 || (unsigned int)v16 != 2))\n    {\n        v19 = __lxstat(0x1, v14, (unsigned int)&v5);\n    }\n    if (v16 != 0 && v16 != 3 && (v12 == 0 || (unsigned int)v16 >= 0) && (g_61daa8 >= 0 || v12 != 0) && (g_61daa8 < 0 || *(v18) == 38 || (unsigned int)v17 > 0) && (g_61daa8 < 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>)) || (unsigned int)v17 > 0) && (g_61daa8 < 0 || v12 == 0 || v15 == 0 || (unsigned int)v16 != 2) && v20 == 0 && v0 != 0 || v16 == 3 && v16 != 0 && (v12 == 0 || (unsigned int)v16 >= 0) && (g_61daa8 >= 0 || v12 != 0) && (g_61daa8 < 0 || *(v18) == 38 || (unsigned int)v17 > 0) && (g_61daa8 < 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>)) || (unsigned int)v17 > 0) && (g_61daa8 < 0 || v12 == 0 || v15 == 0 || (unsigned int)v16 != 2) && v0 != 0)\n    {\n        v21 = sub_40f2d0();\n    }\n    if ((v16 != 0 && v16 != 3 && (v12 == 0 || (unsigned int)v16 >= 0) && (g_61daa8 >= 0 || v12 != 0) && (g_61daa8 < 0 || *(v18) == 38 || (unsigned int)v17 > 0) && (g_61daa8 < 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>)) || (unsigned int)v17 > 0) && (g_61daa8 < 0 || v12 == 0 || v15 == 0 || (unsigned int)v16 != 2) && v20 == 0 && v0 != 0 || v16 == 3 && v16 != 0 && (v12 == 0 || (unsigned int)v16 >= 0) && (g_61daa8 >= 0 || v12 != 0) && (g_61daa8 < 0 || *(v18) == 38 || (unsigned int)v17 > 0) && (g_61daa8 < 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>)) || (unsigned int)v17 > 0) && (g_61daa8 < 0 || v12 == 0 || v15 == 0 || (unsigned int)v16 != 2) && v0 != 0) && v21 == 0 || v16 != 0 && v16 != 3 && (v12 == 0 || (unsigned int)v16 >= 0) && (g_61daa8 >= 0 || v12 != 0) && (g_61daa8 < 0 || *(v18) == 38 || (unsigned int)v17 > 0) && (g_61daa8 < 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>)) || (unsigned int)v17 > 0) && (g_61daa8 < 0 || v12 == 0 || v15 == 0 || (unsigned int)v16 != 2) && v20 == 0 && v0 == 0 || v16 == 3 && v16 != 0 && (v12 == 0 || (unsigned int)v16 >= 0) && (g_61daa8 >= 0 || v12 != 0) && (g_61daa8 < 0 || *(v18) == 38 || (unsigned int)v17 > 0) && (g_61daa8 < 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>)) || (unsigned int)v17 > 0) && (g_61daa8 < 0 || v12 == 0 || v15 == 0 || (unsigned int)v16 != 2) && v0 == 0 || (g_61daa8 < 0 && v12 == 0 || v16 == 0 && (v12 == 0 || (unsigned int)v16 >= 0) && (g_61daa8 >= 0 || v12 != 0) && (g_61daa8 < 0 || *(v18) == 38 || (unsigned int)v17 > 0) && (g_61daa8 < 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>)) || (unsigned int)v17 > 0) && (g_61daa8 < 0 || v12 == 0 || v15 == 0 || (unsigned int)v16 != 2)) && v19 == 0)\n    {\n        if (((unsigned short)v6 & 0xf000) != 0xa000)\n        {\n            v22 = (unsigned int)sub_40f460();\n        }\n        else\n        {\n            *(__errno_location()) = 38;\n        }\n    }\n    if (...)\n    {\n        return stack_base + 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_410df0",
            "funcStartAddr": "0x410df0",
            "funcEndAddr": "0x410e2e",
            "decompiledFuncCode": "int sub_410df0()\n{\n}\n"
        },
        {
            "funcName": "sub_40b240",
            "funcStartAddr": "0x40b240",
            "funcEndAddr": "0x40b2ba",
            "decompiledFuncCode": "extern int512_t g_416f10;\n\nint sub_40b240()\n{\n    unsigned int *v1[4];  // rdi\n    unsigned int v2[4];  // rax\n    unsigned int v3;  // ymm0\n    uint128_t v4;  // xmm1\n    unsigned int v5;  // ymm1\n    unsigned long long v6;  // xmm1lq\n\n    v2 = *(v1);\n    if (*(v1) != 4288272)\n    {\n        v3 = v2[1];\n        if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1 && (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1 && (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n        {\n            v4 = 0;\n            v5 = v2[0];\n            if (((char)(BinaryOp CmpF & 69) & 1) == 0)\n            {\n                v6 = (unsigned long long)(unsigned int)xmm1<16> + 4568451461323476173;\n            }\n        }\n        if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) == 1 || (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) == 1 || (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) == 1 || (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) == 1 || (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) == 1 || ((char)(BinaryOp CmpF & 69) & 1) != 0 || ((char)(BinaryOp CmpF & 69) & 1) != 0)\n        {\n            *(v1) = &g_416f10;\n            return 0;\n        }\n    }\n    if (...)\n    {\n        return 1;\n    }\n}\n"
        },
        {
            "funcName": "sub_40aeb0",
            "funcStartAddr": "0x40aeb0",
            "funcEndAddr": "0x40aec8",
            "decompiledFuncCode": "int sub_40aeb0()\n{\n    unsigned long long v1;  // rax\n\n    v1 = sub_40aed0();\n    if (v1 != 0)\n    {\n        return v1;\n    }\n    sub_410330(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_404a30",
            "funcStartAddr": "0x404a30",
            "funcEndAddr": "0x404adc",
            "decompiledFuncCode": "extern unsigned int g_416982;\nextern unsigned long long stdout[7];\n\nint sub_404a30()\n{\n    unsigned long v2;  // rdx\n    unsigned long long v3;  // rbx\n    char *v5;  // rax\n\n    __printf_chk(0x1, \"%s -> %s\", sub_40dca0(), sub_40dca0());\n    if (v2 != 0)\n    {\n        v3 = (unsigned int)sub_40dd80();\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x416982, 0x5));\n    }\n    v5 = stdout[5];\n    if (stdout[5] < stdout[6])\n    {\n        stdout[5] = stdout[5] + 1;\n        *(v5) = 10;\n        return v5;\n    }\n}\n"
        },
        {
            "funcName": "sub_40e8c0",
            "funcStartAddr": "0x40e8c0",
            "funcEndAddr": "0x40e8ca",
            "decompiledFuncCode": "int sub_40e8c0()\n{\n}\n"
        },
        {
            "funcName": "sub_40c280",
            "funcStartAddr": "0x40c280",
            "funcEndAddr": "0x40c2a7",
            "decompiledFuncCode": "int sub_40c280()\n{\n    unsigned long v0;  // [bp+0x8]\n    unsigned long v1;  // rsi\n\n    return (0 CONCAT (unsigned int)sub_413d10() ^ v0) % v1 >> 64;\n}\n"
        },
        {
            "funcName": "sub_40d980",
            "funcStartAddr": "0x40d980",
            "funcEndAddr": "0x40d9b3",
            "decompiledFuncCode": "extern int512_t g_61da60;\n\nint sub_40d980()\n{\n    void tmp_2;  // tmp #2\n    void tmp_52;  // tmp #52\n    void tmp_123;  // tmp #123\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long long v3;  // rcx\n    unsigned long long v5;  // rsi\n    unsigned long v6;  // rdx\n\n    tmp_2 = v1;\n    tmp_52 = v1 == 0;\n    v3 = (unsigned int)v2 & 31;\n    v5 = (unsigned int)*((int *)((tmp_52? &g_61da60 : tmp_2) + v2 % 32 * 4 + 8));\n    tmp_123 = ((unsigned int)v6 ^ (unsigned int)(v5 >> (v3 & 31))) & 1;\n    *((unsigned int *)((v1 == 0? &g_61da60 : v1) + v2 % 32 * 4 + 8)) = (unsigned int)(tmp_123 << (v3 & 31)) ^ (unsigned int)v5;\n    return (unsigned int)(v5 >> (v3 & 31)) & 1;\n}\n"
        },
        {
            "funcName": "sub_410330",
            "funcStartAddr": "0x410330",
            "funcEndAddr": "0x41035c",
            "decompiledFuncCode": "extern unsigned int g_41812f;\nextern unsigned int g_61d408;\n\nint sub_410330()\n{\n    dcgettext(0x0, 0x41812f, 0x5);\n    error(g_61d408, 0x0, \"%s\");\n}\n"
        },
        {
            "funcName": "sub_410670",
            "funcStartAddr": "0x410670",
            "funcEndAddr": "0x410687",
            "decompiledFuncCode": "int sub_410670()\n{\n    unsigned long long v1[2];  // rdi\n    unsigned long long v2[2];  // rsi\n    unsigned long long v3;  // rax\n    char v4;  // al\n\n    if (v1[1] != v2[1])\n    {\n        return 0;\n    }\n    v3 = *(v2);\n    v4 = *(v1) == *(v2);\n    return rax<8>;\n}\n"
        },
        {
            "funcName": "sub_40eaa0",
            "funcStartAddr": "0x40eaa0",
            "funcEndAddr": "0x40ead1",
            "decompiledFuncCode": "int sub_40eaa0()\n{\n    unsigned int v0;  // [bp-0xc]\n    unsigned int v2;  // edx\n    unsigned int v3;  // ecx\n\n    v0 = v2;\n    if (v3 <= 2)\n    {\n        return sub_40e910();\n    }\n    sub_40e8f0(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_410100",
            "funcStartAddr": "0x410100",
            "funcEndAddr": "0x410121",
            "decompiledFuncCode": "int sub_410100()\n{\n    void tmp_10;  // tmp #10\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rdi\n\n    tmp_10 = v2;\n    v4 = v2 * v3;\n    v5 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_410330(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_413e10",
            "funcStartAddr": "0x413e10",
            "funcEndAddr": "0x414364",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned int field_8;\n    unsigned short field_c;\n} struct_1;\n\nextern char g_4182d7;\nextern char g_61daf8[2];\n\nint sub_413e10()\n{\n    unsigned long long|unsigned long v0;  // [bp-0xd0]\n    void tmp_12;  // tmp #12\n    void tmp_56;  // tmp #56\n    void tmp_1;  // tmp #1\n    void tmp_10;  // tmp #10\n    void tmp_3;  // tmp #3\n    void tmp_28;  // tmp #28\n    unsigned long long v1;  // [bp-0xc8]\n    unsigned long long v2;  // [bp-0xc0]\n    char v3;  // [bp-0xb8]\n    char v4;  // [bp-0xb4]\n    char v5;  // [bp-0x78]\n    char v6;  // [bp-0x74]\n    unsigned int v7;  // [bp-0x4]\n    unsigned long long|char [2] v9;  // r15\n    char *|unsigned long v10;  // rbx\n    unsigned long v11;  // rax\n    unsigned long long v12;  // rdi\n    unsigned long long v13;  // rdi\n    unsigned long long v14;  // r12\n    char *v15;  // r13\n    unsigned long long v16;  // r14\n    unsigned long long v17;  // rbp\n    struct_1 *v20;  // r12\n    unsigned short v21;  // dx\n    unsigned int v22;  // r12d\n    unsigned long long v27;  // rax\n    unsigned int *v28;  // rcx\n    unsigned int v29;  // eax\n    unsigned long v30;  // rax\n    unsigned int *v31;  // rdx\n    unsigned long long v32;  // rcx\n    unsigned long long v33;  // rax\n    unsigned long v34;  // rax\n    unsigned long long v35;  // rax\n    unsigned long long v36;  // rax\n    unsigned long v37;  // rsi\n    unsigned long long v38;  // rcx\n    unsigned long long v39;  // rdx\n    unsigned long long v40;  // rcx\n    unsigned long long v41;  // rdi\n    unsigned long long v42;  // rsi\n    unsigned long long v43;  // r9\n    unsigned long long v44;  // r10\n    unsigned int v45;  // ecx\n    unsigned long long v47;  // r8\n    void *v48;  // rcx\n    unsigned long long v51;  // rcx\n    unsigned int v53;  // edx\n    unsigned long long v56;  // rcx\n    unsigned long long v57;  // rsi\n    char *v58;  // rax\n    unsigned long v59;  // rdi\n    char *v60;  // rax\n    unsigned long long v61;  // rax\n    unsigned long long v62;  // rdx\n    unsigned long long v66;  // rbp\n    unsigned long long v67;  // rax\n    unsigned long long v68;  // rax\n    unsigned long long v69;  // rbp\n    unsigned long long v70;  // rax\n\n    v9 = g_61daf8;\n    v10 = ((unsigned long long)nl_langinfo(0xe) == 0? &g_4182d7 : (unsigned long long)nl_langinfo(0xe));\n    if (g_61daf8 == 0)\n    {\n        v15 = getenv(\"CHARSETALIASDIR\");\n        if (v15 != 0 && *(v15) != 0)\n        {\n            v11 = strlen(v15);\n            v14 = v11;\n            v16 = v11;\n            if (v11 == 0)\n            {\n                v12 = 14;\n            }\n            else if (v15[v11 + -1] == 47)\n            {\n                v12 = v11 + 14;\n            }\n            else\n            {\n                v13 = v11 + 15;\n                v14 += 1;\n            }\n            if (v15[v11 + -1] == 47 || v11 == 0)\n            {\n                v17 = malloc(v12);\n                if (v17 != 0)\n                {\n                    memcpy(v17, v15, v16);\n                }\n            }\n        }\n        if (*(v15) == 0 || v15 == 0)\n        {\n            v13 = 115;\n            v14 = 101;\n            v16 = 100;\n            v15 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        }\n        if (*(v15) == 0 || v15 == 0 || v15[v11 + -1] != 47 && v11 != 0)\n        {\n            v17 = malloc(v13);\n        }\n        if (v17 == 0 || v17 == 0)\n        {\n            v9 = &g_4182d7;\n        }\n        if (v17 != 0 && (*(v15) == 0 || v15 == 0 || v15[v11 + -1] != 47) && (*(v15) == 0 || v15 == 0 || v11 != 0))\n        {\n            memcpy(v17, v15, v16);\n            *((char *)(v17 + v16)) = 47;\n        }\n        if (*(v15) == 0 && v17 != 0 || v15 == 0 && v17 != 0 || v17 != 0 && v15[v11 + -1] != 47 && v11 != 0 || v15[v11 + -1] == 47 && *(v15) != 0 && v15 != 0 && v17 != 0 || v11 == 0 && *(v15) != 0 && v15 != 0 && v17 != 0)\n        {\n            v20 = v14 + v17;\n            v20->field_0 = 3347411969557751907;\n            v20->field_c = 115;\n            v20->field_8 = 1634298977;\n            v22 = open(v17, 0x0, v21);\n            if (v22 >= 0)\n            {\n                v9 = 0;\n                v0 = 0;\n                if (v10 != 0)\n                {\n                    v10 = fdopen(v22, \"r\");\n                    while (true)\n                    {\n                        v58 = *((long long *)(v10 + 8));\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                        {\n                            *((char **)(v10 + 8)) = &v58[1];\n                            v59 = *(v58);\n                        }\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v59 != -1)\n                        {\n                            if ((unsigned int)v59 != 32 && (unsigned int)v59 != 35)\n                            {\n                                ungetc(v59, v10);\n                                v27 = fscanf(v10, \"%50s %50s\", (unsigned int)&v3, (unsigned int)&v5);\n                                if (v27 > 1)\n                                {\n                                    v28 = &v3;\n                                    do\n                                    {\n                                        tmp_12 = (unsigned int)*((int *)&v3);\n                                        v28 = &v4;\n                                        v29 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                    }\n                                    while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                    v30 = (unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int)(rax<8> >> 16) : (unsigned int)rax<8>);\n                                    v31 = &v5;\n                                    v32 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)((char *)v28 + 2) : v28) + -1 * ((v30 + v30 <= v30? 1 : 0) & 1) + -0x1 * &v3;\n                                    do\n                                    {\n                                        tmp_12 = (unsigned int)*((int *)&v5);\n                                        v31 = &v6;\n                                        v33 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                    }\n                                    while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                    v1 = v32;\n                                    tmp_56 = (unsigned int)v33 % 0x10000;\n                                    v34 = (unsigned int)(((unsigned int)v33 & 32896) == 0? (unsigned int)(v33 >> 16) : (unsigned int)v33);\n                                    v35 = &((char *)(-3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v31)[2] : v31) + -1 * ((v34 + v34 <= v34? 1 : 0) & 1) + -0x1 * &v5))[v1];\n                                    v2 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v31)[2] : v31) + -1 * (((unsigned int)((((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)) <= (unsigned long long)(unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)? 1 : 0) & 1) + -0x1 * &v5;\n                                    if (v0 == 0)\n                                    {\n                                        v0 = v35 + 2;\n                                        v36 = malloc(v35 + 3);\n                                        v38 = v1;\n                                        v39 = v2;\n                                    }\n                                    else\n                                    {\n                                        v37 = v35 + v0 + 3;\n                                        v0 = v35 + v0 + 2;\n                                        v36 = realloc(NULL, v37);\n                                        v39 = v2;\n                                        v38 = v1;\n                                    }\n                                    if (v36 != 0)\n                                    {\n                                        tmp_1 = -2 - v38;\n                                        v40 = v38 + 1;\n                                        v41 = v0 - v39;\n                                        v42 = tmp_1 + v0 - v39 + v36;\n                                        if ((unsigned int)v40 >= 8)\n                                        {\n                                            *((long long *)v42) = *((long long *)&v3);\n                                            *((long long *)(v42 + v40 - 8)) = *((long long *)&(&v3)[v40 + -8]);\n                                            v43 = v42 + 8 & -8;\n                                            v42 -= v42 + 8 & -8;\n                                            v44 = &(&v3)[-1 * v42];\n                                            v45 = (unsigned int)(v40 + v42) & -8;\n                                            if (v45 >= 8)\n                                            {\n                                                v42 = 0;\n                                                do\n                                                {\n                                                    v47 = v42;\n                                                    v42 = (unsigned int)v42 + 8;\n                                                    *((long long *)(v43 + v47)) = *((long long *)(v44 + v47));\n                                                }\n                                                while ((unsigned int)v42 < (v45 & -8));\n                                            }\n                                        }\n                                        else if ((v40 & 4) != 0)\n                                        {\n                                            *((int *)v42) = *((int *)&v3);\n                                            *((int *)(v42 + v40 - 4)) = *((int *)&(&v3)[v40 + -4]);\n                                        }\n                                        else if ((unsigned int)v40 != 0)\n                                        {\n                                            *((char *)v42) = v3;\n                                            if ((v40 & 2) != 0)\n                                            {\n                                                *((short *)(v42 + v40 - 2)) = *((short *)&(&v3)[v40 + -2]);\n                                            }\n                                        }\n                                        v62 = v39 + 1;\n                                        v48 = v36 + v41 - 1;\n                                        if ((unsigned int)v42 >= 8)\n                                        {\n                                            *((long long *)v48) = *((long long *)&v5);\n                                            v42 = v62;\n                                            *((long long *)&((char *)v48)[v42 + -8]) = *((long long *)&(&v5)[v42 + -8]);\n                                            v51 = v48 - (v48 + 8 & -8);\n                                            v53 = (unsigned int)(v42 + v51) & -8;\n                                            if (v53 >= 8)\n                                            {\n                                                v56 = 0;\n                                                do\n                                                {\n                                                    v57 = v56;\n                                                    v56 = (unsigned int)v56 + 8;\n                                                    *((long long *)((v48 + 8 & -8) + v57)) = *((long long *)&(&v5)[v57 + -1 * v51]);\n                                                }\n                                                while ((unsigned int)v56 < (v53 & -8));\n                                            }\n                                        }\n                                        else if (((char)v42 & 4) != 0)\n                                        {\n                                            *((int *)v48) = *((int *)&v5);\n                                            *((unsigned int *)&((char *)v48)[(unsigned long long)v7 + -4]) = v7;\n                                        }\n                                        else if ((unsigned int)v42 != 0)\n                                        {\n                                            *((char *)v48) = v5;\n                                            if ((v5 & 2) != 0)\n                                            {\n                                                *((short *)&((char *)v48)[(unsigned long long)v5 + -2]) = v7;\n                                            }\n                                        }\n                                        v9 = v36;\n                                        v58 = *((long long *)(v10 + 8));\n                                    }\n                                    else\n                                    {\n                                        v9 = &g_4182d7;\n                                        v10 = (tmp_10 == 0? &g_4182d7 : tmp_10);\n                                        free(NULL);\n                                        sub_414fe0();\n                                    }\n                                }\n                            }\n                            if ((unsigned int)v59 == 35)\n                            {\n                                do\n                                {\n                                    v60 = *((long long *)(v10 + 8));\n                                    if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                                    {\n                                        *((char **)(v10 + 8)) = &v60[1];\n                                        v61 = *(v60);\n                                        v62 = 1;\n                                    }\n                                    else\n                                    {\n                                        v61 = __uflow(v10);\n                                        v62 = (char)(v61 != -1);\n                                    }\n                                }\n                                while (v62 != 0 && v61 != 10);\n                            }\n                        }\n                        if (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && v27 > 1 && (unsigned int)v59 != 32 && (unsigned int)v59 != 35 && v36 != 0)\n                        {\n                            v59 = __uflow(v10);\n                        }\n                        if ((unsigned int)v59 == 35 && (unsigned int)v59 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v59 != -1) && v61 == -1 || (unsigned int)v59 != 32 && (unsigned int)v59 != 35 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v59 != -1) && v27 <= 1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && v27 > 1 && (unsigned int)v59 != 32 && (unsigned int)v59 != 35 && v36 != 0) && (unsigned int)v59 == -1)\n                        {\n                            v10 = (tmp_10 == 0? &g_4182d7 : tmp_10);\n                            sub_414fe0();\n                            if (v0 == 0)\n                            {\n                                break;\n                            }\n                            *((char *)(v9 + v0)) = 0;\n                        }\n                    }\n                    if (...)\n                    {\n                        v9 = &g_4182d7;\n                    }\n                    else if (...)\n                    {\n                        free(v17);\n                    }\n                }\n                else\n                {\n                    close(v22);\n                }\n            }\n            v9 = &g_4182d7;\n            free(v17);\n        }\n        *((char *[2])&g_61daf8[0]) = v9;\n    }\n    v66 = v9[0];\n    if (v9[0] != 0)\n    {\n        while (true)\n        {\n            v67 = strcmp((tmp_10 == 0? &g_4182d7 : tmp_10), v9);\n            if (v67 != 0 && (v66 != 42 || v9[1] != 0))\n            {\n                v68 = strlen(v9);\n                v69 = &((char [2])&v9[v68])[1];\n                v70 = strlen(&((char [2])&v9[v68])[1]);\n                v9 = v69 + v70 + 1;\n                v66 = (char)*((char *)(v69 + v70 + 1));\n                if (v66 == 0)\n                {\n                    break;\n                }\n            }\n            if (v67 == 0 || v66 == 42 && v9[1] == 0)\n            {\n                v10 = &((char [2])&v9[strlen(v9)])[1];\n            }\n        }\n    }\n    tmp_3 = v10;\n    tmp_28 = *(v10) == 0;\n    return (tmp_28? \"ASCII\" : tmp_3);\n}\n"
        },
        {
            "funcName": "sub_40dd10",
            "funcStartAddr": "0x40dd10",
            "funcEndAddr": "0x40dd79",
            "decompiledFuncCode": "int sub_40dd10()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_40d780();\n}\n"
        },
        {
            "funcName": "sub_411010",
            "funcStartAddr": "0x411010",
            "funcEndAddr": "0x4110b4",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    char padding_8[104];\n    unsigned short field_70;\n    char padding_72[6];\n    unsigned long long field_78;\n    unsigned long long field_80;\n} struct_0;\n\ntypedef struct struct_1 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_1;\n\nint sub_411010()\n{\n    void tmp_10;  // tmp #10\n    unsigned long long v1;  // rdx\n    struct_0 *v2;  // rbx\n    unsigned int v3;  // edi\n    unsigned long long v4;  // rax\n    unsigned long long v5[3];  // rbp\n    struct_1 *v6;  // r12\n    unsigned long long v7;  // rax\n\n    v2 = v1;\n    if (((unsigned short)v3 & 258) != 0)\n    {\n        v5 = malloc(0x18);\n        if (v5 != 0)\n        {\n            tmp_10 = v2->field_78;\n            v5[2] = v2;\n            v5[0] = tmp_10;\n            v5[1] = v2->field_80;\n            v6 = (unsigned long long)(unsigned int)sub_40c060();\n            if (v5 != v6)\n            {\n                free(v5);\n                if (v6 != 0)\n                {\n                    v7 = v6->field_10;\n                    v2->field_70 = 2;\n                    v2->field_0 = v7;\n                }\n            }\n        }\n        if ((v5 == 0 || v6 == 0) && (v5 == 0 || v5 != v6))\n        {\n            return 0;\n        }\n    }\n    else\n    {\n        v4 = sub_413bf0();\n        if (v4 != 0)\n        {\n            v2->field_0 = v2;\n            v2->field_70 = 2;\n            return v4;\n        }\n    }\n    if ((((unsigned short)v3 & 258) == 0 || v5 != 0) && (v4 == 0 || ((unsigned short)v3 & 258) != 0) && (v5 == v6 || ((unsigned short)v3 & 258) == 0 || v6 != 0))\n    {\n        return 1;\n    }\n}\n"
        },
        {
            "funcName": "sub_40aea0",
            "funcStartAddr": "0x40aea0",
            "funcEndAddr": "0x40aea8",
            "decompiledFuncCode": "int sub_40aea0()\n{\n}\n"
        },
        {
            "funcName": "sub_40e240",
            "funcStartAddr": "0x40e240",
            "funcEndAddr": "0x40e288",
            "decompiledFuncCode": "extern unsigned int g_416f8e;\n\nint sub_40e240()\n{\n    char v0;  // [bp-0x98]\n    unsigned long v1;  // [bp-0x90]\n    unsigned long long v3[2];  // rax\n    unsigned long v4;  // rdi\n\n    v3 = __lxstat(0x1, 0x416f8e, (unsigned int)&v0);\n    if (v3 == 0)\n    {\n        v3[0] = v1;\n        v3[1] = *((long long *)&v0);\n        return v4;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_40ad20",
            "funcStartAddr": "0x40ad20",
            "funcEndAddr": "0x40ae86",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char field_0;\n    char field_1;\n    char field_2;\n    char field_3;\n    char field_4;\n    char field_5;\n    char field_6;\n    char field_7;\n    char field_8;\n    char field_9;\n    unsigned short field_a;\n} struct_0;\n\nint sub_40ad20()\n{\n    unsigned long long v1;  // rax\n    unsigned int v2;  // edi\n    struct_0 *v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rax\n\n    v1 = 45;\n    if (((unsigned short)v2 & 0xf000) != 0x8000)\n    {\n        v1 = 100;\n        if (((unsigned short)v2 & 0xf000) != 0x4000)\n        {\n            v1 = 98;\n            if (((unsigned short)v2 & 0xf000) != 0x6000)\n            {\n                v1 = 99;\n                if (((unsigned short)v2 & 0xf000) != 0x2000)\n                {\n                    v1 = 108;\n                    if (((unsigned short)v2 & 0xf000) != 0xa000)\n                    {\n                        v1 = 112;\n                        if (((unsigned short)v2 & 0xf000) != 0x1000)\n                        {\n                            v1 = (unsigned int)((v2 & 0xf000) != 0xc000? 63 : 115);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    *((unsigned long long *)&v3->field_0) = v1;\n    v3->field_1 = (0 - (unsigned int)(char)((v2 & 0x100) < 1) & -69) + 114;\n    v3->field_2 = (0 - (unsigned int)(char)((v2 & 128) < 1) & -74) + 119;\n    if (((unsigned short)v2 & 0x800) != 0)\n    {\n        v4 = (0 - (unsigned int)(char)((v2 & 64) < 1) & -32) + 115;\n    }\n    else\n    {\n        v4 = (0 - (unsigned int)(char)((v2 & 64) < 1) & -75) + 120;\n    }\n    *((unsigned long long *)&v3->field_3) = v4;\n    v3->field_4 = (0 - (unsigned int)(char)((v2 & 32) < 1) & -69) + 114;\n    v3->field_5 = (0 - (unsigned int)(char)((v2 & 16) < 1) & -74) + 119;\n    if (((unsigned short)v2 & 0x400) != 0)\n    {\n        v5 = (0 - (unsigned int)(char)((v2 & 8) < 1) & -32) + 115;\n    }\n    else\n    {\n        v5 = (0 - (unsigned int)(char)((v2 & 8) < 1) & -75) + 120;\n    }\n    *((unsigned long long *)&v3->field_6) = v5;\n    v3->field_7 = (0 - (unsigned int)(char)((v2 & 4) < 1) & -69) + 114;\n    v3->field_8 = (0 - (unsigned int)(char)((v2 & 2) < 1) & -74) + 119;\n    if (((unsigned short)v2 & 0x200) != 0)\n    {\n        v3->field_9 = (0 - (unsigned int)(char)((v2 & 1) < 1) & -32) + 116;\n        v3->field_a = 32;\n        return 32;\n    }\n    v3->field_9 = (0 - (unsigned int)(char)((v2 & 1) < 1) & -75) + 120;\n    v3->field_a = 32;\n    return 32;\n}\n"
        },
        {
            "funcName": "sub_40a5f0",
            "funcStartAddr": "0x40a5f0",
            "funcEndAddr": "0x40a62d",
            "decompiledFuncCode": "int sub_40a5f0()\n{\n    char *v1;  // rsi\n    char *v2;  // rax\n\n    if (v1 == 0 || *(v1) == 0)\n    {\n        v2 = getenv(\"VERSION_CONTROL\");\n    }\n    if (v2 == 0 && v1 == 0 || v2 == 0 && *(v1) == 0 || *(v2) == 0 && v1 == 0 || *(v2) == 0 && *(v1) == 0)\n    {\n        return 2;\n    }\n}\n"
        },
        {
            "funcName": "sub_410690",
            "funcStartAddr": "0x410690",
            "funcEndAddr": "0x41069d",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_410690()\n{\n    struct_0 *v1;  // rdi\n    unsigned long v2;  // rsi\n\n    return (0 CONCAT v1->field_8) % v2 >> 64;\n}\n"
        },
        {
            "funcName": "sub_4102b0",
            "funcStartAddr": "0x4102b0",
            "funcEndAddr": "0x4102de",
            "decompiledFuncCode": "int sub_4102b0()\n{\n    unsigned int v1;  // rdi\n    unsigned int v2;  // rsi\n    unsigned long long v3;  // rax\n\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>)) && [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) == 0)\n    {\n        v3 = calloc(v1, v2);\n        if (v3 != 0)\n        {\n            return v3;\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>) || v3 == 0 || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) != 0)\n    {\n        sub_410330(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_413690",
            "funcStartAddr": "0x413690",
            "funcEndAddr": "0x4136a3",
            "decompiledFuncCode": "int sub_413690()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_413610();\n}\n"
        },
        {
            "funcName": "sub_413800",
            "funcStartAddr": "0x413800",
            "funcEndAddr": "0x413903",
            "decompiledFuncCode": "int sub_413800()\n{\n    unsigned long long v0;  // [bp-0x58]\n    char v1;  // [bp-0x41]\n    unsigned long v2;  // [bp-0x40]\n    unsigned long long v4;  // rsi\n    unsigned long long v5;  // r15\n    unsigned long v6;  // rcx\n    unsigned long v7;  // r13\n    void *v8;  // rdx\n    char *v9;  // rdi\n    unsigned long v11;  // r12\n    unsigned long long v12;  // rbx\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rax\n    void *v15;  // rbp\n    char *v16;  // r14\n\n    v5 = v4;\n    v7 = v6;\n    v15 = v8;\n    v2 = v8;\n    v16 = *((long long *)v5);\n    v0 = -1;\n    if (*((long long *)v5) != 0)\n    {\n        v11 = strlen(v9);\n        v1 = 0;\n        v12 = 0;\n        while (true)\n        {\n            v13 = strncmp(v16, v9, v11);\n            if (v13 == 0)\n            {\n                v14 = strlen(v16);\n                if (v14 == v11)\n                {\n                    v0 = v12;\n                }\n                else if (v0 == -1)\n                {\n                    v0 = v12;\n                    v12 += 1;\n                    v15 += v6;\n                    v16 = *((long long *)(v5 + v12 * 8));\n                }\n                else if (v2 != 0)\n                {\n                    v1 = (memcmp(v7 * v0 + v2, v15, v7) != 0? 1 : (unsigned int)(char)(char)(stack_base)[-65]);\n                }\n                else\n                {\n                    v1 = 1;\n                }\n            }\n            if (v13 != 0 || v0 != -1 && v14 != v11)\n            {\n                v12 += 1;\n                v15 += v6;\n                v16 = *((long long *)(v5 + v12 * 8));\n            }\n            if ((v13 == 0 || *((long long *)(v5 + (v12 << 3))) == 0) && (*((long long *)(v5 + (v12 << 3))) == 0 || v0 == -1) && (v13 != 0 || v14 != v11) && (v13 != 0 || v0 != -1 || *((long long *)(v5 + (v12 << 3))) != 0))\n            {\n                *((int *)&v0) = (v1 == 0? v0 : -2);\n            }\n        }\n    }\n    return v0;\n}\n"
        },
        {
            "funcName": "sub_40c2c0",
            "funcStartAddr": "0x40c2c0",
            "funcEndAddr": "0x40c2e2",
            "decompiledFuncCode": "int sub_40c2c0()\n{\n    unsigned long long v1[3];  // rdi\n    unsigned long long v2[3];  // rsi\n\n    if (v1[1] != v2[1] || v1[2] != v2[2])\n    {\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_409690",
            "funcStartAddr": "0x409690",
            "funcEndAddr": "0x4096c1",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_0;\n\nint sub_409690()\n{\n    unsigned long v0;  // [bp-0x28]\n    unsigned long v1;  // [bp-0x20]\n    unsigned long v3;  // rdi\n    unsigned long v4;  // rsi\n    struct_0 *v5;  // rax\n\n    v0 = v3;\n    v1 = v4;\n    v5 = sub_40b650();\n    if (v5 != 0)\n    {\n        return v5->field_10;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_413d50",
            "funcStartAddr": "0x413d50",
            "funcEndAddr": "0x413d6b",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    unsigned int field_4;\n    unsigned int field_8;\n    unsigned int field_c;\n    unsigned int field_10;\n    unsigned long long field_14;\n    char field_1c;\n} struct_0;\n\nint sub_413d50()\n{\n    struct_0 *v1;  // rdi\n    unsigned int v2;  // esi\n    unsigned long v3;  // rax\n\n    *((long long *)&(&v1->field_10)[1]) = 0;\n    *(&((char *)&v1->field_14)[4]) = 1;\n    v1->field_0 = v2;\n    v1->field_4 = v2;\n    v1->field_8 = v2;\n    v1->field_c = v2;\n    v1->field_10 = v2;\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_40de50",
            "funcStartAddr": "0x40de50",
            "funcEndAddr": "0x40dec3",
            "decompiledFuncCode": "int sub_40de50()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v2 = 0x400000000000000;\n    v1 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_40d780();\n}\n"
        },
        {
            "funcName": "sub_4094d0",
            "funcStartAddr": "0x4094d0",
            "funcEndAddr": "0x4095e6",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[8];\n    unsigned int field_c;\n    char padding_10[7];\n    char field_17;\n    char padding_18[20];\n    char field_2c;\n    char padding_2d[7];\n    unsigned int field_34;\n} struct_0;\n\nextern unsigned long long g_61d908;\nextern unsigned long long g_61d910;\n\nint sub_4094d0()\n{\n    unsigned long long v0;  // [bp-0x38]\n    unsigned long v1;  // [bp-0x30]\n    unsigned long v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x20]\n    char v4;  // [bp-0x9]\n    struct_0 *v6;  // rcx\n    unsigned long v7;  // r9\n    unsigned long v8;  // r8\n    unsigned long long v9;  // rdi\n    unsigned long long v10;  // rsi\n\n    if (!(v6 != 0))\n    {\n        __assert_fail(); /* do not return */\n    }\n    else if (!(v6->field_0 <= 3))\n    {\n        __assert_fail(); /* do not return */\n    }\n    else if (!((unsigned int)((unsigned long long)v6->field_c - 1) <= 2))\n    {\n        __assert_fail(); /* do not return */\n    }\n    else if (v6->field_34 <= 2)\n    {\n        if (v6->field_17 != 0 && v6->field_2c != 0)\n        {\n            __assert_fail(); /* do not return */\n        }\n        if (v6->field_17 == 0 || v6->field_2c == 0)\n        {\n            if (v6->field_c != 2 && v6->field_34 == 2)\n            {\n                __assert_fail(); /* do not return */\n            }\n            if (v6->field_c == 2 || v6->field_34 != 2)\n            {\n                v4 = 0;\n                v3 = v7;\n                v2 = v8;\n                g_61d910 = v9;\n                g_61d908 = v10;\n                v1 = stack_base + -9;\n                v0 = 1;\n                return sub_405650();\n            }\n        }\n    }\n    else\n    {\n        __assert_fail(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_413040",
            "funcStartAddr": "0x413040",
            "funcEndAddr": "0x4135a7",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    unsigned int field_4;\n    char padding_8[24];\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned int field_30;\n} struct_0;\n\ntypedef struct struct_1 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    unsigned int field_18;\n    char padding_1c[4];\n    unsigned long long field_20;\n    unsigned int field_28;\n    unsigned int field_2c;\n    unsigned int field_30;\n} struct_1;\n\nextern unsigned int g_418278;\nextern unsigned int g_4182bc;\n\nint sub_413040()\n{\n    struct_0 *|struct_1 * v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x60]\n    unsigned long v4;  // [bp-0x58]\n    unsigned int|char v5;  // [bp-0x4c]\n    char v6[2];  // [bp-0x48]\n    unsigned long long v7;  // [bp-0x40]\n    struct_0 *v8;  // [bp+0x8]\n    unsigned int v9;  // [bp+0x10]\n    unsigned long v10;  // rcx\n    unsigned long v11;  // r8\n    unsigned int v12;  // r13d\n    unsigned int v13;  // edi\n    unsigned long v14;  // rsi\n    unsigned long v15;  // r12\n    char v16[2];  // rdx\n    unsigned int|unsigned long v17;  // eax\n    unsigned long long v18;  // rax\n    unsigned long long|char * v19;  // rdx\n    unsigned long long v20;  // rax\n    unsigned int v22;  // r9d\n    unsigned long long v23;  // rax\n    unsigned long long|unsigned int v24;  // r9\n    unsigned long v26;  // rax\n    unsigned int|unsigned long v27;  // rdx\n    unsigned long v29;  // rax\n    char v30[2];  // rcx\n    unsigned long long *v31;  // rsi\n    unsigned long long v32;  // rcx\n    char *v33;  // rdi\n    char v34[3];  // rsi\n    unsigned long long v35;  // cc_dep1\n    unsigned long long v36;  // cc_dep2\n    unsigned long v37;  // d\n    unsigned long long v38;  // cc_dep1\n    unsigned int v39;  // ecx\n    unsigned long long v40;  // rax\n    unsigned long long v41;  // rcx\n    unsigned long long|unsigned long v42;  // rdx\n    unsigned int v44;  // eax\n    unsigned long long v45;  // r14\n    unsigned int|unsigned long v46;  // rbp\n    unsigned long long v47;  // rax\n    char v48[3];  // r14\n    unsigned long v49;  // r13\n    char *|char [2] v50;  // r15\n    char v51[3];  // rax\n    unsigned int v52;  // ecx\n    char v53[3];  // r8\n    unsigned long long v54;  // rcx\n    unsigned long long v55;  // rcx\n    unsigned long long v56;  // rdx\n    unsigned int v57;  // eax\n    char v58[2];  // rax\n    unsigned long long v59;  // r14\n    char v60;  // r14b\n    unsigned long long v61;  // r14\n    char v62;  // r14b\n    unsigned long long v63;  // rax\n\n    v3 = v10;\n    v4 = v11;\n    v12 = v8->field_4;\n    if (v13 > 0)\n    {\n        v17 = v0->field_0;\n        v46 = v13;\n        v15 = v14;\n        v50 = v16;\n        v0->field_10 = 0;\n        if (!((unsigned int)v17 != 0))\n        {\n            v0->field_0 = 1;\n            v17 = 1;\n        }\n        else if (v0->field_18 != 0)\n        {\n            v18 = v16[0];\n            v19 = v0->field_20;\n            if (((char)(v18 - 43) & 253) == 0)\n            {\n                v20 = v50[1];\n                v50 = &v50[1];\n                v49 = (unsigned int)(v20 == 58? 0 : (unsigned int)r13<8>);\n            }\n        }\n        if ((unsigned int)v17 == 0 || v0->field_18 == 0)\n        {\n            *((unsigned long *)&v0->field_30) = v17;\n            *((unsigned long *)&v0->field_2c) = v17;\n            v0->field_20 = 0;\n            if (!(v16[0] != 45))\n            {\n                v0->field_28 = 2;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            else if (v16[0] != 43)\n            {\n                v19 = 0;\n                if (v9 == 0)\n                {\n                    v5 = v22;\n                    v23 = getenv(\"POSIXLY_CORRECT\");\n                    v24 = v5;\n                    if (v23 != 0)\n                    {\n                        v19 = v0->field_20;\n                    }\n                    else\n                    {\n                        v0->field_28 = 1;\n                        v19 = v0->field_20;\n                    }\n                }\n                if (v9 != 0 || v23 != 0)\n                {\n                    v0->field_28 = 0;\n                }\n            }\n            else\n            {\n                v0->field_28 = 0;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            v0->field_18 = 1;\n            v18 = v50[0];\n        }\n        if ((unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0)\n        {\n            v49 = (unsigned int)(v18 == 58? 0 : (unsigned int)r13<8>);\n        }\n        if (*(v19) == 0 || v19 == 0 && (unsigned int)v17 == 0 || v19 == 0 && v0->field_18 == 0 || v19 == 0 && ((char)(v18 - 43) & 253) != 0 || ((char)(v18 - 43) & 253) == 0 && v8->field_20 == 0 && (unsigned int)v17 != 0 && v0->field_18 != 0)\n        {\n            v26 = v0->field_0;\n            if (v0->field_30 > v0->field_0)\n            {\n                v0->field_30 = v8->field_0;\n            }\n            if (v8->field_0 < v0->field_2c)\n            {\n                v0->field_2c = v8->field_0;\n            }\n            if (v0->field_28 == 1)\n            {\n                v27 = v0->field_30;\n                if (v0->field_2c != v0->field_30)\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v5 = v24;\n                        sub_412940();\n                        v27 = v0->field_0;\n                        v24 = v5;\n                    }\n                }\n                else\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v0->field_2c = v8->field_0;\n                        v27 = v26;\n                    }\n                }\n                if (v13 > (unsigned int)v27)\n                {\n                    v29 = v27;\n                    while (true)\n                    {\n                        v30 = *((long long *)(v15 + v29 * 8));\n                        v31 = v29;\n                        v27 = v29;\n                        if (*((char *)*((long long *)(v15 + (v29 << 3)))) == 45 && v30[1] != 0)\n                        {\n                            v26 = v0->field_0;\n                        }\n                        if (v30[1] == 0 || *((char *)*((long long *)(v15 + (v29 << 3)))) != 45)\n                        {\n                            v27 = (char *)v31 + 1;\n                            v29 += 1;\n                            v0->field_0 = (unsigned int)v31 + 1;\n                            if (v13 <= (unsigned int)v29)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    if (v30[1] == 0 || *((char *)*((long long *)(v15 + (v29 << 3)))) != 45)\n                    {\n                        v26 = v27;\n                    }\n                    else if (*((char *)*((long long *)(v15 + (v29 << 3)))) == 45 && v30[1] != 0)\n                    {\n                        *((unsigned long *)&v0->field_30) = v27;\n                    }\n                }\n                v26 = v27;\n                *((unsigned long *)&v0->field_30) = v27;\n            }\n            if (v13 != (unsigned int)v26)\n            {\n                v42 = v26;\n                v32 = 3;\n                v33 = \"-\";\n                v48 = *((long long *)(v15 + v26 * 8));\n                v34 = *((long long *)(v15 + v26 * 8));\n                while (v32 != 0)\n                {\n                    v32 -= 1;\n                    v35 = v34[0];\n                    v36 = *(v33);\n                    v33 = &v33[v37];\n                    v34 = &v34[v37];\n                    break;\n                }\n                v38 = (v35 > v36) - 0 - (v35 < v36);\n                if ((char)v38 == 0)\n                {\n                    v39 = v0->field_30;\n                    v40 = (unsigned int)v26 + 1;\n                    v0->field_0 = v42;\n                    if (v42 != v39)\n                    {\n                        if ((unsigned int)v42 != v8->field_30)\n                        {\n                            sub_412940();\n                            v42 = v0->field_2c;\n                        }\n                    }\n                    else\n                    {\n                        v0->field_2c = v42;\n                        v42 = v40;\n                    }\n                    v0->field_30 = v46;\n                    v0->field_0 = v46;\n                }\n                else if (v48[0] == 45)\n                {\n                    v41 = v48[1];\n                    if (v48[1] != 0 && v3 != 0)\n                    {\n                        if (!(v41 != 45))\n                        {\n                            v0->field_20 = &v48[2];\n                            v2 = \"-\";\n                            v1 = v49;\n                            v0 = v0;\n                        }\n                        else if (v24 != 0)\n                        {\n                            if (v48[2] == 0)\n                            {\n                                *((unsigned long long *)&v5) = v24;\n                                v47 = strchr(v50, v41);\n                            }\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v46 = v0->field_30;\n                v42 = v0->field_2c;\n            }\n        }\n    }\n    if ((v13 > 0 && v13 != (unsigned int)v26 && (((char)(v18 - 43) & 253) == 0 || v19 == 0 || *(v19) == 0) && (v19 == 0 || *(v19) == 0 || (unsigned int)v17 != 0) && (v19 == 0 || *(v19) == 0 || v0->field_18 != 0) && (v8->field_20 == 0 || *(v19) == 0 || (unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 == 0 || v13 == (unsigned int)v26 && v13 > 0 && (((char)(v18 - 43) & 253) == 0 || v19 == 0 || *(v19) == 0) && (v19 == 0 || *(v19) == 0 || (unsigned int)v17 != 0) && (v19 == 0 || *(v19) == 0 || v0->field_18 != 0) && (v8->field_20 == 0 || *(v19) == 0 || (unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0)) && v42 != v46)\n    {\n        *((unsigned long long *)&v0->field_0) = v42;\n    }\n    if ((v13 > 0 && v13 != (unsigned int)v26 && (((char)(v18 - 43) & 253) == 0 || v19 == 0 || *(v19) == 0) && (v19 == 0 || *(v19) == 0 || (unsigned int)v17 != 0) && (v19 == 0 || *(v19) == 0 || v0->field_18 != 0) && (v8->field_20 == 0 || *(v19) == 0 || (unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] == 45 && v48[1] == 0 || v13 > 0 && v13 != (unsigned int)v26 && (((char)(v18 - 43) & 253) == 0 || v19 == 0 || *(v19) == 0) && (v19 == 0 || *(v19) == 0 || (unsigned int)v17 != 0) && (v19 == 0 || *(v19) == 0 || v0->field_18 != 0) && (v8->field_20 == 0 || *(v19) == 0 || (unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] != 45) && v0->field_28 != 0)\n    {\n        v44 = (unsigned int)v26 + 1;\n        v0->field_10 = v48;\n        v45 = 1;\n        v0->field_0 = v44;\n    }\n    if (...)\n    {\n        v45 = -18446744069414584321;\n    }\n    if (...)\n    {\n        v0->field_20 = &v48[1];\n        v2 = \"-\";\n        v1 = v49;\n        v0 = v8;\n        v45 = (unsigned int)sub_412a20();\n        if ((unsigned int)v45 == -1)\n        {\n            v48 = *((long long *)(v15 + (int)v0->field_0 * 8));\n        }\n    }\n    if (...)\n    {\n        v19 = &v48[1];\n    }\n    if (...)\n    {\n        *((char **)&v6[0]) = v19;\n        v0->field_20 = &v19[1];\n        v45 = *(v19);\n        v7 = &v19[1];\n        v5 = *(v19);\n        v51 = strchr(v50, *(v19));\n        v52 = v5;\n        v53 = v7;\n        if (v6[1] == 0)\n        {\n            v0->field_0 = v0->field_0 + 1;\n        }\n        v54 = (unsigned long long)v52 - 58;\n        if (v54 > 1 && v51 != 0)\n        {\n            v55 = v51[1];\n            if (v51[0] == 87 && v3 != 0 && v55 == 59 && v6[1] == 0)\n            {\n                if (v0->field_0 != v46)\n                {\n                    v53 = *((long long *)(v15 + (int)v8->field_0 * 8));\n                }\n                else\n                {\n                    if ((unsigned int)v49 != 0)\n                    {\n                        dcgettext(0x0, 0x418278, 0x5);\n                        __fprintf_chk();\n                    }\n                    v0->field_8 = v45;\n                    v59 = 0;\n                    v60 = *(v50) != 58;\n                    v45 = r14<8> * 5 + 58;\n                }\n            }\n        }\n    }\n    if (...)\n    {\n        if ((unsigned int)v49 != 0)\n        {\n            dcgettext(0x0, 0x4182bc, 0x5);\n            __fprintf_chk();\n        }\n        v0->field_8 = v45;\n        v45 = 63;\n    }\n    if (...)\n    {\n        v56 = v6[1];\n        if (v51[2] != 58)\n        {\n            if (!(v56 == 0))\n            {\n                v57 = v8->field_0 + 1;\n                v0->field_10 = v7;\n                v0->field_0 = v57;\n            }\n            else if (v46 != v8->field_0)\n            {\n                v58 = *((long long *)(v15 + (int)v8->field_0 * 8));\n                v0->field_0 = (int)v8->field_0 + 1;\n                v0->field_10 = v58;\n            }\n            else\n            {\n                if ((unsigned int)v49 != 0)\n                {\n                    dcgettext(0x0, 0x418278, 0x5);\n                    __fprintf_chk();\n                }\n                v0->field_8 = v45;\n                v61 = 0;\n                v62 = *(v50) != 58;\n                v45 = r14<8> * 5 + 58;\n            }\n        }\n        else\n        {\n            if (v56 != 0)\n            {\n                v0->field_10 = v7;\n                v0->field_0 = v0->field_0 + 1;\n            }\n            else\n            {\n                v0->field_10 = 0;\n            }\n        }\n        v0->field_20 = 0;\n    }\n    if (...)\n    {\n        v0->field_20 = v53;\n        v0->field_10 = 0;\n        v2 = \"-W \";\n        v1 = v49;\n        v0 = v0;\n    }\n    if (...)\n    {\n        v45 = (unsigned int)sub_412a20();\n    }\n    v63 = v45;\n    return v63;\n}\n"
        },
        {
            "funcName": "sub_40b860",
            "funcStartAddr": "0x40b860",
            "funcEndAddr": "0x40b891",
            "decompiledFuncCode": "int sub_40b860()\n{\n    void tmp_16;  // tmp #16\n    char *v1;  // rdi\n    unsigned long long v2;  // rcx\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rdx\n\n    v2 = *(v1);\n    v4 = 0;\n    if (*(v1) != 0)\n    {\n        do\n        {\n            v1 = &v1[1];\n            tmp_16 = v4 * 31 + v2;\n            v2 = *(v1);\n            v4 = (0 CONCAT tmp_16) % v3 >> 64;\n        }\n        while ((char)v2 != 0);\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_413920",
            "funcStartAddr": "0x413920",
            "funcEndAddr": "0x41398c",
            "decompiledFuncCode": "extern unsigned int g_4182dc;\nextern unsigned int g_4182f7;\n\nint sub_413920()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x8]\n    unsigned long v3;  // r12\n    unsigned long v4;  // rbx\n\n    v1 = v3;\n    v0 = v4;\n    if (false)\n    {\n        dcgettext(0x0, 0x4182dc, 0x5);\n    }\n    dcgettext(0x0, 0x4182f7, 0x5);\n    sub_40dfb0();\n    sub_40dca0();\n}\n"
        },
        {
            "funcName": "sub_4041b0",
            "funcStartAddr": "0x4041b0",
            "funcEndAddr": "0x404843",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    char field_8;\n    char field_9;\n    char field_a;\n    char padding_b[5];\n    struct struct_1 *field_10;\n} struct_0;\n\ntypedef struct struct_7 {\n    char padding_0[8];\n    char field_8;\n    char field_9;\n    char field_a;\n    char padding_b[5];\n    unsigned long long field_10;\n} struct_7;\n\ntypedef struct struct_8 {\n    char padding_0[24];\n    unsigned long long field_18;\n} struct_8;\n\ntypedef struct struct_6 {\n    char padding_0[112];\n    unsigned short field_70;\n} struct_6;\n\ntypedef struct struct_4 {\n    char padding_0[8];\n    struct struct_5 *field_8;\n    char padding_10[40];\n    unsigned long long field_38;\n    char padding_40[24];\n    unsigned long long field_58;\n    char padding_60[16];\n    unsigned short field_70;\n    char padding_72[6];\n    unsigned long long field_78;\n    unsigned long long field_80;\n} struct_4;\n\nextern unsigned int g_415fa2;\nextern unsigned int g_415fc6;\nextern unsigned int g_415fd9;\nextern unsigned int g_416022;\nextern unsigned int g_4160b0;\nextern unsigned int g_4160e8;\nextern unsigned int g_416118;\nextern unsigned int g_416158;\nextern unsigned int g_416190;\nextern unsigned int g_4161c0;\nextern unsigned int g_416280;\n\nint sub_4041b0()\n{\n    unsigned int v0;  // [bp-0x3c]\n    unsigned long long *v2;  // rdi\n    unsigned long long|unsigned int|unsigned long v3;  // r12\n    struct_7 *v4;  // r13\n    struct_8 *v5;  // rbp\n    struct_6 *v6;  // rax\n    unsigned long long v7;  // rax\n    unsigned long long v8;  // r12\n    unsigned long long v9;  // r12\n    unsigned long long v10;  // rax\n    char *v11;  // rdx\n    unsigned long long v13;  // r15\n    unsigned long long|unsigned int *|unsigned int v16;  // r14\n    char v17[21];  // rax\n    unsigned long long v18;  // rdx\n    char v19;  // dl\n    unsigned long long v20;  // rax\n    char v23[2];  // rax\n    unsigned long long v24;  // rdx\n    char v25;  // dl\n    unsigned long long v26;  // rax\n    unsigned long long v27[12];  // rax\n    unsigned long long v28;  // r15\n    unsigned long long v29;  // r12\n    char *v30;  // rdi\n    unsigned long long v31;  // rcx\n    unsigned long long v32;  // cc_dep1\n    unsigned long long v33;  // cc_dep2\n    unsigned long v34;  // d\n    unsigned long long v36;  // r12\n    unsigned long long v37;  // r12\n    struct_4 *v40;  // rbx\n    char *|struct_0 * v41;  // rsi\n    unsigned long long v42;  // r14\n    unsigned long long v44[12];  // rax\n    unsigned long long v46;  // rbx\n    unsigned long long v47[12];  // rax\n    unsigned int *v50;  // rbx\n    unsigned int v51;  // eax\n    unsigned long long v52;  // rbp\n    unsigned long long v55;  // rax\n\n    if (*(v2) != 0)\n    {\n        v4 = v41;\n        v3 = 2;\n        v5 = (unsigned long long)(unsigned int)sub_410370();\n        while (true)\n        {\n            v6 = fts_read();\n            v40 = v6;\n            if (v6 == 0)\n            {\n                break;\n            }\n            while (true)\n            {\n                v7 = v6->field_70;\n                if (v7 << 48 <= 0xd000000000000)\n                {\n                    /* goto *((long long *)((unsigned long long)(unsigned int)ax<2> * 8 + 4285112)); */\n                    if (*((long long *)((unsigned long long)(unsigned int)ax<2> * 8 + 4285112)) == 4211392)\n                    {\n                        if (v7 == 6 && v40->field_58 > 0 && v40->field_78 != v5->field_18 && v4->field_8 != 0)\n                        {\n                            v44 = v40->field_8;\n                            if (!((char)(v40->field_8->field_58 - 0 >> 63)))\n                            {\n                                while (v44[4] == 0)\n                                {\n                                    v44[4] = 1;\n                                    v44 = v44[1];\n                                    if ((char)(v44[11] - 0 >> 63))\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                            v3 = 4;\n                            v46 = (unsigned int)sub_40dd80();\n                            error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x416190, 0x5));\n                        }\n                        if (v40->field_58 <= 0 || v40->field_78 == v5->field_18 || v4->field_8 == 0 || v7 != 6)\n                        {\n                            v42 = (unsigned int)sub_403d00();\n                            if ((unsigned int)v42 == 2)\n                            {\n                                v42 = (unsigned int)sub_403a80();\n                            }\n                        }\n                    }\n                    if (*((long long *)((unsigned long long)(unsigned int)ax<2> * 8 + 4285112)) == 4211592)\n                    {\n                        if (v4->field_9 == 0)\n                        {\n                            if (v4->field_a != 0)\n                            {\n                                v10 = openat();\n                                if ((unsigned int)v10 >= 0)\n                                {\n                                    v13 = fdopendir(v10);\n                                    if (v13 != 0)\n                                    {\n                                        *(v16) = 0;\n                                        v16 = __errno_location();\n                                        while (true)\n                                        {\n                                            v17 = readdir();\n                                            if (v17 != 0)\n                                            {\n                                                if (v17[2 + 3] == 46)\n                                                {\n                                                    v18 = 0;\n                                                    v19 = v17[2 + 4] == 46;\n                                                    v20 = v17[2 + 4 + rdx<8>];\n                                                }\n                                                closedir();\n                                            }\n                                            else\n                                            {\n                                                v16 = *(v16);\n                                                closedir();\n                                                if (v16 != 0)\n                                                {\n                                                    break;\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else\n                                    {\n                                        close(v10);\n                                    }\n                                }\n                                if (v4->field_a != 0)\n                                {\n                                    v3 = 39;\n                                }\n                            }\n                            if ((v4->field_a == 0 || v4->field_a == 0) && ((unsigned int)v10 < 0 || v4->field_a == 0 || v13 == 0))\n                            {\n                                v3 = 21;\n                            }\n                            if ((unsigned int)v10 < 0 || v4->field_a == 0 || v13 == 0 || v4->field_a != 0)\n                            {\n                                v16 = (unsigned long long)(unsigned int)sub_40dd80();\n                                error(0x0, v3, (unsigned long long)dcgettext(0x0, 0x415fa2, 0x5));\n                                v27 = v40->field_8;\n                                if (!((char)(v40->field_8->field_58 - 0 >> 63)))\n                                {\n                                    while (true)\n                                    {\n                                        if (v27[4] == 0)\n                                        {\n                                            v27[4] = 1;\n                                            v27 = v27[1];\n                                            if ((char)(v27[11] - 0 >> 63))\n                                            {\n                                                break;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        if (v40->field_58 == 0 && ((unsigned int)v10 >= 0 || v4->field_9 != 0) && (v4->field_9 != 0 || v4->field_a != 0) && (v4->field_9 != 0 || v4->field_a != 0) && (v4->field_9 != 0 || v13 != 0))\n                        {\n                            v23 = sub_40aa00();\n                            if (v23[0] == 46)\n                            {\n                                v24 = 0;\n                                v25 = v23[1] == 46;\n                                v26 = v23[1 + rdx<8>];\n                            }\n                        }\n                    }\n                    if (*((long long *)((unsigned long long)(unsigned int)ax<2> * 8 + 4285112)) == 4211232)\n                    {\n                        v8 = (unsigned int)sub_40de50();\n                        v11 = (unsigned long long)dcgettext(0x0, 0x415fd9, 0x5);\n                    }\n                    if (*((long long *)((unsigned long long)(unsigned int)ax<2> * 8 + 4285112)) == 4211536)\n                    {\n                        v9 = (unsigned int)sub_40de50();\n                        v11 = (unsigned long long)dcgettext(0x0, 0x4161c0, 0x5);\n                    }\n                    if (*((long long *)((unsigned long long)(unsigned int)ax<2> * 8 + 4285112)) == 4211232 || *((long long *)((unsigned long long)(unsigned int)ax<2> * 8 + 4285112)) == 4211536)\n                    {\n                        error(0x0, v41, v11);\n                    }\n                }\n                if (*((long long *)((unsigned long long)(unsigned int)ax<2> * 8 + 4285112)) == 4212680 || v7 << 48 > 0xd000000000000)\n                {\n                    v52 = (unsigned int)sub_40de50();\n                    error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x416280, 0x5));\n                    abort(); /* do not return */\n                }\n                if (...)\n                {\n                    v30 = \"/\";\n                    v31 = 2;\n                    v41 = v40->field_38;\n                    while (v31 != 0)\n                    {\n                        v31 -= 1;\n                        v32 = *(v41);\n                        v33 = *(v30);\n                        v30 = &v30[v34];\n                        v41 = &v41[v34];\n                        break;\n                    }\n                    if ((v32 > v33) - 0 - (v32 < v33) == 0)\n                    {\n                        v36 = (unsigned int)sub_40dd80();\n                        error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x4160e8, 0x5));\n                    }\n                    else\n                    {\n                        v16 = (unsigned int)sub_40dca0();\n                        v37 = (unsigned int)sub_40dca0();\n                        error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x416118, 0x5));\n                    }\n                    error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x416158, 0x5));\n                }\n                if (v7 << 48 <= 0xd000000000000 && *((long long *)((unsigned long long)(unsigned int)ax<2> * 8 + 4285112)) == 4211592 && v40->field_58 == 0 && ((unsigned int)v10 >= 0 || v4->field_9 != 0) && (v4->field_9 != 0 || v4->field_a != 0) && (v4->field_9 != 0 || v4->field_a != 0) && (v4->field_9 != 0 || v13 != 0) && v23[0] == 46 && v26 != 0 && v26 == 47 || v7 << 48 <= 0xd000000000000 && *((long long *)((unsigned long long)(unsigned int)ax<2> * 8 + 4285112)) == 4211592 && v40->field_58 == 0 && ((unsigned int)v10 >= 0 || v4->field_9 != 0) && (v4->field_9 != 0 || v4->field_a != 0) && (v4->field_9 != 0 || v4->field_a != 0) && (v4->field_9 != 0 || v13 != 0) && v23[0] == 46 && v26 == 0)\n                {\n                    v28 = (unsigned int)sub_40dca0();\n                    v16 = (unsigned long long)(unsigned int)sub_40dca0();\n                    v29 = (unsigned int)sub_40dca0();\n                    error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x4160b0, 0x5));\n                }\n                if (...)\n                {\n                    v42 = (unsigned int)sub_403d00();\n                    if ((unsigned int)v42 == 2)\n                    {\n                        if (v0 != 4)\n                        {\n                            break;\n                        }\n                        v42 = (unsigned int)sub_403a80();\n                        fts_set();\n                        fts_read();\n                        if ((unsigned int)v42 == 2)\n                        {\n                            break;\n                        }\n                    }\n                    v47 = v40->field_8;\n                    if (!((char)(v40->field_8->field_58 - 0 >> 63)))\n                    {\n                        while (v47[4] == 0)\n                        {\n                            v47[4] = 1;\n                            v47 = v47[1];\n                            if ((char)(v47[11] - 0 >> 63))\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    fts_set();\n                    fts_read();\n                }\n                if (...)\n                {\n                    if ((unsigned int)(v42 - 2) > 2)\n                    {\n                        __assert_fail(); /* do not return */\n                    }\n                    else if ((unsigned int)v42 != 4)\n                    {\n                        if ((unsigned int)v42 != 3)\n                        {\n                            break;\n                        }\n                        v3 = (unsigned int)((unsigned int)v3 == 2? 3 : (unsigned int)v3);\n                    }\n                    else\n                    {\n                        v3 = 4;\n                    }\n                }\n                if (...)\n                {\n                    v3 = 4;\n                    fts_set();\n                    fts_read();\n                    v6 = fts_read();\n                    v40 = v6;\n                    if (v6 == 0)\n                    {\n                        break;\n                    }\n                }\n            }\n            if (...)\n            {\n                v6 = fts_read();\n            }\n            else\n            {\n                v50 = __errno_location();\n                v51 = *(v50);\n            }\n        }\n        v50 = __errno_location();\n        v51 = *(v50);\n        v3 = 4;\n        error(0x0, *(v50), (unsigned long long)dcgettext(0x0, 0x415fc6, 0x5));\n        if (fts_close() != 0 || fts_close() != 0)\n        {\n            v3 = 4;\n            error(0x0, *(v50), (unsigned long long)dcgettext(0x0, 0x416022, 0x5));\n        }\n    }\n    else\n    {\n        v3 = 2;\n    }\n    v55 = v3;\n    return v55;\n}\n"
        },
        {
            "funcName": "sub_4048e0",
            "funcStartAddr": "0x4048e0",
            "funcEndAddr": "0x404974",
            "decompiledFuncCode": "extern unsigned long long g_61d3f8;\nextern unsigned long long g_61d500;\nextern unsigned long long g_61d900;\n\nint sub_4048e0()\n{\n    unsigned long long v1;  // rsi\n    unsigned long long v2;  // rbx\n    unsigned long v4;  // rbp\n    unsigned long long v5;  // rax\n\n    v2 = v1;\n    if (g_61d900 == 0)\n    {\n        if (g_61d900 != 0)\n        {\n            g_61d900 = calloc(g_61d3f8, 0x1);\n        }\n        else\n        {\n            g_61d900 = &g_61d500;\n            g_61d3f8 = 0x400;\n        }\n    }\n    if (v1 != 0)\n    {\n        while (true)\n        {\n            v4 = (g_61d3f8 <= v2? g_61d3f8 : v2);\n            v5 = sub_40afb0();\n            if (v5 == v4)\n            {\n                v2 -= v5;\n                if (v2 == v5)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}\n"
        },
        {
            "funcName": "sub_4100e0",
            "funcStartAddr": "0x4100e0",
            "funcEndAddr": "0x4100fa",
            "decompiledFuncCode": "int sub_4100e0()\n{\n    unsigned int v1;  // rdi\n    unsigned long long v2;  // rax\n\n    v2 = malloc(v1);\n    if (v2 == 0 && v1 != 0)\n    {\n        sub_410330(); /* do not return */\n    }\n    if (v1 == 0 || v2 != 0)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_40b0e0",
            "funcStartAddr": "0x40b0e0",
            "funcEndAddr": "0x40b0e7",
            "decompiledFuncCode": "int sub_40b0e0()\n{\n    unsigned long v1;  // rax\n\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_4095f0",
            "funcStartAddr": "0x4095f0",
            "funcEndAddr": "0x4095fc",
            "decompiledFuncCode": "int sub_4095f0()\n{\n    unsigned long long *v1;  // rdi\n    unsigned long v2;  // rsi\n\n    return (0 CONCAT *(v1)) % v2 >> 64;\n}\n"
        },
        {
            "funcName": "sub_40b8a0",
            "funcStartAddr": "0x40b8a0",
            "funcEndAddr": "0x40b8c0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    char field_10;\n} struct_0;\n\nint sub_40b8a0()\n{\n    struct_0 *v1;  // rdi\n\n    v1->field_10 = 0;\n    v1->field_0 = 0x3f80000000000000;\n    v1->field_8 = 4590573145673223373;\n    return 4590573145673223373;\n}\n"
        },
        {
            "funcName": "sub_40c0a0",
            "funcStartAddr": "0x40c0a0",
            "funcEndAddr": "0x40c25f",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    struct struct_1 *field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n} struct_0;\n\ntypedef struct struct_2 {\n    char padding_0[4];\n    unsigned int field_4;\n    unsigned int field_8;\n    char padding_c[4];\n    char field_10;\n} struct_2;\n\ntypedef struct struct_3 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_3;\n\nint sub_40c0a0()\n{\n    unsigned long long *v0;  // [bp-0x20]\n    void tmp_10;  // tmp #10\n    void tmp_15;  // tmp #15\n    struct_0 *v2;  // rdi\n    unsigned long long v3[10];  // rbx\n    unsigned long long v5;  // cc_dep1\n    unsigned long long v6;  // rax\n    uint128_t v7;  // xmm0\n    unsigned long long v8;  // rax\n    unsigned int v9;  // ymm0\n    unsigned long long v10;  // rdx\n    uint128_t|unsigned long long|unsigned int|unsigned long v11;  // xmm0lq\n    uint128_t v12;  // xmm1\n    unsigned long long v13;  // rax\n    uint128_t v14;  // xmm1\n    unsigned int v15;  // ymm1\n    unsigned long long v16;  // xmm1lq\n    struct_2 *v18;  // rdx\n    uint128_t v19;  // xmm0\n    uint128_t v20;  // xmm0\n    unsigned int v21;  // ymm0\n    uint128_t|unsigned int|unsigned long v22;  // xmm1\n    uint128_t v23;  // xmm1\n    unsigned int v24;  // ymm1\n    uint128_t v25;  // xmm2\n    unsigned int v26;  // ymm2\n    unsigned long long v27;  // xmm2lq\n    uint128_t v28;  // xmm0\n    struct_3 *v30;  // rdi\n    void *v31;  // r12\n\n    v3 = v2;\n    if (sub_40b120() != 0)\n    {\n        v3[4] = v3[4] - 1;\n        if (*(v0) == 0)\n        {\n            v5 = v3[3];\n            v6 = v3[3] - 1;\n            v3[3] = v3[3] - 1;\n            if (!((char)(v5 - 1 >> 63)))\n            {\n                v11 = 0;\n                v10 = v3[5];\n                v11 = v2->field_18 - 1;\n                v8 = v3[2];\n            }\n            else\n            {\n                v7 = 0;\n                tmp_10 = v6 % 2 | (unsigned int)v6 & 1;\n                v8 = v3[2];\n                v9 = tmp_10;\n                v10 = v3[5];\n                v11 = (unsigned long long)(unsigned int)xmm0<16> * 2;\n            }\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x18<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n            {\n                v12 = 0;\n                v12 = (unsigned int)v8;\n            }\n            else\n            {\n                tmp_15 = v8;\n                v13 = (unsigned int)v8 & 1;\n                v14 = 0;\n                v15 = tmp_15 >> 1 | v13;\n                v12 = xmm1<16> * 2;\n            }\n            xmm1<8> = Conv(128->64, (xmm1<16> * Conv(32->128, Load(addr=rdx<8>, size=4, endness=Iend_LE))))\n            if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n            {\n                sub_40b240();\n                v18 = v3[5];\n                if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x18<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n                {\n                    v19 = 0;\n                    v19 = (unsigned int)v2->field_10;\n                }\n                else\n                {\n                    v20 = 0;\n                    v21 = v2->field_10 >> 1 | (unsigned int)v2->field_10 & 1;\n                    v19 = xmm0<16> * 2;\n                }\n                if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x18<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n                {\n                    v22 = 0;\n                    v22 = v2->field_18;\n                }\n                else\n                {\n                    v23 = 0;\n                    v24 = v2->field_18 >> 1 | (unsigned int)v2->field_18 & 1;\n                    v22 = (unsigned long long)(unsigned int)xmm1<16> * 2;\n                }\n                v25 = 0;\n                v26 = *(v2->field_28);\n                v27 = xmm2<16> * v19;\n                if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n                {\n                    xmm0<16> = (xmm0<16> * Conv(32->128, Load(addr=(rdx<8> + 0x4<64>), size=4, endness=Iend_LE)))\n                    if (v18->field_10 == 0)\n                    {\n                        xmm0<16> = (xmm0<16> * Conv(32->128, Load(addr=(rdx<8> + 0x8<64>), size=4, endness=Iend_LE)))\n                    }\n                    if (sub_40bbe0() == 0)\n                    {\n                        v30 = v3[9];\n                        if (v3[9] != 0)\n                        {\n                            while (true)\n                            {\n                                v31 = v30->field_8;\n                                free(v30);\n                                v30 = v31;\n                                if (v31 == 0)\n                                {\n                                    break;\n                                }\n                            }\n                        }\n                        v3[9] = 0;\n                    }\n                }\n            }\n        }\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_40a940",
            "funcStartAddr": "0x40a940",
            "funcEndAddr": "0x40a998",
            "decompiledFuncCode": "int sub_40a940()\n{\n    unsigned long long v1;  // rbp\n    char *v2;  // rdi\n    char *v3;  // rbx\n    char v4;  // bpl\n    unsigned long long v5;  // rax\n    unsigned long long v6;  // rcx\n    unsigned long long v7;  // rax\n    unsigned long long v8;  // rdx\n\n    v1 = 0;\n    v3 = v2;\n    v4 = *(v2) == 47;\n    v5 = sub_40aa00();\n    v6 = v5 + -0x1 * v3;\n    if (v5 + -0x1 * v3 > rbp<8>)\n    {\n        if (*((char *)(v5 - 1)) == 47)\n        {\n            for (v8 = v6 - 1; rbp<8> != v8; v8 = v7)\n            {\n                v7 = v8 - 1;\n                if (v3[v8 + -1] != 47)\n                {\n                    break;\n                }\n            }\n            return v8;\n        }\n    }\n    if (v5 + -0x1 * v3 <= rbp<8> || *((char *)(v5 - 1)) != 47)\n    {\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_40c060",
            "funcStartAddr": "0x40c060",
            "funcEndAddr": "0x40c094",
            "decompiledFuncCode": "int sub_40c060()\n{\n    unsigned long long v0;  // [bp-0x10]\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rax\n\n    v3 = v2;\n    v4 = sub_40bde0();\n    if (v4 != -1)\n    {\n        if (v4 == 0)\n        {\n            v3 = v0;\n        }\n        v5 = v3;\n        return v5;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_40c430",
            "funcStartAddr": "0x40c430",
            "funcEndAddr": "0x40c44c",
            "decompiledFuncCode": "int sub_40c430()\n{\n    unsigned int v0;  // [bp-0xc]\n    unsigned int v2;  // edx\n\n    v0 = v2;\n    return sub_4137c0();\n}\n"
        },
        {
            "funcName": "sub_40a880",
            "funcStartAddr": "0x40a880",
            "funcEndAddr": "0x40a910",
            "decompiledFuncCode": "int sub_40a880()\n{\n    unsigned long v2;  // rax\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rax\n    unsigned int v5;  // r12d\n    unsigned int *v6;  // rbp\n    unsigned long long v7;  // r13\n    unsigned int|unsigned long v9;  // r14\n    unsigned long long v10;  // rbx\n\n    if (v2 != 0)\n    {\n        v3 = dirfd();\n        if (v3 <= 2)\n        {\n            v5 = sub_410460();\n            v6 = __errno_location();\n            if (v5 < 0)\n            {\n                v9 = *(v6);\n                v7 = 0;\n            }\n            else\n            {\n                v9 = *(v6);\n                v7 = fdopendir(v5);\n                if (v7 == 0)\n                {\n                    close(v5);\n                }\n            }\n            v10 = v7;\n            closedir();\n            *((unsigned long *)&v6) = v9;\n            return v10;\n        }\n    }\n    if (v2 == 0 || v3 > 2)\n    {\n        v2 = opendir();\n        return v4;\n    }\n}\n"
        },
        {
            "funcName": "sub_404c10",
            "funcStartAddr": "0x404c10",
            "funcEndAddr": "0x404d08",
            "decompiledFuncCode": "extern unsigned int g_415f96;\nextern unsigned int g_4163d0;\n\nint sub_404c10()\n{\n    unsigned long long v1;  // rcx\n    unsigned long long v2;  // rbp\n    unsigned long long v3;  // rdi\n    unsigned long long v4;  // rbx\n    unsigned long long v6;  // bl\n    unsigned long long v7;  // r13\n    unsigned long long v8;  // rbp\n    unsigned long long v9;  // rbp\n\n    v2 = v1;\n    v4 = v3;\n    if ((unsigned int)sub_409b50() >= 0)\n    {\n        v6 = (char)[D] amd64g_calculate_condition(0xf<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>) & v2;\n        if (((char)[D] amd64g_calculate_condition(0xf<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>) & v2) == 0)\n        {\n            return 1;\n        }\n        v9 = (unsigned int)sub_40dd80();\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x415f96, 0x5));\n        return rbx<8>;\n    }\n    v7 = (unsigned int)sub_40dca0();\n    v8 = (unsigned int)sub_40dca0();\n    error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x4163d0, 0x5));\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_405650",
            "funcStartAddr": "0x405650",
            "funcEndAddr": "0x4093e1",
            "decompiledFuncCode": "int sub_405650() { crash_skku_timeout;\n}"
        },
        {
            "funcName": "sub_410020",
            "funcStartAddr": "0x410020",
            "funcEndAddr": "0x410094",
            "decompiledFuncCode": "extern unsigned int g_417e19;\nextern unsigned int g_417e2e;\nextern unsigned int g_418060;\n\nint sub_410020()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x417e19, 0x5));\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x417e2e, 0x5));\n    dcgettext(0x0, 0x418060, 0x5);\n}\n"
        },
        {
            "funcName": "sub_410ac0",
            "funcStartAddr": "0x410ac0",
            "funcEndAddr": "0x410bc9",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[80];\n    struct struct_1 *field_50;\n    char padding_58[32];\n    unsigned long long field_78;\n} struct_0;\n\ntypedef struct struct_2 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_2;\n\nint sub_410ac0()\n{\n    unsigned long long v0;  // [bp-0x98]\n    unsigned long long v1;  // [bp-0x18]\n    unsigned long long v2;  // [bp-0x8]\n    unsigned long long v4;  // r12\n    unsigned long long v5;  // rbx\n    struct_0 *v6;  // rdi\n    unsigned long long v7;  // r12\n    struct_2 *v8;  // rax\n    unsigned long long v9;  // rax\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // r12\n    unsigned long long v13[2];  // rbx\n    unsigned long long v14;  // rax\n    unsigned long long v15;  // rdx\n    unsigned long long v16;  // rax\n    unsigned long long v17;  // rbx\n    unsigned long long v18;  // r12\n    unsigned long long v19;  // rbx\n    unsigned long long v20;  // r12\n\n    v2 = v4;\n    v1 = v5;\n    if ((v6->field_50->field_49 & 2) != 0)\n    {\n        if (v6->field_50->field_50 == 0)\n        {\n            v7 = (unsigned int)sub_40b8c0();\n            v6->field_50->field_50 = v7;\n            if (v7 == 0)\n            {\n                v9 = fstatfs(v6->field_50->field_2c, (unsigned int)&v0);\n            }\n        }\n        if (v6->field_50->field_50 != 0 || v7 != 0)\n        {\n            v0 = v6->field_78;\n            v8 = sub_40b650();\n            if (v8 != 0)\n            {\n                v14 = v8->field_8;\n            }\n            else\n            {\n                v10 = fstatfs(v6->field_50->field_2c, (unsigned int)&v0);\n                if (v10 == 0)\n                {\n                    v13 = malloc(0x10);\n                    v14 = v0;\n                    if (v13 != 0)\n                    {\n                        v15 = v6->field_78;\n                        v13[1] = v0;\n                        v13[0] = v15;\n                        v16 = sub_40c060();\n                        if (!(v16 != 0))\n                        {\n                            free(v13);\n                            v14 = v0;\n                        }\n                        else if (v13 != v16)\n                        {\n                            abort(); /* do not return */\n                        }\n                    }\n                }\n            }\n            if ((v10 == 0 || v8 != 0) && (v16 == 0 || v13 == 0 || v8 != 0))\n            {\n                v19 = v1;\n                v20 = v2;\n                return v14;\n            }\n        }\n    }\n    if ((v6->field_50->field_49 & 2) == 0 || v6->field_50->field_50 == 0 && v7 == 0 && v9 != 0 || v8 == 0 && v10 != 0 && v6->field_50->field_50 != 0 || v8 == 0 && v10 != 0 && v7 != 0)\n    {\n        v11 = v1;\n        v12 = v2;\n        return 0;\n    }\n    if (v9 == 0 && v6->field_50->field_50 == 0 && v7 == 0 && (v6->field_50->field_49 & 2) != 0 || v10 == 0 && v8 == 0 && v13 == v16 && (v6->field_50->field_49 & 2) != 0 && v16 != 0 && v13 != 0 && (v6->field_50->field_50 != 0 || v7 != 0))\n    {\n        v17 = v1;\n        v18 = v2;\n        return v0;\n    }\n}\n"
        },
        {
            "funcName": "sub_40c2b0",
            "funcStartAddr": "0x40c2b0",
            "funcEndAddr": "0x40c2bd",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_40c2b0()\n{\n    struct_0 *v1;  // rdi\n    unsigned long v2;  // rsi\n\n    return (0 CONCAT v1->field_8) % v2 >> 64;\n}\n"
        },
        {
            "funcName": "sub_40f8a0",
            "funcStartAddr": "0x40f8a0",
            "funcEndAddr": "0x40f8b0",
            "decompiledFuncCode": "int sub_40f8a0()\n{\n}\n"
        },
        {
            "funcName": "sub_404890",
            "funcStartAddr": "0x404890",
            "funcEndAddr": "0x4048cc",
            "decompiledFuncCode": "int sub_404890()\n{\n    unsigned long long v0;  // [bp-0x8]\n    unsigned int v2;  // esi\n    unsigned long long v4;  // rbx\n    unsigned long long v6;  // rbx\n    unsigned int v7;  // edi\n    unsigned long long v9;  // rbx\n    char v10;  // al\n\n    if ((v2 & 0xf000) == 0xa000)\n    {\n        return 1;\n    }\n    v0 = v4;\n    if (sub_4100a0() != 0)\n    {\n        v6 = v0;\n        return 1;\n    }\n    v9 = v0;\n    v10 = euidaccess(v7, 0x2) == 0;\n    return rax<8>;\n}\n"
        },
        {
            "funcName": "sub_40dd9f",
            "funcStartAddr": "0x40dd9f",
            "funcEndAddr": "0x40de10",
            "decompiledFuncCode": "extern uint128_t g_61da60;\nextern uint128_t g_61da70;\nextern uint128_t g_61da80;\nextern unsigned long long g_61da90;\n\nint sub_40dd9f()\n{\n    void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v5;  // rdx\n\n    v3 = g_61da90;\n    *((uint128_t *)&v0) = g_61da60;\n    *((uint128_t *)&v1) = g_61da70;\n    *((uint128_t *)&v2) = g_61da80;\n    *((unsigned int *)&((char *)stack_base)[4 * v5 % 32 + -64]) = (unsigned int)((unsigned long long)(!((unsigned int)((unsigned long long)(unsigned int)*((int *)&((char *)stack_base)[4 * v5 % 32 + -64]) >> ((char)((unsigned int)v5 & 31) & 31))) & 1) << ((char)((unsigned int)v5 & 31) & 31)) ^ *((int *)&((char *)stack_base)[4 * v5 % 32 + -64]);\n    return sub_40d780();\n}\n"
        },
        {
            "funcName": "sub_403d00",
            "funcStartAddr": "0x403d00",
            "funcEndAddr": "0x404143",
            "decompiledFuncCode": "typedef struct struct_2 {\n    char field_0;\n    char padding_1[3];\n    unsigned int field_4;\n    char padding_8[1];\n    char field_9;\n    char field_a;\n    char padding_b[13];\n    char field_18;\n} struct_2;\n\ntypedef struct struct_1 {\n    char padding_0[44];\n    unsigned int field_2c;\n} struct_1;\n\nextern unsigned int g_415fa2;\nextern unsigned int g_415fb3;\nextern unsigned int g_416038;\nextern unsigned int g_416068;\nextern unsigned int g_416088;\n\nint sub_403d00()\n{\n    unsigned long v0;  // [bp-0xe0]\n    unsigned int v1;  // [bp-0xd8]\n    unsigned int *|unsigned int v2;  // [bp-0xd0]\n    unsigned int v3;  // [bp-0xb0]\n    unsigned long long v4;  // [bp-0x98]\n    struct_2 *v6;  // rcx\n    struct_2 *v7;  // rbp\n    struct_1 *v8;  // rdi\n    unsigned long long v10[8];  // rsi\n    unsigned int *v11;  // r9\n    char v12;  // dl\n    unsigned long long v14;  // rbx\n    char v15;  // dl\n    char v16;  // bl\n    unsigned long long|unsigned long v18;  // r14\n    unsigned int|unsigned long v20;  // rax\n    char v21[21];  // rax\n    unsigned long long v22;  // rdx\n    char v23;  // dl\n    unsigned long long v24;  // rax\n    unsigned int|unsigned long v26;  // eax\n    unsigned long long v27;  // rax\n    unsigned long long v28;  // rax\n    unsigned long long v29;  // rax\n    unsigned int *v30;  // rax\n    unsigned long long|unsigned int v31;  // r12\n    unsigned int|unsigned long v32;  // r15d\n    unsigned long long v33;  // rax\n    unsigned long long v34;  // rbx\n    unsigned long long v35;  // rbx\n    unsigned int v36;  // r8d\n    unsigned long long v37;  // rbx\n    unsigned long long v38;  // rbx\n    unsigned long long v39;  // rax\n    unsigned long long v40;  // rdx\n    unsigned long long v41;  // rdx\n    unsigned long long v42;  // rax\n    unsigned long long v43;  // r12\n    unsigned long long v44;  // rax\n\n    v7 = v6;\n    v1 = v8->field_2c;\n    *((unsigned long long [8])&v0) = v10[7];\n    if (v11 != 0)\n    {\n        *(v11) = 2;\n        v14 = 0;\n        v16 = v15 != 0;\n        v4 = -1;\n        v14 = (unsigned int)rbx<8> * 4;\n        if (v2 >= 0)\n        {\n            v2 = openat();\n            v18 = fdopendir(v2);\n            if (v18 != 0)\n            {\n                v2 = __errno_location();\n                *(v2) = 0;\n                while (true)\n                {\n                    v21 = readdir();\n                    if (v21 != 0)\n                    {\n                        if (v21[2 + 3] == 46)\n                        {\n                            v22 = 0;\n                            v23 = v21[2 + 4] == 46;\n                            v24 = v21[2 + 4 + rdx<8>];\n                        }\n                        closedir();\n                    }\n                    else\n                    {\n                        v2 = *(v2);\n                        closedir();\n                        if (v2 != 0)\n                        {\n                            break;\n                        }\n                        v18 = 1;\n                        v20 = 4;\n                    }\n                }\n                if (v21 == 0 || v21[2 + 3] != 46 || v24 != 0 && v24 != 47)\n                {\n                    v18 = 0;\n                    v20 = 3;\n                }\n                else if (v2 == 0 && v21 == 0)\n                {\n                    *((unsigned long *)&v11) = v20;\n                }\n            }\n            else\n            {\n                close(v2);\n                v20 = 3;\n            }\n        }\n        if (v2 < 0 || v18 != 0)\n        {\n            v18 = 0;\n            v20 = 3;\n        }\n        *((unsigned long *)&v11) = v20;\n    }\n    else\n    {\n        v4 = -1;\n        v14 = !(0 - (unsigned int)(char)(v12 < 1)) & 4;\n        v18 = (unsigned int)(v12 != 0? 0 : (unsigned int)rdx<8>);\n    }\n    if (v10[4] == 0)\n    {\n        v26 = v7->field_4;\n        if (v7->field_4 != 5 && v7->field_0 == 0 && (v6->field_4 == 3 || v7->field_18 != 0))\n        {\n            v27 = sub_4100a0();\n            if (v27 == 0)\n            {\n                v28 = sub_403c90();\n                if (v28 == 0 && ((unsigned short)v3 & 0xf000) != 0xa000)\n                {\n                    v29 = faccessat(v1, (unsigned int)v10[6], 0x2, 0x200);\n                    if (v29 != 0)\n                    {\n                        v30 = __errno_location();\n                        v31 = *(v30);\n                        if (*(v30) == 13)\n                        {\n                            v32 = 1;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if (v27 == 0 && v28 == 0 && v7->field_0 == 0 && v10[4] == 0 && v7->field_4 != 5 && ((unsigned short)v3 & 0xf000) != 0xa000 && (v6->field_4 == 3 || v7->field_18 != 0) && v29 == 0 || v27 == 0 && v28 == 0 && v7->field_0 == 0 && v10[4] == 0 && v7->field_4 != 5 && (v6->field_4 == 3 || v7->field_18 != 0) && ((unsigned short)v3 & 0xf000) == 0xa000 || v7->field_0 == 0 && v10[4] == 0 && v7->field_4 != 5 && (v6->field_4 == 3 || v7->field_18 != 0) && v27 != 0)\n    {\n        v26 = v7->field_4;\n    }\n    if ((v27 == 0 && v28 == 0 && v7->field_0 == 0 && v10[4] == 0 && v7->field_4 != 5 && ((unsigned short)v3 & 0xf000) != 0xa000 && (v6->field_4 == 3 || v7->field_18 != 0) && v29 == 0 || v27 == 0 && v28 == 0 && v7->field_0 == 0 && v10[4] == 0 && v7->field_4 != 5 && (v6->field_4 == 3 || v7->field_18 != 0) && ((unsigned short)v3 & 0xf000) == 0xa000 || v7->field_0 == 0 && v10[4] == 0 && v7->field_4 != 5 && (v6->field_4 == 3 || v7->field_18 != 0) && v27 != 0 || v10[4] == 0 && v7->field_4 != 5 && v7->field_0 != 0) && v26 == 3)\n    {\n        v32 = 0;\n    }\n    if (v27 == 0 && v28 == 0 && v7->field_0 == 0 && v10[4] == 0 && v7->field_4 != 5 && ((unsigned short)v3 & 0xf000) != 0xa000 && (v6->field_4 == 3 || v7->field_18 != 0) && v29 != 0 && *(v30) == 13 || (v27 == 0 && v28 == 0 && v7->field_0 == 0 && v10[4] == 0 && v7->field_4 != 5 && ((unsigned short)v3 & 0xf000) != 0xa000 && (v6->field_4 == 3 || v7->field_18 != 0) && v29 == 0 || v27 == 0 && v28 == 0 && v7->field_0 == 0 && v10[4] == 0 && v7->field_4 != 5 && (v6->field_4 == 3 || v7->field_18 != 0) && ((unsigned short)v3 & 0xf000) == 0xa000 || v7->field_0 == 0 && v10[4] == 0 && v7->field_4 != 5 && (v6->field_4 == 3 || v7->field_18 != 0) && v27 != 0 || v10[4] == 0 && v7->field_4 != 5 && v7->field_0 != 0) && v26 == 3)\n    {\n        if (v14 != 0)\n        {\n        }\n        else\n        {\n            v33 = sub_403c90();\n        }\n    }\n    if (v27 == 0 && v7->field_0 == 0 && v10[4] == 0 && v7->field_4 != 5 && (v6->field_4 == 3 || v7->field_18 != 0) && v28 != 0 || (v27 == 0 && v28 == 0 && v7->field_0 == 0 && v10[4] == 0 && v7->field_4 != 5 && ((unsigned short)v3 & 0xf000) != 0xa000 && (v6->field_4 == 3 || v7->field_18 != 0) && v29 != 0 && *(v30) == 13 || (v27 == 0 && v28 == 0 && v7->field_0 == 0 && v10[4] == 0 && v7->field_4 != 5 && ((unsigned short)v3 & 0xf000) != 0xa000 && (v6->field_4 == 3 || v7->field_18 != 0) && v29 == 0 || v27 == 0 && v28 == 0 && v7->field_0 == 0 && v10[4] == 0 && v7->field_4 != 5 && (v6->field_4 == 3 || v7->field_18 != 0) && ((unsigned short)v3 & 0xf000) == 0xa000 || v7->field_0 == 0 && v10[4] == 0 && v7->field_4 != 5 && (v6->field_4 == 3 || v7->field_18 != 0) && v27 != 0 || v10[4] == 0 && v7->field_4 != 5 && v7->field_0 != 0) && v26 == 3) && v14 == 0 && v33 != 0)\n    {\n        v31 = *(__errno_location());\n    }\n    if (v27 == 0 && v28 == 0 && v7->field_0 == 0 && v10[4] == 0 && v7->field_4 != 5 && ((unsigned short)v3 & 0xf000) != 0xa000 && (v6->field_4 == 3 || v7->field_18 != 0) && v29 != 0 && *(v30) != 13 || v27 == 0 && v7->field_0 == 0 && v10[4] == 0 && v7->field_4 != 5 && (v6->field_4 == 3 || v7->field_18 != 0) && v28 != 0 || (v27 == 0 && v28 == 0 && v7->field_0 == 0 && v10[4] == 0 && v7->field_4 != 5 && ((unsigned short)v3 & 0xf000) != 0xa000 && (v6->field_4 == 3 || v7->field_18 != 0) && v29 != 0 && *(v30) == 13 || (v27 == 0 && v28 == 0 && v7->field_0 == 0 && v10[4] == 0 && v7->field_4 != 5 && ((unsigned short)v3 & 0xf000) != 0xa000 && (v6->field_4 == 3 || v7->field_18 != 0) && v29 == 0 || v27 == 0 && v28 == 0 && v7->field_0 == 0 && v10[4] == 0 && v7->field_4 != 5 && (v6->field_4 == 3 || v7->field_18 != 0) && ((unsigned short)v3 & 0xf000) == 0xa000 || v7->field_0 == 0 && v10[4] == 0 && v7->field_4 != 5 && (v6->field_4 == 3 || v7->field_18 != 0) && v27 != 0 || v10[4] == 0 && v7->field_4 != 5 && v7->field_0 != 0) && v26 == 3) && v14 == 0 && v33 != 0)\n    {\n        v34 = (unsigned int)sub_40dd80();\n    }\n    if (...)\n    {\n        if (v7->field_9 == 0)\n        {\n        }\n        else\n        {\n            v35 = (unsigned int)sub_40dd80();\n            if (v36 == 2 && v18 == 0)\n            {\n                if (v32 == 0)\n                {\n                    v40 = dcgettext(0x0, 0x416068, 0x5);\n                }\n                else\n                {\n                    v41 = dcgettext(0x0, 0x416038, 0x5);\n                }\n                __fprintf_chk();\n            }\n        }\n    }\n    if (...)\n    {\n        v31 = 21;\n        v37 = (unsigned int)sub_40dd80();\n    }\n    if (...)\n    {\n        v38 = (unsigned int)sub_40dd80();\n    }\n    if (...)\n    {\n        error(0x0, v31, (unsigned long long)dcgettext(0x0, 0x415fa2, 0x5));\n        v42 = 4;\n    }\n    if (...)\n    {\n        v39 = sub_403c90();\n        if (v39 == 0)\n        {\n            v43 = (unsigned int)sub_40ac30();\n            if (v32 == 0)\n            {\n                dcgettext(0x0, 0x415fb3, 0x5);\n            }\n            else\n            {\n                dcgettext(0x0, 0x416088, 0x5);\n            }\n            __fprintf_chk();\n        }\n        else\n        {\n            error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x415fa2, 0x5));\n            v42 = 4;\n        }\n    }\n    if (...)\n    {\n        v44 = sub_4103f0();\n    }\n    if (...)\n    {\n        v42 = 3;\n    }\n    if (...)\n    {\n        v42 = 2;\n    }\n    return v42;\n}\n"
        },
        {
            "funcName": "sub_40da10",
            "funcStartAddr": "0x40da10",
            "funcEndAddr": "0x40da82",
            "decompiledFuncCode": "extern int512_t g_61da60;\n\nint sub_40da10()\n{\n    unsigned long v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned long v2;  // [bp-0x58]\n    unsigned long v3;  // [bp-0x40]\n    unsigned int v5;  // [bp+0x100008]\n    unsigned long v6;  // r8\n    unsigned long long v7[7];  // rbx\n    unsigned long v8;  // rcx\n\n    v7 = (v6 == 0? &g_61da60 : v6);\n    v3 = v8;\n    *((unsigned long long [7])&v2) = v7[6];\n    *((unsigned long long [7])&v1) = v7[5];\n    v0 = &v7[1];\n    *(__errno_location()) = v5;\n    return sub_40c550();\n}\n"
        },
        {
            "funcName": "sub_413d10",
            "funcStartAddr": "0x413d10",
            "funcEndAddr": "0x413d42",
            "decompiledFuncCode": "int sub_413d10() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40ff60",
            "funcStartAddr": "0x40ff60",
            "funcEndAddr": "0x410018",
            "decompiledFuncCode": "int sub_40ff60()\n{\n    unsigned int v0;  // [bp-0xa0]\n    void tmp_12;  // tmp #12\n    void tmp_8;  // tmp #8\n    unsigned long v1;  // [bp-0x98]\n    unsigned long long v2;  // [bp-0x90]\n    unsigned long v3;  // [bp-0x88]\n    unsigned long long v4;  // [bp-0x18]\n    unsigned long v5;  // [bp-0x10]\n    unsigned long long v6;  // [bp+0x8]\n    char v7;  // [bp+0x10]\n    unsigned long long v8;  // r11\n    unsigned long long v9;  // r8\n    unsigned long v10;  // r9\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // r8\n    unsigned long long|unsigned long long * v14;  // r10\n    unsigned long long v15;  // r9\n\n    v8 = 0;\n    v4 = v9;\n    v14 = &v6;\n    v13 = 32;\n    v1 = &v6;\n    v5 = v10;\n    v15 = 0;\n    v0 = 32;\n    v2 = stack_base + -56;\n    while (true)\n    {\n        if ((unsigned int)v13 <= 47)\n        {\n            tmp_12 = v13;\n            v13 = (unsigned int)v13 + 8;\n            v8 = 1;\n            v11 = v4;\n            v3 = v4;\n        }\n        else\n        {\n            tmp_8 = v14;\n            v14 = &v7;\n            v12 = v6;\n            v3 = v6;\n        }\n        if ((unsigned int)v13 <= 47 && v11 != 0 || v12 != 0 && (unsigned int)v13 > 47)\n        {\n            v15 += 1;\n        }\n        if (v8 != 0)\n        {\n            v0 = v13;\n        }\n        return sub_40fb00();\n    }\n}\n"
        },
        {
            "funcName": "sub_40e3fb",
            "funcStartAddr": "0x40e3fb",
            "funcEndAddr": "0x40e3fd",
            "decompiledFuncCode": "int sub_40e3fb()\n{\n}\n"
        },
        {
            "funcName": "sub_4109a0",
            "funcStartAddr": "0x4109a0",
            "funcEndAddr": "0x410a2a",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[32];\n    unsigned long long field_20;\n} struct_1;\n\ntypedef struct struct_2 {\n    char padding_0[24];\n    unsigned long long field_18;\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[8];\n    unsigned long long field_38;\n    unsigned int field_40;\n    char padding_44[12];\n    unsigned long long field_50;\n    char padding_58[8];\n    unsigned long long field_60;\n    char padding_68[10];\n    unsigned int field_72;\n} struct_2;\n\nint sub_4109a0()\n{\n    struct_1 *v1;  // rdi\n    struct_1 *v2;  // r12\n    unsigned long v3;  // rdx\n    unsigned long long v4;  // rbp\n    unsigned long v6;  // rax\n    void *v7;  // rsi\n    struct_2 *v9;  // rax\n    unsigned long long v10;  // rax\n\n    v2 = v1;\n    v4 = v3;\n    if (v6 != 0)\n    {\n        memcpy(v6 + 264, v7, v3);\n        v9 = v2->field_20;\n        *((char *)(v1->field_20 + v4 + 264)) = 0;\n        *((unsigned long long *)(v6 + 96)) = v4;\n        *((struct_1 **)(v6 + 80)) = v2;\n        *((struct_2 **)(v6 + 56)) = v9;\n        *((int *)(v6 + 64)) = 0;\n        *((long long *)(v6 + 24)) = 0;\n        *((int *)(v6 + 114)) = 0x30000;\n        *((long long *)(v6 + 32)) = 0;\n        *((long long *)(v6 + 40)) = 0;\n    }\n    v6 = malloc(v3 + 272 & -8);\n    return v10;\n}\n"
        },
        {
            "funcName": "sub_40de20",
            "funcStartAddr": "0x40de20",
            "funcEndAddr": "0x40de31",
            "decompiledFuncCode": "int sub_40de20()\n{\n}\n"
        },
        {
            "funcName": "sub_405620",
            "funcStartAddr": "0x405620",
            "funcEndAddr": "0x40564a",
            "decompiledFuncCode": "extern unsigned int g_61d3f0;\n\nint sub_405620()\n{\n    if (g_61d3f0 != -1)\n    {\n        return g_61d3f0;\n    }\n    g_61d3f0 = umask(0x0);\n    umask(g_61d3f0);\n    return g_61d3f0;\n}\n"
        },
        {
            "funcName": "sub_413670",
            "funcStartAddr": "0x413670",
            "funcEndAddr": "0x413688",
            "decompiledFuncCode": "int sub_413670()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 1;\n    return sub_413610();\n}\n"
        },
        {
            "funcName": "sub_40df40",
            "funcStartAddr": "0x40df40",
            "funcEndAddr": "0x40df57",
            "decompiledFuncCode": "int sub_40df40()\n{\n}\n"
        },
        {
            "funcName": "sub_4102e0",
            "funcStartAddr": "0x4102e0",
            "funcEndAddr": "0x410308",
            "decompiledFuncCode": "int sub_4102e0()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_4100e0();\n}\n"
        },
        {
            "funcName": "sub_40dff0",
            "funcStartAddr": "0x40dff0",
            "funcEndAddr": "0x40e228",
            "decompiledFuncCode": "int sub_40dff0()\n{\n    unsigned int *|unsigned int v0;  // [bp-0x160]\n    char v1;  // [bp-0x158]\n    unsigned int v2;  // [bp-0x140]\n    char v3;  // [bp-0xc8]\n    unsigned int v4;  // [bp-0xb0]\n    char v5;  // [bp-0x30]\n    char v6;  // [bp-0x20]\n    char v7;  // [bp+0x0]\n    unsigned long v9;  // rdi\n    unsigned int v10;  // r14d\n    unsigned long v11;  // rdx\n    unsigned int v12;  // r13d\n    char *v13;  // rsi\n    char *v14;  // rcx\n    unsigned int v15;  // r8d\n    unsigned int v16;  // r13\n    unsigned long v17;  // r14\n    unsigned long long v18;  // rdx\n    unsigned int *v19;  // r9\n    unsigned long long v20;  // rax\n    unsigned long long v21;  // r15b\n    unsigned long long v22;  // rax\n    unsigned int v23;  // eax\n    unsigned long long v24;  // rbp\n    unsigned long long v25;  // rax\n    unsigned long long v26;  // rax\n    unsigned long long v27;  // rax\n\n    v10 = v9;\n    v12 = v11;\n    v18 = syscall(0x13c, v9, (unsigned int)v13, v11, (unsigned int)v14, v15, *((int *)&v5), (unsigned int)&v7, *((int *)&v6), v16, v17, v21);\n    if ((unsigned int)v18 < 0)\n    {\n        v0 = v18;\n        v19 = __errno_location();\n        v20 = *(v19);\n        v21 = ((unsigned int)(v20 - 22) & -17) != 0 & (unsigned int)v20 != 95;\n        if ((((unsigned int)(v20 - 22) & -17) != 0 & (unsigned int)v20 != 95) == 0)\n        {\n            if (v15 != 0)\n            {\n                if ((v15 & -2) != 0)\n                {\n                    *(v19) = 95;\n                    v18 = -18446744069414584321;\n                }\n                else\n                {\n                    v0 = v19;\n                    v22 = __fxstatat(0x1, v16, (unsigned int)v14, (unsigned int)&v3, 0x100);\n                    v19 = v0;\n                    if (v22 != 0)\n                    {\n                        v23 = *(v19);\n                        if (*(v19) != 75 && v23 == 2)\n                        {\n                            v21 = 1;\n                        }\n                    }\n                    if (v22 == 0 || *(v19) == 75)\n                    {\n                        *(v0) = 17;\n                        v18 = -18446744069414584321;\n                    }\n                }\n            }\n            if (v15 == 0 || (v15 & -2) == 0 && v23 == 2 && v22 != 0 && *(v19) != 75)\n            {\n                v0 = v19;\n                v24 = strlen(v13);\n                v25 = strlen(v14);\n            }\n            if (v13[v24 + -1] == 47 && v25 != 0 && v24 != 0 && ((v15 & -2) == 0 || v15 == 0) && (v15 == 0 || v23 == 2) && (v15 == 0 || v22 != 0) && (v15 == 0 || *(v19) != 75) || v14[v25 + -1] == 47 && v25 != 0 && v24 != 0 && v13[v24 + -1] != 47 && ((v15 & -2) == 0 || v15 == 0) && (v15 == 0 || v23 == 2) && (v15 == 0 || v22 != 0) && (v15 == 0 || *(v19) != 75))\n            {\n                v0 = v0;\n                v26 = __fxstatat(0x1, v9, (unsigned int)v13, (unsigned int)&v1, 0x100);\n                if (v26 == 0)\n                {\n                    if (!(v21 != 0))\n                    {\n                        v0 = v0;\n                        v27 = __fxstatat(0x1, v16, (unsigned int)v14, (unsigned int)&v3, 0x100);\n                        if (v27 == 0)\n                        {\n                            if (((unsigned short)v4 & 0xf000) != 0x4000)\n                            {\n                                *(v0) = 20;\n                            }\n                            else\n                            {\n                                if (((unsigned short)v2 & 0xf000) != 0x4000)\n                                {\n                                    *(v0) = 21;\n                                    v18 = -18446744069414584321;\n                                }\n                            }\n                        }\n                    }\n                    else if (((unsigned short)v2 & 0xf000) != 0x4000)\n                    {\n                        *(v0) = 2;\n                        v18 = -18446744069414584321;\n                    }\n                }\n            }\n            if (...)\n            {\n                v18 = -18446744069414584321;\n            }\n            if (...)\n            {\n                v18 = renameat(v9, (unsigned int)v13, v16, (unsigned int)v14);\n            }\n        }\n    }\n    return v18;\n}\n"
        },
        {
            "funcName": "sub_4136b0",
            "funcStartAddr": "0x4136b0",
            "funcEndAddr": "0x4136c5",
            "decompiledFuncCode": "int sub_4136b0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_413040();\n}\n"
        },
        {
            "funcName": "sub_40eb60",
            "funcStartAddr": "0x40eb60",
            "funcEndAddr": "0x40f29f",
            "decompiledFuncCode": "int sub_40eb60() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40f460",
            "funcStartAddr": "0x40f460",
            "funcEndAddr": "0x40f868",
            "decompiledFuncCode": "extern unsigned int g_61daa8;\nextern unsigned int g_61daac;\n\nint sub_40f460()\n{\n    unsigned long long v0;  // [bp-0x120]\n    void tmp_77;  // tmp #77\n    void tmp_84;  // tmp #84\n    void v1;  // [bp-0x118]\n    void v2;  // [bp-0x108]\n    char|unsigned long v3;  // [bp-0xf8]\n    unsigned long v4;  // [bp-0xf0]\n    unsigned long v5;  // [bp-0xe8]\n    unsigned long v6;  // [bp-0xe0]\n    unsigned long|void v7;  // [bp-0xd8]\n    unsigned long long|unsigned long v8;  // [bp-0xd0]\n    void v9;  // [bp-0xc8]\n    unsigned long long v10;  // [bp-0xc0]\n    char v11;  // [bp-0xb8]\n    unsigned long v12;  // [bp-0x70]\n    unsigned long v13;  // [bp-0x68]\n    unsigned long v14;  // [bp-0x60]\n    unsigned long v15;  // [bp-0x58]\n    unsigned long long v17;  // rsi\n    unsigned long long v18;  // rbp\n    unsigned long v19;  // rdi\n    unsigned int v20;  // ebx\n    uint128_t v21[2];  // rdx\n    char v22;  // al\n    unsigned long long v23;  // rsi\n    unsigned long long v24;  // r13\n    unsigned long long v25;  // rax\n    unsigned long long v26;  // rax\n    unsigned long long v27;  // r12\n    unsigned long long v28;  // cc_dep1\n    unsigned long long v29;  // cc_dep1\n    unsigned int *v30;  // rax\n    char v31;  // al\n    unsigned long long v32;  // rax\n    unsigned long long v33;  // rsi\n    unsigned long long v34;  // r13\n    unsigned long long v35;  // rdi\n    unsigned long long v36;  // rsi\n    char v37;  // bpl\n    char v38;  // r14b\n    unsigned long long v39;  // rax\n    unsigned long long v41;  // rax\n    unsigned int v43;  // edx\n    char v44;  // dl\n    unsigned long v45;  // r14\n    unsigned long long v46;  // r14\n    unsigned long long v47;  // rax\n\n    v18 = v17;\n    v20 = v19;\n    if (v21 != 0)\n    {\n        v0 = stack_base + -280;\n        *((int128_t *)&v1) = *((int128_t *)&v21);\n        *((int128_t *)&v2) = *((int128_t *)&v21[2]);\n        v24 = sub_40f3a0();\n    }\n    else\n    {\n        v0 = 0;\n        v24 = 0;\n    }\n    if (v21 == 0 || v24 >= 0)\n    {\n        if ((unsigned int)v19 < 0)\n        {\n            if (v17 == 0)\n            {\n                *(__errno_location()) = 9;\n            }\n            if (g_61daac >= 0 && v17 != 0 && (v22 == 0 || v24 != 2))\n            {\n                v25 = utimensat(0xffffff9c, v18, v23, 0x0);\n                v27 = v25;\n                v28 = v25;\n            }\n        }\n        if (g_61daac >= 0)\n        {\n            if ((unsigned int)v19 >= 0 || v17 != 0)\n            {\n                if (v24 != 2)\n                {\n                    v23 = v0;\n                }\n                else\n                {\n                    if ((unsigned int)v19 >= 0)\n                    {\n                        v22 = __fxstat(0x1, v19, (unsigned int)&v11) != 0;\n                    }\n                    else\n                    {\n                        v22 = __xstat(0x1) != 0;\n                    }\n                    if (v22 == 0)\n                    {\n                        v23 = v0;\n                        if (*((long long *)(v0 + 8)) != 1073741822)\n                        {\n                            v24 = 3;\n                            if (*((long long *)(v23 + 24)) == 1073741822)\n                            {\n                                *((unsigned long *)(v23 + 24)) = v15;\n                                *((unsigned long *)(v23 + 16)) = v14;\n                            }\n                        }\n                        else\n                        {\n                            v24 = 3;\n                            *((unsigned long *)v23) = v12;\n                            *((unsigned long *)(v23 + 8)) = v13;\n                        }\n                    }\n                }\n            }\n            if ((unsigned int)v19 >= 0 && (v22 == 0 || v24 != 2))\n            {\n                v26 = futimens(v19);\n                v27 = v26;\n                v29 = v26;\n            }\n        }\n    }\n    if (((unsigned int)v19 >= 0 && g_61daac >= 0 && (v22 == 0 || v24 != 2) && (v21 == 0 || v24 >= 0) && (unsigned int)v26 <= 0 || (unsigned int)v19 < 0 && g_61daac >= 0 && v17 != 0 && (v22 == 0 || v24 != 2) && (v21 == 0 || v24 >= 0) && (unsigned int)v25 <= 0) && !((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, cc_dep1<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v30 = __errno_location();\n    }\n    if ((unsigned int)v19 >= 0 && g_61daac >= 0 && (v22 == 0 || v24 != 2) && (v21 == 0 || v24 >= 0) && (unsigned int)v26 > 0 || (unsigned int)v19 < 0 && g_61daac >= 0 && v17 != 0 && (v22 == 0 || v24 != 2) && (v21 == 0 || v24 >= 0) && (unsigned int)v25 > 0)\n    {\n        *(__errno_location()) = 38;\n    }\n    if (((unsigned int)v19 >= 0 && g_61daac >= 0 && (v22 == 0 || v24 != 2) && (v21 == 0 || v24 >= 0) && (unsigned int)v26 <= 0 || (unsigned int)v19 < 0 && g_61daac >= 0 && v17 != 0 && (v22 == 0 || v24 != 2) && (v21 == 0 || v24 >= 0) && (unsigned int)v25 <= 0) && !((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, cc_dep1<8>, 0x0<64>, cc_ndep<8>)) && *(v30) != 38 || ((unsigned int)v19 >= 0 && g_61daac >= 0 && (v22 == 0 || v24 != 2) && (v21 == 0 || v24 >= 0) && (unsigned int)v26 <= 0 || (unsigned int)v19 < 0 && g_61daac >= 0 && v17 != 0 && (v22 == 0 || v24 != 2) && (v21 == 0 || v24 >= 0) && (unsigned int)v25 <= 0) && (char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, cc_dep1<8>, 0x0<64>, cc_ndep<8>))\n    {\n        g_61daac = 1;\n    }\n    if (((unsigned int)v19 >= 0 && g_61daac >= 0 && (v22 == 0 || v24 != 2) && (v21 == 0 || v24 >= 0) && (unsigned int)v26 <= 0 || (unsigned int)v19 < 0 && g_61daac >= 0 && v17 != 0 && (v22 == 0 || v24 != 2) && (v21 == 0 || v24 >= 0) && (unsigned int)v25 <= 0) && !((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, cc_dep1<8>, 0x0<64>, cc_ndep<8>)) && *(v30) == 38 || (unsigned int)v19 >= 0 && g_61daac >= 0 && (v22 == 0 || v24 != 2) && (v21 == 0 || v24 >= 0) && (unsigned int)v26 > 0 || (unsigned int)v19 < 0 && g_61daac >= 0 && v17 != 0 && (v22 == 0 || v24 != 2) && (v21 == 0 || v24 >= 0) && (unsigned int)v25 > 0 || (v21 == 0 && (unsigned int)v19 >= 0 || v21 == 0 && v17 != 0 || (unsigned int)v19 >= 0 && v24 >= 0 || v24 >= 0 && v17 != 0) && g_61daac < 0)\n    {\n        g_61daac = -1;\n        g_61daa8 = -1;\n        if (v24 != 0 && v24 != 3)\n        {\n            if ((unsigned int)v19 >= 0)\n            {\n                v31 = __fxstat(0x1, v19, (unsigned int)&v11) != 0;\n            }\n            else\n            {\n                v31 = __xstat(0x1) != 0;\n            }\n        }\n    }\n    if (...)\n    {\n        v27 = -18446744069414584321;\n    }\n    if (...)\n    {\n        v27 = 0;\n        v32 = sub_40f2d0();\n    }\n    if (...)\n    {\n        v33 = v0;\n        if (v0 != 0)\n        {\n            v34 = &v3;\n            v3 = *((long long *)v33);\n            v35 = *((long long *)(v33 + 8)) >> 63;\n            tmp_77 = *((long long *)(v33 + 8)) * 2361183241434822607 >> 64;\n            tmp_84 = *((long long *)(v33 + 24));\n            v5 = *((long long *)(v33 + 16));\n            v36 = *((long long *)(v33 + 24)) >> 63;\n            v4 = (tmp_77 >> 7) - v35;\n            v6 = ((unsigned long long)(tmp_84 * 2361183241434822607 >> 64) >> 7) - v36;\n        }\n    }\n    if (...)\n    {\n        v34 = 0;\n    }\n    if (...)\n    {\n        v27 = futimesat(0xffffff9c, v18);\n    }\n    if (...)\n    {\n        v27 = futimesat(v20, 0x0);\n        if ((unsigned int)v27 != 0)\n        {\n            v27 = -18446744069414584321;\n            if (v18 != 0)\n            {\n                v39 = v0;\n                if (v0 != 0)\n                {\n                    v41 = *((long long *)(v39 + 16));\n                    v7 = *((long long *)v39);\n                    v8 = v41;\n                }\n                v27 = utime(v18);\n            }\n        }\n        else if (v34 != 0)\n        {\n            v37 = 499999 < *((long long *)(v34 + 8));\n            v38 = 499999 < *((long long *)(v34 + 24));\n            if ((499999 < *((long long *)(v34 + 8)) || v38 != 0) && __fxstat(0x1, v20, (unsigned int)&v11) == 0)\n            {\n                v43 = v14 - *((long long *)(v34 + 16));\n                v44 = v14 - *((long long *)(v34 + 16)) == 1;\n                *((int128_t *)&v7) = *((int128_t *)v34);\n                *((int128_t *)&v9) = *((int128_t *)(v34 + 16));\n                v46 = (unsigned int)v45 & rdx<4>;\n                if (v12 - *((long long *)v34) == 1 && v37 != 0 && v13 == 0)\n                {\n                    v8 = 0;\n                }\n                if (v15 == 0 && v46 != 0)\n                {\n                    v10 = 0;\n                }\n                if ((v12 - *((long long *)v34) == 1 || v15 == 0) && (v15 == 0 || v13 == 0) && (v12 - *((long long *)v34) == 1 || v46 != 0) && (v15 == 0 || v37 != 0) && (v13 == 0 || v46 != 0) && (v37 != 0 || v46 != 0))\n                {\n                    futimesat(v20, 0x0);\n                }\n                v27 = 0;\n            }\n        }\n    }\n    v47 = v27;\n    return v47;\n}\n"
        },
        {
            "funcName": "sub_40abf0",
            "funcStartAddr": "0x40abf0",
            "funcEndAddr": "0x40ac24",
            "decompiledFuncCode": "int sub_40abf0()\n{\n    unsigned long v0;  // [bp-0x28]\n    unsigned long v1;  // [bp-0x20]\n    unsigned long v2;  // [bp-0x18]\n    unsigned long v4;  // rdi\n    unsigned long v5;  // rsi\n    unsigned long long v6[2];  // rdx\n    char v8;  // al\n\n    if (v4 != 0)\n    {\n        v0 = v5;\n        *((unsigned long long [2])&v1) = v6[1];\n        *((unsigned long long [2])&v2) = *(v6);\n        v8 = sub_40b650() != 0;\n        return rax<8>;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_40a0a0",
            "funcStartAddr": "0x40a0a0",
            "funcEndAddr": "0x40a53e",
            "decompiledFuncCode": "extern unsigned long long g_61d920;\n\nint sub_40a0a0()\n{\n    unsigned long long v0;  // [bp-0x90]\n    void *v1;  // [bp-0x88]\n    unsigned long long|unsigned short|char|unsigned long v2;  // [bp-0x80]\n    unsigned long long v3;  // [bp-0x78]\n    unsigned int|unsigned long v4;  // [bp-0x70]\n    unsigned long v5;  // [bp-0x68]\n    unsigned int v6;  // [bp-0x60]\n    unsigned int v7;  // [bp-0x58]\n    unsigned long v8;  // [bp-0x50]\n    unsigned long long|unsigned long v9;  // [bp-0x48]\n    unsigned int v10;  // [bp-0x40]\n    void *v12;  // rdi\n    unsigned long long|unsigned short *|void *|unsigned int * v13;  // rbx\n    unsigned int v14;  // esi\n    unsigned long long v15;  // rax\n    unsigned long long v17;  // rax\n    unsigned long long v19;  // r12\n    unsigned long long v22;  // r13\n    unsigned long long v23;  // rax\n    unsigned long long v25;  // rax\n    unsigned long long v26;  // rax\n    unsigned long long v27;  // rax\n    unsigned long long v28;  // rax\n    char|unsigned long v29;  // r8b\n    unsigned long long v30;  // rax\n    unsigned long long v32;  // cc_dep1\n    unsigned long long v33;  // rax\n    unsigned long v34;  // rdx\n    unsigned long v35;  // rax\n    unsigned long long v36;  // r8\n    unsigned long long v37;  // rsi\n    char v38;  // sil\n    unsigned long long v40;  // rax\n    unsigned int|unsigned long v41;  // rdx\n    char *v42;  // rax\n    unsigned long long v43;  // r15\n    unsigned long long v44;  // rcx\n    unsigned long long v45;  // rdx\n    unsigned int v46;  // rbp\n    unsigned long long|char * v49;  // r14\n    unsigned long long v50;  // rax\n    unsigned int v52;  // ebp\n    unsigned long long v53;  // rdi\n    unsigned int *v54;  // rbx\n    unsigned long long v57;  // rdi\n    unsigned long long v58;  // rax\n\n    v13 = v12;\n    v1 = v12;\n    v7 = v14;\n    v49 = (unsigned long long)(unsigned int)sub_40aa00() - v12;\n    v15 = &v49[strlen(v49)];\n    v0 = v15;\n    if (g_61d920 == 0)\n    {\n        sub_40a040();\n    }\n    v17 = strlen(g_61d920);\n    *((unsigned long long *)&v10) = v17 + 1;\n    *((unsigned long long *)&v6) = v0 + 1;\n    v8 = (9 <= v17 + 1? v17 + 1 : 9) + v0 + 1;\n    v43 = malloc((9 <= v17 + 1? v17 + 1 : 9) + v0 + 1);\n    if (v43 != 0)\n    {\n        v19 = 0;\n        while (true)\n        {\n            memcpy(v43, v1, *((long long *)&v6));\n            if (v7 != 1)\n            {\n                v13 = &v49[v43];\n                v22 = (unsigned int)sub_40aa60();\n                if (v19 != 0)\n                {\n                    rewinddir(v19);\n                }\n                else\n                {\n                    v23 = *(v13);\n                    *(v13) = 46;\n                    *((unsigned long long *)&v2) = v23;\n                    v19 = (unsigned int)sub_40a880();\n                    if (v19 != 0)\n                    {\n                        *(v13) = v2;\n                        *((int *)v3) = 2117172782;\n                        *((char *)(v3 + 4)) = 0;\n                    }\n                    else\n                    {\n                        v3 = v44;\n                        __errno_location();\n                        *(v13) = v2;\n                        v46 = 0 + 2;\n                        *((int *)v3) = 2117172782;\n                        *((char *)(v3 + 4)) = 0;\n                    }\n                }\n                if (v19 != 0 || v19 != 0)\n                {\n                    v46 = 2;\n                    v3 = 1;\n                    v4 = v8;\n                    v5 = v22 + 4;\n                    while (true)\n                    {\n                        v25 = readdir();\n                        if (v25 == 0)\n                        {\n                            break;\n                        }\n                        while (true)\n                        {\n                            v13 = v25 + 19;\n                            v26 = strlen(v25 + 19);\n                            if (v26 < v5)\n                            {\n                                break;\n                            }\n                            v2 = v22 + 2;\n                            v27 = memcmp(&v49[v43], v13, v22 + 2);\n                            if (v27 != 0)\n                            {\n                                break;\n                            }\n                            v13 += v2;\n                            v28 = (char)*((char *)v13);\n                            if ((v28 - 49 & 255) > 8)\n                            {\n                                break;\n                            }\n                            v44 = 1;\n                            v29 = v28 == 57;\n                            v30 = (char)*((char *)(v13 + 1));\n                            if (*((char *)(v13 + v44 + 1)) != 0 || v30 != 126)\n                            {\n                                break;\n                            }\n                            if ((unsigned int)(char)*((char *)(v13 + 1)) - 48 <= 9)\n                            {\n                                do\n                                {\n                                    v44 += 1;\n                                    v29 &= (unsigned int)v30;\n                                    v30 = (char)*((char *)(v13 + v44));\n                                }\n                                while ((unsigned int)(char)*((char *)(v13 + v44)) - 48 <= 9);\n                            }\n                            v45 = v3;\n                            v32 = v3;\n                            if (v3 >= v44)\n                            {\n                                v9 = v44;\n                                *((unsigned long *)&v2) = v29;\n                                if (v32 != v44)\n                                {\n                                    break;\n                                }\n                                v33 = memcmp(v43 + v0 + 2, v13, v45);\n                                v29 = v2;\n                                v44 = v9;\n                                if (v33 > 0)\n                                {\n                                    break;\n                                }\n                            }\n                            v34 = v29;\n                            v46 = v29;\n                            v3 = v9 + v44;\n                            v35 = v0 + v9 + v44 + 4;\n                            if (v0 + v9 + v44 + 4 > v4)\n                            {\n                                v37 = 0;\n                                v38 = [D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=stack_base-112, size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>);\n                                if (rsi<8> == 0 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x4<64>, Load(addr=stack_base-112, size=8, endness=Iend_LE), Load(addr=stack_base-112, size=8, endness=Iend_LE), cc_ndep<8>)))\n                                {\n                                    *((unsigned long *)&v4) = v4 * 2;\n                                }\n                                if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x4<64>, Load(addr=stack_base-112, size=8, endness=Iend_LE), Load(addr=stack_base-112, size=8, endness=Iend_LE), cc_ndep<8>) || rsi<8> != 0)\n                                {\n                                    *((unsigned long *)&v4) = v35;\n                                }\n                                v9 = v34;\n                                v2 = v44;\n                                v36 = realloc(v43, *((long long *)&v4));\n                                if (v36 == 0)\n                                {\n                                    break;\n                                }\n                            }\n                            else\n                            {\n                                v36 = v43;\n                            }\n                            v9 = v36;\n                            v2 = v44;\n                            *((short *)(v0 + v36)) = 32302;\n                            *((char *)(v0 + v36 + 2)) = 48;\n                            v40 = memcpy(v0 + v36 + v9 + 2, v13, v44 + 2);\n                            v41 = (char)*((char *)(v2 + v40 - 1));\n                            v42 = v2 + v40 - 1;\n                            if (v41 == 57)\n                            {\n                                do\n                                {\n                                    *(v42) = 48;\n                                    v42 = &v42[-1];\n                                    v41 = *(v42);\n                                }\n                                while (*(v42) == 57);\n                            }\n                            v45 = (unsigned long long)v41 + 1;\n                            v43 = v9;\n                            *((unsigned long long *)&v42) = v45;\n                            v25 = readdir();\n                        }\n                        if (true)\n                        {\n                            v25 = readdir();\n                        }\n                        else if (...)\n                        {\n                            v53 = v43;\n                            v43 = 0;\n                            free(v53);\n                            *(__errno_location()) = 12;\n                        }\n                    }\n                    if (false)\n                    {\n                        v53 = v43;\n                        v43 = 0;\n                        free(v53);\n                        *(__errno_location()) = 12;\n                    }\n                }\n                if (v7 == 2)\n                {\n                    memcpy(v43 + v0, g_61d920, *((long long *)&v10));\n                    v7 = 1;\n                }\n                if (v46 == 3 || v19 != 0 || v19 != 0)\n                {\n                    v53 = v43;\n                    v43 = 0;\n                    free(v53);\n                    *(__errno_location()) = 12;\n                }\n                sub_409f70();\n            }\n            else\n            {\n                memcpy(v43 + v0, g_61d920, *((long long *)&v10));\n            }\n            if (v45 != 0)\n            {\n                if (v19 != 0)\n                {\n                    v45 = dirfd();\n                }\n                if ((unsigned int)v45 < 0 || v19 == 0)\n                {\n                    v49 = 0;\n                }\n                v50 = sub_40dff0();\n                if (v50 != 0)\n                {\n                    v52 = *(v13);\n                    v13 = __errno_location();\n                    if (v19 != 0)\n                    {\n                        closedir();\n                    }\n                    v57 = v43;\n                    v43 = 0;\n                    free(v57);\n                    *(v54) = v52;\n                }\n            }\n            if (v45 == 0 || v50 == 0)\n            {\n                if (v19 == 0)\n                {\n                    break;\n                }\n                closedir();\n            }\n        }\n    }\n    v58 = v43;\n    return v58;\n}\n"
        },
        {
            "funcName": "sub_40dfb0",
            "funcStartAddr": "0x40dfb0",
            "funcEndAddr": "0x40dfc1",
            "decompiledFuncCode": "int sub_40dfb0()\n{\n}\n"
        },
        {
            "funcName": "sub_40b440",
            "funcStartAddr": "0x40b440",
            "funcEndAddr": "0x40b48f",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_40b440()\n{\n    unsigned long long v1[2];  // rdi\n    unsigned long long v2[2];  // rsi\n    unsigned long long v3;  // rdi\n    struct_0 *v4;  // rdx\n    unsigned long long v5;  // rcx\n    unsigned long long v6;  // rax\n\n    v2 = *(v1);\n    v3 = v1[1];\n    v6 = 0;\n    if (v2 >= v3)\n    {\n        return 0;\n    }\n    while (true)\n    {\n        if (*(v2) == 0)\n        {\n            v2 = &v2[2];\n            if (v2 >= v3)\n            {\n                break;\n            }\n        }\n        else\n        {\n            v4 = v2[1];\n            v5 = 1;\n            if (v2[1] != 0)\n            {\n                do\n                {\n                    v4 = v4->field_8;\n                    v5 += 1;\n                }\n                while (v4 != 0);\n            }\n            v6 = (v6 < v5? v5 : v6);\n            v2 = &v2[2];\n            if (v2 >= v3)\n            {\n                break;\n            }\n        }\n    }\n    return v6;\n}\n"
        },
        {
            "funcName": "sub_4145c0",
            "funcStartAddr": "0x4145c0",
            "funcEndAddr": "0x41461d",
            "decompiledFuncCode": "extern unsigned int g_418400;\nextern unsigned int g_418410;\nextern unsigned int g_61d408;\n\nint sub_4145c0()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n    unsigned long v3;  // rdi\n    unsigned long long v4;  // rbp\n    unsigned int *v5;  // rbx\n    char *v6;  // rax\n\n    v0 = v2;\n    if (v3 == 0)\n    {\n        abort(); /* do not return */\n    }\n    v4 = (unsigned int)sub_40dfd0();\n    v5 = __errno_location();\n    if (*(v5) != 0)\n    {\n        v6 = dcgettext(0x0, 0x418410, 0x5);\n    }\n    else\n    {\n        v6 = dcgettext(0x0, 0x418400, 0x5);\n    }\n    error(g_61d408, *(v5), v6);\n}\n"
        },
        {
            "funcName": "sub_410be0",
            "funcStartAddr": "0x410be0",
            "funcEndAddr": "0x410c3a",
            "decompiledFuncCode": "int sub_410be0()\n{\n    unsigned long long v1;  // rax\n    unsigned long long v2;  // rdx\n    unsigned long long v3;  // rdx\n    char v4;  // dl\n    unsigned int v5;  // edx\n    char v6;  // dl\n\n    v1 = sub_410ac0();\n    if (v1 != 40864)\n    {\n        if (!(v1 > 40864))\n        {\n            v2 = 0;\n            if (v1 != 0)\n            {\n                v3 = 0;\n                v4 = v1 != 26985;\n                return rdx<8>;\n            }\n        }\n        else if (v1 != 1397113167)\n        {\n            v2 = 2;\n            if (v1 != 1481003842)\n            {\n                v5 = 0;\n                v6 = v1 == 1382369651;\n                v2 = (unsigned long long)(unsigned int)rdx<4> + 1;\n            }\n        }\n    }\n    if (v1 == 40864 || v1 == 1397113167 && v1 > 40864)\n    {\n        v2 = 0;\n    }\n    if (v1 == 0 || v1 == 40864 || v1 > 40864)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_40c450",
            "funcStartAddr": "0x40c450",
            "funcEndAddr": "0x40c52f",
            "decompiledFuncCode": "extern int512_t g_416f96;\nextern int512_t g_416f9a;\n\nint sub_40c450()\n{\n    unsigned long v1;  // rdi\n    char *v2;  // rbx\n    char v3[8];  // rax\n    unsigned long long v4;  // rdx\n    unsigned long v5;  // rsi\n    char *v6;  // rax\n\n    v2 = (unsigned long long)dcgettext(0x0, v1, 0x5);\n    if (v1 == v2)\n    {\n        v3 = sub_413e10();\n        v4 = v3[0] & 4294967007;\n        if ((v3[0] & 223) == 85)\n        {\n            if ((v3[1] & 223) == 84 && (v3[2] & 223) == 70 && v3[3] == 45 && v3[4] == 56 && v3[5] == 0)\n            {\n                v2 = (*(v2) != 96? &g_416f96 : 4288417);\n            }\n        }\n        else\n        {\n            if (v4 == 71 && (v3[1] & 223) == 66 && v3[2] == 49 && v3[3] == 56 && v3[4] == 48 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0)\n            {\n                v2 = (*(v2) != 96? &g_416f9a : 4288413);\n            }\n        }\n    }\n    if (...)\n    {\n        return ((unsigned int)v5 != 9? \"'\" : \"\\\"\");\n    }\n    if ((v3[1] & 223) == 84 && v3[4] == 56 && v1 == v2 && v3[5] == 0 && v3[3] == 45 && (v3[0] & 223) == 85 && (v3[2] & 223) == 70 || v3[4] == 48 && (v3[1] & 223) == 66 && v1 == v2 && v3[3] == 56 && v4 == 71 && v3[2] == 49 && (v3[0] & 223) != 85 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0 || v1 != v2)\n    {\n        v6 = v2;\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_409750",
            "funcStartAddr": "0x409750",
            "funcEndAddr": "0x409786",
            "decompiledFuncCode": "extern unsigned long long g_61d918;\n\nint sub_409750()\n{\n    g_61d918 = (unsigned int)sub_40b8c0();\n    if (g_61d918 != 0)\n    {\n        return g_61d918;\n    }\n    sub_410330(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_4106c0",
            "funcStartAddr": "0x4106c0",
            "funcEndAddr": "0x4106e2",
            "decompiledFuncCode": "int sub_4106c0()\n{\n    unsigned long long v1;  // rax\n    struct struct_0 **v2;  // rdi\n    struct struct_0 **v3;  // rsi\n\n    v1 = -18446744069414584321;\n    if (*(v2)->field_80 >= *(v3)->field_80)\n    {\n        v1 = (char)(*(v2)->field_80 > *(v3)->field_80);\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_40aa00",
            "funcStartAddr": "0x40aa00",
            "funcEndAddr": "0x40aa52",
            "decompiledFuncCode": "int sub_40aa00()\n{\n    char *v1;  // rdi\n    unsigned long long v2;  // rdx\n    unsigned long long v3;  // rsi\n    char *v4;  // rcx\n    char *v5;  // rax\n\n    v2 = *(v1);\n    v5 = v1;\n    if (*(v1) == 47)\n    {\n        do\n        {\n            v5 = &v5[1];\n            v2 = *(v5);\n        }\n        while (*(v5) == 47);\n    }\n    if (v2 != 0)\n    {\n        v4 = v5;\n        v3 = 0;\n        while (true)\n        {\n            if (v2 != 47)\n            {\n                if (v3 != 0)\n                {\n                    v5 = v4;\n                    v3 = 0;\n                }\n                v4 = &v4[1];\n                v2 = *(v4);\n                if ((char)v2 == 0)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v4 = &v4[1];\n                v2 = *(v4);\n                v3 = 1;\n                if ((char)v2 == 0)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    return v5;\n}\n"
        },
        {
            "funcName": "sub_40d9e0",
            "funcStartAddr": "0x40d9e0",
            "funcEndAddr": "0x40da0b",
            "decompiledFuncCode": "extern char g_61da60;\n\nint sub_40d9e0()\n{\n    void tmp_2;  // tmp #2\n    void tmp_11;  // tmp #11\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long long v3[7];  // rdi\n    unsigned long v4;  // rsi\n    unsigned long v5;  // rdx\n\n    tmp_2 = v2;\n    tmp_11 = v2 == 0;\n    v3 = (v2 == 0? &g_61da60 : v2);\n    *((int *)(tmp_11? &g_61da60 : tmp_2)) = 10;\n    if (v4 != 0 && v5 != 0)\n    {\n        v3[5] = v4;\n        v3[6] = v5;\n        return &g_61da60;\n    }\n    if (v4 == 0 || v5 == 0)\n    {\n        v0 = &g_61da60;\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_40db80",
            "funcStartAddr": "0x40db80",
            "funcEndAddr": "0x40db8a",
            "decompiledFuncCode": "int sub_40db80()\n{\n}\n"
        },
        {
            "funcName": "sub_409600",
            "funcStartAddr": "0x409600",
            "funcEndAddr": "0x409617",
            "decompiledFuncCode": "int sub_409600()\n{\n    unsigned long long v1[2];  // rdi\n    unsigned long long v2[2];  // rsi\n    unsigned long long v3;  // rax\n    char v4;  // al\n\n    if (*(v1) != *(v2))\n    {\n        return 0;\n    }\n    v3 = v2[1];\n    v4 = v1[1] == v2[1];\n    return rax<8>;\n}\n"
        },
        {
            "funcName": "sub_40e860",
            "funcStartAddr": "0x40e860",
            "funcEndAddr": "0x40e8b1",
            "decompiledFuncCode": "int sub_40e860()\n{\n    char v0;  // [bp-0x98]\n    unsigned int v2;  // edi\n    unsigned int v3;  // ebx\n    unsigned int *v4;  // rax\n    unsigned int v6;  // eax\n    char v7;  // al\n\n    v3 = __lxstat(0x1, v2, (unsigned int)&v0);\n    v4 = __errno_location();\n    if (v3 != 0 && *(v4) != 75)\n    {\n        v6 = 0;\n        v7 = *(v4) != 2;\n        return 0 - rax<4>;\n    }\n    if (v3 == 0 || *(v4) == 75)\n    {\n        *(v4) = 17;\n        return -18446744069414584321;\n    }\n}\n"
        },
        {
            "funcName": "sub_40a9a0",
            "funcStartAddr": "0x40a9a0",
            "funcEndAddr": "0x40a9fa",
            "decompiledFuncCode": "int sub_40a9a0()\n{\n    unsigned long long v1;  // rbx\n    unsigned long long v2;  // rcx\n    void *v3;  // rdi\n\n    v1 = (unsigned int)sub_40a940();\n    v2 = malloc(v1 + (char)(v1 == 0) + 1);\n    if (v2 != 0)\n    {\n        v2 = memcpy(v2, v3, v1);\n        if (v1 == 0)\n        {\n            *((char *)v2) = 46;\n            v1 = 1;\n        }\n        *((char *)(v2 + v1)) = 0;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40f3a0",
            "funcStartAddr": "0x40f3a0",
            "funcEndAddr": "0x40f43f",
            "decompiledFuncCode": "int sub_40f3a0()\n{\n    unsigned long long v1[4];  // rdi\n    unsigned long long v2;  // r9\n    unsigned long long v3;  // rdx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // r10\n    char v6;  // al\n    unsigned long long v7;  // ecx\n    unsigned long long v8;  // rax\n    char v9;  // al\n    unsigned long long v10;  // rax\n\n    v2 = v1[1];\n    if (v1[1] - 1073741822 <= 1 || v1[1] <= 999999999)\n    {\n        v3 = v1[3];\n    }\n    if (v1[1] - 1073741822 <= 1 && v1[3] <= 999999999 || v1[1] - 1073741822 <= 1 && v1[3] - 1073741822 <= 1 || v1[1] <= 999999999 && v1[3] <= 999999999 || v1[1] <= 999999999 && v1[3] - 1073741822 <= 1)\n    {\n        v7 = 0;\n        v5 = 0;\n        if (v1[1] - 1073741822 <= 1)\n        {\n            v1[0] = 0;\n            v7 = 0;\n            v5 = 1;\n            v7 = (char)(v2 == 1073741822);\n        }\n        if (v1[3] - 1073741822 <= 1)\n        {\n            v4 = 0;\n            v1[2] = 0;\n            v5 = 1;\n            v6 = v3 == 1073741822;\n            v7 = (unsigned int)(v7 + rax<8>);\n        }\n        v8 = 0;\n        v9 = v7 == 1;\n        v10 = rax<8> + v5;\n        return v10;\n    }\n    *(__errno_location()) = 22;\n    return -18446744069414584321;\n}\n"
        },
        {
            "funcName": "sub_40a920",
            "funcStartAddr": "0x40a920",
            "funcEndAddr": "0x40a938",
            "decompiledFuncCode": "int sub_40a920()\n{\n    unsigned long long v1;  // rax\n\n    v1 = sub_40a9a0();\n    if (v1 != 0)\n    {\n        return v1;\n    }\n    sub_410330(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_413710",
            "funcStartAddr": "0x413710",
            "funcEndAddr": "0x41377f",
            "decompiledFuncCode": "extern unsigned long long g_4182d7;\n\nint sub_413710()\n{\n    char v0;  // [bp-0x1c]\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rbx\n    unsigned long v4;  // rdx\n    unsigned long long|char * v5;  // rbp\n    unsigned long long v6;  // rdi\n    unsigned int *v7;  // r12\n    unsigned long long v9;  // rax\n\n    if (v2 != 0)\n    {\n        v3 = -2;\n        if (v4 != 0)\n        {\n            v7 = v6;\n            v5 = v2;\n        }\n    }\n    else\n    {\n        v5 = &g_4182d7;\n    }\n    if (v2 == 0 || v6 == 0 && v4 != 0)\n    {\n        v7 = &v0;\n    }\n    if (v2 == 0 || v4 != 0)\n    {\n        v3 = mbrtowc((unsigned int)v7, (unsigned int)v5);\n        if (v3 > -3 && sub_413cb0() == 0)\n        {\n            v3 = 1;\n            *(v7) = *(v5);\n        }\n    }\n    v9 = v3;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_40ab10",
            "funcStartAddr": "0x40ab10",
            "funcEndAddr": "0x40ab56",
            "decompiledFuncCode": "int sub_40ab10()\n{\n    unsigned int v0;  // [bp-0x50]\n    unsigned long v1;  // [bp-0x48]\n    unsigned long v2;  // [bp-0x40]\n    unsigned long v3;  // [bp-0x28]\n    unsigned long v5;  // rdx\n    unsigned long long v6;  // rdx\n    char v7;  // sil\n    char *v8;  // rdi\n    unsigned int v9;  // esi\n\n    v3 = v5;\n    v6 = 0;\n    if ((v7 & 64) != 0)\n    {\n        v0 = 16;\n        v6 = (unsigned int)v3;\n        v1 = stack_base + 8;\n        v2 = stack_base + -56;\n    }\n    open(v8, v9, v6);\n    return sub_40eaf0();\n}\n"
        },
        {
            "funcName": "sub_4036b0",
            "funcStartAddr": "0x4036b0",
            "funcEndAddr": "0x403a75",
            "decompiledFuncCode": "extern unsigned int g_415245;\nextern unsigned int g_4153b0;\nextern unsigned int g_4153d8;\nextern unsigned int g_415458;\nextern unsigned int g_415490;\nextern unsigned int g_4154e0;\nextern unsigned int g_415688;\nextern unsigned int g_415740;\nextern unsigned int g_415950;\nextern unsigned int g_415980;\nextern unsigned int g_4159b8;\nextern unsigned int g_415a98;\nextern unsigned int g_415ba0;\nextern unsigned int g_415be8;\nextern unsigned int g_415c08;\nextern unsigned long long stdout;\n\nint sub_4036b0()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long v10;  // [bp-0x38]\n    unsigned long v11;  // [bp-0x30]\n    unsigned long long v12;  // [bp-0x28]\n    unsigned long long v13;  // [bp-0x20]\n    unsigned long v14;  // [bp-0x18]\n    unsigned long v15;  // [bp-0x8]\n    unsigned long v17;  // r12\n    unsigned long v18;  // rbx\n    unsigned long v19;  // rdi\n    unsigned long long v31[2];  // rax\n    char *v32;  // rdi\n    char *v33;  // rsi\n    unsigned long long v34;  // rcx\n    unsigned long long v35;  // cc_dep1\n    unsigned long long v36;  // cc_dep2\n    unsigned long v37;  // d\n    char *v41;  // rax\n    char *v42;  // rax\n    unsigned long long v43;  // rax\n\n    v15 = v17;\n    v14 = v18;\n    if ((unsigned int)v19 != 0)\n    {\n        dcgettext(0x0, 0x4153b0, 0x5);\n        __fprintf_chk();\n    }\n    else\n    {\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x4153d8, 0x5));\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x415458, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x415490, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4154e0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x415688, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x415740, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x415950, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x415980, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4159b8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x415a98, 0x5), stdout);\n        v0 = \"[\";\n        v31 = &v0;\n        v1 = \"test invocation\";\n        v2 = \"coreutils\";\n        v3 = \"Multi-call\";\n        v4 = \"sha224sum\";\n        v5 = \"sha2 utilities\";\n        v6 = \"sha256sum\";\n        v7 = \"sha2 utilities\";\n        v8 = \"sha384sum\";\n        v9 = \"sha2 utilities\";\n        v10 = \"sha512sum\";\n        v11 = \"sha2 utilities\";\n        v12 = 0;\n        v13 = 0;\n        while (true)\n        {\n            v31 = &v2;\n            v32 = v2;\n            if (v2 == 0)\n            {\n                break;\n            }\n            v33 = \"mv\";\n            v34 = 3;\n            if ((v35 > v36) - 0 - (v35 < v36) == 0)\n            {\n                break;\n            }\n            while (v34 != 0)\n            {\n                v34 -= 1;\n                v35 = *(v33);\n                v36 = *(v32);\n                v32 = &v32[v37];\n                v33 = &v33[v37];\n                break;\n            }\n        }\n        if (v31[1] != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x415245, 0x5));\n            v42 = setlocale(0x5, 0x0);\n        }\n        else\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x415245, 0x5));\n            v41 = setlocale(0x5, 0x0);\n            if (v41 != 0)\n            {\n                v43 = strncmp(v41, \"en_\", 0x3);\n            }\n            if (v43 == 0 || v41 == 0)\n            {\n                __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x415be8, 0x5));\n            }\n        }\n        if ((v31[1] == 0 || strncmp(v42, \"en_\", 0x3) != 0) && (v31[1] == 0 || v42 != 0) && (v43 != 0 || v31[1] != 0) && (v41 != 0 || v31[1] != 0))\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x415ba0, 0x5));\n        }\n        if (v31[1] != 0 || v43 != 0 && v41 != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x415be8, 0x5));\n        }\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x415c08, 0x5));\n    }\n    exit(v19); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_40bde0",
            "funcStartAddr": "0x40bde0",
            "funcEndAddr": "0x40c036",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    struct struct_1 *field_48;\n} struct_0;\n\ntypedef struct struct_2 {\n    char padding_0[16];\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    struct struct_3 *field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n} struct_2;\n\ntypedef struct struct_3 {\n    char padding_0[8];\n    unsigned int field_8;\n    unsigned int field_c;\n    char field_10;\n} struct_3;\n\nint sub_40bde0()\n{\n    void tmp_10;  // tmp #10\n    void tmp_19;  // tmp #19\n    unsigned long long v0[2];  // [bp-0x20]\n    unsigned long v2;  // rsi\n    unsigned long long v3;  // rdx\n    unsigned long long *v4;  // r12\n    struct_0 *v5;  // rdi\n    struct_2 *v6;  // rbx\n    unsigned long long v7;  // rdx\n    unsigned long long v9;  // rax\n    uint128_t v10;  // xmm1\n    unsigned int v11;  // ymm1\n    struct_3 *v12;  // rdx\n    uint128_t|unsigned int|unsigned long v13;  // xmm1lq\n    uint128_t v14;  // xmm0\n    unsigned int v15;  // ymm0\n    unsigned long long v16;  // xmm0lq\n    unsigned long long v17;  // rax\n    uint128_t v18;  // xmm0\n    unsigned int v19;  // ymm0\n    unsigned long long v20;  // xmm0lq\n    struct_3 *v22;  // rdx\n    uint128_t v23;  // xmm2\n    unsigned int v24;  // ymm2\n    uint128_t v25;  // xmm0\n    uint128_t v26;  // xmm0\n    unsigned int v27;  // ymm0\n    uint128_t|unsigned int|unsigned long v28;  // xmm1\n    uint128_t v29;  // xmm1\n    unsigned int v30;  // ymm1\n    uint128_t v31;  // xmm0\n    unsigned long long v32;  // rax\n    unsigned long long v33;  // rax\n    unsigned long long v34[2];  // r12\n    unsigned long long v35[2];  // rax\n    unsigned long long v36;  // rdx\n\n    if (v2 != 0)\n    {\n        v4 = v3;\n        v6 = v5;\n        v7 = sub_40b120();\n        if (v7 != 0)\n        {\n            if (v4 != 0)\n            {\n                *(v4) = v7;\n            }\n            return 0;\n        }\n        if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x10<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n        {\n            v13 = 0;\n            v12 = v6->field_28;\n            v13 = v5->field_18;\n            v9 = v6->field_10;\n            v14 = 0;\n            v15 = v9;\n            xmm0<8> = Conv(128->64, (xmm0<16> * Conv(32->128, Load(addr=(rdx<8> + 0x8<64>), size=4, endness=Iend_LE))))\n        }\n        else\n        {\n            v10 = 0;\n            tmp_10 = v6->field_18 % 2 | (unsigned int)v6->field_18 & 1;\n            v9 = v6->field_10;\n            v11 = tmp_10;\n            v12 = v6->field_28;\n            v13 = (unsigned long long)(unsigned int)xmm1<16> * 2;\n            tmp_19 = v9;\n            v17 = (unsigned int)v9 & 1;\n            v18 = 0;\n            v19 = tmp_19 >> 1 | v17;\n            xmm0<8> = Conv(128->64, ((xmm0<16> * 0x2<8>) * Conv(32->128, Load(addr=(rdx<8> + 0x8<64>), size=4, endness=Iend_LE))))\n        }\n        if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n        {\n            sub_40b240();\n            v22 = v6->field_28;\n            v23 = 0;\n            v24 = v6->field_28->field_8;\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x10<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n            {\n                v25 = 0;\n                v25 = (unsigned int)v5->field_10;\n            }\n            else\n            {\n                v26 = 0;\n                v27 = v5->field_10 >> 1 | (unsigned int)v5->field_10 & 1;\n                v25 = xmm0<16> * 2;\n            }\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x10<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n            {\n                v28 = 0;\n                v28 = v5->field_18;\n            }\n            else\n            {\n                v29 = 0;\n                v30 = v5->field_18 >> 1 | (unsigned int)v5->field_18 & 1;\n                v28 = (unsigned long long)(unsigned int)xmm1<16> * 2;\n            }\n            if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n            {\n                xmm0<16> = (xmm0<16> * Conv(32->128, Load(addr=(rdx<8> + 0xc<64>), size=4, endness=Iend_LE)))\n                if (v22->field_10 == 0)\n                {\n                    v31 *= xmm2<16>;\n                }\n                if (((char)(BinaryOp CmpF & 69) & 1) != 0 && ((char)(BinaryOp CmpF & 69) & 1) == 0)\n                {\n                    v32 = sub_40bbe0();\n                    if (v32 != 0)\n                    {\n                        v33 = sub_40b120();\n                    }\n                }\n            }\n        }\n    }\n    if (...)\n    {\n        v34 = v0;\n        if (*(v0) != 0)\n        {\n            v35 = v6->field_48;\n            if (v6->field_48 != 0)\n            {\n                v6->field_48 = v5->field_48->field_8;\n            }\n            else\n            {\n                v35 = malloc(0x10);\n            }\n        }\n        else\n        {\n            v0[0] = v2;\n            v6->field_20 = v6->field_20 + 1;\n            v6->field_18 = v6->field_18 + 1;\n            return 1;\n        }\n    }\n    if (v2 == 0 || ((char)(BinaryOp CmpF & 69) & 1) == 0 && v7 == 0 && (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1 && v32 != 0 && v33 != 0 && (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1 && ((char)(BinaryOp CmpF & 69) & 1) != 0)\n    {\n        abort(); /* do not return */\n    }\n    if (...)\n    {\n        return -18446744069414584321;\n    }\n    if (...)\n    {\n        v36 = v34[1];\n        v35[0] = v2;\n        v35[1] = v36;\n        v34[1] = v35;\n        v6->field_20 = v6->field_20 + 1;\n        return 1;\n    }\n}\n"
        },
        {
            "funcName": "sub_414620",
            "funcStartAddr": "0x414620",
            "funcEndAddr": "0x4148fc",
            "decompiledFuncCode": "extern char g_4145c0;\n\nint sub_414620()\n{\n    void tmp_2;  // tmp #2\n    void tmp_27;  // tmp #27\n    unsigned long long v0;  // [bp-0x50]\n    unsigned int|char v1;  // [bp-0x48]\n    unsigned long long v3;  // rsi\n    unsigned long long v4;  // rbp\n    unsigned long v5;  // rdi\n    unsigned long long *v6;  // rbx\n    void *v7;  // r13\n    unsigned short v8;  // dx\n    unsigned int v9;  // r15d\n    unsigned long long v10;  // r14\n    unsigned long long v12[2];  // rbx\n    unsigned long long v13;  // rbx\n    unsigned long long v15;  // rbp\n    unsigned long long v17;  // r15\n    unsigned long v18;  // rbp\n    char *v20;  // rdi\n    char *v21;  // rsi\n    unsigned long long v22;  // rcx\n    unsigned long v23;  // d\n    unsigned long long v24;  // r14\n    char *v26;  // rsi\n    unsigned long long v27;  // rcx\n    char *v28;  // rdi\n    unsigned long v29;  // rbp\n    unsigned long long v31;  // rsi\n    unsigned long long v33;  // rax\n    unsigned long long v34;  // rdx\n    unsigned long long v35;  // rbp\n    unsigned long v36;  // r14\n    unsigned long long v38;  // rsi\n    unsigned long long v40;  // rax\n    unsigned long long v41;  // rdx\n    unsigned long long v42;  // rbp\n    unsigned long long v44;  // rsi\n    unsigned long long v46;  // rax\n    unsigned long long v47;  // rdx\n    unsigned long long v49;  // rax\n\n    if (v3 != 0)\n    {\n        v4 = v3;\n        if (v5 != 0)\n        {\n            v7 = (unsigned long long)(unsigned int)sub_415060();\n            if (v7 != 0)\n            {\n                v12[0] = v7;\n                v12[1] = &g_4145c0;\n                v12 = (unsigned long long)(unsigned int)sub_4100e0();\n                v12[2] = v5;\n                setvbuf(v7, &v12[3], 0x0, (v4 <= 0x1000? v4 : 0x1000));\n            }\n            else\n            {\n                v13 = 0;\n            }\n        }\n        else\n        {\n            *(v6) = 0;\n            v6 = (unsigned long long)(unsigned int)sub_4100e0();\n            v6[1] = &g_4145c0;\n            v6[2] = 0;\n            v6[3] = 0;\n            v9 = open(\"/dev/urandom\", 0x0, v8);\n            if (v9 >= 0)\n            {\n                v15 = __read_chk(v9, (unsigned int)v6 + 32, (!(rbp<8> <= 0x800)? 0x800 : rbp<8>), 0x1018);\n                close(v9);\n                if (v15 <= 2047)\n                {\n                    tmp_2 = v15;\n                    tmp_27 = (char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>);\n                    v17 = (char *)&v6[4] + ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>)? 0 : v15);\n                    v18 = ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>)? 0 : v15) + (!(0x800 - ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>)? 0 : v15) <= 16)? 16 : 0x800 - ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>)? 0 : v15));\n                    *((int *)&v0) = (!(0x800 - (tmp_27? 0 : tmp_2) <= 16)? 16 : 0x800 - (tmp_27? 0 : tmp_2));\n                    gettimeofday(&v1, NULL);\n                    v20 = v17;\n                    v21 = &v1;\n                    for (v22 = v0; v22 != 0; v21 = &v21[v23])\n                    {\n                        v22 -= 1;\n                        *(v20) = v1;\n                        v20 = &v20[v23];\n                    }\n                    if (v18 <= 2047)\n                    {\n                        v24 = (!(0x800 - rbp<8> <= 4)? 4 : 0x800 - rbp<8>);\n                        v26 = &v1;\n                        v1 = getpid();\n                        v27 = v24;\n                        v10 = v24 + v18;\n                        for (v28 = (char *)&v6[4] + v18; v27 != 0; v26 = &v26[v23])\n                        {\n                            v27 -= 1;\n                            *(v28) = v1;\n                            v28 = &v28[v23];\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v10 = 20;\n                gettimeofday(&v1, NULL);\n                *((int128_t *)(v13 + 32)) = *((int128_t *)&v1);\n                v1 = getpid();\n                *((unsigned int *)(v13 + 48)) = v1;\n            }\n            if (v9 < 0 || v10 <= 2047 && v18 <= 2047 && v15 <= 2047)\n            {\n                v29 = (!(0x800 - r14<8> <= 4)? 4 : 0x800 - r14<8>);\n                v31 = (char *)&v6[4] + v10;\n                v1 = getppid();\n                if ((unsigned int)v29 != 0)\n                {\n                    v33 = 0;\n                    do\n                    {\n                        v34 = v33;\n                        v33 = (unsigned int)v33 + 1;\n                        *((char *)(v31 + v34)) = v1;\n                    }\n                    while ((unsigned int)v33 < (unsigned int)v29);\n                }\n                v35 = v29 + v10;\n                if (v35 <= 2047)\n                {\n                    v36 = (!(0x800 - rbp<8> <= 4)? 4 : 0x800 - rbp<8>);\n                    v38 = (char *)&v6[4] + v35;\n                    v1 = getuid();\n                    if ((unsigned int)v36 != 0)\n                    {\n                        v40 = 0;\n                        do\n                        {\n                            v41 = v40;\n                            v40 = (unsigned int)v40 + 1;\n                            *((char *)(v38 + v41)) = v1;\n                        }\n                        while ((unsigned int)v40 < (unsigned int)v36);\n                    }\n                    v42 = v35 + v36;\n                    if (v42 <= 2047)\n                    {\n                        v44 = (char *)&v6[4] + v42;\n                        v1 = getgid();\n                        if ((unsigned int)(!(0x800 - v42 <= 4)? 4 : 0x800 - v42) != 0)\n                        {\n                            v46 = 0;\n                            do\n                            {\n                                v47 = v46;\n                                v46 = (unsigned int)v46 + 1;\n                                *((char *)(v44 + v47)) = v1;\n                            }\n                            while ((unsigned int)v46 < (!(0x800 - v42 <= 4)? 4 : 0x800 - v42));\n                        }\n                    }\n                }\n            }\n            sub_414d90();\n        }\n    }\n    else\n    {\n        v13 = (unsigned int)sub_4100e0();\n        *((long long *)v13) = 0;\n        *((char **)(v13 + 8)) = &g_4145c0;\n        *((long long *)(v13 + 16)) = 0;\n    }\n    v49 = v13;\n    return v49;\n}\n"
        },
        {
            "funcName": "sub_413bf0",
            "funcStartAddr": "0x413bf0",
            "funcEndAddr": "0x413c64",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned int field_18;\n} struct_0;\n\nint sub_413bf0()\n{\n    void tmp_9;  // tmp #9\n    unsigned long v0;  // [bp-0x8]\n    struct_0 *v2;  // rdi\n    unsigned long long v3;  // rax\n    unsigned long v4;  // rax\n    unsigned long long v5[2];  // rsi\n\n    if (v2->field_18 == 9827862)\n    {\n        v3 = v2->field_10;\n        if (v2->field_10 != 0)\n        {\n            if (v2->field_0 == v5[1] && *(v5) == v2->field_8)\n            {\n                return 1;\n            }\n            if (v2->field_0 != v5[1] || *(v5) != v2->field_8)\n            {\n                v2->field_10 = v2->field_10 + 1;\n                if ((v3 + 1 & v3) != 0)\n                {\n                    return 0;\n                }\n                else if (v2->field_10 + 1 == 0)\n                {\n                    return 1;\n                }\n            }\n        }\n        else\n        {\n            v2->field_10 = 1;\n        }\n        if (v2->field_10 == 0 || (v3 + 1 & v3) == 0 && v2->field_0 != v5[1] && v2->field_10 + 1 != 0 || (v3 + 1 & v3) == 0 && v2->field_10 + 1 != 0 && *(v5) != v2->field_8)\n        {\n            tmp_9 = *(v5);\n            *((unsigned long long [2])&v2->field_0) = v5[1];\n            v2->field_8 = tmp_9;\n            return 0;\n        }\n    }\n    else\n    {\n        v0 = v4;\n        __assert_fail(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_4103c0",
            "funcStartAddr": "0x4103c0",
            "funcEndAddr": "0x4103e1",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[72];\n    unsigned int field_48;\n} struct_0;\n\nint sub_4103c0()\n{\n    unsigned long long v1;  // rax\n    struct_0 *v2;  // rdi\n\n    v1 = 1;\n    if (((char)v2->field_48 & 17) != 16)\n    {\n        v1 = 0;\n    }\n    if (((char)v2->field_48 & 17) == 16 || ((char)v2->field_48 & 17) != 17)\n    {\n        return v1;\n    }\n    if (((char)v2->field_48 & 17) == 17)\n    {\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_40b8c0",
            "funcStartAddr": "0x40b8c0",
            "funcEndAddr": "0x40ba40",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned int field_8;\n    char padding_c[4];\n    char field_10;\n} struct_0;\n\nextern int512_t g_40b0d0;\nextern int512_t g_40b0e0;\nextern int512_t g_416f10;\n\nint sub_40b8c0()\n{\n    unsigned long long v1;  // rbx\n    struct_0 *v2;  // rsi\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rax\n    uint128_t|void v5;  // xmm1\n    uint128_t v6;  // xmm0\n    unsigned int v8;  // ymm1\n    uint128_t v9;  // xmm0\n    unsigned long v10;  // rdi\n    unsigned int v11;  // ymm0\n    void v12;  // xmm0\n    unsigned long v13;  // rbp\n    unsigned long long v14;  // rax\n    unsigned long v16;  // rdx\n    unsigned long v17;  // rcx\n    unsigned long v18;  // r8\n    unsigned long long v19;  // rdi\n    unsigned long long v20;  // rax\n\n    v1 = malloc(0x50);\n    if (v1 != 0)\n    {\n        if (v2 != 0)\n        {\n            *((struct_0 **)(v1 + 40)) = v2;\n            v4 = sub_40b240();\n            if (v4 != 0 && v2->field_10 == 0)\n            {\n                v5 = 0;\n                v8 = v2->field_8;\n            }\n        }\n        else\n        {\n            *((long long **)(v1 + 40)) = &g_416f10;\n            v3 = sub_40b240();\n            v5 = 0;\n            v8 = 6881500231684115661;\n        }\n        if ((v2 == 0 || v2->field_10 == 0) && (v2 == 0 || v4 != 0) && (v2 != 0 || v3 != 0))\n        {\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n            {\n                v6 = 0;\n                v6 = (unsigned int)v10;\n            }\n            else\n            {\n                v9 = 0;\n                v11 = v10 % 2 | (unsigned long long)((unsigned int)v10 & 1);\n                v6 = xmm0<16> * 2;\n            }\n            v12 = v6 / v5;\n        }\n        if ((v2 == 0 || v4 != 0) && (((char)(BinaryOp CmpF & 69) & 1) == 0 || v2 != 0) && (((char)(BinaryOp CmpF & 69) & 1) == 0 || v2->field_10 != 0) && (v2 != 0 || v3 != 0) && (v2 != 0 || ((char)(BinaryOp CmpF & 69) & 1) != 0) && (v2->field_10 != 0 || ((char)(BinaryOp CmpF & 69) & 1) != 0))\n        {\n            v13 = (unsigned int)sub_40b030();\n            if (((char)(v13 >> 60) & 1) == 0 && [D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>) == 0)\n            {\n                *((unsigned long *)(v1 + 16)) = v13;\n                if (v13 != 0)\n                {\n                    v14 = calloc(v13, 0x10);\n                    *((unsigned long long *)v1) = v14;\n                    if (v14 != 0)\n                    {\n                        *((long long *)(v1 + 24)) = 0;\n                        *((long long *)(v1 + 32)) = 0;\n                        *((unsigned long long *)(v1 + 8)) = v13 * 16 + v14;\n                        *((int *)(v1 + 48)) = (v16 == 0? &g_40b0d0 : v16);\n                        *((int *)(v1 + 56)) = (v17 == 0? &g_40b0e0 : v17);\n                        *((unsigned long *)(v1 + 64)) = v18;\n                        *((long long *)(v1 + 72)) = 0;\n                    }\n                }\n            }\n        }\n        if (...)\n        {\n            v19 = v1;\n            v1 = 0;\n            free(v19);\n        }\n    }\n    v20 = v1;\n    return v20;\n}\n"
        },
        {
            "funcName": "sub_40dfd0",
            "funcStartAddr": "0x40dfd0",
            "funcEndAddr": "0x40dfe6",
            "decompiledFuncCode": "int sub_40dfd0()\n{\n}\n"
        },
        {
            "funcName": "sub_410a80",
            "funcStartAddr": "0x410a80",
            "funcEndAddr": "0x410aa9",
            "decompiledFuncCode": "int sub_410a80()\n{\n    unsigned long long v1;  // rax\n\n    while (true)\n    {\n        v1 = sub_413d70();\n        if (v1 == 0)\n        {\n            close(sub_413dc0());\n        }\n        else\n        {\n            return v1;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_4137f0",
            "funcStartAddr": "0x4137f0",
            "funcEndAddr": "0x4137fa",
            "decompiledFuncCode": "int sub_4137f0()\n{\n}\n"
        },
        {
            "funcName": "sub_409e80",
            "funcStartAddr": "0x409e80",
            "funcEndAddr": "0x409f5b",
            "decompiledFuncCode": "int sub_409e80()\n{\n    unsigned long v1;  // rdi\n    unsigned long v3;  // rsi\n    char *v4;  // r12\n    unsigned int *v5;  // rax\n    unsigned long long v6;  // rdi\n    void *v7;  // rax\n    char *v8;  // rbp\n    unsigned long long v9;  // rbx\n\n    v9 = (1025 <= v3? 1025 : v3 + 1);\n    while (true)\n    {\n        v7 = malloc(v9);\n        v8 = v7;\n        if (v7 == 0)\n        {\n            break;\n        }\n        while (true)\n        {\n            v4 = (unsigned long long)readlink(v1, (unsigned int)v7, v9);\n            if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, r12<8>, 0x0<64>, cc_ndep<8>))\n            {\n                v5 = __errno_location();\n                if (*(v5) != 34)\n                {\n                    free(v8);\n                }\n            }\n            if (*(v5) == 34 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, r12<8>, 0x0<64>, cc_ndep<8>)))\n            {\n                if (v9 <= v4)\n                {\n                    free(v8);\n                    if (v9 <= 4611686018427387903)\n                    {\n                        v9 *= 2;\n                        v6 = v9;\n                        v7 = malloc(v6);\n                        v8 = v7;\n                        if (v7 == 0)\n                        {\n                            break;\n                        }\n                    }\n                    else if (v9 <= 9223372036854775806)\n                    {\n                        v9 = 9223372036854775807;\n                    }\n                    else\n                    {\n                        *(__errno_location()) = 12;\n                    }\n                }\n                else\n                {\n                    *((char *)(v8 + v4)) = 0;\n                }\n            }\n        }\n        if (v9 <= 9223372036854775806 && v9 <= v4 && v9 > 4611686018427387903 && (*(v5) == 34 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, r12<8>, 0x0<64>, cc_ndep<8>))))\n        {\n            v7 = malloc(v9);\n        }\n        else if (v9 <= 4611686018427387903 || v9 > 9223372036854775806 || v9 > v4 || (char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, r12<8>, 0x0<64>, cc_ndep<8>) && *(v5) != 34)\n        {\n            return stack_base + 0;\n        }\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_40dc30",
            "funcStartAddr": "0x40dc30",
            "funcEndAddr": "0x40dc41",
            "decompiledFuncCode": "int sub_40dc30()\n{\n}\n"
        },
        {
            "funcName": "sub_40e8f0",
            "funcStartAddr": "0x40e8f0",
            "funcEndAddr": "0x40e90d",
            "decompiledFuncCode": "int sub_40e8f0()\n{\n    __assert_fail(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_40a7d0",
            "funcStartAddr": "0x40a7d0",
            "funcEndAddr": "0x40a7d8",
            "decompiledFuncCode": "extern char g_61d930;\n\nint sub_40a7d0()\n{\n    char v1;  // dil\n    unsigned long v2;  // rax\n\n    g_61d930 = v1;\n    return v2;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Angr",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_mv.elf"
}