{
    "funcInfo": [
        {
            "funcName": "sub_4091c0",
            "funcStartAddr": "0x4091c0",
            "funcEndAddr": "0x409278",
            "decompiledFuncCode": "int sub_4091c0()\n{\n    unsigned int v0;  // [bp-0xa0]\n    void tmp_12;  // tmp #12\n    void tmp_8;  // tmp #8\n    unsigned long v1;  // [bp-0x98]\n    unsigned long long v2;  // [bp-0x90]\n    unsigned long v3;  // [bp-0x88]\n    unsigned long long v4;  // [bp-0x18]\n    unsigned long v5;  // [bp-0x10]\n    unsigned long long v6;  // [bp+0x8]\n    char v7;  // [bp+0x10]\n    unsigned long long v8;  // r11\n    unsigned long long v9;  // r8\n    unsigned long v10;  // r9\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // r8\n    unsigned long long|unsigned long long * v14;  // r10\n    unsigned long long v15;  // r9\n\n    v8 = 0;\n    v4 = v9;\n    v14 = &v6;\n    v13 = 32;\n    v1 = &v6;\n    v5 = v10;\n    v15 = 0;\n    v0 = 32;\n    v2 = stack_base + -56;\n    while (true)\n    {\n        if ((unsigned int)v13 <= 47)\n        {\n            tmp_12 = v13;\n            v13 = (unsigned int)v13 + 8;\n            v8 = 1;\n            v11 = v4;\n            v3 = v4;\n        }\n        else\n        {\n            tmp_8 = v14;\n            v14 = &v7;\n            v12 = v6;\n            v3 = v6;\n        }\n        if ((unsigned int)v13 <= 47 && v11 != 0 || v12 != 0 && (unsigned int)v13 > 47)\n        {\n            v15 += 1;\n        }\n        if (v8 != 0)\n        {\n            v0 = v13;\n        }\n        return sub_408d60();\n    }\n}\n"
        },
        {
            "funcName": "sub_40880b",
            "funcStartAddr": "0x40880b",
            "funcEndAddr": "0x4088d1",
            "decompiledFuncCode": "int sub_40880b()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long v1;  // [bp-0x50]\n    unsigned long v2;  // [bp-0x48]\n    unsigned int v3;  // [bp-0x2c]\n    unsigned long v4;  // [bp-0x28]\n    unsigned long v5;  // [bp-0x20]\n    unsigned long v6;  // [bp-0x18]\n    unsigned long v7;  // [bp-0x10]\n    unsigned long long v8;  // [bp+0x0]\n    unsigned long long v10;  // [bp+0x10]\n    unsigned long long v11;  // [bp+0x18]\n    unsigned long long v12;  // [bp+0x20]\n    unsigned long long v13;  // [bp+0x28]\n    unsigned long v14;  // rcx\n    unsigned long v15;  // rax\n    unsigned long long v17[7];  // rbx\n    unsigned int *v18;  // r13\n    unsigned long long *v20;  // r12\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // r12\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r14\n    unsigned long long v25;  // r15\n\n    v17 = (v14 == 0? v15 : rbx<8>);\n    v18 = __errno_location();\n    v3 = *(v18);\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = &v17[1];\n    v6 = &v17[1];\n    v7 = (unsigned int)sub_4072b0();\n    v5 = v7 + 1;\n    v4 = (unsigned int)sub_409300();\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = v6;\n    sub_4072b0();\n    *(v18) = v3;\n    if (v20 != 0)\n    {\n        *(v20) = v7;\n    }\n    v21 = v8;\n    v22 = v10;\n    v23 = v11;\n    v24 = v12;\n    v25 = v13;\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_40c640",
            "funcStartAddr": "0x40c640",
            "funcEndAddr": "0x40c757",
            "decompiledFuncCode": "int sub_40c640() { crash_skku;\n}"
        },
        {
            "funcName": "sub_405920",
            "funcStartAddr": "0x405920",
            "funcEndAddr": "0x4070a6",
            "decompiledFuncCode": "int sub_405920() { crash_skku;\n}"
        },
        {
            "funcName": "sub_4089c0",
            "funcStartAddr": "0x4089c0",
            "funcEndAddr": "0x4089d6",
            "decompiledFuncCode": "int sub_4089c0()\n{\n}\n"
        },
        {
            "funcName": "sub_4026b0",
            "funcStartAddr": "0x4026b0",
            "funcEndAddr": "0x402708",
            "decompiledFuncCode": "extern unsigned int g_614298;\nextern char g_6142b4;\nextern unsigned long long g_614478;\n\nint sub_4026b0()\n{\n    unsigned long long v1;  // rax\n    unsigned int v2[13];  // rdx\n\n    v1 = g_614298;\n    v2 = g_614478;\n    if (g_614298 != 0)\n    {\n        v1 = 0;\n        do\n        {\n            if (v2[2] <= 1 || v2[6] > 0 && g_6142b4 != 0 && v2[5 + 1] > 0)\n            {\n                v1 = (unsigned int)v1 + 1;\n            }\n            v2 = &v2[8];\n        }\n        while (v2 != ((unsigned long long)g_614298 << 6) + g_614478);\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_408770",
            "funcStartAddr": "0x408770",
            "funcEndAddr": "0x4087e2",
            "decompiledFuncCode": "extern int512_t g_6145a0;\n\nint sub_408770()\n{\n    unsigned long v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned long v2;  // [bp-0x58]\n    unsigned long v3;  // [bp-0x40]\n    unsigned int v5;  // [bp+0x100008]\n    unsigned long v6;  // r8\n    unsigned long long v7[7];  // rbx\n    unsigned long v8;  // rcx\n\n    v7 = (v6 == 0? &g_6145a0 : v6);\n    v3 = v8;\n    *((unsigned long long [7])&v2) = v7[6];\n    *((unsigned long long [7])&v1) = v7[5];\n    v0 = &v7[1];\n    *(__errno_location()) = v5;\n    return sub_4072b0();\n}\n"
        },
        {
            "funcName": "sub_4088e0",
            "funcStartAddr": "0x4088e0",
            "funcEndAddr": "0x4088ea",
            "decompiledFuncCode": "int sub_4088e0()\n{\n}\n"
        },
        {
            "funcName": "sub_40abe0",
            "funcStartAddr": "0x40abe0",
            "funcEndAddr": "0x40ac1b",
            "decompiledFuncCode": "int sub_40abe0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned int *v3;  // rdi\n\n    v0 = v2;\n    if (v3 != 0 && __freading() != 0 && ((unsigned short)*(v3) & 0x100) != 0)\n    {\n        sub_40ac20();\n    }\n}\n"
        },
        {
            "funcName": "sub_40be60",
            "funcStartAddr": "0x40be60",
            "funcEndAddr": "0x40be6c",
            "decompiledFuncCode": "int sub_40be60()\n{\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rax\n\n    if (v1 == 1)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_407110",
            "funcStartAddr": "0x407110",
            "funcEndAddr": "0x4071a9",
            "decompiledFuncCode": "extern unsigned long long __progname_full;\nextern unsigned long long g_614490;\nextern unsigned long long program_invocation_short_name;\nextern unsigned long long stderr;\n\nint sub_407110()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // r8\n    unsigned long long v6;  // cc_dep1\n    unsigned long long v7;  // cc_dep2\n    unsigned long v8;  // d\n    char *v9;  // rdi\n    char *v10;  // rsi\n    unsigned long long v11;  // rcx\n    char *v13;  // rdi\n    unsigned long long v14;  // rcx\n    char *v15;  // rsi\n    unsigned long long v16;  // cc_dep1\n    unsigned long long v17;  // cc_dep2\n\n    if (v1 != 0)\n    {\n        v3 = v1;\n        v4 = strrchr();\n        if (v4 != 0)\n        {\n            v5 = v4 + 1;\n            if (v4 + 1 - v1 > 6)\n            {\n                v10 = v4 - 6;\n                v9 = \"/.libs/\";\n                v11 = 7;\n                while (v11 != 0)\n                {\n                    v11 -= 1;\n                    v6 = *(v10);\n                    v7 = *(v9);\n                    v9 = &v9[v8];\n                    v10 = &v10[v8];\n                    break;\n                }\n                if ((v6 > v7) - 0 - (v6 < v7) == 0)\n                {\n                    v13 = \"lt-\";\n                    v14 = 3;\n                    v15 = v5;\n                    v3 = v5;\n                    while (v14 != 0)\n                    {\n                        v14 -= 1;\n                        v16 = *(v15);\n                        v17 = *(v13);\n                        v13 = &v13[v8];\n                        v15 = &v15[v8];\n                        break;\n                    }\n                    if ((v16 > v17) - 0 - (v16 < v17) == 0)\n                    {\n                        v3 = v4 + 4;\n                        program_invocation_short_name = v4 + 4;\n                    }\n                }\n            }\n        }\n        g_614490 = v3;\n        __progname_full = v3;\n        return v4;\n    }\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 0x1, 0x37, stderr);\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_402820",
            "funcStartAddr": "0x402820",
            "funcEndAddr": "0x40290f",
            "decompiledFuncCode": "extern unsigned long long g_614290;\nextern unsigned long long g_614418;\n\nint sub_402820()\n{\n    char *v0;  // [bp-0x40]\n    unsigned long long v1;  // [bp-0x38]\n    unsigned long long v2;  // [bp-0x30]\n    unsigned long long v4;  // rax\n    char *v5;  // rdi\n    unsigned long v6;  // rdx\n    unsigned long long v7;  // rax\n    unsigned long long v8;  // rax\n\n    v2 = -1;\n    v4 = sub_40a5e0();\n    if ((v4 & -3) == 0)\n    {\n        v5 = v0;\n        if (v0 != v6 && v1 != 0)\n        {\n            v7 = *(v5);\n            if (*(v5) == 58)\n            {\n                v8 = sub_40a5e0();\n                if (v8 == 0 && v2 >= v1 && v0 != &v0[1])\n                {\n                    v7 = *(v0);\n                }\n            }\n            if ((v8 == 0 || *(v5) != 58) && (v2 >= v1 || *(v5) != 58) && (*(v5) != 58 || v0 != &v0[1]) && v7 == 0)\n            {\n                g_614418 = v1;\n                g_614290 = v2;\n                return 1;\n            }\n        }\n        if ((v8 == 0 || v1 == 0 || v0 == v6 || *(v5) != 58) && (v1 == 0 || v0 == v6 || *(v5) == 58 || v7 != 0) && (v1 == 0 || v2 < v1 || v0 == v6 || v0 == &v0[1] || v7 != 0))\n        {\n            return 0;\n        }\n    }\n    if ((v4 & -3) != 0 || *(v5) == 58 && v8 != 0 && v1 != 0 && v0 != v6)\n    {\n        sub_40a550(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_408ce0",
            "funcStartAddr": "0x408ce0",
            "funcEndAddr": "0x408cea",
            "decompiledFuncCode": "int sub_408ce0()\n{\n}\n"
        },
        {
            "funcName": "sub_408990",
            "funcStartAddr": "0x408990",
            "funcEndAddr": "0x4089a1",
            "decompiledFuncCode": "int sub_408990()\n{\n}\n"
        },
        {
            "funcName": "sub_409590",
            "funcStartAddr": "0x409590",
            "funcEndAddr": "0x409665",
            "decompiledFuncCode": "int sub_409590()\n{\n    unsigned long v0;  // [bp-0x40]\n    unsigned long v1;  // [bp+0x8]\n    unsigned long v3;  // rdx\n    unsigned int v4;  // ebp\n    unsigned long v5;  // rcx\n    unsigned int *v6;  // r14\n\n    if (rbp<4> == 0)\n    {\n        if (v0 >= v3 && v0 <= v5)\n        {\n            return v0;\n        }\n        if (v0 < v3 || v0 > v5)\n        {\n            v6 = __errno_location();\n            if (v0 <= 1073741823)\n            {\n                *(v6) = (v0 <= -1073741825? 75 : 34);\n            }\n        }\n    }\n    else\n    {\n        rbp<4> = sub_4096b0();\n        v6 = __errno_location();\n        if (v4 != 1 && v4 == 3)\n        {\n            *(v6) = 0;\n        }\n    }\n    if (v0 < v3 || rbp<4> != 0 || v0 > v5)\n    {\n        if ((v4 == 1 || rbp<4> == 0) && (rbp<4> != 0 || v0 > 1073741823))\n        {\n            *(v6) = 75;\n        }\n        sub_408d30();\n        error(((int)v1 == 0? 1 : (int)v1), (*(v6) == 22? 0 : *(v6)), \"%s: \");\n    }\n}\n"
        },
        {
            "funcName": "sub_4086e0",
            "funcStartAddr": "0x4086e0",
            "funcEndAddr": "0x408713",
            "decompiledFuncCode": "extern int512_t g_6145a0;\n\nint sub_4086e0()\n{\n    void tmp_2;  // tmp #2\n    void tmp_52;  // tmp #52\n    void tmp_123;  // tmp #123\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long long v3;  // rcx\n    unsigned long long v5;  // rsi\n    unsigned long v6;  // rdx\n\n    tmp_2 = v1;\n    tmp_52 = v1 == 0;\n    v3 = (unsigned int)v2 & 31;\n    v5 = (unsigned int)*((int *)((tmp_52? &g_6145a0 : tmp_2) + v2 % 32 * 4 + 8));\n    tmp_123 = ((unsigned int)v6 ^ (unsigned int)(v5 >> (v3 & 31))) & 1;\n    *((unsigned int *)((v1 == 0? &g_6145a0 : v1) + v2 % 32 * 4 + 8)) = (unsigned int)(tmp_123 << (v3 & 31)) ^ (unsigned int)v5;\n    return (unsigned int)(v5 >> (v3 & 31)) & 1;\n}\n"
        },
        {
            "funcName": "sub_409280",
            "funcStartAddr": "0x409280",
            "funcEndAddr": "0x4092f4",
            "decompiledFuncCode": "extern unsigned int g_410172;\nextern unsigned int g_41019d;\nextern unsigned int g_4103d0;\n\nint sub_409280()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x410172, 0x5));\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x41019d, 0x5));\n    dcgettext(0x0, 0x4103d0, 0x5);\n}\n"
        },
        {
            "funcName": "sub_408a70",
            "funcStartAddr": "0x408a70",
            "funcEndAddr": "0x408ad9",
            "decompiledFuncCode": "int sub_408a70()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_4084e0();\n}\n"
        },
        {
            "funcName": "sub_408680",
            "funcStartAddr": "0x408680",
            "funcEndAddr": "0x4086b4",
            "decompiledFuncCode": "int sub_408680()\n{\n    unsigned int v1;  // [bp+0x100008]\n\n    *(__errno_location()) = v1;\n    return sub_409500();\n}\n"
        },
        {
            "funcName": "sub_403c80",
            "funcStartAddr": "0x403c80",
            "funcEndAddr": "0x403d63",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned int field_10;\n    char padding_14[37];\n    char field_39;\n} struct_0;\n\nextern unsigned int g_40ce53;\nextern char g_6143e1;\nextern unsigned int g_6143e4;\nextern char g_614420;\nextern char g_614446;\nextern unsigned long long stdin;\n\nint sub_403c80()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v3;  // rsi\n    struct_0 *v4;  // rbx\n    unsigned long long v5;  // cc_dep1\n    unsigned long long v6;  // cc_dep2\n    unsigned long v7;  // d\n    char *v8;  // rdi\n    char *v9;  // rsi\n    unsigned long long v10;  // rcx\n    unsigned long long v11;  // cc_dep1\n    unsigned long long v12;  // rdi\n    unsigned long long v14;  // rbp\n\n    v10 = 2;\n    v8 = \"-\";\n    v4 = v3;\n    v9 = v1;\n    while (v10 != 0)\n    {\n        v10 -= 1;\n        v5 = *(v9);\n        v6 = *(v8);\n        v8 = &v8[v7];\n        v9 = &v9[v7];\n        break;\n    }\n    v11 = (v5 > v6) - 0 - (v5 < v6);\n    if ((char)v11 == 0)\n    {\n        g_614446 = 1;\n        v4->field_8 = dcgettext(0x0, 0x40ce53, 0x5);\n        v4->field_0 = stdin;\n    }\n    else\n    {\n        v4->field_8 = v9;\n        v12 = (unsigned int)sub_4054b0();\n        v4->field_0 = v12;\n    }\n    if ((char)v11 == 0 && stdin != 0 || (char)v11 != 0 && v12 != 0)\n    {\n        sub_405480();\n        v4->field_10 = 0;\n        v4->field_39 = 0;\n        g_6143e4 = g_6143e4 + 1;\n        return 1;\n    }\n    if ((char)v11 == 0 && stdin == 0 || v12 == 0 && (char)v11 != 0)\n    {\n        g_614420 = 1;\n        if (g_6143e1 != 0)\n        {\n            return 0;\n        }\n        v14 = (unsigned int)sub_408bb0();\n        error(0x0, *(__errno_location()), \"%s\");\n        return (unsigned long long)g_6143e1;\n    }\n}\n"
        },
        {
            "funcName": "sub_4055f0",
            "funcStartAddr": "0x4055f0",
            "funcEndAddr": "0x405686",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[20];\n    char field_14;\n} struct_0;\n\nint sub_4055f0()\n{\n    struct_0 *v1;  // rsi\n    char *v2;  // rcx\n    char *v3;  // rsi\n    unsigned long long v7;  // rdi\n    unsigned long long v8;  // rdx\n    unsigned long long v9;  // rcx\n\n    v2 = &v1->field_14;\n    v1->field_14 = 0;\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        do\n        {\n            v2 = &v2[-1];\n            v8 = v8 * 14757395258967641293 >> 64 >> 3;\n            *(v2) = (unsigned int)(v8 - (v8 * 14757395258967641293 >> 64 >> 3) * 10) + 48;\n        }\n        while (v8 != 0);\n        return v2;\n    }\n    while (true)\n    {\n        v3 = &v2[-1];\n        v7 = ((unsigned long long)(rdi<8> * 7378697629483820647 >> 64) >> 2) - (rdi<8> >> 63);\n        *((unsigned long long *)&v2[-1]) = 48 + (((unsigned long long)(rdi<8> * 7378697629483820647 >> 64) >> 2) - (rdi<8> >> 63)) * 10 - rdi<8>;\n        if (((unsigned long long)(rdi<8> * 7378697629483820647 >> 64) >> 2) - (rdi<8> >> 63) == 0)\n        {\n            break;\n        }\n        v2 = v3;\n    }\n    v9 = &v2[-2];\n    v2[-1] = 45;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_40cd00",
            "funcStartAddr": "0x40cd00",
            "funcEndAddr": "0x40cd1c",
            "decompiledFuncCode": "int sub_40cd00()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    tzset();\n}\n"
        },
        {
            "funcName": "sub_402ee0",
            "funcStartAddr": "0x402ee0",
            "funcEndAddr": "0x402fd8",
            "decompiledFuncCode": "extern unsigned int g_40ce17;\nextern unsigned int g_40ce2c;\nextern int512_t g_40ce63;\nextern unsigned int g_6143a0;\nextern unsigned long long g_6143a8;\nextern unsigned long long g_6143b0;\nextern unsigned long long g_614408;\nextern unsigned int g_614428;\nextern unsigned int g_61442c;\nextern char g_614448;\n\nint sub_402ee0()\n{\n    unsigned long v0;  // [bp-0x168]\n    unsigned long v1;  // [bp-0x160]\n    unsigned long v2;  // [bp-0x158]\n    unsigned long v3;  // [bp-0x150]\n    unsigned long v4;  // [bp-0x148]\n    char v5;  // [bp-0x138]\n    unsigned int v9;  // r9d\n    unsigned long long v10;  // rbx\n\n    g_614428 = 0;\n    sub_402ca0();\n    sub_402d10();\n    if (g_614408 != 0)\n    {\n        __sprintf_chk((unsigned int)&v5, 0x1, 0x114, dcgettext(0x0, 0x40ce2c, 0x5), g_614408, v9);\n        v10 = g_6143a0;\n        v4 = &v5;\n        v3 = \" \";\n        v2 = ((unsigned int)(v10 - (unsigned int)sub_405850()) < 0? 0 : (unsigned int)(v10 - (unsigned int)sub_405850())) - (unsigned int)((long long)((unsigned int)(v10 - (unsigned int)sub_405850()) < 0? 0 : (unsigned int)(v10 - (unsigned int)sub_405850())) >> 1);\n        v1 = g_6143a8;\n        v0 = \" \";\n        g_614448 = 0;\n        g_614428 = 0;\n        return __printf_chk(0x1, \"\\n\\n%*s%s%*s%s%*s%s\\n\\n\\n\", g_61442c, &g_40ce63, (unsigned int)g_6143b0);\n    }\n    error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40ce17, 0x5));\n}\n"
        },
        {
            "funcName": "sub_408c20",
            "funcStartAddr": "0x408c20",
            "funcEndAddr": "0x408c8c",
            "decompiledFuncCode": "extern uint128_t g_6145a0;\nextern uint128_t g_6145b0;\nextern uint128_t g_6145c0;\nextern unsigned long long g_6145d0;\n\nint sub_408c20()\n{\n    unsigned int|void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x20]\n    unsigned long v4;  // [bp-0x18]\n    unsigned long v6;  // rsi\n    unsigned long v7;  // rdx\n\n    *((uint128_t *)&v0) = g_6145a0;\n    *((uint128_t *)&v1) = g_6145b0;\n    *((uint128_t *)&v2) = g_6145c0;\n    v4 = g_6145d0;\n    v0 = 10;\n    if (v6 != 0 && v7 != 0)\n    {\n        v3 = v6;\n        v4 = v7;\n        return sub_4084e0();\n    }\n    if (v7 == 0 || v6 == 0)\n    {\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_4089e0",
            "funcStartAddr": "0x4089e0",
            "funcEndAddr": "0x4089f2",
            "decompiledFuncCode": "int sub_4089e0()\n{\n}\n"
        },
        {
            "funcName": "sub_40c050",
            "funcStartAddr": "0x40c050",
            "funcEndAddr": "0x40c478",
            "decompiledFuncCode": "int sub_40c050() { crash_skku;\n}"
        },
        {
            "funcName": "sub_408af0",
            "funcStartAddr": "0x408af0",
            "funcEndAddr": "0x408aff",
            "decompiledFuncCode": "int sub_408af0()\n{\n}\n"
        },
        {
            "funcName": "sub_403280",
            "funcStartAddr": "0x403280",
            "funcEndAddr": "0x4033f0",
            "decompiledFuncCode": "extern unsigned int g_614298;\nextern char g_6142b5;\nextern char g_6143d0;\nextern unsigned int g_6143d4;\nextern unsigned int g_6143dc;\nextern char g_6143e0;\nextern unsigned int g_614428;\nextern unsigned int g_61442c;\nextern unsigned int g_614430;\nextern char g_614448;\nextern unsigned long long g_614450;\nextern unsigned long long g_614458;\nextern unsigned long long g_614470;\nextern unsigned int g_614478[13];\n\nint sub_403280()\n{\n    unsigned int v1[14];  // rdi\n    unsigned int v2[14];  // r13\n    unsigned int *v3;  // r12\n    unsigned int v5[13];  // rax\n    unsigned long long v8;  // rbx\n    unsigned int v10;  // eax\n\n    v2 = v1;\n    v3 = (long long)(int)v1[5];\n    g_6143d0 = 1;\n    v1[5] = (unsigned int)v3 + 1;\n    v8 = *((int *)(g_614458 + v3 * 4)) + g_614470;\n    if (g_614448 != 0)\n    {\n        sub_402ee0();\n    }\n    if (v1[2] == 1)\n    {\n        if (g_614298 > 0)\n        {\n            v5 = g_614478;\n            do\n            {\n                v5[2] = 2;\n                v5 = &v5[8];\n            }\n            while (v5 != &g_614478[8 * (unsigned long long)g_614298]);\n        }\n        if (g_614478[6] <= 0 && g_6142b5 == 0)\n        {\n            g_6143d0 = 0;\n        }\n    }\n    if (g_614478[6] > 0 || v1[2] != 1)\n    {\n        if (g_6143dc < g_6143d4)\n        {\n            sub_402ca0();\n            g_6143d4 = 0;\n        }\n        if (g_6143e0 != 0)\n        {\n            sub_402dd0();\n        }\n        if (*((int *)(g_614458 + (v3 << 2))) + g_614470 != g_614470 + *((int *)(g_614458 + (v3 << 2) + 4)))\n        {\n            while (true)\n            {\n                v8 += 1;\n                sub_4031e0();\n                if (g_614470 + *((int *)(g_614458 + (v3 << 2) + 4)) == v8)\n                {\n                    break;\n                }\n            }\n        }\n        if (g_614430 == 0)\n        {\n            v10 = v2[6 + 1] - g_6143dc;\n            g_614428 = *((int *)(g_614450 + v3 * 4)) + v2[6 + 1];\n            if (v10 == g_61442c)\n            {\n                g_614428 = *((int *)(g_614450 + (int)v1[5] * 4)) + v1[6 + 1] - g_6143dc;\n                return 1;\n            }\n        }\n    }\n    if (g_614430 != 0 || v10 != g_61442c || g_614478[6] <= 0 && v1[2] == 1)\n    {\n        return 1;\n    }\n}\n"
        },
        {
            "funcName": "sub_40ba50",
            "funcStartAddr": "0x40ba50",
            "funcEndAddr": "0x40babf",
            "decompiledFuncCode": "extern unsigned long long g_40ce63;\n\nint sub_40ba50()\n{\n    char v0;  // [bp-0x1c]\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rbx\n    unsigned long v4;  // rdx\n    unsigned long long|char * v5;  // rbp\n    unsigned long long v6;  // rdi\n    unsigned int *v7;  // r12\n    unsigned long long v9;  // rax\n\n    if (v2 != 0)\n    {\n        v3 = -2;\n        if (v4 != 0)\n        {\n            v7 = v6;\n            v5 = v2;\n        }\n    }\n    else\n    {\n        v5 = &g_40ce63;\n    }\n    if (v2 == 0 || v6 == 0 && v4 != 0)\n    {\n        v7 = &v0;\n    }\n    if (v2 == 0 || v4 != 0)\n    {\n        v3 = mbrtowc((unsigned int)v7, (unsigned int)v5);\n        if (v3 > -3 && sub_405590() == 0)\n        {\n            v3 = 1;\n            *(v7) = *(v5);\n        }\n    }\n    v9 = v3;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_40bf30",
            "funcStartAddr": "0x40bf30",
            "funcEndAddr": "0x40c035",
            "decompiledFuncCode": "int sub_40bf30()\n{\n    unsigned long long v0;  // [bp-0x60]\n    char v1;  // [bp-0x58]\n    unsigned int v2;  // [bp-0x54]\n    unsigned int v3;  // [bp-0x50]\n    unsigned int v4;  // [bp-0x4c]\n    unsigned int v5;  // [bp-0x48]\n    unsigned int v6;  // [bp-0x44]\n    unsigned int v7;  // [bp-0x38]\n    unsigned int v9[9];  // rsi\n    unsigned long v11;  // rdi\n    unsigned long long v12;  // r12\n    unsigned long long v13;  // rax\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // rax\n\n    if (v11 != 0)\n    {\n        v12 = (unsigned int)sub_40bdb0();\n        if (v12 != 0)\n        {\n            v0 = (unsigned int)sub_40cd00();\n            if (v0 == -1)\n            {\n                v13 = localtime_r((unsigned int)&v0, (unsigned int)&v1);\n            }\n            if ((v0 == -1 && v13 != 0 && (v9[4] < 0 || v9[4] == 0 == v7 == 0 || v7 < 0) && (v9[2] ^ v5) == 0 && (v9[2 + 1] ^ v6) == 0 && (v9[1 + 1] ^ v4) == 0 && (v9[1] ^ v3) == 0 && (v9[1] ^ v2) == 0 && (v9[0] ^ *((int *)&v1)) == 0 || v0 != -1) && sub_40bc30() == 0)\n            {\n                v0 = -1;\n            }\n            if (v12 != 1)\n            {\n                v15 = sub_40bb50();\n            }\n        }\n        if (v12 == 0 || v15 == 0 && v12 != 1)\n        {\n            v16 = -1;\n        }\n        if (v12 == 1 || v15 != 0 && v12 != 0)\n        {\n            v16 = v0;\n        }\n        return v16;\n    }\n    return sub_40c050();\n}\n"
        },
        {
            "funcName": "sub_40ba30",
            "funcStartAddr": "0x40ba30",
            "funcEndAddr": "0x40ba48",
            "decompiledFuncCode": "int sub_40ba30()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_40b380();\n}\n"
        },
        {
            "funcName": "sub_4084e0",
            "funcStartAddr": "0x4084e0",
            "funcEndAddr": "0x408680",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[4];\n    unsigned int field_4;\n    char padding_8[32];\n    unsigned long long field_28;\n    unsigned long long field_30;\n} struct_0;\n\nextern uint128_t *g_614318;\nextern uint128_t g_614320;\nextern unsigned int g_614330;\nextern int512_t g_6144a0;\n\nint sub_4084e0()\n{\n    unsigned long v0;  // [bp-0x78]\n    unsigned long v1;  // [bp-0x70]\n    unsigned long v2;  // [bp-0x68]\n    unsigned long v3;  // [bp-0x50]\n    unsigned long long|unsigned long v4;  // [bp-0x48]\n    unsigned int v5;  // [bp-0x40]\n    unsigned int v6;  // [bp-0x3c]\n    unsigned long long v8;  // rcx\n    struct_0 *v9;  // rbp\n    unsigned long v10;  // rsi\n    unsigned int *v11;  // r13\n    unsigned long v13;  // rdi\n    uint128_t *v15;  // rax\n    unsigned long long v16;  // rax\n    uint128_t *v17;  // rbx\n    unsigned long long v19[2];  // rbx\n    void *v20;  // r12\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rsi\n    unsigned long long v24;  // rax\n\n    v9 = v8;\n    v3 = v10;\n    v17 = g_614318;\n    v11 = __errno_location();\n    v5 = *(v11);\n    if ((unsigned int)v13 < 0)\n    {\n        abort(); /* do not return */\n    }\n    if (g_614330 <= (unsigned int)v13)\n    {\n        if ((unsigned int)v13 != 2147483647)\n        {\n            if (g_614318 != 6374176)\n            {\n                v16 = sub_409360();\n                g_614318 = v16;\n                v17 = v16;\n            }\n            else\n            {\n                v15 = sub_409360();\n                v17 = v15;\n                g_614318 = v15;\n                *(v15) = g_614320;\n            }\n            memset(&v17[(long long)(int)g_614330], 0x0, (int)((unsigned int)v13 + 1 - g_614330) * 16);\n            g_614330 = (unsigned int)v13 + 1;\n        }\n        else\n        {\n            sub_409550(); /* do not return */\n        }\n    }\n    if (g_614330 > (unsigned int)v13 || (unsigned int)v13 != 2147483647)\n    {\n        v19 = &v17[v13];\n        v20 = v19[1];\n        v6 = v9->field_4 | 1;\n        v2 = v9->field_30;\n        v1 = v9->field_28;\n        v0 = &v9->padding_8;\n        *((unsigned long long [2])&v4) = *(v19);\n        v21 = sub_4072b0();\n        if (v4 <= v21)\n        {\n            v22 = v21 + 1;\n            v19[0] = v21 + 1;\n            if (v20 != 6374560)\n            {\n                v4 = v22;\n                free(v20);\n                v22 = v4;\n            }\n            v4 = v22;\n            v19[1] = v20;\n            v20 = (unsigned long long)(unsigned int)sub_409300();\n            v2 = v9->field_30;\n            v1 = v9->field_28;\n            v0 = v8 + 8;\n            sub_4072b0();\n        }\n        *(v11) = v5;\n        v24 = v20;\n        return v24;\n    }\n}\n"
        },
        {
            "funcName": "sub_402710",
            "funcStartAddr": "0x402710",
            "funcEndAddr": "0x402782",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned int field_10;\n} struct_0;\n\nextern unsigned int g_614298;\nextern char g_6142b4;\nextern unsigned int g_614410;\nextern struct_0 *g_614478;\n\nint sub_402710()\n{\n    unsigned long long|struct_0 * v1;  // rax\n    unsigned int|unsigned long v2;  // rcx\n    unsigned long long v3;  // rsi\n\n    v1 = g_614298;\n    if (g_614298 != 0)\n    {\n        v2 = g_614410;\n        v1 = g_614478;\n        v3 = 0;\n        do\n        {\n            if (v1->field_10 == 2)\n            {\n                v1->field_10 = 0;\n                v2 += 1;\n                v3 = 1;\n            }\n            v1 = &v1[3].padding_0[4];\n        }\n        while (v1 != 64 * g_614298 + (char *)g_614478);\n        if (v3 != 0)\n        {\n            *((unsigned long *)&g_614410) = v2;\n        }\n    }\n    if (g_6142b4 != 0)\n    {\n        v1 = 0;\n        v1 = (char)(g_614478->field_10 != 3);\n        g_614410 = rax<8>;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_405850",
            "funcStartAddr": "0x405850",
            "funcEndAddr": "0x405873",
            "decompiledFuncCode": "int sub_405850()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n    char *v3;  // rdi\n\n    v0 = v2;\n    strlen(v3);\n}\n"
        },
        {
            "funcName": "sub_409530",
            "funcStartAddr": "0x409530",
            "funcEndAddr": "0x409543",
            "decompiledFuncCode": "int sub_409530()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    char *v3;  // rdi\n\n    v0 = v2;\n    strlen(v3);\n}\n"
        },
        {
            "funcName": "sub_409160",
            "funcStartAddr": "0x409160",
            "funcEndAddr": "0x4091b9",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n} struct_0;\n\nint sub_409160()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long long v2;  // r9\n    struct_0 *v3;  // r8\n    unsigned long long v4;  // rax\n    unsigned long long *v5;  // r10\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // r10\n    unsigned long long v8;  // rax\n\n    v2 = 0;\n    do\n    {\n        v4 = v3->field_0;\n        if (v3->field_0 <= 47)\n        {\n            v5 = v4 + v3->field_10;\n            v3->field_0 = (unsigned int)v4 + 8;\n            v6 = *(v5);\n            v0 = *(v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n        }\n        else\n        {\n            v7 = v3->field_8;\n            v3->field_8 = v3->field_8 + 8;\n            v8 = *(v7);\n            v0 = *(v7);\n            if (v8 == 0)\n            {\n                break;\n            }\n        }\n        v2 += 1;\n    }\n    while (v2 != 10);\n    return sub_408d60();\n}\n"
        },
        {
            "funcName": "sub_408c90",
            "funcStartAddr": "0x408c90",
            "funcEndAddr": "0x408c99",
            "decompiledFuncCode": "int sub_408c90()\n{\n}\n"
        },
        {
            "funcName": "sub_40cda8",
            "funcStartAddr": "0x40cda8",
            "funcEndAddr": "0x40cdc8",
            "decompiledFuncCode": "extern unsigned long long g_613e30;\n\nint sub_40cda8()\n{\n    unsigned long long *v1;  // rbx\n    unsigned long long v2;  // rax\n    unsigned long v4;  // rdx\n\n    v1 = &g_613e30;\n    while (true)\n    {\n        v2 = *(v1);\n        if (*(v1) == -1)\n        {\n            break;\n        }\n        rax<8>();\n        v1 = &v1[-1];\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_40b950",
            "funcStartAddr": "0x40b950",
            "funcEndAddr": "0x40b9a6",
            "decompiledFuncCode": "extern unsigned int g_614334;\nextern unsigned int g_614338;\nextern unsigned int g_61433c;\nextern unsigned int g_6145e0;\nextern unsigned int g_6145e4;\nextern unsigned int g_6145e8;\nextern unsigned long long g_6145f0;\nextern unsigned long long g_614630;\n\nint sub_40b950()\n{\n    unsigned int *v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp+0x8]\n\n    g_6145e0 = g_61433c;\n    g_6145e4 = g_614338;\n    v1 = (unsigned int)v2;\n    v0 = &g_6145e0;\n    g_61433c = g_6145e0;\n    g_614630 = g_6145f0;\n    g_614334 = g_6145e8;\n    return sub_40b380();\n}\n"
        },
        {
            "funcName": "sub_40a5b3",
            "funcStartAddr": "0x40a5b3",
            "funcEndAddr": "0x40a5b8",
            "decompiledFuncCode": "int sub_40a5b3()\n{\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_40bb20",
            "funcStartAddr": "0x40bb20",
            "funcEndAddr": "0x40bb43",
            "decompiledFuncCode": "int sub_40bb20()\n{\n    unsigned long long v0;  // [bp-0x8]\n    unsigned long long *v2;  // rdi\n    unsigned long v3;  // rax\n    unsigned long long v4;  // rbx\n    void *v5;  // rbx\n    unsigned long long v7;  // rbx\n\n    if (v2 != 0)\n    {\n        v0 = v4;\n        while (true)\n        {\n            v5 = *(v2);\n            v2 = v5;\n            if (v5 == 0)\n            {\n                break;\n            }\n        }\n        v7 = v0;\n        return (unsigned long long)free(v2);\n    }\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_404de0",
            "funcStartAddr": "0x404de0",
            "funcEndAddr": "0x4052dd",
            "decompiledFuncCode": "extern unsigned int g_40cedc;\nextern unsigned int g_40d0a0;\nextern unsigned int g_40d0c8;\nextern unsigned int g_40d0f0;\nextern unsigned int g_40d120;\nextern unsigned int g_40d158;\nextern unsigned int g_40d1a8;\nextern unsigned int g_40d2f8;\nextern unsigned int g_40d408;\nextern unsigned int g_40d598;\nextern unsigned int g_40d748;\nextern unsigned int g_40d828;\nextern unsigned int g_40d8b8;\nextern unsigned int g_40da18;\nextern unsigned int g_40db18;\nextern unsigned int g_40dc60;\nextern unsigned int g_40dd50;\nextern unsigned int g_40ddb8;\nextern unsigned int g_40df50;\nextern unsigned int g_40e028;\nextern unsigned int g_40e058;\nextern unsigned int g_40e0b8;\nextern unsigned int g_40e100;\nextern unsigned int g_40e120;\nextern unsigned long long g_614490;\nextern unsigned long long stderr;\nextern unsigned long long stdout;\n\nint sub_404de0()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long v10;  // [bp-0x38]\n    unsigned long v11;  // [bp-0x30]\n    unsigned long long v12;  // [bp-0x28]\n    unsigned long long v13;  // [bp-0x20]\n    unsigned long v14;  // [bp-0x18]\n    unsigned long v15;  // [bp-0x8]\n    unsigned long v17;  // r12\n    unsigned long v18;  // rbx\n    unsigned int v19;  // edi\n    unsigned long long v40[2];  // rax\n    char *v41;  // rdi\n    char *v42;  // rsi\n    unsigned long long v43;  // rcx\n    unsigned long long v44;  // cc_dep1\n    unsigned long long v45;  // cc_dep2\n    unsigned long v46;  // d\n    char *v50;  // rax\n    char *v51;  // rax\n    unsigned long long v52;  // rax\n\n    v15 = v17;\n    v14 = v18;\n    if (v19 != 0)\n    {\n        __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x40d0a0, 0x5), g_614490);\n    }\n    else\n    {\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40d0c8, 0x5));\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40d0f0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40d120, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40d158, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40d1a8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40d2f8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40d408, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40d598, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40d748, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40d828, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40d8b8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40da18, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40db18, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40dc60, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40dd50, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40ddb8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40df50, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40e028, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40e058, 0x5), stdout);\n        v0 = \"[\";\n        v40 = &v0;\n        v1 = \"test invocation\";\n        v2 = \"coreutils\";\n        v3 = \"Multi-call\";\n        v4 = \"sha224sum\";\n        v5 = \"sha2 utilities\";\n        v6 = \"sha256sum\";\n        v7 = \"sha2 utilities\";\n        v8 = \"sha384sum\";\n        v9 = \"sha2 utilities\";\n        v10 = \"sha512sum\";\n        v11 = \"sha2 utilities\";\n        v12 = 0;\n        v13 = 0;\n        while (true)\n        {\n            v40 = &v2;\n            v41 = v2;\n            if (v2 == 0)\n            {\n                break;\n            }\n            v42 = \"pr\";\n            v43 = 3;\n            if ((v44 > v45) - 0 - (v44 < v45) == 0)\n            {\n                break;\n            }\n            while (v43 != 0)\n            {\n                v43 -= 1;\n                v44 = *(v42);\n                v45 = *(v41);\n                v41 = &v41[v46];\n                v42 = &v42[v46];\n                break;\n            }\n        }\n        if (v40[1] != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40cedc, 0x5));\n            v51 = setlocale(0x5, 0x0);\n        }\n        else\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40cedc, 0x5));\n            v50 = setlocale(0x5, 0x0);\n            if (v50 != 0)\n            {\n                v52 = strncmp(v50, \"en_\", 0x3);\n            }\n            if (v50 == 0 || v52 == 0)\n            {\n                __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40e100, 0x5));\n            }\n        }\n        if ((v40[1] == 0 || v51 != 0) && (v40[1] == 0 || strncmp(v51, \"en_\", 0x3) != 0) && (v40[1] != 0 || v50 != 0) && (v40[1] != 0 || v52 != 0))\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40e0b8, 0x5));\n        }\n        if (v40[1] != 0 || v50 != 0 && v52 != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40e100, 0x5));\n        }\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40e120, 0x5));\n    }\n    exit(v19); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_402ab0",
            "funcStartAddr": "0x402ab0",
            "funcEndAddr": "0x402c87",
            "decompiledFuncCode": "extern unsigned int g_40ce0f;\nextern unsigned int g_6142ac;\nextern char g_614380;\nextern unsigned int g_6143a0;\nextern unsigned long long g_6143a8;\nextern unsigned long long g_6143b0;\nextern unsigned long long g_6143c8;\n\nint sub_402ab0()\n{\n    unsigned long|void v0;  // [bp-0x128]\n    unsigned long v1;  // [bp-0x120]\n    char v2;  // [bp-0xb8]\n    unsigned long v3;  // [bp-0x60]\n    unsigned long v4;  // [bp-0x58]\n    unsigned long long v6;  // rcx\n    unsigned long long v7;  // rsi\n    unsigned long long v8;  // rdi\n    unsigned long long v10;  // cc_dep1\n    unsigned long long v11;  // cc_dep2\n    unsigned long v12;  // d\n    char *v13;  // rdi\n    char *v14;  // rsi\n    unsigned long long v15;  // cc_dep1\n    unsigned long long v16;  // r12\n    unsigned long long v17;  // rax\n    unsigned long long v18;  // r14\n    unsigned long long v21;  // rbp\n    unsigned long long v22;  // r13\n    unsigned long long v24;  // rax\n    unsigned long long v26;  // rax\n\n    v6 = 2;\n    v16 = v7;\n    v13 = \"-\";\n    v14 = v8;\n    while (v6 != 0)\n    {\n        v6 -= 1;\n        v10 = *(v14);\n        v11 = *(v13);\n        v13 = &v13[v12];\n        v14 = &v14[v12];\n        break;\n    }\n    v15 = (v10 > v11) - 0 - (v10 < v11);\n    if (!((char)v15 != 0))\n    {\n        v16 = -18446744069414584321;\n    }\n    else if ((unsigned int)v16 >= 0)\n    {\n        v17 = __fxstat(0x1, v16, (unsigned int)&v2);\n        if (v17 == 0)\n        {\n            v18 = v4;\n            v1 = v4;\n            v0 = v3;\n        }\n    }\n    if ((char)v15 == 0 || (unsigned int)v16 < 0 || v17 != 0)\n    {\n        if (*((long long *)&g_614380) == 0)\n        {\n            sub_405550();\n        }\n        *((int128_t *)&v0) = *((int128_t *)&g_614380);\n        v18 = (long long)(&v0)[8];\n    }\n    if (sub_40be80() != 0)\n    {\n        v22 = (unsigned long long)(unsigned int)sub_4070f0() + 1;\n        v21 = (unsigned int)sub_409300();\n        sub_4070f0();\n    }\n    else\n    {\n        v21 = (unsigned int)sub_409300();\n        __sprintf_chk(v21, 0x1, 0x21, 0x40ce0f, sub_4055f0(), v18);\n    }\n    free(g_6143b0);\n    v24 = g_6143c8;\n    g_6143b0 = v21;\n    if (g_6143c8 == 0)\n    {\n        v24 = ((char)(v16 >> 31 & 1 ^ 1)? v14 : 4247139);\n    }\n    g_6143a8 = v24;\n    v26 = sub_405850();\n    g_6143a0 = g_6142ac - sub_405850() - v26;\n    return v26;\n}\n"
        },
        {
            "funcName": "sub_40568c",
            "funcStartAddr": "0x40568c",
            "funcEndAddr": "0x405824",
            "decompiledFuncCode": "int sub_40568c()\n{\n    char v0;  // [bp-0x44]\n    unsigned long long v1;  // [bp-0x40]\n    unsigned long long v2;  // [bp-0x30]\n    unsigned long v3;  // [bp-0x28]\n    unsigned long long v4;  // [bp-0x20]\n    unsigned long long v5;  // [bp-0x18]\n    unsigned long long v6;  // [bp-0x10]\n    unsigned long long v7;  // [bp-0x8]\n    unsigned long long v9;  // r15\n    unsigned long long v10;  // r14\n    unsigned long long v11;  // r13\n    unsigned long long v12;  // r12\n    unsigned long long v13;  // rbx\n    unsigned long long v14;  // rdi\n    unsigned long long v17;  // r12\n    unsigned long v18;  // rsi\n    unsigned long v19;  // rdx\n    unsigned int v20;  // r15d\n    unsigned short *v21;  // rdx\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // rax\n    unsigned long long v25;  // rbp\n    unsigned long long v27;  // rax\n    unsigned long long v29;  // rax\n    char *v30;  // rbx\n    unsigned long long v32;  // rax\n    unsigned long long v33;  // rax\n    unsigned long long v34;  // rbx\n    unsigned long long v35;  // r12\n    unsigned long long v36;  // r13\n    unsigned long long v37;  // r14\n    unsigned long long v38;  // r15\n\n    v7 = v9;\n    v6 = v10;\n    v5 = v11;\n    v4 = v12;\n    v3 = stack_base + 0;\n    v2 = v13;\n    v30 = v14;\n    if ((unsigned long long)__ctype_get_mb_cur_max() > 1)\n    {\n        v17 = 0;\n        if (v14 < v14 + v18)\n        {\n            while (true)\n            {\n                v22 = *(v30);\n                if (*(v30) <= 63)\n                {\n                    if (v22 < 37)\n                    {\n                        v23 = (unsigned int)v22 - 32;\n                    }\n                }\n                else\n                {\n                    if (v22 >= 65 && v22 > 95)\n                    {\n                        v24 = (unsigned int)v22 - 97;\n                    }\n                }\n                if ((v22 < 37 || *(v30) > 63) && (v23 > 3 || *(v30) > 63) && (v22 < 65 || *(v30) <= 63 || v22 > 95) && (v22 < 65 || *(v30) <= 63 || v24 > 29))\n                {\n                    v1 = 0;\n                    while (true)\n                    {\n                        v25 = (unsigned int)sub_40ba50();\n                        if (v25 == -1)\n                        {\n                            if (((char)v19 & 1) == 0)\n                            {\n                                break;\n                            }\n                        }\n                        else if (v25 != -2)\n                        {\n                            v27 = wcwidth(*((int *)&v0));\n                            if ((unsigned int)v27 < 0)\n                            {\n                                if (((char)v19 & 2) != 0)\n                                {\n                                    break;\n                                }\n                                if (((char)v19 & 2) == 0)\n                                {\n                                    v29 = iswcntrl(*((int *)&v0));\n                                    if (v29 == 0 && (unsigned int)v17 != 2147483647)\n                                    {\n                                        v17 = (unsigned int)v17 + 1;\n                                    }\n                                }\n                            }\n                            else if (2147483647 - (unsigned int)v17 >= (unsigned int)v27)\n                            {\n                                v17 += v27;\n                            }\n                            if (((char)v19 & 2) == 0 || (unsigned int)v27 >= 0)\n                            {\n                                if (((unsigned int)v27 < 0 || 2147483647 - (unsigned int)v17 < (unsigned int)v27) && (v29 == 0 || (unsigned int)v27 >= 0) && ((unsigned int)v17 == 2147483647 || (unsigned int)v27 >= 0))\n                                {\n                                    v17 = 2147483647;\n                                }\n                                if (((unsigned int)v27 < 0 || 2147483647 - (unsigned int)v17 >= (unsigned int)v27) && (v29 != 0 || (unsigned int)v27 >= 0 || (unsigned int)v17 != 2147483647))\n                                {\n                                    v30 = &v30[(v25 == 0? 1 : rbp<8>)];\n                                    if (mbsinit((unsigned int)&v1) != 0)\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                        else\n                        {\n                            if (((char)v19 & 1) != 0)\n                            {\n                                break;\n                            }\n                            v17 = (unsigned int)v17 + 1;\n                            v30 = v14 + v18;\n                        }\n                    }\n                    if (true)\n                    {\n                        if (v30 >= v14 + v18)\n                        {\n                            break;\n                        }\n                    }\n                    else if (v25 == -2 || (unsigned int)v27 < 0 && v25 != -1 || v25 == -1 && ((char)v19 & 1) != 0)\n                    {\n                        v17 = -18446744069414584321;\n                    }\n                    else if (v25 == -1)\n                    {\n                        v30 = &v30[1];\n                        v17 = (unsigned int)v17 + 1;\n                    }\n                    else if ((v29 == 0 || 2147483647 - (unsigned int)v17 < (unsigned int)v27) && ((unsigned int)v17 == 2147483647 || 2147483647 - (unsigned int)v17 < (unsigned int)v27) && (v29 == 0 || (unsigned int)v27 >= 0) && (v29 == 0 || v25 != -1) && (v29 == 0 || v25 != -2) && ((unsigned int)v17 == 2147483647 || (unsigned int)v27 >= 0) && ((unsigned int)v17 == 2147483647 || v25 != -1) && ((unsigned int)v17 == 2147483647 || v25 != -2))\n                    {\n                        v33 = v17;\n                        v34 = v2;\n                        v35 = v4;\n                        v36 = v5;\n                        v37 = v6;\n                        v38 = v7;\n                        return v33;\n                    }\n                }\n                if (v30 >= v14 + v18 || v23 <= 3 && *(v30) <= 63 || *(v30) <= 63 && v22 >= 37 || v22 <= 95 && v22 >= 65 && *(v30) > 63 || v24 <= 29 && v22 >= 65 && *(v30) > 63)\n                {\n                    v30 = &v30[1];\n                    v17 = (unsigned int)v17 + 1;\n                }\n            }\n            if ((v22 < 37 || *(v30) > 63) && (v23 > 3 || *(v30) > 63) && (v22 < 65 || *(v30) <= 63 || v22 > 95) && (v22 < 65 || *(v30) <= 63 || v24 > 29))\n            {\n                v17 = -18446744069414584321;\n            }\n            else\n            {\n                v33 = v17;\n                v34 = v2;\n                v35 = v4;\n                v36 = v5;\n                v37 = v6;\n                v38 = v7;\n                return v33;\n            }\n        }\n    }\n    else\n    {\n        v17 = 0;\n        if (v14 < v14 + v18)\n        {\n            v17 = 0;\n            v20 = (unsigned int)v19 & 2;\n            v21 = *((long long *)(unsigned long long)__ctype_b_loc());\n            while (true)\n            {\n                v30 = &v30[1];\n                v32 = v21[(unsigned long long)v30[-1]];\n                if (((char)(v21[(unsigned long long)v30[-1]] >> 8) & 64) == 0 && v20 != 0)\n                {\n                    break;\n                }\n                if (((char)(v21[(unsigned long long)v30[-1]] >> 8) & 64) != 0 || v20 == 0 && (v32 & 2) == 0)\n                {\n                    if ((unsigned int)v17 == 2147483647)\n                    {\n                        break;\n                    }\n                    v17 = (unsigned int)v17 + 1;\n                }\n            }\n            if (((char)(v21[(unsigned long long)v30[-1]] >> 8) & 64) == 0)\n            {\n                v17 = -18446744069414584321;\n            }\n            else if (v14 + v18 == v30 || (v32 & 2) == 0 || ((char)(v21[(unsigned long long)v30[-1]] >> 8) & 64) != 0)\n            {\n                v33 = v17;\n                v34 = v2;\n                v35 = v4;\n                v36 = v5;\n                v37 = v6;\n                v38 = v7;\n                return v33;\n            }\n        }\n    }\n    if (v14 < v14 + v18)\n    {\n        v17 = -18446744069414584321;\n    }\n    v33 = v17;\n    v34 = v2;\n    v35 = v4;\n    v36 = v5;\n    v37 = v6;\n    v38 = v7;\n    return v33;\n}\n"
        },
        {
            "funcName": "sub_4096b0",
            "funcStartAddr": "0x4096b0",
            "funcEndAddr": "0x409d76",
            "decompiledFuncCode": "int sub_4096b0()\n{\n    unsigned long long v0;  // [bp-0x178]\n    unsigned long long *v1;  // [bp-0x58]\n    char v2;  // [bp-0x49]\n    char v3;  // [bp-0x40]\n    unsigned long v5;  // rcx\n    unsigned int v6;  // edx\n    unsigned int v7;  // rsi\n    unsigned long long *v8;  // rbx\n    unsigned int *v9;  // r13\n    unsigned int *v10;  // r13\n    char v11[3];  // r15\n    unsigned int v12;  // edi\n    char *v13;  // r8\n    unsigned int v14;  // eax\n    unsigned long long v15;  // r13\n    unsigned long long|unsigned int|unsigned long v16;  // r12\n    unsigned long long v17;  // rbp\n    unsigned long long v18;  // rax\n    unsigned long long v19;  // rax\n    unsigned long long v20;  // rdx\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rsi\n    char v24;  // sil\n    unsigned long long v25;  // rdx\n    unsigned long long v26;  // r13\n    unsigned long long v27;  // r13\n    unsigned long long v28;  // rax\n    unsigned long long v29;  // rax\n    unsigned long long v30;  // rax\n    unsigned long long v31;  // rax\n    unsigned long v32;  // rax\n    unsigned long long v33;  // r9\n    unsigned long long v34;  // rcx\n    unsigned long long v35;  // rax\n    unsigned long long v36;  // r9\n    unsigned long long v37;  // rcx\n    unsigned long long v38;  // rax\n    unsigned long long v39;  // r9\n    unsigned long long v40;  // rsi\n    unsigned long long v41;  // rax\n    unsigned long long v42;  // rcx\n    unsigned long long v43;  // rdi\n    unsigned long long v44;  // rcx\n    unsigned long long v45;  // r9\n    unsigned long long|unsigned int v46;  // edi\n    unsigned long long|unsigned int|unsigned long v47;  // r10\n    unsigned long long v48;  // rcx\n    unsigned long long v49;  // r9\n    unsigned long long v50;  // rcx\n    unsigned long long v51;  // r9\n    unsigned long long|unsigned int v52;  // rdi\n    unsigned long long v53;  // rcx\n    unsigned long long|unsigned int v54;  // rdi\n    unsigned long long|unsigned int v55;  // rdi\n    unsigned long v56;  // rax\n    unsigned int v57;  // cc_dep1\n    unsigned int v58;  // cc_dep1\n    unsigned long long v59;  // cc_dep1\n    unsigned int v60;  // cc_dep1\n    unsigned long long v61;  // cc_dep1\n    unsigned long long v62;  // cc_dep1\n    char *v63;  // rsi\n    unsigned long v64;  // rax\n\n    v1 = v5;\n    if (v6 <= 36)\n    {\n        v8 = (v7 == 0? &v3 : v7);\n        *(v9) = 0;\n        v9 = __errno_location();\n        v11 = *(v8);\n        v17 = __strtol_internal(v12, v7, v6, 0x0);\n        if (*(v8) != v46)\n        {\n            v14 = *(v10);\n            if (*(v10) == 0)\n            {\n                v16 = 0;\n            }\n            else\n            {\n                v16 = 4;\n                if (v14 == 34)\n                {\n                    v16 = 1;\n                }\n            }\n            if ((v14 == 34 || *(v10) == 0) && v13 != 0)\n            {\n                v15 = v11[0];\n                if (v11[0] != 0)\n                {\n                    v19 = strchr(v13, (char)*((char *)*((long long *)(v7 == 0? &v3 : v7))));\n                }\n            }\n        }\n        else\n        {\n            if (v13 != 0)\n            {\n                v15 = v11[0];\n                v16 = 4;\n                if (v11[0] != 0)\n                {\n                    v17 = 1;\n                    v16 = 0;\n                    v18 = strchr(v13, (char)*((char *)*((long long *)(v7 == 0? &v3 : v7))));\n                }\n            }\n            if ((v13 == 0 || v18 == 0) && (v13 == 0 || v11[0] != 0))\n            {\n                v16 = 4;\n            }\n        }\n        if (*(v8) == v46 && v13 != 0 && v11[0] != 0 && v18 != 0 || v13 != 0 && v11[0] != 0 && *(v8) != v46 && (v14 == 34 || *(v10) == 0) && v19 != 0)\n        {\n            v20 = v15 - 69;\n            if ((v15 - 69 & 255) <= 47)\n            {\n                *((unsigned long long *)&v2) = v20;\n                v0 = 142129060940101;\n                if (((char)((char)*(&((char *)stack_base)[((unsigned long long)(v2 & 63) >> 3) + -376]) >> (unsigned long long)(v2 & 63 & 7)) & 1) != 0)\n                {\n                    v21 = strchr(v13, 0x30);\n                    if (v21 != 0 && v11[1] != 68)\n                    {\n                        if (*((char *)(*((long long *)(v7 == 0? &v3 : v7)) + 1)) != 105)\n                        {\n                            v25 = v2;\n                            if (*((char *)(*((long long *)(v7 == 0? &v3 : v7)) + 1)) != 66)\n                            {\n                                /* goto *((long long *)(rdx<8> * 8 + 4261544)); */\n                            }\n                        }\n                        else\n                        {\n                            v23 = 0;\n                            v22 = 0x400;\n                            v24 = v11[2] == 66;\n                            v40 = rsi<8> * 2 + 1;\n                        }\n                    }\n                }\n            }\n        }\n        if ((*(v8) == v46 && v13 != 0 && v11[0] != 0 && v18 != 0 || v13 != 0 && v11[0] != 0 && *(v8) != v46 && (v14 == 34 || *(v10) == 0) && v19 != 0) && (v15 - 69 & 255) <= 47 && ((char)((char)*(&((char *)stack_base)[((unsigned long long)(v2 & 63) >> 3) + -376]) >> (unsigned long long)(v2 & 63 & 7)) & 1) != 0 && v21 == 0 || (*(v8) == v46 && v13 != 0 && v11[0] != 0 && v18 != 0 || v13 != 0 && v11[0] != 0 && *(v8) != v46 && (v14 == 34 || *(v10) == 0) && v19 != 0) && (v15 - 69 & 255) <= 47 && ((char)((char)*(&((char *)stack_base)[((unsigned long long)(v2 & 63) >> 3) + -376]) >> (unsigned long long)(v2 & 63 & 7)) & 1) == 0 || (*(v8) == v46 && v13 != 0 && v11[0] != 0 && v18 != 0 || v13 != 0 && v11[0] != 0 && *(v8) != v46 && (v14 == 34 || *(v10) == 0) && v19 != 0) && (v15 - 69 & 255) > 47)\n        {\n            v40 = 1;\n            v22 = 0x400;\n        }\n        if (...)\n        {\n            v40 = 2;\n            v22 = 1000;\n        }\n        if (...)\n        {\n            v26 = (unsigned int)v15 - 66;\n            switch (v26)\n            {\n            case 0:\n                if (v17 >= -0x20000000000000 && v17 <= 9007199254740991)\n                {\n                    v17 *= 0x400;\n                    break;\n                }\n            case 3:\n                v34 = v22;\n                v35 = (-1 CONCAT 0x8000000000000000) % v22;\n                v36 = v35;\n            case 5: case 37:\n                v37 = v22;\n                v38 = (-1 CONCAT 0x8000000000000000) % v22;\n                v39 = v38;\n                v55 = 3;\n                v47 = 0;\n                do\n                {\n                    if (v17 < v39)\n                    {\n                        v17 = 0x8000000000000000;\n                        v47 = 1;\n                    }\n                    else if ((9223372036854775807 >> 63 CONCAT 9223372036854775807) % v44 >= v17)\n                    {\n                        v17 = v37 * v17;\n                    }\n                    else\n                    {\n                        v17 = 9223372036854775807;\n                        v47 = 1;\n                    }\n                    v62 = v55;\n                    v55 -= 1;\n                }\n                while (v62 != 1);\n            case 9: case 41:\n                v42 = v22;\n                v41 = (-1 CONCAT 0x8000000000000000) % v22;\n                if (v17 >= v41)\n                {\n                    v56 = (0 CONCAT 9223372036854775807) % v42;\n                }\n            case 11: case 43:\n                v42 = v22;\n                v28 = (-1 CONCAT 0x8000000000000000) % v22;\n                v43 = v28;\n                if (v17 >= v43)\n                {\n                    v56 = (0 CONCAT 9223372036854775807) % v42;\n                    if (v17 <= (0 CONCAT 9223372036854775807) % v42)\n                    {\n                        v17 = v42 * v17;\n                        if (v17 >= v43 && v56 >= v17)\n                        {\n                            v17 = v42 * v17;\n                            break;\n                        }\n                    }\n                }\n            case 14:\n                v44 = v22;\n                v29 = (-1 CONCAT 0x8000000000000000) % v22;\n                v45 = v29;\n            case 18: case 50:\n                v50 = v22;\n                v31 = (-1 CONCAT 0x8000000000000000) % v22;\n                v51 = v31;\n                v52 = 4;\n                v47 = 0;\n                do\n                {\n                    if (v51 > v17)\n                    {\n                        v17 = 0x8000000000000000;\n                        v47 = 1;\n                    }\n                    else if ((9223372036854775807 >> 63 CONCAT 9223372036854775807) % v44 >= v17)\n                    {\n                        v17 = v50 * v17;\n                    }\n                    else\n                    {\n                        v17 = 9223372036854775807;\n                        v47 = 1;\n                    }\n                    v59 = v52;\n                    v52 -= 1;\n                }\n                while (v59 != 1);\n            case 23:\n                v48 = v22;\n                v30 = (-1 CONCAT 0x8000000000000000) % v22;\n                v49 = v30;\n                v46 = 8;\n                v47 = 0;\n                do\n                {\n                    if (v49 > v17)\n                    {\n                        v17 = 0x8000000000000000;\n                        v47 = 1;\n                    }\n                    else if ((9223372036854775807 >> 63 CONCAT 9223372036854775807) % v44 >= v17)\n                    {\n                        v17 = v48 * v17;\n                    }\n                    else\n                    {\n                        v17 = 9223372036854775807;\n                        v47 = 1;\n                    }\n                    v58 = v46;\n                    v46 = (unsigned long long)v46 - 1;\n                }\n                while (v58 != 1);\n            case 24:\n                v53 = v22;\n                v32 = (-1 CONCAT 0x8000000000000000) % v22;\n                v33 = v32;\n                v46 = 7;\n                v47 = 0;\n                do\n                {\n                    if (v33 > v17)\n                    {\n                        v17 = 0x8000000000000000;\n                        v47 = 1;\n                    }\n                    else if ((9223372036854775807 >> 63 CONCAT 9223372036854775807) % v44 >= v17)\n                    {\n                        v17 = v53 * v17;\n                    }\n                    else\n                    {\n                        v17 = 9223372036854775807;\n                        v47 = 1;\n                    }\n                    v60 = v46;\n                    v46 = (unsigned long long)v46 - 1;\n                }\n                while (v60 != 1);\n            case 33:\n                break;\n            case 53:\n                if (!(v17 >= 0xc000000000000000))\n                {\n                    v17 = 0x8000000000000000;\n                    v16 = 1;\n                    break;\n                }\n                else if (v17 <= 4611686018427387903)\n                {\n                    v17 *= 2;\n                    break;\n                }\n                else\n                {\n                    v17 = 9223372036854775807;\n                    v16 = 1;\n                    break;\n                }\n            default:\n                v16 |= 2;\n                *(v1) = v17;\n            }\n            if (v26 <= 53)\n            {\n                v27 = v26;\n            }\n        }\n        v40 = 1;\n        v34 = 0x400;\n        v36 = -0x20000000000000;\n        v54 = 6;\n        v47 = 0;\n        do\n        {\n            if (v17 < v36)\n            {\n                v17 = 0x8000000000000000;\n                v47 = 1;\n            }\n            else if ((9223372036854775807 >> 63 CONCAT 9223372036854775807) % v44 >= v17)\n            {\n                v17 = v34 * v17;\n            }\n            else\n            {\n                v17 = 9223372036854775807;\n                v47 = 1;\n            }\n            v61 = v54;\n            v54 -= 1;\n        }\n        while (v61 != 1);\n        v40 = 1;\n        v50 = 0x400;\n        v51 = -0x20000000000000;\n        v40 = 1;\n        v37 = 0x400;\n        v39 = -0x20000000000000;\n        v40 = 1;\n        v48 = 0x400;\n        v49 = -0x20000000000000;\n        v40 = 1;\n        if (v17 >= -0x40000000000000 && v17 <= 18014398509481983)\n        {\n            v17 *= 0x200;\n        }\n        v40 = 1;\n        v42 = 0x400;\n        v41 = -0x20000000000000;\n        v40 = 1;\n        v53 = 0x400;\n        v33 = -0x20000000000000;\n        v40 = 1;\n        v42 = 0x400;\n        v43 = -0x20000000000000;\n        v40 = 1;\n        v40 = 1;\n        v44 = 0x400;\n        v45 = -0x20000000000000;\n        v46 = 5;\n        v47 = 0;\n        do\n        {\n            if (v45 > v17)\n            {\n                v17 = 0x8000000000000000;\n                v47 = 1;\n            }\n            else if ((9223372036854775807 >> 63 CONCAT 9223372036854775807) % v44 >= v17)\n            {\n                v17 = v44 * v17;\n            }\n            else\n            {\n                v17 = 9223372036854775807;\n                v47 = 1;\n            }\n            v57 = v46;\n            v46 = (unsigned long long)v46 - 1;\n        }\n        while (v57 != 1);\n        v16 |= v47;\n        v63 = &v11[v40];\n        *(v8) = v63;\n        v16 = (unsigned int)(*(v63) != 0? v16 | 2 : (unsigned int)r12<8>);\n        *(v1) = v17;\n        v64 = v16;\n        return v64;\n    }\n    __assert_fail(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_408d50",
            "funcStartAddr": "0x408d50",
            "funcEndAddr": "0x408d5e",
            "decompiledFuncCode": "int sub_408d50()\n{\n}\n"
        },
        {
            "funcName": "sub_40b380",
            "funcStartAddr": "0x40b380",
            "funcEndAddr": "0x40b8e7",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned int field_0;\n    unsigned int field_4;\n    char padding_8[24];\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned int field_30;\n} struct_1;\n\ntypedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    unsigned int field_18;\n    char padding_1c[4];\n    unsigned long long field_20;\n    unsigned int field_28;\n    unsigned int field_2c;\n    unsigned int field_30;\n} struct_0;\n\nextern unsigned int g_411008;\nextern unsigned int g_411039;\nextern unsigned long long stderr;\n\nint sub_40b380()\n{\n    struct_0 *|struct_1 * v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x60]\n    unsigned long v4;  // [bp-0x58]\n    unsigned int|char v5;  // [bp-0x4c]\n    char v6[2];  // [bp-0x48]\n    unsigned long long v7;  // [bp-0x40]\n    struct_1 *v8;  // [bp+0x8]\n    unsigned int v9;  // [bp+0x10]\n    unsigned long v10;  // rcx\n    unsigned long v11;  // r8\n    unsigned int v12;  // r13d\n    unsigned long v13;  // rdi\n    unsigned long v14;  // rsi\n    unsigned long v15;  // r12\n    char v16[2];  // rdx\n    unsigned int|unsigned long v17;  // eax\n    unsigned long long v18;  // rax\n    unsigned long long|char * v19;  // rdx\n    unsigned long long v20;  // rax\n    unsigned int v22;  // r9d\n    unsigned long long v23;  // rax\n    unsigned long long|unsigned int v24;  // r9d\n    unsigned long v26;  // rax\n    unsigned int|unsigned long v27;  // rdx\n    unsigned long v29;  // rax\n    char v30[2];  // rcx\n    unsigned long v31;  // rsi\n    unsigned long long v32;  // rcx\n    char *v33;  // rdi\n    char v34[3];  // rsi\n    unsigned long long v35;  // cc_dep1\n    unsigned long long v36;  // cc_dep2\n    unsigned long v37;  // d\n    unsigned long long v38;  // cc_dep1\n    unsigned int v39;  // ecx\n    unsigned long long v40;  // rax\n    unsigned long long v41;  // rcx\n    unsigned long long|unsigned long v42;  // rdx\n    unsigned int v44;  // eax\n    unsigned long long v45;  // r14\n    unsigned int|unsigned long v46;  // rbp\n    unsigned long long v47;  // rax\n    char v48[3];  // r14\n    unsigned long v49;  // r13\n    char [2]|char * v50;  // r15\n    char v51[3];  // rax\n    unsigned int v52;  // ecx\n    char v53[3];  // r8\n    unsigned long long v54;  // rcx\n    unsigned long long v55;  // rcx\n    unsigned long long v57;  // rdx\n    unsigned int v58;  // eax\n    char v60[3];  // rax\n    unsigned long long v62;  // r14\n    char v63;  // r14b\n    unsigned long long v64;  // r14\n    char v65;  // r14b\n    unsigned long long v66;  // rax\n\n    v3 = v10;\n    v4 = v11;\n    v12 = v8->field_4;\n    if ((unsigned int)v13 > 0)\n    {\n        v17 = v0->field_0;\n        v46 = v13;\n        v15 = v14;\n        v50 = v16;\n        v0->field_10 = 0;\n        if (!((unsigned int)v17 != 0))\n        {\n            v0->field_0 = 1;\n            v17 = 1;\n        }\n        else if (v0->field_18 != 0)\n        {\n            v18 = v16[0];\n            v19 = v0->field_20;\n            if (((char)(v18 - 43) & 253) == 0)\n            {\n                v20 = v50[1];\n                v50 = &v50[1];\n                v49 = (unsigned int)(v20 == 58? 0 : (unsigned int)r13<8>);\n            }\n        }\n        if ((unsigned int)v17 == 0 || v0->field_18 == 0)\n        {\n            *((unsigned long *)&v0->field_30) = v17;\n            *((unsigned long *)&v0->field_2c) = v17;\n            v0->field_20 = 0;\n            if (!(v16[0] != 45))\n            {\n                v0->field_28 = 2;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            else if (v16[0] != 43)\n            {\n                v19 = 0;\n                if (v9 == 0)\n                {\n                    v5 = v22;\n                    v23 = getenv(\"POSIXLY_CORRECT\");\n                    v24 = v5;\n                    if (v23 != 0)\n                    {\n                        v19 = v0->field_20;\n                    }\n                    else\n                    {\n                        v0->field_28 = 1;\n                        v19 = v0->field_20;\n                    }\n                }\n                if (v9 != 0 || v23 != 0)\n                {\n                    v0->field_28 = 0;\n                }\n            }\n            else\n            {\n                v0->field_28 = 0;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            v0->field_18 = 1;\n            v18 = v50[0];\n        }\n        if ((unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0)\n        {\n            v49 = (unsigned int)(v18 == 58? 0 : (unsigned int)r13<8>);\n        }\n        if (*(v19) == 0 || v19 == 0 && (unsigned int)v17 == 0 || v19 == 0 && v0->field_18 == 0 || v19 == 0 && ((char)(v18 - 43) & 253) != 0 || ((char)(v18 - 43) & 253) == 0 && v8->field_20 == 0 && (unsigned int)v17 != 0 && v0->field_18 != 0)\n        {\n            v26 = v0->field_0;\n            if (v0->field_30 > v0->field_0)\n            {\n                v0->field_30 = v8->field_0;\n            }\n            if (v8->field_0 < v0->field_2c)\n            {\n                v0->field_2c = v8->field_0;\n            }\n            if (v0->field_28 == 1)\n            {\n                v27 = v0->field_30;\n                if (v0->field_2c != v0->field_30)\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v5 = v5;\n                        sub_40ac80();\n                        v27 = v0->field_0;\n                        v24 = v5;\n                    }\n                }\n                else\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v0->field_2c = v8->field_0;\n                        v27 = v26;\n                    }\n                }\n                if ((unsigned int)v13 > (unsigned int)v27)\n                {\n                    v29 = v27;\n                    while (true)\n                    {\n                        v30 = *((long long *)(v15 + v29 * 8));\n                        v31 = v29;\n                        v27 = v29;\n                        if (*((char *)*((long long *)(v15 + (v29 << 3)))) == 45 && v30[1] != 0)\n                        {\n                            v26 = v0->field_0;\n                        }\n                        if (v30[1] == 0 || *((char *)*((long long *)(v15 + (v29 << 3)))) != 45)\n                        {\n                            v27 = v31 + 1;\n                            v29 += 1;\n                            v0->field_0 = (unsigned int)v31 + 1;\n                            if ((unsigned int)v13 <= (unsigned int)v29)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    if (v30[1] == 0 || *((char *)*((long long *)(v15 + (v29 << 3)))) != 45)\n                    {\n                        v26 = v27;\n                    }\n                    else if (*((char *)*((long long *)(v15 + (v29 << 3)))) == 45 && v30[1] != 0)\n                    {\n                        *((unsigned long *)&v0->field_30) = v27;\n                    }\n                }\n                v26 = v27;\n                *((unsigned long *)&v0->field_30) = v27;\n            }\n            if ((unsigned int)v13 != (unsigned int)v26)\n            {\n                v42 = v26;\n                v32 = 3;\n                v33 = \"-\";\n                v48 = *((long long *)(v15 + v26 * 8));\n                v34 = *((long long *)(v15 + v26 * 8));\n                while (v32 != 0)\n                {\n                    v32 -= 1;\n                    v35 = v34[0];\n                    v36 = *(v33);\n                    v33 = &v33[v37];\n                    v34 = &v34[v37];\n                    break;\n                }\n                v38 = (v35 > v36) - 0 - (v35 < v36);\n                if ((char)v38 == 0)\n                {\n                    v39 = v0->field_30;\n                    v40 = (unsigned int)v26 + 1;\n                    v0->field_0 = v42;\n                    if (v42 != v39)\n                    {\n                        if ((unsigned int)v42 != v8->field_30)\n                        {\n                            sub_40ac80();\n                            v42 = v0->field_2c;\n                        }\n                    }\n                    else\n                    {\n                        v0->field_2c = v42;\n                        v42 = v40;\n                    }\n                    v0->field_30 = v46;\n                    v0->field_0 = v46;\n                }\n                else if (v48[0] == 45)\n                {\n                    v41 = v48[1];\n                    if (v48[1] != 0 && v3 != 0)\n                    {\n                        if (!(v41 != 45))\n                        {\n                            v0->field_20 = &v48[2];\n                            v2 = \"-\";\n                            v1 = v49;\n                            v0 = v0;\n                        }\n                        else if (v24 != 0)\n                        {\n                            if (v48[2] == 0)\n                            {\n                                v5 = v24;\n                                v47 = strchr(v50, v41);\n                            }\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v46 = v0->field_30;\n                v42 = v0->field_2c;\n            }\n        }\n    }\n    if (((unsigned int)v13 != (unsigned int)v26 && (unsigned int)v13 > 0 && (((char)(v18 - 43) & 253) == 0 || v19 == 0 || *(v19) == 0) && (v19 == 0 || *(v19) == 0 || (unsigned int)v17 != 0) && (v19 == 0 || *(v19) == 0 || v0->field_18 != 0) && (v8->field_20 == 0 || *(v19) == 0 || (unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 == 0 || (unsigned int)v13 == (unsigned int)v26 && (unsigned int)v13 > 0 && (((char)(v18 - 43) & 253) == 0 || v19 == 0 || *(v19) == 0) && (v19 == 0 || *(v19) == 0 || (unsigned int)v17 != 0) && (v19 == 0 || *(v19) == 0 || v0->field_18 != 0) && (v8->field_20 == 0 || *(v19) == 0 || (unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0)) && v42 != v46)\n    {\n        *((unsigned long long *)&v0->field_0) = v42;\n    }\n    if (((unsigned int)v13 != (unsigned int)v26 && (unsigned int)v13 > 0 && (((char)(v18 - 43) & 253) == 0 || v19 == 0 || *(v19) == 0) && (v19 == 0 || *(v19) == 0 || (unsigned int)v17 != 0) && (v19 == 0 || *(v19) == 0 || v0->field_18 != 0) && (v8->field_20 == 0 || *(v19) == 0 || (unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] == 45 && v48[1] == 0 || (unsigned int)v13 != (unsigned int)v26 && (unsigned int)v13 > 0 && (((char)(v18 - 43) & 253) == 0 || v19 == 0 || *(v19) == 0) && (v19 == 0 || *(v19) == 0 || (unsigned int)v17 != 0) && (v19 == 0 || *(v19) == 0 || v0->field_18 != 0) && (v8->field_20 == 0 || *(v19) == 0 || (unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] != 45) && v0->field_28 != 0)\n    {\n        v44 = (unsigned int)v26 + 1;\n        v0->field_10 = v48;\n        v45 = 1;\n        v0->field_0 = v44;\n    }\n    if (...)\n    {\n        v45 = -18446744069414584321;\n    }\n    if (...)\n    {\n        v0->field_20 = &v48[1];\n        v2 = \"-\";\n        v1 = v49;\n        v0 = v8;\n        v45 = (unsigned int)sub_40ad60();\n        if ((unsigned int)v45 == -1)\n        {\n            v48 = *((long long *)(v15 + (int)v0->field_0 * 8));\n        }\n    }\n    if (...)\n    {\n        v19 = &v48[1];\n    }\n    if (...)\n    {\n        *((char **)&v6[0]) = v19;\n        v0->field_20 = &v19[1];\n        v45 = *(v19);\n        v7 = &v19[1];\n        v5 = *(v19);\n        v51 = strchr(v50, *(v19));\n        v52 = v5;\n        v53 = v7;\n        if (v6[1] == 0)\n        {\n            v0->field_0 = v0->field_0 + 1;\n        }\n        v54 = (unsigned long long)v52 - 58;\n        if (v54 > 1 && v51 != 0)\n        {\n            v55 = v51[1];\n            if (v51[0] == 87 && v3 != 0 && v55 == 59 && v6[1] == 0)\n            {\n                if (v0->field_0 != (unsigned int)v46)\n                {\n                    v53 = *((long long *)(v15 + (int)v8->field_0 * 8));\n                }\n                else\n                {\n                    if ((unsigned int)v49 != 0)\n                    {\n                        __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x411008, 0x5), *((long long *)v15));\n                    }\n                    v0->field_8 = v45;\n                    v62 = 0;\n                    v63 = *(v50) != 58;\n                    v45 = r14<8> * 5 + 58;\n                }\n            }\n        }\n    }\n    if (...)\n    {\n        if ((unsigned int)v49 != 0)\n        {\n            __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x411039, 0x5), *((long long *)v15));\n        }\n        v0->field_8 = v45;\n        v45 = 63;\n    }\n    if (...)\n    {\n        v57 = v6[1];\n        if (v51[2] != 58)\n        {\n            if (!(v57 == 0))\n            {\n                v58 = v8->field_0 + 1;\n                v0->field_10 = v7;\n                v0->field_0 = v58;\n            }\n            else if ((unsigned int)v46 != v8->field_0)\n            {\n                v60 = *((long long *)(v15 + (int)v8->field_0 * 8));\n                v0->field_0 = (int)v8->field_0 + 1;\n                v0->field_10 = v60;\n            }\n            else\n            {\n                if ((unsigned int)v49 != 0)\n                {\n                    __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x411008, 0x5), *((long long *)v15));\n                }\n                v0->field_8 = v45;\n                v64 = 0;\n                v65 = *(v50) != 58;\n                v45 = r14<8> * 5 + 58;\n            }\n        }\n        else\n        {\n            if (v57 != 0)\n            {\n                v0->field_10 = v7;\n                v0->field_0 = v0->field_0 + 1;\n            }\n            else\n            {\n                v0->field_10 = 0;\n            }\n        }\n        v0->field_20 = 0;\n    }\n    if (...)\n    {\n        v0->field_20 = v53;\n        v0->field_10 = 0;\n        v2 = \"-W\";\n        v1 = v49;\n        v0 = v0;\n    }\n    if (...)\n    {\n        v45 = (unsigned int)sub_40ad60();\n    }\n    v66 = v45;\n    return v66;\n}\n"
        },
        {
            "funcName": "sub_408d60",
            "funcStartAddr": "0x408d60",
            "funcEndAddr": "0x409109",
            "decompiledFuncCode": "extern unsigned int g_410118;\nextern unsigned int g_410124;\nextern unsigned int g_41012b;\nextern unsigned int g_41012f;\nextern unsigned int g_41013f;\nextern unsigned int g_410156;\nextern unsigned int g_4101b8;\nextern unsigned int g_410288;\nextern unsigned int g_4102a8;\nextern unsigned int g_4102d0;\nextern unsigned int g_4102f8;\nextern unsigned int g_410328;\nextern unsigned int g_410480;\n\nint sub_408d60()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    char v10;  // [bp-0x30]\n    unsigned long long v12[9];  // r8\n    unsigned long long v13[9];  // rbx\n    unsigned long v14;  // rsi\n    unsigned int v15;  // edi\n    unsigned int v16;  // edi\n    unsigned int v17;  // edx\n    void *v18;  // rdi\n    unsigned long v20;  // r9\n    unsigned long v21;  // rsi\n    unsigned long long v22;  // r8\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r12\n    unsigned long long v25;  // r15\n    unsigned long long v26;  // r14\n    unsigned long long v27;  // r14\n    unsigned long v28;  // rbx\n    unsigned long v29;  // rax\n    unsigned long long v30;  // r8\n    unsigned long v31;  // rax\n    unsigned long v32;  // rax\n\n    v13 = v12;\n    if (v14 != 0)\n    {\n        __fprintf_chk(v15, 0x1, 0x410118, v14);\n    }\n    else\n    {\n        __fprintf_chk(v16, 0x1, 0x410124, v17);\n    }\n    __fprintf_chk((unsigned int)v18, 0x1, 0x410480, dcgettext(0x0, 0x41012b, 0x5));\n    fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4101b8, 0x5), v18);\n    switch (v20)\n    {\n    case 0:\n        abort(); /* do not return */\n    case 1:\n        dcgettext(0x0, 0x41012f, 0x5);\n        break;\n    case 2:\n        dcgettext(0x0, 0x41013f, 0x5);\n        break;\n    case 3:\n        dcgettext(0x0, 0x410156, 0x5);\n        break;\n    case 4:\n        v27 = v13[3];\n        v28 = *(v13);\n        v29 = dcgettext(0x0, 0x410288, 0x5);\n    case 5:\n        v27 = v13[3];\n        v28 = *(v13);\n        v29 = dcgettext(0x0, 0x4102a8, 0x5);\n        *((unsigned long long [9])&v5) = v12[4];\n    case 6:\n        *((unsigned long long [9])&v6) = v12[1];\n        v31 = dcgettext(0x0, 0x4102d0, 0x5);\n        *((unsigned long long [9])&v4) = v12[5];\n        *((unsigned long long [9])&v3) = v12[4];\n        *((unsigned long long [9])&v2) = v12[3];\n    case 7:\n        *((unsigned long long [9])&v7) = v13[2];\n        *((unsigned long long [9])&v6) = v13[1];\n        v31 = dcgettext(0x0, 0x4102f8, 0x5);\n        *((unsigned long long [9])&v5) = v12[6];\n        *((unsigned long long [9])&v4) = v12[5];\n        *((unsigned long long [9])&v3) = v12[4];\n        *((unsigned long long [9])&v2) = v12[3];\n    case 8:\n        v23 = v13[6];\n        v24 = v13[5];\n        v25 = v13[4];\n        *((unsigned long long [9])&v8) = v13[7];\n        v26 = v13[3];\n        *((unsigned long long [9])&v6) = v13[2];\n        *((unsigned long long [9])&v7) = v13[1];\n        v32 = dcgettext(0x0, 0x410328, 0x5);\n    case 9:\n        v21 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n        v30 = v12[1];\n        v23 = v13[6];\n        v24 = v13[5];\n        *((unsigned long long [9])&v9) = v13[8];\n        v25 = v13[4];\n        v26 = v13[3];\n        *((unsigned long long [9])&v8) = v13[7];\n        *((unsigned long long [9])&v6) = v13[2];\n        v7 = v30;\n    default:\n        v21 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n        v22 = v12[1];\n        v23 = v13[6];\n        v24 = v13[5];\n        *((unsigned long long [9])&v9) = v13[8];\n        v25 = v13[4];\n        v26 = v13[3];\n        *((unsigned long long [9])&v8) = v13[7];\n        *((unsigned long long [9])&v6) = v13[2];\n        v7 = v22;\n    }\n    v32 = dcgettext(0x0, v21, 0x5);\n    v5 = v9;\n    v4 = v27;\n    __fprintf_chk((unsigned int)v18, 0x1, v29, v28);\n    return v4;\n    return __fprintf_chk((unsigned int)v18, 0x1, v29, *((long long *)&v10));\n    v4 = v8;\n    v3 = v23;\n    v2 = v24;\n    v1 = v25;\n    v0 = v26;\n    return __fprintf_chk((unsigned int)v18, 0x1, v29, *((long long *)&v10));\n}\n"
        },
        {
            "funcName": "sub_405590",
            "funcStartAddr": "0x405590",
            "funcEndAddr": "0x4055e6",
            "decompiledFuncCode": "int sub_405590()\n{\n    unsigned int v1;  // edi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // cc_dep1\n    unsigned long long v5;  // cc_dep2\n    unsigned long v6;  // d\n    char *v7;  // rdi\n    char *v8;  // rsi\n    unsigned long long v9;  // rcx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // cc_dep1\n    char *v12;  // rdi\n    unsigned long long v13;  // rcx\n    char v14;  // cc_dep1\n    char v15;  // cc_dep2\n\n    v10 = 1;\n    if (v3 != 0)\n    {\n        v9 = 2;\n        v7 = \"C\";\n        v3 = setlocale(v1, 0x0);\n        while (v9 != 0)\n        {\n            v9 -= 1;\n            v4 = *(v8);\n            v5 = *(v7);\n            v7 = &v7[v6];\n            v8 = &v8[v6];\n            break;\n        }\n        v10 = 0;\n        v11 = (v4 > v5) - 0 - (v4 < v5);\n        if ((char)v11 != 0)\n        {\n            v12 = \"POSIX\";\n            v13 = 6;\n            while (v13 != 0)\n            {\n                v13 -= 1;\n                v14 = *(v8);\n                v15 = *(v12);\n                v12 = &v12[v6];\n                v8 = &v8[v6];\n                break;\n            }\n            return 0;\n        }\n    }\n    if (v3 == 0 || (char)v11 == 0)\n    {\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_40b9b0",
            "funcStartAddr": "0x40b9b0",
            "funcEndAddr": "0x40b9c8",
            "decompiledFuncCode": "int sub_40b9b0()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 1;\n    return sub_40b950();\n}\n"
        },
        {
            "funcName": "sub_409500",
            "funcStartAddr": "0x409500",
            "funcEndAddr": "0x409528",
            "decompiledFuncCode": "int sub_409500()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_409300();\n}\n"
        },
        {
            "funcName": "sub_403840",
            "funcStartAddr": "0x403840",
            "funcEndAddr": "0x403c3b",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    char padding_8[24];\n    unsigned long long field_20;\n    char padding_28[12];\n    unsigned int field_34;\n    char field_38;\n    char field_39;\n} struct_0;\n\ntypedef struct struct_1 {\n    struct struct_2 *field_0;\n    char padding_8[24];\n    unsigned long long field_20;\n    char padding_28[12];\n    unsigned int field_34;\n    char field_38;\n    char field_39;\n} struct_1;\n\nextern int512_t g_402790;\nextern char g_6142b4;\nextern unsigned long long g_614398;\nextern char g_6143d0;\nextern unsigned int g_6143d4;\nextern unsigned int g_6143d8;\nextern unsigned int g_6143dc;\nextern char g_6143e0;\nextern unsigned int g_614424;\nextern int512_t g_614430;\nextern unsigned int g_614438;\nextern char g_61443d;\nextern char g_614448;\nextern char g_614449;\nextern char g_61444a;\nextern char g_61444c;\nextern char g_61444d;\nextern char g_61444e;\nextern char g_61444f;\nextern unsigned long long g_614478;\n\nint sub_403840()\n{\n    struct_0 *v1;  // rdi\n    struct_1 *v2;  // rbp\n    unsigned long long v3[3];  // rdi\n    char *v4;  // rax\n    unsigned long long v5;  // rdx\n    unsigned long long v6;  // rdx\n    unsigned long long v7;  // rdx\n    unsigned int|unsigned long v8;  // ebx\n    unsigned long long v9[3];  // rdi\n    char *v10;  // rax\n    unsigned long long v11;  // rdx\n    unsigned long long v12[3];  // rdi\n    char *v13;  // rax\n    unsigned long v14;  // rdi\n    unsigned long long v15;  // r12\n    unsigned int|unsigned long v19;  // rdi\n    unsigned int v20;  // eax\n    unsigned long long v21;  // r13\n    unsigned long long v26;  // rbx\n    unsigned long long v28;  // rdi\n    unsigned long long v30[3];  // rdi\n    char *v31;  // rax\n    unsigned long long v32;  // rax\n    unsigned long long v33;  // rcx\n    unsigned long long v34;  // rbx\n    unsigned long long v35;  // rdx\n    unsigned long long v37;  // rdi\n    unsigned long long v39[3];  // rdi\n    char *v40;  // rax\n    unsigned long v42;  // rdi\n    unsigned long long v43;  // rax\n\n    v2 = v1;\n    v3 = v1->field_0;\n    v4 = v3[1];\n    if (v3[1] < v3[2])\n    {\n        v5 = &v4[1];\n        v3[1] = &v4[1];\n        v8 = *(v4);\n    }\n    else\n    {\n        v8 = __uflow(v3);\n    }\n    if ((unsigned int)v8 == 12)\n    {\n        v12 = v2->field_0;\n        v13 = v2->field_0->field_8;\n        v6 = v2->field_0->field_10;\n        if (v2->field_39 != 0)\n        {\n            if (v13 < v6)\n            {\n                v7 = &v13[1];\n                v12[1] = &v13[1];\n                v8 = *(v13);\n            }\n            else\n            {\n                v8 = __uflow(v12);\n            }\n            if (v8 == 10)\n            {\n                v9 = v2->field_0;\n                v10 = v2->field_0->field_8;\n                if (v2->field_0->field_8 < v2->field_0->field_10)\n                {\n                    v11 = &v10[1];\n                    v9[1] = &v10[1];\n                    v8 = *(v10);\n                }\n                else\n                {\n                    v8 = __uflow(v9);\n                }\n            }\n        }\n    }\n    if ((unsigned int)v8 != 12 || v2->field_39 != 0)\n    {\n        v2->field_39 = 0;\n        if (v8 != 10 && v8 != 12)\n        {\n            if (v8 != -1)\n            {\n                v15 = (unsigned int)sub_402fe0();\n                if (g_614424 <= g_614438 || g_61443d == 0)\n                {\n                    v26 = g_614398;\n                    if ((unsigned int)v15 != 0)\n                    {\n                        while (true)\n                        {\n                            v26 += 1;\n                            v28 = (char)*((char *)(v26 - 1));\n                            *((long long *)(rbp<8> + 32))();\n                            if (g_614398 + v15 - 1 + 1 == v26)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    while (true)\n                    {\n                        v30 = v2->field_0;\n                        v31 = v2->field_0->field_8;\n                        if (v2->field_0->field_8 < v2->field_0->field_10)\n                        {\n                            v30[1] = &v31[1];\n                            v31 = (unsigned int)*(v31);\n                        }\n                        else\n                        {\n                            v31 = __uflow(v30);\n                        }\n                        if (v31 == 10)\n                        {\n                            return 1;\n                        }\n                        else if (v31 != 12)\n                        {\n                            if (v31 == -1)\n                            {\n                                break;\n                            }\n                            v32 = sub_402fe0();\n                            if (g_61443d != 0)\n                            {\n                                v33 = g_614438;\n                                if (g_614424 > g_614438)\n                                {\n                                    g_614424 = g_614424;\n                                    v43 = 0;\n                                }\n                            }\n                            if (g_614424 <= g_614438 || g_61443d == 0)\n                            {\n                                v34 = g_614398;\n                                v35 = v32 - 1;\n                                while (true)\n                                {\n                                    v34 += 1;\n                                    v37 = (char)*((char *)(v34 - 1));\n                                    *((long long *)(rbp<8> + 32))();\n                                    if (v34 == g_614398 + v32 - 1 + 1)\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                        else\n                        {\n                            v39 = v2->field_0;\n                            v40 = v2->field_0->field_8;\n                            if (v2->field_0->field_8 < v2->field_0->field_10)\n                            {\n                                v39[1] = &v40[1];\n                                v42 = *(v40);\n                            }\n                            else\n                            {\n                                v42 = __uflow(v39);\n                            }\n                            if ((unsigned int)v42 == 10)\n                            {\n                                break;\n                            }\n                            ungetc(v42, v2->field_0);\n                        }\n                    }\n                    if (v31 != 10 && v31 != 12)\n                    {\n                        sub_4029a0();\n                        v43 = 1;\n                    }\n                    else if (g_614424 > g_614438 && g_61443d != 0 && v31 != 10 && v31 != -1 && v31 != 12)\n                    {\n                        return v43;\n                    }\n                }\n            }\n            if (g_614424 <= g_614438 || v8 == -1 || g_61443d == 0)\n            {\n                sub_4029a0();\n                v43 = 1;\n            }\n        }\n        if (v8 == 12)\n        {\n            v12 = v2->field_0;\n            v13 = v2->field_0->field_8;\n            v6 = v2->field_0->field_10;\n        }\n        if (v8 == 10 || v8 != -1 && v8 != 12)\n        {\n            if (g_61443d != 0 && g_614424 > g_614438)\n            {\n                g_614424 = g_614424;\n                v43 = 0;\n            }\n            if (g_614424 <= g_614438 || g_61443d == 0)\n            {\n                if (v2->field_20 != 4204432)\n                {\n                    g_6143d0 = 1;\n                    if (g_614448 != 0 && g_6142b4 == 0)\n                    {\n                        sub_402ee0();\n                    }\n                    if (g_61444f != 0 && g_61444e != 0)\n                    {\n                        v20 = g_6143d8;\n                        v21 = g_614478;\n                        g_6143d8 = 0;\n                        if (v20 > 0)\n                        {\n                            while (true)\n                            {\n                                v21 += 64;\n                                sub_4037e0();\n                                g_6143d8 = g_6143d8 + 1;\n                                if (((unsigned long long)g_6143d8 << 6) + g_614478 == v21)\n                                {\n                                    break;\n                                }\n                            }\n                        }\n                        v19 = v2->field_34;\n                        g_61444e = 0;\n                        g_6143d4 = v19;\n                        g_614430 = (g_61443d != 0? g_614438 : 0);\n                    }\n                    if (g_61444f == 0 || g_61444e == 0)\n                    {\n                        v19 = g_6143d4;\n                    }\n                    if (g_6143dc < v19)\n                    {\n                        sub_402ca0();\n                        g_6143d4 = 0;\n                    }\n                    if (g_6143e0 != 0)\n                    {\n                        sub_402dd0();\n                    }\n                }\n                if (v2->field_38 != 0)\n                {\n                    sub_4036c0();\n                }\n                g_61444d = 0;\n                v43 = 1;\n            }\n        }\n    }\n    if ((unsigned int)v8 == 12 && v2->field_39 == 0 || v8 == 12 && v2->field_39 == 0 || v8 == 12)\n    {\n        if (v6 > v13)\n        {\n            v12[1] = &v13[1];\n            v14 = *(v13);\n        }\n        else\n        {\n            v14 = __uflow(v12);\n        }\n        if ((unsigned int)v14 == 10)\n        {\n            g_61444c = 1;\n        }\n        else\n        {\n            ungetc(v14, v2->field_0);\n            g_61444c = 1;\n        }\n        if (g_614448 != 0 && g_6142b4 == 0)\n        {\n            g_6143d0 = 1;\n            sub_402ee0();\n        }\n    }\n    if ((g_614448 != 0 && ((unsigned int)v8 == 12 || v8 == 12) && (v8 == 12 || v2->field_39 == 0) && ((unsigned int)v8 == 12 || v8 != 10) && (v2->field_39 == 0 || v8 != 10) && g_6142b4 != 0 || (unsigned int)v14 != 10 && ((unsigned int)v8 == 12 || v8 == 12) && (v8 == 12 || v2->field_39 == 0) && ((unsigned int)v8 == 12 || v8 != 10) && (v2->field_39 == 0 || v8 != 10) && g_614448 == 0 || (unsigned int)v14 == 10 && ((unsigned int)v8 == 12 || v8 == 12) && (v8 == 12 || v2->field_39 == 0) && ((unsigned int)v8 == 12 || v8 != 10) && (v2->field_39 == 0 || v8 != 10) && g_614448 == 0 || v8 != -1 && v8 != 10 && v8 != 12 && (g_614424 <= g_614438 || g_61443d == 0) && ((unsigned int)v8 != 12 || v2->field_39 != 0)) && g_61444a != 0)\n    {\n        g_614449 = 1;\n    }\n    if (v8 == 10 && (unsigned int)v8 != 12 || v8 == 10 && v2->field_39 != 0 || (unsigned int)v8 != 12 && v8 != 12 || v8 != 12 && v2->field_39 != 0)\n    {\n        return v43;\n    }\n    if (g_614448 != 0 && ((unsigned int)v8 == 12 || v8 == 12) && (v8 == 12 || v2->field_39 == 0) && ((unsigned int)v8 == 12 || v8 != 10) && (v2->field_39 == 0 || v8 != 10) && g_6142b4 != 0 || (unsigned int)v14 != 10 && ((unsigned int)v8 == 12 || v8 == 12) && (v8 == 12 || v2->field_39 == 0) && ((unsigned int)v8 == 12 || v8 != 10) && (v2->field_39 == 0 || v8 != 10) && g_614448 == 0 || (unsigned int)v14 == 10 && ((unsigned int)v8 == 12 || v8 == 12) && (v8 == 12 || v2->field_39 == 0) && ((unsigned int)v8 == 12 || v8 != 10) && (v2->field_39 == 0 || v8 != 10) && g_614448 == 0 || v8 != -1 && v8 != 10 && v8 != 12 && (g_614424 <= g_614438 || g_61443d == 0) && ((unsigned int)v8 != 12 || v2->field_39 != 0) || g_6142b4 == 0 && g_614448 != 0 && ((unsigned int)v8 == 12 || v8 == 12) && (v8 == 12 || v2->field_39 == 0) && ((unsigned int)v8 == 12 || v8 != 10) && (v2->field_39 == 0 || v8 != 10))\n    {\n        sub_403410();\n        return 1;\n    }\n}\n"
        },
        {
            "funcName": "sub_4025fb",
            "funcStartAddr": "0x4025fb",
            "funcEndAddr": "0x40261a",
            "decompiledFuncCode": "extern unsigned long long program_invocation_short_name;\n\nint sub_4025fb()\n{\n    unsigned long long v1;  // rax\n\n    v1 = &program_invocation_short_name;\n    if (false)\n    {\n        v1 = 0;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_409140",
            "funcStartAddr": "0x409140",
            "funcEndAddr": "0x409160",
            "decompiledFuncCode": "int sub_409140()\n{\n    unsigned long long v1;  // r9\n    unsigned long long v2[2];  // r8\n\n    v1 = 0;\n    if (*(v2) != 0)\n    {\n        do\n        {\n            v1 += 1;\n        }\n        while (v2[v1] != 0);\n    }\n}\n"
        },
        {
            "funcName": "sub_402950",
            "funcStartAddr": "0x402950",
            "funcEndAddr": "0x402991",
            "decompiledFuncCode": "extern unsigned int g_40cdf5;\nextern unsigned int g_614298;\nextern char g_61444b;\n\nint sub_402950()\n{\n    dcgettext(0x0, 0x40cdf5, 0x5);\n    g_61444b = 1;\n    g_614298 = sub_409680();\n    return g_614298;\n}\n"
        },
        {
            "funcName": "sub_4053b0",
            "funcStartAddr": "0x4053b0",
            "funcEndAddr": "0x4053b8",
            "decompiledFuncCode": "extern unsigned long long g_614488;\n\nint sub_4053b0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long v2;  // rax\n\n    g_614488 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_408aff",
            "funcStartAddr": "0x408aff",
            "funcEndAddr": "0x408b70",
            "decompiledFuncCode": "extern uint128_t g_6145a0;\nextern uint128_t g_6145b0;\nextern uint128_t g_6145c0;\nextern unsigned long long g_6145d0;\n\nint sub_408aff()\n{\n    void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v5;  // rdx\n\n    v3 = g_6145d0;\n    *((uint128_t *)&v0) = g_6145a0;\n    *((uint128_t *)&v1) = g_6145b0;\n    *((uint128_t *)&v2) = g_6145c0;\n    *((unsigned int *)&((char *)stack_base)[4 * v5 % 32 + -64]) = (unsigned int)((unsigned long long)(!((unsigned int)((unsigned long long)(unsigned int)*((int *)&((char *)stack_base)[4 * v5 % 32 + -64]) >> ((char)((unsigned int)v5 & 31) & 31))) & 1) << ((char)((unsigned int)v5 & 31) & 31)) ^ *((int *)&((char *)stack_base)[4 * v5 % 32 + -64]);\n    return sub_4084e0();\n}\n"
        },
        {
            "funcName": "sub_40b9d0",
            "funcStartAddr": "0x40b9d0",
            "funcEndAddr": "0x40b9e3",
            "decompiledFuncCode": "int sub_40b9d0()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_40b950();\n}\n"
        },
        {
            "funcName": "sub_4088f0",
            "funcStartAddr": "0x4088f0",
            "funcEndAddr": "0x408985",
            "decompiledFuncCode": "extern unsigned long long *g_614318;\nextern unsigned long long g_614320;\nextern unsigned long long g_614328;\nextern unsigned int g_614330;\nextern unsigned long long g_6144a0;\n\nint sub_4088f0()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rbx\n    void *v3;  // rdi\n\n    v1 = g_614330;\n    if (g_614330 > 1)\n    {\n        v2 = &g_614318[3];\n        while (true)\n        {\n            v3 = *(v2);\n            v2 = &v2[2];\n            v1 = free(v3);\n            if (v2 == &g_614318[2 * (unsigned long long)(g_614330 - 2) + 5])\n            {\n                break;\n            }\n        }\n    }\n    if (g_614318[1] != 6374560)\n    {\n        v1 = free(g_614318[1]);\n        g_614320 = 0x100;\n        g_614328 = &g_6144a0;\n    }\n    if (g_614318 != 6374176)\n    {\n        v1 = free(g_614318);\n        g_614318 = &g_614320;\n    }\n    g_614330 = 1;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_40bdb0",
            "funcStartAddr": "0x40bdb0",
            "funcEndAddr": "0x40be4f",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    char field_8;\n} struct_0;\n\nint sub_40bdb0()\n{\n    char *v1;  // rbp\n    struct_0 *v3;  // rdi\n    unsigned long long v4;  // rax\n    unsigned long long v6;  // rax\n    unsigned long long v7;  // rax\n    unsigned int *v8;  // rbp\n\n    v1 = getenv(\"TZ\");\n    if (v1 != 0)\n    {\n        if (v3->field_8 != 0)\n        {\n            v4 = strcmp(&v3[1], v1);\n            if (v4 == 0)\n            {\n                return 1;\n            }\n        }\n    }\n    else\n    {\n        if (v3->field_8 == 0)\n        {\n            return 1;\n        }\n    }\n    if (v3->field_8 == 0 && v1 != 0 || v1 == 0 && v3->field_8 != 0 || v1 != 0 && v4 != 0)\n    {\n        if (v4 != 0)\n        {\n            v6 = sub_40bad0();\n            if (v6 == 0)\n            {\n                v8 = __errno_location();\n                if (v8 != 1)\n                {\n                    sub_40bb20();\n                }\n                *(v8) = *(v8);\n                return 0;\n            }\n        }\n        if (v4 == 0 || v6 != 0)\n        {\n            v4 = (unsigned int)sub_40bba0();\n            return v7;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_40ba10",
            "funcStartAddr": "0x40ba10",
            "funcEndAddr": "0x40ba26",
            "decompiledFuncCode": "int sub_40ba10()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_40b950();\n}\n"
        },
        {
            "funcName": "sub_405470",
            "funcStartAddr": "0x405470",
            "funcEndAddr": "0x405475",
            "decompiledFuncCode": "int sub_405470()\n{\n}\n"
        },
        {
            "funcName": "sub_408d10",
            "funcStartAddr": "0x408d10",
            "funcEndAddr": "0x408d21",
            "decompiledFuncCode": "int sub_408d10()\n{\n}\n"
        },
        {
            "funcName": "sub_40cd90",
            "funcStartAddr": "0x40cd90",
            "funcEndAddr": "0x40cda8",
            "decompiledFuncCode": "extern int512_t g_614268;\n\nint sub_40cd90()\n{\n}\n"
        },
        {
            "funcName": "sub_409320",
            "funcStartAddr": "0x409320",
            "funcEndAddr": "0x409341",
            "decompiledFuncCode": "int sub_409320()\n{\n    void tmp_10;  // tmp #10\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rdi\n\n    tmp_10 = v2;\n    v4 = v2 * v3;\n    v5 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_409550(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_402651",
            "funcStartAddr": "0x402651",
            "funcEndAddr": "0x4026a8",
            "decompiledFuncCode": "extern char g_614368;\nextern unsigned long long g_614370;\n\nint sub_402651()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // rax\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long long v9;  // rbx\n    unsigned long long v10;  // r12\n\n    if (g_614368 == 0)\n    {\n        v2 = stack_base + 0;\n        v1 = v5;\n        v0 = v6;\n        while (true)\n        {\n            if (g_614370 >= 0)\n            {\n                break;\n            }\n            g_614370 = g_614370 + 1;\n            *((long long *)(6372928 + (v7 + 1) * 8))();\n        }\n        v9 = v0;\n        v10 = v1;\n        g_614368 = 1;\n        return sub_4025fb();\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_402dd0",
            "funcStartAddr": "0x402dd0",
            "funcEndAddr": "0x402ec3",
            "decompiledFuncCode": "extern unsigned long long g_614270;\nextern unsigned int g_6143d8;\nextern unsigned int g_6143dc;\nextern unsigned int g_614428;\nextern unsigned int g_614430;\nextern unsigned long long stdout[7];\n\nint sub_402dd0()\n{\n    unsigned long long v0;  // [bp-0x28]\n    void tmp_31;  // tmp #31\n    unsigned long v1;  // [bp-0x20]\n    unsigned long long v2;  // [bp-0x18]\n    unsigned long long v3;  // [bp-0x10]\n    unsigned long long v4;  // [bp-0x8]\n    unsigned int|unsigned long v6;  // eax\n    unsigned long long v7;  // r14\n    unsigned long long v8;  // r13\n    unsigned long long v9;  // r12\n    unsigned long long v10;  // rbx\n    unsigned long long v11;  // r14\n    char *v12;  // rbx\n    unsigned long long v14;  // rsi\n    char *v15;  // rax\n    unsigned long long v16;  // rbp\n    unsigned long long v17;  // r12\n    unsigned int v19;  // eax\n    unsigned long long v20;  // rbx\n    unsigned long long v21;  // r12\n    unsigned long long v22;  // r13\n    unsigned long long v23;  // r14\n\n    v6 = g_614430;\n    if (g_6143d8 > 0)\n    {\n        v4 = v7;\n        v3 = v8;\n        v2 = v9;\n        v17 = g_614270;\n        v1 = stack_base + 0;\n        v16 = g_6143dc;\n        v0 = v10;\n        do\n        {\n            v12 = v17;\n            for (v11 = v16 + v17; (unsigned int)(char *)(v11 + -0x1 * v12) > 0; v17 += (tmp_31? g_6143dc : 0))\n            {\n                while (true)\n                {\n                    v14 = *(v12);\n                    v12 = &v12[1];\n                    if (v14 != 32)\n                    {\n                        if (v6 > 0)\n                        {\n                            sub_402d10();\n                            v14 = v12[-1];\n                        }\n                        v15 = stdout[5];\n                        if (stdout[5] < stdout[6])\n                        {\n                            stdout[5] = stdout[5] + 1;\n                            *((unsigned long long *)&v15) = v14;\n                        }\n                        else\n                        {\n                            __overflow();\n                        }\n                        g_614428 = g_614428 + 1;\n                        v6 = g_614430;\n                        if ((unsigned int)(char *)(v11 + -0x1 * v12) <= 0)\n                        {\n                            break;\n                        }\n                    }\n                    else\n                    {\n                        v6 = (unsigned long long)v6 + 1;\n                        g_614430 = v6;\n                    }\n                }\n                if (v14 != 32)\n                {\n                    tmp_31 = (char)(v16 % 0x80000000 & 1 ^ 1);\n                    v16 = (unsigned int)v16 - 1 - ((char)(v16 >> 31 & 1 ^ 1)? (unsigned int)v16 : 0);\n                }\n            }\n            tmp_31 = (char)(v16 % 0x80000000 & 1 ^ 1);\n            v16 = (unsigned int)v16 - 1 - ((char)(v16 >> 31 & 1 ^ 1)? (unsigned int)v16 : 0);\n            sub_402d10();\n            v19 = g_6143d8 - 1;\n            g_6143d8 = g_6143d8 - 1;\n        }\n        while (v19 > 0);\n        v20 = v0;\n        v21 = v2;\n        v22 = v3;\n        v23 = v4;\n        return g_6143d8 - 1;\n    }\n    else if (g_614430 <= 0)\n    {\n        return g_614430;\n    }\n}\n"
        },
        {
            "funcName": "sub_409680",
            "funcStartAddr": "0x409680",
            "funcEndAddr": "0x4096a1",
            "decompiledFuncCode": "int sub_409680()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long v2;  // r9\n\n    v0 = v2;\n    return sub_409590();\n}\n"
        },
        {
            "funcName": "sub_408720",
            "funcStartAddr": "0x408720",
            "funcEndAddr": "0x408733",
            "decompiledFuncCode": "extern int512_t g_6145a0;\n\nint sub_408720()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned int v3;  // esi\n\n    v2 = (unsigned int)*((int *)((v1 == 0? &g_6145a0 : v1) + 4));\n    *((unsigned int *)((v1 == 0? &g_6145a0 : v1) + 4)) = v3;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40a5e0",
            "funcStartAddr": "0x40a5e0",
            "funcEndAddr": "0x40a9ed",
            "decompiledFuncCode": "int sub_40a5e0()\n{\n    unsigned long long v0;  // [bp-0x178]\n    void tmp_11;  // tmp #11\n    char|char [3] v1;  // [bp-0x58]\n    char v2[3];  // [bp-0x50]\n    unsigned int v4;  // edx\n    unsigned long long|unsigned int|unsigned long v5;  // rdi\n    unsigned long v6;  // rbp\n    unsigned long long *v7;  // rcx\n    char *v9;  // r8\n    unsigned long v11;  // rsi\n    unsigned long long *v12;  // r15\n    unsigned int *v13;  // r12\n    unsigned int *v14;  // r12\n    unsigned long long v15;  // rbx\n    unsigned long v16;  // rax\n    unsigned int v17;  // eax\n    unsigned long long v18;  // r12\n    unsigned long long v19;  // rax\n    unsigned long long v20;  // rax\n    unsigned long long v21;  // rdx\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // rsi\n    char v25;  // sil\n    unsigned long long v26;  // r12\n    unsigned long long v27;  // r12\n    unsigned long long v28;  // rcx\n    unsigned long long v29;  // rcx\n    unsigned long long v30;  // rdx\n    unsigned long long v31;  // rsi\n    char v32[3];  // r8\n    unsigned long long v33;  // rbx\n    unsigned long long v34;  // rcx\n    unsigned long long|unsigned int v35;  // rdi\n    unsigned long long v36;  // rcx\n    unsigned long long|unsigned int v37;  // rdi\n    unsigned long long v38;  // rcx\n    unsigned long long v39;  // rcx\n    unsigned long long v40;  // rcx\n    unsigned long long v43;  // cc_dep1\n    unsigned long long v44;  // cc_dep1\n    unsigned int v45;  // cc_dep1\n    unsigned int v46;  // cc_dep1\n    unsigned int v47;  // cc_dep1\n    unsigned long long v48;  // rax\n    unsigned long long v49;  // r8\n\n    if (v4 <= 36)\n    {\n        v6 = v5;\n        v12 = (v11 == 0? stack_base + -64 : v11);\n        *(v13) = 0;\n        v13 = __errno_location();\n        v15 = (char)*((char *)v5);\n        v31 = *((long long *)(unsigned long long)__ctype_b_loc());\n        for (v16 = v5; (*((char *)(v31 + (v15 << 1) + 1)) & 32) != 0; v15 = (char)*((char *)v16))\n        {\n            v16 += 1;\n        }\n        if (v15 != 45)\n        {\n            v33 = __strtoul_internal(v5, (unsigned int)v12);\n            if (*(v12) != v5)\n            {\n                v17 = *(v14);\n                if ((*(v14) == 0 || v17 == 34) && v9 != 0)\n                {\n                    v18 = v1[0];\n                    if (v1[0] != 0)\n                    {\n                        *((char *[3])&v1[0]) = v1;\n                        v20 = strchr(v9, v18);\n                        v32 = v1;\n                    }\n                }\n            }\n            else\n            {\n                *((char **)&v1[0]) = v9;\n                if (v9 != 0)\n                {\n                    v18 = (char)*((char *)v6);\n                    if (*((char *)v6) != 0)\n                    {\n                        v33 = 1;\n                        v19 = strchr(v9, (char)*((char *)v5));\n                        v32 = v1;\n                    }\n                }\n            }\n        }\n        if (*(v12) == v5 && *((char *)v6) != 0 && v15 != 45 && v9 != 0 && v19 != 0 || v15 != 45 && *(v12) != v5 && v1[0] != 0 && v9 != 0 && (*(v14) == 0 || v17 == 34) && v20 != 0)\n        {\n            v21 = v18 - 69;\n            if ((v18 - 69 & 255) <= 47)\n            {\n                *((unsigned long long *)&v1) = v21;\n                v0 = 142129060940101;\n                if (((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) != 0)\n                {\n                    *((char *[3])&v2[0]) = v32;\n                    v22 = strchr(v9, 0x30);\n                    v32 = v2;\n                    if (v22 != 0)\n                    {\n                        v23 = v32[1];\n                        if (v32[1] != 68)\n                        {\n                            if (v23 != 105)\n                            {\n                                v30 = v1;\n                                if (v23 != 66)\n                                {\n                                    /* goto *((long long *)(rdx<8> * 8 + 0x410c00)); */\n                                }\n                            }\n                            else\n                            {\n                                v24 = 0;\n                                v30 = 0x400;\n                                v25 = v32[2] == 66;\n                                v31 = rsi<8> * 2 + 1;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if ((*(v12) == v5 && *((char *)v6) != 0 && v15 != 45 && v9 != 0 && v19 != 0 || v15 != 45 && *(v12) != v5 && v1[0] != 0 && v9 != 0 && (*(v14) == 0 || v17 == 34) && v20 != 0) && (v18 - 69 & 255) <= 47 && ((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) != 0 && v22 == 0 || (*(v12) == v5 && *((char *)v6) != 0 && v15 != 45 && v9 != 0 && v19 != 0 || v15 != 45 && *(v12) != v5 && v1[0] != 0 && v9 != 0 && (*(v14) == 0 || v17 == 34) && v20 != 0) && (v18 - 69 & 255) <= 47 && ((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) == 0 || (*(v12) == v5 && *((char *)v6) != 0 && v15 != 45 && v9 != 0 && v19 != 0 || v15 != 45 && *(v12) != v5 && v1[0] != 0 && v9 != 0 && (*(v14) == 0 || v17 == 34) && v20 != 0) && (v18 - 69 & 255) > 47)\n        {\n            v31 = 1;\n            v30 = 0x400;\n        }\n        if (...)\n        {\n            v31 = 2;\n            v30 = 1000;\n        }\n        if (...)\n        {\n            v26 = (unsigned int)v18 - 66;\n            switch (v26)\n            {\n            case 0:\n                if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                {\n                    v33 *= 0x400;\n                    break;\n                }\n            case 3:\n                v36 = v30;\n                v37 = 6;\n                do\n                {\n                    v33 = v33 * v36;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v44 = v37;\n                    v37 -= 1;\n                }\n                while (v44 != 1);\n            case 5: case 37:\n                v28 = v30;\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v48 = tmp_11 * v28 * v28;\n                    v33 = v48;\n                }\n                else\n                {\n                    v33 = -1;\n                }\n            case 9: case 41:\n                v33 = v33 * v30;\n                if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                {\n                    v33 = -1;\n                    break;\n                }\n            case 11: case 43:\n                v29 = v30;\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v33 = tmp_11 * v29;\n                    break;\n                }\n            case 14:\n                v34 = v30;\n                v35 = 5;\n                do\n                {\n                    v33 = v33 * v34;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v43 = v35;\n                    v35 -= 1;\n                }\n                while (v43 != 1);\n            case 18: case 50:\n                v38 = v30;\n                v5 = 4;\n                do\n                {\n                    v33 = v33 * v38;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v45 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v45 != 1);\n            case 23:\n                v40 = v30;\n                v5 = 8;\n                do\n                {\n                    v33 = v33 * v40;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v47 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v47 != 1);\n                break;\n            case 24:\n                v39 = v30;\n                v5 = 7;\n                do\n                {\n                    v33 = v33 * v39;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v46 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v46 != 1);\n            case 32:\n                if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                {\n                    v33 *= 0x200;\n                    break;\n                }\n            case 33:\n                v49 = &v32[v31];\n                *(v12) = v49;\n            case 53:\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v33 *= 2;\n                    break;\n                }\n            default:\n                *(v7) = v33;\n            }\n            if (v26 <= 53)\n            {\n                v27 = v26;\n            }\n        }\n        v31 = 1;\n        v31 = 1;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        *(v7) = v33;\n        return stack_base + 0;\n    }\n    __assert_fail(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_403490",
            "funcStartAddr": "0x403490",
            "funcEndAddr": "0x40369b",
            "decompiledFuncCode": "typedef struct struct_0 {\n    struct struct_1 *field_0;\n    char padding_8[49];\n    char field_39;\n} struct_0;\n\ntypedef struct struct_2 {\n    unsigned long long field_0;\n    char padding_8[49];\n    char field_39;\n} struct_2;\n\ntypedef struct struct_3 {\n    char padding_0[57];\n    char field_39;\n} struct_3;\n\nextern char g_614280;\nextern unsigned int g_614284;\nextern unsigned int g_614298;\nextern char g_614390;\nextern char g_61444f;\nextern unsigned long long g_614478;\n\nint sub_403490()\n{\n    struct_0 *v1;  // rdi\n    struct_2 *v2;  // r13\n    unsigned long long v3[3];  // rbx\n    char *v4;  // rax\n    unsigned long long|char v6;  // rbp\n    unsigned long long v7;  // rax\n    char *v8;  // rax\n    unsigned long long v9;  // rax\n    char *v10;  // rax\n    char *v11;  // rax\n    struct_3 *v12;  // rax\n    char *v13;  // rax\n    unsigned long v14;  // rdi\n    unsigned long v16;  // rsi\n\n    v2 = v1;\n    v3 = v1->field_0;\n    v4 = v1->field_0->field_8;\n    if (v1->field_0->field_8 < v1->field_0->field_10)\n    {\n        v1->field_0->field_8 = v1->field_0->field_8 + 1;\n        v9 = *(v4);\n    }\n    else\n    {\n        v9 = __uflow(v1->field_0);\n    }\n    if ((unsigned int)v9 != 12)\n    {\n        v2->field_39 = 0;\n        v6 = 0;\n    }\n    else if (v2->field_39 != 0)\n    {\n        v8 = v3[1];\n        if (v3[1] < v3[2])\n        {\n            v3[1] = &v8[1];\n            v9 = *(v8);\n        }\n        else\n        {\n            v9 = __uflow((unsigned int)v3);\n        }\n        if ((unsigned int)v9 == 10)\n        {\n            v10 = v3[1];\n            if (v3[1] < v3[2])\n            {\n                v3[1] = &v10[1];\n                v9 = *(v10);\n            }\n            else\n            {\n                v9 = __uflow((unsigned int)v3);\n            }\n        }\n        v2->field_39 = 0;\n        v6 = (unsigned int)v9 == 12;\n    }\n    else\n    {\n        v6 = g_614390;\n        v7 = g_614390;\n        if (g_614390 != 0)\n        {\n            v2->field_39 = 1;\n        }\n        else\n        {\n            v6 = 1;\n        }\n    }\n    if ((v2->field_39 != 0 || (unsigned int)v9 != 12) && g_614390 != 0)\n    {\n        v2->field_39 = 1;\n    }\n    if (g_614390 == 0 && v2->field_39 != 0 || g_614390 == 0 && (unsigned int)v9 != 12 || (unsigned int)v9 != 10 && v2->field_39 != 0 || (unsigned int)v9 != 10 && (unsigned int)v9 != 12)\n    {\n        while ((unsigned int)v9 != -1 && (unsigned int)v9 != 12 && (unsigned int)v9 != 10)\n        {\n            v11 = v3[1];\n            if (v3[1] < v3[2])\n            {\n                v3[1] = &v11[1];\n                v9 = *(v11);\n            }\n            else\n            {\n                v9 = __uflow((unsigned int)v3);\n            }\n        }\n        if ((unsigned int)v9 != 10)\n        {\n            v7 = g_614390;\n        }\n        else if ((unsigned int)v9 != 12 && (unsigned int)v9 != 10)\n        {\n            v9 = sub_4029a0();\n        }\n        v9 = sub_4029a0();\n        v7 = g_614390;\n    }\n    if ((g_614390 == 0 && v2->field_39 != 0 || g_614390 == 0 && (unsigned int)v9 != 12 || (unsigned int)v9 != 10 && g_614390 != 0 || v2->field_39 == 0 && (unsigned int)v9 == 12 && g_614390 != 0) && v7 != 0)\n    {\n        if (g_61444f == 0)\n        {\n            v12 = g_614478;\n            if (g_614298 != 0)\n            {\n                do\n                {\n                    v12->field_39 = 0;\n                    v12 = &v12[1].padding_0[6];\n                }\n                while (v12 != ((unsigned long long)(g_614298 - 1) + 1 << 6) + g_614478);\n            }\n        }\n        else\n        {\n            v2->field_39 = 0;\n        }\n    }\n    if (g_614390 == 0 || (unsigned int)v9 != 10 || v2->field_39 == 0 && (unsigned int)v9 == 12)\n    {\n        v13 = v3[1];\n        if (v3[1] < v3[2])\n        {\n            v3[1] = &v13[1];\n            v14 = *(v13);\n        }\n        else\n        {\n            v14 = __uflow((unsigned int)v3);\n        }\n        if ((unsigned int)v14 == 10)\n        {\n            v9 = sub_403410();\n        }\n        else\n        {\n            ungetc(v14, v3);\n            v9 = sub_403410();\n        }\n    }\n    if (g_614280 != 0 && ((unsigned int)v16 == 1 || g_61444f != 1) && v6 == 0)\n    {\n        g_614284 = g_614284 + 1;\n    }\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_408ae0",
            "funcStartAddr": "0x408ae0",
            "funcEndAddr": "0x408aec",
            "decompiledFuncCode": "int sub_408ae0()\n{\n}\n"
        },
        {
            "funcName": "sub_4029a0",
            "funcStartAddr": "0x4029a0",
            "funcEndAddr": "0x402a9b",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    char padding_8[8];\n    unsigned int field_10;\n    char padding_14[28];\n    unsigned int field_30;\n} struct_0;\n\nextern unsigned int g_614298;\nextern unsigned int g_614410;\nextern char g_61444f;\nextern unsigned long long g_614478;\n\nint sub_4029a0()\n{\n    unsigned long long v0;  // [bp-0x8]\n    struct_0 *v2;  // rdi\n    unsigned long v3;  // rax\n    unsigned long long v4;  // rbx\n    struct_0 *v5;  // rbx\n    char *v6;  // rdi\n    unsigned long long v8;  // rbx\n    unsigned long long|unsigned int [13] v9;  // rax\n    unsigned long long v10;  // rbx\n    unsigned long long v11;  // rbx\n    unsigned int v12;  // ecx\n    unsigned long long v13;  // rbx\n\n    if (v2->field_10 != 3)\n    {\n        v0 = v4;\n        v5 = v2;\n        v6 = v2->field_0;\n        if ((*(v6) & 32) == 0)\n        {\n            v9 = fileno(v6);\n            if ((unsigned int)v9 != 0)\n            {\n                v9 = sub_40aa20();\n                if ((unsigned int)v9 != 0)\n                {\n                    v10 = (unsigned int)sub_408bb0();\n                    error(0x1, *(__errno_location()), \"%s\");\n                }\n            }\n            if ((unsigned int)v9 == 0 || (unsigned int)v9 == 0)\n            {\n                if (g_61444f == 0)\n                {\n                    v9 = g_614478;\n                    if (g_614298 != 0)\n                    {\n                        do\n                        {\n                            v12 = v9[5 + 1];\n                            v9[2] = 3;\n                            if (v12 == 0)\n                            {\n                                v9[6] = 0;\n                            }\n                            v9 = &v9[8];\n                        }\n                        while (v9 != ((unsigned long long)(g_614298 - 1) + 1 << 6) + g_614478);\n                        g_614410 = g_614410 - 1;\n                        v13 = v0;\n                        return v9;\n                    }\n                }\n                else\n                {\n                    v5->field_10 = 3;\n                    v5->field_30 = 0;\n                }\n                if (g_614298 == 0 || g_61444f != 0)\n                {\n                    g_614410 = g_614410 - 1;\n                    v11 = v0;\n                    return v9;\n                }\n            }\n        }\n        else\n        {\n            v8 = (unsigned int)sub_408bb0();\n            error(0x1, *(__errno_location()), \"%s\");\n        }\n    }\n    else\n    {\n        return v3;\n    }\n}\n"
        },
        {
            "funcName": "sub_4093a0",
            "funcStartAddr": "0x4093a0",
            "funcEndAddr": "0x4093c1",
            "decompiledFuncCode": "int sub_4093a0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rdx\n    unsigned long long v4;  // rax\n\n    v4 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, rdx<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_409550(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_40aa20",
            "funcStartAddr": "0x40aa20",
            "funcEndAddr": "0x40aa98",
            "decompiledFuncCode": "int sub_40aa20()\n{\n    unsigned int v0;  // [bp+0x0]\n    void *v2;  // rdi\n    unsigned long long v4;  // rax\n    unsigned long long v8;  // rax\n\n    if (fileno(v2) >= 0)\n    {\n        v4 = __freading();\n        if ((v4 == 0 || (unsigned long long)lseek(fileno(v2), 0x0, 0x1) != -1) && sub_40abe0() != 0)\n        {\n            v8 = fclose(v2);\n            if (v0 != 0)\n            {\n                *(__errno_location()) = v0;\n                v8 = -18446744069414584321;\n            }\n            return v8;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_403410",
            "funcStartAddr": "0x403410",
            "funcEndAddr": "0x40347e",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned int field_10;\n} struct_0;\n\nextern unsigned int g_614298;\nextern unsigned int g_614410;\nextern char g_61444f;\nextern unsigned long long g_614478;\n\nint sub_403410()\n{\n    struct_0 *v1;  // rax\n    unsigned int *v2;  // rdi\n    unsigned int *v3;  // rsi\n    unsigned long v4;  // rax\n    unsigned int *v5;  // rsi\n\n    if (g_61444f == 0)\n    {\n        v1 = g_614478;\n        if (g_614298 != 0)\n        {\n            do\n            {\n                v1->field_10 = !(0 - (unsigned int)(char)(*((char *)6374068) < 1)) + 2;\n                v1 = &v1[3].padding_0[4];\n            }\n            while (v1 != ((unsigned long long)(g_614298 - 1) + 1 << 6) + g_614478);\n        }\n        *(v5) = 0;\n        g_614410 = g_614410 - 1;\n        return v1;\n    }\n    *(v2) = 2;\n    g_614410 = g_614410 - 1;\n    *(v3) = 0;\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_4087e2",
            "funcStartAddr": "0x4087e2",
            "funcEndAddr": "0x40880b",
            "decompiledFuncCode": "int sub_4087e2()\n{\n    unsigned long v0;  // [bp-0x30]\n    unsigned long v1;  // [bp-0x28]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v4;  // [bp-0x10]\n    unsigned long v5;  // [bp-0x8]\n    unsigned long v7;  // r15\n    unsigned long v8;  // r14\n    unsigned long v9;  // r13\n    unsigned long v10;  // r12\n    unsigned long v11;  // rbx\n\n    v5 = v7;\n    v4 = v8;\n    v3 = v9;\n    v2 = v10;\n    v1 = stack_base + 0;\n    v0 = v11;\n}\n"
        },
        {
            "funcName": "sub_40c760",
            "funcStartAddr": "0x40c760",
            "funcEndAddr": "0x40c7e0",
            "decompiledFuncCode": "int sub_40c760()\n{\n    unsigned long v0;  // [bp-0x28]\n    unsigned long v1;  // [bp-0x20]\n    unsigned long v2;  // [bp-0x18]\n    unsigned long v3;  // [bp-0x10]\n    unsigned long v4;  // [bp+0x8]\n    unsigned int v5[8];  // rax\n    unsigned long long v6;  // r9\n    unsigned long long v8;  // rax\n\n    v5 = v4;\n    if (v4 != 0)\n    {\n        v3 = v5[0];\n        v2 = v5[1];\n        v1 = v5[1];\n        v0 = v5[3 + 1];\n        v8 = (unsigned int)sub_40c640() + v6;\n        if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x4<64>, rax<8>, rbx<8>, cc_ndep<8>)))\n        {\n            return v8;\n        }\n    }\n    if (v4 == 0 || (char)[D] amd64g_calculate_condition(0x0<64>, 0x4<64>, rax<8>, rbx<8>, cc_ndep<8>))\n    {\n        if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x4<64>, rax<8>, rbx<8>, cc_ndep<8>)))\n        {\n            return (9223372036854775805 < v6? v6 - 1 : 9223372036854775807);\n        }\n        else if (v6 < 9223372036854775810)\n        {\n            return v6 + 1;\n        }\n        return 0x8000000000000000;\n    }\n}\n"
        },
        {
            "funcName": "sub_4052e0",
            "funcStartAddr": "0x4052e0",
            "funcEndAddr": "0x4053a7",
            "decompiledFuncCode": "extern unsigned int g_40e158;\n\nint sub_4052e0()\n{\n    unsigned long v0;  // [bp-0x20]\n    char v2[2];  // rdi\n    unsigned long long v3;  // rax\n    char *v4;  // rdx\n    unsigned long long v5;  // rax\n    unsigned int *v6;  // rcx\n    unsigned long long v7;  // rbp\n\n    v3 = v2[0];\n    if ((unsigned int)v2[0] - 48 > 9)\n    {\n        *(v4) = v2[0];\n        v3 = v2[1];\n    }\n    if (v3 == 0)\n    {\n        return v3;\n    }\n    v5 = sub_409e00();\n    if (v5 == 0 && v0 - 1 <= 2147483646)\n    {\n        *(v6) = v0;\n        return v0;\n    }\n    if (v0 - 1 > 2147483646 || v5 != 0)\n    {\n        v7 = (unsigned int)sub_408d30();\n        error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x40e158, 0x5));\n        sub_404de0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_408ba0",
            "funcStartAddr": "0x408ba0",
            "funcEndAddr": "0x408baa",
            "decompiledFuncCode": "int sub_408ba0()\n{\n}\n"
        },
        {
            "funcName": "sub_4027f0",
            "funcStartAddr": "0x4027f0",
            "funcEndAddr": "0x402816",
            "decompiledFuncCode": "extern unsigned int g_40cde4;\n\nint sub_4027f0()\n{\n    error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40cde4, 0x5));\n}\n"
        },
        {
            "funcName": "sub_40ac80",
            "funcStartAddr": "0x40ac80",
            "funcEndAddr": "0x40ad55",
            "decompiledFuncCode": "int sub_40ac80()\n{\n    unsigned int v1[13];  // rsi\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rbp\n    unsigned long long v4;  // rbx\n    unsigned long long v5;  // r9\n    unsigned long long v6;  // r8\n    unsigned long long v7;  // r14\n    unsigned long long v8;  // rdx\n    unsigned long v9;  // rdi\n    unsigned long long *v10;  // rax\n    unsigned long long *v12;  // rdx\n    unsigned long long v13;  // rcx\n    unsigned long long v14;  // r10\n    unsigned long long *v15;  // rax\n    unsigned long long *v17;  // rdx\n    unsigned long long v18;  // rcx\n    unsigned int v19;  // r9d\n\n    v2 = v1[5 + 1];\n    v3 = v1[0];\n    v4 = (int)v1[6];\n    v5 = v1[5 + 1];\n    v14 = v1[0];\n    while ((unsigned int)v14 > v1[6])\n    {\n        for (v6 = (int)v1[6]; v5 < v1[6]; v19 = v5 + v7)\n        {\n            v7 = v14 - v6;\n            v8 = v6 - v5;\n            if ((unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n            {\n                v14 -= v8;\n                v10 = v9 + v5 * 8;\n                v12 = v14 - v5;\n                do\n                {\n                    v13 = *(v10);\n                    *(v10) = *((long long *)((char *)v10 + 0x8 * v12));\n                    *((unsigned long long *)((char *)v10 + 0x8 * v12)) = v13;\n                    v10 = &v10[1];\n                }\n                while (v9 + 8 + ((unsigned int)v8 - 1 + v5) * 8 != v10);\n                if ((unsigned int)v14 <= (unsigned int)v6)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v15 = v9 + v5 * 8;\n                v17 = v4 - v5;\n                do\n                {\n                    v18 = *(v15);\n                    *(v15) = *((long long *)((char *)v15 + 0x8 * v17));\n                    *((unsigned long long *)((char *)v15 + 0x8 * v17)) = v18;\n                    v15 = &v15[1];\n                }\n                while (v15 != v9 + 8 + (v7 - 1 + v5) * 8);\n            }\n        }\n        if (v5 >= v1[6] || (unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n        {\n            v1[6] = v3;\n            v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n            return stack_base + 0 - v6;\n        }\n    }\n    v1[6] = v3;\n    v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n    return stack_base + 0 - v6;\n}\n"
        },
        {
            "funcName": "main",
            "funcStartAddr": "0x401d40",
            "funcEndAddr": "0x4025c9",
            "decompiledFuncCode": "extern unsigned int g_40ce53;\nextern char g_40ce63;\nextern unsigned int g_40cef7;\nextern unsigned int g_40cf23;\nextern unsigned int g_40e198;\nextern unsigned int g_40e208;\nextern unsigned int g_40e240;\nextern unsigned int g_40e270;\nextern unsigned int g_40e2a0;\nextern unsigned int g_40e2c0;\nextern unsigned int g_40e2f0;\nextern unsigned int g_40e320;\nextern unsigned int g_40e360;\nextern unsigned long long g_614270;\nextern unsigned int g_61427c;\nextern char g_614280;\nextern unsigned int g_6142ac;\nextern unsigned int g_6142b0;\nextern char g_6142b4;\nextern char g_6142b5;\nextern unsigned int g_61433c;\nextern unsigned long long g_614398;\nextern unsigned long long g_6143b8;\nextern char *g_6143c0;\nextern char *g_6143c8;\nextern unsigned int g_6143dc;\nextern char g_6143e0;\nextern char g_6143e1;\nextern char g_6143e8;\nextern char g_6143e9;\nextern char g_6143ea;\nextern unsigned long long g_6143f0;\nextern char g_6143fc;\nextern unsigned long long g_614418;\nextern char g_614420;\nextern unsigned int g_61442c;\nextern char g_614434;\nextern char g_614435;\nextern char g_61443c;\nextern char g_61443d;\nextern char g_614444;\nextern char g_614445;\nextern char g_614446;\nextern char g_614447;\nextern char g_61444a;\nextern char g_61444b;\nextern char g_61444f;\nextern unsigned long long g_614450;\nextern unsigned long long g_614458;\nextern unsigned long long g_614470;\nextern unsigned long long g_614478;\nextern char *g_614630;\n\nint main()\n{\n    unsigned long long v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned long long v2;  // [bp-0x58]\n    unsigned int v3;  // [bp-0x50]\n    char v4;  // [bp-0x4b]\n    char v5;  // [bp-0x4a]\n    char v6;  // [bp-0x49]\n    unsigned int v7;  // [bp-0x44]\n    unsigned long long v8;  // [bp-0x40]\n    unsigned long long v10;  // r15\n    unsigned long long v11;  // rdi\n    unsigned long long v17;  // rcx\n    unsigned long long v18;  // rdx\n    unsigned long long v19;  // r13\n    unsigned long long v20;  // rbx\n    char *v21;  // rax\n    unsigned long long v23;  // rdi\n    unsigned long long v24;  // rax\n    unsigned long long v31;  // rax\n    unsigned long long v32;  // rdx\n    unsigned long long v36;  // rbx\n    unsigned long long v38;  // rax\n    unsigned long long v39;  // rax\n    unsigned long long v40;  // rax\n    unsigned long long v42;  // rdx\n    unsigned long v43;  // rsi\n    unsigned long long *v44;  // rax\n    unsigned int v45;  // esi\n    unsigned long long v46;  // rcx\n    unsigned long long v47;  // rdx\n    unsigned long long v48;  // r14\n    unsigned long long v50;  // rbx\n\n    v10 = 0;\n    v8 = 0;\n    sub_407110();\n    setlocale(0x6, 0x40ce63);\n    bindtextdomain(0x40cef7, 0x40e198);\n    textdomain(0x40cef7);\n    sub_40cd90();\n    if ((unsigned int)v11 > 1)\n    {\n        v10 = (unsigned int)sub_409300();\n    }\n    v6 = 0;\n    v20 = 0;\n    v19 = 0;\n    v48 = 0;\n    v5 = 0;\n    v4 = 0;\n    while (true)\n    {\n        v7 = -1;\n        if (!(v3 != -1))\n        {\n            if (v19 != 0)\n            {\n                sub_402950();\n                free(v19);\n            }\n            if (g_6143c0 == 0)\n            {\n                v38 = getenv(\"POSIXLY_CORRECT\");\n                if (v38 != 0)\n                {\n                    v39 = sub_405590();\n                    if (v39 == 0)\n                    {\n                        v40 = \"%b %e %H:%M %Y\";\n                    }\n                }\n                if (v38 == 0 || v39 != 0)\n                {\n                    v40 = \"%Y-%m-%d \";\n                }\n                g_6143c0 = v40;\n            }\n            getenv(\"TZ\");\n            g_6143b8 = (unsigned int)sub_40bba0();\n            if (g_614418 == 0)\n            {\n                g_614418 = 1;\n            }\n            if (g_61444f != 0)\n            {\n                if (g_61444b != 0)\n                {\n                    error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40e320, 0x5));\n                }\n                else if (g_614445 != 0)\n                {\n                    error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40e360, 0x5));\n                }\n            }\n            if (g_61444f == 0 || g_61444b == 0 && g_614445 == 0)\n            {\n                if (v4 != 0)\n                {\n                    if (v5 != 0)\n                    {\n                        if (g_61444f == 0 && g_61444b == 0)\n                        {\n                            g_61443c = 1;\n                        }\n                        if (g_61444f != 0 || g_61444b != 0)\n                        {\n                            g_61443d = 1;\n                        }\n                    }\n                    else if (g_6143e0 != 1)\n                    {\n                        if (v6 != 0 && (g_61444f != 0 || g_61444b != 0) && g_61443d == 0)\n                        {\n                            g_61443c = 1;\n                        }\n                    }\n                    if (v6 != 0 && (g_61444f != 0 || g_61444b != 0) && (v5 != 0 || g_6143e0 != 1) && (g_61443d != 0 || v5 != 0 || g_6143dc > 0))\n                    {\n                        g_6143e0 = 1;\n                    }\n                }\n                v42 = g_61433c;\n                if (g_61433c > g_61433c)\n                {\n                    v44 = v43 + v42 * 8;\n                    v45 = g_61433c - v42 + v48;\n                    do\n                    {\n                        v46 = *(v44);\n                        v47 = v48;\n                        v48 = (unsigned int)v48 + 1;\n                        v44 = &v44[1];\n                        *((unsigned long long *)(v10 + v47 * 8)) = v46;\n                    }\n                    while ((unsigned int)v48 != v45);\n                    g_61433c = v11;\n                }\n                if ((unsigned int)v48 == 0)\n                {\n                    sub_403e40();\n                }\n                else if (g_61444f == 0)\n                {\n                    v50 = v10 + (v48 - 1) * 8 + 8;\n                    while (true)\n                    {\n                        v10 += 8;\n                        sub_403e40();\n                        if (v50 == v10)\n                        {\n                            break;\n                        }\n                    }\n                }\n                else\n                {\n                    sub_403e40();\n                }\n                free(g_6143f0);\n                free(g_614398);\n                free(g_614478);\n                free(g_614458);\n                free(g_614450);\n                free(g_614470);\n                if (g_614446 != 0)\n                {\n                    if ((char)(sub_40aa20() + 1 == 0))\n                    {\n                        break;\n                    }\n                }\n                return (unsigned long long)g_614420;\n            }\n        }\n        else if ((unsigned int)v1 > 9)\n        {\n            v18 = v3 + 131;\n            switch (v3 + 131)\n            {\n            case 0:\n                v1 = (unsigned long long)v3 - 48;\n                v0 = 0;\n                sub_4091c0();\n                exit(0x0); /* do not return */\n            case 1:\n                sub_404de0(); /* do not return */\n            case 132:\n                v21 = g_614630;\n                if (*(g_614630) == 43 && g_614418 == 0)\n                {\n                    v31 = sub_402820();\n                    if (v31 == 0)\n                    {\n                        v21 = g_614630;\n                    }\n                }\n                if (v31 == 0 || *(g_614630) != 43 || g_614418 != 0)\n                {\n                    v32 = v48;\n                    v20 = 0;\n                    v48 = (unsigned int)v48 + 1;\n                    *((char **)(v10 + v32 * 8)) = v21;\n                    break;\n                }\n            case 199:\n                v20 = 0;\n                g_6143c0 = g_614630;\n                break;\n            case 201: case 233:\n                g_614447 = 1;\n                v20 = 0;\n                break;\n            case 205:\n                g_61443c = 1;\n                v20 = 0;\n                break;\n            case 209:\n                v20 = 0;\n                g_614280 = 0;\n                dcgettext(0x0, 0x40e270, 0x5);\n                g_61427c = sub_409680();\n                break;\n            case 214:\n                g_6143e0 = 1;\n                g_614270 = &g_40ce63;\n                g_6143dc = 0;\n                v6 = 0;\n                if (g_614630 != 0)\n                {\n                    sub_402920();\n                    v20 = 0;\n                    break;\n                }\n            case 215:\n                g_6142b5 = 0;\n                v20 = 0;\n                g_61444a = 0;\n                break;\n            case 218:\n                v20 = 0;\n                g_61443d = 1;\n                dcgettext(0x0, 0x40e2f0, 0x5);\n                v5 = 0;\n                g_6142ac = sub_409680();\n                break;\n            case 228:\n                g_614445 = 1;\n                v20 = 0;\n                g_6142b4 = 0;\n                break;\n            case 229:\n                g_614444 = 1;\n                v20 = 0;\n                break;\n            case 230:\n                g_6143e9 = 1;\n                v20 = 0;\n                break;\n            case 231:\n                g_6143e8 = 1;\n                v20 = 0;\n                break;\n            case 232:\n                if (g_614630 != 0)\n                {\n                    sub_4052e0();\n                }\n                g_614435 = 1;\n                v20 = 0;\n            case 235:\n                v20 = 0;\n                g_6143c8 = g_614630;\n                break;\n            case 236:\n                if (g_614630 != 0)\n                {\n                    sub_4052e0();\n                }\n                g_614434 = 1;\n                v20 = 0;\n            case 239:\n                v20 = 0;\n                dcgettext(0x0, 0x40e240, 0x5);\n                g_6142b0 = sub_409680();\n                break;\n            case 240:\n                g_61444f = 1;\n                v20 = 0;\n                g_6142b4 = 0;\n                break;\n            case 241:\n                g_6143fc = 1;\n                if (g_614630 != 0)\n                {\n                    v20 = 0;\n                    sub_4052e0();\n                    break;\n                }\n            case 242:\n                v20 = 0;\n                dcgettext(0x0, 0x40e2a0, 0x5);\n                g_61442c = sub_409680();\n                break;\n            case 245:\n                g_6143e1 = 1;\n                v20 = 0;\n                break;\n            case 246:\n                v4 = g_6143e0;\n                v6 = g_6143e0;\n                if (g_6143e0 == 0)\n                {\n                    if (g_614630 != 0)\n                    {\n                        sub_402920();\n                        v20 = 0;\n                        v6 = 1;\n                        v4 = 1;\n                    }\n                    else\n                    {\n                        v6 = 1;\n                        v20 = 0;\n                        v4 = 1;\n                    }\n                }\n            case 247:\n                g_6142b5 = 0;\n                v20 = 0;\n                g_61444a = 1;\n                break;\n            case 249:\n                g_6143ea = 1;\n                v20 = 0;\n                break;\n            case 250:\n                dcgettext(0x0, 0x40e2c0, 0x5);\n                v4 = g_61443d;\n                v5 = g_61443d;\n                if (g_61443d == 0)\n                {\n                    g_6142ac = sub_409680();\n                    v20 = 0;\n                    v5 = 1;\n                    v4 = 1;\n                    break;\n                }\n            case 259:\n                v20 = 0;\n                sub_402950();\n                v23 = v19;\n                v19 = 0;\n                free(v23);\n                v8 = 0;\n                break;\n            case 260:\n                if (g_614630 != 0)\n                {\n                    v24 = sub_402820();\n                    if (v24 == 0)\n                    {\n                        v36 = (unsigned int)sub_408d30();\n                        error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40cf23, 0x5));\n                    }\n                }\n                else\n                {\n                    error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40e208, 0x5));\n                }\n            default:\n                sub_404de0(); /* do not return */\n            }\n            if (g_614630 == 0 || g_61443d != 0 || g_6143e0 != 0 || v24 != 0 && g_614630 != 0 || *(g_614630) == 43 && g_614418 == 0 && v31 != 0)\n            {\n                v20 = 0;\n            }\n        }\n        else\n        {\n            v17 = v20 + 1;\n            if (v20 + 1 >= v8)\n            {\n                v3 = sub_40b9d0();\n                v2 = v20;\n                v19 = (unsigned int)sub_409460();\n            }\n            *((char *)(v19 + v20)) = v3;\n            v20 = v17;\n            *((char *)(v19 + v17)) = 0;\n        }\n    }\n    error(0x1, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x40ce53, 0x5));\n}\n"
        },
        {
            "funcName": "sub_40b9f0",
            "funcStartAddr": "0x40b9f0",
            "funcEndAddr": "0x40ba05",
            "decompiledFuncCode": "int sub_40b9f0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_40b380();\n}\n"
        },
        {
            "funcName": "sub_40aaa0",
            "funcStartAddr": "0x40aaa0",
            "funcEndAddr": "0x40abcc",
            "decompiledFuncCode": "extern unsigned int g_6145d8;\n\nint sub_40aaa0()\n{\n    unsigned int v0;  // [bp-0x60]\n    unsigned long v1;  // [bp-0x58]\n    unsigned long v2;  // [bp-0x50]\n    unsigned long v3;  // [bp-0x38]\n    unsigned long v4;  // [bp-0x30]\n    unsigned int v6;  // [bp+0x100008]\n    unsigned long v7;  // rdx\n    unsigned long v8;  // rcx\n    unsigned int v9;  // rsi\n    unsigned int v10;  // edi\n    unsigned int v11;  // edi\n    unsigned int *v12;  // rax\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rax\n    unsigned long long v15;  // rbx\n    unsigned long long v17;  // rax\n\n    v3 = v7;\n    v1 = stack_base + 8;\n    v4 = v8;\n    v0 = 16;\n    v2 = stack_base + -72;\n    if (v9 == 1030)\n    {\n        v0 = 24;\n        if (g_6145d8 >= 0)\n        {\n            v15 = (unsigned int)fcntl(v11, v9);\n            if ((unsigned int)v15 < 0)\n            {\n                v12 = __errno_location();\n                if (*(v12) == 22)\n                {\n                    v15 = (unsigned int)sub_40aaa0();\n                    if ((unsigned int)v15 >= 0)\n                    {\n                        g_6145d8 = -1;\n                    }\n                }\n            }\n            if (*(v12) != 22 || (unsigned int)v15 >= 0)\n            {\n                g_6145d8 = 1;\n            }\n        }\n        else\n        {\n            v15 = (unsigned int)sub_40aaa0();\n        }\n        if ((*(v12) == 22 || g_6145d8 < 0) && ((unsigned int)v15 < 0 || g_6145d8 < 0) && (g_6145d8 == -1 || g_6145d8 >= 0) && (g_6145d8 < 0 || (unsigned int)v15 >= 0) && ((unsigned int)v15 >= 0 || g_6145d8 >= 0))\n        {\n            v13 = fcntl(v15, 0x1);\n            if (v13 >= 0)\n            {\n                v14 = fcntl(v15, 0x2);\n            }\n            if (v13 < 0 || v14 == -1)\n            {\n                v15 = -18446744069414584321;\n                close(v11);\n                *(__errno_location()) = v6;\n            }\n        }\n        v17 = v15;\n        return v17;\n    }\n    return fcntl(v10, v9);\n}\n"
        },
        {
            "funcName": "sub_4070f0",
            "funcStartAddr": "0x4070f0",
            "funcEndAddr": "0x40710f",
            "decompiledFuncCode": "int sub_4070f0()\n{\n    unsigned long v0;  // [bp-0x28]\n    unsigned long v1;  // [bp-0x20]\n    char v2;  // [bp-0x9]\n    unsigned long v4;  // r9\n    unsigned long v5;  // r8\n\n    v2 = 0;\n    v1 = v4;\n    v0 = v5;\n    return sub_405920();\n}\n"
        },
        {
            "funcName": "sub_40bad0",
            "funcStartAddr": "0x40bad0",
            "funcEndAddr": "0x40bb10",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    char field_8;\n} struct_0;\n\nextern unsigned int g_40cf65;\n\nint sub_40bad0()\n{\n    struct_0 *v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned long long v3;  // rdx\n\n    if (v1->field_8 == 0)\n    {\n        v2 = unsetenv(0x40cf65);\n    }\n    else\n    {\n        v2 = setenv(0x40cf65, (unsigned int)v1 + 9, 0x1);\n    }\n    v3 = 0;\n    if (v2 == 0)\n    {\n        tzset();\n        v3 = 1;\n    }\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_408cc0",
            "funcStartAddr": "0x408cc0",
            "funcEndAddr": "0x408cd3",
            "decompiledFuncCode": "int sub_408cc0()\n{\n}\n"
        },
        {
            "funcName": "sub_402920",
            "funcStartAddr": "0x402920",
            "funcEndAddr": "0x402945",
            "decompiledFuncCode": "extern unsigned long long g_614270;\nextern unsigned int g_6143dc;\n\nint sub_402920()\n{\n    char *v1;  // rdi\n\n    if (g_6143dc <= 2147483647)\n    {\n        g_614270 = v1;\n        g_6143dc = strlen(v1);\n        return g_6143dc;\n    }\n    sub_4027f0(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_40c070",
            "funcStartAddr": "0x40c070",
            "funcEndAddr": "0x40c0cc",
            "decompiledFuncCode": "int sub_40c070()\n{\n    unsigned long long v1;  // r12\n    unsigned long long v2;  // rax\n    unsigned int *v3;  // rdi\n\n    v1 = __fpending();\n    v2 = sub_40aa20();\n    if (((char)*(v3) & 32) == 0)\n    {\n        if ((unsigned int)v2 != 0 && v1 == 0)\n        {\n            v2 = 0 - (unsigned int)(char)(*(__errno_location()) != 9);\n        }\n    }\n    else\n    {\n        if ((unsigned int)v2 == 0)\n        {\n            *(__errno_location()) = 0;\n            v2 = -18446744069414584321;\n        }\n    }\n    if ((unsigned int)v2 != 0 && (((char)*(v3) & 32) != 0 || v1 != 0))\n    {\n        v2 = -18446744069414584321;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_409460",
            "funcStartAddr": "0x409460",
            "funcEndAddr": "0x4094aa",
            "decompiledFuncCode": "int sub_409460() { crash_skku;\n}"
        },
        {
            "funcName": "sub_4053c0",
            "funcStartAddr": "0x4053c0",
            "funcEndAddr": "0x4053c8",
            "decompiledFuncCode": "extern char g_614480;\n\nint sub_4053c0()\n{\n    char v1;  // dil\n    unsigned long v2;  // rax\n\n    g_614480 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40be80",
            "funcStartAddr": "0x40be80",
            "funcEndAddr": "0x40bf16",
            "decompiledFuncCode": "int sub_40be80()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // r13\n    unsigned int v3;  // esi\n    unsigned long v4;  // rdx\n    unsigned long long v5;  // rax\n    unsigned long long v6;  // rax\n    unsigned long long v8;  // rax\n\n    if (v1 != 0)\n    {\n        v2 = (unsigned int)sub_40bdb0();\n        if (v2 != 0)\n        {\n            v5 = localtime_r(v3, v4);\n            if (v5 != 0)\n            {\n                v6 = sub_40bc30();\n                if (v6 != 0)\n                {\n                    if (v2 != 1)\n                    {\n                        v8 = sub_40bb50();\n                    }\n                    if (v2 == 1 || v8 != 0)\n                    {\n                        return v4;\n                    }\n                }\n            }\n            if ((v6 == 0 || v5 == 0) && v2 != 1)\n            {\n                sub_40bb50();\n            }\n        }\n        if (v6 == 0 || v5 == 0 || v2 == 0 || v8 == 0 && v2 != 1)\n        {\n            return 0;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_409e00",
            "funcStartAddr": "0x409e00",
            "funcEndAddr": "0x40a4c4",
            "decompiledFuncCode": "int sub_409e00()\n{\n    unsigned long long v0;  // [bp-0x178]\n    unsigned long long *v1;  // [bp-0x58]\n    char v2;  // [bp-0x49]\n    char v3;  // [bp-0x40]\n    unsigned long v5;  // rcx\n    unsigned int v6;  // edx\n    char **v7;  // rsi\n    unsigned long long *v8;  // rbx\n    unsigned int *v9;  // r13\n    unsigned int *v10;  // r13\n    char v11[3];  // r15\n    unsigned int v12;  // eax\n    unsigned long long v13;  // r13\n    unsigned long long|unsigned int|unsigned long v14;  // r12\n    unsigned long long v15;  // rbp\n    unsigned long long v16;  // rax\n    char *v17;  // r8\n    unsigned long long v18;  // rax\n    unsigned long long v19;  // rdx\n    unsigned long long v20;  // rax\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rsi\n    char v23;  // sil\n    unsigned long long v24;  // rdx\n    unsigned long long v25;  // r13\n    unsigned long long v26;  // r13\n    unsigned long long v27;  // rax\n    unsigned long long v28;  // rax\n    unsigned long long v29;  // rax\n    unsigned long long v30;  // rax\n    unsigned long long v31;  // rax\n    unsigned long long v32;  // rcx\n    unsigned long long v33;  // rax\n    unsigned long long v34;  // r9\n    unsigned long long v35;  // rcx\n    unsigned long long v36;  // rax\n    unsigned long long v37;  // r9\n    unsigned long long v38;  // rsi\n    unsigned long long v39;  // rcx\n    unsigned long long v40;  // r9\n    unsigned long long|unsigned int v41;  // edi\n    unsigned long long|unsigned int|unsigned long v42;  // r10\n    unsigned long long v43;  // rcx\n    unsigned long long v44;  // r9\n    unsigned long long|unsigned int v45;  // rdi\n    unsigned long long v46;  // rcx\n    unsigned long long v47;  // r9\n    unsigned long long|unsigned int v48;  // rdi\n    unsigned long long v49;  // rax\n    unsigned long long v50;  // rcx\n    unsigned long long v51;  // rdi\n    unsigned long long v52;  // rcx\n    unsigned long long v53;  // r9\n    unsigned long long|unsigned int v54;  // rdi\n    unsigned long long|unsigned int v55;  // rdi\n    unsigned long long|unsigned int v56;  // rdi\n    unsigned int v57;  // cc_dep1\n    unsigned long long v58;  // cc_dep1\n    unsigned long long v59;  // cc_dep1\n    unsigned long v60;  // rax\n    unsigned long long v61;  // cc_dep1\n    unsigned long long v62;  // cc_dep1\n    unsigned long long v63;  // cc_dep1\n    char *v64;  // rsi\n    unsigned long long v65;  // rax\n\n    v1 = v5;\n    if (v6 <= 36)\n    {\n        v8 = (v7 == 0? &v3 : v7);\n        *(v9) = 0;\n        v9 = __errno_location();\n        v11 = *(v8);\n        v15 = strtol(v41, v7, v6);\n        if (*(v8) != v41)\n        {\n            v12 = *(v10);\n            if (*(v10) == 0)\n            {\n                v14 = 0;\n            }\n            else\n            {\n                v14 = 4;\n                if (v12 == 34)\n                {\n                    v14 = 1;\n                }\n            }\n            if ((*(v10) == 0 || v12 == 34) && v17 != 0)\n            {\n                v13 = v11[0];\n                if (v11[0] != 0)\n                {\n                    v18 = strchr(v17, (char)*((char *)*((long long *)(v7 == 0? &v3 : v7))));\n                }\n            }\n        }\n        else\n        {\n            if (v17 != 0)\n            {\n                v13 = v11[0];\n                v14 = 4;\n                if (v11[0] != 0)\n                {\n                    v15 = 1;\n                    v14 = 0;\n                    v16 = strchr(v17, (char)*((char *)*((long long *)(v7 == 0? &v3 : v7))));\n                }\n            }\n            if ((v17 == 0 || v16 == 0) && (v17 == 0 || v11[0] != 0))\n            {\n                v14 = 4;\n            }\n        }\n        if (*(v8) == v41 && v11[0] != 0 && v17 != 0 && v16 != 0 || v17 != 0 && *(v8) != v41 && v11[0] != 0 && (*(v10) == 0 || v12 == 34) && v18 != 0)\n        {\n            v19 = v13 - 69;\n            if ((v13 - 69 & 255) <= 47)\n            {\n                *((unsigned long long *)&v2) = v19;\n                v0 = 142129060940101;\n                if (((char)((char)*(&((char *)stack_base)[((unsigned long long)(v2 & 63) >> 3) + -376]) >> (unsigned long long)(v2 & 63 & 7)) & 1) != 0)\n                {\n                    v20 = strchr(v17, 0x30);\n                    if (v20 != 0 && v11[1] != 68)\n                    {\n                        if (*((char *)(*((long long *)(v7 == 0? &v3 : v7)) + 1)) != 105)\n                        {\n                            v24 = v2;\n                            if (*((char *)(*((long long *)(v7 == 0? &v3 : v7)) + 1)) != 66)\n                            {\n                                /* goto *((long long *)(rdx<8> * 8 + 4262376)); */\n                            }\n                        }\n                        else\n                        {\n                            v22 = 0;\n                            v21 = 0x400;\n                            v23 = v11[2] == 66;\n                            v38 = rsi<8> * 2 + 1;\n                        }\n                    }\n                }\n            }\n        }\n        if ((*(v8) == v41 && v11[0] != 0 && v17 != 0 && v16 != 0 || v17 != 0 && *(v8) != v41 && v11[0] != 0 && (*(v10) == 0 || v12 == 34) && v18 != 0) && (v13 - 69 & 255) <= 47 && ((char)((char)*(&((char *)stack_base)[((unsigned long long)(v2 & 63) >> 3) + -376]) >> (unsigned long long)(v2 & 63 & 7)) & 1) != 0 && v20 == 0 || (*(v8) == v41 && v11[0] != 0 && v17 != 0 && v16 != 0 || v17 != 0 && *(v8) != v41 && v11[0] != 0 && (*(v10) == 0 || v12 == 34) && v18 != 0) && (v13 - 69 & 255) <= 47 && ((char)((char)*(&((char *)stack_base)[((unsigned long long)(v2 & 63) >> 3) + -376]) >> (unsigned long long)(v2 & 63 & 7)) & 1) == 0 || (*(v8) == v41 && v11[0] != 0 && v17 != 0 && v16 != 0 || v17 != 0 && *(v8) != v41 && v11[0] != 0 && (*(v10) == 0 || v12 == 34) && v18 != 0) && (v13 - 69 & 255) > 47)\n        {\n            v38 = 1;\n            v21 = 0x400;\n        }\n        if (...)\n        {\n            v38 = 2;\n            v21 = 1000;\n        }\n        if (...)\n        {\n            v25 = (unsigned int)v13 - 66;\n            switch (v25)\n            {\n            case 0:\n                if (v15 >= -0x20000000000000 && v15 <= 9007199254740991)\n                {\n                    v15 *= 0x400;\n                    break;\n                }\n            case 3:\n                v39 = v21;\n                v27 = (-1 CONCAT 0x8000000000000000) % v21;\n                v40 = v27;\n                v41 = 6;\n                v42 = 0;\n                do\n                {\n                    if (v15 < v40)\n                    {\n                        v15 = 0x8000000000000000;\n                        v42 = 1;\n                    }\n                    else if ((9223372036854775807 >> 63 CONCAT 9223372036854775807) % v39 >= v15)\n                    {\n                        v15 = v39 * v15;\n                    }\n                    else\n                    {\n                        v15 = 9223372036854775807;\n                        v42 = 1;\n                    }\n                    v57 = v41;\n                    v41 = (unsigned long long)v41 - 1;\n                }\n                while (v57 != 1);\n            case 5: case 37:\n                v46 = v21;\n                v29 = (-1 CONCAT 0x8000000000000000) % v21;\n                v47 = v29;\n                v48 = 3;\n                v42 = 0;\n                do\n                {\n                    if (v15 < v47)\n                    {\n                        v15 = 0x8000000000000000;\n                        v42 = 1;\n                    }\n                    else if ((9223372036854775807 >> 63 CONCAT 9223372036854775807) % v39 >= v15)\n                    {\n                        v15 = v46 * v15;\n                    }\n                    else\n                    {\n                        v15 = 9223372036854775807;\n                        v42 = 1;\n                    }\n                    v59 = v48;\n                    v48 -= 1;\n                }\n                while (v59 != 1);\n                v14 = (unsigned int)v14 | v42;\n                break;\n            case 9: case 41:\n                v50 = v21;\n                v49 = (-1 CONCAT 0x8000000000000000) % v21;\n                if (v15 >= v49)\n                {\n                    v60 = (0 CONCAT 9223372036854775807) % v50;\n                }\n            case 11: case 43:\n                v50 = v21;\n                v30 = (-1 CONCAT 0x8000000000000000) % v21;\n                v51 = v30;\n            case 14:\n                v52 = v21;\n                v31 = (-1 CONCAT 0x8000000000000000) % v21;\n                v53 = v31;\n            case 18: case 50:\n                v43 = v21;\n                v28 = (-1 CONCAT 0x8000000000000000) % v21;\n                v44 = v28;\n                v45 = 4;\n                v42 = 0;\n                do\n                {\n                    if (v44 > v15)\n                    {\n                        v15 = 0x8000000000000000;\n                        v42 = 1;\n                    }\n                    else if ((9223372036854775807 >> 63 CONCAT 9223372036854775807) % v39 >= v15)\n                    {\n                        v15 = v43 * v15;\n                    }\n                    else\n                    {\n                        v15 = 9223372036854775807;\n                        v42 = 1;\n                    }\n                    v58 = v45;\n                    v45 -= 1;\n                }\n                while (v58 != 1);\n            case 23:\n                v32 = v21;\n                v33 = (-1 CONCAT 0x8000000000000000) % v21;\n                v34 = v33;\n            case 24:\n                v35 = v21;\n                v36 = (-1 CONCAT 0x8000000000000000) % v21;\n                v37 = v36;\n            case 33:\n                break;\n                v64 = &v11[v38];\n                *(v8) = v64;\n                v14 = (unsigned int)(*(v64) != 0? v14 | 2 : (unsigned int)r12<8>);\n            case 53:\n                if (v15 >= 0xc000000000000000 && v15 <= 4611686018427387903)\n                {\n                    v15 *= 2;\n                    break;\n                }\n            default:\n                v14 = (unsigned int)v14 | 2;\n                *(v1) = v15;\n            }\n            if (v25 <= 53)\n            {\n                v26 = v25;\n            }\n        }\n        v38 = 1;\n        v50 = 0x400;\n        v49 = -0x20000000000000;\n        v38 = 1;\n        v35 = 0x400;\n        v37 = -0x20000000000000;\n        v56 = 7;\n        v42 = 0;\n        do\n        {\n            if (v37 > v15)\n            {\n                v15 = 0x8000000000000000;\n                v42 = 1;\n            }\n            else if ((9223372036854775807 >> 63 CONCAT 9223372036854775807) % v39 >= v15)\n            {\n                v15 = v35 * v15;\n            }\n            else\n            {\n                v15 = 9223372036854775807;\n                v42 = 1;\n            }\n            v63 = v56;\n            v56 -= 1;\n        }\n        while (v63 != 1);\n        v38 = 1;\n        v50 = 0x400;\n        v51 = -0x20000000000000;\n        if (v15 >= v51)\n        {\n            v60 = (0 CONCAT 9223372036854775807) % v50;\n            if (v15 <= (0 CONCAT 9223372036854775807) % v50)\n            {\n                v15 = v50 * v15;\n                if (v15 >= v51 && v60 >= v15)\n                {\n                    v15 = v50 * v15;\n                }\n            }\n            else\n            {\n                v15 = 9223372036854775807;\n                v14 = 1;\n            }\n        }\n        else\n        {\n            v15 = 0x8000000000000000;\n            v14 = 1;\n        }\n        v38 = 1;\n        if (v15 >= -0x40000000000000 && v15 <= 18014398509481983)\n        {\n            v15 *= 0x200;\n        }\n        v38 = 1;\n        v38 = 1;\n        v52 = 0x400;\n        v53 = -0x20000000000000;\n        v54 = 5;\n        v42 = 0;\n        do\n        {\n            if (v53 > v15)\n            {\n                v15 = 0x8000000000000000;\n                v42 = 1;\n            }\n            else if ((9223372036854775807 >> 63 CONCAT 9223372036854775807) % v39 >= v15)\n            {\n                v15 = v52 * v15;\n            }\n            else\n            {\n                v15 = 9223372036854775807;\n                v42 = 1;\n            }\n            v61 = v54;\n            v54 -= 1;\n        }\n        while (v61 != 1);\n        v38 = 1;\n        v39 = 0x400;\n        v40 = -0x20000000000000;\n        v38 = 1;\n        v43 = 0x400;\n        v44 = -0x20000000000000;\n        v38 = 1;\n        v46 = 0x400;\n        v47 = -0x20000000000000;\n        v38 = 1;\n        v32 = 0x400;\n        v34 = -0x20000000000000;\n        v55 = 8;\n        v42 = 0;\n        do\n        {\n            if (v34 > v15)\n            {\n                v15 = 0x8000000000000000;\n                v42 = 1;\n            }\n            else if ((9223372036854775807 >> 63 CONCAT 9223372036854775807) % v39 >= v15)\n            {\n                v15 = v32 * v15;\n            }\n            else\n            {\n                v15 = 9223372036854775807;\n                v42 = 1;\n            }\n            v62 = v55;\n            v55 -= 1;\n        }\n        while (v62 != 1);\n        *(v1) = v15;\n        v65 = v14;\n        return v65;\n    }\n    __assert_fail(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_405480",
            "funcStartAddr": "0x405480",
            "funcEndAddr": "0x40549c",
            "decompiledFuncCode": "int sub_405480()\n{\n    unsigned long v0;  // [bp-0x8]\n    void *v2;  // rdi\n    unsigned long v3;  // rax\n    unsigned long v4;  // rbx\n\n    if (v2 != 0)\n    {\n        v0 = v4;\n        fileno(v2);\n    }\n    else\n    {\n        return v3;\n    }\n}\n"
        },
        {
            "funcName": "sub_408d30",
            "funcStartAddr": "0x408d30",
            "funcEndAddr": "0x408d46",
            "decompiledFuncCode": "int sub_408d30()\n{\n}\n"
        },
        {
            "funcName": "sub_4058d0",
            "funcStartAddr": "0x4058d0",
            "funcEndAddr": "0x405911",
            "decompiledFuncCode": "int sub_4058d0()\n{\n    unsigned long v1;  // rdx\n    char *v2;  // rbx\n    char *v4;  // rdi\n    char *v5;  // rsi\n\n    if (v1 != 0)\n    {\n        v2 = v1 - 1;\n        do\n        {\n            *((char *)(v4 + v2)) = *((int *)(*((long long *)(unsigned long long)__ctype_toupper_loc()) + (unsigned long long)(char)*((char *)(v5 + v2)) * 4));\n            v2 = &v2[-1];\n        }\n        while (v2 != -1);\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_4053d0",
            "funcStartAddr": "0x4053d0",
            "funcEndAddr": "0x40546e",
            "decompiledFuncCode": "extern unsigned int g_40ef7a;\nextern unsigned int g_6142c0;\nextern char g_614480;\nextern unsigned long long g_614488;\n\nint sub_4053d0()\n{\n    unsigned long long v1;  // rax\n    unsigned int *v2;  // rbx\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rbp\n\n    v1 = sub_40c070();\n    if (v1 != 0)\n    {\n        v2 = __errno_location();\n        if (g_614480 == 0 || *(v2) != 32)\n        {\n            v4 = dcgettext(0x0, 0x40ef7a, 0x5);\n            if (g_614488 != 0)\n            {\n                sub_408b80();\n                error(0x0, *(v2), \"%s: \");\n            }\n        }\n    }\n    if (v1 == 0 || *(v2) == 32 && g_614480 != 0)\n    {\n        v3 = sub_40c070();\n    }\n    if ((unsigned int)v3 == 0 && (v1 == 0 || *(v2) == 32) && (v1 == 0 || g_614480 != 0))\n    {\n        return v3;\n    }\n    while (true)\n    {\n        _exit(g_6142c0);\n        error(0x0, *(v2), \"%s\");\n    }\n}\n"
        },
        {
            "funcName": "sub_40a550",
            "funcStartAddr": "0x40a550",
            "funcEndAddr": "0x40a5d1",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[4262880];\n    unsigned long long field_410be0;\n} struct_0;\n\nextern int512_t g_410be0;\nextern unsigned int g_6142c0;\n\nint sub_40a550()\n{\n    char v0;  // [bp-0x2a]\n    char v1;  // [bp-0x29]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long v3;  // [bp-0x10]\n    unsigned long v4;  // [bp-0x8]\n    unsigned long v6;  // r13\n    unsigned int v7;  // edi\n    struct_0 *v8;  // rdi\n    unsigned long v9;  // r12\n    unsigned long v10;  // rbx\n    unsigned long long v11;  // rsi\n    unsigned long v13;  // rsi\n    char v14;  // dl\n\n    v4 = v6;\n    v8 = (unsigned long long)v7 - 1;\n    v3 = v9;\n    v2 = v10;\n    if ((unsigned int)v8 > 3)\n    {\n        abort(); /* do not return */\n    }\n    v13 = *((long long *)(0x8 * v8 + (char *)&g_410be0));\n    if ((unsigned int)v11 < 0)\n    {\n        v0 = v14;\n        v1 = 0;\n    }\n    error(g_6142c0, 0x0, (unsigned long long)dcgettext(0x0, v13, 0x5));\n}\n"
        },
        {
            "funcName": "sub_4037e0",
            "funcStartAddr": "0x4037e0",
            "funcEndAddr": "0x403837",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[52];\n    unsigned int field_34;\n} struct_0;\n\ntypedef struct struct_1 {\n    char padding_0[56];\n    char field_38;\n} struct_1;\n\nextern unsigned int g_6143d4;\nextern unsigned int g_6143dc;\nextern char g_6143e0;\n\nint sub_4037e0()\n{\n    unsigned long long v1;  // rax\n    struct_0 *v2;  // rdi\n    struct_1 *v3;  // edi\n\n    v1 = g_6143dc;\n    v3 = v2->field_34;\n    *((struct_1 **)&g_6143d4) = v3;\n    if (v3 <= g_6143dc)\n    {\n    }\n    else\n    {\n        v1 = sub_402ca0();\n        g_6143d4 = 0;\n    }\n    if (g_6143e0 == 0)\n    {\n    }\n    else\n    {\n        v1 = sub_402dd0();\n    }\n    if (v2[1].padding_0[0] == 0 && g_6143e0 == 0 || v2[1].padding_0[0] == 0 && g_6143e0 != 0)\n    {\n        return v1;\n    }\n}\n"
        },
        {
            "funcName": "sub_402ca0",
            "funcStartAddr": "0x402ca0",
            "funcEndAddr": "0x402d02",
            "decompiledFuncCode": "extern unsigned int g_614428;\nextern unsigned int g_614430;\nextern char g_614434;\nextern unsigned long long stdout[7];\n\nint sub_402ca0()\n{\n    unsigned int|unsigned long v1;  // ebx\n    char *v2;  // rax\n    unsigned long v4;  // rax\n    unsigned long v5;  // rdi\n\n    v1 = g_614428;\n    if (g_614434 != 0)\n    {\n        g_614430 = v5 - (unsigned long long)g_614428;\n        return v4;\n    }\n    while (true)\n    {\n        v1 = (unsigned long long)v1 + 1;\n        if (g_614428 < (unsigned int)v1)\n        {\n            break;\n        }\n        v2 = stdout[5];\n        if (stdout[5] < stdout[6])\n        {\n            stdout[5] = stdout[5] + 1;\n            *(v2) = 32;\n        }\n        else\n        {\n            v2 = __overflow();\n        }\n    }\n    g_614428 = v5;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40961b",
            "funcStartAddr": "0x40961b",
            "funcEndAddr": "0x409620",
            "decompiledFuncCode": "int sub_40961b()\n{\n}\n"
        },
        {
            "funcName": "sub_4093d0",
            "funcStartAddr": "0x4093d0",
            "funcEndAddr": "0x409448",
            "decompiledFuncCode": "int sub_4093d0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_405550",
            "funcStartAddr": "0x405550",
            "funcEndAddr": "0x40558a",
            "decompiledFuncCode": "int sub_405550()\n{\n    char v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long long v3;  // rdi\n    unsigned long long v4[2];  // rbx\n    unsigned long long v5;  // rax\n\n    v4 = v3;\n    v5 = clock_gettime();\n    if ((unsigned int)v5 != 0)\n    {\n        gettimeofday(&v0, NULL);\n        v4[0] = *((long long *)&v0);\n        v5 = v1 * 1000;\n        v4[1] = v1 * 1000;\n    }\n    return v5;\n}\n"
        },
        {
            "funcName": "sub_408b80",
            "funcStartAddr": "0x408b80",
            "funcEndAddr": "0x408b91",
            "decompiledFuncCode": "int sub_408b80()\n{\n}\n"
        },
        {
            "funcName": "sub_4086c0",
            "funcStartAddr": "0x4086c0",
            "funcEndAddr": "0x4086cf",
            "decompiledFuncCode": "extern int512_t g_6145a0;\n\nint sub_4086c0()\n{\n    unsigned long v1;  // rdi\n\n    return *((int *)(v1 == 0? &g_6145a0 : v1));\n}\n"
        },
        {
            "funcName": "sub_4026a8",
            "funcStartAddr": "0x4026a8",
            "funcEndAddr": "0x4026e4",
            "decompiledFuncCode": "int sub_4026a8() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40ac20",
            "funcStartAddr": "0x40ac20",
            "funcEndAddr": "0x40ac76",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n    char padding_50[64];\n    unsigned long long field_90;\n} struct_0;\n\nint sub_40ac20()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    struct_0 *v4;  // rdi\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    struct_0 *v7;  // rbx\n    unsigned int v8;  // esi\n    unsigned int v9;  // edx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // r12\n\n    if (v4->field_10 == v4->field_8 && v4->field_28 == v4->field_20 && v4->field_48 == 0)\n    {\n        v2 = v5;\n        v1 = stack_base + 0;\n        v0 = v6;\n        v7 = v4;\n        v10 = lseek(fileno(v4), v8, v9);\n        if (v10 != -1)\n        {\n            v7->field_0 = v7->field_0 & -17;\n            v7->field_90 = v10;\n            v10 = 0;\n        }\n        v11 = v0;\n        v12 = v2;\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_4094b0",
            "funcStartAddr": "0x4094b0",
            "funcEndAddr": "0x4094c7",
            "decompiledFuncCode": "int sub_4094b0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_409300();\n}\n"
        },
        {
            "funcName": "sub_408ca0",
            "funcStartAddr": "0x408ca0",
            "funcEndAddr": "0x408cb7",
            "decompiledFuncCode": "int sub_408ca0()\n{\n}\n"
        },
        {
            "funcName": "sub_4094d0",
            "funcStartAddr": "0x4094d0",
            "funcEndAddr": "0x4094fe",
            "decompiledFuncCode": "int sub_4094d0()\n{\n    unsigned int v1;  // rdi\n    unsigned int v2;  // rsi\n    unsigned long long v3;  // rax\n\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>)) && [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) == 0)\n    {\n        v3 = calloc(v1, v2);\n        if (v3 != 0)\n        {\n            return v3;\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>) || v3 == 0 || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) != 0)\n    {\n        sub_409550(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_402d10",
            "funcStartAddr": "0x402d10",
            "funcEndAddr": "0x402dc0",
            "decompiledFuncCode": "extern unsigned int g_61429c;\nextern char g_6142a0;\nextern unsigned int g_614428;\nextern unsigned int g_614430;\nextern unsigned long long stdout[7];\n\nint sub_402d10()\n{\n    unsigned int|unsigned long v1;  // rbp\n    char *v2;  // rax\n    unsigned long long v3;  // rcx\n    unsigned long v4;  // rbx\n    char *v5;  // rax\n\n    v1 = g_614428;\n    while (true)\n    {\n        v2 = g_614428 - v1;\n        v2 = ((unsigned int)v1 >> 31 CONCAT (unsigned int)v1) % g_61429c;\n        v3 = g_61429c - (((unsigned int)v1 >> 31 CONCAT (unsigned int)v1) % g_61429c >> 32);\n        v4 = v3 + v1;\n        if (g_614428 < (unsigned int)(v3 + v1) || (unsigned int)(g_614428 - v1) <= 1)\n        {\n            break;\n        }\n        v5 = stdout[5];\n        if (stdout[5] < stdout[6])\n        {\n            v1 = v4;\n            stdout[5] = stdout[5] + 1;\n            *(v5) = g_6142a0;\n        }\n        else\n        {\n            __overflow();\n        }\n    }\n    while (true)\n    {\n        v1 += 1;\n        if (g_614428 < v1)\n        {\n            break;\n        }\n        v2 = stdout[5];\n        if (stdout[5] < stdout[6])\n        {\n            stdout[5] = stdout[5] + 1;\n            *(v2) = 32;\n        }\n        else\n        {\n            v2 = __overflow();\n        }\n    }\n    g_614428 = g_614430 + g_614428;\n    g_614430 = 0;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4071b0",
            "funcStartAddr": "0x4071b0",
            "funcEndAddr": "0x40728f",
            "decompiledFuncCode": "extern int512_t g_40f3ce;\nextern int512_t g_40f3d2;\n\nint sub_4071b0()\n{\n    unsigned long v1;  // rdi\n    char *v2;  // rbx\n    char v3[8];  // rax\n    unsigned long long v4;  // rdx\n    unsigned long v5;  // rsi\n    char *v6;  // rax\n\n    v2 = (unsigned long long)dcgettext(0x0, v1, 0x5);\n    if (v1 == v2)\n    {\n        v3 = sub_40c0d0();\n        v4 = v3[0] & 4294967007;\n        if ((v3[0] & 223) == 85)\n        {\n            if ((v3[1] & 223) == 84 && (v3[2] & 223) == 70 && v3[3] == 45 && v3[4] == 56 && v3[5] == 0)\n            {\n                v2 = (*(v2) != 96? &g_40f3ce : 4256729);\n            }\n        }\n        else\n        {\n            if (v4 == 71 && (v3[1] & 223) == 66 && v3[2] == 49 && v3[3] == 56 && v3[4] == 48 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0)\n            {\n                v2 = (*(v2) != 96? &g_40f3d2 : 4256725);\n            }\n        }\n    }\n    if (...)\n    {\n        return ((unsigned int)v5 != 9? \"'\" : \"\\\"\");\n    }\n    if ((v3[1] & 223) == 84 && v3[4] == 56 && v1 == v2 && v3[5] == 0 && v3[3] == 45 && (v3[0] & 223) == 85 && (v3[2] & 223) == 70 || v3[4] == 48 && (v3[1] & 223) == 66 && v1 == v2 && v3[3] == 56 && v4 == 71 && v3[2] == 49 && (v3[0] & 223) != 85 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0 || v1 != v2)\n    {\n        v6 = v2;\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_408cf0",
            "funcStartAddr": "0x408cf0",
            "funcEndAddr": "0x408d02",
            "decompiledFuncCode": "int sub_408cf0()\n{\n}\n"
        },
        {
            "funcName": "sub_4086d0",
            "funcStartAddr": "0x4086d0",
            "funcEndAddr": "0x4086df",
            "decompiledFuncCode": "extern int512_t g_6145a0;\n\nint sub_4086d0()\n{\n    unsigned long v1;  // rdi\n    unsigned int v2;  // esi\n\n    *((unsigned int *)(v1 == 0? &g_6145a0 : v1)) = v2;\n    return &g_6145a0;\n}\n"
        },
        {
            "funcName": "sub_405880",
            "funcStartAddr": "0x405880",
            "funcEndAddr": "0x4058c1",
            "decompiledFuncCode": "int sub_405880()\n{\n    unsigned long v1;  // rdx\n    char *v2;  // rbx\n    char *v4;  // rdi\n    char *v5;  // rsi\n\n    if (v1 != 0)\n    {\n        v2 = v1 - 1;\n        do\n        {\n            *((char *)(v4 + v2)) = *((int *)(*((long long *)(unsigned long long)__ctype_tolower_loc()) + (unsigned long long)(char)*((char *)(v5 + v2)) * 4));\n            v2 = &v2[-1];\n        }\n        while (v2 != -1);\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_4054b0",
            "funcStartAddr": "0x4054b0",
            "funcEndAddr": "0x405539",
            "decompiledFuncCode": "int sub_4054b0()\n{\n    unsigned int v1;  // [bp+0x100008]\n    char *v2;  // rdi\n    char *v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned int v5;  // r12d\n    unsigned long long v6;  // rax\n    unsigned int v8;  // ebp\n    unsigned long long v10;  // rbx\n    unsigned long long v11;  // rax\n\n    v10 = fopen(v2, v3);\n    if (v10 != 0)\n    {\n        v4 = fileno(v10);\n        if (v4 <= 2)\n        {\n            v5 = sub_408d50();\n            if (v5 >= 0)\n            {\n                v6 = sub_40aa20();\n                if (v6 == 0)\n                {\n                    v10 = fdopen(v5, v3);\n                }\n                if (v10 == 0 || v6 != 0)\n                {\n                    v8 = *((int *)v10);\n                    close(v5);\n                    *(__errno_location()) = v8;\n                    v10 = 0;\n                }\n            }\n            else\n            {\n                v10 = 0;\n                sub_40aa20();\n                *(__errno_location()) = v1;\n            }\n        }\n    }\n    v11 = v10;\n    return v11;\n}\n"
        },
        {
            "funcName": "sub_4031e0",
            "funcStartAddr": "0x4031e0",
            "funcEndAddr": "0x403271",
            "decompiledFuncCode": "extern unsigned int g_614428;\nextern unsigned int g_614430;\nextern char g_614434;\nextern unsigned long long stdout[7];\n\nint sub_4031e0()\n{\n    char v1;  // dil\n    unsigned long long v2;  // rax\n    unsigned long long v5;  // cc_dep1\n    char *v6;  // rax\n\n    if (g_614434 != 0)\n    {\n        if (v1 != 32)\n        {\n            if (g_614430 > 0)\n            {\n                sub_402d10();\n            }\n            v5 = (char)(*((char *)(*((long long *)(unsigned long long)__ctype_b_loc()) + (unsigned long long)v1 * 2 + 1)) & 64);\n            if (!((char)v5 == 0))\n            {\n                g_614428 = g_614428 + 1;\n            }\n            else if (v1 == 8)\n            {\n                g_614428 = g_614428 - 1;\n            }\n        }\n        else\n        {\n            v2 = g_614430 + 1;\n            g_614430 = g_614430 + 1;\n            return v2;\n        }\n    }\n    if (g_614434 == 0 || v1 != 32)\n    {\n        v6 = stdout[5];\n        if (stdout[5] < stdout[6])\n        {\n            stdout[5] = stdout[5] + 1;\n            *(v6) = v1;\n            return v6;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_402790",
            "funcStartAddr": "0x402790",
            "funcEndAddr": "0x4027e5",
            "decompiledFuncCode": "extern unsigned long long g_614460;\nextern unsigned int g_614468;\nextern unsigned long long g_614470;\n\nint sub_402790()\n{\n    unsigned long v2;  // rdi\n\n    if (g_614468 < g_614460)\n    {\n        *((char *)(g_614470 + g_614468)) = v2;\n        g_614468 = g_614468 + 1;\n        return g_614470;\n    }\n    g_614470 = (unsigned int)sub_409460();\n    *((char *)(g_614470 + g_614468)) = v2;\n    g_614468 = g_614468 + 1;\n    return g_614470;\n}\n"
        },
        {
            "funcName": "sub_408bb0",
            "funcStartAddr": "0x408bb0",
            "funcEndAddr": "0x408c23",
            "decompiledFuncCode": "int sub_408bb0()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v2 = 0x400000000000000;\n    v1 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_4084e0();\n}\n"
        },
        {
            "funcName": "sub_408a00",
            "funcStartAddr": "0x408a00",
            "funcEndAddr": "0x408a6d",
            "decompiledFuncCode": "int sub_408a00()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_4084e0();\n}\n"
        },
        {
            "funcName": "sub_40c800",
            "funcStartAddr": "0x40c800",
            "funcEndAddr": "0x40c8b2",
            "decompiledFuncCode": "int sub_40c800()\n{\n    unsigned long long|char|unsigned long v0;  // [bp-0x30]\n    unsigned long long *v2;  // rdx\n    unsigned long long v4;  // rdi\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rsi\n    unsigned long long *v7;  // rbx\n    unsigned long long *v8;  // rsi\n    unsigned long long v9;  // rdi\n    unsigned long long v10;  // rbp\n    unsigned long long v11;  // rdx\n    unsigned long long v12;  // rbx\n    unsigned long long *v13;  // rsi\n    unsigned long long v14;  // rdi\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // r14\n    unsigned long long v17;  // rdi\n\n    v5 = v4;\n    v7 = v6;\n    v8 = v2;\n    v9 = &v0;\n    v0 = *(v2);\n    v15 = v5();\n    if (v15 == 0)\n    {\n        v16 = *(v7);\n        v10 = 0;\n        if (*(v7) != 0)\n        {\n            while (true)\n            {\n                v11 = (v16 >> 1) + (v10 >> 1);\n                v12 = ((unsigned int)(v10 | v16) & 1) + (v16 >> 1) + (v10 >> 1);\n                if (v10 != ((unsigned int)(v10 | v16) & 1) + (v16 >> 1) + (v10 >> 1) && v16 != v12)\n                {\n                    break;\n                }\n                v0 = v12;\n                v13 = v2;\n                v14 = &v0;\n                v15 = r12<8>();\n                if (v15 == 0)\n                {\n                    v16 = v12;\n                    v12 = v10;\n                }\n                v10 = v12;\n            }\n            if (v15 == 0 && v10 != 0)\n            {\n                v0 = v10;\n                v17 = &v0;\n                return (long long)(stack_base)[-24]();\n            }\n        }\n    }\n    if (*(v7) == 0 || v10 == 0 || v15 != 0 || v15 != 0)\n    {\n        return v15;\n    }\n}\n"
        },
        {
            "funcName": "sub_40bba0",
            "funcStartAddr": "0x40bba0",
            "funcEndAddr": "0x40bc2a",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned short field_8;\n} struct_1;\n\nint sub_40bba0()\n{\n    void *v1;  // rdi\n    unsigned long long v2;  // rax\n    struct_1 *v3;  // rbx\n    unsigned long v4;  // rbp\n    struct_1 *v5;  // rax\n    struct_1 *v7;  // rax\n\n    if (v1 != 0)\n    {\n        v2 = strlen(v1);\n        v4 = v2 + 1;\n        v3 = malloc((118 <= v2 + 1? v2 + 1 : 118) + 17 & -8);\n        if (v3 != 0)\n        {\n            v3->field_0 = 0;\n            v3->field_8 = 1;\n            memcpy((char *)&v3->field_8 + 1, v1, v4);\n            *(&((char *)&v3->field_0)[9 + v4]) = 0;\n        }\n    }\n    else\n    {\n        v3 = malloc(0x80);\n        if (v3 != 0)\n        {\n            v3->field_0 = 0;\n            v5 = v3;\n            v3->field_8 = 0;\n            return v5;\n        }\n    }\n    if (v3 == 0 || v1 != 0)\n    {\n        v7 = v3;\n        return v7;\n    }\n}\n"
        },
        {
            "funcName": "sub_4072b0",
            "funcStartAddr": "0x4072b0",
            "funcEndAddr": "0x4083e8",
            "decompiledFuncCode": "int sub_4072b0()\n{\n    unsigned long long v0;  // [bp-0x1e8]\n    void tmp_38;  // tmp #38\n    unsigned long long|unsigned int * v1;  // [bp-0xe8]\n    unsigned long long v2;  // [bp-0xe0]\n    unsigned long v3;  // [bp-0xd8]\n    unsigned long long|char|unsigned long v4;  // [bp-0xc0]\n    unsigned long long|char|unsigned long v5;  // [bp-0xb8]\n    char v6;  // [bp-0xa9]\n    unsigned long long v7;  // [bp-0xa8]\n    unsigned long long v8;  // [bp-0xa0]\n    unsigned long long|char|char [2] v9;  // [bp-0x98]\n    unsigned long long|unsigned long v10;  // [bp-0x90]\n    unsigned long long|unsigned int v11;  // [bp-0x88]\n    unsigned long long|unsigned int v12;  // [bp-0x80]\n    unsigned long long v13;  // [bp-0x78]\n    unsigned long long v14;  // [bp-0x70]\n    unsigned long v15;  // [bp-0x68]\n    unsigned int v16;  // [bp-0x60]\n    char v17;  // [bp-0x5c]\n    unsigned long long|char v18;  // [bp-0x5b]\n    unsigned long long v19;  // [bp-0x5a]\n    char v20;  // [bp-0x59]\n    unsigned long long v21;  // [bp-0x58]\n    unsigned long long v22;  // [bp-0x50]\n    char v23;  // [bp-0x44]\n    unsigned long long v24;  // [bp-0x40]\n    unsigned int *v25;  // [bp+0x8]\n    unsigned long long v26;  // [bp+0x10]\n    void *v27;  // [bp+0x18]\n    unsigned long long v28;  // rdi\n    unsigned long long v29;  // r15\n    unsigned long v30;  // r8\n    unsigned long long v31;  // rcx\n    unsigned long v32;  // r9\n    unsigned long long|char|unsigned long v33;  // r10\n    unsigned long long v34;  // rbp\n    unsigned long long v35;  // r13\n    unsigned long long v36;  // r13\n    unsigned long long v37;  // r8\n    unsigned long long v38;  // r9\n    unsigned long long v39;  // r11\n    unsigned long long|unsigned long v40;  // rbp\n    unsigned long long v41;  // rax\n    unsigned long long v42;  // rax\n    char v43;  // al\n    unsigned long long v44;  // rdx\n    unsigned long long v45;  // rcx\n    unsigned long long|unsigned short|unsigned long v46;  // rax\n    unsigned long long v47;  // rcx\n    unsigned long long v48;  // r13\n    unsigned long long v49;  // r13\n    unsigned long long v50;  // r13\n    char v51;  // r13b\n    unsigned long long v52;  // r13\n    unsigned long long v53;  // rdx\n    unsigned long long v54;  // rbx\n    unsigned long long v55;  // r13\n    unsigned long long v56;  // r15\n    unsigned long long v57;  // rbp\n    unsigned long long v58;  // r14\n    char *v59;  // rax\n    unsigned long long v60;  // rcx\n    unsigned long long v62;  // r13\n    unsigned long long v63;  // r13\n    unsigned long long v64;  // rcx\n    char v65;  // al\n    char v66;  // al\n    unsigned int v67;  // eax\n    char v68;  // al\n    unsigned int v70;  // eax\n    char v71;  // al\n    unsigned long v72;  // rdx\n    unsigned long long v73;  // rax\n    char v74;  // al\n    unsigned long long v75;  // rdx\n    unsigned long long v76;  // rbx\n    unsigned long long|unsigned int v77;  // rsi\n    unsigned long long|unsigned int v78;  // r13\n    unsigned long long v79;  // r14\n    unsigned long long v80;  // r12\n    unsigned int v81;  // r13d\n    unsigned long long v82;  // r11\n    char v83;  // dl\n    unsigned long long v84;  // rax\n    unsigned long long v85;  // cc_dep1\n    unsigned long long v86;  // dl\n    unsigned long long v87;  // rax\n    unsigned long long v88;  // rax\n    unsigned long long|char v89;  // rdx\n    unsigned long long v90;  // rdx\n    unsigned long long v91;  // rax\n    unsigned long long v92;  // rax\n\n    v29 = v28;\n    v79 = v77;\n    v78 = v30;\n    v7 = v89;\n    v4 = v31;\n    v16 = v32;\n    v15 = __ctype_get_mb_cur_max();\n    v17 = ((unsigned int)v32 & 2) != 0;\n    switch ((unsigned int)v30)\n    {\n    case 0:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 0;\n        v8 = 0;\n        v13 = 0;\n    case 1:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 0;\n        v8 = 1;\n        v13 = \"'\";\n    case 2:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 0;\n            if (v77 == 0)\n            {\n                v6 = 1;\n                v33 = 0;\n                v76 = 1;\n                v78 = 2;\n                v14 = 0;\n                v18 = 0;\n                v17 = 0;\n                v8 = 1;\n                v13 = \"'\";\n            }\n            else\n            {\n                v84 = 0;\n                v6 = 1;\n                v14 = 0;\n            }\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v76 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 0;\n            v8 = 1;\n            v13 = \"'\";\n        }\n    case 3:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"'\";\n    case 4:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 1;\n        }\n    case 5:\n        if (((char)v32 & 2) == 0)\n        {\n            if (v77 != 0)\n            {\n                *((char *)v28) = 34;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n                v14 = 0;\n            }\n            else\n            {\n                v14 = 0;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n            }\n            v17 = 0;\n            v76 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v76 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n    case 6:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 5;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"\\\"\";\n    case 7:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 1;\n        v8 = 0;\n        v13 = 0;\n    case 8: case 9: case 10:\n        if (v30 != 10)\n        {\n            v4 = v4;\n            v26 = (unsigned int)sub_4071b0();\n            v27 = (unsigned long long)(unsigned int)sub_4071b0();\n        }\n        v76 = 0;\n        if (((char)v32 & 2) == 0)\n        {\n            v78 = (char)*((char *)v26);\n            if (*((char *)v26) != 0)\n            {\n                do\n                {\n                    if (v77 > v76)\n                    {\n                        *((unsigned long long *)(v28 + v76)) = v78;\n                    }\n                    v76 += 1;\n                    v78 = (char)*((char *)(v26 + v76));\n                }\n                while ((char)v78 != 0);\n            }\n        }\n        v5 = v82;\n        v6 = 1;\n        v8 = strlen(v27);\n        v18 = 0;\n        v13 = v27;\n        v14 = 0;\n        v4 = 1;\n    default:\n        abort(); /* do not return */\n    }\n    v82 = v4;\n    while (true)\n    {\n        v38 = v82;\n        v80 = 0;\n        v39 = v78;\n        while (true)\n        {\n            v78 = (char)(v38 != v80);\n            if (v38 == -1)\n            {\n                v78 = (char)(*((char *)(v7 + v80)) != 0);\n            }\n            if (v78 != 0)\n            {\n                v37 = v7 + v80;\n                v5 = (unsigned int)v39 != 2 & v4;\n                if (((unsigned int)v39 != 2 & v4) != 0)\n                {\n                    v78 = v8;\n                    if (v8 != 0)\n                    {\n                        v34 = v80 + v78;\n                        if (v38 == -1 && v78 > 1)\n                        {\n                            v11 = v39;\n                            v10 = v33;\n                            v9 = v37;\n                            v38 = strlen(v7);\n                        }\n                        if (v34 <= v38)\n                        {\n                            v12 = v39;\n                            v11 = v38;\n                            v10 = v33;\n                            v9 = v37;\n                            v78 = memcmp(v37, v13, v8);\n                            v37 = v9;\n                            v33 = (char)v10;\n                            v38 = v11;\n                            v39 = v12;\n                            if (v17 == 0 && v78 == 0)\n                            {\n                                v40 = (char)*((char *)v37);\n                                switch (*((char *)v37))\n                                {\n                                case 0:\n                                    v89 = (char)((unsigned int)v39 == 2);\n                                    v78 = (unsigned int)(0 ^ 1);\n                                    v78 = (char)(0 ^ 1) & (unsigned int)v39 == 2;\n                                    if (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0)\n                                    {\n                                        if (v77 > v76)\n                                        {\n                                            *((char *)(v28 + v76)) = 39;\n                                        }\n                                        if (v77 > v76 + 1)\n                                        {\n                                            *((char *)(v28 + v76 + 1)) = 36;\n                                        }\n                                        if (v77 > v76 + 2)\n                                        {\n                                            *((char *)(v28 + v76 + 2)) = 39;\n                                        }\n                                        v47 = v76 + 3;\n                                        v76 += 4;\n                                        v33 = rax<8>;\n                                        v78 = 0;\n                                        v40 = 48;\n                                    }\n                                    else\n                                    {\n                                        v47 = v76;\n                                        v78 = 0;\n                                        v76 = v47 + 1;\n                                        v78 = v78;\n                                        v40 = 48;\n                                        v78 = 0;\n                                        v40 = 48;\n                                        if (1 < v38)\n                                        {\n                                            v9 = *((char *)(v7 + 0 + 1));\n                                            if (((unsigned int)(char)*((char *)(v7 + 0 + 1)) - 48 & 255) <= 9)\n                                            {\n                                                if (v77 > v76)\n                                                {\n                                                    *((char *)(v28 + v76)) = 48;\n                                                }\n                                                if (v77 > v47 + 2)\n                                                {\n                                                    *((char *)(v28 + v47 + 2)) = 48;\n                                                }\n                                                v76 = v47 + 3;\n                                                v40 = 48;\n                                            }\n                                        }\n                                        v78 = v78;\n                                        v78 = 0;\n                                    }\n                                    if ((v77 > v76 || ((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0) && (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) == 0 || v77 > v76 + 3))\n                                    {\n                                        *((char *)(v28 + v47)) = 92;\n                                        v33 = v78;\n                                    }\n                                case 7:\n                                    v40 = 97;\n                                case 8:\n                                    v89 = 0;\n                                    v78 = 0;\n                                    v40 = 98;\n                                case 13:\n                                    v40 = 13;\n                                    v45 = 114;\n                                    v89 = (unsigned int)v39 == 2;\n                                case 32:\n                                    v41 = v5;\n                                case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                                    v89 = 0;\n                                case 35: case 126:\n                                    v42 = v5;\n                                case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                                    v41 = v5;\n                                case 92:\n                                    v44 = v4;\n                                    v40 = 92;\n                                    v45 = 92;\n                                    v89 = v4 & v17 & v8 != 0;\n                                    if ((v4 & v17 & v8 != 0) != 0)\n                                    {\n                                        v80 = 1;\n                                        v46 = 0;\n                                        v78 = 0;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (v8 == 0 || v34 > v38 || v78 != 0)\n                    {\n                        v40 = (char)*((char *)v37);\n                        switch (*((char *)v37))\n                        {\n                        case 0:\n                            if (v17 == 0)\n                            {\n                                v5 = 0;\n                            }\n                            else\n                            {\n                                v4 = (unsigned int)v39 == 2;\n                            }\n                        case 7:\n                            v40 = 97;\n                            break;\n                            if (v17 == 0)\n                            {\n                                v78 = 0;\n                            }\n                            else\n                            {\n                                v87 = 0;\n                            }\n                        case 8:\n                            v40 = 98;\n                        case 9:\n                            v40 = 116;\n                        case 10:\n                            v40 = 110;\n                            v89 = 0;\n                            v78 = 0;\n                        case 11:\n                            v40 = 118;\n                            break;\n                        case 12:\n                            v40 = 102;\n                            break;\n                        case 13:\n                            v5 = 0;\n                        case 32:\n                            v41 = 0;\n                            v40 = 32;\n                        case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                            v5 = 0;\n                        case 35: case 126:\n                            v42 = 0;\n                            v49 = v5;\n                            v89 = 0;\n                            v5 = v42;\n                        case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                            v41 = 0;\n                            v48 = v5;\n                            v5 = v41;\n                            v78 = 0;\n                        case 39:\n                            v5 = 0;\n                        case 63:\n                            v5 = 0;\n                        case 92:\n                            v5 = 0;\n                        case 123: case 125:\n                            v5 = 0;\n                        default:\n                            v5 = 0;\n                        }\n                    }\n                }\n                else\n                {\n                    v40 = (char)*((char *)v37);\n                    switch (*((char *)v37))\n                    {\n                    case 0:\n                        if (v4 == 0)\n                        {\n                            v5 = 0;\n                            v89 = (char)((unsigned int)v39 == 2);\n                            v36 = 0;\n                            v40 = 0;\n                            break;\n                            v80 += 1;\n                        }\n                    case 7:\n                        v40 = 7;\n                        v45 = 97;\n                        v89 = (unsigned int)v39 == 2;\n                        if (v4 != 0)\n                        {\n                            v40 = v45;\n                            v78 = 0;\n                        }\n                    case 8:\n                        v40 = 8;\n                        v45 = 98;\n                        v89 = (unsigned int)v39 == 2;\n                    case 9:\n                        v40 = 9;\n                        v45 = 116;\n                    case 10:\n                        v40 = 10;\n                        v45 = 110;\n                        v89 = (unsigned int)v39 == 2;\n                        v5 = v17 & (unsigned int)v39 == 2;\n                    case 11:\n                        v40 = 11;\n                        v45 = 118;\n                        v89 = (unsigned int)v39 == 2;\n                    case 12:\n                        v40 = 12;\n                        v45 = 102;\n                        v89 = (unsigned int)v39 == 2;\n                    case 13:\n                        v40 = 13;\n                        v45 = 114;\n                    case 32:\n                        v40 = 32;\n                        v89 = (char)((unsigned int)v39 == 2);\n                    case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                        v89 = (char)((unsigned int)v39 == 2);\n                        v35 = 0;\n                    case 35: case 126:\n                        v89 = (unsigned int)v39 == 2;\n                    case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                        v89 = (char)((unsigned int)v39 == 2);\n                        break;\n                    case 39:\n                        if ((unsigned int)v39 == 2)\n                        {\n                            if (v77 != 0)\n                            {\n                                v53 = 0;\n                            }\n                            if (v77 == 0 || v14 != 0)\n                            {\n                                if (v77 > v76)\n                                {\n                                    *((char *)(v28 + v76)) = 39;\n                                }\n                                if (v77 > v76 + 1)\n                                {\n                                    *((char *)(v28 + v76 + 1)) = 92;\n                                }\n                                if (v77 > v76 + 2)\n                                {\n                                    v53 = v77;\n                                    *((char *)(v28 + v76 + 2)) = 39;\n                                    v79 = v14;\n                                }\n                                else\n                                {\n                                    v53 = v77;\n                                    v79 = v14;\n                                }\n                            }\n                            v18 = v78;\n                            v76 += 3;\n                            v78 = 0;\n                            v33 = 0;\n                            v14 = v79;\n                            v40 = 39;\n                            v79 = v53;\n                        }\n                        else\n                        {\n                            v18 = v78;\n                            v89 = 0;\n                            v40 = 39;\n                            break;\n                        }\n                    case 63:\n                        if ((unsigned int)v39 != 2)\n                        {\n                            v40 = 63;\n                            v89 = (char)((unsigned int)v39 == 2);\n                            v52 = 0;\n                            break;\n                            v77 = v7;\n                            v40 = (char)*((char *)(v77 + 2));\n                            v77 = 0x7000a38200000000;\n                            v0 = 0x7000a38200000000;\n                            v89 = 0;\n                            v62 = 0;\n                            v40 = 63;\n                            break;\n                            if (v79 > v76)\n                            {\n                                *((char *)(v28 + v76)) = 63;\n                            }\n                            if (v79 > v76 + 1)\n                            {\n                                *((char *)(v28 + v76 + 1)) = 34;\n                            }\n                            if (v79 > v76 + 2)\n                            {\n                                *((char *)(v28 + v76 + 2)) = 34;\n                            }\n                            if (v79 > v76 + 3)\n                            {\n                                *((char *)(v28 + v76 + 3)) = 63;\n                            }\n                            v76 += 4;\n                            v89 = 0;\n                            v78 = 0;\n                            v80 = 2;\n                        }\n                        else\n                        {\n                            v78 = 0;\n                            v78 = 0;\n                            v40 = 63;\n                        }\n                    case 92:\n                        if ((unsigned int)v39 == 2)\n                        {\n                            v80 += 1;\n                            v46 = v33;\n                            v78 = 0;\n                            v40 = 92;\n                        }\n                    case 123: case 125:\n                        v43 = v38 != 1;\n                        if (v38 == -1)\n                        {\n                            v43 = *((char *)(v7 + 1)) != 0;\n                        }\n                        v89 = (unsigned int)v39 == 2;\n                        if (v43 == 0)\n                        {\n                            break;\n                        }\n                        else\n                        {\n                            v55 = 0;\n                            break;\n                            v78 = ((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1;\n                            v78 = (char)(((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1) | v17;\n                            v78 = 0;\n                            v72 = (unsigned int)((unsigned long long)v25[v40 % 32] >> ((char)v40 & 31)) & 1;\n                            v89 = (unsigned int)v39 == 2;\n                            v89 = (unsigned int)v39 == 2;\n                            v80 += 1;\n                            v46 = (v78 ^ 1) & (unsigned int)v33;\n                            if (v46 != 0)\n                            {\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 39;\n                                }\n                                if (v79 > v76 + 1)\n                                {\n                                    *((char *)(v29 + v76 + 1)) = 39;\n                                }\n                                v76 += 2;\n                                v33 = 0;\n                            }\n                            v73 = (unsigned int)v33 ^ 1;\n                            v74 = (char)((unsigned int)v33 ^ 1) & v89;\n                            if (((char)((unsigned int)v33 ^ 1) & v89) != 0)\n                            {\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 39;\n                                }\n                                if (v76 + 1 < v79)\n                                {\n                                    *((char *)(v29 + v76 + 1)) = 36;\n                                }\n                                v75 = v76 + 2;\n                                if (v76 + 2 < v79)\n                                {\n                                    *((char *)(v29 + v76 + 2)) = 39;\n                                }\n                                v76 += 3;\n                                v33 = rax<8>;\n                            }\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            v76 += 1;\n                            v80 += 1;\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v81 = v39;\n                v82 = v38;\n                v83 = v81 == 2;\n                if ((v81 == 2 & v17) == 0 || v76 != 0)\n                {\n                    v84 = (unsigned int)v17 ^ 1;\n                    v85 = v83 & (char)((unsigned int)v17 ^ 1);\n                    v86 = v83 & (char)((unsigned int)v17 ^ 1);\n                    if ((char)v85 == 0)\n                    {\n                        v86 = v84;\n                    }\n                    else if (v18 != 0)\n                    {\n                        if (v6 == 0)\n                        {\n                            v84 = v79 == 0 & v14 != 0;\n                            if ((v79 == 0 & v14 != 0) == 0)\n                            {\n                                v86 = v18;\n                            }\n                        }\n                        else\n                        {\n                            v3 = v27;\n                            v2 = v26;\n                            v1 = v25;\n                            v76 = (unsigned int)sub_4072b0();\n                        }\n                    }\n                }\n            }\n            if (v6 == 0 && v78 == 0 && v18 != 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && (v79 == 0 & v14 != 0) == 0 || v78 == 0 && (char)v85 == 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || v78 == 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && v18 == 0)\n            {\n                v88 = v13;\n                if (v13 != 0 && v86 != 0)\n                {\n                    v90 = (char)*((char *)v88);\n                    if (*((char *)v88) != 0)\n                    {\n                        v91 = v88 - v76;\n                        do\n                        {\n                            if (v79 > v76)\n                            {\n                                *((unsigned long long *)(v29 + v76)) = v90;\n                            }\n                            v76 += 1;\n                            v90 = (char)*((char *)(v91 + v76));\n                        }\n                        while ((char)v90 != 0);\n                    }\n                }\n                if (v79 > v76)\n                {\n                    *((char *)(v29 + v76)) = 0;\n                }\n            }\n            if (v15 == 1)\n            {\n                v11 = v39;\n                v10 = v38;\n                v9 = v33;\n                v46 = (unsigned short)*((short *)(*((long long *)(unsigned long long)__ctype_b_loc()) + v40 * 2));\n                tmp_38 = v46 & 0x4000;\n                v46 &= 0x4000;\n                v51 = (tmp_38 & 65535) != 0;\n                v89 = (tmp_38 & 65535) == 0 & v4;\n                if (v89 != 0)\n                {\n                    v89 = v4;\n                    v78 = 0;\n                }\n            }\n            else\n            {\n                v24 = 0;\n                if (v38 == -1)\n                {\n                    v11 = v39;\n                    v10 = v33;\n                    *((unsigned long long *)&v9[0]) = v37;\n                    v38 = strlen(v7);\n                }\n                v21 = v76;\n                v22 = v37;\n                v54 = 0;\n                v19 = v33;\n                *((unsigned long long *)&v20) = v40;\n                v11 = v29;\n                v12 = v79;\n                v9 = v38;\n                v10 = v39;\n                do\n                {\n                    v56 = v80 + v54;\n                    v57 = v7 + v80 + v54;\n                    v46 = sub_40ba50();\n                    v58 = v46;\n                    if (v46 != -2 && v46 != 0 && v46 != -1)\n                    {\n                        if ((int)v10 == 2 && v17 != 0 && v46 != 1)\n                        {\n                            v59 = v7 + v77 + 1;\n                            v77 = v7 + v58 + v77;\n                            while (true)\n                            {\n                                v60 = (unsigned int)*(v59) - 91;\n                                if ((8589934635 & 1 << (v60 & 63)) == 0 || ((unsigned int)*(v59) - 91 & 255) > 33)\n                                {\n                                    v59 = &v59[1];\n                                    if (v77 == v59)\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                            if ((8589934635 & 1 << (v60 & 63)) == 0 || ((unsigned int)*(v59) - 91 & 255) > 33)\n                            {\n                                v78 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                                v54 += v58;\n                                v46 = mbsinit((unsigned int)&v24);\n                            }\n                        }\n                        v78 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                        v54 += v58;\n                        v46 = mbsinit((unsigned int)&v24);\n                    }\n                    if (v46 == -1)\n                    {\n                        v28 = v54;\n                        v40 = v20;\n                        v76 = v21;\n                        v78 = 0;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v79 = v12;\n                        v38 = v9;\n                        v39 = (unsigned int)v10;\n                        v89 = v4;\n                    }\n                    if (v46 == -2)\n                    {\n                        v38 = v9;\n                        v77 = v56;\n                        v46 = v54;\n                        v28 = v54;\n                        v33 = (char)v19;\n                        v40 = v20;\n                        v76 = v21;\n                        v29 = v11;\n                        v79 = v12;\n                        v39 = (unsigned int)v10;\n                        if (v77 < v9 && *((char *)v57) != 0)\n                        {\n                            do\n                            {\n                                v46 += 1;\n                            }\n                            while (v46 < v9 && *((char *)(v22 + v46)) != 0);\n                            v28 = v46;\n                        }\n                        v89 = v4;\n                        v78 = 0;\n                    }\n                    if (v46 == 0 || v46 != -2 && v46 != -1 && (unsigned int)v46 != 0)\n                    {\n                        v28 = v54;\n                        v40 = v20;\n                        v76 = v21;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v89 = (unsigned int)v78 ^ 1;\n                        v79 = v12;\n                        v38 = v9;\n                        v39 = (unsigned int)v10;\n                        v89 = (char)((unsigned int)v78 ^ 1) & v4;\n                    }\n                }\n                while (v28 <= 1);\n                if (v46 == -2 || v46 == 0 || v46 == -1 || (unsigned int)v46 != 0)\n                {\n                    v9 = v78;\n                    v77 = 0;\n                    v63 = v17;\n                    v64 = v28 + v80;\n                    v28 = v5;\n                }\n            }\n            if (false)\n            {\n                v5 = v42;\n                v50 = 0;\n                v87 = v89;\n                *((unsigned long long *)&v4) = v4 & v87;\n            }\n            if (v89 != 0)\n            {\n                v9 = v78;\n                v77 = 0;\n                v63 = v17;\n                v64 = v28 + v80;\n                v28 = v5;\n                while (true)\n                {\n                    if (v89 != 0)\n                    {\n                        v65 = (unsigned int)v39 == 2;\n                        if (v63 == 0)\n                        {\n                            v77 = (unsigned int)v33 ^ 1;\n                            v66 = v4 & (char)((unsigned int)v33 ^ 1);\n                            if ((v4 & (char)((unsigned int)v33 ^ 1)) != 0)\n                            {\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 39;\n                                }\n                                if (v79 > v76 + 1)\n                                {\n                                    *((char *)(v29 + v76 + 1)) = 36;\n                                }\n                                v77 = v76 + 2;\n                                if (v79 > v76 + 2)\n                                {\n                                    *((char *)(v29 + v76 + 2)) = 39;\n                                }\n                                v76 += 3;\n                                v33 = v46;\n                            }\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            if (v79 > v76 + 1)\n                            {\n                                v67 = v40;\n                                v68 = (char)v40 % 64;\n                                *((unsigned long long *)(v29 + v76 + 1)) = (unsigned long long)(unsigned int)rax<4> + 48;\n                            }\n                            v46 = v76 + 2;\n                            if (v79 > v76 + 2)\n                            {\n                                v70 = v40;\n                                v71 = (char)v40 % 8;\n                                v46 = (unsigned int)((rax<4> & 7) + 48);\n                                *((unsigned long long *)(v29 + v76 + 2)) = v46;\n                            }\n                            v80 += 1;\n                            v76 += 3;\n                            v40 = ((unsigned int)v40 & 7) + 48;\n                            if (v80 < v64)\n                            {\n                                v77 = v89;\n                            }\n                            else\n                            {\n                                v78 = (char)v9;\n                            }\n                        }\n                        else\n                        {\n                            v4 = v65;\n                        }\n                    }\n                    else\n                    {\n                        v46 = (v77 ^ 1) & (unsigned int)v33;\n                        if (v28 != 0)\n                        {\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            v76 += 1;\n                        }\n                        v80 += 1;\n                        if (v80 >= v64)\n                        {\n                            v78 = (char)v9;\n                        }\n                        else if (v46 != 0)\n                        {\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 39;\n                            }\n                            v46 = v76 + 1;\n                            if (v79 > v76 + 1)\n                            {\n                                *((char *)(v29 + v76 + 1)) = 39;\n                            }\n                            v76 += 2;\n                            v28 = 0;\n                            v33 = 0;\n                        }\n                        else\n                        {\n                            v28 = 0;\n                        }\n                    }\n                    if ((v63 == 0 || v89 == 0) && (v89 == 0 || v80 < v64) && (v80 < v64 || v89 != 0))\n                    {\n                        if (v79 > v76)\n                        {\n                            *((unsigned long long *)(v29 + v76)) = v40;\n                        }\n                        v40 = (char)*((char *)(v7 + v80));\n                        v76 += 1;\n                    }\n                }\n            }\n            if ((v43 == 0 || v78 == 0) && (v43 == 0 || v76 == 0) && (v43 == 0 || (v81 == 2 & v17) != 0) && (v78 == 0 || v17 != 0) && (v78 == 0 || v89 != 0) && (v76 == 0 || v17 != 0) && (v76 == 0 || v89 != 0) && ((v81 == 2 & v17) != 0 || v17 != 0) && ((v81 == 2 & v17) != 0 || v89 != 0))\n            {\n                v3 = v27;\n                v2 = v26;\n                v1 = 0;\n                v76 = (unsigned int)sub_4072b0();\n            }\n            if ((v46 == 0 || v17 == 0) && (v46 == 0 || (char)(((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1) == 0) && (v46 == 0 || v43 != 0) && (v17 == 0 || v89 != 0) && ((char)(((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1) == 0 || v89 != 0) && (v43 != 0 || v89 != 0))\n            {\n                if (v76 < v79)\n                {\n                    *((unsigned long long *)(v29 + v76)) = v40;\n                }\n                v76 += 1;\n                v6 = (v78 == 0? 0 : (unsigned int)(char)(char)(stack_base)[-169]);\n            }\n            if (v6 == 0 && v78 == 0 && v18 != 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && (v79 == 0 & v14 != 0) == 0 || v78 == 0 && (char)v85 == 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || v78 == 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && v18 == 0 || (v43 == 0 || v78 == 0) && (v43 == 0 || v76 == 0) && (v43 == 0 || (v81 == 2 & v17) != 0) && (v78 == 0 || v17 != 0) && (v78 == 0 || v89 != 0) && (v76 == 0 || v17 != 0) && (v76 == 0 || v89 != 0) && ((v81 == 2 & v17) != 0 || v17 != 0) && ((v81 == 2 & v17) != 0 || v89 != 0) || v78 == 0 && v6 != 0 && v18 != 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0))\n            {\n                v92 = v76;\n                return v92;\n            }\n        }\n        *((char *)v29) = 39;\n        v78 = 2;\n        v13 = \"'\";\n        v8 = 1;\n        v17 = 0;\n        v18 = v84;\n    }\n}\n"
        },
        {
            "funcName": "sub_409350",
            "funcStartAddr": "0x409350",
            "funcEndAddr": "0x409352",
            "decompiledFuncCode": "int sub_409350()\n{\n}\n"
        },
        {
            "funcName": "sub_403e40",
            "funcStartAddr": "0x403e40",
            "funcEndAddr": "0x404d17",
            "decompiledFuncCode": "int sub_403e40() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40bb50",
            "funcStartAddr": "0x40bb50",
            "funcEndAddr": "0x40bb91",
            "decompiledFuncCode": "int sub_40bb50()\n{\n    unsigned int *v1;  // rbx\n    unsigned int|unsigned long v2;  // r13\n\n    v1 = __errno_location();\n    v2 = *(v1);\n    if ((char)sub_40bad0() == 0)\n    {\n        v2 = *(v1);\n    }\n    sub_40bb20();\n    *((unsigned long *)&v1) = v2;\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_403d80",
            "funcStartAddr": "0x403d80",
            "funcEndAddr": "0x403e30",
            "decompiledFuncCode": "extern char g_614449;\nextern char g_61444a;\n\nint sub_403d80()\n{\n    unsigned long long *v1[3];  // rdi\n    unsigned long long v2[3];  // rbx\n    char *v3;  // rax\n    unsigned long long v4;  // rax\n    char *v5;  // rax\n    unsigned long v6;  // rdi\n\n    v2 = *(v1);\n    while (true)\n    {\n        v3 = v2[1];\n        if (v2[1] < v2[2])\n        {\n            v2[1] = (*(v1))[1] + 1;\n            v4 = *(v3);\n        }\n        else\n        {\n            v4 = __uflow((unsigned int)v2);\n        }\n        if (v2[1] < v2[2] && (unsigned int)v4 == 10 || (unsigned int)v4 == 10 && v2[1] >= v2[2])\n        {\n            return v4;\n        }\n        if ((unsigned int)v4 == 12 && (v2[1] < v2[2] || (unsigned int)v4 != 10) && (v2[1] >= v2[2] || (unsigned int)v4 != 10))\n        {\n            v5 = v2[1];\n            if (v2[1] < v2[2])\n            {\n                v2[1] = (*(v1))[1] + 1;\n                v6 = *(v5);\n            }\n            else\n            {\n                v6 = __uflow((unsigned int)v2);\n            }\n        }\n    }\n    if ((unsigned int)v6 == 10)\n    {\n    }\n    else\n    {\n        ungetc(v6, v2);\n    }\n    if (g_61444a != 0)\n    {\n        g_614449 = 1;\n    }\n}\n"
        },
        {
            "funcName": "sub_4089b0",
            "funcStartAddr": "0x4089b0",
            "funcEndAddr": "0x4089ba",
            "decompiledFuncCode": "int sub_4089b0()\n{\n}\n"
        },
        {
            "funcName": "sub_409360",
            "funcStartAddr": "0x409360",
            "funcEndAddr": "0x409390",
            "decompiledFuncCode": "int sub_409360()\n{\n    unsigned int v1;  // rsi\n    void *v2;  // rdi\n    unsigned long long v3;  // rax\n\n    if (v1 == 0 && v2 != 0)\n    {\n        free(v2);\n        return 0;\n    }\n    if (v2 == 0 || v1 != 0)\n    {\n        v3 = realloc(v2, v1);\n        if (v3 == 0 && v1 != 0)\n        {\n            sub_409550(); /* do not return */\n        }\n        if (v1 == 0 || v3 != 0)\n        {\n            return v3;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_40c0d0",
            "funcStartAddr": "0x40c0d0",
            "funcEndAddr": "0x40c624",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned int field_8;\n    unsigned short field_c;\n} struct_1;\n\nextern char g_40ce63;\nextern char g_614620[2];\n\nint sub_40c0d0()\n{\n    unsigned long long|unsigned long v0;  // [bp-0xd0]\n    void tmp_12;  // tmp #12\n    void tmp_56;  // tmp #56\n    void tmp_1;  // tmp #1\n    void tmp_10;  // tmp #10\n    void tmp_3;  // tmp #3\n    void tmp_28;  // tmp #28\n    unsigned long long v1;  // [bp-0xc8]\n    unsigned long long v2;  // [bp-0xc0]\n    char v3;  // [bp-0xb8]\n    char v4;  // [bp-0xb4]\n    char v5;  // [bp-0x78]\n    char v6;  // [bp-0x74]\n    unsigned int v7;  // [bp-0x4]\n    unsigned long long|char [2] v9;  // r15\n    char *|unsigned long v10;  // rbx\n    unsigned long v11;  // rax\n    unsigned long long v12;  // rdi\n    unsigned long long v13;  // rdi\n    unsigned long long v14;  // r12\n    char *v15;  // r13\n    unsigned long long v16;  // r14\n    unsigned long long v17;  // rbp\n    struct_1 *v20;  // r12\n    unsigned short v21;  // dx\n    unsigned int v22;  // r12d\n    unsigned long long v27;  // rax\n    unsigned int *v28;  // rcx\n    unsigned int v29;  // eax\n    unsigned long v30;  // rax\n    unsigned int *v31;  // rdx\n    unsigned long long v32;  // rcx\n    unsigned long long v33;  // rax\n    unsigned long v34;  // rax\n    unsigned long long v35;  // rax\n    unsigned long long v36;  // rax\n    unsigned long v37;  // rsi\n    unsigned long long v38;  // rcx\n    unsigned long long v39;  // rdx\n    unsigned long long v40;  // rcx\n    unsigned long long v41;  // rdi\n    unsigned long long v42;  // rsi\n    unsigned long long v43;  // r9\n    unsigned long long v44;  // r10\n    unsigned int v45;  // ecx\n    unsigned long long v47;  // r8\n    void *v48;  // rcx\n    unsigned long long v51;  // rcx\n    unsigned int v53;  // edx\n    unsigned long long v56;  // rcx\n    unsigned long long v57;  // rsi\n    char *v58;  // rax\n    unsigned long v59;  // rdi\n    char *v60;  // rax\n    unsigned long long v61;  // rdx\n    unsigned long long v65;  // rbp\n    unsigned long long v66;  // rax\n    unsigned long long v67;  // rax\n    unsigned long long v68;  // rbp\n    unsigned long long v69;  // rax\n\n    v9 = g_614620;\n    v10 = ((unsigned long long)nl_langinfo(0xe) == 0? &g_40ce63 : (unsigned long long)nl_langinfo(0xe));\n    if (g_614620 == 0)\n    {\n        v15 = getenv(\"CHARSETALIASDIR\");\n        if (v15 != 0 && *(v15) != 0)\n        {\n            v11 = strlen(v15);\n            v14 = v11;\n            v16 = v11;\n            if (v11 == 0)\n            {\n                v12 = 14;\n            }\n            else if (v15[v11 + -1] == 47)\n            {\n                v12 = v11 + 14;\n            }\n            else\n            {\n                v13 = v11 + 15;\n                v14 += 1;\n            }\n            if (v15[v11 + -1] == 47 || v11 == 0)\n            {\n                v17 = malloc(v12);\n                if (v17 != 0)\n                {\n                    memcpy(v17, v15, v16);\n                }\n            }\n        }\n        if (*(v15) == 0 || v15 == 0)\n        {\n            v13 = 115;\n            v14 = 101;\n            v16 = 100;\n            v15 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        }\n        if (*(v15) == 0 || v15 == 0 || v15[v11 + -1] != 47 && v11 != 0)\n        {\n            v17 = malloc(v13);\n        }\n        if (v17 == 0 || v17 == 0)\n        {\n            v9 = &g_40ce63;\n        }\n        if (v17 != 0 && (*(v15) == 0 || v15 == 0 || v15[v11 + -1] != 47) && (*(v15) == 0 || v15 == 0 || v11 != 0))\n        {\n            memcpy(v17, v15, v16);\n            *((char *)(v17 + v16)) = 47;\n        }\n        if (*(v15) == 0 && v17 != 0 || v15 == 0 && v17 != 0 || v17 != 0 && v15[v11 + -1] != 47 && v11 != 0 || v15[v11 + -1] == 47 && *(v15) != 0 && v15 != 0 && v17 != 0 || v11 == 0 && *(v15) != 0 && v15 != 0 && v17 != 0)\n        {\n            v20 = v14 + v17;\n            v20->field_0 = 3347411969557751907;\n            v20->field_c = 115;\n            v20->field_8 = 1634298977;\n            v22 = open(v17, 0x0, v21);\n            if (v22 >= 0)\n            {\n                v9 = 0;\n                v0 = 0;\n                if (v10 != 0)\n                {\n                    v10 = fdopen(v22, \"r\");\n                    while (true)\n                    {\n                        v58 = *((long long *)(v10 + 8));\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                        {\n                            *((char **)(v10 + 8)) = &v58[1];\n                            v59 = *(v58);\n                        }\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v59 != -1)\n                        {\n                            if ((unsigned int)v59 != 32 && (unsigned int)v59 != 35)\n                            {\n                                ungetc(v59, v10);\n                                v27 = fscanf(v10, \"%50s %50s\", (unsigned int)&v3, (unsigned int)&v5);\n                                if (v27 > 1)\n                                {\n                                    v28 = &v3;\n                                    do\n                                    {\n                                        tmp_12 = (unsigned int)*((int *)&v3);\n                                        v28 = &v4;\n                                        v29 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                    }\n                                    while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                    v30 = (unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int)(rax<8> >> 16) : (unsigned int)rax<8>);\n                                    v31 = &v5;\n                                    v32 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)((char *)v28 + 2) : v28) + -1 * ((v30 + v30 <= v30? 1 : 0) & 1) + -0x1 * &v3;\n                                    do\n                                    {\n                                        tmp_12 = (unsigned int)*((int *)&v5);\n                                        v31 = &v6;\n                                        v33 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                    }\n                                    while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                    v1 = v32;\n                                    tmp_56 = (unsigned int)v33 % 0x10000;\n                                    v34 = (unsigned int)(((unsigned int)v33 & 32896) == 0? (unsigned int)(v33 >> 16) : (unsigned int)v33);\n                                    v35 = &((char *)(-3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v31)[2] : v31) + -1 * ((v34 + v34 <= v34? 1 : 0) & 1) + -0x1 * &v5))[v1];\n                                    v2 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v31)[2] : v31) + -1 * (((unsigned int)((((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)) <= (unsigned long long)(unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)? 1 : 0) & 1) + -0x1 * &v5;\n                                    if (v0 == 0)\n                                    {\n                                        v0 = v35 + 2;\n                                        v36 = malloc(v35 + 3);\n                                        v38 = v1;\n                                        v39 = v2;\n                                    }\n                                    else\n                                    {\n                                        v37 = v35 + v0 + 3;\n                                        v0 = v35 + v0 + 2;\n                                        v36 = realloc(NULL, v37);\n                                        v39 = v2;\n                                        v38 = v1;\n                                    }\n                                    if (v36 != 0)\n                                    {\n                                        tmp_1 = -2 - v38;\n                                        v40 = v38 + 1;\n                                        v41 = v0 - v39;\n                                        v42 = tmp_1 + v0 - v39 + v36;\n                                        if ((unsigned int)v40 >= 8)\n                                        {\n                                            *((long long *)v42) = *((long long *)&v3);\n                                            *((long long *)(v42 + v40 - 8)) = *((long long *)&(&v3)[v40 + -8]);\n                                            v43 = v42 + 8 & -8;\n                                            v42 -= v42 + 8 & -8;\n                                            v44 = &(&v3)[-1 * v42];\n                                            v45 = (unsigned int)(v40 + v42) & -8;\n                                            if (v45 >= 8)\n                                            {\n                                                v42 = 0;\n                                                do\n                                                {\n                                                    v47 = v42;\n                                                    v42 = (unsigned int)v42 + 8;\n                                                    *((long long *)(v43 + v47)) = *((long long *)(v44 + v47));\n                                                }\n                                                while ((unsigned int)v42 < (v45 & -8));\n                                            }\n                                        }\n                                        else if ((v40 & 4) != 0)\n                                        {\n                                            *((int *)v42) = *((int *)&v3);\n                                            *((int *)(v42 + v40 - 4)) = *((int *)&(&v3)[v40 + -4]);\n                                        }\n                                        else if ((unsigned int)v40 != 0)\n                                        {\n                                            *((char *)v42) = v3;\n                                            if ((v40 & 2) != 0)\n                                            {\n                                                *((short *)(v42 + v40 - 2)) = *((short *)&(&v3)[v40 + -2]);\n                                            }\n                                        }\n                                        v61 = v39 + 1;\n                                        v48 = v36 + v41 - 1;\n                                        if ((unsigned int)v42 >= 8)\n                                        {\n                                            *((long long *)v48) = *((long long *)&v5);\n                                            v42 = v61;\n                                            *((long long *)&((char *)v48)[v42 + -8]) = *((long long *)&(&v5)[v42 + -8]);\n                                            v51 = v48 - (v48 + 8 & -8);\n                                            v53 = (unsigned int)(v42 + v51) & -8;\n                                            if (v53 >= 8)\n                                            {\n                                                v56 = 0;\n                                                do\n                                                {\n                                                    v57 = v56;\n                                                    v56 = (unsigned int)v56 + 8;\n                                                    *((long long *)((v48 + 8 & -8) + v57)) = *((long long *)&(&v5)[v57 + -1 * v51]);\n                                                }\n                                                while ((unsigned int)v56 < (v53 & -8));\n                                            }\n                                        }\n                                        else if (((char)v42 & 4) != 0)\n                                        {\n                                            *((int *)v48) = *((int *)&v5);\n                                            *((unsigned int *)&((char *)v48)[(unsigned long long)v7 + -4]) = v7;\n                                        }\n                                        else if ((unsigned int)v42 != 0)\n                                        {\n                                            *((char *)v48) = v5;\n                                            if ((v5 & 2) != 0)\n                                            {\n                                                *((short *)&((char *)v48)[(unsigned long long)v5 + -2]) = v7;\n                                            }\n                                        }\n                                        v9 = v36;\n                                        v58 = *((long long *)(v10 + 8));\n                                    }\n                                    else\n                                    {\n                                        v9 = &g_40ce63;\n                                        v10 = (tmp_10 == 0? &g_40ce63 : tmp_10);\n                                        free(NULL);\n                                        sub_40aa20();\n                                    }\n                                }\n                            }\n                            if ((unsigned int)v59 == 35)\n                            {\n                                do\n                                {\n                                    v60 = *((long long *)(v10 + 8));\n                                    if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                                    {\n                                        *((char **)(v10 + 8)) = &v60[1];\n                                        v60 = (unsigned int)*(v60);\n                                        v61 = 1;\n                                    }\n                                    else\n                                    {\n                                        v60 = __uflow(v10);\n                                        v61 = (char)((unsigned int)v60 != -1);\n                                    }\n                                }\n                                while (v61 != 0 && v60 != 10);\n                            }\n                        }\n                        if (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && v27 > 1 && (unsigned int)v59 != 32 && (unsigned int)v59 != 35 && v36 != 0)\n                        {\n                            v59 = __uflow(v10);\n                        }\n                        if ((unsigned int)v59 == 35 && (unsigned int)v59 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v59 != -1) && v60 == -1 || (unsigned int)v59 != 32 && (unsigned int)v59 != 35 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v59 != -1) && v27 <= 1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && v27 > 1 && (unsigned int)v59 != 32 && (unsigned int)v59 != 35 && v36 != 0) && (unsigned int)v59 == -1)\n                        {\n                            v10 = (tmp_10 == 0? &g_40ce63 : tmp_10);\n                            sub_40aa20();\n                            if (v0 == 0)\n                            {\n                                break;\n                            }\n                            *((char *)(v9 + v0)) = 0;\n                        }\n                    }\n                    if (...)\n                    {\n                        v9 = &g_40ce63;\n                    }\n                    else if (...)\n                    {\n                        free(v17);\n                    }\n                }\n                else\n                {\n                    close(v22);\n                }\n            }\n            v9 = &g_40ce63;\n            free(v17);\n        }\n        *((char *[2])&g_614620[0]) = v9;\n    }\n    v65 = v9[0];\n    if (v9[0] != 0)\n    {\n        while (true)\n        {\n            v66 = strcmp((tmp_10 == 0? &g_40ce63 : tmp_10), v9);\n            if (v66 != 0 && (v65 != 42 || v9[1] != 0))\n            {\n                v67 = strlen(v9);\n                v68 = &((char [2])&v9[v67])[1];\n                v69 = strlen(&((char [2])&v9[v67])[1]);\n                v9 = v68 + v69 + 1;\n                v65 = (char)*((char *)(v68 + v69 + 1));\n                if (v65 == 0)\n                {\n                    break;\n                }\n            }\n            if (v66 == 0 || v65 == 42 && v9[1] == 0)\n            {\n                v10 = &((char [2])&v9[strlen(v9)])[1];\n            }\n        }\n    }\n    tmp_3 = v10;\n    tmp_28 = *(v10) == 0;\n    return (tmp_28? \"ASCII\" : tmp_3);\n}\n"
        },
        {
            "funcName": "sub_408740",
            "funcStartAddr": "0x408740",
            "funcEndAddr": "0x40876b",
            "decompiledFuncCode": "extern char g_6145a0;\n\nint sub_408740()\n{\n    void tmp_2;  // tmp #2\n    void tmp_11;  // tmp #11\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long long v3[7];  // rdi\n    unsigned long v4;  // rsi\n    unsigned long v5;  // rdx\n\n    tmp_2 = v2;\n    tmp_11 = v2 == 0;\n    v3 = (v2 == 0? &g_6145a0 : v2);\n    *((int *)(tmp_11? &g_6145a0 : tmp_2)) = 10;\n    if (v4 != 0 && v5 != 0)\n    {\n        v3[5] = v4;\n        v3[6] = v5;\n        return &g_6145a0;\n    }\n    if (v4 == 0 || v5 == 0)\n    {\n        v0 = &g_6145a0;\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_408b70",
            "funcStartAddr": "0x408b70",
            "funcEndAddr": "0x408b7d",
            "decompiledFuncCode": "int sub_408b70()\n{\n}\n"
        },
        {
            "funcName": "sub_402fe0",
            "funcStartAddr": "0x402fe0",
            "funcEndAddr": "0x4031bb",
            "decompiledFuncCode": "extern unsigned int g_40ce4a;\nextern unsigned int g_6142a4;\nextern char g_6142a8;\nextern char g_614398[4];\nextern char g_6143e9;\nextern char g_6143ea;\nextern unsigned int g_614424;\nextern char g_614435;\n\nint sub_402fe0()\n{\n    char v0;  // [bp-0x1c]\n    char v1;  // [bp-0x1b]\n    char v2;  // [bp-0x1a]\n    char v4[4];  // rbx\n    char|unsigned long v5;  // dil\n    unsigned long long v7;  // cc_dep1\n    unsigned long long v8;  // rax\n    unsigned long long|unsigned int|unsigned long v10;  // rsi\n    unsigned long long v11;  // rdx\n    unsigned long long v13;  // rdx\n    unsigned int v14;  // r9d\n    unsigned int v15;  // ecx\n\n    v4 = g_614398;\n    if (!(g_6142a8 != v5))\n    {\n        v10 = g_614424;\n        v13 = g_6142a4 - ((g_614424 >> 31 CONCAT g_614424) % g_6142a4 >> 32);\n        if (g_614435 != 0)\n        {\n            if (g_6142a4 - ((g_614424 >> 31 CONCAT g_614424) % g_6142a4 >> 32) != 0)\n            {\n                v8 = g_6142a4 - ((g_614424 >> 31 CONCAT g_614424) % g_6142a4 >> 32);\n            }\n            else\n            {\n                v8 = 0;\n            }\n        }\n    }\n    else if (v5 != 9)\n    {\n        v7 = (char)(*((char *)(*((long long *)(unsigned long long)__ctype_b_loc()) + (unsigned long long)v5 * 2 + 1)) & 64);\n        if ((char)v7 == 0)\n        {\n            if (g_6143ea == 0)\n            {\n                if (!(g_6143e9 != 0))\n                {\n                    v10 = g_614424;\n                    if ((char)v5 != 8)\n                    {\n                        g_614398[0] = v5;\n                        v8 = 1;\n                    }\n                    else\n                    {\n                        g_614398[0] = 8;\n                        if (g_614424 != 0)\n                        {\n                            v15 = 1;\n                            v13 = -18446744069414584321;\n                            v8 = 1;\n                        }\n                    }\n                }\n                else if ((char)v5 >= 0)\n                {\n                    v4[0] = 94;\n                    v10 = (unsigned long long)g_614424 + 2;\n                    v4[1] = (unsigned int)v5 ^ 64;\n                    v8 = 2;\n                }\n            }\n            if (((char)v5 < 0 || g_6143ea != 0) && (g_6143ea != 0 || g_6143e9 != 0))\n            {\n                g_614398[0] = 92;\n                __sprintf_chk((unsigned int)&v0, 0x1, 0x4, 0x40ce4a, v5, v14);\n                v4[1] = v0;\n                v4[2] = v1;\n                v4[3] = v2;\n                v10 = (unsigned long long)g_614424 + 4;\n                v8 = 4;\n            }\n        }\n        else\n        {\n            g_614398[0] = v5;\n            v10 = (unsigned long long)g_614424 + 1;\n            v8 = 1;\n        }\n    }\n    else\n    {\n        v10 = g_614424;\n        v8 = (unsigned int)((long long)(int)g_614424 >> 31 >> 29) - ((unsigned int)(v10 + ((long long)(int)g_614424 >> 31 >> 29)) & 7) + 8;\n        v13 = (unsigned int)((long long)(int)g_614424 >> 31 >> 29) - ((unsigned int)(v10 + ((long long)(int)g_614424 >> 31 >> 29)) & 7) + 8;\n    }\n    if (g_6142a8 == v5 || v5 == 9)\n    {\n        if (g_614435 == 0)\n        {\n            g_614398[0] = v5;\n            v8 = 1;\n        }\n        if (g_614435 != 0 && (g_6142a8 != v5 || g_6142a4 - ((g_614424 >> 31 CONCAT g_614424) % g_6142a4 >> 32) != 0))\n        {\n            v11 = &((char [4])&g_614398[v8 + -1])[1];\n            do\n            {\n                v4 = &v4[1];\n                v4[-1 + 7] = 32;\n            }\n            while (v4 != v11);\n            v13 = v8;\n        }\n        if ((unsigned int)v13 < 0 && (g_614435 == 0 || g_6142a8 != v5 || g_6142a4 - ((g_614424 >> 31 CONCAT g_614424) % g_6142a4 >> 32) != 0) && (unsigned int)v10 != 0)\n        {\n            v15 = 0 - (unsigned int)v13;\n        }\n    }\n    if ((char)v5 == 8 && g_6143ea == 0 && (char)v7 == 0 && g_6143e9 == 0 && g_6142a8 != v5 && v5 != 9 && g_614424 == 0 || (unsigned int)v13 < 0 && (g_6142a8 == v5 || v5 == 9) && (g_614435 == 0 || g_6142a8 != v5 || g_6142a4 - ((g_614424 >> 31 CONCAT g_614424) % g_6142a4 >> 32) != 0) && (unsigned int)v10 == 0)\n    {\n        g_614424 = 0;\n        return 0;\n    }\n    if (((char)v5 == 8 && g_6143ea == 0 && (char)v7 == 0 && g_6143e9 == 0 && g_614424 != 0 && g_6142a8 != v5 && v5 != 9 || (unsigned int)v13 < 0 && (unsigned int)v10 != 0 && (g_6142a8 == v5 || v5 == 9) && (g_614435 == 0 || g_6142a8 != v5 || g_6142a4 - ((g_614424 >> 31 CONCAT g_614424) % g_6142a4 >> 32) != 0)) && v15 >= (unsigned int)v10)\n    {\n        g_614424 = 0;\n        return v8;\n    }\n    if (((char)v5 == 8 && g_6143ea == 0 && (char)v7 == 0 && g_6143e9 == 0 && g_614424 != 0 && g_6142a8 != v5 && v5 != 9 || (unsigned int)v13 < 0 && (unsigned int)v10 != 0 && (g_6142a8 == v5 || v5 == 9) && (g_614435 == 0 || g_6142a8 != v5 || g_6142a4 - ((g_614424 >> 31 CONCAT g_614424) % g_6142a4 >> 32) != 0)) && v15 < (unsigned int)v10 || (g_614435 == 0 && g_6142a8 == v5 || g_6142a8 == v5 && g_6142a4 - ((g_614424 >> 31 CONCAT g_614424) % g_6142a4 >> 32) != 0 || v5 == 9 && g_6142a8 != v5) && (unsigned int)v13 >= 0)\n    {\n        v10 += v13;\n    }\n    if (g_6143ea == 0 && (char)v7 == 0 && (char)v5 >= 0 && g_6142a8 != v5 && v5 != 9 && g_6143e9 != 0 || g_6143ea == 0 && (char)v7 == 0 && g_6143e9 == 0 && (char)v5 != 8 && g_6142a8 != v5 && v5 != 9 || (char)v7 == 0 && g_6142a8 != v5 && v5 != 9 && ((char)v5 < 0 || g_6143ea != 0) && (g_6143ea != 0 || g_6143e9 != 0) || g_6142a8 != v5 && (char)v7 != 0 && v5 != 9 || ((char)v5 == 8 && g_6143ea == 0 && (char)v7 == 0 && g_6143e9 == 0 && g_614424 != 0 && g_6142a8 != v5 && v5 != 9 || (unsigned int)v13 < 0 && (unsigned int)v10 != 0 && (g_6142a8 == v5 || v5 == 9) && (g_614435 == 0 || g_6142a8 != v5 || g_6142a4 - ((g_614424 >> 31 CONCAT g_614424) % g_6142a4 >> 32) != 0)) && v15 < (unsigned int)v10 || (g_614435 == 0 && g_6142a8 == v5 || g_6142a8 == v5 && g_6142a4 - ((g_614424 >> 31 CONCAT g_614424) % g_6142a4 >> 32) != 0 || v5 == 9 && g_6142a8 != v5) && (unsigned int)v13 >= 0 || g_6142a8 == v5 && g_6142a4 - ((g_614424 >> 31 CONCAT g_614424) % g_6142a4 >> 32) == 0 && g_614435 != 0)\n    {\n        *((unsigned long *)&g_614424) = v10;\n        return v8;\n    }\n}\n"
        },
        {
            "funcName": "sub_4036c0",
            "funcStartAddr": "0x4036c0",
            "funcEndAddr": "0x4037d3",
            "decompiledFuncCode": "extern unsigned int g_40ce4f;\nextern unsigned int g_614278;\nextern char g_614288;\nextern unsigned int g_614298;\nextern unsigned int g_61429c;\nextern unsigned long long g_6143f0;\nextern unsigned int g_6143f8;\nextern unsigned int g_614400;\nextern unsigned int g_614424;\nextern unsigned int g_614428;\nextern char g_61443d;\nextern char g_61444f;\n\nint sub_4036c0()\n{\n    void tmp_28;  // tmp #28\n    unsigned long long v1;  // rdi\n    unsigned long long v2;  // rbp\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rdi\n    unsigned long long v6;  // rdi\n    unsigned long long v7;  // rax\n    unsigned int|unsigned long v8;  // ebx\n    unsigned long long v9;  // rsi\n    unsigned long long v10;  // rcx\n    unsigned int v11;  // ebx\n    unsigned long long v12;  // rdi\n    unsigned long long v13;  // rdi\n\n    v2 = v1;\n    g_614400 = g_614400 + 1;\n    v3 = (int)(__sprintf_chk(g_6143f0, 0x1, 0xffffffff, 0x40ce4f, g_614278, g_614400) - g_614278) + g_6143f0;\n    if (g_614278 > 0)\n    {\n        while (true)\n        {\n            v3 += 1;\n            v4 = (char)*((char *)(v3 - 1));\n            *((long long *)rbp<8>)();\n            if (v3 == tmp_28 + g_6143f0 + (unsigned long long)g_614278 - 1 + 1)\n            {\n                break;\n            }\n        }\n    }\n    v6 = g_614288;\n    if (!(g_614298 > 1))\n    {\n        v7 = *((long long *)rbp<8>)();\n        if (g_614288 == 9)\n        {\n            v9 = g_614428;\n            v10 = g_61429c - ((g_614428 >> 31 CONCAT g_614428) % g_61429c >> 32);\n            v7 = v10 + v9;\n            g_614428 = v10 + v9;\n        }\n    }\n    else if (g_614288 != 9)\n    {\n        v7 = *((long long *)rbp<8>)();\n    }\n    else\n    {\n        v7 = g_6143f8 - g_614278;\n        v8 = (unsigned long long)(g_6143f8 - g_614278) - 1;\n        if (g_6143f8 - g_614278 > 0)\n        {\n            while (true)\n            {\n                v11 = v8 - 1;\n                v12 = 32;\n                v7 = *((long long *)rbp<8>)();\n                if (v11 == -1)\n                {\n                    break;\n                }\n                v8 = (unsigned long long)v11 - 1;\n                v13 = 32;\n                v7 = *((long long *)rbp<8>)();\n            }\n        }\n    }\n    if (g_61443d != 0 && g_61444f == 0)\n    {\n        v7 = g_6143f8;\n        g_614424 = g_614424 + g_6143f8;\n    }\n    return v7;\n}\n"
        },
        {
            "funcName": "sub_409300",
            "funcStartAddr": "0x409300",
            "funcEndAddr": "0x40931a",
            "decompiledFuncCode": "int sub_409300()\n{\n    unsigned int v1;  // rdi\n    unsigned long long v2;  // rax\n\n    v2 = malloc(v1);\n    if (v2 == 0 && v1 != 0)\n    {\n        sub_409550(); /* do not return */\n    }\n    if (v1 == 0 || v2 != 0)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_409550",
            "funcStartAddr": "0x409550",
            "funcEndAddr": "0x409581",
            "decompiledFuncCode": "extern unsigned int g_4104af;\nextern unsigned int g_6142c0;\n\nint sub_409550()\n{\n    dcgettext(0x0, 0x4104af, 0x5);\n    error(g_6142c0, 0x0, \"%s\");\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_40ad60",
            "funcStartAddr": "0x40ad60",
            "funcEndAddr": "0x40b35e",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    char padding_18[8];\n    struct struct_1 *field_20;\n} struct_0;\n\nextern unsigned int g_410f40;\nextern unsigned int g_410f60;\nextern unsigned int g_410f90;\nextern unsigned int g_410fb0;\nextern unsigned int g_410fe0;\nextern unsigned int g_411031;\nextern unsigned long long stderr;\n\nint sub_40ad60()\n{\n    char *v0;  // [bp-0x78]\n    unsigned long long v1;  // [bp-0x70]\n    unsigned int *v2;  // [bp-0x68]\n    char *v3;  // [bp-0x58]\n    unsigned int v4;  // [bp-0x50]\n    char v5;  // [bp-0x49]\n    unsigned int v6;  // [bp-0x44]\n    unsigned int v7;  // [bp-0x40]\n    unsigned int v8;  // [bp-0x3c]\n    struct_0 *v9;  // [bp+0x8]\n    unsigned int v10;  // [bp+0x10]\n    char v11;  // [bp+0x18]\n    char *v12;  // r14\n    char *v13;  // rdx\n    unsigned long v14;  // r8\n    char *v15;  // rbp\n    unsigned long long v16;  // rax\n    unsigned long long v17;  // r13\n    unsigned long long v18;  // rcx\n    unsigned long long|unsigned long long * v19;  // rbx\n    unsigned long long|unsigned int|unsigned long v20;  // r12\n    char *v21;  // r15\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // r8\n    char *v25;  // rdi\n    unsigned long long v26;  // r15\n    unsigned long long v27;  // rbp\n    unsigned long long v28;  // rax\n    unsigned int v29;  // r9d\n    unsigned long long v30;  // r9\n    unsigned long long v31;  // rdx\n    unsigned int v32;  // ecx\n    unsigned long long *v34;  // rsi\n    char *v35;  // rbp\n    unsigned long long v36;  // rdx\n    unsigned long v39;  // rdi\n    unsigned long long v40;  // rbx\n    unsigned long long v41;  // r12\n    unsigned long long v43;  // rbp\n    unsigned long long v46;  // rax\n    unsigned int *v47;  // rdx\n    unsigned long long v48;  // r14\n\n    v12 = v9->field_20;\n    v3 = v13;\n    v2 = v14;\n    v15 = v9->field_20;\n    *((struct struct_1 *)&v5) = *(v9->field_20);\n    if (*(v9->field_20) != 61 && *(v9->field_20) != 0)\n    {\n        do\n        {\n            v15 = &v15[1];\n            v16 = *(v15);\n        }\n        while ((char)v16 != 0 && v16 != 61);\n        v17 = v15 - v12;\n    }\n    if (*(v9->field_20) == 61 || *(v9->field_20) == 0)\n    {\n        v17 = 0;\n    }\n    v19 = v18;\n    v20 = 0;\n    v0 = *((long long *)v18);\n    v21 = *((long long *)v18);\n    if (*((long long *)v18) != 0)\n    {\n        while (true)\n        {\n            v22 = strncmp(v21, v9->field_20, v17);\n            if (v22 == 0)\n            {\n                v23 = strlen(v21);\n            }\n            if (v22 != 0 || v23 != v17)\n            {\n                v19 += 32;\n                v21 = *(v19);\n                v24 = v20 + 1;\n                if (*(v19) != 0)\n                {\n                    v20 = v24;\n                }\n                else\n                {\n                    v8 = v20;\n                    v19 = 0;\n                    v6 = -1;\n                    v25 = v0;\n                    v26 = 0;\n                    v4 = 0;\n                    v7 = 0;\n                    v1 = 0;\n                    v0 = v15;\n                    v27 = v18;\n                    do\n                    {\n                        v28 = strncmp(v25, v9->field_20, v17);\n                        if (v28 == 0)\n                        {\n                            if (v19 == 0)\n                            {\n                                v6 = v26;\n                                v19 = v27;\n                            }\n                            else if (v29 != 0 || *((int *)(v19 + 24)) != *((int *)(v27 + 24)) || *((long long *)(v19 + 16)) != *((long long *)(v27 + 16)) || *((int *)(v19 + 8)) != *((int *)(v27 + 8)))\n                            {\n                                if (v4 == 0)\n                                {\n                                    if (v10 == 0)\n                                    {\n                                        v4 = 1;\n                                    }\n                                    else if (v1 == 0)\n                                    {\n                                        v1 = calloc((int)v8, 0x1);\n                                        v4 = 1;\n                                    }\n                                    if (false)\n                                    {\n                                        v7 = 1;\n                                        *((char *)(v1 + (int)v6)) = 1;\n                                    }\n                                    if (v1 != 0)\n                                    {\n                                        *((char *)(v1 + v26)) = 1;\n                                    }\n                                }\n                            }\n                        }\n                        v27 += 32;\n                        v25 = *((long long *)v27);\n                        v26 += 1;\n                    }\n                    while (*((long long *)v27) != 0);\n                    v15 = v0;\n                    if (v1 == 0)\n                    {\n                        v30 = v4;\n                        if (v4 == 0)\n                        {\n                            if (v19 == 0)\n                            {\n                                break;\n                            }\n                            v20 = v6;\n                        }\n                    }\n                    if (v4 != 0 || v1 != 0)\n                    {\n                        if (v10 != 0)\n                        {\n                            if (v4 != 0)\n                            {\n                                __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x410f40, 0x5), *(v34));\n                                v12 = v9->field_20;\n                            }\n                            else\n                            {\n                                flockfile(stderr);\n                                __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x410f60, 0x5), *(v34));\n                                v39 = stderr;\n                                v40 = v18;\n                                v43 = v1;\n                                v41 = v1 + v20 + 1;\n                                do\n                                {\n                                    if (*((char *)v43) != 0)\n                                    {\n                                        __fprintf_chk(v39, 0x1, 0x411031, *((long long *)&v11));\n                                        v39 = stderr;\n                                    }\n                                    v43 += 1;\n                                    v40 += 32;\n                                }\n                                while (v41 != v43);\n                                fputc(0xa, v39);\n                                funlockfile(stderr);\n                                v12 = v9->field_20;\n                            }\n                        }\n                        if (v7 != 0)\n                        {\n                            free(v1);\n                        }\n                        v48 = &v12[strlen(v12)];\n                        v9->field_20 = v48;\n                        v9->field_0 = v9->field_0 + 1;\n                        v9->field_8 = 0;\n                        v46 = 63;\n                    }\n                }\n            }\n            if ((v22 == 0 || *(v19) == 0) && (v22 == 0 || v4 == 0) && (v22 == 0 || v1 == 0) && (*(v19) == 0 || v23 == v17) && (v4 == 0 || v23 == v17) && (v1 == 0 || v23 == v17))\n            {\n                v31 = v9->field_0;\n                v9->field_20 = 0;\n                v9->field_0 = (unsigned int)v31 + 1;\n                v32 = *((int *)(v19 + 8));\n                if (*(v15) == 0)\n                {\n                    if (v32 == 1)\n                    {\n                        if ((unsigned int)((unsigned long long)v9->field_0 + 1) < v25)\n                        {\n                            v9->field_0 = v9->field_0 + 2;\n                            v9->field_10 = v34[1 + v31];\n                        }\n                        else\n                        {\n                            if (v10 != 0)\n                            {\n                                __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x410fe0, 0x5), *(v34));\n                            }\n                            v9->field_8 = *((int *)(v19 + 24));\n                            v46 = (unsigned long long)(char)(*(v3) != 58) * 5 + 58;\n                        }\n                    }\n                }\n                else\n                {\n                    if (v32 != 0)\n                    {\n                        v35 = &v15[1];\n                        v9->field_10 = v35;\n                    }\n                    else\n                    {\n                        if (v10 != 0)\n                        {\n                            __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x410fb0, 0x5), *(v34));\n                        }\n                        v9->field_8 = *((int *)(v19 + 24));\n                        v46 = 63;\n                    }\n                }\n                if ((unsigned int)((unsigned long long)v9->field_0 + 1) < v25 && *(v15) == 0 || *(v15) == 0 && v32 != 1 || *(v15) != 0 && v32 != 0)\n                {\n                    if (v2 != 0)\n                    {\n                        *((unsigned long *)&v2) = v20;\n                    }\n                    v47 = *((long long *)(v19 + 16));\n                    v46 = (unsigned int)*((int *)(v19 + 24));\n                    if (*((long long *)(v19 + 16)) == 0)\n                    {\n                        break;\n                    }\n                    *(v47) = v46;\n                    v46 = 0;\n                }\n            }\n        }\n        if (...)\n        {\n            return v46;\n        }\n    }\n    if (v29 != 0)\n    {\n        if (*((char *)(v34[(long long)(int)v9->field_0] + 1)) != 45)\n        {\n            v36 = strchr(v3, v5);\n            v46 = -18446744069414584321;\n        }\n        if ((v36 != 0 || *((long long *)v18) != 0) && (*((char *)(v34[(long long)(int)v9->field_0] + 1)) != 45 || *((long long *)v18) != 0))\n        {\n            return v46;\n        }\n    }\n    if (v29 == 0 && *((long long *)v18) == 0 || v36 == 0 && v29 != 0 || *((char *)(v34[(long long)(int)v9->field_0] + 1)) == 45 && v29 != 0)\n    {\n        if (v10 != 0)\n        {\n            __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x410f90, 0x5), *(v34));\n        }\n        v9->field_20 = 0;\n        v9->field_0 = v9->field_0 + 1;\n        v9->field_8 = 0;\n        return 63;\n    }\n}\n"
        },
        {
            "funcName": "sub_40bc30",
            "funcStartAddr": "0x40bc30",
            "funcEndAddr": "0x40bd8b",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[48];\n    struct struct_1 *field_30;\n} struct_0;\n\ntypedef struct struct_3 {\n    unsigned long long field_0;\n    char field_8;\n} struct_3;\n\ntypedef struct struct_2 {\n    char padding_0[8];\n    char field_8;\n} struct_2;\n\nextern char g_40ce63;\n\nint sub_40bc30()\n{\n    struct_0 *v1;  // rsi\n    unsigned long long v2;  // rdi\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // r14\n    unsigned long long v5;  // rax\n    char *v6;  // rbx\n    struct_3 *v7;  // rbp\n    unsigned long long v8;  // rax\n    char *v9;  // r15\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n    struct_2 *v13;  // rax\n\n    if (v1->field_30 != 0)\n    {\n        v7 = v2;\n        if (v1 <= v1->field_30)\n        {\n            v12 = 1;\n        }\n        if (v1 > v1->field_30 || v1->field_30 >= &v1[1])\n        {\n            v6 = v2 + 9;\n            if (*(v1->field_30) != 0)\n            {\n                while (true)\n                {\n                    v3 = strcmp(v6, v1->field_30);\n                    if (v3 == 0)\n                    {\n                        break;\n                    }\n                    while (true)\n                    {\n                        if (*(v6) == 0)\n                        {\n                            v4 = &v7[1];\n                            if (&v7[1] != v6)\n                            {\n                                v9 = strlen(v1->field_30) + 1;\n                                v10 = &v6[-1 * v4];\n                                if (!(&v6[-1 * v4]) < v9)\n                                {\n                                    *(__errno_location()) = 12;\n                                    v12 = 0;\n                                }\n                            }\n                            else if (v7->field_8 == 0)\n                            {\n                                v9 = strlen(v1->field_30) + 1;\n                                v10 = 0;\n                            }\n                            if ((&v7[1] == v6 || !(&v6[-1 * v4]) >= v9) && (v7->field_8 == 0 || &v7[1] != v6))\n                            {\n                                v11 = &v9[v10];\n                                if (v11 <= 118)\n                                {\n                                    memcpy(v6, v1->field_30, v9);\n                                    *((char *)(v6 + v9)) = 0;\n                                }\n                                else\n                                {\n                                    v13 = sub_40bba0();\n                                    v7->field_0 = v13;\n                                    if (v13 != 0)\n                                    {\n                                        v13->field_8 = 0;\n                                        v6 = &v13[1];\n                                    }\n                                    else\n                                    {\n                                        v12 = 0;\n                                    }\n                                }\n                            }\n                        }\n                        if (*(v6) != 0 || &v7[1] == v6 && v7->field_8 != 0)\n                        {\n                            v6 = &v6[strlen(v6) + 1];\n                            v5 = v7->field_0;\n                            if (v7->field_0 == 0 || *(v6) != 0)\n                            {\n                                break;\n                            }\n                            v6 = &v7[1];\n                            v7 = v5;\n                            v8 = strcmp(v5 + 9, v1->field_30);\n                        }\n                    }\n                    if (*(v6) != 0 || &v7[1] == v6 && v7->field_8 != 0)\n                    {\n                        v3 = strcmp(v6, v1->field_30);\n                    }\n                    else if (*(v6) == 0 && v13 != 0 && v11 > 118 && (&v7[1] == v6 || !(&v6[-1 * v4]) >= v9) && (v7->field_8 == 0 || &v7[1] != v6) || *(v6) == 0 && v11 <= 118 && (&v7[1] == v6 || !(&v6[-1 * v4]) >= v9) && (v7->field_8 == 0 || &v7[1] != v6) || v8 == 0 && v7->field_0 != 0)\n                    {\n                        v1->field_30 = v6;\n                        v12 = 1;\n                    }\n                    else if (*(v6) == 0 && (v13 == 0 || !(&v6[-1 * v4]) < v9) && (v13 == 0 || &v7[1] != v6) && (!(&v6[-1 * v4]) < v9 || v11 > 118) && (v7->field_8 == 0 || &v7[1] != v6) && (&v7[1] != v6 || v11 > 118))\n                    {\n                        return v12;\n                    }\n                }\n                if (true)\n                {\n                    v1->field_30 = v6;\n                    v12 = 1;\n                }\n                else\n                {\n                    return v12;\n                }\n            }\n            else\n            {\n                v6 = &g_40ce63;\n            }\n            v1->field_30 = v6;\n            v12 = 1;\n        }\n        return v12;\n    }\n    return 1;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Angr",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_pr.elf"
}