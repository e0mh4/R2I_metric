{
    "funcInfo": [
        {
            "funcName": "sub_404b80",
            "funcStartAddr": "0x404b80",
            "funcEndAddr": "0x404b8a",
            "decompiledFuncCode": "int sub_404b80()\n{\n}\n"
        },
        {
            "funcName": "sub_406350",
            "funcStartAddr": "0x406350",
            "funcEndAddr": "0x4063c8",
            "decompiledFuncCode": "int sub_406350()\n{\n    unsigned int v0;  // [bp+0x0]\n    void *v2;  // rdi\n    unsigned long long v4;  // rax\n    unsigned long long v8;  // rax\n\n    if (fileno(v2) >= 0)\n    {\n        v4 = __freading();\n        if ((v4 == 0 || (unsigned long long)lseek(fileno(v2), 0x0, 0x1) != -1) && sub_4063d0() != 0)\n        {\n            v8 = fclose(v2);\n            if (v0 != 0)\n            {\n                *(__errno_location()) = v0;\n                v8 = -18446744069414584321;\n            }\n            return v8;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_404b60",
            "funcStartAddr": "0x404b60",
            "funcEndAddr": "0x404b71",
            "decompiledFuncCode": "int sub_404b60()\n{\n}\n"
        },
        {
            "funcName": "sub_405c40",
            "funcStartAddr": "0x405c40",
            "funcEndAddr": "0x405caf",
            "decompiledFuncCode": "extern unsigned long long g_40aed1;\n\nint sub_405c40()\n{\n    char v0;  // [bp-0x1c]\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rbx\n    unsigned long v4;  // rdx\n    char *|unsigned long long v5;  // rbp\n    unsigned long long v6;  // rdi\n    unsigned int *v7;  // r12\n    unsigned long long v9;  // rax\n\n    if (v2 != 0)\n    {\n        v3 = -2;\n        if (v4 != 0)\n        {\n            v7 = v6;\n            v5 = v2;\n        }\n    }\n    else\n    {\n        v5 = &g_40aed1;\n    }\n    if (v2 == 0 || v6 == 0 && v4 != 0)\n    {\n        v7 = &v0;\n    }\n    if (v2 == 0 || v4 != 0)\n    {\n        v3 = mbrtowc((unsigned int)v7, (unsigned int)v5);\n        if (v3 > -3 && sub_405d80() == 0)\n        {\n            v3 = 1;\n            *(v7) = *(v5);\n        }\n    }\n    v9 = v3;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_404ec0",
            "funcStartAddr": "0x404ec0",
            "funcEndAddr": "0x404ed2",
            "decompiledFuncCode": "int sub_404ec0()\n{\n}\n"
        },
        {
            "funcName": "sub_4026c0",
            "funcStartAddr": "0x4026c0",
            "funcEndAddr": "0x4026e7",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[1];\n    char field_1;\n} struct_0;\n\nint sub_4026c0()\n{\n    unsigned long long v1;  // rax\n    struct_0 *v2;  // rdi\n    unsigned long long v3;  // rcx\n\n    v1 = 0;\n    v3 = (unsigned int)v2->field_1 - 71;\n    if (((unsigned int)v2->field_1 - 71 & 255) <= 51)\n    {\n        v1 = 1 << (v3 & 63);\n        v1 = (char)((3232100262089121 & 1 << (v3 & 63)) != 0);\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_402e30",
            "funcStartAddr": "0x402e30",
            "funcEndAddr": "0x4031c6",
            "decompiledFuncCode": "extern unsigned int g_4090a1;\nextern unsigned int g_4090af;\nextern unsigned int g_4092e0;\nextern unsigned int g_409308;\nextern unsigned int g_409360;\nextern unsigned int g_409398;\nextern unsigned int g_4093c8;\nextern unsigned int g_409400;\nextern unsigned int g_409478;\nextern unsigned int g_409578;\nextern unsigned int g_409678;\nextern unsigned int g_4097f0;\nextern unsigned int g_4098b0;\nextern unsigned int g_409960;\nextern unsigned int g_409a78;\nextern unsigned int g_409ba0;\nextern unsigned int g_409cc0;\nextern unsigned int g_409da8;\nextern unsigned int g_409e28;\nextern unsigned int g_409eb0;\nextern unsigned int g_409f98;\nextern unsigned int g_409fe0;\nextern unsigned int g_40a000;\nextern unsigned long long stdout;\n\nint sub_402e30()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n    unsigned int v3;  // edi\n    unsigned long long v20;  // rbp\n    char *v23;  // rax\n\n    v0 = v2;\n    if (v3 != 0)\n    {\n        dcgettext(0x0, 0x4092e0, 0x5);\n        __fprintf_chk();\n    }\n    else\n    {\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x409308, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x409360, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x409398, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4093c8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x409400, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x409478, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x409578, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x409678, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4097f0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4098b0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x409960, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x409a78, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x409ba0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x409cc0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x409da8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x409e28, 0x5), stdout);\n        v20 = dcgettext(0x0, 0x4090a1, 0x5);\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x409eb0, 0x5));\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x4090af, 0x5));\n        v23 = setlocale(0x5, 0x0);\n        if (v23 != 0 && strncmp(v23, \"en_\", 0x3) != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x409f98, 0x5));\n        }\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x409fe0, 0x5));\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40a000, 0x5));\n    }\n    exit(v3); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_405250",
            "funcStartAddr": "0x405250",
            "funcEndAddr": "0x4055f9",
            "decompiledFuncCode": "extern unsigned int g_40ae8b;\nextern unsigned int g_40ae8f;\nextern unsigned int g_40ae9f;\nextern unsigned int g_40aeb6;\nextern unsigned int g_40af18;\nextern unsigned int g_40afe8;\nextern unsigned int g_40b008;\nextern unsigned int g_40b030;\nextern unsigned int g_40b058;\nextern unsigned int g_40b088;\n\nint sub_405250()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long long v11[9];  // r8\n    unsigned long long v12[9];  // rbx\n    unsigned long v13;  // rsi\n    void *v14;  // rdi\n    unsigned long v16;  // r9\n    unsigned long long v17;  // r8\n    unsigned long long v18;  // r15\n    unsigned long long v19;  // r14\n    unsigned long v20;  // rsi\n    unsigned long long v21;  // r8\n    unsigned long long v22;  // r13\n    unsigned long long v23;  // r12\n    unsigned long long v24;  // r14\n\n    v12 = v11;\n    if (v13 != 0)\n    {\n        __fprintf_chk();\n    }\n    else\n    {\n        __fprintf_chk();\n    }\n    dcgettext(0x0, 0x40ae8b, 0x5);\n    __fprintf_chk();\n    fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40af18, 0x5), v14);\n    switch (v16)\n    {\n    case 0:\n        abort(); /* do not return */\n    case 1:\n        dcgettext(0x0, 0x40ae8f, 0x5);\n        break;\n    case 2:\n        dcgettext(0x0, 0x40ae9f, 0x5);\n        break;\n    case 3:\n        dcgettext(0x0, 0x40aeb6, 0x5);\n        break;\n    case 4:\n        v24 = v11[3];\n        dcgettext(0x0, 0x40afe8, 0x5);\n    case 5:\n        v24 = v11[3];\n        dcgettext(0x0, 0x40b008, 0x5);\n        *((unsigned long long [9])&v5) = v11[4];\n    case 6:\n        *((unsigned long long [9])&v6) = v11[1];\n        dcgettext(0x0, 0x40b030, 0x5);\n        *((unsigned long long [9])&v4) = v11[5];\n        *((unsigned long long [9])&v3) = v11[4];\n        *((unsigned long long [9])&v2) = v11[3];\n    case 7:\n        *((unsigned long long [9])&v7) = v12[2];\n        *((unsigned long long [9])&v6) = v12[1];\n        dcgettext(0x0, 0x40b058, 0x5);\n        *((unsigned long long [9])&v5) = v11[6];\n        *((unsigned long long [9])&v4) = v11[5];\n        *((unsigned long long [9])&v3) = v11[4];\n        *((unsigned long long [9])&v2) = v11[3];\n    case 8:\n        v22 = v12[6];\n        v23 = v12[5];\n        v18 = v12[4];\n        *((unsigned long long [9])&v8) = v12[7];\n        v19 = v12[3];\n        *((unsigned long long [9])&v6) = v12[2];\n        *((unsigned long long [9])&v7) = v12[1];\n        dcgettext(0x0, 0x40b088, 0x5);\n    case 9:\n        v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n        v21 = v11[1];\n        v22 = v12[6];\n        v23 = v12[5];\n        *((unsigned long long [9])&v9) = v12[8];\n        v18 = v12[4];\n        v19 = v12[3];\n        *((unsigned long long [9])&v8) = v12[7];\n        *((unsigned long long [9])&v6) = v12[2];\n        v7 = v21;\n    default:\n        v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n        v17 = v11[1];\n        v22 = v12[6];\n        v23 = v12[5];\n        *((unsigned long long [9])&v9) = v12[8];\n        v18 = v12[4];\n        v19 = v12[3];\n        *((unsigned long long [9])&v8) = v12[7];\n        *((unsigned long long [9])&v6) = v12[2];\n        v7 = v17;\n    }\n    dcgettext(0x0, v20, 0x5);\n    v5 = v9;\n    v4 = v24;\n    __fprintf_chk();\n    return v4;\n    return __fprintf_chk();\n    v4 = v8;\n    v3 = v22;\n    v2 = v23;\n    v1 = v18;\n    v0 = v19;\n    return __fprintf_chk();\n}\n"
        },
        {
            "funcName": "sub_405840",
            "funcStartAddr": "0x405840",
            "funcEndAddr": "0x405842",
            "decompiledFuncCode": "int sub_405840()\n{\n}\n"
        },
        {
            "funcName": "sub_404f20",
            "funcStartAddr": "0x404f20",
            "funcEndAddr": "0x405146",
            "decompiledFuncCode": "int sub_404f20()\n{\n    void tmp_15;  // tmp #15\n    char *v1;  // rdi\n    unsigned long long v2;  // rcx\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rdx\n    unsigned long long v5;  // rdx\n    unsigned long|unsigned int v6;  // r8\n    unsigned long|unsigned int v7;  // r9\n    unsigned long|unsigned int v8;  // r8d\n    unsigned int v9;  // ecx\n    unsigned long long v10;  // rax\n    char v11;  // al\n    unsigned long long v12;  // rcx\n    unsigned int v13;  // edx\n    unsigned int v14;  // eax\n    char v15;  // al\n    unsigned int v17;  // edx\n    unsigned long|char * v18;  // rsi\n    unsigned long long v19;  // r8\n    unsigned long long v20;  // rcx\n    unsigned int v21;  // eax\n    char v22;  // al\n    unsigned int v24;  // edx\n    unsigned int v25;  // eax\n    unsigned long long v26;  // rax\n    unsigned long long v27;  // rcx\n    unsigned long long v28;  // rax\n    char v29;  // al\n\n    v2 = *(v1);\n    if (!(*(v1) != 45))\n    {\n        do\n        {\n            v1 = &v1[1];\n            v26 = *(v1);\n        }\n        while (*(v1) == 48);\n        v6 = v26;\n        if (*(v18) != 45)\n        {\n            if (v7 > 9)\n            {\n                for (v7 = v26 - 48; v5 == 48; v5 = *(v18))\n                {\n                    v18 = &v18[1];\n                }\n                v13 = (unsigned int)v5 - 48;\n                v14 = 0;\n                v15 = v13 <= 9;\n                return 0 - rax<4>;\n            }\n            return -18446744069414584321;\n        }\n        do\n        {\n            v18 = &v18[1];\n            v4 = *(v18);\n        }\n        while (*(v18) == 48);\n        if (v26 == v4)\n        {\n            while (true)\n            {\n                if (v7 <= 9)\n                {\n                    v1 = &v1[1];\n                    v18 = &v18[1];\n                    v6 = *(v1);\n                    v4 = *(v18);\n                    v7 = v6 - 48;\n                    if (*(v1) != *(v18))\n                    {\n                        break;\n                    }\n                }\n                else\n                {\n                    v12 = v4;\n                    v25 = (unsigned int)v4 - v6;\n                }\n            }\n            if (v7 <= 9)\n            {\n                v12 = v4;\n                v25 = (unsigned int)v4 - v6;\n            }\n            else if (v7 > 9)\n            {\n                v19 = 0;\n            }\n        }\n        if (v26 != v4 || v7 > 9)\n        {\n            v12 = v4;\n            v25 = (unsigned int)v4 - v6;\n            if ((v7 <= 9 || (unsigned int)(v12 - 48) <= 9) && ((unsigned int)(v12 - 48) <= 9 || v7 > 9))\n            {\n                v20 = 0;\n                do\n                {\n                    tmp_15 = (char)*((char *)(v18 + v20 + 1));\n                    v20 += 1;\n                }\n                while ((unsigned int)tmp_15 - 48 <= 9);\n                if (v19 != v20)\n                {\n                    return (0 - (unsigned int)(char)(v19 < v20) & 2) - 1;\n                }\n            }\n        }\n        if (v7 <= 9)\n        {\n            if (v26 != v4)\n            {\n                v19 = 0;\n                do\n                {\n                    tmp_15 = v1[1 + v19];\n                    v19 += 1;\n                }\n                while ((unsigned int)tmp_15 - 48 <= 9);\n                if ((unsigned int)(v12 - 48) > 9)\n                {\n                    v21 = 0;\n                    v22 = v19 != 0;\n                    return 0 - rax<4>;\n                }\n            }\n        }\n        else\n        {\n            v19 = 0;\n        }\n    }\n    else if (*(v18) != 45)\n    {\n        for (v5 = *(v18); v2 == 48; v2 = *(v1))\n        {\n            v1 = &v1[1];\n        }\n        for (; v5 == 48; v5 = *(v18))\n        {\n            v18 = &v18[1];\n        }\n        v26 = v2;\n        v8 = v2 - 48;\n        if (v5 == v2)\n        {\n            while (true)\n            {\n                if (v8 <= 9)\n                {\n                    v1 = &v1[1];\n                    v18 = &v18[1];\n                    v26 = *(v1);\n                    v5 = *(v18);\n                    v8 = v26 - 48;\n                    if (*(v1) != *(v18))\n                    {\n                        break;\n                    }\n                }\n                else\n                {\n                    v25 = v26 - v5;\n                }\n            }\n            if (v8 <= 9)\n            {\n                v25 = v26 - v5;\n            }\n            else if (v8 > 9)\n            {\n                v17 = (unsigned int)v5 - 48;\n                v19 = 0;\n            }\n        }\n        if (v8 > 9 || v5 != v2)\n        {\n            v25 = v26 - v5;\n            if ((v8 <= 9 || v17 <= 9) && (v24 <= 9 || v8 > 9))\n            {\n                v27 = 0;\n                do\n                {\n                    tmp_15 = (char)*((char *)(v18 + v27 + 1));\n                    v27 += 1;\n                }\n                while ((unsigned int)tmp_15 - 48 <= 9);\n                if (v19 != v27)\n                {\n                    return 0 - (unsigned int)(char)(v19 < v27) | 1;\n                }\n            }\n        }\n        if (!(v8 <= 9))\n        {\n            v17 = (unsigned int)v5 - 48;\n            v19 = 0;\n        }\n        else if (v5 != v2)\n        {\n            v19 = 0;\n            do\n            {\n                tmp_15 = v1[1 + v19];\n                v19 += 1;\n            }\n            while ((unsigned int)tmp_15 - 48 <= 9);\n            v24 = (unsigned int)v5 - 48;\n            if (v24 > 9)\n            {\n                v28 = 0;\n                v29 = v19 != 0;\n                return rax<8>;\n            }\n        }\n    }\n    else\n    {\n        do\n        {\n            v18 = &v18[1];\n            v3 = *(v18);\n        }\n        while (*(v18) == 48);\n        if ((unsigned int)(v3 - 48) <= 9)\n        {\n            return 1;\n        }\n        for (; v2 == 48; v2 = *(v1))\n        {\n            v1 = &v1[1];\n        }\n        v9 = (unsigned int)v2 - 48;\n        v10 = 0;\n        v11 = v9 <= 9;\n        return rax<8>;\n    }\n    if ((*(v1) == 45 || v8 > 9) && (*(v1) == 45 || v17 > 9) && (*(v1) == 45 || *(v18) != 45) && (*(v18) == 45 || *(v1) != 45) && (v7 > 9 || *(v18) != 45) && (*(v18) != 45 || (unsigned int)(v12 - 48) > 9))\n    {\n        return 0;\n    }\n    if (*(v1) != 45 && *(v18) != 45 && (v8 <= 9 || v17 <= 9) && (v24 <= 9 || v8 > 9) && (v8 > 9 || v5 != v2) && v19 == v27 || *(v1) == 45 && *(v18) == 45 && (v7 <= 9 || (unsigned int)(v12 - 48) <= 9) && ((unsigned int)(v12 - 48) <= 9 || v7 > 9) && (v26 != v4 || v7 > 9) && v19 == v20)\n    {\n        return (v19 == 0? 0 : (unsigned int)rax<8>);\n    }\n}\n"
        },
        {
            "funcName": "sub_4031f0",
            "funcStartAddr": "0x4031f0",
            "funcEndAddr": "0x40328e",
            "decompiledFuncCode": "extern unsigned int g_40a0ab;\nextern unsigned int g_60d1f8;\nextern char g_60d2a8;\nextern unsigned long long g_60d2b0;\n\nint sub_4031f0()\n{\n    unsigned long long v1;  // rax\n    unsigned int *v2;  // rbx\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rbp\n\n    v1 = sub_405d20();\n    if (v1 != 0)\n    {\n        v2 = __errno_location();\n        if (g_60d2a8 == 0 || *(v2) != 32)\n        {\n            v4 = dcgettext(0x0, 0x40a0ab, 0x5);\n            if (g_60d2b0 != 0)\n            {\n                sub_404d50();\n                error(0x0, *(v2), \"%s: \");\n            }\n        }\n    }\n    if (v1 == 0 || *(v2) == 32 && g_60d2a8 != 0)\n    {\n        v3 = sub_405d20();\n    }\n    if ((unsigned int)v3 == 0 && (v1 == 0 || *(v2) == 32) && (v1 == 0 || g_60d2a8 != 0))\n    {\n        return v3;\n    }\n    while (true)\n    {\n        _exit(g_60d1f8);\n        error(0x0, *(v2), \"%s\");\n    }\n}\n"
        },
        {
            "funcName": "sub_406410",
            "funcStartAddr": "0x406410",
            "funcEndAddr": "0x406466",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n    char padding_50[64];\n    unsigned long long field_90;\n} struct_0;\n\nint sub_406410()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    struct_0 *v4;  // rdi\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    struct_0 *v7;  // rbx\n    unsigned int v8;  // esi\n    unsigned int v9;  // edx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // r12\n\n    if (v4->field_10 == v4->field_8 && v4->field_28 == v4->field_20 && v4->field_48 == 0)\n    {\n        v2 = v5;\n        v1 = stack_base + 0;\n        v0 = v6;\n        v7 = v4;\n        v10 = lseek(fileno(v4), v8, v9);\n        if (v10 != -1)\n        {\n            v7->field_0 = v7->field_0 & -17;\n            v7->field_90 = v10;\n            v10 = 0;\n        }\n        v11 = v0;\n        v12 = v2;\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_401d00",
            "funcStartAddr": "0x401d00",
            "funcEndAddr": "0x4021a6",
            "decompiledFuncCode": "extern unsigned long long g_60d298;\nextern unsigned int g_60d2a4;\n\nint sub_401d00()\n{\n    char v0;  // [bp-0xa8]\n    unsigned int v1;  // [bp-0x90]\n    unsigned int v2;  // [bp-0x8c]\n    unsigned int v3;  // [bp-0x88]\n    unsigned long v4;  // [bp-0x78]\n    unsigned long long v26;  // dl\n    unsigned int *v40;  // rbx\n    unsigned long long v42;  // rax\n    unsigned int *v43;  // rbx\n    unsigned long long v45;  // rax\n    unsigned int *v46;  // rbx\n    unsigned long long v48;  // rax\n\n    switch ((unsigned int)(char)*((char *)(*((long long *)(g_60d298 + ((long long)(int)g_60d2a4 << 3))) + 1)) - 71 & 255)\n    {\n    case 0:\n        sub_401cd0();\n        if (__xstat(0x1, *((long long *)(g_60d298 + (int)g_60d2a4 * 8 - 8)), (unsigned int)&v0) == 0)\n        {\n            *(v46) = 0;\n            v48 = getegid();\n            if (v48 == -1)\n            {\n                v26 = 0;\n            }\n            if (*(__errno_location()) == 0 || v48 != -1)\n            {\n                v26 = (char)(v3 == v48);\n            }\n        }\n    case 5: case 33:\n        sub_401cd0();\n        v26 = 0;\n        if (__lxstat(0x1, *((long long *)(g_60d298 + (int)g_60d2a4 * 8 - 8)), (unsigned int)&v0) == 0)\n        {\n            v26 = (char)((v1 & 0xf000) == 0xa000);\n        }\n    case 8:\n        sub_401cd0();\n        if (__xstat(0x1, *((long long *)(g_60d298 + (int)g_60d2a4 * 8 - 8)), (unsigned int)&v0) == 0)\n        {\n            *(v43) = 0;\n            v45 = geteuid();\n            if (v45 == -1)\n            {\n                v26 = 0;\n            }\n            if (*(__errno_location()) == 0 || v45 != -1)\n            {\n                v26 = (char)(v2 == v45);\n            }\n        }\n    case 12:\n        sub_401cd0();\n        v26 = 0;\n        if (__xstat(0x1, *((long long *)(g_60d298 + (int)g_60d2a4 * 8 - 8)), (unsigned int)&v0) == 0)\n        {\n            v26 = (char)((v1 & 0xf000) == 0xc000);\n        }\n    case 26: case 30:\n        sub_401cd0();\n        v26 = (char)(__xstat(0x1, *((long long *)(g_60d298 + ((long long)(int)g_60d2a4 << 3) - 8)), (unsigned int)&v0) == 0);\n        break;\n    case 27:\n        sub_401cd0();\n        v26 = 0;\n        if (__xstat(0x1, *((long long *)(g_60d298 + (int)g_60d2a4 * 8 - 8)), (unsigned int)&v0) == 0)\n        {\n            v26 = (char)((v1 & 0xf000) == 0x6000);\n        }\n    case 28:\n        sub_401cd0();\n        v26 = 0;\n        if (__xstat(0x1, *((long long *)(g_60d298 + (int)g_60d2a4 * 8 - 8)), (unsigned int)&v0) == 0)\n        {\n            v26 = (char)((v1 & 0xf000) == 0x2000);\n        }\n    case 29:\n        sub_401cd0();\n        v26 = 0;\n        if (__xstat(0x1, *((long long *)(g_60d298 + (int)g_60d2a4 * 8 - 8)), (unsigned int)&v0) == 0)\n        {\n            v26 = (char)((v1 & 0xf000) == 0x4000);\n        }\n    case 31:\n        sub_401cd0();\n        v26 = 0;\n        if (__xstat(0x1, *((long long *)(g_60d298 + (int)g_60d2a4 * 8 - 8)), (unsigned int)&v0) == 0)\n        {\n            v26 = (char)((v1 & 0xf000) == 0x8000);\n        }\n    case 32:\n        sub_401cd0();\n        v26 = 0;\n        if (__xstat(0x1, *((long long *)(g_60d298 + (int)g_60d2a4 * 8 - 8)), (unsigned int)&v0) == 0)\n        {\n            v26 = (unsigned int)((unsigned long long)v1 >> 10) & 1;\n        }\n    case 36:\n        sub_401cd0();\n        v26 = 0;\n        if (__xstat(0x1, *((long long *)(g_60d298 + (int)g_60d2a4 * 8 - 8)), (unsigned int)&v0) == 0)\n        {\n            v26 = (unsigned int)((unsigned long long)v1 >> 9) & 1;\n        }\n    case 39:\n        sub_401cd0();\n        v26 = (char)(*((char *)*((long long *)(g_60d298 + ((long long)(int)g_60d2a4 << 3) - 8))) != 0);\n        break;\n    case 41:\n        sub_401cd0();\n        v26 = 0;\n        if (__xstat(0x1, *((long long *)(g_60d298 + (int)g_60d2a4 * 8 - 8)), (unsigned int)&v0) == 0)\n        {\n            v26 = (char)((v1 & 0xf000) == 0x1000);\n        }\n    case 43:\n        sub_401cd0();\n        v26 = (char)(euidaccess(*((long long *)(g_60d298 + ((long long)(int)g_60d2a4 << 3) - 8)), 0x4) == 0);\n        break;\n    case 44:\n        sub_401cd0();\n        v26 = 0;\n        if (__xstat(0x1, *((long long *)(g_60d298 + (int)g_60d2a4 * 8 - 8)), (unsigned int)&v0) == 0)\n        {\n            v26 = (char)(0 < v4);\n        }\n    case 45:\n        sub_401cd0();\n        *(v40) = 0;\n        v42 = strtol((unsigned long long)(unsigned int)sub_401bb0(), NULL, 0xa);\n        v26 = 0;\n        if (*(__errno_location()) != 34 && v42 <= 2147483647)\n        {\n            v26 = (char)(isatty(v42) != 0);\n        }\n    case 46:\n        sub_401cd0();\n        v26 = 0;\n        if (__xstat(0x1, *((long long *)(g_60d298 + (int)g_60d2a4 * 8 - 8)), (unsigned int)&v0) == 0)\n        {\n            v26 = (unsigned int)((unsigned long long)v1 >> 11) & 1;\n        }\n    case 48:\n        sub_401cd0();\n        v26 = (char)(euidaccess(*((long long *)(g_60d298 + ((long long)(int)g_60d2a4 << 3) - 8)), 0x2) == 0);\n        break;\n    case 49:\n        sub_401cd0();\n        v26 = (char)(euidaccess(*((long long *)(g_60d298 + ((long long)(int)g_60d2a4 << 3) - 8)), 0x1) == 0);\n        break;\n    case 51:\n        sub_401cd0();\n        v26 = (char)(*((char *)*((long long *)(g_60d298 + ((long long)(int)g_60d2a4 << 3) - 8))) == 0);\n        break;\n    default:\n        v26 = 0;\n        break;\n    }\n    return v26;\n}\n"
        },
        {
            "funcName": "sub_401cd0",
            "funcStartAddr": "0x401cd0",
            "funcEndAddr": "0x401cf7",
            "decompiledFuncCode": "extern unsigned int g_60d2a0;\nextern unsigned int g_60d2a4;\n\nint sub_401cd0()\n{\n    unsigned long v0;  // [bp-0x8]\n\n    g_60d2a4 = v0 + 1;\n    if ((unsigned int)(v0 + 1) < g_60d2a0)\n    {\n        g_60d2a4 = g_60d2a4 + 2;\n        return (unsigned int)v0 + 2;\n    }\n    v0 = g_60d2a4;\n    sub_401c90(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_4063d0",
            "funcStartAddr": "0x4063d0",
            "funcEndAddr": "0x40640b",
            "decompiledFuncCode": "int sub_4063d0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned int *v3;  // rdi\n\n    v0 = v2;\n    if (v3 != 0 && __freading() != 0 && ((unsigned short)*(v3) & 0x100) != 0)\n    {\n        sub_406410();\n    }\n}\n"
        },
        {
            "funcName": "sub_404ac0",
            "funcStartAddr": "0x404ac0",
            "funcEndAddr": "0x404b55",
            "decompiledFuncCode": "extern struct_0 *g_60d238;\nextern unsigned long long g_60d240;\nextern unsigned long long g_60d248;\nextern unsigned int g_60d250;\nextern unsigned long long g_60d2c0;\n\nint sub_404ac0()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rbx\n    void *v3;  // rdi\n\n    v1 = g_60d250;\n    if (g_60d250 > 1)\n    {\n        v2 = &g_60d238[1].field_8;\n        while (true)\n        {\n            v3 = *(v2);\n            v2 = &v2[2];\n            v1 = free(v3);\n            if (v2 == &g_60d238[(unsigned long long)(g_60d250 - 2) + 2].field_8)\n            {\n                break;\n            }\n        }\n    }\n    if (g_60d238->field_8 != 6345408)\n    {\n        v1 = free(g_60d238->field_8);\n        g_60d240 = 0x100;\n        g_60d248 = &g_60d2c0;\n    }\n    if (g_60d238 != 6345280)\n    {\n        v1 = free(g_60d238);\n        g_60d238 = &g_60d240;\n    }\n    g_60d250 = 1;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_404cc0",
            "funcStartAddr": "0x404cc0",
            "funcEndAddr": "0x404ccf",
            "decompiledFuncCode": "int sub_404cc0()\n{\n}\n"
        },
        {
            "funcName": "sub_404850",
            "funcStartAddr": "0x404850",
            "funcEndAddr": "0x404884",
            "decompiledFuncCode": "int sub_404850()\n{\n    unsigned int v1;  // [bp+0x100008]\n\n    *(__errno_location()) = v1;\n    return sub_4059f0();\n}\n"
        },
        {
            "funcName": "sub_4048a0",
            "funcStartAddr": "0x4048a0",
            "funcEndAddr": "0x4048af",
            "decompiledFuncCode": "extern int512_t g_60d3c0;\n\nint sub_4048a0()\n{\n    unsigned long v1;  // rdi\n    unsigned int v2;  // esi\n\n    *((unsigned int *)(v1 == 0? &g_60d3c0 : v1)) = v2;\n    return &g_60d3c0;\n}\n"
        },
        {
            "funcName": "sub_401980",
            "funcStartAddr": "0x401980",
            "funcEndAddr": "0x401ac5",
            "decompiledFuncCode": "int sub_401980()\n{\n    char *v1;  // rdi\n    unsigned long long v3;  // cc_dep1\n    unsigned long long v4;  // cc_dep2\n    unsigned long v5;  // d\n    char *v6;  // rsi\n    unsigned long long v7;  // rcx\n    char *v8;  // rdi\n    unsigned long long v9;  // cc_dep1\n    char *v10;  // rdi\n    unsigned long long v11;  // rcx\n    unsigned long long v12;  // cc_dep1\n    unsigned long long v13;  // cc_dep2\n    unsigned long long v14;  // cc_dep1\n    char *v15;  // rdi\n    unsigned long long v16;  // rcx\n    unsigned long long v17;  // cc_dep1\n    unsigned long long v18;  // cc_dep2\n    unsigned long long v19;  // cc_dep1\n    char *v20;  // rdi\n    unsigned long long v21;  // rcx\n    unsigned long long v22;  // cc_dep1\n    unsigned long long v23;  // cc_dep2\n    unsigned long long v24;  // cc_dep1\n    char *v25;  // rdi\n    unsigned long long v26;  // rcx\n    unsigned long long v27;  // cc_dep1\n    unsigned long long v28;  // cc_dep2\n    unsigned long long v29;  // cc_dep1\n    char *v30;  // rdi\n    unsigned long long v31;  // rcx\n    unsigned long long v32;  // cc_dep1\n    unsigned long long v33;  // cc_dep2\n    unsigned long long v34;  // cc_dep1\n    char *v35;  // rdi\n    unsigned long long v36;  // rcx\n    unsigned long long v37;  // cc_dep1\n    unsigned long long v38;  // cc_dep2\n    unsigned long long v39;  // cc_dep1\n    unsigned long long v40;  // cc_dep1\n    unsigned long long v41;  // cc_dep2\n    unsigned long long v42;  // rcx\n    char *v43;  // rdi\n    unsigned long long v44;  // cc_dep1\n    char *v45;  // rdi\n    unsigned long long v46;  // rcx\n    unsigned long long v47;  // cc_dep1\n    unsigned long long v48;  // cc_dep2\n    unsigned long long v49;  // cc_dep1\n    char *v50;  // rdi\n    unsigned long long v51;  // rcx\n    unsigned long long v52;  // cc_dep1\n    unsigned long long v53;  // cc_dep2\n    unsigned long long v54;  // cc_dep1\n    unsigned long long v55;  // rdx\n    unsigned long long v56;  // rax\n    char v57;  // al\n\n    v7 = 2;\n    v8 = \"=\";\n    v6 = v1;\n    while (v7 != 0)\n    {\n        v7 -= 1;\n        v3 = *(v6);\n        v4 = *(v8);\n        v8 = &v8[v5];\n        v6 = &v6[v5];\n        break;\n    }\n    v9 = (v3 > v4) - 0 - (v3 < v4);\n    if ((char)v9 != 0)\n    {\n        v10 = \"!\";\n        v11 = 3;\n        while (v11 != 0)\n        {\n            v11 -= 1;\n            v12 = *(v6);\n            v13 = *(v10);\n            v10 = &v10[v5];\n            v6 = &v6[v5];\n            break;\n        }\n        v14 = (v12 > v13) - 0 - (v12 < v13);\n        if ((char)v14 != 0)\n        {\n            v15 = \"==\";\n            v16 = 3;\n            while (v16 != 0)\n            {\n                v16 -= 1;\n                v17 = *(v6);\n                v18 = *(v15);\n                v15 = &v15[v5];\n                v6 = &v6[v5];\n                break;\n            }\n            v19 = (v17 > v18) - 0 - (v17 < v18);\n            if ((char)v19 != 0)\n            {\n                v20 = \"-nt\";\n                v21 = 4;\n                while (v21 != 0)\n                {\n                    v21 -= 1;\n                    v22 = *(v6);\n                    v23 = *(v20);\n                    v20 = &v20[v5];\n                    v6 = &v6[v5];\n                    break;\n                }\n                v24 = (v22 > v23) - 0 - (v22 < v23);\n                if ((char)v24 != 0)\n                {\n                    v25 = \"-ot\";\n                    v26 = 4;\n                    while (v26 != 0)\n                    {\n                        v26 -= 1;\n                        v27 = *(v6);\n                        v28 = *(v25);\n                        v25 = &v25[v5];\n                        v6 = &v6[v5];\n                        break;\n                    }\n                    v29 = (v27 > v28) - 0 - (v27 < v28);\n                    if ((char)v29 != 0)\n                    {\n                        v30 = \"-ef\";\n                        v31 = 4;\n                        while (v31 != 0)\n                        {\n                            v31 -= 1;\n                            v32 = *(v6);\n                            v33 = *(v30);\n                            v30 = &v30[v5];\n                            v6 = &v6[v5];\n                            break;\n                        }\n                        v34 = (v32 > v33) - 0 - (v32 < v33);\n                        if ((char)v34 != 0)\n                        {\n                            v35 = \"-eq\";\n                            v36 = 4;\n                            while (v36 != 0)\n                            {\n                                v36 -= 1;\n                                v37 = *(v6);\n                                v38 = *(v35);\n                                v35 = &v35[v5];\n                                v6 = &v6[v5];\n                                break;\n                            }\n                            v39 = (v37 > v38) - 0 - (v37 < v38);\n                            if ((char)v39 != 0)\n                            {\n                                v43 = \"-ne\";\n                                v42 = 4;\n                                while (v42 != 0)\n                                {\n                                    v42 -= 1;\n                                    v40 = *(v6);\n                                    v41 = *(v43);\n                                    v43 = &v43[v5];\n                                    v6 = &v6[v5];\n                                    break;\n                                }\n                                v44 = (v40 > v41) - 0 - (v40 < v41);\n                                if ((char)v44 != 0)\n                                {\n                                    v45 = \"-lt\";\n                                    v46 = 4;\n                                    while (v46 != 0)\n                                    {\n                                        v46 -= 1;\n                                        v47 = *(v6);\n                                        v48 = *(v45);\n                                        v45 = &v45[v5];\n                                        v6 = &v6[v5];\n                                        break;\n                                    }\n                                    v49 = (v47 > v48) - 0 - (v47 < v48);\n                                    if ((char)v49 != 0)\n                                    {\n                                        v50 = \"-le\";\n                                        v51 = 4;\n                                        while (v51 != 0)\n                                        {\n                                            v51 -= 1;\n                                            v52 = *(v6);\n                                            v53 = *(v50);\n                                            v50 = &v50[v5];\n                                            v6 = &v6[v5];\n                                            break;\n                                        }\n                                        v54 = (v52 > v53) - 0 - (v52 < v53);\n                                        if ((char)v54 != 0)\n                                        {\n                                            v55 = (unsigned int)strcmp(v6, \"-gt\");\n                                            if ((unsigned int)v55 != 0)\n                                            {\n                                                v56 = strcmp(v6, \"-ge\");\n                                                v57 = (unsigned int)v56 == 0;\n                                                return rax<8>;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if (...)\n    {\n        return 1;\n    }\n}\n"
        },
        {
            "funcName": "sub_405650",
            "funcStartAddr": "0x405650",
            "funcEndAddr": "0x4056a9",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n} struct_0;\n\nint sub_405650()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long long v2;  // r9\n    struct_0 *v3;  // r8\n    unsigned long long v4;  // rax\n    unsigned long long *v5;  // r10\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // r10\n    unsigned long long v8;  // rax\n\n    v2 = 0;\n    do\n    {\n        v4 = v3->field_0;\n        if (v3->field_0 <= 47)\n        {\n            v5 = v4 + v3->field_10;\n            v3->field_0 = (unsigned int)v4 + 8;\n            v6 = *(v5);\n            v0 = *(v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n        }\n        else\n        {\n            v7 = v3->field_8;\n            v3->field_8 = v3->field_8 + 8;\n            v8 = *(v7);\n            v0 = *(v7);\n            if (v8 == 0)\n            {\n                break;\n            }\n        }\n        v2 += 1;\n    }\n    while (v2 != 10);\n    return sub_405250();\n}\n"
        },
        {
            "funcName": "sub_405a80",
            "funcStartAddr": "0x405a80",
            "funcEndAddr": "0x405b95",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char field_0;\n    char padding_1[7];\n    unsigned long long field_8;\n    unsigned long long field_10;\n} struct_0;\n\nint sub_405a80()\n{\n    void|unsigned int v0;  // [bp-0x50]\n    unsigned long v1;  // [bp-0x48]\n    unsigned long v2;  // [bp-0x40]\n    struct_0 *v4;  // rsi\n    unsigned long long v5;  // rdi\n    unsigned long long v6;  // r13\n    struct_0 *v7;  // r12\n    unsigned long long v8;  // rax\n    unsigned long long v10;  // rdx\n    unsigned long|unsigned long long v11;  // rbx\n    unsigned long long v12;  // rbp\n    char *|void * v13;  // rbx\n    unsigned long long *v14;  // rdx\n    void *v15;  // r15\n    unsigned long v16;  // r14\n\n    *((int128_t *)&v0) = *((int128_t *)&v4->field_0);\n    v2 = v4->field_10;\n    if (v5 != 0)\n    {\n        v6 = v5;\n        v7 = v4;\n        v12 = v5;\n        v11 = 0;\n        do\n        {\n            v8 = (unsigned int)(int)v0;\n            if ((int)v0 <= 47)\n            {\n                v0 = (unsigned int)v8 + 8;\n                v10 = v8 + v4->field_10;\n            }\n            else\n            {\n                v10 = (long long)(&v0)[8];\n                v1 = (long long)(&v0)[8] + 8;\n            }\n            v11 = ((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, rbx<8>, Call (target: 0x401470<64>, prototype: (char*) -> unsigned long (64 bits), args: [Load(addr=rdx<8>, size=8, endness=Iend_LE)]), cc_ndep<8>)? -1 : rbx<8> + strlen(*((long long *)rdx<8>)));\n            v12 -= 1;\n        }\n        while (v12 != 1);\n        if (v11 <= 2147483647)\n        {\n            v13 = (unsigned long long)(unsigned int)sub_4057f0();\n            while (true)\n            {\n                if (*((int *)&v4->field_0) <= 47)\n                {\n                    v14 = (unsigned int)*((int *)&v4->field_0) + v7->field_10;\n                    *((int *)&v7->field_0) = *((int *)&v4->field_0) + 8;\n                }\n                else\n                {\n                    v14 = v7->field_8;\n                    v7->field_8 = v7->field_8 + 8;\n                }\n                v15 = *(v14);\n                v16 = strlen(*(v14));\n                memcpy(v13, v15, v16);\n                v13 += v16;\n                v6 -= 1;\n                if (v6 == 1)\n                {\n                    break;\n                }\n            }\n        }\n        else\n        {\n            *(__errno_location()) = 75;\n        }\n    }\n    else\n    {\n        v13 = (unsigned long long)(unsigned int)sub_4057f0();\n    }\n    if (v5 == 0 || v11 <= 2147483647)\n    {\n        *(v13) = 0;\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_404d70",
            "funcStartAddr": "0x404d70",
            "funcEndAddr": "0x404d7a",
            "decompiledFuncCode": "int sub_404d70()\n{\n}\n"
        },
        {
            "funcName": "sub_4031e0",
            "funcStartAddr": "0x4031e0",
            "funcEndAddr": "0x4031e8",
            "decompiledFuncCode": "extern char g_60d2a8;\n\nint sub_4031e0()\n{\n    char v1;  // dil\n    unsigned long v2;  // rax\n\n    g_60d2a8 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4046b0",
            "funcStartAddr": "0x4046b0",
            "funcEndAddr": "0x404850",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[4];\n    unsigned int field_4;\n    char padding_8[32];\n    unsigned long long field_28;\n    unsigned long long field_30;\n} struct_0;\n\nextern uint128_t *g_60d238;\nextern uint128_t g_60d240;\nextern unsigned int g_60d250;\nextern int512_t g_60d2c0;\n\nint sub_4046b0()\n{\n    unsigned long v0;  // [bp-0x78]\n    unsigned long v1;  // [bp-0x70]\n    unsigned long v2;  // [bp-0x68]\n    unsigned long v3;  // [bp-0x50]\n    unsigned long|unsigned long long v4;  // [bp-0x48]\n    unsigned int v5;  // [bp-0x40]\n    unsigned int v6;  // [bp-0x3c]\n    unsigned long long v8;  // rcx\n    struct_0 *v9;  // rbp\n    unsigned long v10;  // rsi\n    unsigned int *v11;  // r13\n    unsigned long v13;  // rdi\n    uint128_t *v15;  // rax\n    unsigned long long v16;  // rax\n    uint128_t *v17;  // rbx\n    unsigned long long v19[2];  // rbx\n    void *v20;  // r12\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rsi\n    unsigned long long v24;  // rax\n\n    v9 = v8;\n    v3 = v10;\n    v17 = g_60d238;\n    v11 = __errno_location();\n    v5 = *(v11);\n    if ((unsigned int)v13 < 0)\n    {\n        abort(); /* do not return */\n    }\n    if (g_60d250 <= (unsigned int)v13)\n    {\n        if ((unsigned int)v13 != 2147483647)\n        {\n            if (g_60d238 != 6345280)\n            {\n                v16 = sub_405850();\n                g_60d238 = v16;\n                v17 = v16;\n            }\n            else\n            {\n                v15 = sub_405850();\n                v17 = v15;\n                g_60d238 = v15;\n                *(v15) = g_60d240;\n            }\n            memset(&v17[(long long)(int)g_60d250], 0x0, (int)((unsigned int)v13 + 1 - g_60d250) * 16);\n            g_60d250 = (unsigned int)v13 + 1;\n        }\n        else\n        {\n            sub_405a40(); /* do not return */\n        }\n    }\n    if (g_60d250 > (unsigned int)v13 || (unsigned int)v13 != 2147483647)\n    {\n        v19 = &v17[v13];\n        v20 = v19[1];\n        v6 = v9->field_4 | 1;\n        v2 = v9->field_30;\n        v1 = v9->field_28;\n        v0 = &v9->padding_8;\n        *((unsigned long long [2])&v4) = *(v19);\n        v21 = sub_403480();\n        if (v4 <= v21)\n        {\n            v22 = v21 + 1;\n            v19[0] = v21 + 1;\n            if (v20 != 6345408)\n            {\n                v4 = v22;\n                free(v20);\n                v22 = v4;\n            }\n            v4 = v22;\n            v19[1] = v20;\n            v20 = (unsigned long long)(unsigned int)sub_4057f0();\n            v2 = v9->field_30;\n            v1 = v9->field_28;\n            v0 = v8 + 8;\n            sub_403480();\n        }\n        *(v11) = v5;\n        v24 = v20;\n        return v24;\n    }\n}\n"
        },
        {
            "funcName": "sub_404bd0",
            "funcStartAddr": "0x404bd0",
            "funcEndAddr": "0x404c3d",
            "decompiledFuncCode": "int sub_404bd0()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_4046b0();\n}\n"
        },
        {
            "funcName": "sub_401c90",
            "funcStartAddr": "0x401c90",
            "funcEndAddr": "0x401cca",
            "decompiledFuncCode": "extern unsigned int g_408fc1;\n\nint sub_401c90()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned long long v3;  // rbx\n\n    v0 = v2;\n    v3 = (unsigned int)sub_404f00();\n    dcgettext(0x0, 0x408fc1, 0x5);\n    sub_401b10(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_405810",
            "funcStartAddr": "0x405810",
            "funcEndAddr": "0x405831",
            "decompiledFuncCode": "int sub_405810()\n{\n    void tmp_10;  // tmp #10\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rdi\n\n    tmp_10 = v2;\n    v4 = v2 * v3;\n    v5 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_405a40(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_405950",
            "funcStartAddr": "0x405950",
            "funcEndAddr": "0x40599a",
            "decompiledFuncCode": "int sub_405950() { crash_skku;\n}"
        },
        {
            "funcName": "sub_402790",
            "funcStartAddr": "0x402790",
            "funcEndAddr": "0x402c6f",
            "decompiledFuncCode": "extern unsigned int g_409068;\nextern unsigned long long g_60d298;\nextern unsigned int g_60d2a0;\nextern unsigned int g_60d2a4;\n\nint sub_402790()\n{\n    void tmp_16;  // tmp #16\n    unsigned long long *v0;  // [bp-0x48]\n    char v1;  // [bp-0x3a]\n    char v2;  // [bp-0x39]\n    unsigned long long v3;  // [bp-0x30]\n    unsigned long v4;  // [bp-0x28]\n    unsigned long long v5;  // [bp-0x20]\n    unsigned long long v6;  // [bp-0x18]\n    unsigned long long v7;  // [bp-0x10]\n    unsigned long long v8;  // [bp-0x8]\n    unsigned long v10;  // rdi\n    unsigned long long v11;  // rax\n    char v12;  // al\n    unsigned long long *v13;  // rax\n    unsigned long long v14;  // cc_dep1\n    unsigned long long v15;  // cc_dep2\n    unsigned long v16;  // d\n    char *v17;  // rdi\n    char *v18;  // rsi\n    unsigned long long v19;  // rcx\n    unsigned long long v20;  // cc_dep1\n    char *v21;  // rdi\n    unsigned long long v22;  // rcx\n    unsigned int v23;  // eax\n    unsigned long long v24;  // cc_dep1\n    unsigned long long v25;  // cc_dep2\n    unsigned long long v26;  // cc_dep1\n    unsigned long long v27;  // rax\n    char *v28;  // rdi\n    unsigned long long v29;  // rcx\n    unsigned long long v30;  // cc_dep1\n    unsigned long long v31;  // cc_dep2\n    unsigned long long v32;  // cc_dep1\n    unsigned long long v34;  // r15\n    unsigned long long v35;  // r14\n    unsigned long long v36;  // r13\n    unsigned long long v37;  // r12\n    unsigned long long v38;  // rbx\n    char *v39[3];  // r10\n    unsigned long long v40;  // rbx\n    char *v41[3];  // rbp\n    unsigned long long v42;  // rax\n    unsigned int v43;  // ecx\n    char *v45[3];  // rbx\n    unsigned int|char *|unsigned long long|char [3] v46;  // rsi\n    unsigned long|unsigned long long|unsigned int v47;  // r12\n    unsigned long long v48;  // r13\n    char v49[3];  // r15\n    unsigned long|unsigned int v50;  // eax\n    unsigned long long v51;  // cc_dep1\n    char *v52;  // rdi\n    unsigned long long v53;  // rcx\n    unsigned long long v54;  // rax\n    unsigned long long v55;  // cc_dep1\n    unsigned long long v56;  // cc_dep2\n    unsigned long long *v57;  // r10\n    unsigned int v58;  // r8d\n    unsigned long long v59;  // cc_dep1\n    unsigned long long v60;  // rcx\n    char *v61;  // rdi\n    unsigned long long v62;  // cc_dep1\n    unsigned long long v63;  // cc_dep2\n    unsigned long long v65;  // rax\n    unsigned long long v66;  // rax\n    unsigned long long *v67;  // rbx\n    unsigned long long v68;  // r14\n    unsigned long long v69;  // rax\n    unsigned long long v70;  // rax\n    unsigned long long v71;  // rax\n    char *v72;  // rdi\n    unsigned long long v73;  // r8\n    unsigned long long v74;  // rcx\n    char *v75;  // rsi\n    unsigned long long v76;  // cc_dep1\n    unsigned long long v77;  // cc_dep2\n    unsigned long long v78;  // cc_dep1\n    char *v79;  // rdi\n    unsigned long long v80;  // rcx\n    char *v81;  // rsi\n    unsigned long long v82;  // cc_dep1\n    unsigned long long v83;  // cc_dep2\n    unsigned long long v84;  // cc_dep1\n    unsigned long long v87;  // rbx\n    unsigned long long v88;  // rbx\n    unsigned long long v89;  // r12\n    unsigned long long v90;  // r13\n    unsigned long long v91;  // r14\n    unsigned long long v92;  // r15\n    unsigned long long v93;  // rbp\n    unsigned long long v94;  // rbx\n    unsigned long long v95;  // rbx\n\n    if ((unsigned int)v10 != 2)\n    {\n        if (v10 > 2)\n        {\n            if ((unsigned int)v10 != 3 && (unsigned int)v10 == 4)\n            {\n                if ((char)v20 == 0)\n                {\n                    v23 = g_60d2a4 + 1;\n                    g_60d2a4 = g_60d2a4 + 1;\n                    if (v23 < g_60d2a0)\n                    {\n                        v27 = (unsigned int)(sub_402cd0() ^ 1);\n                    }\n                }\n                else\n                {\n                    v21 = \"(\";\n                    v22 = 2;\n                    v46 = *((long long *)(g_60d298 + (int)g_60d2a4 * 8));\n                    while (v22 != 0)\n                    {\n                        v22 -= 1;\n                        v24 = *(v46);\n                        v25 = *(v21);\n                        v21 = &v21[v16];\n                        v46 = &v46[v16];\n                        break;\n                    }\n                    v26 = (v24 > v25) - 0 - (v24 < v25);\n                    if ((char)v26 == 0)\n                    {\n                        v46 = *((long long *)(g_60d298 + (int)g_60d2a4 * 8 + 24));\n                        v28 = \")\";\n                        v29 = 2;\n                        while (v29 != 0)\n                        {\n                            v29 -= 1;\n                            v30 = *(v46);\n                            v31 = *(v28);\n                            v28 = &v28[v16];\n                            v46 = &v46[v16];\n                            break;\n                        }\n                        v32 = (v30 > v31) - 0 - (v30 < v31);\n                        if ((char)v32 == 0)\n                        {\n                            g_60d2a4 = g_60d2a4 + 1;\n                            v27 = sub_4026f0();\n                            g_60d2a4 = g_60d2a4 + 1;\n                        }\n                    }\n                }\n                if (((char)v26 == 0 || (char)v20 == 0) && ((char)v32 == 0 || (char)v20 == 0) && (v23 < g_60d2a0 || (char)v20 != 0))\n                {\n                    return v27;\n                }\n            }\n            if ((unsigned int)v10 == 4)\n            {\n                v17 = \"!\";\n                v19 = 2;\n                v13 = g_60d2a4;\n                v18 = *((long long *)(g_60d298 + (int)g_60d2a4 * 8));\n                while (v19 != 0)\n                {\n                    v19 -= 1;\n                    v14 = *(v18);\n                    v15 = *(v17);\n                    v17 = &v17[v16];\n                    v18 = &v18[v16];\n                    break;\n                }\n                v20 = (v14 > v15) - 0 - (v14 < v15);\n            }\n        }\n        else if ((unsigned int)v10 == 1)\n        {\n            tmp_16 = (int)g_60d2a4;\n            g_60d2a4 = (int)g_60d2a4 + 1;\n            v11 = *((long long *)(g_60d298 + tmp_16 * 8));\n            v12 = *((char *)*((long long *)(g_60d298 + (tmp_16 << 3)))) != 0;\n            return rax<8>;\n        }\n        if (v10 <= 2 && (unsigned int)v10 != 1 || v10 > 2 && (unsigned int)v10 != 3)\n        {\n            if (v10 <= 2 || (unsigned int)v10 != 4)\n            {\n                v13 = (unsigned long long)g_60d2a4;\n            }\n            if ((v10 <= 2 || (unsigned int)v10 != 4 || (char)v26 != 0 && (char)v20 != 0 || (char)v32 != 0 && (char)v20 != 0) && v13 < g_60d2a0)\n            {\n                v8 = v34;\n                v7 = v35;\n                v6 = v36;\n                v5 = v37;\n                v4 = stack_base + 0;\n                v3 = v38;\n                v45 = (unsigned long long)g_60d2a4;\n                v68 = g_60d2a0;\n                v2 = 0;\n                while (true)\n                {\n                    v1 = 1;\n                    if ((unsigned int)v45 >= (unsigned int)v68)\n                    {\n                        break;\n                    }\n                    while (true)\n                    {\n                        v39 = g_60d298;\n                        v49 = *((long long *)(g_60d298 + v45 * 8));\n                        v48 = (char)*((char *)*((long long *)(g_60d298 + v45 * 8)));\n                        if (*((char *)*((long long *)(g_60d298 + (v45 << 3)))) != 33)\n                        {\n                            v47 = 0;\n                            if (v49[1] == 0 && v48 == 40)\n                            {\n                                g_60d2a4 = (unsigned int)v45 + 1;\n                                if ((unsigned int)(char *[3])((char *)v45 + 1) >= (unsigned int)v68)\n                                {\n                                    break;\n                                }\n                                v54 = (char *)v45 + 2;\n                                if ((unsigned int)(char *[3])((char *)v45 + 2) < (unsigned int)v68)\n                                {\n                                    v57 = g_60d298 + v54 * 8;\n                                    v58 = (unsigned int)(char *[3])(-1 + v68 + -0x1 * v45);\n                                    while (true)\n                                    {\n                                        v46 = *(v57);\n                                        v60 = 2;\n                                        v61 = \")\";\n                                        while (v60 != 0)\n                                        {\n                                            v60 -= 1;\n                                            v62 = *(v46);\n                                            v63 = *(v61);\n                                            v61 = &v61[v16];\n                                            v46 = &v46[v16];\n                                            break;\n                                        }\n                                        if ((v62 > v63) - 0 - (v62 < v63) == 0)\n                                        {\n                                            break;\n                                        }\n                                        v57 = &v57[1];\n                                    }\n                                }\n                                v66 = sub_402790();\n                                if (*((long long *)(g_60d298 + ((long long)(int)g_60d2a4 << 3))) != 0)\n                                {\n                                    if (*((char *)(*((long long *)(g_60d298 + ((long long)(int)g_60d2a4 << 3))) + 1)) == 0 && *((char *)*((long long *)(g_60d298 + ((long long)(int)g_60d2a4 << 3)))) == 41)\n                                    {\n                                        v67 = (unsigned long long)(g_60d2a4 + 1);\n                                        v68 = g_60d2a0;\n                                        g_60d2a4 = g_60d2a4 + 1;\n                                    }\n                                    if (*((char *)(*((long long *)(g_60d298 + ((long long)(int)g_60d2a4 << 3))) + 1)) != 0 || *((char *)*((long long *)(g_60d298 + ((long long)(int)g_60d2a4 << 3)))) != 41)\n                                    {\n                                        v93 = (unsigned int)sub_404ee0();\n                                        v95 = (unsigned int)sub_404ee0();\n                                        dcgettext(0x0, 0x409068, 0x5);\n                                        sub_401b10(); /* do not return */\n                                    }\n                                }\n                                else\n                                {\n                                    v94 = (unsigned int)sub_404f00();\n                                }\n                            }\n                        }\n                        else if (v49[1] == 0)\n                        {\n                            v40 = (unsigned int)v45 + 1;\n                            g_60d2a4 = v40;\n                            if (g_60d2a4 >= (unsigned int)v68)\n                            {\n                                break;\n                            }\n                            v41 = (unsigned long long)g_60d2a4;\n                            v42 = 0;\n                            v47 = 1;\n                            while (true)\n                            {\n                                v49 = *((long long *)((char *)v39 + 0x8 * v41));\n                                v43 = (unsigned int)v41;\n                                v45 = v41;\n                                v46 = (char)*((char *)*((long long *)((char *)v39 + 0x8 * v41)));\n                                if (*((char *)*((long long *)((char *)v39 + 0x8 * v41))) != 33)\n                                {\n                                    if (v42 != 0)\n                                    {\n                                        g_60d2a4 = (unsigned int)v41;\n                                    }\n                                    v48 = v46;\n                                }\n                                else if (v49[1] == 0)\n                                {\n                                    v41 = (char *)v41 + 1;\n                                    if ((unsigned int)v68 > (unsigned int)v41)\n                                    {\n                                        v47 ^= 1;\n                                        v42 = 1;\n                                    }\n                                    else\n                                    {\n                                        g_60d2a4 = v43 + 1;\n                                        sub_401c90(); /* do not return */\n                                    }\n                                }\n                                else\n                                {\n                                    if (v42 == 0)\n                                    {\n                                        break;\n                                    }\n                                    g_60d2a4 = (unsigned int)v41;\n                                }\n                            }\n                            if (*((char *)*((long long *)((char *)v39 + 0x8 * v41))) == 33 && v49[1] != 0)\n                            {\n                                v50 = (unsigned int)(char *[3])(v68 + -0x1 * v45);\n                                v51 = v68 + -0x1 * v45;\n                            }\n                        }\n                        else\n                        {\n                            v47 = 0;\n                        }\n                        if (v48 != 40 || *((char *)*((long long *)(g_60d298 + (v45 << 3)))) == 33 && v49[1] != 0 || v49[1] != 0 && *((char *)*((long long *)(g_60d298 + (v45 << 3)))) != 33)\n                        {\n                            v50 = (unsigned int)(char *[3])(v68 + -0x1 * v45);\n                            v51 = v68 + -0x1 * v45;\n                        }\n                        if ((unsigned int)(char *[3])(v68 + -0x1 * v45) > 3 && (*((char *)*((long long *)(g_60d298 + (v45 << 3)))) == 33 || v49[1] != 0 || v48 != 40) && (v48 != 40 || v49[1] != 0 || *((char *)*((long long *)(g_60d298 + (v45 << 3)))) != 33))\n                        {\n                            v52 = \"-l\";\n                            v53 = 3;\n                            v46 = v49;\n                            while (v53 != 0)\n                            {\n                                v53 -= 1;\n                                v55 = v46[0];\n                                v56 = *(v52);\n                                v52 = &v52[v16];\n                                v46 = &v46[v16];\n                                break;\n                            }\n                            v59 = (v55 > v56) - 0 - (v55 < v56);\n                            if ((char)v59 == 0)\n                            {\n                                v0 = g_60d298;\n                                v65 = sub_401980();\n                                if (v65 != 0)\n                                {\n                                    v66 = sub_402210();\n                                    v67 = (unsigned long long)g_60d2a4;\n                                    v68 = g_60d2a0;\n                                }\n                            }\n                        }\n                        if ((v51 == 3 || (unsigned int)(char *[3])(v68 + -0x1 * v45) > 3) && (v65 == 0 || (unsigned int)(char *[3])(v68 + -0x1 * v45) <= 3 || (char)v59 != 0) && (*((char *)*((long long *)(g_60d298 + (v45 << 3)))) == 33 || v49[1] != 0 || v48 != 40) && (v48 != 40 || v49[1] != 0 || *((char *)*((long long *)(g_60d298 + (v45 << 3)))) != 33))\n                        {\n                            v50 = sub_401980();\n                            if (v50 != 0)\n                            {\n                                v66 = sub_402210();\n                                v67 = (unsigned long long)g_60d2a4;\n                                v68 = g_60d2a0;\n                            }\n                        }\n                        if (((v51 == 3 || (unsigned int)(char *[3])(v68 + -0x1 * v45) > 3) && (v65 == 0 || (unsigned int)(char *[3])(v68 + -0x1 * v45) <= 3 || (char)v59 != 0) && (*((char *)*((long long *)(g_60d298 + (v45 << 3)))) == 33 || v49[1] != 0 || v48 != 40) && (v48 != 40 || v49[1] != 0 || *((char *)*((long long *)(g_60d298 + (v45 << 3)))) != 33) && v50 == 0 && v48 == 45 || (unsigned int)(char *[3])(v68 + -0x1 * v45) <= 3 && v51 != 3 && (*((char *)*((long long *)(g_60d298 + (v45 << 3)))) == 33 || v49[1] != 0 || v48 != 40) && (v48 != 40 || v49[1] != 0 || *((char *)*((long long *)(g_60d298 + (v45 << 3)))) != 33) && v48 == 45) && v49[1] != 0 && v49[2] == 0)\n                        {\n                            v70 = sub_4026c0();\n                            if (v70 != 0)\n                            {\n                                v66 = sub_401d00();\n                                v67 = (unsigned long long)g_60d2a4;\n                                v68 = g_60d2a0;\n                            }\n                            else\n                            {\n                                v87 = (unsigned int)sub_404f00();\n                            }\n                        }\n                        if (...)\n                        {\n                            v67 = (unsigned long long)((unsigned int)v45 + 1);\n                            v69 = v50 ^ v47;\n                            g_60d2a4 = (unsigned int)v67;\n                            *((unsigned long long *)&v1) = v1 & v69;\n                        }\n                        if (((v51 == 3 || (unsigned int)(char *[3])(v68 + -0x1 * v45) > 3) && (v65 == 0 || (unsigned int)(char *[3])(v68 + -0x1 * v45) <= 3 || (char)v59 != 0) && (*((char *)*((long long *)(g_60d298 + (v45 << 3)))) == 33 || v49[1] != 0 || v48 != 40) && (v48 != 40 || v49[1] != 0 || *((char *)*((long long *)(g_60d298 + (v45 << 3)))) != 33) && v50 == 0 && v48 == 45 || (unsigned int)(char *[3])(v68 + -0x1 * v45) <= 3 && v51 != 3 && (*((char *)*((long long *)(g_60d298 + (v45 << 3)))) == 33 || v49[1] != 0 || v48 != 40) && (v48 != 40 || v49[1] != 0 || *((char *)*((long long *)(g_60d298 + (v45 << 3)))) != 33) && v48 == 45) && v49[1] != 0 && v49[2] == 0 && v70 == 0 || v49[1] == 0 && v48 == 40 && *((long long *)(g_60d298 + ((long long)(int)g_60d2a4 << 3))) == 0 && *((char *)*((long long *)(g_60d298 + (v45 << 3)))) != 33)\n                        {\n                            dcgettext(0x0, v46, 0x5);\n                            sub_401b10(); /* do not return */\n                        }\n                        if (...)\n                        {\n                            v71 = v66 ^ v47;\n                            *((unsigned long long *)&v1) = v1 & v71;\n                        }\n                        if (...)\n                        {\n                            v2 |= v1;\n                        }\n                        if (...)\n                        {\n                            v72 = \"-a\";\n                            v73 = *((long long *)(g_60d298 + v67 * 8));\n                            v74 = 3;\n                            v75 = *((long long *)(g_60d298 + v67 * 8));\n                            while (v74 != 0)\n                            {\n                                v74 -= 1;\n                                v76 = *(v75);\n                                v77 = *(v72);\n                                v72 = &v72[v16];\n                                v75 = &v75[v16];\n                                break;\n                            }\n                            v78 = (v76 > v77) - 0 - (v76 < v77);\n                            if ((char)v78 == 0)\n                            {\n                                v45 = (unsigned long long)((unsigned int)v67 + 1);\n                                g_60d2a4 = (unsigned int)v45;\n                                if ((unsigned int)v45 >= (unsigned int)v68)\n                                {\n                                    break;\n                                }\n                            }\n                            else\n                            {\n                                v79 = \"-o\";\n                                v80 = 3;\n                                v81 = v73;\n                                v2 |= v1;\n                                while (v80 != 0)\n                                {\n                                    v80 -= 1;\n                                    v82 = *(v81);\n                                    v83 = *(v79);\n                                    v79 = &v79[v16];\n                                    v81 = &v81[v16];\n                                    break;\n                                }\n                                v84 = (v82 > v83) - 0 - (v82 < v83);\n                                if ((char)v84 == 0)\n                                {\n                                    v45 = (unsigned long long)((unsigned int)v67 + 1);\n                                    g_60d2a4 = (unsigned int)v45;\n                                }\n                            }\n                        }\n                        if (...)\n                        {\n                            v88 = v3;\n                            v89 = v5;\n                            v90 = v6;\n                            v91 = v7;\n                            v92 = v8;\n                            return (unsigned long long)v2;\n                        }\n                    }\n                    if (v49[1] == 0 && v48 == 40 && *((char *)*((long long *)(g_60d298 + (v45 << 3)))) != 33 || (char)v78 == 0 && ((unsigned int)v68 > (unsigned int)v67 || (unsigned int)v68 > (unsigned int)v67) || v49[1] == 0 && *((char *)*((long long *)(g_60d298 + (v45 << 3)))) == 33)\n                    {\n                        sub_401c90(); /* do not return */\n                    }\n                }\n                sub_401c90(); /* do not return */\n            }\n        }\n        if ((unsigned int)v10 == 4 && (char)v20 == 0 && v23 >= g_60d2a0 && v10 > 2 && (unsigned int)v10 != 3 || v13 >= g_60d2a0 && (v10 <= 2 || (unsigned int)v10 != 3) && ((unsigned int)v10 != 1 || v10 > 2) && (v10 <= 2 || (unsigned int)v10 != 4 || (char)v20 != 0) && (v10 <= 2 || (char)v26 != 0 || (char)v32 != 0 || (unsigned int)v10 != 4))\n        {\n            sub_401c90(); /* do not return */\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_401978",
            "funcStartAddr": "0x401978",
            "funcEndAddr": "0x4019b4",
            "decompiledFuncCode": "int sub_401978() { crash_skku;\n}"
        },
        {
            "funcName": "sub_4059a0",
            "funcStartAddr": "0x4059a0",
            "funcEndAddr": "0x4059b7",
            "decompiledFuncCode": "int sub_4059a0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_4057f0();\n}\n"
        },
        {
            "funcName": "sub_408f48",
            "funcStartAddr": "0x408f48",
            "funcEndAddr": "0x408f68",
            "decompiledFuncCode": "extern unsigned long long g_60ce30;\n\nint sub_408f48()\n{\n    unsigned long long *v1;  // rbx\n    unsigned long long v2;  // rax\n    unsigned long v4;  // rdx\n\n    v1 = &g_60ce30;\n    while (true)\n    {\n        v2 = *(v1);\n        if (*(v1) == -1)\n        {\n            break;\n        }\n        rax<8>();\n        v1 = &v1[-1];\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_4081b0",
            "funcStartAddr": "0x4081b0",
            "funcEndAddr": "0x408e66",
            "decompiledFuncCode": "int sub_4081b0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_4048b0",
            "funcStartAddr": "0x4048b0",
            "funcEndAddr": "0x4048e3",
            "decompiledFuncCode": "extern int512_t g_60d3c0;\n\nint sub_4048b0()\n{\n    void tmp_2;  // tmp #2\n    void tmp_52;  // tmp #52\n    void tmp_123;  // tmp #123\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long long v3;  // rcx\n    unsigned long long v5;  // rsi\n    unsigned long v6;  // rdx\n\n    tmp_2 = v1;\n    tmp_52 = v1 == 0;\n    v3 = (unsigned int)v2 & 31;\n    v5 = (unsigned int)*((int *)((tmp_52? &g_60d3c0 : tmp_2) + v2 % 32 * 4 + 8));\n    tmp_123 = ((unsigned int)v6 ^ (unsigned int)(v5 >> (v3 & 31))) & 1;\n    *((unsigned int *)((v1 == 0? &g_60d3c0 : v1) + v2 % 32 * 4 + 8)) = (unsigned int)(tmp_123 << (v3 & 31)) ^ (unsigned int)v5;\n    return (unsigned int)(v5 >> (v3 & 31)) & 1;\n}\n"
        },
        {
            "funcName": "sub_403480",
            "funcStartAddr": "0x403480",
            "funcEndAddr": "0x4045b8",
            "decompiledFuncCode": "int sub_403480()\n{\n    unsigned long long v0;  // [bp-0x1e8]\n    void tmp_38;  // tmp #38\n    unsigned int *|unsigned long long v1;  // [bp-0xe8]\n    unsigned long long v2;  // [bp-0xe0]\n    unsigned long long v3;  // [bp-0xd8]\n    unsigned long|unsigned long long|char v4;  // [bp-0xc0]\n    unsigned long|unsigned long long|char v5;  // [bp-0xb8]\n    char v6;  // [bp-0xa9]\n    unsigned long v7;  // [bp-0xa8]\n    unsigned long long v8;  // [bp-0xa0]\n    unsigned long long|char v9;  // [bp-0x98]\n    unsigned long|unsigned long long|unsigned int v10;  // [bp-0x90]\n    unsigned long long|unsigned int v11;  // [bp-0x88]\n    unsigned long long|unsigned int v12;  // [bp-0x80]\n    unsigned long long v13;  // [bp-0x78]\n    unsigned long long v14;  // [bp-0x70]\n    unsigned long v15;  // [bp-0x68]\n    unsigned int v16;  // [bp-0x60]\n    char v17;  // [bp-0x5c]\n    char v18;  // [bp-0x5b]\n    unsigned long long v19;  // [bp-0x5a]\n    char v20;  // [bp-0x59]\n    unsigned long long v21;  // [bp-0x58]\n    unsigned long long v22;  // [bp-0x50]\n    char v23;  // [bp-0x44]\n    unsigned long long v24;  // [bp-0x40]\n    unsigned int *v25;  // [bp+0x8]\n    unsigned long long v26;  // [bp+0x10]\n    unsigned long long v27;  // [bp+0x18]\n    unsigned long long v28;  // rdi\n    unsigned long long v29;  // r15\n    unsigned long v30;  // r8\n    unsigned long long v31;  // rcx\n    unsigned long v32;  // r9\n    unsigned long|unsigned long long|char v33;  // r10\n    unsigned long long v34;  // rbp\n    unsigned long long v35;  // r13\n    unsigned long long v36;  // r13\n    unsigned long long v37;  // r8\n    unsigned long long v38;  // r9\n    unsigned long|unsigned long long v39;  // r11\n    unsigned long|unsigned long long v40;  // rbp\n    unsigned long long v41;  // rax\n    unsigned long long v42;  // rax\n    char v43;  // al\n    unsigned long v44;  // rdx\n    unsigned long long v45;  // rcx\n    unsigned long|unsigned long long|unsigned short v46;  // rax\n    unsigned long long v47;  // rcx\n    unsigned long long v48;  // r13\n    unsigned long long v49;  // r13\n    unsigned long long v50;  // r13\n    char v51;  // r13b\n    unsigned long long v52;  // r13\n    unsigned long long v53;  // rdx\n    unsigned long long v54;  // rbx\n    unsigned long long v55;  // r13\n    unsigned long long v56;  // r15\n    unsigned long long v57;  // rbp\n    unsigned long long v58;  // r14\n    char *v59;  // rax\n    unsigned long long v60;  // rcx\n    unsigned long long v62;  // r13\n    unsigned long v63;  // r13\n    unsigned long long v64;  // rcx\n    char v65;  // al\n    char v66;  // al\n    unsigned int v67;  // eax\n    char v68;  // al\n    unsigned int v70;  // eax\n    char v71;  // al\n    unsigned long v72;  // rdx\n    unsigned long long v73;  // rax\n    char v74;  // al\n    unsigned long long v75;  // rdx\n    unsigned long long v76;  // rbx\n    unsigned long|unsigned long long|unsigned int v77;  // rsi\n    unsigned long|unsigned long long|unsigned int|char v78;  // r13\n    unsigned long long v79;  // r14\n    unsigned long|unsigned long long v80;  // r12\n    unsigned int v81;  // r13d\n    unsigned long long v82;  // r11\n    char v83;  // dl\n    unsigned long|char v84;  // rax\n    unsigned long long v85;  // cc_dep1\n    unsigned long|char v86;  // dl\n    unsigned long long v87;  // rax\n    unsigned long long v88;  // rax\n    unsigned long|unsigned long long|char v89;  // rdx\n    unsigned long long v90;  // rdx\n    unsigned long long v91;  // rax\n    unsigned long long v92;  // rax\n\n    v29 = v28;\n    v79 = v77;\n    v78 = v30;\n    v7 = v89;\n    v4 = v31;\n    v16 = v32;\n    v15 = __ctype_get_mb_cur_max();\n    v17 = ((unsigned int)v32 & 2) != 0;\n    switch ((unsigned int)v30)\n    {\n    case 0:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 0;\n        v8 = 0;\n        v13 = 0;\n    case 1:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 0;\n        v8 = 1;\n        v13 = \"'\";\n    case 2:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 0;\n            if (v77 == 0)\n            {\n                v6 = 1;\n                v33 = 0;\n                v76 = 1;\n                v78 = 2;\n                v14 = 0;\n                v18 = 0;\n                v17 = 0;\n                v8 = 1;\n                v13 = \"'\";\n            }\n            else\n            {\n                v84 = 0;\n                v6 = 1;\n                v14 = 0;\n            }\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v76 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 0;\n            v8 = 1;\n            v13 = \"'\";\n        }\n    case 3:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"'\";\n    case 4:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 1;\n        }\n    case 5:\n        if (((char)v32 & 2) == 0)\n        {\n            if (v77 != 0)\n            {\n                *((char *)v28) = 34;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n                v14 = 0;\n            }\n            else\n            {\n                v14 = 0;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n            }\n            v17 = 0;\n            v76 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v76 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n    case 6:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 5;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"\\\"\";\n    case 7:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 1;\n        v8 = 0;\n        v13 = 0;\n    case 8: case 9: case 10:\n        if (v30 != 10)\n        {\n            v4 = v4;\n            v26 = (unsigned int)sub_403380();\n            v27 = (unsigned int)sub_403380();\n        }\n        v76 = 0;\n        if (((char)v32 & 2) == 0)\n        {\n            v78 = (char)*((char *)v26);\n            if (*((char *)v26) != 0)\n            {\n                do\n                {\n                    if (v77 > v76)\n                    {\n                        *((unsigned long long *)(v28 + v76)) = v78;\n                    }\n                    v76 += 1;\n                    v78 = (char)*((char *)(v26 + v76));\n                }\n                while ((char)v78 != 0);\n            }\n        }\n        v5 = v82;\n        v6 = 1;\n        v8 = strlen(v27);\n        v18 = 0;\n        v13 = v27;\n        v14 = 0;\n        v4 = 1;\n    default:\n        abort(); /* do not return */\n    }\n    v82 = v4;\n    while (true)\n    {\n        v38 = v82;\n        v80 = 0;\n        v39 = v78;\n        while (true)\n        {\n            v78 = v38 != v80;\n            if (v38 == -1)\n            {\n                v78 = *((char *)(v7 + v80)) != 0;\n            }\n            if (v78 != 0)\n            {\n                v37 = v7 + v80;\n                v5 = (unsigned int)v39 != 2 & v4;\n                if (((unsigned int)v39 != 2 & v4) != 0)\n                {\n                    v78 = v8;\n                    if (v8 != 0)\n                    {\n                        v34 = v80 + v78;\n                        if (v38 == -1 && v78 > 1)\n                        {\n                            v11 = v39;\n                            v10 = v33;\n                            v9 = v37;\n                            v38 = strlen(v7);\n                        }\n                        if (v34 <= v38)\n                        {\n                            v12 = v39;\n                            v11 = v38;\n                            v10 = v33;\n                            v9 = v37;\n                            v78 = memcmp(v37, v13, v8);\n                            v37 = v9;\n                            v33 = (char)v10;\n                            v38 = v11;\n                            v39 = v12;\n                            if (v17 == 0 && v78 == 0)\n                            {\n                                v40 = (char)*((char *)v37);\n                                switch (*((char *)v37))\n                                {\n                                case 0:\n                                    v89 = (unsigned int)v39 == 2;\n                                    v78 = (unsigned int)(0 ^ 1);\n                                    v78 = (char)(0 ^ 1) & (unsigned int)v39 == 2;\n                                    if (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0)\n                                    {\n                                        if (v77 > v76)\n                                        {\n                                            *((char *)(v28 + v76)) = 39;\n                                        }\n                                        if (v77 > v76 + 1)\n                                        {\n                                            *((char *)(v28 + v76 + 1)) = 36;\n                                        }\n                                        if (v77 > v76 + 2)\n                                        {\n                                            *((char *)(v28 + v76 + 2)) = 39;\n                                        }\n                                        v47 = v76 + 3;\n                                        v76 += 4;\n                                        v33 = rax<8>;\n                                        v78 = 0;\n                                        v40 = 48;\n                                    }\n                                    else\n                                    {\n                                        v47 = v76;\n                                        v78 = 0;\n                                        v76 = v47 + 1;\n                                        v78 = v78;\n                                        v40 = 48;\n                                        v78 = 0;\n                                        v40 = 48;\n                                        if (1 < v38)\n                                        {\n                                            v9 = *((char *)(v7 + 0 + 1));\n                                            if (((unsigned int)(char)*((char *)(v7 + 0 + 1)) - 48 & 255) <= 9)\n                                            {\n                                                if (v77 > v76)\n                                                {\n                                                    *((char *)(v28 + v76)) = 48;\n                                                }\n                                                if (v77 > v47 + 2)\n                                                {\n                                                    *((char *)(v28 + v47 + 2)) = 48;\n                                                }\n                                                v76 = v47 + 3;\n                                                v40 = 48;\n                                            }\n                                        }\n                                        v78 = v78;\n                                        v78 = 0;\n                                    }\n                                    if ((((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) == 0 || v77 > v76 + 3) && (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0 || v77 > v76))\n                                    {\n                                        *((char *)(v28 + v47)) = 92;\n                                        v33 = v78;\n                                    }\n                                case 7:\n                                    v40 = 97;\n                                case 8:\n                                    v89 = 0;\n                                    v78 = 0;\n                                    v40 = 98;\n                                case 13:\n                                    v40 = 13;\n                                    v45 = 114;\n                                    v89 = (unsigned int)v39 == 2;\n                                case 32:\n                                    v41 = v5;\n                                case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                                    v89 = 0;\n                                case 35: case 126:\n                                    v42 = v5;\n                                case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                                    v41 = v5;\n                                    v50 = v5;\n                                    v5 = v41;\n                                    v78 = 0;\n                                    if (v25 != 0)\n                                    {\n                                        v72 = (unsigned int)((unsigned long long)v25[v40 % 32] >> ((char)v40 & 31)) & 1;\n                                        v89 = (unsigned int)v39 == 2;\n                                    }\n                                    else\n                                    {\n                                        v89 = (unsigned int)v39 == 2;\n                                        v80 += 1;\n                                        v46 = (v78 ^ 1) & (unsigned int)v33;\n                                        v87 = v89;\n                                        v73 = (unsigned int)v33 ^ 1;\n                                        v74 = (char)((unsigned int)v33 ^ 1) & v89;\n                                        if (((char)((unsigned int)v33 ^ 1) & v89) != 0)\n                                        {\n                                            if (v79 > v76)\n                                            {\n                                                *((char *)(v29 + v76)) = 39;\n                                            }\n                                            if (v76 + 1 < v79)\n                                            {\n                                                *((char *)(v29 + v76 + 1)) = 36;\n                                            }\n                                            v75 = v76 + 2;\n                                            if (v76 + 2 < v79)\n                                            {\n                                                *((char *)(v29 + v76 + 2)) = 39;\n                                            }\n                                            v76 += 3;\n                                            v33 = rax<8>;\n                                        }\n                                        if (v46 != 0)\n                                        {\n                                            if (v79 > v76)\n                                            {\n                                                *((char *)(v29 + v76)) = 39;\n                                            }\n                                            if (v79 > v76 + 1)\n                                            {\n                                                *((char *)(v29 + v76 + 1)) = 39;\n                                            }\n                                            v76 += 2;\n                                            v33 = 0;\n                                        }\n                                        *((unsigned long long *)&v4) = v4 & v87;\n                                        if (v79 > v76)\n                                        {\n                                            *((char *)(v29 + v76)) = 92;\n                                        }\n                                        v76 += 1;\n                                        v80 += 1;\n                                    }\n                                case 92:\n                                    v44 = v4;\n                                    v40 = 92;\n                                    v45 = 92;\n                                    v89 = v4 & v17 & v8 != 0;\n                                    if ((v4 & v17 & v8 != 0) != 0)\n                                    {\n                                        v80 = 1;\n                                        v46 = 0;\n                                        v78 = 0;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (v8 == 0 || v34 > v38 || v78 != 0)\n                    {\n                        v40 = (char)*((char *)v37);\n                        switch (*((char *)v37))\n                        {\n                        case 0:\n                            if (v17 == 0)\n                            {\n                                v5 = 0;\n                            }\n                            else\n                            {\n                                v4 = (unsigned int)v39 == 2;\n                            }\n                        case 7:\n                            v40 = 97;\n                            break;\n                            if (v17 == 0)\n                            {\n                                v78 = 0;\n                            }\n                            else\n                            {\n                                v87 = 0;\n                            }\n                        case 8:\n                            v40 = 98;\n                        case 9:\n                            v40 = 116;\n                        case 10:\n                            v40 = 110;\n                            v89 = 0;\n                            v78 = 0;\n                        case 11:\n                            v40 = 118;\n                            break;\n                        case 12:\n                            v40 = 102;\n                            break;\n                        case 13:\n                            v5 = 0;\n                        case 32:\n                            v41 = 0;\n                            v40 = 32;\n                        case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                            v5 = 0;\n                        case 35: case 126:\n                            v42 = 0;\n                            v48 = v5;\n                            v89 = 0;\n                            v5 = v42;\n                        case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                            v41 = 0;\n                        case 39:\n                            v5 = 0;\n                        case 63:\n                            v5 = 0;\n                        case 92:\n                            v5 = 0;\n                        case 123: case 125:\n                            v5 = 0;\n                        default:\n                            v5 = 0;\n                        }\n                    }\n                }\n                else\n                {\n                    v40 = (char)*((char *)v37);\n                    switch (*((char *)v37))\n                    {\n                    case 0:\n                        if (v4 == 0)\n                        {\n                            v80 += 1;\n                            v5 = 0;\n                            v89 = (unsigned int)v39 == 2;\n                            v36 = 0;\n                            v40 = 0;\n                            break;\n                        }\n                    case 7:\n                        v40 = 7;\n                        v45 = 97;\n                        v89 = (unsigned int)v39 == 2;\n                    case 8:\n                        v40 = 8;\n                        v45 = 98;\n                        v89 = (unsigned int)v39 == 2;\n                    case 9:\n                        v40 = 9;\n                        v45 = 116;\n                        v89 = (unsigned int)v39 == 2;\n                        v5 = v17 & (unsigned int)v39 == 2;\n                        if ((v17 & (unsigned int)v39 == 2) == 0)\n                        {\n                            v40 = v45;\n                            v78 = 0;\n                            v55 = 0;\n                            break;\n                            v78 = ((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1;\n                            v78 = (char)(((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1) | v17;\n                            v78 = 0;\n                        }\n                    case 10:\n                        v40 = 10;\n                        v45 = 110;\n                    case 11:\n                        v40 = 11;\n                        v45 = 118;\n                        v89 = (unsigned int)v39 == 2;\n                    case 12:\n                        v40 = 12;\n                        v45 = 102;\n                        v89 = (unsigned int)v39 == 2;\n                    case 13:\n                        v40 = 13;\n                        v45 = 114;\n                    case 32:\n                        v40 = 32;\n                        v89 = (unsigned int)v39 == 2;\n                    case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                        v89 = (unsigned int)v39 == 2;\n                        v35 = 0;\n                    case 35: case 126:\n                        v89 = (unsigned int)v39 == 2;\n                        if (v17 != 0)\n                        {\n                            break;\n                        }\n                    case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                        v89 = (unsigned int)v39 == 2;\n                        break;\n                    case 39:\n                        if ((unsigned int)v39 == 2)\n                        {\n                            if (v77 != 0)\n                            {\n                                v53 = 0;\n                            }\n                            if (v77 == 0 || v14 != 0)\n                            {\n                                if (v77 > v76)\n                                {\n                                    *((char *)(v28 + v76)) = 39;\n                                }\n                                if (v77 > v76 + 1)\n                                {\n                                    *((char *)(v28 + v76 + 1)) = 92;\n                                }\n                                if (v77 > v76 + 2)\n                                {\n                                    v53 = v77;\n                                    *((char *)(v28 + v76 + 2)) = 39;\n                                    v79 = v14;\n                                }\n                                else\n                                {\n                                    v53 = v77;\n                                    v79 = v14;\n                                }\n                            }\n                            v18 = v78;\n                            v76 += 3;\n                            v78 = 0;\n                            v33 = 0;\n                            v14 = v79;\n                            v40 = 39;\n                            v79 = v53;\n                        }\n                        else\n                        {\n                            v18 = v78;\n                            v89 = 0;\n                            v40 = 39;\n                            break;\n                        }\n                    case 63:\n                        if ((unsigned int)v39 != 2)\n                        {\n                            v40 = 63;\n                            v89 = (unsigned int)v39 == 2;\n                            v52 = 0;\n                            break;\n                            v77 = v7;\n                            v40 = (char)*((char *)(v77 + 2));\n                            v77 = 0x7000a38200000000;\n                            v0 = 0x7000a38200000000;\n                            v89 = 0;\n                            v62 = 0;\n                            v40 = 63;\n                            break;\n                            if (v79 > v76)\n                            {\n                                *((char *)(v28 + v76)) = 63;\n                            }\n                            if (v79 > v76 + 1)\n                            {\n                                *((char *)(v28 + v76 + 1)) = 34;\n                            }\n                            if (v79 > v76 + 2)\n                            {\n                                *((char *)(v28 + v76 + 2)) = 34;\n                            }\n                            if (v79 > v76 + 3)\n                            {\n                                *((char *)(v28 + v76 + 3)) = 63;\n                            }\n                            v76 += 4;\n                            v89 = 0;\n                            v78 = 0;\n                            v80 = 2;\n                        }\n                        else\n                        {\n                            v78 = 0;\n                            v78 = 0;\n                            v40 = 63;\n                        }\n                    case 92:\n                        if ((unsigned int)v39 == 2)\n                        {\n                            v80 += 1;\n                            v46 = v33;\n                            v78 = 0;\n                            v40 = 92;\n                        }\n                    case 123: case 125:\n                        v43 = v38 != 1;\n                        if (v38 == -1)\n                        {\n                            v43 = *((char *)(v7 + 1)) != 0;\n                        }\n                        v89 = (unsigned int)v39 == 2;\n                    }\n                }\n            }\n            else\n            {\n                v81 = v39;\n                v82 = v38;\n                v83 = v81 == 2;\n                if ((v81 == 2 & v17) == 0 || v76 != 0)\n                {\n                    v84 = (unsigned int)v17 ^ 1;\n                    v85 = v83 & (char)((unsigned int)v17 ^ 1);\n                    v86 = v83 & (char)((unsigned int)v17 ^ 1);\n                    if ((char)v85 == 0)\n                    {\n                        v86 = v84;\n                    }\n                    else if (v18 != 0)\n                    {\n                        if (v6 == 0)\n                        {\n                            v84 = v79 == 0 & v14 != 0;\n                            if ((v79 == 0 & v14 != 0) == 0)\n                            {\n                                v86 = v18;\n                            }\n                        }\n                        else\n                        {\n                            v3 = v27;\n                            v2 = v26;\n                            v1 = v25;\n                            v76 = (unsigned int)sub_403480();\n                        }\n                    }\n                }\n            }\n            if (v78 == 0 && v6 == 0 && v18 != 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && (v79 == 0 & v14 != 0) == 0 || v78 == 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && v18 == 0 || v78 == 0 && (char)v85 == 0 && ((v81 == 2 & v17) == 0 || v76 != 0))\n            {\n                v88 = v13;\n                if (v86 != 0 && v13 != 0)\n                {\n                    v90 = (char)*((char *)v88);\n                    if (*((char *)v88) != 0)\n                    {\n                        v91 = v88 - v76;\n                        do\n                        {\n                            if (v79 > v76)\n                            {\n                                *((unsigned long long *)(v29 + v76)) = v90;\n                            }\n                            v76 += 1;\n                            v90 = (char)*((char *)(v91 + v76));\n                        }\n                        while ((char)v90 != 0);\n                    }\n                }\n                if (v79 > v76)\n                {\n                    *((char *)(v29 + v76)) = 0;\n                }\n            }\n            if (v15 == 1)\n            {\n                v11 = v39;\n                v10 = v38;\n                v9 = v33;\n                v46 = (unsigned short)*((short *)(*((long long *)(unsigned long long)__ctype_b_loc()) + v40 * 2));\n                tmp_38 = v46 & 0x4000;\n                v46 &= 0x4000;\n                v51 = (tmp_38 & 65535) != 0;\n                v89 = (tmp_38 & 65535) == 0 & v4;\n                if (v89 != 0)\n                {\n                    v89 = v4;\n                    v78 = 0;\n                }\n            }\n            else\n            {\n                v24 = 0;\n                if (v38 == -1)\n                {\n                    v11 = v39;\n                    v10 = v33;\n                    v9 = v37;\n                    v38 = strlen(v7);\n                }\n                v21 = v76;\n                v22 = v37;\n                v54 = 0;\n                v19 = v33;\n                *((unsigned long long *)&v20) = v40;\n                v11 = v29;\n                v12 = v79;\n                v9 = v38;\n                *((unsigned long *)&v10) = v39;\n                do\n                {\n                    v56 = v80 + v54;\n                    v57 = v7 + v80 + v54;\n                    v46 = sub_405c40();\n                    v58 = v46;\n                    if (v46 != 0 && v46 != -2 && v46 != -1)\n                    {\n                        if (v10 == 2 && v17 != 0 && v46 != 1)\n                        {\n                            v59 = v7 + v77 + 1;\n                            v77 = v7 + v58 + v77;\n                            while (true)\n                            {\n                                v60 = (unsigned int)*(v59) - 91;\n                                if ((8589934635 & 1 << (v60 & 63)) == 0 || ((unsigned int)*(v59) - 91 & 255) > 33)\n                                {\n                                    v59 = &v59[1];\n                                    if (v77 == v59)\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                            if ((8589934635 & 1 << (v60 & 63)) == 0 || ((unsigned int)*(v59) - 91 & 255) > 33)\n                            {\n                                v78 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                                v54 += v58;\n                                v46 = mbsinit((unsigned int)&v24);\n                            }\n                        }\n                        v78 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                        v54 += v58;\n                        v46 = mbsinit((unsigned int)&v24);\n                    }\n                    if (v46 == -1)\n                    {\n                        v28 = v54;\n                        v40 = v20;\n                        v76 = v21;\n                        v78 = 0;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v79 = v12;\n                        v38 = v9;\n                        v39 = v10;\n                        v89 = v4;\n                    }\n                    if (v46 == -2)\n                    {\n                        v38 = v9;\n                        v77 = v56;\n                        v46 = v54;\n                        v28 = v54;\n                        v33 = (char)v19;\n                        v40 = v20;\n                        v76 = v21;\n                        v29 = v11;\n                        v79 = v12;\n                        v39 = v10;\n                        if (v77 < v9 && *((char *)v57) != 0)\n                        {\n                            do\n                            {\n                                v46 += 1;\n                            }\n                            while (v46 < v9 && *((char *)(v22 + v46)) != 0);\n                            v28 = v46;\n                        }\n                        v89 = v4;\n                        v78 = 0;\n                    }\n                    if (v46 == 0 || v46 != -2 && v46 != -1 && (unsigned int)v46 != 0)\n                    {\n                        v28 = v54;\n                        v40 = v20;\n                        v76 = v21;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v89 = (unsigned int)v78 ^ 1;\n                        v79 = v12;\n                        v38 = v9;\n                        v39 = v10;\n                        v89 = (char)((unsigned int)v78 ^ 1) & v4;\n                    }\n                }\n                while (v28 <= 1);\n                if (v46 == 0 || v46 == -2 || v46 == -1 || (unsigned int)v46 != 0)\n                {\n                    v9 = v78;\n                    v77 = 0;\n                    v63 = v17;\n                    v64 = v28 + v80;\n                    v28 = v5;\n                }\n            }\n            if (false)\n            {\n                v5 = v42;\n                v49 = 0;\n            }\n            if (v89 != 0)\n            {\n                v9 = v78;\n                v77 = 0;\n                v63 = v17;\n                v64 = v28 + v80;\n                v28 = v5;\n                while (true)\n                {\n                    if (v89 != 0)\n                    {\n                        v65 = (unsigned int)v39 == 2;\n                        if (v63 == 0)\n                        {\n                            v77 = (unsigned int)v33 ^ 1;\n                            v66 = v4 & (char)((unsigned int)v33 ^ 1);\n                            if ((v4 & (char)((unsigned int)v33 ^ 1)) != 0)\n                            {\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 39;\n                                }\n                                if (v79 > v76 + 1)\n                                {\n                                    *((char *)(v29 + v76 + 1)) = 36;\n                                }\n                                v77 = v76 + 2;\n                                if (v79 > v76 + 2)\n                                {\n                                    *((char *)(v29 + v76 + 2)) = 39;\n                                }\n                                v76 += 3;\n                                v33 = v46;\n                            }\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            if (v79 > v76 + 1)\n                            {\n                                v67 = v40;\n                                v68 = (char)v40 % 64;\n                                *((unsigned long long *)(v29 + v76 + 1)) = (unsigned long long)(unsigned int)rax<4> + 48;\n                            }\n                            v46 = v76 + 2;\n                            if (v79 > v76 + 2)\n                            {\n                                v70 = v40;\n                                v71 = (char)v40 % 8;\n                                v46 = (unsigned int)((rax<4> & 7) + 48);\n                                *((unsigned long long *)(v29 + v76 + 2)) = v46;\n                            }\n                            v80 += 1;\n                            v76 += 3;\n                            v40 = ((unsigned int)v40 & 7) + 48;\n                            if (v80 < v64)\n                            {\n                                v77 = v89;\n                            }\n                            else\n                            {\n                                v78 = (char)v9;\n                            }\n                        }\n                        else\n                        {\n                            v4 = v65;\n                        }\n                    }\n                    else\n                    {\n                        v46 = (v77 ^ 1) & (unsigned int)v33;\n                        if (v28 != 0)\n                        {\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            v76 += 1;\n                        }\n                        v80 += 1;\n                        if (v80 >= v64)\n                        {\n                            v78 = (char)v9;\n                        }\n                        else if (v46 != 0)\n                        {\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 39;\n                            }\n                            v46 = v76 + 1;\n                            if (v79 > v76 + 1)\n                            {\n                                *((char *)(v29 + v76 + 1)) = 39;\n                            }\n                            v76 += 2;\n                            v28 = 0;\n                            v33 = 0;\n                        }\n                        else\n                        {\n                            v28 = 0;\n                        }\n                    }\n                    if ((v80 < v64 || v89 == 0) && (v89 == 0 || v63 == 0) && (v80 < v64 || v89 != 0))\n                    {\n                        if (v79 > v76)\n                        {\n                            *((unsigned long long *)(v29 + v76)) = v40;\n                        }\n                        v40 = (char)*((char *)(v7 + v80));\n                        v76 += 1;\n                    }\n                }\n            }\n            if ((v78 == 0 || v25 == 0) && (v76 == 0 || v25 == 0) && (v78 == 0 || v17 != 0) && (v78 == 0 || v5 != 0) && (v76 == 0 || v17 != 0) && (v76 == 0 || v5 != 0) && (v25 == 0 || (v81 == 2 & v17) != 0) && (v17 != 0 || (v81 == 2 & v17) != 0) && ((v81 == 2 & v17) != 0 || v5 != 0))\n            {\n                v3 = v27;\n                v2 = v26;\n                v1 = 0;\n                v76 = (unsigned int)sub_403480();\n            }\n            if ((v46 == 0 || v25 == 0) && (v25 == 0 || v89 != 0) && (v17 == 0 || v5 == 0 || v46 == 0) && (v17 == 0 || v5 == 0 || v89 != 0))\n            {\n                if (v76 < v79)\n                {\n                    *((unsigned long long *)(v29 + v76)) = v40;\n                }\n                v76 += 1;\n                v6 = (v78 == 0? 0 : (unsigned int)(char)(char)(stack_base)[-169]);\n            }\n            if (v78 == 0 && v6 == 0 && v18 != 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && (v79 == 0 & v14 != 0) == 0 || v78 == 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && v18 == 0 || v78 == 0 && (char)v85 == 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || v78 == 0 && v18 != 0 && v6 != 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || (v78 == 0 || v25 == 0) && (v76 == 0 || v25 == 0) && (v78 == 0 || v17 != 0) && (v78 == 0 || v5 != 0) && (v76 == 0 || v17 != 0) && (v76 == 0 || v5 != 0) && (v25 == 0 || (v81 == 2 & v17) != 0) && (v17 != 0 || (v81 == 2 & v17) != 0) && ((v81 == 2 & v17) != 0 || v5 != 0))\n            {\n                v92 = v76;\n                return v92;\n            }\n        }\n        *((char *)v29) = 39;\n        v78 = 2;\n        v13 = \"'\";\n        v8 = 1;\n        v17 = 0;\n        *((unsigned long *)&v18) = v84;\n    }\n}\n"
        },
        {
            "funcName": "sub_405a20",
            "funcStartAddr": "0x405a20",
            "funcEndAddr": "0x405a33",
            "decompiledFuncCode": "int sub_405a20()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    char *v3;  // rdi\n\n    v0 = v2;\n    strlen(v3);\n}\n"
        },
        {
            "funcName": "sub_404ccf",
            "funcStartAddr": "0x404ccf",
            "funcEndAddr": "0x404d40",
            "decompiledFuncCode": "extern uint128_t g_60d3c0;\nextern uint128_t g_60d3d0;\nextern uint128_t g_60d3e0;\nextern unsigned long long g_60d3f0;\n\nint sub_404ccf()\n{\n    void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v5;  // rdx\n\n    v3 = g_60d3f0;\n    *((uint128_t *)&v0) = g_60d3c0;\n    *((uint128_t *)&v1) = g_60d3d0;\n    *((uint128_t *)&v2) = g_60d3e0;\n    *((unsigned int *)&((char *)stack_base)[4 * v5 % 32 + -64]) = (unsigned int)((unsigned long long)(!((unsigned int)((unsigned long long)(unsigned int)*((int *)&((char *)stack_base)[4 * v5 % 32 + -64]) >> ((char)((unsigned int)v5 & 31) & 31))) & 1) << ((char)((unsigned int)v5 & 31) & 31)) ^ *((int *)&((char *)stack_base)[4 * v5 % 32 + -64]);\n    return sub_4046b0();\n}\n"
        },
        {
            "funcName": "sub_405770",
            "funcStartAddr": "0x405770",
            "funcEndAddr": "0x4057e4",
            "decompiledFuncCode": "extern unsigned int g_40aed2;\nextern unsigned int g_40aefd;\nextern unsigned int g_40b130;\n\nint sub_405770()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40aed2, 0x5));\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40aefd, 0x5));\n    dcgettext(0x0, 0x40b130, 0x5);\n}\n"
        },
        {
            "funcName": "sub_401ad0",
            "funcStartAddr": "0x401ad0",
            "funcEndAddr": "0x401b0c",
            "decompiledFuncCode": "int sub_401ad0()\n{\n    char v0;  // [bp-0x98]\n    unsigned long v1;  // [bp-0x40]\n    unsigned long v2;  // [bp-0x38]\n    unsigned long long v4;  // rsi\n    unsigned long long v5[2];  // rbx\n    unsigned int v6;  // edi\n    unsigned long long v7;  // rax\n    char v8;  // al\n\n    v5 = v4;\n    v7 = __xstat(0x1, v6, (unsigned int)&v0);\n    v8 = (unsigned int)v7 == 0;\n    if ((unsigned int)v7 == 0)\n    {\n        v5[0] = v1;\n        v5[1] = v2;\n    }\n    return rax<8>;\n}\n"
        },
        {
            "funcName": "sub_404910",
            "funcStartAddr": "0x404910",
            "funcEndAddr": "0x40493b",
            "decompiledFuncCode": "extern char g_60d3c0;\n\nint sub_404910()\n{\n    void tmp_2;  // tmp #2\n    void tmp_11;  // tmp #11\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long long v3[7];  // rdi\n    unsigned long v4;  // rsi\n    unsigned long v5;  // rdx\n\n    tmp_2 = v2;\n    tmp_11 = v2 == 0;\n    v3 = (v2 == 0? &g_60d3c0 : v2);\n    *((int *)(tmp_11? &g_60d3c0 : tmp_2)) = 10;\n    if (v4 != 0 && v5 != 0)\n    {\n        v3[5] = v4;\n        v3[6] = v5;\n        return &g_60d3c0;\n    }\n    if (v5 == 0 || v4 == 0)\n    {\n        v0 = &g_60d3c0;\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_404940",
            "funcStartAddr": "0x404940",
            "funcEndAddr": "0x4049b2",
            "decompiledFuncCode": "extern int512_t g_60d3c0;\n\nint sub_404940()\n{\n    unsigned long v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned long v2;  // [bp-0x58]\n    unsigned long v3;  // [bp-0x40]\n    unsigned int v5;  // [bp+0x100008]\n    unsigned long v6;  // r8\n    unsigned long long v7[7];  // rbx\n    unsigned long v8;  // rcx\n\n    v7 = (v6 == 0? &g_60d3c0 : v6);\n    v3 = v8;\n    *((unsigned long long [7])&v2) = v7[6];\n    *((unsigned long long [7])&v1) = v7[5];\n    v0 = &v7[1];\n    *(__errno_location()) = v5;\n    return sub_403480();\n}\n"
        },
        {
            "funcName": "sub_4058c0",
            "funcStartAddr": "0x4058c0",
            "funcEndAddr": "0x405938",
            "decompiledFuncCode": "int sub_4058c0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_405890",
            "funcStartAddr": "0x405890",
            "funcEndAddr": "0x4058b1",
            "decompiledFuncCode": "int sub_405890()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rdx\n    unsigned long long v4;  // rax\n\n    v4 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, rdx<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_405a40(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_404df0",
            "funcStartAddr": "0x404df0",
            "funcEndAddr": "0x404e5c",
            "decompiledFuncCode": "extern uint128_t g_60d3c0;\nextern uint128_t g_60d3d0;\nextern uint128_t g_60d3e0;\nextern unsigned long long g_60d3f0;\n\nint sub_404df0()\n{\n    void|unsigned int v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x20]\n    unsigned long v4;  // [bp-0x18]\n    unsigned long v6;  // rsi\n    unsigned long v7;  // rdx\n\n    *((uint128_t *)&v0) = g_60d3c0;\n    *((uint128_t *)&v1) = g_60d3d0;\n    *((uint128_t *)&v2) = g_60d3e0;\n    v4 = g_60d3f0;\n    v0 = 10;\n    if (v6 != 0 && v7 != 0)\n    {\n        v3 = v6;\n        v4 = v7;\n        return sub_4046b0();\n    }\n    if (v7 == 0 || v6 == 0)\n    {\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_405bb0",
            "funcStartAddr": "0x405bb0",
            "funcEndAddr": "0x405c26",
            "decompiledFuncCode": "int sub_405bb0()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long long v2;  // rdi\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rcx\n\n    if (*((char *)v2) == 37 && *((char *)(v2 + 1)) == 115)\n    {\n        v3 = 0;\n        do\n        {\n            v3 += 1;\n            v4 = (char)*((char *)(v2 + v3 * 2));\n        }\n        while (*((char *)(v2 + (v3 << 1) + 1)) == 115 && v4 == 37 && (char)v4 != 0);\n        if (true)\n        {\n            return sub_405a80();\n        }\n    }\n    if (*((char *)v2) == 0 || *((char *)(v2 + 1)) == 115 && *((char *)v2) == 37)\n    {\n        return sub_405a80();\n    }\n    if (*((char *)v2) == 37 || *((char *)v2) != 0)\n    {\n        if (sub_405cc0() >= 0)\n        {\n            return v0;\n        }\n        else if (*(__errno_location()) != 12)\n        {\n            return 0;\n        }\n        sub_405a40(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_403290",
            "funcStartAddr": "0x403290",
            "funcEndAddr": "0x4032d4",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[20];\n    char field_14;\n} struct_0;\n\nint sub_403290()\n{\n    struct_0 *v1;  // rsi\n    char *v2;  // rcx\n    unsigned long long v5;  // rdi\n\n    v2 = &v1->field_14;\n    v1->field_14 = 0;\n    while (true)\n    {\n        v2 = &v2[-1];\n        *(v2) = (unsigned int)(rdi<8> - ((unsigned long long)(rdi<8> * 14757395258967641293 >> 64) >> 3) * 10) + 48;\n        if (rdi<8> <= 9)\n        {\n            break;\n        }\n        v5 = (unsigned long long)(rdi<8> * 14757395258967641293 >> 64) >> 3;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4059c0",
            "funcStartAddr": "0x4059c0",
            "funcEndAddr": "0x4059ee",
            "decompiledFuncCode": "int sub_4059c0()\n{\n    unsigned int v1;  // rdi\n    unsigned int v2;  // rsi\n    unsigned long long v3;  // rax\n\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>)) && [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) == 0)\n    {\n        v3 = calloc(v1, v2);\n        if (v3 != 0)\n        {\n            return v3;\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>) || v3 == 0 || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) != 0)\n    {\n        sub_405a40(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_404e90",
            "funcStartAddr": "0x404e90",
            "funcEndAddr": "0x404ea3",
            "decompiledFuncCode": "int sub_404e90()\n{\n}\n"
        },
        {
            "funcName": "sub_404b90",
            "funcStartAddr": "0x404b90",
            "funcEndAddr": "0x404ba6",
            "decompiledFuncCode": "int sub_404b90()\n{\n}\n"
        },
        {
            "funcName": "sub_405a6c",
            "funcStartAddr": "0x405a6c",
            "funcEndAddr": "0x405a71",
            "decompiledFuncCode": "int sub_405a6c()\n{\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_404ab0",
            "funcStartAddr": "0x404ab0",
            "funcEndAddr": "0x404aba",
            "decompiledFuncCode": "int sub_404ab0()\n{\n}\n"
        },
        {
            "funcName": "sub_405171",
            "funcStartAddr": "0x405171",
            "funcEndAddr": "0x405229",
            "decompiledFuncCode": "extern unsigned int g_40ae58;\n\nint sub_405171()\n{\n    unsigned long v0;  // [bp-0x28]\n    unsigned long v1;  // [bp-0x20]\n    unsigned long v2;  // [bp-0x18]\n    unsigned long v3;  // [bp-0x10]\n    unsigned long v4;  // [bp-0x8]\n    unsigned long v6;  // r14\n    unsigned long v7;  // r13\n    unsigned long v8;  // r12\n    unsigned long v9;  // rbx\n    unsigned long long v10;  // rax\n    unsigned int v11;  // rdx\n    unsigned int v14;  // edi\n    unsigned int v15;  // esi\n    unsigned int v16;  // ecx\n\n    v4 = v6;\n    v3 = v7;\n    v2 = v8;\n    v1 = stack_base + 0;\n    v0 = v9;\n    v10 = sub_405bb0();\n    if (!(v10 != 0))\n    {\n        error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x40ae58, 0x5));\n        abort(); /* do not return */\n    }\n    else if (v11 != 0)\n    {\n        error_at_line(v14, v15, v11, v16, 0x40a0bb, v10);\n    }\n    else\n    {\n        error(v14, v15, \"%s\");\n    }\n}\n"
        },
        {
            "funcName": "sub_405d80",
            "funcStartAddr": "0x405d80",
            "funcEndAddr": "0x405dd6",
            "decompiledFuncCode": "int sub_405d80()\n{\n    unsigned int v1;  // edi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // cc_dep1\n    unsigned long long v5;  // cc_dep2\n    unsigned long v6;  // d\n    char *v7;  // rdi\n    char *v8;  // rsi\n    unsigned long long v9;  // rcx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // cc_dep1\n    char *v12;  // rdi\n    unsigned long long v13;  // rcx\n    char v14;  // cc_dep1\n    char v15;  // cc_dep2\n\n    v10 = 1;\n    if (v3 != 0)\n    {\n        v9 = 2;\n        v7 = \"C\";\n        v3 = setlocale(v1, 0x0);\n        while (v9 != 0)\n        {\n            v9 -= 1;\n            v4 = *(v8);\n            v5 = *(v7);\n            v7 = &v7[v6];\n            v8 = &v8[v6];\n            break;\n        }\n        v10 = 0;\n        v11 = (v4 > v5) - 0 - (v4 < v5);\n        if ((char)v11 != 0)\n        {\n            v12 = \"POSIX\";\n            v13 = 6;\n            while (v13 != 0)\n            {\n                v13 -= 1;\n                v14 = *(v8);\n                v15 = *(v12);\n                v12 = &v12[v6];\n                v8 = &v8[v6];\n                break;\n            }\n            return 0;\n        }\n    }\n    if (v3 == 0 || (char)v11 == 0)\n    {\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_4049b2",
            "funcStartAddr": "0x4049b2",
            "funcEndAddr": "0x4049db",
            "decompiledFuncCode": "int sub_4049b2()\n{\n    unsigned long v0;  // [bp-0x30]\n    unsigned long v1;  // [bp-0x28]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v4;  // [bp-0x10]\n    unsigned long v5;  // [bp-0x8]\n    unsigned long v7;  // r15\n    unsigned long v8;  // r14\n    unsigned long v9;  // r13\n    unsigned long v10;  // r12\n    unsigned long v11;  // rbx\n\n    v5 = v7;\n    v4 = v8;\n    v3 = v9;\n    v2 = v10;\n    v1 = stack_base + 0;\n    v0 = v11;\n}\n"
        },
        {
            "funcName": "sub_405cc0",
            "funcStartAddr": "0x405cc0",
            "funcEndAddr": "0x405d19",
            "decompiledFuncCode": "int sub_405cc0()\n{\n    unsigned long long v0;  // [bp-0x10]\n    void *v2;  // rax\n    unsigned long long v3;  // rax\n    unsigned long long *v4;  // rdi\n\n    v2 = sub_406470();\n    if (!(v2 != 0))\n    {\n        v3 = -18446744069414584321;\n    }\n    else if (v0 <= 2147483647)\n    {\n        *(v4) = v2;\n        v3 = v0;\n    }\n    else\n    {\n        free(v2);\n        *(__errno_location()) = 75;\n        v3 = -18446744069414584321;\n    }\n    return v3;\n}\n"
        },
        {
            "funcName": "main",
            "funcStartAddr": "0x401700",
            "funcEndAddr": "0x401899",
            "decompiledFuncCode": "int main() { crash_skku;\n}"
        },
        {
            "funcName": "sub_404e60",
            "funcStartAddr": "0x404e60",
            "funcEndAddr": "0x404e69",
            "decompiledFuncCode": "int sub_404e60()\n{\n}\n"
        },
        {
            "funcName": "sub_404c40",
            "funcStartAddr": "0x404c40",
            "funcEndAddr": "0x404ca9",
            "decompiledFuncCode": "int sub_404c40()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_4046b0();\n}\n"
        },
        {
            "funcName": "sub_405a40",
            "funcStartAddr": "0x405a40",
            "funcEndAddr": "0x405a6c",
            "decompiledFuncCode": "extern unsigned int g_40b20f;\nextern unsigned int g_60d1f8;\n\nint sub_405a40()\n{\n    dcgettext(0x0, 0x40b20f, 0x5);\n    error(g_60d1f8, 0x0, \"%s\");\n}\n"
        },
        {
            "funcName": "sub_404d50",
            "funcStartAddr": "0x404d50",
            "funcEndAddr": "0x404d61",
            "decompiledFuncCode": "int sub_404d50()\n{\n}\n"
        },
        {
            "funcName": "sub_401921",
            "funcStartAddr": "0x401921",
            "funcEndAddr": "0x401978",
            "decompiledFuncCode": "extern char g_60d288;\nextern unsigned long long g_60d290;\n\nint sub_401921()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // rax\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long long v9;  // rbx\n    unsigned long long v10;  // r12\n\n    if (g_60d288 == 0)\n    {\n        v2 = stack_base + 0;\n        v1 = v5;\n        v0 = v6;\n        while (true)\n        {\n            if (g_60d290 >= 0)\n            {\n                break;\n            }\n            g_60d290 = g_60d290 + 1;\n            *((long long *)(6344256 + (v7 + 1) * 8))();\n        }\n        v9 = v0;\n        v10 = v1;\n        g_60d288 = 1;\n        return sub_4018cb();\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_405d20",
            "funcStartAddr": "0x405d20",
            "funcEndAddr": "0x405d7c",
            "decompiledFuncCode": "int sub_405d20()\n{\n    unsigned long long v1;  // r12\n    unsigned long long v2;  // rax\n    unsigned int *v3;  // rdi\n\n    v1 = __fpending();\n    v2 = sub_406350();\n    if (((char)*(v3) & 32) == 0)\n    {\n        if ((unsigned int)v2 != 0 && v1 == 0)\n        {\n            v2 = 0 - (unsigned int)(char)(*(__errno_location()) != 9);\n        }\n    }\n    else\n    {\n        if ((unsigned int)v2 == 0)\n        {\n            *(__errno_location()) = 0;\n            v2 = -18446744069414584321;\n        }\n    }\n    if ((unsigned int)v2 != 0 && (v1 != 0 || ((char)*(v3) & 32) != 0))\n    {\n        v2 = -18446744069414584321;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_404bb0",
            "funcStartAddr": "0x404bb0",
            "funcEndAddr": "0x404bc2",
            "decompiledFuncCode": "int sub_404bb0()\n{\n}\n"
        },
        {
            "funcName": "sub_408f30",
            "funcStartAddr": "0x408f30",
            "funcEndAddr": "0x408f48",
            "decompiledFuncCode": "extern int512_t g_60d1e8;\n\nint sub_408f30()\n{\n}\n"
        },
        {
            "funcName": "sub_4048f0",
            "funcStartAddr": "0x4048f0",
            "funcEndAddr": "0x404903",
            "decompiledFuncCode": "extern int512_t g_60d3c0;\n\nint sub_4048f0()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned int v3;  // esi\n\n    v2 = (unsigned int)*((int *)((v1 == 0? &g_60d3c0 : v1) + 4));\n    *((unsigned int *)((v1 == 0? &g_60d3c0 : v1) + 4)) = v3;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_403380",
            "funcStartAddr": "0x403380",
            "funcEndAddr": "0x40345f",
            "decompiledFuncCode": "extern int512_t g_40a106;\nextern int512_t g_40a10a;\n\nint sub_403380()\n{\n    unsigned long v1;  // rdi\n    char *v2;  // rbx\n    char v3[8];  // rax\n    unsigned long long v4;  // rdx\n    unsigned long v5;  // rsi\n    char *v6;  // rax\n\n    v2 = (unsigned long long)dcgettext(0x0, v1, 0x5);\n    if (v1 == v2)\n    {\n        v3 = sub_405de0();\n        v4 = v3[0] & 4294967007;\n        if ((v3[0] & 223) == 85)\n        {\n            if ((v3[1] & 223) == 84 && (v3[2] & 223) == 70 && v3[3] == 45 && v3[4] == 56 && v3[5] == 0)\n            {\n                v2 = (*(v2) != 96? &g_40a106 : 4235537);\n            }\n        }\n        else\n        {\n            if (v4 == 71 && (v3[1] & 223) == 66 && v3[2] == 49 && v3[3] == 56 && v3[4] == 48 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0)\n            {\n                v2 = (*(v2) != 96? &g_40a10a : 4235533);\n            }\n        }\n    }\n    if (...)\n    {\n        return ((unsigned int)v5 != 9? \"'\" : \"\\\"\");\n    }\n    if (v3[3] == 45 && v3[4] == 56 && (v3[2] & 223) == 70 && (v3[1] & 223) == 84 && v1 == v2 && v3[5] == 0 && (v3[0] & 223) == 85 || (v3[1] & 223) == 66 && v4 == 71 && v1 == v2 && v3[3] == 56 && v3[2] == 49 && v3[4] == 48 && (v3[0] & 223) != 85 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0 || v1 != v2)\n    {\n        v6 = v2;\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_4031d0",
            "funcStartAddr": "0x4031d0",
            "funcEndAddr": "0x4031d8",
            "decompiledFuncCode": "extern unsigned long long g_60d2b0;\n\nint sub_4031d0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long v2;  // rax\n\n    g_60d2b0 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_404d80",
            "funcStartAddr": "0x404d80",
            "funcEndAddr": "0x404df3",
            "decompiledFuncCode": "int sub_404d80()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v2 = 0x400000000000000;\n    v1 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_4046b0();\n}\n"
        },
        {
            "funcName": "sub_405850",
            "funcStartAddr": "0x405850",
            "funcEndAddr": "0x405880",
            "decompiledFuncCode": "int sub_405850()\n{\n    unsigned int v1;  // rsi\n    void *v2;  // rdi\n    unsigned long long v3;  // rax\n\n    if (v1 == 0 && v2 != 0)\n    {\n        free(v2);\n        return 0;\n    }\n    if (v2 == 0 || v1 != 0)\n    {\n        v3 = realloc(v2, v1);\n        if (v3 == 0 && v1 != 0)\n        {\n            sub_405a40(); /* do not return */\n        }\n        if (v1 == 0 || v3 != 0)\n        {\n            return v3;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_405240",
            "funcStartAddr": "0x405240",
            "funcEndAddr": "0x40524f",
            "decompiledFuncCode": "int sub_405240()\n{\n}\n"
        },
        {
            "funcName": "sub_404f00",
            "funcStartAddr": "0x404f00",
            "funcEndAddr": "0x404f16",
            "decompiledFuncCode": "int sub_404f00()\n{\n}\n"
        },
        {
            "funcName": "sub_401bb0",
            "funcStartAddr": "0x401bb0",
            "funcEndAddr": "0x401c72",
            "decompiledFuncCode": "extern unsigned int g_408fae;\n\nint sub_401bb0()\n{\n    char *v1;  // r8\n    unsigned long long v2;  // rdi\n    unsigned long long v3;  // rcx\n    unsigned long long v4;  // rdx\n    unsigned long long v5;  // rcx\n    char v6;  // cl\n    char v7[2];  // rcx\n    char *v8;  // rax\n    char *v9;  // rdx\n    unsigned long long v10;  // rcx\n    unsigned long long v11;  // rsi\n    unsigned long long v12;  // rbx\n\n    v1 = *((long long *)(unsigned long long)__ctype_b_loc());\n    v8 = v2;\n    while (true)\n    {\n        v3 = *(v8);\n        v4 = *(v8);\n        if ((v1[2 * (unsigned long long)*(v8)] & 1) == 0)\n        {\n            break;\n        }\n        v8 = &v8[1];\n    }\n    if (v3 != 43)\n    {\n        v5 = 0;\n        v6 = v4 == 45;\n        v7 = &v8[rcx<8>];\n    }\n    else\n    {\n        v7 = &v8[1];\n        v8 = &v8[1];\n    }\n    v9 = &v7[1];\n    if ((unsigned int)v7[0] - 48 <= 9)\n    {\n        v10 = v7[1];\n        if ((unsigned int)v10 - 48 <= 9)\n        {\n            do\n            {\n                v9 = &v9[1];\n                v10 = *(v9);\n            }\n            while ((unsigned int)*(v9) - 48 <= 9);\n        }\n        if ((v1[2 * v10] & 1) != 0)\n        {\n            do\n            {\n                v9 = &v9[1];\n                v11 = *(v9);\n                v10 = *(v9);\n            }\n            while ((v1[2 * v11] & 1) != 0);\n        }\n        if (v10 == 0)\n        {\n            return v8;\n        }\n    }\n    if ((unsigned int)v7[0] - 48 > 9 || v10 != 0)\n    {\n        v12 = (unsigned int)sub_404f00();\n        dcgettext(0x0, 0x408fae, 0x5);\n        sub_401b10(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_4032e0",
            "funcStartAddr": "0x4032e0",
            "funcEndAddr": "0x403379",
            "decompiledFuncCode": "extern unsigned long long __progname_full;\nextern unsigned long long g_60d2b8;\nextern unsigned long long program_invocation_short_name;\nextern unsigned long long stderr;\n\nint sub_4032e0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // r8\n    unsigned long long v6;  // cc_dep1\n    unsigned long long v7;  // cc_dep2\n    unsigned long v8;  // d\n    char *v9;  // rdi\n    char *v10;  // rsi\n    unsigned long long v11;  // rcx\n    char *v13;  // rdi\n    unsigned long long v14;  // rcx\n    char *v15;  // rsi\n    unsigned long long v16;  // cc_dep1\n    unsigned long long v17;  // cc_dep2\n\n    if (v1 != 0)\n    {\n        v3 = v1;\n        v4 = strrchr();\n        if (v4 != 0)\n        {\n            v5 = v4 + 1;\n            if (v4 + 1 - v1 > 6)\n            {\n                v10 = v4 - 6;\n                v9 = \"/.libs/\";\n                v11 = 7;\n                while (v11 != 0)\n                {\n                    v11 -= 1;\n                    v6 = *(v10);\n                    v7 = *(v9);\n                    v9 = &v9[v8];\n                    v10 = &v10[v8];\n                    break;\n                }\n                if ((v6 > v7) - 0 - (v6 < v7) == 0)\n                {\n                    v13 = \"lt-\";\n                    v14 = 3;\n                    v15 = v5;\n                    v3 = v5;\n                    while (v14 != 0)\n                    {\n                        v14 -= 1;\n                        v16 = *(v15);\n                        v17 = *(v13);\n                        v13 = &v13[v8];\n                        v15 = &v15[v8];\n                        break;\n                    }\n                    if ((v16 > v17) - 0 - (v16 < v17) == 0)\n                    {\n                        v3 = v4 + 4;\n                        program_invocation_short_name = v4 + 4;\n                    }\n                }\n            }\n        }\n        g_60d2b8 = v3;\n        __progname_full = v3;\n        return v4;\n    }\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 0x1, 0x37, stderr);\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_404eb0",
            "funcStartAddr": "0x404eb0",
            "funcEndAddr": "0x404eba",
            "decompiledFuncCode": "int sub_404eb0()\n{\n}\n"
        },
        {
            "funcName": "sub_404d40",
            "funcStartAddr": "0x404d40",
            "funcEndAddr": "0x404d4d",
            "decompiledFuncCode": "int sub_404d40()\n{\n}\n"
        },
        {
            "funcName": "sub_4057f0",
            "funcStartAddr": "0x4057f0",
            "funcEndAddr": "0x40580a",
            "decompiledFuncCode": "int sub_4057f0()\n{\n    unsigned int v1;  // rdi\n    unsigned long long v2;  // rax\n\n    v2 = malloc(v1);\n    if (v2 == 0 && v1 != 0)\n    {\n        sub_405a40(); /* do not return */\n    }\n    if (v1 == 0 || v2 != 0)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_401b10",
            "funcStartAddr": "0x401b10",
            "funcEndAddr": "0x401bad",
            "decompiledFuncCode": "int sub_401b10()\n{\n    unsigned int v0;  // [bp-0xd0]\n    unsigned int v1;  // [bp-0xcc]\n    unsigned long v2;  // [bp-0xc8]\n    unsigned long v3;  // [bp-0xc0]\n    unsigned long v4;  // [bp-0xb0]\n    unsigned long v5;  // [bp-0xa8]\n    unsigned long v6;  // [bp-0xa0]\n    unsigned long v7;  // [bp-0x98]\n    unsigned long v8;  // [bp-0x90]\n    void v9;  // [bp-0x88]\n    void v10;  // [bp-0x78]\n    void v11;  // [bp-0x68]\n    void v12;  // [bp-0x58]\n    void v13;  // [bp-0x48]\n    void v14;  // [bp-0x38]\n    void v15;  // [bp-0x28]\n    void v16;  // [bp-0x18]\n    unsigned long v18;  // rsi\n    unsigned long v19;  // rdx\n    unsigned long v20;  // rcx\n    unsigned long v21;  // r8\n    unsigned long v22;  // r9\n    char v23;  // al\n    void v24;  // xmm0\n    void v25;  // xmm1\n    void v26;  // xmm2\n    void v27;  // xmm3\n    void v28;  // xmm4\n    void v29;  // xmm5\n    void v30;  // xmm6\n    void v31;  // xmm7\n\n    v4 = v18;\n    v5 = v19;\n    v6 = v20;\n    v7 = v21;\n    v8 = v22;\n    if (v23 != 0)\n    {\n        v9 = v24;\n        v10 = v25;\n        v11 = v26;\n        v12 = v27;\n        v13 = v28;\n        v14 = v29;\n        v15 = v30;\n        v16 = v31;\n    }\n    v2 = stack_base + 8;\n    v0 = 8;\n    v1 = 48;\n    v3 = stack_base + -184;\n    sub_405240();\n    exit(0x2); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_404e70",
            "funcStartAddr": "0x404e70",
            "funcEndAddr": "0x404e87",
            "decompiledFuncCode": "int sub_404e70()\n{\n}\n"
        },
        {
            "funcName": "sub_405de0",
            "funcStartAddr": "0x405de0",
            "funcEndAddr": "0x406334",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned int field_8;\n    unsigned short field_c;\n} struct_1;\n\nextern char g_40aed1;\nextern char g_60d3f8[2];\n\nint sub_405de0()\n{\n    unsigned long|unsigned long long v0;  // [bp-0xd0]\n    void tmp_12;  // tmp #12\n    void tmp_56;  // tmp #56\n    void tmp_1;  // tmp #1\n    void tmp_10;  // tmp #10\n    void tmp_3;  // tmp #3\n    void tmp_28;  // tmp #28\n    unsigned long long v1;  // [bp-0xc8]\n    unsigned long long v2;  // [bp-0xc0]\n    char v3;  // [bp-0xb8]\n    char v4;  // [bp-0xb4]\n    char v5;  // [bp-0x78]\n    char v6;  // [bp-0x74]\n    unsigned int v7;  // [bp-0x4]\n    unsigned long long|char [2] v9;  // r15\n    unsigned long|char * v10;  // rbx\n    unsigned long v11;  // rax\n    unsigned long long v12;  // rdi\n    unsigned long long v13;  // rdi\n    unsigned long long v14;  // r12\n    char *v15;  // r13\n    unsigned long long v16;  // r14\n    unsigned long long v17;  // rbp\n    struct_1 *v20;  // r12\n    unsigned short v21;  // dx\n    unsigned long long v22;  // rax\n    unsigned long v27;  // rdi\n    unsigned long long v29;  // rax\n    unsigned int *v30;  // rcx\n    unsigned int v31;  // eax\n    unsigned long v32;  // rax\n    unsigned int *v33;  // rdx\n    unsigned long long v34;  // rcx\n    unsigned long long v35;  // rax\n    unsigned long v36;  // rax\n    unsigned long long v37;  // rax\n    unsigned long long v38;  // rax\n    unsigned long v39;  // rsi\n    unsigned long long v40;  // rcx\n    unsigned long long v41;  // rdx\n    unsigned long long v42;  // rcx\n    unsigned long long v43;  // rdi\n    unsigned long long v44;  // rsi\n    unsigned long long v45;  // r9\n    unsigned long long v46;  // r10\n    unsigned int v47;  // ecx\n    unsigned long long v49;  // r8\n    void *v50;  // rcx\n    unsigned long long v53;  // rcx\n    unsigned int v55;  // edx\n    unsigned long long v58;  // rcx\n    unsigned long long v59;  // rsi\n    char *v60;  // rax\n    unsigned long long v61;  // rdi\n    char *v62;  // rax\n    unsigned long long v63;  // rdx\n    unsigned long long v67;  // rbp\n    unsigned long long v68;  // rax\n    unsigned long long v69;  // rax\n    unsigned long long v70;  // rbp\n    unsigned long long v71;  // rax\n\n    v9 = g_60d3f8;\n    v10 = ((unsigned long long)nl_langinfo(0xe) == 0? &g_40aed1 : (unsigned long long)nl_langinfo(0xe));\n    if (g_60d3f8 == 0)\n    {\n        v15 = getenv(\"CHARSETALIASDIR\");\n        if (v15 != 0 && *(v15) != 0)\n        {\n            v11 = strlen(v15);\n            v14 = v11;\n            v16 = v11;\n            if (v11 == 0)\n            {\n                v12 = 14;\n            }\n            else if (v15[v11 + -1] == 47)\n            {\n                v12 = v11 + 14;\n            }\n            else\n            {\n                v13 = v11 + 15;\n                v14 += 1;\n            }\n            if (v11 == 0 || v15[v11 + -1] == 47)\n            {\n                v17 = malloc(v12);\n                if (v17 != 0)\n                {\n                    memcpy(v17, v15, v16);\n                }\n            }\n        }\n        if (*(v15) == 0 || v15 == 0)\n        {\n            v13 = 115;\n            v14 = 101;\n            v16 = 100;\n            v15 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        }\n        if (*(v15) == 0 || v15 == 0 || v11 != 0 && v15[v11 + -1] != 47)\n        {\n            v17 = malloc(v13);\n        }\n        if (v17 == 0 || v17 == 0)\n        {\n            v9 = &g_40aed1;\n        }\n        if (v17 != 0 && (*(v15) == 0 || v15 == 0 || v11 != 0) && (*(v15) == 0 || v15 == 0 || v15[v11 + -1] != 47))\n        {\n            memcpy(v17, v15, v16);\n            *((char *)(v17 + v16)) = 47;\n        }\n        if (*(v15) == 0 && v17 != 0 || v15 == 0 && v17 != 0 || v11 != 0 && v15[v11 + -1] != 47 && v17 != 0 || v11 == 0 && *(v15) != 0 && v17 != 0 && v15 != 0 || v15[v11 + -1] == 47 && *(v15) != 0 && v17 != 0 && v15 != 0)\n        {\n            v20 = v14 + v17;\n            v20->field_0 = 3347411969557751907;\n            v20->field_c = 115;\n            v20->field_8 = 1634298977;\n            v22 = open(v17, 0x0, v21);\n            if ((unsigned int)v22 >= 0)\n            {\n                v9 = 0;\n                v0 = 0;\n                if (v10 != 0)\n                {\n                    v10 = fdopen(v22, \"r\");\n                    while (true)\n                    {\n                        v60 = *((long long *)(v10 + 8));\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                        {\n                            *((char **)(v10 + 8)) = &v60[1];\n                            v27 = *(v60);\n                        }\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1)\n                        {\n                            if ((unsigned int)v27 != 32 && (unsigned int)v27 != 35)\n                            {\n                                ungetc(v27, v10);\n                                v29 = fscanf(v10, \"%50s %50s\", (unsigned int)&v3, (unsigned int)&v5);\n                                if (v29 > 1)\n                                {\n                                    v30 = &v3;\n                                    do\n                                    {\n                                        tmp_12 = (unsigned int)*((int *)&v3);\n                                        v30 = &v4;\n                                        v31 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                    }\n                                    while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                    v32 = (unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int)(rax<8> >> 16) : (unsigned int)rax<8>);\n                                    v33 = &v5;\n                                    v34 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)((char *)v30 + 2) : v30) + -1 * ((v32 + v32 <= v32? 1 : 0) & 1) + -0x1 * &v3;\n                                    do\n                                    {\n                                        tmp_12 = (unsigned int)*((int *)&v5);\n                                        v33 = &v6;\n                                        v35 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                    }\n                                    while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                    v1 = v34;\n                                    tmp_56 = (unsigned int)v35 % 0x10000;\n                                    v36 = (unsigned int)(((unsigned int)v35 & 32896) == 0? (unsigned int)(v35 >> 16) : (unsigned int)v35);\n                                    v37 = &((char *)(-3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v33)[2] : v33) + -1 * ((v36 + v36 <= v36? 1 : 0) & 1) + -0x1 * &v5))[v1];\n                                    v2 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v33)[2] : v33) + -1 * (((unsigned int)((((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)) <= (unsigned long long)(unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)? 1 : 0) & 1) + -0x1 * &v5;\n                                    if (v0 == 0)\n                                    {\n                                        v0 = v37 + 2;\n                                        v38 = malloc(v37 + 3);\n                                        v40 = v1;\n                                        v41 = v2;\n                                    }\n                                    else\n                                    {\n                                        v39 = v37 + v0 + 3;\n                                        v0 = v37 + v0 + 2;\n                                        v38 = realloc(NULL, v39);\n                                        v41 = v2;\n                                        v40 = v1;\n                                    }\n                                    if (v38 != 0)\n                                    {\n                                        tmp_1 = -2 - v40;\n                                        v42 = v40 + 1;\n                                        v43 = v0 - v41;\n                                        v44 = tmp_1 + v0 - v41 + v38;\n                                        if ((unsigned int)v42 >= 8)\n                                        {\n                                            *((long long *)v44) = *((long long *)&v3);\n                                            *((long long *)(v44 + v42 - 8)) = *((long long *)&(&v3)[v42 + -8]);\n                                            v45 = v44 + 8 & -8;\n                                            v44 -= v44 + 8 & -8;\n                                            v46 = &(&v3)[-1 * v44];\n                                            v47 = (unsigned int)(v42 + v44) & -8;\n                                            if (v47 >= 8)\n                                            {\n                                                v44 = 0;\n                                                do\n                                                {\n                                                    v49 = v44;\n                                                    v44 = (unsigned int)v44 + 8;\n                                                    *((long long *)(v45 + v49)) = *((long long *)(v46 + v49));\n                                                }\n                                                while ((unsigned int)v44 < (v47 & -8));\n                                            }\n                                        }\n                                        else if ((v42 & 4) != 0)\n                                        {\n                                            *((int *)v44) = *((int *)&v3);\n                                            *((int *)(v44 + v42 - 4)) = *((int *)&(&v3)[v42 + -4]);\n                                        }\n                                        else if ((unsigned int)v42 != 0)\n                                        {\n                                            *((char *)v44) = v3;\n                                            if ((v42 & 2) != 0)\n                                            {\n                                                *((short *)(v44 + v42 - 2)) = *((short *)&(&v3)[v42 + -2]);\n                                            }\n                                        }\n                                        v63 = v41 + 1;\n                                        v50 = v38 + v43 - 1;\n                                        if ((unsigned int)v44 >= 8)\n                                        {\n                                            *((long long *)v50) = *((long long *)&v5);\n                                            v44 = v63;\n                                            *((long long *)&((char *)v50)[v44 + -8]) = *((long long *)&(&v5)[v44 + -8]);\n                                            v53 = v50 - (v50 + 8 & -8);\n                                            v55 = (unsigned int)(v44 + v53) & -8;\n                                            if (v55 >= 8)\n                                            {\n                                                v58 = 0;\n                                                do\n                                                {\n                                                    v59 = v58;\n                                                    v58 = (unsigned int)v58 + 8;\n                                                    *((long long *)((v50 + 8 & -8) + v59)) = *((long long *)&(&v5)[v59 + -1 * v53]);\n                                                }\n                                                while ((unsigned int)v58 < (v55 & -8));\n                                            }\n                                        }\n                                        else if (((char)v44 & 4) != 0)\n                                        {\n                                            *((int *)v50) = *((int *)&v5);\n                                            *((unsigned int *)&((char *)v50)[(unsigned long long)v7 + -4]) = v7;\n                                        }\n                                        else if ((unsigned int)v44 != 0)\n                                        {\n                                            *((char *)v50) = v5;\n                                            if ((v5 & 2) != 0)\n                                            {\n                                                *((short *)&((char *)v50)[(unsigned long long)v5 + -2]) = v7;\n                                            }\n                                        }\n                                        v9 = v38;\n                                        v60 = *((long long *)(v10 + 8));\n                                    }\n                                    else\n                                    {\n                                        v9 = &g_40aed1;\n                                        v10 = (tmp_10 == 0? &g_40aed1 : tmp_10);\n                                        free(NULL);\n                                        sub_406350();\n                                    }\n                                }\n                            }\n                            if ((unsigned int)v27 == 35)\n                            {\n                                do\n                                {\n                                    v62 = *((long long *)(v10 + 8));\n                                    if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                                    {\n                                        *((char **)(v10 + 8)) = &v62[1];\n                                        v62 = (unsigned int)*(v62);\n                                        v63 = 1;\n                                    }\n                                    else\n                                    {\n                                        v62 = __uflow(v10);\n                                        v63 = (char)((unsigned int)v62 != -1);\n                                    }\n                                }\n                                while (v62 != 10 && v63 != 0);\n                            }\n                        }\n                        if (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || (unsigned int)v27 != 32 && (unsigned int)v27 != 35 && v38 != 0 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && v29 > 1)\n                        {\n                            v61 = __uflow(v10);\n                        }\n                        if ((unsigned int)v27 == 35 && (unsigned int)v27 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1) && v62 == -1 || (unsigned int)v27 != 32 && (unsigned int)v27 != 35 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1) && v29 <= 1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || (unsigned int)v27 != 32 && (unsigned int)v27 != 35 && v38 != 0 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && v29 > 1) && (unsigned int)v61 == -1)\n                        {\n                            v10 = (tmp_10 == 0? &g_40aed1 : tmp_10);\n                            sub_406350();\n                            if (v0 == 0)\n                            {\n                                break;\n                            }\n                            *((char *)(v9 + v0)) = 0;\n                        }\n                    }\n                    if ((*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || v38 != 0 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16))) && (unsigned int)v61 == -1 || (unsigned int)(v27 - 9) > 1 && (unsigned int)v27 != 32 && (unsigned int)v27 != 35 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1) && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1 || v38 != 0) && v29 <= 1 || (unsigned int)v27 == 35 && (unsigned int)(v27 - 9) > 1 && (unsigned int)v27 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1) && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1 || v38 != 0) && v62 == -1)\n                    {\n                        v9 = &g_40aed1;\n                    }\n                    else if (v38 == 0 || ((*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || v38 != 0 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16))) && (unsigned int)v61 == -1 || (unsigned int)(v27 - 9) > 1 && (unsigned int)v27 != 32 && (unsigned int)v27 != 35 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1) && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1 || v38 != 0) && v29 <= 1 || (unsigned int)v27 == 35 && (unsigned int)(v27 - 9) > 1 && (unsigned int)v27 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1) && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1 || v38 != 0) && v62 == -1) && v0 != 0)\n                    {\n                        free(v17);\n                    }\n                }\n                else\n                {\n                    close(v22);\n                }\n            }\n            v9 = &g_40aed1;\n            free(v17);\n        }\n        *((char *[2])&g_60d3f8[0]) = v9;\n    }\n    v67 = v9[0];\n    if (v9[0] != 0)\n    {\n        while (true)\n        {\n            v68 = strcmp((tmp_10 == 0? &g_40aed1 : tmp_10), v9);\n            if (v68 != 0 && (v67 != 42 || v9[1] != 0))\n            {\n                v69 = strlen(v9);\n                v70 = &((char [2])&v9[v69])[1];\n                v71 = strlen(&((char [2])&v9[v69])[1]);\n                v9 = v70 + v71 + 1;\n                v67 = (char)*((char *)(v70 + v71 + 1));\n                if (v67 == 0)\n                {\n                    break;\n                }\n            }\n            if (v68 == 0 || v67 == 42 && v9[1] == 0)\n            {\n                v10 = &((char [2])&v9[strlen(v9)])[1];\n            }\n        }\n    }\n    tmp_3 = v10;\n    tmp_28 = *(v10) == 0;\n    return (tmp_28? \"ASCII\" : tmp_3);\n}\n"
        },
        {
            "funcName": "sub_407f90",
            "funcStartAddr": "0x407f90",
            "funcEndAddr": "0x40814c",
            "decompiledFuncCode": "int sub_407f90() { crash_skku;\n}"
        },
        {
            "funcName": "sub_404cb0",
            "funcStartAddr": "0x404cb0",
            "funcEndAddr": "0x404cbc",
            "decompiledFuncCode": "int sub_404cb0()\n{\n}\n"
        },
        {
            "funcName": "sub_402210",
            "funcStartAddr": "0x402210",
            "funcEndAddr": "0x402684",
            "decompiledFuncCode": "extern unsigned int g_409020;\nextern unsigned long long g_60d298;\nextern unsigned int g_60d2a0;\nextern unsigned int g_60d2a4;\n\nint sub_402210()\n{\n    char v0;  // [bp-0x148]\n    char v1;  // [bp-0xb8]\n    unsigned long long v3;  // rdi\n    unsigned long long v4;  // rax\n    unsigned long long *v5;  // rdx\n    char *v6[4];  // r12\n    char *v7[4];  // rbx\n    char *v8;  // rdi\n    unsigned long long v9;  // rcx\n    unsigned long long v10;  // cc_dep1\n    unsigned long long v11;  // cc_dep2\n    unsigned long v12;  // d\n    char *v13;  // rsi\n    unsigned long long v15;  // rbp\n    char v16[4];  // rsi\n    unsigned long long *v17;  // r13\n    unsigned long long v18;  // rdx\n    unsigned long long v19;  // rdx\n    unsigned long long v20;  // rax\n    unsigned long long v21;  // rcx\n    char *v22;  // rdi\n    unsigned long long v23;  // rcx\n    unsigned long long v24;  // rdx\n    unsigned long long v25;  // cc_dep1\n    unsigned long long v26;  // cc_dep2\n    unsigned long long v27;  // cc_dep1\n    char v28;  // bpl\n    char v30;  // bpl\n    unsigned long v32;  // rsi\n    unsigned long long v33;  // r12\n    unsigned long long v34;  // r14\n    unsigned long long v35;  // rbp\n    unsigned long long v37;  // r12\n    unsigned long long v38;  // rbp\n    unsigned long long v39;  // rbx\n    unsigned long long v45;  // rsi\n    unsigned long long v46;  // rsi\n    unsigned long long v48;  // rcx\n\n    v4 = v3;\n    v5 = (unsigned long long)g_60d2a4 + 1;\n    if (v3 != 0)\n    {\n        g_60d2a4 = (unsigned long long)g_60d2a4 + 1;\n        v5 = (unsigned long long)g_60d2a4 + 2;\n    }\n    v6 = g_60d298;\n    v7 = v5;\n    v15 = 0;\n    if ((unsigned int)((unsigned long long)g_60d2a0 - 2) > (unsigned int)v5)\n    {\n        v13 = *((long long *)(g_60d298 + v7 * 8 + 8));\n        v9 = 3;\n        v8 = \"-l\";\n        while (v9 != 0)\n        {\n            v9 -= 1;\n            v10 = *(v13);\n            v11 = *(v8);\n            v8 = &v8[v12];\n            v13 = &v13[v12];\n            break;\n        }\n        if ((v10 > v11) - 0 - (v10 < v11) == 0)\n        {\n            g_60d2a4 = (unsigned int)v5;\n            v15 = 1;\n        }\n    }\n    v16 = *((long long *)((char *)v6 + 0x8 * v7));\n    v17 = v7 * 8;\n    v18 = (char)*((char *)*((long long *)((char *)v6 + 0x8 * v7)));\n    if (*((char *)*((long long *)((char *)v6 + 0x8 * v7))) != 45)\n    {\n        if (v18 == 61)\n        {\n            v20 = v16[1];\n            if ((v16[1] == 0 || v20 == 61) && (v16[1] == 0 || v16[2] == 0))\n            {\n                v28 = strcmp(v6[(long long)(int)g_60d2a4], v6[2 + (long long)(int)g_60d2a4]) == 0;\n                g_60d2a4 = g_60d2a4 + 3;\n            }\n        }\n        if (v18 != 61 || v16[1] != 0 && v20 != 61 || v16[1] != 0 && v16[2] != 0)\n        {\n            v22 = \"!\";\n            v23 = 3;\n            while (v23 != 0)\n            {\n                v23 -= 1;\n                v25 = v16[0];\n                v26 = *(v22);\n                v22 = &v22[v12];\n                v16 = &v16[v12];\n                break;\n            }\n            v27 = (v25 > v26) - 0 - (v25 < v26);\n            if ((char)v27 != 0)\n            {\n                abort(); /* do not return */\n            }\n            v30 = strcmp(v6[(long long)(int)g_60d2a4], v6[2 + (long long)(int)g_60d2a4]) != 0;\n            g_60d2a4 = g_60d2a4 + 3;\n        }\n    }\n    else\n    {\n        v19 = v16[1];\n        if (v19 == 103 || v16[1] == 108)\n        {\n            v21 = v16[2];\n        }\n        if ((v19 != 103 || v21 != 116) && (v19 != 103 || v16[2] != 101) && (v16[1] != 108 || v21 != 116) && (v16[1] != 108 || v16[2] != 101))\n        {\n            if (v19 != 101)\n            {\n            }\n            else\n            {\n                v24 = v16[2];\n            }\n            if (v19 == 110)\n            {\n                v21 = v16[2];\n            }\n        }\n        if (v19 != 110 && (v19 == 103 || v16[1] == 108 || v19 != 101) && (v21 == 116 || v16[2] == 101 || v19 != 101) && (v16[3] != 0 || v19 != 103 || v21 != 116) && (v16[3] != 0 || v19 != 103 || v16[2] != 101) && (v16[3] != 0 || v16[1] != 108 || v21 != 116) && (v16[3] != 0 || v16[1] != 108 || v16[2] != 101))\n        {\n            if (v19 == 111 && v16[2] == 116 && v16[3] == 0)\n            {\n                g_60d2a4 = g_60d2a4 + 3;\n                if ((char)v15 == 0 && v4 == 0)\n                {\n                    v34 = (unsigned int)sub_401ad0();\n                    v38 = (unsigned int)sub_401ad0();\n                }\n                else\n                {\n                    v32 = \"-ot does not accept -l\";\n                }\n            }\n            if (v19 == 101)\n            {\n                v24 = v16[2];\n            }\n        }\n    }\n    if ((*((char *)*((long long *)((char *)v6 + 0x8 * v7))) == 45 && v19 == 110 && v16[3] != 0 && (v19 == 103 || v16[1] == 108) && (v21 == 116 || v16[2] == 101) || *((char *)*((long long *)((char *)v6 + 0x8 * v7))) == 45 && v19 == 110 && v19 != 101 && v16[2] != 101 && (v19 != 103 || v21 != 116) && (v19 != 103 || v16[2] != 101) && (v16[1] != 108 || v21 != 116) && (v16[1] != 108 || v16[2] != 101)) && v21 == 116 && v16[3] == 0)\n    {\n        g_60d2a4 = g_60d2a4 + 3;\n        if (v15 == 0 && v4 == 0)\n        {\n            v35 = (unsigned int)sub_401ad0();\n            sub_401ad0();\n        }\n        else\n        {\n            v32 = \"-nt does not accept -l\";\n        }\n    }\n    if (*((char *)*((long long *)((char *)v6 + 0x8 * v7))) == 45 && (v19 == 103 || v16[1] == 108) && (v21 == 116 || v16[2] == 101) && v16[3] == 0 || (*((char *)*((long long *)((char *)v6 + 0x8 * v7))) == 45 && v19 == 101 && v16[2] == 113 && (v19 != 103 || v21 != 116) && (v19 != 103 || v16[2] != 101) && (v16[1] != 108 || v21 != 116) && (v16[1] != 108 || v16[2] != 101) || *((char *)*((long long *)((char *)v6 + 0x8 * v7))) == 45 && v19 == 110 && v16[2] == 101 && v19 != 101 && (v19 != 103 || v21 != 116) && (v19 != 103 || v16[2] != 101) && (v16[1] != 108 || v21 != 116) && (v16[1] != 108 || v16[2] != 101)) && v16[3] == 0)\n    {\n        if (v4 != 0)\n        {\n            strlen(*((long long *)(v6 + v17 - 8)));\n            v37 = (unsigned int)sub_403290();\n        }\n        else\n        {\n            v33 = (unsigned int)sub_401bb0();\n        }\n        if (v15 != 0)\n        {\n            strlen(*((long long *)&((char *)v17)[16 + g_60d298]));\n            v46 = (unsigned int)sub_403290();\n        }\n        else\n        {\n            v45 = (unsigned int)sub_401bb0();\n        }\n        sub_404f20();\n        v48 = (char)*((char *)(*((long long *)(g_60d298 + v7 * 8)) + 1));\n        g_60d2a4 = g_60d2a4 + 3;\n    }\n    if ((*((char *)*((long long *)((char *)v6 + 0x8 * v7))) == 45 && v19 == 101 && v16[2] != 113 && (v19 != 103 || v21 != 116) && (v19 != 103 || v16[2] != 101) && (v16[1] != 108 || v21 != 116) && (v16[1] != 108 || v16[2] != 101) || *((char *)*((long long *)((char *)v6 + 0x8 * v7))) == 45 && v19 == 101 && v19 != 111 && v19 != 110 && (v19 == 103 || v16[1] == 108 || v19 != 101) && (v21 == 116 || v16[2] == 101 || v19 != 101) && (v16[3] != 0 || v19 != 103 || v21 != 116) && (v16[3] != 0 || v19 != 103 || v16[2] != 101) && (v16[3] != 0 || v16[1] != 108 || v21 != 116) && (v16[3] != 0 || v16[1] != 108 || v16[2] != 101)) && v24 == 102 && v16[3] == 0)\n    {\n        g_60d2a4 = g_60d2a4 + 3;\n        if (v15 == 0 && v4 == 0)\n        {\n        }\n        else\n        {\n            v32 = \"-ef does not accept \";\n        }\n    }\n    if (...)\n    {\n        v39 = (unsigned int)sub_404f00();\n        dcgettext(0x0, 0x409020, 0x5);\n        sub_401b10(); /* do not return */\n    }\n    if (...)\n    {\n        dcgettext(0x0, v32, 0x5);\n        sub_401b10(); /* do not return */\n    }\n    if (...)\n    {\n        return stack_base + 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_405630",
            "funcStartAddr": "0x405630",
            "funcEndAddr": "0x405650",
            "decompiledFuncCode": "int sub_405630()\n{\n    unsigned long long v1;  // r9\n    unsigned long long v2[2];  // r8\n\n    v1 = 0;\n    if (*(v2) != 0)\n    {\n        do\n        {\n            v1 += 1;\n        }\n        while (v2[v1] != 0);\n    }\n}\n"
        },
        {
            "funcName": "sub_4059f0",
            "funcStartAddr": "0x4059f0",
            "funcEndAddr": "0x405a18",
            "decompiledFuncCode": "int sub_4059f0()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_4057f0();\n}\n"
        },
        {
            "funcName": "sub_4056b0",
            "funcStartAddr": "0x4056b0",
            "funcEndAddr": "0x405768",
            "decompiledFuncCode": "int sub_4056b0()\n{\n    unsigned int v0;  // [bp-0xa0]\n    void tmp_12;  // tmp #12\n    void tmp_8;  // tmp #8\n    unsigned long v1;  // [bp-0x98]\n    unsigned long long v2;  // [bp-0x90]\n    unsigned long v3;  // [bp-0x88]\n    unsigned long long v4;  // [bp-0x18]\n    unsigned long v5;  // [bp-0x10]\n    unsigned long long v6;  // [bp+0x8]\n    char v7;  // [bp+0x10]\n    unsigned long long v8;  // r11\n    unsigned long long v9;  // r8\n    unsigned long v10;  // r9\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // r8\n    unsigned long long|unsigned long long * v14;  // r10\n    unsigned long long v15;  // r9\n\n    v8 = 0;\n    v4 = v9;\n    v14 = &v6;\n    v13 = 32;\n    v1 = &v6;\n    v5 = v10;\n    v15 = 0;\n    v0 = 32;\n    v2 = stack_base + -56;\n    while (true)\n    {\n        if ((unsigned int)v13 <= 47)\n        {\n            tmp_12 = v13;\n            v13 = (unsigned int)v13 + 8;\n            v8 = 1;\n            v11 = v4;\n            v3 = v4;\n        }\n        else\n        {\n            tmp_8 = v14;\n            v14 = &v7;\n            v12 = v6;\n            v3 = v6;\n        }\n        if ((unsigned int)v13 <= 47 && v11 != 0 || v12 != 0 && (unsigned int)v13 > 47)\n        {\n            v15 += 1;\n        }\n        if (v8 != 0)\n        {\n            v0 = v13;\n        }\n        return sub_405250();\n    }\n}\n"
        },
        {
            "funcName": "sub_404890",
            "funcStartAddr": "0x404890",
            "funcEndAddr": "0x40489f",
            "decompiledFuncCode": "extern int512_t g_60d3c0;\n\nint sub_404890()\n{\n    unsigned long v1;  // rdi\n\n    return *((int *)(v1 == 0? &g_60d3c0 : v1));\n}\n"
        },
        {
            "funcName": "sub_402cd0",
            "funcStartAddr": "0x402cd0",
            "funcEndAddr": "0x402e1c",
            "decompiledFuncCode": "extern unsigned int g_409084;\nextern unsigned long long g_60d298;\nextern unsigned int g_60d2a0;\nextern unsigned int g_60d2a4;\n\nint sub_402cd0()\n{\n    unsigned long long v1;  // rax\n    char *v2;  // rdi\n    unsigned long long v3;  // cc_dep1\n    unsigned long long v4;  // cc_dep2\n    unsigned long v5;  // d\n    unsigned long long v6;  // rcx\n    char *v7;  // rsi\n    unsigned long long v8;  // cc_dep1\n    char *v9;  // rdi\n    unsigned long long v10;  // rcx\n    char *v11;  // rsi\n    unsigned int v12;  // ebx\n    unsigned long long v13;  // cc_dep1\n    unsigned long long v14;  // cc_dep2\n    unsigned long long v15;  // cc_dep1\n    char *v16;  // rsi\n    char *v17;  // rdi\n    unsigned long long v18;  // rcx\n    unsigned long long v19;  // cc_dep1\n    unsigned long long v20;  // cc_dep2\n    unsigned long long v21;  // cc_dep1\n    char *v22;  // rdi\n    unsigned long long v23;  // rcx\n    char *v24;  // rsi\n    unsigned long long v25;  // cc_dep1\n    unsigned long long v26;  // cc_dep2\n    unsigned long long v27;  // cc_dep1\n    char *v28;  // rdi\n    unsigned long long v29;  // rcx\n    char *v30;  // rsi\n    unsigned long long v31;  // cc_dep1\n    unsigned long long v32;  // cc_dep2\n    unsigned long long v33;  // cc_dep1\n    unsigned long long v35;  // rbx\n\n    v1 = sub_401980();\n    if (v1 == 0)\n    {\n        v2 = \"!\";\n        v6 = 2;\n        v7 = *((long long *)(g_60d298 + ((int)g_60d2a4 + 1) * 8 - 8));\n        while (v6 != 0)\n        {\n            v6 -= 1;\n            v3 = *(v7);\n            v4 = *(v2);\n            v2 = &v2[v5];\n            v7 = &v7[v5];\n            break;\n        }\n        v8 = (v3 > v4) - 0 - (v3 < v4);\n        if ((char)v8 == 0)\n        {\n            v12 = g_60d2a4 + 1;\n            g_60d2a4 = g_60d2a4 + 1;\n            if (v12 < g_60d2a0)\n            {\n                v1 = (unsigned int)(sub_4026f0() ^ 1);\n            }\n        }\n        else\n        {\n            v9 = \"(\";\n            v10 = 2;\n            v11 = *((long long *)(g_60d298 + ((int)g_60d2a4 + 1) * 8 - 8));\n            while (v10 != 0)\n            {\n                v10 -= 1;\n                v13 = *(v11);\n                v14 = *(v9);\n                v9 = &v9[v5];\n                v11 = &v11[v5];\n                break;\n            }\n            v15 = (v13 > v14) - 0 - (v13 < v14);\n            if ((char)v15 == 0)\n            {\n                v16 = *((long long *)(g_60d298 + ((int)g_60d2a4 + 1) * 8 + 8));\n                v17 = \")\";\n                v18 = 2;\n                while (v18 != 0)\n                {\n                    v18 -= 1;\n                    v19 = *(v16);\n                    v20 = *(v17);\n                    v17 = &v17[v5];\n                    v16 = &v16[v5];\n                    break;\n                }\n                v21 = (v19 > v20) - 0 - (v19 < v20);\n                if ((char)v21 == 0)\n                {\n                    v1 = (char)(*((char *)*((long long *)(g_60d298 + ((int)g_60d2a4 + 1 << 3)))) != 0);\n                    g_60d2a4 = g_60d2a4 + 3;\n                }\n            }\n            if ((char)v21 != 0 || (char)v15 != 0)\n            {\n                v22 = \"-a\";\n                v23 = 3;\n                v24 = *((long long *)(g_60d298 + ((int)g_60d2a4 + 1) * 8));\n                while (v23 != 0)\n                {\n                    v23 -= 1;\n                    v25 = *(v24);\n                    v26 = *(v22);\n                    v22 = &v22[v5];\n                    v24 = &v24[v5];\n                    break;\n                }\n                v27 = (v25 > v26) - 0 - (v25 < v26);\n                if ((char)v27 != 0)\n                {\n                    v28 = \"-o\";\n                    v29 = 3;\n                    v30 = *((long long *)(g_60d298 + ((int)g_60d2a4 + 1) * 8));\n                    while (v29 != 0)\n                    {\n                        v29 -= 1;\n                        v31 = *(v30);\n                        v32 = *(v28);\n                        v28 = &v28[v5];\n                        v30 = &v30[v5];\n                        break;\n                    }\n                    v33 = (v31 > v32) - 0 - (v31 < v32);\n                    if ((char)v33 != 0)\n                    {\n                        v35 = (unsigned int)sub_404f00();\n                        dcgettext(0x0, 0x409084, 0x5);\n                        sub_401b10(); /* do not return */\n                    }\n                }\n            }\n        }\n        if (((char)v8 == 0 || (char)v21 == 0) && ((char)v8 == 0 || (char)v15 == 0) && (v12 < g_60d2a0 || (char)v8 != 0))\n        {\n            return v1;\n        }\n        if (((char)v8 == 0 || g_60d2a4 >= g_60d2a0) && ((char)v8 == 0 || (char)v27 == 0 || (char)v33 == 0) && (v12 >= g_60d2a0 || (char)v8 != 0) && ((char)v8 == 0 || (char)v21 != 0 || (char)v15 != 0))\n        {\n            sub_401c90(); /* do not return */\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_4026f0",
            "funcStartAddr": "0x4026f0",
            "funcEndAddr": "0x40278c",
            "decompiledFuncCode": "extern unsigned int g_40903e;\nextern unsigned long long g_60d298;\nextern unsigned int g_60d2a4;\n\nint sub_4026f0()\n{\n    unsigned long v0;  // [bp-0x8]\n    char *v2;  // rdi\n    unsigned long long v3;  // rcx\n    unsigned long long v4;  // cc_dep1\n    unsigned long long v5;  // cc_dep2\n    unsigned long v6;  // d\n    char *v7;  // rsi\n    char *v9;  // rax\n    char v10;  // al\n    unsigned long v11;  // rbx\n    unsigned long long v14;  // rbx\n\n    v2 = \"!\";\n    v3 = 2;\n    v7 = *((long long *)(g_60d298 + (int)g_60d2a4 * 8));\n    while (v3 != 0)\n    {\n        v3 -= 1;\n        v4 = *(v7);\n        v5 = *(v2);\n        v2 = &v2[v6];\n        v7 = &v7[v6];\n        break;\n    }\n    if ((v4 > v5) - 0 - (v4 < v5) != 0)\n    {\n        v0 = v11;\n        if (*((char *)*((long long *)(g_60d298 + ((long long)(int)g_60d2a4 << 3)))) == 45 && *((char *)(*((long long *)(g_60d298 + ((long long)(int)g_60d2a4 << 3))) + 1)) != 0 && *((char *)(*((long long *)(g_60d298 + ((long long)(int)g_60d2a4 << 3))) + 2)) == 0 && sub_4026c0() == 0)\n        {\n            v14 = (unsigned int)sub_404f00();\n            dcgettext(0x0, 0x40903e, 0x5);\n            sub_401b10(); /* do not return */\n        }\n        if (*((char *)(*((long long *)(g_60d298 + ((long long)(int)g_60d2a4 << 3))) + 1)) == 0 || *((char *)*((long long *)(g_60d298 + ((long long)(int)g_60d2a4 << 3)))) != 45 || *((char *)(*((long long *)(g_60d298 + ((long long)(int)g_60d2a4 << 3))) + 2)) != 0)\n        {\n            sub_401c90(); /* do not return */\n        }\n    }\n    else\n    {\n        v9 = *((long long *)(g_60d298 + (int)g_60d2a4 * 8 + 8));\n        g_60d2a4 = g_60d2a4 + 2;\n        v10 = *(v9) == 0;\n        return rax<8>;\n    }\n}\n"
        },
        {
            "funcName": "sub_4018cb",
            "funcStartAddr": "0x4018cb",
            "funcEndAddr": "0x4018ea",
            "decompiledFuncCode": "extern unsigned long long g_60d258;\n\nint sub_4018cb()\n{\n    unsigned long long v1;  // rax\n\n    v1 = &g_60d258;\n    if (false)\n    {\n        v1 = 0;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_406470",
            "funcStartAddr": "0x406470",
            "funcEndAddr": "0x407e89",
            "decompiledFuncCode": "int sub_406470() { crash_skku;\n}"
        },
        {
            "funcName": "sub_404ee0",
            "funcStartAddr": "0x404ee0",
            "funcEndAddr": "0x404ef1",
            "decompiledFuncCode": "int sub_404ee0()\n{\n}\n"
        },
        {
            "funcName": "sub_4049db",
            "funcStartAddr": "0x4049db",
            "funcEndAddr": "0x404aa1",
            "decompiledFuncCode": "int sub_4049db()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long v1;  // [bp-0x50]\n    unsigned long v2;  // [bp-0x48]\n    unsigned int v3;  // [bp-0x2c]\n    unsigned long v4;  // [bp-0x28]\n    unsigned long v5;  // [bp-0x20]\n    unsigned long v6;  // [bp-0x18]\n    unsigned long v7;  // [bp-0x10]\n    unsigned long long v8;  // [bp+0x0]\n    unsigned long long v10;  // [bp+0x10]\n    unsigned long long v11;  // [bp+0x18]\n    unsigned long long v12;  // [bp+0x20]\n    unsigned long long v13;  // [bp+0x28]\n    unsigned long v14;  // rcx\n    unsigned long v15;  // rax\n    unsigned long long v17[7];  // rbx\n    unsigned int *v18;  // r13\n    unsigned long long *v20;  // r12\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // r12\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r14\n    unsigned long long v25;  // r15\n\n    v17 = (v14 == 0? v15 : rbx<8>);\n    v18 = __errno_location();\n    v3 = *(v18);\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = &v17[1];\n    v6 = &v17[1];\n    v7 = (unsigned int)sub_403480();\n    v5 = v7 + 1;\n    v4 = (unsigned int)sub_4057f0();\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = v6;\n    sub_403480();\n    *(v18) = v3;\n    if (v20 != 0)\n    {\n        *(v20) = v7;\n    }\n    v21 = v8;\n    v22 = v10;\n    v23 = v11;\n    v24 = v12;\n    v25 = v13;\n    return v4;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Angr",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_[.elf"
}