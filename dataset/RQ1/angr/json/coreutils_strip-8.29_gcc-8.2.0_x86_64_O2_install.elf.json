{
    "funcInfo": [
        {
            "funcName": "sub_40a380",
            "funcStartAddr": "0x40a380",
            "funcEndAddr": "0x40a3c6",
            "decompiledFuncCode": "extern char *g_6219a0;\n\nint sub_40a380()\n{\n    unsigned long long v1;  // rdi\n    char *v2;  // rbx\n    char *v3;  // rax\n\n    v2 = v1;\n    if (v1 == 0)\n    {\n        v3 = getenv(\"SIMPLE_BACKUP_SUFFI\");\n        v2 = v3;\n    }\n    if ((v3 != 0 || v1 != 0) && *(v2) != 0)\n    {\n        v3 = sub_40ad40();\n        if (v3 == v2)\n        {\n            g_6219a0 = v2;\n            return v3;\n        }\n    }\n    if (*(v2) == 0 || v3 != v2 || v3 == 0 && v1 == 0)\n    {\n        g_6219a0 = \"~\";\n        return v3;\n    }\n}\n"
        },
        {
            "funcName": "sub_40f520",
            "funcStartAddr": "0x40f520",
            "funcEndAddr": "0x40f733",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char field_0;\n    char padding_1[3];\n    unsigned int field_4;\n} struct_0;\n\nint sub_40f520()\n{\n    struct_0 *v1;  // rdi\n    struct_0 *v2;  // rbp\n    unsigned int v3[2];  // rcx\n    unsigned int v4;  // r13d\n    unsigned long v5;  // rsi\n    unsigned long v6;  // rdx\n    unsigned int v7;  // eax\n    unsigned long long v8;  // r12\n    unsigned long long v9;  // r13\n    unsigned long long v10;  // rax\n    unsigned int v11;  // eax\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // rax\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // rax\n\n    v2 = v1;\n    if (v3 != 0)\n    {\n        v3[0] = v4;\n        v4 = __open_2(v5, (unsigned int)v6 * 0x20000 & 0x20000 | 0x10900);\n        v7 = *(__errno_location());\n        v3[1] = v7;\n        if (v9 >= 0)\n        {\n            if (((char)v6 & 2) != 0)\n            {\n                v8 = 0;\n            }\n        }\n        else\n        {\n            if (v7 != 13)\n            {\n                v8 = -18446744069414584321;\n            }\n        }\n    }\n    else\n    {\n        v9 = -18446744069414584321;\n    }\n    if (*((int *)&v1->field_0) <= 5 && (v9 < 0 || v3 == 0 || ((char)v6 & 2) == 0) && (v7 == 13 || v3 == 0 || v9 >= 0) && ((char)(1 << ((char)*((int *)&v1->field_0) & 63)) & 54) == 0 && ((char)(1 << ((char)*((int *)&v1->field_0) & 63)) & 8) == 0 && *((int *)&v1->field_0) == 0)\n    {\n        v10 = sub_40ae10();\n        if (v10 >= 0)\n        {\n            *((int *)&v2->field_0) = 1;\n            *((unsigned long long *)&v2->field_4) = v10;\n        }\n        else\n        {\n            v11 = *(__errno_location());\n            if (v11 != 13 && v11 != 116)\n            {\n                *((int *)&v2->field_0) = 4;\n                v2->field_4 = v11;\n            }\n        }\n    }\n    if ((((char)(1 << ((char)*((int *)&v1->field_0) & 63)) & 8) == 0 || *((int *)&v1->field_0) > 5) && (((char)(1 << ((char)*((int *)&v1->field_0) & 63)) & 54) == 0 || *((int *)&v1->field_0) > 5) && (v9 < 0 || v3 == 0 || ((char)v6 & 2) == 0) && (*((int *)&v1->field_0) > 5 || *((int *)&v1->field_0) != 0) && (v7 == 13 || v3 == 0 || v9 >= 0))\n    {\n        __assert_fail(); /* do not return */\n    }\n    if (((char)(1 << ((char)*((int *)&v1->field_0) & 63)) & 8) == 0 && v10 < 0 && v11 == 13 && *((int *)&v1->field_0) <= 5 && ((char)(1 << ((char)*((int *)&v1->field_0) & 63)) & 54) == 0 && *((int *)&v1->field_0) == 0 && (v9 < 0 || v3 == 0 || ((char)v6 & 2) == 0) && (v7 == 13 || v3 == 0 || v9 >= 0) || ((char)(1 << ((char)*((int *)&v1->field_0) & 63)) & 8) == 0 && v11 == 116 && v10 < 0 && *((int *)&v1->field_0) <= 5 && ((char)(1 << ((char)*((int *)&v1->field_0) & 63)) & 54) == 0 && *((int *)&v1->field_0) == 0 && v11 != 13 && (v9 < 0 || v3 == 0 || ((char)v6 & 2) == 0) && (v7 == 13 || v3 == 0 || v9 >= 0))\n    {\n        *((long long *)&v1->field_0) = -4294967293;\n    }\n    if (...)\n    {\n        v12 = fork();\n        v1->field_4 = v12;\n        if ((unsigned int)v12 != 0)\n        {\n            if ((char)[D] amd64g_calculate_condition(0xe<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>))\n            {\n                *((int *)&v1->field_0) = 4;\n                v1->field_4 = *(__errno_location());\n            }\n            else\n            {\n                v13 = 1;\n                v8 = -18446744069414584322;\n            }\n        }\n    }\n    if (...)\n    {\n        if (v9 >= 0)\n        {\n            v8 = fchdir(v9);\n            if ((unsigned int)v8 != 0)\n            {\n                v13 = (char)(v3 == 0);\n            }\n        }\n        else\n        {\n            v8 = chdir(v5);\n        }\n    }\n    if (...)\n    {\n        switch (*((int *)&v1->field_0))\n        {\n        case 1:\n            *((int *)&v1->field_0) = 2;\n            break;\n        case 2: case 4: case 5:\n            v13 = (char)(v3 == 0);\n            v8 = 0;\n        case 3:\n            if (v1->field_4 != 0)\n            {\n                __assert_fail(); /* do not return */\n            }\n        default:\n            __assert_fail(); /* do not return */\n        }\n    }\n    if (v9 >= 0 && v13 != 0)\n    {\n        close(v9);\n        *(__errno_location()) = v3[0];\n        return v16;\n    }\n    if (...)\n    {\n        v15 = v8;\n        return v15;\n    }\n}\n"
        },
        {
            "funcName": "sub_404000",
            "funcStartAddr": "0x404000",
            "funcEndAddr": "0x404009",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[46];\n    char field_2e;\n} struct_0;\n\nint sub_404000()\n{\n    struct_0 *v1;  // rsi\n    unsigned long v2;  // rax\n\n    if (v1->field_2e == 0)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_40e600",
            "funcStartAddr": "0x40e600",
            "funcEndAddr": "0x40e633",
            "decompiledFuncCode": "extern int512_t g_621ae0;\n\nint sub_40e600()\n{\n    void tmp_2;  // tmp #2\n    void tmp_52;  // tmp #52\n    void tmp_123;  // tmp #123\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long long v3;  // rcx\n    unsigned long long v5;  // rsi\n    unsigned long v6;  // rdx\n\n    tmp_2 = v1;\n    tmp_52 = v1 == 0;\n    v3 = (unsigned int)v2 & 31;\n    v5 = (unsigned int)*((int *)((tmp_52? &g_621ae0 : tmp_2) + v2 % 32 * 4 + 8));\n    tmp_123 = ((unsigned int)v6 ^ (unsigned int)(v5 >> (v3 & 31))) & 1;\n    *((unsigned int *)((v1 == 0? &g_621ae0 : v1) + v2 % 32 * 4 + 8)) = (unsigned int)(tmp_123 << (v3 & 31)) ^ (unsigned int)v5;\n    return (unsigned int)(v5 >> (v3 & 31)) & 1;\n}\n"
        },
        {
            "funcName": "sub_40c580",
            "funcStartAddr": "0x40c580",
            "funcEndAddr": "0x40c597",
            "decompiledFuncCode": "int sub_40c580()\n{\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_40b1c0",
            "funcStartAddr": "0x40b1c0",
            "funcEndAddr": "0x40b22d",
            "decompiledFuncCode": "int sub_40b1c0()\n{\n    unsigned long long v1;  // rdx\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rbx\n    unsigned long long v6;  // rbp\n    unsigned long long v7;  // rax\n    unsigned long long v8;  // rax\n\n    if (v1 != 0)\n    {\n        v6 = v3;\n        v5 = v1;\n        v2 = 0;\n        while (true)\n        {\n            v4 = sub_40eec0();\n            if (v4 == -1)\n            {\n                break;\n            }\n            if (v4 != 0)\n            {\n                v2 += v4;\n                v6 += v4;\n                v5 -= v4;\n                if (v5 == v4)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                *(__errno_location()) = 0;\n                v8 = v2;\n                return v8;\n            }\n        }\n    }\n    else\n    {\n        v2 = 0;\n    }\n    v7 = v2;\n    return v7;\n}\n"
        },
        {
            "funcName": "sub_4137d0",
            "funcStartAddr": "0x4137d0",
            "funcEndAddr": "0x4137f3",
            "decompiledFuncCode": "int sub_4137d0()\n{\n    unsigned long long v1[3];  // rax\n    unsigned long v2;  // rdi\n\n    v1 = sub_4112e0();\n    v1[0] = v2;\n    v1[2] = 0;\n    v1[1] = 0;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_4105a0",
            "funcStartAddr": "0x4105a0",
            "funcEndAddr": "0x41063f",
            "decompiledFuncCode": "int sub_4105a0()\n{\n    unsigned long long v1[4];  // rdi\n    unsigned long long v2;  // r9\n    unsigned long long v3;  // rdx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // r10\n    char v6;  // al\n    unsigned long long v7;  // ecx\n    unsigned long long v8;  // rax\n    char v9;  // al\n    unsigned long long v10;  // rax\n\n    v2 = v1[1];\n    if (v1[1] - 1073741822 <= 1 || v1[1] <= 999999999)\n    {\n        v3 = v1[3];\n    }\n    if (v1[1] - 1073741822 <= 1 && v1[3] - 1073741822 <= 1 || v1[1] - 1073741822 <= 1 && v1[3] <= 999999999 || v1[1] <= 999999999 && v1[3] - 1073741822 <= 1 || v1[1] <= 999999999 && v1[3] <= 999999999)\n    {\n        v7 = 0;\n        v5 = 0;\n        if (v1[1] - 1073741822 <= 1)\n        {\n            v1[0] = 0;\n            v7 = 0;\n            v5 = 1;\n            v7 = (char)(v2 == 1073741822);\n        }\n        if (v1[3] - 1073741822 <= 1)\n        {\n            v4 = 0;\n            v1[2] = 0;\n            v5 = 1;\n            v6 = v3 == 1073741822;\n            v7 = (unsigned int)(v7 + rax<8>);\n        }\n        v8 = 0;\n        v9 = v7 == 1;\n        v10 = rax<8> + v5;\n        return v10;\n    }\n    *(__errno_location()) = 22;\n    return -18446744069414584321;\n}\n"
        },
        {
            "funcName": "sub_40b240",
            "funcStartAddr": "0x40b240",
            "funcEndAddr": "0x40b2ad",
            "decompiledFuncCode": "int sub_40b240()\n{\n    unsigned long long v1;  // rdx\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rbx\n    unsigned long long v6;  // rbp\n    unsigned long long v7;  // rax\n    unsigned long long v8;  // rax\n\n    if (v1 != 0)\n    {\n        v6 = v3;\n        v5 = v1;\n        v2 = 0;\n        while (true)\n        {\n            v4 = sub_40ef20();\n            if (v4 == -1)\n            {\n                break;\n            }\n            if (v4 != 0)\n            {\n                v2 += v4;\n                v6 += v4;\n                v5 -= v4;\n                if (v5 == v4)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                *(__errno_location()) = 28;\n                v8 = v2;\n                return v8;\n            }\n        }\n    }\n    else\n    {\n        v2 = 0;\n    }\n    v7 = v2;\n    return v7;\n}\n"
        },
        {
            "funcName": "sub_40eb40",
            "funcStartAddr": "0x40eb40",
            "funcEndAddr": "0x40ebac",
            "decompiledFuncCode": "extern uint128_t g_621ae0;\nextern uint128_t g_621af0;\nextern uint128_t g_621b00;\nextern unsigned long long g_621b10;\n\nint sub_40eb40()\n{\n    void|unsigned int v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x20]\n    unsigned long v4;  // [bp-0x18]\n    unsigned long v6;  // rsi\n    unsigned long v7;  // rdx\n\n    *((uint128_t *)&v0) = g_621ae0;\n    *((uint128_t *)&v1) = g_621af0;\n    *((uint128_t *)&v2) = g_621b00;\n    v4 = g_621b10;\n    v0 = 10;\n    if (v6 != 0 && v7 != 0)\n    {\n        v3 = v6;\n        v4 = v7;\n        return sub_40e400();\n    }\n    if (v7 == 0 || v6 == 0)\n    {\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_40e5a0",
            "funcStartAddr": "0x40e5a0",
            "funcEndAddr": "0x40e5d4",
            "decompiledFuncCode": "int sub_40e5a0()\n{\n    unsigned int v1;  // [bp+0x100008]\n\n    *(__errno_location()) = v1;\n    return sub_4114e0();\n}\n"
        },
        {
            "funcName": "sub_40f770",
            "funcStartAddr": "0x40f770",
            "funcEndAddr": "0x40f88c",
            "decompiledFuncCode": "int sub_40f770()\n{\n    char v0;  // [bp-0x1c]\n    unsigned int v1;  // [bp+0x0]\n    unsigned int v3[2];  // rdi\n    unsigned int v4[2];  // rbx\n    unsigned long long v6;  // rax\n    unsigned int v7;  // esi\n    unsigned int *v9;  // rax\n    unsigned int *v10;  // rbp\n    unsigned long long v12;  // rax\n    unsigned long|unsigned int v13;  // r12\n    unsigned long long v14;  // rax\n\n    if (v3[0] <= 4)\n    {\n        v4 = v3;\n        /* goto *((long long *)((unsigned long long)v3[0] * 8 + 4300984)); */\n        if (!(v3[1] != 0))\n        {\n            _exit(v7);\n        }\n        else if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x13<64>, Conv(32->64, Load(addr=(rdi<8> + 0x4<64>), size=4, endness=Iend_LE)), 0x0<64>, cc_ndep<8>)))\n        {\n            while (true)\n            {\n                if (waitpid(v3[1], (unsigned int)&v0, 0x0) < 0)\n                {\n                    v9 = __errno_location();\n                    __assert_fail(); /* do not return */\n                }\n            }\n            v12 = (unsigned int)*((int *)&v0);\n            v3[1] = -1;\n            if (((char)*((int *)&v0) & 127) == 0)\n            {\n                break;\n            }\n            raise();\n            v12 = (unsigned int)*((int *)&v0);\n            v14 = v12;\n            return v14;\n        }\n        v6 = fchdir(v3[1]);\n        if ((unsigned int)v6 == 0)\n        {\n            v4[0] = 1;\n            return v6;\n        }\n        v13 = v1;\n        v10 = __errno_location();\n        close(v4[1]);\n        v4[0] = 4;\n        v4[1] = v1;\n        v13 = v3[1];\n        v10 = __errno_location();\n        return 0;\n        *((unsigned long *)&v10) = v13;\n        return -18446744069414584321;\n    }\n    __assert_fail(); /* do not return */\n    v4 = v3;\n    /* goto *((long long *)((unsigned long long)v3[0] * 8 + 4300984)); */\n    if (!(v3[1] != 0))\n    {\n        _exit(v7);\n    }\n    else if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x13<64>, Conv(32->64, Load(addr=(rdi<8> + 0x4<64>), size=4, endness=Iend_LE)), 0x0<64>, cc_ndep<8>)))\n    {\n        while (true)\n        {\n            if (waitpid(v3[1], (unsigned int)&v0, 0x0) < 0)\n            {\n                v9 = __errno_location();\n                __assert_fail(); /* do not return */\n            }\n        }\n        v12 = (unsigned int)*((int *)&v0);\n        v3[1] = -1;\n        if (((char)*((int *)&v0) & 127) == 0)\n        {\n            break;\n        }\n        raise();\n        v12 = (unsigned int)*((int *)&v0);\n        v14 = v12;\n        return v14;\n    }\n    v6 = fchdir(v3[1]);\n    v13 = v1;\n    v10 = __errno_location();\n    close(v4[1]);\n    v4[0] = 4;\n    v4[1] = v1;\n    if ((unsigned int)v6 == 0)\n    {\n        v4[0] = 1;\n        return v6;\n    }\n    v13 = v3[1];\n    v10 = __errno_location();\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_411bc0",
            "funcStartAddr": "0x411bc0",
            "funcEndAddr": "0x411c16",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n    char padding_50[64];\n    unsigned long long field_90;\n} struct_0;\n\nint sub_411bc0()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    struct_0 *v4;  // rdi\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    struct_0 *v7;  // rbx\n    unsigned int v8;  // esi\n    unsigned int v9;  // edx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // r12\n\n    if (v4->field_10 == v4->field_8 && v4->field_28 == v4->field_20 && v4->field_48 == 0)\n    {\n        v2 = v5;\n        v1 = stack_base + 0;\n        v0 = v6;\n        v7 = v4;\n        v10 = lseek(fileno(v4), v8, v9);\n        if (v10 != -1)\n        {\n            v7->field_0 = v7->field_0 & -17;\n            v7->field_90 = v10;\n            v10 = 0;\n        }\n        v11 = v0;\n        v12 = v2;\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_4110e0",
            "funcStartAddr": "0x4110e0",
            "funcEndAddr": "0x411100",
            "decompiledFuncCode": "int sub_4110e0()\n{\n    unsigned long long v1;  // r9\n    unsigned long long v2[2];  // r8\n\n    v1 = 0;\n    if (*(v2) != 0)\n    {\n        do\n        {\n            v1 += 1;\n        }\n        while (v2[v1] != 0);\n    }\n}\n"
        },
        {
            "funcName": "sub_411c20",
            "funcStartAddr": "0x411c20",
            "funcEndAddr": "0x411cf5",
            "decompiledFuncCode": "int sub_411c20()\n{\n    unsigned int v1[13];  // rsi\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rbp\n    unsigned long long v4;  // rbx\n    unsigned long long v5;  // r9\n    unsigned long long v6;  // r8\n    unsigned long long v7;  // r14\n    unsigned long long v8;  // rdx\n    unsigned long v9;  // rdi\n    unsigned long long *v10;  // rax\n    unsigned long long *v12;  // rdx\n    unsigned long long v13;  // rcx\n    unsigned long long v14;  // r10\n    unsigned long long *v15;  // rax\n    unsigned long long *v17;  // rdx\n    unsigned long long v18;  // rcx\n    unsigned int v19;  // r9d\n\n    v2 = v1[5 + 1];\n    v3 = v1[0];\n    v4 = (int)v1[6];\n    v5 = v1[5 + 1];\n    v14 = v1[0];\n    while ((unsigned int)v14 > v1[6])\n    {\n        for (v6 = (int)v1[6]; v5 < v1[6]; v19 = v5 + v7)\n        {\n            v7 = v14 - v6;\n            v8 = v6 - v5;\n            if ((unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n            {\n                v14 -= v8;\n                v10 = v9 + v5 * 8;\n                v12 = v14 - v5;\n                do\n                {\n                    v13 = *(v10);\n                    *(v10) = *((long long *)((char *)v10 + 0x8 * v12));\n                    *((unsigned long long *)((char *)v10 + 0x8 * v12)) = v13;\n                    v10 = &v10[1];\n                }\n                while (v9 + 8 + ((unsigned int)v8 - 1 + v5) * 8 != v10);\n                if ((unsigned int)v14 <= (unsigned int)v6)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v15 = v9 + v5 * 8;\n                v17 = v4 - v5;\n                do\n                {\n                    v18 = *(v15);\n                    *(v15) = *((long long *)((char *)v15 + 0x8 * v17));\n                    *((unsigned long long *)((char *)v15 + 0x8 * v17)) = v18;\n                    v15 = &v15[1];\n                }\n                while (v15 != v9 + 8 + (v7 - 1 + v5) * 8);\n            }\n        }\n        if ((unsigned int)(v14 - v6) > (unsigned int)(v6 - v5) || v5 >= v1[6])\n        {\n            v1[6] = v3;\n            v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n            return stack_base + 0 - v6;\n        }\n    }\n    v1[6] = v3;\n    v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n    return stack_base + 0 - v6;\n}\n"
        },
        {
            "funcName": "sub_411160",
            "funcStartAddr": "0x411160",
            "funcEndAddr": "0x411218",
            "decompiledFuncCode": "int sub_411160()\n{\n    unsigned int v0;  // [bp-0xa0]\n    void tmp_12;  // tmp #12\n    void tmp_8;  // tmp #8\n    unsigned long v1;  // [bp-0x98]\n    unsigned long long v2;  // [bp-0x90]\n    unsigned long v3;  // [bp-0x88]\n    unsigned long long v4;  // [bp-0x18]\n    unsigned long v5;  // [bp-0x10]\n    unsigned long long v6;  // [bp+0x8]\n    char v7;  // [bp+0x10]\n    unsigned long long v8;  // r11\n    unsigned long long v9;  // r8\n    unsigned long v10;  // r9\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // r8\n    unsigned long long|unsigned long long * v14;  // r10\n    unsigned long long v15;  // r9\n\n    v8 = 0;\n    v4 = v9;\n    v14 = &v6;\n    v13 = 32;\n    v1 = &v6;\n    v5 = v10;\n    v15 = 0;\n    v0 = 32;\n    v2 = stack_base + -56;\n    while (true)\n    {\n        if ((unsigned int)v13 <= 47)\n        {\n            tmp_12 = v13;\n            v13 = (unsigned int)v13 + 8;\n            v8 = 1;\n            v11 = v4;\n            v3 = v4;\n        }\n        else\n        {\n            tmp_8 = v14;\n            v14 = &v7;\n            v12 = v6;\n            v3 = v6;\n        }\n        if ((unsigned int)v13 <= 47 && v11 != 0 || v12 != 0 && (unsigned int)v13 > 47)\n        {\n            v15 += 1;\n        }\n        if (v8 != 0)\n        {\n            v0 = v13;\n        }\n        return sub_410d00();\n    }\n}\n"
        },
        {
            "funcName": "sub_4129b0",
            "funcStartAddr": "0x4129b0",
            "funcEndAddr": "0x4129c6",
            "decompiledFuncCode": "int sub_4129b0()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_4128f0();\n}\n"
        },
        {
            "funcName": "sub_404d30",
            "funcStartAddr": "0x404d30",
            "funcEndAddr": "0x404d70",
            "decompiledFuncCode": "extern unsigned int g_4185c8;\n\nint sub_404d30()\n{\n    unsigned int *v0;  // [bp-0x8]\n    unsigned int *v2;  // rbx\n\n    v0 = v2;\n    *(v2) = 95;\n    error(0x1, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x4185c8, 0x5));\n}\n"
        },
        {
            "funcName": "sub_416250",
            "funcStartAddr": "0x416250",
            "funcEndAddr": "0x416f06",
            "decompiledFuncCode": "int sub_416250() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40f08b",
            "funcStartAddr": "0x40f08b",
            "funcEndAddr": "0x40f08d",
            "decompiledFuncCode": "int sub_40f08b()\n{\n}\n"
        },
        {
            "funcName": "sub_4119a0",
            "funcStartAddr": "0x4119a0",
            "funcEndAddr": "0x411a08",
            "decompiledFuncCode": "extern unsigned long long stdin;\n\nint sub_4119a0()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long|unsigned long long|char v3;  // rbx\n    char *v5;  // rax\n    unsigned long long v6;  // rax\n\n    v3 = 0;\n    v0 = 0;\n    v1 = 0;\n    if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v5 = v0 + __getdelim(&v0, &v1, 0xa, stdin) - 1;\n        if (*(v5) == 10)\n        {\n            *(v5) = 0;\n        }\n        v3 = [D] amd64g_calculate_condition(0xf<64>, 0x13<64>, Call (target: 0x402c70<64>, prototype: () -> None, args: []), 0x0<64>, cc_ndep<8>);\n    }\n    free(v0);\n    v6 = v3;\n    return v6;\n}\n"
        },
        {
            "funcName": "sub_40f0ab",
            "funcStartAddr": "0x40f0ab",
            "funcEndAddr": "0x40f0b0",
            "decompiledFuncCode": "int sub_40f0ab()\n{\n}\n"
        },
        {
            "funcName": "sub_40fb10",
            "funcStartAddr": "0x40fb10",
            "funcEndAddr": "0x40fc6d",
            "decompiledFuncCode": "extern unsigned int g_418fcb;\n\nint sub_40fb10()\n{\n    unsigned long long|unsigned int v0;  // [bp-0x60]\n    unsigned long long|unsigned int v1;  // [bp-0x58]\n    unsigned long long v2;  // [bp-0x50]\n    unsigned long v3;  // [bp-0x48]\n    unsigned int v4;  // [bp-0x3c]\n    char *v6;  // rdi\n    unsigned long long v7;  // r14\n    unsigned long long v8;  // r8\n    unsigned long long v9;  // r13\n    unsigned long long v10;  // rsi\n    unsigned long long v11;  // rbp\n    unsigned long long v12;  // rdx\n    unsigned long v13;  // rcx\n    unsigned int *v14;  // r15\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // rdx\n    unsigned long long v18;  // rax\n    unsigned long long v19;  // rdx\n    unsigned long long|unsigned int v21;  // r12d\n    unsigned long long v22;  // rbx\n    unsigned long long v23;  // r14\n    unsigned long long v25;  // rsi\n    unsigned long long v26;  // rdi\n    unsigned int v27;  // rdx\n    unsigned long|unsigned int v28;  // rcx\n    unsigned int v29;  // cc_dep1\n\n    v7 = v6;\n    v9 = v8;\n    v11 = v10;\n    v2 = v12;\n    v0 = v6;\n    v3 = v13;\n    v14 = __errno_location();\n    v4 = *(v14);\n    v15 = strlen(v6);\n    v16 = v11 + v9;\n    if (v11 + v9 <= v15)\n    {\n        v1 = v7 + v15 - v16;\n        v18 = strspn(v7 + v15 - v16, 0x418fcb);\n        if (v9 <= v18)\n        {\n            if ((unsigned long long)(unsigned int)sub_413800() != 0)\n            {\n                v21 = 238328;\n                v22 = v15 - v16 + v0 + v9;\n                while (true)\n                {\n                    v23 = v1;\n                    if (v9 != 0)\n                    {\n                        while (true)\n                        {\n                            v23 += 1;\n                            *((unsigned long long *)(v23 - 1)) = (char)*((char *)(4301248 + (unsigned long long)(unsigned int)sub_413840()));\n                            if (v23 == v22)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    v25 = v2;\n                    v26 = v0;\n                    v27 = (long long)(stack_base)[-72]();\n                    if (v27 < 0)\n                    {\n                        v28 = *(v14);\n                        if (*(v14) == 17)\n                        {\n                            v29 = v21;\n                            v21 = (unsigned long long)v21 - 1;\n                            sub_413960();\n                            *(v14) = 17;\n                            v19 = -18446744069414584321;\n                        }\n                        else\n                        {\n                            v27 = -1;\n                        }\n                    }\n                    else\n                    {\n                        *(v14) = v4;\n                        v28 = v4;\n                    }\n                    if (*(v14) != 17 || v27 >= 0)\n                    {\n                        v1 = v27;\n                        *((unsigned long *)&v0) = v28;\n                        sub_413960();\n                        v19 = v1;\n                        *(v14) = v0;\n                    }\n                }\n            }\n            else\n            {\n                v19 = -18446744069414584321;\n            }\n        }\n    }\n    if (v11 + v9 > v15 || v9 > v18)\n    {\n        *(v14) = 22;\n        v19 = -18446744069414584321;\n    }\n    return v19;\n}\n"
        },
        {
            "funcName": "sub_411330",
            "funcStartAddr": "0x411330",
            "funcEndAddr": "0x411332",
            "decompiledFuncCode": "int sub_411330()\n{\n}\n"
        },
        {
            "funcName": "sub_40ade0",
            "funcStartAddr": "0x40ade0",
            "funcEndAddr": "0x40adfc",
            "decompiledFuncCode": "int sub_40ade0()\n{\n    unsigned long v0;  // [bp-0x8]\n    void *v2;  // rdi\n    unsigned long v3;  // rax\n    unsigned long v4;  // rbx\n\n    if (v2 != 0)\n    {\n        v0 = v4;\n        fileno(v2);\n    }\n    else\n    {\n        return v3;\n    }\n}\n"
        },
        {
            "funcName": "sub_4114e0",
            "funcStartAddr": "0x4114e0",
            "funcEndAddr": "0x411508",
            "decompiledFuncCode": "int sub_4114e0()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_4112e0();\n}\n"
        },
        {
            "funcName": "sub_40eec0",
            "funcStartAddr": "0x40eec0",
            "funcEndAddr": "0x40ef1d",
            "decompiledFuncCode": "int sub_40eec0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_4128f0",
            "funcStartAddr": "0x4128f0",
            "funcEndAddr": "0x412946",
            "decompiledFuncCode": "extern unsigned int g_61f4d4;\nextern unsigned int g_61f4d8;\nextern unsigned int g_61f4dc;\nextern unsigned int g_621b40;\nextern unsigned int g_621b44;\nextern unsigned int g_621b48;\nextern unsigned long long g_621b50;\nextern unsigned long long g_621b80;\n\nint sub_4128f0()\n{\n    unsigned int *v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp+0x8]\n\n    g_621b40 = g_61f4dc;\n    g_621b44 = g_61f4d8;\n    v1 = (unsigned int)v2;\n    v0 = &g_621b40;\n    g_61f4dc = g_621b40;\n    g_621b80 = g_621b50;\n    g_61f4d4 = g_621b48;\n    return sub_412320();\n}\n"
        },
        {
            "funcName": "sub_40c510",
            "funcStartAddr": "0x40c510",
            "funcEndAddr": "0x40c537",
            "decompiledFuncCode": "int sub_40c510()\n{\n    unsigned long v0;  // [bp+0x8]\n    unsigned long v1;  // rsi\n\n    return (0 CONCAT (unsigned int)sub_413020() ^ v0) % v1 >> 64;\n}\n"
        },
        {
            "funcName": "sub_40c550",
            "funcStartAddr": "0x40c550",
            "funcEndAddr": "0x40c572",
            "decompiledFuncCode": "int sub_40c550()\n{\n    unsigned long long v1[3];  // rdi\n    unsigned long long v2[3];  // rsi\n\n    if (v1[2] != v2[2] || v1[1] != v2[1])\n    {\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_40fd40",
            "funcStartAddr": "0x40fd40",
            "funcEndAddr": "0x40fd4c",
            "decompiledFuncCode": "int sub_40fd40()\n{\n    unsigned long long *v1;  // rdi\n    unsigned long v2;  // rsi\n\n    return (0 CONCAT *(v1)) % v2 >> 64;\n}\n"
        },
        {
            "funcName": "sub_404020",
            "funcStartAddr": "0x404020",
            "funcEndAddr": "0x40407b",
            "decompiledFuncCode": "int sub_404020()\n{\n    unsigned int v0;  // [bp-0x1c]\n    char v2[47];  // rdx\n    unsigned int v3;  // esi\n\n    if (v2[4 + 1] != 0)\n    {\n        *(__errno_location()) = 95;\n    }\n    if (v0 == 0 && v2[5 + 6] != 0)\n    {\n        v0 = mkdir(v3, 0x1ed);\n        sub_403fc0();\n        return v0;\n    }\n    if (v2[5 + 6] == 0 || v0 != 0)\n    {\n        return v0;\n    }\n}\n"
        },
        {
            "funcName": "sub_413d30",
            "funcStartAddr": "0x413d30",
            "funcEndAddr": "0x413e72",
            "decompiledFuncCode": "typedef struct struct_0 {\n    struct struct_1 *field_0;\n    char padding_8[8];\n    unsigned long long field_10;\n    unsigned long long field_18;\n} struct_0;\n\nint sub_413d30()\n{\n    void tmp_20;  // tmp #20\n    unsigned long long v1[4];  // rdi\n    struct_0 *v2;  // r12\n    void *v3;  // rsi\n    unsigned long v4;  // rdx\n    void *v5;  // rdi\n    void *v6;  // rbp\n    unsigned long v7;  // rbx\n    unsigned long long v9;  // r15\n    unsigned int *v11;  // r14\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rdx\n    unsigned long long v15;  // rdi\n    unsigned long v16;  // rdx\n    char *v18;  // r13\n    void *v20;  // r13\n\n    v2 = v1;\n    v6 = v3;\n    v7 = v4;\n    v18 = *(v1);\n    if (*(v1) != 0)\n    {\n        v11 = __errno_location();\n        while (true)\n        {\n            v13 = fread_unlocked(v6, 0x1, v7, v18);\n            v14 = *(v11);\n            v6 += v13;\n            v7 -= v13;\n            if (v7 == v13)\n            {\n                break;\n            }\n            v15 = v2->field_10;\n            tmp_20 = v14;\n            v16 = (unsigned int)((*(v2->field_0) & 32) == 0? 0 : (unsigned int)v14);\n            *(v11) = ((*(v2->field_0) & 32) == 0? 0 : tmp_20);\n            v2->padding_8();\n            v18 = v2->field_0;\n        }\n    }\n    else\n    {\n        v9 = v1[3];\n        v20 = &v1[263];\n        if (v4 > v1[3])\n        {\n            while (true)\n            {\n                v5 = v6;\n                v6 += v9;\n                v7 -= v9;\n                memcpy(v5, 0x800 - v9 + v20, v9);\n                if ((v6 & 7) != 0)\n                {\n                    v9 = 0x800;\n                    sub_413ee0();\n                }\n                else\n                {\n                    while (true)\n                    {\n                        if (v7 > 2047)\n                        {\n                            v6 += 0x800;\n                            v7 -= 0x800;\n                            v2->field_18 = 0;\n                            return sub_413ee0();\n                        }\n                    }\n                    sub_413ee0();\n                }\n            }\n            v9 = 0x800;\n        }\n        else\n        {\n            v20 = &((unsigned long long [4])((char *)&v1[263] + -1 * v1[3]))[0x100];\n        }\n        v13 = memcpy(v6, v20, v7);\n        v2->field_18 = v9 - v7;\n    }\n    return v13;\n}\n"
        },
        {
            "funcName": "sub_40ef20",
            "funcStartAddr": "0x40ef20",
            "funcEndAddr": "0x40ef7d",
            "decompiledFuncCode": "int sub_40ef20() { crash_skku;\n}"
        },
        {
            "funcName": "sub_404e20",
            "funcStartAddr": "0x404e20",
            "funcEndAddr": "0x404f42",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[20];\n    unsigned int field_14;\n    char field_18;\n} struct_0;\n\nextern unsigned int g_418600;\nextern unsigned int g_418630;\nextern unsigned int g_418c28;\n\nint sub_404e20()\n{\n    unsigned long v0;  // [bp-0x48]\n    char v1;  // [bp-0x2a]\n    unsigned long long v5;  // rbp\n    unsigned long long v6;  // r13\n    struct_0 *v7;  // rdi\n    unsigned long long v8;  // rdx\n    unsigned long long v9;  // rdx\n\n    if (sub_404bd0() == 0)\n    {\n        sub_40af30();\n        v1 = 0;\n        v6 = (unsigned int)sub_40ea00();\n        if (v7->field_18 == 0 && (v7->field_14 & 0xffff00) == 0)\n        {\n            v9 = dcgettext(0x0, 0x418630, 0x5);\n        }\n        if ((v7->field_14 & 0xffff00) != 0 || v7->field_18 != 0)\n        {\n            v8 = dcgettext(0x0, 0x418600, 0x5);\n        }\n        v0 = stack_base + -51;\n        __fprintf_chk();\n        return sub_4119a0();\n    }\n    v5 = (unsigned int)sub_40ea00();\n    dcgettext(0x0, 0x418c28, 0x5);\n    __fprintf_chk();\n    return sub_4119a0();\n}\n"
        },
        {
            "funcName": "sub_40bce0",
            "funcStartAddr": "0x40bce0",
            "funcEndAddr": "0x40bd85",
            "decompiledFuncCode": "int sub_40bce0()\n{\n    unsigned long long v1[10];  // rdi\n    unsigned long long v2[10];  // rbp\n    unsigned long long v3[2];  // r12\n    unsigned long long v4;  // rdi\n    unsigned long long v6;  // rdx\n    unsigned long long v7;  // rcx\n    unsigned long long v8[2];  // rbx\n    unsigned long long v9;  // rax\n    unsigned long long v10;  // rdi\n\n    v2 = v1;\n    v3 = *(v1);\n    if (*(v1) < v1[1])\n    {\n        while (true)\n        {\n            if (*(v3) == 0)\n            {\n                v3 = &v3[2];\n                if (v2[1] <= v3)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v8 = v3[1];\n                v9 = v2[8];\n                if (v3[1] != 0)\n                {\n                    do\n                    {\n                        if (v9 != 0)\n                        {\n                            v4 = *(v8);\n                            rax<8>();\n                            v9 = v2[8];\n                        }\n                        v6 = v8[1];\n                        v7 = v2[9];\n                        v8[0] = 0;\n                        v8[1] = v7;\n                        v2[9] = v8;\n                        v8 = v6;\n                    }\n                    while (v6 != 0);\n                }\n                if (v9 != 0)\n                {\n                    v10 = *(v3);\n                    v9 = rax<8>();\n                }\n                v3[0] = 0;\n                v3 = &v3[2];\n                v3[-1] = 0;\n                if (v2[1] <= v3)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    v2[3] = 0;\n    v2[4] = 0;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_40e72b",
            "funcStartAddr": "0x40e72b",
            "funcEndAddr": "0x40e7f1",
            "decompiledFuncCode": "int sub_40e72b()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long v1;  // [bp-0x50]\n    unsigned long v2;  // [bp-0x48]\n    unsigned int v3;  // [bp-0x2c]\n    unsigned long v4;  // [bp-0x28]\n    unsigned long v5;  // [bp-0x20]\n    unsigned long v6;  // [bp-0x18]\n    unsigned long v7;  // [bp-0x10]\n    unsigned long long v8;  // [bp+0x0]\n    unsigned long long v10;  // [bp+0x10]\n    unsigned long long v11;  // [bp+0x18]\n    unsigned long long v12;  // [bp+0x20]\n    unsigned long long v13;  // [bp+0x28]\n    unsigned long v14;  // rcx\n    unsigned long v15;  // rax\n    unsigned long long v17[7];  // rbx\n    unsigned int *v18;  // r13\n    unsigned long long *v20;  // r12\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // r12\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r14\n    unsigned long long v25;  // r15\n\n    v17 = (v14 == 0? v15 : rbx<8>);\n    v18 = __errno_location();\n    v3 = *(v18);\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = &v17[1];\n    v6 = &v17[1];\n    v7 = (unsigned int)sub_40d1d0();\n    v5 = v7 + 1;\n    v4 = (unsigned int)sub_4112e0();\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = v6;\n    sub_40d1d0();\n    *(v18) = v3;\n    if (v20 != 0)\n    {\n        *(v20) = v7;\n    }\n    v21 = v8;\n    v22 = v10;\n    v23 = v11;\n    v24 = v12;\n    v25 = v13;\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_40f4f0",
            "funcStartAddr": "0x40f4f0",
            "funcEndAddr": "0x40f4f7",
            "decompiledFuncCode": "int sub_40f4f0()\n{\n    unsigned int *v1;  // rdi\n    unsigned long v2;  // rax\n\n    *(v1) = 0;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40ada0",
            "funcStartAddr": "0x40ada0",
            "funcEndAddr": "0x40adc7",
            "decompiledFuncCode": "int sub_40ada0()\n{\n    char *v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned long long v3;  // rdx\n\n    v2 = strlen(v1);\n    if (v2 > 1)\n    {\n        while (true)\n        {\n            v3 = v2 - 1;\n            if (v1[v2 + -1] != 47)\n            {\n                break;\n            }\n            v2 = v3;\n            return 1;\n        }\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40ace0",
            "funcStartAddr": "0x40ace0",
            "funcEndAddr": "0x40ad3a",
            "decompiledFuncCode": "int sub_40ace0()\n{\n    unsigned long long v1;  // rbx\n    unsigned long long v2;  // rcx\n    void *v3;  // rdi\n\n    v1 = (unsigned int)sub_40ac80();\n    v2 = malloc(v1 + (char)(v1 == 0) + 1);\n    if (v2 != 0)\n    {\n        v2 = memcpy(v2, v3, v1);\n        if (v1 == 0)\n        {\n            *((char *)v2) = 46;\n            v1 = 1;\n        }\n        *((char *)(v2 + v1)) = 0;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40ead0",
            "funcStartAddr": "0x40ead0",
            "funcEndAddr": "0x40eb43",
            "decompiledFuncCode": "int sub_40ead0()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v2 = 0x400000000000000;\n    v1 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_40e400();\n}\n"
        },
        {
            "funcName": "sub_411a10",
            "funcStartAddr": "0x411a10",
            "funcEndAddr": "0x411b3c",
            "decompiledFuncCode": "extern unsigned int g_621b34;\n\nint sub_411a10()\n{\n    unsigned int v0;  // [bp-0x60]\n    unsigned long v1;  // [bp-0x58]\n    unsigned long v2;  // [bp-0x50]\n    unsigned long v3;  // [bp-0x38]\n    unsigned long v4;  // [bp-0x30]\n    unsigned int v6;  // [bp+0x100008]\n    unsigned long v7;  // rdx\n    unsigned long v8;  // rcx\n    unsigned int v9;  // rsi\n    unsigned int v10;  // edi\n    unsigned int v11;  // edi\n    unsigned int *v12;  // rax\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rax\n    unsigned long long v15;  // rbx\n    unsigned long long v17;  // rax\n\n    v3 = v7;\n    v1 = stack_base + 8;\n    v4 = v8;\n    v0 = 16;\n    v2 = stack_base + -72;\n    if (v9 == 1030)\n    {\n        v0 = 24;\n        if (g_621b34 >= 0)\n        {\n            v15 = (unsigned int)fcntl(v11, v9);\n            if ((unsigned int)v15 < 0)\n            {\n                v12 = __errno_location();\n                if (*(v12) == 22)\n                {\n                    v15 = (unsigned int)sub_411a10();\n                    if ((unsigned int)v15 >= 0)\n                    {\n                        g_621b34 = -1;\n                    }\n                }\n            }\n            if ((unsigned int)v15 >= 0 || *(v12) != 22)\n            {\n                g_621b34 = 1;\n            }\n        }\n        else\n        {\n            v15 = (unsigned int)sub_411a10();\n        }\n        if (((unsigned int)v15 < 0 || g_621b34 < 0) && (g_621b34 < 0 || *(v12) == 22) && (g_621b34 == -1 || g_621b34 >= 0) && (g_621b34 < 0 || (unsigned int)v15 >= 0) && ((unsigned int)v15 >= 0 || g_621b34 >= 0))\n        {\n            v13 = fcntl(v15, 0x1);\n            if (v13 >= 0)\n            {\n                v14 = fcntl(v15, 0x2);\n            }\n            if (v13 < 0 || v14 == -1)\n            {\n                v15 = -18446744069414584321;\n                close(v11);\n                *(__errno_location()) = v6;\n            }\n        }\n        v17 = v15;\n        return v17;\n    }\n    return fcntl(v10, v9);\n}\n"
        },
        {
            "funcName": "sub_413a0a",
            "funcStartAddr": "0x413a0a",
            "funcEndAddr": "0x413a0f",
            "decompiledFuncCode": "int sub_413a0a()\n{\n}\n"
        },
        {
            "funcName": "sub_40ec00",
            "funcStartAddr": "0x40ec00",
            "funcEndAddr": "0x40ec0a",
            "decompiledFuncCode": "int sub_40ec00()\n{\n}\n"
        },
        {
            "funcName": "sub_412f20",
            "funcStartAddr": "0x412f20",
            "funcEndAddr": "0x412f7c",
            "decompiledFuncCode": "int sub_412f20()\n{\n    unsigned long long v1;  // r12\n    unsigned long long v2;  // rax\n    unsigned int *v3;  // rdi\n\n    v1 = __fpending();\n    v2 = sub_4143e0();\n    if (((char)*(v3) & 32) == 0)\n    {\n        if ((unsigned int)v2 != 0 && v1 == 0)\n        {\n            v2 = 0 - (unsigned int)(char)(*(__errno_location()) != 9);\n        }\n    }\n    else\n    {\n        if ((unsigned int)v2 == 0)\n        {\n            *(__errno_location()) = 0;\n            v2 = -18446744069414584321;\n        }\n    }\n    if ((unsigned int)v2 != 0 && (v1 != 0 || ((char)*(v3) & 32) != 0))\n    {\n        v2 = -18446744069414584321;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_411340",
            "funcStartAddr": "0x411340",
            "funcEndAddr": "0x411370",
            "decompiledFuncCode": "int sub_411340()\n{\n    unsigned int v1;  // rsi\n    void *v2;  // rdi\n    unsigned long long v3;  // rax\n\n    if (v1 == 0 && v2 != 0)\n    {\n        free(v2);\n        return 0;\n    }\n    if (v2 == 0 || v1 != 0)\n    {\n        v3 = realloc(v2, v1);\n        if (v3 == 0 && v1 != 0)\n        {\n            sub_411530(); /* do not return */\n        }\n        if (v1 == 0 || v3 != 0)\n        {\n            return v3;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_411100",
            "funcStartAddr": "0x411100",
            "funcEndAddr": "0x411159",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n} struct_0;\n\nint sub_411100()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long long v2;  // r9\n    struct_0 *v3;  // r8\n    unsigned long long v4;  // rax\n    unsigned long long *v5;  // r10\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // r10\n    unsigned long long v8;  // rax\n\n    v2 = 0;\n    do\n    {\n        v4 = v3->field_0;\n        if (v3->field_0 <= 47)\n        {\n            v5 = v4 + v3->field_10;\n            v3->field_0 = (unsigned int)v4 + 8;\n            v6 = *(v5);\n            v0 = *(v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n        }\n        else\n        {\n            v7 = v3->field_8;\n            v3->field_8 = v3->field_8 + 8;\n            v8 = *(v7);\n            v0 = *(v7);\n            if (v8 == 0)\n            {\n                break;\n            }\n        }\n        v2 += 1;\n    }\n    while (v2 != 10);\n    return sub_410d00();\n}\n"
        },
        {
            "funcName": "sub_40f0b0",
            "funcStartAddr": "0x40f0b0",
            "funcEndAddr": "0x40f0c6",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_40f0b0()\n{\n    unsigned long long v1;  // rax\n    struct_0 *v2;  // rdi\n    struct_0 *v3;  // rsi\n\n    v1 = -18446744069414584321;\n    if (v2->field_8 >= v3->field_8)\n    {\n        v1 = (char)(v2->field_8 > v3->field_8);\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_412990",
            "funcStartAddr": "0x412990",
            "funcEndAddr": "0x4129a5",
            "decompiledFuncCode": "int sub_412990()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_412320();\n}\n"
        },
        {
            "funcName": "sub_413830",
            "funcStartAddr": "0x413830",
            "funcEndAddr": "0x413834",
            "decompiledFuncCode": "int sub_413830()\n{\n    unsigned long long *v1;  // rdi\n\n    return *(v1);\n}\n"
        },
        {
            "funcName": "sub_413a20",
            "funcStartAddr": "0x413a20",
            "funcEndAddr": "0x413cfc",
            "decompiledFuncCode": "extern char g_4139c0;\n\nint sub_413a20()\n{\n    void tmp_2;  // tmp #2\n    void tmp_27;  // tmp #27\n    unsigned long long v0;  // [bp-0x50]\n    unsigned int|char v1;  // [bp-0x48]\n    unsigned long long v3;  // rsi\n    unsigned long long v4;  // rbp\n    unsigned long v5;  // rdi\n    unsigned long long *v6;  // rbx\n    unsigned short v7;  // dx\n    unsigned long long v8;  // rax\n    void *v9;  // r13\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // r14\n    unsigned long long v14[2];  // rbx\n    unsigned long long v16;  // rbp\n    unsigned long long v18;  // r15\n    unsigned long v19;  // rbp\n    char *v21;  // rdi\n    char *v22;  // rsi\n    unsigned long long v23;  // rcx\n    unsigned long v24;  // d\n    unsigned long long v25;  // r14\n    char *v27;  // rsi\n    unsigned long long v28;  // rcx\n    char *v29;  // rdi\n    unsigned long v30;  // rbp\n    unsigned long long v32;  // rsi\n    unsigned long long v34;  // rax\n    unsigned long long v35;  // rdx\n    unsigned long long v36;  // rbp\n    unsigned long v37;  // r14\n    unsigned long long v39;  // rsi\n    unsigned long long v41;  // rax\n    unsigned long long v42;  // rdx\n    unsigned long long v43;  // rbp\n    unsigned long long v45;  // rsi\n    unsigned long long v47;  // rax\n    unsigned long long v48;  // rdx\n    unsigned long long v50;  // rax\n\n    if (v3 != 0)\n    {\n        v4 = v3;\n        if (v5 != 0)\n        {\n            v9 = (unsigned long long)(unsigned int)sub_415f90();\n            if (v9 != 0)\n            {\n                v14[0] = v9;\n                v14[1] = &g_4139c0;\n                v14 = (unsigned long long)(unsigned int)sub_4112e0();\n                v14[2] = v5;\n                setvbuf(v9, &v14[3], 0x0, (v4 <= 0x1000? v4 : 0x1000));\n            }\n            else\n            {\n                v11 = 0;\n            }\n        }\n        else\n        {\n            *(v6) = 0;\n            v6 = (unsigned long long)(unsigned int)sub_4112e0();\n            v6[1] = &g_4139c0;\n            v6[2] = 0;\n            v6[3] = 0;\n            v8 = open(\"/dev/urandom\", 0x0, v7);\n            if ((unsigned int)v8 >= 0)\n            {\n                v16 = __read_chk(v8, (unsigned int)v6 + 32, (!(rbp<8> <= 0x800)? 0x800 : rbp<8>), 0x1018);\n                close(v8);\n                if (v16 <= 2047)\n                {\n                    tmp_2 = v16;\n                    tmp_27 = (char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>);\n                    v18 = (char *)&v6[4] + ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>)? 0 : v16);\n                    v19 = ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>)? 0 : v16) + (!(0x800 - ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>)? 0 : v16) <= 16)? 16 : 0x800 - ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>)? 0 : v16));\n                    *((int *)&v0) = (!(0x800 - (tmp_27? 0 : tmp_2) <= 16)? 16 : 0x800 - (tmp_27? 0 : tmp_2));\n                    gettimeofday(&v1, NULL);\n                    v21 = v18;\n                    v22 = &v1;\n                    for (v23 = v0; v23 != 0; v22 = &v22[v24])\n                    {\n                        v23 -= 1;\n                        *(v21) = v1;\n                        v21 = &v21[v24];\n                    }\n                    if (v19 <= 2047)\n                    {\n                        v25 = (!(0x800 - rbp<8> <= 4)? 4 : 0x800 - rbp<8>);\n                        v27 = &v1;\n                        v1 = getpid();\n                        v28 = v25;\n                        v12 = v25 + v19;\n                        for (v29 = (char *)&v6[4] + v19; v28 != 0; v27 = &v27[v24])\n                        {\n                            v28 -= 1;\n                            *(v29) = v1;\n                            v29 = &v29[v24];\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v12 = 20;\n                gettimeofday(&v1, NULL);\n                *((int128_t *)(v11 + 32)) = *((int128_t *)&v1);\n                v1 = getpid();\n                *((unsigned int *)(v11 + 48)) = v1;\n            }\n            if ((unsigned int)v8 < 0 || v16 <= 2047 && v12 <= 2047 && v19 <= 2047)\n            {\n                v30 = (!(0x800 - r14<8> <= 4)? 4 : 0x800 - r14<8>);\n                v32 = (char *)&v6[4] + v12;\n                v1 = getppid();\n                if ((unsigned int)v30 != 0)\n                {\n                    v34 = 0;\n                    do\n                    {\n                        v35 = v34;\n                        v34 = (unsigned int)v34 + 1;\n                        *((char *)(v32 + v35)) = v1;\n                    }\n                    while ((unsigned int)v34 < (unsigned int)v30);\n                }\n                v36 = v30 + v12;\n                if (v36 <= 2047)\n                {\n                    v37 = (!(0x800 - rbp<8> <= 4)? 4 : 0x800 - rbp<8>);\n                    v39 = (char *)&v6[4] + v36;\n                    v1 = getuid();\n                    if ((unsigned int)v37 != 0)\n                    {\n                        v41 = 0;\n                        do\n                        {\n                            v42 = v41;\n                            v41 = (unsigned int)v41 + 1;\n                            *((char *)(v39 + v42)) = v1;\n                        }\n                        while ((unsigned int)v41 < (unsigned int)v37);\n                    }\n                    v43 = v36 + v37;\n                    if (v43 <= 2047)\n                    {\n                        v45 = (char *)&v6[4] + v43;\n                        v1 = getgid();\n                        if ((unsigned int)(!(0x800 - v43 <= 4)? 4 : 0x800 - v43) != 0)\n                        {\n                            v47 = 0;\n                            do\n                            {\n                                v48 = v47;\n                                v47 = (unsigned int)v47 + 1;\n                                *((char *)(v45 + v48)) = v1;\n                            }\n                            while ((unsigned int)v47 < (!(0x800 - v43 <= 4)? 4 : 0x800 - v43));\n                        }\n                    }\n                }\n            }\n            sub_414190();\n        }\n    }\n    else\n    {\n        v11 = (unsigned int)sub_4112e0();\n        *((long long *)v11) = 0;\n        *((char **)(v11 + 8)) = &g_4139c0;\n        *((long long *)(v11 + 16)) = 0;\n    }\n    v50 = v11;\n    return v50;\n}\n"
        },
        {
            "funcName": "sub_405990",
            "funcStartAddr": "0x405990",
            "funcEndAddr": "0x409727",
            "decompiledFuncCode": "int sub_405990() { crash_skku_timeout;\n}"
        },
        {
            "funcName": "sub_4139c0",
            "funcStartAddr": "0x4139c0",
            "funcEndAddr": "0x413a1d",
            "decompiledFuncCode": "extern unsigned int g_41ab30;\nextern unsigned int g_41ab40;\nextern unsigned int g_61f468;\n\nint sub_4139c0()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n    unsigned long v3;  // rdi\n    unsigned long long v4;  // rbp\n    unsigned int *v5;  // rbx\n    char *v6;  // rax\n\n    v0 = v2;\n    if (v3 == 0)\n    {\n        abort(); /* do not return */\n    }\n    v4 = (unsigned int)sub_40ec50();\n    v5 = __errno_location();\n    if (*(v5) != 0)\n    {\n        v6 = dcgettext(0x0, 0x41ab40, 0x5);\n    }\n    else\n    {\n        v6 = dcgettext(0x0, 0x41ab30, 0x5);\n    }\n    error(g_61f468, *(v5), v6);\n}\n"
        },
        {
            "funcName": "sub_403cfb",
            "funcStartAddr": "0x403cfb",
            "funcEndAddr": "0x403d1a",
            "decompiledFuncCode": "extern unsigned long long g_61f4e8;\n\nint sub_403cfb()\n{\n    unsigned long long v1;  // rax\n\n    v1 = &g_61f4e8;\n    if (false)\n    {\n        v1 = 0;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_404d70",
            "funcStartAddr": "0x404d70",
            "funcEndAddr": "0x404e1c",
            "decompiledFuncCode": "extern unsigned int g_418c1a;\nextern unsigned long long stdout[7];\n\nint sub_404d70()\n{\n    unsigned long v2;  // rdx\n    unsigned long long v3;  // rbx\n    char *v5;  // rax\n\n    __printf_chk(0x1, \"%s -> %s\", sub_40e920(), sub_40e920());\n    if (v2 != 0)\n    {\n        v3 = (unsigned int)sub_40ea00();\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x418c1a, 0x5));\n    }\n    v5 = stdout[5];\n    if (stdout[5] < stdout[6])\n    {\n        stdout[5] = stdout[5] + 1;\n        *(v5) = 10;\n        return v5;\n    }\n}\n"
        },
        {
            "funcName": "sub_40b360",
            "funcStartAddr": "0x40b360",
            "funcEndAddr": "0x40b370",
            "decompiledFuncCode": "int sub_40b360()\n{\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rsi\n\n    return (0 CONCAT v1 % 8 | v1 * 0x2000000000000000) % v2 >> 64;\n}\n"
        },
        {
            "funcName": "sub_40a910",
            "funcStartAddr": "0x40a910",
            "funcEndAddr": "0x40a922",
            "decompiledFuncCode": "int sub_40a910()\n{\n    char *v1;  // rsi\n\n    if (v1 == 0 || *(v1) == 0)\n    {\n        return 2;\n    }\n}\n"
        },
        {
            "funcName": "sub_40ac60",
            "funcStartAddr": "0x40ac60",
            "funcEndAddr": "0x40ac78",
            "decompiledFuncCode": "int sub_40ac60()\n{\n    unsigned long long v1;  // rax\n\n    v1 = sub_40ace0();\n    if (v1 != 0)\n    {\n        return v1;\n    }\n    sub_411530(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_40e690",
            "funcStartAddr": "0x40e690",
            "funcEndAddr": "0x40e702",
            "decompiledFuncCode": "extern int512_t g_621ae0;\n\nint sub_40e690()\n{\n    unsigned long v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned long v2;  // [bp-0x58]\n    unsigned long v3;  // [bp-0x40]\n    unsigned int v5;  // [bp+0x100008]\n    unsigned long v6;  // r8\n    unsigned long long v7[7];  // rbx\n    unsigned long v8;  // rcx\n\n    v7 = (v6 == 0? &g_621ae0 : v6);\n    v3 = v8;\n    *((unsigned long long [7])&v2) = v7[6];\n    *((unsigned long long [7])&v1) = v7[5];\n    v0 = &v7[1];\n    *(__errno_location()) = v5;\n    return sub_40d1d0();\n}\n"
        },
        {
            "funcName": "sub_409930",
            "funcStartAddr": "0x409930",
            "funcEndAddr": "0x40993c",
            "decompiledFuncCode": "int sub_409930()\n{\n    unsigned long long *v1;  // rdi\n    unsigned long v2;  // rsi\n\n    return (0 CONCAT *(v1)) % v2 >> 64;\n}\n"
        },
        {
            "funcName": "sub_40b0e0",
            "funcStartAddr": "0x40b0e0",
            "funcEndAddr": "0x40b1b4",
            "decompiledFuncCode": "int sub_40b0e0()\n{\n    char v0;  // [bp-0x39]\n    char *v2;  // rsi\n    char *v3;  // r12\n    unsigned long long v4;  // r14\n    unsigned long long v5;  // rbx\n    unsigned long v6;  // rdi\n    unsigned long long v7;  // rbp\n    unsigned long long v8;  // rax\n    unsigned long long v10;  // r15\n    char *v11;  // rax\n    unsigned long v12;  // rdi\n    unsigned long long *v13;  // rdx\n    unsigned long long v14;  // rax\n    char v15;  // al\n\n    v3 = v2;\n    v4 = (unsigned int)sub_40ad40();\n    v5 = (unsigned int)sub_40ada0();\n    v7 = v4 - v6 + v5;\n    if (v5 != 0)\n    {\n        v5 = (char)(*((char *)(v4 + v5 - 1)) != 47);\n    }\n    v0 = *(v3);\n    if (*(v3) == 47)\n    {\n        do\n        {\n            v3 = &v3[1];\n        }\n        while (*(v3) == 47);\n    }\n    v8 = strlen(v3);\n    v10 = malloc(v5 + v7 + 1 + v8);\n    if (v8 != 0)\n    {\n        v11 = mempcpy(v8, v6, v7);\n        *(v11) = 47;\n        v12 = &v11[v5];\n        if (v13 != 0)\n        {\n            v14 = 0;\n            v15 = v0 == 47;\n            *(v13) = v12 - rax<8>;\n        }\n        *((char *)(unsigned long long)mempcpy(v12, (unsigned int)v3, v8)) = 0;\n    }\n    return v10;\n}\n"
        },
        {
            "funcName": "sub_40f0d0",
            "funcStartAddr": "0x40f0d0",
            "funcEndAddr": "0x40f0db",
            "decompiledFuncCode": "int sub_40f0d0()\n{\n}\n"
        },
        {
            "funcName": "sub_40f0e0",
            "funcStartAddr": "0x40f0e0",
            "funcEndAddr": "0x40f447",
            "decompiledFuncCode": "int sub_40f0e0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_411530",
            "funcStartAddr": "0x411530",
            "funcEndAddr": "0x41155c",
            "decompiledFuncCode": "extern unsigned int g_41a58f;\nextern unsigned int g_61f468;\n\nint sub_411530()\n{\n    dcgettext(0x0, 0x41a58f, 0x5);\n    error(g_61f468, 0x0, \"%s\");\n}\n"
        },
        {
            "funcName": "sub_404bd0",
            "funcStartAddr": "0x404bd0",
            "funcEndAddr": "0x404c0c",
            "decompiledFuncCode": "int sub_404bd0()\n{\n    unsigned long long v0;  // [bp-0x8]\n    unsigned int v2;  // esi\n    unsigned long long v4;  // rbx\n    unsigned long long v6;  // rbx\n    unsigned int v7;  // edi\n    unsigned long long v9;  // rbx\n    char v10;  // al\n\n    if ((v2 & 0xf000) == 0xa000)\n    {\n        return 1;\n    }\n    v0 = v4;\n    if (sub_4112a0() != 0)\n    {\n        v6 = v0;\n        return 1;\n    }\n    v9 = v0;\n    v10 = euidaccess(v7, 0x2) == 0;\n    return rax<8>;\n}\n"
        },
        {
            "funcName": "sub_41155c",
            "funcStartAddr": "0x41155c",
            "funcEndAddr": "0x411561",
            "decompiledFuncCode": "int sub_41155c()\n{\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_405740",
            "funcStartAddr": "0x405740",
            "funcEndAddr": "0x405764",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[26];\n    char field_1a;\n} struct_0;\n\nint sub_405740()\n{\n    unsigned int *v1;  // rax\n    struct_0 *v2;  // rdi\n\n    v1 = __errno_location();\n    v1 = *(v1) == 1 | *(v1) == 22;\n    if (*(v1) == 22 || *(v1) == 1)\n    {\n        v1 = (unsigned long long)((unsigned int)v2->field_1a ^ 1);\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_40fca0",
            "funcStartAddr": "0x40fca0",
            "funcEndAddr": "0x40fcd1",
            "decompiledFuncCode": "int sub_40fca0()\n{\n    unsigned int v0;  // [bp-0xc]\n    unsigned int v2;  // edx\n    unsigned int v3;  // ecx\n\n    v0 = v2;\n    if (v3 <= 2)\n    {\n        return sub_40fb10();\n    }\n    sub_40faf0(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_409810",
            "funcStartAddr": "0x409810",
            "funcEndAddr": "0x409926",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[8];\n    unsigned int field_c;\n    char padding_10[7];\n    char field_17;\n    char padding_18[20];\n    char field_2c;\n    char padding_2d[7];\n    unsigned int field_34;\n} struct_0;\n\nextern unsigned long long g_621988;\nextern unsigned long long g_621990;\n\nint sub_409810()\n{\n    unsigned long long v0;  // [bp-0x38]\n    unsigned long v1;  // [bp-0x30]\n    unsigned long v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x20]\n    char v4;  // [bp-0x9]\n    struct_0 *v6;  // rcx\n    unsigned long v7;  // r9\n    unsigned long v8;  // r8\n    unsigned long long v9;  // rdi\n    unsigned long long v10;  // rsi\n\n    if (!(v6 != 0))\n    {\n        __assert_fail(); /* do not return */\n    }\n    else if (!(v6->field_0 <= 3))\n    {\n        __assert_fail(); /* do not return */\n    }\n    else if (!((unsigned int)((unsigned long long)v6->field_c - 1) <= 2))\n    {\n        __assert_fail(); /* do not return */\n    }\n    else if (v6->field_34 <= 2)\n    {\n        if (v6->field_17 != 0 && v6->field_2c != 0)\n        {\n            __assert_fail(); /* do not return */\n        }\n        if (v6->field_2c == 0 || v6->field_17 == 0)\n        {\n            if (v6->field_c != 2 && v6->field_34 == 2)\n            {\n                __assert_fail(); /* do not return */\n            }\n            if (v6->field_c == 2 || v6->field_34 != 2)\n            {\n                v4 = 0;\n                v3 = v7;\n                v2 = v8;\n                g_621990 = v9;\n                g_621988 = v10;\n                v1 = stack_base + -9;\n                v0 = 1;\n                return sub_405990();\n            }\n        }\n    }\n    else\n    {\n        __assert_fail(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_40b6c0",
            "funcStartAddr": "0x40b6c0",
            "funcEndAddr": "0x40b6c5",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[32];\n    unsigned long long field_20;\n} struct_0;\n\nint sub_40b6c0()\n{\n    struct_0 *v1;  // rdi\n\n    return v1->field_20;\n}\n"
        },
        {
            "funcName": "sub_4104d0",
            "funcStartAddr": "0x4104d0",
            "funcEndAddr": "0x410589",
            "decompiledFuncCode": "int sub_4104d0()\n{\n    void tmp_12;  // tmp #12\n    char v0;  // [bp-0x19]\n    unsigned long long v2[13];  // rdi\n    unsigned long long v3[13];  // rbp\n    unsigned long long *v4[4];  // rsi\n    unsigned long long v5[4];  // rbx\n    unsigned long long v6;  // rax\n    unsigned long long v8;  // rax\n    unsigned long long v9;  // rdx\n\n    v3 = v2;\n    v5 = *(v4);\n    v9 = (*(v4))[3];\n    if ((*(v4))[1] != 1073741822)\n    {\n    }\n    else\n    {\n        v8 = 1;\n        if ((*(v4))[3] != 1073741822)\n        {\n            v6 = v2[10];\n            *((unsigned long long [13])&(*(v4))[0]) = v2[9];\n            v5[1] = v6;\n        }\n    }\n    if ((*(v4))[1] == 1073741823)\n    {\n        if ((*(v4))[3] != 1073741823)\n        {\n            sub_412f80();\n            v9 = v5[3];\n        }\n        else\n        {\n            *(v4) = 0;\n            v8 = 0;\n        }\n    }\n    if (((*(v4))[3] == 1073741822 || (*(v4))[1] == 1073741823) && ((*(v4))[1] == 1073741823 || (*(v4))[1] != 1073741822) && (v5[3] == 1073741822 || (*(v4))[1] != 1073741823) && ((*(v4))[1] != 1073741823 || (*(v4))[3] != 1073741823))\n    {\n        tmp_12 = v3[12];\n        *((unsigned long long [13])&(*(v4))[2]) = v3[11];\n        v5[3] = tmp_12;\n        v8 = 0;\n    }\n    if (((*(v4))[1] == 1073741823 || (*(v4))[3] != 1073741822) && ((*(v4))[3] != 1073741822 || v5[3] != 1073741822) && ((*(v4))[3] != 1073741822 || (*(v4))[3] != 1073741823) && ((*(v4))[1] == 1073741822 || (*(v4))[1] != 1073741823 || v5[3] != 1073741822) && ((*(v4))[1] == 1073741822 || (*(v4))[1] != 1073741823 || (*(v4))[3] != 1073741823))\n    {\n        v8 = 0;\n        if (v9 == 1073741823)\n        {\n            v0 = 0;\n            sub_412f80();\n            return (unsigned long long)v0;\n        }\n    }\n    if (v9 != 1073741823 || (*(v4))[1] == 1073741822 && (*(v4))[3] == 1073741822 || (*(v4))[1] == 1073741823 && v5[3] == 1073741822 || (*(v4))[1] == 1073741823 && (*(v4))[3] == 1073741823 || (*(v4))[3] == 1073741822 && (*(v4))[1] != 1073741823)\n    {\n        return v8;\n    }\n}\n"
        },
        {
            "funcName": "sub_412ed0",
            "funcStartAddr": "0x412ed0",
            "funcEndAddr": "0x412f1c",
            "decompiledFuncCode": "int sub_412ed0()\n{\n    unsigned long long *v1;  // rsi\n    unsigned long long v2;  // r14\n    void *v3;  // rdx\n    void *v4;  // rdi\n    unsigned int v5;  // rcx\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // rbx\n    void *v8;  // rbp\n    unsigned long long v9;  // rax\n\n    v2 = *(v1);\n    if (*(v1) != 0)\n    {\n        v7 = &v1[1];\n        v8 = v3;\n        do\n        {\n            v6 = memcmp(v4, v8, v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n            v2 = *(v7);\n            v8 += v5;\n            v7 = &v7[1];\n        }\n        while (v2 != 0);\n    }\n    v9 = v2;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_404c20",
            "funcStartAddr": "0x404c20",
            "funcEndAddr": "0x404cb4",
            "decompiledFuncCode": "extern unsigned long long g_61f458;\nextern unsigned long long g_621580;\nextern unsigned long long g_621980;\n\nint sub_404c20()\n{\n    unsigned long long v1;  // rsi\n    unsigned long long v2;  // rbx\n    unsigned long v4;  // rbp\n    unsigned long long v5;  // rax\n\n    v2 = v1;\n    if (g_621980 == 0)\n    {\n        if (g_621980 != 0)\n        {\n            g_621980 = calloc(g_61f458, 0x1);\n        }\n        else\n        {\n            g_621980 = &g_621580;\n            g_61f458 = 0x400;\n        }\n    }\n    if (v1 != 0)\n    {\n        while (true)\n        {\n            v4 = (g_61f458 <= v2? g_61f458 : v2);\n            v5 = sub_40b240();\n            if (v5 == v4)\n            {\n                v2 -= v5;\n                if (v2 == v5)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}\n"
        },
        {
            "funcName": "sub_40b370",
            "funcStartAddr": "0x40b370",
            "funcEndAddr": "0x40b377",
            "decompiledFuncCode": "int sub_40b370()\n{\n    unsigned long v1;  // rax\n\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_4129f0",
            "funcStartAddr": "0x4129f0",
            "funcEndAddr": "0x412a5f",
            "decompiledFuncCode": "extern unsigned long long g_41aa3f;\n\nint sub_4129f0()\n{\n    char v0;  // [bp-0x1c]\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rbx\n    unsigned long v4;  // rdx\n    char *|unsigned long long v5;  // rbp\n    unsigned long long v6;  // rdi\n    unsigned int *v7;  // r12\n    unsigned long long v9;  // rax\n\n    if (v2 != 0)\n    {\n        v3 = -2;\n        if (v4 != 0)\n        {\n            v7 = v6;\n            v5 = v2;\n        }\n    }\n    else\n    {\n        v5 = &g_41aa3f;\n    }\n    if (v2 == 0 || v6 == 0 && v4 != 0)\n    {\n        v7 = &v0;\n    }\n    if (v2 == 0 || v4 != 0)\n    {\n        v3 = mbrtowc((unsigned int)v7, (unsigned int)v5);\n        if (v3 > -3 && sub_412fc0() == 0)\n        {\n            v3 = 1;\n            *(v7) = *(v5);\n        }\n    }\n    v9 = v3;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_40ae60",
            "funcStartAddr": "0x40ae60",
            "funcEndAddr": "0x40aeed",
            "decompiledFuncCode": "int sub_40ae60()\n{\n    unsigned long long v0;  // [bp-0x20]\n    unsigned long v1;  // [bp-0x18]\n    unsigned long long v2;  // [bp-0x10]\n    unsigned long|unsigned long long v3;  // [bp-0x8]\n    unsigned long long v5[3];  // rdi\n    unsigned long v6;  // rax\n    unsigned long long v7;  // r13\n    unsigned long long v8;  // r12\n    unsigned long long v9;  // rdx\n    unsigned long long v10[2];  // rbp\n    unsigned long long v11;  // rbx\n    unsigned long long v13;  // rax\n    unsigned long long v15;  // rbx\n    unsigned long long v16;  // r12\n    unsigned long long v17;  // r13\n    unsigned long long *v18;  // rdi\n    void *v19;  // rdi\n\n    if (v5 != 0)\n    {\n        v3 = v7;\n        v2 = v8;\n        v1 = stack_base + 0;\n        v10 = v9;\n        v0 = v11;\n        v5[0] = (unsigned int)sub_411510();\n        *((unsigned long long [2])&v5[1]) = v10[1];\n        *((unsigned long long [2])&v5[2]) = *(v10);\n        v13 = sub_40c2f0();\n        if (!(v13 != 0))\n        {\n            sub_411530(); /* do not return */\n        }\n        else if (v5 != v13)\n        {\n            v5 = (unsigned long long)(unsigned int)sub_4112e0();\n            v3 = v0;\n            v19 = *(v18);\n            free(v19);\n        }\n        else\n        {\n            v15 = v0;\n            v16 = v2;\n            v17 = v3;\n            return v13;\n        }\n    }\n    else\n    {\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_412fc0",
            "funcStartAddr": "0x412fc0",
            "funcEndAddr": "0x413016",
            "decompiledFuncCode": "int sub_412fc0()\n{\n    unsigned int v1;  // edi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // cc_dep1\n    unsigned long long v5;  // cc_dep2\n    unsigned long v6;  // d\n    char *v7;  // rdi\n    char *v8;  // rsi\n    unsigned long long v9;  // rcx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // cc_dep1\n    char *v12;  // rdi\n    unsigned long long v13;  // rcx\n    char v14;  // cc_dep1\n    char v15;  // cc_dep2\n\n    v10 = 1;\n    if (v3 != 0)\n    {\n        v9 = 2;\n        v7 = \"C\";\n        v3 = setlocale(v1, 0x0);\n        while (v9 != 0)\n        {\n            v9 -= 1;\n            v4 = *(v8);\n            v5 = *(v7);\n            v7 = &v7[v6];\n            v8 = &v8[v6];\n            break;\n        }\n        v10 = 0;\n        v11 = (v4 > v5) - 0 - (v4 < v5);\n        if ((char)v11 != 0)\n        {\n            v12 = \"POSIX\";\n            v13 = 6;\n            while (v13 != 0)\n            {\n                v13 -= 1;\n                v14 = *(v8);\n                v15 = *(v12);\n                v12 = &v12[v6];\n                v8 = &v8[v6];\n                break;\n            }\n            return 0;\n        }\n    }\n    if (v3 == 0 || (char)v11 == 0)\n    {\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_4114b0",
            "funcStartAddr": "0x4114b0",
            "funcEndAddr": "0x4114de",
            "decompiledFuncCode": "int sub_4114b0()\n{\n    unsigned int v1;  // rdi\n    unsigned int v2;  // rsi\n    unsigned long long v3;  // rax\n\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>)) && [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) == 0)\n    {\n        v3 = calloc(v1, v2);\n        if (v3 != 0)\n        {\n            return v3;\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>) || v3 == 0 || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) != 0)\n    {\n        sub_411530(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_40a8b0",
            "funcStartAddr": "0x40a8b0",
            "funcEndAddr": "0x40a8ba",
            "decompiledFuncCode": "int sub_40a8b0()\n{\n}\n"
        },
        {
            "funcName": "sub_40ea10",
            "funcStartAddr": "0x40ea10",
            "funcEndAddr": "0x40ea1f",
            "decompiledFuncCode": "int sub_40ea10()\n{\n}\n"
        },
        {
            "funcName": "sub_40ebc0",
            "funcStartAddr": "0x40ebc0",
            "funcEndAddr": "0x40ebd7",
            "decompiledFuncCode": "int sub_40ebc0()\n{\n}\n"
        },
        {
            "funcName": "sub_404cd0",
            "funcStartAddr": "0x404cd0",
            "funcEndAddr": "0x404d02",
            "decompiledFuncCode": "int sub_404cd0()\n{\n    unsigned long v2;  // rax\n    unsigned int v3;  // eax\n    unsigned long long v4;  // rax\n\n    if ((unsigned int)v2 < 0)\n    {\n        v3 = *(__errno_location());\n        if (v3 == 95 || v3 == 38)\n        {\n            return 0;\n        }\n    }\n    if ((unsigned int)v2 >= 0 || v3 != 95 && v3 != 38)\n    {\n        v2 = fallocate();\n        return v4;\n    }\n}\n"
        },
        {
            "funcName": "sub_4143e0",
            "funcStartAddr": "0x4143e0",
            "funcEndAddr": "0x414458",
            "decompiledFuncCode": "int sub_4143e0()\n{\n    unsigned int v0;  // [bp+0x0]\n    void *v2;  // rdi\n    unsigned long long v4;  // rax\n    unsigned long long v8;  // rax\n\n    if (fileno(v2) >= 0)\n    {\n        v4 = __freading();\n        if ((v4 == 0 || (unsigned long long)lseek(fileno(v2), 0x0, 0x1) != -1) && sub_411b50() != 0)\n        {\n            v8 = fclose(v2);\n            if (v0 != 0)\n            {\n                *(__errno_location()) = v0;\n                v8 = -18446744069414584321;\n            }\n            return v8;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_40e810",
            "funcStartAddr": "0x40e810",
            "funcEndAddr": "0x40e8a5",
            "decompiledFuncCode": "extern unsigned long long *g_61f4b8;\nextern unsigned long long g_61f4c0;\nextern unsigned long long g_61f4c8;\nextern unsigned int g_61f4d0;\nextern unsigned long long g_6219e0;\n\nint sub_40e810()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rbx\n    void *v3;  // rdi\n\n    v1 = g_61f4d0;\n    if (g_61f4d0 > 1)\n    {\n        v2 = &g_61f4b8[3];\n        while (true)\n        {\n            v3 = *(v2);\n            v2 = &v2[2];\n            v1 = free(v3);\n            if (v2 == &g_61f4b8[2 * (unsigned long long)(g_61f4d0 - 2) + 5])\n            {\n                break;\n            }\n        }\n    }\n    if (g_61f4b8[1] != 6429152)\n    {\n        v1 = free(g_61f4b8[1]);\n        g_61f4c0 = 0x100;\n        g_61f4c8 = &g_6219e0;\n    }\n    if (g_61f4b8 != 6419648)\n    {\n        v1 = free(g_61f4b8);\n        g_61f4b8 = &g_61f4c0;\n    }\n    g_61f4d0 = 1;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_416fe8",
            "funcStartAddr": "0x416fe8",
            "funcEndAddr": "0x417008",
            "decompiledFuncCode": "extern unsigned long long g_61ee30;\n\nint sub_416fe8()\n{\n    unsigned long long *v1;  // rbx\n    unsigned long long v2;  // rax\n    unsigned long v4;  // rdx\n\n    v1 = &g_61ee30;\n    while (true)\n    {\n        v2 = *(v1);\n        if (*(v1) == -1)\n        {\n            break;\n        }\n        rax<8>();\n        v1 = &v1[-1];\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_40b550",
            "funcStartAddr": "0x40b550",
            "funcEndAddr": "0x40b68a",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[24];\n    unsigned long long field_18;\n    char padding_20[40];\n    struct struct_1 *field_48;\n} struct_0;\n\nint sub_40b550()\n{\n    unsigned long long v1;  // rdx\n    unsigned long long v2;  // r14\n    unsigned long long v3[4];  // rsi\n    unsigned long long v4[4];  // r13\n    struct_0 *v5;  // rdi\n    unsigned long long v6[10];  // rbp\n    unsigned long long v7;  // r15\n    unsigned long long v8[2];  // rax\n    unsigned long long v9;  // rdx\n    unsigned long long v10[2];  // rbx\n    unsigned long long v11;  // r15\n    unsigned long long v12[2];  // r12\n    unsigned long long v13[2];  // rbx\n    unsigned long long v14[2];  // rax\n    unsigned long long v15;  // rdx\n\n    v2 = v1;\n    v4 = v3;\n    v6 = v5;\n    v12 = *(v3);\n    if (*(v3) < v3[1])\n    {\n        while (true)\n        {\n            v11 = *(v12);\n            if (*(v12) != 0)\n            {\n                v10 = v12[1];\n                if (v12[1] != 0)\n                {\n                    while (true)\n                    {\n                        v7 = *(v10);\n                        v8 = sub_40b380();\n                        v9 = v10[1];\n                        if (*(v8) != 0)\n                        {\n                            v10[1] = v8[1];\n                            v8[1] = v10;\n                            v10 = v9;\n                            if (v9 == 0)\n                            {\n                                break;\n                            }\n                        }\n                        else\n                        {\n                            v8[0] = v7;\n                            v6[3] = v6[3] + 1;\n                            v10[0] = 0;\n                            *((unsigned long long [10])&v10[1]) = v6[9];\n                            v6[9] = v10;\n                            if (v10 == 0)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    v11 = *(v12);\n                }\n                v12[1] = 0;\n                if (v2 == 0)\n                {\n                    v13 = (unsigned long long)(unsigned int)sub_40b380();\n                    if (*(v13) != 0)\n                    {\n                        v14 = v6[9];\n                        if (v6[9] != 0)\n                        {\n                            v6[9] = v5->field_48->field_8;\n                        }\n                        else\n                        {\n                            v14 = malloc(0x10);\n                            if (v14 == 0)\n                            {\n                                return 0;\n                            }\n                        }\n                        if (v14 != 0 || v6[9] != 0)\n                        {\n                            v15 = v13[1];\n                            v14[0] = v11;\n                            v14[1] = v15;\n                            v13[1] = v14;\n                        }\n                    }\n                    else\n                    {\n                        v13[0] = v11;\n                        v6[3] = v6[3] + 1;\n                    }\n                    if (v14 != 0)\n                    {\n                        v12[0] = 0;\n                        v12 = &v12[2];\n                        v4[3] = v4[3] - 1;\n                        if (v4[1] <= v12)\n                        {\n                            break;\n                        }\n                    }\n                }\n            }\n            if (*(v12) == 0 || v2 != 0)\n            {\n                v12 = &v12[2];\n                if (v3[1] <= v12)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    return 1;\n}\n"
        },
        {
            "funcName": "sub_40ef80",
            "funcStartAddr": "0x40ef80",
            "funcEndAddr": "0x40f098",
            "decompiledFuncCode": "int sub_40ef80()\n{\n    char v0;  // [bp-0x158]\n    unsigned long v1;  // [bp-0x150]\n    char v2;  // [bp-0xc8]\n    unsigned long v3;  // [bp-0xc0]\n    unsigned long long|char v5;  // rbx\n    unsigned long v8;  // r13\n    unsigned long long v9;  // rax\n    unsigned long long v10;  // rax\n    void *v11;  // rbp\n    void *v12;  // r12\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rax\n    unsigned long long v15;  // rax\n\n    v5 = 0;\n    v8 = (unsigned int)sub_40ada0();\n    v9 = sub_40ada0();\n    if (v8 == v9)\n    {\n        v10 = memcmp((unsigned long long)(unsigned int)sub_40ad40(), (unsigned long long)(unsigned int)sub_40ad40(), v8);\n        if (v10 == 0)\n        {\n            v11 = (unsigned long long)(unsigned int)sub_40ac60();\n            v12 = (unsigned long long)(unsigned int)sub_40ac60();\n            v13 = __xstat(0x1, (unsigned int)v11, (unsigned int)&v0);\n            if (v13 == 0)\n            {\n                v14 = __xstat(0x1, (unsigned int)v12, (unsigned int)&v2);\n                if (v14 == 0)\n                {\n                    v5 = 0;\n                    if (v1 == v3)\n                    {\n                        v5 = *((long long *)&v0) == *((long long *)&v2);\n                    }\n                    free(v11);\n                    free(v12);\n                }\n                else\n                {\n                    error(0x1, *(__errno_location()), \"%s\");\n                }\n            }\n            else\n            {\n                error(0x1, *(__errno_location()), \"%s\");\n            }\n        }\n    }\n    if (v10 != 0 || v8 != v9 || v14 == 0 && v13 == 0)\n    {\n        v15 = v5;\n        return v15;\n    }\n}\n"
        },
        {
            "funcName": "sub_405960",
            "funcStartAddr": "0x405960",
            "funcEndAddr": "0x40598a",
            "decompiledFuncCode": "extern unsigned int g_61f450;\n\nint sub_405960()\n{\n    unsigned int v1;  // esi\n\n    if (g_61f450 != -1)\n    {\n        return g_61f450;\n    }\n    g_61f450 = umask(0x0, v1);\n    umask(g_61f450, v1);\n    return g_61f450;\n}\n"
        },
        {
            "funcName": "sub_40ac80",
            "funcStartAddr": "0x40ac80",
            "funcEndAddr": "0x40acd8",
            "decompiledFuncCode": "int sub_40ac80()\n{\n    unsigned long long v1;  // rbp\n    char *v2;  // rdi\n    char *v3;  // rbx\n    char v4;  // bpl\n    unsigned long long v5;  // rax\n    unsigned long long v6;  // rcx\n    unsigned long long v7;  // rax\n    unsigned long long v8;  // rdx\n\n    v1 = 0;\n    v3 = v2;\n    v4 = *(v2) == 47;\n    v5 = sub_40ad40();\n    v6 = v5 + -0x1 * v3;\n    if (v5 + -0x1 * v3 > rbp<8>)\n    {\n        if (*((char *)(v5 - 1)) == 47)\n        {\n            for (v8 = v6 - 1; rbp<8> != v8; v8 = v7)\n            {\n                v7 = v8 - 1;\n                if (v3[v8 + -1] != 47)\n                {\n                    break;\n                }\n            }\n            return v8;\n        }\n    }\n    if (v5 + -0x1 * v3 <= rbp<8> || *((char *)(v5 - 1)) != 47)\n    {\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_40ad40",
            "funcStartAddr": "0x40ad40",
            "funcEndAddr": "0x40ad92",
            "decompiledFuncCode": "int sub_40ad40()\n{\n    char *v1;  // rdi\n    unsigned long long v2;  // rdx\n    unsigned long long v3;  // rsi\n    char *v4;  // rcx\n    char *v5;  // rax\n\n    v2 = *(v1);\n    v5 = v1;\n    if (*(v1) == 47)\n    {\n        do\n        {\n            v5 = &v5[1];\n            v2 = *(v5);\n        }\n        while (*(v5) == 47);\n    }\n    if (v2 != 0)\n    {\n        v4 = v5;\n        v3 = 0;\n        while (true)\n        {\n            if (v2 != 47)\n            {\n                if (v3 != 0)\n                {\n                    v5 = v4;\n                    v3 = 0;\n                }\n                v4 = &v4[1];\n                v2 = *(v4);\n                if ((char)v2 == 0)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v4 = &v4[1];\n                v2 = *(v4);\n                v3 = 1;\n                if ((char)v2 == 0)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    return v5;\n}\n"
        },
        {
            "funcName": "sub_4056d0",
            "funcStartAddr": "0x4056d0",
            "funcEndAddr": "0x4056f6",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[64];\n    unsigned long long field_40;\n} struct_0;\n\nint sub_4056d0()\n{\n    unsigned long long v1;  // rax\n    struct_0 *v2;  // rdi\n\n    v1 = sub_40bb50();\n    v2->field_40 = v1;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_40e800",
            "funcStartAddr": "0x40e800",
            "funcEndAddr": "0x40e80a",
            "decompiledFuncCode": "int sub_40e800()\n{\n}\n"
        },
        {
            "funcName": "sub_40e8b0",
            "funcStartAddr": "0x40e8b0",
            "funcEndAddr": "0x40e8c1",
            "decompiledFuncCode": "int sub_40e8b0()\n{\n}\n"
        },
        {
            "funcName": "sub_40cdf0",
            "funcStartAddr": "0x40cdf0",
            "funcEndAddr": "0x40ce44",
            "decompiledFuncCode": "int sub_40cdf0()\n{\n    char v0;  // [bp-0x98]\n    unsigned int v1;  // [bp-0x80]\n    unsigned int v3;  // edi\n    unsigned long long v5;  // rax\n\n    v5 = 0;\n    if (__xstat(0x1, v3, (unsigned int)&v0) == 0)\n    {\n        v5 = sub_4112e0();\n        *((short *)v5) = 317;\n        *((int *)(v5 + 4)) = 4095;\n        *((unsigned int *)(v5 + 8)) = v1;\n        *((int *)(v5 + 12)) = 4095;\n        *((char *)(v5 + 17)) = 0;\n    }\n    return v5;\n}\n"
        },
        {
            "funcName": "sub_40d1d0",
            "funcStartAddr": "0x40d1d0",
            "funcEndAddr": "0x40e308",
            "decompiledFuncCode": "int sub_40d1d0()\n{\n    unsigned long long v0;  // [bp-0x1e8]\n    void tmp_38;  // tmp #38\n    unsigned int *|unsigned long long v1;  // [bp-0xe8]\n    unsigned long long v2;  // [bp-0xe0]\n    unsigned long long v3;  // [bp-0xd8]\n    unsigned long|unsigned long long|char v4;  // [bp-0xc0]\n    unsigned long|unsigned long long|char v5;  // [bp-0xb8]\n    char v6;  // [bp-0xa9]\n    unsigned long long v7;  // [bp-0xa8]\n    unsigned long long v8;  // [bp-0xa0]\n    unsigned long long|char v9;  // [bp-0x98]\n    unsigned long|unsigned long long v10;  // [bp-0x90]\n    unsigned long long|unsigned int v11;  // [bp-0x88]\n    unsigned long long|unsigned int v12;  // [bp-0x80]\n    unsigned long long v13;  // [bp-0x78]\n    unsigned long long v14;  // [bp-0x70]\n    unsigned long v15;  // [bp-0x68]\n    unsigned int v16;  // [bp-0x60]\n    char v17;  // [bp-0x5c]\n    unsigned long long|char v18;  // [bp-0x5b]\n    unsigned long long v19;  // [bp-0x5a]\n    char v20;  // [bp-0x59]\n    unsigned long long v21;  // [bp-0x58]\n    unsigned long long v22;  // [bp-0x50]\n    char v23;  // [bp-0x44]\n    unsigned long long v24;  // [bp-0x40]\n    unsigned int *v25;  // [bp+0x8]\n    unsigned long long v26;  // [bp+0x10]\n    unsigned long long v27;  // [bp+0x18]\n    unsigned long long v28;  // rdi\n    unsigned long long v29;  // r15\n    unsigned long v30;  // r8\n    unsigned long long v31;  // rcx\n    unsigned long v32;  // r9\n    unsigned long|unsigned long long|char v33;  // r10\n    unsigned long long v34;  // rbp\n    unsigned long long v35;  // r13\n    unsigned long long v36;  // r13\n    unsigned long long v37;  // r8\n    unsigned long long v38;  // r9\n    unsigned long long v39;  // r11\n    unsigned long|unsigned long long v40;  // rbp\n    unsigned long long v41;  // rax\n    unsigned long long v42;  // rax\n    char v43;  // al\n    unsigned long long v44;  // rdx\n    unsigned long long v45;  // rcx\n    unsigned long|unsigned long long|unsigned short v46;  // rax\n    unsigned long long v47;  // rcx\n    unsigned long long v48;  // r13\n    unsigned long long v49;  // r13\n    unsigned long long v50;  // r13\n    char v51;  // r13b\n    unsigned long long v52;  // r13\n    unsigned long long v53;  // rdx\n    unsigned long long v54;  // rbx\n    unsigned long long v55;  // r13\n    unsigned long long v56;  // r15\n    unsigned long long v57;  // rbp\n    unsigned long long v58;  // r14\n    char *v59;  // rax\n    unsigned long long v60;  // rcx\n    unsigned long long v62;  // r13\n    unsigned long long v63;  // r13\n    unsigned long long v64;  // rcx\n    char v65;  // al\n    char v66;  // al\n    unsigned int v67;  // eax\n    char v68;  // al\n    unsigned int v70;  // eax\n    char v71;  // al\n    unsigned long v72;  // rdx\n    unsigned long long v73;  // rax\n    char v74;  // al\n    unsigned long long v75;  // rdx\n    unsigned long long v76;  // rbx\n    unsigned long long|unsigned int v77;  // rsi\n    unsigned long long v78;  // r13\n    unsigned long long v79;  // r14\n    unsigned long long v80;  // r12\n    unsigned int v81;  // r13d\n    unsigned long long v82;  // r11\n    char v83;  // dl\n    unsigned long long v84;  // rax\n    unsigned long long v85;  // cc_dep1\n    unsigned long long v86;  // dl\n    unsigned long long v87;  // rax\n    unsigned long long v88;  // rax\n    unsigned long long|char v89;  // rdx\n    unsigned long long v90;  // rdx\n    unsigned long long v91;  // rax\n    unsigned long long v92;  // rax\n\n    v29 = v28;\n    v79 = v77;\n    v78 = v30;\n    v7 = v89;\n    v4 = v31;\n    v16 = v32;\n    v15 = __ctype_get_mb_cur_max();\n    v17 = ((unsigned int)v32 & 2) != 0;\n    switch ((unsigned int)v30)\n    {\n    case 0:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 0;\n        v8 = 0;\n        v13 = 0;\n    case 1:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 0;\n        v8 = 1;\n        v13 = \"'\";\n    case 2:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 0;\n            if (v77 == 0)\n            {\n                v6 = 1;\n                v33 = 0;\n                v76 = 1;\n                v78 = 2;\n                v14 = 0;\n                v18 = 0;\n                v17 = 0;\n                v8 = 1;\n                v13 = \"'\";\n            }\n            else\n            {\n                v84 = 0;\n                v6 = 1;\n                v14 = 0;\n            }\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v76 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 0;\n            v8 = 1;\n            v13 = \"'\";\n        }\n    case 3:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"'\";\n    case 4:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 1;\n        }\n    case 5:\n        if (((char)v32 & 2) == 0)\n        {\n            if (v77 != 0)\n            {\n                *((char *)v28) = 34;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n                v14 = 0;\n            }\n            else\n            {\n                v14 = 0;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n            }\n            v17 = 0;\n            v76 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v76 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n    case 6:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 5;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"\\\"\";\n    case 7:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 1;\n        v8 = 0;\n        v13 = 0;\n    case 8: case 9: case 10:\n        if (v30 != 10)\n        {\n            v4 = v4;\n            v26 = (unsigned int)sub_40d0d0();\n            v27 = (unsigned int)sub_40d0d0();\n        }\n        v76 = 0;\n        if (((char)v32 & 2) == 0)\n        {\n            v78 = (char)*((char *)v26);\n            if (*((char *)v26) != 0)\n            {\n                do\n                {\n                    if (v77 > v76)\n                    {\n                        *((unsigned long long *)(v28 + v76)) = v78;\n                    }\n                    v76 += 1;\n                    v78 = (char)*((char *)(v26 + v76));\n                }\n                while ((char)v78 != 0);\n            }\n        }\n        v5 = v82;\n        v6 = 1;\n        v8 = strlen(v27);\n        v18 = 0;\n        v13 = v27;\n        v14 = 0;\n        v4 = 1;\n    default:\n        abort(); /* do not return */\n    }\n    v82 = v4;\n    while (true)\n    {\n        v38 = v82;\n        v80 = 0;\n        v39 = v78;\n        while (true)\n        {\n            v78 = (char)(v38 != v80);\n            if (v38 == -1)\n            {\n                v78 = (char)(*((char *)(v7 + v80)) != 0);\n            }\n            if (v78 != 0)\n            {\n                v37 = v7 + v80;\n                v5 = (unsigned int)v39 != 2 & v4;\n                if (((unsigned int)v39 != 2 & v4) != 0)\n                {\n                    v78 = v8;\n                    if (v8 != 0)\n                    {\n                        v34 = v80 + v78;\n                        if (v38 == -1 && v78 > 1)\n                        {\n                            v11 = v39;\n                            v10 = v33;\n                            v9 = v37;\n                            v38 = strlen(v7);\n                        }\n                        if (v34 <= v38)\n                        {\n                            v12 = v39;\n                            v11 = v38;\n                            v10 = v33;\n                            v9 = v37;\n                            v78 = memcmp(v37, v13, v8);\n                            v37 = v9;\n                            v33 = (char)v10;\n                            v38 = v11;\n                            v39 = v12;\n                            if (v17 == 0 && v78 == 0)\n                            {\n                                v40 = (char)*((char *)v37);\n                                switch (*((char *)v37))\n                                {\n                                case 0:\n                                    v89 = (char)((unsigned int)v39 == 2);\n                                    v78 = (unsigned int)(0 ^ 1);\n                                    v78 = (char)(0 ^ 1) & (unsigned int)v39 == 2;\n                                    if (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0)\n                                    {\n                                        if (v77 > v76)\n                                        {\n                                            *((char *)(v28 + v76)) = 39;\n                                        }\n                                        if (v77 > v76 + 1)\n                                        {\n                                            *((char *)(v28 + v76 + 1)) = 36;\n                                        }\n                                        if (v77 > v76 + 2)\n                                        {\n                                            *((char *)(v28 + v76 + 2)) = 39;\n                                        }\n                                        v47 = v76 + 3;\n                                        v76 += 4;\n                                        v33 = rax<8>;\n                                        v78 = 0;\n                                        v40 = 48;\n                                    }\n                                    else\n                                    {\n                                        v47 = v76;\n                                        v78 = 0;\n                                        v76 = v47 + 1;\n                                        v78 = v78;\n                                        v40 = 48;\n                                        v78 = 0;\n                                        v40 = 48;\n                                        if (1 < v38)\n                                        {\n                                            v9 = *((char *)(v7 + 0 + 1));\n                                            if (((unsigned int)(char)*((char *)(v7 + 0 + 1)) - 48 & 255) <= 9)\n                                            {\n                                                if (v77 > v76)\n                                                {\n                                                    *((char *)(v28 + v76)) = 48;\n                                                }\n                                                if (v77 > v47 + 2)\n                                                {\n                                                    *((char *)(v28 + v47 + 2)) = 48;\n                                                }\n                                                v76 = v47 + 3;\n                                                v40 = 48;\n                                            }\n                                        }\n                                    }\n                                    if ((((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) == 0 || v77 > v76 + 3) && (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0 || v77 > v76))\n                                    {\n                                        *((char *)(v28 + v47)) = 92;\n                                        v33 = v78;\n                                    }\n                                case 7:\n                                    v40 = 97;\n                                case 8:\n                                    v89 = 0;\n                                    v78 = 0;\n                                    v40 = 98;\n                                case 13:\n                                    v40 = 13;\n                                    v45 = 114;\n                                    v89 = (unsigned int)v39 == 2;\n                                case 32:\n                                    v41 = v5;\n                                    v40 = 32;\n                                case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                                    v89 = 0;\n                                case 35: case 126:\n                                    v42 = v5;\n                                case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                                    v41 = v5;\n                                    v48 = v5;\n                                    v5 = v41;\n                                    v78 = 0;\n                                case 92:\n                                    v44 = v4;\n                                    v40 = 92;\n                                    v45 = 92;\n                                    v89 = v4 & v17 & v8 != 0;\n                                    if ((v4 & v17 & v8 != 0) != 0)\n                                    {\n                                        v80 = 1;\n                                        v46 = 0;\n                                        v78 = 0;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (v8 == 0 || v34 > v38 || v78 != 0)\n                    {\n                        v40 = (char)*((char *)v37);\n                        switch (*((char *)v37))\n                        {\n                        case 0:\n                            if (v17 == 0)\n                            {\n                                v5 = 0;\n                            }\n                            else\n                            {\n                                v4 = (unsigned int)v39 == 2;\n                            }\n                        case 7:\n                            v40 = 97;\n                            break;\n                            if (v17 == 0)\n                            {\n                                v78 = 0;\n                            }\n                            else\n                            {\n                                v87 = 0;\n                            }\n                        case 8:\n                            v40 = 98;\n                        case 9:\n                            v40 = 116;\n                        case 10:\n                            v40 = 110;\n                            v89 = 0;\n                            v78 = 0;\n                        case 11:\n                            v40 = 118;\n                            break;\n                        case 12:\n                            v40 = 102;\n                            break;\n                        case 13:\n                            v5 = 0;\n                        case 32:\n                            v41 = 0;\n                        case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                            v5 = 0;\n                        case 35: case 126:\n                            v42 = 0;\n                            v49 = v5;\n                            v89 = 0;\n                            v5 = v42;\n                        case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                            v41 = 0;\n                        case 39:\n                            v5 = 0;\n                        case 63:\n                            v5 = 0;\n                        case 92:\n                            v5 = 0;\n                        case 123: case 125:\n                            v5 = 0;\n                        default:\n                            v5 = 0;\n                        }\n                    }\n                }\n                else\n                {\n                    v40 = (char)*((char *)v37);\n                    switch (*((char *)v37))\n                    {\n                    case 0:\n                        if (v4 == 0)\n                        {\n                            v5 = 0;\n                            v89 = (char)((unsigned int)v39 == 2);\n                            v36 = 0;\n                            v40 = 0;\n                            break;\n                            v80 += 1;\n                        }\n                    case 7:\n                        v40 = 7;\n                        v45 = 97;\n                        v89 = (unsigned int)v39 == 2;\n                    case 8:\n                        v40 = 8;\n                        v45 = 98;\n                        v89 = (unsigned int)v39 == 2;\n                    case 9:\n                        v40 = 9;\n                        v45 = 116;\n                        v89 = (unsigned int)v39 == 2;\n                        v5 = v17 & (unsigned int)v39 == 2;\n                        if ((v17 & (unsigned int)v39 == 2) == 0)\n                        {\n                            v40 = v45;\n                            v78 = 0;\n                        }\n                    case 10:\n                        v40 = 10;\n                        v45 = 110;\n                    case 11:\n                        v40 = 11;\n                        v45 = 118;\n                        v89 = (unsigned int)v39 == 2;\n                    case 12:\n                        v40 = 12;\n                        v45 = 102;\n                        v89 = (unsigned int)v39 == 2;\n                    case 13:\n                        v40 = 13;\n                        v45 = 114;\n                    case 32:\n                        v40 = 32;\n                        v89 = (char)((unsigned int)v39 == 2);\n                    case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                        v89 = (char)((unsigned int)v39 == 2);\n                        v35 = 0;\n                    case 35: case 126:\n                        v89 = (unsigned int)v39 == 2;\n                    case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                        v89 = (char)((unsigned int)v39 == 2);\n                        break;\n                    case 39:\n                        if ((unsigned int)v39 == 2)\n                        {\n                            if (v77 != 0)\n                            {\n                                v53 = 0;\n                            }\n                            if (v77 == 0 || v14 != 0)\n                            {\n                                if (v77 > v76)\n                                {\n                                    *((char *)(v28 + v76)) = 39;\n                                }\n                                if (v77 > v76 + 1)\n                                {\n                                    *((char *)(v28 + v76 + 1)) = 92;\n                                }\n                                if (v77 > v76 + 2)\n                                {\n                                    v53 = v77;\n                                    *((char *)(v28 + v76 + 2)) = 39;\n                                    v79 = v14;\n                                }\n                                else\n                                {\n                                    v53 = v77;\n                                    v79 = v14;\n                                }\n                            }\n                            v18 = v78;\n                            v76 += 3;\n                            v78 = 0;\n                            v33 = 0;\n                            v14 = v79;\n                            v40 = 39;\n                            v79 = v53;\n                        }\n                        else\n                        {\n                            v18 = v78;\n                            v89 = 0;\n                            v40 = 39;\n                            break;\n                            v78 = ((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1;\n                            v78 = (char)(((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1) | v17;\n                            v78 = 0;\n                            v72 = (unsigned int)((unsigned long long)v25[v40 % 32] >> ((char)v40 & 31)) & 1;\n                            v89 = (unsigned int)v39 == 2;\n                        }\n                        if (v17 == 0)\n                        {\n                            v89 = (unsigned int)v39 == 2;\n                            v80 += 1;\n                            v46 = (v78 ^ 1) & (unsigned int)v33;\n                            if (v46 != 0)\n                            {\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 39;\n                                }\n                                if (v79 > v76 + 1)\n                                {\n                                    *((char *)(v29 + v76 + 1)) = 39;\n                                }\n                                v76 += 2;\n                                v33 = 0;\n                            }\n                            v73 = (unsigned int)v33 ^ 1;\n                            v74 = (char)((unsigned int)v33 ^ 1) & v89;\n                            if (((char)((unsigned int)v33 ^ 1) & v89) != 0)\n                            {\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 39;\n                                }\n                                if (v76 + 1 < v79)\n                                {\n                                    *((char *)(v29 + v76 + 1)) = 36;\n                                }\n                                v75 = v76 + 2;\n                                if (v76 + 2 < v79)\n                                {\n                                    *((char *)(v29 + v76 + 2)) = 39;\n                                }\n                                v76 += 3;\n                                v33 = rax<8>;\n                            }\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            v76 += 1;\n                            v80 += 1;\n                        }\n                    case 63:\n                        if ((unsigned int)v39 != 2)\n                        {\n                            v40 = 63;\n                            v89 = (char)((unsigned int)v39 == 2);\n                            v52 = 0;\n                            break;\n                            v77 = v7;\n                            v40 = (char)*((char *)(v77 + 2));\n                            v77 = 0x7000a38200000000;\n                            v0 = 0x7000a38200000000;\n                            v89 = 0;\n                            v62 = 0;\n                            v40 = 63;\n                            break;\n                            if (v79 > v76)\n                            {\n                                *((char *)(v28 + v76)) = 63;\n                            }\n                            if (v79 > v76 + 1)\n                            {\n                                *((char *)(v28 + v76 + 1)) = 34;\n                            }\n                            if (v79 > v76 + 2)\n                            {\n                                *((char *)(v28 + v76 + 2)) = 34;\n                            }\n                            if (v79 > v76 + 3)\n                            {\n                                *((char *)(v28 + v76 + 3)) = 63;\n                            }\n                            v76 += 4;\n                            v89 = 0;\n                            v78 = 0;\n                            v80 = 2;\n                            v78 = v78;\n                            v78 = 0;\n                        }\n                        else\n                        {\n                            v78 = 0;\n                            v78 = 0;\n                            v40 = 63;\n                        }\n                    case 92:\n                        if ((unsigned int)v39 == 2)\n                        {\n                            v80 += 1;\n                            v46 = v33;\n                            v78 = 0;\n                            v40 = 92;\n                        }\n                    case 123: case 125:\n                        v43 = v38 != 1;\n                        if (v38 == -1)\n                        {\n                            v43 = *((char *)(v7 + 1)) != 0;\n                        }\n                        v89 = (unsigned int)v39 == 2;\n                        if (v43 == 0)\n                        {\n                            break;\n                        }\n                        else\n                        {\n                            v55 = 0;\n                            break;\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v81 = v39;\n                v82 = v38;\n                v83 = v81 == 2;\n                if ((v81 == 2 & v17) == 0 || v76 != 0)\n                {\n                    v84 = (unsigned int)v17 ^ 1;\n                    v85 = v83 & (char)((unsigned int)v17 ^ 1);\n                    v86 = v83 & (char)((unsigned int)v17 ^ 1);\n                    if ((char)v85 == 0)\n                    {\n                        v86 = v84;\n                    }\n                    else if (v18 != 0)\n                    {\n                        if (v6 == 0)\n                        {\n                            v84 = v79 == 0 & v14 != 0;\n                            if ((v79 == 0 & v14 != 0) == 0)\n                            {\n                                v86 = v18;\n                            }\n                        }\n                        else\n                        {\n                            v3 = v27;\n                            v2 = v26;\n                            v1 = v25;\n                            v76 = (unsigned int)sub_40d1d0();\n                        }\n                    }\n                }\n            }\n            if (v78 == 0 && v6 == 0 && v18 != 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && (v79 == 0 & v14 != 0) == 0 || v78 == 0 && (char)v85 == 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || v78 == 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && v18 == 0)\n            {\n                v88 = v13;\n                if (v86 != 0 && v13 != 0)\n                {\n                    v90 = (char)*((char *)v88);\n                    if (*((char *)v88) != 0)\n                    {\n                        v91 = v88 - v76;\n                        do\n                        {\n                            if (v79 > v76)\n                            {\n                                *((unsigned long long *)(v29 + v76)) = v90;\n                            }\n                            v76 += 1;\n                            v90 = (char)*((char *)(v91 + v76));\n                        }\n                        while ((char)v90 != 0);\n                    }\n                }\n                if (v79 > v76)\n                {\n                    *((char *)(v29 + v76)) = 0;\n                }\n            }\n            if (v15 == 1)\n            {\n                v11 = v39;\n                v10 = v38;\n                v9 = v33;\n                v46 = (unsigned short)*((short *)(*((long long *)(unsigned long long)__ctype_b_loc()) + v40 * 2));\n                tmp_38 = v46 & 0x4000;\n                v46 &= 0x4000;\n                v51 = (tmp_38 & 65535) != 0;\n                v89 = (tmp_38 & 65535) == 0 & v4;\n                if (v89 != 0)\n                {\n                    v89 = v4;\n                    v78 = 0;\n                }\n            }\n            else\n            {\n                v24 = 0;\n                if (v38 == -1)\n                {\n                    v11 = v39;\n                    v10 = v33;\n                    v9 = v37;\n                    v38 = strlen(v7);\n                }\n                v21 = v76;\n                v22 = v37;\n                v54 = 0;\n                v19 = v33;\n                *((unsigned long long *)&v20) = v40;\n                v11 = v29;\n                v12 = v79;\n                v9 = v38;\n                v10 = v39;\n                do\n                {\n                    v56 = v80 + v54;\n                    v57 = v7 + v80 + v54;\n                    v46 = sub_4129f0();\n                    v58 = v46;\n                    if (v46 != 0 && v46 != -2 && v46 != -1)\n                    {\n                        if ((int)v10 == 2 && v17 != 0 && v46 != 1)\n                        {\n                            v59 = v7 + v77 + 1;\n                            v77 = v7 + v58 + v77;\n                            while (true)\n                            {\n                                v60 = (unsigned int)*(v59) - 91;\n                                if ((8589934635 & 1 << (v60 & 63)) == 0 || ((unsigned int)*(v59) - 91 & 255) > 33)\n                                {\n                                    v59 = &v59[1];\n                                    if (v77 == v59)\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                            if ((8589934635 & 1 << (v60 & 63)) == 0 || ((unsigned int)*(v59) - 91 & 255) > 33)\n                            {\n                                v78 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                                v54 += v58;\n                                v46 = mbsinit((unsigned int)&v24);\n                            }\n                        }\n                        v78 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                        v54 += v58;\n                        v46 = mbsinit((unsigned int)&v24);\n                    }\n                    if (v46 == -1)\n                    {\n                        v28 = v54;\n                        v40 = v20;\n                        v76 = v21;\n                        v78 = 0;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v79 = v12;\n                        v38 = v9;\n                        v39 = (unsigned int)v10;\n                        v89 = v4;\n                    }\n                    if (v46 == -2)\n                    {\n                        v38 = v9;\n                        v77 = v56;\n                        v46 = v54;\n                        v28 = v54;\n                        v33 = (char)v19;\n                        v40 = v20;\n                        v76 = v21;\n                        v29 = v11;\n                        v79 = v12;\n                        v39 = (unsigned int)v10;\n                        if (v77 < v9 && *((char *)v57) != 0)\n                        {\n                            do\n                            {\n                                v46 += 1;\n                            }\n                            while (v46 < v9 && *((char *)(v22 + v46)) != 0);\n                            v28 = v46;\n                        }\n                        v89 = v4;\n                        v78 = 0;\n                    }\n                    if (v46 == 0 || v46 != -2 && v46 != -1 && (unsigned int)v46 != 0)\n                    {\n                        v28 = v54;\n                        v40 = v20;\n                        v76 = v21;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v89 = (unsigned int)v78 ^ 1;\n                        v79 = v12;\n                        v38 = v9;\n                        v39 = (unsigned int)v10;\n                        v89 = (char)((unsigned int)v78 ^ 1) & v4;\n                    }\n                }\n                while (v28 <= 1);\n                if (v46 == 0 || v46 == -2 || v46 == -1 || (unsigned int)v46 != 0)\n                {\n                    v9 = v78;\n                    v77 = 0;\n                    v63 = v17;\n                    v64 = v28 + v80;\n                    v28 = v5;\n                }\n            }\n            if (false)\n            {\n                v5 = v42;\n                v50 = 0;\n                v87 = v89;\n                *((unsigned long long *)&v4) = v4 & v87;\n            }\n            if (v89 != 0 || v15 != 1)\n            {\n                v9 = v78;\n                v77 = 0;\n                v63 = v17;\n                v64 = v28 + v80;\n                v28 = v5;\n                while (true)\n                {\n                    if (v89 != 0)\n                    {\n                        v65 = (unsigned int)v39 == 2;\n                        if (v63 == 0)\n                        {\n                            v77 = (unsigned int)v33 ^ 1;\n                            v66 = v4 & (char)((unsigned int)v33 ^ 1);\n                            if ((v4 & (char)((unsigned int)v33 ^ 1)) != 0)\n                            {\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 39;\n                                }\n                                if (v79 > v76 + 1)\n                                {\n                                    *((char *)(v29 + v76 + 1)) = 36;\n                                }\n                                v77 = v76 + 2;\n                                if (v79 > v76 + 2)\n                                {\n                                    *((char *)(v29 + v76 + 2)) = 39;\n                                }\n                                v76 += 3;\n                                v33 = v46;\n                            }\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            if (v79 > v76 + 1)\n                            {\n                                v67 = v40;\n                                v68 = (char)v40 % 64;\n                                *((unsigned long long *)(v29 + v76 + 1)) = (unsigned long long)(unsigned int)rax<4> + 48;\n                            }\n                            v46 = v76 + 2;\n                            if (v79 > v76 + 2)\n                            {\n                                v70 = v40;\n                                v71 = (char)v40 % 8;\n                                v46 = (unsigned int)((rax<4> & 7) + 48);\n                                *((unsigned long long *)(v29 + v76 + 2)) = v46;\n                            }\n                            v80 += 1;\n                            v76 += 3;\n                            v40 = ((unsigned int)v40 & 7) + 48;\n                            if (v80 < v64)\n                            {\n                                v77 = v89;\n                            }\n                            else\n                            {\n                                v78 = (char)v9;\n                            }\n                        }\n                        else\n                        {\n                            v4 = v65;\n                        }\n                    }\n                    else\n                    {\n                        v46 = (v77 ^ 1) & (unsigned int)v33;\n                        if (v28 != 0)\n                        {\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            v76 += 1;\n                        }\n                        v80 += 1;\n                        if (v80 >= v64)\n                        {\n                            v78 = (char)v9;\n                        }\n                        else if (v46 != 0)\n                        {\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 39;\n                            }\n                            v46 = v76 + 1;\n                            if (v79 > v76 + 1)\n                            {\n                                *((char *)(v29 + v76 + 1)) = 39;\n                            }\n                            v76 += 2;\n                            v28 = 0;\n                            v33 = 0;\n                        }\n                        else\n                        {\n                            v28 = 0;\n                        }\n                    }\n                    if ((v80 < v64 || v89 == 0) && (v89 == 0 || v63 == 0) && (v80 < v64 || v89 != 0))\n                    {\n                        if (v79 > v76)\n                        {\n                            *((unsigned long long *)(v29 + v76)) = v40;\n                        }\n                        v40 = (char)*((char *)(v7 + v80));\n                        v76 += 1;\n                    }\n                }\n            }\n            if ((v78 == 0 || (unsigned int)v39 == 2) && ((unsigned int)v39 == 2 || v76 == 0) && (v78 == 0 || v17 != 0) && ((unsigned int)v39 == 2 || (v81 == 2 & v17) != 0) && (v76 == 0 || v17 != 0) && (v17 != 0 || (v81 == 2 & v17) != 0))\n            {\n                v3 = v27;\n                v2 = v26;\n                v1 = 0;\n                v76 = (unsigned int)sub_40d1d0();\n            }\n            if (v17 == 0 && v5 == 0 && ((unsigned int)v39 == 2 || (char)(((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1) == 0) || v46 == 0 && (v89 != 0 || v15 != 1) || v17 == 0 && v5 != 0 && ((unsigned int)v39 == 2 || (char)(((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1) == 0))\n            {\n                if (v76 < v79)\n                {\n                    *((unsigned long long *)(v29 + v76)) = v40;\n                }\n                v76 += 1;\n                v6 = (v78 == 0? 0 : (unsigned int)(char)(char)(stack_base)[-169]);\n            }\n            if (v78 == 0 && v6 == 0 && v18 != 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && (v79 == 0 & v14 != 0) == 0 || v78 == 0 && (char)v85 == 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || v78 == 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && v18 == 0 || (v78 == 0 || (unsigned int)v39 == 2) && ((unsigned int)v39 == 2 || v76 == 0) && (v78 == 0 || v17 != 0) && ((unsigned int)v39 == 2 || (v81 == 2 & v17) != 0) && (v76 == 0 || v17 != 0) && (v17 != 0 || (v81 == 2 & v17) != 0) || v78 == 0 && v18 != 0 && v6 != 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0))\n            {\n                v92 = v76;\n                return v92;\n            }\n        }\n        *((char *)v29) = 39;\n        v78 = 2;\n        v13 = \"'\";\n        v8 = 1;\n        v17 = 0;\n        v18 = v84;\n    }\n}\n"
        },
        {
            "funcName": "sub_40bb30",
            "funcStartAddr": "0x40bb30",
            "funcEndAddr": "0x40bb50",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    char field_10;\n} struct_0;\n\nint sub_40bb30()\n{\n    struct_0 *v1;  // rdi\n\n    v1->field_10 = 0;\n    v1->field_0 = 0x3f80000000000000;\n    v1->field_8 = 4590573145673223373;\n    return 4590573145673223373;\n}\n"
        },
        {
            "funcName": "sub_40b940",
            "funcStartAddr": "0x40b940",
            "funcEndAddr": "0x40b97f",
            "decompiledFuncCode": "int sub_40b940()\n{\n    unsigned long long v1[5];  // rdi\n    unsigned long long *v2;  // rdx\n    unsigned long long v3;  // rax\n\n    if (v1[4] != 0)\n    {\n        v2 = *(v1);\n        if (*(v1) < v1[1])\n        {\n            while (true)\n            {\n                v3 = *(v2);\n                if (*(v2) == 0)\n                {\n                    v2 = &v2[2];\n                }\n                else\n                {\n                    return v3;\n                }\n            }\n        }\n        abort(); /* do not return */\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_40fac0",
            "funcStartAddr": "0x40fac0",
            "funcEndAddr": "0x40faca",
            "decompiledFuncCode": "int sub_40fac0()\n{\n}\n"
        },
        {
            "funcName": "sub_40ba00",
            "funcStartAddr": "0x40ba00",
            "funcEndAddr": "0x40ba60",
            "decompiledFuncCode": "int sub_40ba00()\n{\n    unsigned long long v1;  // rdx\n    unsigned long long v2;  // rax\n    unsigned long long v3[2];  // rdi\n    unsigned long long v4;  // r8\n    unsigned long long v5;  // rsi\n    unsigned long long v6[2];  // r8\n    unsigned long long v7;  // rcx\n    unsigned long long v8;  // r9\n    unsigned long long v9[2];  // rdx\n\n    v2 = v1;\n    v9 = *(v3);\n    if (v3[1] > *(v3))\n    {\n        v8 = 0;\n        do\n        {\n            v4 = *(v9);\n            if (*(v9) != 0)\n            {\n                if (v2 <= v8)\n                {\n                    break;\n                }\n                *((unsigned long long *)(v5 + v8 * 8)) = v4;\n                v6 = v9[1];\n                v7 = v8 + 1;\n                if (v9[1] != 0)\n                {\n                    while (true)\n                    {\n                        if (v2 != v7)\n                        {\n                            v7 += 1;\n                            *((unsigned long long [2])(v5 + v7 * 8 - 8)) = *(v6);\n                            v6 = v6[1];\n                            if (v6 == 0)\n                            {\n                                break;\n                            }\n                        }\n                        else\n                        {\n                            return v2;\n                        }\n                    }\n                }\n                v8 = v7;\n            }\n            v9 = &v9[2];\n        }\n        while (v3[1] > v9);\n        return v8;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_4056a0",
            "funcStartAddr": "0x4056a0",
            "funcEndAddr": "0x4056c6",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[56];\n    unsigned long long field_38;\n} struct_0;\n\nint sub_4056a0()\n{\n    unsigned long long v1;  // rax\n    struct_0 *v2;  // rdi\n\n    v1 = sub_40bb50();\n    v2->field_38 = v1;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_405120",
            "funcStartAddr": "0x405120",
            "funcEndAddr": "0x405516",
            "decompiledFuncCode": "extern unsigned int g_418c6d;\nextern unsigned int g_418c7e;\nextern unsigned int g_418c8f;\n\nint sub_405120()\n{\n    void tmp_2;  // tmp #2\n    void tmp_14;  // tmp #14\n    unsigned long|unsigned int v0;  // [bp-0xa0]\n    void tmp_3;  // tmp #3\n    unsigned long v1;  // [bp-0x98]\n    unsigned int v2;  // [bp-0x90]\n    char v3;  // [bp-0x8b]\n    char v4;  // [bp-0x8a]\n    char v5;  // [bp-0x89]\n    void *v6;  // [bp-0x88]\n    unsigned long v7;  // [bp-0x80]\n    unsigned long long v8;  // [bp-0x78]\n    char v9;  // [bp-0x70]\n    unsigned long v10;  // [bp-0x68]\n    unsigned long long *v11;  // [bp-0x60]\n    unsigned long v12;  // [bp-0x58]\n    char *v13;  // [bp-0x48]\n    unsigned int v14;  // [bp-0x3c]\n    unsigned long v15;  // [bp+0x8]\n    unsigned long v16;  // [bp+0x10]\n    unsigned long v17;  // [bp+0x18]\n    unsigned long long *v18;  // [bp+0x20]\n    char *v19;  // [bp+0x28]\n    char v20;  // r9b\n    unsigned int v21;  // r9d\n    void *v22;  // rdx\n    unsigned int v23;  // esi\n    unsigned long v24;  // r8\n    unsigned long v25;  // rcx\n    unsigned int v26;  // edi\n    unsigned long long v27;  // cc_dep1\n    void *v29;  // r11\n    char *v30;  // rsi\n    unsigned long|unsigned int v31;  // rdx\n    unsigned long long v32;  // r9\n    unsigned long long v33;  // r9\n    unsigned long long v34;  // r12\n    unsigned long long|void * v35;  // r13\n    unsigned long long v36;  // r14\n    unsigned long long v37;  // r15\n    unsigned long long v38;  // rbx\n    unsigned long long v39;  // rax\n    unsigned long long v40;  // r15\n    unsigned int *v41;  // rbx\n    unsigned long long v42;  // rbx\n    unsigned long long v43;  // rbp\n    unsigned long long v44;  // rbp\n    unsigned long long v45;  // rax\n\n    v5 = v20;\n    v10 = v15;\n    *(v19) = 0;\n    v1 = v16;\n    v11 = v18;\n    v7 = v17;\n    v13 = v19;\n    *(v18) = 0;\n    if (v17 != 0)\n    {\n        v14 = v21;\n        v36 = 0;\n        v37 = 0;\n        v6 = v22;\n        v2 = v23;\n        *((int *)&v12) = (v24 == 0? v25 : v24);\n        while (true)\n        {\n            v39 = read(v26, v6, (v25 <= v7? *((long long *)&v9) : v7));\n            v8 = v39;\n            v27 = v39;\n            if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>))\n            {\n                v41 = __errno_location();\n                v40 = 0;\n                v44 = (unsigned int)sub_40ea00();\n                error(0x0, *(v41), (unsigned long long)dcgettext(0x0, 0x418c6d, 0x5));\n            }\n            else if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)))\n            {\n                v35 = v6;\n                v34 = v8;\n                v38 = v12;\n                *(v11) = *(v11) + v8;\n                v29 = v6;\n                v3 = v24 != 0;\n                while (true)\n                {\n                    tmp_2 = v38;\n                    tmp_14 = !(v38 <= v34);\n                    v38 = (!(v38 <= v34)? v34 : v38);\n                    v39 = (tmp_14? v34 : tmp_2) != 0 & v3;\n                    if (((tmp_14? v34 : tmp_2) != 0 & v3) != 0)\n                    {\n                        v30 = v35;\n                        v31 = v38;\n                        while (true)\n                        {\n                            if (*(v30) == 0)\n                            {\n                                v30 = &v30[1];\n                                v31 -= 1;\n                                if (v31 != 1)\n                                {\n                                    v0 = v29;\n                                    v39 = (char)(memcmp(v35, v30, (unsigned int)v39 ^ 0) != 0);\n                                }\n                                else\n                                {\n                                    v32 = (0 ^ 1) & (unsigned int)v11;\n                                }\n                            }\n                            else\n                            {\n                                v39 = v39;\n                                v31 = 0;\n                                v39 = 0;\n                            }\n                            if (v31 != 1 || *(v30) != 0)\n                            {\n                                v32 = v21 & v31;\n                                if (v38 == v34 && v39 != 0)\n                                {\n                                    if (v32 != 0)\n                                    {\n                                        v0 = 1;\n                                        v39 = 0;\n                                    }\n                                    else\n                                    {\n                                        v39 = 0;\n                                    }\n                                }\n                            }\n                            if (v39 == 0 || v38 != v34 || v31 == 1 && *(v30) == 0)\n                            {\n                                if (v32 == 0)\n                                {\n                                    break;\n                                }\n                                v0 = 0;\n                            }\n                            if (v32 != 0)\n                            {\n                                *((unsigned long long *)&v4) = v32;\n                                break;\n                            }\n                        }\n                        if (v32 == 0 && v38 == v34 && v39 != 0 && ((v31 & 15) == 0 || *(v30) != 0) && (v31 != 1 || *(v30) != 0))\n                        {\n                            v37 += v38;\n                            v0 = 1;\n                            v4 = 0;\n                        }\n                        else if ((v38 == v34 || v32 != 0) && (v39 != 0 || v32 != 0) && ((v31 & 15) == 0 || v31 == 1 || *(v30) != 0) && (v31 != 1 || *(v30) != 0 || v32 != 0) && (v31 == 1 || v39 == 0 || v32 != 0 || v38 != v34) && (v39 == 0 || *(v30) == 0 || v32 != 0 || v38 != v34))\n                        {\n                            v39 = sub_40b240();\n                            v33 = v4;\n                        }\n                        else if ((v38 == v34 || v32 != 0) && (v39 != 0 || v32 != 0) && ((v31 & 15) == 0 || v31 == 1 || *(v30) != 0) && (v31 != 1 || *(v30) != 0 || v32 != 0) && (v31 == 1 || v39 == 0 || v32 != 0 || v38 != v34) && (v39 == 0 || *(v30) == 0 || v32 != 0 || v38 != v34))\n                        {\n                            v39 = sub_405060();\n                            v33 = v4;\n                        }\n                    }\n                    else\n                    {\n                        v39 = v36;\n                    }\n                    if (v38 == 0 && ((tmp_14? v34 : tmp_2) != 0 & v3) == 0 || ((tmp_14? v34 : tmp_2) != 0 & v3) == 0 && ((char)((unsigned int)v36 ^ 1) & v38 == v34) != 0 || v36 != 0 && ((tmp_14? v34 : tmp_2) != 0 & v3) != 0)\n                    {\n                        v37 += v38;\n                        v0 = 1;\n                        v4 = 0;\n                    }\n                    if ((((tmp_14? v34 : tmp_2) != 0 & v3) == 0 || v36 != 0) && (((char)((unsigned int)v36 ^ 1) & v38 == v34) == 0 || ((tmp_14? v34 : tmp_2) != 0 & v3) != 0) && (v38 != 0 || ((tmp_14? v34 : tmp_2) != 0 & v3) != 0))\n                    {\n                        if (9223372036854775807 - v38 >= v37)\n                        {\n                            v37 += v38;\n                            v34 -= v38;\n                            v35 += v38;\n                            v36 = v39;\n                        }\n                        else\n                        {\n                            v40 = 0;\n                            v42 = (unsigned int)sub_40ea00();\n                            error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x418c8f, 0x5));\n                        }\n                    }\n                    if (v36 == 0)\n                    {\n                        if (v38 == 0 || ((tmp_14? v34 : tmp_2) != 0 & v3) != 0 || ((char)((unsigned int)v36 ^ 1) & v38 == v34) != 0)\n                        {\n                            v39 = sub_40b240();\n                            v33 = v4;\n                            if (v37 != v39)\n                            {\n                                v40 = v36;\n                                v43 = (unsigned int)sub_40ea00();\n                                error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x418c7e, 0x5));\n                            }\n                        }\n                    }\n                    else\n                    {\n                        if (v38 == 0 || ((tmp_14? v34 : tmp_2) != 0 & v3) != 0 || ((char)((unsigned int)v36 ^ 1) & v38 == v34) != 0)\n                        {\n                            v39 = sub_405060();\n                            v33 = v4;\n                            if ((char)v37 == 0)\n                            {\n                                v37 = v39;\n                            }\n                        }\n                    }\n                    if (v36 != 0 && (v38 == 0 || ((tmp_14? v34 : tmp_2) != 0 & v3) != 0 || ((char)((unsigned int)v36 ^ 1) & v38 == v34) != 0) && (char)v37 != 0 || v36 == 0 && (v38 == 0 || ((tmp_14? v34 : tmp_2) != 0 & v3) != 0 || ((char)((unsigned int)v36 ^ 1) & v38 == v34) != 0) && v37 == v39)\n                    {\n                        if (v0 == 0)\n                        {\n                            v34 -= v38;\n                            v36 = v39;\n                            v35 += v38;\n                            v37 = v38;\n                        }\n                        else if (v38 != 0)\n                        {\n                            if (v33 != 0)\n                            {\n                                v37 = v38;\n                                v36 = v39;\n                                v38 = 0;\n                            }\n                            else\n                            {\n                                v34 -= v38;\n                                v36 = v39;\n                                v35 += v38;\n                                v37 = 0;\n                            }\n                        }\n                    }\n                    if (...)\n                    {\n                        tmp_3 = v7;\n                        v7 -= v8;\n                        *((unsigned long long *)&v13) = v39;\n                        if (tmp_3 != v8)\n                        {\n                            v36 = v39;\n                        }\n                    }\n                }\n                if ((v34 == 0 || v38 == 0 && v36 == 0 && v37 == v39 && v0 != 0 || v38 == 0 && (char)v37 != 0 && v0 != 0 && v36 != 0) && tmp_3 != v8)\n                {\n                    v39 = read(v26, v6, (v25 <= v7? *((long long *)&v9) : v7));\n                    v8 = v39;\n                    v27 = v39;\n                }\n                else if ((v34 == 0 || v38 == 0 && v36 == 0 && v37 == v39 && v0 != 0 || v38 == 0 && (char)v37 != 0 && v0 != 0 && v36 != 0) && tmp_3 == v8)\n                {\n                    if (v39 == 0)\n                    {\n                        break;\n                    }\n                }\n                else if (v36 == 0 && v37 != v39 || (char)v37 == 0 && v36 != 0 || 9223372036854775807 - v38 < v37 && (((tmp_14? v34 : tmp_2) != 0 & v3) == 0 || v36 != 0) && (((char)((unsigned int)v36 ^ 1) & v38 == v34) == 0 || v36 != 0) && (v38 != 0 || v36 != 0))\n                {\n                    v45 = v40;\n                    return v45;\n                }\n            }\n            else\n            {\n                v39 = v36;\n            }\n        }\n        if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)))\n        {\n            v40 = 1;\n        }\n        else if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)) || *(v41) != 4)\n        {\n            v45 = v40;\n            return v45;\n        }\n    }\n    v40 = 1;\n    v45 = v40;\n    return v45;\n}\n"
        },
        {
            "funcName": "sub_40fad0",
            "funcStartAddr": "0x40fad0",
            "funcEndAddr": "0x40fae6",
            "decompiledFuncCode": "int sub_40fad0()\n{\n}\n"
        },
        {
            "funcName": "sub_40a0d0",
            "funcStartAddr": "0x40a0d0",
            "funcEndAddr": "0x40a151",
            "decompiledFuncCode": "extern unsigned int g_418e1e;\n\nint sub_40a0d0()\n{\n    unsigned long v2;  // rax\n    unsigned long long v3;  // rbp\n    unsigned long long v4;  // r12\n    unsigned long long v5;  // rax\n\n    if ((unsigned int)v2 != -2)\n    {\n        if ((unsigned int)v2 == -1)\n        {\n            v4 = (unsigned int)sub_40ec50();\n            error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x418e1e, 0x5));\n        }\n        v2 = (unsigned int)sub_40d070();\n        return v5;\n    }\n    v3 = (unsigned int)sub_40ec50();\n    error(0x0, *(__errno_location()), \"%s\");\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_414460",
            "funcStartAddr": "0x414460",
            "funcEndAddr": "0x414464",
            "decompiledFuncCode": "int sub_414460()\n{\n    unsigned int *v1;  // rdi\n    unsigned long v2;  // rax\n\n    *(v1) = *(v1) | 32;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_413940",
            "funcStartAddr": "0x413940",
            "funcEndAddr": "0x41395e",
            "decompiledFuncCode": "int sub_413940()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    __explicit_bzero_chk();\n}\n"
        },
        {
            "funcName": "sub_405700",
            "funcStartAddr": "0x405700",
            "funcEndAddr": "0x405731",
            "decompiledFuncCode": "typedef struct struct_0 {\n    uint128_t field_0;\n    uint128_t field_10;\n    char field_1a;\n    char field_1b;\n    char padding_1c[4];\n    uint128_t field_20;\n    uint128_t field_30;\n    unsigned long long field_40;\n} struct_0;\n\nint sub_405700()\n{\n    struct_0 *v1;  // rdi\n    struct_0 *v2;  // rbx\n    unsigned long long v3;  // rax\n    char v4;  // al\n\n    v2 = v1;\n    *((long long *)&v1->field_30) = 0;\n    v1->field_0 = 0;\n    v1->field_10 = 0;\n    *((int128_t *)&v1->field_1a) = 0;\n    v1->field_20 = 0;\n    v3 = geteuid();\n    v4 = (unsigned int)v3 == 0;\n    *(&((char *)&v2->field_10)[11]) = (unsigned int)v3 == 0;\n    *(&((char *)&v2->field_10)[10]) = (unsigned int)v3 == 0;\n    return rax<8>;\n}\n"
        },
        {
            "funcName": "sub_40b3b0",
            "funcStartAddr": "0x40b3b0",
            "funcEndAddr": "0x40b4b5",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[72];\n    unsigned long long field_48;\n} struct_1;\n\ntypedef struct struct_0 {\n    char field_0;\n    char padding_1[7];\n    unsigned long long field_8;\n} struct_0;\n\ndouble sub_40b3b0()\n{\n    unsigned long long v1;  // rdi\n    struct_1 *v2;  // r12\n    unsigned long long v3;  // rsi\n    unsigned long long *v6;  // rdx\n    unsigned long long *v7;  // rbx\n    unsigned long long v8;  // rsi\n    unsigned long long v10;  // rax\n    unsigned long long v11[2];  // rax\n    unsigned long long v12;  // rsi\n    unsigned long long v14;  // rax\n    struct_0 *v15;  // rbx\n    unsigned long long v16;  // rsi\n    struct_0 *v17;  // rax\n    void v18;  // xmm0\n    uint128_t v19;  // xmm0\n    unsigned long v20;  // rcx\n    void v21;  // xmm0\n\n    v2 = v1;\n    *(v6) = v7;\n    v8 = *(v7);\n    if (*(v7) != 0)\n    {\n        v7 = sub_40b380();\n        if (v8 != v1)\n        {\n            v1 = v3;\n            v10 = *((long long *)(r12<8> + 56))();\n            if (v10 == 0)\n            {\n                v11 = v15->field_8;\n                if (v15->field_8 != 0)\n                {\n                    v12 = *(v11);\n                    if (v1 != *(v11))\n                    {\n                        while (true)\n                        {\n                            v14 = *((long long *)(r12<8> + 56))();\n                            if (v14 == 0)\n                            {\n                                v15 = v15->field_8;\n                                v11 = v15->field_8;\n                                v16 = *(v11);\n                                if (*(v11) == v1 || v15->field_8 == 0)\n                                {\n                                    break;\n                                }\n                            }\n                            else\n                            {\n                                v11 = v15->field_8;\n                            }\n                        }\n                        if (v14 == 0)\n                        {\n                            return v18;\n                        }\n                    }\n                    if ((char)v20 != 0)\n                    {\n                        *((unsigned long long [2])&v15->field_8) = v11[1];\n                        v11[0] = 0;\n                        v11[1] = v2->field_48;\n                        v2->field_48 = v11;\n                    }\n                }\n            }\n        }\n        if ((v8 == v1 || v10 != 0) && (char)v20 != 0)\n        {\n            v17 = v15->field_8;\n            if (v15->field_8 != 0)\n            {\n                v19 = *(v17);\n                *(v15) = *(v17);\n                *((long long *)&v17->field_0) = 0;\n                v17->field_8 = v2->field_48;\n                v2->field_48 = v17;\n                return v19;\n            }\n            *((long long *)&v15->field_0) = 0;\n        }\n        if ((v10 == 0 || (char)v20 == 0 || v15->field_8 == 0) && ((char)v20 == 0 || v15->field_8 == 0 || v8 != v1) && (v8 == v1 || v15->field_8 != 0 || v10 != 0))\n        {\n            return v21;\n        }\n    }\n    if (*(v7) == 0 || v15->field_8 == 0 && v10 == 0 && v8 != v1 || v10 == 0 && v8 != v1 && v1 != *(v11))\n    {\n        return v18;\n    }\n}\n"
        },
        {
            "funcName": "sub_403db0",
            "funcStartAddr": "0x403db0",
            "funcEndAddr": "0x403f40",
            "decompiledFuncCode": "extern unsigned int g_417024;\n\nint sub_403db0()\n{\n    unsigned int v0;  // [bp-0x20]\n    char v2;  // cl\n    char *v3;  // rdi\n    char *v4;  // rsi\n    unsigned long long v6;  // rax\n    unsigned long long v7;  // rbp\n    unsigned int *v8;  // r12\n    unsigned long long v9;  // rbp\n    unsigned long long v10;  // rbx\n    unsigned long long v12;  // rbp\n    unsigned long long v16;  // rax\n    unsigned long long v17;  // rbx\n\n    if (v2 == 0 && *(v3) == 47 && *(v4) == 47)\n    {\n        v0 = 0;\n        sub_40f8a0();\n        v6 = sub_40c5e0();\n        if (v6 == -1)\n        {\n            v9 = (unsigned int)sub_40ea00();\n            error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x417024, 0x5));\n        }\n    }\n    if (*(v4) != 47 || *(v3) != 47 || v2 != 0)\n    {\n        v0 = 0;\n        v7 = (unsigned int)sub_40c5e0();\n        v8 = __errno_location();\n        if (v7 == -1)\n        {\n            v10 = (unsigned int)sub_40ea00();\n            error(0x0, *(v8), (unsigned long long)dcgettext(0x0, 0x417024, 0x5));\n            sub_40f770();\n            sub_40f8a0();\n        }\n        else\n        {\n            v12 = (unsigned int)sub_40f770();\n            sub_40f8a0();\n            if ((unsigned int)v12 <= 0 && !((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, rbp<8>, 0x0<64>, cc_ndep<8>)))\n            {\n                v17 = (unsigned int)sub_40ea00();\n                error(0x0, *(v8), (unsigned long long)dcgettext(0x0, 0x417024, 0x5));\n                v16 = 0;\n            }\n        }\n    }\n    if ((unsigned int)v12 > 0 || v6 == -1)\n    {\n        return 0;\n    }\n    if ((*(v4) == 47 || (unsigned int)v12 <= 0) && ((unsigned int)v12 <= 0 || *(v3) == 47) && ((unsigned int)v12 <= 0 || v2 == 0) && (*(v4) == 47 || v7 != -1) && (*(v3) == 47 || v7 != -1) && (v2 == 0 || v7 != -1) && (*(v4) != 47 || *(v3) != 47 || v6 != -1 || v2 != 0))\n    {\n        if ((*(v4) == 47 || (char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, rbp<8>, 0x0<64>, cc_ndep<8>)) && ((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, rbp<8>, 0x0<64>, cc_ndep<8>) || *(v3) == 47) && ((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, rbp<8>, 0x0<64>, cc_ndep<8>) || v2 == 0))\n        {\n            v16 = 1;\n        }\n        return v16;\n    }\n}\n"
        },
        {
            "funcName": "sub_40c770",
            "funcStartAddr": "0x40c770",
            "funcEndAddr": "0x40ca53",
            "decompiledFuncCode": "extern unsigned int g_417024;\n\nint sub_40c770()\n{\n    unsigned long v0;  // [bp-0xf8]\n    unsigned int v1;  // [bp-0xdc]\n    unsigned long v2;  // [bp-0xd8]\n    unsigned int v3;  // [bp-0xd0]\n    unsigned int v4;  // [bp-0xcc]\n    char v5;  // [bp-0xc8]\n    unsigned int v6;  // [bp-0xb0]\n    unsigned long v7;  // [bp+0x8]\n    unsigned int v8;  // [bp+0x10]\n    unsigned int v9;  // [bp+0x18]\n    unsigned int v10;  // [bp+0x20]\n    unsigned long v11;  // r9\n    char *v12;  // rdi\n    unsigned int v13[2];  // rsi\n    unsigned long long v14;  // rax\n    char *v15;  // ebp\n    unsigned long v16;  // rdx\n    unsigned long|unsigned int v17;  // r15\n    unsigned long v18;  // r8\n    unsigned long long v20;  // rcx\n    unsigned long long v21;  // rsi\n    unsigned long long v24;  // rsi\n    unsigned long long v26;  // rax\n    unsigned long long v27;  // rax\n    unsigned long long v28;  // rax\n    unsigned int *v29;  // rax\n    unsigned long long v30;  // rbx\n    unsigned long long v31;  // rbx\n\n    v2 = v11;\n    v3 = v10;\n    if (*(v12) != 47 && v13[0] == 4)\n    {\n        v17 = v13[1];\n    }\n    if (v16 != 0)\n    {\n        if (v13[1] == 0 || *(v12) == 47 || v13[0] != 4)\n        {\n            v15 = (unsigned long long)(unsigned int)sub_40c5e0();\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>)))\n            {\n                v15 = (unsigned int)(v15 + v12);\n            }\n            else\n            {\n                v14 = 1;\n                if (v15 == -1)\n                {\n                    v17 = (unsigned int)*(__errno_location());\n                }\n            }\n        }\n        if (((v8 & v9) == -1 && (v16 == 0 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>))) && (v13[1] == 0 || *(v12) == 47 || v13[0] != 4) && ((unsigned short)v7 & 0xc00) == 0 && ((unsigned short)v18 & 0x200) == 0 && (unsigned int)v17 != 0 || ((v8 & v9) == -1 && (v16 == 0 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>))) && (v13[1] == 0 || *(v12) == 47 || v13[0] != 4) && !(((unsigned short)v7 & 0xc00) == 0 && ((unsigned short)v18 & 0x200) == 0) || (v8 & v9) != -1 && (v16 == 0 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>))) && (v13[1] == 0 || *(v12) == 47 || v13[0] != 4)) && (unsigned int)v17 != 0) && (char)v3 != 0 && v17 != 0 && v17 != 2)\n        {\n            v27 = __xstat(0x1, v15, (unsigned int)&v5);\n        }\n        if (...)\n        {\n            v29 = __errno_location();\n        }\n    }\n    if (v13[1] == 0 || *(v12) == 47 || v13[0] != 4)\n    {\n        if (v16 == 0)\n        {\n            v15 = v12;\n        }\n        if ((v8 & v9) == -1 && (v16 == 0 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>))))\n        {\n            if (!(((unsigned short)v7 & 0xc00) == 0 && ((unsigned short)v18 & 0x200) == 0))\n            {\n                v1 = (unsigned int)v18 & -19;\n            }\n            if (((unsigned short)v18 & 0x200) == 0 && ((unsigned short)v7 & 0xc00) == 0)\n            {\n                v17 = mkdir(v15, v18);\n                if ((unsigned int)v17 == 0)\n                {\n                    v21 = v20;\n                    (long long)(stack_base)[-216]();\n                    if (((int)v7 & (unsigned int)v18 & 511) != 0)\n                    {\n                        v1 = v18;\n                    }\n                }\n            }\n        }\n        if ((v8 & v9) != -1 && (v16 == 0 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>))))\n        {\n            v1 = (unsigned int)v18 & -64;\n        }\n    }\n    if (v13[1] == 0 && v16 == 0 || v16 == 0 && *(v12) == 47 || v13[1] == 0 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>)) || v16 == 0 && v13[0] != 4 || *(v12) == 47 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>)) || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>)) && v13[0] != 4)\n    {\n        v4 = v8 & v9;\n    }\n    if ((v8 & v9) == -1 && (v16 == 0 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>))) && (v13[1] == 0 || *(v12) == 47 || v13[0] != 4) && !(((unsigned short)v7 & 0xc00) == 0 && ((unsigned short)v18 & 0x200) == 0) || (v8 & v9) != -1 && (v16 == 0 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>))) && (v13[1] == 0 || *(v12) == 47 || v13[0] != 4))\n    {\n        v17 = mkdir(v15, v1);\n        if ((unsigned int)v17 == 0)\n        {\n            v24 = v20;\n            (long long)(stack_base)[-216]();\n        }\n    }\n    if ((v8 & v9) == -1 && (v16 == 0 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>))) && (v13[1] == 0 || *(v12) == 47 || v13[0] != 4) && ((unsigned short)v7 & 0xc00) == 0 && ((unsigned short)v18 & 0x200) == 0 && (unsigned int)v17 != 0 || ((v8 & v9) == -1 && (v16 == 0 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>))) && (v13[1] == 0 || *(v12) == 47 || v13[0] != 4) && !(((unsigned short)v7 & 0xc00) == 0 && ((unsigned short)v18 & 0x200) == 0) || (v8 & v9) != -1 && (v16 == 0 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>))) && (v13[1] == 0 || *(v12) == 47 || v13[0] != 4)) && (unsigned int)v17 != 0)\n    {\n        v17 = *(__errno_location());\n        if ((char)v3 != 0)\n        {\n        }\n        else\n        {\n            v1 = -1;\n        }\n    }\n    if ((v8 & v9) == -1 && (v16 == 0 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>))) && (v13[1] == 0 || *(v12) == 47 || v13[0] != 4) && ((unsigned short)v7 & 0xc00) == 0 && ((unsigned short)v18 & 0x200) == 0 && (unsigned int)v17 == 0 && ((int)v7 & (unsigned int)v18 & 511) != 0 || ((v8 & v9) == -1 && (v16 == 0 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>))) && (v13[1] == 0 || *(v12) == 47 || v13[0] != 4) && ((unsigned short)v7 & 0xc00) == 0 && ((unsigned short)v18 & 0x200) == 0 && (unsigned int)v17 != 0 || ((v8 & v9) == -1 && (v16 == 0 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>))) && (v13[1] == 0 || *(v12) == 47 || v13[0] != 4) && !(((unsigned short)v7 & 0xc00) == 0 && ((unsigned short)v18 & 0x200) == 0) || (v8 & v9) != -1 && (v16 == 0 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>))) && (v13[1] == 0 || *(v12) == 47 || v13[0] != 4)) && (unsigned int)v17 != 0) && (char)v3 == 0 || ((v8 & v9) == -1 && (v16 == 0 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>))) && (v13[1] == 0 || *(v12) == 47 || v13[0] != 4) && !(((unsigned short)v7 & 0xc00) == 0 && ((unsigned short)v18 & 0x200) == 0) || (v8 & v9) != -1 && (v16 == 0 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>))) && (v13[1] == 0 || *(v12) == 47 || v13[0] != 4)) && (unsigned int)v17 == 0)\n    {\n        v26 = sub_40f520();\n        if (v26 >= -1)\n        {\n            v0 = (unsigned int)v7;\n            v28 = sub_4135d0();\n        }\n    }\n    if (...)\n    {\n        v14 = 1;\n    }\n    if (...)\n    {\n        v30 = (unsigned int)sub_40ec50();\n        error(0x0, v17, (unsigned long long)dcgettext(0x0, 0x417024, 0x5));\n        v14 = 0;\n    }\n    if (...)\n    {\n        v31 = (unsigned int)sub_40ec50();\n        error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, (v4 != -1? \"cannot change owner and permissions of %s\" : \"cannot change permissions of %s\"), 0x5));\n        v14 = 0;\n    }\n    return v14;\n}\n"
        },
        {
            "funcName": "sub_40c070",
            "funcStartAddr": "0x40c070",
            "funcEndAddr": "0x40c2c6",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    struct struct_1 *field_48;\n} struct_0;\n\ntypedef struct struct_3 {\n    char padding_0[16];\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    struct struct_2 *field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n} struct_3;\n\ntypedef struct struct_2 {\n    char padding_0[8];\n    unsigned int field_8;\n    unsigned int field_c;\n    char field_10;\n} struct_2;\n\nint sub_40c070()\n{\n    void tmp_10;  // tmp #10\n    void tmp_19;  // tmp #19\n    unsigned long long v0[2];  // [bp-0x20]\n    unsigned long v2;  // rsi\n    unsigned long long v3;  // rdx\n    unsigned long long *v4;  // r12\n    struct_0 *v5;  // rdi\n    struct_3 *v6;  // rbx\n    unsigned long long v7;  // rdx\n    unsigned long long v9;  // rax\n    uint128_t v10;  // xmm1\n    unsigned int v11;  // ymm1\n    struct_2 *v12;  // rdx\n    unsigned long|uint128_t|unsigned int v13;  // xmm1lq\n    uint128_t v14;  // xmm0\n    unsigned int v15;  // ymm0\n    unsigned long long v16;  // xmm0lq\n    unsigned long long v17;  // rax\n    uint128_t v18;  // xmm0\n    unsigned int v19;  // ymm0\n    unsigned long long v20;  // xmm0lq\n    struct_2 *v22;  // rdx\n    uint128_t v23;  // xmm2\n    unsigned int v24;  // ymm2\n    uint128_t v25;  // xmm0\n    uint128_t v26;  // xmm0\n    unsigned int v27;  // ymm0\n    unsigned long|uint128_t|unsigned int v28;  // xmm1\n    uint128_t v29;  // xmm1\n    unsigned int v30;  // ymm1\n    uint128_t v31;  // xmm0\n    unsigned long long v32;  // rax\n    unsigned long long v33;  // rax\n    unsigned long long v34[2];  // r12\n    unsigned long long v35[2];  // rax\n    unsigned long long v36;  // rdx\n\n    if (v2 != 0)\n    {\n        v4 = v3;\n        v6 = v5;\n        v7 = sub_40b3b0();\n        if (v7 != 0)\n        {\n            if (v4 != 0)\n            {\n                *(v4) = v7;\n            }\n            return 0;\n        }\n        if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x10<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n        {\n            v13 = 0;\n            v12 = v6->field_28;\n            v13 = v5->field_18;\n            v9 = v6->field_10;\n            v14 = 0;\n            v15 = v9;\n            xmm0<8> = Conv(128->64, (xmm0<16> * Conv(32->128, Load(addr=(rdx<8> + 0x8<64>), size=4, endness=Iend_LE))))\n        }\n        else\n        {\n            v10 = 0;\n            tmp_10 = v6->field_18 % 2 | (unsigned int)v6->field_18 & 1;\n            v9 = v6->field_10;\n            v11 = tmp_10;\n            v12 = v6->field_28;\n            v13 = (unsigned long long)(unsigned int)xmm1<16> * 2;\n            tmp_19 = v9;\n            v17 = (unsigned int)v9 & 1;\n            v18 = 0;\n            v19 = tmp_19 >> 1 | v17;\n            xmm0<8> = Conv(128->64, ((xmm0<16> * 0x2<8>) * Conv(32->128, Load(addr=(rdx<8> + 0x8<64>), size=4, endness=Iend_LE))))\n        }\n        if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n        {\n            sub_40b4d0();\n            v22 = v6->field_28;\n            v23 = 0;\n            v24 = v6->field_28->field_8;\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x10<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n            {\n                v25 = 0;\n                v25 = (unsigned int)v5->field_10;\n            }\n            else\n            {\n                v26 = 0;\n                v27 = v5->field_10 >> 1 | (unsigned int)v5->field_10 & 1;\n                v25 = xmm0<16> * 2;\n            }\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x10<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n            {\n                v28 = 0;\n                v28 = v5->field_18;\n            }\n            else\n            {\n                v29 = 0;\n                v30 = v5->field_18 >> 1 | (unsigned int)v5->field_18 & 1;\n                v28 = (unsigned long long)(unsigned int)xmm1<16> * 2;\n            }\n            if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n            {\n                xmm0<16> = (xmm0<16> * Conv(32->128, Load(addr=(rdx<8> + 0xc<64>), size=4, endness=Iend_LE)))\n                if (v22->field_10 == 0)\n                {\n                    v31 *= xmm2<16>;\n                }\n                if (((char)(BinaryOp CmpF & 69) & 1) != 0 && ((char)(BinaryOp CmpF & 69) & 1) == 0)\n                {\n                    v32 = sub_40be70();\n                    if (v32 != 0)\n                    {\n                        v33 = sub_40b3b0();\n                    }\n                }\n            }\n        }\n    }\n    if (...)\n    {\n        v34 = v0;\n        if (*(v0) != 0)\n        {\n            v35 = v6->field_48;\n            if (v6->field_48 != 0)\n            {\n                v6->field_48 = v5->field_48->field_8;\n            }\n            else\n            {\n                v35 = malloc(0x10);\n            }\n        }\n        else\n        {\n            v0[0] = v2;\n            v6->field_20 = v6->field_20 + 1;\n            v6->field_18 = v6->field_18 + 1;\n            return 1;\n        }\n    }\n    if (v2 == 0 || ((char)(BinaryOp CmpF & 69) & 1) == 0 && v7 == 0 && ((char)(BinaryOp CmpF & 69) & 1) != 0 && (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1 && v33 != 0 && (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1 && v32 != 0)\n    {\n        abort(); /* do not return */\n    }\n    if (...)\n    {\n        return -18446744069414584321;\n    }\n    if (...)\n    {\n        v36 = v34[1];\n        v35[0] = v2;\n        v35[1] = v36;\n        v34[1] = v35;\n        v6->field_20 = v6->field_20 + 1;\n        return 1;\n    }\n}\n"
        },
        {
            "funcName": "sub_411570",
            "funcStartAddr": "0x411570",
            "funcEndAddr": "0x41197b",
            "decompiledFuncCode": "int sub_411570()\n{\n    unsigned long long v0;  // [bp-0x178]\n    void tmp_11;  // tmp #11\n    char [3]|char v1;  // [bp-0x58]\n    char v2[3];  // [bp-0x50]\n    unsigned int v4;  // edx\n    unsigned long|unsigned long long|unsigned int v5;  // rdi\n    unsigned long v6;  // rbp\n    unsigned long long *v7;  // rcx\n    char *v9;  // r8\n    unsigned long v11;  // rsi\n    unsigned long long *v12;  // r15\n    unsigned int *v13;  // r12\n    unsigned int *v14;  // r12\n    unsigned long long v15;  // rbx\n    unsigned long v16;  // rax\n    unsigned int v17;  // eax\n    unsigned long long v18;  // r12\n    unsigned long long v19;  // rax\n    unsigned long long v20;  // rax\n    unsigned long long v21;  // rdx\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // rsi\n    char v25;  // sil\n    unsigned long long v26;  // r12\n    unsigned long long v27;  // r12\n    unsigned long long v28;  // rcx\n    unsigned long long v29;  // rcx\n    unsigned long long v30;  // rdx\n    unsigned long long v31;  // rsi\n    char v32[3];  // r8\n    unsigned long long v33;  // rbx\n    unsigned long long v34;  // rcx\n    unsigned long long|unsigned int v35;  // rdi\n    unsigned long long v36;  // rcx\n    unsigned long long|unsigned int v37;  // rdi\n    unsigned long long v38;  // rcx\n    unsigned long long v39;  // rcx\n    unsigned long long v40;  // rcx\n    unsigned long long v43;  // cc_dep1\n    unsigned long long v44;  // cc_dep1\n    unsigned int v45;  // cc_dep1\n    unsigned int v46;  // cc_dep1\n    unsigned int v47;  // cc_dep1\n    unsigned long long v48;  // rax\n    unsigned long long v49;  // r8\n\n    if (v4 <= 36)\n    {\n        v6 = v5;\n        v12 = (v11 == 0? stack_base + -64 : v11);\n        *(v13) = 0;\n        v13 = __errno_location();\n        v15 = (char)*((char *)v5);\n        v31 = *((long long *)(unsigned long long)__ctype_b_loc());\n        for (v16 = v5; (*((char *)(v31 + (v15 << 1) + 1)) & 32) != 0; v15 = (char)*((char *)v16))\n        {\n            v16 += 1;\n        }\n        if (v15 != 45)\n        {\n            v33 = strtoul();\n            if (*(v12) != v5)\n            {\n                v17 = *(v14);\n                if ((v17 == 34 || *(v14) == 0) && v9 != 0)\n                {\n                    v18 = v1[0];\n                    if (v1[0] != 0)\n                    {\n                        *((char *[3])&v1[0]) = v1;\n                        v20 = strchr(v9, v18);\n                        v32 = v1;\n                    }\n                }\n            }\n            else\n            {\n                *((char **)&v1[0]) = v9;\n                if (v9 != 0)\n                {\n                    v18 = (char)*((char *)v6);\n                    if (*((char *)v6) != 0)\n                    {\n                        v33 = 1;\n                        v19 = strchr(v9, (char)*((char *)v5));\n                        v32 = v1;\n                    }\n                }\n            }\n        }\n        if (*(v12) == v5 && v15 != 45 && *((char *)v6) != 0 && v9 != 0 && v19 != 0 || v15 != 45 && v1[0] != 0 && *(v12) != v5 && v9 != 0 && (v17 == 34 || *(v14) == 0) && v20 != 0)\n        {\n            v21 = v18 - 69;\n            if ((v18 - 69 & 255) <= 47)\n            {\n                *((unsigned long long *)&v1) = v21;\n                v0 = 142129060940101;\n                if (((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) != 0)\n                {\n                    *((char *[3])&v2[0]) = v32;\n                    v22 = strchr(v9, 0x30);\n                    v32 = v2;\n                    if (v22 != 0)\n                    {\n                        v23 = v32[1];\n                        if (v32[1] != 68)\n                        {\n                            if (v23 != 105)\n                            {\n                                v30 = v1;\n                                if (v23 != 66)\n                                {\n                                    /* goto *((long long *)(rdx<8> * 8 + 4302296)); */\n                                }\n                            }\n                            else\n                            {\n                                v24 = 0;\n                                v30 = 0x400;\n                                v25 = v32[2] == 66;\n                                v31 = rsi<8> * 2 + 1;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if ((*(v12) == v5 && v15 != 45 && *((char *)v6) != 0 && v9 != 0 && v19 != 0 || v15 != 45 && v1[0] != 0 && *(v12) != v5 && v9 != 0 && (v17 == 34 || *(v14) == 0) && v20 != 0) && (v18 - 69 & 255) <= 47 && ((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) != 0 && v22 == 0 || (*(v12) == v5 && v15 != 45 && *((char *)v6) != 0 && v9 != 0 && v19 != 0 || v15 != 45 && v1[0] != 0 && *(v12) != v5 && v9 != 0 && (v17 == 34 || *(v14) == 0) && v20 != 0) && (v18 - 69 & 255) <= 47 && ((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) == 0 || (*(v12) == v5 && v15 != 45 && *((char *)v6) != 0 && v9 != 0 && v19 != 0 || v15 != 45 && v1[0] != 0 && *(v12) != v5 && v9 != 0 && (v17 == 34 || *(v14) == 0) && v20 != 0) && (v18 - 69 & 255) > 47)\n        {\n            v31 = 1;\n            v30 = 0x400;\n        }\n        if (...)\n        {\n            v31 = 2;\n            v30 = 1000;\n        }\n        if (...)\n        {\n            v26 = (unsigned int)v18 - 66;\n            switch (v26)\n            {\n            case 0:\n                if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                {\n                    v33 *= 0x400;\n                    break;\n                }\n            case 3:\n                v40 = v30;\n                v5 = 6;\n                do\n                {\n                    v33 = v33 * v40;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v47 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v47 != 1);\n            case 5: case 37:\n                v28 = v30;\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v48 = tmp_11 * v28 * v28;\n                    v33 = v48;\n                }\n                else\n                {\n                    v33 = -1;\n                }\n            case 9: case 41:\n                v33 = v33 * v30;\n            case 11: case 43:\n                v29 = v30;\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v33 = tmp_11 * v29;\n                    break;\n                }\n            case 14:\n                v34 = v30;\n                v35 = 5;\n                do\n                {\n                    v33 = v33 * v34;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v43 = v35;\n                    v35 -= 1;\n                }\n                while (v43 != 1);\n            case 18: case 50:\n                v39 = v30;\n                v5 = 4;\n                do\n                {\n                    v33 = v33 * v39;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v46 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v46 != 1);\n                break;\n            case 23:\n                v38 = v30;\n                v5 = 8;\n                do\n                {\n                    v33 = v33 * v38;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v45 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v45 != 1);\n            case 24:\n                v36 = v30;\n                v37 = 7;\n                do\n                {\n                    v33 = v33 * v36;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v44 = v37;\n                    v37 -= 1;\n                }\n                while (v44 != 1);\n            case 32:\n                if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                {\n                    v33 *= 0x200;\n                    break;\n                }\n            case 33:\n                v49 = &v32[v31];\n                *(v12) = v49;\n            case 53:\n                if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                {\n                    v33 = -1;\n                    break;\n                }\n                else\n                {\n                    v33 *= 2;\n                    break;\n                }\n            default:\n                *(v7) = v33;\n            }\n            if (v26 <= 53)\n            {\n                v27 = v26;\n            }\n        }\n        v31 = 1;\n        v31 = 1;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        *(v7) = v33;\n        return stack_base + 0;\n    }\n    __assert_fail(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_40a8f0",
            "funcStartAddr": "0x40a8f0",
            "funcEndAddr": "0x40a90a",
            "decompiledFuncCode": "int sub_40a8f0()\n{\n    unsigned long long v1;  // rax\n\n    v1 = sub_40a3e0();\n    if (v1 != 0)\n    {\n        return v1;\n    }\n    sub_411530(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_40b990",
            "funcStartAddr": "0x40b990",
            "funcEndAddr": "0x40b9e9",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_40b990()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rcx\n    unsigned long long v3[2];  // rdx\n    unsigned long long v4;  // rax\n    unsigned long v5;  // rsi\n    struct_0 *v6;  // rdi\n    unsigned long long v7;  // rax\n\n    v1 = sub_40b380();\n    v2 = v1;\n    v3 = v1;\n    while (true)\n    {\n        v4 = *(v3);\n        v3 = v3[1];\n        if (v4 == v5 && v3 != 0)\n        {\n            return *(v3);\n        }\n        if (v3 == 0)\n        {\n            while (true)\n            {\n                v2 = &v2[2];\n                if (v6->field_8 > v2)\n                {\n                    v7 = *(v2);\n                    if (*(v2) != 0)\n                    {\n                        break;\n                    }\n                }\n                else\n                {\n                    v7 = 0;\n                }\n            }\n        }\n    }\n    return v7;\n}\n"
        },
        {
            "funcName": "sub_413d20",
            "funcStartAddr": "0x413d20",
            "funcEndAddr": "0x413d25",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_0;\n\nint sub_413d20()\n{\n    struct_0 *v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rax\n\n    v1->field_10 = v2;\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_40c540",
            "funcStartAddr": "0x40c540",
            "funcEndAddr": "0x40c54d",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_40c540()\n{\n    struct_0 *v1;  // rdi\n    unsigned long v2;  // rsi\n\n    return (0 CONCAT v1->field_8) % v2 >> 64;\n}\n"
        },
        {
            "funcName": "sub_405770",
            "funcStartAddr": "0x405770",
            "funcEndAddr": "0x405931",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned int field_10;\n    char padding_14[4];\n    unsigned long long field_18;\n    char field_1b;\n    char padding_1c[8];\n    char field_24;\n    char padding_25[6];\n    char field_2b;\n} struct_0;\n\ntypedef struct struct_1 {\n    char padding_0[24];\n    unsigned int field_18;\n} struct_1;\n\nextern unsigned int g_4186e8;\nextern unsigned int g_418ca3;\n\nint sub_405770()\n{\n    unsigned long|unsigned int v1;  // rsi\n    unsigned int v2;  // r12d\n    unsigned int v3;  // ebx\n    char v4;  // r8b\n    struct_0 *v5;  // rdi\n    struct_1 *v6;  // r9\n    struct_1 *v7;  // rcx\n    struct_1 *v8;  // r9\n    unsigned long|unsigned int v9;  // edx\n    unsigned int v10;  // eax\n    char v11;  // ah\n    unsigned int v12;  // eax\n    unsigned long long v13;  // rax\n    unsigned int *v14;  // rbx\n    unsigned int v15;  // eax\n    unsigned long long v16;  // rax\n    unsigned long long v17;  // rax\n    unsigned long long v18;  // rdx\n    unsigned int *v19;  // r14\n    unsigned int v20;  // ebx\n    unsigned int *v21;  // r14\n    unsigned int *v22;  // r15\n    unsigned int v23;  // r14d\n    unsigned int *v24;  // r15\n    unsigned long long v25;  // r12\n    unsigned long long v26;  // rax\n    unsigned long long v27;  // r12\n\n    v2 = v1;\n    v3 = v9;\n    if (v4 == 0)\n    {\n        if ((71776119061217535 & v5->field_18) != 0)\n        {\n            v1 = v6->field_18;\n            v9 = v7->field_18;\n        }\n        else if (v5->padding_25[1] != 0)\n        {\n            v1 = v8->field_18;\n            v9 = v5->field_10;\n        }\n        if ((71776119061217535 & v5->field_18) != 0 || v5->padding_25[1] != 0)\n        {\n            v10 = !((unsigned int)rdx<8>);\n            v11 = (char)(!((unsigned int)rdx<8>) >> 8) | 14;\n            v12 = rax<4> & v1;\n            if (((unsigned short)v12 & 4095) != 0)\n            {\n                v13 = sub_40d0b0();\n                if (v13 != 0)\n                {\n                    v14 = __errno_location();\n                    v15 = *(v14);\n                    if (*(&((char *)&v5->field_18)[3]) != 0 || v15 != 22 && v15 != 1)\n                    {\n                        v25 = (unsigned int)sub_40ea00();\n                        error(0x0, *(v14), (unsigned long long)dcgettext(0x0, 0x418ca3, 0x5));\n                    }\n                }\n            }\n        }\n    }\n    if ((unsigned int)v9 != -1)\n    {\n        if ((((unsigned short)v12 & 4095) == 0 || (71776119061217535 & v5->field_18) == 0 || v13 == 0 || v4 != 0) && (((unsigned short)v12 & 4095) == 0 || v13 == 0 || v5->padding_25[1] == 0 || v4 != 0))\n        {\n            v17 = fchown(v3);\n            if (v17 != 0)\n            {\n                v23 = *(v22);\n                v22 = __errno_location();\n                if (*(v22) == 1 || v23 == 22)\n                {\n                    fchown(v3);\n                    *(v24) = v23;\n                }\n            }\n        }\n    }\n    else\n    {\n        if ((((unsigned short)v12 & 4095) == 0 || (71776119061217535 & v5->field_18) == 0 || v13 == 0 || v4 != 0) && (((unsigned short)v12 & 4095) == 0 || v13 == 0 || v5->padding_25[1] == 0 || v4 != 0))\n        {\n            v16 = lchown(v2);\n            if (v16 != 0)\n            {\n                v20 = *(v19);\n                v19 = __errno_location();\n                if (v20 == 22 || *(v19) == 1)\n                {\n                    lchown(v2);\n                    *(v21) = v20;\n                }\n            }\n        }\n    }\n    if (((unsigned short)v12 & 4095) == 0 || v13 == 0 || v4 != 0 || (71776119061217535 & v5->field_18) == 0 && v5->padding_25[1] == 0)\n    {\n        if (((unsigned int)v9 == -1 || v17 == 0) && (v16 == 0 || (unsigned int)v9 != -1))\n        {\n            v18 = 1;\n        }\n        if ((unsigned int)v9 == -1 && v16 != 0 || (unsigned int)v9 != -1 && v17 != 0)\n        {\n            v26 = sub_405740();\n            v18 = 0;\n            if (v26 == 0)\n            {\n                v27 = (unsigned int)sub_40ea00();\n                error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x4186e8, 0x5));\n            }\n        }\n    }\n    if (v4 == 0 && ((unsigned short)v12 & 4095) != 0 && v13 != 0 && ((71776119061217535 & v5->field_18) != 0 || v5->padding_25[1] != 0) || ((unsigned int)v9 == -1 || v17 != 0) && ((unsigned int)v9 != -1 || v16 != 0) && (((unsigned short)v12 & 4095) == 0 || (71776119061217535 & v5->field_18) == 0 || v13 == 0 || v4 != 0) && (((unsigned short)v12 & 4095) == 0 || v13 == 0 || v5->padding_25[1] == 0 || v4 != 0) && v26 == 0)\n    {\n        v18 = 0 - (unsigned int)v5->padding_1c[3];\n    }\n    return v18;\n}\n"
        },
        {
            "funcName": "sub_40e5e0",
            "funcStartAddr": "0x40e5e0",
            "funcEndAddr": "0x40e5ef",
            "decompiledFuncCode": "extern int512_t g_621ae0;\n\nint sub_40e5e0()\n{\n    unsigned long v1;  // rdi\n\n    return *((int *)(v1 == 0? &g_621ae0 : v1));\n}\n"
        },
        {
            "funcName": "sub_409e70",
            "funcStartAddr": "0x409e70",
            "funcEndAddr": "0x409e81",
            "decompiledFuncCode": "int sub_409e70()\n{\n}\n"
        },
        {
            "funcName": "sub_4129d0",
            "funcStartAddr": "0x4129d0",
            "funcEndAddr": "0x4129e8",
            "decompiledFuncCode": "int sub_4129d0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_412320();\n}\n"
        },
        {
            "funcName": "sub_409ae0",
            "funcStartAddr": "0x409ae0",
            "funcEndAddr": "0x409b08",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned int field_10;\n    char padding_14[4];\n    unsigned long long field_18;\n    unsigned short field_20;\n    char padding_22[6];\n    unsigned long long field_28;\n} struct_0;\n\nint sub_409ae0()\n{\n    struct_0 *v1;  // rsi\n    unsigned int v2;  // edi\n\n    v1->field_0 = v2;\n    v1->field_28 = 0;\n    v1->field_8 = 0;\n    v1->field_18 = 0;\n    v1->field_20 = 0;\n    v1->field_10 = 1;\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_409e90",
            "funcStartAddr": "0x409e90",
            "funcEndAddr": "0x409fbb",
            "decompiledFuncCode": "int sub_409e90()\n{\n    unsigned int *v0;  // [bp-0x160]\n    unsigned int v1;  // [bp-0x158]\n    unsigned long v2;  // [bp-0x150]\n    unsigned int v3;  // [bp-0x148]\n    unsigned int v4;  // [bp-0x144]\n    unsigned int v6;  // edx\n    unsigned int v7;  // ebp\n    unsigned long long v8;  // rbx\n    unsigned int v9;  // r9d\n    void *v11;  // rbx\n    unsigned int v12;  // edi\n    unsigned long v13;  // rsi\n    unsigned int v14;  // r8d\n    unsigned int *v16;  // r9\n    unsigned long long|unsigned int v17;  // r12\n    unsigned long v18;  // rcx\n    unsigned long long v19;  // rax\n\n    v7 = v6;\n    v8 = linkat();\n    if ((char)v9 == 1 && (unsigned int)v8 != 0 && *(v0) == 17)\n    {\n        v0 = __errno_location();\n        v11 = (unsigned long long)(unsigned int)sub_409e00();\n        if (v11 != 0)\n        {\n            v1 = v12;\n            v2 = v13;\n            v3 = v6;\n            v4 = v14;\n            v16 = v0;\n            if (sub_40fb10() != 0)\n            {\n                v17 = *(v0);\n            }\n            else\n            {\n                v0 = v0;\n                v17 = renameat(v7, (unsigned int)v11, v7, v18);\n                if (v17 != 0)\n                {\n                    v17 = *(v0);\n                }\n                v0 = v0;\n                unlinkat(v7, (unsigned int)v11, 0x0);\n                v16 = v0;\n            }\n            if (v11 != stack_base + -312)\n            {\n                v0 = v16;\n                free(v11);\n                v16 = v0;\n            }\n            v8 = 1;\n            if (v17 != 0)\n            {\n                *((unsigned long long *)&v16) = v17;\n                v8 = -18446744069414584321;\n            }\n        }\n        else\n        {\n            v8 = -18446744069414584321;\n        }\n    }\n    v19 = v8;\n    return v19;\n}\n"
        },
        {
            "funcName": "sub_40b6b0",
            "funcStartAddr": "0x40b6b0",
            "funcEndAddr": "0x40b6b5",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[24];\n    unsigned long long field_18;\n} struct_0;\n\nint sub_40b6b0()\n{\n    struct_0 *v1;  // rdi\n\n    return v1->field_18;\n}\n"
        },
        {
            "funcName": "sub_411b90",
            "funcStartAddr": "0x411b90",
            "funcEndAddr": "0x411bb8",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n    char padding_50[8];\n    unsigned long long field_58;\n} struct_0;\n\nint sub_411b90()\n{\n    unsigned long long v1;  // rax\n    struct_0 *v2;  // rdi\n\n    v1 = 0;\n    if (v2->field_28 <= v2->field_20)\n    {\n        v1 = v2->field_10 - v2->field_8;\n        if (((unsigned short)v2->field_0 & 0x100) != 0)\n        {\n            v1 = v2->field_10 - v2->field_8 + v2->field_58 - v2->field_48;\n        }\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_410aa0",
            "funcStartAddr": "0x410aa0",
            "funcEndAddr": "0x410ab0",
            "decompiledFuncCode": "int sub_410aa0()\n{\n}\n"
        },
        {
            "funcName": "sub_409fd0",
            "funcStartAddr": "0x409fd0",
            "funcEndAddr": "0x40a0c4",
            "decompiledFuncCode": "int sub_409fd0()\n{\n    unsigned long v0;  // [bp-0x148]\n    unsigned int v1;  // [bp-0x140]\n    unsigned long v3;  // rsi\n    unsigned int v4;  // ebp\n    char v5;  // cl\n    unsigned int *v6;  // r14\n    void *v7;  // rbx\n    unsigned long v8;  // rdi\n    unsigned long long v9;  // rax\n    unsigned long v10;  // rdx\n    unsigned long long v11;  // rax\n    unsigned long|unsigned int v12;  // r12d\n    unsigned long long v13;  // rbx\n    unsigned long long v14;  // rax\n\n    v4 = v3;\n    v13 = symlinkat();\n    if (v5 == 1 && (unsigned int)v13 != 0)\n    {\n        v6 = __errno_location();\n        if (*(v6) == 17)\n        {\n            v7 = (unsigned long long)(unsigned int)sub_409e00();\n            if (v7 != 0)\n            {\n                v0 = v8;\n                v1 = v3;\n                v9 = sub_40fb10();\n                if (v9 != 0)\n                {\n                    v12 = *(v6);\n                }\n                else\n                {\n                    v11 = renameat(v4, (unsigned int)v7, v4, v10);\n                    if (!(v11 == 0))\n                    {\n                        v12 = *(v6);\n                        unlinkat(v4, (unsigned int)v7, 0x0);\n                    }\n                    else if (v7 != stack_base + -312)\n                    {\n                        free(v7);\n                    }\n                }\n                if (v11 != 0 || v9 != 0)\n                {\n                    if (v7 != stack_base + -312)\n                    {\n                        free(v7);\n                    }\n                    if (v12 != 0)\n                    {\n                        *((unsigned long *)&v6) = v12;\n                        v13 = -18446744069414584321;\n                    }\n                }\n                if (v12 == 0 || v11 == 0 && v9 == 0)\n                {\n                    v13 = 1;\n                }\n            }\n            else\n            {\n                v13 = -18446744069414584321;\n            }\n        }\n    }\n    v14 = v13;\n    return v14;\n}\n"
        },
        {
            "funcName": "sub_412e60",
            "funcStartAddr": "0x412e60",
            "funcEndAddr": "0x412ecd",
            "decompiledFuncCode": "int sub_412e60()\n{\n    unsigned long long v1;  // rax\n\n    v1 = sub_412ba0();\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>))\n    {\n        sub_412cc0();\n        sub_412d40();\n        r9<8>();\n        v1 = -1;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_40add0",
            "funcStartAddr": "0x40add0",
            "funcEndAddr": "0x40add5",
            "decompiledFuncCode": "int sub_40add0()\n{\n}\n"
        },
        {
            "funcName": "sub_4112e0",
            "funcStartAddr": "0x4112e0",
            "funcEndAddr": "0x4112fa",
            "decompiledFuncCode": "int sub_4112e0()\n{\n    unsigned int v1;  // rdi\n    unsigned long long v2;  // rax\n\n    v2 = malloc(v1);\n    if (v2 == 0 && v1 != 0)\n    {\n        sub_411530(); /* do not return */\n    }\n    if (v1 == 0 || v2 != 0)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_416030",
            "funcStartAddr": "0x416030",
            "funcEndAddr": "0x4161ec",
            "decompiledFuncCode": "int sub_416030() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40d0b0",
            "funcStartAddr": "0x40d0b0",
            "funcEndAddr": "0x40d0cc",
            "decompiledFuncCode": "int sub_40d0b0()\n{\n    unsigned int v0;  // [bp-0xc]\n    unsigned int v2;  // edx\n\n    v0 = v2;\n    return sub_412b60();\n}\n"
        },
        {
            "funcName": "sub_40ba70",
            "funcStartAddr": "0x40ba70",
            "funcEndAddr": "0x40badb",
            "decompiledFuncCode": "int sub_40ba70()\n{\n    unsigned long long v1[2];  // rdi\n    unsigned long long *v2;  // r14\n    unsigned long long v4;  // rdi\n    unsigned long long v5;  // rdx\n    unsigned long long v6;  // rsi\n    unsigned long long v7;  // rax\n    unsigned long long v8;  // rbp\n    unsigned long long v9;  // rdi\n    unsigned long long v10[2];  // rbx\n\n    v2 = *(v1);\n    if (v1[1] > *(v1))\n    {\n        v8 = 0;\n        while (true)\n        {\n            v4 = *(v2);\n            if (*(v2) != 0)\n            {\n                v10 = v2;\n                while (true)\n                {\n                    v6 = v5;\n                    v7 = v5();\n                    if (v7 != 0)\n                    {\n                        v10 = v10[1];\n                        v8 += 1;\n                        if (v10 == 0)\n                        {\n                            break;\n                        }\n                        v9 = *(v10);\n                    }\n                }\n                if (v7 != 0)\n                {\n                    v2 = &v2[2];\n                    if (v1[1] <= v2)\n                    {\n                        break;\n                    }\n                }\n                else if (v7 == 0)\n                {\n                    return stack_base + 0;\n                }\n            }\n        }\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_412320",
            "funcStartAddr": "0x412320",
            "funcEndAddr": "0x412887",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned int field_0;\n    unsigned int field_4;\n    char padding_8[24];\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned int field_30;\n} struct_1;\n\ntypedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    unsigned int field_18;\n    char padding_1c[4];\n    unsigned long long field_20;\n    unsigned int field_28;\n    unsigned int field_2c;\n    unsigned int field_30;\n} struct_0;\n\nextern unsigned int g_41a9e0;\nextern unsigned int g_41aa24;\n\nint sub_412320()\n{\n    struct_0 *|struct_1 * v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x60]\n    unsigned long v4;  // [bp-0x58]\n    unsigned int|char v5;  // [bp-0x4c]\n    char v6[2];  // [bp-0x48]\n    unsigned long long v7;  // [bp-0x40]\n    struct_1 *v8;  // [bp+0x8]\n    unsigned int v9;  // [bp+0x10]\n    unsigned long v10;  // rcx\n    unsigned long v11;  // r8\n    unsigned int v12;  // r13d\n    unsigned long v13;  // rdi\n    unsigned long v14;  // rsi\n    unsigned long v15;  // r12\n    char v16[2];  // rdx\n    unsigned long|unsigned int v17;  // eax\n    unsigned long long v18;  // rax\n    char *|unsigned long long v19;  // rdx\n    unsigned long long v20;  // rax\n    unsigned int v22;  // r9d\n    unsigned long long v23;  // rax\n    unsigned long long|unsigned int v24;  // r9\n    unsigned long|unsigned long long * v26;  // rax\n    unsigned long|unsigned int v27;  // rdx\n    unsigned long v29;  // rax\n    char v30[3];  // rcx\n    unsigned long v31;  // rsi\n    unsigned long long v32;  // rcx\n    char *v33;  // rdi\n    char v34[3];  // rsi\n    unsigned long long v35;  // cc_dep1\n    unsigned long long v36;  // cc_dep2\n    unsigned long v37;  // d\n    unsigned long long v38;  // cc_dep1\n    unsigned int v39;  // ecx\n    unsigned long long v40;  // rax\n    unsigned long long v41;  // rcx\n    unsigned long long|unsigned int v42;  // rdx\n    unsigned int v44;  // eax\n    unsigned long long v45;  // r14\n    unsigned long|unsigned int v46;  // rbp\n    unsigned long long v47;  // rax\n    char v48[3];  // r14\n    unsigned long v49;  // r13\n    char *|char [2] v50;  // r15\n    char v51[3];  // rax\n    unsigned int v52;  // ecx\n    char v53[3];  // r8\n    unsigned long long v54;  // rcx\n    unsigned long long v55;  // rcx\n    unsigned long long v56;  // rdx\n    unsigned int v57;  // eax\n    char *v58;  // rax\n    unsigned long long v59;  // r14\n    char v60;  // r14b\n    unsigned long long v61;  // r14\n    char v62;  // r14b\n    unsigned long long v63;  // rax\n\n    v3 = v10;\n    v4 = v11;\n    v12 = v8->field_4;\n    if ((unsigned int)v13 > 0)\n    {\n        v17 = v0->field_0;\n        v46 = v13;\n        v15 = v14;\n        v50 = v16;\n        v0->field_10 = 0;\n        if (!((unsigned int)v17 != 0))\n        {\n            v0->field_0 = 1;\n            v17 = 1;\n        }\n        else if (v0->field_18 != 0)\n        {\n            v18 = v16[0];\n            v19 = v0->field_20;\n            if (((char)(v18 - 43) & 253) == 0)\n            {\n                v20 = v50[1];\n                v50 = &v50[1];\n                v49 = (unsigned int)(v20 == 58? 0 : (unsigned int)r13<8>);\n            }\n        }\n        if ((unsigned int)v17 == 0 || v0->field_18 == 0)\n        {\n            *((unsigned long *)&v0->field_30) = v17;\n            *((unsigned long *)&v0->field_2c) = v17;\n            v0->field_20 = 0;\n            if (!(v16[0] != 45))\n            {\n                v0->field_28 = 2;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            else if (v16[0] != 43)\n            {\n                v19 = 0;\n                if (v9 == 0)\n                {\n                    v5 = v22;\n                    v23 = getenv(\"POSIXLY_CORRECT\");\n                    v24 = v5;\n                    if (v23 != 0)\n                    {\n                        v19 = v0->field_20;\n                    }\n                    else\n                    {\n                        v0->field_28 = 1;\n                        v19 = v0->field_20;\n                    }\n                }\n                if (v9 != 0 || v23 != 0)\n                {\n                    v0->field_28 = 0;\n                }\n            }\n            else\n            {\n                v0->field_28 = 0;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            v0->field_18 = 1;\n            v18 = v50[0];\n        }\n        if ((unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0)\n        {\n            v49 = (unsigned int)(v18 == 58? 0 : (unsigned int)r13<8>);\n        }\n        if (*(v19) == 0 || v19 == 0 && (unsigned int)v17 == 0 || v19 == 0 && v0->field_18 == 0 || v19 == 0 && ((char)(v18 - 43) & 253) != 0 || ((char)(v18 - 43) & 253) == 0 && v8->field_20 == 0 && (unsigned int)v17 != 0 && v0->field_18 != 0)\n        {\n            v26 = v0->field_0;\n            if (v0->field_30 > v0->field_0)\n            {\n                v0->field_30 = v8->field_0;\n            }\n            if (v8->field_0 < v0->field_2c)\n            {\n                v0->field_2c = v8->field_0;\n            }\n            if (v0->field_28 == 1)\n            {\n                v27 = v0->field_30;\n                if (v0->field_2c != v0->field_30)\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v5 = v24;\n                        sub_411c20();\n                        v27 = v0->field_0;\n                        v24 = v5;\n                    }\n                }\n                else\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v0->field_2c = v8->field_0;\n                        v27 = v26;\n                    }\n                }\n                if ((unsigned int)v13 > (unsigned int)v27)\n                {\n                    v29 = v27;\n                    while (true)\n                    {\n                        v30 = *((long long *)(v15 + v29 * 8));\n                        v31 = v29;\n                        v27 = v29;\n                        if (*((char *)*((long long *)(v15 + (v29 << 3)))) == 45 && v30[1] != 0)\n                        {\n                            v26 = (unsigned long long)v0->field_0;\n                        }\n                        if (v30[1] == 0 || *((char *)*((long long *)(v15 + (v29 << 3)))) != 45)\n                        {\n                            v27 = v31 + 1;\n                            v29 += 1;\n                            v0->field_0 = (unsigned int)v31 + 1;\n                            if ((unsigned int)v13 <= (unsigned int)v29)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    if (v30[1] == 0 || *((char *)*((long long *)(v15 + (v29 << 3)))) != 45)\n                    {\n                        v26 = v27;\n                    }\n                    else if (*((char *)*((long long *)(v15 + (v29 << 3)))) == 45 && v30[1] != 0)\n                    {\n                        *((unsigned long *)&v0->field_30) = v27;\n                    }\n                }\n                v26 = v27;\n                *((unsigned long *)&v0->field_30) = v27;\n            }\n            if ((unsigned int)v13 != (unsigned int)v26)\n            {\n                v32 = 3;\n                v33 = \"-\";\n                v48 = *((long long *)(v15 + v26 * 8));\n                v34 = *((long long *)(v15 + v26 * 8));\n                while (v32 != 0)\n                {\n                    v32 -= 1;\n                    v35 = v34[0];\n                    v36 = *(v33);\n                    v33 = &v33[v37];\n                    v34 = &v34[v37];\n                    break;\n                }\n                v38 = (v35 > v36) - 0 - (v35 < v36);\n                if ((char)v38 == 0)\n                {\n                    v42 = v0->field_2c;\n                    v39 = v0->field_30;\n                    v40 = (unsigned int)v26 + 1;\n                    v0->field_0 = v0->field_2c;\n                    if ((unsigned int)v42 != v39)\n                    {\n                        if (v0->field_2c != v8->field_30)\n                        {\n                            sub_411c20();\n                            v42 = v0->field_2c;\n                        }\n                    }\n                    else\n                    {\n                        v0->field_2c = v0->field_2c;\n                        v42 = v40;\n                    }\n                    v0->field_30 = v46;\n                    v0->field_0 = v46;\n                }\n                else if (v48[0] == 45)\n                {\n                    v41 = v48[1];\n                    if (v48[1] != 0 && v3 != 0)\n                    {\n                        if (!(v41 != 45))\n                        {\n                            v0->field_20 = &v48[2];\n                            v2 = \"-\";\n                            v1 = v49;\n                            v0 = v0;\n                        }\n                        else if (v24 != 0)\n                        {\n                            if (v48[2] == 0)\n                            {\n                                *((unsigned long long *)&v5) = v24;\n                                v47 = strchr(v50, v41);\n                            }\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v46 = v0->field_30;\n                v42 = v0->field_2c;\n            }\n        }\n    }\n    if (((unsigned int)v13 > 0 && (unsigned int)v13 != (unsigned int)v26 && (((char)(v18 - 43) & 253) == 0 || *(v19) == 0 || v19 == 0) && (*(v19) == 0 || v19 == 0 || (unsigned int)v17 != 0) && (*(v19) == 0 || v19 == 0 || v0->field_18 != 0) && (v8->field_20 == 0 || *(v19) == 0 || (unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 == 0 || (unsigned int)v13 == (unsigned int)v26 && (unsigned int)v13 > 0 && (((char)(v18 - 43) & 253) == 0 || *(v19) == 0 || v19 == 0) && (*(v19) == 0 || v19 == 0 || (unsigned int)v17 != 0) && (*(v19) == 0 || v19 == 0 || v0->field_18 != 0) && (v8->field_20 == 0 || *(v19) == 0 || (unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0)) && v42 != v46)\n    {\n        v0->field_0 = v42;\n    }\n    if (((unsigned int)v13 > 0 && (unsigned int)v13 != (unsigned int)v26 && (((char)(v18 - 43) & 253) == 0 || *(v19) == 0 || v19 == 0) && (*(v19) == 0 || v19 == 0 || (unsigned int)v17 != 0) && (*(v19) == 0 || v19 == 0 || v0->field_18 != 0) && (v8->field_20 == 0 || *(v19) == 0 || (unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] == 45 && v48[1] == 0 || (unsigned int)v13 > 0 && (unsigned int)v13 != (unsigned int)v26 && (((char)(v18 - 43) & 253) == 0 || *(v19) == 0 || v19 == 0) && (*(v19) == 0 || v19 == 0 || (unsigned int)v17 != 0) && (*(v19) == 0 || v19 == 0 || v0->field_18 != 0) && (v8->field_20 == 0 || *(v19) == 0 || (unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] != 45) && v0->field_28 != 0)\n    {\n        v44 = (unsigned int)v26 + 1;\n        v0->field_10 = v48;\n        v45 = 1;\n        v0->field_0 = v44;\n    }\n    if (...)\n    {\n        v45 = -18446744069414584321;\n    }\n    if (...)\n    {\n        v0->field_20 = &v48[1];\n        v2 = \"-\";\n        v1 = v49;\n        v0 = v8;\n        v45 = (unsigned int)sub_411d00();\n        if ((unsigned int)v45 == -1)\n        {\n            v48 = *((long long *)(v15 + (int)v0->field_0 * 8));\n        }\n    }\n    if (...)\n    {\n        v19 = &v48[1];\n    }\n    if (...)\n    {\n        *((char **)&v6[0]) = v19;\n        v0->field_20 = &v19[1];\n        v45 = *(v19);\n        v7 = &v19[1];\n        v5 = *(v19);\n        v51 = strchr(v50, *(v19));\n        v52 = v5;\n        v53 = v7;\n        if (v6[1] == 0)\n        {\n            v0->field_0 = v0->field_0 + 1;\n        }\n        v54 = (unsigned long long)v52 - 58;\n        if (v54 > 1 && v51 != 0)\n        {\n            v55 = v51[1];\n            if (v51[0] == 87 && v3 != 0 && v55 == 59 && v6[1] == 0)\n            {\n                if (v0->field_0 != (unsigned int)v46)\n                {\n                    v53 = *((long long *)(v15 + (int)v8->field_0 * 8));\n                }\n                else\n                {\n                    if ((unsigned int)v49 != 0)\n                    {\n                        dcgettext(0x0, 0x41a9e0, 0x5);\n                        __fprintf_chk();\n                    }\n                    v0->field_8 = v45;\n                    v59 = 0;\n                    v60 = *(v50) != 58;\n                    v45 = r14<8> * 5 + 58;\n                }\n            }\n        }\n    }\n    if (...)\n    {\n        if ((unsigned int)v49 != 0)\n        {\n            dcgettext(0x0, 0x41aa24, 0x5);\n            __fprintf_chk();\n        }\n        v0->field_8 = v45;\n        v45 = 63;\n    }\n    if (...)\n    {\n        v56 = v6[1];\n        if (v51[2] != 58)\n        {\n            if (!(v56 == 0))\n            {\n                v57 = v8->field_0 + 1;\n                v0->field_10 = v7;\n                v0->field_0 = v57;\n            }\n            else if ((unsigned int)v46 != v8->field_0)\n            {\n                v58 = *((long long *)(v15 + (int)v8->field_0 * 8));\n                v0->field_0 = (int)v8->field_0 + 1;\n                v0->field_10 = v58;\n            }\n            else\n            {\n                if ((unsigned int)v49 != 0)\n                {\n                    dcgettext(0x0, 0x41a9e0, 0x5);\n                    __fprintf_chk();\n                }\n                v0->field_8 = v45;\n                v61 = 0;\n                v62 = *(v50) != 58;\n                v45 = r14<8> * 5 + 58;\n            }\n        }\n        else\n        {\n            if (v56 != 0)\n            {\n                v0->field_10 = v7;\n                v0->field_0 = v0->field_0 + 1;\n            }\n            else\n            {\n                v0->field_10 = 0;\n            }\n        }\n        v0->field_20 = 0;\n    }\n    if (...)\n    {\n        v0->field_20 = v53;\n        v0->field_10 = 0;\n        v2 = \"-W \";\n        v1 = v49;\n        v0 = v0;\n    }\n    if (...)\n    {\n        v45 = (unsigned int)sub_411d00();\n    }\n    v63 = v45;\n    return v63;\n}\n"
        },
        {
            "funcName": "sub_40fd60",
            "funcStartAddr": "0x40fd60",
            "funcEndAddr": "0x41049f",
            "decompiledFuncCode": "int sub_40fd60() { crash_skku;\n}"
        },
        {
            "funcName": "sub_412b90",
            "funcStartAddr": "0x412b90",
            "funcEndAddr": "0x412b9a",
            "decompiledFuncCode": "int sub_412b90()\n{\n}\n"
        },
        {
            "funcName": "sub_410d00",
            "funcStartAddr": "0x410d00",
            "funcEndAddr": "0x4110a9",
            "decompiledFuncCode": "extern unsigned int g_41a212;\nextern unsigned int g_41a216;\nextern unsigned int g_41a226;\nextern unsigned int g_41a23d;\nextern unsigned int g_41a298;\nextern unsigned int g_41a368;\nextern unsigned int g_41a388;\nextern unsigned int g_41a3b0;\nextern unsigned int g_41a3d8;\nextern unsigned int g_41a408;\n\nint sub_410d00()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long long v11[9];  // r8\n    unsigned long long v12[9];  // rbx\n    unsigned long v13;  // rsi\n    void *v14;  // rdi\n    unsigned long v16;  // r9\n    unsigned long long v17;  // r8\n    unsigned long long v18;  // r15\n    unsigned long long v19;  // r14\n    unsigned long v20;  // rsi\n    unsigned long long v21;  // r8\n    unsigned long long v22;  // r13\n    unsigned long long v23;  // r12\n    unsigned long long v24;  // r14\n\n    v12 = v11;\n    if (v13 != 0)\n    {\n        __fprintf_chk();\n    }\n    else\n    {\n        __fprintf_chk();\n    }\n    dcgettext(0x0, 0x41a212, 0x5);\n    __fprintf_chk();\n    fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41a298, 0x5), v14);\n    switch (v16)\n    {\n    case 0:\n        abort(); /* do not return */\n    case 1:\n        dcgettext(0x0, 0x41a216, 0x5);\n        break;\n    case 2:\n        dcgettext(0x0, 0x41a226, 0x5);\n        break;\n    case 3:\n        dcgettext(0x0, 0x41a23d, 0x5);\n        break;\n    case 4:\n        v24 = v11[3];\n        dcgettext(0x0, 0x41a368, 0x5);\n    case 5:\n        v24 = v11[3];\n        dcgettext(0x0, 0x41a388, 0x5);\n        *((unsigned long long [9])&v5) = v11[4];\n    case 6:\n        *((unsigned long long [9])&v6) = v11[1];\n        dcgettext(0x0, 0x41a3b0, 0x5);\n        *((unsigned long long [9])&v4) = v11[5];\n        *((unsigned long long [9])&v3) = v11[4];\n        *((unsigned long long [9])&v2) = v11[3];\n    case 7:\n        *((unsigned long long [9])&v7) = v12[2];\n        *((unsigned long long [9])&v6) = v12[1];\n        dcgettext(0x0, 0x41a3d8, 0x5);\n        *((unsigned long long [9])&v5) = v11[6];\n        *((unsigned long long [9])&v4) = v11[5];\n        *((unsigned long long [9])&v3) = v11[4];\n        *((unsigned long long [9])&v2) = v11[3];\n    case 8:\n        v22 = v12[6];\n        v23 = v12[5];\n        v18 = v12[4];\n        *((unsigned long long [9])&v8) = v12[7];\n        v19 = v12[3];\n        *((unsigned long long [9])&v6) = v12[2];\n        *((unsigned long long [9])&v7) = v12[1];\n        dcgettext(0x0, 0x41a408, 0x5);\n    case 9:\n        v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n        v21 = v11[1];\n        v22 = v12[6];\n        v23 = v12[5];\n        *((unsigned long long [9])&v9) = v12[8];\n        v18 = v12[4];\n        v19 = v12[3];\n        *((unsigned long long [9])&v8) = v12[7];\n        *((unsigned long long [9])&v6) = v12[2];\n        v7 = v21;\n    default:\n        v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n        v17 = v11[1];\n        v22 = v12[6];\n        v23 = v12[5];\n        *((unsigned long long [9])&v9) = v12[8];\n        v18 = v12[4];\n        v19 = v12[3];\n        *((unsigned long long [9])&v8) = v12[7];\n        *((unsigned long long [9])&v6) = v12[2];\n        v7 = v17;\n    }\n    dcgettext(0x0, v20, 0x5);\n    v5 = v9;\n    v4 = v24;\n    __fprintf_chk();\n    return v4;\n    return __fprintf_chk();\n    v4 = v8;\n    v3 = v22;\n    v2 = v23;\n    v1 = v18;\n    v0 = v19;\n    return __fprintf_chk();\n}\n"
        },
        {
            "funcName": "sub_405550",
            "funcStartAddr": "0x405550",
            "funcEndAddr": "0x405607",
            "decompiledFuncCode": "extern unsigned int g_418690;\n\nint sub_405550()\n{\n    char v1[39];  // r8\n    char v2[39];  // rbp\n    unsigned long long v3;  // rcx\n    unsigned long long v4;  // rbx\n    char v5;  // bl\n    unsigned int *v6;  // r13\n    unsigned long long v8;  // rbx\n    unsigned long|unsigned int v9;  // rbx\n    unsigned long long v10;  // rax\n\n    v2 = v1;\n    if (v1[4 + 5] != 0)\n    {\n        v6 = __errno_location();\n        if (v1[4 + 3] != 0)\n        {\n            v9 = v2[4 + 6];\n            if (v2[4 + 6] == 0)\n            {\n                *(v6) = 95;\n            }\n        }\n        if (v1[4 + 3] == 0 || v2[4 + 6] != 0)\n        {\n            *(v6) = 95;\n            v8 = (unsigned int)sub_40ea00();\n            error(0x0, *(v6), (unsigned long long)dcgettext(0x0, 0x418690, 0x5));\n            v9 = v1[4 + 6];\n        }\n        v10 = v9 ^ 1;\n        return v10;\n    }\n    v4 = v3;\n    v5 = (char)v3 & v1[4 + 1];\n    if (((char)v3 & v1[4 + 1]) == 0)\n    {\n        return 1;\n    }\n    *(__errno_location()) = 95;\n    return rbx<8>;\n}\n"
        },
        {
            "funcName": "sub_409960",
            "funcStartAddr": "0x409960",
            "funcEndAddr": "0x409976",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_0;\n\nint sub_409960()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    struct_0 *v3;  // rdi\n\n    v0 = v2;\n    free(v3->field_10);\n}\n"
        },
        {
            "funcName": "sub_403f50",
            "funcStartAddr": "0x403f50",
            "funcEndAddr": "0x403fb2",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[33];\n    char field_21;\n} struct_0;\n\nextern unsigned int g_61f440;\nextern unsigned int g_621544;\nextern unsigned int g_621550;\n\nint sub_403f50()\n{\n    unsigned long v0;  // [bp-0x38]\n    unsigned long v1;  // [bp-0x30]\n    unsigned long v2;  // [bp-0x28]\n    unsigned long long v3;  // [bp-0x20]\n    struct_0 *v6;  // rdx\n\n    v3 = 0;\n    v2 = g_621544;\n    v1 = g_621550;\n    v0 = g_61f440;\n    if ((unsigned long long)(unsigned int)(sub_40c770() ^ 1) == 0 && v6->field_21 != 0)\n    {\n        *(__errno_location()) = 95;\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_40f480",
            "funcStartAddr": "0x40f480",
            "funcEndAddr": "0x40f4de",
            "decompiledFuncCode": "int sub_40f480()\n{\n    unsigned long v2;  // rbx\n    unsigned int *v3;  // rbx\n    unsigned long long v4;  // rbp\n    unsigned int v6;  // r12d\n    unsigned int *v7;  // rbx\n\n    if (v2 != 0)\n    {\n        v2 = sub_40abc0();\n        v4 = (unsigned int)sub_40f0e0();\n        if (closedir() == 0)\n        {\n            return stack_base + 0;\n        }\n        v6 = *(v3);\n        v3 = __errno_location();\n        free(v3);\n        *(v7) = v6;\n        return 0;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_40e8e0",
            "funcStartAddr": "0x40e8e0",
            "funcEndAddr": "0x40e8f6",
            "decompiledFuncCode": "int sub_40e8e0()\n{\n}\n"
        },
        {
            "funcName": "sub_40b4d0",
            "funcStartAddr": "0x40b4d0",
            "funcEndAddr": "0x40b54a",
            "decompiledFuncCode": "extern int512_t g_419120;\n\nint sub_40b4d0()\n{\n    unsigned int *v1[4];  // rdi\n    unsigned int v2[4];  // rax\n    unsigned int v3;  // ymm0\n    uint128_t v4;  // xmm1\n    unsigned int v5;  // ymm1\n    unsigned long long v6;  // xmm1lq\n\n    v2 = *(v1);\n    if (*(v1) != 4296992)\n    {\n        v3 = v2[1];\n        if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1 && (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1 && (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n        {\n            v4 = 0;\n            v5 = v2[0];\n            if (((char)(BinaryOp CmpF & 69) & 1) == 0)\n            {\n                v6 = (unsigned long long)(unsigned int)xmm1<16> + 4568451461323476173;\n            }\n        }\n        if (...)\n        {\n            *(v1) = &g_419120;\n            return 0;\n        }\n    }\n    if (...)\n    {\n        return 1;\n    }\n}\n"
        },
        {
            "funcName": "sub_404d10",
            "funcStartAddr": "0x404d10",
            "funcEndAddr": "0x404d26",
            "decompiledFuncCode": "int sub_404d10()\n{\n}\n"
        },
        {
            "funcName": "sub_40c59a",
            "funcStartAddr": "0x40c59a",
            "funcEndAddr": "0x40c5b3",
            "decompiledFuncCode": "int sub_40c59a()\n{\n    unsigned long long *v1;  // rsi\n    unsigned long long *v3;  // rdi\n    unsigned long long v5;  // rax\n    char v6;  // al\n\n    v5 = strcmp(*(v3), *(v1));\n    v6 = (unsigned int)v5 == 0;\n    return rax<8>;\n}\n"
        },
        {
            "funcName": "sub_40aa00",
            "funcStartAddr": "0x40aa00",
            "funcEndAddr": "0x40aaf2",
            "decompiledFuncCode": "extern unsigned int g_419088;\nextern unsigned int g_61f468;\nextern unsigned long long g_6219a8;\n\nint sub_40aa00()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x8]\n    unsigned long v3;  // r12\n    unsigned long v4;  // rbx\n    unsigned long long v5;  // rax\n    unsigned long long v7;  // r12\n    unsigned int *v8;  // rbp\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n\n    v1 = v3;\n    v0 = v4;\n    v5 = sub_411b90();\n    if (sub_412f20() != 0 || v5 != 0)\n    {\n        while (true)\n        {\n            v11 = sub_411bc0();\n            if (v11 == 0)\n            {\n                v12 = sub_411b50();\n                if (v12 != 0)\n                {\n                    sub_412f20();\n                }\n            }\n            if (v12 == 0 || v11 != 0)\n            {\n                if (sub_412f20() == 0)\n                {\n                    break;\n                }\n            }\n            v7 = dcgettext(0x0, 0x419088, 0x5);\n            v8 = __errno_location();\n            if (g_6219a8 != 0)\n            {\n                sub_40eaa0();\n                error(0x0, *(v8), \"%s: %s\");\n            }\n            else\n            {\n                error(0x0, *(v8), \"%s\");\n            }\n            sub_40ab20();\n            _exit(g_61f468);\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_40ab20",
            "funcStartAddr": "0x40ab20",
            "funcEndAddr": "0x40abbe",
            "decompiledFuncCode": "extern unsigned int g_4190a2;\nextern unsigned int g_61f468;\nextern char g_6219b0;\nextern unsigned long long g_6219b8;\n\nint sub_40ab20()\n{\n    unsigned long long v1;  // rax\n    unsigned int *v2;  // rbx\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rbp\n\n    v1 = sub_412f20();\n    if (v1 != 0)\n    {\n        v2 = __errno_location();\n        if (g_6219b0 == 0 || *(v2) != 32)\n        {\n            v4 = dcgettext(0x0, 0x4190a2, 0x5);\n            if (g_6219b8 != 0)\n            {\n                sub_40eaa0();\n                error(0x0, *(v2), \"%s: %s\");\n            }\n        }\n    }\n    if (v1 == 0 || *(v2) == 32 && g_6219b0 != 0)\n    {\n        v3 = sub_412f20();\n    }\n    if ((unsigned int)v3 == 0 && (v1 == 0 || *(v2) == 32) && (v1 == 0 || g_6219b0 != 0))\n    {\n        return v3;\n    }\n    while (true)\n    {\n        _exit(g_61f468);\n        error(0x0, *(v2), \"%s\");\n    }\n}\n"
        },
        {
            "funcName": "sub_40ea00",
            "funcStartAddr": "0x40ea00",
            "funcEndAddr": "0x40ea0c",
            "decompiledFuncCode": "int sub_40ea00()\n{\n}\n"
        },
        {
            "funcName": "sub_413d10",
            "funcStartAddr": "0x413d10",
            "funcEndAddr": "0x413d15",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_413d10()\n{\n    struct_0 *v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rax\n\n    v1->field_8 = v2;\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_40b6a0",
            "funcStartAddr": "0x40b6a0",
            "funcEndAddr": "0x40b6a5",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_0;\n\nint sub_40b6a0()\n{\n    struct_0 *v1;  // rdi\n\n    return v1->field_10;\n}\n"
        },
        {
            "funcName": "sub_412970",
            "funcStartAddr": "0x412970",
            "funcEndAddr": "0x412983",
            "decompiledFuncCode": "int sub_412970()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_4128f0();\n}\n"
        },
        {
            "funcName": "sub_40fa60",
            "funcStartAddr": "0x40fa60",
            "funcEndAddr": "0x40fab1",
            "decompiledFuncCode": "int sub_40fa60()\n{\n    char v0;  // [bp-0x98]\n    unsigned int v2;  // edi\n    unsigned int v3;  // ebx\n    unsigned int *v4;  // rax\n    unsigned int v6;  // eax\n    char v7;  // al\n\n    v3 = __lxstat(0x1, v2, (unsigned int)&v0);\n    v4 = __errno_location();\n    if (v3 != 0 && *(v4) != 75)\n    {\n        v6 = 0;\n        v7 = *(v4) != 2;\n        return 0 - rax<4>;\n    }\n    if (v3 == 0 || *(v4) == 75)\n    {\n        *(v4) = 17;\n        return -18446744069414584321;\n    }\n}\n"
        },
        {
            "funcName": "sub_412f80",
            "funcStartAddr": "0x412f80",
            "funcEndAddr": "0x412fba",
            "decompiledFuncCode": "int sub_412f80()\n{\n    char v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long long v3;  // rdi\n    unsigned long long v4[2];  // rbx\n    unsigned long long v5;  // rax\n\n    v4 = v3;\n    v5 = clock_gettime();\n    if ((unsigned int)v5 != 0)\n    {\n        gettimeofday(&v0, NULL);\n        v4[0] = *((long long *)&v0);\n        v5 = v1 * 1000;\n        v4[1] = v1 * 1000;\n    }\n    return v5;\n}\n"
        },
        {
            "funcName": "sub_40b6d0",
            "funcStartAddr": "0x40b6d0",
            "funcEndAddr": "0x40b71f",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_40b6d0()\n{\n    unsigned long long v1[2];  // rdi\n    unsigned long long v2[2];  // rsi\n    unsigned long long v3;  // rdi\n    struct_0 *v4;  // rdx\n    unsigned long long v5;  // rcx\n    unsigned long long v6;  // rax\n\n    v2 = *(v1);\n    v3 = v1[1];\n    v6 = 0;\n    if (v2 >= v3)\n    {\n        return 0;\n    }\n    while (true)\n    {\n        if (*(v2) == 0)\n        {\n            v2 = &v2[2];\n            if (v2 >= v3)\n            {\n                break;\n            }\n        }\n        else\n        {\n            v4 = v2[1];\n            v5 = 1;\n            if (v2[1] != 0)\n            {\n                do\n                {\n                    v4 = v4->field_8;\n                    v5 += 1;\n                }\n                while (v4 != 0);\n            }\n            v6 = (v6 < v5? v5 : v6);\n            v2 = &v2[2];\n            if (v2 >= v3)\n            {\n                break;\n            }\n        }\n    }\n    return v6;\n}\n"
        },
        {
            "funcName": "sub_411380",
            "funcStartAddr": "0x411380",
            "funcEndAddr": "0x4113a1",
            "decompiledFuncCode": "int sub_411380()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rdx\n    unsigned long long v4;  // rax\n\n    v4 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, rdx<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_411530(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_409e00",
            "funcStartAddr": "0x409e00",
            "funcEndAddr": "0x409e5d",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    char field_8;\n} struct_0;\n\nint sub_409e00()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v3;  // rsi\n    unsigned long long v4;  // rbx\n    unsigned long long v5;  // rax\n    struct_0 *v7;  // rax\n    unsigned long long v8;  // rax\n\n    v4 = v3;\n    v5 = (unsigned int)sub_40ad40() - v1;\n    if (v5 + 9 > 0x100)\n    {\n        v4 = malloc(v5 + 9);\n        if (v4 == 0)\n        {\n            v8 = 0;\n        }\n    }\n    if (v5 + 9 <= 0x100 || v4 != 0)\n    {\n        v7 = mempcpy(v4, v1, v5);\n        v7->field_0 = 6365935209750754627;\n        v7->field_8 = 0x7e0039322e3800;\n        v8 = v4;\n    }\n    return v8;\n}\n"
        },
        {
            "funcName": "sub_40c330",
            "funcStartAddr": "0x40c330",
            "funcEndAddr": "0x40c4ef",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    struct struct_1 *field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n} struct_0;\n\ntypedef struct struct_2 {\n    char padding_0[4];\n    unsigned int field_4;\n    unsigned int field_8;\n    char padding_c[4];\n    char field_10;\n} struct_2;\n\ntypedef struct struct_3 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_3;\n\nint sub_40c330()\n{\n    unsigned long long *v0;  // [bp-0x20]\n    void tmp_10;  // tmp #10\n    void tmp_15;  // tmp #15\n    struct_0 *v2;  // rdi\n    unsigned long long v3[10];  // rbx\n    unsigned long long v5;  // cc_dep1\n    unsigned long long v6;  // rax\n    uint128_t v7;  // xmm0\n    unsigned long long v8;  // rax\n    unsigned int v9;  // ymm0\n    unsigned long long v10;  // rdx\n    unsigned long|uint128_t|unsigned long long|unsigned int v11;  // xmm0lq\n    uint128_t v12;  // xmm1\n    unsigned long long v13;  // rax\n    uint128_t v14;  // xmm1\n    unsigned int v15;  // ymm1\n    unsigned long long v16;  // xmm1lq\n    struct_2 *v18;  // rdx\n    uint128_t v19;  // xmm0\n    uint128_t v20;  // xmm0\n    unsigned int v21;  // ymm0\n    unsigned long|uint128_t|unsigned int v22;  // xmm1\n    uint128_t v23;  // xmm1\n    unsigned int v24;  // ymm1\n    uint128_t v25;  // xmm2\n    unsigned int v26;  // ymm2\n    unsigned long long v27;  // xmm2lq\n    uint128_t v28;  // xmm0\n    struct_3 *v30;  // rdi\n    void *v31;  // r12\n\n    v3 = v2;\n    if (sub_40b3b0() != 0)\n    {\n        v3[4] = v3[4] - 1;\n        if (*(v0) == 0)\n        {\n            v5 = v3[3];\n            v6 = v3[3] - 1;\n            v3[3] = v3[3] - 1;\n            if (!((char)(v5 - 1 >> 63)))\n            {\n                v11 = 0;\n                v10 = v3[5];\n                v11 = v2->field_18 - 1;\n                v8 = v3[2];\n            }\n            else\n            {\n                v7 = 0;\n                tmp_10 = v6 % 2 | (unsigned int)v6 & 1;\n                v8 = v3[2];\n                v9 = tmp_10;\n                v10 = v3[5];\n                v11 = (unsigned long long)(unsigned int)xmm0<16> * 2;\n            }\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x18<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n            {\n                v12 = 0;\n                v12 = (unsigned int)v8;\n            }\n            else\n            {\n                tmp_15 = v8;\n                v13 = (unsigned int)v8 & 1;\n                v14 = 0;\n                v15 = tmp_15 >> 1 | v13;\n                v12 = xmm1<16> * 2;\n            }\n            xmm1<8> = Conv(128->64, (xmm1<16> * Conv(32->128, Load(addr=rdx<8>, size=4, endness=Iend_LE))))\n            if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n            {\n                sub_40b4d0();\n                v18 = v3[5];\n                if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x18<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n                {\n                    v19 = 0;\n                    v19 = (unsigned int)v2->field_10;\n                }\n                else\n                {\n                    v20 = 0;\n                    v21 = v2->field_10 >> 1 | (unsigned int)v2->field_10 & 1;\n                    v19 = xmm0<16> * 2;\n                }\n                if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x18<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n                {\n                    v22 = 0;\n                    v22 = v2->field_18;\n                }\n                else\n                {\n                    v23 = 0;\n                    v24 = v2->field_18 >> 1 | (unsigned int)v2->field_18 & 1;\n                    v22 = (unsigned long long)(unsigned int)xmm1<16> * 2;\n                }\n                v25 = 0;\n                v26 = *(v2->field_28);\n                v27 = xmm2<16> * v19;\n                if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n                {\n                    xmm0<16> = (xmm0<16> * Conv(32->128, Load(addr=(rdx<8> + 0x4<64>), size=4, endness=Iend_LE)))\n                    if (v18->field_10 == 0)\n                    {\n                        xmm0<16> = (xmm0<16> * Conv(32->128, Load(addr=(rdx<8> + 0x8<64>), size=4, endness=Iend_LE)))\n                    }\n                    if (sub_40be70() == 0)\n                    {\n                        v30 = v3[9];\n                        if (v3[9] != 0)\n                        {\n                            while (true)\n                            {\n                                v31 = v30->field_8;\n                                free(v30);\n                                v30 = v31;\n                                if (v31 == 0)\n                                {\n                                    break;\n                                }\n                            }\n                        }\n                        v3[9] = 0;\n                    }\n                }\n            }\n        }\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_413800",
            "funcStartAddr": "0x413800",
            "funcEndAddr": "0x41382f",
            "decompiledFuncCode": "int sub_413800()\n{\n    unsigned long long v1;  // rbx\n    unsigned long long v2;  // rax\n\n    v1 = (unsigned int)sub_413a20();\n    v2 = 0;\n    if (v1 != 0)\n    {\n        v2 = sub_4112e0();\n        *((unsigned long long *)v2) = v1;\n        *((long long *)(v2 + 16)) = 0;\n        *((long long *)(v2 + 8)) = 0;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40ec70",
            "funcStartAddr": "0x40ec70",
            "funcEndAddr": "0x40eea8",
            "decompiledFuncCode": "int sub_40ec70()\n{\n    unsigned int *|unsigned int v0;  // [bp-0x160]\n    char v1;  // [bp-0x158]\n    unsigned int v2;  // [bp-0x140]\n    char v3;  // [bp-0xc8]\n    unsigned int v4;  // [bp-0xb0]\n    char v5;  // [bp-0x30]\n    char v6;  // [bp-0x20]\n    char v7;  // [bp+0x0]\n    unsigned int v9;  // edi\n    unsigned int v10;  // r14d\n    unsigned long v11;  // rdx\n    unsigned int v12;  // r13d\n    char *v13;  // rsi\n    char *v14;  // rcx\n    unsigned int v15;  // r8d\n    unsigned int v16;  // r13\n    unsigned long v17;  // r14\n    unsigned long long v18;  // rdx\n    unsigned int *v19;  // r9\n    unsigned long long v20;  // rax\n    unsigned long long v21;  // r15b\n    unsigned long long v22;  // rax\n    unsigned int v23;  // eax\n    unsigned long long v24;  // rbp\n    unsigned long long v25;  // rax\n    unsigned long long v26;  // rax\n    unsigned long long v27;  // rax\n\n    v10 = v9;\n    v12 = v11;\n    v18 = syscall(0x13c, v9, (unsigned int)v13, v11, (unsigned int)v14, v15, *((int *)&v5), (unsigned int)&v7, *((int *)&v6), v16, v17, v21);\n    if ((unsigned int)v18 < 0)\n    {\n        v0 = v18;\n        v19 = __errno_location();\n        v20 = *(v19);\n        v21 = ((unsigned int)(v20 - 22) & -17) != 0 & (unsigned int)v20 != 95;\n        if ((((unsigned int)(v20 - 22) & -17) != 0 & (unsigned int)v20 != 95) == 0)\n        {\n            if (v15 != 0)\n            {\n                if ((v15 & -2) != 0)\n                {\n                    *(v19) = 95;\n                    v18 = -18446744069414584321;\n                }\n                else\n                {\n                    v0 = v19;\n                    v22 = __fxstatat(0x1, v16, (unsigned int)v14, (unsigned int)&v3, 0x100);\n                    v19 = v0;\n                    if (v22 != 0)\n                    {\n                        v23 = *(v19);\n                        if (*(v19) != 75 && v23 == 2)\n                        {\n                            v21 = 1;\n                        }\n                    }\n                    if (*(v19) == 75 || v22 == 0)\n                    {\n                        *(v0) = 17;\n                        v18 = -18446744069414584321;\n                    }\n                }\n            }\n            if (v15 == 0 || (v15 & -2) == 0 && v23 == 2 && *(v19) != 75 && v22 != 0)\n            {\n                v0 = v19;\n                v24 = strlen(v13);\n                v25 = strlen(v14);\n            }\n            if (v13[v24 + -1] == 47 && v24 != 0 && v25 != 0 && ((v15 & -2) == 0 || v15 == 0) && (v15 == 0 || v23 == 2) && (v15 == 0 || *(v19) != 75) && (v15 == 0 || v22 != 0) || v14[v25 + -1] == 47 && v24 != 0 && v25 != 0 && v13[v24 + -1] != 47 && ((v15 & -2) == 0 || v15 == 0) && (v15 == 0 || v23 == 2) && (v15 == 0 || *(v19) != 75) && (v15 == 0 || v22 != 0))\n            {\n                v0 = v0;\n                v26 = __fxstatat(0x1, v9, (unsigned int)v13, (unsigned int)&v1, 0x100);\n                if (v26 == 0)\n                {\n                    if (!(v21 != 0))\n                    {\n                        v0 = v0;\n                        v27 = __fxstatat(0x1, v16, (unsigned int)v14, (unsigned int)&v3, 0x100);\n                        if (v27 == 0)\n                        {\n                            if (((unsigned short)v4 & 0xf000) != 0x4000)\n                            {\n                                *(v0) = 20;\n                            }\n                            else\n                            {\n                                if (((unsigned short)v2 & 0xf000) != 0x4000)\n                                {\n                                    *(v0) = 21;\n                                    v18 = -18446744069414584321;\n                                }\n                            }\n                        }\n                    }\n                    else if (((unsigned short)v2 & 0xf000) != 0x4000)\n                    {\n                        *(v0) = 2;\n                        v18 = -18446744069414584321;\n                    }\n                }\n            }\n            if (...)\n            {\n                v18 = -18446744069414584321;\n            }\n            if (...)\n            {\n                v18 = renameat(v9, (unsigned int)v13, v16, (unsigned int)v14);\n            }\n        }\n    }\n    return v18;\n}\n"
        },
        {
            "funcName": "sub_403fc0",
            "funcStartAddr": "0x403fc0",
            "funcEndAddr": "0x4040e0",
            "decompiledFuncCode": "extern unsigned int g_41703f;\nextern unsigned long long g_6219c0;\nextern unsigned long long stdout[7];\n\nint sub_403fc0()\n{\n    unsigned int v0;  // [bp-0xe0]\n    unsigned int v1;  // [bp-0xdc]\n    unsigned long v2;  // [bp-0xd8]\n    unsigned long v3;  // [bp-0xd0]\n    unsigned long long v4[7];  // [bp-0xb8]\n    unsigned long v5;  // [bp-0xb0]\n    unsigned long v6;  // [bp-0xa8]\n    unsigned long v7;  // [bp-0xa0]\n    void v8;  // [bp-0x98]\n    void v9;  // [bp-0x88]\n    void v10;  // [bp-0x78]\n    void v11;  // [bp-0x68]\n    void v12;  // [bp-0x58]\n    void v13;  // [bp-0x48]\n    void v14;  // [bp-0x38]\n    void v15;  // [bp-0x28]\n    unsigned long long v16;  // [bp-0x10]\n    unsigned long|unsigned long long v17;  // [bp-0x8]\n    unsigned long long v19;  // rbx\n    unsigned long long v20;  // rbx\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // rsi\n    unsigned long long v23[7];  // rbx\n    unsigned long v24;  // rcx\n    unsigned long v25;  // r8\n    unsigned long v26;  // r9\n    void v27;  // xmm0\n    void v28;  // xmm1\n    void v29;  // xmm2\n    void v30;  // xmm3\n    void v31;  // xmm4\n    void v32;  // xmm5\n    void v33;  // xmm6\n    void v34;  // xmm7\n    char *v38;  // rax\n    unsigned long long v39;  // rbx\n\n    v17 = v19;\n    v20 = (unsigned int)sub_40ea00();\n    v21 = v17;\n    v22 = dcgettext(0x0, 0x41703f, 0x5);\n    v17 = stack_base + 0;\n    v16 = v21;\n    v23 = stdout;\n    v4[0] = stdout;\n    v5 = v24;\n    v6 = v25;\n    v7 = v26;\n    if (false)\n    {\n        v8 = v27;\n        v9 = v28;\n        v10 = v29;\n        v11 = v30;\n        v12 = v31;\n        v13 = v32;\n        v14 = v33;\n        v15 = v34;\n    }\n    fputs_unlocked(g_6219c0, stdout);\n    fwrite_unlocked(\": \", 0x1, 0x2, stdout);\n    v0 = 16;\n    v2 = stack_base + 8;\n    v1 = 48;\n    v3 = stack_base + -200;\n    sub_412a70();\n    v38 = v23[5];\n    if (v23[5] < v23[6])\n    {\n        v23[5] = stdout[5] + 1;\n        *(v38) = 10;\n    }\n    else\n    {\n        v38 = __overflow((unsigned int)v23, 0xa);\n    }\n    v39 = v16;\n    return v38;\n}\n"
        },
        {
            "funcName": "sub_40c5e0",
            "funcStartAddr": "0x40c5e0",
            "funcEndAddr": "0x40c756",
            "decompiledFuncCode": "extern char g_0;\n\nint sub_40c5e0()\n{\n    unsigned long v0;  // [bp-0x50]\n    char v1;  // [bp-0x44]\n    unsigned long long v3;  // rdx\n    unsigned long long v4;  // r14\n    char v5[2];  // r13\n    unsigned long v7;  // rsi\n    unsigned long long v8;  // rax\n    char v9;  // r15b\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rcx\n    unsigned long long v12;  // rdx\n    char v13[2];  // rsi\n    unsigned long long|char [2] v14;  // rdi\n    unsigned long|unsigned int v15;  // r15\n    char v17[2];  // r12\n    unsigned long long v18;  // rdx\n    unsigned long long v19;  // rax\n    unsigned int *v20;  // rax\n\n    v4 = v3;\n    v5 = v14;\n    v17 = v14;\n    v0 = v7;\n    *((char **)&v1) = &g_0;\n    while (true)\n    {\n        v17 = &v17[1];\n        v18 = v17[-1 + 7];\n        if ((char)v18 != 0)\n        {\n            while (true)\n            {\n                v8 = v17[0];\n                if (v17[0] != 47)\n                {\n                    v9 = v18 == 47 & v8 != 0;\n                    if (true)\n                    {\n                        break;\n                    }\n                    v10 = &g_0 - v5;\n                    if (&g_0 - v5 != 1)\n                    {\n                        *((char **)&g_0) = &g_0;\n                        if (v5[1] == 46 && v5[0] == 46 && v10 == 2)\n                        {\n                            v15 = &g_0;\n                            *((char **)&v1) = &g_0;\n                        }\n                    }\n                    else if (v5[0] != 46)\n                    {\n                        *((char **)&g_0) = &g_0;\n                    }\n                    if (&g_0 - v5 == 1 && v5[0] != 46 || v5[1] != 46 && &g_0 - v5 != 1 || v5[0] != 46 && &g_0 - v5 != 1 || v10 != 2 && &g_0 - v5 != 1)\n                    {\n                        v12 = v11;\n                        v13 = v5;\n                        v14 = v14;\n                        v10 = r14<8>();\n                        if (v10 >= 0)\n                        {\n                            v1 = v9;\n                            v15 = &g_0;\n                        }\n                        else\n                        {\n                            v15 = (unsigned int)*(__errno_location());\n                        }\n                    }\n                    if ((&g_0 - v5 != 1 || v5[0] != 46) && (unsigned int)v10 != -1)\n                    {\n                        g_0 = 47;\n                    }\n                    if (((unsigned int)v10 == 0 || &g_0 - v5 == 1) && ((unsigned int)v10 == 0 || v5[0] == 46) && (&g_0 - v5 == 1 || (unsigned int)v10 != -1) && (v5[0] == 46 || (unsigned int)v10 != -1))\n                    {\n                        v5 = v17;\n                        v17 = &v17[1];\n                        v18 = v17[-1 + 7];\n                    }\n                    else\n                    {\n                        if (v15 != 0)\n                        {\n                            v20 = __errno_location();\n                            if (*(v20) == 2)\n                            {\n                                *((unsigned long *)&v20) = v15;\n                            }\n                        }\n                        v10 = (unsigned int)sub_40f520();\n                    }\n                }\n            }\n            if (true)\n            {\n                v17 = &v17[1];\n                v18 = v17[-1 + 7];\n            }\n            else if (false)\n            {\n                v19 = v5 - v14;\n            }\n            else if (false)\n            {\n                return v19;\n            }\n        }\n        v19 = v5 - v14;\n    }\n    return v19;\n}\n"
        },
        {
            "funcName": "sub_40fd50",
            "funcStartAddr": "0x40fd50",
            "funcEndAddr": "0x40fd5a",
            "decompiledFuncCode": "int sub_40fd50()\n{\n    unsigned long long *v1;  // rsi\n    unsigned long long v2;  // rax\n    unsigned long long *v3;  // rdi\n    char v4;  // al\n\n    v2 = *(v1);\n    v4 = *(v3) == *(v1);\n    return rax<8>;\n}\n"
        },
        {
            "funcName": "sub_4143d0",
            "funcStartAddr": "0x4143d0",
            "funcEndAddr": "0x4143de",
            "decompiledFuncCode": "int sub_4143d0()\n{\n}\n"
        },
        {
            "funcName": "sub_409980",
            "funcStartAddr": "0x409980",
            "funcEndAddr": "0x4099c5",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_0;\n\nint sub_409980()\n{\n    unsigned long v0;  // [bp-0x28]\n    unsigned long v1;  // [bp-0x20]\n    unsigned long long v2;  // [bp-0x18]\n    unsigned long v4;  // rdi\n    unsigned long v5;  // rsi\n    struct_0 *v6;  // rax\n    struct_0 *v7;  // rbx\n\n    v0 = v4;\n    v1 = v5;\n    v2 = 0;\n    v6 = sub_40c330();\n    if (v6 != 0)\n    {\n        v7 = v6;\n        free(v6->field_10);\n        v6 = free(v7);\n    }\n    return v6;\n}\n"
        },
        {
            "funcName": "sub_411440",
            "funcStartAddr": "0x411440",
            "funcEndAddr": "0x41148a",
            "decompiledFuncCode": "int sub_411440() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40e400",
            "funcStartAddr": "0x40e400",
            "funcEndAddr": "0x40e5a0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[4];\n    unsigned int field_4;\n    char padding_8[32];\n    unsigned long long field_28;\n    unsigned long long field_30;\n} struct_0;\n\nextern uint128_t *g_61f4b8;\nextern uint128_t g_61f4c0;\nextern unsigned int g_61f4d0;\nextern int512_t g_6219e0;\n\nint sub_40e400()\n{\n    unsigned long v0;  // [bp-0x78]\n    unsigned long v1;  // [bp-0x70]\n    unsigned long v2;  // [bp-0x68]\n    unsigned long v3;  // [bp-0x50]\n    unsigned long|unsigned long long v4;  // [bp-0x48]\n    unsigned int v5;  // [bp-0x40]\n    unsigned int v6;  // [bp-0x3c]\n    unsigned long long v8;  // rcx\n    struct_0 *v9;  // rbp\n    unsigned long v10;  // rsi\n    unsigned int *v11;  // r13\n    unsigned long v13;  // rdi\n    uint128_t *v15;  // rax\n    unsigned long long v16;  // rax\n    uint128_t *v17;  // rbx\n    unsigned long long v19[2];  // rbx\n    void *v20;  // r12\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rsi\n    unsigned long long v24;  // rax\n\n    v9 = v8;\n    v3 = v10;\n    v17 = g_61f4b8;\n    v11 = __errno_location();\n    v5 = *(v11);\n    if ((unsigned int)v13 < 0)\n    {\n        abort(); /* do not return */\n    }\n    if (g_61f4d0 <= (unsigned int)v13)\n    {\n        if ((unsigned int)v13 != 2147483647)\n        {\n            if (g_61f4b8 != 6419648)\n            {\n                v16 = sub_411340();\n                g_61f4b8 = v16;\n                v17 = v16;\n            }\n            else\n            {\n                v15 = sub_411340();\n                v17 = v15;\n                g_61f4b8 = v15;\n                *(v15) = g_61f4c0;\n            }\n            memset(&v17[(long long)(int)g_61f4d0], 0x0, (int)((unsigned int)v13 + 1 - g_61f4d0) * 16);\n            g_61f4d0 = (unsigned int)v13 + 1;\n        }\n        else\n        {\n            sub_411530(); /* do not return */\n        }\n    }\n    if (g_61f4d0 > (unsigned int)v13 || (unsigned int)v13 != 2147483647)\n    {\n        v19 = &v17[v13];\n        v20 = v19[1];\n        v6 = v9->field_4 | 1;\n        v2 = v9->field_30;\n        v1 = v9->field_28;\n        v0 = &v9->padding_8;\n        *((unsigned long long [2])&v4) = *(v19);\n        v21 = sub_40d1d0();\n        if (v4 <= v21)\n        {\n            v22 = v21 + 1;\n            v19[0] = v21 + 1;\n            if (v20 != 6429152)\n            {\n                v4 = v22;\n                free(v20);\n                v22 = v4;\n            }\n            v4 = v22;\n            v19[1] = v20;\n            v20 = (unsigned long long)(unsigned int)sub_4112e0();\n            v2 = v9->field_30;\n            v1 = v9->field_28;\n            v0 = v8 + 8;\n            sub_40d1d0();\n        }\n        *(v11) = v5;\n        v24 = v20;\n        return v24;\n    }\n}\n"
        },
        {
            "funcName": "sub_40b2c0",
            "funcStartAddr": "0x40b2c0",
            "funcEndAddr": "0x40b351",
            "decompiledFuncCode": "int sub_40b2c0()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rcx\n    unsigned long v4;  // rdx\n    unsigned long long v5;  // rax\n    unsigned long long v6;  // r8\n    unsigned long long v7;  // rcx\n    unsigned long long v8;  // rdi\n\n    v2 = (10 <= v1? v1 : 10) | 1;\n    if (((10 <= v1? v1 : 10) | 1) != -1)\n    {\n        while (true)\n        {\n            v3 = v2 - (v2 * 12297829382473034411 >> 64 >> 1) * 3;\n            v5 = v2 - (v2 * 12297829382473034411 >> 64 >> 1) * 3;\n            if (v2 > 9 && v3 != 0)\n            {\n                v6 = 16;\n                v8 = 9;\n                v7 = 3;\n                do\n                {\n                    v7 += 2;\n                    v8 += v6;\n                    v4 = (0 CONCAT v2) % v7 >> 64;\n                    v5 = (0 CONCAT v2) % v7 >> 64;\n                    v6 += 8;\n                }\n                while (v8 < v2 && v4 != 0);\n                if (true)\n                {\n                    if (v5 != 0)\n                    {\n                        break;\n                    }\n                }\n                else if (v8 < v2)\n                {\n                    v2 += 2;\n                    if (v2 == -1)\n                    {\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40e640",
            "funcStartAddr": "0x40e640",
            "funcEndAddr": "0x40e653",
            "decompiledFuncCode": "extern int512_t g_621ae0;\n\nint sub_40e640()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned int v3;  // esi\n\n    v2 = (unsigned int)*((int *)((v1 == 0? &g_621ae0 : v1) + 4));\n    *((unsigned int *)((v1 == 0? &g_621ae0 : v1) + 4)) = v3;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40a3e0",
            "funcStartAddr": "0x40a3e0",
            "funcEndAddr": "0x40a87e",
            "decompiledFuncCode": "extern unsigned long long g_6219a0;\n\nint sub_40a3e0()\n{\n    unsigned long long v0;  // [bp-0x90]\n    void *v1;  // [bp-0x88]\n    unsigned long|unsigned long long|unsigned short|char v2;  // [bp-0x80]\n    unsigned long long v3;  // [bp-0x78]\n    unsigned long|unsigned int v4;  // [bp-0x70]\n    unsigned long v5;  // [bp-0x68]\n    unsigned int v6;  // [bp-0x60]\n    unsigned int v7;  // [bp-0x58]\n    unsigned long v8;  // [bp-0x50]\n    unsigned long|unsigned long long v9;  // [bp-0x48]\n    unsigned int v10;  // [bp-0x40]\n    void *v12;  // rdi\n    unsigned short *|unsigned long long|void *|unsigned int * v13;  // rbx\n    unsigned int v14;  // esi\n    unsigned long long v15;  // rax\n    unsigned long long v17;  // rax\n    unsigned long long v19;  // r12\n    unsigned long long v22;  // r13\n    unsigned long long v23;  // rax\n    unsigned long long v25;  // rax\n    unsigned long long v26;  // rax\n    unsigned long long v27;  // rax\n    unsigned long long v28;  // rax\n    unsigned long|unsigned long long v29;  // r8b\n    unsigned long long v30;  // rax\n    unsigned long long v32;  // cc_dep1\n    unsigned long long v33;  // rax\n    unsigned long v34;  // rdx\n    unsigned long v35;  // rax\n    unsigned long long v36;  // r8\n    unsigned long long v37;  // rsi\n    char v38;  // sil\n    unsigned long long v40;  // rax\n    unsigned long|unsigned int v41;  // rdx\n    char *v42;  // rax\n    unsigned long long v43;  // r15\n    unsigned long long v44;  // rcx\n    unsigned long long v45;  // rdx\n    unsigned long long v46;  // rbp\n    char *|unsigned long long v49;  // r14\n    unsigned long long v50;  // rax\n    unsigned int v52;  // ebp\n    unsigned long long v53;  // rdi\n    unsigned int *v54;  // rbx\n    unsigned long long v57;  // rdi\n    unsigned long long v58;  // rax\n\n    v13 = v12;\n    v1 = v12;\n    v7 = v14;\n    v49 = (unsigned long long)(unsigned int)sub_40ad40() - v12;\n    v15 = &v49[strlen(v49)];\n    v0 = v15;\n    if (g_6219a0 == 0)\n    {\n        sub_40a380();\n    }\n    v17 = strlen(g_6219a0);\n    *((unsigned long long *)&v10) = v17 + 1;\n    *((unsigned long long *)&v6) = v0 + 1;\n    v8 = (9 <= v17 + 1? v17 + 1 : 9) + v0 + 1;\n    v43 = malloc((9 <= v17 + 1? v17 + 1 : 9) + v0 + 1);\n    if (v43 != 0)\n    {\n        v19 = 0;\n        while (true)\n        {\n            memcpy(v43, v1, *((long long *)&v6));\n            if (v7 != 1)\n            {\n                v13 = &v49[v43];\n                v22 = (unsigned int)sub_40ada0();\n                if (v19 != 0)\n                {\n                    rewinddir(v19);\n                }\n                else\n                {\n                    v23 = *(v13);\n                    *(v13) = 46;\n                    *((unsigned long long *)&v2) = v23;\n                    v19 = (unsigned int)sub_40abc0();\n                    if (v19 != 0)\n                    {\n                        *(v13) = v2;\n                        *((int *)v3) = 2117172782;\n                        *((char *)(v3 + 4)) = 0;\n                    }\n                    else\n                    {\n                        v3 = v44;\n                        __errno_location();\n                        *(v13) = v2;\n                        v46 = 0 + 2;\n                        *((int *)v3) = 2117172782;\n                        *((char *)(v3 + 4)) = 0;\n                    }\n                }\n                if (v19 != 0 || v19 != 0)\n                {\n                    v46 = 2;\n                    v3 = 1;\n                    v4 = v8;\n                    v5 = v22 + 4;\n                    while (true)\n                    {\n                        v25 = readdir();\n                        if (v25 == 0)\n                        {\n                            break;\n                        }\n                        while (true)\n                        {\n                            v13 = v25 + 19;\n                            v26 = strlen(v25 + 19);\n                            if (v26 < v5)\n                            {\n                                break;\n                            }\n                            v2 = v22 + 2;\n                            v27 = memcmp(&v49[v43], v13, v22 + 2);\n                            if (v27 != 0)\n                            {\n                                break;\n                            }\n                            v13 += v2;\n                            v28 = (char)*((char *)v13);\n                            if ((v28 - 49 & 255) > 8)\n                            {\n                                break;\n                            }\n                            v44 = 1;\n                            v29 = (char)(v28 == 57);\n                            v30 = (char)*((char *)(v13 + 1));\n                            if (*((char *)(v13 + v44 + 1)) != 0 || v30 != 126)\n                            {\n                                break;\n                            }\n                            if ((unsigned int)(char)*((char *)(v13 + 1)) - 48 <= 9)\n                            {\n                                do\n                                {\n                                    v44 += 1;\n                                    v29 &= (unsigned int)v30;\n                                    v30 = (char)*((char *)(v13 + v44));\n                                }\n                                while ((unsigned int)(char)*((char *)(v13 + v44)) - 48 <= 9);\n                            }\n                            v45 = v3;\n                            v32 = v3;\n                            if (v3 >= v44)\n                            {\n                                v9 = v44;\n                                *((unsigned long long *)&v2) = v29;\n                                if (v32 != v44)\n                                {\n                                    break;\n                                }\n                                v33 = memcmp(v43 + v0 + 2, v13, v45);\n                                v29 = v2;\n                                v44 = v9;\n                                if (v33 > 0)\n                                {\n                                    break;\n                                }\n                            }\n                            v34 = v29;\n                            v46 = v29;\n                            v3 = v9 + v44;\n                            v35 = v0 + v9 + v44 + 4;\n                            if (v0 + v9 + v44 + 4 > v4)\n                            {\n                                v37 = 0;\n                                v38 = [D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=stack_base-112, size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>);\n                                if (rsi<8> == 0 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x4<64>, Load(addr=stack_base-112, size=8, endness=Iend_LE), Load(addr=stack_base-112, size=8, endness=Iend_LE), cc_ndep<8>)))\n                                {\n                                    *((unsigned long *)&v4) = v4 * 2;\n                                }\n                                if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x4<64>, Load(addr=stack_base-112, size=8, endness=Iend_LE), Load(addr=stack_base-112, size=8, endness=Iend_LE), cc_ndep<8>) || rsi<8> != 0)\n                                {\n                                    *((unsigned long *)&v4) = v35;\n                                }\n                                v9 = v34;\n                                v2 = v44;\n                                v36 = realloc(v43, *((long long *)&v4));\n                                if (v36 == 0)\n                                {\n                                    break;\n                                }\n                            }\n                            else\n                            {\n                                v36 = v43;\n                            }\n                            v9 = v36;\n                            v2 = v44;\n                            *((short *)(v0 + v36)) = 32302;\n                            *((char *)(v0 + v36 + 2)) = 48;\n                            v40 = memcpy(v0 + v36 + v9 + 2, v13, v44 + 2);\n                            v41 = (char)*((char *)(v2 + v40 - 1));\n                            v42 = v2 + v40 - 1;\n                            if (v41 == 57)\n                            {\n                                do\n                                {\n                                    *(v42) = 48;\n                                    v42 = &v42[-1];\n                                    v41 = *(v42);\n                                }\n                                while (*(v42) == 57);\n                            }\n                            v45 = (unsigned long long)v41 + 1;\n                            v43 = v9;\n                            *((unsigned long long *)&v42) = v45;\n                            v25 = readdir();\n                        }\n                        if (true)\n                        {\n                            v25 = readdir();\n                        }\n                        else if (*((char *)(v13 + v44 + 1)) == 0 && (v3 < v44 || v32 == v44) && (v3 < v44 || v33 <= 0) && v0 + v9 + v44 + 4 > v4 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x4<64>, Load(addr=stack_base-112, size=8, endness=Iend_LE), Load(addr=stack_base-112, size=8, endness=Iend_LE), cc_ndep<8>)) && rsi<8> == 0 || *((char *)(v13 + v44 + 1)) == 0 && (v3 < v44 || v32 == v44) && (v3 < v44 || v33 <= 0) && v0 + v9 + v44 + 4 > v4 && (char)[D] amd64g_calculate_condition(0x8<64>, 0x4<64>, Load(addr=stack_base-112, size=8, endness=Iend_LE), Load(addr=stack_base-112, size=8, endness=Iend_LE), cc_ndep<8>) || *((char *)(v13 + v44 + 1)) == 0 && (v3 < v44 || v32 == v44) && (v3 < v44 || v33 <= 0) && v0 + v9 + v44 + 4 > v4 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x4<64>, Load(addr=stack_base-112, size=8, endness=Iend_LE), Load(addr=stack_base-112, size=8, endness=Iend_LE), cc_ndep<8>)) && rsi<8> != 0)\n                        {\n                            v53 = v43;\n                            v43 = 0;\n                            free(v53);\n                            *(__errno_location()) = 12;\n                        }\n                    }\n                    if (false)\n                    {\n                        v53 = v43;\n                        v43 = 0;\n                        free(v53);\n                        *(__errno_location()) = 12;\n                    }\n                }\n                if (v7 == 2)\n                {\n                    memcpy(v43 + v0, g_6219a0, *((long long *)&v10));\n                    v7 = 1;\n                }\n                if (v46 == 3 || v19 != 0 || v19 != 0)\n                {\n                    v53 = v43;\n                    v43 = 0;\n                    free(v53);\n                    *(__errno_location()) = 12;\n                }\n                sub_40a2b0();\n            }\n            else\n            {\n                memcpy(v43 + v0, g_6219a0, *((long long *)&v10));\n            }\n            if (v45 != 0)\n            {\n                if (v19 != 0)\n                {\n                    v45 = dirfd(v19);\n                }\n                if ((unsigned int)v45 < 0 || v19 == 0)\n                {\n                    v49 = 0;\n                }\n                v50 = sub_40ec70();\n                if (v50 != 0)\n                {\n                    v52 = *(v13);\n                    v13 = __errno_location();\n                    if (v19 != 0)\n                    {\n                        closedir();\n                    }\n                    v57 = v43;\n                    v43 = 0;\n                    free(v57);\n                    *(v54) = v52;\n                }\n            }\n            if (v50 == 0 || v45 == 0)\n            {\n                if (v19 == 0)\n                {\n                    break;\n                }\n                closedir();\n            }\n        }\n    }\n    v58 = v43;\n    return v58;\n}\n"
        },
        {
            "funcName": "sub_412d40",
            "funcStartAddr": "0x412d40",
            "funcEndAddr": "0x412e4f",
            "decompiledFuncCode": "extern unsigned int g_41aa7c;\nextern unsigned long long stderr[7];\n\nint sub_412d40()\n{\n    unsigned long long v1;  // r14\n    void *v2;  // rsi\n    unsigned long long v4[2];  // rdi\n    unsigned int v5;  // rdx\n    unsigned long long v6;  // rax\n    void *v7;  // rbp\n    unsigned long long v9;  // rbx\n    char *v11;  // rax\n\n    v1 = 0;\n    v7 = v2;\n    v9 = 0;\n    fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41aa7c, 0x5), stderr);\n    if (*(v4) != 0)\n    {\n        while (true)\n        {\n            if (v9 != 0)\n            {\n                v6 = memcmp(v1, v7, v5);\n                if (v6 == 0)\n                {\n                    v9 += 1;\n                    v7 += v5;\n                    sub_40ec50();\n                    __fprintf_chk();\n                    if (v4[v9] == 0)\n                    {\n                        break;\n                    }\n                }\n            }\n            if (v9 == 0 || v6 != 0)\n            {\n                v9 += 1;\n                v1 = v7;\n                v7 += v5;\n                sub_40ec50();\n                __fprintf_chk();\n                if (v4[v9] == 0)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    v11 = stderr[5];\n    if (stderr[5] < stderr[6])\n    {\n        stderr[5] = stderr[5] + 1;\n        *(v11) = 10;\n        return v11;\n    }\n}\n"
        },
        {
            "funcName": "sub_40f500",
            "funcStartAddr": "0x40f500",
            "funcEndAddr": "0x40f50c",
            "decompiledFuncCode": "int sub_40f500()\n{\n    unsigned int v1[2];  // rdi\n\n    if (v1[0] != 4)\n    {\n        return 0;\n    }\n    return v1[1];\n}\n"
        },
        {
            "funcName": "sub_40baf0",
            "funcStartAddr": "0x40baf0",
            "funcEndAddr": "0x40bb21",
            "decompiledFuncCode": "int sub_40baf0()\n{\n    void tmp_16;  // tmp #16\n    char *v1;  // rdi\n    unsigned long long v2;  // rcx\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rdx\n\n    v2 = *(v1);\n    v4 = 0;\n    if (*(v1) != 0)\n    {\n        do\n        {\n            v1 = &v1[1];\n            tmp_16 = v4 * 31 + v2;\n            v2 = *(v1);\n            v4 = (0 CONCAT tmp_16) % v3 >> 64;\n        }\n        while ((char)v2 != 0);\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_40a160",
            "funcStartAddr": "0x40a160",
            "funcEndAddr": "0x40a1b5",
            "decompiledFuncCode": "extern unsigned int g_418d39;\n\nint sub_40a160()\n{\n    unsigned long v2;  // rax\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // r12\n\n    if ((unsigned int)v2 == 0)\n    {\n        v2 = (unsigned int)sub_40d0b0();\n        return v3;\n    }\n    v4 = (unsigned int)sub_40ec50();\n    error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x418d39, 0x5));\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40ca80",
            "funcStartAddr": "0x40ca80",
            "funcEndAddr": "0x40cd8d",
            "decompiledFuncCode": "int sub_40ca80() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40c2f0",
            "funcStartAddr": "0x40c2f0",
            "funcEndAddr": "0x40c324",
            "decompiledFuncCode": "int sub_40c2f0()\n{\n    unsigned long long v0;  // [bp-0x10]\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rax\n\n    v3 = v2;\n    v4 = sub_40c070();\n    if (v4 != -1)\n    {\n        if (v4 == 0)\n        {\n            v3 = v0;\n        }\n        v5 = v3;\n        return v5;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_4046f0",
            "funcStartAddr": "0x4046f0",
            "funcEndAddr": "0x404add",
            "decompiledFuncCode": "extern unsigned int g_41714f;\nextern unsigned int g_417300;\nextern unsigned int g_417328;\nextern unsigned int g_4173d0;\nextern unsigned int g_4175a8;\nextern unsigned int g_4175f8;\nextern unsigned int g_4177d0;\nextern unsigned int g_417968;\nextern unsigned int g_417b60;\nextern unsigned int g_417cc0;\nextern unsigned int g_417cf0;\nextern unsigned int g_417d28;\nextern unsigned int g_417e08;\nextern unsigned int g_417f10;\nextern unsigned int g_417f58;\nextern unsigned int g_417f78;\nextern unsigned long long stdout;\n\nint sub_4046f0()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long v10;  // [bp-0x38]\n    unsigned long v11;  // [bp-0x30]\n    unsigned long long v12;  // [bp-0x28]\n    unsigned long long v13;  // [bp-0x20]\n    unsigned long v14;  // [bp-0x18]\n    unsigned long v15;  // [bp-0x8]\n    unsigned long v17;  // r12\n    unsigned long v18;  // rbx\n    unsigned int v19;  // edi\n    unsigned long long v32[2];  // rax\n    char *v33;  // rdi\n    char *v34;  // rsi\n    unsigned long long v35;  // rcx\n    unsigned long long v36;  // cc_dep1\n    unsigned long long v37;  // cc_dep2\n    unsigned long v38;  // d\n    char *v42;  // rax\n    char *v43;  // rax\n    unsigned long long v44;  // rax\n\n    v15 = v17;\n    v14 = v18;\n    if (v19 != 0)\n    {\n        dcgettext(0x0, 0x417300, 0x5);\n        __fprintf_chk();\n    }\n    else\n    {\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x417328, 0x5));\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4173d0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4175a8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4175f8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4177d0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x417968, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x417b60, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x417cc0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x417cf0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x417d28, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x417e08, 0x5), stdout);\n        v0 = \"[\";\n        v32 = &v0;\n        v1 = \"test invocation\";\n        v2 = \"coreutils\";\n        v3 = \"Multi-call\";\n        v4 = \"sha224sum\";\n        v5 = \"sha2 utilities\";\n        v6 = \"sha256sum\";\n        v7 = \"sha2 utilities\";\n        v8 = \"sha384sum\";\n        v9 = \"sha2 utilities\";\n        v10 = \"sha512sum\";\n        v11 = \"sha2 utilities\";\n        v12 = 0;\n        v13 = 0;\n        while (true)\n        {\n            v32 = &v2;\n            v33 = v2;\n            if (v2 == 0)\n            {\n                break;\n            }\n            v34 = \"install\";\n            v35 = 8;\n            if ((v36 > v37) - 0 - (v36 < v37) == 0)\n            {\n                break;\n            }\n            while (v35 != 0)\n            {\n                v35 -= 1;\n                v36 = *(v34);\n                v37 = *(v33);\n                v33 = &v33[v38];\n                v34 = &v34[v38];\n                break;\n            }\n        }\n        if (v32[1] != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x41714f, 0x5));\n            v43 = setlocale(0x5, 0x0);\n        }\n        else\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x41714f, 0x5));\n            v42 = setlocale(0x5, 0x0);\n            if (v42 != 0)\n            {\n                v44 = strncmp(v42, \"en_\", 0x3);\n            }\n            if (v42 == 0 || v44 == 0)\n            {\n                __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x417f58, 0x5));\n            }\n        }\n        if ((v32[1] == 0 || v43 != 0) && (v32[1] == 0 || strncmp(v43, \"en_\", 0x3) != 0) && (v42 != 0 || v32[1] != 0) && (v32[1] != 0 || v44 != 0))\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x417f10, 0x5));\n        }\n        if (v32[1] != 0 || v42 != 0 && v44 != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x417f58, 0x5));\n        }\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x417f78, 0x5));\n    }\n    exit(v19); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_40a930",
            "funcStartAddr": "0x40a930",
            "funcEndAddr": "0x40a96d",
            "decompiledFuncCode": "int sub_40a930()\n{\n    char *v1;  // rsi\n    char *v2;  // rax\n\n    if (*(v1) == 0 || v1 == 0)\n    {\n        v2 = getenv(\"VERSION_CONTROL\");\n    }\n    if (*(v1) == 0 && *(v2) == 0 || *(v1) == 0 && v2 == 0 || v1 == 0 && *(v2) == 0 || v1 == 0 && v2 == 0)\n    {\n        return 2;\n    }\n}\n"
        },
        {
            "funcName": "main",
            "funcStartAddr": "0x403050",
            "funcEndAddr": "0x403c69",
            "decompiledFuncCode": "extern unsigned int g_41716a;\nextern unsigned int g_41719d;\nextern unsigned int g_4171b1;\nextern unsigned int g_4171ce;\nextern unsigned int g_417200;\nextern unsigned int g_417210;\nextern unsigned int g_417220;\nextern unsigned int g_417fb0;\nextern unsigned int g_418020;\nextern unsigned int g_4180e0;\nextern unsigned int g_418120;\nextern unsigned int g_418160;\nextern unsigned int g_418190;\nextern unsigned int g_4181f8;\nextern unsigned int g_418240;\nextern unsigned int g_418310;\nextern unsigned int g_41aa3f;\nextern unsigned long long g_61f438;\nextern unsigned int g_61f444;\nextern unsigned int g_61f448;\nextern char g_61f44c;\nextern unsigned int g_61f4dc;\nextern char g_621540;\nextern char g_621541;\nextern char g_621542;\nextern unsigned int g_621544;\nextern unsigned long long g_621548;\nextern unsigned int g_621550;\nextern unsigned long long g_621558;\nextern unsigned int g_621560;\nextern unsigned long long g_621b80;\n\nint main()\n{\n    unsigned long long|unsigned long long * v0;  // [bp-0x140]\n    unsigned long|unsigned long long|unsigned int v1;  // [bp-0x138]\n    unsigned long long|unsigned int v2;  // [bp-0x130]\n    char v3;  // [bp-0x121]\n    unsigned long long v4;  // [bp-0x120]\n    unsigned long long v5;  // [bp-0x118]\n    unsigned long long v6;  // [bp-0x110]\n    unsigned long long v7;  // [bp-0x108]\n    unsigned short v8;  // [bp-0x100]\n    unsigned int v9;  // [bp-0xfc]\n    unsigned int|char v10;  // [bp-0xf9]\n    unsigned long long v11;  // [bp-0xf8]\n    unsigned long|char v12;  // [bp-0xf7]\n    char v13;  // [bp-0xf3]\n    unsigned long long v14;  // [bp-0xf0]\n    char v15;  // [bp-0xea]\n    char v16;  // [bp-0xe8]\n    unsigned int v17;  // [bp-0xe4]\n    unsigned long long v18;  // [bp-0xe0]\n    unsigned long long v19;  // [bp-0xd8]\n    char v20;  // [bp-0xc8]\n    unsigned int v21;  // [bp-0xb0]\n    unsigned long long v23;  // r15\n    unsigned long long v24;  // r14\n    unsigned long long v25;  // r13\n    unsigned int v26;  // edi\n    unsigned int v27;  // ebx\n    unsigned long long v31;  // rax\n    unsigned long v32;  // rsi\n    unsigned long long v33;  // rbp\n    unsigned long long v34;  // r12\n    unsigned long long v37;  // rax\n    unsigned long long v38;  // rbp\n    unsigned long long v39;  // rax\n    unsigned long long v40;  // rbx\n    unsigned int *v42;  // rbx\n    unsigned long long *v43;  // rbx\n    unsigned int v44;  // edx\n    unsigned long long v45;  // rbp\n    unsigned long v46;  // rsi\n    unsigned long long v47;  // rbx\n    unsigned long|unsigned int|char v48;  // r13\n    unsigned long long v50;  // rax\n    unsigned long long v51;  // rbx\n    unsigned long long v52;  // rcx\n    char *v53;  // rdi\n    unsigned long long v55;  // rax\n    char v56;  // cc_dep2\n    unsigned long v57;  // d\n    unsigned long long v59;  // rax\n    unsigned int *v60;  // rax\n    unsigned long long v61;  // rbx\n    unsigned long long v62;  // rbx\n    unsigned long long v63;  // rbx\n    void *v64;  // r13\n    unsigned long long v65;  // rbx\n    unsigned long long v67;  // rax\n    unsigned long long v68;  // rax\n    unsigned long long v69;  // rbx\n    unsigned long long v70;  // rax\n    unsigned long long v71;  // rax\n    unsigned long long v72;  // rbx\n    unsigned long long v74;  // r13\n    unsigned long long v76;  // rax\n    void *v78;  // rbx\n    unsigned long long v79;  // rax\n    unsigned long long v80;  // rax\n    unsigned long long v81;  // rdx\n\n    v23 = 0;\n    v24 = 0;\n    v25 = v32;\n    v34 = 0;\n    v33 = 0;\n    v27 = v26;\n    g_621560 = 0;\n    sub_40cfd0();\n    setlocale(0x6, 0x41aa3f);\n    bindtextdomain(0x41716a, 0x417fb0);\n    textdomain(0x41716a);\n    sub_416fd0();\n    sub_405700();\n    v5 = 0x400000000;\n    v6 = 8589934596;\n    v17 = 0;\n    v7 = 1103806595456;\n    v8 = 0x100;\n    v9 = 0;\n    v11 = 0x1000000;\n    v14 = 0x1000000;\n    v16 = 0;\n    v18 = 0;\n    v19 = 0;\n    g_621558 = 0;\n    g_621548 = 0;\n    g_621541 = 0;\n    g_621540 = 0;\n    umask(0x0, 0x100);\n    v3 = 0;\n    v4 = 0;\n    v0 = 0;\n    v1 = 0;\n    v2 = 0;\n    while (true)\n    {\n        v31 = sub_412970();\n        if ((unsigned int)v31 == -1)\n        {\n            if (g_621540 == 0)\n            {\n                if (v34 != 0)\n                {\n                    v37 = __xstat(0x1, v34, (unsigned int)&v20);\n                    if (v33 == 0 && v37 != 0)\n                    {\n                        v38 = (unsigned int)sub_40ea00();\n                        error(0x1, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x41719d, 0x5));\n                    }\n                    if (v37 == 0 && ((unsigned short)v21 & 0xf000) != 0x4000)\n                    {\n                        v40 = (unsigned int)sub_40ea00();\n                        error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x4171b1, 0x5));\n                    }\n                }\n            }\n            else\n            {\n                if (g_621541 != 0)\n                {\n                    error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x4180e0, 0x5));\n                }\n                else if (v34 != 0)\n                {\n                    error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x418120, 0x5));\n                }\n            }\n            if (g_621541 == 0 && v34 == 0 || g_621540 == 0 && v34 == 0 || v37 == 0 && g_621540 == 0 && ((unsigned short)v21 & 0xf000) == 0x4000 || g_621540 == 0 && v33 != 0 && v37 != 0)\n            {\n                v39 = 0;\n                if (v23 != 0)\n                {\n                    dcgettext(0x0, 0x4171ce, 0x5);\n                    v39 = sub_40a930();\n                }\n                v5 = v39;\n                sub_40a380();\n                if (*(&((char *)&v12)[4]) == 0 && v4 != 0)\n                {\n                    *(v42) = 95;\n                    v45 = (unsigned int)sub_40ec50();\n                    error(0x1, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x418190, 0x5));\n                }\n            }\n        }\n        else if ((unsigned int)v31 != 100)\n        {\n            if (v31 > 100)\n            {\n                if ((unsigned int)v31 == 115)\n                {\n                    g_621541 = 1;\n                    signal(0x11, 0x0);\n                }\n                else if (v31 <= 115)\n                {\n                    if ((unsigned int)v31 == 109)\n                    {\n                        v2 = g_621b80;\n                    }\n                    else if (v31 > 109)\n                    {\n                        if ((unsigned int)v31 == 111)\n                        {\n                            g_621558 = g_621b80;\n                        }\n                        if ((unsigned int)v31 == 112)\n                        {\n                            v10 = 1;\n                        }\n                    }\n                    else if ((unsigned int)v31 == 103)\n                    {\n                        g_621548 = g_621b80;\n                    }\n                }\n                else\n                {\n                    if ((unsigned int)v31 == 118)\n                    {\n                        v15 = 1;\n                    }\n                    else if (v31 > 118)\n                    {\n                        if ((unsigned int)v31 == 128)\n                        {\n                            v32 = \"WARNING: ignoring --preserve-context; this kernel is not SELinux-enabled\";\n                            if (g_621560 != 0)\n                            {\n                                v13 = 1;\n                                g_61f44c = 0;\n                            }\n                        }\n                        if ((unsigned int)v31 == 129)\n                        {\n                            v3 = 1;\n                            g_61f438 = (unsigned int)sub_411510();\n                        }\n                    }\n                    else if ((unsigned int)v31 == 116)\n                    {\n                        if (v34 == 0)\n                        {\n                            v34 = g_621b80;\n                        }\n                        else\n                        {\n                            error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x418020, 0x5));\n                        }\n                    }\n                }\n            }\n            else\n            {\n                if ((unsigned int)v31 == 83)\n                {\n                    v23 = 1;\n                    v1 = g_621b80;\n                }\n                else if (v31 > 83)\n                {\n                    if ((unsigned int)v31 != 90)\n                    {\n                        if (v31 > 90)\n                        {\n                            if ((unsigned int)v31 == 98)\n                            {\n                                v23 = 1;\n                                *((int *)&v0) = (g_621b80 == 0? v0 : g_621b80);\n                            }\n                        }\n                        else\n                        {\n                            if ((unsigned int)v31 == 84)\n                            {\n                                v24 = 1;\n                            }\n                        }\n                    }\n                    else\n                    {\n                        if (g_621560 != 0)\n                        {\n                            g_61f44c = 0;\n                            if (g_621b80 != 0)\n                            {\n                                v4 = g_621b80;\n                            }\n                            else\n                            {\n                                v12 = 1;\n                            }\n                        }\n                        else\n                        {\n                            v32 = \"warning: ignoring --context; it requires an SELinux-enabled kernel\";\n                        }\n                    }\n                }\n                else\n                {\n                    if ((unsigned int)v31 == -130)\n                    {\n                        sub_4046f0(); /* do not return */\n                    }\n                    else if (v31 > -18446744069414584450)\n                    {\n                        if ((unsigned int)v31 == 67)\n                        {\n                            g_621542 = 1;\n                        }\n                        if ((unsigned int)v31 == 68)\n                        {\n                            v33 = 1;\n                        }\n                    }\n                    else if ((unsigned int)v31 == -131)\n                    {\n                        sub_411160();\n                        exit(0x0); /* do not return */\n                    }\n                }\n            }\n        }\n        if ((unsigned int)v31 == 100)\n        {\n            g_621540 = 1;\n        }\n        if (g_621560 == 0 && (unsigned int)v31 == 90 && v31 <= 100 && (unsigned int)v31 != 100 && (unsigned int)v31 != -1 && v31 > 83 && (unsigned int)v31 != 83 || g_621560 == 0 && (unsigned int)v31 == 128 && (unsigned int)v31 != 115 && (unsigned int)v31 != 100 && v31 > 118 && v31 > 115 && (unsigned int)v31 != -1 && v31 > 100 && (unsigned int)v31 != 118)\n        {\n            error(0x0, 0x0, (unsigned long long)dcgettext(0x0, v32, 0x5));\n        }\n        if ((unsigned int)v31 == -1 && *(&((char *)&v12)[4]) != 0 && (g_621541 == 0 || g_621540 == 0) && (g_621540 == 0 || v34 == 0) && (v37 == 0 || v34 == 0 || v33 != 0) && (v34 == 0 || ((unsigned short)v21 & 0xf000) == 0x4000 || v37 != 0) && (char)v12 == 0 && v4 == 0 || (unsigned int)v31 == -1 && *(&((char *)&v12)[4]) == 0 && (g_621541 == 0 || g_621540 == 0) && (g_621540 == 0 || v34 == 0) && (v37 == 0 || v34 == 0 || v33 != 0) && (v34 == 0 || ((unsigned short)v21 & 0xf000) == 0x4000 || v37 != 0) && v4 == 0)\n        {\n            v43 = (unsigned long long)(v26 - g_61f4dc);\n            v0 = v25 + (int)g_61f4dc * 8;\n            if ((((unsigned int)g_621540 ^ 1) & v44) < v26 - g_61f4dc)\n            {\n                if (v24 != 0)\n                {\n                    if (v34 != 0)\n                    {\n                        error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x4181f8, 0x5));\n                    }\n                    else if (v26 - g_61f4dc > 2)\n                    {\n                        v51 = (unsigned int)sub_40ea00();\n                    }\n                }\n                else\n                {\n                    if ((char)(((unsigned int)g_621540 ^ 1) & v44) != 0)\n                    {\n                        v34 = 0;\n                        if (v26 - g_61f4dc != 1)\n                        {\n                            v48 = 1;\n                            v50 = sub_40ad40();\n                            v52 = -1;\n                            v53 = v50;\n                            v55 = v24;\n                            while (v52 != 0)\n                            {\n                                v52 -= 1;\n                                v56 = *(v53);\n                                v53 = &v53[v57];\n                                break;\n                            }\n                            if (!(rcx<8>) != 1)\n                            {\n                                v48 = 0;\n                                v48 = *((char *)(v50 + !(rcx<8>) - 1 - 1)) == 47;\n                            }\n                            v59 = __xstat(0x1, v0[(unsigned long long)(v26 - g_61f4dc) + -1], (unsigned int)&v20);\n                            if (v59 != 0)\n                            {\n                                v60 = __errno_location();\n                                v24 = *(v60);\n                                if (v24 != 2 && *(v60) != 0)\n                                {\n                                    v61 = (unsigned int)sub_40ea00();\n                                    error(0x1, v24, (unsigned long long)dcgettext(0x0, 0x41719d, 0x5));\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            else\n            {\n                if (v26 - g_61f4dc == 1)\n                {\n                    v47 = (unsigned int)sub_40ea00();\n                }\n                else\n                {\n                    v46 = \"missing file operand\";\n                }\n            }\n        }\n        if ((unsigned int)v31 == -1 && *(&((char *)&v12)[4]) != 0 && (g_621541 == 0 || g_621540 == 0) && (g_621540 == 0 || v34 == 0) && (v37 == 0 || v34 == 0 || v33 != 0) && (v34 == 0 || ((unsigned short)v21 & 0xf000) == 0x4000 || v37 != 0) && (char)v12 == 0 && v4 != 0 || (unsigned int)v31 == -1 && *(&((char *)&v12)[4]) != 0 && (g_621541 == 0 || g_621540 == 0) && (g_621540 == 0 || v34 == 0) && (v37 == 0 || v34 == 0 || v33 != 0) && (v34 == 0 || ((unsigned short)v21 & 0xf000) == 0x4000 || v37 != 0) && (char)v12 != 0)\n        {\n            error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x418160, 0x5));\n        }\n        if (((unsigned int)v31 == -1 && *(&((char *)&v12)[4]) != 0 && (g_621541 == 0 || g_621540 == 0) && (g_621540 == 0 || v34 == 0) && (v37 == 0 || v34 == 0 || v33 != 0) && (v34 == 0 || ((unsigned short)v21 & 0xf000) == 0x4000 || v37 != 0) && (char)v12 == 0 && v4 == 0 || (unsigned int)v31 == -1 && *(&((char *)&v12)[4]) == 0 && (g_621541 == 0 || g_621540 == 0) && (g_621540 == 0 || v34 == 0) && (v37 == 0 || v34 == 0 || v33 != 0) && (v34 == 0 || ((unsigned short)v21 & 0xf000) == 0x4000 || v37 != 0) && v4 == 0) && (((unsigned int)g_621540 ^ 1) & v44) < v26 - g_61f4dc && v24 != 0 && v34 == 0 && v26 - g_61f4dc > 2 || ((unsigned int)v31 == -1 && *(&((char *)&v12)[4]) != 0 && (g_621541 == 0 || g_621540 == 0) && (g_621540 == 0 || v34 == 0) && (v37 == 0 || v34 == 0 || v33 != 0) && (v34 == 0 || ((unsigned short)v21 & 0xf000) == 0x4000 || v37 != 0) && (char)v12 == 0 && v4 == 0 || (unsigned int)v31 == -1 && *(&((char *)&v12)[4]) == 0 && (g_621541 == 0 || g_621540 == 0) && (g_621540 == 0 || v34 == 0) && (v37 == 0 || v34 == 0 || v33 != 0) && (v34 == 0 || ((unsigned short)v21 & 0xf000) == 0x4000 || v37 != 0) && v4 == 0) && (((unsigned int)g_621540 ^ 1) & v44) >= v26 - g_61f4dc && v26 - g_61f4dc == 1)\n        {\n            error(0x0, 0x0, (unsigned long long)dcgettext(0x0, v32, 0x5));\n        }\n        if (...)\n        {\n            if (((unsigned short)v21 & 0xf000) != 0x4000)\n            {\n                v24 = 0;\n            }\n            else\n            {\n                v43 = (unsigned long long)((unsigned int)v43 - 1);\n                v34 = *((long long *)((char *)v0 + 0x8 * v43));\n            }\n        }\n        if (...)\n        {\n            if (v48 == 0)\n            {\n                v34 = 0;\n                if ((unsigned int)v43 != 2)\n                {\n                    v63 = (unsigned int)sub_40ea00();\n                    error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x4171b1, 0x5));\n                }\n            }\n            else\n            {\n                v62 = (unsigned int)sub_40ea00();\n                error(0x1, v24, (unsigned long long)dcgettext(0x0, 0x4171b1, 0x5));\n            }\n        }\n        if (...)\n        {\n            v64 = (unsigned long long)(unsigned int)sub_40ca80();\n            if (v64 != 0)\n            {\n                g_61f448 = sub_40ce50();\n                g_61f444 = sub_40ce50();\n                free(v64);\n            }\n            else\n            {\n                v65 = (unsigned int)sub_40ec50();\n                error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x417200, 0x5));\n            }\n        }\n        if (...)\n        {\n            if (g_621541 == 0 && v3 != 0)\n            {\n                error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x418240, 0x5));\n            }\n            if (g_621542 == 0)\n            {\n                break;\n            }\n            if (g_621542 != 0)\n            {\n                if ((char)v10 == 0)\n                {\n                    v46 = \"options --compare (-C) and --strip are mutually exclusive\";\n                    if (g_621541 == 0)\n                    {\n                        if ((g_61f448 & -0xf200) == 0)\n                        {\n                            break;\n                        }\n                        error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x418310, 0x5));\n                    }\n                }\n                else\n                {\n                    v46 = \"options --compare (-C) and --preserve-timestamps are mutually exclusive\";\n                }\n            }\n        }\n        if (...)\n        {\n            error(0x0, 0x0, (unsigned long long)dcgettext(0x0, v46, 0x5));\n        }\n        if (...)\n        {\n            sub_4046f0(); /* do not return */\n        }\n    }\n    if (g_621558 != 0)\n    {\n        v67 = getpwnam();\n        if (v67 != 0)\n        {\n            v67 = *((int *)(v67 + 16));\n        }\n        else\n        {\n            v68 = sub_411570();\n            if (v68 == 0)\n            {\n                v67 = *((long long *)&v20);\n            }\n            if (v68 != 0 || *((long long *)&v20) > -18446744069414584321)\n            {\n                v69 = (unsigned int)sub_40ec50();\n                error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x417210, 0x5));\n            }\n        }\n        if ((v68 == 0 || v67 != 0) && (*((long long *)&v20) <= -18446744069414584321 || v67 != 0))\n        {\n            *((unsigned long long *)&g_621550) = v67;\n            endpwent();\n        }\n    }\n    else\n    {\n        g_621550 = -1;\n    }\n    if (g_621558 == 0 || v67 != 0 || v68 == 0 && *((long long *)&v20) <= -18446744069414584321)\n    {\n        if (g_621548 != 0)\n        {\n            v70 = getgrnam();\n            if (v70 != 0)\n            {\n                v70 = *((int *)(v70 + 16));\n            }\n            else\n            {\n                v71 = sub_411570();\n                if (v71 == 0)\n                {\n                    v70 = *((long long *)&v20);\n                }\n                if (*((long long *)&v20) > -18446744069414584321 || v71 != 0)\n                {\n                    v72 = (unsigned int)sub_40ec50();\n                    error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x417220, 0x5));\n                }\n            }\n            if ((*((long long *)&v20) <= -18446744069414584321 || v70 != 0) && (v71 == 0 || v70 != 0))\n            {\n                *((unsigned long long *)&g_621544) = v70;\n                endgrent();\n            }\n        }\n        else\n        {\n            g_621544 = -1;\n        }\n        if (g_621548 == 0 || v70 != 0 || *((long long *)&v20) <= -18446744069414584321 && v71 == 0)\n        {\n            if (g_621540 != 0)\n            {\n                *((int *)&v1) = sub_40f910();\n            }\n            else\n            {\n                sub_409a90();\n                if (v34 != 0)\n                {\n                    v74 = 0;\n                    sub_4056a0();\n                    v1 = 0;\n                    v2 = (unsigned int)v43;\n                    do\n                    {\n                        v24 &= (unsigned int)v33;\n                        sub_40ad40();\n                        v78 = (unsigned long long)(unsigned int)sub_40b0c0();\n                        if (v24 != 0)\n                        {\n                            v79 = sub_403db0();\n                        }\n                        if (v24 == 0 || v79 != 0)\n                        {\n                            v80 = sub_404090();\n                            if (v80 != 0)\n                            {\n                                free(v78);\n                            }\n                        }\n                        if (v80 == 0 || v79 == 0 && v24 != 0)\n                        {\n                            free(v78);\n                            v1 = 1;\n                        }\n                        v74 += 1;\n                    }\n                    while (v2 > (unsigned int)v74);\n                }\n                else\n                {\n                    if (v33 != 0)\n                    {\n                        v76 = sub_403db0();\n                        v81 = 0;\n                        if (v76 != 0)\n                        {\n                            v81 = sub_404090();\n                        }\n                        v76 = v81 & 1 ^ 1;\n                    }\n                    else\n                    {\n                        v76 = (unsigned int)(sub_404090() ^ 1);\n                    }\n                    v1 = v76;\n                }\n            }\n            return v1;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_413840",
            "funcStartAddr": "0x413840",
            "funcEndAddr": "0x41392b",
            "decompiledFuncCode": "int sub_413840()\n{\n    char v0;  // [bp-0x40]\n    char v1;  // [bp-0x3f]\n    unsigned long long v3[3];  // rdi\n    unsigned long long v4[3];  // r15\n    unsigned long long v5;  // rsi\n    unsigned long long v6;  // r14\n    unsigned long long v7;  // r13\n    unsigned long long v8;  // rax\n    unsigned long long v9;  // rdx\n    char *v11;  // rax\n    unsigned long long v13;  // rbx\n    unsigned long long v14;  // rbp\n    unsigned long v15;  // rsi\n    unsigned long v16;  // rcx\n    unsigned long long v17;  // rbx\n    unsigned long v18;  // rax\n    unsigned long long v19;  // rdx\n    unsigned long long v20;  // rbp\n\n    v4 = v3;\n    v6 = v5 + 1;\n    v7 = v5;\n    v14 = v3[1];\n    v13 = v3[2];\n    while (true)\n    {\n        if (v13 < v7)\n        {\n            v8 = v13;\n            v9 = 0;\n            do\n            {\n                v9 += 1;\n                v8 = v8 * 0x100 + 255;\n            }\n            while (v7 > v8);\n            sub_413d30();\n            v11 = &v0;\n            do\n            {\n                v11 = &v1;\n                v13 = v13 * 0x100 + 255;\n                v14 = v14 * 0x100 + v0;\n            }\n            while (v7 > v13);\n        }\n        if (v13 == v7 && v13 < v7 || v13 == v7 && v13 >= v7)\n        {\n            v4[2] = 0;\n            v4[1] = 0;\n        }\n        if (v13 < v7 && v13 != v7 || v13 != v7 && v13 >= v7)\n        {\n            v15 = (0 CONCAT v13 - v7) % v6 >> 64;\n            v16 = (0 CONCAT v13 - v7) % v6;\n            v17 = v13 - ((0 CONCAT v13 - v7) % v6 >> 64);\n            v18 = (0 CONCAT v14) % v6;\n            v19 = (0 CONCAT v14) % v6 >> 64;\n            if (v14 > v17)\n            {\n                v13 = v15 - 1;\n                v20 = v19;\n            }\n            else\n            {\n                v4[1] = v18;\n                v4[2] = v16;\n            }\n        }\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_40ea90",
            "funcStartAddr": "0x40ea90",
            "funcEndAddr": "0x40ea9d",
            "decompiledFuncCode": "int sub_40ea90()\n{\n}\n"
        },
        {
            "funcName": "sub_415f90",
            "funcStartAddr": "0x415f90",
            "funcEndAddr": "0x416019",
            "decompiledFuncCode": "int sub_415f90()\n{\n    unsigned int v1;  // [bp+0x100008]\n    char *v2;  // rdi\n    char *v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rax\n    unsigned int v6;  // r12d\n    unsigned long long v7;  // rax\n    unsigned long long v9;  // rbx\n    unsigned int v10;  // ebp\n    unsigned long long v12;  // rax\n\n    v9 = fopen(v2, v3);\n    if (v9 != 0)\n    {\n        v4 = fileno(v9);\n        if (v4 <= 2)\n        {\n            v5 = sub_4143d0();\n            v6 = v5;\n            if ((unsigned int)v5 >= 0)\n            {\n                v7 = sub_4143e0();\n                if (v7 == 0)\n                {\n                    v9 = fdopen(v6, v3);\n                }\n                if (v9 == 0 || v7 != 0)\n                {\n                    v10 = *((int *)v9);\n                    close(v6);\n                    *(__errno_location()) = v10;\n                    v9 = 0;\n                }\n            }\n            else\n            {\n                v9 = 0;\n                sub_4143e0();\n                *(__errno_location()) = v1;\n            }\n        }\n    }\n    v12 = v9;\n    return v12;\n}\n"
        },
        {
            "funcName": "sub_413ee0",
            "funcStartAddr": "0x413ee0",
            "funcEndAddr": "0x414185",
            "decompiledFuncCode": "int sub_413ee0() { crash_skku_timeout;\n}"
        },
        {
            "funcName": "sub_40aef0",
            "funcStartAddr": "0x40aef0",
            "funcEndAddr": "0x40af24",
            "decompiledFuncCode": "int sub_40aef0()\n{\n    unsigned long v0;  // [bp-0x28]\n    unsigned long v1;  // [bp-0x20]\n    unsigned long v2;  // [bp-0x18]\n    unsigned long v4;  // rdi\n    unsigned long v5;  // rsi\n    unsigned long long v6[2];  // rdx\n    char v8;  // al\n\n    if (v4 != 0)\n    {\n        v0 = v5;\n        *((unsigned long long [2])&v1) = v6[1];\n        *((unsigned long long [2])&v2) = *(v6);\n        v8 = sub_40b8e0() != 0;\n        return rax<8>;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_411510",
            "funcStartAddr": "0x411510",
            "funcEndAddr": "0x411523",
            "decompiledFuncCode": "int sub_411510()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    char *v3;  // rdi\n\n    v0 = v2;\n    strlen(v3);\n}\n"
        },
        {
            "funcName": "sub_40ab00",
            "funcStartAddr": "0x40ab00",
            "funcEndAddr": "0x40ab08",
            "decompiledFuncCode": "extern unsigned long long g_6219b8;\n\nint sub_40ab00()\n{\n    unsigned long long v1;  // rdi\n    unsigned long v2;  // rax\n\n    g_6219b8 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40af30",
            "funcStartAddr": "0x40af30",
            "funcEndAddr": "0x40b096",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char field_0;\n    char field_1;\n    char field_2;\n    char field_3;\n    char field_4;\n    char field_5;\n    char field_6;\n    char field_7;\n    char field_8;\n    char field_9;\n    unsigned short field_a;\n} struct_0;\n\nint sub_40af30()\n{\n    unsigned long long v1;  // rax\n    unsigned int v2;  // edi\n    struct_0 *v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rax\n\n    v1 = 45;\n    if (((unsigned short)v2 & 0xf000) != 0x8000)\n    {\n        v1 = 100;\n        if (((unsigned short)v2 & 0xf000) != 0x4000)\n        {\n            v1 = 98;\n            if (((unsigned short)v2 & 0xf000) != 0x6000)\n            {\n                v1 = 99;\n                if (((unsigned short)v2 & 0xf000) != 0x2000)\n                {\n                    v1 = 108;\n                    if (((unsigned short)v2 & 0xf000) != 0xa000)\n                    {\n                        v1 = 112;\n                        if (((unsigned short)v2 & 0xf000) != 0x1000)\n                        {\n                            v1 = (unsigned int)((v2 & 0xf000) != 0xc000? 63 : 115);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    *((unsigned long long *)&v3->field_0) = v1;\n    v3->field_1 = (0 - (unsigned int)(char)((v2 & 0x100) < 1) & -69) + 114;\n    v3->field_2 = (0 - (unsigned int)(char)((v2 & 128) < 1) & -74) + 119;\n    if (((unsigned short)v2 & 0x800) != 0)\n    {\n        v4 = (0 - (unsigned int)(char)((v2 & 64) < 1) & -32) + 115;\n    }\n    else\n    {\n        v4 = (0 - (unsigned int)(char)((v2 & 64) < 1) & -75) + 120;\n    }\n    *((unsigned long long *)&v3->field_3) = v4;\n    v3->field_4 = (0 - (unsigned int)(char)((v2 & 32) < 1) & -69) + 114;\n    v3->field_5 = (0 - (unsigned int)(char)((v2 & 16) < 1) & -74) + 119;\n    if (((unsigned short)v2 & 0x400) != 0)\n    {\n        v5 = (0 - (unsigned int)(char)((v2 & 8) < 1) & -32) + 115;\n    }\n    else\n    {\n        v5 = (0 - (unsigned int)(char)((v2 & 8) < 1) & -75) + 120;\n    }\n    *((unsigned long long *)&v3->field_6) = v5;\n    v3->field_7 = (0 - (unsigned int)(char)((v2 & 4) < 1) & -69) + 114;\n    v3->field_8 = (0 - (unsigned int)(char)((v2 & 2) < 1) & -74) + 119;\n    if (((unsigned short)v2 & 0x200) != 0)\n    {\n        v3->field_9 = (0 - (unsigned int)(char)((v2 & 1) < 1) & -32) + 116;\n        v3->field_a = 32;\n        return 32;\n    }\n    v3->field_9 = (0 - (unsigned int)(char)((v2 & 1) < 1) & -75) + 120;\n    v3->field_a = 32;\n    return 32;\n}\n"
        },
        {
            "funcName": "sub_40ec50",
            "funcStartAddr": "0x40ec50",
            "funcEndAddr": "0x40ec66",
            "decompiledFuncCode": "int sub_40ec50()\n{\n}\n"
        },
        {
            "funcName": "sub_40e660",
            "funcStartAddr": "0x40e660",
            "funcEndAddr": "0x40e68b",
            "decompiledFuncCode": "extern char g_621ae0;\n\nint sub_40e660()\n{\n    void tmp_2;  // tmp #2\n    void tmp_11;  // tmp #11\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long long v3[7];  // rdi\n    unsigned long v4;  // rsi\n    unsigned long v5;  // rdx\n\n    tmp_2 = v2;\n    tmp_11 = v2 == 0;\n    v3 = (v2 == 0? &g_621ae0 : v2);\n    *((int *)(tmp_11? &g_621ae0 : tmp_2)) = 10;\n    if (v4 != 0 && v5 != 0)\n    {\n        v3[5] = v4;\n        v3[6] = v5;\n        return &g_621ae0;\n    }\n    if (v5 == 0 || v4 == 0)\n    {\n        v0 = &g_621ae0;\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_4112a0",
            "funcStartAddr": "0x4112a0",
            "funcEndAddr": "0x4112d1",
            "decompiledFuncCode": "extern char g_621b30;\nextern char g_621b31;\n\nint sub_4112a0()\n{\n    unsigned long long v1;  // rax\n    char v2;  // al\n\n    if (g_621b31 != 0)\n    {\n        return (unsigned long long)g_621b30;\n    }\n    v1 = geteuid();\n    g_621b31 = 1;\n    v2 = (unsigned int)v1 == 0;\n    g_621b30 = (unsigned int)v1 == 0;\n    return rax<8>;\n}\n"
        },
        {
            "funcName": "sub_40ab10",
            "funcStartAddr": "0x40ab10",
            "funcEndAddr": "0x40ab18",
            "decompiledFuncCode": "extern char g_6219b0;\n\nint sub_40ab10()\n{\n    char v1;  // dil\n    unsigned long v2;  // rax\n\n    g_6219b0 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40e5f0",
            "funcStartAddr": "0x40e5f0",
            "funcEndAddr": "0x40e5ff",
            "decompiledFuncCode": "extern int512_t g_621ae0;\n\nint sub_40e5f0()\n{\n    unsigned long v1;  // rdi\n    unsigned int v2;  // esi\n\n    *((unsigned int *)(v1 == 0? &g_621ae0 : v1)) = v2;\n    return &g_621ae0;\n}\n"
        },
        {
            "funcName": "sub_414190",
            "funcStartAddr": "0x414190",
            "funcEndAddr": "0x4143c4",
            "decompiledFuncCode": "int sub_414190()\n{\n    void tmp_33;  // tmp #33\n    void tmp_53;  // tmp #53\n    void tmp_70;  // tmp #70\n    void tmp_73;  // tmp #73\n    void tmp_80;  // tmp #80\n    void tmp_90;  // tmp #90\n    void tmp_96;  // tmp #96\n    void tmp_34;  // tmp #34\n    void tmp_58;  // tmp #58\n    void tmp_64;  // tmp #64\n    void tmp_74;  // tmp #74\n    void tmp_77;  // tmp #77\n    unsigned long long v1[259];  // rdi\n    unsigned long long v2[259];  // rdx\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // r8\n    unsigned long long v5;  // r9\n    unsigned long long v6;  // r10\n    unsigned long long v7[259];  // rax\n    unsigned long long v8;  // r11\n    unsigned long long v9;  // rcx\n    unsigned long long v10;  // rsi\n    unsigned long long v11;  // r12\n\n    v2 = v1;\n    v7 = v1;\n    v9 = 11021839149480329387;\n    v10 = 9435133421607575758;\n    v8 = 12869931497269318948;\n    v11 = 12580906657422019053;\n    v6 = 10092185256905347744;\n    v5 = 13400657653193689186;\n    v4 = 7240739780546808700;\n    v3 = 5259722845879046933;\n    do\n    {\n        tmp_33 = v3 + v7[5] ^ v9 + v7[7] >> 9;\n        tmp_53 = v11 + v7[6] ^ (v4 + *(v7) - (v10 + v7[4])) * 0x200;\n        tmp_70 = v5 + v7[1] - (v3 + v7[5] ^ v9 + v7[7] >> 9) + v6 + v7[2] - (v11 + v7[6] ^ (v4 + *(v7) - (v10 + v7[4])) * 0x200);\n        tmp_73 = v9 + v7[7] + v4 + *(v7) - (v10 + v7[4]) ^ v5 + v7[1] - (v3 + v7[5] ^ v9 + v7[7] >> 9) >> 23;\n        tmp_80 = v8 + v7[3] - (v9 + v7[7] + v4 + *(v7) - (v10 + v7[4]) ^ v5 + v7[1] - (v3 + v7[5] ^ v9 + v7[7] >> 9) >> 23);\n        tmp_90 = v6 + v7[2] - (v11 + v7[6] ^ (v4 + *(v7) - (v10 + v7[4])) * 0x200) + v8 + v7[3] - (v9 + v7[7] + v4 + *(v7) - (v10 + v7[4]) ^ v5 + v7[1] - (v3 + v7[5] ^ v9 + v7[7] >> 9) >> 23);\n        v4 = v4 + *(v7) - (v10 + v7[4]) + v5 + v7[1] - (v3 + v7[5] ^ v9 + v7[7] >> 9) ^ (v6 + v7[2] - (v11 + v7[6] ^ (v4 + *(v7) - (v10 + v7[4])) * 0x200)) * 0x8000;\n        tmp_96 = v10 + v7[4] - v4;\n        v7[0] = v4;\n        v5 = tmp_70 ^ tmp_80 >> 14;\n        v7[1] = tmp_70 ^ tmp_80 >> 14;\n        v6 = tmp_90 ^ tmp_96 * 0x100000;\n        v7[2] = tmp_90 ^ tmp_96 * 0x100000;\n        v7 = &v7[8];\n        v8 = tmp_80 + tmp_96 ^ tmp_33 - (tmp_70 ^ tmp_80 >> 14) >> 17;\n        v3 = tmp_33 - (tmp_70 ^ tmp_80 >> 14) + tmp_53 - (tmp_90 ^ tmp_96 * 0x100000);\n        v9 = tmp_73 - (tmp_80 + tmp_96 ^ tmp_33 - (tmp_70 ^ tmp_80 >> 14) >> 17);\n        v7[-5] = tmp_80 + tmp_96 ^ tmp_33 - (tmp_70 ^ tmp_80 >> 14) >> 17;\n        v10 = (tmp_53 - (tmp_90 ^ tmp_96 * 0x100000)) * 0x4000 ^ tmp_96 + tmp_33 - (tmp_70 ^ tmp_80 >> 14);\n        v11 = tmp_53 - (tmp_90 ^ tmp_96 * 0x100000) + tmp_73 - (tmp_80 + tmp_96 ^ tmp_33 - (tmp_70 ^ tmp_80 >> 14) >> 17);\n        v7[-3] = tmp_33 - (tmp_70 ^ tmp_80 >> 14) + tmp_53 - (tmp_90 ^ tmp_96 * 0x100000);\n        v7[-4] = (tmp_53 - (tmp_90 ^ tmp_96 * 0x100000)) * 0x4000 ^ tmp_96 + tmp_33 - (tmp_70 ^ tmp_80 >> 14);\n        v7[-2] = tmp_53 - (tmp_90 ^ tmp_96 * 0x100000) + tmp_73 - (tmp_80 + tmp_96 ^ tmp_33 - (tmp_70 ^ tmp_80 >> 14) >> 17);\n        v7[-1] = tmp_73 - (tmp_80 + tmp_96 ^ tmp_33 - (tmp_70 ^ tmp_80 >> 14) >> 17);\n    }\n    while (&v1[0x100] != v7);\n    do\n    {\n        tmp_34 = v3 + v2[5] ^ v9 + v2[7] >> 9;\n        tmp_58 = v11 + v2[6] ^ (v4 + *(v2) - (v10 + v2[4])) * 0x200;\n        tmp_64 = v6 + v2[2] - (v11 + v2[6] ^ (v4 + *(v2) - (v10 + v2[4])) * 0x200);\n        tmp_74 = v9 + v2[7] + v4 + *(v2) - (v10 + v2[4]) ^ v5 + v2[1] - (v3 + v2[5] ^ v9 + v2[7] >> 9) >> 23;\n        tmp_77 = v5 + v2[1] - (v3 + v2[5] ^ v9 + v2[7] >> 9) + v6 + v2[2] - (v11 + v2[6] ^ (v4 + *(v2) - (v10 + v2[4])) * 0x200);\n        tmp_80 = v8 + v2[3] - (v9 + v2[7] + v4 + *(v2) - (v10 + v2[4]) ^ v5 + v2[1] - (v3 + v2[5] ^ v9 + v2[7] >> 9) >> 23);\n        v4 = v4 + *(v2) - (v10 + v2[4]) + v5 + v2[1] - (v3 + v2[5] ^ v9 + v2[7] >> 9) ^ (v6 + v2[2] - (v11 + v2[6] ^ (v4 + *(v2) - (v10 + v2[4])) * 0x200)) * 0x8000;\n        tmp_96 = v10 + v2[4] - v4;\n        v2[0] = v4;\n        v5 = tmp_77 ^ tmp_80 >> 14;\n        v2[1] = tmp_77 ^ tmp_80 >> 14;\n        v6 = tmp_64 + tmp_80 ^ tmp_96 * 0x100000;\n        v2[2] = tmp_64 + tmp_80 ^ tmp_96 * 0x100000;\n        v2 = &v2[8];\n        v8 = tmp_80 + tmp_96 ^ tmp_34 - (tmp_77 ^ tmp_80 >> 14) >> 17;\n        v3 = tmp_34 - (tmp_77 ^ tmp_80 >> 14) + tmp_58 - (tmp_64 + tmp_80 ^ tmp_96 * 0x100000);\n        v9 = tmp_74 - (tmp_80 + tmp_96 ^ tmp_34 - (tmp_77 ^ tmp_80 >> 14) >> 17);\n        v2[-5] = tmp_80 + tmp_96 ^ tmp_34 - (tmp_77 ^ tmp_80 >> 14) >> 17;\n        v10 = (tmp_58 - (tmp_64 + tmp_80 ^ tmp_96 * 0x100000)) * 0x4000 ^ tmp_96 + tmp_34 - (tmp_77 ^ tmp_80 >> 14);\n        v11 = tmp_58 - (tmp_64 + tmp_80 ^ tmp_96 * 0x100000) + tmp_74 - (tmp_80 + tmp_96 ^ tmp_34 - (tmp_77 ^ tmp_80 >> 14) >> 17);\n        v2[-3] = tmp_34 - (tmp_77 ^ tmp_80 >> 14) + tmp_58 - (tmp_64 + tmp_80 ^ tmp_96 * 0x100000);\n        v2[-4] = (tmp_58 - (tmp_64 + tmp_80 ^ tmp_96 * 0x100000)) * 0x4000 ^ tmp_96 + tmp_34 - (tmp_77 ^ tmp_80 >> 14);\n        v2[-2] = tmp_58 - (tmp_64 + tmp_80 ^ tmp_96 * 0x100000) + tmp_74 - (tmp_80 + tmp_96 ^ tmp_34 - (tmp_77 ^ tmp_80 >> 14) >> 17);\n        v2[-1] = tmp_74 - (tmp_80 + tmp_96 ^ tmp_34 - (tmp_77 ^ tmp_80 >> 14) >> 17);\n    }\n    while (&v1[0x100] != v2);\n    v1[258] = 0;\n    v1[257] = 0;\n    v1[0x100] = 0;\n    return tmp_96 + tmp_34 - (tmp_77 ^ tmp_80 >> 14);\n}\n"
        },
        {
            "funcName": "sub_4099d0",
            "funcStartAddr": "0x4099d0",
            "funcEndAddr": "0x409a01",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_0;\n\nint sub_4099d0()\n{\n    unsigned long v0;  // [bp-0x28]\n    unsigned long v1;  // [bp-0x20]\n    unsigned long v3;  // rdi\n    unsigned long v4;  // rsi\n    struct_0 *v5;  // rax\n\n    v0 = v3;\n    v1 = v4;\n    v5 = sub_40b8e0();\n    if (v5 != 0)\n    {\n        return v5->field_10;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_410650",
            "funcStartAddr": "0x410650",
            "funcEndAddr": "0x41065a",
            "decompiledFuncCode": "int sub_410650()\n{\n}\n"
        },
        {
            "funcName": "sub_403da8",
            "funcStartAddr": "0x403da8",
            "funcEndAddr": "0x403de4",
            "decompiledFuncCode": "int sub_403da8() { crash_skku;\n}"
        },
        {
            "funcName": "sub_412ba0",
            "funcStartAddr": "0x412ba0",
            "funcEndAddr": "0x412ca3",
            "decompiledFuncCode": "int sub_412ba0()\n{\n    unsigned long long v0;  // [bp-0x58]\n    char v1;  // [bp-0x41]\n    unsigned long v2;  // [bp-0x40]\n    unsigned long long v4;  // rsi\n    unsigned long long v5;  // r15\n    unsigned long v6;  // rcx\n    unsigned long v7;  // r13\n    void *v8;  // rdx\n    char *v9;  // rdi\n    unsigned long v11;  // r12\n    unsigned long long v12;  // rbx\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rax\n    void *v15;  // rbp\n    char *v16;  // r14\n\n    v5 = v4;\n    v7 = v6;\n    v15 = v8;\n    v2 = v8;\n    v16 = *((long long *)v5);\n    v0 = -1;\n    if (*((long long *)v5) != 0)\n    {\n        v11 = strlen(v9);\n        v1 = 0;\n        v12 = 0;\n        while (true)\n        {\n            v13 = strncmp(v16, v9, v11);\n            if (v13 == 0)\n            {\n                v14 = strlen(v16);\n                if (v14 == v11)\n                {\n                    v0 = v12;\n                }\n                else if (v0 == -1)\n                {\n                    v0 = v12;\n                    v12 += 1;\n                    v15 += v6;\n                    v16 = *((long long *)(v5 + v12 * 8));\n                }\n                else if (v2 != 0)\n                {\n                    v1 = (memcmp(v7 * v0 + v2, v15, v7) != 0? 1 : (unsigned int)(char)(char)(stack_base)[-65]);\n                }\n                else\n                {\n                    v1 = 1;\n                }\n            }\n            if (v13 != 0 || v14 != v11 && v0 != -1)\n            {\n                v12 += 1;\n                v15 += v6;\n                v16 = *((long long *)(v5 + v12 * 8));\n            }\n            if ((*((long long *)(v5 + (v12 << 3))) == 0 || v0 == -1) && (*((long long *)(v5 + (v12 << 3))) == 0 || v13 == 0) && (v14 != v11 || v13 != 0) && (*((long long *)(v5 + (v12 << 3))) != 0 || v0 != -1 || v13 != 0))\n            {\n                *((int *)&v0) = (v1 == 0? v0 : -2);\n            }\n        }\n    }\n    return v0;\n}\n"
        },
        {
            "funcName": "sub_40eac0",
            "funcStartAddr": "0x40eac0",
            "funcEndAddr": "0x40eaca",
            "decompiledFuncCode": "int sub_40eac0()\n{\n}\n"
        },
        {
            "funcName": "sub_40a980",
            "funcStartAddr": "0x40a980",
            "funcEndAddr": "0x40a9e5",
            "decompiledFuncCode": "int sub_40a980()\n{\n    void tmp_5;  // tmp #5\n    unsigned long long v1;  // rdi\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // r8\n    unsigned long long v4;  // rax\n    unsigned long v5;  // rax\n    unsigned long v6;  // rdx\n    unsigned long v7;  // r8\n\n    if (v1 != 0 && v2 != 0)\n    {\n        v3 = v2;\n        for (v4 = v1; (0 CONCAT v4) % v3 >> 64 != 0; v3 = tmp_5 >> 64)\n        {\n            v4 = v3;\n        }\n        v5 = (0 CONCAT v1) % v3;\n        v7 = (0 CONCAT v1) % v3 * v2;\n    }\n    if (v2 == 0 || v1 == 0 || (0 CONCAT v7) % v2 != v5 || v7 > v6)\n    {\n        v7 = ((v2 != 0? v2 : 0x2000) <= v6? (v2 != 0? v2 : 0x2000) : v6);\n    }\n    return v7;\n}\n"
        },
        {
            "funcName": "sub_40ae10",
            "funcStartAddr": "0x40ae10",
            "funcEndAddr": "0x40ae56",
            "decompiledFuncCode": "int sub_40ae10()\n{\n    unsigned int v0;  // [bp-0x50]\n    unsigned long v1;  // [bp-0x48]\n    unsigned long v2;  // [bp-0x40]\n    unsigned long v3;  // [bp-0x28]\n    unsigned long v5;  // rdx\n    unsigned long long v6;  // rdx\n    char v7;  // sil\n    char *v8;  // rdi\n    unsigned int v9;  // esi\n\n    v3 = v5;\n    v6 = 0;\n    if ((v7 & 64) != 0)\n    {\n        v0 = 16;\n        v6 = (unsigned int)v3;\n        v1 = stack_base + 8;\n        v2 = stack_base + -56;\n    }\n    open(v8, v9, v6);\n    return sub_40fcf0();\n}\n"
        },
        {
            "funcName": "sub_409b10",
            "funcStartAddr": "0x409b10",
            "funcEndAddr": "0x409dc3",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned int field_10;\n    char padding_14[4];\n    unsigned long long field_18;\n    char field_20;\n    char field_21;\n    char padding_22[6];\n    unsigned long long field_28;\n} struct_1;\n\ntypedef struct struct_2 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned int field_10;\n    char padding_14[4];\n    unsigned long long field_18;\n    char field_20;\n    char field_21;\n    char padding_22[6];\n    struct struct_3 *field_28;\n} struct_2;\n\ntypedef struct struct_4 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    char field_10;\n} struct_4;\n\nint sub_409b10()\n{\n    unsigned long long|char v0;  // [bp-0x1038]\n    void tmp_15;  // tmp #15\n    unsigned long v1;  // [bp-0x1030]\n    unsigned int v2;  // [bp-0x1028]\n    unsigned int v3;  // [bp-0x1024]\n    unsigned int v4;  // [bp-0x1020]\n    unsigned long|unsigned long long v5;  // [bp-0x1018]\n    unsigned long|unsigned long long v6;  // [bp-0x1008]\n    unsigned int v7;  // [bp-0xff0]\n    unsigned long long v9;  // r13\n    struct_1 *v10;  // rdi\n    struct_2 *v11;  // r12\n    unsigned long long v12;  // rbx\n    unsigned long long v13;  // rdx\n    unsigned long v14;  // d\n    unsigned long long v15;  // rcx\n    unsigned long long *v16;  // rdi\n    unsigned long long v17;  // rax\n    unsigned long long *v19;  // rdi\n    unsigned long long v20;  // rcx\n    unsigned long v22;  // rax\n    unsigned long v23;  // rdx\n    unsigned long long v24;  // rax\n    struct_4 *v25;  // rbx\n    unsigned long long v26;  // rax\n    unsigned long long v27;  // rdx\n    unsigned long long v28;  // rdi\n    unsigned long long v29;  // rcx\n    unsigned long long v30;  // rsi\n    unsigned long|unsigned int v31;  // r9\n    unsigned long long v32;  // r10\n    unsigned long long v33;  // rax\n    unsigned long long v34;  // rdx\n    unsigned long long v35;  // rax\n    unsigned long long v36;  // cc_dep1\n    unsigned long long v37;  // al\n    unsigned long long *v39;  // rdx\n\n    v9 = 0;\n    v11 = v10;\n    v12 = v10->field_28;\n    v13 = v10->field_8;\n    while (true)\n    {\n        v15 = 0x200;\n        for (v16 = &v0; v15 != 0; v16 = &v16[v14])\n        {\n            v15 -= 1;\n            v0 = 0;\n        }\n        v0 = v13;\n        v4 = 72;\n        v2 = v11->field_10;\n        v1 = !(*((long long *)&v0));\n        v17 = ioctl(v11->field_0, 0xc020660b, (unsigned int)&v0);\n        if (v17 >= 0)\n        {\n            v37 = v3;\n            if (!(v3 != 0))\n            {\n                v36 = v11->field_8;\n                v11->field_21 = 1;\n                v37 = (char)(v36 != 0);\n            }\n            else if (v11->field_18 <= !((unsigned long long)v3))\n            {\n                v19 = v11->field_28;\n                v20 = v11->field_18 + v3;\n                v11->field_18 = v20;\n                v22 = 24 * v20;\n                v23 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, 0x18<64>, rcx<8>, cc_ndep<8>);\n                if (v23 == 0 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)))\n                {\n                    v24 = sub_411340();\n                    v11->field_28 = v24;\n                    v25 = (char *)(v12 + -0x1 * v19) + v24;\n                    v26 = v6;\n                    v27 = v5;\n                    if (v5 <= 9223372036854775807 - v6)\n                    {\n                        v28 = 0;\n                        v29 = &v5;\n                        do\n                        {\n                            if ((unsigned int)v9 != 0)\n                            {\n                                v31 = v7;\n                                v32 = v25->field_8;\n                                v30 = v25->field_0 + v25->field_8;\n                                if (v27 == v30 && *((int *)&v25->field_10) == (v7 & -2))\n                                {\n                                    v33 = v26 + v32;\n                                    *((unsigned int *)&v25->field_10) = v7;\n                                    v28 = (unsigned int)v28 + 1;\n                                    v25->field_8 = v33;\n                                }\n                            }\n                            else\n                            {\n                                v30 = v11->field_8;\n                                if (v11->field_8 <= v27)\n                                {\n                                    v31 = v7;\n                                }\n                            }\n                            if ((unsigned int)v9 == 0 || v27 != v30 || *((int *)&v25->field_10) != (v7 & -2))\n                            {\n                                if (((unsigned int)v9 == 0 || v30 <= v27) && (v11->field_8 <= v27 || (unsigned int)v9 != 0))\n                                {\n                                    tmp_15 = v9;\n                                    v28 = (unsigned int)v28 + 1;\n                                    v9 = (unsigned int)v9 + 1;\n                                    v25 = &v11->field_28[2 * tmp_15 + tmp_15];\n                                    v11->field_28[2 * tmp_15 + tmp_15].field_0 = v27;\n                                    v25->field_8 = v26;\n                                    *((unsigned long *)&v25->field_10) = v31;\n                                    if ((unsigned int)v28 >= v3)\n                                    {\n                                        break;\n                                    }\n                                }\n                                if (((unsigned int)v9 == 0 || v30 > v27) && (v11->field_8 > v27 || (unsigned int)v9 != 0))\n                                {\n                                    if (v30 - v27 < v26)\n                                    {\n                                        break;\n                                    }\n                                    v5 = v30;\n                                    v34 = v27 + v26 - v30;\n                                    v6 = v34;\n                                }\n                            }\n                            if ((unsigned int)v28 >= v3 && (v11->field_8 > v27 || v30 > v27))\n                            {\n                                break;\n                            }\n                            v29 = &(&v5)[7 * v28];\n                            v26 = (&v5)[2 + 7 * v28];\n                            v27 = (&v5)[7 * v28];\n                        }\n                        while ((&v5)[7 * v28] <= 9223372036854775807 - (&v5)[2 + 7 * v28]);\n                        if (((unsigned int)v9 == 0 || v30 <= v27) && (v11->field_8 <= v27 || (unsigned int)v9 != 0) && ((unsigned int)v9 == 0 || v27 != v30 || *((int *)&v25->field_10) != (v7 & -2)) && (unsigned int)v28 < v3 || (v27 == v30 && *((int *)&v25->field_10) == (v7 & -2) && (unsigned int)v9 != 0 || ((unsigned int)v9 == 0 || v30 > v27) && (v11->field_8 > v27 || (unsigned int)v9 != 0) && ((unsigned int)v9 == 0 || v27 != v30 || *((int *)&v25->field_10) != (v7 & -2)) && v30 - v27 >= v26) && (unsigned int)v28 < v3)\n                        {\n                            __assert_fail(); /* do not return */\n                        }\n                        else if (((unsigned int)v9 == 0 || v30 > v27) && (v11->field_8 > v27 || (unsigned int)v9 != 0) && ((unsigned int)v9 == 0 || v27 != v30 || *((int *)&v25->field_10) != (v7 & -2)))\n                        {\n                            v37 = 0;\n                            if (v11->field_8 != 0)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                }\n                if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>) || v23 != 0)\n                {\n                    sub_411530(); /* do not return */\n                }\n            }\n            else\n            {\n                __assert_fail(); /* do not return */\n            }\n        }\n        if (v5 <= 9223372036854775807 - v6 && v23 == 0 && v11->field_18 <= !((unsigned long long)v3) && v17 >= 0 && v3 != 0 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)) && (v25->field_10 & 1) != 0 || v23 == 0 && v11->field_18 <= !((unsigned long long)v3) && v17 >= 0 && v3 != 0 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)) && v5 > 9223372036854775807 - v6)\n        {\n            __assert_fail(); /* do not return */\n        }\n        if (v5 <= 9223372036854775807 - v6 && v23 == 0 && v11->field_18 <= !((unsigned long long)v3) && v17 >= 0 && v3 != 0 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)) && (v25->field_10 & 1) != 0 || v23 == 0 && v11->field_18 <= !((unsigned long long)v3) && v17 >= 0 && v3 != 0 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)) && v3 == 0)\n        {\n            if ((v25->field_10 & 1) == 0)\n            {\n                v35 = v11->field_21;\n                if ((unsigned int)v9 <= 72)\n                {\n                    v11->field_18 = v9;\n                    if (v35 == 0)\n                    {\n                        v11->field_8 = v25->field_8 + v25->field_0;\n                    }\n                }\n                else if (v35 == 0)\n                {\n                    v39 = v11->field_28;\n                    v11->field_18 = v9 - 1;\n                    v11->field_8 = v39[3 * v9 + -5] + v39[3 * v9 + -6];\n                }\n            }\n            else\n            {\n                v11->field_21 = 1;\n            }\n            if ((v25->field_10 & 1) != 0 || v35 != 0 && (unsigned int)v9 > 72)\n            {\n                v11->field_18 = v9;\n            }\n            v37 = 1;\n        }\n        if (v5 <= 9223372036854775807 - v6 && v23 == 0 && v11->field_18 <= !((unsigned long long)v3) && v17 >= 0 && v3 != 0 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)) && (v25->field_10 & 1) != 0 || v17 < 0)\n        {\n            v11->field_20 = 1;\n            v37 = 0;\n        }\n    }\n    return v37;\n}\n"
        },
        {
            "funcName": "sub_40bb50",
            "funcStartAddr": "0x40bb50",
            "funcEndAddr": "0x40bcd0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned int field_8;\n    char padding_c[4];\n    char field_10;\n} struct_0;\n\nextern int512_t g_40b360;\nextern int512_t g_40b370;\nextern int512_t g_419120;\n\nint sub_40bb50()\n{\n    unsigned long long v1;  // rbx\n    struct_0 *v2;  // rsi\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rax\n    void|uint128_t v5;  // xmm1\n    uint128_t v6;  // xmm0\n    unsigned int v8;  // ymm1\n    uint128_t v9;  // xmm0\n    unsigned long v10;  // rdi\n    unsigned int v11;  // ymm0\n    void v12;  // xmm0\n    unsigned long v13;  // rbp\n    unsigned long long v14;  // rax\n    unsigned long v16;  // rdx\n    unsigned long v17;  // rcx\n    unsigned long v18;  // r8\n    unsigned long long v19;  // rdi\n    unsigned long long v20;  // rax\n\n    v1 = malloc(0x50);\n    if (v1 != 0)\n    {\n        if (v2 != 0)\n        {\n            *((struct_0 **)(v1 + 40)) = v2;\n            v4 = sub_40b4d0();\n            if (v4 != 0 && v2->field_10 == 0)\n            {\n                v5 = 0;\n                v8 = v2->field_8;\n            }\n        }\n        else\n        {\n            *((long long **)(v1 + 40)) = &g_419120;\n            v3 = sub_40b4d0();\n            v5 = 0;\n            v8 = 6881500231684115661;\n        }\n        if ((v2->field_10 == 0 || v2 == 0) && (v2 == 0 || v4 != 0) && (v2 != 0 || v3 != 0))\n        {\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n            {\n                v6 = 0;\n                v6 = (unsigned int)v10;\n            }\n            else\n            {\n                v9 = 0;\n                v11 = v10 % 2 | (unsigned long long)((unsigned int)v10 & 1);\n                v6 = xmm0<16> * 2;\n            }\n            v12 = v6 / v5;\n        }\n        if ((v2 == 0 || v4 != 0) && (((char)(BinaryOp CmpF & 69) & 1) == 0 || v2->field_10 != 0) && (((char)(BinaryOp CmpF & 69) & 1) == 0 || v2 != 0) && (v2->field_10 != 0 || ((char)(BinaryOp CmpF & 69) & 1) != 0) && (((char)(BinaryOp CmpF & 69) & 1) != 0 || v2 != 0) && (v2 != 0 || v3 != 0))\n        {\n            v13 = (unsigned int)sub_40b2c0();\n            if (((char)(v13 >> 60) & 1) == 0 && [D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>) == 0)\n            {\n                *((unsigned long *)(v1 + 16)) = v13;\n                if (v13 != 0)\n                {\n                    v14 = calloc(v13, 0x10);\n                    *((unsigned long long *)v1) = v14;\n                    if (v14 != 0)\n                    {\n                        *((long long *)(v1 + 24)) = 0;\n                        *((long long *)(v1 + 32)) = 0;\n                        *((unsigned long long *)(v1 + 8)) = v13 * 16 + v14;\n                        *((int *)(v1 + 48)) = (v16 == 0? &g_40b360 : v16);\n                        *((int *)(v1 + 56)) = (v17 == 0? &g_40b370 : v17);\n                        *((unsigned long *)(v1 + 64)) = v18;\n                        *((long long *)(v1 + 72)) = 0;\n                    }\n                }\n            }\n        }\n        if (...)\n        {\n            v19 = v1;\n            v1 = 0;\n            free(v19);\n        }\n    }\n    v20 = v1;\n    return v20;\n}\n"
        },
        {
            "funcName": "sub_40b8e0",
            "funcStartAddr": "0x40b8e0",
            "funcEndAddr": "0x40b92b",
            "decompiledFuncCode": "int sub_40b8e0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rsi\n    unsigned long long *v6;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long long v8[2];  // rbx\n    unsigned long long v9;  // rsi\n\n    v2 = v1;\n    v9 = *(v6);\n    if (*(v6) != 0)\n    {\n        v6 = sub_40b380();\n        while (true)\n        {\n            if (v9 != v1)\n            {\n                v1 = v3;\n                v7 = *((long long *)(r12<8> + 56))();\n                if (v7 == 0)\n                {\n                    v8 = v8[1];\n                    if (v8 == 0)\n                    {\n                        break;\n                    }\n                    v9 = *(v8);\n                }\n            }\n            if (v9 == v1 || v7 != 0)\n            {\n                return stack_base + 0;\n            }\n        }\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_40a9f0",
            "funcStartAddr": "0x40a9f0",
            "funcEndAddr": "0x40a9f8",
            "decompiledFuncCode": "extern unsigned long long g_6219a8;\n\nint sub_40a9f0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long v2;  // rax\n\n    g_6219a8 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40e702",
            "funcStartAddr": "0x40e702",
            "funcEndAddr": "0x40e72b",
            "decompiledFuncCode": "int sub_40e702()\n{\n    unsigned long v0;  // [bp-0x30]\n    unsigned long v1;  // [bp-0x28]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v4;  // [bp-0x10]\n    unsigned long v5;  // [bp-0x8]\n    unsigned long v7;  // r15\n    unsigned long v8;  // r14\n    unsigned long v9;  // r13\n    unsigned long v10;  // r12\n    unsigned long v11;  // rbx\n\n    v5 = v7;\n    v4 = v8;\n    v3 = v9;\n    v2 = v10;\n    v1 = stack_base + 0;\n    v0 = v11;\n}\n"
        },
        {
            "funcName": "sub_413020",
            "funcStartAddr": "0x413020",
            "funcEndAddr": "0x413052",
            "decompiledFuncCode": "int sub_413020() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40e990",
            "funcStartAddr": "0x40e990",
            "funcEndAddr": "0x40e9f9",
            "decompiledFuncCode": "int sub_40e990()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_40e400();\n}\n"
        },
        {
            "funcName": "sub_416fd0",
            "funcStartAddr": "0x416fd0",
            "funcEndAddr": "0x416fe8",
            "decompiledFuncCode": "extern int512_t g_61f428;\n\nint sub_416fd0()\n{\n}\n"
        },
        {
            "funcName": "sub_412cc0",
            "funcStartAddr": "0x412cc0",
            "funcEndAddr": "0x412d2c",
            "decompiledFuncCode": "extern unsigned int g_41aa44;\nextern unsigned int g_41aa5f;\n\nint sub_412cc0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x8]\n    unsigned long v3;  // r12\n    unsigned long v4;  // rbx\n\n    v1 = v3;\n    v0 = v4;\n    if (false)\n    {\n        dcgettext(0x0, 0x41aa44, 0x5);\n    }\n    dcgettext(0x0, 0x41aa5f, 0x5);\n    sub_40ec30();\n    sub_40e920();\n}\n"
        },
        {
            "funcName": "sub_40e8d0",
            "funcStartAddr": "0x40e8d0",
            "funcEndAddr": "0x40e8da",
            "decompiledFuncCode": "int sub_40e8d0()\n{\n}\n"
        },
        {
            "funcName": "sub_40f8a0",
            "funcStartAddr": "0x40f8a0",
            "funcEndAddr": "0x40f8fb",
            "decompiledFuncCode": "int sub_40f8a0()\n{\n    unsigned int v1[2];  // rdi\n    unsigned long long v2;  // rax\n\n    switch (v1[0])\n    {\n    case 0: case 4:\n        v1[0] = 5;\n        return v2;\n    case 1: case 2:\n        v2 = close(v1[1]);\n    case 3:\n        v2 = v1[1];\n        if (v1[1] >= 0)\n        {\n            __assert_fail(); /* do not return */\n        }\n    default:\n        __assert_fail(); /* do not return */\n    }\n    v2 = v1[0];\n}\n"
        },
        {
            "funcName": "sub_40eaa0",
            "funcStartAddr": "0x40eaa0",
            "funcEndAddr": "0x40eab1",
            "decompiledFuncCode": "int sub_40eaa0()\n{\n}\n"
        },
        {
            "funcName": "sub_40fce0",
            "funcStartAddr": "0x40fce0",
            "funcEndAddr": "0x40fceb",
            "decompiledFuncCode": "int sub_40fce0()\n{\n}\n"
        },
        {
            "funcName": "sub_40ea1f",
            "funcStartAddr": "0x40ea1f",
            "funcEndAddr": "0x40ea90",
            "decompiledFuncCode": "extern uint128_t g_621ae0;\nextern uint128_t g_621af0;\nextern uint128_t g_621b00;\nextern unsigned long long g_621b10;\n\nint sub_40ea1f()\n{\n    void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v5;  // rdx\n\n    v3 = g_621b10;\n    *((uint128_t *)&v0) = g_621ae0;\n    *((uint128_t *)&v1) = g_621af0;\n    *((uint128_t *)&v2) = g_621b00;\n    *((unsigned int *)&((char *)stack_base)[4 * v5 % 32 + -64]) = (unsigned int)((unsigned long long)(!((unsigned int)((unsigned long long)(unsigned int)*((int *)&((char *)stack_base)[4 * v5 % 32 + -64]) >> ((char)((unsigned int)v5 & 31) & 31))) & 1) << ((char)((unsigned int)v5 & 31) & 31)) ^ *((int *)&((char *)stack_base)[4 * v5 % 32 + -64]);\n    return sub_40e400();\n}\n"
        },
        {
            "funcName": "sub_409de0",
            "funcStartAddr": "0x409de0",
            "funcEndAddr": "0x409df8",
            "decompiledFuncCode": "int sub_409de0()\n{\n}\n"
        },
        {
            "funcName": "sub_410660",
            "funcStartAddr": "0x410660",
            "funcEndAddr": "0x410a68",
            "decompiledFuncCode": "extern unsigned int g_621b28;\nextern unsigned int g_621b2c;\n\nint sub_410660()\n{\n    unsigned long long v0;  // [bp-0x120]\n    void tmp_77;  // tmp #77\n    void tmp_84;  // tmp #84\n    void v1;  // [bp-0x118]\n    void v2;  // [bp-0x108]\n    unsigned long|char v3;  // [bp-0xf8]\n    unsigned long v4;  // [bp-0xf0]\n    unsigned long v5;  // [bp-0xe8]\n    unsigned long v6;  // [bp-0xe0]\n    unsigned long|void v7;  // [bp-0xd8]\n    unsigned long|unsigned long long v8;  // [bp-0xd0]\n    void v9;  // [bp-0xc8]\n    unsigned long long v10;  // [bp-0xc0]\n    char v11;  // [bp-0xb8]\n    unsigned long v12;  // [bp-0x70]\n    unsigned long v13;  // [bp-0x68]\n    unsigned long v14;  // [bp-0x60]\n    unsigned long v15;  // [bp-0x58]\n    unsigned long v17;  // rsi\n    unsigned long long v18;  // rbp\n    unsigned int v19;  // edi\n    unsigned int v20;  // ebx\n    uint128_t v21[2];  // rdx\n    char v22;  // al\n    unsigned long long v23;  // rsi\n    unsigned long long|unsigned int v24;  // r13\n    unsigned long long v25;  // rax\n    unsigned long long v26;  // rax\n    unsigned long long v27;  // r12\n    unsigned long long v28;  // cc_dep1\n    unsigned long long v29;  // cc_dep1\n    unsigned int *v30;  // rax\n    char v31;  // al\n    unsigned long long v32;  // rax\n    unsigned long long v33;  // rsi\n    unsigned long long v34;  // r13\n    unsigned long long v35;  // rdi\n    unsigned long long v36;  // rsi\n    char v37;  // bpl\n    char v38;  // r14b\n    unsigned long long v39;  // rax\n    unsigned long long v41;  // rax\n    unsigned int v43;  // edx\n    char v44;  // dl\n    unsigned long v45;  // r14\n    unsigned long long v46;  // r14\n    unsigned long long v47;  // rax\n\n    v18 = v17;\n    v20 = v19;\n    if (v21 != 0)\n    {\n        v0 = stack_base + -280;\n        *((int128_t *)&v1) = *((int128_t *)&v21);\n        *((int128_t *)&v2) = *((int128_t *)&v21[2]);\n        v24 = sub_4105a0();\n    }\n    else\n    {\n        v0 = 0;\n        v24 = 0;\n    }\n    if (v21 == 0 || v24 >= 0)\n    {\n        if (v19 < 0)\n        {\n            if (v17 == 0)\n            {\n                *(__errno_location()) = 9;\n            }\n            if (g_621b2c >= 0 && v17 != 0 && (v22 == 0 || v24 != 2))\n            {\n                v25 = utimensat(0xffffff9c, v18);\n                v27 = v25;\n                v28 = v25;\n            }\n        }\n        if (g_621b2c >= 0)\n        {\n            if ((v19 >= 0 || v17 != 0) && v24 == 2)\n            {\n                if (v19 >= 0)\n                {\n                    v22 = __fxstat(0x1, v19) != 0;\n                }\n                else\n                {\n                    v22 = __xstat(0x1, v17, (unsigned int)&v11) != 0;\n                }\n                if (v22 == 0)\n                {\n                    v23 = v0;\n                    if (*((long long *)(v0 + 8)) != 1073741822)\n                    {\n                        v24 = 3;\n                        if (*((long long *)(v23 + 24)) == 1073741822)\n                        {\n                            *((unsigned long *)(v23 + 24)) = v15;\n                            *((unsigned long *)(v23 + 16)) = v14;\n                        }\n                    }\n                    else\n                    {\n                        v24 = 3;\n                        *((unsigned long *)v23) = v12;\n                        *((unsigned long *)(v23 + 8)) = v13;\n                    }\n                }\n            }\n            if (v19 >= 0 && (v22 == 0 || v24 != 2))\n            {\n                v26 = futimens(v19);\n                v27 = v26;\n                v29 = v26;\n            }\n        }\n    }\n    if ((v19 >= 0 && g_621b2c >= 0 && (v22 == 0 || v24 != 2) && (v21 == 0 || v24 >= 0) && (unsigned int)v26 <= 0 || v19 < 0 && g_621b2c >= 0 && v17 != 0 && (v22 == 0 || v24 != 2) && (v21 == 0 || v24 >= 0) && (unsigned int)v25 <= 0) && !((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, cc_dep1<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v30 = __errno_location();\n    }\n    if (v19 >= 0 && g_621b2c >= 0 && (v22 == 0 || v24 != 2) && (v21 == 0 || v24 >= 0) && (unsigned int)v26 > 0 || v19 < 0 && g_621b2c >= 0 && v17 != 0 && (v22 == 0 || v24 != 2) && (v21 == 0 || v24 >= 0) && (unsigned int)v25 > 0)\n    {\n        *(__errno_location()) = 38;\n    }\n    if ((v19 >= 0 && g_621b2c >= 0 && (v22 == 0 || v24 != 2) && (v21 == 0 || v24 >= 0) && (unsigned int)v26 <= 0 || v19 < 0 && g_621b2c >= 0 && v17 != 0 && (v22 == 0 || v24 != 2) && (v21 == 0 || v24 >= 0) && (unsigned int)v25 <= 0) && !((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, cc_dep1<8>, 0x0<64>, cc_ndep<8>)) && *(v30) != 38 || (v19 >= 0 && g_621b2c >= 0 && (v22 == 0 || v24 != 2) && (v21 == 0 || v24 >= 0) && (unsigned int)v26 <= 0 || v19 < 0 && g_621b2c >= 0 && v17 != 0 && (v22 == 0 || v24 != 2) && (v21 == 0 || v24 >= 0) && (unsigned int)v25 <= 0) && (char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, cc_dep1<8>, 0x0<64>, cc_ndep<8>))\n    {\n        g_621b2c = 1;\n    }\n    if ((v19 >= 0 && g_621b2c >= 0 && (v22 == 0 || v24 != 2) && (v21 == 0 || v24 >= 0) && (unsigned int)v26 <= 0 || v19 < 0 && g_621b2c >= 0 && v17 != 0 && (v22 == 0 || v24 != 2) && (v21 == 0 || v24 >= 0) && (unsigned int)v25 <= 0) && !((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, cc_dep1<8>, 0x0<64>, cc_ndep<8>)) && *(v30) == 38 || v19 >= 0 && g_621b2c >= 0 && (v22 == 0 || v24 != 2) && (v21 == 0 || v24 >= 0) && (unsigned int)v26 > 0 || v19 < 0 && g_621b2c >= 0 && v17 != 0 && (v22 == 0 || v24 != 2) && (v21 == 0 || v24 >= 0) && (unsigned int)v25 > 0 || (v21 == 0 && v19 >= 0 || v21 == 0 && v17 != 0 || v24 >= 0 && v19 >= 0 || v24 >= 0 && v17 != 0) && g_621b2c < 0)\n    {\n        g_621b2c = -1;\n        g_621b28 = -1;\n        if (v24 != 0 && v24 != 3)\n        {\n            if (v19 >= 0)\n            {\n                v31 = __fxstat(0x1, v19) != 0;\n            }\n            else\n            {\n                v31 = __xstat(0x1, v18, (unsigned int)&v11) != 0;\n            }\n        }\n    }\n    if (...)\n    {\n        v27 = -18446744069414584321;\n    }\n    if (...)\n    {\n        v27 = 0;\n        v32 = sub_4104d0();\n    }\n    if (...)\n    {\n        v33 = v0;\n        if (v0 != 0)\n        {\n            v34 = &v3;\n            v3 = *((long long *)v33);\n            v35 = *((long long *)(v33 + 8)) >> 63;\n            tmp_77 = *((long long *)(v33 + 8)) * 2361183241434822607 >> 64;\n            tmp_84 = *((long long *)(v33 + 24));\n            v5 = *((long long *)(v33 + 16));\n            v36 = *((long long *)(v33 + 24)) >> 63;\n            v4 = (tmp_77 >> 7) - v35;\n            v6 = ((unsigned long long)(tmp_84 * 2361183241434822607 >> 64) >> 7) - v36;\n        }\n    }\n    if (...)\n    {\n        v34 = 0;\n    }\n    if (...)\n    {\n        v27 = futimesat(0xffffff9c, v18);\n    }\n    if (...)\n    {\n        v27 = futimesat(v20, 0x0);\n        if ((unsigned int)v27 != 0)\n        {\n            v27 = -18446744069414584321;\n            if (v18 != 0)\n            {\n                v39 = v0;\n                if (v0 != 0)\n                {\n                    v41 = *((long long *)(v39 + 16));\n                    v7 = *((long long *)v39);\n                    v8 = v41;\n                }\n                v27 = utime(v18);\n            }\n        }\n        else if (v34 != 0)\n        {\n            v37 = 499999 < *((long long *)(v34 + 8));\n            v38 = 499999 < *((long long *)(v34 + 24));\n            if ((499999 < *((long long *)(v34 + 8)) || v38 != 0) && __fxstat(0x1, v20) == 0)\n            {\n                v43 = v14 - *((long long *)(v34 + 16));\n                v44 = v14 - *((long long *)(v34 + 16)) == 1;\n                *((int128_t *)&v7) = *((int128_t *)v34);\n                *((int128_t *)&v9) = *((int128_t *)(v34 + 16));\n                v46 = (unsigned int)v45 & rdx<4>;\n                if (v12 - *((long long *)v34) == 1 && v37 != 0 && v13 == 0)\n                {\n                    v8 = 0;\n                }\n                if (v15 == 0 && v46 != 0)\n                {\n                    v10 = 0;\n                }\n                if ((v13 == 0 || v15 == 0) && (v15 == 0 || v12 - *((long long *)v34) == 1) && (v13 == 0 || v46 != 0) && (v15 == 0 || v37 != 0) && (v12 - *((long long *)v34) == 1 || v46 != 0) && (v37 != 0 || v46 != 0))\n                {\n                    futimesat(v20, 0x0);\n                }\n                v27 = 0;\n            }\n        }\n    }\n    v47 = v27;\n    return v47;\n}\n"
        },
        {
            "funcName": "sub_40e900",
            "funcStartAddr": "0x40e900",
            "funcEndAddr": "0x40e912",
            "decompiledFuncCode": "int sub_40e900()\n{\n}\n"
        },
        {
            "funcName": "sub_411490",
            "funcStartAddr": "0x411490",
            "funcEndAddr": "0x4114a7",
            "decompiledFuncCode": "int sub_411490()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_4112e0();\n}\n"
        },
        {
            "funcName": "sub_411d00",
            "funcStartAddr": "0x411d00",
            "funcEndAddr": "0x4122fe",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    char padding_18[8];\n    struct struct_1 *field_20;\n} struct_0;\n\nextern unsigned int g_41a918;\nextern unsigned int g_41a938;\nextern unsigned int g_41a968;\nextern unsigned int g_41a988;\nextern unsigned int g_41a9b8;\nextern unsigned long long stderr;\n\nint sub_411d00()\n{\n    char *v0;  // [bp-0x78]\n    unsigned long long v1;  // [bp-0x70]\n    unsigned int *v2;  // [bp-0x68]\n    char *v3;  // [bp-0x58]\n    unsigned int v4;  // [bp-0x50]\n    char v5;  // [bp-0x49]\n    unsigned int v6;  // [bp-0x44]\n    unsigned int v7;  // [bp-0x40]\n    unsigned int v8;  // [bp-0x3c]\n    struct_0 *v9;  // [bp+0x8]\n    unsigned int v10;  // [bp+0x10]\n    char *v11;  // r14\n    char *v12;  // rdx\n    unsigned long v13;  // r8\n    char *v14;  // rbp\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // r13\n    unsigned long long v17;  // rcx\n    unsigned long long|unsigned long long * v18;  // rbx\n    unsigned long|unsigned long long|unsigned int v19;  // r12\n    char *v20;  // r15\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // r8\n    char *v24;  // rdi\n    unsigned long long v25;  // r15\n    unsigned long long v26;  // rbp\n    unsigned long long v27;  // rax\n    unsigned int v28;  // r9d\n    unsigned long long v29;  // r9\n    unsigned long long v30;  // rdx\n    unsigned int v31;  // ecx\n    char *v33;  // rbp\n    unsigned long long v34;  // rdx\n    unsigned long long *v35;  // rsi\n    void *v36;  // rdi\n    unsigned long long|unsigned long long * v37;  // rbx\n    unsigned long long v38;  // rbp\n    unsigned long long v39;  // r12\n    unsigned int *v41;  // rdx\n    unsigned long long v42;  // rax\n    unsigned long long v43;  // r14\n\n    v11 = v9->field_20;\n    v3 = v12;\n    v2 = v13;\n    v14 = v9->field_20;\n    *((struct struct_1 *)&v5) = *(v9->field_20);\n    if (*(v9->field_20) != 61 && *(v9->field_20) != 0)\n    {\n        do\n        {\n            v14 = &v14[1];\n            v15 = *(v14);\n        }\n        while (v15 != 61 && (char)v15 != 0);\n        v16 = v14 - v11;\n    }\n    if (*(v9->field_20) == 0 || *(v9->field_20) == 61)\n    {\n        v16 = 0;\n    }\n    v18 = v17;\n    v19 = 0;\n    v0 = *((long long *)v17);\n    v20 = *((long long *)v17);\n    if (*((long long *)v17) != 0)\n    {\n        while (true)\n        {\n            v21 = strncmp(v20, v9->field_20, v16);\n            if (v21 == 0)\n            {\n                v22 = strlen(v20);\n            }\n            if (v21 != 0 || v22 != v16)\n            {\n                v18 += 32;\n                v20 = *(v18);\n                v23 = v19 + 1;\n                if (*(v18) != 0)\n                {\n                    v19 = v23;\n                }\n                else\n                {\n                    v8 = v19;\n                    v18 = 0;\n                    v6 = -1;\n                    v24 = v0;\n                    v25 = 0;\n                    v4 = 0;\n                    v7 = 0;\n                    v1 = 0;\n                    v0 = v14;\n                    v26 = v17;\n                    do\n                    {\n                        v27 = strncmp(v24, v9->field_20, v16);\n                        if (v27 == 0)\n                        {\n                            if (v18 == 0)\n                            {\n                                v6 = v25;\n                                v18 = v26;\n                            }\n                            else if (*((int *)(v18 + 24)) != *((int *)(v26 + 24)) || *((int *)(v18 + 8)) != *((int *)(v26 + 8)) || v28 != 0 || *((long long *)(v18 + 16)) != *((long long *)(v26 + 16)))\n                            {\n                                if (v4 == 0)\n                                {\n                                    if (v10 == 0)\n                                    {\n                                        v4 = 1;\n                                    }\n                                    else if (v1 == 0)\n                                    {\n                                        v1 = calloc((int)v8, 0x1);\n                                        v4 = 1;\n                                    }\n                                    if (false)\n                                    {\n                                        v7 = 1;\n                                        *((char *)(v1 + (int)v6)) = 1;\n                                    }\n                                    if (v1 != 0)\n                                    {\n                                        *((char *)(v1 + v25)) = 1;\n                                    }\n                                }\n                            }\n                        }\n                        v26 += 32;\n                        v24 = *((long long *)v26);\n                        v25 += 1;\n                    }\n                    while (*((long long *)v26) != 0);\n                    v14 = v0;\n                    if (v1 == 0)\n                    {\n                        v29 = v4;\n                        if (v4 == 0)\n                        {\n                            if (v18 == 0)\n                            {\n                                break;\n                            }\n                            v19 = v6;\n                        }\n                    }\n                    if (v1 != 0 || v4 != 0)\n                    {\n                        if (v10 != 0)\n                        {\n                            if (v4 != 0)\n                            {\n                                dcgettext(0x0, 0x41a918, 0x5);\n                                __fprintf_chk();\n                                v11 = v9->field_20;\n                            }\n                            else\n                            {\n                                flockfile(stderr);\n                                dcgettext(0x0, 0x41a938, 0x5);\n                                __fprintf_chk();\n                                v36 = stderr;\n                                v37 = v17;\n                                v38 = v1;\n                                v39 = v1 + v19 + 1;\n                                do\n                                {\n                                    if (*((char *)v38) != 0)\n                                    {\n                                        __fprintf_chk();\n                                        v36 = stderr;\n                                    }\n                                    v38 += 1;\n                                    v37 = &v37[4];\n                                }\n                                while (v39 != v38);\n                                fputc(0xa, v36);\n                                funlockfile(stderr);\n                                v11 = v9->field_20;\n                            }\n                        }\n                        if (v7 != 0)\n                        {\n                            free(v1);\n                        }\n                        v43 = &v11[strlen(v11)];\n                        v9->field_20 = v43;\n                        v9->field_0 = v9->field_0 + 1;\n                        v9->field_8 = 0;\n                        v42 = 63;\n                    }\n                }\n            }\n            if ((v1 == 0 || v21 == 0) && (v1 == 0 || v22 == v16) && (v21 == 0 || *(v18) == 0) && (v21 == 0 || v4 == 0) && (*(v18) == 0 || v22 == v16) && (v4 == 0 || v22 == v16))\n            {\n                v30 = v9->field_0;\n                v9->field_20 = 0;\n                v9->field_0 = (unsigned int)v30 + 1;\n                v31 = *((int *)(v18 + 8));\n                if (*(v14) == 0)\n                {\n                    if (v31 == 1)\n                    {\n                        if ((unsigned int)((unsigned long long)v9->field_0 + 1) < v24)\n                        {\n                            v9->field_0 = v9->field_0 + 2;\n                            v9->field_10 = v35[1 + v30];\n                        }\n                        else\n                        {\n                            if (v10 != 0)\n                            {\n                                dcgettext(0x0, 0x41a9b8, 0x5);\n                                __fprintf_chk();\n                            }\n                            v9->field_8 = *((int *)(v18 + 24));\n                            v42 = (unsigned long long)(char)(*(v3) != 58) * 5 + 58;\n                        }\n                    }\n                }\n                else\n                {\n                    if (v31 != 0)\n                    {\n                        v33 = &v14[1];\n                        v9->field_10 = v33;\n                    }\n                    else\n                    {\n                        if (v10 != 0)\n                        {\n                            dcgettext(0x0, 0x41a988, 0x5);\n                            __fprintf_chk();\n                        }\n                        v9->field_8 = *((int *)(v18 + 24));\n                        v42 = 63;\n                    }\n                }\n                if (*(v14) == 0 && (unsigned int)((unsigned long long)v9->field_0 + 1) < v24 || *(v14) == 0 && v31 != 1 || *(v14) != 0 && v31 != 0)\n                {\n                    if (v2 != 0)\n                    {\n                        *((unsigned long *)&v2) = v19;\n                    }\n                    v41 = *((long long *)(v18 + 16));\n                    v42 = (unsigned int)*((int *)(v18 + 24));\n                    if (*((long long *)(v18 + 16)) == 0)\n                    {\n                        break;\n                    }\n                    *(v41) = v42;\n                    v42 = 0;\n                }\n            }\n        }\n        if (...)\n        {\n            return v42;\n        }\n    }\n    if (v28 != 0)\n    {\n        if (*((char *)(v35[(long long)(int)v9->field_0] + 1)) != 45)\n        {\n            v34 = strchr(v3, v5);\n            v42 = -18446744069414584321;\n        }\n        if ((v34 != 0 || *((long long *)v17) != 0) && (*((long long *)v17) != 0 || *((char *)(v35[(long long)(int)v9->field_0] + 1)) != 45))\n        {\n            return v42;\n        }\n    }\n    if (v28 == 0 && *((long long *)v17) == 0 || v34 == 0 && v28 != 0 || *((char *)(v35[(long long)(int)v9->field_0] + 1)) == 45 && v28 != 0)\n    {\n        if (v10 != 0)\n        {\n            dcgettext(0x0, 0x41a968, 0x5);\n            __fprintf_chk();\n        }\n        v9->field_20 = 0;\n        v9->field_0 = v9->field_0 + 1;\n        v9->field_8 = 0;\n        return 63;\n    }\n}\n"
        },
        {
            "funcName": "sub_40b790",
            "funcStartAddr": "0x40b790",
            "funcEndAddr": "0x40b8cc",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_40b790()\n{\n    unsigned long v0;  // [bp-0x20]\n    void tmp_14;  // tmp #14\n    unsigned long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // r13\n    unsigned long v5;  // r12\n    unsigned long v6;  // rbx\n    unsigned long long v7[2];  // rdi\n    unsigned long long v8;  // rdi\n    struct_0 *v9;  // rax\n    unsigned long long v10;  // rdx\n    unsigned long|unsigned long long v11;  // rbx\n    unsigned long long v12[2];  // rsi\n    unsigned long v13;  // xmm1lq\n\n    v2 = v4;\n    v1 = v5;\n    v0 = v6;\n    v11 = 0;\n    v12 = *(v7);\n    v8 = v7[1];\n    if (v12 < v8)\n    {\n        while (true)\n        {\n            if (*(v12) == 0)\n            {\n                v12 = &v12[2];\n                if (v12 >= v8)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v9 = v12[1];\n                v10 = 1;\n                if (v12[1] != 0)\n                {\n                    do\n                    {\n                        v9 = v9->field_8;\n                        v10 += 1;\n                    }\n                    while (v9 != 0);\n                }\n                v11 = (v11 < v10? v10 : v11);\n                v12 = &v12[2];\n                if (v12 >= v8)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    __fprintf_chk();\n    __fprintf_chk();\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, xmm1lq<8>, 0x0<64>, cc_ndep<8>)))\n    {\n    }\n    else\n    {\n        tmp_14 = v13;\n    }\n    __fprintf_chk();\n}\n"
        },
        {
            "funcName": "sub_40a8ba",
            "funcStartAddr": "0x40a8ba",
            "funcEndAddr": "0x40a8ec",
            "decompiledFuncCode": "extern int512_t g_419020;\n\nint sub_40a8ba()\n{\n    return *((int *)&((char *)&g_419020)[4 * (unsigned long long)(unsigned int)sub_412e60()]);\n}\n"
        },
        {
            "funcName": "sub_411220",
            "funcStartAddr": "0x411220",
            "funcEndAddr": "0x411294",
            "decompiledFuncCode": "extern unsigned int g_41a259;\nextern unsigned int g_41a284;\nextern unsigned int g_41a4b0;\n\nint sub_411220()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x41a259, 0x5));\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x41a284, 0x5));\n    dcgettext(0x0, 0x41a4b0, 0x5);\n}\n"
        },
        {
            "funcName": "sub_4135d0",
            "funcStartAddr": "0x4135d0",
            "funcEndAddr": "0x4137b3",
            "decompiledFuncCode": "int sub_4135d0()\n{\n    unsigned int v0;  // [bp-0xd0]\n    unsigned int v1;  // [bp-0xcc]\n    char v2;  // [bp-0xc8]\n    unsigned int v3;  // [bp-0xb0]\n    unsigned int v4;  // [bp-0xac]\n    unsigned int v5;  // [bp-0xa8]\n    unsigned long v6;  // [bp+0x8]\n    unsigned int v7;  // edx\n    unsigned int v8;  // edi\n    unsigned int v9;  // esi\n    unsigned long|unsigned int v10;  // ecx\n    unsigned long v11;  // rsi\n    unsigned int v12;  // r12d\n    unsigned long long v13;  // rbx\n    unsigned int *v15;  // rbp\n    unsigned long v16;  // r8\n    unsigned long long v17;  // rdx\n    unsigned int v18;  // r9d\n    unsigned long v19;  // rsi\n    unsigned long v20;  // rdi\n    unsigned long long v22;  // rax\n\n    v0 = v7;\n    if (v8 >= 0)\n    {\n        v13 = __fxstat(0x1, v8);\n        if ((unsigned int)v13 == 0)\n        {\n            v10 = v3;\n            if (((unsigned short)v3 & 0xf000) != 0x4000)\n            {\n                v12 = 20;\n                v13 = -18446744069414584321;\n                *((int *)v11) = 20;\n                v15 = __errno_location();\n            }\n            if (((unsigned short)v3 & 0xf000) == 0x4000 && ((unsigned int)v11 != -1 || (unsigned int)v16 != -1) && ((unsigned int)v11 != -1 || v5 != (unsigned int)v16) && (v4 != (unsigned int)v11 || (unsigned int)v16 != -1) && (v4 != (unsigned int)v11 || v5 != (unsigned int)v16))\n            {\n                *((unsigned long *)&v1) = v10;\n                v13 = fchown(v8);\n            }\n        }\n        if (...)\n        {\n            v13 = fchmod(v8);\n        }\n    }\n    else\n    {\n        v13 = __xstat(0x1, v9, (unsigned int)&v2);\n        if ((unsigned int)v13 == 0)\n        {\n            v10 = v3;\n            if (((unsigned short)v3 & 0xf000) != 0x4000)\n            {\n                v13 = -18446744069414584321;\n                *(__errno_location()) = 20;\n            }\n            if (((unsigned short)v3 & 0xf000) == 0x4000 && ((unsigned int)v11 != -1 || (unsigned int)v16 != -1) && ((unsigned int)v11 != -1 || v5 != (unsigned int)v16) && (v4 != (unsigned int)v11 || (unsigned int)v16 != -1) && (v4 != (unsigned int)v11 || v5 != (unsigned int)v16))\n            {\n                *((unsigned long *)&v1) = v10;\n                if (v0 != -1)\n                {\n                    v13 = lchown(v11);\n                }\n                else\n                {\n                    v13 = chown();\n                }\n            }\n        }\n        if (...)\n        {\n            v13 = chmod(v20, v19);\n        }\n    }\n    if ((v8 < 0 && (unsigned int)v13 == 0 && ((unsigned short)v3 & 0xf000) == 0x4000 && ((unsigned int)v11 != -1 || (unsigned int)v16 != -1) && ((unsigned int)v11 != -1 || v5 != (unsigned int)v16) && (v4 != (unsigned int)v11 || (unsigned int)v16 != -1) && (v4 != (unsigned int)v11 || v5 != (unsigned int)v16) && (unsigned int)v13 == 0 || ((unsigned short)v3 & 0xf000) == 0x4000 && (unsigned int)v13 == 0 && v8 >= 0 && ((unsigned int)v11 != -1 || (unsigned int)v16 != -1) && ((unsigned int)v11 != -1 || v5 != (unsigned int)v16) && (v4 != (unsigned int)v11 || (unsigned int)v16 != -1) && (v4 != (unsigned int)v11 || v5 != (unsigned int)v16) && (unsigned int)v13 == 0) && (v10 & 73) != 0)\n    {\n        v17 = (unsigned int)v10 & 0xc00;\n    }\n    if (((unsigned short)v3 & 0xf000) == 0x4000 && (unsigned int)v16 != -1 && ((unsigned int)v11 == -1 || v4 == (unsigned int)v11) && (v8 < 0 || (unsigned int)v13 == 0) && ((unsigned int)v13 == 0 || v8 >= 0) && v5 == (unsigned int)v16 || (v8 < 0 && (unsigned int)v13 == 0 && ((unsigned short)v3 & 0xf000) == 0x4000 && ((unsigned int)v11 != -1 || (unsigned int)v16 != -1) && ((unsigned int)v11 != -1 || v5 != (unsigned int)v16) && (v4 != (unsigned int)v11 || (unsigned int)v16 != -1) && (v4 != (unsigned int)v11 || v5 != (unsigned int)v16) && (unsigned int)v13 == 0 || ((unsigned short)v3 & 0xf000) == 0x4000 && (unsigned int)v13 == 0 && v8 >= 0 && ((unsigned int)v11 != -1 || (unsigned int)v16 != -1) && ((unsigned int)v11 != -1 || v5 != (unsigned int)v16) && (v4 != (unsigned int)v11 || (unsigned int)v16 != -1) && (v4 != (unsigned int)v11 || v5 != (unsigned int)v16) && (unsigned int)v13 == 0) && (v10 & 73) == 0 || ((unsigned short)v3 & 0xf000) == 0x4000 && ((unsigned int)v11 == -1 || v4 == (unsigned int)v11) && (v8 < 0 || (unsigned int)v13 == 0) && ((unsigned int)v13 == 0 || v8 >= 0) && (unsigned int)v16 == -1)\n    {\n        v17 = 0;\n    }\n    if (...)\n    {\n        if (((v10 ^ v18 | v17) & (int)v6) != 0)\n        {\n            v19 = !((int)(stack_base)[8]) & v10 & 4095 | v18;\n        }\n        else\n        {\n            v13 = 0;\n        }\n    }\n    if (...)\n    {\n        v13 = (unsigned int)close(v8);\n    }\n    if (...)\n    {\n        v15 = __errno_location();\n        v12 = *(v15);\n    }\n    if (...)\n    {\n        close(v8);\n        *(v15) = v12;\n    }\n    v22 = v13;\n    return v22;\n}\n"
        },
        {
            "funcName": "sub_414470",
            "funcStartAddr": "0x414470",
            "funcEndAddr": "0x415e89",
            "decompiledFuncCode": "int sub_414470() { crash_skku;\n}"
        },
        {
            "funcName": "sub_405060",
            "funcStartAddr": "0x405060",
            "funcEndAddr": "0x405113",
            "decompiledFuncCode": "int sub_405060()\n{\n    unsigned int v1;  // edi\n    unsigned long v2;  // rcx\n    unsigned long long v3;  // rax\n    unsigned long v4;  // rdx\n    unsigned long long v5;  // rax\n    unsigned long long v6;  // rbp\n    unsigned long long v7;  // rbp\n    unsigned int v8;  // esi\n\n    v3 = lseek(v1, v2, 0x1);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        if ((char)v4 != 0)\n        {\n            v5 = sub_404cd0();\n            if (v5 < 0)\n            {\n                v7 = (unsigned int)sub_40ea00();\n            }\n        }\n        if ((char)v4 == 0 || v5 >= 0)\n        {\n            return 1;\n        }\n    }\n    else\n    {\n        v6 = (unsigned int)sub_40ea00();\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>) || v5 < 0 && (char)v4 != 0)\n    {\n        error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, v8, 0x5));\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_40b380",
            "funcStartAddr": "0x40b380",
            "funcEndAddr": "0x40b3a6",
            "decompiledFuncCode": "int sub_40b380()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v2[3];  // rbx\n    unsigned long long v3;  // rsi\n    unsigned long long v4;  // rdi\n    unsigned long long v5;  // rsi\n    unsigned long long v6;  // rax\n\n    v2 = v1;\n    v4 = v3;\n    v5 = v2[2];\n    v6 = v2[6]();\n    if (v2[2] <= v6)\n    {\n        abort(); /* do not return */\n    }\n    return v6 * 16 + *(v2);\n}\n"
        },
        {
            "funcName": "sub_411300",
            "funcStartAddr": "0x411300",
            "funcEndAddr": "0x411321",
            "decompiledFuncCode": "int sub_411300()\n{\n    void tmp_10;  // tmp #10\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rdi\n\n    tmp_10 = v2;\n    v4 = v2 * v3;\n    v5 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_411530(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_4113b0",
            "funcStartAddr": "0x4113b0",
            "funcEndAddr": "0x411428",
            "decompiledFuncCode": "int sub_4113b0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40ce50",
            "funcStartAddr": "0x40ce50",
            "funcEndAddr": "0x40cfb6",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char field_0;\n    char field_1;\n    char padding_2[2];\n    unsigned int field_4;\n    unsigned int field_8;\n    unsigned int field_c;\n} struct_0;\n\nint sub_40ce50()\n{\n    void tmp_87;  // tmp #87\n    struct_0 *v1;  // rcx\n    unsigned long long v2;  // r11\n    unsigned int v3;  // edi\n    unsigned int v6;  // r12d\n    char v7;  // sil\n    unsigned long long|unsigned int v8;  // r10\n    unsigned long long|unsigned int v9;  // rdi\n    unsigned long|unsigned int v10;  // r9\n    unsigned long v11;  // r13\n    unsigned long long v12;  // r11\n    unsigned long|unsigned int v13;  // r9\n    unsigned long|unsigned int v14;  // r9\n    unsigned int v16;  // cc_dep1\n    unsigned int v20;  // r10d\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // rax\n    unsigned int *v23;  // r8\n\n    v2 = v1->field_1;\n    v22 = v3 & 4095;\n    v21 = 0;\n    if (v1->field_1 != 0)\n    {\n        while (true)\n        {\n            v6 = v1->field_4;\n            v10 = v1->field_8;\n            if (v7 == 0)\n            {\n                v8 = -18446744069414584321;\n                v9 = 0;\n            }\n            else\n            {\n                v8 = v1->field_c | -3073;\n                v9 = !(v1->field_c) & 0xc00;\n            }\n            if (v2 != 2 || (v22 & 73) == 0 && v7 == 0)\n            {\n                v12 = v1->field_0;\n                v13 = v10 & (unsigned int)v8;\n            }\n            if (v2 == 2)\n            {\n                v12 = v1->field_0;\n                v13 = ((unsigned int)v10 | 73) & (unsigned int)v8;\n            }\n            else if (v2 == 3)\n            {\n                v10 = (unsigned int)v10 & (unsigned int)v22;\n                tmp_87 = !(0 - (unsigned int)(char)(((unsigned int)v10 & 292) < 1)) & 292;\n                v10 = (unsigned int)v10 | ((v10 & 73) != 0? ((v10 & 146) != 0? (unsigned int)v11 : tmp_87) | 73 : ((v10 & 146) != 0? (unsigned int)v11 : tmp_87));\n            }\n            if (v6 == 0)\n            {\n                v14 = v13 & !((unsigned int)rdx<8>);\n            }\n            else\n            {\n                v14 = v13 & v6;\n                if (v12 != 45)\n                {\n                    v16 = v12;\n                }\n                if (v12 == 61)\n                {\n                    v9 |= !((unsigned int)r12<8>);\n                    v8 = !((unsigned int)cc_dep1<8>);\n                }\n            }\n            if (v6 == 0 && v12 == 45 || v12 == 45 && v6 != 0)\n            {\n                v21 |= v14;\n                v22 = (unsigned int)v22 & !((unsigned int)r9<8>);\n            }\n            if (v6 == 0 && v12 != 45 || v12 != 45 && v6 != 0)\n            {\n                if (v12 == 43 && (v6 == 0 || v12 != 61) && (v6 != 0 || v12 != 61))\n                {\n                    v21 |= v14;\n                    v22 = (unsigned int)v22 | v14;\n                }\n                if ((v6 == 0 || v12 == 61) && (v12 == 61 || v6 != 0))\n                {\n                    v1 = &v1[1];\n                    v2 = v1->field_1;\n                    v20 = v8 & 4095;\n                    v21 |= v20;\n                    v22 = (unsigned int)v22 & v9 | v14;\n                    if ((char)v2 == 0)\n                    {\n                        break;\n                    }\n                }\n            }\n            if (v12 != 61 || v12 != 61)\n            {\n                v1 = &v1[1];\n                v2 = v1->field_1;\n                if ((char)v2 == 0)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    if (v23 != 0)\n    {\n        *((unsigned long long *)&v23) = v21;\n    }\n    return v22;\n}\n"
        },
        {
            "funcName": "sub_40a2b0",
            "funcStartAddr": "0x40a2b0",
            "funcEndAddr": "0x40a366",
            "decompiledFuncCode": "int sub_40a2b0()\n{\n    unsigned long long v1;  // rsi\n    unsigned long long v2;  // r13\n    unsigned long long v3;  // rdi\n    unsigned long long v4;  // rbx\n    unsigned long long v5;  // rbp\n    unsigned long long v6;  // r14\n    unsigned long long v7;  // r12\n    unsigned int *v8;  // r15\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rdx\n    char *v12;  // rsi\n    unsigned long long v13;  // rax\n\n    v2 = v1;\n    v4 = v3;\n    v5 = (unsigned int)sub_40ad40();\n    v10 = sub_40ada0();\n    if (v10 > 14)\n    {\n        v6 = (unsigned short)*((short *)v5);\n        v7 = v10;\n        *((short *)v5) = 46;\n        *(v8) = 0;\n        v10 = pathconf(v3, 0x3);\n        if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>))\n        {\n            v11 = 255;\n        }\n        if (*(__errno_location()) == 0 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)))\n        {\n            v11 = v10;\n        }\n        *((unsigned long long *)v5) = v6;\n        if (v7 > v11)\n        {\n            v12 = v4 + v1;\n            v13 = v4 + v2 - v5;\n            if (v4 + v2 - v5 < v11)\n            {\n                v11 = v13 + 1;\n            }\n            else\n            {\n                v12 = v5 + v11 - 1;\n            }\n            *(v12) = 126;\n            *((char *)(v5 + v11)) = 0;\n            return v13;\n        }\n    }\n    if (v7 <= v11 || v10 <= 14)\n    {\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_409ad0",
            "funcStartAddr": "0x409ad0",
            "funcEndAddr": "0x409bac",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nextern unsigned long long g_621998[10];\n\nint sub_409ad0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // r12\n    unsigned long long v5[10];  // r12\n    unsigned long v6;  // rbx\n    unsigned long long v7;  // rdi\n    unsigned long long v9;  // rdi\n    unsigned long long v10[2];  // rbx\n    unsigned long long v11;  // rax\n    unsigned long long v12[2];  // rbp\n    struct_0 *v13;  // rdi\n    void *v14;  // rbx\n    struct_0 *v15;  // rdi\n    void *v16;  // rbx\n\n    v2 = v4;\n    v5 = g_621998;\n    v1 = stack_base + 0;\n    v0 = v6;\n    v12 = *(v5);\n    v11 = v5[1];\n    if (v5[8] != 0 && v5[4] != 0 && *(g_621998) < g_621998[1])\n    {\n        while (true)\n        {\n            v7 = *(v12);\n            if (*(v12) == 0)\n            {\n                v12 = &v12[2];\n                if (v11 <= v12)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v10 = v12;\n                while (true)\n                {\n                    *((long long *)(r12<8> + 64))();\n                    v10 = v10[1];\n                    if (v10 == 0)\n                    {\n                        break;\n                    }\n                    v9 = *(v10);\n                }\n                v11 = v5[1];\n                v12 = &v12[2];\n                if (v5[1] <= *(g_621998) + 16)\n                {\n                    break;\n                }\n            }\n        }\n        v12 = *(v5);\n    }\n    if ((v5[4] == 0 || *(g_621998) < g_621998[1] || v5[8] == 0) && v12 < v11)\n    {\n        do\n        {\n            v13 = v12[1];\n            if (v12[1] != 0)\n            {\n                while (true)\n                {\n                    v14 = v13->field_8;\n                    free(v13);\n                    v13 = v14;\n                    if (v14 == 0)\n                    {\n                        break;\n                    }\n                }\n            }\n            v12 = &v12[2];\n        }\n        while (v5[1] > v12);\n    }\n    v15 = v5[9];\n    if (v5[9] != 0)\n    {\n        while (true)\n        {\n            v16 = v15->field_8;\n            free(v15);\n            v15 = v16;\n            if (v16 == 0)\n            {\n                break;\n            }\n        }\n    }\n    free(*(v5));\n}\n"
        },
        {
            "funcName": "sub_412950",
            "funcStartAddr": "0x412950",
            "funcEndAddr": "0x412968",
            "decompiledFuncCode": "int sub_412950()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 1;\n    return sub_4128f0();\n}\n"
        },
        {
            "funcName": "sub_413960",
            "funcStartAddr": "0x413960",
            "funcEndAddr": "0x4139b1",
            "decompiledFuncCode": "int sub_413960()\n{\n    unsigned int v1;  // [bp+0x100008]\n    void *v2;  // rdi\n\n    __explicit_bzero_chk();\n    free(v2);\n    *(__errno_location()) = v1;\n    return sub_413e90();\n}\n"
        },
        {
            "funcName": "sub_40fcf0",
            "funcStartAddr": "0x40fcf0",
            "funcEndAddr": "0x40fd3c",
            "decompiledFuncCode": "int sub_40fcf0()\n{\n    unsigned int v1;  // [bp+0x100008]\n    unsigned int v2;  // rdi\n    unsigned long long v3;  // rax\n\n    if (v2 > 2)\n    {\n        return v2;\n    }\n    close(v2);\n    *(__errno_location()) = v1;\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_40be70",
            "funcStartAddr": "0x40be70",
            "funcEndAddr": "0x40c060",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    char padding_20[8];\n    struct struct_1 *field_28;\n    unsigned long long field_30;\n    unsigned long long field_38;\n    unsigned long long field_40;\n    unsigned long long field_48;\n} struct_0;\n\ntypedef struct struct_1 {\n    char padding_0[8];\n    unsigned int field_8;\n    char padding_c[4];\n    char field_10;\n} struct_1;\n\nint sub_40be70()\n{\n    void tmp_15;  // tmp #15\n    void *v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned long|unsigned int v2;  // [bp-0x58]\n    unsigned long long v3;  // [bp-0x50]\n    unsigned long long v4;  // [bp-0x48]\n    struct_1 *v5;  // [bp-0x40]\n    unsigned long v6;  // [bp-0x38]\n    unsigned long v7;  // [bp-0x30]\n    unsigned long v8;  // [bp-0x28]\n    unsigned long v9;  // [bp-0x20]\n    struct_0 *v11;  // rdi\n    unsigned long long v12[10];  // rbp\n    unsigned long v13;  // rsi\n    unsigned long v14;  // rsi\n    uint128_t v16;  // xmm0\n    unsigned int v17;  // ymm0\n    uint128_t v18;  // xmm0\n    void v19;  // xmm0\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // rax\n    unsigned long long v25;  // rax\n\n    v12 = v11;\n    if (v11->field_28->field_10 == 0)\n    {\n        if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)))\n        {\n            v18 = 0;\n            v18 = (unsigned int)v13;\n        }\n        else\n        {\n            tmp_15 = v14;\n            v16 = 0;\n            v17 = tmp_15 >> 1 | (unsigned long long)((unsigned int)v14 & 1);\n            v18 = xmm0<16> * 2;\n        }\n        xmm0<16> = (xmm0<16> / Conv(32->128, Load(addr=(Load(addr=(rdi<8> + 0x28<64>), size=8, endness=Iend_LE) + 0x8<64>), size=4, endness=Iend_LE)))\n    }\n    if (*((long long *)&v2) != 0 && (((char)(BinaryOp CmpF & 69) & 1) == 0 || v11->field_28->field_10 != 0) && (v11->field_28->field_10 != 0 || ((char)(BinaryOp CmpF & 69) & 1) != 0) && ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Shl(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3<8>), 0x0<64>, 0x0<64>)? 1 : [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3d<8>), Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3c<8>), 0x0<64>)) == 0)\n    {\n        if (v11->field_10 != *((long long *)&v2))\n        {\n            v0 = calloc(*((long long *)&v2), 0x10);\n            if (v0 != 0)\n            {\n                v2 = (unsigned int)sub_40b2c0();\n                v3 = 0;\n                v1 = *((long long *)&v2) * 16 + v0;\n                *((unsigned long long [10])&v6) = v12[6];\n                v4 = 0;\n                *((unsigned long long [10])&v7) = v12[7];\n                v5 = v11->field_28;\n                *((unsigned long long [10])&v8) = v12[8];\n                *((unsigned long long [10])&v9) = v12[9];\n                v21 = (unsigned int)sub_40b550();\n                if ((char)v21 == 0)\n                {\n                    v12[9] = v9;\n                    v22 = sub_40b550();\n                    if (v22 != 0)\n                    {\n                        v23 = sub_40b550();\n                        if (v23 != 0)\n                        {\n                            free(v0);\n                            v25 = v21;\n                            return v25;\n                        }\n                    }\n                    if (v23 == 0 || v22 == 0)\n                    {\n                        abort(); /* do not return */\n                    }\n                }\n                else\n                {\n                    free(*(v12));\n                    v12[0] = v0;\n                    v12[1] = v1;\n                    v12[2] = v2;\n                    v12[3] = v3;\n                    v12[9] = v9;\n                }\n            }\n        }\n        else\n        {\n            return 1;\n        }\n    }\n    if (v11->field_28->field_10 == 0 && ((char)(BinaryOp CmpF & 69) & 1) == 0 || *((long long *)&v2) == 0 && ((char)(BinaryOp CmpF & 69) & 1) == 0 || *((long long *)&v2) == 0 && v11->field_28->field_10 != 0 || ((char)(BinaryOp CmpF & 69) & 1) == 0 && ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Shl(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3<8>), 0x0<64>, 0x0<64>)? 1 : [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3d<8>), Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3c<8>), 0x0<64>)) != 0 || v11->field_28->field_10 != 0 && ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Shl(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3<8>), 0x0<64>, 0x0<64>)? 1 : [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3d<8>), Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3c<8>), 0x0<64>)) != 0 || v0 == 0 && ((char)(BinaryOp CmpF & 69) & 1) == 0 && v11->field_10 != *((long long *)&v2) || v0 == 0 && v11->field_28->field_10 != 0 && v11->field_10 != *((long long *)&v2))\n    {\n        v21 = 0;\n    }\n    if ((char)v21 != 0 || v11->field_10 != *((long long *)&v2))\n    {\n        v24 = v21;\n        return v24;\n    }\n}\n"
        },
        {
            "funcName": "sub_409a10",
            "funcStartAddr": "0x409a10",
            "funcEndAddr": "0x409a86",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_0;\n\nint sub_409a10()\n{\n    unsigned long long v1[3];  // rbx\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rdx\n    struct_0 *v5;  // rbp\n    unsigned long long v6;  // rax\n\n    v1 = (unsigned long long)(unsigned int)sub_4112e0();\n    v1[0] = v2;\n    v1[2] = (unsigned int)sub_411510();\n    v1[1] = v3;\n    if (rbp<8> != 0)\n    {\n        rbp<8> = sub_40c2f0();\n        v6 = 0;\n        if (v1 != rbp<8>)\n        {\n            free(v1[2]);\n            free(v1);\n            v6 = v5->field_10;\n        }\n        return v6;\n    }\n    sub_411530(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_40e920",
            "funcStartAddr": "0x40e920",
            "funcEndAddr": "0x40e98d",
            "decompiledFuncCode": "int sub_40e920()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_40e400();\n}\n"
        },
        {
            "funcName": "sub_40ebe0",
            "funcStartAddr": "0x40ebe0",
            "funcEndAddr": "0x40ebf3",
            "decompiledFuncCode": "int sub_40ebe0()\n{\n}\n"
        },
        {
            "funcName": "sub_410ab0",
            "funcStartAddr": "0x410ab0",
            "funcEndAddr": "0x410cd0",
            "decompiledFuncCode": "extern unsigned int g_621b28;\nextern unsigned int g_621b2c;\n\nint sub_410ab0()\n{\n    unsigned long|unsigned long long v0;  // [bp-0xd0]\n    unsigned long|void v1;  // [bp-0xc8]\n    unsigned long v2;  // [bp-0xc0]\n    unsigned long|void v3;  // [bp-0xb8]\n    unsigned long v4;  // [bp-0xb0]\n    char v5;  // [bp-0xa8]\n    unsigned int v6;  // [bp-0x90]\n    unsigned long v7;  // [bp-0x60]\n    unsigned long v8;  // [bp-0x58]\n    unsigned long v9;  // [bp-0x50]\n    unsigned long v10;  // [bp-0x48]\n    uint128_t v12[2];  // rsi\n    unsigned long long|unsigned int v13;  // ebx\n    unsigned int v14;  // edi\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // rax\n    unsigned int *v17;  // rax\n    unsigned long long v18;  // rax\n    unsigned long long v19;  // rax\n    unsigned long long v20;  // rax\n    unsigned long long v21;  // rbp\n\n    if (v12 != 0)\n    {\n        v0 = stack_base + -200;\n        *((int128_t *)&v1) = *((int128_t *)&v12);\n        *((int128_t *)&v3) = *((int128_t *)&v12[2]);\n        v13 = (unsigned int)sub_4105a0();\n        if ((unsigned int)v13 >= 0 && g_621b28 >= 0 && (unsigned int)v13 == 2)\n        {\n            v15 = __lxstat(0x1, v14, (unsigned int)&v5);\n            if (v15 == 0)\n            {\n                if ((long long)(&v1)[8] != 1073741822)\n                {\n                    v13 = 3;\n                    if ((long long)(&v3)[8] == 1073741822)\n                    {\n                        v4 = v10;\n                        v3 = v9;\n                    }\n                }\n                else\n                {\n                    v13 = 3;\n                    v1 = v7;\n                    v2 = v8;\n                }\n            }\n        }\n    }\n    else\n    {\n        v13 = 0;\n        v0 = 0;\n        if (g_621b28 < 0)\n        {\n            g_621b28 = -1;\n        }\n    }\n    if (g_621b28 >= 0 && (v12 == 0 || (unsigned int)v13 >= 0) && (v12 == 0 || v15 == 0 || (unsigned int)v13 != 2))\n    {\n        v16 = utimensat(0xffffff9c, v14);\n        if ((unsigned int)v16 > 0)\n        {\n            *(__errno_location()) = 38;\n        }\n        else\n        {\n            if (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>)))\n            {\n                v17 = __errno_location();\n            }\n            if ((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>) || *(v17) != 38)\n            {\n                g_621b2c = 1;\n                g_621b28 = 1;\n                return stack_base + 0;\n            }\n        }\n    }\n    if ((v12 == 0 || (unsigned int)v13 >= 0) && (v12 != 0 || g_621b28 >= 0) && (*(v17) == 38 || g_621b28 < 0 || (unsigned int)v16 > 0) && (g_621b28 < 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>)) || (unsigned int)v16 > 0) && (v12 == 0 || g_621b28 < 0 || v15 == 0 || (unsigned int)v13 != 2))\n    {\n        g_621b28 = -1;\n        if (v13 != 0 && v13 != 3)\n        {\n            v19 = __lxstat(0x1, v14, (unsigned int)&v5);\n        }\n    }\n    if (v12 == 0 && g_621b28 < 0 || v13 == 0 && (v12 == 0 || (unsigned int)v13 >= 0) && (v12 != 0 || g_621b28 >= 0) && (*(v17) == 38 || g_621b28 < 0 || (unsigned int)v16 > 0) && (g_621b28 < 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>)) || (unsigned int)v16 > 0) && (v12 == 0 || g_621b28 < 0 || v15 == 0 || (unsigned int)v13 != 2))\n    {\n        v18 = __lxstat(0x1, v14, (unsigned int)&v5);\n    }\n    if (v13 != 3 && v13 != 0 && (v12 == 0 || (unsigned int)v13 >= 0) && (v12 != 0 || g_621b28 >= 0) && (*(v17) == 38 || g_621b28 < 0 || (unsigned int)v16 > 0) && (g_621b28 < 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>)) || (unsigned int)v16 > 0) && (v12 == 0 || g_621b28 < 0 || v15 == 0 || (unsigned int)v13 != 2) && v19 == 0 && v0 != 0 || v13 == 3 && v13 != 0 && (v12 == 0 || (unsigned int)v13 >= 0) && (v12 != 0 || g_621b28 >= 0) && (*(v17) == 38 || g_621b28 < 0 || (unsigned int)v16 > 0) && (g_621b28 < 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>)) || (unsigned int)v16 > 0) && (v12 == 0 || g_621b28 < 0 || v15 == 0 || (unsigned int)v13 != 2) && v0 != 0)\n    {\n        v20 = sub_4104d0();\n    }\n    if ((v13 != 3 && v13 != 0 && (v12 == 0 || (unsigned int)v13 >= 0) && (v12 != 0 || g_621b28 >= 0) && (*(v17) == 38 || g_621b28 < 0 || (unsigned int)v16 > 0) && (g_621b28 < 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>)) || (unsigned int)v16 > 0) && (v12 == 0 || g_621b28 < 0 || v15 == 0 || (unsigned int)v13 != 2) && v19 == 0 && v0 != 0 || v13 == 3 && v13 != 0 && (v12 == 0 || (unsigned int)v13 >= 0) && (v12 != 0 || g_621b28 >= 0) && (*(v17) == 38 || g_621b28 < 0 || (unsigned int)v16 > 0) && (g_621b28 < 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>)) || (unsigned int)v16 > 0) && (v12 == 0 || g_621b28 < 0 || v15 == 0 || (unsigned int)v13 != 2) && v0 != 0) && v20 == 0 || v13 != 3 && v13 != 0 && (v12 == 0 || (unsigned int)v13 >= 0) && (v12 != 0 || g_621b28 >= 0) && (*(v17) == 38 || g_621b28 < 0 || (unsigned int)v16 > 0) && (g_621b28 < 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>)) || (unsigned int)v16 > 0) && (v12 == 0 || g_621b28 < 0 || v15 == 0 || (unsigned int)v13 != 2) && v19 == 0 && v0 == 0 || v13 == 3 && v13 != 0 && (v12 == 0 || (unsigned int)v13 >= 0) && (v12 != 0 || g_621b28 >= 0) && (*(v17) == 38 || g_621b28 < 0 || (unsigned int)v16 > 0) && (g_621b28 < 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>)) || (unsigned int)v16 > 0) && (v12 == 0 || g_621b28 < 0 || v15 == 0 || (unsigned int)v13 != 2) && v0 == 0 || (v12 == 0 && g_621b28 < 0 || v13 == 0 && (v12 == 0 || (unsigned int)v13 >= 0) && (v12 != 0 || g_621b28 >= 0) && (*(v17) == 38 || g_621b28 < 0 || (unsigned int)v16 > 0) && (g_621b28 < 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>)) || (unsigned int)v16 > 0) && (v12 == 0 || g_621b28 < 0 || v15 == 0 || (unsigned int)v13 != 2)) && v18 == 0)\n    {\n        if (((unsigned short)v6 & 0xf000) != 0xa000)\n        {\n            v21 = (unsigned int)sub_410660();\n        }\n        else\n        {\n            *(__errno_location()) = 38;\n        }\n    }\n    if (...)\n    {\n        return stack_base + 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_40fc70",
            "funcStartAddr": "0x40fc70",
            "funcEndAddr": "0x40fc9b",
            "decompiledFuncCode": "int sub_40fc70()\n{\n    unsigned int v0;  // [bp-0xc]\n    unsigned int v2;  // edx\n    unsigned int v3;  // ecx\n\n    v0 = v2;\n    if (v3 <= 2)\n    {\n        return sub_40fb10();\n    }\n    sub_40faf0(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_404f50",
            "funcStartAddr": "0x404f50",
            "funcEndAddr": "0x405048",
            "decompiledFuncCode": "extern unsigned int g_418668;\nextern unsigned int g_418c3b;\n\nint sub_404f50()\n{\n    unsigned long long v1;  // rcx\n    unsigned long long v2;  // rbp\n    unsigned long long v3;  // rdi\n    unsigned long long v4;  // rbx\n    unsigned long long v6;  // bl\n    unsigned long long v7;  // r13\n    unsigned long long v8;  // rbp\n    unsigned long long v9;  // rbp\n\n    v2 = v1;\n    v4 = v3;\n    if ((unsigned int)sub_409e90() >= 0)\n    {\n        v6 = (char)[D] amd64g_calculate_condition(0xf<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>) & v2;\n        if (((char)[D] amd64g_calculate_condition(0xf<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>) & v2) == 0)\n        {\n            return 1;\n        }\n        v9 = (unsigned int)sub_40ea00();\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x418c3b, 0x5));\n        return rbx<8>;\n    }\n    v7 = (unsigned int)sub_40e920();\n    v8 = (unsigned int)sub_40e920();\n    error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x418668, 0x5));\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_40cfd0",
            "funcStartAddr": "0x40cfd0",
            "funcEndAddr": "0x40d069",
            "decompiledFuncCode": "extern unsigned long long __progname_full;\nextern unsigned long long g_6219c0;\nextern unsigned long long program_invocation_short_name;\nextern unsigned long long stderr;\n\nint sub_40cfd0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // r8\n    unsigned long long v6;  // cc_dep1\n    unsigned long long v7;  // cc_dep2\n    unsigned long v8;  // d\n    char *v9;  // rdi\n    char *v10;  // rsi\n    unsigned long long v11;  // rcx\n    char *v13;  // rdi\n    unsigned long long v14;  // rcx\n    char *v15;  // rsi\n    unsigned long long v16;  // cc_dep1\n    unsigned long long v17;  // cc_dep2\n\n    if (v1 != 0)\n    {\n        v3 = v1;\n        v4 = strrchr();\n        if (v4 != 0)\n        {\n            v5 = v4 + 1;\n            if (v4 + 1 - v1 > 6)\n            {\n                v10 = v4 - 6;\n                v9 = \"/.libs/\";\n                v11 = 7;\n                while (v11 != 0)\n                {\n                    v11 -= 1;\n                    v6 = *(v10);\n                    v7 = *(v9);\n                    v9 = &v9[v8];\n                    v10 = &v10[v8];\n                    break;\n                }\n                if ((v6 > v7) - 0 - (v6 < v7) == 0)\n                {\n                    v13 = \"lt-\";\n                    v14 = 3;\n                    v15 = v5;\n                    v3 = v5;\n                    while (v14 != 0)\n                    {\n                        v14 -= 1;\n                        v16 = *(v15);\n                        v17 = *(v13);\n                        v13 = &v13[v8];\n                        v15 = &v15[v8];\n                        break;\n                    }\n                    if ((v16 > v17) - 0 - (v16 < v17) == 0)\n                    {\n                        v3 = v4 + 4;\n                        program_invocation_short_name = v4 + 4;\n                    }\n                }\n            }\n        }\n        g_6219c0 = v3;\n        __progname_full = v3;\n        return v4;\n    }\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 0x1, 0x37, stderr);\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_40f910",
            "funcStartAddr": "0x40f910",
            "funcEndAddr": "0x40fa41",
            "decompiledFuncCode": "int sub_40f910()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned int v1;  // [bp-0x50]\n    unsigned int v2;  // [bp-0x4c]\n    unsigned int v3;  // [bp-0x40]\n    unsigned int v4;  // [bp-0x3c]\n    unsigned long long v6;  // rdx\n    unsigned long long v7;  // r13\n    unsigned long v8;  // rdi\n    unsigned long long v9;  // rsi\n    unsigned long long v10;  // rax\n    char *v11;  // rdx\n    unsigned long long v12;  // rbp\n    unsigned long|unsigned long long v13;  // r14\n    unsigned long long v14;  // r15\n    unsigned long long v15;  // rcx\n    unsigned long long v16;  // rdx\n    unsigned long long v17;  // rsi\n    unsigned long long v18;  // rdi\n    unsigned long long v19;  // rax\n    unsigned long long v20;  // rax\n    unsigned long long *v22;  // r15\n    unsigned long long v23;  // rbp\n    unsigned long long v24;  // rdi\n    unsigned long long v25;  // rdx\n    unsigned long long v26;  // rsi\n    unsigned long long v27;  // rax\n    unsigned long long v28;  // rax\n\n    v7 = v6;\n    v1 = v8;\n    v3 = 0;\n    v2 = (unsigned int)v8 - 1;\n    if ((unsigned int)(v8 - 1) >= 0)\n    {\n        v12 = v8 - 1;\n        if (*((char *)*((long long *)(v9 + (v8 - 1 << 3)))) == 47)\n        {\n            v10 = v8 - 2;\n            do\n            {\n                v12 = v10;\n                v11 = *((long long *)(v9 + v10 * 8));\n                v10 -= 1;\n            }\n            while (*(v11) == 47 && (unsigned int)v10 >= 0);\n        }\n        if ((unsigned int)v12 > 0)\n        {\n            v14 = v9;\n            v13 = 0;\n            v0 = v9 + (v12 - 1) * 8 + 8;\n            do\n            {\n                if (v4 <= 0 || (unsigned int)0 != 3)\n                {\n                    v16 = v15;\n                    v17 = &v3;\n                    v18 = *((long long *)v14);\n                    v19 = r13<8>();\n                    v13 = (unsigned int)((unsigned int)v13 < v19? (unsigned int)v19 : (unsigned int)v13);\n                }\n                if (*((char *)*((long long *)(v14 + 8))) != 47)\n                {\n                    v20 = sub_40f770();\n                    v13 = (unsigned int)((unsigned int)v13 < v20? (unsigned int)v20 : (unsigned int)v13);\n                }\n                v14 += 8;\n            }\n            while (v14 != v0);\n        }\n    }\n    if ((unsigned int)v12 <= 0 || (unsigned int)(v8 - 1) < 0)\n    {\n        v13 = 0;\n        v12 = 0;\n    }\n    sub_40f8a0();\n    if (v1 > (unsigned int)v12)\n    {\n        v22 = v14 + v12 * 8;\n        v23 = v14 + (v2 - (unsigned int)v12 + v12) * 8 + 8;\n        while (true)\n        {\n            v24 = *(v22);\n            v25 = v15;\n            v26 = &v3;\n            v27 = r13<8>();\n            v13 = (unsigned int)((unsigned int)v13 < v27? (unsigned int)v27 : (unsigned int)v13);\n            v22 = &v22[1];\n            if (v22 == v23)\n            {\n                break;\n            }\n        }\n    }\n    v28 = v13;\n    return v28;\n}\n"
        },
        {
            "funcName": "sub_413060",
            "funcStartAddr": "0x413060",
            "funcEndAddr": "0x4135b4",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned int field_8;\n    unsigned short field_c;\n} struct_1;\n\nextern char g_41aa3f;\nextern char g_621b78[2];\n\nint sub_413060()\n{\n    unsigned long|unsigned long long v0;  // [bp-0xd0]\n    void tmp_12;  // tmp #12\n    void tmp_56;  // tmp #56\n    void tmp_1;  // tmp #1\n    void tmp_10;  // tmp #10\n    void tmp_3;  // tmp #3\n    void tmp_28;  // tmp #28\n    unsigned long long v1;  // [bp-0xc8]\n    unsigned long long v2;  // [bp-0xc0]\n    char v3;  // [bp-0xb8]\n    char v4;  // [bp-0xb4]\n    char v5;  // [bp-0x78]\n    char v6;  // [bp-0x74]\n    unsigned int v7;  // [bp-0x4]\n    unsigned long long|char [2] v9;  // r15\n    unsigned long|char * v10;  // rbx\n    unsigned long v11;  // rax\n    unsigned long long v12;  // rdi\n    unsigned long long v13;  // rdi\n    unsigned long long v14;  // r12\n    char *v15;  // r13\n    unsigned long long v16;  // r14\n    unsigned long long v17;  // rbp\n    struct_1 *v20;  // r12\n    unsigned short v21;  // dx\n    unsigned int v22;  // r12d\n    unsigned long v26;  // rdi\n    unsigned long long v28;  // rax\n    unsigned int *v29;  // rcx\n    unsigned int v30;  // eax\n    unsigned long v31;  // rax\n    unsigned int *v32;  // rdx\n    unsigned long long v33;  // rcx\n    unsigned long long v34;  // rax\n    unsigned long v35;  // rax\n    unsigned long long v36;  // rax\n    unsigned long long v37;  // rax\n    unsigned long v38;  // rsi\n    unsigned long long v39;  // rcx\n    unsigned long long v40;  // rdx\n    unsigned long long v41;  // rcx\n    unsigned long long v42;  // rdi\n    unsigned long long v43;  // rsi\n    unsigned long long v44;  // r9\n    unsigned long long v45;  // r10\n    unsigned int v46;  // ecx\n    unsigned long long v48;  // r8\n    void *v49;  // rcx\n    unsigned long long v52;  // rcx\n    unsigned int v54;  // edx\n    unsigned long long v57;  // rcx\n    unsigned long long v58;  // rsi\n    char *v59;  // rax\n    unsigned long long v60;  // rdi\n    char *v61;  // rax\n    unsigned long long v62;  // rax\n    unsigned long long v63;  // rdx\n    unsigned long long v67;  // rbp\n    unsigned long long v68;  // rax\n    unsigned long long v69;  // rax\n    unsigned long long v70;  // rbp\n    unsigned long long v71;  // rax\n\n    v9 = g_621b78;\n    v10 = ((unsigned long long)nl_langinfo(0xe) == 0? &g_41aa3f : (unsigned long long)nl_langinfo(0xe));\n    if (g_621b78 == 0)\n    {\n        v15 = getenv(\"CHARSETALIASDIR\");\n        if (v15 != 0 && *(v15) != 0)\n        {\n            v11 = strlen(v15);\n            v14 = v11;\n            v16 = v11;\n            if (v11 == 0)\n            {\n                v12 = 14;\n            }\n            else if (v15[v11 + -1] == 47)\n            {\n                v12 = v11 + 14;\n            }\n            else\n            {\n                v13 = v11 + 15;\n                v14 += 1;\n            }\n            if (v11 == 0 || v15[v11 + -1] == 47)\n            {\n                v17 = malloc(v12);\n                if (v17 != 0)\n                {\n                    memcpy(v17, v15, v16);\n                }\n            }\n        }\n        if (*(v15) == 0 || v15 == 0)\n        {\n            v13 = 115;\n            v14 = 101;\n            v16 = 100;\n            v15 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        }\n        if (*(v15) == 0 || v15 == 0 || v11 != 0 && v15[v11 + -1] != 47)\n        {\n            v17 = malloc(v13);\n        }\n        if (v17 == 0 || v17 == 0)\n        {\n            v9 = &g_41aa3f;\n        }\n        if (v17 != 0 && (*(v15) == 0 || v15 == 0 || v11 != 0) && (*(v15) == 0 || v15 == 0 || v15[v11 + -1] != 47))\n        {\n            memcpy(v17, v15, v16);\n            *((char *)(v17 + v16)) = 47;\n        }\n        if (*(v15) == 0 && v17 != 0 || v15 == 0 && v17 != 0 || v11 != 0 && v15[v11 + -1] != 47 && v17 != 0 || v11 == 0 && *(v15) != 0 && v17 != 0 && v15 != 0 || v15[v11 + -1] == 47 && *(v15) != 0 && v17 != 0 && v15 != 0)\n        {\n            v20 = v14 + v17;\n            v20->field_0 = 3347411969557751907;\n            v20->field_c = 115;\n            v20->field_8 = 1634298977;\n            v22 = open(v17, 0x0, v21);\n            if (v22 >= 0)\n            {\n                v9 = 0;\n                v0 = 0;\n                if (v10 != 0)\n                {\n                    v10 = fdopen(v22, \"r\");\n                    while (true)\n                    {\n                        v59 = *((long long *)(v10 + 8));\n                        if (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)))\n                        {\n                            v60 = __uflow(v10);\n                        }\n                        if ((unsigned int)v26 != 32 && (unsigned int)v26 != 35)\n                        {\n                            ungetc(v26, v10);\n                            v28 = fscanf(v10, \"%50s %50s\", (unsigned int)&v3, (unsigned int)&v5);\n                            if (v28 > 1)\n                            {\n                                v29 = &v3;\n                                do\n                                {\n                                    tmp_12 = (unsigned int)*((int *)&v3);\n                                    v29 = &v4;\n                                    v30 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                }\n                                while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                v31 = (unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int)(rax<8> >> 16) : (unsigned int)rax<8>);\n                                v32 = &v5;\n                                v33 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)((char *)v29 + 2) : v29) + -1 * ((v31 + v31 <= v31? 1 : 0) & 1) + -0x1 * &v3;\n                                do\n                                {\n                                    tmp_12 = (unsigned int)*((int *)&v5);\n                                    v32 = &v6;\n                                    v34 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                }\n                                while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                v1 = v33;\n                                tmp_56 = (unsigned int)v34 % 0x10000;\n                                v35 = (unsigned int)(((unsigned int)v34 & 32896) == 0? (unsigned int)(v34 >> 16) : (unsigned int)v34);\n                                v36 = &((char *)(-3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v32)[2] : v32) + -1 * ((v35 + v35 <= v35? 1 : 0) & 1) + -0x1 * &v5))[v1];\n                                v2 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v32)[2] : v32) + -1 * (((unsigned int)((((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)) <= (unsigned long long)(unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)? 1 : 0) & 1) + -0x1 * &v5;\n                                if (v0 == 0)\n                                {\n                                    v0 = v36 + 2;\n                                    v37 = malloc(v36 + 3);\n                                    v39 = v1;\n                                    v40 = v2;\n                                }\n                                else\n                                {\n                                    v38 = v36 + v0 + 3;\n                                    v0 = v36 + v0 + 2;\n                                    v37 = realloc(NULL, v38);\n                                    v40 = v2;\n                                    v39 = v1;\n                                }\n                                if (v37 != 0)\n                                {\n                                    tmp_1 = -2 - v39;\n                                    v41 = v39 + 1;\n                                    v42 = v0 - v40;\n                                    v43 = tmp_1 + v0 - v40 + v37;\n                                    if ((unsigned int)v41 >= 8)\n                                    {\n                                        *((long long *)v43) = *((long long *)&v3);\n                                        *((long long *)(v43 + v41 - 8)) = *((long long *)&(&v3)[v41 + -8]);\n                                        v44 = v43 + 8 & -8;\n                                        v43 -= v43 + 8 & -8;\n                                        v45 = &(&v3)[-1 * v43];\n                                        v46 = (unsigned int)(v41 + v43) & -8;\n                                        if (v46 >= 8)\n                                        {\n                                            v43 = 0;\n                                            do\n                                            {\n                                                v48 = v43;\n                                                v43 = (unsigned int)v43 + 8;\n                                                *((long long *)(v44 + v48)) = *((long long *)(v45 + v48));\n                                            }\n                                            while ((unsigned int)v43 < (v46 & -8));\n                                        }\n                                    }\n                                    else if ((v41 & 4) != 0)\n                                    {\n                                        *((int *)v43) = *((int *)&v3);\n                                        *((int *)(v43 + v41 - 4)) = *((int *)&(&v3)[v41 + -4]);\n                                    }\n                                    else if ((unsigned int)v41 != 0)\n                                    {\n                                        *((char *)v43) = v3;\n                                        if ((v41 & 2) != 0)\n                                        {\n                                            *((short *)(v43 + v41 - 2)) = *((short *)&(&v3)[v41 + -2]);\n                                        }\n                                    }\n                                    v63 = v40 + 1;\n                                    v49 = v37 + v42 - 1;\n                                    if ((unsigned int)v43 >= 8)\n                                    {\n                                        *((long long *)v49) = *((long long *)&v5);\n                                        v43 = v63;\n                                        *((long long *)&((char *)v49)[v43 + -8]) = *((long long *)&(&v5)[v43 + -8]);\n                                        v52 = v49 - (v49 + 8 & -8);\n                                        v54 = (unsigned int)(v43 + v52) & -8;\n                                        if (v54 >= 8)\n                                        {\n                                            v57 = 0;\n                                            do\n                                            {\n                                                v58 = v57;\n                                                v57 = (unsigned int)v57 + 8;\n                                                *((long long *)((v49 + 8 & -8) + v58)) = *((long long *)&(&v5)[v58 + -1 * v52]);\n                                            }\n                                            while ((unsigned int)v57 < (v54 & -8));\n                                        }\n                                    }\n                                    else if (((char)v43 & 4) != 0)\n                                    {\n                                        *((int *)v49) = *((int *)&v5);\n                                        *((unsigned int *)&((char *)v49)[(unsigned long long)v7 + -4]) = v7;\n                                    }\n                                    else if ((unsigned int)v43 != 0)\n                                    {\n                                        *((char *)v49) = v5;\n                                        if ((v5 & 2) != 0)\n                                        {\n                                            *((short *)&((char *)v49)[(unsigned long long)v5 + -2]) = v7;\n                                        }\n                                    }\n                                    v9 = v37;\n                                    v59 = *((long long *)(v10 + 8));\n                                }\n                                else\n                                {\n                                    v9 = &g_41aa3f;\n                                    v10 = (tmp_10 == 0? &g_41aa3f : tmp_10);\n                                    free(NULL);\n                                    sub_4143e0();\n                                }\n                            }\n                        }\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) && v37 != 0 && v28 > 1 && (unsigned int)v26 != 32 && (unsigned int)v26 != 35)\n                        {\n                            *((char **)(v10 + 8)) = &v59[1];\n                            v26 = *(v59);\n                        }\n                        if ((unsigned int)v26 == 35)\n                        {\n                            do\n                            {\n                                v61 = *((long long *)(v10 + 8));\n                                if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                                {\n                                    *((char **)(v10 + 8)) = &v61[1];\n                                    v62 = *(v61);\n                                    v63 = 1;\n                                }\n                                else\n                                {\n                                    v62 = __uflow(v10);\n                                    v63 = (char)(v62 != -1);\n                                }\n                            }\n                            while (v63 != 0 && v62 != 10);\n                        }\n                        if (v62 == -1 && (unsigned int)v26 == 35 || (unsigned int)v60 == -1 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || (unsigned int)v60 == -1 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || v28 <= 1 && (unsigned int)v26 != 32 && (unsigned int)v26 != 35)\n                        {\n                            v10 = (tmp_10 == 0? &g_41aa3f : tmp_10);\n                            sub_4143e0();\n                            if (v0 == 0)\n                            {\n                                break;\n                            }\n                            *((char *)(v9 + v0)) = 0;\n                        }\n                    }\n                    if (...)\n                    {\n                        v9 = &g_41aa3f;\n                    }\n                    else if (...)\n                    {\n                        free(v17);\n                    }\n                }\n                else\n                {\n                    close(v22);\n                }\n            }\n            v9 = &g_41aa3f;\n            free(v17);\n        }\n        *((char *[2])&g_621b78[0]) = v9;\n    }\n    v67 = v9[0];\n    if (v9[0] != 0)\n    {\n        while (true)\n        {\n            v68 = strcmp((tmp_10 == 0? &g_41aa3f : tmp_10), v9);\n            if (v68 != 0 && (v67 != 42 || v9[1] != 0))\n            {\n                v69 = strlen(v9);\n                v70 = &((char [2])&v9[v69])[1];\n                v71 = strlen(&((char [2])&v9[v69])[1]);\n                v9 = v70 + v71 + 1;\n                v67 = (char)*((char *)(v70 + v71 + 1));\n                if (v67 == 0)\n                {\n                    break;\n                }\n            }\n            if (v68 == 0 || v67 == 42 && v9[1] == 0)\n            {\n                v10 = &((char [2])&v9[strlen(v9)])[1];\n            }\n        }\n    }\n    tmp_3 = v10;\n    tmp_28 = *(v10) == 0;\n    return (tmp_28? \"ASCII\" : tmp_3);\n}\n"
        },
        {
            "funcName": "sub_40ec30",
            "funcStartAddr": "0x40ec30",
            "funcEndAddr": "0x40ec41",
            "decompiledFuncCode": "int sub_40ec30()\n{\n}\n"
        },
        {
            "funcName": "sub_413e90",
            "funcStartAddr": "0x413e90",
            "funcEndAddr": "0x413ed1",
            "decompiledFuncCode": "int sub_413e90()\n{\n    unsigned long long *v1;  // rdi\n\n    __explicit_bzero_chk();\n    free(v1);\n    if (*(v1) == 0)\n    {\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_40b0b0",
            "funcStartAddr": "0x40b0b0",
            "funcEndAddr": "0x40b0b8",
            "decompiledFuncCode": "int sub_40b0b0()\n{\n}\n"
        },
        {
            "funcName": "sub_411b50",
            "funcStartAddr": "0x411b50",
            "funcEndAddr": "0x411b8b",
            "decompiledFuncCode": "int sub_411b50()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned int *v3;  // rdi\n\n    v0 = v2;\n    if (v3 != 0 && __freading() != 0 && ((unsigned short)*(v3) & 0x100) != 0)\n    {\n        sub_411bc0();\n    }\n}\n"
        },
        {
            "funcName": "sub_40d0d0",
            "funcStartAddr": "0x40d0d0",
            "funcEndAddr": "0x40d1af",
            "decompiledFuncCode": "extern int512_t g_4192de;\nextern int512_t g_4192e2;\n\nint sub_40d0d0()\n{\n    unsigned long v1;  // rdi\n    char *v2;  // rbx\n    char v3[8];  // rax\n    unsigned long long v4;  // rdx\n    unsigned long v5;  // rsi\n    char *v6;  // rax\n\n    v2 = (unsigned long long)dcgettext(0x0, v1, 0x5);\n    if (v1 == v2)\n    {\n        v3 = sub_413060();\n        v4 = v3[0] & 4294967007;\n        if ((v3[0] & 223) == 85)\n        {\n            if ((v3[1] & 223) == 84 && (v3[2] & 223) == 70 && v3[3] == 45 && v3[4] == 56 && v3[5] == 0)\n            {\n                v2 = (*(v2) != 96? &g_4192de : 4297449);\n            }\n        }\n        else\n        {\n            if (v4 == 71 && (v3[1] & 223) == 66 && v3[2] == 49 && v3[3] == 56 && v3[4] == 48 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0)\n            {\n                v2 = (*(v2) != 96? &g_4192e2 : 4297445);\n            }\n        }\n    }\n    if (...)\n    {\n        return ((unsigned int)v5 != 9? \"'\" : \"\\\"\");\n    }\n    if (v3[3] == 45 && v3[4] == 56 && (v3[2] & 223) == 70 && (v3[1] & 223) == 84 && v1 == v2 && v3[5] == 0 && (v3[0] & 223) == 85 || (v3[1] & 223) == 66 && v4 == 71 && v1 == v2 && v3[3] == 56 && v3[2] == 49 && v3[4] == 48 && (v3[0] & 223) != 85 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0 || v1 != v2)\n    {\n        v6 = v2;\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_409a90",
            "funcStartAddr": "0x409a90",
            "funcEndAddr": "0x409ac6",
            "decompiledFuncCode": "extern unsigned long long g_621998;\n\nint sub_409a90()\n{\n    g_621998 = (unsigned int)sub_40bb50();\n    if (g_621998 != 0)\n    {\n        return g_621998;\n    }\n    sub_411530(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_412b30",
            "funcStartAddr": "0x412b30",
            "funcEndAddr": "0x412b35",
            "decompiledFuncCode": "int sub_412b30()\n{\n    unsigned int *v1;  // rcx\n    unsigned int v2;  // edx\n\n    *(v1) = v2;\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_412a70",
            "funcStartAddr": "0x412a70",
            "funcEndAddr": "0x412b29",
            "decompiledFuncCode": "int sub_412a70()\n{\n    unsigned long long v0;  // [bp-0x800]\n    void *v2;  // rax\n    unsigned long long v3;  // rbx\n    void *v4;  // rbp\n    void *v5;  // rdi\n    unsigned int *v7;  // r12\n    unsigned long long v9;  // rax\n\n    v0 = 2000;\n    v2 = sub_414470();\n    v3 = v0;\n    if (false)\n    {\n        *(__errno_location()) = 75;\n    }\n    if (stack_base + 0 != 0)\n    {\n        v4 = v2;\n        if (!(fwrite(v2, 0x1, 0x7d0, v5) >= 2000))\n        {\n            v3 = -18446744069414584321;\n            if (v4 != stack_base + -2040)\n            {\n                free(v4);\n                *(__errno_location()) = *(v7);\n            }\n        }\n        else if (v4 != stack_base + -2040)\n        {\n            free(v4);\n        }\n    }\n    else\n    {\n        v3 = -18446744069414584321;\n        sub_414460();\n    }\n    v9 = v3;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_412b40",
            "funcStartAddr": "0x412b40",
            "funcEndAddr": "0x412b55",
            "decompiledFuncCode": "int sub_412b40()\n{\n}\n"
        },
        {
            "funcName": "sub_409940",
            "funcStartAddr": "0x409940",
            "funcEndAddr": "0x409957",
            "decompiledFuncCode": "int sub_409940()\n{\n    unsigned long long v1[2];  // rdi\n    unsigned long long v2[2];  // rsi\n    unsigned long long v3;  // rax\n    char v4;  // al\n\n    if (*(v1) != *(v2))\n    {\n        return 0;\n    }\n    v3 = v2[1];\n    v4 = v1[1] == v2[1];\n    return rax<8>;\n}\n"
        },
        {
            "funcName": "sub_40abc0",
            "funcStartAddr": "0x40abc0",
            "funcEndAddr": "0x40ac50",
            "decompiledFuncCode": "int sub_40abc0()\n{\n    unsigned long v2;  // rax\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rax\n    unsigned int v5;  // r12d\n    unsigned int *v6;  // rbp\n    unsigned long long v7;  // r13\n    unsigned long|unsigned int v9;  // r14\n    unsigned long long v10;  // rbx\n\n    if (v2 != 0)\n    {\n        v3 = dirfd(v2);\n        if (v3 <= 2)\n        {\n            v5 = sub_411a10();\n            v6 = __errno_location();\n            if (v5 < 0)\n            {\n                v9 = *(v6);\n                v7 = 0;\n            }\n            else\n            {\n                v9 = *(v6);\n                v7 = fdopendir(v5);\n                if (v7 == 0)\n                {\n                    close(v5);\n                }\n            }\n            v10 = v7;\n            closedir();\n            *((unsigned long *)&v6) = v9;\n            return v10;\n        }\n    }\n    if (v2 == 0 || v3 > 2)\n    {\n        v2 = opendir();\n        return v4;\n    }\n}\n"
        },
        {
            "funcName": "sub_40faf0",
            "funcStartAddr": "0x40faf0",
            "funcEndAddr": "0x40fb0d",
            "decompiledFuncCode": "int sub_40faf0()\n{\n    __assert_fail(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_40a1c0",
            "funcStartAddr": "0x40a1c0",
            "funcEndAddr": "0x40a29b",
            "decompiledFuncCode": "int sub_40a1c0()\n{\n    unsigned int v1;  // edi\n    unsigned long v3;  // rsi\n    char *v4;  // r12\n    unsigned int *v5;  // rax\n    unsigned long long v6;  // rdi\n    void *v7;  // rax\n    char *v8;  // rbp\n    unsigned long long v9;  // rbx\n\n    v9 = (1025 <= v3? 1025 : v3 + 1);\n    while (true)\n    {\n        v7 = malloc(v9);\n        v8 = v7;\n        if (v7 == 0)\n        {\n            break;\n        }\n        while (true)\n        {\n            v4 = (unsigned long long)readlink(v1, (unsigned int)v7, v9);\n            if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, r12<8>, 0x0<64>, cc_ndep<8>))\n            {\n                v5 = __errno_location();\n                if (*(v5) != 34)\n                {\n                    free(v8);\n                }\n            }\n            if (*(v5) == 34 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, r12<8>, 0x0<64>, cc_ndep<8>)))\n            {\n                if (v9 <= v4)\n                {\n                    free(v8);\n                    if (v9 <= 4611686018427387903)\n                    {\n                        v9 *= 2;\n                        v6 = v9;\n                        v7 = malloc(v6);\n                        v8 = v7;\n                        if (v7 == 0)\n                        {\n                            break;\n                        }\n                    }\n                    else if (v9 <= 9223372036854775806)\n                    {\n                        v9 = 9223372036854775807;\n                    }\n                    else\n                    {\n                        *(__errno_location()) = 12;\n                    }\n                }\n                else\n                {\n                    *((char *)(v8 + v4)) = 0;\n                }\n            }\n        }\n        if (v9 <= 9223372036854775806 && v9 <= v4 && v9 > 4611686018427387903 && (*(v5) == 34 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, r12<8>, 0x0<64>, cc_ndep<8>))))\n        {\n            v7 = malloc(v9);\n        }\n        else if (v9 <= 4611686018427387903 || v9 > 9223372036854775806 || v9 > v4 || (char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, r12<8>, 0x0<64>, cc_ndep<8>) && *(v5) != 34)\n        {\n            return stack_base + 0;\n        }\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_404090",
            "funcStartAddr": "0x404090",
            "funcEndAddr": "0x4046bb",
            "decompiledFuncCode": "extern unsigned int g_41707c;\nextern unsigned int g_41709c;\nextern unsigned int g_4172b8;\nextern char g_61f430;\nextern unsigned long long g_61f438;\nextern unsigned int g_61f448;\nextern char g_61f44c;\nextern void g_61f540;\nextern void g_620540;\nextern char g_621541;\nextern char g_621542;\nextern unsigned int g_621544;\nextern unsigned int g_621550;\nextern unsigned int g_621560;\n\nint sub_404090()\n{\n    unsigned long v0;  // [bp-0x1f0]\n    char v1;  // [bp-0x1e8]\n    unsigned int v2;  // [bp-0x1d0]\n    unsigned long v3;  // [bp-0x1a0]\n    unsigned long v4;  // [bp-0x198]\n    unsigned long v5;  // [bp-0x190]\n    unsigned long v6;  // [bp-0x188]\n    char v7;  // [bp-0x158]\n    unsigned int v8;  // [bp-0x140]\n    unsigned long v9;  // [bp-0x128]\n    unsigned long|char v10;  // [bp-0xc8]\n    unsigned long v11;  // [bp-0xc0]\n    unsigned long v12;  // [bp-0xb8]\n    unsigned long|unsigned int v13;  // [bp-0xb0]\n    unsigned int v14;  // [bp-0xac]\n    unsigned int v15;  // [bp-0xa8]\n    unsigned long v16;  // [bp-0x98]\n    char *v18;  // rdi\n    unsigned long long|char [2] v19;  // r12\n    char v20[38];  // rdx\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rbp\n    unsigned long long v23;  // rax\n    unsigned long v24;  // rsi\n    unsigned long long v25;  // rax\n    unsigned int *v26;  // r14\n    unsigned int *v27;  // r14\n    unsigned long long v28;  // rax\n    unsigned long long v29;  // rax\n    unsigned int *v30;  // r14\n    unsigned long long v31;  // rax\n    unsigned int v32;  // r14d\n    unsigned long long v33;  // rax\n    unsigned int v34;  // r15d\n    unsigned long v36;  // rax\n    unsigned long long v43;  // rax\n    unsigned long v44;  // rax\n    unsigned long long v45;  // rax\n    unsigned long long v46;  // rbp\n    unsigned long long v47;  // rax\n    unsigned long long v48;  // rax\n    unsigned long long v49;  // rbp\n    unsigned long long v50;  // rax\n    unsigned long long v51;  // rbp\n    unsigned long long v52;  // rax\n    unsigned long long v53;  // rax\n    unsigned long long v54;  // rax\n    char v55[2];  // r12\n    char v56[2];  // rdx\n    unsigned long long v57;  // rax\n    unsigned int v58;  // ebx\n    void *v59;  // r13\n\n    v19 = v18;\n    if (v20[3 + 7] != 0)\n    {\n        v21 = __xstat(0x1, (unsigned int)v18, (unsigned int)&v1);\n        if (v21 != 0)\n        {\n            v22 = (unsigned int)sub_40ea00();\n        }\n    }\n    if ((v21 == 0 || v20[3 + 7] == 0) && g_621542 != 0 && (g_61f448 & -0xf200) == 0)\n    {\n        v23 = __lxstat(0x1, (unsigned int)v18, (unsigned int)&v7);\n        if (v23 == 0)\n        {\n            v25 = __lxstat(0x1, v24, (unsigned int)&v10);\n            if (v25 == 0 && ((unsigned short)v8 & 0xf000) == 0x8000 && ((unsigned short)v13 & 0xf000) == 0x8000 && ((v8 | v13) & -0xf200) == 0 && v9 == v16 && g_61f448 == (v13 & 4095))\n            {\n                v28 = g_621550;\n                if (g_621550 == -1)\n                {\n                    *(v26) = 0;\n                    v26 = __errno_location();\n                    v28 = getuid();\n                }\n            }\n        }\n    }\n    if (...)\n    {\n        v29 = g_621544;\n        if (g_621544 == -1)\n        {\n            *(v27) = 0;\n            v27 = __errno_location();\n            v29 = getgid();\n        }\n    }\n    if (...)\n    {\n        *(__errno_location()) = 95;\n    }\n    if (...)\n    {\n        v31 = open(v18, 0x0, v13 & 4095);\n        v32 = v31;\n        if ((unsigned int)v31 >= 0)\n        {\n            v33 = open(v19, 0x0, v20);\n            v34 = v33;\n            if ((unsigned int)v33 >= 0)\n            {\n                while (true)\n                {\n                    if (v0 != 0)\n                    {\n                        v0 = (unsigned int)sub_40b1c0();\n                        v36 = sub_40b1c0();\n                        close(v32);\n                        close(v34);\n                    }\n                    else\n                    {\n                        close(v32);\n                        close(v34);\n                    }\n                }\n                if (v0 != 0 && (v36 != v0 || memcmp(&g_61f540, &g_620540, v36) != 0))\n                {\n                    v43 = sub_409810();\n                }\n            }\n            else\n            {\n                close(v32);\n            }\n        }\n    }\n    if (...)\n    {\n        v43 = sub_409810();\n    }\n    if (...)\n    {\n        if (g_621541 == 0)\n        {\n        }\n        else\n        {\n            v44 = fork();\n            if (v44 != -1 && v44 != 0)\n            {\n                v45 = waitpid(v44, (unsigned int)&v10, 0x0);\n                if (v45 >= 0 && !(*((int *)&v10) >> 8 == 0 && ((char)*((int *)&v10) & 127) == 0))\n                {\n                    error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x4172b8, 0x5));\n                }\n            }\n            if (v44 == 0)\n            {\n                execlp(g_61f438, g_61f438, (unsigned int)v19, 0x0);\n                v46 = (unsigned int)sub_40ea00();\n                error(0x1, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x41707c, 0x5));\n            }\n        }\n    }\n    if (...)\n    {\n        error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, v24, 0x5));\n    }\n    if (...)\n    {\n        v47 = unlink(v19);\n        if (v47 != 0)\n        {\n            v49 = (unsigned int)sub_40ea00();\n            error(0x1, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x41709c, 0x5));\n        }\n    }\n    if (...)\n    {\n        v10 = v3;\n        v11 = v4;\n        v12 = v5;\n        v13 = v6;\n        v48 = sub_410aa0();\n        if (v48 != 0)\n        {\n            v51 = (unsigned int)sub_40ea00();\n        }\n    }\n    if (...)\n    {\n        if ((g_621550 & g_621544) != -1)\n        {\n            v50 = lchown((unsigned int)v19);\n            if (v50 != 0)\n            {\n                v19 = (unsigned int)sub_40ea00();\n            }\n        }\n        if (v50 == 0 || (g_621550 & g_621544) == -1)\n        {\n            v52 = chmod((unsigned int)v19, g_61f448);\n            if (v52 != 0)\n            {\n                v19 = (unsigned int)sub_40ea00();\n            }\n        }\n        if (v52 != 0 || v50 != 0 && (g_621550 & g_621544) != -1)\n        {\n            error(0x0, *(__errno_location()), v20);\n        }\n        if (g_61f44c != 0 && g_621560 == 1)\n        {\n            v53 = __lxstat(0x1, (unsigned int)v19, (unsigned int)&v10);\n            if (v53 == 0)\n            {\n                if (g_61f430 != 0 && v19[0] == 47)\n                {\n                    v54 = v19[1];\n                    v55 = &v19[1];\n                    if (v19[1] != 47)\n                    {\n                        v56 = v55;\n                        v19 = v24;\n                    }\n                    else\n                    {\n                        while (true)\n                        {\n                            v54 = v55[1];\n                            v56 = &v55[1];\n                            if (v55[1] != 47)\n                            {\n                                break;\n                            }\n                            v55 = v56;\n                        }\n                    }\n                    if (v54 != 0)\n                    {\n                        do\n                        {\n                            v56 = &v56[1];\n                            v57 = v56[0];\n                        }\n                        while ((char)v57 != 0 && v57 != 47);\n                        v58 = v56 - v55;\n                        v59 = malloc(v56 - v55 + 2);\n                        if (v59 != 0)\n                        {\n                            *((short *)(unsigned long long)stpncpy((unsigned int)v59, (unsigned int)v55, v58)) = 47;\n                            free(v59);\n                        }\n                    }\n                }\n                g_61f430 = 0;\n                *(__errno_location()) = 95;\n            }\n        }\n    }\n    if (...)\n    {\n        error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, v24, 0x5));\n    }\n    if (v47 == 0 || v44 != 0)\n    {\n        return stack_base + 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_40b720",
            "funcStartAddr": "0x40b720",
            "funcEndAddr": "0x40b782",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_40b720()\n{\n    unsigned long long v1[4];  // rdi\n    unsigned long long v2[2];  // rcx\n    struct_0 *v3;  // rax\n    unsigned long long v4;  // rdx\n    unsigned long long v5;  // r8\n\n    v2 = *(v1);\n    v4 = 0;\n    v5 = 0;\n    if (*(v1) < v1[1])\n    {\n        while (true)\n        {\n            if (*(v2) != 0)\n            {\n                v3 = v2[1];\n                v5 += 1;\n                v4 += 1;\n                if (v2[1] != 0)\n                {\n                    do\n                    {\n                        v3 = v3->field_8;\n                        v4 += 1;\n                    }\n                    while (v3 != 0);\n                    v2 = &v2[2];\n                    if (*(v1) + 16 >= v1[1])\n                    {\n                        break;\n                    }\n                }\n            }\n            if (v2[1] == 0 || *(v2) == 0)\n            {\n                v2 = &v2[2];\n                if (v2 >= v1[1])\n                {\n                    break;\n                }\n            }\n        }\n    }\n    if (v1[3] != v5)\n    {\n        return 0;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_40ebb0",
            "funcStartAddr": "0x40ebb0",
            "funcEndAddr": "0x40ebb9",
            "decompiledFuncCode": "int sub_40ebb0()\n{\n}\n"
        },
        {
            "funcName": "sub_412b60",
            "funcStartAddr": "0x412b60",
            "funcEndAddr": "0x412b82",
            "decompiledFuncCode": "int sub_412b60()\n{\n    return 0 - (unsigned int)(char)(sub_412b40() != 0);\n}\n"
        },
        {
            "funcName": "sub_405620",
            "funcStartAddr": "0x405620",
            "funcEndAddr": "0x40568e",
            "decompiledFuncCode": "extern unsigned int g_4186b8;\n\nint sub_405620()\n{\n    unsigned int *v1;  // rbp\n    char v2[39];  // rcx\n    unsigned long long v3;  // rbx\n\n    v1 = __errno_location();\n    if (v2[4 + 3] != 0 && v2[4 + 6] == 0)\n    {\n        *(v1) = 95;\n        return 0;\n    }\n    if (v2[4 + 3] == 0 || v2[4 + 6] != 0)\n    {\n        *(v1) = 95;\n        v3 = (unsigned int)sub_40e920();\n        error(0x0, *(v1), (unsigned long long)dcgettext(0x0, 0x4186b8, 0x5));\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_40d070",
            "funcStartAddr": "0x40d070",
            "funcEndAddr": "0x40d0a9",
            "decompiledFuncCode": "int sub_40d070()\n{\n    unsigned long long v2;  // rax\n\n    if (sub_412b30() == 0)\n    {\n        v2 = sub_412b60();\n    }\n    else\n    {\n        v2 = -18446744069414584322;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40b0c0",
            "funcStartAddr": "0x40b0c0",
            "funcEndAddr": "0x40b0d8",
            "decompiledFuncCode": "int sub_40b0c0()\n{\n    unsigned long long v1;  // rax\n\n    v1 = sub_40b0e0();\n    if (v1 != 0)\n    {\n        return v1;\n    }\n    sub_411530(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_403d51",
            "funcStartAddr": "0x403d51",
            "funcEndAddr": "0x403da8",
            "decompiledFuncCode": "extern char g_61f528;\nextern unsigned long long g_61f530;\n\nint sub_403d51()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // rax\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long long v9;  // rbx\n    unsigned long long v10;  // r12\n\n    if (g_61f528 == 0)\n    {\n        v2 = stack_base + 0;\n        v1 = v5;\n        v0 = v6;\n        while (true)\n        {\n            if (g_61f530 >= 0)\n            {\n                break;\n            }\n            g_61f530 = g_61f530 + 1;\n            *((long long *)(6417984 + (v7 + 1) * 8))();\n        }\n        v9 = v0;\n        v10 = v1;\n        g_61f528 = 1;\n        return sub_403cfb();\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_40ec10",
            "funcStartAddr": "0x40ec10",
            "funcEndAddr": "0x40ec22",
            "decompiledFuncCode": "int sub_40ec10()\n{\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Angr",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_install.elf"
}