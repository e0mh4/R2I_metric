{
    "funcInfo": [
        {
            "funcName": "sub_406eaa",
            "funcStartAddr": "0x406eaa",
            "funcEndAddr": "0x406ec3",
            "decompiledFuncCode": "int sub_406eaa()\n{\n    unsigned long long *v1;  // rsi\n    unsigned long long *v3;  // rdi\n    unsigned long long v5;  // rax\n    char v6;  // al\n\n    v5 = strcmp(*(v3), *(v1));\n    v6 = (unsigned int)v5 == 0;\n    return rax<8>;\n}\n"
        },
        {
            "funcName": "sub_405250",
            "funcStartAddr": "0x405250",
            "funcEndAddr": "0x40587b",
            "decompiledFuncCode": "extern unsigned int g_41236e;\n\nint sub_405250()\n{\n    unsigned int|unsigned long|unsigned int *|unsigned long long v0;  // [bp-0x100]\n    unsigned int v1;  // [bp-0xf4]\n    unsigned long|unsigned long long v2;  // [bp-0xf0]\n    char [2]|char *|unsigned long v3;  // [bp-0xe8]\n    unsigned long long v4;  // [bp-0xe0]\n    unsigned long|unsigned long long v5;  // [bp-0xd8]\n    unsigned int v6;  // [bp-0xd0]\n    unsigned int v7;  // [bp-0xcc]\n    char v8;  // [bp-0xc8]\n    unsigned int v9;  // [bp-0xb0]\n    unsigned int v11;  // esi\n    char v12[2];  // rdi\n    char v13[2];  // r15\n    unsigned long long v14;  // rbx\n    char *v15;  // rbx\n    char *|unsigned long long v16;  // rbp\n    unsigned long long v17;  // rdx\n    char v18[2];  // r13\n    unsigned long v19;  // r8\n    char v20[2];  // r15\n    char *v21;  // rdx\n    unsigned long long v22;  // rbx\n    unsigned long v23;  // rbp\n    char *v25;  // r15\n    unsigned long long v26;  // rsi\n    char v27;  // al\n    char v28[2];  // rax\n    unsigned long long v29;  // rax\n    char *v31;  // r15\n    unsigned int v32;  // ecx\n    unsigned long v33;  // r13\n    unsigned long long v34;  // rdx\n    char *v36;  // r15\n    char v39[2];  // rax\n    char *v40;  // rdx\n    unsigned long long v41;  // rdx\n    char v42;  // cc_dep1\n    char v43[2];  // r14\n    unsigned long long v44;  // rax\n    char *v45;  // r15\n    unsigned long long v46;  // r12\n    unsigned int *v48;  // rdx\n    unsigned int *v49;  // rdx\n    char *v50;  // rax\n    unsigned int|unsigned long v51;  // rcx\n    unsigned int *v52;  // rdx\n    unsigned int|unsigned long v53;  // rcx\n    unsigned long long v56;  // rax\n\n    v1 = v11 & 3;\n    if (((unsigned int)((unsigned long long)(v11 & 3) - 1) & v11 & 3) == 0)\n    {\n        v13 = v12;\n        if (v12 != 0)\n        {\n            if (v12[0] != 0)\n            {\n                if (v12[0] != 47)\n                {\n                    v46 = (unsigned int)sub_40a7f0();\n                    if (v46 != 0)\n                    {\n                        v14 = strlen(v46);\n                        if (v14 > 4095)\n                        {\n                            v15 = v14 + v46;\n                            v16 = v15;\n                        }\n                        else\n                        {\n                            v46 = (unsigned int)sub_40a5c0();\n                            v15 = v14 + v46;\n                            v16 = v46 + 0x1000;\n                        }\n                    }\n                }\n                else\n                {\n                    v46 = (unsigned int)sub_40a560();\n                    v16 = v46 + 0x1000;\n                    v15 = v46 + 1;\n                    *((char *)v46) = 47;\n                }\n                if (v12[0] == 47 || v46 != 0)\n                {\n                    *((char *[2])&v3[0]) = v13;\n                    v44 = v13[0];\n                    v6 = v11 & 4;\n                    v2 = 0;\n                    v5 = 0;\n                    v4 = 0;\n                    while (true)\n                    {\n                        if (v44 != 0)\n                        {\n                            v17 = v44;\n                        }\n                        if (v44 == 47)\n                        {\n                            do\n                            {\n                                v13 = &v13[1];\n                                v17 = v13[0];\n                            }\n                            while (v13[0] == 47);\n                        }\n                        if (v44 == 47 && v17 != 0 || v44 != 0 && v44 != 47)\n                        {\n                            v18 = v13;\n                            while (true)\n                            {\n                                v44 = v18[1];\n                                v43 = &v18[1];\n                                if (v44 == 47 || v18[1] == 0)\n                                {\n                                    break;\n                                }\n                                v18 = v43;\n                            }\n                        }\n                        if (v44 == 0 || v43 == v13 || v17 == 0 && v44 == 47)\n                        {\n                            if (v15[-1] == 47 && v15 > v46 + 1)\n                            {\n                                v50 = v15;\n                                v15 = &v15[-1];\n                            }\n                            if (v15 <= v46 + 1 || v15[-1] != 47)\n                            {\n                                v50 = &v15[1];\n                            }\n                            *(v15) = 0;\n                            if (v16 != v50)\n                            {\n                                v46 = (unsigned int)sub_40a5c0();\n                            }\n                            free(v4);\n                            if (v2 == 0)\n                            {\n                                break;\n                            }\n                            sub_4066a0();\n                        }\n                        if (v43 != v13 && (v44 == 47 || v44 != 0) && (v17 != 0 || v44 != 47))\n                        {\n                            v19 = v43 - v13;\n                            if (v13[1] == 46 && v17 == 46 && *((long long *)&v0) == 2 && v43 - v13 != 1)\n                            {\n                                v20 = v43;\n                                if (v15 > v46 + 1)\n                                {\n                                    v21 = &v15[-1];\n                                    if (v15[-2] == 47 || v46 >= &v15[-1])\n                                    {\n                                        v15 = v21;\n                                    }\n                                }\n                            }\n                            if (v17 != 46 || v13[1] != 46 && v43 - v13 != 1 || v43 - v13 != 1 && *((long long *)&v0) != 2)\n                            {\n                                if (v15[-1] != 47)\n                                {\n                                    *(v15) = 47;\n                                    v15 = &v15[1];\n                                }\n                                if (v16 <= &v15[*((long long *)&v0)])\n                                {\n                                    v22 = &v15[-1 * v46];\n                                    *((unsigned long *)&v0) = v19;\n                                    v23 = (0x1000 <= *((long long *)&v0)? &v16[-1 * v46 + *((long long *)&v0) + 1] : &v16[-1 * v46 + 0x1000]);\n                                    v46 = (unsigned int)sub_40a5c0();\n                                    v16 = v23 + v46;\n                                    v15 = v22 + v46;\n                                }\n                                *((long long *)&v0) = *((long long *)&v0);\n                                memcpy(v15, v13, *((long long *)&v0));\n                                v15 = &v15[*((long long *)&v0)];\n                                *(v15) = 0;\n                                if (v6 == 0 || v1 != 2)\n                                {\n                                    v26 = v46;\n                                    if (v6 != 0)\n                                    {\n                                        v27 = __xstat(0x1, v26, (unsigned int)&v8) != 0;\n                                    }\n                                    else\n                                    {\n                                        v27 = __lxstat(0x1, v26, (unsigned int)&v8) != 0;\n                                    }\n                                    if (v27 != 0)\n                                    {\n                                        v48 = __errno_location();\n                                        v51 = *(v48);\n                                        if (v1 == 1)\n                                        {\n                                            v7 = v51;\n                                            v0 = v48;\n                                            v28 = strspn((unsigned int)v43, 0x41236e);\n                                            v48 = v0;\n                                            v51 = v7;\n                                        }\n                                    }\n                                    else if (((unsigned short)v9 & 0xf000) == 0xa000)\n                                    {\n                                        if (v2 != 0)\n                                        {\n                                            v29 = sub_405b90();\n                                            if (v29 == 0)\n                                            {\n                                                sub_405b00();\n                                                v31 = (unsigned long long)(unsigned int)sub_40d6b0();\n                                                if (v31 != 0)\n                                                {\n                                                    v33 = strlen(v31);\n                                                    v34 = strlen(v43);\n                                                    if (v5 == 0)\n                                                    {\n                                                        v0 = v34;\n                                                        *((int *)&v5) = (0x1000 <= v0? v0 : 0x1000);\n                                                        v4 = (unsigned int)sub_40a560();\n                                                    }\n                                                    else if (*((long long *)&v0) > v5)\n                                                    {\n                                                        v0 = v33 + v34 + 1;\n                                                        v3 = v34;\n                                                        v4 = (unsigned int)sub_40a5c0();\n                                                        v5 = v0;\n                                                    }\n                                                    memmove(v4 + v33, v43, v34 + 1);\n                                                    v39 = memcpy(v4, v31, v33);\n                                                    v40 = v46 + 1;\n                                                    v43 = v39;\n                                                    v3 = &v39[0];\n                                                    if (*(v31) == 47)\n                                                    {\n                                                        *((char *)v46) = 47;\n                                                        v15 = v40;\n                                                    }\n                                                    else if (v15 > v15)\n                                                    {\n                                                        v41 = &v15[-1];\n                                                        if (v46 < &v15[-1])\n                                                        {\n                                                            v42 = v15[-2];\n                                                            v15 = v41;\n                                                            if (v42 != 47)\n                                                            {\n                                                                do\n                                                                {\n                                                                    v15 = &v15[-1];\n                                                                }\n                                                                while (v15[-1] != 47 && v46 != v15);\n                                                            }\n                                                        }\n                                                    }\n                                                    free(v31);\n                                                }\n                                                else\n                                                {\n                                                    v49 = __errno_location();\n                                                    v32 = *(v49);\n                                                }\n                                            }\n                                            if ((v29 == 0 || v1 != 2) && (v1 == 12 || v1 != 2) && (v31 == 0 || v29 != 0))\n                                            {\n                                                v1 = v32;\n                                                v0 = v49;\n                                                free(v4);\n                                                free(v46);\n                                                v52 = v0;\n                                                v53 = v1;\n                                            }\n                                        }\n                                        else\n                                        {\n                                            v2 = (unsigned int)sub_406460();\n                                            sub_40a7b0(); /* do not return */\n                                        }\n                                    }\n                                }\n                                if ((v1 == 2 || v1 != 1) && (v1 == 2 || v27 != 0) && (v1 == 2 || v1 != 0) && (v6 != 0 || v1 != 1) && (v6 != 0 || v27 != 0) && (v6 != 0 || v1 != 0))\n                                {\n                                    v9 = 0;\n                                }\n                                if (v2 != 0 && ((unsigned short)v9 & 0xf000) == 0xa000 && v27 == 0 && v29 != 0 && v1 != 2)\n                                {\n                                    v49 = __errno_location();\n                                }\n                                if (v1 != 2 && v43[0] != 0 && (v27 == 0 || v1 != 1) && (v27 == 0 || v1 != 0) && (((unsigned short)v9 & 0xf000) != 0xa000 || v27 != 0) && (v27 != 0 || ((unsigned short)v9 & 0xf000) != 0x4000))\n                                {\n                                    v48 = __errno_location();\n                                }\n                                if (v27 == 0 && ((unsigned short)v9 & 0xf000) == 0x4000 && ((unsigned short)v9 & 0xf000) != 0xa000 && (v6 == 0 || v1 != 2) || v29 == 0 && ((unsigned short)v9 & 0xf000) == 0xa000 && v27 == 0 && v2 != 0 && v31 != 0 && (v6 == 0 || v1 != 2) || v43[0] == 0 && (v27 == 0 || v1 == 2 || v1 != 1) && (v27 == 0 || v1 == 2 || v1 != 0) && (v27 == 0 || v6 != 0 || v1 != 1) && (v27 == 0 || v6 != 0 || v1 != 0) && (v1 == 2 || ((unsigned short)v9 & 0xf000) != 0xa000 || v27 != 0) && (v1 == 2 || v27 != 0 || ((unsigned short)v9 & 0xf000) != 0x4000) && (((unsigned short)v9 & 0xf000) != 0xa000 || v6 != 0 || v27 != 0) && (v6 != 0 || v27 != 0 || ((unsigned short)v9 & 0xf000) != 0x4000) || v1 == 2 && v43[0] != 0 && (v27 == 0 || v1 == 2 || v1 != 1) && (v27 == 0 || v1 == 2 || v1 != 0) && (v27 == 0 || v6 != 0 || v1 != 1) && (v27 == 0 || v6 != 0 || v1 != 0) && (v1 == 2 || ((unsigned short)v9 & 0xf000) != 0xa000 || v27 != 0) && (v1 == 2 || v27 != 0 || ((unsigned short)v9 & 0xf000) != 0x4000) && (((unsigned short)v9 & 0xf000) != 0xa000 || v6 != 0 || v27 != 0) && (v6 != 0 || v27 != 0 || ((unsigned short)v9 & 0xf000) != 0x4000))\n                                {\n                                    v44 = v43[0];\n                                    v45 = v43;\n                                }\n                                if (v1 == 0 && v27 != 0 && (v6 == 0 || v1 != 2) || v1 == 1 && *((char *)(v43 + v28)) != 0 && v27 != 0 && v1 != 0 && (v6 == 0 || v1 != 2) || *((char *)(v43 + v28)) == 0 && v1 == 1 && (unsigned int)v51 != 2 && v27 != 0 && v1 != 0 && (v6 == 0 || v1 != 2) || v1 != 2 && v43[0] != 0 && (v27 == 0 || v1 != 1) && (v27 == 0 || v1 != 0) && (((unsigned short)v9 & 0xf000) != 0xa000 || v27 != 0) && (v27 != 0 || ((unsigned short)v9 & 0xf000) != 0x4000))\n                                {\n                                    *((unsigned long *)&v1) = v51;\n                                    v0 = v48;\n                                    free(v4);\n                                    free(v46);\n                                    v52 = v0;\n                                    v53 = v1;\n                                }\n                                if (v29 == 0 && ((unsigned short)v9 & 0xf000) == 0xa000 && v6 == 0 && v27 == 0 && v31 == 0 && v1 == 2 && v2 != 0 && v1 != 12 || ((unsigned short)v9 & 0xf000) == 0xa000 && v27 == 0 && v29 != 0 && v2 != 0 && (v6 == 0 || v1 != 2) && v1 == 2 || *((char *)(v43 + v28)) == 0 && v1 == 1 && v27 != 0 && v1 != 0 && (v6 == 0 || v1 != 2) && (unsigned int)v51 == 2)\n                                {\n                                    v44 = v18[1];\n                                    v36 = v43;\n                                }\n                                if (((unsigned short)v9 & 0xf000) == 0xa000 && v27 == 0 && v2 != 0 && (v29 == 0 || v1 != 2) && (v6 == 0 || v1 != 2) && (v1 == 12 || v1 != 2) && (v31 == 0 || v29 != 0) || v2 != 0 && (v1 == 0 && v27 != 0 && (v6 == 0 || v1 != 2) || v1 == 1 && *((char *)(v43 + v28)) != 0 && v27 != 0 && v1 != 0 && (v6 == 0 || v1 != 2) || *((char *)(v43 + v28)) == 0 && v1 == 1 && (unsigned int)v51 != 2 && v27 != 0 && v1 != 0 && (v6 == 0 || v1 != 2) || v1 != 2 && v43[0] != 0 && (v27 == 0 || v1 != 1) && (v27 == 0 || v1 != 0) && (((unsigned short)v9 & 0xf000) != 0xa000 || v27 != 0) && (v27 != 0 || ((unsigned short)v9 & 0xf000) != 0x4000)))\n                                {\n                                    *((unsigned long *)&v1) = v53;\n                                    v0 = v52;\n                                    sub_4066a0();\n                                    v53 = v1;\n                                    v52 = v0;\n                                }\n                                if (((unsigned short)v9 & 0xf000) == 0xa000 && v27 == 0 && v2 != 0 && (v29 == 0 || v1 != 2) && (v6 == 0 || v1 != 2) && (v1 == 12 || v1 != 2) && (v31 == 0 || v29 != 0) || v2 != 0 && (v1 == 0 && v27 != 0 && (v6 == 0 || v1 != 2) || v1 == 1 && *((char *)(v43 + v28)) != 0 && v27 != 0 && v1 != 0 && (v6 == 0 || v1 != 2) || *((char *)(v43 + v28)) == 0 && v1 == 1 && (unsigned int)v51 != 2 && v27 != 0 && v1 != 0 && (v6 == 0 || v1 != 2) || v1 != 2 && v43[0] != 0 && (v27 == 0 || v1 != 1) && (v27 == 0 || v1 != 0) && (((unsigned short)v9 & 0xf000) != 0xa000 || v27 != 0) && (v27 != 0 || ((unsigned short)v9 & 0xf000) != 0x4000)) || (v1 == 0 && v27 != 0 && (v6 == 0 || v1 != 2) || v1 == 1 && *((char *)(v43 + v28)) != 0 && v27 != 0 && v1 != 0 && (v6 == 0 || v1 != 2) || *((char *)(v43 + v28)) == 0 && v1 == 1 && (unsigned int)v51 != 2 && v27 != 0 && v1 != 0 && (v6 == 0 || v1 != 2) || v1 != 2 && v43[0] != 0 && (v27 == 0 || v1 != 1) && (v27 == 0 || v1 != 0) && (((unsigned short)v9 & 0xf000) != 0xa000 || v27 != 0) && (v27 != 0 || ((unsigned short)v9 & 0xf000) != 0x4000)) && v2 == 0)\n                                {\n                                    *((unsigned long *)&v52) = v53;\n                                    v46 = 0;\n                                }\n                            }\n                            if (v17 == 46 && (v13[1] == 46 || v43 - v13 == 1) && (v46 < &v15[-1] || v43 - v13 == 1) && (v43 - v13 == 1 || *((long long *)&v0) == 2) && (v43 - v13 == 1 || v15[-2] != 47) && (v43 - v13 == 1 || v15 > v46 + 1))\n                            {\n                                v25 = v43;\n                            }\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v46 = 0;\n                *(__errno_location()) = 2;\n            }\n        }\n    }\n    if (v12 == 0 || ((unsigned int)((unsigned long long)(v11 & 3) - 1) & v11 & 3) != 0)\n    {\n        v46 = 0;\n        *(__errno_location()) = 22;\n    }\n    v56 = v46;\n    return v56;\n}\n"
        },
        {
            "funcName": "sub_40da70",
            "funcStartAddr": "0x40da70",
            "funcEndAddr": "0x40dadd",
            "decompiledFuncCode": "int sub_40da70()\n{\n    unsigned long long v1;  // rax\n\n    v1 = sub_40d7b0();\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>))\n    {\n        sub_40d8d0();\n        sub_40d950();\n        r9<8>();\n        v1 = -1;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_406c00",
            "funcStartAddr": "0x406c00",
            "funcEndAddr": "0x406c34",
            "decompiledFuncCode": "int sub_406c00()\n{\n    unsigned long long v0;  // [bp-0x10]\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rax\n\n    v3 = v2;\n    v4 = sub_406980();\n    if (v4 != -1)\n    {\n        if (v4 == 0)\n        {\n            v3 = v0;\n        }\n        v5 = v3;\n        return v5;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_4058d0",
            "funcStartAddr": "0x4058d0",
            "funcEndAddr": "0x4058d8",
            "decompiledFuncCode": "extern unsigned long long g_617700;\n\nint sub_4058d0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long v2;  // rax\n\n    g_617700 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_403a00",
            "funcStartAddr": "0x403a00",
            "funcEndAddr": "0x403a0a",
            "decompiledFuncCode": "int sub_403a00()\n{\n    unsigned long long *v1;  // rsi\n    unsigned long long v2;  // rax\n    unsigned long long *v3;  // rdi\n    char v4;  // al\n\n    v2 = *(v1);\n    v4 = *(v3) == *(v1);\n    return rax<8>;\n}\n"
        },
        {
            "funcName": "sub_40c3e0",
            "funcStartAddr": "0x40c3e0",
            "funcEndAddr": "0x40c3f8",
            "decompiledFuncCode": "int sub_40c3e0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_40bd30();\n}\n"
        },
        {
            "funcName": "sub_40cf60",
            "funcStartAddr": "0x40cf60",
            "funcEndAddr": "0x40d283",
            "decompiledFuncCode": "int sub_40cf60()\n{\n    unsigned long long v0;  // [bp-0x880]\n    unsigned long long v1;  // [bp-0x878]\n    unsigned long|unsigned long long v2;  // [bp-0x870]\n    unsigned long|unsigned long long v3;  // [bp-0x868]\n    unsigned long long v4;  // [bp-0x860]\n    unsigned long v5;  // [bp-0x858]\n    unsigned long long v6;  // [bp-0x850]\n    unsigned long|unsigned long long v7;  // [bp-0x840]\n    char|unsigned long v8;  // [bp-0x838]\n    char v9;  // [bp-0x830]\n    unsigned long long v11;  // rdi\n    unsigned long long v12;  // r15\n    unsigned long long v13;  // rsi\n    unsigned long long v14;  // rcx\n    unsigned long long v15;  // rbx\n    char *v16;  // r13\n    unsigned long long *v17;  // rax\n    void *v18;  // rdx\n    void *v19;  // rsi\n    unsigned long long v20;  // rax\n    unsigned long long v22;  // r9\n    char *v23;  // rax\n    unsigned long long v25;  // rdx\n    unsigned long long v26;  // rcx\n    unsigned long long v27;  // rax\n    unsigned long long v28;  // r14\n    unsigned long long v29;  // r9\n    unsigned long long v30;  // rax\n    unsigned long long v31;  // r9\n    char *|unsigned long long v32;  // rax\n    unsigned long long v33;  // rdx\n    char *v34;  // rax\n    unsigned long long v36;  // r11\n    unsigned long long v37;  // rax\n    char *v38;  // rax\n    char *v39;  // rdx\n    char *v40;  // rdi\n    char *v41;  // rax\n    unsigned long long v42;  // rdx\n    unsigned long long v43;  // rsi\n    unsigned long long v44;  // r11\n    unsigned long long v45;  // r14\n    unsigned long long v46;  // rbp\n    unsigned long long v47;  // r10\n    unsigned long long v48;  // rax\n\n    v12 = v11;\n    v46 = v13;\n    v15 = v14;\n    if (v14 > 2)\n    {\n        v16 = (unsigned long long)(unsigned int)sub_40ce30();\n        v3 = v7;\n    }\n    else\n    {\n        v7 = 1;\n        v16 = v14 - 1;\n        v3 = 1;\n    }\n    v17 = &v8;\n    do\n    {\n        v8 = v14;\n        v17 = &v9;\n    }\n    while (stack_base + -56 != v17);\n    v19 = v18 + v3;\n    if (v14 != 0)\n    {\n        v22 = v15 + (char *)v17;\n        v17 = v18;\n        do\n        {\n            v25 = *(v23);\n            v26 = v18 + v15 - 1 - v23;\n            v23 = &v23[1];\n            *((unsigned long long *)&((char *)stack_base)[8 * v25 + -2104]) = v26;\n        }\n        while (v22 != v23);\n        v0 = v15 - 1;\n        v27 = memcmp(v17, v19, v16);\n        if (v27 == 0)\n        {\n            v47 = v0;\n            v44 = 0;\n            v45 = 0;\n            v6 = &v16[-1];\n            v4 = v15 - v3;\n            v5 = 1 + -0x1 * v16;\n            while (true)\n            {\n                v2 = v47;\n                v1 = v44;\n                v0 = v45 + v15;\n                if (sub_40c480() != 0)\n                {\n                    break;\n                }\n                v36 = v1;\n                v47 = v2;\n                if (v0 == 0)\n                {\n                    break;\n                }\n                v37 = *((long long *)&((char *)stack_base)[8 * (unsigned long long)(char)*((char *)(v12 + v46 - 1)) + -2104]);\n                if (*((long long *)&((char *)stack_base)[8 * (unsigned long long)(char)*((char *)(v12 + v46 - 1)) + -2104]) != 0)\n                {\n                    if (v37 < v3)\n                    {\n                        v37 = (v1 != 0? v4 : rax<8>);\n                    }\n                    v45 = 0 + v37;\n                    v44 = 0;\n                }\n                else\n                {\n                    v38 = (v16 <= v36? v36 : v16);\n                    if ((v16 <= v36? v36 : v16) < v2)\n                    {\n                        v39 = v12 + v45;\n                        while (true)\n                        {\n                            if (*((char *)(v17 + v38)) == *((char *)(v39 + v38)))\n                            {\n                                v38 = &v38[1];\n                                if (v38 == v2)\n                                {\n                                    break;\n                                }\n                            }\n                            else\n                            {\n                                v44 = 0;\n                                v45 = &v38[v5];\n                            }\n                        }\n                        if (*((char *)(v17 + v38)) == *((char *)(v39 + v38)))\n                        {\n                            v40 = v6;\n                            v41 = v6;\n                        }\n                        else if (*((char *)(v17 + v38)) != *((char *)(v39 + v38)))\n                        {\n                            v46 = v0;\n                        }\n                    }\n                    if (v36 >= v16 || (v16 <= v36? v36 : v16) >= v2)\n                    {\n                        v40 = v6;\n                        v41 = v6;\n                        if (v36 < v16)\n                        {\n                            v42 = v12 + v45;\n                            if (v40[v45 + v12] == *((char *)(v17 + v40)))\n                            {\n                                while (true)\n                                {\n                                    v43 = &v41[-1];\n                                    if (v36 == v41 || *((char *)(v17 + v41 - 1)) != v41[v42 + -1])\n                                    {\n                                        break;\n                                    }\n                                    v41 = v43;\n                                }\n                            }\n                        }\n                        if (v36 >= v16 || v40[v45 + v12] != *((char *)(v17 + v40)))\n                        {\n                            v41 = v16;\n                        }\n                        if (1 <= v41)\n                        {\n                            v45 = 0 + v3;\n                            v44 = v4;\n                        }\n                        else\n                        {\n                            v48 = v12 + v45;\n                        }\n                    }\n                }\n                if (*((long long *)&((char *)stack_base)[8 * (unsigned long long)(char)*((char *)(v12 + v46 - 1)) + -2104]) != 0 || 1 <= v41 && (v16 <= v36? v36 : v16) >= v2 || (v16 <= v36? v36 : v16) < v2 && v36 >= v16)\n                {\n                    v46 = v0;\n                }\n            }\n            if (true)\n            {\n                v48 = 0;\n            }\n            else if (1 > v41 && (v36 >= v16 || (v16 <= v36? v36 : v16) >= v2))\n            {\n                return v48;\n            }\n        }\n    }\n    else\n    {\n        v20 = memcmp(v17, v19, v16);\n    }\n    if (v14 == 0 && v20 != 0 || v14 != 0 && v27 != 0)\n    {\n        v28 = v15 - 1;\n        v29 = 0;\n        v3 = (v15 + -0x1 * v16 < v16? v16 : (char *)(v15 + -0x1 * v16)) + 1;\n        v7 = (v15 + -0x1 * v16 < v16? v16 : (char *)(v15 + -0x1 * v16)) + 1;\n        v2 = 1 + -0x1 * v16;\n        while (true)\n        {\n            v1 = v29;\n            v0 = v29 + v15;\n            v30 = sub_40c480();\n            if (v0 == 0)\n            {\n                break;\n            }\n            v31 = v1;\n            if (v30 != 0)\n            {\n                break;\n            }\n            v32 = *((long long *)&((char *)stack_base)[8 * (unsigned long long)(char)*((char *)(v12 + v46 - 1)) + -2104]);\n            if (*((long long *)&((char *)stack_base)[8 * (unsigned long long)(char)*((char *)(v12 + v46 - 1)) + -2104]) == 0)\n            {\n                v33 = v12 + v31;\n                if (v16 < v28)\n                {\n                    v32 = v16;\n                    if (*((char *)(v16 + v16)) == *((char *)(v16 + v16)))\n                    {\n                        do\n                        {\n                            v32 = &v32[1];\n                        }\n                        while (v32 < v28 && *((char *)(v17 + v32)) == *((char *)(v32 + v32)));\n                        if (true)\n                        {\n                            v34 = &v16[-1];\n                        }\n                        else if (v32 < v28)\n                        {\n                            v31 = 0 + v2;\n                        }\n                    }\n                    if (*((char *)(v16 + v16)) != *((char *)(v16 + v16)) || &v16[-1] != -1)\n                    {\n                        v31 = 0 + v2;\n                    }\n                }\n                if (*((char *)(v16 + v16)) == *((char *)(v16 + v16)) || v16 >= v28)\n                {\n                    if (v16 >= v28 || &v16[-1] != -1)\n                    {\n                        v34 = &v16[-1];\n                        if (&v16[-1] == -1 || *((char *)(v32 + v34)) == *((char *)(v17 + v16 - 1)))\n                        {\n                            v32 = v33;\n                        }\n                    }\n                    if (&v16[-1] != -1)\n                    {\n                        if (*((char *)(v32 + v34)) == *((char *)(v17 + v16 - 1)))\n                        {\n                            do\n                            {\n                                v34 = &v34[-1];\n                            }\n                            while (*((char *)(v17 + v34)) == *((char *)(v32 + v34)) && v34 != -1);\n                            if (v34 != -1)\n                            {\n                                v29 = 0 + v3;\n                            }\n                            else\n                            {\n                                v32 = v33;\n                            }\n                        }\n                        v29 = 0 + v3;\n                    }\n                }\n            }\n            if (v16 < v28 || &v16[-1] == -1)\n            {\n                v29 = v31 + v32;\n            }\n            if (&v16[-1] != -1)\n            {\n                v46 = v0;\n            }\n        }\n        if (true)\n        {\n            v48 = 0;\n        }\n        else if (v30 == 0 && *((long long *)&((char *)stack_base)[8 * (unsigned long long)(char)*((char *)(v12 + v46 - 1)) + -2104]) == 0 && v0 != 0 && (*((char *)(v16 + v16)) == *((char *)(v16 + v16)) || v16 >= v28) && (v16 >= v28 || &v16[-1] != -1) && &v16[-1] == -1 || *((char *)(v32 + v34)) == *((char *)(v17 + v16 - 1)))\n        {\n            return v48;\n        }\n    }\n    v48 = 0;\n    return v48;\n}\n"
        },
        {
            "funcName": "sub_409d70",
            "funcStartAddr": "0x409d70",
            "funcEndAddr": "0x409d83",
            "decompiledFuncCode": "int sub_409d70()\n{\n}\n"
        },
        {
            "funcName": "sub_406e60",
            "funcStartAddr": "0x406e60",
            "funcEndAddr": "0x406e94",
            "decompiledFuncCode": "int sub_406e60()\n{\n    unsigned long v0;  // [bp-0x30]\n    unsigned long v1;  // [bp-0x28]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v4;  // [bp-0x10]\n    unsigned long v5;  // [bp-0x8]\n    unsigned long long v7[3];  // rdi\n    unsigned long long v8[3];  // rsi\n    unsigned long v9;  // r15\n    unsigned long v10;  // r14\n    unsigned long v11;  // r13\n    unsigned long v12;  // r12\n    unsigned long v13;  // rbx\n\n    if (v7[1] == v8[1] && v7[2] == v8[2])\n    {\n        v5 = v9;\n        v4 = v10;\n        v3 = v11;\n        v2 = v12;\n        v1 = stack_base + 0;\n        v0 = v13;\n    }\n    if (v7[1] != v8[1] || v7[2] != v8[2])\n    {\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_40e1f0",
            "funcStartAddr": "0x40e1f0",
            "funcEndAddr": "0x40e23c",
            "decompiledFuncCode": "int sub_40e1f0()\n{\n    unsigned int v1;  // [bp+0x100008]\n    unsigned int v2;  // rdi\n    unsigned long long v3;  // rax\n\n    if (v2 > 2)\n    {\n        return v2;\n    }\n    close(v2);\n    *(__errno_location()) = v1;\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_406e90",
            "funcStartAddr": "0x406e90",
            "funcEndAddr": "0x406ea7",
            "decompiledFuncCode": "int sub_406e90()\n{\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_40acf0",
            "funcStartAddr": "0x40acf0",
            "funcEndAddr": "0x40ad7f",
            "decompiledFuncCode": "int sub_40acf0()\n{\n    unsigned int v0;  // [bp-0xd0]\n    unsigned int v1;  // [bp-0xcc]\n    unsigned long v2;  // [bp-0xc8]\n    unsigned long v3;  // [bp-0xc0]\n    unsigned long v4;  // [bp-0xa8]\n    unsigned long v5;  // [bp-0xa0]\n    unsigned long v6;  // [bp-0x98]\n    unsigned long v7;  // [bp-0x90]\n    void v8;  // [bp-0x88]\n    void v9;  // [bp-0x78]\n    void v10;  // [bp-0x68]\n    void v11;  // [bp-0x58]\n    void v12;  // [bp-0x48]\n    void v13;  // [bp-0x38]\n    void v14;  // [bp-0x28]\n    void v15;  // [bp-0x18]\n    unsigned long v17;  // rdx\n    unsigned long v18;  // rcx\n    unsigned long v19;  // r8\n    unsigned long v20;  // r9\n    char v21;  // al\n    void v22;  // xmm0\n    void v23;  // xmm1\n    void v24;  // xmm2\n    void v25;  // xmm3\n    void v26;  // xmm4\n    void v27;  // xmm5\n    void v28;  // xmm6\n    void v29;  // xmm7\n\n    v4 = v17;\n    v5 = v18;\n    v6 = v19;\n    v7 = v20;\n    if (v21 != 0)\n    {\n        v8 = v22;\n        v9 = v23;\n        v10 = v24;\n        v11 = v25;\n        v12 = v26;\n        v13 = v27;\n        v14 = v28;\n        v15 = v29;\n    }\n    v0 = 16;\n    v2 = stack_base + 8;\n    v1 = 48;\n    v3 = stack_base + -184;\n    return sub_40d650();\n}\n"
        },
        {
            "funcName": "sub_40e360",
            "funcStartAddr": "0x40e360",
            "funcEndAddr": "0x40fd79",
            "decompiledFuncCode": "int sub_40e360() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40a790",
            "funcStartAddr": "0x40a790",
            "funcEndAddr": "0x40a7a3",
            "decompiledFuncCode": "int sub_40a790()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    char *v3;  // rdi\n\n    v0 = v2;\n    strlen(v3);\n}\n"
        },
        {
            "funcName": "sub_406030",
            "funcStartAddr": "0x406030",
            "funcEndAddr": "0x406092",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_406030()\n{\n    unsigned long long v1[4];  // rdi\n    unsigned long long v2[2];  // rcx\n    struct_0 *v3;  // rax\n    unsigned long long v4;  // rdx\n    unsigned long long v5;  // r8\n\n    v2 = *(v1);\n    v4 = 0;\n    v5 = 0;\n    if (*(v1) < v1[1])\n    {\n        while (true)\n        {\n            if (*(v2) != 0)\n            {\n                v3 = v2[1];\n                v5 += 1;\n                v4 += 1;\n                if (v2[1] != 0)\n                {\n                    do\n                    {\n                        v3 = v3->field_8;\n                        v4 += 1;\n                    }\n                    while (v3 != 0);\n                    v2 = &v2[2];\n                    if (*(v1) + 16 >= v1[1])\n                    {\n                        break;\n                    }\n                }\n            }\n            if (*(v2) == 0 || v2[1] == 0)\n            {\n                v2 = &v2[2];\n                if (v2 >= v1[1])\n                {\n                    break;\n                }\n            }\n        }\n    }\n    if (v1[3] != v5)\n    {\n        return 0;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_404ed0",
            "funcStartAddr": "0x404ed0",
            "funcEndAddr": "0x405237",
            "decompiledFuncCode": "typedef struct struct_0 {\n    uint128_t field_0;\n    uint128_t field_10;\n    unsigned int field_18;\n    char padding_1c[4];\n    uint128_t field_20;\n    uint128_t field_30;\n    uint128_t field_40;\n    uint128_t field_50;\n    uint128_t field_60;\n    uint128_t field_70;\n    uint128_t field_80;\n} struct_0;\n\nextern char g_404f4e;\nextern char g_404f59;\nextern char g_404f61;\nextern char g_404f7f;\nextern char g_404f94;\nextern char g_404fa8;\nextern char g_404fbd;\nextern char g_404ffa;\nextern char g_40508d;\nextern char g_4050a4;\nextern char g_4050b8;\nextern char g_4050cd;\nextern char g_4050d5;\nextern char g_4050e8;\nextern char g_4050fc;\nextern char g_40519b;\nextern char g_4051af;\nextern char g_4051c4;\nextern char g_4051df;\nextern char g_405239;\nextern char g_40524c;\nextern unsigned int g_412150;\nextern unsigned int g_41216d;\nextern unsigned int g_41218b;\nextern unsigned int g_41218c;\nextern unsigned int g_4121a0;\nextern unsigned int g_4121c8;\n\nint sub_404ed0()\n{\n    char v0;  // [bp-0x158]\n    char|void|uint128_t v1;  // [bp-0x148]\n    void v2;  // [bp-0x138]\n    void v3;  // [bp-0x128]\n    void v4;  // [bp-0x118]\n    void v5;  // [bp-0x108]\n    void v6;  // [bp-0xf8]\n    void v7;  // [bp-0xe8]\n    void v8;  // [bp-0xd8]\n    void|uint128_t v9;  // [bp-0xc8]\n    char v10;  // [bp-0xb8]\n    unsigned long v11;  // [bp-0xb0]\n    void v12;  // [bp-0xa8]\n    void v13;  // [bp-0x98]\n    void v14;  // [bp-0x88]\n    void v15;  // [bp-0x78]\n    unsigned long|void v16;  // [bp-0x68]\n    unsigned long v17;  // [bp-0x60]\n    unsigned long|void v18;  // [bp-0x58]\n    unsigned long v19;  // [bp-0x50]\n    unsigned long|void v20;  // [bp-0x48]\n    unsigned long v21;  // [bp-0x40]\n    unsigned long|void v22;  // [bp-0x38]\n    unsigned long v23;  // [bp-0x30]\n    unsigned long v24;  // [bp-0x28]\n    unsigned long v25;  // [bp-0x20]\n    unsigned long v26;  // [bp-0x18]\n    unsigned long v27;  // [bp-0x10]\n    unsigned long v28;  // [bp-0x8]\n    struct_0 *v30;  // rsi\n    struct_0 *v31;  // rbx\n    unsigned int v32;  // r13d\n    unsigned int *v33;  // r12\n    unsigned long v34;  // rdi\n    unsigned long long v35;  // rax\n    void *v36;  // rbx\n    unsigned long long v37;  // rax\n    unsigned long long v38;  // r13\n    unsigned long long v39;  // rax\n    unsigned long long v40;  // rax\n    unsigned long long v41;  // rax\n    unsigned long long v42;  // rax\n    unsigned long long v43;  // rbx\n    unsigned long long v44;  // rbx\n    unsigned long v45;  // rsi\n    unsigned long long v46;  // rbx\n    unsigned long long v47;  // rbx\n    unsigned long long v48;  // rbx\n    unsigned long v49;  // rsi\n    unsigned long v50;  // rsi\n    unsigned int v51;  // r13d\n    unsigned long long v52;  // rax\n    unsigned long v54;  // rsi\n    unsigned long long v55;  // rax\n\n    v31 = v30;\n    v32 = sub_409f30();\n    v33 = __errno_location();\n    if (v32 == 0)\n    {\n        if (((unsigned short)*((int *)&((char *)&v30->field_10)[8]) & 0xf000) != 0x4000)\n        {\n            v36 = (unsigned long long)(unsigned int)sub_405990();\n            v37 = strlen(v36);\n            rsp<8> = &(&v0)[-1 * (v37 + 24 & -0x10) + -8];\n            v28 = &g_404f4e;\n            v38 = memcpy(&(&v0)[-1 * (v37 + 24 & -0x10) + 15] & -0x10, v36, v37 + 1);\n            rsp<8> = rsp<8> - 8;\n            v27 = &g_404f59;\n            free(v36);\n            rsp<8> = rsp<8> - 8;\n            v26 = &g_404f61;\n            v39 = chdir((unsigned int)v30);\n            if (v39 >= 0)\n            {\n                rsp<8> = rsp<8> - 8;\n                v25 = &g_404f7f;\n                v40 = __xstat(0x1, 0x41218c, (unsigned int)&v1);\n                if (v40 < 0)\n                {\n                    rsp<8> = rsp<8> - 8;\n                    v24 = &g_404f94;\n                    v44 = (unsigned int)sub_409b90();\n                    rsp<8> = rsp<8> - 8;\n                    v23 = &g_404fa8;\n                    v49 = *(v33);\n                    v46 = 0;\n                    rsp<8> = rsp<8> - 8;\n                    v22 = &g_404fbd;\n                    error(0x0, v49, (unsigned long long)dcgettext(0x0, 0x4121a0, 0x5));\n                }\n            }\n        }\n        else\n        {\n            *((uint128_t *)&v1) = v31->field_0;\n            *((uint128_t *)&v2) = v31->field_10;\n            *((int128_t *)&v3) = *((int128_t *)&v31->field_18);\n            *((uint128_t *)&v4) = v31->field_20;\n            *((uint128_t *)&v5) = v31->field_30;\n            *((uint128_t *)&v6) = v31->field_40;\n            *((uint128_t *)&v7) = v31->field_50;\n            *((uint128_t *)&v8) = v31->field_60;\n            *((uint128_t *)&v9) = v31->field_70;\n            rsp<8> = stack_base + -352;\n            v35 = chdir(v34);\n        }\n        if ((v39 < 0 || ((unsigned short)*((int *)&((char *)&v30->field_10)[8]) & 0xf000) == 0x4000) && (v35 < 0 || ((unsigned short)*((int *)&((char *)&v30->field_10)[8]) & 0xf000) != 0x4000))\n        {\n            rsp<8> = rsp<8> - 8;\n            v25 = &g_40519b;\n            v43 = (unsigned int)sub_409b90();\n            rsp<8> = rsp<8> - 8;\n            v24 = &g_4051af;\n            v45 = *(v33);\n            v46 = 0;\n            rsp<8> = rsp<8> - 8;\n            v23 = &g_4051c4;\n            error(0x0, v45, (unsigned long long)dcgettext(0x0, 0x41216d, 0x5));\n        }\n        if ((((unsigned short)*((int *)&((char *)&v30->field_10)[8]) & 0xf000) == 0x4000 || v39 >= 0) && (v35 >= 0 || ((unsigned short)*((int *)&((char *)&v30->field_10)[8]) & 0xf000) != 0x4000))\n        {\n            if (((unsigned short)*((int *)&((char *)&v30->field_10)[8]) & 0xf000) == 0x4000 || v40 >= 0)\n            {\n                while (true)\n                {\n                    rsp<8> = rsp<8> - 8;\n                    v24 = &g_40508d;\n                    v41 = __xstat(0x1, 0x41218b, (unsigned int)&v10);\n                    if (v41 >= 0)\n                    {\n                        if (*((long long *)&v10) == (long long)v1 && v11 != (long long)(&v1)[8])\n                        {\n                            rsp<8> = rsp<8> - 8;\n                            v23 = &g_404ffa;\n                            v42 = chdir(0x41218b);\n                            if (v42 >= 0)\n                            {\n                                v1 = *((int128_t *)&v10);\n                                *((int128_t *)&v2) = (int128_t)v12;\n                                *((int128_t *)&v3) = (int128_t)v13;\n                                *((int128_t *)&v4) = (int128_t)v14;\n                                *((int128_t *)&v5) = (int128_t)v15;\n                                *((int128_t *)&v6) = (int128_t)v16;\n                                *((int128_t *)&v7) = (int128_t)v18;\n                                *((int128_t *)&v8) = (int128_t)v20;\n                                v9 = (int128_t)v22;\n                            }\n                            else\n                            {\n                                rsp<8> = rsp<8> - 8;\n                                v20 = &g_4051df;\n                                v48 = (unsigned int)sub_409b90();\n                            }\n                        }\n                        if (v11 == (long long)(&v1)[8] || *((long long *)&v10) != (long long)v1)\n                        {\n                            rsp<8> = rsp<8> - 8;\n                            v23 = &g_4050d5;\n                            v46 = (unsigned int)sub_40a7f0();\n                        }\n                    }\n                    else\n                    {\n                        rsp<8> = rsp<8> - 8;\n                        v21 = &g_4050a4;\n                        v47 = (unsigned int)sub_409b90();\n                    }\n                    if (v41 < 0 || v42 < 0 && *((long long *)&v10) == (long long)v1 && v11 != (long long)(&v1)[8])\n                    {\n                        rsp<8> = rsp<8> - 8;\n                        v20 = &g_4050b8;\n                        v50 = *(v33);\n                        v46 = 0;\n                        rsp<8> = rsp<8> - 8;\n                        v19 = &g_4050cd;\n                        error(0x0, v50, (unsigned long long)dcgettext(0x0, v50, 0x5));\n                    }\n                }\n            }\n            v51 = *(v33);\n            rsp<8> = rsp<8> - 8;\n            v18 = &g_4050e8;\n            v52 = sub_409f80();\n            if (v52 == 0)\n            {\n                rsp<8> = rsp<8> - 8;\n                v17 = &g_4050fc;\n                sub_409fa0();\n                *(v33) = v51;\n            }\n            else\n            {\n                rsp<8> = rsp<8> - 8;\n                v17 = &g_405239;\n                v54 = *(v33);\n                rsp<8> = rsp<8> - 8;\n                v16 = &g_40524c;\n                error(0x1, v54, (unsigned long long)dcgettext(0x0, 0x4121c8, 0x5));\n            }\n        }\n    }\n    else\n    {\n        v46 = 0;\n        error(0x0, *(v33), (unsigned long long)dcgettext(0x0, 0x412150, 0x5));\n    }\n    if (v52 == 0 || v32 != 0 || v35 < 0 && ((unsigned short)*((int *)&((char *)&v30->field_10)[8]) & 0xf000) == 0x4000 || v39 < 0 && ((unsigned short)*((int *)&((char *)&v30->field_10)[8]) & 0xf000) != 0x4000)\n    {\n        v55 = v46;\n        return v55;\n    }\n}\n"
        },
        {
            "funcName": "sub_406ef0",
            "funcStartAddr": "0x406ef0",
            "funcEndAddr": "0x406f98",
            "decompiledFuncCode": "int sub_406ef0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_409e12",
            "funcStartAddr": "0x409e12",
            "funcEndAddr": "0x409f18",
            "decompiledFuncCode": "int sub_409e12()\n{\n    char v0;  // [bp-0x128]\n    unsigned long v1;  // [bp-0x120]\n    char v2;  // [bp-0x98]\n    unsigned long v3;  // [bp-0x90]\n    unsigned long long v4;  // [bp+0x0]\n    unsigned long long v6;  // [bp+0x10]\n    unsigned long long v7;  // [bp+0x18]\n    unsigned long long v8;  // [bp+0x20]\n    unsigned long long v9;  // [bp+0x28]\n    unsigned long v12;  // r13\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rax\n    void *v15;  // rbp\n    void *v16;  // r12\n    unsigned long long v17;  // rax\n    unsigned long long v18;  // rax\n    char|unsigned long|unsigned long long v19;  // bl\n    unsigned long long v20;  // rax\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // r12\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r14\n    unsigned long long v25;  // r15\n\n    v12 = (unsigned int)sub_405ad0();\n    v13 = sub_405ad0();\n    if (v12 == v13)\n    {\n        v14 = memcmp((unsigned long long)(unsigned int)sub_405a70(), (unsigned long long)(unsigned int)sub_405a70(), v12);\n        if (v14 == 0)\n        {\n            v15 = (unsigned long long)(unsigned int)sub_405990();\n            v16 = (unsigned long long)(unsigned int)sub_405990();\n            v17 = __xstat(0x1, (unsigned int)v15, (unsigned int)&v0);\n            if (v17 == 0)\n            {\n                v18 = __xstat(0x1, (unsigned int)v16, (unsigned int)&v2);\n                if (v18 == 0)\n                {\n                    v19 = 0;\n                    if (v1 == v3)\n                    {\n                        v19 = *((long long *)&v0) == *((long long *)&v2);\n                    }\n                    free(v15);\n                    free(v16);\n                }\n                else\n                {\n                    error(0x1, *(__errno_location()), \"%s\");\n                }\n            }\n            else\n            {\n                error(0x1, *(__errno_location()), \"%s\");\n            }\n        }\n    }\n    if (v12 != v13 || v14 != 0 || v18 == 0 && v17 == 0)\n    {\n        v20 = v19;\n        v21 = v4;\n        v22 = v6;\n        v23 = v7;\n        v24 = v8;\n        v25 = v9;\n        return v20;\n    }\n}\n"
        },
        {
            "funcName": "sub_409730",
            "funcStartAddr": "0x409730",
            "funcEndAddr": "0x409764",
            "decompiledFuncCode": "int sub_409730()\n{\n    unsigned int v1;  // [bp+0x100008]\n\n    *(__errno_location()) = v1;\n    return sub_40a760();\n}\n"
        },
        {
            "funcName": "sub_406c40",
            "funcStartAddr": "0x406c40",
            "funcEndAddr": "0x406dff",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    struct struct_1 *field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n} struct_0;\n\ntypedef struct struct_3 {\n    char padding_0[4];\n    unsigned int field_4;\n    unsigned int field_8;\n    char padding_c[4];\n    char field_10;\n} struct_3;\n\ntypedef struct struct_2 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_2;\n\nint sub_406c40()\n{\n    unsigned long long *v0;  // [bp-0x20]\n    void tmp_10;  // tmp #10\n    void tmp_15;  // tmp #15\n    struct_0 *v2;  // rdi\n    unsigned long long v3[10];  // rbx\n    unsigned long long v5;  // cc_dep1\n    unsigned long long v6;  // rax\n    uint128_t v7;  // xmm0\n    unsigned long long v8;  // rax\n    unsigned int v9;  // ymm0\n    unsigned long long v10;  // rdx\n    unsigned int|unsigned long|uint128_t|unsigned long long v11;  // xmm0lq\n    uint128_t v12;  // xmm1\n    unsigned long long v13;  // rax\n    uint128_t v14;  // xmm1\n    unsigned int v15;  // ymm1\n    unsigned long long v16;  // xmm1lq\n    struct_3 *v18;  // rdx\n    uint128_t v19;  // xmm0\n    uint128_t v20;  // xmm0\n    unsigned int v21;  // ymm0\n    unsigned int|unsigned long|uint128_t v22;  // xmm1\n    uint128_t v23;  // xmm1\n    unsigned int v24;  // ymm1\n    uint128_t v25;  // xmm2\n    unsigned int v26;  // ymm2\n    unsigned long long v27;  // xmm2lq\n    uint128_t v28;  // xmm0\n    struct_2 *v30;  // rdi\n    void *v31;  // r12\n\n    v3 = v2;\n    if (sub_405cc0() != 0)\n    {\n        v3[4] = v3[4] - 1;\n        if (*(v0) == 0)\n        {\n            v5 = v3[3];\n            v6 = v3[3] - 1;\n            v3[3] = v3[3] - 1;\n            if (!((char)(v5 - 1 >> 63)))\n            {\n                v11 = 0;\n                v10 = v3[5];\n                v11 = v2->field_18 - 1;\n                v8 = v3[2];\n            }\n            else\n            {\n                v7 = 0;\n                tmp_10 = v6 % 2 | (unsigned int)v6 & 1;\n                v8 = v3[2];\n                v9 = tmp_10;\n                v10 = v3[5];\n                v11 = (unsigned long long)(unsigned int)xmm0<16> * 2;\n            }\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x18<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n            {\n                v12 = 0;\n                v12 = (unsigned int)v8;\n            }\n            else\n            {\n                tmp_15 = v8;\n                v13 = (unsigned int)v8 & 1;\n                v14 = 0;\n                v15 = tmp_15 >> 1 | v13;\n                v12 = xmm1<16> * 2;\n            }\n            xmm1<8> = Conv(128->64, (xmm1<16> * Conv(32->128, Load(addr=rdx<8>, size=4, endness=Iend_LE))))\n            if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n            {\n                sub_405de0();\n                v18 = v3[5];\n                if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x18<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n                {\n                    v19 = 0;\n                    v19 = (unsigned int)v2->field_10;\n                }\n                else\n                {\n                    v20 = 0;\n                    v21 = v2->field_10 >> 1 | (unsigned int)v2->field_10 & 1;\n                    v19 = xmm0<16> * 2;\n                }\n                if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x18<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n                {\n                    v22 = 0;\n                    v22 = v2->field_18;\n                }\n                else\n                {\n                    v23 = 0;\n                    v24 = v2->field_18 >> 1 | (unsigned int)v2->field_18 & 1;\n                    v22 = (unsigned long long)(unsigned int)xmm1<16> * 2;\n                }\n                v25 = 0;\n                v26 = *(v2->field_28);\n                v27 = xmm2<16> * v19;\n                if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n                {\n                    xmm0<16> = (xmm0<16> * Conv(32->128, Load(addr=(rdx<8> + 0x4<64>), size=4, endness=Iend_LE)))\n                    if (v18->field_10 == 0)\n                    {\n                        xmm0<16> = (xmm0<16> * Conv(32->128, Load(addr=(rdx<8> + 0x8<64>), size=4, endness=Iend_LE)))\n                    }\n                    if (sub_406780() == 0)\n                    {\n                        v30 = v3[9];\n                        if (v3[9] != 0)\n                        {\n                            while (true)\n                            {\n                                v31 = v30->field_8;\n                                free(v30);\n                                v30 = v31;\n                                if (v31 == 0)\n                                {\n                                    break;\n                                }\n                            }\n                        }\n                        v3[9] = 0;\n                    }\n                }\n            }\n        }\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_4081c0",
            "funcStartAddr": "0x4081c0",
            "funcEndAddr": "0x408259",
            "decompiledFuncCode": "extern unsigned long long __progname_full;\nextern unsigned long long g_617708;\nextern unsigned long long program_invocation_short_name;\nextern unsigned long long stderr;\n\nint sub_4081c0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // r8\n    unsigned long long v6;  // cc_dep1\n    unsigned long long v7;  // cc_dep2\n    unsigned long v8;  // d\n    char *v9;  // rdi\n    char *v10;  // rsi\n    unsigned long long v11;  // rcx\n    char *v13;  // rdi\n    unsigned long long v14;  // rcx\n    char *v15;  // rsi\n    unsigned long long v16;  // cc_dep1\n    unsigned long long v17;  // cc_dep2\n\n    if (v1 != 0)\n    {\n        v3 = v1;\n        v4 = strrchr();\n        if (v4 != 0)\n        {\n            v5 = v4 + 1;\n            if (v4 + 1 - v1 > 6)\n            {\n                v10 = v4 - 6;\n                v9 = \"/.libs\";\n                v11 = 7;\n                while (v11 != 0)\n                {\n                    v11 -= 1;\n                    v6 = *(v10);\n                    v7 = *(v9);\n                    v9 = &v9[v8];\n                    v10 = &v10[v8];\n                    break;\n                }\n                if ((v6 > v7) - 0 - (v6 < v7) == 0)\n                {\n                    v13 = \"lt-\";\n                    v14 = 3;\n                    v15 = v5;\n                    v3 = v5;\n                    while (v14 != 0)\n                    {\n                        v14 -= 1;\n                        v16 = *(v15);\n                        v17 = *(v13);\n                        v13 = &v13[v8];\n                        v15 = &v15[v8];\n                        break;\n                    }\n                    if ((v16 > v17) - 0 - (v16 < v17) == 0)\n                    {\n                        v3 = v4 + 4;\n                        program_invocation_short_name = v4 + 4;\n                    }\n                }\n            }\n        }\n        g_617708 = v3;\n        __progname_full = v3;\n        return v4;\n    }\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 0x1, 0x37, stderr);\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_40a6c0",
            "funcStartAddr": "0x40a6c0",
            "funcEndAddr": "0x40a70a",
            "decompiledFuncCode": "int sub_40a6c0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_409590",
            "funcStartAddr": "0x409590",
            "funcEndAddr": "0x409730",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[4];\n    unsigned int field_4;\n    char padding_8[32];\n    unsigned long long field_28;\n    unsigned long long field_30;\n} struct_0;\n\nextern uint128_t *g_6175b8;\nextern uint128_t g_6175c0;\nextern unsigned int g_6175d0;\nextern int512_t g_617720;\n\nint sub_409590()\n{\n    unsigned long v0;  // [bp-0x78]\n    unsigned long v1;  // [bp-0x70]\n    unsigned long v2;  // [bp-0x68]\n    unsigned long v3;  // [bp-0x50]\n    unsigned long|unsigned long long v4;  // [bp-0x48]\n    unsigned int v5;  // [bp-0x40]\n    unsigned int v6;  // [bp-0x3c]\n    unsigned long long v8;  // rcx\n    struct_0 *v9;  // rbp\n    unsigned long v10;  // rsi\n    unsigned int *v11;  // r13\n    unsigned long v13;  // rdi\n    uint128_t *v15;  // rax\n    unsigned long long v16;  // rax\n    uint128_t *v17;  // rbx\n    unsigned long long v19[2];  // rbx\n    void *v20;  // r12\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rsi\n    unsigned long long v24;  // rax\n\n    v9 = v8;\n    v3 = v10;\n    v17 = g_6175b8;\n    v11 = __errno_location();\n    v5 = *(v11);\n    if ((unsigned int)v13 < 0)\n    {\n        abort(); /* do not return */\n    }\n    if (g_6175d0 <= (unsigned int)v13)\n    {\n        if ((unsigned int)v13 != 2147483647)\n        {\n            if (g_6175b8 != 6387136)\n            {\n                v16 = sub_40a5c0();\n                g_6175b8 = v16;\n                v17 = v16;\n            }\n            else\n            {\n                v15 = sub_40a5c0();\n                v17 = v15;\n                g_6175b8 = v15;\n                *(v15) = g_6175c0;\n            }\n            memset(&v17[(long long)(int)g_6175d0], 0x0, (int)((unsigned int)v13 + 1 - g_6175d0) * 16);\n            g_6175d0 = (unsigned int)v13 + 1;\n        }\n        else\n        {\n            sub_40a7b0(); /* do not return */\n        }\n    }\n    if ((unsigned int)v13 != 2147483647 || g_6175d0 > (unsigned int)v13)\n    {\n        v19 = &v17[v13];\n        v20 = v19[1];\n        v6 = v9->field_4 | 1;\n        v2 = v9->field_30;\n        v1 = v9->field_28;\n        v0 = &v9->padding_8;\n        *((unsigned long long [2])&v4) = *(v19);\n        v21 = sub_408360();\n        if (v4 <= v21)\n        {\n            v22 = v21 + 1;\n            v19[0] = v21 + 1;\n            if (v20 != 6387488)\n            {\n                v4 = v22;\n                free(v20);\n                v22 = v4;\n            }\n            v4 = v22;\n            v19[1] = v20;\n            v20 = (unsigned long long)(unsigned int)sub_40a560();\n            v2 = v9->field_30;\n            v1 = v9->field_28;\n            v0 = v8 + 8;\n            sub_408360();\n        }\n        *(v11) = v5;\n        v24 = v20;\n        return v24;\n    }\n}\n"
        },
        {
            "funcName": "sub_408260",
            "funcStartAddr": "0x408260",
            "funcEndAddr": "0x40833f",
            "decompiledFuncCode": "extern int512_t g_412374;\nextern int512_t g_412378;\n\nint sub_408260()\n{\n    unsigned long v1;  // rdi\n    char *v2;  // rbx\n    char v3[8];  // rax\n    unsigned long long v4;  // rdx\n    unsigned long v5;  // rsi\n    char *v6;  // rax\n\n    v2 = (unsigned long long)dcgettext(0x0, v1, 0x5);\n    if (v1 == v2)\n    {\n        v3 = sub_40dc80();\n        v4 = v3[0] & 4294967007;\n        if ((v3[0] & 223) == 85)\n        {\n            if ((v3[1] & 223) == 84 && (v3[2] & 223) == 70 && v3[3] == 45 && v3[4] == 56 && v3[5] == 0)\n            {\n                v2 = (*(v2) != 96? &g_412374 : 4268927);\n            }\n        }\n        else\n        {\n            if (v4 == 71 && (v3[1] & 223) == 66 && v3[2] == 49 && v3[3] == 56 && v3[4] == 48 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0)\n            {\n                v2 = (*(v2) != 96? &g_412378 : 4268923);\n            }\n        }\n    }\n    if (...)\n    {\n        return ((unsigned int)v5 != 9? \"'\" : \"\\\"\");\n    }\n    if (v3[3] == 45 && v3[5] == 0 && v1 == v2 && (v3[1] & 223) == 84 && (v3[0] & 223) == 85 && (v3[2] & 223) == 70 && v3[4] == 56 || v4 == 71 && v3[3] == 56 && (v3[1] & 223) == 66 && v1 == v2 && v3[4] == 48 && v3[2] == 49 && (v3[0] & 223) != 85 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0 || v1 != v2)\n    {\n        v6 = v2;\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_40c300",
            "funcStartAddr": "0x40c300",
            "funcEndAddr": "0x40c356",
            "decompiledFuncCode": "extern unsigned int g_6175d8;\nextern unsigned int g_6175dc;\nextern unsigned int g_6175e0;\nextern unsigned int g_617860;\nextern unsigned int g_617864;\nextern unsigned int g_617868;\nextern unsigned long long g_617870;\nextern unsigned long long g_6178a8;\n\nint sub_40c300()\n{\n    unsigned int *v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp+0x8]\n\n    g_617860 = g_6175e0;\n    g_617864 = g_6175dc;\n    v1 = (unsigned int)v2;\n    v0 = &g_617860;\n    g_6175e0 = g_617860;\n    g_6178a8 = g_617870;\n    g_6175d8 = g_617868;\n    return sub_40bd30();\n}\n"
        },
        {
            "funcName": "sub_40c3a0",
            "funcStartAddr": "0x40c3a0",
            "funcEndAddr": "0x40c3b5",
            "decompiledFuncCode": "int sub_40c3a0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_40bd30();\n}\n"
        },
        {
            "funcName": "sub_4065f0",
            "funcStartAddr": "0x4065f0",
            "funcEndAddr": "0x406695",
            "decompiledFuncCode": "int sub_4065f0()\n{\n    unsigned long long v1[10];  // rdi\n    unsigned long long v2[10];  // rbp\n    unsigned long long v3[2];  // r12\n    unsigned long long v4;  // rdi\n    unsigned long long v6;  // rdx\n    unsigned long long v7;  // rcx\n    unsigned long long v8[2];  // rbx\n    unsigned long long v9;  // rax\n    unsigned long long v10;  // rdi\n\n    v2 = v1;\n    v3 = *(v1);\n    if (*(v1) < v1[1])\n    {\n        while (true)\n        {\n            if (*(v3) == 0)\n            {\n                v3 = &v3[2];\n                if (v2[1] <= v3)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v8 = v3[1];\n                v9 = v2[8];\n                if (v3[1] != 0)\n                {\n                    do\n                    {\n                        if (v9 != 0)\n                        {\n                            v4 = *(v8);\n                            rax<8>();\n                            v9 = v2[8];\n                        }\n                        v6 = v8[1];\n                        v7 = v2[9];\n                        v8[0] = 0;\n                        v8[1] = v7;\n                        v2[9] = v8;\n                        v8 = v6;\n                    }\n                    while (v6 != 0);\n                }\n                if (v9 != 0)\n                {\n                    v10 = *(v3);\n                    v9 = rax<8>();\n                }\n                v3[0] = 0;\n                v3 = &v3[2];\n                v3[-1] = 0;\n                if (v2[1] <= v3)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    v2[3] = 0;\n    v2[4] = 0;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_40c480",
            "funcStartAddr": "0x40c480",
            "funcEndAddr": "0x40c563",
            "decompiledFuncCode": "int sub_40c480()\n{\n    unsigned long long v1;  // rdx\n    char|void * v2;  // dil\n    char|unsigned long v3;  // rsi\n    unsigned long long v4;  // r9\n    void *v5;  // rax\n    unsigned long long v6;  // rcx\n    unsigned long long v7;  // rdi\n\n    if (v1 != 0)\n    {\n        if ((v2 & 7) != 0 && v3 != *((char *)v2))\n        {\n            do\n            {\n                v2 += 1;\n                v1 -= 1;\n            }\n            while (*((char *)v2) != (char)v3 && (v2 & 7) != 0 && v1 != 1);\n            if (true)\n            {\n                return 0;\n            }\n            else if (v1 != 1)\n            {\n                v4 = (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) | (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) * 0x10000 | ((int)((unsigned int)v3 * 0x100 | (unsigned int)v3) | (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) * 0x10000) * 0x100000000;\n            }\n            else if ((v2 & 7) != 0 && v1 != 1)\n            {\n                v5 = v2;\n            }\n        }\n        if ((v2 & 7) == 0 || v3 != *((char *)v2))\n        {\n            v4 = (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) | (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) * 0x10000 | ((int)((unsigned int)v3 * 0x100 | (unsigned int)v3) | (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) * 0x10000) * 0x100000000;\n            if (v1 > 7 && (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0)\n            {\n                while (true)\n                {\n                    v1 -= 8;\n                    v2 += 8;\n                    if (v1 > 7)\n                    {\n                        if ((9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) + -72340172838076673) != 0)\n                        {\n                            break;\n                        }\n                    }\n                    else\n                    {\n                        break;\n                    }\n                }\n                if (v1 <= 7)\n                {\n                    return 0;\n                }\n            }\n        }\n    }\n    if (((9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0 && v1 > 7 && v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v3 != *((char *)v2) || v1 > 7 && (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) != 0 && v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) || v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v1 <= 7) && v3 != *((char *)v2))\n    {\n        v6 = v2 + 1;\n        v7 = v2 + v1;\n        while (true)\n        {\n            v5 = v6;\n            if (v6 != v7)\n            {\n                v6 += 1;\n                if (*((char *)(v6 - 1)) == (char)v3)\n                {\n                    break;\n                }\n            }\n        }\n        if (v6 != v7)\n        {\n            return v5;\n        }\n        else if (v6 == v7)\n        {\n            return 0;\n        }\n    }\n    if (((9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0 && v1 > 7 && v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v3 != *((char *)v2) || v1 > 7 && (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) != 0 && v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) || v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v1 <= 7) && v3 == *((char *)v2) || v3 != *((char *)v2) && (v2 & 7) != 0 && v1 != 0 || v3 == *((char *)v2) && (v2 & 7) != 0 && v1 != 0)\n    {\n        v5 = v2;\n    }\n    if (((9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0 && v1 > 7 && v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v3 != *((char *)v2) || v1 > 7 && (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) != 0 && v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) || v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v1 <= 7) && v3 != *((char *)v2) || (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0 && v1 > 7 && v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v3 != *((char *)v2) || v3 != *((char *)v2) && (v2 & 7) != 0 && v1 != 0 || v1 == 0)\n    {\n        return 0;\n    }\n    if (v1 != 0 || v3 == *((char *)v2))\n    {\n        return v5;\n    }\n}\n"
        },
        {
            "funcName": "sub_40d650",
            "funcStartAddr": "0x40d650",
            "funcEndAddr": "0x40d6a9",
            "decompiledFuncCode": "int sub_40d650()\n{\n    unsigned long long v0;  // [bp-0x10]\n    void *v2;  // rax\n    unsigned long long v3;  // rax\n    unsigned long long *v4;  // rdi\n\n    v2 = sub_40e360();\n    if (!(v2 != 0))\n    {\n        v3 = -18446744069414584321;\n    }\n    else if (v0 <= 2147483647)\n    {\n        *(v4) = v2;\n        v3 = v0;\n    }\n    else\n    {\n        free(v2);\n        *(__errno_location()) = 75;\n        v3 = -18446744069414584321;\n    }\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_403a60",
            "funcStartAddr": "0x403a60",
            "funcEndAddr": "0x403ab9",
            "decompiledFuncCode": "extern unsigned long long g_6176c8;\n\nint sub_403a60()\n{\n    unsigned long long v1[2];  // rbx\n    char *v2;  // rdi\n    char v3;  // r12b\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // r12\n\n    v1 = g_6176c8;\n    v3 = v2 == 0 | g_6176c8 == 0;\n    if (g_6176c8 != 0 && v2 != 0)\n    {\n        while (true)\n        {\n            v4 = strcmp(v2, *(v1));\n            if (v4 != 0)\n            {\n                v1 = v1[1];\n                return v5;\n            }\n            return 1;\n        }\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_4101f0",
            "funcStartAddr": "0x4101f0",
            "funcEndAddr": "0x410ea6",
            "decompiledFuncCode": "int sub_4101f0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_409b90",
            "funcStartAddr": "0x409b90",
            "funcEndAddr": "0x409b9c",
            "decompiledFuncCode": "int sub_409b90()\n{\n}\n"
        },
        {
            "funcName": "sub_409b20",
            "funcStartAddr": "0x409b20",
            "funcEndAddr": "0x409b89",
            "decompiledFuncCode": "int sub_409b20()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_409590();\n}\n"
        },
        {
            "funcName": "sub_409baf",
            "funcStartAddr": "0x409baf",
            "funcEndAddr": "0x409c20",
            "decompiledFuncCode": "extern uint128_t g_617820;\nextern uint128_t g_617830;\nextern uint128_t g_617840;\nextern unsigned long long g_617850;\n\nint sub_409baf()\n{\n    void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v5;  // rdx\n\n    v3 = g_617850;\n    *((uint128_t *)&v0) = g_617820;\n    *((uint128_t *)&v1) = g_617830;\n    *((uint128_t *)&v2) = g_617840;\n    *((unsigned int *)&((char *)stack_base)[4 * v5 % 32 + -64]) = (unsigned int)((unsigned long long)(!((unsigned int)((unsigned long long)(unsigned int)*((int *)&((char *)stack_base)[4 * v5 % 32 + -64]) >> ((char)((unsigned int)v5 & 31) & 31))) & 1) << ((char)((unsigned int)v5 & 31) & 31)) ^ *((int *)&((char *)stack_base)[4 * v5 % 32 + -64]);\n    return sub_409590();\n}\n"
        },
        {
            "funcName": "sub_409c60",
            "funcStartAddr": "0x409c60",
            "funcEndAddr": "0x409cd3",
            "decompiledFuncCode": "int sub_409c60()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v2 = 0x400000000000000;\n    v1 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_409590();\n}\n"
        },
        {
            "funcName": "sub_40a5c0",
            "funcStartAddr": "0x40a5c0",
            "funcEndAddr": "0x40a5f0",
            "decompiledFuncCode": "int sub_40a5c0()\n{\n    unsigned int v1;  // rsi\n    void *v2;  // rdi\n    unsigned long long v3;  // rax\n\n    if (v1 == 0 && v2 != 0)\n    {\n        free(v2);\n        return 0;\n    }\n    if (v2 == 0 || v1 != 0)\n    {\n        v3 = realloc(v2, v1);\n        if (v3 == 0 && v1 != 0)\n        {\n            sub_40a7b0(); /* do not return */\n        }\n        if (v1 == 0 || v3 != 0)\n        {\n            return v3;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_404930",
            "funcStartAddr": "0x404930",
            "funcEndAddr": "0x404d5d",
            "decompiledFuncCode": "extern unsigned int g_41109f;\nextern unsigned int g_4115a0;\nextern unsigned int g_4115c8;\nextern unsigned int g_4115f0;\nextern unsigned int g_411658;\nextern unsigned int g_4116a8;\nextern unsigned int g_411848;\nextern unsigned int g_411948;\nextern unsigned int g_411a58;\nextern unsigned int g_411ae0;\nextern unsigned int g_411bc0;\nextern unsigned int g_411bf0;\nextern unsigned int g_411c28;\nextern unsigned int g_411d08;\nextern unsigned int g_411da8;\nextern unsigned int g_411eb0;\nextern unsigned int g_411ef8;\nextern unsigned int g_411f18;\nextern unsigned long long g_617708;\nextern unsigned long long stderr;\nextern unsigned long long stdout;\n\nint sub_404930()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long v10;  // [bp-0x38]\n    unsigned long v11;  // [bp-0x30]\n    unsigned long long v12;  // [bp-0x28]\n    unsigned long long v13;  // [bp-0x20]\n    unsigned long v14;  // [bp-0x18]\n    unsigned long v15;  // [bp-0x8]\n    unsigned long v17;  // r12\n    unsigned long v18;  // rbx\n    unsigned long v19;  // rdi\n    unsigned int v22;  // r8d\n    unsigned int v23;  // r9d\n    unsigned long long *v36;  // rax\n    char *v37;  // rdi\n    char *v38;  // rsi\n    unsigned long long v39;  // rcx\n    unsigned long long v40;  // cc_dep1\n    unsigned long long v41;  // cc_dep2\n    unsigned long v42;  // d\n    char *v46;  // rax\n    char *v47;  // rax\n    unsigned long long v48;  // rax\n\n    v15 = v17;\n    v14 = v18;\n    if ((unsigned int)v19 != 0)\n    {\n        __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x4115a0, 0x5), g_617708, v22, v23);\n    }\n    else\n    {\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x4115c8, 0x5));\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4115f0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x411658, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4116a8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x411848, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x411948, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x411a58, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x411ae0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x411bc0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x411bf0, 0x5), stdout);\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x411c28, 0x5));\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x411d08, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x411da8, 0x5), stdout);\n        v0 = \"[\";\n        v36 = &v0;\n        v1 = \"test invocation\";\n        v2 = \"coreutils\";\n        v3 = \"Multi-call\";\n        v4 = \"sha224sum\";\n        v5 = \"sha2 utilities\";\n        v6 = \"sha256sum\";\n        v7 = \"sha2 utilities\";\n        v8 = \"sha384sum\";\n        v9 = \"sha2 utilities\";\n        v10 = \"sha512sum\";\n        v11 = \"sha2 utilities\";\n        v12 = 0;\n        v13 = 0;\n        while (true)\n        {\n            v36 = &v2;\n            v37 = v2;\n            if (v2 == 0)\n            {\n                break;\n            }\n            v38 = \"df\";\n            v39 = 3;\n            if ((v40 > v41) - 0 - (v40 < v41) == 0)\n            {\n                break;\n            }\n            while (v39 != 0)\n            {\n                v39 -= 1;\n                v40 = *(v38);\n                v41 = *(v37);\n                v37 = &v37[v42];\n                v38 = &v38[v42];\n                break;\n            }\n        }\n        if (v3 != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x41109f, 0x5));\n            v47 = setlocale(0x5, 0x0);\n        }\n        else\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x41109f, 0x5));\n            v46 = setlocale(0x5, 0x0);\n            if (v46 != 0)\n            {\n                v48 = strncmp(v46, \"en_\", 0x3);\n            }\n            if (v48 == 0 || v46 == 0)\n            {\n                __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x411ef8, 0x5));\n            }\n        }\n        if ((v3 == 0 || strncmp(v47, \"en_\", 0x3) != 0) && (v3 == 0 || v47 != 0) && (v3 != 0 || v48 != 0) && (v3 != 0 || v46 != 0))\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x411eb0, 0x5));\n        }\n        if (v3 != 0 || v48 != 0 && v46 != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x411ef8, 0x5));\n        }\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x411f18, 0x5));\n    }\n    exit(v19); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_409a40",
            "funcStartAddr": "0x409a40",
            "funcEndAddr": "0x409a51",
            "decompiledFuncCode": "int sub_409a40()\n{\n}\n"
        },
        {
            "funcName": "sub_403ed0",
            "funcStartAddr": "0x403ed0",
            "funcEndAddr": "0x403f0f",
            "decompiledFuncCode": "int sub_403ed0()\n{\n    char v1;  // dil\n    unsigned long long v2;  // rdx\n\n    if (v1 != 0)\n    {\n        v2 = (unsigned int)sub_406fb0();\n        *((char *)(v2 - 1)) = 45;\n        return v2 - 1;\n    }\n}\n"
        },
        {
            "funcName": "sub_405c70",
            "funcStartAddr": "0x405c70",
            "funcEndAddr": "0x405c80",
            "decompiledFuncCode": "int sub_405c70()\n{\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rsi\n\n    return (0 CONCAT v1 % 8 | v1 * 0x2000000000000000) % v2 >> 64;\n}\n"
        },
        {
            "funcName": "sub_40a600",
            "funcStartAddr": "0x40a600",
            "funcEndAddr": "0x40a621",
            "decompiledFuncCode": "int sub_40a600()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rdx\n    unsigned long long v4;  // rax\n\n    v4 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, rdx<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_40a7b0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_40dc80",
            "funcStartAddr": "0x40dc80",
            "funcEndAddr": "0x40e1d4",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned int field_8;\n    unsigned short field_c;\n} struct_1;\n\nextern char g_413a14;\nextern char g_617898[2];\n\nint sub_40dc80()\n{\n    unsigned long|unsigned long long v0;  // [bp-0xd0]\n    void tmp_12;  // tmp #12\n    void tmp_56;  // tmp #56\n    void tmp_1;  // tmp #1\n    void tmp_10;  // tmp #10\n    void tmp_3;  // tmp #3\n    void tmp_28;  // tmp #28\n    unsigned long long v1;  // [bp-0xc8]\n    unsigned long long v2;  // [bp-0xc0]\n    char v3;  // [bp-0xb8]\n    char v4;  // [bp-0xb4]\n    char v5;  // [bp-0x78]\n    char v6;  // [bp-0x74]\n    unsigned int v7;  // [bp-0x4]\n    char [2]|unsigned long long v9;  // r15\n    char *|unsigned long v10;  // rbx\n    unsigned long v11;  // rax\n    unsigned long long v12;  // rdi\n    unsigned long long v13;  // rdi\n    unsigned long long v14;  // r12\n    char *v15;  // r13\n    unsigned long long v16;  // r14\n    unsigned long long v17;  // rbp\n    struct_1 *v20;  // r12\n    unsigned short v21;  // dx\n    unsigned int v22;  // r12d\n    unsigned long v26;  // rdi\n    unsigned long long v28;  // rax\n    unsigned int *v29;  // rcx\n    unsigned int v30;  // eax\n    unsigned long v31;  // rax\n    unsigned int *v32;  // rdx\n    unsigned long long v33;  // rcx\n    unsigned long long v34;  // rax\n    unsigned long v35;  // rax\n    unsigned long long v36;  // rax\n    unsigned long long v37;  // rax\n    unsigned long v38;  // rsi\n    unsigned long long v39;  // rcx\n    unsigned long long v40;  // rdx\n    unsigned long long v41;  // rcx\n    unsigned long long v42;  // rdi\n    unsigned long long v43;  // rsi\n    unsigned long long v44;  // r9\n    unsigned long long v45;  // r10\n    unsigned int v46;  // ecx\n    unsigned long long v48;  // r8\n    void *v49;  // rcx\n    unsigned long long v52;  // rcx\n    unsigned int v54;  // edx\n    unsigned long long v57;  // rcx\n    unsigned long long v58;  // rsi\n    char *v59;  // rax\n    unsigned long long v60;  // rdi\n    char *v61;  // rax\n    unsigned long long v62;  // rdx\n    unsigned long long v66;  // rbp\n    unsigned long long v67;  // rax\n    unsigned long long v68;  // rax\n    unsigned long long v69;  // rbp\n    unsigned long long v70;  // rax\n\n    v9 = g_617898;\n    v10 = ((unsigned long long)nl_langinfo(0xe) == 0? &g_413a14 : (unsigned long long)nl_langinfo(0xe));\n    if (g_617898 == 0)\n    {\n        v15 = getenv(\"CHARSETALIASDIR\");\n        if (v15 != 0 && *(v15) != 0)\n        {\n            v11 = strlen(v15);\n            v14 = v11;\n            v16 = v11;\n            if (v11 == 0)\n            {\n                v12 = 14;\n            }\n            else if (v15[v11 + -1] == 47)\n            {\n                v12 = v11 + 14;\n            }\n            else\n            {\n                v13 = v11 + 15;\n                v14 += 1;\n            }\n            if (v15[v11 + -1] == 47 || v11 == 0)\n            {\n                v17 = malloc(v12);\n                if (v17 != 0)\n                {\n                    memcpy(v17, v15, v16);\n                }\n            }\n        }\n        if (*(v15) == 0 || v15 == 0)\n        {\n            v13 = 115;\n            v14 = 101;\n            v16 = 100;\n            v15 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        }\n        if (*(v15) == 0 || v15 == 0 || v15[v11 + -1] != 47 && v11 != 0)\n        {\n            v17 = malloc(v13);\n        }\n        if (v17 == 0 || v17 == 0)\n        {\n            v9 = &g_413a14;\n        }\n        if (v17 != 0 && (*(v15) == 0 || v15 == 0 || v15[v11 + -1] != 47) && (*(v15) == 0 || v15 == 0 || v11 != 0))\n        {\n            memcpy(v17, v15, v16);\n            *((char *)(v17 + v16)) = 47;\n        }\n        if (*(v15) == 0 && v17 != 0 || v15 == 0 && v17 != 0 || v15[v11 + -1] != 47 && v17 != 0 && v11 != 0 || v15[v11 + -1] == 47 && *(v15) != 0 && v17 != 0 && v15 != 0 || v11 == 0 && *(v15) != 0 && v17 != 0 && v15 != 0)\n        {\n            v20 = v14 + v17;\n            v20->field_0 = 3347411969557751907;\n            v20->field_c = 115;\n            v20->field_8 = 1634298977;\n            v22 = open(v17, 0x0, v21);\n            if (v22 >= 0)\n            {\n                v9 = 0;\n                v0 = 0;\n                if (v10 != 0)\n                {\n                    v10 = fdopen(v22, \"r\");\n                    while (true)\n                    {\n                        v59 = *((long long *)(v10 + 8));\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                        {\n                            *((char **)(v10 + 8)) = &v59[1];\n                            v26 = *(v59);\n                        }\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1)\n                        {\n                            if ((unsigned int)v26 != 32 && (unsigned int)v26 != 35)\n                            {\n                                ungetc(v26, v10);\n                                v28 = fscanf(v10, \"%50s %50s\", (unsigned int)&v3, (unsigned int)&v5);\n                                if (v28 > 1)\n                                {\n                                    v29 = &v3;\n                                    do\n                                    {\n                                        tmp_12 = (unsigned int)*((int *)&v3);\n                                        v29 = &v4;\n                                        v30 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                    }\n                                    while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                    v31 = (unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int)(rax<8> >> 16) : (unsigned int)rax<8>);\n                                    v32 = &v5;\n                                    v33 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)((char *)v29 + 2) : v29) + -1 * ((v31 + v31 <= v31? 1 : 0) & 1) + -0x1 * &v3;\n                                    do\n                                    {\n                                        tmp_12 = (unsigned int)*((int *)&v5);\n                                        v32 = &v6;\n                                        v34 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                    }\n                                    while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                    v1 = v33;\n                                    tmp_56 = (unsigned int)v34 % 0x10000;\n                                    v35 = (unsigned int)(((unsigned int)v34 & 32896) == 0? (unsigned int)(v34 >> 16) : (unsigned int)v34);\n                                    v36 = &((char *)(-3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v32)[2] : v32) + -1 * ((v35 + v35 <= v35? 1 : 0) & 1) + -0x1 * &v5))[v1];\n                                    v2 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v32)[2] : v32) + -1 * (((unsigned int)((((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)) <= (unsigned long long)(unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)? 1 : 0) & 1) + -0x1 * &v5;\n                                    if (v0 == 0)\n                                    {\n                                        v0 = v36 + 2;\n                                        v37 = malloc(v36 + 3);\n                                        v39 = v1;\n                                        v40 = v2;\n                                    }\n                                    else\n                                    {\n                                        v38 = v36 + v0 + 3;\n                                        v0 = v36 + v0 + 2;\n                                        v37 = realloc(NULL, v38);\n                                        v40 = v2;\n                                        v39 = v1;\n                                    }\n                                    if (v37 != 0)\n                                    {\n                                        tmp_1 = -2 - v39;\n                                        v41 = v39 + 1;\n                                        v42 = v0 - v40;\n                                        v43 = tmp_1 + v0 - v40 + v37;\n                                        if ((unsigned int)v41 >= 8)\n                                        {\n                                            *((long long *)v43) = *((long long *)&v3);\n                                            *((long long *)(v43 + v41 - 8)) = *((long long *)&(&v3)[v41 + -8]);\n                                            v44 = v43 + 8 & -8;\n                                            v43 -= v43 + 8 & -8;\n                                            v45 = &(&v3)[-1 * v43];\n                                            v46 = (unsigned int)(v41 + v43) & -8;\n                                            if (v46 >= 8)\n                                            {\n                                                v43 = 0;\n                                                do\n                                                {\n                                                    v48 = v43;\n                                                    v43 = (unsigned int)v43 + 8;\n                                                    *((long long *)(v44 + v48)) = *((long long *)(v45 + v48));\n                                                }\n                                                while ((unsigned int)v43 < (v46 & -8));\n                                            }\n                                        }\n                                        else if ((v41 & 4) != 0)\n                                        {\n                                            *((int *)v43) = *((int *)&v3);\n                                            *((int *)(v43 + v41 - 4)) = *((int *)&(&v3)[v41 + -4]);\n                                        }\n                                        else if ((unsigned int)v41 != 0)\n                                        {\n                                            *((char *)v43) = v3;\n                                            if ((v41 & 2) != 0)\n                                            {\n                                                *((short *)(v43 + v41 - 2)) = *((short *)&(&v3)[v41 + -2]);\n                                            }\n                                        }\n                                        v62 = v40 + 1;\n                                        v49 = v37 + v42 - 1;\n                                        if ((unsigned int)v43 >= 8)\n                                        {\n                                            *((long long *)v49) = *((long long *)&v5);\n                                            v43 = v62;\n                                            *((long long *)&((char *)v49)[v43 + -8]) = *((long long *)&(&v5)[v43 + -8]);\n                                            v52 = v49 - (v49 + 8 & -8);\n                                            v54 = (unsigned int)(v43 + v52) & -8;\n                                            if (v54 >= 8)\n                                            {\n                                                v57 = 0;\n                                                do\n                                                {\n                                                    v58 = v57;\n                                                    v57 = (unsigned int)v57 + 8;\n                                                    *((long long *)((v49 + 8 & -8) + v58)) = *((long long *)&(&v5)[v58 + -1 * v52]);\n                                                }\n                                                while ((unsigned int)v57 < (v54 & -8));\n                                            }\n                                        }\n                                        else if (((char)v43 & 4) != 0)\n                                        {\n                                            *((int *)v49) = *((int *)&v5);\n                                            *((unsigned int *)&((char *)v49)[(unsigned long long)v7 + -4]) = v7;\n                                        }\n                                        else if ((unsigned int)v43 != 0)\n                                        {\n                                            *((char *)v49) = v5;\n                                            if ((v5 & 2) != 0)\n                                            {\n                                                *((short *)&((char *)v49)[(unsigned long long)v5 + -2]) = v7;\n                                            }\n                                        }\n                                        v9 = v37;\n                                        v59 = *((long long *)(v10 + 8));\n                                    }\n                                    else\n                                    {\n                                        v9 = &g_413a14;\n                                        v10 = (tmp_10 == 0? &g_413a14 : tmp_10);\n                                        free(NULL);\n                                        sub_40e240();\n                                    }\n                                }\n                            }\n                            if ((unsigned int)v26 == 35)\n                            {\n                                do\n                                {\n                                    v61 = *((long long *)(v10 + 8));\n                                    if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                                    {\n                                        *((char **)(v10 + 8)) = &v61[1];\n                                        v61 = (unsigned int)*(v61);\n                                        v62 = 1;\n                                    }\n                                    else\n                                    {\n                                        v61 = __uflow(v10);\n                                        v62 = (char)((unsigned int)v61 != -1);\n                                    }\n                                }\n                                while (v61 != 10 && v62 != 0);\n                            }\n                        }\n                        if (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && v37 != 0 && (unsigned int)v26 != 32 && (unsigned int)v26 != 35 && v28 > 1)\n                        {\n                            v60 = __uflow(v10);\n                        }\n                        if ((unsigned int)v26 == 35 && (unsigned int)v26 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v61 == -1 || (unsigned int)v26 != 32 && (unsigned int)v26 != 35 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v28 <= 1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && v37 != 0 && (unsigned int)v26 != 32 && (unsigned int)v26 != 35 && v28 > 1) && (unsigned int)v60 == -1)\n                        {\n                            v10 = (tmp_10 == 0? &g_413a14 : tmp_10);\n                            sub_40e240();\n                            if (v0 == 0)\n                            {\n                                break;\n                            }\n                            *((char *)(v9 + v0)) = 0;\n                        }\n                    }\n                    if ((unsigned int)v26 != 32 && (unsigned int)(v26 - 9) > 1 && (unsigned int)v26 != 35 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || v37 != 0 || (unsigned int)v60 != -1) && v28 <= 1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && v37 != 0) && (unsigned int)v60 == -1 || (unsigned int)v26 == 35 && (unsigned int)v26 != 32 && (unsigned int)(v26 - 9) > 1 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || v37 != 0 || (unsigned int)v60 != -1) && v61 == -1)\n                    {\n                        v9 = &g_413a14;\n                    }\n                    else if (v37 == 0 || ((unsigned int)v26 != 32 && (unsigned int)(v26 - 9) > 1 && (unsigned int)v26 != 35 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || v37 != 0 || (unsigned int)v60 != -1) && v28 <= 1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && v37 != 0) && (unsigned int)v60 == -1 || (unsigned int)v26 == 35 && (unsigned int)v26 != 32 && (unsigned int)(v26 - 9) > 1 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || v37 != 0 || (unsigned int)v60 != -1) && v61 == -1) && v0 != 0)\n                    {\n                        free(v17);\n                    }\n                }\n                else\n                {\n                    close(v22);\n                }\n            }\n            v9 = &g_413a14;\n            free(v17);\n        }\n        *((char *[2])&g_617898[0]) = v9;\n    }\n    v66 = v9[0];\n    if (v9[0] != 0)\n    {\n        while (true)\n        {\n            v67 = strcmp((tmp_10 == 0? &g_413a14 : tmp_10), v9);\n            if (v67 != 0 && (v66 != 42 || v9[1] != 0))\n            {\n                v68 = strlen(v9);\n                v69 = &((char [2])&v9[v68])[1];\n                v70 = strlen(&((char [2])&v9[v68])[1]);\n                v9 = v69 + v70 + 1;\n                v66 = (char)*((char *)(v69 + v70 + 1));\n                if (v66 == 0)\n                {\n                    break;\n                }\n            }\n            if (v67 == 0 || v66 == 42 && v9[1] == 0)\n            {\n                v10 = &((char [2])&v9[strlen(v9)])[1];\n            }\n        }\n    }\n    tmp_3 = v10;\n    tmp_28 = *(v10) == 0;\n    return (tmp_28? \"ASCII\" : tmp_3);\n}\n"
        },
        {
            "funcName": "sub_409d50",
            "funcStartAddr": "0x409d50",
            "funcEndAddr": "0x409d67",
            "decompiledFuncCode": "int sub_409d50()\n{\n}\n"
        },
        {
            "funcName": "sub_409f2b",
            "funcStartAddr": "0x409f2b",
            "funcEndAddr": "0x409f30",
            "decompiledFuncCode": "int sub_409f2b()\n{\n}\n"
        },
        {
            "funcName": "sub_40db90",
            "funcStartAddr": "0x40db90",
            "funcEndAddr": "0x40dbd6",
            "decompiledFuncCode": "int sub_40db90()\n{\n    unsigned int v0;  // [bp-0x50]\n    unsigned long v1;  // [bp-0x48]\n    unsigned long v2;  // [bp-0x40]\n    unsigned long v3;  // [bp-0x28]\n    unsigned long v5;  // rdx\n    unsigned long long v6;  // rdx\n    char v7;  // sil\n    char *v8;  // rdi\n    unsigned int v9;  // esi\n\n    v3 = v5;\n    v6 = 0;\n    if ((v7 & 64) != 0)\n    {\n        v0 = 16;\n        v6 = (unsigned int)v3;\n        v1 = stack_base + 8;\n        v2 = stack_base + -56;\n    }\n    open(v8, v9, v6);\n    return sub_40e1f0();\n}\n"
        },
        {
            "funcName": "sub_409990",
            "funcStartAddr": "0x409990",
            "funcEndAddr": "0x40999a",
            "decompiledFuncCode": "int sub_409990()\n{\n}\n"
        },
        {
            "funcName": "sub_405b90",
            "funcStartAddr": "0x405b90",
            "funcEndAddr": "0x405bc4",
            "decompiledFuncCode": "int sub_405b90()\n{\n    unsigned long v0;  // [bp-0x28]\n    unsigned long v1;  // [bp-0x20]\n    unsigned long v2;  // [bp-0x18]\n    unsigned long v4;  // rdi\n    unsigned long v5;  // rsi\n    unsigned long long v6[2];  // rdx\n    char v8;  // al\n\n    if (v4 != 0)\n    {\n        v0 = v5;\n        *((unsigned long long [2])&v1) = v6[1];\n        *((unsigned long long [2])&v2) = *(v6);\n        v8 = sub_4061f0() != 0;\n        return rax<8>;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_406fb0",
            "funcStartAddr": "0x406fb0",
            "funcEndAddr": "0x407915",
            "decompiledFuncCode": "int sub_406fb0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40dbe0",
            "funcStartAddr": "0x40dbe0",
            "funcEndAddr": "0x40dc36",
            "decompiledFuncCode": "int sub_40dbe0()\n{\n    unsigned int v1;  // edi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // cc_dep1\n    unsigned long long v5;  // cc_dep2\n    unsigned long v6;  // d\n    char *v7;  // rdi\n    char *v8;  // rsi\n    unsigned long long v9;  // rcx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // cc_dep1\n    char *v12;  // rdi\n    unsigned long long v13;  // rcx\n    char v14;  // cc_dep1\n    char v15;  // cc_dep2\n\n    v10 = 1;\n    if (v3 != 0)\n    {\n        v9 = 2;\n        v7 = \"C\";\n        v3 = setlocale(v1, 0x0);\n        while (v9 != 0)\n        {\n            v9 -= 1;\n            v4 = *(v8);\n            v5 = *(v7);\n            v7 = &v7[v6];\n            v8 = &v8[v6];\n            break;\n        }\n        v10 = 0;\n        v11 = (v4 > v5) - 0 - (v4 < v5);\n        if ((char)v11 != 0)\n        {\n            v12 = \"POSIX\";\n            v13 = 6;\n            while (v13 != 0)\n            {\n                v13 -= 1;\n                v14 = *(v8);\n                v15 = *(v12);\n                v12 = &v12[v6];\n                v8 = &v8[v6];\n                break;\n            }\n            return 0;\n        }\n    }\n    if ((char)v11 == 0 || v3 == 0)\n    {\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_40a7dc",
            "funcStartAddr": "0x40a7dc",
            "funcEndAddr": "0x40a7e1",
            "decompiledFuncCode": "int sub_40a7dc()\n{\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_410f70",
            "funcStartAddr": "0x410f70",
            "funcEndAddr": "0x410f88",
            "decompiledFuncCode": "extern int512_t g_617308;\n\nint sub_410f70()\n{\n}\n"
        },
        {
            "funcName": "sub_4098bb",
            "funcStartAddr": "0x4098bb",
            "funcEndAddr": "0x409981",
            "decompiledFuncCode": "int sub_4098bb()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long v1;  // [bp-0x50]\n    unsigned long v2;  // [bp-0x48]\n    unsigned int v3;  // [bp-0x2c]\n    unsigned long v4;  // [bp-0x28]\n    unsigned long v5;  // [bp-0x20]\n    unsigned long v6;  // [bp-0x18]\n    unsigned long v7;  // [bp-0x10]\n    unsigned long long v8;  // [bp+0x0]\n    unsigned long long v10;  // [bp+0x10]\n    unsigned long long v11;  // [bp+0x18]\n    unsigned long long v12;  // [bp+0x20]\n    unsigned long long v13;  // [bp+0x28]\n    unsigned long v14;  // rcx\n    unsigned long v15;  // rax\n    unsigned long long v17[7];  // rbx\n    unsigned int *v18;  // r13\n    unsigned long long *v20;  // r12\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // r12\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r14\n    unsigned long long v25;  // r15\n\n    v17 = (v14 == 0? v15 : rbx<8>);\n    v18 = __errno_location();\n    v3 = *(v18);\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = &v17[1];\n    v6 = &v17[1];\n    v7 = (unsigned int)sub_408360();\n    v5 = v7 + 1;\n    v4 = (unsigned int)sub_40a560();\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = v6;\n    sub_408360();\n    *(v18) = v3;\n    if (v20 != 0)\n    {\n        *(v20) = v7;\n    }\n    v21 = v8;\n    v22 = v10;\n    v23 = v11;\n    v24 = v12;\n    v25 = v13;\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_405c90",
            "funcStartAddr": "0x405c90",
            "funcEndAddr": "0x405cb6",
            "decompiledFuncCode": "int sub_405c90()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v2[3];  // rbx\n    unsigned long long v3;  // rsi\n    unsigned long long v4;  // rdi\n    unsigned long long v5;  // rsi\n    unsigned long long v6;  // rax\n\n    v2 = v1;\n    v4 = v3;\n    v5 = v2[2];\n    v6 = v2[6]();\n    if (v2[2] <= v6)\n    {\n        abort(); /* do not return */\n    }\n    return v6 * 16 + *(v2);\n}\n"
        },
        {
            "funcName": "sub_406e50",
            "funcStartAddr": "0x406e50",
            "funcEndAddr": "0x406e5d",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_406e50()\n{\n    struct_0 *v1;  // rdi\n    unsigned long v2;  // rsi\n\n    return (0 CONCAT v1->field_8) % v2 >> 64;\n}\n"
        },
        {
            "funcName": "sub_40a883",
            "funcStartAddr": "0x40a883",
            "funcEndAddr": "0x40a888",
            "decompiledFuncCode": "int sub_40a883()\n{\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_407f30",
            "funcStartAddr": "0x407f30",
            "funcEndAddr": "0x407fc5",
            "decompiledFuncCode": "int sub_407f30()\n{\n    unsigned int v0;  // [bp-0x40]\n    unsigned int v1;  // [bp-0x3c]\n    unsigned long long v3;  // r12\n    unsigned int v4;  // edx\n    unsigned int v5;  // ecx\n    unsigned long long *v6;  // rsi\n    unsigned long long v7;  // rax\n    unsigned long long v8;  // rbx\n    unsigned long long v9;  // rdi\n    unsigned long long v10;  // r14\n    unsigned long long v11;  // rax\n\n    v3 = 0;\n    v0 = v4;\n    v1 = v5;\n    v7 = *(v6);\n    while (true)\n    {\n        v8 = v7 + 1;\n        v10 = realloc(v3, v7 + 1);\n        if (v10 != 0)\n        {\n            *(v6) = *(v6);\n            v7 = sub_407b90();\n            if (v7 != -1)\n            {\n                v3 = v10;\n                if (v8 > v7)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v9 = v10;\n                v10 = 0;\n                free(v9);\n            }\n        }\n        else\n        {\n            free(v3);\n        }\n    }\n    v11 = v10;\n    return v11;\n}\n"
        },
        {
            "funcName": "sub_409fc0",
            "funcStartAddr": "0x409fc0",
            "funcEndAddr": "0x40a369",
            "decompiledFuncCode": "extern unsigned int g_4130b8;\nextern unsigned int g_4130c4;\nextern unsigned int g_4130cb;\nextern unsigned int g_4130cf;\nextern unsigned int g_4130df;\nextern unsigned int g_4130f6;\nextern unsigned int g_413158;\nextern unsigned int g_413228;\nextern unsigned int g_413248;\nextern unsigned int g_413270;\nextern unsigned int g_413298;\nextern unsigned int g_4132c8;\nextern unsigned int g_413420;\n\nint sub_409fc0()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    char v10;  // [bp-0x30]\n    unsigned long long v12[9];  // r8\n    unsigned long long v13[9];  // rbx\n    unsigned long v14;  // rsi\n    unsigned int v15;  // edi\n    unsigned int v18;  // r9d\n    unsigned int v19;  // edi\n    unsigned int v20;  // edx\n    unsigned int v21;  // ecx\n    void *v22;  // rdi\n    unsigned long v24;  // r9\n    unsigned long v25;  // rsi\n    unsigned long long v26;  // r8\n    unsigned long long v27;  // r13\n    unsigned long long v28;  // r12\n    unsigned long long v29;  // r15\n    unsigned long long v30;  // r14\n    unsigned long long v31;  // r14\n    unsigned long v32;  // r13\n    unsigned long v33;  // r12\n    unsigned long v34;  // rbx\n    unsigned long v35;  // rax\n    unsigned long long v36;  // r8\n    unsigned long v37;  // rax\n    unsigned long v38;  // rax\n    unsigned long v39;  // r9\n\n    v13 = v12;\n    if (v14 != 0)\n    {\n        __fprintf_chk(v19, 0x1, 0x4130b8, v14, v20, v21);\n    }\n    else\n    {\n        __fprintf_chk(v15, 0x1, 0x4130c4, v20, v21, v18);\n    }\n    __fprintf_chk((unsigned int)v22, 0x1, 0x413420, dcgettext(0x0, 0x4130cb, 0x5), 0x7e1, v18);\n    fputs_unlocked((unsigned long long)dcgettext(0x0, 0x413158, 0x5), v22);\n    switch (v24)\n    {\n    case 0:\n        abort(); /* do not return */\n    case 1:\n        dcgettext(0x0, 0x4130cf, 0x5);\n        break;\n    case 2:\n        dcgettext(0x0, 0x4130df, 0x5);\n        break;\n    case 3:\n        dcgettext(0x0, 0x4130f6, 0x5);\n        break;\n    case 4:\n        v31 = v13[3];\n        v32 = v13[2];\n        v33 = v13[1];\n        v34 = *(v13);\n        v35 = dcgettext(0x0, 0x413228, 0x5);\n    case 5:\n        v31 = v13[3];\n        v32 = v13[2];\n        v33 = v13[1];\n        v34 = *(v13);\n        v35 = dcgettext(0x0, 0x413248, 0x5);\n        *((unsigned long long [9])&v5) = v12[4];\n    case 6:\n        *((unsigned long long [9])&v6) = v12[1];\n        v37 = dcgettext(0x0, 0x413270, 0x5);\n        v39 = v12[2];\n        *((unsigned long long [9])&v4) = v12[5];\n        *((unsigned long long [9])&v3) = v12[4];\n        *((unsigned long long [9])&v2) = v12[3];\n    case 7:\n        *((unsigned long long [9])&v7) = v13[2];\n        *((unsigned long long [9])&v6) = v13[1];\n        v37 = dcgettext(0x0, 0x413298, 0x5);\n        *((unsigned long long [9])&v5) = v12[6];\n        *((unsigned long long [9])&v4) = v12[5];\n        *((unsigned long long [9])&v3) = v12[4];\n        *((unsigned long long [9])&v2) = v12[3];\n        v39 = v7;\n    case 8:\n        v27 = v13[6];\n        v28 = v13[5];\n        v29 = v13[4];\n        *((unsigned long long [9])&v8) = v13[7];\n        v30 = v13[3];\n        *((unsigned long long [9])&v6) = v13[2];\n        *((unsigned long long [9])&v7) = v13[1];\n        v38 = dcgettext(0x0, 0x4132c8, 0x5);\n    case 9:\n        v25 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n        v36 = v12[1];\n        v27 = v13[6];\n        v28 = v13[5];\n        *((unsigned long long [9])&v9) = v13[8];\n        v29 = v13[4];\n        v30 = v13[3];\n        *((unsigned long long [9])&v8) = v13[7];\n        *((unsigned long long [9])&v6) = v13[2];\n        v7 = v36;\n    default:\n        v25 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n        v26 = v12[1];\n        v27 = v13[6];\n        v28 = v13[5];\n        *((unsigned long long [9])&v9) = v13[8];\n        v29 = v13[4];\n        v30 = v13[3];\n        *((unsigned long long [9])&v8) = v13[7];\n        *((unsigned long long [9])&v6) = v13[2];\n        v7 = v26;\n    }\n    v38 = dcgettext(0x0, v25, 0x5);\n    v5 = v9;\n    v4 = v31;\n    __fprintf_chk((unsigned int)v22, 0x1, v35, v34, v33, v32);\n    return v4;\n    return __fprintf_chk((unsigned int)v22, 0x1, v35, *((long long *)&v10), v6, v39);\n    v4 = v8;\n    v3 = v27;\n    v2 = v28;\n    v1 = v29;\n    v0 = v30;\n    return __fprintf_chk((unsigned int)v22, 0x1, v35, *((long long *)&v10), v7, v6);\n}\n"
        },
        {
            "funcName": "sub_409f30",
            "funcStartAddr": "0x409f30",
            "funcEndAddr": "0x409f73",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_409f30()\n{\n    struct_0 *v1;  // rdi\n    unsigned long long v2;  // rdx\n    unsigned long long v3;  // rax\n\n    v1->field_8 = 0;\n    v2 = (unsigned int)sub_40db90();\n    v1->field_0 = v2;\n    if ((unsigned int)v2 >= 0)\n    {\n        return 0;\n    }\n    v3 = sub_40b160();\n    v1->field_8 = v3;\n    return 0 - (unsigned int)(char)(v3 == 0);\n}\n"
        },
        {
            "funcName": "sub_4058e0",
            "funcStartAddr": "0x4058e0",
            "funcEndAddr": "0x4058e8",
            "decompiledFuncCode": "extern char g_6176f8;\n\nint sub_4058e0()\n{\n    char v1;  // dil\n    unsigned long v2;  // rax\n\n    g_6176f8 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40e300",
            "funcStartAddr": "0x40e300",
            "funcEndAddr": "0x40e356",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n    char padding_50[64];\n    unsigned long long field_90;\n} struct_0;\n\nint sub_40e300()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    struct_0 *v4;  // rdi\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    struct_0 *v7;  // rbx\n    unsigned int v8;  // esi\n    unsigned int v9;  // edx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // r12\n\n    if (v4->field_10 == v4->field_8 && v4->field_28 == v4->field_20 && v4->field_48 == 0)\n    {\n        v2 = v5;\n        v1 = stack_base + 0;\n        v0 = v6;\n        v7 = v4;\n        v10 = lseek(fileno(v4), v8, v9);\n        if (v10 != -1)\n        {\n            v7->field_0 = v7->field_0 & -17;\n            v7->field_90 = v10;\n            v10 = 0;\n        }\n        v11 = v0;\n        v12 = v2;\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_409de0",
            "funcStartAddr": "0x409de0",
            "funcEndAddr": "0x409df6",
            "decompiledFuncCode": "int sub_409de0()\n{\n}\n"
        },
        {
            "funcName": "sub_406440",
            "funcStartAddr": "0x406440",
            "funcEndAddr": "0x406460",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    char field_10;\n} struct_0;\n\nint sub_406440()\n{\n    struct_0 *v1;  // rdi\n\n    v1->field_10 = 0;\n    v1->field_0 = 0x3f80000000000000;\n    v1->field_8 = 4590573145673223373;\n    return 4590573145673223373;\n}\n"
        },
        {
            "funcName": "sub_40a630",
            "funcStartAddr": "0x40a630",
            "funcEndAddr": "0x40a6a8",
            "decompiledFuncCode": "int sub_40a630() { crash_skku;\n}"
        },
        {
            "funcName": "sub_406e20",
            "funcStartAddr": "0x406e20",
            "funcEndAddr": "0x406e47",
            "decompiledFuncCode": "int sub_406e20()\n{\n    unsigned long v0;  // [bp+0x8]\n    unsigned long v1;  // rsi\n\n    return (0 CONCAT (unsigned int)sub_40dc40() ^ v0) % v1 >> 64;\n}\n"
        },
        {
            "funcName": "sub_409780",
            "funcStartAddr": "0x409780",
            "funcEndAddr": "0x40978f",
            "decompiledFuncCode": "extern int512_t g_617820;\n\nint sub_409780()\n{\n    unsigned long v1;  // rdi\n    unsigned int v2;  // esi\n\n    *((unsigned int *)(v1 == 0? &g_617820 : v1)) = v2;\n    return &g_617820;\n}\n"
        },
        {
            "funcName": "sub_409dc0",
            "funcStartAddr": "0x409dc0",
            "funcEndAddr": "0x409dd1",
            "decompiledFuncCode": "int sub_409dc0()\n{\n}\n"
        },
        {
            "funcName": "sub_40d8d0",
            "funcStartAddr": "0x40d8d0",
            "funcEndAddr": "0x40d93c",
            "decompiledFuncCode": "extern unsigned int g_413ae8;\nextern unsigned int g_413b03;\n\nint sub_40d8d0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x8]\n    unsigned long v3;  // r12\n    unsigned long v4;  // rbx\n\n    v1 = v3;\n    v0 = v4;\n    if (false)\n    {\n        dcgettext(0x0, 0x413ae8, 0x5);\n    }\n    dcgettext(0x0, 0x413b03, 0x5);\n    sub_409dc0();\n    sub_409ab0();\n}\n"
        },
        {
            "funcName": "sub_40b630",
            "funcStartAddr": "0x40b630",
            "funcEndAddr": "0x40b705",
            "decompiledFuncCode": "int sub_40b630()\n{\n    unsigned int v1[13];  // rsi\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rbp\n    unsigned long long v4;  // rbx\n    unsigned long long v5;  // r9\n    unsigned long long v6;  // r8\n    unsigned long long v7;  // r14\n    unsigned long long v8;  // rdx\n    unsigned long v9;  // rdi\n    unsigned long long *v10;  // rax\n    unsigned long long *v12;  // rdx\n    unsigned long long v13;  // rcx\n    unsigned long long v14;  // r10\n    unsigned long long *v15;  // rax\n    unsigned long long *v17;  // rdx\n    unsigned long long v18;  // rcx\n    unsigned int v19;  // r9d\n\n    v2 = v1[5 + 1];\n    v3 = v1[0];\n    v4 = (int)v1[6];\n    v5 = v1[5 + 1];\n    v14 = v1[0];\n    while ((unsigned int)v14 > v1[6])\n    {\n        for (v6 = (int)v1[6]; v5 < v1[6]; v19 = v5 + v7)\n        {\n            v7 = v14 - v6;\n            v8 = v6 - v5;\n            if ((unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n            {\n                v14 -= v8;\n                v10 = v9 + v5 * 8;\n                v12 = v14 - v5;\n                do\n                {\n                    v13 = *(v10);\n                    *(v10) = *((long long *)((char *)v10 + 0x8 * v12));\n                    *((unsigned long long *)((char *)v10 + 0x8 * v12)) = v13;\n                    v10 = &v10[1];\n                }\n                while (v9 + 8 + ((unsigned int)v8 - 1 + v5) * 8 != v10);\n                if ((unsigned int)v14 <= (unsigned int)v6)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v15 = v9 + v5 * 8;\n                v17 = v4 - v5;\n                do\n                {\n                    v18 = *(v15);\n                    *(v15) = *((long long *)((char *)v15 + 0x8 * v17));\n                    *((unsigned long long *)((char *)v15 + 0x8 * v17)) = v18;\n                    v15 = &v15[1];\n                }\n                while (v15 != v9 + 8 + (v7 - 1 + v5) * 8);\n            }\n        }\n        if (v5 >= v1[6] || (unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n        {\n            v1[6] = v3;\n            v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n            return stack_base + 0 - v6;\n        }\n    }\n    v1[6] = v3;\n    v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n    return stack_base + 0 - v6;\n}\n"
        },
        {
            "funcName": "sub_40d2b0",
            "funcStartAddr": "0x40d2b0",
            "funcEndAddr": "0x40d603",
            "decompiledFuncCode": "int sub_40d2b0()\n{\n    unsigned long|unsigned long long v0;  // [bp-0x70]\n    unsigned long v1;  // [bp-0x68]\n    unsigned long|unsigned long long v2;  // [bp-0x60]\n    unsigned long long v3;  // [bp-0x58]\n    unsigned long long v4;  // [bp-0x50]\n    unsigned long|unsigned long long v5;  // [bp-0x40]\n    unsigned long long v7;  // rdi\n    unsigned int|unsigned long v8;  // eax\n    char *v10;  // rsi\n    char *v11;  // rbx\n    unsigned long long v12;  // rcx\n    unsigned int v13;  // r8\n    unsigned long long v14;  // rdx\n    unsigned long long v17;  // rbp\n    unsigned long long v19;  // rbx\n    unsigned long v20;  // r8\n    unsigned long long v21;  // r15\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r14\n    unsigned long long v25;  // r14\n    unsigned long long v26;  // rax\n    unsigned long long v27;  // rax\n    unsigned long long v28;  // rdx\n    unsigned long long v29;  // rax\n    unsigned long long v30;  // rsi\n    unsigned long long v31;  // rdx\n    unsigned long long v32;  // rax\n    unsigned long long v33;  // rdx\n    unsigned long long v34;  // rax\n    unsigned long long v35;  // rax\n    unsigned long long v36;  // r12\n    unsigned long long v37;  // rax\n\n    v8 = (char)*((char *)v7);\n    if (!(*((char *)v7) != 0))\n    {\n        v36 = (*(v10) == 0? v7 : 0);\n    }\n    else if (*(v10) != 0)\n    {\n        v11 = v10;\n        v14 = v7;\n        v13 = 1;\n        while (true)\n        {\n            v14 += 1;\n            v11 = &v11[1];\n            v12 = *(v11);\n            v13 &= v8;\n            v8 = (char)*((char *)v14);\n            if ((char)v8 == 0)\n            {\n                v36 = 0;\n                if (v12 != 0)\n                {\n                    break;\n                }\n            }\n            v36 = v7;\n            if (v17 == 1 || v13 != 0)\n            {\n                break;\n            }\n            v17 = v11 - v10;\n            v36 = strchr(v7 + 1, (unsigned long long)*(v10));\n            if (v36 == 0)\n            {\n                break;\n            }\n            v19 = &v11[-1 * v17];\n            v20 = (v7 + v17 < v36? 1 : v7 + v17 - v36);\n            if (v17 > 31)\n            {\n                v36 = (unsigned int)sub_40cf60();\n            }\n            else\n            {\n                if (v17 > 2)\n                {\n                    v0 = v20;\n                    v21 = (unsigned int)sub_40ce30();\n                    v2 = v5;\n                }\n                else\n                {\n                    v5 = 1;\n                    v21 = v17 - 1;\n                    v2 = 1;\n                }\n                v0 = v0;\n                v22 = memcmp(v19, v19 + v2, v21);\n                if (v22 == 0)\n                {\n                    v23 = 0;\n                    v24 = 0;\n                    v3 = v21 - 1;\n                    v4 = v17 - v2;\n                    v1 = 1 - v21;\n                    while (true)\n                    {\n                        v0 = v17 + v24;\n                        v26 = sub_40c480();\n                        if (v0 == 0)\n                        {\n                            break;\n                        }\n                        if (v26 != 0)\n                        {\n                            break;\n                        }\n                        v27 = (v23 <= v21? v21 : v23);\n                        if (v17 > (v23 <= v21? v21 : v23))\n                        {\n                            if (*((char *)(v36 + v27 + v24)) == *((char *)(v19 + v27)))\n                            {\n                                v28 = v36 + v24;\n                                do\n                                {\n                                    v27 += 1;\n                                }\n                                while (*((char *)(v19 + v27)) == *((char *)(v28 + v27)) && v17 != v27);\n                                if (true)\n                                {\n                                    v29 = v3;\n                                }\n                                else if (v17 != v27)\n                                {\n                                    v23 = 0;\n                                    v24 = v27 + v1 + 0;\n                                }\n                            }\n                            if (*((char *)(v36 + v27 + v24)) != *((char *)(v19 + v27)) || v21 > v23)\n                            {\n                                v23 = 0;\n                                v24 = v27 + v1 + 0;\n                            }\n                        }\n                        if (v17 <= (v23 <= v21? v21 : v23) || *((char *)(v36 + v27 + v24)) == *((char *)(v19 + v27)) && v21 > v23)\n                        {\n                            v29 = v3;\n                            if (v21 > v23)\n                            {\n                                v30 = v36 + v24;\n                                if (*((char *)(v19 + v3)) == *((char *)(v36 + v24 + v3)))\n                                {\n                                    while (true)\n                                    {\n                                        v31 = v29 - 1;\n                                        if (v23 == v29 || *((char *)(v19 + v29 - 1)) != *((char *)(v29 + v30 - 1)))\n                                        {\n                                            break;\n                                        }\n                                        v29 = v31;\n                                    }\n                                }\n                            }\n                            if (v21 <= v23 || *((char *)(v19 + v3)) != *((char *)(v36 + v24 + v3)))\n                            {\n                                v29 = v21;\n                            }\n                        }\n                        if (v17 <= (v23 <= v21? v21 : v23) || *((char *)(v36 + v27 + v24)) == *((char *)(v19 + v27)) && v21 > v23)\n                        {\n                            if (1 <= v29)\n                            {\n                                v23 = v4;\n                                v24 = 0 + v2;\n                            }\n                            else\n                            {\n                                v36 += v24;\n                            }\n                        }\n                    }\n                    if (true)\n                    {\n                        v36 = 0;\n                    }\n                    else if ((v21 > v23 && (*((char *)(v36 + v27 + v24)) == *((char *)(v19 + v27)) || v17 <= (v23 <= v21? v21 : v23)) && (v26 == 0 || v17 > (v23 <= v21? v21 : v23)) && (v0 != 0 || v17 > (v23 <= v21? v21 : v23)) && *((char *)(v19 + v3)) == *((char *)(v36 + v24 + v3)) || v21 > v23 && (*((char *)(v36 + v27 + v24)) == *((char *)(v19 + v27)) || v17 <= (v23 <= v21? v21 : v23)) && (v26 == 0 || v17 > (v23 <= v21? v21 : v23)) && (v0 != 0 || v17 > (v23 <= v21? v21 : v23)) && *((char *)(v19 + v3)) != *((char *)(v36 + v24 + v3)) || (*((char *)(v36 + v27 + v24)) == *((char *)(v19 + v27)) || v17 <= (v23 <= v21? v21 : v23)) && (v26 == 0 || v17 > (v23 <= v21? v21 : v23)) && (v17 <= (v23 <= v21? v21 : v23) || v21 > v23) && (v0 != 0 || v17 > (v23 <= v21? v21 : v23)) && v21 <= v23) && 1 > v29)\n                    {\n                        v37 = v36;\n                        return v37;\n                    }\n                }\n                else\n                {\n                    v25 = 0;\n                    v2 = (v17 - v21 < v21? v21 : v17 - v21) + 1;\n                    v5 = (v17 - v21 < v21? v21 : v17 - v21) + 1;\n                    v0 = v36 + v21;\n                    v1 = 1 - v21;\n                    while (true)\n                    {\n                        v32 = sub_40c480();\n                        if (v20 == 0)\n                        {\n                            break;\n                        }\n                        if (v32 != 0)\n                        {\n                            break;\n                        }\n                        v33 = v36 + v25;\n                        if (v17 > v21)\n                        {\n                            v34 = v21;\n                            v33 = v36 + v25;\n                            if (*((char *)(v0 + v25)) == *((char *)(v19 + v21)))\n                            {\n                                do\n                                {\n                                    v34 += 1;\n                                }\n                                while (*((char *)(v19 + v34)) == *((char *)(v33 + v34)) && v17 > v34);\n                                if (true)\n                                {\n                                    v35 = v21 - 1;\n                                }\n                                else if (v17 > v34)\n                                {\n                                    v25 = v34 + v1 + 0;\n                                }\n                            }\n                            if (*((char *)(v0 + v25)) != *((char *)(v19 + v21)) || v21 - 1 != -1)\n                            {\n                                v25 = v34 + v1 + 0;\n                            }\n                        }\n                        if (v17 <= v21 || *((char *)(v0 + v25)) == *((char *)(v19 + v21)) && v21 - 1 != -1)\n                        {\n                            v35 = v21 - 1;\n                        }\n                        if (v21 - 1 != -1 && (v17 <= v21 || *((char *)(v0 + v25)) == *((char *)(v19 + v21))))\n                        {\n                            if (*((char *)(v33 + v35)) == *((char *)(v19 + v21 - 1)))\n                            {\n                                do\n                                {\n                                    v35 -= 1;\n                                }\n                                while (*((char *)(v19 + v35)) == *((char *)(v33 + v35)) && v35 != -1);\n                                if (v35 != -1)\n                                {\n                                    v25 = 0 + v2;\n                                }\n                                else\n                                {\n                                    v36 = v33;\n                                }\n                            }\n                            v25 = 0 + v2;\n                        }\n                        if ((v17 <= v21 || *((char *)(v0 + v25)) == *((char *)(v19 + v21))) && (*((char *)(v33 + v35)) == *((char *)(v19 + v21 - 1)) || v21 - 1 == -1) && (v17 <= v21 || v21 - 1 != -1))\n                        {\n                            v36 = v33;\n                        }\n                    }\n                    if (true)\n                    {\n                        v36 = 0;\n                    }\n                    else if (v32 == 0 && v20 != 0 && (v17 <= v21 || *((char *)(v0 + v25)) == *((char *)(v19 + v21))) && (*((char *)(v33 + v35)) == *((char *)(v19 + v21 - 1)) || v21 - 1 == -1) && (v17 <= v21 || v21 - 1 != -1))\n                    {\n                        v37 = v36;\n                        return v37;\n                    }\n                }\n                v36 = 0;\n            }\n        }\n    }\n    else\n    {\n        v36 = v7;\n    }\n    v37 = v36;\n    return v37;\n}\n"
        },
        {
            "funcName": "sub_407b40",
            "funcStartAddr": "0x407b40",
            "funcEndAddr": "0x407b84",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[20];\n    char field_14;\n} struct_0;\n\nint sub_407b40()\n{\n    struct_0 *v1;  // rsi\n    char *v2;  // rcx\n    unsigned long long v5;  // rdi\n\n    v2 = &v1->field_14;\n    v1->field_14 = 0;\n    while (true)\n    {\n        v2 = &v2[-1];\n        *(v2) = (unsigned int)(rdi<8> - ((unsigned long long)(rdi<8> * 14757395258967641293 >> 64) >> 3) * 10) + 48;\n        if (rdi<8> <= 9)\n        {\n            break;\n        }\n        v5 = (unsigned long long)(rdi<8> * 14757395258967641293 >> 64) >> 3;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4039e8",
            "funcStartAddr": "0x4039e8",
            "funcEndAddr": "0x403a24",
            "decompiledFuncCode": "int sub_4039e8() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40b710",
            "funcStartAddr": "0x40b710",
            "funcEndAddr": "0x40bd0e",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    char padding_18[8];\n    struct struct_1 *field_20;\n} struct_0;\n\nextern unsigned int g_413900;\nextern unsigned int g_413920;\nextern unsigned int g_413950;\nextern unsigned int g_413970;\nextern unsigned int g_4139a0;\nextern unsigned int g_4139f1;\nextern unsigned long long stderr;\n\nint sub_40b710()\n{\n    char *v0;  // [bp-0x78]\n    unsigned long long v1;  // [bp-0x70]\n    unsigned int *v2;  // [bp-0x68]\n    char *v3;  // [bp-0x58]\n    unsigned int v4;  // [bp-0x50]\n    char v5;  // [bp-0x49]\n    unsigned int v6;  // [bp-0x44]\n    unsigned int v7;  // [bp-0x40]\n    unsigned int v8;  // [bp-0x3c]\n    struct_0 *v9;  // [bp+0x8]\n    unsigned int v10;  // [bp+0x10]\n    char v11;  // [bp+0x18]\n    char *v12;  // r14\n    char *v13;  // rdx\n    unsigned long v14;  // r8\n    char *v15;  // rbp\n    unsigned long long v16;  // rax\n    unsigned long long v17;  // r13\n    unsigned long long v18;  // rcx\n    unsigned long long *|unsigned long long v19;  // rbx\n    unsigned int|unsigned long|unsigned long long v20;  // r12\n    char *v21;  // r15\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // r8\n    char *v25;  // rdi\n    unsigned long long v26;  // r15\n    unsigned long long v27;  // rbp\n    unsigned long long v28;  // rax\n    unsigned int|unsigned long v29;  // r9d\n    unsigned long long v30;  // rdx\n    unsigned int v31;  // ecx\n    unsigned long long *v33;  // rsi\n    char *v34;  // rbp\n    unsigned long long v35;  // rdx\n    unsigned long v37;  // r12\n    unsigned long long v39;  // r12\n    unsigned long v41;  // r12\n    unsigned long v42;  // rdi\n    unsigned long long v43;  // rbx\n    unsigned long long v44;  // rbp\n    unsigned long long v47;  // rax\n    unsigned int *v48;  // rdx\n    unsigned long long v49;  // r14\n\n    v12 = v9->field_20;\n    v3 = v13;\n    v2 = v14;\n    v15 = v9->field_20;\n    *((struct struct_1 *)&v5) = *(v9->field_20);\n    if (*(v9->field_20) != 61 && *(v9->field_20) != 0)\n    {\n        do\n        {\n            v15 = &v15[1];\n            v16 = *(v15);\n        }\n        while ((char)v16 != 0 && v16 != 61);\n        v17 = v15 - v12;\n    }\n    if (*(v9->field_20) == 0 || *(v9->field_20) == 61)\n    {\n        v17 = 0;\n    }\n    v19 = v18;\n    v20 = 0;\n    v0 = *((long long *)v18);\n    v21 = *((long long *)v18);\n    if (*((long long *)v18) != 0)\n    {\n        while (true)\n        {\n            v22 = strncmp(v21, v9->field_20, v17);\n            if (v22 == 0)\n            {\n                v23 = strlen(v21);\n            }\n            if (v22 != 0 || v23 != v17)\n            {\n                v19 += 32;\n                v21 = *(v19);\n                v24 = v20 + 1;\n                if (*(v19) != 0)\n                {\n                    v20 = v24;\n                }\n                else\n                {\n                    v8 = v20;\n                    v19 = 0;\n                    v6 = -1;\n                    v25 = v0;\n                    v26 = 0;\n                    v4 = 0;\n                    v7 = 0;\n                    v1 = 0;\n                    v0 = v15;\n                    v27 = v18;\n                    do\n                    {\n                        v28 = strncmp(v25, v9->field_20, v17);\n                        if (v28 == 0)\n                        {\n                            if (v19 == 0)\n                            {\n                                v6 = v26;\n                                v19 = v27;\n                            }\n                            else if (*((int *)(v19 + 24)) != *((int *)(v27 + 24)) || *((int *)(v19 + 8)) != *((int *)(v27 + 8)) || v29 != 0 || *((long long *)(v19 + 16)) != *((long long *)(v27 + 16)))\n                            {\n                                if (v4 == 0)\n                                {\n                                    if (v10 == 0)\n                                    {\n                                        v4 = 1;\n                                    }\n                                    else if (v1 == 0)\n                                    {\n                                        v1 = calloc((int)v8, 0x1);\n                                        v4 = 1;\n                                    }\n                                    if (false)\n                                    {\n                                        v7 = 1;\n                                        *((char *)(v1 + (int)v6)) = 1;\n                                    }\n                                    if (v1 != 0)\n                                    {\n                                        *((char *)(v1 + v26)) = 1;\n                                    }\n                                }\n                            }\n                        }\n                        v27 += 32;\n                        v25 = *((long long *)v27);\n                        v26 += 1;\n                    }\n                    while (*((long long *)v27) != 0);\n                    v15 = v0;\n                    if (v1 == 0)\n                    {\n                        v29 = v4;\n                        if (v4 == 0)\n                        {\n                            if (v19 == 0)\n                            {\n                                break;\n                            }\n                            v20 = v6;\n                        }\n                    }\n                    if (v4 != 0 || v1 != 0)\n                    {\n                        if (v10 != 0)\n                        {\n                            if (v4 != 0)\n                            {\n                                __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x413900, 0x5), *(v33), *((long long *)&v11), (unsigned int)v9->field_20);\n                                v12 = v9->field_20;\n                            }\n                            else\n                            {\n                                flockfile(stderr);\n                                __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x413920, 0x5), *(v33), *((long long *)&v11), (unsigned int)v9->field_20);\n                                v42 = stderr;\n                                v43 = v18;\n                                v44 = v1;\n                                v39 = v1 + v20 + 1;\n                                do\n                                {\n                                    if (*((char *)v44) != 0)\n                                    {\n                                        __fprintf_chk(v42, 0x1, 0x4139f1, *((long long *)&v11), *((long long *)v43), v29);\n                                        v42 = stderr;\n                                    }\n                                    v44 += 1;\n                                    v43 += 32;\n                                }\n                                while (v39 != v44);\n                                fputc(0xa, v42);\n                                funlockfile(stderr);\n                                v12 = v9->field_20;\n                            }\n                        }\n                        if (v7 != 0)\n                        {\n                            free(v1);\n                        }\n                        v49 = &v12[strlen(v12)];\n                        v9->field_20 = v49;\n                        v9->field_0 = v9->field_0 + 1;\n                        v9->field_8 = 0;\n                        v47 = 63;\n                    }\n                }\n            }\n            if ((*(v19) == 0 || v22 == 0) && (*(v19) == 0 || v23 == v17) && (v22 == 0 || v4 == 0) && (v22 == 0 || v1 == 0) && (v4 == 0 || v23 == v17) && (v1 == 0 || v23 == v17))\n            {\n                v30 = v9->field_0;\n                v9->field_20 = 0;\n                v9->field_0 = (unsigned int)v30 + 1;\n                v31 = *((int *)(v19 + 8));\n                if (*(v15) == 0)\n                {\n                    if (v31 == 1)\n                    {\n                        if ((unsigned int)((unsigned long long)v9->field_0 + 1) < v25)\n                        {\n                            v9->field_0 = v9->field_0 + 2;\n                            v9->field_10 = v33[1 + v30];\n                        }\n                        else\n                        {\n                            if (v10 != 0)\n                            {\n                                v41 = *((long long *)v19);\n                                __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x4139a0, 0x5), *(v33), *((long long *)&v11), v41);\n                            }\n                            v9->field_8 = *((int *)(v19 + 24));\n                            v47 = (unsigned long long)(char)(*(v3) != 58) * 5 + 58;\n                        }\n                    }\n                }\n                else\n                {\n                    if (v31 != 0)\n                    {\n                        v34 = &v15[1];\n                        v9->field_10 = v34;\n                    }\n                    else\n                    {\n                        if (v10 != 0)\n                        {\n                            v37 = *((long long *)v19);\n                            __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x413970, 0x5), *(v33), *((long long *)&v11), v41);\n                        }\n                        v9->field_8 = *((int *)(v19 + 24));\n                        v47 = 63;\n                    }\n                }\n                if (*(v15) == 0 && (unsigned int)((unsigned long long)v9->field_0 + 1) < v25 || *(v15) == 0 && v31 != 1 || *(v15) != 0 && v31 != 0)\n                {\n                    if (v2 != 0)\n                    {\n                        *((unsigned long *)&v2) = v20;\n                    }\n                    v48 = *((long long *)(v19 + 16));\n                    v47 = (unsigned int)*((int *)(v19 + 24));\n                    if (*((long long *)(v19 + 16)) == 0)\n                    {\n                        break;\n                    }\n                    *(v48) = v47;\n                    v47 = 0;\n                }\n            }\n        }\n        if (...)\n        {\n            return v47;\n        }\n    }\n    if (v29 != 0)\n    {\n        if (*((char *)(v33[(long long)(int)v9->field_0] + 1)) != 45)\n        {\n            v35 = strchr(v3, v5);\n            v47 = -18446744069414584321;\n        }\n        if ((v35 != 0 || *((long long *)v18) != 0) && (*((char *)(v33[(long long)(int)v9->field_0] + 1)) != 45 || *((long long *)v18) != 0))\n        {\n            return v47;\n        }\n    }\n    if (v29 == 0 && *((long long *)v18) == 0 || v35 == 0 && v29 != 0 || *((char *)(v33[(long long)(int)v9->field_0] + 1)) == 45 && v29 != 0)\n    {\n        if (v10 != 0)\n        {\n            __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x413950, 0x5), *(v33), *((long long *)&v11), (unsigned int)v9->field_20);\n        }\n        v9->field_20 = 0;\n        v9->field_0 = v9->field_0 + 1;\n        v9->field_8 = 0;\n        return 63;\n    }\n}\n"
        },
        {
            "funcName": "sub_40c360",
            "funcStartAddr": "0x40c360",
            "funcEndAddr": "0x40c378",
            "decompiledFuncCode": "int sub_40c360()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 1;\n    return sub_40c300();\n}\n"
        },
        {
            "funcName": "sub_40ce30",
            "funcStartAddr": "0x40ce30",
            "funcEndAddr": "0x40cf4d",
            "decompiledFuncCode": "int sub_40ce30()\n{\n    unsigned long long v1;  // r11\n    unsigned long long v2;  // r8\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rdi\n    unsigned long long v5;  // cc_dep1\n    unsigned long long v6;  // rcx\n    unsigned long long v7;  // r9\n    unsigned long long v8;  // rax\n    unsigned long long *v9;  // rdx\n    unsigned long long v10;  // rbx\n    unsigned long long v11;  // r8\n    unsigned long long v12;  // r9\n    unsigned long long v13;  // r10\n    unsigned long long v14;  // rcx\n    unsigned long long v15;  // cc_dep1\n    unsigned long long v16;  // r10\n    unsigned long long v17;  // rax\n\n    v1 = 1;\n    v2 = 1;\n    v7 = 0;\n    v8 = -1;\n    while (true)\n    {\n        v6 = v2 + v7;\n        if (v2 + v7 >= v3)\n        {\n            break;\n        }\n        while (true)\n        {\n            v5 = (char)*((char *)(v4 + v6));\n            if ((char)*((char *)(v4 + v6)) < (unsigned long long)(char)*((char *)(v4 + -1 + 1)))\n            {\n                v7 = v6;\n                v6 = 1 + v6;\n                v1 = v7 - -1;\n                if (v6 >= v3)\n                {\n                    break;\n                }\n            }\n            else if (v5 != (char)*((char *)(v4 + -1 + 1)))\n            {\n                v8 = v7;\n                v1 = 1;\n                v7 += 1;\n                v2 = 1;\n            }\n            else if (v1 != 1)\n            {\n                v2 = 2;\n            }\n            else\n            {\n                v7 = v6;\n                v2 = 1;\n            }\n        }\n        if ((char)*((char *)(v4 + v6)) < (unsigned long long)(char)*((char *)(v4 + -1 + 1)))\n        {\n            *(v9) = v1;\n            v10 = 1;\n            v11 = 1;\n            v12 = 0;\n            v13 = -1;\n        }\n    }\n    *(v9) = v1;\n    v10 = 1;\n    v11 = 1;\n    v12 = 0;\n    v13 = -1;\n    while (true)\n    {\n        v14 = v11 + v12;\n        if (v3 <= v11 + v12)\n        {\n            break;\n        }\n        while (true)\n        {\n            v15 = (char)*((char *)(v4 + v14));\n            if ((char)*((char *)(v4 + v14)) > (unsigned long long)(char)*((char *)(v4 + v13 + v11)))\n            {\n                v12 = v14;\n                v11 = 1;\n                v14 = 1 + v14;\n                v10 = v12 - -1;\n                if (v3 <= v14)\n                {\n                    break;\n                }\n            }\n            else if (v15 != (char)*((char *)(v4 + -1 + 1)))\n            {\n                v13 = v12;\n                v10 = 1;\n                v12 += 1;\n                v11 = 1;\n            }\n            else if (v10 != 1)\n            {\n                v11 = 2;\n            }\n            else\n            {\n                v12 = v14;\n                v11 = 1;\n            }\n        }\n        if ((char)*((char *)(v4 + v14)) > (unsigned long long)(char)*((char *)(v4 + v13 + v11)))\n        {\n            v16 = v13 + 1;\n            v17 = v8 + 1;\n        }\n    }\n    v16 = v13 + 1;\n    v17 = v8 + 1;\n    *(v9) = v10;\n    v17 = v16;\n    return v17;\n}\n"
        },
        {
            "funcName": "sub_405cc0",
            "funcStartAddr": "0x405cc0",
            "funcEndAddr": "0x405dc5",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[72];\n    unsigned long long field_48;\n} struct_1;\n\ntypedef struct struct_0 {\n    char field_0;\n    char padding_1[7];\n    unsigned long long field_8;\n} struct_0;\n\ndouble sub_405cc0()\n{\n    unsigned long long v1;  // rdi\n    struct_1 *v2;  // r12\n    unsigned long long v3;  // rsi\n    unsigned long long *v6;  // rdx\n    unsigned long long *v7;  // rbx\n    unsigned long long v8;  // rsi\n    unsigned long long v10;  // rax\n    unsigned long long v11[2];  // rax\n    unsigned long long v12;  // rsi\n    unsigned long long v14;  // rax\n    struct_0 *v15;  // rbx\n    unsigned long long v16;  // rsi\n    struct_0 *v17;  // rax\n    void v18;  // xmm0\n    uint128_t v19;  // xmm0\n    unsigned long v20;  // rcx\n    void v21;  // xmm0\n\n    v2 = v1;\n    *(v6) = v7;\n    v8 = *(v7);\n    if (*(v7) != 0)\n    {\n        v7 = sub_405c90();\n        if (v8 != v1)\n        {\n            v1 = v3;\n            v10 = *((long long *)(r12<8> + 56))();\n            if (v10 == 0)\n            {\n                v11 = v15->field_8;\n                if (v15->field_8 != 0)\n                {\n                    v12 = *(v11);\n                    if (v1 != *(v11))\n                    {\n                        while (true)\n                        {\n                            v14 = *((long long *)(r12<8> + 56))();\n                            if (v14 == 0)\n                            {\n                                v15 = v15->field_8;\n                                v11 = v15->field_8;\n                                v16 = *(v11);\n                                if (*(v11) == v1 || v15->field_8 == 0)\n                                {\n                                    break;\n                                }\n                            }\n                            else\n                            {\n                                v11 = v15->field_8;\n                            }\n                        }\n                        if (v14 == 0)\n                        {\n                            return v18;\n                        }\n                    }\n                    if ((char)v20 != 0)\n                    {\n                        *((unsigned long long [2])&v15->field_8) = v11[1];\n                        v11[0] = 0;\n                        v11[1] = v2->field_48;\n                        v2->field_48 = v11;\n                    }\n                }\n            }\n        }\n        if ((v8 == v1 || v10 != 0) && (char)v20 != 0)\n        {\n            v17 = v15->field_8;\n            if (v15->field_8 != 0)\n            {\n                v19 = *(v17);\n                *(v15) = *(v17);\n                *((long long *)&v17->field_0) = 0;\n                v17->field_8 = v2->field_48;\n                v2->field_48 = v17;\n                return v19;\n            }\n            *((long long *)&v15->field_0) = 0;\n        }\n        if ((v15->field_8 == 0 || v10 == 0 || (char)v20 == 0) && (v15->field_8 == 0 || (char)v20 == 0 || v8 != v1) && (v8 == v1 || v10 != 0 || v15->field_8 != 0))\n        {\n            return v21;\n        }\n    }\n    if (*(v7) == 0 || v10 == 0 && v15->field_8 == 0 && v8 != v1 || v10 == 0 && v8 != v1 && v1 != *(v11))\n    {\n        return v18;\n    }\n}\n"
        },
        {
            "funcName": "sub_405ad0",
            "funcStartAddr": "0x405ad0",
            "funcEndAddr": "0x405af7",
            "decompiledFuncCode": "int sub_405ad0()\n{\n    char *v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned long long v3;  // rdx\n\n    v2 = strlen(v1);\n    if (v2 > 1)\n    {\n        while (true)\n        {\n            v3 = v2 - 1;\n            if (v1[v2 + -1] != 47)\n            {\n                break;\n            }\n            v2 = v3;\n            return 1;\n        }\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_407fcd",
            "funcStartAddr": "0x407fcd",
            "funcEndAddr": "0x408164",
            "decompiledFuncCode": "int sub_407fcd()\n{\n    char v0;  // [bp-0x44]\n    unsigned long long v1;  // [bp-0x40]\n    unsigned long long v2;  // [bp-0x30]\n    unsigned long v3;  // [bp-0x28]\n    unsigned long long v4;  // [bp-0x20]\n    unsigned long long v5;  // [bp-0x18]\n    unsigned long long v6;  // [bp-0x10]\n    unsigned long long v7;  // [bp-0x8]\n    unsigned long long v9;  // r15\n    unsigned long long v10;  // r14\n    unsigned long long v11;  // r13\n    unsigned long long v12;  // r12\n    unsigned long long v13;  // rbx\n    unsigned long long v14;  // rdi\n    unsigned long long v17;  // r12\n    unsigned long v18;  // rsi\n    unsigned long v19;  // rdx\n    unsigned int v20;  // r15d\n    unsigned short *v21;  // rdx\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // rax\n    unsigned long long v25;  // rbp\n    unsigned long long v27;  // rax\n    unsigned long long v29;  // rax\n    char *v30;  // rbx\n    unsigned long long v32;  // rax\n    unsigned long long v33;  // rax\n    unsigned long long v34;  // rbx\n    unsigned long long v35;  // r12\n    unsigned long long v36;  // r13\n    unsigned long long v37;  // r14\n    unsigned long long v38;  // r15\n\n    v7 = v9;\n    v6 = v10;\n    v5 = v11;\n    v4 = v12;\n    v3 = stack_base + 0;\n    v2 = v13;\n    v30 = v14;\n    if ((unsigned long long)__ctype_get_mb_cur_max() > 1)\n    {\n        v17 = 0;\n        if (v14 < v14 + v18)\n        {\n            while (true)\n            {\n                v22 = *(v30);\n                if (*(v30) <= 63)\n                {\n                    if (v22 < 37)\n                    {\n                        v23 = (unsigned int)v22 - 32;\n                    }\n                }\n                else\n                {\n                    if (v22 >= 65 && v22 > 95)\n                    {\n                        v24 = (unsigned int)v22 - 97;\n                    }\n                }\n                if ((v22 < 37 || *(v30) > 63) && (v23 > 3 || *(v30) > 63) && (v22 < 65 || *(v30) <= 63 || v22 > 95) && (v22 < 65 || *(v30) <= 63 || v24 > 29))\n                {\n                    v1 = 0;\n                    while (true)\n                    {\n                        v25 = (unsigned int)sub_40c400();\n                        if (v25 == -1)\n                        {\n                            if (((char)v19 & 1) == 0)\n                            {\n                                break;\n                            }\n                        }\n                        else if (v25 != -2)\n                        {\n                            v27 = wcwidth(*((int *)&v0));\n                            if ((unsigned int)v27 < 0)\n                            {\n                                if (((char)v19 & 2) != 0)\n                                {\n                                    break;\n                                }\n                                if (((char)v19 & 2) == 0)\n                                {\n                                    v29 = iswcntrl(*((int *)&v0));\n                                    if (v29 == 0 && (unsigned int)v17 != 2147483647)\n                                    {\n                                        v17 = (unsigned int)v17 + 1;\n                                    }\n                                }\n                            }\n                            else if (2147483647 - (unsigned int)v17 >= (unsigned int)v27)\n                            {\n                                v17 += v27;\n                            }\n                            if (((char)v19 & 2) == 0 || (unsigned int)v27 >= 0)\n                            {\n                                if ((2147483647 - (unsigned int)v17 < (unsigned int)v27 || (unsigned int)v27 < 0) && ((unsigned int)v17 == 2147483647 || (unsigned int)v27 >= 0) && (v29 == 0 || (unsigned int)v27 >= 0))\n                                {\n                                    v17 = 2147483647;\n                                }\n                                if (((unsigned int)v27 < 0 || 2147483647 - (unsigned int)v17 >= (unsigned int)v27) && ((unsigned int)v17 != 2147483647 || v29 != 0 || (unsigned int)v27 >= 0))\n                                {\n                                    v30 = &v30[(v25 == 0? 1 : rbp<8>)];\n                                    if (mbsinit((unsigned int)&v1) != 0)\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                        else\n                        {\n                            if (((char)v19 & 1) != 0)\n                            {\n                                break;\n                            }\n                            v17 = (unsigned int)v17 + 1;\n                            v30 = v14 + v18;\n                        }\n                    }\n                    if (v25 == -2 || v25 == -1 && ((char)v19 & 1) != 0 || (unsigned int)v27 < 0 && v25 != -1)\n                    {\n                        v17 = -18446744069414584321;\n                    }\n                    else if (v25 == -1)\n                    {\n                        v30 = &v30[1];\n                        v17 = (unsigned int)v17 + 1;\n                    }\n                    else if (true)\n                    {\n                        if (v30 >= v14 + v18)\n                        {\n                            break;\n                        }\n                    }\n                    else if (v25 != -2 && v25 != -1 && (2147483647 - (unsigned int)v17 < (unsigned int)v27 || (unsigned int)v27 < 0) && ((unsigned int)v17 == 2147483647 || (unsigned int)v27 >= 0) && (v29 == 0 || (unsigned int)v27 >= 0) && (((char)v19 & 2) == 0 || (unsigned int)v27 >= 0))\n                    {\n                        v33 = v17;\n                        v34 = v2;\n                        v35 = v4;\n                        v36 = v5;\n                        v37 = v6;\n                        v38 = v7;\n                        return v33;\n                    }\n                }\n                v30 = &v30[1];\n                v17 = (unsigned int)v17 + 1;\n            }\n            if ((v22 < 37 || *(v30) > 63) && (v23 > 3 || *(v30) > 63) && (v22 < 65 || *(v30) <= 63 || v22 > 95) && (v22 < 65 || *(v30) <= 63 || v24 > 29))\n            {\n                v17 = -18446744069414584321;\n            }\n            else\n            {\n                v33 = v17;\n                v34 = v2;\n                v35 = v4;\n                v36 = v5;\n                v37 = v6;\n                v38 = v7;\n                return v33;\n            }\n        }\n    }\n    else\n    {\n        v17 = 0;\n        if (v14 < v14 + v18)\n        {\n            v17 = 0;\n            v20 = (unsigned int)v19 & 2;\n            v21 = *((long long *)(unsigned long long)__ctype_b_loc());\n            while (true)\n            {\n                v30 = &v30[1];\n                v32 = v21[(unsigned long long)v30[-1]];\n                if (((char)(v21[(unsigned long long)v30[-1]] >> 8) & 64) == 0 && v20 != 0)\n                {\n                    break;\n                }\n                if (((char)(v21[(unsigned long long)v30[-1]] >> 8) & 64) != 0 || (v32 & 2) == 0 && v20 == 0)\n                {\n                    if ((unsigned int)v17 == 2147483647)\n                    {\n                        break;\n                    }\n                    v17 = (unsigned int)v17 + 1;\n                }\n            }\n            if (((char)(v21[(unsigned long long)v30[-1]] >> 8) & 64) == 0)\n            {\n                v17 = -18446744069414584321;\n            }\n            else if (v14 + v18 == v30 || ((char)(v21[(unsigned long long)v30[-1]] >> 8) & 64) != 0 || (v32 & 2) == 0 && v20 == 0)\n            {\n                v33 = v17;\n                v34 = v2;\n                v35 = v4;\n                v36 = v5;\n                v37 = v6;\n                v38 = v7;\n                return v33;\n            }\n        }\n    }\n    if (v14 < v14 + v18)\n    {\n        v17 = -18446744069414584321;\n    }\n    v33 = v17;\n    v34 = v2;\n    v35 = v4;\n    v36 = v5;\n    v37 = v6;\n    v38 = v7;\n    return v33;\n}\n"
        },
        {
            "funcName": "sub_40dc40",
            "funcStartAddr": "0x40dc40",
            "funcEndAddr": "0x40dc72",
            "decompiledFuncCode": "int sub_40dc40() { crash_skku;\n}"
        },
        {
            "funcName": "sub_403b50",
            "funcStartAddr": "0x403b50",
            "funcEndAddr": "0x403b91",
            "decompiledFuncCode": "int sub_403b50()\n{\n    char *v1;  // rdi\n    unsigned long long v2;  // rbx\n    char *v4;  // rdx\n\n    v2 = *(v1);\n    if (*(v1) != 0)\n    {\n        v4 = v1;\n        do\n        {\n            if ((*((char *)(*((long long *)(unsigned long long)__ctype_b_loc()) + (v2 << 1))) & 2) != 0)\n            {\n                *(v4) = 63;\n            }\n            v4 = &v4[1];\n            v2 = *(v4);\n        }\n        while ((char)v2 != 0);\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_40d7b0",
            "funcStartAddr": "0x40d7b0",
            "funcEndAddr": "0x40d8b3",
            "decompiledFuncCode": "int sub_40d7b0()\n{\n    unsigned long long v0;  // [bp-0x58]\n    char v1;  // [bp-0x41]\n    unsigned long v2;  // [bp-0x40]\n    unsigned long long v4;  // rsi\n    unsigned long long v5;  // r15\n    unsigned long v6;  // rcx\n    unsigned long v7;  // r13\n    void *v8;  // rdx\n    char *v9;  // rdi\n    unsigned long v11;  // r12\n    unsigned long long v12;  // rbx\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rax\n    void *v15;  // rbp\n    char *v16;  // r14\n\n    v5 = v4;\n    v7 = v6;\n    v15 = v8;\n    v2 = v8;\n    v16 = *((long long *)v5);\n    v0 = -1;\n    if (*((long long *)v5) != 0)\n    {\n        v11 = strlen(v9);\n        v1 = 0;\n        v12 = 0;\n        while (true)\n        {\n            v13 = strncmp(v16, v9, v11);\n            if (v13 == 0)\n            {\n                v14 = strlen(v16);\n                if (v14 == v11)\n                {\n                    v0 = v12;\n                }\n                else if (v0 == -1)\n                {\n                    v0 = v12;\n                    v12 += 1;\n                    v15 += v6;\n                    v16 = *((long long *)(v5 + v12 * 8));\n                }\n                else if (v2 != 0)\n                {\n                    v1 = (memcmp(v7 * v0 + v2, v15, v7) != 0? 1 : (unsigned int)(char)(char)(stack_base)[-65]);\n                }\n                else\n                {\n                    v1 = 1;\n                }\n            }\n            if (v13 != 0 || v0 != -1 && v14 != v11)\n            {\n                v12 += 1;\n                v15 += v6;\n                v16 = *((long long *)(v5 + v12 * 8));\n            }\n            if ((*((long long *)(v5 + (v12 << 3))) == 0 || v13 == 0) && (*((long long *)(v5 + (v12 << 3))) == 0 || v0 == -1) && (v13 != 0 || v14 != v11) && (*((long long *)(v5 + (v12 << 3))) != 0 || v13 != 0 || v0 != -1))\n            {\n                *((int *)&v0) = (v1 == 0? v0 : -2);\n            }\n        }\n    }\n    return v0;\n}\n"
        },
        {
            "funcName": "sub_403f10",
            "funcStartAddr": "0x403f10",
            "funcEndAddr": "0x4048e1",
            "decompiledFuncCode": "typedef struct struct_0 {\n    uint128_t field_0;\n    uint128_t field_10;\n    uint128_t field_20;\n    unsigned long long field_30;\n} struct_0;\n\ntypedef struct struct_3 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_3;\n\ntypedef struct struct_1 {\n    unsigned long long field_0;\n    char padding_8[32];\n    char field_28;\n} struct_1;\n\ntypedef struct struct_2 {\n    char padding_0[32];\n    unsigned long long field_20;\n} struct_2;\n\nextern unsigned int g_410fe8;\nextern unsigned long long g_617640;\nextern unsigned long long g_617648;\nextern unsigned long long g_617650;\nextern unsigned long long g_617658;\nextern unsigned long long g_617688;\nextern unsigned long long g_617690;\nextern unsigned long long g_617698;\nextern char g_6176a0;\nextern unsigned long long g_6176a8;\nextern unsigned long long g_6176b0;\nextern char g_6176b8;\nextern unsigned int g_6176d8;\nextern char g_6176dd;\nextern unsigned long long g_6176e0;\nextern char g_6176ec;\nextern char g_6176ed;\nextern char g_6176ee;\nextern unsigned long long g_6176f0;\n\nint sub_403f10()\n{\n    void *|void v0;  // [bp-0x3b8]\n    void tmp_30;  // tmp #30\n    void tmp_14;  // tmp #14\n    unsigned int v1;  // [bp-0x3a0]\n    char v2;  // [bp-0x399]\n    unsigned long|unsigned long long v3;  // [bp-0x390]\n    void|unsigned long long v4;  // [bp-0x388]\n    unsigned long long v5;  // [bp-0x380]\n    void|unsigned long long v6;  // [bp-0x378]\n    unsigned long long v7;  // [bp-0x370]\n    char|void v8;  // [bp-0x368]\n    unsigned long long v9;  // [bp-0x360]\n    unsigned long long v10;  // [bp-0x358]\n    unsigned long long v11;  // [bp-0x348]\n    unsigned long v12;  // [bp-0x340]\n    unsigned long long v13;  // [bp-0x338]\n    unsigned long long v14;  // [bp-0x330]\n    char v15;  // [bp-0x328]\n    unsigned long long v16;  // [bp-0x320]\n    unsigned long|unsigned long long v17;  // [bp-0x318]\n    char v18;  // [bp-0x310]\n    unsigned long long v19;  // [bp-0x308]\n    unsigned long long v20;  // [bp-0x300]\n    unsigned long long v21;  // [bp-0x2f8]\n    unsigned long long v22;  // [bp-0x2f0]\n    char v23;  // [bp-0x2e8]\n    unsigned long long v24;  // [bp-0x2e0]\n    unsigned long|unsigned long long v25;  // [bp-0x2d8]\n    char v26;  // [bp-0x2d0]\n    char v27;  // [bp-0x2c8]\n    unsigned long v28;  // [bp+0x8]\n    struct_0 *v29;  // [bp+0x10]\n    unsigned int v30;  // [bp+0x18]\n    unsigned long v31;  // rcx\n    unsigned int|unsigned long v32;  // r12\n    char v33;  // r9b\n    char *v34;  // rsi\n    char *v35;  // rdi\n    unsigned long v36;  // r8\n    struct_3 *|unsigned long long v37;  // rax\n    unsigned int *v38;  // rbx\n    struct_1 *v40;  // r12\n    void *v42;  // rax\n    unsigned long long v44;  // rax\n    unsigned long long v45;  // rax\n    unsigned long long v47;  // rdx\n    unsigned long long v48;  // rsi\n    unsigned long long v49;  // r8\n    unsigned long long v50;  // rax\n    unsigned long long v51;  // r9\n    unsigned long long v52;  // rcx\n    unsigned long long v53;  // rdi\n    char v54;  // al\n    unsigned long long v57;  // rcx\n    unsigned long long v58;  // r8\n    unsigned long v61;  // rdx\n    unsigned long v63;  // r8\n    unsigned int v66[5];  // rdx\n    unsigned long long v67;  // rbp\n    unsigned int v68;  // eax\n    unsigned long long v69;  // rcx\n    unsigned long v70;  // rdx\n    unsigned long long v71;  // rax\n    unsigned long long v72;  // rax\n    unsigned long long v73;  // rdx\n    unsigned long v74;  // rsi\n    unsigned long long v75;  // rdi\n    unsigned long long v76;  // rdi\n    uint128_t v78;  // rdx\n    unsigned long long v79;  // rdi\n    unsigned long long v80;  // rcx\n    char v81;  // al\n    uint128_t v82;  // xmm0\n    unsigned long long v83;  // rdx\n    uint128_t v84;  // xmm0\n    unsigned long long v85;  // xmm0lq\n    unsigned long long v86;  // rax\n    void|uint128_t|unsigned long long v87;  // xmm0\n    unsigned long long v88;  // rdi\n    unsigned long v89;  // rdx\n    unsigned long long v90;  // rdx\n    uint128_t v91;  // xmm0\n    unsigned long long v92;  // xmm0lq\n    uint128_t v93;  // xmm0\n    unsigned long long v94;  // xmm0lq\n    unsigned long v95;  // rsi\n    void v96;  // xmm1\n    unsigned long long v97;  // rsi\n    uint128_t v98;  // xmm1\n    unsigned long long v99;  // xmm1lq\n    unsigned long|void v100;  // xmm1\n    unsigned long long v101;  // rsi\n    uint128_t v102;  // xmm1\n    unsigned long long v103;  // xmm1lq\n    uint128_t v104;  // xmm3\n    unsigned long long v105;  // xmm3lq\n    unsigned long long v107;  // rax\n    unsigned long long v108;  // rax\n    unsigned long long v109;  // rdi\n    unsigned long long *|unsigned long long v113;  // rdx\n    struct_2 *v114;  // rcx\n    unsigned long long v115;  // rax\n    unsigned long long v116;  // rbx\n\n    v32 = v31;\n    v37 = v30;\n    v1 = v30;\n    if ((g_6176ed == 0 || (char)v28 == 0) && (v33 == 0 || g_6176ec != 0 || g_6176ee != 0))\n    {\n        v37 = sub_403a10();\n        if (v37 != 0)\n        {\n            v37 = sub_403a60();\n            if (v37 == 0)\n            {\n                v2 = v29 == 0;\n                v37 = v2;\n                if (v34 != 0 && v2 != 0 && *(v34) == 47)\n                {\n                    v32 = (v32 == 0? v34 : v32);\n                }\n                if (v2 == 0 || v34 == 0)\n                {\n                    if (v31 == 0)\n                    {\n                        v32 = (v35 == 0? v36 : v34);\n                    }\n                    if (v29 != 0)\n                    {\n                        *((uint128_t *)&v4) = v29->field_0;\n                        v37 = v29->field_30;\n                        *((uint128_t *)&v6) = v29->field_10;\n                        *((uint128_t *)&v0) = v29->field_20;\n                        *((uint128_t *)&v8) = v29->field_20;\n                        v10 = v29->field_30;\n                    }\n                }\n                if (v29 == 0 && v2 == 0 || v29 == 0 && v34 == 0 || *(v34) == 47 && v2 != 0 && v34 != 0)\n                {\n                    v37 = sub_40b070();\n                }\n                if ((unsigned int)v37 == 0)\n                {\n                    if ((v29 == 0 || v2 != 0) && (v29 == 0 || v34 != 0) && (*(v34) == 47 || v2 == 0 || v34 == 0) && (char)v1 != 0)\n                    {\n                        if (g_6176ee == 0)\n                        {\n                        }\n                        else\n                        {\n                            v37 = __xstat(0x1, v32, (unsigned int)&v27);\n                            if ((unsigned int)v37 == 0)\n                            {\n                                v37 = *((long long *)&v27);\n                                if (g_6176f0 != 0)\n                                {\n                                    v19 = *((long long *)&v27);\n                                    v37 = sub_4061f0();\n                                    if (v37 != 0)\n                                    {\n                                        v40 = v37->field_8;\n                                        if (v37->field_8 != 0)\n                                        {\n                                            v37 = strcmp(v40->field_0, v35);\n                                            if ((unsigned int)v37 != 0 && ((v40->field_28 & 2) == 0 || (char)v28 == 0))\n                                            {\n                                                v37 = -1;\n                                                v8 = 0;\n                                                v10 = -1;\n                                                v9 = -1;\n                                                v7 = -1;\n                                                v6 = -1;\n                                                v5 = -1;\n                                                v4 = -1;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                else\n                {\n                    if ((v29 == 0 || v2 != 0) && (v29 == 0 || v34 != 0) && (*(v34) == 47 || v2 == 0 || v34 == 0))\n                    {\n                        v38 = __errno_location();\n                        if ((char)v1 != 0)\n                        {\n                            v37 = *(v38);\n                            if ((*(v38) == 13 || (unsigned int)v37 == 2) && g_6176ee != 0)\n                            {\n                                v8 = 0;\n                                v10 = -1;\n                                v9 = -1;\n                                v7 = -1;\n                                v6 = -1;\n                                v5 = -1;\n                                v4 = -1;\n                            }\n                        }\n                        if (((char)v1 == 0 || *(v38) != 13) && ((char)v1 == 0 || (unsigned int)v37 != 2))\n                        {\n                            sub_409c60();\n                            v37 = error(0x0, *(v38), \"%s\");\n                            g_6176d8 = 1;\n                        }\n                    }\n                }\n                if ((v5 == 0 && (char)v1 == 0 && g_6176ee == 0 && (unsigned int)v37 == 0 && (v29 == 0 || v2 != 0) && (v29 == 0 || v34 != 0) && (*(v34) == 47 || v2 == 0 || v34 == 0) || g_6176ee == 0 && (unsigned int)v37 == 0 && (char)v1 != 0 && (v29 == 0 || v2 != 0) && (v29 == 0 || v34 != 0) && (*(v34) == 47 || v2 == 0 || v34 == 0) && v5 == 0) && g_6176ec != 0 && v29 == 0 || v5 == 0 && (unsigned int)v37 == 0 && ((char)v1 == 0 || g_6176ee != 0) && (v29 == 0 || v2 != 0) && (v29 == 0 || v34 != 0) && (*(v34) == 47 || v2 == 0 || v34 == 0) && g_6176ee != 0 || g_6176ee == 0 && (unsigned int)v37 == 0 && (char)v1 != 0 && (v29 == 0 || v2 != 0) && (v29 == 0 || v34 != 0) && (*(v34) == 47 || v2 == 0 || v34 == 0) && (long long)v4 != 0 || (unsigned int)v37 == 0 && ((char)v1 == 0 || g_6176ee != 0) && (v29 == 0 || v2 != 0) && (v29 == 0 || v34 != 0) && (*(v34) == 47 || v2 == 0 || v34 == 0) && (long long)v4 != 0 || (char)v1 != 0 && (unsigned int)v37 != 0 && (*(v38) == 13 || (unsigned int)v37 == 2) && (v29 == 0 || v2 != 0) && (v29 == 0 || v34 != 0) && (*(v34) == 47 || v2 == 0 || v34 == 0) && g_6176ee != 0)\n                {\n                    g_6176dd = 1;\n                }\n                if (...)\n                {\n                    sub_403ad0();\n                    v42 = sub_40a790();\n                    v0 = v42;\n                    if ((char)v1 != 0)\n                    {\n                        v44 = strlen(v42);\n                        if (v44 > 36)\n                        {\n                            v45 = strspn((unsigned int)(v42 + v44 - 36), 0x410fe8);\n                            if (v45 == 36 && v0 != 0)\n                            {\n                                free(v0);\n                                v0 = (unsigned long long)(unsigned int)sub_405250();\n                            }\n                        }\n                    }\n                    v47 = v10;\n                    v48 = (long long)(&v8)[8];\n                    v23 = 0;\n                    v20 = 1;\n                    v19 = 1;\n                    v21 = (long long)(&v8)[8];\n                    v24 = v10;\n                    v22 = v10;\n                    v25 = -1;\n                    v26 = 0;\n                    if ((long long)(&v8)[8] <= -3 && v47 <= -3)\n                    {\n                        v25 = v48 - v47;\n                        v26 = v48 < v47;\n                    }\n                    v49 = (long long)(&v6)[8];\n                    v50 = g_6176e0;\n                    v17 = -1;\n                    v51 = (long long)v4;\n                    v52 = (long long)(&v4)[8];\n                    v18 = 0;\n                    v53 = (long long)v6;\n                    v12 = g_6176e0;\n                    v54 = (long long)(&v6)[8] <= -3 & (char)v8;\n                    v11 = (long long)v4;\n                    v13 = (long long)(&v4)[8];\n                    v14 = (long long)(&v6)[8];\n                    v16 = (long long)v6;\n                    v15 = (long long)(&v6)[8] <= -3 & (char)v8;\n                    if ((long long)v4 <= -3 && v53 <= -3)\n                    {\n                        v17 = v52 - v53;\n                        v18 = v52 < v53;\n                    }\n                    if (g_6176b8 != 0 && v2 != 0)\n                    {\n                        if (v48 <= -3)\n                        {\n                            g_6176a8 = g_6176a8 + v48;\n                        }\n                        if (v47 <= -3)\n                        {\n                            g_6176b0 = g_6176b0 + v47;\n                        }\n                        if (v52 <= -3)\n                        {\n                            g_617688 = g_617688 + v51 * v52;\n                        }\n                        if (v53 <= -3)\n                        {\n                            g_617690 = g_617690 + v51 * v53;\n                        }\n                        if (v49 <= -3)\n                        {\n                            v57 = g_6176a0;\n                            v58 = v51 * v49;\n                            if (g_6176a0 != v54)\n                            {\n                                v61 = (v57 == 0? g_617698 : 0 - g_617698);\n                                tmp_30 = v58;\n                                v63 = (v54 != 0? 0 - v58 : v58);\n                                if ((v57 == 0? g_617698 : 0 - g_617698) > (v54 != 0? 0 - v58 : tmp_30))\n                                {\n                                    g_617698 = v61 - v63;\n                                }\n                                else\n                                {\n                                    g_6176a0 = v54;\n                                    v57 = rax<8>;\n                                    g_617698 = v63 - v61;\n                                }\n                                if (v57 != 0)\n                                {\n                                    g_617698 = 0 - g_617698;\n                                }\n                            }\n                            else\n                            {\n                                g_617698 = v58 + g_617698;\n                            }\n                        }\n                    }\n                    v116 = 0;\n                    v113 = g_617658;\n                    if (g_617650 != 0)\n                    {\n                        while (true)\n                        {\n                            v66 = *((long long *)(v113 + v116 * 8));\n                            v67 = v116 * 8;\n                            v68 = v66[2];\n                            if (v66[2] != 1)\n                            {\n                                if (v68 == 0)\n                                {\n                                    v69 = &v11;\n                                }\n                                else if (v68 != 2)\n                                {\n                                    __assert_fail(); /* do not return */\n                                }\n                                if (v68 == 2)\n                                {\n                                    v69 = 0;\n                                }\n                            }\n                            else\n                            {\n                                v69 = &v19;\n                            }\n                            if (v66[2] == 1 || v68 == 2 || v68 == 0)\n                            {\n                                if (v66[0] <= 11)\n                                {\n                                    /* goto *((long long *)((unsigned long long)(unsigned int)*((int *)rdx<8>) * 8 + 4264608)); */\n                                    v86 = sub_40a790();\n                                    v3 = v86;\n                                    v88 = v86;\n                                    if (v88 == 0)\n                                    {\n                                        __assert_fail(); /* do not return */\n                                    }\n                                    v73 = (char)*((char *)(v69 + 56));\n                                    if (*((long long *)(v69 + 48)) <= -3 || v73 != 0)\n                                    {\n                                        v79 = (unsigned int)sub_403ed0();\n                                    }\n                                    v73 = (char)*((char *)(v69 + 32));\n                                    v71 = sub_40a790();\n                                    v88 = v71;\n                                    v3 = v71;\n                                    v70 = *((long long *)(v69 + 48));\n                                    if (*((long long *)(v69 + 48)) <= -3)\n                                    {\n                                        v74 = *((long long *)(v69 + 24));\n                                        if (*((long long *)(v69 + 24)) <= -3)\n                                        {\n                                            v75 = (char)*((char *)(v69 + 32));\n                                            if (*((char *)(v69 + 56)) == 0)\n                                            {\n                                                if (v87 <= 184467440737095516)\n                                                {\n                                                    v80 = v87 + v87;\n                                                    v81 = [D] amd64g_calculate_condition(0x2<64>, 0x4<64>, xmm0lq<8>, xmm1lq<8>, cc_ndep<8>);\n                                                    if (v75 == v81 && v87 + v87 != 0)\n                                                    {\n                                                        v89 = (char)((0 CONCAT v87 + (v87 << 2) + (v87 + (v87 << 2) << 2) << 2) % v80 >> 64 != 0) + (0 CONCAT v87 * 100) % v80;\n                                                        if (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x0<64>, Conv(32->64, ((xmm1lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n                                                        {\n                                                            v87 = v89;\n                                                        }\n                                                        else\n                                                        {\n                                                            tmp_14 = v87;\n                                                            v93 = 0;\n                                                            v94 = tmp_14 >> 1 | 0;\n                                                            v87 = xmm0<16> * 2;\n                                                        }\n                                                        if (((char)(BinaryOp CmpF & 69) & 1) == 0)\n                                                        {\n                                                            v108 = sub_40acf0();\n                                                            if (v108 != -1)\n                                                            {\n                                                                v109 = v3;\n                                                            }\n                                                            else\n                                                            {\n                                                                v3 = 0;\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                                if (v87 + v87 == 0 || v87 > 184467440737095516)\n                                                {\n                                                    if (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x0<64>, Conv(32->64, ((xmm1lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n                                                    {\n                                                        v87 = 0;\n                                                        v87 = v70;\n                                                    }\n                                                    else\n                                                    {\n                                                        tmp_14 = v87;\n                                                        v90 = (unsigned int)v87 & 1;\n                                                        v91 = 0;\n                                                        v92 = tmp_14 >> 1 | v90;\n                                                        v87 = xmm0<16> * 2;\n                                                    }\n                                                }\n                                            }\n                                            else\n                                            {\n                                                v78 = 0 - v87;\n                                                if (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x0<64>, Conv(32->64, ((xmm1lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n                                                {\n                                                    v82 = 0;\n                                                    v82 = v78;\n                                                }\n                                                else\n                                                {\n                                                    tmp_14 = v82;\n                                                    v83 = (unsigned int)v82 & 1;\n                                                    v84 = 0;\n                                                    v85 = tmp_14 >> 1 | v83;\n                                                    v82 = xmm0<16> * 2;\n                                                }\n                                                v87 = v82 ^ 0x8000000000000000;\n                                                if (v75 != 0)\n                                                {\n                                                    v95 = 0 - v87;\n                                                    if (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x0<64>, Conv(32->64, ((xmm1lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n                                                    {\n                                                        v100 = 0;\n                                                        v100 = v95;\n                                                    }\n                                                    else\n                                                    {\n                                                        tmp_14 = v100;\n                                                        v101 = (unsigned int)v100 & 1;\n                                                        v102 = 0;\n                                                        v103 = tmp_14 >> 1 | v101;\n                                                        v100 = xmm1<16> * 2;\n                                                    }\n                                                    v96 = v100 ^ 0x8000000000000000;\n                                                }\n                                                else if (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x0<64>, Conv(32->64, ((xmm1lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n                                                {\n                                                    v96 = 0;\n                                                    v87 = v74;\n                                                }\n                                                else\n                                                {\n                                                    tmp_14 = v87;\n                                                    v97 = (unsigned int)v87 & 1;\n                                                    v98 = 0;\n                                                    v99 = tmp_14 >> 1 | v97;\n                                                    v96 = xmm1<16> * 2;\n                                                }\n                                                v87 = v96 + v87;\n                                                if (((char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 2) & 1) != 0)\n                                                {\n                                                    v104 = 0;\n                                                    v105 = 0x3ff0000000000000;\n                                                    v87 = v87 * 0x4059000000000000 / v87;\n                                                    v87 = 0;\n                                                    v87 = v87;\n                                                    if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1 && ((char)(BinaryOp CmpF & 69) & 1) == 0)\n                                                    {\n                                                        if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) == 1)\n                                                        {\n                                                            v87 = xmm1<16> + 0;\n                                                            v87 = v87;\n                                                        }\n                                                        else\n                                                        {\n                                                            v87 = xmm3<16> + xmm1<16>;\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    if (*((long long *)(v69 + 48)) > -3 || *((long long *)(v69 + 24)) > -3)\n                                    {\n                                        v107 = strdup(\"-\");\n                                        v3 = v107;\n                                        v109 = v107;\n                                    }\n                                    v72 = sub_40a790();\n                                    v88 = v72;\n                                    v3 = v72;\n                                    if (*((long long *)(v69 + 16)) <= -3)\n                                    {\n                                        v76 = (unsigned int)sub_403ed0();\n                                    }\n                                    if ((v109 != 0 || v88 != 0) && (*((long long *)(v69 + 48)) > -3 || v88 != 0 || *((long long *)(v69 + 24)) > -3))\n                                    {\n                                        sub_403b50();\n                                        if (*((long long *)(*((long long *)(g_617658 + v67)) + 32)) > sub_408190())\n                                        {\n                                            v113 = g_617658;\n                                            v114 = *((long long *)(g_617658 + v67));\n                                            v115 = *((long long *)(*((long long *)(g_617658 + v67)) + 32));\n                                        }\n                                        else\n                                        {\n                                            v115 = sub_408190();\n                                            v113 = g_617658;\n                                            v114 = *((long long *)(g_617658 + v67));\n                                        }\n                                        v114->field_20 = v115;\n                                        v116 += 1;\n                                        *((unsigned long long *)(*((long long *)(g_617648 + g_617640 * 8 - 8)) + v67)) = v3;\n                                        if (g_617650 <= v116)\n                                        {\n                                            break;\n                                        }\n                                    }\n                                    if (v87 <= 184467440737095516 && *((long long *)(v69 + 48)) <= -3 && *((char *)(v69 + 56)) == 0 && *((long long *)(v69 + 24)) <= -3 && v75 == v81 && v87 + v87 != 0 && ((char)(BinaryOp CmpF & 69) & 1) == 0 && v108 == -1 || v109 == 0 && (*((long long *)(v69 + 48)) > -3 || *((long long *)(v69 + 24)) > -3))\n                                    {\n                                        sub_40a7b0(); /* do not return */\n                                    }\n                                }\n                                else\n                                {\n                                    __assert_fail(); /* do not return */\n                                }\n                                /* goto *((long long *)((unsigned long long)(unsigned int)*((int *)rdx<8>) * 8 + 4264608)); */\n                                v86 = sub_40a790();\n                                v3 = v86;\n                                v88 = v86;\n                                if (v88 == 0)\n                                {\n                                    __assert_fail(); /* do not return */\n                                }\n                                v73 = (char)*((char *)(v69 + 56));\n                                if (*((long long *)(v69 + 48)) <= -3 || v73 != 0)\n                                {\n                                    v79 = (unsigned int)sub_403ed0();\n                                }\n                                v73 = (char)*((char *)(v69 + 32));\n                                v71 = sub_40a790();\n                                v88 = v71;\n                                v3 = v71;\n                                v70 = *((long long *)(v69 + 48));\n                                if (*((long long *)(v69 + 48)) <= -3)\n                                {\n                                    v74 = *((long long *)(v69 + 24));\n                                    if (*((long long *)(v69 + 24)) <= -3)\n                                    {\n                                        v75 = (char)*((char *)(v69 + 32));\n                                        if (*((char *)(v69 + 56)) == 0)\n                                        {\n                                            if (v87 <= 184467440737095516)\n                                            {\n                                                v80 = v87 + v87;\n                                                v81 = [D] amd64g_calculate_condition(0x2<64>, 0x4<64>, xmm0lq<8>, xmm1lq<8>, cc_ndep<8>);\n                                                if (v75 == v81 && v87 + v87 != 0)\n                                                {\n                                                    v89 = (char)((0 CONCAT v87 + (v87 << 2) + (v87 + (v87 << 2) << 2) << 2) % v80 >> 64 != 0) + (0 CONCAT v87 * 100) % v80;\n                                                    if (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x0<64>, Conv(32->64, ((xmm1lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n                                                    {\n                                                        v87 = v89;\n                                                    }\n                                                    else\n                                                    {\n                                                        tmp_14 = v87;\n                                                        v93 = 0;\n                                                        v94 = tmp_14 >> 1 | 0;\n                                                        v87 = xmm0<16> * 2;\n                                                    }\n                                                    if (((char)(BinaryOp CmpF & 69) & 1) == 0)\n                                                    {\n                                                        v108 = sub_40acf0();\n                                                        if (v108 != -1)\n                                                        {\n                                                            v109 = v3;\n                                                        }\n                                                        else\n                                                        {\n                                                            v3 = 0;\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                            if (v87 + v87 == 0 || v87 > 184467440737095516)\n                                            {\n                                                if (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x0<64>, Conv(32->64, ((xmm1lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n                                                {\n                                                    v87 = 0;\n                                                    v87 = v70;\n                                                }\n                                                else\n                                                {\n                                                    tmp_14 = v87;\n                                                    v90 = (unsigned int)v87 & 1;\n                                                    v91 = 0;\n                                                    v92 = tmp_14 >> 1 | v90;\n                                                    v87 = xmm0<16> * 2;\n                                                }\n                                            }\n                                        }\n                                        else\n                                        {\n                                            v78 = 0 - v87;\n                                            if (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x0<64>, Conv(32->64, ((xmm1lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n                                            {\n                                                v82 = 0;\n                                                v82 = v78;\n                                            }\n                                            else\n                                            {\n                                                tmp_14 = v82;\n                                                v83 = (unsigned int)v82 & 1;\n                                                v84 = 0;\n                                                v85 = tmp_14 >> 1 | v83;\n                                                v82 = xmm0<16> * 2;\n                                            }\n                                            v87 = v82 ^ 0x8000000000000000;\n                                            if (v75 != 0)\n                                            {\n                                                v95 = 0 - v87;\n                                                if (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x0<64>, Conv(32->64, ((xmm1lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n                                                {\n                                                    v100 = 0;\n                                                    v100 = v95;\n                                                }\n                                                else\n                                                {\n                                                    tmp_14 = v100;\n                                                    v101 = (unsigned int)v100 & 1;\n                                                    v102 = 0;\n                                                    v103 = tmp_14 >> 1 | v101;\n                                                    v100 = xmm1<16> * 2;\n                                                }\n                                                v96 = v100 ^ 0x8000000000000000;\n                                            }\n                                            else if (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x0<64>, Conv(32->64, ((xmm1lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n                                            {\n                                                v96 = 0;\n                                                v87 = v74;\n                                            }\n                                            else\n                                            {\n                                                tmp_14 = v87;\n                                                v97 = (unsigned int)v87 & 1;\n                                                v98 = 0;\n                                                v99 = tmp_14 >> 1 | v97;\n                                                v96 = xmm1<16> * 2;\n                                            }\n                                            v87 = v96 + v87;\n                                            if (((char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 2) & 1) != 0)\n                                            {\n                                                v104 = 0;\n                                                v105 = 0x3ff0000000000000;\n                                                v87 = v87 * 0x4059000000000000 / v87;\n                                                v87 = 0;\n                                                v87 = v87;\n                                                if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1 && ((char)(BinaryOp CmpF & 69) & 1) == 0)\n                                                {\n                                                    if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) == 1)\n                                                    {\n                                                        v87 = xmm1<16> + 0;\n                                                        v87 = v87;\n                                                    }\n                                                    else\n                                                    {\n                                                        v87 = xmm3<16> + xmm1<16>;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                if (*((long long *)(v69 + 48)) > -3 || *((long long *)(v69 + 24)) > -3)\n                                {\n                                    v107 = strdup(\"-\");\n                                    v3 = v107;\n                                    v109 = v107;\n                                }\n                                v72 = sub_40a790();\n                                v88 = v72;\n                                v3 = v72;\n                                if (*((long long *)(v69 + 16)) <= -3)\n                                {\n                                    v76 = (unsigned int)sub_403ed0();\n                                }\n                            }\n                        }\n                    }\n                    v37 = free(v0);\n                }\n            }\n        }\n    }\n    return v37;\n}\n"
        },
        {
            "funcName": "sub_405990",
            "funcStartAddr": "0x405990",
            "funcEndAddr": "0x4059a8",
            "decompiledFuncCode": "int sub_405990()\n{\n    unsigned long long v1;  // rax\n\n    v1 = sub_405a10();\n    if (v1 != 0)\n    {\n        return v1;\n    }\n    sub_40a7b0(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_409f0b",
            "funcStartAddr": "0x409f0b",
            "funcEndAddr": "0x409f0d",
            "decompiledFuncCode": "int sub_409f0b()\n{\n}\n"
        },
        {
            "funcName": "sub_406250",
            "funcStartAddr": "0x406250",
            "funcEndAddr": "0x40628f",
            "decompiledFuncCode": "int sub_406250()\n{\n    unsigned long long v1[5];  // rdi\n    unsigned long long *v2;  // rdx\n    unsigned long long v3;  // rax\n\n    if (v1[4] != 0)\n    {\n        v2 = *(v1);\n        if (*(v1) < v1[1])\n        {\n            while (true)\n            {\n                v3 = *(v2);\n                if (*(v2) == 0)\n                {\n                    v2 = &v2[2];\n                }\n                else\n                {\n                    return v3;\n                }\n            }\n        }\n        abort(); /* do not return */\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_406400",
            "funcStartAddr": "0x406400",
            "funcEndAddr": "0x406431",
            "decompiledFuncCode": "int sub_406400()\n{\n    void tmp_16;  // tmp #16\n    char *v1;  // rdi\n    unsigned long long v2;  // rcx\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rdx\n\n    v2 = *(v1);\n    v4 = 0;\n    if (*(v1) != 0)\n    {\n        do\n        {\n            v1 = &v1[1];\n            tmp_16 = v4 * 31 + v2;\n            v2 = *(v1);\n            v4 = (0 CONCAT tmp_16) % v3 >> 64;\n        }\n        while ((char)v2 != 0);\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_405fe0",
            "funcStartAddr": "0x405fe0",
            "funcEndAddr": "0x40602f",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_405fe0()\n{\n    unsigned long long v1[2];  // rdi\n    unsigned long long v2[2];  // rsi\n    unsigned long long v3;  // rdi\n    struct_0 *v4;  // rdx\n    unsigned long long v5;  // rcx\n    unsigned long long v6;  // rax\n\n    v2 = *(v1);\n    v3 = v1[1];\n    v6 = 0;\n    if (v2 >= v3)\n    {\n        return 0;\n    }\n    while (true)\n    {\n        if (*(v2) == 0)\n        {\n            v2 = &v2[2];\n            if (v2 >= v3)\n            {\n                break;\n            }\n        }\n        else\n        {\n            v4 = v2[1];\n            v5 = 1;\n            if (v2[1] != 0)\n            {\n                do\n                {\n                    v4 = v4->field_8;\n                    v5 += 1;\n                }\n                while (v4 != 0);\n            }\n            v6 = (v6 < v5? v5 : v6);\n            v2 = &v2[2];\n            if (v2 >= v3)\n            {\n                break;\n            }\n        }\n    }\n    return v6;\n}\n"
        },
        {
            "funcName": "sub_405bd0",
            "funcStartAddr": "0x405bd0",
            "funcEndAddr": "0x405c61",
            "decompiledFuncCode": "int sub_405bd0()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rcx\n    unsigned long v4;  // rdx\n    unsigned long long v5;  // rax\n    unsigned long long v6;  // r8\n    unsigned long long v7;  // rcx\n    unsigned long long v8;  // rdi\n\n    v2 = (10 <= v1? v1 : 10) | 1;\n    if (((10 <= v1? v1 : 10) | 1) != -1)\n    {\n        while (true)\n        {\n            v3 = v2 - (v2 * 12297829382473034411 >> 64 >> 1) * 3;\n            v5 = v2 - (v2 * 12297829382473034411 >> 64 >> 1) * 3;\n            if (v3 != 0 && v2 > 9)\n            {\n                v6 = 16;\n                v8 = 9;\n                v7 = 3;\n                do\n                {\n                    v7 += 2;\n                    v8 += v6;\n                    v4 = (0 CONCAT v2) % v7 >> 64;\n                    v5 = (0 CONCAT v2) % v7 >> 64;\n                    v6 += 8;\n                }\n                while (v8 < v2 && v4 != 0);\n                if (true)\n                {\n                    if (v5 != 0)\n                    {\n                        break;\n                    }\n                }\n                else if (v8 < v2)\n                {\n                    v2 += 2;\n                    if (v2 == -1)\n                    {\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40a5b0",
            "funcStartAddr": "0x40a5b0",
            "funcEndAddr": "0x40a5b2",
            "decompiledFuncCode": "int sub_40a5b0()\n{\n}\n"
        },
        {
            "funcName": "sub_4061f0",
            "funcStartAddr": "0x4061f0",
            "funcEndAddr": "0x40623b",
            "decompiledFuncCode": "int sub_4061f0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rsi\n    unsigned long long *v6;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long long v8[2];  // rbx\n    unsigned long long v9;  // rsi\n\n    v2 = v1;\n    v9 = *(v6);\n    if (*(v6) != 0)\n    {\n        v6 = sub_405c90();\n        while (true)\n        {\n            if (v9 != v1)\n            {\n                v1 = v3;\n                v7 = *((long long *)(r12<8> + 56))();\n                if (v7 == 0)\n                {\n                    v8 = v8[1];\n                    if (v8 == 0)\n                    {\n                        break;\n                    }\n                    v9 = *(v8);\n                }\n            }\n            if (v9 == v1 || v7 != 0)\n            {\n                return stack_base + 0;\n            }\n        }\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_406460",
            "funcStartAddr": "0x406460",
            "funcEndAddr": "0x4065e0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned int field_8;\n    char padding_c[4];\n    char field_10;\n} struct_0;\n\nextern int512_t g_405c70;\nextern int512_t g_405c80;\nextern int512_t g_412280;\n\nint sub_406460()\n{\n    unsigned long long v1;  // rbx\n    struct_0 *v2;  // rsi\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rax\n    uint128_t v5;  // xmm1\n    uint128_t v6;  // xmm0\n    unsigned int v8;  // ymm1\n    uint128_t v9;  // xmm0\n    unsigned long v10;  // rdi\n    unsigned int v11;  // ymm0\n    void v12;  // xmm0\n    unsigned long v13;  // rbp\n    unsigned long long v14;  // rax\n    unsigned long v16;  // rdx\n    unsigned long v17;  // rcx\n    unsigned long v18;  // r8\n    unsigned long long v19;  // rdi\n    unsigned long long v20;  // rax\n\n    v1 = malloc(0x50);\n    if (v1 != 0)\n    {\n        if (v2 != 0)\n        {\n            *((struct_0 **)(v1 + 40)) = v2;\n            v4 = sub_405de0();\n            if (v4 != 0 && v2->field_10 == 0)\n            {\n                v5 = 0;\n                v8 = v2->field_8;\n            }\n        }\n        else\n        {\n            *((long long **)(v1 + 40)) = &g_412280;\n            v3 = sub_405de0();\n            v5 = 0;\n            v8 = 6881500231684115661;\n        }\n        if ((v2 == 0 || v2->field_10 == 0) && (v2 == 0 || v4 != 0) && (v3 != 0 || v2 != 0))\n        {\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n            {\n                v6 = 0;\n                v6 = (unsigned int)v10;\n            }\n            else\n            {\n                v9 = 0;\n                v11 = v10 % 2 | (unsigned long long)((unsigned int)v10 & 1);\n                v6 = xmm0<16> * 2;\n            }\n            v12 = v6 / v8;\n        }\n        if ((((char)(BinaryOp CmpF & 69) & 1) == 0 || v2 != 0) && (((char)(BinaryOp CmpF & 69) & 1) == 0 || v2->field_10 != 0) && (v2 == 0 || v4 != 0) && (v3 != 0 || v2 != 0) && (v2 != 0 || ((char)(BinaryOp CmpF & 69) & 1) != 0) && (((char)(BinaryOp CmpF & 69) & 1) != 0 || v2->field_10 != 0))\n        {\n            v13 = (unsigned int)sub_405bd0();\n            if (((char)(v13 >> 60) & 1) == 0 && [D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>) == 0)\n            {\n                *((unsigned long *)(v1 + 16)) = v13;\n                if (v13 != 0)\n                {\n                    v14 = calloc(v13, 0x10);\n                    *((unsigned long long *)v1) = v14;\n                    if (v14 != 0)\n                    {\n                        *((long long *)(v1 + 24)) = 0;\n                        *((long long *)(v1 + 32)) = 0;\n                        *((unsigned long long *)(v1 + 8)) = v13 * 16 + v14;\n                        *((int *)(v1 + 48)) = (v16 == 0? &g_405c70 : v16);\n                        *((int *)(v1 + 56)) = (v17 == 0? &g_405c80 : v17);\n                        *((unsigned long *)(v1 + 64)) = v18;\n                        *((long long *)(v1 + 72)) = 0;\n                    }\n                }\n            }\n        }\n        if (...)\n        {\n            v19 = v1;\n            v1 = 0;\n            free(v19);\n        }\n    }\n    v20 = v1;\n    return v20;\n}\n"
        },
        {
            "funcName": "sub_409cd0",
            "funcStartAddr": "0x409cd0",
            "funcEndAddr": "0x409d3c",
            "decompiledFuncCode": "extern uint128_t g_617820;\nextern uint128_t g_617830;\nextern uint128_t g_617840;\nextern unsigned long long g_617850;\n\nint sub_409cd0()\n{\n    unsigned int|void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x20]\n    unsigned long v4;  // [bp-0x18]\n    unsigned long v6;  // rsi\n    unsigned long v7;  // rdx\n\n    *((uint128_t *)&v0) = g_617820;\n    *((uint128_t *)&v1) = g_617830;\n    *((uint128_t *)&v2) = g_617840;\n    v4 = g_617850;\n    v0 = 10;\n    if (v6 != 0 && v7 != 0)\n    {\n        v3 = v6;\n        v4 = v7;\n        return sub_409590();\n    }\n    if (v6 == 0 || v7 == 0)\n    {\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_40c620",
            "funcStartAddr": "0x40c620",
            "funcEndAddr": "0x40c65f",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    char padding_20[8];\n    char field_28;\n} struct_0;\n\nint sub_40c620()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    struct_0 *v3;  // rdi\n    struct_0 *v4;  // rbx\n\n    v0 = v2;\n    v4 = v3;\n    free(v3->field_0);\n    free(v4->field_8);\n    free(v4->field_10);\n    if ((v4->field_28 & 4) != 0)\n    {\n        free(v4->field_18);\n    }\n}\n"
        },
        {
            "funcName": "sub_40d6b0",
            "funcStartAddr": "0x40d6b0",
            "funcEndAddr": "0x40d78b",
            "decompiledFuncCode": "int sub_40d6b0()\n{\n    unsigned long v1;  // rdi\n    unsigned long v3;  // rsi\n    char *v4;  // r12\n    unsigned int *v5;  // rax\n    unsigned long long v6;  // rdi\n    void *v7;  // rax\n    char *v8;  // rbp\n    unsigned long long v9;  // rbx\n\n    v9 = (1025 <= v3? 1025 : v3 + 1);\n    while (true)\n    {\n        v7 = malloc(v9);\n        v8 = v7;\n        if (v7 == 0)\n        {\n            break;\n        }\n        while (true)\n        {\n            v4 = (unsigned long long)readlink(v1, (unsigned int)v7, v9);\n            if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, r12<8>, 0x0<64>, cc_ndep<8>))\n            {\n                v5 = __errno_location();\n                if (*(v5) != 34)\n                {\n                    free(v8);\n                }\n            }\n            if (*(v5) == 34 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, r12<8>, 0x0<64>, cc_ndep<8>)))\n            {\n                if (v9 <= v4)\n                {\n                    free(v8);\n                    if (v9 <= 4611686018427387903)\n                    {\n                        v9 *= 2;\n                        v6 = v9;\n                        v7 = malloc(v6);\n                        v8 = v7;\n                        if (v7 == 0)\n                        {\n                            break;\n                        }\n                    }\n                    else if (v9 <= 9223372036854775806)\n                    {\n                        v9 = 9223372036854775807;\n                    }\n                    else\n                    {\n                        *(__errno_location()) = 12;\n                    }\n                }\n                else\n                {\n                    *((char *)(v8 + v4)) = 0;\n                }\n            }\n        }\n        if (v9 <= v4 && v9 <= 9223372036854775806 && v9 > 4611686018427387903 && (*(v5) == 34 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, r12<8>, 0x0<64>, cc_ndep<8>))))\n        {\n            v7 = malloc(v9);\n        }\n        else if (v9 <= 4611686018427387903 || v9 > v4 || v9 > 9223372036854775806 || (char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, r12<8>, 0x0<64>, cc_ndep<8>) && *(v5) != 34)\n        {\n            return stack_base + 0;\n        }\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_4039f0",
            "funcStartAddr": "0x4039f0",
            "funcEndAddr": "0x4039fc",
            "decompiledFuncCode": "int sub_4039f0()\n{\n    unsigned long long *v1;  // rdi\n    unsigned long v2;  // rsi\n\n    return (0 CONCAT *(v1)) % v2 >> 64;\n}\n"
        },
        {
            "funcName": "sub_40c670",
            "funcStartAddr": "0x40c670",
            "funcEndAddr": "0x40ce02",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    char field_28;\n    char padding_29[7];\n    unsigned long long field_30;\n} struct_0;\n\nextern unsigned int g_413ab4;\nextern unsigned int g_413abe;\n\nint sub_40c670()\n{\n    char v0;  // [bp-0x89]\n    void tmp_18;  // tmp #18\n    char v1;  // [bp-0x79]\n    char v2;  // [bp-0x78]\n    char v3;  // [bp-0x74]\n    char v4;  // [bp-0x70]\n    char v5;  // [bp-0x6c]\n    char v6;  // [bp-0x68]\n    char v7;  // [bp-0x64]\n    char v8;  // [bp-0x60]\n    char v9;  // [bp-0x5c]\n    char v10;  // [bp-0x58]\n    char v11;  // [bp-0x54]\n    struct_0 *|unsigned long|unsigned long long v12;  // [bp-0x50]\n    unsigned long long v13;  // [bp-0x48]\n    unsigned long long v14;  // [bp-0x40]\n    char *v17;  // rbp\n    unsigned long long *|unsigned long long v18;  // r12\n    unsigned long long v19;  // rax\n    unsigned int v21;  // eax\n    char *v22;  // r15\n    unsigned int v23;  // eax\n    char *v28;  // rax\n    unsigned long long v30;  // rcx\n    unsigned long long v31;  // cc_dep1\n    unsigned long long v32;  // cc_dep2\n    unsigned long v33;  // d\n    unsigned long long v35;  // rcx\n    unsigned long long v36;  // cc_dep1\n    unsigned long long v37;  // cc_dep2\n    unsigned long long v39;  // rcx\n    unsigned long long v40;  // cc_dep1\n    unsigned long long v41;  // cc_dep2\n    unsigned long long v43;  // rcx\n    unsigned long long v44;  // cc_dep1\n    unsigned long long v45;  // cc_dep2\n    unsigned long long v47;  // rcx\n    unsigned long long v48;  // cc_dep1\n    unsigned long long v49;  // cc_dep2\n    unsigned long long v51;  // rcx\n    unsigned long long v52;  // cc_dep1\n    unsigned long long v53;  // cc_dep2\n    unsigned long long v55;  // cc_dep1\n    unsigned long long v56;  // cc_dep2\n    char *v57;  // rsi\n    unsigned long long v58;  // rcx\n    char v59[2];  // rdi\n    unsigned long long v61;  // rcx\n    unsigned long long v62;  // cc_dep1\n    unsigned long long v63;  // cc_dep2\n    unsigned long long v65;  // rcx\n    unsigned long long v66;  // cc_dep1\n    unsigned long long v67;  // cc_dep2\n    unsigned long long v69;  // rcx\n    unsigned long long v70;  // cc_dep1\n    unsigned long long v71;  // cc_dep2\n    unsigned long long v73;  // rcx\n    unsigned long long v74;  // cc_dep1\n    unsigned long long v75;  // cc_dep2\n    unsigned long long v77;  // rax\n    unsigned int|char v78;  // r13b\n    unsigned long long v79;  // rax\n    unsigned int *v80;  // r13\n    unsigned long long v81;  // rax\n    unsigned int v82;  // edx\n    char *v83;  // rdi\n    unsigned long long v84;  // rcx\n    unsigned long long v85;  // cc_dep1\n    unsigned long long v86;  // cc_dep2\n    unsigned long long v87;  // cc_dep1\n    char *v88;  // rdi\n    unsigned long long v89;  // rcx\n    unsigned long long v90;  // cc_dep1\n    unsigned long long v91;  // cc_dep2\n    char *v93;  // rsi\n    unsigned long long v94;  // rcx\n    char *v95;  // rdi\n    unsigned long long v96;  // cc_dep1\n    unsigned long long v97;  // cc_dep2\n    unsigned int v99;  // edx\n    unsigned long long v100;  // rax\n    unsigned long long v101;  // rax\n    unsigned int|unsigned long v102;  // ebp\n    unsigned long long v103;  // rax\n    unsigned int|unsigned long v104;  // r14\n    unsigned int *v105;  // r13\n    char *v108;  // rax\n    char *v109;  // rdi\n    unsigned long long v110;  // rcx\n    char *v111;  // rsi\n    unsigned int|unsigned long v113;  // rdx\n    unsigned long long v114;  // cc_dep1\n    unsigned long long v115;  // cc_dep2\n    unsigned long v116;  // d\n    char *v118;  // rdi\n    unsigned long long v119;  // rcx\n    unsigned long long v120;  // cc_dep1\n    unsigned long long v121;  // cc_dep2\n    char *v123;  // rdi\n    unsigned long long v124;  // rcx\n    unsigned long long v125;  // cc_dep1\n    unsigned long long v126;  // cc_dep2\n    char *v128;  // rdi\n    unsigned long long v129;  // rcx\n    unsigned long long v130;  // cc_dep1\n    unsigned long long v131;  // cc_dep2\n    char *v133;  // rdi\n    unsigned long long v134;  // rcx\n    unsigned long long v135;  // cc_dep1\n    unsigned long long v136;  // cc_dep2\n    char *v138;  // rdi\n    unsigned long long v139;  // rcx\n    unsigned long long v140;  // cc_dep1\n    unsigned long long v141;  // cc_dep2\n    char *v143;  // rdi\n    unsigned long long v144;  // rcx\n    unsigned long long v145;  // cc_dep1\n    unsigned long long v146;  // cc_dep2\n    char *v148;  // rdi\n    unsigned long long v149;  // rcx\n    unsigned long long v150;  // cc_dep1\n    unsigned long long v151;  // cc_dep2\n    char *v153;  // rdi\n    unsigned long long v154;  // rcx\n    unsigned long long v155;  // cc_dep1\n    unsigned long long v156;  // cc_dep2\n    char *v158;  // rdi\n    unsigned long long v159;  // rcx\n    unsigned long long v160;  // cc_dep1\n    unsigned long long v161;  // cc_dep2\n    char *v163;  // rdi\n    unsigned long long v164;  // rcx\n    unsigned long long v165;  // cc_dep1\n    unsigned long long v166;  // cc_dep2\n    unsigned long long v168;  // rax\n    unsigned long long v169;  // rax\n    char v170;  // al\n    char *v171;  // r15\n    char v172[2];  // rdi\n    unsigned int|char v174;  // edx\n    char *v175;  // rdi\n    unsigned long long v176;  // rcx\n    unsigned long long v177;  // cc_dep1\n    unsigned long long v178;  // cc_dep2\n    unsigned long long v179;  // cc_dep1\n    char *v180;  // rdi\n    unsigned long long v181;  // rcx\n    unsigned long long v182;  // cc_dep1\n    unsigned long long v183;  // cc_dep2\n    char *v185;  // rsi\n    unsigned long long v186;  // rcx\n    char *v187;  // rdi\n    unsigned long long v188;  // cc_dep1\n    unsigned long long v189;  // cc_dep2\n    unsigned int v191;  // edx\n    unsigned long long v192;  // rax\n    struct_0 *v193;  // rdi\n    unsigned long long v194;  // rbx\n\n    if (rbp<8> != 0)\n    {\n        v13 = 0;\n        rbp<8> = fopen(\"/proc/self/mountinfo\", \"r\");\n        v18 = &v12;\n        v14 = 0;\n        while (true)\n        {\n            if (__getdelim(&v13, &v14, 0xa, v17) != -1)\n            {\n                v21 = sscanf(v13, \"%*u %*u %u:%u %n%*s%n %n%*s%n%c\", (unsigned int)&v2, (unsigned int)&v3, (unsigned int)&v10, (unsigned int)&v11, (unsigned int)&v4, (unsigned int)&v5, (unsigned int)&v1) & -5;\n                v22 = (unsigned long long)(unsigned int)sub_40d2b0();\n                v23 = sscanf(v22, \" - %n%*s%n %n%*s%n %c\", (unsigned int)&v6, (unsigned int)&v7, (unsigned int)&v8, (unsigned int)&v9, (unsigned int)&v1) & -5;\n                v78 = 1;\n                *((char *)(v13 + *((int *)&v11))) = 0;\n                *((char *)(v13 + *((int *)&v5))) = 0;\n                v22[(long long)*((int *)&v7)] = 0;\n                v22[(long long)*((int *)&v9)] = 0;\n                sub_40c590();\n                sub_40c590();\n                sub_40c590();\n                *((unsigned long long *)v12) = (unsigned int)sub_40a790();\n                *((unsigned long long *)(v12 + 8)) = (unsigned int)sub_40a790();\n                *((unsigned long long *)(v12 + 16)) = (unsigned int)sub_40a790();\n                v28 = sub_40a790();\n                v59 = \"autofs\";\n                *((char **)(v12 + 24)) = v28;\n                *((char *)(v12 + 40)) = *((char *)(v12 + 40)) | 4;\n                v30 = 7;\n                v57 = v28;\n                while (v30 != 0)\n                {\n                    v30 -= 1;\n                    v31 = *(v57);\n                    v32 = v59[0];\n                    v59 = &v59[v33];\n                    v57 = &v57[v33];\n                    break;\n                }\n                *((unsigned long long *)(v12 + 32)) = (unsigned long long)(unsigned int)*((int *)&v3) * 0x1000 & 0xffffff00000 | (unsigned long long)(unsigned int)*((int *)&v2) * 0x100000000 & -0x100000000000 | (unsigned int)((unsigned long long)(unsigned int)*((int *)&v2) * 0x100) & 0xfff00 | (unsigned int)*((int *)&v3);\n                if ((v31 > v32) - 0 - (v31 < v32) != 0)\n                {\n                    v59 = \"proc\";\n                    v35 = 5;\n                    v57 = v28;\n                    while (v35 != 0)\n                    {\n                        v35 -= 1;\n                        v36 = *(v57);\n                        v37 = v59[0];\n                        v59 = &v59[v33];\n                        v57 = &v57[v33];\n                        break;\n                    }\n                    if ((v36 > v37) - 0 - (v36 < v37) != 0)\n                    {\n                        v59 = \"subfs\";\n                        v39 = 6;\n                        while (v39 != 0)\n                        {\n                            v39 -= 1;\n                            v40 = *(v57);\n                            v41 = v59[0];\n                            v59 = &v59[v33];\n                            v57 = &v57[v33];\n                            break;\n                        }\n                        if ((v40 > v41) - 0 - (v40 < v41) != 0)\n                        {\n                            v59 = \"debugfs\";\n                            v43 = 8;\n                            while (v43 != 0)\n                            {\n                                v43 -= 1;\n                                v44 = *(v57);\n                                v45 = v59[0];\n                                v59 = &v59[v33];\n                                v57 = &v57[v33];\n                                break;\n                            }\n                            if ((v44 > v45) - 0 - (v44 < v45) != 0)\n                            {\n                                v59 = \"devpts\";\n                                v47 = 7;\n                                while (v47 != 0)\n                                {\n                                    v47 -= 1;\n                                    v48 = *(v57);\n                                    v49 = v59[0];\n                                    v59 = &v59[v33];\n                                    v57 = &v57[v33];\n                                    break;\n                                }\n                                if ((v48 > v49) - 0 - (v48 < v49) != 0)\n                                {\n                                    v59 = \"fusectl\";\n                                    v51 = 8;\n                                    while (v51 != 0)\n                                    {\n                                        v51 -= 1;\n                                        v52 = *(v57);\n                                        v53 = v59[0];\n                                        v59 = &v59[v33];\n                                        v57 = &v57[v33];\n                                        break;\n                                    }\n                                    if ((v52 > v53) - 0 - (v52 < v53) != 0)\n                                    {\n                                        v59 = \"mqueue\";\n                                        v58 = 7;\n                                        while (v58 != 0)\n                                        {\n                                            v58 -= 1;\n                                            v55 = *(v57);\n                                            v56 = v59[0];\n                                            v59 = &v59[v33];\n                                            v57 = &v57[v33];\n                                            break;\n                                        }\n                                        if ((v55 > v56) - 0 - (v55 < v56) != 0)\n                                        {\n                                            v59 = \"rpc_pipefs\";\n                                            v61 = 11;\n                                            while (v61 != 0)\n                                            {\n                                                v61 -= 1;\n                                                v62 = *(v57);\n                                                v63 = v59[0];\n                                                v59 = &v59[v33];\n                                                v57 = &v57[v33];\n                                                break;\n                                            }\n                                            if ((v62 > v63) - 0 - (v62 < v63) != 0)\n                                            {\n                                                v59 = \"sysfs\";\n                                                v65 = 6;\n                                                while (v65 != 0)\n                                                {\n                                                    v65 -= 1;\n                                                    v66 = *(v57);\n                                                    v67 = v59[0];\n                                                    v59 = &v59[v33];\n                                                    v57 = &v57[v33];\n                                                    break;\n                                                }\n                                                if ((v66 > v67) - 0 - (v66 < v67) != 0)\n                                                {\n                                                    v59 = \"devfs\";\n                                                    v69 = 6;\n                                                    while (v69 != 0)\n                                                    {\n                                                        v69 -= 1;\n                                                        v70 = *(v57);\n                                                        v71 = v59[0];\n                                                        v59 = &v59[v33];\n                                                        v57 = &v57[v33];\n                                                        break;\n                                                    }\n                                                    if ((v70 > v71) - 0 - (v70 < v71) != 0)\n                                                    {\n                                                        v59 = \"kernfs\";\n                                                        v73 = 7;\n                                                        while (v73 != 0)\n                                                        {\n                                                            v73 -= 1;\n                                                            v74 = *(v57);\n                                                            v75 = v59[0];\n                                                            v59 = &v59[v33];\n                                                            v57 = &v57[v33];\n                                                            break;\n                                                        }\n                                                        if ((v74 > v75) - 0 - (v74 < v75) != 0)\n                                                        {\n                                                            v77 = strcmp(v57, \"ignore\");\n                                                            if (v77 != 0)\n                                                            {\n                                                                v78 = strcmp(v57, \"none\") == 0;\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                v79 = (char)(*((char *)(v12 + 40)) & 4294967038) | v78;\n                v80 = *((long long *)v12);\n                *((unsigned long long *)(v12 + 40)) = v79;\n                v81 = strchr(v59, 0x3a);\n                v82 = 1;\n                if (v81 == 0)\n                {\n                    if (v59[0] == 47 && v59[1] == 47)\n                    {\n                        v83 = \"smbfs\";\n                        v84 = 6;\n                        while (v84 != 0)\n                        {\n                            v84 -= 1;\n                            v85 = *(v57);\n                            v86 = *(v83);\n                            v83 = &v83[v33];\n                            v57 = &v57[v33];\n                            break;\n                        }\n                        v87 = (v85 > v86) - 0 - (v85 < v86);\n                        if ((char)v87 != 0)\n                        {\n                            v88 = \"cifs\";\n                            v89 = 5;\n                            while (v89 != 0)\n                            {\n                                v89 -= 1;\n                                v90 = *(v57);\n                                v91 = *(v88);\n                                v88 = &v88[v33];\n                                v57 = &v57[v33];\n                                break;\n                            }\n                        }\n                    }\n                    if (v59[0] != 47 || v59[1] != 47 || (char)v87 != 0 && (v90 > v91) - 0 - (v90 < v91) != 0)\n                    {\n                        v93 = \"-hosts\";\n                        v94 = 7;\n                        v59 = *((long long *)v12);\n                        while (v94 != 0)\n                        {\n                            v94 -= 1;\n                            v96 = *(v93);\n                            v97 = *(v95);\n                            v95 = &v95[v33];\n                            v93 = &v93[v33];\n                            break;\n                        }\n                        v82 = (char)(((unsigned long long)((v96 > v97) - 0 - (v96 < v97)) & 255) == 0);\n                    }\n                }\n                v99 = v82 * 2;\n                *((char *)(v12 + 40)) = (char)(*((char *)(v12 + 40)) & 4294967037) | v99;\n                v12 = (unsigned int)sub_40a560();\n                v18 = v12 + 48;\n            }\n            else\n            {\n                free(v13);\n                if ((*(v17) & 32) == 0)\n                {\n                    v103 = sub_40e240();\n                    break;\n                }\n                else\n                {\n                    v104 = *(v80);\n                    v80 = __errno_location();\n                    sub_40e240();\n                    *(v105) = v104;\n                }\n            }\n        }\n        if ((*(v17) & 32) == 0)\n        {\n            v104 = *(v80);\n            v80 = __errno_location();\n        }\n        else if ((*(v17) & 32) != 0)\n        {\n            *(v18) = 0;\n            v193 = v12;\n        }\n        else if ((*(v17) & 32) == 0)\n        {\n            *(v18) = 0;\n            v100 = v12;\n        }\n    }\n    else\n    {\n        v19 = setmntent(0x413ab4, 0x412205);\n        v80 = (unsigned int)v19;\n        if (v19 != 0)\n        {\n            v18 = &v12;\n            v101 = getmntent(v80);\n            v102 = v101;\n            if (v101 != 0)\n            {\n                while (true)\n                {\n                    hasmntopt(v102, 0x413abe);\n                    *((unsigned long long *)v12) = (unsigned int)sub_40a790();\n                    *((long long *)(v12 + 16)) = 0;\n                    *((unsigned long long *)(v12 + 8)) = (unsigned int)sub_40a790();\n                    v108 = sub_40a790();\n                    v109 = \"autofs\";\n                    v110 = 7;\n                    *((char *)(v12 + 40)) = *((char *)(v12 + 40)) | 4;\n                    v111 = v108;\n                    *((char **)(v12 + 24)) = v108;\n                    v113 = 1;\n                    while (v110 != 0)\n                    {\n                        v110 -= 1;\n                        v114 = *(v111);\n                        v115 = *(v109);\n                        v109 = &v109[v116];\n                        v111 = &v111[v116];\n                        break;\n                    }\n                    if ((v114 > v115) - 0 - (v114 < v115) != 0)\n                    {\n                        v118 = \"proc\";\n                        v119 = 5;\n                        v111 = v108;\n                        while (v119 != 0)\n                        {\n                            v119 -= 1;\n                            v120 = *(v111);\n                            v121 = *(v118);\n                            v118 = &v118[v116];\n                            v111 = &v111[v116];\n                            break;\n                        }\n                        if ((v120 > v121) - 0 - (v120 < v121) != 0)\n                        {\n                            v123 = \"subfs\";\n                            v124 = 6;\n                            while (v124 != 0)\n                            {\n                                v124 -= 1;\n                                v125 = *(v111);\n                                v126 = *(v123);\n                                v123 = &v123[v116];\n                                v111 = &v111[v116];\n                                break;\n                            }\n                            if ((v125 > v126) - 0 - (v125 < v126) != 0)\n                            {\n                                v128 = \"debugfs\";\n                                v129 = 8;\n                                while (v129 != 0)\n                                {\n                                    v129 -= 1;\n                                    v130 = *(v111);\n                                    v131 = *(v128);\n                                    v128 = &v128[v116];\n                                    v111 = &v111[v116];\n                                    break;\n                                }\n                                if ((v130 > v131) - 0 - (v130 < v131) != 0)\n                                {\n                                    v133 = \"devpts\";\n                                    v134 = 7;\n                                    while (v134 != 0)\n                                    {\n                                        v134 -= 1;\n                                        v135 = *(v111);\n                                        v136 = *(v133);\n                                        v133 = &v133[v116];\n                                        v111 = &v111[v116];\n                                        break;\n                                    }\n                                    if ((v135 > v136) - 0 - (v135 < v136) != 0)\n                                    {\n                                        v138 = \"fusectl\";\n                                        v139 = 8;\n                                        while (v139 != 0)\n                                        {\n                                            v139 -= 1;\n                                            v140 = *(v111);\n                                            v141 = *(v138);\n                                            v138 = &v138[v116];\n                                            v111 = &v111[v116];\n                                            break;\n                                        }\n                                        if ((v140 > v141) - 0 - (v140 < v141) != 0)\n                                        {\n                                            v143 = \"mqueue\";\n                                            v144 = 7;\n                                            while (v144 != 0)\n                                            {\n                                                v144 -= 1;\n                                                v145 = *(v111);\n                                                v146 = *(v143);\n                                                v143 = &v143[v116];\n                                                v111 = &v111[v116];\n                                                break;\n                                            }\n                                            if ((v145 > v146) - 0 - (v145 < v146) != 0)\n                                            {\n                                                v148 = \"rpc_pipefs\";\n                                                v149 = 11;\n                                                while (v149 != 0)\n                                                {\n                                                    v149 -= 1;\n                                                    v150 = *(v111);\n                                                    v151 = *(v148);\n                                                    v148 = &v148[v116];\n                                                    v111 = &v111[v116];\n                                                    break;\n                                                }\n                                                if ((v150 > v151) - 0 - (v150 < v151) != 0)\n                                                {\n                                                    v153 = \"sysfs\";\n                                                    v154 = 6;\n                                                    while (v154 != 0)\n                                                    {\n                                                        v154 -= 1;\n                                                        v155 = *(v111);\n                                                        v156 = *(v153);\n                                                        v153 = &v153[v116];\n                                                        v111 = &v111[v116];\n                                                        break;\n                                                    }\n                                                    if ((v155 > v156) - 0 - (v155 < v156) != 0)\n                                                    {\n                                                        v158 = \"devfs\";\n                                                        v159 = 6;\n                                                        while (v159 != 0)\n                                                        {\n                                                            v159 -= 1;\n                                                            v160 = *(v111);\n                                                            v161 = *(v158);\n                                                            v158 = &v158[v116];\n                                                            v111 = &v111[v116];\n                                                            break;\n                                                        }\n                                                        if ((v160 > v161) - 0 - (v160 < v161) != 0)\n                                                        {\n                                                            v163 = \"kernfs\";\n                                                            v164 = 7;\n                                                            while (v164 != 0)\n                                                            {\n                                                                v164 -= 1;\n                                                                v165 = *(v111);\n                                                                v166 = *(v163);\n                                                                v163 = &v163[v116];\n                                                                v111 = &v111[v116];\n                                                                break;\n                                                            }\n                                                            if ((v165 > v166) - 0 - (v165 < v166) != 0)\n                                                            {\n                                                                v0 = 1;\n                                                                v168 = strcmp(v111, \"ignore\");\n                                                                v113 = v0;\n                                                                if (v168 != 0)\n                                                                {\n                                                                    v169 = strcmp(v111, \"none\");\n                                                                    v170 = v169 == 0;\n                                                                    v113 = 1 & rax<4>;\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    v171 = *((long long *)v12);\n                    v172 = *((long long *)v12);\n                    *((char *)(v12 + 40)) = (char)(*((char *)(v12 + 40)) & 4294967038) | v113;\n                    v174 = 1;\n                    if (strchr(v172, 0x3a) == 0)\n                    {\n                        if (v172[0] == 47 && v172[1] == 47)\n                        {\n                            v175 = \"smbfs\";\n                            v176 = 6;\n                            while (v176 != 0)\n                            {\n                                v176 -= 1;\n                                v177 = *(v111);\n                                v178 = *(v175);\n                                v175 = &v175[v116];\n                                v111 = &v111[v116];\n                                break;\n                            }\n                            v179 = (v177 > v178) - 0 - (v177 < v178);\n                            if ((char)v179 != 0)\n                            {\n                                v180 = \"cifs\";\n                                v181 = 5;\n                                while (v181 != 0)\n                                {\n                                    v181 -= 1;\n                                    v182 = *(v111);\n                                    v183 = *(v180);\n                                    v180 = &v180[v116];\n                                    v111 = &v111[v116];\n                                    break;\n                                }\n                            }\n                        }\n                        if (v172[0] != 47 || v172[1] != 47 || (char)v179 != 0 && (v182 > v183) - 0 - (v182 < v183) != 0)\n                        {\n                            v185 = \"-hosts\";\n                            v186 = 7;\n                            v172 = v171;\n                            while (v186 != 0)\n                            {\n                                v186 -= 1;\n                                v188 = *(v185);\n                                v189 = *(v187);\n                                v187 = &v187[v116];\n                                v185 = &v185[v116];\n                                break;\n                            }\n                            v174 = ((unsigned long long)((v188 > v189) - 0 - (v188 < v189)) & 255) == 0;\n                        }\n                    }\n                    tmp_18 = (char)*((char *)(v12 + 40));\n                    v191 = v174 * 2;\n                    *((long long *)(v12 + 32)) = -1;\n                    *((char *)(v12 + 40)) = (unsigned int)tmp_18 & -3 | v191;\n                    v12 = (unsigned int)sub_40a560();\n                    v18 = v12 + 48;\n                    v102 = getmntent(v80);\n                    if (v102 == 0)\n                    {\n                        break;\n                    }\n                }\n            }\n            v192 = endmntent(v80);\n        }\n        else\n        {\n            v100 = 0;\n        }\n    }\n    if (rbp<8> != 0 || v19 != 0 && v192 != 0)\n    {\n        *(v18) = 0;\n        v100 = v12;\n    }\n    if (rbp<8> != 0 || v192 == 0 && v19 != 0)\n    {\n        v104 = *(v80);\n        v80 = __errno_location();\n        *(v18) = 0;\n        v193 = v12;\n        if (v12 != 0)\n        {\n            while (true)\n            {\n                v194 = v193->field_30;\n                sub_40c620();\n                v12 = v194;\n                v193 = v194;\n                if (v194 == 0)\n                {\n                    break;\n                }\n            }\n        }\n        *((unsigned long *)&v105) = v104;\n        return 0;\n    }\n    if (v192 != 0)\n    {\n        return v100;\n    }\n}\n"
        },
        {
            "funcName": "sub_40a7f0",
            "funcStartAddr": "0x40a7f0",
            "funcEndAddr": "0x40a816",
            "decompiledFuncCode": "int sub_40a7f0()\n{\n    unsigned long v2;  // rax\n    unsigned int *v3;  // rax\n    unsigned long long v5;  // rax\n\n    if (v2 == 0)\n    {\n        v3 = __errno_location();\n        if (*(v3) == 12)\n        {\n            sub_40a7b0(); /* do not return */\n        }\n    }\n    if (*(v3) != 12 || v2 != 0)\n    {\n        v2 = (unsigned int)sub_40b160();\n        return v5;\n    }\n}\n"
        },
        {
            "funcName": "sub_405fb0",
            "funcStartAddr": "0x405fb0",
            "funcEndAddr": "0x405fb5",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_0;\n\nint sub_405fb0()\n{\n    struct_0 *v1;  // rdi\n\n    return v1->field_10;\n}\n"
        },
        {
            "funcName": "sub_40a4e0",
            "funcStartAddr": "0x40a4e0",
            "funcEndAddr": "0x40a554",
            "decompiledFuncCode": "extern unsigned int g_413112;\nextern unsigned int g_41313d;\nextern unsigned int g_413370;\n\nint sub_40a4e0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x413112, 0x5));\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x41313d, 0x5));\n    dcgettext(0x0, 0x413370, 0x5);\n}\n"
        },
        {
            "funcName": "sub_40e2c0",
            "funcStartAddr": "0x40e2c0",
            "funcEndAddr": "0x40e2fb",
            "decompiledFuncCode": "int sub_40e2c0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned int *v3;  // rdi\n\n    v0 = v2;\n    if (v3 != 0 && __freading() != 0 && ((unsigned short)*(v3) & 0x100) != 0)\n    {\n        sub_40e300();\n    }\n}\n"
        },
        {
            "funcName": "sub_40a760",
            "funcStartAddr": "0x40a760",
            "funcEndAddr": "0x40a788",
            "decompiledFuncCode": "int sub_40a760()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_40a560();\n}\n"
        },
        {
            "funcName": "sub_409da0",
            "funcStartAddr": "0x409da0",
            "funcEndAddr": "0x409db2",
            "decompiledFuncCode": "int sub_409da0()\n{\n}\n"
        },
        {
            "funcName": "sub_408360",
            "funcStartAddr": "0x408360",
            "funcEndAddr": "0x409498",
            "decompiledFuncCode": "int sub_408360()\n{\n    unsigned long long v0;  // [bp-0x1e8]\n    void tmp_38;  // tmp #38\n    unsigned int *|unsigned long long v1;  // [bp-0xe8]\n    unsigned long long v2;  // [bp-0xe0]\n    unsigned long long v3;  // [bp-0xd8]\n    char|unsigned long|unsigned long long v4;  // [bp-0xc0]\n    char|unsigned long|unsigned long long v5;  // [bp-0xb8]\n    char v6;  // [bp-0xa9]\n    unsigned long v7;  // [bp-0xa8]\n    unsigned long long v8;  // [bp-0xa0]\n    char|unsigned long long v9;  // [bp-0x98]\n    unsigned int|unsigned long|unsigned long long v10;  // [bp-0x90]\n    unsigned int|unsigned long long v11;  // [bp-0x88]\n    unsigned int|unsigned long long v12;  // [bp-0x80]\n    unsigned long long v13;  // [bp-0x78]\n    unsigned long long v14;  // [bp-0x70]\n    unsigned long v15;  // [bp-0x68]\n    unsigned int v16;  // [bp-0x60]\n    char v17;  // [bp-0x5c]\n    char v18;  // [bp-0x5b]\n    unsigned long long v19;  // [bp-0x5a]\n    char v20;  // [bp-0x59]\n    unsigned long long v21;  // [bp-0x58]\n    unsigned long long v22;  // [bp-0x50]\n    char v23;  // [bp-0x44]\n    unsigned long long v24;  // [bp-0x40]\n    unsigned int *v25;  // [bp+0x8]\n    unsigned long long v26;  // [bp+0x10]\n    unsigned long long v27;  // [bp+0x18]\n    unsigned long long v28;  // rdi\n    unsigned long long v29;  // r15\n    unsigned long v30;  // r8\n    unsigned long long v31;  // rcx\n    unsigned long v32;  // r9\n    char|unsigned long|unsigned long long v33;  // r10\n    unsigned long long v34;  // rbp\n    unsigned long long v35;  // r13\n    unsigned long long v36;  // r13\n    unsigned long long v37;  // r8\n    unsigned long long v38;  // r9\n    unsigned long|unsigned long long v39;  // r11\n    unsigned long|unsigned long long v40;  // rbp\n    unsigned long long v41;  // rax\n    unsigned long long v42;  // rax\n    char v43;  // al\n    unsigned long v44;  // rdx\n    unsigned long long v45;  // rcx\n    unsigned short|unsigned long|unsigned long long v46;  // rax\n    unsigned long long v47;  // rcx\n    unsigned long long v48;  // r13\n    unsigned long long v49;  // r13\n    unsigned long long v50;  // r13\n    char v51;  // r13b\n    unsigned long long v52;  // r13\n    unsigned long long v53;  // rdx\n    unsigned long long v54;  // rbx\n    unsigned long long v55;  // r13\n    unsigned long long v56;  // r15\n    unsigned long long v57;  // rbp\n    unsigned long long v58;  // r14\n    char *v59;  // rax\n    unsigned long long v60;  // rcx\n    unsigned long long v62;  // r13\n    unsigned long v63;  // r13\n    unsigned long long v64;  // rcx\n    char v65;  // al\n    char v66;  // al\n    unsigned int v67;  // eax\n    char v68;  // al\n    unsigned int v70;  // eax\n    char v71;  // al\n    unsigned long v72;  // rdx\n    unsigned long long v73;  // rax\n    char v74;  // al\n    unsigned long long v75;  // rdx\n    unsigned long long v76;  // rbx\n    unsigned int|char|unsigned long|unsigned long long v77;  // rsi\n    unsigned int|char|unsigned long|unsigned long long v78;  // r13\n    unsigned long long v79;  // r14\n    unsigned long|unsigned long long v80;  // r12\n    unsigned int v81;  // r13d\n    unsigned long long v82;  // r11\n    char v83;  // dl\n    char|unsigned long v84;  // rax\n    unsigned long long v85;  // cc_dep1\n    char|unsigned long v86;  // dl\n    unsigned long long v87;  // rax\n    unsigned long long v88;  // rax\n    unsigned long long v89;  // rdx\n    unsigned long long v90;  // rax\n    unsigned long long v91;  // rax\n\n    v29 = v28;\n    v79 = v77;\n    v78 = v30;\n    v7 = v77;\n    v4 = v31;\n    v16 = v32;\n    v15 = __ctype_get_mb_cur_max();\n    v17 = ((unsigned int)v32 & 2) != 0;\n    switch ((unsigned int)v30)\n    {\n    case 0:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 0;\n        v8 = 0;\n        v13 = 0;\n    case 1:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 0;\n        v8 = 1;\n        v13 = \"'\";\n    case 2:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 0;\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v76 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 0;\n            v8 = 1;\n            v13 = \"'\";\n        }\n    case 3:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"'\";\n    case 4:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 1;\n            if (v77 == 0)\n            {\n                v6 = 1;\n                v33 = 0;\n                v76 = 1;\n                v78 = 2;\n                v14 = 0;\n                v18 = 0;\n                v17 = 0;\n                v8 = 1;\n                v13 = \"'\";\n            }\n            else\n            {\n                v84 = 0;\n                v6 = 1;\n                v14 = 0;\n            }\n        }\n    case 5:\n        if (((char)v32 & 2) == 0)\n        {\n            if (v77 != 0)\n            {\n                *((char *)v28) = 34;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n                v14 = 0;\n            }\n            else\n            {\n                v14 = 0;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n            }\n            v17 = 0;\n            v76 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v76 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n    case 6:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 5;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"\\\"\";\n    case 7:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 1;\n        v8 = 0;\n        v13 = 0;\n    case 8: case 9: case 10:\n        if (v30 != 10)\n        {\n            v4 = v4;\n            v26 = (unsigned int)sub_408260();\n            v27 = (unsigned int)sub_408260();\n        }\n        v76 = 0;\n        if (((char)v32 & 2) == 0)\n        {\n            v78 = (char)*((char *)v26);\n            if (*((char *)v26) != 0)\n            {\n                do\n                {\n                    if (v77 > v76)\n                    {\n                        *((unsigned long long *)(v28 + v76)) = v78;\n                    }\n                    v76 += 1;\n                    v78 = (char)*((char *)(v26 + v76));\n                }\n                while ((char)v78 != 0);\n            }\n        }\n        v5 = v82;\n        v6 = 1;\n        v8 = strlen(v27);\n        v18 = 0;\n        v13 = v27;\n        v14 = 0;\n        v4 = 1;\n    default:\n        abort(); /* do not return */\n    }\n    v82 = v4;\n    while (true)\n    {\n        v38 = v82;\n        v80 = 0;\n        v39 = v78;\n        while (true)\n        {\n            v78 = v38 != v80;\n            if (v38 == -1)\n            {\n                v78 = *((char *)(v7 + v80)) != 0;\n            }\n            if (v78 != 0)\n            {\n                v37 = v7 + v80;\n                v5 = (unsigned int)v39 != 2 & v4;\n                if (((unsigned int)v39 != 2 & v4) != 0)\n                {\n                    v78 = v8;\n                    if (v8 != 0)\n                    {\n                        v34 = v80 + v78;\n                        if (v38 == -1 && v78 > 1)\n                        {\n                            v11 = v39;\n                            v10 = v33;\n                            v9 = v37;\n                            v38 = strlen(v7);\n                        }\n                        if (v34 <= v38)\n                        {\n                            v12 = v39;\n                            v11 = v38;\n                            v10 = v33;\n                            v9 = v37;\n                            v78 = memcmp(v37, v13, v8);\n                            v37 = v9;\n                            v33 = (char)v10;\n                            v38 = v11;\n                            v39 = v12;\n                            if (v17 == 0 && v78 == 0)\n                            {\n                                v40 = (char)*((char *)v37);\n                                switch (*((char *)v37))\n                                {\n                                case 0:\n                                    v77 = (unsigned int)v39 == 2;\n                                    v78 = (unsigned int)(0 ^ 1);\n                                    v78 = (char)(0 ^ 1) & (unsigned int)v39 == 2;\n                                    if (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0)\n                                    {\n                                        if (v77 > v76)\n                                        {\n                                            *((char *)(v28 + v76)) = 39;\n                                        }\n                                        if (v77 > v76 + 1)\n                                        {\n                                            *((char *)(v28 + v76 + 1)) = 36;\n                                        }\n                                        if (v77 > v76 + 2)\n                                        {\n                                            *((char *)(v28 + v76 + 2)) = 39;\n                                        }\n                                        v47 = v76 + 3;\n                                        v76 += 4;\n                                        v33 = rax<8>;\n                                        v78 = 0;\n                                        v40 = 48;\n                                    }\n                                    else\n                                    {\n                                        v47 = v76;\n                                        v78 = 0;\n                                        v76 = v47 + 1;\n                                        v78 = v78;\n                                        v40 = 48;\n                                        v78 = 0;\n                                        v40 = 48;\n                                        if (1 < v38)\n                                        {\n                                            v9 = *((char *)(v7 + 0 + 1));\n                                            if (((unsigned int)(char)*((char *)(v7 + 0 + 1)) - 48 & 255) <= 9)\n                                            {\n                                                if (v77 > v76)\n                                                {\n                                                    *((char *)(v28 + v76)) = 48;\n                                                }\n                                                if (v77 > v47 + 2)\n                                                {\n                                                    *((char *)(v28 + v47 + 2)) = 48;\n                                                }\n                                                v76 = v47 + 3;\n                                                v40 = 48;\n                                            }\n                                        }\n                                        v78 = v78;\n                                        v78 = 0;\n                                    }\n                                    if ((v77 > v76 || ((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0) && (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) == 0 || v77 > v76 + 3))\n                                    {\n                                        *((char *)(v28 + v47)) = 92;\n                                        v33 = v78;\n                                    }\n                                case 7:\n                                    v40 = 97;\n                                case 8:\n                                    v77 = 0;\n                                    v78 = 0;\n                                    v40 = 98;\n                                case 13:\n                                    v40 = 13;\n                                    v45 = 114;\n                                    v77 = (unsigned int)v39 == 2;\n                                case 32:\n                                    v41 = v5;\n                                case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                                    v77 = 0;\n                                case 35: case 126:\n                                    v42 = v5;\n                                case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                                    v41 = v5;\n                                case 92:\n                                    v44 = v4;\n                                    v40 = 92;\n                                    v45 = 92;\n                                    v77 = v4 & v17 & v8 != 0;\n                                    if ((v4 & v17 & v8 != 0) != 0)\n                                    {\n                                        v80 = 1;\n                                        v46 = 0;\n                                        v78 = 0;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (v8 == 0 || v78 != 0 || v34 > v38)\n                    {\n                        v40 = (char)*((char *)v37);\n                        switch (*((char *)v37))\n                        {\n                        case 0:\n                            if (v17 == 0)\n                            {\n                                v5 = 0;\n                            }\n                            else\n                            {\n                                v4 = (unsigned int)v39 == 2;\n                            }\n                        case 7:\n                            v40 = 97;\n                            break;\n                        case 8:\n                            v40 = 98;\n                        case 9:\n                            v40 = 116;\n                        case 10:\n                            v40 = 110;\n                            v77 = 0;\n                            v78 = 0;\n                        case 11:\n                            v40 = 118;\n                            break;\n                        case 12:\n                            v40 = 102;\n                            break;\n                            if (v17 == 0)\n                            {\n                                v78 = 0;\n                            }\n                            else\n                            {\n                                v87 = 0;\n                            }\n                        case 13:\n                            v5 = 0;\n                        case 32:\n                            v41 = 0;\n                            v40 = 32;\n                        case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                            v5 = 0;\n                        case 35: case 126:\n                            v42 = 0;\n                            v48 = v5;\n                            v77 = 0;\n                            v5 = v42;\n                        case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                            v41 = 0;\n                            v50 = v5;\n                            v5 = v41;\n                            v78 = 0;\n                            if (v25 != 0)\n                            {\n                                v72 = (unsigned int)((unsigned long long)v25[v40 % 32] >> ((char)v40 & 31)) & 1;\n                                v77 = (unsigned int)v39 == 2;\n                            }\n                            else\n                            {\n                                v77 = (unsigned int)v39 == 2;\n                                v80 += 1;\n                                v46 = (v78 ^ 1) & (unsigned int)v33;\n                                if (v46 != 0)\n                                {\n                                    if (v79 > v76)\n                                    {\n                                        *((char *)(v29 + v76)) = 39;\n                                    }\n                                    if (v79 > v76 + 1)\n                                    {\n                                        *((char *)(v29 + v76 + 1)) = 39;\n                                    }\n                                    v76 += 2;\n                                    v33 = 0;\n                                }\n                                v87 = v77;\n                                v73 = (unsigned int)v33 ^ 1;\n                                v74 = (char)((unsigned int)v33 ^ 1) & v77;\n                                if (((char)((unsigned int)v33 ^ 1) & v77) != 0)\n                                {\n                                    if (v79 > v76)\n                                    {\n                                        *((char *)(v29 + v76)) = 39;\n                                    }\n                                    if (v76 + 1 < v79)\n                                    {\n                                        *((char *)(v29 + v76 + 1)) = 36;\n                                    }\n                                    v75 = v76 + 2;\n                                    if (v76 + 2 < v79)\n                                    {\n                                        *((char *)(v29 + v76 + 2)) = 39;\n                                    }\n                                    v76 += 3;\n                                    v33 = rax<8>;\n                                }\n                                *((unsigned long long *)&v4) = v4 & v87;\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 92;\n                                }\n                                v76 += 1;\n                                v80 += 1;\n                            }\n                        case 39:\n                            v5 = 0;\n                        case 63:\n                            v5 = 0;\n                        case 92:\n                            v5 = 0;\n                        case 123: case 125:\n                            v5 = 0;\n                        default:\n                            v5 = 0;\n                        }\n                    }\n                }\n                else\n                {\n                    v40 = (char)*((char *)v37);\n                    switch (*((char *)v37))\n                    {\n                    case 0:\n                        if (v4 == 0)\n                        {\n                            v80 += 1;\n                            v5 = 0;\n                            v77 = (unsigned int)v39 == 2;\n                            v36 = 0;\n                            v40 = 0;\n                            break;\n                        }\n                    case 7:\n                        v40 = 7;\n                        v45 = 97;\n                        v77 = (unsigned int)v39 == 2;\n                    case 8:\n                        v40 = 8;\n                        v45 = 98;\n                        v77 = (unsigned int)v39 == 2;\n                    case 9:\n                        v40 = 9;\n                        v45 = 116;\n                        v77 = (unsigned int)v39 == 2;\n                        v5 = v17 & (unsigned int)v39 == 2;\n                        if ((v17 & (unsigned int)v39 == 2) == 0)\n                        {\n                            v40 = v45;\n                            v78 = 0;\n                            v55 = 0;\n                            break;\n                            v78 = ((unsigned int)v4 ^ 1 | (unsigned int)v77) ^ 1;\n                            v78 = (char)(((unsigned int)v4 ^ 1 | (unsigned int)v77) ^ 1) | v17;\n                            v78 = 0;\n                        }\n                    case 10:\n                        v40 = 10;\n                        v45 = 110;\n                    case 11:\n                        v40 = 11;\n                        v45 = 118;\n                        v77 = (unsigned int)v39 == 2;\n                    case 12:\n                        v40 = 12;\n                        v45 = 102;\n                        v77 = (unsigned int)v39 == 2;\n                    case 13:\n                        v40 = 13;\n                        v45 = 114;\n                    case 32:\n                        v40 = 32;\n                        v77 = (unsigned int)v39 == 2;\n                    case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                        v77 = (unsigned int)v39 == 2;\n                        v35 = 0;\n                    case 35: case 126:\n                        v77 = (unsigned int)v39 == 2;\n                    case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                        v77 = (unsigned int)v39 == 2;\n                        break;\n                    case 39:\n                        if ((unsigned int)v39 == 2)\n                        {\n                            if (v77 != 0)\n                            {\n                                v53 = 0;\n                            }\n                            if (v77 == 0 || v14 != 0)\n                            {\n                                if (v77 > v76)\n                                {\n                                    *((char *)(v28 + v76)) = 39;\n                                }\n                                if (v77 > v76 + 1)\n                                {\n                                    *((char *)(v28 + v76 + 1)) = 92;\n                                }\n                                if (v77 > v76 + 2)\n                                {\n                                    v53 = v77;\n                                    *((char *)(v28 + v76 + 2)) = 39;\n                                    v79 = v14;\n                                }\n                                else\n                                {\n                                    v53 = v77;\n                                    v79 = v14;\n                                }\n                            }\n                            v18 = v78;\n                            v76 += 3;\n                            v78 = 0;\n                            v33 = 0;\n                            v14 = v79;\n                            v40 = 39;\n                            v79 = v53;\n                        }\n                        else\n                        {\n                            v18 = v78;\n                            v77 = 0;\n                            v40 = 39;\n                            break;\n                        }\n                    case 63:\n                        if ((unsigned int)v39 != 2)\n                        {\n                            v40 = 63;\n                            v77 = (unsigned int)v39 == 2;\n                            v52 = 0;\n                            break;\n                            v77 = v7;\n                            v40 = (char)*((char *)(v77 + 2));\n                            v77 = 0x7000a38200000000;\n                            v0 = 0x7000a38200000000;\n                            v77 = 0;\n                            v62 = 0;\n                            v40 = 63;\n                            break;\n                            if (v79 > v76)\n                            {\n                                *((char *)(v28 + v76)) = 63;\n                            }\n                            if (v79 > v76 + 1)\n                            {\n                                *((char *)(v28 + v76 + 1)) = 34;\n                            }\n                            if (v79 > v76 + 2)\n                            {\n                                *((char *)(v28 + v76 + 2)) = 34;\n                            }\n                            if (v79 > v76 + 3)\n                            {\n                                *((char *)(v28 + v76 + 3)) = 63;\n                            }\n                            v76 += 4;\n                            v77 = 0;\n                            v78 = 0;\n                            v80 = 2;\n                        }\n                        else\n                        {\n                            v78 = 0;\n                            v78 = 0;\n                            v40 = 63;\n                        }\n                    case 92:\n                        if ((unsigned int)v39 == 2)\n                        {\n                            v80 += 1;\n                            v46 = v33;\n                            v78 = 0;\n                            v40 = 92;\n                        }\n                    case 123: case 125:\n                        v43 = v38 != 1;\n                        if (v38 == -1)\n                        {\n                            v43 = *((char *)(v7 + 1)) != 0;\n                        }\n                        v77 = (unsigned int)v39 == 2;\n                        if (v43 == 0)\n                        {\n                            break;\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v81 = v39;\n                v82 = v38;\n                v83 = v81 == 2;\n                if ((v81 == 2 & v17) == 0 || v76 != 0)\n                {\n                    v84 = (unsigned int)v17 ^ 1;\n                    v85 = v83 & (char)((unsigned int)v17 ^ 1);\n                    v86 = v83 & (char)((unsigned int)v17 ^ 1);\n                    if ((char)v85 == 0)\n                    {\n                        v86 = v84;\n                    }\n                    else if (v18 != 0)\n                    {\n                        if (v6 == 0)\n                        {\n                            v84 = v79 == 0 & v14 != 0;\n                            if ((v79 == 0 & v14 != 0) == 0)\n                            {\n                                v86 = v18;\n                            }\n                        }\n                        else\n                        {\n                            v3 = v27;\n                            v2 = v26;\n                            v1 = v25;\n                            v76 = (unsigned int)sub_408360();\n                        }\n                    }\n                }\n            }\n            if (v6 == 0 && v78 == 0 && (char)v85 != 0 && v18 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && (v79 == 0 & v14 != 0) == 0 || (char)v85 == 0 && v78 == 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || v78 == 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && v18 == 0)\n            {\n                v88 = v13;\n                if (v13 != 0 && v86 != 0)\n                {\n                    v89 = (char)*((char *)v88);\n                    if (*((char *)v88) != 0)\n                    {\n                        v90 = v88 - v76;\n                        do\n                        {\n                            if (v79 > v76)\n                            {\n                                *((unsigned long long *)(v29 + v76)) = v89;\n                            }\n                            v76 += 1;\n                            v89 = (char)*((char *)(v90 + v76));\n                        }\n                        while ((char)v89 != 0);\n                    }\n                }\n                if (v79 > v76)\n                {\n                    *((char *)(v29 + v76)) = 0;\n                }\n            }\n            if (v15 == 1)\n            {\n                v11 = v39;\n                v10 = v38;\n                v9 = v33;\n                v46 = (unsigned short)*((short *)(*((long long *)(unsigned long long)__ctype_b_loc()) + v40 * 2));\n                tmp_38 = v46 & 0x4000;\n                v46 &= 0x4000;\n                v51 = (tmp_38 & 65535) != 0;\n                v77 = (tmp_38 & 65535) == 0 & v4;\n                if (v77 != 0)\n                {\n                    v77 = v4;\n                    v78 = 0;\n                }\n            }\n            else\n            {\n                v24 = 0;\n                if (v38 == -1)\n                {\n                    v11 = v39;\n                    v10 = v33;\n                    v9 = v37;\n                    v38 = strlen(v7);\n                }\n                v21 = v76;\n                v22 = v37;\n                v54 = 0;\n                v19 = v33;\n                *((unsigned long long *)&v20) = v40;\n                v11 = v29;\n                v12 = v79;\n                v9 = v38;\n                *((unsigned long *)&v10) = v39;\n                do\n                {\n                    v56 = v80 + v54;\n                    v57 = v7 + v80 + v54;\n                    v46 = sub_40c400();\n                    v58 = v46;\n                    if (v46 != -1 && v46 != -2 && v46 != 0)\n                    {\n                        if (v10 == 2 && v17 != 0 && v46 != 1)\n                        {\n                            v59 = v7 + v77 + 1;\n                            v77 = v7 + v58 + v77;\n                            while (true)\n                            {\n                                v60 = (unsigned int)*(v59) - 91;\n                                if ((8589934635 & 1 << (v60 & 63)) == 0 || ((unsigned int)*(v59) - 91 & 255) > 33)\n                                {\n                                    v59 = &v59[1];\n                                    if (v77 == v59)\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                            if ((8589934635 & 1 << (v60 & 63)) == 0 || ((unsigned int)*(v59) - 91 & 255) > 33)\n                            {\n                                v78 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                                v54 += v58;\n                                v46 = mbsinit((unsigned int)&v24);\n                            }\n                        }\n                        v78 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                        v54 += v58;\n                        v46 = mbsinit((unsigned int)&v24);\n                    }\n                    if (v46 == -1)\n                    {\n                        v28 = v54;\n                        v40 = v20;\n                        v76 = v21;\n                        v78 = 0;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v79 = v12;\n                        v38 = v9;\n                        v39 = v10;\n                        v77 = v4;\n                    }\n                    if (v46 == -2)\n                    {\n                        v38 = v9;\n                        v77 = v56;\n                        v46 = v54;\n                        v28 = v54;\n                        v33 = (char)v19;\n                        v40 = v20;\n                        v76 = v21;\n                        v29 = v11;\n                        v79 = v12;\n                        v39 = v10;\n                        if (v77 < v9 && *((char *)v57) != 0)\n                        {\n                            do\n                            {\n                                v46 += 1;\n                            }\n                            while (v46 < v9 && *((char *)(v22 + v46)) != 0);\n                            v28 = v46;\n                        }\n                        v77 = v4;\n                        v78 = 0;\n                    }\n                    if (v46 == 0 || (unsigned int)v46 != 0 && v46 != -1 && v46 != -2)\n                    {\n                        v28 = v54;\n                        v40 = v20;\n                        v76 = v21;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v77 = (unsigned int)v78 ^ 1;\n                        v79 = v12;\n                        v38 = v9;\n                        v39 = v10;\n                        v77 = (char)((unsigned int)v78 ^ 1) & v4;\n                    }\n                }\n                while (v28 <= 1);\n                if (v46 == -1 || v46 == -2 || v46 == 0 || (unsigned int)v46 != 0)\n                {\n                    v9 = v78;\n                    v77 = 0;\n                    v63 = v17;\n                    v64 = v28 + v80;\n                    v28 = v5;\n                }\n            }\n            if (false)\n            {\n                v5 = v42;\n                v49 = 0;\n            }\n            if (v77 != 0)\n            {\n                v9 = v78;\n                v77 = 0;\n                v63 = v17;\n                v64 = v28 + v80;\n                v28 = v5;\n                while (true)\n                {\n                    if (v77 != 0)\n                    {\n                        v65 = (unsigned int)v39 == 2;\n                        if (v63 == 0)\n                        {\n                            v77 = (unsigned int)v33 ^ 1;\n                            v66 = v4 & (char)((unsigned int)v33 ^ 1);\n                            if ((v4 & (char)((unsigned int)v33 ^ 1)) != 0)\n                            {\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 39;\n                                }\n                                if (v79 > v76 + 1)\n                                {\n                                    *((char *)(v29 + v76 + 1)) = 36;\n                                }\n                                v77 = v76 + 2;\n                                if (v79 > v76 + 2)\n                                {\n                                    *((char *)(v29 + v76 + 2)) = 39;\n                                }\n                                v76 += 3;\n                                v33 = v46;\n                            }\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            if (v79 > v76 + 1)\n                            {\n                                v67 = v40;\n                                v68 = (char)v40 % 64;\n                                *((unsigned long long *)(v29 + v76 + 1)) = (unsigned long long)(unsigned int)rax<4> + 48;\n                            }\n                            v46 = v76 + 2;\n                            if (v79 > v76 + 2)\n                            {\n                                v70 = v40;\n                                v71 = (char)v40 % 8;\n                                v46 = (unsigned int)((rax<4> & 7) + 48);\n                                *((unsigned long long *)(v29 + v76 + 2)) = v46;\n                            }\n                            v80 += 1;\n                            v76 += 3;\n                            v40 = ((unsigned int)v40 & 7) + 48;\n                            if (v80 < v64)\n                            {\n                                v77 = v77;\n                            }\n                            else\n                            {\n                                v78 = (char)v9;\n                            }\n                        }\n                        else\n                        {\n                            v4 = v65;\n                        }\n                    }\n                    else\n                    {\n                        v46 = (v77 ^ 1) & (unsigned int)v33;\n                        if (v28 != 0)\n                        {\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            v76 += 1;\n                        }\n                        v80 += 1;\n                        if (v80 >= v64)\n                        {\n                            v78 = (char)v9;\n                        }\n                        else if (v46 != 0)\n                        {\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 39;\n                            }\n                            v46 = v76 + 1;\n                            if (v79 > v76 + 1)\n                            {\n                                *((char *)(v29 + v76 + 1)) = 39;\n                            }\n                            v76 += 2;\n                            v28 = 0;\n                            v33 = 0;\n                        }\n                        else\n                        {\n                            v28 = 0;\n                        }\n                    }\n                    if ((v77 == 0 || v80 < v64) && (v77 == 0 || v63 == 0) && (v80 < v64 || v77 != 0))\n                    {\n                        if (v79 > v76)\n                        {\n                            *((unsigned long long *)(v29 + v76)) = v40;\n                        }\n                        v40 = (char)*((char *)(v7 + v80));\n                        v76 += 1;\n                    }\n                }\n            }\n            if ((v25 == 0 || v76 == 0) && (v25 == 0 || v78 == 0) && (v25 == 0 || (v81 == 2 & v17) != 0) && (v76 == 0 || v17 != 0) && (v76 == 0 || v5 != 0) && (v78 == 0 || v17 != 0) && (v78 == 0 || v5 != 0) && (v17 != 0 || (v81 == 2 & v17) != 0) && ((v81 == 2 & v17) != 0 || v5 != 0))\n            {\n                v3 = v27;\n                v2 = v26;\n                v1 = 0;\n                v76 = (unsigned int)sub_408360();\n            }\n            if ((v25 == 0 || v46 == 0) && (v25 == 0 || v77 != 0) && (v46 == 0 || v17 == 0 || v5 == 0) && (v17 == 0 || v5 == 0 || v77 != 0))\n            {\n                if (v76 < v79)\n                {\n                    *((unsigned long long *)(v29 + v76)) = v40;\n                }\n                v76 += 1;\n                v6 = (v78 == 0? 0 : (unsigned int)(char)(char)(stack_base)[-169]);\n            }\n            if (v6 == 0 && v78 == 0 && (char)v85 != 0 && v18 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && (v79 == 0 & v14 != 0) == 0 || (char)v85 == 0 && v78 == 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || v78 == 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && v18 == 0 || v78 == 0 && v6 != 0 && (char)v85 != 0 && v18 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || (v25 == 0 || v76 == 0) && (v25 == 0 || v78 == 0) && (v25 == 0 || (v81 == 2 & v17) != 0) && (v76 == 0 || v17 != 0) && (v76 == 0 || v5 != 0) && (v78 == 0 || v17 != 0) && (v78 == 0 || v5 != 0) && (v17 != 0 || (v81 == 2 & v17) != 0) && ((v81 == 2 & v17) != 0 || v5 != 0))\n            {\n                v91 = v76;\n                return v91;\n            }\n        }\n        *((char *)v29) = 39;\n        v78 = 2;\n        v13 = \"'\";\n        v8 = 1;\n        v17 = 0;\n        *((unsigned long *)&v18) = v84;\n    }\n}\n"
        },
        {
            "funcName": "sub_407980",
            "funcStartAddr": "0x407980",
            "funcEndAddr": "0x407b11",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[4268768];\n    unsigned int field_4122e0;\n} struct_0;\n\nextern int512_t g_4122e0;\n\nint sub_407980()\n{\n    unsigned long v0;  // [bp-0x30]\n    unsigned int *v2;  // rsi\n    unsigned long long *v4;  // rdx\n    unsigned long long v6;  // rdi\n    unsigned long long v7;  // rax\n    char *v8;  // rbx\n    unsigned long long v9;  // rbp\n    struct_0 *v10;  // rax\n    unsigned int v11;  // ebp\n    unsigned long long v12;  // rdx\n    unsigned long long v13;  // rsi\n\n    v8 = v6;\n    if (v6 == 0)\n    {\n        v8 = getenv(\"BLOCK_SIZE\");\n        if (v8 == 0)\n        {\n            v8 = getenv(\"BLOCKSIZE\");\n            if (v8 == 0)\n            {\n                v7 = getenv(\"POSIXLY_CORRECT\");\n                if (v7 != 0)\n                {\n                    *(v4) = 0x200;\n                    v7 = 0;\n                    *(v2) = 0;\n                }\n                else\n                {\n                    *(v4) = 0x400;\n                    *(v2) = 0;\n                }\n            }\n        }\n    }\n    if (v6 != 0 || v8 != 0 || v8 != 0)\n    {\n        v9 = 0;\n        if (*(v8) == 39)\n        {\n            v8 = &v8[1];\n            v9 = 4;\n        }\n        v10 = sub_40d7b0();\n        if ((unsigned int)v10 >= 0)\n        {\n            *(v4) = 1;\n            v11 = (unsigned int)v9 | *((int *)(0x4 * v10 + (char *)&g_4122e0));\n            v7 = 0;\n            *(v2) = v11;\n        }\n        else\n        {\n            v7 = sub_40a8b0();\n            if ((unsigned int)v7 == 0)\n            {\n                if (((unsigned long long)*(v8) - 48 & 255) > 9)\n                {\n                    if (v8 != v0)\n                    {\n                        do\n                        {\n                            v8 = &v8[1];\n                            v13 = *(v8);\n                        }\n                        while (v8 != v0 && (v13 - 48 & 255) > 9);\n                        if ((v13 - 48 & 255) > 9)\n                        {\n                        }\n                        else\n                        {\n                            v12 = *(v4);\n                            *((unsigned long long *)&v2) = v9;\n                        }\n                    }\n                    if (v8 == v0 || *((char *)(v0 - 1)) != 66)\n                    {\n                        if (*((char *)(v0 - 1)) != 66)\n                        {\n                            v9 |= 128;\n                        }\n                        else\n                        {\n                            v9 = (unsigned int)v9 | 384;\n                        }\n                        if (*((char *)(v0 - 2)) == 105 || *((char *)(v0 - 1)) != 66)\n                        {\n                            v9 = (unsigned int)v9 | 32;\n                        }\n                    }\n                }\n                v12 = *(v4);\n                *((unsigned long long *)&v2) = v9;\n            }\n            else\n            {\n                *(v2) = 0;\n                v12 = *(v4);\n            }\n            if (v12 == 0)\n            {\n                *(v4) = (unsigned long long)((unsigned int)(0 - (unsigned long long)(char)(getenv(\"POSIXLY_CORRECT\") < 1)) & 0x200) + 0x200;\n                return 4;\n            }\n        }\n    }\n    if ((unsigned int)v10 >= 0 || v12 != 0 || v6 == 0 && v8 == 0 && v8 == 0)\n    {\n        return v7;\n    }\n}\n"
        },
        {
            "funcName": "sub_405a70",
            "funcStartAddr": "0x405a70",
            "funcEndAddr": "0x405ac2",
            "decompiledFuncCode": "int sub_405a70()\n{\n    char *v1;  // rdi\n    unsigned long long v2;  // rdx\n    unsigned long long v3;  // rsi\n    char *v4;  // rcx\n    char *v5;  // rax\n\n    v2 = *(v1);\n    v5 = v1;\n    if (*(v1) == 47)\n    {\n        do\n        {\n            v5 = &v5[1];\n            v2 = *(v5);\n        }\n        while (*(v5) == 47);\n    }\n    if (v2 != 0)\n    {\n        v4 = v5;\n        v3 = 0;\n        while (true)\n        {\n            if (v2 != 47)\n            {\n                if (v3 != 0)\n                {\n                    v5 = v4;\n                    v3 = 0;\n                }\n                v4 = &v4[1];\n                v2 = *(v4);\n                if ((char)v2 == 0)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v4 = &v4[1];\n                v2 = *(v4);\n                v3 = 1;\n                if ((char)v2 == 0)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    return v5;\n}\n"
        },
        {
            "funcName": "sub_409c50",
            "funcStartAddr": "0x409c50",
            "funcEndAddr": "0x409c5a",
            "decompiledFuncCode": "int sub_409c50()\n{\n}\n"
        },
        {
            "funcName": "sub_410f88",
            "funcStartAddr": "0x410f88",
            "funcEndAddr": "0x410fa8",
            "decompiledFuncCode": "extern unsigned long long g_616e30;\n\nint sub_410f88()\n{\n    unsigned long long *v1;  // rbx\n    unsigned long long v2;  // rax\n    unsigned long v4;  // rdx\n\n    v1 = &g_616e30;\n    while (true)\n    {\n        v2 = *(v1);\n        if (*(v1) == -1)\n        {\n            break;\n        }\n        rax<8>();\n        v1 = &v1[-1];\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_409d90",
            "funcStartAddr": "0x409d90",
            "funcEndAddr": "0x409d9a",
            "decompiledFuncCode": "int sub_409d90()\n{\n}\n"
        },
        {
            "funcName": "sub_40d950",
            "funcStartAddr": "0x40d950",
            "funcEndAddr": "0x40da5f",
            "decompiledFuncCode": "extern unsigned int g_413b20;\nextern unsigned int g_413b35;\nextern unsigned int g_413b3d;\nextern unsigned long long stderr[7];\n\nint sub_40d950()\n{\n    unsigned long long v1;  // r14\n    void *v2;  // rsi\n    unsigned long long v4[2];  // rdi\n    unsigned int v5;  // rdx\n    unsigned long long v6;  // rax\n    void *v7;  // rbp\n    unsigned long long v8;  // rbx\n    unsigned int v9;  // r8d\n    unsigned int v10;  // r9d\n    char *v11;  // rax\n\n    v1 = 0;\n    v7 = v2;\n    v8 = 0;\n    fputs_unlocked((unsigned long long)dcgettext(0x0, 0x413b20, 0x5), stderr);\n    if (*(v4) != 0)\n    {\n        while (true)\n        {\n            if (v8 != 0)\n            {\n                v6 = memcmp(v1, v7, v5);\n                if (v6 == 0)\n                {\n                    v8 += 1;\n                    v7 += v5;\n                    __fprintf_chk((unsigned int)stderr, 0x1, 0x413b3d, sub_409de0(), v9, v10);\n                    if (v4[v8] == 0)\n                    {\n                        break;\n                    }\n                }\n            }\n            if (v8 == 0 || v6 != 0)\n            {\n                v8 += 1;\n                v1 = v7;\n                v7 += v5;\n                __fprintf_chk((unsigned int)stderr, 0x1, 0x413b35, sub_409de0(), v9, v10);\n                if (v4[v8] == 0)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    v11 = stderr[5];\n    if (stderr[5] < stderr[6])\n    {\n        stderr[5] = stderr[5] + 1;\n        *(v11) = 10;\n        return v11;\n    }\n}\n"
        },
        {
            "funcName": "sub_409820",
            "funcStartAddr": "0x409820",
            "funcEndAddr": "0x409892",
            "decompiledFuncCode": "extern int512_t g_617820;\n\nint sub_409820()\n{\n    unsigned long v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned long v2;  // [bp-0x58]\n    unsigned long v3;  // [bp-0x40]\n    unsigned int v5;  // [bp+0x100008]\n    unsigned long v6;  // r8\n    unsigned long long v7[7];  // rbx\n    unsigned long v8;  // rcx\n\n    v7 = (v6 == 0? &g_617820 : v6);\n    v3 = v8;\n    *((unsigned long long [7])&v2) = v7[6];\n    *((unsigned long long [7])&v1) = v7[5];\n    v0 = &v7[1];\n    *(__errno_location()) = v5;\n    return sub_408360();\n}\n"
        },
        {
            "funcName": "sub_40a420",
            "funcStartAddr": "0x40a420",
            "funcEndAddr": "0x40a4d8",
            "decompiledFuncCode": "int sub_40a420()\n{\n    unsigned int v0;  // [bp-0xa0]\n    void tmp_12;  // tmp #12\n    void tmp_8;  // tmp #8\n    unsigned long v1;  // [bp-0x98]\n    unsigned long long v2;  // [bp-0x90]\n    unsigned long v3;  // [bp-0x88]\n    unsigned long long v4;  // [bp-0x18]\n    unsigned long v5;  // [bp-0x10]\n    unsigned long long v6;  // [bp+0x8]\n    char v7;  // [bp+0x10]\n    unsigned long long v8;  // r11\n    unsigned long long v9;  // r8\n    unsigned long v10;  // r9\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // r8\n    unsigned long long|unsigned long long * v14;  // r10\n    unsigned long long v15;  // r9\n\n    v8 = 0;\n    v4 = v9;\n    v14 = &v6;\n    v13 = 32;\n    v1 = &v6;\n    v5 = v10;\n    v15 = 0;\n    v0 = 32;\n    v2 = stack_base + -56;\n    while (true)\n    {\n        if ((unsigned int)v13 <= 47)\n        {\n            tmp_12 = v13;\n            v13 = (unsigned int)v13 + 8;\n            v8 = 1;\n            v11 = v4;\n            v3 = v4;\n        }\n        else\n        {\n            tmp_8 = v14;\n            v14 = &v7;\n            v12 = v6;\n            v3 = v6;\n        }\n        if ((unsigned int)v13 <= 47 && v11 != 0 || (unsigned int)v13 > 47 && v12 != 0)\n        {\n            v15 += 1;\n        }\n        if (v8 != 0)\n        {\n            v0 = v13;\n        }\n        return sub_409fc0();\n    }\n}\n"
        },
        {
            "funcName": "sub_40a710",
            "funcStartAddr": "0x40a710",
            "funcEndAddr": "0x40a727",
            "decompiledFuncCode": "int sub_40a710()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_40a560();\n}\n"
        },
        {
            "funcName": "sub_4099a0",
            "funcStartAddr": "0x4099a0",
            "funcEndAddr": "0x409a35",
            "decompiledFuncCode": "extern unsigned long long *g_6175b8;\nextern unsigned long long g_6175c0;\nextern unsigned long long g_6175c8;\nextern unsigned int g_6175d0;\nextern unsigned long long g_617720;\n\nint sub_4099a0()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rbx\n    void *v3;  // rdi\n\n    v1 = g_6175d0;\n    if (g_6175d0 > 1)\n    {\n        v2 = &g_6175b8[3];\n        while (true)\n        {\n            v3 = *(v2);\n            v2 = &v2[2];\n            v1 = free(v3);\n            if (v2 == &g_6175b8[2 * (unsigned long long)(g_6175d0 - 2) + 5])\n            {\n                break;\n            }\n        }\n    }\n    if (g_6175b8[1] != 6387488)\n    {\n        v1 = free(g_6175b8[1]);\n        g_6175c0 = 0x100;\n        g_6175c8 = &g_617720;\n    }\n    if (g_6175b8 != 6387136)\n    {\n        v1 = free(g_6175b8);\n        g_6175b8 = &g_6175c0;\n    }\n    g_6175d0 = 1;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_40a560",
            "funcStartAddr": "0x40a560",
            "funcEndAddr": "0x40a57a",
            "decompiledFuncCode": "int sub_40a560()\n{\n    unsigned int v1;  // rdi\n    unsigned long long v2;  // rax\n\n    v2 = malloc(v1);\n    if (v2 == 0 && v1 != 0)\n    {\n        sub_40a7b0(); /* do not return */\n    }\n    if (v1 == 0 || v2 != 0)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_4058f0",
            "funcStartAddr": "0x4058f0",
            "funcEndAddr": "0x40598e",
            "decompiledFuncCode": "extern unsigned int g_4121fb;\nextern unsigned int g_617568;\nextern char g_6176f8;\nextern unsigned long long g_617700;\n\nint sub_4058f0()\n{\n    unsigned long long v1;  // rax\n    unsigned int *v2;  // rbx\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rbp\n\n    v1 = sub_40db30();\n    if (v1 != 0)\n    {\n        v2 = __errno_location();\n        if (g_6176f8 == 0 || *(v2) != 32)\n        {\n            v4 = dcgettext(0x0, 0x4121fb, 0x5);\n            if (g_617700 != 0)\n            {\n                sub_409c30();\n                error(0x0, *(v2), \"%s: %s\");\n            }\n        }\n    }\n    if (v1 == 0 || *(v2) == 32 && g_6176f8 != 0)\n    {\n        v3 = sub_40db30();\n    }\n    if ((unsigned int)v3 == 0 && (*(v2) == 32 || v1 == 0) && (v1 == 0 || g_6176f8 != 0))\n    {\n        return v3;\n    }\n    while (true)\n    {\n        _exit(g_617568);\n        error(0x0, *(v2), \"%s\");\n    }\n}\n"
        },
        {
            "funcName": "sub_403ad0",
            "funcStartAddr": "0x403ad0",
            "funcEndAddr": "0x403b48",
            "decompiledFuncCode": "extern unsigned long long g_617640;\nextern unsigned long long g_617648;\n\nint sub_403ad0()\n{\n    void tmp_25;  // tmp #25\n    unsigned long long v2;  // rax\n\n    tmp_25 = g_617640 + 1;\n    g_617640 = g_617640 + 1;\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(Load(addr=0x617650<64>, size=8, endness=Iend_LE), 0x3<8>), Shl(Load(addr=0x617650<64>, size=8, endness=Iend_LE), 0x2<8>), cc_ndep<8>)) && [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(Load(addr=0x617650<64>, size=8, endness=Iend_LE), 0x3d<8>), Shr(Load(addr=0x617650<64>, size=8, endness=Iend_LE), 0x3c<8>), cc_ndep<8>) == 0)\n    {\n        g_617648 = (unsigned int)sub_40a5c0();\n        v2 = sub_40a560();\n        *((unsigned long long *)(g_617648 + g_617640 * 8 - 8)) = v2;\n        return v2;\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(Load(addr=0x617650<64>, size=8, endness=Iend_LE), 0x3<8>), Shl(Load(addr=0x617650<64>, size=8, endness=Iend_LE), 0x2<8>), cc_ndep<8>) || [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(Load(addr=0x617650<64>, size=8, endness=Iend_LE), 0x3d<8>), Shr(Load(addr=0x617650<64>, size=8, endness=Iend_LE), 0x3c<8>), cc_ndep<8>) != 0)\n    {\n        sub_40a7b0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_409d40",
            "funcStartAddr": "0x409d40",
            "funcEndAddr": "0x409d49",
            "decompiledFuncCode": "int sub_409d40()\n{\n}\n"
        },
        {
            "funcName": "sub_40b160",
            "funcStartAddr": "0x40b160",
            "funcEndAddr": "0x40b605",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    char padding_8[11];\n    char field_13;\n    char field_14;\n} struct_0;\n\nextern unsigned int g_41218c;\nextern unsigned int g_41236e;\n\nint sub_40b160()\n{\n    unsigned int|unsigned long long v0;  // [bp-0x120]\n    unsigned long long v1;  // [bp-0x118]\n    void *|unsigned long long v2;  // [bp-0x110]\n    void *v3;  // [bp-0x108]\n    unsigned long long v4;  // [bp-0x100]\n    char v5;  // [bp-0xe9]\n    char *|unsigned long v6;  // [bp-0xe8]\n    unsigned long long v7;  // [bp-0xe0]\n    unsigned long v8;  // [bp-0xd8]\n    unsigned long v9;  // [bp-0xd0]\n    char v10;  // [bp-0xc8]\n    unsigned long long v11;  // [bp-0xc0]\n    unsigned int v12;  // [bp-0xb0]\n    void *v14;  // rdi\n    unsigned int v15;  // rsi\n    unsigned long long v16;  // rbx\n    unsigned long long v17;  // rax\n    unsigned long long v18;  // r15\n    unsigned long long v19;  // r14\n    unsigned long long v20;  // rax\n    unsigned long long v21;  // r15\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // rbp\n    unsigned long long v25;  // r13\n    struct_0 *v26;  // rax\n    unsigned long long v27;  // rdx\n    void *v28;  // rbx\n    unsigned long long v29;  // rax\n    unsigned long long v30;  // r13\n    unsigned long v31;  // r14\n    unsigned int v32;  // rax\n    unsigned long long v34;  // r8\n    unsigned long v39;  // rbx\n    unsigned long v40;  // rdx\n    unsigned int|unsigned long long v42;  // rbx\n    unsigned int *v43;  // r12\n\n    v3 = v14;\n    if (v15 == 0)\n    {\n        v4 = 0x1000;\n        if (v14 != 0)\n        {\n            v2 = 0;\n            *(__errno_location()) = 22;\n        }\n    }\n    else\n    {\n        *((unsigned int *)&v4) = v15;\n        if (v3 != 0)\n        {\n            v2 = v3;\n        }\n    }\n    if (v15 == 0 && v14 == 0 || v3 == 0 && v15 != 0)\n    {\n        v2 = malloc(v4);\n    }\n    if (v14 == 0 && v2 != 0 || v15 != 0 && v3 != 0 || v15 != 0 && v2 != 0)\n    {\n        v16 = v2 + v4;\n        *((char *)(v2 + v4 - 1)) = 0;\n        v17 = __lxstat(0x1, 0x41218c, (unsigned int)&v10);\n        if (v17 >= 0)\n        {\n            v18 = *((long long *)&v10);\n            v19 = v11;\n            v0 = *((long long *)&v10);\n            v20 = __lxstat(0x1, 0x41236e, (unsigned int)&v10);\n            if (v20 >= 0)\n            {\n                v6 = v16 - 1;\n                v8 = v11;\n                v7 = *((long long *)&v10);\n                v5 = *((long long *)&v10) != *((long long *)&v10) | v11 != v11;\n                if (v19 != v11 || v18 != *((long long *)&v10))\n                {\n                    v24 = 0;\n                    v21 = -18446744069414584420;\n                    v43 = __errno_location();\n                    while (true)\n                    {\n                        v21 = openat(v21);\n                        if (v21 >= 0)\n                        {\n                            v22 = __fxstat(0x1, v21, (unsigned int)&v10);\n                            if (v22 == 0)\n                            {\n                                if (v24 != 0)\n                                {\n                                    v23 = closedir();\n                                }\n                                if (v24 == 0 || v23 == 0)\n                                {\n                                    v1 = *((long long *)&v10);\n                                    v9 = v11;\n                                    v24 = fdopendir(v21);\n                                    if (v24 != 0)\n                                    {\n                                        v25 = v5;\n                                        while (true)\n                                        {\n                                            *(v43) = 0;\n                                            v26 = readdir();\n                                            if (v26 == 0)\n                                            {\n                                                v42 = *(v43);\n                                                if (*(v43) == 0 && v25 != 0)\n                                                {\n                                                    rewinddir(v24);\n                                                    v26 = readdir();\n                                                    if (v26 != 0)\n                                                    {\n                                                        v25 = 0;\n                                                    }\n                                                    else\n                                                    {\n                                                        v42 = *(v43);\n                                                    }\n                                                }\n                                                if (v26 == 0 || v25 == 0 || *(v43) != 0)\n                                                {\n                                                    if ((unsigned int)v42 != 0)\n                                                    {\n                                                        break;\n                                                    }\n                                                    *(v43) = 2;\n                                                    v42 = 2;\n                                                }\n                                            }\n                                            if (v26 != 0 || *(v43) == 0 && v26 != 0 && v25 != 0)\n                                            {\n                                                if (v25 != 0 && (v26->field_13 == 46 || v26 != 0) && (v26->field_13 != 46 || v26->field_14 != 0) && (v26->field_13 != 46 || *((short *)&v26->field_14) != 46) && (v26->field_14 != 0 || v26 != 0) && (*((short *)&v26->field_14) != 46 || v26 != 0))\n                                                {\n                                                    v25 = v27;\n                                                }\n                                                if ((v26 == 0 || v26->field_13 != 46 || v26->field_14 != 0) && (v26 == 0 || v26->field_13 != 46 || *((short *)&v26->field_14) != 46) && (v26->field_13 != 46 || v26->field_14 != 0 || v26 != 0) && (v26->field_13 != 46 || *((short *)&v26->field_14) != 46 || v26 != 0))\n                                                {\n                                                    v28 = &v26->field_13;\n                                                    v29 = __fxstatat(0x1, v21, (unsigned int)v26 + 19, (unsigned int)&v10, 0x100);\n                                                    v30 = &v6[-1 * v2];\n                                                    v31 = strlen(v28);\n                                                    if (v30 <= v31)\n                                                    {\n                                                        if (v15 == 0)\n                                                        {\n                                                            v32 = v4 + (v4 <= v31? v31 : v4);\n                                                            *((int *)&v6) = (v4 <= v31? v31 : v4);\n                                                            *((unsigned long long *)&v0) = v4 + (v4 <= v31? v31 : v4);\n                                                            if (!((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, Load(addr=stack_base-256, size=8, endness=Iend_LE), (((Load(addr=stack_base-256, size=8, endness=Iend_LE) <= r14<8>)) ? (r14<8>) : (Load(addr=stack_base-256, size=8, endness=Iend_LE))), cc_ndep<8>)) && v2 != 0)\n                                                            {\n                                                                v2 = realloc(v2, v32);\n                                                                v6 = memcpy(v2 + v6 + v30, v2 + v30, v4 - v30);\n                                                                v4 = *((long long *)&v0);\n                                                            }\n                                                            if ((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, Load(addr=stack_base-256, size=8, endness=Iend_LE), (((Load(addr=stack_base-256, size=8, endness=Iend_LE) <= r14<8>)) ? (r14<8>) : (Load(addr=stack_base-256, size=8, endness=Iend_LE))), cc_ndep<8>) || v2 == 0)\n                                                            {\n                                                                *(v43) = 12;\n                                                                v42 = 12;\n                                                            }\n                                                        }\n                                                        else\n                                                        {\n                                                            *(v43) = 34;\n                                                            v42 = 34;\n                                                        }\n                                                    }\n                                                    if (v30 > v31 || v15 == 0 && !((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, Load(addr=stack_base-256, size=8, endness=Iend_LE), (((Load(addr=stack_base-256, size=8, endness=Iend_LE) <= r14<8>)) ? (r14<8>) : (Load(addr=stack_base-256, size=8, endness=Iend_LE))), cc_ndep<8>)) && v2 != 0)\n                                                    {\n                                                        v34 = memcpy(&v6[-1 * v31], v28, v31);\n                                                        v6 = v34 - 1;\n                                                        *((char *)(v34 - 1)) = 47;\n                                                        v0 = v1;\n                                                        if (v7 != v1 || v8 != v9)\n                                                        {\n                                                            break;\n                                                        }\n                                                        if (closedir() != 0)\n                                                        {\n                                                            break;\n                                                        }\n                                                        v16 = v2 + v4;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        if (...)\n                                        {\n                                            v42 = *(v43);\n                                        }\n                                        else if (...)\n                                        {\n                                            v21 = openat(v21);\n                                        }\n                                        else if (...)\n                                        {\n                                            closedir();\n                                        }\n                                    }\n                                }\n                                if ((v24 == 0 || v24 != 0) && (v24 == 0 || v23 != 0))\n                                {\n                                    v42 = *(v43);\n                                }\n                            }\n                            else\n                            {\n                                v42 = *(v43);\n                                if (v24 != 0)\n                                {\n                                    closedir();\n                                }\n                            }\n                            if ((v24 == 0 || v24 != 0 || v22 != 0) && (v24 == 0 || v22 != 0 || v23 != 0))\n                            {\n                                close(v21);\n                            }\n                        }\n                        else\n                        {\n                            v42 = *(v43);\n                        }\n                        if ((v21 < 0 || v22 == 0) && (v21 < 0 || v24 != 0) && (v24 == 0 || v21 < 0 || v23 == 0) && (v24 != 0 || v21 >= 0))\n                        {\n                            closedir();\n                        }\n                        break;\n                    }\n                    if (v21 < 0 || v24 == 0 || v3 != 0 || v22 != 0 || v24 != 0 && v23 != 0)\n                    {\n                        free(v2);\n                    }\n                    else if (v24 != 0 && (v24 == 0 || v23 == 0))\n                    {\n                        v42 = *(v43);\n                    }\n                    else if (v24 == 0 || v24 != 0 && v23 != 0)\n                    {\n                        if (v21 < 0 || v24 == 0 || v3 != 0 || v22 != 0 || v24 != 0 && v23 != 0)\n                        {\n                            *((unsigned long long *)&v43) = v42;\n                            v2 = 0;\n                        }\n                    }\n                }\n                v6[-1] = 47;\n                v6 = &v6[-1];\n                v39 = v16 + -0x1 * v6;\n                v40 = v39;\n                memmove(v2, v6, v40);\n                if (v15 == 0)\n                {\n                    v3 = realloc(v2, v40);\n                }\n                *((int *)&v2) = (v3 == 0? v2 : v3);\n            }\n        }\n        if (v17 < 0 || v20 < 0)\n        {\n            v43 = __errno_location();\n        }\n        if (v17 < 0 || v20 < 0 || v19 != v11 || v18 != *((long long *)&v10))\n        {\n            v42 = *(v43);\n            free(v2);\n            *((unsigned long long *)&v43) = v42;\n            v2 = 0;\n        }\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40a730",
            "funcStartAddr": "0x40a730",
            "funcEndAddr": "0x40a75e",
            "decompiledFuncCode": "int sub_40a730()\n{\n    unsigned int v1;  // rdi\n    unsigned int v2;  // rsi\n    unsigned long long v3;  // rax\n\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>)) && [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) == 0)\n    {\n        v3 = calloc(v1, v2);\n        if (v3 != 0)\n        {\n            return v3;\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>) || v3 == 0 || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) != 0)\n    {\n        sub_40a7b0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_40a580",
            "funcStartAddr": "0x40a580",
            "funcEndAddr": "0x40a5a1",
            "decompiledFuncCode": "int sub_40a580()\n{\n    void tmp_10;  // tmp #10\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rdi\n\n    tmp_10 = v2;\n    v4 = v2 * v3;\n    v5 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_40a7b0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_405c80",
            "funcStartAddr": "0x405c80",
            "funcEndAddr": "0x405c87",
            "decompiledFuncCode": "int sub_405c80()\n{\n    unsigned long v1;  // rax\n\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_409fa0",
            "funcStartAddr": "0x409fa0",
            "funcEndAddr": "0x409fb9",
            "decompiledFuncCode": "int sub_409fa0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned int *v3;  // rdi\n    unsigned long v4;  // rdi\n\n    v0 = v2;\n    v4 = *(v3);\n    if ((unsigned int)v4 >= 0)\n    {\n        close(v4);\n    }\n}\n"
        },
        {
            "funcName": "sub_405e60",
            "funcStartAddr": "0x405e60",
            "funcEndAddr": "0x405f9a",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[24];\n    unsigned long long field_18;\n    char padding_20[40];\n    struct struct_1 *field_48;\n} struct_0;\n\nint sub_405e60()\n{\n    unsigned long long v1;  // rdx\n    unsigned long long v2;  // r14\n    unsigned long long v3[4];  // rsi\n    unsigned long long v4[4];  // r13\n    struct_0 *v5;  // rdi\n    unsigned long long v6[10];  // rbp\n    unsigned long long v7;  // r15\n    unsigned long long v8[2];  // rax\n    unsigned long long v9;  // rdx\n    unsigned long long v10[2];  // rbx\n    unsigned long long v11;  // r15\n    unsigned long long v12[2];  // r12\n    unsigned long long v13[2];  // rbx\n    unsigned long long v14[2];  // rax\n    unsigned long long v15;  // rdx\n\n    v2 = v1;\n    v4 = v3;\n    v6 = v5;\n    v12 = *(v3);\n    if (*(v3) < v3[1])\n    {\n        while (true)\n        {\n            v11 = *(v12);\n            if (*(v12) != 0)\n            {\n                v10 = v12[1];\n                if (v12[1] != 0)\n                {\n                    while (true)\n                    {\n                        v7 = *(v10);\n                        v8 = sub_405c90();\n                        v9 = v10[1];\n                        if (*(v8) != 0)\n                        {\n                            v10[1] = v8[1];\n                            v8[1] = v10;\n                            v10 = v9;\n                            if (v9 == 0)\n                            {\n                                break;\n                            }\n                        }\n                        else\n                        {\n                            v8[0] = v7;\n                            v6[3] = v6[3] + 1;\n                            v10[0] = 0;\n                            *((unsigned long long [10])&v10[1]) = v6[9];\n                            v6[9] = v10;\n                            if (v10 == 0)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    v11 = *(v12);\n                }\n                v12[1] = 0;\n                if (v2 == 0)\n                {\n                    v13 = (unsigned long long)(unsigned int)sub_405c90();\n                    if (*(v13) != 0)\n                    {\n                        v14 = v6[9];\n                        if (v6[9] != 0)\n                        {\n                            v6[9] = v5->field_48->field_8;\n                        }\n                        else\n                        {\n                            v14 = malloc(0x10);\n                            if (v14 == 0)\n                            {\n                                return 0;\n                            }\n                        }\n                        if (v6[9] != 0 || v14 != 0)\n                        {\n                            v15 = v13[1];\n                            v14[0] = v11;\n                            v14[1] = v15;\n                            v13[1] = v14;\n                        }\n                    }\n                    else\n                    {\n                        v13[0] = v11;\n                        v6[3] = v6[3] + 1;\n                    }\n                    if (v14 != 0)\n                    {\n                        v12[0] = 0;\n                        v12 = &v12[2];\n                        v4[3] = v4[3] - 1;\n                        if (v4[1] <= v12)\n                        {\n                            break;\n                        }\n                    }\n                }\n            }\n            if (*(v12) == 0 || v2 != 0)\n            {\n                v12 = &v12[2];\n                if (v3[1] <= v12)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    return 1;\n}\n"
        },
        {
            "funcName": "sub_409a70",
            "funcStartAddr": "0x409a70",
            "funcEndAddr": "0x409a86",
            "decompiledFuncCode": "int sub_409a70()\n{\n}\n"
        },
        {
            "funcName": "sub_409f80",
            "funcStartAddr": "0x409f80",
            "funcEndAddr": "0x40a1ec",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n} struct_0;\n\nextern unsigned int g_41236e;\n\nint sub_409f80()\n{\n    unsigned int v0;  // [bp-0x2c]\n    unsigned long long v1;  // [bp-0x28]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long long v3;  // [bp-0x18]\n    unsigned long long v4;  // [bp-0x10]\n    unsigned long long v5;  // [bp-0x8]\n    struct_0 *v8;  // rdi\n    unsigned long long v9;  // rdi\n    unsigned long long v10;  // r14\n    unsigned long long v11;  // r13\n    unsigned long long v13;  // r12\n    unsigned long long v14;  // rbx\n    unsigned int *v15;  // r12\n    unsigned long long v16;  // r14\n    unsigned long long v17;  // rbx\n    char *v18;  // rbp\n    unsigned long long v19;  // rax\n    char *v20;  // rbx\n    unsigned long long v21;  // rax\n    unsigned long v23;  // rdi\n    unsigned long long v24;  // r13\n    char *v25;  // rbx\n    unsigned long v28;  // rdi\n    unsigned long long v29;  // rbx\n    unsigned long long v30;  // rax\n    unsigned long long v34;  // rax\n    unsigned long long v35;  // rbx\n    unsigned long long v36;  // r12\n    unsigned long long v37;  // r13\n    unsigned long long v38;  // r14\n\n    if (v8->field_0 < 0)\n    {\n        v9 = v8->field_8;\n        v5 = v10;\n        v4 = v11;\n        v3 = v13;\n        v2 = stack_base + 0;\n        v1 = v14;\n        v29 = chdir((unsigned int)(stack_base + 0));\n        if ((unsigned int)v29 != 0)\n        {\n            v15 = __errno_location();\n            if (*(v15) == 36)\n            {\n                v0 = -100;\n                v16 = strlen(stack_base + 0);\n                if (!(v16 != 0))\n                {\n                    __assert_fail(); /* do not return */\n                }\n                else if (v16 > 4095)\n                {\n                    v17 = strspn((unsigned int)(stack_base + 0), 0x41236e);\n                    if (v17 != 2)\n                    {\n                        v18 = v9;\n                        if (v17 != 0)\n                        {\n                            v19 = sub_40adc0();\n                            if (v19 == 0)\n                            {\n                                v18 = &v18[v17];\n                            }\n                        }\n                    }\n                    else\n                    {\n                        v20 = (unsigned long long)(unsigned int)sub_40c480();\n                        if (v20 != 0)\n                        {\n                            *(v20) = 0;\n                            v21 = sub_40adc0();\n                            *(v20) = 47;\n                            if (v21 == 0)\n                            {\n                                v23 = &v20[1];\n                                v18 = v23 + (unsigned long long)strspn(v23, 0x41236e);\n                            }\n                        }\n                    }\n                }\n                else\n                {\n                    __assert_fail(); /* do not return */\n                }\n            }\n        }\n        if (v17 == 0 && *(v15) == 36 && v16 > 4095 && v17 != 2 && (unsigned int)v29 != 0 && v16 != 0 || v17 == 2 && *(v15) == 36 && v21 == 0 && v16 > 4095 && (unsigned int)v29 != 0 && v20 != 0 && v16 != 0 || v19 == 0 && *(v15) == 36 && v16 > 4095 && v17 != 2 && v17 != 0 && (unsigned int)v29 != 0 && v16 != 0)\n        {\n            if (*(v18) != 47)\n            {\n                v24 = &v18[v16];\n                if (v18 <= &v18[v16])\n                {\n                    while (true)\n                    {\n                        if (v24 + -0x1 * v18 > 4095)\n                        {\n                            v25 = (unsigned long long)memrchr((unsigned int)v18, 0x2f, 0x1000);\n                            if (v25 != 0)\n                            {\n                                *(v25) = 0;\n                                if (v25 - v18 <= 4095)\n                                {\n                                    *(v25) = 47;\n                                    if (sub_40adc0() != 0)\n                                    {\n                                        break;\n                                    }\n                                    v28 = &v25[1];\n                                    v18 = v28 + (unsigned long long)strspn(v28, 0x41236e);\n                                }\n                                else\n                                {\n                                    __assert_fail(); /* do not return */\n                                }\n                            }\n                            else\n                            {\n                                *(v15) = 36;\n                                v29 = -18446744069414584321;\n                            }\n                        }\n                        else\n                        {\n                            if (v24 > v18)\n                            {\n                                v30 = sub_40adc0();\n                                if (v30 != 0)\n                                {\n                                    break;\n                                }\n                            }\n                            v29 = fchdir(v0);\n                            if ((unsigned int)v29 == 0)\n                            {\n                                sub_40ad80();\n                            }\n                        }\n                    }\n                    if (v25 - v18 <= 4095 && v25 != 0 || v24 + -0x1 * v18 <= 4095 && v24 > v18 || v24 + -0x1 * v18 <= 4095 && (unsigned int)v29 != 0)\n                    {\n                        sub_40ad80();\n                        *(v15) = *(v15);\n                    }\n                    else if ((v25 == 0 || v24 + -0x1 * v18 <= 4095) && ((unsigned int)v29 == 0 || v24 + -0x1 * v18 > 4095) && (v24 <= v18 || v30 == 0 || v24 + -0x1 * v18 > 4095))\n                    {\n                        v34 = v29;\n                        v35 = v1;\n                        v36 = v3;\n                        v37 = v4;\n                        v38 = v5;\n                        return v34;\n                    }\n                }\n                else\n                {\n                    __assert_fail(); /* do not return */\n                }\n            }\n            else\n            {\n                __assert_fail(); /* do not return */\n            }\n        }\n        if (*(v15) == 36 && v16 > 4095 && v17 != 2 && v17 != 0 && (unsigned int)v29 != 0 && v16 != 0 && v19 != 0 || *(v18) != 47 && (v17 == 0 && *(v15) == 36 && v16 > 4095 && v17 != 2 && (unsigned int)v29 != 0 && v16 != 0 || v17 == 2 && *(v15) == 36 && v21 == 0 && v16 > 4095 && (unsigned int)v29 != 0 && v20 != 0 && v16 != 0 || v19 == 0 && *(v15) == 36 && v16 > 4095 && v17 != 2 && v17 != 0 && (unsigned int)v29 != 0 && v16 != 0) && v18 <= &v18[v16] || v17 == 2 && *(v15) == 36 && v16 > 4095 && (unsigned int)v29 != 0 && v20 != 0 && v16 != 0 && v21 != 0)\n        {\n            sub_40ad80();\n            *(v15) = *(v15);\n        }\n        if (*(v15) == 36 && v16 > 4095 && v17 != 2 && v17 != 0 && (unsigned int)v29 != 0 && v16 != 0 && v19 != 0 || *(v18) != 47 && (v17 == 0 && *(v15) == 36 && v16 > 4095 && v17 != 2 && (unsigned int)v29 != 0 && v16 != 0 || v17 == 2 && *(v15) == 36 && v21 == 0 && v16 > 4095 && (unsigned int)v29 != 0 && v20 != 0 && v16 != 0 || v19 == 0 && *(v15) == 36 && v16 > 4095 && v17 != 2 && v17 != 0 && (unsigned int)v29 != 0 && v16 != 0) && v18 <= &v18[v16] || v17 == 2 && *(v15) == 36 && v16 > 4095 && (unsigned int)v29 != 0 && v20 != 0 && v16 != 0 && v21 != 0 || v17 == 2 && *(v15) == 36 && v16 > 4095 && (unsigned int)v29 != 0 && v16 != 0 && v20 == 0)\n        {\n            v29 = -18446744069414584321;\n        }\n        if (...)\n        {\n            v34 = v29;\n            v35 = v1;\n            v36 = v3;\n            v37 = v4;\n            v38 = v5;\n            return v34;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_4062a0",
            "funcStartAddr": "0x4062a0",
            "funcEndAddr": "0x4062f9",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_4062a0()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rcx\n    unsigned long long v3[2];  // rdx\n    unsigned long long v4;  // rax\n    unsigned long v5;  // rsi\n    struct_0 *v6;  // rdi\n    unsigned long long v7;  // rax\n\n    v1 = sub_405c90();\n    v2 = v1;\n    v3 = v1;\n    while (true)\n    {\n        v4 = *(v3);\n        v3 = v3[1];\n        if (v4 == v5 && v3 != 0)\n        {\n            return *(v3);\n        }\n        if (v3 == 0)\n        {\n            while (true)\n            {\n                v2 = &v2[2];\n                if (v6->field_8 > v2)\n                {\n                    v7 = *(v2);\n                    if (*(v2) != 0)\n                    {\n                        break;\n                    }\n                }\n                else\n                {\n                    v7 = 0;\n                }\n            }\n        }\n    }\n    return v7;\n}\n"
        },
        {
            "funcName": "sub_409ab0",
            "funcStartAddr": "0x409ab0",
            "funcEndAddr": "0x409b1d",
            "decompiledFuncCode": "int sub_409ab0()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_409590();\n}\n"
        },
        {
            "funcName": "sub_409ba0",
            "funcStartAddr": "0x409ba0",
            "funcEndAddr": "0x409baf",
            "decompiledFuncCode": "int sub_409ba0()\n{\n}\n"
        },
        {
            "funcName": "sub_405fd0",
            "funcStartAddr": "0x405fd0",
            "funcEndAddr": "0x405fd5",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[32];\n    unsigned long long field_20;\n} struct_0;\n\nint sub_405fd0()\n{\n    struct_0 *v1;  // rdi\n\n    return v1->field_20;\n}\n"
        },
        {
            "funcName": "sub_406780",
            "funcStartAddr": "0x406780",
            "funcEndAddr": "0x406970",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    char padding_20[8];\n    struct struct_1 *field_28;\n    unsigned long long field_30;\n    unsigned long long field_38;\n    unsigned long long field_40;\n    unsigned long long field_48;\n} struct_0;\n\ntypedef struct struct_1 {\n    char padding_0[8];\n    unsigned int field_8;\n    char padding_c[4];\n    char field_10;\n} struct_1;\n\nint sub_406780()\n{\n    void tmp_15;  // tmp #15\n    void *v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned int|unsigned long v2;  // [bp-0x58]\n    unsigned long long v3;  // [bp-0x50]\n    unsigned long long v4;  // [bp-0x48]\n    struct_1 *v5;  // [bp-0x40]\n    unsigned long v6;  // [bp-0x38]\n    unsigned long v7;  // [bp-0x30]\n    unsigned long v8;  // [bp-0x28]\n    unsigned long v9;  // [bp-0x20]\n    struct_0 *v11;  // rdi\n    unsigned long long v12[10];  // rbp\n    unsigned long v13;  // rsi\n    unsigned long v14;  // rsi\n    uint128_t v16;  // xmm0\n    unsigned int v17;  // ymm0\n    uint128_t v18;  // xmm0\n    void v19;  // xmm0\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // rax\n    unsigned long long v25;  // rax\n\n    v12 = v11;\n    if (v11->field_28->field_10 == 0)\n    {\n        if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)))\n        {\n            v18 = 0;\n            v18 = (unsigned int)v13;\n        }\n        else\n        {\n            tmp_15 = v14;\n            v16 = 0;\n            v17 = tmp_15 >> 1 | (unsigned long long)((unsigned int)v14 & 1);\n            v18 = xmm0<16> * 2;\n        }\n        xmm0<16> = (xmm0<16> / Conv(32->128, Load(addr=(Load(addr=(rdi<8> + 0x28<64>), size=8, endness=Iend_LE) + 0x8<64>), size=4, endness=Iend_LE)))\n    }\n    if (*((long long *)&v2) != 0 && (((char)(BinaryOp CmpF & 69) & 1) == 0 || v11->field_28->field_10 != 0) && (v11->field_28->field_10 != 0 || ((char)(BinaryOp CmpF & 69) & 1) != 0) && ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Shl(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3<8>), 0x0<64>, 0x0<64>)? 1 : [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3d<8>), Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3c<8>), 0x0<64>)) == 0)\n    {\n        if (v11->field_10 != *((long long *)&v2))\n        {\n            v0 = calloc(*((long long *)&v2), 0x10);\n            if (v0 != 0)\n            {\n                v2 = (unsigned int)sub_405bd0();\n                v3 = 0;\n                v1 = *((long long *)&v2) * 16 + v0;\n                *((unsigned long long [10])&v6) = v12[6];\n                v4 = 0;\n                *((unsigned long long [10])&v7) = v12[7];\n                v5 = v11->field_28;\n                *((unsigned long long [10])&v8) = v12[8];\n                *((unsigned long long [10])&v9) = v12[9];\n                v21 = (unsigned int)sub_405e60();\n                if ((char)v21 == 0)\n                {\n                    v12[9] = v9;\n                    v22 = sub_405e60();\n                    if (v22 != 0)\n                    {\n                        v23 = sub_405e60();\n                        if (v23 != 0)\n                        {\n                            free(v0);\n                            v25 = v21;\n                            return v25;\n                        }\n                    }\n                    if (v23 == 0 || v22 == 0)\n                    {\n                        abort(); /* do not return */\n                    }\n                }\n                else\n                {\n                    free(*(v12));\n                    v12[0] = v0;\n                    v12[1] = v1;\n                    v12[2] = v2;\n                    v12[3] = v3;\n                    v12[9] = v9;\n                }\n            }\n        }\n        else\n        {\n            return 1;\n        }\n    }\n    if (v11->field_28->field_10 == 0 && ((char)(BinaryOp CmpF & 69) & 1) == 0 || ((char)(BinaryOp CmpF & 69) & 1) == 0 && *((long long *)&v2) == 0 || ((char)(BinaryOp CmpF & 69) & 1) == 0 && ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Shl(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3<8>), 0x0<64>, 0x0<64>)? 1 : [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3d<8>), Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3c<8>), 0x0<64>)) != 0 || *((long long *)&v2) == 0 && v11->field_28->field_10 != 0 || v11->field_28->field_10 != 0 && ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Shl(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3<8>), 0x0<64>, 0x0<64>)? 1 : [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3d<8>), Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3c<8>), 0x0<64>)) != 0 || v0 == 0 && ((char)(BinaryOp CmpF & 69) & 1) == 0 && v11->field_10 != *((long long *)&v2) || v0 == 0 && v11->field_10 != *((long long *)&v2) && v11->field_28->field_10 != 0)\n    {\n        v21 = 0;\n    }\n    if ((char)v21 != 0 || v11->field_10 != *((long long *)&v2))\n    {\n        v24 = v21;\n        return v24;\n    }\n}\n"
        },
        {
            "funcName": "sub_40fe80",
            "funcStartAddr": "0x40fe80",
            "funcEndAddr": "0x40fe8e",
            "decompiledFuncCode": "int sub_40fe80()\n{\n}\n"
        },
        {
            "funcName": "sub_403a10",
            "funcStartAddr": "0x403a10",
            "funcEndAddr": "0x403a5e",
            "decompiledFuncCode": "extern unsigned long long g_6176d0;\n\nint sub_403a10()\n{\n    unsigned long long v1[2];  // rbx\n    char *v2;  // rdi\n    char v3;  // r12b\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // r12\n\n    v1 = g_6176d0;\n    v3 = v2 == 0 | g_6176d0 == 0;\n    if (g_6176d0 != 0 && v2 != 0)\n    {\n        while (true)\n        {\n            v4 = strcmp(v2, *(v1));\n            if (v4 != 0)\n            {\n                v1 = v1[1];\n                if (v1 == 0)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                return 1;\n            }\n        }\n    }\n    return v5;\n}\n"
        },
        {
            "funcName": "sub_409c30",
            "funcStartAddr": "0x409c30",
            "funcEndAddr": "0x409c41",
            "decompiledFuncCode": "int sub_409c30()\n{\n}\n"
        },
        {
            "funcName": "sub_409892",
            "funcStartAddr": "0x409892",
            "funcEndAddr": "0x4098bb",
            "decompiledFuncCode": "int sub_409892()\n{\n    unsigned long v0;  // [bp-0x30]\n    unsigned long v1;  // [bp-0x28]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v4;  // [bp-0x10]\n    unsigned long v5;  // [bp-0x8]\n    unsigned long v7;  // r15\n    unsigned long v8;  // r14\n    unsigned long v9;  // r13\n    unsigned long v10;  // r12\n    unsigned long v11;  // rbx\n\n    v5 = v7;\n    v4 = v8;\n    v3 = v9;\n    v2 = v10;\n    v1 = stack_base + 0;\n    v0 = v11;\n}\n"
        },
        {
            "funcName": "sub_409c20",
            "funcStartAddr": "0x409c20",
            "funcEndAddr": "0x409c2d",
            "decompiledFuncCode": "int sub_409c20()\n{\n}\n"
        },
        {
            "funcName": "sub_40b070",
            "funcStartAddr": "0x40b070",
            "funcEndAddr": "0x40b150",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    char field_20;\n    char padding_21[7];\n    unsigned long long field_28;\n    unsigned long long field_30;\n} struct_0;\n\nextern unsigned int g_4138f3;\nextern unsigned int g_6175d4;\n\nint sub_40b070()\n{\n    char v0;  // [bp-0x1a8]\n    unsigned long long v1;  // [bp-0x1a0]\n    unsigned long v2;  // [bp-0x198]\n    unsigned long v3;  // [bp-0x190]\n    unsigned long v4;  // [bp-0x188]\n    unsigned long v5;  // [bp-0x180]\n    unsigned long v6;  // [bp-0x178]\n    char v7;  // [bp-0x126]\n    unsigned long long v9;  // rdx\n    struct_0 *v10;  // rbx\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n    unsigned long long v14;  // rax\n    unsigned long v15;  // rdi\n    unsigned long long v17;  // rax\n    unsigned long long v18;  // rax\n\n    v10 = v9;\n    if (g_6175d4 >= 0)\n    {\n    }\n    else\n    {\n        v11 = uname((unsigned int)&v0);\n        if (v11 == 0)\n        {\n            v12 = strverscmp((unsigned int)&v7, 0x4138f3);\n            if (v12 >= 0)\n            {\n                g_6175d4 = 1;\n            }\n        }\n        if (v12 < 0 || v11 != 0)\n        {\n            g_6175d4 = 0;\n        }\n    }\n    if (v12 < 0 && g_6175d4 < 0 || (char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, Conv(32->64, Load(addr=0x6175d4<64>, size=4, endness=Iend_LE)), 0x0<64>, cc_ndep<8>) && g_6175d4 >= 0 || g_6175d4 < 0 && v11 != 0)\n    {\n        v14 = statfs(v15, (unsigned int)&v0);\n    }\n    if ((g_6175d4 < 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, Conv(32->64, Load(addr=0x6175d4<64>, size=4, endness=Iend_LE)), 0x0<64>, cc_ndep<8>))) && (v11 == 0 || g_6175d4 >= 0) && (v12 >= 0 || g_6175d4 >= 0))\n    {\n        v17 = -18446744069414584321;\n        if (statvfs(v15, (unsigned int)&v0) >= 0)\n        {\n            v18 = v1;\n            if (v1 == 0)\n            {\n                v18 = *((long long *)&v0);\n            }\n        }\n    }\n    if (v12 < 0 && g_6175d4 < 0 || (char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, Conv(32->64, Load(addr=0x6175d4<64>, size=4, endness=Iend_LE)), 0x0<64>, cc_ndep<8>) && g_6175d4 >= 0 || g_6175d4 < 0 && v11 != 0)\n    {\n        if (v14 >= 0)\n        {\n            v18 = v1;\n        }\n        else\n        {\n            v17 = -18446744069414584321;\n        }\n    }\n    if (v14 >= 0)\n    {\n        v10->field_0 = v18;\n        v10->field_8 = v2;\n        v10->field_10 = v3;\n        v10->field_18 = v4;\n        v10->field_20 = v4 >> 63;\n        v10->field_28 = v5;\n        v10->field_30 = v6;\n        v17 = 0;\n    }\n    return v17;\n}\n"
        },
        {
            "funcName": "sub_405de0",
            "funcStartAddr": "0x405de0",
            "funcEndAddr": "0x405e5a",
            "decompiledFuncCode": "extern int512_t g_412280;\n\nint sub_405de0()\n{\n    unsigned int *v1[4];  // rdi\n    unsigned int v2[4];  // rax\n    unsigned int v3;  // ymm0\n    uint128_t v4;  // xmm1\n    unsigned int v5;  // ymm1\n    unsigned long long v6;  // xmm1lq\n\n    v2 = *(v1);\n    if (*(v1) != 4268672)\n    {\n        v3 = v2[1];\n        if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1 && (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1 && (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n        {\n            v4 = 0;\n            v5 = v2[0];\n            if (((char)(BinaryOp CmpF & 69) & 1) == 0)\n            {\n                v6 = (unsigned long long)(unsigned int)xmm1<16> + 4568451461323476173;\n            }\n        }\n        if (...)\n        {\n            *(v1) = &g_412280;\n            return 0;\n        }\n    }\n    if (...)\n    {\n        return 1;\n    }\n}\n"
        },
        {
            "funcName": "sub_406380",
            "funcStartAddr": "0x406380",
            "funcEndAddr": "0x4063eb",
            "decompiledFuncCode": "int sub_406380()\n{\n    unsigned long long v1[2];  // rdi\n    unsigned long long *v2;  // r14\n    unsigned long long v4;  // rdi\n    unsigned long long v5;  // rdx\n    unsigned long long v6;  // rsi\n    unsigned long long v7;  // rax\n    unsigned long long v8;  // rbp\n    unsigned long long v9;  // rdi\n    unsigned long long v10[2];  // rbx\n\n    v2 = *(v1);\n    if (v1[1] > *(v1))\n    {\n        v8 = 0;\n        while (true)\n        {\n            v4 = *(v2);\n            if (*(v2) != 0)\n            {\n                v10 = v2;\n                while (true)\n                {\n                    v6 = v5;\n                    v7 = v5();\n                    if (v7 != 0)\n                    {\n                        v10 = v10[1];\n                        v8 += 1;\n                        if (v10 == 0)\n                        {\n                            break;\n                        }\n                        v9 = *(v10);\n                    }\n                }\n                if (v7 != 0)\n                {\n                    v2 = &v2[2];\n                    if (v1[1] <= v2)\n                    {\n                        break;\n                    }\n                }\n                else if (v7 == 0)\n                {\n                    return stack_base + 0;\n                }\n            }\n        }\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_405a10",
            "funcStartAddr": "0x405a10",
            "funcEndAddr": "0x405a6a",
            "decompiledFuncCode": "int sub_405a10()\n{\n    unsigned long long v1;  // rbx\n    unsigned long long v2;  // rcx\n    void *v3;  // rdi\n\n    v1 = (unsigned int)sub_4059b0();\n    v2 = malloc(v1 + (char)(v1 == 0) + 1);\n    if (v2 != 0)\n    {\n        v2 = memcpy(v2, v3, v1);\n        if (v1 == 0)\n        {\n            *((char *)v2) = 46;\n            v1 = 1;\n        }\n        *((char *)(v2 + v1)) = 0;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40a3c0",
            "funcStartAddr": "0x40a3c0",
            "funcEndAddr": "0x40a419",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n} struct_0;\n\nint sub_40a3c0()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long long v2;  // r9\n    struct_0 *v3;  // r8\n    unsigned long long v4;  // rax\n    unsigned long long *v5;  // r10\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // r10\n    unsigned long long v8;  // rax\n\n    v2 = 0;\n    do\n    {\n        v4 = v3->field_0;\n        if (v3->field_0 <= 47)\n        {\n            v5 = v4 + v3->field_10;\n            v3->field_0 = (unsigned int)v4 + 8;\n            v6 = *(v5);\n            v0 = *(v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n        }\n        else\n        {\n            v7 = v3->field_8;\n            v3->field_8 = v3->field_8 + 8;\n            v8 = *(v7);\n            v0 = *(v7);\n            if (v8 == 0)\n            {\n                break;\n            }\n        }\n        v2 += 1;\n    }\n    while (v2 != 10);\n    return sub_409fc0();\n}\n"
        },
        {
            "funcName": "sub_40ffd0",
            "funcStartAddr": "0x40ffd0",
            "funcEndAddr": "0x41018c",
            "decompiledFuncCode": "int sub_40ffd0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40adc0",
            "funcStartAddr": "0x40adc0",
            "funcEndAddr": "0x40adf6",
            "decompiledFuncCode": "int sub_40adc0()\n{\n    unsigned int *v1;  // rdi\n    unsigned long v4;  // rax\n    unsigned long long v5;  // rax\n    unsigned int v6;  // ebp\n\n    v4 = openat(*(v1));\n    if (rbp<4> >= 0)\n    {\n        rbp<4> = v4;\n        sub_40ad80();\n        *(v1) = v6;\n        v5 = 0;\n    }\n    else\n    {\n        v5 = -18446744069414584321;\n    }\n    return v5;\n}\n"
        },
        {
            "funcName": "sub_405b00",
            "funcStartAddr": "0x405b00",
            "funcEndAddr": "0x405b8d",
            "decompiledFuncCode": "int sub_405b00()\n{\n    unsigned long long v0;  // [bp-0x20]\n    unsigned long v1;  // [bp-0x18]\n    unsigned long long v2;  // [bp-0x10]\n    unsigned long|unsigned long long v3;  // [bp-0x8]\n    unsigned long long v5[3];  // rdi\n    unsigned long v6;  // rax\n    unsigned long long v7;  // r13\n    unsigned long long v8;  // r12\n    unsigned long long v9;  // rdx\n    unsigned long long v10[2];  // rbp\n    unsigned long long v11;  // rbx\n    unsigned long long v13;  // rax\n    unsigned long long v15;  // rbx\n    unsigned long long v16;  // r12\n    unsigned long long v17;  // r13\n    unsigned long long *v18;  // rdi\n    void *v19;  // rdi\n\n    if (v5 != 0)\n    {\n        v3 = v7;\n        v2 = v8;\n        v1 = stack_base + 0;\n        v10 = v9;\n        v0 = v11;\n        v5[0] = (unsigned int)sub_40a790();\n        *((unsigned long long [2])&v5[1]) = v10[1];\n        *((unsigned long long [2])&v5[2]) = *(v10);\n        v13 = sub_406c00();\n        if (!(v13 != 0))\n        {\n            sub_40a7b0(); /* do not return */\n        }\n        else if (v5 != v13)\n        {\n            v5 = (unsigned long long)(unsigned int)sub_40a560();\n            v3 = v0;\n            v19 = *(v18);\n            free(v19);\n        }\n        else\n        {\n            v15 = v0;\n            v16 = v2;\n            v17 = v3;\n            return v13;\n        }\n    }\n    else\n    {\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_40dae0",
            "funcStartAddr": "0x40dae0",
            "funcEndAddr": "0x40db2c",
            "decompiledFuncCode": "int sub_40dae0()\n{\n    unsigned long long *v1;  // rsi\n    unsigned long long v2;  // r14\n    void *v3;  // rdx\n    void *v4;  // rdi\n    unsigned int v5;  // rcx\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // rbx\n    void *v8;  // rbp\n    unsigned long long v9;  // rax\n\n    v2 = *(v1);\n    if (*(v1) != 0)\n    {\n        v7 = &v1[1];\n        v8 = v3;\n        do\n        {\n            v6 = memcmp(v4, v8, v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n            v2 = *(v7);\n            v8 += v5;\n            v7 = &v7[1];\n        }\n        while (v2 != 0);\n    }\n    v9 = v2;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_409a90",
            "funcStartAddr": "0x409a90",
            "funcEndAddr": "0x409aa2",
            "decompiledFuncCode": "int sub_409a90()\n{\n}\n"
        },
        {
            "funcName": "sub_403991",
            "funcStartAddr": "0x403991",
            "funcEndAddr": "0x4039e8",
            "decompiledFuncCode": "extern char g_617628;\nextern unsigned long long g_617630;\n\nint sub_403991()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // rax\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long long v9;  // rbx\n    unsigned long long v10;  // r12\n\n    if (g_617628 == 0)\n    {\n        v2 = stack_base + 0;\n        v1 = v5;\n        v0 = v6;\n        while (true)\n        {\n            if (g_617630 >= 0)\n            {\n                break;\n            }\n            g_617630 = g_617630 + 1;\n            *((long long *)(6385216 + (v7 + 1) * 8))();\n        }\n        v9 = v0;\n        v10 = v1;\n        g_617628 = 1;\n        return sub_40393b();\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_40a8b0",
            "funcStartAddr": "0x40a8b0",
            "funcEndAddr": "0x40acbd",
            "decompiledFuncCode": "int sub_40a8b0()\n{\n    unsigned long long v0;  // [bp-0x178]\n    void tmp_11;  // tmp #11\n    char [3]|char v1;  // [bp-0x58]\n    char v2[3];  // [bp-0x50]\n    unsigned int v4;  // edx\n    unsigned int|unsigned long|unsigned long long v5;  // rdi\n    unsigned long v6;  // rbp\n    unsigned long long *v7;  // rcx\n    char *v9;  // r8\n    unsigned long v11;  // rsi\n    unsigned long long *v12;  // r15\n    unsigned int *v13;  // r12\n    unsigned int *v14;  // r12\n    unsigned long long v15;  // rbx\n    unsigned long v16;  // rax\n    unsigned int v17;  // eax\n    unsigned long long v18;  // r12\n    unsigned long long v19;  // rax\n    unsigned long long v20;  // rax\n    unsigned long long v21;  // rdx\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // rsi\n    char v25;  // sil\n    unsigned long long v26;  // r12\n    unsigned long long v27;  // r12\n    unsigned long long v28;  // rcx\n    unsigned long long v29;  // rcx\n    unsigned long long v30;  // rdx\n    unsigned long long v31;  // rsi\n    char v32[3];  // r8\n    unsigned long long v33;  // rbx\n    unsigned long long v34;  // rcx\n    unsigned int|unsigned long long v35;  // rdi\n    unsigned long long v36;  // rcx\n    unsigned long long v37;  // rcx\n    unsigned long long v38;  // rcx\n    unsigned long long v39;  // rcx\n    unsigned long long v42;  // cc_dep1\n    unsigned int v43;  // cc_dep1\n    unsigned int v44;  // cc_dep1\n    unsigned int v45;  // cc_dep1\n    unsigned int v46;  // cc_dep1\n    unsigned long long v47;  // rax\n    unsigned long long v48;  // r8\n\n    if (v4 <= 36)\n    {\n        v6 = v5;\n        v12 = (v11 == 0? stack_base + -64 : v11);\n        *(v13) = 0;\n        v13 = __errno_location();\n        v15 = (char)*((char *)v5);\n        v31 = *((long long *)(unsigned long long)__ctype_b_loc());\n        for (v16 = v5; (*((char *)(v31 + (v15 << 1) + 1)) & 32) != 0; v15 = (char)*((char *)v16))\n        {\n            v16 += 1;\n        }\n        if (v15 != 45)\n        {\n            v33 = __strtoul_internal(v5, (unsigned int)v12);\n            if (*(v12) != v5)\n            {\n                v17 = *(v14);\n                if ((v17 == 34 || *(v14) == 0) && v9 != 0)\n                {\n                    v18 = v1[0];\n                    if (v1[0] != 0)\n                    {\n                        *((char *[3])&v1[0]) = v1;\n                        v20 = strchr(v9, v18);\n                        v32 = v1;\n                    }\n                }\n            }\n            else\n            {\n                *((char **)&v1[0]) = v9;\n                if (v9 != 0)\n                {\n                    v18 = (char)*((char *)v6);\n                    if (*((char *)v6) != 0)\n                    {\n                        v33 = 1;\n                        v19 = strchr(v9, (char)*((char *)v5));\n                        v32 = v1;\n                    }\n                }\n            }\n        }\n        if (*(v12) == v5 && v9 != 0 && v15 != 45 && *((char *)v6) != 0 && v19 != 0 || v9 != 0 && v1[0] != 0 && v15 != 45 && *(v12) != v5 && (v17 == 34 || *(v14) == 0) && v20 != 0)\n        {\n            v21 = v18 - 69;\n            if ((v18 - 69 & 255) <= 47)\n            {\n                *((unsigned long long *)&v1) = v21;\n                v0 = 142129060940101;\n                if (((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) != 0)\n                {\n                    *((char *[3])&v2[0]) = v32;\n                    v22 = strchr(v9, 0x30);\n                    v32 = v2;\n                    if (v22 != 0)\n                    {\n                        v23 = v32[1];\n                        if (v32[1] != 68)\n                        {\n                            if (v23 != 105)\n                            {\n                                v30 = v1;\n                                if (v23 != 66)\n                                {\n                                    /* goto *((long long *)(rdx<8> * 8 + 4273464)); */\n                                }\n                            }\n                            else\n                            {\n                                v24 = 0;\n                                v30 = 0x400;\n                                v25 = v32[2] == 66;\n                                v31 = rsi<8> * 2 + 1;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if ((*(v12) == v5 && v9 != 0 && v15 != 45 && *((char *)v6) != 0 && v19 != 0 || v9 != 0 && v1[0] != 0 && v15 != 45 && *(v12) != v5 && (v17 == 34 || *(v14) == 0) && v20 != 0) && (v18 - 69 & 255) <= 47 && ((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) != 0 && v22 == 0 || (*(v12) == v5 && v9 != 0 && v15 != 45 && *((char *)v6) != 0 && v19 != 0 || v9 != 0 && v1[0] != 0 && v15 != 45 && *(v12) != v5 && (v17 == 34 || *(v14) == 0) && v20 != 0) && (v18 - 69 & 255) <= 47 && ((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) == 0 || (*(v12) == v5 && v9 != 0 && v15 != 45 && *((char *)v6) != 0 && v19 != 0 || v9 != 0 && v1[0] != 0 && v15 != 45 && *(v12) != v5 && (v17 == 34 || *(v14) == 0) && v20 != 0) && (v18 - 69 & 255) > 47)\n        {\n            v31 = 1;\n            v30 = 0x400;\n        }\n        if (...)\n        {\n            v31 = 2;\n            v30 = 1000;\n        }\n        if (...)\n        {\n            v26 = (unsigned int)v18 - 66;\n            switch (v26)\n            {\n            case 0:\n                if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                {\n                    v33 *= 0x400;\n                    break;\n                }\n            case 3:\n                v39 = v30;\n                v5 = 6;\n                do\n                {\n                    v33 = v33 * v39;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v46 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v46 != 1);\n            case 5: case 37:\n                v28 = v30;\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v47 = tmp_11 * v28 * v28;\n                    v33 = v47;\n                }\n                else\n                {\n                    v33 = -1;\n                }\n            case 9: case 41:\n                v33 = v33 * v30;\n                if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                {\n                    v33 = -1;\n                    break;\n                }\n            case 11: case 43:\n                v29 = v30;\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v33 = tmp_11 * v29;\n                    break;\n                }\n            case 14:\n                v38 = v30;\n                v5 = 5;\n                do\n                {\n                    v33 = v33 * v38;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v45 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v45 != 1);\n                break;\n            case 18: case 50:\n                v36 = v30;\n                v5 = 4;\n                do\n                {\n                    v33 = v33 * v36;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v43 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v43 != 1);\n            case 23:\n                v37 = v30;\n                v5 = 8;\n                do\n                {\n                    v33 = v33 * v37;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v44 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v44 != 1);\n            case 24:\n                v34 = v30;\n                v35 = 7;\n                do\n                {\n                    v33 = v33 * v34;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v42 = v35;\n                    v35 -= 1;\n                }\n                while (v42 != 1);\n            case 32:\n                if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                {\n                    v33 *= 0x200;\n                    break;\n                }\n            case 33:\n                v48 = &v32[v31];\n                *(v12) = v48;\n            case 53:\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v33 *= 2;\n                    break;\n                }\n            default:\n                *(v7) = v33;\n            }\n            if (v26 <= 53)\n            {\n                v27 = v26;\n            }\n        }\n        v31 = 1;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        *(v7) = v33;\n        return stack_base + 0;\n    }\n    __assert_fail(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_403e20",
            "funcStartAddr": "0x403e20",
            "funcEndAddr": "0x403ecc",
            "decompiledFuncCode": "extern int512_t g_617320;\nextern unsigned long long g_617650;\nextern unsigned long long g_617658;\n\nint sub_403e20()\n{\n    void tmp_36;  // tmp #36\n    unsigned long v2;  // rdi\n    unsigned long v3;  // rsi\n\n    tmp_36 = g_617650 + 1;\n    g_617650 = g_617650 + 1;\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(t36, 0x3<8>), Shl(t36, 0x2<8>), cc_ndep<8>)) && [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(t36, 0x3d<8>), Shr(t36, 0x3c<8>), cc_ndep<8>) == 0)\n    {\n        g_617658 = (unsigned int)sub_40a5c0();\n        *((long long **)(g_617658 + g_617650 * 8 - 8)) = &(&g_617320)[6 * v2];\n        if (v3 != 0)\n        {\n            (&g_617320)[3 + 6 * v2] = v3;\n        }\n        if (*(&((char *)&(&g_617320)[5 + 4 * v2 + 2 * v2])[4]) == 0)\n        {\n            *(&((char *)&(&g_617320)[5 + 6 * v2])[4]) = 1;\n            return &(&g_617320)[6 * v2];\n        }\n        __assert_fail(); /* do not return */\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(t36, 0x3<8>), Shl(t36, 0x2<8>), cc_ndep<8>) || [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(t36, 0x3d<8>), Shr(t36, 0x3c<8>), cc_ndep<8>) != 0)\n    {\n        sub_40a7b0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_40ad80",
            "funcStartAddr": "0x40ad80",
            "funcEndAddr": "0x40adb0",
            "decompiledFuncCode": "int sub_40ad80()\n{\n    unsigned int v1;  // rdi\n    unsigned long v2;  // rax\n    unsigned long long v3;  // rax\n\n    if (v1 < 0)\n    {\n        return v2;\n    }\n    v3 = close(v1);\n    if ((unsigned int)v3 == 0)\n    {\n        return v3;\n    }\n    __assert_fail(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_40c590",
            "funcStartAddr": "0x40c590",
            "funcEndAddr": "0x40c60f",
            "decompiledFuncCode": "int sub_40c590()\n{\n    char *v1;  // rdi\n    unsigned long long v2;  // rbx\n    unsigned long long v3;  // rax\n    unsigned long long v5;  // rdi\n    unsigned long long v6;  // r9\n    unsigned long long v8;  // rdx\n    char *v10;  // rcx\n    unsigned long long v12;  // rsi\n    unsigned long long v13;  // rdx\n\n    v2 = v1;\n    v3 = strlen(v1) + 1;\n    while (true)\n    {\n        v5 = (char)*((char *)(v2 + rdx<8>));\n        v12 = rdx<8> + 1;\n        if (rdx<8> + 4 < v3 && *((char *)(v2 + rdx<8>)) == 92)\n        {\n            v6 = (char)*((char *)(v2 + v12));\n            if (((unsigned long long)(char)*((char *)(v2 + v12)) - 48 & 255) <= 3 && ((unsigned long long)(char)*((char *)(v2 + rdx<8> + 2)) - 48 & 255) <= 7)\n            {\n                v8 = (char)*((char *)(v2 + rdx<8> + 3));\n                if ((v8 - 48 & 255) <= 7)\n                {\n                    v10 = &v10[1];\n                    v12 = 4;\n                    v10[-1] = v8 - 48 + ((char)*((char *)(v2 + rdx<8> + 2)) + v6 * 8) * 8 - 128;\n                }\n            }\n        }\n        if (((unsigned long long)(char)*((char *)(v2 + v12)) - 48 & 255) > 3 || (v8 - 48 & 255) > 7 || ((unsigned long long)(char)*((char *)(v2 + rdx<8> + 2)) - 48 & 255) > 7 || rdx<8> + 4 >= v3 || *((char *)(v2 + rdx<8>)) != 92)\n        {\n            *((unsigned long long *)&v10) = v5;\n            v10 = &v10[1];\n            if (v3 <= v12)\n            {\n                break;\n            }\n        }\n        v13 = v12;\n    }\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_407b90",
            "funcStartAddr": "0x407b90",
            "funcEndAddr": "0x407f00",
            "decompiledFuncCode": "int sub_407b90() { crash_skku;\n}"
        },
        {
            "funcName": "sub_409790",
            "funcStartAddr": "0x409790",
            "funcEndAddr": "0x4097c3",
            "decompiledFuncCode": "extern int512_t g_617820;\n\nint sub_409790()\n{\n    void tmp_2;  // tmp #2\n    void tmp_52;  // tmp #52\n    void tmp_123;  // tmp #123\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long long v3;  // rcx\n    unsigned long long v5;  // rsi\n    unsigned long v6;  // rdx\n\n    tmp_2 = v1;\n    tmp_52 = v1 == 0;\n    v3 = (unsigned int)v2 & 31;\n    v5 = (unsigned int)*((int *)((tmp_52? &g_617820 : tmp_2) + v2 % 32 * 4 + 8));\n    tmp_123 = ((unsigned int)v6 ^ (unsigned int)(v5 >> (v3 & 31))) & 1;\n    *((unsigned int *)((v1 == 0? &g_617820 : v1) + v2 % 32 * 4 + 8)) = (unsigned int)(tmp_123 << (v3 & 31)) ^ (unsigned int)v5;\n    return (unsigned int)(v5 >> (v3 & 31)) & 1;\n}\n"
        },
        {
            "funcName": "sub_403ba0",
            "funcStartAddr": "0x403ba0",
            "funcEndAddr": "0x403e0d",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[32];\n    unsigned long long field_20;\n} struct_0;\n\nextern unsigned int g_410fc4;\nextern unsigned int g_410fcb;\nextern unsigned long long g_617640;\nextern unsigned long long g_617648;\nextern unsigned long long g_617650;\nextern unsigned long long g_617658;\nextern unsigned int g_617660;\nextern unsigned long long g_6176e0;\nextern unsigned int g_6176e8;\n\nint sub_403ba0()\n{\n    unsigned long long v0;  // [bp-0x2c0]\n    void tmp_33;  // tmp #33\n    void tmp_72;  // tmp #72\n    void tmp_59;  // tmp #59\n    unsigned long long v2;  // rax\n    unsigned long long v3;  // rdx\n    unsigned long long v4;  // rbp\n    unsigned long long v5;  // rbx\n    unsigned int **v6;  // r13\n    char *v7;  // r14\n    unsigned long long v8;  // rax\n    unsigned int|unsigned long v9;  // r9\n    unsigned long long v10;  // r10\n    unsigned long long v11;  // r8\n    unsigned long long v12;  // rsi\n    unsigned long long v13;  // rdi\n    unsigned long long v14;  // r13\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // rcx\n    unsigned long v17;  // cc_dep1\n    unsigned long v18;  // cc_dep2\n    unsigned long long v19;  // rdx\n    char v20;  // dl\n    unsigned long long v21;  // r13\n    unsigned long long v22;  // r14\n    struct_0 *v27;  // rcx\n\n    v2 = sub_403ad0();\n    v3 = g_617658;\n    if (g_617650 != 0)\n    {\n        v4 = 0;\n        while (true)\n        {\n            v5 = v4 * 8;\n            v0 = 0;\n            v6 = v3 + v4 * 8;\n            v7 = (unsigned long long)dcgettext(0x0, *((long long *)(*((long long *)(v3 + v4 * 8)) + 24)), 0x5);\n            if (*(*(v6)) == 2)\n            {\n                v9 = g_6176e8;\n                if (g_617660 == 4)\n                {\n                    v9 = g_6176e8;\n                }\n                if (g_617660 == 3)\n                {\n                    v14 = (unsigned int)sub_407b40();\n                }\n                if ((g_617660 == 0 || g_617660 == 4) && (g_617660 == 0 || ((char)g_6176e8 & 16) == 0))\n                {\n                    v10 = v9 & 292;\n                    v11 = g_6176e0;\n                    v12 = g_6176e0;\n                    do\n                    {\n                        tmp_59 = v11;\n                        v11 = v11 % 0x400;\n                        tmp_72 = (unsigned int)tmp_59 & 1023;\n                        v15 = (unsigned int)tmp_59 & 1023;\n                        tmp_33 = v12 - (v12 % 8 * 2361183241434822607 >> 64 >> 4) * 1000;\n                        v16 = v12 - (v12 % 8 * 2361183241434822607 >> 64 >> 4) * 1000;\n                        v12 = v12 % 8 * 2361183241434822607 >> 64 >> 4;\n                    }\n                    while (tmp_33 == 0 && tmp_72 == 0);\n                    v17 = (char)(v16 == 0);\n                    v18 = (char)(v15 == 0);\n                    if ((char)(v16 == 0) < (unsigned long long)(char)(v15 == 0))\n                    {\n                        v19 = v10;\n                        v20 = (char)v10 | 184;\n                    }\n                    else if ((char)[D] amd64g_calculate_condition(0x6<64>, 0x5<64>, cc_dep1<8>, cc_dep2<8>, cc_ndep<8>))\n                    {\n                        v20 = (char)v19 | 152;\n                    }\n                    v21 = (unsigned int)sub_406fb0();\n                    v22 = dcgettext(0x0, 0x410fc4, 0x5);\n                }\n                if ((g_617660 == 0 || g_617660 == 4 || g_617660 == 3) && (g_617660 == 0 || ((char)g_6176e8 & 16) == 0 || g_617660 != 4))\n                {\n                    dcgettext(0x0, 0x410fcb, 0x5);\n                    if (sub_40acf0() == -1)\n                    {\n                        v0 = 0;\n                    }\n                    v13 = v0;\n                }\n            }\n            if (*(*(v6)) != 2 || g_617660 == 4 && g_617660 != 0 && ((char)g_6176e8 & 16) != 0 || g_617660 != 0 && g_617660 != 4 && g_617660 != 3)\n            {\n                v8 = strdup(v7);\n                v0 = v8;\n                v13 = v8;\n            }\n            if (v13 != 0)\n            {\n                sub_403b50();\n                *((unsigned long long *)(*((long long *)(g_617648 + g_617640 * 8 - 8)) + v5)) = v0;\n                if (*((long long *)(*((long long *)(g_617658 + v5)) + 32)) > sub_408190())\n                {\n                    v3 = g_617658;\n                    v27 = *((long long *)(g_617658 + v5));\n                    v2 = *((long long *)(*((long long *)(g_617658 + v5)) + 32));\n                }\n                else\n                {\n                    v2 = sub_408190();\n                    v3 = g_617658;\n                    v27 = *((long long *)(g_617658 + v5));\n                }\n                v4 += 1;\n                v27->field_20 = v2;\n                if (g_617650 <= v4)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                sub_40a7b0(); /* do not return */\n            }\n        }\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4066a0",
            "funcStartAddr": "0x4066a0",
            "funcEndAddr": "0x406770",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_4066a0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x8]\n    unsigned long v3;  // r12\n    unsigned long long v4[10];  // rdi\n    unsigned long long v5[10];  // r12\n    unsigned long v6;  // rbx\n    unsigned long long v7;  // rdi\n    unsigned long long v9[2];  // rbx\n    unsigned long long v10;  // rdi\n    unsigned long long v11;  // rax\n    unsigned long long v12[2];  // rbp\n    struct_0 *v13;  // rdi\n    void *v14;  // rbx\n    struct_0 *v15;  // rdi\n    void *v16;  // rbx\n\n    v1 = v3;\n    v5 = v4;\n    v0 = v6;\n    v12 = *(v4);\n    v11 = v4[1];\n    if (v4[8] != 0 && v4[4] != 0 && *(v4) < v4[1])\n    {\n        while (true)\n        {\n            v7 = *(v12);\n            if (*(v12) == 0)\n            {\n                v12 = &v12[2];\n                if (v11 <= v12)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v9 = v12;\n                while (true)\n                {\n                    *((long long *)(r12<8> + 64))();\n                    v9 = v9[1];\n                    if (v9 == 0)\n                    {\n                        break;\n                    }\n                    v10 = *(v9);\n                }\n                v11 = v5[1];\n                v12 = &v12[2];\n                if (v5[1] <= v12)\n                {\n                    break;\n                }\n            }\n        }\n        v12 = *(v5);\n    }\n    if ((v4[8] == 0 || v4[4] == 0 || *(v4) < v4[1]) && v12 < v11)\n    {\n        do\n        {\n            v13 = v12[1];\n            if (v12[1] != 0)\n            {\n                while (true)\n                {\n                    v14 = v13->field_8;\n                    free(v13);\n                    v13 = v14;\n                    if (v14 == 0)\n                    {\n                        break;\n                    }\n                }\n            }\n            v12 = &v12[2];\n        }\n        while (v5[1] > v12);\n    }\n    v15 = v5[9];\n    if (v5[9] != 0)\n    {\n        while (true)\n        {\n            v16 = v15->field_8;\n            free(v15);\n            v15 = v16;\n            if (v16 == 0)\n            {\n                break;\n            }\n        }\n    }\n    free(*(v5));\n}\n"
        },
        {
            "funcName": "sub_40a3a0",
            "funcStartAddr": "0x40a3a0",
            "funcEndAddr": "0x40a3c0",
            "decompiledFuncCode": "int sub_40a3a0()\n{\n    unsigned long long v1;  // r9\n    unsigned long long v2[2];  // r8\n\n    v1 = 0;\n    if (*(v2) != 0)\n    {\n        do\n        {\n            v1 += 1;\n        }\n        while (v2[v1] != 0);\n    }\n}\n"
        },
        {
            "funcName": "main",
            "funcStartAddr": "0x4023e0",
            "funcEndAddr": "0x403896",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[8];\n    struct struct_2 *field_8;\n} struct_1;\n\ntypedef struct struct_2 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[16];\n    char field_28;\n} struct_2;\n\ntypedef struct struct_3 {\n    char padding_0[32];\n    unsigned long long field_20;\n} struct_3;\n\nextern unsigned long long g_0;\nextern unsigned long long g_10;\nextern unsigned int g_4110ba;\nextern unsigned int g_411155;\nextern unsigned int g_411189;\nextern unsigned int g_411fa8;\nextern unsigned int g_412018;\nextern unsigned int g_412048;\nextern unsigned int g_412078;\nextern unsigned int g_4120f8;\nextern unsigned int g_413a14;\nextern char g_61737c;\nextern unsigned int g_6175e0;\nextern unsigned long long g_617640;\nextern unsigned long long **g_617648;\nextern unsigned long long g_617650;\nextern unsigned long long *g_617658;\nextern unsigned int g_617660;\nextern unsigned long long g_617680;\nextern char g_6176b8;\nextern char g_6176b9;\nextern unsigned long long g_6176c0;\nextern unsigned long long g_6176c8[2];\nextern unsigned long long g_6176d0[2];\nextern unsigned int g_6176d8;\nextern char g_6176dc;\nextern char g_6176dd;\nextern unsigned long long g_6176e0;\nextern unsigned int g_6176e8;\nextern char g_6176ec;\nextern char g_6176ed;\nextern char g_6176ee;\nextern unsigned long long g_6176f0;\nextern unsigned long long g_6178a8;\nextern unsigned long long g_8;\nextern unsigned long long stdout[7];\n\nint main()\n{\n    unsigned long|unsigned long long v0;  // [bp-0x178]\n    unsigned long long *|unsigned long long v1;  // [bp-0x170]\n    unsigned long|unsigned long long v2;  // [bp-0x168]\n    char *|unsigned long|unsigned long long|unsigned long long * v3;  // [bp-0x160]\n    unsigned int|char *|unsigned long long * v4;  // [bp-0x158]\n    unsigned int|char *|unsigned long long v5;  // [bp-0x150]\n    char|char * v6;  // [bp-0x148]\n    unsigned long long v7;  // [bp-0x140]\n    char *v8;  // [bp-0x138]\n    unsigned long|unsigned long long v9;  // [bp-0x130]\n    unsigned long|unsigned long long v10;  // [bp-0x128]\n    unsigned long v11;  // [bp-0x120]\n    unsigned long long *v12;  // [bp-0x118]\n    unsigned long long v13;  // [bp-0x110]\n    unsigned long long v14;  // [bp-0x108]\n    char v15;  // [bp-0xf9]\n    unsigned long v16;  // [bp-0xf8]\n    char *v17;  // [bp-0xf0]\n    unsigned long long v18;  // [bp-0xe8]\n    unsigned int|unsigned long v19;  // [bp-0xc8]\n    unsigned long long v21;  // r12\n    unsigned long long v22;  // rsi\n    char *v25;  // r13\n    unsigned long long v26;  // rax\n    unsigned long long v27;  // rax\n    unsigned long long [2]|unsigned long long v36;  // r12\n    unsigned long long v37;  // r13\n    unsigned long long v38[2];  // rbp\n    unsigned long long v39;  // rax\n    unsigned long long v40;  // rbp\n    unsigned long long v41;  // rax\n    unsigned long long v42;  // rax\n    unsigned long long *v43;  // r12\n    unsigned long long v44;  // r14\n    unsigned int v45;  // ebp\n    unsigned long long v46;  // rax\n    unsigned short v48;  // dx\n    unsigned long v49;  // rax\n    unsigned long long v50;  // rbp\n    unsigned int|unsigned long v56;  // rbp\n    unsigned long long v58;  // r12\n    unsigned long long v63;  // r13\n    unsigned long long v81;  // r12\n    unsigned long long v82;  // rbp\n    unsigned long long *v83;  // rax\n    unsigned long v84;  // rcx\n    unsigned long long v85;  // rbx\n    unsigned int v86;  // eax\n    unsigned long long v87;  // rbp\n    char|unsigned long long v88;  // r14\n    char *v89;  // r12\n    char *v90;  // r13\n    unsigned long long v91;  // rax\n    unsigned long long v92;  // r14\n    char *|unsigned long long v93;  // rbx\n    unsigned long long v94;  // r15\n    unsigned long long v95;  // rcx\n    unsigned long long v96;  // rax\n    unsigned long long v97;  // rcx\n    unsigned long long v98;  // rax\n    unsigned long long v99;  // r12\n    char v100;  // r8b\n    unsigned long long v101;  // rax\n    unsigned long v102;  // r10\n    unsigned int v103;  // eax\n    char v104;  // al\n    unsigned long long v106;  // rbx\n    char *v108;  // rdi\n    unsigned long long v109;  // rbx\n    unsigned long long v110;  // rcx\n    char v111;  // cc_dep2\n    unsigned long v112;  // d\n    unsigned long long v113;  // r14\n    unsigned long long v114;  // rbp\n    unsigned long long v115;  // r12\n    char *v116;  // rsi\n    unsigned long long v117;  // rcx\n    unsigned long long v118;  // cc_dep1\n    unsigned long long v119;  // cc_dep2\n    unsigned long long v121;  // rcx\n    char v122;  // cc_dep2\n    unsigned long long v123;  // rcx\n    unsigned long long v125;  // rax\n    unsigned long long v126;  // rax\n    unsigned long long v127;  // rax\n    unsigned int *v128;  // r13\n    char *v130;  // rsi\n    unsigned long long v131;  // rcx\n    unsigned long long v132;  // cc_dep1\n    unsigned long long v133;  // cc_dep2\n    unsigned long long v135;  // rax\n    unsigned int v136;  // eax\n    char v137;  // al\n    void *v139;  // rbx\n    unsigned long long v141;  // rcx\n    unsigned long long v143;  // rbx\n    unsigned long long v144;  // rbp\n    unsigned long long v145;  // rax\n    unsigned long long v146;  // rax\n    unsigned int v148;  // cc_dep1\n    struct_1 *v150;  // r13\n    struct_2 *v151;  // r15\n    char *v152;  // rdi\n    unsigned long long v154;  // rcx\n    char v155;  // cc_dep2\n    unsigned long v156;  // d\n    char *v157;  // rdi\n    unsigned long long v159;  // rcx\n    char v160;  // cc_dep2\n    char *v161;  // r14\n    unsigned long long v162;  // rax\n    unsigned long long v163;  // rax\n    unsigned long long v166;  // rax\n    char *v167;  // r10\n    unsigned long long v168;  // rcx\n    char *v169;  // rdi\n    char v170;  // cc_dep2\n    char *v171;  // rdi\n    unsigned long long v172;  // rsi\n    char v173;  // cc_dep2\n    unsigned long long v174;  // rax\n    unsigned long long v175;  // rax\n    unsigned long long v178;  // rax\n    unsigned long long v180;  // rbx\n    unsigned int v181;  // eax\n    char v182;  // al\n    unsigned long long v185;  // r13\n    unsigned long long v186;  // rbx\n    void *v187;  // rax\n    struct_3 *v189;  // rdi\n    char *v191;  // rdx\n    char *v192;  // rax\n\n    v21 = &g_0;\n    v4 = v22;\n    sub_4081c0();\n    setlocale(0x6, 0x413a14);\n    bindtextdomain(0x4110ba, 0x411fa8);\n    textdomain(0x4110ba);\n    sub_410f70();\n    g_6176d0[0] = &g_0;\n    g_6176c8[0] = &g_0;\n    *((unsigned long long **)&g_6176ee) = &g_0;\n    *((unsigned long long **)&g_6176ec) = &g_0;\n    g_6176e8 = -1;\n    *((unsigned long long **)&g_6176b9) = &g_0;\n    *((unsigned long long **)&g_6176dd) = &g_0;\n    *((unsigned long long **)&g_6176d8) = &g_0;\n    *((unsigned long long **)&g_6176b8) = &g_0;\n    g_617680 = &g_0;\n    v25 = (unsigned long long)dcgettext(0x0, 0x412018, 0x5);\n    while (true)\n    {\n        v19 = -1;\n        v26 = sub_40c380();\n        if ((unsigned int)v26 == -1)\n        {\n            break;\n        }\n        if ((unsigned int)v26 != 105)\n        {\n            if (v26 > 105)\n            {\n                if ((unsigned int)v26 != 118)\n                {\n                    if (v26 > 118)\n                    {\n                        if ((unsigned int)v26 == 129)\n                        {\n                            *((unsigned long long **)&g_6176dc) = &g_0;\n                        }\n                        else if (v26 <= 129)\n                        {\n                            if ((unsigned int)v26 == 120)\n                            {\n                                g_6176c8[0] = g_6178a8;\n                                *((unsigned long long *[2])(g_6176c8 + &g_8)) = g_6176c8;\n                                g_6176c8[0] = (unsigned int)sub_40a560();\n                            }\n                            if ((unsigned int)v26 == 128)\n                            {\n                                *((unsigned long long **)&g_6176dc) = &g_0;\n                            }\n                        }\n                        else if ((unsigned int)v26 == 130)\n                        {\n                            *((unsigned long long **)&g_6176b8) = &g_0;\n                        }\n                        else if ((unsigned int)v26 == 131)\n                        {\n                            if (g_617660 != 1 && g_617660 == 0 && v21 != 0)\n                            {\n                                error(0x0, 0x0, v25);\n                                sub_404930(); /* do not return */\n                            }\n                        }\n                    }\n                    else\n                    {\n                        if ((unsigned int)v26 == 108)\n                        {\n                            *((unsigned long long **)&g_6176ed) = &g_0;\n                        }\n                        else if (v26 > 108)\n                        {\n                            if ((unsigned int)v26 == 109)\n                            {\n                                *((unsigned long long **)&g_6176e8) = &g_0;\n                                g_6176e0 = 0x100000;\n                            }\n                        }\n                        else\n                        {\n                            if ((unsigned int)v26 == 107)\n                            {\n                                *((unsigned long long **)&g_6176e8) = &g_0;\n                                g_6176e0 = 0x400;\n                            }\n                        }\n                    }\n                }\n            }\n            else\n            {\n                if ((unsigned int)v26 == 72)\n                {\n                    g_6176e8 = 144;\n                    g_6176e0 = &g_0;\n                }\n                else if (v26 > 72)\n                {\n                    if ((unsigned int)v26 != 84)\n                    {\n                        if (v26 > 84)\n                        {\n                            if ((unsigned int)v26 == 97)\n                            {\n                                *((unsigned long long **)&g_6176ee) = &g_0;\n                            }\n                            if ((unsigned int)v26 == 104)\n                            {\n                                g_6176e8 = 176;\n                                g_6176e0 = &g_0;\n                            }\n                        }\n                        else if ((unsigned int)v26 == 80)\n                        {\n                            if (g_617660 != 4)\n                            {\n                                v21 = &g_0;\n                            }\n                        }\n                    }\n                    else\n                    {\n                        if (g_617660 != 4)\n                        {\n                            *((unsigned long long **)&g_6176b9) = &g_0;\n                        }\n                    }\n                }\n                else\n                {\n                    if ((unsigned int)v26 == -130)\n                    {\n                        sub_404930(); /* do not return */\n                    }\n                    else if (v26 > -18446744069414584450)\n                    {\n                        if ((unsigned int)v26 == 66)\n                        {\n                            v27 = sub_407980();\n                            sub_40a820(); /* do not return */\n                        }\n                    }\n                    else\n                    {\n                        if ((unsigned int)v26 == -131)\n                        {\n                            v3 = &g_0;\n                            v2 = \"Paul Eggert\";\n                            sub_40a420();\n                            exit(0x0); /* do not return */\n                        }\n                    }\n                }\n            }\n        }\n        else\n        {\n            if (g_617660 != 4)\n            {\n                *((unsigned long long **)&g_617660) = &g_0;\n            }\n        }\n        if (v26 <= 72 && v26 <= 105 && (unsigned int)v26 == 70 && v26 > -18446744069414584450 && (unsigned int)v26 != 105 && (unsigned int)v26 != -130 && (unsigned int)v26 != 66 && (unsigned int)v26 != 72 || (unsigned int)v26 == 116 && v26 <= 118 && (unsigned int)v26 != 109 && v26 > 108 && v26 > 105 && (unsigned int)v26 != 108 && (unsigned int)v26 != 118 && (unsigned int)v26 != 105)\n        {\n            g_6176d0[0] = g_6178a8;\n            *((unsigned long long *[2])(g_6176d0 + &g_8)) = g_6176d0;\n            g_6176d0[0] = (unsigned int)sub_40a560();\n        }\n        if (g_6176b9 == 0 && ((unsigned int)v26 == 131 && g_617660 != 0 && (unsigned int)v26 != 130 && v26 > 105 && g_617660 != 1 && (unsigned int)v26 != 129 && v26 > 118 && (unsigned int)v26 != 118 && (unsigned int)v26 != 105 && v26 > 129 || g_617660 == 0 && v21 == 0 && (unsigned int)v26 == 131 && (unsigned int)v26 != 130 && v26 > 105 && g_617660 != 1 && (unsigned int)v26 != 129 && v26 > 118 && (unsigned int)v26 != 118 && (unsigned int)v26 != 105 && v26 > 129))\n        {\n            *((unsigned long long **)&g_617660) = &g_0;\n            sub_404d60();\n        }\n        if (g_617660 == 4 && (unsigned int)v26 == 105 || g_617660 == 4 && v26 <= 105 && (unsigned int)v26 == 84 && v26 > 72 && (unsigned int)v26 != 105 && (unsigned int)v26 != 72 || g_617660 == 4 && v26 <= 105 && v26 <= 84 && (unsigned int)v26 == 80 && v26 > 72 && (unsigned int)v26 != 84 && (unsigned int)v26 != 105 && (unsigned int)v26 != 72 || g_617660 == 1 && (unsigned int)v26 == 131 && (unsigned int)v26 != 130 && v26 > 105 && (unsigned int)v26 != 129 && v26 > 118 && (unsigned int)v26 != 118 && (unsigned int)v26 != 105 && v26 > 129 || g_6176b9 != 0 && ((unsigned int)v26 == 131 && g_617660 != 0 && (unsigned int)v26 != 130 && v26 > 105 && g_617660 != 1 && (unsigned int)v26 != 129 && v26 > 118 && (unsigned int)v26 != 118 && (unsigned int)v26 != 105 && v26 > 129 || g_617660 == 0 && v21 == 0 && (unsigned int)v26 == 131 && (unsigned int)v26 != 130 && v26 > 105 && g_617660 != 1 && (unsigned int)v26 != 129 && v26 > 118 && (unsigned int)v26 != 118 && (unsigned int)v26 != 105 && v26 > 129))\n        {\n            error(0x0, 0x0, v25);\n        }\n        if (...)\n        {\n            sub_404930(); /* do not return */\n        }\n    }\n    if (g_6176e8 == -1)\n    {\n        if (v21 != 0)\n        {\n            *((unsigned long long **)&g_6176e8) = &g_0;\n            g_6176e0 = (unsigned long long)((unsigned int)(unsigned long long *)((char *)&g_0 + -1 * (char)(getenv(\"POSIXLY_CORRECT\") < &g_0)) & 0x200) + 0x200;\n        }\n        else\n        {\n            getenv(\"DF_\");\n            sub_407980();\n        }\n    }\n    if (g_617660 != 1 && g_617660 != 4)\n    {\n        if (((char)g_6176e8 & 16) != 0)\n        {\n            *((unsigned long long **)&g_617660) = &g_0;\n        }\n        else if (v21 != 0)\n        {\n            *((unsigned long long **)&g_617660) = &g_0;\n        }\n    }\n    v36 = g_6176d0;\n    v37 = &g_0;\n    if (g_6176d0 != 0)\n    {\n        do\n        {\n            v38 = g_6176c8;\n            if (g_6176c8 != 0)\n            {\n                while (true)\n                {\n                    v39 = strcmp(*(g_6176d0), *(v38));\n                    if (v39 != 0)\n                    {\n                        v38 = *((long long *)(v38 + &g_8));\n                        if (v38 == 0)\n                        {\n                            break;\n                        }\n                    }\n                    else\n                    {\n                        v37 = &g_0;\n                        v40 = (unsigned int)sub_409de0();\n                        error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x412048, 0x5));\n                    }\n                }\n            }\n            v36 = *((long long *)(v36 + &g_8));\n        }\n        while (v36 != 0);\n        if (v37 != 0)\n        {\n            v41 = &g_0;\n        }\n    }\n    if (v37 == 0 || g_6176d0 == 0)\n    {\n        if (g_6175e0 < v108)\n        {\n            v42 = sub_40a560();\n            v43 = (long long)(int)g_6175e0;\n            v16 = v42;\n            v44 = v42;\n            while (true)\n            {\n                v45 = (unsigned int)v43;\n                if (v108 <= (unsigned int)v43)\n                {\n                    break;\n                }\n                v46 = __xstat(0x1, *((long long *)&((char *)v4)[v43 * &g_8]), (int)((unsigned int)v43 - g_6175e0) * 144 + v44);\n                if (!(v46 == 0))\n                {\n                    v50 = (unsigned int)sub_409c60();\n                    error(0x0, *(__errno_location()), \"%s\");\n                    *((unsigned long long **)&g_6176d8) = &g_0;\n                    *((unsigned long long **)&((char *)v4)[v43 * &g_8]) = &g_0;\n                }\n                else if (((unsigned short)*((int *)(v44 + (unsigned long long)(v45 - g_6175e0) * 144 + 24)) & 0xf000) != 0x1000)\n                {\n                    v49 = open(*((long long *)&((char *)v4)[v43 * &g_8]), 0x100, v48);\n                    if (v49 >= 0)\n                    {\n                        close(v49);\n                    }\n                }\n                v43 += &g_0;\n            }\n        }\n        if (g_61737c != 0)\n        {\n            g_6176c0 = (unsigned int)sub_40c670();\n            if (g_6176c0 != 0)\n            {\n                if (g_6176dc != 0)\n                {\n                    sync();\n                }\n                switch (g_617660)\n                {\n                case 0:\n                    sub_403e20();\n                    if (g_6176b9 != 0)\n                    {\n                        sub_403e20();\n                    }\n                    sub_403e20();\n                    sub_403e20();\n                    sub_403e20();\n                case 1:\n                    sub_403e20();\n                    if (g_6176b9 != 0)\n                    {\n                        sub_403e20();\n                    }\n                    sub_403e20();\n                    sub_403e20();\n                    sub_403e20();\n                    sub_403e20();\n                    sub_403e20();\n                case 2:\n                    sub_403e20();\n                    if (g_6176b9 != 0)\n                    {\n                        sub_403e20();\n                    }\n                    sub_403e20();\n                    sub_403e20();\n                    sub_403e20();\n                    sub_403e20();\n                    sub_403e20();\n                case 3:\n                    sub_403e20();\n                    if (g_6176b9 != 0)\n                    {\n                        sub_403e20();\n                    }\n                    sub_403e20();\n                    sub_403e20();\n                    sub_403e20();\n                case 4:\n                    if (g_617650 == 0)\n                    {\n                        sub_404d60();\n                    }\n                default:\n                    __assert_fail(); /* do not return */\n                }\n                if (g_617660 <= 4)\n                {\n                    sub_403ba0();\n                    if (g_6175e0 < v108)\n                    {\n                        v83 = (unsigned long long)g_6175e0;\n                        *((unsigned long long **)&g_6176ec) = &g_0;\n                        v10 = v83 + &g_0;\n                        v11 = (unsigned long long)&v108[!((unsigned int)v83)] + v83 + &g_0;\n                        while (true)\n                        {\n                            v84 = *((long long *)&((char *)v4)[v83 * &g_8]);\n                            v85 = *((long long *)&((char *)v4)[v83 * &g_8]);\n                            v8 = *((long long *)&((char *)v4)[v83 * &g_8]);\n                            if (*((long long *)&((char *)v4)[v83 << &g_0]) != 0)\n                            {\n                                v12 = (int)((unsigned int)v83 - g_6175e0) * 144 + v16;\n                                *((int *)&v5) = *((int *)((int)((unsigned int)v83 - g_6175e0) * 144 + v16 + 24));\n                                v86 = *((int *)((int)((unsigned int)v83 - g_6175e0) * 144 + v16 + 24)) & 0xb000;\n                                if (v86 == 0x2000)\n                                {\n                                    v17 = (unsigned long long)canonicalize_file_name(v84);\n                                    if (v17 != 0)\n                                    {\n                                        *((int *)&v5) = (*(v17) != 47? v85 : v17);\n                                    }\n                                    else\n                                    {\n                                        v5 = v8;\n                                    }\n                                    v87 = g_6176c0;\n                                    if (g_6176c0 != 0)\n                                    {\n                                        v14 = &g_0;\n                                        v88 = &g_0;\n                                        v9 = -1;\n                                        *((unsigned long long **)&v6) = &g_0;\n                                        while (true)\n                                        {\n                                            v89 = *((long long *)v87);\n                                            v90 = (unsigned long long)canonicalize_file_name(*((long long *)v87));\n                                            if (v90 != 0)\n                                            {\n                                                v89 = (*(v90) == 47? v90 : r12<8>);\n                                            }\n                                            v91 = strcmp(v5, v89);\n                                            if (v91 == 0)\n                                            {\n                                                v92 = g_6176c0;\n                                                v93 = *((long long *)&((char *)&g_8)[v87]);\n                                                v94 = &g_0;\n                                                if (g_6176c0 != 0)\n                                                {\n                                                    do\n                                                    {\n                                                        v94 = (strcmp(*((long long *)&((char *)&g_8)[v92]), *((long long *)&((char *)&g_8)[g_6176c0])) == &g_0? v92 : r15<8>);\n                                                        v92 = *((long long *)(v92 + 48));\n                                                    }\n                                                    while (v92 != 0);\n                                                    if (v94 != 0)\n                                                    {\n                                                        v95 = canonicalize_file_name(*((long long *)v94));\n                                                        if (v95 == 0 || *((char *)v95) != 47)\n                                                        {\n                                                            free(v95);\n                                                            v95 = (unsigned int)sub_40a790();\n                                                            if (v95 == 0)\n                                                            {\n                                                                v93 = *((long long *)&((char *)&g_8)[v87]);\n                                                            }\n                                                        }\n                                                        if (v95 != 0 || *((char *)v95) == 47 && v95 != 0)\n                                                        {\n                                                            v7 = v95;\n                                                            v96 = strcmp(v95, v89);\n                                                            v97 = v7;\n                                                            if (v96 == 0)\n                                                            {\n                                                                v93 = *((long long *)&((char *)&g_8)[v87]);\n                                                            }\n                                                            else\n                                                            {\n                                                                v88 = &g_0;\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                                if ((g_6176c0 == 0 || v95 == 0 || v94 == 0) && (g_6176c0 == 0 || v95 == 0 || v94 == 0 || *((char *)v95) != 47))\n                                                {\n                                                    v97 = &g_0;\n                                                }\n                                                if (v96 == 0 || g_6176c0 == 0 || v94 == 0 || v95 == 0 && v95 == 0 || v95 == 0 && *((char *)v95) != 47)\n                                                {\n                                                    v7 = v97;\n                                                    v98 = strlen(v93);\n                                                    v97 = v7;\n                                                    v99 = v6 ^ &g_0;\n                                                    v100 = !((long long)(stack_base)[-304] <= (long long)(stack_base)[-320]);\n                                                    v88 = (char)(v6 ^ &g_0) | !((long long)(stack_base)[-304] <= (long long)(stack_base)[-320]);\n                                                    if ((char)(v6 ^ &g_0) == 0 && (long long)(stack_base)[-304] <= (long long)(stack_base)[-320])\n                                                    {\n                                                        *((unsigned long long **)&v6) = &g_0;\n                                                    }\n                                                    else\n                                                    {\n                                                        v13 = v7;\n                                                        v15 = v100;\n                                                        v7 = v98;\n                                                        v101 = __xstat(0x1, (unsigned int)v93, (unsigned int)&v19);\n                                                        v97 = v13;\n                                                        if (v101 != 0 && v99 != 0 && v15 != 0)\n                                                        {\n                                                            v88 = &g_0;\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                            if (v91 == 0 && (v96 == 0 || g_6176c0 == 0 || v95 == 0 || v94 == 0) && (v96 == 0 || g_6176c0 == 0 || v95 == 0 || v94 == 0 || *((char *)v95) != 47) && !((char)(v6 ^ &g_0) == 0 && (long long)(stack_base)[-304] <= (long long)(stack_base)[-320]) && v101 != 0 && v99 != 0 && v15 == 0 || v91 == 0 && (v96 == 0 || g_6176c0 == 0 || v95 == 0 || v94 == 0) && (v96 == 0 || g_6176c0 == 0 || v95 == 0 || v94 == 0 || *((char *)v95) != 47) && !((char)(v6 ^ &g_0) == 0 && (long long)(stack_base)[-304] <= (long long)(stack_base)[-320]) && v101 != 0 && v99 == 0)\n                                            {\n                                                v88 = v6;\n                                            }\n                                            if (v91 == 0 && (v96 == 0 || g_6176c0 == 0 || v95 == 0 || v94 == 0) && (v96 == 0 || g_6176c0 == 0 || v95 == 0 || v94 == 0 || *((char *)v95) != 47) && !((char)(v6 ^ &g_0) == 0 && (long long)(stack_base)[-304] <= (long long)(stack_base)[-320]) && v101 != 0 && v99 != 0 && v15 != 0 || v91 == 0 && (v96 == 0 || g_6176c0 == 0 || v95 == 0 || v94 == 0) && (v96 == 0 || g_6176c0 == 0 || v95 == 0 || v94 == 0 || *((char *)v95) != 47) && !((char)(v6 ^ &g_0) == 0 && (long long)(stack_base)[-304] <= (long long)(stack_base)[-320]) && v101 == 0)\n                                            {\n                                                if (v7 != 1)\n                                                {\n                                                    v9 = v7;\n                                                    v14 = v87;\n                                                }\n                                                else\n                                                {\n                                                    free(v13);\n                                                    free(v90);\n                                                    free(v17);\n                                                    v14 = v87;\n                                                }\n                                            }\n                                            if (v91 == 0 && (v96 == 0 || g_6176c0 == 0 || v95 == 0 || v94 == 0) && (v96 == 0 || g_6176c0 == 0 || v95 == 0 || v94 == 0 || *((char *)v95) != 47) && !((char)(v6 ^ &g_0) == 0 && (long long)(stack_base)[-304] <= (long long)(stack_base)[-320]) && v101 != 0 && v99 != 0 && v15 == 0 || v91 == 0 && (v96 == 0 || g_6176c0 == 0 || v95 == 0 || v94 == 0) && (v96 == 0 || g_6176c0 == 0 || v95 == 0 || v94 == 0 || *((char *)v95) != 47) && !((char)(v6 ^ &g_0) == 0 && (long long)(stack_base)[-304] <= (long long)(stack_base)[-320]) && v101 != 0 && v99 == 0 || (v91 == 0 && (v96 == 0 || g_6176c0 == 0 || v95 == 0 || v94 == 0) && (v96 == 0 || g_6176c0 == 0 || v95 == 0 || v94 == 0 || *((char *)v95) != 47) && !((char)(v6 ^ &g_0) == 0 && (long long)(stack_base)[-304] <= (long long)(stack_base)[-320]) && v101 != 0 && v99 != 0 && v15 != 0 || v91 == 0 && (v96 == 0 || g_6176c0 == 0 || v95 == 0 || v94 == 0) && (v96 == 0 || g_6176c0 == 0 || v95 == 0 || v94 == 0 || *((char *)v95) != 47) && !((char)(v6 ^ &g_0) == 0 && (long long)(stack_base)[-304] <= (long long)(stack_base)[-320]) && v101 == 0) && v7 != 1)\n                                            {\n                                                *((unsigned long long *)&v6) = v88;\n                                                v88 = &g_0;\n                                            }\n                                            if (v91 == 0 && v96 != 0 && g_6176c0 != 0 && v94 != 0 && (*((char *)v95) == 47 || v95 != 0) && (v95 != 0 || v95 != 0) || v91 == 0 && (v96 == 0 || g_6176c0 == 0 || v95 == 0 || v94 == 0) && (v96 == 0 || g_6176c0 == 0 || v95 == 0 || v94 == 0 || *((char *)v95) != 47) && !((char)(v6 ^ &g_0) == 0 && (long long)(stack_base)[-304] <= (long long)(stack_base)[-320]) && v101 != 0 && v99 != 0 && v15 == 0 || v91 == 0 && (v96 == 0 || g_6176c0 == 0 || v95 == 0 || v94 == 0) && (v96 == 0 || g_6176c0 == 0 || v95 == 0 || v94 == 0 || *((char *)v95) != 47) && !((char)(v6 ^ &g_0) == 0 && (long long)(stack_base)[-304] <= (long long)(stack_base)[-320]) && v101 != 0 && v99 == 0 || (v91 == 0 && (v96 == 0 || g_6176c0 == 0 || v95 == 0 || v94 == 0) && (v96 == 0 || g_6176c0 == 0 || v95 == 0 || v94 == 0 || *((char *)v95) != 47) && !((char)(v6 ^ &g_0) == 0 && (long long)(stack_base)[-304] <= (long long)(stack_base)[-320]) && v101 != 0 && v99 != 0 && v15 != 0 || v91 == 0 && (v96 == 0 || g_6176c0 == 0 || v95 == 0 || v94 == 0) && (v96 == 0 || g_6176c0 == 0 || v95 == 0 || v94 == 0 || *((char *)v95) != 47) && !((char)(v6 ^ &g_0) == 0 && (long long)(stack_base)[-304] <= (long long)(stack_base)[-320]) && v101 == 0) && v7 != 1 || v91 == 0 && (v96 == 0 || g_6176c0 == 0 || v95 == 0 || v94 == 0) && (v96 == 0 || g_6176c0 == 0 || v95 == 0 || v94 == 0 || *((char *)v95) != 47) && (char)(v6 ^ &g_0) == 0 && (long long)(stack_base)[-304] <= (long long)(stack_base)[-320])\n                                            {\n                                                free(v97);\n                                            }\n                                            if (...)\n                                            {\n                                                free(v90);\n                                                v87 = *((long long *)(v87 + 48));\n                                                if (v87 == 0)\n                                                {\n                                                    free(v17);\n                                                    if (v14 == 0)\n                                                    {\n                                                        if (v88 == 0)\n                                                        {\n                                                            break;\n                                                        }\n                                                        v109 = (unsigned int)sub_409b90();\n                                                        error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x4120f8, 0x5));\n                                                        *((unsigned long long **)&g_6176d8) = &g_0;\n                                                    }\n                                                }\n                                            }\n                                            if (...)\n                                            {\n                                                v3 = v102;\n                                                v103 = (char)*((char *)(v14 + 40));\n                                                v2 = &g_0;\n                                                v104 = (char)*((char *)(v14 + 40)) >> &g_0;\n                                                v1 = &g_0;\n                                                v0 = rax<4> & &g_0;\n                                                sub_403f10();\n                                            }\n                                        }\n                                        if (v87 == 0 && v14 == 0)\n                                        {\n                                            v106 = g_6176c0;\n                                        }\n                                        else if (v87 == 0 && v14 == 0 && v88 != 0 || (v91 == 0 && (v96 == 0 || g_6176c0 == 0 || v95 == 0 || v94 == 0) && (v96 == 0 || g_6176c0 == 0 || v95 == 0 || v94 == 0 || *((char *)v95) != 47) && !((char)(v6 ^ &g_0) == 0 && (long long)(stack_base)[-304] <= (long long)(stack_base)[-320]) && v101 == 0 || v91 == 0 && (v96 == 0 || g_6176c0 == 0 || v95 == 0 || v94 == 0) && (v96 == 0 || g_6176c0 == 0 || v95 == 0 || v94 == 0 || *((char *)v95) != 47) && !((char)(v6 ^ &g_0) == 0 && (long long)(stack_base)[-304] <= (long long)(stack_base)[-320]) && v101 != 0 && v99 != 0 && v15 != 0) && v7 == 1 || v87 == 0 && v14 != 0)\n                                        {\n                                            v141 = v10;\n                                            v83 = v10;\n                                            if (v11 == v10)\n                                            {\n                                                break;\n                                            }\n                                        }\n                                    }\n                                    else\n                                    {\n                                        free(v17);\n                                    }\n                                }\n                                if (g_6176c0 == 0 || v86 != 0x2000 || v108 != 0)\n                                {\n                                    v106 = g_6176c0;\n                                    if (*(v108) == 47 && v108 != 0)\n                                    {\n                                        v110 = -1;\n                                        v108 = (unsigned long long)canonicalize_file_name((unsigned int)v8);\n                                        while (v110 != 0)\n                                        {\n                                            v110 += -0x1 * &g_0;\n                                            v111 = *(v108);\n                                            v108 = &v108[v112];\n                                            break;\n                                        }\n                                        v113 = !(rcx<8>) + -0x1 * &g_0;\n                                        if (g_6176c0 == 0)\n                                        {\n                                            free(v108);\n                                        }\n                                        else\n                                        {\n                                            v114 = g_6176c0;\n                                            v115 = &g_0;\n                                            do\n                                            {\n                                                v116 = *((long long *)(v114 + 24));\n                                                v117 = &g_0;\n                                                v108 = \"lofs\";\n                                                while (v117 != 0)\n                                                {\n                                                    v117 += -0x1 * &g_0;\n                                                    v118 = *(v116);\n                                                    v119 = *(v108);\n                                                    v108 = &v108[v112];\n                                                    v116 = &v116[v112];\n                                                    break;\n                                                }\n                                                if ((char)(unsigned long long)((char *)((char)(v118 > v119) + -0x1 * &g_0) + -1 * (v118 < v119)) != 0)\n                                                {\n                                                    v121 = -1;\n                                                    v108 = *((long long *)&((char *)&g_8)[v114]);\n                                                    while (v121 != 0)\n                                                    {\n                                                        v121 += -0x1 * &g_0;\n                                                        v122 = *(v108);\n                                                        v108 = &v108[v112];\n                                                        break;\n                                                    }\n                                                    v123 = !(rcx<8>);\n                                                    if (v113 >= v5)\n                                                    {\n                                                        if (v5 == 1)\n                                                        {\n                                                            v115 = v114;\n                                                        }\n                                                        else if (v113 == v5 || *((char *)(&v108[v123] - &g_0)) == 47)\n                                                        {\n                                                            *((unsigned long long **)&v5) = v123 + -0x1 * &g_0;\n                                                            v115 = (strncmp(*((long long *)&((char *)&g_8)[g_6176c0]), v108, v5) == &g_0? v114 : &g_0);\n                                                        }\n                                                    }\n                                                }\n                                                v114 = *((long long *)(v114 + 48));\n                                            }\n                                            while (*((long long *)(g_6176c0 + 48)) != 0);\n                                            free(v108);\n                                            if (v115 != 0)\n                                            {\n                                                v125 = __xstat(0x1, *((long long *)&((char *)&g_8)[v115]), (unsigned int)&v19);\n                                            }\n                                        }\n                                    }\n                                    if (v108 == 0 || *(v108) != 47)\n                                    {\n                                        free(v108);\n                                    }\n                                    if (g_6176c0 != 0)\n                                    {\n                                        if (v115 == 0 || v108 == 0 || *(v108) != 47 || v125 != 0 || *((long long *)&v19) != *(v12))\n                                        {\n                                            v115 = &g_0;\n                                            do\n                                            {\n                                                v126 = *((long long *)(v106 + 32));\n                                                if (*((long long *)(v106 + 32)) == -1)\n                                                {\n                                                    v127 = __xstat(0x1, *((long long *)&((char *)&g_8)[v106]), (unsigned int)&v19);\n                                                    if (v127 == 0)\n                                                    {\n                                                        v126 = *((long long *)&v19);\n                                                        *((long long *)(v106 + 32)) = *((long long *)&v19);\n                                                    }\n                                                    else\n                                                    {\n                                                        v128 = __errno_location();\n                                                        if (*(v128) == 5)\n                                                        {\n                                                            sub_409c60();\n                                                            error(0x0, *(v128), \"%s\");\n                                                            *((unsigned long long **)&g_6176d8) = &g_0;\n                                                        }\n                                                        *((long long *)(v106 + 32)) = -2;\n                                                        v126 = -2;\n                                                    }\n                                                }\n                                                if (*(v12) == v126)\n                                                {\n                                                    v130 = *((long long *)(v106 + 24));\n                                                    v131 = &g_0;\n                                                    v108 = \"lofs\";\n                                                    while (v131 != 0)\n                                                    {\n                                                        v131 += -0x1 * &g_0;\n                                                        v132 = *(v130);\n                                                        v133 = *(v108);\n                                                        v108 = &v108[v112];\n                                                        v130 = &v130[v112];\n                                                        break;\n                                                    }\n                                                    if ((char)(unsigned long long)((char *)((char)(v132 > v133) + -0x1 * &g_0) + -1 * (v132 < v133)) != 0)\n                                                    {\n                                                        v135 = __xstat(0x1, *((long long *)&((char *)&g_8)[v106]), (unsigned int)&v19);\n                                                        if (*((long long *)&v19) == *((long long *)(v106 + 32)) && v135 == 0)\n                                                        {\n                                                            v115 = v106;\n                                                        }\n                                                        if (*((long long *)&v19) != *((long long *)(v106 + 32)) || v135 != 0)\n                                                        {\n                                                            *((long long *)(v106 + 32)) = -2;\n                                                        }\n                                                    }\n                                                }\n                                                v106 = *((long long *)(v106 + 48));\n                                            }\n                                            while (v106 != 0);\n                                        }\n                                        if ((*(v108) == 47 || v115 != 0) && (v125 == 0 || v115 != 0) && (*((long long *)&v19) == *(v12) || v115 != 0) && (v115 != 0 || v115 != 0) && (v115 != 0 || v108 != 0))\n                                        {\n                                            v3 = v108;\n                                            v136 = (char)*((char *)(v115 + 40));\n                                            v2 = &g_0;\n                                            v137 = (char)*((char *)(v115 + 40)) >> &g_0;\n                                            v1 = &g_0;\n                                            v0 = rax<4> & &g_0;\n                                            sub_403f10();\n                                        }\n                                    }\n                                    if (g_6176c0 == 0 || v115 == 0 && v115 == 0 || v115 == 0 && v108 == 0 || v115 == 0 && *(v108) != 47 || v115 == 0 && v125 != 0 || v115 == 0 && *((long long *)&v19) != *(v12))\n                                    {\n                                        v139 = (unsigned long long)(unsigned int)sub_404ed0();\n                                        if (v139 != 0)\n                                        {\n                                            v3 = v12;\n                                            v2 = &g_0;\n                                            v1 = &g_0;\n                                            v0 = &g_0;\n                                            sub_403f10();\n                                            free(v139);\n                                        }\n                                    }\n                                }\n                            }\n                            v10 = v141 + (char *)&g_0;\n                        }\n                    }\n                    else\n                    {\n                        v81 = g_6176ee;\n                        g_6176f0 = (unsigned int)sub_406460();\n                        if (g_6176f0 != 0)\n                        {\n                            v143 = &g_0;\n                            v5 = v82;\n                            v144 = g_6176c0;\n                            while (true)\n                            {\n                                v145 = (char)*((char *)(v144 + 40));\n                                if (v146 != 0 && ((*((char *)(v144 + 40)) & 2) == 0 || g_6176ed == 0) && ((v145 & 1) == 0 || g_6176ec != 0 || g_6176ee != 0) && (char)v146 == 0)\n                                {\n                                    v148 = __xstat(0x1, *((long long *)&((char *)&g_8)[v144]), (unsigned int)&v19);\n                                    if (!((char)(&((char *)&g_0)[v148] == &g_0)) && g_6176f0 != 0)\n                                    {\n                                        v18 = *((long long *)&v19);\n                                        v150 = (unsigned long long)(unsigned int)sub_4061f0();\n                                        if (v150 != 0)\n                                        {\n                                            v151 = *((long long *)(v150 + &g_8));\n                                            v152 = *((long long *)&((char *)&g_10)[*((long long *)(v150 + &g_8))]);\n                                            if (*((long long *)&((char *)&g_10)[*((long long *)(v150 + &g_8))]) != 0 && *((long long *)&((char *)&g_10)[v144]) != 0)\n                                            {\n                                                v146 = (unsigned int)sub_403a60();\n                                                v154 = -1;\n                                                while (v154 != 0)\n                                                {\n                                                    v154 += -0x1 * &g_0;\n                                                    v155 = *(v152);\n                                                    v152 = &v152[v156];\n                                                    break;\n                                                }\n                                                v157 = *((long long *)&((char *)&g_10)[g_6176c0]);\n                                                v159 = -1;\n                                                while (v159 != 0)\n                                                {\n                                                    v159 += -0x1 * &g_0;\n                                                    v160 = *(v157);\n                                                    v157 = &v157[v156];\n                                                    break;\n                                                }\n                                                v4 = (char)(!(rcx<8>) + -0x1 * &g_0 < !(rcx<8>) + -0x1 * &g_0);\n                                            }\n                                            if (*((long long *)&((char *)&g_10)[*((long long *)(v150 + &g_8))]) == 0 || *((long long *)&((char *)&g_10)[v144]) == 0)\n                                            {\n                                                *((unsigned long long **)&v4) = &g_0;\n                                            }\n                                            v161 = *((long long *)v144);\n                                            if (g_6176b8 == 0 && (v151->field_28 & 2) != 0 && (*((char *)(v144 + 40)) & 2) != 0)\n                                            {\n                                                v162 = strcmp(v151->field_0, v161);\n                                            }\n                                        }\n                                    }\n                                }\n                                if ((*((char *)(v144 + 40)) & 2) == 0 && (v145 & 1) == 0 || g_6176ed == 0 && (v145 & 1) == 0 || (*((char *)(v144 + 40)) & 2) == 0 && g_6176ec != 0 || (*((char *)(v144 + 40)) & 2) == 0 && g_6176ee != 0 || g_6176ed == 0 && g_6176ec != 0 || g_6176ed == 0 && g_6176ee != 0)\n                                {\n                                    v146 = sub_403a10();\n                                }\n                                if (&((char *)&g_0)[v148] == &g_0 || v146 == 0 || (char)v146 != 0 || (*((char *)(v144 + 40)) & 2) != 0 && g_6176ed != 0 || g_6176ec == 0 && g_6176ee == 0 && (v145 & 1) != 0)\n                                {\n                                    v19 = *((long long *)(v144 + 32));\n                                }\n                                if (...)\n                                {\n                                    v163 = strchr(v161, 0x2f);\n                                    if (v163 != 0)\n                                    {\n                                        v166 = strchr(v151->field_0, 0x2f);\n                                    }\n                                    if (v163 == 0 || v166 != 0)\n                                    {\n                                        v167 = *((long long *)(v151 + &g_8));\n                                        v168 = -1;\n                                        v169 = *((long long *)(v151 + &g_8));\n                                        while (v168 != 0)\n                                        {\n                                            v168 += -0x1 * &g_0;\n                                            v170 = *(v169);\n                                            v169 = &v169[v156];\n                                            break;\n                                        }\n                                        v171 = *((long long *)&((char *)&g_8)[g_6176c0]);\n                                        v172 = !(rcx<8>) + -0x1 * &g_0;\n                                        v159 = -1;\n                                        while (v159 != 0)\n                                        {\n                                            v159 += -0x1 * &g_0;\n                                            v173 = *(v171);\n                                            v171 = &v171[v156];\n                                            break;\n                                        }\n                                        if (v174 != 0 && (v172 <= !(rcx<8>) - 1 || v4 != 0))\n                                        {\n                                            v175 = strcmp(v6, v4);\n                                        }\n                                    }\n                                    if (v172 <= !(rcx<8>) - 1 && v163 == 0 || v172 <= !(rcx<8>) - 1 && v166 != 0 || v163 == 0 && v4 != 0 || v4 != 0 && v166 != 0)\n                                    {\n                                        v6 = *((long long *)&((char *)&g_8)[g_6176c0]);\n                                        v4 = v167;\n                                        v174 = strcmp(v151->field_0, v161);\n                                    }\n                                    if (v175 == 0 && v174 != 0 || v4 == 0 && v172 > !(rcx<8>) - 1 || v166 == 0 && v163 != 0)\n                                    {\n                                        *((unsigned long long *)(v150 + &g_8)) = v144;\n                                    }\n                                    v144 = *((long long *)(v144 + 48));\n                                    if (g_6176ee == 0)\n                                    {\n                                        sub_40c620();\n                                    }\n                                }\n                                if (...)\n                                {\n                                    *((unsigned long long *)&((char *)&g_8)[v143]) = v144;\n                                    *((unsigned long long *)&((char *)&g_10)[v143]) = v143;\n                                    *((unsigned long *)v143) = v19;\n                                    if (sub_406c00() == 0)\n                                    {\n                                        break;\n                                    }\n                                    v144 = *((long long *)(v144 + 48));\n                                    v143 = (unsigned int)sub_40a560();\n                                }\n                                v82 = v5;\n                            }\n                            if (...)\n                            {\n                                sub_40a7b0(); /* do not return */\n                            }\n                            if (g_6176ee == 0)\n                            {\n                                for (g_6176c0 = &g_0; v143 != 0; v82 = v178)\n                                {\n                                    v178 = *((long long *)&((char *)&g_8)[v143]);\n                                    v143 = *((long long *)&((char *)&g_10)[v143]);\n                                    v81 = &g_0;\n                                    *((unsigned long long *)(v82 + 48)) = v82;\n                                }\n                                if (v81 != 0)\n                                {\n                                    g_6176c0 = v82;\n                                }\n                                sub_4066a0();\n                                g_6176f0 = &g_0;\n                            }\n                            for (v180 = g_6176c0; v180 != 0; v180 = *((long long *)(v180 + 48)))\n                            {\n                                v3 = v159;\n                                v181 = (char)*((char *)(v180 + 40));\n                                v2 = &g_0;\n                                v182 = (char)*((char *)(v180 + 40)) >> &g_0;\n                                v1 = &g_0;\n                                v0 = rax<4> & &g_0;\n                                sub_403f10();\n                            }\n                        }\n                        sub_40a7b0(); /* do not return */\n                    }\n                    if (g_6175e0 < v108 || g_6176f0 != 0)\n                    {\n                        if (g_6176dd != 0)\n                        {\n                            if (g_6176b8 != 0)\n                            {\n                                v3 = v11;\n                                v2 = &g_0;\n                                v1 = &g_617680;\n                                v0 = &g_0;\n                                sub_403f10();\n                            }\n                            if (g_617640 != 0)\n                            {\n                                v185 = &g_0;\n                                do\n                                {\n                                    if (g_617650 != 0)\n                                    {\n                                        v186 = &g_0;\n                                        while (true)\n                                        {\n                                            v19 = *((long long *)(*((long long *)&((char *)g_617658)[v186 * &g_8]) + 32));\n                                            v187 = sub_407f30();\n                                            v189 = v187;\n                                            if (v187 == 0)\n                                            {\n                                                v189 = *((long long *)(*((long long *)&((char *)g_617648)[&g_0 * &g_8]) + v186 * &g_8));\n                                            }\n                                            fputs_unlocked(v189, stdout);\n                                            v186 += (char *)&g_0;\n                                            free(v187);\n                                            if (v186 >= g_617650)\n                                            {\n                                                break;\n                                            }\n                                            v191 = stdout[5];\n                                            if (stdout[5] < stdout[6])\n                                            {\n                                                stdout[5] = &((char *)&g_0)[stdout[5]];\n                                                *(v191) = 32;\n                                            }\n                                            else\n                                            {\n                                                __overflow();\n                                            }\n                                        }\n                                    }\n                                    v192 = stdout[5];\n                                    if (stdout[5] < stdout[6])\n                                    {\n                                        stdout[5] = &((char *)&g_0)[stdout[5]];\n                                        *((unsigned long long **)&v192) = &g_8;\n                                    }\n                                    else\n                                    {\n                                        __overflow();\n                                    }\n                                    v185 += (char *)&g_0;\n                                }\n                                while (v185 < g_617640);\n                            }\n                        }\n                        else if (g_6176d8 == 0)\n                        {\n                            error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x411189, 0x5));\n                        }\n                    }\n                }\n            }\n            else\n            {\n                if (g_6175e0 < v108 && g_6176ee == 0 && g_6176ed == 0 && g_6176d0 == 0 && g_6176c8 == 0)\n                {\n                    v56 = &g_0;\n                    v58 = dcgettext(0x0, 0x411155, 0x5);\n                }\n                if (g_6176ed != 0 || g_6176c8 != 0 || g_6176d0 != 0 || g_6176ee != 0 || g_6175e0 >= v108)\n                {\n                    v56 = &g_0;\n                }\n                v63 = dcgettext(0x0, 0x412078, 0x5);\n                error(v56, *(__errno_location()), \"%s%s\");\n            }\n        }\n    }\n    if (g_617660 <= 4 && g_6176c0 != 0 && g_61737c != 0 && (v37 == 0 || g_6176d0 == 0) && (g_6175e0 < v108 || g_6176f0 != 0) && g_6176dd != 0 || g_617660 <= 4 && g_6176c0 != 0 && g_61737c != 0 && (v37 == 0 || g_6176d0 == 0) && (g_6175e0 < v108 || g_6176f0 != 0) && g_6176dd == 0 && g_6176d8 != 0)\n    {\n        v41 = g_6176d8;\n    }\n    if (g_617660 <= 4 && g_6176c0 != 0 && g_61737c != 0 && (v37 == 0 || g_6176d0 == 0) && (g_6175e0 < v108 || g_6176f0 != 0) && g_6176dd != 0 || g_617660 <= 4 && g_6176c0 != 0 && g_61737c != 0 && (v37 == 0 || g_6176d0 == 0) && (g_6175e0 < v108 || g_6176f0 != 0) && g_6176dd == 0 && g_6176d8 != 0 || v37 != 0 && g_6176d0 != 0)\n    {\n        return v41;\n    }\n}\n"
        },
        {
            "funcName": "sub_406980",
            "funcStartAddr": "0x406980",
            "funcEndAddr": "0x406bd6",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    struct struct_1 *field_48;\n} struct_0;\n\ntypedef struct struct_2 {\n    char padding_0[16];\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    struct struct_3 *field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n} struct_2;\n\ntypedef struct struct_3 {\n    char padding_0[8];\n    unsigned int field_8;\n    unsigned int field_c;\n    char field_10;\n} struct_3;\n\nint sub_406980()\n{\n    void tmp_10;  // tmp #10\n    void tmp_19;  // tmp #19\n    unsigned long long v0[2];  // [bp-0x20]\n    unsigned long v2;  // rsi\n    unsigned long long v3;  // rdx\n    unsigned long long *v4;  // r12\n    struct_0 *v5;  // rdi\n    struct_2 *v6;  // rbx\n    unsigned long long v7;  // rdx\n    unsigned long long v9;  // rax\n    uint128_t v10;  // xmm1\n    unsigned int v11;  // ymm1\n    struct_3 *v12;  // rdx\n    unsigned int|unsigned long|uint128_t v13;  // xmm1lq\n    uint128_t v14;  // xmm0\n    unsigned int v15;  // ymm0\n    unsigned long long v16;  // xmm0lq\n    unsigned long long v17;  // rax\n    uint128_t v18;  // xmm0\n    unsigned int v19;  // ymm0\n    unsigned long long v20;  // xmm0lq\n    struct_3 *v22;  // rdx\n    uint128_t v23;  // xmm2\n    unsigned int v24;  // ymm2\n    uint128_t v25;  // xmm0\n    uint128_t v26;  // xmm0\n    unsigned int v27;  // ymm0\n    unsigned int|unsigned long|uint128_t v28;  // xmm1\n    uint128_t v29;  // xmm1\n    unsigned int v30;  // ymm1\n    uint128_t v31;  // xmm0\n    unsigned long long v32;  // rax\n    unsigned long long v33;  // rax\n    unsigned long long v34[2];  // r12\n    unsigned long long v35[2];  // rax\n    unsigned long long v36;  // rdx\n\n    if (v2 != 0)\n    {\n        v4 = v3;\n        v6 = v5;\n        v7 = sub_405cc0();\n        if (v7 != 0)\n        {\n            if (v4 != 0)\n            {\n                *(v4) = v7;\n            }\n            return 0;\n        }\n        if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x10<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n        {\n            v13 = 0;\n            v12 = v6->field_28;\n            v13 = v5->field_18;\n            v9 = v6->field_10;\n            v14 = 0;\n            v15 = v9;\n            xmm0<8> = Conv(128->64, (xmm0<16> * Conv(32->128, Load(addr=(rdx<8> + 0x8<64>), size=4, endness=Iend_LE))))\n        }\n        else\n        {\n            v10 = 0;\n            tmp_10 = v6->field_18 % 2 | (unsigned int)v6->field_18 & 1;\n            v9 = v6->field_10;\n            v11 = tmp_10;\n            v12 = v6->field_28;\n            v13 = (unsigned long long)(unsigned int)xmm1<16> * 2;\n            tmp_19 = v9;\n            v17 = (unsigned int)v9 & 1;\n            v18 = 0;\n            v19 = tmp_19 >> 1 | v17;\n            xmm0<8> = Conv(128->64, ((xmm0<16> * 0x2<8>) * Conv(32->128, Load(addr=(rdx<8> + 0x8<64>), size=4, endness=Iend_LE))))\n        }\n        if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n        {\n            sub_405de0();\n            v22 = v6->field_28;\n            v23 = 0;\n            v24 = v6->field_28->field_8;\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x10<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n            {\n                v25 = 0;\n                v25 = (unsigned int)v5->field_10;\n            }\n            else\n            {\n                v26 = 0;\n                v27 = v5->field_10 >> 1 | (unsigned int)v5->field_10 & 1;\n                v25 = xmm0<16> * 2;\n            }\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x10<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n            {\n                v28 = 0;\n                v28 = v5->field_18;\n            }\n            else\n            {\n                v29 = 0;\n                v30 = v5->field_18 >> 1 | (unsigned int)v5->field_18 & 1;\n                v28 = (unsigned long long)(unsigned int)xmm1<16> * 2;\n            }\n            if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n            {\n                xmm0<16> = (xmm0<16> * Conv(32->128, Load(addr=(rdx<8> + 0xc<64>), size=4, endness=Iend_LE)))\n                if (v22->field_10 == 0)\n                {\n                    v31 *= xmm2<16>;\n                }\n                if (((char)(BinaryOp CmpF & 69) & 1) != 0 && ((char)(BinaryOp CmpF & 69) & 1) == 0)\n                {\n                    v32 = sub_406780();\n                    if (v32 != 0)\n                    {\n                        v33 = sub_405cc0();\n                    }\n                }\n            }\n        }\n    }\n    if (...)\n    {\n        v34 = v0;\n        if (*(v0) != 0)\n        {\n            v35 = v6->field_48;\n            if (v6->field_48 != 0)\n            {\n                v6->field_48 = v5->field_48->field_8;\n            }\n            else\n            {\n                v35 = malloc(0x10);\n            }\n        }\n        else\n        {\n            v0[0] = v2;\n            v6->field_20 = v6->field_20 + 1;\n            v6->field_18 = v6->field_18 + 1;\n            return 1;\n        }\n    }\n    if (v2 == 0 || ((char)(BinaryOp CmpF & 69) & 1) == 0 && v7 == 0 && (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1 && v33 != 0 && ((char)(BinaryOp CmpF & 69) & 1) != 0 && (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1 && v32 != 0)\n    {\n        abort(); /* do not return */\n    }\n    if (...)\n    {\n        return -18446744069414584321;\n    }\n    if (...)\n    {\n        v36 = v34[1];\n        v35[0] = v2;\n        v35[1] = v36;\n        v34[1] = v35;\n        v6->field_20 = v6->field_20 + 1;\n        return 1;\n    }\n}\n"
        },
        {
            "funcName": "sub_4059b0",
            "funcStartAddr": "0x4059b0",
            "funcEndAddr": "0x405a08",
            "decompiledFuncCode": "int sub_4059b0()\n{\n    unsigned long long v1;  // rbp\n    char *v2;  // rdi\n    char *v3;  // rbx\n    char v4;  // bpl\n    unsigned long long v5;  // rax\n    unsigned long long v6;  // rcx\n    unsigned long long v7;  // rax\n    unsigned long long v8;  // rdx\n\n    v1 = 0;\n    v3 = v2;\n    v4 = *(v2) == 47;\n    v5 = sub_405a70();\n    v6 = v5 + -0x1 * v3;\n    if (v5 + -0x1 * v3 > rbp<8>)\n    {\n        if (*((char *)(v5 - 1)) == 47)\n        {\n            for (v8 = v6 - 1; rbp<8> != v8; v8 = v7)\n            {\n                v7 = v8 - 1;\n                if (v3[v8 + -1] != 47)\n                {\n                    break;\n                }\n            }\n            return v8;\n        }\n    }\n    if (v5 + -0x1 * v3 <= rbp<8> || *((char *)(v5 - 1)) != 47)\n    {\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_405fc0",
            "funcStartAddr": "0x405fc0",
            "funcEndAddr": "0x405fc5",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[24];\n    unsigned long long field_18;\n} struct_0;\n\nint sub_405fc0()\n{\n    struct_0 *v1;  // rdi\n\n    return v1->field_18;\n}\n"
        },
        {
            "funcName": "sub_408190",
            "funcStartAddr": "0x408190",
            "funcEndAddr": "0x4081b3",
            "decompiledFuncCode": "int sub_408190()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n    char *v3;  // rdi\n\n    v0 = v2;\n    strlen(v3);\n}\n"
        },
        {
            "funcName": "sub_402af3",
            "funcStartAddr": "0x402af3",
            "funcEndAddr": "0x402af8",
            "decompiledFuncCode": "int sub_402af3()\n{\n}\n"
        },
        {
            "funcName": "sub_4097f0",
            "funcStartAddr": "0x4097f0",
            "funcEndAddr": "0x40981b",
            "decompiledFuncCode": "extern char g_617820;\n\nint sub_4097f0()\n{\n    void tmp_2;  // tmp #2\n    void tmp_11;  // tmp #11\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long long v3[7];  // rdi\n    unsigned long v4;  // rsi\n    unsigned long v5;  // rdx\n\n    tmp_2 = v2;\n    tmp_11 = v2 == 0;\n    v3 = (v2 == 0? &g_617820 : v2);\n    *((int *)(tmp_11? &g_617820 : tmp_2)) = 10;\n    if (v4 != 0 && v5 != 0)\n    {\n        v3[5] = v4;\n        v3[6] = v5;\n        return &g_617820;\n    }\n    if (v5 == 0 || v4 == 0)\n    {\n        v0 = &g_617820;\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_40a820",
            "funcStartAddr": "0x40a820",
            "funcEndAddr": "0x40a8a1",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[4273376];\n    unsigned long long field_4134e0;\n} struct_0;\n\nextern int512_t g_4134e0;\nextern unsigned int g_617568;\n\nint sub_40a820()\n{\n    char v0;  // [bp-0x2a]\n    char v1;  // [bp-0x29]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long v3;  // [bp-0x10]\n    unsigned long v4;  // [bp-0x8]\n    unsigned long v6;  // r13\n    unsigned int v7;  // edi\n    struct_0 *v8;  // rdi\n    unsigned long v9;  // r12\n    unsigned long v10;  // rbx\n    unsigned long long v11;  // rsi\n    unsigned long v13;  // rsi\n    char v14;  // dl\n\n    v4 = v6;\n    v8 = (unsigned long long)v7 - 1;\n    v3 = v9;\n    v2 = v10;\n    if ((unsigned int)v8 > 3)\n    {\n        abort(); /* do not return */\n    }\n    v13 = *((long long *)(0x8 * v8 + (char *)&g_4134e0));\n    if ((unsigned int)v11 < 0)\n    {\n        v0 = v14;\n        v1 = 0;\n    }\n    error(g_617568, 0x0, (unsigned long long)dcgettext(0x0, v13, 0x5));\n}\n"
        },
        {
            "funcName": "sub_403ac0",
            "funcStartAddr": "0x403ac0",
            "funcEndAddr": "0x403ac5",
            "decompiledFuncCode": "int sub_403ac0()\n{\n}\n"
        },
        {
            "funcName": "sub_40c400",
            "funcStartAddr": "0x40c400",
            "funcEndAddr": "0x40c46f",
            "decompiledFuncCode": "extern unsigned long long g_413a14;\n\nint sub_40c400()\n{\n    char v0;  // [bp-0x1c]\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rbx\n    unsigned long v4;  // rdx\n    char *|unsigned long long v5;  // rbp\n    unsigned long long v6;  // rdi\n    unsigned int *v7;  // r12\n    unsigned long long v9;  // rax\n\n    if (v2 != 0)\n    {\n        v3 = -2;\n        if (v4 != 0)\n        {\n            v7 = v6;\n            v5 = v2;\n        }\n    }\n    else\n    {\n        v5 = &g_413a14;\n    }\n    if (v2 == 0 || v6 == 0 && v4 != 0)\n    {\n        v7 = &v0;\n    }\n    if (v2 == 0 || v4 != 0)\n    {\n        v3 = mbrtowc((unsigned int)v7, (unsigned int)v5);\n        if (v3 > -3 && sub_40dbe0() == 0)\n        {\n            v3 = 1;\n            *(v7) = *(v5);\n        }\n    }\n    v9 = v3;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_409a60",
            "funcStartAddr": "0x409a60",
            "funcEndAddr": "0x409a6a",
            "decompiledFuncCode": "int sub_409a60()\n{\n}\n"
        },
        {
            "funcName": "sub_40bd30",
            "funcStartAddr": "0x40bd30",
            "funcEndAddr": "0x40c297",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    unsigned int field_4;\n    char padding_8[24];\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned int field_30;\n} struct_0;\n\ntypedef struct struct_1 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    unsigned int field_18;\n    char padding_1c[4];\n    unsigned long long field_20;\n    unsigned int field_28;\n    unsigned int field_2c;\n    unsigned int field_30;\n} struct_1;\n\nextern unsigned int g_4139c8;\nextern unsigned int g_4139f9;\nextern unsigned long long stderr;\n\nint sub_40bd30()\n{\n    struct_0 *|struct_1 * v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x60]\n    unsigned long v4;  // [bp-0x58]\n    unsigned int|char v5;  // [bp-0x4c]\n    char v6[2];  // [bp-0x48]\n    unsigned long long v7;  // [bp-0x40]\n    struct_0 *v8;  // [bp+0x8]\n    unsigned int v9;  // [bp+0x10]\n    unsigned long v10;  // rcx\n    unsigned long v11;  // r8\n    unsigned int v12;  // r13d\n    unsigned int v13;  // edi\n    unsigned long v14;  // rsi\n    unsigned long v15;  // r12\n    char v16[2];  // rdx\n    unsigned int|unsigned long v17;  // eax\n    unsigned long long v18;  // rax\n    char *|unsigned long long v19;  // rdx\n    unsigned long long v20;  // rax\n    unsigned int v22;  // r9d\n    unsigned long long v23;  // rax\n    unsigned long|unsigned long long * v25;  // rax\n    unsigned int|unsigned long v26;  // rdx\n    unsigned long v28;  // rax\n    char v29[2];  // rcx\n    unsigned long v30;  // rsi\n    unsigned long long v31;  // rcx\n    char *v32;  // rdi\n    char v33[2];  // rsi\n    unsigned long long v34;  // cc_dep1\n    unsigned long long v35;  // cc_dep2\n    unsigned long v36;  // d\n    unsigned long long v37;  // cc_dep1\n    unsigned int v38;  // ecx\n    unsigned int v39;  // eax\n    unsigned long long v40;  // rcx\n    unsigned int|unsigned long long v41;  // edx\n    unsigned int v43;  // eax\n    unsigned long long v44;  // r14\n    unsigned long long *v45;  // rbp\n    unsigned long long v46;  // rax\n    char v47[3];  // r14\n    unsigned int|unsigned long v48;  // r9\n    unsigned long v49;  // r13\n    char [2]|char * v50;  // r15\n    char v51[3];  // rax\n    unsigned int v52;  // ecx\n    char v53[3];  // r8\n    unsigned long long v54;  // rcx\n    unsigned long long v55;  // rcx\n    unsigned long long v57;  // rdx\n    unsigned int v58;  // eax\n    char *v60;  // rax\n    unsigned long long v62;  // r14\n    char v63;  // r14b\n    unsigned long long v64;  // r14\n    char v65;  // r14b\n    unsigned long long v66;  // rax\n\n    v3 = v10;\n    v4 = v11;\n    v12 = v8->field_4;\n    if (v13 > 0)\n    {\n        v17 = v0->field_0;\n        v45 = v13;\n        v15 = v14;\n        v50 = v16;\n        v0->field_10 = 0;\n        if (!((unsigned int)v17 != 0))\n        {\n            v0->field_0 = 1;\n            v17 = 1;\n        }\n        else if (v0->field_18 != 0)\n        {\n            v18 = v16[0];\n            v19 = v0->field_20;\n            if (((char)(v18 - 43) & 253) == 0)\n            {\n                v20 = v50[1];\n                v50 = &v50[1];\n                v49 = (unsigned int)(v20 == 58? 0 : (unsigned int)r13<8>);\n            }\n        }\n        if (v0->field_18 == 0 || (unsigned int)v17 == 0)\n        {\n            *((unsigned long *)&v0->field_30) = v17;\n            *((unsigned long *)&v0->field_2c) = v17;\n            v0->field_20 = 0;\n            if (!(v16[0] != 45))\n            {\n                v0->field_28 = 2;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            else if (v16[0] != 43)\n            {\n                v19 = 0;\n                if (v9 == 0)\n                {\n                    v5 = v22;\n                    v23 = getenv(\"POSIXLY_CORRECT\");\n                    v48 = v5;\n                    if (v23 != 0)\n                    {\n                        v19 = v0->field_20;\n                    }\n                    else\n                    {\n                        v0->field_28 = 1;\n                        v19 = v0->field_20;\n                    }\n                }\n                if (v23 != 0 || v9 != 0)\n                {\n                    v0->field_28 = 0;\n                }\n            }\n            else\n            {\n                v0->field_28 = 0;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            v0->field_18 = 1;\n            v18 = v50[0];\n        }\n        if (v0->field_18 == 0 || (unsigned int)v17 == 0 || ((char)(v18 - 43) & 253) != 0)\n        {\n            v49 = (unsigned int)(v18 == 58? 0 : (unsigned int)r13<8>);\n        }\n        if (*(v19) == 0 || v0->field_18 == 0 && v19 == 0 || v19 == 0 && (unsigned int)v17 == 0 || v19 == 0 && ((char)(v18 - 43) & 253) != 0 || v8->field_20 == 0 && ((char)(v18 - 43) & 253) == 0 && v0->field_18 != 0 && (unsigned int)v17 != 0)\n        {\n            v25 = v0->field_0;\n            if (v0->field_30 > v0->field_0)\n            {\n                v0->field_30 = v8->field_0;\n            }\n            if (v8->field_0 < v0->field_2c)\n            {\n                v0->field_2c = v8->field_0;\n            }\n            if (v0->field_28 == 1)\n            {\n                v26 = v0->field_30;\n                if (v0->field_2c != v0->field_30)\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v5 = v48;\n                        sub_40b630();\n                        v26 = v0->field_0;\n                        v48 = v5;\n                    }\n                }\n                else\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v0->field_2c = v8->field_0;\n                        v26 = v25;\n                    }\n                }\n                if (v13 > (unsigned int)v26)\n                {\n                    v28 = v26;\n                    while (true)\n                    {\n                        v29 = *((long long *)(v15 + v28 * 8));\n                        v30 = v28;\n                        v26 = v28;\n                        if (*((char *)*((long long *)(v15 + (v28 << 3)))) == 45 && v29[1] != 0)\n                        {\n                            v25 = (unsigned long long)v0->field_0;\n                        }\n                        if (v29[1] == 0 || *((char *)*((long long *)(v15 + (v28 << 3)))) != 45)\n                        {\n                            v26 = v30 + 1;\n                            v28 += 1;\n                            v0->field_0 = (unsigned int)v30 + 1;\n                            if (v13 <= (unsigned int)v28)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    if (v29[1] == 0 || *((char *)*((long long *)(v15 + (v28 << 3)))) != 45)\n                    {\n                        v25 = v26;\n                    }\n                    else if (*((char *)*((long long *)(v15 + (v28 << 3)))) == 45 && v29[1] != 0)\n                    {\n                        *((unsigned long *)&v0->field_30) = v26;\n                    }\n                }\n                v25 = v26;\n                *((unsigned long *)&v0->field_30) = v26;\n            }\n            if (v13 != (unsigned int)v25)\n            {\n                v31 = 3;\n                v32 = \"-\";\n                v47 = *((long long *)(v15 + v25 * 8));\n                v33 = *((long long *)(v15 + v25 * 8));\n                while (v31 != 0)\n                {\n                    v31 -= 1;\n                    v34 = v33[0];\n                    v35 = *(v32);\n                    v32 = &v32[v36];\n                    v33 = &v33[v36];\n                    break;\n                }\n                v37 = (v34 > v35) - 0 - (v34 < v35);\n                if ((char)v37 == 0)\n                {\n                    v41 = v0->field_2c;\n                    v38 = v0->field_30;\n                    v39 = (unsigned int)v25 + 1;\n                    v0->field_0 = v0->field_2c;\n                    if ((unsigned int)v41 != v38)\n                    {\n                        if (v0->field_2c != v8->field_30)\n                        {\n                            sub_40b630();\n                            v41 = v0->field_2c;\n                        }\n                    }\n                    else\n                    {\n                        v0->field_2c = v0->field_2c;\n                        v41 = v39;\n                    }\n                    *((unsigned long long **)&v0->field_30) = v45;\n                    *((unsigned long long **)&v0->field_0) = v45;\n                }\n                else if (v47[0] == 45)\n                {\n                    v40 = v47[1];\n                    if (v47[1] != 0 && v3 != 0)\n                    {\n                        if (!(v40 != 45))\n                        {\n                            v0->field_20 = &v47[2];\n                            v2 = \"-\";\n                            v1 = v49;\n                            v0 = v0;\n                        }\n                        else if (v48 != 0)\n                        {\n                            if (v47[2] == 0)\n                            {\n                                *((unsigned long *)&v5) = v48;\n                                v46 = strchr(v50, v40);\n                            }\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v45 = (unsigned long long)v0->field_30;\n                v41 = v0->field_2c;\n            }\n        }\n    }\n    if ((v13 != (unsigned int)v25 && v13 > 0 && (*(v19) == 0 || v19 == 0 || ((char)(v18 - 43) & 253) == 0) && (*(v19) == 0 || v19 == 0 || v0->field_18 != 0) && (*(v19) == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v0->field_18 == 0 || v8->field_20 == 0 || *(v19) == 0 || (unsigned int)v17 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v37 == 0 || v13 == (unsigned int)v25 && v13 > 0 && (*(v19) == 0 || v19 == 0 || ((char)(v18 - 43) & 253) == 0) && (*(v19) == 0 || v19 == 0 || v0->field_18 != 0) && (*(v19) == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v0->field_18 == 0 || v8->field_20 == 0 || *(v19) == 0 || (unsigned int)v17 == 0 || ((char)(v18 - 43) & 253) != 0)) && v41 != v45)\n    {\n        *((unsigned long long *)&v0->field_0) = v41;\n    }\n    if ((v13 != (unsigned int)v25 && v13 > 0 && (*(v19) == 0 || v19 == 0 || ((char)(v18 - 43) & 253) == 0) && (*(v19) == 0 || v19 == 0 || v0->field_18 != 0) && (*(v19) == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v0->field_18 == 0 || v8->field_20 == 0 || *(v19) == 0 || (unsigned int)v17 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v37 != 0 && v47[0] == 45 && v47[1] == 0 || v13 != (unsigned int)v25 && v13 > 0 && (*(v19) == 0 || v19 == 0 || ((char)(v18 - 43) & 253) == 0) && (*(v19) == 0 || v19 == 0 || v0->field_18 != 0) && (*(v19) == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v0->field_18 == 0 || v8->field_20 == 0 || *(v19) == 0 || (unsigned int)v17 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v37 != 0 && v47[0] != 45) && v0->field_28 != 0)\n    {\n        v43 = (unsigned int)v25 + 1;\n        v0->field_10 = v47;\n        v44 = 1;\n        v0->field_0 = v43;\n    }\n    if (...)\n    {\n        v44 = -18446744069414584321;\n    }\n    if (...)\n    {\n        v0->field_20 = &v47[1];\n        v2 = \"-\";\n        v1 = v49;\n        v0 = v8;\n        v44 = (unsigned int)sub_40b710();\n        if ((unsigned int)v44 == -1)\n        {\n            v47 = *((long long *)(v15 + (int)v0->field_0 * 8));\n        }\n    }\n    if (...)\n    {\n        v19 = &v47[1];\n    }\n    if (...)\n    {\n        *((char **)&v6[0]) = v19;\n        v0->field_20 = &v19[1];\n        v44 = *(v19);\n        v7 = &v19[1];\n        v5 = *(v19);\n        v51 = strchr(v50, *(v19));\n        v52 = v5;\n        v53 = v7;\n        if (v6[1] == 0)\n        {\n            v0->field_0 = v0->field_0 + 1;\n        }\n        v54 = (unsigned long long)v52 - 58;\n        if (v54 > 1 && v51 != 0)\n        {\n            v55 = v51[1];\n            if (v51[0] == 87 && v3 != 0 && v55 == 59 && v6[1] == 0)\n            {\n                if (v0->field_0 != v45)\n                {\n                    v53 = *((long long *)(v15 + (int)v8->field_0 * 8));\n                }\n                else\n                {\n                    if ((unsigned int)v49 != 0)\n                    {\n                        __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x4139c8, 0x5), *((long long *)v15), v44, v48);\n                    }\n                    v0->field_8 = v44;\n                    v62 = 0;\n                    v63 = *(v50) != 58;\n                    v44 = r14<8> * 5 + 58;\n                }\n            }\n        }\n    }\n    if (...)\n    {\n        if ((unsigned int)v49 != 0)\n        {\n            __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x4139f9, 0x5), *((long long *)v15), v44, v48);\n        }\n        v0->field_8 = v44;\n        v44 = 63;\n    }\n    if (...)\n    {\n        v57 = v6[1];\n        if (v51[2] != 58)\n        {\n            if (!(v57 == 0))\n            {\n                v58 = v8->field_0 + 1;\n                v0->field_10 = v7;\n                v0->field_0 = v58;\n            }\n            else if (v45 != v8->field_0)\n            {\n                v60 = *((long long *)(v15 + (int)v8->field_0 * 8));\n                v0->field_0 = (int)v8->field_0 + 1;\n                v0->field_10 = v60;\n            }\n            else\n            {\n                if ((unsigned int)v49 != 0)\n                {\n                    __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x4139c8, 0x5), *((long long *)v15), v44, v48);\n                }\n                v0->field_8 = v44;\n                v64 = 0;\n                v65 = *(v50) != 58;\n                v44 = r14<8> * 5 + 58;\n            }\n        }\n        else\n        {\n            if (v57 != 0)\n            {\n                v0->field_10 = v7;\n                v0->field_0 = v0->field_0 + 1;\n            }\n            else\n            {\n                v0->field_10 = 0;\n            }\n        }\n        v0->field_20 = 0;\n    }\n    if (...)\n    {\n        v0->field_20 = v53;\n        v0->field_10 = 0;\n        v2 = \"-W \";\n        v1 = v49;\n        v0 = v0;\n    }\n    if (...)\n    {\n        v44 = (unsigned int)sub_40b710();\n    }\n    v66 = v44;\n    return v66;\n}\n"
        },
        {
            "funcName": "sub_40d7a0",
            "funcStartAddr": "0x40d7a0",
            "funcEndAddr": "0x40d7aa",
            "decompiledFuncCode": "int sub_40d7a0()\n{\n}\n"
        },
        {
            "funcName": "sub_40e240",
            "funcStartAddr": "0x40e240",
            "funcEndAddr": "0x40e2b8",
            "decompiledFuncCode": "int sub_40e240()\n{\n    unsigned int v0;  // [bp+0x0]\n    void *v2;  // rdi\n    unsigned long long v4;  // rax\n    unsigned long long v8;  // rax\n\n    if (fileno(v2) >= 0)\n    {\n        v4 = __freading();\n        if ((v4 == 0 || (unsigned long long)lseek(fileno(v2), 0x0, 0x1) != -1) && sub_40e2c0() != 0)\n        {\n            v8 = fclose(v2);\n            if (v0 != 0)\n            {\n                *(__errno_location()) = v0;\n                v8 = -18446744069414584321;\n            }\n            return v8;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_40fe90",
            "funcStartAddr": "0x40fe90",
            "funcEndAddr": "0x40ffbc",
            "decompiledFuncCode": "extern unsigned int g_6178a0;\n\nint sub_40fe90()\n{\n    unsigned int v0;  // [bp-0x60]\n    unsigned long v1;  // [bp-0x58]\n    unsigned long v2;  // [bp-0x50]\n    unsigned long v3;  // [bp-0x38]\n    unsigned long v4;  // [bp-0x30]\n    unsigned int v6;  // [bp+0x100008]\n    unsigned long v7;  // rdx\n    unsigned long v8;  // rcx\n    unsigned int v9;  // rsi\n    unsigned int v10;  // edi\n    unsigned int v11;  // edi\n    unsigned int *v12;  // rax\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rax\n    unsigned long long v15;  // rbx\n    unsigned long long v17;  // rax\n\n    v3 = v7;\n    v1 = stack_base + 8;\n    v4 = v8;\n    v0 = 16;\n    v2 = stack_base + -72;\n    if (v9 == 1030)\n    {\n        v0 = 24;\n        if (g_6178a0 >= 0)\n        {\n            v15 = (unsigned int)fcntl(v11, v9);\n            if ((unsigned int)v15 < 0)\n            {\n                v12 = __errno_location();\n                if (*(v12) == 22)\n                {\n                    v15 = (unsigned int)sub_40fe90();\n                    if ((unsigned int)v15 >= 0)\n                    {\n                        g_6178a0 = -1;\n                    }\n                }\n            }\n            if ((unsigned int)v15 >= 0 || *(v12) != 22)\n            {\n                g_6178a0 = 1;\n            }\n        }\n        else\n        {\n            v15 = (unsigned int)sub_40fe90();\n        }\n        if ((g_6178a0 < 0 || (unsigned int)v15 < 0) && (g_6178a0 < 0 || *(v12) == 22) && (g_6178a0 < 0 || (unsigned int)v15 >= 0) && (g_6178a0 == -1 || g_6178a0 >= 0) && (g_6178a0 >= 0 || (unsigned int)v15 >= 0))\n        {\n            v13 = fcntl(v15, 0x1);\n            if (v13 >= 0)\n            {\n                v14 = fcntl(v15, 0x2);\n            }\n            if (v14 == -1 || v13 < 0)\n            {\n                v15 = -18446744069414584321;\n                close(v11);\n                *(__errno_location()) = v6;\n            }\n        }\n        v17 = v15;\n        return v17;\n    }\n    return fcntl(v10, v9);\n}\n"
        },
        {
            "funcName": "sub_40393b",
            "funcStartAddr": "0x40393b",
            "funcEndAddr": "0x40395a",
            "decompiledFuncCode": "extern unsigned long long g_6175f0;\n\nint sub_40393b()\n{\n    unsigned long long v1;  // rax\n\n    v1 = &g_6175f0;\n    if (false)\n    {\n        v1 = 0;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_4060a0",
            "funcStartAddr": "0x4060a0",
            "funcEndAddr": "0x4061dc",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nextern unsigned int g_41220e;\nextern unsigned int g_412226;\nextern unsigned int g_412258;\n\nint sub_4060a0()\n{\n    unsigned long v0;  // [bp-0x20]\n    void tmp_14;  // tmp #14\n    unsigned long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // r13\n    unsigned long v5;  // r12\n    unsigned long v6;  // rsi\n    unsigned int v7;  // ebp\n    unsigned long v8;  // rbx\n    unsigned long long v9[5];  // rdi\n    unsigned long long v12;  // rdi\n    unsigned long long v13[2];  // rsi\n    struct_0 *v14;  // rax\n    unsigned long long v15;  // rdx\n    unsigned long|unsigned long long v16;  // rbx\n    unsigned int v17;  // r8d\n    unsigned int v18;  // r9d\n    unsigned long v19;  // xmm1lq\n    uint128_t v20;  // xmm0\n    unsigned long v21;  // xmm0lq\n    uint128_t v22;  // xmm0\n    uint128_t v23;  // xmm0\n    unsigned long long v24;  // xmm0lq\n\n    v2 = v4;\n    v1 = v5;\n    v7 = v6;\n    v0 = v8;\n    v16 = 0;\n    v13 = *(v9);\n    v12 = v9[1];\n    if (v13 < v12)\n    {\n        while (true)\n        {\n            if (*(v13) == 0)\n            {\n                v13 = &v13[2];\n                if (v13 >= v12)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v14 = v13[1];\n                v15 = 1;\n                if (v13[1] != 0)\n                {\n                    do\n                    {\n                        v14 = v14->field_8;\n                        v15 += 1;\n                    }\n                    while (v14 != 0);\n                }\n                v16 = (v16 < v15? v15 : v16);\n                v13 = &v13[2];\n                if (v13 >= v12)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    __fprintf_chk(v7, 0x1, 0x41220e, v9[4], v17, v18);\n    __fprintf_chk(v7, 0x1, 0x412226, v19, v17, v18);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, xmm1lq<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v20 = 0;\n        v21 = v9[3];\n        v22 = xmm0<16> * 0x4059000000000000;\n    }\n    else\n    {\n        v23 = 0;\n        v24 = 0 >> 1 | (unsigned long long)(unsigned int)(0 & 1);\n        v22 = xmm0<16> * 0x80b2000000000000;\n        tmp_14 = v19;\n    }\n    __fprintf_chk(v7, 0x1, 0x412258, v21, v17, v18);\n}\n"
        },
        {
            "funcName": "sub_40c3c0",
            "funcStartAddr": "0x40c3c0",
            "funcEndAddr": "0x40c3d6",
            "decompiledFuncCode": "int sub_40c3c0()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_40c300();\n}\n"
        },
        {
            "funcName": "sub_40c380",
            "funcStartAddr": "0x40c380",
            "funcEndAddr": "0x40c393",
            "decompiledFuncCode": "int sub_40c380()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_40c300();\n}\n"
        },
        {
            "funcName": "sub_406310",
            "funcStartAddr": "0x406310",
            "funcEndAddr": "0x406370",
            "decompiledFuncCode": "int sub_406310()\n{\n    unsigned long long v1;  // rdx\n    unsigned long long v2;  // rax\n    unsigned long long v3[2];  // rdi\n    unsigned long long v4;  // r8\n    unsigned long long v5;  // rsi\n    unsigned long long v6[2];  // r8\n    unsigned long long v7;  // rcx\n    unsigned long long v8;  // r9\n    unsigned long long v9[2];  // rdx\n\n    v2 = v1;\n    v9 = *(v3);\n    if (v3[1] > *(v3))\n    {\n        v8 = 0;\n        do\n        {\n            v4 = *(v9);\n            if (*(v9) != 0)\n            {\n                if (v2 <= v8)\n                {\n                    break;\n                }\n                *((unsigned long long *)(v5 + v8 * 8)) = v4;\n                v6 = v9[1];\n                v7 = v8 + 1;\n                if (v9[1] != 0)\n                {\n                    while (true)\n                    {\n                        if (v2 != v7)\n                        {\n                            v7 += 1;\n                            *((unsigned long long [2])(v5 + v7 * 8 - 8)) = *(v6);\n                            v6 = v6[1];\n                            if (v6 == 0)\n                            {\n                                break;\n                            }\n                        }\n                        else\n                        {\n                            return v2;\n                        }\n                    }\n                }\n                v8 = v7;\n            }\n            v9 = &v9[2];\n        }\n        while (v3[1] > v9);\n        return v8;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_40db30",
            "funcStartAddr": "0x40db30",
            "funcEndAddr": "0x40db8c",
            "decompiledFuncCode": "int sub_40db30()\n{\n    unsigned long long v1;  // r12\n    unsigned long long v2;  // rax\n    unsigned int *v3;  // rdi\n\n    v1 = __fpending();\n    v2 = sub_40e240();\n    if (((char)*(v3) & 32) == 0)\n    {\n        if ((unsigned int)v2 != 0 && v1 == 0)\n        {\n            v2 = 0 - (unsigned int)(char)(*(__errno_location()) != 9);\n        }\n    }\n    else\n    {\n        if ((unsigned int)v2 == 0)\n        {\n            *(__errno_location()) = 0;\n            v2 = -18446744069414584321;\n        }\n    }\n    if ((unsigned int)v2 != 0 && (v1 != 0 || ((char)*(v3) & 32) != 0))\n    {\n        v2 = -18446744069414584321;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_409770",
            "funcStartAddr": "0x409770",
            "funcEndAddr": "0x40977f",
            "decompiledFuncCode": "extern int512_t g_617820;\n\nint sub_409770()\n{\n    unsigned long v1;  // rdi\n\n    return *((int *)(v1 == 0? &g_617820 : v1));\n}\n"
        },
        {
            "funcName": "sub_4097d0",
            "funcStartAddr": "0x4097d0",
            "funcEndAddr": "0x4097e3",
            "decompiledFuncCode": "extern int512_t g_617820;\n\nint sub_4097d0()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned int v3;  // esi\n\n    v2 = (unsigned int)*((int *)((v1 == 0? &g_617820 : v1) + 4));\n    *((unsigned int *)((v1 == 0? &g_617820 : v1) + 4)) = v3;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_404d60",
            "funcStartAddr": "0x404d60",
            "funcEndAddr": "0x404ead",
            "decompiledFuncCode": "extern int512_t g_617328;\nextern char g_61734c[4];\n\nint sub_404d60()\n{\n    unsigned long v0;  // [bp-0x30]\n    unsigned long v1;  // [bp-0x20]\n    unsigned long v2;  // [bp-0x18]\n    unsigned long v3;  // [bp-0x10]\n    unsigned long v4;  // [bp-0x8]\n    unsigned long v6;  // r15\n    unsigned long v7;  // r14\n    unsigned long v8;  // r13\n    unsigned long v9;  // r12\n    unsigned long v10;  // rbx\n    unsigned long long v11;  // r13\n    char *v12;  // rax\n    unsigned long long v13;  // rbx\n    unsigned long long v14;  // r12\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // rcx\n    unsigned long long v20;  // rbp\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // rbx\n    unsigned int v23;  // esi\n\n    v4 = v6;\n    v3 = v7;\n    v2 = v8;\n    v1 = v9;\n    v0 = v10;\n    v20 = (unsigned int)sub_40a790();\n    while (true)\n    {\n        v11 = 0;\n        v12 = strchr(v20, 0x2c);\n        if (v12 != 0)\n        {\n            *(v12) = 0;\n            v11 = &v12[1];\n        }\n        v13 = 0;\n        while (true)\n        {\n            v14 = v13;\n            v15 = strcmp((&g_617328)[6 * v13], v20);\n            if (v15 != 0)\n            {\n                v13 += 1;\n                v21 = (unsigned int)sub_409de0();\n            }\n            else if (g_61734c[32 * v13 + 16 * v13] == 0)\n            {\n                v16 = v14;\n                if (((unsigned short)(1 << ((char)v14 & 63)) & 4075) != 0)\n                {\n                    sub_403e20();\n                }\n                else if (((char)(1 << ((char)v16 & 63)) & 16) != 0)\n                {\n                    sub_403e20();\n                }\n                else if (((char)(1 << ((char)v16 & 63)) & 4) != 0)\n                {\n                    sub_403e20();\n                }\n                else\n                {\n                    __assert_fail(); /* do not return */\n                }\n                if (((char)(1 << ((char)v16 & 63)) & 16) != 0 || ((unsigned short)(1 << ((char)v14 & 63)) & 4075) != 0 || ((char)(1 << ((char)v16 & 63)) & 4) != 0)\n                {\n                    v20 = v11;\n                    if (v11 != 0)\n                    {\n                        break;\n                    }\n                }\n            }\n            else\n            {\n                v22 = (unsigned int)sub_409de0();\n            }\n            if (v15 != 0 || g_61734c[32 * v13 + 16 * v13] != 0)\n            {\n                error(0x0, 0x0, (unsigned long long)dcgettext(0x0, v23, 0x5));\n                sub_404930(); /* do not return */\n            }\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_40a7b0",
            "funcStartAddr": "0x40a7b0",
            "funcEndAddr": "0x40a7dc",
            "decompiledFuncCode": "extern unsigned int g_41344f;\nextern unsigned int g_617568;\n\nint sub_40a7b0()\n{\n    dcgettext(0x0, 0x41344f, 0x5);\n    error(g_617568, 0x0, \"%s\");\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Angr",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_df.elf"
}