{
    "funcInfo": [
        {
            "funcName": "sub_40a770",
            "funcStartAddr": "0x40a770",
            "funcEndAddr": "0x40a7dc",
            "decompiledFuncCode": "extern unsigned int g_416a65;\nextern unsigned int g_416a80;\n\nint sub_40a770()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x8]\n    unsigned long v3;  // r12\n    unsigned long v4;  // rbx\n\n    v1 = v3;\n    v0 = v4;\n    if (false)\n    {\n        dcgettext(0x0, 0x416a65, 0x5);\n    }\n    dcgettext(0x0, 0x416a80, 0x5);\n    sub_40f860();\n    sub_40f550();\n}\n"
        },
        {
            "funcName": "sub_410410",
            "funcStartAddr": "0x410410",
            "funcEndAddr": "0x410439",
            "decompiledFuncCode": "int sub_410410()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    _obstack_free();\n    _obstack_free();\n}\n"
        },
        {
            "funcName": "sub_40f6d0",
            "funcStartAddr": "0x40f6d0",
            "funcEndAddr": "0x40f6e1",
            "decompiledFuncCode": "int sub_40f6d0()\n{\n}\n"
        },
        {
            "funcName": "sub_40c600",
            "funcStartAddr": "0x40c600",
            "funcEndAddr": "0x40c780",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned int field_8;\n    char padding_c[4];\n    char field_10;\n} struct_0;\n\nextern int512_t g_40be10;\nextern int512_t g_40be20;\nextern int512_t g_416ba0;\n\nint sub_40c600()\n{\n    unsigned long long v1;  // rbx\n    struct_0 *v2;  // rsi\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rax\n    void|uint128_t v5;  // xmm1\n    uint128_t v6;  // xmm0\n    unsigned int v8;  // ymm1\n    uint128_t v9;  // xmm0\n    unsigned long v10;  // rdi\n    unsigned int v11;  // ymm0\n    void v12;  // xmm0\n    unsigned long v13;  // rbp\n    unsigned long long v14;  // rax\n    unsigned long v16;  // rdx\n    unsigned long v17;  // rcx\n    unsigned long v18;  // r8\n    unsigned long long v19;  // rdi\n    unsigned long long v20;  // rax\n\n    v1 = malloc(0x50);\n    if (v1 != 0)\n    {\n        if (v2 != 0)\n        {\n            *((struct_0 **)(v1 + 40)) = v2;\n            v4 = sub_40bf80();\n            if (v4 != 0 && v2->field_10 == 0)\n            {\n                v5 = 0;\n                v8 = v2->field_8;\n            }\n        }\n        else\n        {\n            *((long long **)(v1 + 40)) = &g_416ba0;\n            v3 = sub_40bf80();\n            v5 = 0;\n            v8 = 6881500231684115661;\n        }\n        if ((v2 == 0 || v2->field_10 == 0) && (v2 == 0 || v4 != 0) && (v2 != 0 || v3 != 0))\n        {\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n            {\n                v6 = 0;\n                v6 = (unsigned int)v10;\n            }\n            else\n            {\n                v9 = 0;\n                v11 = v10 % 2 | (unsigned long long)((unsigned int)v10 & 1);\n                v6 = xmm0<16> * 2;\n            }\n            v12 = v6 / v5;\n        }\n        if ((v2 == 0 || v4 != 0) && (((char)(BinaryOp CmpF & 69) & 1) == 0 || v2 != 0) && (((char)(BinaryOp CmpF & 69) & 1) == 0 || v2->field_10 != 0) && (v2 != 0 || ((char)(BinaryOp CmpF & 69) & 1) != 0) && (v2 != 0 || v3 != 0) && (((char)(BinaryOp CmpF & 69) & 1) != 0 || v2->field_10 != 0))\n        {\n            v13 = (unsigned int)sub_40bd70();\n            if (((char)(v13 >> 60) & 1) == 0 && [D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>) == 0)\n            {\n                *((unsigned long *)(v1 + 16)) = v13;\n                if (v13 != 0)\n                {\n                    v14 = calloc(v13, 0x10);\n                    *((unsigned long long *)v1) = v14;\n                    if (v14 != 0)\n                    {\n                        *((long long *)(v1 + 24)) = 0;\n                        *((long long *)(v1 + 32)) = 0;\n                        *((unsigned long long *)(v1 + 8)) = v13 * 16 + v14;\n                        *((int *)(v1 + 48)) = (v16 == 0? &g_40be10 : v16);\n                        *((int *)(v1 + 56)) = (v17 == 0? &g_40be20 : v17);\n                        *((unsigned long *)(v1 + 64)) = v18;\n                        *((long long *)(v1 + 72)) = 0;\n                    }\n                }\n            }\n        }\n        if (...)\n        {\n            v19 = v1;\n            v1 = 0;\n            free(v19);\n        }\n    }\n    v20 = v1;\n    return v20;\n}\n"
        },
        {
            "funcName": "sub_412f30",
            "funcStartAddr": "0x412f30",
            "funcEndAddr": "0x412f43",
            "decompiledFuncCode": "int sub_412f30()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_412eb0();\n}\n"
        },
        {
            "funcName": "sub_40585b",
            "funcStartAddr": "0x40585b",
            "funcEndAddr": "0x40587a",
            "decompiledFuncCode": "extern unsigned long long g_61c588;\n\nint sub_40585b()\n{\n    unsigned long long v1;  // rax\n\n    v1 = &g_61c588;\n    if (false)\n    {\n        v1 = 0;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_411230",
            "funcStartAddr": "0x411230",
            "funcEndAddr": "0x411251",
            "decompiledFuncCode": "int sub_411230()\n{\n    void tmp_10;  // tmp #10\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rdi\n\n    tmp_10 = v2;\n    v4 = v2 * v3;\n    v5 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_411460(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_413230",
            "funcStartAddr": "0x413230",
            "funcEndAddr": "0x413245",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[80];\n    char field_50;\n} struct_0;\n\nint sub_413230()\n{\n    struct_0 *v1;  // rdi\n\n    if ((v1->field_50 & 1) != 0)\n    {\n        /* goto *((long long *)&v1->padding_0[56]); */\n    }\n    else\n    {\n        /* goto *((long long *)&v1->padding_0[56]); */\n    }\n}\n"
        },
        {
            "funcName": "sub_413520",
            "funcStartAddr": "0x413520",
            "funcEndAddr": "0x41357c",
            "decompiledFuncCode": "int sub_413520()\n{\n    unsigned long long v1;  // r12\n    unsigned long long v2;  // rax\n    unsigned int *v3;  // rdi\n\n    v1 = __fpending();\n    v2 = sub_411f80();\n    if (((char)*(v3) & 32) == 0)\n    {\n        if ((unsigned int)v2 != 0 && v1 == 0)\n        {\n            v2 = 0 - (unsigned int)(char)(*(__errno_location()) != 9);\n        }\n    }\n    else\n    {\n        if ((unsigned int)v2 == 0)\n        {\n            *(__errno_location()) = 0;\n            v2 = -18446744069414584321;\n        }\n    }\n    if ((unsigned int)v2 != 0 && (v1 != 0 || ((char)*(v3) & 32) != 0))\n    {\n        v2 = -18446744069414584321;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4113c0",
            "funcStartAddr": "0x4113c0",
            "funcEndAddr": "0x4113d7",
            "decompiledFuncCode": "int sub_4113c0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_411210();\n}\n"
        },
        {
            "funcName": "sub_40f64f",
            "funcStartAddr": "0x40f64f",
            "funcEndAddr": "0x40f6c0",
            "decompiledFuncCode": "extern uint128_t g_61cce0;\nextern uint128_t g_61ccf0;\nextern uint128_t g_61cd00;\nextern unsigned long long g_61cd10;\n\nint sub_40f64f()\n{\n    void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v5;  // rdx\n\n    v3 = g_61cd10;\n    *((uint128_t *)&v0) = g_61cce0;\n    *((uint128_t *)&v1) = g_61ccf0;\n    *((uint128_t *)&v2) = g_61cd00;\n    *((unsigned int *)&((char *)stack_base)[4 * v5 % 32 + -64]) = (unsigned int)((unsigned long long)(!((unsigned int)((unsigned long long)(unsigned int)*((int *)&((char *)stack_base)[4 * v5 % 32 + -64]) >> ((char)((unsigned int)v5 & 31) & 31))) & 1) << ((char)((unsigned int)v5 & 31) & 31)) ^ *((int *)&((char *)stack_base)[4 * v5 % 32 + -64]);\n    return sub_40f030();\n}\n"
        },
        {
            "funcName": "sub_413cc0",
            "funcStartAddr": "0x413cc0",
            "funcEndAddr": "0x413d61",
            "decompiledFuncCode": "int sub_413cc0()\n{\n    unsigned long long v1;  // rsi\n    unsigned long long v2;  // r14\n    unsigned long long v3;  // rcx\n    char *v4;  // rdi\n    char *v5;  // rdx\n    unsigned long long v7;  // rax\n    unsigned long long v8;  // rbx\n    char *v9;  // r12\n    unsigned long long v10;  // rax\n    char *v11;  // rbp\n    unsigned long long v12;  // r13\n    unsigned int v13;  // eax\n    char v14;  // al\n\n    v2 = v1;\n    v12 = v3;\n    v9 = v4;\n    v11 = v5;\n    while (true)\n    {\n        *(__errno_location()) = 0;\n        v7 = strcoll((unsigned int)v9, (unsigned int)v11);\n        if ((unsigned int)v7 == 0)\n        {\n            v8 = strlen(v9) + 1;\n            v9 = &v9[v8];\n            v10 = strlen(v11) + 1;\n            v11 = &v11[v10];\n            v12 -= v10;\n            v2 -= v8;\n            if (v2 != v8)\n            {\n                return 1;\n            }\n            v13 = 0;\n            v14 = v12 != 0;\n            return 0 - rax<4>;\n        }\n        return v7;\n    }\n}\n"
        },
        {
            "funcName": "sub_4082a0",
            "funcStartAddr": "0x4082a0",
            "funcEndAddr": "0x408366",
            "decompiledFuncCode": "extern unsigned long long g_61c750;\nextern char g_61c759;\nextern char g_61c75a;\nextern char g_61c75b;\nextern char g_61cba1;\n\nint sub_4082a0()\n{\n    unsigned long long v1[2];  // rsi\n    unsigned long long v2[2];  // rbp\n    unsigned long long v3;  // rdi\n    unsigned long long v4[2];  // rbx\n    unsigned long long v7;  // r13\n    unsigned long long v8;  // r15\n    unsigned int v9;  // eax\n    char v10;  // al\n    unsigned long|unsigned int|char v11;  // rax\n\n    v2 = v1;\n    v4 = v3;\n    if (g_61c750 != 0)\n    {\n        v11 = sub_4065b0();\n    }\n    if (g_61c750 == 0 || (unsigned int)v11 == 0 && g_61c759 == 0 && g_61c75a == 0)\n    {\n        v7 = v2[1] - 1;\n        v8 = v4[1] - 1;\n        if (v4[1] == 1)\n        {\n            v9 = 0;\n            v10 = v1[1] - 1 != 0;\n            v11 = (unsigned int)(0 - rax<4>);\n        }\n        else\n        {\n            v11 = 1;\n            if (v1[1] - 1 != 0)\n            {\n                if (g_61cba1 == 0)\n                {\n                    v11 = memcmp(*(v4), *(v2), (v8 <= v7? v8 : v7));\n                    if ((unsigned int)v11 == 0)\n                    {\n                        v11 = -18446744069414584321;\n                        if (v8 >= v7)\n                        {\n                            v11 = 0;\n                            v11 = v4[1] != v2[1];\n                        }\n                    }\n                }\n                else\n                {\n                    v11 = sub_4115c0();\n                }\n            }\n        }\n        v11 = (unsigned int)(g_61c75b != 0? 0 - v11 : (unsigned int)rax<8>);\n    }\n    return v11;\n}\n"
        },
        {
            "funcName": "sub_410c70",
            "funcStartAddr": "0x410c70",
            "funcEndAddr": "0x411019",
            "decompiledFuncCode": "extern unsigned int g_4179c7;\nextern unsigned int g_4179d3;\nextern unsigned int g_4179da;\nextern unsigned int g_4179de;\nextern unsigned int g_4179ee;\nextern unsigned int g_417a05;\nextern unsigned int g_417a60;\nextern unsigned int g_417b30;\nextern unsigned int g_417b50;\nextern unsigned int g_417b78;\nextern unsigned int g_417ba0;\nextern unsigned int g_417bd0;\nextern unsigned int g_417d20;\n\nint sub_410c70()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    char v10;  // [bp-0x30]\n    unsigned long long v12[9];  // r8\n    unsigned long long v13[9];  // rbx\n    unsigned long v14;  // rsi\n    unsigned int v15;  // edi\n    unsigned int v16;  // edi\n    unsigned int v17;  // edx\n    void *v18;  // rdi\n    unsigned long v20;  // r9\n    unsigned long v21;  // rsi\n    unsigned long long v22;  // r8\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r12\n    unsigned long long v25;  // r15\n    unsigned long long v26;  // r14\n    unsigned long long v27;  // r14\n    unsigned long v28;  // rbx\n    unsigned long v29;  // rax\n    unsigned long long v30;  // r8\n    unsigned long v31;  // rax\n    unsigned long v32;  // rax\n\n    v13 = v12;\n    if (v14 != 0)\n    {\n        __fprintf_chk(v15, 0x1, 0x4179c7, v14);\n    }\n    else\n    {\n        __fprintf_chk(v16, 0x1, 0x4179d3, v17);\n    }\n    __fprintf_chk((unsigned int)v18, 0x1, 0x417d20, dcgettext(0x0, 0x4179da, 0x5));\n    fputs_unlocked((unsigned long long)dcgettext(0x0, 0x417a60, 0x5), v18);\n    switch (v20)\n    {\n    case 0:\n        abort(); /* do not return */\n    case 1:\n        dcgettext(0x0, 0x4179de, 0x5);\n        break;\n    case 2:\n        dcgettext(0x0, 0x4179ee, 0x5);\n        break;\n    case 3:\n        dcgettext(0x0, 0x417a05, 0x5);\n        break;\n    case 4:\n        v27 = v13[3];\n        v28 = *(v13);\n        v29 = dcgettext(0x0, 0x417b30, 0x5);\n    case 5:\n        v27 = v13[3];\n        v28 = *(v13);\n        v29 = dcgettext(0x0, 0x417b50, 0x5);\n        *((unsigned long long [9])&v5) = v12[4];\n    case 6:\n        *((unsigned long long [9])&v6) = v12[1];\n        v31 = dcgettext(0x0, 0x417b78, 0x5);\n        *((unsigned long long [9])&v4) = v12[5];\n        *((unsigned long long [9])&v3) = v12[4];\n        *((unsigned long long [9])&v2) = v12[3];\n    case 7:\n        *((unsigned long long [9])&v7) = v13[2];\n        *((unsigned long long [9])&v6) = v13[1];\n        v31 = dcgettext(0x0, 0x417ba0, 0x5);\n        *((unsigned long long [9])&v5) = v12[6];\n        *((unsigned long long [9])&v4) = v12[5];\n        *((unsigned long long [9])&v3) = v12[4];\n        *((unsigned long long [9])&v2) = v12[3];\n    case 8:\n        v23 = v13[6];\n        v24 = v13[5];\n        v25 = v13[4];\n        *((unsigned long long [9])&v8) = v13[7];\n        v26 = v13[3];\n        *((unsigned long long [9])&v6) = v13[2];\n        *((unsigned long long [9])&v7) = v13[1];\n        v32 = dcgettext(0x0, 0x417bd0, 0x5);\n    case 9:\n        v21 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n        v30 = v12[1];\n        v23 = v13[6];\n        v24 = v13[5];\n        *((unsigned long long [9])&v9) = v13[8];\n        v25 = v13[4];\n        v26 = v13[3];\n        *((unsigned long long [9])&v8) = v13[7];\n        *((unsigned long long [9])&v6) = v13[2];\n        v7 = v30;\n    default:\n        v21 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n        v22 = v12[1];\n        v23 = v13[6];\n        v24 = v13[5];\n        *((unsigned long long [9])&v9) = v13[8];\n        v25 = v13[4];\n        v26 = v13[3];\n        *((unsigned long long [9])&v8) = v13[7];\n        *((unsigned long long [9])&v6) = v13[2];\n        v7 = v22;\n    }\n    v32 = dcgettext(0x0, v21, 0x5);\n    v5 = v9;\n    v4 = v27;\n    __fprintf_chk((unsigned int)v18, 0x1, v29, v28);\n    return v4;\n    return __fprintf_chk((unsigned int)v18, 0x1, v29, *((long long *)&v10));\n    v4 = v8;\n    v3 = v23;\n    v2 = v24;\n    v1 = v25;\n    v0 = v26;\n    return __fprintf_chk((unsigned int)v18, 0x1, v29, *((long long *)&v10));\n}\n"
        },
        {
            "funcName": "sub_405fb0",
            "funcStartAddr": "0x405fb0",
            "funcEndAddr": "0x406099",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[12];\n    char field_c;\n} struct_0;\n\nextern unsigned int g_41648f;\nextern unsigned int g_4164a3;\nextern unsigned int g_61c69c;\n\nint sub_405fb0()\n{\n    char v0;  // [bp-0x2c]\n    unsigned int v1;  // [bp-0x20]\n    unsigned long long v3;  // rdx\n    unsigned int v4;  // edi\n    unsigned int v5;  // ebx\n    unsigned long v6;  // rdi\n    unsigned int v8;  // dl\n    unsigned long long v9;  // rax\n    unsigned long long v11;  // rbp\n    struct_0 *v12;  // rax\n    unsigned long long v13;  // rbx\n\n    v3 = 0;\n    v5 = v4;\n    v8 = (char)(v5 == 0);\n    v9 = waitpid((v4 != 0? (unsigned int)v6 : -1), (unsigned int)&v0, rdx<4>);\n    if ((unsigned int)rbp<8> >= 0)\n    {\n        rbp<8> = v9;\n        if (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, Conv(32->64, Load(addr=stack_base-32, size=4, endness=Iend_LE)), 0x0<64>, cc_ndep<8>)))\n        {\n            if (v5 <= 0)\n            {\n                v1 = rbp<8>;\n                v12 = sub_40cde0();\n                if (v12 != 0)\n                {\n                    v12->field_c = 2;\n                }\n            }\n            if (v5 > 0 || v12 != 0)\n            {\n                if (*((int *)&v0) >> 8 == 0 && ((char)*((int *)&v0) & 127) == 0)\n                {\n                    g_61c69c = g_61c69c - 1;\n                }\n                else\n                {\n                    v13 = (unsigned int)sub_40f630();\n                    error(0x2, 0x0, (unsigned long long)dcgettext(0x0, 0x4164a3, 0x5));\n                }\n            }\n        }\n        if ((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, Conv(32->64, Load(addr=stack_base-32, size=4, endness=Iend_LE)), 0x0<64>, cc_ndep<8>) || *((int *)&v0) >> 8 == 0 && ((char)*((int *)&v0) & 127) == 0 || v5 <= 0 && v12 == 0)\n        {\n            return stack_base + 0;\n        }\n    }\n    else\n    {\n        v11 = (unsigned int)sub_40f630();\n        error(0x2, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x41648f, 0x5));\n    }\n}\n"
        },
        {
            "funcName": "sub_409330",
            "funcStartAddr": "0x409330",
            "funcEndAddr": "0x409813",
            "decompiledFuncCode": "extern unsigned int g_416511;\nextern unsigned int g_61c420;\n\nint sub_409330()\n{\n    unsigned long|unsigned long long v0;  // [bp-0x198]\n    void tmp_42;  // tmp #42\n    void tmp_50;  // tmp #50\n    unsigned long|unsigned long long v1;  // [bp-0x190]\n    unsigned long v2;  // [bp-0x188]\n    char *v3;  // [bp-0x180]\n    unsigned long|unsigned long long v4;  // [bp-0x178]\n    unsigned long long v5;  // [bp-0x170]\n    unsigned long v6;  // [bp-0x158]\n    unsigned long v7;  // [bp-0x150]\n    unsigned long v8;  // [bp-0xc8]\n    unsigned long v9;  // [bp-0xc0]\n    void *v11;  // rdi\n    unsigned long long v12;  // r14\n    unsigned long long v13;  // rdx\n    unsigned long long v14;  // rsi\n    char *v15;  // rcx\n    unsigned long long v16;  // rax\n    unsigned long long v17;  // r15\n    unsigned long long v18;  // r9\n    unsigned long long v19;  // rsi\n    unsigned long long v20;  // rdx\n    unsigned long long v24;  // rax\n    unsigned long long v25;  // rcx\n    unsigned long long v26;  // rbx\n    unsigned long long v27;  // r12\n    unsigned long long v28;  // rbp\n    unsigned long long v29;  // rax\n    unsigned long long v30;  // rbp\n    unsigned long long v33;  // rbx\n    unsigned long long v34;  // rcx\n    char *v35;  // rdi\n    char *v36;  // rsi\n    unsigned long long v37;  // cc_dep1\n    unsigned long long v38;  // cc_dep2\n    unsigned long v39;  // d\n    unsigned int v40;  // r13d\n    unsigned long long v41;  // rax\n    unsigned long long v42;  // rax\n    unsigned long long v43;  // rax\n    unsigned long long v44;  // rax\n    unsigned long long v47;  // r11\n    unsigned long long v48;  // r15\n    unsigned long long v50[2];  // r14\n    unsigned long long v51;  // r13\n    unsigned long long v52;  // rbx\n    unsigned long long v53;  // rax\n    unsigned int *v54;  // rax\n    void *v55;  // r15\n    void *v56;  // rbp\n    unsigned long v59;  // r13\n\n    v12 = v11;\n    v51 = v13;\n    v27 = v14;\n    v3 = v15;\n    v25 = g_61c420;\n    if (g_61c420 < v13)\n    {\n        v0 = v13;\n        while (true)\n        {\n            v28 = 0;\n            v26 = 0;\n            if (v25 <= v0)\n            {\n                while (true)\n                {\n                    v24 = sub_409030();\n                    v25 = g_61c420;\n                    v26 += v24;\n                    v19 = v0 - v26;\n                    v27 -= (v24 <= v27? v24 : v27);\n                    tmp_42 = v28;\n                    v28 += 1;\n                    *((long long *)(v12 + tmp_42 * 16)) = r15<8> + 13;\n                    *((unsigned long long *)(v12 + tmp_42 * 16 + 8)) = (unsigned int)sub_4090c0();\n                    if (g_61c420 > v0 - v26)\n                    {\n                        break;\n                    }\n                }\n                v20 = (0 CONCAT v28) % v25 >> 64;\n                v17 = v28 * 16 + v12;\n                v18 = v26 * 16 + v12;\n                v16 = v25 - ((0 CONCAT v28) % v25 >> 64);\n            }\n            else\n            {\n                v16 = v25;\n                v17 = v12;\n                v18 = v12;\n                v19 = v0;\n                v20 = 0;\n            }\n            if (v19 > v16)\n            {\n                v4 = v18;\n                v1 = v19 + v20 + 1 - v25;\n                v2 = (unsigned int)sub_4090c0();\n                v1 = v2 + 13;\n                v29 = sub_409030();\n                v28 += 1;\n                v26 += v29;\n                *((unsigned long long *)v17) = v1;\n                *((unsigned long *)(v17 + 8)) = v2;\n                v27 -= (v29 <= v27? v29 : v27);\n                v18 = v26 * 16 + v12;\n                v17 = v28 * 16 + v12;\n            }\n            v27 += v28;\n            v30 = v28 - v26;\n            memmove(v17, v18, (v0 - v26) * 16);\n            v25 = g_61c420;\n            v0 += v30;\n            if (g_61c420 >= v0)\n            {\n                break;\n            }\n        }\n        v51 = v0;\n    }\n    if (v51 > v27)\n    {\n        v33 = v27;\n        v1 = v12;\n        v48 = 0;\n        v4 = v27;\n        v50 = v12 + v27 * 16;\n        v2 = stack_base + -344;\n        v0 = v51;\n        while (true)\n        {\n            v34 = 2;\n            v35 = \"-\";\n            v36 = *(v50);\n            while (v34 != 0)\n            {\n                v34 -= 1;\n                v37 = *(v36);\n                v38 = *(v35);\n                v35 = &v35[v39];\n                v36 = &v36[v39];\n                break;\n            }\n            v40 = (v37 > v38) - 0 - (v37 < v38);\n            if (v3 != 0)\n            {\n                v41 = strcmp(v3, *((long long *)tmp_50));\n            }\n            if (v40 == 0 || v3 == 0 || v41 != 0)\n            {\n                v42 = __fxstat(0x1, 0x1);\n            }\n            if (v42 == 0)\n            {\n                if (v40 == 0)\n                {\n                    v43 = __fxstat(0x1, 0x0);\n                }\n                else if (v3 == 0 || v41 != 0)\n                {\n                    v44 = __xstat(0x1, (unsigned int)*(v50));\n                    if (v44 != 0)\n                    {\n                        v50 = &v50[2];\n                        if (v33 + 1 == v0)\n                        {\n                            break;\n                        }\n                    }\n                }\n            }\n            if (v42 == 0 && v9 == v7 && (v40 == 0 || v44 == 0) && (v43 == 0 || v40 != 0) && (v40 == 0 || v3 == 0 || v41 != 0) && v8 == v6 || v40 != 0 && v3 != 0 && v41 == 0)\n            {\n                if (false)\n                {\n                    v47 = 13;\n                }\n                v48 = (unsigned int)sub_4090c0();\n                v5 = v48 + 13;\n                sub_409030();\n                v47 = v5;\n                v50[0] = v47;\n                v50[1] = v48;\n            }\n            if (v42 == 0 && v9 == v7 && (v40 == 0 || v44 == 0) && (v43 == 0 || v40 != 0) && (v40 == 0 || v3 == 0 || v41 != 0) && v8 == v6 || v40 != 0 && v3 != 0 && v41 == 0 || v42 == 0 && v9 == v7 && (v40 == 0 || v44 == 0) && (v43 == 0 || v40 != 0) && (v40 == 0 || v3 == 0 || v41 != 0) && v8 != v6 || v42 == 0 && (v40 == 0 || v44 == 0) && (v43 == 0 || v40 != 0) && (v40 == 0 || v3 == 0 || v41 != 0) && v9 != v7 || v42 == 0 && v40 == 0 && v43 != 0)\n            {\n                v50 = &v50[2];\n                if (v33 + 1 == v0)\n                {\n                    break;\n                }\n            }\n        }\n        v12 = v1;\n        v51 = v0;\n    }\n    else\n    {\n        v2 = stack_base + -344;\n    }\n    while (true)\n    {\n        v52 = (unsigned int)sub_408e20();\n        if (v51 == v52)\n        {\n            v53 = sub_407cd0();\n            if (v53 == 0)\n            {\n                v54 = __errno_location();\n                if (v51 <= 2 || *(v54) != 24)\n                {\n                    dcgettext(0x0, 0x416511, 0x5);\n                    sub_405dd0(); /* do not return */\n                }\n            }\n            else\n            {\n                return sub_408640();\n            }\n        }\n        else if (v52 <= 2)\n        {\n            dcgettext(0x0, 0x416511, 0x5);\n            sub_405dd0(); /* do not return */\n        }\n        if ((v53 == 0 || v51 != v52) && (v51 == v52 || v52 > 2) && (*(v54) == 24 || v51 != v52) && (v51 != v52 || v51 > 2))\n        {\n            v55 = v12 + v52 * 16 - 16;\n            while (true)\n            {\n                v52 -= 1;\n                v56 = v55;\n                sub_407df0();\n                v55 -= 16;\n                if (v1 != 0)\n                {\n                    break;\n                }\n            }\n            *((int *)&v1) = sub_4090c0();\n            v59 = v51 - v52;\n            v0 = v1 + 13;\n            sub_408640();\n            *((unsigned long *)v12) = v0;\n            v51 = v59 + 1;\n            *((unsigned long *)(v12 + 8)) = v1;\n            memmove(v12 + 16, v56, v59 * 16);\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_409030",
            "funcStartAddr": "0x409030",
            "funcEndAddr": "0x4090b8",
            "decompiledFuncCode": "extern unsigned int g_416511;\n\nint sub_409030()\n{\n    unsigned long v2;  // rdx\n    unsigned long v3;  // rax\n    unsigned long long v5;  // rax\n\n    if (v2 > v3 && v3 <= 1)\n    {\n        dcgettext(0x0, 0x416511, 0x5);\n        sub_405dd0(); /* do not return */\n    }\n    if (v2 <= v3 || v3 > 1)\n    {\n        sub_408640();\n        v3 = (unsigned int)sub_408e20();\n        return v5;\n    }\n}\n"
        },
        {
            "funcName": "sub_40a9f0",
            "funcStartAddr": "0x40a9f0",
            "funcEndAddr": "0x40aa8e",
            "decompiledFuncCode": "extern unsigned int g_416abf;\nextern unsigned int g_61c518;\nextern char g_61cbb0;\nextern unsigned long long g_61cbb8;\n\nint sub_40a9f0()\n{\n    unsigned long long v1;  // rax\n    unsigned int *v2;  // rbx\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rbp\n\n    v1 = sub_413520();\n    if (v1 != 0)\n    {\n        v2 = __errno_location();\n        if (g_61cbb0 == 0 || *(v2) != 32)\n        {\n            v4 = dcgettext(0x0, 0x416abf, 0x5);\n            if (g_61cbb8 != 0)\n            {\n                sub_40f6d0();\n                error(0x0, *(v2), \"%s: %s\");\n            }\n        }\n    }\n    if (v1 == 0 || *(v2) == 32 && g_61cbb0 != 0)\n    {\n        v3 = sub_413520();\n    }\n    if ((unsigned int)v3 == 0 && (v1 == 0 || *(v2) == 32) && (v1 == 0 || g_61cbb0 != 0))\n    {\n        return v3;\n    }\n    while (true)\n    {\n        _exit(g_61c518);\n        error(0x0, *(v2), \"%\");\n    }\n}\n"
        },
        {
            "funcName": "sub_40f510",
            "funcStartAddr": "0x40f510",
            "funcEndAddr": "0x40f526",
            "decompiledFuncCode": "int sub_40f510()\n{\n}\n"
        },
        {
            "funcName": "sub_40d2b0",
            "funcStartAddr": "0x40d2b0",
            "funcEndAddr": "0x40d326",
            "decompiledFuncCode": "int sub_40d2b0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40aae0",
            "funcStartAddr": "0x40aae0",
            "funcEndAddr": "0x40b24f",
            "decompiledFuncCode": "int sub_40aae0() { crash_skku_timeout;\n}"
        },
        {
            "funcName": "sub_40f35b",
            "funcStartAddr": "0x40f35b",
            "funcEndAddr": "0x40f421",
            "decompiledFuncCode": "int sub_40f35b()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long v1;  // [bp-0x50]\n    unsigned long v2;  // [bp-0x48]\n    unsigned int v3;  // [bp-0x2c]\n    unsigned long v4;  // [bp-0x28]\n    unsigned long v5;  // [bp-0x20]\n    unsigned long v6;  // [bp-0x18]\n    unsigned long v7;  // [bp-0x10]\n    unsigned long long v8;  // [bp+0x0]\n    unsigned long long v10;  // [bp+0x10]\n    unsigned long long v11;  // [bp+0x18]\n    unsigned long long v12;  // [bp+0x20]\n    unsigned long long v13;  // [bp+0x28]\n    unsigned long v14;  // rcx\n    unsigned long v15;  // rax\n    unsigned long long v17[7];  // rbx\n    unsigned int *v18;  // r13\n    unsigned long long *v20;  // r12\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // r12\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r14\n    unsigned long long v25;  // r15\n\n    v17 = (v14 == 0? v15 : rbx<8>);\n    v18 = __errno_location();\n    v3 = *(v18);\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = &v17[1];\n    v6 = &v17[1];\n    v7 = (unsigned int)sub_40de00();\n    v5 = v7 + 1;\n    v4 = (unsigned int)sub_411210();\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = v6;\n    sub_40de00();\n    *(v18) = v3;\n    if (v20 != 0)\n    {\n        *(v20) = v7;\n    }\n    v21 = v8;\n    v22 = v10;\n    v23 = v11;\n    v24 = v12;\n    v25 = v13;\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_411260",
            "funcStartAddr": "0x411260",
            "funcEndAddr": "0x411262",
            "decompiledFuncCode": "int sub_411260()\n{\n}\n"
        },
        {
            "funcName": "sub_40c390",
            "funcStartAddr": "0x40c390",
            "funcEndAddr": "0x40c3db",
            "decompiledFuncCode": "int sub_40c390()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rsi\n    unsigned long long *v6;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long long v8[2];  // rbx\n    unsigned long long v9;  // rsi\n\n    v2 = v1;\n    v9 = *(v6);\n    if (*(v6) != 0)\n    {\n        v6 = sub_40be30();\n        while (true)\n        {\n            if (v9 != v1)\n            {\n                v1 = v3;\n                v7 = *((long long *)(r12<8> + 56))();\n                if (v7 == 0)\n                {\n                    v8 = v8[1];\n                    if (v8 == 0)\n                    {\n                        break;\n                    }\n                    v9 = *(v8);\n                }\n            }\n            if (v9 == v1 || v7 != 0)\n            {\n                return stack_base + 0;\n            }\n        }\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_410660",
            "funcStartAddr": "0x410660",
            "funcEndAddr": "0x4106c0",
            "decompiledFuncCode": "int sub_410660()\n{\n    unsigned long long v0;  // [bp-0x20]\n    unsigned long v1;  // [bp-0x18]\n    unsigned long long v2;  // [bp-0x10]\n    unsigned long long v3;  // [bp-0x8]\n    unsigned long long v5;  // r13\n    unsigned long long v6;  // r12\n    unsigned long long v7;  // rbx\n    unsigned long v9;  // rax\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // r12\n    unsigned long long v13;  // r13\n    unsigned int *v14;  // rbp\n    unsigned long long v16;  // rbx\n    unsigned long long v17;  // r12\n    unsigned long long v18;  // r13\n\n    v3 = v5;\n    v2 = v6;\n    v1 = stack_base + 0;\n    v0 = v7;\n    if ((unsigned int)v9 > 2)\n    {\n        v9 = mkstemp();\n        v11 = v0;\n        v12 = v2;\n        v13 = v3;\n        return v10;\n    }\n    v14 = __errno_location();\n    close((unsigned int)v14);\n    *(v14) = *(v14);\n    v16 = v0;\n    v17 = v2;\n    v18 = v3;\n    return sub_413ea0();\n}\n"
        },
        {
            "funcName": "sub_408640",
            "funcStartAddr": "0x408640",
            "funcEndAddr": "0x408de0",
            "decompiledFuncCode": "typedef struct struct_2 {\n    uint128_t field_0;\n    uint128_t field_10;\n    uint128_t field_20;\n    unsigned long long field_30;\n} struct_2;\n\nextern unsigned long long g_61c750;\nextern char g_61c759;\n\nint sub_408640()\n{\n    unsigned long|unsigned long long v0;  // [bp-0xd0]\n    void tmp_2;  // tmp #2\n    void tmp_1;  // tmp #1\n    void tmp_48;  // tmp #48\n    void tmp_65;  // tmp #65\n    unsigned long long v1;  // [bp-0xc8]\n    unsigned long|unsigned long long v2;  // [bp-0xc0]\n    unsigned long long v3;  // [bp-0xb8]\n    unsigned long long v4;  // [bp-0xb0]\n    void *v5;  // [bp-0xa8]\n    unsigned long long v6;  // [bp-0xa0]\n    unsigned long long v7;  // [bp-0x98]\n    unsigned long long *v8;  // [bp-0x90]\n    unsigned long v9;  // [bp-0x88]\n    unsigned long v10;  // [bp-0x80]\n    unsigned long v11;  // [bp-0x78]\n    unsigned long v12;  // [bp-0x70]\n    unsigned long long v13;  // [bp-0x68]\n    unsigned long v14;  // [bp-0x60]\n    unsigned long long v15;  // [bp-0x58]\n    unsigned long long v16;  // [bp-0x50]\n    unsigned long v17;  // [bp-0x48]\n    unsigned long v18;  // [bp-0x40]\n    unsigned long v19;  // [bp-0x30]\n    unsigned long v20;  // [bp-0x20]\n    unsigned long v21;  // [bp-0x18]\n    unsigned long v22;  // [bp-0x10]\n    unsigned long v23;  // [bp-0x8]\n    unsigned long v25;  // r15\n    unsigned long v26;  // r14\n    unsigned long v27;  // r13\n    unsigned long v28;  // r12\n    unsigned long v29;  // rbx\n    void *v30;  // rdi\n    unsigned long long v31;  // rdx\n    unsigned long v32;  // rsi\n    unsigned long v33;  // rcx\n    unsigned long v34;  // r8\n    void *v35;  // r9\n    unsigned long long v36;  // r14\n    unsigned long long v37;  // rbx\n    unsigned long v38;  // rax\n    unsigned long long v40;  // r15\n    unsigned long long v42;  // rbx\n    unsigned long long v43;  // r14\n    unsigned long long v44;  // r12\n    unsigned long long v45;  // rbx\n    unsigned long long v46[4];  // r13\n    unsigned long long v52;  // rsi\n    unsigned long long v54;  // rdx\n    unsigned long long v55;  // rax\n    unsigned long long v56;  // r13\n    unsigned long long v57;  // rdx\n    unsigned long long v58;  // rax\n    unsigned long long v59;  // rdx\n    unsigned long long v60;  // rbp\n    unsigned long long v61;  // r13\n    unsigned long long *v62;  // r12\n    unsigned long long *v63;  // r15\n    unsigned long long v64;  // r14\n    unsigned long long v66;  // r15\n    unsigned long long *v67;  // r12\n    unsigned long long v68[4];  // r13\n    unsigned long long v70;  // rax\n    unsigned long long v72;  // rax\n    unsigned long long v73;  // rsi\n    unsigned long long v74;  // rdx\n    unsigned long long v75;  // rax\n    unsigned long long v76;  // rdi\n    unsigned long long v79;  // r13\n    unsigned long long v80[4];  // r15\n    unsigned long long v81;  // rax\n    unsigned long long *v82;  // rax\n    unsigned long long v83;  // rsi\n    unsigned long long v84;  // rcx\n    unsigned long long v85;  // r12\n    unsigned long long v86;  // rax\n    unsigned long long v87;  // r14\n    unsigned long long v88;  // r15\n    unsigned long long v90;  // rdx\n    unsigned long long v92;  // rbp\n    unsigned long long v93;  // rax\n    unsigned long long v94;  // r15\n    unsigned long long v95;  // r14\n    unsigned long long *v96;  // rsi\n    unsigned long long v97;  // r12\n    unsigned long long v99;  // rax\n    unsigned long long v100;  // rcx\n    unsigned long long v101;  // rdx\n    unsigned long long v103;  // rdi\n    unsigned long long v105;  // rax\n    struct_2 *v106;  // rdx\n    unsigned long long v107;  // rsi\n    unsigned long long v108;  // rcx\n    uint128_t v109;  // xmm0\n    uint128_t v110;  // xmm1\n    uint128_t v111;  // xmm2\n    uint128_t v112;  // xmm3\n    unsigned long long v113;  // r9\n    unsigned long long v114;  // rax\n    unsigned long long v115;  // rcx\n    unsigned long long v116;  // rdx\n\n    v23 = v25;\n    v22 = v26;\n    v21 = v27;\n    v20 = v28;\n    v19 = v29;\n    v4 = v30;\n    v2 = v31;\n    v12 = v32;\n    v10 = v33;\n    v11 = v34;\n    v7 = v35;\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbx<8>, 0x0<64>, cc_ndep<8>)) && [D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbx<8>, 0x0<64>, cc_ndep<8>) == 0)\n    {\n        v36 = v2;\n        v37 = v2 * 8;\n        v5 = (unsigned long long)(unsigned int)sub_411210();\n        v38 = [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(r14<8>, 0x3d<8>), Shr(r14<8>, 0x3c<8>), cc_ndep<8>);\n        if (v38 == 0)\n        {\n            v40 = 0;\n            v3 = (unsigned int)sub_411210();\n            v15 = 0;\n            v42 = (unsigned int)sub_411210();\n            v14 = g_61c750;\n            if (v36 != 0)\n            {\n                v6 = v42;\n                v43 = v7;\n                v1 = (unsigned int)sub_411210();\n                while (true)\n                {\n                    v44 = v2;\n                    v45 = v40 * 8;\n                    v46 = v5 + v40 * 56;\n                    sub_405e30();\n                    v0 = v7 + v45;\n                    if (sub_4074d0() != 0)\n                    {\n                        tmp_2 = v46[3] + *(v46);\n                        *((unsigned long long [4])(v1 + v40 * 8)) = v46[3] + *(v46) - 32;\n                        *((unsigned long long [4])(v3 + v40 * 8)) = tmp_2 - v46[2] * 32;\n                        v40 += 1;\n                        v42 = v6;\n                        v56 = v1;\n                    }\n                    else\n                    {\n                        sub_407df0();\n                        if (v12 > v40)\n                        {\n                            v12 -= 1;\n                            sub_407920();\n                        }\n                        free(*(v46));\n                        v52 = v2 - 1;\n                        if (v2 - 1 > v40)\n                        {\n                            v54 = v2 * 8 - 8;\n                            do\n                            {\n                                v55 = *((long long *)(v43 + v45 + 8));\n                                *((int128_t *)(v4 + v45 * 2)) = *((int128_t *)(v4 + v45 * 2 + 16));\n                                *((unsigned long long *)(v43 + v45)) = v55;\n                                v45 += 8;\n                            }\n                            while (v54 != v45);\n                            v2 = v52;\n                        }\n                        else\n                        {\n                            v42 = v6;\n                            v56 = v1;\n                            v2 = v2;\n                        }\n                    }\n                }\n                v57 = v2;\n                if (v2 != 0)\n                {\n                    v58 = 0;\n                    do\n                    {\n                        *((unsigned long long *)(v42 + v58 * 8)) = v58;\n                        v58 += 1;\n                    }\n                    while (v58 != v57);\n                    if (v2 != 1)\n                    {\n                        v59 = v56;\n                        v60 = 1;\n                        v61 = v42;\n                        while (true)\n                        {\n                            v0 = v59;\n                            v62 = v42 + v60 * 8;\n                            v63 = v42 + v60 * 8 - 8;\n                            v42 = *((long long *)(v42 + v60 * 8));\n                            v64 = *((long long *)(v42 + v60 * 8 - 8));\n                            v59 = v0;\n                            if (sub_4082a0() > 0)\n                            {\n                                *(v63) = v42;\n                                v60 = 1;\n                                *(v62) = v64;\n                            }\n                            else\n                            {\n                                v60 += 1;\n                                if (v60 >= v2)\n                                {\n                                    break;\n                                }\n                            }\n                        }\n                        v42 = v61;\n                        v56 = v0;\n                    }\n                    v13 = 0;\n                    v95 = v56;\n                    v6 = 0;\n                    v9 = v42 - 8;\n                    while (true)\n                    {\n                        v66 = *((long long *)v42) * 8;\n                        v1 = *((long long *)v42);\n                        v67 = v95 + *((long long *)v42) * 8;\n                        v68 = *((long long *)(v95 + *((long long *)v42) * 8));\n                        if (g_61c759 != 0)\n                        {\n                            if (v6 != 0)\n                            {\n                                v70 = sub_4082a0();\n                                if (v70 != 0)\n                                {\n                                    sub_407e70();\n                                }\n                            }\n                            if (v6 == 0 || v70 != 0)\n                            {\n                                v74 = v68[1];\n                                v76 = v15;\n                                if (v68[1] > v13)\n                                {\n                                    v72 = v13;\n                                    if (v13 != 0)\n                                    {\n                                        v73 = v72 * 2;\n                                        if (v74 > v72 << 1)\n                                        {\n                                            while (v73 != 0)\n                                            {\n                                                v73 *= 2;\n                                                if (v74 <= v73)\n                                                {\n                                                    break;\n                                                }\n                                            }\n                                            if (v73 != 0)\n                                            {\n                                                v74 = v73;\n                                            }\n                                            else\n                                            {\n                                                v0 = v74;\n                                                free(v76);\n                                                v75 = sub_411210();\n                                                v76 = v75;\n                                                v15 = v75;\n                                                v13 = v0;\n                                                v74 = v68[1];\n                                            }\n                                        }\n                                        v74 = v73;\n                                    }\n                                    v0 = v74;\n                                    free(v76);\n                                    v75 = sub_411210();\n                                    v76 = v75;\n                                    v15 = v75;\n                                    v13 = v0;\n                                    v74 = v68[1];\n                                }\n                                v16 = v74;\n                                memcpy(v76, *(v68), v74);\n                                v6 = stack_base + -88;\n                                if (v14 != 0)\n                                {\n                                    *((unsigned long long [4])&v17) = v68[2] + v15 - *(v68);\n                                    *((unsigned long long [4])&v18) = v15 + v68[3] - *(v68);\n                                }\n                            }\n                        }\n                        else\n                        {\n                            sub_407e70();\n                        }\n                        if (*((long long *)(v3 + v66)) >= v68)\n                        {\n                            v8 = v3 + v66;\n                            v0 = v7 + v66;\n                            v80 = v5 + v1 * 56;\n                            v81 = sub_4074d0();\n                            if (v81 != 0)\n                            {\n                                tmp_1 = v80[3] + *(v80);\n                                v79 = v2;\n                                *((unsigned long long [4])v67) = v80[3] + *(v80) - 32;\n                                *((unsigned long long [4])v8) = tmp_1 - v80[2] * 32;\n                            }\n                            else\n                            {\n                                v82 = v42 + 8;\n                                v83 = v42 + v2 * 8;\n                                if (v2 != 1)\n                                {\n                                    v84 = v1;\n                                    do\n                                    {\n                                        v90 = *(v82);\n                                        if (*(v82) > v84)\n                                        {\n                                            *(v82) = v90 - 1;\n                                            v84 = *((long long *)v42);\n                                        }\n                                        v82 = &v82[1];\n                                    }\n                                    while (v83 != v82);\n                                    v1 = v84;\n                                    v80 = v5 + v84 * 56;\n                                }\n                                v97 = v2 - 1;\n                                sub_407df0();\n                                if (v12 > v1)\n                                {\n                                    v12 -= 1;\n                                    sub_407920();\n                                }\n                                free(*(v80));\n                                if (v2 > v1)\n                                {\n                                    v103 = v4;\n                                    v105 = v1 * 8;\n                                    v106 = v5 + v1 * 56;\n                                    v107 = v2 * 8 - 8;\n                                    v108 = v3;\n                                    do\n                                    {\n                                        v109 = *((int128_t *)(v103 + v105 * 2 + 16));\n                                        v106 = &v106[1];\n                                        v110 = v106->field_0;\n                                        v111 = v106->field_10;\n                                        *((long long *)(v7 + v105)) = *((long long *)(v7 + v105 + 8));\n                                        tmp_48 = v106->field_30;\n                                        v112 = v106->field_20;\n                                        *((uint128_t *)(v103 + v105 * 2)) = v109;\n                                        v106[-1].field_30 = tmp_48;\n                                        tmp_65 = *((long long *)(v95 + v105 + 8));\n                                        v106[-1].field_0 = v110;\n                                        *((long long *)(v95 + v105)) = tmp_65;\n                                        v113 = *((long long *)(v108 + v105 + 8));\n                                        v106[-1].field_10 = v111;\n                                        *((unsigned long long *)(v108 + v105)) = v113;\n                                        v105 += 8;\n                                        v106[-1].field_20 = v112;\n                                    }\n                                    while (v107 != v105);\n                                }\n                                if (v2 == 0)\n                                {\n                                    break;\n                                }\n                                v114 = v42;\n                                v115 = v9 + v2 * 8;\n                                do\n                                {\n                                    v116 = *((long long *)(v114 + 8));\n                                    v114 += 8;\n                                    *((unsigned long long *)(v114 - 8)) = v116;\n                                }\n                                while (v115 != v114);\n                                v2 = v97;\n                            }\n                        }\n                        else\n                        {\n                            *(v67) = &v68[-4];\n                            v79 = v2;\n                        }\n                        if (*((long long *)(v3 + v66)) < v68 || v81 != 0)\n                        {\n                            if (v2 != 1)\n                            {\n                                tmp_2 = *(v67);\n                                v85 = 1;\n                                v0 = tmp_2;\n                                v86 = v95;\n                                v87 = 1;\n                                v88 = v79;\n                                while (true)\n                                {\n                                    v92 = *((long long *)(v42 + v85 * 8));\n                                    v93 = sub_4082a0();\n                                    if (v93 >= 0 && (v93 != 0 || v1 >= v92))\n                                    {\n                                        v87 = v85 + 1;\n                                        v85 = v85 + 1 + v88 >> 1;\n                                        if (v87 >= v88)\n                                        {\n                                            break;\n                                        }\n                                    }\n                                    if (v93 < 0 || v93 == 0 && v1 < v92)\n                                    {\n                                        v88 = v85;\n                                        v85 = v87 + v85 >> 1;\n                                        if (v87 >= v88)\n                                        {\n                                            break;\n                                        }\n                                    }\n                                }\n                                v94 = v87;\n                                v95 = v86;\n                                v96 = v42 + (v94 - 1) * 8;\n                                if (v94 - 1 != 0)\n                                {\n                                    v99 = v42;\n                                    v100 = v9 + v94 * 8;\n                                    do\n                                    {\n                                        v101 = *((long long *)(v99 + 8));\n                                        v99 += 8;\n                                        *((unsigned long long *)(v99 - 8)) = v101;\n                                    }\n                                    while (v99 != v100);\n                                }\n                                *(v96) = v1;\n                            }\n                            else\n                            {\n                                *((unsigned long long *)v42) = v1;\n                            }\n                        }\n                    }\n                    if (v6 != 0 && g_61c759 != 0)\n                    {\n                        sub_407e70();\n                        free(v15);\n                    }\n                }\n            }\n            sub_407df0();\n            free(v7);\n            free(v5);\n            free(v42);\n            free(v3);\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbx<8>, 0x0<64>, cc_ndep<8>) || v38 != 0 || [D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbx<8>, 0x0<64>, cc_ndep<8>) != 0)\n    {\n        sub_411460(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_413d80",
            "funcStartAddr": "0x413d80",
            "funcEndAddr": "0x413e1e",
            "decompiledFuncCode": "int sub_413d80()\n{\n    unsigned int|char v0;  // [bp-0x40]\n    char v1;  // [bp-0x39]\n    void *v3;  // rdx\n    char *v4;  // r13\n    char *v5;  // rdi\n    char *v6;  // r12\n    unsigned long long v7;  // rcx\n    char *v8;  // rbp\n    char *v9;  // rsi\n    char *v10;  // rbx\n    unsigned long long v12;  // r9\n    unsigned long long v13;  // r8\n\n    v4 = v3;\n    v6 = v5;\n    v8 = v7;\n    v10 = v9;\n    if (v9 == v7)\n    {\n        v0 = memcmp(v5, v3, v9);\n        if (v0 == 0)\n        {\n            *(__errno_location()) = 0;\n        }\n    }\n    if (v9 != v7 || v0 != 0)\n    {\n        v12 = (char)*((char *)(v6 + v10));\n        v13 = (char)*((char *)(v4 + v8));\n        *((char *)(v6 + v10)) = 0;\n        *((char *)(v4 + v8)) = 0;\n        *((unsigned long long *)&v1) = v12;\n        *((unsigned long long *)&v0) = v13;\n        v3 = (unsigned long long)(unsigned int)sub_413cc0();\n        *((char *)(v5 + v9)) = v1;\n        *((char *)(v4 + v8)) = v0;\n    }\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_4060a0",
            "funcStartAddr": "0x4060a0",
            "funcEndAddr": "0x4060d0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[12];\n    char field_c;\n} struct_0;\n\nint sub_4060a0()\n{\n    unsigned int v0;  // [bp-0x10]\n    unsigned long v2;  // rdi\n    struct_0 *v3;  // rax\n\n    v0 = v2;\n    v3 = sub_40cde0();\n    if (v3 != 0)\n    {\n        v3->field_c = 2;\n        v3 = sub_405fb0();\n    }\n    return v3;\n}\n"
        },
        {
            "funcName": "pthread_409fe0",
            "funcStartAddr": "0x409fe0",
            "funcEndAddr": "0x40a00a",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[48];\n    unsigned long long field_30;\n} struct_0;\n\nint thread_entry()\n{\n    unsigned long v0;  // [bp-0x18]\n    struct_0 *v2;  // rdi\n\n    v0 = v2->field_30;\n    sub_409880();\n    return 0;\n}\n"
        },
        {
            "funcName": "main",
            "funcStartAddr": "0x402f50",
            "funcEndAddr": "0x4057ca",
            "decompiledFuncCode": "typedef struct struct_6 {\n    char field_0;\n    char padding_1[19];\n    unsigned short field_14;\n} struct_6;\n\ntypedef struct struct_9 {\n    char padding_0[6408064];\n    char field_61c780;\n} struct_9;\n\ntypedef struct struct_5 {\n    char field_0;\n    char padding_1[31];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char field_30;\n    char field_31;\n    char field_32;\n    char field_33;\n    char field_34;\n    char field_35;\n    char field_36;\n    char field_37;\n    char field_38;\n    char padding_39[7];\n    unsigned long long field_40;\n} struct_5;\n\ntypedef struct struct_1 {\n    char padding_0[4278656];\n    unsigned int field_414980;\n} struct_1;\n\ntypedef struct struct_7 {\n    char padding_0[64];\n    unsigned long long field_40;\n} struct_7;\n\ntypedef struct struct_0 {\n    char padding_0[48];\n    unsigned short field_30;\n    char field_32;\n    char field_33;\n    char field_34;\n    char field_35;\n    char field_36;\n    char field_37;\n    char field_38;\n    char padding_39[7];\n    unsigned long long field_40;\n} struct_0;\n\ntypedef struct struct_3 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char field_30;\n    char field_31;\n    char field_32;\n    char field_33;\n    char field_34;\n    char field_35;\n    char field_36;\n    char field_37;\n    char field_38;\n    char field_39;\n    char padding_3a[6];\n    unsigned long long field_40;\n} struct_3;\n\ntypedef struct struct_4 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[8];\n    unsigned long long field_38;\n    char padding_40[16];\n    unsigned int field_50;\n    char field_54;\n} struct_4;\n\ntypedef struct struct_2 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_2;\n\nextern unsigned int g_405cf0;\nextern unsigned long long g_405d80;\nextern int512_t g_414980;\nextern unsigned int g_416130;\nextern unsigned int g_4161a0;\nextern unsigned int g_4161c8;\nextern unsigned int g_4161f8;\nextern unsigned int g_416218;\nextern unsigned int g_416240;\nextern unsigned int g_416268;\nextern unsigned int g_4162a0;\nextern unsigned int g_4162c0;\nextern unsigned int g_416300;\nextern unsigned int g_416328;\nextern unsigned int g_416358;\nextern unsigned int g_4163a0;\nextern unsigned int g_4163d0;\nextern unsigned int g_416408;\nextern unsigned int g_416430;\nextern unsigned int g_416511;\nextern unsigned int g_416571;\nextern unsigned int g_416602;\nextern unsigned int g_4166e7;\nextern unsigned int g_416702;\nextern unsigned int g_41671d;\nextern unsigned int g_416746;\nextern unsigned int g_416753;\nextern unsigned int g_41676a;\nextern unsigned int g_416795;\nextern unsigned int g_4167a6;\nextern unsigned int g_4167b7;\nextern unsigned int g_4167cc;\nextern unsigned int g_4167e3;\nextern unsigned int g_416800;\nextern unsigned int g_41681a;\nextern unsigned int g_416839;\nextern unsigned int g_41684f;\nextern unsigned int g_4179cf;\nextern char g_61c400;\nextern char g_61c408;\nextern unsigned int g_61c420;\nextern void g_61c424;\nextern int512_t g_61c430;\nextern int512_t g_61c438;\nextern unsigned long long g_61c440;\nextern char g_61c500;\nextern unsigned int g_61c518;\nextern unsigned int g_61c57c;\nextern unsigned long long g_61c5e0;\nextern unsigned int g_61c69c;\nextern unsigned long long g_61c6a8;\nextern uint128_t g_61c6c0;\nextern uint128_t g_61c6d0;\nextern uint128_t g_61c6e0;\nextern uint128_t g_61c6f0;\nextern uint128_t g_61c700;\nextern uint128_t g_61c710;\nextern uint128_t g_61c720;\nextern uint128_t g_61c730;\nextern char g_61c740;\nextern char g_61c748[2];\nextern unsigned long long g_61c750;\nextern char g_61c758;\nextern char g_61c759;\nextern char g_61c75a;\nextern char g_61c75b;\nextern unsigned long long g_61c768;\nextern unsigned long long g_61c778;\nextern int512_t g_61c77f;\nextern char g_61c780;\nextern char g_61c78a;\nextern void g_61c880;\nextern char g_61c88a;\nextern char g_61c980;\nextern char g_61c98a;\nextern void g_61ca80;\nextern char g_61ca8a;\nextern unsigned long long g_61cb80;\nextern char g_61cba0;\nextern char g_61cba1;\nextern unsigned int g_61cba4;\nextern unsigned int g_61cba8;\nextern unsigned long long g_61cbc8;\nextern unsigned long long g_61cd60;\nextern unsigned long long stderr;\n\nint main()\n{\n    void tmp_10;  // tmp #10\n    unsigned long long v0;  // [bp-0x398]\n    void tmp_9;  // tmp #9\n    void tmp_5;  // tmp #5\n    void tmp_23;  // tmp #23\n    void tmp_177;  // tmp #177\n    void tmp_18;  // tmp #18\n    void tmp_20;  // tmp #20\n    void tmp_11;  // tmp #11\n    struct_5 *v1;  // [bp-0x390]\n    void *|unsigned long long|unsigned int|char v2;  // [bp-0x388]\n    unsigned long|char v3;  // [bp-0x380]\n    unsigned long|char *|unsigned long long v4;  // [bp-0x378]\n    unsigned long|unsigned long long|char [2] v5;  // [bp-0x370]\n    unsigned long long|char [2] v6;  // [bp-0x368]\n    unsigned long v7;  // [bp-0x360]\n    unsigned long|unsigned long long|char v8;  // [bp-0x358]\n    unsigned long|unsigned long long v9;  // [bp-0x350]\n    unsigned long|unsigned long long v10;  // [bp-0x348]\n    unsigned long|unsigned int|char [2]|char *|unsigned long long v11;  // [bp-0x340]\n    unsigned long|unsigned long long|unsigned int v12;  // [bp-0x338]\n    unsigned long long|unsigned int v13;  // [bp-0x330]\n    unsigned long long|unsigned int v14;  // [bp-0x328]\n    unsigned long long v15;  // [bp-0x320]\n    unsigned long|unsigned int|char v16;  // [bp-0x2f8]\n    unsigned long|unsigned int|unsigned long long|void * v17;  // [bp-0x2c8]\n    unsigned long v18;  // [bp-0x2c0]\n    unsigned long v19;  // [bp-0x2b8]\n    unsigned long|unsigned long long v20;  // [bp-0x2b0]\n    unsigned long v21;  // [bp-0x2a8]\n    char v22;  // [bp-0x298]\n    unsigned long|unsigned long long|unsigned int|char v23;  // [bp-0x288]\n    unsigned long|unsigned long long v24;  // [bp-0x280]\n    unsigned long|unsigned long long v25;  // [bp-0x278]\n    unsigned long long v26;  // [bp-0x270]\n    char v27;  // [bp-0x24f]\n    unsigned long long v28;  // [bp-0x238]\n    uint128_t v29;  // [bp-0x230]\n    unsigned long long v30;  // [bp-0x228]\n    uint128_t v31;  // [bp-0x220]\n    uint128_t v32;  // [bp-0x210]\n    uint128_t v33;  // [bp-0x200]\n    unsigned long|unsigned int v34;  // [bp-0x1e8]\n    unsigned long v35;  // [bp-0x1d8]\n    unsigned long v36;  // [bp-0x1d0]\n    unsigned long long v37;  // [bp-0x1c8]\n    unsigned long long v38;  // [bp-0x1c0]\n    char v39;  // [bp-0x1b8]\n    char v40;  // [bp-0x1b7]\n    char v41;  // [bp-0x1b6]\n    char v42;  // [bp-0x1b5]\n    char v43;  // [bp-0x1b4]\n    char v44;  // [bp-0x1b3]\n    char v45;  // [bp-0x1b2]\n    char v46;  // [bp-0x1b1]\n    char v47;  // [bp-0x1b0]\n    unsigned long long|char v48;  // [bp-0x158]\n    char v49;  // [bp-0x157]\n    void v50;  // [bp-0x150]\n    void v51;  // [bp-0x140]\n    void v52;  // [bp-0x130]\n    void v53;  // [bp-0x120]\n    void v54;  // [bp-0x110]\n    void v55;  // [bp-0x100]\n    void v56;  // [bp-0xf0]\n    void v57;  // [bp-0xe0]\n    unsigned int v58;  // [bp-0xd0]\n    unsigned long long v60;  // rsi\n    char *v61[3];  // rbp\n    unsigned long long v62;  // rdi\n    unsigned long long v63;  // rbx\n    struct struct_8 *v65[2];  // rax\n    char v66[2];  // rcx\n    unsigned long long v67;  // rsi\n    char v68[2];  // rdx\n    unsigned long long v69;  // rcx\n    struct struct_6 **v70;  // r13\n    unsigned int *v71[11];  // rax\n    unsigned long long v72;  // rdx\n    unsigned long long v74;  // rsi\n    struct_0 *|char *|unsigned long long|unsigned long long * v75;  // rcx\n    unsigned long long v76;  // rdx\n    unsigned short v77;  // dx\n    unsigned int v79;  // esi\n    char *|unsigned long long v80;  // rdi\n    unsigned short v81;  // si\n    unsigned long long v83;  // r14\n    unsigned long long v84;  // rbx\n    unsigned long long v85;  // r15\n    char *|unsigned long long v87;  // r9\n    unsigned long long v90;  // r8\n    unsigned long|unsigned int v91;  // r14\n    struct_1 *|unsigned long long v92;  // r13\n    unsigned long long v94;  // r13\n    unsigned long long v95;  // rax\n    unsigned long v98;  // rax\n    unsigned long long v99;  // r15\n    unsigned long|unsigned int v100;  // r14d\n    unsigned long long|struct_4 * v101;  // r13\n    char *v102[3];  // rax\n    char v103[3];  // rdx\n    unsigned long long v104;  // rax\n    unsigned int v105;  // edx\n    char *v106;  // rax\n    unsigned long long v107;  // rdx\n    unsigned long long v109;  // rax\n    unsigned long long v110;  // rax\n    unsigned long long v111;  // rdx\n    unsigned long long v112;  // rdx\n    unsigned long long v113;  // rdx\n    unsigned long long v114;  // rcx\n    unsigned int *v115;  // rdi\n    unsigned long long v116;  // rdx\n    char v117[3];  // rax\n    unsigned long long v118;  // rax\n    unsigned long long v119;  // rax\n    unsigned long long v120;  // rax\n    unsigned long v121;  // d\n    unsigned long|struct_5 *|unsigned int *|struct_9 *|unsigned long long v122;  // rsi\n    char *v124;  // rax\n    unsigned long long v125;  // rdx\n    char v126;  // dl\n    unsigned long long v128;  // r11\n    unsigned long long v129;  // rax\n    unsigned long long v130;  // rdx\n    unsigned long long v131;  // rax\n    unsigned int *v132;  // rdi\n    unsigned long long v135;  // rdx\n    char *|unsigned long long v136;  // rax\n    unsigned long|void v137;  // xmm1\n    uint128_t v138;  // xmm1\n    unsigned long long v139;  // xmm1lq\n    char *v140;  // rax\n    uint128_t v141;  // xmm1\n    unsigned long long v142;  // xmm1lq\n    char *v145;  // rax\n    char *v147;  // rax\n    struct_7 *v148;  // rax\n    struct_7 *v150;  // rdx\n    char *v151;  // rax\n    struct_7 *v152;  // rdx\n    unsigned long long v161;  // rbp\n    unsigned long long v164;  // rbx\n    unsigned long long v165;  // rbp\n    unsigned long long v167;  // rbx\n    unsigned long long v170;  // rbp\n    unsigned long long v172;  // rbp\n    unsigned long long v176;  // rbx\n    unsigned long long v177;  // rbx\n    struct_5 *v178;  // rdx\n    char *v179;  // rdi\n    unsigned long long v180;  // cc_dep1\n    unsigned long long v181;  // cc_dep2\n    unsigned long long v183;  // rax\n    unsigned long long|unsigned int v184;  // ebx\n    unsigned long long v185;  // rbx\n    unsigned long long v186;  // rbx\n    unsigned long long v187;  // rax\n    unsigned int v188;  // eax\n    struct_7 *v189;  // rax\n    unsigned long long v190;  // r12\n    struct_7 *v191;  // rdx\n    unsigned long long *v192;  // rcx\n    unsigned int v193;  // eax\n    char v194;  // al\n    unsigned long long v195;  // rax\n    unsigned long long v200;  // rbp\n    unsigned int *v201;  // rdi\n    unsigned long long v202;  // rcx\n    unsigned long long v203;  // rbp\n    struct_3 *v204;  // rbx\n    unsigned long long v205;  // r15\n    unsigned long long v206;  // r13\n    unsigned short *v207;  // r14\n    unsigned long long v210;  // r14\n    unsigned long long v211;  // r15\n    unsigned long long v212;  // rax\n    unsigned long long v213;  // rdx\n    unsigned long long v214;  // rdx\n    unsigned long long v215;  // rax\n    unsigned long long v216;  // rax\n    unsigned long long v217;  // r12\n    char *v220;  // rdi\n    unsigned long long v221;  // rcx\n    char *v222;  // rdi\n    unsigned long long v223;  // rcx\n    char v225;  // cc_dep2\n    char v226;  // cc_dep2\n    char *v227;  // rdi\n    unsigned long long v228;  // rcx\n    char v231;  // cc_dep2\n    unsigned long long v233;  // rbx\n    unsigned long long v235;  // rax\n    unsigned long long v239;  // rax\n    unsigned long long v242;  // rbp\n    unsigned long v243;  // rdx\n    unsigned long long v244;  // rcx\n    char *v245;  // rdi\n    char *v246;  // rsi\n    unsigned long long v247;  // cc_dep1\n    unsigned long long v248;  // cc_dep2\n    unsigned long long v249;  // cc_dep1\n    unsigned long long v250;  // rax\n    unsigned long long v251;  // rax\n    unsigned long long v253;  // rbx\n    unsigned long long v254;  // r14\n    unsigned long long v256;  // r12\n    unsigned long long v260[4];  // r15\n    unsigned long long v261;  // rbp\n    unsigned long long v264;  // rdx\n    unsigned long long v267;  // rdx\n    unsigned long long v268;  // r12\n    unsigned long long v269;  // rcx\n    unsigned long long v270;  // r15\n    unsigned long long v272;  // rdx\n    unsigned long long v273;  // rax\n    unsigned long long v274;  // r15\n    unsigned long long v275;  // rbp\n    unsigned long long v276;  // rbx\n    char *v277;  // rdi\n    unsigned long long v278;  // rcx\n    unsigned long v279;  // r9\n    char *v280;  // rsi\n    unsigned long long v281;  // cc_dep1\n    unsigned long long v282;  // cc_dep2\n    char v284;  // al\n    unsigned long long v285;  // r12\n    unsigned long v286;  // r14\n    unsigned long|void v289;  // r14\n    unsigned long long v291;  // xmm0lq\n    uint128_t v294;  // xmm2\n    unsigned long long v295;  // xmm2lq\n    uint128_t v296;  // xmm0\n    unsigned long v297;  // xmm0lq\n    unsigned long long v298;  // rcx\n    unsigned long long v300;  // rax\n    unsigned long long v303;  // rbp\n    unsigned long long v305;  // r14\n    unsigned long long *v314;  // rbx\n    unsigned long v316;  // rsi\n    unsigned long|unsigned int v317;  // rbx\n    unsigned long long v318;  // rbx\n    void *v322;  // rax\n    struct_2 *v324;  // rdx\n    unsigned long long v325;  // rax\n    unsigned long long v326;  // rax\n    unsigned int v329;  // cc_dep1\n\n    v61 = v60;\n    v63 = v62;\n    v9 = getenv(\"POSIXLY_CORRECT\");\n    v3 = 696 < sub_40dbe0() - 200112;\n    sub_40dc60();\n    v7 = setlocale(0x6, 0x416571);\n    bindtextdomain(0x416602, 0x416130);\n    textdomain(0x416602);\n    g_61c518 = 2;\n    g_61cba1 = sub_40bd10();\n    g_61cba0 = sub_40bd10();\n    v65 = localeconv();\n    v66 = *(v65);\n    v67 = (char)*((char *)*(v65));\n    g_61cba8 = (char)*((char *)*(v65));\n    if (v67 == 0 || v66[1] != 0)\n    {\n        g_61cba8 = 46;\n    }\n    v68 = v65[1];\n    v69 = (char)*((char *)v65[1]);\n    g_61cba4 = (char)*((char *)v65[1]);\n    if (v69 == 0 || v68[1] != 0)\n    {\n        g_61cba4 = -1;\n    }\n    g_61c758 = 0;\n    v70 = (unsigned long long)__ctype_b_loc();\n    v71 = __ctype_toupper_loc();\n    v72 = 0;\n    while (true)\n    {\n        v74 = 1;\n        v75 = (unsigned short)*((short *)&(&*(v70)->field_0)[2 * v72]);\n        if (((char)*((short *)&(&*(v70)->field_0)[2 * v72]) & 1) == 0)\n        {\n            if (v72 != 10)\n            {\n                v74 = 0;\n            }\n            else\n            {\n                v76 = *(v70)->field_14;\n                g_61ca8a = 1;\n                g_61c88a = 0;\n                v77 = v76 >> 14;\n                *((unsigned long long *)&g_61c98a) = ((unsigned int)rdx<8> ^ 1) & 1;\n                g_61c78a = (*(v71))[5];\n                v72 = 11;\n            }\n        }\n        if (((char)*((short *)&(&*(v70)->field_0)[2 * v72]) & 1) != 0 || v72 != 10)\n        {\n            *((unsigned long long *)&(&g_61ca80)[v72]) = v74;\n            v79 = v75;\n            v80 = v72 * 4;\n            v81 = (unsigned short)v75 % 0x4000;\n            *((unsigned long long *)&(&g_61c980)[v72]) = (unsigned int)((v81 ^ 1) & 1);\n            v122 = 0;\n            if ((v75 & 8) == 0)\n            {\n                v122 = ((unsigned int)v75 & 1 | 0) ^ 1;\n            }\n            tmp_10 = *(v71);\n            *((unsigned long long *)&(&g_61c880)[v72]) = v122;\n            v72 += 1;\n            *(&((char *)&g_61c77f)[v72]) = *((int *)(tmp_10 + v80));\n            if (v72 == 0x100)\n            {\n                break;\n            }\n        }\n    }\n    if (g_61cba0 != 0)\n    {\n        v2 = v63;\n        v83 = 1;\n        do\n        {\n            v84 = nl_langinfo((unsigned int)v83 + 131085);\n            v85 = strlen(v80);\n            (&g_61c430)[2 * v83] = v75;\n            *((unsigned int *)&(&g_61c438)[2 * v83]) = v83;\n            if (v85 != 0)\n            {\n                v80 = v84;\n                v90 = 0;\n                v75 = sub_411210();\n                do\n                {\n                    v122 = (unsigned long long)*(v80);\n                    v87 = v75;\n                    if (((&*(v70)->field_0)[2 * (unsigned long long)*(v80)] & 1) == 0)\n                    {\n                        v90 += 1;\n                        *(v75) = *((char *)(v122 + &g_61c780));\n                        v75 += v90;\n                        v87 = v75 + v90;\n                    }\n                    v80 = &v80[1];\n                }\n                while (v84 + v85 != v80);\n            }\n            else\n            {\n                v87 = v75;\n            }\n            v83 += 1;\n            *(v87) = 0;\n        }\n        while (v83 != 13);\n        v63 = v2;\n        qsort(0x61c440, 0xc, 0x10, 0x405cf0);\n    }\n    v91 = 14;\n    v92 = 0;\n    sigemptyset(0x61c6c0);\n    while (true)\n    {\n        sigaction();\n        if (v48 != 1)\n        {\n            sigaddset(0x61c6c0, v91);\n        }\n        v92 += 1;\n        if (v92 == 11)\n        {\n            break;\n        }\n        v91 = *((int *)(0x4 * v92 + (char *)&g_414980));\n    }\n    v48 = &g_405d80;\n    v91 = 14;\n    v58 = 0;\n    v94 = 0;\n    *((uint128_t *)&v50) = g_61c6c0;\n    *((uint128_t *)&v51) = g_61c6d0;\n    *((uint128_t *)&v52) = g_61c6e0;\n    *((uint128_t *)&v53) = g_61c6f0;\n    *((uint128_t *)&v54) = g_61c700;\n    *((uint128_t *)&v55) = g_61c710;\n    *((uint128_t *)&v56) = g_61c720;\n    *((uint128_t *)&v57) = g_61c730;\n    while (true)\n    {\n        v95 = sigismember(0x61c6c0, v91);\n        if (v95 == 0)\n        {\n            v94 += 1;\n            if (v94 == 11)\n            {\n                break;\n            }\n        }\n        else\n        {\n            v94 += 1;\n            sigaction();\n            if (v94 == 11)\n            {\n                break;\n            }\n        }\n        v91 = (unsigned int)*((int *)&((char *)&g_414980)[4 * v94]);\n    }\n    signal(0x11, 0x0);\n    sub_413f20();\n    v29 = 0;\n    v28 = -1;\n    v30 = -1;\n    v31 = 0;\n    v32 = 0;\n    v33 = 0;\n    v98 = [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(rbx<8>, 0x3d<8>), Shr(rbx<8>, 0x3c<8>), cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(rbx<8>, 0x3<8>), Shl(rbx<8>, 0x2<8>), cc_ndep<8>)) && v98 == 0)\n    {\n        v99 = 0;\n        v8 = 0;\n        v100 = 0;\n        v101 = (unsigned int)sub_411210();\n        v2 = 0;\n        v6 = 0;\n        v4 = 0;\n        v12 = 0;\n        v5 = 0;\n        v10 = stack_base + -632;\n        while (true)\n        {\n            v16 = -1;\n            if (v9 != 0 && v100 != -1 && v99 != 0)\n            {\n                v102 = (long long)(int)g_61c57c;\n                if (v2 == 0 && v3 == 1)\n                {\n                    if (g_61c57c != (unsigned int)v63)\n                    {\n                        v103 = *((long long *)((char *)v61 + 0x8 * v102));\n                    }\n                    else if (v4 == 0)\n                    {\n                        v2 = 0;\n                    }\n                }\n            }\n            if (...)\n            {\n                v100 = (unsigned int)sub_412f30();\n                if ((unsigned int)v100 != -1)\n                {\n                    v104 = v100 + 131;\n                    switch ((unsigned int)(v100 + 131))\n                    {\n                    case 0:\n                        v1 = v122;\n                        v0 = 0;\n                        sub_4110d0();\n                        exit(0x0); /* do not return */\n                    case 1:\n                        sub_40a0d0(); /* do not return */\n                    case 132:\n                        v107 = g_61cd60;\n                        if (*((char *)g_61cd60) == 43)\n                        {\n                            v117 = (long long)(int)g_61c57c;\n                            if (g_61c57c != (unsigned int)v63)\n                            {\n                                v117 = v61[(long long)(int)g_61c57c];\n                                v11 = 0;\n                                if (v61[(long long)(int)g_61c57c] == 45)\n                                {\n                                    v117 = (unsigned int)(char)((unsigned int)v117[1] - 48 <= 9);\n                                    v11 = (char)((unsigned int)v117[1] - 48 <= 9);\n                                }\n                            }\n                            else\n                            {\n                                v11 = 0;\n                            }\n                            v131 = v117 & v11;\n                            tmp_9 = v3 | v131;\n                            *((unsigned long long *)&v3) = v3 | v131;\n                            if (tmp_9 != 0)\n                            {\n                                v75 = 18;\n                                for (v132 = &v23; v75 != 0; v132 = &v132[v121])\n                                {\n                                    v75 -= 1;\n                                    v23 = 0;\n                                }\n                                v25 = -1;\n                                v136 = sub_407c00();\n                                if (v136 == 0)\n                                {\n                                    v107 = g_61cd60;\n                                    if (v24 == 0 && v23 == 0)\n                                    {\n                                        v23 = -1;\n                                    }\n                                }\n                                else if (*(v136) == 46)\n                                {\n                                    v136 = sub_407c00();\n                                }\n                            }\n                        }\n                    case 198: case 230:\n                        if (v2 != 0 && (unsigned int)0 != (unsigned int)v100)\n                        {\n                            sub_405d00(); /* do not return */\n                        }\n                        if (v2 == 0 || (unsigned int)0 == (unsigned int)v100)\n                        {\n                            *((unsigned long *)&v2) = v100;\n                        }\n                    case 208: case 213: case 217: case 229: case 231: case 233: case 234: case 235: case 236: case 241: case 245:\n                        *((unsigned long *)&v48) = v100;\n                        v49 = 0;\n                        sub_405c00();\n                        break;\n                    case 214:\n                        *((unsigned long long *)&v11[0]) = g_61cd60;\n                        v13 = v16;\n                        v109 = sub_411b40();\n                        if (v109 == 0)\n                        {\n                            if (v34 <= 18014398509481983 && (unsigned int)(char)*((char *)(v48 - 1)) - 48 <= 9)\n                            {\n                                v34 *= 0x400;\n                            }\n                            if (v34 <= 18014398509481983 || (unsigned int)(char)*((char *)(v48 - 1)) - 48 > 9)\n                            {\n                                *((int *)&g_61c778) = ((unsigned long long)g_61c420 * 34 < v34? v34 : (unsigned long long)g_61c420 * 34);\n                            }\n                        }\n                        if (((unsigned int)(char)*((char *)(v48 - 1)) - 48 <= 9 || v109 != 0) && (v34 > 18014398509481983 || v109 != 0))\n                        {\n                            sub_411ab0(); /* do not return */\n                        }\n                        if (false)\n                        {\n                            sub_40d840();\n                            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(rbx<8>, 0x3<8>), Shl(rbx<8>, 0x2<8>), cc_ndep<8>)))\n                            {\n                                v137 = 0;\n                                v137 = v34;\n                            }\n                            else\n                            {\n                                v138 = 0;\n                                v139 = v34 >> 1 | (unsigned long long)((unsigned int)v34 & 1);\n                                v137 = xmm1<16> * 2;\n                            }\n                            v141 = 0;\n                            v142 = 0x43e0000000000000;\n                            if (((char)(BinaryOp CmpF & 69) & 1) != 0)\n                            {\n                                v34 = tmp_5 / 0x4059000000000000;\n                            }\n                            else\n                            {\n                                v34 = tmp_5 / 0x4059000000000000 - xmm1<16>;\n                                v34 ^= 0x8000000000000000;\n                            }\n                        }\n                    case 215:\n                        sub_40a010();\n                        break;\n                    case 238:\n                        v114 = 18;\n                        for (v115 = &v23; v114 != 0; v115 = &v115[v121])\n                        {\n                            v114 -= 1;\n                            v23 = 0;\n                        }\n                        v25 = -1;\n                        v124 = sub_407c00();\n                        v130 = *((long long *)&v23);\n                        v23 = *((long long *)&v23) - 1;\n                        if (v130 == 0)\n                        {\n                            sub_405d30(); /* do not return */\n                        }\n                        else if (*(v124) == 46)\n                        {\n                            sub_407c00();\n                            v135 = v24;\n                            v24 -= 1;\n                            if (v135 == 0)\n                            {\n                                sub_405d30(); /* do not return */\n                            }\n                        }\n                    case 240:\n                        v8 = 1;\n                        break;\n                    case 242:\n                        v112 = g_61cd60;\n                        if (v6 != 0)\n                        {\n                            v6 = v112;\n                            v119 = strcmp(NULL, v112);\n                            v112 = v6;\n                            if (v119 != 0)\n                            {\n                                error(0x2, 0x0, (unsigned long long)dcgettext(0x0, 0x4161f8, 0x5));\n                            }\n                        }\n                        if (v119 == 0 || v6 == 0)\n                        {\n                            *((unsigned long long *)&v6[0]) = v112;\n                        }\n                    case 246:\n                        g_61c75a = 1;\n                        break;\n                    case 247:\n                        v104 = (char)*((char *)g_61cd60);\n                        if (*((char *)g_61cd60) != 0)\n                        {\n                            if (*((char *)(g_61cd60 + 1)) != 0)\n                            {\n                                *((unsigned long long *)&v11[0]) = g_61cd60;\n                                v129 = strcmp(v11, \"\\\\0\");\n                                if (v129 == 0)\n                                {\n                                    v104 = 0;\n                                }\n                                else\n                                {\n                                    v164 = (unsigned int)sub_40f880();\n                                    error(0x2, 0x0, (unsigned long long)dcgettext(0x0, 0x416753, 0x5));\n                                }\n                            }\n                            if (*((char *)(g_61cd60 + 1)) == 0 || v129 == 0)\n                            {\n                                if (*((int *)&g_61c424) != v104 && *((int *)&g_61c424) != 128)\n                                {\n                                    error(0x2, 0x0, (unsigned long long)dcgettext(0x0, 0x41676a, 0x5));\n                                }\n                                if (*((int *)&g_61c424) == v104 || *((int *)&g_61c424) == 128)\n                                {\n                                    *((unsigned long long *)&g_61c424) = v104;\n                                }\n                            }\n                        }\n                        else\n                        {\n                            error(0x2, 0x0, (unsigned long long)dcgettext(0x0, 0x416746, 0x5));\n                        }\n                    case 248:\n                        g_61c759 = 1;\n                        break;\n                    case 252:\n                        v116 = g_61cd60;\n                        while (true)\n                        {\n                            v122 = (char)*((char *)v116);\n                            if ((unsigned int)(char)*((char *)v116) - 48 > 9)\n                            {\n                                break;\n                            }\n                            v116 += 1;\n                        }\n                        v125 = 0;\n                        v126 = v122 != 0;\n                        g_61c57c = (long long)(int)g_61c57c - rdx<8>;\n                    case 253:\n                        g_61c500 = 0;\n                        break;\n                    case 259:\n                        v100 = 99;\n                        v100 = (char)*((char *)(4279064 + (unsigned long long)(unsigned int)sub_40a910()));\n                    case 260:\n                        v113 = g_61cd60;\n                        if (g_61c748 != 0)\n                        {\n                            v11 = v113;\n                            v120 = strcmp(g_61c748, v113);\n                            v113 = v11;\n                            if (v120 != 0)\n                            {\n                                error(0x2, 0x0, (unsigned long long)dcgettext(0x0, 0x4161a0, 0x5));\n                            }\n                        }\n                        if (v120 == 0 || g_61c748 == 0)\n                        {\n                            *((unsigned long long *)&g_61c748[0]) = v113;\n                        }\n                    case 261:\n                        g_61c740 = 1;\n                        break;\n                    case 262:\n                        v4 = g_61cd60;\n                        break;\n                    case 263:\n                        v13 = g_61cd60;\n                        v14 = v16;\n                        v11 = sub_411b40();\n                        v128 = 17;\n                        if (getrlimit(0x7, (unsigned int)&v48) == 0)\n                        {\n                            v128 = (unsigned int)((unsigned long long)(unsigned int)v48 - 3);\n                        }\n                        if (v11 == 0)\n                        {\n                            g_61c420 = (unsigned int)v17;\n                            if ((unsigned int)v17 <= 1)\n                            {\n                                v161 = (unsigned int)sub_40f880();\n                                error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x416702, 0x5));\n                                v170 = (unsigned int)sub_40f880();\n                                error(0x2, 0x0, (unsigned long long)dcgettext(0x0, 0x41671d, 0x5));\n                            }\n                        }\n                        else if (v11 != 1)\n                        {\n                            sub_411ab0(); /* do not return */\n                        }\n                        if (v11 == 1 || v11 == 0 && (unsigned int)v17 > v128 && (unsigned int)v17 > 1)\n                        {\n                            v2 = v128;\n                            v165 = (unsigned int)sub_40f880();\n                            error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x4166e7, 0x5));\n                            v172 = (unsigned int)sub_40d330();\n                            error(0x2, 0x0, (unsigned long long)dcgettext(0x0, 0x4161c8, 0x5));\n                        }\n                    case 264:\n                        v111 = g_61cd60;\n                        if (v5 != 0)\n                        {\n                            v5 = v111;\n                            v118 = strcmp(NULL, v111);\n                            v111 = v5;\n                            if (v118 != 0)\n                            {\n                                error(0x2, 0x0, (unsigned long long)dcgettext(0x0, 0x416218, 0x5));\n                            }\n                        }\n                        if (v5 == 0 || v118 == 0)\n                        {\n                            *((unsigned long long *)&v5[0]) = v111;\n                        }\n                    case 265:\n                        v100 = (char)*((char *)(4278976 + (unsigned long long)(unsigned int)sub_40a910()));\n                    case 266:\n                        v11 = g_61cd60;\n                        v12 = v16;\n                        v110 = sub_411680();\n                        if (v110 == 1)\n                        {\n                            v12 = -1;\n                        }\n                        else if (v110 == 0)\n                        {\n                            v12 = v48;\n                            error(0x2, 0x0, (unsigned long long)dcgettext(0x0, 0x416240, 0x5));\n                        }\n                        else\n                        {\n                            sub_411ab0(); /* do not return */\n                        }\n                    default:\n                        sub_40a0d0(); /* do not return */\n                    }\n                }\n            }\n            if (...)\n            {\n                v102 = (long long)(int)g_61c57c;\n            }\n            if (...)\n            {\n                if ((unsigned int)v63 > (unsigned int)v102)\n                {\n                    v105 = (unsigned int)v102 + 1;\n                    v106 = *((long long *)((char *)v61 + 0x8 * v102));\n                    g_61c57c = v105;\n                    *((char **)(v101 + v99 * 8)) = v106;\n                    v99 += 1;\n                }\n                else\n                {\n                    if (v4 == 0)\n                    {\n                        break;\n                    }\n                    if (v99 == 0 && v4 != 0)\n                    {\n                        if ((unsigned long long)(unsigned int)sub_407cd0() != 0)\n                        {\n                            sub_4103a0();\n                            if (sub_410440() != 0)\n                            {\n                                sub_407df0();\n                                if (v48 != 0)\n                                {\n                                    free(v101);\n                                    v101 = (long long)v50;\n                                    while (true)\n                                    {\n                                        v178 = *((long long *)(v101 + v99 * 8));\n                                        v75 = 2;\n                                        v179 = \"-\";\n                                        v122 = *((long long *)(v101 + v99 * 8));\n                                        while (v75 != 0)\n                                        {\n                                            v75 -= 1;\n                                            v180 = v122->field_0;\n                                            v181 = *(v179);\n                                            v179 = &v179[v121];\n                                            v122 = &(&v122->field_0)[v121];\n                                            break;\n                                        }\n                                        if ((v180 > v181) - 0 - (v180 < v181) != 0)\n                                        {\n                                            v99 += 1;\n                                            if (v178->field_0 != 0)\n                                            {\n                                                if (v48 == v99)\n                                                {\n                                                    break;\n                                                }\n                                            }\n                                            else\n                                            {\n                                                v185 = (unsigned int)sub_40f700();\n                                                error(0x2, 0x0, (unsigned long long)dcgettext(0x0, 0x416300, 0x5));\n                                            }\n                                        }\n                                        else\n                                        {\n                                            v186 = (unsigned int)sub_40f630();\n                                            error(0x2, 0x0, (unsigned long long)dcgettext(0x0, 0x4162c0, 0x5));\n                                        }\n                                    }\n                                }\n                                else\n                                {\n                                    v177 = (unsigned int)sub_40f630();\n                                    error(0x2, 0x0, (unsigned long long)dcgettext(0x0, 0x4167a6, 0x5));\n                                }\n                            }\n                            else\n                            {\n                                v176 = (unsigned int)sub_40f630();\n                                error(0x2, 0x0, (unsigned long long)dcgettext(0x0, 0x4162a0, 0x5));\n                            }\n                        }\n                        else\n                        {\n                            sub_407dd0(); /* do not return */\n                        }\n                    }\n                }\n            }\n            if (...)\n            {\n                v167 = (unsigned int)sub_40f630();\n                error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x416795, 0x5));\n                __fprintf_chk(stderr, 0x1, 0x4179cf, dcgettext(0x0, 0x416268, 0x5));\n            }\n            if (...)\n            {\n                if (v24 == 0 && v23 == 0)\n                {\n                    v23 = -1;\n                }\n                v140 = sub_405c00();\n                if (*(v140) != 44)\n                {\n                    v25 = -1;\n                    v26 = 0;\n                }\n                else\n                {\n                    v25 -= 1;\n                    if (*((char *)sub_407c00()) == 46)\n                    {\n                        sub_407c00();\n                    }\n                    v140 = sub_405c00();\n                }\n            }\n            if (...)\n            {\n                v23 = -1;\n            }\n            if (...)\n            {\n                if (*(v140) == 0)\n                {\n                    v148 = sub_411410();\n                    v150 = g_61c750;\n                    for (v75 = &g_61c750; v150 != 0; v150 = v150->field_40)\n                    {\n                        v75 = &v150->field_40;\n                    }\n                }\n                else\n                {\n                    sub_405d30(); /* do not return */\n                }\n            }\n            if (...)\n            {\n                v145 = sub_405c00();\n                if (*(v145) == 0 && v11 != 0)\n                {\n                    tmp_23 = v61[(long long)(int)g_61c57c];\n                    g_61c57c = (int)g_61c57c + 1;\n                    v11 = tmp_23;\n                    v147 = sub_407c00();\n                    if (v147 != 0)\n                    {\n                        if (*(v147) == 46)\n                        {\n                            sub_407c00();\n                        }\n                        if (v26 == 0 && v25 != 0)\n                        {\n                            v25 = -2;\n                        }\n                        v151 = sub_405c00();\n                        if (*(v151) != 0)\n                        {\n                            sub_405d30(); /* do not return */\n                        }\n                    }\n                    else\n                    {\n                        __assert_fail(); /* do not return */\n                    }\n                }\n            }\n            if (...)\n            {\n                v107 = g_61cd60;\n            }\n            if (...)\n            {\n                *((unsigned long long *)(v101 + 0 * 8)) = v107;\n                v99 = 1;\n            }\n            if (...)\n            {\n                v27 = 1;\n                v148 = sub_411410();\n                v152 = g_61c750;\n                for (v75 = &g_61c750; v152 != 0; v152 = v152->field_40)\n                {\n                    v75 = &v152->field_40;\n                }\n            }\n            *(v75) = v148;\n            v148->field_40 = 0;\n        }\n        if (g_61c750 != 0)\n        {\n            v184 = 0;\n            while (true)\n            {\n                v187 = sub_405af0();\n                if (v122->field_37 == 0 && v187 != 0)\n                {\n                    v122->field_20 = *((long long *)&((char *)&v31)[8]);\n                    v122->field_28 = v32;\n                    v122->field_30 = *(&((char *)&v32)[8]);\n                    v122->field_31 = *(&((char *)&v32)[9]);\n                    v122->field_36 = *(&((char *)&v32)[14]);\n                    v122->field_32 = *(&((char *)&v32)[10]);\n                    v122->field_34 = *(&((char *)&v32)[12]);\n                    v122->field_35 = *(&((char *)&v32)[13]);\n                    v122->field_37 = *(&((char *)&v32)[15]);\n                    v122->field_38 = v33;\n                    v122->field_33 = *(&((char *)&v32)[11]);\n                    v122 = v122->field_40;\n                    v184 |= (char)*(&((char *)&v32)[11]);\n                    if (v122 == 0)\n                    {\n                        break;\n                    }\n                }\n                if (v187 == 0 || v122->field_37 != 0)\n                {\n                    v188 = v122->field_33;\n                    v122 = v122->field_40;\n                    v184 |= v188;\n                    if (v122 == 0)\n                    {\n                        break;\n                    }\n                }\n            }\n            v190 = 0;\n            if (v75->field_32 + v75->field_34 + v75->field_35 + v75->field_36 + ((unsigned int)v75->field_33 | *((int *)&v75->field_38) | (unsigned int)v122) <= 1)\n            {\n                do\n                {\n                    v75 = v75->field_40;\n                    v193 = v75->field_38;\n                    v194 = v75->field_38 | v75->field_33;\n                    v195 = rax<4> | (unsigned int)v122;\n                }\n                while (v195 + v75->field_36 + v75->field_32 + v75->field_34 + v75->field_35 <= 1 && v75 != 0);\n                if (v75 != 0)\n                {\n                    v75->field_37 = 0;\n                    v75->field_30 = 0;\n                    sub_405b50();\n                    sub_405d00(); /* do not return */\n                }\n            }\n            v75->field_37 = 0;\n            v75->field_30 = 0;\n            sub_405b50();\n            sub_405d00(); /* do not return */\n        }\n        v183 = sub_405af0();\n        if (!(v183 != 0))\n        {\n            v189 = sub_411410();\n            v191 = g_61c750;\n            for (v192 = &g_61c750; v191 != 0; v191 = v191->field_40)\n            {\n                v192 = &v191->field_40;\n            }\n            *(v192) = v189;\n            v75 = g_61c750;\n            v190 = 1;\n            v189->field_40 = 0;\n            v184 = (char)*(&((char *)&v32)[11]);\n        }\n        else if (g_61c740 != 0)\n        {\n            v190 = 0;\n            v184 = 0;\n        }\n        else\n        {\n            g_61c75b = *(&((char *)&v32)[15]);\n        }\n    }\n    if ((g_61c750 == 0 && v98 == 0 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(rbx<8>, 0x3<8>), Shl(rbx<8>, 0x2<8>), cc_ndep<8>)) && v183 != 0 && g_61c740 != 0 || v98 == 0 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(rbx<8>, 0x3<8>), Shl(rbx<8>, 0x2<8>), cc_ndep<8>)) && (v75->field_32 + v75->field_34 + v75->field_35 + v75->field_36 + ((unsigned int)v75->field_33 | *((int *)&v75->field_38) | (unsigned int)v122) <= 1 || g_61c750 == 0) && (v183 == 0 || g_61c750 != 0) && g_61c740 != 0) && v2 == 0 && v6 == 0)\n    {\n        if (v7 == 0 || (unsigned long long)setlocale(0x3, 0x416571) == 0)\n        {\n            dcgettext(0x0, 0x4167b7, 0x5);\n            error(0x0, 0x0, \"%\");\n        }\n        if (g_61cba1 == 0)\n        {\n            dcgettext(0x0, 0x4167e3, 0x5);\n            error(0x0, 0x0, \"%\");\n        }\n        else\n        {\n            setlocale(0x3, 0x0);\n            v200 = (unsigned int)sub_40f880();\n            error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x4167cc, 0x5));\n        }\n        v201 = &v34;\n        v202 = 18;\n        v122 = &v28;\n        v3 = &v34;\n        for (v203 = 1; v202 != 0; v122 = &v122[v121])\n        {\n            v202 -= 1;\n            v34 = v28;\n            v201 = &v201[v121];\n        }\n        if (g_61c750 != 0)\n        {\n            v11 = v184;\n            v204 = g_61c750;\n            v7 = stack_base + -759;\n            v9 = v99;\n            v10 = v101;\n            do\n            {\n                v205 = v204->field_0;\n                v206 = v204->field_10;\n                if (v204->field_39 != 0)\n                {\n                    v16 = 43;\n                    v207 = (unsigned long long)__stpcpy_chk(v7, sub_40d370(), 0x2d);\n                    v17 = 2124589;\n                    v4 = (unsigned long long)__stpcpy_chk((unsigned int)&v17, sub_40d370(), 0x2c);\n                    if (v204->field_10 != -1)\n                    {\n                        *(v207) = 11552;\n                        strcpy(&v207[1], (unsigned long long)(unsigned int)sub_40d370());\n                        *(v4) = 44;\n                        strcpy(&v4[1], (unsigned long long)(unsigned int)sub_40d370());\n                    }\n                    v210 = (unsigned int)sub_40f860();\n                    v211 = (unsigned int)sub_40f860();\n                    error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x416328, 0x5));\n                    v205 = v204->field_0;\n                    v206 = v204->field_10;\n                }\n                v212 = v190;\n                if (v206 < v205 && v205 != -1)\n                {\n                    error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x416430, 0x5));\n                    v206 = v204->field_10;\n                    v212 = 1;\n                }\n                v122 = 1;\n                v213 = 0xffff00ff0000 & *((long long *)&v204->field_30);\n                if ((0xffff00ff0000 & *((long long *)&v204->field_30)) == 0)\n                {\n                    v122 = v204->field_36;\n                }\n                if (*((int *)&g_61c424) == 128 && v212 == 0 && (v204->field_18 == 0 || v206 != 0) && (v122 == 0 && v204->field_30 == 0 || v204->field_30 == 0 && v204->field_8 != 0 || v204->field_31 == 0 && v204->field_18 != 0))\n                {\n                    error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x416358, 0x5));\n                    v213 = 0xffff00ff0000 & *((long long *)&v204->field_30);\n                }\n                if (v213 != 0 && (v190 == 0 || v212 == 0))\n                {\n                    v214 = v204->field_10 + 1;\n                    v215 = v204->field_0 + 1;\n                    if (v204->field_0 + 1 == 0)\n                    {\n                        v215 = 1;\n                    }\n                    if (v214 == 0 || v214 > v215)\n                    {\n                        error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x4163a0, 0x5));\n                    }\n                }\n                if (v37 == v204->field_20 && v37 != 0)\n                {\n                    v37 = 0;\n                }\n                if (v38 == v204->field_28 && v38 != 0)\n                {\n                    v38 = 0;\n                }\n                v203 += 1;\n                v39 &= (char)((unsigned int)v204->field_30 ^ 1);\n                v40 &= (char)((unsigned int)v204->field_31 ^ 1);\n                v45 &= (char)((unsigned int)v204->field_36 ^ 1);\n                v41 &= (char)((unsigned int)v204->field_32 ^ 1);\n                v43 &= (char)((unsigned int)v204->field_34 ^ 1);\n                v44 &= (char)((unsigned int)v204->field_35 ^ 1);\n                v42 &= (char)((unsigned int)v204->field_33 ^ 1);\n                v47 &= (char)((unsigned int)v204->field_38 ^ 1);\n                tmp_177 = v204->field_37;\n                v204 = v204->field_40;\n                v46 &= (char)((unsigned int)tmp_177 ^ 1);\n            }\n            while (v204 != 0);\n            v99 = v9;\n            v101 = v10;\n            v184 = (char)v11;\n        }\n        v216 = sub_405af0();\n        v217 = v46;\n        if (v216 == 0)\n        {\n            if (g_61c75a == 0 && g_61c759 == 0)\n            {\n                v46 = 0;\n            }\n            sub_405b50();\n            v220 = &v17;\n            v221 = -1;\n            while (v221 != 0)\n            {\n                v221 -= 1;\n                v225 = v17;\n                v220 = &v220[v121];\n                break;\n            }\n            error(0x0, 0x0, (unsigned long long)dcngettext(0x0, 0x41681a, 0x416800, !(rcx<8>) - 1, 0x5));\n            *((unsigned long long *)&v46) = v217;\n        }\n        else if (v46 != 0)\n        {\n            if (g_61c75a == 0)\n            {\n                if (g_61c759 != 0 && g_61c750 != 0)\n                {\n                    sub_405b50();\n                    v227 = &v17;\n                    v228 = -1;\n                    while (v228 != 0)\n                    {\n                        v228 -= 1;\n                        v231 = v17;\n                        v227 = &v227[v121];\n                        break;\n                    }\n                    error(0x0, 0x0, (unsigned long long)dcngettext(0x0, 0x41681a, 0x416800, !(rcx<8>) - 1, 0x5));\n                    v46 = v46;\n                }\n            }\n            else\n            {\n                if (g_61c750 != 0)\n                {\n                    sub_405b50();\n                    v222 = &v17;\n                    v223 = -1;\n                    while (v223 != 0)\n                    {\n                        v223 -= 1;\n                        v226 = v17;\n                        v222 = &v222[v121];\n                        break;\n                    }\n                    error(0x0, 0x0, (unsigned long long)dcngettext(0x0, 0x41681a, 0x416800, !(rcx<8>) - 1, 0x5));\n                    v46 = 1;\n                }\n            }\n        }\n        if (v46 != 0 && g_61c75a == 0 && g_61c759 == 0 && g_61c750 != 0)\n        {\n            error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x4163d0, 0x5));\n        }\n    }\n    if ((g_61c750 == 0 && v98 == 0 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(rbx<8>, 0x3<8>), Shl(rbx<8>, 0x2<8>), cc_ndep<8>)) && v183 != 0 && g_61c740 != 0 || v98 == 0 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(rbx<8>, 0x3<8>), Shl(rbx<8>, 0x2<8>), cc_ndep<8>)) && (v75->field_32 + v75->field_34 + v75->field_35 + v75->field_36 + ((unsigned int)v75->field_33 | *((int *)&v75->field_38) | (unsigned int)v122) <= 1 || g_61c750 == 0) && (v183 == 0 || g_61c750 != 0) && g_61c740 != 0) && v2 == 0 && v6 != 0 || (g_61c750 == 0 && v98 == 0 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(rbx<8>, 0x3<8>), Shl(rbx<8>, 0x2<8>), cc_ndep<8>)) && v183 != 0 && g_61c740 != 0 || v98 == 0 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(rbx<8>, 0x3<8>), Shl(rbx<8>, 0x2<8>), cc_ndep<8>)) && (v75->field_32 + v75->field_34 + v75->field_35 + v75->field_36 + ((unsigned int)v75->field_33 | *((int *)&v75->field_38) | (unsigned int)v122) <= 1 || g_61c750 == 0) && (v183 == 0 || g_61c750 != 0) && g_61c740 != 0) && v2 != 0)\n    {\n        if (v2 == 0)\n        {\n            v2 = 111;\n        }\n        g_61c408 = v2;\n        sub_405d00(); /* do not return */\n    }\n    if ((g_61c750 == 0 && v98 == 0 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(rbx<8>, 0x3<8>), Shl(rbx<8>, 0x2<8>), cc_ndep<8>)) && v183 != 0 && g_61c740 != 0 || v98 == 0 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(rbx<8>, 0x3<8>), Shl(rbx<8>, 0x2<8>), cc_ndep<8>)) && (v75->field_32 + v75->field_34 + v75->field_35 + v75->field_36 + ((unsigned int)v75->field_33 | *((int *)&v75->field_38) | (unsigned int)v122) <= 1 || g_61c750 == 0) && (v183 == 0 || g_61c750 != 0) && g_61c740 != 0) && v2 == 0 && v6 == 0 || v98 == 0 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(rbx<8>, 0x3<8>), Shl(rbx<8>, 0x2<8>), cc_ndep<8>)) && (v75->field_32 + v75->field_34 + v75->field_35 + v75->field_36 + ((unsigned int)v75->field_33 | *((int *)&v75->field_38) | (unsigned int)v122) <= 1 || g_61c750 == 0) && (v183 == 0 || g_61c750 != 0) && g_61c740 == 0)\n    {\n        g_61c75b = *(&((char *)&v32)[15]);\n        if (v184 != 0)\n        {\n            v233 = (unsigned int)sub_40f900();\n            if (v233 != 0)\n            {\n                v3 = &v34;\n                sub_40fc10();\n                v235 = sub_40fd70();\n                if (v235 == 0)\n                {\n                    sub_40aa90();\n                    sub_40b360();\n                }\n                else\n                {\n                    v122 = \"close failed\";\n                }\n            }\n        }\n    }\n    if (...)\n    {\n        dcgettext(0x0, v122, 0x5);\n        sub_405dd0(); /* do not return */\n    }\n    if (...)\n    {\n        if (g_61c768 == 0)\n        {\n            v239 = getenv(\"TMPDIR\");\n            sub_40a010();\n        }\n        if (v99 == 0)\n        {\n            v99 = 1;\n            free(v101);\n            v101 = (unsigned int)sub_411210();\n            *((char **)v101) = \"-\";\n        }\n        if (g_61c778 != 0)\n        {\n            *((int *)&g_61c778) = ((unsigned long long)g_61c420 * 34 < g_61c778? g_61c778 : (unsigned long long)g_61c420 * 34);\n        }\n        if (!(v2 != 0))\n        {\n            v242 = v101;\n            v15 = \"-\";\n            while (true)\n            {\n                v243 = *((long long *)v242);\n                v244 = 2;\n                v245 = \"-\";\n                v246 = *((long long *)v242);\n                while (v244 != 0)\n                {\n                    v244 -= 1;\n                    v247 = *(v246);\n                    v248 = *(v245);\n                    v245 = &v245[v121];\n                    v246 = &v246[v121];\n                    break;\n                }\n                v249 = (v247 > v248) - 0 - (v247 < v248);\n                if ((char)v249 != 0)\n                {\n                    v250 = euidaccess(v243, 0x4);\n                    if (v250 != 0)\n                    {\n                        v316 = \"cannot read\";\n                    }\n                }\n                if ((char)v249 == 0 || v250 == 0)\n                {\n                    v242 += 8;\n                    if (v99 == 1)\n                    {\n                        v251 = v6;\n                        if (v6 != 0)\n                        {\n                            v251 = open(v251, 0x80041, 0x1b6);\n                            if (v251 < 0)\n                            {\n                                dcgettext(0x0, 0x416511, 0x5);\n                                sub_405dd0(); /* do not return */\n                            }\n                            else if (v251 != 1)\n                            {\n                                sub_408e10();\n                            }\n                        }\n                        if (v6 == 0 || v251 >= 0)\n                        {\n                            if (v8 == 0)\n                            {\n                                if (v12 == 0)\n                                {\n                                    *((int *)&v12) = (sub_40d6f0() <= 8? v251 : 8);\n                                }\n                                v14 = v101;\n                                v20 = 0;\n                                v8 = 1;\n                                v270 = 0;\n                                *((int *)&v7) = (v12 <= 72057594037927935? v12 : 72057594037927935);\n                                v9 = (v12 <= 72057594037927935? v12 : 72057594037927935) * 0x100;\n                                v10 = (v12 <= 72057594037927935? v12 : 72057594037927935) * 2;\n                                v11 = stack_base + -480;\n                                while (true)\n                                {\n                                    v3 = *((long long *)v14);\n                                    v2 = (unsigned long long)(unsigned int)sub_407cd0();\n                                    if (v2 != 0)\n                                    {\n                                        v13 = 48;\n                                        if (v12 > 1)\n                                        {\n                                            v272 = 1;\n                                            v273 = 1;\n                                            do\n                                            {\n                                                v273 *= 2;\n                                                v272 += 1;\n                                            }\n                                            while (v7 > v273);\n                                            v13 = v272 * 32;\n                                        }\n                                        v5 = &v17;\n                                        if (v20 == 0)\n                                        {\n                                            v5 = v270;\n                                            v274 = 0;\n                                            v275 = v13 + 1;\n                                            v276 = v13 + 2;\n                                            while (true)\n                                            {\n                                                if (v274 != 0)\n                                                {\n                                                    v277 = v15;\n                                                    v278 = 2;\n                                                    v279 = *((long long *)(v14 + v274 * 8));\n                                                    v280 = *((long long *)(v14 + v274 * 8));\n                                                    while (v278 != 0)\n                                                    {\n                                                        v278 -= 1;\n                                                        v281 = *(v280);\n                                                        v282 = *(v277);\n                                                        v277 = &v277[v121];\n                                                        v280 = &v280[v121];\n                                                        break;\n                                                    }\n                                                    if ((v281 > v282) - 0 - (v281 < v282) == 0)\n                                                    {\n                                                        v284 = __fxstat(0x1, 0x0) != 0;\n                                                    }\n                                                    else\n                                                    {\n                                                        v284 = __xstat(0x1, v279) != 0;\n                                                    }\n                                                }\n                                                else\n                                                {\n                                                    v284 = __fxstat(0x1, fileno(v2)) != 0;\n                                                }\n                                                if (v284 == 0)\n                                                {\n                                                    if (((unsigned short)v36 & 0xf000) == 0x8000)\n                                                    {\n                                                        v285 = *((long long *)&(&v45)[-6]);\n                                                        if (g_61c5e0 == 0)\n                                                        {\n                                                            g_61c5e0 = g_61c778;\n                                                        }\n                                                    }\n                                                    else if (g_61c778 == 0)\n                                                    {\n                                                        v285 = 0x20000;\n                                                    }\n                                                    if (g_61c778 == 0 && g_61c5e0 == 0)\n                                                    {\n                                                        v286 = -1;\n                                                        if (getrlimit(0x2, (unsigned int)&v16) == 0)\n                                                        {\n                                                            v286 = *((long long *)&v16);\n                                                        }\n                                                        if (getrlimit(0x9, (unsigned int)&v16) == 0)\n                                                        {\n                                                            v286 = (!(r14<8> <= *((long long *)&v16))? *((long long *)&v16) : r14<8>);\n                                                        }\n                                                        v289 = v286 % 2;\n                                                        if (getrlimit(0x5, (unsigned int)&v16) == 0)\n                                                        {\n                                                            v289 = (!(r14<8> <= (*((long long *)&v16) >> 4) * 15)? (*((long long *)&v16) >> 4) * 15 : r14<8>);\n                                                        }\n                                                        sub_40d900();\n                                                        v4 = v291;\n                                                        sub_40d840();\n                                                        v289 *= 0x3fe8000000000000;\n                                                        tmp_18 = BinaryOp Max;\n                                                        v289 = tmp_18;\n                                                        if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n                                                        {\n                                                            v294 = 0;\n                                                            v295 = 0x43e0000000000000;\n                                                            if (((char)(BinaryOp CmpF & 69) & 1) == 0)\n                                                            {\n                                                                r14<8> = (Conv(128->64, (Conv(64->128, r14<8>) - xmm2<16>)) ^ 0x8000000000000000<64>)\n                                                            }\n                                                            else\n                                                            {\n                                                                v289 = v289;\n                                                            }\n                                                        }\n                                                        if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(rbx<8>, 0x3<8>), Shl(rbx<8>, 0x2<8>), cc_ndep<8>)))\n                                                        {\n                                                            v289 = v289;\n                                                        }\n                                                        else\n                                                        {\n                                                            v296 = 0;\n                                                            v297 = v289 % 2 | (unsigned long long)((unsigned int)v289 & 1);\n                                                            v289 = xmm0<16> * 2;\n                                                        }\n                                                        if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n                                                        {\n                                                            v289 = 0;\n                                                            v289 = 0x43e0000000000000;\n                                                            if (((char)(BinaryOp CmpF & 69) & 1) == 0)\n                                                            {\n                                                                r14<8> = (Conv(128->64, (Conv(64->128, r14<8>) - xmm0<16>)) ^ 0x8000000000000000<64>)\n                                                            }\n                                                            else\n                                                            {\n                                                                v289 = v289;\n                                                            }\n                                                        }\n                                                        *((int *)&g_61c5e0) = ((unsigned long long)g_61c420 * 34 < v289? v289 : (unsigned long long)g_61c420 * 34);\n                                                    }\n                                                    if (((unsigned short)v36 & 0xf000) == 0x8000 || g_61c778 == 0)\n                                                    {\n                                                        v298 = v285 * v275 + 1;\n                                                        if (v298 < g_61c5e0 - v276 && v285 == (0 CONCAT v285 * v275 + 1) % v275)\n                                                        {\n                                                            v274 += 1;\n                                                            v276 += v298;\n                                                            v270 = v5;\n                                                        }\n                                                    }\n                                                    if (v298 >= g_61c5e0 - v276 || v285 != (0 CONCAT v285 * v275 + 1) % v275 || ((unsigned short)v36 & 0xf000) != 0x8000 && g_61c778 != 0)\n                                                    {\n                                                        v270 = v5;\n                                                    }\n                                                    v5 = &v17;\n                                                    sub_405e30();\n                                                }\n                                                else\n                                                {\n                                                    v316 = \"stat failed\";\n                                                }\n                                            }\n                                            if (v284 != 0)\n                                            {\n                                                dcgettext(0x0, v316, 0x5);\n                                                sub_405dd0(); /* do not return */\n                                            }\n                                            else if (v298 >= g_61c5e0 - v276 || v285 != (0 CONCAT v285 * v275 + 1) % v275 || v284 == 0 && ((unsigned short)v36 & 0xf000) != 0x8000 && g_61c778 != 0 || v298 < g_61c5e0 - v276 && v285 == (0 CONCAT v285 * v275 + 1) % v275 && v274 >= 1)\n                                            {\n                                                v22 = 0;\n                                                v8 -= 1;\n                                            }\n                                        }\n                                        v22 = 0;\n                                        v8 -= 1;\n                                        while (true)\n                                        {\n                                            v300 = sub_4074d0();\n                                            if (v300 != 0)\n                                            {\n                                                if (v22 != 0)\n                                                {\n                                                    if (v8 == 0)\n                                                    {\n                                                        g_61cb80 = 0;\n                                                        if (v21 == 0 && v270 == 0)\n                                                        {\n                                                            sub_407df0();\n                                                            if (*((long long *)&v16) != 0)\n                                                            {\n                                                                *((int *)&v16) = sub_407cd0();\n                                                                v303 = v6;\n                                                                v270 = 0;\n                                                            }\n                                                            else\n                                                            {\n                                                                sub_407dd0(); /* do not return */\n                                                            }\n                                                        }\n                                                    }\n                                                    else if (v13 + 1 < 0 - v18 - v19 * v13)\n                                                    {\n                                                        v21 = v18;\n                                                        sub_407df0();\n                                                    }\n                                                }\n                                                if ((v22 == 0 || v13 + 1 >= 0 - v18 - v19 * v13) && (v22 == 0 || v8 != 0))\n                                                {\n                                                    g_61cb80 = 0;\n                                                }\n                                                if ((v22 == 0 || v8 == 0 || v13 + 1 >= 0 - v18 - v19 * v13) && (v22 == 0 || v21 != 0 || v270 != 0 || v8 != 0))\n                                                {\n                                                    v270 += 1;\n                                                    v303 = (unsigned long long)(unsigned int)sub_4090c0() + 13;\n                                                }\n                                            }\n                                            else\n                                            {\n                                                sub_407df0();\n                                                if (v8 == 0)\n                                                {\n                                                    free(v17);\n                                                    v314 = g_61c6a8;\n                                                    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(rbx<8>, 0x3<8>), Shl(rbx<8>, 0x2<8>), cc_ndep<8>))\n                                                    {\n                                                        break;\n                                                    }\n                                                    if ([D] amd64g_calculate_condition(0x0<64>, 0x30<64>, 0x10<64>, r15<8>, cc_ndep<8>) != 0)\n                                                    {\n                                                        break;\n                                                    }\n                                                    v322 = sub_411210();\n                                                    for (v324 = v322; v314 != 0; *((unsigned long long *)&v324[-1].padding_0[0]) = v326)\n                                                    {\n                                                        v326 = (char *)&v314[1] + 5;\n                                                        v324->field_8 = v314;\n                                                        v314 = *(v314);\n                                                        v324 = &v324[1];\n                                                    }\n                                                    sub_409330();\n                                                    free(v322);\n                                                }\n                                            }\n                                            if (v8 != 0 && (v13 + 1 < 0 - v18 - v19 * v13 || v300 == 0) && (v300 == 0 || v22 != 0))\n                                            {\n                                                v14 += 8;\n                                            }\n                                            if (v21 == 0 && v270 == 0 && v8 == 0 && v22 != 0 && v300 != 0 && *((long long *)&v16) != 0 || v300 != 0 && (v22 == 0 || v8 == 0 || v13 + 1 >= 0 - v18 - v19 * v13) && (v22 == 0 || v21 != 0 || v270 != 0 || v8 != 0))\n                                            {\n                                                if (v19 > 1)\n                                                {\n                                                    v34 = (unsigned int)sub_40cfd0();\n                                                    pthread_mutex_init(v11, 0x0);\n                                                    pthread_cond_init((unsigned int)&v39, 0x0);\n                                                    v305 = v19;\n                                                    *((unsigned long long *)(v101 + 48)) = v305;\n                                                    v101 = (unsigned int)sub_411210();\n                                                    *((unsigned long long *)(v101 + 40)) = v305;\n                                                    *((long long *)(v101 + 24)) = 0;\n                                                    *((long long *)(v101 + 16)) = 0;\n                                                    *((long long *)(v101 + 8)) = 0;\n                                                    *((long long *)v101) = 0;\n                                                    *((long long *)(v101 + 32)) = 0;\n                                                    *((long long *)(v101 + 56)) = 0;\n                                                    *((int *)(v101 + 80)) = 0;\n                                                    *((char *)(v101 + 84)) = 0;\n                                                    pthread_mutex_init((unsigned int)v101 + 88, 0x0);\n                                                    v4 = (char *)&v101[1].field_28 + 3;\n                                                    sub_4061f0();\n                                                    v0 = v303;\n                                                    sub_409880();\n                                                }\n                                                else\n                                                {\n                                                    sub_4085d0();\n                                                }\n                                                sub_407df0();\n                                                free(v17);\n                                            }\n                                            if (v21 == 0 && v270 == 0 && v8 == 0 && v22 != 0 && v300 != 0 && *((long long *)&v16) != 0 || v300 != 0 && (v22 == 0 || v8 == 0 || v13 + 1 >= 0 - v18 - v19 * v13) && (v22 == 0 || v21 != 0 || v270 != 0 || v8 != 0) || v300 == 0 && v8 == 0)\n                                            {\n                                                if (g_61c69c <= 0)\n                                                {\n                                                    break;\n                                                }\n                                                while (true)\n                                                {\n                                                    sub_405fb0();\n                                                    if (g_61c69c <= 0)\n                                                    {\n                                                        break;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        if (v300 == 0 && v8 == 0)\n                                        {\n                                            sub_411460(); /* do not return */\n                                        }\n                                        else if (v8 != 0 && (v13 + 1 < 0 - v18 - v19 * v13 || v300 == 0) && (v300 == 0 || v22 != 0))\n                                        {\n                                            v3 = *((long long *)v14);\n                                            v2 = (unsigned long long)(unsigned int)sub_407cd0();\n                                        }\n                                    }\n                                    else\n                                    {\n                                        sub_407dd0(); /* do not return */\n                                    }\n                                }\n                                if (v20 == 0 && v2 != 0)\n                                {\n                                    dcgettext(0x0, v316, 0x5);\n                                    sub_405dd0(); /* do not return */\n                                }\n                                else if (true)\n                                {\n                                    sub_411460(); /* do not return */\n                                }\n                            }\n                            else\n                            {\n                                v267 = 0;\n                                while (true)\n                                {\n                                    *((long long *)(sub_4113e0() + v267 * 16)) = *((long long *)(v101 + v267 * 8));\n                                    v269 = v267 + 1;\n                                    if (v267 == 0)\n                                    {\n                                        break;\n                                    }\n                                    v267 = v269;\n                                }\n                                sub_409330();\n                            }\n                            v329 = sub_411f80();\n                            v325 = 0;\n                            if ((char)(v329 + 1 == 0))\n                            {\n                                dcgettext(0x0, 0x41652b, 0x5);\n                                sub_405dd0(); /* do not return */\n                            }\n                        }\n                    }\n                }\n                if ((v99 == 1 || (char)v249 != 0) && (v99 == 1 || v250 != 0) && (v8 == 0 || (char)v249 != 0) && (v8 == 0 || v250 != 0) && (v6 == 0 || (char)v249 != 0 || v251 >= 0) && (v6 == 0 || v251 >= 0 || v250 != 0))\n                {\n                    dcgettext(0x0, v316, 0x5);\n                    sub_405dd0(); /* do not return */\n                }\n            }\n            if (v99 == 1 && v8 == 0 && ((char)v249 == 0 || v250 == 0) && (v6 == 0 || v251 >= 0))\n            {\n                sub_411460(); /* do not return */\n            }\n            else if (v99 == 1 && ((char)v249 == 0 || v250 == 0) && (g_61c758 == 0 || !((char)(v329 + 1 == 0))) && (v6 == 0 || v251 >= 0))\n            {\n                return v325;\n            }\n        }\n        else if (!(v99 <= 1))\n        {\n            v253 = (unsigned int)sub_40f630();\n            error(0x2, 0x0, (unsigned long long)dcgettext(0x0, 0x416408, 0x5));\n        }\n        else if (v6 == 0)\n        {\n            v254 = (unsigned int)sub_407cd0();\n            if (v254 != 0)\n            {\n                v5 = g_61c750;\n                v256 = 0;\n                v3 = &v34;\n                sub_405e30();\n                v17 = 0;\n                v4 = 0;\n                while (true)\n                {\n                    if (sub_4074d0() != 0)\n                    {\n                        v260 = v36 + v34 - 32;\n                        v261 = v36 + v34 - v35 * 32;\n                        if (v256 == 0 || ((unsigned int)g_61c759 ^ 1) > sub_4082a0())\n                        {\n                            while (true)\n                            {\n                                if (v261 < v260)\n                                {\n                                    v260 = &v260[-4];\n                                    if (((unsigned int)g_61c759 ^ 1) <= sub_4082a0())\n                                    {\n                                        break;\n                                    }\n                                }\n                                else\n                                {\n                                    v264 = v260[1];\n                                    v4 += v35;\n                                    if (0 < v260[1])\n                                    {\n                                        while (true)\n                                        {\n                                            v256 *= 2;\n                                            if (v256 + v256 == 0)\n                                            {\n                                                v256 = v264;\n                                            }\n                                            free(v17);\n                                            v17 = (unsigned int)sub_411210();\n                                        }\n                                    }\n                                    memcpy(v17, *(v260), v256);\n                                    *((unsigned long long [4])&v18) = v260[1];\n                                    if (v5 == 0)\n                                    {\n                                        break;\n                                    }\n                                    *((unsigned long long [4])&v19) = v260[2] + v17 - *(v260);\n                                    *((unsigned long long [4])&v20) = v17 + v260[3] - *(v260);\n                                }\n                            }\n                            if (v261 < v260)\n                            {\n                                v317 = 0;\n                                if (v2 != 99)\n                                {\n                                    break;\n                                }\n                            }\n                        }\n                        v268 = (unsigned int)sub_40d370();\n                        __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x416839, 0x5), g_61cbc8);\n                        dcgettext(0x0, 0x41684f, 0x5);\n                        sub_407e70();\n                    }\n                    else\n                    {\n                        v317 = 1;\n                    }\n                }\n                v318 = v317 ^ 1;\n                sub_407df0();\n                free(v34);\n                free(v17);\n                v325 = v318;\n            }\n            else\n            {\n                sub_407dd0(); /* do not return */\n            }\n        }\n        else\n        {\n            g_61c400 = v2;\n            sub_405d00(); /* do not return */\n        }\n    }\n    if (...)\n    {\n        sub_411460(); /* do not return */\n    }\n    if (...)\n    {\n        return v325;\n    }\n}\n"
        },
        {
            "funcName": "sub_4121e0",
            "funcStartAddr": "0x4121e0",
            "funcEndAddr": "0x4122b5",
            "decompiledFuncCode": "int sub_4121e0()\n{\n    unsigned int v1[13];  // rsi\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rbp\n    unsigned long long v4;  // rbx\n    unsigned long long v5;  // r9\n    unsigned long long v6;  // r8\n    unsigned long long v7;  // r14\n    unsigned long long v8;  // rdx\n    unsigned long v9;  // rdi\n    unsigned long long *v10;  // rax\n    unsigned long long *v12;  // rdx\n    unsigned long long v13;  // rcx\n    unsigned long long v14;  // r10\n    unsigned long long *v15;  // rax\n    unsigned long long *v17;  // rdx\n    unsigned long long v18;  // rcx\n    unsigned int v19;  // r9d\n\n    v2 = v1[5 + 1];\n    v3 = v1[0];\n    v4 = (int)v1[6];\n    v5 = v1[5 + 1];\n    v14 = v1[0];\n    while ((unsigned int)v14 > v1[6])\n    {\n        for (v6 = (int)v1[6]; v5 < v1[6]; v19 = v5 + v7)\n        {\n            v7 = v14 - v6;\n            v8 = v6 - v5;\n            if ((unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n            {\n                v14 -= v8;\n                v10 = v9 + v5 * 8;\n                v12 = v14 - v5;\n                do\n                {\n                    v13 = *(v10);\n                    *(v10) = *((long long *)((char *)v10 + 0x8 * v12));\n                    *((unsigned long long *)((char *)v10 + 0x8 * v12)) = v13;\n                    v10 = &v10[1];\n                }\n                while (v9 + 8 + ((unsigned int)v8 - 1 + v5) * 8 != v10);\n                if ((unsigned int)v14 <= (unsigned int)v6)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v15 = v9 + v5 * 8;\n                v17 = v4 - v5;\n                do\n                {\n                    v18 = *(v15);\n                    *(v15) = *((long long *)((char *)v15 + 0x8 * v17));\n                    *((unsigned long long *)((char *)v15 + 0x8 * v17)) = v18;\n                    v15 = &v15[1];\n                }\n                while (v15 != v9 + 8 + (v7 - 1 + v5) * 8);\n            }\n        }\n        if ((unsigned int)(v14 - v6) > (unsigned int)(v6 - v5) || v5 >= v1[6])\n        {\n            v1[6] = v3;\n            v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n            return stack_base + 0 - v6;\n        }\n    }\n    v1[6] = v3;\n    v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n    return stack_base + 0 - v6;\n}\n"
        },
        {
            "funcName": "sub_40a650",
            "funcStartAddr": "0x40a650",
            "funcEndAddr": "0x40a753",
            "decompiledFuncCode": "int sub_40a650()\n{\n    unsigned long long v0;  // [bp-0x58]\n    char v1;  // [bp-0x41]\n    unsigned long v2;  // [bp-0x40]\n    unsigned long long v4;  // rsi\n    unsigned long long v5;  // r15\n    unsigned long v6;  // rcx\n    unsigned long v7;  // r13\n    void *v8;  // rdx\n    char *v9;  // rdi\n    unsigned long v11;  // r12\n    unsigned long long v12;  // rbx\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rax\n    void *v15;  // rbp\n    char *v16;  // r14\n\n    v5 = v4;\n    v7 = v6;\n    v15 = v8;\n    v2 = v8;\n    v16 = *((long long *)v5);\n    v0 = -1;\n    if (*((long long *)v5) != 0)\n    {\n        v11 = strlen(v9);\n        v1 = 0;\n        v12 = 0;\n        while (true)\n        {\n            v13 = strncmp(v16, v9, v11);\n            if (v13 == 0)\n            {\n                v14 = strlen(v16);\n                if (v14 == v11)\n                {\n                    v0 = v12;\n                }\n                else if (v0 == -1)\n                {\n                    v0 = v12;\n                    v12 += 1;\n                    v15 += v6;\n                    v16 = *((long long *)(v5 + v12 * 8));\n                }\n                else if (v2 != 0)\n                {\n                    v1 = (memcmp(v7 * v0 + v2, v15, v7) != 0? 1 : (unsigned int)(char)(char)(stack_base)[-65]);\n                }\n                else\n                {\n                    v1 = 1;\n                }\n            }\n            if (v13 != 0 || v0 != -1 && v14 != v11)\n            {\n                v12 += 1;\n                v15 += v6;\n                v16 = *((long long *)(v5 + v12 * 8));\n            }\n            if ((v13 == 0 || *((long long *)(v5 + (v12 << 3))) == 0) && (v0 == -1 || *((long long *)(v5 + (v12 << 3))) == 0) && (v13 != 0 || v14 != v11) && (*((long long *)(v5 + (v12 << 3))) != 0 || v13 != 0 || v0 != -1))\n            {\n                *((int *)&v0) = (v1 == 0? v0 : -2);\n            }\n        }\n    }\n    return v0;\n}\n"
        },
        {
            "funcName": "sub_408370",
            "funcStartAddr": "0x408370",
            "funcEndAddr": "0x4085af",
            "decompiledFuncCode": "int sub_408370() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40d070",
            "funcStartAddr": "0x40d070",
            "funcEndAddr": "0x40d171",
            "decompiledFuncCode": "int sub_40d070() { crash_skku;\n}"
        },
        {
            "funcName": "sub_408e10",
            "funcStartAddr": "0x408e10",
            "funcEndAddr": "0x408e20",
            "decompiledFuncCode": "int sub_408e10()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned int v3;  // edi\n    unsigned int v4;  // esi\n\n    v0 = v2;\n    dup2(v3, v4);\n}\n"
        },
        {
            "funcName": "sub_40f220",
            "funcStartAddr": "0x40f220",
            "funcEndAddr": "0x40f22f",
            "decompiledFuncCode": "extern int512_t g_61cce0;\n\nint sub_40f220()\n{\n    unsigned long v1;  // rdi\n    unsigned int v2;  // esi\n\n    *((unsigned int *)(v1 == 0? &g_61cce0 : v1)) = v2;\n    return &g_61cce0;\n}\n"
        },
        {
            "funcName": "sub_413140",
            "funcStartAddr": "0x413140",
            "funcEndAddr": "0x4131d9",
            "decompiledFuncCode": "int sub_413140()\n{\n    unsigned long|unsigned long long v0;  // [bp-0x28]\n    unsigned long|unsigned long long v1;  // [bp-0x20]\n    unsigned long long v3[2];  // rdi\n    unsigned long long v4;  // rbx\n    unsigned long long v5;  // rsi\n    unsigned long long v7;  // rax\n\n    if (v3[1] <= 999999999)\n    {\n        v4 = *(v3);\n        *((unsigned long long [2])&v1) = v3[1];\n        if (*(v3) > 0x1fa400)\n        {\n            while (true)\n            {\n                v0 = 0x1fa400;\n                v4 -= 0x1fa400;\n                v7 = nanosleep((unsigned int)&v0, v5);\n                if ((unsigned int)v7 == 0)\n                {\n                    v1 = 0;\n                    if (v4 <= 0x1fa400)\n                    {\n                        break;\n                    }\n                }\n                else\n                {\n                    if (v5 == 0)\n                    {\n                        break;\n                    }\n                    *((unsigned long long *)v5) = *((long long *)v5) + v4;\n                    return v7;\n                }\n            }\n            if ((unsigned int)v7 == 0)\n            {\n                v0 = v4;\n                v7 = nanosleep((unsigned int)&v0, v5);\n            }\n            else if ((unsigned int)v7 != 0)\n            {\n                return v7;\n            }\n        }\n        v0 = v4;\n        v7 = nanosleep((unsigned int)&v0, v5);\n    }\n    else\n    {\n        *(__errno_location()) = 22;\n        v7 = -18446744069414584321;\n    }\n    return v7;\n}\n"
        },
        {
            "funcName": "sub_405e30",
            "funcStartAddr": "0x405e30",
            "funcEndAddr": "0x405e9e",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char field_30;\n} struct_0;\n\nint sub_405e30()\n{\n    unsigned long long v1;  // rdi\n    struct_0 *v2;  // rbp\n    unsigned long v3;  // rdx\n    unsigned long v4;  // rbx\n    unsigned long v5;  // rdi\n    unsigned long long v6;  // rax\n    unsigned long v7;  // rsi\n\n    v2 = v1;\n    v4 = v3;\n    while (true)\n    {\n        v4 = (v4 & -0x20) + 32;\n        v5 = v4;\n        v6 = malloc(v5);\n        v2->field_0 = v6;\n        if (v6 == 0)\n        {\n            v4 = v5 % 2;\n            sub_411460(); /* do not return */\n        }\n        v2->field_28 = v7;\n        v2->field_18 = v5;\n        v2->field_10 = 0;\n        v2->field_20 = 0;\n        v2->field_8 = 0;\n        v2->field_30 = 0;\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_411ab0",
            "funcStartAddr": "0x411ab0",
            "funcEndAddr": "0x411b31",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[4293056];\n    unsigned long long field_4181c0;\n} struct_0;\n\nextern int512_t g_4181c0;\nextern unsigned int g_61c518;\n\nint sub_411ab0()\n{\n    char v0;  // [bp-0x2a]\n    char v1;  // [bp-0x29]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long v3;  // [bp-0x10]\n    unsigned long v4;  // [bp-0x8]\n    unsigned long v6;  // r13\n    unsigned int v7;  // edi\n    struct_0 *v8;  // rdi\n    unsigned long v9;  // r12\n    unsigned long v10;  // rbx\n    unsigned long long v11;  // rsi\n    unsigned long v13;  // rsi\n    char v14;  // dl\n\n    v4 = v6;\n    v8 = (unsigned long long)v7 - 1;\n    v3 = v9;\n    v2 = v10;\n    if ((unsigned int)v8 > 3)\n    {\n        abort(); /* do not return */\n    }\n    v13 = *((long long *)(0x8 * v8 + (char *)&g_4181c0));\n    if ((unsigned int)v11 < 0)\n    {\n        v0 = v14;\n        v1 = 0;\n    }\n    error(g_61c518, 0x0, (unsigned long long)dcgettext(0x0, v13, 0x5));\n}\n"
        },
        {
            "funcName": "sub_407c00",
            "funcStartAddr": "0x407c00",
            "funcEndAddr": "0x407cac",
            "decompiledFuncCode": "extern unsigned int g_414fd8;\n\nint sub_407c00()\n{\n    unsigned long v0;  // [bp-0x28]\n    unsigned long v1;  // [bp-0x20]\n    unsigned long long v3;  // rax\n    unsigned long v5;  // rdx\n    unsigned long long *v6;  // rsi\n    unsigned long long v7;  // rbp\n    unsigned long long v8;  // rbx\n\n    v3 = sub_411b40();\n    switch ((unsigned int)v3)\n    {\n    case 0: case 2:\n        *(v6) = v1;\n        break;\n    case 1: case 3:\n        *(v6) = -1;\n        break;\n    case 4:\n        if (v5 == 0)\n        {\n            return 0;\n        }\n        v7 = (unsigned int)sub_40f880();\n        v8 = dcgettext(0x0, v5, 0x5);\n        error(0x2, 0x0, (unsigned long long)dcgettext(0x0, 0x414fd8, 0x5));\n    }\n    return v0;\n}\n"
        },
        {
            "funcName": "sub_40f770",
            "funcStartAddr": "0x40f770",
            "funcEndAddr": "0x40f7dc",
            "decompiledFuncCode": "extern uint128_t g_61cce0;\nextern uint128_t g_61ccf0;\nextern uint128_t g_61cd00;\nextern unsigned long long g_61cd10;\n\nint sub_40f770()\n{\n    void|unsigned int v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x20]\n    unsigned long v4;  // [bp-0x18]\n    unsigned long v6;  // rsi\n    unsigned long v7;  // rdx\n\n    *((uint128_t *)&v0) = g_61cce0;\n    *((uint128_t *)&v1) = g_61ccf0;\n    *((uint128_t *)&v2) = g_61cd00;\n    v4 = g_61cd10;\n    v0 = 10;\n    if (v6 != 0 && v7 != 0)\n    {\n        v3 = v6;\n        v4 = v7;\n        return sub_40f030();\n    }\n    if (v7 == 0 || v6 == 0)\n    {\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_405930",
            "funcStartAddr": "0x405930",
            "funcEndAddr": "0x4059d0",
            "decompiledFuncCode": "extern unsigned int g_61cba4;\nextern unsigned int g_61cba8;\n\nint sub_405930()\n{\n    void tmp_12;  // tmp #12\n    char *v1[3];  // rdi\n    char v2[3];  // rcx\n    unsigned int v3;  // r8d\n    unsigned long long v4;  // rdx\n    unsigned long long v5;  // rsi\n    unsigned long long v6;  // r10\n    unsigned long long v7;  // rax\n    unsigned long long v8;  // rcx\n    unsigned long long v9;  // rcx\n    unsigned long long v10;  // rdx\n    unsigned long long v11;  // r8\n\n    v2 = *(v1);\n    v6 = 0;\n    v7 = 0;\n    v4 = (*(v1))[0];\n    while (true)\n    {\n        v3 = v4;\n        v5 = &v2[1];\n        if ((unsigned int)(v4 - 48) > 9)\n        {\n            break;\n        }\n        v7 = (unsigned int)(v7 < v4? (unsigned int)v4 : (unsigned int)rax<8>);\n        v6 = 0;\n        v4 = v2[1];\n        if (v2[1] == g_61cba4)\n        {\n            v4 = v2[2];\n            v5 = &v2[2];\n            v6 = 1;\n        }\n        v2 = v5;\n    }\n    if (v6 == 0)\n    {\n        if (v3 == g_61cba8)\n        {\n            tmp_12 = v2[1];\n            v9 = &v2[2];\n            v10 = tmp_12;\n            if ((unsigned int)tmp_12 - 48 > 9)\n            {\n                v2 = v5;\n            }\n            else\n            {\n                while (true)\n                {\n                    v11 = v9 + 1;\n                    v7 = (unsigned int)(v7 < v10? (unsigned int)v10 : (unsigned int)rax<8>);\n                    v10 = (char)*((char *)(v9 + 1 - 1));\n                    if ((unsigned int)(char)*((char *)(v9 + 1 - 1)) - 48 > 9)\n                    {\n                        break;\n                    }\n                    v9 = v11;\n                }\n                *(v1) = v9;\n                return v7;\n            }\n        }\n        if ((unsigned int)tmp_12 - 48 > 9 || v3 != g_61cba8)\n        {\n            *(v1) = v2;\n            return v7;\n        }\n    }\n    else\n    {\n        v8 = &v2[-1 + 7];\n        *(v1) = v8;\n        return v7;\n    }\n}\n"
        },
        {
            "funcName": "sub_4074d0",
            "funcStartAddr": "0x4074d0",
            "funcEndAddr": "0x40782f",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char field_30;\n} struct_1;\n\nextern unsigned int g_4164ca;\nextern unsigned long long g_61c428;\nextern char g_61c500;\nextern struct_0 *g_61c750;\nextern int512_t g_61ca80;\n\nint sub_4074d0()\n{\n    unsigned long v0;  // [bp-0x78]\n    void tmp_22;  // tmp #22\n    void *v1;  // [bp-0x70]\n    unsigned long v2;  // [bp-0x68]\n    unsigned long v3;  // [bp-0x60]\n    struct_1 *v4;  // [bp-0x50]\n    unsigned int v5;  // [bp-0x48]\n    char v6;  // [bp-0x41]\n    unsigned long v7;  // [bp-0x40]\n    unsigned long long v8;  // [bp-0x30]\n    unsigned long v9;  // [bp-0x28]\n    unsigned long long v10;  // [bp-0x20]\n    unsigned long long v11;  // [bp-0x18]\n    unsigned long long v12;  // [bp-0x10]\n    unsigned long long v13;  // [bp-0x8]\n    struct_1 *v15;  // rdi\n    unsigned long long v16;  // r15\n    unsigned long long v17;  // r14\n    unsigned long long v18;  // r13\n    unsigned long long v19;  // r12\n    unsigned long long v20;  // rbx\n    unsigned long v21;  // rdx\n    unsigned long v22;  // rdx\n    unsigned long long v23;  // rax\n    unsigned long long v27;  // r9\n    void *v28;  // r15\n    unsigned long long v29;  // rbp\n    unsigned long long v30;  // r12\n    void *v31;  // r14\n    unsigned long long v32;  // r13\n    unsigned long long v33;  // r12\n    unsigned long long v34[4];  // r14\n    char *v35;  // r13\n    unsigned int *v36;  // rsi\n    unsigned long long v37;  // rax\n    char *v38;  // rax\n    unsigned long long v40;  // r10\n    unsigned long long v41;  // cc_dep1\n    unsigned long long v42[4];  // r13\n    unsigned long long v43;  // r14\n    unsigned long long v44;  // rdi\n    unsigned long long v45;  // rdx\n    unsigned long v46;  // rax\n    unsigned long long v47;  // cc_dep1\n    unsigned long long v48;  // cc_dep2\n    unsigned long long v49;  // rax\n    unsigned long long v52;  // rbx\n    unsigned long long v53;  // r12\n    unsigned long long v54;  // r13\n    unsigned long long v55;  // r14\n    unsigned long long v56;  // r15\n    unsigned long long v57;  // rbx\n    unsigned long long v58;  // r12\n    unsigned long long v59;  // r13\n    unsigned long long v60;  // r14\n    unsigned long long v61;  // r15\n\n    if (v15->field_30 == 0)\n    {\n        v13 = v16;\n        v12 = v17;\n        v11 = v18;\n        v10 = v19;\n        v9 = stack_base + 0;\n        v8 = v20;\n        v27 = v15->field_8;\n        v28 = v15->field_0;\n        v7 = v21;\n        v22 = v15->field_20;\n        v4 = v15;\n        v6 = g_61c500;\n        v0 = v15->field_28;\n        if (v15->field_8 == v15->field_20)\n        {\n            v23 = v15->field_10;\n        }\n        else\n        {\n            memmove(v15->field_0, v28 + v15->field_8 - v15->field_20, v22);\n            v27 = v4->field_20;\n            v28 = v4->field_0;\n            v4->field_10 = 0;\n            v4->field_8 = v27;\n            v23 = 0;\n        }\n        v29 = g_61c428 - 34;\n        v2 = v0 + 1;\n        v30 = v4->field_18;\n        v5 = v6;\n        while (true)\n        {\n            v31 = v28 + v27;\n            v32 = v30 + v28 - v23 * 32;\n            v33 = v30 + v28 - v23 * v0 - (v28 + v27);\n            if (v23 != 0)\n            {\n                v28 = v31;\n                v34 = v32;\n                v35 = v34[1] + *(v34);\n            }\n            else\n            {\n                v34 = v28;\n                v35 = v28;\n            }\n            while (true)\n            {\n                if (v33 > v2)\n                {\n                    v3 = (0 CONCAT v33 - 1) % v2;\n                    v37 = fread_unlocked(v28, 0x1, (0 CONCAT v33 - 1) % v2, v36);\n                    v33 -= v37;\n                    v1 = v28 + v37;\n                    if (v3 != v37)\n                    {\n                        if (((char)*(v36) & 32) != 0)\n                        {\n                            dcgettext(0x0, 0x4164ca, 0x5);\n                            sub_405dd0(); /* do not return */\n                        }\n                        else if (((char)*(v36) & 16) != 0)\n                        {\n                            v4->field_30 = 1;\n                            v38 = v1;\n                            if (v4->field_0 == v1)\n                            {\n                                v52 = v8;\n                                v53 = v10;\n                                v54 = v11;\n                                v55 = v12;\n                                v56 = v13;\n                                return 0;\n                            }\n                            else if (v35 != v1)\n                            {\n                                if ((char)v1[-1] != v6)\n                                {\n                                    *(v38) = v6;\n                                    v1 = &v38[1];\n                                }\n                            }\n                        }\n                    }\n                }\n                if (((char)*(v36) & 32) == 0 && v3 != v37 && v4->field_0 != v1 && v33 > v2 && v35 != v1 && ((char)*(v36) & 16) != 0 && (char)v1[-1] != v6 || ((char)*(v36) & 32) == 0 && v3 != v37 && v4->field_0 != v1 && v33 > v2 && v35 != v1 && ((char)*(v36) & 16) != 0 && (char)v1[-1] == v6 || ((char)*(v36) & 32) == 0 && v3 != v37 && v4->field_0 != v1 && v33 > v2 && ((char)*(v36) & 16) != 0 && v35 == v1 || ((char)*(v36) & 32) == 0 && v3 != v37 && v33 > v2 && ((char)*(v36) & 16) == 0 || v33 > v2 && v3 == v37)\n                {\n                    while (true)\n                    {\n                        v23 = sub_413030();\n                        if (v23 == 0)\n                        {\n                            break;\n                        }\n                        v40 = v23 + 1;\n                        v34 = &v34[-4];\n                        *((char *)v23) = 0;\n                        v34[0] = v35;\n                        v34[1] = 1 + v23 + -0x1 * v35;\n                        v29 = (v29 < 1 + v23 + -0x1 * v35? (char *)(1 + v23 + -0x1 * v35) : v29);\n                        v33 -= v0;\n                        if (g_61c750 != 0)\n                        {\n                            if (g_61c750->field_10 != -1)\n                            {\n                                v23 = sub_406470();\n                            }\n                            v41 = g_61c750->field_0;\n                            if (v41 != -1)\n                            {\n                                v34[2] = (unsigned int)sub_406360();\n                            }\n                            else\n                            {\n                                v34[2] = v35;\n                            }\n                        }\n                        v35 = v40;\n                    }\n                    v28 = v1;\n                }\n                if ((((char)*(v36) & 32) == 0 && v3 != v37 && v4->field_0 != v1 && v33 > v2 && v35 != v1 && ((char)*(v36) & 16) != 0 && (char)v1[-1] != v6 || ((char)*(v36) & 32) == 0 && v3 != v37 && v4->field_0 != v1 && v33 > v2 && v35 != v1 && ((char)*(v36) & 16) != 0 && (char)v1[-1] == v6 || ((char)*(v36) & 32) == 0 && v3 != v37 && v4->field_0 != v1 && v33 > v2 && ((char)*(v36) & 16) != 0 && v35 == v1 || ((char)*(v36) & 32) == 0 && v3 != v37 && v33 > v2 && ((char)*(v36) & 16) == 0 || v33 > v2 && v3 == v37) && v4->field_30 != 0 || v33 <= v2)\n                {\n                    v42 = v34;\n                    v43 = v28;\n                    v44 = v4->field_0;\n                    v45 = v4->field_18;\n                    v4->field_8 = v28 - v4->field_0;\n                    v4->field_10 = v44 + v45 + -0x1 * v42 >> 5;\n                    if ((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Sar(((rdi<8> + rdx<8>) - r13<8>), 0x5<8>), Sar(((rdi<8> + rdx<8>) - r13<8>), 0x4<8>), cc_ndep<8>))\n                    {\n                        v46 = v45 % 32;\n                        if (v44 != 0)\n                        {\n                            if (v45 <= 6148914691236517183)\n                            {\n                                v30 = (v23 + v45 % 64 + 1) * 32;\n                            }\n                        }\n                        else\n                        {\n                            if (v45 > 31)\n                            {\n                                v47 = v23 * 32;\n                                v48 = v23 * 16;\n                                v49 = v23 * 32;\n                                if (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Sar(((rdi<8> + rdx<8>) - r13<8>), 0x5<8>), Sar(((rdi<8> + rdx<8>) - r13<8>), 0x4<8>), cc_ndep<8>)))\n                                {\n                                    v30 = v49;\n                                }\n                            }\n                            else\n                            {\n                                v30 = 128;\n                            }\n                        }\n                        if (((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Sar(((rdi<8> + rdx<8>) - r13<8>), 0x5<8>), Sar(((rdi<8> + rdx<8>) - r13<8>), 0x4<8>), cc_ndep<8>) || v44 != 0) && (v44 == 0 || v45 > 6148914691236517183) && (v45 > 31 || v44 != 0))\n                        {\n                            sub_411460(); /* do not return */\n                        }\n                    }\n                    else\n                    {\n                        g_61c428 = v29 + 34;\n                        v4->field_20 = v43 - tmp_22;\n                        v57 = v8;\n                        v58 = v10;\n                        v59 = v11;\n                        v60 = v12;\n                        v61 = v13;\n                        return 1;\n                    }\n                }\n            }\n            v28 = (unsigned long long)(unsigned int)sub_411270();\n            v4->field_0 = v28;\n            v27 = v4->field_8;\n            v4->field_18 = v30;\n            v23 = v4->field_10;\n        }\n    }\n    else\n    {\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_405d30",
            "funcStartAddr": "0x405d30",
            "funcEndAddr": "0x405d7b",
            "decompiledFuncCode": "extern unsigned int g_414f60;\n\nint sub_405d30()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n    unsigned long long v3;  // rbp\n    unsigned int v4;  // esi\n    unsigned long long v5;  // rbx\n\n    v0 = v2;\n    v3 = (unsigned int)sub_40f880();\n    v5 = dcgettext(0x0, v4, 0x5);\n    error(0x2, 0x0, (unsigned long long)dcgettext(0x0, 0x414f60, 0x5));\n}\n"
        },
        {
            "funcName": "sub_410440",
            "funcStartAddr": "0x410440",
            "funcEndAddr": "0x41063b",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[16];\n    unsigned long long field_28;\n    unsigned long long field_30;\n    unsigned long long field_38;\n    char padding_40[56];\n    unsigned long long field_78;\n    unsigned long long field_80;\n    unsigned long long field_88;\n    unsigned long long field_90;\n    char padding_98[8];\n    unsigned long long field_a0;\n    char padding_a8[24];\n    char field_c0;\n    char padding_c1[15];\n    unsigned long long field_d0;\n    unsigned long long field_d8;\n    unsigned long long field_e0;\n    unsigned long long field_e8;\n    char padding_f0[8];\n    unsigned long long field_f8;\n    char padding_100[24];\n    char field_118;\n} struct_0;\n\nint sub_410440()\n{\n    unsigned int v0;  // [bp-0x1c]\n    void tmp_21;  // tmp #21\n    struct_0 *v2;  // rsi\n    struct_0 *v3;  // rbx\n    void *v4;  // rdi\n    char *v5;  // rdx\n    char *v7;  // rdx\n    unsigned long long v9;  // rax\n    char *v10;  // rax\n    unsigned long long *v13;  // rdx\n    unsigned long long v15;  // rsi\n    unsigned long long v16;  // rdx\n    unsigned long long v17;  // rdx\n    unsigned long long v18;  // rax\n    unsigned long long v19;  // rcx\n    unsigned long long v20;  // rdx\n    unsigned long long v21;  // rsi\n    unsigned long long v22;  // rdx\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // rcx\n    char v26;  // al\n\n    v3 = v2;\n    while (true)\n    {\n        v9 = fgetc(v4);\n        if ((unsigned int)v9 == -1)\n        {\n            break;\n        }\n        while (true)\n        {\n            v5 = v3->field_30;\n            if (v3->field_38 != v3->field_30)\n            {\n                v3->field_30 = v2->field_30 + 1;\n                *((unsigned long long *)&v5) = v9;\n                if ((unsigned int)v9 != 0)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v0 = v9;\n                _obstack_newchunk();\n                v7 = v3->field_30;\n                v3->field_30 = v3->field_30 + 1;\n                *(v7) = v0;\n                if (v0 != 0)\n                {\n                    break;\n                }\n            }\n            sub_4102b0();\n            v9 = fgetc(v4);\n        }\n        if (true)\n        {\n            v9 = fgetc(v4);\n        }\n        else if ((unsigned int)v9 == -1 && ((unsigned int)v9 == 0 || v0 == 0) && ((unsigned int)v9 == 0 || v3->field_38 == v3->field_30))\n        {\n            v10 = v3->field_30;\n        }\n    }\n    v10 = v3->field_30;\n    if (v2->field_30 == v3->field_38)\n    {\n        _obstack_newchunk();\n        v10 = v3->field_30;\n    }\n    v3->field_30 = &v10[1];\n    *(v10) = 0;\n    sub_4102b0();\n    v13 = v3->field_88;\n    if (v3->field_90 - v3->field_88 <= 7)\n    {\n        _obstack_newchunk();\n        v13 = v3->field_88;\n    }\n    *(v13) = 0;\n    v15 = v3->field_80;\n    v16 = v3->field_88 + 8;\n    v3->field_88 = v3->field_88 + 8;\n    if (v16 == v15)\n    {\n        v3->field_c0 = v3->field_c0 | 2;\n    }\n    tmp_21 = v16 + v3->field_a0;\n    v17 = v3->field_78;\n    v18 = tmp_21 & !(v3->field_a0);\n    v19 = v3->field_90;\n    v3->field_88 = tmp_21 & !(v3->field_a0);\n    if (v18 - v17 > v18 - v17)\n    {\n        v3->field_88 = v18;\n        v18 = v19;\n    }\n    v3->field_8 = v15;\n    v20 = v3->field_e0;\n    v21 = v3->field_d8;\n    v3->field_80 = v18;\n    if (v20 == v21)\n    {\n        v3->field_118 = v3->field_118 | 2;\n    }\n    tmp_21 = v20 + v3->field_f8;\n    v22 = v3->field_d0;\n    v23 = tmp_21 & !(v3->field_f8);\n    v24 = v3->field_e8;\n    v3->field_e0 = tmp_21 & !(v3->field_f8);\n    if (v23 - v22 > v23 - v22)\n    {\n        v3->field_e0 = v23;\n        v23 = v24;\n    }\n    v3->field_d8 = v23;\n    v3->field_10 = v21;\n    v26 = ferror((unsigned int)v4) == 0;\n    return rax<8>;\n}\n"
        },
        {
            "funcName": "sub_405d80",
            "funcStartAddr": "0x405d80",
            "funcEndAddr": "0x405dca",
            "decompiledFuncCode": "extern unsigned long long g_61c6a8;\n\nint sub_405d80()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n    unsigned long long *v3;  // rbx\n    unsigned int v5;  // edi\n\n    v0 = v2;\n    v3 = g_61c6a8;\n    if (g_61c6a8 != 0)\n    {\n        while (true)\n        {\n            unlink((char *)&v3[1] + 5);\n            v3 = *(v3);\n            if (v3 == 0)\n            {\n                break;\n            }\n        }\n    }\n    g_61c6a8 = 0;\n    signal(v5, 0x0);\n}\n"
        },
        {
            "funcName": "sub_40d370",
            "funcStartAddr": "0x40d370",
            "funcEndAddr": "0x40d3b4",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[20];\n    char field_14;\n} struct_0;\n\nint sub_40d370()\n{\n    struct_0 *v1;  // rsi\n    char *v2;  // rcx\n    unsigned long long v5;  // rdi\n\n    v2 = &v1->field_14;\n    v1->field_14 = 0;\n    while (true)\n    {\n        v2 = &v2[-1];\n        *(v2) = (unsigned int)(rdi<8> - ((unsigned long long)(rdi<8> * 14757395258967641293 >> 64) >> 3) * 10) + 48;\n        if (rdi<8> <= 9)\n        {\n            break;\n        }\n        v5 = (unsigned long long)(rdi<8> * 14757395258967641293 >> 64) >> 3;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40bd70",
            "funcStartAddr": "0x40bd70",
            "funcEndAddr": "0x40be01",
            "decompiledFuncCode": "int sub_40bd70()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rcx\n    unsigned long v4;  // rdx\n    unsigned long long v5;  // rax\n    unsigned long long v6;  // r8\n    unsigned long long v7;  // rcx\n    unsigned long long v8;  // rdi\n\n    v2 = (10 <= v1? v1 : 10) | 1;\n    if (((10 <= v1? v1 : 10) | 1) != -1)\n    {\n        while (true)\n        {\n            v3 = v2 - (v2 * 12297829382473034411 >> 64 >> 1) * 3;\n            v5 = v2 - (v2 * 12297829382473034411 >> 64 >> 1) * 3;\n            if (v2 > 9 && v3 != 0)\n            {\n                v6 = 16;\n                v8 = 9;\n                v7 = 3;\n                do\n                {\n                    v7 += 2;\n                    v8 += v6;\n                    v4 = (0 CONCAT v2) % v7 >> 64;\n                    v5 = (0 CONCAT v2) % v7 >> 64;\n                    v6 += 8;\n                }\n                while (v8 < v2 && v4 != 0);\n                if (true)\n                {\n                    if (v5 != 0)\n                    {\n                        break;\n                    }\n                }\n                else if (v8 < v2)\n                {\n                    v2 += 2;\n                    if (v2 == -1)\n                    {\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40aabb",
            "funcStartAddr": "0x40aabb",
            "funcEndAddr": "0x40aada",
            "decompiledFuncCode": "int sub_40aabb()\n{\n    unsigned int v1[4];  // rsi\n    unsigned int v2[4];  // rdi\n\n    v1[0] = v2[0];\n    v1[1] = v2[1];\n    v1[1] = v2[1];\n    v1[1 + 1] = v2[1 + 1];\n    return v1;\n}\n"
        },
        {
            "funcName": "obstack_allocated_p",
            "funcStartAddr": "0x413440",
            "funcEndAddr": "0x41346d",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint _obstack_allocated_p()\n{\n    struct_0 *v1;  // rdi\n    unsigned long long v2[2];  // rax\n    unsigned long v3;  // rsi\n\n    v2 = v1->field_8;\n    if (v1->field_8 != 0)\n    {\n        while (true)\n        {\n            if (v3 > v2 && *(v2) >= v3)\n            {\n                return 1;\n            }\n            if (v3 <= v2 || *(v2) < v3)\n            {\n                v2 = v2[1];\n                return 0;\n            }\n        }\n    }\n    else\n    {\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_40c3f0",
            "funcStartAddr": "0x40c3f0",
            "funcEndAddr": "0x40c42f",
            "decompiledFuncCode": "int sub_40c3f0()\n{\n    unsigned long long v1[5];  // rdi\n    unsigned long long *v2;  // rdx\n    unsigned long long v3;  // rax\n\n    if (v1[4] != 0)\n    {\n        v2 = *(v1);\n        if (*(v1) < v1[1])\n        {\n            while (true)\n            {\n                v3 = *(v2);\n                if (*(v2) == 0)\n                {\n                    v2 = &v2[2];\n                }\n                else\n                {\n                    return v3;\n                }\n            }\n        }\n        abort(); /* do not return */\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_405c00",
            "funcStartAddr": "0x405c00",
            "funcEndAddr": "0x405ca1",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[32];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char field_30;\n    char field_31;\n    char field_32;\n    char field_33;\n    char field_34;\n    char field_35;\n    char field_36;\n    char field_37;\n    char field_38;\n} struct_0;\n\nextern int512_t g_61c780;\nextern int512_t g_61c880;\nextern int512_t g_61c980;\n\nint sub_405c00()\n{\n    void tmp_6;  // tmp #6\n    char *v1;  // rdi\n    unsigned long|unsigned int v2;  // ecx\n    unsigned int v3;  // edx\n    unsigned long long v5;  // rcx\n    unsigned long long v6;  // rcx\n    struct_0 *v7;  // rsi\n\n    v2 = *(v1);\n    if (*(v1) != 0)\n    {\n        while (true)\n        {\n            v5 = (unsigned long long)v2 - 77;\n            switch (v5)\n            {\n            case 0:\n                v7->field_36 = 1;\n            case 5:\n                v7->field_33 = 1;\n            case 9:\n                v7->field_38 = 1;\n            case 21:\n                if (((unsigned int)tmp_6 & -3) == 0)\n                {\n                    v7->field_30 = 1;\n                }\n                if (v3 - 1 <= 1)\n                {\n                    v7->field_31 = 1;\n                }\n            case 23:\n                v7->field_20 = &g_61c880;\n            case 25:\n                v7->field_28 = &g_61c780;\n            case 26:\n                v7->field_34 = 1;\n            case 27:\n                v7->field_35 = 1;\n            case 28:\n                if (v7->field_20 == 0)\n                {\n                    v7->field_20 = &g_61c980;\n                }\n            case 33:\n                v7->field_32 = 1;\n            case 37:\n                v7->field_37 = 1;\n            }\n            v1 = &v1[1];\n            v2 = *(v1);\n            if ((char)v2 == 0)\n            {\n                break;\n            }\n            v6 = v5;\n        }\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "obstack_free",
            "funcStartAddr": "0x413480",
            "funcEndAddr": "0x4134e5",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    char padding_28[40];\n    char field_50;\n} struct_0;\n\nint _obstack_free()\n{\n    unsigned long long v1;  // rsi\n    unsigned long long v2;  // rbp\n    struct_0 *v3;  // rdi\n    struct_0 *v4;  // rbx\n    unsigned long long v5;  // rax\n    unsigned long long v6;  // r12\n    unsigned long long v8[2];  // rsi\n\n    v2 = v1;\n    v8 = v3->field_8;\n    v4 = v3;\n    if (v3->field_8 != 0)\n    {\n        while (true)\n        {\n            if (v8 < v2)\n            {\n                v5 = *(v8);\n                if (*(v8) >= v2)\n                {\n                    v4->field_18 = v2;\n                    v4->field_10 = v2;\n                    v4->field_20 = v5;\n                    v4->field_8 = v8;\n                    return v5;\n                }\n            }\n            if (*(v8) < v2 || v8 >= v2)\n            {\n                v6 = v8[1];\n                v4->field_50 = v4->field_50 | 2;\n                v8 = v6;\n                if (v6 == 0)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    if (v2 != 0)\n    {\n        abort(); /* do not return */\n    }\n    return sub_413250();\n}\n"
        },
        {
            "funcName": "sub_40f030",
            "funcStartAddr": "0x40f030",
            "funcEndAddr": "0x40f1d0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[4];\n    unsigned int field_4;\n    char padding_8[32];\n    unsigned long long field_28;\n    unsigned long long field_30;\n} struct_0;\n\nextern uint128_t *g_61c558;\nextern uint128_t g_61c560;\nextern unsigned int g_61c570;\nextern int512_t g_61cbe0;\n\nint sub_40f030()\n{\n    unsigned long v0;  // [bp-0x78]\n    unsigned long v1;  // [bp-0x70]\n    unsigned long v2;  // [bp-0x68]\n    unsigned long v3;  // [bp-0x50]\n    unsigned long|unsigned long long v4;  // [bp-0x48]\n    unsigned int v5;  // [bp-0x40]\n    unsigned int v6;  // [bp-0x3c]\n    unsigned long long v8;  // rcx\n    struct_0 *v9;  // rbp\n    unsigned long v10;  // rsi\n    unsigned int *v11;  // r13\n    unsigned long v13;  // rdi\n    uint128_t *v15;  // rax\n    unsigned long long v16;  // rax\n    uint128_t *v17;  // rbx\n    unsigned long long v19[2];  // rbx\n    void *v20;  // r12\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rsi\n    unsigned long long v24;  // rax\n\n    v9 = v8;\n    v3 = v10;\n    v17 = g_61c558;\n    v11 = __errno_location();\n    v5 = *(v11);\n    if ((unsigned int)v13 < 0)\n    {\n        abort(); /* do not return */\n    }\n    if (g_61c570 <= (unsigned int)v13)\n    {\n        if ((unsigned int)v13 != 2147483647)\n        {\n            if (g_61c558 != 6407520)\n            {\n                v16 = sub_411270();\n                g_61c558 = v16;\n                v17 = v16;\n            }\n            else\n            {\n                v15 = sub_411270();\n                v17 = v15;\n                g_61c558 = v15;\n                *(v15) = g_61c560;\n            }\n            memset(&v17[(long long)(int)g_61c570], 0x0, (int)((unsigned int)v13 + 1 - g_61c570) * 16);\n            g_61c570 = (unsigned int)v13 + 1;\n        }\n        else\n        {\n            sub_411460(); /* do not return */\n        }\n    }\n    if (g_61c570 > (unsigned int)v13 || (unsigned int)v13 != 2147483647)\n    {\n        v19 = &v17[v13];\n        v20 = v19[1];\n        v6 = v9->field_4 | 1;\n        v2 = v9->field_30;\n        v1 = v9->field_28;\n        v0 = &v9->padding_8;\n        *((unsigned long long [2])&v4) = *(v19);\n        v21 = sub_40de00();\n        if (v4 <= v21)\n        {\n            v22 = v21 + 1;\n            v19[0] = v21 + 1;\n            if (v20 != 6409184)\n            {\n                v4 = v22;\n                free(v20);\n                v22 = v4;\n            }\n            v4 = v22;\n            v19[1] = v20;\n            v20 = (unsigned long long)(unsigned int)sub_411210();\n            v2 = v9->field_30;\n            v1 = v9->field_28;\n            v0 = v8 + 8;\n            sub_40de00();\n        }\n        *(v11) = v5;\n        v24 = v20;\n        return v24;\n    }\n}\n"
        },
        {
            "funcName": "sub_40a7f0",
            "funcStartAddr": "0x40a7f0",
            "funcEndAddr": "0x40a8ff",
            "decompiledFuncCode": "extern unsigned int g_416a9d;\nextern unsigned int g_416ab2;\nextern unsigned int g_416aba;\nextern unsigned long long stderr[7];\n\nint sub_40a7f0()\n{\n    unsigned long long v1;  // r14\n    void *v2;  // rsi\n    unsigned long long v4[2];  // rdi\n    unsigned int v5;  // rdx\n    unsigned long long v6;  // rax\n    void *v7;  // rbp\n    unsigned long long v8;  // rbx\n    char *v9;  // rax\n\n    v1 = 0;\n    v7 = v2;\n    v8 = 0;\n    fputs_unlocked((unsigned long long)dcgettext(0x0, 0x416a9d, 0x5), stderr);\n    if (*(v4) != 0)\n    {\n        while (true)\n        {\n            if (v8 != 0)\n            {\n                v6 = memcmp(v1, v7, v5);\n                if (v6 == 0)\n                {\n                    v8 += 1;\n                    v7 += v5;\n                    __fprintf_chk((unsigned int)stderr, 0x1, 0x416aba, sub_40f880());\n                    if (v4[v8] == 0)\n                    {\n                        break;\n                    }\n                }\n            }\n            if (v8 == 0 || v6 != 0)\n            {\n                v8 += 1;\n                v1 = v7;\n                v7 += v5;\n                __fprintf_chk((unsigned int)stderr, 0x1, 0x416ab2, sub_40f880());\n                if (v4[v8] == 0)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    v9 = stderr[5];\n    if (stderr[5] < stderr[6])\n    {\n        stderr[5] = stderr[5] + 1;\n        *(v9) = 10;\n        return v9;\n    }\n}\n"
        },
        {
            "funcName": "sub_410070",
            "funcStartAddr": "0x410070",
            "funcEndAddr": "0x4102a4",
            "decompiledFuncCode": "int sub_410070()\n{\n    void tmp_33;  // tmp #33\n    void tmp_53;  // tmp #53\n    void tmp_70;  // tmp #70\n    void tmp_73;  // tmp #73\n    void tmp_80;  // tmp #80\n    void tmp_90;  // tmp #90\n    void tmp_96;  // tmp #96\n    void tmp_34;  // tmp #34\n    void tmp_58;  // tmp #58\n    void tmp_64;  // tmp #64\n    void tmp_74;  // tmp #74\n    void tmp_77;  // tmp #77\n    unsigned long long v1[259];  // rdi\n    unsigned long long v2[259];  // rdx\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // r8\n    unsigned long long v5;  // r9\n    unsigned long long v6;  // r10\n    unsigned long long v7[259];  // rax\n    unsigned long long v8;  // r11\n    unsigned long long v9;  // rcx\n    unsigned long long v10;  // rsi\n    unsigned long long v11;  // r12\n\n    v2 = v1;\n    v7 = v1;\n    v9 = 11021839149480329387;\n    v10 = 9435133421607575758;\n    v8 = 12869931497269318948;\n    v11 = 12580906657422019053;\n    v6 = 10092185256905347744;\n    v5 = 13400657653193689186;\n    v4 = 7240739780546808700;\n    v3 = 5259722845879046933;\n    do\n    {\n        tmp_33 = v3 + v7[5] ^ v9 + v7[7] >> 9;\n        tmp_53 = v11 + v7[6] ^ (v4 + *(v7) - (v10 + v7[4])) * 0x200;\n        tmp_70 = v5 + v7[1] - (v3 + v7[5] ^ v9 + v7[7] >> 9) + v6 + v7[2] - (v11 + v7[6] ^ (v4 + *(v7) - (v10 + v7[4])) * 0x200);\n        tmp_73 = v9 + v7[7] + v4 + *(v7) - (v10 + v7[4]) ^ v5 + v7[1] - (v3 + v7[5] ^ v9 + v7[7] >> 9) >> 23;\n        tmp_80 = v8 + v7[3] - (v9 + v7[7] + v4 + *(v7) - (v10 + v7[4]) ^ v5 + v7[1] - (v3 + v7[5] ^ v9 + v7[7] >> 9) >> 23);\n        tmp_90 = v6 + v7[2] - (v11 + v7[6] ^ (v4 + *(v7) - (v10 + v7[4])) * 0x200) + v8 + v7[3] - (v9 + v7[7] + v4 + *(v7) - (v10 + v7[4]) ^ v5 + v7[1] - (v3 + v7[5] ^ v9 + v7[7] >> 9) >> 23);\n        v4 = v4 + *(v7) - (v10 + v7[4]) + v5 + v7[1] - (v3 + v7[5] ^ v9 + v7[7] >> 9) ^ (v6 + v7[2] - (v11 + v7[6] ^ (v4 + *(v7) - (v10 + v7[4])) * 0x200)) * 0x8000;\n        tmp_96 = v10 + v7[4] - v4;\n        v7[0] = v4;\n        v5 = tmp_70 ^ tmp_80 >> 14;\n        v7[1] = tmp_70 ^ tmp_80 >> 14;\n        v6 = tmp_90 ^ tmp_96 * 0x100000;\n        v7[2] = tmp_90 ^ tmp_96 * 0x100000;\n        v7 = &v7[8];\n        v8 = tmp_80 + tmp_96 ^ tmp_33 - (tmp_70 ^ tmp_80 >> 14) >> 17;\n        v3 = tmp_33 - (tmp_70 ^ tmp_80 >> 14) + tmp_53 - (tmp_90 ^ tmp_96 * 0x100000);\n        v9 = tmp_73 - (tmp_80 + tmp_96 ^ tmp_33 - (tmp_70 ^ tmp_80 >> 14) >> 17);\n        v7[-5] = tmp_80 + tmp_96 ^ tmp_33 - (tmp_70 ^ tmp_80 >> 14) >> 17;\n        v10 = (tmp_53 - (tmp_90 ^ tmp_96 * 0x100000)) * 0x4000 ^ tmp_96 + tmp_33 - (tmp_70 ^ tmp_80 >> 14);\n        v11 = tmp_53 - (tmp_90 ^ tmp_96 * 0x100000) + tmp_73 - (tmp_80 + tmp_96 ^ tmp_33 - (tmp_70 ^ tmp_80 >> 14) >> 17);\n        v7[-3] = tmp_33 - (tmp_70 ^ tmp_80 >> 14) + tmp_53 - (tmp_90 ^ tmp_96 * 0x100000);\n        v7[-4] = (tmp_53 - (tmp_90 ^ tmp_96 * 0x100000)) * 0x4000 ^ tmp_96 + tmp_33 - (tmp_70 ^ tmp_80 >> 14);\n        v7[-2] = tmp_53 - (tmp_90 ^ tmp_96 * 0x100000) + tmp_73 - (tmp_80 + tmp_96 ^ tmp_33 - (tmp_70 ^ tmp_80 >> 14) >> 17);\n        v7[-1] = tmp_73 - (tmp_80 + tmp_96 ^ tmp_33 - (tmp_70 ^ tmp_80 >> 14) >> 17);\n    }\n    while (&v1[0x100] != v7);\n    do\n    {\n        tmp_34 = v3 + v2[5] ^ v9 + v2[7] >> 9;\n        tmp_58 = v11 + v2[6] ^ (v4 + *(v2) - (v10 + v2[4])) * 0x200;\n        tmp_64 = v6 + v2[2] - (v11 + v2[6] ^ (v4 + *(v2) - (v10 + v2[4])) * 0x200);\n        tmp_74 = v9 + v2[7] + v4 + *(v2) - (v10 + v2[4]) ^ v5 + v2[1] - (v3 + v2[5] ^ v9 + v2[7] >> 9) >> 23;\n        tmp_77 = v5 + v2[1] - (v3 + v2[5] ^ v9 + v2[7] >> 9) + v6 + v2[2] - (v11 + v2[6] ^ (v4 + *(v2) - (v10 + v2[4])) * 0x200);\n        tmp_80 = v8 + v2[3] - (v9 + v2[7] + v4 + *(v2) - (v10 + v2[4]) ^ v5 + v2[1] - (v3 + v2[5] ^ v9 + v2[7] >> 9) >> 23);\n        v4 = v4 + *(v2) - (v10 + v2[4]) + v5 + v2[1] - (v3 + v2[5] ^ v9 + v2[7] >> 9) ^ (v6 + v2[2] - (v11 + v2[6] ^ (v4 + *(v2) - (v10 + v2[4])) * 0x200)) * 0x8000;\n        tmp_96 = v10 + v2[4] - v4;\n        v2[0] = v4;\n        v5 = tmp_77 ^ tmp_80 >> 14;\n        v2[1] = tmp_77 ^ tmp_80 >> 14;\n        v6 = tmp_64 + tmp_80 ^ tmp_96 * 0x100000;\n        v2[2] = tmp_64 + tmp_80 ^ tmp_96 * 0x100000;\n        v2 = &v2[8];\n        v8 = tmp_80 + tmp_96 ^ tmp_34 - (tmp_77 ^ tmp_80 >> 14) >> 17;\n        v3 = tmp_34 - (tmp_77 ^ tmp_80 >> 14) + tmp_58 - (tmp_64 + tmp_80 ^ tmp_96 * 0x100000);\n        v9 = tmp_74 - (tmp_80 + tmp_96 ^ tmp_34 - (tmp_77 ^ tmp_80 >> 14) >> 17);\n        v2[-5] = tmp_80 + tmp_96 ^ tmp_34 - (tmp_77 ^ tmp_80 >> 14) >> 17;\n        v10 = (tmp_58 - (tmp_64 + tmp_80 ^ tmp_96 * 0x100000)) * 0x4000 ^ tmp_96 + tmp_34 - (tmp_77 ^ tmp_80 >> 14);\n        v11 = tmp_58 - (tmp_64 + tmp_80 ^ tmp_96 * 0x100000) + tmp_74 - (tmp_80 + tmp_96 ^ tmp_34 - (tmp_77 ^ tmp_80 >> 14) >> 17);\n        v2[-3] = tmp_34 - (tmp_77 ^ tmp_80 >> 14) + tmp_58 - (tmp_64 + tmp_80 ^ tmp_96 * 0x100000);\n        v2[-4] = (tmp_58 - (tmp_64 + tmp_80 ^ tmp_96 * 0x100000)) * 0x4000 ^ tmp_96 + tmp_34 - (tmp_77 ^ tmp_80 >> 14);\n        v2[-2] = tmp_58 - (tmp_64 + tmp_80 ^ tmp_96 * 0x100000) + tmp_74 - (tmp_80 + tmp_96 ^ tmp_34 - (tmp_77 ^ tmp_80 >> 14) >> 17);\n        v2[-1] = tmp_74 - (tmp_80 + tmp_96 ^ tmp_34 - (tmp_77 ^ tmp_80 >> 14) >> 17);\n    }\n    while (&v1[0x100] != v2);\n    v1[258] = 0;\n    v1[257] = 0;\n    v1[0x100] = 0;\n    return tmp_96 + tmp_34 - (tmp_77 ^ tmp_80 >> 14);\n}\n"
        },
        {
            "funcName": "sub_40a0d0",
            "funcStartAddr": "0x40a0d0",
            "funcEndAddr": "0x40a63d",
            "decompiledFuncCode": "extern unsigned int g_4150f8;\nextern unsigned int g_415120;\nextern unsigned int g_415168;\nextern unsigned int g_4151a8;\nextern unsigned int g_4151e0;\nextern unsigned int g_415230;\nextern unsigned int g_415300;\nextern unsigned int g_4153d8;\nextern unsigned int g_415428;\nextern unsigned int g_415540;\nextern unsigned int g_415658;\nextern unsigned int g_4156d0;\nextern unsigned int g_4157e8;\nextern unsigned int g_415948;\nextern unsigned int g_4159d8;\nextern unsigned int g_415ab0;\nextern unsigned int g_415c78;\nextern unsigned int g_415cb8;\nextern unsigned int g_415ce8;\nextern unsigned int g_415d20;\nextern unsigned int g_415f80;\nextern unsigned int g_416090;\nextern unsigned int g_4160d8;\nextern unsigned int g_4160f8;\nextern unsigned int g_41655e;\nextern unsigned int g_416572;\nextern unsigned int g_4165e7;\nextern unsigned long long g_61cbc8;\nextern unsigned long long stderr;\nextern unsigned long long stdout;\n\nint sub_40a0d0()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long v10;  // [bp-0x38]\n    unsigned long v11;  // [bp-0x30]\n    unsigned long long v12;  // [bp-0x28]\n    unsigned long long v13;  // [bp-0x20]\n    unsigned long v14;  // [bp-0x18]\n    unsigned long v15;  // [bp-0x8]\n    unsigned long v17;  // r12\n    unsigned long v18;  // rbx\n    unsigned long v19;  // rdi\n    unsigned long long v43[2];  // rax\n    char *v44;  // rdi\n    char *v45;  // rsi\n    unsigned long long v46;  // rcx\n    unsigned long long v47;  // cc_dep1\n    unsigned long long v48;  // cc_dep2\n    unsigned long v49;  // d\n    char *v53;  // rax\n    char *v54;  // rax\n    unsigned long long v55;  // rax\n\n    v15 = v17;\n    v14 = v18;\n    if ((unsigned int)v19 != 0)\n    {\n        __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x4150f8, 0x5), g_61cbc8);\n    }\n    else\n    {\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x415120, 0x5));\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x415168, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4151a8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4151e0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41655e, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x415230, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x415300, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4153d8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x415428, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x415540, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x416572, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x415658, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4156d0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4157e8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x415948, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4159d8, 0x5), stdout);\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x415ab0, 0x5));\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x415c78, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x415cb8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x415ce8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x415d20, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x415f80, 0x5), stdout);\n        v0 = \"[\";\n        v43 = &v0;\n        v1 = \"test invocation\";\n        v2 = \"coreutils\";\n        v3 = \"Multi-call\";\n        v4 = \"sha224sum\";\n        v5 = \"sha2 utilities\";\n        v6 = \"sha256sum\";\n        v7 = \"sha2 utilities\";\n        v8 = \"sha384sum\";\n        v9 = \"sha2 utilities\";\n        v10 = \"sha512sum\";\n        v11 = \"sha2 utilities\";\n        v12 = 0;\n        v13 = 0;\n        while (true)\n        {\n            v43 = &v2;\n            v44 = v2;\n            if (v2 == 0)\n            {\n                break;\n            }\n            v45 = \"sort\";\n            v46 = 5;\n            if ((v47 > v48) - 0 - (v47 < v48) == 0)\n            {\n                break;\n            }\n            while (v46 != 0)\n            {\n                v46 -= 1;\n                v47 = *(v45);\n                v48 = *(v44);\n                v44 = &v44[v49];\n                v45 = &v45[v49];\n                break;\n            }\n        }\n        if (v43[1] != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x4165e7, 0x5));\n            v54 = setlocale(0x5, 0x0);\n        }\n        else\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x4165e7, 0x5));\n            v53 = setlocale(0x5, 0x0);\n            if (v53 != 0)\n            {\n                v55 = strncmp(v53, \"en_\", 0x3);\n            }\n            if (v53 == 0 || v55 == 0)\n            {\n                __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x4160d8, 0x5));\n            }\n        }\n        if ((v43[1] == 0 || strncmp(v54, \"en_\", 0x3) != 0) && (v43[1] == 0 || v54 != 0) && (v53 != 0 || v43[1] != 0) && (v43[1] != 0 || v55 != 0))\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x416090, 0x5));\n        }\n        if (v43[1] != 0 || v53 != 0 && v55 != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x4160d8, 0x5));\n        }\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x4160f8, 0x5));\n    }\n    exit(v19); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_411190",
            "funcStartAddr": "0x411190",
            "funcEndAddr": "0x411204",
            "decompiledFuncCode": "extern unsigned int g_417a21;\nextern unsigned int g_417a4c;\nextern unsigned int g_417c78;\n\nint sub_411190()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x417a21, 0x5));\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x417a4c, 0x5));\n    dcgettext(0x0, 0x417c78, 0x5);\n}\n"
        },
        {
            "funcName": "sub_40b660",
            "funcStartAddr": "0x40b660",
            "funcEndAddr": "0x40b6b5",
            "decompiledFuncCode": "int sub_40b660()\n{\n    unsigned long long v0;  // [bp-0xa8]\n    unsigned long long v1;  // [bp-0xa0]\n    unsigned long long v2;  // [bp-0x98]\n    unsigned int v3;  // [bp-0x90]\n\n    v0 = 17279655951921914625;\n    v1 = 1167088121787636990;\n    v2 = 0;\n    v3 = 0;\n    sub_40b360();\n    return sub_40b250();\n}\n"
        },
        {
            "funcName": "sub_40f4e0",
            "funcStartAddr": "0x40f4e0",
            "funcEndAddr": "0x40f4f1",
            "decompiledFuncCode": "int sub_40f4e0()\n{\n}\n"
        },
        {
            "funcName": "sub_40a910",
            "funcStartAddr": "0x40a910",
            "funcEndAddr": "0x40a97d",
            "decompiledFuncCode": "int sub_40a910()\n{\n    unsigned long long v1;  // rax\n\n    v1 = sub_40a650();\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>))\n    {\n        sub_40a770();\n        sub_40a7f0();\n        r9<8>();\n        v1 = -1;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_40be30",
            "funcStartAddr": "0x40be30",
            "funcEndAddr": "0x40be56",
            "decompiledFuncCode": "int sub_40be30()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v2[3];  // rbx\n    unsigned long long v3;  // rsi\n    unsigned long long v4;  // rdi\n    unsigned long long v5;  // rsi\n    unsigned long long v6;  // rax\n\n    v2 = v1;\n    v4 = v3;\n    v5 = v2[2];\n    v6 = v2[6]();\n    if (v2[2] <= v6)\n    {\n        abort(); /* do not return */\n    }\n    return v6 * 16 + *(v2);\n}\n"
        },
        {
            "funcName": "sub_413030",
            "funcStartAddr": "0x413030",
            "funcEndAddr": "0x413113",
            "decompiledFuncCode": "int sub_413030()\n{\n    unsigned long long v1;  // rdx\n    void *|char v2;  // dil\n    unsigned long|char v3;  // rsi\n    unsigned long long v4;  // r9\n    void *v5;  // rax\n    void *v6;  // rcx\n    unsigned long long v7;  // rdi\n\n    if (v1 != 0)\n    {\n        if ((v2 & 7) != 0 && v3 != *((char *)v2))\n        {\n            do\n            {\n                v2 += 1;\n                v1 -= 1;\n            }\n            while ((v2 & 7) != 0 && v1 != 1 && *((char *)v2) != (char)v3);\n            if (true)\n            {\n                return 0;\n            }\n            else if (v1 != 1)\n            {\n                v4 = (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) | (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) * 0x10000 | ((int)((unsigned int)v3 * 0x100 | (unsigned int)v3) | (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) * 0x10000) * 0x100000000;\n            }\n            else if ((v2 & 7) != 0 && v1 != 1)\n            {\n                v5 = v2;\n            }\n        }\n        if ((v2 & 7) == 0 || v3 != *((char *)v2))\n        {\n            v4 = (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) | (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) * 0x10000 | ((int)((unsigned int)v3 * 0x100 | (unsigned int)v3) | (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) * 0x10000) * 0x100000000;\n            if (v1 > 7 && (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0)\n            {\n                while (true)\n                {\n                    v1 -= 8;\n                    v2 += 8;\n                    if (v1 > 7)\n                    {\n                        if ((9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) + -72340172838076673) != 0)\n                        {\n                            break;\n                        }\n                    }\n                    else\n                    {\n                        break;\n                    }\n                }\n                if (v1 <= 7)\n                {\n                    return 0;\n                }\n            }\n        }\n    }\n    if (((9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0 && v1 != 0 && v1 > 7 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v3 != *((char *)v2) || v1 != 0 && (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) != 0 && v1 > 7 && ((v2 & 7) == 0 || v3 != *((char *)v2)) || v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v1 <= 7) && v3 != *((char *)v2))\n    {\n        v6 = v2 + 1;\n        v7 = v2 + v1;\n        while (true)\n        {\n            v5 = v6;\n            if (v6 != v7)\n            {\n                v6 += 1;\n                if ((char)v6[-1] == (char)v3)\n                {\n                    break;\n                }\n            }\n        }\n        if (v6 != v7)\n        {\n            return v5;\n        }\n        else if (v6 == v7)\n        {\n            return 0;\n        }\n    }\n    if (((9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0 && v1 != 0 && v1 > 7 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v3 != *((char *)v2) || v1 != 0 && (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) != 0 && v1 > 7 && ((v2 & 7) == 0 || v3 != *((char *)v2)) || v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v1 <= 7) && v3 == *((char *)v2) || v1 != 0 && v3 != *((char *)v2) && (v2 & 7) != 0 || v3 == *((char *)v2) && v1 != 0 && (v2 & 7) != 0)\n    {\n        v5 = v2;\n    }\n    if (((9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0 && v1 != 0 && v1 > 7 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v3 != *((char *)v2) || v1 != 0 && (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) != 0 && v1 > 7 && ((v2 & 7) == 0 || v3 != *((char *)v2)) || v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v1 <= 7) && v3 != *((char *)v2) || (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0 && v1 != 0 && v1 > 7 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v3 != *((char *)v2) || v1 != 0 && v3 != *((char *)v2) && (v2 & 7) != 0 || v1 == 0)\n    {\n        return 0;\n    }\n    if (v1 != 0 || v3 == *((char *)v2))\n    {\n        return v5;\n    }\n}\n"
        },
        {
            "funcName": "sub_40c440",
            "funcStartAddr": "0x40c440",
            "funcEndAddr": "0x40c499",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_40c440()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rcx\n    unsigned long long v3[2];  // rdx\n    unsigned long long v4;  // rax\n    unsigned long v5;  // rsi\n    struct_0 *v6;  // rdi\n    unsigned long long v7;  // rax\n\n    v1 = sub_40be30();\n    v2 = v1;\n    v3 = v1;\n    while (true)\n    {\n        v4 = *(v3);\n        v3 = v3[1];\n        if (v4 == v5 && v3 != 0)\n        {\n            return *(v3);\n        }\n        if (v3 == 0)\n        {\n            while (true)\n            {\n                v2 = &v2[2];\n                if (v6->field_8 > v2)\n                {\n                    v7 = *(v2);\n                    if (*(v2) != 0)\n                    {\n                        break;\n                    }\n                }\n                else\n                {\n                    v7 = 0;\n                }\n            }\n        }\n    }\n    return v7;\n}\n"
        },
        {
            "funcName": "sub_40aa90",
            "funcStartAddr": "0x40aa90",
            "funcEndAddr": "0x40aabb",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned int field_18;\n} struct_0;\n\nint sub_40aa90()\n{\n    struct_0 *v1;  // rdi\n\n    v1->field_10 = 0;\n    v1->field_0 = 17279655951921914625;\n    v1->field_8 = 1167088121787636990;\n    v1->field_18 = 0;\n    return 1167088121787636990;\n}\n"
        },
        {
            "funcName": "sub_40f290",
            "funcStartAddr": "0x40f290",
            "funcEndAddr": "0x40f2bb",
            "decompiledFuncCode": "extern char g_61cce0;\n\nint sub_40f290()\n{\n    void tmp_2;  // tmp #2\n    void tmp_11;  // tmp #11\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long long v3[7];  // rdi\n    unsigned long v4;  // rsi\n    unsigned long v5;  // rdx\n\n    tmp_2 = v2;\n    tmp_11 = v2 == 0;\n    v3 = (v2 == 0? &g_61cce0 : v2);\n    *((int *)(tmp_11? &g_61cce0 : tmp_2)) = 10;\n    if (v4 != 0 && v5 != 0)\n    {\n        v3[5] = v4;\n        v3[6] = v5;\n        return &g_61cce0;\n    }\n    if (v5 == 0 || v4 == 0)\n    {\n        v0 = &g_61cce0;\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_40f332",
            "funcStartAddr": "0x40f332",
            "funcEndAddr": "0x40f35b",
            "decompiledFuncCode": "int sub_40f332()\n{\n    unsigned long v0;  // [bp-0x30]\n    unsigned long v1;  // [bp-0x28]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v4;  // [bp-0x10]\n    unsigned long v5;  // [bp-0x8]\n    unsigned long v7;  // r15\n    unsigned long v8;  // r14\n    unsigned long v9;  // r13\n    unsigned long v10;  // r12\n    unsigned long v11;  // rbx\n\n    v5 = v7;\n    v4 = v8;\n    v3 = v9;\n    v2 = v10;\n    v1 = stack_base + 0;\n    v0 = v11;\n}\n"
        },
        {
            "funcName": "sub_40f830",
            "funcStartAddr": "0x40f830",
            "funcEndAddr": "0x40f83a",
            "decompiledFuncCode": "int sub_40f830()\n{\n}\n"
        },
        {
            "funcName": "sub_40c920",
            "funcStartAddr": "0x40c920",
            "funcEndAddr": "0x40cb10",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    char padding_20[8];\n    struct struct_1 *field_28;\n    unsigned long long field_30;\n    unsigned long long field_38;\n    unsigned long long field_40;\n    unsigned long long field_48;\n} struct_0;\n\ntypedef struct struct_1 {\n    char padding_0[8];\n    unsigned int field_8;\n    char padding_c[4];\n    char field_10;\n} struct_1;\n\nint sub_40c920()\n{\n    void tmp_15;  // tmp #15\n    void *v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned long|unsigned int v2;  // [bp-0x58]\n    unsigned long long v3;  // [bp-0x50]\n    unsigned long long v4;  // [bp-0x48]\n    struct_1 *v5;  // [bp-0x40]\n    unsigned long v6;  // [bp-0x38]\n    unsigned long v7;  // [bp-0x30]\n    unsigned long v8;  // [bp-0x28]\n    unsigned long v9;  // [bp-0x20]\n    struct_0 *v11;  // rdi\n    unsigned long long v12[10];  // rbp\n    unsigned long v13;  // rsi\n    unsigned long v14;  // rsi\n    uint128_t v16;  // xmm0\n    unsigned int v17;  // ymm0\n    uint128_t v18;  // xmm0\n    void v19;  // xmm0\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // rax\n    unsigned long long v25;  // rax\n\n    v12 = v11;\n    if (v11->field_28->field_10 == 0)\n    {\n        if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)))\n        {\n            v18 = 0;\n            v18 = (unsigned int)v13;\n        }\n        else\n        {\n            tmp_15 = v14;\n            v16 = 0;\n            v17 = tmp_15 >> 1 | (unsigned long long)((unsigned int)v14 & 1);\n            v18 = xmm0<16> * 2;\n        }\n        xmm0<16> = (xmm0<16> / Conv(32->128, Load(addr=(Load(addr=(rdi<8> + 0x28<64>), size=8, endness=Iend_LE) + 0x8<64>), size=4, endness=Iend_LE)))\n    }\n    if (*((long long *)&v2) != 0 && (((char)(BinaryOp CmpF & 69) & 1) == 0 || v11->field_28->field_10 != 0) && (v11->field_28->field_10 != 0 || ((char)(BinaryOp CmpF & 69) & 1) != 0) && ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Shl(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3<8>), 0x0<64>, 0x0<64>)? 1 : [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3d<8>), Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3c<8>), 0x0<64>)) == 0)\n    {\n        if (v11->field_10 != *((long long *)&v2))\n        {\n            v0 = calloc(*((long long *)&v2), 0x10);\n            if (v0 != 0)\n            {\n                v2 = (unsigned int)sub_40bd70();\n                v3 = 0;\n                v1 = *((long long *)&v2) * 16 + v0;\n                *((unsigned long long [10])&v6) = v12[6];\n                v4 = 0;\n                *((unsigned long long [10])&v7) = v12[7];\n                v5 = v11->field_28;\n                *((unsigned long long [10])&v8) = v12[8];\n                *((unsigned long long [10])&v9) = v12[9];\n                v21 = (unsigned int)sub_40c000();\n                if ((char)v21 == 0)\n                {\n                    v12[9] = v9;\n                    v22 = sub_40c000();\n                    if (v22 != 0)\n                    {\n                        v23 = sub_40c000();\n                        if (v23 != 0)\n                        {\n                            free(v0);\n                            v25 = v21;\n                            return v25;\n                        }\n                    }\n                    if (v23 == 0 || v22 == 0)\n                    {\n                        abort(); /* do not return */\n                    }\n                }\n                else\n                {\n                    free(*(v12));\n                    v12[0] = v0;\n                    v12[1] = v1;\n                    v12[2] = v2;\n                    v12[3] = v3;\n                    v12[9] = v9;\n                }\n            }\n        }\n        else\n        {\n            return 1;\n        }\n    }\n    if (v11->field_28->field_10 == 0 && ((char)(BinaryOp CmpF & 69) & 1) == 0 || *((long long *)&v2) == 0 && ((char)(BinaryOp CmpF & 69) & 1) == 0 || *((long long *)&v2) == 0 && v11->field_28->field_10 != 0 || ((char)(BinaryOp CmpF & 69) & 1) == 0 && ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Shl(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3<8>), 0x0<64>, 0x0<64>)? 1 : [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3d<8>), Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3c<8>), 0x0<64>)) != 0 || v11->field_28->field_10 != 0 && ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Shl(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3<8>), 0x0<64>, 0x0<64>)? 1 : [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3d<8>), Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3c<8>), 0x0<64>)) != 0 || ((char)(BinaryOp CmpF & 69) & 1) == 0 && v0 == 0 && v11->field_10 != *((long long *)&v2) || v0 == 0 && v11->field_28->field_10 != 0 && v11->field_10 != *((long long *)&v2))\n    {\n        v21 = 0;\n    }\n    if (v11->field_10 != *((long long *)&v2) || (char)v21 != 0)\n    {\n        v24 = v21;\n        return v24;\n    }\n}\n"
        },
        {
            "funcName": "sub_40fdc0",
            "funcStartAddr": "0x40fdc0",
            "funcEndAddr": "0x410065",
            "decompiledFuncCode": "int sub_40fdc0() { crash_skku_timeout;\n}"
        },
        {
            "funcName": "sub_40f500",
            "funcStartAddr": "0x40f500",
            "funcEndAddr": "0x40f50a",
            "decompiledFuncCode": "int sub_40f500()\n{\n}\n"
        },
        {
            "funcName": "sub_40dc60",
            "funcStartAddr": "0x40dc60",
            "funcEndAddr": "0x40dcf9",
            "decompiledFuncCode": "extern unsigned long long __progname_full;\nextern unsigned long long g_61cbc8;\nextern unsigned long long program_invocation_short_name;\nextern unsigned long long stderr;\n\nint sub_40dc60()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // r8\n    unsigned long long v6;  // cc_dep1\n    unsigned long long v7;  // cc_dep2\n    unsigned long v8;  // d\n    char *v9;  // rdi\n    char *v10;  // rsi\n    unsigned long long v11;  // rcx\n    char *v13;  // rdi\n    unsigned long long v14;  // rcx\n    char *v15;  // rsi\n    unsigned long long v16;  // cc_dep1\n    unsigned long long v17;  // cc_dep2\n\n    if (v1 != 0)\n    {\n        v3 = v1;\n        v4 = strrchr();\n        if (v4 != 0)\n        {\n            v5 = v4 + 1;\n            if (v4 + 1 - v1 > 6)\n            {\n                v10 = v4 - 6;\n                v9 = \"/.libs/\";\n                v11 = 7;\n                while (v11 != 0)\n                {\n                    v11 -= 1;\n                    v6 = *(v10);\n                    v7 = *(v9);\n                    v9 = &v9[v8];\n                    v10 = &v10[v8];\n                    break;\n                }\n                if ((v6 > v7) - 0 - (v6 < v7) == 0)\n                {\n                    v13 = \"lt-\";\n                    v14 = 3;\n                    v15 = v5;\n                    v3 = v5;\n                    while (v14 != 0)\n                    {\n                        v14 -= 1;\n                        v16 = *(v15);\n                        v17 = *(v13);\n                        v13 = &v13[v8];\n                        v15 = &v15[v8];\n                        break;\n                    }\n                    if ((v16 > v17) - 0 - (v16 < v17) == 0)\n                    {\n                        v3 = v4 + 4;\n                        program_invocation_short_name = v4 + 4;\n                    }\n                }\n            }\n        }\n        g_61cbc8 = v3;\n        __progname_full = v3;\n        return v4;\n    }\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 0x1, 0x37, stderr);\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_405af0",
            "funcStartAddr": "0x405af0",
            "funcEndAddr": "0x405b38",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[32];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char field_30;\n    char field_31;\n    char padding_32[1];\n    char field_33;\n    char padding_34[2];\n    char field_36;\n    char padding_37[1];\n    char field_38;\n} struct_0;\n\nint sub_405af0()\n{\n    unsigned long long v1;  // rax\n    struct_0 *v2;  // rdi\n\n    v1 = 0;\n    if (v2->field_20 == 0 && v2->field_28 == 0)\n    {\n        v1 = v2->field_30;\n        if (v2->field_30 == 0 && v2->field_31 == 0 && (0xffff00ff0000 & *((long long *)&v2->field_30)) == 0)\n        {\n            v1 = v2->field_36;\n            if (v2->field_36 == 0 && v2->field_38 == 0)\n            {\n                return (unsigned int)v2->field_33 ^ 1;\n            }\n        }\n        if (((0xffff00ff0000 & *((long long *)&v2->field_30)) == 0 || v2->field_30 != 0) && (v2->field_31 == 0 || v2->field_30 != 0) && (v2->field_36 != 0 || v2->field_30 != 0))\n        {\n            return 0;\n        }\n    }\n    if (v2->field_28 != 0 || v2->field_20 != 0 || v2->field_30 == 0 && (0xffff00ff0000 & *((long long *)&v2->field_30)) != 0 || v2->field_30 == 0 && v2->field_31 != 0 || v2->field_36 == 0 && v2->field_30 == 0 && v2->field_38 != 0)\n    {\n        return v1;\n    }\n}\n"
        },
        {
            "funcName": "sub_405a40",
            "funcStartAddr": "0x405a40",
            "funcEndAddr": "0x405ad1",
            "decompiledFuncCode": "extern int512_t g_61c440;\nextern int512_t g_61c448;\nextern int512_t g_61c780;\nextern int512_t g_61ca80;\n\nint sub_405a40()\n{\n    char *v2;  // rdi\n    unsigned long long v3;  // r11\n    unsigned long long v4;  // r9\n    unsigned long long v5;  // rdx\n    unsigned long long v6;  // cc_dep1\n    unsigned long long v7;  // cc_dep2\n    char *v8;  // rax\n    unsigned long long v9;  // rcx\n    char *v10;  // rdx\n    unsigned long long v11;  // cc_dep1\n    unsigned long long v12;  // cc_dep2\n    unsigned long long v13;  // r10\n    unsigned long long *v14;  // rsi\n\n    v3 = 12;\n    v13 = 0;\n    while (true)\n    {\n        v4 = v13 + v3 >> 1;\n        v8 = (&g_61c440)[2 * (v13 + v3 >> 1)];\n        v5 = (char)*((char *)(&g_61c440)[2 * (v13 + v3 >> 1)]);\n        if (*((char *)(&g_61c440)[2 * (v13 + v3 >> 1)]) != 0)\n        {\n            v6 = (char)*(&((char *)&g_61c780)[(unsigned long long)*(v2)]);\n            v7 = v5;\n            if ((char)*(&((char *)&g_61c780)[(unsigned long long)*(v2)]) >= v5)\n            {\n                if ((char)[D] amd64g_calculate_condition(0x6<64>, 0x5<64>, cc_dep1<8>, cc_dep2<8>, cc_ndep<8>))\n                {\n                    v10 = v2;\n                    do\n                    {\n                        v8 = &v8[1];\n                        v9 = *(v8);\n                        v10 = &v10[1];\n                        v11 = (char)*(&((char *)&g_61c780)[(unsigned long long)*(v10)]);\n                        v12 = v9;\n                    }\n                    while ((char)[D] amd64g_calculate_condition(0x6<64>, 0x5<64>, cc_dep1<8>, cc_dep2<8>, cc_ndep<8>) && (char)*(&((char *)&g_61c780)[(unsigned long long)*(v10)]) >= v9 && (char)v9 != 0);\n                    if ((char)v9 != 0)\n                    {\n                        v3 = v4;\n                    }\n                    else if ((char)*(&((char *)&g_61c780)[(unsigned long long)*(v10)]) >= v9 && (char)v9 != 0)\n                    {\n                        v13 = v3 + 1;\n                    }\n                }\n                v13 = v3 + 1;\n            }\n            if ((char)[D] amd64g_calculate_condition(0x6<64>, 0x5<64>, cc_dep1<8>, cc_dep2<8>, cc_ndep<8>))\n            {\n                v3 = v4;\n            }\n            return 0;\n        }\n        v10 = v2;\n    }\n    *(v14) = v10;\n    return (&g_61c448)[2 * v3];\n}\n"
        },
        {
            "funcName": "sub_4090c0",
            "funcStartAddr": "0x4090c0",
            "funcEndAddr": "0x409312",
            "decompiledFuncCode": "extern unsigned int g_415088;\nextern unsigned int g_4150d8;\nextern unsigned long long g_61c418;\nextern unsigned long long g_61c5e8;\nextern unsigned int g_61c6c0;\nextern unsigned long long g_61c748;\nextern unsigned long long g_61c768;\nextern unsigned long long g_61c770;\n\nint sub_4090c0()\n{\n    unsigned int v0;  // [bp-0xcc]\n    char v1;  // [bp-0xc8]\n    char v2;  // [bp-0xc4]\n    char v3;  // [bp-0xc0]\n    unsigned long v5;  // rsi\n    unsigned long v6;  // r12\n    unsigned long long v10;  // rax\n    unsigned int *v11;  // r14\n    unsigned long long *v12;  // rax\n    unsigned int v13;  // ebp\n    unsigned long long v17;  // rax\n    unsigned long long v18;  // rdi\n    unsigned long long v19;  // rbx\n    unsigned long long v21;  // rbx\n    unsigned int v24;  // r12d\n    unsigned long long v27;  // rax\n    unsigned long long *v28;  // rdi\n    unsigned long long v30;  // rax\n    unsigned int v31;  // ecx\n\n    v0 = v5;\n    v6 = strlen(*((long long *)(g_61c770 + g_61c5e8 * 8)));\n    v19 = (unsigned int)sub_411210();\n    memcpy(v19 + 13, *((long long *)(g_61c770 + g_61c5e8 * 8)), v6);\n    *((long long *)(v19 + v6 + 13)) = 6365935330447553327;\n    *((int *)(v19 + 13 + v6 + 8)) = 5789784;\n    *((long long *)v19) = 0;\n    v10 = g_61c5e8 + 1;\n    g_61c5e8 = g_61c5e8 + 1;\n    if (v10 == g_61c768)\n    {\n        g_61c5e8 = 0;\n    }\n    v1 = pthread_sigmask(0x0, 0x61c6c0, (unsigned int)&v3) == 0;\n    v24 = sub_410680();\n    v11 = __errno_location();\n    if (v24 >= 0)\n    {\n        v12 = g_61c418;\n        g_61c418 = v19;\n        *(v12) = v19;\n        if (v1 != 0)\n        {\n            sub_407880();\n            *(v11) = *(v11);\n        }\n        *((char *)(v19 + 12)) = 0;\n        if (g_61c748 != 0)\n        {\n            v17 = sub_407a30();\n            *((unsigned int *)(v19 + 8)) = v17;\n            if (!((unsigned int)v17 <= 0))\n            {\n                close(v24);\n                close(*((int *)&v1));\n                v24 = *((int *)&v2);\n                sub_406190();\n            }\n            else if ((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>))\n            {\n                close(*((int *)&v2));\n                if (v24 != 1)\n                {\n                    sub_408e10();\n                }\n                if (*((int *)&v1) != 0)\n                {\n                    sub_408e10();\n                }\n                execlp(g_61c748, g_61c748, 0x0, v31);\n                sub_4060d0(); /* do not return */\n            }\n        }\n        if (g_61c748 == 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>)) || (unsigned int)v17 > 0)\n        {\n            v27 = fdopen(v24, \"w\");\n            *(v28) = v27;\n            if (v27 == 0)\n            {\n                dcgettext(0x0, 0x4150d8, 0x5);\n                sub_405dd0(); /* do not return */\n            }\n        }\n    }\n    else\n    {\n        v13 = *(v11);\n        if (v1 != 0)\n        {\n            sub_407880();\n            *(v11) = v13;\n        }\n        if (v13 == 24 && (char)v0 == 1)\n        {\n            v18 = v19;\n            v19 = 0;\n            free(v18);\n        }\n        if ((char)v0 != 1 || v13 != 24)\n        {\n            v21 = (unsigned int)sub_40f630();\n            error(0x2, *(v11), (unsigned long long)dcgettext(0x0, 0x415088, 0x5));\n        }\n    }\n    if (((char)v0 == 1 || v24 >= 0) && (v24 < 0 || v27 != 0) && (v13 == 24 || v24 >= 0) && (v24 < 0 || g_61c748 == 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>)) || (unsigned int)v17 > 0))\n    {\n        v30 = v19;\n        return v30;\n    }\n}\n"
        },
        {
            "funcName": "sub_40d5b0",
            "funcStartAddr": "0x40d5b0",
            "funcEndAddr": "0x40d5f0",
            "decompiledFuncCode": "int sub_40d5b0()\n{\n    char v0;  // [bp-0x88]\n    unsigned long long v2;  // rax\n    unsigned long long v3;  // rax\n\n    v2 = sched_getaffinity(0x0, 0x80, (unsigned int)&v0);\n    if (v2 == 0)\n    {\n        v3 = __sched_cpucount(0x80, (unsigned int)&v0);\n        if (v3 != 0)\n        {\n            return v3;\n        }\n    }\n    if (v3 == 0 || v2 != 0)\n    {\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_411620",
            "funcStartAddr": "0x411620",
            "funcEndAddr": "0x41166a",
            "decompiledFuncCode": "int sub_411620()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long v3;  // rdx\n    unsigned long long v5;  // rax\n\n    v0 = (unsigned int)sub_413580();\n    v1 = v3;\n    while (true)\n    {\n        *(__errno_location()) = 0;\n        v5 = sub_413140();\n        if ((unsigned int)v5 != 0)\n        {\n            return -18446744069414584321;\n        }\n        return v5;\n    }\n}\n"
        },
        {
            "funcName": "sub_407df0",
            "funcStartAddr": "0x407df0",
            "funcEndAddr": "0x407e64",
            "decompiledFuncCode": "int sub_407df0()\n{\n    char *v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned long v3;  // rsi\n\n    v2 = fileno(v1);\n    if ((unsigned int)v2 != 0 && (unsigned int)v2 != 1)\n    {\n        v2 = sub_411f80();\n        if ((unsigned int)v2 != 0)\n        {\n            v3 = \"close failed\";\n        }\n    }\n    if ((unsigned int)v2 == 1)\n    {\n        v2 = fflush_unlocked(v1);\n        if ((unsigned int)v2 != 0)\n        {\n            v3 = \"fflush failed\";\n        }\n    }\n    if ((unsigned int)v2 == 0 && (*(v1) & 16) == 0 || (unsigned int)v2 == 0 && (unsigned int)v2 == 1 || (unsigned int)v2 == 0 && (unsigned int)v2 != 0 && (unsigned int)v2 != 1)\n    {\n        return v2;\n    }\n    if (((unsigned int)v2 == 1 || (unsigned int)v2 != 0) && ((unsigned int)v2 == 1 || (unsigned int)v2 != 0) && ((unsigned int)v2 != 0 || (unsigned int)v2 != 1))\n    {\n        dcgettext(0x0, v3, 0x5);\n        sub_405dd0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_4065b0",
            "funcStartAddr": "0x4065b0",
            "funcEndAddr": "0x407428",
            "decompiledFuncCode": "int sub_4065b0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_411560",
            "funcStartAddr": "0x411560",
            "funcEndAddr": "0x4115b0",
            "decompiledFuncCode": "int sub_411560()\n{\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rax\n\n    if (*(__errno_location()) == 0)\n    {\n        v4 = (unsigned int)sub_413d80();\n        return v4;\n    }\n    sub_4114a0();\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_40cfc0",
            "funcStartAddr": "0x40cfc0",
            "funcEndAddr": "0x40cfc3",
            "decompiledFuncCode": "int sub_40cfc0()\n{\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_413250",
            "funcStartAddr": "0x413250",
            "funcEndAddr": "0x413265",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[80];\n    char field_50;\n} struct_0;\n\nint sub_413250()\n{\n    struct_0 *v1;  // rdi\n\n    if ((v1->field_50 & 1) != 0)\n    {\n        /* goto *((long long *)&v1->padding_0[64]); */\n    }\n    else\n    {\n        /* goto *((long long *)&v1->padding_0[64]); */\n    }\n}\n"
        },
        {
            "funcName": "sub_40f900",
            "funcStartAddr": "0x40f900",
            "funcEndAddr": "0x40fbdc",
            "decompiledFuncCode": "extern char g_40f8a0;\n\nint sub_40f900()\n{\n    void tmp_2;  // tmp #2\n    void tmp_27;  // tmp #27\n    unsigned long long v0;  // [bp-0x50]\n    unsigned int|char v1;  // [bp-0x48]\n    unsigned long long v3;  // rsi\n    unsigned long long v4;  // rbp\n    unsigned long v5;  // rdi\n    unsigned long long *v6;  // rbx\n    unsigned short v7;  // dx\n    unsigned long long v8;  // rax\n    void *v9;  // r13\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // r14\n    unsigned long long v14[2];  // rbx\n    unsigned long long v16;  // rbp\n    unsigned long long v18;  // r15\n    unsigned long v19;  // rbp\n    char *v21;  // rdi\n    char *v22;  // rsi\n    unsigned long long v23;  // rcx\n    unsigned long v24;  // d\n    unsigned long long v25;  // r14\n    char *v27;  // rsi\n    unsigned long long v28;  // rcx\n    char *v29;  // rdi\n    unsigned long v30;  // rbp\n    unsigned long long v32;  // rsi\n    unsigned long long v34;  // rax\n    unsigned long long v35;  // rdx\n    unsigned long long v36;  // rbp\n    unsigned long v37;  // r14\n    unsigned long long v39;  // rsi\n    unsigned long long v41;  // rax\n    unsigned long long v42;  // rdx\n    unsigned long long v43;  // rbp\n    unsigned long long v45;  // rsi\n    unsigned long long v47;  // rax\n    unsigned long long v48;  // rdx\n    unsigned long long v50;  // rax\n\n    if (v3 != 0)\n    {\n        v4 = v3;\n        if (v5 != 0)\n        {\n            v9 = (unsigned long long)(unsigned int)sub_4136b0();\n            if (v9 != 0)\n            {\n                v14[0] = v9;\n                v14[1] = &g_40f8a0;\n                v14 = (unsigned long long)(unsigned int)sub_411210();\n                v14[2] = v5;\n                setvbuf(v9, &v14[3], 0x0, (v4 <= 0x1000? v4 : 0x1000));\n            }\n            else\n            {\n                v11 = 0;\n            }\n        }\n        else\n        {\n            *(v6) = 0;\n            v6 = (unsigned long long)(unsigned int)sub_411210();\n            v6[1] = &g_40f8a0;\n            v6[2] = 0;\n            v6[3] = 0;\n            v8 = open(\"/dev/urandom\", 0x0, v7);\n            if ((unsigned int)v8 >= 0)\n            {\n                v16 = __read_chk(v8, (unsigned int)v6 + 32, (!(rbp<8> <= 0x800)? 0x800 : rbp<8>), 0x1018);\n                close(v8);\n                if (v16 <= 2047)\n                {\n                    tmp_2 = v16;\n                    tmp_27 = (char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>);\n                    v18 = (char *)&v6[4] + ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>)? 0 : v16);\n                    v19 = ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>)? 0 : v16) + (!(0x800 - ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>)? 0 : v16) <= 16)? 16 : 0x800 - ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>)? 0 : v16));\n                    *((int *)&v0) = (!(0x800 - (tmp_27? 0 : tmp_2) <= 16)? 16 : 0x800 - (tmp_27? 0 : tmp_2));\n                    gettimeofday(&v1, NULL);\n                    v21 = v18;\n                    v22 = &v1;\n                    for (v23 = v0; v23 != 0; v22 = &v22[v24])\n                    {\n                        v23 -= 1;\n                        *(v21) = v1;\n                        v21 = &v21[v24];\n                    }\n                    if (v19 <= 2047)\n                    {\n                        v25 = (!(0x800 - rbp<8> <= 4)? 4 : 0x800 - rbp<8>);\n                        v27 = &v1;\n                        v1 = getpid();\n                        v28 = v25;\n                        v12 = v25 + v19;\n                        for (v29 = (char *)&v6[4] + v19; v28 != 0; v27 = &v27[v24])\n                        {\n                            v28 -= 1;\n                            *(v29) = v1;\n                            v29 = &v29[v24];\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v12 = 20;\n                gettimeofday(&v1, NULL);\n                *((int128_t *)(v11 + 32)) = *((int128_t *)&v1);\n                v1 = getpid();\n                *((unsigned int *)(v11 + 48)) = v1;\n            }\n            if ((unsigned int)v8 < 0 || v16 <= 2047 && v12 <= 2047 && v19 <= 2047)\n            {\n                v30 = (!(0x800 - r14<8> <= 4)? 4 : 0x800 - r14<8>);\n                v32 = (char *)&v6[4] + v12;\n                v1 = getppid();\n                if ((unsigned int)v30 != 0)\n                {\n                    v34 = 0;\n                    do\n                    {\n                        v35 = v34;\n                        v34 = (unsigned int)v34 + 1;\n                        *((char *)(v32 + v35)) = v1;\n                    }\n                    while ((unsigned int)v34 < (unsigned int)v30);\n                }\n                v36 = v30 + v12;\n                if (v36 <= 2047)\n                {\n                    v37 = (!(0x800 - rbp<8> <= 4)? 4 : 0x800 - rbp<8>);\n                    v39 = (char *)&v6[4] + v36;\n                    v1 = getuid();\n                    if ((unsigned int)v37 != 0)\n                    {\n                        v41 = 0;\n                        do\n                        {\n                            v42 = v41;\n                            v41 = (unsigned int)v41 + 1;\n                            *((char *)(v39 + v42)) = v1;\n                        }\n                        while ((unsigned int)v41 < (unsigned int)v37);\n                    }\n                    v43 = v36 + v37;\n                    if (v43 <= 2047)\n                    {\n                        v45 = (char *)&v6[4] + v43;\n                        v1 = getgid();\n                        if ((unsigned int)(!(0x800 - v43 <= 4)? 4 : 0x800 - v43) != 0)\n                        {\n                            v47 = 0;\n                            do\n                            {\n                                v48 = v47;\n                                v47 = (unsigned int)v47 + 1;\n                                *((char *)(v45 + v48)) = v1;\n                            }\n                            while ((unsigned int)v47 < (!(0x800 - v43 <= 4)? 4 : 0x800 - v43));\n                        }\n                    }\n                }\n            }\n            sub_410070();\n        }\n    }\n    else\n    {\n        v11 = (unsigned int)sub_411210();\n        *((long long *)v11) = 0;\n        *((char **)(v11 + 8)) = &g_40f8a0;\n        *((long long *)(v11 + 16)) = 0;\n    }\n    v50 = v11;\n    return v50;\n}\n"
        },
        {
            "funcName": "sub_40c000",
            "funcStartAddr": "0x40c000",
            "funcEndAddr": "0x40c13a",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[24];\n    unsigned long long field_18;\n    char padding_20[40];\n    struct struct_1 *field_48;\n} struct_0;\n\nint sub_40c000()\n{\n    unsigned long long v1;  // rdx\n    unsigned long long v2;  // r14\n    unsigned long long v3[4];  // rsi\n    unsigned long long v4[4];  // r13\n    struct_0 *v5;  // rdi\n    unsigned long long v6[10];  // rbp\n    unsigned long long v7;  // r15\n    unsigned long long v8[2];  // rax\n    unsigned long long v9;  // rdx\n    unsigned long long v10[2];  // rbx\n    unsigned long long v11;  // r15\n    unsigned long long v12[2];  // r12\n    unsigned long long v13[2];  // rbx\n    unsigned long long v14[2];  // rax\n    unsigned long long v15;  // rdx\n\n    v2 = v1;\n    v4 = v3;\n    v6 = v5;\n    v12 = *(v3);\n    if (*(v3) < v3[1])\n    {\n        while (true)\n        {\n            v11 = *(v12);\n            if (*(v12) != 0)\n            {\n                v10 = v12[1];\n                if (v12[1] != 0)\n                {\n                    while (true)\n                    {\n                        v7 = *(v10);\n                        v8 = sub_40be30();\n                        v9 = v10[1];\n                        if (*(v8) != 0)\n                        {\n                            v10[1] = v8[1];\n                            v8[1] = v10;\n                            v10 = v9;\n                            if (v9 == 0)\n                            {\n                                break;\n                            }\n                        }\n                        else\n                        {\n                            v8[0] = v7;\n                            v6[3] = v6[3] + 1;\n                            v10[0] = 0;\n                            *((unsigned long long [10])&v10[1]) = v6[9];\n                            v6[9] = v10;\n                            if (v10 == 0)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    v11 = *(v12);\n                }\n                v12[1] = 0;\n                if (v2 == 0)\n                {\n                    v13 = (unsigned long long)(unsigned int)sub_40be30();\n                    if (*(v13) != 0)\n                    {\n                        v14 = v6[9];\n                        if (v6[9] != 0)\n                        {\n                            v6[9] = v5->field_48->field_8;\n                        }\n                        else\n                        {\n                            v14 = malloc(0x10);\n                            if (v14 == 0)\n                            {\n                                return 0;\n                            }\n                        }\n                        if (v14 != 0 || v6[9] != 0)\n                        {\n                            v15 = v13[1];\n                            v14[0] = v11;\n                            v14[1] = v15;\n                            v13[1] = v14;\n                        }\n                    }\n                    else\n                    {\n                        v13[0] = v11;\n                        v6[3] = v6[3] + 1;\n                    }\n                    if (v14 != 0)\n                    {\n                        v12[0] = 0;\n                        v12 = &v12[2];\n                        v4[3] = v4[3] - 1;\n                        if (v4[1] <= v12)\n                        {\n                            break;\n                        }\n                    }\n                }\n            }\n            if (*(v12) == 0 || v2 != 0)\n            {\n                v12 = &v12[2];\n                if (v3[1] <= v12)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    return 1;\n}\n"
        },
        {
            "funcName": "sub_411270",
            "funcStartAddr": "0x411270",
            "funcEndAddr": "0x4112a0",
            "decompiledFuncCode": "int sub_411270()\n{\n    unsigned int v1;  // rsi\n    void *v2;  // rdi\n    unsigned long long v3;  // rax\n\n    if (v1 == 0 && v2 != 0)\n    {\n        free(v2);\n        return 0;\n    }\n    if (v2 == 0 || v1 != 0)\n    {\n        v3 = realloc(v2, v1);\n        if (v3 == 0 && v1 != 0)\n        {\n            sub_411460(); /* do not return */\n        }\n        if (v1 == 0 || v3 != 0)\n        {\n            return v3;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_40f440",
            "funcStartAddr": "0x40f440",
            "funcEndAddr": "0x40f4d5",
            "decompiledFuncCode": "extern struct_0 *g_61c558;\nextern unsigned long long g_61c560;\nextern unsigned long long g_61c568;\nextern unsigned int g_61c570;\nextern unsigned long long g_61cbe0;\n\nint sub_40f440()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rbx\n    void *v3;  // rdi\n\n    v1 = g_61c570;\n    if (g_61c570 > 1)\n    {\n        v2 = &g_61c558[1].field_8;\n        while (true)\n        {\n            v3 = *(v2);\n            v2 = &v2[2];\n            v1 = free(v3);\n            if (v2 == &g_61c558[(unsigned long long)(g_61c570 - 2) + 2].field_8)\n            {\n                break;\n            }\n        }\n    }\n    if (g_61c558->field_8 != 6409184)\n    {\n        v1 = free(g_61c558->field_8);\n        g_61c560 = 0x100;\n        g_61c568 = &g_61cbe0;\n    }\n    if (g_61c558 != 6407520)\n    {\n        v1 = free(g_61c558);\n        g_61c558 = &g_61c560;\n    }\n    g_61c570 = 1;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_407dd0",
            "funcStartAddr": "0x407dd0",
            "funcEndAddr": "0x407df0",
            "decompiledFuncCode": "extern unsigned int g_416511;\n\nint sub_407dd0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    dcgettext(0x0, 0x416511, 0x5);\n    sub_405dd0(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_406320",
            "funcStartAddr": "0x406320",
            "funcEndAddr": "0x40635c",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[84];\n    char field_54;\n} struct_0;\n\nint sub_406320()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x8]\n    unsigned long v3;  // r12\n    unsigned long v4;  // rbx\n    struct_0 *v7;  // rsi\n\n    v1 = v3;\n    v0 = v4;\n    pthread_mutex_lock();\n    sub_40d070();\n    v7->field_54 = 1;\n    pthread_cond_signal();\n}\n"
        },
        {
            "funcName": "sub_4085d0",
            "funcStartAddr": "0x4085d0",
            "funcEndAddr": "0x408636",
            "decompiledFuncCode": "extern char g_61c759;\nextern char g_61cb80;\nextern uint128_t g_61cb90;\n\nint sub_4085d0()\n{\n    unsigned long v0;  // [bp-0x20]\n    unsigned long long v2;  // rdi\n    uint128_t v3[2];  // rbx\n    unsigned long v4;  // rdx\n    unsigned long long v5;  // rax\n\n    v3 = v2;\n    if (g_61c759 != 0)\n    {\n        if (*((long long *)&g_61cb80) != 0)\n        {\n            v0 = v4;\n            v5 = sub_4082a0();\n            if ((unsigned int)v5 == 0)\n            {\n                return v5;\n            }\n        }\n        if (*((long long *)&g_61cb80) == 0 || (unsigned int)v5 != 0)\n        {\n            *((int128_t *)&g_61cb80) = *((int128_t *)&v3);\n            g_61cb90 = *((int128_t *)&v3[2]);\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_4122c0",
            "funcStartAddr": "0x4122c0",
            "funcEndAddr": "0x4128be",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    char padding_18[8];\n    struct struct_1 *field_20;\n} struct_0;\n\nextern unsigned int g_418520;\nextern unsigned int g_418540;\nextern unsigned int g_418570;\nextern unsigned int g_418590;\nextern unsigned int g_4185c0;\nextern unsigned int g_418611;\nextern unsigned long long stderr;\n\nint sub_4122c0()\n{\n    char *v0;  // [bp-0x78]\n    unsigned long long v1;  // [bp-0x70]\n    unsigned int *v2;  // [bp-0x68]\n    char *v3;  // [bp-0x58]\n    unsigned int v4;  // [bp-0x50]\n    char v5;  // [bp-0x49]\n    unsigned int v6;  // [bp-0x44]\n    unsigned int v7;  // [bp-0x40]\n    unsigned int v8;  // [bp-0x3c]\n    struct_0 *v9;  // [bp+0x8]\n    unsigned int v10;  // [bp+0x10]\n    char v11;  // [bp+0x18]\n    char *v12;  // r14\n    char *v13;  // rdx\n    unsigned long v14;  // r8\n    char *v15;  // rbp\n    unsigned long long v16;  // rax\n    unsigned long long v17;  // r13\n    unsigned long long v18;  // rcx\n    unsigned long long|unsigned long long * v19;  // rbx\n    unsigned long|unsigned long long|unsigned int v20;  // r12\n    char *v21;  // r15\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // r8\n    char *v25;  // rdi\n    unsigned long long v26;  // r15\n    unsigned long long v27;  // rbp\n    unsigned long long v28;  // rax\n    unsigned int v29;  // r9d\n    unsigned long long v30;  // r9\n    unsigned long long v31;  // rdx\n    unsigned int v32;  // ecx\n    unsigned long long *v34;  // rsi\n    char *v35;  // rbp\n    unsigned long long v36;  // rdx\n    unsigned long v39;  // rdi\n    unsigned long long|unsigned long long * v40;  // rbx\n    unsigned long long v41;  // r12\n    unsigned long long v43;  // rbp\n    unsigned long long v46;  // rax\n    unsigned int *v47;  // rdx\n    unsigned long long v48;  // r14\n\n    v12 = v9->field_20;\n    v3 = v13;\n    v2 = v14;\n    v15 = v9->field_20;\n    *((struct struct_1 *)&v5) = *(v9->field_20);\n    if (*(v9->field_20) != 61 && *(v9->field_20) != 0)\n    {\n        do\n        {\n            v15 = &v15[1];\n            v16 = *(v15);\n        }\n        while ((char)v16 != 0 && v16 != 61);\n        v17 = v15 - v12;\n    }\n    if (*(v9->field_20) == 61 || *(v9->field_20) == 0)\n    {\n        v17 = 0;\n    }\n    v19 = v18;\n    v20 = 0;\n    v0 = *((long long *)v18);\n    v21 = *((long long *)v18);\n    if (*((long long *)v18) != 0)\n    {\n        while (true)\n        {\n            v22 = strncmp(v21, v9->field_20, v17);\n            if (v22 == 0)\n            {\n                v23 = strlen(v21);\n            }\n            if (v22 != 0 || v23 != v17)\n            {\n                v19 += 32;\n                v21 = *(v19);\n                v24 = v20 + 1;\n                if (*(v19) != 0)\n                {\n                    v20 = v24;\n                }\n                else\n                {\n                    v8 = v20;\n                    v19 = 0;\n                    v6 = -1;\n                    v25 = v0;\n                    v26 = 0;\n                    v4 = 0;\n                    v7 = 0;\n                    v1 = 0;\n                    v0 = v15;\n                    v27 = v18;\n                    do\n                    {\n                        v28 = strncmp(v25, v9->field_20, v17);\n                        if (v28 == 0)\n                        {\n                            if (v19 == 0)\n                            {\n                                v6 = v26;\n                                v19 = v27;\n                            }\n                            else if (*((int *)(v19 + 24)) != *((int *)(v27 + 24)) || *((int *)(v19 + 8)) != *((int *)(v27 + 8)) || v29 != 0 || *((long long *)(v19 + 16)) != *((long long *)(v27 + 16)))\n                            {\n                                if (v4 == 0)\n                                {\n                                    if (v10 == 0)\n                                    {\n                                        v4 = 1;\n                                    }\n                                    else if (v1 == 0)\n                                    {\n                                        v1 = calloc((int)v8, 0x1);\n                                        v4 = 1;\n                                    }\n                                    if (false)\n                                    {\n                                        v7 = 1;\n                                        *((char *)(v1 + (int)v6)) = 1;\n                                    }\n                                    if (v1 != 0)\n                                    {\n                                        *((char *)(v1 + v26)) = 1;\n                                    }\n                                }\n                            }\n                        }\n                        v27 += 32;\n                        v25 = *((long long *)v27);\n                        v26 += 1;\n                    }\n                    while (*((long long *)v27) != 0);\n                    v15 = v0;\n                    if (v1 == 0)\n                    {\n                        v30 = v4;\n                        if (v4 == 0)\n                        {\n                            if (v19 == 0)\n                            {\n                                break;\n                            }\n                            v20 = v6;\n                        }\n                    }\n                    if (v4 != 0 || v1 != 0)\n                    {\n                        if (v10 != 0)\n                        {\n                            if (v4 != 0)\n                            {\n                                __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x418520, 0x5), *(v34));\n                                v12 = v9->field_20;\n                            }\n                            else\n                            {\n                                flockfile(stderr);\n                                __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x418540, 0x5), *(v34));\n                                v39 = stderr;\n                                v40 = v18;\n                                v43 = v1;\n                                v41 = v1 + v20 + 1;\n                                do\n                                {\n                                    if (*((char *)v43) != 0)\n                                    {\n                                        __fprintf_chk(v39, 0x1, 0x418611, *((long long *)&v11));\n                                        v39 = stderr;\n                                    }\n                                    v43 += 1;\n                                    v40 = &v40[4];\n                                }\n                                while (v41 != v43);\n                                fputc(0xa, v39);\n                                funlockfile(stderr);\n                                v12 = v9->field_20;\n                            }\n                        }\n                        if (v7 != 0)\n                        {\n                            free(v1);\n                        }\n                        v48 = &v12[strlen(v12)];\n                        v9->field_20 = v48;\n                        v9->field_0 = v9->field_0 + 1;\n                        v9->field_8 = 0;\n                        v46 = 63;\n                    }\n                }\n            }\n            if ((*(v19) == 0 || v22 == 0) && (*(v19) == 0 || v23 == v17) && (v22 == 0 || v4 == 0) && (v22 == 0 || v1 == 0) && (v23 == v17 || v4 == 0) && (v23 == v17 || v1 == 0))\n            {\n                v31 = v9->field_0;\n                v9->field_20 = 0;\n                v9->field_0 = (unsigned int)v31 + 1;\n                v32 = *((int *)(v19 + 8));\n                if (*(v15) == 0)\n                {\n                    if (v32 == 1)\n                    {\n                        if ((unsigned int)((unsigned long long)v9->field_0 + 1) < v25)\n                        {\n                            v9->field_0 = v9->field_0 + 2;\n                            v9->field_10 = v34[1 + v31];\n                        }\n                        else\n                        {\n                            if (v10 != 0)\n                            {\n                                __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x4185c0, 0x5), *(v34));\n                            }\n                            v9->field_8 = *((int *)(v19 + 24));\n                            v46 = (unsigned long long)(char)(*(v3) != 58) * 5 + 58;\n                        }\n                    }\n                }\n                else\n                {\n                    if (v32 != 0)\n                    {\n                        v35 = &v15[1];\n                        v9->field_10 = v35;\n                    }\n                    else\n                    {\n                        if (v10 != 0)\n                        {\n                            __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x418590, 0x5), *(v34));\n                        }\n                        v9->field_8 = *((int *)(v19 + 24));\n                        v46 = 63;\n                    }\n                }\n                if (*(v15) == 0 && (unsigned int)((unsigned long long)v9->field_0 + 1) < v25 || *(v15) == 0 && v32 != 1 || *(v15) != 0 && v32 != 0)\n                {\n                    if (v2 != 0)\n                    {\n                        *((unsigned long *)&v2) = v20;\n                    }\n                    v47 = *((long long *)(v19 + 16));\n                    v46 = (unsigned int)*((int *)(v19 + 24));\n                    if (*((long long *)(v19 + 16)) == 0)\n                    {\n                        break;\n                    }\n                    *(v47) = v46;\n                    v46 = 0;\n                }\n            }\n        }\n        if (...)\n        {\n            return v46;\n        }\n    }\n    if (v29 != 0)\n    {\n        if (*((char *)(v34[(long long)(int)v9->field_0] + 1)) != 45)\n        {\n            v36 = strchr(v3, v5);\n            v46 = -18446744069414584321;\n        }\n        if ((*((long long *)v18) != 0 || *((char *)(v34[(long long)(int)v9->field_0] + 1)) != 45) && (*((long long *)v18) != 0 || v36 != 0))\n        {\n            return v46;\n        }\n    }\n    if (*((long long *)v18) == 0 && v29 == 0 || *((char *)(v34[(long long)(int)v9->field_0] + 1)) == 45 && v29 != 0 || v36 == 0 && v29 != 0)\n    {\n        if (v10 != 0)\n        {\n            __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x418570, 0x5), *(v34));\n        }\n        v9->field_20 = 0;\n        v9->field_0 = v9->field_0 + 1;\n        v9->field_8 = 0;\n        return 63;\n    }\n}\n"
        },
        {
            "funcName": "sub_405cf0",
            "funcStartAddr": "0x405cf0",
            "funcEndAddr": "0x405cfb",
            "decompiledFuncCode": "int sub_405cf0()\n{\n}\n"
        },
        {
            "funcName": "sub_40f1d0",
            "funcStartAddr": "0x40f1d0",
            "funcEndAddr": "0x40f204",
            "decompiledFuncCode": "int sub_40f1d0()\n{\n    unsigned int v1;  // [bp+0x100008]\n\n    *(__errno_location()) = v1;\n    return sub_411410();\n}\n"
        },
        {
            "funcName": "sub_4060d0",
            "funcStartAddr": "0x4060d0",
            "funcEndAddr": "0x406185",
            "decompiledFuncCode": "int sub_4060d0()\n{\n    unsigned long v0;  // [bp-0x8]\n    void tmp_12;  // tmp #12\n    unsigned long v2;  // rbx\n    void *v3;  // rsi\n    unsigned int *v4;  // rdx\n    unsigned long v5;  // rax\n    unsigned long v6;  // rax\n    unsigned long v7;  // rdx\n    char *v12;  // rdi\n    unsigned long long v13;  // rcx\n    char v14;  // cc_dep2\n    unsigned long v15;  // d\n\n    v0 = v2;\n    v4 = v3;\n    do\n    {\n        tmp_12 = *(v4);\n        v4 = &v4[1];\n    }\n    while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n    v6 = (unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int)(v5 >> 16) : (unsigned int)v5);\n    v7 = (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)((char *)v4 + 2) : v4) - 3 - ((v6 + v6 <= v6? 1 : 0) & 1) - v3;\n    write(0x2, v3, v7);\n    write(0x2, \"\\n\", 0x1);\n    _exit(0x2);\n    write(0x2, \": errno \", 0x8);\n    v12 = (unsigned long long)(unsigned int)sub_40d2b0();\n    v13 = -1;\n    while (v13 != 0)\n    {\n        v13 -= 1;\n        v14 = *(v12);\n        v12 = &v12[v15];\n        break;\n    }\n    write(0x2, v12, !(rcx<8>) - 1);\n}\n"
        },
        {
            "funcName": "obstack_newchunk",
            "funcStartAddr": "0x413340",
            "funcEndAddr": "0x413434",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned long long field_30;\n    char padding_38[24];\n    char field_50;\n} struct_0;\n\ntypedef struct struct_1 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_1;\n\nint _obstack_newchunk()\n{\n    void tmp_23;  // tmp #23\n    void tmp_102;  // tmp #102\n    void tmp_108;  // tmp #108\n    unsigned long long v1;  // rax\n    struct_0 *v2;  // rdi\n    unsigned long v3;  // r13\n    struct_1 *v4;  // rbp\n    char v5;  // al\n    unsigned long v6;  // rsi\n    unsigned long v9;  // rbx\n    unsigned long long v10;  // rcx\n    struct_0 *v11;  // r12\n    unsigned long long v12[2];  // r14\n    unsigned long long v14;  // rbx\n    unsigned long long v15;  // rax\n\n    v1 = 0;\n    v3 = v2->field_18 - v2->field_10;\n    v4 = v2->field_8;\n    v5 = [D] amd64g_calculate_condition(0x2<64>, 0x4<64>, rsi<8>, Sub(Load(addr=(rdi<8> + 0x18<64>), size=8, endness=Iend_LE), Load(addr=(rdi<8> + 0x10<64>), size=8, endness=Iend_LE)), cc_ndep<8>);\n    tmp_23 = v6 + v2->field_18 - v2->field_10 + v2->field_30;\n    tmp_102 = v6 + v2->field_18 - v2->field_10 + v2->field_30 + (v2->field_18 - v2->field_10 >> 3) + 100;\n    tmp_108 = v6 + v2->field_18 - v2->field_10 + v2->field_30 <= v2->field_0;\n    v9 = (tmp_102 <= (tmp_108? v2->field_0 : tmp_23)? (v6 + v2->field_18 - v2->field_10 + v2->field_30 <= v2->field_0? v2->field_0 : v6 + v2->field_18 - v2->field_10 + v2->field_30) : tmp_102);\n    if (rax<8> == 0)\n    {\n        v10 = (char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, Add(rsi<8>, (Load(addr=(rdi<8> + 0x18<64>), size=8, endness=Iend_LE) - Load(addr=(rdi<8> + 0x10<64>), size=8, endness=Iend_LE))), Load(addr=(rdi<8> + 0x30<64>), size=8, endness=Iend_LE), cc_ndep<8>);\n        if (v10 == 0)\n        {\n            v11 = v2;\n            v12 = (unsigned long long)(unsigned int)sub_413230();\n            if (v12 != 0)\n            {\n                v11->field_8 = v12;\n                v12[1] = v4;\n                v11->field_20 = (char *)v12 + v9;\n                v12[0] = (char *)v12 + v9;\n                v14 = &((unsigned long long [2])&((char *)v12)[v11->field_30])[2] & !(v11->field_30);\n                v15 = memcpy(&((unsigned long long [2])&((char *)v12)[v11->field_30])[2] & !(v11->field_30), v11->field_10, v3);\n                if ((v11->field_50 & 2) == 0)\n                {\n                    v15 = !(v11->field_30) & &((struct struct_1 *)&v4->padding_0[v11->field_30])[1];\n                    if (v11->field_10 == (!(v11->field_30) & &((struct struct_1 *)&v4->padding_0[v11->field_30])[1]))\n                    {\n                        v12[1] = v4->field_8;\n                        v15 = sub_413250();\n                    }\n                }\n                v11->field_10 = v14;\n                v11->field_18 = v3 + v14;\n                v11->field_50 = v11->field_50 & 253;\n                return v15;\n            }\n        }\n    }\n    if (v12 == 0 || rax<8> != 0 || v10 != 0)\n    {\n        sub_4131f0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_411410",
            "funcStartAddr": "0x411410",
            "funcEndAddr": "0x411438",
            "decompiledFuncCode": "int sub_411410()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_411210();\n}\n"
        },
        {
            "funcName": "sub_40f5c0",
            "funcStartAddr": "0x40f5c0",
            "funcEndAddr": "0x40f629",
            "decompiledFuncCode": "int sub_40f5c0()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_40f030();\n}\n"
        },
        {
            "funcName": "sub_4128e0",
            "funcStartAddr": "0x4128e0",
            "funcEndAddr": "0x412e47",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned int field_0;\n    unsigned int field_4;\n    char padding_8[24];\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned int field_30;\n} struct_1;\n\ntypedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    unsigned int field_18;\n    char padding_1c[4];\n    unsigned long long field_20;\n    unsigned int field_28;\n    unsigned int field_2c;\n    unsigned int field_30;\n} struct_0;\n\nextern unsigned int g_4185e8;\nextern unsigned int g_418619;\nextern unsigned long long stderr;\n\nint sub_4128e0()\n{\n    struct_1 *|struct_0 * v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x60]\n    unsigned long v4;  // [bp-0x58]\n    unsigned int|char v5;  // [bp-0x4c]\n    char v6[2];  // [bp-0x48]\n    unsigned long long v7;  // [bp-0x40]\n    struct_1 *v8;  // [bp+0x8]\n    unsigned int v9;  // [bp+0x10]\n    unsigned long v10;  // rcx\n    unsigned long v11;  // r8\n    unsigned int v12;  // r13d\n    unsigned int v13;  // edi\n    unsigned long v14;  // rsi\n    unsigned long v15;  // r12\n    char v16[2];  // rdx\n    unsigned long|unsigned int v17;  // eax\n    unsigned long long v18;  // rax\n    char *|unsigned long long v19;  // rdx\n    unsigned long long v20;  // rax\n    unsigned int v22;  // r9d\n    unsigned long long v23;  // rax\n    unsigned long long|unsigned int v24;  // r9\n    unsigned long|unsigned long long * v26;  // rax\n    unsigned long|unsigned int v27;  // rdx\n    unsigned long v29;  // rax\n    char v30[3];  // rcx\n    unsigned long long *v31;  // rsi\n    unsigned long long v32;  // rcx\n    char *v33;  // rdi\n    char v34[3];  // rsi\n    unsigned long long v35;  // cc_dep1\n    unsigned long long v36;  // cc_dep2\n    unsigned long v37;  // d\n    unsigned long long v38;  // cc_dep1\n    unsigned int v39;  // ecx\n    unsigned int v40;  // eax\n    unsigned long long v41;  // rcx\n    unsigned long long|unsigned int v42;  // edx\n    unsigned int v44;  // eax\n    unsigned long long v45;  // r14\n    unsigned long long *v46;  // rbp\n    unsigned long long v47;  // rax\n    char v48[3];  // r14\n    unsigned long v49;  // r13\n    char *|char [2] v50;  // r15\n    char v51[3];  // rax\n    unsigned int v52;  // ecx\n    char v53[3];  // r8\n    unsigned long long v54;  // rcx\n    unsigned long long v55;  // rcx\n    unsigned long long v57;  // rdx\n    unsigned int v58;  // eax\n    char v60[3];  // rax\n    unsigned long long v62;  // r14\n    char v63;  // r14b\n    unsigned long long v64;  // r14\n    char v65;  // r14b\n    unsigned long long v66;  // rax\n\n    v3 = v10;\n    v4 = v11;\n    v12 = v8->field_4;\n    if (v13 > 0)\n    {\n        v17 = v0->field_0;\n        v46 = v13;\n        v15 = v14;\n        v50 = v16;\n        v0->field_10 = 0;\n        if (!((unsigned int)v17 != 0))\n        {\n            v0->field_0 = 1;\n            v17 = 1;\n        }\n        else if (v0->field_18 != 0)\n        {\n            v18 = v16[0];\n            v19 = v0->field_20;\n            if (((char)(v18 - 43) & 253) == 0)\n            {\n                v20 = v50[1];\n                v50 = &v50[1];\n                v49 = (unsigned int)(v20 == 58? 0 : (unsigned int)r13<8>);\n            }\n        }\n        if ((unsigned int)v17 == 0 || v0->field_18 == 0)\n        {\n            *((unsigned long *)&v0->field_30) = v17;\n            *((unsigned long *)&v0->field_2c) = v17;\n            v0->field_20 = 0;\n            if (!(v16[0] != 45))\n            {\n                v0->field_28 = 2;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            else if (v16[0] != 43)\n            {\n                v19 = 0;\n                if (v9 == 0)\n                {\n                    v5 = v22;\n                    v23 = getenv(\"POSIXLY_CORRECT\");\n                    v24 = v5;\n                    if (v23 != 0)\n                    {\n                        v19 = v0->field_20;\n                    }\n                    else\n                    {\n                        v0->field_28 = 1;\n                        v19 = v0->field_20;\n                    }\n                }\n                if (v9 != 0 || v23 != 0)\n                {\n                    v0->field_28 = 0;\n                }\n            }\n            else\n            {\n                v0->field_28 = 0;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            v0->field_18 = 1;\n            v18 = v50[0];\n        }\n        if ((unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0)\n        {\n            v49 = (unsigned int)(v18 == 58? 0 : (unsigned int)r13<8>);\n        }\n        if (*(v19) == 0 || (unsigned int)v17 == 0 && v19 == 0 || v19 == 0 && v0->field_18 == 0 || v19 == 0 && ((char)(v18 - 43) & 253) != 0 || v8->field_20 == 0 && ((char)(v18 - 43) & 253) == 0 && (unsigned int)v17 != 0 && v0->field_18 != 0)\n        {\n            v26 = v0->field_0;\n            if (v0->field_30 > v0->field_0)\n            {\n                v0->field_30 = v8->field_0;\n            }\n            if (v8->field_0 < v0->field_2c)\n            {\n                v0->field_2c = v8->field_0;\n            }\n            if (v0->field_28 == 1)\n            {\n                v27 = v0->field_30;\n                if (v0->field_2c != v0->field_30)\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v5 = v24;\n                        sub_4121e0();\n                        v27 = v0->field_0;\n                        v24 = v5;\n                    }\n                }\n                else\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v0->field_2c = v8->field_0;\n                        v27 = v26;\n                    }\n                }\n                if (v13 > (unsigned int)v27)\n                {\n                    v29 = v27;\n                    while (true)\n                    {\n                        v30 = *((long long *)(v15 + v29 * 8));\n                        v31 = v29;\n                        v27 = v29;\n                        if (*((char *)*((long long *)(v15 + (v29 << 3)))) == 45 && v30[1] != 0)\n                        {\n                            v26 = v0->field_0;\n                        }\n                        if (v30[1] == 0 || *((char *)*((long long *)(v15 + (v29 << 3)))) != 45)\n                        {\n                            v27 = (char *)v31 + 1;\n                            v29 += 1;\n                            v0->field_0 = (unsigned int)v31 + 1;\n                            if (v13 <= (unsigned int)v29)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    if (v30[1] == 0 || *((char *)*((long long *)(v15 + (v29 << 3)))) != 45)\n                    {\n                        v26 = v27;\n                    }\n                    else if (*((char *)*((long long *)(v15 + (v29 << 3)))) == 45 && v30[1] != 0)\n                    {\n                        *((unsigned long *)&v0->field_30) = v27;\n                    }\n                }\n                v26 = v27;\n                *((unsigned long *)&v0->field_30) = v27;\n            }\n            if (v13 != (unsigned int)v26)\n            {\n                v32 = 3;\n                v33 = \"-\";\n                v48 = *((long long *)(v15 + v26 * 8));\n                v34 = *((long long *)(v15 + v26 * 8));\n                while (v32 != 0)\n                {\n                    v32 -= 1;\n                    v35 = v34[0];\n                    v36 = *(v33);\n                    v33 = &v33[v37];\n                    v34 = &v34[v37];\n                    break;\n                }\n                v38 = (v35 > v36) - 0 - (v35 < v36);\n                if ((char)v38 == 0)\n                {\n                    v42 = v0->field_2c;\n                    v39 = v0->field_30;\n                    v40 = (unsigned int)v26 + 1;\n                    v0->field_0 = v0->field_2c;\n                    if ((unsigned int)v42 != v39)\n                    {\n                        if (v0->field_2c != v8->field_30)\n                        {\n                            sub_4121e0();\n                            v42 = v0->field_2c;\n                        }\n                    }\n                    else\n                    {\n                        v0->field_2c = v0->field_2c;\n                        v42 = v40;\n                    }\n                    *((unsigned long long **)&v0->field_30) = v46;\n                    *((unsigned long long **)&v0->field_0) = v46;\n                }\n                else if (v48[0] == 45)\n                {\n                    v41 = v48[1];\n                    if (v48[1] != 0 && v3 != 0)\n                    {\n                        if (!(v41 != 45))\n                        {\n                            v0->field_20 = &v48[2];\n                            v2 = \"-\";\n                            v1 = v49;\n                            v0 = v0;\n                        }\n                        else if (v24 != 0)\n                        {\n                            if (v48[2] == 0)\n                            {\n                                *((unsigned long long *)&v5) = v24;\n                                v47 = strchr(v50, v41);\n                            }\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v46 = (unsigned long long)v0->field_30;\n                v42 = v0->field_2c;\n            }\n        }\n    }\n    if ((v13 != (unsigned int)v26 && v13 > 0 && (*(v19) == 0 || ((char)(v18 - 43) & 253) == 0 || v19 == 0) && (*(v19) == 0 || v19 == 0 || (unsigned int)v17 != 0) && (*(v19) == 0 || v19 == 0 || v0->field_18 != 0) && ((unsigned int)v17 == 0 || v8->field_20 == 0 || *(v19) == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 == 0 || v13 == (unsigned int)v26 && v13 > 0 && (*(v19) == 0 || ((char)(v18 - 43) & 253) == 0 || v19 == 0) && (*(v19) == 0 || v19 == 0 || (unsigned int)v17 != 0) && (*(v19) == 0 || v19 == 0 || v0->field_18 != 0) && ((unsigned int)v17 == 0 || v8->field_20 == 0 || *(v19) == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0)) && v42 != v46)\n    {\n        *((unsigned long long *)&v0->field_0) = v42;\n    }\n    if ((v13 != (unsigned int)v26 && v13 > 0 && (*(v19) == 0 || ((char)(v18 - 43) & 253) == 0 || v19 == 0) && (*(v19) == 0 || v19 == 0 || (unsigned int)v17 != 0) && (*(v19) == 0 || v19 == 0 || v0->field_18 != 0) && ((unsigned int)v17 == 0 || v8->field_20 == 0 || *(v19) == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] == 45 && v48[1] == 0 || v13 != (unsigned int)v26 && v13 > 0 && (*(v19) == 0 || ((char)(v18 - 43) & 253) == 0 || v19 == 0) && (*(v19) == 0 || v19 == 0 || (unsigned int)v17 != 0) && (*(v19) == 0 || v19 == 0 || v0->field_18 != 0) && ((unsigned int)v17 == 0 || v8->field_20 == 0 || *(v19) == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] != 45) && v0->field_28 != 0)\n    {\n        v44 = (unsigned int)v26 + 1;\n        v0->field_10 = v48;\n        v45 = 1;\n        v0->field_0 = v44;\n    }\n    if (...)\n    {\n        v45 = -18446744069414584321;\n    }\n    if (...)\n    {\n        v0->field_20 = &v48[1];\n        v2 = \"-\";\n        v1 = v49;\n        v0 = v8;\n        v45 = (unsigned int)sub_4122c0();\n        if ((unsigned int)v45 == -1)\n        {\n            v48 = *((long long *)(v15 + (int)v0->field_0 * 8));\n        }\n    }\n    if (...)\n    {\n        v19 = &v48[1];\n    }\n    if (...)\n    {\n        *((char **)&v6[0]) = v19;\n        v0->field_20 = &v19[1];\n        v45 = *(v19);\n        v7 = &v19[1];\n        v5 = *(v19);\n        v51 = strchr(v50, *(v19));\n        v52 = v5;\n        v53 = v7;\n        if (v6[1] == 0)\n        {\n            v0->field_0 = v0->field_0 + 1;\n        }\n        v54 = (unsigned long long)v52 - 58;\n        if (v54 > 1 && v51 != 0)\n        {\n            v55 = v51[1];\n            if (v51[0] == 87 && v3 != 0 && v55 == 59 && v6[1] == 0)\n            {\n                if (v0->field_0 != v46)\n                {\n                    v53 = *((long long *)(v15 + (int)v8->field_0 * 8));\n                }\n                else\n                {\n                    if ((unsigned int)v49 != 0)\n                    {\n                        __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x4185e8, 0x5), *((long long *)v15));\n                    }\n                    v0->field_8 = v45;\n                    v62 = 0;\n                    v63 = *(v50) != 58;\n                    v45 = r14<8> * 5 + 58;\n                }\n            }\n        }\n    }\n    if (...)\n    {\n        if ((unsigned int)v49 != 0)\n        {\n            __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x418619, 0x5), *((long long *)v15));\n        }\n        v0->field_8 = v45;\n        v45 = 63;\n    }\n    if (...)\n    {\n        v57 = v6[1];\n        if (v51[2] != 58)\n        {\n            if (!(v57 == 0))\n            {\n                v58 = v8->field_0 + 1;\n                v0->field_10 = v7;\n                v0->field_0 = v58;\n            }\n            else if (v46 != v8->field_0)\n            {\n                v60 = *((long long *)(v15 + (int)v8->field_0 * 8));\n                v0->field_0 = (int)v8->field_0 + 1;\n                v0->field_10 = v60;\n            }\n            else\n            {\n                if ((unsigned int)v49 != 0)\n                {\n                    __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x4185e8, 0x5), *((long long *)v15));\n                }\n                v0->field_8 = v45;\n                v64 = 0;\n                v65 = *(v50) != 58;\n                v45 = r14<8> * 5 + 58;\n            }\n        }\n        else\n        {\n            if (v57 != 0)\n            {\n                v0->field_10 = v7;\n                v0->field_0 = v0->field_0 + 1;\n            }\n            else\n            {\n                v0->field_10 = 0;\n            }\n        }\n        v0->field_20 = 0;\n    }\n    if (...)\n    {\n        v0->field_20 = v53;\n        v0->field_10 = 0;\n        v2 = \"-W \";\n        v1 = v49;\n        v0 = v0;\n    }\n    if (...)\n    {\n        v45 = (unsigned int)sub_4122c0();\n    }\n    v66 = v45;\n    return v66;\n}\n"
        },
        {
            "funcName": "sub_40fc00",
            "funcStartAddr": "0x40fc00",
            "funcEndAddr": "0x40fc05",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_0;\n\nint sub_40fc00()\n{\n    struct_0 *v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rax\n\n    v1->field_10 = v2;\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_411b40",
            "funcStartAddr": "0x411b40",
            "funcEndAddr": "0x411f4d",
            "decompiledFuncCode": "int sub_411b40()\n{\n    unsigned long long v0;  // [bp-0x178]\n    void tmp_11;  // tmp #11\n    char [3]|char v1;  // [bp-0x58]\n    char v2[3];  // [bp-0x50]\n    unsigned int v4;  // edx\n    unsigned long|unsigned long long|unsigned int v5;  // rdi\n    unsigned long v6;  // rbp\n    unsigned long long *v7;  // rcx\n    char *v9;  // r8\n    unsigned long v11;  // rsi\n    unsigned long long *v12;  // r15\n    unsigned int *v13;  // r12\n    unsigned int *v14;  // r12\n    unsigned long long v15;  // rbx\n    unsigned long v16;  // rax\n    unsigned int v17;  // eax\n    unsigned long long v18;  // r12\n    unsigned long long v19;  // rax\n    unsigned long long v20;  // rax\n    unsigned long long v21;  // rdx\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // rsi\n    char v25;  // sil\n    unsigned long long v26;  // r12\n    unsigned long long v27;  // r12\n    unsigned long long v28;  // rcx\n    unsigned long long v29;  // rcx\n    unsigned long long v30;  // rdx\n    unsigned long long v31;  // rsi\n    char v32[3];  // r8\n    unsigned long long v33;  // rbx\n    unsigned long long v34;  // rcx\n    unsigned long long|unsigned int v35;  // rdi\n    unsigned long long v36;  // rcx\n    unsigned long long|unsigned int v37;  // rdi\n    unsigned long long v38;  // rcx\n    unsigned long long v39;  // rcx\n    unsigned long long v40;  // rcx\n    unsigned long long v43;  // cc_dep1\n    unsigned long long v44;  // cc_dep1\n    unsigned int v45;  // cc_dep1\n    unsigned int v46;  // cc_dep1\n    unsigned int v47;  // cc_dep1\n    unsigned long long v48;  // rax\n    unsigned long long v49;  // r8\n\n    if (v4 <= 36)\n    {\n        v6 = v5;\n        v12 = (v11 == 0? stack_base + -64 : v11);\n        *(v13) = 0;\n        v13 = __errno_location();\n        v15 = (char)*((char *)v5);\n        v31 = *((long long *)(unsigned long long)__ctype_b_loc());\n        for (v16 = v5; (*((char *)(v31 + (v15 << 1) + 1)) & 32) != 0; v15 = (char)*((char *)v16))\n        {\n            v16 += 1;\n        }\n        if (v15 != 45)\n        {\n            v33 = __strtoul_internal(v5, (unsigned int)v12);\n            if (*(v12) != v5)\n            {\n                v17 = *(v14);\n                if ((*(v14) == 0 || v17 == 34) && v9 != 0)\n                {\n                    v18 = v1[0];\n                    if (v1[0] != 0)\n                    {\n                        *((char *[3])&v1[0]) = v1;\n                        v20 = strchr(v9, v18);\n                        v32 = v1;\n                    }\n                }\n            }\n            else\n            {\n                *((char **)&v1[0]) = v9;\n                if (v9 != 0)\n                {\n                    v18 = (char)*((char *)v6);\n                    if (*((char *)v6) != 0)\n                    {\n                        v33 = 1;\n                        v19 = strchr(v9, (char)*((char *)v5));\n                        v32 = v1;\n                    }\n                }\n            }\n        }\n        if (*(v12) == v5 && *((char *)v6) != 0 && v9 != 0 && v15 != 45 && v19 != 0 || *(v12) != v5 && v9 != 0 && v1[0] != 0 && v15 != 45 && (*(v14) == 0 || v17 == 34) && v20 != 0)\n        {\n            v21 = v18 - 69;\n            if ((v18 - 69 & 255) <= 47)\n            {\n                *((unsigned long long *)&v1) = v21;\n                v0 = 142129060940101;\n                if (((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) != 0)\n                {\n                    *((char *[3])&v2[0]) = v32;\n                    v22 = strchr(v9, 0x30);\n                    v32 = v2;\n                    if (v22 != 0)\n                    {\n                        v23 = v32[1];\n                        if (v32[1] != 68)\n                        {\n                            if (v23 != 105)\n                            {\n                                v30 = v1;\n                                if (v23 != 66)\n                                {\n                                    /* goto *((long long *)(rdx<8> * 8 + 4293088)); */\n                                }\n                            }\n                            else\n                            {\n                                v24 = 0;\n                                v30 = 0x400;\n                                v25 = v32[2] == 66;\n                                v31 = rsi<8> * 2 + 1;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if ((*(v12) == v5 && *((char *)v6) != 0 && v9 != 0 && v15 != 45 && v19 != 0 || *(v12) != v5 && v9 != 0 && v1[0] != 0 && v15 != 45 && (*(v14) == 0 || v17 == 34) && v20 != 0) && (v18 - 69 & 255) <= 47 && ((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) != 0 && v22 == 0 || (*(v12) == v5 && *((char *)v6) != 0 && v9 != 0 && v15 != 45 && v19 != 0 || *(v12) != v5 && v9 != 0 && v1[0] != 0 && v15 != 45 && (*(v14) == 0 || v17 == 34) && v20 != 0) && (v18 - 69 & 255) <= 47 && ((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) == 0 || (*(v12) == v5 && *((char *)v6) != 0 && v9 != 0 && v15 != 45 && v19 != 0 || *(v12) != v5 && v9 != 0 && v1[0] != 0 && v15 != 45 && (*(v14) == 0 || v17 == 34) && v20 != 0) && (v18 - 69 & 255) > 47)\n        {\n            v31 = 1;\n            v30 = 0x400;\n        }\n        if (...)\n        {\n            v31 = 2;\n            v30 = 1000;\n        }\n        if (...)\n        {\n            v26 = (unsigned int)v18 - 66;\n            switch (v26)\n            {\n            case 0:\n                if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                {\n                    v33 *= 0x400;\n                    break;\n                }\n            case 3:\n                v39 = v30;\n                v5 = 6;\n                do\n                {\n                    v33 = v33 * v39;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v46 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v46 != 1);\n            case 5: case 37:\n                v28 = v30;\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v48 = tmp_11 * v28 * v28;\n                    v33 = v48;\n                }\n                else\n                {\n                    v33 = -1;\n                }\n            case 9: case 41:\n                v33 = v33 * v30;\n            case 11: case 43:\n                v29 = v30;\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v33 = tmp_11 * v29;\n                    break;\n                }\n                else\n                {\n                    v33 = -1;\n                    break;\n                }\n            case 14:\n                v38 = v30;\n                v5 = 5;\n                do\n                {\n                    v33 = v33 * v38;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v45 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v45 != 1);\n            case 18: case 50:\n                v40 = v30;\n                v5 = 4;\n                do\n                {\n                    v33 = v33 * v40;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v47 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v47 != 1);\n            case 23:\n                v34 = v30;\n                v35 = 8;\n                do\n                {\n                    v33 = v33 * v34;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v43 = v35;\n                    v35 -= 1;\n                }\n                while (v43 != 1);\n                break;\n            case 24:\n                v36 = v30;\n                v37 = 7;\n                do\n                {\n                    v33 = v33 * v36;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v44 = v37;\n                    v37 -= 1;\n                }\n                while (v44 != 1);\n            case 32:\n                if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                {\n                    v33 *= 0x200;\n                    break;\n                }\n            case 33:\n                v49 = &v32[v31];\n                *(v12) = v49;\n            case 53:\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v33 *= 2;\n                    break;\n                }\n            default:\n                *(v7) = v33;\n            }\n            if (v26 <= 53)\n            {\n                v27 = v26;\n            }\n        }\n        v31 = 1;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        *(v7) = v33;\n        return stack_base + 0;\n    }\n    __assert_fail(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_4113e0",
            "funcStartAddr": "0x4113e0",
            "funcEndAddr": "0x41140e",
            "decompiledFuncCode": "int sub_4113e0()\n{\n    unsigned int v1;  // rdi\n    unsigned int v2;  // rsi\n    unsigned long long v3;  // rax\n\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>)) && [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) == 0)\n    {\n        v3 = calloc(v1, v2);\n        if (v3 != 0)\n        {\n            return v3;\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>) || v3 == 0 || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) != 0)\n    {\n        sub_411460(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_40d050",
            "funcStartAddr": "0x40d050",
            "funcEndAddr": "0x40d065",
            "decompiledFuncCode": "int sub_40d050()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned long long *v3;  // rdi\n\n    v0 = v2;\n    free(*(v3));\n}\n"
        },
        {
            "funcName": "sub_411050",
            "funcStartAddr": "0x411050",
            "funcEndAddr": "0x411070",
            "decompiledFuncCode": "int sub_411050()\n{\n    unsigned long long v1;  // r9\n    unsigned long long v2[2];  // r8\n\n    v1 = 0;\n    if (*(v2) != 0)\n    {\n        do\n        {\n            v1 += 1;\n        }\n        while (v2[v1] != 0);\n    }\n}\n"
        },
        {
            "funcName": "sub_413690",
            "funcStartAddr": "0x413690",
            "funcEndAddr": "0x4136aa",
            "decompiledFuncCode": "int sub_413690()\n{\n}\n"
        },
        {
            "funcName": "sub_407cd0",
            "funcStartAddr": "0x407cd0",
            "funcEndAddr": "0x407dca",
            "decompiledFuncCode": "extern unsigned int g_4164f1;\nextern char g_61c758;\nextern unsigned long long stdin;\nextern unsigned long long stdout;\n\nint sub_407cd0()\n{\n    char *v1;  // rdi\n    char *v3;  // rsi\n    unsigned long long v5;  // cc_dep1\n    unsigned long long v6;  // cc_dep2\n    unsigned long v7;  // d\n    char *v8;  // rdi\n    char *v9;  // rsi\n    unsigned long long v10;  // rcx\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // rbx\n    unsigned short v14;  // dx\n    unsigned long v15;  // rax\n    unsigned long long v16;  // rbp\n    unsigned long long v18;  // rax\n\n    if (!(*(v3) != 114))\n    {\n        v8 = \"-\";\n        v10 = 2;\n        v9 = v1;\n        while (v10 != 0)\n        {\n            v10 -= 1;\n            v5 = *(v9);\n            v6 = *(v8);\n            v8 = &v8[v7];\n            v9 = &v9[v7];\n            break;\n        }\n        if ((v5 > v6) - 0 - (v5 < v6) == 0)\n        {\n            g_61c758 = 1;\n            v13 = stdin;\n        }\n        else\n        {\n            v13 = 0;\n            v15 = open(v9, 0x80000, v14);\n            if (v15 >= 0)\n            {\n                v13 = fdopen(v15, v3);\n            }\n        }\n        sub_40b800();\n        v18 = v13;\n        return v18;\n    }\n    else if (*(v3) == 119)\n    {\n        if (v1 != 0)\n        {\n            v12 = ftruncate(0x1, 0x0);\n            if (v12 != 0)\n            {\n                v16 = (unsigned int)sub_40f700();\n                error(0x2, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x4164f1, 0x5));\n            }\n        }\n        if (v1 == 0 || v12 == 0)\n        {\n            return stdout;\n        }\n    }\n    else\n    {\n        __assert_fail(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_407e70",
            "funcStartAddr": "0x407e70",
            "funcEndAddr": "0x40824e",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    char padding_8[8];\n    unsigned long long field_10;\n    char padding_18[24];\n    char field_30;\n    char padding_31[3];\n    char field_34;\n    char field_35;\n    char field_36;\n    char padding_37[9];\n    unsigned long long field_40;\n} struct_0;\n\ntypedef struct struct_1 {\n    char padding_0[6408832];\n    char field_61ca80;\n} struct_1;\n\nextern int512_t g_4149c0;\nextern unsigned int g_416538;\nextern unsigned int g_416545;\nextern char g_61c500;\nextern char g_61c740;\nextern struct_0 *g_61c750;\nextern char g_61c759;\nextern char g_61c75a;\nextern int512_t g_61ca80;\nextern unsigned long long stdout[7];\n\nint sub_407e70()\n{\n    char *v0;  // [bp-0x48]\n    char *v1;  // [bp-0x40]\n    void *v3;  // rsi\n    unsigned long long v4[7];  // rbp\n    unsigned long long v5[2];  // rdi\n    unsigned long long v6;  // r12\n    unsigned long v7;  // rdx\n    unsigned long long v8[2];  // r13\n    unsigned long v9;  // rdx\n    void *v10;  // rdi\n    char *|unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // rsi\n    char *v14;  // rdx\n    unsigned long v15;  // rsi\n    unsigned long long v17;  // r15\n    char *|unsigned long long v19;  // r14\n    unsigned long long v21;  // r10\n    unsigned long long v22;  // r11\n    char *|unsigned long long v23;  // rbp\n    unsigned long long v24;  // r15\n    struct_1 *v25;  // rax\n    char *v27;  // rax\n    unsigned int v29;  // ftop\n    unsigned long long v30;  // rax\n    char v31;  // al\n    char *v33;  // rax\n    unsigned long long v34;  // r15\n    unsigned long long v35;  // rbx\n    char *v36;  // rax\n    char *v37;  // rax\n    void *v38;  // rbx\n    unsigned long long v39;  // r14\n    struct_0 *v40;  // r12\n\n    v4 = v3;\n    v38 = *(v5);\n    v17 = v5[1];\n    v6 = *(v5) + v5[1];\n    if (v7 == 0 && g_61c740 != 0)\n    {\n        v8 = v5;\n        if (*(v5) < *(v5) + v5[1])\n        {\n            while (true)\n            {\n                v38 += 1;\n                v12 = (char)(char)v38[-1];\n                if ((char)v38[-1] != 9)\n                {\n                    v13 = v12;\n                    if (*(v5) + v5[1] == v38)\n                    {\n                        v13 = 10;\n                        v12 = 10;\n                    }\n                    v14 = v4[5];\n                }\n                else\n                {\n                    v13 = 62;\n                    v12 = 62;\n                    v14 = v4[5];\n                }\n                if ((char)v38[-1] == 9 && v4[6] > v4[5] || v4[6] > v4[5] && (char)v38[-1] != 9)\n                {\n                    v4[5] = &v14[1];\n                    *((unsigned long long *)&v14) = v12;\n                }\n                if (v4[6] <= v4[5] && (char)v38[-1] == 9 || v4[6] <= v4[5] && (char)v38[-1] != 9)\n                {\n                    v15 = v13;\n                }\n                if (__overflow((unsigned int)v4, v15) != -1 || (char)v38[-1] == 9 && v4[6] > v4[5] || v4[6] > v4[5] && (char)v38[-1] != 9)\n                {\n                    v38 = *(v8);\n                    v17 = v8[1];\n                }\n                else\n                {\n                    dcgettext(0x0, 0x416538, 0x5);\n                    sub_405dd0(); /* do not return */\n                }\n            }\n        }\n        v40 = g_61c750;\n        v19 = v38 + v17 - 1;\n        while (true)\n        {\n            v21 = v40->field_0;\n            v22 = v40->field_10;\n            if (v40->field_0 != -1)\n            {\n                v23 = (unsigned int)sub_406360();\n            }\n            else\n            {\n                v23 = v38;\n            }\n            if (v22 != -1)\n            {\n                v19 = (unsigned int)sub_406470();\n            }\n            if ((0xffff00ff0000 & *((long long *)&v40->field_30)) != 0 || v40->field_36 != 0 || v40->field_0 == -1 && v21 == -1 && v40->field_30 != 0 || v21 == -1 && v40->field_30 != 0 && v22 != -1)\n            {\n                v24 = *(v19);\n                *(v19) = 0;\n                if (*(&((char *)&g_61ca80)[(unsigned long long)*(v23)]) != 0)\n                {\n                    do\n                    {\n                        v23 = &v23[1];\n                        v25 = (unsigned long long)*(v23);\n                    }\n                    while (*((char *)(v25 + &g_61ca80)) != 0);\n                }\n                v0 = v23;\n                if (v23 <= v19)\n                {\n                    if (v40->field_36 != 0)\n                    {\n                        sub_405a40();\n                    }\n                    else if (v40->field_34 != 0)\n                    {\n                        strtold((unsigned int)v23, (unsigned int)&v0);\n                        [D] PutI(904:F64x8)[t0,0] = t1\n                        [D] PutI(968:I8x8)[t0,0] = 0x01\n                        [D] PutI(968:I8x8)[t0,0] = 0x00\n                        v29 = ftop<4> + 1;\n                    }\n                    else if ((0xff0000ff0000 & *((long long *)&v40->field_30)) != 0)\n                    {\n                        v27 = v23;\n                        if (v23 < v19)\n                        {\n                            v30 = 0;\n                            v31 = *(v23) == 45;\n                            v27 = &v23[rax<8>];\n                        }\n                        v1 = v27;\n                        if (sub_405930() > 47)\n                        {\n                            v33 = v1;\n                            if (v40->field_35 != 0)\n                            {\n                                v33 = &v33[-18446744073709551615 + -1 * (unsigned long long)(char)(*(&((char *)&g_4149c0)[(unsigned long long)*(v33)]) < 1)];\n                            }\n                            v0 = v33;\n                        }\n                    }\n                }\n                if (v23 > v19 || (0xff0000ff0000 & *((long long *)&v40->field_30)) == 0 && v40->field_36 == 0 && v40->field_34 == 0)\n                {\n                    v0 = v19;\n                }\n                *((unsigned long long *)&v19) = v24;\n            }\n            while (true)\n            {\n                v34 = (unsigned int)sub_405eb0();\n                v35 = (unsigned int)sub_405eb0();\n                while (true)\n                {\n                    v34 -= 1;\n                    if (v34 == -1)\n                    {\n                        break;\n                    }\n                    v36 = stdout[5];\n                    if (stdout[5] < stdout[6])\n                    {\n                        stdout[5] = stdout[5] + 1;\n                        *(v36) = 32;\n                    }\n                    else\n                    {\n                        __overflow((unsigned int)stdout, 0x20);\n                    }\n                }\n                if (v35 != 0)\n                {\n                    do\n                    {\n                        v37 = stdout[5];\n                        if (stdout[5] < stdout[6])\n                        {\n                            stdout[5] = stdout[5] + 1;\n                            *(v37) = 95;\n                        }\n                        else\n                        {\n                            __overflow((unsigned int)stdout, 0x5f);\n                        }\n                        v35 -= 1;\n                    }\n                    while (v35 != 1);\n                    v11 = stdout[5];\n                    if (stdout[5] < stdout[6])\n                    {\n                        stdout[5] = stdout[5] + 1;\n                        *(v11) = 10;\n                    }\n                    else\n                    {\n                        v11 = __overflow((unsigned int)stdout, 0xa);\n                    }\n                }\n                else\n                {\n                    v11 = __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x416545, 0x5));\n                }\n                if (v40 == 0)\n                {\n                    break;\n                }\n                v40 = v40->field_40;\n                if (g_61c750->field_40 != 0)\n                {\n                    v38 = *(v8);\n                    v39 = *(v8) + v8[1] - 1;\n                    if (g_61c750->field_40 != 0)\n                    {\n                        break;\n                    }\n                }\n                else\n                {\n                    if (g_61c759 != 0 || g_61c75a != 0)\n                    {\n                        break;\n                    }\n                }\n            }\n            if (g_61c750->field_40 != 0 && v40 != 0)\n            {\n                v21 = v40->field_0;\n                v22 = v40->field_10;\n            }\n            else\n            {\n                return v11;\n            }\n        }\n    }\n    if (g_61c740 == 0 || v7 != 0)\n    {\n        v9 = v5[1];\n        v10 = *(v5);\n        *((char *)(v6 - 1)) = g_61c500;\n        v11 = fwrite_unlocked(v10, 0x1, v9, v3);\n        if (v17 == v11)\n        {\n            *((char *)(v6 - 1)) = 0;\n        }\n        else\n        {\n            dcgettext(0x0, 0x416538, 0x5);\n            sub_405dd0(); /* do not return */\n        }\n    }\n    if (v17 == v11 || v7 == 0 && g_61c740 != 0)\n    {\n        return v11;\n    }\n}\n"
        },
        {
            "funcName": "sub_40f550",
            "funcStartAddr": "0x40f550",
            "funcEndAddr": "0x40f5bd",
            "decompiledFuncCode": "int sub_40f550()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_40f030();\n}\n"
        },
        {
            "funcName": "sub_4058b1",
            "funcStartAddr": "0x4058b1",
            "funcEndAddr": "0x405908",
            "decompiledFuncCode": "extern char g_61c5c8;\nextern unsigned long long g_61c5d0;\n\nint sub_4058b1()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // rax\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long long v9;  // rbx\n    unsigned long long v10;  // r12\n\n    if (g_61c5c8 == 0)\n    {\n        v2 = stack_base + 0;\n        v1 = v5;\n        v0 = v6;\n        while (true)\n        {\n            if (g_61c5d0 >= 0)\n            {\n                break;\n            }\n            g_61c5d0 = g_61c5d0 + 1;\n            *((long long *)(6405680 + (v7 + 1) * 8))();\n        }\n        v9 = v0;\n        v10 = v1;\n        g_61c5c8 = 1;\n        return sub_40585b();\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_40d330",
            "funcStartAddr": "0x40d330",
            "funcEndAddr": "0x40d368",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[10];\n    char field_a;\n} struct_0;\n\nint sub_40d330()\n{\n    struct_0 *v1;  // rsi\n    char *v2;  // rcx\n    unsigned long long v3;  // rdx\n    unsigned long long v5;  // rdi\n\n    v2 = &v1->field_a;\n    v1->field_a = 0;\n    while (true)\n    {\n        v2 = &v2[-1];\n        *(v2) = (unsigned int)v3 - ((unsigned int)rdi<8> * 3435973837 >> 35) * 10 + 48;\n        if ((unsigned int)v3 <= 9)\n        {\n            break;\n        }\n        v5 = v3;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40cb20",
            "funcStartAddr": "0x40cb20",
            "funcEndAddr": "0x40cd76",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    struct struct_1 *field_48;\n} struct_0;\n\ntypedef struct struct_2 {\n    char padding_0[16];\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    struct struct_3 *field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n} struct_2;\n\ntypedef struct struct_3 {\n    char padding_0[8];\n    unsigned int field_8;\n    unsigned int field_c;\n    char field_10;\n} struct_3;\n\nint sub_40cb20()\n{\n    void tmp_10;  // tmp #10\n    void tmp_19;  // tmp #19\n    unsigned long long v0[2];  // [bp-0x20]\n    unsigned long v2;  // rsi\n    unsigned long long v3;  // rdx\n    unsigned long long *v4;  // r12\n    struct_0 *v5;  // rdi\n    struct_2 *v6;  // rbx\n    unsigned long long v7;  // rdx\n    unsigned long long v9;  // rax\n    uint128_t v10;  // xmm1\n    unsigned int v11;  // ymm1\n    struct_3 *v12;  // rdx\n    unsigned long|uint128_t|unsigned int v13;  // xmm1lq\n    uint128_t v14;  // xmm0\n    unsigned int v15;  // ymm0\n    unsigned long long v16;  // xmm0lq\n    unsigned long long v17;  // rax\n    uint128_t v18;  // xmm0\n    unsigned int v19;  // ymm0\n    unsigned long long v20;  // xmm0lq\n    struct_3 *v22;  // rdx\n    uint128_t v23;  // xmm2\n    unsigned int v24;  // ymm2\n    uint128_t v25;  // xmm0\n    uint128_t v26;  // xmm0\n    unsigned int v27;  // ymm0\n    unsigned long|uint128_t|unsigned int v28;  // xmm1\n    uint128_t v29;  // xmm1\n    unsigned int v30;  // ymm1\n    uint128_t v31;  // xmm0\n    unsigned long long v32;  // rax\n    unsigned long long v33;  // rax\n    unsigned long long v34[2];  // r12\n    unsigned long long v35[2];  // rax\n    unsigned long long v36;  // rdx\n\n    if (v2 != 0)\n    {\n        v4 = v3;\n        v6 = v5;\n        v7 = sub_40be60();\n        if (v7 != 0)\n        {\n            if (v4 != 0)\n            {\n                *(v4) = v7;\n            }\n            return 0;\n        }\n        if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x10<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n        {\n            v13 = 0;\n            v12 = v6->field_28;\n            v13 = v5->field_18;\n            v9 = v6->field_10;\n            v14 = 0;\n            v15 = v9;\n            xmm0<8> = Conv(128->64, (xmm0<16> * Conv(32->128, Load(addr=(rdx<8> + 0x8<64>), size=4, endness=Iend_LE))))\n        }\n        else\n        {\n            v10 = 0;\n            tmp_10 = v6->field_18 % 2 | (unsigned int)v6->field_18 & 1;\n            v9 = v6->field_10;\n            v11 = tmp_10;\n            v12 = v6->field_28;\n            v13 = (unsigned long long)(unsigned int)xmm1<16> * 2;\n            tmp_19 = v9;\n            v17 = (unsigned int)v9 & 1;\n            v18 = 0;\n            v19 = tmp_19 >> 1 | v17;\n            xmm0<8> = Conv(128->64, ((xmm0<16> * 0x2<8>) * Conv(32->128, Load(addr=(rdx<8> + 0x8<64>), size=4, endness=Iend_LE))))\n        }\n        if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n        {\n            sub_40bf80();\n            v22 = v6->field_28;\n            v23 = 0;\n            v24 = v6->field_28->field_8;\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x10<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n            {\n                v25 = 0;\n                v25 = (unsigned int)v5->field_10;\n            }\n            else\n            {\n                v26 = 0;\n                v27 = v5->field_10 >> 1 | (unsigned int)v5->field_10 & 1;\n                v25 = xmm0<16> * 2;\n            }\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x10<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n            {\n                v28 = 0;\n                v28 = v5->field_18;\n            }\n            else\n            {\n                v29 = 0;\n                v30 = v5->field_18 >> 1 | (unsigned int)v5->field_18 & 1;\n                v28 = (unsigned long long)(unsigned int)xmm1<16> * 2;\n            }\n            if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n            {\n                xmm0<16> = (xmm0<16> * Conv(32->128, Load(addr=(rdx<8> + 0xc<64>), size=4, endness=Iend_LE)))\n                if (v22->field_10 == 0)\n                {\n                    v31 *= xmm2<16>;\n                }\n                if (((char)(BinaryOp CmpF & 69) & 1) != 0 && ((char)(BinaryOp CmpF & 69) & 1) == 0)\n                {\n                    v32 = sub_40c920();\n                    if (v32 != 0)\n                    {\n                        v33 = sub_40be60();\n                    }\n                }\n            }\n        }\n    }\n    if (...)\n    {\n        v34 = v0;\n        if (*(v0) != 0)\n        {\n            v35 = v6->field_48;\n            if (v6->field_48 != 0)\n            {\n                v6->field_48 = v5->field_48->field_8;\n            }\n            else\n            {\n                v35 = malloc(0x10);\n            }\n        }\n        else\n        {\n            v0[0] = v2;\n            v6->field_20 = v6->field_20 + 1;\n            v6->field_18 = v6->field_18 + 1;\n            return 1;\n        }\n    }\n    if (v2 == 0 || ((char)(BinaryOp CmpF & 69) & 1) == 0 && v7 == 0 && (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1 && v32 != 0 && ((char)(BinaryOp CmpF & 69) & 1) != 0 && (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1 && v33 != 0)\n    {\n        abort(); /* do not return */\n    }\n    if (...)\n    {\n        return -18446744069414584321;\n    }\n    if (...)\n    {\n        v36 = v34[1];\n        v35[0] = v2;\n        v35[1] = v36;\n        v34[1] = v35;\n        v6->field_20 = v6->field_20 + 1;\n        return 1;\n    }\n}\n"
        },
        {
            "funcName": "sub_40b250",
            "funcStartAddr": "0x40b250",
            "funcEndAddr": "0x40b351",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[4287192];\n    unsigned long long field_416ad8;\n    unsigned int field_416adc;\n    unsigned short field_416ade;\n} struct_1;\n\nextern int512_t g_416ad8;\nextern int512_t g_416adc;\nextern int512_t g_416ade;\nextern int512_t g_416ae0;\n\nint sub_40b250()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n    unsigned int v3[7];  // rdi\n    unsigned long long v4;  // rax\n    unsigned int v5[7];  // rbx\n    unsigned long long v6;  // r8\n    unsigned long long v7;  // rcx\n    unsigned long v8;  // cc_ndep\n    unsigned long long v9;  // rdi\n    unsigned long long v10;  // cc_dep2\n    unsigned long long v11;  // rsi\n    unsigned long long v12;  // rdx\n    void *v13;  // rdx\n    struct_1 *v14;  // rcx\n    unsigned long long *v15;  // rdi\n    unsigned long long v16;  // rdx\n    unsigned long long *v17;  // rsi\n    unsigned long long v18;  // rcx\n    unsigned long v19;  // d\n\n    v0 = v2;\n    v4 = v3[3];\n    v5 = v3;\n    v12 = v3[2 + 1];\n    v6 = (0 - (unsigned long long)(char)(v3[3] < 56) & -64) - -128;\n    v7 = (0 - (unsigned long long)(char)(v3[3] < 56) & -0x10) + 31;\n    v8 = (char)(v3[3] < 56);\n    v9 = (0 - (unsigned long long)(char)(v3[3] < 56) & -0x10) + 30;\n    v10 = v5[2];\n    v11 = (unsigned int)v4 + v5[2];\n    v5[2] = (unsigned int)v4 + v5[2];\n    if ((char)[D] amd64g_calculate_condition(0x2<64>, 0x3<64>, rax<8>, cc_dep2<8>, cc_ndep<8>))\n    {\n        v12 = (unsigned int)v12 + 1;\n        v5[2 + 1] = v12;\n    }\n    v5[3 + 1 + v9] = (unsigned long long)((unsigned int)v4 + v5[2]) * 8;\n    *((unsigned long long *)&v5[3 + 1 + v7]) = (unsigned int)v12 * 8 | v11;\n    v13 = (char *)&v5[3 + 1] + v4;\n    v14 = v6 - v4 - 8;\n    if (!(v6 - v4 - 8 < 8))\n    {\n        v15 = v13 + 8 & -8;\n        *((long long *)v13) = 128;\n        *((long long *)(v13 + v14 - 8)) = *((long long *)(v14 + &g_416ad8));\n        v16 = v13 - (v13 + 8 & -8);\n        v17 = (char *)&g_416ae0 + -1 * v16;\n        for (v18 = &v14->padding_0[v16] >> 3; v18 != 0; v17 = &v17[v19])\n        {\n            v18 -= 1;\n            *(v15) = *(v17);\n            v15 = &v15[v19];\n        }\n    }\n    else if (!((v14 & 4) == 0))\n    {\n        *((int *)v13) = 128;\n        *((int *)(v13 + v14 - 4)) = *((int *)(v14 + &g_416adc));\n    }\n    else if (v14 != 0)\n    {\n        *((char *)v13) = 128;\n        if ((v14 & 2) != 0)\n        {\n            *((short *)(v13 + v14 - 2)) = *((short *)(v14 + &g_416ade));\n        }\n    }\n    sub_40aae0();\n}\n"
        },
        {
            "funcName": "sub_413f38",
            "funcStartAddr": "0x413f38",
            "funcEndAddr": "0x413f58",
            "decompiledFuncCode": "extern unsigned long long g_61be20;\n\nint sub_413f38()\n{\n    unsigned long long *v1;  // rbx\n    unsigned long long v2;  // rax\n    unsigned long v4;  // rdx\n\n    v1 = &g_61be20;\n    while (true)\n    {\n        v2 = *(v1);\n        if (*(v1) == -1)\n        {\n            break;\n        }\n        rax<8>();\n        v1 = &v1[-1];\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_40c170",
            "funcStartAddr": "0x40c170",
            "funcEndAddr": "0x40c175",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[32];\n    unsigned long long field_20;\n} struct_0;\n\nint sub_40c170()\n{\n    struct_0 *v1;  // rdi\n\n    return v1->field_20;\n}\n"
        },
        {
            "funcName": "sub_40c150",
            "funcStartAddr": "0x40c150",
            "funcEndAddr": "0x40c155",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_0;\n\nint sub_40c150()\n{\n    struct_0 *v1;  // rdi\n\n    return v1->field_10;\n}\n"
        },
        {
            "funcName": "sub_40f2c0",
            "funcStartAddr": "0x40f2c0",
            "funcEndAddr": "0x40f332",
            "decompiledFuncCode": "extern int512_t g_61cce0;\n\nint sub_40f2c0()\n{\n    unsigned long v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned long v2;  // [bp-0x58]\n    unsigned long v3;  // [bp-0x40]\n    unsigned int v5;  // [bp+0x100008]\n    unsigned long v6;  // r8\n    unsigned long long v7[7];  // rbx\n    unsigned long v8;  // rcx\n\n    v7 = (v6 == 0? &g_61cce0 : v6);\n    v3 = v8;\n    *((unsigned long long [7])&v2) = v7[6];\n    *((unsigned long long [7])&v1) = v7[5];\n    v0 = &v7[1];\n    *(__errno_location()) = v5;\n    return sub_40de00();\n}\n"
        },
        {
            "funcName": "sub_4102b0",
            "funcStartAddr": "0x4102b0",
            "funcEndAddr": "0x41038f",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    char padding_8[24];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    unsigned long long field_30;\n    unsigned long long field_38;\n    char padding_40[8];\n    unsigned long long field_48;\n    char padding_50[24];\n    char field_68;\n    char padding_69[31];\n    unsigned long long field_88;\n    unsigned long long field_90;\n    char padding_98[72];\n    unsigned long long field_e0;\n    unsigned long long field_e8;\n} struct_0;\n\nint sub_4102b0()\n{\n    void tmp_19;  // tmp #19\n    struct_0 *v1;  // rdi\n    struct_0 *v2;  // rbx\n    unsigned long long v3;  // rdx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rcx\n    unsigned long long *v7;  // rdx\n    unsigned long long *v8;  // rdx\n    unsigned long long v9;  // rax\n\n    v2 = v1;\n    if (v1->field_30 == v1->field_28)\n    {\n        v1->field_68 = v1->field_68 | 2;\n    }\n    v3 = v2->field_38;\n    v4 = v1->field_30 + v1->field_48 & !(v2->field_48);\n    v5 = v2->field_20;\n    v2->field_30 = v1->field_30 + v1->field_48 & !(v2->field_48);\n    if (v4 - v5 > v4 - v5)\n    {\n        v2->field_30 = v1->field_38;\n        v4 = v3;\n    }\n    v2->field_28 = v4;\n    v7 = v2->field_88;\n    if (v2->field_90 - v2->field_88 <= 7)\n    {\n        _obstack_newchunk();\n        v7 = v2->field_88;\n    }\n    *(v7) = v1->field_28;\n    v8 = v2->field_e0;\n    tmp_19 = v2->field_e8;\n    v2->field_88 = v2->field_88 + 8;\n    v9 = tmp_19 + -0x1 * v8;\n    if (tmp_19 + -0x1 * v8 <= 7)\n    {\n        v9 = _obstack_newchunk();\n        v8 = v2->field_e0;\n    }\n    *(v8) = v1->field_30 - v1->field_28 - 1;\n    v2->field_e0 = v2->field_e0 + 8;\n    v2->field_0 = v2->field_0 + 1;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_40b360",
            "funcStartAddr": "0x40b360",
            "funcEndAddr": "0x40b644",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[24];\n    unsigned int field_18;\n    char field_1c;\n} struct_0;\n\nint sub_40b360()\n{\n    void tmp_11;  // tmp #11\n    unsigned long long v1;  // rsi\n    unsigned long long v2;  // r13\n    struct_0 *v3;  // rdx\n    struct_0 *v4;  // r12\n    void *v5;  // rdi\n    unsigned long long v6;  // rbp\n    unsigned long long v7;  // r15\n    unsigned long v8;  // r14\n    unsigned long long|void * v9;  // rax\n    unsigned int v10;  // esi\n    unsigned long long v12;  // rcx\n    unsigned long long v13;  // rdx\n    unsigned int v16;  // r15d\n    unsigned long long v17;  // rcx\n    unsigned long long v19;  // rdx\n    unsigned long long v21;  // rcx\n    unsigned long long v22;  // rcx\n    void *v23;  // rbx\n    uint128_t v24[4];  // rbp\n    void *v25;  // r14\n    unsigned long long v26;  // r15\n    uint128_t v27;  // xmm0\n    unsigned long long v29;  // rcx\n    unsigned long long v30;  // rax\n    void *v31;  // rsi\n    unsigned long long v33;  // r14\n    unsigned long long v34;  // rdx\n    unsigned long long v35;  // rsi\n    unsigned long v36;  // r13\n\n    v2 = v1;\n    v4 = v3;\n    v23 = v5;\n    v9 = v3->field_18;\n    if (v3->field_18 != 0)\n    {\n        v6 = v9;\n        v7 = &v4->field_1c;\n        v8 = (!(128 - v9 <= v1)? v1 : 128 - v9);\n        v9 = memcpy(&(struct struct_0 *)&v4->field_1c->padding_0[v9], v5, (!(128 - v9 <= v1)? v1 : 128 - v9));\n        v10 = v4->field_18 + (unsigned int)v8;\n        v4->field_18 = v4->field_18 + (unsigned int)v8;\n        if (v10 > 64)\n        {\n            sub_40aae0();\n            v12 = v4->field_18;\n            v9 = &(struct struct_0 *)&v3->field_1c->padding_0[v6 + v8 & -64];\n            v13 = v4->field_18 & 63;\n            v4->field_18 = v4->field_18 & 63;\n            if (!((unsigned int)v12 < 8))\n            {\n                *((long long *)&v4->field_1c) = *((long long *)v9);\n                v12 = v13;\n                *((long long *)(v7 + v12 - 8)) = *((long long *)&((char *)v9)[v12 + -8]);\n                v9 -= v7 - (&v4[1].padding_0[7] & -8);\n                v16 = (unsigned int)(v7 - (&v4[1].padding_0[7] & -8) + v12) & -8;\n                if (v16 >= 8)\n                {\n                    v19 = 0;\n                    do\n                    {\n                        v22 = v19;\n                        v19 = (unsigned int)v19 + 8;\n                        *((long long *)((&v4[1].padding_0[7] & -8) + v22)) = *((long long *)(v9 + v22));\n                    }\n                    while ((unsigned int)v19 < (v16 & -8));\n                }\n            }\n            else if (!((v12 & 4) == 0))\n            {\n                v17 = (unsigned int)*((int *)v9);\n                *((int *)&v4->field_1c) = *((int *)v9);\n                v9 = (unsigned int)*((int *)&((char *)v9)[v12 + -4]);\n                *((unsigned int *)(v7 + v12 - 4)) = v9;\n            }\n            else if ((unsigned int)v12 != 0)\n            {\n                v21 = (unsigned int)v12 & 2;\n                v4->field_1c = *((char *)v9);\n                if (((unsigned int)v12 & 2) != 0)\n                {\n                    v9 = (unsigned short)*((short *)&((char *)v9)[v12 + -2]);\n                    *((unsigned long long *)(v7 + v12 - 2)) = v9;\n                }\n            }\n        }\n        v23 = v5 + v8;\n        v2 -= v8;\n    }\n    if (v2 > 63)\n    {\n        if ((v23 & 3) != 0)\n        {\n            v24 = &v4->field_1c;\n            if (v2 != 64)\n            {\n                v26 = v2 - 65 >> 6;\n                v25 = ((v2 - 65 >> 6) + 1) * 64 + v23;\n                while (true)\n                {\n                    v27 = *((int128_t *)v23);\n                    v23 += 64;\n                    *((uint128_t *)&v24) = v27;\n                    *((int128_t *)&v24[2]) = (int128_t)v23[-48];\n                    *((int128_t *)&v24[4]) = (int128_t)v23[-32];\n                    *((int128_t *)&v24[6]) = (int128_t)v23[-16];\n                    sub_40aae0();\n                    if (v23 == v25)\n                    {\n                        break;\n                    }\n                }\n                v2 = v2 + (0 - v26) * 64 - 64;\n            }\n            else\n            {\n                v25 = v23;\n            }\n        }\n        else\n        {\n            tmp_11 = v2;\n            v2 = (unsigned int)v2 & 63;\n            v23 += tmp_11 & -64;\n            v9 = sub_40aae0();\n        }\n    }\n    if ((v23 & 3) == 0 || v2 <= 63)\n    {\n        if (v2 == 0)\n        {\n            return v9;\n        }\n        v24 = &v4->field_1c;\n        v25 = v23;\n    }\n    if (v2 != 0 || (v23 & 3) != 0 && v2 > 63)\n    {\n        v29 = v4->field_18;\n        v30 = v2;\n        v31 = (char *)v24 + (unsigned long long)v4->field_18;\n        if (!((unsigned int)v2 < 8))\n        {\n            *((long long *)v31) = *((long long *)v25);\n            *((long long *)&((char *)v31)[v2 + -8]) = *((long long *)&((char *)v25)[v2 + -8]);\n            v33 = v25 - (v31 - (v31 + 8 & -8));\n            v30 = (unsigned int)(v31 - (v31 + 8 & -8) + v2) & -8;\n            if (((unsigned int)(v31 - (v31 + 8 & -8) + v2) & -8) >= 8)\n            {\n                v30 = (unsigned int)v30 & -8;\n                v34 = 0;\n                do\n                {\n                    v35 = v34;\n                    v34 = (unsigned int)v34 + 8;\n                    *((long long *)((v31 + 8 & -8) + v35)) = *((long long *)(v33 + v35));\n                }\n                while ((unsigned int)v34 < (unsigned int)v30);\n            }\n        }\n        else if (!((v2 & 4) == 0))\n        {\n            *((int *)v31) = *((int *)v25);\n            v30 = (unsigned int)*((int *)&((char *)v25)[v2 + -4]);\n            *((int *)&((char *)v31)[v2 + -4]) = *((int *)&((char *)v25)[v2 + -4]);\n        }\n        else if ((unsigned int)v2 != 0)\n        {\n            *((char *)v31) = *((char *)v25);\n            if ((v30 & 2) != 0)\n            {\n                v30 = (unsigned short)*((short *)&((char *)v25)[v2 + -2]);\n                *((short *)&((char *)v31)[v2 + -2]) = *((short *)&((char *)v25)[v2 + -2]);\n            }\n        }\n        v36 = v2 + v29;\n        if (v36 > 63)\n        {\n            v36 -= 64;\n            sub_40aae0();\n            v30 = memcpy(v24, &v4[3].padding_0[5], v36);\n        }\n        v4->field_18 = v36;\n        return v30;\n    }\n}\n"
        },
        {
            "funcName": "sub_40c840",
            "funcStartAddr": "0x40c840",
            "funcEndAddr": "0x40c910",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_40c840()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x8]\n    unsigned long v3;  // r12\n    unsigned long long v4[10];  // rdi\n    unsigned long long v5[10];  // r12\n    unsigned long v6;  // rbx\n    unsigned long long v7;  // rdi\n    unsigned long long v9[2];  // rbx\n    unsigned long long v10;  // rdi\n    unsigned long long v11;  // rax\n    unsigned long long v12[2];  // rbp\n    struct_0 *v13;  // rdi\n    void *v14;  // rbx\n    struct_0 *v15;  // rdi\n    void *v16;  // rbx\n\n    v1 = v3;\n    v5 = v4;\n    v0 = v6;\n    v12 = *(v4);\n    v11 = v4[1];\n    if (v4[8] != 0 && v4[4] != 0 && *(v4) < v4[1])\n    {\n        while (true)\n        {\n            v7 = *(v12);\n            if (*(v12) == 0)\n            {\n                v12 = &v12[2];\n                if (v11 <= v12)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v9 = v12;\n                while (true)\n                {\n                    *((long long *)(r12<8> + 64))();\n                    v9 = v9[1];\n                    if (v9 == 0)\n                    {\n                        break;\n                    }\n                    v10 = *(v9);\n                }\n                v11 = v5[1];\n                v12 = &v12[2];\n                if (v5[1] <= v12)\n                {\n                    break;\n                }\n            }\n        }\n        v12 = *(v5);\n    }\n    if ((*(v4) < v4[1] || v4[8] == 0 || v4[4] == 0) && v12 < v11)\n    {\n        do\n        {\n            v13 = v12[1];\n            if (v12[1] != 0)\n            {\n                while (true)\n                {\n                    v14 = v13->field_8;\n                    free(v13);\n                    v13 = v14;\n                    if (v14 == 0)\n                    {\n                        break;\n                    }\n                }\n            }\n            v12 = &v12[2];\n        }\n        while (v5[1] > v12);\n    }\n    v15 = v5[9];\n    if (v5[9] != 0)\n    {\n        while (true)\n        {\n            v16 = v15->field_8;\n            free(v15);\n            v15 = v16;\n            if (v16 == 0)\n            {\n                break;\n            }\n        }\n    }\n    free(*(v5));\n}\n"
        },
        {
            "funcName": "sub_40f8ea",
            "funcStartAddr": "0x40f8ea",
            "funcEndAddr": "0x40f8ef",
            "decompiledFuncCode": "int sub_40f8ea()\n{\n}\n"
        },
        {
            "funcName": "sub_406470",
            "funcStartAddr": "0x406470",
            "funcEndAddr": "0x406594",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n    unsigned long long field_18;\n    char padding_20[17];\n    char field_31;\n} struct_0;\n\nextern unsigned int g_61c424;\nextern int512_t g_61ca80;\n\nint sub_406470()\n{\n    struct_0 *v1;  // rdx\n    unsigned long long v2;  // r9\n    unsigned long long v3;  // rdi\n    unsigned long v4;  // rsi\n    unsigned long v6;  // rsi\n    unsigned long long v7;  // rsi\n    char *v8;  // rax\n    unsigned long long v9;  // r8\n\n    v2 = v1->field_18;\n    v8 = v3;\n    v6 = v1->field_10 + (char)(v1->field_18 < 1);\n    if (g_61c424 != 128)\n    {\n        if (v8 > v3)\n        {\n            v9 = v6 - 1;\n            if (v6 != 0)\n            {\n                while (true)\n                {\n                    if (g_61c424 != *(v8))\n                    {\n                        v8 = &v8[1];\n                        if (v8 <= v8)\n                        {\n                            break;\n                        }\n                    }\n                    else\n                    {\n                        if (v8 <= v8 || v2 == 0 && v9 == 0)\n                        {\n                            break;\n                        }\n                        v8 = &v8[1];\n                        if (v8 <= v8)\n                        {\n                            break;\n                        }\n                        v9 -= 1;\n                    }\n                }\n                if (false)\n                {\n                    return v8;\n                }\n            }\n        }\n    }\n    else\n    {\n        if (v8 > v3 && v1->field_10 + (char)(v1->field_18 < 1) != 0)\n        {\n            while (true)\n            {\n                v7 = (char)*(&((char *)&g_61ca80)[(unsigned long long)*(v8)]);\n                while (true)\n                {\n                    if (v7 != 0)\n                    {\n                        v8 = &v8[1];\n                        if (v8 > v8)\n                        {\n                            break;\n                        }\n                    }\n                    else if (v8 > v8)\n                    {\n                        while (true)\n                        {\n                            v8 = &v8[1];\n                            v8 = v3 + v4 - 1;\n                            if (false)\n                            {\n                                v7 = (char)*(&((char *)&g_61ca80)[(unsigned long long)*(v8)]);\n                                if (v1->field_10 + (char)(v1->field_18 < 1) - 2 != -1)\n                                {\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n                if (v7 != 0)\n                {\n                    v7 = (char)*(&((char *)&g_61ca80)[(unsigned long long)*(v8)]);\n                }\n            }\n        }\n    }\n    return v8;\n    if (v1->field_31 != 0 && v8 > v8)\n    {\n        while (*(&((char *)&g_61ca80)[(unsigned long long)*(v8)]) != 0)\n        {\n            v8 = &v8[1];\n            return (v8 <= &v8[v2]? v8 : &v8[v2]);\n        }\n    }\n    return (v8 <= &v8[v2]? v8 : &v8[v2]);\n}\n"
        },
        {
            "funcName": "sub_407a30",
            "funcStartAddr": "0x407a30",
            "funcEndAddr": "0x407bdb",
            "decompiledFuncCode": "extern unsigned int g_61c420;\nextern unsigned int g_61c69c;\nextern unsigned long long g_61c6a8;\nextern unsigned int g_61c6c0;\n\nint sub_407a30()\n{\n    unsigned long|unsigned long long v0;  // [bp-0xe0]\n    unsigned int v1;  // [bp-0xd4]\n    char v2;  // [bp-0xc8]\n    char v3;  // [bp-0xc0]\n    unsigned long long v6;  // r13\n    unsigned int *v9;  // rbp\n    unsigned long long v11;  // rax\n    uint128_t v13;  // xmm2\n    unsigned long long v14;  // xmm2lq\n    unsigned long|unsigned int v17;  // r15d\n    unsigned int v19[2];  // rdi\n    unsigned long long v23;  // rax\n\n    if (sub_40da00() >= 0)\n    {\n        if (g_61c420 + 1 < g_61c69c)\n        {\n            sub_405fb0();\n            while (g_61c69c > 0)\n            {\n                if (sub_405fb0() == 0)\n                {\n                    break;\n                }\n            }\n        }\n        v9 = __errno_location();\n        v0 = 0x3fd0000000000000;\n        while (true)\n        {\n            g_61c6a8 = 0;\n            v2 = pthread_sigmask(0x0, 0x61c6c0, (unsigned int)&v3) == 0;\n            v11 = fork();\n            v17 = *(v9);\n            v6 = v11;\n            if ((unsigned int)v11 != 0)\n            {\n                g_61c6a8 = g_61c6a8;\n            }\n            if (v2 != 0)\n            {\n                v1 = v11;\n                sub_407880();\n                v11 = v1;\n            }\n            if ((unsigned int)v11 != 0 || v2 != 0)\n            {\n                *(v9) = v17;\n                if ((unsigned int)v11 < 0)\n                {\n                    if ((unsigned int)v17 == 11)\n                    {\n                        sub_411620();\n                        v13 = 0;\n                        v14 = v0;\n                        v0 = (unsigned long long)(unsigned int)xmm2<16> * 2;\n                        while (g_61c69c > 0)\n                        {\n                            if (sub_405fb0() == 0)\n                            {\n                                break;\n                            }\n                        }\n                        v17 = *(v9);\n                    }\n                    close(v19[0]);\n                    close(v19[1]);\n                    *((unsigned long *)&v9) = v17;\n                }\n                else if (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>)))\n                {\n                    g_61c69c = g_61c69c + 1;\n                }\n            }\n            if (((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>) || (unsigned int)v11 == 0) && ((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>) || v2 == 0) && ((unsigned int)v11 == 0 || (unsigned int)v11 >= 0) && (v2 == 0 || (unsigned int)v11 >= 0))\n            {\n                v6 = 0;\n                close(0x0);\n                close(0x1);\n            }\n        }\n    }\n    else\n    {\n        v6 = -18446744069414584321;\n    }\n    v23 = v6;\n    return v23;\n}\n"
        },
        {
            "funcName": "sub_411b13",
            "funcStartAddr": "0x411b13",
            "funcEndAddr": "0x411b18",
            "decompiledFuncCode": "int sub_411b13()\n{\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_412f90",
            "funcStartAddr": "0x412f90",
            "funcEndAddr": "0x412fa8",
            "decompiledFuncCode": "int sub_412f90()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_4128e0();\n}\n"
        },
        {
            "funcName": "sub_40d3c0",
            "funcStartAddr": "0x40d3c0",
            "funcEndAddr": "0x40d554",
            "decompiledFuncCode": "int sub_40d3c0()\n{\n    char v0;  // [bp-0x44]\n    unsigned long long v1;  // [bp-0x40]\n    unsigned long long v3;  // rdi\n    char *v4;  // rbx\n    unsigned long v7;  // rsi\n    unsigned long v8;  // rdx\n    unsigned int v9;  // r15d\n    unsigned short *v10;  // rdx\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rbp\n    unsigned long long v16;  // rax\n    unsigned long long v18;  // r12\n    unsigned long long v19;  // rax\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rax\n\n    v4 = v3;\n    if ((unsigned long long)__ctype_get_mb_cur_max() > 1)\n    {\n        v18 = 0;\n        if (v3 < v3 + v7)\n        {\n            while (true)\n            {\n                v11 = *(v4);\n                if (*(v4) <= 63)\n                {\n                    if (v11 < 37)\n                    {\n                        v12 = (unsigned int)v11 - 32;\n                    }\n                }\n                else\n                {\n                    if (v11 >= 65 && v11 > 95)\n                    {\n                        v13 = (unsigned int)v11 - 97;\n                    }\n                }\n                if ((v11 < 37 || *(v4) > 63) && (*(v4) > 63 || v12 > 3) && (v11 < 65 || *(v4) <= 63 || v11 > 95) && (v11 < 65 || *(v4) <= 63 || v13 > 29))\n                {\n                    v1 = 0;\n                    while (true)\n                    {\n                        v14 = (unsigned int)sub_412fb0();\n                        if (v14 == -1)\n                        {\n                            if (((char)v8 & 1) == 0)\n                            {\n                                break;\n                            }\n                        }\n                        else if (v14 != -2)\n                        {\n                            v16 = wcwidth(*((int *)&v0));\n                            if ((unsigned int)v16 < 0)\n                            {\n                                if (((char)v8 & 2) != 0)\n                                {\n                                    break;\n                                }\n                                if (((char)v8 & 2) == 0)\n                                {\n                                    v19 = iswcntrl(*((int *)&v0));\n                                    if (v19 == 0 && (unsigned int)v18 != 2147483647)\n                                    {\n                                        v18 = (unsigned int)v18 + 1;\n                                    }\n                                }\n                            }\n                            else if (2147483647 - (unsigned int)v18 >= (unsigned int)v16)\n                            {\n                                v18 += v16;\n                            }\n                            if (((char)v8 & 2) == 0 || (unsigned int)v16 >= 0)\n                            {\n                                if (((unsigned int)v16 < 0 || 2147483647 - (unsigned int)v18 < (unsigned int)v16) && ((unsigned int)v18 == 2147483647 || (unsigned int)v16 >= 0) && (v19 == 0 || (unsigned int)v16 >= 0))\n                                {\n                                    v18 = 2147483647;\n                                }\n                                if (((unsigned int)v16 < 0 || 2147483647 - (unsigned int)v18 >= (unsigned int)v16) && ((unsigned int)v16 >= 0 || (unsigned int)v18 != 2147483647 || v19 != 0))\n                                {\n                                    v4 = &v4[(v14 == 0? 1 : rbp<8>)];\n                                    if (mbsinit((unsigned int)&v1) != 0)\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                        else\n                        {\n                            if (((char)v8 & 1) != 0)\n                            {\n                                break;\n                            }\n                            v18 = (unsigned int)v18 + 1;\n                            v4 = v3 + v7;\n                        }\n                    }\n                    if (v14 == -1)\n                    {\n                        v4 = &v4[1];\n                        v18 = (unsigned int)v18 + 1;\n                    }\n                    else if (v14 == -2 || (unsigned int)v16 < 0 && v14 != -1 || v14 == -1 && ((char)v8 & 1) != 0)\n                    {\n                        v18 = -18446744069414584321;\n                    }\n                    else if (true)\n                    {\n                        if (v4 >= v3 + v7)\n                        {\n                            break;\n                        }\n                    }\n                    else if (((unsigned int)v18 == 2147483647 || 2147483647 - (unsigned int)v18 < (unsigned int)v16) && (v19 == 0 || 2147483647 - (unsigned int)v18 < (unsigned int)v16) && ((unsigned int)v18 == 2147483647 || (unsigned int)v16 >= 0) && ((unsigned int)v18 == 2147483647 || v14 != -1) && ((unsigned int)v18 == 2147483647 || v14 != -2) && (v19 == 0 || (unsigned int)v16 >= 0) && (v19 == 0 || v14 != -1) && (v19 == 0 || v14 != -2))\n                    {\n                        v22 = v18;\n                        return v22;\n                    }\n                }\n                v4 = &v4[1];\n                v18 = (unsigned int)v18 + 1;\n            }\n            if ((v11 < 37 || *(v4) > 63) && (*(v4) > 63 || v12 > 3) && (v11 < 65 || *(v4) <= 63 || v11 > 95) && (v11 < 65 || *(v4) <= 63 || v13 > 29))\n            {\n                v18 = -18446744069414584321;\n            }\n            else\n            {\n                v22 = v18;\n                return v22;\n            }\n        }\n    }\n    else\n    {\n        v18 = 0;\n        if (v3 < v3 + v7)\n        {\n            v18 = 0;\n            v9 = (unsigned int)v8 & 2;\n            v10 = *((long long *)(unsigned long long)__ctype_b_loc());\n            while (true)\n            {\n                v4 = &v4[1];\n                v21 = v10[(unsigned long long)v4[-1]];\n                if (((char)(v10[(unsigned long long)v4[-1]] >> 8) & 64) == 0 && v9 != 0)\n                {\n                    break;\n                }\n                if (((char)(v10[(unsigned long long)v4[-1]] >> 8) & 64) != 0 || (v21 & 2) == 0 && v9 == 0)\n                {\n                    if ((unsigned int)v18 == 2147483647)\n                    {\n                        break;\n                    }\n                    v18 = (unsigned int)v18 + 1;\n                }\n            }\n            if (((char)(v10[(unsigned long long)v4[-1]] >> 8) & 64) == 0)\n            {\n                v18 = -18446744069414584321;\n            }\n            else if (v3 + v7 == v4 || ((char)(v10[(unsigned long long)v4[-1]] >> 8) & 64) != 0 || (v21 & 2) == 0 && v9 == 0)\n            {\n                v22 = v18;\n                return v22;\n            }\n        }\n    }\n    if (v3 < v3 + v7)\n    {\n        v18 = -18446744069414584321;\n    }\n    v22 = v18;\n    return v22;\n}\n"
        },
        {
            "funcName": "sub_40a9e0",
            "funcStartAddr": "0x40a9e0",
            "funcEndAddr": "0x40a9e8",
            "decompiledFuncCode": "extern char g_61cbb0;\n\nint sub_40a9e0()\n{\n    char v1;  // dil\n    unsigned long v2;  // rax\n\n    g_61cbb0 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40cda0",
            "funcStartAddr": "0x40cda0",
            "funcEndAddr": "0x40cdd4",
            "decompiledFuncCode": "int sub_40cda0()\n{\n    unsigned long long v0;  // [bp-0x10]\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rax\n\n    v3 = v2;\n    v4 = sub_40cb20();\n    if (v4 != -1)\n    {\n        if (v4 == 0)\n        {\n            v3 = v0;\n        }\n        v5 = v3;\n        return v5;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_40c180",
            "funcStartAddr": "0x40c180",
            "funcEndAddr": "0x40c1cf",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_40c180()\n{\n    unsigned long long v1[2];  // rdi\n    unsigned long long v2[2];  // rsi\n    unsigned long long v3;  // rdi\n    struct_0 *v4;  // rdx\n    unsigned long long v5;  // rcx\n    unsigned long long v6;  // rax\n\n    v2 = *(v1);\n    v3 = v1[1];\n    v6 = 0;\n    if (v2 >= v3)\n    {\n        return 0;\n    }\n    while (true)\n    {\n        if (*(v2) == 0)\n        {\n            v2 = &v2[2];\n            if (v2 >= v3)\n            {\n                break;\n            }\n        }\n        else\n        {\n            v4 = v2[1];\n            v5 = 1;\n            if (v2[1] != 0)\n            {\n                do\n                {\n                    v4 = v4->field_8;\n                    v5 += 1;\n                }\n                while (v4 != 0);\n            }\n            v6 = (v6 < v5? v5 : v6);\n            v2 = &v2[2];\n            if (v2 >= v3)\n            {\n                break;\n            }\n        }\n    }\n    return v6;\n}\n"
        },
        {
            "funcName": "obstack_memory_used",
            "funcStartAddr": "0x4134f0",
            "funcEndAddr": "0x413514",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint _obstack_memory_used()\n{\n    struct_0 *v1;  // rdi\n    unsigned long long v2[2];  // rdx\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rcx\n\n    v2 = v1->field_8;\n    v3 = 0;\n    if (v1->field_8 != 0)\n    {\n        do\n        {\n            v4 = (unsigned long long [2])(*(v2) + -0x1 * v2);\n            v2 = v2[1];\n            v3 += v4;\n        }\n        while (v2 != 0);\n        return v3;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_405d00",
            "funcStartAddr": "0x405d00",
            "funcEndAddr": "0x405d29",
            "decompiledFuncCode": "extern unsigned int g_414f40;\n\nint sub_405d00()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    error(0x2, 0x0, (unsigned long long)dcgettext(0x0, 0x414f40, 0x5));\n}\n"
        },
        {
            "funcName": "sub_40a9d0",
            "funcStartAddr": "0x40a9d0",
            "funcEndAddr": "0x40a9d8",
            "decompiledFuncCode": "extern unsigned long long g_61cbb8;\n\nint sub_40a9d0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long v2;  // rax\n\n    g_61cbb8 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_411f80",
            "funcStartAddr": "0x411f80",
            "funcEndAddr": "0x411ff8",
            "decompiledFuncCode": "int sub_411f80()\n{\n    unsigned int v0;  // [bp+0x0]\n    void *v2;  // rdi\n    unsigned long long v4;  // rax\n    unsigned long long v8;  // rax\n\n    if (fileno(v2) >= 0)\n    {\n        v4 = __freading();\n        if ((v4 == 0 || (unsigned long long)lseek(fileno(v2), 0x0, 0x1) != -1) && sub_412140() != 0)\n        {\n            v8 = fclose(v2);\n            if (v0 != 0)\n            {\n                *(__errno_location()) = v0;\n                v8 = -18446744069414584321;\n            }\n            return v8;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_40b830",
            "funcStartAddr": "0x40b830",
            "funcEndAddr": "0x40b8d6",
            "decompiledFuncCode": "int sub_40b830()\n{\n    char **v1;  // rdi\n    char *v2;  // rsi\n    unsigned long long v3;  // rcx\n    unsigned long long v5;  // rcx\n    unsigned long|unsigned long long v6;  // rax\n    unsigned long long v7;  // rdx\n\n    v2 = *(v1);\n    v7 = *(*(v1));\n    if (*(*(v1)) != 0)\n    {\n        v5 = 0;\n        v6 = 0;\n        while (true)\n        {\n            if (v5 != 0)\n            {\n                v3 = (unsigned int)v7 - 65;\n                if ((unsigned int)v7 - 65 <= 57)\n                {\n                    v5 = 0;\n                }\n                if ((288230371923853311 & 1 << (v3 & 63)) == 0 || (unsigned int)v7 - 65 > 57)\n                {\n                    v5 = 0;\n                    v6 = (v7 != 126? 0 : rax<8>);\n                }\n            }\n            else if (v7 == 46)\n            {\n                v5 = 1;\n                v6 = (v6 == 0? v2 : v6);\n            }\n            else if ((v7 < 65 || v7 > 90) && (v7 <= 90 || (v7 - 97 & 255) > 25) && ((v7 - 48 & 255) > 9 || v7 > 90))\n            {\n                v6 = (v7 != 126? 0 : rax<8>);\n                v2 = &v2[1];\n                *(v1) = v2;\n                v7 = *(v2);\n                if ((char)v7 == 0)\n                {\n                    break;\n                }\n            }\n            if (v7 == 46 || v5 != 0 || (v7 - 48 & 255) <= 9 && v7 <= 90 || (v7 - 97 & 255) <= 25 && v7 > 90 || v7 <= 90 && v7 >= 65)\n            {\n                v2 = &v2[1];\n                *(v1) = v2;\n                v7 = *(v2);\n                if ((char)v7 == 0)\n                {\n                    break;\n                }\n            }\n        }\n        return v6;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_413580",
            "funcStartAddr": "0x413580",
            "funcEndAddr": "0x41362b",
            "decompiledFuncCode": "int sub_413580()\n{\n    unsigned long long v1;  // xmm0lq\n    unsigned long long v2;  // rsi\n    uint128_t v3;  // xmm1\n    unsigned long long v4;  // rcx\n    unsigned long long v5;  // xmm1lq\n    void v6;  // xmm0\n    uint128_t v7;  // xmm0\n    char v8;  // cl\n\n    if (!((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1))\n    {\n        return 0x8000000000000000;\n    }\n    else if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) == 1)\n    {\n        return 9223372036854775807;\n    }\n    v2 = v1;\n    v3 = 0;\n    v4 = 0;\n    v5 = v1;\n    v7 = (v6 - xmm1<16>) * 0x41cdcd6500000000;\n    v8 = (((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 0 | (unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6) & 1) == 0;\n    if (!((char)(rcx<8> + v7 - (((unsigned long long)((rcx<8> + v7) * 1237940039285380275 >> 64) >> 26) - (rcx<8> + v7 >> 63)) * 0x3b9aca00 >> 63)))\n    {\n        return ((unsigned long long)((rcx<8> + v7) * 1237940039285380275 >> 64) >> 26) - (rcx<8> + v7 >> 63) + v2;\n    }\n    return ((unsigned long long)((rcx<8> + v7) * 1237940039285380275 >> 64) >> 26) - (rcx<8> + v7 >> 63) + v2 - 1;\n}\n"
        },
        {
            "funcName": "sub_40f630",
            "funcStartAddr": "0x40f630",
            "funcEndAddr": "0x40f63c",
            "decompiledFuncCode": "int sub_40f630()\n{\n}\n"
        },
        {
            "funcName": "sub_405eb0",
            "funcStartAddr": "0x405eb0",
            "funcEndAddr": "0x405eec",
            "decompiledFuncCode": "int sub_405eb0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v2;  // rbx\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rdx\n    char v5;  // dl\n    unsigned long long v6;  // rax\n\n    v2 = v1;\n    v6 = sub_40d3c0();\n    if (v3 > v1)\n    {\n        do\n        {\n            v2 += 1;\n            v4 = 0;\n            v5 = *((char *)(v2 - 1)) == 9;\n            v6 += rdx<8>;\n        }\n        while (v3 != v2);\n    }\n    return v6;\n}\n"
        },
        {
            "funcName": "sub_40f270",
            "funcStartAddr": "0x40f270",
            "funcEndAddr": "0x40f283",
            "decompiledFuncCode": "extern int512_t g_61cce0;\n\nint sub_40f270()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned int v3;  // esi\n\n    v2 = (unsigned int)*((int *)((v1 == 0? &g_61cce0 : v1) + 4));\n    *((unsigned int *)((v1 == 0? &g_61cce0 : v1) + 4)) = v3;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40c790",
            "funcStartAddr": "0x40c790",
            "funcEndAddr": "0x40c835",
            "decompiledFuncCode": "int sub_40c790()\n{\n    unsigned long long v1[10];  // rdi\n    unsigned long long v2[10];  // rbp\n    unsigned long long v3[2];  // r12\n    unsigned long long v4;  // rdi\n    unsigned long long v6;  // rdx\n    unsigned long long v7;  // rcx\n    unsigned long long v8[2];  // rbx\n    unsigned long long v9;  // rax\n    unsigned long long v10;  // rdi\n\n    v2 = v1;\n    v3 = *(v1);\n    if (*(v1) < v1[1])\n    {\n        while (true)\n        {\n            if (*(v3) == 0)\n            {\n                v3 = &v3[2];\n                if (v2[1] <= v3)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v8 = v3[1];\n                v9 = v2[8];\n                if (v3[1] != 0)\n                {\n                    do\n                    {\n                        if (v9 != 0)\n                        {\n                            v4 = *(v8);\n                            rax<8>();\n                            v9 = v2[8];\n                        }\n                        v6 = v8[1];\n                        v7 = v2[9];\n                        v8[0] = 0;\n                        v8[1] = v7;\n                        v2[9] = v8;\n                        v8 = v6;\n                    }\n                    while (v6 != 0);\n                }\n                if (v9 != 0)\n                {\n                    v10 = *(v3);\n                    v9 = rax<8>();\n                }\n                v3[0] = 0;\n                v3 = &v3[2];\n                v3[-1] = 0;\n                if (v2[1] <= v3)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    v2[3] = 0;\n    v2[4] = 0;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_40da00",
            "funcStartAddr": "0x40da00",
            "funcEndAddr": "0x40dbb8",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char field_0;\n    char padding_1[3];\n    unsigned int field_4;\n} struct_0;\n\nextern unsigned int g_61cbc0;\n\nint sub_40da00()\n{\n    unsigned int v1;  // esi\n    unsigned int *v2;  // ebp\n    unsigned long v4;  // rax\n    unsigned int *v5;  // rax\n    unsigned long long v6;  // rax\n    unsigned int v7;  // edi\n    unsigned long long v8;  // rax\n    unsigned long long v9;  // r12\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rax\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // rax\n    unsigned long long v17;  // rax\n    unsigned int v18;  // r12d\n    struct_0 *v19;  // rdi\n    unsigned long long v22;  // rax\n\n    v2 = v1;\n    if (g_61cbc0 >= 0)\n    {\n        if ((unsigned int)v4 < 0)\n        {\n            v5 = __errno_location();\n            if (*(v5) == 38)\n            {\n                g_61cbc0 = -1;\n            }\n        }\n        if (*(v5) != 38 || (unsigned int)v4 >= 0)\n        {\n            g_61cbc0 = 1;\n            v4 = pipe2();\n            return v6;\n        }\n    }\n    if (g_61cbc0 < 0 || *(v5) == 38 && (unsigned int)v4 < 0)\n    {\n        v9 = v2 & -526337;\n        if ((v2 & -526337) == 0)\n        {\n            v8 = pipe(v7);\n            if (v8 >= 0)\n            {\n                if (((unsigned short)v2 & 0x800) != 0)\n                {\n                    v10 = sub_412000();\n                    if (v10 >= 0)\n                    {\n                        v11 = sub_412000();\n                        if (v11 != -1)\n                        {\n                            v12 = sub_412000();\n                            if (v12 >= 0)\n                            {\n                                v13 = sub_412000();\n                            }\n                        }\n                    }\n                }\n                if ((((unsigned short)v2 & 0x800) == 0 || v13 != -1 && v10 >= 0 && v11 != -1 && v12 >= 0) && ((unsigned int)v2 & 0x80000) != 0)\n                {\n                    v14 = sub_412000();\n                    if (v14 >= 0)\n                    {\n                        v15 = sub_412000();\n                        if (v15 != -1)\n                        {\n                            v16 = sub_412000();\n                            if (v16 >= 0)\n                            {\n                                v17 = sub_412000();\n                                if (v17 != -1)\n                                {\n                                    return v1 & -526337;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v9 = -18446744069414584321;\n            }\n        }\n        else\n        {\n            v9 = -18446744069414584321;\n            *(__errno_location()) = 22;\n        }\n        if (...)\n        {\n            v18 = *(v2);\n            close(*((int *)&v19->field_0));\n            close(v19->field_4);\n            *(v19) = *(v19);\n            *(__errno_location()) = v18;\n            v9 = -18446744069414584321;\n        }\n        if (...)\n        {\n            v22 = v9;\n            return v22;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_406190",
            "funcStartAddr": "0x406190",
            "funcEndAddr": "0x4061e0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[12];\n    char field_c;\n} struct_0;\n\nextern unsigned long long g_61c6a0;\n\nint sub_406190()\n{\n    struct_0 *v1;  // rdi\n    unsigned long long v2;  // rax\n\n    if (g_61c6a0 != 0)\n    {\n        v1->field_c = 1;\n        v2 = sub_40cda0();\n        if (v2 != 0)\n        {\n            return v2;\n        }\n    }\n    else\n    {\n        g_61c6a0 = (unsigned int)sub_40c600();\n    }\n    if (v2 == 0 || g_61c6a0 == 0)\n    {\n        sub_411460(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_40d840",
            "funcStartAddr": "0x40d840",
            "funcEndAddr": "0x40d8ee",
            "decompiledFuncCode": "double sub_40d840()\n{\n    uint128_t v0;  // [bp-0x80]\n    char v1;  // [bp-0x78]\n    unsigned long long v2;  // [bp-0x58]\n    unsigned int v3;  // [bp-0x10]\n    unsigned long long v5;  // rax\n    uint128_t|unsigned long long v6;  // xmm0\n    unsigned long long v7;  // rax\n    uint128_t v8;  // xmm0\n    unsigned long long v9;  // xmm0lq\n    uint128_t v10;  // xmm0\n    unsigned long long v11;  // xmm0lq\n    uint128_t v12;  // xmm1\n    unsigned long long v13;  // xmm1lq\n    uint128_t v14;  // xmm0\n\n    *((unsigned long long *)&v0) = sysconf(0x55);\n    v5 = sysconf(0x1e);\n    v6 = 0;\n    v6 = (long long)v0;\n    if (((char)(BinaryOp CmpF & 69) & 1) == 0)\n    {\n        v12 = 0;\n        v13 = v5;\n    }\n    if (((char)(BinaryOp CmpF & 69) & 1) != 0 || ((char)(BinaryOp CmpF & 69) & 1) != 0)\n    {\n        v7 = sysinfo((unsigned int)&v1);\n        v8 = 0;\n        v9 = 0x4190000000000000;\n        if (v7 != 0)\n        {\n            return xmm0<16>;\n        }\n        if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n        {\n            v6 = 0;\n            v6 = v2;\n        }\n        else\n        {\n            v10 = 0;\n            v11 = v2 >> 1 | (unsigned int)v2 & 1;\n            v6 = xmm0<16> * 2;\n        }\n        v12 = 0;\n        v13 = v3;\n    }\n    if (v7 == 0 || ((char)(BinaryOp CmpF & 69) & 1) == 0 && ((char)(BinaryOp CmpF & 69) & 1) == 0)\n    {\n        v14 = v6 * v13;\n        return v14;\n    }\n}\n"
        },
        {
            "funcName": "sub_40be10",
            "funcStartAddr": "0x40be10",
            "funcEndAddr": "0x40be20",
            "decompiledFuncCode": "int sub_40be10()\n{\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rsi\n\n    return (0 CONCAT v1 % 8 | v1 * 0x2000000000000000) % v2 >> 64;\n}\n"
        },
        {
            "funcName": "sub_40bd10",
            "funcStartAddr": "0x40bd10",
            "funcEndAddr": "0x40bd66",
            "decompiledFuncCode": "int sub_40bd10()\n{\n    unsigned int v1;  // edi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // cc_dep1\n    unsigned long long v5;  // cc_dep2\n    unsigned long v6;  // d\n    char *v7;  // rdi\n    char *v8;  // rsi\n    unsigned long long v9;  // rcx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // cc_dep1\n    char *v12;  // rdi\n    unsigned long long v13;  // rcx\n    char v14;  // cc_dep1\n    char v15;  // cc_dep2\n\n    v10 = 1;\n    if (v3 != 0)\n    {\n        v9 = 2;\n        v7 = \"C\";\n        v3 = setlocale(v1, 0x0);\n        while (v9 != 0)\n        {\n            v9 -= 1;\n            v4 = *(v8);\n            v5 = *(v7);\n            v7 = &v7[v6];\n            v8 = &v8[v6];\n            break;\n        }\n        v10 = 0;\n        v11 = (v4 > v5) - 0 - (v4 < v5);\n        if ((char)v11 != 0)\n        {\n            v12 = \"POSIX\";\n            v13 = 6;\n            while (v13 != 0)\n            {\n                v13 -= 1;\n                v14 = *(v8);\n                v15 = *(v12);\n                v12 = &v12[v6];\n                v8 = &v8[v6];\n                break;\n            }\n            return 0;\n        }\n    }\n    if ((char)v11 == 0 || v3 == 0)\n    {\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_40f7e0",
            "funcStartAddr": "0x40f7e0",
            "funcEndAddr": "0x40f7e9",
            "decompiledFuncCode": "int sub_40f7e0()\n{\n}\n"
        },
        {
            "funcName": "sub_40b6c0",
            "funcStartAddr": "0x40b6c0",
            "funcEndAddr": "0x40b7d6",
            "decompiledFuncCode": "int sub_40b6c0()\n{\n    unsigned long long v0;  // [bp-0xc8]\n    unsigned long long v1;  // [bp-0xc0]\n    unsigned long long v2;  // [bp-0xb8]\n    unsigned int v3;  // [bp-0xb0]\n    unsigned long v6;  // r12\n    void *v7;  // r12\n    unsigned long long v8;  // rbx\n    unsigned int *v9;  // rdi\n    unsigned long long v10;  // rax\n\n    if (v6 != 0)\n    {\n        v6 = malloc(0x8048);\n        v3 = 0;\n        v0 = 17279655951921914625;\n        v1 = 1167088121787636990;\n        v2 = 0;\n        while (true)\n        {\n            v8 = 0;\n            while (true)\n            {\n                v10 = fread_unlocked(v7 + v8, 0x1, 0x8000 - v8, v9);\n                v8 += v10;\n                if (v8 != 0x8000)\n                {\n                    if (v10 == 0 && ((char)*(v9) & 32) != 0)\n                    {\n                        free(v7);\n                        return 1;\n                    }\n                    if (v10 == 0 && ((char)*(v9) & 32) == 0 || v10 != 0 && ((char)*(v9) & 16) != 0)\n                    {\n                        if (v8 != 0)\n                        {\n                            sub_40b360();\n                        }\n                        sub_40b250();\n                        free(v7);\n                        return 0;\n                    }\n                }\n                else\n                {\n                    sub_40aae0();\n                }\n            }\n        }\n    }\n    else\n    {\n        return 1;\n    }\n}\n"
        },
        {
            "funcName": "sub_411370",
            "funcStartAddr": "0x411370",
            "funcEndAddr": "0x4113ba",
            "decompiledFuncCode": "int sub_411370() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40b800",
            "funcStartAddr": "0x40b800",
            "funcEndAddr": "0x40b81c",
            "decompiledFuncCode": "int sub_40b800()\n{\n    unsigned long v0;  // [bp-0x8]\n    void *v2;  // rdi\n    unsigned long v3;  // rax\n    unsigned long v4;  // rbx\n\n    if (v2 != 0)\n    {\n        v0 = v4;\n        fileno(v2);\n    }\n    else\n    {\n        return v3;\n    }\n}\n"
        },
        {
            "funcName": "sub_413ea0",
            "funcStartAddr": "0x413ea0",
            "funcEndAddr": "0x413eae",
            "decompiledFuncCode": "int sub_413ea0()\n{\n}\n"
        },
        {
            "funcName": "sub_4059f0",
            "funcStartAddr": "0x4059f0",
            "funcEndAddr": "0x405a39",
            "decompiledFuncCode": "extern int512_t g_4149c0;\n\nint sub_4059f0()\n{\n    char *v0;  // [bp-0x10]\n    unsigned long long v2;  // rax\n    char *v3;  // rdi\n    char v4;  // al\n    unsigned long long v6;  // rdx\n\n    v2 = 0;\n    v4 = *(v3) == 45;\n    v0 = &v3[rax<8>];\n    v6 = 0;\n    if (sub_405930() > 48)\n    {\n        v6 = (unsigned int)(*(v3) == 45? 0 - (unsigned int)(char)*(&((char *)&g_4149c0)[(unsigned long long)*(v0)]) : (unsigned int)(char)*(&((char *)&g_4149c0)[(unsigned long long)*(v0)]));\n    }\n    return v6;\n}\n"
        },
        {
            "funcName": "sub_40f7f0",
            "funcStartAddr": "0x40f7f0",
            "funcEndAddr": "0x40f807",
            "decompiledFuncCode": "int sub_40f7f0()\n{\n}\n"
        },
        {
            "funcName": "sub_40a640",
            "funcStartAddr": "0x40a640",
            "funcEndAddr": "0x40a64a",
            "decompiledFuncCode": "int sub_40a640()\n{\n}\n"
        },
        {
            "funcName": "sub_4112b0",
            "funcStartAddr": "0x4112b0",
            "funcEndAddr": "0x4112d1",
            "decompiledFuncCode": "int sub_4112b0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rdx\n    unsigned long long v4;  // rax\n\n    v4 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, rdx<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_411460(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_410680",
            "funcStartAddr": "0x410680",
            "funcEndAddr": "0x4106de",
            "decompiledFuncCode": "int sub_410680()\n{\n    unsigned long long v0;  // [bp-0x20]\n    unsigned long v1;  // [bp-0x18]\n    unsigned long long v2;  // [bp-0x10]\n    unsigned long long v3;  // [bp-0x8]\n    unsigned long long v5;  // rbx\n    unsigned long long v6;  // rbx\n    unsigned long long v7;  // r13\n    unsigned long long v8;  // r12\n    unsigned long v10;  // rax\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rbx\n    unsigned long long v13;  // r12\n    unsigned long long v14;  // r13\n    unsigned int *v15;  // rbp\n    unsigned long long v17;  // rbx\n    unsigned long long v18;  // r12\n    unsigned long long v19;  // r13\n\n    v3 = v5;\n    v6 = v3;\n    v3 = v7;\n    v2 = v8;\n    v1 = stack_base + 0;\n    v0 = v6;\n    if ((unsigned int)v10 > 2)\n    {\n        v10 = mkostemp();\n        v12 = v0;\n        v13 = v2;\n        v14 = v3;\n        return v11;\n    }\n    v15 = __errno_location();\n    close((unsigned int)v15);\n    *(v15) = *(v15);\n    v17 = v0;\n    v18 = v2;\n    v19 = v3;\n    return sub_413690();\n}\n"
        },
        {
            "funcName": "obstack_begin_1",
            "funcStartAddr": "0x413320",
            "funcEndAddr": "0x413335",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[56];\n    unsigned long long field_38;\n    unsigned long long field_40;\n    unsigned long long field_48;\n    char field_50;\n} struct_0;\n\nint _obstack_begin_1()\n{\n    struct_0 *v1;  // rdi\n    unsigned long v2;  // rcx\n    unsigned long v3;  // r8\n    unsigned long v4;  // r9\n\n    v1->field_50 = v1->field_50 | 1;\n    v1->field_38 = v2;\n    v1->field_40 = v3;\n    v1->field_48 = v4;\n}\n"
        },
        {
            "funcName": "sub_40d580",
            "funcStartAddr": "0x40d580",
            "funcEndAddr": "0x40d5a3",
            "decompiledFuncCode": "int sub_40d580()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n    char *v3;  // rdi\n\n    v0 = v2;\n    strlen(v3);\n}\n"
        },
        {
            "funcName": "sub_40d190",
            "funcStartAddr": "0x40d190",
            "funcEndAddr": "0x40d29c",
            "decompiledFuncCode": "int sub_40d190()\n{\n    unsigned long long v0;  // [bp-0x60]\n    void tmp_26;  // tmp #26\n    unsigned long long v1;  // [bp-0x58]\n    unsigned long v2;  // [bp-0x50]\n    unsigned long long v3;  // [bp-0x48]\n    unsigned long long v4;  // [bp-0x40]\n    unsigned long long v6[4];  // rdi\n    unsigned long long *v7;  // rax\n    unsigned long long v8;  // rdx\n    unsigned long long v10;  // rcx\n    unsigned long long v11;  // r15\n    unsigned long long v12;  // r13\n    unsigned long long *v13;  // rbx\n    unsigned long long v14;  // r9\n    unsigned long long v15;  // rbx\n    unsigned long long v16;  // rsi\n    unsigned long long v17;  // rdi\n    unsigned long long v18;  // rax\n    unsigned long long v19;  // r9\n    unsigned long long v20;  // r12\n    unsigned long long v21;  // rsi\n    unsigned long long v22;  // rdi\n    unsigned long long v23;  // rax\n    unsigned long long *v24;  // rdx\n    unsigned long long v25;  // r14\n\n    v7 = v6[2];\n    v0 = 0;\n    if (v6[2] != 0)\n    {\n        v8 = *(v6);\n        tmp_26 = *((long long *)(*(v6) + v7 * 8));\n        v10 = *((long long *)(*(v6) + 8));\n        v6[2] = (char *)&v7[-1] + 7;\n        *((long long *)(v8 + 8)) = tmp_26;\n        v11 = *(v6);\n        v0 = v10;\n        v12 = v6[3];\n        v1 = *((long long *)(*(v6) + 8));\n        v4 = (char *)&v7[-1] + 7 >> 1;\n        if (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr((rax<8> - 0x1<64>), 0x1<8>), Sub(rax<8>, 0x1<64>), cc_ndep<8>)))\n        {\n            v25 = 1;\n            while (true)\n            {\n                v20 = v25 * 2;\n                if ((char *)&v7[-1] + 7 <= v25 << 1)\n                {\n                    v13 = v25 * 16 + v11;\n                }\n                else\n                {\n                    v14 = v20 + 1;\n                    v3 = v20 + 1;\n                    v15 = v25 * 16 + v11;\n                    v16 = *((long long *)(v11 + (v20 + 1) * 8));\n                    v2 = v11 + (v20 + 1) * 8;\n                    v17 = *((long long *)(v25 * 16 + v11));\n                    v18 = r13<8>();\n                    v19 = v3;\n                    v13 = (v18 < 0? v2 : rbx<8>);\n                    v20 = (v18 < 0? v3 : r12<8>);\n                }\n                v21 = v1;\n                v22 = *(v13);\n                v23 = r13<8>();\n                v24 = v11 + v25 * 8;\n                if (v23 <= 0)\n                {\n                    break;\n                }\n                v25 = v20;\n                *(v24) = *(v13);\n                *(v13) = v1;\n            }\n            if (true)\n            {\n                *(v24) = v1;\n            }\n            else if (v23 > 0 && v20 > v4)\n            {\n                return v0;\n            }\n        }\n        else\n        {\n            v24 = *(v6) + 8;\n        }\n        *(v24) = v1;\n    }\n    return v0;\n}\n"
        },
        {
            "funcName": "sub_407880",
            "funcStartAddr": "0x407880",
            "funcEndAddr": "0x407890",
            "decompiledFuncCode": "int sub_407880()\n{\n}\n"
        },
        {
            "funcName": "sub_412000",
            "funcStartAddr": "0x412000",
            "funcEndAddr": "0x41212c",
            "decompiledFuncCode": "extern unsigned int g_61cd18;\n\nint sub_412000()\n{\n    unsigned int v0;  // [bp-0x60]\n    unsigned long v1;  // [bp-0x58]\n    unsigned long v2;  // [bp-0x50]\n    unsigned long v3;  // [bp-0x38]\n    unsigned long v4;  // [bp-0x30]\n    unsigned int v6;  // [bp+0x100008]\n    unsigned long v7;  // rdx\n    unsigned long v8;  // rcx\n    unsigned int v9;  // rsi\n    unsigned int v10;  // edi\n    unsigned int v11;  // edi\n    unsigned int *v12;  // rax\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rax\n    unsigned long long v15;  // rbx\n    unsigned long long v17;  // rax\n\n    v3 = v7;\n    v1 = stack_base + 8;\n    v4 = v8;\n    v0 = 16;\n    v2 = stack_base + -72;\n    if (v9 == 1030)\n    {\n        v0 = 24;\n        if (g_61cd18 >= 0)\n        {\n            v15 = (unsigned int)fcntl(v11, v9);\n            if ((unsigned int)v15 < 0)\n            {\n                v12 = __errno_location();\n                if (*(v12) == 22)\n                {\n                    v15 = (unsigned int)sub_412000();\n                    if ((unsigned int)v15 >= 0)\n                    {\n                        g_61cd18 = -1;\n                    }\n                }\n            }\n            if (*(v12) != 22 || (unsigned int)v15 >= 0)\n            {\n                g_61cd18 = 1;\n            }\n        }\n        else\n        {\n            v15 = (unsigned int)sub_412000();\n        }\n        if ((*(v12) == 22 || g_61cd18 < 0) && (g_61cd18 < 0 || (unsigned int)v15 < 0) && (g_61cd18 == -1 || g_61cd18 >= 0) && (g_61cd18 < 0 || (unsigned int)v15 >= 0) && ((unsigned int)v15 >= 0 || g_61cd18 >= 0))\n        {\n            v13 = fcntl(v15, 0x1);\n            if (v13 >= 0)\n            {\n                v14 = fcntl(v15, 0x2);\n            }\n            if (v13 < 0 || v14 == -1)\n            {\n                v15 = -18446744069414584321;\n                close(v11);\n                *(__errno_location()) = v6;\n            }\n        }\n        v17 = v15;\n        return v17;\n    }\n    return fcntl(v10, v9);\n}\n"
        },
        {
            "funcName": "sub_40c520",
            "funcStartAddr": "0x40c520",
            "funcEndAddr": "0x40c58b",
            "decompiledFuncCode": "int sub_40c520()\n{\n    unsigned long long v1[2];  // rdi\n    unsigned long long *v2;  // r14\n    unsigned long long v4;  // rdi\n    unsigned long long v5;  // rdx\n    unsigned long long v6;  // rsi\n    unsigned long long v7;  // rax\n    unsigned long long v8;  // rbp\n    unsigned long long v9;  // rdi\n    unsigned long long v10[2];  // rbx\n\n    v2 = *(v1);\n    if (v1[1] > *(v1))\n    {\n        v8 = 0;\n        while (true)\n        {\n            v4 = *(v2);\n            if (*(v2) != 0)\n            {\n                v10 = v2;\n                while (true)\n                {\n                    v6 = v5;\n                    v7 = v5();\n                    if (v7 != 0)\n                    {\n                        v10 = v10[1];\n                        v8 += 1;\n                        if (v10 == 0)\n                        {\n                            break;\n                        }\n                        v9 = *(v10);\n                    }\n                }\n                if (v7 != 0)\n                {\n                    v2 = &v2[2];\n                    if (v1[1] <= v2)\n                    {\n                        break;\n                    }\n                }\n                else if (v7 == 0)\n                {\n                    return stack_base + 0;\n                }\n            }\n        }\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_40c1d0",
            "funcStartAddr": "0x40c1d0",
            "funcEndAddr": "0x40c232",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_40c1d0()\n{\n    unsigned long long v1[4];  // rdi\n    unsigned long long v2[2];  // rcx\n    struct_0 *v3;  // rax\n    unsigned long long v4;  // rdx\n    unsigned long long v5;  // r8\n\n    v2 = *(v1);\n    v4 = 0;\n    v5 = 0;\n    if (*(v1) < v1[1])\n    {\n        while (true)\n        {\n            if (*(v2) != 0)\n            {\n                v3 = v2[1];\n                v5 += 1;\n                v4 += 1;\n                if (v2[1] != 0)\n                {\n                    do\n                    {\n                        v3 = v3->field_8;\n                        v4 += 1;\n                    }\n                    while (v3 != 0);\n                    v2 = &v2[2];\n                    if (*(v1) + 16 >= v1[1])\n                    {\n                        break;\n                    }\n                }\n            }\n            if (*(v2) == 0 || v2[1] == 0)\n            {\n                v2 = &v2[2];\n                if (v2 >= v1[1])\n                {\n                    break;\n                }\n            }\n        }\n    }\n    if (v1[3] != v5)\n    {\n        return 0;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_40f430",
            "funcStartAddr": "0x40f430",
            "funcEndAddr": "0x40f43a",
            "decompiledFuncCode": "int sub_40f430()\n{\n}\n"
        },
        {
            "funcName": "sub_413f20",
            "funcStartAddr": "0x413f20",
            "funcEndAddr": "0x413f38",
            "decompiledFuncCode": "extern int512_t g_61c3e8;\n\nint sub_413f20()\n{\n}\n"
        },
        {
            "funcName": "sub_40d600",
            "funcStartAddr": "0x40d600",
            "funcEndAddr": "0x40d6e0",
            "decompiledFuncCode": "int sub_40d600()\n{\n    unsigned long long v0;  // [bp-0x138]\n    unsigned long long v1;  // [bp-0x120]\n    unsigned long long v2;  // [bp-0x10]\n    char *v4;  // rdi\n    unsigned long long v5;  // rcx\n    unsigned long long v6;  // rcx\n    unsigned long long v7;  // rax\n    unsigned long long v8;  // rax\n    unsigned long long v9;  // rcx\n    unsigned long long v10;  // rdx\n\n    v5 = *(v4);\n    if (*(v4) != 0)\n    {\n        v7 = v5;\n        if (v5 <= 32)\n        {\n            v1 = 0x100003e00;\n            if (((char)((char)*(&((char *)stack_base)[((v5 & 63) >> 3) + -288]) >> (unsigned long long)(char)(v5 & 63 & 7)) & 1) != 0)\n            {\n                do\n                {\n                    v4 = &v4[1];\n                    v6 = *(v4);\n                    v7 = v6;\n                }\n                while (v6 <= 32 && (char)v6 != 0);\n                if ((char)v6 != 0)\n                {\n                }\n                else\n                {\n                    return 0;\n                }\n            }\n        }\n        if (((char)((char)*(&((char *)stack_base)[((v5 & 63) >> 3) + -288]) >> (unsigned long long)(char)(v5 & 63 & 7)) & 1) == 0 || v5 > 32 || (unsigned int)(v7 - 48) > 9)\n        {\n            if ((unsigned int)(v7 - 48) <= 9)\n            {\n                v2 = 0;\n                v8 = strtoul();\n                if (v2 != 0)\n                {\n                    v9 = (char)*((char *)0);\n                    if (*((char *)0) != 0 && *((char *)0) <= 32)\n                    {\n                        v0 = 0x100003e00;\n                        if (((char)((char)*(&((char *)stack_base)[((v9 & 63) >> 3) + -312]) >> (unsigned long long)(char)(v9 & 63 & 7)) & 1) != 0)\n                        {\n                            v10 = 1;\n                            do\n                            {\n                                v2 = v10;\n                                v9 = (char)*((char *)v10);\n                                if (v9 > 32)\n                                {\n                                    break;\n                                }\n                                v10 += 1;\n                            }\n                            while (*((char *)v10) != 0 && (0x100003e00 & 1 << (v9 & 63)) != 0);\n                            if (*((char *)v10) != 0)\n                            {\n                            }\n                            else\n                            {\n                                return v8;\n                            }\n                        }\n                    }\n                }\n                if (v2 == 0 || *((char *)0) != 0 && v9 != 44)\n                {\n                    v8 = 0;\n                }\n                return v8;\n            }\n            return 0;\n        }\n    }\n    if (*(v4) == 0 || v5 <= 32 && ((char)((char)*(&((char *)stack_base)[((v5 & 63) >> 3) + -288]) >> (unsigned long long)(char)(v5 & 63 & 7)) & 1) != 0 && (unsigned int)(v7 - 48) > 9)\n    {\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_40b900",
            "funcStartAddr": "0x40b900",
            "funcEndAddr": "0x40bce0",
            "decompiledFuncCode": "int sub_40b900()\n{\n    unsigned int v0;  // [bp-0x54]\n    unsigned long long v1;  // [bp-0x50]\n    unsigned long long v2;  // [bp-0x48]\n    unsigned long long v3;  // [bp-0x40]\n    char *v5;  // rsi\n    unsigned long long v6;  // rbp\n    char *v7;  // rdi\n    unsigned long long v8;  // rbx\n    unsigned long long v9;  // r8\n    unsigned long long v10;  // rcx\n    unsigned long long v11;  // cc_dep1\n    unsigned long long v12;  // cc_dep2\n    unsigned long v13;  // d\n    unsigned long long v14;  // rdi\n    char *v15;  // rsi\n    unsigned long long v16;  // cc_dep1\n    unsigned long long v17;  // rcx\n    char *v18;  // rsi\n    unsigned long long v19;  // rdi\n    unsigned long long v20;  // cc_dep1\n    unsigned long long v21;  // cc_dep2\n    unsigned long long v22;  // cc_dep1\n    unsigned long long v23;  // rcx\n    unsigned long long v24;  // rdi\n    char *v25;  // rsi\n    unsigned long long v26;  // cc_dep1\n    unsigned long long v27;  // cc_dep2\n    unsigned long long v28;  // cc_dep1\n    unsigned long long v29;  // rcx\n    char *v30;  // rsi\n    unsigned long long v31;  // rdi\n    unsigned long long v32;  // cc_dep1\n    unsigned long long v33;  // cc_dep2\n    unsigned long long v34;  // cc_dep1\n    char v35;  // dl\n    char v36;  // al\n    unsigned long long v37;  // r13\n    unsigned long long v38;  // rax\n    unsigned long|unsigned long long v39;  // r13\n    unsigned long long v40;  // rax\n    unsigned long long v41;  // r14\n    unsigned long long v42;  // rax\n    unsigned long long v43;  // rdx\n    unsigned long long v44;  // rsi\n    unsigned long long v45;  // rax\n    unsigned long|unsigned long long v46;  // r10\n    unsigned long|unsigned int v47;  // ecx\n    unsigned long long v48;  // rcx\n    unsigned long v49;  // rax\n    unsigned long v50;  // rdi\n    unsigned long long v51;  // rcx\n    unsigned long long v52;  // rax\n    unsigned long v53;  // rcx\n    unsigned int v54;  // r9d\n    unsigned long long v55;  // rdi\n    unsigned long|unsigned int v56;  // r9d\n    unsigned long long v57;  // r10\n    unsigned long v58;  // r10\n    unsigned long v59;  // r12\n    unsigned long v60;  // rax\n\n    v6 = v5;\n    v8 = v7;\n    v59 = (unsigned int)strcmp(v7, v5);\n    if ((unsigned int)v59 != 0)\n    {\n        v9 = (char)*((char *)v8);\n        if (*((char *)v8) != 0)\n        {\n            v56 = (char)*((char *)v6);\n            if (*((char *)v6) != 0)\n            {\n                v10 = 2;\n                v14 = v8;\n                v15 = \".\";\n                while (v10 != 0)\n                {\n                    v10 -= 1;\n                    v11 = *(v15);\n                    v12 = (char)*((char *)v14);\n                    v14 += v13;\n                    v15 = &v15[v13];\n                    break;\n                }\n                v16 = (v11 > v12) - 0 - (v11 < v12);\n                if ((char)v16 != 0)\n                {\n                    v17 = 2;\n                    v18 = \".\";\n                    v19 = v6;\n                    while (v17 != 0)\n                    {\n                        v17 -= 1;\n                        v20 = *(v18);\n                        v21 = (char)*((char *)v19);\n                        v19 += v13;\n                        v18 = &v18[v13];\n                        break;\n                    }\n                    v22 = (v20 > v21) - 0 - (v20 < v21);\n                    if ((char)v22 != 0)\n                    {\n                        v23 = 3;\n                        v24 = v8;\n                        v25 = \".\";\n                        while (v23 != 0)\n                        {\n                            v23 -= 1;\n                            v26 = *(v25);\n                            v27 = (char)*((char *)v24);\n                            v24 += v13;\n                            v25 = &v25[v13];\n                            break;\n                        }\n                        v28 = (v26 > v27) - 0 - (v26 < v27);\n                        if ((char)v28 != 0)\n                        {\n                            v29 = 3;\n                            v30 = \".\";\n                            v31 = v6;\n                            while (v29 != 0)\n                            {\n                                v29 -= 1;\n                                v32 = *(v30);\n                                v33 = (char)*((char *)v31);\n                                v31 += v13;\n                                v30 = &v30[v13];\n                                break;\n                            }\n                            v34 = (v32 > v33) - 0 - (v32 < v33);\n                            if ((char)v34 != 0)\n                            {\n                                v35 = v9 == 46;\n                                if (v35 == 0 || v56 == 46)\n                                {\n                                    v36 = v56 == 46;\n                                    if (v9 != 46)\n                                    {\n                                    }\n                                    else\n                                    {\n                                        if (v36 != 0 && v35 != 0)\n                                        {\n                                            v8 += 1;\n                                            v6 += 1;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (*((char *)v6) != 0 && *((char *)v8) != 0 && (char)v16 != 0 && (char)v28 != 0 && (char)v34 != 0 && (char)v22 != 0 && (v35 == 0 || v56 == 46) && v9 == 46 || *((char *)v6) != 0 && *((char *)v8) != 0 && (char)v16 != 0 && (char)v28 != 0 && (char)v34 != 0 && (char)v22 != 0 && (v35 == 0 || v56 == 46) && v9 != 46 && v36 == 0)\n        {\n            v2 = v8;\n            v3 = v6;\n            v37 = (unsigned int)sub_40b830();\n            v38 = sub_40b830();\n            if (v37 != 0)\n            {\n                v39 = v37 - v8;\n                if (v38 == 0)\n                {\n                    v41 = v3 - v6;\n                }\n            }\n            else\n            {\n                v39 = v2 - v8;\n            }\n            if (v38 != 0)\n            {\n                v40 = v38 - v6;\n                v41 = v40;\n            }\n            if ((v38 != 0 || v37 != 0) && v39 == v41)\n            {\n                v42 = strncmp(v8, v6, v39);\n                if (v42 == 0)\n                {\n                    v39 = v2 - v8;\n                }\n            }\n            if ((v42 == 0 || v38 == 0) && (v42 == 0 || v37 == 0) && (v38 == 0 || v39 == v41) && (v37 == 0 || v39 == v41))\n            {\n                v41 = v3 - v6;\n            }\n            v44 = 0;\n            for (v43 = 0; v41 > v44 || v39 > v43; v59 = v58)\n            {\n                if (v39 > v43 || v39 > v43)\n                {\n                    v45 = (char)*((char *)(v8 + v43));\n                    if ((unsigned int)(char)*((char *)(v8 + v43)) - 48 > 9)\n                    {\n                        v46 = v45;\n                        if ((unsigned int)(v45 - 48) > 9)\n                        {\n                            v47 = v46;\n                        }\n                        else if (v41 != v44)\n                        {\n                            v50 = (char)*((char *)(v6 + v44));\n                        }\n                    }\n                }\n                if ((unsigned int)(v45 - 48) <= 9 && (unsigned int)(char)*((char *)(v8 + v43)) - 48 > 9 && v41 != v44 && (v39 > v43 || v39 > v43) || (unsigned int)((unsigned long long)(char)*((char *)(v8 + v43)) - 48) <= 9 || v39 == v43)\n                {\n                    v49 = v50;\n                    v46 = 0;\n                }\n                if ((unsigned int)((unsigned long long)(char)*((char *)(v6 + v44)) - 48) > 9 || ((unsigned int)(v45 - 48) <= 9 && (unsigned int)(char)*((char *)(v8 + v43)) - 48 > 9 && v41 != v44 && (v39 > v43 || v39 > v43) || (unsigned int)((unsigned long long)(char)*((char *)(v8 + v43)) - 48) <= 9 || v39 == v43) && (unsigned int)((unsigned long long)v50 - 48) > 9)\n                {\n                    v51 = (unsigned int)v50 - 65;\n                    if ((288230371923853311 & 1 << (v51 & 63)) == 0 || (unsigned int)v50 - 65 > 57)\n                    {\n                        if (v50 != 126)\n                        {\n                            v49 = (unsigned int)v49 + 0x100;\n                        }\n                        else\n                        {\n                            v49 = -18446744069414584321;\n                        }\n                    }\n                }\n                if ((unsigned int)(v45 - 48) <= 9 && (unsigned int)(char)*((char *)(v8 + v43)) - 48 > 9 && (v39 > v43 || v39 > v43) && v41 == v44 || (unsigned int)v49 == (unsigned int)v46 || ((unsigned int)(v45 - 48) <= 9 && (unsigned int)(char)*((char *)(v8 + v43)) - 48 > 9 && v41 != v44 && (v39 > v43 || v39 > v43) || (unsigned int)((unsigned long long)(char)*((char *)(v8 + v43)) - 48) <= 9 || v39 == v43) && (unsigned int)((unsigned long long)v50 - 48) <= 9)\n                {\n                    v43 += 1;\n                    v44 += 1;\n                }\n                if (((unsigned int)(v45 - 48) <= 9 && (unsigned int)(char)*((char *)(v8 + v43)) - 48 > 9 && (v39 > v43 || v39 > v43) && v41 == v44 || (unsigned int)v49 == (unsigned int)v46 || ((unsigned int)(v45 - 48) <= 9 && (unsigned int)(char)*((char *)(v8 + v43)) - 48 > 9 && v41 != v44 && (v39 > v43 || v39 > v43) || (unsigned int)((unsigned long long)(char)*((char *)(v8 + v43)) - 48) <= 9 || v39 == v43) && (unsigned int)((unsigned long long)v50 - 48) <= 9) && v39 <= v43 || (v39 > v43 || v39 > v43) && (unsigned int)(char)*((char *)(v8 + v43)) - 48 <= 9 || v39 <= v43)\n                {\n                    v50 = (char)*((char *)(v6 + v44));\n                    v53 = (char)*((char *)(v6 + v44));\n                    if ((unsigned int)v50 - 48 > 9 && v39 != v43 && v41 > v44)\n                    {\n                        v47 = (char)*((char *)(v8 + v43));\n                        v45 = (char)*((char *)(v8 + v43));\n                        v46 = (char)*((char *)(v8 + v43));\n                    }\n                }\n                if (...)\n                {\n                    v48 = (unsigned long long)v47 - 65;\n                    if ((unsigned int)v48 <= 57 && (288230371923853311 & 1 << (v48 & 63)) != 0)\n                    {\n                        v49 = 0;\n                    }\n                }\n                if (...)\n                {\n                    if (v45 != 126)\n                    {\n                        v46 = (unsigned int)v46 + 0x100;\n                    }\n                    else\n                    {\n                        v46 = -18446744069414584321;\n                    }\n                    if (v41 == v43)\n                    {\n                        v59 = v46;\n                    }\n                }\n                if (...)\n                {\n                    v50 = (char)*((char *)(v6 + v44));\n                    v49 = (char)*((char *)(v6 + v44));\n                    if ((unsigned int)((unsigned long long)(char)*((char *)(v6 + v44)) - 48) <= 9)\n                    {\n                        v49 = 0;\n                    }\n                }\n                if (...)\n                {\n                    while (true)\n                    {\n                        v52 = (char)*((char *)(v8 + v43));\n                        if (*((char *)(v8 + v43)) != 48)\n                        {\n                            break;\n                        }\n                        v43 += 1;\n                    }\n                    if (v50 == 48)\n                    {\n                        do\n                        {\n                            v44 += 1;\n                            v53 = (char)*((char *)(v6 + v44));\n                        }\n                        while (*((char *)(v6 + v44)) == 48);\n                    }\n                    v54 = (unsigned int)v53 - 48;\n                    if ((unsigned int)(v52 - 48) > 9)\n                    {\n                        if (v54 <= 9)\n                        {\n                            break;\n                        }\n                    }\n                    else if (v54 <= 9)\n                    {\n                        v55 = v43;\n                        v56 = 0;\n                        v57 = v44 - v43 + v6;\n                        while (true)\n                        {\n                            v56 = (unsigned int)(v56 == 0? (unsigned int)(v52 - v53) : (unsigned int)r9<8>);\n                            v55 += 1;\n                            v53 = (char)*((char *)(v57 + v55));\n                            v1 = v55 - v43 + v44;\n                            v52 = (char)*((char *)(v8 + v55));\n                            v0 = (unsigned int)v53 - 48;\n                            if ((unsigned int)(v52 - 48) > 9)\n                            {\n                                if (v0 <= 9)\n                                {\n                                    break;\n                                }\n                                if ((unsigned int)v56 == 0)\n                                {\n                                    v44 = v1;\n                                    v43 = v55;\n                                }\n                                else\n                                {\n                                    v59 = v56;\n                                }\n                            }\n                            else\n                            {\n                                if (v0 > 9)\n                                {\n                                    break;\n                                }\n                            }\n                        }\n                        if ((unsigned int)(v52 - 48) > 9)\n                        {\n                            v59 = -18446744069414584321;\n                        }\n                        else if ((unsigned int)(v52 - 48) <= 9)\n                        {\n                            v59 = 1;\n                        }\n                        else if ((unsigned int)(v52 - 48) > 9 && (unsigned int)v56 != 0 && v0 > 9)\n                        {\n                            v60 = v59;\n                            return v60;\n                        }\n                    }\n                }\n                if ((unsigned int)v49 != (unsigned int)v46)\n                {\n                    v58 = v46 - v49;\n                }\n            }\n            if (v54 <= 9 || (unsigned int)(v52 - 48) > 9)\n            {\n                v59 = -18446744069414584321;\n            }\n            else if ((unsigned int)(v52 - 48) <= 9)\n            {\n                v59 = 1;\n            }\n            else if (...)\n            {\n                v60 = v59;\n                return v60;\n            }\n        }\n        if (*((char *)v6) != 0 && *((char *)v8) != 0 && (char)v16 != 0 && (char)v28 != 0 && (char)v34 != 0 && (char)v22 != 0 && (v35 == 0 || v56 == 46) && v9 == 46 || *((char *)v6) != 0 && *((char *)v8) != 0 && (char)v16 != 0 && (char)v28 != 0 && (char)v34 != 0 && (char)v22 != 0 && (v35 == 0 || v56 == 46) && v9 != 46 && v36 == 0 || *((char *)v6) != 0 && *((char *)v8) != 0 && (char)v16 != 0 && (char)v28 != 0 && (char)v34 != 0 && (char)v22 != 0 && (v35 == 0 || v56 == 46) && v9 != 46 && v36 != 0 || *((char *)v6) != 0 && *((char *)v8) != 0 && (char)v16 != 0 && (char)v28 != 0 && (char)v22 != 0 && (char)v34 == 0 || *((char *)v6) != 0 && *((char *)v8) != 0 && (char)v16 != 0 && (char)v22 == 0 || *((char *)v8) != 0 && *((char *)v6) == 0)\n        {\n            v59 = 1;\n        }\n        if (*((char *)v6) != 0 && *((char *)v8) != 0 && (char)v16 != 0 && (char)v28 != 0 && (char)v34 != 0 && (char)v22 != 0 && (v35 == 0 || v56 == 46) && v9 == 46 || *((char *)v6) != 0 && *((char *)v8) != 0 && (char)v16 != 0 && (char)v28 != 0 && (char)v34 != 0 && (char)v22 != 0 && (v35 == 0 || v56 == 46) && v9 != 46 && v36 == 0 || *((char *)v6) != 0 && *((char *)v8) != 0 && (char)v16 != 0 && v56 != 46 && (char)v28 != 0 && (char)v34 != 0 && (char)v22 != 0 && v35 != 0 || *((char *)v6) != 0 && *((char *)v8) != 0 && (char)v16 != 0 && (char)v22 != 0 && (char)v28 == 0 || *((char *)v6) != 0 && *((char *)v8) != 0 && (char)v16 == 0 || *((char *)v8) == 0)\n        {\n            v59 = -18446744069414584321;\n        }\n    }\n    v60 = v59;\n    return v60;\n}\n"
        },
        {
            "funcName": "sub_40f530",
            "funcStartAddr": "0x40f530",
            "funcEndAddr": "0x40f542",
            "decompiledFuncCode": "int sub_40f530()\n{\n}\n"
        },
        {
            "funcName": "sub_40f8a0",
            "funcStartAddr": "0x40f8a0",
            "funcEndAddr": "0x40f8fd",
            "decompiledFuncCode": "extern unsigned int g_417998;\nextern unsigned int g_4179a8;\nextern unsigned int g_61c518;\n\nint sub_40f8a0()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n    unsigned long v3;  // rdi\n    unsigned long long v4;  // rbp\n    unsigned int *v5;  // rbx\n    char *v6;  // rax\n\n    v0 = v2;\n    if (v3 == 0)\n    {\n        abort(); /* do not return */\n    }\n    v4 = (unsigned int)sub_40f880();\n    v5 = __errno_location();\n    if (*(v5) != 0)\n    {\n        v6 = dcgettext(0x0, 0x4179a8, 0x5);\n    }\n    else\n    {\n        v6 = dcgettext(0x0, 0x417998, 0x5);\n    }\n    error(g_61c518, *(v5), v6);\n}\n"
        },
        {
            "funcName": "sub_40c4b0",
            "funcStartAddr": "0x40c4b0",
            "funcEndAddr": "0x40c510",
            "decompiledFuncCode": "int sub_40c4b0()\n{\n    unsigned long long v1;  // rdx\n    unsigned long long v2;  // rax\n    unsigned long long v3[2];  // rdi\n    unsigned long long v4;  // r8\n    unsigned long long v5;  // rsi\n    unsigned long long v6[2];  // r8\n    unsigned long long v7;  // rcx\n    unsigned long long v8;  // r9\n    unsigned long long v9[2];  // rdx\n\n    v2 = v1;\n    v9 = *(v3);\n    if (v3[1] > *(v3))\n    {\n        v8 = 0;\n        do\n        {\n            v4 = *(v9);\n            if (*(v9) != 0)\n            {\n                if (v2 <= v8)\n                {\n                    break;\n                }\n                *((unsigned long long *)(v5 + v8 * 8)) = v4;\n                v6 = v9[1];\n                v7 = v8 + 1;\n                if (v9[1] != 0)\n                {\n                    while (true)\n                    {\n                        if (v2 != v7)\n                        {\n                            v7 += 1;\n                            *((unsigned long long [2])(v5 + v7 * 8 - 8)) = *(v6);\n                            v6 = v6[1];\n                            if (v6 == 0)\n                            {\n                                break;\n                            }\n                        }\n                        else\n                        {\n                            return v2;\n                        }\n                    }\n                }\n                v8 = v7;\n            }\n            v9 = &v9[2];\n        }\n        while (v3[1] > v9);\n        return v8;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_412eb0",
            "funcStartAddr": "0x412eb0",
            "funcEndAddr": "0x412f06",
            "decompiledFuncCode": "extern unsigned int g_61c574;\nextern unsigned int g_61c578;\nextern unsigned int g_61c57c;\nextern unsigned int g_61cd20;\nextern unsigned int g_61cd24;\nextern unsigned int g_61cd28;\nextern unsigned long long g_61cd30;\nextern unsigned long long g_61cd60;\n\nint sub_412eb0()\n{\n    unsigned int *v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp+0x8]\n\n    g_61cd20 = g_61c57c;\n    g_61cd24 = g_61c578;\n    v1 = (unsigned int)v2;\n    v0 = &g_61cd20;\n    g_61c57c = g_61cd20;\n    g_61cd60 = g_61cd30;\n    g_61c574 = g_61cd28;\n    return sub_4128e0();\n}\n"
        },
        {
            "funcName": "sub_40f6c0",
            "funcStartAddr": "0x40f6c0",
            "funcEndAddr": "0x40f6cd",
            "decompiledFuncCode": "int sub_40f6c0()\n{\n}\n"
        },
        {
            "funcName": "sub_4103a0",
            "funcStartAddr": "0x4103a0",
            "funcEndAddr": "0x410407",
            "decompiledFuncCode": "int sub_4103a0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned long long *v3;  // rdi\n    unsigned long long v4;  // rdi\n\n    v0 = v2;\n    *(v3) = 0;\n    v4 = &v3[3];\n    *((long long *)(v4 - 16)) = 0;\n    *((long long *)(v4 - 8)) = 0;\n    _obstack_begin();\n    _obstack_begin();\n}\n"
        },
        {
            "funcName": "sub_40fbf0",
            "funcStartAddr": "0x40fbf0",
            "funcEndAddr": "0x40fbf5",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_40fbf0()\n{\n    struct_0 *v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rax\n\n    v1->field_8 = v2;\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_40a980",
            "funcStartAddr": "0x40a980",
            "funcEndAddr": "0x40a9cc",
            "decompiledFuncCode": "int sub_40a980()\n{\n    unsigned long long *v1;  // rsi\n    unsigned long long v2;  // r14\n    void *v3;  // rdx\n    void *v4;  // rdi\n    unsigned int v5;  // rcx\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // rbx\n    void *v8;  // rbp\n    unsigned long long v9;  // rax\n\n    v2 = *(v1);\n    if (*(v1) != 0)\n    {\n        v7 = &v1[1];\n        v8 = v3;\n        do\n        {\n            v6 = memcmp(v4, v8, v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n            v2 = *(v7);\n            v8 += v5;\n            v7 = &v7[1];\n        }\n        while (v2 != 0);\n    }\n    v9 = v2;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_405910",
            "funcStartAddr": "0x405910",
            "funcEndAddr": "0x40591d",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned int field_8;\n} struct_0;\n\nint sub_405910()\n{\n    struct_0 *v1;  // rdi\n    unsigned long v2;  // rsi\n\n    return (0 CONCAT (int)v1->field_8) % v2 >> 64;\n}\n"
        },
        {
            "funcName": "sub_40c160",
            "funcStartAddr": "0x40c160",
            "funcEndAddr": "0x40c165",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[24];\n    unsigned long long field_18;\n} struct_0;\n\nint sub_40c160()\n{\n    struct_0 *v1;  // rdi\n\n    return v1->field_18;\n}\n"
        },
        {
            "funcName": "sub_40f640",
            "funcStartAddr": "0x40f640",
            "funcEndAddr": "0x40f64f",
            "decompiledFuncCode": "int sub_40f640()\n{\n}\n"
        },
        {
            "funcName": "sub_40fd70",
            "funcStartAddr": "0x40fd70",
            "funcEndAddr": "0x40fdb1",
            "decompiledFuncCode": "int sub_40fd70()\n{\n    unsigned long long *v1;  // rdi\n\n    __explicit_bzero_chk();\n    free(v1);\n    if (*(v1) == 0)\n    {\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_40c5a0",
            "funcStartAddr": "0x40c5a0",
            "funcEndAddr": "0x40c5d1",
            "decompiledFuncCode": "int sub_40c5a0()\n{\n    void tmp_16;  // tmp #16\n    char *v1;  // rdi\n    unsigned long long v2;  // rcx\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rdx\n\n    v2 = *(v1);\n    v4 = 0;\n    if (*(v1) != 0)\n    {\n        do\n        {\n            v1 = &v1[1];\n            tmp_16 = v4 * 31 + v2;\n            v2 = *(v1);\n            v4 = (0 CONCAT tmp_16) % v3 >> 64;\n        }\n        while ((char)v2 != 0);\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_412f50",
            "funcStartAddr": "0x412f50",
            "funcEndAddr": "0x412f65",
            "decompiledFuncCode": "int sub_412f50()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_4128e0();\n}\n"
        },
        {
            "funcName": "sub_413e30",
            "funcStartAddr": "0x413e30",
            "funcEndAddr": "0x413e8d",
            "decompiledFuncCode": "int sub_413e30()\n{\n    unsigned int v1;  // rsi\n    unsigned long v2;  // rcx\n    void *v3;  // rdi\n    void *v4;  // rdx\n\n    if (v1 == v2 && memcmp(v3, v4, v1) == 0)\n    {\n        *(__errno_location()) = 0;\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_40d6f0",
            "funcStartAddr": "0x40d6f0",
            "funcEndAddr": "0x40d81d",
            "decompiledFuncCode": "int sub_40d6f0()\n{\n    void tmp_1;  // tmp #1\n    void tmp_17;  // tmp #17\n    unsigned int v1;  // edi\n    unsigned long long v2;  // rax\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long long v8;  // rbp\n    unsigned long long v9;  // rax\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rdx\n\n    if (!(v1 != 2))\n    {\n        v2 = getenv(\"OMP_NUM_THREADS\");\n        if (v2 != 0)\n        {\n            v8 = -1;\n            v4 = (unsigned int)sub_40d600();\n            if (getenv(\"OMP_THREAD_LIMIT\") != 0)\n            {\n                v8 = (sub_40d600() == 0? -1 : (unsigned long long)(unsigned int)sub_40d600());\n            }\n            if (v4 != 0)\n            {\n                tmp_1 = v4;\n                tmp_17 = v8 <= v4;\n                return (tmp_17? stack_base + 0 : tmp_1);\n            }\n        }\n        else\n        {\n            v3 = getenv(\"OMP_THREAD_LIMIT\");\n            if (v3 != 0)\n            {\n                v8 = (unsigned int)sub_40d600();\n            }\n        }\n    }\n    else if (v1 != 1)\n    {\n        v7 = sysconf(0x53);\n        if (v7 == 1)\n        {\n            v9 = 1;\n            v7 = (unsigned int)sub_40d5b0();\n        }\n        v9 = ((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)? 1 : rax<8>);\n    }\n    if (v1 == 1 || v2 == 0 && v8 == 0 && v1 == 2 || v2 == 0 && v1 == 2 && v3 == 0)\n    {\n        v8 = -1;\n    }\n    if (v1 == 1 || v2 == 0 && v1 == 2 || v4 == 0 && v1 == 2)\n    {\n        v10 = sub_40d5b0();\n    }\n    if ((v1 == 1 || v1 == 2) && (v2 == 0 || v1 == 1 || v4 == 0))\n    {\n        if (v10 != 0)\n        {\n            return (!(rax<8> <= stack_base + 0)? stack_base + 0 : rax<8>);\n        }\n        v11 = sysconf(0x54);\n        v9 = 1;\n        if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rdx<8>, 0x0<64>, cc_ndep<8>)))\n        {\n            v9 = (v11 <= v8? v11 : v8);\n        }\n    }\n    if (v4 == 0 || v10 == 0)\n    {\n        return v9;\n    }\n}\n"
        },
        {
            "funcName": "sub_411680",
            "funcStartAddr": "0x411680",
            "funcEndAddr": "0x411a8b",
            "decompiledFuncCode": "int sub_411680()\n{\n    unsigned long long v0;  // [bp-0x178]\n    void tmp_11;  // tmp #11\n    char [3]|char v1;  // [bp-0x58]\n    char v2[3];  // [bp-0x50]\n    unsigned int v4;  // edx\n    unsigned long|unsigned long long|unsigned int v5;  // rdi\n    unsigned long v6;  // rbp\n    unsigned long long *v7;  // rcx\n    char *v9;  // r8\n    unsigned long v11;  // rsi\n    unsigned long long *v12;  // r15\n    unsigned int *v13;  // r12\n    unsigned int *v14;  // r12\n    unsigned long long v15;  // rbx\n    unsigned long v16;  // rax\n    unsigned int v17;  // eax\n    unsigned long long v18;  // r12\n    unsigned long long v19;  // rax\n    unsigned long long v20;  // rax\n    unsigned long long v21;  // rdx\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // rsi\n    char v25;  // sil\n    unsigned long long v26;  // r12\n    unsigned long long v27;  // r12\n    unsigned long long v28;  // rcx\n    unsigned long long v29;  // rcx\n    unsigned long long v30;  // rdx\n    unsigned long long v31;  // rsi\n    char v32[3];  // r8\n    unsigned long long v33;  // rbx\n    unsigned long long v34;  // rcx\n    unsigned long long|unsigned int v35;  // rdi\n    unsigned long long v36;  // rcx\n    unsigned long long v37;  // rcx\n    unsigned long long v38;  // rcx\n    unsigned long long v39;  // rcx\n    unsigned long long v42;  // cc_dep1\n    unsigned int v43;  // cc_dep1\n    unsigned int v44;  // cc_dep1\n    unsigned int v45;  // cc_dep1\n    unsigned int v46;  // cc_dep1\n    unsigned long long v47;  // rax\n    unsigned long long v48;  // r8\n\n    if (v4 <= 36)\n    {\n        v6 = v5;\n        v12 = (v11 == 0? stack_base + -64 : v11);\n        *(v13) = 0;\n        v13 = __errno_location();\n        v15 = (char)*((char *)v5);\n        v31 = *((long long *)(unsigned long long)__ctype_b_loc());\n        for (v16 = v5; (*((char *)(v31 + (v15 << 1) + 1)) & 32) != 0; v15 = (char)*((char *)v16))\n        {\n            v16 += 1;\n        }\n        if (v15 != 45)\n        {\n            v33 = strtoul();\n            if (*(v12) != v5)\n            {\n                v17 = *(v14);\n                if ((*(v14) == 0 || v17 == 34) && v9 != 0)\n                {\n                    v18 = v1[0];\n                    if (v1[0] != 0)\n                    {\n                        *((char *[3])&v1[0]) = v1;\n                        v20 = strchr(v9, v18);\n                        v32 = v1;\n                    }\n                }\n            }\n            else\n            {\n                *((char **)&v1[0]) = v9;\n                if (v9 != 0)\n                {\n                    v18 = (char)*((char *)v6);\n                    if (*((char *)v6) != 0)\n                    {\n                        v33 = 1;\n                        v19 = strchr(v9, (char)*((char *)v5));\n                        v32 = v1;\n                    }\n                }\n            }\n        }\n        if (*(v12) == v5 && *((char *)v6) != 0 && v9 != 0 && v15 != 45 && v19 != 0 || *(v12) != v5 && v1[0] != 0 && v9 != 0 && v15 != 45 && (*(v14) == 0 || v17 == 34) && v20 != 0)\n        {\n            v21 = v18 - 69;\n            if ((v18 - 69 & 255) <= 47)\n            {\n                *((unsigned long long *)&v1) = v21;\n                v0 = 142129060940101;\n                if (((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) != 0)\n                {\n                    *((char *[3])&v2[0]) = v32;\n                    v22 = strchr(v9, 0x30);\n                    v32 = v2;\n                    if (v22 != 0)\n                    {\n                        v23 = v32[1];\n                        if (v32[1] != 68)\n                        {\n                            if (v23 != 105)\n                            {\n                                v30 = v1;\n                                if (v23 != 66)\n                                {\n                                    /* goto *((long long *)(rdx<8> * 8 + 4292112)); */\n                                }\n                            }\n                            else\n                            {\n                                v24 = 0;\n                                v30 = 0x400;\n                                v25 = v32[2] == 66;\n                                v31 = rsi<8> * 2 + 1;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if ((*(v12) == v5 && *((char *)v6) != 0 && v9 != 0 && v15 != 45 && v19 != 0 || *(v12) != v5 && v1[0] != 0 && v9 != 0 && v15 != 45 && (*(v14) == 0 || v17 == 34) && v20 != 0) && (v18 - 69 & 255) <= 47 && ((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) != 0 && v22 == 0 || (*(v12) == v5 && *((char *)v6) != 0 && v9 != 0 && v15 != 45 && v19 != 0 || *(v12) != v5 && v1[0] != 0 && v9 != 0 && v15 != 45 && (*(v14) == 0 || v17 == 34) && v20 != 0) && (v18 - 69 & 255) <= 47 && ((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) == 0 || (*(v12) == v5 && *((char *)v6) != 0 && v9 != 0 && v15 != 45 && v19 != 0 || *(v12) != v5 && v1[0] != 0 && v9 != 0 && v15 != 45 && (*(v14) == 0 || v17 == 34) && v20 != 0) && (v18 - 69 & 255) > 47)\n        {\n            v31 = 1;\n            v30 = 0x400;\n        }\n        if (...)\n        {\n            v31 = 2;\n            v30 = 1000;\n        }\n        if (...)\n        {\n            v26 = (unsigned int)v18 - 66;\n            switch (v26)\n            {\n            case 0:\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v33 = -1;\n                    break;\n                }\n                else\n                {\n                    v33 *= 0x400;\n                    break;\n                }\n            case 3:\n                v39 = v30;\n                v5 = 6;\n                do\n                {\n                    v33 = v33 * v39;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v46 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v46 != 1);\n                break;\n            case 5: case 37:\n                v28 = v30;\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v47 = tmp_11 * v28 * v28;\n                    v33 = v47;\n                }\n                else\n                {\n                    v33 = -1;\n                }\n            case 9: case 41:\n                v33 = v33 * v30;\n            case 11: case 43:\n                v29 = v30;\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v33 = tmp_11 * v29;\n                    break;\n                }\n            case 14:\n                v38 = v30;\n                v5 = 5;\n                do\n                {\n                    v33 = v33 * v38;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v45 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v45 != 1);\n            case 18: case 50:\n                v36 = v30;\n                v5 = 4;\n                do\n                {\n                    v33 = v33 * v36;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v43 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v43 != 1);\n            case 23:\n                v37 = v30;\n                v5 = 8;\n                do\n                {\n                    v33 = v33 * v37;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v44 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v44 != 1);\n            case 24:\n                v34 = v30;\n                v35 = 7;\n                do\n                {\n                    v33 = v33 * v34;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v42 = v35;\n                    v35 -= 1;\n                }\n                while (v42 != 1);\n            case 32:\n                if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                {\n                    v33 *= 0x200;\n                    break;\n                }\n            case 33:\n                v48 = &v32[v31];\n                *(v12) = v48;\n            case 53:\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v33 *= 2;\n                    break;\n                }\n            default:\n                *(v7) = v33;\n            }\n            if (v26 <= 53)\n            {\n                v27 = v26;\n            }\n        }\n        v31 = 1;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        *(v7) = v33;\n        return stack_base + 0;\n    }\n    __assert_fail(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_40be60",
            "funcStartAddr": "0x40be60",
            "funcEndAddr": "0x40bf65",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[72];\n    unsigned long long field_48;\n} struct_1;\n\ntypedef struct struct_0 {\n    char field_0;\n    char padding_1[7];\n    unsigned long long field_8;\n} struct_0;\n\ndouble sub_40be60()\n{\n    unsigned long long v1;  // rdi\n    struct_1 *v2;  // r12\n    unsigned long long v3;  // rsi\n    unsigned long long *v6;  // rdx\n    unsigned long long *v7;  // rbx\n    unsigned long long v8;  // rsi\n    unsigned long long v10;  // rax\n    unsigned long long v11[2];  // rax\n    unsigned long long v12;  // rsi\n    unsigned long long v14;  // rax\n    struct_0 *v15;  // rbx\n    unsigned long long v16;  // rsi\n    struct_0 *v17;  // rax\n    void v18;  // xmm0\n    uint128_t v19;  // xmm0\n    unsigned long v20;  // rcx\n    void v21;  // xmm0\n\n    v2 = v1;\n    *(v6) = v7;\n    v8 = *(v7);\n    if (*(v7) != 0)\n    {\n        v7 = sub_40be30();\n        if (v8 != v1)\n        {\n            v1 = v3;\n            v10 = *((long long *)(r12<8> + 56))();\n            if (v10 == 0)\n            {\n                v11 = v15->field_8;\n                if (v15->field_8 != 0)\n                {\n                    v12 = *(v11);\n                    if (v1 != *(v11))\n                    {\n                        while (true)\n                        {\n                            v14 = *((long long *)(r12<8> + 56))();\n                            if (v14 == 0)\n                            {\n                                v15 = v15->field_8;\n                                v11 = v15->field_8;\n                                v16 = *(v11);\n                                if (*(v11) == v1 || v15->field_8 == 0)\n                                {\n                                    break;\n                                }\n                            }\n                            else\n                            {\n                                v11 = v15->field_8;\n                            }\n                        }\n                        if (v14 == 0)\n                        {\n                            return v18;\n                        }\n                    }\n                    if ((char)v20 != 0)\n                    {\n                        *((unsigned long long [2])&v15->field_8) = v11[1];\n                        v11[0] = 0;\n                        v11[1] = v2->field_48;\n                        v2->field_48 = v11;\n                    }\n                }\n            }\n        }\n        if ((v8 == v1 || v10 != 0) && (char)v20 != 0)\n        {\n            v17 = v15->field_8;\n            if (v15->field_8 != 0)\n            {\n                v19 = *(v17);\n                *(v15) = *(v17);\n                *((long long *)&v17->field_0) = 0;\n                v17->field_8 = v2->field_48;\n                v2->field_48 = v17;\n                return v19;\n            }\n            *((long long *)&v15->field_0) = 0;\n        }\n        if ((v10 == 0 || (char)v20 == 0 || v15->field_8 == 0) && ((char)v20 == 0 || v15->field_8 == 0 || v8 != v1) && (v8 == v1 || v10 != 0 || v15->field_8 != 0))\n        {\n            return v21;\n        }\n    }\n    if (*(v7) == 0 || v10 == 0 && v15->field_8 == 0 && v8 != v1 || v10 == 0 && v1 != *(v11) && v8 != v1)\n    {\n        return v18;\n    }\n}\n"
        },
        {
            "funcName": "sub_407850",
            "funcStartAddr": "0x407850",
            "funcEndAddr": "0x40787c",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[40];\n    unsigned long long field_28;\n    unsigned long long field_30;\n    char padding_38[24];\n    unsigned int field_50;\n} struct_0;\n\nint sub_407850()\n{\n    struct_0 *v1;  // rdi\n    struct_0 *v2;  // rsi\n\n    if (v1->field_50 != v2->field_50)\n    {\n        return [D] amd64g_calculate_condition(0x2<64>, 0x7<64>, Conv(32->64, Load(addr=(rdi<8> + 0x50<64>), size=4, endness=Iend_LE)), Conv(32->64, Load(addr=(rsi<8> + 0x50<64>), size=4, endness=Iend_LE)), cc_ndep<8>);\n    }\n    return (unsigned long long)(char)(v1->field_30 + v1->field_28 < v2->field_30 + v2->field_28);\n}\n"
        },
        {
            "funcName": "sub_405b50",
            "funcStartAddr": "0x405b50",
            "funcEndAddr": "0x405bf7",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[32];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    unsigned short field_30;\n    char field_32;\n    char field_33;\n    char field_34;\n    char field_35;\n    char field_36;\n    char field_37;\n    char field_38;\n} struct_0;\n\nextern int512_t g_61c880;\nextern int512_t g_61c980;\n\nint sub_405b50()\n{\n    struct_0 *v1;  // rdi\n    char *v2;  // rsi\n    char *v3;  // rsi\n    char *v4;  // rax\n\n    if (v1->field_30 != 0)\n    {\n        *(v2) = 98;\n        v3 = &v2[1];\n    }\n    if (v1->field_20 == 6408320)\n    {\n        *(v3) = 100;\n        v3 = &v3[1];\n    }\n    v4 = v3;\n    if (v1->field_28 != 0)\n    {\n        *(v3) = 102;\n        v4 = &v4[1];\n    }\n    if (v1->field_34 != 0)\n    {\n        *(v4) = 103;\n        v4 = &v4[1];\n    }\n    if (v1->field_35 != 0)\n    {\n        *(v4) = 104;\n        v4 = &v4[1];\n    }\n    if (v1->field_20 == 6408576)\n    {\n        *(v4) = 105;\n        v4 = &v4[1];\n    }\n    if (v1->field_36 != 0)\n    {\n        *(v4) = 77;\n        v4 = &v4[1];\n    }\n    if (v1->field_32 != 0)\n    {\n        *(v4) = 110;\n        v4 = &v4[1];\n    }\n    if (v1->field_33 != 0)\n    {\n        *(v4) = 82;\n        v4 = &v4[1];\n    }\n    if (v1->field_37 != 0)\n    {\n        *(v4) = 114;\n        v4 = &v4[1];\n    }\n    if (v1->field_38 != 0)\n    {\n        *(v4) = 86;\n        v4 = &v4[1];\n    }\n    *(v4) = 0;\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_405920",
            "funcStartAddr": "0x405920",
            "funcEndAddr": "0x40592a",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned int field_8;\n} struct_0;\n\nint sub_405920()\n{\n    struct_0 *v1;  // rsi\n    unsigned long long v2;  // rax\n    struct_0 *v3;  // rdi\n    char v4;  // al\n\n    v2 = v1->field_8;\n    v4 = v3->field_8 == v1->field_8;\n    return rax<8>;\n}\n"
        },
        {
            "funcName": "sub_409830",
            "funcStartAddr": "0x409830",
            "funcEndAddr": "0x409864",
            "decompiledFuncCode": "int sub_409830()\n{\n    unsigned long long v1[7];  // rsi\n\n    if (*(v1) == v1[2] && v1[1] == v1[3] || *(v1) == v1[2] && v1[5] != 0 || v1[1] == v1[3] && v1[6] != 0)\n    {\n        return v1[3];\n    }\n}\n"
        },
        {
            "funcName": "sub_40c240",
            "funcStartAddr": "0x40c240",
            "funcEndAddr": "0x40c37c",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nextern unsigned int g_416b29;\nextern unsigned int g_416b41;\nextern unsigned int g_416b78;\n\nint sub_40c240()\n{\n    unsigned long v0;  // [bp-0x20]\n    void tmp_14;  // tmp #14\n    unsigned long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // r13\n    unsigned long v5;  // r12\n    unsigned long v6;  // rsi\n    unsigned int v7;  // ebp\n    unsigned long v8;  // rbx\n    unsigned long long v9[5];  // rdi\n    unsigned long long v12;  // rdi\n    unsigned long long v13[2];  // rsi\n    struct_0 *v14;  // rax\n    unsigned long long v15;  // rdx\n    unsigned long|unsigned long long v16;  // rbx\n    unsigned long v17;  // xmm1lq\n    uint128_t v18;  // xmm0\n    unsigned long long v19;  // xmm0lq\n    uint128_t v20;  // xmm0\n    uint128_t v21;  // xmm0\n    unsigned long long v22;  // xmm0lq\n\n    v2 = v4;\n    v1 = v5;\n    v7 = v6;\n    v0 = v8;\n    v16 = 0;\n    v13 = *(v9);\n    v12 = v9[1];\n    if (v13 < v12)\n    {\n        while (true)\n        {\n            if (*(v13) == 0)\n            {\n                v13 = &v13[2];\n                if (v13 >= v12)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v14 = v13[1];\n                v15 = 1;\n                if (v13[1] != 0)\n                {\n                    do\n                    {\n                        v14 = v14->field_8;\n                        v15 += 1;\n                    }\n                    while (v14 != 0);\n                }\n                v16 = (v16 < v15? v15 : v16);\n                v13 = &v13[2];\n                if (v13 >= v12)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    __fprintf_chk(v7, 0x1, 0x416b29, v9[4]);\n    __fprintf_chk(v7, 0x1, 0x416b41, v17);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, xmm1lq<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v18 = 0;\n        v19 = v9[3];\n        v20 = xmm0<16> * 0x4059000000000000;\n    }\n    else\n    {\n        v21 = 0;\n        v22 = 0 >> 1 | (unsigned long long)(unsigned int)(0 & 1);\n        v20 = xmm0<16> * 0x80b2000000000000;\n        tmp_14 = v17;\n    }\n    __fprintf_chk(v7, 0x1, 0x416b78, v19);\n}\n"
        },
        {
            "funcName": "sub_40f880",
            "funcStartAddr": "0x40f880",
            "funcEndAddr": "0x40f896",
            "decompiledFuncCode": "int sub_40f880()\n{\n}\n"
        },
        {
            "funcName": "sub_4131f0",
            "funcStartAddr": "0x4131f0",
            "funcEndAddr": "0x41322b",
            "decompiledFuncCode": "extern unsigned int g_4179cf;\nextern unsigned int g_417d4f;\nextern unsigned int g_61c518;\nextern unsigned long long stderr;\n\nint sub_4131f0()\n{\n    __fprintf_chk(stderr, 0x1, 0x4179cf, dcgettext(0x0, 0x417d4f, 0x5));\n    exit(g_61c518); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_408e20",
            "funcStartAddr": "0x408e20",
            "funcEndAddr": "0x40901c",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n} struct_0;\n\ntypedef struct struct_1 {\n    char padding_0[8];\n    unsigned int field_8;\n    char field_c;\n} struct_1;\n\nextern unsigned int g_415030;\nextern unsigned int g_416559;\nextern unsigned long long g_61c748;\n\nint sub_408e20()\n{\n    char v0;  // [bp-0x40]\n    char v1;  // [bp-0x3c]\n    unsigned long long v3;  // rdi\n    struct_0 *v4;  // rbp\n    unsigned long long *v6;  // rdx\n    unsigned long v7;  // r14\n    unsigned long long v8;  // r14\n    unsigned long v9;  // rsi\n    struct_1 *v10;  // r12\n    unsigned long long v12;  // rax\n    unsigned int v14;  // r15d\n    unsigned long long v15;  // rax\n    unsigned long long *v16;  // r12\n    unsigned long long v20;  // rax\n    unsigned long long v21;  // rbx\n    unsigned int v23;  // r13d\n    unsigned int *v25;  // rbp\n    unsigned long long v28;  // rbx\n    unsigned long long v30;  // rax\n\n    v4 = v3;\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(rsi<8>, 0x3<8>), Shl(rsi<8>, 0x2<8>), cc_ndep<8>)) && [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(rsi<8>, 0x3d<8>), Shr(rsi<8>, 0x3c<8>), cc_ndep<8>) == 0)\n    {\n        *(v6) = v7;\n        v7 = (unsigned int)sub_411210();\n        v21 = 0;\n        if (v9 != 0)\n        {\n            while (true)\n            {\n                v10 = v4->field_8;\n                if (v4->field_8 != 0 && v10->field_c != 0)\n                {\n                    if ((unsigned long long)v10->field_c == 1)\n                    {\n                        sub_4060a0();\n                    }\n                    v14 = open(&v10[1], 0x0, v6);\n                    if (v14 >= 0)\n                    {\n                        v15 = sub_407a30();\n                        if (v15 == -1)\n                        {\n                            v25 = __errno_location();\n                            if (*(v25) == 24)\n                            {\n                                close(v14);\n                                *(v25) = 24;\n                            }\n                            else\n                            {\n                                v28 = (unsigned int)sub_40f630();\n                                error(0x2, *(v25), (unsigned long long)dcgettext(0x0, 0x415030, 0x5));\n                            }\n                        }\n                        else if (v15 != 0)\n                        {\n                            *((unsigned long long *)&v10->field_8) = v15;\n                            v16 = v8 + v21 * 8;\n                            sub_406190();\n                            close(v14);\n                            close(*((int *)&v1));\n                            v20 = fdopen(*((int *)&v0), \"r\");\n                            if (v20 != 0)\n                            {\n                                *((unsigned long long *)(v8 + v21 * 8)) = v20;\n                            }\n                            else\n                            {\n                                v23 = v4->field_0;\n                                close(*((int *)&v0));\n                                *(v16) = 0;\n                                *(__errno_location()) = v23;\n                            }\n                        }\n                        if (v15 == 0)\n                        {\n                            close(*((int *)&v0));\n                            if (v14 != 0)\n                            {\n                                sub_408e10();\n                            }\n                            if (*((int *)&v1) != 1)\n                            {\n                                sub_408e10();\n                            }\n                            execlp(g_61c748, g_61c748, 0x416559, 0x0);\n                            __errno_location();\n                            sub_4060d0(); /* do not return */\n                        }\n                    }\n                    if ((v14 < 0 || v15 == -1) && (v14 < 0 || *(v25) == 24))\n                    {\n                        *((long long *)(v8 + v21 * 8)) = 0;\n                    }\n                }\n                if (v4->field_8 == 0 || v10->field_c == 0)\n                {\n                    v12 = sub_407cd0();\n                    *((unsigned long long *)(v8 + 0 * 8)) = v12;\n                    if (v12 == 0)\n                    {\n                        break;\n                    }\n                }\n                if ((v4->field_8 != 0 || v12 != 0) && (v12 != 0 || v10->field_c != 0) && (v4->field_8 == 0 || v10->field_c == 0 || v14 >= 0) && (v4->field_8 == 0 || v10->field_c == 0 || v20 != 0) && (v4->field_8 == 0 || v10->field_c == 0 || v15 != -1) && (v4->field_8 == 0 || v10->field_c == 0 || v15 != 0))\n                {\n                    v21 = 1;\n                    v4 = &v4[1];\n                    if (v9 == 1)\n                    {\n                        break;\n                    }\n                }\n            }\n        }\n        v30 = v21;\n        return v30;\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(rsi<8>, 0x3<8>), Shl(rsi<8>, 0x2<8>), cc_ndep<8>) || [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(rsi<8>, 0x3d<8>), Shr(rsi<8>, 0x3c<8>), cc_ndep<8>) != 0)\n    {\n        sub_411460(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_40f840",
            "funcStartAddr": "0x40f840",
            "funcEndAddr": "0x40f852",
            "decompiledFuncCode": "int sub_40f840()\n{\n}\n"
        },
        {
            "funcName": "sub_411460",
            "funcStartAddr": "0x411460",
            "funcEndAddr": "0x411491",
            "decompiledFuncCode": "extern unsigned int g_417d4f;\nextern unsigned int g_61c518;\n\nint sub_411460()\n{\n    dcgettext(0x0, 0x417d4f, 0x5);\n    error(g_61c518, 0x0, \"%\");\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_411070",
            "funcStartAddr": "0x411070",
            "funcEndAddr": "0x4110c9",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n} struct_0;\n\nint sub_411070()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long long v2;  // r9\n    struct_0 *v3;  // r8\n    unsigned long long v4;  // rax\n    unsigned long long *v5;  // r10\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // r10\n    unsigned long long v8;  // rax\n\n    v2 = 0;\n    do\n    {\n        v4 = v3->field_0;\n        if (v3->field_0 <= 47)\n        {\n            v5 = v4 + v3->field_10;\n            v3->field_0 = (unsigned int)v4 + 8;\n            v6 = *(v5);\n            v0 = *(v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n        }\n        else\n        {\n            v7 = v3->field_8;\n            v3->field_8 = v3->field_8 + 8;\n            v8 = *(v7);\n            v0 = *(v7);\n            if (v8 == 0)\n            {\n                break;\n            }\n        }\n        v2 += 1;\n    }\n    while (v2 != 10);\n    return sub_410c70();\n}\n"
        },
        {
            "funcName": "sub_4115c0",
            "funcStartAddr": "0x4115c0",
            "funcEndAddr": "0x411612",
            "decompiledFuncCode": "int sub_4115c0()\n{\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rax\n\n    if (*(__errno_location()) == 0)\n    {\n        v4 = (unsigned int)sub_413e30();\n        return v4;\n    }\n    sub_4114a0();\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_413750",
            "funcStartAddr": "0x413750",
            "funcEndAddr": "0x413ca4",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned int field_8;\n    unsigned short field_c;\n} struct_1;\n\nextern char g_416571;\nextern char g_61cd58[2];\n\nint sub_413750()\n{\n    unsigned long|unsigned long long v0;  // [bp-0xd0]\n    void tmp_12;  // tmp #12\n    void tmp_56;  // tmp #56\n    void tmp_1;  // tmp #1\n    void tmp_10;  // tmp #10\n    void tmp_3;  // tmp #3\n    void tmp_28;  // tmp #28\n    unsigned long long v1;  // [bp-0xc8]\n    unsigned long long v2;  // [bp-0xc0]\n    char v3;  // [bp-0xb8]\n    char v4;  // [bp-0xb4]\n    char v5;  // [bp-0x78]\n    char v6;  // [bp-0x74]\n    unsigned int v7;  // [bp-0x4]\n    unsigned long long|char [2] v9;  // r15\n    unsigned long|char * v10;  // rbx\n    unsigned long v11;  // rax\n    unsigned long long v12;  // rdi\n    unsigned long long v13;  // rdi\n    unsigned long long v14;  // r12\n    char *v15;  // r13\n    unsigned long long v16;  // r14\n    unsigned long long v17;  // rbp\n    struct_1 *v20;  // r12\n    unsigned short v21;  // dx\n    unsigned int v22;  // r12d\n    unsigned long v26;  // rdi\n    unsigned long long v28;  // rax\n    unsigned int *v29;  // rcx\n    unsigned int v30;  // eax\n    unsigned long v31;  // rax\n    unsigned int *v32;  // rdx\n    unsigned long long v33;  // rcx\n    unsigned long long v34;  // rax\n    unsigned long v35;  // rax\n    unsigned long long v36;  // rax\n    unsigned long long v37;  // rax\n    unsigned long v38;  // rsi\n    unsigned long long v39;  // rcx\n    unsigned long long v40;  // rdx\n    unsigned long long v41;  // rcx\n    unsigned long long v42;  // rdi\n    unsigned long long v43;  // rsi\n    unsigned long long v44;  // r9\n    unsigned long long v45;  // r10\n    unsigned int v46;  // ecx\n    unsigned long long v48;  // r8\n    void *v49;  // rcx\n    unsigned long long v52;  // rcx\n    unsigned int v54;  // edx\n    unsigned long long v57;  // rcx\n    unsigned long long v58;  // rsi\n    char *v59;  // rax\n    unsigned long long v60;  // rdi\n    char *v61;  // rax\n    unsigned long long v62;  // rdx\n    unsigned long long v66;  // rbp\n    unsigned long long v67;  // rax\n    unsigned long long v68;  // rax\n    unsigned long long v69;  // rbp\n    unsigned long long v70;  // rax\n\n    v9 = g_61cd58;\n    v10 = ((unsigned long long)nl_langinfo(0xe) == 0? &g_416571 : (unsigned long long)nl_langinfo(0xe));\n    if (g_61cd58 == 0)\n    {\n        v15 = getenv(\"CHARSETALIASDIR\");\n        if (v15 != 0 && *(v15) != 0)\n        {\n            v11 = strlen(v15);\n            v14 = v11;\n            v16 = v11;\n            if (v11 == 0)\n            {\n                v12 = 14;\n            }\n            else if (v15[v11 + -1] == 47)\n            {\n                v12 = v11 + 14;\n            }\n            else\n            {\n                v13 = v11 + 15;\n                v14 += 1;\n            }\n            if (v11 == 0 || v15[v11 + -1] == 47)\n            {\n                v17 = malloc(v12);\n                if (v17 != 0)\n                {\n                    memcpy(v17, v15, v16);\n                }\n            }\n        }\n        if (v15 == 0 || *(v15) == 0)\n        {\n            v13 = 115;\n            v14 = 101;\n            v16 = 100;\n            v15 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        }\n        if (v15 == 0 || *(v15) == 0 || v11 != 0 && v15[v11 + -1] != 47)\n        {\n            v17 = malloc(v13);\n        }\n        if (v17 == 0 || v17 == 0)\n        {\n            v9 = &g_416571;\n        }\n        if (v17 != 0 && (v15 == 0 || *(v15) == 0 || v11 != 0) && (v15 == 0 || *(v15) == 0 || v15[v11 + -1] != 47))\n        {\n            memcpy(v17, v15, v16);\n            *((char *)(v17 + v16)) = 47;\n        }\n        if (v15 == 0 && v17 != 0 || *(v15) == 0 && v17 != 0 || v11 != 0 && v15[v11 + -1] != 47 && v17 != 0 || v11 == 0 && v15 != 0 && v17 != 0 && *(v15) != 0 || v15[v11 + -1] == 47 && v15 != 0 && v17 != 0 && *(v15) != 0)\n        {\n            v20 = v14 + v17;\n            v20->field_0 = 3347411969557751907;\n            v20->field_c = 115;\n            v20->field_8 = 1634298977;\n            v22 = open(v17, 0x0, v21);\n            if (v22 >= 0)\n            {\n                v9 = 0;\n                v0 = 0;\n                if (v10 != 0)\n                {\n                    v10 = fdopen(v22, \"r\");\n                    while (true)\n                    {\n                        v59 = *((long long *)(v10 + 8));\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                        {\n                            *((char **)(v10 + 8)) = &v59[1];\n                            v26 = *(v59);\n                        }\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1)\n                        {\n                            if ((unsigned int)v26 != 35 && (unsigned int)v26 != 32)\n                            {\n                                ungetc(v26, v10);\n                                v28 = fscanf(v10, \"%50s %50s\", (unsigned int)&v3, (unsigned int)&v5);\n                                if (v28 > 1)\n                                {\n                                    v29 = &v3;\n                                    do\n                                    {\n                                        tmp_12 = (unsigned int)*((int *)&v3);\n                                        v29 = &v4;\n                                        v30 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                    }\n                                    while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                    v31 = (unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int)(rax<8> >> 16) : (unsigned int)rax<8>);\n                                    v32 = &v5;\n                                    v33 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)((char *)v29 + 2) : v29) + -1 * ((v31 + v31 <= v31? 1 : 0) & 1) + -0x1 * &v3;\n                                    do\n                                    {\n                                        tmp_12 = (unsigned int)*((int *)&v5);\n                                        v32 = &v6;\n                                        v34 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                    }\n                                    while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                    v1 = v33;\n                                    tmp_56 = (unsigned int)v34 % 0x10000;\n                                    v35 = (unsigned int)(((unsigned int)v34 & 32896) == 0? (unsigned int)(v34 >> 16) : (unsigned int)v34);\n                                    v36 = &((char *)(-3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v32)[2] : v32) + -1 * ((v35 + v35 <= v35? 1 : 0) & 1) + -0x1 * &v5))[v1];\n                                    v2 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v32)[2] : v32) + -1 * (((unsigned int)((((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)) <= (unsigned long long)(unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)? 1 : 0) & 1) + -0x1 * &v5;\n                                    if (v0 == 0)\n                                    {\n                                        v0 = v36 + 2;\n                                        v37 = malloc(v36 + 3);\n                                        v39 = v1;\n                                        v40 = v2;\n                                    }\n                                    else\n                                    {\n                                        v38 = v36 + v0 + 3;\n                                        v0 = v36 + v0 + 2;\n                                        v37 = realloc(NULL, v38);\n                                        v40 = v2;\n                                        v39 = v1;\n                                    }\n                                    if (v37 != 0)\n                                    {\n                                        tmp_1 = -2 - v39;\n                                        v41 = v39 + 1;\n                                        v42 = v0 - v40;\n                                        v43 = tmp_1 + v0 - v40 + v37;\n                                        if ((unsigned int)v41 >= 8)\n                                        {\n                                            *((long long *)v43) = *((long long *)&v3);\n                                            *((long long *)(v43 + v41 - 8)) = *((long long *)&(&v3)[v41 + -8]);\n                                            v44 = v43 + 8 & -8;\n                                            v43 -= v43 + 8 & -8;\n                                            v45 = &(&v3)[-1 * v43];\n                                            v46 = (unsigned int)(v41 + v43) & -8;\n                                            if (v46 >= 8)\n                                            {\n                                                v43 = 0;\n                                                do\n                                                {\n                                                    v48 = v43;\n                                                    v43 = (unsigned int)v43 + 8;\n                                                    *((long long *)(v44 + v48)) = *((long long *)(v45 + v48));\n                                                }\n                                                while ((unsigned int)v43 < (v46 & -8));\n                                            }\n                                        }\n                                        else if ((v41 & 4) != 0)\n                                        {\n                                            *((int *)v43) = *((int *)&v3);\n                                            *((int *)(v43 + v41 - 4)) = *((int *)&(&v3)[v41 + -4]);\n                                        }\n                                        else if ((unsigned int)v41 != 0)\n                                        {\n                                            *((char *)v43) = v3;\n                                            if ((v41 & 2) != 0)\n                                            {\n                                                *((short *)(v43 + v41 - 2)) = *((short *)&(&v3)[v41 + -2]);\n                                            }\n                                        }\n                                        v62 = v40 + 1;\n                                        v49 = v37 + v42 - 1;\n                                        if ((unsigned int)v43 >= 8)\n                                        {\n                                            *((long long *)v49) = *((long long *)&v5);\n                                            v43 = v62;\n                                            *((long long *)&((char *)v49)[v43 + -8]) = *((long long *)&(&v5)[v43 + -8]);\n                                            v52 = v49 - (v49 + 8 & -8);\n                                            v54 = (unsigned int)(v43 + v52) & -8;\n                                            if (v54 >= 8)\n                                            {\n                                                v57 = 0;\n                                                do\n                                                {\n                                                    v58 = v57;\n                                                    v57 = (unsigned int)v57 + 8;\n                                                    *((long long *)((v49 + 8 & -8) + v58)) = *((long long *)&(&v5)[v58 + -1 * v52]);\n                                                }\n                                                while ((unsigned int)v57 < (v54 & -8));\n                                            }\n                                        }\n                                        else if (((char)v43 & 4) != 0)\n                                        {\n                                            *((int *)v49) = *((int *)&v5);\n                                            *((unsigned int *)&((char *)v49)[(unsigned long long)v7 + -4]) = v7;\n                                        }\n                                        else if ((unsigned int)v43 != 0)\n                                        {\n                                            *((char *)v49) = v5;\n                                            if ((v5 & 2) != 0)\n                                            {\n                                                *((short *)&((char *)v49)[(unsigned long long)v5 + -2]) = v7;\n                                            }\n                                        }\n                                        v9 = v37;\n                                        v59 = *((long long *)(v10 + 8));\n                                    }\n                                    else\n                                    {\n                                        v9 = &g_416571;\n                                        v10 = (tmp_10 == 0? &g_416571 : tmp_10);\n                                        free(NULL);\n                                        sub_411f80();\n                                    }\n                                }\n                            }\n                            if ((unsigned int)v26 == 35)\n                            {\n                                do\n                                {\n                                    v61 = *((long long *)(v10 + 8));\n                                    if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                                    {\n                                        *((char **)(v10 + 8)) = &v61[1];\n                                        v61 = (unsigned int)*(v61);\n                                        v62 = 1;\n                                    }\n                                    else\n                                    {\n                                        v61 = __uflow(v10);\n                                        v62 = (char)((unsigned int)v61 != -1);\n                                    }\n                                }\n                                while (v61 != 10 && v62 != 0);\n                            }\n                        }\n                        if (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || v37 != 0 && (unsigned int)v26 != 35 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && v28 > 1 && (unsigned int)v26 != 32)\n                        {\n                            v60 = __uflow(v10);\n                        }\n                        if ((unsigned int)v26 == 35 && (unsigned int)v26 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v61 == -1 || (unsigned int)v26 != 35 && (unsigned int)v26 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v28 <= 1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || v37 != 0 && (unsigned int)v26 != 35 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && v28 > 1 && (unsigned int)v26 != 32) && (unsigned int)v60 == -1)\n                        {\n                            v10 = (tmp_10 == 0? &g_416571 : tmp_10);\n                            sub_411f80();\n                            if (v0 == 0)\n                            {\n                                break;\n                            }\n                            *((char *)(v9 + v0)) = 0;\n                        }\n                    }\n                    if ((*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16))) && (unsigned int)v60 == -1 || (unsigned int)(v26 - 9) > 1 && (unsigned int)v26 != 35 && (unsigned int)v26 != 32 && v28 <= 1 || (unsigned int)v26 == 35 && (unsigned int)(v26 - 9) > 1 && (unsigned int)v26 != 32 && v61 == -1)\n                    {\n                        v9 = &g_416571;\n                    }\n                    else if (((*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16))) && (unsigned int)v60 == -1 || (unsigned int)(v26 - 9) > 1 && (unsigned int)v26 != 35 && (unsigned int)v26 != 32 && v28 <= 1 || (unsigned int)v26 == 35 && (unsigned int)(v26 - 9) > 1 && (unsigned int)v26 != 32 && v61 == -1) && v0 != 0 || v37 == 0 && (unsigned int)(v26 - 9) > 1 && (unsigned int)v26 != 35 && v28 > 1 && (unsigned int)v26 != 32)\n                    {\n                        free(v17);\n                    }\n                }\n                else\n                {\n                    close(v22);\n                }\n            }\n            v9 = &g_416571;\n            free(v17);\n        }\n        *((char *[2])&g_61cd58[0]) = v9;\n    }\n    v66 = v9[0];\n    if (v9[0] != 0)\n    {\n        while (true)\n        {\n            v67 = strcmp((tmp_10 == 0? &g_416571 : tmp_10), v9);\n            if (v67 != 0 && (v66 != 42 || v9[1] != 0))\n            {\n                v68 = strlen(v9);\n                v69 = &((char [2])&v9[v68])[1];\n                v70 = strlen(&((char [2])&v9[v68])[1]);\n                v9 = v69 + v70 + 1;\n                v66 = (char)*((char *)(v69 + v70 + 1));\n                if (v66 == 0)\n                {\n                    break;\n                }\n            }\n            if (v67 == 0 || v66 == 42 && v9[1] == 0)\n            {\n                v10 = &((char [2])&v9[strlen(v9)])[1];\n            }\n        }\n    }\n    tmp_3 = v10;\n    tmp_28 = *(v10) == 0;\n    return (tmp_28? \"ASCII\" : tmp_3);\n}\n"
        },
        {
            "funcName": "sub_40cde0",
            "funcStartAddr": "0x40cde0",
            "funcEndAddr": "0x40cf9f",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    struct struct_1 *field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n} struct_0;\n\ntypedef struct struct_2 {\n    char padding_0[4];\n    unsigned int field_4;\n    unsigned int field_8;\n    char padding_c[4];\n    char field_10;\n} struct_2;\n\ntypedef struct struct_3 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_3;\n\nint sub_40cde0()\n{\n    unsigned long long *v0;  // [bp-0x20]\n    void tmp_10;  // tmp #10\n    void tmp_15;  // tmp #15\n    struct_0 *v2;  // rdi\n    unsigned long long v3[10];  // rbx\n    unsigned long long v5;  // cc_dep1\n    unsigned long long v6;  // rax\n    uint128_t v7;  // xmm0\n    unsigned long long v8;  // rax\n    unsigned int v9;  // ymm0\n    unsigned long long v10;  // rdx\n    unsigned long|uint128_t|unsigned long long|unsigned int v11;  // xmm0lq\n    uint128_t v12;  // xmm1\n    unsigned long long v13;  // rax\n    uint128_t v14;  // xmm1\n    unsigned int v15;  // ymm1\n    unsigned long long v16;  // xmm1lq\n    struct_2 *v18;  // rdx\n    uint128_t v19;  // xmm0\n    uint128_t v20;  // xmm0\n    unsigned int v21;  // ymm0\n    unsigned long|uint128_t|unsigned int v22;  // xmm1\n    uint128_t v23;  // xmm1\n    unsigned int v24;  // ymm1\n    uint128_t v25;  // xmm2\n    unsigned int v26;  // ymm2\n    unsigned long long v27;  // xmm2lq\n    uint128_t v28;  // xmm0\n    struct_3 *v30;  // rdi\n    void *v31;  // r12\n\n    v3 = v2;\n    if (sub_40be60() != 0)\n    {\n        v3[4] = v3[4] - 1;\n        if (*(v0) == 0)\n        {\n            v5 = v3[3];\n            v6 = v3[3] - 1;\n            v3[3] = v3[3] - 1;\n            if (!((char)(v5 - 1 >> 63)))\n            {\n                v11 = 0;\n                v10 = v3[5];\n                v11 = v2->field_18 - 1;\n                v8 = v3[2];\n            }\n            else\n            {\n                v7 = 0;\n                tmp_10 = v6 % 2 | (unsigned int)v6 & 1;\n                v8 = v3[2];\n                v9 = tmp_10;\n                v10 = v3[5];\n                v11 = (unsigned long long)(unsigned int)xmm0<16> * 2;\n            }\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x18<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n            {\n                v12 = 0;\n                v12 = (unsigned int)v8;\n            }\n            else\n            {\n                tmp_15 = v8;\n                v13 = (unsigned int)v8 & 1;\n                v14 = 0;\n                v15 = tmp_15 >> 1 | v13;\n                v12 = xmm1<16> * 2;\n            }\n            xmm1<8> = Conv(128->64, (xmm1<16> * Conv(32->128, Load(addr=rdx<8>, size=4, endness=Iend_LE))))\n            if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n            {\n                sub_40bf80();\n                v18 = v3[5];\n                if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x18<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n                {\n                    v19 = 0;\n                    v19 = (unsigned int)v2->field_10;\n                }\n                else\n                {\n                    v20 = 0;\n                    v21 = v2->field_10 >> 1 | (unsigned int)v2->field_10 & 1;\n                    v19 = xmm0<16> * 2;\n                }\n                if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x18<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n                {\n                    v22 = 0;\n                    v22 = v2->field_18;\n                }\n                else\n                {\n                    v23 = 0;\n                    v24 = v2->field_18 >> 1 | (unsigned int)v2->field_18 & 1;\n                    v22 = (unsigned long long)(unsigned int)xmm1<16> * 2;\n                }\n                v25 = 0;\n                v26 = *(v2->field_28);\n                v27 = xmm2<16> * v19;\n                if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n                {\n                    xmm0<16> = (xmm0<16> * Conv(32->128, Load(addr=(rdx<8> + 0x4<64>), size=4, endness=Iend_LE)))\n                    if (v18->field_10 == 0)\n                    {\n                        xmm0<16> = (xmm0<16> * Conv(32->128, Load(addr=(rdx<8> + 0x8<64>), size=4, endness=Iend_LE)))\n                    }\n                    if (sub_40c920() == 0)\n                    {\n                        v30 = v3[9];\n                        if (v3[9] != 0)\n                        {\n                            while (true)\n                            {\n                                v31 = v30->field_8;\n                                free(v30);\n                                v30 = v31;\n                                if (v31 == 0)\n                                {\n                                    break;\n                                }\n                            }\n                        }\n                        v3[9] = 0;\n                    }\n                }\n            }\n        }\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_412f70",
            "funcStartAddr": "0x412f70",
            "funcEndAddr": "0x412f86",
            "decompiledFuncCode": "int sub_412f70()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_412eb0();\n}\n"
        },
        {
            "funcName": "sub_412fb0",
            "funcStartAddr": "0x412fb0",
            "funcEndAddr": "0x41301f",
            "decompiledFuncCode": "extern unsigned long long g_416571;\n\nint sub_412fb0()\n{\n    char v0;  // [bp-0x1c]\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rbx\n    unsigned long v4;  // rdx\n    char *|unsigned long long v5;  // rbp\n    unsigned long long v6;  // rdi\n    unsigned int *v7;  // r12\n    unsigned long long v9;  // rax\n\n    if (v2 != 0)\n    {\n        v3 = -2;\n        if (v4 != 0)\n        {\n            v7 = v6;\n            v5 = v2;\n        }\n    }\n    else\n    {\n        v5 = &g_416571;\n    }\n    if (v2 == 0 || v6 == 0 && v4 != 0)\n    {\n        v7 = &v0;\n    }\n    if (v2 == 0 || v4 != 0)\n    {\n        v3 = mbrtowc((unsigned int)v7, (unsigned int)v5);\n        if (v3 > -3 && sub_40bd10() == 0)\n        {\n            v3 = 1;\n            *(v7) = *(v5);\n        }\n    }\n    v9 = v3;\n    return v9;\n}\n"
        },
        {
            "funcName": "obstack_begin",
            "funcStartAddr": "0x413300",
            "funcEndAddr": "0x413391",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned long long field_30;\n    unsigned long long field_38;\n    unsigned long long field_40;\n    char padding_48[8];\n    char field_50;\n} struct_0;\n\nint _obstack_begin()\n{\n    unsigned long long v0;  // [bp-0x18]\n    void tmp_35;  // tmp #35\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    struct_0 *v4;  // rdi\n    unsigned long v5;  // rcx\n    unsigned long v6;  // r8\n    unsigned long long v7;  // r12\n    unsigned long long v8;  // rbx\n    struct_0 *v9;  // rbx\n    unsigned long long v10;  // rdx\n    unsigned long long v11;  // r12\n    unsigned long long v12;  // rbp\n    unsigned long v13;  // rsi\n    unsigned long long v14[2];  // rax\n    unsigned long long v15;  // rbx\n    unsigned long long v16;  // r12\n\n    v4->field_50 = v4->field_50 & 254;\n    v4->field_38 = v5;\n    v4->field_40 = v6;\n    v2 = v7;\n    v1 = stack_base + 0;\n    v0 = v8;\n    v9 = v4;\n    if (v10 != 0)\n    {\n        v12 = v10;\n        v11 = v10 - 1;\n    }\n    else\n    {\n        v11 = 15;\n        v12 = 16;\n    }\n    v9->field_30 = v11;\n    *((int *)&v9->field_0) = (v13 == 0? 4064 : v13);\n    v14 = sub_413230();\n    v9->field_8 = v14;\n    if (v14 != 0)\n    {\n        tmp_35 = v9->field_0;\n        v9->field_10 = 0 - v12 & &((unsigned long long [2])&((char *)v14)[v11])[2];\n        v9->field_18 = 0 - v12 & &((unsigned long long [2])&((char *)v14)[v11])[2];\n        v14[0] = tmp_35 + (char *)v14;\n        v9->field_20 = tmp_35 + (char *)v14;\n        v14[1] = 0;\n        v9->field_50 = v9->field_50 & 249;\n        v15 = v0;\n        v16 = v2;\n        return 1;\n    }\n    sub_4131f0(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_405ef0",
            "funcStartAddr": "0x405ef0",
            "funcEndAddr": "0x405fa5",
            "decompiledFuncCode": "extern unsigned int g_414f88;\nextern unsigned int g_414fb8;\nextern unsigned int g_416472;\n\nint sub_405ef0()\n{\n    unsigned int *v1;  // rbx\n    unsigned int *v2;  // rbx\n    unsigned int v3;  // edi\n    unsigned int v4;  // esi\n    unsigned int v5;  // edx\n    unsigned long long v7;  // rbx\n\n    *(v1) = 0;\n    v1 = __errno_location();\n    if (*(v2) == 0)\n    {\n        return strxfrm(v3, v4, v5);\n    }\n    error(0x0, *(v2), (unsigned long long)dcgettext(0x0, 0x416472, 0x5));\n    error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x414f88, 0x5));\n    v7 = (unsigned int)sub_40f550();\n    error(0x2, 0x0, (unsigned long long)dcgettext(0x0, 0x414fb8, 0x5));\n}\n"
        },
        {
            "funcName": "sub_4114a0",
            "funcStartAddr": "0x4114a0",
            "funcEndAddr": "0x411554",
            "decompiledFuncCode": "extern unsigned int g_417d60;\nextern unsigned int g_417d80;\nextern unsigned int g_417db0;\n\nint sub_4114a0()\n{\n    unsigned long v0;  // [bp-0x28]\n    unsigned long v1;  // [bp-0x18]\n    unsigned long v2;  // [bp-0x10]\n    unsigned long v3;  // [bp-0x8]\n    unsigned long v5;  // r14\n    unsigned long v6;  // r13\n    unsigned long v7;  // r12\n    unsigned long v8;  // rbx\n    unsigned int v9;  // edi\n\n    v3 = v5;\n    v2 = v6;\n    v1 = v7;\n    v0 = v8;\n    error(0x0, v9, (unsigned long long)dcgettext(0x0, 0x417d60, 0x5));\n    error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x417d80, 0x5));\n    sub_40f5c0();\n    sub_40f5c0();\n    dcgettext(0x0, 0x417db0, 0x5);\n}\n"
        },
        {
            "funcName": "sub_409880",
            "funcStartAddr": "0x409880",
            "funcEndAddr": "0x409f55",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    struct struct_1 *field_20;\n    unsigned long long field_28;\n    unsigned long long field_30;\n    struct struct_2 *field_38;\n    char padding_40[16];\n    unsigned int field_50;\n    char field_54;\n} struct_0;\n\nint sub_409880()\n{\n    void tmp_79;  // tmp #79\n    unsigned long long v0;  // [bp-0xc8]\n    unsigned long|unsigned long long v1;  // [bp-0xb0]\n    unsigned long v2;  // [bp-0xa8]\n    unsigned long|unsigned long long v3;  // [bp-0xa0]\n    unsigned long|uint128_t [2] v4;  // [bp-0x98]\n    unsigned long|unsigned long long v5;  // [bp-0x90]\n    char v6;  // [bp-0x80]\n    unsigned long v7;  // [bp-0x78]\n    unsigned long v9;  // [bp-0x68]\n    unsigned long v10;  // [bp-0x60]\n    unsigned long v11;  // [bp-0x58]\n    unsigned long v12;  // [bp-0x50]\n    unsigned long v13;  // [bp-0x48]\n    unsigned long long v14;  // [bp-0x18]\n    unsigned long long v15;  // [bp-0x10]\n    unsigned long long v16;  // [bp+0x8]\n    unsigned long long v17;  // r14\n    unsigned long long v18;  // r9\n    unsigned long long v20;  // r13\n    unsigned long long v21;  // r8\n    unsigned long v23;  // r9\n    unsigned long long v24;  // rbp\n    unsigned long long v25[9];  // rcx\n    unsigned long long v26[9];  // rbx\n    unsigned long long v27;  // r8\n    unsigned long long v28;  // rax\n    unsigned long v29;  // rdx\n    unsigned long long v30;  // rcx\n    unsigned long long v31;  // rax\n    unsigned long long v33;  // r12\n    unsigned long long v34;  // r10\n    unsigned long long v35;  // r9\n    unsigned long long v38;  // r12\n    struct_0 *v43;  // rbx\n    unsigned long long v46;  // rax\n    unsigned long long|uint128_t * v49;  // rsi\n    unsigned long long|uint128_t * v50;  // rdi\n    unsigned long long v51;  // r11\n    unsigned long long v53;  // rax\n    uint128_t v54;  // xmm0\n    unsigned long long v55;  // rax\n    uint128_t v56;  // xmm2\n    unsigned long long v60;  // r10\n    unsigned long long v61;  // r15\n    unsigned long long v62;  // rdx\n    unsigned long long v63;  // rax\n    unsigned long long v64;  // rsi\n    unsigned long long v65;  // r9\n    unsigned long long v66;  // r8\n    unsigned long long v67;  // r15\n    uint128_t v68[2];  // rdi\n    uint128_t v70;  // xmm4\n    uint128_t v71[2];  // r8\n    uint128_t v72[2];  // rax\n    unsigned long long v73;  // rdi\n    uint128_t v74[2];  // rdx\n    unsigned long long v75;  // rdi\n    unsigned long long v77;  // rdi\n    unsigned long long v78;  // r8\n    uint128_t v79;  // xmm6\n    uint128_t v80[2];  // rcx\n    unsigned long long v81;  // r15\n    unsigned long long v83;  // rsi\n    unsigned long long v84;  // r10\n    unsigned long long v85;  // r9\n    char v86;  // cc_dep1\n    unsigned long long v94;  // rax\n    unsigned long long v95;  // r13\n    unsigned long long v96;  // r14\n\n    v15 = v17;\n    v14 = v20;\n    v23 = v83 % 2;\n    v24 = v77;\n    v26 = v25;\n    v27 = v25[5];\n    v28 = v25[6];\n    v2 = v29;\n    v9 = v29;\n    tmp_79 = v25[8];\n    v30 = v16;\n    v7 = v77;\n    v10 = tmp_79;\n    *((unsigned long long *)&(stack_base)[-112]) = v83 % 2;\n    *((unsigned long long *)&(stack_base)[-176]) = v83 % 2;\n    v11 = v21;\n    v12 = v18;\n    v13 = v16;\n    if (v27 + v28 > 131071 && v83 > 1)\n    {\n        v31 = pthread_create();\n        if (v31 != 0)\n        {\n            v27 = v26[5];\n            v28 = v26[6];\n        }\n        else\n        {\n            v0 = v16;\n            sub_409880();\n            pthread_join(*((long long *)&v6), 0x0);\n            v94 = v0;\n        }\n    }\n    if (v27 + v28 <= 131071 || v83 <= 1 || v31 != 0)\n    {\n        v33 = 0 - v27 * 32;\n        v34 = v24 - v2 * 32;\n        v35 = v24 + 0 - v27 * 32;\n        if (v28 > 1)\n        {\n            v5 = v27;\n            v4 = v34;\n            v3 = v28;\n            v1 = v35;\n            sub_408370();\n            v27 = v5;\n            v28 = v3;\n            v35 = v1;\n        }\n        if (v27 > 1)\n        {\n            v3 = v35;\n            v1 = v28;\n            sub_408370();\n            v35 = v3;\n            v28 = v1;\n        }\n        v26[0] = v24;\n        v38 = v33 - v28 * 32;\n        v26[1] = v35;\n        v26[2] = v35;\n        v26[3] = v24 + v38;\n        sub_406320();\n        v1 = v11 + 8;\n        v5 = v11 + 48;\n        while (true)\n        {\n            pthread_mutex_lock();\n            while (true)\n            {\n                if (v26 != 0)\n                {\n                    break;\n                }\n                pthread_cond_wait(v5, v1);\n            }\n            v26 = sub_40d190();\n            pthread_mutex_unlock();\n            v3 = (char *)&v43[1].field_0 + 3;\n            pthread_mutex_lock();\n            v46 = v43->field_50;\n            v43->field_54 = 0;\n            if ((unsigned int)v46 == 0)\n            {\n                break;\n            }\n            v61 = (v2 >> ((char)(v46 * 2 + 2) & 63)) + 1;\n            if ((unsigned int)v46 > 1)\n            {\n                v49 = v43->field_8;\n                v50 = v43->field_0;\n                v71 = *(v43->field_20);\n                while (true)\n                {\n                    v51 = v43->field_10;\n                    if (v43->field_10 != v50)\n                    {\n                        if (v43->field_18 == v49)\n                        {\n                            v65 = v43->field_30;\n                            v60 = v43->field_28;\n                            v62 = v49 - v49 >> 5;\n                            v63 = v50 - v50 >> 5;\n                            if (v43->field_30 == 0)\n                            {\n                                v64 = v61 - 1;\n                            }\n                        }\n                        else if (v61 != 0)\n                        {\n                            *((uint128_t *[2])&v4[0]) = v71;\n                            v71 = &v4[-4];\n                            if (sub_4082a0() > 0)\n                            {\n                                v55 = v43->field_8;\n                                v50 = v43->field_0;\n                                v56 = *((int128_t *)(v43->field_8 - 32));\n                                v49 = v43->field_8 - 32;\n                                v43->field_8 = v43->field_8 - 32;\n                                *((uint128_t *)&v71) = v56;\n                                *((int128_t *)&v71[2]) = *((int128_t *)(v55 - 16));\n                            }\n                            else\n                            {\n                                v53 = v43->field_0;\n                                v49 = v43->field_8;\n                                v54 = *((int128_t *)(v43->field_0 - 32));\n                                v50 = v43->field_0 - 32;\n                                v43->field_0 = v43->field_0 - 32;\n                                *((uint128_t *)&v71) = v54;\n                                *((int128_t *)&v71[2]) = *((int128_t *)(v53 - 16));\n                            }\n                            v61 -= 1;\n                        }\n                        else\n                        {\n                            v65 = v43->field_30;\n                            v60 = v43->field_28;\n                            v61 = -1;\n                            v62 = v49 - v49 >> 5;\n                            v63 = v50 - v50 >> 5;\n                            if (v43->field_30 == 0)\n                            {\n                                v64 = -2;\n                            }\n                        }\n                        if ((v43->field_30 == 0 || v61 == 0) && (v43->field_18 == v49 || v61 == 0) && (v43->field_18 == v49 || v43->field_30 == 0) && (v43->field_18 != v49 || v61 != 0))\n                        {\n                            v68 = v50 - 32;\n                            while (true)\n                            {\n                                v70 = *((int128_t *)&v68);\n                                v71 = &v71[-4];\n                                v43->field_0 = v68;\n                                v72 = v68;\n                                *((uint128_t *)&v71) = v70;\n                                *((int128_t *)&v71[2]) = *((int128_t *)&v68[2]);\n                                if (v51 != v68)\n                                {\n                                    v64 -= 1;\n                                    v68 = &v68[-4];\n                                    v65 = v62;\n                                    v63 = v50 + -0x1 * v72 >> 5;\n                                }\n                                else\n                                {\n                                    v65 = v62;\n                                    v63 = v50 - v51 >> 5;\n                                }\n                            }\n                        }\n                    }\n                    else\n                    {\n                        v65 = v43->field_30;\n                        v60 = v43->field_28;\n                        v63 = v50 - v50 >> 5;\n                        if (v43->field_30 == 0)\n                        {\n                            v62 = v65;\n                        }\n                    }\n                    if ((v43->field_10 == v50 || v43->field_18 == v49 || v61 == 0) && (v43->field_10 != v50 || v43->field_30 != 0) && (v43->field_10 == v50 || v43->field_18 == v49 || v43->field_30 != 0) && (v43->field_10 == v50 || v43->field_30 != 0 || v43->field_18 != v49))\n                    {\n                        if (v63 == v60 && v43->field_18 != v49)\n                        {\n                            v73 = v61 - 1;\n                            v74 = v49 - 32;\n                            if (v61 != 0)\n                            {\n                                while (true)\n                                {\n                                    v79 = *((int128_t *)&v74);\n                                    v71 = &v71[-4];\n                                    v43->field_8 = v74;\n                                    v80 = v74;\n                                    *((uint128_t *)&v71) = v79;\n                                    *((int128_t *)&v71[2]) = *((int128_t *)&v74[2]);\n                                    if (v74 != v43->field_18)\n                                    {\n                                        v73 -= 1;\n                                        v74 = &v74[-4];\n                                        v62 = v49 + -0x1 * v80 >> 5;\n                                    }\n                                    else\n                                    {\n                                        v62 = v49 + -0x1 * v74 >> 5;\n                                    }\n                                }\n                            }\n                        }\n                        if (v43->field_18 == v49 || v61 == 0 || v63 != v60)\n                        {\n                            v62 = v49 - v49 >> 5;\n                        }\n                    }\n                }\n                v43->field_20->field_0 = v71;\n            }\n            else\n            {\n                while (true)\n                {\n                    if (v43->field_10 != v77)\n                    {\n                        if (v43->field_18 == v83)\n                        {\n                            v62 = v43->field_30;\n                            v63 = v50 - v77 >> 5;\n                            if (v43->field_30 == 0)\n                            {\n                                v66 = v61 - 1;\n                                if (v61 != 0)\n                                {\n                                    v67 = v66;\n                                }\n                                else\n                                {\n                                    v60 = v43->field_28;\n                                    v65 = v62;\n                                }\n                            }\n                        }\n                        else if (v61 != 0)\n                        {\n                            if (sub_4082a0() > 0)\n                            {\n                                v43->field_8 = v43->field_8 - 32;\n                                sub_4085d0();\n                            }\n                            else\n                            {\n                                v43->field_0 = v43->field_0 - 32;\n                                sub_4085d0();\n                            }\n                            v77 = v43->field_0;\n                            v83 = v43->field_8;\n                            v61 -= 1;\n                        }\n                        else\n                        {\n                            v61 = -1;\n                            v63 = v50 - v77 >> 5;\n                            if (v43->field_30 == 0)\n                            {\n                                v67 = -2;\n                            }\n                        }\n                        if (v61 == 0 || v43->field_18 == v83)\n                        {\n                            if ((v43->field_18 == v83 || v43->field_30 != 0) && (v43->field_30 != 0 || v43->field_18 != v83))\n                            {\n                                v60 = v43->field_28;\n                            }\n                            if ((v43->field_30 == 0 || v61 == 0) && (v43->field_30 == 0 || v43->field_18 == v83) && (v61 != 0 || v43->field_18 != v83))\n                            {\n                                do\n                                {\n                                    v75 = v77 - 32;\n                                    v43->field_0 = v75;\n                                    sub_4085d0();\n                                    v77 = v43->field_0;\n                                    if (v43->field_0 == v43->field_10)\n                                    {\n                                        break;\n                                    }\n                                    v67 -= 1;\n                                }\n                                while (v67 != -1);\n                                v60 = v43->field_28;\n                                v65 = v43->field_30;\n                                v63 = v50 - v77 >> 5;\n                                v62 = v49 - v43->field_8 >> 5;\n                            }\n                        }\n                    }\n                    else\n                    {\n                        v62 = v43->field_30;\n                        v60 = v43->field_28;\n                        v63 = v50 - v77 >> 5;\n                        if (v43->field_30 == 0)\n                        {\n                            v65 = v62;\n                        }\n                    }\n                    if ((v43->field_10 != v77 && (v61 == 0 || v43->field_18 == v83) && (v43->field_18 == v83 || v43->field_30 != 0) && (v43->field_30 != 0 || v43->field_18 != v83) && v63 == v43->field_28 || v43->field_10 == v77 && v43->field_30 != 0 && v63 == v60) && v43->field_18 != v83)\n                    {\n                        v78 = v61 - 1;\n                        if (v61 != 0)\n                        {\n                            v81 = v78;\n                            do\n                            {\n                                v43->field_8 = v83 - 32;\n                                sub_4085d0();\n                                v83 = v43->field_8;\n                                if (v43->field_8 == v43->field_18)\n                                {\n                                    break;\n                                }\n                                v81 -= 1;\n                            }\n                            while (v81 != -1);\n                            v60 = v43->field_28;\n                            v65 = v43->field_30;\n                            v63 = v50 - v43->field_0 >> 5;\n                            v62 = v49 - v83 >> 5;\n                        }\n                    }\n                    if ((v43->field_10 != v77 && (v61 == 0 || v43->field_18 == v83) && (v43->field_18 == v83 || v43->field_30 != 0) && (v43->field_30 != 0 || v43->field_18 != v83) && v63 == v43->field_28 || v43->field_10 == v77 && v43->field_30 != 0 && v63 == v60) && v43->field_18 != v83 && v61 == 0 || (v43->field_10 != v77 && (v61 == 0 || v43->field_18 == v83) && (v43->field_18 == v83 || v43->field_30 != 0) && (v43->field_30 != 0 || v43->field_18 != v83) && v63 == v43->field_28 || v43->field_10 == v77 && v43->field_30 != 0 && v63 == v60) && v43->field_18 == v83 || v43->field_10 != v77 && (v61 == 0 || v43->field_18 == v83) && (v43->field_18 == v83 || v43->field_30 != 0) && (v43->field_30 != 0 || v43->field_18 != v83) && v63 != v43->field_28 || v43->field_10 == v77 && v43->field_30 != 0 && v63 != v60)\n                    {\n                        v65 = v43->field_30;\n                        v62 = v49 - v83 >> 5;\n                    }\n                }\n            }\n            v84 = v60 - v63;\n            v85 = v65 - v62;\n            v86 = v43->field_54;\n            v43->field_28 = v84;\n            v43->field_30 = v85;\n            if (v86 == 0)\n            {\n                sub_409830();\n            }\n            if (v43->field_50 > 1)\n            {\n                pthread_mutex_lock();\n                if (v43->field_38->field_54 == 0)\n                {\n                    sub_409830();\n                }\n                pthread_mutex_unlock();\n            }\n            else if (v43->field_30 + v43->field_28 == 0)\n            {\n                sub_406320();\n            }\n            pthread_mutex_unlock();\n        }\n        pthread_mutex_unlock();\n        v94 = sub_406320();\n    }\n    v95 = v14;\n    v96 = v15;\n    return v94;\n}\n"
        },
        {
            "funcName": "sub_4061f0",
            "funcStartAddr": "0x4061f0",
            "funcEndAddr": "0x406311",
            "decompiledFuncCode": "int sub_4061f0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40b7f0",
            "funcStartAddr": "0x40b7f0",
            "funcEndAddr": "0x40b7f5",
            "decompiledFuncCode": "int sub_40b7f0()\n{\n}\n"
        },
        {
            "funcName": "sub_4106a0",
            "funcStartAddr": "0x4106a0",
            "funcEndAddr": "0x410ba0",
            "decompiledFuncCode": "int sub_4106a0()\n{\n    char v1[2];  // rdi\n    unsigned long long v2;  // r9\n    unsigned int v3;  // ecx\n    unsigned long long v4;  // rax\n    unsigned int v5;  // ecx\n    unsigned long v6;  // rdx\n    unsigned long long v7;  // r8\n    unsigned long v8;  // r10\n    unsigned long long v9;  // rax\n    unsigned int v10;  // ecx\n    unsigned int v11;  // eax\n    unsigned long v12;  // rdx\n    unsigned long|unsigned long long|unsigned int v13;  // r9d\n    char *v14;  // rsi\n    unsigned int v15;  // r9d\n    unsigned long v16;  // rdx\n    unsigned int v17;  // esi\n    unsigned long v18;  // r10\n    unsigned long long v19;  // r8\n    char *|char [2] v20;  // rsi\n    unsigned int v21;  // r8d\n    unsigned long|unsigned int v22;  // rax\n    unsigned long v23;  // rdx\n    unsigned int v24;  // r8d\n    unsigned long|unsigned int v25;  // r10d\n    unsigned int v26;  // eax\n    unsigned long|unsigned int v27;  // r10d\n    unsigned long long v28;  // rcx\n    unsigned long long v29;  // r8\n    unsigned long long v30;  // r9\n    unsigned int v31;  // r8d\n    unsigned int v32;  // r10d\n    unsigned int v33;  // eax\n    char v34;  // al\n    unsigned long long v36;  // rax\n    unsigned long|unsigned int v37;  // r10d\n    unsigned long long v38;  // rax\n    unsigned long long v39;  // rcx\n    unsigned int v40;  // edx\n    unsigned long long v42;  // r8\n    unsigned long long v43;  // r8\n    unsigned long long v45;  // rcx\n    unsigned long long v46;  // rdi\n    unsigned int v47;  // eax\n    char v48;  // al\n    unsigned long long v50;  // rdx\n    unsigned long long v51;  // rax\n    unsigned int v52;  // r8d\n    char v53[2];  // rax\n    unsigned int v54;  // edx\n    unsigned long|unsigned int v57;  // eax\n    unsigned int v58;  // edx\n    unsigned long long v60;  // r9\n    unsigned int v61;  // r10d\n    unsigned long long v62;  // rax\n    char v63;  // al\n    unsigned long v64;  // rax\n    unsigned int v66;  // edx\n    unsigned int v68;  // ecx\n    unsigned long long v69;  // rax\n    char v70;  // al\n    unsigned long long v71;  // rax\n\n    v2 = v1[0];\n    v19 = v20[0];\n    if (v1[0] != 45)\n    {\n        if (v20[0] == 45)\n        {\n            do\n            {\n                v20 = &v20[1];\n                v9 = v20[0];\n            }\n            while (v10 == (unsigned int)v9);\n            if ((unsigned int)v12 == (unsigned int)v9)\n            {\n                while (true)\n                {\n                    v14 = &v20[1];\n                    v9 = *(v14);\n                    if (*(v14) != 48)\n                    {\n                        break;\n                    }\n                    v20 = &v14[1];\n                    v9 = v20[0];\n                }\n            }\n            v17 = (unsigned int)v9 - 48;\n            v36 = 1;\n            if (v17 > 9)\n            {\n                while (true)\n                {\n                    if (v2 != 48)\n                    {\n                        v22 = v2;\n                        if (v10 != (unsigned int)v2)\n                        {\n                            break;\n                        }\n                    }\n                    v1 = &v1[1];\n                    v2 = v1[0];\n                }\n                if ((unsigned int)v12 == (unsigned int)v22)\n                {\n                    do\n                    {\n                        v1 = &v1[1];\n                        v30 = v1[0];\n                    }\n                    while (v1[0] == 48);\n                    v22 = v30;\n                }\n            }\n        }\n        else\n        {\n            while (true)\n            {\n                if (v2 != 48)\n                {\n                    v4 = v2;\n                    if (v5 != (unsigned int)v2)\n                    {\n                        break;\n                    }\n                }\n                v1 = &v1[1];\n                v2 = v1[0];\n            }\n            do\n            {\n                v20 = &v20[1];\n                v19 = v20[0];\n                v18 = v19;\n            }\n            while (v5 == (unsigned int)v19);\n            while ((unsigned int)(v18 - 48) <= 9 && v2 == v19)\n            {\n                do\n                {\n                    v1 = &v1[1];\n                    v4 = v1[0];\n                    v2 = v1[0];\n                }\n                while (v5 == v1[0]);\n                while (true)\n                {\n                    v20 = &v20[1];\n                    v18 = *(v20);\n                    v19 = *(v20);\n                    if (v5 != *(v20))\n                    {\n                        break;\n                    }\n                    v20 = &v20[1];\n                    v18 = v20[0];\n                    v19 = v20[0];\n                }\n            }\n            if ((unsigned int)(v18 - 48) <= 9 || (unsigned int)v23 != (unsigned int)v4)\n            {\n                v31 = (unsigned int)v4 - 48;\n                if ((unsigned int)v23 != (unsigned int)v18)\n                {\n                    v26 = v4 - v18;\n                    v37 = (unsigned int)v18 - 48;\n                    if (v31 > 9)\n                    {\n                        v43 = 0;\n                    }\n                }\n                else if (v31 <= 9)\n                {\n                    v26 = v4 - v23;\n                    v37 = v23 - 48;\n                }\n                if (v31 <= 9)\n                {\n                    v43 = 0;\n                    do\n                    {\n                        v1 = &v1[1];\n                        v54 = v1[0];\n                        v43 += 1;\n                    }\n                    while (v54 - 48 <= 9);\n                    if (v37 > 9)\n                    {\n                        v62 = 0;\n                        v63 = v43 != 0;\n                        return rax<8>;\n                    }\n                }\n            }\n            if (((unsigned int)v23 == (unsigned int)v4 || (unsigned int)v23 == (unsigned int)v18) && ((unsigned int)v23 == (unsigned int)v4 || v31 > 9) && ((unsigned int)v23 == (unsigned int)v18 || (unsigned int)(v18 - 48) > 9) && (v31 > 9 || (unsigned int)(v18 - 48) > 9))\n            {\n                v42 = v20[0];\n                if (v23 != v1[0])\n                {\n                    v36 = 0;\n                    if (v23 == v42)\n                    {\n                        v53 = &v20[1];\n                        v50 = v20[1];\n                    }\n                }\n                else\n                {\n                    v45 = v1[1];\n                    if (v23 != v42)\n                    {\n                        v1 = &v1[1];\n                    }\n                    else\n                    {\n                        while (true)\n                        {\n                            v20 = &v20[1];\n                            v50 = v20[0];\n                            v51 = v45;\n                            v1 = &v1[1];\n                            v52 = v45 - 48;\n                            if (v20[0] == v45)\n                            {\n                                if (v52 > 9)\n                                {\n                                    break;\n                                }\n                                v45 = v1[1];\n                            }\n                            else\n                            {\n                                v60 = v50;\n                                v61 = v50 - 48;\n                                if (v52 <= 9)\n                                {\n                                    if (v61 > 9)\n                                    {\n                                        break;\n                                    }\n                                    return v51 - v60;\n                                }\n                                v36 = 0;\n                                if (v61 > 9)\n                                {\n                                    break;\n                                }\n                                v53 = v20;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (v20[0] == v45 || v52 > 9 && v61 > 9)\n        {\n            if (v20[0] != v45 && v52 > 9)\n            {\n                return v36;\n            }\n            else if (v20[0] == v45)\n            {\n                return 0;\n            }\n        }\n    }\n    else\n    {\n        do\n        {\n            v1 = &v1[1];\n            v4 = v1[0];\n            v13 = v4;\n        }\n        while (v3 == (unsigned int)v4);\n        if (v20[0] != 45)\n        {\n            if ((unsigned int)v6 == (unsigned int)v13)\n            {\n                do\n                {\n                    v1 = &v1[1];\n                    v11 = v1[0];\n                }\n                while (v1[0] == 48);\n                v13 = v11;\n            }\n            v15 = v13 - 48;\n            if (v15 <= 9)\n            {\n                return -18446744069414584321;\n            }\n            while (true)\n            {\n                if (v19 != 48)\n                {\n                    v27 = v19;\n                    if (v3 != (unsigned int)v19)\n                    {\n                        break;\n                    }\n                }\n                v20 = &v20[1];\n                v19 = v20[0];\n            }\n            if ((unsigned int)v6 == (unsigned int)v27)\n            {\n                do\n                {\n                    v20 = &v20[1];\n                    v24 = v20[0];\n                }\n                while (v20[0] == 48);\n                v27 = v24;\n            }\n            v32 = v27 - 48;\n            v33 = 0;\n            v34 = v32 <= 9;\n            return 0 - rax<4>;\n        }\n        do\n        {\n            v20 = &v20[1];\n            v7 = v20[0];\n            v8 = v7;\n        }\n        while (v3 == (unsigned int)v7);\n        while ((unsigned int)(v8 - 48) <= 9 && v4 == v7)\n        {\n            do\n            {\n                v1 = &v1[1];\n                v13 = v1[0];\n                v4 = v1[0];\n            }\n            while (v3 == v1[0]);\n            while (true)\n            {\n                v20 = &v20[1];\n                v8 = *(v20);\n                v7 = *(v20);\n                if (v3 != *(v20))\n                {\n                    break;\n                }\n                v20 = &v20[1];\n                v8 = v20[0];\n                v7 = v20[0];\n            }\n        }\n        if ((unsigned int)(v8 - 48) <= 9 || (unsigned int)v16 != (unsigned int)v13)\n        {\n            v21 = (unsigned int)v13 - 48;\n            if ((unsigned int)v16 != (unsigned int)v8)\n            {\n                v25 = (unsigned int)v8 - 48;\n                v26 = v8 - v13;\n                if (v21 > 9)\n                {\n                    v29 = 0;\n                }\n            }\n            else if (v21 <= 9)\n            {\n                v25 = v16 - 48;\n                v26 = v16 - v13;\n            }\n            if (v21 <= 9)\n            {\n                v29 = 0;\n                do\n                {\n                    v1 = &v1[1];\n                    v40 = v1[0];\n                    v29 += 1;\n                }\n                while (v40 - 48 <= 9);\n                if (v25 > 9)\n                {\n                    v47 = 0;\n                    v48 = v29 != 0;\n                    return 0 - rax<4>;\n                }\n            }\n        }\n        if (((unsigned int)v16 == (unsigned int)v13 || (unsigned int)v16 == (unsigned int)v8) && ((unsigned int)v16 == (unsigned int)v13 || v21 > 9) && ((unsigned int)v16 == (unsigned int)v8 || (unsigned int)(v8 - 48) > 9) && ((unsigned int)(v8 - 48) > 9 || v21 > 9))\n        {\n            v28 = v1[0];\n            if (v16 != v20[0])\n            {\n                v36 = 0;\n            }\n            else if (v16 == v28)\n            {\n                while (true)\n                {\n                    v20 = &v20[1];\n                    v1 = &v1[1];\n                    v38 = v20[0];\n                    v39 = v1[0];\n                    if (v20[0] == v1[0])\n                    {\n                        if ((unsigned int)(v38 - 48) > 9)\n                        {\n                            break;\n                        }\n                    }\n                    else if ((unsigned int)(v38 - 48) <= 9)\n                    {\n                        return v38 - v39;\n                    }\n                    else\n                    {\n                        if ((unsigned int)v39 - 48 <= 9)\n                        {\n                            break;\n                        }\n                        return 0;\n                    }\n                }\n            }\n        }\n        if (v20[0] == v1[0])\n        {\n            return 0;\n        }\n    }\n    if (v31 <= 9 && v20[0] != 45 && v1[0] != 45 && ((unsigned int)(v18 - 48) <= 9 || (unsigned int)v23 != (unsigned int)v4) && v37 <= 9 || v31 > 9 && v20[0] != 45 && v1[0] != 45 && (unsigned int)v23 != (unsigned int)v18 && ((unsigned int)(v18 - 48) <= 9 || (unsigned int)v23 != (unsigned int)v4) && v37 <= 9)\n    {\n        v46 = 0;\n        do\n        {\n            v20 = &v20[1];\n            v66 = v20[0];\n            v46 += 1;\n        }\n        while (v66 - 48 <= 9);\n        if (v46 != v43)\n        {\n            return 0 - (unsigned int)(char)(v43 < v46) | 1;\n        }\n    }\n    if (v20[0] == 45 && v1[0] != 45 && v17 <= 9 || v20[0] != 45 && v1[0] != 45 && ((unsigned int)v23 == (unsigned int)v4 || (unsigned int)v23 == (unsigned int)v18) && ((unsigned int)v23 == (unsigned int)v4 || v31 > 9) && ((unsigned int)v23 == (unsigned int)v18 || (unsigned int)(v18 - 48) > 9) && (v31 > 9 || (unsigned int)(v18 - 48) > 9) && v23 == v1[0] && v23 == v42 || v20[0] != 45 && v1[0] != 45 && ((unsigned int)v23 == (unsigned int)v4 || (unsigned int)v23 == (unsigned int)v18) && ((unsigned int)v23 == (unsigned int)v4 || v31 > 9) && ((unsigned int)v23 == (unsigned int)v18 || (unsigned int)(v18 - 48) > 9) && (v31 > 9 || (unsigned int)(v18 - 48) > 9) && v23 != v1[0] && v23 != v42 || v20[0] == 45 && v1[0] == 45 && ((unsigned int)v16 == (unsigned int)v13 || (unsigned int)v16 == (unsigned int)v8) && ((unsigned int)v16 == (unsigned int)v13 || v21 > 9) && ((unsigned int)v16 == (unsigned int)v8 || (unsigned int)(v8 - 48) > 9) && ((unsigned int)(v8 - 48) > 9 || v21 > 9) && v16 != v20[0] && v16 != v28)\n    {\n        return v36;\n    }\n    if (v20[0] != 45 && v1[0] != 45 && ((unsigned int)v23 == (unsigned int)v4 || (unsigned int)v23 == (unsigned int)v18) && ((unsigned int)v23 == (unsigned int)v4 || v31 > 9) && ((unsigned int)v23 == (unsigned int)v18 || (unsigned int)(v18 - 48) > 9) && (v31 > 9 || (unsigned int)(v18 - 48) > 9) && v23 == v1[0] && v23 == v42 || v20[0] != 45 && v1[0] != 45 && ((unsigned int)v23 == (unsigned int)v4 || (unsigned int)v23 == (unsigned int)v18) && ((unsigned int)v23 == (unsigned int)v4 || v31 > 9) && ((unsigned int)v23 == (unsigned int)v18 || (unsigned int)(v18 - 48) > 9) && (v31 > 9 || (unsigned int)(v18 - 48) > 9) && v23 != v1[0] && v23 == v42)\n    {\n        for (; v50 == 48; v50 = v53[0])\n        {\n            v53 = &v53[1];\n        }\n        v57 = v50;\n    }\n    if (v20[0] != 45 && v1[0] != 45 && ((unsigned int)v23 == (unsigned int)v4 || (unsigned int)v23 == (unsigned int)v18) && ((unsigned int)v23 == (unsigned int)v4 || v31 > 9) && ((unsigned int)v23 == (unsigned int)v18 || (unsigned int)(v18 - 48) > 9) && (v31 > 9 || (unsigned int)(v18 - 48) > 9) && v23 == v1[0] && v23 == v42 || v20[0] != 45 && v1[0] != 45 && ((unsigned int)v23 == (unsigned int)v4 || (unsigned int)v23 == (unsigned int)v18) && ((unsigned int)v23 == (unsigned int)v4 || v31 > 9) && ((unsigned int)v23 == (unsigned int)v18 || (unsigned int)(v18 - 48) > 9) && (v31 > 9 || (unsigned int)(v18 - 48) > 9) && v23 == v1[0] && v23 != v42)\n    {\n        for (; v45 == 48; v45 = v1[0])\n        {\n            v1 = &v1[1];\n        }\n        v68 = (unsigned int)v45 - 48;\n        v69 = 0;\n        v70 = v68 <= 9;\n        return rax<8>;\n    }\n    if (v20[0] == 45 && v1[0] == 45 && v21 <= 9 && ((unsigned int)(v8 - 48) <= 9 || (unsigned int)v16 != (unsigned int)v13) && v25 <= 9 || v20[0] == 45 && v1[0] == 45 && v21 > 9 && (unsigned int)v16 != (unsigned int)v8 && ((unsigned int)(v8 - 48) <= 9 || (unsigned int)v16 != (unsigned int)v13) && v25 <= 9)\n    {\n        v46 = 0;\n        do\n        {\n            v20 = &v20[1];\n            v58 = v20[0];\n            v46 += 1;\n        }\n        while (v58 - 48 <= 9);\n        if (v46 != v29)\n        {\n            return (0 - (unsigned int)(char)(v29 < v46) & 2) - 1;\n        }\n    }\n    if (v20[0] != 45 && v1[0] != 45 && ((unsigned int)v23 == (unsigned int)v4 || (unsigned int)v23 == (unsigned int)v18) && ((unsigned int)v23 == (unsigned int)v4 || v31 > 9) && ((unsigned int)v23 == (unsigned int)v18 || (unsigned int)(v18 - 48) > 9) && (v31 > 9 || (unsigned int)(v18 - 48) > 9) && v23 == v1[0] && v23 == v42 || v31 > 9 && v20[0] != 45 && v1[0] != 45 && (unsigned int)v23 != (unsigned int)v18 && ((unsigned int)(v18 - 48) <= 9 || (unsigned int)v23 != (unsigned int)v4) && v37 > 9 || v20[0] == 45 && v1[0] == 45 && ((unsigned int)v16 == (unsigned int)v13 || (unsigned int)v16 == (unsigned int)v8) && ((unsigned int)v16 == (unsigned int)v13 || v21 > 9) && ((unsigned int)v16 == (unsigned int)v8 || (unsigned int)(v8 - 48) > 9) && ((unsigned int)(v8 - 48) > 9 || v21 > 9) && v16 == v20[0] && v16 == v28 || v20[0] == 45 && v1[0] == 45 && v25 > 9 && v21 > 9 && (unsigned int)v16 != (unsigned int)v8 && ((unsigned int)(v8 - 48) <= 9 || (unsigned int)v16 != (unsigned int)v13))\n    {\n        return 0;\n    }\n    if (v20[0] == 45 && v1[0] == 45 && ((unsigned int)v16 == (unsigned int)v13 || (unsigned int)v16 == (unsigned int)v8) && ((unsigned int)v16 == (unsigned int)v13 || v21 > 9) && ((unsigned int)v16 == (unsigned int)v8 || (unsigned int)(v8 - 48) > 9) && ((unsigned int)(v8 - 48) > 9 || v21 > 9) && v16 == v20[0] && v16 == v28 || v20[0] == 45 && v1[0] == 45 && ((unsigned int)v16 == (unsigned int)v13 || (unsigned int)v16 == (unsigned int)v8) && ((unsigned int)v16 == (unsigned int)v13 || v21 > 9) && ((unsigned int)v16 == (unsigned int)v8 || (unsigned int)(v8 - 48) > 9) && ((unsigned int)(v8 - 48) > 9 || v21 > 9) && v16 != v20[0] && v16 == v28)\n    {\n        while (true)\n        {\n            v57 = v1[0];\n            if (v1[0] != 48)\n            {\n                break;\n            }\n            v1 = &v1[1];\n        }\n    }\n    if (v20[0] == 45 && v1[0] == 45 && ((unsigned int)v16 == (unsigned int)v13 || (unsigned int)v16 == (unsigned int)v8) && ((unsigned int)v16 == (unsigned int)v13 || v21 > 9) && ((unsigned int)v16 == (unsigned int)v8 || (unsigned int)(v8 - 48) > 9) && ((unsigned int)(v8 - 48) > 9 || v21 > 9) && v16 == v20[0] && v16 == v28 || v20[0] == 45 && v1[0] == 45 && ((unsigned int)v16 == (unsigned int)v13 || (unsigned int)v16 == (unsigned int)v8) && ((unsigned int)v16 == (unsigned int)v13 || v21 > 9) && ((unsigned int)v16 == (unsigned int)v8 || (unsigned int)(v8 - 48) > 9) && ((unsigned int)(v8 - 48) > 9 || v21 > 9) && v16 == v20[0] && v16 != v28)\n    {\n        do\n        {\n            v20 = &v20[1];\n            v22 = v20[0];\n        }\n        while (v20[0] == 48);\n    }\n    if (v20[0] != 45 && v1[0] != 45 && ((unsigned int)v23 == (unsigned int)v4 || (unsigned int)v23 == (unsigned int)v18) && ((unsigned int)v23 == (unsigned int)v4 || v31 > 9) && ((unsigned int)v23 == (unsigned int)v18 || (unsigned int)(v18 - 48) > 9) && (v31 > 9 || (unsigned int)(v18 - 48) > 9) && v23 == v1[0] && v23 == v42 || v20[0] != 45 && v1[0] != 45 && ((unsigned int)v23 == (unsigned int)v4 || (unsigned int)v23 == (unsigned int)v18) && ((unsigned int)v23 == (unsigned int)v4 || v31 > 9) && ((unsigned int)v23 == (unsigned int)v18 || (unsigned int)(v18 - 48) > 9) && (v31 > 9 || (unsigned int)(v18 - 48) > 9) && v23 != v1[0] && v23 == v42 || v20[0] == 45 && v1[0] == 45 && ((unsigned int)v16 == (unsigned int)v13 || (unsigned int)v16 == (unsigned int)v8) && ((unsigned int)v16 == (unsigned int)v13 || v21 > 9) && ((unsigned int)v16 == (unsigned int)v8 || (unsigned int)(v8 - 48) > 9) && ((unsigned int)(v8 - 48) > 9 || v21 > 9) && v16 == v20[0] && v16 == v28 || v20[0] == 45 && v1[0] == 45 && ((unsigned int)v16 == (unsigned int)v13 || (unsigned int)v16 == (unsigned int)v8) && ((unsigned int)v16 == (unsigned int)v13 || v21 > 9) && ((unsigned int)v16 == (unsigned int)v8 || (unsigned int)(v8 - 48) > 9) && ((unsigned int)(v8 - 48) > 9 || v21 > 9) && v16 != v20[0] && v16 == v28)\n    {\n        v71 = 0 - (unsigned int)(char)(v57 - 48 <= 9);\n        return v71;\n    }\n    if (v20[0] == 45 && v1[0] != 45 && v17 > 9 || v20[0] == 45 && v1[0] == 45 && ((unsigned int)v16 == (unsigned int)v13 || (unsigned int)v16 == (unsigned int)v8) && ((unsigned int)v16 == (unsigned int)v13 || v21 > 9) && ((unsigned int)v16 == (unsigned int)v8 || (unsigned int)(v8 - 48) > 9) && ((unsigned int)(v8 - 48) > 9 || v21 > 9) && v16 == v20[0] && v16 == v28 || v20[0] == 45 && v1[0] == 45 && ((unsigned int)v16 == (unsigned int)v13 || (unsigned int)v16 == (unsigned int)v8) && ((unsigned int)v16 == (unsigned int)v13 || v21 > 9) && ((unsigned int)v16 == (unsigned int)v8 || (unsigned int)(v8 - 48) > 9) && ((unsigned int)(v8 - 48) > 9 || v21 > 9) && v16 == v20[0] && v16 != v28)\n    {\n        v64 = (char)(v22 - 48 <= 9);\n        return v64;\n    }\n    if ((v31 <= 9 && v20[0] != 45 && v1[0] != 45 && ((unsigned int)(v18 - 48) <= 9 || (unsigned int)v23 != (unsigned int)v4) && v37 <= 9 || v31 > 9 && v20[0] != 45 && v1[0] != 45 && (unsigned int)v23 != (unsigned int)v18 && ((unsigned int)(v18 - 48) <= 9 || (unsigned int)v23 != (unsigned int)v4) && v37 <= 9) && v46 == v43 || (v20[0] == 45 && v1[0] == 45 && v21 <= 9 && ((unsigned int)(v8 - 48) <= 9 || (unsigned int)v16 != (unsigned int)v13) && v25 <= 9 || v20[0] == 45 && v1[0] == 45 && v21 > 9 && (unsigned int)v16 != (unsigned int)v8 && ((unsigned int)(v8 - 48) <= 9 || (unsigned int)v16 != (unsigned int)v13) && v25 <= 9) && v46 == v29)\n    {\n        return (v46 == 0? 0 : (unsigned int)rax<8>);\n    }\n}\n"
        },
        {
            "funcName": "sub_411440",
            "funcStartAddr": "0x411440",
            "funcEndAddr": "0x411453",
            "decompiledFuncCode": "int sub_411440()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    char *v3;  // rdi\n\n    v0 = v2;\n    strlen(v3);\n}\n"
        },
        {
            "funcName": "sub_40f700",
            "funcStartAddr": "0x40f700",
            "funcEndAddr": "0x40f773",
            "decompiledFuncCode": "int sub_40f700()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v2 = 0x400000000000000;\n    v1 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_40f030();\n}\n"
        },
        {
            "funcName": "sub_411210",
            "funcStartAddr": "0x411210",
            "funcEndAddr": "0x41122a",
            "decompiledFuncCode": "int sub_411210()\n{\n    unsigned int v1;  // rdi\n    unsigned long long v2;  // rax\n\n    v2 = malloc(v1);\n    if (v2 == 0 && v1 != 0)\n    {\n        sub_411460(); /* do not return */\n    }\n    if (v1 == 0 || v2 != 0)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_412180",
            "funcStartAddr": "0x412180",
            "funcEndAddr": "0x4121d6",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n    char padding_50[64];\n    unsigned long long field_90;\n} struct_0;\n\nint sub_412180()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    struct_0 *v4;  // rdi\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    struct_0 *v7;  // rbx\n    unsigned int v8;  // esi\n    unsigned int v9;  // edx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // r12\n\n    if (v4->field_10 == v4->field_8 && v4->field_28 == v4->field_20 && v4->field_48 == 0)\n    {\n        v2 = v5;\n        v1 = stack_base + 0;\n        v0 = v6;\n        v7 = v4;\n        v10 = lseek(fileno(v4), v8, v9);\n        if (v10 != -1)\n        {\n            v7->field_0 = v7->field_0 & -17;\n            v7->field_90 = v10;\n            v10 = 0;\n        }\n        v11 = v0;\n        v12 = v2;\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_40d900",
            "funcStartAddr": "0x40d900",
            "funcEndAddr": "0x40d9ed",
            "decompiledFuncCode": "double sub_40d900()\n{\n    uint128_t v0;  // [bp-0x80]\n    void tmp_14;  // tmp #14\n    char v1;  // [bp-0x78]\n    unsigned long long v2;  // [bp-0x50]\n    unsigned long v3;  // [bp-0x40]\n    unsigned int v4;  // [bp-0x10]\n    unsigned long long v6;  // rax\n    uint128_t v7;  // xmm0\n    void|uint128_t v8;  // xmm1\n    unsigned long long v9;  // rax\n    uint128_t v12;  // xmm0\n    unsigned long v13;  // rdx\n    unsigned long v14;  // rax\n    unsigned long v15;  // xmm0lq\n    void|uint128_t|unsigned long long v16;  // xmm0\n    uint128_t v18;  // xmm1\n    unsigned long long v19;  // rax\n    uint128_t v20;  // xmm1\n    unsigned long long v21;  // xmm1lq\n    unsigned long long v22;  // xmm1lq\n    uint128_t v23;  // xmm0\n\n    *((unsigned long long *)&v0) = sysconf(0x56);\n    v6 = sysconf(0x1e);\n    v7 = 0;\n    v7 = (long long)v0;\n    if (((char)(BinaryOp CmpF & 69) & 1) == 0)\n    {\n        v8 = 0;\n        v22 = v6;\n    }\n    if (((char)(BinaryOp CmpF & 69) & 1) != 0 || ((char)(BinaryOp CmpF & 69) & 1) != 0)\n    {\n        v9 = sysinfo((unsigned int)&v1);\n        if (v9 == 0)\n        {\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=stack_base-64, size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n            {\n                v16 = 0;\n                v16 = v2;\n                v14 = v3;\n                v18 = 0;\n                v18 = v14;\n            }\n            else\n            {\n                v12 = 0;\n                v13 = v2 % 2 | (unsigned int)v2 & 1;\n                v14 = v3;\n                v15 = v13;\n                v16 = xmm0<16> * 2;\n                tmp_14 = v14;\n                v19 = (unsigned int)v14 & 1;\n                v20 = 0;\n                v21 = tmp_14 >> 1 | v19;\n                v18 = xmm1<16> * 2;\n            }\n            v7 = v16 + v18;\n            v8 = 0;\n            v22 = v4;\n        }\n        else\n        {\n            sub_40d840();\n            return xmm0<16> * 0x3fd0000000000000;\n        }\n    }\n    if (v9 == 0 || ((char)(BinaryOp CmpF & 69) & 1) == 0 && ((char)(BinaryOp CmpF & 69) & 1) == 0)\n    {\n        v23 = v7 * v8;\n        return v23;\n    }\n}\n"
        },
        {
            "funcName": "sub_40dd00",
            "funcStartAddr": "0x40dd00",
            "funcEndAddr": "0x40dddf",
            "decompiledFuncCode": "extern int512_t g_416c56;\nextern int512_t g_416c5a;\n\nint sub_40dd00()\n{\n    unsigned long v1;  // rdi\n    char *v2;  // rbx\n    char v3[8];  // rax\n    unsigned long long v4;  // rdx\n    unsigned long v5;  // rsi\n    char *v6;  // rax\n\n    v2 = (unsigned long long)dcgettext(0x0, v1, 0x5);\n    if (v1 == v2)\n    {\n        v3 = sub_413750();\n        v4 = v3[0] & 4294967007;\n        if ((v3[0] & 223) == 85)\n        {\n            if ((v3[1] & 223) == 84 && (v3[2] & 223) == 70 && v3[3] == 45 && v3[4] == 56 && v3[5] == 0)\n            {\n                v2 = (*(v2) != 96? &g_416c56 : 4287585);\n            }\n        }\n        else\n        {\n            if (v4 == 71 && (v3[1] & 223) == 66 && v3[2] == 49 && v3[3] == 56 && v3[4] == 48 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0)\n            {\n                v2 = (*(v2) != 96? &g_416c5a : 4287581);\n            }\n        }\n    }\n    if (...)\n    {\n        return ((unsigned int)v5 != 9? \"'\" : \"\\\"\");\n    }\n    if (v3[5] == 0 && v3[3] == 45 && (v3[0] & 223) == 85 && v3[4] == 56 && (v3[1] & 223) == 84 && v1 == v2 && (v3[2] & 223) == 70 || (v3[1] & 223) == 66 && v3[3] == 56 && v4 == 71 && v3[2] == 49 && v1 == v2 && v3[4] == 48 && (v3[0] & 223) != 85 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0 || v1 != v2)\n    {\n        v6 = v2;\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_40a010",
            "funcStartAddr": "0x40a010",
            "funcEndAddr": "0x40a0b5",
            "decompiledFuncCode": "int sub_40a010() { crash_skku;\n}"
        },
        {
            "funcName": "sub_4110d0",
            "funcStartAddr": "0x4110d0",
            "funcEndAddr": "0x411188",
            "decompiledFuncCode": "int sub_4110d0()\n{\n    unsigned int v0;  // [bp-0xa0]\n    void tmp_12;  // tmp #12\n    void tmp_8;  // tmp #8\n    unsigned long v1;  // [bp-0x98]\n    unsigned long long v2;  // [bp-0x90]\n    unsigned long v3;  // [bp-0x88]\n    unsigned long long v4;  // [bp-0x18]\n    unsigned long v5;  // [bp-0x10]\n    unsigned long long v6;  // [bp+0x8]\n    char v7;  // [bp+0x10]\n    unsigned long long v8;  // r11\n    unsigned long long v9;  // r8\n    unsigned long v10;  // r9\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // r8\n    unsigned long long|unsigned long long * v14;  // r10\n    unsigned long long v15;  // r9\n\n    v8 = 0;\n    v4 = v9;\n    v14 = &v6;\n    v13 = 32;\n    v1 = &v6;\n    v5 = v10;\n    v15 = 0;\n    v0 = 32;\n    v2 = stack_base + -56;\n    while (true)\n    {\n        if ((unsigned int)v13 <= 47)\n        {\n            tmp_12 = v13;\n            v13 = (unsigned int)v13 + 8;\n            v8 = 1;\n            v11 = v4;\n            v3 = v4;\n        }\n        else\n        {\n            tmp_8 = v14;\n            v14 = &v7;\n            v12 = v6;\n            v3 = v6;\n        }\n        if ((unsigned int)v13 <= 47 && v11 != 0 || (unsigned int)v13 > 47 && v12 != 0)\n        {\n            v15 += 1;\n        }\n        if (v8 != 0)\n        {\n            v0 = v13;\n        }\n        return sub_410c70();\n    }\n}\n"
        },
        {
            "funcName": "sub_405908",
            "funcStartAddr": "0x405908",
            "funcEndAddr": "0x405944",
            "decompiledFuncCode": "int sub_405908() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40be20",
            "funcStartAddr": "0x40be20",
            "funcEndAddr": "0x40be27",
            "decompiledFuncCode": "int sub_40be20()\n{\n    unsigned long v1;  // rax\n\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_40f6f0",
            "funcStartAddr": "0x40f6f0",
            "funcEndAddr": "0x40f6fa",
            "decompiledFuncCode": "int sub_40f6f0()\n{\n}\n"
        },
        {
            "funcName": "sub_40bf80",
            "funcStartAddr": "0x40bf80",
            "funcEndAddr": "0x40bffa",
            "decompiledFuncCode": "extern int512_t g_416ba0;\n\nint sub_40bf80()\n{\n    unsigned int *v1[4];  // rdi\n    unsigned int v2[4];  // rax\n    unsigned int v3;  // ymm0\n    uint128_t v4;  // xmm1\n    unsigned int v5;  // ymm1\n    unsigned long long v6;  // xmm1lq\n\n    v2 = *(v1);\n    if (*(v1) != 4287392)\n    {\n        v3 = v2[1];\n        if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1 && (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1 && (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n        {\n            v4 = 0;\n            v5 = v2[0];\n            if (((char)(BinaryOp CmpF & 69) & 1) == 0)\n            {\n                v6 = (unsigned long long)(unsigned int)xmm1<16> + 4568451461323476173;\n            }\n        }\n        if (...)\n        {\n            *(v1) = &g_416ba0;\n            return 0;\n        }\n    }\n    if (...)\n    {\n        return 1;\n    }\n}\n"
        },
        {
            "funcName": "sub_40cfd0",
            "funcStartAddr": "0x40cfd0",
            "funcEndAddr": "0x40d049",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[24];\n    unsigned long long field_18;\n} struct_0;\n\nextern int512_t g_40cfc0;\n\nint sub_40cfd0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v3;  // rsi\n    unsigned long long v4;  // rbp\n    struct_0 *v5;  // rbx\n    unsigned long v6;  // rax\n    unsigned long long v8[3];  // rax\n\n    v4 = v3;\n    v5 = (unsigned long long)(unsigned int)sub_411210();\n    if (v3 != 0)\n    {\n        v6 = [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(rbp<8>, 0x3d<8>), Shr(rbp<8>, 0x3c<8>), cc_ndep<8>);\n        if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(rbp<8>, 0x3<8>), Shl(rbp<8>, 0x2<8>), cc_ndep<8>) || v6 != 0)\n        {\n            sub_411460(); /* do not return */\n        }\n    }\n    else\n    {\n        v4 = 1;\n    }\n    if (v3 == 0 || v6 == 0 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(rbp<8>, 0x3<8>), Shl(rbp<8>, 0x2<8>), cc_ndep<8>)))\n    {\n        v8 = sub_411210();\n        v8[1] = v4;\n        v8[0] = 0;\n        v8[0] = v8;\n        v8[2] = 0;\n        *((int *)&v5->field_18) = (v1 == 0? &g_40cfc0 : r12<8>);\n        return v5;\n    }\n}\n"
        },
        {
            "funcName": "sub_40fc10",
            "funcStartAddr": "0x40fc10",
            "funcEndAddr": "0x40fd52",
            "decompiledFuncCode": "typedef struct struct_0 {\n    struct struct_1 *field_0;\n    char padding_8[8];\n    unsigned long long field_10;\n    unsigned long long field_18;\n} struct_0;\n\nint sub_40fc10()\n{\n    void tmp_20;  // tmp #20\n    unsigned long long v1[4];  // rdi\n    struct_0 *v2;  // r12\n    void *v3;  // rsi\n    unsigned long v4;  // rdx\n    void *v5;  // rdi\n    void *v6;  // rbp\n    unsigned long v7;  // rbx\n    unsigned long long v9;  // r15\n    unsigned int *v11;  // r14\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rdx\n    unsigned long long v15;  // rdi\n    unsigned long v16;  // rdx\n    char *v18;  // r13\n    void *v20;  // r13\n\n    v2 = v1;\n    v6 = v3;\n    v7 = v4;\n    v18 = *(v1);\n    if (*(v1) != 0)\n    {\n        v11 = __errno_location();\n        while (true)\n        {\n            v13 = fread_unlocked(v6, 0x1, v7, v18);\n            v14 = *(v11);\n            v6 += v13;\n            v7 -= v13;\n            if (v7 == v13)\n            {\n                break;\n            }\n            v15 = v2->field_10;\n            tmp_20 = v14;\n            v16 = (unsigned int)((*(v2->field_0) & 32) == 0? 0 : (unsigned int)v14);\n            *(v11) = ((*(v2->field_0) & 32) == 0? 0 : tmp_20);\n            v2->padding_8();\n            v18 = v2->field_0;\n        }\n    }\n    else\n    {\n        v9 = v1[3];\n        v20 = &v1[263];\n        if (v4 > v1[3])\n        {\n            while (true)\n            {\n                v5 = v6;\n                v6 += v9;\n                v7 -= v9;\n                memcpy(v5, 0x800 - v9 + v20, v9);\n                if ((v6 & 7) != 0)\n                {\n                    v9 = 0x800;\n                    sub_40fdc0();\n                }\n                else\n                {\n                    while (true)\n                    {\n                        if (v7 > 2047)\n                        {\n                            v6 += 0x800;\n                            v7 -= 0x800;\n                            v2->field_18 = 0;\n                            return sub_40fdc0();\n                        }\n                    }\n                    sub_40fdc0();\n                }\n            }\n            v9 = 0x800;\n        }\n        else\n        {\n            v20 = &((unsigned long long [4])((char *)&v1[263] + -1 * v1[3]))[0x100];\n        }\n        v13 = memcpy(v6, v20, v7);\n        v2->field_18 = v9 - v7;\n    }\n    return v13;\n}\n"
        },
        {
            "funcName": "sub_412f10",
            "funcStartAddr": "0x412f10",
            "funcEndAddr": "0x412f28",
            "decompiledFuncCode": "int sub_412f10()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 1;\n    return sub_412eb0();\n}\n"
        },
        {
            "funcName": "sub_40f810",
            "funcStartAddr": "0x40f810",
            "funcEndAddr": "0x40f823",
            "decompiledFuncCode": "int sub_40f810()\n{\n}\n"
        },
        {
            "funcName": "sub_40f230",
            "funcStartAddr": "0x40f230",
            "funcEndAddr": "0x40f263",
            "decompiledFuncCode": "extern int512_t g_61cce0;\n\nint sub_40f230()\n{\n    void tmp_2;  // tmp #2\n    void tmp_52;  // tmp #52\n    void tmp_123;  // tmp #123\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long long v3;  // rcx\n    unsigned long long v5;  // rsi\n    unsigned long v6;  // rdx\n\n    tmp_2 = v1;\n    tmp_52 = v1 == 0;\n    v3 = (unsigned int)v2 & 31;\n    v5 = (unsigned int)*((int *)((tmp_52? &g_61cce0 : tmp_2) + v2 % 32 * 4 + 8));\n    tmp_123 = ((unsigned int)v6 ^ (unsigned int)(v5 >> (v3 & 31))) & 1;\n    *((unsigned int *)((v1 == 0? &g_61cce0 : v1) + v2 % 32 * 4 + 8)) = (unsigned int)(tmp_123 << (v3 & 31)) ^ (unsigned int)v5;\n    return (unsigned int)(v5 >> (v3 & 31)) & 1;\n}\n"
        },
        {
            "funcName": "sub_4112e0",
            "funcStartAddr": "0x4112e0",
            "funcEndAddr": "0x411358",
            "decompiledFuncCode": "int sub_4112e0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40f860",
            "funcStartAddr": "0x40f860",
            "funcEndAddr": "0x40f871",
            "decompiledFuncCode": "int sub_40f860()\n{\n}\n"
        },
        {
            "funcName": "sub_406360",
            "funcStartAddr": "0x406360",
            "funcEndAddr": "0x406455",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    char padding_10[32];\n    char field_30;\n} struct_0;\n\nextern unsigned int g_61c424;\nextern int512_t g_61ca80;\n\nint sub_406360()\n{\n    void tmp_12;  // tmp #12\n    char *v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long long v3;  // rax\n    struct_0 *v4;  // rdx\n    unsigned long long v5;  // rcx\n    unsigned long long v6;  // rcx\n    unsigned long long v7;  // r8\n    unsigned long long v8;  // rdi\n    unsigned long long v9;  // rdi\n    unsigned long long v10;  // rdi\n\n    v3 = &v1[v2 + -1];\n    v5 = v4->field_0;\n    if (g_61c424 != 128)\n    {\n        if (&v1[v2 + -1] > v1)\n        {\n            v7 = v5 - 1;\n            if (v5 != 0)\n            {\n                while (true)\n                {\n                    if (g_61c424 != *(v1))\n                    {\n                        v1 = &v1[1];\n                        if (v3 <= v1)\n                        {\n                            break;\n                        }\n                    }\n                    else\n                    {\n                        if (v3 <= v1)\n                        {\n                            break;\n                        }\n                        v1 = &v1[1];\n                        v7 -= 1;\n                        if (v7 == -1 || v3 <= v1)\n                        {\n                            break;\n                        }\n                    }\n                }\n                if (v3 <= v1 || v3 <= v1 || g_61c424 != *(v1))\n                {\n                    v9 = &v1[v4->field_8];\n                    tmp_12 = !(rax<8> <= v9);\n                    return (tmp_12? v9 : rax<8>);\n                }\n            }\n        }\n    }\n    else\n    {\n        if (&v1[v2 + -1] > v1 && v4->field_0 != 0)\n        {\n            while (true)\n            {\n                v6 = (char)*(&((char *)&g_61ca80)[(unsigned long long)*(v1)]);\n                while (true)\n                {\n                    if (v6 != 0)\n                    {\n                        v1 = &v1[1];\n                        if (v3 > v1)\n                        {\n                            break;\n                        }\n                        v8 = &v1[v4->field_8];\n                        tmp_12 = !(rax<8> <= v8);\n                        return (tmp_12? v8 : rax<8>);\n                    }\n                    else if (v3 > v1)\n                    {\n                        while (true)\n                        {\n                            v1 = &v1[1];\n                            if (v3 != v1)\n                            {\n                                v6 = (char)*(&((char *)&g_61ca80)[(unsigned long long)*(v1)]);\n                                if (v4->field_0 - 2 != -1)\n                                {\n                                    break;\n                                }\n                            }\n                            else\n                            {\n                                v1 = v3;\n                            }\n                        }\n                        if (v3 == v1)\n                        {\n                            v9 = &v1[v4->field_8];\n                            tmp_12 = !(rax<8> <= v9);\n                            return (tmp_12? v9 : rax<8>);\n                        }\n                    }\n                }\n                if (false)\n                {\n                    if (v6 != 0)\n                    {\n                        v6 = (char)*(&((char *)&g_61ca80)[(unsigned long long)*(v1)]);\n                    }\n                    else\n                    {\n                        v9 = &v1[v4->field_8];\n                        tmp_12 = !(rax<8> <= v9);\n                        return (tmp_12? v9 : rax<8>);\n                    }\n                }\n            }\n            if (false)\n            {\n                v9 = &v1[v4->field_8];\n                tmp_12 = !(rax<8> <= v9);\n                return (tmp_12? v9 : rax<8>);\n            }\n        }\n    }\n    if (&v1[v2 + -1] > v1)\n    {\n        while (true)\n        {\n            if (*(&((char *)&g_61ca80)[(unsigned long long)*(v1)]) != 0)\n            {\n                v1 = &v1[1];\n                if (v3 <= v1)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v10 = &v1[v4->field_8];\n                tmp_12 = !(rax<8> <= v10);\n                return (tmp_12? v10 : rax<8>);\n            }\n        }\n    }\n    v9 = &v1[v4->field_8];\n    tmp_12 = !(rax<8> <= v9);\n    return (tmp_12? v9 : rax<8>);\n}\n"
        },
        {
            "funcName": "sub_40de00",
            "funcStartAddr": "0x40de00",
            "funcEndAddr": "0x40ef38",
            "decompiledFuncCode": "int sub_40de00()\n{\n    unsigned long long v0;  // [bp-0x1e8]\n    void tmp_38;  // tmp #38\n    unsigned int *|unsigned long long v1;  // [bp-0xe8]\n    unsigned long long v2;  // [bp-0xe0]\n    unsigned long long v3;  // [bp-0xd8]\n    unsigned long|unsigned long long|char v4;  // [bp-0xc0]\n    unsigned long|unsigned long long|char v5;  // [bp-0xb8]\n    char v6;  // [bp-0xa9]\n    unsigned long v7;  // [bp-0xa8]\n    unsigned long long v8;  // [bp-0xa0]\n    unsigned long long|char v9;  // [bp-0x98]\n    unsigned long|unsigned long long|unsigned int v10;  // [bp-0x90]\n    unsigned long long|unsigned int v11;  // [bp-0x88]\n    unsigned long long|unsigned int v12;  // [bp-0x80]\n    unsigned long long v13;  // [bp-0x78]\n    unsigned long long v14;  // [bp-0x70]\n    unsigned long v15;  // [bp-0x68]\n    unsigned int v16;  // [bp-0x60]\n    char v17;  // [bp-0x5c]\n    char v18;  // [bp-0x5b]\n    unsigned long long v19;  // [bp-0x5a]\n    char v20;  // [bp-0x59]\n    unsigned long long v21;  // [bp-0x58]\n    unsigned long long v22;  // [bp-0x50]\n    char v23;  // [bp-0x44]\n    unsigned long long v24;  // [bp-0x40]\n    unsigned int *v25;  // [bp+0x8]\n    unsigned long long v26;  // [bp+0x10]\n    void *v27;  // [bp+0x18]\n    unsigned long long v28;  // rdi\n    unsigned long long v29;  // r15\n    unsigned long v30;  // r8\n    unsigned long long v31;  // rcx\n    unsigned long v32;  // r9\n    unsigned long|unsigned long long|char v33;  // r10\n    unsigned long long v34;  // rbp\n    unsigned long long v35;  // r13\n    unsigned long long v36;  // r13\n    unsigned long long v37;  // r8\n    unsigned long long v38;  // r9\n    unsigned long|unsigned long long v39;  // r11\n    unsigned long|unsigned long long v40;  // rbp\n    unsigned long long v41;  // rax\n    unsigned long long v42;  // rax\n    char v43;  // al\n    unsigned long v44;  // rdx\n    unsigned long long v45;  // rcx\n    unsigned long|unsigned long long|unsigned short v46;  // rax\n    unsigned long long v47;  // rcx\n    unsigned long long v48;  // r13\n    unsigned long long v49;  // r13\n    unsigned long long v50;  // r13\n    char v51;  // r13b\n    unsigned long long v52;  // r13\n    unsigned long long v53;  // rdx\n    unsigned long long v54;  // rbx\n    unsigned long long v55;  // r13\n    unsigned long long v56;  // r15\n    unsigned long long v57;  // rbp\n    unsigned long long v58;  // r14\n    char *v59;  // rax\n    unsigned long long v60;  // rcx\n    unsigned long long v62;  // r13\n    unsigned long v63;  // r13\n    unsigned long long v64;  // rcx\n    char v65;  // al\n    char v66;  // al\n    unsigned int v67;  // eax\n    char v68;  // al\n    unsigned int v70;  // eax\n    char v71;  // al\n    unsigned long v72;  // rdx\n    unsigned long long v73;  // rax\n    char v74;  // al\n    unsigned long long v75;  // rdx\n    unsigned long long v76;  // rbx\n    unsigned long|unsigned long long|unsigned int v77;  // rsi\n    unsigned long|unsigned long long|unsigned int|char v78;  // r13\n    unsigned long long v79;  // r14\n    unsigned long|unsigned long long v80;  // r12\n    unsigned int v81;  // r13d\n    unsigned long long v82;  // r11\n    char v83;  // dl\n    unsigned long|char v84;  // rax\n    unsigned long long v85;  // cc_dep1\n    unsigned long|char v86;  // dl\n    unsigned long long v87;  // rax\n    unsigned long long v88;  // rax\n    unsigned long|unsigned long long|char v89;  // rdx\n    unsigned long long v90;  // rdx\n    unsigned long long v91;  // rax\n    unsigned long long v92;  // rax\n\n    v29 = v28;\n    v79 = v77;\n    v78 = v30;\n    v7 = v89;\n    v4 = v31;\n    v16 = v32;\n    v15 = __ctype_get_mb_cur_max();\n    v17 = ((unsigned int)v32 & 2) != 0;\n    switch ((unsigned int)v30)\n    {\n    case 0:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 0;\n        v8 = 0;\n        v13 = 0;\n    case 1:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 0;\n        v8 = 1;\n        v13 = \"'\";\n    case 2:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 0;\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v76 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 0;\n            v8 = 1;\n            v13 = \"'\";\n        }\n    case 3:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"'\";\n    case 4:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 1;\n            if (v77 == 0)\n            {\n                v6 = 1;\n                v33 = 0;\n                v76 = 1;\n                v78 = 2;\n                v14 = 0;\n                v18 = 0;\n                v17 = 0;\n                v8 = 1;\n                v13 = \"'\";\n            }\n            else\n            {\n                v84 = 0;\n                v6 = 1;\n                v14 = 0;\n            }\n        }\n    case 5:\n        if (((char)v32 & 2) == 0)\n        {\n            if (v77 != 0)\n            {\n                *((char *)v28) = 34;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n                v14 = 0;\n            }\n            else\n            {\n                v14 = 0;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n            }\n            v17 = 0;\n            v76 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v76 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n    case 6:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 5;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"\\\"\";\n    case 7:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 1;\n        v8 = 0;\n        v13 = 0;\n    case 8: case 9: case 10:\n        if (v30 != 10)\n        {\n            v4 = v4;\n            v26 = (unsigned int)sub_40dd00();\n            v27 = (unsigned long long)(unsigned int)sub_40dd00();\n        }\n        v76 = 0;\n        if (((char)v32 & 2) == 0)\n        {\n            v78 = (char)*((char *)v26);\n            if (*((char *)v26) != 0)\n            {\n                do\n                {\n                    if (v77 > v76)\n                    {\n                        *((unsigned long long *)(v28 + v76)) = v78;\n                    }\n                    v76 += 1;\n                    v78 = (char)*((char *)(v26 + v76));\n                }\n                while ((char)v78 != 0);\n            }\n        }\n        v5 = v82;\n        v6 = 1;\n        v8 = strlen(v27);\n        v18 = 0;\n        v13 = v27;\n        v14 = 0;\n        v4 = 1;\n    default:\n        abort(); /* do not return */\n    }\n    v82 = v4;\n    while (true)\n    {\n        v38 = v82;\n        v80 = 0;\n        v39 = v78;\n        while (true)\n        {\n            v78 = v38 != v80;\n            if (v38 == -1)\n            {\n                v78 = *((char *)(v7 + v80)) != 0;\n            }\n            if (v78 != 0)\n            {\n                v37 = v7 + v80;\n                v5 = (unsigned int)v39 != 2 & v4;\n                if (((unsigned int)v39 != 2 & v4) != 0)\n                {\n                    v78 = v8;\n                    if (v8 != 0)\n                    {\n                        v34 = v80 + v78;\n                        if (v38 == -1 && v78 > 1)\n                        {\n                            v11 = v39;\n                            v10 = v33;\n                            v9 = v37;\n                            v38 = strlen(v7);\n                        }\n                        if (v34 <= v38)\n                        {\n                            v12 = v39;\n                            v11 = v38;\n                            v10 = v33;\n                            v9 = v37;\n                            v78 = memcmp(v37, v13, v8);\n                            v37 = v9;\n                            v33 = (char)v10;\n                            v38 = v11;\n                            v39 = v12;\n                            if (v17 == 0 && v78 == 0)\n                            {\n                                v40 = (char)*((char *)v37);\n                                switch (*((char *)v37))\n                                {\n                                case 0:\n                                    v89 = (unsigned int)v39 == 2;\n                                    v78 = (unsigned int)(0 ^ 1);\n                                    v78 = (char)(0 ^ 1) & (unsigned int)v39 == 2;\n                                    if (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0)\n                                    {\n                                        if (v77 > v76)\n                                        {\n                                            *((char *)(v28 + v76)) = 39;\n                                        }\n                                        if (v77 > v76 + 1)\n                                        {\n                                            *((char *)(v28 + v76 + 1)) = 36;\n                                        }\n                                        if (v77 > v76 + 2)\n                                        {\n                                            *((char *)(v28 + v76 + 2)) = 39;\n                                        }\n                                        v47 = v76 + 3;\n                                        v76 += 4;\n                                        v33 = rax<8>;\n                                        v78 = 0;\n                                        v40 = 48;\n                                    }\n                                    else\n                                    {\n                                        v47 = v76;\n                                        v78 = 0;\n                                        v76 = v47 + 1;\n                                        v78 = v78;\n                                        v40 = 48;\n                                        v78 = 0;\n                                        v40 = 48;\n                                        if (1 < v38)\n                                        {\n                                            v9 = *((char *)(v7 + 0 + 1));\n                                            if (((unsigned int)(char)*((char *)(v7 + 0 + 1)) - 48 & 255) <= 9)\n                                            {\n                                                if (v77 > v76)\n                                                {\n                                                    *((char *)(v28 + v76)) = 48;\n                                                }\n                                                if (v77 > v47 + 2)\n                                                {\n                                                    *((char *)(v28 + v47 + 2)) = 48;\n                                                }\n                                                v76 = v47 + 3;\n                                                v40 = 48;\n                                            }\n                                        }\n                                        v78 = v78;\n                                        v78 = 0;\n                                    }\n                                    if ((((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) == 0 || v77 > v76 + 3) && (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0 || v77 > v76))\n                                    {\n                                        *((char *)(v28 + v47)) = 92;\n                                        v33 = v78;\n                                    }\n                                case 7:\n                                    v40 = 97;\n                                case 8:\n                                    v89 = 0;\n                                    v78 = 0;\n                                    v40 = 98;\n                                case 13:\n                                    v40 = 13;\n                                    v45 = 114;\n                                    v89 = (unsigned int)v39 == 2;\n                                case 32:\n                                    v41 = v5;\n                                case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                                    v89 = 0;\n                                case 35: case 126:\n                                    v42 = v5;\n                                case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                                    v41 = v5;\n                                case 92:\n                                    v44 = v4;\n                                    v40 = 92;\n                                    v45 = 92;\n                                    v89 = v4 & v17 & v8 != 0;\n                                    if ((v4 & v17 & v8 != 0) != 0)\n                                    {\n                                        v80 = 1;\n                                        v46 = 0;\n                                        v78 = 0;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (v8 == 0 || v78 != 0 || v34 > v38)\n                    {\n                        v40 = (char)*((char *)v37);\n                        switch (*((char *)v37))\n                        {\n                        case 0:\n                            if (v17 == 0)\n                            {\n                                v5 = 0;\n                            }\n                            else\n                            {\n                                v4 = (unsigned int)v39 == 2;\n                            }\n                        case 7:\n                            v40 = 97;\n                            break;\n                        case 8:\n                            v40 = 98;\n                        case 9:\n                            v40 = 116;\n                        case 10:\n                            v40 = 110;\n                            v89 = 0;\n                            v78 = 0;\n                        case 11:\n                            v40 = 118;\n                            break;\n                        case 12:\n                            v40 = 102;\n                            break;\n                            if (v17 == 0)\n                            {\n                                v78 = 0;\n                            }\n                            else\n                            {\n                                v87 = 0;\n                            }\n                        case 13:\n                            v5 = 0;\n                        case 32:\n                            v41 = 0;\n                            v40 = 32;\n                            v50 = v5;\n                            v5 = v41;\n                            v78 = 0;\n                        case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                            v5 = 0;\n                        case 35: case 126:\n                            v42 = 0;\n                            v48 = v5;\n                            v89 = 0;\n                            v5 = v42;\n                            v78 = ((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1;\n                            v78 = (char)(((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1) | v17;\n                            if (v17 != 0 || (char)(((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1) != 0)\n                            {\n                                v78 = 0;\n                                v72 = (unsigned int)((unsigned long long)v25[v40 % 32] >> ((char)v40 & 31)) & 1;\n                                v89 = (unsigned int)v39 == 2;\n                            }\n                            if ((char)(((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1) == 0)\n                            {\n                                v89 = (unsigned int)v39 == 2;\n                                v80 += 1;\n                                v46 = (v78 ^ 1) & (unsigned int)v33;\n                                if (v46 != 0)\n                                {\n                                    if (v79 > v76)\n                                    {\n                                        *((char *)(v29 + v76)) = 39;\n                                    }\n                                    if (v79 > v76 + 1)\n                                    {\n                                        *((char *)(v29 + v76 + 1)) = 39;\n                                    }\n                                    v76 += 2;\n                                    v33 = 0;\n                                }\n                                v73 = (unsigned int)v33 ^ 1;\n                                v74 = (char)((unsigned int)v33 ^ 1) & v89;\n                                if (((char)((unsigned int)v33 ^ 1) & v89) != 0)\n                                {\n                                    if (v79 > v76)\n                                    {\n                                        *((char *)(v29 + v76)) = 39;\n                                    }\n                                    if (v76 + 1 < v79)\n                                    {\n                                        *((char *)(v29 + v76 + 1)) = 36;\n                                    }\n                                    v75 = v76 + 2;\n                                    if (v76 + 2 < v79)\n                                    {\n                                        *((char *)(v29 + v76 + 2)) = 39;\n                                    }\n                                    v76 += 3;\n                                    v33 = rax<8>;\n                                }\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 92;\n                                }\n                                v76 += 1;\n                                v80 += 1;\n                            }\n                        case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                            v41 = 0;\n                        case 39:\n                            v5 = 0;\n                        case 63:\n                            v5 = 0;\n                        case 92:\n                            v5 = 0;\n                        case 123: case 125:\n                            v5 = 0;\n                        default:\n                            v5 = 0;\n                        }\n                    }\n                }\n                else\n                {\n                    v40 = (char)*((char *)v37);\n                    switch (*((char *)v37))\n                    {\n                    case 0:\n                        if (v4 == 0)\n                        {\n                            v5 = 0;\n                            v89 = (unsigned int)v39 == 2;\n                            v36 = 0;\n                            v40 = 0;\n                            break;\n                            v80 += 1;\n                        }\n                    case 7:\n                        v40 = 7;\n                        v45 = 97;\n                        v89 = (unsigned int)v39 == 2;\n                    case 8:\n                        v40 = 8;\n                        v45 = 98;\n                        v89 = (unsigned int)v39 == 2;\n                    case 9:\n                        v40 = 9;\n                        v45 = 116;\n                    case 10:\n                        v40 = 10;\n                        v45 = 110;\n                        v89 = (unsigned int)v39 == 2;\n                        v5 = v17 & (unsigned int)v39 == 2;\n                    case 11:\n                        v40 = 11;\n                        v45 = 118;\n                        v89 = (unsigned int)v39 == 2;\n                        if (v4 == 0)\n                        {\n                            v55 = 0;\n                            break;\n                        }\n                        else\n                        {\n                            v40 = v45;\n                            v78 = 0;\n                        }\n                    case 12:\n                        v40 = 12;\n                        v45 = 102;\n                        v89 = (unsigned int)v39 == 2;\n                    case 13:\n                        v40 = 13;\n                        v45 = 114;\n                    case 32:\n                        v40 = 32;\n                        v89 = (unsigned int)v39 == 2;\n                        if (v17 != 0)\n                        {\n                            break;\n                        }\n                    case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                        v89 = (unsigned int)v39 == 2;\n                        v35 = 0;\n                    case 35: case 126:\n                        v89 = (unsigned int)v39 == 2;\n                    case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                        v89 = (unsigned int)v39 == 2;\n                        break;\n                    case 39:\n                        if ((unsigned int)v39 == 2)\n                        {\n                            if (v77 != 0)\n                            {\n                                v53 = 0;\n                            }\n                            if (v77 == 0 || v14 != 0)\n                            {\n                                if (v77 > v76)\n                                {\n                                    *((char *)(v28 + v76)) = 39;\n                                }\n                                if (v77 > v76 + 1)\n                                {\n                                    *((char *)(v28 + v76 + 1)) = 92;\n                                }\n                                if (v77 > v76 + 2)\n                                {\n                                    v53 = v77;\n                                    *((char *)(v28 + v76 + 2)) = 39;\n                                    v79 = v14;\n                                }\n                                else\n                                {\n                                    v53 = v77;\n                                    v79 = v14;\n                                }\n                            }\n                            v18 = v78;\n                            v76 += 3;\n                            v78 = 0;\n                            v33 = 0;\n                            v14 = v79;\n                            v40 = 39;\n                            v79 = v53;\n                        }\n                        else\n                        {\n                            v18 = v78;\n                            v89 = 0;\n                            v40 = 39;\n                            break;\n                        }\n                    case 63:\n                        if ((unsigned int)v39 != 2)\n                        {\n                            v40 = 63;\n                            v89 = (unsigned int)v39 == 2;\n                            v52 = 0;\n                            break;\n                            v77 = v7;\n                            v40 = (char)*((char *)(v77 + 2));\n                            v77 = 0x7000a38200000000;\n                            v0 = 0x7000a38200000000;\n                            v89 = 0;\n                            v62 = 0;\n                            v40 = 63;\n                            break;\n                            if (v79 > v76)\n                            {\n                                *((char *)(v28 + v76)) = 63;\n                            }\n                            if (v79 > v76 + 1)\n                            {\n                                *((char *)(v28 + v76 + 1)) = 34;\n                            }\n                            if (v79 > v76 + 2)\n                            {\n                                *((char *)(v28 + v76 + 2)) = 34;\n                            }\n                            if (v79 > v76 + 3)\n                            {\n                                *((char *)(v28 + v76 + 3)) = 63;\n                            }\n                            v76 += 4;\n                            v89 = 0;\n                            v78 = 0;\n                            v80 = 2;\n                        }\n                        else\n                        {\n                            v78 = 0;\n                            v78 = 0;\n                            v40 = 63;\n                        }\n                    case 92:\n                        if ((unsigned int)v39 == 2)\n                        {\n                            v80 += 1;\n                            v46 = v33;\n                            v78 = 0;\n                            v40 = 92;\n                        }\n                    case 123: case 125:\n                        v43 = v38 != 1;\n                        if (v38 == -1)\n                        {\n                            v43 = *((char *)(v7 + 1)) != 0;\n                        }\n                        v89 = (unsigned int)v39 == 2;\n                    }\n                }\n            }\n            else\n            {\n                v81 = v39;\n                v82 = v38;\n                v83 = v81 == 2;\n                if (v76 == 0 && (v81 == 2 & v17) != 0)\n                {\n                    v3 = v27;\n                    v2 = v26;\n                    v1 = 0;\n                    v76 = (unsigned int)sub_40de00();\n                }\n                if ((v81 == 2 & v17) == 0 || v76 != 0)\n                {\n                    v84 = (unsigned int)v17 ^ 1;\n                    v85 = v83 & (char)((unsigned int)v17 ^ 1);\n                    v86 = v83 & (char)((unsigned int)v17 ^ 1);\n                    if ((char)v85 == 0)\n                    {\n                        v86 = v84;\n                    }\n                    else if (v18 != 0)\n                    {\n                        if (v6 == 0)\n                        {\n                            v84 = v79 == 0 & v14 != 0;\n                            if ((v79 == 0 & v14 != 0) == 0)\n                            {\n                                v86 = v18;\n                            }\n                        }\n                        else\n                        {\n                            v3 = v27;\n                            v2 = v26;\n                            v1 = v25;\n                            v76 = (unsigned int)sub_40de00();\n                        }\n                    }\n                }\n            }\n            if (v6 == 0 && v78 == 0 && (char)v85 != 0 && v18 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && (v79 == 0 & v14 != 0) == 0 || (char)v85 == 0 && v78 == 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || v78 == 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && v18 == 0)\n            {\n                v88 = v13;\n                if (v13 != 0 && v86 != 0)\n                {\n                    v90 = (char)*((char *)v88);\n                    if (*((char *)v88) != 0)\n                    {\n                        v91 = v88 - v76;\n                        do\n                        {\n                            if (v79 > v76)\n                            {\n                                *((unsigned long long *)(v29 + v76)) = v90;\n                            }\n                            v76 += 1;\n                            v90 = (char)*((char *)(v91 + v76));\n                        }\n                        while ((char)v90 != 0);\n                    }\n                }\n                if (v79 > v76)\n                {\n                    *((char *)(v29 + v76)) = 0;\n                }\n            }\n            if (v15 == 1)\n            {\n                v11 = v39;\n                v10 = v38;\n                v9 = v33;\n                v46 = (unsigned short)*((short *)(*((long long *)(unsigned long long)__ctype_b_loc()) + v40 * 2));\n                tmp_38 = v46 & 0x4000;\n                v46 &= 0x4000;\n                v51 = (tmp_38 & 65535) != 0;\n                v89 = (tmp_38 & 65535) == 0 & v4;\n                if (v89 != 0)\n                {\n                    v89 = v4;\n                    v78 = 0;\n                }\n            }\n            else\n            {\n                v24 = 0;\n                if (v38 == -1)\n                {\n                    v11 = v39;\n                    v10 = v33;\n                    v9 = v37;\n                    v38 = strlen(v7);\n                }\n                v21 = v76;\n                v22 = v37;\n                v54 = 0;\n                v19 = v33;\n                *((unsigned long long *)&v20) = v40;\n                v11 = v29;\n                v12 = v79;\n                v9 = v38;\n                *((unsigned long *)&v10) = v39;\n                do\n                {\n                    v56 = v80 + v54;\n                    v57 = v7 + v80 + v54;\n                    v46 = sub_412fb0();\n                    v58 = v46;\n                    if (v46 != 0 && v46 != -2 && v46 != -1)\n                    {\n                        if (v10 == 2 && v46 != 1 && v17 != 0)\n                        {\n                            v59 = v7 + v77 + 1;\n                            v77 = v7 + v58 + v77;\n                            while (true)\n                            {\n                                v60 = (unsigned int)*(v59) - 91;\n                                if ((8589934635 & 1 << (v60 & 63)) == 0 || ((unsigned int)*(v59) - 91 & 255) > 33)\n                                {\n                                    v59 = &v59[1];\n                                    if (v77 == v59)\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                            if ((8589934635 & 1 << (v60 & 63)) == 0 || ((unsigned int)*(v59) - 91 & 255) > 33)\n                            {\n                                v78 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                                v54 += v58;\n                                v46 = mbsinit((unsigned int)&v24);\n                            }\n                        }\n                        v78 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                        v54 += v58;\n                        v46 = mbsinit((unsigned int)&v24);\n                    }\n                    if (v46 == -1)\n                    {\n                        v28 = v54;\n                        v40 = v20;\n                        v76 = v21;\n                        v78 = 0;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v79 = v12;\n                        v38 = v9;\n                        v39 = v10;\n                        v89 = v4;\n                    }\n                    if (v46 == -2)\n                    {\n                        v38 = v9;\n                        v77 = v56;\n                        v46 = v54;\n                        v28 = v54;\n                        v33 = (char)v19;\n                        v40 = v20;\n                        v76 = v21;\n                        v29 = v11;\n                        v79 = v12;\n                        v39 = v10;\n                        if (v77 < v9 && *((char *)v57) != 0)\n                        {\n                            do\n                            {\n                                v46 += 1;\n                            }\n                            while (v46 < v9 && *((char *)(v22 + v46)) != 0);\n                            v28 = v46;\n                        }\n                        v89 = v4;\n                        v78 = 0;\n                    }\n                    if (v46 == 0 || v46 != -2 && (unsigned int)v46 != 0 && v46 != -1)\n                    {\n                        v28 = v54;\n                        v40 = v20;\n                        v76 = v21;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v89 = (unsigned int)v78 ^ 1;\n                        v79 = v12;\n                        v38 = v9;\n                        v39 = v10;\n                        v89 = (char)((unsigned int)v78 ^ 1) & v4;\n                    }\n                }\n                while (v28 <= 1);\n                if (v46 == 0 || v46 == -2 || v46 == -1 || (unsigned int)v46 != 0)\n                {\n                    v9 = v78;\n                    v77 = 0;\n                    v63 = v17;\n                    v64 = v28 + v80;\n                    v28 = v5;\n                }\n            }\n            if (false)\n            {\n                v5 = v42;\n                v49 = 0;\n                v87 = v89;\n                *((unsigned long long *)&v4) = v4 & v87;\n            }\n            if (v15 != 1 || v89 != 0)\n            {\n                v9 = v78;\n                v77 = 0;\n                v63 = v17;\n                v64 = v28 + v80;\n                v28 = v5;\n                while (true)\n                {\n                    if (v89 != 0)\n                    {\n                        v65 = (unsigned int)v39 == 2;\n                        if (v63 == 0)\n                        {\n                            v77 = (unsigned int)v33 ^ 1;\n                            v66 = v4 & (char)((unsigned int)v33 ^ 1);\n                            if ((v4 & (char)((unsigned int)v33 ^ 1)) != 0)\n                            {\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 39;\n                                }\n                                if (v79 > v76 + 1)\n                                {\n                                    *((char *)(v29 + v76 + 1)) = 36;\n                                }\n                                v77 = v76 + 2;\n                                if (v79 > v76 + 2)\n                                {\n                                    *((char *)(v29 + v76 + 2)) = 39;\n                                }\n                                v76 += 3;\n                                v33 = v46;\n                            }\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            if (v79 > v76 + 1)\n                            {\n                                v67 = v40;\n                                v68 = (char)v40 % 64;\n                                *((unsigned long long *)(v29 + v76 + 1)) = (unsigned long long)(unsigned int)rax<4> + 48;\n                            }\n                            v46 = v76 + 2;\n                            if (v79 > v76 + 2)\n                            {\n                                v70 = v40;\n                                v71 = (char)v40 % 8;\n                                v46 = (unsigned int)((rax<4> & 7) + 48);\n                                *((unsigned long long *)(v29 + v76 + 2)) = v46;\n                            }\n                            v80 += 1;\n                            v76 += 3;\n                            v40 = ((unsigned int)v40 & 7) + 48;\n                            if (v80 < v64)\n                            {\n                                v77 = v89;\n                            }\n                            else\n                            {\n                                v78 = (char)v9;\n                            }\n                        }\n                        else\n                        {\n                            v4 = v65;\n                        }\n                    }\n                    else\n                    {\n                        v46 = (v77 ^ 1) & (unsigned int)v33;\n                        if (v28 != 0)\n                        {\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            v76 += 1;\n                        }\n                        v80 += 1;\n                        if (v80 >= v64)\n                        {\n                            v78 = (char)v9;\n                        }\n                        else if (v46 != 0)\n                        {\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 39;\n                            }\n                            v46 = v76 + 1;\n                            if (v79 > v76 + 1)\n                            {\n                                *((char *)(v29 + v76 + 1)) = 39;\n                            }\n                            v76 += 2;\n                            v28 = 0;\n                            v33 = 0;\n                        }\n                        else\n                        {\n                            v28 = 0;\n                        }\n                    }\n                    if ((v80 < v64 || v89 == 0) && (v63 == 0 || v89 == 0) && (v80 < v64 || v89 != 0))\n                    {\n                        if (v79 > v76)\n                        {\n                            *((unsigned long long *)(v29 + v76)) = v40;\n                        }\n                        v40 = (char)*((char *)(v7 + v80));\n                        v76 += 1;\n                    }\n                }\n            }\n            if (v17 == 0 && (char)(((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1) == 0 && v5 != 0 || v17 == 0 && (char)(((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1) == 0 && v5 == 0 || (v15 != 1 || v89 != 0) && v76 >= v79)\n            {\n                if (v76 < v79)\n                {\n                    *((unsigned long long *)(v29 + v76)) = v40;\n                }\n                v76 += 1;\n                v6 = (v78 == 0? 0 : (unsigned int)(char)(char)(stack_base)[-169]);\n            }\n            if (v6 == 0 && v78 == 0 && (char)v85 != 0 && v18 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && (v79 == 0 & v14 != 0) == 0 || (char)v85 == 0 && v78 == 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || v78 == 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && v18 == 0 || v78 == 0 && v76 == 0 && (v81 == 2 & v17) != 0 || v78 == 0 && (char)v85 != 0 && v6 != 0 && v18 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0))\n            {\n                v92 = v76;\n                return v92;\n            }\n        }\n        *((char *)v29) = 39;\n        v78 = 2;\n        v13 = \"'\";\n        v8 = 1;\n        v17 = 0;\n        *((unsigned long *)&v18) = v84;\n    }\n}\n"
        },
        {
            "funcName": "sub_4136b0",
            "funcStartAddr": "0x4136b0",
            "funcEndAddr": "0x413739",
            "decompiledFuncCode": "int sub_4136b0()\n{\n    unsigned int v1;  // [bp+0x100008]\n    char *v2;  // rdi\n    char *v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned int v5;  // r12d\n    unsigned long long v6;  // rax\n    unsigned int v8;  // ebp\n    unsigned long long v10;  // rbx\n    unsigned long long v11;  // rax\n\n    v10 = fopen(v2, v3);\n    if (v10 != 0)\n    {\n        v4 = fileno(v10);\n        if (v4 <= 2)\n        {\n            v5 = sub_413ea0();\n            if (v5 >= 0)\n            {\n                v6 = sub_411f80();\n                if (v6 == 0)\n                {\n                    v10 = fdopen(v5, v3);\n                }\n                if (v10 == 0 || v6 != 0)\n                {\n                    v8 = *((int *)v10);\n                    close(v5);\n                    *(__errno_location()) = v8;\n                    v10 = 0;\n                }\n            }\n            else\n            {\n                v10 = 0;\n                sub_411f80();\n                *(__errno_location()) = v1;\n            }\n        }\n    }\n    v11 = v10;\n    return v11;\n}\n"
        },
        {
            "funcName": "sub_412140",
            "funcStartAddr": "0x412140",
            "funcEndAddr": "0x41217b",
            "decompiledFuncCode": "int sub_412140()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned int *v3;  // rdi\n\n    v0 = v2;\n    if (v3 != 0 && __freading() != 0 && ((unsigned short)*(v3) & 0x100) != 0)\n    {\n        sub_412180();\n    }\n}\n"
        },
        {
            "funcName": "sub_407920",
            "funcStartAddr": "0x407920",
            "funcEndAddr": "0x407a2d",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    char padding_8[4];\n    char field_c;\n} struct_0;\n\nextern unsigned int g_4164d6;\nextern struct_0 *g_61c418;\nextern struct_0 g_61c6a8;\nextern unsigned int g_61c6c0;\n\nint sub_407920()\n{\n    char v0;  // [bp-0xc8]\n    char v1;  // [bp-0xc0]\n    char v2;  // [bp-0x30]\n    struct_0 *v4;  // r13\n    struct_0 *v5;  // rbx\n    char *v6;  // rdi\n    struct_0 *v7;  // rax\n    struct_0 *v9;  // r12\n    unsigned int v11;  // r15d\n    unsigned long long v13;  // rbp\n\n    v4 = &g_61c6a8.field_0;\n    v5 = g_61c6a8.field_0;\n    if (v6 != g_61c6a8.field_0 + 13)\n    {\n        v7 = v5->field_0;\n        if (v5->field_0 + 13 != v6)\n        {\n            do\n            {\n                v5 = v7;\n                v7 = v7->field_0;\n            }\n            while (&v7[1] != v6);\n        }\n        v4 = v5;\n        v5 = v7;\n    }\n    if (v5->field_c == 1)\n    {\n        sub_4060a0();\n    }\n    v9 = v5->field_0;\n    v0 = pthread_sigmask(0x0, 0x61c6c0, (unsigned int)&v1) == 0;\n    v11 = *(__errno_location());\n    v4->field_0 = v9;\n    if (v0 == 0)\n    {\n    }\n    else\n    {\n        sub_407880();\n    }\n    if (unlink(v6) == 0)\n    {\n    }\n    else\n    {\n        v13 = (unsigned int)sub_40f700();\n        error(0x0, v11, (unsigned long long)dcgettext(0x0, 0x4164d6, 0x5));\n    }\n    if (v9 == 0)\n    {\n        g_61c418 = v4;\n    }\n    return (unsigned long long)free(*((long long *)&v2));\n}\n"
        },
        {
            "funcName": "sub_40dbe0",
            "funcStartAddr": "0x40dbe0",
            "funcEndAddr": "0x40dc48",
            "decompiledFuncCode": "int sub_40dbe0()\n{\n    char v0;  // [bp-0x10]\n    unsigned long long v2;  // rbx\n    char *v3;  // rax\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rax\n\n    v2 = 200809;\n    v3 = getenv(\"_POSIX2_VERSION\");\n    if (v3 != 0 && *(v3) != 0)\n    {\n        v4 = strtol(v3, &v0, 0xa);\n        if (*((char *)*((long long *)&v0)) == 0)\n        {\n            if (v4 >= -0x80000000)\n            {\n                return (v4 <= 2147483647? v4 : 2147483647);\n            }\n            v2 = 0x80000000;\n        }\n    }\n    if (v4 < -0x80000000 || *(v3) == 0 || v3 == 0 || *((char *)*((long long *)&v0)) != 0)\n    {\n        v5 = v2;\n        return v5;\n    }\n}\n"
        },
        {
            "funcName": "sub_405dd0",
            "funcStartAddr": "0x405dd0",
            "funcEndAddr": "0x405e24",
            "decompiledFuncCode": "extern unsigned int g_41645b;\n\nint sub_405dd0()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rdx\n    unsigned long long v5;  // rbp\n\n    v0 = v2;\n    if (v3 == 0)\n    {\n        v4 = dcgettext(0x0, 0x41645b, 0x5);\n    }\n    v5 = (unsigned int)sub_40f700();\n    error(0x2, *(__errno_location()), \"%s: %s\");\n}\n"
        },
        {
            "funcName": "sub_407890",
            "funcStartAddr": "0x407890",
            "funcEndAddr": "0x407918",
            "decompiledFuncCode": "extern unsigned long long g_61c6a8;\nextern unsigned int g_61c6c0;\n\nint sub_407890()\n{\n    char v0;  // [bp-0x98]\n    char v1;  // [bp-0x90]\n    unsigned long long v3;  // rax\n    unsigned long long *v4;  // rbx\n\n    if (g_61c6a8 != 0)\n    {\n        v3 = pthread_sigmask(0x0, 0x61c6c0, (unsigned int)&v1);\n        v4 = g_61c6a8;\n        v3 = (char)(v3 == 0);\n        v0 = v3 == 0;\n        if (g_61c6a8 != 0)\n        {\n            while (true)\n            {\n                unlink((char *)&v4[1] + 5);\n                v4 = *(v4);\n                if (v4 == 0)\n                {\n                    break;\n                }\n            }\n            v3 = v0;\n        }\n        g_61c6a8 = 0;\n        if (v3 != 0)\n        {\n            sub_407880();\n            return sub_40a9f0();\n        }\n    }\n    if (g_61c6a8 == 0 || v3 == 0)\n    {\n        return sub_40a9f0();\n    }\n}\n"
        },
        {
            "funcName": "sub_40c5e0",
            "funcStartAddr": "0x40c5e0",
            "funcEndAddr": "0x40c600",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    char field_10;\n} struct_0;\n\nint sub_40c5e0()\n{\n    struct_0 *v1;  // rdi\n\n    v1->field_10 = 0;\n    v1->field_0 = 0x3f80000000000000;\n    v1->field_8 = 4590573145673223373;\n    return 4590573145673223373;\n}\n"
        },
        {
            "funcName": "sub_40f210",
            "funcStartAddr": "0x40f210",
            "funcEndAddr": "0x40f21f",
            "decompiledFuncCode": "extern int512_t g_61cce0;\n\nint sub_40f210()\n{\n    unsigned long v1;  // rdi\n\n    return *((int *)(v1 == 0? &g_61cce0 : v1));\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Angr",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_sort.elf"
}