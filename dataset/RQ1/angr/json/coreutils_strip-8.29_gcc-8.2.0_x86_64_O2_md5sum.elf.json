{
    "funcInfo": [
        {
            "funcName": "sub_407390",
            "funcStartAddr": "0x407390",
            "funcEndAddr": "0x4073a3",
            "decompiledFuncCode": "int sub_407390()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_407310();\n}\n"
        },
        {
            "funcName": "sub_406150",
            "funcStartAddr": "0x406150",
            "funcEndAddr": "0x40616a",
            "decompiledFuncCode": "int sub_406150()\n{\n    unsigned int v1;  // rdi\n    unsigned long long v2;  // rax\n\n    v2 = malloc(v1);\n    if (v2 == 0 && v1 != 0)\n    {\n        sub_4063a0(); /* do not return */\n    }\n    if (v1 == 0 || v2 != 0)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_4057e0",
            "funcStartAddr": "0x4057e0",
            "funcEndAddr": "0x4057f1",
            "decompiledFuncCode": "int sub_4057e0()\n{\n}\n"
        },
        {
            "funcName": "sub_403cf0",
            "funcStartAddr": "0x403cf0",
            "funcEndAddr": "0x403d45",
            "decompiledFuncCode": "int sub_403cf0()\n{\n    unsigned long long v0;  // [bp-0xa8]\n    unsigned long long v1;  // [bp-0xa0]\n    unsigned long long v2;  // [bp-0x98]\n    unsigned int v3;  // [bp-0x90]\n\n    v0 = 17279655951921914625;\n    v1 = 1167088121787636990;\n    v2 = 0;\n    v3 = 0;\n    sub_4039f0();\n    return sub_4038e0();\n}\n"
        },
        {
            "funcName": "sub_405b30",
            "funcStartAddr": "0x405b30",
            "funcEndAddr": "0x405b3a",
            "decompiledFuncCode": "int sub_405b30()\n{\n}\n"
        },
        {
            "funcName": "sub_405a00",
            "funcStartAddr": "0x405a00",
            "funcEndAddr": "0x405a73",
            "decompiledFuncCode": "int sub_405a00()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v2 = 0x400000000000000;\n    v1 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_405330();\n}\n"
        },
        {
            "funcName": "sub_405ae0",
            "funcStartAddr": "0x405ae0",
            "funcEndAddr": "0x405ae9",
            "decompiledFuncCode": "int sub_405ae0()\n{\n}\n"
        },
        {
            "funcName": "sub_402c90",
            "funcStartAddr": "0x402c90",
            "funcEndAddr": "0x40305d",
            "decompiledFuncCode": "extern unsigned int g_407bfd;\nextern unsigned int g_407d20;\nextern unsigned int g_407d48;\nextern unsigned int g_407d90;\nextern unsigned int g_407dc8;\nextern unsigned int g_407df8;\nextern unsigned int g_407e40;\nextern unsigned int g_407e78;\nextern unsigned int g_407eb0;\nextern unsigned int g_408068;\nextern unsigned int g_408098;\nextern unsigned int g_4080d0;\nextern unsigned int g_408228;\nextern unsigned int g_408270;\nextern unsigned int g_408290;\nextern unsigned long long stdout;\n\nint sub_402c90()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long v10;  // [bp-0x38]\n    unsigned long v11;  // [bp-0x30]\n    unsigned long long v12;  // [bp-0x28]\n    unsigned long long v13;  // [bp-0x20]\n    unsigned long v14;  // [bp-0x18]\n    unsigned long v15;  // [bp-0x8]\n    unsigned long v17;  // r12\n    unsigned long v18;  // rbx\n    unsigned long v19;  // rdi\n    unsigned long long v31[2];  // rax\n    char *v32;  // rdi\n    char *v33;  // rsi\n    unsigned long long v34;  // rcx\n    unsigned long long v35;  // cc_dep1\n    unsigned long long v36;  // cc_dep2\n    unsigned long v37;  // d\n    char *v41;  // rax\n    char *v42;  // rax\n    unsigned long long v43;  // rax\n\n    v15 = v17;\n    v14 = v18;\n    if ((unsigned int)v19 != 0)\n    {\n        dcgettext(0x0, 0x407d20, 0x5);\n        __fprintf_chk();\n    }\n    else\n    {\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x407d48, 0x5));\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x407d90, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x407dc8, 0x5), stdout);\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x407df8, 0x5));\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x407e40, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x407e78, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x407eb0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x408068, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x408098, 0x5), stdout);\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x4080d0, 0x5));\n        v0 = \"[\";\n        v31 = &v0;\n        v1 = \"test invocation\";\n        v2 = \"coreutils\";\n        v3 = \"Multi-call\";\n        v4 = \"sha224sum\";\n        v5 = \"sha2 utilities\";\n        v6 = \"sha256sum\";\n        v7 = \"sha2 utilities\";\n        v8 = \"sha384sum\";\n        v9 = \"sha2 utilities\";\n        v10 = \"sha512sum\";\n        v11 = \"sha2 utilities\";\n        v12 = 0;\n        v13 = 0;\n        while (true)\n        {\n            v31 = &v2;\n            v32 = v2;\n            if (v2 == 0)\n            {\n                break;\n            }\n            v33 = \"md5sum\";\n            v34 = 7;\n            if ((v35 > v36) - 0 - (v35 < v36) == 0)\n            {\n                break;\n            }\n            while (v34 != 0)\n            {\n                v34 -= 1;\n                v35 = *(v33);\n                v36 = *(v32);\n                v32 = &v32[v37];\n                v33 = &v33[v37];\n                break;\n            }\n        }\n        if (v31[1] != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x407bfd, 0x5));\n            v42 = setlocale(0x5, 0x0);\n        }\n        else\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x407bfd, 0x5));\n            v41 = setlocale(0x5, 0x0);\n            if (v41 != 0)\n            {\n                v43 = strncmp(v41, \"en_\", 0x3);\n            }\n            if (v43 == 0 || v41 == 0)\n            {\n                __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x408270, 0x5));\n            }\n        }\n        if ((v31[1] == 0 || strncmp(v42, \"en_\", 0x3) != 0) && (v31[1] == 0 || v42 != 0) && (v31[1] != 0 || v43 != 0) && (v31[1] != 0 || v41 != 0))\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x408228, 0x5));\n        }\n        if (v31[1] != 0 || v43 != 0 && v41 != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x408270, 0x5));\n        }\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x408290, 0x5));\n    }\n    exit(v19); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_403080",
            "funcStartAddr": "0x403080",
            "funcEndAddr": "0x40311e",
            "decompiledFuncCode": "extern unsigned int g_408865;\nextern unsigned int g_60c220;\nextern char g_60c2f8;\nextern unsigned long long g_60c300;\n\nint sub_403080()\n{\n    unsigned long long v1;  // rax\n    unsigned int *v2;  // rbx\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rbp\n\n    v1 = sub_407490();\n    if (v1 != 0)\n    {\n        v2 = __errno_location();\n        if (g_60c2f8 == 0 || *(v2) != 32)\n        {\n            v4 = dcgettext(0x0, 0x408865, 0x5);\n            if (g_60c300 != 0)\n            {\n                sub_4059d0();\n                error(0x0, *(v2), \"%s: \");\n            }\n        }\n    }\n    if (v1 == 0 || *(v2) == 32 && g_60c2f8 != 0)\n    {\n        v3 = sub_407490();\n    }\n    if ((unsigned int)v3 == 0 && (v1 == 0 || *(v2) == 32) && (v1 == 0 || g_60c2f8 != 0))\n    {\n        return v3;\n    }\n    while (true)\n    {\n        _exit(g_60c220);\n        error(0x0, *(v2), \"%s\");\n    }\n}\n"
        },
        {
            "funcName": "sub_40594f",
            "funcStartAddr": "0x40594f",
            "funcEndAddr": "0x4059c0",
            "decompiledFuncCode": "extern uint128_t g_60c420;\nextern uint128_t g_60c430;\nextern uint128_t g_60c440;\nextern unsigned long long g_60c450;\n\nint sub_40594f()\n{\n    void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v5;  // rdx\n\n    v3 = g_60c450;\n    *((uint128_t *)&v0) = g_60c420;\n    *((uint128_t *)&v1) = g_60c430;\n    *((uint128_t *)&v2) = g_60c440;\n    *((unsigned int *)&((char *)stack_base)[4 * v5 % 32 + -64]) = (unsigned int)((unsigned long long)(!((unsigned int)((unsigned long long)(unsigned int)*((int *)&((char *)stack_base)[4 * v5 % 32 + -64]) >> ((char)((unsigned int)v5 & 31) & 31))) & 1) << ((char)((unsigned int)v5 & 31) & 31)) ^ *((int *)&((char *)stack_base)[4 * v5 % 32 + -64]);\n    return sub_405330();\n}\n"
        },
        {
            "funcName": "sub_405a70",
            "funcStartAddr": "0x405a70",
            "funcEndAddr": "0x405adc",
            "decompiledFuncCode": "extern uint128_t g_60c420;\nextern uint128_t g_60c430;\nextern uint128_t g_60c440;\nextern unsigned long long g_60c450;\n\nint sub_405a70()\n{\n    unsigned int|void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x20]\n    unsigned long v4;  // [bp-0x18]\n    unsigned long v6;  // rsi\n    unsigned long v7;  // rdx\n\n    *((uint128_t *)&v0) = g_60c420;\n    *((uint128_t *)&v1) = g_60c430;\n    *((uint128_t *)&v2) = g_60c440;\n    v4 = g_60c450;\n    v0 = 10;\n    if (v6 != 0 && v7 != 0)\n    {\n        v3 = v6;\n        v4 = v7;\n        return sub_405330();\n    }\n    if (v7 == 0 || v6 == 0)\n    {\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_405f90",
            "funcStartAddr": "0x405f90",
            "funcEndAddr": "0x405fb0",
            "decompiledFuncCode": "int sub_405f90()\n{\n    unsigned long long v1;  // r9\n    unsigned long long v2[2];  // r8\n\n    v1 = 0;\n    if (*(v2) != 0)\n    {\n        do\n        {\n            v1 += 1;\n        }\n        while (v2[v1] != 0);\n    }\n}\n"
        },
        {
            "funcName": "sub_405510",
            "funcStartAddr": "0x405510",
            "funcEndAddr": "0x40551f",
            "decompiledFuncCode": "extern int512_t g_60c420;\n\nint sub_405510()\n{\n    unsigned long v1;  // rdi\n\n    return *((int *)(v1 == 0? &g_60c420 : v1));\n}\n"
        },
        {
            "funcName": "sub_4060d0",
            "funcStartAddr": "0x4060d0",
            "funcEndAddr": "0x406144",
            "decompiledFuncCode": "extern unsigned int g_4096b2;\nextern unsigned int g_4096dd;\nextern unsigned int g_409910;\n\nint sub_4060d0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x4096b2, 0x5));\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x4096dd, 0x5));\n    dcgettext(0x0, 0x409910, 0x5);\n}\n"
        },
        {
            "funcName": "sub_405850",
            "funcStartAddr": "0x405850",
            "funcEndAddr": "0x4058bd",
            "decompiledFuncCode": "int sub_405850()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_405330();\n}\n"
        },
        {
            "funcName": "sub_403ec0",
            "funcStartAddr": "0x403ec0",
            "funcEndAddr": "0x403f49",
            "decompiledFuncCode": "int sub_403ec0()\n{\n    unsigned int v1;  // [bp+0x100008]\n    char *v2;  // rdi\n    char *v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rax\n    unsigned int v6;  // r12d\n    unsigned long long v7;  // rax\n    unsigned long long v9;  // rbx\n    unsigned int v10;  // ebp\n    unsigned long long v12;  // rax\n\n    v9 = fopen(v2, v3);\n    if (v9 != 0)\n    {\n        v4 = fileno(v9);\n        if (v4 <= 2)\n        {\n            v5 = sub_405ba0();\n            v6 = v5;\n            if ((unsigned int)v5 >= 0)\n            {\n                v7 = sub_4063e0();\n                if (v7 == 0)\n                {\n                    v9 = fdopen(v6, v3);\n                }\n                if (v9 == 0 || v7 != 0)\n                {\n                    v10 = *((int *)v9);\n                    close(v6);\n                    *(__errno_location()) = v10;\n                    v9 = 0;\n                }\n            }\n            else\n            {\n                v9 = 0;\n                sub_4063e0();\n                *(__errno_location()) = v1;\n            }\n        }\n    }\n    v12 = v9;\n    return v12;\n}\n"
        },
        {
            "funcName": "sub_405ba0",
            "funcStartAddr": "0x405ba0",
            "funcEndAddr": "0x405bae",
            "decompiledFuncCode": "int sub_405ba0()\n{\n}\n"
        },
        {
            "funcName": "sub_405530",
            "funcStartAddr": "0x405530",
            "funcEndAddr": "0x405563",
            "decompiledFuncCode": "extern int512_t g_60c420;\n\nint sub_405530()\n{\n    void tmp_2;  // tmp #2\n    void tmp_52;  // tmp #52\n    void tmp_123;  // tmp #123\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long long v3;  // rcx\n    unsigned long long v5;  // rsi\n    unsigned long v6;  // rdx\n\n    tmp_2 = v1;\n    tmp_52 = v1 == 0;\n    v3 = (unsigned int)v2 & 31;\n    v5 = (unsigned int)*((int *)((tmp_52? &g_60c420 : tmp_2) + v2 % 32 * 4 + 8));\n    tmp_123 = ((unsigned int)v6 ^ (unsigned int)(v5 >> (v3 & 31))) & 1;\n    *((unsigned int *)((v1 == 0? &g_60c420 : v1) + v2 % 32 * 4 + 8)) = (unsigned int)(tmp_123 << (v3 & 31)) ^ (unsigned int)v5;\n    return (unsigned int)(v5 >> (v3 & 31)) & 1;\n}\n"
        },
        {
            "funcName": "sub_407b30",
            "funcStartAddr": "0x407b30",
            "funcEndAddr": "0x407b48",
            "decompiledFuncCode": "extern int512_t g_60c208;\n\nint sub_407b30()\n{\n}\n"
        },
        {
            "funcName": "sub_405b60",
            "funcStartAddr": "0x405b60",
            "funcEndAddr": "0x405b71",
            "decompiledFuncCode": "int sub_405b60()\n{\n}\n"
        },
        {
            "funcName": "sub_405330",
            "funcStartAddr": "0x405330",
            "funcEndAddr": "0x4054d0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[4];\n    unsigned int field_4;\n    char padding_8[32];\n    unsigned long long field_28;\n    unsigned long long field_30;\n} struct_0;\n\nextern uint128_t *g_60c278;\nextern uint128_t g_60c280;\nextern unsigned int g_60c290;\nextern int512_t g_60c320;\n\nint sub_405330()\n{\n    unsigned long v0;  // [bp-0x78]\n    unsigned long v1;  // [bp-0x70]\n    unsigned long v2;  // [bp-0x68]\n    unsigned long v3;  // [bp-0x50]\n    unsigned long long|unsigned long v4;  // [bp-0x48]\n    unsigned int v5;  // [bp-0x40]\n    unsigned int v6;  // [bp-0x3c]\n    unsigned long long v8;  // rcx\n    struct_0 *v9;  // rbp\n    unsigned long v10;  // rsi\n    unsigned int *v11;  // r13\n    unsigned long v13;  // rdi\n    uint128_t *v15;  // rax\n    unsigned long long v16;  // rax\n    uint128_t *v17;  // rbx\n    unsigned long long v19[2];  // rbx\n    void *v20;  // r12\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rsi\n    unsigned long long v24;  // rax\n\n    v9 = v8;\n    v3 = v10;\n    v17 = g_60c278;\n    v11 = __errno_location();\n    v5 = *(v11);\n    if ((unsigned int)v13 < 0)\n    {\n        abort(); /* do not return */\n    }\n    if (g_60c290 <= (unsigned int)v13)\n    {\n        if ((unsigned int)v13 != 2147483647)\n        {\n            if (g_60c278 != 6341248)\n            {\n                v16 = sub_4061b0();\n                g_60c278 = v16;\n                v17 = v16;\n            }\n            else\n            {\n                v15 = sub_4061b0();\n                v17 = v15;\n                g_60c278 = v15;\n                *(v15) = g_60c280;\n            }\n            memset(&v17[(long long)(int)g_60c290], 0x0, (int)((unsigned int)v13 + 1 - g_60c290) * 16);\n            g_60c290 = (unsigned int)v13 + 1;\n        }\n        else\n        {\n            sub_4063a0(); /* do not return */\n        }\n    }\n    if ((unsigned int)v13 != 2147483647 || g_60c290 > (unsigned int)v13)\n    {\n        v19 = &v17[v13];\n        v20 = v19[1];\n        v6 = v9->field_4 | 1;\n        v2 = v9->field_30;\n        v1 = v9->field_28;\n        v0 = &v9->padding_8;\n        *((unsigned long long [2])&v4) = *(v19);\n        v21 = sub_404100();\n        if (v4 <= v21)\n        {\n            v22 = v21 + 1;\n            v19[0] = v21 + 1;\n            if (v20 != 6341408)\n            {\n                v4 = v22;\n                free(v20);\n                v22 = v4;\n            }\n            v4 = v22;\n            v19[1] = v20;\n            v20 = (unsigned long long)(unsigned int)sub_406150();\n            v2 = v9->field_30;\n            v1 = v9->field_28;\n            v0 = v8 + 8;\n            sub_404100();\n        }\n        *(v11) = v5;\n        v24 = v20;\n        return v24;\n    }\n}\n"
        },
        {
            "funcName": "sub_407490",
            "funcStartAddr": "0x407490",
            "funcEndAddr": "0x4074ec",
            "decompiledFuncCode": "int sub_407490()\n{\n    unsigned long long v1;  // r12\n    unsigned long long v2;  // rax\n    unsigned int *v3;  // rdi\n\n    v1 = __fpending();\n    v2 = sub_4063e0();\n    if (((char)*(v3) & 32) == 0)\n    {\n        if ((unsigned int)v2 != 0 && v1 == 0)\n        {\n            v2 = 0 - (unsigned int)(char)(*(__errno_location()) != 9);\n        }\n    }\n    else\n    {\n        if ((unsigned int)v2 == 0)\n        {\n            *(__errno_location()) = 0;\n            v2 = -18446744069414584321;\n        }\n    }\n    if ((unsigned int)v2 != 0 && (((char)*(v3) & 32) != 0 || v1 != 0))\n    {\n        v2 = -18446744069414584321;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_405590",
            "funcStartAddr": "0x405590",
            "funcEndAddr": "0x4055bb",
            "decompiledFuncCode": "extern char g_60c420;\n\nint sub_405590()\n{\n    void tmp_2;  // tmp #2\n    void tmp_11;  // tmp #11\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long long v3[7];  // rdi\n    unsigned long v4;  // rsi\n    unsigned long v5;  // rdx\n\n    tmp_2 = v2;\n    tmp_11 = v2 == 0;\n    v3 = (v2 == 0? &g_60c420 : v2);\n    *((int *)(tmp_11? &g_60c420 : tmp_2)) = 10;\n    if (v4 != 0 && v5 != 0)\n    {\n        v3[5] = v4;\n        v3[6] = v5;\n        return &g_60c420;\n    }\n    if (v4 == 0 || v5 == 0)\n    {\n        v0 = &g_60c420;\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_4065a0",
            "funcStartAddr": "0x4065a0",
            "funcEndAddr": "0x4065db",
            "decompiledFuncCode": "int sub_4065a0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned int *v3;  // rdi\n\n    v0 = v2;\n    if (v3 != 0 && __freading() != 0 && ((unsigned short)*(v3) & 0x100) != 0)\n    {\n        sub_4065e0();\n    }\n}\n"
        },
        {
            "funcName": "sub_403120",
            "funcStartAddr": "0x403120",
            "funcEndAddr": "0x40314b",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned int field_18;\n} struct_0;\n\nint sub_403120()\n{\n    struct_0 *v1;  // rdi\n\n    v1->field_10 = 0;\n    v1->field_0 = 17279655951921914625;\n    v1->field_8 = 1167088121787636990;\n    v1->field_18 = 0;\n    return 1167088121787636990;\n}\n"
        },
        {
            "funcName": "sub_4054d0",
            "funcStartAddr": "0x4054d0",
            "funcEndAddr": "0x405504",
            "decompiledFuncCode": "int sub_4054d0()\n{\n    unsigned int v1;  // [bp+0x100008]\n\n    *(__errno_location()) = v1;\n    return sub_406350();\n}\n"
        },
        {
            "funcName": "sub_4074f0",
            "funcStartAddr": "0x4074f0",
            "funcEndAddr": "0x407546",
            "decompiledFuncCode": "int sub_4074f0()\n{\n    unsigned int v1;  // edi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // cc_dep1\n    unsigned long long v5;  // cc_dep2\n    unsigned long v6;  // d\n    char *v7;  // rdi\n    char *v8;  // rsi\n    unsigned long long v9;  // rcx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // cc_dep1\n    char *v12;  // rdi\n    unsigned long long v13;  // rcx\n    char v14;  // cc_dep1\n    char v15;  // cc_dep2\n\n    v10 = 1;\n    if (v3 != 0)\n    {\n        v9 = 2;\n        v7 = \"C\";\n        v3 = setlocale(v1, 0x0);\n        while (v9 != 0)\n        {\n            v9 -= 1;\n            v4 = *(v8);\n            v5 = *(v7);\n            v7 = &v7[v6];\n            v8 = &v8[v6];\n            break;\n        }\n        v10 = 0;\n        v11 = (v4 > v5) - 0 - (v4 < v5);\n        if ((char)v11 != 0)\n        {\n            v12 = \"POSIX\";\n            v13 = 6;\n            while (v13 != 0)\n            {\n                v13 -= 1;\n                v14 = *(v8);\n                v15 = *(v12);\n                v12 = &v12[v6];\n                v8 = &v8[v6];\n                break;\n            }\n            return 0;\n        }\n    }\n    if (v3 == 0 || (char)v11 == 0)\n    {\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_402950",
            "funcStartAddr": "0x402950",
            "funcEndAddr": "0x4029a0",
            "decompiledFuncCode": "extern unsigned long long g_60c2e0;\n\nint sub_402950()\n{\n    unsigned long long v1;  // rdi\n    char *v2;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rdx\n\n    v2 = v1;\n    if (g_60c2e0 != 0)\n    {\n        v4 = 0;\n        while (true)\n        {\n            if ((*((char *)(*((long long *)(unsigned long long)__ctype_b_loc()) + ((unsigned long long)*(v2) << 1) + 1)) & 16) != 0)\n            {\n                v5 = v4 + 1;\n                v2 = &v2[1];\n                v4 += 1;\n                if (v5 >= g_60c2e0)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                return 0;\n            }\n        }\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_4063cc",
            "funcStartAddr": "0x4063cc",
            "funcEndAddr": "0x4063d1",
            "decompiledFuncCode": "int sub_4063cc()\n{\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_403060",
            "funcStartAddr": "0x403060",
            "funcEndAddr": "0x403068",
            "decompiledFuncCode": "extern unsigned long long g_60c300;\n\nint sub_403060()\n{\n    unsigned long long v1;  // rdi\n    unsigned long v2;  // rax\n\n    g_60c300 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_407410",
            "funcStartAddr": "0x407410",
            "funcEndAddr": "0x40747f",
            "decompiledFuncCode": "extern unsigned long long g_409b27;\n\nint sub_407410()\n{\n    char v0;  // [bp-0x1c]\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rbx\n    unsigned long v4;  // rdx\n    unsigned long long|char * v5;  // rbp\n    unsigned long long v6;  // rdi\n    unsigned int *v7;  // r12\n    unsigned long long v9;  // rax\n\n    if (v2 != 0)\n    {\n        v3 = -2;\n        if (v4 != 0)\n        {\n            v7 = v6;\n            v5 = v2;\n        }\n    }\n    else\n    {\n        v5 = &g_409b27;\n    }\n    if (v2 == 0 || v6 == 0 && v4 != 0)\n    {\n        v7 = &v0;\n    }\n    if (v2 == 0 || v4 != 0)\n    {\n        v3 = mbrtowc((unsigned int)v7, (unsigned int)v5);\n        if (v3 > -3 && sub_4074f0() == 0)\n        {\n            v3 = 1;\n            *(v7) = *(v5);\n        }\n    }\n    v9 = v3;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_405730",
            "funcStartAddr": "0x405730",
            "funcEndAddr": "0x40573a",
            "decompiledFuncCode": "int sub_405730()\n{\n}\n"
        },
        {
            "funcName": "sub_4059c0",
            "funcStartAddr": "0x4059c0",
            "funcEndAddr": "0x4059cd",
            "decompiledFuncCode": "int sub_4059c0()\n{\n}\n"
        },
        {
            "funcName": "sub_4062b0",
            "funcStartAddr": "0x4062b0",
            "funcEndAddr": "0x4062fa",
            "decompiledFuncCode": "int sub_4062b0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_4055c0",
            "funcStartAddr": "0x4055c0",
            "funcEndAddr": "0x405632",
            "decompiledFuncCode": "extern int512_t g_60c420;\n\nint sub_4055c0()\n{\n    unsigned long v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned long v2;  // [bp-0x58]\n    unsigned long v3;  // [bp-0x40]\n    unsigned int v5;  // [bp+0x100008]\n    unsigned long v6;  // r8\n    unsigned long long v7[7];  // rbx\n    unsigned long v8;  // rcx\n\n    v7 = (v6 == 0? &g_60c420 : v6);\n    v3 = v8;\n    *((unsigned long long [7])&v2) = v7[6];\n    *((unsigned long long [7])&v1) = v7[5];\n    v0 = &v7[1];\n    *(__errno_location()) = v5;\n    return sub_404100();\n}\n"
        },
        {
            "funcName": "sub_405fb0",
            "funcStartAddr": "0x405fb0",
            "funcEndAddr": "0x406009",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n} struct_0;\n\nint sub_405fb0()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long long v2;  // r9\n    struct_0 *v3;  // r8\n    unsigned long long v4;  // rax\n    unsigned long long *v5;  // r10\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // r10\n    unsigned long long v8;  // rax\n\n    v2 = 0;\n    do\n    {\n        v4 = v3->field_0;\n        if (v3->field_0 <= 47)\n        {\n            v5 = v4 + v3->field_10;\n            v3->field_0 = (unsigned int)v4 + 8;\n            v6 = *(v5);\n            v0 = *(v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n        }\n        else\n        {\n            v7 = v3->field_8;\n            v3->field_8 = v3->field_8 + 8;\n            v8 = *(v7);\n            v0 = *(v7);\n            if (v8 == 0)\n            {\n                break;\n            }\n        }\n        v2 += 1;\n    }\n    while (v2 != 10);\n    return sub_405bb0();\n}\n"
        },
        {
            "funcName": "sub_406460",
            "funcStartAddr": "0x406460",
            "funcEndAddr": "0x40658c",
            "decompiledFuncCode": "extern unsigned int g_60c458;\n\nint sub_406460()\n{\n    unsigned int v0;  // [bp-0x60]\n    unsigned long v1;  // [bp-0x58]\n    unsigned long v2;  // [bp-0x50]\n    unsigned long v3;  // [bp-0x38]\n    unsigned long v4;  // [bp-0x30]\n    unsigned int v6;  // [bp+0x100008]\n    unsigned long v7;  // rdx\n    unsigned long v8;  // rcx\n    unsigned int v9;  // rsi\n    unsigned int v10;  // edi\n    unsigned int v11;  // edi\n    unsigned int *v12;  // rax\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rax\n    unsigned long long v15;  // rbx\n    unsigned long long v17;  // rax\n\n    v3 = v7;\n    v1 = stack_base + 8;\n    v4 = v8;\n    v0 = 16;\n    v2 = stack_base + -72;\n    if (v9 == 1030)\n    {\n        v0 = 24;\n        if (g_60c458 >= 0)\n        {\n            v15 = (unsigned int)fcntl(v11, v9);\n            if ((unsigned int)v15 < 0)\n            {\n                v12 = __errno_location();\n                if (*(v12) == 22)\n                {\n                    v15 = (unsigned int)sub_406460();\n                    if ((unsigned int)v15 >= 0)\n                    {\n                        g_60c458 = -1;\n                    }\n                }\n            }\n            if (*(v12) != 22 || (unsigned int)v15 >= 0)\n            {\n                g_60c458 = 1;\n            }\n        }\n        else\n        {\n            v15 = (unsigned int)sub_406460();\n        }\n        if ((*(v12) == 22 || g_60c458 < 0) && (g_60c458 < 0 || (unsigned int)v15 < 0) && (g_60c458 < 0 || (unsigned int)v15 >= 0) && (g_60c458 == -1 || g_60c458 >= 0) && ((unsigned int)v15 >= 0 || g_60c458 >= 0))\n        {\n            v13 = fcntl(v15, 0x1);\n            if (v13 >= 0)\n            {\n                v14 = fcntl(v15, 0x2);\n            }\n            if (v13 < 0 || v14 == -1)\n            {\n                v15 = -18446744069414584321;\n                close(v11);\n                *(__errno_location()) = v6;\n            }\n        }\n        v17 = v15;\n        return v17;\n    }\n    return fcntl(v10, v9);\n}\n"
        },
        {
            "funcName": "sub_405b80",
            "funcStartAddr": "0x405b80",
            "funcEndAddr": "0x405b96",
            "decompiledFuncCode": "int sub_405b80()\n{\n}\n"
        },
        {
            "funcName": "sub_403f60",
            "funcStartAddr": "0x403f60",
            "funcEndAddr": "0x403ff9",
            "decompiledFuncCode": "extern unsigned long long __progname_full;\nextern unsigned long long g_60c308;\nextern unsigned long long program_invocation_short_name;\nextern unsigned long long stderr;\n\nint sub_403f60()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // r8\n    unsigned long long v6;  // cc_dep1\n    unsigned long long v7;  // cc_dep2\n    unsigned long v8;  // d\n    char *v9;  // rdi\n    char *v10;  // rsi\n    unsigned long long v11;  // rcx\n    char *v13;  // rdi\n    unsigned long long v14;  // rcx\n    char *v15;  // rsi\n    unsigned long long v16;  // cc_dep1\n    unsigned long long v17;  // cc_dep2\n\n    if (v1 != 0)\n    {\n        v3 = v1;\n        v4 = strrchr();\n        if (v4 != 0)\n        {\n            v5 = v4 + 1;\n            if (v4 + 1 - v1 > 6)\n            {\n                v10 = v4 - 6;\n                v9 = \"/.libs/\";\n                v11 = 7;\n                while (v11 != 0)\n                {\n                    v11 -= 1;\n                    v6 = *(v10);\n                    v7 = *(v9);\n                    v9 = &v9[v8];\n                    v10 = &v10[v8];\n                    break;\n                }\n                if ((v6 > v7) - 0 - (v6 < v7) == 0)\n                {\n                    v13 = \"lt-\";\n                    v14 = 3;\n                    v15 = v5;\n                    v3 = v5;\n                    while (v14 != 0)\n                    {\n                        v14 -= 1;\n                        v16 = *(v15);\n                        v17 = *(v13);\n                        v13 = &v13[v8];\n                        v15 = &v15[v8];\n                        break;\n                    }\n                    if ((v16 > v17) - 0 - (v16 < v17) == 0)\n                    {\n                        v3 = v4 + 4;\n                        program_invocation_short_name = v4 + 4;\n                    }\n                }\n            }\n        }\n        g_60c308 = v3;\n        __progname_full = v3;\n        return v4;\n    }\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 0x1, 0x37, stderr);\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_4038e0",
            "funcStartAddr": "0x4038e0",
            "funcEndAddr": "0x4039e1",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[4229240];\n    unsigned long long field_408878;\n    unsigned int field_40887c;\n    unsigned short field_40887e;\n} struct_1;\n\nextern int512_t g_408878;\nextern int512_t g_40887c;\nextern int512_t g_40887e;\nextern int512_t g_408880;\n\nint sub_4038e0()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n    unsigned int v3[7];  // rdi\n    unsigned long long v4;  // rax\n    unsigned int v5[7];  // rbx\n    unsigned long long v6;  // r8\n    unsigned long long v7;  // rcx\n    unsigned long v8;  // cc_ndep\n    unsigned long long v9;  // rdi\n    unsigned long long v10;  // cc_dep2\n    unsigned long long v11;  // rsi\n    unsigned long long v12;  // rdx\n    void *v13;  // rdx\n    struct_1 *v14;  // rcx\n    unsigned long long *v15;  // rdi\n    unsigned long long v16;  // rdx\n    unsigned long long *v17;  // rsi\n    unsigned long long v18;  // rcx\n    unsigned long v19;  // d\n\n    v0 = v2;\n    v4 = v3[3];\n    v5 = v3;\n    v12 = v3[2 + 1];\n    v6 = (0 - (unsigned long long)(char)(v3[3] < 56) & -64) - -128;\n    v7 = (0 - (unsigned long long)(char)(v3[3] < 56) & -0x10) + 31;\n    v8 = (char)(v3[3] < 56);\n    v9 = (0 - (unsigned long long)(char)(v3[3] < 56) & -0x10) + 30;\n    v10 = v5[2];\n    v11 = (unsigned int)v4 + v5[2];\n    v5[2] = (unsigned int)v4 + v5[2];\n    if ((char)[D] amd64g_calculate_condition(0x2<64>, 0x3<64>, rax<8>, cc_dep2<8>, cc_ndep<8>))\n    {\n        v12 = (unsigned int)v12 + 1;\n        v5[2 + 1] = v12;\n    }\n    v5[3 + 1 + v9] = (unsigned long long)((unsigned int)v4 + v5[2]) * 8;\n    *((unsigned long long *)&v5[3 + 1 + v7]) = (unsigned int)v12 * 8 | v11;\n    v13 = (char *)&v5[3 + 1] + v4;\n    v14 = v6 - v4 - 8;\n    if (!(v6 - v4 - 8 < 8))\n    {\n        v15 = v13 + 8 & -8;\n        *((long long *)v13) = 128;\n        *((long long *)(v13 + v14 - 8)) = *((long long *)(v14 + &g_408878));\n        v16 = v13 - (v13 + 8 & -8);\n        v17 = (char *)&g_408880 + -1 * v16;\n        for (v18 = &v14->padding_0[v16] >> 3; v18 != 0; v17 = &v17[v19])\n        {\n            v18 -= 1;\n            *(v15) = *(v17);\n            v15 = &v15[v19];\n        }\n    }\n    else if (!((v14 & 4) == 0))\n    {\n        *((int *)v13) = 128;\n        *((int *)(v13 + v14 - 4)) = *((int *)(v14 + &g_40887c));\n    }\n    else if (v14 != 0)\n    {\n        *((char *)v13) = 128;\n        if ((v14 & 2) != 0)\n        {\n            *((short *)(v13 + v14 - 2)) = *((short *)(v14 + &g_40887e));\n        }\n    }\n    sub_403170();\n}\n"
        },
        {
            "funcName": "sub_4039f0",
            "funcStartAddr": "0x4039f0",
            "funcEndAddr": "0x403cd4",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[24];\n    unsigned int field_18;\n    char field_1c;\n} struct_0;\n\nint sub_4039f0()\n{\n    void tmp_11;  // tmp #11\n    unsigned long long v1;  // rsi\n    unsigned long long v2;  // r13\n    struct_0 *v3;  // rdx\n    struct_0 *v4;  // r12\n    void *v5;  // rdi\n    unsigned long long v6;  // rbp\n    unsigned long long v7;  // r15\n    unsigned long v8;  // r14\n    unsigned long long|void * v9;  // rax\n    unsigned int v10;  // esi\n    unsigned long long v12;  // rcx\n    unsigned long long v13;  // rdx\n    unsigned int v16;  // r15d\n    unsigned long long v17;  // rcx\n    unsigned long long v19;  // rdx\n    unsigned long long v21;  // rcx\n    unsigned long long v22;  // rcx\n    uint128_t *v23;  // rbx\n    uint128_t v24[4];  // rbp\n    void *v25;  // r14\n    unsigned long long v26;  // r15\n    uint128_t v27;  // xmm0\n    unsigned long long v29;  // rcx\n    unsigned long long v30;  // rax\n    void *v31;  // rsi\n    unsigned long long v33;  // r14\n    unsigned long long v34;  // rdx\n    unsigned long long v35;  // rsi\n    unsigned long v36;  // r13\n\n    v2 = v1;\n    v4 = v3;\n    v23 = v5;\n    v9 = v3->field_18;\n    if (v3->field_18 != 0)\n    {\n        v6 = v9;\n        v7 = &v4->field_1c;\n        v8 = (!(128 - v9 <= v1)? v1 : 128 - v9);\n        v9 = memcpy(&(struct struct_0 *)&v4->field_1c->padding_0[v9], v5, (!(128 - v9 <= v1)? v1 : 128 - v9));\n        v10 = v4->field_18 + (unsigned int)v8;\n        v4->field_18 = v4->field_18 + (unsigned int)v8;\n        if (v10 > 64)\n        {\n            sub_403170();\n            v12 = v4->field_18;\n            v9 = &(struct struct_0 *)&v3->field_1c->padding_0[v6 + v8 & -64];\n            v13 = v4->field_18 & 63;\n            v4->field_18 = v4->field_18 & 63;\n            if (!((unsigned int)v12 < 8))\n            {\n                *((long long *)&v4->field_1c) = *((long long *)v9);\n                v12 = v13;\n                *((long long *)(v7 + v12 - 8)) = *((long long *)&((char *)v9)[v12 + -8]);\n                v9 -= v7 - (&v4[1].padding_0[7] & -8);\n                v16 = (unsigned int)(v7 - (&v4[1].padding_0[7] & -8) + v12) & -8;\n                if (v16 >= 8)\n                {\n                    v19 = 0;\n                    do\n                    {\n                        v22 = v19;\n                        v19 = (unsigned int)v19 + 8;\n                        *((long long *)((&v4[1].padding_0[7] & -8) + v22)) = *((long long *)(v9 + v22));\n                    }\n                    while ((unsigned int)v19 < (v16 & -8));\n                }\n            }\n            else if (!((v12 & 4) == 0))\n            {\n                v17 = (unsigned int)*((int *)v9);\n                *((int *)&v4->field_1c) = *((int *)v9);\n                v9 = (unsigned int)*((int *)&((char *)v9)[v12 + -4]);\n                *((unsigned int *)(v7 + v12 - 4)) = v9;\n            }\n            else if ((unsigned int)v12 != 0)\n            {\n                v21 = (unsigned int)v12 & 2;\n                v4->field_1c = *((char *)v9);\n                if (((unsigned int)v12 & 2) != 0)\n                {\n                    v9 = (unsigned short)*((short *)&((char *)v9)[v12 + -2]);\n                    *((unsigned long long *)(v7 + v12 - 2)) = v9;\n                }\n            }\n        }\n        v23 = v5 + v8;\n        v2 -= v8;\n    }\n    if (v2 > 63)\n    {\n        if ((v23 & 3) != 0)\n        {\n            v24 = &v4->field_1c;\n            if (v2 != 64)\n            {\n                v26 = v2 - 65 >> 6;\n                v25 = &v23[4 + 4 * (v2 - 65 >> 6)];\n                while (true)\n                {\n                    v27 = *(v23);\n                    v23 = &v23[4];\n                    *((uint128_t *)&v24) = v27;\n                    *((uint128_t *)&v24[2]) = v23[-3];\n                    *((uint128_t *)&v24[4]) = v23[-2];\n                    *((uint128_t *)&v24[6]) = v23[-1];\n                    sub_403170();\n                    if (v23 == v25)\n                    {\n                        break;\n                    }\n                }\n                v2 = v2 + (0 - v26) * 64 - 64;\n            }\n            else\n            {\n                v25 = v23;\n            }\n        }\n        else\n        {\n            tmp_11 = v2;\n            v2 = (unsigned int)v2 & 63;\n            v23 = (char *)v23 + (tmp_11 & -64);\n            v9 = sub_403170();\n        }\n    }\n    if ((v23 & 3) == 0 || v2 <= 63)\n    {\n        if (v2 == 0)\n        {\n            return v9;\n        }\n        v24 = &v4->field_1c;\n        v25 = v23;\n    }\n    if (v2 != 0 || (v23 & 3) != 0 && v2 > 63)\n    {\n        v29 = v4->field_18;\n        v30 = v2;\n        v31 = (char *)v24 + (unsigned long long)v4->field_18;\n        if (!((unsigned int)v2 < 8))\n        {\n            *((long long *)v31) = *((long long *)v25);\n            *((long long *)&((char *)v31)[v2 + -8]) = *((long long *)&((char *)v25)[v2 + -8]);\n            v33 = v25 - (v31 - (v31 + 8 & -8));\n            v30 = (unsigned int)(v31 - (v31 + 8 & -8) + v2) & -8;\n            if (((unsigned int)(v31 - (v31 + 8 & -8) + v2) & -8) >= 8)\n            {\n                v30 = (unsigned int)v30 & -8;\n                v34 = 0;\n                do\n                {\n                    v35 = v34;\n                    v34 = (unsigned int)v34 + 8;\n                    *((long long *)((v31 + 8 & -8) + v35)) = *((long long *)(v33 + v35));\n                }\n                while ((unsigned int)v34 < (unsigned int)v30);\n            }\n        }\n        else if (!((v2 & 4) == 0))\n        {\n            *((int *)v31) = *((int *)v25);\n            v30 = (unsigned int)*((int *)&((char *)v25)[v2 + -4]);\n            *((int *)&((char *)v31)[v2 + -4]) = *((int *)&((char *)v25)[v2 + -4]);\n        }\n        else if ((unsigned int)v2 != 0)\n        {\n            *((char *)v31) = *((char *)v25);\n            if ((v30 & 2) != 0)\n            {\n                v30 = (unsigned short)*((short *)&((char *)v25)[v2 + -2]);\n                *((short *)&((char *)v31)[v2 + -2]) = *((short *)&((char *)v25)[v2 + -2]);\n            }\n        }\n        v36 = v2 + v29;\n        if (v36 > 63)\n        {\n            v36 -= 64;\n            sub_403170();\n            v30 = memcpy(v24, &v4[3].padding_0[5], v36);\n        }\n        v4->field_18 = v36;\n        return v30;\n    }\n}\n"
        },
        {
            "funcName": "sub_407370",
            "funcStartAddr": "0x407370",
            "funcEndAddr": "0x407388",
            "decompiledFuncCode": "int sub_407370()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 1;\n    return sub_407310();\n}\n"
        },
        {
            "funcName": "sub_405930",
            "funcStartAddr": "0x405930",
            "funcEndAddr": "0x40593c",
            "decompiledFuncCode": "int sub_405930()\n{\n}\n"
        },
        {
            "funcName": "sub_407310",
            "funcStartAddr": "0x407310",
            "funcEndAddr": "0x407366",
            "decompiledFuncCode": "extern unsigned int g_60c294;\nextern unsigned int g_60c298;\nextern unsigned int g_60c29c;\nextern unsigned int g_60c460;\nextern unsigned int g_60c464;\nextern unsigned int g_60c468;\nextern unsigned long long g_60c470;\nextern unsigned long long g_60c4a0;\n\nint sub_407310()\n{\n    unsigned int *v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp+0x8]\n\n    g_60c460 = g_60c29c;\n    g_60c464 = g_60c298;\n    v1 = (unsigned int)v2;\n    v0 = &g_60c460;\n    g_60c29c = g_60c460;\n    g_60c4a0 = g_60c470;\n    g_60c294 = g_60c468;\n    return sub_406d40();\n}\n"
        },
        {
            "funcName": "sub_403d50",
            "funcStartAddr": "0x403d50",
            "funcEndAddr": "0x403e66",
            "decompiledFuncCode": "int sub_403d50()\n{\n    unsigned long long v0;  // [bp-0xc8]\n    unsigned long long v1;  // [bp-0xc0]\n    unsigned long long v2;  // [bp-0xb8]\n    unsigned int v3;  // [bp-0xb0]\n    unsigned long v6;  // r12\n    void *v7;  // r12\n    unsigned long long v8;  // rbx\n    unsigned int *v9;  // rdi\n    unsigned long long v10;  // rax\n\n    if (v6 != 0)\n    {\n        v6 = malloc(0x8048);\n        v3 = 0;\n        v0 = 17279655951921914625;\n        v1 = 1167088121787636990;\n        v2 = 0;\n        while (true)\n        {\n            v8 = 0;\n            while (true)\n            {\n                v10 = fread_unlocked(v7 + v8, 0x1, 0x8000 - v8, v9);\n                v8 += v10;\n                if (v8 != 0x8000)\n                {\n                    if (v10 == 0 && ((char)*(v9) & 32) != 0)\n                    {\n                        free(v7);\n                        return 1;\n                    }\n                    if (((char)*(v9) & 32) == 0 && v10 == 0 || v10 != 0 && ((char)*(v9) & 16) != 0)\n                    {\n                        if (v8 != 0)\n                        {\n                            sub_4039f0();\n                        }\n                        sub_4038e0();\n                        free(v7);\n                        return 0;\n                    }\n                }\n                else\n                {\n                    sub_403170();\n                }\n            }\n        }\n    }\n    else\n    {\n        return 1;\n    }\n}\n"
        },
        {
            "funcName": "main",
            "funcStartAddr": "0x401940",
            "funcEndAddr": "0x40282f",
            "decompiledFuncCode": "typedef struct struct_3 {\n    char padding_0[4228800];\n    char field_4086c0;\n} struct_3;\n\nextern unsigned int g_407c18;\nextern unsigned int g_407c54;\nextern unsigned int g_407c63;\nextern unsigned int g_407c9d;\nextern unsigned int g_407cac;\nextern unsigned int g_4082c8;\nextern unsigned int g_408538;\nextern unsigned int g_408568;\nextern unsigned int g_4085a0;\nextern unsigned int g_4085d0;\nextern unsigned int g_408600;\nextern unsigned int g_408630;\nextern unsigned int g_408660;\nextern unsigned int g_408690;\nextern unsigned int g_409b27;\nextern unsigned int g_60c210;\nextern unsigned int g_60c29c;\nextern char g_60c2d8;\nextern char g_60c2d9;\nextern char g_60c2da;\nextern char g_60c2db;\nextern char g_60c2dc;\nextern unsigned long long g_60c2e0;\nextern unsigned long long g_60c2e8;\nextern char g_60c2f0;\nextern unsigned long long stdin;\nextern unsigned long long stdout[7];\n\nint main()\n{\n    unsigned long v0;  // [bp-0xf8]\n    unsigned long long v1;  // [bp-0xf0]\n    unsigned long long *v2;  // [bp-0xe8]\n    char *|unsigned long v3;  // [bp-0xe0]\n    unsigned long long v4;  // [bp-0xd5]\n    unsigned int v5;  // [bp-0xd4]\n    unsigned long long|unsigned long v6;  // [bp-0xd0]\n    unsigned long long|char|char *|unsigned long v7;  // [bp-0xc8]\n    unsigned long long|unsigned long v8;  // [bp-0xc0]\n    unsigned long long|char * v9;  // [bp-0xb8]\n    unsigned long long *v10;  // [bp-0xb0]\n    unsigned long long|unsigned long v11;  // [bp-0xa8]\n    char v12;  // [bp-0xa0]\n    char v13;  // [bp-0x9f]\n    unsigned long long v14;  // [bp-0x9e]\n    char v15;  // [bp-0x9d]\n    unsigned int v16;  // [bp-0x9c]\n    char v17;  // [bp-0x89]\n    unsigned long long v18;  // [bp-0x88]\n    unsigned long long v19;  // [bp-0x80]\n    char v20;  // [bp-0x78]\n    char v21;  // [bp-0x58]\n    unsigned long long v23;  // r14\n    unsigned long long v24;  // r13\n    unsigned long long v25;  // rdi\n    unsigned long long v26;  // rbp\n    unsigned long long v27;  // rsi\n    unsigned long long v28;  // rbx\n    unsigned long long v32;  // rax\n    unsigned int|unsigned long v33;  // r12\n    unsigned long v35;  // rsi\n    char *v38;  // rdi\n    unsigned long long v40;  // rax\n    void *v41;  // rbp\n    char *v43;  // rax\n    unsigned long long v44;  // rcx\n    char *v45;  // r8\n    unsigned long long v46;  // rdx\n    unsigned long long v47;  // r10\n    char *v48;  // rdi\n    char *v49;  // rsi\n    unsigned long long v50;  // cc_dep1\n    unsigned long long v51;  // cc_dep2\n    unsigned long v52;  // d\n    unsigned long long v53;  // cc_dep1\n    unsigned long long v54;  // rax\n    unsigned long long v55;  // rcx\n    unsigned long long v56;  // rax\n    char v57;  // al\n    unsigned long long v58;  // rax\n    unsigned long long v59;  // rdx\n    unsigned long long v60;  // r8\n    unsigned long long v61;  // rax\n    unsigned long long|char * v62;  // r15\n    unsigned long long v63;  // r11\n    unsigned long long v64;  // rdx\n    unsigned long long v65;  // rax\n    unsigned long long v66;  // rsi\n    unsigned long long v67;  // rdx\n    unsigned long long v68;  // rax\n    unsigned long long v69;  // rdx\n    unsigned long long v70;  // rax\n    unsigned long long v71;  // al\n    unsigned long long|char * v72;  // r13\n    char *v73;  // rax\n    unsigned long long v74;  // rcx\n    char *v75;  // rdi\n    char *v76;  // rsi\n    unsigned long long v77;  // cc_dep1\n    unsigned long long v78;  // cc_dep2\n    unsigned long long v79;  // cc_dep1\n    unsigned long long v80;  // r12\n    unsigned int|char|unsigned long v81;  // r14\n    unsigned long long v82;  // r15\n    char *v84;  // rax\n    unsigned int *v85;  // rdi\n    struct_3 *v87;  // rsi\n    char v88;  // sil\n    unsigned long v89;  // rsi\n    char *v91;  // rax\n    unsigned long long v94;  // r14\n    unsigned long long v95;  // rbx\n    char *v96;  // rax\n    char *v97;  // rax\n    unsigned int|unsigned long v98;  // ebx\n    unsigned long long v99;  // rax\n    unsigned long long v100;  // rbx\n    unsigned long long v103;  // rax\n    unsigned long long v106;  // rbx\n    unsigned long long v107;  // rbp\n    unsigned long long v108;  // rbp\n    char *v110;  // rax\n    char *v111;  // rax\n    char *v113;  // rax\n    unsigned long long v114;  // rbp\n    unsigned long long v115;  // rbx\n\n    v23 = 0;\n    v24 = 0;\n    v33 = -18446744069414584321;\n    v26 = v25;\n    v28 = v27;\n    sub_403f60();\n    setlocale(0x6, 0x409b27);\n    bindtextdomain(0x407c18, 0x4082c8);\n    textdomain(0x407c18);\n    sub_407b30();\n    setvbuf(stdout, NULL, 0x1, 0x0);\n    while (true)\n    {\n        v32 = sub_407390();\n        if ((unsigned int)v32 == -1)\n        {\n            g_60c2e8 = 34;\n            g_60c2e0 = 32;\n            if ((unsigned int)v33 == 0 && v23 != 0)\n            {\n                v35 = \"--tag does not support --text mode\";\n            }\n            if (v23 == 0 || (unsigned int)v33 != 0)\n            {\n                if (v24 != 0)\n                {\n                    v35 = \"the --tag option is meaningless when verifying checksums\";\n                }\n                if (v23 == 0 || v24 == 0)\n                {\n                    v35 = \"the --binary and --text options are meaningless when verifying checksums\";\n                    if (((char)((unsigned long long)!((unsigned int)r12<8>) >> 31) & v24) == 0)\n                    {\n                        if (g_60c2da != 0)\n                        {\n                            v35 = \"the --ignore-missing option is meaningful only when verifying checksums\";\n                        }\n                        else if (g_60c2dc != 0)\n                        {\n                            v35 = \"the --status option is meaningful only when verifying checksums\";\n                        }\n                        else if (g_60c2db != 0)\n                        {\n                            v35 = \"the --warn option is meaningful only when verifying checksums\";\n                        }\n                        else if (g_60c2d9 == 1)\n                        {\n                            v35 = \"the --quiet option is meaningful only when verifying checksums\";\n                        }\n                    }\n                }\n            }\n        }\n        else if ((unsigned int)v32 != 119)\n        {\n            if (v32 > 119)\n            {\n                if ((unsigned int)v32 == 130)\n                {\n                    g_60c2dc = 0;\n                    g_60c2db = 0;\n                    g_60c2d9 = 1;\n                }\n                else if (v32 <= 130)\n                {\n                    if ((unsigned int)v32 == 128)\n                    {\n                        g_60c2da = 1;\n                    }\n                    if ((unsigned int)v32 == 129)\n                    {\n                        g_60c2dc = 1;\n                        g_60c2db = 0;\n                        g_60c2d9 = 0;\n                    }\n                }\n                else\n                {\n                    if ((unsigned int)v32 == 131)\n                    {\n                        g_60c2d8 = 1;\n                    }\n                    if ((unsigned int)v32 == 132)\n                    {\n                        v23 = 1;\n                    }\n                }\n            }\n            else\n            {\n                if ((unsigned int)v32 != 98)\n                {\n                    if (v32 > 98)\n                    {\n                        if ((unsigned int)v32 == 99)\n                        {\n                            v24 = 1;\n                        }\n                        if ((unsigned int)v32 == 116)\n                        {\n                            v33 = 0;\n                        }\n                    }\n                    else\n                    {\n                        if ((unsigned int)v32 == -131)\n                        {\n                            v1 = 0;\n                            v0 = \"David Madore\";\n                            sub_406010();\n                            exit(0x0); /* do not return */\n                        }\n                        if ((unsigned int)v32 == -130)\n                        {\n                            sub_402c90(); /* do not return */\n                        }\n                    }\n                }\n            }\n            if (((unsigned int)v32 == 132 || v32 <= 119) && (v32 <= 119 || (unsigned int)v32 != 131) && (v32 <= 119 || (unsigned int)v32 != 130) && (v32 <= 119 || v32 > 130) && ((unsigned int)v32 == 98 || v32 > 119))\n            {\n                v33 = 1;\n            }\n        }\n        if ((unsigned int)v32 == 119)\n        {\n            g_60c2dc = 0;\n            g_60c2db = 1;\n            g_60c2d9 = 0;\n        }\n        if (...)\n        {\n            v35 = \"the --strict option is meaningful only when verifying checksums\";\n        }\n        if (...)\n        {\n            error(0x0, 0x0, (unsigned long long)dcgettext(0x0, v35, 0x5));\n        }\n        if (...)\n        {\n            if ((unsigned int)v33 == -1)\n            {\n                v33 = 0;\n            }\n            v10 = v28 + v26 * 8;\n            if (g_60c29c == (unsigned int)v26)\n            {\n                *(v10) = \"-\";\n                v10 = &v10[1];\n            }\n            v2 = v28 + (int)g_60c29c * 8;\n            if (v10 > v2)\n            {\n                v12 = 1;\n                v4 = v24;\n                v14 = v23;\n                v16 = (0 - (unsigned int)(char)(v33 < 1) & -10) + 42;\n                v15 = (0 - (unsigned int)(char)(v33 < 1) & -10) + 42;\n                do\n                {\n                    v38 = *(v2);\n                    v3 = *(v2);\n                    if ((char)v4 != 0)\n                    {\n                        v5 = strcmp(v38, \"-\");\n                        if (v5 == 0)\n                        {\n                            g_60c2f0 = 1;\n                            v41 = stdin;\n                            v3 = dcgettext(0x0, 0x407c54, 0x5);\n                        }\n                        else\n                        {\n                            v41 = (unsigned long long)(unsigned int)sub_403ec0();\n                        }\n                        if (v5 == 0 || v41 != 0)\n                        {\n                            v13 = 0;\n                            v94 = 0;\n                            v80 = 0;\n                            v95 = 1;\n                            v18 = 0;\n                            v19 = 0;\n                            v11 = 0;\n                            v6 = 0;\n                            while (true)\n                            {\n                                v43 = __getdelim(&v18, &v19, 0xa, v41);\n                                if (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>)))\n                                {\n                                    v44 = (char)*((char *)v18);\n                                    if (*((char *)v18) != 35)\n                                    {\n                                        v45 = v43;\n                                        if (v43[-1] == 10)\n                                        {\n                                            v45 = &v45[-1];\n                                            *(v45) = 0;\n                                            v44 = (char)*((char *)v18);\n                                        }\n                                        v46 = 0;\n                                        do\n                                        {\n                                            v46 += 1;\n                                            v44 = (char)*((char *)(0 + v46));\n                                        }\n                                        while (v44 == 9);\n                                        v47 = 0;\n                                        if (v44 == 92)\n                                        {\n                                            v47 = (char)v4;\n                                            v46 += 1;\n                                        }\n                                        v72 = 0 + v46;\n                                        v48 = \"MD5\";\n                                        v74 = 3;\n                                        v49 = 0 + v46;\n                                        while (v74 != 0)\n                                        {\n                                            v74 -= 1;\n                                            v50 = *(v49);\n                                            v51 = *(v48);\n                                            v48 = &v48[v52];\n                                            v49 = &v49[v52];\n                                            break;\n                                        }\n                                        v53 = (v50 > v51) - 0 - (v50 < v51);\n                                        if ((char)v53 == 0)\n                                        {\n                                            v54 = (char)*((char *)(0 + v46 + 3));\n                                            v55 = v46 + 3;\n                                            if (*((char *)(0 + v46 + 3)) == 32)\n                                            {\n                                                v54 = (char)*((char *)(0 + v46 + 4));\n                                                v55 = v46 + 4;\n                                            }\n                                            if (v54 == 40)\n                                            {\n                                                v74 = v55 + 1;\n                                                v60 = &v45[-1 * v74];\n                                                if (v60 != v74)\n                                                {\n                                                    v62 = 0 + v74;\n                                                    v63 = v60 - 1;\n                                                    if (v60 != 1)\n                                                    {\n                                                        if (*((char *)(v62 + v60 - 1)) != 41)\n                                                        {\n                                                            do\n                                                            {\n                                                                v63 -= 1;\n                                                            }\n                                                            while (*((char *)(v62 + v63)) != 41 && v63 != 1);\n                                                            if (v63 != 1)\n                                                            {\n                                                                v67 = v62 + v63;\n                                                            }\n                                                        }\n                                                        if (*((char *)(v62 + v60 - 1)) == 41 || *((char *)v62) != 41)\n                                                        {\n                                                            v67 = v62 + v63;\n                                                        }\n                                                    }\n                                                    if (*((char *)v62) == 41 && v60 == 1)\n                                                    {\n                                                        v67 = v62;\n                                                        v63 = 0;\n                                                    }\n                                                    if (v47 != 0 && (*((char *)v62) == 41 || v60 != 1) && (v60 == 1 || *((char *)(v62 + v60 - 1)) == 41 || *((char *)v62) != 41))\n                                                    {\n                                                        v7 = v67;\n                                                        v68 = sub_4029b0();\n                                                        v67 = v7;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else\n                                        {\n                                            v56 = 0;\n                                            v57 = *(v72) == 92;\n                                            v58 = rax<8> + g_60c2e8;\n                                            if (&v45[-1 * v46] >= v58)\n                                            {\n                                                v59 = v46 + g_60c2e0;\n                                                if (*(v9) == 32 || *(v9) == 9)\n                                                {\n                                                    *(v9) = 0;\n                                                    v9 = v59;\n                                                    v8 = v47;\n                                                    v7 = v45;\n                                                    v61 = sub_402950();\n                                                    if (v61 != 0)\n                                                    {\n                                                        v64 = v9;\n                                                        v65 = v9 + 1;\n                                                        if (&v7[-1 * v9 + -1] != 1)\n                                                        {\n                                                            v66 = (char)*((char *)(0 + v64 + 1));\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                if ((!((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>)) && &v45[-1 * v46] >= v58 && (char)v53 != 0 && v61 != 0 && *((char *)v18) != 35 && (*(v9) == 32 || *(v9) == 9) && &v7[-1 * v9 + -1] != 1 && *((char *)(0 + v64 + 1)) != 32 && v66 != 42 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>)) && &v45[-1 * v46] >= v58 && (char)v53 != 0 && v61 != 0 && *((char *)v18) != 35 && (*(v9) == 32 || *(v9) == 9) && &v7[-1 * v9 + -1] == 1) && g_60c210 != 0)\n                                {\n                                    g_60c210 = 1;\n                                }\n                                if ((!((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>)) && &v45[-1 * v46] >= v58 && (char)v53 != 0 && v61 != 0 && *((char *)v18) != 35 && (*(v9) == 32 || *(v9) == 9) && &v7[-1 * v9 + -1] != 1 && *((char *)(0 + v64 + 1)) != 32 && v66 == 42 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>)) && &v45[-1 * v46] >= v58 && (char)v53 != 0 && v61 != 0 && *((char *)v18) != 35 && (*(v9) == 32 || *(v9) == 9) && &v7[-1 * v9 + -1] != 1 && *((char *)(0 + v64 + 1)) == 32) && g_60c210 != 1)\n                                {\n                                    g_60c210 = 0;\n                                    v65 = v64 + 2;\n                                }\n                                if (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>)) && &v45[-1 * v46] >= v58 && (char)v53 != 0 && v61 != 0 && *((char *)v18) != 35 && (*(v9) == 32 || *(v9) == 9) && &v7[-1 * v9 + -1] != 1 && *((char *)(0 + v64 + 1)) != 32 && v66 == 42 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>)) && &v45[-1 * v46] >= v58 && (char)v53 != 0 && v61 != 0 && *((char *)v18) != 35 && (*(v9) == 32 || *(v9) == 9) && &v7[-1 * v9 + -1] != 1 && *((char *)(0 + v64 + 1)) == 32 || (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>)) && &v45[-1 * v46] >= v58 && (char)v53 != 0 && v61 != 0 && *((char *)v18) != 35 && (*(v9) == 32 || *(v9) == 9) && &v7[-1 * v9 + -1] != 1 && *((char *)(0 + v64 + 1)) != 32 && v66 != 42 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>)) && &v45[-1 * v46] >= v58 && (char)v53 != 0 && v61 != 0 && *((char *)v18) != 35 && (*(v9) == 32 || *(v9) == 9) && &v7[-1 * v9 + -1] == 1) && g_60c210 != 0)\n                                {\n                                    v62 = 0 + v65;\n                                    if ((char)v8 != 0)\n                                    {\n                                        v71 = (char)(sub_4029b0() != 0);\n                                    }\n                                }\n                                if ((char)v53 == 0 && v54 == 40 && !((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>)) && v60 != v74 && *((char *)v18) != 35 && (*((char *)v62) == 41 || v60 != 1) && (v60 == 1 || *((char *)(v62 + v60 - 1)) == 41 || *((char *)v62) != 41) && v47 != 0 && v68 != 0 || (char)v53 == 0 && v54 == 40 && !((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>)) && v60 != v74 && *((char *)v18) != 35 && (*((char *)v62) == 41 || v60 != 1) && (v60 == 1 || *((char *)(v62 + v60 - 1)) == 41 || *((char *)v62) != 41) && v47 == 0)\n                                {\n                                    *((char *)v67) = 0;\n                                    v69 = (char)*((char *)(v62 + v63 + 1));\n                                    v70 = v63 + 1;\n                                    if (v69 == 32 || *((char *)(v62 + v63 + 1)) == 9)\n                                    {\n                                        do\n                                        {\n                                            v70 += 1;\n                                            v69 = (char)*((char *)(v62 + v70));\n                                        }\n                                        while (v69 == 9);\n                                    }\n                                    if (v69 == 61)\n                                    {\n                                        v72 = v62 + v70 + 1;\n                                        v64 = (char)*((char *)(v62 + v70 + 1));\n                                        if (*((char *)(v62 + v70 + 1)) == 32 || v64 == 9)\n                                        {\n                                            v73 = v62 + v70 + 2;\n                                            do\n                                            {\n                                                v64 = *(v73);\n                                                v72 = v73;\n                                                v73 = &v73[1];\n                                            }\n                                            while (v64 == 9);\n                                        }\n                                        v71 = sub_402950();\n                                    }\n                                }\n                                if (...)\n                                {\n                                    v75 = \"-\";\n                                    v74 = 2;\n                                    v76 = v62;\n                                    while (v74 != 0)\n                                    {\n                                        v74 -= 1;\n                                        v77 = *(v76);\n                                        v78 = *(v75);\n                                        v75 = &v75[v52];\n                                        v76 = &v76[v52];\n                                        break;\n                                    }\n                                    v79 = (v77 > v78) - 0 - (v77 < v78);\n                                }\n                                if (...)\n                                {\n                                    v80 = 1;\n                                    if (g_60c2db != 0)\n                                    {\n                                        v82 = (unsigned int)sub_405a00();\n                                        error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x408538, 0x5));\n                                    }\n                                }\n                                if (...)\n                                {\n                                    v81 = 0;\n                                    if (g_60c2dc == 0)\n                                    {\n                                        v81 = 0;\n                                        v81 = strchr(v62, 0xa) != 0;\n                                    }\n                                    if ((char)v7 == 0)\n                                    {\n                                        v6 += 1;\n                                        if (g_60c2dc == 0)\n                                        {\n                                            if (v81 != 0)\n                                            {\n                                                v84 = stdout[5];\n                                                if (stdout[5] < stdout[6])\n                                                {\n                                                    stdout[5] = stdout[5] + 1;\n                                                    *(v84) = 92;\n                                                }\n                                                else\n                                                {\n                                                    __overflow();\n                                                }\n                                            }\n                                            sub_402a40();\n                                            v89 = \"FAILED open or read\";\n                                        }\n                                    }\n                                    else if (v17 == 0 || g_60c2da == 0)\n                                    {\n                                        if (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>)))\n                                        {\n                                            v8 = g_60c2e0 >> 1;\n                                            *((unsigned long long *)&v7) = (unsigned int)sub_402af0();\n                                            v85 = *((long long *)(unsigned long long)__ctype_tolower_loc());\n                                            while (true)\n                                            {\n                                                v87 = (unsigned long long)v21;\n                                                v88 = (unsigned long long)v21 >> 4;\n                                                if (v85[(unsigned long long)v72[2 * v64]] == (char)*((char *)(4228800 + (unsigned long long)((unsigned int)rsi<8> & 15))) && v85[(unsigned long long)v72[1 + 2 * v64]] == (char)*((char *)(4228800 + (unsigned long long)(v21 & 15))))\n                                                {\n                                                    v64 += 1;\n                                                    v64 = v8;\n                                                }\n                                                if (v85[(unsigned long long)v72[2 * v64]] != (char)*((char *)(4228800 + (unsigned long long)((unsigned int)rsi<8> & 15))) || v85[(unsigned long long)v72[1 + 2 * v64]] != (char)*((char *)(4228800 + (unsigned long long)(v21 & 15))))\n                                                {\n                                                    v11 += 1;\n                                                    break;\n                                                    if (g_60c2dc != 0)\n                                                    {\n                                                        break;\n                                                    }\n                                                }\n                                            }\n                                            if (v85[(unsigned long long)v72[2 * v64]] != (char)*((char *)(4228800 + (unsigned long long)((unsigned int)rsi<8> & 15))) || v85[(unsigned long long)v72[1 + 2 * v64]] != (char)*((char *)(4228800 + (unsigned long long)(v21 & 15))))\n                                            {\n                                                v94 = (char)v4;\n                                            }\n                                            else if (g_60c2dc == 0 && (v85[(unsigned long long)v72[2 * v64]] != (char)*((char *)(4228800 + (unsigned long long)((unsigned int)rsi<8> & 15))) || v85[(unsigned long long)v72[1 + 2 * v64]] != (char)*((char *)(4228800 + (unsigned long long)(v21 & 15)))))\n                                            {\n                                                v91 = stdout[5];\n                                            }\n                                            else if (v85[(unsigned long long)v72[2 * v64]] == (char)*((char *)(4228800 + (unsigned long long)((unsigned int)rsi<8> & 15))) && v8 == v64 && v85[(unsigned long long)v72[1 + 2 * v64]] == (char)*((char *)(4228800 + (unsigned long long)(v21 & 15))))\n                                            {\n                                                v13 = g_60c2dc;\n                                            }\n                                            else if (g_60c2dc == 0 && (v85[(unsigned long long)v72[2 * v64]] != (char)*((char *)(4228800 + (unsigned long long)((unsigned int)rsi<8> & 15))) || v85[(unsigned long long)v72[1 + 2 * v64]] != (char)*((char *)(4228800 + (unsigned long long)(v21 & 15)))))\n                                            {\n                                                v8 = v64;\n                                                v7 = v74;\n                                                sub_402a40();\n                                            }\n                                        }\n                                        else\n                                        {\n                                            v64 = 0;\n                                        }\n                                        if ((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>) || (*((char *)v41) & 48) != 0)\n                                        {\n                                            v13 = g_60c2dc;\n                                            if (g_60c2dc == 0)\n                                            {\n                                                v13 = g_60c2d9;\n                                                if (g_60c2d9 == 0)\n                                                {\n                                                    if (v81 != 0)\n                                                    {\n                                                        v13 = v7;\n                                                    }\n                                                    else\n                                                    {\n                                                        v7 = v7;\n                                                        sub_402a40();\n                                                        v13 = v7;\n                                                    }\n                                                }\n                                            }\n                                            if (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>)) || g_60c2d9 == 0 && g_60c2dc == 0 && v81 != 0)\n                                            {\n                                                v91 = stdout[5];\n                                                if (stdout[5] < stdout[6])\n                                                {\n                                                    stdout[5] = stdout[5] + 1;\n                                                    *(v91) = 92;\n                                                }\n                                                else\n                                                {\n                                                    v8 = v64;\n                                                    v7 = g_60c2e0 >> 1;\n                                                    __overflow();\n                                                    v74 = v7;\n                                                    v64 = v8;\n                                                }\n                                                v8 = v64;\n                                                v7 = v74;\n                                                sub_402a40();\n                                                if (v7 != v8)\n                                                {\n                                                    v89 = \"FAILED\";\n                                                }\n                                            }\n                                        }\n                                    }\n                                    if ((g_60c2d9 == 0 && g_60c2dc == 0 && v81 == 0 && (char)v7 != 0 && (v17 == 0 || g_60c2da == 0) && ((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>) || (*((char *)v41) & 48) != 0) || (char)v7 != 0 && (v17 == 0 || g_60c2da == 0) && ((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>) || (*((char *)v41) & 48) != 0) && (g_60c2d9 == 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>))) && (g_60c2dc == 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>))) && (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>)) || v81 != 0) && v7 == v8) && g_60c2d9 == 0)\n                                    {\n                                        v89 = \"OK\";\n                                    }\n                                    if (g_60c2dc == 0 && (char)v7 == 0 || (g_60c2d9 == 0 && g_60c2dc == 0 && v81 == 0 && (char)v7 != 0 && (v17 == 0 || g_60c2da == 0) && ((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>) || (*((char *)v41) & 48) != 0) || (char)v7 != 0 && (v17 == 0 || g_60c2da == 0) && ((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>) || (*((char *)v41) & 48) != 0) && (g_60c2d9 == 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>))) && (g_60c2dc == 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>))) && (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>)) || v81 != 0) && v7 == v8) && g_60c2d9 == 0 || (char)v7 != 0 && (v17 == 0 || g_60c2da == 0) && ((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>) || (*((char *)v41) & 48) != 0) && (g_60c2d9 == 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>))) && (g_60c2dc == 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>))) && (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>)) || v81 != 0) && v7 != v8)\n                                    {\n                                        __printf_chk(0x1, \": %s\\n\", dcgettext(0x0, v89, 0x5));\n                                    }\n                                    v94 = (char)v4;\n                                }\n                                if (...)\n                                {\n                                    free(v18);\n                                    v98 = *((int *)v41) & 32;\n                                    if (((char)*((int *)v41) & 32) == 0)\n                                    {\n                                        if (v5 != 0)\n                                        {\n                                            v99 = sub_4063e0();\n                                        }\n                                        if (v99 == 0 || v5 == 0)\n                                        {\n                                            if (v94 != 0)\n                                            {\n                                                if (g_60c2dc == 0)\n                                                {\n                                                    if (v80 != 0)\n                                                    {\n                                                        error(0x0, 0x0, (unsigned long long)dcngettext(0x0, 0x4085d0, 0x4085a0, v80, 0x5));\n                                                    }\n                                                    if (v6 != 0)\n                                                    {\n                                                        error(0x0, 0x0, (unsigned long long)dcngettext(0x0, 0x408630, 0x408600, v6, 0x5));\n                                                    }\n                                                    if (v11 != 0)\n                                                    {\n                                                        error(0x0, 0x0, (unsigned long long)dcngettext(0x0, 0x408690, 0x408660, v11, 0x5));\n                                                    }\n                                                    if (v13 == 0 && g_60c2da != 0)\n                                                    {\n                                                        v114 = (unsigned int)sub_405a00();\n                                                        error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x407cac, 0x5));\n                                                    }\n                                                }\n                                                if (v6 == 0 && v11 == 0 && v13 != 0)\n                                                {\n                                                    v98 = (unsigned int)g_60c2d8 ^ 1 | v98;\n                                                }\n                                            }\n                                            else\n                                            {\n                                                v107 = (unsigned int)sub_405a00();\n                                                error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x408568, 0x5));\n                                            }\n                                            v103 = v98 & 1;\n                                        }\n                                    }\n                                    else\n                                    {\n                                        v100 = (unsigned int)sub_405a00();\n                                        error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x407c9d, 0x5));\n                                        v103 = 0;\n                                    }\n                                }\n                                if (...)\n                                {\n                                    v95 += 1;\n                                    v115 = (unsigned int)sub_405a00();\n                                    error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x407c63, 0x5));\n                                }\n                            }\n                            if (...)\n                            {\n                                *((unsigned long long *)&v12) = v12 & v103;\n                            }\n                            else if (...)\n                            {\n                                v106 = (unsigned int)sub_405a00();\n                                error(0x0, *(__errno_location()), \"%s\");\n                                v103 = 0;\n                            }\n                        }\n                        v106 = (unsigned int)sub_405a00();\n                        error(0x0, *(__errno_location()), \"%s\");\n                        v103 = 0;\n                        *((unsigned long long *)&v12) = v12 & v103;\n                    }\n                    else if (sub_402af0() == 0)\n                    {\n                        v12 = 0;\n                    }\n                    else\n                    {\n                        v40 = strchr(v3, 0x5c);\n                        if (strchr(v3, 0xa) != 0 || v40 != 0)\n                        {\n                            if ((char)v14 == 0)\n                            {\n                                v96 = stdout[5];\n                                if (stdout[5] < stdout[6])\n                                {\n                                    stdout[5] = stdout[5] + 1;\n                                    *(v96) = 92;\n                                }\n                                else\n                                {\n                                    __overflow();\n                                }\n                            }\n                            else\n                            {\n                                v97 = stdout[5];\n                                if (stdout[6] > stdout[5])\n                                {\n                                    stdout[5] = stdout[5] + 1;\n                                    *(v97) = 92;\n                                }\n                                else\n                                {\n                                    __overflow();\n                                }\n                            }\n                        }\n                        if (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60c2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>)))\n                        {\n                            v108 = 0;\n                            while (true)\n                            {\n                                v108 += 1;\n                                __printf_chk(0x1, \"%02x\", (unsigned int)v20);\n                                if (g_60c2e0 >> 1 <= v108)\n                                {\n                                    break;\n                                }\n                            }\n                        }\n                        if ((char)v14 == 0)\n                        {\n                            v110 = stdout[5];\n                            if (stdout[5] < stdout[6])\n                            {\n                                stdout[5] = stdout[5] + 1;\n                                *(v110) = 32;\n                            }\n                            else\n                            {\n                                __overflow();\n                            }\n                            v111 = stdout[5];\n                            if (stdout[5] < stdout[6])\n                            {\n                                stdout[5] = stdout[5] + 1;\n                                *(v111) = v15;\n                            }\n                            else\n                            {\n                                __overflow();\n                            }\n                            sub_402a40();\n                        }\n                        else\n                        {\n                            fwrite_unlocked(\"MD5\", 0x1, 0x3, stdout);\n                            fwrite_unlocked(\" (\", 0x1, 0x2, stdout);\n                            sub_402a40();\n                            fwrite_unlocked(\") = \", 0x1, 0x4, stdout);\n                        }\n                        v113 = stdout[5];\n                        if (stdout[5] < stdout[6])\n                        {\n                            stdout[5] = stdout[5] + 1;\n                            *(v113) = 10;\n                        }\n                        else\n                        {\n                            __overflow();\n                        }\n                    }\n                    v2 = &v2[1];\n                }\n                while (v10 > v2);\n            }\n            else\n            {\n                v12 = 1;\n            }\n            if (g_60c2f0 != 0)\n            {\n                if ((char)(sub_4063e0() + 1 == 0))\n                {\n                    break;\n                }\n            }\n            return (unsigned int)v12 ^ 1;\n        }\n        if (...)\n        {\n            sub_402c90(); /* do not return */\n        }\n    }\n    error(0x1, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x407c54, 0x5));\n}\n"
        },
        {
            "funcName": "sub_405bb0",
            "funcStartAddr": "0x405bb0",
            "funcEndAddr": "0x405f59",
            "decompiledFuncCode": "extern unsigned int g_40966b;\nextern unsigned int g_40966f;\nextern unsigned int g_40967f;\nextern unsigned int g_409696;\nextern unsigned int g_4096f8;\nextern unsigned int g_4097c8;\nextern unsigned int g_4097e8;\nextern unsigned int g_409810;\nextern unsigned int g_409838;\nextern unsigned int g_409868;\n\nint sub_405bb0()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long long v11[9];  // r8\n    unsigned long long v12[9];  // rbx\n    unsigned long v13;  // rsi\n    void *v14;  // rdi\n    unsigned long v16;  // r9\n    unsigned long long v17;  // r8\n    unsigned long long v18;  // r15\n    unsigned long long v19;  // r14\n    unsigned long v20;  // rsi\n    unsigned long long v21;  // r8\n    unsigned long long v22;  // r13\n    unsigned long long v23;  // r12\n    unsigned long long v24;  // r14\n\n    v12 = v11;\n    if (v13 != 0)\n    {\n        __fprintf_chk();\n    }\n    else\n    {\n        __fprintf_chk();\n    }\n    dcgettext(0x0, 0x40966b, 0x5);\n    __fprintf_chk();\n    fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4096f8, 0x5), v14);\n    switch (v16)\n    {\n    case 0:\n        abort(); /* do not return */\n    case 1:\n        dcgettext(0x0, 0x40966f, 0x5);\n        break;\n    case 2:\n        dcgettext(0x0, 0x40967f, 0x5);\n        break;\n    case 3:\n        dcgettext(0x0, 0x409696, 0x5);\n        break;\n    case 4:\n        v24 = v11[3];\n        dcgettext(0x0, 0x4097c8, 0x5);\n    case 5:\n        v24 = v11[3];\n        dcgettext(0x0, 0x4097e8, 0x5);\n        *((unsigned long long [9])&v5) = v11[4];\n    case 6:\n        *((unsigned long long [9])&v6) = v11[1];\n        dcgettext(0x0, 0x409810, 0x5);\n        *((unsigned long long [9])&v4) = v11[5];\n        *((unsigned long long [9])&v3) = v11[4];\n        *((unsigned long long [9])&v2) = v11[3];\n    case 7:\n        *((unsigned long long [9])&v7) = v12[2];\n        *((unsigned long long [9])&v6) = v12[1];\n        dcgettext(0x0, 0x409838, 0x5);\n        *((unsigned long long [9])&v5) = v11[6];\n        *((unsigned long long [9])&v4) = v11[5];\n        *((unsigned long long [9])&v3) = v11[4];\n        *((unsigned long long [9])&v2) = v11[3];\n    case 8:\n        v22 = v12[6];\n        v23 = v12[5];\n        v18 = v12[4];\n        *((unsigned long long [9])&v8) = v12[7];\n        v19 = v12[3];\n        *((unsigned long long [9])&v6) = v12[2];\n        *((unsigned long long [9])&v7) = v12[1];\n        dcgettext(0x0, 0x409868, 0x5);\n    case 9:\n        v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n        v21 = v11[1];\n        v22 = v12[6];\n        v23 = v12[5];\n        *((unsigned long long [9])&v9) = v12[8];\n        v18 = v12[4];\n        v19 = v12[3];\n        *((unsigned long long [9])&v8) = v12[7];\n        *((unsigned long long [9])&v6) = v12[2];\n        v7 = v21;\n    default:\n        v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n        v17 = v11[1];\n        v22 = v12[6];\n        v23 = v12[5];\n        *((unsigned long long [9])&v9) = v12[8];\n        v18 = v12[4];\n        v19 = v12[3];\n        *((unsigned long long [9])&v8) = v12[7];\n        *((unsigned long long [9])&v6) = v12[2];\n        v7 = v17;\n    }\n    dcgettext(0x0, v20, 0x5);\n    v5 = v9;\n    v4 = v24;\n    __fprintf_chk();\n    return v4;\n    return __fprintf_chk();\n    v4 = v8;\n    v3 = v22;\n    v2 = v23;\n    v1 = v18;\n    v0 = v19;\n    return __fprintf_chk();\n}\n"
        },
        {
            "funcName": "sub_4058c0",
            "funcStartAddr": "0x4058c0",
            "funcEndAddr": "0x405929",
            "decompiledFuncCode": "int sub_4058c0()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_405330();\n}\n"
        },
        {
            "funcName": "sub_405632",
            "funcStartAddr": "0x405632",
            "funcEndAddr": "0x40565b",
            "decompiledFuncCode": "int sub_405632()\n{\n    unsigned long v0;  // [bp-0x30]\n    unsigned long v1;  // [bp-0x28]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v4;  // [bp-0x10]\n    unsigned long v5;  // [bp-0x8]\n    unsigned long v7;  // r15\n    unsigned long v8;  // r14\n    unsigned long v9;  // r13\n    unsigned long v10;  // r12\n    unsigned long v11;  // rbx\n\n    v5 = v7;\n    v4 = v8;\n    v3 = v9;\n    v2 = v10;\n    v1 = stack_base + 0;\n    v0 = v11;\n}\n"
        },
        {
            "funcName": "sub_405740",
            "funcStartAddr": "0x405740",
            "funcEndAddr": "0x4057d5",
            "decompiledFuncCode": "extern struct_0 *g_60c278;\nextern unsigned long long g_60c280;\nextern unsigned long long g_60c288;\nextern unsigned int g_60c290;\nextern unsigned long long g_60c320;\n\nint sub_405740()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rbx\n    void *v3;  // rdi\n\n    v1 = g_60c290;\n    if (g_60c290 > 1)\n    {\n        v2 = &g_60c278[1].field_8;\n        while (true)\n        {\n            v3 = *(v2);\n            v2 = &v2[2];\n            v1 = free(v3);\n            if (v2 == &g_60c278[(unsigned long long)(g_60c290 - 2) + 2].field_8)\n            {\n                break;\n            }\n        }\n    }\n    if (g_60c278->field_8 != 6341408)\n    {\n        v1 = free(g_60c278->field_8);\n        g_60c280 = 0x100;\n        g_60c288 = &g_60c320;\n    }\n    if (g_60c278 != 6341248)\n    {\n        v1 = free(g_60c278);\n        g_60c278 = &g_60c280;\n    }\n    g_60c290 = 1;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_405b40",
            "funcStartAddr": "0x405b40",
            "funcEndAddr": "0x405b52",
            "decompiledFuncCode": "int sub_405b40()\n{\n}\n"
        },
        {
            "funcName": "sub_406640",
            "funcStartAddr": "0x406640",
            "funcEndAddr": "0x406715",
            "decompiledFuncCode": "int sub_406640()\n{\n    unsigned int v1[13];  // rsi\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rbp\n    unsigned long long v4;  // rbx\n    unsigned long long v5;  // r9\n    unsigned long long v6;  // r8\n    unsigned long long v7;  // r14\n    unsigned long long v8;  // rdx\n    unsigned long v9;  // rdi\n    unsigned long long *v10;  // rax\n    unsigned long long *v12;  // rdx\n    unsigned long long v13;  // rcx\n    unsigned long long v14;  // r10\n    unsigned long long *v15;  // rax\n    unsigned long long *v17;  // rdx\n    unsigned long long v18;  // rcx\n    unsigned int v19;  // r9d\n\n    v2 = v1[5 + 1];\n    v3 = v1[0];\n    v4 = (int)v1[6];\n    v5 = v1[5 + 1];\n    v14 = v1[0];\n    while ((unsigned int)v14 > v1[6])\n    {\n        for (v6 = (int)v1[6]; v5 < v1[6]; v19 = v5 + v7)\n        {\n            v7 = v14 - v6;\n            v8 = v6 - v5;\n            if ((unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n            {\n                v14 -= v8;\n                v10 = v9 + v5 * 8;\n                v12 = v14 - v5;\n                do\n                {\n                    v13 = *(v10);\n                    *(v10) = *((long long *)((char *)v10 + 0x8 * v12));\n                    *((unsigned long long *)((char *)v10 + 0x8 * v12)) = v13;\n                    v10 = &v10[1];\n                }\n                while (v9 + 8 + ((unsigned int)v8 - 1 + v5) * 8 != v10);\n                if ((unsigned int)v14 <= (unsigned int)v6)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v15 = v9 + v5 * 8;\n                v17 = v4 - v5;\n                do\n                {\n                    v18 = *(v15);\n                    *(v15) = *((long long *)((char *)v15 + 0x8 * v17));\n                    *((unsigned long long *)((char *)v15 + 0x8 * v17)) = v18;\n                    v15 = &v15[1];\n                }\n                while (v15 != v9 + 8 + (v7 - 1 + v5) * 8);\n            }\n        }\n        if (v5 >= v1[6] || (unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n        {\n            v1[6] = v3;\n            v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n            return stack_base + 0 - v6;\n        }\n    }\n    v1[6] = v3;\n    v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n    return stack_base + 0 - v6;\n}\n"
        },
        {
            "funcName": "sub_402948",
            "funcStartAddr": "0x402948",
            "funcEndAddr": "0x402984",
            "decompiledFuncCode": "int sub_402948() { crash_skku;\n}"
        },
        {
            "funcName": "sub_4061a0",
            "funcStartAddr": "0x4061a0",
            "funcEndAddr": "0x4061a2",
            "decompiledFuncCode": "int sub_4061a0()\n{\n}\n"
        },
        {
            "funcName": "sub_406010",
            "funcStartAddr": "0x406010",
            "funcEndAddr": "0x4060c8",
            "decompiledFuncCode": "int sub_406010()\n{\n    unsigned int v0;  // [bp-0xa0]\n    void tmp_12;  // tmp #12\n    void tmp_8;  // tmp #8\n    unsigned long v1;  // [bp-0x98]\n    unsigned long long v2;  // [bp-0x90]\n    unsigned long v3;  // [bp-0x88]\n    unsigned long long v4;  // [bp-0x18]\n    unsigned long v5;  // [bp-0x10]\n    unsigned long long v6;  // [bp+0x8]\n    char v7;  // [bp+0x10]\n    unsigned long long v8;  // r11\n    unsigned long long v9;  // r8\n    unsigned long v10;  // r9\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // r8\n    unsigned long long|unsigned long long * v14;  // r10\n    unsigned long long v15;  // r9\n\n    v8 = 0;\n    v4 = v9;\n    v14 = &v6;\n    v13 = 32;\n    v1 = &v6;\n    v5 = v10;\n    v15 = 0;\n    v0 = 32;\n    v2 = stack_base + -56;\n    while (true)\n    {\n        if ((unsigned int)v13 <= 47)\n        {\n            tmp_12 = v13;\n            v13 = (unsigned int)v13 + 8;\n            v8 = 1;\n            v11 = v4;\n            v3 = v4;\n        }\n        else\n        {\n            tmp_8 = v14;\n            v14 = &v7;\n            v12 = v6;\n            v3 = v6;\n        }\n        if ((unsigned int)v13 <= 47 && v11 != 0 || v12 != 0 && (unsigned int)v13 > 47)\n        {\n            v15 += 1;\n        }\n        if (v8 != 0)\n        {\n            v0 = v13;\n        }\n        return sub_405bb0();\n    }\n}\n"
        },
        {
            "funcName": "sub_4063e0",
            "funcStartAddr": "0x4063e0",
            "funcEndAddr": "0x406458",
            "decompiledFuncCode": "int sub_4063e0()\n{\n    unsigned int v0;  // [bp+0x0]\n    void *v2;  // rdi\n    unsigned long long v4;  // rax\n    unsigned long long v8;  // rax\n\n    if (fileno(v2) >= 0)\n    {\n        v4 = __freading();\n        if ((v4 == 0 || (unsigned long long)lseek(fileno(v2), 0x0, 0x1) != -1) && sub_4065a0() != 0)\n        {\n            v8 = fclose(v2);\n            if (v0 != 0)\n            {\n                *(__errno_location()) = v0;\n                v8 = -18446744069414584321;\n            }\n            return v8;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_405830",
            "funcStartAddr": "0x405830",
            "funcEndAddr": "0x405842",
            "decompiledFuncCode": "int sub_405830()\n{\n}\n"
        },
        {
            "funcName": "sub_403170",
            "funcStartAddr": "0x403170",
            "funcEndAddr": "0x4038df",
            "decompiledFuncCode": "int sub_403170() { crash_skku_timeout;\n}"
        },
        {
            "funcName": "sub_405800",
            "funcStartAddr": "0x405800",
            "funcEndAddr": "0x40580a",
            "decompiledFuncCode": "int sub_405800()\n{\n}\n"
        },
        {
            "funcName": "sub_406320",
            "funcStartAddr": "0x406320",
            "funcEndAddr": "0x40634e",
            "decompiledFuncCode": "int sub_406320()\n{\n    unsigned int v1;  // rdi\n    unsigned int v2;  // rsi\n    unsigned long long v3;  // rax\n\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>)) && [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) == 0)\n    {\n        v3 = calloc(v1, v2);\n        if (v3 != 0)\n        {\n            return v3;\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>) || v3 == 0 || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) != 0)\n    {\n        sub_4063a0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_4061f0",
            "funcStartAddr": "0x4061f0",
            "funcEndAddr": "0x406211",
            "decompiledFuncCode": "int sub_4061f0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rdx\n    unsigned long long v4;  // rax\n\n    v4 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, rdx<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_4063a0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_4061b0",
            "funcStartAddr": "0x4061b0",
            "funcEndAddr": "0x4061e0",
            "decompiledFuncCode": "int sub_4061b0()\n{\n    unsigned int v1;  // rsi\n    void *v2;  // rdi\n    unsigned long long v3;  // rax\n\n    if (v1 == 0 && v2 != 0)\n    {\n        free(v2);\n        return 0;\n    }\n    if (v2 == 0 || v1 != 0)\n    {\n        v3 = realloc(v2, v1);\n        if (v3 == 0 && v1 != 0)\n        {\n            sub_4063a0(); /* do not return */\n        }\n        if (v1 == 0 || v3 != 0)\n        {\n            return v3;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_405af0",
            "funcStartAddr": "0x405af0",
            "funcEndAddr": "0x405b07",
            "decompiledFuncCode": "int sub_405af0()\n{\n}\n"
        },
        {
            "funcName": "sub_403070",
            "funcStartAddr": "0x403070",
            "funcEndAddr": "0x403078",
            "decompiledFuncCode": "extern char g_60c2f8;\n\nint sub_403070()\n{\n    char v1;  // dil\n    unsigned long v2;  // rax\n\n    g_60c2f8 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_405520",
            "funcStartAddr": "0x405520",
            "funcEndAddr": "0x40552f",
            "decompiledFuncCode": "extern int512_t g_60c420;\n\nint sub_405520()\n{\n    unsigned long v1;  // rdi\n    unsigned int v2;  // esi\n\n    *((unsigned int *)(v1 == 0? &g_60c420 : v1)) = v2;\n    return &g_60c420;\n}\n"
        },
        {
            "funcName": "sub_4028f1",
            "funcStartAddr": "0x4028f1",
            "funcEndAddr": "0x402948",
            "decompiledFuncCode": "extern char g_60c2c8;\nextern unsigned long long g_60c2d0;\n\nint sub_4028f1()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // rax\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long long v9;  // rbx\n    unsigned long long v10;  // r12\n\n    if (g_60c2c8 == 0)\n    {\n        v2 = stack_base + 0;\n        v1 = v5;\n        v0 = v6;\n        while (true)\n        {\n            if (g_60c2d0 >= 0)\n            {\n                break;\n            }\n            g_60c2d0 = g_60c2d0 + 1;\n            *((long long *)(6340160 + (v7 + 1) * 8))();\n        }\n        v9 = v0;\n        v10 = v1;\n        g_60c2c8 = 1;\n        return sub_40289b();\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_4063a0",
            "funcStartAddr": "0x4063a0",
            "funcEndAddr": "0x4063cc",
            "decompiledFuncCode": "extern unsigned int g_4099ef;\nextern unsigned int g_60c220;\n\nint sub_4063a0()\n{\n    dcgettext(0x0, 0x4099ef, 0x5);\n    error(g_60c220, 0x0, \"%s\");\n}\n"
        },
        {
            "funcName": "sub_405940",
            "funcStartAddr": "0x405940",
            "funcEndAddr": "0x40594f",
            "decompiledFuncCode": "int sub_405940()\n{\n}\n"
        },
        {
            "funcName": "sub_4059d0",
            "funcStartAddr": "0x4059d0",
            "funcEndAddr": "0x4059e1",
            "decompiledFuncCode": "int sub_4059d0()\n{\n}\n"
        },
        {
            "funcName": "sub_4059f0",
            "funcStartAddr": "0x4059f0",
            "funcEndAddr": "0x4059fa",
            "decompiledFuncCode": "int sub_4059f0()\n{\n}\n"
        },
        {
            "funcName": "sub_407b48",
            "funcStartAddr": "0x407b48",
            "funcEndAddr": "0x407b68",
            "decompiledFuncCode": "extern unsigned long long g_60be30;\n\nint sub_407b48()\n{\n    unsigned long long *v1;  // rbx\n    unsigned long long v2;  // rax\n    unsigned long v4;  // rdx\n\n    v1 = &g_60be30;\n    while (true)\n    {\n        v2 = *(v1);\n        if (*(v1) == -1)\n        {\n            break;\n        }\n        rax<8>();\n        v1 = &v1[-1];\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_406300",
            "funcStartAddr": "0x406300",
            "funcEndAddr": "0x406317",
            "decompiledFuncCode": "int sub_406300()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_406150();\n}\n"
        },
        {
            "funcName": "sub_406d40",
            "funcStartAddr": "0x406d40",
            "funcEndAddr": "0x4072a7",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    unsigned int field_4;\n    char padding_8[24];\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned int field_30;\n} struct_0;\n\ntypedef struct struct_1 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    unsigned int field_18;\n    char padding_1c[4];\n    unsigned long long field_20;\n    unsigned int field_28;\n    unsigned int field_2c;\n    unsigned int field_30;\n} struct_1;\n\nextern unsigned int g_409ac8;\nextern unsigned int g_409b0c;\n\nint sub_406d40()\n{\n    struct_0 *|struct_1 * v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x60]\n    unsigned long v4;  // [bp-0x58]\n    unsigned int|char v5;  // [bp-0x4c]\n    char v6[2];  // [bp-0x48]\n    unsigned long long v7;  // [bp-0x40]\n    struct_0 *v8;  // [bp+0x8]\n    unsigned int v9;  // [bp+0x10]\n    unsigned long v10;  // rcx\n    unsigned long v11;  // r8\n    unsigned int v12;  // r13d\n    unsigned long v13;  // rdi\n    unsigned long v14;  // rsi\n    unsigned long v15;  // r12\n    char v16[2];  // rdx\n    unsigned int|unsigned long v17;  // eax\n    unsigned long long v18;  // rax\n    unsigned long long|char * v19;  // rdx\n    unsigned long long v20;  // rax\n    unsigned int v22;  // r9d\n    unsigned long long v23;  // rax\n    unsigned long long|unsigned int v24;  // r9\n    unsigned long long *|unsigned long v26;  // rax\n    unsigned int|unsigned long v27;  // rdx\n    unsigned long v29;  // rax\n    char v30[2];  // rcx\n    unsigned long v31;  // rsi\n    unsigned long long v32;  // rcx\n    char *v33;  // rdi\n    char v34[2];  // rsi\n    unsigned long long v35;  // cc_dep1\n    unsigned long long v36;  // cc_dep2\n    unsigned long v37;  // d\n    unsigned long long v38;  // cc_dep1\n    unsigned int v39;  // ecx\n    unsigned int v40;  // eax\n    unsigned long long v41;  // rcx\n    unsigned long long|unsigned int v42;  // edx\n    unsigned int v44;  // eax\n    unsigned long long v45;  // r14\n    unsigned int|unsigned long v46;  // rbp\n    unsigned long long v47;  // rax\n    char v48[3];  // r14\n    unsigned long v49;  // r13\n    char *|char [2] v50;  // r15\n    char v51[3];  // rax\n    unsigned int v52;  // ecx\n    char v53[3];  // r8\n    unsigned long long v54;  // rcx\n    unsigned long long v55;  // rcx\n    unsigned long long v56;  // rdx\n    unsigned int v57;  // eax\n    char v58[2];  // rax\n    unsigned long long v59;  // r14\n    char v60;  // r14b\n    unsigned long long v61;  // r14\n    char v62;  // r14b\n    unsigned long long v63;  // rax\n\n    v3 = v10;\n    v4 = v11;\n    v12 = v8->field_4;\n    if ((unsigned int)v13 > 0)\n    {\n        v17 = v0->field_0;\n        v46 = v13;\n        v15 = v14;\n        v50 = v16;\n        v0->field_10 = 0;\n        if (!((unsigned int)v17 != 0))\n        {\n            v0->field_0 = 1;\n            v17 = 1;\n        }\n        else if (v0->field_18 != 0)\n        {\n            v18 = v16[0];\n            v19 = v0->field_20;\n            if (((char)(v18 - 43) & 253) == 0)\n            {\n                v20 = v50[1];\n                v50 = &v50[1];\n                v49 = (unsigned int)(v20 == 58? 0 : (unsigned int)r13<8>);\n            }\n        }\n        if ((unsigned int)v17 == 0 || v0->field_18 == 0)\n        {\n            *((unsigned long *)&v0->field_30) = v17;\n            *((unsigned long *)&v0->field_2c) = v17;\n            v0->field_20 = 0;\n            if (!(v16[0] != 45))\n            {\n                v0->field_28 = 2;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            else if (v16[0] != 43)\n            {\n                v19 = 0;\n                if (v9 == 0)\n                {\n                    v5 = v22;\n                    v23 = getenv(\"POSIXLY_CORRECT\");\n                    v24 = v5;\n                    if (v23 != 0)\n                    {\n                        v19 = v0->field_20;\n                    }\n                    else\n                    {\n                        v0->field_28 = 1;\n                        v19 = v0->field_20;\n                    }\n                }\n                if (v9 != 0 || v23 != 0)\n                {\n                    v0->field_28 = 0;\n                }\n            }\n            else\n            {\n                v0->field_28 = 0;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            v0->field_18 = 1;\n            v18 = v50[0];\n        }\n        if ((unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0)\n        {\n            v49 = (unsigned int)(v18 == 58? 0 : (unsigned int)r13<8>);\n        }\n        if (*(v19) == 0 || v19 == 0 && (unsigned int)v17 == 0 || v19 == 0 && v0->field_18 == 0 || v19 == 0 && ((char)(v18 - 43) & 253) != 0 || ((char)(v18 - 43) & 253) == 0 && v8->field_20 == 0 && (unsigned int)v17 != 0 && v0->field_18 != 0)\n        {\n            v26 = v0->field_0;\n            if (v0->field_30 > v0->field_0)\n            {\n                v0->field_30 = v8->field_0;\n            }\n            if (v8->field_0 < v0->field_2c)\n            {\n                v0->field_2c = v8->field_0;\n            }\n            if (v0->field_28 == 1)\n            {\n                v27 = v0->field_30;\n                if (v0->field_2c != v0->field_30)\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v5 = v24;\n                        sub_406640();\n                        v27 = v0->field_0;\n                        v24 = v5;\n                    }\n                }\n                else\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v0->field_2c = v8->field_0;\n                        v27 = v26;\n                    }\n                }\n                if ((unsigned int)v13 > (unsigned int)v27)\n                {\n                    v29 = v27;\n                    while (true)\n                    {\n                        v30 = *((long long *)(v15 + v29 * 8));\n                        v31 = v29;\n                        v27 = v29;\n                        if (*((char *)*((long long *)(v15 + (v29 << 3)))) == 45 && v30[1] != 0)\n                        {\n                            v26 = (unsigned long long)v0->field_0;\n                        }\n                        if (v30[1] == 0 || *((char *)*((long long *)(v15 + (v29 << 3)))) != 45)\n                        {\n                            v27 = v31 + 1;\n                            v29 += 1;\n                            v0->field_0 = (unsigned int)v31 + 1;\n                            if ((unsigned int)v13 <= (unsigned int)v29)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    if (v30[1] == 0 || *((char *)*((long long *)(v15 + (v29 << 3)))) != 45)\n                    {\n                        v26 = v27;\n                    }\n                    else if (*((char *)*((long long *)(v15 + (v29 << 3)))) == 45 && v30[1] != 0)\n                    {\n                        *((unsigned long *)&v0->field_30) = v27;\n                    }\n                }\n                v26 = v27;\n                *((unsigned long *)&v0->field_30) = v27;\n            }\n            if ((unsigned int)v13 != (unsigned int)v26)\n            {\n                v32 = 3;\n                v33 = \"-\";\n                v48 = *((long long *)(v15 + v26 * 8));\n                v34 = *((long long *)(v15 + v26 * 8));\n                while (v32 != 0)\n                {\n                    v32 -= 1;\n                    v35 = v34[0];\n                    v36 = *(v33);\n                    v33 = &v33[v37];\n                    v34 = &v34[v37];\n                    break;\n                }\n                v38 = (v35 > v36) - 0 - (v35 < v36);\n                if ((char)v38 == 0)\n                {\n                    v42 = v0->field_2c;\n                    v39 = v0->field_30;\n                    v40 = (unsigned int)v26 + 1;\n                    v0->field_0 = v0->field_2c;\n                    if ((unsigned int)v42 != v39)\n                    {\n                        if (v0->field_2c != v8->field_30)\n                        {\n                            sub_406640();\n                            v42 = v0->field_2c;\n                        }\n                    }\n                    else\n                    {\n                        v0->field_2c = v0->field_2c;\n                        v42 = v40;\n                    }\n                    v0->field_30 = v46;\n                    v0->field_0 = v46;\n                }\n                else if (v48[0] == 45)\n                {\n                    v41 = v48[1];\n                    if (v48[1] != 0 && v3 != 0)\n                    {\n                        if (!(v41 != 45))\n                        {\n                            v0->field_20 = &v48[2];\n                            v2 = \"-\";\n                            v1 = v49;\n                            v0 = v0;\n                        }\n                        else if (v24 != 0)\n                        {\n                            if (v48[2] == 0)\n                            {\n                                *((unsigned long long *)&v5) = v24;\n                                v47 = strchr(v50, v41);\n                            }\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v46 = v0->field_30;\n                v42 = v0->field_2c;\n            }\n        }\n    }\n    if (((unsigned int)v13 != (unsigned int)v26 && (unsigned int)v13 > 0 && (((char)(v18 - 43) & 253) == 0 || v19 == 0 || *(v19) == 0) && (v19 == 0 || *(v19) == 0 || (unsigned int)v17 != 0) && (v19 == 0 || *(v19) == 0 || v0->field_18 != 0) && (v8->field_20 == 0 || *(v19) == 0 || (unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 == 0 || (unsigned int)v13 == (unsigned int)v26 && (unsigned int)v13 > 0 && (((char)(v18 - 43) & 253) == 0 || v19 == 0 || *(v19) == 0) && (v19 == 0 || *(v19) == 0 || (unsigned int)v17 != 0) && (v19 == 0 || *(v19) == 0 || v0->field_18 != 0) && (v8->field_20 == 0 || *(v19) == 0 || (unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0)) && v42 != v46)\n    {\n        *((unsigned long long *)&v0->field_0) = v42;\n    }\n    if (((unsigned int)v13 != (unsigned int)v26 && (unsigned int)v13 > 0 && (((char)(v18 - 43) & 253) == 0 || v19 == 0 || *(v19) == 0) && (v19 == 0 || *(v19) == 0 || (unsigned int)v17 != 0) && (v19 == 0 || *(v19) == 0 || v0->field_18 != 0) && (v8->field_20 == 0 || *(v19) == 0 || (unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] == 45 && v48[1] == 0 || (unsigned int)v13 != (unsigned int)v26 && (unsigned int)v13 > 0 && (((char)(v18 - 43) & 253) == 0 || v19 == 0 || *(v19) == 0) && (v19 == 0 || *(v19) == 0 || (unsigned int)v17 != 0) && (v19 == 0 || *(v19) == 0 || v0->field_18 != 0) && (v8->field_20 == 0 || *(v19) == 0 || (unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] != 45) && v0->field_28 != 0)\n    {\n        v44 = (unsigned int)v26 + 1;\n        v0->field_10 = v48;\n        v45 = 1;\n        v0->field_0 = v44;\n    }\n    if (...)\n    {\n        v45 = -18446744069414584321;\n    }\n    if (...)\n    {\n        v0->field_20 = &v48[1];\n        v2 = \"-\";\n        v1 = v49;\n        v0 = v8;\n        v45 = (unsigned int)sub_406720();\n        if ((unsigned int)v45 == -1)\n        {\n            v48 = *((long long *)(v15 + (int)v0->field_0 * 8));\n        }\n    }\n    if (...)\n    {\n        v19 = &v48[1];\n    }\n    if (...)\n    {\n        *((char **)&v6[0]) = v19;\n        v0->field_20 = &v19[1];\n        v45 = *(v19);\n        v7 = &v19[1];\n        v5 = *(v19);\n        v51 = strchr(v50, *(v19));\n        v52 = v5;\n        v53 = v7;\n        if (v6[1] == 0)\n        {\n            v0->field_0 = v0->field_0 + 1;\n        }\n        v54 = (unsigned long long)v52 - 58;\n        if (v54 > 1 && v51 != 0)\n        {\n            v55 = v51[1];\n            if (v51[0] == 87 && v3 != 0 && v55 == 59 && v6[1] == 0)\n            {\n                if (v0->field_0 != v46)\n                {\n                    v53 = *((long long *)(v15 + (int)v8->field_0 * 8));\n                }\n                else\n                {\n                    if ((unsigned int)v49 != 0)\n                    {\n                        dcgettext(0x0, 0x409ac8, 0x5);\n                        __fprintf_chk();\n                    }\n                    v0->field_8 = v45;\n                    v59 = 0;\n                    v60 = *(v50) != 58;\n                    v45 = r14<8> * 5 + 58;\n                }\n            }\n        }\n    }\n    if (...)\n    {\n        if ((unsigned int)v49 != 0)\n        {\n            dcgettext(0x0, 0x409b0c, 0x5);\n            __fprintf_chk();\n        }\n        v0->field_8 = v45;\n        v45 = 63;\n    }\n    if (...)\n    {\n        v56 = v6[1];\n        if (v51[2] != 58)\n        {\n            if (!(v56 == 0))\n            {\n                v57 = v8->field_0 + 1;\n                v0->field_10 = v7;\n                v0->field_0 = v57;\n            }\n            else if (v46 != v8->field_0)\n            {\n                v58 = *((long long *)(v15 + (int)v8->field_0 * 8));\n                v0->field_0 = (int)v8->field_0 + 1;\n                v0->field_10 = v58;\n            }\n            else\n            {\n                if ((unsigned int)v49 != 0)\n                {\n                    dcgettext(0x0, 0x409ac8, 0x5);\n                    __fprintf_chk();\n                }\n                v0->field_8 = v45;\n                v61 = 0;\n                v62 = *(v50) != 58;\n                v45 = r14<8> * 5 + 58;\n            }\n        }\n        else\n        {\n            if (v56 != 0)\n            {\n                v0->field_10 = v7;\n                v0->field_0 = v0->field_0 + 1;\n            }\n            else\n            {\n                v0->field_10 = 0;\n            }\n        }\n        v0->field_20 = 0;\n    }\n    if (...)\n    {\n        v0->field_20 = v53;\n        v0->field_10 = 0;\n        v2 = \"-W \";\n        v1 = v49;\n        v0 = v0;\n    }\n    if (...)\n    {\n        v45 = (unsigned int)sub_406720();\n    }\n    v63 = v45;\n    return v63;\n}\n"
        },
        {
            "funcName": "sub_406170",
            "funcStartAddr": "0x406170",
            "funcEndAddr": "0x406191",
            "decompiledFuncCode": "int sub_406170()\n{\n    void tmp_10;  // tmp #10\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rdi\n\n    tmp_10 = v2;\n    v4 = v2 * v3;\n    v5 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_4063a0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_4065e0",
            "funcStartAddr": "0x4065e0",
            "funcEndAddr": "0x406636",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n    char padding_50[64];\n    unsigned long long field_90;\n} struct_0;\n\nint sub_4065e0()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    struct_0 *v4;  // rdi\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    struct_0 *v7;  // rbx\n    unsigned int v8;  // esi\n    unsigned int v9;  // edx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // r12\n\n    if (v4->field_10 == v4->field_8 && v4->field_28 == v4->field_20 && v4->field_48 == 0)\n    {\n        v2 = v5;\n        v1 = stack_base + 0;\n        v0 = v6;\n        v7 = v4;\n        v10 = lseek(fileno(v4), v8, v9);\n        if (v10 != -1)\n        {\n            v7->field_0 = v7->field_0 & -17;\n            v7->field_90 = v10;\n            v10 = 0;\n        }\n        v11 = v0;\n        v12 = v2;\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_4073b0",
            "funcStartAddr": "0x4073b0",
            "funcEndAddr": "0x4073c5",
            "decompiledFuncCode": "int sub_4073b0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_406d40();\n}\n"
        },
        {
            "funcName": "sub_40565b",
            "funcStartAddr": "0x40565b",
            "funcEndAddr": "0x405721",
            "decompiledFuncCode": "int sub_40565b()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long v1;  // [bp-0x50]\n    unsigned long v2;  // [bp-0x48]\n    unsigned int v3;  // [bp-0x2c]\n    unsigned long v4;  // [bp-0x28]\n    unsigned long v5;  // [bp-0x20]\n    unsigned long v6;  // [bp-0x18]\n    unsigned long v7;  // [bp-0x10]\n    unsigned long long v8;  // [bp+0x0]\n    unsigned long long v10;  // [bp+0x10]\n    unsigned long long v11;  // [bp+0x18]\n    unsigned long long v12;  // [bp+0x20]\n    unsigned long long v13;  // [bp+0x28]\n    unsigned long v14;  // rcx\n    unsigned long v15;  // rax\n    unsigned long long v17[7];  // rbx\n    unsigned int *v18;  // r13\n    unsigned long long *v20;  // r12\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // r12\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r14\n    unsigned long long v25;  // r15\n\n    v17 = (v14 == 0? v15 : rbx<8>);\n    v18 = __errno_location();\n    v3 = *(v18);\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = &v17[1];\n    v6 = &v17[1];\n    v7 = (unsigned int)sub_404100();\n    v5 = v7 + 1;\n    v4 = (unsigned int)sub_406150();\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = v6;\n    sub_404100();\n    *(v18) = v3;\n    if (v20 != 0)\n    {\n        *(v20) = v7;\n    }\n    v21 = v8;\n    v22 = v10;\n    v23 = v11;\n    v24 = v12;\n    v25 = v13;\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_402af0",
            "funcStartAddr": "0x402af0",
            "funcEndAddr": "0x402c68",
            "decompiledFuncCode": "extern char g_60c2da;\nextern char g_60c2f0;\nextern unsigned long long stdin;\n\nint sub_402af0()\n{\n    unsigned long long v1;  // rcx\n    unsigned long long v2;  // rdi\n    unsigned long long v4;  // cc_dep1\n    unsigned long long v5;  // cc_dep2\n    unsigned long v6;  // d\n    char *v7;  // rsi\n    char *v8;  // rdi\n    char *v9;  // rdx\n    unsigned long long v10;  // cc_dep1\n    unsigned long long v11;  // rbx\n    unsigned long long v13;  // rax\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // r12\n    unsigned int *v17;  // rbx\n    unsigned long long v18;  // rax\n    unsigned long long v20;  // rbp\n    unsigned long long v21;  // rbx\n    unsigned long long v23;  // rax\n\n    v1 = 2;\n    v8 = \"-\";\n    v7 = v2;\n    while (v1 != 0)\n    {\n        v1 -= 1;\n        v4 = *(v7);\n        v5 = *(v8);\n        v8 = &v8[v6];\n        v7 = &v7[v6];\n        break;\n    }\n    *(v9) = 0;\n    v10 = (v4 > v5) - 0 - (v4 < v5);\n    if ((char)v10 == 0)\n    {\n        v11 = stdin;\n        g_60c2f0 = 1;\n        sub_403e90();\n        v13 = sub_403d50();\n    }\n    else\n    {\n        v11 = (unsigned int)sub_403ec0();\n        if (v11 != 0)\n        {\n            sub_403e90();\n            v15 = sub_403d50();\n            if (v15 == 0)\n            {\n                v18 = sub_4063e0();\n                if (v18 != 0)\n                {\n                    v16 = 0;\n                    v21 = (unsigned int)sub_405a00();\n                    error(0x0, *(__errno_location()), \"%s\");\n                }\n            }\n        }\n        else\n        {\n            v16 = g_60c2da;\n            v17 = __errno_location();\n            if (g_60c2da != 0 && *(v17) == 2)\n            {\n                *(v9) = 1;\n            }\n            if (g_60c2da == 0 || *(v17) != 2)\n            {\n                v16 = 0;\n                sub_405a00();\n                error(0x0, *(v17), \"%s\");\n            }\n        }\n    }\n    if ((char)v10 == 0 || v11 != 0)\n    {\n        if (((char)v10 == 0 || v15 != 0) && (v13 != 0 || (char)v10 != 0))\n        {\n            v16 = 0;\n            v20 = (unsigned int)sub_405a00();\n            error(0x0, *(__errno_location()), \"%s\");\n            if (stdin != v11)\n            {\n                sub_4063e0();\n            }\n        }\n        if (((char)v10 == 0 || v15 == 0) && ((char)v10 == 0 || v18 == 0) && (v13 == 0 || (char)v10 != 0))\n        {\n            v16 = 1;\n        }\n    }\n    v23 = v16;\n    return v23;\n}\n"
        },
        {
            "funcName": "sub_4029b0",
            "funcStartAddr": "0x4029b0",
            "funcEndAddr": "0x402a1b",
            "decompiledFuncCode": "int sub_4029b0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rcx\n    unsigned long long v5;  // rcx\n    unsigned long long v6;  // rdx\n    char *v7;  // r9\n\n    v2 = v1 + 1;\n    v6 = 0;\n    if (v3 != 0)\n    {\n        while (true)\n        {\n            v4 = (char)*((char *)(v1 + v6));\n            if (*((char *)(v1 + v6)) != 0)\n            {\n                if (v4 != 92)\n                {\n                    *((unsigned long long *)(v2 - 1)) = v4;\n                    v7 = v2;\n                }\n                else if (v3 - 1 != v6)\n                {\n                    v6 += 1;\n                    v5 = (char)*((char *)(v1 + v6));\n                    if (*((char *)(v1 + v6)) == 92)\n                    {\n                        v7 = v2;\n                        *((char *)(v2 - 1)) = 92;\n                    }\n                    else if (v5 == 110)\n                    {\n                        v7 = v2;\n                        *((char *)(v2 - 1)) = 10;\n                    }\n                }\n                if ((v3 - 1 != v6 || v4 != 92) && (*((char *)(v1 + v6)) == 92 || v5 == 110 || v4 != 92))\n                {\n                    v6 += 1;\n                    v2 += 1;\n                    if (v7 >= v3 + v1)\n                    {\n                        break;\n                    }\n                    *(v7) = 0;\n                }\n            }\n            if (*((char *)(v1 + v6)) == 0 || v3 - 1 == v6 && v4 == 92 || v4 == 92 && *((char *)(v1 + v6)) != 92 && v5 != 110)\n            {\n                return 0;\n            }\n        }\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_403e90",
            "funcStartAddr": "0x403e90",
            "funcEndAddr": "0x403eac",
            "decompiledFuncCode": "int sub_403e90()\n{\n    unsigned long v0;  // [bp-0x8]\n    void *v2;  // rdi\n    unsigned long v3;  // rax\n    unsigned long v4;  // rbx\n\n    if (v2 != 0)\n    {\n        v0 = v4;\n        fileno(v2);\n    }\n    else\n    {\n        return v3;\n    }\n}\n"
        },
        {
            "funcName": "sub_406720",
            "funcStartAddr": "0x406720",
            "funcEndAddr": "0x406d1e",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    char padding_18[8];\n    struct struct_1 *field_20;\n} struct_0;\n\nextern unsigned int g_409a00;\nextern unsigned int g_409a20;\nextern unsigned int g_409a50;\nextern unsigned int g_409a70;\nextern unsigned int g_409aa0;\nextern unsigned long long stderr;\n\nint sub_406720()\n{\n    char *v0;  // [bp-0x78]\n    unsigned long long v1;  // [bp-0x70]\n    unsigned int *v2;  // [bp-0x68]\n    char *v3;  // [bp-0x58]\n    unsigned int v4;  // [bp-0x50]\n    char v5;  // [bp-0x49]\n    unsigned int v6;  // [bp-0x44]\n    unsigned int v7;  // [bp-0x40]\n    unsigned int v8;  // [bp-0x3c]\n    struct_0 *v9;  // [bp+0x8]\n    unsigned int v10;  // [bp+0x10]\n    char *v11;  // r14\n    char *v12;  // rdx\n    unsigned long v13;  // r8\n    char *v14;  // rbp\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // r13\n    unsigned long long v17;  // rcx\n    unsigned long long|unsigned long long * v18;  // rbx\n    unsigned long long|unsigned int|unsigned long v19;  // r12\n    char *v20;  // r15\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // r8\n    char *v24;  // rdi\n    unsigned long long v25;  // r15\n    unsigned long long v26;  // rbp\n    unsigned long long v27;  // rax\n    unsigned int v28;  // r9d\n    unsigned long long v29;  // r9\n    unsigned long long v30;  // rdx\n    unsigned int v31;  // ecx\n    char *v33;  // rbp\n    unsigned long long v34;  // rdx\n    unsigned long long *v35;  // rsi\n    void *v36;  // rdi\n    unsigned long long|unsigned long long * v37;  // rbx\n    unsigned long long v38;  // rbp\n    unsigned long long v39;  // r12\n    unsigned int *v41;  // rdx\n    unsigned long long v42;  // rax\n    unsigned long long v43;  // r14\n\n    v11 = v9->field_20;\n    v3 = v12;\n    v2 = v13;\n    v14 = v9->field_20;\n    *((struct struct_1 *)&v5) = *(v9->field_20);\n    if (*(v9->field_20) != 61 && *(v9->field_20) != 0)\n    {\n        do\n        {\n            v14 = &v14[1];\n            v15 = *(v14);\n        }\n        while (v15 != 61 && (char)v15 != 0);\n        v16 = v14 - v11;\n    }\n    if (*(v9->field_20) == 61 || *(v9->field_20) == 0)\n    {\n        v16 = 0;\n    }\n    v18 = v17;\n    v19 = 0;\n    v0 = *((long long *)v17);\n    v20 = *((long long *)v17);\n    if (*((long long *)v17) != 0)\n    {\n        while (true)\n        {\n            v21 = strncmp(v20, v9->field_20, v16);\n            if (v21 == 0)\n            {\n                v22 = strlen(v20);\n            }\n            if (v22 != v16 || v21 != 0)\n            {\n                v18 += 32;\n                v20 = *(v18);\n                v23 = v19 + 1;\n                if (*(v18) != 0)\n                {\n                    v19 = v23;\n                }\n                else\n                {\n                    v8 = v19;\n                    v18 = 0;\n                    v6 = -1;\n                    v24 = v0;\n                    v25 = 0;\n                    v4 = 0;\n                    v7 = 0;\n                    v1 = 0;\n                    v0 = v14;\n                    v26 = v17;\n                    do\n                    {\n                        v27 = strncmp(v24, v9->field_20, v16);\n                        if (v27 == 0)\n                        {\n                            if (v18 == 0)\n                            {\n                                v6 = v25;\n                                v18 = v26;\n                            }\n                            else if (*((int *)(v18 + 24)) != *((int *)(v26 + 24)) || *((long long *)(v18 + 16)) != *((long long *)(v26 + 16)) || *((int *)(v18 + 8)) != *((int *)(v26 + 8)) || v28 != 0)\n                            {\n                                if (v4 == 0)\n                                {\n                                    if (v10 == 0)\n                                    {\n                                        v4 = 1;\n                                    }\n                                    else if (v1 == 0)\n                                    {\n                                        v1 = calloc((int)v8, 0x1);\n                                        v4 = 1;\n                                    }\n                                    if (false)\n                                    {\n                                        v7 = 1;\n                                        *((char *)(v1 + (int)v6)) = 1;\n                                    }\n                                    if (v1 != 0)\n                                    {\n                                        *((char *)(v1 + v25)) = 1;\n                                    }\n                                }\n                            }\n                        }\n                        v26 += 32;\n                        v24 = *((long long *)v26);\n                        v25 += 1;\n                    }\n                    while (*((long long *)v26) != 0);\n                    v14 = v0;\n                    if (v1 == 0)\n                    {\n                        v29 = v4;\n                        if (v4 == 0)\n                        {\n                            if (v18 == 0)\n                            {\n                                break;\n                            }\n                            v19 = v6;\n                        }\n                    }\n                    if (v4 != 0 || v1 != 0)\n                    {\n                        if (v10 != 0)\n                        {\n                            if (v4 != 0)\n                            {\n                                dcgettext(0x0, 0x409a00, 0x5);\n                                __fprintf_chk();\n                                v11 = v9->field_20;\n                            }\n                            else\n                            {\n                                flockfile(stderr);\n                                dcgettext(0x0, 0x409a20, 0x5);\n                                __fprintf_chk();\n                                v36 = stderr;\n                                v37 = v17;\n                                v38 = v1;\n                                v39 = v1 + v19 + 1;\n                                do\n                                {\n                                    if (*((char *)v38) != 0)\n                                    {\n                                        __fprintf_chk();\n                                        v36 = stderr;\n                                    }\n                                    v38 += 1;\n                                    v37 = &v37[4];\n                                }\n                                while (v39 != v38);\n                                fputc(0xa, v36);\n                                funlockfile(stderr);\n                                v11 = v9->field_20;\n                            }\n                        }\n                        if (v7 != 0)\n                        {\n                            free(v1);\n                        }\n                        v43 = &v11[strlen(v11)];\n                        v9->field_20 = v43;\n                        v9->field_0 = v9->field_0 + 1;\n                        v9->field_8 = 0;\n                        v42 = 63;\n                    }\n                }\n            }\n            if ((*(v18) == 0 || v22 == v16) && (*(v18) == 0 || v21 == 0) && (v4 == 0 || v22 == v16) && (v4 == 0 || v21 == 0) && (v22 == v16 || v1 == 0) && (v21 == 0 || v1 == 0))\n            {\n                v30 = v9->field_0;\n                v9->field_20 = 0;\n                v9->field_0 = (unsigned int)v30 + 1;\n                v31 = *((int *)(v18 + 8));\n                if (*(v14) == 0)\n                {\n                    if (v31 == 1)\n                    {\n                        if ((unsigned int)((unsigned long long)v9->field_0 + 1) < v24)\n                        {\n                            v9->field_0 = v9->field_0 + 2;\n                            v9->field_10 = v35[1 + v30];\n                        }\n                        else\n                        {\n                            if (v10 != 0)\n                            {\n                                dcgettext(0x0, 0x409aa0, 0x5);\n                                __fprintf_chk();\n                            }\n                            v9->field_8 = *((int *)(v18 + 24));\n                            v42 = (unsigned long long)(char)(*(v3) != 58) * 5 + 58;\n                        }\n                    }\n                }\n                else\n                {\n                    if (v31 != 0)\n                    {\n                        v33 = &v14[1];\n                        v9->field_10 = v33;\n                    }\n                    else\n                    {\n                        if (v10 != 0)\n                        {\n                            dcgettext(0x0, 0x409a70, 0x5);\n                            __fprintf_chk();\n                        }\n                        v9->field_8 = *((int *)(v18 + 24));\n                        v42 = 63;\n                    }\n                }\n                if ((unsigned int)((unsigned long long)v9->field_0 + 1) < v24 && *(v14) == 0 || *(v14) == 0 && v31 != 1 || v31 != 0 && *(v14) != 0)\n                {\n                    if (v2 != 0)\n                    {\n                        *((unsigned long *)&v2) = v19;\n                    }\n                    v41 = *((long long *)(v18 + 16));\n                    v42 = (unsigned int)*((int *)(v18 + 24));\n                    if (*((long long *)(v18 + 16)) == 0)\n                    {\n                        break;\n                    }\n                    *(v41) = v42;\n                    v42 = 0;\n                }\n            }\n        }\n        if (...)\n        {\n            return v42;\n        }\n    }\n    if (v28 != 0)\n    {\n        if (*((char *)(v35[(long long)(int)v9->field_0] + 1)) != 45)\n        {\n            v34 = strchr(v3, v5);\n            v42 = -18446744069414584321;\n        }\n        if ((v34 != 0 || *((long long *)v17) != 0) && (*((char *)(v35[(long long)(int)v9->field_0] + 1)) != 45 || *((long long *)v17) != 0))\n        {\n            return v42;\n        }\n    }\n    if (v28 == 0 && *((long long *)v17) == 0 || v34 == 0 && v28 != 0 || *((char *)(v35[(long long)(int)v9->field_0] + 1)) == 45 && v28 != 0)\n    {\n        if (v10 != 0)\n        {\n            dcgettext(0x0, 0x409a50, 0x5);\n            __fprintf_chk();\n        }\n        v9->field_20 = 0;\n        v9->field_0 = v9->field_0 + 1;\n        v9->field_8 = 0;\n        return 63;\n    }\n}\n"
        },
        {
            "funcName": "sub_4073f0",
            "funcStartAddr": "0x4073f0",
            "funcEndAddr": "0x407408",
            "decompiledFuncCode": "int sub_4073f0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_406d40();\n}\n"
        },
        {
            "funcName": "sub_40314b",
            "funcStartAddr": "0x40314b",
            "funcEndAddr": "0x40316a",
            "decompiledFuncCode": "int sub_40314b()\n{\n    unsigned int v1[4];  // rsi\n    unsigned int v2[4];  // rdi\n\n    v1[0] = v2[0];\n    v1[1] = v2[1];\n    v1[1] = v2[1];\n    v1[1 + 1] = v2[1 + 1];\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_404000",
            "funcStartAddr": "0x404000",
            "funcEndAddr": "0x4040df",
            "decompiledFuncCode": "extern int512_t g_408906;\nextern int512_t g_40890a;\n\nint sub_404000()\n{\n    unsigned long v1;  // rdi\n    char *v2;  // rbx\n    char v3[8];  // rax\n    unsigned long long v4;  // rdx\n    unsigned long v5;  // rsi\n    char *v6;  // rax\n\n    v2 = (unsigned long long)dcgettext(0x0, v1, 0x5);\n    if (v1 == v2)\n    {\n        v3 = sub_407550();\n        v4 = v3[0] & 4294967007;\n        if ((v3[0] & 223) == 85)\n        {\n            if ((v3[1] & 223) == 84 && (v3[2] & 223) == 70 && v3[3] == 45 && v3[4] == 56 && v3[5] == 0)\n            {\n                v2 = (*(v2) != 96? &g_408906 : 4229393);\n            }\n        }\n        else\n        {\n            if (v4 == 71 && (v3[1] & 223) == 66 && v3[2] == 49 && v3[3] == 56 && v3[4] == 48 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0)\n            {\n                v2 = (*(v2) != 96? &g_40890a : 4229389);\n            }\n        }\n    }\n    if (...)\n    {\n        return ((unsigned int)v5 != 9? \"'\" : \"\\\"\");\n    }\n    if ((v3[1] & 223) == 84 && v3[4] == 56 && v1 == v2 && v3[5] == 0 && v3[3] == 45 && (v3[0] & 223) == 85 && (v3[2] & 223) == 70 || v3[4] == 48 && (v3[1] & 223) == 66 && v1 == v2 && v3[3] == 56 && v4 == 71 && v3[2] == 49 && (v3[0] & 223) != 85 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0 || v1 != v2)\n    {\n        v6 = v2;\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_406350",
            "funcStartAddr": "0x406350",
            "funcEndAddr": "0x406378",
            "decompiledFuncCode": "int sub_406350()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_406150();\n}\n"
        },
        {
            "funcName": "sub_405810",
            "funcStartAddr": "0x405810",
            "funcEndAddr": "0x405826",
            "decompiledFuncCode": "int sub_405810()\n{\n}\n"
        },
        {
            "funcName": "sub_402a40",
            "funcStartAddr": "0x402a40",
            "funcEndAddr": "0x402ac7",
            "decompiledFuncCode": "extern unsigned long long stdout[7];\n\nint sub_402a40()\n{\n    unsigned long long v1;  // rdi\n    char *v2;  // rbx\n    char v3;  // sil\n    unsigned long long v4;  // rsi\n    unsigned long long v5[7];  // rcx\n    char *v6;  // rax\n\n    v2 = v1;\n    if (v3 != 0)\n    {\n        while (true)\n        {\n            v4 = *(v2);\n            if (*(v2) == 0)\n            {\n                break;\n            }\n            v5 = stdout;\n            if (v4 == 10)\n            {\n                v6 = fwrite_unlocked(\"\\\\n\", 0x1, 0x2, stdout);\n            }\n            else if (v4 != 92)\n            {\n                v6 = v5[5];\n                if (v5[5] < v5[6])\n                {\n                    v5[5] = stdout[5] + 1;\n                    *((unsigned long long *)&v6) = v4;\n                }\n                else\n                {\n                    v6 = __overflow();\n                }\n            }\n            else\n            {\n                v6 = fwrite_unlocked(\"\\\\\\\\\", 0x1, 0x2, stdout);\n            }\n            v2 = &v2[1];\n        }\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_405570",
            "funcStartAddr": "0x405570",
            "funcEndAddr": "0x405583",
            "decompiledFuncCode": "extern int512_t g_60c420;\n\nint sub_405570()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned int v3;  // esi\n\n    v2 = (unsigned int)*((int *)((v1 == 0? &g_60c420 : v1) + 4));\n    *((unsigned int *)((v1 == 0? &g_60c420 : v1) + 4)) = v3;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4073d0",
            "funcStartAddr": "0x4073d0",
            "funcEndAddr": "0x4073e6",
            "decompiledFuncCode": "int sub_4073d0()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_407310();\n}\n"
        },
        {
            "funcName": "sub_405b10",
            "funcStartAddr": "0x405b10",
            "funcEndAddr": "0x405b23",
            "decompiledFuncCode": "int sub_405b10()\n{\n}\n"
        },
        {
            "funcName": "sub_407550",
            "funcStartAddr": "0x407550",
            "funcEndAddr": "0x407aa4",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned int field_8;\n    unsigned short field_c;\n} struct_1;\n\nextern char g_409b27;\nextern char g_60c498[2];\n\nint sub_407550()\n{\n    unsigned long long|unsigned long v0;  // [bp-0xd0]\n    void tmp_12;  // tmp #12\n    void tmp_56;  // tmp #56\n    void tmp_1;  // tmp #1\n    void tmp_10;  // tmp #10\n    void tmp_3;  // tmp #3\n    void tmp_28;  // tmp #28\n    unsigned long long v1;  // [bp-0xc8]\n    unsigned long long v2;  // [bp-0xc0]\n    char v3;  // [bp-0xb8]\n    char v4;  // [bp-0xb4]\n    char v5;  // [bp-0x78]\n    char v6;  // [bp-0x74]\n    unsigned int v7;  // [bp-0x4]\n    unsigned long long|char [2] v9;  // r15\n    char *|unsigned long v10;  // rbx\n    unsigned long v11;  // rax\n    unsigned long long v12;  // rdi\n    unsigned long long v13;  // rdi\n    unsigned long long v14;  // r12\n    char *v15;  // r13\n    unsigned long long v16;  // r14\n    unsigned long long v17;  // rbp\n    struct_1 *v20;  // r12\n    unsigned short v21;  // dx\n    unsigned int v22;  // r12d\n    unsigned long long v27;  // rax\n    unsigned int *v28;  // rcx\n    unsigned int v29;  // eax\n    unsigned long v30;  // rax\n    unsigned int *v31;  // rdx\n    unsigned long long v32;  // rcx\n    unsigned long long v33;  // rax\n    unsigned long v34;  // rax\n    unsigned long long v35;  // rax\n    unsigned long long v36;  // rax\n    unsigned long v37;  // rsi\n    unsigned long long v38;  // rcx\n    unsigned long long v39;  // rdx\n    unsigned long long v40;  // rcx\n    unsigned long long v41;  // rdi\n    unsigned long long v42;  // rsi\n    unsigned long long v43;  // r9\n    unsigned long long v44;  // r10\n    unsigned int v45;  // ecx\n    unsigned long long v47;  // r8\n    void *v48;  // rcx\n    unsigned long long v51;  // rcx\n    unsigned int v53;  // edx\n    unsigned long long v56;  // rcx\n    unsigned long long v57;  // rsi\n    char *v58;  // rax\n    unsigned long v59;  // rdi\n    char *v60;  // rax\n    unsigned long long v61;  // rax\n    unsigned long long v62;  // rdx\n    unsigned long long v66;  // rbp\n    unsigned long long v67;  // rax\n    unsigned long long v68;  // rax\n    unsigned long long v69;  // rbp\n    unsigned long long v70;  // rax\n\n    v9 = g_60c498;\n    v10 = ((unsigned long long)nl_langinfo(0xe) == 0? &g_409b27 : (unsigned long long)nl_langinfo(0xe));\n    if (g_60c498 == 0)\n    {\n        v15 = getenv(\"CHARSETALIASDIR\");\n        if (v15 != 0 && *(v15) != 0)\n        {\n            v11 = strlen(v15);\n            v14 = v11;\n            v16 = v11;\n            if (v11 == 0)\n            {\n                v12 = 14;\n            }\n            else if (v15[v11 + -1] == 47)\n            {\n                v12 = v11 + 14;\n            }\n            else\n            {\n                v13 = v11 + 15;\n                v14 += 1;\n            }\n            if (v15[v11 + -1] == 47 || v11 == 0)\n            {\n                v17 = malloc(v12);\n                if (v17 != 0)\n                {\n                    memcpy(v17, v15, v16);\n                }\n            }\n        }\n        if (*(v15) == 0 || v15 == 0)\n        {\n            v13 = 115;\n            v14 = 101;\n            v16 = 100;\n            v15 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        }\n        if (*(v15) == 0 || v15 == 0 || v15[v11 + -1] != 47 && v11 != 0)\n        {\n            v17 = malloc(v13);\n        }\n        if (v17 == 0 || v17 == 0)\n        {\n            v9 = &g_409b27;\n        }\n        if (v17 != 0 && (*(v15) == 0 || v15 == 0 || v15[v11 + -1] != 47) && (*(v15) == 0 || v15 == 0 || v11 != 0))\n        {\n            memcpy(v17, v15, v16);\n            *((char *)(v17 + v16)) = 47;\n        }\n        if (*(v15) == 0 && v17 != 0 || v15 == 0 && v17 != 0 || v17 != 0 && v15[v11 + -1] != 47 && v11 != 0 || v15[v11 + -1] == 47 && *(v15) != 0 && v15 != 0 && v17 != 0 || v11 == 0 && *(v15) != 0 && v15 != 0 && v17 != 0)\n        {\n            v20 = v14 + v17;\n            v20->field_0 = 3347411969557751907;\n            v20->field_c = 115;\n            v20->field_8 = 1634298977;\n            v22 = open(v17, 0x0, v21);\n            if (v22 >= 0)\n            {\n                v9 = 0;\n                v0 = 0;\n                if (v10 != 0)\n                {\n                    v10 = fdopen(v22, \"r\");\n                    while (true)\n                    {\n                        v58 = *((long long *)(v10 + 8));\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                        {\n                            *((char **)(v10 + 8)) = &v58[1];\n                            v59 = *(v58);\n                        }\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v59 != -1)\n                        {\n                            if ((unsigned int)v59 != 32 && (unsigned int)v59 != 35)\n                            {\n                                ungetc(v59, v10);\n                                v27 = fscanf(v10, \"%50s %50s\", (unsigned int)&v3, (unsigned int)&v5);\n                                if (v27 > 1)\n                                {\n                                    v28 = &v3;\n                                    do\n                                    {\n                                        tmp_12 = (unsigned int)*((int *)&v3);\n                                        v28 = &v4;\n                                        v29 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                    }\n                                    while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                    v30 = (unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int)(rax<8> >> 16) : (unsigned int)rax<8>);\n                                    v31 = &v5;\n                                    v32 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)((char *)v28 + 2) : v28) + -1 * ((v30 + v30 <= v30? 1 : 0) & 1) + -0x1 * &v3;\n                                    do\n                                    {\n                                        tmp_12 = (unsigned int)*((int *)&v5);\n                                        v31 = &v6;\n                                        v33 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                    }\n                                    while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                    v1 = v32;\n                                    tmp_56 = (unsigned int)v33 % 0x10000;\n                                    v34 = (unsigned int)(((unsigned int)v33 & 32896) == 0? (unsigned int)(v33 >> 16) : (unsigned int)v33);\n                                    v35 = &((char *)(-3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v31)[2] : v31) + -1 * ((v34 + v34 <= v34? 1 : 0) & 1) + -0x1 * &v5))[v1];\n                                    v2 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v31)[2] : v31) + -1 * (((unsigned int)((((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)) <= (unsigned long long)(unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)? 1 : 0) & 1) + -0x1 * &v5;\n                                    if (v0 == 0)\n                                    {\n                                        v0 = v35 + 2;\n                                        v36 = malloc(v35 + 3);\n                                        v38 = v1;\n                                        v39 = v2;\n                                    }\n                                    else\n                                    {\n                                        v37 = v35 + v0 + 3;\n                                        v0 = v35 + v0 + 2;\n                                        v36 = realloc(NULL, v37);\n                                        v39 = v2;\n                                        v38 = v1;\n                                    }\n                                    if (v36 != 0)\n                                    {\n                                        tmp_1 = -2 - v38;\n                                        v40 = v38 + 1;\n                                        v41 = v0 - v39;\n                                        v42 = tmp_1 + v0 - v39 + v36;\n                                        if ((unsigned int)v40 >= 8)\n                                        {\n                                            *((long long *)v42) = *((long long *)&v3);\n                                            *((long long *)(v42 + v40 - 8)) = *((long long *)&(&v3)[v40 + -8]);\n                                            v43 = v42 + 8 & -8;\n                                            v42 -= v42 + 8 & -8;\n                                            v44 = &(&v3)[-1 * v42];\n                                            v45 = (unsigned int)(v40 + v42) & -8;\n                                            if (v45 >= 8)\n                                            {\n                                                v42 = 0;\n                                                do\n                                                {\n                                                    v47 = v42;\n                                                    v42 = (unsigned int)v42 + 8;\n                                                    *((long long *)(v43 + v47)) = *((long long *)(v44 + v47));\n                                                }\n                                                while ((unsigned int)v42 < (v45 & -8));\n                                            }\n                                        }\n                                        else if ((v40 & 4) != 0)\n                                        {\n                                            *((int *)v42) = *((int *)&v3);\n                                            *((int *)(v42 + v40 - 4)) = *((int *)&(&v3)[v40 + -4]);\n                                        }\n                                        else if ((unsigned int)v40 != 0)\n                                        {\n                                            *((char *)v42) = v3;\n                                            if ((v40 & 2) != 0)\n                                            {\n                                                *((short *)(v42 + v40 - 2)) = *((short *)&(&v3)[v40 + -2]);\n                                            }\n                                        }\n                                        v62 = v39 + 1;\n                                        v48 = v36 + v41 - 1;\n                                        if ((unsigned int)v42 >= 8)\n                                        {\n                                            *((long long *)v48) = *((long long *)&v5);\n                                            v42 = v62;\n                                            *((long long *)&((char *)v48)[v42 + -8]) = *((long long *)&(&v5)[v42 + -8]);\n                                            v51 = v48 - (v48 + 8 & -8);\n                                            v53 = (unsigned int)(v42 + v51) & -8;\n                                            if (v53 >= 8)\n                                            {\n                                                v56 = 0;\n                                                do\n                                                {\n                                                    v57 = v56;\n                                                    v56 = (unsigned int)v56 + 8;\n                                                    *((long long *)((v48 + 8 & -8) + v57)) = *((long long *)&(&v5)[v57 + -1 * v51]);\n                                                }\n                                                while ((unsigned int)v56 < (v53 & -8));\n                                            }\n                                        }\n                                        else if (((char)v42 & 4) != 0)\n                                        {\n                                            *((int *)v48) = *((int *)&v5);\n                                            *((unsigned int *)&((char *)v48)[(unsigned long long)v7 + -4]) = v7;\n                                        }\n                                        else if ((unsigned int)v42 != 0)\n                                        {\n                                            *((char *)v48) = v5;\n                                            if ((v5 & 2) != 0)\n                                            {\n                                                *((short *)&((char *)v48)[(unsigned long long)v5 + -2]) = v7;\n                                            }\n                                        }\n                                        v9 = v36;\n                                        v58 = *((long long *)(v10 + 8));\n                                    }\n                                    else\n                                    {\n                                        v9 = &g_409b27;\n                                        v10 = (tmp_10 == 0? &g_409b27 : tmp_10);\n                                        free(NULL);\n                                        sub_4063e0();\n                                    }\n                                }\n                            }\n                            if ((unsigned int)v59 == 35)\n                            {\n                                do\n                                {\n                                    v60 = *((long long *)(v10 + 8));\n                                    if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                                    {\n                                        *((char **)(v10 + 8)) = &v60[1];\n                                        v61 = *(v60);\n                                        v62 = 1;\n                                    }\n                                    else\n                                    {\n                                        v61 = __uflow(v10);\n                                        v62 = (char)(v61 != -1);\n                                    }\n                                }\n                                while (v62 != 0 && v61 != 10);\n                            }\n                        }\n                        if (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && v27 > 1 && (unsigned int)v59 != 32 && (unsigned int)v59 != 35 && v36 != 0)\n                        {\n                            v59 = __uflow(v10);\n                        }\n                        if ((unsigned int)v59 == 35 && (unsigned int)v59 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v59 != -1) && v61 == -1 || (unsigned int)v59 != 32 && (unsigned int)v59 != 35 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v59 != -1) && v27 <= 1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && v27 > 1 && (unsigned int)v59 != 32 && (unsigned int)v59 != 35 && v36 != 0) && (unsigned int)v59 == -1)\n                        {\n                            v10 = (tmp_10 == 0? &g_409b27 : tmp_10);\n                            sub_4063e0();\n                            if (v0 == 0)\n                            {\n                                break;\n                            }\n                            *((char *)(v9 + v0)) = 0;\n                        }\n                    }\n                    if (...)\n                    {\n                        v9 = &g_409b27;\n                    }\n                    else if (...)\n                    {\n                        free(v17);\n                    }\n                }\n                else\n                {\n                    close(v22);\n                }\n            }\n            v9 = &g_409b27;\n            free(v17);\n        }\n        *((char *[2])&g_60c498[0]) = v9;\n    }\n    v66 = v9[0];\n    if (v9[0] != 0)\n    {\n        while (true)\n        {\n            v67 = strcmp((tmp_10 == 0? &g_409b27 : tmp_10), v9);\n            if (v67 != 0 && (v66 != 42 || v9[1] != 0))\n            {\n                v68 = strlen(v9);\n                v69 = &((char [2])&v9[v68])[1];\n                v70 = strlen(&((char [2])&v9[v68])[1]);\n                v9 = v69 + v70 + 1;\n                v66 = (char)*((char *)(v69 + v70 + 1));\n                if (v66 == 0)\n                {\n                    break;\n                }\n            }\n            if (v67 == 0 || v66 == 42 && v9[1] == 0)\n            {\n                v10 = &((char [2])&v9[strlen(v9)])[1];\n            }\n        }\n    }\n    tmp_3 = v10;\n    tmp_28 = *(v10) == 0;\n    return (tmp_28? \"ASCII\" : tmp_3);\n}\n"
        },
        {
            "funcName": "sub_406380",
            "funcStartAddr": "0x406380",
            "funcEndAddr": "0x406393",
            "decompiledFuncCode": "int sub_406380()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    char *v3;  // rdi\n\n    v0 = v2;\n    strlen(v3);\n}\n"
        },
        {
            "funcName": "sub_406220",
            "funcStartAddr": "0x406220",
            "funcEndAddr": "0x406298",
            "decompiledFuncCode": "int sub_406220() { crash_skku;\n}"
        },
        {
            "funcName": "sub_403e80",
            "funcStartAddr": "0x403e80",
            "funcEndAddr": "0x403e85",
            "decompiledFuncCode": "int sub_403e80()\n{\n}\n"
        },
        {
            "funcName": "sub_404100",
            "funcStartAddr": "0x404100",
            "funcEndAddr": "0x405238",
            "decompiledFuncCode": "int sub_404100()\n{\n    unsigned long long v0;  // [bp-0x1e8]\n    void tmp_38;  // tmp #38\n    unsigned long long|unsigned int * v1;  // [bp-0xe8]\n    unsigned long long v2;  // [bp-0xe0]\n    unsigned long long v3;  // [bp-0xd8]\n    unsigned long long|char|unsigned long v4;  // [bp-0xc0]\n    unsigned long long|char|unsigned long v5;  // [bp-0xb8]\n    char v6;  // [bp-0xa9]\n    unsigned long v7;  // [bp-0xa8]\n    unsigned long long v8;  // [bp-0xa0]\n    unsigned long long|char v9;  // [bp-0x98]\n    unsigned long long|unsigned int|unsigned long v10;  // [bp-0x90]\n    unsigned long long|unsigned int v11;  // [bp-0x88]\n    unsigned long long|unsigned int v12;  // [bp-0x80]\n    unsigned long long v13;  // [bp-0x78]\n    unsigned long long v14;  // [bp-0x70]\n    unsigned long v15;  // [bp-0x68]\n    unsigned int v16;  // [bp-0x60]\n    char v17;  // [bp-0x5c]\n    char v18;  // [bp-0x5b]\n    unsigned long long v19;  // [bp-0x5a]\n    char v20;  // [bp-0x59]\n    unsigned long long v21;  // [bp-0x58]\n    unsigned long long v22;  // [bp-0x50]\n    char v23;  // [bp-0x44]\n    unsigned long long v24;  // [bp-0x40]\n    unsigned int *v25;  // [bp+0x8]\n    unsigned long long v26;  // [bp+0x10]\n    unsigned long long v27;  // [bp+0x18]\n    unsigned long long v28;  // rdi\n    unsigned long long v29;  // r15\n    unsigned long v30;  // r8\n    unsigned long long v31;  // rcx\n    unsigned long v32;  // r9\n    unsigned long long|unsigned long v33;  // r10\n    unsigned long long v34;  // rbp\n    unsigned long long v35;  // r13\n    unsigned long long v36;  // r13\n    unsigned long long v37;  // r8\n    unsigned long long v38;  // r9\n    unsigned long long|unsigned long v39;  // r11\n    unsigned long long|unsigned long v40;  // rbp\n    unsigned long long v41;  // rax\n    unsigned long long v42;  // rax\n    char v43;  // al\n    unsigned long v44;  // rdx\n    unsigned long long v45;  // rcx\n    unsigned long long|unsigned short|unsigned long v46;  // rax\n    unsigned long long v47;  // rcx\n    unsigned long long v48;  // r13\n    unsigned long long v49;  // r13\n    unsigned long long v50;  // r13\n    char v51;  // r13b\n    unsigned long long v52;  // r13\n    unsigned long long v53;  // rdx\n    unsigned long long v54;  // rbx\n    unsigned long long v55;  // r13\n    unsigned long long v56;  // r15\n    unsigned long long v57;  // rbp\n    unsigned long long v58;  // r14\n    char *v59;  // rax\n    unsigned long long v60;  // rcx\n    unsigned long long v62;  // r13\n    unsigned long v63;  // r13\n    unsigned long long v64;  // rcx\n    char v65;  // al\n    char v66;  // al\n    unsigned int v67;  // eax\n    char v68;  // al\n    unsigned int v70;  // eax\n    char v71;  // al\n    unsigned long v72;  // rdx\n    unsigned long long v73;  // rax\n    char v74;  // al\n    unsigned long long v75;  // rdx\n    unsigned long long v76;  // rbx\n    unsigned long long|unsigned int|char|unsigned long v77;  // rsi\n    unsigned long long|unsigned int|char|unsigned long v78;  // r13\n    unsigned long long v79;  // r14\n    unsigned long long|unsigned long v80;  // r12\n    unsigned int v81;  // r13d\n    unsigned long long v82;  // r11\n    char v83;  // dl\n    char|unsigned long v84;  // rax\n    unsigned long long v85;  // cc_dep1\n    char|unsigned long v86;  // dl\n    unsigned long long v87;  // rax\n    unsigned long long v88;  // rax\n    unsigned long long v89;  // rdx\n    unsigned long long v90;  // rax\n    unsigned long long v91;  // rax\n\n    v29 = v28;\n    v79 = v77;\n    v78 = v30;\n    v7 = v77;\n    v4 = v31;\n    v16 = v32;\n    v15 = __ctype_get_mb_cur_max();\n    v17 = ((unsigned int)v32 & 2) != 0;\n    switch ((unsigned int)v30)\n    {\n    case 0:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 0;\n        v8 = 0;\n        v13 = 0;\n    case 1:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 0;\n        v8 = 1;\n        v13 = \"'\";\n    case 2:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 0;\n            if (v77 == 0)\n            {\n                v6 = 1;\n                v33 = 0;\n                v76 = 1;\n                v78 = 2;\n                v14 = 0;\n                v18 = 0;\n                v17 = 0;\n                v8 = 1;\n                v13 = \"'\";\n            }\n            else\n            {\n                v84 = 0;\n                v6 = 1;\n                v14 = 0;\n            }\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v76 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 0;\n            v8 = 1;\n            v13 = \"'\";\n        }\n    case 3:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"'\";\n    case 4:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 1;\n        }\n    case 5:\n        if (((char)v32 & 2) == 0)\n        {\n            if (v77 != 0)\n            {\n                *((char *)v28) = 34;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n                v14 = 0;\n            }\n            else\n            {\n                v14 = 0;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n            }\n            v17 = 0;\n            v76 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v76 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n    case 6:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 5;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"\\\"\";\n    case 7:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 1;\n        v8 = 0;\n        v13 = 0;\n    case 8: case 9: case 10:\n        if (v30 != 10)\n        {\n            v4 = v4;\n            v26 = (unsigned int)sub_404000();\n            v27 = (unsigned int)sub_404000();\n        }\n        v76 = 0;\n        if (((char)v32 & 2) == 0)\n        {\n            v78 = (char)*((char *)v26);\n            if (*((char *)v26) != 0)\n            {\n                do\n                {\n                    if (v77 > v76)\n                    {\n                        *((unsigned long long *)(v28 + v76)) = v78;\n                    }\n                    v76 += 1;\n                    v78 = (char)*((char *)(v26 + v76));\n                }\n                while ((char)v78 != 0);\n            }\n        }\n        v5 = v82;\n        v6 = 1;\n        v8 = strlen(v27);\n        v18 = 0;\n        v13 = v27;\n        v14 = 0;\n        v4 = 1;\n    default:\n        abort(); /* do not return */\n    }\n    v82 = v4;\n    while (true)\n    {\n        v38 = v82;\n        v80 = 0;\n        v39 = v78;\n        while (true)\n        {\n            v78 = v38 != v80;\n            if (v38 == -1)\n            {\n                v78 = *((char *)(v7 + v80)) != 0;\n            }\n            if (v78 != 0)\n            {\n                v37 = v7 + v80;\n                v5 = (unsigned int)v39 != 2 & v4;\n                if (((unsigned int)v39 != 2 & v4) != 0)\n                {\n                    v78 = v8;\n                    if (v8 != 0)\n                    {\n                        v34 = v80 + v78;\n                        if (v38 == -1 && v78 > 1)\n                        {\n                            v11 = v39;\n                            v10 = v33;\n                            v9 = v37;\n                            v38 = strlen(v7);\n                        }\n                        if (v34 <= v38)\n                        {\n                            v12 = v39;\n                            v11 = v38;\n                            v10 = v33;\n                            v9 = v37;\n                            v78 = memcmp(v37, v13, v8);\n                            v37 = v9;\n                            v33 = (char)v10;\n                            v38 = v11;\n                            v39 = v12;\n                            if (v17 == 0 && v78 == 0)\n                            {\n                                v40 = (char)*((char *)v37);\n                                switch (*((char *)v37))\n                                {\n                                case 0:\n                                    v77 = (unsigned int)v39 == 2;\n                                    v78 = (unsigned int)(0 ^ 1);\n                                    v78 = (char)(0 ^ 1) & (unsigned int)v39 == 2;\n                                    if (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0)\n                                    {\n                                        if (v77 > v76)\n                                        {\n                                            *((char *)(v28 + v76)) = 39;\n                                        }\n                                        if (v77 > v76 + 1)\n                                        {\n                                            *((char *)(v28 + v76 + 1)) = 36;\n                                        }\n                                        if (v77 > v76 + 2)\n                                        {\n                                            *((char *)(v28 + v76 + 2)) = 39;\n                                        }\n                                        v47 = v76 + 3;\n                                        v76 += 4;\n                                        v33 = rax<8>;\n                                        v78 = 0;\n                                        v40 = 48;\n                                    }\n                                    else\n                                    {\n                                        v47 = v76;\n                                        v78 = 0;\n                                        v76 = v47 + 1;\n                                        v78 = v78;\n                                        v40 = 48;\n                                        v78 = 0;\n                                        v40 = 48;\n                                        if (1 < v38)\n                                        {\n                                            v9 = *((char *)(v7 + 0 + 1));\n                                            if (((unsigned int)(char)*((char *)(v7 + 0 + 1)) - 48 & 255) <= 9)\n                                            {\n                                                if (v77 > v76)\n                                                {\n                                                    *((char *)(v28 + v76)) = 48;\n                                                }\n                                                if (v77 > v47 + 2)\n                                                {\n                                                    *((char *)(v28 + v47 + 2)) = 48;\n                                                }\n                                                v76 = v47 + 3;\n                                                v40 = 48;\n                                            }\n                                        }\n                                        v78 = v78;\n                                        v78 = 0;\n                                    }\n                                    if ((v77 > v76 || ((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0) && (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) == 0 || v77 > v76 + 3))\n                                    {\n                                        *((char *)(v28 + v47)) = 92;\n                                        v33 = v78;\n                                    }\n                                case 7:\n                                    v40 = 97;\n                                case 8:\n                                    v77 = 0;\n                                    v78 = 0;\n                                    v40 = 98;\n                                case 13:\n                                    v40 = 13;\n                                    v45 = 114;\n                                    v77 = (unsigned int)v39 == 2;\n                                case 32:\n                                    v41 = v5;\n                                    v40 = 32;\n                                    v50 = v5;\n                                    v5 = v41;\n                                    v78 = 0;\n                                case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                                    v77 = 0;\n                                case 35: case 126:\n                                    v42 = v5;\n                                case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                                    v41 = v5;\n                                case 92:\n                                    v44 = v4;\n                                    v40 = 92;\n                                    v45 = 92;\n                                    v77 = v4 & v17 & v8 != 0;\n                                    if ((v4 & v17 & v8 != 0) != 0)\n                                    {\n                                        v80 = 1;\n                                        v46 = 0;\n                                        v78 = 0;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (v8 == 0 || v34 > v38 || v78 != 0)\n                    {\n                        v40 = (char)*((char *)v37);\n                        switch (*((char *)v37))\n                        {\n                        case 0:\n                            if (v17 == 0)\n                            {\n                                v5 = 0;\n                            }\n                            else\n                            {\n                                v4 = (unsigned int)v39 == 2;\n                            }\n                        case 7:\n                            v40 = 97;\n                            break;\n                        case 8:\n                            v40 = 98;\n                        case 9:\n                            v40 = 116;\n                        case 10:\n                            v40 = 110;\n                            v77 = 0;\n                            v78 = 0;\n                        case 11:\n                            v40 = 118;\n                            break;\n                            if (v17 == 0)\n                            {\n                                v78 = 0;\n                            }\n                            else\n                            {\n                                v87 = 0;\n                            }\n                        case 12:\n                            v40 = 102;\n                            break;\n                        case 13:\n                            v5 = 0;\n                        case 32:\n                            v41 = 0;\n                        case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                            v5 = 0;\n                        case 35: case 126:\n                            v42 = 0;\n                            v48 = v5;\n                            v77 = 0;\n                            v5 = v42;\n                        case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                            v41 = 0;\n                        case 39:\n                            v5 = 0;\n                        case 63:\n                            v5 = 0;\n                        case 92:\n                            v5 = 0;\n                        case 123: case 125:\n                            v5 = 0;\n                        default:\n                            v5 = 0;\n                        }\n                    }\n                }\n                else\n                {\n                    v40 = (char)*((char *)v37);\n                    switch (*((char *)v37))\n                    {\n                    case 0:\n                        if (v4 == 0)\n                        {\n                            v80 += 1;\n                            v5 = 0;\n                            v77 = (unsigned int)v39 == 2;\n                            v36 = 0;\n                            v40 = 0;\n                            break;\n                            v78 = ((unsigned int)v4 ^ 1 | (unsigned int)v77) ^ 1;\n                            v78 = (char)(((unsigned int)v4 ^ 1 | (unsigned int)v77) ^ 1) | v17;\n                            v78 = 0;\n                            v72 = (unsigned int)((unsigned long long)v25[v40 % 32] >> ((char)v40 & 31)) & 1;\n                            v77 = (unsigned int)v39 == 2;\n                            v77 = (unsigned int)v39 == 2;\n                            v80 += 1;\n                            v46 = (v78 ^ 1) & (unsigned int)v33;\n                            if (v46 != 0)\n                            {\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 39;\n                                }\n                                if (v79 > v76 + 1)\n                                {\n                                    *((char *)(v29 + v76 + 1)) = 39;\n                                }\n                                v76 += 2;\n                                v33 = 0;\n                            }\n                            v73 = (unsigned int)v33 ^ 1;\n                            v74 = (char)((unsigned int)v33 ^ 1) & v77;\n                            if (((char)((unsigned int)v33 ^ 1) & v77) != 0)\n                            {\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 39;\n                                }\n                                if (v76 + 1 < v79)\n                                {\n                                    *((char *)(v29 + v76 + 1)) = 36;\n                                }\n                                v75 = v76 + 2;\n                                if (v76 + 2 < v79)\n                                {\n                                    *((char *)(v29 + v76 + 2)) = 39;\n                                }\n                                v76 += 3;\n                                v33 = rax<8>;\n                            }\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            v76 += 1;\n                            v80 += 1;\n                        }\n                    case 7:\n                        v40 = 7;\n                        v45 = 97;\n                        v77 = (unsigned int)v39 == 2;\n                    case 8:\n                        v40 = 8;\n                        v45 = 98;\n                        v77 = (unsigned int)v39 == 2;\n                    case 9:\n                        v40 = 9;\n                        v45 = 116;\n                        v77 = (unsigned int)v39 == 2;\n                        v5 = v17 & (unsigned int)v39 == 2;\n                    case 10:\n                        v40 = 10;\n                        v45 = 110;\n                    case 11:\n                        v40 = 11;\n                        v45 = 118;\n                        v77 = (unsigned int)v39 == 2;\n                    case 12:\n                        v40 = 12;\n                        v45 = 102;\n                        v77 = (unsigned int)v39 == 2;\n                        if (v4 == 0)\n                        {\n                            v55 = 0;\n                            break;\n                        }\n                        else\n                        {\n                            v40 = v45;\n                            v78 = 0;\n                        }\n                    case 13:\n                        v40 = 13;\n                        v45 = 114;\n                    case 32:\n                        v40 = 32;\n                        v77 = (unsigned int)v39 == 2;\n                    case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                        v77 = (unsigned int)v39 == 2;\n                        v35 = 0;\n                    case 35: case 126:\n                        v77 = (unsigned int)v39 == 2;\n                    case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                        v77 = (unsigned int)v39 == 2;\n                        break;\n                    case 39:\n                        if ((unsigned int)v39 == 2)\n                        {\n                            if (v77 != 0)\n                            {\n                                v53 = 0;\n                            }\n                            if (v77 == 0 || v14 != 0)\n                            {\n                                if (v77 > v76)\n                                {\n                                    *((char *)(v28 + v76)) = 39;\n                                }\n                                if (v77 > v76 + 1)\n                                {\n                                    *((char *)(v28 + v76 + 1)) = 92;\n                                }\n                                if (v77 > v76 + 2)\n                                {\n                                    v53 = v77;\n                                    *((char *)(v28 + v76 + 2)) = 39;\n                                    v79 = v14;\n                                }\n                                else\n                                {\n                                    v53 = v77;\n                                    v79 = v14;\n                                }\n                            }\n                            v18 = v78;\n                            v76 += 3;\n                            v78 = 0;\n                            v33 = 0;\n                            v14 = v79;\n                            v40 = 39;\n                            v79 = v53;\n                        }\n                        else\n                        {\n                            v18 = v78;\n                            v77 = 0;\n                            v40 = 39;\n                            break;\n                        }\n                    case 63:\n                        if ((unsigned int)v39 != 2)\n                        {\n                            v40 = 63;\n                            v77 = (unsigned int)v39 == 2;\n                            v52 = 0;\n                            break;\n                            v77 = v7;\n                            v40 = (char)*((char *)(v77 + 2));\n                            v77 = 0x7000a38200000000;\n                            v0 = 0x7000a38200000000;\n                            v77 = 0;\n                            v62 = 0;\n                            v40 = 63;\n                            break;\n                            if (v79 > v76)\n                            {\n                                *((char *)(v28 + v76)) = 63;\n                            }\n                            if (v79 > v76 + 1)\n                            {\n                                *((char *)(v28 + v76 + 1)) = 34;\n                            }\n                            if (v79 > v76 + 2)\n                            {\n                                *((char *)(v28 + v76 + 2)) = 34;\n                            }\n                            if (v79 > v76 + 3)\n                            {\n                                *((char *)(v28 + v76 + 3)) = 63;\n                            }\n                            v76 += 4;\n                            v77 = 0;\n                            v78 = 0;\n                            v80 = 2;\n                        }\n                        else\n                        {\n                            v78 = 0;\n                            v78 = 0;\n                            v40 = 63;\n                        }\n                    case 92:\n                        if ((unsigned int)v39 == 2)\n                        {\n                            v80 += 1;\n                            v46 = v33;\n                            v78 = 0;\n                            v40 = 92;\n                        }\n                    case 123: case 125:\n                        v43 = v38 != 1;\n                        if (v38 == -1)\n                        {\n                            v43 = *((char *)(v7 + 1)) != 0;\n                        }\n                        v77 = (unsigned int)v39 == 2;\n                        if (v43 == 0)\n                        {\n                            break;\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v81 = v39;\n                v82 = v38;\n                v83 = v81 == 2;\n                if (v76 == 0 && (v81 == 2 & v17) != 0)\n                {\n                    v3 = v27;\n                    v2 = v26;\n                    v1 = 0;\n                    v76 = (unsigned int)sub_404100();\n                }\n                if ((v81 == 2 & v17) == 0 || v76 != 0)\n                {\n                    v84 = (unsigned int)v17 ^ 1;\n                    v85 = v83 & (char)((unsigned int)v17 ^ 1);\n                    v86 = v83 & (char)((unsigned int)v17 ^ 1);\n                    if ((char)v85 == 0)\n                    {\n                        v86 = v84;\n                    }\n                    else if (v18 != 0)\n                    {\n                        if (v6 == 0)\n                        {\n                            v84 = v79 == 0 & v14 != 0;\n                            if ((v79 == 0 & v14 != 0) == 0)\n                            {\n                                v86 = v18;\n                            }\n                        }\n                        else\n                        {\n                            v3 = v27;\n                            v2 = v26;\n                            v1 = v25;\n                            v76 = (unsigned int)sub_404100();\n                        }\n                    }\n                }\n            }\n            if (v6 == 0 && v78 == 0 && v18 != 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && (v79 == 0 & v14 != 0) == 0 || v78 == 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && v18 == 0 || v78 == 0 && (char)v85 == 0 && ((v81 == 2 & v17) == 0 || v76 != 0))\n            {\n                v88 = v13;\n                if (v13 != 0 && v86 != 0)\n                {\n                    v89 = (char)*((char *)v88);\n                    if (*((char *)v88) != 0)\n                    {\n                        v90 = v88 - v76;\n                        do\n                        {\n                            if (v79 > v76)\n                            {\n                                *((unsigned long long *)(v29 + v76)) = v89;\n                            }\n                            v76 += 1;\n                            v89 = (char)*((char *)(v90 + v76));\n                        }\n                        while ((char)v89 != 0);\n                    }\n                }\n                if (v79 > v76)\n                {\n                    *((char *)(v29 + v76)) = 0;\n                }\n            }\n            if (v15 == 1)\n            {\n                v11 = v39;\n                v10 = v38;\n                v9 = v33;\n                v46 = (unsigned short)*((short *)(*((long long *)(unsigned long long)__ctype_b_loc()) + v40 * 2));\n                tmp_38 = v46 & 0x4000;\n                v46 &= 0x4000;\n                v51 = (tmp_38 & 65535) != 0;\n                v77 = (tmp_38 & 65535) == 0 & v4;\n                if (v77 != 0)\n                {\n                    v77 = v4;\n                    v78 = 0;\n                }\n            }\n            else\n            {\n                v24 = 0;\n                if (v38 == -1)\n                {\n                    v11 = v39;\n                    v10 = v33;\n                    v9 = v37;\n                    v38 = strlen(v7);\n                }\n                v21 = v76;\n                v22 = v37;\n                v54 = 0;\n                v19 = v33;\n                *((unsigned long long *)&v20) = v40;\n                v11 = v29;\n                v12 = v79;\n                v9 = v38;\n                *((unsigned long *)&v10) = v39;\n                do\n                {\n                    v56 = v80 + v54;\n                    v57 = v7 + v80 + v54;\n                    v46 = sub_407410();\n                    v58 = v46;\n                    if (v46 != -2 && v46 != 0 && v46 != -1)\n                    {\n                        if (v10 == 2 && v17 != 0 && v46 != 1)\n                        {\n                            v59 = v7 + v77 + 1;\n                            v77 = v7 + v58 + v77;\n                            while (true)\n                            {\n                                v60 = (unsigned int)*(v59) - 91;\n                                if ((8589934635 & 1 << (v60 & 63)) == 0 || ((unsigned int)*(v59) - 91 & 255) > 33)\n                                {\n                                    v59 = &v59[1];\n                                    if (v77 == v59)\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                            if ((8589934635 & 1 << (v60 & 63)) == 0 || ((unsigned int)*(v59) - 91 & 255) > 33)\n                            {\n                                v78 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                                v54 += v58;\n                                v46 = mbsinit((unsigned int)&v24);\n                            }\n                        }\n                        v78 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                        v54 += v58;\n                        v46 = mbsinit((unsigned int)&v24);\n                    }\n                    if (v46 == -1)\n                    {\n                        v28 = v54;\n                        v40 = v20;\n                        v76 = v21;\n                        v78 = 0;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v79 = v12;\n                        v38 = v9;\n                        v39 = v10;\n                        v77 = v4;\n                    }\n                    if (v46 == -2)\n                    {\n                        v38 = v9;\n                        v77 = v56;\n                        v46 = v54;\n                        v28 = v54;\n                        v33 = (char)v19;\n                        v40 = v20;\n                        v76 = v21;\n                        v29 = v11;\n                        v79 = v12;\n                        v39 = v10;\n                        if (v77 < v9 && *((char *)v57) != 0)\n                        {\n                            do\n                            {\n                                v46 += 1;\n                            }\n                            while (v46 < v9 && *((char *)(v22 + v46)) != 0);\n                            v28 = v46;\n                        }\n                        v77 = v4;\n                        v78 = 0;\n                    }\n                    if (v46 == 0 || v46 != -2 && v46 != -1 && (unsigned int)v46 != 0)\n                    {\n                        v28 = v54;\n                        v40 = v20;\n                        v76 = v21;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v77 = (unsigned int)v78 ^ 1;\n                        v79 = v12;\n                        v38 = v9;\n                        v39 = v10;\n                        v77 = (char)((unsigned int)v78 ^ 1) & v4;\n                    }\n                }\n                while (v28 <= 1);\n                if (v46 == -2 || v46 == 0 || v46 == -1 || (unsigned int)v46 != 0)\n                {\n                    v9 = v78;\n                    v77 = 0;\n                    v63 = v17;\n                    v64 = v28 + v80;\n                    v28 = v5;\n                }\n            }\n            if (false)\n            {\n                v5 = v42;\n                v49 = 0;\n                v87 = v77;\n                *((unsigned long long *)&v4) = v4 & v87;\n            }\n            if (v15 != 1 || v77 != 0)\n            {\n                v9 = v78;\n                v77 = 0;\n                v63 = v17;\n                v64 = v28 + v80;\n                v28 = v5;\n                while (true)\n                {\n                    if (v77 != 0)\n                    {\n                        v65 = (unsigned int)v39 == 2;\n                        if (v63 == 0)\n                        {\n                            v77 = (unsigned int)v33 ^ 1;\n                            v66 = v4 & (char)((unsigned int)v33 ^ 1);\n                            if ((v4 & (char)((unsigned int)v33 ^ 1)) != 0)\n                            {\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 39;\n                                }\n                                if (v79 > v76 + 1)\n                                {\n                                    *((char *)(v29 + v76 + 1)) = 36;\n                                }\n                                v77 = v76 + 2;\n                                if (v79 > v76 + 2)\n                                {\n                                    *((char *)(v29 + v76 + 2)) = 39;\n                                }\n                                v76 += 3;\n                                v33 = v46;\n                            }\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            if (v79 > v76 + 1)\n                            {\n                                v67 = v40;\n                                v68 = (char)v40 % 64;\n                                *((unsigned long long *)(v29 + v76 + 1)) = (unsigned long long)(unsigned int)rax<4> + 48;\n                            }\n                            v46 = v76 + 2;\n                            if (v79 > v76 + 2)\n                            {\n                                v70 = v40;\n                                v71 = (char)v40 % 8;\n                                v46 = (unsigned int)((rax<4> & 7) + 48);\n                                *((unsigned long long *)(v29 + v76 + 2)) = v46;\n                            }\n                            v80 += 1;\n                            v76 += 3;\n                            v40 = ((unsigned int)v40 & 7) + 48;\n                            if (v80 < v64)\n                            {\n                                v77 = v77;\n                            }\n                            else\n                            {\n                                v78 = (char)v9;\n                            }\n                        }\n                        else\n                        {\n                            v4 = v65;\n                        }\n                    }\n                    else\n                    {\n                        v46 = (v77 ^ 1) & (unsigned int)v33;\n                        if (v28 != 0)\n                        {\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            v76 += 1;\n                        }\n                        v80 += 1;\n                        if (v80 >= v64)\n                        {\n                            v78 = (char)v9;\n                        }\n                        else if (v46 != 0)\n                        {\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 39;\n                            }\n                            v46 = v76 + 1;\n                            if (v79 > v76 + 1)\n                            {\n                                *((char *)(v29 + v76 + 1)) = 39;\n                            }\n                            v76 += 2;\n                            v28 = 0;\n                            v33 = 0;\n                        }\n                        else\n                        {\n                            v28 = 0;\n                        }\n                    }\n                    if ((v63 == 0 || v77 == 0) && (v77 == 0 || v80 < v64) && (v80 < v64 || v77 != 0))\n                    {\n                        if (v79 > v76)\n                        {\n                            *((unsigned long long *)(v29 + v76)) = v40;\n                        }\n                        v40 = (char)*((char *)(v7 + v80));\n                        v76 += 1;\n                    }\n                }\n            }\n            if (((char)v16 & 1) == 0 && v4 == 0 && v17 == 0 && (char)(((unsigned int)v4 ^ 1 | (unsigned int)v77) ^ 1) == 0 && v5 == 0 || ((char)v16 & 1) == 0 && v4 == 0 && v17 == 0 && (char)(((unsigned int)v4 ^ 1 | (unsigned int)v77) ^ 1) == 0 && v5 != 0 || (v15 != 1 || v77 != 0) && v76 >= v79)\n            {\n                if (v76 < v79)\n                {\n                    *((unsigned long long *)(v29 + v76)) = v40;\n                }\n                v76 += 1;\n                v6 = (v78 == 0? 0 : (unsigned int)(char)(char)(stack_base)[-169]);\n            }\n            if (v6 == 0 && v78 == 0 && v18 != 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && (v79 == 0 & v14 != 0) == 0 || v78 == 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && v18 == 0 || v78 == 0 && (char)v85 == 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || v78 == 0 && v6 != 0 && v18 != 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || v78 == 0 && v76 == 0 && (v81 == 2 & v17) != 0)\n            {\n                v91 = v76;\n                return v91;\n            }\n        }\n        *((char *)v29) = 39;\n        v78 = 2;\n        v13 = \"'\";\n        v8 = 1;\n        v17 = 0;\n        *((unsigned long *)&v18) = v84;\n    }\n}\n"
        },
        {
            "funcName": "sub_40289b",
            "funcStartAddr": "0x40289b",
            "funcEndAddr": "0x4028ba",
            "decompiledFuncCode": "extern unsigned long long program_invocation_short_name;\n\nint sub_40289b()\n{\n    unsigned long long v1;  // rax\n\n    v1 = &program_invocation_short_name;\n    if (false)\n    {\n        v1 = 0;\n    }\n    return v1;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Angr",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_md5sum.elf"
}