{
    "funcInfo": [
        {
            "funcName": "sub_40da70",
            "funcStartAddr": "0x40da70",
            "funcEndAddr": "0x40dab0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    char field_8;\n} struct_0;\n\nextern unsigned int g_412bbb;\n\nint sub_40da70()\n{\n    struct_0 *v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned long long v3;  // rdx\n\n    if (v1->field_8 == 0)\n    {\n        v2 = unsetenv(0x412bbb);\n    }\n    else\n    {\n        v2 = setenv(0x412bbb, (unsigned int)v1 + 9, 0x1);\n    }\n    v3 = 0;\n    if (v2 == 0)\n    {\n        tzset();\n        v3 = 1;\n    }\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_40b7c0",
            "funcStartAddr": "0x40b7c0",
            "funcEndAddr": "0x40b7d1",
            "decompiledFuncCode": "int sub_40b7c0()\n{\n}\n"
        },
        {
            "funcName": "sub_40c3e0",
            "funcStartAddr": "0x40c3e0",
            "funcEndAddr": "0x40c411",
            "decompiledFuncCode": "extern unsigned int g_41786f;\nextern unsigned int g_61b280;\n\nint sub_40c3e0()\n{\n    dcgettext(0x0, 0x41786f, 0x5);\n    error(g_61b280, 0x0, \"%s\");\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_405940",
            "funcStartAddr": "0x405940",
            "funcEndAddr": "0x407b49",
            "decompiledFuncCode": "typedef struct struct_10 {\n    uint128_t field_0;\n    uint128_t field_10;\n    uint128_t field_20;\n    unsigned long long field_30;\n} struct_10;\n\ntypedef struct struct_11 {\n    unsigned long long field_0;\n    unsigned int field_8;\n    unsigned int field_c;\n} struct_11;\n\ntypedef struct struct_12 {\n    char padding_0[16];\n    unsigned long long field_10;\n    unsigned int field_18;\n    unsigned int field_1c;\n} struct_12;\n\ntypedef struct struct_0 {\n    char padding_0[56];\n    char field_38;\n    char padding_39[7];\n    unsigned long long field_40;\n    char field_48;\n    char padding_49[7];\n    unsigned long long field_50;\n    char field_58;\n    char padding_59[7];\n    unsigned long long field_60;\n    char field_68;\n} struct_0;\n\ntypedef struct struct_13 {\n    char padding_0[4285440];\n    char field_416400;\n} struct_13;\n\nextern unsigned int g_4149d9;\nextern unsigned int g_4149f3;\nextern unsigned int g_414a26;\nextern unsigned int g_414f08;\nextern unsigned int g_414f40;\nextern unsigned long long g_415a40;\nextern unsigned long long g_415f20;\nextern char g_416080;\nextern char g_416140;\nextern unsigned long long g_4162e0;\nextern int512_t g_416340;\nextern int512_t g_4163a0;\nextern char g_416400;\nextern char g_416480;\nextern int512_t g_416500;\nextern int512_t g_416520;\nextern int512_t g_416540;\nextern int512_t g_4165c0;\nextern int512_t g_416640;\n\nint sub_405940()\n{\n    void tmp_24;  // tmp #24\n    void tmp_26;  // tmp #26\n    void tmp_37;  // tmp #37\n    void tmp_5;  // tmp #5\n    void tmp_9;  // tmp #9\n    void tmp_117;  // tmp #117\n    void tmp_259;  // tmp #259\n    unsigned long long v0;  // [bp-0x608]\n    void tmp_120;  // tmp #120\n    void tmp_256;  // tmp #256\n    void tmp_1;  // tmp #1\n    void tmp_7;  // tmp #7\n    void tmp_113;  // tmp #113\n    void tmp_249;  // tmp #249\n    void tmp_14;  // tmp #14\n    void tmp_62;  // tmp #62\n    void tmp_11;  // tmp #11\n    unsigned long long v1;  // [bp-0x600]\n    unsigned long|unsigned long long v2;  // [bp-0x5f8]\n    char v3;  // [bp-0x5e8]\n    unsigned int|unsigned long|unsigned long long v4;  // [bp-0x5e0]\n    unsigned int|char|unsigned long|unsigned long long v5;  // [bp-0x5d8]\n    unsigned int|unsigned long long v6;  // [bp-0x5d0]\n    unsigned int v7;  // [bp-0x5c4]\n    unsigned long|unsigned long long v8;  // [bp-0x5c0]\n    unsigned long v9;  // [bp-0x5b8]\n    char *|char|unsigned long long v10;  // [bp-0x5b0]\n    unsigned int|unsigned long|unsigned long long v11;  // [bp-0x5a8]\n    unsigned long|unsigned long long v12;  // [bp-0x5a0]\n    unsigned long long v13;  // [bp-0x598]\n    unsigned int|unsigned long|unsigned long long v14;  // [bp-0x590]\n    unsigned long|unsigned long long v15;  // [bp-0x588]\n    unsigned int|unsigned long v16;  // [bp-0x580]\n    unsigned long|unsigned long long v17;  // [bp-0x578]\n    unsigned long long v18;  // [bp-0x570]\n    char|unsigned long|unsigned long long v19;  // [bp-0x568]\n    char v20;  // [bp-0x554]\n    char v21;  // [bp-0x552]\n    char v22;  // [bp-0x550]\n    char v23;  // [bp-0x54e]\n    char v24;  // [bp-0x54c]\n    char v25;  // [bp-0x54a]\n    unsigned short v26;  // [bp-0x548]\n    char v27;  // [bp-0x540]\n    unsigned long v28;  // [bp-0x538]\n    char|unsigned long|void|unsigned long long v29;  // [bp-0x518]\n    unsigned long v30;  // [bp-0x510]\n    char|unsigned long v31;  // [bp-0x508]\n    unsigned long v32;  // [bp-0x500]\n    unsigned long v33;  // [bp-0x4f8]\n    unsigned long v34;  // [bp-0x4e8]\n    void|uint128_t|unsigned long long v35;  // [bp-0x4d8]\n    char|unsigned long long v36;  // [bp-0x4d0]\n    void|uint128_t|unsigned long long v37;  // [bp-0x4c8]\n    unsigned long long v38;  // [bp-0x4c0]\n    void|uint128_t|unsigned long long v39;  // [bp-0x4b8]\n    unsigned long long v40;  // [bp-0x4b0]\n    unsigned int|unsigned long|unsigned long long v41;  // [bp-0x4a8]\n    unsigned int v42;  // [bp-0x4a4]\n    unsigned int v43;  // [bp-0x4a0]\n    char v44;  // [bp-0x498]\n    unsigned long v45;  // [bp-0x490]\n    unsigned long v46;  // [bp-0x488]\n    unsigned long v47;  // [bp-0x480]\n    unsigned long v48;  // [bp-0x478]\n    unsigned long v49;  // [bp-0x470]\n    char v51;  // [bp-0x1]\n    unsigned int|unsigned long|unsigned long long v53;  // r8\n    unsigned long long v54;  // rdi\n    unsigned long long v55;  // r9\n    unsigned int v56;  // edx\n    unsigned long long v57;  // rdx\n    unsigned long long v58;  // rsi\n    unsigned long long v59;  // r15\n    unsigned long long v60;  // rax\n    unsigned long long v62;  // rbx\n    unsigned long long v64;  // rbx\n    unsigned long long v65;  // rcx\n    unsigned long long v66;  // rax\n    struct_0 *|unsigned long long v67;  // rdx\n    unsigned long long v68;  // r10\n    unsigned long long v69;  // rax\n    unsigned long long v70;  // r8\n    unsigned long long v71;  // rax\n    unsigned long long v72;  // rdi\n    unsigned long long v73;  // rsi\n    unsigned long long v74;  // rcx\n    unsigned long long v75;  // rax\n    uint128_t v76;  // xmm7\n    uint128_t v77;  // xmm0\n    unsigned long long v78;  // r8\n    char v79;  // r8b\n    unsigned long long v80;  // rdi\n    char v81;  // dil\n    unsigned int v82;  // esi\n    char v83;  // sil\n    unsigned long long v84;  // rcx\n    unsigned long long v85;  // cl\n    unsigned long long v86;  // rcx\n    unsigned long long v87;  // cl\n    unsigned long long v88;  // rcx\n    char v89;  // cl\n    unsigned long long v91;  // rax\n    unsigned long long v93;  // rax\n    unsigned long v94;  // rsi\n    unsigned long long v95;  // rax\n    unsigned long long v96;  // rax\n    unsigned long v97;  // rsi\n    uint128_t v98;  // xmm0\n    unsigned int v99;  // eax\n    char v100[4285569];  // rax\n    unsigned long long v101;  // r14\n    unsigned long long v102;  // rax\n    unsigned long long v103;  // r8\n    char v104;  // r8b\n    unsigned long long v105;  // rdi\n    char v106;  // dil\n    unsigned int v107;  // esi\n    char v108;  // sil\n    unsigned int v109;  // r11d\n    char v110;  // r11b\n    char v111;  // r10b\n    unsigned int v112;  // ecx\n    char v113;  // cl\n    unsigned int v114;  // edx\n    char v115;  // dl\n    unsigned int v116;  // esi\n    char v117;  // sil\n    unsigned long long v118;  // rdi\n    char v119;  // dil\n    unsigned long long v120;  // rdi\n    char v121;  // dil\n    unsigned int v122;  // edi\n    char v123;  // dil\n    unsigned int v124;  // eax\n    char v125;  // al\n    unsigned long long v126;  // rax\n    unsigned int v127;  // ecx\n    char v128;  // cl\n    unsigned long long v129;  // rdi\n    char v130;  // dil\n    unsigned int v131;  // esi\n    char v132;  // sil\n    unsigned int v133;  // edi\n    char v134;  // dil\n    unsigned long long v135;  // rdx\n    char v136;  // dl\n    unsigned int v137;  // edx\n    char v138;  // dl\n    unsigned int v139;  // eax\n    char v140;  // al\n    char v142;  // al\n    unsigned long long v143;  // r8\n    char v144;  // r8b\n    unsigned long long v145;  // rdi\n    char v146;  // dil\n    unsigned int v147;  // esi\n    char v148;  // sil\n    unsigned int v149;  // r11d\n    char v150;  // r11b\n    char v151;  // r10b\n    unsigned long long v152;  // rcx\n    char v153;  // cl\n    unsigned long long v154;  // rdi\n    unsigned long long v155;  // rdi\n    unsigned long long v156;  // rax\n    unsigned long long v157;  // rdi\n    unsigned long long v158;  // rdi\n    unsigned long long v162;  // rdi\n    uint128_t v164;  // xmm7\n    char v166[4285569];  // r8\n    unsigned long long v167;  // rsi\n    char *|unsigned long long v168;  // rax\n    unsigned long long v169;  // rdi\n    unsigned long long v170;  // rbp\n    unsigned long long v171;  // rcx\n    unsigned long long v172;  // rdx\n    unsigned long long v173;  // rcx\n    char v174[2];  // rsi\n    unsigned long long v175;  // rcx\n    char v176;  // al\n    unsigned long long v177;  // rcx\n    unsigned long long v178;  // rdx\n    unsigned long long v179;  // rsi\n    unsigned long long v180;  // rbp\n    unsigned long long v181;  // rbp\n    char v182[2];  // rsi\n    unsigned long long v183;  // rcx\n    unsigned long long v184;  // rdx\n    unsigned long long v186;  // rbp\n    char *v187;  // rsi\n    unsigned long long v188;  // rax\n    unsigned long long v189;  // r11\n    unsigned long long v190;  // rcx\n    unsigned long long v191;  // rcx\n    unsigned long v192;  // rcx\n    unsigned long long v193;  // rbp\n    unsigned int v194;  // edx\n    unsigned long long v195;  // rax\n    char *v196;  // rcx\n    unsigned long long v197;  // rdx\n    unsigned long long v198;  // rdx\n    char v199[2];  // rbp\n    unsigned long long v200;  // r11\n    unsigned int|unsigned long long v201;  // rax\n    unsigned long long v202;  // r13\n    char *v203;  // rsi\n    struct_11 *v204;  // rbx\n    unsigned int|unsigned long v205;  // rdi\n    unsigned long long v206;  // cc_dep1\n    unsigned long long v207;  // rax\n    unsigned int *v208;  // rbp\n    unsigned long long v209;  // r8\n    unsigned long long v210;  // rdx\n    unsigned long long v211;  // rax\n    unsigned long long v212;  // rbp\n    unsigned long long v213;  // rdi\n    char *v214;  // rsi\n    unsigned long long v215;  // rbx\n    unsigned int v216;  // ebp\n    char v217;  // dl\n    unsigned long long v218;  // r9\n    unsigned long long v219;  // rdx\n    unsigned long long v220;  // r8\n    unsigned long long v221;  // rcx\n    char *v222;  // rsi\n    char *v223;  // rdi\n    unsigned long long v224;  // cc_dep1\n    unsigned long long v225;  // cc_dep2\n    unsigned long v226;  // d\n    char *v227;  // rsi\n    unsigned long long v228;  // cc_dep1\n    unsigned long long v229;  // rax\n    char *v230;  // rcx\n    unsigned long long v231;  // rcx\n    unsigned long long v232;  // r8\n    char *v233;  // rsi\n    unsigned long long v234;  // rax\n    unsigned long long v235;  // r10\n    unsigned long long v236;  // r8\n    struct_0 *|struct_11 *|struct_10 *|unsigned long long v237;  // rbx\n    struct_13 *|unsigned long long v238;  // r15\n    unsigned long long v239;  // rdx\n    unsigned long long v240;  // rbp\n    unsigned long long v241;  // rdx\n    unsigned long long v242;  // rbx\n    unsigned long long v243;  // rbp\n    unsigned long long v244;  // r9\n    char *v245;  // rsi\n    unsigned long long v246;  // r15\n    unsigned long long v247;  // rbp\n    unsigned long long v248;  // rax\n    unsigned long long v249;  // rax\n    struct_11 *v250;  // rcx\n    unsigned long long v251;  // r8\n    struct_12 *v252;  // rcx\n    char *v253;  // rsi\n    unsigned long long v254;  // rdi\n    char *|unsigned long long v255;  // rsi\n    char *v256;  // rcx\n    unsigned int v257[4];  // rax\n    unsigned long long v258;  // r8\n    unsigned int|unsigned long v259;  // rax\n    unsigned long long v261;  // r8\n    char v262[4285569];  // r10\n    unsigned long long v263;  // r13\n    unsigned long long v264;  // r11\n    unsigned long long v265;  // rax\n\n    v53 = 0;\n    v55 = v54;\n    v238 = 38;\n    v240 = -18446744069414584322;\n    v26 = 0;\n    v237 = &v44;\n    v101 = &v26;\n    v7 = 0;\n    while (true)\n    {\n        v65 = (char)*(&((char *)&g_416540)[v53]);\n        v56 = (char)*(&((char *)&g_416540)[v53]);\n        if (*(&((char *)&g_416540)[v53]) == 0)\n        {\n            if (v7 == 3 && (unsigned int)-18446744069414584322 > 0)\n            {\n                v240 = -18446744069414584322;\n            }\n            if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x34<64>, Mul(Load(addr=stack_base-1472, size=8, endness=Iend_LE), 0xa<64>), 0xa<64>, Conv(1->64, ((t16 & 0xff<64>) < 0x1<64>)))) || v7 != 3 || (unsigned int)-18446744069414584322 > 0)\n            {\n                while (true)\n                {\n                    v99 = (char)*(&((char *)&g_4165c0)[v53]);\n                    if ((unsigned int)(char)*(&((char *)&g_4165c0)[v53]) != -93)\n                    {\n                        v100 = (unsigned long long)v99 + 1;\n                        if ((unsigned int)v100 <= 112 && *((char *)(v100 + &g_416400)) == 1)\n                        {\n                            v53 = (char)*((char *)(v100 + &g_416480));\n                            if (*((char *)(v100 + &g_416480)) != 0)\n                            {\n                                v237 += 56;\n                                v65 = v101;\n                                v7 = 3;\n                                v30 = v8;\n                                v31 = v9;\n                                v237->field_0 = (int128_t)v29;\n                                v237->field_30 = v34;\n                                v237->field_10 = *((int128_t *)&v31);\n                                v237->field_20 = *((int128_t *)&v33);\n                            }\n                        }\n                    }\n                    if (*((char *)(v100 + &g_416480)) == 0 || (unsigned int)(char)*(&((char *)&g_4165c0)[v53]) == -93 || (unsigned int)v100 > 112 || *((char *)(v100 + &g_416400)) != 1)\n                    {\n                        if (v101 == &v26)\n                        {\n                            break;\n                        }\n                        v101 = &v25;\n                        v53 = *((short *)&v25);\n                        v237 = &v36;\n                    }\n                }\n                if (*((char *)(v100 + &g_416400)) == 1 && *((char *)(v100 + &g_416480)) != 0)\n                {\n                    v101 = v65 + 2;\n                    *((unsigned long *)(v65 + 2)) = v53;\n                    if (v65 + 2 >= stack_base + -1314)\n                    {\n                        break;\n                    }\n                }\n                else if (*((char *)(v100 + &g_416480)) == 0 || (unsigned int)(char)*(&((char *)&g_4165c0)[v53]) == -93 || (unsigned int)v100 > 112 || *((char *)(v100 + &g_416400)) != 1)\n                {\n                    v265 = 1;\n                }\n            }\n        }\n        else\n        {\n            v57 = (unsigned long long)v56 - 4;\n            v58 = (char)*(&((char *)&g_416340)[v65]);\n            v59 = *((long long *)(v237 + (int)(1 - (unsigned int)(char)*(&((char *)&g_416340)[v65])) * 56));\n            v68 = *((long long *)(v237 + (int)(1 - (unsigned int)(char)*(&((char *)&g_416340)[v65])) * 56 + 8));\n            v41 = *((long long *)(v237 + (int)(1 - (unsigned int)(char)*(&((char *)&g_416340)[v65])) * 56 + 48));\n            v263 = *((long long *)(v237 + (int)(1 - (unsigned int)(char)*(&((char *)&g_416340)[v65])) * 56 + 16));\n            *((int128_t *)&v35) = *((int128_t *)(v237 + (int)(1 - (unsigned int)(char)*(&((char *)&g_416340)[v65])) * 56));\n            v264 = *((long long *)(v237 + (int)(1 - (unsigned int)(char)*(&((char *)&g_416340)[v65])) * 56 + 24));\n            *((int128_t *)&v37) = *((int128_t *)(v237 + (int)(1 - (unsigned int)(char)*(&((char *)&g_416340)[v65])) * 56 + 16));\n            v5 = *((long long *)(v237 + (int)(1 - (unsigned int)(char)*(&((char *)&g_416340)[v65])) * 56 + 32));\n            *((int128_t *)&v39) = *((int128_t *)(v237 + (int)(1 - (unsigned int)(char)*(&((char *)&g_416340)[v65])) * 56 + 32));\n            v4 = *((long long *)(v237 + (int)(1 - (unsigned int)(char)*(&((char *)&g_416340)[v65])) * 56 + 40));\n            v6 = *((int *)(v237 + (int)(1 - (unsigned int)(char)*(&((char *)&g_416340)[v65])) * 56 + 48));\n            switch (v57)\n            {\n            case 0:\n                v98 = *((int128_t *)&v44);\n                *((char *)(v55 + 160)) = 1;\n                *((uint128_t *)(v55 + 88)) = v98;\n                v12 = v68;\n                v11 = v264;\n                v10 = v55;\n                v155 = dcgettext(0x0, 0x4149f3, 0x5);\n                v66 = 2;\n            case 3:\n                v12 = v68;\n                v97 = \"date\";\n                v11 = v264;\n                *((long long *)(v55 + 200)) = *((long long *)(v55 + 200)) + 1;\n                *((long long *)(v55 + 168)) = *((long long *)(v55 + 168)) + 1;\n                v10 = v55;\n            case 4:\n                v12 = v68;\n                v97 = \"time\";\n                v11 = v264;\n                *((long long *)(v55 + 200)) = *((long long *)(v55 + 200)) + 1;\n                v10 = v55;\n            case 5:\n                v12 = v68;\n                v97 = \"local_\";\n                v11 = v264;\n                *((long long *)(v55 + 184)) = *((long long *)(v55 + 184)) + 1;\n                v10 = v55;\n            case 6:\n                v12 = v68;\n                v97 = \"zone\";\n                *((long long *)(v55 + 208)) = *((long long *)(v55 + 208)) + 1;\n                v11 = v264;\n                v10 = v55;\n            case 7:\n                v12 = v68;\n                v97 = \"date\";\n                v11 = v264;\n                *((long long *)(v55 + 168)) = *((long long *)(v55 + 168)) + 1;\n                v10 = v55;\n            case 8:\n                v12 = v68;\n                v97 = \"day\";\n                v11 = v264;\n                *((long long *)(v55 + 176)) = *((long long *)(v55 + 176)) + 1;\n                v10 = v55;\n            case 9:\n                v12 = v55;\n                v94 = \"relative\";\n                v11 = v68;\n                v10 = v264;\n            case 10:\n                v12 = v55;\n                v11 = v68;\n                v10 = v264;\n                v154 = dcgettext(0x0, 0x414a26, 0x5);\n                v53 = -18446744069414584413;\n                v66 = 4;\n                v264 = v10;\n                v68 = v11;\n                if (*((char *)(v12 + 217)) != 0)\n                {\n                    v16 = -93;\n                    v15 = v67;\n                    v14 = 4;\n                    v13 = v11;\n                    v12 = v65;\n                    v11 = v10;\n                    v10 = v55;\n                    sub_4055a0();\n                }\n            case 11:\n                v12 = v55;\n                v94 = \"hybrid\";\n                v11 = v68;\n                v10 = v264;\n            case 14:\n                v67 = &v31;\n                v65 = &v24;\n                *((long long *)(v55 + 80)) = 0;\n                *((long long *)(v55 + 88)) = 0;\n                v53 = -18446744069414584413;\n                *((long long *)(v55 + 72)) = (long long)v37;\n                tmp_24 = *((long long *)&v44);\n                *((long long *)(v55 + 96)) = 0;\n                *((unsigned int *)(v55 + 28)) = tmp_24;\n                v66 = 7;\n                break;\n            case 15:\n                v65 = &v22;\n                *((long long *)(v55 + 88)) = 0;\n                *((long long *)(v55 + 96)) = 0;\n                v53 = -18446744069414584413;\n                *((long long *)(v55 + 80)) = (long long)v37;\n                tmp_26 = *((long long *)&v44);\n                *((unsigned long *)(v55 + 72)) = v28;\n                v67 = &v17;\n                *((unsigned int *)(v55 + 28)) = tmp_26;\n                v66 = 7;\n                break;\n            case 16:\n                v53 = -18446744069414584413;\n                *((long long *)(v55 + 88)) = (long long)(&v35)[8];\n                *((unsigned long long *)(v55 + 72)) = v11;\n                v65 = &v20;\n                *((long long *)(v55 + 96)) = (int)v37;\n                tmp_37 = *((long long *)&v44);\n                *((unsigned long *)(v55 + 80)) = v28;\n                v67 = &v3;\n                *((unsigned int *)(v55 + 28)) = tmp_37;\n                v66 = 7;\n                break;\n            case 18:\n                *((long long *)(v55 + 80)) = 0;\n                v67 = &v31;\n                v65 = &v24;\n                *((long long *)(v55 + 88)) = 0;\n                v53 = 20;\n                *((long long *)(v55 + 72)) = (long long)v37;\n                v66 = 8;\n                *((long long *)(v55 + 96)) = 0;\n                *((int *)(v55 + 28)) = 2;\n                break;\n            case 19:\n                *((long long *)(v55 + 88)) = 0;\n                v65 = &v22;\n                *((long long *)(v55 + 96)) = 0;\n                v53 = 20;\n                *((unsigned long *)(v55 + 72)) = v28;\n                v67 = &v17;\n                *((long long *)(v55 + 80)) = (long long)v37;\n                v66 = 8;\n                *((int *)(v55 + 28)) = 2;\n                break;\n            case 20:\n                *((int *)(v55 + 28)) = 2;\n                v53 = 20;\n                *((long long *)(v55 + 88)) = (long long)(&v35)[8];\n                *((unsigned long long *)(v55 + 72)) = v11;\n                v65 = &v20;\n                *((unsigned long *)(v55 + 80)) = v28;\n                v67 = &v3;\n                *((long long *)(v55 + 96)) = (int)v37;\n                v66 = 8;\n                break;\n            case 23:\n                v12 = v68;\n                v11 = v264;\n                *((long long *)(v55 + 208)) = *((long long *)(v55 + 208)) + 1;\n                v10 = v55;\n                v91 = sub_405100();\n                v55 = v10;\n                v264 = v11;\n                v68 = v12;\n                if (v91 != 0)\n                {\n                    v67 = &v31;\n                    v65 = &v24;\n                    v53 = -18446744069414584347;\n                    v66 = 10;\n                    break;\n                }\n            case 24:\n                v67 = &v35;\n                v65 = &v25;\n                v53 = -18446744069414584413;\n                *((unsigned int *)(v55 + 20)) = *((long long *)&v44);\n                v66 = 11;\n                break;\n            case 25:\n                *((int *)(v55 + 20)) = 1;\n                v67 = &v31;\n                v65 = &v24;\n                v53 = -18446744069414584413;\n                *((long long *)(v55 + 192)) = *((long long *)(v55 + 192)) + 1;\n                v66 = 11;\n                break;\n            case 26:\n                v60 = *((long long *)&v44);\n            case 27:\n                *((int *)(v55 + 24)) = 25200;\n                v67 = &v35;\n                v65 = &v25;\n                v53 = -18446744069414584413;\n                v66 = 12;\n                break;\n            case 28:\n                v12 = v68;\n                v11 = v264;\n                *((unsigned int *)(v55 + 24)) = (long long)(&v35)[8];\n            case 29:\n                v12 = v68;\n                v11 = v264;\n                *((int *)(v55 + 24)) = 25200;\n            case 30:\n                v12 = v68;\n                v11 = v264;\n                v10 = v55;\n                v93 = sub_405100();\n                if (v93 != 0)\n                {\n                    v55 = v10;\n                    v156 = *((int *)(v10 + 24)) + v31;\n                    *((unsigned int *)(v10 + 24)) = *((int *)(v10 + 24)) + v31;\n                    v67 = &v27;\n                    v65 = &v23;\n                    v53 = -18446744069414584413;\n                    v66 = 12;\n                    v264 = v11;\n                    v68 = v12;\n                    break;\n                }\n            case 31:\n                v60 = *((int *)&v44) + 3600;\n            case 32:\n                v67 = &v31;\n                v65 = &v24;\n                v53 = -18446744069414584413;\n                *((int *)(v55 + 24)) = (int)(&v35)[8] + 3600;\n                v66 = 12;\n                break;\n            case 33:\n                tmp_5 = *((long long *)&v44);\n                *((long long *)(v55 + 8)) = 0;\n                v67 = &v35;\n                v65 = &v25;\n                v53 = -18446744069414584413;\n                *((unsigned int *)(v55 + 16)) = tmp_5;\n                v66 = 13;\n                break;\n            case 34:\n                *((long long *)(v55 + 8)) = 0;\n                v67 = &v31;\n                v65 = &v24;\n                v53 = -18446744069414584413;\n                *((unsigned int *)(v55 + 16)) = (long long)(&v35)[8];\n                v66 = 13;\n                break;\n            case 35:\n                v102 = (long long)(&v35)[8];\n            case 36:\n                v102 = (long long)v37;\n            case 37:\n                v65 = &v23;\n                v67 = &v27;\n                v53 = -18446744069414584413;\n                *((unsigned long *)(v55 + 56)) = v32;\n                *((unsigned long *)(v55 + 64)) = v45;\n                v66 = 14;\n                break;\n            case 38:\n                v95 = (char)*((char *)(v55 + 217));\n                if (v19 > 3)\n                {\n                    if (v95 != 0)\n                    {\n                        v14 = v55;\n                        v13 = v68;\n                        v12 = v264;\n                        v11 = v19;\n                        v10 = (&v17)[1];\n                        dcgettext(0x0, 0x414f08, 0x5);\n                        sub_404f90();\n                        v55 = v14;\n                        v68 = v13;\n                        v264 = v12;\n                    }\n                    v65 = &v21;\n                    v67 = &v10;\n                    v53 = -18446744069414584413;\n                    *((unsigned long long *)(v55 + 48)) = v19;\n                    *((int128_t *)(v55 + 32)) = *((int128_t *)&v17);\n                    *((unsigned long *)(v55 + 56)) = v32;\n                    *((unsigned long *)(v55 + 64)) = v45;\n                    v66 = 14;\n                }\n                else\n                {\n                    v10 = (&v17)[1];\n                    if (v95 != 0)\n                    {\n                        v13 = v55;\n                        v12 = v68;\n                        v11 = v264;\n                        dcgettext(0x0, 0x414f40, 0x5);\n                        sub_404f90();\n                        v55 = v13;\n                        v68 = v12;\n                        v264 = v11;\n                    }\n                    v164 = *((int128_t *)&v44);\n                    v65 = &v21;\n                    v67 = &v10;\n                    v53 = -18446744069414584413;\n                    *((unsigned long long *)(v55 + 56)) = v10;\n                    *((uint128_t *)(v55 + 32)) = v164;\n                    *((unsigned long *)(v55 + 64)) = v32;\n                    *((unsigned long *)(v55 + 48)) = v46;\n                    v66 = 14;\n                }\n            case 39:\n                *((unsigned long *)(v55 + 64)) = v32;\n                *((long long *)(v55 + 56)) = (long long)(&v35)[8];\n                *((unsigned long *)(v55 + 40)) = 0 - v45;\n            case 40:\n                *((long long *)(v55 + 56)) = *((long long *)&v31);\n                *((long long *)(v55 + 64)) = 0 - (long long)v37;\n                if ((long long)v37 != 0x8000000000000000)\n                {\n                    *((unsigned long *)(v55 + 40)) = 0 - v45;\n                }\n            case 41:\n                v67 = &v31;\n                v65 = &v24;\n                v53 = -18446744069414584413;\n                *((long long *)(v55 + 56)) = (long long)(&v35)[8];\n                *((unsigned long *)(v55 + 64)) = v45;\n                v66 = 14;\n                break;\n            case 42:\n                v77 = *((int128_t *)&v44);\n                v65 = &v22;\n                v67 = &v17;\n                v53 = -18446744069414584413;\n                *((long long *)(v55 + 56)) = *((long long *)&v27);\n                *((uint128_t *)(v55 + 32)) = v77;\n                *((unsigned long *)(v55 + 64)) = v32;\n                *((unsigned long *)(v55 + 48)) = v46;\n                v66 = 14;\n                break;\n            case 43:\n                v67 = &v31;\n                v65 = &v24;\n                v53 = -18446744069414584413;\n                *((long long *)(v55 + 64)) = (long long)v37;\n                *((long long *)(v55 + 56)) = *((long long *)&v44);\n                v66 = 14;\n                break;\n            case 44:\n                v76 = *((int128_t *)&v44);\n                *((unsigned long *)(v55 + 64)) = v32;\n                *((uint128_t *)(v55 + 32)) = v76;\n                *((long long *)(v55 + 56)) = (long long)(&v35)[8];\n            case 46:\n                *((unsigned long *)(v55 + 48)) = v33;\n                v96 = (long long)v37;\n                *((int128_t *)(v55 + 32)) = *((int128_t *)&v31);\n                *((unsigned long long *)(v55 + 56)) = 0 - v96;\n                if (v96 != 0x8000000000000000)\n                {\n                    *((unsigned long *)(v55 + 64)) = 0 - v45;\n                    v67 = &v27;\n                    v65 = &v23;\n                    v53 = -18446744069414584413;\n                    v66 = 15;\n                    break;\n                }\n            case 47:\n                v70 = v43;\n                v14 = *((long long *)(v55 + 144));\n                v10 = (long long)(&v35)[8];\n                v11 = (long long)v37;\n                v71 = *((long long *)(v55 + 136));\n                v15 = *((long long *)(v55 + 128));\n                v12 = (long long)(&v37)[8];\n                v72 = v41;\n                v16 = *((long long *)(v55 + 120));\n                v13 = (long long)v39;\n                v73 = (long long)(&v39)[8];\n                v17 = *((long long *)(v55 + 112));\n                v74 = (unsigned int)*((int *)(v55 + 152));\n                v18 = *((long long *)(v55 + 104));\n                if (*((int *)&v44) >= 0)\n                {\n                    *((unsigned int *)(v55 + 152)) = v74 + v70;\n                    v127 = 0;\n                    tmp_9 = v14 + v72;\n                    v128 = [D] amd64g_calculate_condition(0x0<64>, 0x4<64>, Load(addr=stack_base-1424, size=8, endness=Iend_LE), rdi<8>, cc_ndep<8>);\n                    v129 = 0;\n                    *((long long *)(v55 + 144)) = tmp_9;\n                    v130 = [D] amd64g_calculate_condition(0x0<64>, 0x4<64>, rax<8>, rsi<8>, cc_ndep<8>);\n                    *((unsigned long long *)(v55 + 136)) = v71 + v73;\n                    v131 = 0;\n                    *((int *)&v14) = rdi<8>;\n                    v132 = [D] amd64g_calculate_condition(0x0<64>, 0x4<64>, Load(addr=stack_base-1416, size=8, endness=Iend_LE), Load(addr=stack_base-1432, size=8, endness=Iend_LE), cc_ndep<8>);\n                    *((unsigned long long *)(v55 + 128)) = v15 + v13;\n                    v133 = 0;\n                    v134 = [D] amd64g_calculate_condition(0x0<64>, 0x4<64>, Load(addr=stack_base-1408, size=8, endness=Iend_LE), Load(addr=stack_base-1440, size=8, endness=Iend_LE), cc_ndep<8>);\n                    *((unsigned long long *)(v55 + 120)) = v16 + v12;\n                    v135 = 0;\n                    v136 = [D] amd64g_calculate_condition(0x0<64>, 0x4<64>, Load(addr=stack_base-1400, size=8, endness=Iend_LE), Load(addr=stack_base-1448, size=8, endness=Iend_LE), cc_ndep<8>);\n                    *((unsigned long long *)(v55 + 112)) = v17 + v11;\n                    *((int *)&v11) = rdx<8>;\n                    v137 = 0;\n                    *((unsigned long long *)(v55 + 104)) = v18 + v10;\n                    v138 = [D] amd64g_calculate_condition(0x0<64>, 0x4<64>, Load(addr=stack_base-1392, size=8, endness=Iend_LE), Load(addr=stack_base-1456, size=8, endness=Iend_LE), cc_ndep<8>);\n                    v139 = rcx<4> | (unsigned int)((!(v74 ^ v70) & (v74 ^ v74 + v70)) >> 31 & 1);\n                    v140 = (char)(rcx<4> | (unsigned int)((!(v74 ^ v70) & (v74 ^ v74 + v70)) >> 31 & 1)) | (char)v14;\n                    v142 = (unsigned long long)(unsigned int)(rax<4> | rsi<4> | rdi<4>) | (char)v11;\n                    v126 = (unsigned int)rax<8> | rdx<4>;\n                }\n                else\n                {\n                    *((unsigned int *)(v55 + 152)) = v74 - v70;\n                    v112 = 0;\n                    v113 = ((v14 ^ v72) & (v14 ^ v14 - v72)) >> 63;\n                    *((unsigned long long *)(v55 + 144)) = v14 - v72;\n                    v114 = 0;\n                    v115 = ((v71 ^ v73) & (v71 ^ v71 - v73)) >> 63;\n                    *((unsigned long long *)(v55 + 136)) = v71 - v73;\n                    v116 = 0;\n                    v117 = ((v15 ^ v13) & (v15 ^ v15 - v13)) >> 63;\n                    *((unsigned long long *)(v55 + 128)) = v15 - v13;\n                    v118 = 0;\n                    v119 = ((v16 ^ v12) & (v16 ^ v16 - v12)) >> 63;\n                    *((unsigned long long *)(v55 + 120)) = v16 - v12;\n                    *((int *)&v12) = rdi<8>;\n                    v120 = 0;\n                    v121 = ((v17 ^ v11) & (v17 ^ v17 - v11)) >> 63;\n                    *((unsigned long long *)(v55 + 112)) = v17 - v11;\n                    *((int *)&v11) = rdi<8>;\n                    v122 = 0;\n                    *((unsigned long long *)(v55 + 104)) = v18 - v10;\n                    v123 = ((v18 ^ v10) & (v18 ^ v18 - v10)) >> 63;\n                    v124 = rcx<4> | (unsigned int)(((v74 ^ v70) & (v74 ^ v74 - v70)) >> 31 & 1) | rdx<4> | rsi<4>;\n                    v125 = (char)(rcx<4> | (unsigned int)(((v74 ^ v70) & (v74 ^ v74 - v70)) >> 31 & 1) | rdx<4> | rsi<4>) | (char)v12 | (char)v11;\n                    v126 = (unsigned int)(rax<4> | rdi<4>);\n                }\n                if (v126 == 0)\n                {\n                    *((char *)(v55 + 161)) = 1;\n                    v67 = &v31;\n                    v65 = &v24;\n                    v53 = -18446744069414584413;\n                    v66 = 16;\n                    break;\n                }\n            case 48: case 49:\n                v78 = 0;\n                v79 = (!((unsigned int)(int)(stack_base)[-1128] ^ (unsigned long long)(unsigned int)*((int *)(v55 + 152))) & ((unsigned int)(int)(stack_base)[-1128] ^ (unsigned long long)(unsigned int)((int)(stack_base)[-1128] + *((int *)(v55 + 152))))) >> 31 & 1;\n                *((int *)(v55 + 152)) = (int)(stack_base)[-1128] + *((int *)(v55 + 152));\n                tmp_117 = *((long long *)(v55 + 144));\n                v80 = 0;\n                *((unsigned long *)(v55 + 144)) = *((long long *)(v55 + 144)) + v49;\n                v81 = [D] amd64g_calculate_condition(0x0<64>, 0x4<64>, Load(addr=(r9<8> + 0x88<64>), size=8, endness=Iend_LE), Load(addr=stack_base-1144, size=8, endness=Iend_LE), cc_ndep<8>);\n                *((unsigned long *)(v55 + 136)) = *((long long *)(v55 + 136)) + v48;\n                v82 = 0;\n                v83 = [D] amd64g_calculate_condition(0x0<64>, 0x4<64>, Load(addr=(r9<8> + 0x80<64>), size=8, endness=Iend_LE), Load(addr=stack_base-1152, size=8, endness=Iend_LE), cc_ndep<8>);\n                *((unsigned long *)(v55 + 128)) = *((long long *)(v55 + 128)) + v47;\n                v84 = 0;\n                v85 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x4<64>, Load(addr=(r9<8> + 0x78<64>), size=8, endness=Iend_LE), Load(addr=stack_base-1160, size=8, endness=Iend_LE), cc_ndep<8>);\n                *((unsigned long *)(v55 + 120)) = *((long long *)(v55 + 120)) + v46;\n                *((int *)&v10) = rcx<8>;\n                v86 = 0;\n                v87 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x4<64>, Load(addr=(r9<8> + 0x70<64>), size=8, endness=Iend_LE), Load(addr=stack_base-1168, size=8, endness=Iend_LE), cc_ndep<8>);\n                *((unsigned long *)(v55 + 112)) = *((long long *)(v55 + 112)) + v45;\n                *((int *)&v11) = rcx<8>;\n                v88 = 0;\n                v89 = [D] amd64g_calculate_condition(0x0<64>, 0x4<64>, Load(addr=(r9<8> + 0x68<64>), size=8, endness=Iend_LE), Load(addr=rbx<8>, size=8, endness=Iend_LE), cc_ndep<8>);\n                *((long long *)(v55 + 104)) = *((long long *)(v55 + 104)) + *((long long *)&v44);\n                tmp_259 = [D] amd64g_calculate_condition(0x0<64>, 0x4<64>, t117, Load(addr=stack_base-1136, size=8, endness=Iend_LE), cc_ndep<8>) | (unsigned int)r8<8> | rdi<8>;\n                if ((char)((unsigned int)tmp_259 | rsi<4>) == 0)\n                {\n                    *((char *)(v55 + 161)) = 1;\n                    v67 = &v35;\n                    v65 = &v25;\n                    v53 = -18446744069414584413;\n                    v66 = 16;\n                    break;\n                }\n            case 50:\n                v42 = 0;\n                v59 = (long long)(&v35)[8];\n            case 51:\n                v42 = 0;\n                v59 = (long long)v37;\n            case 52:\n                v67 = &v35;\n                v65 = &v25;\n                v66 = 17;\n                v264 = 0;\n                v53 = -18446744069414584413;\n                v263 = 0;\n                v42 = 0;\n                v68 = 0;\n                v6 = 0;\n                v59 = 1;\n                v4 = 0;\n                v5 = 0;\n                break;\n            case 53:\n                v68 = (long long)(&v35)[8];\n                v67 = &v31;\n                v65 = &v24;\n                v42 = 0;\n                v53 = -18446744069414584413;\n                v66 = 17;\n            case 54:\n                v68 = (long long)v37;\n                v67 = &v31;\n                v65 = &v24;\n                v42 = 0;\n                v53 = -18446744069414584413;\n                v66 = 17;\n            case 55:\n                v67 = &v35;\n                v65 = &v25;\n                v66 = 17;\n                v264 = 0;\n                v53 = -18446744069414584413;\n                v263 = 0;\n                v59 = 0;\n                v42 = 0;\n                v6 = 0;\n                v68 = 1;\n                v4 = 0;\n                v5 = 0;\n                break;\n            case 56:\n                v41 = 0;\n                v35 = 0;\n                v37 = 0;\n                v39 = 0;\n                v263 = *((long long *)&v44) * *((long long *)&((char *)&v35)[8]);\n            case 57:\n                v41 = 0;\n                v35 = 0;\n                v37 = 0;\n                v39 = 0;\n                v263 = *((long long *)&v44) * (long long)v37;\n            case 58:\n                v263 = *((long long *)&v44);\n                v67 = &v35;\n                v65 = &v25;\n                v66 = 17;\n                v42 = 0;\n                v53 = -18446744069414584413;\n            case 59:\n                v264 = (long long)(&v35)[8];\n                v67 = &v31;\n                v65 = &v24;\n                v42 = 0;\n                v53 = -18446744069414584413;\n                v66 = 17;\n            case 60:\n                v264 = (long long)v37;\n                v67 = &v31;\n                v65 = &v24;\n                v42 = 0;\n                v53 = -18446744069414584413;\n                v66 = 17;\n            case 61:\n                v67 = &v35;\n                v65 = &v25;\n                v66 = 17;\n                v263 = 0;\n                v53 = -18446744069414584413;\n                v68 = 0;\n                v59 = 0;\n                v42 = 0;\n                v6 = 0;\n                v264 = 1;\n                v4 = 0;\n                v5 = 0;\n                break;\n            case 62:\n                v42 = 0;\n                v69 = (long long)(&v35)[8];\n            case 63:\n                v42 = 0;\n                v69 = (long long)v37;\n            case 64:\n                v67 = &v35;\n                v65 = &v25;\n                v66 = 17;\n                v264 = 0;\n                v53 = -18446744069414584413;\n                v263 = 0;\n                v68 = 0;\n                v59 = 0;\n                v42 = 0;\n                v6 = 0;\n                v4 = 0;\n                v5 = 1;\n                break;\n            case 65:\n                v42 = 0;\n                v75 = (long long)(&v35)[8];\n            case 66:\n                v42 = 0;\n                v75 = (long long)v37;\n            case 67: case 68:\n                v67 = &v31;\n                v65 = &v24;\n                v42 = 0;\n                v53 = -18446744069414584413;\n                v4 = (long long)(&v35)[8];\n                v6 = (int)v37;\n                v66 = 17;\n            case 69:\n                v67 = &v35;\n                v65 = &v25;\n                v42 = 0;\n                v53 = -18446744069414584413;\n                v66 = 17;\n                v6 = 0;\n                v4 = 1;\n            case 71:\n                v59 = (long long)v37;\n                v67 = &v31;\n                v65 = &v24;\n                v42 = 0;\n                v53 = 60;\n                v66 = 18;\n            case 72:\n                v68 = (long long)v37;\n                v67 = &v31;\n                v65 = &v24;\n                v42 = 0;\n                v53 = 60;\n                v66 = 18;\n            case 73:\n                v41 = 0;\n                v35 = 0;\n                v37 = 0;\n                v39 = 0;\n                v263 = *((long long *)&v44) * (long long)v37;\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x34<64>, Mul(Load(addr=stack_base-1472, size=8, endness=Iend_LE), 0xa<64>), 0xa<64>, Conv(1->64, ((t16 & 0xff<64>) < 0x1<64>)))))\n                {\n                    v67 = &v31;\n                    v65 = &v24;\n                    v53 = 60;\n                    v66 = 18;\n                }\n            case 74:\n                v264 = (long long)v37;\n                v67 = &v31;\n                v65 = &v24;\n                v42 = 0;\n                v53 = 60;\n                v66 = 18;\n            case 75:\n                v67 = &v31;\n                v65 = &v24;\n                v42 = 0;\n                v53 = 60;\n                v5 = (long long)v37;\n                v66 = 18;\n            case 76:\n                v67 = &v31;\n                v65 = &v24;\n                v42 = 0;\n                v53 = 60;\n                v4 = (long long)v37;\n                v66 = 18;\n            case 77:\n                v263 = *((long long *)&v44);\n                v67 = &v35;\n                v65 = &v25;\n                v66 = 19;\n                v42 = 0;\n                v53 = -18446744069414584413;\n            case 81:\n                v59 = v45;\n                v67 = &v35;\n                v65 = &v25;\n                v68 = 0;\n                v53 = -18446744069414584413;\n                v66 = 21;\n                break;\n            case 83:\n                v59 = v45;\n                v67 = &v35;\n                v65 = &v25;\n                v68 = 0;\n                v53 = -18446744069414584412;\n                v66 = 22;\n                break;\n            case 84:\n                v12 = v68;\n                v11 = v264;\n                v2 = v46;\n                v1 = v45;\n                v0 = *((long long *)&v44);\n                v10 = v55;\n                sub_404ca0();\n                v67 = &v35;\n                v65 = &v25;\n                v53 = -18446744069414584413;\n                v66 = 23;\n                v55 = v10;\n                v264 = v11;\n                v68 = v12;\n                break;\n            case 85:\n                v12 = v68;\n                v11 = v264;\n                v2 = (long long)(&v37)[8];\n                v1 = (long long)v37;\n                v0 = (long long)(&v35)[8];\n                v10 = v55;\n                sub_404ca0();\n                v143 = 0;\n                v55 = v10;\n                v144 = (!((unsigned int)(int)(stack_base)[-1128] ^ (unsigned long long)(unsigned int)*((int *)(v10 + 152))) & ((unsigned int)(int)(stack_base)[-1128] ^ (unsigned long long)(unsigned int)((int)(stack_base)[-1128] + *((int *)(v10 + 152))))) >> 31 & 1;\n                *((int *)(v10 + 152)) = (int)(stack_base)[-1128] + *((int *)(v10 + 152));\n                tmp_120 = *((long long *)(v10 + 144));\n                v145 = 0;\n                *((unsigned long *)(v10 + 144)) = *((long long *)(v10 + 144)) + v49;\n                v146 = [D] amd64g_calculate_condition(0x0<64>, 0x4<64>, Load(addr=(Load(addr=stack_base-1456, size=8, endness=Iend_LE) + 0x88<64>), size=8, endness=Iend_LE), Load(addr=stack_base-1144, size=8, endness=Iend_LE), cc_ndep<8>);\n                *((unsigned long *)(v10 + 136)) = *((long long *)(v10 + 136)) + v48;\n                v147 = 0;\n                v148 = [D] amd64g_calculate_condition(0x0<64>, 0x4<64>, Load(addr=(Load(addr=stack_base-1456, size=8, endness=Iend_LE) + 0x80<64>), size=8, endness=Iend_LE), Load(addr=stack_base-1152, size=8, endness=Iend_LE), cc_ndep<8>);\n                *((unsigned long *)(v10 + 128)) = *((long long *)(v10 + 128)) + v47;\n                v149 = 0;\n                v150 = [D] amd64g_calculate_condition(0x0<64>, 0x4<64>, Load(addr=(Load(addr=stack_base-1456, size=8, endness=Iend_LE) + 0x78<64>), size=8, endness=Iend_LE), Load(addr=stack_base-1160, size=8, endness=Iend_LE), cc_ndep<8>);\n                *((unsigned long *)(v10 + 120)) = *((long long *)(v10 + 120)) + v46;\n                v151 = [D] amd64g_calculate_condition(0x0<64>, 0x4<64>, Load(addr=(Load(addr=stack_base-1456, size=8, endness=Iend_LE) + 0x70<64>), size=8, endness=Iend_LE), Load(addr=stack_base-1168, size=8, endness=Iend_LE), cc_ndep<8>);\n                *((unsigned long *)(v10 + 112)) = *((long long *)(v10 + 112)) + v45;\n                v152 = 0;\n                v153 = [D] amd64g_calculate_condition(0x0<64>, 0x4<64>, Load(addr=(Load(addr=stack_base-1456, size=8, endness=Iend_LE) + 0x68<64>), size=8, endness=Iend_LE), Load(addr=rbx<8>, size=8, endness=Iend_LE), cc_ndep<8>);\n                *((long long *)(v10 + 104)) = *((long long *)(v10 + 104)) + *((long long *)&v44);\n                tmp_256 = [D] amd64g_calculate_condition(0x0<64>, 0x4<64>, t120, Load(addr=stack_base-1136, size=8, endness=Iend_LE), cc_ndep<8>) | (unsigned int)r8<8> | rdi<8>;\n                if ((char)((unsigned int)tmp_256 | rsi<4> | r11<4>) == 0)\n                {\n                    *((char *)(v10 + 161)) = 1;\n                    v67 = &v31;\n                    v65 = &v24;\n                    v53 = -18446744069414584413;\n                    v66 = 24;\n                    v264 = v11;\n                    v68 = v12;\n                    break;\n                }\n            case 86:\n                v53 = 43;\n                v59 = -1;\n                tmp_1 = v58 * 7;\n                v65 = v101 - v58 * 2;\n                v64 = v237 - tmp_1 * 8;\n                v66 = 25;\n                v67 = v64;\n                break;\n            case 87:\n                v59 = v45;\n                v67 = &v31;\n                v65 = &v24;\n                v53 = 43;\n                v66 = 25;\n                break;\n            default:\n                v66 = (unsigned int)(char)*(&((char *)&g_4163a0)[v65]) - 28;\n                v53 = (char)*(&((char *)&g_416520)[(long long)(int)((unsigned int)(char)*(&((char *)&g_4163a0)[v65]) - 28)]);\n                tmp_7 = v58 * 56;\n                v65 = v101 - v58 * 2;\n                v62 = v237 - tmp_7;\n                v67 = v62;\n                break;\n            }\n            if (v57 <= 87)\n            {\n                v67 = v57;\n                if (*((long long *)(v67 * 8 + 4282048)) == 4222921 || *((long long *)(v67 * 8 + 4282048)) == 4219739)\n                {\n                    *((unsigned long long *)(v55 + 24)) = v60;\n                    v67 = &v35;\n                    v65 = &v25;\n                    v53 = -18446744069414584413;\n                    v66 = 12;\n                }\n                if (*((long long *)(v67 * 8 + 4282048)) == 4223061 || *((long long *)(v67 * 8 + 4282048)) == 4221372)\n                {\n                    v67 = &v31;\n                    v65 = &v24;\n                    v53 = -18446744069414584413;\n                    v66 = 17;\n                }\n                if (*((long long *)(v67 * 8 + 4282048)) == 4222653 || *((long long *)(v67 * 8 + 4282048)) == 4222398)\n                {\n                    v157 = dcgettext(0x0, v94, 0x5);\n                    v53 = -18446744069414584413;\n                    v66 = 4;\n                    v264 = v10;\n                    v68 = v11;\n                    if (*((char *)(v12 + 217)) != 0)\n                    {\n                        v16 = -93;\n                        v15 = v67;\n                        v14 = 4;\n                        v13 = v68;\n                        v12 = v65;\n                        v11 = v264;\n                        v10 = v55;\n                    }\n                }\n                if (*((long long *)(v67 * 8 + 4282048)) == 4220750 || *((long long *)(v67 * 8 + 4282048)) == 4220676 || *((long long *)(v67 * 8 + 4282048)) == 4221179)\n                {\n                    v6 = 0;\n                    v264 = 0;\n                    v263 = 0;\n                    v59 = 0;\n                    v4 = 0;\n                    v5 = 0;\n                }\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x34<64>, Mul(Load(addr=stack_base-1472, size=8, endness=Iend_LE), 0xa<64>), 0xa<64>, Conv(1->64, ((t16 & 0xff<64>) < 0x1<64>)))) && (*((long long *)(v67 * 8 + 4282048)) == 4220539 || *((long long *)(v67 * 8 + 4282048)) == 4220461))\n                {\n                    v67 = &v31;\n                    v65 = &v24;\n                    v53 = -18446744069414584413;\n                    v66 = 17;\n                }\n                if (*((long long *)(v67 * 8 + 4282048)) == 4220278 || *((long long *)(v67 * 8 + 4282048)) == 4220352 || *((long long *)(v67 * 8 + 4282048)) == 4221059)\n                {\n                    v6 = 0;\n                    v263 = 0;\n                    v68 = 0;\n                    v59 = 0;\n                    v4 = 0;\n                    v5 = 0;\n                }\n                if (*((long long *)(v67 * 8 + 4282048)) == 4220112 || *((long long *)(v67 * 8 + 4282048)) == 4220185)\n                {\n                    v5 = v69;\n                    v67 = &v31;\n                    v65 = &v24;\n                    v53 = -18446744069414584413;\n                    v66 = 17;\n                }\n                if (*((long long *)(v67 * 8 + 4282048)) == 4221767 || *((long long *)(v67 * 8 + 4282048)) == 4222087)\n                {\n                    v103 = 0;\n                    v104 = (!((unsigned int)(int)(stack_base)[-1128] ^ (unsigned long long)(unsigned int)*((int *)(v55 + 152))) & ((unsigned int)(int)(stack_base)[-1128] ^ (unsigned long long)(unsigned int)((int)(stack_base)[-1128] + *((int *)(v55 + 152))))) >> 31 & 1;\n                    *((int *)(v55 + 152)) = (int)(stack_base)[-1128] + *((int *)(v55 + 152));\n                    tmp_113 = *((long long *)(v55 + 144));\n                    v105 = 0;\n                    *((unsigned long *)(v55 + 144)) = *((long long *)(v55 + 144)) + v49;\n                    v106 = [D] amd64g_calculate_condition(0x0<64>, 0x4<64>, Load(addr=(r9<8> + 0x88<64>), size=8, endness=Iend_LE), Load(addr=stack_base-1144, size=8, endness=Iend_LE), cc_ndep<8>);\n                    *((unsigned long *)(v55 + 136)) = *((long long *)(v55 + 136)) + v48;\n                    v107 = 0;\n                    v108 = [D] amd64g_calculate_condition(0x0<64>, 0x4<64>, Load(addr=(r9<8> + 0x80<64>), size=8, endness=Iend_LE), Load(addr=stack_base-1152, size=8, endness=Iend_LE), cc_ndep<8>);\n                    *((unsigned long *)(v55 + 128)) = *((long long *)(v55 + 128)) + v47;\n                    v109 = 0;\n                    v110 = [D] amd64g_calculate_condition(0x0<64>, 0x4<64>, Load(addr=(r9<8> + 0x78<64>), size=8, endness=Iend_LE), Load(addr=stack_base-1160, size=8, endness=Iend_LE), cc_ndep<8>);\n                    *((unsigned long *)(v55 + 120)) = *((long long *)(v55 + 120)) + v46;\n                    v111 = [D] amd64g_calculate_condition(0x0<64>, 0x4<64>, Load(addr=(r9<8> + 0x70<64>), size=8, endness=Iend_LE), Load(addr=stack_base-1168, size=8, endness=Iend_LE), cc_ndep<8>);\n                    *((unsigned long *)(v55 + 112)) = *((long long *)(v55 + 112)) + v45;\n                    v65 = 0;\n                    v65 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x4<64>, Load(addr=(r9<8> + 0x68<64>), size=8, endness=Iend_LE), Load(addr=rbx<8>, size=8, endness=Iend_LE), cc_ndep<8>);\n                    *((long long *)(v55 + 104)) = *((long long *)(v55 + 104)) + *((long long *)&v44);\n                    tmp_249 = [D] amd64g_calculate_condition(0x0<64>, 0x4<64>, t113, Load(addr=stack_base-1136, size=8, endness=Iend_LE), cc_ndep<8>) | (unsigned int)r8<8> | rdi<8>;\n                    if ((char)((unsigned int)tmp_249 | rsi<4> | r11<4>) == 0 && rcx<8> == 0 && v111 == 0)\n                    {\n                        *((char *)(v55 + 161)) = 1;\n                        v10 = v55;\n                        v162 = dcgettext(0x0, 0x414a1d, 0x5);\n                        v53 = -18446744069414584413;\n                        v66 = 12;\n                        v264 = v11;\n                        v68 = v12;\n                        if (*((char *)(v10 + 217)) != 0)\n                        {\n                            v16 = -93;\n                            v15 = v67;\n                            v14 = 12;\n                            v13 = v68;\n                            *((int *)&v12) = rcx<8>;\n                        }\n                    }\n                }\n                if (*((long long *)(v67 * 8 + 4282048)) == 4221024 || *((long long *)(v67 * 8 + 4282048)) == 4222683 || *((long long *)(v67 * 8 + 4282048)) == 4220957 || *((long long *)(v67 * 8 + 4282048)) == 4222148 || *((long long *)(v67 * 8 + 4282048)) == 4222110 || *((long long *)(v67 * 8 + 4282048)) == 4222721)\n                {\n                    v158 = dcgettext(0x0, v97, 0x5);\n                    v66 = 4;\n                }\n                if (*((long long *)(v67 * 8 + 4282048)) == 4222759 || *((long long *)(v67 * 8 + 4282048)) == 4224047)\n                {\n                    *((unsigned long long *)(v55 + 8)) = v102;\n                    tmp_9 = *((long long *)&v44);\n                    v67 = &v31;\n                    v65 = &v24;\n                    *((char *)(v55 + 224)) = 1;\n                    v53 = -18446744069414584413;\n                    *((unsigned int *)(v55 + 16)) = tmp_9;\n                    v66 = 13;\n                }\n                if (*((long long *)(v67 * 8 + 4282048)) == 4221487 || *((long long *)(v67 * 8 + 4282048)) == 4219655)\n                {\n                    v4 = v75;\n                    v67 = &v31;\n                    v65 = &v24;\n                    v53 = -18446744069414584413;\n                    v66 = 17;\n                }\n                if (*((long long *)(v67 * 8 + 4282048)) == 4221218 || *((long long *)(v67 * 8 + 4282048)) == 4223061 || *((long long *)(v67 * 8 + 4282048)) == 4221372)\n                {\n                    v6 = 0;\n                    v264 = 0;\n                    v263 = 0;\n                    v68 = 0;\n                    v4 = 0;\n                    v5 = 0;\n                }\n                if ((*((long long *)(v67 * 8 + 4282048)) == 4223562 || v45 != 0x8000000000000000) && (*((long long *)(v67 * 8 + 4282048)) == 4223840 || *((long long *)(v67 * 8 + 4282048)) == 4223562 || *((long long *)(v67 * 8 + 4282048)) == 4223764) && (*((long long *)(v67 * 8 + 4282048)) == 4223840 || *((long long *)(v67 * 8 + 4282048)) == 4223562 || (long long)v37 != 0x8000000000000000))\n                {\n                    v65 = &v23;\n                    v67 = &v27;\n                    v53 = -18446744069414584413;\n                    *((unsigned long *)(v55 + 48)) = v46;\n                    v66 = 14;\n                }\n                if ((*((long long *)(v67 * 8 + 4282048)) == 4220388 || *((long long *)(v67 * 8 + 4282048)) == 4221507 || !((char)[D] amd64g_calculate_condition(0x0<64>, 0x34<64>, Mul(Load(addr=stack_base-1472, size=8, endness=Iend_LE), 0xa<64>), 0xa<64>, Conv(1->64, ((t16 & 0xff<64>) < 0x1<64>))))) && (*((long long *)(v67 * 8 + 4282048)) == 4220539 || *((long long *)(v67 * 8 + 4282048)) == 4220388 || *((long long *)(v67 * 8 + 4282048)) == 4220461 || *((long long *)(v67 * 8 + 4282048)) == 4221098 || *((long long *)(v67 * 8 + 4282048)) == 4221507))\n                {\n                    v6 = 0;\n                    v264 = 0;\n                    v68 = 0;\n                    v59 = 0;\n                    v4 = 0;\n                    v5 = 0;\n                }\n                if (*((long long *)(v67 * 8 + 4282048)) == 4221589 || *((long long *)(v67 * 8 + 4282048)) == 4220112 || *((long long *)(v67 * 8 + 4282048)) == 4220185)\n                {\n                    v264 = 0;\n                    v263 = 0;\n                    v68 = 0;\n                    v59 = 0;\n                    v6 = 0;\n                    v4 = 0;\n                }\n                if (*((long long *)(v67 * 8 + 4282048)) == 4221487 || *((long long *)(v67 * 8 + 4282048)) == 4221545 || *((long long *)(v67 * 8 + 4282048)) == 4219655)\n                {\n                    v6 = 0;\n                }\n                if (*((long long *)(v67 * 8 + 4282048)) == 4221487 || *((long long *)(v67 * 8 + 4282048)) == 4221292 || *((long long *)(v67 * 8 + 4282048)) == 4219497 || *((long long *)(v67 * 8 + 4282048)) == 4221545 || *((long long *)(v67 * 8 + 4282048)) == 4219655)\n                {\n                    v264 = 0;\n                    v263 = 0;\n                    v68 = 0;\n                    v59 = 0;\n                    v5 = 0;\n                }\n            }\n        }\n        if (v57 <= 87 && *((long long *)(v67 * 8 + 4282048)) == 4220786 && *(&((char *)&g_416540)[v53]) != 0 || v57 <= 87 && *(&((char *)&g_416540)[v53]) != 0 && (*((long long *)(v67 * 8 + 4282048)) == 4221024 || *((long long *)(v67 * 8 + 4282048)) == 4222683 || *((long long *)(v67 * 8 + 4282048)) == 4220957 || *((long long *)(v67 * 8 + 4282048)) == 4222148 || *((long long *)(v67 * 8 + 4282048)) == 4222110 || *((long long *)(v67 * 8 + 4282048)) == 4222721))\n        {\n            v55 = v10;\n            v264 = v11;\n            v68 = v12;\n            if (*((char *)(v10 + 217)) != 0)\n            {\n                v16 = -93;\n                v15 = v67;\n                v14 = v66;\n                v13 = v68;\n                v12 = v65;\n                sub_4055a0();\n            }\n        }\n        if (...)\n        {\n            v265 = 1;\n        }\n        if (v57 <= 87 && *((char *)(v12 + 217)) != 0 && *(&((char *)&g_416540)[v53]) != 0 && (*((long long *)(v67 * 8 + 4282048)) == 4222653 || *((long long *)(v67 * 8 + 4282048)) == 4222398) || (char)((unsigned int)tmp_249 | rsi<4> | r11<4>) == 0 && v57 <= 87 && rcx<8> == 0 && v111 == 0 && *((char *)(v10 + 217)) != 0 && *(&((char *)&g_416540)[v53]) != 0 && (*((long long *)(v67 * 8 + 4282048)) == 4221767 || *((long long *)(v67 * 8 + 4282048)) == 4222087))\n        {\n            sub_405280();\n        }\n        if (v57 <= 87 && *((char *)(v12 + 217)) != 0 && *(&((char *)&g_416540)[v53]) != 0 && (*((long long *)(v67 * 8 + 4282048)) == 4222653 || *((long long *)(v67 * 8 + 4282048)) == 4222398) || (char)((unsigned int)tmp_249 | rsi<4> | r11<4>) == 0 && v57 <= 87 && rcx<8> == 0 && v111 == 0 && *((char *)(v10 + 217)) != 0 && *(&((char *)&g_416540)[v53]) != 0 && (*((long long *)(v67 * 8 + 4282048)) == 4221767 || *((long long *)(v67 * 8 + 4282048)) == 4222087) || *((char *)(v10 + 217)) != 0 && (v57 <= 87 && *((long long *)(v67 * 8 + 4282048)) == 4220786 && *(&((char *)&g_416540)[v53]) != 0 || v57 <= 87 && *(&((char *)&g_416540)[v53]) != 0 && (*((long long *)(v67 * 8 + 4282048)) == 4221024 || *((long long *)(v67 * 8 + 4282048)) == 4222683 || *((long long *)(v67 * 8 + 4282048)) == 4220957 || *((long long *)(v67 * 8 + 4282048)) == 4222148 || *((long long *)(v67 * 8 + 4282048)) == 4222110 || *((long long *)(v67 * 8 + 4282048)) == 4222721)) || v57 <= 87 && *((long long *)(v67 * 8 + 4282048)) == 4222523 && *((char *)(v12 + 217)) != 0 && *(&((char *)&g_416540)[v53]) != 0)\n        {\n            v55 = v10;\n            v264 = v11;\n            v65 = v12;\n            v68 = v13;\n            v66 = v14;\n            v67 = v15;\n            v53 = v16;\n        }\n        if (...)\n        {\n            v35 = v59;\n            v237 = v67 + 56;\n            v36 = v68;\n            v39 = v5;\n            v37 = v263;\n            v38 = v264;\n            v40 = v4;\n            v41 = v6;\n            *((int128_t *)(v67 + 56)) = *((int128_t *)&(&v36)[-1]);\n            *((unsigned long long *)(v67 + 104)) = v41;\n            *((int128_t *)(v67 + 72)) = *((int128_t *)&v37);\n            *((int128_t *)(v67 + 88)) = *((int128_t *)&v39);\n            v166 = v53 + (unsigned short)*((short *)v65);\n            v167 = (unsigned short)*((short *)v65);\n            if ((unsigned int)v166 <= 112 && v167 == (char)*((char *)(v166 + &g_416400)))\n            {\n                v53 = (char)*((char *)(v166 + &g_416480));\n            }\n            if ((unsigned int)v166 > 112 || v167 != (char)*((char *)(v166 + &g_416400)))\n            {\n                v53 = *(&((char *)&g_416500)[v66]);\n            }\n        }\n        if (...)\n        {\n            if ((unsigned int)v53 == 12)\n            {\n                break;\n            }\n            v238 = (char)*(&((char *)&g_4165c0)[v53]);\n            if ((unsigned int)(char)*(&((char *)&g_4165c0)[v53]) != -93)\n            {\n                break;\n            }\n        }\n    }\n    if (true)\n    {\n        v265 = 2;\n    }\n    else if (v65 + 2 < stack_base + -1314)\n    {\n        v265 = 0;\n    }\n    else if (...)\n    {\n        return v265;\n    }\n    if ((unsigned int)-18446744069414584322 == -2)\n    {\n        v168 = *((long long *)v55);\n        v169 = 1;\n        v170 = (char)*((char *)*((long long *)v55));\n        v171 = (char)*((char *)*((long long *)v55));\n        while (true)\n        {\n            v172 = v171;\n            if (v171 <= 32)\n            {\n                v173 = 1 << (v171 & 63);\n                if ((0x100003e00 & v173) != 0)\n                {\n                    v174 = v168 + 1;\n                    do\n                    {\n                        *((char *[2])v55) = v174;\n                        v170 = v174[0];\n                        v168 = v174;\n                        v172 = v174[0];\n                        v174 = &v174[1];\n                    }\n                    while (v174[0] <= 32 && (0x100003e00 & 1 << (unsigned long long)((char)v172 & 63)) != 0);\n                    if (true)\n                    {\n                        v175 = (unsigned int)v172 - 43 & -3;\n                    }\n                }\n                if ((unsigned int)(v170 - 48) > 9 && ((0x100003e00 & v173) == 0 || (unsigned int)(v170 - 48) > 9))\n                {\n                    v177 = v170 - 65;\n                }\n            }\n            if (v171 > 32 || (unsigned int)(v170 - 48) > 9 && (0x100003e00 & v173) != 0)\n            {\n                v175 = (unsigned int)v172 - 43 & -3;\n            }\n            if ((unsigned int)(v170 - 48) > 9 && (v171 > 32 || (0x100003e00 & v173) != 0))\n            {\n                if (v175 != 0)\n                {\n                    v177 = v170 - 65;\n                }\n                else\n                {\n                    v176 = v172 == 45;\n                }\n            }\n            if ((unsigned int)(v170 - 48) <= 9 && v171 > 32)\n            {\n                v176 = v172 == 45;\n            }\n            if (v171 <= 32 || v175 != 0)\n            {\n                if ((v171 <= 32 || (unsigned int)(v170 - 48) <= 9) && ((unsigned int)(v170 - 48) <= 9 || v171 > 32) && ((0x100003e00 & v173) == 0 || v171 > 32 || (unsigned int)(v170 - 48) > 9))\n                {\n                    v168 = *((long long *)v55);\n                    v179 = 0;\n                }\n                if ((288230371923853311 & 1 << (v177 & 63)) != 0 && ((unsigned int)(v170 - 65) <= 57 || v171 <= 32) && ((unsigned int)(v170 - 65) <= 57 || (unsigned int)(v170 - 65) <= 57) && ((unsigned int)(v170 - 65) <= 57 || (unsigned int)(v170 - 48) > 9) && (v171 <= 32 || (unsigned int)(v170 - 48) > 9) && ((unsigned int)(v170 - 65) <= 57 || v175 != 0) && ((0x100003e00 & v173) == 0 || (unsigned int)(v170 - 48) > 9) && ((unsigned int)(v170 - 48) > 9 || v175 != 0) && ((unsigned int)(v170 - 65) <= 57 || v171 > 32 || (0x100003e00 & v173) != 0) && ((unsigned int)(v170 - 48) > 9 || v171 > 32 || (0x100003e00 & v173) != 0))\n                {\n                    v187 = &v19;\n                    v188 = *((long long *)v55) + 1;\n                    while (true)\n                    {\n                        if (v187 < stack_base + -1365)\n                        {\n                            *((unsigned long long *)&v19) = v172;\n                            v187 = &v19;\n                        }\n                        *((unsigned long long *)v55) = v188;\n                        v172 = (char)*((char *)v188);\n                        v191 = (unsigned int)(char)*((char *)v188) - 65;\n                        if (v172 != 46 && ((288230371923853311 & 1 << (v191 & 63)) == 0 || (unsigned int)(char)*((char *)v188) - 65 > 57))\n                        {\n                            break;\n                        }\n                        v188 += 1;\n                    }\n                    *(v187) = 0;\n                    v195 = (char)v19;\n                    v196 = &v19;\n                    if ((char)v19 != 0)\n                    {\n                        do\n                        {\n                            v196 = &v19;\n                            v19 = ((unsigned int)(v195 - 97) < 26? (unsigned int)v195 - 32 : (unsigned int)rax<8>);\n                            v195 = (char)*(&((char *)&v19)[1]);\n                        }\n                        while ((char)v195 != 0);\n                    }\n                    v5 = v237;\n                    v203 = \"AM\";\n                    v204 = &g_4162e0;\n                    v4 = v53;\n                    while (true)\n                    {\n                        v207 = strcmp(&v19, v203);\n                        if (v207 != 0)\n                        {\n                            v204 = &v204[1];\n                            v203 = v204->field_0;\n                            v208 = &v19;\n                            do\n                            {\n                                tmp_14 = (unsigned int)v19;\n                                v208 = &v19;\n                            }\n                            while (((unsigned int)(tmp_14 - 16843009) & !((unsigned int)tmp_14) & 2155905152) == 0);\n                            tmp_62 = v208;\n                            v210 = (char *)v208 + 2;\n                            v211 = 1;\n                            v212 = -3 + (((unsigned int)(tmp_14 - 16843009) & !((unsigned int)tmp_14) & 2155905152 & 32896) == 0? (unsigned int *)((char *)v208 + 2) : v208) + -1 * (((unsigned int)((((unsigned int)(tmp_14 - 16843009) & !((unsigned int)tmp_14) & 2155905152 & 32896) == 0? (unsigned int)((unsigned long long)((unsigned int)(tmp_14 - 16843009) & !((unsigned int)tmp_14) & 2155905152) >> 16) : (unsigned int)(tmp_14 - 16843009) & !((unsigned int)tmp_14) & 2155905152) + (((unsigned int)(tmp_14 - 16843009) & !((unsigned int)tmp_14) & 2155905152 & 32896) == 0? (unsigned int)((unsigned long long)((unsigned int)(tmp_14 - 16843009) & !((unsigned int)tmp_14) & 2155905152) >> 16) : (unsigned int)(tmp_14 - 16843009) & !((unsigned int)tmp_14) & 2155905152)) <= (unsigned long long)(unsigned int)(((unsigned int)(tmp_14 - 16843009) & !((unsigned int)tmp_14) & 2155905152 & 32896) == 0? (unsigned int)((unsigned long long)((unsigned int)(tmp_14 - 16843009) & !((unsigned int)tmp_14) & 2155905152) >> 16) : (unsigned int)(tmp_14 - 16843009) & !((unsigned int)tmp_14) & 2155905152)? 1 : 0) & 1) + -0x1 * &v19;\n                            if (-3 + (((unsigned int)(tmp_14 - 16843009) & !((unsigned int)tmp_14) & 2155905152 & 32896) == 0? v210 : tmp_62) + -1 * (((unsigned int)((((unsigned int)(tmp_14 - 16843009) & !((unsigned int)tmp_14) & 2155905152 & 32896) == 0? (unsigned int)((unsigned long long)((unsigned int)(tmp_14 - 16843009) & !((unsigned int)tmp_14) & 2155905152) >> 16) : (unsigned int)(tmp_14 - 16843009) & !((unsigned int)tmp_14) & 2155905152) + (((unsigned int)(tmp_14 - 16843009) & !((unsigned int)tmp_14) & 2155905152 & 32896) == 0? (unsigned int)((unsigned long long)((unsigned int)(tmp_14 - 16843009) & !((unsigned int)tmp_14) & 2155905152) >> 16) : (unsigned int)(tmp_14 - 16843009) & !((unsigned int)tmp_14) & 2155905152)) <= (unsigned long long)(unsigned int)(((unsigned int)(tmp_14 - 16843009) & !((unsigned int)tmp_14) & 2155905152 & 32896) == 0? (unsigned int)((unsigned long long)((unsigned int)(tmp_14 - 16843009) & !((unsigned int)tmp_14) & 2155905152) >> 16) : (unsigned int)(tmp_14 - 16843009) & !((unsigned int)tmp_14) & 2155905152)? 1 : 0) & 1) + -0x1 * &v19 != 3)\n                            {\n                                v211 = 0;\n                                if (v10 == 4)\n                                {\n                                    v211 = 0;\n                                    v211 = (char)(*(&((char *)&v19)[3]) == 46);\n                                }\n                            }\n                            v5 = v5;\n                            v214 = \"JANUARY\";\n                            v10 = v212;\n                            v215 = &g_416140;\n                            v216 = v211;\n                            v4 = v4;\n                            v6 = v55;\n                            while (true)\n                            {\n                                if (v216 != 0)\n                                {\n                                    v217 = strncmp(&v19, v214, 0x3) == 0;\n                                }\n                                else\n                                {\n                                    v217 = strcmp(&v19, v214) == 0;\n                                }\n                                if (v217 == 0)\n                                {\n                                    v215 += 16;\n                                    v214 = *((long long *)v215);\n                                    if (*((long long *)v215) == 0)\n                                    {\n                                        v237 = v5;\n                                        v243 = v10;\n                                        v5 = v217;\n                                        v11 = v4;\n                                        v4 = v6;\n                                        v257 = sub_4051c0();\n                                        v218 = v4;\n                                        v219 = v5;\n                                        v220 = (int)v11;\n                                        if (v257 == 0)\n                                        {\n                                            v221 = 4;\n                                            v222 = &v19;\n                                            v223 = \"DST\";\n                                            while (v221 != 0)\n                                            {\n                                                v221 -= 1;\n                                                v224 = (char)v19;\n                                                v225 = *(v223);\n                                                v223 = &v223[v226];\n                                                v222 = &v222[v226];\n                                                break;\n                                            }\n                                            v227 = \"YEAR\";\n                                            v228 = (v224 > v225) - 0 - (v224 < v225);\n                                            if ((char)v228 == 0)\n                                            {\n                                                v29 = 0;\n                                                v240 = 259;\n                                            }\n                                            else\n                                            {\n                                                v5 = v237;\n                                                v215 = &g_416080;\n                                                v4 = v220;\n                                                *((unsigned long long *)&v10) = v219;\n                                                v6 = v218;\n                                                while (true)\n                                                {\n                                                    v229 = strcmp(&v19, v227);\n                                                    if (v229 == 0)\n                                                    {\n                                                        break;\n                                                    }\n                                                    v215 += 16;\n                                                    v227 = *((long long *)v215);\n                                                    v230 = &v51;\n                                                    v258 = v4;\n                                                    v242 = v5;\n                                                    v241 = v10;\n                                                    v244 = v6;\n                                                    if (v51 == 83)\n                                                    {\n                                                        *((unsigned int *)&v4) = v238;\n                                                        v233 = \"YEAR\";\n                                                        v238 = v5;\n                                                        v5 = v243;\n                                                        v242 = &g_416080;\n                                                        v51 = 0;\n                                                        while (true)\n                                                        {\n                                                            v11 = v244;\n                                                            v10 = v230;\n                                                            v6 = v241;\n                                                            v234 = strcmp(&v19, v233);\n                                                            v241 = (char)v6;\n                                                            v230 = v10;\n                                                            v244 = v11;\n                                                            if (v234 != 0)\n                                                            {\n                                                                v242 += 16;\n                                                                v233 = *((long long *)v242);\n                                                                v243 = v5;\n                                                                v238 = (int)v4;\n                                                                *(v10) = 83;\n                                                            }\n                                                            else\n                                                            {\n                                                                v235 = v242;\n                                                                v236 = v243;\n                                                                v237 = v238;\n                                                                v238 = (unsigned int)v4;\n                                                                v239 = *((int *)(v235 + 12));\n                                                                v240 = (unsigned int)*((int *)(v235 + 8));\n                                                            }\n                                                        }\n                                                        if (v234 == 0)\n                                                        {\n                                                            v29 = v239;\n                                                        }\n                                                        else if (*((long long *)v242) == 0 && v234 != 0)\n                                                        {\n                                                            v4 = v238;\n                                                            v245 = \"TOMORROW\";\n                                                            v246 = v242;\n                                                            v5 = v243;\n                                                            v237 = &g_415f20;\n                                                            v247 = v258;\n                                                        }\n                                                    }\n                                                    v4 = v238;\n                                                    v245 = \"TOMORROW\";\n                                                    v246 = v242;\n                                                    v5 = v243;\n                                                    v237 = &g_415f20;\n                                                    v247 = v258;\n                                                    while (true)\n                                                    {\n                                                        v10 = v244;\n                                                        v6 = v241;\n                                                        v248 = strcmp(&v19, v245);\n                                                        v241 = (char)v6;\n                                                        v244 = v10;\n                                                        if (v248 != 0)\n                                                        {\n                                                            v237 = &v237[1];\n                                                            v245 = v237->field_0;\n                                                            v249 = (char)v19;\n                                                            v238 = (unsigned int)v4;\n                                                            if (v5 == 1)\n                                                            {\n                                                                v252 = &g_415a40;\n                                                                if (v249 != 65)\n                                                                {\n                                                                    while (true)\n                                                                    {\n                                                                        v253 = v252->field_10;\n                                                                        v254 = &v252->field_10;\n                                                                        if (v252->field_10 == 0)\n                                                                        {\n                                                                            break;\n                                                                        }\n                                                                        if (*(v253) != v249)\n                                                                        {\n                                                                            v252 = v254;\n                                                                        }\n                                                                        else\n                                                                        {\n                                                                            v239 = (int)v252->field_1c;\n                                                                            v240 = v252->field_18;\n                                                                        }\n                                                                    }\n                                                                    if (*(v253) == v249 && v252->field_10 != 0)\n                                                                    {\n                                                                        v29 = v239;\n                                                                    }\n                                                                    else\n                                                                    {\n                                                                        v255 = &v19;\n                                                                        v256 = &v19;\n                                                                    }\n                                                                }\n                                                                else\n                                                                {\n                                                                    v29 = -3600;\n                                                                    v240 = 273;\n                                                                }\n                                                            }\n                                                            if (v249 != 65 || v5 != 1)\n                                                            {\n                                                                v255 = &v19;\n                                                                v256 = &v19;\n                                                                if (v249 != 0)\n                                                                {\n                                                                    do\n                                                                    {\n                                                                        if (v249 != 46)\n                                                                        {\n                                                                            v256 = &v19;\n                                                                        }\n                                                                        else\n                                                                        {\n                                                                            v241 = 1;\n                                                                        }\n                                                                        v255 = &v19;\n                                                                        v249 = (char)*(&((char *)&v19)[1]);\n                                                                        tmp_11 = *(&((char *)&v19)[1]);\n                                                                        *(v256) = *(&((char *)&v19)[1]);\n                                                                    }\n                                                                    while (tmp_11 != 0);\n                                                                    if (v241 != 0)\n                                                                    {\n                                                                        v5 = v258;\n                                                                        v4 = v10;\n                                                                        v257 = sub_4051c0();\n                                                                        v244 = v4;\n                                                                        v258 = (int)v5;\n                                                                        if (v257 != 0)\n                                                                        {\n                                                                            break;\n                                                                        }\n                                                                    }\n                                                                }\n                                                                if (*((char *)(v244 + 217)) == 0)\n                                                                {\n                                                                    break;\n                                                                }\n                                                                v5 = v244;\n                                                                v4 = v258;\n                                                                dcgettext(0x0, 0x4149d9, 0x5);\n                                                                sub_404f90();\n                                                                v259 = 2;\n                                                                v261 = (int)v4;\n                                                            }\n                                                        }\n                                                        else\n                                                        {\n                                                            v250 = v237;\n                                                            v251 = v247;\n                                                            v237 = v246;\n                                                            v238 = (unsigned int)v4;\n                                                            v239 = (int)v250->field_c;\n                                                            v240 = v250->field_8;\n                                                        }\n                                                    }\n                                                    if (v237->field_0 == 0 && v249 == 65 && v5 == 1 && v248 != 0)\n                                                    {\n                                                        v259 = (char)*(&((char *)&g_416640)[v240]);\n                                                    }\n                                                    else if (v237->field_0 == 0 && v248 != 0 && v241 != 0 && v249 != 0 && (v249 != 65 || v5 != 1))\n                                                    {\n                                                        v239 = (int)v257[1 + 1];\n                                                        v240 = v257[1];\n                                                    }\n                                                    else if (v237->field_0 == 0 && v248 != 0 && *((char *)(v244 + 217)) != 0 && (v257 == 0 || v241 == 0 || v249 == 0) && (v249 != 65 || v5 != 1))\n                                                    {\n                                                        v238 += v259;\n                                                    }\n                                                    else if (v248 == 0 || v237->field_0 == 0 && v5 == 1 && v249 != 65)\n                                                    {\n                                                        v29 = v239;\n                                                    }\n                                                    else if (v237->field_0 == 0 && v248 != 0 && (v257 == 0 || v241 == 0 || v249 == 0) && (v249 != 65 || v5 != 1))\n                                                    {\n                                                        v259 = 2;\n                                                    }\n                                                }\n                                                if (*((long long *)v215) == 0 && v229 != 0)\n                                                {\n                                                    v29 = v239;\n                                                }\n                                                else if (true)\n                                                {\n                                                    v231 = v215;\n                                                    v232 = (int)v4;\n                                                    v237 = v5;\n                                                    v239 = *((int *)(v231 + 12));\n                                                    v240 = (unsigned int)*((int *)(v231 + 8));\n                                                }\n                                                else if (*((long long *)v215) == 0 && v229 != 0)\n                                                {\n                                                    v259 = 2;\n                                                }\n                                                else if (*((long long *)v215) == 0 && v229 != 0)\n                                                {\n                                                    v239 = (int)v257[1 + 1];\n                                                    v240 = v257[1];\n                                                }\n                                                else if (*((long long *)v215) == 0 && v229 != 0)\n                                                {\n                                                    v238 += v259;\n                                                }\n                                                else if (*((long long *)v215) == 0 && v229 != 0)\n                                                {\n                                                    v259 = (char)*(&((char *)&g_416640)[v240]);\n                                                }\n                                            }\n                                        }\n                                        if (v257 != 0 || (char)v228 != 0)\n                                        {\n                                            v239 = (int)v257[1 + 1];\n                                            v240 = v257[1];\n                                        }\n                                    }\n                                }\n                                if (v217 != 0 || *((long long *)v215) == 0 && v257 == 0 && (char)v228 != 0)\n                                {\n                                    v231 = v215;\n                                    v232 = (int)v4;\n                                    v237 = v5;\n                                    v239 = *((int *)(v231 + 12));\n                                    v240 = (unsigned int)*((int *)(v231 + 8));\n                                }\n                            }\n                            if (*((long long *)v215) == 0 && v257 == 0 && v217 == 0)\n                            {\n                                v259 = (char)*(&((char *)&g_416640)[v240]);\n                            }\n                            else if (*((long long *)v215) == 0 && v257 == 0 && v217 == 0 && (char)v228 != 0)\n                            {\n                                v238 += v259;\n                            }\n                            else if (v217 != 0 || *((long long *)v215) == 0 && v257 != 0 || *((long long *)v215) == 0 && (char)v228 != 0)\n                            {\n                                v29 = v239;\n                            }\n                            else if (*((long long *)v215) == 0 && v257 == 0 && v217 == 0 && (char)v228 != 0)\n                            {\n                                v259 = 2;\n                            }\n                        }\n                        else\n                        {\n                            tmp_5 = v204;\n                            v209 = (int)v4;\n                            v237 = v5;\n                            v239 = *((int *)(tmp_5 + 12));\n                            v240 = (unsigned int)*((int *)(tmp_5 + 8));\n                        }\n                        v29 = v239;\n                    }\n                    if (v204->field_0 == 0 && v207 != 0)\n                    {\n                        v259 = 2;\n                    }\n                    else if (v204->field_0 == 0 && v207 != 0)\n                    {\n                        v238 += v259;\n                    }\n                    else if (v204->field_0 == 0 && v207 != 0)\n                    {\n                        v259 = (char)*(&((char *)&g_416640)[v240]);\n                    }\n                }\n                if (((288230371923853311 & 1 << (v177 & 63)) == 0 || (unsigned int)(v170 - 65) > 57) && ((288230371923853311 & 1 << (v177 & 63)) == 0 || v175 != 0) && (v171 <= 32 || (unsigned int)(v170 - 48) > 9) && ((unsigned int)(v170 - 65) <= 57 || v175 != 0) && ((0x100003e00 & v173) == 0 || (unsigned int)(v170 - 48) > 9) && ((unsigned int)(v170 - 48) > 9 || v175 != 0) && ((288230371923853311 & 1 << (v177 & 63)) == 0 || v171 > 32 || (0x100003e00 & v173) != 0) && ((unsigned int)(v170 - 65) <= 57 || v171 > 32 || (0x100003e00 & v173) != 0) && ((unsigned int)(v170 - 48) > 9 || v171 > 32 || (0x100003e00 & v173) != 0) && v172 == 40)\n                {\n                    v182 = *((long long *)v55);\n                    v183 = 0;\n                    while (true)\n                    {\n                        v168 = &v182[1];\n                        *((char *[2])v55) = &v182[1];\n                        v184 = v182[0];\n                        if (v182[0] == 0)\n                        {\n                            break;\n                        }\n                        if (v184 != 40)\n                        {\n                            v183 -= (char)(v184 == 41);\n                        }\n                        else\n                        {\n                            v183 += 1;\n                        }\n                        if (v183 != 0)\n                        {\n                            v182 = v168;\n                        }\n                        else\n                        {\n                            v186 = v182[1];\n                            v171 = v182[1];\n                        }\n                    }\n                    if (v183 == 0 && v182[0] != 0)\n                    {\n                        v172 = v171;\n                    }\n                    else\n                    {\n                        v259 = 0;\n                    }\n                }\n            }\n            if (v175 == 0 && (v171 > 32 || (unsigned int)(v170 - 48) > 9) && (v171 > 32 || (0x100003e00 & v173) != 0))\n            {\n                v178 = *((long long *)v55) + 1;\n                v179 = (0 - (unsigned int)(char)(v176 < 1) & 2) - 1;\n                while (true)\n                {\n                    *((unsigned long long *)v55) = v178;\n                    v171 = (char)*((char *)v178);\n                    v168 = v178;\n                    v172 = (char)*((char *)v178);\n                    if (*((char *)v178) <= 32)\n                    {\n                        v178 = v168 + 1;\n                        v180 = v171;\n                    }\n                    else\n                    {\n                        v181 = v171;\n                        break;\n                    }\n                }\n                if ((0x100003e00 & 1 << (v171 & 63)) == 0 || *((char *)v178) > 32)\n                {\n                    v172 = v171;\n                }\n                else if (*((char *)v178) > 32)\n                {\n                    v189 = v168;\n                    v190 = 0;\n                    v169 = v172;\n                }\n            }\n            if ((unsigned int)(v170 - 48) <= 9 && v171 > 32 || v175 == 0 && v171 > 32 || (unsigned int)(v170 - 48) <= 9 && (unsigned int)(v170 - 48) <= 9 && (0x100003e00 & v173) == 0 || (unsigned int)(v170 - 48) <= 9 && v171 <= 32 && (unsigned int)(v170 - 48) > 9 || v175 == 0 && (unsigned int)(v170 - 48) > 9 && (0x100003e00 & v173) != 0)\n            {\n                v189 = v168;\n                v190 = 0;\n                v169 = v172;\n                while (true)\n                {\n                    v192 = v190 + ((unsigned int)v179 == -1? 48 - v169 : (unsigned int)(rdi<8> - 48));\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x34<64>, Mul(Load(addr=stack_base-1472, size=8, endness=Iend_LE), 0xa<64>), 0xa<64>, Conv(1->64, ((t16 & 0xff<64>) < 0x1<64>))))\n                    {\n                        break;\n                    }\n                    v169 = (char)*((char *)(v189 + 1));\n                    v193 = v189 + 1;\n                    v194 = (char)*((char *)(v189 + 1));\n                    if ((unsigned int)((unsigned long long)(char)*((char *)(v189 + 1)) - 48) > 9)\n                    {\n                        v197 = v194 & -3;\n                        if (v197 == 44)\n                        {\n                            v198 = (unsigned int)(char)*((char *)(v189 + 1)) - 48;\n                            if ((unsigned int)(char)*((char *)(v189 + 1)) - 48 <= 9)\n                            {\n                                v199 = v189 + 3;\n                                v200 = (char)*((char *)(v189 + 3));\n                                v201 = 8;\n                                v202 = v200;\n                                do\n                                {\n                                    v205 = v200 - 48;\n                                    v198 = (unsigned int)v198 * 10;\n                                    if ((unsigned int)(v200 - 48) <= 9)\n                                    {\n                                        v200 = v199[1];\n                                        v198 += v205;\n                                        v199 = &v199[1];\n                                        v202 = v200;\n                                        v205 = (unsigned int)v200 - 48;\n                                    }\n                                    v206 = v201;\n                                    v201 -= 1;\n                                }\n                                while (v206 != 1);\n                                if ((unsigned int)v179 == -1)\n                                {\n                                    if (v205 <= 9)\n                                    {\n                                        if (v202 == 48)\n                                        {\n                                            do\n                                            {\n                                                v199 = &v199[1];\n                                                v213 = v199[0];\n                                            }\n                                            while (v213 == 48 && (unsigned int)v199[0] - 48 <= 9);\n                                            if ((unsigned int)v199[0] - 48 <= 9)\n                                            {\n                                                v198 = (unsigned int)v198 + 1;\n                                            }\n                                        }\n                                        if ((unsigned int)v198 != 0 || v202 != 48)\n                                        {\n                                            v198 = (unsigned int)v198 + 1;\n                                        }\n                                    }\n                                    if ((unsigned int)v198 == 0 && v205 > 9)\n                                    {\n                                        *((char *[2])v55) = v199;\n                                        v259 = 21;\n                                        v29 = v8;\n                                        v8 = 0;\n                                    }\n                                }\n                                if (v205 <= 9 && ((unsigned int)v199[0] - 48 <= 9 || (unsigned int)v179 != -1) && ((unsigned int)v198 != 0 || (unsigned int)v179 != -1 || v202 != 48))\n                                {\n                                    do\n                                    {\n                                        v199 = &v199[1];\n                                    }\n                                    while ((unsigned int)v199[0] - 48 <= 9);\n                                }\n                                if ((unsigned int)v198 == 0 && (unsigned int)v179 != -1 || (unsigned int)v179 >= 0 && (unsigned int)v179 != -1 || v205 > 9 && (unsigned int)v179 != -1 || (unsigned int)v198 == 0 && (unsigned int)v199[0] - 48 <= 9 && v205 <= 9 && (unsigned int)v198 != 0 || (unsigned int)v198 == 0 && (unsigned int)v199[0] - 48 <= 9 && v205 <= 9 && v202 != 48 || (unsigned int)v199[0] - 48 <= 9 && v205 <= 9 && (unsigned int)v179 >= 0 && (unsigned int)v198 != 0 || (unsigned int)v199[0] - 48 <= 9 && v205 <= 9 && (unsigned int)v179 >= 0 && v202 != 48)\n                                {\n                                    *((char *[2])v55) = v199;\n                                    v8 = v198;\n                                    v29 = v8;\n                                    v259 = !(0 - (unsigned int)(char)((unsigned int)rsi<8> < 1)) + 22;\n                                }\n                                if (((unsigned int)v179 < 0 || (unsigned int)v179 == -1) && (v205 <= 9 || (unsigned int)v179 == -1) && (v205 <= 9 || (unsigned int)v198 != 0) && ((unsigned int)v179 == -1 || (unsigned int)v198 != 0) && ((unsigned int)v198 != 0 || (unsigned int)v179 != -1 || v202 != 48) && ((unsigned int)v179 < 0 || v202 == 48 || (unsigned int)v199[0] - 48 > 9 || v205 > 9) && (v202 == 48 || (unsigned int)v198 != 0 || (unsigned int)v199[0] - 48 > 9 || v205 > 9))\n                                {\n                                    if (v8 == 0x8000000000000000)\n                                    {\n                                        break;\n                                    }\n                                    *((char *[2])v55) = v199;\n                                    v29 = v8 - 1;\n                                    v8 = (int)(0x3b9aca00 - (unsigned int)v198);\n                                    v259 = 21;\n                                }\n                            }\n                        }\n                        if ((unsigned int)(char)*((char *)(v189 + 1)) - 48 > 9 || v197 != 44)\n                        {\n                            *((unsigned long long *)v55) = v189;\n                            v8 = v192;\n                            v29 = (char)v179 % 0x80000000;\n                            v9 = v189 - v168;\n                            v259 = !(0 - (unsigned int)(char)((unsigned int)v179 < 1)) + 20;\n                        }\n                    }\n                    else\n                    {\n                        v190 = v8 * 10;\n                        if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x34<64>, Mul(Load(addr=stack_base-1472, size=8, endness=Iend_LE), 0xa<64>), 0xa<64>, Conv(1->64, ((t16 & 0xff<64>) < 0x1<64>))))\n                        {\n                            break;\n                        }\n                        v189 = v193;\n                    }\n                }\n                if (true)\n                {\n                    v259 = 2;\n                }\n                else if (...)\n                {\n                    v238 += v259;\n                }\n            }\n            if (...)\n            {\n                *((char **)v55) = &v168[1];\n                v240 = *(v168);\n                if (*(v168) != 0)\n                {\n                    break;\n                }\n            }\n            if ((unsigned int)(v170 - 65) <= 57 || (unsigned int)(v170 - 65) <= 57 || (288230371923853311 & 1 << (v177 & 63)) != 0)\n            {\n                v259 = 2;\n            }\n        }\n        if (!(...))\n        {\n            if (...)\n            {\n                v238 += v259;\n            }\n            else if (...)\n            {\n                v259 = 0;\n            }\n            else if (...)\n            {\n                v259 = (char)*(&((char *)&g_416640)[v240]);\n            }\n        }\n    }\n    v259 = 0;\n    if ((unsigned int)-18446744069414584322 == -2 || (unsigned int)v240 <= 277)\n    {\n        v259 = (char)*(&((char *)&g_416640)[v240]);\n        v238 += v259;\n    }\n    if ((unsigned int)v240 > 277)\n    {\n        v238 = (unsigned long long)((unsigned int)v238 + 2);\n        v259 = 2;\n    }\n    if ((unsigned int)v238 <= 112)\n    {\n        v262 = v238;\n        if ((char)*((char *)(v238 + &g_416400)) == v259)\n        {\n            v53 = (char)*((char *)(v262 + &g_416480));\n            if (*((char *)(v262 + &g_416480)) != 0)\n            {\n                v65 = v101;\n                v237 = &v237->field_38;\n                v7 = v7 - 1 + (char)(v7 < 1);\n                v30 = v8;\n                v31 = v9;\n                v237->field_0 = (int128_t)v29;\n                v237->field_30 = v34;\n                v237->field_10 = *((int128_t *)&v31);\n                v237->field_20 = *((int128_t *)&v33);\n            }\n            else\n            {\n                v65 = v101;\n                v67 = v237;\n                v59 = *((long long *)&v237->field_38);\n                *((int128_t *)&v35) = *((int128_t *)&v237->field_38);\n                v68 = v237->field_40;\n                v263 = *((long long *)&v237->field_48);\n                v41 = *((long long *)&v237->field_68);\n                v264 = v237->field_50;\n                *((int128_t *)&v37) = *((int128_t *)&v237->field_48);\n                *((int128_t *)&v39) = *((int128_t *)&v237->field_58);\n                v5 = *((long long *)&v237->field_58);\n                v4 = v237->field_60;\n                v6 = *((int *)&v237->field_68);\n            }\n        }\n    }\n    v265 = 0;\n    v265 = 2;\n    return v265;\n}\n"
        },
        {
            "funcName": "sub_4054b0",
            "funcStartAddr": "0x4054b0",
            "funcEndAddr": "0x405598",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n    unsigned int field_10;\n    char padding_14[204];\n    char field_e0;\n} struct_0;\n\nint sub_4054b0()\n{\n    struct_0 *v1;  // rdi\n    char *v3;  // rsi\n    char *v4;  // rsi\n    unsigned long long v5;  // rax\n\n    if (!(v1->field_e0 != 0))\n    {\n        *(v3) = 0;\n    }\n    else if (v1->field_8 + 1 <= 13)\n    {\n        v5 = snprintf(v4, 0x64, \"%s\", (unsigned int)(char *)(4282795 + 11 * v1->field_8));\n    }\n    else\n    {\n        __snprintf_chk();\n    }\n    if (v1->field_e0 == 0 && v1->field_10 > 6 || v1->field_8 + 1 <= 13 && v1->field_e0 != 0 && v1->field_10 > 6 || v1->field_8 + 1 <= 13 && v1->field_e0 != 0 && (unsigned int)v5 > 99 || v1->field_e0 != 0 && v1->field_10 > 6 && v1->field_8 + 1 > 13)\n    {\n        return stack_base + 0;\n    }\n    __snprintf_chk();\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_40c1f0",
            "funcStartAddr": "0x40c1f0",
            "funcEndAddr": "0x40c220",
            "decompiledFuncCode": "int sub_40c1f0()\n{\n    unsigned int v1;  // rsi\n    void *v2;  // rdi\n    unsigned long long v3;  // rax\n\n    if (v1 == 0 && v2 != 0)\n    {\n        free(v2);\n        return 0;\n    }\n    if (v2 == 0 || v1 != 0)\n    {\n        v3 = realloc(v2, v1);\n        if (v3 == 0 && v1 != 0)\n        {\n            sub_40c3e0(); /* do not return */\n        }\n        if (v1 == 0 || v3 != 0)\n        {\n            return v3;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_40e010",
            "funcStartAddr": "0x40e010",
            "funcEndAddr": "0x40e0c9",
            "decompiledFuncCode": "int sub_40e010()\n{\n    unsigned long long v0;  // [bp-0x800]\n    void *v2;  // rax\n    unsigned long long v3;  // rbx\n    void *v4;  // rbp\n    void *v5;  // rdi\n    unsigned int *v7;  // r12\n    unsigned long long v9;  // rax\n\n    v0 = 2000;\n    v2 = sub_40ffa0();\n    v3 = v0;\n    if (false)\n    {\n        *(__errno_location()) = 75;\n    }\n    if (stack_base + 0 != 0)\n    {\n        v4 = v2;\n        if (!(fwrite(v2, 0x1, 0x7d0, v5) >= 2000))\n        {\n            v3 = -18446744069414584321;\n            if (v4 != stack_base + -2040)\n            {\n                free(v4);\n                *(__errno_location()) = *(v7);\n            }\n        }\n        else if (v4 != stack_base + -2040)\n        {\n            free(v4);\n        }\n    }\n    else\n    {\n        v3 = -18446744069414584321;\n        sub_40ff90();\n    }\n    v9 = v3;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_404f90",
            "funcStartAddr": "0x404f90",
            "funcEndAddr": "0x40504e",
            "decompiledFuncCode": "extern unsigned long long stderr;\n\nint sub_404f90()\n{\n    unsigned int v0;  // [bp-0xd0]\n    unsigned int v1;  // [bp-0xcc]\n    unsigned long v2;  // [bp-0xc8]\n    unsigned long v3;  // [bp-0xc0]\n    unsigned long v4;  // [bp-0xb0]\n    unsigned long v5;  // [bp-0xa8]\n    unsigned long v6;  // [bp-0xa0]\n    unsigned long v7;  // [bp-0x98]\n    unsigned long v8;  // [bp-0x90]\n    void v9;  // [bp-0x88]\n    void v10;  // [bp-0x78]\n    void v11;  // [bp-0x68]\n    void v12;  // [bp-0x58]\n    void v13;  // [bp-0x48]\n    void v14;  // [bp-0x38]\n    void v15;  // [bp-0x28]\n    void v16;  // [bp-0x18]\n    unsigned long v18;  // rsi\n    unsigned long v19;  // rdx\n    unsigned long v20;  // rcx\n    unsigned long v21;  // r8\n    unsigned long v22;  // r9\n    char v23;  // al\n    void v24;  // xmm0\n    void v25;  // xmm1\n    void v26;  // xmm2\n    void v27;  // xmm3\n    void v28;  // xmm4\n    void v29;  // xmm5\n    void v30;  // xmm6\n    void v31;  // xmm7\n\n    v4 = v18;\n    v5 = v19;\n    v6 = v20;\n    v7 = v21;\n    v8 = v22;\n    if (v23 != 0)\n    {\n        v9 = v24;\n        v10 = v25;\n        v11 = v26;\n        v12 = v27;\n        v13 = v28;\n        v14 = v29;\n        v15 = v30;\n        v16 = v31;\n    }\n    fwrite(\"date: \", 0x1, 0x6, stderr);\n    v2 = stack_base + 8;\n    v0 = 8;\n    v1 = 48;\n    v3 = stack_base + -184;\n    return sub_40e010();\n}\n"
        },
        {
            "funcName": "sub_40bb10",
            "funcStartAddr": "0x40bb10",
            "funcEndAddr": "0x40bb1a",
            "decompiledFuncCode": "int sub_40bb10()\n{\n}\n"
        },
        {
            "funcName": "sub_40b310",
            "funcStartAddr": "0x40b310",
            "funcEndAddr": "0x40b4b0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[4];\n    unsigned int field_4;\n    char padding_8[32];\n    unsigned long long field_28;\n    unsigned long long field_30;\n} struct_0;\n\nextern uint128_t *g_61b2d8;\nextern uint128_t g_61b2e0;\nextern unsigned int g_61b2f0;\nextern int512_t g_61b360;\n\nint sub_40b310()\n{\n    unsigned long v0;  // [bp-0x78]\n    unsigned long v1;  // [bp-0x70]\n    unsigned long v2;  // [bp-0x68]\n    unsigned long v3;  // [bp-0x50]\n    unsigned long|unsigned long long v4;  // [bp-0x48]\n    unsigned int v5;  // [bp-0x40]\n    unsigned int v6;  // [bp-0x3c]\n    unsigned long long v8;  // rcx\n    struct_0 *v9;  // rbp\n    unsigned long v10;  // rsi\n    unsigned int *v11;  // r13\n    unsigned long v13;  // rdi\n    uint128_t *v15;  // rax\n    unsigned long long v16;  // rax\n    uint128_t *v17;  // rbx\n    unsigned long long v19[2];  // rbx\n    void *v20;  // r12\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rsi\n    unsigned long long v24;  // rax\n\n    v9 = v8;\n    v3 = v10;\n    v17 = g_61b2d8;\n    v11 = __errno_location();\n    v5 = *(v11);\n    if ((unsigned int)v13 < 0)\n    {\n        abort(); /* do not return */\n    }\n    if (g_61b2f0 <= (unsigned int)v13)\n    {\n        if ((unsigned int)v13 != 2147483647)\n        {\n            if (g_61b2d8 != 6402784)\n            {\n                v16 = sub_40c1f0();\n                g_61b2d8 = v16;\n                v17 = v16;\n            }\n            else\n            {\n                v15 = sub_40c1f0();\n                v17 = v15;\n                g_61b2d8 = v15;\n                *(v15) = g_61b2e0;\n            }\n            memset(&v17[(long long)(int)g_61b2f0], 0x0, (int)((unsigned int)v13 + 1 - g_61b2f0) * 16);\n            g_61b2f0 = (unsigned int)v13 + 1;\n        }\n        else\n        {\n            sub_40c3e0(); /* do not return */\n        }\n    }\n    if ((unsigned int)v13 != 2147483647 || g_61b2f0 > (unsigned int)v13)\n    {\n        v19 = &v17[v13];\n        v20 = v19[1];\n        v6 = v9->field_4 | 1;\n        v2 = v9->field_30;\n        v1 = v9->field_28;\n        v0 = &v9->padding_8;\n        *((unsigned long long [2])&v4) = *(v19);\n        v21 = sub_40a0e0();\n        if (v4 <= v21)\n        {\n            v22 = v21 + 1;\n            v19[0] = v21 + 1;\n            if (v20 != 6402912)\n            {\n                v4 = v22;\n                free(v20);\n                v22 = v4;\n            }\n            v4 = v22;\n            v19[1] = v20;\n            v20 = (unsigned long long)(unsigned int)sub_40c190();\n            v2 = v9->field_30;\n            v1 = v9->field_28;\n            v0 = v8 + 8;\n            sub_40a0e0();\n        }\n        *(v11) = v5;\n        v24 = v20;\n        return v24;\n    }\n}\n"
        },
        {
            "funcName": "sub_409f40",
            "funcStartAddr": "0x409f40",
            "funcEndAddr": "0x409fd9",
            "decompiledFuncCode": "extern unsigned long long __progname_full;\nextern unsigned long long g_61b350;\nextern unsigned long long program_invocation_short_name;\nextern unsigned long long stderr;\n\nint sub_409f40()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // r8\n    unsigned long long v6;  // cc_dep1\n    unsigned long long v7;  // cc_dep2\n    unsigned long v8;  // d\n    char *v9;  // rdi\n    char *v10;  // rsi\n    unsigned long long v11;  // rcx\n    char *v13;  // rdi\n    unsigned long long v14;  // rcx\n    char *v15;  // rsi\n    unsigned long long v16;  // cc_dep1\n    unsigned long long v17;  // cc_dep2\n\n    if (v1 != 0)\n    {\n        v3 = v1;\n        v4 = strrchr();\n        if (v4 != 0)\n        {\n            v5 = v4 + 1;\n            if (v4 + 1 - v1 > 6)\n            {\n                v10 = v4 - 6;\n                v9 = \"/.libs/\";\n                v11 = 7;\n                while (v11 != 0)\n                {\n                    v11 -= 1;\n                    v6 = *(v10);\n                    v7 = *(v9);\n                    v9 = &v9[v8];\n                    v10 = &v10[v8];\n                    break;\n                }\n                if ((v6 > v7) - 0 - (v6 < v7) == 0)\n                {\n                    v13 = \"lt-\";\n                    v14 = 3;\n                    v15 = v5;\n                    v3 = v5;\n                    while (v14 != 0)\n                    {\n                        v14 -= 1;\n                        v16 = *(v15);\n                        v17 = *(v13);\n                        v13 = &v13[v8];\n                        v15 = &v15[v8];\n                        break;\n                    }\n                    if ((v16 > v17) - 0 - (v16 < v17) == 0)\n                    {\n                        v3 = v4 + 4;\n                        program_invocation_short_name = v4 + 4;\n                    }\n                }\n            }\n        }\n        g_61b350 = v3;\n        __progname_full = v3;\n        return v4;\n    }\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 0x1, 0x37, stderr);\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_403040",
            "funcStartAddr": "0x403040",
            "funcEndAddr": "0x4030ad",
            "decompiledFuncCode": "int sub_403040()\n{\n    unsigned long long v1;  // rax\n\n    v1 = sub_402d80();\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>))\n    {\n        sub_402ea0();\n        sub_402f20();\n        r9<8>();\n        v1 = -1;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_40bbf0",
            "funcStartAddr": "0x40bbf0",
            "funcEndAddr": "0x40bf99",
            "decompiledFuncCode": "extern unsigned int g_4174eb;\nextern unsigned int g_4174ef;\nextern unsigned int g_4174ff;\nextern unsigned int g_417516;\nextern unsigned int g_417578;\nextern unsigned int g_417648;\nextern unsigned int g_417668;\nextern unsigned int g_417690;\nextern unsigned int g_4176b8;\nextern unsigned int g_4176e8;\n\nint sub_40bbf0()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long long v11[9];  // r8\n    unsigned long long v12[9];  // rbx\n    unsigned long v13;  // rsi\n    void *v14;  // rdi\n    unsigned long v16;  // r9\n    unsigned long long v17;  // r8\n    unsigned long long v18;  // r15\n    unsigned long long v19;  // r14\n    unsigned long v20;  // rsi\n    unsigned long long v21;  // r8\n    unsigned long long v22;  // r13\n    unsigned long long v23;  // r12\n    unsigned long long v24;  // r14\n\n    v12 = v11;\n    if (v13 != 0)\n    {\n        __fprintf_chk();\n    }\n    else\n    {\n        __fprintf_chk();\n    }\n    dcgettext(0x0, 0x4174eb, 0x5);\n    __fprintf_chk();\n    fputs_unlocked((unsigned long long)dcgettext(0x0, 0x417578, 0x5), v14);\n    switch (v16)\n    {\n    case 0:\n        abort(); /* do not return */\n    case 1:\n        dcgettext(0x0, 0x4174ef, 0x5);\n        break;\n    case 2:\n        dcgettext(0x0, 0x4174ff, 0x5);\n        break;\n    case 3:\n        dcgettext(0x0, 0x417516, 0x5);\n        break;\n    case 4:\n        v24 = v11[3];\n        dcgettext(0x0, 0x417648, 0x5);\n    case 5:\n        v24 = v11[3];\n        dcgettext(0x0, 0x417668, 0x5);\n        *((unsigned long long [9])&v5) = v11[4];\n    case 6:\n        *((unsigned long long [9])&v6) = v11[1];\n        dcgettext(0x0, 0x417690, 0x5);\n        *((unsigned long long [9])&v4) = v11[5];\n        *((unsigned long long [9])&v3) = v11[4];\n        *((unsigned long long [9])&v2) = v11[3];\n    case 7:\n        *((unsigned long long [9])&v7) = v12[2];\n        *((unsigned long long [9])&v6) = v12[1];\n        dcgettext(0x0, 0x4176b8, 0x5);\n        *((unsigned long long [9])&v5) = v11[6];\n        *((unsigned long long [9])&v4) = v11[5];\n        *((unsigned long long [9])&v3) = v11[4];\n        *((unsigned long long [9])&v2) = v11[3];\n    case 8:\n        v22 = v12[6];\n        v23 = v12[5];\n        v18 = v12[4];\n        *((unsigned long long [9])&v8) = v12[7];\n        v19 = v12[3];\n        *((unsigned long long [9])&v6) = v12[2];\n        *((unsigned long long [9])&v7) = v12[1];\n        dcgettext(0x0, 0x4176e8, 0x5);\n    case 9:\n        v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n        v21 = v11[1];\n        v22 = v12[6];\n        v23 = v12[5];\n        *((unsigned long long [9])&v9) = v12[8];\n        v18 = v12[4];\n        v19 = v12[3];\n        *((unsigned long long [9])&v8) = v12[7];\n        *((unsigned long long [9])&v6) = v12[2];\n        v7 = v21;\n    default:\n        v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n        v17 = v11[1];\n        v22 = v12[6];\n        v23 = v12[5];\n        *((unsigned long long [9])&v9) = v12[8];\n        v18 = v12[4];\n        v19 = v12[3];\n        *((unsigned long long [9])&v8) = v12[7];\n        *((unsigned long long [9])&v6) = v12[2];\n        v7 = v17;\n    }\n    dcgettext(0x0, v20, 0x5);\n    v5 = v9;\n    v4 = v24;\n    __fprintf_chk();\n    return v4;\n    return __fprintf_chk();\n    v4 = v8;\n    v3 = v22;\n    v2 = v23;\n    v1 = v18;\n    v0 = v19;\n    return __fprintf_chk();\n}\n"
        },
        {
            "funcName": "sub_40d2d0",
            "funcStartAddr": "0x40d2d0",
            "funcEndAddr": "0x40d2e6",
            "decompiledFuncCode": "int sub_40d2d0()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_40d210();\n}\n"
        },
        {
            "funcName": "sub_40b4b0",
            "funcStartAddr": "0x40b4b0",
            "funcEndAddr": "0x40b4e4",
            "decompiledFuncCode": "int sub_40b4b0()\n{\n    unsigned int v1;  // [bp+0x100008]\n\n    *(__errno_location()) = v1;\n    return sub_40c390();\n}\n"
        },
        {
            "funcName": "sub_40dff0",
            "funcStartAddr": "0x40dff0",
            "funcEndAddr": "0x40e006",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[32];\n    unsigned int field_20;\n} struct_0;\n\nint sub_40dff0()\n{\n    struct_0 *v1;  // rdi\n\n    v1->field_20 = 0;\n}\n"
        },
        {
            "funcName": "sub_40ff90",
            "funcStartAddr": "0x40ff90",
            "funcEndAddr": "0x40ff94",
            "decompiledFuncCode": "int sub_40ff90()\n{\n    unsigned int *v1;  // rdi\n    unsigned long v2;  // rax\n\n    *(v1) = *(v1) | 32;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40b9e0",
            "funcStartAddr": "0x40b9e0",
            "funcEndAddr": "0x40ba53",
            "decompiledFuncCode": "int sub_40b9e0()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v2 = 0x400000000000000;\n    v1 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_40b310();\n}\n"
        },
        {
            "funcName": "sub_409b90",
            "funcStartAddr": "0x409b90",
            "funcEndAddr": "0x409bf7",
            "decompiledFuncCode": "int sub_409b90()\n{\n    unsigned long long v1;  // r12\n    unsigned long v3;  // rbx\n    unsigned long long v4;  // rbp\n\n    v1 = getenv(\"TZ\");\n    sub_40db40();\n    if (v3 != 0)\n    {\n        v4 = (unsigned int)sub_407bc0();\n        sub_40de00();\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_404ca0",
            "funcStartAddr": "0x404ca0",
            "funcEndAddr": "0x404e0d",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[28];\n    unsigned int field_1c;\n    uint128_t field_20;\n    unsigned long long field_28;\n    unsigned long long field_30;\n    unsigned long long field_38;\n    unsigned long long field_40;\n    unsigned long long field_48;\n    unsigned long long field_50;\n    unsigned long long field_58;\n    unsigned long long field_60;\n    char padding_68[57];\n    char field_a1;\n    char padding_a2[6];\n    unsigned long long field_a8;\n    char padding_b0[24];\n    unsigned long long field_c8;\n    char padding_d0[8];\n    char field_d8;\n} struct_0;\n\ndouble sub_404ca0()\n{\n    unsigned long v0;  // [bp+0x8]\n    unsigned long long v1;  // [bp+0x10]\n    unsigned long v2;  // [bp+0x18]\n    unsigned long long v3;  // r8\n    struct_0 *v4;  // rdi\n    void v5;  // xmm0\n    void v6;  // xmm0\n\n    v3 = v1;\n    if (*((long long *)&v4->padding_68[56]) != 0 && v4->field_28 == 0 && v4->padding_68[49] == 0)\n    {\n        if (*((long long *)&v4->padding_b0[16]) == 0 && v2 <= 2)\n        {\n            *((long long *)&v4->padding_b0[16]) = 1;\n        }\n        if (v2 > 2 || *((long long *)&v4->padding_b0[16]) != 0)\n        {\n            v4->padding_d0[0] = 1;\n            v4->field_20 = *((int128_t *)&v0);\n            v4->field_28 = v2;\n            return *((int128_t *)&v0);\n        }\n    }\n    if (*((long long *)&v4->padding_68[56]) == 0 || v4->field_28 != 0 || v4->padding_68[49] != 0)\n    {\n        if (v2 > 4)\n        {\n            *((long long *)&v4->padding_68[56]) = *((long long *)&v4->padding_68[56]) + 1;\n            v4->field_28 = v2 - 4;\n            v4->field_38 = v3 - (((v3 * 11805916207174113035 >> 64) + v3 >> 6) - (v3 >> 63)) * 100;\n            v4->field_30 = ((v3 * 11805916207174113035 >> 64) + v3 >> 6) - (v3 >> 63) - ((((((v3 * 11805916207174113035 >> 64) + v3 >> 6) - (v3 >> 63)) * 11805916207174113035 >> 64) + ((v3 * 11805916207174113035 >> 64) + v3 >> 6) - (v3 >> 63) >> 6) - (((v3 * 11805916207174113035 >> 64) + v3 >> 6) - (v3 >> 63) >> 63)) * 100;\n            *((unsigned long long *)&((char *)&v4->field_20)[8]) = (v3 * 3777893186295716171 >> 64 >> 11) - (v3 >> 63);\n            return v5;\n        }\n        *((long long *)&v4->padding_b0[16]) = *((long long *)&v4->padding_b0[16]) + 1;\n        if (v2 > 2)\n        {\n            v4->field_40 = ((v3 * 11805916207174113035 >> 64) + v3 >> 6) - (v3 >> 63);\n            v4->field_48 = v1 - (((v1 * 11805916207174113035 >> 64) + v1 >> 6) - (v1 >> 63)) * 100;\n        }\n    }\n    if ((v2 <= 4 || v4->field_28 == 0) && (v2 <= 4 || v4->padding_68[49] == 0) && (v2 <= 4 || *((long long *)&v4->padding_68[56]) != 0) && (*((long long *)&v4->padding_68[56]) == 0 || *((long long *)&v4->padding_b0[16]) == 0 || v4->field_28 != 0 || v4->padding_68[49] != 0))\n    {\n        if (v2 <= 2)\n        {\n            v4->field_40 = v1;\n            v4->field_48 = 0;\n        }\n        if (v2 <= 2 || *((long long *)&v4->padding_68[56]) == 0 || v4->field_28 != 0 || v4->padding_68[49] != 0)\n        {\n            v4->field_50 = 0;\n            v4->field_58 = 0;\n            v4->field_1c = 2;\n            return v6;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_40b830",
            "funcStartAddr": "0x40b830",
            "funcEndAddr": "0x40b89d",
            "decompiledFuncCode": "int sub_40b830()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_40b310();\n}\n"
        },
        {
            "funcName": "sub_40ff70",
            "funcStartAddr": "0x40ff70",
            "funcEndAddr": "0x40ff8f",
            "decompiledFuncCode": "int sub_40ff70()\n{\n    unsigned long v0;  // [bp-0x28]\n    unsigned long v1;  // [bp-0x20]\n    char v2;  // [bp-0x9]\n    unsigned long v4;  // r9\n    unsigned long v5;  // r8\n\n    v2 = 0;\n    v1 = v4;\n    v0 = v5;\n    return sub_40e7a0();\n}\n"
        },
        {
            "funcName": "sub_40b720",
            "funcStartAddr": "0x40b720",
            "funcEndAddr": "0x40b7b5",
            "decompiledFuncCode": "extern struct_0 *g_61b2d8;\nextern unsigned long long g_61b2e0;\nextern unsigned long long g_61b2e8;\nextern unsigned int g_61b2f0;\nextern unsigned long long g_61b360;\n\nint sub_40b720()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rbx\n    void *v3;  // rdi\n\n    v1 = g_61b2f0;\n    if (g_61b2f0 > 1)\n    {\n        v2 = &g_61b2d8[1].field_8;\n        while (true)\n        {\n            v3 = *(v2);\n            v2 = &v2[2];\n            v1 = free(v3);\n            if (v2 == &g_61b2d8[(unsigned long long)(g_61b2f0 - 2) + 2].field_8)\n            {\n                break;\n            }\n        }\n    }\n    if (g_61b2d8->field_8 != 6402912)\n    {\n        v1 = free(g_61b2d8->field_8);\n        g_61b2e0 = 0x100;\n        g_61b2e8 = &g_61b360;\n    }\n    if (g_61b2d8 != 6402784)\n    {\n        v1 = free(g_61b2d8);\n        g_61b2d8 = &g_61b2e0;\n    }\n    g_61b2f0 = 1;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_403120",
            "funcStartAddr": "0x403120",
            "funcEndAddr": "0x4031be",
            "decompiledFuncCode": "extern unsigned int g_4144af;\nextern unsigned int g_61b280;\nextern char g_61b340;\nextern unsigned long long g_61b348;\n\nint sub_403120()\n{\n    unsigned long long v1;  // rax\n    unsigned int *v2;  // rbx\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rbp\n\n    v1 = sub_40e0d0();\n    if (v1 != 0)\n    {\n        v2 = __errno_location();\n        if (g_61b340 == 0 || *(v2) != 32)\n        {\n            v4 = dcgettext(0x0, 0x4144af, 0x5);\n            if (g_61b348 != 0)\n            {\n                sub_40b9b0();\n                error(0x0, *(v2), \"%s: %s\");\n            }\n        }\n    }\n    if (v1 == 0 || *(v2) == 32 && g_61b340 != 0)\n    {\n        v3 = sub_40e0d0();\n    }\n    if ((unsigned int)v3 == 0 && (*(v2) == 32 || v1 == 0) && (v1 == 0 || g_61b340 != 0))\n    {\n        return v3;\n    }\n    while (true)\n    {\n        _exit(g_61b280);\n        error(0x0, *(v2), \"%s\");\n    }\n}\n"
        },
        {
            "funcName": "sub_40bb40",
            "funcStartAddr": "0x40bb40",
            "funcEndAddr": "0x40bb51",
            "decompiledFuncCode": "int sub_40bb40()\n{\n}\n"
        },
        {
            "funcName": "sub_405410",
            "funcStartAddr": "0x405410",
            "funcEndAddr": "0x4054a2",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[208];\n    unsigned long long field_d0;\n} struct_0;\n\nint sub_405410()\n{\n    unsigned long long v1;  // rax\n    struct_0 *v2;  // rsi\n    unsigned long long v3;  // rbp\n    unsigned long v7;  // rdx\n\n    v1 = sub_40ff70();\n    if (v2 != 0)\n    {\n        v3 = v1;\n        if ((unsigned int)v1 <= 99 && v2->field_d0 != 0)\n        {\n            sub_404e20();\n            __snprintf_chk();\n            return v7;\n        }\n    }\n    if (v2->field_d0 == 0 || v2 == 0 || (unsigned int)v1 > 99)\n    {\n        return v7;\n    }\n}\n"
        },
        {
            "funcName": "sub_40e750",
            "funcStartAddr": "0x40e750",
            "funcEndAddr": "0x40e791",
            "decompiledFuncCode": "int sub_40e750()\n{\n    unsigned long v1;  // rdx\n    char *v2;  // rbx\n    char *v4;  // rdi\n    char *v5;  // rsi\n\n    if (v1 != 0)\n    {\n        v2 = v1 - 1;\n        do\n        {\n            *((char *)(v4 + v2)) = *((int *)(*((long long *)(unsigned long long)__ctype_toupper_loc()) + (unsigned long long)(char)*((char *)(v5 + v2)) * 4));\n            v2 = &v2[-1];\n        }\n        while (v2 != -1);\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_40db40",
            "funcStartAddr": "0x40db40",
            "funcEndAddr": "0x40dbca",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned short field_8;\n} struct_1;\n\nint sub_40db40()\n{\n    void *v1;  // rdi\n    unsigned long long v2;  // rax\n    struct_1 *v3;  // rbx\n    unsigned long v4;  // rbp\n    struct_1 *v5;  // rax\n    struct_1 *v7;  // rax\n\n    if (v1 != 0)\n    {\n        v2 = strlen(v1);\n        v4 = v2 + 1;\n        v3 = malloc((118 <= v2 + 1? v2 + 1 : 118) + 17 & -8);\n        if (v3 != 0)\n        {\n            v3->field_0 = 0;\n            v3->field_8 = 1;\n            memcpy((char *)&v3->field_8 + 1, v1, v4);\n            *(&((char *)&v3->field_0)[9 + v4]) = 0;\n        }\n    }\n    else\n    {\n        v3 = malloc(0x80);\n        if (v3 != 0)\n        {\n            v3->field_0 = 0;\n            v5 = v3;\n            v3->field_8 = 0;\n            return v5;\n        }\n    }\n    if (v3 == 0 || v1 != 0)\n    {\n        v7 = v3;\n        return v7;\n    }\n}\n"
        },
        {
            "funcName": "sub_404f20",
            "funcStartAddr": "0x404f20",
            "funcEndAddr": "0x404f8e",
            "decompiledFuncCode": "int sub_404f20() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40daf0",
            "funcStartAddr": "0x40daf0",
            "funcEndAddr": "0x40db31",
            "decompiledFuncCode": "int sub_40daf0()\n{\n    unsigned int *v1;  // rbx\n    unsigned int|unsigned long v2;  // r13d\n\n    v1 = __errno_location();\n    v2 = *(v1);\n    if ((char)sub_40da70() == 0)\n    {\n        v2 = *(v1);\n    }\n    sub_40dac0();\n    *((unsigned long *)&v1) = v2;\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_405100",
            "funcStartAddr": "0x405100",
            "funcEndAddr": "0x4051a2",
            "decompiledFuncCode": "int sub_405100()\n{\n    unsigned long long v1;  // rdx\n    unsigned long long v2;  // r9\n    unsigned long v3;  // rcx\n    unsigned int v4;  // ecx\n    char v6;  // cl\n    char v7;  // sil\n    unsigned long long v8;  // rcx\n    unsigned long long v9;  // r9\n    unsigned long v10;  // r8\n    char v11;  // dl\n    unsigned long v12;  // r8\n    unsigned long long v13;  // rax\n    unsigned int v14;  // r9d\n    unsigned int *v15;  // rdi\n\n    v2 = v1;\n    if (v3 <= 2)\n    {\n        if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, r8<8>, 0x0<64>, cc_ndep<8>))\n        {\n            v8 = 0;\n        }\n    }\n    else\n    {\n        if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, r8<8>, 0x0<64>, cc_ndep<8>))\n        {\n            v2 = ((v2 * 11805916207174113035 >> 64) + v2 >> 6) - (v2 >> 63);\n            v8 = v1 - (((v1 * 11805916207174113035 >> 64) + v1 >> 6) - (v1 >> 63)) * 100;\n        }\n    }\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, r8<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = 0;\n        v6 = [D] amd64g_calculate_condition(0x0<64>, 0x34<64>, rdx<8>, 0x3c<64>, cc_ndep<8>);\n        if (v7 == 0)\n        {\n            v9 = v1 * 60 + v10;\n            v11 = [D] amd64g_calculate_condition(0x0<64>, 0x4<64>, Mul(rdx<8>, 0x3c<64>), r8<8>, cc_ndep<8>);\n        }\n        else\n        {\n            v1 = 0;\n            v9 = v1 * 60 - v12;\n            v11 = ((v9 ^ v12) & (v9 ^ v9 - v12)) >> 63;\n        }\n        v13 = 0;\n    }\n    else\n    {\n        v9 = v8 + v2 * 60;\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, r8<8>, 0x0<64>, cc_ndep<8>) || rcx<4> == 0 && v11 == 0)\n    {\n        v13 = 0;\n        if (v9 + 1440 <= 2880)\n        {\n            v14 = (unsigned int)v9 * 60;\n            v13 = 1;\n            *(v15) = v14;\n        }\n    }\n    return v13;\n}\n"
        },
        {
            "funcName": "sub_4050c0",
            "funcStartAddr": "0x4050c0",
            "funcEndAddr": "0x4050f5",
            "decompiledFuncCode": "int sub_4050c0()\n{\n    __fprintf_chk();\n    return 1;\n}\n"
        },
        {
            "funcName": "sub_40a0e0",
            "funcStartAddr": "0x40a0e0",
            "funcEndAddr": "0x40b218",
            "decompiledFuncCode": "int sub_40a0e0()\n{\n    unsigned long long v0;  // [bp-0x1e8]\n    void tmp_38;  // tmp #38\n    unsigned int *|unsigned long long v1;  // [bp-0xe8]\n    unsigned long long v2;  // [bp-0xe0]\n    unsigned long long v3;  // [bp-0xd8]\n    char|unsigned long|unsigned long long v4;  // [bp-0xc0]\n    char|unsigned long|unsigned long long v5;  // [bp-0xb8]\n    char v6;  // [bp-0xa9]\n    unsigned long v7;  // [bp-0xa8]\n    unsigned long long v8;  // [bp-0xa0]\n    char|unsigned long long v9;  // [bp-0x98]\n    unsigned int|unsigned long|unsigned long long v10;  // [bp-0x90]\n    unsigned int|unsigned long long v11;  // [bp-0x88]\n    unsigned int|unsigned long long v12;  // [bp-0x80]\n    unsigned long long v13;  // [bp-0x78]\n    unsigned long long v14;  // [bp-0x70]\n    unsigned long v15;  // [bp-0x68]\n    unsigned int v16;  // [bp-0x60]\n    char v17;  // [bp-0x5c]\n    char v18;  // [bp-0x5b]\n    unsigned long long v19;  // [bp-0x5a]\n    char v20;  // [bp-0x59]\n    unsigned long long v21;  // [bp-0x58]\n    unsigned long long v22;  // [bp-0x50]\n    char v23;  // [bp-0x44]\n    unsigned long long v24;  // [bp-0x40]\n    unsigned int *v25;  // [bp+0x8]\n    unsigned long long v26;  // [bp+0x10]\n    void *v27;  // [bp+0x18]\n    unsigned long long v28;  // rdi\n    unsigned long long v29;  // r15\n    unsigned long v30;  // r8\n    unsigned long long v31;  // rcx\n    unsigned long v32;  // r9\n    char|unsigned long|unsigned long long v33;  // r10\n    unsigned long long v34;  // rbp\n    unsigned long long v35;  // r13\n    unsigned long long v36;  // r13\n    unsigned long long v37;  // r8\n    unsigned long long v38;  // r9\n    unsigned long|unsigned long long v39;  // r11\n    unsigned long|unsigned long long v40;  // rbp\n    unsigned long long v41;  // rax\n    unsigned long long v42;  // rax\n    char v43;  // al\n    unsigned long v44;  // rdx\n    unsigned long long v45;  // rcx\n    unsigned short|unsigned long|unsigned long long v46;  // rax\n    unsigned long long v47;  // rcx\n    unsigned long long v48;  // r13\n    unsigned long long v49;  // r13\n    unsigned long long v50;  // r13\n    char v51;  // r13b\n    unsigned long long v52;  // r13\n    unsigned long long v53;  // rdx\n    unsigned long long v54;  // rbx\n    unsigned long long v55;  // r13\n    unsigned long long v56;  // r15\n    unsigned long long v57;  // rbp\n    unsigned long long v58;  // r14\n    char *v59;  // rax\n    unsigned long long v60;  // rcx\n    unsigned long long v62;  // r13\n    unsigned long v63;  // r13\n    unsigned long long v64;  // rcx\n    char v65;  // al\n    char v66;  // al\n    unsigned int v67;  // eax\n    char v68;  // al\n    unsigned int v70;  // eax\n    char v71;  // al\n    unsigned long v72;  // rdx\n    unsigned long long v73;  // rax\n    char v74;  // al\n    unsigned long long v75;  // rdx\n    unsigned long long v76;  // rbx\n    unsigned int|char|unsigned long|unsigned long long v77;  // rsi\n    unsigned int|char|unsigned long|unsigned long long v78;  // r13\n    unsigned long long v79;  // r14\n    unsigned long|unsigned long long v80;  // r12\n    unsigned int v81;  // r13d\n    unsigned long long v82;  // r11\n    char v83;  // dl\n    char|unsigned long v84;  // rax\n    unsigned long long v85;  // cc_dep1\n    char|unsigned long v86;  // dl\n    unsigned long long v87;  // rax\n    unsigned long long v88;  // rax\n    unsigned long long v89;  // rdx\n    unsigned long long v90;  // rax\n    unsigned long long v91;  // rax\n\n    v29 = v28;\n    v79 = v77;\n    v78 = v30;\n    v7 = v77;\n    v4 = v31;\n    v16 = v32;\n    v15 = __ctype_get_mb_cur_max();\n    v17 = ((unsigned int)v32 & 2) != 0;\n    switch ((unsigned int)v30)\n    {\n    case 0:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 0;\n        v8 = 0;\n        v13 = 0;\n    case 1:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 0;\n        v8 = 1;\n        v13 = \"'\";\n    case 2:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 0;\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v76 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 0;\n            v8 = 1;\n            v13 = \"'\";\n        }\n    case 3:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"'\";\n    case 4:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 1;\n            if (v77 == 0)\n            {\n                v6 = 1;\n                v33 = 0;\n                v76 = 1;\n                v78 = 2;\n                v14 = 0;\n                v18 = 0;\n                v17 = 0;\n                v8 = 1;\n                v13 = \"'\";\n            }\n            else\n            {\n                v84 = 0;\n                v6 = 1;\n                v14 = 0;\n            }\n        }\n    case 5:\n        if (((char)v32 & 2) == 0)\n        {\n            if (v77 != 0)\n            {\n                *((char *)v28) = 34;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n                v14 = 0;\n            }\n            else\n            {\n                v14 = 0;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n            }\n            v17 = 0;\n            v76 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v76 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n    case 6:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 5;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"\\\"\";\n    case 7:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 1;\n        v8 = 0;\n        v13 = 0;\n    case 8: case 9: case 10:\n        if (v30 != 10)\n        {\n            v4 = v4;\n            v26 = (unsigned int)sub_409fe0();\n            v27 = (unsigned long long)(unsigned int)sub_409fe0();\n        }\n        v76 = 0;\n        if (((char)v32 & 2) == 0)\n        {\n            v78 = (char)*((char *)v26);\n            if (*((char *)v26) != 0)\n            {\n                do\n                {\n                    if (v77 > v76)\n                    {\n                        *((unsigned long long *)(v28 + v76)) = v78;\n                    }\n                    v76 += 1;\n                    v78 = (char)*((char *)(v26 + v76));\n                }\n                while ((char)v78 != 0);\n            }\n        }\n        v5 = v82;\n        v6 = 1;\n        v8 = strlen(v27);\n        v18 = 0;\n        v13 = v27;\n        v14 = 0;\n        v4 = 1;\n    default:\n        abort(); /* do not return */\n    }\n    v82 = v4;\n    while (true)\n    {\n        v38 = v82;\n        v80 = 0;\n        v39 = v78;\n        while (true)\n        {\n            v78 = v38 != v80;\n            if (v38 == -1)\n            {\n                v78 = *((char *)(v7 + v80)) != 0;\n            }\n            if (v78 != 0)\n            {\n                v37 = v7 + v80;\n                v5 = (unsigned int)v39 != 2 & v4;\n                if (((unsigned int)v39 != 2 & v4) != 0)\n                {\n                    v78 = v8;\n                    if (v8 != 0)\n                    {\n                        v34 = v80 + v78;\n                        if (v38 == -1 && v78 > 1)\n                        {\n                            v11 = v39;\n                            v10 = v33;\n                            v9 = v37;\n                            v38 = strlen(v7);\n                        }\n                        if (v34 <= v38)\n                        {\n                            v12 = v39;\n                            v11 = v38;\n                            v10 = v33;\n                            v9 = v37;\n                            v78 = memcmp(v37, v13, v8);\n                            v37 = v9;\n                            v33 = (char)v10;\n                            v38 = v11;\n                            v39 = v12;\n                            if (v17 == 0 && v78 == 0)\n                            {\n                                v40 = (char)*((char *)v37);\n                                switch (*((char *)v37))\n                                {\n                                case 0:\n                                    v77 = (unsigned int)v39 == 2;\n                                    v78 = (unsigned int)(0 ^ 1);\n                                    v78 = (char)(0 ^ 1) & (unsigned int)v39 == 2;\n                                    if (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0)\n                                    {\n                                        if (v77 > v76)\n                                        {\n                                            *((char *)(v28 + v76)) = 39;\n                                        }\n                                        if (v77 > v76 + 1)\n                                        {\n                                            *((char *)(v28 + v76 + 1)) = 36;\n                                        }\n                                        if (v77 > v76 + 2)\n                                        {\n                                            *((char *)(v28 + v76 + 2)) = 39;\n                                        }\n                                        v47 = v76 + 3;\n                                        v76 += 4;\n                                        v33 = rax<8>;\n                                        v78 = 0;\n                                        v40 = 48;\n                                    }\n                                    else\n                                    {\n                                        v47 = v76;\n                                        v78 = 0;\n                                        v76 = v47 + 1;\n                                        v78 = v78;\n                                        v40 = 48;\n                                        v78 = 0;\n                                        v40 = 48;\n                                        if (1 < v38)\n                                        {\n                                            v9 = *((char *)(v7 + 0 + 1));\n                                            if (((unsigned int)(char)*((char *)(v7 + 0 + 1)) - 48 & 255) <= 9)\n                                            {\n                                                if (v77 > v76)\n                                                {\n                                                    *((char *)(v28 + v76)) = 48;\n                                                }\n                                                if (v77 > v47 + 2)\n                                                {\n                                                    *((char *)(v28 + v47 + 2)) = 48;\n                                                }\n                                                v76 = v47 + 3;\n                                                v40 = 48;\n                                            }\n                                        }\n                                    }\n                                    if ((v77 > v76 || ((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0) && (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) == 0 || v77 > v76 + 3))\n                                    {\n                                        *((char *)(v28 + v47)) = 92;\n                                        v33 = v78;\n                                    }\n                                case 7:\n                                    v40 = 97;\n                                case 8:\n                                    v77 = 0;\n                                    v78 = 0;\n                                    v40 = 98;\n                                    v73 = (unsigned int)v33 ^ 1;\n                                    v74 = (char)((unsigned int)v33 ^ 1) & v77;\n                                    if (((char)((unsigned int)v33 ^ 1) & v77) != 0)\n                                    {\n                                        if (v79 > v76)\n                                        {\n                                            *((char *)(v29 + v76)) = 39;\n                                        }\n                                        if (v76 + 1 < v79)\n                                        {\n                                            *((char *)(v29 + v76 + 1)) = 36;\n                                        }\n                                        v75 = v76 + 2;\n                                        if (v76 + 2 < v79)\n                                        {\n                                            *((char *)(v29 + v76 + 2)) = 39;\n                                        }\n                                        v76 += 3;\n                                        v33 = rax<8>;\n                                    }\n                                    if (v79 > v76)\n                                    {\n                                        *((char *)(v29 + v76)) = 92;\n                                    }\n                                    v76 += 1;\n                                    v80 += 1;\n                                case 13:\n                                    v40 = 13;\n                                    v45 = 114;\n                                    v77 = (unsigned int)v39 == 2;\n                                    if (v4 != 0)\n                                    {\n                                        v40 = v45;\n                                        v78 = 0;\n                                    }\n                                case 32:\n                                    v41 = v5;\n                                case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                                    v77 = 0;\n                                case 35: case 126:\n                                    v42 = v5;\n                                    v48 = v5;\n                                    v77 = 0;\n                                    v5 = v42;\n                                    v78 = ((unsigned int)v4 ^ 1 | (unsigned int)v77) ^ 1;\n                                    v78 = (char)(((unsigned int)v4 ^ 1 | (unsigned int)v77) ^ 1) | v17;\n                                    if (v17 != 0 || (char)(((unsigned int)v4 ^ 1 | (unsigned int)v77) ^ 1) != 0)\n                                    {\n                                        v78 = 0;\n                                        v72 = (unsigned int)((unsigned long long)v25[v40 % 32] >> ((char)v40 & 31)) & 1;\n                                        v77 = (unsigned int)v39 == 2;\n                                    }\n                                    if (v17 == 0)\n                                    {\n                                        v77 = (unsigned int)v39 == 2;\n                                        v80 += 1;\n                                        v46 = (v78 ^ 1) & (unsigned int)v33;\n                                        if (v46 != 0)\n                                        {\n                                            if (v79 > v76)\n                                            {\n                                                *((char *)(v29 + v76)) = 39;\n                                            }\n                                            if (v79 > v76 + 1)\n                                            {\n                                                *((char *)(v29 + v76 + 1)) = 39;\n                                            }\n                                            v76 += 2;\n                                            v33 = 0;\n                                        }\n                                    }\n                                case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                                    v41 = v5;\n                                case 92:\n                                    v44 = v4;\n                                    v40 = 92;\n                                    v45 = 92;\n                                    v77 = v4 & v17 & v8 != 0;\n                                    if ((v4 & v17 & v8 != 0) != 0)\n                                    {\n                                        v80 = 1;\n                                        v46 = 0;\n                                        v78 = 0;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (v8 == 0 || v78 != 0 || v34 > v38)\n                    {\n                        v40 = (char)*((char *)v37);\n                        switch (*((char *)v37))\n                        {\n                        case 0:\n                            if (v17 == 0)\n                            {\n                                v5 = 0;\n                            }\n                            else\n                            {\n                                v4 = (unsigned int)v39 == 2;\n                            }\n                        case 7:\n                            v40 = 97;\n                            break;\n                        case 8:\n                            v40 = 98;\n                            v77 = 0;\n                            v78 = 0;\n                            if (v17 != 0)\n                            {\n                                v87 = v77;\n                            }\n                        case 9:\n                            v40 = 116;\n                        case 10:\n                            v40 = 110;\n                        case 11:\n                            v40 = 118;\n                            break;\n                        case 12:\n                            v40 = 102;\n                            break;\n                            if (v17 == 0)\n                            {\n                                v78 = 0;\n                            }\n                            else\n                            {\n                                v87 = 0;\n                                *((unsigned long long *)&v4) = v4 & v87;\n                            }\n                        case 13:\n                            v5 = 0;\n                        case 32:\n                            v41 = 0;\n                            v40 = 32;\n                            v50 = v5;\n                            v5 = v41;\n                            v78 = 0;\n                        case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                            v5 = 0;\n                        case 35: case 126:\n                            v42 = 0;\n                        case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                            v41 = 0;\n                        case 39:\n                            v5 = 0;\n                        case 63:\n                            v5 = 0;\n                        case 92:\n                            v5 = 0;\n                        case 123: case 125:\n                            v5 = 0;\n                        default:\n                            v5 = 0;\n                        }\n                    }\n                }\n                else\n                {\n                    v40 = (char)*((char *)v37);\n                    switch (*((char *)v37))\n                    {\n                    case 0:\n                        if (v4 == 0)\n                        {\n                            v80 += 1;\n                            v5 = 0;\n                            v77 = (unsigned int)v39 == 2;\n                            v36 = 0;\n                            v40 = 0;\n                            break;\n                        }\n                    case 7:\n                        v40 = 7;\n                        v45 = 97;\n                        v77 = (unsigned int)v39 == 2;\n                    case 8:\n                        v40 = 8;\n                        v45 = 98;\n                        v77 = (unsigned int)v39 == 2;\n                    case 9:\n                        v40 = 9;\n                        v45 = 116;\n                    case 10:\n                        v40 = 10;\n                        v45 = 110;\n                        v77 = (unsigned int)v39 == 2;\n                        v5 = v17 & (unsigned int)v39 == 2;\n                    case 11:\n                        v40 = 11;\n                        v45 = 118;\n                        v77 = (unsigned int)v39 == 2;\n                    case 12:\n                        v40 = 12;\n                        v45 = 102;\n                        v77 = (unsigned int)v39 == 2;\n                    case 13:\n                        v40 = 13;\n                        v45 = 114;\n                    case 32:\n                        v40 = 32;\n                        v77 = (unsigned int)v39 == 2;\n                        if (v17 != 0)\n                        {\n                            break;\n                        }\n                    case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                        v77 = (unsigned int)v39 == 2;\n                        v35 = 0;\n                    case 35: case 126:\n                        v77 = (unsigned int)v39 == 2;\n                    case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                        v77 = (unsigned int)v39 == 2;\n                        break;\n                    case 39:\n                        if ((unsigned int)v39 == 2)\n                        {\n                            if (v77 != 0)\n                            {\n                                v53 = 0;\n                            }\n                            if (v77 == 0 || v14 != 0)\n                            {\n                                if (v77 > v76)\n                                {\n                                    *((char *)(v28 + v76)) = 39;\n                                }\n                                if (v77 > v76 + 1)\n                                {\n                                    *((char *)(v28 + v76 + 1)) = 92;\n                                }\n                                if (v77 > v76 + 2)\n                                {\n                                    v53 = v77;\n                                    *((char *)(v28 + v76 + 2)) = 39;\n                                    v79 = v14;\n                                }\n                                else\n                                {\n                                    v53 = v77;\n                                    v79 = v14;\n                                }\n                            }\n                            v18 = v78;\n                            v76 += 3;\n                            v78 = 0;\n                            v33 = 0;\n                            v14 = v79;\n                            v40 = 39;\n                            v79 = v53;\n                        }\n                        else\n                        {\n                            v18 = v78;\n                            v77 = 0;\n                            v40 = 39;\n                            break;\n                        }\n                    case 63:\n                        if ((unsigned int)v39 != 2)\n                        {\n                            v40 = 63;\n                            v77 = (unsigned int)v39 == 2;\n                            v52 = 0;\n                            break;\n                            v77 = v7;\n                            v40 = (char)*((char *)(v77 + 2));\n                            v77 = 0x7000a38200000000;\n                            v0 = 0x7000a38200000000;\n                            v77 = 0;\n                            v62 = 0;\n                            v40 = 63;\n                            break;\n                            if (v79 > v76)\n                            {\n                                *((char *)(v28 + v76)) = 63;\n                            }\n                            if (v79 > v76 + 1)\n                            {\n                                *((char *)(v28 + v76 + 1)) = 34;\n                            }\n                            if (v79 > v76 + 2)\n                            {\n                                *((char *)(v28 + v76 + 2)) = 34;\n                            }\n                            if (v79 > v76 + 3)\n                            {\n                                *((char *)(v28 + v76 + 3)) = 63;\n                            }\n                            v76 += 4;\n                            v77 = 0;\n                            v78 = 0;\n                            v80 = 2;\n                            v78 = v78;\n                            v78 = 0;\n                        }\n                        else\n                        {\n                            v78 = 0;\n                            v78 = 0;\n                            v40 = 63;\n                        }\n                    case 92:\n                        if ((unsigned int)v39 == 2)\n                        {\n                            v80 += 1;\n                            v46 = v33;\n                            v78 = 0;\n                            v40 = 92;\n                        }\n                    case 123: case 125:\n                        v43 = v38 != 1;\n                        if (v38 == -1)\n                        {\n                            v43 = *((char *)(v7 + 1)) != 0;\n                        }\n                        v77 = (unsigned int)v39 == 2;\n                        if (v43 != 0)\n                        {\n                            v55 = 0;\n                            break;\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v81 = v39;\n                v82 = v38;\n                v83 = v81 == 2;\n                if ((v81 == 2 & v17) == 0 || v76 != 0)\n                {\n                    v84 = (unsigned int)v17 ^ 1;\n                    v85 = v83 & (char)((unsigned int)v17 ^ 1);\n                    v86 = v83 & (char)((unsigned int)v17 ^ 1);\n                    if ((char)v85 == 0)\n                    {\n                        v86 = v84;\n                    }\n                    else if (v18 != 0)\n                    {\n                        if (v6 == 0)\n                        {\n                            v84 = v79 == 0 & v14 != 0;\n                            if ((v79 == 0 & v14 != 0) == 0)\n                            {\n                                v86 = v18;\n                            }\n                        }\n                        else\n                        {\n                            v3 = v27;\n                            v2 = v26;\n                            v1 = v25;\n                            v76 = (unsigned int)sub_40a0e0();\n                        }\n                    }\n                }\n            }\n            if (v6 == 0 && v78 == 0 && (char)v85 != 0 && v18 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && (v79 == 0 & v14 != 0) == 0 || v78 == 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && v18 == 0 || (char)v85 == 0 && v78 == 0 && ((v81 == 2 & v17) == 0 || v76 != 0))\n            {\n                v88 = v13;\n                if (v13 != 0 && v86 != 0)\n                {\n                    v89 = (char)*((char *)v88);\n                    if (*((char *)v88) != 0)\n                    {\n                        v90 = v88 - v76;\n                        do\n                        {\n                            if (v79 > v76)\n                            {\n                                *((unsigned long long *)(v29 + v76)) = v89;\n                            }\n                            v76 += 1;\n                            v89 = (char)*((char *)(v90 + v76));\n                        }\n                        while ((char)v89 != 0);\n                    }\n                }\n                if (v79 > v76)\n                {\n                    *((char *)(v29 + v76)) = 0;\n                }\n            }\n            if (v15 == 1)\n            {\n                v11 = v39;\n                v10 = v38;\n                v9 = v33;\n                v46 = (unsigned short)*((short *)(*((long long *)(unsigned long long)__ctype_b_loc()) + v40 * 2));\n                tmp_38 = v46 & 0x4000;\n                v46 &= 0x4000;\n                v51 = (tmp_38 & 65535) != 0;\n                v77 = (tmp_38 & 65535) == 0 & v4;\n                if (v77 != 0)\n                {\n                    v77 = v4;\n                    v78 = 0;\n                }\n            }\n            else\n            {\n                v24 = 0;\n                if (v38 == -1)\n                {\n                    v11 = v39;\n                    v10 = v33;\n                    v9 = v37;\n                    v38 = strlen(v7);\n                }\n                v21 = v76;\n                v22 = v37;\n                v54 = 0;\n                v19 = v33;\n                *((unsigned long long *)&v20) = v40;\n                v11 = v29;\n                v12 = v79;\n                v9 = v38;\n                *((unsigned long *)&v10) = v39;\n                do\n                {\n                    v56 = v80 + v54;\n                    v57 = v7 + v80 + v54;\n                    v46 = sub_40d310();\n                    v58 = v46;\n                    if (v46 != -1 && v46 != -2 && v46 != 0)\n                    {\n                        if (v10 == 2 && v17 != 0 && v46 != 1)\n                        {\n                            v59 = v7 + v77 + 1;\n                            v77 = v7 + v58 + v77;\n                            while (true)\n                            {\n                                v60 = (unsigned int)*(v59) - 91;\n                                if ((8589934635 & 1 << (v60 & 63)) == 0 || ((unsigned int)*(v59) - 91 & 255) > 33)\n                                {\n                                    v59 = &v59[1];\n                                    if (v77 == v59)\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                            if ((8589934635 & 1 << (v60 & 63)) == 0 || ((unsigned int)*(v59) - 91 & 255) > 33)\n                            {\n                                v78 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                                v54 += v58;\n                                v46 = mbsinit((unsigned int)&v24);\n                            }\n                        }\n                        v78 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                        v54 += v58;\n                        v46 = mbsinit((unsigned int)&v24);\n                    }\n                    if (v46 == -1)\n                    {\n                        v28 = v54;\n                        v40 = v20;\n                        v76 = v21;\n                        v78 = 0;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v79 = v12;\n                        v38 = v9;\n                        v39 = v10;\n                        v77 = v4;\n                    }\n                    if (v46 == -2)\n                    {\n                        v38 = v9;\n                        v77 = v56;\n                        v46 = v54;\n                        v28 = v54;\n                        v33 = (char)v19;\n                        v40 = v20;\n                        v76 = v21;\n                        v29 = v11;\n                        v79 = v12;\n                        v39 = v10;\n                        if (v77 < v9 && *((char *)v57) != 0)\n                        {\n                            do\n                            {\n                                v46 += 1;\n                            }\n                            while (v46 < v9 && *((char *)(v22 + v46)) != 0);\n                            v28 = v46;\n                        }\n                        v77 = v4;\n                        v78 = 0;\n                    }\n                    if (v46 == 0 || (unsigned int)v46 != 0 && v46 != -1 && v46 != -2)\n                    {\n                        v28 = v54;\n                        v40 = v20;\n                        v76 = v21;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v77 = (unsigned int)v78 ^ 1;\n                        v79 = v12;\n                        v38 = v9;\n                        v39 = v10;\n                        v77 = (char)((unsigned int)v78 ^ 1) & v4;\n                    }\n                }\n                while (v28 <= 1);\n                if (v46 == -1 || v46 == -2 || v46 == 0 || (unsigned int)v46 != 0)\n                {\n                    v9 = v78;\n                    v77 = 0;\n                    v63 = v17;\n                    v64 = v28 + v80;\n                    v28 = v5;\n                }\n            }\n            if (false)\n            {\n                v5 = v42;\n                v49 = 0;\n            }\n            if (v77 != 0)\n            {\n                v9 = v78;\n                v77 = 0;\n                v63 = v17;\n                v64 = v28 + v80;\n                v28 = v5;\n                while (true)\n                {\n                    if (v77 != 0)\n                    {\n                        v65 = (unsigned int)v39 == 2;\n                        if (v63 == 0)\n                        {\n                            v77 = (unsigned int)v33 ^ 1;\n                            v66 = v4 & (char)((unsigned int)v33 ^ 1);\n                            if ((v4 & (char)((unsigned int)v33 ^ 1)) != 0)\n                            {\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 39;\n                                }\n                                if (v79 > v76 + 1)\n                                {\n                                    *((char *)(v29 + v76 + 1)) = 36;\n                                }\n                                v77 = v76 + 2;\n                                if (v79 > v76 + 2)\n                                {\n                                    *((char *)(v29 + v76 + 2)) = 39;\n                                }\n                                v76 += 3;\n                                v33 = v46;\n                            }\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            if (v79 > v76 + 1)\n                            {\n                                v67 = v40;\n                                v68 = (char)v40 % 64;\n                                *((unsigned long long *)(v29 + v76 + 1)) = (unsigned long long)(unsigned int)rax<4> + 48;\n                            }\n                            v46 = v76 + 2;\n                            if (v79 > v76 + 2)\n                            {\n                                v70 = v40;\n                                v71 = (char)v40 % 8;\n                                v46 = (unsigned int)((rax<4> & 7) + 48);\n                                *((unsigned long long *)(v29 + v76 + 2)) = v46;\n                            }\n                            v80 += 1;\n                            v76 += 3;\n                            v40 = ((unsigned int)v40 & 7) + 48;\n                            if (v80 < v64)\n                            {\n                                v77 = v77;\n                            }\n                            else\n                            {\n                                v78 = (char)v9;\n                            }\n                        }\n                        else\n                        {\n                            v4 = v65;\n                        }\n                    }\n                    else\n                    {\n                        v46 = (v77 ^ 1) & (unsigned int)v33;\n                        if (v28 != 0)\n                        {\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            v76 += 1;\n                        }\n                        v80 += 1;\n                        if (v80 >= v64)\n                        {\n                            v78 = (char)v9;\n                        }\n                        else if (v46 != 0)\n                        {\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 39;\n                            }\n                            v46 = v76 + 1;\n                            if (v79 > v76 + 1)\n                            {\n                                *((char *)(v29 + v76 + 1)) = 39;\n                            }\n                            v76 += 2;\n                            v28 = 0;\n                            v33 = 0;\n                        }\n                        else\n                        {\n                            v28 = 0;\n                        }\n                    }\n                    if ((v77 == 0 || v80 < v64) && (v77 == 0 || v63 == 0) && (v80 < v64 || v77 != 0))\n                    {\n                        if (v79 > v76)\n                        {\n                            *((unsigned long long *)(v29 + v76)) = v40;\n                        }\n                        v40 = (char)*((char *)(v7 + v80));\n                        v76 += 1;\n                    }\n                }\n            }\n            if ((v76 == 0 || v17 != 0) && (v78 == 0 || v17 != 0) && (v17 != 0 || (v81 == 2 & v17) != 0))\n            {\n                v3 = v27;\n                v2 = v26;\n                v1 = 0;\n                v76 = (unsigned int)sub_40a0e0();\n            }\n            if (v76 < v79)\n            {\n                *((unsigned long long *)(v29 + v76)) = v40;\n            }\n            v76 += 1;\n            v6 = (v78 == 0? 0 : (unsigned int)(char)(char)(stack_base)[-169]);\n            if (v6 == 0 && v78 == 0 && (char)v85 != 0 && v18 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && (v79 == 0 & v14 != 0) == 0 || v78 == 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && v18 == 0 || (char)v85 == 0 && v78 == 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || v78 == 0 && v6 != 0 && (char)v85 != 0 && v18 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || (v76 == 0 || v17 != 0) && (v78 == 0 || v17 != 0) && (v17 != 0 || (v81 == 2 & v17) != 0))\n            {\n                v91 = v76;\n                return v91;\n            }\n        }\n        *((char *)v29) = 39;\n        v78 = 2;\n        v13 = \"'\";\n        v8 = 1;\n        v17 = 0;\n        *((unsigned long *)&v18) = v84;\n    }\n}\n"
        },
        {
            "funcName": "sub_40bb20",
            "funcStartAddr": "0x40bb20",
            "funcEndAddr": "0x40bb32",
            "decompiledFuncCode": "int sub_40bb20()\n{\n}\n"
        },
        {
            "funcName": "sub_4051c0",
            "funcStartAddr": "0x4051c0",
            "funcEndAddr": "0x40525e",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[232];\n    unsigned long long field_e8;\n} struct_0;\n\nextern unsigned long long g_415be0;\nextern unsigned long long g_415ee0;\n\nint sub_4051c0()\n{\n    unsigned long long v1;  // rdi\n    struct_0 *v2;  // r12\n    char *v3;  // rsi\n    char *v4;  // rbp\n    unsigned long long v5;  // rax\n    char *v6;  // rsi\n    char *v7;  // rsi\n    unsigned long long *v8;  // rbx\n    unsigned long long v9;  // rax\n    unsigned long long *v10;  // rbx\n    char *v11;  // rsi\n    unsigned long long *v12;  // rax\n    unsigned long long v13;  // rax\n    unsigned long long *v14;  // rax\n\n    v2 = v1;\n    v4 = v3;\n    v6 = \"GMT\";\n    v10 = &g_415ee0;\n    while (true)\n    {\n        v5 = strcmp(v4, v6);\n        if (v5 == 0)\n        {\n            break;\n        }\n        v10 = &v10[2];\n        v6 = *(v10);\n        v7 = v2->field_e8;\n        v8 = &v2->field_e8;\n        if (v2->field_e8 != 0)\n        {\n            while (true)\n            {\n                v9 = strcmp(v4, v7);\n                if (v9 != 0)\n                {\n                    v8 = &v8[2];\n                    v7 = *(v8);\n                    if (*(v8) == 0)\n                    {\n                        break;\n                    }\n                }\n                else\n                {\n                    v12 = v8;\n                    return v12;\n                }\n            }\n        }\n        v10 = &g_415be0;\n        v11 = \"WET\";\n        while (true)\n        {\n            v13 = strcmp(v4, v11);\n            if (v13 != 0)\n            {\n                v10 = &v10[2];\n                v11 = *(v10);\n                return 0;\n            }\n        }\n    }\n    v14 = v10;\n    return v14;\n}\n"
        },
        {
            "funcName": "sub_40c2f0",
            "funcStartAddr": "0x40c2f0",
            "funcEndAddr": "0x40c33a",
            "decompiledFuncCode": "int sub_40c2f0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40e0d0",
            "funcStartAddr": "0x40e0d0",
            "funcEndAddr": "0x40e12c",
            "decompiledFuncCode": "int sub_40e0d0()\n{\n    unsigned long long v1;  // r12\n    unsigned long long v2;  // rax\n    unsigned int *v3;  // rdi\n\n    v1 = __fpending();\n    v2 = sub_40c420();\n    if (((char)*(v3) & 32) == 0)\n    {\n        if ((unsigned int)v2 != 0 && v1 == 0)\n        {\n            v2 = 0 - (unsigned int)(char)(*(__errno_location()) != 9);\n        }\n    }\n    else\n    {\n        if ((unsigned int)v2 == 0)\n        {\n            *(__errno_location()) = 0;\n            v2 = -18446744069414584321;\n        }\n    }\n    if ((unsigned int)v2 != 0 && (v1 != 0 || ((char)*(v3) & 32) != 0))\n    {\n        v2 = -18446744069414584321;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40b550",
            "funcStartAddr": "0x40b550",
            "funcEndAddr": "0x40b563",
            "decompiledFuncCode": "extern int512_t g_61b460;\n\nint sub_40b550()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned int v3;  // esi\n\n    v2 = (unsigned int)*((int *)((v1 == 0? &g_61b460 : v1) + 4));\n    *((unsigned int *)((v1 == 0? &g_61b460 : v1) + 4)) = v3;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40b9d0",
            "funcStartAddr": "0x40b9d0",
            "funcEndAddr": "0x40b9da",
            "decompiledFuncCode": "int sub_40b9d0()\n{\n}\n"
        },
        {
            "funcName": "sub_40ba50",
            "funcStartAddr": "0x40ba50",
            "funcEndAddr": "0x40babc",
            "decompiledFuncCode": "extern uint128_t g_61b460;\nextern uint128_t g_61b470;\nextern uint128_t g_61b480;\nextern unsigned long long g_61b490;\n\nint sub_40ba50()\n{\n    unsigned int|void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x20]\n    unsigned long v4;  // [bp-0x18]\n    unsigned long v6;  // rsi\n    unsigned long v7;  // rdx\n\n    *((uint128_t *)&v0) = g_61b460;\n    *((uint128_t *)&v1) = g_61b470;\n    *((uint128_t *)&v2) = g_61b480;\n    v4 = g_61b490;\n    v0 = 10;\n    if (v6 != 0 && v7 != 0)\n    {\n        v3 = v6;\n        v4 = v7;\n        return sub_40b310();\n    }\n    if (v6 == 0 || v7 == 0)\n    {\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_40b9b0",
            "funcStartAddr": "0x40b9b0",
            "funcEndAddr": "0x40b9c1",
            "decompiledFuncCode": "int sub_40b9b0()\n{\n}\n"
        },
        {
            "funcName": "sub_40d2f0",
            "funcStartAddr": "0x40d2f0",
            "funcEndAddr": "0x40d308",
            "decompiledFuncCode": "int sub_40d2f0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_40cc40();\n}\n"
        },
        {
            "funcName": "sub_402d70",
            "funcStartAddr": "0x402d70",
            "funcEndAddr": "0x402d7a",
            "decompiledFuncCode": "int sub_402d70()\n{\n}\n"
        },
        {
            "funcName": "sub_40ffa0",
            "funcStartAddr": "0x40ffa0",
            "funcEndAddr": "0x4119b9",
            "decompiledFuncCode": "int sub_40ffa0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_402620",
            "funcStartAddr": "0x402620",
            "funcEndAddr": "0x402738",
            "decompiledFuncCode": "extern unsigned int g_412ac4;\nextern int512_t g_4143d0;\nextern unsigned int g_414e36;\nextern unsigned int g_4179a4;\nextern unsigned long long stdout[7];\n\nint sub_402620()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v3;  // rsi\n    unsigned long v4;  // rdx\n    unsigned long v6;  // rdi\n    unsigned long long v10;  // rbx\n    char *v11;  // rax\n\n    v0 = v3;\n    v1 = v4;\n    if (sub_40de20() != 0)\n    {\n        if (v6 != \"%a, %d %b %Y %H:%M:%S %z\")\n        {\n            sub_404ba0();\n        }\n        else\n        {\n            setlocale(0x2, 0x414e36);\n            sub_404ba0();\n            setlocale(0x2, 0x4179a4);\n        }\n        v11 = stdout[5];\n        if (stdout[5] < stdout[6])\n        {\n            stdout[5] = stdout[5] + 1;\n            *(v11) = 10;\n        }\n        else\n        {\n            __overflow();\n        }\n        return 1;\n    }\n    sub_404c00();\n    v10 = (unsigned int)sub_40bb60();\n    error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x412ac4, 0x5));\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_40b500",
            "funcStartAddr": "0x40b500",
            "funcEndAddr": "0x40b50f",
            "decompiledFuncCode": "extern int512_t g_61b460;\n\nint sub_40b500()\n{\n    unsigned long v1;  // rdi\n    unsigned int v2;  // esi\n\n    *((unsigned int *)(v1 == 0? &g_61b460 : v1)) = v2;\n    return &g_61b460;\n}\n"
        },
        {
            "funcName": "sub_40d60f",
            "funcStartAddr": "0x40d60f",
            "funcEndAddr": "0x40da22",
            "decompiledFuncCode": "int sub_40d60f() { crash_skku;\n}"
        },
        {
            "funcName": "sub_403100",
            "funcStartAddr": "0x403100",
            "funcEndAddr": "0x403108",
            "decompiledFuncCode": "extern unsigned long long g_61b348;\n\nint sub_403100()\n{\n    unsigned long long v1;  // rdi\n    unsigned long v2;  // rax\n\n    g_61b348 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40b612",
            "funcStartAddr": "0x40b612",
            "funcEndAddr": "0x40b63b",
            "decompiledFuncCode": "int sub_40b612()\n{\n    unsigned long v0;  // [bp-0x30]\n    unsigned long v1;  // [bp-0x28]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v4;  // [bp-0x10]\n    unsigned long v5;  // [bp-0x8]\n    unsigned long v7;  // r15\n    unsigned long v8;  // r14\n    unsigned long v9;  // r13\n    unsigned long v10;  // r12\n    unsigned long v11;  // rbx\n\n    v5 = v7;\n    v4 = v8;\n    v3 = v9;\n    v2 = v10;\n    v1 = stack_base + 0;\n    v0 = v11;\n}\n"
        },
        {
            "funcName": "sub_40c340",
            "funcStartAddr": "0x40c340",
            "funcEndAddr": "0x40c357",
            "decompiledFuncCode": "int sub_40c340()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_40c190();\n}\n"
        },
        {
            "funcName": "sub_40bac0",
            "funcStartAddr": "0x40bac0",
            "funcEndAddr": "0x40bac9",
            "decompiledFuncCode": "int sub_40bac0()\n{\n}\n"
        },
        {
            "funcName": "sub_40dac0",
            "funcStartAddr": "0x40dac0",
            "funcEndAddr": "0x40dae3",
            "decompiledFuncCode": "int sub_40dac0()\n{\n    unsigned long long v0;  // [bp-0x8]\n    unsigned long long *v2;  // rdi\n    unsigned long v3;  // rax\n    unsigned long long v4;  // rbx\n    void *v5;  // rbx\n    unsigned long long v7;  // rbx\n\n    if (v2 != 0)\n    {\n        v0 = v4;\n        while (true)\n        {\n            v5 = *(v2);\n            v2 = v5;\n            if (v5 == 0)\n            {\n                break;\n            }\n        }\n        v7 = v0;\n        return (unsigned long long)free(v2);\n    }\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_40d2b0",
            "funcStartAddr": "0x40d2b0",
            "funcEndAddr": "0x40d2c5",
            "decompiledFuncCode": "int sub_40d2b0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_40cc40();\n}\n"
        },
        {
            "funcName": "sub_40256b",
            "funcStartAddr": "0x40256b",
            "funcEndAddr": "0x40258a",
            "decompiledFuncCode": "extern unsigned long long program_invocation_short_name;\n\nint sub_40256b()\n{\n    unsigned long long v1;  // rax\n\n    v1 = &program_invocation_short_name;\n    if (false)\n    {\n        v1 = 0;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_40b710",
            "funcStartAddr": "0x40b710",
            "funcEndAddr": "0x40b71a",
            "decompiledFuncCode": "int sub_40b710()\n{\n}\n"
        },
        {
            "funcName": "sub_40c360",
            "funcStartAddr": "0x40c360",
            "funcEndAddr": "0x40c38e",
            "decompiledFuncCode": "int sub_40c360()\n{\n    unsigned int v1;  // rdi\n    unsigned int v2;  // rsi\n    unsigned long long v3;  // rax\n\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>)) && [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) == 0)\n    {\n        v3 = calloc(v1, v2);\n        if (v3 != 0)\n        {\n            return v3;\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>) || v3 == 0 || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) != 0)\n    {\n        sub_40c3e0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_40d550",
            "funcStartAddr": "0x40d550",
            "funcEndAddr": "0x40d602",
            "decompiledFuncCode": "int sub_40d550()\n{\n    char|unsigned long|unsigned long long v0;  // [bp-0x30]\n    unsigned long long *v2;  // rdx\n    unsigned long long v4;  // rdi\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rsi\n    unsigned long long *v7;  // rbx\n    unsigned long long *v8;  // rsi\n    unsigned long long v9;  // rdi\n    unsigned long long v10;  // rbp\n    unsigned long long v11;  // rdx\n    unsigned long long v12;  // rbx\n    unsigned long long *v13;  // rsi\n    unsigned long long v14;  // rdi\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // r14\n    unsigned long long v17;  // rdi\n\n    v5 = v4;\n    v7 = v6;\n    v8 = v2;\n    v9 = &v0;\n    v0 = *(v2);\n    v15 = v5();\n    if (v15 == 0)\n    {\n        v16 = *(v7);\n        v10 = 0;\n        if (*(v7) != 0)\n        {\n            while (true)\n            {\n                v11 = (v16 >> 1) + (v10 >> 1);\n                v12 = ((unsigned int)(v10 | v16) & 1) + (v16 >> 1) + (v10 >> 1);\n                if (v16 != v12 && v10 != ((unsigned int)(v10 | v16) & 1) + (v16 >> 1) + (v10 >> 1))\n                {\n                    break;\n                }\n                v0 = v12;\n                v13 = v2;\n                v14 = &v0;\n                v15 = r12<8>();\n                if (v15 == 0)\n                {\n                    v16 = v12;\n                    v12 = v10;\n                }\n                v10 = v12;\n            }\n            if (v15 == 0 && v10 != 0)\n            {\n                v0 = v10;\n                v17 = &v0;\n                return (long long)(stack_base)[-24]();\n            }\n        }\n    }\n    if (v10 == 0 || *(v7) == 0 || v15 != 0 || v15 != 0)\n    {\n        return v15;\n    }\n}\n"
        },
        {
            "funcName": "sub_40bad0",
            "funcStartAddr": "0x40bad0",
            "funcEndAddr": "0x40bae7",
            "decompiledFuncCode": "int sub_40bad0()\n{\n}\n"
        },
        {
            "funcName": "sub_40c050",
            "funcStartAddr": "0x40c050",
            "funcEndAddr": "0x40c108",
            "decompiledFuncCode": "int sub_40c050()\n{\n    unsigned int v0;  // [bp-0xa0]\n    void tmp_12;  // tmp #12\n    void tmp_8;  // tmp #8\n    unsigned long v1;  // [bp-0x98]\n    unsigned long long v2;  // [bp-0x90]\n    unsigned long v3;  // [bp-0x88]\n    unsigned long long v4;  // [bp-0x18]\n    unsigned long v5;  // [bp-0x10]\n    unsigned long long v6;  // [bp+0x8]\n    char v7;  // [bp+0x10]\n    unsigned long long v8;  // r11\n    unsigned long long v9;  // r8\n    unsigned long v10;  // r9\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // r8\n    unsigned long long *|unsigned long long v14;  // r10\n    unsigned long long v15;  // r9\n\n    v8 = 0;\n    v4 = v9;\n    v14 = &v6;\n    v13 = 32;\n    v1 = &v6;\n    v5 = v10;\n    v15 = 0;\n    v0 = 32;\n    v2 = stack_base + -56;\n    while (true)\n    {\n        if ((unsigned int)v13 <= 47)\n        {\n            tmp_12 = v13;\n            v13 = (unsigned int)v13 + 8;\n            v8 = 1;\n            v11 = v4;\n            v3 = v4;\n        }\n        else\n        {\n            tmp_8 = v14;\n            v14 = &v7;\n            v12 = v6;\n            v3 = v6;\n        }\n        if ((unsigned int)v13 <= 47 && v11 != 0 || (unsigned int)v13 > 47 && v12 != 0)\n        {\n            v15 += 1;\n        }\n        if (v8 != 0)\n        {\n            v0 = v13;\n        }\n        return sub_40bbf0();\n    }\n}\n"
        },
        {
            "funcName": "sub_40b8a0",
            "funcStartAddr": "0x40b8a0",
            "funcEndAddr": "0x40b909",
            "decompiledFuncCode": "int sub_40b8a0()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_40b310();\n}\n"
        },
        {
            "funcName": "sub_404bc0",
            "funcStartAddr": "0x404bc0",
            "funcEndAddr": "0x404bfa",
            "decompiledFuncCode": "int sub_404bc0()\n{\n    char v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long long v3;  // rdi\n    unsigned long long v4[2];  // rbx\n    unsigned long long v5;  // rax\n\n    v4 = v3;\n    v5 = clock_gettime();\n    if ((unsigned int)v5 != 0)\n    {\n        gettimeofday(&v0, NULL);\n        v4[0] = *((long long *)&v0);\n        v5 = v1 * 1000;\n        v4[1] = v1 * 1000;\n    }\n    return v5;\n}\n"
        },
        {
            "funcName": "sub_40c540",
            "funcStartAddr": "0x40c540",
            "funcEndAddr": "0x40c615",
            "decompiledFuncCode": "int sub_40c540()\n{\n    unsigned int v1[13];  // rsi\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rbp\n    unsigned long long v4;  // rbx\n    unsigned long long v5;  // r9\n    unsigned long long v6;  // r8\n    unsigned long long v7;  // r14\n    unsigned long long v8;  // rdx\n    unsigned long v9;  // rdi\n    unsigned long long *v10;  // rax\n    unsigned long long *v12;  // rdx\n    unsigned long long v13;  // rcx\n    unsigned long long v14;  // r10\n    unsigned long long *v15;  // rax\n    unsigned long long *v17;  // rdx\n    unsigned long long v18;  // rcx\n    unsigned int v19;  // r9d\n\n    v2 = v1[5 + 1];\n    v3 = v1[0];\n    v4 = (int)v1[6];\n    v5 = v1[5 + 1];\n    v14 = v1[0];\n    while ((unsigned int)v14 > v1[6])\n    {\n        for (v6 = (int)v1[6]; v5 < v1[6]; v19 = v5 + v7)\n        {\n            v7 = v14 - v6;\n            v8 = v6 - v5;\n            if ((unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n            {\n                v14 -= v8;\n                v10 = v9 + v5 * 8;\n                v12 = v14 - v5;\n                do\n                {\n                    v13 = *(v10);\n                    *(v10) = *((long long *)((char *)v10 + 0x8 * v12));\n                    *((unsigned long long *)((char *)v10 + 0x8 * v12)) = v13;\n                    v10 = &v10[1];\n                }\n                while (v9 + 8 + ((unsigned int)v8 - 1 + v5) * 8 != v10);\n                if ((unsigned int)v14 <= (unsigned int)v6)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v15 = v9 + v5 * 8;\n                v17 = v4 - v5;\n                do\n                {\n                    v18 = *(v15);\n                    *(v15) = *((long long *)((char *)v15 + 0x8 * v17));\n                    *((unsigned long long *)((char *)v15 + 0x8 * v17)) = v18;\n                    v15 = &v15[1];\n                }\n                while (v15 != v9 + 8 + (v7 - 1 + v5) * 8);\n            }\n        }\n        if (v5 >= v1[6] || (unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n        {\n            v1[6] = v3;\n            v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n            return stack_base + 0 - v6;\n        }\n    }\n    v1[6] = v3;\n    v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n    return stack_base + 0 - v6;\n}\n"
        },
        {
            "funcName": "sub_40dd50",
            "funcStartAddr": "0x40dd50",
            "funcEndAddr": "0x40ddef",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    char field_8;\n} struct_0;\n\nint sub_40dd50()\n{\n    char *v1;  // rbp\n    struct_0 *v3;  // rdi\n    unsigned long long v4;  // rax\n    unsigned long long v6;  // rax\n    unsigned long long v7;  // rax\n    unsigned int *v8;  // rbp\n\n    v1 = getenv(\"TZ\");\n    if (v1 != 0)\n    {\n        if (v3->field_8 != 0)\n        {\n            v4 = strcmp(&v3[1], v1);\n            if (v4 == 0)\n            {\n                return 1;\n            }\n        }\n    }\n    else\n    {\n        if (v3->field_8 == 0)\n        {\n            return 1;\n        }\n    }\n    if (v1 == 0 && v3->field_8 != 0 || v3->field_8 == 0 && v1 != 0 || v4 != 0 && v1 != 0)\n    {\n        if (v4 != 0)\n        {\n            v6 = sub_40da70();\n            if (v6 == 0)\n            {\n                v8 = __errno_location();\n                if (v8 != 1)\n                {\n                    sub_40dac0();\n                }\n                *(v8) = *(v8);\n                return 0;\n            }\n        }\n        if (v4 == 0 || v6 != 0)\n        {\n            v4 = (unsigned int)sub_40db40();\n            return v7;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_40de00",
            "funcStartAddr": "0x40de00",
            "funcEndAddr": "0x40de0c",
            "decompiledFuncCode": "int sub_40de00()\n{\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rax\n\n    if (v1 == 1)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_402750",
            "funcStartAddr": "0x402750",
            "funcEndAddr": "0x402d65",
            "decompiledFuncCode": "extern unsigned int g_412b3b;\nextern unsigned int g_412c58;\nextern unsigned int g_412c80;\nextern unsigned int g_412ce0;\nextern unsigned int g_412d28;\nextern unsigned int g_412d78;\nextern unsigned int g_412dc8;\nextern unsigned int g_412e50;\nextern unsigned int g_412ea0;\nextern unsigned int g_413000;\nextern unsigned int g_413090;\nextern unsigned int g_4131a0;\nextern unsigned int g_4131f0;\nextern unsigned int g_413278;\nextern unsigned int g_4132a8;\nextern unsigned int g_4132e0;\nextern unsigned int g_413368;\nextern unsigned int g_413440;\nextern unsigned int g_4134f0;\nextern unsigned int g_413598;\nextern unsigned int g_4135f8;\nextern unsigned int g_413688;\nextern unsigned int g_4137d8;\nextern unsigned int g_413848;\nextern unsigned int g_413940;\nextern unsigned int g_4139e0;\nextern unsigned int g_413b28;\nextern unsigned int g_413c00;\nextern unsigned int g_413cf0;\nextern unsigned int g_413e68;\nextern unsigned int g_413eb0;\nextern unsigned int g_413ed0;\nextern unsigned long long stdout;\n\nint sub_402750()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long v10;  // [bp-0x38]\n    unsigned long v11;  // [bp-0x30]\n    unsigned long long v12;  // [bp-0x28]\n    unsigned long long v13;  // [bp-0x20]\n    unsigned long v14;  // [bp-0x18]\n    unsigned long v15;  // [bp-0x8]\n    unsigned long v17;  // r12\n    unsigned long v18;  // rbx\n    unsigned int v19;  // edi\n    unsigned long long v48[2];  // rax\n    char *v49;  // rdi\n    char *v50;  // rsi\n    unsigned long long v51;  // rcx\n    unsigned long long v52;  // cc_dep1\n    unsigned long long v53;  // cc_dep2\n    unsigned long v54;  // d\n    char *v58;  // rax\n    char *v59;  // rax\n    unsigned long long v60;  // rax\n\n    v15 = v17;\n    v14 = v18;\n    if (v19 != 0)\n    {\n        dcgettext(0x0, 0x412c58, 0x5);\n        __fprintf_chk();\n    }\n    else\n    {\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x412c80, 0x5));\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x412ce0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x412d28, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x412d78, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x412dc8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x412e50, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x412ea0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x413000, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x413090, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4131a0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4131f0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x413278, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4132a8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4132e0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x413368, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x413440, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4134f0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x413598, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4135f8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x413688, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4137d8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x413848, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x413940, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4139e0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x413b28, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x413c00, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x413cf0, 0x5), stdout);\n        v0 = \"[\";\n        v48 = &v0;\n        v1 = \"test invocation\";\n        v2 = \"coreutils\";\n        v3 = \"Multi-call\";\n        v4 = \"sha224sum\";\n        v5 = \"sha2 utilities\";\n        v6 = \"sha256sum\";\n        v7 = \"sha2 utilities\";\n        v8 = \"sha384sum\";\n        v9 = \"sha2 utilities\";\n        v10 = \"sha512sum\";\n        v11 = \"sha2 utilities\";\n        v12 = 0;\n        v13 = 0;\n        while (true)\n        {\n            v48 = &v2;\n            v49 = v2;\n            if (v2 == 0)\n            {\n                break;\n            }\n            v50 = \"date\";\n            v51 = 5;\n            if ((v52 > v53) - 0 - (v52 < v53) == 0)\n            {\n                break;\n            }\n            while (v51 != 0)\n            {\n                v51 -= 1;\n                v52 = *(v50);\n                v53 = *(v49);\n                v49 = &v49[v54];\n                v50 = &v50[v54];\n                break;\n            }\n        }\n        if (v48[1] != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x412b3b, 0x5));\n            v59 = setlocale(0x5, 0x0);\n        }\n        else\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x412b3b, 0x5));\n            v58 = setlocale(0x5, 0x0);\n            if (v58 != 0)\n            {\n                v60 = strncmp(v58, \"en_\", 0x3);\n            }\n            if (v58 == 0 || v60 == 0)\n            {\n                __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x413eb0, 0x5));\n            }\n        }\n        if ((v48[1] == 0 || v59 != 0) && (v48[1] == 0 || strncmp(v59, \"en_\", 0x3) != 0) && (v58 != 0 || v48[1] != 0) && (v48[1] != 0 || v60 != 0))\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x413e68, 0x5));\n        }\n        if (v48[1] != 0 || v58 != 0 && v60 != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x413eb0, 0x5));\n        }\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x413ed0, 0x5));\n    }\n    exit(v19); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_40d210",
            "funcStartAddr": "0x40d210",
            "funcEndAddr": "0x40d266",
            "decompiledFuncCode": "extern unsigned int g_61b2f4;\nextern unsigned int g_61b2f8;\nextern unsigned int g_61b2fc;\nextern unsigned int g_61b4a0;\nextern unsigned int g_61b4a4;\nextern unsigned int g_61b4a8;\nextern unsigned long long g_61b4b0;\nextern unsigned long long g_61b4f0;\n\nint sub_40d210()\n{\n    unsigned int *v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp+0x8]\n\n    g_61b4a0 = g_61b2fc;\n    g_61b4a4 = g_61b2f8;\n    v1 = (unsigned int)v2;\n    v0 = &g_61b4a0;\n    g_61b2fc = g_61b4a0;\n    g_61b4f0 = g_61b4b0;\n    g_61b2f4 = g_61b4a8;\n    return sub_40cc40();\n}\n"
        },
        {
            "funcName": "sub_40b4f0",
            "funcStartAddr": "0x40b4f0",
            "funcEndAddr": "0x40b4ff",
            "decompiledFuncCode": "extern int512_t g_61b460;\n\nint sub_40b4f0()\n{\n    unsigned long v1;  // rdi\n\n    return *((int *)(v1 == 0? &g_61b460 : v1));\n}\n"
        },
        {
            "funcName": "sub_40b9a0",
            "funcStartAddr": "0x40b9a0",
            "funcEndAddr": "0x40b9ad",
            "decompiledFuncCode": "int sub_40b9a0()\n{\n}\n"
        },
        {
            "funcName": "sub_40cc40",
            "funcStartAddr": "0x40cc40",
            "funcEndAddr": "0x40d1a7",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned int field_0;\n    unsigned int field_4;\n    char padding_8[24];\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned int field_30;\n} struct_1;\n\ntypedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    unsigned int field_18;\n    char padding_1c[4];\n    unsigned long long field_20;\n    unsigned int field_28;\n    unsigned int field_2c;\n    unsigned int field_30;\n} struct_0;\n\nextern unsigned int g_417948;\nextern unsigned int g_417989;\n\nint sub_40cc40()\n{\n    struct_0 *|struct_1 * v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x60]\n    unsigned long v4;  // [bp-0x58]\n    unsigned int|char v5;  // [bp-0x4c]\n    char v6[2];  // [bp-0x48]\n    unsigned long long v7;  // [bp-0x40]\n    struct_1 *v8;  // [bp+0x8]\n    unsigned int v9;  // [bp+0x10]\n    unsigned long v10;  // rcx\n    unsigned long v11;  // r8\n    unsigned int v12;  // r13d\n    unsigned int v13;  // edi\n    unsigned long v14;  // rsi\n    char *v15[3];  // r12\n    char v16[2];  // rdx\n    unsigned int|unsigned long v17;  // eax\n    unsigned long long v18;  // rax\n    char [2]|unsigned long long v19;  // rdx\n    unsigned long long v20;  // rax\n    unsigned int v22;  // r9d\n    unsigned long long v23;  // rax\n    unsigned int|unsigned long long v24;  // r9d\n    char *[3]|unsigned long long * v26;  // rax\n    unsigned long long *v27;  // rdx\n    char *v29[3];  // rax\n    char v30[3];  // rcx\n    unsigned long long *v31;  // rsi\n    unsigned long long v32;  // rcx\n    char *v33;  // rdi\n    char v34[3];  // rsi\n    unsigned long long v35;  // cc_dep1\n    unsigned long long v36;  // cc_dep2\n    unsigned long v37;  // d\n    unsigned long long v38;  // cc_dep1\n    unsigned int v39;  // ecx\n    unsigned long long v40;  // rax\n    unsigned long long v41;  // rcx\n    unsigned int|unsigned long long v42;  // rdx\n    unsigned int v44;  // eax\n    unsigned long long v45;  // r14\n    unsigned long long *v46;  // rbp\n    unsigned long long v47;  // rax\n    char v48[3];  // r14\n    unsigned long v49;  // r13\n    char [2]|char * v50;  // r15\n    char v51[3];  // rax\n    unsigned int v52;  // ecx\n    char v53[3];  // r8\n    unsigned long long v54;  // rcx\n    unsigned long long v55;  // rcx\n    unsigned long long v56;  // rdx\n    unsigned int v57;  // eax\n    char *v58;  // rax\n    unsigned long long v59;  // r14\n    char v60;  // r14b\n    unsigned long long v61;  // r14\n    char v62;  // r14b\n    unsigned long long v63;  // rax\n\n    v3 = v10;\n    v4 = v11;\n    v12 = v8->field_4;\n    if (v13 > 0)\n    {\n        v17 = v0->field_0;\n        v46 = v13;\n        v15 = v14;\n        v50 = v16;\n        v0->field_10 = 0;\n        if (!((unsigned int)v17 != 0))\n        {\n            v0->field_0 = 1;\n            v17 = 1;\n        }\n        else if (v0->field_18 != 0)\n        {\n            v18 = v16[0];\n            v19 = v0->field_20;\n            if (((char)(v18 - 43) & 253) == 0)\n            {\n                v20 = v50[1];\n                v50 = &v50[1];\n                v49 = (unsigned int)(v20 == 58? 0 : (unsigned int)r13<8>);\n            }\n        }\n        if (v0->field_18 == 0 || (unsigned int)v17 == 0)\n        {\n            *((unsigned long *)&v0->field_30) = v17;\n            *((unsigned long *)&v0->field_2c) = v17;\n            v0->field_20 = 0;\n            if (!(v16[0] != 45))\n            {\n                v0->field_28 = 2;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            else if (v16[0] != 43)\n            {\n                v19 = 0;\n                if (v9 == 0)\n                {\n                    v5 = v22;\n                    v23 = getenv(\"POSIXLY_CORRECT\");\n                    v24 = v5;\n                    if (v23 != 0)\n                    {\n                        v19 = v0->field_20;\n                    }\n                    else\n                    {\n                        v0->field_28 = 1;\n                        v19 = v0->field_20;\n                    }\n                }\n                if (v23 != 0 || v9 != 0)\n                {\n                    v0->field_28 = 0;\n                }\n            }\n            else\n            {\n                v0->field_28 = 0;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            v0->field_18 = 1;\n            v18 = v50[0];\n        }\n        if (v0->field_18 == 0 || (unsigned int)v17 == 0 || ((char)(v18 - 43) & 253) != 0)\n        {\n            v49 = (unsigned int)(v18 == 58? 0 : (unsigned int)r13<8>);\n        }\n        if (v19[0] == 0 || v0->field_18 == 0 && v19 == 0 || v19 == 0 && (unsigned int)v17 == 0 || v19 == 0 && ((char)(v18 - 43) & 253) != 0 || v8->field_20 == 0 && ((char)(v18 - 43) & 253) == 0 && v0->field_18 != 0 && (unsigned int)v17 != 0)\n        {\n            v26 = (unsigned long long)v0->field_0;\n            if (v0->field_30 > v0->field_0)\n            {\n                v0->field_30 = v8->field_0;\n            }\n            if (v8->field_0 < v0->field_2c)\n            {\n                v0->field_2c = v8->field_0;\n            }\n            if (v0->field_28 == 1)\n            {\n                v27 = (unsigned long long)v0->field_30;\n                if (v0->field_2c != v0->field_30)\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v5 = v5;\n                        sub_40c540();\n                        v27 = (unsigned long long)v0->field_0;\n                        v24 = v5;\n                    }\n                }\n                else\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v0->field_2c = v8->field_0;\n                        v27 = v26;\n                    }\n                }\n                if (v13 > (unsigned int)v27)\n                {\n                    v29 = v27;\n                    while (true)\n                    {\n                        v30 = *((long long *)((char *)v15 + 0x8 * v29));\n                        v31 = v29;\n                        v27 = (unsigned int)v29;\n                        if (*((char *)*((long long *)((char *)v15 + 0x8 * v29))) == 45 && v30[1] != 0)\n                        {\n                            v26 = (unsigned long long)v0->field_0;\n                        }\n                        if (v30[1] == 0 || *((char *)*((long long *)((char *)v15 + 0x8 * v29))) != 45)\n                        {\n                            v27 = (char *)v31 + 1;\n                            v29 = (char *)v29 + 1;\n                            v0->field_0 = (unsigned int)v31 + 1;\n                            if (v13 <= (unsigned int)v29)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    if (v30[1] == 0 || *((char *)*((long long *)((char *)v15 + 0x8 * v29))) != 45)\n                    {\n                        v26 = v27;\n                    }\n                    else if (*((char *)*((long long *)((char *)v15 + 0x8 * v29))) == 45 && v30[1] != 0)\n                    {\n                        *((unsigned long long **)&v0->field_30) = v27;\n                    }\n                }\n                v26 = v27;\n                *((unsigned long long **)&v0->field_30) = v27;\n            }\n            if (v13 != (unsigned int)v26)\n            {\n                v32 = 3;\n                v33 = \"-\";\n                v48 = *((long long *)((char *)v15 + 0x8 * v26));\n                v34 = *((long long *)((char *)v15 + 0x8 * v26));\n                while (v32 != 0)\n                {\n                    v32 -= 1;\n                    v35 = v34[0];\n                    v36 = *(v33);\n                    v33 = &v33[v37];\n                    v34 = &v34[v37];\n                    break;\n                }\n                v38 = (v35 > v36) - 0 - (v35 < v36);\n                if ((char)v38 == 0)\n                {\n                    v42 = v0->field_2c;\n                    v39 = v0->field_30;\n                    v40 = (unsigned int)v26 + 1;\n                    v0->field_0 = v0->field_2c;\n                    if ((unsigned int)v42 != v39)\n                    {\n                        if (v0->field_2c != v8->field_30)\n                        {\n                            sub_40c540();\n                            v42 = v0->field_2c;\n                        }\n                    }\n                    else\n                    {\n                        v0->field_2c = v0->field_2c;\n                        v42 = v40;\n                    }\n                    *((unsigned long long **)&v0->field_30) = v46;\n                    *((unsigned long long **)&v0->field_0) = v46;\n                }\n                else if (v48[0] == 45)\n                {\n                    v41 = v48[1];\n                    if (v48[1] != 0 && v3 != 0)\n                    {\n                        if (!(v41 != 45))\n                        {\n                            v0->field_20 = &v48[2];\n                            v2 = \"-\";\n                            v1 = v49;\n                            v0 = v0;\n                        }\n                        else if (v24 != 0)\n                        {\n                            if (v48[2] == 0)\n                            {\n                                v5 = v24;\n                                v47 = strchr(v50, v41);\n                            }\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v46 = (unsigned long long)v0->field_30;\n                v42 = v0->field_2c;\n            }\n        }\n    }\n    if ((v13 != (unsigned int)v26 && v13 > 0 && (v19[0] == 0 || v19 == 0 || ((char)(v18 - 43) & 253) == 0) && (v19[0] == 0 || v19 == 0 || v0->field_18 != 0) && (v19[0] == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v0->field_18 == 0 || v8->field_20 == 0 || v19[0] == 0 || (unsigned int)v17 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 == 0 || v13 == (unsigned int)v26 && v13 > 0 && (v19[0] == 0 || v19 == 0 || ((char)(v18 - 43) & 253) == 0) && (v19[0] == 0 || v19 == 0 || v0->field_18 != 0) && (v19[0] == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v0->field_18 == 0 || v8->field_20 == 0 || v19[0] == 0 || (unsigned int)v17 == 0 || ((char)(v18 - 43) & 253) != 0)) && v42 != v46)\n    {\n        v0->field_0 = v42;\n    }\n    if ((v13 != (unsigned int)v26 && v13 > 0 && (v19[0] == 0 || v19 == 0 || ((char)(v18 - 43) & 253) == 0) && (v19[0] == 0 || v19 == 0 || v0->field_18 != 0) && (v19[0] == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v0->field_18 == 0 || v8->field_20 == 0 || v19[0] == 0 || (unsigned int)v17 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] == 45 && v48[1] == 0 || v13 != (unsigned int)v26 && v13 > 0 && (v19[0] == 0 || v19 == 0 || ((char)(v18 - 43) & 253) == 0) && (v19[0] == 0 || v19 == 0 || v0->field_18 != 0) && (v19[0] == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v0->field_18 == 0 || v8->field_20 == 0 || v19[0] == 0 || (unsigned int)v17 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] != 45) && v0->field_28 != 0)\n    {\n        v44 = (unsigned int)v26 + 1;\n        v0->field_10 = v48;\n        v45 = 1;\n        v0->field_0 = v44;\n    }\n    if (...)\n    {\n        v45 = -18446744069414584321;\n    }\n    if (...)\n    {\n        v0->field_20 = &v48[1];\n        v2 = \"-\";\n        v1 = v49;\n        v0 = v8;\n        v45 = (unsigned int)sub_40c620();\n        if ((unsigned int)v45 == -1)\n        {\n            v48 = v15[(long long)(int)v0->field_0];\n        }\n    }\n    if (...)\n    {\n        v19 = &v48[1];\n    }\n    if (...)\n    {\n        *((char *[2])&v6[0]) = v19;\n        v0->field_20 = &v19[1];\n        v45 = v19[0];\n        v7 = &v19[1];\n        v5 = v19[0];\n        v51 = strchr(v50, v19[0]);\n        v52 = v5;\n        v53 = v7;\n        if (v6[1] == 0)\n        {\n            v0->field_0 = v0->field_0 + 1;\n        }\n        v54 = (unsigned long long)v52 - 58;\n        if (v54 > 1 && v51 != 0)\n        {\n            v55 = v51[1];\n            if (v51[0] == 87 && v3 != 0 && v55 == 59 && v6[1] == 0)\n            {\n                if (v0->field_0 != v46)\n                {\n                    v53 = v15[(long long)(int)v8->field_0];\n                }\n                else\n                {\n                    if ((unsigned int)v49 != 0)\n                    {\n                        dcgettext(0x0, 0x417948, 0x5);\n                        __fprintf_chk();\n                    }\n                    v0->field_8 = v45;\n                    v59 = 0;\n                    v60 = *(v50) != 58;\n                    v45 = r14<8> * 5 + 58;\n                }\n            }\n        }\n    }\n    if (...)\n    {\n        if ((unsigned int)v49 != 0)\n        {\n            dcgettext(0x0, 0x417989, 0x5);\n            __fprintf_chk();\n        }\n        v0->field_8 = v45;\n        v45 = 63;\n    }\n    if (...)\n    {\n        v56 = v6[1];\n        if (v51[2] != 58)\n        {\n            if (!(v56 == 0))\n            {\n                v57 = v8->field_0 + 1;\n                v0->field_10 = v7;\n                v0->field_0 = v57;\n            }\n            else if (v46 != v8->field_0)\n            {\n                v58 = v15[(long long)(int)v8->field_0];\n                v0->field_0 = (int)v8->field_0 + 1;\n                v0->field_10 = v58;\n            }\n            else\n            {\n                if ((unsigned int)v49 != 0)\n                {\n                    dcgettext(0x0, 0x417948, 0x5);\n                    __fprintf_chk();\n                }\n                v0->field_8 = v45;\n                v61 = 0;\n                v62 = *(v50) != 58;\n                v45 = r14<8> * 5 + 58;\n            }\n        }\n        else\n        {\n            if (v56 != 0)\n            {\n                v0->field_10 = v7;\n                v0->field_0 = v0->field_0 + 1;\n            }\n            else\n            {\n                v0->field_10 = 0;\n            }\n        }\n        v0->field_20 = 0;\n    }\n    if (...)\n    {\n        v0->field_20 = v53;\n        v0->field_10 = 0;\n        v2 = \"-W \";\n        v1 = v49;\n        v0 = v0;\n    }\n    if (...)\n    {\n        v45 = (unsigned int)sub_40c620();\n    }\n    v63 = v45;\n    return v63;\n}\n"
        },
        {
            "funcName": "sub_40c620",
            "funcStartAddr": "0x40c620",
            "funcEndAddr": "0x40cc1e",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    char padding_18[8];\n    struct struct_1 *field_20;\n} struct_0;\n\nextern unsigned int g_417880;\nextern unsigned int g_4178a0;\nextern unsigned int g_4178d0;\nextern unsigned int g_4178f0;\nextern unsigned int g_417920;\nextern unsigned long long stderr;\n\nint sub_40c620()\n{\n    char *v0;  // [bp-0x78]\n    unsigned long long v1;  // [bp-0x70]\n    unsigned int *v2;  // [bp-0x68]\n    char *v3;  // [bp-0x58]\n    unsigned int v4;  // [bp-0x50]\n    char v5;  // [bp-0x49]\n    unsigned int v6;  // [bp-0x44]\n    unsigned int v7;  // [bp-0x40]\n    unsigned int v8;  // [bp-0x3c]\n    struct_0 *v9;  // [bp+0x8]\n    unsigned int v10;  // [bp+0x10]\n    char *v11;  // r14\n    char *v12;  // rdx\n    unsigned long v13;  // r8\n    char *v14;  // rbp\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // r13\n    unsigned long long v17;  // rcx\n    unsigned long long *|unsigned long long v18;  // rbx\n    unsigned int|unsigned long|unsigned long long v19;  // r12\n    char *v20;  // r15\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // r8\n    char *v24;  // rdi\n    unsigned long long v25;  // r15\n    unsigned long long v26;  // rbp\n    unsigned long long v27;  // rax\n    unsigned int v28;  // r9d\n    unsigned long long v29;  // r9\n    unsigned long long v30;  // rdx\n    unsigned int v31;  // ecx\n    char *v33;  // rbp\n    unsigned long long v34;  // rdx\n    unsigned long long *v35;  // rsi\n    void *v36;  // rdi\n    unsigned long long|unsigned long long * v37;  // rbx\n    unsigned long long v38;  // rbp\n    unsigned long long v39;  // r12\n    unsigned int *v41;  // rdx\n    unsigned long long v42;  // rax\n    unsigned long long v43;  // r14\n\n    v11 = v9->field_20;\n    v3 = v12;\n    v2 = v13;\n    v14 = v9->field_20;\n    *((struct struct_1 *)&v5) = *(v9->field_20);\n    if (*(v9->field_20) != 61 && *(v9->field_20) != 0)\n    {\n        do\n        {\n            v14 = &v14[1];\n            v15 = *(v14);\n        }\n        while ((char)v15 != 0 && v15 != 61);\n        v16 = v14 - v11;\n    }\n    if (*(v9->field_20) == 0 || *(v9->field_20) == 61)\n    {\n        v16 = 0;\n    }\n    v18 = v17;\n    v19 = 0;\n    v0 = *((long long *)v17);\n    v20 = *((long long *)v17);\n    if (*((long long *)v17) != 0)\n    {\n        while (true)\n        {\n            v21 = strncmp(v20, v9->field_20, v16);\n            if (v21 == 0)\n            {\n                v22 = strlen(v20);\n            }\n            if (v21 != 0 || v22 != v16)\n            {\n                v18 += 32;\n                v20 = *(v18);\n                v23 = v19 + 1;\n                if (*(v18) != 0)\n                {\n                    v19 = v23;\n                }\n                else\n                {\n                    v8 = v19;\n                    v18 = 0;\n                    v6 = -1;\n                    v24 = v0;\n                    v25 = 0;\n                    v4 = 0;\n                    v7 = 0;\n                    v1 = 0;\n                    v0 = v14;\n                    v26 = v17;\n                    do\n                    {\n                        v27 = strncmp(v24, v9->field_20, v16);\n                        if (v27 == 0)\n                        {\n                            if (v18 == 0)\n                            {\n                                v6 = v25;\n                                v18 = v26;\n                            }\n                            else if (*((int *)(v18 + 24)) != *((int *)(v26 + 24)) || *((int *)(v18 + 8)) != *((int *)(v26 + 8)) || v28 != 0 || *((long long *)(v18 + 16)) != *((long long *)(v26 + 16)))\n                            {\n                                if (v4 == 0)\n                                {\n                                    if (v10 == 0)\n                                    {\n                                        v4 = 1;\n                                    }\n                                    else if (v1 == 0)\n                                    {\n                                        v1 = calloc((int)v8, 0x1);\n                                        v4 = 1;\n                                    }\n                                    if (false)\n                                    {\n                                        v7 = 1;\n                                        *((char *)(v1 + (int)v6)) = 1;\n                                    }\n                                    if (v1 != 0)\n                                    {\n                                        *((char *)(v1 + v25)) = 1;\n                                    }\n                                }\n                            }\n                        }\n                        v26 += 32;\n                        v24 = *((long long *)v26);\n                        v25 += 1;\n                    }\n                    while (*((long long *)v26) != 0);\n                    v14 = v0;\n                    if (v1 == 0)\n                    {\n                        v29 = v4;\n                        if (v4 == 0)\n                        {\n                            if (v18 == 0)\n                            {\n                                break;\n                            }\n                            v19 = v6;\n                        }\n                    }\n                    if (v4 != 0 || v1 != 0)\n                    {\n                        if (v10 != 0)\n                        {\n                            if (v4 != 0)\n                            {\n                                dcgettext(0x0, 0x417880, 0x5);\n                                __fprintf_chk();\n                                v11 = v9->field_20;\n                            }\n                            else\n                            {\n                                flockfile(stderr);\n                                dcgettext(0x0, 0x4178a0, 0x5);\n                                __fprintf_chk();\n                                v36 = stderr;\n                                v37 = v17;\n                                v38 = v1;\n                                v39 = v1 + v19 + 1;\n                                do\n                                {\n                                    if (*((char *)v38) != 0)\n                                    {\n                                        __fprintf_chk();\n                                        v36 = stderr;\n                                    }\n                                    v38 += 1;\n                                    v37 = &v37[4];\n                                }\n                                while (v39 != v38);\n                                fputc(0xa, v36);\n                                funlockfile(stderr);\n                                v11 = v9->field_20;\n                            }\n                        }\n                        if (v7 != 0)\n                        {\n                            free(v1);\n                        }\n                        v43 = &v11[strlen(v11)];\n                        v9->field_20 = v43;\n                        v9->field_0 = v9->field_0 + 1;\n                        v9->field_8 = 0;\n                        v42 = 63;\n                    }\n                }\n            }\n            if ((*(v18) == 0 || v21 == 0) && (*(v18) == 0 || v22 == v16) && (v21 == 0 || v4 == 0) && (v21 == 0 || v1 == 0) && (v4 == 0 || v22 == v16) && (v1 == 0 || v22 == v16))\n            {\n                v30 = v9->field_0;\n                v9->field_20 = 0;\n                v9->field_0 = (unsigned int)v30 + 1;\n                v31 = *((int *)(v18 + 8));\n                if (*(v14) == 0)\n                {\n                    if (v31 == 1)\n                    {\n                        if ((unsigned int)((unsigned long long)v9->field_0 + 1) < v24)\n                        {\n                            v9->field_0 = v9->field_0 + 2;\n                            v9->field_10 = v35[1 + v30];\n                        }\n                        else\n                        {\n                            if (v10 != 0)\n                            {\n                                dcgettext(0x0, 0x417920, 0x5);\n                                __fprintf_chk();\n                            }\n                            v9->field_8 = *((int *)(v18 + 24));\n                            v42 = (unsigned long long)(char)(*(v3) != 58) * 5 + 58;\n                        }\n                    }\n                }\n                else\n                {\n                    if (v31 != 0)\n                    {\n                        v33 = &v14[1];\n                        v9->field_10 = v33;\n                    }\n                    else\n                    {\n                        if (v10 != 0)\n                        {\n                            dcgettext(0x0, 0x4178f0, 0x5);\n                            __fprintf_chk();\n                        }\n                        v9->field_8 = *((int *)(v18 + 24));\n                        v42 = 63;\n                    }\n                }\n                if (*(v14) == 0 && (unsigned int)((unsigned long long)v9->field_0 + 1) < v24 || *(v14) == 0 && v31 != 1 || *(v14) != 0 && v31 != 0)\n                {\n                    if (v2 != 0)\n                    {\n                        *((unsigned long *)&v2) = v19;\n                    }\n                    v41 = *((long long *)(v18 + 16));\n                    v42 = (unsigned int)*((int *)(v18 + 24));\n                    if (*((long long *)(v18 + 16)) == 0)\n                    {\n                        break;\n                    }\n                    *(v41) = v42;\n                    v42 = 0;\n                }\n            }\n        }\n        if (...)\n        {\n            return v42;\n        }\n    }\n    if (v28 != 0)\n    {\n        if (*((char *)(v35[(long long)(int)v9->field_0] + 1)) != 45)\n        {\n            v34 = strchr(v3, v5);\n            v42 = -18446744069414584321;\n        }\n        if ((v34 != 0 || *((long long *)v17) != 0) && (*((char *)(v35[(long long)(int)v9->field_0] + 1)) != 45 || *((long long *)v17) != 0))\n        {\n            return v42;\n        }\n    }\n    if (v28 == 0 && *((long long *)v17) == 0 || v34 == 0 && v28 != 0 || *((char *)(v35[(long long)(int)v9->field_0] + 1)) == 45 && v28 != 0)\n    {\n        if (v10 != 0)\n        {\n            dcgettext(0x0, 0x4178d0, 0x5);\n            __fprintf_chk();\n        }\n        v9->field_20 = 0;\n        v9->field_0 = v9->field_0 + 1;\n        v9->field_8 = 0;\n        return 63;\n    }\n}\n"
        },
        {
            "funcName": "sub_40c230",
            "funcStartAddr": "0x40c230",
            "funcEndAddr": "0x40c251",
            "decompiledFuncCode": "int sub_40c230()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rdx\n    unsigned long long v4;  // rax\n\n    v4 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, rdx<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_40c3e0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_40c420",
            "funcStartAddr": "0x40c420",
            "funcEndAddr": "0x40c498",
            "decompiledFuncCode": "int sub_40c420()\n{\n    unsigned int v0;  // [bp+0x0]\n    void *v2;  // rdi\n    unsigned long long v4;  // rax\n    unsigned long long v8;  // rax\n\n    if (fileno(v2) >= 0)\n    {\n        v4 = __freading();\n        if ((v4 == 0 || (unsigned long long)lseek(fileno(v2), 0x0, 0x1) != -1) && sub_40c4a0() != 0)\n        {\n            v8 = fclose(v2);\n            if (v0 != 0)\n            {\n                *(__errno_location()) = v0;\n                v8 = -18446744069414584321;\n            }\n            return v8;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_405050",
            "funcStartAddr": "0x405050",
            "funcEndAddr": "0x4050b3",
            "decompiledFuncCode": "int sub_405050() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40b510",
            "funcStartAddr": "0x40b510",
            "funcEndAddr": "0x40b543",
            "decompiledFuncCode": "extern int512_t g_61b460;\n\nint sub_40b510()\n{\n    void tmp_2;  // tmp #2\n    void tmp_52;  // tmp #52\n    void tmp_123;  // tmp #123\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long long v3;  // rcx\n    unsigned long long v5;  // rsi\n    unsigned long v6;  // rdx\n\n    tmp_2 = v1;\n    tmp_52 = v1 == 0;\n    v3 = (unsigned int)v2 & 31;\n    v5 = (unsigned int)*((int *)((tmp_52? &g_61b460 : tmp_2) + v2 % 32 * 4 + 8));\n    tmp_123 = ((unsigned int)v6 ^ (unsigned int)(v5 >> (v3 & 31))) & 1;\n    *((unsigned int *)((v1 == 0? &g_61b460 : v1) + v2 % 32 * 4 + 8)) = (unsigned int)(tmp_123 << (v3 & 31)) ^ (unsigned int)v5;\n    return (unsigned int)(v5 >> (v3 & 31)) & 1;\n}\n"
        },
        {
            "funcName": "sub_40b920",
            "funcStartAddr": "0x40b920",
            "funcEndAddr": "0x40b92f",
            "decompiledFuncCode": "int sub_40b920()\n{\n}\n"
        },
        {
            "funcName": "sub_40d4b0",
            "funcStartAddr": "0x40d4b0",
            "funcEndAddr": "0x40d530",
            "decompiledFuncCode": "int sub_40d4b0()\n{\n    unsigned long v0;  // [bp-0x28]\n    unsigned long v1;  // [bp-0x20]\n    unsigned long v2;  // [bp-0x18]\n    unsigned long v3;  // [bp-0x10]\n    unsigned long long v4;  // [bp+0x8]\n    unsigned int v5[8];  // rax\n    unsigned long long v6;  // r9\n    unsigned long long v8;  // rax\n\n    v5 = v4;\n    if (v4 != 0)\n    {\n        v3 = v5[0];\n        v2 = v5[1];\n        v1 = v5[1];\n        v0 = v5[3 + 1];\n        v8 = (unsigned int)sub_40d390() + v6;\n        if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x4<64>, rax<8>, rbx<8>, cc_ndep<8>)))\n        {\n            return v8;\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x4<64>, rax<8>, rbx<8>, cc_ndep<8>) || v4 == 0)\n    {\n        if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x4<64>, rax<8>, rbx<8>, cc_ndep<8>)))\n        {\n            return (9223372036854775805 < v6? v6 - 1 : 9223372036854775807);\n        }\n        else if (v6 < 9223372036854775810)\n        {\n            return v6 + 1;\n        }\n        return 0x8000000000000000;\n    }\n}\n"
        },
        {
            "funcName": "sub_40c4a0",
            "funcStartAddr": "0x40c4a0",
            "funcEndAddr": "0x40c4db",
            "decompiledFuncCode": "int sub_40c4a0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned int *v3;  // rdi\n\n    v0 = v2;\n    if (v3 != 0 && __freading() != 0 && ((unsigned short)*(v3) & 0x100) != 0)\n    {\n        sub_40c4e0();\n    }\n}\n"
        },
        {
            "funcName": "sub_40b92f",
            "funcStartAddr": "0x40b92f",
            "funcEndAddr": "0x40b9a0",
            "decompiledFuncCode": "extern uint128_t g_61b460;\nextern uint128_t g_61b470;\nextern uint128_t g_61b480;\nextern unsigned long long g_61b490;\n\nint sub_40b92f()\n{\n    void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v5;  // rdx\n\n    v3 = g_61b490;\n    *((uint128_t *)&v0) = g_61b460;\n    *((uint128_t *)&v1) = g_61b470;\n    *((uint128_t *)&v2) = g_61b480;\n    *((unsigned int *)&((char *)stack_base)[4 * v5 % 32 + -64]) = (unsigned int)((unsigned long long)(!((unsigned int)((unsigned long long)(unsigned int)*((int *)&((char *)stack_base)[4 * v5 % 32 + -64]) >> ((char)((unsigned int)v5 & 31) & 31))) & 1) << ((char)((unsigned int)v5 & 31) & 31)) ^ *((int *)&((char *)stack_base)[4 * v5 % 32 + -64]);\n    return sub_40b310();\n}\n"
        },
        {
            "funcName": "sub_40d270",
            "funcStartAddr": "0x40d270",
            "funcEndAddr": "0x40d288",
            "decompiledFuncCode": "int sub_40d270()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 1;\n    return sub_40d210();\n}\n"
        },
        {
            "funcName": "sub_40dbd0",
            "funcStartAddr": "0x40dbd0",
            "funcEndAddr": "0x40dd2b",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[48];\n    struct struct_1 *field_30;\n} struct_0;\n\ntypedef struct struct_3 {\n    unsigned long long field_0;\n    char field_8;\n} struct_3;\n\ntypedef struct struct_2 {\n    char padding_0[8];\n    char field_8;\n} struct_2;\n\nextern char g_4179a4;\n\nint sub_40dbd0()\n{\n    struct_0 *v1;  // rsi\n    unsigned long long v2;  // rdi\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // r14\n    unsigned long long v5;  // rax\n    char *v6;  // rbx\n    struct_3 *v7;  // rbp\n    unsigned long long v8;  // rax\n    char *v9;  // r15\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n    struct_2 *v13;  // rax\n\n    if (v1->field_30 != 0)\n    {\n        v7 = v2;\n        if (v1 <= v1->field_30)\n        {\n            v12 = 1;\n        }\n        if (v1 > v1->field_30 || v1->field_30 >= &v1[1])\n        {\n            v6 = v2 + 9;\n            if (*(v1->field_30) != 0)\n            {\n                while (true)\n                {\n                    v3 = strcmp(v6, v1->field_30);\n                    if (v3 == 0)\n                    {\n                        break;\n                    }\n                    while (true)\n                    {\n                        if (*(v6) == 0)\n                        {\n                            v4 = &v7[1];\n                            if (&v7[1] != v6)\n                            {\n                                v9 = strlen(v1->field_30) + 1;\n                                v10 = &v6[-1 * v4];\n                                if (!(&v6[-1 * v4]) < v9)\n                                {\n                                    *(__errno_location()) = 12;\n                                    v12 = 0;\n                                }\n                            }\n                            else if (v7->field_8 == 0)\n                            {\n                                v9 = strlen(v1->field_30) + 1;\n                                v10 = 0;\n                            }\n                            if ((&v7[1] == v6 || !(&v6[-1 * v4]) >= v9) && (v7->field_8 == 0 || &v7[1] != v6))\n                            {\n                                v11 = &v9[v10];\n                                if (v11 <= 118)\n                                {\n                                    memcpy(v6, v1->field_30, v9);\n                                    *((char *)(v6 + v9)) = 0;\n                                }\n                                else\n                                {\n                                    v13 = sub_40db40();\n                                    v7->field_0 = v13;\n                                    if (v13 != 0)\n                                    {\n                                        v13->field_8 = 0;\n                                        v6 = &v13[1];\n                                    }\n                                    else\n                                    {\n                                        v12 = 0;\n                                    }\n                                }\n                            }\n                        }\n                        if (*(v6) != 0 || &v7[1] == v6 && v7->field_8 != 0)\n                        {\n                            v6 = &v6[strlen(v6) + 1];\n                            v5 = v7->field_0;\n                            if (v7->field_0 == 0 || *(v6) != 0)\n                            {\n                                break;\n                            }\n                            v6 = &v7[1];\n                            v7 = v5;\n                            v8 = strcmp(v5 + 9, v1->field_30);\n                        }\n                    }\n                    if (v11 > 118 && v13 != 0 && (&v7[1] == v6 || *(v6) == 0) && (&v7[1] == v6 || !(&v6[-1 * v4]) >= v9) && (v7->field_8 == 0 || &v7[1] != v6) || v11 <= 118 && (&v7[1] == v6 || *(v6) == 0) && (&v7[1] == v6 || !(&v6[-1 * v4]) >= v9) && (v7->field_8 == 0 || &v7[1] != v6) || v8 == 0 && *(v6) == 0 && v7->field_0 != 0 && (&v7[1] == v6 || *(v6) != 0) && (v7->field_8 != 0 || *(v6) != 0))\n                    {\n                        v1->field_30 = v6;\n                        v12 = 1;\n                    }\n                    else if (*(v6) != 0 || &v7[1] == v6 && v7->field_8 != 0)\n                    {\n                        v3 = strcmp(v6, v1->field_30);\n                    }\n                    else if ((&v7[1] == v6 || *(v6) == 0) && (v13 == 0 || !(&v6[-1 * v4]) < v9) && (v13 == 0 || &v7[1] != v6) && (v7->field_8 == 0 || &v7[1] != v6) && (!(&v6[-1 * v4]) < v9 || v11 > 118) && (&v7[1] != v6 || v11 > 118))\n                    {\n                        return v12;\n                    }\n                }\n                if (true)\n                {\n                    v1->field_30 = v6;\n                    v12 = 1;\n                }\n                else if (v3 != 0)\n                {\n                    return v12;\n                }\n            }\n            else\n            {\n                v6 = &g_4179a4;\n            }\n            v1->field_30 = v6;\n            v12 = 1;\n        }\n        return v12;\n    }\n    return 1;\n}\n"
        },
        {
            "funcName": "sub_404ba0",
            "funcStartAddr": "0x404ba0",
            "funcEndAddr": "0x404bbf",
            "decompiledFuncCode": "int sub_404ba0()\n{\n    unsigned long v0;  // [bp-0x28]\n    char v1;  // [bp-0x9]\n    unsigned long v3;  // r8\n\n    v1 = 0;\n    v0 = v3;\n    return sub_403280();\n}\n"
        },
        {
            "funcName": "sub_40c110",
            "funcStartAddr": "0x40c110",
            "funcEndAddr": "0x40c184",
            "decompiledFuncCode": "extern unsigned int g_417532;\nextern unsigned int g_41755d;\nextern unsigned int g_417790;\n\nint sub_40c110()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x417532, 0x5));\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x41755d, 0x5));\n    dcgettext(0x0, 0x417790, 0x5);\n}\n"
        },
        {
            "funcName": "sub_409c00",
            "funcStartAddr": "0x409c00",
            "funcEndAddr": "0x409c72",
            "decompiledFuncCode": "int sub_409c00()\n{\n    char v0;  // [bp-0x10]\n    unsigned long long v1;  // [bp-0x8]\n    unsigned long v3;  // rdx\n    unsigned int *v4;  // rdi\n    unsigned int *v5;  // rsi\n    unsigned int v6;  // ecx\n    unsigned long long v7;  // rbx\n    unsigned int v9;  // ecx\n    unsigned int *v10;  // rdi\n    unsigned int v11[2];  // rsi\n    unsigned int *v12;  // rdi\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rbx\n\n    if (!(v3 != 1))\n    {\n        *(v4) = *(v5);\n        if (*(v5) <= 68)\n        {\n            if (((char)v9 & 8) == 0)\n            {\n                *(v4) = *(v5) + 100;\n                return 1;\n            }\n        }\n        else\n        {\n            return 1;\n        }\n    }\n    else if (v3 != 2)\n    {\n        v1 = v7;\n        time(&v0);\n        v13 = localtime((unsigned int)&v0);\n        if (v13 != 0)\n        {\n            *(v12) = *((int *)(v13 + 20));\n            v13 = 1;\n        }\n        v14 = v1;\n        return v13;\n    }\n    if (v3 == 2 && ((char)v6 & 2) != 0)\n    {\n        *(v10) = v11[0] * 100 + v11[1] - 1900;\n        return 1;\n    }\n    if ((v3 == 1 || ((char)v6 & 2) == 0) && (v3 == 1 || v3 == 2) && (((char)v6 & 2) == 0 || *(v5) <= 68) && (v3 == 2 || *(v5) <= 68) && (((char)v6 & 2) == 0 || ((char)v9 & 8) != 0) && (v3 == 2 || ((char)v9 & 8) != 0))\n    {\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_40b5a0",
            "funcStartAddr": "0x40b5a0",
            "funcEndAddr": "0x40b612",
            "decompiledFuncCode": "extern int512_t g_61b460;\n\nint sub_40b5a0()\n{\n    unsigned long v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned long v2;  // [bp-0x58]\n    unsigned long v3;  // [bp-0x40]\n    unsigned int v5;  // [bp+0x100008]\n    unsigned long v6;  // r8\n    unsigned long long v7[7];  // rbx\n    unsigned long v8;  // rcx\n\n    v7 = (v6 == 0? &g_61b460 : v6);\n    v3 = v8;\n    *((unsigned long long [7])&v2) = v7[6];\n    *((unsigned long long [7])&v1) = v7[5];\n    v0 = &v7[1];\n    *(__errno_location()) = v5;\n    return sub_40a0e0();\n}\n"
        },
        {
            "funcName": "sub_40e700",
            "funcStartAddr": "0x40e700",
            "funcEndAddr": "0x40e741",
            "decompiledFuncCode": "int sub_40e700()\n{\n    unsigned long v1;  // rdx\n    char *v2;  // rbx\n    char *v4;  // rdi\n    char *v5;  // rsi\n\n    if (v1 != 0)\n    {\n        v2 = v1 - 1;\n        do\n        {\n            *((char *)(v4 + v2)) = *((int *)(*((long long *)(unsigned long long)__ctype_tolower_loc()) + (unsigned long long)(char)*((char *)(v5 + v2)) * 4));\n            v2 = &v2[-1];\n        }\n        while (v2 != -1);\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_402618",
            "funcStartAddr": "0x402618",
            "funcEndAddr": "0x402654",
            "decompiledFuncCode": "int sub_402618() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40c390",
            "funcStartAddr": "0x40c390",
            "funcEndAddr": "0x40c3b8",
            "decompiledFuncCode": "int sub_40c390()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_40c190();\n}\n"
        },
        {
            "funcName": "sub_412a60",
            "funcStartAddr": "0x412a60",
            "funcEndAddr": "0x412a78",
            "decompiledFuncCode": "extern int512_t g_61b268;\n\nint sub_412a60()\n{\n}\n"
        },
        {
            "funcName": "sub_40bff0",
            "funcStartAddr": "0x40bff0",
            "funcEndAddr": "0x40c049",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n} struct_0;\n\nint sub_40bff0()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long long v2;  // r9\n    struct_0 *v3;  // r8\n    unsigned long long v4;  // rax\n    unsigned long long *v5;  // r10\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // r10\n    unsigned long long v8;  // rax\n\n    v2 = 0;\n    do\n    {\n        v4 = v3->field_0;\n        if (v3->field_0 <= 47)\n        {\n            v5 = v4 + v3->field_10;\n            v3->field_0 = (unsigned int)v4 + 8;\n            v6 = *(v5);\n            v0 = *(v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n        }\n        else\n        {\n            v7 = v3->field_8;\n            v3->field_8 = v3->field_8 + 8;\n            v8 = *(v7);\n            v0 = *(v7);\n            if (v8 == 0)\n            {\n                break;\n            }\n        }\n        v2 += 1;\n    }\n    while (v2 != 10);\n    return sub_40bbf0();\n}\n"
        },
        {
            "funcName": "sub_412a78",
            "funcStartAddr": "0x412a78",
            "funcEndAddr": "0x412a98",
            "decompiledFuncCode": "extern unsigned long long g_61ae30;\n\nint sub_412a78()\n{\n    unsigned long long *v1;  // rbx\n    unsigned long long v2;  // rax\n    unsigned long v4;  // rdx\n\n    v1 = &g_61ae30;\n    while (true)\n    {\n        v2 = *(v1);\n        if (*(v1) == -1)\n        {\n            break;\n        }\n        rax<8>();\n        v1 = &v1[-1];\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_4025c1",
            "funcStartAddr": "0x4025c1",
            "funcEndAddr": "0x402618",
            "decompiledFuncCode": "extern char g_61b328;\nextern unsigned long long g_61b330;\n\nint sub_4025c1()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // rax\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long long v9;  // rbx\n    unsigned long long v10;  // r12\n\n    if (g_61b328 == 0)\n    {\n        v2 = stack_base + 0;\n        v1 = v5;\n        v0 = v6;\n        while (true)\n        {\n            if (g_61b330 >= 0)\n            {\n                break;\n            }\n            g_61b330 = g_61b330 + 1;\n            *((long long *)(6401600 + (v7 + 1) * 8))();\n        }\n        v9 = v0;\n        v10 = v1;\n        g_61b328 = 1;\n        return sub_40256b();\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_40d310",
            "funcStartAddr": "0x40d310",
            "funcEndAddr": "0x40d37f",
            "decompiledFuncCode": "extern unsigned long long g_4179a4;\n\nint sub_40d310()\n{\n    char v0;  // [bp-0x1c]\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rbx\n    unsigned long v4;  // rdx\n    char *|unsigned long long v5;  // rbp\n    unsigned long long v6;  // rdi\n    unsigned int *v7;  // r12\n    unsigned long long v9;  // rax\n\n    if (v2 != 0)\n    {\n        v3 = -2;\n        if (v4 != 0)\n        {\n            v7 = v6;\n            v5 = v2;\n        }\n    }\n    else\n    {\n        v5 = &g_4179a4;\n    }\n    if (v2 == 0 || v6 == 0 && v4 != 0)\n    {\n        v7 = &v0;\n    }\n    if (v2 == 0 || v4 != 0)\n    {\n        v3 = mbrtowc((unsigned int)v7, (unsigned int)v5);\n        if (v3 > -3 && sub_40e130() == 0)\n        {\n            v3 = 1;\n            *(v7) = *(v5);\n        }\n    }\n    v9 = v3;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_40bb80",
            "funcStartAddr": "0x40bb80",
            "funcEndAddr": "0x40bbe4",
            "decompiledFuncCode": "int sub_40bb80()\n{\n    unsigned long v0;  // [bp-0x28]\n    unsigned long v1;  // [bp-0x20]\n    unsigned long long v3;  // rdi\n    unsigned long long v4[2];  // rbp\n    unsigned long long v5;  // rbx\n    unsigned long long v7;  // rax\n\n    v4 = v3;\n    v5 = clock_settime(0x0, v3);\n    if ((unsigned int)v5 != 0 && *(__errno_location()) != 1)\n    {\n        *((unsigned long long [2])&v0) = *(v4);\n        *((unsigned long long [2])&v1) = ((unsigned long long)(v4[1] * 2361183241434822607 >> 64) >> 7) - (v4[1] >> 63);\n        v5 = settimeofday((unsigned int)&v0, 0x0, (unsigned int)(((unsigned long long)(v4[1] * 2361183241434822607 >> 64) >> 7) - (v4[1] >> 63)), (unsigned int)(v4[1] >> 63));\n    }\n    v7 = v5;\n    return v7;\n}\n"
        },
        {
            "funcName": "sub_409c90",
            "funcStartAddr": "0x409c90",
            "funcEndAddr": "0x409f20",
            "decompiledFuncCode": "int sub_409c90()\n{\n    unsigned long v0;  // [bp-0xc8]\n    char v1;  // [bp-0xb8]\n    unsigned int v2;  // [bp-0xa8]\n    unsigned int v3;  // [bp-0xa4]\n    unsigned int v4;  // [bp-0xa0]\n    unsigned int v5;  // [bp-0x9c]\n    unsigned int v6;  // [bp-0x98]\n    unsigned int v7;  // [bp-0x68]\n    unsigned int v8;  // [bp-0x64]\n    unsigned int|unsigned long long v9;  // [bp-0x60]\n    unsigned int v10;  // [bp-0x5c]\n    unsigned long long v11;  // [bp-0x58]\n    unsigned int v12;  // [bp-0x48]\n    unsigned long long v14;  // rdx\n    unsigned long long v15;  // rbp\n    char *v16;  // rsi\n    unsigned long long v17;  // r13\n    unsigned long long v18;  // rax\n    unsigned long long v19;  // r13\n    unsigned long long v20;  // r14\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rcx\n    unsigned long v23;  // r13\n    unsigned long long v24;  // rdx\n    unsigned long long v25;  // rax\n    unsigned long long v26;  // rax\n    unsigned long long v27;  // rax\n    unsigned int v28;  // eax\n    unsigned long long v29;  // rdx\n    unsigned long long v30;  // rax\n    unsigned int v31[6];  // rdx\n    unsigned int v32;  // esi\n    unsigned long long v33;  // rax\n    char *v34;  // rax\n    unsigned long long *v35;  // rdi\n\n    v15 = v14;\n    v17 = strlen(v16);\n    if (((char)v14 & 4) != 0)\n    {\n        v20 = strchr(v16, 0x2e);\n        if (v20 != 0)\n        {\n            v18 = v20 * 0;\n            v19 = v17 - v17;\n            if (v19 == 3)\n            {\n                v17 = v18;\n            }\n        }\n    }\n    else\n    {\n        v20 = 0;\n    }\n    if ((v19 == 3 || v20 == 0 || ((char)v14 & 4) == 0) && v17 - 8 <= 4 && (v17 & 1) == 0)\n    {\n        v21 = v16;\n        v22 = &v16[v17];\n        while ((unsigned int)(char)*((char *)v21) - 48 <= 9)\n        {\n            v21 += 1;\n            v23 = v17 % 2;\n            v24 = 0;\n            do\n            {\n                v7 = (char)*((char *)(v21 + v24 * 2 + 1)) + ((unsigned long long)(char)*((char *)(v21 + v24 * 2)) * 5 - 240) * 2 - 48;\n                v24 += 1;\n            }\n            while (v17 != v24);\n            if ((v15 & 1) != 0)\n            {\n                v6 = v7 - 1;\n                v5 = v8;\n                v4 = v9;\n                v3 = v10;\n                v26 = sub_409c00();\n                if (v26 == 0)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v25 = sub_409c00();\n                if (v25 == 0)\n                {\n                    break;\n                }\n                v6 = (unsigned long long)(unsigned int)*((int *)&((char *)stack_base)[4 * v17 + -120]) - 1;\n                v5 = *((int *)&((char *)stack_base)[4 * v17 + -116]);\n                v4 = *((int *)&((char *)stack_base)[4 * v17 + -112]);\n                v3 = *((int *)&((char *)stack_base)[4 * v17 + -108]);\n            }\n            if (v20 != 0)\n            {\n                v27 = (unsigned int)(char)*((char *)(v20 + 1)) - 48;\n                v29 = (char)*((char *)(v20 + 2));\n                if ((unsigned int)(char)*((char *)(v20 + 1)) - 48 > 9 || (unsigned int)((unsigned long long)(char)*((char *)(v20 + 2)) - 48) > 9)\n                {\n                    break;\n                }\n                v28 = v29 + v27 * 10 - 48;\n                v2 = v28;\n            }\n            else\n            {\n                v2 = 0;\n                v28 = 0;\n            }\n            v7 = v28;\n            v12 = -1;\n            v8 = v3;\n            v9 = *((long long *)&(&v5)[-1]);\n            v11 = *((long long *)&v6);\n            v30 = sub_40da50();\n            v31 = &v7;\n            v0 = v30;\n            if (v0 == -1)\n            {\n                v30 = localtime((unsigned int)(stack_base + -200));\n                v31 = v30;\n            }\n            if (v0 != -1 || v30 != 0)\n            {\n                v32 = v2;\n                if (!(((&v6)[1] ^ v31[2 + 1]) == 0 && (v6 ^ v31[2]) == 0 && (v5 ^ v31[1 + 1]) == 0 && (v4 ^ v31[1]) == 0 && (v3 ^ v31[1]) == 0 && (v31[0] ^ v2) == 0))\n                {\n                    if (v32 != 60)\n                    {\n                        break;\n                    }\n                    v34 = __stpcpy_chk((unsigned int)&v1, v21, 0x10);\n                    *((short *)&v34[-2]) = 14645;\n                    *(v34) = 0;\n                    v33 = sub_409c90();\n                    if (v33 == 0)\n                    {\n                        break;\n                    }\n                }\n                *(v35) = v0;\n                return 1;\n            }\n        }\n        if (true)\n        {\n            v33 = 0;\n        }\n        else if (...)\n        {\n            return v33;\n        }\n    }\n    v33 = 0;\n    return v33;\n}\n"
        },
        {
            "funcName": "sub_40b63b",
            "funcStartAddr": "0x40b63b",
            "funcEndAddr": "0x40b701",
            "decompiledFuncCode": "int sub_40b63b()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long v1;  // [bp-0x50]\n    unsigned long v2;  // [bp-0x48]\n    unsigned int v3;  // [bp-0x2c]\n    unsigned long v4;  // [bp-0x28]\n    unsigned long v5;  // [bp-0x20]\n    unsigned long v6;  // [bp-0x18]\n    unsigned long v7;  // [bp-0x10]\n    unsigned long long v8;  // [bp+0x0]\n    unsigned long long v10;  // [bp+0x10]\n    unsigned long long v11;  // [bp+0x18]\n    unsigned long long v12;  // [bp+0x20]\n    unsigned long long v13;  // [bp+0x28]\n    unsigned long v14;  // rcx\n    unsigned long v15;  // rax\n    unsigned long long v17[7];  // rbx\n    unsigned int *v18;  // r13\n    unsigned long long *v20;  // r12\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // r12\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r14\n    unsigned long long v25;  // r15\n\n    v17 = (v14 == 0? v15 : rbx<8>);\n    v18 = __errno_location();\n    v3 = *(v18);\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = &v17[1];\n    v6 = &v17[1];\n    v7 = (unsigned int)sub_40a0e0();\n    v5 = v7 + 1;\n    v4 = (unsigned int)sub_40c190();\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = v6;\n    sub_40a0e0();\n    *(v18) = v3;\n    if (v20 != 0)\n    {\n        *(v20) = v7;\n    }\n    v21 = v8;\n    v22 = v10;\n    v23 = v11;\n    v24 = v12;\n    v25 = v13;\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_403280",
            "funcStartAddr": "0x403280",
            "funcEndAddr": "0x404b60",
            "decompiledFuncCode": "int sub_403280() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40c4e0",
            "funcStartAddr": "0x40c4e0",
            "funcEndAddr": "0x40c536",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n    char padding_50[64];\n    unsigned long long field_90;\n} struct_0;\n\nint sub_40c4e0()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    struct_0 *v4;  // rdi\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    struct_0 *v7;  // rbx\n    unsigned int v8;  // esi\n    unsigned int v9;  // edx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // r12\n\n    if (v4->field_10 == v4->field_8 && v4->field_28 == v4->field_20 && v4->field_48 == 0)\n    {\n        v2 = v5;\n        v1 = stack_base + 0;\n        v0 = v6;\n        v7 = v4;\n        v10 = lseek(fileno(v4), v8, v9);\n        if (v10 != -1)\n        {\n            v7->field_0 = v7->field_0 & -17;\n            v7->field_90 = v10;\n            v10 = 0;\n        }\n        v11 = v0;\n        v12 = v2;\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_402d80",
            "funcStartAddr": "0x402d80",
            "funcEndAddr": "0x402e83",
            "decompiledFuncCode": "int sub_402d80()\n{\n    unsigned long long v0;  // [bp-0x58]\n    char v1;  // [bp-0x41]\n    unsigned long v2;  // [bp-0x40]\n    unsigned long long v4;  // rsi\n    unsigned long long v5;  // r15\n    unsigned long v6;  // rcx\n    unsigned long v7;  // r13\n    void *v8;  // rdx\n    char *v9;  // rdi\n    unsigned long v11;  // r12\n    unsigned long long v12;  // rbx\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rax\n    void *v15;  // rbp\n    char *v16;  // r14\n\n    v5 = v4;\n    v7 = v6;\n    v15 = v8;\n    v2 = v8;\n    v16 = *((long long *)v5);\n    v0 = -1;\n    if (*((long long *)v5) != 0)\n    {\n        v11 = strlen(v9);\n        v1 = 0;\n        v12 = 0;\n        while (true)\n        {\n            v13 = strncmp(v16, v9, v11);\n            if (v13 == 0)\n            {\n                v14 = strlen(v16);\n                if (v14 == v11)\n                {\n                    v0 = v12;\n                }\n                else if (v0 == -1)\n                {\n                    v0 = v12;\n                    v12 += 1;\n                    v15 += v6;\n                    v16 = *((long long *)(v5 + v12 * 8));\n                }\n                else if (v2 != 0)\n                {\n                    v1 = (memcmp(v7 * v0 + v2, v15, v7) != 0? 1 : (unsigned int)(char)(char)(stack_base)[-65]);\n                }\n                else\n                {\n                    v1 = 1;\n                }\n            }\n            if (v13 != 0 || v0 != -1 && v14 != v11)\n            {\n                v12 += 1;\n                v15 += v6;\n                v16 = *((long long *)(v5 + v12 * 8));\n            }\n            if ((*((long long *)(v5 + (v12 << 3))) == 0 || v13 == 0) && (*((long long *)(v5 + (v12 << 3))) == 0 || v0 == -1) && (v13 != 0 || v14 != v11) && (*((long long *)(v5 + (v12 << 3))) != 0 || v13 != 0 || v0 != -1))\n            {\n                *((int *)&v0) = (v1 == 0? v0 : -2);\n            }\n        }\n    }\n    return v0;\n}\n"
        },
        {
            "funcName": "sub_40b810",
            "funcStartAddr": "0x40b810",
            "funcEndAddr": "0x40b822",
            "decompiledFuncCode": "int sub_40b810()\n{\n}\n"
        },
        {
            "funcName": "sub_404c00",
            "funcStartAddr": "0x404c00",
            "funcEndAddr": "0x404c96",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[20];\n    char field_14;\n} struct_0;\n\nint sub_404c00()\n{\n    struct_0 *v1;  // rsi\n    char *v2;  // rcx\n    char *v3;  // rsi\n    unsigned long long v7;  // rdi\n    unsigned long long v8;  // rdx\n    unsigned long long v9;  // rcx\n\n    v2 = &v1->field_14;\n    v1->field_14 = 0;\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        do\n        {\n            v2 = &v2[-1];\n            v8 = v8 * 14757395258967641293 >> 64 >> 3;\n            *(v2) = (unsigned int)(v8 - (v8 * 14757395258967641293 >> 64 >> 3) * 10) + 48;\n        }\n        while (v8 != 0);\n        return v2;\n    }\n    while (true)\n    {\n        v3 = &v2[-1];\n        v7 = ((unsigned long long)(rdi<8> * 7378697629483820647 >> 64) >> 2) - (rdi<8> >> 63);\n        *((unsigned long long *)&v2[-1]) = 48 + (((unsigned long long)(rdi<8> * 7378697629483820647 >> 64) >> 2) - (rdi<8> >> 63)) * 10 - rdi<8>;\n        if (((unsigned long long)(rdi<8> * 7378697629483820647 >> 64) >> 2) - (rdi<8> >> 63) == 0)\n        {\n            break;\n        }\n        v2 = v3;\n    }\n    v9 = &v2[-2];\n    v2[-1] = 45;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_40c1b0",
            "funcStartAddr": "0x40c1b0",
            "funcEndAddr": "0x40c1d1",
            "decompiledFuncCode": "int sub_40c1b0()\n{\n    void tmp_10;  // tmp #10\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rdi\n\n    tmp_10 = v2;\n    v4 = v2 * v3;\n    v5 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_40c3e0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_40b7e0",
            "funcStartAddr": "0x40b7e0",
            "funcEndAddr": "0x40b7ea",
            "decompiledFuncCode": "int sub_40b7e0()\n{\n}\n"
        },
        {
            "funcName": "sub_40c190",
            "funcStartAddr": "0x40c190",
            "funcEndAddr": "0x40c1aa",
            "decompiledFuncCode": "int sub_40c190()\n{\n    unsigned int v1;  // rdi\n    unsigned long long v2;  // rax\n\n    v2 = malloc(v1);\n    if (v2 == 0 && v1 != 0)\n    {\n        sub_40c3e0(); /* do not return */\n    }\n    if (v1 == 0 || v2 != 0)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_40c260",
            "funcStartAddr": "0x40c260",
            "funcEndAddr": "0x40c2d8",
            "decompiledFuncCode": "int sub_40c260() { crash_skku;\n}"
        },
        {
            "funcName": "sub_4030b0",
            "funcStartAddr": "0x4030b0",
            "funcEndAddr": "0x4030fc",
            "decompiledFuncCode": "int sub_4030b0()\n{\n    unsigned long long *v1;  // rsi\n    unsigned long long v2;  // r14\n    void *v3;  // rdx\n    void *v4;  // rdi\n    unsigned int v5;  // rcx\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // rbx\n    void *v8;  // rbp\n    unsigned long long v9;  // rax\n\n    v2 = *(v1);\n    if (*(v1) != 0)\n    {\n        v7 = &v1[1];\n        v8 = v3;\n        do\n        {\n            v6 = memcmp(v4, v8, v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n            v2 = *(v7);\n            v8 += v5;\n            v7 = &v7[1];\n        }\n        while (v2 != 0);\n    }\n    v9 = v2;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_403110",
            "funcStartAddr": "0x403110",
            "funcEndAddr": "0x403118",
            "decompiledFuncCode": "extern char g_61b340;\n\nint sub_403110()\n{\n    char v1;  // dil\n    unsigned long v2;  // rax\n\n    g_61b340 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_411ce0",
            "funcStartAddr": "0x411ce0",
            "funcEndAddr": "0x412996",
            "decompiledFuncCode": "int sub_411ce0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40bb60",
            "funcStartAddr": "0x40bb60",
            "funcEndAddr": "0x40bb76",
            "decompiledFuncCode": "int sub_40bb60()\n{\n}\n"
        },
        {
            "funcName": "sub_411ac0",
            "funcStartAddr": "0x411ac0",
            "funcEndAddr": "0x411c7c",
            "decompiledFuncCode": "int sub_411ac0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40bfd0",
            "funcStartAddr": "0x40bfd0",
            "funcEndAddr": "0x40bff0",
            "decompiledFuncCode": "int sub_40bfd0()\n{\n    unsigned long long v1;  // r9\n    unsigned long long v2[2];  // r8\n\n    v1 = 0;\n    if (*(v2) != 0)\n    {\n        do\n        {\n            v1 += 1;\n        }\n        while (v2[v1] != 0);\n    }\n}\n"
        },
        {
            "funcName": "sub_402f20",
            "funcStartAddr": "0x402f20",
            "funcEndAddr": "0x40302f",
            "decompiledFuncCode": "extern unsigned int g_41448d;\nextern unsigned long long stderr[7];\n\nint sub_402f20()\n{\n    unsigned long long v1;  // r14\n    void *v2;  // rsi\n    unsigned long long v4[2];  // rdi\n    unsigned int v5;  // rdx\n    unsigned long long v6;  // rax\n    void *v7;  // rbp\n    unsigned long long v9;  // rbx\n    char *v11;  // rax\n\n    v1 = 0;\n    v7 = v2;\n    v9 = 0;\n    fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41448d, 0x5), stderr);\n    if (*(v4) != 0)\n    {\n        while (true)\n        {\n            if (v9 != 0)\n            {\n                v6 = memcmp(v1, v7, v5);\n                if (v6 == 0)\n                {\n                    v9 += 1;\n                    v7 += v5;\n                    sub_40bb60();\n                    __fprintf_chk();\n                    if (v4[v9] == 0)\n                    {\n                        break;\n                    }\n                }\n            }\n            if (v9 == 0 || v6 != 0)\n            {\n                v9 += 1;\n                v1 = v7;\n                v7 += v5;\n                sub_40bb60();\n                __fprintf_chk();\n                if (v4[v9] == 0)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    v11 = stderr[5];\n    if (stderr[5] < stderr[6])\n    {\n        stderr[5] = stderr[5] + 1;\n        *(v11) = 10;\n        return v11;\n    }\n}\n"
        },
        {
            "funcName": "sub_40baf0",
            "funcStartAddr": "0x40baf0",
            "funcEndAddr": "0x40bb03",
            "decompiledFuncCode": "int sub_40baf0()\n{\n}\n"
        },
        {
            "funcName": "sub_40b7f0",
            "funcStartAddr": "0x40b7f0",
            "funcEndAddr": "0x40b806",
            "decompiledFuncCode": "int sub_40b7f0()\n{\n}\n"
        },
        {
            "funcName": "main",
            "funcStartAddr": "0x401dd0",
            "funcEndAddr": "0x402517",
            "decompiledFuncCode": "extern unsigned int g_412b56;\nextern unsigned int g_412b92;\nextern unsigned int g_412bbe;\nextern unsigned int g_412bcd;\nextern unsigned int g_412bdd;\nextern unsigned int g_413f08;\nextern unsigned int g_413f78;\nextern int512_t g_4143f0;\nextern int512_t g_4143f8;\nextern unsigned int g_4179a4;\nextern unsigned int g_61b2fc;\nextern unsigned int g_61b338;\nextern unsigned long long g_61b4f0;\nextern unsigned long long stdin;\n\nint main()\n{\n    unsigned int *|unsigned long|unsigned long long v0;  // [bp-0x110]\n    void tmp_65;  // tmp #65\n    unsigned long|unsigned long long v1;  // [bp-0x108]\n    unsigned int|unsigned long v2;  // [bp-0x100]\n    unsigned long v3;  // [bp-0xf8]\n    unsigned int v4;  // [bp-0xec]\n    unsigned long long v5;  // [bp-0xe0]\n    unsigned long|unsigned long long v6;  // [bp-0xd8]\n    unsigned long|unsigned long long v7;  // [bp-0xd0]\n    unsigned long v8;  // [bp-0x70]\n    unsigned long v9;  // [bp-0x68]\n    unsigned long long v11;  // r15\n    unsigned long long v12;  // r14\n    unsigned long v13;  // rdi\n    unsigned int v14;  // r12d\n    unsigned long v15;  // rsi\n    char **v16;  // rbp\n    unsigned long long v19;  // rax\n    unsigned long long v20;  // r13\n    unsigned long long v21;  // rax\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // rbx\n    unsigned long long v25;  // rdx\n    char v26;  // dl\n    unsigned long long v27;  // rax\n    char v28;  // al\n    unsigned long long v29;  // rax\n    char v30;  // al\n    unsigned long v33;  // rsi\n    char **v35;  // rax\n    char *v37;  // rdi\n    unsigned long long v38;  // rbx\n    unsigned long long v39;  // rbx\n    unsigned long long v42;  // rax\n    unsigned long long v43;  // rdx\n    unsigned long long v44;  // rax\n    unsigned long long v45;  // rax\n    unsigned long long v47;  // rax\n    void *v48;  // r12\n    unsigned long long v49;  // r13\n    unsigned long long v50;  // rbp\n    unsigned long long v51;  // r14\n    unsigned long long v54;  // rbp\n    unsigned long long v55;  // rbx\n    unsigned long long v56;  // rbx\n    unsigned long long v57;  // rbx\n    unsigned int v58;  // cc_dep1\n    unsigned long long v59;  // rax\n    unsigned long long v60;  // rbx\n    unsigned int|char|unsigned long v61;  // r13\n    unsigned int v62;  // ebp\n    unsigned int v63;  // ebp\n\n    v11 = 0;\n    v12 = 0;\n    v20 = 0;\n    v14 = v13;\n    v16 = v15;\n    v24 = 0;\n    sub_409f40();\n    setlocale(0x6, 0x4179a4);\n    bindtextdomain(0x412b56, 0x413f08);\n    textdomain(0x412b56);\n    sub_412a60();\n    v0 = 0;\n    v1 = 0;\n    while (true)\n    {\n        v19 = sub_40d290();\n        if ((unsigned int)v19 == -1)\n        {\n            v25 = 0;\n            v26 = v11 != 0;\n            v27 = 0;\n            v28 = v20 != 0;\n            tmp_65 = rdx<8> + rax<8>;\n            v29 = 0;\n            v30 = v0 != 0;\n            if ((unsigned int)(tmp_65 + rax<8>) > 1)\n            {\n                v33 = \"the options to specify dates for printing are mutually exclusive\";\n            }\n            else if ((v12 & (char)(v4 & 1)) == 0)\n            {\n                v35 = (long long)(int)g_61b2fc;\n                if (g_61b2fc < (unsigned int)v13)\n                {\n                    if ((unsigned int)((int)g_61b2fc + 1) >= (unsigned int)v13)\n                    {\n                        v37 = *((long long *)((char *)v16 + 0x8 * v35));\n                        if (*((char *)*((long long *)((char *)v16 + 0x8 * v35))) != 43)\n                        {\n                            if ((char)(v4 & 1) != 0 || v12 != 0)\n                            {\n                                v39 = (unsigned int)sub_40bb60();\n                            }\n                        }\n                        else\n                        {\n                            if (v24 == 0)\n                            {\n                                g_61b2fc = (int)g_61b2fc + 1;\n                                v24 = &v37[1];\n                            }\n                            else\n                            {\n                                error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x413f78, 0x5));\n                            }\n                        }\n                    }\n                    else\n                    {\n                        v38 = (unsigned int)sub_40bb60();\n                    }\n                    if (((unsigned int)((int)g_61b2fc + 1) < (unsigned int)v13 || *((char *)*((long long *)((char *)v16 + 0x8 * v35))) != 43) && ((unsigned int)((int)g_61b2fc + 1) < (unsigned int)v13 || (char)(v4 & 1) != 0 || v12 != 0))\n                    {\n                        error(0x0, 0x0, (unsigned long long)dcgettext(0x0, v15, 0x5));\n                    }\n                }\n            }\n            else\n            {\n                v33 = \"the options to print and set the time may not be used together\";\n            }\n            if ((v12 & (char)(v4 & 1)) != 0 || (unsigned int)(tmp_65 + rax<8>) > 1)\n            {\n                error(0x0, 0x0, (unsigned long long)dcgettext(0x0, v33, 0x5));\n            }\n        }\n        else if ((unsigned int)v19 != 102)\n        {\n            if (v19 > 102)\n            {\n                if ((unsigned int)v19 == 117)\n                {\n                    if (putenv(0x412b92) == 0)\n                    {\n                        tzset();\n                    }\n                    else\n                    {\n                        sub_40c3e0(); /* do not return */\n                    }\n                }\n                else if (v19 <= 117)\n                {\n                    if ((unsigned int)v19 == 114)\n                    {\n                        v0 = g_61b4f0;\n                    }\n                    if ((unsigned int)v19 == 115)\n                    {\n                        v12 = 1;\n                        v1 = g_61b4f0;\n                    }\n                }\n                else\n                {\n                    if ((unsigned int)v19 == 128)\n                    {\n                        v23 = 4276576 + 32 * (unsigned int)*((int *)&((char *)&g_4143f8)[4 * (unsigned long long)(unsigned int)sub_403040()]);\n                    }\n                    if ((unsigned int)v19 == 129)\n                    {\n                        g_61b338 = g_61b338 | 1;\n                    }\n                }\n            }\n            else\n            {\n                if ((unsigned int)v19 == 73)\n                {\n                    v21 = 0;\n                    if (g_61b4f0 != 0)\n                    {\n                        v21 = (unsigned int)*((int *)&((char *)&g_4143f0)[4 * (unsigned long long)(unsigned int)sub_403040()]);\n                    }\n                    v23 = 4276416 + 32 * v21;\n                }\n                else if (v19 > 73)\n                {\n                    if ((unsigned int)v19 == 82)\n                    {\n                        v23 = \"%a, %d %b %Y %H:%M:%S %z\";\n                    }\n                    if ((unsigned int)v19 == 100)\n                    {\n                        v11 = g_61b4f0;\n                    }\n                }\n                else\n                {\n                    if ((unsigned int)v19 == -131)\n                    {\n                        sub_40c050();\n                        exit(0x0); /* do not return */\n                    }\n                    if ((unsigned int)v19 == -130)\n                    {\n                        sub_402750(); /* do not return */\n                    }\n                }\n            }\n        }\n        if ((unsigned int)v19 == 102)\n        {\n            v20 = g_61b4f0;\n        }\n        if (v19 <= 102 && (unsigned int)v19 == 73 && (unsigned int)v19 != -1 && (unsigned int)v19 != 102 || v19 <= 102 && (unsigned int)v19 == 82 && v19 > 73 && (unsigned int)v19 != -1 && (unsigned int)v19 != 73 && (unsigned int)v19 != 102 || (unsigned int)v19 == 128 && v19 > 117 && v19 > 102 && (unsigned int)v19 != -1 && (unsigned int)v19 != 117 && (unsigned int)v19 != 102)\n        {\n            if (v24 == 0)\n            {\n                v24 = v23;\n            }\n            else\n            {\n                error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x413f78, 0x5));\n            }\n        }\n        if ((v12 & (char)(v4 & 1)) == 0 && (char)(v4 & 1) == 0 && (unsigned int)v19 == -1 && (unsigned int)(tmp_65 + rax<8>) <= 1 && g_61b2fc < (unsigned int)v13 && (unsigned int)((int)g_61b2fc + 1) >= (unsigned int)v13 && *((char *)*((long long *)((char *)v16 + 0x8 * v35))) != 43 && v12 == 0 || (v12 & (char)(v4 & 1)) == 0 && (unsigned int)v19 == -1 && (unsigned int)(tmp_65 + rax<8>) <= 1 && g_61b2fc < (unsigned int)v13 && *((char *)*((long long *)((char *)v16 + 0x8 * v35))) == 43 && (unsigned int)((int)g_61b2fc + 1) >= (unsigned int)v13 && v24 == 0 || (v12 & (char)(v4 & 1)) == 0 && (unsigned int)v19 == -1 && (unsigned int)(tmp_65 + rax<8>) <= 1 && g_61b2fc >= (unsigned int)v13)\n        {\n            if (v24 != 0)\n            {\n                break;\n            }\n            v2 = v4;\n            if (*((char *)(unsigned long long)nl_langinfo(0x2006c)) != 0)\n            {\n                break;\n            }\n        }\n        if ((v12 & (char)(v4 & 1)) == 0 && (unsigned int)v19 == -1 && (unsigned int)(tmp_65 + rax<8>) <= 1 && g_61b2fc < (unsigned int)v13 && ((unsigned int)((int)g_61b2fc + 1) < (unsigned int)v13 || *((char *)*((long long *)((char *)v16 + 0x8 * v35))) != 43) && ((unsigned int)((int)g_61b2fc + 1) < (unsigned int)v13 || (char)(v4 & 1) != 0 || v12 != 0) || v19 <= 117 && v19 > 102 && (unsigned int)v19 != 114 && (unsigned int)v19 != -1 && (unsigned int)v19 != 117 && (unsigned int)v19 != 102 && (unsigned int)v19 != 115 || v19 > 117 && v19 > 102 && (unsigned int)v19 != -1 && (unsigned int)v19 != 117 && (unsigned int)v19 != 128 && (unsigned int)v19 != 102 && (unsigned int)v19 != 129 || v19 <= 102 && v19 > 73 && (unsigned int)v19 != -1 && (unsigned int)v19 != 73 && (unsigned int)v19 != 102 && (unsigned int)v19 != 82 && (unsigned int)v19 != 100 || v19 <= 102 && v19 <= 73 && (unsigned int)v19 != -131 && (unsigned int)v19 != -1 && (unsigned int)v19 != 73 && (unsigned int)v19 != 102 && (unsigned int)v19 != -130 || (unsigned int)v19 == -1 && ((v12 & (char)(v4 & 1)) != 0 || (unsigned int)(tmp_65 + rax<8>) > 1))\n        {\n            sub_402750(); /* do not return */\n        }\n    }\n    v4 = tmp_65 + rax<8>;\n    v3 = getenv(\"TZ\");\n    v2 = (unsigned int)sub_40db40();\n    if (v20 != 0)\n    {\n        v42 = strcmp(v20, \"-\");\n        if (v42 != 0)\n        {\n            v48 = fopen(v20, \"r\");\n            if (v48 == 0)\n            {\n                v55 = (unsigned int)sub_40b9e0();\n                error(0x1, *(__errno_location()), \"%s\");\n            }\n        }\n        else\n        {\n            v48 = stdin;\n            v49 = dcgettext(0x0, 0x412bbe, 0x5);\n        }\n        if (v42 == 0 || v48 != 0)\n        {\n            v50 = 1;\n            v5 = 0;\n            v6 = 0;\n            v0 = &(stack_base)[-216];\n            while (true)\n            {\n                v51 = __getdelim(&v5, v0, 0xa, v48);\n                if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, r14<8>, 0x0<64>, cc_ndep<8>))\n                {\n                    break;\n                }\n                if (sub_407bc0() == 0)\n                {\n                    if (*((char *)(v5 + v51 - 1)) == 10)\n                    {\n                        *((char *)(v5 + v51 - 1)) = 0;\n                    }\n                    v54 = (unsigned int)sub_40bb60();\n                    v50 = 0;\n                    error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x412bcd, 0x5));\n                }\n                else\n                {\n                    v50 = (unsigned int)v50 & sub_402620();\n                }\n            }\n            v58 = sub_40c420();\n            if (!((char)(v58 + 1 == 0)))\n            {\n                free(v5);\n            }\n            else\n            {\n                v60 = (unsigned int)sub_40b9e0();\n                error(0x1, *(__errno_location()), \"%s\");\n            }\n        }\n    }\n    else\n    {\n        v43 = v4 ^ 1;\n        v61 = (unsigned int)v12 ^ 1;\n        v61 = (char)((unsigned int)v12 ^ 1) & v43;\n        v61 = rax<8>;\n        if (((char)((unsigned int)v12 ^ 1) & v43) == 0)\n        {\n            if (v0 != 0)\n            {\n                v44 = __xstat(0x1);\n                if (v44 == 0)\n                {\n                    v6 = v8;\n                    v7 = v9;\n                }\n                else\n                {\n                    v56 = (unsigned int)sub_40b9e0();\n                    error(0x1, *(__errno_location()), \"%s\");\n                }\n            }\n            else\n            {\n                v45 = sub_407bc0();\n            }\n            if ((v44 == 0 && v0 != 0 || v0 == 0 && v45 != 0) && v12 != 0)\n            {\n                v0 = stack_base + -216;\n            }\n        }\n        else if (g_61b2fc < v14)\n        {\n            v0 = stack_base + -216;\n            v47 = sub_409c90();\n            v7 = 0;\n        }\n        else\n        {\n            sub_404bc0();\n        }\n        if ((v47 == 0 || ((char)((unsigned int)v12 ^ 1) & v43) == 0) && (g_61b2fc < v14 || ((char)((unsigned int)v12 ^ 1) & v43) == 0) && (v45 == 0 || ((char)((unsigned int)v12 ^ 1) & v43) != 0) && (v0 == 0 || ((char)((unsigned int)v12 ^ 1) & v43) != 0))\n        {\n            v57 = (unsigned int)sub_40bb60();\n            error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x412bcd, 0x5));\n        }\n    }\n    if (v20 == 0 && ((char)((unsigned int)v12 ^ 1) & v43) == 0 && v12 != 0 && (v44 == 0 || v0 == 0) && (v45 != 0 || v0 != 0) || v20 == 0 && g_61b2fc < v14 && ((char)((unsigned int)v12 ^ 1) & v43) != 0 && v47 != 0)\n    {\n        v59 = sub_40bb80();\n        if (v59 != 0)\n        {\n            v61 = 0;\n            error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x412bdd, 0x5));\n        }\n    }\n    if (v20 == 0 && ((char)((unsigned int)v12 ^ 1) & v43) == 0 && (v44 == 0 || v0 == 0) && (v45 != 0 || v0 != 0) && v12 == 0 || (v20 == 0 && ((char)((unsigned int)v12 ^ 1) & v43) == 0 && v12 != 0 && (v44 == 0 || v0 == 0) && (v45 != 0 || v0 != 0) || v20 == 0 && g_61b2fc < v14 && ((char)((unsigned int)v12 ^ 1) & v43) != 0 && v47 != 0) && v59 == 0)\n    {\n        v61 = 1;\n    }\n    if ((v20 == 0 && ((char)((unsigned int)v12 ^ 1) & v43) == 0 && v12 != 0 && (v44 == 0 || v0 == 0) && (v45 != 0 || v0 != 0) || v20 == 0 && g_61b2fc < v14 && ((char)((unsigned int)v12 ^ 1) & v43) != 0 && v47 != 0) && v59 != 0 || v20 == 0 && ((char)((unsigned int)v12 ^ 1) & v43) == 0 && (v44 == 0 || v0 == 0) && (v45 != 0 || v0 != 0) && v12 == 0 || (v20 == 0 && ((char)((unsigned int)v12 ^ 1) & v43) == 0 && v12 != 0 && (v44 == 0 || v0 == 0) && (v45 != 0 || v0 != 0) || v20 == 0 && g_61b2fc < v14 && ((char)((unsigned int)v12 ^ 1) & v43) != 0 && v47 != 0) && v59 == 0 || v20 == 0 && g_61b2fc >= v14 && ((char)((unsigned int)v12 ^ 1) & v43) != 0)\n    {\n        v62 = v61;\n        v63 = v62 & sub_402620();\n    }\n    if ((v20 == 0 && ((char)((unsigned int)v12 ^ 1) & v43) == 0 && v12 != 0 && (v44 == 0 || v0 == 0) && (v45 != 0 || v0 != 0) || v20 == 0 && g_61b2fc < v14 && ((char)((unsigned int)v12 ^ 1) & v43) != 0 && v47 != 0) && v59 != 0 || v20 == 0 && ((char)((unsigned int)v12 ^ 1) & v43) == 0 && (v44 == 0 || v0 == 0) && (v45 != 0 || v0 != 0) && v12 == 0 || (v20 == 0 && ((char)((unsigned int)v12 ^ 1) & v43) == 0 && v12 != 0 && (v44 == 0 || v0 == 0) && (v45 != 0 || v0 != 0) || v20 == 0 && g_61b2fc < v14 && ((char)((unsigned int)v12 ^ 1) & v43) != 0 && v47 != 0) && v59 == 0 || v20 == 0 && g_61b2fc >= v14 && ((char)((unsigned int)v12 ^ 1) & v43) != 0 || v20 != 0 && !((char)(v58 + 1 == 0)) && (v42 == 0 || v48 != 0))\n    {\n        return (unsigned long long)(stack_base + 0);\n    }\n}\n"
        },
        {
            "funcName": "sub_40c1e0",
            "funcStartAddr": "0x40c1e0",
            "funcEndAddr": "0x40c1e2",
            "decompiledFuncCode": "int sub_40c1e0()\n{\n}\n"
        },
        {
            "funcName": "sub_403220",
            "funcStartAddr": "0x403220",
            "funcEndAddr": "0x40326f",
            "decompiledFuncCode": "int sub_403220()\n{\n    unsigned long long v0;  // [bp-0x20]\n    unsigned long v1;  // [bp-0x18]\n    unsigned long long v2;  // [bp-0x10]\n    unsigned long long v3;  // [bp-0x8]\n    unsigned long v5;  // rdx\n    unsigned long v6;  // rax\n    unsigned long long v7;  // r13\n    unsigned long long v8;  // r12\n    unsigned long long v9;  // rbx\n    unsigned long long v10;  // rsi\n    unsigned int *v12;  // rcx\n    void *v13;  // rdi\n    unsigned long long v14;  // rax\n    char *v15;  // rbx\n    unsigned long long v16;  // rbx\n    unsigned long long v17;  // r12\n    unsigned long long v18;  // r13\n\n    if (v5 != 0)\n    {\n        v3 = v7;\n        v2 = v8;\n        v1 = stack_base + 0;\n        v0 = v9;\n        v15 = v10;\n        while (true)\n        {\n            v12 = (unsigned long long)*(v15);\n            v15 = &v15[1];\n            v14 = fputc(*((int *)(*((long long *)(unsigned long long)__ctype_toupper_loc()) + v12 * 4)), v13);\n            if (v15 == v5 + v10)\n            {\n                break;\n            }\n        }\n        v16 = v0;\n        v17 = v2;\n        v18 = v3;\n        return v14;\n    }\n    return v6;\n}\n"
        },
        {
            "funcName": "sub_40e190",
            "funcStartAddr": "0x40e190",
            "funcEndAddr": "0x40e6e4",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned int field_8;\n    unsigned short field_c;\n} struct_1;\n\nextern char g_4179a4;\nextern char g_61b4e8[2];\n\nint sub_40e190()\n{\n    unsigned long|unsigned long long v0;  // [bp-0xd0]\n    void tmp_12;  // tmp #12\n    void tmp_56;  // tmp #56\n    void tmp_1;  // tmp #1\n    void tmp_10;  // tmp #10\n    void tmp_3;  // tmp #3\n    void tmp_28;  // tmp #28\n    unsigned long long v1;  // [bp-0xc8]\n    unsigned long long v2;  // [bp-0xc0]\n    char v3;  // [bp-0xb8]\n    char v4;  // [bp-0xb4]\n    char v5;  // [bp-0x78]\n    char v6;  // [bp-0x74]\n    unsigned int v7;  // [bp-0x4]\n    char [2]|unsigned long long v9;  // r15\n    char *|unsigned long v10;  // rbx\n    unsigned long v11;  // rax\n    unsigned long long v12;  // rdi\n    unsigned long long v13;  // rdi\n    unsigned long long v14;  // r12\n    char *v15;  // r13\n    unsigned long long v16;  // r14\n    unsigned long long v17;  // rbp\n    struct_1 *v20;  // r12\n    unsigned short v21;  // dx\n    unsigned long long v22;  // rax\n    unsigned long long v28;  // rax\n    unsigned int *v29;  // rcx\n    unsigned int v30;  // eax\n    unsigned long v31;  // rax\n    unsigned int *v32;  // rdx\n    unsigned long long v33;  // rcx\n    unsigned long long v34;  // rax\n    unsigned long v35;  // rax\n    unsigned long long v36;  // rax\n    unsigned long long v37;  // rax\n    unsigned long v38;  // rsi\n    unsigned long long v39;  // rcx\n    unsigned long long v40;  // rdx\n    unsigned long long v41;  // rcx\n    unsigned long long v42;  // rdi\n    unsigned long long v43;  // rsi\n    unsigned long long v44;  // r9\n    unsigned long long v45;  // r10\n    unsigned int v46;  // ecx\n    unsigned long long v48;  // r8\n    void *v49;  // rcx\n    unsigned long long v52;  // rcx\n    unsigned int v54;  // edx\n    unsigned long long v57;  // rcx\n    unsigned long long v58;  // rsi\n    char *v59;  // rax\n    unsigned long v60;  // rdi\n    char *v61;  // rax\n    unsigned long long v62;  // rax\n    unsigned long long v63;  // rdx\n    unsigned long long v67;  // rbp\n    unsigned long long v68;  // rax\n    unsigned long long v69;  // rax\n    unsigned long long v70;  // rbp\n    unsigned long long v71;  // rax\n\n    v9 = g_61b4e8;\n    v10 = ((unsigned long long)nl_langinfo(0xe) == 0? &g_4179a4 : (unsigned long long)nl_langinfo(0xe));\n    if (g_61b4e8 == 0)\n    {\n        v15 = getenv(\"CHARSETALIASDIR\");\n        if (v15 != 0 && *(v15) != 0)\n        {\n            v11 = strlen(v15);\n            v14 = v11;\n            v16 = v11;\n            if (v11 == 0)\n            {\n                v12 = 14;\n            }\n            else if (v15[v11 + -1] == 47)\n            {\n                v12 = v11 + 14;\n            }\n            else\n            {\n                v13 = v11 + 15;\n                v14 += 1;\n            }\n            if (v15[v11 + -1] == 47 || v11 == 0)\n            {\n                v17 = malloc(v12);\n                if (v17 != 0)\n                {\n                    memcpy(v17, v15, v16);\n                }\n            }\n        }\n        if (*(v15) == 0 || v15 == 0)\n        {\n            v13 = 115;\n            v14 = 101;\n            v16 = 100;\n            v15 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        }\n        if (*(v15) == 0 || v15 == 0 || v15[v11 + -1] != 47 && v11 != 0)\n        {\n            v17 = malloc(v13);\n        }\n        if (v17 == 0 || v17 == 0)\n        {\n            v9 = &g_4179a4;\n        }\n        if (v17 != 0 && (*(v15) == 0 || v15 == 0 || v15[v11 + -1] != 47) && (*(v15) == 0 || v15 == 0 || v11 != 0))\n        {\n            memcpy(v17, v15, v16);\n            *((char *)(v17 + v16)) = 47;\n        }\n        if (*(v15) == 0 && v17 != 0 || v15 == 0 && v17 != 0 || v15[v11 + -1] != 47 && v17 != 0 && v11 != 0 || v15[v11 + -1] == 47 && *(v15) != 0 && v17 != 0 && v15 != 0 || v11 == 0 && *(v15) != 0 && v17 != 0 && v15 != 0)\n        {\n            v20 = v14 + v17;\n            v20->field_0 = 3347411969557751907;\n            v20->field_c = 115;\n            v20->field_8 = 1634298977;\n            v22 = open(v17, 0x0, v21);\n            if ((unsigned int)v22 >= 0)\n            {\n                v9 = 0;\n                v0 = 0;\n                if (v10 != 0)\n                {\n                    v10 = fdopen(v22, \"r\");\n                    while (true)\n                    {\n                        v59 = *((long long *)(v10 + 8));\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                        {\n                            *((char **)(v10 + 8)) = &v59[1];\n                            v60 = *(v59);\n                        }\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1)\n                        {\n                            if ((unsigned int)v60 != 35 && (unsigned int)v60 != 32)\n                            {\n                                ungetc(v60, v10);\n                                v28 = fscanf(v10, \"%50s %50s\", (unsigned int)&v3, (unsigned int)&v5);\n                                if (v28 > 1)\n                                {\n                                    v29 = &v3;\n                                    do\n                                    {\n                                        tmp_12 = (unsigned int)*((int *)&v3);\n                                        v29 = &v4;\n                                        v30 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                    }\n                                    while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                    v31 = (unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int)(rax<8> >> 16) : (unsigned int)rax<8>);\n                                    v32 = &v5;\n                                    v33 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)((char *)v29 + 2) : v29) + -1 * ((v31 + v31 <= v31? 1 : 0) & 1) + -0x1 * &v3;\n                                    do\n                                    {\n                                        tmp_12 = (unsigned int)*((int *)&v5);\n                                        v32 = &v6;\n                                        v34 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                    }\n                                    while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                    v1 = v33;\n                                    tmp_56 = (unsigned int)v34 % 0x10000;\n                                    v35 = (unsigned int)(((unsigned int)v34 & 32896) == 0? (unsigned int)(v34 >> 16) : (unsigned int)v34);\n                                    v36 = &((char *)(-3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v32)[2] : v32) + -1 * ((v35 + v35 <= v35? 1 : 0) & 1) + -0x1 * &v5))[v1];\n                                    v2 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v32)[2] : v32) + -1 * (((unsigned int)((((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)) <= (unsigned long long)(unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)? 1 : 0) & 1) + -0x1 * &v5;\n                                    if (v0 == 0)\n                                    {\n                                        v0 = v36 + 2;\n                                        v37 = malloc(v36 + 3);\n                                        v39 = v1;\n                                        v40 = v2;\n                                    }\n                                    else\n                                    {\n                                        v38 = v36 + v0 + 3;\n                                        v0 = v36 + v0 + 2;\n                                        v37 = realloc(NULL, v38);\n                                        v40 = v2;\n                                        v39 = v1;\n                                    }\n                                    if (v37 != 0)\n                                    {\n                                        tmp_1 = -2 - v39;\n                                        v41 = v39 + 1;\n                                        v42 = v0 - v40;\n                                        v43 = tmp_1 + v0 - v40 + v37;\n                                        if ((unsigned int)v41 >= 8)\n                                        {\n                                            *((long long *)v43) = *((long long *)&v3);\n                                            *((long long *)(v43 + v41 - 8)) = *((long long *)&(&v3)[v41 + -8]);\n                                            v44 = v43 + 8 & -8;\n                                            v43 -= v43 + 8 & -8;\n                                            v45 = &(&v3)[-1 * v43];\n                                            v46 = (unsigned int)(v41 + v43) & -8;\n                                            if (v46 >= 8)\n                                            {\n                                                v43 = 0;\n                                                do\n                                                {\n                                                    v48 = v43;\n                                                    v43 = (unsigned int)v43 + 8;\n                                                    *((long long *)(v44 + v48)) = *((long long *)(v45 + v48));\n                                                }\n                                                while ((unsigned int)v43 < (v46 & -8));\n                                            }\n                                        }\n                                        else if ((v41 & 4) != 0)\n                                        {\n                                            *((int *)v43) = *((int *)&v3);\n                                            *((int *)(v43 + v41 - 4)) = *((int *)&(&v3)[v41 + -4]);\n                                        }\n                                        else if ((unsigned int)v41 != 0)\n                                        {\n                                            *((char *)v43) = v3;\n                                            if ((v41 & 2) != 0)\n                                            {\n                                                *((short *)(v43 + v41 - 2)) = *((short *)&(&v3)[v41 + -2]);\n                                            }\n                                        }\n                                        v63 = v40 + 1;\n                                        v49 = v37 + v42 - 1;\n                                        if ((unsigned int)v43 >= 8)\n                                        {\n                                            *((long long *)v49) = *((long long *)&v5);\n                                            v43 = v63;\n                                            *((long long *)&((char *)v49)[v43 + -8]) = *((long long *)&(&v5)[v43 + -8]);\n                                            v52 = v49 - (v49 + 8 & -8);\n                                            v54 = (unsigned int)(v43 + v52) & -8;\n                                            if (v54 >= 8)\n                                            {\n                                                v57 = 0;\n                                                do\n                                                {\n                                                    v58 = v57;\n                                                    v57 = (unsigned int)v57 + 8;\n                                                    *((long long *)((v49 + 8 & -8) + v58)) = *((long long *)&(&v5)[v58 + -1 * v52]);\n                                                }\n                                                while ((unsigned int)v57 < (v54 & -8));\n                                            }\n                                        }\n                                        else if (((char)v43 & 4) != 0)\n                                        {\n                                            *((int *)v49) = *((int *)&v5);\n                                            *((unsigned int *)&((char *)v49)[(unsigned long long)v7 + -4]) = v7;\n                                        }\n                                        else if ((unsigned int)v43 != 0)\n                                        {\n                                            *((char *)v49) = v5;\n                                            if ((v5 & 2) != 0)\n                                            {\n                                                *((short *)&((char *)v49)[(unsigned long long)v5 + -2]) = v7;\n                                            }\n                                        }\n                                        v9 = v37;\n                                        v59 = *((long long *)(v10 + 8));\n                                    }\n                                    else\n                                    {\n                                        v9 = &g_4179a4;\n                                        v10 = (tmp_10 == 0? &g_4179a4 : tmp_10);\n                                        free(NULL);\n                                        sub_40c420();\n                                    }\n                                }\n                            }\n                            if ((unsigned int)v60 == 35)\n                            {\n                                do\n                                {\n                                    v61 = *((long long *)(v10 + 8));\n                                    if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                                    {\n                                        *((char **)(v10 + 8)) = &v61[1];\n                                        v62 = *(v61);\n                                        v63 = 1;\n                                    }\n                                    else\n                                    {\n                                        v62 = __uflow(v10);\n                                        v63 = (char)(v62 != -1);\n                                    }\n                                }\n                                while (v63 != 0 && v62 != 10);\n                            }\n                        }\n                        if (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && (unsigned int)v60 != 35 && v37 != 0 && v28 > 1 && (unsigned int)v60 != 32)\n                        {\n                            v60 = __uflow(v10);\n                        }\n                        if ((unsigned int)v60 == 35 && (unsigned int)v60 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v62 == -1 || (unsigned int)v60 != 35 && (unsigned int)v60 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v28 <= 1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && (unsigned int)v60 != 35 && v37 != 0 && v28 > 1 && (unsigned int)v60 != 32) && (unsigned int)v60 == -1)\n                        {\n                            v10 = (tmp_10 == 0? &g_4179a4 : tmp_10);\n                            sub_40c420();\n                            if (v0 == 0)\n                            {\n                                break;\n                            }\n                            *((char *)(v9 + v0)) = 0;\n                        }\n                    }\n                    if ((unsigned int)v60 == 35 && (unsigned int)(v60 - 9) > 1 && (unsigned int)v60 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v62 == -1 || (unsigned int)v60 != 35 && (unsigned int)(v60 - 9) > 1 && (unsigned int)v60 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v28 <= 1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16))) && (unsigned int)v60 == -1)\n                    {\n                        v9 = &g_4179a4;\n                    }\n                    else if (((unsigned int)v60 == 35 && (unsigned int)(v60 - 9) > 1 && (unsigned int)v60 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v62 == -1 || (unsigned int)v60 != 35 && (unsigned int)(v60 - 9) > 1 && (unsigned int)v60 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v28 <= 1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16))) && (unsigned int)v60 == -1) && v0 != 0 || ((unsigned int)v60 != 35 && v28 > 1 && (unsigned int)(v60 - 9) > 1 && (unsigned int)v60 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v0 != 0 || (unsigned int)v60 != 35 && v28 > 1 && (unsigned int)(v60 - 9) > 1 && (unsigned int)v60 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v0 == 0) && v37 == 0)\n                    {\n                        free(v17);\n                    }\n                }\n                else\n                {\n                    close(v22);\n                }\n            }\n            v9 = &g_4179a4;\n            free(v17);\n        }\n        *((char *[2])&g_61b4e8[0]) = v9;\n    }\n    v67 = v9[0];\n    if (v9[0] != 0)\n    {\n        while (true)\n        {\n            v68 = strcmp((tmp_10 == 0? &g_4179a4 : tmp_10), v9);\n            if (v68 != 0 && (v67 != 42 || v9[1] != 0))\n            {\n                v69 = strlen(v9);\n                v70 = &((char [2])&v9[v69])[1];\n                v71 = strlen(&((char [2])&v9[v69])[1]);\n                v9 = v70 + v71 + 1;\n                v67 = (char)*((char *)(v70 + v71 + 1));\n                if (v67 == 0)\n                {\n                    break;\n                }\n            }\n            if (v68 == 0 || v67 == 42 && v9[1] == 0)\n            {\n                v10 = &((char [2])&v9[strlen(v9)])[1];\n            }\n        }\n    }\n    tmp_3 = v10;\n    tmp_28 = *(v10) == 0;\n    return (tmp_28? \"ASCII\" : tmp_3);\n}\n"
        },
        {
            "funcName": "sub_40d390",
            "funcStartAddr": "0x40d390",
            "funcEndAddr": "0x40d4a7",
            "decompiledFuncCode": "int sub_40d390() { crash_skku;\n}"
        },
        {
            "funcName": "sub_405280",
            "funcStartAddr": "0x405280",
            "funcEndAddr": "0x4053f6",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[104];\n    unsigned long long field_68;\n    unsigned long long field_70;\n    unsigned long long field_78;\n    unsigned long long field_80;\n    unsigned long long field_88;\n    unsigned long long field_90;\n    unsigned int field_98;\n} struct_0;\n\nextern unsigned int g_4148e1;\nextern unsigned int g_4148f2;\n\nint sub_405280()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n    struct_0 *v3;  // rsi\n    struct_0 *v4;  // rbx\n    unsigned long long v6;  // rdi\n    unsigned long long v7;  // rdi\n    unsigned long long v8;  // rdi\n    unsigned long long v9;  // rdi\n    unsigned long long v10;  // rdi\n    unsigned long long v11;  // rdi\n\n    v0 = v2;\n    v4 = v3;\n    dcgettext(0x0, 0x4148e1, 0x5);\n    sub_404f90();\n    if (!(v3->field_68 == 0))\n    {\n        v6 = (unsigned int)sub_4050c0();\n        if (v3->field_70 == 0)\n        {\n            v3 = v3->field_78;\n        }\n    }\n    else if (v3->field_70 == 0)\n    {\n        if (v3->field_78 == 0 && v3->field_80 == 0 && v3->field_88 == 0 && v3->field_90 == 0 && v3->field_98 == 0)\n        {\n            dcgettext(0x0, 0x4148f2, 0x5);\n        }\n    }\n    if (v3->field_68 == 0 && v3->field_70 != 0 || v3->field_70 != 0 && v3->field_68 != 0)\n    {\n        v7 = (unsigned int)sub_4050c0();\n    }\n    if (v3 != 0 && v3->field_70 != 0 || v3 != 0 && v3->field_68 != 0 || v3->field_70 == 0 && v3->field_68 == 0 && v3->field_78 != 0)\n    {\n        v8 = (unsigned int)sub_4050c0();\n    }\n    if (v3->field_90 != 0 || v3->field_88 != 0 || v3->field_98 != 0 || v3->field_78 != 0 || v3->field_70 != 0 || v3->field_80 != 0 || v3->field_68 != 0)\n    {\n        if (v4->field_80 != 0)\n        {\n            v9 = (unsigned int)sub_4050c0();\n        }\n        if (v4->field_88 != 0)\n        {\n            v10 = (unsigned int)sub_4050c0();\n        }\n        if (v4->field_90 != 0)\n        {\n            v11 = (unsigned int)sub_4050c0();\n        }\n        if (v4->field_98 != 0)\n        {\n            sub_4050c0();\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_402ea0",
            "funcStartAddr": "0x402ea0",
            "funcEndAddr": "0x402f0c",
            "decompiledFuncCode": "extern unsigned int g_414455;\nextern unsigned int g_414470;\n\nint sub_402ea0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x8]\n    unsigned long v3;  // r12\n    unsigned long v4;  // rbx\n\n    v1 = v3;\n    v0 = v4;\n    if (false)\n    {\n        dcgettext(0x0, 0x414455, 0x5);\n    }\n    dcgettext(0x0, 0x414470, 0x5);\n    sub_40bb40();\n    sub_40b830();\n}\n"
        },
        {
            "funcName": "sub_40b910",
            "funcStartAddr": "0x40b910",
            "funcEndAddr": "0x40b91c",
            "decompiledFuncCode": "int sub_40b910()\n{\n}\n"
        },
        {
            "funcName": "sub_4031c0",
            "funcStartAddr": "0x4031c0",
            "funcEndAddr": "0x40320f",
            "decompiledFuncCode": "int sub_4031c0()\n{\n    unsigned long long v0;  // [bp-0x20]\n    unsigned long v1;  // [bp-0x18]\n    unsigned long long v2;  // [bp-0x10]\n    unsigned long long v3;  // [bp-0x8]\n    unsigned long v5;  // rdx\n    unsigned long v6;  // rax\n    unsigned long long v7;  // r13\n    unsigned long long v8;  // r12\n    unsigned long long v9;  // rbx\n    unsigned long long v10;  // rsi\n    unsigned int *v12;  // rcx\n    void *v13;  // rdi\n    unsigned long long v14;  // rax\n    char *v15;  // rbx\n    unsigned long long v16;  // rbx\n    unsigned long long v17;  // r12\n    unsigned long long v18;  // r13\n\n    if (v5 != 0)\n    {\n        v3 = v7;\n        v2 = v8;\n        v1 = stack_base + 0;\n        v0 = v9;\n        v15 = v10;\n        while (true)\n        {\n            v12 = (unsigned long long)*(v15);\n            v15 = &v15[1];\n            v14 = fputc(*((int *)(*((long long *)(unsigned long long)__ctype_tolower_loc()) + v12 * 4)), v13);\n            if (v15 == v5 + v10)\n            {\n                break;\n            }\n        }\n        v16 = v0;\n        v17 = v2;\n        v18 = v3;\n        return v14;\n    }\n    return v6;\n}\n"
        },
        {
            "funcName": "sub_40c3c0",
            "funcStartAddr": "0x40c3c0",
            "funcEndAddr": "0x40c3d3",
            "decompiledFuncCode": "int sub_40c3c0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    char *v3;  // rdi\n\n    v0 = v2;\n    strlen(v3);\n}\n"
        },
        {
            "funcName": "sub_404e20",
            "funcStartAddr": "0x404e20",
            "funcEndAddr": "0x404f11",
            "decompiledFuncCode": "int sub_404e20() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40ded0",
            "funcStartAddr": "0x40ded0",
            "funcEndAddr": "0x40dfd5",
            "decompiledFuncCode": "int sub_40ded0()\n{\n    unsigned long long v0;  // [bp-0x60]\n    char v1;  // [bp-0x58]\n    unsigned int v2;  // [bp-0x54]\n    unsigned int v3;  // [bp-0x50]\n    unsigned int v4;  // [bp-0x4c]\n    unsigned int v5;  // [bp-0x48]\n    unsigned int v6;  // [bp-0x44]\n    unsigned int v7;  // [bp-0x38]\n    unsigned int v9[9];  // rsi\n    unsigned long v11;  // rdi\n    unsigned long long v12;  // r12\n    unsigned long long v13;  // rax\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // rax\n\n    if (v11 != 0)\n    {\n        v12 = (unsigned int)sub_40dd50();\n        if (v12 != 0)\n        {\n            v0 = (unsigned int)sub_40da50();\n            if (v0 == -1)\n            {\n                v13 = localtime_r((unsigned int)&v0, (unsigned int)&v1);\n            }\n            if ((v0 == -1 && v13 != 0 && (v9[4] == 0 == v7 == 0 || v9[4] < 0 || v7 < 0) && (v9[2] ^ v5) == 0 && (v9[2 + 1] ^ v6) == 0 && (v9[1 + 1] ^ v4) == 0 && (v9[1] ^ v3) == 0 && (v9[1] ^ v2) == 0 && (v9[0] ^ *((int *)&v1)) == 0 || v0 != -1) && sub_40dbd0() == 0)\n            {\n                v0 = -1;\n            }\n            if (v12 != 1)\n            {\n                v15 = sub_40daf0();\n            }\n        }\n        if (v12 == 0 || v15 == 0 && v12 != 1)\n        {\n            v16 = -1;\n        }\n        if (v12 == 1 || v12 != 0 && v15 != 0)\n        {\n            v16 = v0;\n        }\n        return v16;\n    }\n    return sub_40dff0();\n}\n"
        },
        {
            "funcName": "sub_40d290",
            "funcStartAddr": "0x40d290",
            "funcEndAddr": "0x40d2a3",
            "decompiledFuncCode": "int sub_40d290()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_40d210();\n}\n"
        },
        {
            "funcName": "sub_409fe0",
            "funcStartAddr": "0x409fe0",
            "funcEndAddr": "0x40a0bf",
            "decompiledFuncCode": "extern int512_t g_41679c;\nextern int512_t g_4167a0;\n\nint sub_409fe0()\n{\n    unsigned long v1;  // rdi\n    char *v2;  // rbx\n    char v3[8];  // rax\n    unsigned long long v4;  // rdx\n    unsigned long v5;  // rsi\n    char *v6;  // rax\n\n    v2 = (unsigned long long)dcgettext(0x0, v1, 0x5);\n    if (v1 == v2)\n    {\n        v3 = sub_40e190();\n        v4 = v3[0] & 4294967007;\n        if ((v3[0] & 223) == 85)\n        {\n            if ((v3[1] & 223) == 84 && (v3[2] & 223) == 70 && v3[3] == 45 && v3[4] == 56 && v3[5] == 0)\n            {\n                v2 = (*(v2) != 96? &g_41679c : 4286375);\n            }\n        }\n        else\n        {\n            if (v4 == 71 && (v3[1] & 223) == 66 && v3[2] == 49 && v3[3] == 56 && v3[4] == 48 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0)\n            {\n                v2 = (*(v2) != 96? &g_4167a0 : 4286371);\n            }\n        }\n    }\n    if (...)\n    {\n        return ((unsigned int)v5 != 9? \"'\" : \"\\\"\");\n    }\n    if (v3[3] == 45 && v3[5] == 0 && v1 == v2 && (v3[1] & 223) == 84 && (v3[0] & 223) == 85 && (v3[2] & 223) == 70 && v3[4] == 56 || v4 == 71 && v3[3] == 56 && (v3[1] & 223) == 66 && v1 == v2 && v3[4] == 48 && v3[2] == 49 && (v3[0] & 223) != 85 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0 || v1 != v2)\n    {\n        v6 = v2;\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_40da50",
            "funcStartAddr": "0x40da50",
            "funcEndAddr": "0x40da6c",
            "decompiledFuncCode": "int sub_40da50()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    tzset();\n}\n"
        },
        {
            "funcName": "sub_40b570",
            "funcStartAddr": "0x40b570",
            "funcEndAddr": "0x40b59b",
            "decompiledFuncCode": "extern char g_61b460;\n\nint sub_40b570()\n{\n    void tmp_2;  // tmp #2\n    void tmp_11;  // tmp #11\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long long v3[7];  // rdi\n    unsigned long v4;  // rsi\n    unsigned long v5;  // rdx\n\n    tmp_2 = v2;\n    tmp_11 = v2 == 0;\n    v3 = (v2 == 0? &g_61b460 : v2);\n    *((int *)(tmp_11? &g_61b460 : tmp_2)) = 10;\n    if (v4 != 0 && v5 != 0)\n    {\n        v3[5] = v4;\n        v3[6] = v5;\n        return &g_61b460;\n    }\n    if (v5 == 0 || v4 == 0)\n    {\n        v0 = &g_61b460;\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_40e7a0",
            "funcStartAddr": "0x40e7a0",
            "funcEndAddr": "0x40ff26",
            "decompiledFuncCode": "int sub_40e7a0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40de20",
            "funcStartAddr": "0x40de20",
            "funcEndAddr": "0x40deb6",
            "decompiledFuncCode": "int sub_40de20()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // r13\n    unsigned long v3;  // rsi\n    unsigned long v4;  // rdx\n    unsigned long long v5;  // rax\n    unsigned long long v6;  // rax\n    unsigned long long v8;  // rax\n\n    if (v1 != 0)\n    {\n        v2 = (unsigned int)sub_40dd50();\n        if (v2 != 0)\n        {\n            v5 = localtime_r(v3, v4);\n            if (v5 != 0)\n            {\n                v6 = sub_40dbd0();\n                if (v6 != 0)\n                {\n                    if (v2 != 1)\n                    {\n                        v8 = sub_40daf0();\n                    }\n                    if (v2 == 1 || v8 != 0)\n                    {\n                        return v4;\n                    }\n                }\n            }\n            if ((v6 == 0 || v5 == 0) && v2 != 1)\n            {\n                sub_40daf0();\n            }\n        }\n        if (v2 == 0 || v6 == 0 || v5 == 0 || v8 == 0 && v2 != 1)\n        {\n            return 0;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_407bc0",
            "funcStartAddr": "0x407bc0",
            "funcEndAddr": "0x409b39",
            "decompiledFuncCode": "int sub_407bc0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_4055a0",
            "funcStartAddr": "0x4055a0",
            "funcEndAddr": "0x405920",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[28];\n    unsigned int field_1c;\n    char padding_20[64];\n    unsigned long long field_60;\n    char padding_68[56];\n    char field_a0;\n    char padding_a1[7];\n    unsigned long long field_a8;\n    unsigned long long field_b0;\n    unsigned long long field_b8;\n    char padding_c0[8];\n    unsigned long long field_c8;\n    unsigned long long field_d0;\n    char field_d8;\n    char padding_d9[1];\n    char field_da;\n    char field_db;\n    char field_dc;\n    char field_dd;\n    char field_de;\n    char field_df;\n} struct_0;\n\nextern unsigned int g_4148e1;\nextern unsigned int g_414975;\nextern unsigned int g_4149a9;\nextern unsigned int g_414ee8;\nextern unsigned long long stderr;\n\nint sub_4055a0()\n{\n    struct_0 *v1;  // rsi\n    struct_0 *v2;  // rbx\n    unsigned long long v5;  // rdx\n    unsigned long long v7;  // cc_dep1\n    unsigned long long v9;  // rbp\n    unsigned long long v10;  // cc_dep1\n    char v12;  // cc_dep1\n\n    v2 = v1;\n    dcgettext(0x0, 0x4148e1, 0x5);\n    sub_404f90();\n    if (v1->field_a8 != 0 && v1->field_da == 0)\n    {\n        __fprintf_chk();\n        v2->field_da = 1;\n        v5 = 1;\n        if (v2->field_d8 != v2->field_df)\n        {\n            fputc(0x20, stderr);\n        }\n    }\n    if (v1->field_a8 == 0 || v1->field_da != 0)\n    {\n        v5 = 0;\n    }\n    if (v1->field_a8 == 0 && v2->field_d8 != v2->field_df || v2->field_d8 != v2->field_df && v1->field_da != 0 || v1->field_da == 0 && v1->field_a8 != 0 && v2->field_d8 != v2->field_df)\n    {\n        dcgettext(0x0, 0x414975, 0x5);\n        __fprintf_chk();\n        v5 = 1;\n        v2->field_df = v2->field_d8;\n    }\n    if (v2->field_c8 != 0 && v2->field_dd == 0)\n    {\n        __fprintf_chk();\n        if (v2->field_60 != 0)\n        {\n            __fprintf_chk();\n        }\n        if (v2->field_1c == 1)\n        {\n            fwrite(\"pm\", 0x1, 0x2, stderr);\n        }\n        v7 = v2->field_b0;\n        v2->field_dd = 1;\n        v5 = 1;\n        if (v7 != 0)\n        {\n            v5 = v2->field_db;\n        }\n    }\n    if ((v2->field_dd == 0 || v2->field_db == 0) && (v2->field_dd == 0 || v2->field_b0 != 0) && (v2->field_db == 0 || v2->field_c8 != 0) && (v2->field_c8 != 0 || v2->field_b0 != 0) && (v2->field_db == 0 || v2->field_c8 == 0 || v2->field_dd != 0) && (v2->field_c8 == 0 || v2->field_dd != 0 || v7 != 0))\n    {\n        if ((v2->field_dd == 0 || v5 != 0) && (v2->field_c8 != 0 || v5 != 0))\n        {\n            fputc(0x20, stderr);\n        }\n        v9 = (unsigned int)sub_4054b0();\n        dcgettext(0x0, 0x414ee8, 0x5);\n        __fprintf_chk();\n        v2->field_db = 1;\n        v5 = 1;\n    }\n    if (v2->field_b8 != 0 && v2->field_dc == 0)\n    {\n        __fprintf_chk();\n        v10 = v2->field_d0;\n        v2->field_dc = 1;\n    }\n    if ((v2->field_de == 0 || v2->field_dc == 0) && (v2->field_de == 0 || v2->field_b8 != 0) && (v2->field_dc == 0 || v2->field_d0 != 0) && (v2->field_b8 != 0 || v2->field_d0 != 0) && (v2->field_b8 == 0 || v2->field_de == 0 || v2->field_dc != 0) && (v2->field_b8 == 0 || v10 != 0 || v2->field_dc != 0))\n    {\n        sub_404e20();\n        __fprintf_chk();\n        v12 = v2->field_a0;\n        v2->field_de = 1;\n    }\n    if (v2->field_a0 != 0 && (v2->field_b8 == 0 || v2->field_dc != 0) && (v2->field_d0 == 0 || v2->field_de != 0) && v5 != 0 || (v2->field_de == 0 || v2->field_dc == 0) && (v2->field_de == 0 || v2->field_b8 != 0) && (v2->field_dc == 0 || v12 != 0) && (v2->field_dc == 0 || v2->field_d0 != 0) && (v2->field_b8 != 0 || v12 != 0) && (v2->field_b8 != 0 || v2->field_d0 != 0) && (v10 == 0 || v12 != 0 || v2->field_de != 0) && (v2->field_b8 == 0 || v2->field_de == 0 || v2->field_a0 != 0 || v2->field_dc != 0) && (v2->field_b8 == 0 || v2->field_a0 != 0 || v10 != 0 || v2->field_dc != 0))\n    {\n        fputc(0x20, stderr);\n    }\n    if (v2->field_a0 != 0 && (v2->field_b8 == 0 || v2->field_dc != 0) && (v2->field_d0 == 0 || v2->field_de != 0) && v5 == 0 || v2->field_a0 != 0 && (v2->field_b8 == 0 || v2->field_dc != 0) && (v2->field_d0 == 0 || v2->field_de != 0) && v5 != 0 || (v2->field_de == 0 || v2->field_dc == 0) && (v2->field_de == 0 || v2->field_b8 != 0) && (v2->field_dc == 0 || v12 != 0) && (v2->field_dc == 0 || v2->field_d0 != 0) && (v2->field_b8 != 0 || v12 != 0) && (v2->field_b8 != 0 || v2->field_d0 != 0) && (v10 == 0 || v12 != 0 || v2->field_de != 0) && (v2->field_b8 == 0 || v2->field_de == 0 || v2->field_a0 != 0 || v2->field_dc != 0) && (v2->field_b8 == 0 || v2->field_a0 != 0 || v10 != 0 || v2->field_dc != 0))\n    {\n        dcgettext(0x0, 0x4149a9, 0x5);\n        __fprintf_chk();\n    }\n    return fputc(0xa, stderr);\n}\n"
        },
        {
            "funcName": "sub_40e130",
            "funcStartAddr": "0x40e130",
            "funcEndAddr": "0x40e186",
            "decompiledFuncCode": "int sub_40e130()\n{\n    unsigned int v1;  // edi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // cc_dep1\n    unsigned long long v5;  // cc_dep2\n    unsigned long v6;  // d\n    char *v7;  // rdi\n    char *v8;  // rsi\n    unsigned long long v9;  // rcx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // cc_dep1\n    char *v12;  // rdi\n    unsigned long long v13;  // rcx\n    char v14;  // cc_dep1\n    char v15;  // cc_dep2\n\n    v10 = 1;\n    if (v3 != 0)\n    {\n        v9 = 2;\n        v7 = \"C\";\n        v3 = setlocale(v1, 0x0);\n        while (v9 != 0)\n        {\n            v9 -= 1;\n            v4 = *(v8);\n            v5 = *(v7);\n            v7 = &v7[v6];\n            v8 = &v8[v6];\n            break;\n        }\n        v10 = 0;\n        v11 = (v4 > v5) - 0 - (v4 < v5);\n        if ((char)v11 != 0)\n        {\n            v12 = \"POSIX\";\n            v13 = 6;\n            while (v13 != 0)\n            {\n                v13 -= 1;\n                v14 = *(v8);\n                v15 = *(v12);\n                v12 = &v12[v6];\n                v8 = &v8[v6];\n                break;\n            }\n            return 0;\n        }\n    }\n    if ((char)v11 == 0 || v3 == 0)\n    {\n        return v10;\n    }\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Angr",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_date.elf"
}