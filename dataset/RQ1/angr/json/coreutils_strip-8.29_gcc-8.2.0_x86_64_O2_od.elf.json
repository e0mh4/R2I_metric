{
    "funcInfo": [
        {
            "funcName": "sub_405140",
            "funcStartAddr": "0x405140",
            "funcEndAddr": "0x40518c",
            "decompiledFuncCode": "int sub_405140()\n{\n    unsigned long long *v1;  // rsi\n    unsigned long long v2;  // r14\n    void *v3;  // rdx\n    void *v4;  // rdi\n    unsigned int v5;  // rcx\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // rbx\n    void *v8;  // rbp\n    unsigned long long v9;  // rax\n\n    v2 = *(v1);\n    if (*(v1) != 0)\n    {\n        v7 = &v1[1];\n        v8 = v3;\n        do\n        {\n            v6 = memcmp(v4, v8, v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n            v2 = *(v7);\n            v8 += v5;\n            v7 = &v7[1];\n        }\n        while (v2 != 0);\n    }\n    v9 = v2;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_40b4f0",
            "funcStartAddr": "0x40b4f0",
            "funcEndAddr": "0x40c1a6",
            "decompiledFuncCode": "int sub_40b4f0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_406c20",
            "funcStartAddr": "0x406c20",
            "funcEndAddr": "0x406c4b",
            "decompiledFuncCode": "extern char g_612560;\n\nint sub_406c20()\n{\n    void tmp_2;  // tmp #2\n    void tmp_11;  // tmp #11\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long long v3[7];  // rdi\n    unsigned long v4;  // rsi\n    unsigned long v5;  // rdx\n\n    tmp_2 = v2;\n    tmp_11 = v2 == 0;\n    v3 = (v2 == 0? &g_612560 : v2);\n    *((int *)(tmp_11? &g_612560 : tmp_2)) = 10;\n    if (v4 != 0 && v5 != 0)\n    {\n        v3[5] = v4;\n        v3[6] = v5;\n        return &g_612560;\n    }\n    if (v4 == 0 || v5 == 0)\n    {\n        v0 = &g_612560;\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_4078a0",
            "funcStartAddr": "0x4078a0",
            "funcEndAddr": "0x407918",
            "decompiledFuncCode": "int sub_4078a0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_404e10",
            "funcStartAddr": "0x404e10",
            "funcEndAddr": "0x404f13",
            "decompiledFuncCode": "int sub_404e10()\n{\n    unsigned long long v0;  // [bp-0x58]\n    char v1;  // [bp-0x41]\n    unsigned long v2;  // [bp-0x40]\n    unsigned long long v4;  // rsi\n    unsigned long long v5;  // r15\n    unsigned long v6;  // rcx\n    unsigned long v7;  // r13\n    void *v8;  // rdx\n    char *v9;  // rdi\n    unsigned long v11;  // r12\n    unsigned long long v12;  // rbx\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rax\n    void *v15;  // rbp\n    char *v16;  // r14\n\n    v5 = v4;\n    v7 = v6;\n    v15 = v8;\n    v2 = v8;\n    v16 = *((long long *)v5);\n    v0 = -1;\n    if (*((long long *)v5) != 0)\n    {\n        v11 = strlen(v9);\n        v1 = 0;\n        v12 = 0;\n        while (true)\n        {\n            v13 = strncmp(v16, v9, v11);\n            if (v13 == 0)\n            {\n                v14 = strlen(v16);\n                if (v14 == v11)\n                {\n                    v0 = v12;\n                }\n                else if (v0 == -1)\n                {\n                    v0 = v12;\n                    v12 += 1;\n                    v15 += v6;\n                    v16 = *((long long *)(v5 + v12 * 8));\n                }\n                else if (v2 != 0)\n                {\n                    v1 = (memcmp(v7 * v0 + v2, v15, v7) != 0? 1 : (unsigned int)(char)(char)(stack_base)[-65]);\n                }\n                else\n                {\n                    v1 = 1;\n                }\n            }\n            if (v13 != 0 || v0 != -1 && v14 != v11)\n            {\n                v12 += 1;\n                v15 += v6;\n                v16 = *((long long *)(v5 + v12 * 8));\n            }\n            if ((v13 == 0 || *((long long *)(v5 + (v12 << 3))) == 0) && (*((long long *)(v5 + (v12 << 3))) == 0 || v0 == -1) && (v13 != 0 || v14 != v11) && (v13 != 0 || v0 != -1 || *((long long *)(v5 + (v12 << 3))) != 0))\n            {\n                *((int *)&v0) = (v1 == 0? v0 : -2);\n            }\n        }\n    }\n    return v0;\n}\n"
        },
        {
            "funcName": "sub_408fd0",
            "funcStartAddr": "0x408fd0",
            "funcEndAddr": "0x408fe6",
            "decompiledFuncCode": "int sub_408fd0()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_408f10();\n}\n"
        },
        {
            "funcName": "sub_407930",
            "funcStartAddr": "0x407930",
            "funcEndAddr": "0x40797a",
            "decompiledFuncCode": "int sub_407930() { crash_skku;\n}"
        },
        {
            "funcName": "sub_407610",
            "funcStartAddr": "0x407610",
            "funcEndAddr": "0x407630",
            "decompiledFuncCode": "int sub_407610()\n{\n    unsigned long long v1;  // r9\n    unsigned long long v2[2];  // r8\n\n    v1 = 0;\n    if (*(v2) != 0)\n    {\n        do\n        {\n            v1 += 1;\n        }\n        while (v2[v1] != 0);\n    }\n}\n"
        },
        {
            "funcName": "sub_406f50",
            "funcStartAddr": "0x406f50",
            "funcEndAddr": "0x406fb9",
            "decompiledFuncCode": "int sub_406f50()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_4069c0();\n}\n"
        },
        {
            "funcName": "sub_4081e0",
            "funcStartAddr": "0x4081e0",
            "funcEndAddr": "0x408236",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n    char padding_50[64];\n    unsigned long long field_90;\n} struct_0;\n\nint sub_4081e0()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    struct_0 *v4;  // rdi\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    struct_0 *v7;  // rbx\n    unsigned int v8;  // esi\n    unsigned int v9;  // edx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // r12\n\n    if (v4->field_10 == v4->field_8 && v4->field_28 == v4->field_20 && v4->field_48 == 0)\n    {\n        v2 = v5;\n        v1 = stack_base + 0;\n        v0 = v6;\n        v7 = v4;\n        v10 = lseek(fileno(v4), v8, v9);\n        if (v10 != -1)\n        {\n            v7->field_0 = v7->field_0 & -17;\n            v7->field_90 = v10;\n            v10 = 0;\n        }\n        v11 = v0;\n        v12 = v2;\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_4051b0",
            "funcStartAddr": "0x4051b0",
            "funcEndAddr": "0x40524e",
            "decompiledFuncCode": "extern unsigned int g_40c30f;\nextern unsigned int g_612268;\nextern char g_612448;\nextern unsigned long long g_612450;\n\nint sub_4051b0()\n{\n    unsigned long long v1;  // rax\n    unsigned int *v2;  // rbx\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rbp\n\n    v1 = sub_409170();\n    if (v1 != 0)\n    {\n        v2 = __errno_location();\n        if (g_612448 == 0 || *(v2) != 32)\n        {\n            v4 = dcgettext(0x0, 0x40c30f, 0x5);\n            if (g_612450 != 0)\n            {\n                sub_407060();\n                error(0x0, *(v2), \"%s: %s\");\n            }\n        }\n    }\n    if (v1 == 0 || *(v2) == 32 && g_612448 != 0)\n    {\n        v3 = sub_409170();\n    }\n    if ((unsigned int)v3 == 0 && (v1 == 0 || *(v2) == 32) && (v1 == 0 || g_612448 != 0))\n    {\n        return v3;\n    }\n    while (true)\n    {\n        _exit(g_612268);\n        error(0x0, *(v2), \"%s\");\n    }\n}\n"
        },
        {
            "funcName": "sub_405390",
            "funcStartAddr": "0x405390",
            "funcEndAddr": "0x4054c0",
            "decompiledFuncCode": "extern int512_t g_800000;\n\nint sub_405390()\n{\n    void tmp_106;  // tmp #106\n    void tmp_185;  // tmp #185\n    void tmp_189;  // tmp #189\n    void tmp_230;  // tmp #230\n    unsigned long v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x58]\n    unsigned short v2;  // [bp-0x43]\n    unsigned long v4;  // rdx\n    unsigned int v5;  // ymm0\n    void v6;  // xmm0\n    unsigned long long v7;  // xmm0lq\n    unsigned long long v8;  // rbx\n    char v10;  // bl\n    unsigned long long v11;  // rbp\n    unsigned long v12;  // rsi\n    unsigned long v13;  // rdi\n    unsigned long v14;  // cc_dep1\n    unsigned long long v15;  // rbx\n\n    tmp_106 = (unsigned int)v4 & 1;\n    v2 = 11557;\n    tmp_185 = (unsigned int)v4 % 2 & 1;\n    tmp_189 = (unsigned int)v4 % 4 & 1;\n    *(&((char *)stack_base)[(unsigned long long)((unsigned int)v4 & 1) + -66]) = 43;\n    v1 = v5;\n    *(&((char *)stack_base)[((unsigned int)v4 % 2 & 1) + (unsigned long long)((unsigned int)v4 & 1) + -66]) = 32;\n    v7 = (unsigned long long)((v6 ^ 0x80000000) & v6 < 0 | !(v6 < 0) & v6);\n    *(&((char *)stack_base)[((unsigned int)v4 % 4 & 1) + (unsigned long long)((unsigned int)v4 % 2 & 1) + ((unsigned int)v4 & 1) + -66]) = 48;\n    tmp_230 = (unsigned int)v4 % 8 & 1;\n    v8 = 0;\n    *((short *)&((char *)stack_base)[((unsigned int)v4 % 4 & 1) + (unsigned long long)((unsigned int)v4 % 2 & 1) + ((unsigned int)v4 & 1) + ((unsigned int)v4 % 8 & 1) + -66]) = 11818;\n    *(&((char *)stack_base)[((unsigned int)v4 % 4 & 1) + (unsigned long long)((unsigned int)v4 % 2 & 1) + ((unsigned int)v4 & 1) + ((unsigned int)v4 % 8 & 1) + -64]) = 42;\n    *(&((char *)stack_base)[tmp_189 + tmp_185 + tmp_106 + tmp_230 + -62]) = 0;\n    *((unsigned long long *)&((char *)stack_base)[tmp_189 + tmp_185 + tmp_106 + tmp_230 + -63]) = (0 - (unsigned int)(char)(((unsigned int)v4 & 16) < 1) & 32) + 71;\n    v10 = (((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 0 | (unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6) & 1) == 1;\n    v15 = rbx<8> * 5 + 1;\n    while (true)\n    {\n        v0 = v15;\n        v11 = __snprintf_chk();\n        if ((unsigned int)v11 < 0)\n        {\n            break;\n        }\n        if ((unsigned int)v15 > 8)\n        {\n            break;\n        }\n        if (v11 < v12)\n        {\n            strtof(v13, 0x0);\n            v14 = (unsigned int)(BinaryOp CmpF & 69);\n            if ((char)[D] amd64g_calculate_condition(0x4<64>, 0x0<64>, cc_dep1<8>, 0x0<64>, cc_ndep<8>) && ((char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 2) & 1) == 0)\n            {\n                break;\n            }\n        }\n        v15 = (unsigned int)v15 + 1;\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_403050",
            "funcStartAddr": "0x403050",
            "funcEndAddr": "0x403112",
            "decompiledFuncCode": "extern char g_612321;\n\nint sub_403050()\n{\n    unsigned long v0;  // [bp-0x60]\n    char v1;  // [bp-0x40]\n    char v2;  // [bp-0x3f]\n    unsigned long v4;  // rcx\n    unsigned long long v5;  // rdi\n    unsigned long v6;  // rsi\n    unsigned long long v7;  // rdx\n    unsigned long long v8;  // r9\n    unsigned long long v9;  // rax\n    unsigned long long v10;  // rdi\n    char *v11;  // rdx\n    unsigned long long v12;  // r13\n    unsigned long long v14;  // r15\n    unsigned long long v15;  // r14\n\n    v0 = v4;\n    if (v5 > v6)\n    {\n        v12 = v7;\n        v15 = v5;\n        v14 = v8 * (v5 - 1);\n        while (true)\n        {\n            v15 -= 1;\n            if (g_612321 != 0)\n            {\n                v11 = v12 + 7;\n                v9 = &v1;\n                do\n                {\n                    v10 = *(v11);\n                    v9 = &v2;\n                    v11 = &v11[-1];\n                    *((unsigned long long *)&v1) = v10;\n                }\n                while (stack_base + -56 != v9);\n            }\n            v12 += 8;\n            v14 -= v8;\n            if (v15 == v6)\n            {\n                break;\n            }\n        }\n    }\n    return sub_407ac0();\n}\n"
        },
        {
            "funcName": "sub_4038f0",
            "funcStartAddr": "0x4038f0",
            "funcEndAddr": "0x403a3a",
            "decompiledFuncCode": "extern unsigned int g_40c300;\nextern unsigned int g_40c30f;\nextern unsigned long long g_6123c8;\nextern unsigned long long g_6123d0;\nextern char *stdout;\n\nint sub_4038f0()\n{\n    unsigned long long v1;  // rbx\n    char *v2;  // rdi\n    unsigned long long v3;  // cc_dep1\n    unsigned long long v4;  // cc_dep2\n    unsigned long v5;  // d\n    unsigned long long v6;  // rcx\n    char *v7;  // rsi\n    unsigned long long v8;  // rbx\n    unsigned long long v9;  // cc_dep1\n    unsigned int v10;  // edi\n    unsigned long long v11;  // rax\n    char *v12;  // rdi\n    unsigned long long v13;  // rcx\n    char *v14;  // rsi\n    unsigned long long v15;  // cc_dep1\n    unsigned long long v16;  // cc_dep2\n    unsigned long v17;  // d\n    unsigned long long v19;  // rbx\n    unsigned long long v21;  // rax\n\n    v1 = 1;\n    if (g_6123c8 != 0)\n    {\n        if ((*((char *)g_6123c8) & 32) == 0)\n        {\n            v2 = \"-\";\n            v6 = 2;\n            v7 = *((long long *)(g_6123d0 - 8));\n            while (v6 != 0)\n            {\n                v6 -= 1;\n                v3 = *(v7);\n                v4 = *(v2);\n                v2 = &v2[v5];\n                v7 = &v7[v5];\n                break;\n            }\n            v9 = (v3 > v4) - 0 - (v3 < v4);\n            if ((char)v9 != 0)\n            {\n                v11 = sub_408120();\n                if (v11 != 0)\n                {\n                    v19 = (unsigned int)sub_407090();\n                    v1 = 0;\n                    error(0x0, *(__errno_location()), \"%s\");\n                }\n            }\n            if ((char)v9 == 0 || v11 == 0)\n            {\n                v1 = 1;\n            }\n        }\n        else\n        {\n            v8 = (unsigned int)sub_407090();\n            error(0x0, v10, (unsigned long long)dcgettext(0x0, 0x40c300, 0x5));\n            v12 = \"-\";\n            v13 = 2;\n            v14 = *((long long *)(g_6123d0 - 8));\n            while (v13 != 0)\n            {\n                v13 -= 1;\n                v15 = *(v14);\n                v16 = *(v12);\n                v12 = &v12[v17];\n                v14 = &v14[v17];\n                break;\n            }\n            v1 = 0;\n            if ((v15 > v16) - 0 - (v15 < v16) != 0)\n            {\n                sub_408120();\n            }\n        }\n        g_6123c8 = 0;\n    }\n    if ((*(stdout) & 32) == 0)\n    {\n        v21 = v1;\n        return v21;\n    }\n    error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40c30f, 0x5));\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_406dd0",
            "funcStartAddr": "0x406dd0",
            "funcEndAddr": "0x406e65",
            "decompiledFuncCode": "extern struct_0 *g_6122b8;\nextern unsigned long long g_6122c0;\nextern unsigned long long g_6122c8;\nextern unsigned int g_6122d0;\nextern unsigned long long g_612460;\n\nint sub_406dd0()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rbx\n    void *v3;  // rdi\n\n    v1 = g_6122d0;\n    if (g_6122d0 > 1)\n    {\n        v2 = &g_6122b8[1].field_8;\n        while (true)\n        {\n            v3 = *(v2);\n            v2 = &v2[2];\n            v1 = free(v3);\n            if (v2 == &g_6122b8[(unsigned long long)(g_6122d0 - 2) + 2].field_8)\n            {\n                break;\n            }\n        }\n    }\n    if (g_6122b8->field_8 != 6366304)\n    {\n        v1 = free(g_6122b8->field_8);\n        g_6122c0 = 0x100;\n        g_6122c8 = &g_612460;\n    }\n    if (g_6122b8 != 6365888)\n    {\n        v1 = free(g_6122b8);\n        g_6122b8 = &g_6122c0;\n    }\n    g_6122d0 = 1;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_407bc0",
            "funcStartAddr": "0x407bc0",
            "funcEndAddr": "0x407c4f",
            "decompiledFuncCode": "int sub_407bc0()\n{\n    unsigned int v0;  // [bp-0xd0]\n    unsigned int v1;  // [bp-0xcc]\n    unsigned long v2;  // [bp-0xc8]\n    unsigned long v3;  // [bp-0xc0]\n    unsigned long v4;  // [bp-0xa8]\n    unsigned long v5;  // [bp-0xa0]\n    unsigned long v6;  // [bp-0x98]\n    unsigned long v7;  // [bp-0x90]\n    void v8;  // [bp-0x88]\n    void v9;  // [bp-0x78]\n    void v10;  // [bp-0x68]\n    void v11;  // [bp-0x58]\n    void v12;  // [bp-0x48]\n    void v13;  // [bp-0x38]\n    void v14;  // [bp-0x28]\n    void v15;  // [bp-0x18]\n    unsigned long v17;  // rdx\n    unsigned long v18;  // rcx\n    unsigned long v19;  // r8\n    unsigned long v20;  // r9\n    char v21;  // al\n    void v22;  // xmm0\n    void v23;  // xmm1\n    void v24;  // xmm2\n    void v25;  // xmm3\n    void v26;  // xmm4\n    void v27;  // xmm5\n    void v28;  // xmm6\n    void v29;  // xmm7\n\n    v4 = v17;\n    v5 = v18;\n    v6 = v19;\n    v7 = v20;\n    if (v21 != 0)\n    {\n        v8 = v22;\n        v9 = v23;\n        v10 = v24;\n        v11 = v25;\n        v12 = v26;\n        v13 = v27;\n        v14 = v28;\n        v15 = v29;\n    }\n    v0 = 16;\n    v2 = stack_base + 8;\n    v1 = 48;\n    v3 = stack_base + -184;\n    return sub_407b60();\n}\n"
        },
        {
            "funcName": "sub_406ec0",
            "funcStartAddr": "0x406ec0",
            "funcEndAddr": "0x406ed2",
            "decompiledFuncCode": "int sub_406ec0()\n{\n}\n"
        },
        {
            "funcName": "sub_407830",
            "funcStartAddr": "0x407830",
            "funcEndAddr": "0x407860",
            "decompiledFuncCode": "int sub_407830()\n{\n    unsigned int v1;  // rsi\n    void *v2;  // rdi\n    unsigned long long v3;  // rax\n\n    if (v1 == 0 && v2 != 0)\n    {\n        free(v2);\n        return 0;\n    }\n    if (v2 == 0 || v1 != 0)\n    {\n        v3 = realloc(v2, v1);\n        if (v3 == 0 && v1 != 0)\n        {\n            sub_407a20(); /* do not return */\n        }\n        if (v1 == 0 || v3 != 0)\n        {\n            return v3;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_4055f0",
            "funcStartAddr": "0x4055f0",
            "funcEndAddr": "0x405689",
            "decompiledFuncCode": "extern unsigned long long __progname_full;\nextern unsigned long long g_612458;\nextern unsigned long long program_invocation_short_name;\nextern unsigned long long stderr;\n\nint sub_4055f0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // r8\n    unsigned long long v6;  // cc_dep1\n    unsigned long long v7;  // cc_dep2\n    unsigned long v8;  // d\n    char *v9;  // rdi\n    char *v10;  // rsi\n    unsigned long long v11;  // rcx\n    char *v13;  // rdi\n    unsigned long long v14;  // rcx\n    char *v15;  // rsi\n    unsigned long long v16;  // cc_dep1\n    unsigned long long v17;  // cc_dep2\n\n    if (v1 != 0)\n    {\n        v3 = v1;\n        v4 = strrchr();\n        if (v4 != 0)\n        {\n            v5 = v4 + 1;\n            if (v4 + 1 - v1 > 6)\n            {\n                v10 = v4 - 6;\n                v9 = \"/.libs/\";\n                v11 = 7;\n                while (v11 != 0)\n                {\n                    v11 -= 1;\n                    v6 = *(v10);\n                    v7 = *(v9);\n                    v9 = &v9[v8];\n                    v10 = &v10[v8];\n                    break;\n                }\n                if ((v6 > v7) - 0 - (v6 < v7) == 0)\n                {\n                    v13 = \"lt-\";\n                    v14 = 3;\n                    v15 = v5;\n                    v3 = v5;\n                    while (v14 != 0)\n                    {\n                        v14 -= 1;\n                        v16 = *(v15);\n                        v17 = *(v13);\n                        v13 = &v13[v8];\n                        v15 = &v15[v8];\n                        break;\n                    }\n                    if ((v16 > v17) - 0 - (v16 < v17) == 0)\n                    {\n                        v3 = v4 + 4;\n                        program_invocation_short_name = v4 + 4;\n                    }\n                }\n            }\n        }\n        g_612458 = v3;\n        __progname_full = v3;\n        return v4;\n    }\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 0x1, 0x37, stderr);\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_403680",
            "funcStartAddr": "0x403680",
            "funcEndAddr": "0x40376f",
            "decompiledFuncCode": "extern char g_612321;\n\nint sub_403680()\n{\n    unsigned long v0;  // [bp-0x70]\n    unsigned int v1;  // [bp-0x5c]\n    unsigned long v3;  // rdi\n    unsigned long v4;  // rsi\n    unsigned long long v5;  // rdx\n    unsigned long long v6;  // r12\n    unsigned long long v7;  // r9\n    unsigned int v9;  // eax\n    char v10;  // ah\n    unsigned int v11;  // r13d\n    unsigned long long v12;  // r15\n    unsigned long long v15;  // r14\n\n    if (v3 > v4)\n    {\n        v6 = v5;\n        v12 = 0;\n        v0 = v3 - v4;\n        v15 = v7 * (v3 - 1);\n        while (true)\n        {\n            if (g_612321 != 0)\n            {\n                v9 = r13<4>;\n                v10 = *((char *)(v6 + v12 * 4 + 2));\n                v1 = rax<4> | (unsigned int)((unsigned long long)(char)*((char *)(v6 + v12 * 4 + 1)) * 0x10000) | (unsigned int)((unsigned long long)(char)*((char *)(v6 + v12 * 4)) * 0x1000000);\n                v11 = rax<4> | (unsigned int)((unsigned long long)(char)*((char *)(v6 + v12 * 4 + 1)) * 0x10000) | (unsigned int)((unsigned long long)(char)*((char *)(v6 + v12 * 4)) * 0x1000000);\n            }\n            v12 += 1;\n            sub_405390();\n            v15 -= v7;\n            if (v0 == v12)\n            {\n                break;\n            }\n        }\n    }\n    return sub_407ac0();\n}\n"
        },
        {
            "funcName": "sub_408f70",
            "funcStartAddr": "0x408f70",
            "funcEndAddr": "0x408f88",
            "decompiledFuncCode": "int sub_408f70()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 1;\n    return sub_408f10();\n}\n"
        },
        {
            "funcName": "sub_40b2d0",
            "funcStartAddr": "0x40b2d0",
            "funcEndAddr": "0x40b48c",
            "decompiledFuncCode": "int sub_40b2d0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_403a50",
            "funcStartAddr": "0x403a50",
            "funcEndAddr": "0x403b41",
            "decompiledFuncCode": "extern unsigned int g_40c31b;\nextern char g_6123c4;\nextern unsigned long long g_6123c8;\nextern unsigned long long *g_6123d0;\nextern unsigned long long g_6123d8;\nextern char g_612410;\nextern char g_612432;\nextern unsigned long long stdin;\n\nint sub_403a50()\n{\n    unsigned long long v1;  // rbx\n    unsigned long long v2;  // rdx\n    unsigned long long v3;  // cc_dep1\n    unsigned long long v4;  // cc_dep2\n    unsigned long v5;  // d\n    char *v6;  // rsi\n    unsigned long long v7;  // rcx\n    char *v8;  // rdi\n    void *v10;  // rax\n    unsigned long long v11;  // rbx\n    unsigned long long v13;  // rax\n\n    v1 = 1;\n    while (true)\n    {\n        v2 = *(g_6123d0);\n        g_6123d8 = *(g_6123d0);\n        if (v2 == 0)\n        {\n            break;\n        }\n        v8 = \"-\";\n        v7 = 2;\n        v6 = *(g_6123d0);\n        while (v7 != 0)\n        {\n            v7 -= 1;\n            v3 = *(v6);\n            v4 = *(v8);\n            v8 = &v8[v5];\n            v6 = &v6[v5];\n            break;\n        }\n        g_6123d0 = &g_6123d0[1];\n        if ((v3 > v4) - 0 - (v3 < v4) == 0)\n        {\n            g_6123c4 = 1;\n            g_6123d8 = dcgettext(0x0, 0x40c31b, 0x5);\n            v10 = stdin;\n            g_6123c8 = stdin;\n        }\n        else\n        {\n            v10 = fopen(*(g_6123d0), \"r\");\n            g_6123c8 = v10;\n            if (v10 == 0)\n            {\n                v11 = (unsigned int)sub_407090();\n                v1 = 0;\n                error(0x0, *(__errno_location()), \"%s\");\n                v10 = g_6123c8;\n            }\n        }\n        if (g_612410 == 0 || g_612432 != 0)\n        {\n            break;\n        }\n        setvbuf(v10, NULL, 0x2, 0x0);\n    }\n    v13 = v1;\n    return v13;\n}\n"
        },
        {
            "funcName": "sub_4048a0",
            "funcStartAddr": "0x4048a0",
            "funcEndAddr": "0x404951",
            "decompiledFuncCode": "extern unsigned long long g_6123c8;\nextern unsigned long long g_6123e0;\n\nint sub_4048a0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long *v3;  // rdx\n    unsigned long long *v4;  // rbx\n    unsigned long v5;  // r14\n    unsigned long v6;  // rsi\n    void *v7;  // rdi\n    unsigned long long v8;  // rax\n    unsigned long long v11;  // rbp\n    unsigned long long v12;  // rdi\n\n    if (v1 != 0 && g_6123e0 >= v1)\n    {\n        v4 = v3;\n        *(v3) = 0;\n        if (g_6123c8 != 0)\n        {\n            v12 = 0;\n            v11 = 1;\n            while (true)\n            {\n                v5 = v1 - v12;\n                v7 = v12 + v6;\n                v8 = fread_unlocked(v7, 0x1, v5, g_6123c8);\n                *(v4) = *(v4) + v8;\n                if (v5 == v8)\n                {\n                    break;\n                }\n                __errno_location();\n                v11 = (unsigned int)v11 & sub_4038f0() & sub_403a50();\n                if (g_6123c8 == 0)\n                {\n                    break;\n                }\n                v12 = *(v4);\n            }\n        }\n        return stack_base + 0;\n    }\n    if (g_6123e0 < v1 || v1 == 0)\n    {\n        __assert_fail(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_408fb0",
            "funcStartAddr": "0x408fb0",
            "funcEndAddr": "0x408fc5",
            "decompiledFuncCode": "int sub_408fb0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_408940();\n}\n"
        },
        {
            "funcName": "sub_402ce1",
            "funcStartAddr": "0x402ce1",
            "funcEndAddr": "0x402d38",
            "decompiledFuncCode": "extern char g_612308;\nextern unsigned long long g_612310;\n\nint sub_402ce1()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // rax\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long long v9;  // rbx\n    unsigned long long v10;  // r12\n\n    if (g_612308 == 0)\n    {\n        v2 = stack_base + 0;\n        v1 = v5;\n        v0 = v6;\n        while (true)\n        {\n            if (g_612310 >= 0)\n            {\n                break;\n            }\n            g_612310 = g_612310 + 1;\n            *((long long *)(6364736 + (v7 + 1) * 8))();\n        }\n        v9 = v0;\n        v10 = v1;\n        g_612308 = 1;\n        return sub_402c8b();\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_4069c0",
            "funcStartAddr": "0x4069c0",
            "funcEndAddr": "0x406b60",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[4];\n    unsigned int field_4;\n    char padding_8[32];\n    unsigned long long field_28;\n    unsigned long long field_30;\n} struct_0;\n\nextern uint128_t *g_6122b8;\nextern uint128_t g_6122c0;\nextern unsigned int g_6122d0;\nextern int512_t g_612460;\n\nint sub_4069c0()\n{\n    unsigned long v0;  // [bp-0x78]\n    unsigned long v1;  // [bp-0x70]\n    unsigned long v2;  // [bp-0x68]\n    unsigned long v3;  // [bp-0x50]\n    unsigned long long|unsigned long v4;  // [bp-0x48]\n    unsigned int v5;  // [bp-0x40]\n    unsigned int v6;  // [bp-0x3c]\n    unsigned long long v8;  // rcx\n    struct_0 *v9;  // rbp\n    unsigned long v10;  // rsi\n    unsigned int *v11;  // r13\n    unsigned long v13;  // rdi\n    uint128_t *v15;  // rax\n    unsigned long long v16;  // rax\n    uint128_t *v17;  // rbx\n    unsigned long long v19[2];  // rbx\n    void *v20;  // r12\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rsi\n    unsigned long long v24;  // rax\n\n    v9 = v8;\n    v3 = v10;\n    v17 = g_6122b8;\n    v11 = __errno_location();\n    v5 = *(v11);\n    if ((unsigned int)v13 < 0)\n    {\n        abort(); /* do not return */\n    }\n    if (g_6122d0 <= (unsigned int)v13)\n    {\n        if ((unsigned int)v13 != 2147483647)\n        {\n            if (g_6122b8 != 6365888)\n            {\n                v16 = sub_407830();\n                g_6122b8 = v16;\n                v17 = v16;\n            }\n            else\n            {\n                v15 = sub_407830();\n                v17 = v15;\n                g_6122b8 = v15;\n                *(v15) = g_6122c0;\n            }\n            memset(&v17[(long long)(int)g_6122d0], 0x0, (int)((unsigned int)v13 + 1 - g_6122d0) * 16);\n            g_6122d0 = (unsigned int)v13 + 1;\n        }\n        else\n        {\n            sub_407a20(); /* do not return */\n        }\n    }\n    if (g_6122d0 > (unsigned int)v13 || (unsigned int)v13 != 2147483647)\n    {\n        v19 = &v17[v13];\n        v20 = v19[1];\n        v6 = v9->field_4 | 1;\n        v2 = v9->field_30;\n        v1 = v9->field_28;\n        v0 = &v9->padding_8;\n        *((unsigned long long [2])&v4) = *(v19);\n        v21 = sub_405790();\n        if (v4 <= v21)\n        {\n            v22 = v21 + 1;\n            v19[0] = v21 + 1;\n            if (v20 != 6366304)\n            {\n                v4 = v22;\n                free(v20);\n                v22 = v4;\n            }\n            v4 = v22;\n            v19[1] = v20;\n            v20 = (unsigned long long)(unsigned int)sub_4077d0();\n            v2 = v9->field_30;\n            v1 = v9->field_28;\n            v0 = v8 + 8;\n            sub_405790();\n        }\n        *(v11) = v5;\n        v24 = v20;\n        return v24;\n    }\n}\n"
        },
        {
            "funcName": "sub_404960",
            "funcStartAddr": "0x404960",
            "funcEndAddr": "0x404dfd",
            "decompiledFuncCode": "extern unsigned int g_40c403;\nextern unsigned int g_40d4c8;\nextern unsigned int g_40d4f0;\nextern unsigned int g_40d598;\nextern unsigned int g_40d650;\nextern unsigned int g_40d688;\nextern unsigned int g_40d810;\nextern unsigned int g_40d860;\nextern unsigned int g_40d980;\nextern unsigned int g_40dba8;\nextern unsigned int g_40dbd8;\nextern unsigned int g_40dc10;\nextern unsigned int g_40dd50;\nextern unsigned int g_40de68;\nextern unsigned int g_40df10;\nextern unsigned int g_40e010;\nextern unsigned int g_40e108;\nextern unsigned int g_40e168;\nextern unsigned int g_40e240;\nextern unsigned int g_40e288;\nextern unsigned int g_40e2a8;\nextern unsigned long long g_612458;\nextern unsigned long long stderr;\nextern unsigned long long stdout;\n\nint sub_404960()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long v10;  // [bp-0x38]\n    unsigned long v11;  // [bp-0x30]\n    unsigned long long v12;  // [bp-0x28]\n    unsigned long long v13;  // [bp-0x20]\n    unsigned long v14;  // [bp-0x18]\n    unsigned long v15;  // [bp-0x8]\n    unsigned long v17;  // r12\n    unsigned long v18;  // rbx\n    unsigned long v19;  // rdi\n    unsigned long long v37[2];  // rax\n    char *v38;  // rdi\n    char *v39;  // rsi\n    unsigned long long v40;  // rcx\n    unsigned long long v41;  // cc_dep1\n    unsigned long long v42;  // cc_dep2\n    unsigned long v43;  // d\n    char *v47;  // rax\n    char *v48;  // rax\n    unsigned long long v49;  // rax\n\n    v15 = v17;\n    v14 = v18;\n    if ((unsigned int)v19 != 0)\n    {\n        __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x40d4c8, 0x5), g_612458);\n    }\n    else\n    {\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40d4f0, 0x5));\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40d598, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40d650, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40d688, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40d810, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40d860, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40d980, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40dba8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40dbd8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40dc10, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40dd50, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40de68, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40df10, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40e010, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40e108, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40e168, 0x5), stdout);\n        v0 = \"[\";\n        v37 = &v0;\n        v1 = \"test invocation\";\n        v2 = \"coreutils\";\n        v3 = \"Multi-call\";\n        v4 = \"sha224sum\";\n        v5 = \"sha2 utilities\";\n        v6 = \"sha256sum\";\n        v7 = \"sha2 utilities\";\n        v8 = \"sha384sum\";\n        v9 = \"sha2 utilities\";\n        v10 = \"sha512sum\";\n        v11 = \"sha2 utilities\";\n        v12 = 0;\n        v13 = 0;\n        while (true)\n        {\n            v37 = &v2;\n            v38 = v2;\n            if (v2 == 0)\n            {\n                break;\n            }\n            v39 = \"od\";\n            v40 = 3;\n            if ((v41 > v42) - 0 - (v41 < v42) == 0)\n            {\n                break;\n            }\n            while (v40 != 0)\n            {\n                v40 -= 1;\n                v41 = *(v39);\n                v42 = *(v38);\n                v38 = &v38[v43];\n                v39 = &v39[v43];\n                break;\n            }\n        }\n        if (v37[1] != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40c403, 0x5));\n            v48 = setlocale(0x5, 0x0);\n        }\n        else\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40c403, 0x5));\n            v47 = setlocale(0x5, 0x0);\n            if (v47 != 0)\n            {\n                v49 = strncmp(v47, \"en_\", 0x3);\n            }\n            if (v47 == 0 || v49 == 0)\n            {\n                __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40e288, 0x5));\n            }\n        }\n        if ((v37[1] == 0 || v48 != 0) && (v37[1] == 0 || strncmp(v48, \"en_\", 0x3) != 0) && (v37[1] != 0 || v47 != 0) && (v37[1] != 0 || v49 != 0))\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40e240, 0x5));\n        }\n        if (v37[1] != 0 || v47 != 0 && v49 != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40e288, 0x5));\n        }\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40e2a8, 0x5));\n    }\n    exit(v19); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_402ec0",
            "funcStartAddr": "0x402ec0",
            "funcEndAddr": "0x402ef2",
            "decompiledFuncCode": "int sub_402ec0()\n{\n    unsigned long v0;  // [bp-0x30]\n    unsigned long v1;  // [bp-0x28]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v4;  // [bp-0x10]\n    unsigned long v5;  // [bp-0x8]\n    unsigned long v7;  // rdi\n    unsigned long v8;  // rsi\n    unsigned long v9;  // rax\n    unsigned long v10;  // r15\n    unsigned long v11;  // r14\n    unsigned long v12;  // r13\n    unsigned long v13;  // r12\n    unsigned long v14;  // rbx\n\n    if (v7 > v8)\n    {\n        v5 = v10;\n        v4 = v11;\n        v3 = v12;\n        v2 = v13;\n        v1 = stack_base + 0;\n        v0 = v14;\n    }\n    else\n    {\n        return v9;\n    }\n}\n"
        },
        {
            "funcName": "sub_405790",
            "funcStartAddr": "0x405790",
            "funcEndAddr": "0x4068c8",
            "decompiledFuncCode": "int sub_405790()\n{\n    unsigned long long v0;  // [bp-0x1e8]\n    void tmp_38;  // tmp #38\n    unsigned long long|unsigned int * v1;  // [bp-0xe8]\n    unsigned long long v2;  // [bp-0xe0]\n    unsigned long v3;  // [bp-0xd8]\n    unsigned long long|char|unsigned long v4;  // [bp-0xc0]\n    unsigned long long|char|unsigned long v5;  // [bp-0xb8]\n    char v6;  // [bp-0xa9]\n    unsigned long long v7;  // [bp-0xa8]\n    unsigned long long v8;  // [bp-0xa0]\n    unsigned long long|char v9;  // [bp-0x98]\n    unsigned long long|unsigned long v10;  // [bp-0x90]\n    unsigned long long|unsigned int v11;  // [bp-0x88]\n    unsigned long long|unsigned int v12;  // [bp-0x80]\n    unsigned long long v13;  // [bp-0x78]\n    unsigned long long v14;  // [bp-0x70]\n    unsigned long v15;  // [bp-0x68]\n    unsigned int v16;  // [bp-0x60]\n    char v17;  // [bp-0x5c]\n    unsigned long long|char v18;  // [bp-0x5b]\n    unsigned long long v19;  // [bp-0x5a]\n    char v20;  // [bp-0x59]\n    unsigned long long v21;  // [bp-0x58]\n    unsigned long long v22;  // [bp-0x50]\n    char v23;  // [bp-0x44]\n    unsigned long long v24;  // [bp-0x40]\n    unsigned int *v25;  // [bp+0x8]\n    unsigned long long v26;  // [bp+0x10]\n    void *v27;  // [bp+0x18]\n    unsigned long long v28;  // rdi\n    unsigned long long v29;  // r15\n    unsigned long v30;  // r8\n    unsigned long long v31;  // rcx\n    unsigned long v32;  // r9\n    unsigned long long|unsigned long v33;  // r10\n    unsigned long long v34;  // rbp\n    unsigned long long v35;  // r13\n    unsigned long long v36;  // r13\n    unsigned long long v37;  // r8\n    unsigned long long v38;  // r9\n    unsigned long long v39;  // r11\n    unsigned long long|unsigned long v40;  // rbp\n    unsigned long long v41;  // rax\n    unsigned long long v42;  // rax\n    char v43;  // al\n    unsigned long long v44;  // rdx\n    unsigned long long v45;  // rcx\n    unsigned long long|unsigned short|unsigned long v46;  // rax\n    unsigned long long v47;  // rcx\n    unsigned long long v48;  // r13\n    unsigned long long v49;  // r13\n    unsigned long long v50;  // r13\n    char v51;  // r13b\n    unsigned long long v52;  // r13\n    unsigned long long v53;  // rdx\n    unsigned long long v54;  // rbx\n    unsigned long long v55;  // r13\n    unsigned long long v56;  // r15\n    unsigned long long v57;  // rbp\n    unsigned long long v58;  // r14\n    char *v59;  // rax\n    unsigned long long v60;  // rcx\n    unsigned long long v62;  // r13\n    unsigned long long v63;  // r13\n    unsigned long long v64;  // rcx\n    char v65;  // al\n    char v66;  // al\n    unsigned int v67;  // eax\n    char v68;  // al\n    unsigned int v70;  // eax\n    char v71;  // al\n    unsigned long v72;  // rdx\n    unsigned long long v73;  // rax\n    char v74;  // al\n    unsigned long long v75;  // rdx\n    unsigned long long v76;  // rbx\n    unsigned long long|unsigned int v77;  // rsi\n    unsigned long long|unsigned int v78;  // r13\n    unsigned long long v79;  // r14\n    unsigned long long v80;  // r12\n    unsigned int v81;  // r13d\n    unsigned long long v82;  // r11\n    char v83;  // dl\n    unsigned long long v84;  // rax\n    unsigned long long v85;  // cc_dep1\n    unsigned long long v86;  // dl\n    unsigned long long v87;  // rax\n    unsigned long long v88;  // rax\n    unsigned long long|char v89;  // rdx\n    unsigned long long v90;  // rdx\n    unsigned long long v91;  // rax\n    unsigned long long v92;  // rax\n\n    v29 = v28;\n    v79 = v77;\n    v78 = v30;\n    v7 = v89;\n    v4 = v31;\n    v16 = v32;\n    v15 = __ctype_get_mb_cur_max();\n    v17 = ((unsigned int)v32 & 2) != 0;\n    switch ((unsigned int)v30)\n    {\n    case 0:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 0;\n        v8 = 0;\n        v13 = 0;\n    case 1:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 0;\n        v8 = 1;\n        v13 = \"'\";\n    case 2:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 0;\n            if (v77 == 0)\n            {\n                v6 = 1;\n                v33 = 0;\n                v76 = 1;\n                v78 = 2;\n                v14 = 0;\n                v18 = 0;\n                v17 = 0;\n                v8 = 1;\n                v13 = \"'\";\n            }\n            else\n            {\n                v84 = 0;\n                v6 = 1;\n                v14 = 0;\n            }\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v76 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 0;\n            v8 = 1;\n            v13 = \"'\";\n        }\n    case 3:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"'\";\n    case 4:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 1;\n        }\n    case 5:\n        if (((char)v32 & 2) == 0)\n        {\n            if (v77 != 0)\n            {\n                *((char *)v28) = 34;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n                v14 = 0;\n            }\n            else\n            {\n                v14 = 0;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n            }\n            v17 = 0;\n            v76 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v76 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n    case 6:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 5;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"\\\"\";\n    case 7:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 1;\n        v8 = 0;\n        v13 = 0;\n    case 8: case 9: case 10:\n        if (v30 != 10)\n        {\n            v4 = v4;\n            v26 = (unsigned int)sub_405690();\n            v27 = (unsigned long long)(unsigned int)sub_405690();\n        }\n        v76 = 0;\n        if (((char)v32 & 2) == 0)\n        {\n            v78 = (char)*((char *)v26);\n            if (*((char *)v26) != 0)\n            {\n                do\n                {\n                    if (v77 > v76)\n                    {\n                        *((unsigned long long *)(v28 + v76)) = v78;\n                    }\n                    v76 += 1;\n                    v78 = (char)*((char *)(v26 + v76));\n                }\n                while ((char)v78 != 0);\n            }\n        }\n        v5 = v82;\n        v6 = 1;\n        v8 = strlen(v27);\n        v18 = 0;\n        v13 = v27;\n        v14 = 0;\n        v4 = 1;\n    default:\n        abort(); /* do not return */\n    }\n    v82 = v4;\n    while (true)\n    {\n        v38 = v82;\n        v80 = 0;\n        v39 = v78;\n        while (true)\n        {\n            v78 = (char)(v38 != v80);\n            if (v38 == -1)\n            {\n                v78 = (char)(*((char *)(v7 + v80)) != 0);\n            }\n            if (v78 != 0)\n            {\n                v37 = v7 + v80;\n                v5 = (unsigned int)v39 != 2 & v4;\n                if (((unsigned int)v39 != 2 & v4) != 0)\n                {\n                    v78 = v8;\n                    if (v8 != 0)\n                    {\n                        v34 = v80 + v78;\n                        if (v38 == -1 && v78 > 1)\n                        {\n                            v11 = v39;\n                            v10 = v33;\n                            v9 = v37;\n                            v38 = strlen(v7);\n                        }\n                        if (v34 <= v38)\n                        {\n                            v12 = v39;\n                            v11 = v38;\n                            v10 = v33;\n                            v9 = v37;\n                            v78 = memcmp(v37, v13, v8);\n                            v37 = v9;\n                            v33 = (char)v10;\n                            v38 = v11;\n                            v39 = v12;\n                            if (v17 == 0 && v78 == 0)\n                            {\n                                v40 = (char)*((char *)v37);\n                                switch (*((char *)v37))\n                                {\n                                case 0:\n                                    v89 = (char)((unsigned int)v39 == 2);\n                                    v78 = (unsigned int)(0 ^ 1);\n                                    v78 = (char)(0 ^ 1) & (unsigned int)v39 == 2;\n                                    if (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0)\n                                    {\n                                        if (v77 > v76)\n                                        {\n                                            *((char *)(v28 + v76)) = 39;\n                                        }\n                                        if (v77 > v76 + 1)\n                                        {\n                                            *((char *)(v28 + v76 + 1)) = 36;\n                                        }\n                                        if (v77 > v76 + 2)\n                                        {\n                                            *((char *)(v28 + v76 + 2)) = 39;\n                                        }\n                                        v47 = v76 + 3;\n                                        v76 += 4;\n                                        v33 = rax<8>;\n                                        v78 = 0;\n                                        v40 = 48;\n                                    }\n                                    else\n                                    {\n                                        v47 = v76;\n                                        v78 = 0;\n                                        v76 = v47 + 1;\n                                        v78 = v78;\n                                        v40 = 48;\n                                        v78 = 0;\n                                        v40 = 48;\n                                        if (1 < v38)\n                                        {\n                                            v9 = *((char *)(v7 + 0 + 1));\n                                            if (((unsigned int)(char)*((char *)(v7 + 0 + 1)) - 48 & 255) <= 9)\n                                            {\n                                                if (v77 > v76)\n                                                {\n                                                    *((char *)(v28 + v76)) = 48;\n                                                }\n                                                if (v77 > v47 + 2)\n                                                {\n                                                    *((char *)(v28 + v47 + 2)) = 48;\n                                                }\n                                                v76 = v47 + 3;\n                                                v40 = 48;\n                                            }\n                                        }\n                                        v78 = v78;\n                                        v78 = 0;\n                                    }\n                                    if ((v77 > v76 || ((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0) && (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) == 0 || v77 > v76 + 3))\n                                    {\n                                        *((char *)(v28 + v47)) = 92;\n                                        v33 = v78;\n                                    }\n                                case 7:\n                                    v40 = 97;\n                                case 8:\n                                    v89 = 0;\n                                    v78 = 0;\n                                    v40 = 98;\n                                case 13:\n                                    v40 = 13;\n                                    v45 = 114;\n                                    v89 = (unsigned int)v39 == 2;\n                                case 32:\n                                    v41 = v5;\n                                case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                                    v89 = 0;\n                                case 35: case 126:\n                                    v42 = v5;\n                                case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                                    v41 = v5;\n                                    v48 = v5;\n                                    v5 = v41;\n                                    v78 = 0;\n                                    if (v25 != 0)\n                                    {\n                                        v72 = (unsigned int)((unsigned long long)v25[v40 % 32] >> ((char)v40 & 31)) & 1;\n                                        v89 = (unsigned int)v39 == 2;\n                                    }\n                                    else\n                                    {\n                                        v89 = (unsigned int)v39 == 2;\n                                        v80 += 1;\n                                        v46 = (v78 ^ 1) & (unsigned int)v33;\n                                        if (v46 != 0)\n                                        {\n                                            if (v79 > v76)\n                                            {\n                                                *((char *)(v29 + v76)) = 39;\n                                            }\n                                            if (v79 > v76 + 1)\n                                            {\n                                                *((char *)(v29 + v76 + 1)) = 39;\n                                            }\n                                            v76 += 2;\n                                            v33 = 0;\n                                        }\n                                        v87 = v89;\n                                        v73 = (unsigned int)v33 ^ 1;\n                                        v74 = (char)((unsigned int)v33 ^ 1) & v89;\n                                        if (((char)((unsigned int)v33 ^ 1) & v89) != 0)\n                                        {\n                                            if (v79 > v76)\n                                            {\n                                                *((char *)(v29 + v76)) = 39;\n                                            }\n                                            if (v76 + 1 < v79)\n                                            {\n                                                *((char *)(v29 + v76 + 1)) = 36;\n                                            }\n                                            v75 = v76 + 2;\n                                            if (v76 + 2 < v79)\n                                            {\n                                                *((char *)(v29 + v76 + 2)) = 39;\n                                            }\n                                            v76 += 3;\n                                            v33 = rax<8>;\n                                        }\n                                        *((unsigned long long *)&v4) = v4 & v87;\n                                        if (v79 > v76)\n                                        {\n                                            *((char *)(v29 + v76)) = 92;\n                                        }\n                                        v76 += 1;\n                                        v80 += 1;\n                                    }\n                                case 92:\n                                    v44 = v4;\n                                    v40 = 92;\n                                    v45 = 92;\n                                    v89 = v4 & v17 & v8 != 0;\n                                    if ((v4 & v17 & v8 != 0) != 0)\n                                    {\n                                        v80 = 1;\n                                        v46 = 0;\n                                        v78 = 0;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (v8 == 0 || v34 > v38 || v78 != 0)\n                    {\n                        v40 = (char)*((char *)v37);\n                        switch (*((char *)v37))\n                        {\n                        case 0:\n                            if (v17 == 0)\n                            {\n                                v5 = 0;\n                            }\n                            else\n                            {\n                                v4 = (unsigned int)v39 == 2;\n                            }\n                        case 7:\n                            v40 = 97;\n                            break;\n                        case 8:\n                            v40 = 98;\n                        case 9:\n                            v40 = 116;\n                        case 10:\n                            v40 = 110;\n                            v89 = 0;\n                            v78 = 0;\n                        case 11:\n                            v40 = 118;\n                            break;\n                        case 12:\n                            v40 = 102;\n                            break;\n                            if (v17 == 0)\n                            {\n                                v78 = 0;\n                            }\n                            else\n                            {\n                                v87 = 0;\n                            }\n                        case 13:\n                            v5 = 0;\n                        case 32:\n                            v41 = 0;\n                            v40 = 32;\n                        case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                            v5 = 0;\n                        case 35: case 126:\n                            v42 = 0;\n                            v49 = v5;\n                            v89 = 0;\n                            v5 = v42;\n                        case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                            v41 = 0;\n                        case 39:\n                            v5 = 0;\n                        case 63:\n                            v5 = 0;\n                        case 92:\n                            v5 = 0;\n                        case 123: case 125:\n                            v5 = 0;\n                        default:\n                            v5 = 0;\n                        }\n                    }\n                }\n                else\n                {\n                    v40 = (char)*((char *)v37);\n                    switch (*((char *)v37))\n                    {\n                    case 0:\n                        if (v4 == 0)\n                        {\n                            v80 += 1;\n                            v5 = 0;\n                            v89 = (char)((unsigned int)v39 == 2);\n                            v36 = 0;\n                            v40 = 0;\n                            break;\n                        }\n                    case 7:\n                        v40 = 7;\n                        v45 = 97;\n                        v89 = (unsigned int)v39 == 2;\n                    case 8:\n                        v40 = 8;\n                        v45 = 98;\n                        v89 = (unsigned int)v39 == 2;\n                    case 9:\n                        v40 = 9;\n                        v45 = 116;\n                        v89 = (unsigned int)v39 == 2;\n                        v5 = v17 & (unsigned int)v39 == 2;\n                        if ((v17 & (unsigned int)v39 == 2) == 0)\n                        {\n                            v40 = v45;\n                            v78 = 0;\n                        }\n                    case 10:\n                        v40 = 10;\n                        v45 = 110;\n                    case 11:\n                        v40 = 11;\n                        v45 = 118;\n                        v89 = (unsigned int)v39 == 2;\n                    case 12:\n                        v40 = 12;\n                        v45 = 102;\n                        v89 = (unsigned int)v39 == 2;\n                    case 13:\n                        v40 = 13;\n                        v45 = 114;\n                    case 32:\n                        v40 = 32;\n                        v89 = (char)((unsigned int)v39 == 2);\n                    case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                        v89 = (char)((unsigned int)v39 == 2);\n                        v35 = 0;\n                    case 35: case 126:\n                        v89 = (unsigned int)v39 == 2;\n                    case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                        v89 = (char)((unsigned int)v39 == 2);\n                        break;\n                    case 39:\n                        if ((unsigned int)v39 == 2)\n                        {\n                            if (v77 != 0)\n                            {\n                                v53 = 0;\n                            }\n                            if (v77 == 0 || v14 != 0)\n                            {\n                                if (v77 > v76)\n                                {\n                                    *((char *)(v28 + v76)) = 39;\n                                }\n                                if (v77 > v76 + 1)\n                                {\n                                    *((char *)(v28 + v76 + 1)) = 92;\n                                }\n                                if (v77 > v76 + 2)\n                                {\n                                    v53 = v77;\n                                    *((char *)(v28 + v76 + 2)) = 39;\n                                    v79 = v14;\n                                }\n                                else\n                                {\n                                    v53 = v77;\n                                    v79 = v14;\n                                }\n                            }\n                            v18 = v78;\n                            v76 += 3;\n                            v78 = 0;\n                            v33 = 0;\n                            v14 = v79;\n                            v40 = 39;\n                            v79 = v53;\n                        }\n                        else\n                        {\n                            v18 = v78;\n                            v89 = 0;\n                            v40 = 39;\n                            break;\n                        }\n                    case 63:\n                        if ((unsigned int)v39 != 2)\n                        {\n                            v40 = 63;\n                            v89 = (char)((unsigned int)v39 == 2);\n                            v52 = 0;\n                            break;\n                            v77 = v7;\n                            v40 = (char)*((char *)(v77 + 2));\n                            v77 = 0x7000a38200000000;\n                            v0 = 0x7000a38200000000;\n                            v89 = 0;\n                            v62 = 0;\n                            v40 = 63;\n                            break;\n                            if (v79 > v76)\n                            {\n                                *((char *)(v28 + v76)) = 63;\n                            }\n                            if (v79 > v76 + 1)\n                            {\n                                *((char *)(v28 + v76 + 1)) = 34;\n                            }\n                            if (v79 > v76 + 2)\n                            {\n                                *((char *)(v28 + v76 + 2)) = 34;\n                            }\n                            if (v79 > v76 + 3)\n                            {\n                                *((char *)(v28 + v76 + 3)) = 63;\n                            }\n                            v76 += 4;\n                            v89 = 0;\n                            v78 = 0;\n                            v80 = 2;\n                        }\n                        else\n                        {\n                            v78 = 0;\n                            v78 = 0;\n                            v40 = 63;\n                        }\n                    case 92:\n                        if ((unsigned int)v39 == 2)\n                        {\n                            v80 += 1;\n                            v46 = v33;\n                            v78 = 0;\n                            v40 = 92;\n                        }\n                    case 123: case 125:\n                        v43 = v38 != 1;\n                        if (v38 == -1)\n                        {\n                            v43 = *((char *)(v7 + 1)) != 0;\n                        }\n                        v89 = (unsigned int)v39 == 2;\n                        if (v43 == 0)\n                        {\n                            break;\n                        }\n                        else\n                        {\n                            v55 = 0;\n                            break;\n                        }\n                        if (v17 == 0 || v43 != 0)\n                        {\n                            v78 = ((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1;\n                            v78 = (char)(((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1) | v17;\n                            v78 = 0;\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v81 = v39;\n                v82 = v38;\n                v83 = v81 == 2;\n                if ((v81 == 2 & v17) == 0 || v76 != 0)\n                {\n                    v84 = (unsigned int)v17 ^ 1;\n                    v85 = v83 & (char)((unsigned int)v17 ^ 1);\n                    v86 = v83 & (char)((unsigned int)v17 ^ 1);\n                    if ((char)v85 == 0)\n                    {\n                        v86 = v84;\n                    }\n                    else if (v18 != 0)\n                    {\n                        if (v6 == 0)\n                        {\n                            v84 = v79 == 0 & v14 != 0;\n                            if ((v79 == 0 & v14 != 0) == 0)\n                            {\n                                v86 = v18;\n                            }\n                        }\n                        else\n                        {\n                            v3 = v27;\n                            v2 = v26;\n                            v1 = v25;\n                            v76 = (unsigned int)sub_405790();\n                        }\n                    }\n                }\n            }\n            if (v6 == 0 && v78 == 0 && v18 != 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && (v79 == 0 & v14 != 0) == 0 || v78 == 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && v18 == 0 || v78 == 0 && (char)v85 == 0 && ((v81 == 2 & v17) == 0 || v76 != 0))\n            {\n                v88 = v13;\n                if (v13 != 0 && v86 != 0)\n                {\n                    v90 = (char)*((char *)v88);\n                    if (*((char *)v88) != 0)\n                    {\n                        v91 = v88 - v76;\n                        do\n                        {\n                            if (v79 > v76)\n                            {\n                                *((unsigned long long *)(v29 + v76)) = v90;\n                            }\n                            v76 += 1;\n                            v90 = (char)*((char *)(v91 + v76));\n                        }\n                        while ((char)v90 != 0);\n                    }\n                }\n                if (v79 > v76)\n                {\n                    *((char *)(v29 + v76)) = 0;\n                }\n            }\n            if (v15 == 1)\n            {\n                v11 = v39;\n                v10 = v38;\n                v9 = v33;\n                v46 = (unsigned short)*((short *)(*((long long *)(unsigned long long)__ctype_b_loc()) + v40 * 2));\n                tmp_38 = v46 & 0x4000;\n                v46 &= 0x4000;\n                v51 = (tmp_38 & 65535) != 0;\n                v89 = (tmp_38 & 65535) == 0 & v4;\n                if (v89 != 0)\n                {\n                    v89 = v4;\n                    v78 = 0;\n                }\n            }\n            else\n            {\n                v24 = 0;\n                if (v38 == -1)\n                {\n                    v11 = v39;\n                    v10 = v33;\n                    v9 = v37;\n                    v38 = strlen(v7);\n                }\n                v21 = v76;\n                v22 = v37;\n                v54 = 0;\n                v19 = v33;\n                *((unsigned long long *)&v20) = v40;\n                v11 = v29;\n                v12 = v79;\n                v9 = v38;\n                v10 = v39;\n                do\n                {\n                    v56 = v80 + v54;\n                    v57 = v7 + v80 + v54;\n                    v46 = sub_409010();\n                    v58 = v46;\n                    if (v46 != -2 && v46 != 0 && v46 != -1)\n                    {\n                        if ((int)v10 == 2 && v17 != 0 && v46 != 1)\n                        {\n                            v59 = v7 + v77 + 1;\n                            v77 = v7 + v58 + v77;\n                            while (true)\n                            {\n                                v60 = (unsigned int)*(v59) - 91;\n                                if ((8589934635 & 1 << (v60 & 63)) == 0 || ((unsigned int)*(v59) - 91 & 255) > 33)\n                                {\n                                    v59 = &v59[1];\n                                    if (v77 == v59)\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                            if ((8589934635 & 1 << (v60 & 63)) == 0 || ((unsigned int)*(v59) - 91 & 255) > 33)\n                            {\n                                v78 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                                v54 += v58;\n                                v46 = mbsinit((unsigned int)&v24);\n                            }\n                        }\n                        v78 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                        v54 += v58;\n                        v46 = mbsinit((unsigned int)&v24);\n                    }\n                    if (v46 == -1)\n                    {\n                        v28 = v54;\n                        v40 = v20;\n                        v76 = v21;\n                        v78 = 0;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v79 = v12;\n                        v38 = v9;\n                        v39 = (unsigned int)v10;\n                        v89 = v4;\n                    }\n                    if (v46 == -2)\n                    {\n                        v38 = v9;\n                        v77 = v56;\n                        v46 = v54;\n                        v28 = v54;\n                        v33 = (char)v19;\n                        v40 = v20;\n                        v76 = v21;\n                        v29 = v11;\n                        v79 = v12;\n                        v39 = (unsigned int)v10;\n                        if (v77 < v9 && *((char *)v57) != 0)\n                        {\n                            do\n                            {\n                                v46 += 1;\n                            }\n                            while (v46 < v9 && *((char *)(v22 + v46)) != 0);\n                            v28 = v46;\n                        }\n                        v89 = v4;\n                        v78 = 0;\n                    }\n                    if (v46 == 0 || v46 != -2 && v46 != -1 && (unsigned int)v46 != 0)\n                    {\n                        v28 = v54;\n                        v40 = v20;\n                        v76 = v21;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v89 = (unsigned int)v78 ^ 1;\n                        v79 = v12;\n                        v38 = v9;\n                        v39 = (unsigned int)v10;\n                        v89 = (char)((unsigned int)v78 ^ 1) & v4;\n                    }\n                }\n                while (v28 <= 1);\n                if (v46 == -2 || v46 == 0 || v46 == -1 || (unsigned int)v46 != 0)\n                {\n                    v9 = v78;\n                    v77 = 0;\n                    v63 = v17;\n                    v64 = v28 + v80;\n                    v28 = v5;\n                }\n            }\n            if (false)\n            {\n                v5 = v42;\n                v50 = 0;\n            }\n            if (v15 != 1 || v89 != 0)\n            {\n                v9 = v78;\n                v77 = 0;\n                v63 = v17;\n                v64 = v28 + v80;\n                v28 = v5;\n                while (true)\n                {\n                    if (v89 != 0)\n                    {\n                        v65 = (unsigned int)v39 == 2;\n                        if (v63 == 0)\n                        {\n                            v77 = (unsigned int)v33 ^ 1;\n                            v66 = v4 & (char)((unsigned int)v33 ^ 1);\n                            if ((v4 & (char)((unsigned int)v33 ^ 1)) != 0)\n                            {\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 39;\n                                }\n                                if (v79 > v76 + 1)\n                                {\n                                    *((char *)(v29 + v76 + 1)) = 36;\n                                }\n                                v77 = v76 + 2;\n                                if (v79 > v76 + 2)\n                                {\n                                    *((char *)(v29 + v76 + 2)) = 39;\n                                }\n                                v76 += 3;\n                                v33 = v46;\n                            }\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            if (v79 > v76 + 1)\n                            {\n                                v67 = v40;\n                                v68 = (char)v40 % 64;\n                                *((unsigned long long *)(v29 + v76 + 1)) = (unsigned long long)(unsigned int)rax<4> + 48;\n                            }\n                            v46 = v76 + 2;\n                            if (v79 > v76 + 2)\n                            {\n                                v70 = v40;\n                                v71 = (char)v40 % 8;\n                                v46 = (unsigned int)((rax<4> & 7) + 48);\n                                *((unsigned long long *)(v29 + v76 + 2)) = v46;\n                            }\n                            v80 += 1;\n                            v76 += 3;\n                            v40 = ((unsigned int)v40 & 7) + 48;\n                            if (v80 < v64)\n                            {\n                                v77 = v89;\n                            }\n                            else\n                            {\n                                v78 = (char)v9;\n                            }\n                        }\n                        else\n                        {\n                            v4 = v65;\n                        }\n                    }\n                    else\n                    {\n                        v46 = (v77 ^ 1) & (unsigned int)v33;\n                        if (v28 != 0)\n                        {\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            v76 += 1;\n                        }\n                        v80 += 1;\n                        if (v80 >= v64)\n                        {\n                            v78 = (char)v9;\n                        }\n                        else if (v46 != 0)\n                        {\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 39;\n                            }\n                            v46 = v76 + 1;\n                            if (v79 > v76 + 1)\n                            {\n                                *((char *)(v29 + v76 + 1)) = 39;\n                            }\n                            v76 += 2;\n                            v28 = 0;\n                            v33 = 0;\n                        }\n                        else\n                        {\n                            v28 = 0;\n                        }\n                    }\n                    if ((v63 == 0 || v89 == 0) && (v89 == 0 || v80 < v64) && (v80 < v64 || v89 != 0))\n                    {\n                        if (v79 > v76)\n                        {\n                            *((unsigned long long *)(v29 + v76)) = v40;\n                        }\n                        v40 = (char)*((char *)(v7 + v80));\n                        v76 += 1;\n                    }\n                }\n            }\n            if ((v25 == 0 || v78 == 0) && (v25 == 0 || v76 == 0) && (v25 == 0 || (v81 == 2 & v17) != 0) && (v78 == 0 || v17 != 0) && (v78 == 0 || v5 != 0) && (v76 == 0 || v17 != 0) && (v76 == 0 || v5 != 0) && ((v81 == 2 & v17) != 0 || v17 != 0) && ((v81 == 2 & v17) != 0 || v5 != 0))\n            {\n                v3 = v27;\n                v2 = v26;\n                v1 = 0;\n                v76 = (unsigned int)sub_405790();\n            }\n            if ((v25 == 0 || v76 >= v79) && (v17 == 0 || v5 == 0 || v76 >= v79) && (v25 == 0 || v15 != 1 || v89 != 0) && (v17 == 0 || v5 == 0 || v15 != 1 || v89 != 0))\n            {\n                if (v76 < v79)\n                {\n                    *((unsigned long long *)(v29 + v76)) = v40;\n                }\n                v76 += 1;\n                v6 = (v78 == 0? 0 : (unsigned int)(char)(char)(stack_base)[-169]);\n            }\n            if (v6 == 0 && v78 == 0 && v18 != 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && (v79 == 0 & v14 != 0) == 0 || v78 == 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && v18 == 0 || v78 == 0 && (char)v85 == 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || v78 == 0 && v6 != 0 && v18 != 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || (v25 == 0 || v78 == 0) && (v25 == 0 || v76 == 0) && (v25 == 0 || (v81 == 2 & v17) != 0) && (v78 == 0 || v17 != 0) && (v78 == 0 || v5 != 0) && (v76 == 0 || v17 != 0) && (v76 == 0 || v5 != 0) && ((v81 == 2 & v17) != 0 || v17 != 0) && ((v81 == 2 & v17) != 0 || v5 != 0))\n            {\n                v92 = v76;\n                return v92;\n            }\n        }\n        *((char *)v29) = 39;\n        v78 = 2;\n        v13 = \"'\";\n        v8 = 1;\n        v17 = 0;\n        v18 = v84;\n    }\n}\n"
        },
        {
            "funcName": "sub_407750",
            "funcStartAddr": "0x407750",
            "funcEndAddr": "0x4077c4",
            "decompiledFuncCode": "extern unsigned int g_40f312;\nextern unsigned int g_40f33d;\nextern unsigned int g_40f570;\n\nint sub_407750()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40f312, 0x5));\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40f33d, 0x5));\n    dcgettext(0x0, 0x40f570, 0x5);\n}\n"
        },
        {
            "funcName": "sub_408f10",
            "funcStartAddr": "0x408f10",
            "funcEndAddr": "0x408f66",
            "decompiledFuncCode": "extern unsigned int g_6122d4;\nextern unsigned int g_6122d8;\nextern unsigned int g_6122dc;\nextern unsigned int g_6125a0;\nextern unsigned int g_6125a4;\nextern unsigned int g_6125a8;\nextern unsigned long long g_6125b0;\nextern unsigned long long g_6125e0;\n\nint sub_408f10()\n{\n    unsigned int *v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp+0x8]\n\n    g_6125a0 = g_6122dc;\n    g_6125a4 = g_6122d8;\n    v1 = (unsigned int)v2;\n    v0 = &g_6125a0;\n    g_6122dc = g_6125a0;\n    g_6125e0 = g_6125b0;\n    g_6122d4 = g_6125a8;\n    return sub_408940();\n}\n"
        },
        {
            "funcName": "sub_4097a0",
            "funcStartAddr": "0x4097a0",
            "funcEndAddr": "0x4097a4",
            "decompiledFuncCode": "int sub_4097a0()\n{\n    unsigned int *v1;  // rdi\n    unsigned long v2;  // rax\n\n    *(v1) = *(v1) | 32;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_406bc0",
            "funcStartAddr": "0x406bc0",
            "funcEndAddr": "0x406bf3",
            "decompiledFuncCode": "extern int512_t g_612560;\n\nint sub_406bc0()\n{\n    void tmp_2;  // tmp #2\n    void tmp_52;  // tmp #52\n    void tmp_123;  // tmp #123\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long long v3;  // rcx\n    unsigned long long v5;  // rsi\n    unsigned long v6;  // rdx\n\n    tmp_2 = v1;\n    tmp_52 = v1 == 0;\n    v3 = (unsigned int)v2 & 31;\n    v5 = (unsigned int)*((int *)((tmp_52? &g_612560 : tmp_2) + v2 % 32 * 4 + 8));\n    tmp_123 = ((unsigned int)v6 ^ (unsigned int)(v5 >> (v3 & 31))) & 1;\n    *((unsigned int *)((v1 == 0? &g_612560 : v1) + v2 % 32 * 4 + 8)) = (unsigned int)(tmp_123 << (v3 & 31)) ^ (unsigned int)v5;\n    return (unsigned int)(v5 >> (v3 & 31)) & 1;\n}\n"
        },
        {
            "funcName": "sub_406e70",
            "funcStartAddr": "0x406e70",
            "funcEndAddr": "0x406e81",
            "decompiledFuncCode": "int sub_406e70()\n{\n}\n"
        },
        {
            "funcName": "sub_402d38",
            "funcStartAddr": "0x402d38",
            "funcEndAddr": "0x402d74",
            "decompiledFuncCode": "int sub_402d38() { crash_skku;\n}"
        },
        {
            "funcName": "sub_406fd0",
            "funcStartAddr": "0x406fd0",
            "funcEndAddr": "0x406fdf",
            "decompiledFuncCode": "int sub_406fd0()\n{\n}\n"
        },
        {
            "funcName": "sub_402e40",
            "funcStartAddr": "0x402e40",
            "funcEndAddr": "0x402eb2",
            "decompiledFuncCode": "int sub_402e40()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    char *v4;  // rdi\n    unsigned long long v5;  // rbx\n    char *v6;  // rbx\n    unsigned long v7;  // rcx\n    unsigned long long v8;  // rax\n    unsigned long long v10;  // rbx\n    char v11;  // al\n\n    if (*(v4) != 0)\n    {\n        v2 = stack_base + 0;\n        v1 = v5;\n        v6 = v4;\n        v0 = v7;\n        if (*(v4) == 43)\n        {\n            v6 = &v4[1];\n        }\n        v8 = strchr(v6, 0x2e);\n        v10 = v1;\n        v11 = (unsigned int)sub_407ce0() == 0;\n        return rax<8>;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_403120",
            "funcStartAddr": "0x403120",
            "funcEndAddr": "0x4031ee",
            "decompiledFuncCode": "extern char g_612321;\n\nint sub_403120()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long v1;  // [bp-0x48]\n    unsigned long v3;  // rcx\n    unsigned long v4;  // rdi\n    unsigned long v5;  // rsi\n    unsigned long long v6;  // rdx\n    unsigned long long v7;  // rbp\n    unsigned long long v8;  // r9\n    unsigned int v10;  // eax\n    char v11;  // ah\n    unsigned int v12;  // r14d\n    unsigned long long v13;  // r15\n    unsigned long long v15;  // r13\n\n    v0 = v3;\n    if (v4 > v5)\n    {\n        v7 = v6;\n        v13 = 0;\n        v1 = v4 - v5;\n        v15 = v8 * (v4 - 1);\n        while (true)\n        {\n            if (g_612321 != 0)\n            {\n                v10 = r14<4>;\n                v11 = *((char *)(v7 + v13 * 4 + 2));\n                v12 = rax<4> | (unsigned int)((unsigned long long)(char)*((char *)(v7 + v13 * 4 + 1)) * 0x10000) | (unsigned int)((unsigned long long)(char)*((char *)(v7 + v13 * 4)) * 0x1000000);\n            }\n            v13 += 1;\n            v15 -= v8;\n            if (v1 == v13)\n            {\n                break;\n            }\n        }\n    }\n    return sub_407ac0();\n}\n"
        },
        {
            "funcName": "sub_4054d0",
            "funcStartAddr": "0x4054d0",
            "funcEndAddr": "0x4055df",
            "decompiledFuncCode": "int sub_4054d0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_409170",
            "funcStartAddr": "0x409170",
            "funcEndAddr": "0x4091cc",
            "decompiledFuncCode": "int sub_409170()\n{\n    unsigned long long v1;  // r12\n    unsigned long long v2;  // rax\n    unsigned int *v3;  // rdi\n\n    v1 = __fpending();\n    v2 = sub_408120();\n    if (((char)*(v3) & 32) == 0)\n    {\n        if ((unsigned int)v2 != 0 && v1 == 0)\n        {\n            v2 = 0 - (unsigned int)(char)(*(__errno_location()) != 9);\n        }\n    }\n    else\n    {\n        if ((unsigned int)v2 == 0)\n        {\n            *(__errno_location()) = 0;\n            v2 = -18446744069414584321;\n        }\n    }\n    if ((unsigned int)v2 != 0 && (((char)*(v3) & 32) != 0 || v1 != 0))\n    {\n        v2 = -18446744069414584321;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40c288",
            "funcStartAddr": "0x40c288",
            "funcEndAddr": "0x40c2a8",
            "decompiledFuncCode": "extern unsigned long long g_611e30;\n\nint sub_40c288()\n{\n    unsigned long long *v1;  // rbx\n    unsigned long long v2;  // rax\n    unsigned long v4;  // rdx\n\n    v1 = &g_611e30;\n    while (true)\n    {\n        v2 = *(v1);\n        if (*(v1) == -1)\n        {\n            break;\n        }\n        rax<8>();\n        v1 = &v1[-1];\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_406ba0",
            "funcStartAddr": "0x406ba0",
            "funcEndAddr": "0x406baf",
            "decompiledFuncCode": "extern int512_t g_612560;\n\nint sub_406ba0()\n{\n    unsigned long v1;  // rdi\n\n    return *((int *)(v1 == 0? &g_612560 : v1));\n}\n"
        },
        {
            "funcName": "sub_407090",
            "funcStartAddr": "0x407090",
            "funcEndAddr": "0x407103",
            "decompiledFuncCode": "int sub_407090()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v2 = 0x400000000000000;\n    v1 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_4069c0();\n}\n"
        },
        {
            "funcName": "sub_4071a0",
            "funcStartAddr": "0x4071a0",
            "funcEndAddr": "0x4071b3",
            "decompiledFuncCode": "int sub_4071a0()\n{\n}\n"
        },
        {
            "funcName": "sub_4071d0",
            "funcStartAddr": "0x4071d0",
            "funcEndAddr": "0x4071e2",
            "decompiledFuncCode": "int sub_4071d0()\n{\n}\n"
        },
        {
            "funcName": "sub_407870",
            "funcStartAddr": "0x407870",
            "funcEndAddr": "0x407891",
            "decompiledFuncCode": "int sub_407870()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rdx\n    unsigned long long v4;  // rax\n\n    v4 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, rdx<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_407a20(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_407080",
            "funcStartAddr": "0x407080",
            "funcEndAddr": "0x40708a",
            "decompiledFuncCode": "int sub_407080()\n{\n}\n"
        },
        {
            "funcName": "sub_408f90",
            "funcStartAddr": "0x408f90",
            "funcEndAddr": "0x408fa3",
            "decompiledFuncCode": "int sub_408f90()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_408f10();\n}\n"
        },
        {
            "funcName": "sub_404090",
            "funcStartAddr": "0x404090",
            "funcEndAddr": "0x4040c5",
            "decompiledFuncCode": "int sub_404090()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v1;  // [bp-0x8]\n    unsigned long v3;  // rbx\n\n    v0 = v3;\n    sub_402d50();\n    v1 = stack_base + 0;\n    v0 = v0;\n}\n"
        },
        {
            "funcName": "sub_403780",
            "funcStartAddr": "0x403780",
            "funcEndAddr": "0x4038aa",
            "decompiledFuncCode": "int sub_403780()\n{\n    unsigned long v0;  // [bp-0x60]\n    unsigned int v1;  // [bp-0x58]\n    char v2;  // [bp-0x51]\n    unsigned long v3;  // [bp-0x50]\n    char v4;  // [bp-0x3c]\n    unsigned int v6;  // r8d\n    unsigned long v7;  // rdi\n    unsigned long v8;  // rsi\n    unsigned long v9;  // r9\n    unsigned long long v10;  // rdx\n    unsigned long long v11;  // r8\n    unsigned long long v12;  // rdx\n    unsigned long long v13;  // r15\n    unsigned long long v15;  // r14\n\n    v1 = v6;\n    if (v7 > v8)\n    {\n        v13 = v9 * (v7 - 1);\n        v15 = v10;\n        v0 = v10 + v7 - v8;\n        while (true)\n        {\n            v15 += 1;\n            v11 = (char)*((char *)(v15 - 1));\n            v12 = (char)*((char *)(v15 - 1));\n            switch (v2)\n            {\n            case 0:\n                break;\n            case 7:\n                break;\n            case 8:\n                break;\n            case 9:\n                break;\n            case 10:\n                break;\n            case 11:\n                break;\n            case 12:\n                break;\n            case 13:\n                break;\n            default:\n                v3 = v12;\n                *((unsigned long long *)&v2) = v11;\n                __sprintf_chk((unsigned int)&v4, 0x1, 0x4, ((*((char *)(*((long long *)(unsigned long long)__ctype_b_loc()) + (v3 << 1) + 1)) & 64) == 0? \"%03\" : \"%\"), v2, v9);\n                break;\n            }\n            v13 -= v9;\n            if (v15 == v0)\n            {\n                break;\n            }\n        }\n    }\n    return sub_407ac0();\n}\n"
        },
        {
            "funcName": "sub_407c50",
            "funcStartAddr": "0x407c50",
            "funcEndAddr": "0x407cd1",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[4257536];\n    unsigned long long field_40f700;\n} struct_0;\n\nextern int512_t g_40f700;\nextern unsigned int g_612268;\n\nint sub_407c50()\n{\n    char v0;  // [bp-0x2a]\n    char v1;  // [bp-0x29]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long v3;  // [bp-0x10]\n    unsigned long v4;  // [bp-0x8]\n    unsigned long v6;  // r13\n    unsigned int v7;  // edi\n    struct_0 *v8;  // rdi\n    unsigned long v9;  // r12\n    unsigned long v10;  // rbx\n    unsigned long long v11;  // rsi\n    unsigned long v13;  // rsi\n    char v14;  // dl\n\n    v4 = v6;\n    v8 = (unsigned long long)v7 - 1;\n    v3 = v9;\n    v2 = v10;\n    if ((unsigned int)v8 > 3)\n    {\n        abort(); /* do not return */\n    }\n    v13 = *((long long *)(0x8 * v8 + (char *)&g_40f700));\n    if ((unsigned int)v11 < 0)\n    {\n        v0 = v14;\n        v1 = 0;\n    }\n    error(g_612268, 0x0, (unsigned long long)dcgettext(0x0, v13, 0x5));\n}\n"
        },
        {
            "funcName": "sub_406ceb",
            "funcStartAddr": "0x406ceb",
            "funcEndAddr": "0x406db1",
            "decompiledFuncCode": "int sub_406ceb()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long v1;  // [bp-0x50]\n    unsigned long v2;  // [bp-0x48]\n    unsigned int v3;  // [bp-0x2c]\n    unsigned long v4;  // [bp-0x28]\n    unsigned long v5;  // [bp-0x20]\n    unsigned long v6;  // [bp-0x18]\n    unsigned long v7;  // [bp-0x10]\n    unsigned long long v8;  // [bp+0x0]\n    unsigned long long v10;  // [bp+0x10]\n    unsigned long long v11;  // [bp+0x18]\n    unsigned long long v12;  // [bp+0x20]\n    unsigned long long v13;  // [bp+0x28]\n    unsigned long v14;  // rcx\n    unsigned long v15;  // rax\n    unsigned long long v17[7];  // rbx\n    unsigned int *v18;  // r13\n    unsigned long long *v20;  // r12\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // r12\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r14\n    unsigned long long v25;  // r15\n\n    v17 = (v14 == 0? v15 : rbx<8>);\n    v18 = __errno_location();\n    v3 = *(v18);\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = &v17[1];\n    v6 = &v17[1];\n    v7 = (unsigned int)sub_405790();\n    v5 = v7 + 1;\n    v4 = (unsigned int)sub_4077d0();\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = v6;\n    sub_405790();\n    *(v18) = v3;\n    if (v20 != 0)\n    {\n        *(v20) = v7;\n    }\n    v21 = v8;\n    v22 = v10;\n    v23 = v11;\n    v24 = v12;\n    v25 = v13;\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_403200",
            "funcStartAddr": "0x403200",
            "funcEndAddr": "0x4032b3",
            "decompiledFuncCode": "extern char g_612321;\n\nint sub_403200()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long v1;  // [bp-0x48]\n    unsigned long v3;  // rcx\n    unsigned long v4;  // rdi\n    unsigned long v5;  // rsi\n    unsigned long long v6;  // r9\n    unsigned long long v8;  // r15\n    unsigned long long v9;  // r13\n\n    v0 = v3;\n    if (v4 > v5)\n    {\n        v8 = 0;\n        v1 = v4 - v5;\n        v9 = v6 * (v4 - 1);\n        while (true)\n        {\n            v8 += 1;\n            v9 -= v6;\n            if (v1 == v8)\n            {\n                break;\n            }\n        }\n    }\n    return sub_407ac0();\n}\n"
        },
        {
            "funcName": "sub_407180",
            "funcStartAddr": "0x407180",
            "funcEndAddr": "0x407197",
            "decompiledFuncCode": "int sub_407180()\n{\n}\n"
        },
        {
            "funcName": "sub_408940",
            "funcStartAddr": "0x408940",
            "funcEndAddr": "0x408ea7",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned int field_0;\n    unsigned int field_4;\n    char padding_8[24];\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned int field_30;\n} struct_1;\n\ntypedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    unsigned int field_18;\n    char padding_1c[4];\n    unsigned long long field_20;\n    unsigned int field_28;\n    unsigned int field_2c;\n    unsigned int field_30;\n} struct_0;\n\nextern unsigned int g_40fb60;\nextern unsigned int g_40fba1;\nextern unsigned long long stderr;\n\nint sub_408940()\n{\n    struct_0 *|struct_1 * v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x60]\n    unsigned long v4;  // [bp-0x58]\n    unsigned int|char v5;  // [bp-0x4c]\n    char v6[2];  // [bp-0x48]\n    unsigned long long v7;  // [bp-0x40]\n    struct_1 *v8;  // [bp+0x8]\n    unsigned int v9;  // [bp+0x10]\n    unsigned long v10;  // rcx\n    unsigned long v11;  // r8\n    unsigned int v12;  // r13d\n    unsigned long v13;  // rdi\n    unsigned long v14;  // rsi\n    char *v15[3];  // r12\n    char v16[2];  // rdx\n    unsigned int|unsigned long v17;  // eax\n    unsigned long long v18;  // rax\n    unsigned long long|char [2] v19;  // rdx\n    unsigned long long v20;  // rax\n    unsigned int v22;  // r9d\n    unsigned long long v23;  // rax\n    unsigned long long|unsigned int v24;  // r9d\n    unsigned long long *|char *[3] v26;  // rax\n    unsigned long long *v27;  // rdx\n    char *v29[3];  // rax\n    char v30[3];  // rcx\n    unsigned long long *v31;  // rsi\n    unsigned long long v32;  // rcx\n    char *v33;  // rdi\n    char *v34;  // rsi\n    unsigned long long v35;  // cc_dep1\n    unsigned long long v36;  // cc_dep2\n    unsigned long v37;  // d\n    unsigned long long v38;  // cc_dep1\n    unsigned int v39;  // ecx\n    unsigned long long v40;  // rax\n    unsigned long long v41;  // rcx\n    unsigned long long|unsigned int v42;  // edx\n    unsigned int v44;  // eax\n    unsigned long long v45;  // r14\n    unsigned int|unsigned long v46;  // rbp\n    unsigned long long v47;  // rax\n    char v48[3];  // r14\n    unsigned long v49;  // r13\n    char [2]|char * v50;  // r15\n    char v51[3];  // rax\n    unsigned int v52;  // ecx\n    char *v53;  // r8\n    unsigned long long v54;  // rcx\n    unsigned long long v55;  // rcx\n    unsigned long long v57;  // rdx\n    unsigned int v58;  // eax\n    char v60[3];  // rax\n    unsigned long long v62;  // r14\n    char v63;  // r14b\n    unsigned long long v64;  // r14\n    char v65;  // r14b\n    unsigned long long v66;  // rax\n\n    v3 = v10;\n    v4 = v11;\n    v12 = v8->field_4;\n    if ((unsigned int)v13 > 0)\n    {\n        v17 = v0->field_0;\n        v46 = v13;\n        v15 = v14;\n        v50 = v16;\n        v0->field_10 = 0;\n        if (!((unsigned int)v17 != 0))\n        {\n            v0->field_0 = 1;\n            v17 = 1;\n        }\n        else if (v0->field_18 != 0)\n        {\n            v18 = v16[0];\n            v19 = v0->field_20;\n            if (((char)(v18 - 43) & 253) == 0)\n            {\n                v20 = v50[1];\n                v50 = &v50[1];\n                v49 = (unsigned int)(v20 == 58? 0 : (unsigned int)r13<8>);\n            }\n        }\n        if ((unsigned int)v17 == 0 || v0->field_18 == 0)\n        {\n            *((unsigned long *)&v0->field_30) = v17;\n            *((unsigned long *)&v0->field_2c) = v17;\n            v0->field_20 = 0;\n            if (!(v16[0] != 45))\n            {\n                v0->field_28 = 2;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            else if (v16[0] != 43)\n            {\n                v19 = 0;\n                if (v9 == 0)\n                {\n                    v5 = v22;\n                    v23 = getenv(\"POSIXLY_CORRECT\");\n                    v24 = v5;\n                    if (v23 != 0)\n                    {\n                        v19 = v0->field_20;\n                    }\n                    else\n                    {\n                        v0->field_28 = 1;\n                        v19 = v0->field_20;\n                    }\n                }\n                if (v9 != 0 || v23 != 0)\n                {\n                    v0->field_28 = 0;\n                }\n            }\n            else\n            {\n                v0->field_28 = 0;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            v0->field_18 = 1;\n            v18 = v50[0];\n        }\n        if ((unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0)\n        {\n            v49 = (unsigned int)(v18 == 58? 0 : (unsigned int)r13<8>);\n        }\n        if (v19[0] == 0 || v19 == 0 && (unsigned int)v17 == 0 || v19 == 0 && v0->field_18 == 0 || v19 == 0 && ((char)(v18 - 43) & 253) != 0 || ((char)(v18 - 43) & 253) == 0 && v8->field_20 == 0 && (unsigned int)v17 != 0 && v0->field_18 != 0)\n        {\n            v26 = (unsigned long long)v0->field_0;\n            if (v0->field_30 > v0->field_0)\n            {\n                v0->field_30 = v8->field_0;\n            }\n            if (v8->field_0 < v0->field_2c)\n            {\n                v0->field_2c = v8->field_0;\n            }\n            if (v0->field_28 == 1)\n            {\n                v27 = (unsigned long long)v0->field_30;\n                if (v0->field_2c != v0->field_30)\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v5 = v5;\n                        sub_408240();\n                        v27 = (unsigned long long)v0->field_0;\n                        v24 = v5;\n                    }\n                }\n                else\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v0->field_2c = v8->field_0;\n                        v27 = v26;\n                    }\n                }\n                if ((unsigned int)v13 > (unsigned int)v27)\n                {\n                    v29 = v27;\n                    while (true)\n                    {\n                        v30 = *((long long *)((char *)v15 + 0x8 * v29));\n                        v31 = v29;\n                        v27 = (unsigned int)v29;\n                        if (*((char *)*((long long *)((char *)v15 + 0x8 * v29))) == 45 && v30[1] != 0)\n                        {\n                            v26 = (unsigned long long)v0->field_0;\n                        }\n                        if (v30[1] == 0 || *((char *)*((long long *)((char *)v15 + 0x8 * v29))) != 45)\n                        {\n                            v27 = (char *)v31 + 1;\n                            v29 = (char *)v29 + 1;\n                            v0->field_0 = (unsigned int)v31 + 1;\n                            if ((unsigned int)v13 <= (unsigned int)v29)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    if (v30[1] == 0 || *((char *)*((long long *)((char *)v15 + 0x8 * v29))) != 45)\n                    {\n                        v26 = v27;\n                    }\n                    else if (*((char *)*((long long *)((char *)v15 + 0x8 * v29))) == 45 && v30[1] != 0)\n                    {\n                        *((unsigned long long **)&v0->field_30) = v27;\n                    }\n                }\n                v26 = v27;\n                *((unsigned long long **)&v0->field_30) = v27;\n            }\n            if ((unsigned int)v13 != (unsigned int)v26)\n            {\n                v32 = 3;\n                v33 = \"-\";\n                v48 = *((long long *)((char *)v15 + 0x8 * v26));\n                v34 = *((long long *)((char *)v15 + 0x8 * v26));\n                while (v32 != 0)\n                {\n                    v32 -= 1;\n                    v35 = *(v34);\n                    v36 = *(v33);\n                    v33 = &v33[v37];\n                    v34 = &v34[v37];\n                    break;\n                }\n                v38 = (v35 > v36) - 0 - (v35 < v36);\n                if ((char)v38 == 0)\n                {\n                    v42 = v0->field_2c;\n                    v39 = v0->field_30;\n                    v40 = (unsigned int)v26 + 1;\n                    v0->field_0 = v40;\n                    if ((unsigned int)v42 != v39)\n                    {\n                        if ((unsigned int)v40 != v8->field_30)\n                        {\n                            sub_408240();\n                            v42 = v0->field_2c;\n                        }\n                    }\n                    else\n                    {\n                        v0->field_2c = v40;\n                        v42 = v40;\n                    }\n                    v0->field_30 = v46;\n                    v0->field_0 = v46;\n                }\n                else if (v48[0] == 45)\n                {\n                    v41 = v48[1];\n                    if (v48[1] != 0 && v3 != 0)\n                    {\n                        if (!(v41 != 45))\n                        {\n                            v0->field_20 = &v48[2];\n                            v2 = \"-\";\n                            v1 = v49;\n                            v0 = v0;\n                        }\n                        else if (v24 != 0)\n                        {\n                            if (v48[2] == 0)\n                            {\n                                v5 = v24;\n                                v47 = strchr(v50, v41);\n                            }\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v46 = v0->field_30;\n                v42 = v0->field_2c;\n            }\n        }\n    }\n    if (((unsigned int)v13 != (unsigned int)v26 && (unsigned int)v13 > 0 && (((char)(v18 - 43) & 253) == 0 || v19 == 0 || v19[0] == 0) && (v19 == 0 || v19[0] == 0 || (unsigned int)v17 != 0) && (v19 == 0 || v19[0] == 0 || v0->field_18 != 0) && (v8->field_20 == 0 || v19[0] == 0 || (unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 == 0 || (unsigned int)v13 == (unsigned int)v26 && (unsigned int)v13 > 0 && (((char)(v18 - 43) & 253) == 0 || v19 == 0 || v19[0] == 0) && (v19 == 0 || v19[0] == 0 || (unsigned int)v17 != 0) && (v19 == 0 || v19[0] == 0 || v0->field_18 != 0) && (v8->field_20 == 0 || v19[0] == 0 || (unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0)) && v42 != v46)\n    {\n        *((unsigned long long *)&v0->field_0) = v42;\n    }\n    if (((unsigned int)v13 != (unsigned int)v26 && (unsigned int)v13 > 0 && (((char)(v18 - 43) & 253) == 0 || v19 == 0 || v19[0] == 0) && (v19 == 0 || v19[0] == 0 || (unsigned int)v17 != 0) && (v19 == 0 || v19[0] == 0 || v0->field_18 != 0) && (v8->field_20 == 0 || v19[0] == 0 || (unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] == 45 && v48[1] == 0 || (unsigned int)v13 != (unsigned int)v26 && (unsigned int)v13 > 0 && (((char)(v18 - 43) & 253) == 0 || v19 == 0 || v19[0] == 0) && (v19 == 0 || v19[0] == 0 || (unsigned int)v17 != 0) && (v19 == 0 || v19[0] == 0 || v0->field_18 != 0) && (v8->field_20 == 0 || v19[0] == 0 || (unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] != 45) && v0->field_28 != 0)\n    {\n        v44 = (unsigned int)v26 + 1;\n        v0->field_10 = v48;\n        v45 = 1;\n        v0->field_0 = v44;\n    }\n    if (...)\n    {\n        v45 = -18446744069414584321;\n    }\n    if (...)\n    {\n        v0->field_20 = &v48[1];\n        v2 = \"-\";\n        v1 = v49;\n        v0 = v8;\n        v45 = (unsigned int)sub_408320();\n        if ((unsigned int)v45 == -1)\n        {\n            v48 = v15[(long long)(int)v0->field_0];\n        }\n    }\n    if (...)\n    {\n        v19 = &v48[1];\n    }\n    if (...)\n    {\n        *((char *[2])&v6[0]) = v19;\n        v0->field_20 = &v19[1];\n        v45 = v19[0];\n        v7 = &v19[1];\n        v5 = v19[0];\n        v51 = strchr(v50, v19[0]);\n        v52 = v5;\n        v53 = v7;\n        if (v6[1] == 0)\n        {\n            v0->field_0 = v0->field_0 + 1;\n        }\n        v54 = (unsigned long long)v52 - 58;\n        if (v54 > 1 && v51 != 0)\n        {\n            v55 = v51[1];\n            if (v51[0] == 87 && v3 != 0 && v55 == 59 && v6[1] == 0)\n            {\n                if (v0->field_0 != (unsigned int)v46)\n                {\n                    v53 = v15[(long long)(int)v8->field_0];\n                }\n                else\n                {\n                    if ((unsigned int)v49 != 0)\n                    {\n                        __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x40fb60, 0x5), *(v15));\n                    }\n                    v0->field_8 = v45;\n                    v62 = 0;\n                    v63 = *(v50) != 58;\n                    v45 = r14<8> * 5 + 58;\n                }\n            }\n        }\n    }\n    if (...)\n    {\n        if ((unsigned int)v49 != 0)\n        {\n            __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x40fba1, 0x5), *(v15));\n        }\n        v0->field_8 = v45;\n        v45 = 63;\n    }\n    if (...)\n    {\n        v57 = v6[1];\n        if (v51[2] != 58)\n        {\n            if (!(v57 == 0))\n            {\n                v58 = v8->field_0 + 1;\n                v0->field_10 = v7;\n                v0->field_0 = v58;\n            }\n            else if ((unsigned int)v46 != v8->field_0)\n            {\n                v60 = v15[(long long)(int)v8->field_0];\n                v0->field_0 = (int)v8->field_0 + 1;\n                v0->field_10 = v60;\n            }\n            else\n            {\n                if ((unsigned int)v49 != 0)\n                {\n                    __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x40fb60, 0x5), *(v15));\n                }\n                v0->field_8 = v45;\n                v64 = 0;\n                v65 = *(v50) != 58;\n                v45 = r14<8> * 5 + 58;\n            }\n        }\n        else\n        {\n            if (v57 != 0)\n            {\n                v0->field_10 = v7;\n                v0->field_0 = v0->field_0 + 1;\n            }\n            else\n            {\n                v0->field_10 = 0;\n            }\n        }\n        v0->field_20 = 0;\n    }\n    if (...)\n    {\n        v0->field_20 = v53;\n        v0->field_10 = 0;\n        v2 = \"-W \";\n        v1 = v49;\n        v0 = v0;\n    }\n    if (...)\n    {\n        v45 = (unsigned int)sub_408320();\n    }\n    v66 = v45;\n    return v66;\n}\n"
        },
        {
            "funcName": "sub_4071c0",
            "funcStartAddr": "0x4071c0",
            "funcEndAddr": "0x4071ca",
            "decompiledFuncCode": "int sub_4071c0()\n{\n}\n"
        },
        {
            "funcName": "sub_402d40",
            "funcStartAddr": "0x402d40",
            "funcEndAddr": "0x402d41",
            "decompiledFuncCode": "int sub_402d40()\n{\n    unsigned long v1;  // rax\n\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_407100",
            "funcStartAddr": "0x407100",
            "funcEndAddr": "0x40716c",
            "decompiledFuncCode": "extern uint128_t g_612560;\nextern uint128_t g_612570;\nextern uint128_t g_612580;\nextern unsigned long long g_612590;\n\nint sub_407100()\n{\n    unsigned int|void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x20]\n    unsigned long v4;  // [bp-0x18]\n    unsigned long v6;  // rsi\n    unsigned long v7;  // rdx\n\n    *((uint128_t *)&v0) = g_612560;\n    *((uint128_t *)&v1) = g_612570;\n    *((uint128_t *)&v2) = g_612580;\n    v4 = g_612590;\n    v0 = 10;\n    if (v6 != 0 && v7 != 0)\n    {\n        v3 = v6;\n        v4 = v7;\n        return sub_4069c0();\n    }\n    if (v7 == 0 || v6 == 0)\n    {\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_403410",
            "funcStartAddr": "0x403410",
            "funcEndAddr": "0x403492",
            "decompiledFuncCode": "int sub_403410()\n{\n    unsigned long v0;  // [bp-0x48]\n    unsigned long v1;  // [bp-0x40]\n    unsigned long v3;  // rcx\n    unsigned long v4;  // rdi\n    unsigned long v5;  // rsi\n    unsigned long long v6;  // rdx\n    unsigned long long v7;  // r9\n    unsigned long long v9;  // r13\n    unsigned long long v10;  // r15\n\n    v0 = v3;\n    if (v4 > v5)\n    {\n        v10 = v6;\n        v1 = v6 + v4 - v5;\n        v9 = v7 * (v4 - 1);\n        while (true)\n        {\n            v10 += 1;\n            v9 -= v7;\n            if (v10 == v1)\n            {\n                break;\n            }\n        }\n    }\n    return sub_407ac0();\n}\n"
        },
        {
            "funcName": "sub_404e00",
            "funcStartAddr": "0x404e00",
            "funcEndAddr": "0x404e0a",
            "decompiledFuncCode": "int sub_404e00()\n{\n}\n"
        },
        {
            "funcName": "sub_4034a0",
            "funcStartAddr": "0x4034a0",
            "funcEndAddr": "0x403583",
            "decompiledFuncCode": "int sub_4034a0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_407ac0",
            "funcStartAddr": "0x407ac0",
            "funcEndAddr": "0x407b54",
            "decompiledFuncCode": "int sub_407ac0()\n{\n    unsigned int v0;  // [bp-0xd0]\n    unsigned int v1;  // [bp-0xcc]\n    unsigned long v2;  // [bp-0xc8]\n    unsigned long v3;  // [bp-0xc0]\n    unsigned long v4;  // [bp-0xb0]\n    unsigned long v5;  // [bp-0xa8]\n    unsigned long v6;  // [bp-0xa0]\n    unsigned long v7;  // [bp-0x98]\n    unsigned long v8;  // [bp-0x90]\n    void v9;  // [bp-0x88]\n    void v10;  // [bp-0x78]\n    void v11;  // [bp-0x68]\n    void v12;  // [bp-0x58]\n    void v13;  // [bp-0x48]\n    void v14;  // [bp-0x38]\n    void v15;  // [bp-0x28]\n    void v16;  // [bp-0x18]\n    unsigned long v18;  // rsi\n    unsigned long v19;  // rdx\n    unsigned long v20;  // rcx\n    unsigned long v21;  // r8\n    unsigned long v22;  // r9\n    char v23;  // al\n    void v24;  // xmm0\n    void v25;  // xmm1\n    void v26;  // xmm2\n    void v27;  // xmm3\n    void v28;  // xmm4\n    void v29;  // xmm5\n    void v30;  // xmm6\n    void v31;  // xmm7\n\n    v4 = v18;\n    v5 = v19;\n    v6 = v20;\n    v7 = v21;\n    v8 = v22;\n    if (v23 != 0)\n    {\n        v9 = v24;\n        v10 = v25;\n        v11 = v26;\n        v12 = v27;\n        v13 = v28;\n        v14 = v29;\n        v15 = v30;\n        v16 = v31;\n    }\n    v0 = 8;\n    v2 = stack_base + 8;\n    v1 = 48;\n    v3 = stack_base + -184;\n    return sub_407a60();\n}\n"
        },
        {
            "funcName": "sub_407bb7",
            "funcStartAddr": "0x407bb7",
            "funcEndAddr": "0x407bb9",
            "decompiledFuncCode": "int sub_407bb7()\n{\n}\n"
        },
        {
            "funcName": "sub_402ef1",
            "funcStartAddr": "0x402ef1",
            "funcEndAddr": "0x402f6a",
            "decompiledFuncCode": "int sub_402ef1()\n{\n    unsigned long v0;  // [bp-0x20]\n    char v1;  // [bp-0xa]\n    char v2;  // [bp-0x9]\n    unsigned long long v3;  // [bp+0x0]\n    unsigned long long v5;  // [bp+0x10]\n    unsigned long long v6;  // [bp+0x18]\n    unsigned long long v7;  // [bp+0x20]\n    unsigned long long v8;  // [bp+0x28]\n    unsigned long v9;  // rax\n    unsigned long long v11;  // r14\n    unsigned long v14;  // r12\n    unsigned long long v15;  // r15\n    unsigned long long v17;  // rbx\n    unsigned long long v18;  // r12\n    unsigned long long v19;  // r13\n    unsigned long long v20;  // r14\n    unsigned long long v21;  // r15\n\n    v0 = v9;\n    while (true)\n    {\n        v11 = r14<8> + 1;\n        if (v1 > 32 && (*((char *)(v11 - 1)) & 127) != 127)\n        {\n            *((unsigned long long *)&v1) = (char)(*((char *)(v11 - 1)) & 127);\n            v2 = 0;\n        }\n        v15 = r15<8> - v14;\n        if (v11 == v0)\n        {\n            break;\n        }\n    }\n    v17 = v3;\n    v18 = v5;\n    v19 = v6;\n    v20 = v7;\n    v21 = v8;\n    return sub_407ac0();\n}\n"
        },
        {
            "funcName": "sub_406fdf",
            "funcStartAddr": "0x406fdf",
            "funcEndAddr": "0x407050",
            "decompiledFuncCode": "extern uint128_t g_612560;\nextern uint128_t g_612570;\nextern uint128_t g_612580;\nextern unsigned long long g_612590;\n\nint sub_406fdf()\n{\n    void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v5;  // rdx\n\n    v3 = g_612590;\n    *((uint128_t *)&v0) = g_612560;\n    *((uint128_t *)&v1) = g_612570;\n    *((uint128_t *)&v2) = g_612580;\n    *((unsigned int *)&((char *)stack_base)[4 * v5 % 32 + -64]) = (unsigned int)((unsigned long long)(!((unsigned int)((unsigned long long)(unsigned int)*((int *)&((char *)stack_base)[4 * v5 % 32 + -64]) >> ((char)((unsigned int)v5 & 31) & 31))) & 1) << ((char)((unsigned int)v5 & 31) & 31)) ^ *((int *)&((char *)stack_base)[4 * v5 % 32 + -64]);\n    return sub_4069c0();\n}\n"
        },
        {
            "funcName": "sub_407a4c",
            "funcStartAddr": "0x407a4c",
            "funcEndAddr": "0x407a51",
            "decompiledFuncCode": "int sub_407a4c()\n{\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "main",
            "funcStartAddr": "0x401be0",
            "funcEndAddr": "0x402c55",
            "decompiledFuncCode": "int main() { crash_skku;\n}"
        },
        {
            "funcName": "sub_407820",
            "funcStartAddr": "0x407820",
            "funcEndAddr": "0x407822",
            "decompiledFuncCode": "int sub_407820()\n{\n}\n"
        },
        {
            "funcName": "sub_406bb0",
            "funcStartAddr": "0x406bb0",
            "funcEndAddr": "0x406bbf",
            "decompiledFuncCode": "extern int512_t g_612560;\n\nint sub_406bb0()\n{\n    unsigned long v1;  // rdi\n    unsigned int v2;  // esi\n\n    *((unsigned int *)(v1 == 0? &g_612560 : v1)) = v2;\n    return &g_612560;\n}\n"
        },
        {
            "funcName": "sub_406c00",
            "funcStartAddr": "0x406c00",
            "funcEndAddr": "0x406c13",
            "decompiledFuncCode": "extern int512_t g_612560;\n\nint sub_406c00()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned int v3;  // esi\n\n    v2 = (unsigned int)*((int *)((v1 == 0? &g_612560 : v1) + 4));\n    *((unsigned int *)((v1 == 0? &g_612560 : v1) + 4)) = v3;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_405250",
            "funcStartAddr": "0x405250",
            "funcEndAddr": "0x405380",
            "decompiledFuncCode": "int sub_405250()\n{\n    void tmp_105;  // tmp #105\n    void tmp_177;  // tmp #177\n    void tmp_181;  // tmp #181\n    void tmp_221;  // tmp #221\n    unsigned long v0;  // [bp-0x68]\n    unsigned short v1;  // [bp-0x43]\n    unsigned long v3;  // rdx\n    uint128_t v4;  // xmm0\n    uint128_t v5;  // xmm0\n    unsigned long long v7;  // rbp\n    unsigned long v8;  // rsi\n    unsigned long v9;  // rdi\n    unsigned long v10;  // cc_dep1\n    unsigned long long v11;  // rbx\n\n    tmp_105 = (unsigned int)v3 & 1;\n    v1 = 11557;\n    tmp_177 = (unsigned int)v3 % 2 & 1;\n    tmp_181 = (unsigned int)v3 % 4 & 1;\n    *(&((char *)stack_base)[(unsigned long long)((unsigned int)v3 & 1) + -66]) = 43;\n    *(&((char *)stack_base)[((unsigned int)v3 % 2 & 1) + (unsigned long long)((unsigned int)v3 & 1) + -66]) = 32;\n    v5 = (v4 ^ 0x8000000000000000) & v4 < 0 | !(v4 < 0) & v4;\n    *(&((char *)stack_base)[((unsigned int)v3 % 4 & 1) + (unsigned long long)((unsigned int)v3 % 2 & 1) + ((unsigned int)v3 & 1) + -66]) = 48;\n    tmp_221 = (unsigned int)v3 % 8 & 1;\n    *((short *)&((char *)stack_base)[((unsigned int)v3 % 4 & 1) + (unsigned long long)((unsigned int)v3 % 2 & 1) + ((unsigned int)v3 & 1) + ((unsigned int)v3 % 8 & 1) + -66]) = 11818;\n    *(&((char *)stack_base)[((unsigned int)v3 % 4 & 1) + (unsigned long long)((unsigned int)v3 % 2 & 1) + ((unsigned int)v3 & 1) + ((unsigned int)v3 % 8 & 1) + -64]) = 42;\n    *(&((char *)stack_base)[tmp_181 + tmp_177 + tmp_105 + tmp_221 + -62]) = 0;\n    *((unsigned long long *)&((char *)stack_base)[tmp_181 + tmp_177 + tmp_105 + tmp_221 + -63]) = (0 - (unsigned int)(char)(((unsigned int)v3 & 16) < 1) & 32) + 71;\n    v11 = (unsigned int)((((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 0 | (unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6) & 1) == 1? 15 : 1);\n    while (true)\n    {\n        v0 = v11;\n        v7 = __snprintf_chk();\n        if ((unsigned int)v7 < 0)\n        {\n            break;\n        }\n        if ((unsigned int)v11 > 16)\n        {\n            break;\n        }\n        if (v7 < v8)\n        {\n            strtod(v9, 0x0);\n            v10 = (unsigned int)(BinaryOp CmpF & 69);\n            if ((char)[D] amd64g_calculate_condition(0x4<64>, 0x0<64>, cc_dep1<8>, 0x0<64>, cc_ndep<8>) && ((char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 2) & 1) == 0)\n            {\n                break;\n            }\n        }\n        v11 = (unsigned int)v11 + 1;\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_404f30",
            "funcStartAddr": "0x404f30",
            "funcEndAddr": "0x404f9c",
            "decompiledFuncCode": "extern unsigned int g_40e475;\nextern unsigned int g_40e490;\n\nint sub_404f30()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x8]\n    unsigned long v3;  // r12\n    unsigned long v4;  // rbx\n\n    v1 = v3;\n    v0 = v4;\n    if (false)\n    {\n        dcgettext(0x0, 0x40e475, 0x5);\n    }\n    dcgettext(0x0, 0x40e490, 0x5);\n    sub_4071f0();\n    sub_406ee0();\n}\n"
        },
        {
            "funcName": "sub_402d50",
            "funcStartAddr": "0x402d50",
            "funcEndAddr": "0x402e30",
            "decompiledFuncCode": "extern unsigned int g_612440;\nextern unsigned int g_612444;\nextern unsigned long long stdout;\n\nint sub_402d50()\n{\n    char v0;  // [bp-0x12]\n    void tmp_19;  // tmp #19\n    char v1;  // [bp-0x11]\n    char v2;  // [bp-0x10]\n    unsigned long long v4;  // rdi\n    unsigned long long v5;  // r8\n    char v6;  // sil\n    unsigned long long v7;  // rdx\n    char *v8;  // rcx\n    unsigned long v9;  // cc_dep1\n    unsigned long v10;  // cc_dep2\n    unsigned long long v11;  // rax\n    unsigned long v12;  // cc_dep1\n    unsigned long v13;  // cc_dep2\n    char *v14;  // rdi\n\n    v5 = v4;\n    v8 = &v1;\n    v2 = 0;\n    v1 = v6;\n    v14 = &(&v1)[-1 * (long long)(int)g_612440];\n    if (!(g_612444 != 10))\n    {\n        while (true)\n        {\n            v8 = &v0;\n            v7 = v5 * 14757395258967641293 >> 64 >> 3;\n            v0 = (unsigned int)(v5 - (v5 * 14757395258967641293 >> 64 >> 3) * 10) + 48;\n            if (v5 <= 9)\n            {\n                break;\n            }\n            v5 = v7;\n        }\n    }\n    else if (!(g_612444 != 16))\n    {\n        do\n        {\n            v8 = &v0;\n            tmp_19 = (unsigned int)v5 & 15;\n            v9 = v5 % 16;\n            v10 = v5 % 8;\n            v5 = v5 % 16;\n            v0 = *((char *)(4244164 + tmp_19));\n        }\n        while (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, cc_dep1<8>, cc_dep2<8>, cc_ndep<8>)));\n    }\n    else if (g_612444 == 8)\n    {\n        do\n        {\n            v8 = &v0;\n            v11 = ((unsigned int)v5 & 7) + 48;\n            v12 = v5 % 8;\n            v13 = v5 % 4;\n            v5 = v5 % 8;\n            *((unsigned long long *)&v0) = v11;\n        }\n        while (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, cc_dep1<8>, cc_dep2<8>, cc_ndep<8>)));\n    }\n    if (g_612444 == 10 && &(&v1)[-1 * (long long)(int)g_612440] >= v8 || &(&v1)[-1 * (long long)(int)g_612440] >= v8 && g_612444 != 10)\n    {\n        v14 = v8;\n    }\n    if (&(&v1)[-1 * (long long)(int)g_612440] < v8 && g_612444 == 10 || &(&v1)[-1 * (long long)(int)g_612440] < v8 && g_612444 != 10)\n    {\n        do\n        {\n            v8 = &v8[-1];\n            *(v8) = 48;\n        }\n        while (&(&v1)[-1 * (long long)(int)g_612440] != v8);\n    }\n    return fputs_unlocked(v14, stdout);\n}\n"
        },
        {
            "funcName": "sub_404017",
            "funcStartAddr": "0x404017",
            "funcEndAddr": "0x404084",
            "decompiledFuncCode": "extern unsigned long long stdout[7];\n\nint sub_404017()\n{\n    unsigned long long v0;  // [bp+0x0]\n    char *v2;  // rax\n    char *v3;  // rax\n    char v4;  // bl\n    unsigned long long v5;  // rbx\n\n    v2 = stdout[5];\n    if (stdout[5] < stdout[6])\n    {\n        stdout[5] = stdout[5] + 1;\n        *(v2) = 40;\n    }\n    else\n    {\n        __overflow();\n    }\n    v3 = sub_402d50();\n    if (v4 != 0)\n    {\n        v3 = stdout[5];\n        if (stdout[5] < stdout[6])\n        {\n            stdout[5] = stdout[5] + 1;\n            *(v3) = v4;\n        }\n    }\n    if (v4 == 0 || stdout[5] < stdout[6])\n    {\n        v5 = v0;\n        return v3;\n    }\n}\n"
        },
        {
            "funcName": "sub_408ff0",
            "funcStartAddr": "0x408ff0",
            "funcEndAddr": "0x409008",
            "decompiledFuncCode": "int sub_408ff0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_408940();\n}\n"
        },
        {
            "funcName": "sub_406ea0",
            "funcStartAddr": "0x406ea0",
            "funcEndAddr": "0x406eb6",
            "decompiledFuncCode": "int sub_406ea0()\n{\n}\n"
        },
        {
            "funcName": "sub_403b50",
            "funcStartAddr": "0x403b50",
            "funcEndAddr": "0x403cf9",
            "decompiledFuncCode": "extern unsigned int g_40d3c8;\nextern unsigned int *g_6123c8;\n\nint sub_403b50()\n{\n    char v0;  // [bp-0x20b8]\n    void tmp_2;  // tmp #2\n    void tmp_13;  // tmp #13\n    unsigned int v1;  // [bp-0x20a0]\n    unsigned long v2;  // [bp-0x2088]\n    char v4;  // [bp-0x2028]\n    unsigned long long v6;  // rdi\n    unsigned long long v7;  // r12\n    unsigned int *v8;  // rbp\n    unsigned long long v9;  // rax\n    unsigned long long v10;  // rbp\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rbx\n    unsigned long long v13;  // rbp\n    unsigned long long v14;  // rbx\n    unsigned long long v15;  // r12d\n    unsigned long long v16;  // rax\n\n    if (v6 != 0)\n    {\n        v8 = g_6123c8;\n        if (g_6123c8 != 0)\n        {\n            v12 = v6;\n            v7 = 1;\n            while (true)\n            {\n                v9 = __fxstat(0x1, fileno(v8), (unsigned int)&v0);\n                if (v9 == 0)\n                {\n                    if (((unsigned short)v1 & 0xd000) == 0x8000 && v2 > (!((long long)(stack_base)[-8320] - 1 <= 2305843009213693951)? 0x200 : (long long)(stack_base)[-8320]))\n                    {\n                        if (v2 < v6)\n                        {\n                            v14 = v6 - v2;\n                        }\n                        else\n                        {\n                            v7 = (unsigned int)(sub_4081e0() != 0? 0 : (unsigned int)r12<8>);\n                        }\n                    }\n                    if (v2 <= (!((long long)(stack_base)[-8320] - 1 <= 2305843009213693951)? 0x200 : (long long)(stack_base)[-8320]) || ((unsigned short)v1 & 0xd000) != 0x8000)\n                    {\n                        v13 = 0x2000;\n                        do\n                        {\n                            tmp_2 = v13;\n                            tmp_13 = !(v13 <= v12);\n                            v13 = (!(v13 <= v12)? v12 : v13);\n                            v11 = __fread_unlocked_chk((unsigned int)&v4, 0x2000, 0x1, (tmp_13? v12 : tmp_2), (unsigned int)g_6123c8);\n                            v12 -= v11;\n                            if (v11 != v13)\n                            {\n                                if (((char)*(g_6123c8) & 32) != 0)\n                                {\n                                    v7 = 0;\n                                }\n                                else if (((char)*(g_6123c8) & 16) != 0)\n                                {\n                                    if (v12 != 0)\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                        while (v12 != 0 || ((char)*(g_6123c8) & 32) != 0 && v11 != v13 || ((char)*(g_6123c8) & 16) != 0 && v11 != v13);\n                        if (((char)*(g_6123c8) & 32) == 0 && ((char)*(g_6123c8) & 16) != 0 && v11 != v13)\n                        {\n                            v15 = v7 & sub_4038f0();\n                            v8 = g_6123c8;\n                            v7 = v15 & sub_403a50();\n                            if (g_6123c8 == 0)\n                            {\n                                break;\n                            }\n                        }\n                        else if (((char)*(g_6123c8) & 16) == 0 || v11 == v13 || v12 == 0 || ((char)*(g_6123c8) & 32) != 0)\n                        {\n                            v16 = v7;\n                            return v16;\n                        }\n                    }\n                }\n                else\n                {\n                    v7 = 0;\n                    v10 = (unsigned int)sub_407090();\n                    error(0x0, *(__errno_location()), \"%s\");\n                }\n                if (v2 <= (!((long long)(stack_base)[-8320] - 1 <= 2305843009213693951)? 0x200 : (long long)(stack_base)[-8320]) || v2 < v6 || v9 != 0 || ((unsigned short)v1 & 0xd000) != 0x8000)\n                {\n                    v15 = v7 & sub_4038f0();\n                }\n            }\n            if (true)\n            {\n                error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40d3c8, 0x5));\n            }\n            else if (v2 <= (!((long long)(stack_base)[-8320] - 1 <= 2305843009213693951)? 0x200 : (long long)(stack_base)[-8320]) || ((unsigned short)v1 & 0xd000) != 0x8000 || v9 == 0 && v2 >= v6)\n            {\n                v16 = v7;\n                return v16;\n            }\n        }\n        error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40d3c8, 0x5));\n    }\n    else\n    {\n        v7 = 1;\n    }\n    if (v6 == 0 || g_6123c8 != 0)\n    {\n        v16 = v7;\n        return v16;\n    }\n}\n"
        },
        {
            "funcName": "sub_407230",
            "funcStartAddr": "0x407230",
            "funcEndAddr": "0x4075d9",
            "decompiledFuncCode": "extern unsigned int g_40f2b8;\nextern unsigned int g_40f2c4;\nextern unsigned int g_40f2cb;\nextern unsigned int g_40f2cf;\nextern unsigned int g_40f2df;\nextern unsigned int g_40f2f6;\nextern unsigned int g_40f358;\nextern unsigned int g_40f428;\nextern unsigned int g_40f448;\nextern unsigned int g_40f470;\nextern unsigned int g_40f498;\nextern unsigned int g_40f4c8;\nextern unsigned int g_40f620;\n\nint sub_407230()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    char v10;  // [bp-0x30]\n    unsigned long long v12[9];  // r8\n    unsigned long long v13[9];  // rbx\n    unsigned long v14;  // rsi\n    unsigned int v15;  // edi\n    unsigned int v16;  // edi\n    unsigned int v17;  // edx\n    void *v18;  // rdi\n    unsigned long v20;  // r9\n    unsigned long v21;  // rsi\n    unsigned long long v22;  // r8\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r12\n    unsigned long long v25;  // r15\n    unsigned long long v26;  // r14\n    unsigned long long v27;  // r14\n    unsigned long v28;  // rbx\n    unsigned long v29;  // rax\n    unsigned long long v30;  // r8\n    unsigned long v31;  // rax\n    unsigned long v32;  // rax\n\n    v13 = v12;\n    if (v14 != 0)\n    {\n        __fprintf_chk(v15, 0x1, 0x40f2b8, v14);\n    }\n    else\n    {\n        __fprintf_chk(v16, 0x1, 0x40f2c4, v17);\n    }\n    __fprintf_chk((unsigned int)v18, 0x1, 0x40f620, dcgettext(0x0, 0x40f2cb, 0x5));\n    fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40f358, 0x5), v18);\n    switch (v20)\n    {\n    case 0:\n        abort(); /* do not return */\n    case 1:\n        dcgettext(0x0, 0x40f2cf, 0x5);\n        break;\n    case 2:\n        dcgettext(0x0, 0x40f2df, 0x5);\n        break;\n    case 3:\n        dcgettext(0x0, 0x40f2f6, 0x5);\n        break;\n    case 4:\n        v27 = v13[3];\n        v28 = *(v13);\n        v29 = dcgettext(0x0, 0x40f428, 0x5);\n    case 5:\n        v27 = v13[3];\n        v28 = *(v13);\n        v29 = dcgettext(0x0, 0x40f448, 0x5);\n        *((unsigned long long [9])&v5) = v12[4];\n    case 6:\n        *((unsigned long long [9])&v6) = v12[1];\n        v31 = dcgettext(0x0, 0x40f470, 0x5);\n        *((unsigned long long [9])&v4) = v12[5];\n        *((unsigned long long [9])&v3) = v12[4];\n        *((unsigned long long [9])&v2) = v12[3];\n    case 7:\n        *((unsigned long long [9])&v7) = v13[2];\n        *((unsigned long long [9])&v6) = v13[1];\n        v31 = dcgettext(0x0, 0x40f498, 0x5);\n        *((unsigned long long [9])&v5) = v12[6];\n        *((unsigned long long [9])&v4) = v12[5];\n        *((unsigned long long [9])&v3) = v12[4];\n        *((unsigned long long [9])&v2) = v12[3];\n    case 8:\n        v23 = v13[6];\n        v24 = v13[5];\n        v25 = v13[4];\n        *((unsigned long long [9])&v8) = v13[7];\n        v26 = v13[3];\n        *((unsigned long long [9])&v6) = v13[2];\n        *((unsigned long long [9])&v7) = v13[1];\n        v32 = dcgettext(0x0, 0x40f4c8, 0x5);\n    case 9:\n        v21 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n        v30 = v12[1];\n        v23 = v13[6];\n        v24 = v13[5];\n        *((unsigned long long [9])&v9) = v13[8];\n        v25 = v13[4];\n        v26 = v13[3];\n        *((unsigned long long [9])&v8) = v13[7];\n        *((unsigned long long [9])&v6) = v13[2];\n        v7 = v30;\n    default:\n        v21 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n        v22 = v12[1];\n        v23 = v13[6];\n        v24 = v13[5];\n        *((unsigned long long [9])&v9) = v13[8];\n        v25 = v13[4];\n        v26 = v13[3];\n        *((unsigned long long [9])&v8) = v13[7];\n        *((unsigned long long [9])&v6) = v13[2];\n        v7 = v22;\n    }\n    v32 = dcgettext(0x0, v21, 0x5);\n    v5 = v9;\n    v4 = v27;\n    __fprintf_chk((unsigned int)v18, 0x1, v29, v28);\n    return v4;\n    return __fprintf_chk((unsigned int)v18, 0x1, v29, *((long long *)&v10));\n    v4 = v8;\n    v3 = v23;\n    v2 = v24;\n    v1 = v25;\n    v0 = v26;\n    return __fprintf_chk((unsigned int)v18, 0x1, v29, *((long long *)&v10));\n}\n"
        },
        {
            "funcName": "sub_4097b0",
            "funcStartAddr": "0x4097b0",
            "funcEndAddr": "0x40b1c9",
            "decompiledFuncCode": "int sub_4097b0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_402f80",
            "funcStartAddr": "0x402f80",
            "funcEndAddr": "0x403042",
            "decompiledFuncCode": "extern char g_612321;\n\nint sub_402f80()\n{\n    unsigned long v0;  // [bp-0x60]\n    char v1;  // [bp-0x40]\n    char v2;  // [bp-0x3f]\n    unsigned long v4;  // rcx\n    unsigned long long v5;  // rdi\n    unsigned long v6;  // rsi\n    unsigned long long v7;  // rdx\n    unsigned long long v8;  // r9\n    unsigned long long v9;  // rax\n    unsigned long long v10;  // rdi\n    char *v11;  // rdx\n    unsigned long long v12;  // r13\n    unsigned long long v14;  // r15\n    unsigned long long v15;  // r14\n\n    v0 = v4;\n    if (v5 > v6)\n    {\n        v12 = v7;\n        v15 = v5;\n        v14 = v8 * (v5 - 1);\n        while (true)\n        {\n            v15 -= 1;\n            if (g_612321 != 0)\n            {\n                v11 = v12 + 7;\n                v9 = &v1;\n                do\n                {\n                    v10 = *(v11);\n                    v9 = &v2;\n                    v11 = &v11[-1];\n                    *((unsigned long long *)&v1) = v10;\n                }\n                while (stack_base + -56 != v9);\n            }\n            v12 += 8;\n            v14 -= v8;\n            if (v15 == v6)\n            {\n                break;\n            }\n        }\n    }\n    return sub_407ac0();\n}\n"
        },
        {
            "funcName": "sub_406c50",
            "funcStartAddr": "0x406c50",
            "funcEndAddr": "0x406cc2",
            "decompiledFuncCode": "extern int512_t g_612560;\n\nint sub_406c50()\n{\n    unsigned long v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned long v2;  // [bp-0x58]\n    unsigned long v3;  // [bp-0x40]\n    unsigned int v5;  // [bp+0x100008]\n    unsigned long v6;  // r8\n    unsigned long long v7[7];  // rbx\n    unsigned long v8;  // rcx\n\n    v7 = (v6 == 0? &g_612560 : v6);\n    v3 = v8;\n    *((unsigned long long [7])&v2) = v7[6];\n    *((unsigned long long [7])&v1) = v7[5];\n    v0 = &v7[1];\n    *(__errno_location()) = v5;\n    return sub_405790();\n}\n"
        },
        {
            "funcName": "sub_407ce0",
            "funcStartAddr": "0x407ce0",
            "funcEndAddr": "0x4080ed",
            "decompiledFuncCode": "int sub_407ce0()\n{\n    unsigned long long v0;  // [bp-0x178]\n    void tmp_11;  // tmp #11\n    unsigned long long|char|char [3] v1;  // [bp-0x58]\n    char v2[3];  // [bp-0x50]\n    unsigned int v4;  // edx\n    unsigned long long|unsigned int|unsigned long v5;  // rdi\n    unsigned long v6;  // rbp\n    unsigned long long *v7;  // rcx\n    char *v9;  // r8\n    unsigned long v11;  // rsi\n    unsigned long long *v12;  // r15\n    unsigned int *v13;  // r12\n    unsigned int *v14;  // r12\n    unsigned long long v15;  // rbx\n    unsigned long v16;  // rax\n    unsigned int v17;  // eax\n    unsigned long long v18;  // r12\n    unsigned long long v19;  // rax\n    unsigned long long v20;  // rax\n    unsigned long long v21;  // rdx\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // rsi\n    char v25;  // sil\n    unsigned long long v26;  // r12\n    unsigned long long v27;  // r12\n    unsigned long long v28;  // rcx\n    unsigned long long v29;  // rcx\n    unsigned long long v30;  // rdx\n    unsigned long long v31;  // rsi\n    char v32[3];  // r8\n    unsigned long long v33;  // rbx\n    unsigned long long v34;  // rcx\n    unsigned long long|unsigned int v35;  // rdi\n    unsigned long long v36;  // rcx\n    unsigned long long|unsigned int v37;  // rdi\n    unsigned long long v38;  // rcx\n    unsigned long long v39;  // rcx\n    unsigned long long v40;  // rcx\n    unsigned long long v43;  // cc_dep1\n    unsigned long long v44;  // cc_dep1\n    unsigned int v45;  // cc_dep1\n    unsigned int v46;  // cc_dep1\n    unsigned int v47;  // cc_dep1\n    unsigned long long v48;  // rax\n    unsigned long long v49;  // r8\n\n    if (v4 <= 36)\n    {\n        v6 = v5;\n        v12 = (v11 == 0? stack_base + -64 : v11);\n        *(v13) = 0;\n        v13 = __errno_location();\n        v15 = (char)*((char *)v5);\n        v31 = *((long long *)(unsigned long long)__ctype_b_loc());\n        for (v16 = v5; (*((char *)(v31 + (v15 << 1) + 1)) & 32) != 0; v15 = (char)*((char *)v16))\n        {\n            v16 += 1;\n        }\n        if (v15 != 45)\n        {\n            v33 = __strtoul_internal(v5, (unsigned int)v12);\n            if (*(v12) != v5)\n            {\n                v17 = *(v14);\n                if ((*(v14) == 0 || v17 == 34) && v9 != 0)\n                {\n                    v18 = (char)*((char *)v1);\n                    if (*((char *)v1) != 0)\n                    {\n                        *((unsigned long long *)&v1[0]) = v1;\n                        v20 = strchr(v9, v18);\n                        v32 = v1;\n                    }\n                }\n            }\n            else\n            {\n                v1 = v9;\n                if (v9 != 0)\n                {\n                    v18 = (char)*((char *)v6);\n                    if (*((char *)v6) != 0)\n                    {\n                        v33 = 1;\n                        v19 = strchr(v9, (char)*((char *)v5));\n                        v32 = v1;\n                    }\n                }\n            }\n        }\n        if (*(v12) == v5 && *((char *)v6) != 0 && v15 != 45 && v9 != 0 && v19 != 0 || v15 != 45 && *(v12) != v5 && *((char *)v1) != 0 && v9 != 0 && (*(v14) == 0 || v17 == 34) && v20 != 0)\n        {\n            v21 = v18 - 69;\n            if ((v18 - 69 & 255) <= 47)\n            {\n                *((unsigned long long *)&v1) = v21;\n                v0 = 142129060940101;\n                if (((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) != 0)\n                {\n                    *((char *[3])&v2[0]) = v32;\n                    v22 = strchr(v9, 0x30);\n                    v32 = v2;\n                    if (v22 != 0)\n                    {\n                        v23 = v32[1];\n                        if (v32[1] != 68)\n                        {\n                            if (v23 != 105)\n                            {\n                                v30 = v1;\n                                if (v23 != 66)\n                                {\n                                    /* goto *((long long *)(rdx<8> * 8 + 4257624)); */\n                                }\n                            }\n                            else\n                            {\n                                v24 = 0;\n                                v30 = 0x400;\n                                v25 = v32[2] == 66;\n                                v31 = rsi<8> * 2 + 1;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if ((*(v12) == v5 && *((char *)v6) != 0 && v15 != 45 && v9 != 0 && v19 != 0 || v15 != 45 && *(v12) != v5 && *((char *)v1) != 0 && v9 != 0 && (*(v14) == 0 || v17 == 34) && v20 != 0) && (v18 - 69 & 255) <= 47 && ((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) != 0 && v22 == 0 || (*(v12) == v5 && *((char *)v6) != 0 && v15 != 45 && v9 != 0 && v19 != 0 || v15 != 45 && *(v12) != v5 && *((char *)v1) != 0 && v9 != 0 && (*(v14) == 0 || v17 == 34) && v20 != 0) && (v18 - 69 & 255) <= 47 && ((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) == 0 || (*(v12) == v5 && *((char *)v6) != 0 && v15 != 45 && v9 != 0 && v19 != 0 || v15 != 45 && *(v12) != v5 && *((char *)v1) != 0 && v9 != 0 && (*(v14) == 0 || v17 == 34) && v20 != 0) && (v18 - 69 & 255) > 47)\n        {\n            v31 = 1;\n            v30 = 0x400;\n        }\n        if (...)\n        {\n            v31 = 2;\n            v30 = 1000;\n        }\n        if (...)\n        {\n            v26 = (unsigned int)v18 - 66;\n            switch (v26)\n            {\n            case 0:\n                if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                {\n                    v33 *= 0x400;\n                    break;\n                }\n            case 3:\n                v38 = v30;\n                v5 = 6;\n                do\n                {\n                    v33 = v33 * v38;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v45 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v45 != 1);\n            case 5: case 37:\n                v28 = v30;\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v48 = tmp_11 * v28 * v28;\n                    v33 = v48;\n                }\n                else\n                {\n                    v33 = -1;\n                }\n            case 9: case 41:\n                v33 = v33 * v30;\n                if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                {\n                    v33 = -1;\n                    break;\n                }\n            case 11: case 43:\n                v29 = v30;\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v33 = tmp_11 * v29;\n                    break;\n                }\n            case 14:\n                v34 = v30;\n                v35 = 5;\n                do\n                {\n                    v33 = v33 * v34;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v43 = v35;\n                    v35 -= 1;\n                }\n                while (v43 != 1);\n            case 18: case 50:\n                v40 = v30;\n                v5 = 4;\n                do\n                {\n                    v33 = v33 * v40;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v47 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v47 != 1);\n            case 23:\n                v39 = v30;\n                v5 = 8;\n                do\n                {\n                    v33 = v33 * v39;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v46 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v46 != 1);\n                break;\n            case 24:\n                v36 = v30;\n                v37 = 7;\n                do\n                {\n                    v33 = v33 * v36;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v44 = v37;\n                    v37 -= 1;\n                }\n                while (v44 != 1);\n            case 32:\n                if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                {\n                    v33 *= 0x200;\n                    break;\n                }\n            case 33:\n                v49 = &v32[v31];\n                *(v12) = v49;\n            case 53:\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v33 *= 2;\n                    break;\n                }\n            default:\n                *(v7) = v33;\n            }\n            if (v26 <= 53)\n            {\n                v27 = v26;\n            }\n        }\n        v31 = 1;\n        v31 = 1;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        *(v7) = v33;\n        return stack_base + 0;\n    }\n    __assert_fail(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_4079d0",
            "funcStartAddr": "0x4079d0",
            "funcEndAddr": "0x4079f8",
            "decompiledFuncCode": "int sub_4079d0()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_4077d0();\n}\n"
        },
        {
            "funcName": "sub_408240",
            "funcStartAddr": "0x408240",
            "funcEndAddr": "0x408315",
            "decompiledFuncCode": "int sub_408240()\n{\n    unsigned int v1[13];  // rsi\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rbp\n    unsigned long long v4;  // rbx\n    unsigned long long v5;  // r9\n    unsigned long long v6;  // r8\n    unsigned long long v7;  // r14\n    unsigned long long v8;  // rdx\n    unsigned long v9;  // rdi\n    unsigned long long *v10;  // rax\n    unsigned long long *v12;  // rdx\n    unsigned long long v13;  // rcx\n    unsigned long long v14;  // r10\n    unsigned long long *v15;  // rax\n    unsigned long long *v17;  // rdx\n    unsigned long long v18;  // rcx\n    unsigned int v19;  // r9d\n\n    v2 = v1[5 + 1];\n    v3 = v1[0];\n    v4 = (int)v1[6];\n    v5 = v1[5 + 1];\n    v14 = v1[0];\n    while ((unsigned int)v14 > v1[6])\n    {\n        for (v6 = (int)v1[6]; v5 < v1[6]; v19 = v5 + v7)\n        {\n            v7 = v14 - v6;\n            v8 = v6 - v5;\n            if ((unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n            {\n                v14 -= v8;\n                v10 = v9 + v5 * 8;\n                v12 = v14 - v5;\n                do\n                {\n                    v13 = *(v10);\n                    *(v10) = *((long long *)((char *)v10 + 0x8 * v12));\n                    *((unsigned long long *)((char *)v10 + 0x8 * v12)) = v13;\n                    v10 = &v10[1];\n                }\n                while (v9 + 8 + ((unsigned int)v8 - 1 + v5) * 8 != v10);\n                if ((unsigned int)v14 <= (unsigned int)v6)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v15 = v9 + v5 * 8;\n                v17 = v4 - v5;\n                do\n                {\n                    v18 = *(v15);\n                    *(v15) = *((long long *)((char *)v15 + 0x8 * v17));\n                    *((unsigned long long *)((char *)v15 + 0x8 * v17)) = v18;\n                    v15 = &v15[1];\n                }\n                while (v15 != v9 + 8 + (v7 - 1 + v5) * 8);\n            }\n        }\n        if (v5 >= v1[6] || (unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n        {\n            v1[6] = v3;\n            v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n            return stack_base + 0 - v6;\n        }\n    }\n    v1[6] = v3;\n    v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n    return stack_base + 0 - v6;\n}\n"
        },
        {
            "funcName": "sub_407690",
            "funcStartAddr": "0x407690",
            "funcEndAddr": "0x407748",
            "decompiledFuncCode": "int sub_407690()\n{\n    unsigned int v0;  // [bp-0xa0]\n    void tmp_12;  // tmp #12\n    void tmp_8;  // tmp #8\n    unsigned long v1;  // [bp-0x98]\n    unsigned long long v2;  // [bp-0x90]\n    unsigned long v3;  // [bp-0x88]\n    unsigned long long v4;  // [bp-0x18]\n    unsigned long v5;  // [bp-0x10]\n    unsigned long long v6;  // [bp+0x8]\n    char v7;  // [bp+0x10]\n    unsigned long long v8;  // r11\n    unsigned long long v9;  // r8\n    unsigned long v10;  // r9\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // r8\n    unsigned long long|unsigned long long * v14;  // r10\n    unsigned long long v15;  // r9\n\n    v8 = 0;\n    v4 = v9;\n    v14 = &v6;\n    v13 = 32;\n    v1 = &v6;\n    v5 = v10;\n    v15 = 0;\n    v0 = 32;\n    v2 = stack_base + -56;\n    while (true)\n    {\n        if ((unsigned int)v13 <= 47)\n        {\n            tmp_12 = v13;\n            v13 = (unsigned int)v13 + 8;\n            v8 = 1;\n            v11 = v4;\n            v3 = v4;\n        }\n        else\n        {\n            tmp_8 = v14;\n            v14 = &v7;\n            v12 = v6;\n            v3 = v6;\n        }\n        if ((unsigned int)v13 <= 47 && v11 != 0 || v12 != 0 && (unsigned int)v13 > 47)\n        {\n            v15 += 1;\n        }\n        if (v8 != 0)\n        {\n            v0 = v13;\n        }\n        return sub_407230();\n    }\n}\n"
        },
        {
            "funcName": "sub_409010",
            "funcStartAddr": "0x409010",
            "funcEndAddr": "0x40907f",
            "decompiledFuncCode": "extern unsigned long long g_40fbbc;\n\nint sub_409010()\n{\n    char v0;  // [bp-0x1c]\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rbx\n    unsigned long v4;  // rdx\n    unsigned long long|char * v5;  // rbp\n    unsigned long long v6;  // rdi\n    unsigned int *v7;  // r12\n    unsigned long long v9;  // rax\n\n    if (v2 != 0)\n    {\n        v3 = -2;\n        if (v4 != 0)\n        {\n            v7 = v6;\n            v5 = v2;\n        }\n    }\n    else\n    {\n        v5 = &g_40fbbc;\n    }\n    if (v2 == 0 || v6 == 0 && v4 != 0)\n    {\n        v7 = &v0;\n    }\n    if (v2 == 0 || v4 != 0)\n    {\n        v3 = mbrtowc((unsigned int)v7, (unsigned int)v5);\n        if (v3 > -3 && sub_4091d0() == 0)\n        {\n            v3 = 1;\n            *(v7) = *(v5);\n        }\n    }\n    v9 = v3;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_403380",
            "funcStartAddr": "0x403380",
            "funcEndAddr": "0x403402",
            "decompiledFuncCode": "int sub_403380()\n{\n    unsigned long v0;  // [bp-0x48]\n    unsigned long v1;  // [bp-0x40]\n    unsigned long v3;  // rcx\n    unsigned long v4;  // rdi\n    unsigned long v5;  // rsi\n    unsigned long long v6;  // rdx\n    unsigned long long v7;  // r9\n    unsigned long long v9;  // r13\n    unsigned long long v10;  // r15\n\n    v0 = v3;\n    if (v4 > v5)\n    {\n        v10 = v6;\n        v1 = v6 + v4 - v5;\n        v9 = v7 * (v4 - 1);\n        while (true)\n        {\n            v10 += 1;\n            v9 -= v7;\n            if (v10 == v1)\n            {\n                break;\n            }\n        }\n    }\n    return sub_407ac0();\n}\n"
        },
        {
            "funcName": "sub_407cb3",
            "funcStartAddr": "0x407cb3",
            "funcEndAddr": "0x407cb8",
            "decompiledFuncCode": "int sub_407cb3()\n{\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_4081a0",
            "funcStartAddr": "0x4081a0",
            "funcEndAddr": "0x4081db",
            "decompiledFuncCode": "int sub_4081a0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned int *v3;  // rdi\n\n    v0 = v2;\n    if (v3 != 0 && __freading() != 0 && ((unsigned short)*(v3) & 0x100) != 0)\n    {\n        sub_4081e0();\n    }\n}\n"
        },
        {
            "funcName": "sub_4079a0",
            "funcStartAddr": "0x4079a0",
            "funcEndAddr": "0x4079ce",
            "decompiledFuncCode": "int sub_4079a0()\n{\n    unsigned int v1;  // rdi\n    unsigned int v2;  // rsi\n    unsigned long long v3;  // rax\n\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>)) && [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) == 0)\n    {\n        v3 = calloc(v1, v2);\n        if (v3 != 0)\n        {\n            return v3;\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>) || v3 == 0 || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) != 0)\n    {\n        sub_407a20(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_4077f0",
            "funcStartAddr": "0x4077f0",
            "funcEndAddr": "0x407811",
            "decompiledFuncCode": "int sub_4077f0()\n{\n    void tmp_10;  // tmp #10\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rdi\n\n    tmp_10 = v2;\n    v4 = v2 * v3;\n    v5 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_407a20(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_406b60",
            "funcStartAddr": "0x406b60",
            "funcEndAddr": "0x406b94",
            "decompiledFuncCode": "int sub_406b60()\n{\n    unsigned int v1;  // [bp+0x100008]\n\n    *(__errno_location()) = v1;\n    return sub_4079d0();\n}\n"
        },
        {
            "funcName": "sub_405190",
            "funcStartAddr": "0x405190",
            "funcEndAddr": "0x405198",
            "decompiledFuncCode": "extern unsigned long long g_612450;\n\nint sub_405190()\n{\n    unsigned long long v1;  // rdi\n    unsigned long v2;  // rax\n\n    g_612450 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_407b60",
            "funcStartAddr": "0x407b60",
            "funcEndAddr": "0x407bb4",
            "decompiledFuncCode": "extern unsigned int g_40f660;\nextern unsigned int g_612268;\n\nint sub_407b60()\n{\n    unsigned long v2;  // rax\n    unsigned int v3;  // edi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rax\n\n    if ((unsigned int)v2 < 0)\n    {\n        v4 = ferror(v3);\n        if (v4 == 0)\n        {\n            error(g_612268, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x40f660, 0x5));\n        }\n    }\n    if (v4 != 0 || (unsigned int)v2 >= 0)\n    {\n        v2 = (unsigned int)sub_409090();\n        return v5;\n    }\n}\n"
        },
        {
            "funcName": "sub_407060",
            "funcStartAddr": "0x407060",
            "funcEndAddr": "0x407071",
            "decompiledFuncCode": "int sub_407060()\n{\n}\n"
        },
        {
            "funcName": "sub_4051a0",
            "funcStartAddr": "0x4051a0",
            "funcEndAddr": "0x4051a8",
            "decompiledFuncCode": "extern char g_612448;\n\nint sub_4051a0()\n{\n    char v1;  // dil\n    unsigned long v2;  // rax\n\n    g_612448 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4032c0",
            "funcStartAddr": "0x4032c0",
            "funcEndAddr": "0x403373",
            "decompiledFuncCode": "extern char g_612321;\n\nint sub_4032c0()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long v1;  // [bp-0x48]\n    unsigned long v3;  // rcx\n    unsigned long v4;  // rdi\n    unsigned long v5;  // rsi\n    unsigned long long v6;  // r9\n    unsigned long long v8;  // r15\n    unsigned long long v9;  // r13\n\n    v0 = v3;\n    if (v4 > v5)\n    {\n        v8 = 0;\n        v1 = v4 - v5;\n        v9 = v6 * (v4 - 1);\n        while (true)\n        {\n            v8 += 1;\n            v9 -= v6;\n            if (v1 == v8)\n            {\n                break;\n            }\n        }\n    }\n    return sub_407ac0();\n}\n"
        },
        {
            "funcName": "sub_407170",
            "funcStartAddr": "0x407170",
            "funcEndAddr": "0x407179",
            "decompiledFuncCode": "int sub_407170()\n{\n}\n"
        },
        {
            "funcName": "sub_406ee0",
            "funcStartAddr": "0x406ee0",
            "funcEndAddr": "0x406f4d",
            "decompiledFuncCode": "int sub_406ee0()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_4069c0();\n}\n"
        },
        {
            "funcName": "sub_409230",
            "funcStartAddr": "0x409230",
            "funcEndAddr": "0x409784",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned int field_8;\n    unsigned short field_c;\n} struct_1;\n\nextern char g_40fbbc;\nextern char g_6125d8[2];\n\nint sub_409230()\n{\n    unsigned long long|unsigned long v0;  // [bp-0xd0]\n    void tmp_12;  // tmp #12\n    void tmp_56;  // tmp #56\n    void tmp_1;  // tmp #1\n    void tmp_10;  // tmp #10\n    void tmp_3;  // tmp #3\n    void tmp_28;  // tmp #28\n    unsigned long long v1;  // [bp-0xc8]\n    unsigned long long v2;  // [bp-0xc0]\n    char v3;  // [bp-0xb8]\n    char v4;  // [bp-0xb4]\n    char v5;  // [bp-0x78]\n    char v6;  // [bp-0x74]\n    unsigned int v7;  // [bp-0x4]\n    unsigned long long|char [2] v9;  // r15\n    char *|unsigned long v10;  // rbx\n    unsigned long v11;  // rax\n    unsigned long long v12;  // rdi\n    unsigned long long v13;  // rdi\n    unsigned long long v14;  // r12\n    char *v15;  // r13\n    unsigned long long v16;  // r14\n    unsigned long long v17;  // rbp\n    struct_1 *v20;  // r12\n    unsigned short v21;  // dx\n    unsigned int v22;  // r12d\n    unsigned long v26;  // rdi\n    unsigned long long v28;  // rax\n    unsigned int *v29;  // rcx\n    unsigned int v30;  // eax\n    unsigned long v31;  // rax\n    unsigned int *v32;  // rdx\n    unsigned long long v33;  // rcx\n    unsigned long long v34;  // rax\n    unsigned long v35;  // rax\n    unsigned long long v36;  // rax\n    unsigned long long v37;  // rax\n    unsigned long v38;  // rsi\n    unsigned long long v39;  // rcx\n    unsigned long long v40;  // rdx\n    unsigned long long v41;  // rcx\n    unsigned long long v42;  // rdi\n    unsigned long long v43;  // rsi\n    unsigned long long v44;  // r9\n    unsigned long long v45;  // r10\n    unsigned int v46;  // ecx\n    unsigned long long v48;  // r8\n    void *v49;  // rcx\n    unsigned long long v52;  // rcx\n    unsigned int v54;  // edx\n    unsigned long long v57;  // rcx\n    unsigned long long v58;  // rsi\n    char *v59;  // rax\n    unsigned long long v60;  // rdi\n    char *v61;  // rax\n    unsigned long long v62;  // rax\n    unsigned long long v63;  // rdx\n    unsigned long long v67;  // rbp\n    unsigned long long v68;  // rax\n    unsigned long long v69;  // rax\n    unsigned long long v70;  // rbp\n    unsigned long long v71;  // rax\n\n    v9 = g_6125d8;\n    v10 = ((unsigned long long)nl_langinfo(0xe) == 0? &g_40fbbc : (unsigned long long)nl_langinfo(0xe));\n    if (g_6125d8 == 0)\n    {\n        v15 = getenv(\"CHARSETALIASDIR\");\n        if (v15 != 0 && *(v15) != 0)\n        {\n            v11 = strlen(v15);\n            v14 = v11;\n            v16 = v11;\n            if (v11 == 0)\n            {\n                v12 = 14;\n            }\n            else if (v15[v11 + -1] == 47)\n            {\n                v12 = v11 + 14;\n            }\n            else\n            {\n                v13 = v11 + 15;\n                v14 += 1;\n            }\n            if (v15[v11 + -1] == 47 || v11 == 0)\n            {\n                v17 = malloc(v12);\n                if (v17 != 0)\n                {\n                    memcpy(v17, v15, v16);\n                }\n            }\n        }\n        if (*(v15) == 0 || v15 == 0)\n        {\n            v13 = 115;\n            v14 = 101;\n            v16 = 100;\n            v15 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        }\n        if (*(v15) == 0 || v15 == 0 || v15[v11 + -1] != 47 && v11 != 0)\n        {\n            v17 = malloc(v13);\n        }\n        if (v17 == 0 || v17 == 0)\n        {\n            v9 = &g_40fbbc;\n        }\n        if (v17 != 0 && (*(v15) == 0 || v15 == 0 || v15[v11 + -1] != 47) && (*(v15) == 0 || v15 == 0 || v11 != 0))\n        {\n            memcpy(v17, v15, v16);\n            *((char *)(v17 + v16)) = 47;\n        }\n        if (*(v15) == 0 && v17 != 0 || v15 == 0 && v17 != 0 || v17 != 0 && v15[v11 + -1] != 47 && v11 != 0 || v15[v11 + -1] == 47 && *(v15) != 0 && v15 != 0 && v17 != 0 || v11 == 0 && *(v15) != 0 && v15 != 0 && v17 != 0)\n        {\n            v20 = v14 + v17;\n            v20->field_0 = 3347411969557751907;\n            v20->field_c = 115;\n            v20->field_8 = 1634298977;\n            v22 = open(v17, 0x0, v21);\n            if (v22 >= 0)\n            {\n                v9 = 0;\n                v0 = 0;\n                if (v10 != 0)\n                {\n                    v10 = fdopen(v22, \"r\");\n                    while (true)\n                    {\n                        v59 = *((long long *)(v10 + 8));\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                        {\n                            *((char **)(v10 + 8)) = &v59[1];\n                            v26 = *(v59);\n                        }\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1)\n                        {\n                            if ((unsigned int)v26 != 32 && (unsigned int)v26 != 35)\n                            {\n                                ungetc(v26, v10);\n                                v28 = fscanf(v10, \"%50s %50s\", (unsigned int)&v3, (unsigned int)&v5);\n                                if (v28 > 1)\n                                {\n                                    v29 = &v3;\n                                    do\n                                    {\n                                        tmp_12 = (unsigned int)*((int *)&v3);\n                                        v29 = &v4;\n                                        v30 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                    }\n                                    while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                    v31 = (unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int)(rax<8> >> 16) : (unsigned int)rax<8>);\n                                    v32 = &v5;\n                                    v33 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)((char *)v29 + 2) : v29) + -1 * ((v31 + v31 <= v31? 1 : 0) & 1) + -0x1 * &v3;\n                                    do\n                                    {\n                                        tmp_12 = (unsigned int)*((int *)&v5);\n                                        v32 = &v6;\n                                        v34 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                    }\n                                    while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                    v1 = v33;\n                                    tmp_56 = (unsigned int)v34 % 0x10000;\n                                    v35 = (unsigned int)(((unsigned int)v34 & 32896) == 0? (unsigned int)(v34 >> 16) : (unsigned int)v34);\n                                    v36 = &((char *)(-3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v32)[2] : v32) + -1 * ((v35 + v35 <= v35? 1 : 0) & 1) + -0x1 * &v5))[v1];\n                                    v2 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v32)[2] : v32) + -1 * (((unsigned int)((((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)) <= (unsigned long long)(unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)? 1 : 0) & 1) + -0x1 * &v5;\n                                    if (v0 == 0)\n                                    {\n                                        v0 = v36 + 2;\n                                        v37 = malloc(v36 + 3);\n                                        v39 = v1;\n                                        v40 = v2;\n                                    }\n                                    else\n                                    {\n                                        v38 = v36 + v0 + 3;\n                                        v0 = v36 + v0 + 2;\n                                        v37 = realloc(NULL, v38);\n                                        v40 = v2;\n                                        v39 = v1;\n                                    }\n                                    if (v37 != 0)\n                                    {\n                                        tmp_1 = -2 - v39;\n                                        v41 = v39 + 1;\n                                        v42 = v0 - v40;\n                                        v43 = tmp_1 + v0 - v40 + v37;\n                                        if ((unsigned int)v41 >= 8)\n                                        {\n                                            *((long long *)v43) = *((long long *)&v3);\n                                            *((long long *)(v43 + v41 - 8)) = *((long long *)&(&v3)[v41 + -8]);\n                                            v44 = v43 + 8 & -8;\n                                            v43 -= v43 + 8 & -8;\n                                            v45 = &(&v3)[-1 * v43];\n                                            v46 = (unsigned int)(v41 + v43) & -8;\n                                            if (v46 >= 8)\n                                            {\n                                                v43 = 0;\n                                                do\n                                                {\n                                                    v48 = v43;\n                                                    v43 = (unsigned int)v43 + 8;\n                                                    *((long long *)(v44 + v48)) = *((long long *)(v45 + v48));\n                                                }\n                                                while ((unsigned int)v43 < (v46 & -8));\n                                            }\n                                        }\n                                        else if ((v41 & 4) != 0)\n                                        {\n                                            *((int *)v43) = *((int *)&v3);\n                                            *((int *)(v43 + v41 - 4)) = *((int *)&(&v3)[v41 + -4]);\n                                        }\n                                        else if ((unsigned int)v41 != 0)\n                                        {\n                                            *((char *)v43) = v3;\n                                            if ((v41 & 2) != 0)\n                                            {\n                                                *((short *)(v43 + v41 - 2)) = *((short *)&(&v3)[v41 + -2]);\n                                            }\n                                        }\n                                        v63 = v40 + 1;\n                                        v49 = v37 + v42 - 1;\n                                        if ((unsigned int)v43 >= 8)\n                                        {\n                                            *((long long *)v49) = *((long long *)&v5);\n                                            v43 = v63;\n                                            *((long long *)&((char *)v49)[v43 + -8]) = *((long long *)&(&v5)[v43 + -8]);\n                                            v52 = v49 - (v49 + 8 & -8);\n                                            v54 = (unsigned int)(v43 + v52) & -8;\n                                            if (v54 >= 8)\n                                            {\n                                                v57 = 0;\n                                                do\n                                                {\n                                                    v58 = v57;\n                                                    v57 = (unsigned int)v57 + 8;\n                                                    *((long long *)((v49 + 8 & -8) + v58)) = *((long long *)&(&v5)[v58 + -1 * v52]);\n                                                }\n                                                while ((unsigned int)v57 < (v54 & -8));\n                                            }\n                                        }\n                                        else if (((char)v43 & 4) != 0)\n                                        {\n                                            *((int *)v49) = *((int *)&v5);\n                                            *((unsigned int *)&((char *)v49)[(unsigned long long)v7 + -4]) = v7;\n                                        }\n                                        else if ((unsigned int)v43 != 0)\n                                        {\n                                            *((char *)v49) = v5;\n                                            if ((v5 & 2) != 0)\n                                            {\n                                                *((short *)&((char *)v49)[(unsigned long long)v5 + -2]) = v7;\n                                            }\n                                        }\n                                        v9 = v37;\n                                        v59 = *((long long *)(v10 + 8));\n                                    }\n                                    else\n                                    {\n                                        v9 = &g_40fbbc;\n                                        v10 = (tmp_10 == 0? &g_40fbbc : tmp_10);\n                                        free(NULL);\n                                        sub_408120();\n                                    }\n                                }\n                            }\n                            if ((unsigned int)v26 == 35)\n                            {\n                                do\n                                {\n                                    v61 = *((long long *)(v10 + 8));\n                                    if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                                    {\n                                        *((char **)(v10 + 8)) = &v61[1];\n                                        v62 = *(v61);\n                                        v63 = 1;\n                                    }\n                                    else\n                                    {\n                                        v62 = __uflow(v10);\n                                        v63 = (char)(v62 != -1);\n                                    }\n                                }\n                                while (v62 != 10 && v63 != 0);\n                            }\n                        }\n                        if (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && (unsigned int)v26 != 32 && v28 > 1 && (unsigned int)v26 != 35 && v37 != 0)\n                        {\n                            v60 = __uflow(v10);\n                        }\n                        if ((unsigned int)v26 == 35 && (unsigned int)v26 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v62 == -1 || (unsigned int)v26 != 32 && (unsigned int)v26 != 35 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v28 <= 1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && (unsigned int)v26 != 32 && v28 > 1 && (unsigned int)v26 != 35 && v37 != 0) && (unsigned int)v60 == -1)\n                        {\n                            v10 = (tmp_10 == 0? &g_40fbbc : tmp_10);\n                            sub_408120();\n                            if (v0 == 0)\n                            {\n                                break;\n                            }\n                            *((char *)(v9 + v0)) = 0;\n                        }\n                    }\n                    if ((unsigned int)v26 != 32 && (unsigned int)(v26 - 9) > 1 && (unsigned int)v26 != 35 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v28 <= 1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16))) && (unsigned int)v60 == -1 || (unsigned int)v26 == 35 && (unsigned int)v26 != 32 && (unsigned int)(v26 - 9) > 1 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v62 == -1)\n                    {\n                        v9 = &g_40fbbc;\n                    }\n                    else if (((unsigned int)v26 != 32 && (unsigned int)(v26 - 9) > 1 && (unsigned int)v26 != 35 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v28 <= 1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16))) && (unsigned int)v60 == -1 || (unsigned int)v26 == 35 && (unsigned int)v26 != 32 && (unsigned int)(v26 - 9) > 1 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v62 == -1) && v0 != 0 || ((unsigned int)v26 != 32 && v28 > 1 && (unsigned int)(v26 - 9) > 1 && (unsigned int)v26 != 35 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v0 != 0 || (unsigned int)v26 != 32 && v28 > 1 && (unsigned int)(v26 - 9) > 1 && (unsigned int)v26 != 35 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v0 == 0) && v37 == 0)\n                    {\n                        free(v17);\n                    }\n                }\n                else\n                {\n                    close(v22);\n                }\n            }\n            v9 = &g_40fbbc;\n            free(v17);\n        }\n        *((char *[2])&g_6125d8[0]) = v9;\n    }\n    v67 = v9[0];\n    if (v9[0] != 0)\n    {\n        while (true)\n        {\n            v68 = strcmp((tmp_10 == 0? &g_40fbbc : tmp_10), v9);\n            if (v68 != 0 && (v67 != 42 || v9[1] != 0))\n            {\n                v69 = strlen(v9);\n                v70 = &((char [2])&v9[v69])[1];\n                v71 = strlen(&((char [2])&v9[v69])[1]);\n                v9 = v70 + v71 + 1;\n                v67 = (char)*((char *)(v70 + v71 + 1));\n                if (v67 == 0)\n                {\n                    break;\n                }\n            }\n            if (v68 == 0 || v67 == 42 && v9[1] == 0)\n            {\n                v10 = &((char [2])&v9[strlen(v9)])[1];\n            }\n        }\n    }\n    tmp_3 = v10;\n    tmp_28 = *(v10) == 0;\n    return (tmp_28? \"ASCII\" : tmp_3);\n}\n"
        },
        {
            "funcName": "sub_40c270",
            "funcStartAddr": "0x40c270",
            "funcEndAddr": "0x40c288",
            "decompiledFuncCode": "extern int512_t g_612248;\n\nint sub_40c270()\n{\n}\n"
        },
        {
            "funcName": "sub_4091d0",
            "funcStartAddr": "0x4091d0",
            "funcEndAddr": "0x409226",
            "decompiledFuncCode": "int sub_4091d0()\n{\n    unsigned int v1;  // edi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // cc_dep1\n    unsigned long long v5;  // cc_dep2\n    unsigned long v6;  // d\n    char *v7;  // rdi\n    char *v8;  // rsi\n    unsigned long long v9;  // rcx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // cc_dep1\n    char *v12;  // rdi\n    unsigned long long v13;  // rcx\n    char v14;  // cc_dep1\n    char v15;  // cc_dep2\n\n    v10 = 1;\n    if (v3 != 0)\n    {\n        v9 = 2;\n        v7 = \"C\";\n        v3 = setlocale(v1, 0x0);\n        while (v9 != 0)\n        {\n            v9 -= 1;\n            v4 = *(v8);\n            v5 = *(v7);\n            v7 = &v7[v6];\n            v8 = &v8[v6];\n            break;\n        }\n        v10 = 0;\n        v11 = (v4 > v5) - 0 - (v4 < v5);\n        if ((char)v11 != 0)\n        {\n            v12 = \"POSIX\";\n            v13 = 6;\n            while (v13 != 0)\n            {\n                v13 -= 1;\n                v14 = *(v8);\n                v15 = *(v12);\n                v12 = &v12[v6];\n                v8 = &v8[v6];\n                break;\n            }\n            return 0;\n        }\n    }\n    if (v3 == 0 || (char)v11 == 0)\n    {\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_404fb0",
            "funcStartAddr": "0x404fb0",
            "funcEndAddr": "0x4050bf",
            "decompiledFuncCode": "extern unsigned int g_40e4ad;\nextern unsigned int g_40e4c2;\nextern unsigned int g_40e4ca;\nextern unsigned long long stderr[7];\n\nint sub_404fb0()\n{\n    unsigned long long v1;  // r14\n    void *v2;  // rsi\n    unsigned long long v4[2];  // rdi\n    unsigned int v5;  // rdx\n    unsigned long long v6;  // rax\n    void *v7;  // rbp\n    unsigned long long v8;  // rbx\n    char *v9;  // rax\n\n    v1 = 0;\n    v7 = v2;\n    v8 = 0;\n    fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40e4ad, 0x5), stderr);\n    if (*(v4) != 0)\n    {\n        while (true)\n        {\n            if (v8 != 0)\n            {\n                v6 = memcmp(v1, v7, v5);\n                if (v6 == 0)\n                {\n                    v8 += 1;\n                    v7 += v5;\n                    __fprintf_chk((unsigned int)stderr, 0x1, 0x40e4ca, sub_407210());\n                    if (v4[v8] == 0)\n                    {\n                        break;\n                    }\n                }\n            }\n            if (v8 == 0 || v6 != 0)\n            {\n                v8 += 1;\n                v1 = v7;\n                v7 += v5;\n                __fprintf_chk((unsigned int)stderr, 0x1, 0x40e4c2, sub_407210());\n                if (v4[v8] == 0)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    v9 = stderr[5];\n    if (stderr[5] < stderr[6])\n    {\n        stderr[5] = stderr[5] + 1;\n        *(v9) = 10;\n        return v9;\n    }\n}\n"
        },
        {
            "funcName": "sub_405690",
            "funcStartAddr": "0x405690",
            "funcEndAddr": "0x40576f",
            "decompiledFuncCode": "extern int512_t g_40e576;\nextern int512_t g_40e57a;\n\nint sub_405690()\n{\n    unsigned long v1;  // rdi\n    char *v2;  // rbx\n    char v3[8];  // rax\n    unsigned long long v4;  // rdx\n    unsigned long v5;  // rsi\n    char *v6;  // rax\n\n    v2 = (unsigned long long)dcgettext(0x0, v1, 0x5);\n    if (v1 == v2)\n    {\n        v3 = sub_409230();\n        v4 = v3[0] & 4294967007;\n        if ((v3[0] & 223) == 85)\n        {\n            if ((v3[1] & 223) == 84 && (v3[2] & 223) == 70 && v3[3] == 45 && v3[4] == 56 && v3[5] == 0)\n            {\n                v2 = (*(v2) != 96? &g_40e576 : 4253057);\n            }\n        }\n        else\n        {\n            if (v4 == 71 && (v3[1] & 223) == 66 && v3[2] == 49 && v3[3] == 56 && v3[4] == 48 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0)\n            {\n                v2 = (*(v2) != 96? &g_40e57a : 4253053);\n            }\n        }\n    }\n    if (...)\n    {\n        return ((unsigned int)v5 != 9? \"'\" : \"\\\"\");\n    }\n    if ((v3[1] & 223) == 84 && v3[4] == 56 && v1 == v2 && v3[5] == 0 && v3[3] == 45 && (v3[0] & 223) == 85 && (v3[2] & 223) == 70 || v3[4] == 48 && (v3[1] & 223) == 66 && v1 == v2 && v3[3] == 56 && v4 == 71 && v3[2] == 49 && (v3[0] & 223) != 85 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0 || v1 != v2)\n    {\n        v6 = v2;\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_409150",
            "funcStartAddr": "0x409150",
            "funcEndAddr": "0x409162",
            "decompiledFuncCode": "int sub_409150()\n{\n}\n"
        },
        {
            "funcName": "sub_407630",
            "funcStartAddr": "0x407630",
            "funcEndAddr": "0x407689",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n} struct_0;\n\nint sub_407630()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long long v2;  // r9\n    struct_0 *v3;  // r8\n    unsigned long long v4;  // rax\n    unsigned long long *v5;  // r10\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // r10\n    unsigned long long v8;  // rax\n\n    v2 = 0;\n    do\n    {\n        v4 = v3->field_0;\n        if (v3->field_0 <= 47)\n        {\n            v5 = v4 + v3->field_10;\n            v3->field_0 = (unsigned int)v4 + 8;\n            v6 = *(v5);\n            v0 = *(v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n        }\n        else\n        {\n            v7 = v3->field_8;\n            v3->field_8 = v3->field_8 + 8;\n            v8 = *(v7);\n            v0 = *(v7);\n            if (v8 == 0)\n            {\n                break;\n            }\n        }\n        v2 += 1;\n    }\n    while (v2 != 10);\n    return sub_407230();\n}\n"
        },
        {
            "funcName": "sub_406fc0",
            "funcStartAddr": "0x406fc0",
            "funcEndAddr": "0x406fcc",
            "decompiledFuncCode": "int sub_406fc0()\n{\n}\n"
        },
        {
            "funcName": "sub_407a60",
            "funcStartAddr": "0x407a60",
            "funcEndAddr": "0x407ab5",
            "decompiledFuncCode": "extern unsigned int g_40f660;\nextern unsigned int g_612268;\nextern unsigned long long stdout;\n\nint sub_407a60()\n{\n    unsigned long v2;  // rax\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rax\n\n    if ((unsigned int)v2 < 0)\n    {\n        v3 = ferror(stdout);\n        if (v3 == 0)\n        {\n            error(g_612268, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x40f660, 0x5));\n        }\n    }\n    if (v3 != 0 || (unsigned int)v2 >= 0)\n    {\n        v2 = (unsigned int)sub_409150();\n        return v4;\n    }\n}\n"
        },
        {
            "funcName": "sub_407a00",
            "funcStartAddr": "0x407a00",
            "funcEndAddr": "0x407a13",
            "decompiledFuncCode": "int sub_407a00()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    char *v3;  // rdi\n\n    v0 = v2;\n    strlen(v3);\n}\n"
        },
        {
            "funcName": "sub_406e90",
            "funcStartAddr": "0x406e90",
            "funcEndAddr": "0x406e9a",
            "decompiledFuncCode": "int sub_406e90()\n{\n}\n"
        },
        {
            "funcName": "sub_4071f0",
            "funcStartAddr": "0x4071f0",
            "funcEndAddr": "0x407201",
            "decompiledFuncCode": "int sub_4071f0()\n{\n}\n"
        },
        {
            "funcName": "sub_4050d0",
            "funcStartAddr": "0x4050d0",
            "funcEndAddr": "0x40513d",
            "decompiledFuncCode": "int sub_4050d0()\n{\n    unsigned long long v1;  // rax\n\n    v1 = sub_404e10();\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>))\n    {\n        sub_404f30();\n        sub_404fb0();\n        r9<8>();\n        v1 = -1;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_403590",
            "funcStartAddr": "0x403590",
            "funcEndAddr": "0x403675",
            "decompiledFuncCode": "extern char g_612321;\n\nint sub_403590()\n{\n    char v0;  // [bp-0x68]\n    char v1;  // [bp-0x67]\n    unsigned long long v3;  // rdi\n    unsigned long v4;  // rsi\n    unsigned long long v5;  // r15\n    unsigned long long v6;  // rdx\n    unsigned long long v7;  // r9\n    unsigned long long v8;  // rcx\n    unsigned long long v9;  // rax\n    char *v10;  // rdx\n    unsigned long long v11;  // r13\n    unsigned long long v14;  // r14\n\n    if (v3 > v4)\n    {\n        v5 = v3;\n        v11 = v6;\n        v14 = v7 * (v3 - 1);\n        while (true)\n        {\n            v5 -= 1;\n            if (g_612321 != 0)\n            {\n                v10 = v11 + 7;\n                v9 = &v0;\n                do\n                {\n                    v8 = *(v10);\n                    v9 = &v1;\n                    v10 = &v10[-1];\n                    *((unsigned long long *)&v0) = v8;\n                }\n                while (stack_base + -96 != v9);\n            }\n            v11 += 8;\n            sub_405250();\n            v14 -= v7;\n            if (v5 == v4)\n            {\n                break;\n            }\n        }\n    }\n    return sub_407ac0();\n}\n"
        },
        {
            "funcName": "sub_403d80",
            "funcStartAddr": "0x403d80",
            "funcEndAddr": "0x403fe6",
            "decompiledFuncCode": "typedef struct struct_4 {\n    char padding_0[24];\n    char field_18;\n} struct_4;\n\nextern int512_t g_40d220;\nextern char g_612250;\nextern char g_612251;\nextern char g_612320;\nextern unsigned long long g_6123e0;\nextern unsigned long long g_6123f0;\nextern unsigned long long g_6123f8;\nextern unsigned long long stdout[7];\n\nint sub_403d80()\n{\n    unsigned int v0;  // [bp-0x4c]\n    unsigned long v1;  // [bp-0x48]\n    unsigned long long v2;  // [bp-0x40]\n    void *v4;  // rcx\n    unsigned long v6;  // rsi\n    unsigned long long v7;  // r14\n    unsigned long long v8;  // rdi\n    void *v9;  // rdx\n    unsigned long long v10;  // rbx\n    unsigned long long v11;  // rcx\n    unsigned long long v12;  // r13\n    unsigned long v13;  // rdx\n    unsigned long long v14;  // r12\n    unsigned long long v15;  // rsi\n    unsigned long long v16;  // rdi\n    unsigned long long v19;  // rsi\n    unsigned long long v20;  // rdi\n    unsigned long long v21;  // rdx\n    unsigned long long v22;  // rcx\n    unsigned long long v23;  // r9\n    unsigned long long v24;  // r8\n    unsigned long long v29;  // rbx\n    unsigned long long v31;  // rcx\n    unsigned long long v32;  // rax\n    char *v33;  // rdx\n    char *v34;  // rax\n    unsigned long long|char * v35;  // rax\n    unsigned long long v36;  // rbp\n\n    v7 = v6;\n    v2 = v8;\n    if (g_612251 != 0 && g_612250 == 0 && g_6123e0 == v6)\n    {\n        v35 = memcmp(v9, v4, v6);\n        if ((unsigned int)v35 == 0 && g_612320 == 0)\n        {\n            v35 = puts(\"*\");\n            g_612320 = 1;\n        }\n    }\n    if (g_612251 == 0 || g_6123e0 != v6 || g_612250 != 0 || (unsigned int)v35 != 0)\n    {\n        g_612320 = 0;\n        if (g_6123f0 != 0)\n        {\n            v36 = 0;\n            v1 = v4 + v6;\n            do\n            {\n                v10 = v36 * 40;\n                v11 = *((int *)&((char *)&g_40d220)[4 * (unsigned long long)(unsigned int)*((int *)(g_6123f8 + v36 * 40 + 4))]);\n                v12 = (0 CONCAT g_6123e0) % *((int *)&((char *)&g_40d220)[4 * (unsigned long long)(unsigned int)*((int *)(g_6123f8 + v36 * 40 + 4))]);\n                v0 = (0 CONCAT g_6123e0) % *((int *)&((char *)&g_40d220)[4 * (unsigned long long)(unsigned int)*((int *)(g_6123f8 + v36 * 40 + 4))]);\n                v13 = (0 CONCAT g_6123e0 - v7) % *((int *)&((char *)&g_40d220)[4 * (unsigned long long)(unsigned int)*((int *)(g_6123f8 + v36 * 40 + 4))]) >> 64;\n                v14 = (0 CONCAT g_6123e0 - v7) % *((int *)&((char *)&g_40d220)[4 * (unsigned long long)(unsigned int)*((int *)(g_6123f8 + v36 * 40 + 4))]);\n                if (v36 == 0)\n                {\n                    v15 = 0;\n                    v16 = v2;\n                    *((long long *)6366240)();\n                }\n                else\n                {\n                    __printf_chk(0x1, \"%*s\");\n                }\n                v19 = v14;\n                v20 = v12;\n                v21 = v4;\n                v22 = g_6123f8 + v10 + 16;\n                v23 = (unsigned int)*((int *)(g_6123f8 + v10 + 32));\n                v24 = (unsigned int)*((int *)(g_6123f8 + v10 + 28));\n                *((long long *)(g_6123f8 + v10 + 8))();\n                if (*((char *)(v10 + g_6123f8 + 24)) != 0)\n                {\n                    __printf_chk(0x1, \"%*s\");\n                    fwrite_unlocked(\"  >\", 0x1, 0x3, stdout);\n                    if (v7 != 0)\n                    {\n                        v29 = v21;\n                        do\n                        {\n                            v29 += 1;\n                            v31 = (char)*((char *)(v29 - 1));\n                            v32 = (char)*((char *)(v29 - 1));\n                            if ((*((char *)(*((long long *)(unsigned long long)__ctype_b_loc()) + (v31 << 1) + 1)) & 64) == 0)\n                            {\n                                v32 = 46;\n                            }\n                            v33 = stdout[5];\n                            if (stdout[5] < stdout[6])\n                            {\n                                stdout[5] = stdout[5] + 1;\n                                *((unsigned long long *)&v33) = v32;\n                            }\n                            else\n                            {\n                                __overflow();\n                            }\n                        }\n                        while (v29 != v1);\n                    }\n                    v34 = stdout[5];\n                    if (stdout[5] < stdout[6])\n                    {\n                        stdout[5] = stdout[5] + 1;\n                        *(v34) = 60;\n                    }\n                    else\n                    {\n                        __overflow();\n                    }\n                }\n                v35 = stdout[5];\n                if (stdout[5] < stdout[6])\n                {\n                    stdout[5] = stdout[5] + 1;\n                    *(v35) = 10;\n                }\n                else\n                {\n                    v35 = __overflow();\n                }\n                v36 = 1;\n            }\n            while (g_6123f0 > 1);\n        }\n    }\n    g_612250 = 0;\n    return v35;\n}\n"
        },
        {
            "funcName": "sub_402c8b",
            "funcStartAddr": "0x402c8b",
            "funcEndAddr": "0x402caa",
            "decompiledFuncCode": "extern unsigned long long program_invocation_short_name;\n\nint sub_402c8b()\n{\n    unsigned long long v1;  // rax\n\n    v1 = &program_invocation_short_name;\n    if (false)\n    {\n        v1 = 0;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_407a20",
            "funcStartAddr": "0x407a20",
            "funcEndAddr": "0x407a4c",
            "decompiledFuncCode": "extern unsigned int g_40f64f;\nextern unsigned int g_612268;\n\nint sub_407a20()\n{\n    dcgettext(0x0, 0x40f64f, 0x5);\n    error(g_612268, 0x0, \"%s\");\n}\n"
        },
        {
            "funcName": "sub_4040c0",
            "funcStartAddr": "0x4040c0",
            "funcEndAddr": "0x4047f9",
            "decompiledFuncCode": "int sub_4040c0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_408120",
            "funcStartAddr": "0x408120",
            "funcEndAddr": "0x408198",
            "decompiledFuncCode": "int sub_408120()\n{\n    unsigned int v0;  // [bp+0x0]\n    void *v2;  // rdi\n    unsigned long long v4;  // rax\n    unsigned long long v8;  // rax\n\n    if (fileno(v2) >= 0)\n    {\n        v4 = __freading();\n        if ((v4 == 0 || (unsigned long long)lseek(fileno(v2), 0x0, 0x1) != -1) && sub_4081a0() != 0)\n        {\n            v8 = fclose(v2);\n            if (v0 != 0)\n            {\n                *(__errno_location()) = v0;\n                v8 = -18446744069414584321;\n            }\n            return v8;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_409090",
            "funcStartAddr": "0x409090",
            "funcEndAddr": "0x409149",
            "decompiledFuncCode": "int sub_409090()\n{\n    unsigned long long v0;  // [bp-0x800]\n    void *v2;  // rax\n    unsigned long long v3;  // rbx\n    void *v4;  // rbp\n    void *v5;  // rdi\n    unsigned int *v7;  // r12\n    unsigned long long v9;  // rax\n\n    v0 = 2000;\n    v2 = sub_4097b0();\n    v3 = v0;\n    if (false)\n    {\n        *(__errno_location()) = 75;\n    }\n    if (stack_base + 0 != 0)\n    {\n        v4 = v2;\n        if (!(fwrite(v2, 0x1, 0x7d0, v5) >= 2000))\n        {\n            v3 = -18446744069414584321;\n            if (v4 != stack_base + -2040)\n            {\n                free(v4);\n                *(__errno_location()) = *(v7);\n            }\n        }\n        else if (v4 != stack_base + -2040)\n        {\n            free(v4);\n        }\n    }\n    else\n    {\n        v3 = -18446744069414584321;\n        sub_4097a0();\n    }\n    v9 = v3;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_406dc0",
            "funcStartAddr": "0x406dc0",
            "funcEndAddr": "0x406dca",
            "decompiledFuncCode": "int sub_406dc0()\n{\n}\n"
        },
        {
            "funcName": "sub_407050",
            "funcStartAddr": "0x407050",
            "funcEndAddr": "0x40705d",
            "decompiledFuncCode": "int sub_407050()\n{\n}\n"
        },
        {
            "funcName": "sub_408320",
            "funcStartAddr": "0x408320",
            "funcEndAddr": "0x40891e",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    char padding_18[8];\n    struct struct_1 *field_20;\n} struct_0;\n\nextern unsigned int g_40fa98;\nextern unsigned int g_40fab8;\nextern unsigned int g_40fae8;\nextern unsigned int g_40fb08;\nextern unsigned int g_40fb38;\nextern unsigned int g_40fb89;\nextern unsigned long long stderr;\n\nint sub_408320()\n{\n    char *v0;  // [bp-0x78]\n    unsigned long long v1;  // [bp-0x70]\n    unsigned int *v2;  // [bp-0x68]\n    char *v3;  // [bp-0x58]\n    unsigned int v4;  // [bp-0x50]\n    char v5;  // [bp-0x49]\n    unsigned int v6;  // [bp-0x44]\n    unsigned int v7;  // [bp-0x40]\n    unsigned int v8;  // [bp-0x3c]\n    struct_0 *v9;  // [bp+0x8]\n    unsigned int v10;  // [bp+0x10]\n    char v11;  // [bp+0x18]\n    char *v12;  // r14\n    char *v13;  // rdx\n    unsigned long v14;  // r8\n    char *v15;  // rbp\n    unsigned long long v16;  // rax\n    unsigned long long v17;  // r13\n    unsigned long long v18;  // rcx\n    unsigned long long|unsigned long long * v19;  // rbx\n    unsigned long long|unsigned int|unsigned long v20;  // r12\n    char *v21;  // r15\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // r8\n    char *v25;  // rdi\n    unsigned long long v26;  // r15\n    unsigned long long v27;  // rbp\n    unsigned long long v28;  // rax\n    unsigned int v29;  // r9d\n    unsigned long long v30;  // r9\n    unsigned long long v31;  // rdx\n    unsigned int v32;  // ecx\n    unsigned long long *v34;  // rsi\n    char *v35;  // rbp\n    unsigned long long v36;  // rdx\n    unsigned long v39;  // rdi\n    unsigned long long|unsigned long long * v40;  // rbx\n    unsigned long long v41;  // r12\n    unsigned long long v43;  // rbp\n    unsigned long long v46;  // rax\n    unsigned int *v47;  // rdx\n    unsigned long long v48;  // r14\n\n    v12 = v9->field_20;\n    v3 = v13;\n    v2 = v14;\n    v15 = v9->field_20;\n    *((struct struct_1 *)&v5) = *(v9->field_20);\n    if (*(v9->field_20) != 61 && *(v9->field_20) != 0)\n    {\n        do\n        {\n            v15 = &v15[1];\n            v16 = *(v15);\n        }\n        while ((char)v16 != 0 && v16 != 61);\n        v17 = v15 - v12;\n    }\n    if (*(v9->field_20) == 61 || *(v9->field_20) == 0)\n    {\n        v17 = 0;\n    }\n    v19 = v18;\n    v20 = 0;\n    v0 = *((long long *)v18);\n    v21 = *((long long *)v18);\n    if (*((long long *)v18) != 0)\n    {\n        while (true)\n        {\n            v22 = strncmp(v21, v9->field_20, v17);\n            if (v22 == 0)\n            {\n                v23 = strlen(v21);\n            }\n            if (v22 != 0 || v23 != v17)\n            {\n                v19 += 32;\n                v21 = *(v19);\n                v24 = v20 + 1;\n                if (*(v19) != 0)\n                {\n                    v20 = v24;\n                }\n                else\n                {\n                    v8 = v20;\n                    v19 = 0;\n                    v6 = -1;\n                    v25 = v0;\n                    v26 = 0;\n                    v4 = 0;\n                    v7 = 0;\n                    v1 = 0;\n                    v0 = v15;\n                    v27 = v18;\n                    do\n                    {\n                        v28 = strncmp(v25, v9->field_20, v17);\n                        if (v28 == 0)\n                        {\n                            if (v19 == 0)\n                            {\n                                v6 = v26;\n                                v19 = v27;\n                            }\n                            else if (v29 != 0 || *((int *)(v19 + 24)) != *((int *)(v27 + 24)) || *((long long *)(v19 + 16)) != *((long long *)(v27 + 16)) || *((int *)(v19 + 8)) != *((int *)(v27 + 8)))\n                            {\n                                if (v4 == 0)\n                                {\n                                    if (v10 == 0)\n                                    {\n                                        v4 = 1;\n                                    }\n                                    else if (v1 == 0)\n                                    {\n                                        v1 = calloc((int)v8, 0x1);\n                                        v4 = 1;\n                                    }\n                                    if (false)\n                                    {\n                                        v7 = 1;\n                                        *((char *)(v1 + (int)v6)) = 1;\n                                    }\n                                    if (v1 != 0)\n                                    {\n                                        *((char *)(v1 + v26)) = 1;\n                                    }\n                                }\n                            }\n                        }\n                        v27 += 32;\n                        v25 = *((long long *)v27);\n                        v26 += 1;\n                    }\n                    while (*((long long *)v27) != 0);\n                    v15 = v0;\n                    if (v1 == 0)\n                    {\n                        v30 = v4;\n                        if (v4 == 0)\n                        {\n                            if (v19 == 0)\n                            {\n                                break;\n                            }\n                            v20 = v6;\n                        }\n                    }\n                    if (v4 != 0 || v1 != 0)\n                    {\n                        if (v10 != 0)\n                        {\n                            if (v4 != 0)\n                            {\n                                __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x40fa98, 0x5), *(v34));\n                                v12 = v9->field_20;\n                            }\n                            else\n                            {\n                                flockfile(stderr);\n                                __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x40fab8, 0x5), *(v34));\n                                v39 = stderr;\n                                v40 = v18;\n                                v43 = v1;\n                                v41 = v1 + v20 + 1;\n                                do\n                                {\n                                    if (*((char *)v43) != 0)\n                                    {\n                                        __fprintf_chk(v39, 0x1, 0x40fb89, *((long long *)&v11));\n                                        v39 = stderr;\n                                    }\n                                    v43 += 1;\n                                    v40 = &v40[4];\n                                }\n                                while (v41 != v43);\n                                fputc(0xa, v39);\n                                funlockfile(stderr);\n                                v12 = v9->field_20;\n                            }\n                        }\n                        if (v7 != 0)\n                        {\n                            free(v1);\n                        }\n                        v48 = &v12[strlen(v12)];\n                        v9->field_20 = v48;\n                        v9->field_0 = v9->field_0 + 1;\n                        v9->field_8 = 0;\n                        v46 = 63;\n                    }\n                }\n            }\n            if ((v22 == 0 || *(v19) == 0) && (v22 == 0 || v4 == 0) && (v22 == 0 || v1 == 0) && (*(v19) == 0 || v23 == v17) && (v4 == 0 || v23 == v17) && (v1 == 0 || v23 == v17))\n            {\n                v31 = v9->field_0;\n                v9->field_20 = 0;\n                v9->field_0 = (unsigned int)v31 + 1;\n                v32 = *((int *)(v19 + 8));\n                if (*(v15) == 0)\n                {\n                    if (v32 == 1)\n                    {\n                        if ((unsigned int)((unsigned long long)v9->field_0 + 1) < v25)\n                        {\n                            v9->field_0 = v9->field_0 + 2;\n                            v9->field_10 = v34[1 + v31];\n                        }\n                        else\n                        {\n                            if (v10 != 0)\n                            {\n                                __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x40fb38, 0x5), *(v34));\n                            }\n                            v9->field_8 = *((int *)(v19 + 24));\n                            v46 = (unsigned long long)(char)(*(v3) != 58) * 5 + 58;\n                        }\n                    }\n                }\n                else\n                {\n                    if (v32 != 0)\n                    {\n                        v35 = &v15[1];\n                        v9->field_10 = v35;\n                    }\n                    else\n                    {\n                        if (v10 != 0)\n                        {\n                            __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x40fb08, 0x5), *(v34));\n                        }\n                        v9->field_8 = *((int *)(v19 + 24));\n                        v46 = 63;\n                    }\n                }\n                if ((unsigned int)((unsigned long long)v9->field_0 + 1) < v25 && *(v15) == 0 || *(v15) == 0 && v32 != 1 || *(v15) != 0 && v32 != 0)\n                {\n                    if (v2 != 0)\n                    {\n                        *((unsigned long *)&v2) = v20;\n                    }\n                    v47 = *((long long *)(v19 + 16));\n                    v46 = (unsigned int)*((int *)(v19 + 24));\n                    if (*((long long *)(v19 + 16)) == 0)\n                    {\n                        break;\n                    }\n                    *(v47) = v46;\n                    v46 = 0;\n                }\n            }\n        }\n        if (...)\n        {\n            return v46;\n        }\n    }\n    if (v29 != 0)\n    {\n        if (*((char *)(v34[(long long)(int)v9->field_0] + 1)) != 45)\n        {\n            v36 = strchr(v3, v5);\n            v46 = -18446744069414584321;\n        }\n        if ((v36 != 0 || *((long long *)v18) != 0) && (*((char *)(v34[(long long)(int)v9->field_0] + 1)) != 45 || *((long long *)v18) != 0))\n        {\n            return v46;\n        }\n    }\n    if (v29 == 0 && *((long long *)v18) == 0 || v36 == 0 && v29 != 0 || *((char *)(v34[(long long)(int)v9->field_0] + 1)) == 45 && v29 != 0)\n    {\n        if (v10 != 0)\n        {\n            __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x40fae8, 0x5), *(v34));\n        }\n        v9->field_20 = 0;\n        v9->field_0 = v9->field_0 + 1;\n        v9->field_8 = 0;\n        return 63;\n    }\n}\n"
        },
        {
            "funcName": "sub_407210",
            "funcStartAddr": "0x407210",
            "funcEndAddr": "0x407226",
            "decompiledFuncCode": "int sub_407210()\n{\n}\n"
        },
        {
            "funcName": "sub_407980",
            "funcStartAddr": "0x407980",
            "funcEndAddr": "0x407997",
            "decompiledFuncCode": "int sub_407980()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_4077d0();\n}\n"
        },
        {
            "funcName": "sub_406cc2",
            "funcStartAddr": "0x406cc2",
            "funcEndAddr": "0x406ceb",
            "decompiledFuncCode": "int sub_406cc2()\n{\n    unsigned long v0;  // [bp-0x30]\n    unsigned long v1;  // [bp-0x28]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v4;  // [bp-0x10]\n    unsigned long v5;  // [bp-0x8]\n    unsigned long v7;  // r15\n    unsigned long v8;  // r14\n    unsigned long v9;  // r13\n    unsigned long v10;  // r12\n    unsigned long v11;  // rbx\n\n    v5 = v7;\n    v4 = v8;\n    v3 = v9;\n    v2 = v10;\n    v1 = stack_base + 0;\n    v0 = v11;\n}\n"
        },
        {
            "funcName": "sub_403d20",
            "funcStartAddr": "0x403d20",
            "funcEndAddr": "0x403d78",
            "decompiledFuncCode": "extern unsigned long long g_6123c8;\n\nint sub_403d20()\n{\n    unsigned long long v1;  // rbp\n    unsigned int *v2;  // rdi\n    unsigned long long v3;  // rax\n\n    v1 = 1;\n    *(v2) = -1;\n    if (g_6123c8 != 0)\n    {\n        while (true)\n        {\n            v3 = fgetc(g_6123c8);\n            *((unsigned long long *)&v2) = v3;\n            if (v3 != -1)\n            {\n                break;\n            }\n            __errno_location();\n            v1 = (unsigned int)v1 & sub_4038f0() & sub_403a50();\n            if (g_6123c8 == 0)\n            {\n                break;\n            }\n        }\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_407abb",
            "funcStartAddr": "0x407abb",
            "funcEndAddr": "0x407abd",
            "decompiledFuncCode": "int sub_407abb()\n{\n}\n"
        },
        {
            "funcName": "sub_4077d0",
            "funcStartAddr": "0x4077d0",
            "funcEndAddr": "0x4077ea",
            "decompiledFuncCode": "int sub_4077d0()\n{\n    unsigned int v1;  // rdi\n    unsigned long long v2;  // rax\n\n    v2 = malloc(v1);\n    if (v2 == 0 && v1 != 0)\n    {\n        sub_407a20(); /* do not return */\n    }\n    if (v1 == 0 || v2 != 0)\n    {\n        return v2;\n    }\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Angr",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_od.elf"
}